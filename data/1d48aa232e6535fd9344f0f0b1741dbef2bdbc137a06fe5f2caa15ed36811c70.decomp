sub_129bd
test ax 0x8c37
xor [ bp + di ] ch
or ax 0x9261
popf
cmova di si
adc si [ bx - 0x3af5 ]
xor al 0x86
idiv [ bx - 0x62 ]
call 0x17998
xor cl al
ror [ bx + di ] 0x1
lodsb [ si ]

sub_17998
sbb al 0xd3
in al dx
or [ bx + si ] 0x7a10
outsw
adc al 0x47
inc di
sub [ bx + di - 0x2ffa ] dx
mov sp 0x5970
mov ah 0xf
loop 0x179be
mov bl 0x8f
in ax 0xae
int 0x9f
fmul [ di ]
cwd
mov ch 0x68
feni8087_nop
outsb
pusha
lds dx [ bp + di + 0x6a ]
inc sp
jcxz 0x179cb
or [ bx ] di
scasw [ di ]
jl 0x17a43
insb
stosd [ di ]
fldcw [ bx + di ]
push ss
call 0x1b4c9
push di
cmpsw [ si ] [ di ]
into
mov bl dh
sbb bx 0x1f
aas
scasb [ di ]
pavgb mm6 [ di + 0x7c ]
inc cx
0x4011 0x1315
mov es [ bp - 0x5331 ]
int3
or di dx
xor [ bp + 0x78c7 ] sp
lodsb [ si ]
jl 0x17a0c
scasw [ di ]
jae 0x179fe
add [ si + 0xf ] 0xc0f8
and bl ch
mov ah [ bp - 0x49 ]
push ss
jl 0x179f9
jle 0x17a14
or ax 0x423b
pop ds
popa
inc sp
pop es
0x18f7 0xf63d
or bx [ si - 0x50be ]
retn
push bp
mov gs [ bx + 0x5984 ]
daa
cmp [ bx + si + 0x71 ] bp
dec di
sar sp 0x27
out dx ax
cmp [ si - 0x6bc3 ] sp
cmp al 0xd8
mov [ bp + di ] si
xor dl [ si ]
dec bp
aas
stc
jae 0x17f7c
rcl [ bx + si + 0x276f ] cl
jno 0x17a7b
pop dx
das
adc ax 0x5f2a
cld
xor ax 0x2e7e
lodsw [ si ]
loop 0x1798e
jmp 0x19e49
cmp [ 0x7cac ] dh
popa
pop [ bx + si - 0x51fa ]
jno 0x17fba
mov es [ si ]
xor ah bl
xchg sp ax
xor cx di
loope 0x17aa0
stc
arpl cx si
or al 0xe8
jno 0x179c9
xor ax 0xbb78
inc sp
psubb mmx0 mmx0
add [ si + 0x768a ] ax
dec bx
pop cx
shl dl cl
and [ bx + di ] dl
xor ax cx
xor al 0xe2
and dh 0xc
shl [ bx + di + 0xb ] 0x1
loope 0x17fad
xchg dx ax
xor [ si - 0x1308 ] di
adc cl ah
das
out 0x6 al
0xffffe221 0xc007
pop bp
xlat
inc di
outsw
scasw [ di ]
stc
jb 0x17ad6
mov [ bp + si + 0x7238 ] gs
sbb ax 0x3a3c
dec di
lds dx [ bx + di - 0x19 ]
clc
xchg bl bl
cmp ch dh
dec dx
popa
rcl [ bx + si + 0x3afa ] 0x1
sub [ bp + di - 0xe ] ah
int 0x9e
jpo 0x17a24
in al dx
adc cx di
fcomp [ si ]
shr sp cl
enter 0x9938 0xbe
popa
xlat
stosw [ di ]
movsw [ di ] [ si ]
0xffffe221 0xc007
sbb al 0xc1
sti
stosw [ di ]
mov dh 0x9e
mov cl 0x99
fisubr [ di ]
out dx al
div [ bp + di + 0x3d26 ]
dec di
int 0x90
adc bp sp
fwait
or ch [ bp + si ]
jmp 0x17f7d
inc dx
aas
jg 0x17ab5
daa
dec sp
cbw
xor al 0x98
lodsb [ si ]
adc bl dl
insb
cmp di si
aam 0x74
cmp [ si ] dh
fcomp [ 0x4c12 ]
jae 0x17a4b
mov ch 0x4a
lodsb [ si ]
inc dx
cmp [ 0xffffffffffffe5a0 ] 0x899e
xchg si ax
test [ bx + di ] ch
arpl ax si
sbb ah [ bp + di ]
scasb [ di ]
shl [ di + 0x31 ] 0x4a
pushf
cmpsb [ si ] [ di ]
inc [ bp + di - 0x10 ]
mov ax 0xa042
0xd17c
jmp 0x17f7d
mov bh 0x16
add bh [ bp + si - 0xe ]
retn 0x760d
sub_28310
fcomp [ di ]
jg 0x282e1
and ax 0x23df
push es
add [ bx + si ] al
mov bx [ bp + si ]
add [ bx + si ] al
adc ax 0x0
add [ bx + 0x6f ] dh
jb 0x28357
clc
arpl [ bx + di - 0x27c9 ] cx
arpl [ bp + di ] di
imul si [ bp + di - 0x7b65 ] 0x26ec
and ax 0x7947
iret
das
je 0x2835e
xor al 0x9e

insw
das
je 0x28364
add cl [ bp - 0x1cf0 ]
cbw
insw
xor [ gs : 0x6d78 ] bp
mov ah 0x4f
stc
push cs
xchg di ax
loope 0x2831e
jpe 0x28363
pop es
mov dl 0x19
dec bx
je 0x28331
inc si
sahf
push cx
lodsb [ si ]
sbb [ bx + di ] bx
dec cx
ficomp [ di + 0x13 ]
add ah [ di ]
cmp [ 0xffffffffffffa50a ] dx
imul bp cx 0x81a1
fidivr [ bp + si + 0x28 ]
test ah ch
and ax 0x7947
in al dx
cmp [ bx + di - 0x2cf0 ] dh
popf
jb 0x28339
mov [ bx + di - 0x7e ] dl
xor [ si - 0x6b1 ] 0xe
adc al [ bp + si ]
mov ss [ bx + si ]
jcxz 0x28301
insw
add cx [ bx + di ]
hlt
push ss
or ah [ di - 0x1697 ]
mov ax [ 0xffffffffffffde81 ]
push dx
fnstenv [ bx ]
js 0x28370
cmpsb [ si ] [ di ]
sbb ax 0x7aa7
test ax 0xe2
sbb al 0x66
popf
push dx
scasb [ di ]
push bp
sub cl [ di + 0x272 ]
jno 0x283aa
xchg sp ax
push es
xor al 0xc4
imul dx sp 0xee71
sbb al 0xe
dec bx
sub ax 0x7007
add bx dx
adc [ bp + si ] dl
0xffff8ea2 0x4733
insb
in al dx
pop cx
dec bp
mov bx [ bp + di ]
aaa
sbb [ bp - 0x5e9 ] bh
pop ds
fdivr [ bx + di - 0x44e ]
loope 0x28394
xor [ bx + si + 0x4 ] dh
dec cx
cmpsb [ si ] [ di ]
sub al 0x81
inc dx
push si
pop cx
push sp
push cs
sbb [ si ] di
xchg si ax
jle 0x283ca
ffree st2
stc
or al 0x7f
test ax 0x59e0
inc bx
inc ax
fadd [ bx + di - 0x1a ]
sbb bl [ bx + di ]
push ss
or bl [ bp + di ]
dec si
stosb [ di ]
fst [ bx ]
lahf
jae 0x28387
adc [ si ] 0x26
shr ch cl
int 0xf1
sbb [ bx ] al
or [ si ] bl
popfd
sub_2e110
add cx [ bx + 0x1255 ]
fild [ bx + di - 0x77a1 ]
adc si [ si - 0x2f ]
sub dh [ bp + si + 0x3884 ]
lodsb [ si ]
cwd
adc [ bx + si + 0x61 ] 0x60
push es
push cx
fisttp [ bp + si ]
push cx
movsb [ di ] [ si ]
call 0x26812
push sp
arpl [ fs : di + 0x2092 ] ax
adc [ bp + di + 0x1186 ] cx
add ah [ bp + di + 0x70 ]
int1
inc dx
rol [ bx + 0xb ] cl
pop di
mov bh 0xfa
js 0x2e12a
sbb ax [ bp + si + 0x630c ]
leave
cmp bx 0x4a0
push bx
retn 0xd027
sub_351a7
push si
sub ch dl
add ch [ bp - 0x380d ]
dec dx
lds cx [ bx + di - 0x62b9 ]
jae 0x3516a
in ax 0x54
mul [ si - 0x635b ]
cmpsb [ si ] [ di ]
lds ax [ bx + di + 0xd53 ]
mov ax [ 0x1d4e ]
adc ax 0x9984
sbb ax 0x4ea1
sub ax 0xae75
movsb [ di ] [ si ]
cmp dx si
or ax 0x2da3
imul si [ bp - 0x7c ] 0xecb6
fst [ bx + di ]
fcmovbe st2
push 0x47
int1
imul ax [ di + 0x1381 ] 0x876b
add dh [ bp + di ]
insb
xchg dx bp
inc si
mov ch 0x6e
push eax
stosb [ di ]
mov bx 0xaa1b
sbb ax 0x4a01
mov ch 0x8e
ror [ bx + di + 0xd6a ] 0x1
cmpsb [ si ] [ di ]
cmp dx bp
cmp dl [ si + 0x67 ]
stosb [ di ]
jne 0x351ab
scasb [ di ]
outsb
push sp
jmp 0x35195
outsw
test ax 0xe75e
lodsw [ si ]
xchg bp ax
0xffff88ba 0x7ceb
sub_352a6
mov ss ax
xchg si ax
inc si
cmp ax [ bp + si ]
mov [ bx + 0x2b ] cl
or al 0x9c
pop ax
cmp dx [ si ]
cbw
popa
cmp dx [ si + 0x37 ]
stosb [ di ]
popa
rcl [ bp + si - 0x1577 ] 0x1
out dx al
xchg [ bp + si + 0x47 ] ch
adc [ bp + si + 0xd ] 0x8b
xchg si ax
lodsb [ si ]
push sp
retn
sub_35d6c
xchg sp ax
mov di 0x11fe
test al 0x7
or ax 0xa12b
rcr [ bx + si - 0x1d55 ] cl
xchg sp ax
add ax 0xc9aa
mov bx 0x4c8a
lea bp [ bx + 0x58 ]
stosb [ di ]
xchg bp ax
jo 0x35d1a
rcr [ si + 0x74 ] cl
xchg sp ax
imul di [ bx ] 0x34c5
cmpsw [ si ] [ di ]
je 0x35df6
jmp 0x35e2e
mov [ 0xffffffffffffea84 ] al
mov si 0xd36c
sahf
mov di 0x342e
outsd
fldpi
mov bl 0xa1
jg 0x35dc5
lahf
push di
push di
or bx 0x4b
xchg cx ax
xor [ bx + 0x645d ] ch
enter 0x510d 0x7b
mov bp 0x1bea
mov bx 0x6a9e
dec ax
enter 0x3fcc 0x58
insw
adc ax 0xf89e
mov al [ 0x3b5 ]
adc [ bp - 0x5036 ] bx
sbb [ bx - 0x1e3a ] di
sub al 0xd0
popa
adc [ bx - 0xc57 ] al
iret
mov di 0x2e4f
sub ch bh
xchg dl dl
cld
and cl [ bp + 0xa9e ]
or [ bp - 0x25 ] sp
or ax 0xb34a
xor [ di + 0x7236 ] cl
cmp ax 0x38e5
hlt
sub_35e9d
sar cl 0x60
cmp ch [ bp + si ]
sub [ bx + si - 0x2a ] bp
xchg cx ax
dec bx
imul di cx 0xde21
and bl [ bx + di ]
dec dx
or ax 0x62b3
jns 0x35ea2
div [ bx + si + 0x68bf ]
das
lds si [ di ]
cmc
aaa
mov sp 0xfd5b
dec bp
sbb al 0x8e
out dx al
loopne 0x35e64
out 0xda ax
sub_35f3a
pusha
xor bl [ di ]
int 0xe5
dec bx
outsb
or cl ch
add [ si ] bh
popa
mov bp [ bp + si + 0x18e3 ]
aas
mov [ 0x7da5 ] ax
mov [ bp + si - 0x77 ] bh
xchg [ bx + di - 0x7cbe ] ah
0xffffe9d9 0x2274
sub_10280
adc [ bp + di - 0x40 ] cx
dec ax
fwait
sub si [ bp + di ]
lahf
mov al 0x9f
neg [ bx - 0x2d ]
iret
sub_1028e
sub al 0x9
sub [ si + 0x2e ] cl
dec dx
imul sp [ bx + si - 0x3e ] 0x36
adc al bl
cmc
hlt
sub_1074f
push dx
xor cx 0x31fa
xchg di ax
adc dx [ bp + si + 0x8 ]
inc bp
inc si
add bx [ 0x5a37 ]
popf
outsb
hlt
sub_16b01
mov si 0xc026
lds cx [ di + 0x90a ]
push sp
stc
fiadd [ bx - 0x54 ]
0x735d 0xb09
sbb [ bx ] dx
cmp ax 0x78eb
cmp dh ah
cmpsb [ si ] [ di ]
inc cx
retn 0x6e87
sub_1b4c9
xchg bp ax
movsw [ di ] [ si ]
lahf
sub_20bc6
fdivr [ bp + 0x1c ]
lea sp [ si - 0x6843 ]
aaa
dec bx
[ cs : bx + si - 0x3920 ]
sub_20ca7
jmp bp
sub_26812
push ss
test al 0x52
or [ bp + 0x2e47 ] bl
0x498a
sub_2821b
daa
0xffffe147 0x605f
sub_310c2
push ds
lahf
outsb
out dx al
outsw
outsw
fidivr [ di ]
fcomp [ bx - 0x42 ]
jpe 0x310c4
retn
sub_310d0
in ax 0xf1
aad 0x3f
std
idiv [ bx - 0x6802 ]
fistp [ si - 0x1 ]
cli
int1
hlt
sub_31fde
cmp bl [ bx + si - 0xccf ]
pop dx
shl [ bx + si ] cl
push bx
push di
iret
sub_33f44
xor al 0xa7
mov dx 0xefbf
xchg di ax
call 0x2e110
or ch ch
hlt
sub_34415
shr sp cl
outsb
popa
push si
push di
int3
sub_3444f
push es

sub_34451
adc ax 0x8c25
in ax 0x32
push ax
push cs
push si
0x4798
sub_3445c
popf
lodsb [ si ]
sti
mov ch 0x23
0x5d75 0xea7f
sub_34466
cld
fild [ bx + si - 0x360a ]
push sp
xchg si bx
inc ax
hlt
sub_3461c
shr sp cl
outsb
popa
push si
push di
int3
sub_34656
push es

sub_34658
adc ax 0x8c25
in ax 0x32
push ax
push cs
push si
0x4798
sub_34663
popf
lodsb [ si ]
sti
mov ch 0x23
0x5d75 0xea7f
sub_3466d
cld
fild [ bx + si - 0x360a ]
push sp
xchg si bx
inc ax
hlt
sub_352ea
mov [ 0x5aa5 ] al
stosb [ di ]
popa
rcl [ bp + si + 0x2d ] 0x1
aad 0xb0
push 0x4ec9
xor ax 0x5a2c
xor dl [ bx + di + 0xd ]
mov dx [ bp + 0x544c ]
retn
sub_35f32
in al dx
push sp
dec sp
pop si
cmpsb [ si ] [ di ]
insb

sub_35faa
inc [ bp + di ]
add [ bx + si + 0x4b ] dl
add ax [ si ]
adc al 0x0
push es
add [ bx + si ] cl
add [ bx + si ] al
add [ bx + di ] ah
add ch al
int3
sub_3d02b
retn 0x90e9
sub_4392a
mov al 0x9f
leave
or al 0x33
lodsw [ si ]
adc [ bp + di - 0x64 ] si
dec bx
xlat
int1
pop ds
stosw [ di ]
jmp 0x4aa24
sub_457f9
popa
cmc
sbb [ di ] bh
pop ds
dec bp
iret
sub_45800
mov ax [ 0x1e06 ]
dec bp
stosb [ di ]
int3
