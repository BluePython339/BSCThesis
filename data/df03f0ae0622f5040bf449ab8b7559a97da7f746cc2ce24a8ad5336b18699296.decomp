sub_10001020
push ebp
mov ebp esp
push 0xffffffff
push sub_10015cab
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
push 0xc
call sub_1000ba97
mov edi eax
add esp 0x4
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
xor esi esi
push esi
mov ecx esi
call sub_10006f80
call sub_100012b0
mov esi eax
jmp r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x4 ] esi
jmp r-xdata
push 0x8
mov [ ebp - 0x4 ] 0xffffffff
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
cmp [ ecx + 0x8 ] 0x0
push 0x1
jne r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ esi + 0x4 ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov ecx [ esi + 0x8 ]
test ecx ecx
je r-xdata
add ecx 0x4
push ecx
call [ InterlockedExchange@IAT ]
mov edx [ ecx ]
mov eax [ edx ]
call eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_100010f0
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_100102e0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov esi [ rw-data ]
push 0x8007
call [ SetErrorMode@IAT ]
mov [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_10001020
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
Assist_Init
push ebp
mov ebp esp
push 0xffffffff
push sub_10015cab
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
call sub_100072a0
push 0x18
mov esi eax
call sub_1000ba97
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
push eax
call sub_1000a0c0
Assist_Run
push ebp
mov ebp esp
push 0xffffffff
push sub_10015c7b
mov eax [ fs : 0x0 ]
push eax
push ecx
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0xc
call sub_1000ba97
mov edi eax
add esp 0x4
mov [ ebp - 0x10 ] edi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp edi eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push eax
call sub_10006f80
call sub_100012b0
sub_10001260
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100012b0
push ebp
mov ebp esp
push esi
push 0x68
mov [ edi ] r--data
mov [ edi + 0x4 ] eax
call sub_1000ba97
xor ecx ecx
add esp 0x4
xor esi esi
cmp eax ecx
je r-xdata
mov [ edi + 0x8 ] esi
cmp [ esi + 0x8 ] ecx
jne r-xdata
mov [ eax ] r--data
mov [ eax + 0x40 ] ecx
mov edx 0x7
mov [ eax + 0x44 ] edx
mov [ eax + 0x30 ] si
mov [ eax + 0x60 ] edx
mov [ eax + 0x5c ] ecx
xor edx edx
mov [ eax + 0x4c ] dx
mov edx [ ebp + 0x8 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x28 ] ecx
mov [ eax + 0x2c ] ecx
mov esi eax
mov eax edi
pop esi
pop ebp
retn 0x4
push ecx
push ecx
push esi
push sub_10002820
push ecx
push ecx
mov [ esi + 0x4 ] ecx
call [ CreateThread@IAT ]
mov [ esi + 0x8 ] eax
sub_10001340
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
mov [ esi ] r--data
test ecx ecx
je r-xdata
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x4 ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10001390
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000be8b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100013d0
push ebp
mov ebp esp
mov ecx [ edi + 0x10 ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
sub esp 0x8
push esi
mov esi ecx
call edx
push eax
mov eax [ esi ]
mov edx [ eax + 0x10 ]
mov ecx esi
call edx
push eax
call sub_1000bd1c
add esp 0x8
test eax eax
je r-xdata
pop esi
mov esp ebp
pop ebp
retn
push 0x4
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor esi esi
mov [ eax ] r--data
mov esi eax
jmp r-xdata
mov [ ebp - 0x4 ] ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov ecx [ edi + 0x10 ]
mov eax [ esi ]
mov edx [ eax + 0xc ]
push ebx
push ecx
mov ecx esi
call edx
mov ebx [ edi + 0x10 ]
push 0x10
mov [ ebp - 0x8 ] eax
call sub_1000ba97
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
lea eax [ edi + 0x30 ]
mov esi 0x8
pop ebx
cmp [ eax + 0x14 ] esi
jb r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push ebx
mov ecx esi
call edx
mov ecx [ edi + 0x14 ]
mov edx [ eax ]
mov edx [ edx + 0x4 ]
push 0x1
push ecx
mov ecx [ edi + 0x10 ]
push ecx
mov ecx [ ebp - 0x4 ]
push ecx
mov ecx [ ebp - 0x8 ]
push ecx
mov ecx eax
call edx
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
inc ebx
call edx
cmp ebx eax
jb r-xdata
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
xor ebx ebx
call edx
test eax eax
je r-xdata
mov ecx [ edi + 0x10 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x1c ]
call eax
cmp [ edi + 0x60 ] esi
lea eax [ edi + 0x4c ]
jb r-xdata
mov eax [ eax ]
mov ecx [ edi + 0x10 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x1c ]
call eax
mov eax [ eax ]
sub_100014d0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015700
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp [ esi + 0x24 ] ebx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea eax [ ebx + 0x1 ]
call sub_1000a630
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x10 ]
call eax
mov esi eax
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov edx [ esi ]
mov eax [ edx + 0x30 ]
push ebx
mov ecx esi
call eax
mov edi eax
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
mov ecx [ ebp + 0x8 ]
mov edx edi
call sub_10002850
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
inc ebx
call eax
cmp ebx eax
jb r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
sub_100015b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015bcb
mov eax [ fs : 0x0 ]
push eax
sub esp 0x38
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x8
call sub_1000a630
mov ebx eax
mov eax 0x9
call sub_1000a630
mov [ ebp - 0x1c ] eax
mov eax 0xa
call sub_1000a630
mov [ ebp - 0x28 ] eax
mov eax 0xb
call sub_1000a630
mov [ ebp - 0x30 ] eax
mov eax 0x1
call sub_1000a630
mov [ ebp - 0x2c ] eax
mov eax 0xc
call sub_1000a630
mov [ ebp - 0x14 ] eax
mov eax 0x2
call sub_1000a630
xor edi edi
push 0xc
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x24 ] edi
call sub_1000ba97
mov esi eax
add esp 0x4
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x4 ] edi
cmp esi edi
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push ebx
mov ecx edi
call eax
mov esi eax
mov edx [ esi ]
mov eax [ ebp - 0x20 ]
mov edx [ edx + 0x14 ]
push eax
mov ecx esi
call edx
mov ebx eax
mov [ ebp - 0x34 ] ebx
push 0x0
mov [ ebp - 0x4 ] 0x1
call sub_1000c2f1
add esp 0x4
mov [ ebp - 0x40 ] edx
mov edx [ ebx ]
push eax
mov eax [ edx + 0x24 ]
mov ecx ebx
call eax
mov edx [ esi ]
mov eax [ ebp - 0x1c ]
mov edx [ edx + 0x14 ]
push eax
mov ecx esi
call edx
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x38 ] eax
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x2
mov edx [ eax ]
mov edx [ edx + 0x1c ]
push ecx
mov ecx eax
call edx
mov ecx [ ebp - 0x28 ]
mov eax [ esi ]
mov edx [ eax + 0x14 ]
push ecx
mov ecx esi
call edx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebp - 0x2c ]
mov edx [ eax ]
mov edx [ edx + 0x1c ]
push ecx
mov ecx eax
call edx
mov ecx [ ebp - 0x30 ]
mov eax [ esi ]
mov edx [ eax + 0x14 ]
push ecx
mov ecx esi
call edx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x2c ] eax
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x4
mov eax [ eax ]
mov ecx [ ecx + 0x14 ]
mov edx [ ecx ]
mov [ ebp + 0x14 ] eax
mov eax [ edx + 0x4 ]
call eax
mov edx [ ebp + 0x14 ]
mov ecx [ ebp - 0x14 ]
push eax
mov eax [ edx + 0x24 ]
call eax
xor eax eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x18 ] eax
mov edx [ edi ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp - 0x10 ]
push ecx
push esi
mov ecx edi
call edx
test eax eax
jne r-xdata
push 0x4
call sub_1000ba97
add esp 0x4
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x18 ]
push edi
push eax
push ecx
mov ecx [ ebp - 0x10 ]
push edx
mov edx [ ebp - 0x18 ]
call sub_10002fe0
mov [ ebp + 0x10 ] eax
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x2
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebx ]
mov edx [ eax ]
push 0x1
mov ecx ebx
call edx
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
xor eax eax
mov [ eax ] r--data
jmp r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
mov eax [ ebp - 0x10 ]
push eax
call sub_1000c2e6
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov edx [ ecx ]
mov eax [ edx ]
add esp 0x4
push 0x1
call eax
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x2
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x1
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov eax [ ebp - 0x24 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov eax 0xd
call sub_1000a630
mov [ ebp + 0x14 ] eax
mov eax 0xe
call sub_1000a630
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0x14 ]
mov [ ebp + 0xc ] eax
mov eax [ ecx ]
mov eax [ eax + 0x10 ]
push edx
call eax
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x3c ] eax
mov [ ebp - 0x4 ] 0x5
test eax eax
je r-xdata
mov [ esi + 0x4 ] eax
mov eax [ ebp + 0x14 ]
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
mov edi esi
mov ecx [ ebp + 0x10 ]
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
test ecx ecx
je r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x20 ]
call eax
cmp eax 0x1
jne r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp + 0x10 ]
mov edx [ ecx ]
mov eax [ ebp + 0xc ]
mov edx [ edx + 0x10 ]
push eax
call edx
mov ecx eax
mov [ ebp + 0x18 ] ecx
mov [ ebp - 0x40 ] ecx
xor eax eax
mov [ ebp - 0x4 ] 0x6
cmp ecx eax
je r-xdata
mov [ ebp - 0x4 ] 0x5
test ecx ecx
je r-xdata
lea edx [ ebp + 0xc ]
mov [ ebp + 0x14 ] eax
mov [ ebp + 0xc ] eax
mov eax [ ecx ]
mov eax [ eax + 0x10 ]
push edx
lea edx [ ebp + 0x14 ]
push edx
call eax
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
mov edx [ ebp + 0xc ]
call sub_10002c60
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp + 0x18 ]
push eax
call sub_1000c2e6
add esp 0x4
sub_10001930
push ebp
mov ebp esp
push 0xffffffff
push sub_100152ed
mov eax [ fs : 0x0 ]
push eax
sub esp 0xccc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x2
mov [ ebp - 0xcd4 ] esi
mov [ ebp - 0xccc ] 0x0
call sub_1000a630
mov edx [ ebx ]
push eax
mov eax [ edx + 0x34 ]
mov ecx ebx
call eax
mov edi eax
mov [ ebp - 0xcd8 ] edi
mov eax 0x1
mov [ ebp - 0x4 ] eax
test edi edi
jne r-xdata
call sub_1000a6b0
mov edx [ edi ]
mov [ ebp - 0xcd0 ] eax
mov eax [ edx + 0x20 ]
mov ecx edi
call eax
mov edx [ ebx ]
push eax
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
mov ecx [ ebp - 0xcd0 ]
push eax
push ecx
lea edx [ ebp - 0xcc8 ]
push edx
call [ wsprintfW@IAT ]
add esp 0x10
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] ax
lea eax [ ebp - 0xcc8 ]
lea edx [ eax + 0x2 ]
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] edi
mov [ esi ] cx
push ecx
mov eax r--data
mov ecx esi
call sub_10003880
jmp r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0xcc8 ]
mov ecx esi
call sub_10003880
mov [ ebp - 0x4 ] 0x0
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
mov [ ebp - 0xccc ] 0x1
call eax
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
sub_10001a60
push ebp
mov ebp esp
push 0xffffffff
push sub_100156c0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x70
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x58 ] eax
mov eax 0x5
mov ebx ecx
call sub_1000a630
mov esi eax
mov eax 0x2
call sub_1000a630
mov edi eax
mov eax 0x11
mov [ ebp - 0x54 ] edi
call sub_1000a630
mov edx [ ebx ]
mov [ ebp - 0x70 ] eax
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
mov edx [ ebx ]
mov eax [ edx + 0x34 ]
push esi
mov ecx ebx
call eax
mov edx [ ebx ]
mov esi eax
mov eax [ edx + 0x34 ]
push edi
mov ecx ebx
mov [ ebp - 0x6c ] esi
call eax
mov edx [ ebx ]
mov edx [ edx + 0x34 ]
mov [ ebp - 0x50 ] eax
mov eax [ ebp - 0x70 ]
push eax
mov ecx ebx
call edx
mov edi eax
mov [ ebp - 0x74 ] esi
mov ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x78 ] ecx
mov [ ebp - 0x7c ] edi
mov [ ebp - 0x4 ] 0x2
test esi esi
je r-xdata
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov ecx [ ebp - 0x50 ]
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax [ ebp - 0x58 ]
cmp [ eax + 0x2c ] 0x0
je r-xdata
xor eax eax
mov edx [ esi ]
mov ecx esi
mov [ ebp - 0x4 ] 0x1
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
mov ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
jmp r-xdata
mov ecx [ eax + 0x2c ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
mov [ ebp - 0x4c ] eax
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
mov ecx [ ebp - 0x4c ]
mov edx [ ecx ]
mov [ ebp - 0x5c ] eax
push eax
mov eax [ edx + 0x8 ]
call eax
mov ecx [ ebp - 0x5c ]
push ecx
call sub_1000c2e6
mov edx [ ebp - 0x58 ]
mov ecx [ edx + 0x2c ]
xor eax eax
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x64 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
add esp 0x4
call edx
mov [ ebp - 0x5c ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4c ]
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov edx [ eax ]
mov edx [ edx + 0x4 ]
lea ecx [ ebp - 0x64 ]
push ecx
lea ecx [ ebp - 0x60 ]
push ecx
mov ecx [ ebp - 0x4c ]
push ecx
mov ecx eax
call edx
mov ecx [ ebp - 0x5c ]
mov [ ebp - 0x68 ] eax
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
cmp [ ebp - 0x68 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4c ]
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
lea esi [ ebp - 0x48 ]
call sub_10001930
mov [ ebp - 0x4 ] 0x3
cmp [ ebp - 0x34 ] 0x8
jb r-xdata
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4c ] ecx
mov eax [ ebp - 0x48 ]
mov [ ebp - 0x4c ] eax
jmp r-xdata
mov eax 0x12
call sub_1000a630
lea ecx [ ebp - 0x2c ]
call sub_10003340
mov [ ebp - 0x4 ] 0x4
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
lea ecx [ ebp - 0x2c ]
push ecx
call sub_100033b0
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov eax [ ebp - 0x60 ]
push eax
call sub_1000c2e6
add esp 0x4
lea esi [ ebp - 0x48 ]
call sub_100033e0
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x0
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ ebp - 0x6c ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ecx ]
jmp r-xdata
mov eax [ ebp - 0x64 ]
mov esi [ ebp - 0x58 ]
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov edx [ edx + 0x24 ]
push 0x1
push 0x1
push eax
mov eax [ ebp - 0x60 ]
push eax
mov eax [ ebp - 0x4c ]
push eax
call edx
test eax eax
jne r-xdata
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x14 ]
call eax
mov ebx eax
mov [ ebp - 0x68 ] ebx
mov [ ebp - 0x4 ] 0x5
mov edx [ ebx ]
mov eax [ edx + 0x3c ]
mov ecx ebx
call eax
mov esi eax
mov edx [ esi ]
mov eax [ ebp - 0x54 ]
mov edx [ edx + 0x8 ]
push eax
mov ecx esi
call edx
mov eax [ esi ]
mov ecx [ ebp - 0x50 ]
mov edx [ ecx ]
mov [ ebp - 0x54 ] eax
mov eax [ edx + 0x20 ]
call eax
mov edx [ ebp - 0x54 ]
push eax
mov eax [ edx + 0x24 ]
mov ecx esi
call eax
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov edx [ ebx ]
mov eax [ edx + 0x3c ]
mov ecx ebx
call eax
mov esi eax
mov edx [ esi ]
mov eax [ ebp - 0x70 ]
mov edx [ edx + 0x8 ]
push eax
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax + 0x18 ]
mov ecx edi
call edx
mov edx [ esi ]
mov [ ebp - 0x54 ] eax
push eax
mov eax [ edx + 0x1c ]
mov ecx esi
call eax
mov ecx [ ebp - 0x54 ]
push ecx
call sub_1000c2e6
mov esi [ ebp - 0x58 ]
lea eax [ esi + 0x4c ]
add esp 0x4
cmp [ eax + 0x14 ] 0x8
jb r-xdata
lea eax [ ebp - 0x2c ]
mov eax [ edx ]
push 0x1
call eax
push eax
mov eax [ esi + 0x24 ]
call sub_10002f80
mov edx ebx
mov ecx esi
call sub_10002850
mov [ ebp - 0x4 ] 0x4
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
lea esi [ ebp - 0x2c ]
call sub_10003380
lea esi [ ebp - 0x48 ]
call sub_100033e0
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x0
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ ebp - 0x6c ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax 0x1
jmp r-xdata
mov eax [ eax ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
sub_10001e00
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100031e0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10001e30
push ebp
mov ebp esp
push 0xffffffff
push sub_10015a18
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov edi edx
mov eax 0x2
mov [ ebp - 0x14 ] 0x0
call sub_1000a630
mov ebx eax
mov eax 0x5
mov [ ebp - 0x10 ] ebx
call sub_1000a630
mov eax [ edi ]
mov edx [ eax + 0x4 ]
mov ecx edi
call edx
mov edx [ esi ]
push eax
mov eax [ edx + 0x34 ]
mov ecx esi
call eax
mov esi eax
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x0
test esi esi
jne r-xdata
mov edx [ esi ]
mov eax [ edx + 0x34 ]
push ebx
mov ecx esi
call eax
mov ebx eax
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
mov eax [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov edx [ edx + 0x34 ]
push eax
mov ecx edi
call edx
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x4 ] 0x2
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x20 ]
call eax
mov edx [ ebx ]
mov edx [ edx + 0x20 ]
mov ecx ebx
mov [ ebp - 0x10 ] eax
call edx
cmp [ ebp - 0x10 ] eax
jbe r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx edi
call sub_10001a60
mov edi eax
jmp r-xdata
mov edi [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
mov edx esi
mov ecx ebx
call sub_10002450
push ebx
mov ecx edi
call sub_10001a60
mov edi eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
sub_10001f60
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10015c48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x38 ]
mov [ fs : 0x0 ] eax
mov edi ecx
call sub_10002a90
call sub_100013d0
cmp [ edi + 0x44 ] 0x8
lea eax [ edi + 0x30 ]
jb r-xdata
mov ecx [ edi + 0x10 ]
lea esi [ esp + 0x1c ]
push esi
xor ebx ebx
lea esi [ esp + 0x14 ]
mov [ esp + 0x14 ] ebx
mov [ esp + 0x20 ] ebx
mov edx [ ecx ]
push esi
push eax
mov eax [ edx + 0x20 ]
call eax
test eax eax
je r-xdata
mov eax [ eax ]
cmp [ edi + 0x60 ] 0x8
lea eax [ edi + 0x4c ]
jb r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ edi + 0x1c ]
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
push eax
mov eax [ esp + 0x14 ]
push eax
call edx
mov esi eax
mov eax [ esp + 0x10 ]
push eax
call sub_1000c2e6
add esp 0x4
cmp esi ebx
je r-xdata
mov ecx [ edi + 0x10 ]
lea esi [ esp + 0x20 ]
push esi
lea esi [ esp + 0x18 ]
mov [ esp + 0x18 ] ebx
mov [ esp + 0x24 ] ebx
mov edx [ ecx ]
push esi
push eax
mov eax [ edx + 0x20 ]
call eax
test eax eax
je r-xdata
mov eax [ eax ]
mov ecx [ edi + 0x20 ]
cmp ecx ebx
je r-xdata
mov eax edi
call sub_10002930
push edi
call sub_100014d0
mov ecx [ edi + 0x4 ]
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
test ecx ecx
jne r-xdata
mov eax [ esp + 0x20 ]
mov ecx [ edi + 0x1c ]
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
push eax
mov eax [ esp + 0x18 ]
push eax
call edx
mov esi eax
mov eax [ esp + 0x14 ]
push eax
call sub_1000c2e6
add esp 0x4
cmp esi ebx
je r-xdata
mov [ edi + 0x20 ] esi
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ esp + 0x38 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0xd8b6
call [ Sleep@IAT ]
cmp [ edi + 0x44 ] 0x8
lea eax [ edi + 0x30 ]
jb r-xdata
mov ecx [ edi + 0x24 ]
cmp ecx ebx
je r-xdata
mov ecx [ edi + 0x10 ]
lea esi [ esp + 0x24 ]
push esi
lea esi [ esp + 0x1c ]
mov [ esp + 0x1c ] ebx
mov [ esp + 0x28 ] ebx
mov edx [ ecx ]
push esi
push eax
mov eax [ edx + 0x20 ]
call eax
test eax eax
je r-xdata
mov eax [ eax ]
mov [ edi + 0x24 ] esi
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
cmp [ edi + 0x20 ] ebx
je r-xdata
mov eax [ esp + 0x24 ]
mov ecx [ edi + 0x1c ]
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
push eax
mov eax [ esp + 0x1c ]
push eax
call edx
mov esi eax
mov eax [ esp + 0x18 ]
push eax
call sub_1000c2e6
add esp 0x4
cmp esi ebx
je r-xdata
mov ecx [ edi + 0x4 ]
test ecx ecx
je r-xdata
mov eax 0x3
call sub_1000a630
mov ecx [ edi + 0x20 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x10 ]
call eax
mov esi eax
mov [ esp + 0x28 ] esi
mov [ esp + 0x40 ] ebx
cmp esi ebx
je r-xdata
mov ecx [ edi + 0x20 ]
cmp ecx ebx
je r-xdata
mov [ esp + 0x40 ] 0xffffffff
cmp esi ebx
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x20 ]
mov ecx esi
call eax
push 0x0
mov ebx eax
call sub_1000c2f1
add esp 0x4
sub eax [ esp + 0x2c ]
sbb edx [ esp + 0x30 ]
xor ecx ecx
cmp edx ecx
jl r-xdata
mov [ edi + 0x20 ] esi
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
xor ebx ebx
jg r-xdata
push edi
call sub_100021a0
push 0x0
call sub_1000c2f1
add esp 0x4
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] edx
cmp eax ebx
jbe r-xdata
sub_100021a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015c18
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x4
call sub_1000a630
mov edi [ ebp + 0x8 ]
mov ecx [ edi + 0x20 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x10 ]
call eax
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x30 ] esi
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x28 ]
mov ecx esi
call eax
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ esi ]
mov ecx esi
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
call eax
test eax eax
je r-xdata
mov ecx [ edi + 0x28 ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
mov [ ebp - 0x28 ] ebx
call eax
test eax eax
je r-xdata
lea esp [ esp ]
mov ecx [ edi + 0x28 ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
inc ebx
mov [ ebp - 0x28 ] ebx
call eax
cmp ebx eax
jb r-xdata
mov [ edi + 0x2c ] eax
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
mov [ ebp - 0x1c ] 0x0
call eax
test eax eax
je r-xdata
mov ecx [ edi + 0x28 ]
mov edx [ ecx ]
mov eax [ edx + 0xc ]
push ebx
call eax
mov [ ebp - 0x2c ] eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ ebp - 0x1c ]
mov edx [ edx + 0x30 ]
push eax
mov ecx esi
call edx
mov esi eax
mov [ ebp - 0x34 ] esi
mov eax 0x5
mov [ ebp - 0x4 ] 0x1
call sub_1000a630
mov edi eax
mov eax 0x6
call sub_1000a630
mov ebx eax
mov eax 0x7
call sub_1000a630
mov [ ebp - 0x24 ] eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push edi
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push ebx
mov ecx esi
call edx
mov ecx [ ebp - 0x24 ]
mov [ ebp - 0x10 ] eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push ecx
mov ecx esi
call edx
mov ebx eax
mov [ ebp - 0x38 ] edi
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4 ] 0x4
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x3
test ebx ebx
je r-xdata
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x2
test ecx ecx
je r-xdata
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov ecx [ ebp - 0x10 ]
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax [ edi ]
mov edx [ eax + 0x18 ]
mov ecx edi
call edx
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x20 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
mov [ ebp - 0x18 ] eax
mov eax [ ebx ]
mov edx [ eax + 0x20 ]
mov ecx ebx
call edx
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x24 ] 0x0
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov ecx [ ebp - 0x14 ]
mov esi [ ebp - 0x1c ]
mov edx [ ecx ]
mov eax [ edx + 0x2c ]
inc esi
mov [ ebp - 0x1c ] esi
call eax
cmp esi eax
mov esi [ ebp - 0x14 ]
jb r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov eax [ ebp - 0x18 ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov edi [ ebp + 0x8 ]
mov ebx [ ebp - 0x28 ]
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push eax
call sub_1000c2e6
add esp 0x4
push ecx
call sub_1000c2e6
add esp 0x4
mov edx [ ebp - 0x2c ]
push edx
push eax
mov eax [ ebp - 0x18 ]
push eax
push ecx
mov ecx [ ebp + 0x8 ]
push ecx
call sub_100015b0
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x4 ] 0x3
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov [ ebp - 0x4 ] 0x0
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ecx ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov eax [ edx ]
push 0x1
call eax
sub_10002450
push ebp
mov ebp esp
push 0xffffffff
push sub_10015660
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx edx
mov eax [ ebx ]
mov edx [ eax + 0x4 ]
mov edi ecx
mov ecx ebx
mov [ ebp - 0x54 ] edi
call edx
mov edx ebx
mov ecx edi
call sub_10003250
lea esi [ ebp - 0x48 ]
call sub_10001930
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x34 ] 0x8
mov eax [ ebp - 0x48 ]
jae r-xdata
mov ecx [ edi + 0x10 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x1c ]
call eax
mov eax 0x12
call sub_1000a630
mov esi eax
mov ecx esi
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
lea edi [ ecx + 0x1 ]
lea esp [ esp ]
mov eax esi
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edi
mov eax esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10003480
mov [ ebp - 0x4 ] 0x1
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
mov ecx eax
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003670
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov esi [ ebp - 0x54 ]
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x18 ]
call eax
cmp [ esi + 0x60 ] 0x8
jb r-xdata
lea eax [ ebp - 0x2c ]
lea edi [ esi + 0x4c ]
mov edi [ esi + 0x4c ]
jmp r-xdata
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
lea ebx [ ebp - 0x50 ]
push ebx
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x50 ] ecx
mov ecx [ esi + 0x1c ]
mov edx [ ecx ]
lea ebx [ ebp - 0x4c ]
push ebx
push eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
xor ecx ecx
cmp eax ecx
je r-xdata
cmp [ ebp - 0x34 ] 0x8
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
mov eax [ ebp - 0x50 ]
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov edx [ edx + 0x24 ]
push 0x1
push 0x1
push eax
mov eax [ ebp - 0x4c ]
push eax
push edi
call edx
mov eax [ ebp - 0x4c ]
push eax
call sub_1000c2e6
add esp 0x4
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x48 ]
push edx
call sub_1000ba8c
add esp 0x4
sub_100025f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015298
mov eax [ fs : 0x0 ]
push eax
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x74 ] eax
mov eax 0xf
mov esi ecx
mov edi edx
call sub_1000a630
mov [ ebp - 0x68 ] eax
mov eax 0x10
call sub_1000a630
mov [ ebp - 0x70 ] eax
xor ebx ebx
mov eax esi
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
call sub_10003480
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
lea esi [ ebp - 0x2c ]
jmp r-xdata
mov esi [ ebp - 0x2c ]
cmp esi ebx
je r-xdata
mov edi [ ebp - 0x68 ]
push edi
push esi
call sub_1000c260
mov esi eax
add esp 0x8
cmp esi ebx
je r-xdata
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x70 ]
push ecx
push esi
call sub_1000c260
mov edx eax
add esp 0x8
mov [ ebp - 0x6c ] edx
cmp edx ebx
je r-xdata
xor eax eax
push esi
mov eax [ ebp - 0x2c ]
push eax
jmp r-xdata
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax edi
lea edi [ eax + 0x1 ]
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x2c ]
push ecx
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edi
mov edi edx
sub edi eax
mov eax [ ebp - 0x68 ]
sub edi esi
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax ecx
add eax esi
lea esi [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
call sub_10003480
mov [ ebp - 0x4 ] 0x1
mov ecx [ ebp - 0x48 ]
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ ebp - 0x64 ]
call sub_1000b8e0
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x64 ]
cmp [ ebp - 0x50 ] edi
jae r-xdata
mov ecx esi
mov esi [ ebp - 0x54 ]
mov ecx [ ebp - 0x74 ]
mov edx [ ecx ]
push esi
push eax
mov eax [ edx + 0x4 ]
call eax
mov esi eax
cmp esi ebx
jne r-xdata
lea eax [ ebp - 0x64 ]
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov esi [ ebp - 0x6c ]
mov eax esi
lea edx [ eax + 0x1 ]
mov edi edi
mov [ ebp - 0x50 ] 0xf
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x64 ] bl
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov edx [ ebp - 0x64 ]
push edx
call sub_1000ba8c
add esp 0x4
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
add esi eax
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x50 ] 0xf
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x64 ] bl
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov ecx [ ebp - 0x64 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
cmp esi ebx
jne r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov esi [ ebp - 0x2c ]
sub_10002820
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov ecx esi
call sub_10001f60
test esi esi
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
sub_10002850
push ebp
mov ebp esp
push 0xffffffff
push sub_10015620
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx edx
lea esi [ ebp - 0x48 ]
mov edi ecx
call sub_10001930
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x34 ] 0x8
mov eax [ ebp - 0x48 ]
jae r-xdata
mov ecx [ edi + 0x10 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x28 ]
call eax
mov edi eax
push edi
call [ LoadLibraryW@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax esi
push edi
call sub_1000c2e6
add esp 0x4
cmp [ ebp - 0x34 ] 0x8
jb r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx ebx
call sub_10003110
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x2c ]
mov ebx 0x10
cmp [ ebp - 0x18 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x48 ]
push ecx
call sub_1000ba8c
add esp 0x4
push eax
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] ebx
jb r-xdata
lea edx [ ebp - 0x50 ]
push edx
call eax
call [ ebp - 0x50 ]
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10002930
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
mov esi eax
xor ebx ebx
push edi
cmp [ esi + 0x20 ] ebx
jne r-xdata
cmp [ esi + 0x24 ] 0x0
jne r-xdata
mov edx [ rw-data ]
mov eax edx
lea edi [ eax + 0x1 ]
lea ecx [ ecx ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0x1
call sub_1000a630
mov ebx eax
mov eax 0x2
call sub_1000a630
mov ecx [ esi + 0x18 ]
mov edx [ ecx ]
mov edi eax
mov eax [ edx + 0x8 ]
push ebx
call eax
mov [ esi + 0x24 ] eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x14 ]
push edi
call eax
mov edi eax
mov edx [ edi ]
mov eax [ edx + 0x24 ]
push 0x0
mov ecx edi
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
push ebx
call eax
mov edi eax
mov edx [ edi ]
mov eax [ edx + 0x38 ]
mov ecx edi
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
cmp [ esi + 0x60 ] 0x8
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ esi + 0x18 ]
sub eax edi
mov edi [ ecx ]
push eax
mov eax [ edi + 0x4 ]
push edx
call eax
mov [ esi + 0x20 ] eax
cmp [ esi + 0x44 ] 0x8
jb r-xdata
lea edi [ esi + 0x4c ]
mov edi [ esi + 0x4c ]
jmp r-xdata
lea edi [ esi + 0x30 ]
mov edi [ esi + 0x30 ]
jmp r-xdata
lea ebx [ ebp - 0x8 ]
push ebx
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x8 ] ecx
mov ecx [ esi + 0x1c ]
mov edx [ ecx ]
lea ebx [ ebp - 0x4 ]
push ebx
push eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
xor ecx ecx
cmp eax ecx
je r-xdata
mov ecx [ esi + 0x1c ]
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] ebx
mov edx [ ecx ]
lea ebx [ ebp - 0x8 ]
push ebx
lea ebx [ ebp - 0x4 ]
push ebx
push eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x8 ]
mov esi [ esi + 0x10 ]
mov ecx [ ebp - 0x4 ]
mov edx [ esi ]
mov edx [ edx + 0x24 ]
push 0x1
push 0x1
push eax
push ecx
push edi
mov ecx esi
call edx
mov eax [ ebp - 0x4 ]
push eax
call sub_1000c2e6
add esp 0x4
mov eax [ ebp - 0x8 ]
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov edx [ edx + 0x24 ]
push 0x1
push 0x1
push eax
mov eax [ ebp - 0x4 ]
push eax
push edi
call edx
mov eax [ ebp - 0x4 ]
push eax
call sub_1000c2e6
add esp 0x4
sub_10002a90
push ebp
mov ebp esp
push 0xffffffff
push sub_10015b66
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov ebx [ esi + 0xc ]
mov [ ebp - 0x50 ] esi
call sub_100072a0
push 0x14
mov [ esi + 0x10 ] eax
call sub_1000ba97
xor edi edi
add esp 0x4
cmp eax edi
je r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edi
mov [ eax + 0x10 ] edi
jmp r-xdata
xor eax eax
mov [ eax ] r--data
jmp r-xdata
push 0x4
mov [ esi + 0x14 ] eax
call sub_1000ba97
add esp 0x4
cmp eax edi
je r-xdata
xor edi edi
push 0x4
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0x14 ]
mov [ esi + 0x18 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
push 0xc
mov ebx eax
call sub_1000ba97
mov edi eax
add esp 0x4
mov [ ebp - 0x4c ] edi
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
xor eax eax
push edi
push eax
call sub_1000a0c0
jmp r-xdata
xor eax eax
mov [ edi ] r--data
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] ebx
jmp r-xdata
mov [ eax ] r--data
mov [ edi ] r--data
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] ebx
jmp r-xdata
push ebx
call sub_1000ba8c
mov edi [ ebp - 0x50 ]
mov ecx [ edi + 0x14 ]
mov esi [ ecx ]
mov edx [ esi + 0x4 ]
add esp 0x4
call edx
mov ecx [ edi + 0x14 ]
inc eax
push eax
mov eax [ esi + 0x10 ]
call eax
mov ebx eax
mov edx ebx
lea ecx [ ebp - 0x2c ]
call sub_1000b930
lea esi [ edi + 0x4c ]
mov edi eax
mov [ ebp - 0x4 ] 0x3
call sub_10003550
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ ebp - 0x4 ] ebx
mov ecx [ esi + 0x14 ]
mov [ esi + 0x28 ] eax
mov edi [ ecx ]
mov eax [ edi + 0x4 ]
call eax
mov ecx [ esi + 0x14 ]
mov edx [ edi + 0x10 ]
push eax
call edx
mov ebx eax
mov edx ebx
lea ecx [ ebp - 0x48 ]
call sub_1000b930
add esi 0x30
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10003550
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x34 ] 0x8
jb r-xdata
or ebx 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ esi + 0x1c ] edi
mov edi [ esi + 0x10 ]
push 0x18
call sub_1000ba97
add esp 0x4
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
push ebx
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10002c60
push ebp
mov ebp esp
push 0xffffffff
push sub_10015b18
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
mov ecx [ ebx + 0x18 ]
mov eax [ ecx ]
mov eax [ eax + 0x4 ]
push edx
mov edx [ ebp + 0xc ]
push edx
call eax
mov edi eax
mov [ ebp - 0x20 ] edi
test edi edi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax 0x2
call sub_1000a630
mov [ ebp + 0xc ] eax
mov eax 0x1
call sub_1000a630
mov ecx [ ebx + 0x24 ]
mov edx [ ecx ]
mov edx [ edx + 0x10 ]
mov esi eax
mov eax [ ebp + 0xc ]
push eax
call edx
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebx + 0x24 ]
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
push esi
call edx
mov ebx eax
mov [ ebp - 0x14 ] ebx
test ebx ebx
jne r-xdata
mov [ ebp - 0x28 ] ebx
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov edx [ edx + 0x10 ]
push eax
mov ecx edi
call edx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x4 ] 0x2
mov eax [ edi ]
mov edx [ eax + 0x10 ]
push esi
mov ecx edi
call edx
mov edi eax
mov [ ebp - 0x30 ] edi
mov esi [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x3
test esi esi
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x24 ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
push esi
call eax
mov [ ebp - 0x14 ] eax
mov ebx eax
mov ecx [ ebp - 0x20 ]
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ ebp - 0x4 ] 0x2
test edi edi
je r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x0
test ebx ebx
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax [ esi ]
mov edx [ eax + 0x20 ]
mov ecx esi
call edx
mov ecx [ ebp - 0x18 ]
mov esi eax
mov eax [ ecx ]
mov edx [ eax + 0x20 ]
call edx
cmp esi eax
jbe r-xdata
mov ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
test ecx ecx
je r-xdata
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov esi [ ebp - 0x10 ]
mov eax [ edi ]
mov edx [ eax + 0x2c ]
mov ecx edi
mov [ ebp - 0x1c ] 0x1
mov [ ebp + 0xc ] 0x0
call edx
test eax eax
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov edx [ ebx ]
mov eax [ edx + 0x2c ]
mov ecx ebx
mov [ ebp + 0xc ] 0x0
call eax
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ edi ]
mov edx [ eax + 0x30 ]
push ecx
mov ecx edi
call edx
mov esi eax
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x4 ] 0x4
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
cmp [ ebp - 0x1c ] 0x0
je r-xdata
mov edx [ ebx ]
mov eax [ ebp + 0xc ]
mov edx [ edx + 0x30 ]
push eax
mov ecx ebx
call edx
mov esi eax
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x4 ] 0x5
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ebx [ edi ]
mov ecx esi
call edx
push eax
mov eax [ ebx + 0x34 ]
mov ecx edi
call eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x4 ] 0x6
test eax eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
mov ecx [ ebp - 0x18 ]
mov esi [ ecx ]
mov ecx [ ebp - 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
call eax
mov ecx [ ebp - 0x18 ]
mov edx [ esi + 0x24 ]
push eax
call edx
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x60 ] 0x8
lea eax [ esi + 0x4c ]
jb r-xdata
mov [ ebp - 0x4 ] 0x5
mov edx [ eax ]
mov ecx eax
mov eax [ edx ]
push 0x1
call eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov edx esi
call sub_10002450
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x3
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov esi [ ebp + 0xc ]
mov edx [ edi ]
mov eax [ edx + 0x2c ]
inc esi
mov ecx edi
mov [ ebp + 0xc ] esi
call eax
cmp esi eax
jb r-xdata
mov eax [ ebp + 0x8 ]
push eax
mov ecx ebx
mov edx esi
call sub_10001e30
test eax eax
jne r-xdata
cmp [ esi + 0x24 ] 0x0
mov [ ebp + 0xc ] eax
je r-xdata
mov eax [ eax ]
mov [ ebp - 0x4 ] 0x3
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov ecx [ ebp - 0x14 ]
mov esi [ ebp + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x2c ]
inc esi
mov [ ebp + 0xc ] esi
call eax
mov ebx [ ebp - 0x14 ]
cmp esi eax
jb r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] eax
mov ecx [ esi + 0x1c ]
xor eax eax
mov [ ebp + 0x8 ] eax
mov [ ebp - 0x1c ] eax
mov edx [ ecx ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp + 0x8 ]
push eax
mov eax [ esi + 0x24 ]
push eax
call edx
test eax eax
je r-xdata
mov edx [ ebp - 0x1c ]
mov ecx [ esi + 0x10 ]
mov eax [ ecx ]
mov eax [ eax + 0x24 ]
push 0x1
push 0x1
push edx
mov edx [ ebp + 0x8 ]
push edx
mov edx [ ebp + 0xc ]
push edx
call eax
mov ecx [ ebp + 0x8 ]
push ecx
call sub_1000c2e6
add esp 0x4
sub_10002f80
push ebp
mov ebp esp
xor ecx ecx
sub esp 0x8
cmp eax ecx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
push edi
lea edi [ ebp - 0x8 ]
push edi
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x8 ] ecx
mov ecx [ esi + 0x1c ]
mov edx [ ecx ]
lea edi [ ebp - 0x4 ]
push edi
push eax
mov eax [ edx + 0xc ]
call eax
pop edi
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov edx [ edx + 0x24 ]
push 0x1
push 0x1
push eax
mov eax [ ebp - 0x4 ]
push eax
mov eax [ ebp + 0x8 ]
push eax
call edx
mov eax [ ebp - 0x4 ]
push eax
call sub_1000c2e6
add esp 0x4
sub_10002fe0
push ebp
mov ebp esp
push 0xffffffff
push sub_100155e8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x3c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x44 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x48 ] edx
mov edx [ edi ]
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x3c ] eax
mov eax [ edx + 0x8 ]
mov ecx edi
mov [ ebp - 0x40 ] 0x0
call eax
mov esi eax
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push ebx
mov ecx esi
call eax
mov ecx [ ebp - 0x48 ]
push ecx
mov ecx [ ebp - 0x38 ]
lea eax [ ebp - 0x2c ]
call sub_1000b890
add esp 0x4
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov edx [ esi ]
mov edx [ edx + 0x10 ]
push eax
mov eax [ ebp - 0x44 ]
push eax
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax + 0x4 ]
mov ecx edi
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x34 ] ebx
call edx
mov edi eax
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x2c ]
mov edi [ ebp - 0x40 ]
mov eax [ edi ]
mov eax [ eax + 0x4 ]
lea ecx [ ebp - 0x34 ]
push ecx
lea edx [ ebp - 0x30 ]
push edx
push esi
mov ecx edi
call eax
mov edx [ edi ]
mov ebx eax
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
test ebx ebx
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x10
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x3c ]
mov edx [ ebp - 0x34 ]
push ecx
mov ecx [ ebp - 0x30 ]
call sub_100025f0
mov edx [ ebp - 0x30 ]
push edx
mov edi eax
call sub_1000c2e6
add esp 0x4
jmp r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
sub_10003110
push ebp
mov ebp esp
push 0xffffffff
push sub_10015031
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ edi + 0x11 ]
mov [ ebp - 0x10 ] edi
call sub_1000a630
mov edx [ ebx ]
push eax
mov eax [ edx + 0x34 ]
mov ecx ebx
call eax
mov ebx eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x4 ] 0x1
mov edx [ ebx ]
mov eax [ edx + 0x18 ]
mov ecx ebx
call eax
mov ecx eax
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] edi
mov [ ebp - 0x14 ] ecx
mov [ esi ] 0x0
mov [ ebp - 0x10 ] 0x1
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
mov edi eax
mov eax ecx
call sub_10003480
mov ecx [ ebp - 0x14 ]
push ecx
call sub_1000c2e6
add esp 0x4
sub_100031e0
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
cmp [ esi + 0x60 ] 0x8
jb r-xdata
push eax
call [ CloseHandle@IAT ]
mov [ esi + 0x8 ] 0x0
xor ecx ecx
mov [ esi + 0x60 ] 0x7
mov [ esi + 0x5c ] 0x0
mov [ esi + 0x4c ] cx
cmp [ esi + 0x44 ] 0x8
jb r-xdata
mov eax [ esi + 0x4c ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x44 ] 0x7
mov [ esi + 0x40 ] 0x0
xor eax eax
mov [ esi + 0x30 ] ax
pop esi
retn
mov edx [ esi + 0x30 ]
push edx
call sub_1000ba8c
add esp 0x4
sub_10003250
push ebp
mov ebp esp
push 0xffffffff
push sub_10015620
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx edx
lea esi [ ebp - 0x48 ]
mov edi ecx
call sub_10001930
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x34 ] 0x8
mov eax [ ebp - 0x48 ]
jae r-xdata
mov ecx [ edi + 0x10 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x28 ]
call eax
mov edi eax
push edi
call [ GetModuleHandleW@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax esi
push edi
call sub_1000c2e6
add esp 0x4
cmp [ ebp - 0x34 ] 0x8
jb r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx ebx
call sub_10003110
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x2c ]
mov ebx 0x10
cmp [ ebp - 0x18 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x48 ]
push ecx
call sub_1000ba8c
add esp 0x4
push eax
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x2c ]
push esi
call [ FreeLibrary@IAT ]
cmp [ ebp - 0x18 ] ebx
jb r-xdata
lea edx [ ebp - 0x50 ]
push edx
call eax
call [ ebp - 0x4c ]
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10003340
push esi
mov esi ecx
mov ecx eax
push edi
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
lea edi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov edi ecx
call sub_10003480
pop edi
mov eax esi
pop esi
retn
sub_100033b0
push ebp
mov ebp esp
mov ecx eax
push esi
lea esi [ ecx + 0x1 ]
lea esp [ esp ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
mov ecx [ ebp + 0x8 ]
call sub_10003670
pop esi
pop ebp
retn 0x4
sub_10003410
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
cmp [ edi + 0x14 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
mov edx [ edi ]
mov [ esi ] edx
mov [ edi ] 0x0
mov ecx [ edi + 0x10 ]
inc ecx
push ecx
push edi
push esi
call sub_1000bef0
add esp 0xc
jmp r-xdata
mov eax [ edi + 0x10 ]
mov [ esi + 0x10 ] eax
mov ecx [ edi + 0x14 ]
mov [ esi + 0x14 ] ecx
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_10003480
push ebx
mov ebx eax
test ebx ebx
je r-xdata
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10013ad6
mov eax esi
mov eax [ esi ]
jmp r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_10003b70
test edi edi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
mov eax esi
pop ebx
retn
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax ] 0x0
pop ebx
retn
mov eax [ esi ]
mov [ eax ] 0x0
mov eax esi
pop ebx
retn
cmp ecx 0x10
jb r-xdata
mov edx [ esi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax esi
pop ebx
retn
push edi
push ebx
push eax
call sub_100118d0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
mov eax esi
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_10003750
pop ebx
retn
mov eax [ esi ]
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_10003750
pop ebx
retn
sub_10003550
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
cmp [ edi + 0x14 ] 0x8
jae r-xdata
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx [ edi ]
mov [ esi ] ecx
mov [ edi ] 0x0
mov edx [ edi + 0x10 ]
lea eax [ edx + edx + 0x2 ]
push eax
push edi
push esi
call sub_1000bef0
add esp 0xc
jmp r-xdata
mov edx [ edi + 0x10 ]
mov [ esi + 0x10 ] edx
mov eax [ edi + 0x14 ]
mov [ esi + 0x14 ] eax
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_100035c0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x10 ]
cmp esi ebx
jae r-xdata
sub esi ebx
cmp eax esi
jae r-xdata
push r--data
call sub_10013b23
cmp edi ecx
jne r-xdata
mov esi eax
mov eax edi
call sub_10003a10
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10003990
mov eax ebx
xor ecx ecx
call sub_10003990
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ ebx + eax ] dx
mov eax [ edi ]
xor edx edx
mov [ ebx + eax ] dx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
lea ebx [ esi + esi ]
push ebx
lea ecx [ ecx + edx * 2 ]
push ecx
push eax
call sub_100118d0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10003670
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
mov esi [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx esi
cmp ecx eax
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x10
jb r-xdata
test eax eax
je r-xdata
push r--data
call sub_10013ad6
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
add esi eax
mov eax edi
call sub_10003830
test al al
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ edi + 0x10 ]
push edx
add ecx eax
push ebx
push ecx
call sub_100118d0
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10003a60
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10003a60
pop edi
pop ebx
pop ebp
retn 0x4
sub_10003750
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi [ ecx + 0x10 ]
cmp edi ebx
jae r-xdata
sub edi ebx
cmp eax edi
jae r-xdata
push r--data
call sub_10013b23
cmp esi ecx
jne r-xdata
mov edi eax
cmp edi 0xfffffffe
jbe r-xdata
lea ecx [ edi + ebx ]
or eax 0xffffffff
call sub_10003b00
mov eax ebx
xor ecx ecx
call sub_10003b00
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10013ad6
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_10003b70
mov ecx [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax esi
pop edi
mov [ eax ] 0x0
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
mov [ eax ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
push edi
add ecx ebx
push ecx
push eax
call sub_100118d0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10003830
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_10013ad6
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10003b70
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x10
jb r-xdata
mov [ eax ] 0x0
mov eax [ eax ]
sub_10003880
push ebp
mov ebp esp
push esi
mov esi eax
push edi
mov edi ecx
test esi esi
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0x7ffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_10013ad6
mov eax edi
mov eax [ edi ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
push ecx
push ebx
push edi
call sub_10003ce0
test ebx ebx
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp esi eax
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp eax 0x8
jb r-xdata
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop ebx
mov eax edi
xor edx edx
pop edi
mov [ eax ] dx
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
xor edx edx
pop ebx
mov [ eax ] dx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax esi
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ ebx + eax ] cx
mov eax [ edi ]
xor ecx ecx
mov [ ebx + eax ] cx
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
add ebx ebx
push ebx
push esi
push eax
call sub_100118d0
mov eax [ ebp + 0x8 ]
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] eax
jb r-xdata
mov eax edi
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100035c0
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100035c0
pop edi
pop esi
pop ebp
retn 0x4
sub_10003990
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10013b23
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x8
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x8
jb r-xdata
mov ecx esi
xor edx edx
mov [ ecx + eax * 2 ] dx
mov ecx [ esi ]
xor edx edx
mov [ ecx + eax * 2 ] dx
mov eax esi
pop edi
retn
sub eax edi
add eax eax
push eax
lea eax [ ecx + edi ]
lea eax [ ebx + eax * 2 ]
push eax
lea ecx [ edx + ecx * 2 ]
push ecx
call sub_1000bef0
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x8
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10003a10
cmp esi 0x7ffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_10013ad6
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10003ce0
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x8
jb r-xdata
xor edx edx
mov [ eax ] dx
mov eax [ eax ]
sub_10003a60
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_10013b23
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_10013ad6
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_10003830
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
add ecx [ ebp + 0xc ]
push ebx
push ecx
mov ecx [ edi + 0x10 ]
add ecx eax
push ecx
call sub_100118d0
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10003b00
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10013b23
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
mov eax esi
pop edi
retn
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_1000bef0
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10003b70
push ebp
mov ebp esp
push 0xffffffff
push sub_10014eb0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov [ ebp + 0xc ] eax
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x24 ]
push edx
mov [ ebp - 0x24 ] r--data
call sub_1000cd6c
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10003e50
mov [ ebp + 0xc ] eax
mov eax r-xdata
retn
push ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ edi ] 0x0
mov [ edi ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ebx
cmp esi 0x10
jb r-xdata
mov ecx [ edi ]
push ecx
call sub_1000ba8c
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ebx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi eax
push ebx
push eax
mov eax [ ebp + 0xc ]
push eax
call sub_100118d0
add esp 0xc
sub_10003ca4
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_1000cd6c
int3
mov edx [ esi ]
push edx
call sub_1000ba8c
add esp 0x4
sub_10003ce0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014ff0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0x7
cmp esi 0x7ffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0x7ffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
jmp r-xdata
cmp ecx 0x7fffffff
ja r-xdata
mov esi 0x7ffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x0
call sub_1000be2f
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_1000cd6c
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10003ea0
mov [ ebp - 0x14 ] eax
mov eax r-xdata
retn
add ecx ecx
push ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x8
jb r-xdata
mov edx [ edi ]
push edx
call sub_1000ba8c
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
xor edx edx
mov [ edi + ecx * 2 ] dx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
add ecx ecx
push ecx
push eax
push ebx
call sub_100118d0
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_10003e1f
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
push ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
push ecx
mov [ esi ] cx
call sub_1000cd6c
int3
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10003e50
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000be2f
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_1000cd6c
push ecx
call sub_1000ba97
add esp 0x4
test eax eax
jne r-xdata
sub_10003ea0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000cd6c
lea eax [ ecx + ecx ]
push eax
call sub_1000ba97
add esp 0x4
test eax eax
jne r-xdata
sub_10003f20
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10003f50
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi [ ebp + 0x10 ]
push esi
mov [ ebp - 0x8 ] ecx
mov ecx [ ecx + 0x4 ]
lea edx [ ebp - 0x4 ]
push edx
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov eax [ eax + 0xc ]
push edx
call eax
test eax eax
jne r-xdata
mov ecx [ esi ]
mov edx [ ebp - 0x4 ]
push ebx
push edi
mov eax 0x13
mov [ ebp + 0x10 ] ecx
mov [ ebp + 0x8 ] edx
call sub_1000a630
mov edi eax
mov eax 0x14
call sub_1000a630
push edi
mov ebx eax
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
pop esi
mov esp ebp
pop ebp
retn 0xc
push ebx
push eax
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
push 0x0
call eax
mov ebx eax
xor ebx ebx
jmp r-xdata
mov eax [ esi ]
add eax 0x4
push eax
call sub_1000ba97
mov edi [ ebp + 0xc ]
mov [ edi ] eax
xor eax eax
add esp 0x4
cmp [ esi ] eax
jbe r-xdata
mov eax [ ebp - 0x4 ]
push eax
call sub_1000ba8c
mov ecx [ edi ]
add esp 0x4
pop edi
mov [ ecx ] ebx
add [ esi ] 0x4
pop ebx
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0xc
lea ecx [ ecx ]
mov edx [ ebp - 0x8 ]
mov ecx eax
and ecx 0x3
mov cl [ ecx + edx + 0x8 ]
mov edx [ ebp - 0x4 ]
xor cl [ eax + edx ]
mov edx [ edi ]
mov [ edx + eax + 0x4 ] cl
inc eax
cmp eax [ esi ]
jb r-xdata
sub_10004040
push ebp
mov ebp esp
push 0xffffffff
push sub_10014e88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100040b0
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
mov ebx ecx
mov [ ebp - 0x4 ] ebx
cmp esi 0x4
jae r-xdata
push edi
add esi 0xfffffffc
push esi
call sub_1000ba97
mov edi eax
add esp 0x4
xor eax eax
test esi esi
je r-xdata
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax 0x13
call sub_1000a630
mov ebx eax
mov eax 0x14
call sub_1000a630
push ebx
mov [ ebp + 0xc ] eax
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
mov ecx eax
and ecx 0x3
mov dl [ ecx + ebx + 0x8 ]
mov ecx [ ebp + 0x8 ]
xor dl [ ecx + eax + 0x4 ]
inc eax
mov [ eax + edi - 0x1 ] dl
cmp eax esi
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp eax [ ecx ]
je r-xdata
mov edx [ ebp + 0xc ]
push edx
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x4 ]
mov ecx [ edx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push esi
push edi
call edx
push edi
mov esi eax
call sub_1000ba8c
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push edi
call sub_1000ba8c
add esp 0x4
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
push esi
push edi
push 0x0
call eax
sub_100041a0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001525e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_1000ba97
add esp 0x4
mov [ ebp - 0x10 ] eax
xor esi esi
mov [ ebp - 0x4 ] esi
cmp eax esi
je r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push esi
mov [ ebp - 0x4 ] 0xffffffff
call sub_10004ad0
test eax eax
jne r-xdata
lea ebx [ eax + 0x4 ]
push r--data
mov [ ebp - 0x4 ] 0x1
push ebx
mov [ eax ] r--data
call sub_10004ea0
lea ecx [ ebx + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_10006040
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
mov esi [ ebp - 0x10 ]
mov [ ebx + 0x20 ] 0x1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
sub_10004270
push ebp
mov ebp esp
push 0xffffffff
push sub_1001525e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_1000ba97
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] 0x1
lea ebx [ eax + 0x4 ]
mov [ eax ] r--data
mov eax [ ebp + 0x8 ]
push eax
push ebx
call sub_10004ea0
lea ecx [ ebx + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_10006040
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
mov eax [ ebp - 0x10 ]
mov [ ebx + 0x20 ] 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10004330
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10004370
push ebp
mov ebp esp
sub esp 0x8
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_10004990
mov edx [ ebp - 0x8 ]
test edx edx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ ebp + 0x8 ] eax
mov ecx [ eax ]
mov [ ebp + 0x8 ] ecx
jmp r-xdata
pop esi
mov edx [ edx + 0x40 ]
push edi
mov edi [ edx ]
push ebx
lea esp [ esp ]
push esi
mov esi [ edx + 0x44 ]
xor ecx ecx
test esi esi
je r-xdata
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov edx ecx
mov edx eax
mov eax [ ebp + 0x8 ]
lea ecx [ ecx ]
mov eax [ eax ]
dec edx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test bl bl
je r-xdata
mov eax [ ebp - 0x8 ]
push eax
call sub_10005ea0
pop ebx
pop edi
inc ecx
cmp ecx esi
jb r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
cmp bl [ edx + 0x1 ]
jne r-xdata
mov eax edi
test ecx ecx
je r-xdata
pop ebx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add edx 0x2
test bl bl
jne r-xdata
mov bl [ eax ]
cmp bl [ edx ]
jne r-xdata
sub_10004450
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ ebx + 0x44 ] esi
jbe r-xdata
pop edi
xor eax eax
pop esi
pop ebp
retn 0x4
lea esp [ esp ]
lea edi [ eax + 0x8 ]
cmp [ edi + 0x18 ] 0x10
lea eax [ edi + 0x4 ]
jb r-xdata
mov ecx esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push eax
call sub_1000c43b
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
inc esi
cmp esi [ ebx + 0x44 ]
jb r-xdata
mov eax [ ebx + 0x40 ]
mov eax [ eax ]
test esi esi
je r-xdata
sub_100044b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014fc8
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x4 ] 0x0
call sub_10005df0
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10004520
push ebp
mov ebp esp
push 0xffffffff
push sub_100155b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov eax [ edi ]
mov esi [ ebp + 0x8 ]
mov edx [ eax + 0x10 ]
push esi
call edx
mov ebx eax
test ebx ebx
je r-xdata
push esi
lea ebx [ ebp - 0x18 ]
mov ecx edi
call sub_10004720
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
mov eax [ ebx ]
mov edx [ eax + 0xc ]
mov ecx ebx
call edx
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp [ ebp - 0x14 ] 0x1
lea ebx [ edi + 0x4 ]
jbe r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] ebx
push esi
mov [ esi + 0x8 ] bl
call sub_1000ba8c
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000ba8c
add esp 0x4
push eax
call sub_10005720
push 0x8
mov esi eax
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov eax [ eax ]
push eax
call sub_10004450
test eax eax
jne r-xdata
mov eax [ eax ]
xor esi esi
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
mov esi eax
jmp r-xdata
mov ebx eax
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
mov edx [ ebp - 0x18 ]
mov eax [ edx ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea ebx [ ebp - 0x18 ]
call sub_10004cc0
mov edx [ ebp - 0x18 ]
push edx
call sub_1000ba8c
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp [ ebp - 0x14 ] 0x1
ja r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
push eax
call sub_10005720
mov eax [ eax ]
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_1000ba8c
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_100046c0
push ebp
mov ebp esp
sub esp 0x8
push esi
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_10004990
mov esi [ ebp - 0x4 ]
test esi esi
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x8
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10004720
push ebp
mov ebp esp
push 0xffffffff
push sub_10015581
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x30 ] eax
lea eax [ edi + 0x16 ]
mov esi ecx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x3c ] edi
call sub_1000a630
push 0x24
mov [ ebp - 0x38 ] eax
mov [ ebx + 0x4 ] edi
call sub_1000ba97
add esp 0x4
cmp eax edi
je r-xdata
lea edx [ ebp - 0x34 ]
push edx
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x34 ] edi
call sub_1000be2f
push r--data
lea eax [ ebp - 0x4c ]
push eax
mov [ ebp - 0x4c ] r--data
call sub_1000cd6c
int3
mov [ ebx ] eax
mov [ eax ] eax
mov eax [ ebx ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
cmp [ esi + 0x1c ] 0x10
mov [ ebp - 0x3c ] 0x1
jb r-xdata
add esi 0x8
mov esi [ esi + 0x8 ]
jmp r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
mov eax esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10003480
mov [ ebp - 0x4 ] 0x1
mov esi [ ebx ]
mov edx [ esi + 0x4 ]
lea ecx [ ebp - 0x2c ]
push ecx
push edx
push esi
call sub_10004de0
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jae r-xdata
mov ecx esi
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
lea edx [ ecx + 0x1 ]
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
push r--data
call sub_10013ad6
mov esi [ ebp - 0x30 ]
cmp [ esi ] 0x0
mov [ ebp - 0x30 ] esi
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
jmp r-xdata
mov ecx [ ebp - 0x38 ]
push ecx
push esi
call sub_1000c260
xor ecx ecx
add esp 0x8
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x2c ] cl
cmp eax ecx
je r-xdata
mov eax esi
lea edi [ eax + 0x1 ]
mov edi edi
mov edi eax
sub edi esi
mov eax esi
lea esi [ ebp - 0x2c ]
call sub_10003480
mov [ ebp - 0x4 ] 0x2
mov esi [ ebx ]
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x2c ]
push edx
push eax
push esi
call sub_10004de0
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
mov edi eax
mov eax esi
lea esi [ ebp - 0x2c ]
call sub_10003480
mov [ ebp - 0x4 ] 0x3
mov esi [ ebx ]
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x2c ]
push edx
push eax
push esi
call sub_10004d10
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x34 ]
inc ecx
mov [ ebp - 0x30 ] ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax [ ebp - 0x30 ]
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x30 ]
cmp [ ecx ] 0x0
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add [ ebp - 0x30 ] eax
mov esi [ ebp - 0x30 ]
sub_10004990
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push eax
lea ebx [ ebp - 0xc ]
mov esi ecx
call sub_10004720
mov eax [ ebp - 0xc ]
lea ebx [ esi + 0x4 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
cmp [ ebp - 0x8 ] 0x1
jbe r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
mov [ ecx ] edx
mov eax [ esi ]
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_1000ba8c
mov eax [ ebp - 0xc ]
add esp 0x4
dec [ ebp - 0x8 ]
mov edx [ esi + 0x8 ]
push edx
call sub_1000ba8c
add esp 0x4
push eax
call sub_10004450
mov esi [ ebp + 0x8 ]
mov [ esi ] ebx
lea ebx [ ebp - 0xc ]
mov [ esi + 0x4 ] eax
call sub_10004cc0
mov eax [ ebp - 0xc ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ eax ]
push eax
call sub_10004450
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ eax ]
mov esi [ ebp + 0x8 ]
xor eax eax
lea ebx [ ebp - 0xc ]
mov [ esi ] eax
mov [ esi + 0x4 ] eax
call sub_10004cc0
mov edx [ ebp - 0xc ]
push edx
call sub_1000ba8c
add esp 0x4
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0xc ]
mov esi [ eax ]
cmp esi eax
je r-xdata
cmp [ ebp - 0x8 ] 0x1
ja r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_1000ba8c
mov eax [ ebp - 0xc ]
add esp 0x4
dec [ ebp - 0x8 ]
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10004ad0
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x24 ] eax
push edi
mov eax 0x15
mov ebx ecx
mov edi edx
call sub_1000a630
mov esi eax
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp edi eax
jb r-xdata
push 0x0
sub esp 0x1c
mov esi esp
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov eax ebx
mov [ ebp - 0x28 ] esp
mov [ esi ] 0x0
call sub_10003480
lea ecx [ ebp - 0x20 ]
push ecx
mov ecx [ ebp - 0x24 ]
add ecx 0x4
call sub_100057f0
xor edx edx
cmp [ ebp - 0x10 ] edx
sete dl
cmp [ ebp - 0xc ] 0x10
mov esi edx
jb r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x20 ]
push eax
call sub_1000ba8c
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push ebx
call sub_1000c48d
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add ebx eax
mov eax esi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub edi eax
sub_10004bb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015218
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
push 0x0
push 0x0
lea eax [ ebp - 0x2c ]
push eax
add ecx 0x4
call sub_10005240
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov [ edi ] eax
inc eax
push eax
call sub_1000c482
mov edx [ ebp - 0x2c ]
mov [ esi ] eax
mov esi 0x10
add esp 0x4
cmp [ ebp - 0x18 ] esi
jae r-xdata
mov ecx eax
lea ebx [ ebx ]
lea edx [ ebp - 0x2c ]
mov al [ edx ]
mov [ ecx ] al
inc edx
inc ecx
test al al
jne r-xdata
cmp [ ebp - 0x18 ] esi
jb r-xdata
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10004c60
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ esi + 0x44 ]
mov ecx [ ecx ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_10004cc0
mov eax [ ebx ]
push esi
mov esi [ eax ]
mov [ eax ] eax
mov eax [ ebx ]
mov [ eax + 0x4 ] eax
mov [ ebx + 0x4 ] 0x0
cmp esi [ ebx ]
je r-xdata
pop esi
retn
push edi
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_1000ba8c
add esp 0x4
mov esi edi
cmp edi [ ebx ]
jne r-xdata
mov eax [ esi + 0x8 ]
push eax
call sub_1000ba8c
add esp 0x4
cmp [ esi + 0x1c ] 0x10
mov edi [ esi ]
jb r-xdata
pop edi
sub_10004d10
push ebp
mov ebp esp
push 0xffffffff
push sub_10014fa5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_1000ba97
mov esi eax
xor eax eax
add esp 0x4
mov [ ebp - 0x14 ] esi
cmp esi eax
je r-xdata
lea edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] eax
call sub_1000be2f
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_1000cd6c
int3
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
lea ecx [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
cmp ecx eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
mov [ ecx ] al
mov eax [ ebp + 0x10 ]
push eax
or eax 0xffffffff
xor ebx ebx
call sub_10003750
sub_10004de0
push ebp
mov ebp esp
push 0xffffffff
push sub_100151f5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_1000ba97
mov ebx eax
xor eax eax
add esp 0x4
mov [ ebp - 0x14 ] ebx
cmp ebx eax
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] eax
call sub_1000be2f
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_1000cd6c
int3
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ ebx ] ecx
mov [ ebx + 0x4 ] edx
lea esi [ ebx + 0x8 ]
mov [ ebp - 0x4 ] 0x1
cmp esi eax
je r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi [ ebp + 0x10 ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
call sub_10003410
sub_10004ea0
push ebp
mov ebp esp
push 0xffffffff
push sub_100151d3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
lea esi [ ebx + 0x4 ]
mov [ ebx ] r--data
mov eax 0xf
xor edi edi
mov [ esi + 0x14 ] eax
mov [ esi + 0x10 ] edi
mov [ esi ] 0x0
mov [ ebp - 0x4 ] edi
mov [ ebx + 0x38 ] eax
mov [ ebx + 0x34 ] edi
mov [ ebx + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0x1
push 0x54
mov [ ebx + 0x44 ] edi
call sub_1000ba97
add esp 0x4
cmp eax edi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] edi
call sub_1000be2f
push r--data
lea ecx [ ebp - 0x1c ]
push ecx
mov [ ebp - 0x1c ] r--data
call sub_1000cd6c
int3
mov [ ebx + 0x40 ] eax
mov [ eax ] eax
mov eax [ ebx + 0x40 ]
mov [ eax + 0x4 ] eax
mov edx [ ebp + 0xc ]
mov eax edx
mov [ ebp - 0x4 ] 0x2
lea edi [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
mov edi eax
mov eax edx
call sub_10003480
mov [ ebx + 0x20 ] 0x0
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_10004f80
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005df0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10004fb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015520
mov eax [ fs : 0x0 ]
push eax
sub esp 0x50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x54 ] eax
mov ebx ecx
xor eax eax
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x50 ] eax
lea ecx [ ebx + 0x40 ]
mov [ ebp - 0x4 ] eax
call sub_10006040
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
cmp [ ebp + 0x20 ] 0x10
mov eax [ ebp + 0xc ]
mov [ ebx + 0x20 ] 0x1
jae r-xdata
call sub_10005680
mov ecx eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
lea esi [ ecx + 0x1 ]
lea eax [ ebp + 0xc ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10003480
mov ecx [ ebp + 0x28 ]
lea edx [ ecx + ecx ]
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x50 ] edx
jmp r-xdata
push r--data
call sub_10005720
cmp [ ebp + 0x2c ] 0x0
mov esi eax
je r-xdata
mov eax [ ebp + 0x28 ]
cmp [ ebp - 0x4c ] 0x0
jg r-xdata
xor ebx ebx
mov edi 0x10
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_1000ba8c
add esp 0x4
xor ebx ebx
mov [ ebp - 0x18 ] edi
mov edi 0x10
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp [ esi + 0x14 ] edi
jae r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
push eax
sub esp 0x1c
mov ecx esp
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x5c ] esp
mov edi 0xf
push eax
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x10 ] 0x0
or eax 0xffffffff
xor ebx ebx
mov [ ecx ] 0x0
call sub_10003750
lea ecx [ ebp - 0x48 ]
push ecx
mov ecx esi
call sub_100057f0
mov esi eax
lea edx [ ebp - 0x2c ]
cmp edx esi
je r-xdata
call sub_10005680
mov ecx eax
lea esi [ ecx + 0x1 ]
lea eax [ ebp - 0x2c ]
mov edx [ esi ]
mov [ ebp - 0x2c ] edx
mov [ esi ] ebx
mov eax [ esi + 0x10 ]
inc eax
push eax
lea ecx [ ebp - 0x2c ]
push esi
push ecx
call sub_1000bef0
add esp 0xc
jmp r-xdata
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10003480
mov eax esi
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
push eax
or eax 0xffffffff
xor ebx ebx
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
call sub_10003750
lea eax [ ebx + 0x1c ]
mov [ ebp - 0x4 ] 0x3
call sub_1000a630
mov esi [ ebp - 0x34 ]
mov edx [ ebp - 0x48 ]
cmp esi 0x10
jae r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov eax [ esi + 0x10 ]
mov [ ebp - 0x1c ] eax
mov ecx [ esi + 0x14 ]
mov [ ebp - 0x18 ] ecx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
jmp r-xdata
mov al [ eax ]
xor ebx ebx
xor ecx ecx
cmp [ edx ] al
jne r-xdata
lea edx [ ebp - 0x48 ]
xor edx edx
cmp [ ebp - 0x50 ] ecx
mov [ ebp - 0x4 ] 0x1
sete dl
mov edi edx
cmp esi 0x10
jb r-xdata
inc ecx
cmp [ ecx + edx ] al
je r-xdata
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_1000ba8c
add esp 0x4
mov esi [ ebp - 0x54 ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
lea edi [ ebp - 0x2c ]
mov [ esi ] bl
call sub_10003410
mov edi 0x10
cmp [ ebp - 0x18 ] edi
jb r-xdata
inc [ ebp - 0x4c ]
mov ebx [ ebp - 0x58 ]
jmp r-xdata
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x28
mov edx [ ebp + 0xc ]
push edx
call sub_1000ba8c
add esp 0x4
sub_10005240
push ebp
mov ebp esp
push 0xffffffff
push sub_10015189
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x3c ] eax
lea eax [ edi + 0x17 ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x4c ] edi
call sub_1000a630
mov [ ebp - 0x40 ] eax
lea eax [ edi + 0x18 ]
call sub_1000a630
mov ebx eax
lea eax [ edi + 0x19 ]
call sub_1000a630
mov [ ebp - 0x34 ] eax
lea eax [ edi + 0x1a ]
call sub_1000a630
mov [ ebp - 0x44 ] eax
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] edi
mov eax r--data
mov [ esi ] 0x0
call sub_10003480
mov ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4c ] 0x1
cmp [ ecx + 0x20 ] edi
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov edx ecx
mov edi [ edx + 0x18 ]
cmp edi 0x10
jb r-xdata
mov edi [ ebp - 0x30 ]
mov eax edi
call sub_10005610
mov [ ebp - 0x38 ] 0x0
test eax eax
je r-xdata
mov eax ecx
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
cmp [ edi + 0x44 ] 0x0
jbe r-xdata
cmp [ edi + 0x44 ] 0x0
jbe r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax [ ebp - 0x34 ]
je r-xdata
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x34 ] ecx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp - 0x3c ]
inc ecx
mov [ ebp - 0x34 ] ecx
mov edx [ ebp - 0x3c ]
inc edx
mov [ ebp - 0x34 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003670
mov eax ebx
lea ecx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
cmp edi 0x10
jb r-xdata
mov ebx [ ebp - 0x40 ]
add eax 0x8
cmp [ ebp - 0x3c ] 0x0
mov [ ebp - 0x48 ] eax
jle r-xdata
lea ecx [ ecx ]
add eax 0x8
mov [ ebp - 0x44 ] eax
test edx edx
jne r-xdata
mov ecx edx
mov edi edi
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
mov edx [ ebp - 0x34 ]
mov eax edx
lea ebx [ eax + 0x1 ]
jmp r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
jmp r-xdata
mov edi [ ebp - 0x3c ]
dec ecx
mov eax [ eax ]
jne r-xdata
cmp [ ebp - 0x3c ] 0x0
mov ebx [ ebp - 0x40 ]
jle r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
dec ecx
mov eax [ eax ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003670
jmp r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003670
mov eax ebx
lea ecx [ eax + 0x1 ]
mov ecx eax
lea edi [ ecx + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
dec edi
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov edi [ ebp - 0x3c ]
mov ecx [ ebp - 0x34 ]
push 0x0
push ecx
mov ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x2c ]
push edx
call sub_10005240
push 0x0
push eax
or eax 0xffffffff
mov edi esi
mov [ ebp - 0x4 ] 0x1
call sub_10003a60
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
sub eax ebx
push eax
mov eax edx
mov ecx esi
call sub_10003670
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
mov eax [ ebp - 0x30 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
mov edi [ ebp - 0x44 ]
mov eax edi
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003670
dec edi
jne r-xdata
mov ebx [ ebp - 0x30 ]
mov eax [ ebx + 0x44 ]
mov edi [ ebp - 0x38 ]
dec eax
cmp edi eax
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx eax
lea edi [ ecx + 0x1 ]
lea esp [ esp ]
mov eax [ eax ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
inc edi
mov [ ebp - 0x38 ] edi
cmp edi [ ebx + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx esi
call sub_10003670
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003670
jmp r-xdata
sub eax ecx
push eax
mov eax edi
mov ecx esi
call sub_10003670
mov edi [ ebp - 0x48 ]
mov eax edi
call sub_10005610
push eax
mov eax [ ebp - 0x34 ]
push eax
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx edi
call sub_10005240
push 0x0
push eax
or eax 0xffffffff
mov edi esi
mov [ ebp - 0x4 ] 0x2
call sub_10003a60
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax [ ebp - 0x30 ]
mov edx [ ebp - 0x38 ]
mov eax [ eax + 0x40 ]
mov eax [ eax ]
test edx edx
je r-xdata
jmp r-xdata
mov ebx [ ebp - 0x30 ]
mov eax [ ebx + 0x44 ]
mov edi [ ebp - 0x38 ]
dec eax
cmp edi eax
je r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_1000ba8c
add esp 0x4
inc edi
mov [ ebp - 0x38 ] edi
cmp edi [ ebx + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx esi
call sub_10003670
mov edx [ ebp - 0x30 ]
mov ecx [ ebp - 0x38 ]
mov eax [ edx + 0x40 ]
mov eax [ eax ]
test ecx ecx
je r-xdata
sub_10005610
push ebp
mov ebp esp
push ecx
cmp [ eax + 0x20 ] 0x0
jne r-xdata
push ebx
push esi
push edi
mov edi [ eax + 0x44 ]
xor esi esi
test edi edi
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ eax + 0x40 ]
mov ebx [ eax ]
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov ecx esi
lea esp [ esp ]
lea edx [ eax + 0x1 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn
inc esi
cmp esi edi
jb r-xdata
mov eax ebx
test esi esi
je r-xdata
sub_10005680
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
mov eax 0x1b
call sub_1000a630
mov ebx eax
mov eax 0x19
call sub_1000a630
mov edi eax
mov eax 0x1c
call sub_1000a630
mov [ ebp - 0x4 ] eax
mov edi edi
mov ecx esi
cmp esi eax
je r-xdata
push edi
push esi
call sub_1000c260
add esp 0x8
test eax eax
je r-xdata
lea esi [ eax + 0x1 ]
mov al [ esi ]
cmp al [ edi ]
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
mov cl [ esi ]
mov eax esi
test cl cl
je r-xdata
push ebx
push esi
call sub_1000c260
add esp 0x8
test eax eax
jne r-xdata
inc esi
jmp r-xdata
mov eax esi
inc ecx
cmp ecx eax
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
lea esp [ esp ]
cmp [ ecx ] dl
jne r-xdata
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
cmp cl dl
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10005720
push ebp
mov ebp esp
push 0xffffffff
push sub_100154d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x54
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x60 ] eax
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
mov ecx [ ebp - 0x60 ]
push ecx
lea edx [ ebp - 0x5c ]
push edx
mov [ ebx + 0x20 ] 0x1
call sub_10004ea0
mov [ ebp - 0x4 ] edi
mov esi [ ebx + 0x40 ]
push eax
mov eax [ esi + 0x4 ]
push eax
push esi
call sub_10006150
mov ecx [ ebx + 0x44 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ ebx + 0x44 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_10005df0
mov ecx [ ebx + 0x44 ]
dec ecx
mov eax [ ebx + 0x40 ]
mov eax [ eax ]
je r-xdata
push r--data
call sub_10013ad6
add eax 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
dec ecx
mov eax [ eax ]
jne r-xdata
sub_100057f0
push ebp
mov ebp esp
push 0xffffffff
push sub_100159d0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x70
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x58 ] ecx
mov ecx [ ebp + 0x28 ]
xor ebx ebx
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x68 ] ecx
mov [ ebp - 0x64 ] ebx
lea eax [ ebx + 0x1d ]
mov [ ebp - 0x4 ] ebx
call sub_1000a630
mov [ ebp - 0x50 ] eax
lea eax [ ebx + 0x1e ]
call sub_1000a630
mov [ ebp - 0x74 ] eax
lea eax [ ebx + 0x19 ]
call sub_1000a630
mov [ ebp - 0x78 ] eax
lea eax [ ebx + 0x1b ]
call sub_1000a630
mov [ ebp - 0x64 ] eax
lea eax [ ebx + 0x1c ]
call sub_1000a630
cmp [ ebp + 0x20 ] 0x10
mov [ ebp - 0x70 ] eax
mov eax [ ebp + 0xc ]
jae r-xdata
call sub_10005680
mov ecx eax
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
lea esi [ ecx + 0x1 ]
lea esp [ esp ]
lea eax [ ebp + 0xc ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ ebp - 0x48 ]
call sub_10003480
mov [ ebp - 0x4 ] 0x1
mov edx esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
push edx
or eax 0xffffffff
xor ebx ebx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
call sub_10003750
lea eax [ ebx + 0x1c ]
mov [ ebp - 0x4 ] 0x2
call sub_1000a630
mov edi [ ebp - 0x18 ]
mov edx [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov al [ eax ]
xor ecx ecx
cmp [ edx ] al
jne r-xdata
lea edx [ ebp - 0x2c ]
mov esi [ ebp - 0x68 ]
add esi esi
xor ebx ebx
cmp esi ecx
sete bl
mov [ ebp - 0x4 ] 0x1
cmp edi 0x10
jb r-xdata
inc ecx
cmp [ ecx + edx ] al
je r-xdata
test ebx ebx
jne r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
cmp [ ebp - 0x34 ] 0x10
mov ebx [ ebp - 0x48 ]
mov [ ebp - 0x6c ] 0x0
mov [ ebp - 0x5c ] 0xffffffff
jae r-xdata
mov esi [ ebp - 0x60 ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
lea edi [ ebp - 0x48 ]
mov [ esi ] bl
call sub_10003410
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov al [ ebx + esi ]
mov ecx [ ebp - 0x50 ]
add ebx esi
mov [ ebp - 0x4c ] ebx
cmp al [ ecx ]
jne r-xdata
lea ebx [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov eax ebx
mov [ ebp - 0x54 ] 0x0
lea edx [ eax + 0x1 ]
mov edx [ ebp - 0x70 ]
mov cl [ edx ]
mov eax 0x1
cmp [ ebx + 0x1 ] cl
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x24
mov edx [ ebp + 0xc ]
push edx
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
je r-xdata
mov esi [ ebp - 0x58 ]
dec eax
mov [ ebp - 0x5c ] eax
add esi 0x4
xor edi edi
mov eax r--data
mov [ ebp - 0x6c ] 0x1
call sub_10003480
inc eax
cmp [ eax + ebx ] cl
je r-xdata
call sub_1000ba8c
add esp 0x4
mov esi [ ebp - 0x60 ]
mov ebx 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] 0x0
xor edi edi
mov eax r--data
mov [ esi ] 0x0
call sub_10003480
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
or eax 0xffffffff
mov esi ebx
sub eax ebx
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x7c ] eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_1000ba8c
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
push edx
push esi
call sub_1000c48d
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp + 0xc ]
push eax
mov esi [ ebp - 0x78 ]
mov eax esi
lea edx [ eax + 0x1 ]
cmp [ ebp - 0x6c ] eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
mov esi [ ebp - 0x50 ]
push esi
call sub_1000c48d
add esp 0xc
test eax eax
je r-xdata
mov edi [ ebp - 0x54 ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
mov eax [ ebp - 0x4c ]
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
call sub_10003480
mov ebx [ ebp - 0x58 ]
add ebx 0x4
mov edi esi
mov esi ebx
mov [ ebp - 0x4 ] 0x3
call sub_10003410
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax [ ebp - 0x5c ]
mov ebx [ ebp - 0x54 ]
inc eax
cmp eax ebx
jne r-xdata
mov edi [ ebp - 0x64 ]
mov eax edi
lea edx [ eax + 0x1 ]
cmp [ ebp - 0x54 ] 0x0
jbe r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x5c ]
mov edx [ ebp - 0x4c ]
mov edi ebx
sub edi ecx
lea eax [ edx + ecx + 0x1 ]
dec edi
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x50 ] eax
call sub_10003480
mov esi [ ebp - 0x58 ]
add esi 0x24
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x5
call sub_10003410
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ esi ] 0x0
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push edi
push esi
call sub_1000c48d
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x70 ]
mov ecx [ ebp - 0x54 ]
mov al [ eax ]
mov edx [ ebp - 0x4c ]
mov [ ebp - 0x6c ] 0x1
mov [ ebp - 0x5c ] ecx
cmp [ edx + ecx + 0x1 ] al
jne r-xdata
mov edi [ ebp - 0x50 ]
add edi [ ebp - 0x7c ]
je r-xdata
mov edi [ ebp - 0x58 ]
cmp [ edi + 0x14 ] 0x0
jne r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax [ ebp - 0x4c ]
inc ebx
inc esi
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x50 ] esi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x68 ]
mov edx [ ebp - 0x4c ]
inc ecx
push 0x0
push ecx
sub esp 0x1c
lea eax [ ebx + edx ]
mov esi esp
mov ebx 0xf
mov ecx eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x64 ] esp
mov [ esi ] 0x0
lea edi [ ecx + 0x1 ]
cmp [ esi ] 0x0
jne r-xdata
lea ecx [ ecx ]
nop
mov esi [ ebp - 0x60 ]
mov edx [ ebp - 0x4c ]
xor ecx ecx
mov [ edi + 0x20 ] ecx
mov [ esi + 0x10 ] ecx
lea eax [ ebx + edx ]
mov [ esi + 0x14 ] 0xf
mov [ esi ] cl
mov ecx eax
lea edi [ ecx + 0x1 ]
cmp [ edi + 0x34 ] 0x0
jbe r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
cmp ebx eax
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov edi ecx
call sub_10003480
mov esi [ ebp - 0x60 ]
mov ecx [ ebp - 0x58 ]
push esi
call sub_10004fb0
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov ebx [ ebp - 0x54 ]
inc ecx
cmp [ edx + ecx + 0x1 ] al
je r-xdata
mov [ ebp - 0x5c ] ecx
dec edi
jne r-xdata
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
call sub_10003480
mov eax esi
cmp ebx eax
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov edi ecx
call sub_10003480
jmp r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov edx [ ebp - 0x74 ]
mov eax edx
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax [ ebp - 0x4c ]
mov cl [ edi + eax ]
mov edx [ ebp - 0x70 ]
cmp cl [ edx ]
jne r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ ebx + 0x14 ] 0x10
jb r-xdata
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov ecx [ ebp - 0x74 ]
push ecx
push esi
call sub_1000c260
add esp 0x8
test eax eax
je r-xdata
mov esi [ esi ]
mov ecx [ ebp + 0xc ]
push ecx
jmp r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_1000ba8c
add esp 0x4
xor esi esi
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] esi
mov [ ebx ] 0x0
cmp [ ebp - 0x18 ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_1000ba8c
add esp 0x4
mov edx [ ebp - 0x68 ]
mov eax [ ebp - 0x50 ]
push 0x1
inc edx
push edx
sub esp 0x1c
mov esi esp
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x64 ] esp
mov [ esi ] 0x0
lea ecx [ eax + 0x1 ]
lea esp [ esp ]
mov edx [ ebp - 0x2c ]
mov [ ebx ] edx
mov [ ebp - 0x2c ] esi
mov eax [ ebp - 0x1c ]
inc eax
push eax
lea ecx [ ebp - 0x2c ]
push ecx
push ebx
call sub_1000bef0
add esp 0xc
jmp r-xdata
mov ecx [ ebp + 0xc ]
push ecx
jmp r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
mov edi eax
mov eax [ ebp - 0x50 ]
call sub_10003480
mov esi [ ebp - 0x60 ]
mov ecx [ ebp - 0x58 ]
push esi
call sub_10004fb0
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x18 ]
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x14 ] ecx
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x18 ] esi
sub_10005df0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014e5e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea edi [ esi + 0x40 ]
mov [ ebp - 0x14 ] edi
mov ecx edi
mov [ ebp - 0x4 ] 0x2
call sub_10006040
mov eax [ edi ]
push eax
call sub_1000ba8c
mov edi 0x10
add esp 0x4
cmp [ esi + 0x38 ] edi
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] ebx
mov [ esi + 0x24 ] bl
cmp [ esi + 0x18 ] edi
jb r-xdata
mov ecx [ esi + 0x24 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi + 0x4 ]
push edx
call sub_1000ba8c
add esp 0x4
sub_10005ea0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014e5e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x40 ]
mov edi [ eax ]
test ecx ecx
je r-xdata
cmp edi [ edx + 0x40 ]
je r-xdata
mov eax ecx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
mov [ eax ] ecx
mov edx [ edi ]
mov eax [ edi + 0x4 ]
lea esi [ edi + 0x8 ]
mov [ edx + 0x4 ] eax
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x14 ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_10006040
mov ecx [ ebx ]
push ecx
call sub_1000ba8c
mov ebx 0x10
add esp 0x4
cmp [ esi + 0x38 ] ebx
jb r-xdata
dec eax
mov edi [ edi ]
jne r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov edx [ esi + 0x24 ]
push edx
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_1000ba8c
mov eax [ ebp + 0x8 ]
add esp 0x4
dec [ eax + 0x44 ]
mov eax [ esi + 0x4 ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10005f90
push ebp
mov ebp esp
push 0xffffffff
push sub_10014d08
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov ecx esi
mov [ ebp - 0x4 ] 0x0
call sub_10006040
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10005ff0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov [ ebp + 0x8 ] eax
cmp esi [ edi ]
je r-xdata
mov [ ebx ] eax
mov eax ebx
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
lea ecx [ esi + 0x8 ]
mov [ edx + 0x4 ] eax
call sub_10005df0
push esi
call sub_1000ba8c
mov ecx [ ebp + 0x8 ]
add esp 0x4
dec [ edi + 0x4 ]
mov [ ebx ] ecx
mov eax ebx
pop esi
pop ebp
retn 0x4
sub_10006040
push ebp
mov ebp esp
push 0xffffffff
push sub_10014f7e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x14 ] ecx
mov eax [ ecx ]
mov edi [ eax ]
mov [ eax ] eax
mov eax [ ecx ]
mov [ eax + 0x4 ] eax
mov [ ecx + 0x4 ] 0x0
cmp edi [ ecx ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ edi ]
lea esi [ edi + 0x8 ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x18 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x1c ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_10006040
mov ebx [ ebx ]
push ebx
call sub_1000ba8c
mov ebx 0x10
add esp 0x4
cmp [ esi + 0x38 ] ebx
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_1000ba8c
mov edi [ ebp - 0x10 ]
mov edx [ ebp - 0x14 ]
add esp 0x4
cmp edi [ edx ]
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10006150
push ebp
mov ebp esp
push 0xffffffff
push sub_10015145
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x54
call sub_1000ba97
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
test esi esi
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_1000cd6c
int3
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] ecx
mov [ esi ] eax
lea ecx [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
test ecx ecx
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ ebp + 0x10 ]
push edx
call sub_10006210
sub_10006210
push ebp
mov ebp esp
push 0xffffffff
push sub_10015116
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov edi [ ebp + 0x8 ]
lea ecx [ esi + 0x4 ]
mov [ esi ] r--data
lea eax [ edi + 0x4 ]
push eax
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
or eax 0xffffffff
xor ebx ebx
mov [ ecx ] 0x0
call sub_10003750
xor eax eax
mov [ ebp - 0x4 ] eax
mov ecx [ edi + 0x20 ]
mov [ esi + 0x20 ] ecx
lea ecx [ esi + 0x24 ]
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
lea edx [ edi + 0x24 ]
mov [ ecx ] al
push edx
or eax 0xffffffff
call sub_10003750
add edi 0x40
push edi
lea eax [ esi + 0x40 ]
push eax
mov [ ebp - 0x4 ] 0x1
call sub_100062c0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100062c0
push ebp
mov ebp esp
push 0xffffffff
push sub_100150d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
push 0x54
mov [ esi + 0x4 ] edi
call sub_1000ba97
add esp 0x4
cmp eax edi
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] edi
call sub_1000be2f
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_1000cd6c
int3
mov [ esi ] eax
mov [ eax ] eax
mov eax [ esi ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax ]
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov edi [ ebp + 0x8 ]
mov edx [ eax ]
push edi
push eax
push edx
push ecx
push esi
call sub_10006380
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_10006380
push ebp
mov ebp esp
push 0xffffffff
push sub_100150b0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp eax [ ebp + 0x14 ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov ecx [ ebp + 0xc ]
add eax 0x8
push eax
mov eax [ ecx + 0x4 ]
lea esi [ ecx + 0x4 ]
push eax
push ecx
call sub_10006150
mov ecx [ edi + 0x4 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov edx [ ebp + 0x10 ]
mov eax [ edx ]
mov [ ebp + 0x10 ] eax
jmp r-xdata
push r--data
call sub_10013ad6
sub_10006407
mov esi [ ebp - 0x14 ]
cmp esi [ ebp + 0x10 ]
je r-xdata
push 0x0
push 0x0
call sub_1000cd6c
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
push eax
lea ebx [ ebp + 0x8 ]
call sub_10005ff0
mov esi [ esi ]
cmp esi [ ebp + 0x10 ]
jne r-xdata
sub_10006450
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10006480
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
mov [ eax ] 0x0
push esi
mov esi ecx
mov [ ebx ] 0x0
mov edx [ esi ]
mov eax [ edx + 0x44 ]
call eax
test eax eax
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x8
mov esi [ esi + 0x4 ]
add esi 0x24
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax 0x1f
call sub_1000a630
lea edx [ eax + 0x1 ]
mov esi [ esi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push edi
lea edi [ eax + esi ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0x20
call sub_1000a630
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub esi eax
mov eax esi
test al 0x1
jne r-xdata
pop edi
shr eax 0x1
push eax
mov [ ebx ] eax
call sub_1000c482
mov ecx [ ebp + 0x8 ]
xor esi esi
add esp 0x4
mov [ ecx ] eax
cmp [ ebx ] esi
jbe r-xdata
lea ecx [ ecx ]
mov al [ edi + esi * 2 + 0x1 ]
lea edx [ eax - 0x30 ]
cmp dl 0x9
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
mov al dl
jmp r-xdata
lea ecx [ eax - 0x41 ]
cmp cl 0x5
ja r-xdata
sub al 0x57
mov cl al
jmp r-xdata
lea edx [ eax - 0x41 ]
cmp dl 0x5
ja r-xdata
sub al 0x57
jmp r-xdata
shl cl 0x4
or cl al
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov [ esi + edx ] cl
inc esi
cmp esi [ ebx ]
jb r-xdata
xor cl cl
sub al 0x37
mov cl al
jmp r-xdata
xor al al
sub al 0x37
jmp r-xdata
mov al [ edi + esi * 2 ]
lea ecx [ eax - 0x30 ]
cmp cl 0x9
jbe r-xdata
sub_10006590
push ebx
mov ebx [ ecx + 0x4 ]
push esi
push edi
lea ecx [ ebx + 0x40 ]
call sub_10006040
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
pop edi
pop esi
mov [ ebx + 0x20 ] 0x1
pop ebx
retn
sub_100065c0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ecx + 0x4 ]
push esi
mov ecx eax
push edi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
lea esi [ ebx + 0x24 ]
mov edi ecx
call sub_10003480
lea ecx [ ebx + 0x40 ]
call sub_10006040
pop edi
pop esi
mov [ ebx + 0x20 ] 0x0
pop ebx
pop ebp
retn 0x4
sub_10006630
push ebx
mov ebx [ ecx + 0x4 ]
push esi
push edi
lea ecx [ ebx + 0x40 ]
call sub_10006040
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10003480
mov [ ebx + 0x20 ] edi
pop edi
pop esi
pop ebx
retn
sub_10006660
push ebp
mov ebp esp
push ecx
mov eax 0x1f
mov [ ebp - 0x4 ] ecx
call sub_1000a630
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push ebx
sub eax edx
push esi
mov esi eax
push edi
mov eax 0x20
call sub_1000a630
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ ebp + 0xc ]
sub eax edx
lea eax [ eax + ebx * 2 ]
lea ecx [ eax + esi + 0x1 ]
push ecx
call sub_1000c482
mov esi eax
add esp 0x4
mov eax 0x1f
mov [ ebp + 0xc ] esi
call sub_1000a630
mov edx esi
sub edx eax
nop
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add esi eax
xor ecx ecx
test ebx ebx
je r-xdata
mov eax 0x20
call sub_1000a630
sub esi eax
mov edi [ ebp + 0x8 ]
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ebx [ eax + 0x4 ]
mov eax [ ebp + 0xc ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax [ ebp + 0xc ]
lea esi [ ebx + 0x24 ]
call sub_10003480
lea ecx [ ebx + 0x40 ]
call sub_10006040
mov ecx [ ebp + 0xc ]
push ecx
mov [ ebx + 0x20 ] 0x0
call sub_1000c2e6
add esp 0x4
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor al al
add al 0x57
jmp r-xdata
mov [ esi ] al
mov al [ ecx + edi ]
and al 0xf
cmp al 0x9
ja r-xdata
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
xor al al
add al 0x57
jmp r-xdata
mov [ esi + 0x1 ] al
inc ecx
add esi 0x2
cmp ecx ebx
jb r-xdata
mov al [ ecx + edi ]
sar al 0x4
and al 0xf
cmp al 0x9
ja r-xdata
sub_10006790
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x40 ]
mov ecx [ edx ]
mov edx [ ebp + 0x8 ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_100067d0
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
mov ebx [ eax + 0x44 ]
push esi
push edi
xor edi edi
test ebx ebx
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ eax + 0x40 ]
mov ecx [ eax ]
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp - 0x4 ]
test edi edi
je r-xdata
lea esi [ eax + 0x8 ]
cmp [ esi + 0x18 ] 0x10
lea eax [ esi + 0x4 ]
jb r-xdata
mov ecx edi
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0x8
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
inc edi
cmp edi ebx
jb r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
pop edi
mov [ eax + 0x4 ] esi
pop esi
mov [ eax ] r--data
pop ebx
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
sub_10006870
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
push esi
push edi
jb r-xdata
mov [ ebp - 0x4 ] eax
mov edi eax
mov edi [ eax ]
mov [ ebp - 0x4 ] edi
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax 0x1f
call sub_1000a630
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0x20
call sub_1000a630
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add eax esi
cmp ebx eax
jae r-xdata
mov eax 0x1f
call sub_1000a630
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0x1f
call sub_1000a630
push esi
push eax
push edi
call sub_1000c6b3
add esp 0xc
test eax eax
jne r-xdata
mov eax 0x20
call sub_1000a630
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0x20
call sub_1000a630
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax 0x20
call sub_1000a630
push ebx
sub esi edi
add esi [ ebp - 0x4 ]
push eax
push esi
call sub_1000c6b3
add esp 0xc
neg eax
pop edi
sbb eax eax
pop esi
inc eax
pop ebx
mov esp ebp
pop ebp
retn
sub_100069a0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov edx eax
push edi
lea esi [ edx + 0x1 ]
mov edi edi
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
mov esi [ ecx + 0x4 ]
add esi 0x4
mov edi edx
call sub_10003480
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_10006a00
push ebp
mov ebp esp
push 0xffffffff
push sub_1001597b
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x8
call sub_1000ba97
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ebx [ edi + 0x4 ]
push r--data
call sub_10005720
mov [ esi + 0x4 ] eax
mov [ esi ] r--data
mov eax esi
sub_10006a70
push esi
push edi
mov edi [ ecx + 0x4 ]
add edi 0x24
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov edi [ edi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_1000c482
mov esi eax
add esp 0x4
mov ecx edi
sub esi edi
mov edi edi
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
pop edi
pop esi
retn
sub_10006ab0
push ebp
mov ebp esp
sub esp 0xe60
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov eax 0x21
mov esi ecx
call sub_1000a630
mov ecx [ ebp + 0x8 ]
push ecx
push eax
lea edx [ ebp - 0xe60 ]
push edx
call sub_1000c54d
mov ebx [ esi + 0x4 ]
lea eax [ ebp - 0xe60 ]
add esp 0xc
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
lea esi [ ebx + 0x24 ]
lea eax [ ebp - 0xe60 ]
call sub_10003480
lea ecx [ ebx + 0x40 ]
call sub_10006040
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov [ ebx + 0x20 ] 0x0
xor ecx ebp
pop ebx
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
sub_10006b40
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10006b70
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10006ba0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10006ba0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014f3e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x2
mov edi [ esi + 0x28 ]
mov ebx [ esi + 0x2c ]
cmp edi ebx
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push 0x0
push 0x0
push eax
call [ SetWindowLongW@IAT ]
mov eax [ esi + 0x8 ]
push eax
call [ DestroyWindow@IAT ]
mov [ esi + 0x8 ] 0x0
add edi 0x4
cmp edi ebx
jne r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
xor eax eax
mov [ esi + 0x28 ] eax
mov [ esi + 0x2c ] eax
mov [ esi + 0x30 ] eax
cmp [ esi + 0x20 ] 0x8
jb r-xdata
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x20 ] 0x7
mov [ esi + 0x1c ] 0x0
xor edx edx
mov [ esi + 0xc ] dx
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ esi + 0xc ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10006c80
push ebp
mov ebp esp
mov eax [ ecx + 0x2c ]
push esi
lea esi [ ecx + 0x28 ]
lea ecx [ ebp + 0x8 ]
cmp ecx eax
jae r-xdata
cmp eax [ esi + 0x8 ]
jne r-xdata
mov ecx [ esi ]
lea edx [ ebp + 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax esi
call sub_10007060
push edi
mov edi edx
sub edi ecx
sar edi 0x2
cmp eax [ esi + 0x8 ]
jne r-xdata
add [ esi + 0x4 ] 0x4
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax esi
call sub_10007060
add [ esi + 0x4 ] 0x4
pop edi
pop esi
pop ebp
retn 0x4
mov ecx [ esi ]
mov edx [ ecx + edi * 4 ]
mov [ eax ] edx
sub_10006cf0
push ebp
mov ebp esp
sub esp 0x1c
push esi
mov esi ecx
call sub_10006de0
test eax eax
jne r-xdata
call sub_10006e70
test eax eax
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
push ebx
push edi
mov edi [ esi + 0x28 ]
mov ebx [ esi + 0x2c ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x18 ]
cmp eax 0x2
je r-xdata
push 0x1
call [ Sleep@IAT ]
call [ GetTickCount@IAT ]
mov edi eax
cmp edi [ esi + 0x38 ]
jae r-xdata
lea esp [ esp ]
pop edi
pop ebx
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn
cmp eax 0x12
je r-xdata
mov ecx edi
sub ecx [ esi + 0x38 ]
cmp ecx 0x2328
jbe r-xdata
mov [ esi + 0x38 ] edi
mov ecx [ edi ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
add edi 0x4
cmp edi ebx
jne r-xdata
lea edx [ ebp - 0x1c ]
push edx
call [ TranslateMessage@IAT ]
lea eax [ ebp - 0x1c ]
push eax
call [ DispatchMessageW@IAT ]
jmp r-xdata
mov eax [ esi + 0x8 ]
push 0x1
push 0x0
push 0x0
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call [ PeekMessageW@IAT ]
test eax eax
je r-xdata
mov edx [ esi + 0x8 ]
push 0x0
push 0x0
push 0x0
push edx
call [ PostMessageW@IAT ]
mov [ esi + 0x38 ] edi
jmp r-xdata
sub_10006de0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x28
xor eax eax
cmp [ ecx + 0x20 ] 0x8
mov [ esp + 0x4 ] eax
mov [ esp + 0x10 ] eax
mov [ esp ] eax
mov [ esp + 0x8 ] eax
mov [ esp + 0xc ] eax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] eax
mov eax [ ecx + 0x4 ]
mov [ esp + 0x10 ] eax
lea eax [ ecx + 0xc ]
mov [ esp + 0x4 ] sub_10006ee0
jb r-xdata
mov [ esp + 0x24 ] eax
mov ecx [ eax ]
mov [ esp + 0x24 ] ecx
jmp r-xdata
mov eax 0x1
mov esp ebp
pop ebp
retn
call [ GetLastError@IAT ]
xor eax eax
mov esp ebp
pop ebp
retn
lea edx [ esp ]
push edx
mov [ esp + 0x10 ] 0x1e
call [ RegisterClassW@IAT ]
test ax ax
jne r-xdata
sub_10006e70
cmp [ esi + 0x20 ] 0x8
lea eax [ esi + 0xc ]
jb r-xdata
mov ecx [ esi + 0x4 ]
push 0x0
push ecx
push 0x0
push 0x0
push 0x80000000
push 0x80000000
push 0x80000000
push 0x80000000
push 0x0
push r--data
push eax
push 0x0
call [ CreateWindowExW@IAT ]
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
mov eax [ eax ]
push esi
push 0x0
push eax
call [ SetWindowLongW@IAT ]
mov edx [ esi + 0x8 ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0xffffffff
push edx
call [ SetWindowPos@IAT ]
mov eax 0x1
retn
retn
sub_10006ee0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push 0x0
push esi
call [ GetWindowLongW@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push edx
call sub_10006f30
pop esi
pop ebp
retn 0x10
mov eax [ ebp + 0x14 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
push eax
push ecx
push edx
push esi
call [ DefWindowProcW@IAT ]
pop esi
pop ebp
retn 0x10
sub_10006f30
push ebp
mov ebp esp
cmp ecx 0x11
jne r-xdata
cmp ecx 0x16
jne r-xdata
lea eax [ ecx - 0x10 ]
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
mov eax [ eax + 0x8 ]
push edx
mov edx [ ebp + 0x8 ]
push edx
push ecx
push eax
call [ DefWindowProcW@IAT ]
pop ebp
retn 0x8
push esi
mov esi [ eax + 0x28 ]
push edi
mov edi [ eax + 0x2c ]
cmp esi edi
je r-xdata
pop edi
xor eax eax
pop esi
pop ebp
retn 0x8
mov ecx [ esi ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
add esi 0x4
cmp esi edi
jne r-xdata
sub_10006f80
push ebp
mov ebp esp
push 0xffffffff
push sub_10015945
mov eax [ fs : 0x0 ]
push eax
sub esp 0xf14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x2
mov ebx ecx
call sub_1000a6b0
push ebx
push eax
lea eax [ ebp - 0xf1c ]
push eax
call [ wsprintfW@IAT ]
push 0x3c
call sub_1000ba97
mov esi eax
add esp 0x10
mov [ ebp - 0xf20 ] esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp esi edi
je r-xdata
xor eax eax
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] edi
mov [ ecx ] dx
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
mov [ esi + 0x30 ] edi
mov [ ebp - 0x4 ] 0x3
lea eax [ ebp - 0xf1c ]
mov [ esi + 0x4 ] ebx
lea ebx [ eax + 0x2 ]
mov dx [ eax ]
add eax 0x2
cmp dx di
jne r-xdata
sub eax ebx
sar eax 0x1
push eax
lea eax [ ebp - 0xf1c ]
call sub_10003880
mov [ esi + 0x8 ] edi
mov [ esi + 0x38 ] edi
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
sub_10007060
push esi
mov esi eax
mov edx [ esi ]
mov eax [ esi + 0x4 ]
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
push r--data
call sub_10013ad6
pop esi
retn
push edi
mov edx ecx
shr edx 0x1
mov edi 0x3fffffff
sub edi edx
cmp edi ecx
pop edi
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_100070b0
mov ecx eax
cmp ecx eax
jae r-xdata
sub_100070b0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x3fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x2
cmp eax ecx
jae r-xdata
push r--data
call sub_10013ad6
pop ebp
retn 0x4
push ebx
push edi
call sub_10007130
mov ecx [ esi + 0x4 ]
mov ebx eax
mov eax [ esi ]
sub ecx eax
sar ecx 0x2
add ecx ecx
add ecx ecx
push ecx
push eax
push ebx
call sub_1000bef0
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0xc
sar edi 0x2
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
lea ecx [ ebx + edi * 4 ]
lea eax [ ebx + edx * 4 ]
pop edi
mov [ esi ] ebx
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] ecx
pop ebx
push eax
call sub_1000ba8c
add esp 0x4
sub_10007130
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x3fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000cd6c
lea eax [ ecx * 4 ]
push eax
call sub_1000ba97
add esp 0x4
test eax eax
jne r-xdata
sub_100071a0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100071d0
push ebp
mov ebp esp
push 0xffffffff
push sub_100158e2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x67c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x684 ] 0x0
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x688 ] esi
mov [ esi ] ax
push 0x337
push eax
lea ecx [ ebp - 0x680 ]
mov [ ebp - 0x4 ] eax
push ecx
mov [ ebp - 0x684 ] 0x1
call sub_10010f50
add esp 0xc
lea edx [ ebp - 0x680 ]
push edx
push 0x0
push 0x0
push 0x1c
push 0x0
call [ SHGetFolderPathW@IAT ]
test eax eax
js r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
lea eax [ ebp - 0x680 ]
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0x680 ]
mov ecx esi
call sub_10003880
sub_100072a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015ab3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x3
call sub_1000a6b0
lea esi [ ebp - 0x2c ]
mov edi eax
call sub_100071d0
mov eax edi
mov [ ebp - 0x4 ] 0x0
lea edx [ eax + 0x2 ]
lea ebx [ ebx ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10008020
mov eax [ rw-data ]
mov ecx eax
lea esi [ ecx + 0x2 ]
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10008020
push 0x78
call sub_1000ba97
add esp 0x4
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x4 ] 0x1
mov edi 0x8
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
push ebx
push ecx
push eax
call sub_100074f0
mov esi eax
jmp r-xdata
lea ecx [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jb r-xdata
sub_10007390
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push esi
push edi
mov esi ecx
mov ecx [ ebp + 0x10 ]
mov edi [ esi ]
mov edx [ edi + 0x10 ]
push eax
push ecx
mov ecx esi
call edx
mov edx [ edi + 0x3c ]
push eax
mov eax [ ebp + 0x8 ]
push eax
mov ecx esi
call edx
pop edi
pop esi
pop ebp
retn 0x10
sub_100073c0
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_10007df0
cmp [ ebp - 0xc ] 0x8
mov eax [ ebp - 0x20 ]
jae r-xdata
push esi
push eax
call [ DeleteFileW@IAT ]
lea esi [ eax - 0x1 ]
neg esi
sbb esi esi
cmp [ ebp - 0xc ] 0x8
jb r-xdata
lea eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x4 ]
lea eax [ esi + 0x1 ]
xor ecx ebp
pop esi
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0x20 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10007420
push ebp
mov ebp esp
sub esp 0x674
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx ecx
call sub_100076a0
push 0x66e
lea eax [ ebp - 0x674 ]
push 0x0
push eax
call sub_10010f50
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
add esp 0xc
lea ecx [ ebp - 0x674 ]
push ecx
push 0x0
push r--data
mov ecx ebx
call eax
push eax
call [ GetTempFileNameW@IAT ]
pop ebx
test eax eax
jne r-xdata
lea eax [ ebp - 0x674 ]
lea edx [ eax + 0x2 ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
push esi
neg ecx
or ecx eax
push ecx
call sub_1000c482
lea ecx [ ebp - 0x674 ]
mov esi eax
mov edx ecx
add esp 0x4
sub esi edx
movzx edx [ ecx ]
mov [ esi + ecx ] dx
add ecx 0x2
test dx dx
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ba7d
mov esp ebp
pop ebp
retn
sub_100074f0
push ebp
mov ebp esp
push 0xffffffff
push sub_100158a4
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea ecx [ esi + 0x4 ]
mov [ esi ] r--data
mov eax 0x7
xor edx edx
mov [ ecx + 0x14 ] eax
mov [ ecx + 0x10 ] ebx
mov [ ecx ] dx
mov [ esi + 0x34 ] eax
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] dx
mov [ esi + 0x50 ] eax
mov [ esi + 0x4c ] ebx
mov [ esi + 0x3c ] dx
mov [ esi + 0x6c ] eax
xor eax eax
mov [ esi + 0x68 ] ebx
mov [ esi + 0x58 ] ax
mov edx [ ebp + 0xc ]
lea eax [ edx + 0x2 ]
mov [ ebp - 0x4 ] 0x4
mov [ ebp - 0x14 ] eax
mov edi edi
mov ax [ edx ]
add edx 0x2
cmp ax bx
jne r-xdata
sub edx [ ebp - 0x14 ]
mov eax [ ebp + 0xc ]
sar edx 0x1
push edx
call sub_10003880
mov eax [ ebp - 0x10 ]
lea edx [ eax + 0x2 ]
nop
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax [ ebp - 0x10 ]
lea ecx [ esi + 0x20 ]
call sub_10003880
mov ecx [ ebp + 0x10 ]
mov [ esi + 0x74 ] ecx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_100075d0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10007f80
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10007600
push ebp
mov ebp esp
push ecx
push esi
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push edi
push 0x0
push esi
call [ GetFileSize@IAT ]
mov edi eax
push edi
call sub_1000c482
add esp 0x4
mov [ ebx ] eax
test eax eax
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call [ CloseHandle@IAT ]
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push edi
push eax
push esi
mov [ ebp - 0x4 ] 0x0
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebx ]
push eax
call sub_1000c2e6
add esp 0x4
cmp edi [ ebp - 0x4 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
push esi
mov [ edx ] edi
call [ CloseHandle@IAT ]
pop edi
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_100076a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015088
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor esi esi
xor eax eax
push esi
lea ecx [ ebx + 0x4 ]
mov [ ebp - 0x2c ] ax
push ecx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] esi
call sub_100035c0
lea eax [ esi + 0x3 ]
mov [ ebp - 0x4 ] esi
call sub_1000a6b0
mov edx [ ebp - 0x1c ]
lea edi [ esi + 0x8 ]
cmp edx esi
jbe r-xdata
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov ecx [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov edx [ ebx ]
push eax
mov eax [ edx + 0x38 ]
mov ecx ebx
call eax
cmp [ ebp - 0x18 ] edi
jb r-xdata
lea eax [ ebp - 0x2c ]
mov dx [ ecx + edx * 2 - 0x2 ]
cmp dx [ eax ]
je r-xdata
lea ecx [ ebp - 0x2c ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
mov ecx eax
lea esi [ ecx + 0x2 ]
jmp r-xdata
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10008020
sub_10007780
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_10007df0
cmp [ ebp - 0xc ] 0x8
mov eax [ ebp - 0x20 ]
jae r-xdata
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
cmp eax 0xffffffff
je r-xdata
lea eax [ ebp - 0x20 ]
cmp [ ebp - 0xc ] 0x8
jb r-xdata
push eax
call [ CloseHandle@IAT ]
cmp [ ebp - 0xc ] 0x8
jb r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp - 0x20 ]
push edx
call sub_1000ba8c
add esp 0x4
mov eax 0x1
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0x20 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10007840
push ebp
mov ebp esp
push 0xffffffff
push sub_10015088
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov ebx ecx
call sub_100076a0
push esi
lea eax [ ebp - 0x2c ]
push eax
mov ecx ebx
call sub_10007df0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x8
mov eax [ ebp - 0x2c ]
jae r-xdata
mov ecx [ ebp + 0x18 ]
mov edx [ ebp + 0x14 ]
push ecx
mov ecx [ ebp + 0x10 ]
push edx
mov edx [ ebp + 0xc ]
push ecx
push edx
call sub_100079b0
cmp [ ebp - 0x18 ] 0x8
mov esi eax
jb r-xdata
lea eax [ ebp - 0x2c ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x14
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_100078e0
push ebp
mov ebp esp
sub esp 0x674
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
cmp [ esi + 0x68 ] 0x0
jne r-xdata
cmp [ esi + 0x6c ] 0x8
lea eax [ esi + 0x58 ]
pop esi
jb r-xdata
push 0x66e
lea eax [ ebp - 0x674 ]
push 0x0
push eax
call sub_10010f50
mov edx [ esi + 0x74 ]
add esp 0xc
push 0x337
lea ecx [ ebp - 0x674 ]
push ecx
push edx
call [ GetModuleFileNameW@IAT ]
lea eax [ ebp - 0x674 ]
lea edx [ eax + 0x2 ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ eax ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea ecx [ esi + 0x58 ]
lea eax [ ebp - 0x674 ]
call sub_10003880
sub_100079b0
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi eax
lea eax [ ebp - 0xc ]
push eax
lea ebx [ ebp - 0x4 ]
mov eax esi
mov [ ebp - 0x4 ] 0x0
call sub_10007600
mov ebx [ CreateFileW@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x4
push 0x0
push 0x0
push 0x40000000
push esi
call ebx
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
push ecx
call sub_1000c2e6
add esp 0x4
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
push 0x0
lea edx [ ebp - 0x8 ]
push edx
push ebx
push eax
push esi
mov [ ebp - 0x8 ] 0x0
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x10
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x10
push 0x0
push 0x0
push 0x5
push 0x0
push 0x0
push 0x40000000
push esi
call ebx
cmp eax 0xffffffff
je r-xdata
push esi
call [ CloseHandle@IAT ]
cmp [ ebp - 0x8 ] ebx
jne r-xdata
call [ GetLastError@IAT ]
push eax
call [ CloseHandle@IAT ]
jmp r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
pop esi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn 0x10
push esi
call [ CloseHandle@IAT ]
sub_10007a90
push ebp
mov ebp esp
sub esp 0x674
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
lea edx [ ebp - 0x674 ]
sub edx eax
mov edi edi
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
jne r-xdata
lea eax [ ebp - 0x674 ]
push 0x5c
push eax
call sub_1000c71c
add esp 0x8
test eax eax
je r-xdata
lea eax [ ebp - 0x674 ]
lea edx [ eax + 0x2 ]
xor ecx ecx
mov [ eax ] cx
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push edi
lea edi [ ebp + eax * 2 - 0x674 ]
lea eax [ ebp - 0x674 ]
mov edx eax
cmp edx edi
jae r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
push ebx
mov ebx [ CreateDirectoryW@IAT ]
push esi
lea ecx [ ecx ]
lea eax [ ebp - 0x674 ]
push eax
call ebx
pop esi
pop ebx
lea ecx [ ebp - 0x674 ]
xor eax eax
push ecx
mov [ esi ] ax
call ebx
lea eax [ esi + 0x2 ]
mov edx 0x5c
mov [ esi ] dx
cmp eax edi
jb r-xdata
push r--data
push eax
call sub_1000c74a
add esp 0x8
mov esi eax
push 0x0
test esi esi
je r-xdata
pop esi
pop ebx
pop edi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
sub_10007b80
push ebp
mov ebp esp
push 0xffffffff
push sub_100154a8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx + 0x4c ]
test eax eax
jne r-xdata
cmp [ ebx + 0x50 ] 0x8
lea eax [ ebx + 0x3c ]
jb r-xdata
mov eax [ ebx ]
mov edx [ eax + 0x8 ]
call edx
push eax
lea eax [ ebp - 0x2c ]
push eax
mov ecx ebx
call sub_10007df0
lea esi [ ebx + 0x3c ]
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10003550
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ eax ]
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10007c20
push ebp
mov ebp esp
push 0xffffffff
push sub_10015478
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
call sub_10007df0
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000c482
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
mov esi eax
mov eax [ ebp - 0x2c ]
jae r-xdata
mov edx esi
sub edx eax
lea esp [ esp ]
lea eax [ ebp - 0x2c ]
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
jne r-xdata
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10007cd0
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
mov edx [ eax + 0x38 ]
push ebx
push edi
mov edi [ ebp + 0xc ]
push edi
call edx
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
lea ebx [ ebp - 0x4 ]
call sub_10007600
test eax eax
jne r-xdata
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp - 0x4 ]
push ecx
push edx
push eax
push esi
mov eax edi
call sub_100079b0
push esi
mov edi eax
call sub_1000c2e6
add esp 0x4
pop esi
mov eax edi
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x10
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x10
sub_10007d40
push ebp
mov ebp esp
push 0xffffffff
push sub_10015478
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea esi [ ebp - 0x2c ]
call sub_100071d0
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000c482
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
mov esi eax
mov eax [ ebp - 0x2c ]
jae r-xdata
mov edx esi
sub edx eax
jmp r-xdata
lea eax [ ebp - 0x2c ]
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
jne r-xdata
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10007df0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015449
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x10 ] ebx
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] cx
mov ecx eax
lea edi [ ecx + 0x2 ]
lea esp [ esp ]
mov dx [ ecx ]
add ecx 0x2
cmp dx bx
jne r-xdata
sub ecx edi
sar ecx 0x1
push ecx
mov ecx esi
call sub_10003880
mov [ ebp - 0x4 ] ebx
mov eax 0x3
mov [ ebp - 0x10 ] 0x1
call sub_1000a6b0
mov ecx [ esi + 0x10 ]
cmp ecx ebx
jbe r-xdata
mov edx [ ebp + 0xc ]
mov eax edx
lea edi [ eax + 0x2 ]
nop
cmp [ esi + 0x14 ] 0x8
jb r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edi
sar eax 0x1
push eax
mov eax edx
mov ecx esi
call sub_10008020
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx esi
mov edx [ esi ]
jmp r-xdata
mov ecx eax
lea edi [ ecx + 0x2 ]
jmp r-xdata
cmp [ edx + ecx * 2 - 0x2 ] 0x5c
je r-xdata
mov dx [ ecx ]
add ecx 0x2
cmp dx bx
jne r-xdata
sub ecx edi
sar ecx 0x1
push ecx
mov ecx esi
call sub_10008020
sub_10007ee0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015088
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
call sub_10007df0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x8
mov eax [ ebp - 0x2c ]
jae r-xdata
push esi
call sub_10007600
cmp [ ebp - 0x18 ] 0x8
mov esi eax
jb r-xdata
lea eax [ ebp - 0x2c ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10007f80
push ebx
push esi
mov esi ecx
mov [ esi ] r--data
cmp [ esi + 0x6c ] 0x8
push edi
jb r-xdata
xor edi edi
mov ebx 0x7
xor ecx ecx
mov [ esi + 0x6c ] ebx
mov [ esi + 0x68 ] edi
mov [ esi + 0x58 ] cx
cmp [ esi + 0x50 ] 0x8
jb r-xdata
mov eax [ esi + 0x58 ]
push eax
call sub_1000ba8c
add esp 0x4
xor eax eax
mov [ esi + 0x50 ] ebx
mov [ esi + 0x4c ] edi
mov [ esi + 0x3c ] ax
cmp [ esi + 0x34 ] 0x8
jb r-xdata
mov edx [ esi + 0x3c ]
push edx
call sub_1000ba8c
add esp 0x4
xor edx edx
mov [ esi + 0x34 ] ebx
mov [ esi + 0x30 ] edi
mov [ esi + 0x20 ] dx
cmp [ esi + 0x18 ] 0x8
jb r-xdata
mov ecx [ esi + 0x20 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x18 ] ebx
mov [ esi + 0x14 ] edi
xor ecx ecx
mov [ esi + 0x4 ] cx
pop edi
mov [ esi ] r--data
pop esi
pop ebx
retn
mov eax [ esi + 0x4 ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10008020
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ edi + 0x10 ]
mov ecx [ ebp + 0x8 ]
or edx 0xffffffff
sub edx eax
cmp edx ecx
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
test ecx ecx
je r-xdata
push r--data
call sub_10013ad6
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
push esi
lea esi [ eax + ecx ]
mov eax edi
call sub_10003a10
test al al
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp ebx eax
jb r-xdata
pop esi
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax ebx
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
lea edx [ ecx + ecx ]
mov ecx [ edi + 0x10 ]
push edx
lea edx [ eax + ecx * 2 ]
push ebx
push edx
call sub_100118d0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_10008100
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_10008100
pop edi
pop ebx
pop ebp
retn 0x4
sub_10008100
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_10013b23
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_10013ad6
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_10003a10
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
lea edx [ ebx + ebx ]
push edx
mov edx [ ebp + 0xc ]
lea ecx [ ecx + edx * 2 ]
mov edx [ edi + 0x10 ]
push ecx
lea eax [ eax + edx * 2 ]
push eax
call sub_100118d0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_100081b0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100081f0
push ebp
mov ebp esp
sub esp 0x33c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov eax 0x23
mov esi ecx
call sub_1000a630
mov edi eax
mov eax 0x24
call sub_1000a630
mov ebx eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
push eax
push edi
lea eax [ ebp - 0x33c ]
push ebx
push eax
call sub_1000c54d
lea eax [ ebp - 0x33c ]
add esp 0x10
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_1000ba97
lea ecx [ ebp - 0x33c ]
mov esi eax
mov edx ecx
add esp 0x4
sub esi edx
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
mov esp ebp
pop ebp
retn
sub_10008290
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
mov [ esi ] r--data
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x10 ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_100082d0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10014d98
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x20 ]
mov [ fs : 0x0 ] eax
mov eax 0x22
call sub_1000a630
mov esi eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x10 ] esi
mov [ esp + 0x14 ] r--data
test eax eax
jne r-xdata
mov ecx esi
mov [ esp + 0x28 ] 0x0
lea edi [ ecx + 0x1 ]
mov edi edi
call [ GetTickCount@IAT ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov ebx ecx
mov ecx esi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
imul eax eax 0x660d
sub ecx esi
lea esi [ eax - 0xca1 ]
and esi 0xffff
xor edx edx
shr ecx 0x3
mov eax esi
div ecx
mov eax 0xcccccccd
mov [ esp + 0x18 ] esi
mov edi edx
mul ebx
shr edx 0x2
add edi edx
lea ebx [ edi + 0x1 ]
push ebx
call sub_1000ba97
push ebx
push 0x0
push eax
mov [ esp + 0x24 ] eax
call sub_10010f50
add esp 0x10
xor ecx ecx
test edi edi
jle r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esp + 0x10 ]
lea ebx [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
imul esi esi 0x660d
sub eax ebx
sub esi 0xca1
mov ebx eax
and esi 0xffff
xor edx edx
mov eax esi
div ebx
mov eax [ esp + 0x10 ]
inc ecx
mov dl [ edx + eax ]
mov eax [ esp + 0x14 ]
mov [ ecx + eax - 0x1 ] dl
cmp ecx edi
jl r-xdata
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10008410
push ebp
mov ebp esp
sub esp 0xaa0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ba7d
mov esp ebp
pop ebp
retn
push 0x54b
lea eax [ ebp - 0xa9c ]
push eax
call [ GetSystemDirectoryW@IAT ]
cmp eax 0x3
jb r-xdata
mov eax [ esi + 0x4 ]
xor ecx ecx
push ecx
push ecx
push ecx
push ecx
lea edx [ ebp - 0xaa0 ]
push edx
push ecx
push ecx
lea eax [ ebp - 0xa9c ]
push eax
mov [ ebp - 0xa96 ] cx
mov [ ebp - 0xaa0 ] ecx
call [ GetVolumeInformationW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xaa0 ]
mov [ esi + 0x4 ] ecx
sub_100084b0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10008510
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10008570
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x54
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100035c0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_100085a0
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x70
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100035c0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_100085d0
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
push 0x1
call edx
mov esi eax
mov eax 0x25
call sub_1000a630
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
push ecx
push edx
push 0x0
push 0x0
push eax
push esi
push edi
xor edx edx
xor ecx ecx
call sub_10008650
push esi
mov edi eax
call sub_1000c2e6
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebp
retn 0xc
sub_10008620
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10008650
push ebp
mov ebp esp
push 0xffffffff
push sub_1001583c
mov eax [ fs : 0x0 ]
push eax
mov eax 0x1280
call sub_100134d0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
mov [ ebp - 0x1238 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x122c ] eax
mov eax [ ebp + 0x14 ]
push 0x3c
mov [ ebp - 0x123c ] ecx
mov [ ebp - 0x1248 ] edx
mov edx [ ebp + 0x1c ]
mov [ ebp - 0x1250 ] eax
mov eax [ ebp + 0x20 ]
lea ecx [ ebp - 0x128c ]
push 0x0
push ecx
mov [ ebp - 0x124c ] edx
mov [ ebp - 0x1240 ] eax
call sub_10010f50
push 0x65c
mov [ ebp - 0x128c ] 0x3c
mov [ ebp - 0x1278 ] 0x65c
call sub_1000c482
mov edx [ ebp - 0x1278 ]
push edx
push 0x0
push eax
mov [ ebp - 0x127c ] eax
call sub_10010f50
push 0xb86
mov [ ebp - 0x125c ] 0xb86
call sub_1000c482
mov ecx [ ebp - 0x125c ]
push ecx
push 0x0
push eax
mov [ ebp - 0x1260 ] eax
call sub_10010f50
mov eax esi
add esp 0x2c
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0x20 ]
lea ecx [ ebp - 0x128c ]
push ecx
push __dos_header
sub eax edi
push eax
push esi
call edx
test eax eax
jne r-xdata
mov eax [ ebp - 0x1274 ]
mov ecx [ ebp - 0x127c ]
mov edx [ ebx + 0x4 ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push eax
mov eax [ ebx + 0x8 ]
push ecx
mov ecx [ edx + 0x1c ]
push eax
call ecx
mov [ ebp - 0x1230 ] eax
test eax eax
jne r-xdata
mov eax [ ebp - 0x127c ]
push eax
call sub_1000c2e6
mov ecx [ ebp - 0x1260 ]
push ecx
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x1204 ]
call sub_10008570
mov [ ebp - 0x4 ] 0x0
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x11e8 ]
call sub_100085a0
mov eax 0x28
mov [ ebp - 0x4 ] 0x1
call sub_1000a630
mov edi eax
mov [ ebp - 0x1224 ] 0x0
lea edx [ eax + 0x1 ]
mov edx [ ebp - 0x127c ]
push edx
call sub_1000c2e6
mov eax [ ebp - 0x1260 ]
push eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x1c
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push edi
call sub_1000c6b3
add esp 0xc
test eax eax
mov eax 0x800000
je r-xdata
call sub_1000c2e6
add esp 0x8
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebx + 0x4 ]
xor edx edx
cmp edx [ ebp - 0x11f4 ]
mov ecx [ ecx + 0x14 ]
sbb edx edx
and edx 0x3c0000
push 0x0
add edx 0x40000
or edx eax
mov eax [ ebp - 0x1260 ]
or edx 0x4000300
push edx
mov edx [ ebp - 0x122c ]
push 0x0
push 0x0
push 0x0
push eax
mov eax [ ebp - 0x1230 ]
push edx
push eax
call ecx
mov edx [ ebp - 0x127c ]
push edx
mov [ ebp - 0x1234 ] eax
call sub_1000c2e6
mov eax [ ebp - 0x1260 ]
push eax
call sub_1000c2e6
mov eax edi
add esp 0x8
mov [ ebp - 0x122c ] 0x1
lea ecx [ eax + 0x1 ]
lea ebx [ ebx ]
mov eax [ ebp - 0x1224 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
push esi
push edi
call sub_1000c6b3
mov edi [ ebp - 0x1234 ]
add esp 0xc
test eax eax
jne r-xdata
xor esi esi
mov ecx [ ebx + 0x4 ]
push 0x4
lea edx [ ebp - 0x1224 ]
push edx
push 0x1f
mov [ ebp - 0x1224 ] 0xf380
mov eax [ ecx + 0x28 ]
push edi
call eax
xor esi esi
cmp eax esi
jne r-xdata
mov edx [ ebp - 0x123c ]
mov eax [ ebp - 0x1250 ]
mov ecx [ ebx + 0x4 ]
mov ecx [ ecx + 0x10 ]
push edx
mov edx [ ebp - 0x1248 ]
push eax
mov eax [ ebp - 0x1238 ]
push edx
push eax
push edi
call ecx
test eax eax
je r-xdata
mov [ ebp - 0x1224 ] 0xd
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x122c ] esi
cmp [ ebp - 0x11f4 ] esi
jbe r-xdata
mov edx [ ebx + 0x4 ]
mov eax [ edx + 0x8 ]
push edi
call eax
mov ecx [ ebx + 0x4 ]
mov edx [ ebp - 0x1230 ]
mov eax [ ecx + 0x8 ]
push edx
call eax
mov ebx [ ebp - 0x122c ]
mov edi [ ebp - 0x11cc ]
test ebx ebx
je r-xdata
mov [ ebp - 0x1228 ] 0x0
lea ebx [ ebx ]
mov [ ebp - 0x11b8 ] 0xf
mov [ ebp - 0x11bc ] esi
mov [ ebp - 0x11cc ] 0x0
cmp [ ebp - 0x122c ] 0x0
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov edx [ ebx + 0x4 ]
push esi
lea eax [ ebp - 0x1244 ]
push eax
lea ecx [ ebp - 0x1228 ]
push ecx
push 0x20000013
mov [ ebp - 0x1228 ] esi
mov [ ebp - 0x1244 ] 0x4
mov edx [ edx + 0x18 ]
push edi
call edx
test eax eax
je r-xdata
cmp [ ebp - 0x11b8 ] 0x10
jb r-xdata
lea ecx [ esi + 0x1 ]
push ecx
call sub_1000c482
mov ecx [ ebp - 0x124c ]
mov edx [ ebp - 0x1240 ]
mov [ ecx ] eax
mov [ edx ] esi
mov eax [ ecx ]
add esp 0x4
cmp [ ebp - 0x11b8 ] 0x10
mov [ esi + eax ] 0x0
mov eax edi
jae r-xdata
mov [ ebp - 0x122c ] ecx
mov eax [ ebp - 0x1228 ]
cmp eax ecx
je r-xdata
cmp [ ebp - 0x1228 ] 0x197
jne r-xdata
mov esi 0x8
cmp [ ebp - 0x11d4 ] esi
jb r-xdata
push edi
call sub_1000ba8c
add esp 0x4
mov ecx [ ecx ]
push esi
push eax
push ecx
call sub_100118d0
add esp 0xc
lea eax [ ebp - 0x11cc ]
mov esi [ ebp - 0x11bc ]
mov edi eax
lea eax [ ebp - 0x11b0 ]
lea esi [ ebp - 0x1220 ]
mov [ ebp - 0x120c ] 0xf
mov [ ebp - 0x1210 ] ecx
mov [ ebp - 0x1220 ] cl
call sub_10003480
push 0x0
mov eax esi
push eax
or eax 0xffffffff
lea edi [ ebp - 0x11cc ]
mov [ ebp - 0x4 ] 0x3
call sub_10003a60
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x120c ] 0x10
jb r-xdata
mov eax [ ebp - 0x1224 ]
dec eax
mov [ ebp - 0x1224 ] eax
cmp eax esi
jle r-xdata
xor eax eax
mov [ ebp - 0x11d4 ] 0x7
mov [ ebp - 0x11d8 ] 0x0
mov [ ebp - 0x11e8 ] ax
cmp [ ebp - 0x11f0 ] esi
jb r-xdata
mov edx [ ebp - 0x11e8 ]
push edx
call sub_1000ba8c
add esp 0x4
cmp [ ebp - 0x1228 ] 0x0
mov edi [ ebp - 0x1234 ]
jbe r-xdata
mov ecx [ ebp - 0x1220 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x11f4 ]
cmp ecx esi
jbe r-xdata
mov eax ebx
mov ecx [ ebp - 0x1204 ]
push ecx
call sub_1000ba8c
add esp 0x4
jmp r-xdata
mov ecx [ ebp - 0x11d8 ]
cmp ecx esi
jbe r-xdata
cmp [ ebp - 0x11f0 ] 0x8
mov eax [ ebp - 0x1204 ]
jae r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x1228 ]
push eax
push 0x11a0
lea ecx [ ebp - 0x11b0 ]
push ecx
push edi
call edx
xor ecx ecx
cmp eax ecx
je r-xdata
cmp [ ebp - 0x11d4 ] 0x8
mov eax [ ebp - 0x11e8 ]
jae r-xdata
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x1230 ]
push 0x2b
push eax
call ecx
lea eax [ ebp - 0x1204 ]
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x1230 ]
push 0x2c
push eax
call ecx
jmp r-xdata
lea eax [ ebp - 0x11e8 ]
sub_10008be0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov edx [ eax + 0x14 ]
push edi
mov [ ebp - 0x8 ] ecx
push 0x0
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
mov esi eax
mov eax 0x26
call sub_1000a630
mov [ ebp - 0x4 ] eax
mov eax 0x27
call sub_1000a630
mov [ ebp + 0x8 ] eax
test esi esi
je r-xdata
xor eax eax
mov edx esi
lea eax [ edx + 0x1 ]
lea ebx [ ebx ]
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
mov ecx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push ecx
mov ecx [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x4 ]
push esi
push eax
push edi
push ecx
mov ecx [ ebp + 0x8 ]
sub edx ebx
call sub_10008650
push edi
mov ebx eax
call sub_1000c2e6
add esp 0x4
test esi esi
je r-xdata
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
sub edx eax
mov eax edx
jmp r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn 0xc
push esi
call sub_1000c2e6
add esp 0x4
mov edx [ ebp + 0x8 ]
lea ebx [ edx + 0x1 ]
sub_10008c90
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ecx + 0x4 ]
push ebx
mov ebx [ eax + 0xc ]
mov [ ebp - 0x8 ] ecx
test ebx ebx
jne r-xdata
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
push edi
mov ecx ebx
call eax
mov edi eax
mov [ ebp - 0x4 ] edi
test edi edi
jne r-xdata
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
push esi
push 0x1
call eax
mov esi eax
test esi esi
jne r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0xc
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov edx [ ebx ]
mov eax [ edx + 0x8 ]
push edi
mov ecx ebx
call eax
push edi
call sub_1000ba8c
add esp 0x4
pop esi
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000ba97
mov edi eax
mov eax esi
add esp 0x4
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea eax [ eax + eax + 0x2 ]
push eax
push 0x0
push edi
call sub_10010f50
mov eax esi
add esp 0xc
lea edx [ eax + 0x1 ]
mov edi edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx esi
sub eax edx
lea edx [ ecx + 0x1 ]
mov [ ebp + 0x8 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx [ ebp + 0x8 ]
inc eax
push eax
push edi
inc ecx
push ecx
push esi
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
push esi
call sub_1000ba8c
mov esi [ ebp - 0x4 ]
mov eax [ ebp - 0x8 ]
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0x4 ]
add esp 0x4
push 0x0
push 0x0
push esi
push edi
push 0x0
call edx
test eax eax
mov eax [ ebx ]
jns r-xdata
mov eax [ ebx ]
mov esi [ ebp - 0x4 ]
mov edx [ eax + 0x8 ]
push esi
mov ecx ebx
call edx
push esi
call sub_1000ba8c
add esp 0x4
pop esi
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
mov eax [ eax + 0xc ]
push ecx
push edx
push esi
mov ecx ebx
call eax
mov edx [ ebx ]
mov [ ebp + 0x8 ] eax
mov eax [ edx + 0x8 ]
push esi
mov ecx ebx
call eax
push edi
call sub_1000ba8c
push esi
call sub_1000ba8c
mov eax [ ebp + 0x8 ]
add esp 0x8
pop esi
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ eax + 0x8 ]
push esi
mov ecx ebx
call edx
push edi
call sub_1000ba8c
push esi
call sub_1000ba8c
add esp 0x8
pop esi
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_10008e40
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10008e80
push ebp
mov ebp esp
sub esp 0xb90
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x34 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
cmp [ esi + 0x34 ] 0x0
jne r-xdata
lea ecx [ ebp - 0xb90 ]
push ecx
lea edx [ ebp - 0xb8c ]
push edx
push 0x0
mov [ ebp - 0xb90 ] 0xb86
call eax
test eax eax
jne r-xdata
mov eax [ esi + 0x34 ]
cmp [ esi + 0x48 ] 0x0
jne r-xdata
cmp [ esi + 0x48 ] eax
jne r-xdata
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push 0x0
push 0x0
push 0x0
push 0x4
push r--data
call ecx
mov [ esi + 0x34 ] eax
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push eax
push eax
push eax
push 0x4
lea eax [ ebp - 0xb8c ]
push eax
call ecx
jmp r-xdata
mov edx [ esi + 0x24 ]
push 0x0
push 0x0
push eax
push 0x3
push r--data
call edx
mov [ esi + 0x34 ] eax
mov eax [ eax ]
push 0x0
push 0x0
push eax
mov eax [ esi + 0x24 ]
push 0x3
lea edx [ ebp - 0xb8c ]
push edx
call eax
mov eax [ eax ]
mov [ esi + 0x34 ] eax
sub_10008f60
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
mov eax 0x29
call sub_1000a630
mov edi eax
mov eax 0x2a
call sub_1000a630
mov [ ebp - 0x4 ] eax
mov eax 0x2b
call sub_1000a630
push edi
mov ebx eax
call [ LoadLibraryA@IAT ]
mov edi [ GetProcAddress@IAT ]
mov [ esi + 0x2c ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
push eax
call [ LoadLibraryA@IAT ]
mov [ esi + 0x30 ] eax
test eax eax
jne r-xdata
push ebx
push eax
call edi
mov [ esi + 0x4 ] eax
mov eax 0x2c
call sub_1000a630
mov ebx eax
mov eax 0x2d
call sub_1000a630
mov [ ebp - 0x4 ] eax
mov eax 0x2e
call sub_1000a630
mov [ ebp - 0x8 ] eax
mov eax 0x2f
call sub_1000a630
mov [ ebp - 0xc ] eax
mov eax 0x30
call sub_1000a630
mov [ ebp - 0x10 ] eax
mov eax 0x31
call sub_1000a630
mov [ ebp - 0x14 ] eax
mov eax 0x32
call sub_1000a630
mov [ ebp - 0x18 ] eax
mov eax 0x33
call sub_1000a630
mov [ ebp - 0x1c ] eax
mov eax 0x34
call sub_1000a630
mov ecx [ esi + 0x30 ]
push ebx
push ecx
mov [ ebp - 0x20 ] eax
call edi
mov edx [ ebp - 0x4 ]
mov [ esi + 0x8 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x8 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0xc ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0xc ]
push eax
push ecx
call edi
mov edx [ ebp - 0x10 ]
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x14 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x18 ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x1c ] eax
mov eax [ ebp - 0x18 ]
push eax
push ecx
call edi
mov edx [ ebp - 0x1c ]
mov [ esi + 0x20 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x20 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x24 ] eax
call edi
cmp [ esi + 0x8 ] 0x0
mov [ esi + 0x28 ] eax
je r-xdata
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x0
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
cmp [ esi + 0x18 ] 0x0
je r-xdata
cmp [ esi + 0x1c ] 0x0
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
cmp [ esi + 0x24 ] 0x0
je r-xdata
xor ecx ecx
test eax eax
setne cl
pop edi
pop ebx
mov eax ecx
mov esp ebp
pop ebp
retn
sub_10009110
push ebp
mov ebp esp
push 0xffffffff
push sub_10014ef9
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi + 0x34 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x2c ]
mov edi [ FreeLibrary@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x8 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x30 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esi + 0x2c ] ebx
mov [ esi + 0x34 ] ebx
push ecx
call eax
cmp [ esi + 0x84 ] 0x8
jb r-xdata
push eax
call edi
mov [ esi + 0x30 ] ebx
mov edi 0x7
xor ecx ecx
mov [ esi + 0x84 ] edi
mov [ esi + 0x80 ] ebx
mov [ esi + 0x70 ] cx
cmp [ esi + 0x68 ] 0x8
jb r-xdata
mov eax [ esi + 0x70 ]
push eax
call sub_1000ba8c
add esp 0x4
xor eax eax
mov [ esi + 0x68 ] edi
mov [ esi + 0x64 ] ebx
mov [ esi + 0x54 ] ax
cmp [ esi + 0x4c ] 0x10
jb r-xdata
mov edx [ esi + 0x54 ]
push edx
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x4c ] 0xf
mov [ esi + 0x48 ] ebx
mov [ esi + 0x38 ] bl
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ esi + 0x38 ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10009200
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009110
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10009230
push ebp
mov ebp esp
push 0xffffffff
push sub_100157f4
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x8c
call sub_1000ba97
add esp 0x4
xor ebx ebx
cmp eax ebx
je r-xdata
xor esi esi
mov [ eax ] r--data
mov [ eax + 0x4c ] 0xf
mov [ eax + 0x48 ] ebx
mov [ eax + 0x38 ] bl
mov ecx 0x7
xor edx edx
mov [ eax + 0x68 ] ecx
mov [ eax + 0x64 ] ebx
mov [ eax + 0x54 ] dx
mov [ eax + 0x84 ] ecx
xor ecx ecx
mov [ eax + 0x80 ] ebx
mov [ eax + 0x70 ] cx
mov [ eax + 0x34 ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x20 ] ebx
mov [ eax + 0x24 ] ebx
mov [ eax + 0x28 ] ebx
mov esi eax
jmp r-xdata
cmp esi ebx
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0xffffffff
call sub_10008f60
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
sub_10009310
push esi
push edi
push 0xc
mov esi ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor edi edi
mov [ eax ] r--data
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] 0x0
mov edi eax
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
call [ GetLastError@IAT ]
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
pop edi
xor eax eax
pop esi
retn
mov esi [ edi + 0x4 ]
call sub_10008e80
mov [ edi + 0x8 ] eax
test eax eax
jne r-xdata
sub_10009380
push esi
push 0x8
mov esi ecx
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
retn
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
pop esi
retn
sub_100093a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014e18
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
push eax
call [ FreeLibrary@IAT ]
mov [ esi + 0x8 ] 0x0
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0xc ] 0x0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10009430
push ebp
mov ebp esp
push esi
push 0x10
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov [ eax + 0x8 ] 0x0
mov [ eax + 0xc ] ecx
mov esi eax
jmp r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
xor eax eax
pop esi
pop ebp
retn
mov eax 0x35
call sub_1000a630
mov edx [ esi + 0x8 ]
push eax
push edx
call [ GetProcAddress@IAT ]
mov [ esi + 0x4 ] eax
test eax eax
jne r-xdata
mov eax 0x29
call sub_1000a630
push eax
call [ LoadLibraryA@IAT ]
mov [ esi + 0x8 ] eax
test eax eax
je r-xdata
mov eax esi
pop esi
pop ebp
retn
sub_100094b0
push 0x30
call sub_1000ba97
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ecx
mov [ eax + 0x4 ] cl
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x28 ] ecx
retn
sub_100094e0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10009510
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x20 ]
cmp ecx eax
je r-xdata
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
push ebx
push edi
push edx
push eax
call sub_10009dd0
mov edi [ esi + 0x24 ]
mov ebx eax
mov eax [ ebp - 0x4 ]
push eax
mov eax ebx
call sub_10009ed0
add esp 0xc
pop edi
mov [ esi + 0x24 ] ebx
pop ebx
sub_10009550
push ebp
mov ebp esp
push 0xffffffff
push sub_10015058
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor edi edi
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x4 ] edi
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
mov [ ebp - 0x34 ] edi
je r-xdata
mov ecx [ ebp - 0x1c ]
inc ecx
push ecx
call sub_1000c482
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov [ ebp - 0x30 ] edi
jmp r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x34 ] edi
jbe r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov eax 0x44
call sub_1000a630
mov edi eax
mov eax [ esi + 0x20 ]
add eax [ ebp - 0x30 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax 0x43
call sub_1000a630
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ecx [ ecx ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x2c ]
push edx
call sub_1000ba8c
add esp 0x4
mov ecx eax
lea ebx [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003670
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx ebx
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003670
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10003670
mov ecx [ esi + 0x20 ]
mov edx [ ebp - 0x30 ]
cmp [ ecx + edx + 0x30 ] 0x10
lea eax [ ecx + edx + 0x1c ]
jb r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003670
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov edi [ ebp - 0x34 ]
add [ ebp - 0x30 ] 0x38
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
inc edi
add eax edx
mov [ ebp - 0x34 ] edi
cmp edi eax
jb r-xdata
xor edi edi
sub_100096e0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov edx eax
push edi
lea esi [ edx + 0x1 ]
mov edi edi
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
lea esi [ ecx + 0x4 ]
mov edi edx
call sub_10003480
pop edi
pop esi
mov eax 0x1
pop ebx
pop ebp
retn 0x4
sub_10009710
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ esi + 0x20 ]
xor ebx ebx
cmp eax ebx
je r-xdata
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp + 0x8 ]
push edi
mov edi [ esi + 0x24 ]
push ecx
call sub_10009ed0
mov edx [ esi + 0x20 ]
push edx
call sub_1000ba8c
add esp 0x8
pop edi
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x4 ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_10009790
push ebp
mov ebp esp
push 0xffffffff
push sub_10015218
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
push 0x0
lea eax [ esi + 0x4 ]
push eax
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
call sub_10003a60
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov edx [ ebp - 0x1c ]
inc edx
push edx
call sub_1000c482
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov ecx edx
shr ecx 0x1f
add ecx edx
je r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
mov eax 0x42
call sub_1000a630
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003670
mov edx [ esi ]
mov eax [ edx + 0x18 ]
mov ecx esi
call eax
mov esi eax
test esi esi
jne r-xdata
mov eax esi
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov eax esi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10003670
push esi
call sub_1000c2e6
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
sub_100098e0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
lea eax [ edi + edi + 0x1 ]
push eax
call sub_1000c482
add esp 0x4
xor edx edx
test edi edi
je r-xdata
mov [ eax + edi * 2 ] dl
pop edi
pop ebp
retn 0x8
push esi
mov esi [ ebp + 0x8 ]
mov edi edi
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 ] cl
mov cl [ edx + esi ]
and cl 0xf
cmp cl 0x9
jg r-xdata
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 + 0x1 ] cl
inc edx
cmp edx edi
jb r-xdata
mov cl [ edx + esi ]
sar cl 0x4
and cl 0xf
cmp cl 0x9
jg r-xdata
pop esi
mov [ eax + edi * 2 ] 0x0
pop edi
pop ebp
retn 0x8
sub_10009960
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10015400
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esp + 0x14 ] ecx
xor ebx ebx
mov ecx eax
mov [ esp + 0x2c ] 0xf
mov [ esp + 0x28 ] ebx
mov [ esp + 0x18 ] bl
lea esi [ ecx + 0x1 ]
lea esp [ esp ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ esp + 0x18 ]
call sub_10003480
mov edx [ esp + 0x14 ]
mov [ esp + 0x60 ] ebx
mov eax edx
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] ebx
mov [ esp + 0x34 ] bl
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax esi
mov edi eax
mov eax edx
lea esi [ esp + 0x34 ]
call sub_10003480
mov ebx [ esp + 0x10 ]
add ebx 0x20
lea ecx [ esp + 0x18 ]
mov [ esp + 0x60 ] 0x1
call sub_10009ae0
mov esi 0x10
cmp [ esp + 0x48 ] esi
jb r-xdata
xor eax eax
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] eax
mov [ esp + 0x34 ] al
cmp [ esp + 0x2c ] esi
jb r-xdata
mov edx [ esp + 0x34 ]
push edx
call sub_1000ba8c
add esp 0x4
mov eax 0x1
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x8
mov eax [ esp + 0x18 ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10009a90
cmp [ esi + 0x30 ] 0x10
jb r-xdata
mov [ esi + 0x30 ] 0xf
mov [ esi + 0x2c ] 0x0
mov [ esi + 0x1c ] 0x0
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
retn
mov ecx [ esi ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_10009ae0
push ebp
mov ebp esp
push 0xffffffff
push sub_100153ca
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov ecx [ ebx + 0x4 ]
cmp edi ecx
jae r-xdata
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebx ]
cmp eax edi
ja r-xdata
mov esi [ ebx + 0x4 ]
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x2
test esi esi
je r-xdata
mov ecx ebx
call sub_10009be0
sub edi eax
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
add [ ebx + 0x4 ] 0x38
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
call sub_10003410
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebx ]
lea eax [ esi * 8 ]
sub eax esi
mov esi [ ebx + 0x4 ]
lea edi [ ecx + eax * 8 ]
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx ebx
call sub_10009be0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
call sub_10003410
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
add esi 0x1c
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
add edi 0x1c
mov [ esi ] 0x0
call sub_10003410
sub_10009be0
push ebx
mov ebx [ ecx ]
push esi
mov esi [ ecx + 0x4 ]
sub esi ebx
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
push edi
cmp esi 0x4924923
jbe r-xdata
mov edi [ ecx + 0x8 ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov eax edx
shr eax 0x1f
inc esi
add eax edx
cmp esi eax
jbe r-xdata
push r--data
call sub_10013ad6
pop edi
pop esi
pop ebx
retn
mov edx eax
shr edx 0x1
mov edi 0x4924924
sub edi edx
cmp edi eax
jae r-xdata
add eax edx
xor eax eax
jmp r-xdata
push eax
call sub_10009c60
mov eax esi
cmp eax esi
jae r-xdata
sub_10009c60
push ebp
mov ebp esp
push 0xffffffff
push sub_10015390
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov edi [ ebp + 0x8 ]
cmp edi 0x4924924
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx [ esi ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
cmp eax edi
jae r-xdata
push r--data
call sub_10013ad6
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx edi
call sub_10009d70
mov [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push edi
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10009f30
mov edi [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx edi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov ebx edx
shr ebx 0x1f
add esp 0xc
add ebx edx
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax * 8 ]
sub ecx eax
mov eax [ ebp - 0x14 ]
lea edx [ eax + ecx * 8 ]
lea ecx [ ebx * 8 ]
sub ecx ebx
mov [ esi + 0x8 ] edx
lea edx [ eax + ecx * 8 ]
mov [ esi + 0x4 ] edx
mov [ esi ] eax
mov ecx [ ebp + 0x8 ]
mov edi [ esi + 0x4 ]
mov eax [ esi ]
push ecx
call sub_10009ed0
mov edx [ esi ]
push edx
call sub_1000ba8c
add esp 0x8
sub_10009d70
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x4924924
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000cd6c
lea eax [ ecx * 8 ]
sub eax ecx
add eax eax
add eax eax
add eax eax
push eax
call sub_1000ba97
add esp 0x4
test eax eax
jne r-xdata
sub_10009dd0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx ecx
cmp eax [ ebp + 0x8 ]
je r-xdata
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
lea edi [ eax + 0x30 ]
sub eax ebx
add eax 0xffffffd0
lea esi [ ebx + 0x30 ]
mov [ ebp - 0x4 ] eax
xor ecx ecx
cmp [ esi - 0x1c ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
add esi 0x38
lea ecx [ eax + esi ]
add ebx 0x38
add edi 0x38
cmp ecx [ ebp + 0x8 ]
jne r-xdata
cmp [ esi ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
xor ecx ecx
mov [ esi - 0x1c ] 0xf
mov [ esi - 0x20 ] ecx
mov [ ebx ] cl
cmp [ edi - 0x1c ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_1000ba8c
add esp 0x4
add eax esi
cmp ebx eax
je r-xdata
pop edi
pop esi
mov [ esi ] 0xf
mov [ esi - 0x4 ] ecx
lea eax [ esi - 0x14 ]
mov [ eax ] 0x0
cmp [ edi ] 0x10
jae r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_1000ba8c
add esp 0x4
xor ecx ecx
mov edx [ eax + esi ]
mov [ ebx ] edx
mov [ eax + esi ] ecx
mov ecx [ edi - 0x20 ]
inc ecx
push ecx
add eax esi
push eax
push ebx
call sub_1000bef0
add esp 0xc
xor ecx ecx
jmp r-xdata
mov edx [ edi - 0x14 ]
mov [ eax ] edx
mov [ edi - 0x14 ] ecx
mov ecx [ edi - 0x4 ]
inc ecx
push ecx
lea edx [ edi - 0x14 ]
push edx
push eax
call sub_1000bef0
add esp 0xc
xor ecx ecx
jmp r-xdata
lea eax [ esi - 0x14 ]
lea edx [ edi - 0x14 ]
cmp eax edx
je r-xdata
mov eax [ edi - 0x20 ]
mov [ esi - 0x20 ] eax
mov edx [ edi - 0x1c ]
mov [ esi - 0x1c ] edx
mov [ edi - 0x20 ] ecx
mov [ edi - 0x1c ] ecx
jmp r-xdata
mov eax [ edi - 0x4 ]
mov [ esi - 0x4 ] eax
mov edx [ edi ]
mov [ esi ] edx
mov [ edi - 0x4 ] ecx
mov [ edi ] ecx
sub_10009ed0
cmp eax edi
je r-xdata
retn
push ebx
push esi
lea esi [ eax + 0x30 ]
xor ebx ebx
jmp r-xdata
cmp [ esi ] 0x10
jb r-xdata
mov [ esi ] 0xf
mov [ esi - 0x4 ] ebx
mov [ esi - 0x14 ] bl
cmp [ esi - 0x1c ] 0x10
jb r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_1000ba8c
add esp 0x4
mov [ esi - 0x1c ] 0xf
mov [ esi - 0x20 ] ebx
mov [ esi - 0x30 ] bl
add esi 0x38
lea edx [ esi - 0x30 ]
cmp edx edi
jne r-xdata
mov ecx [ esi - 0x30 ]
push ecx
call sub_1000ba8c
add esp 0x4
pop esi
pop ebx
sub_10009f30
push ebp
mov ebp esp
push 0xffffffff
push sub_1001536d
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
lea edi [ eax + 0x30 ]
lea esi [ ecx + 0x30 ]
nop
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor ecx ecx
cmp eax ecx
je r-xdata
add eax 0x38
add esi 0x38
mov [ ebp + 0xc ] eax
add edi 0x38
jmp r-xdata
mov [ edi - 0x1c ] 0xf
mov [ edi - 0x20 ] ecx
mov [ eax ] cl
cmp eax edx
je r-xdata
lea edx [ esi - 0x30 ]
cmp edx [ ebp + 0x8 ]
je r-xdata
mov [ edi - 0x4 ] ecx
lea ecx [ esi - 0x14 ]
lea edx [ edi - 0x14 ]
lea ebx [ edi - 0x14 ]
mov [ edi ] 0xf
mov [ ebx ] 0x0
cmp edx ecx
je r-xdata
mov ebx 0x10
cmp [ edi - 0x1c ] ebx
jb r-xdata
cmp [ edi ] 0x10
jb r-xdata
mov [ edi - 0x1c ] 0xf
mov [ edi - 0x20 ] ecx
mov [ eax ] 0x0
cmp [ esi - 0x1c ] ebx
jae r-xdata
mov eax [ eax ]
push eax
call sub_1000ba8c
mov eax [ ebp + 0xc ]
add esp 0x4
xor ecx ecx
xor ecx ecx
mov [ edi ] 0xf
mov [ edi - 0x4 ] ecx
mov [ ebx ] cl
cmp [ esi ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_1000ba8c
mov eax [ ebp + 0xc ]
add esp 0x4
mov edx [ esi - 0x30 ]
mov [ eax ] edx
mov [ esi - 0x30 ] ecx
mov ecx [ esi - 0x20 ]
inc ecx
push ecx
lea ecx [ esi - 0x30 ]
push ecx
push eax
call sub_1000bef0
mov eax [ ebp + 0xc ]
add esp 0xc
xor ecx ecx
jmp r-xdata
mov edx [ esi - 0x14 ]
mov [ ebx ] edx
mov [ esi - 0x14 ] ecx
mov eax [ esi - 0x4 ]
inc eax
push eax
lea eax [ esi - 0x14 ]
push eax
push ebx
call sub_1000bef0
mov eax [ ebp + 0xc ]
add esp 0xc
jmp r-xdata
mov edx [ esi - 0x20 ]
mov [ edi - 0x20 ] edx
mov edx [ esi - 0x1c ]
mov [ edi - 0x1c ] edx
mov [ esi - 0x20 ] ecx
mov [ esi - 0x1c ] ecx
mov ecx [ esi - 0x4 ]
mov [ edi - 0x4 ] ecx
mov edx [ esi ]
mov [ edi ] edx
mov [ esi - 0x4 ] 0x0
mov [ esi ] 0x0
sub_1000a090
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000a0c0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014df3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov edi [ ebp + 0x8 ]
lea esi [ edi + 0x4 ]
mov [ edi ] r--data
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x1
mov [ edi + 0x14 ] eax
mov eax [ esi + 0x4 ]
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x14 ] 0x10
mov [ ebp - 0x10 ] ebx
cmp ecx eax
jae r-xdata
cmp eax [ esi + 0x8 ]
jne r-xdata
mov ecx [ esi ]
lea edx [ ebp - 0x14 ]
cmp ecx edx
ja r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov ecx esi
call sub_1000a490
mov edi edx
sub edi ecx
sar edi 0x3
cmp eax [ esi + 0x8 ]
jne r-xdata
add [ esi + 0x4 ] 0x8
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x14 ]
mov [ ebp - 0x14 ] 0x22b
mov [ ebp - 0x10 ] ebx
cmp edx eax
jae r-xdata
mov [ eax ] 0x10
mov [ eax + 0x4 ] ebx
mov eax [ esi ]
lea ecx [ eax + edi * 8 ]
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov ecx esi
call sub_1000a490
cmp eax [ esi + 0x8 ]
jne r-xdata
mov ecx [ esi ]
cmp ecx edx
ja r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov ecx esi
call sub_1000a490
mov edi edx
sub edi ecx
sar edi 0x3
cmp eax [ esi + 0x8 ]
jne r-xdata
mov eax edi
mov [ eax ] 0x22b
mov [ eax + 0x4 ] ebx
mov eax [ esi ]
lea ecx [ eax + edi * 8 ]
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov ecx esi
call sub_1000a490
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
add [ esi + 0x4 ] 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000a200
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000a230
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000a230
push ebp
mov ebp esp
push 0xffffffff
push sub_10014d73
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
mov eax [ esi + 0x8 ]
sub eax [ esi + 0x4 ]
xor ebx ebx
sar eax 0x3
xor edi edi
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
lea esp [ esp ]
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_1000ba8c
add esp 0x4
push r--data
call sub_10013b23
cmp [ eax + edi * 8 + 0x4 ] ebx
je r-xdata
mov edx [ esi + 0x8 ]
sub edx [ esi + 0x4 ]
inc edi
sar edx 0x3
cmp edi edx
jb r-xdata
mov edx [ esi + 0x8 ]
sub edx eax
sar edx 0x3
cmp edx edi
jbe r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
sub ecx eax
sar ecx 0x3
cmp ecx edi
jbe r-xdata
mov ecx [ eax + edi * 8 + 0x4 ]
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
sub ecx eax
sar ecx 0x3
cmp ecx edi
jbe r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ eax + edi * 8 + 0x4 ] ebx
sub_1000a320
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov edx [ ecx + 0x8 ]
mov ecx [ ebp + 0x8 ]
sub edx eax
sar edx 0x3
cmp edx ecx
ja r-xdata
mov eax [ eax + ecx * 8 ]
pop ebp
retn 0x4
push r--data
call sub_10013b23
sub_1000a350
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
sub ecx eax
push edi
mov edi [ ebp + 0x8 ]
sar ecx 0x3
cmp ecx edi
ja r-xdata
cmp [ eax + edi * 8 + 0x4 ] 0x0
jne r-xdata
push r--data
call sub_10013b23
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
sub ecx eax
sar ecx 0x3
cmp ecx edi
ja r-xdata
mov eax [ eax + edi * 8 ]
cmp eax 0x10
jne r-xdata
mov eax [ eax + edi * 8 + 0x4 ]
pop edi
pop esi
pop ebp
retn 0x4
push r--data
call sub_10013b23
cmp eax 0x22b
jne r-xdata
call sub_10009230
jmp r-xdata
xor eax eax
push 0x8
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ esi + 0x8 ]
sub edx ecx
sar edx 0x3
cmp edx edi
ja r-xdata
mov [ ecx + edi * 8 + 0x4 ] eax
push r--data
call sub_10013b23
xor eax eax
push eax
call sub_10009430
add esp 0x4
jmp r-xdata
mov ecx [ esi + 0x14 ]
push eax
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
call sub_10009430
add esp 0x4
jmp r-xdata
sub_1000a410
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x4 ]
push edi
xor edi edi
call edx
test eax eax
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
pop ebp
retn 0x4
mov ebx [ ebp + 0x8 ]
mov edx [ eax + 0xc ]
push edi
call edx
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov edx [ eax + 0x4 ]
inc edi
call edx
cmp edi eax
jb r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push edi
mov ecx esi
call edx
cmp eax ebx
mov eax [ esi ]
mov ecx esi
je r-xdata
sub_1000a490
mov eax [ ecx + 0x4 ]
push esi
mov esi [ ecx ]
sub eax esi
sar eax 0x3
cmp eax 0x1ffffffe
jbe r-xdata
mov edx [ ecx + 0x8 ]
sub edx esi
inc eax
sar edx 0x3
cmp eax edx
jbe r-xdata
push r--data
call sub_10013ad6
pop esi
retn
push edi
mov esi edx
shr esi 0x1
mov edi 0x1fffffff
sub edi esi
cmp edi edx
pop edi
jae r-xdata
add edx esi
xor edx edx
jmp r-xdata
push edx
call sub_1000a4e0
mov edx eax
cmp edx eax
jae r-xdata
sub_1000a4e0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014dc0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov ecx [ ebp + 0x8 ]
cmp ecx 0x1fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x3
cmp eax ecx
jae r-xdata
push r--data
call sub_10013ad6
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call sub_1000a5b0
mov ebx eax
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push eax
mov eax ebx
mov [ ebp - 0x14 ] ebx
call sub_1000a610
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0x4
sar edi 0x3
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
lea edx [ ebx + ecx * 8 ]
lea eax [ ebx + edi * 8 ]
mov [ esi + 0x8 ] edx
mov [ esi + 0x4 ] eax
mov [ esi ] ebx
push eax
call sub_1000ba8c
add esp 0x4
sub_1000a5b0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x1fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000be2f
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000cd6c
lea eax [ ecx * 8 ]
push eax
call sub_1000ba97
add esp 0x4
test eax eax
jne r-xdata
sub_1000a610
cmp ecx edx
je r-xdata
retn
push esi
add ecx 0x8
add eax 0x8
cmp ecx edx
jne r-xdata
mov esi [ ecx ]
mov [ eax ] esi
mov esi [ ecx + 0x4 ]
mov [ eax + 0x4 ] esi
test eax eax
je r-xdata
pop esi
sub_1000a630
push ebp
mov ebp esp
sub esp 0x8
mov edx [ eax * 4 + rw-data ]
lea ecx [ eax * 4 + rw-data ]
mov [ ebp - 0x8 ] ecx
test edx edx
jne r-xdata
mov eax [ ecx ]
mov esp ebp
pop ebp
retn
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
mov cl [ eax ]
push esi
movzx esi [ eax + 0x1 ]
lea edx [ esi + 0x1 ]
push edi
push edx
mov [ ebp - 0x1 ] cl
call sub_1000ba97
add esp 0x4
mov edi eax
xor ecx ecx
mov [ esi + edi ] 0x0
test esi esi
je r-xdata
mov esi [ ebp - 0x8 ]
push edi
push esi
call [ InterlockedExchange@IAT ]
mov eax [ esi ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
jmp r-xdata
mov eax [ ebx ]
mov dl [ ecx + eax + 0x3 ]
xor dl [ ebp - 0x1 ]
inc ecx
mov [ ecx + edi - 0x1 ] dl
cmp ecx esi
jb r-xdata
sub_1000a6b0
push ebp
mov ebp esp
sub esp 0x8
mov edx [ eax * 4 + rw-data ]
lea ecx [ eax * 4 + rw-data ]
mov [ ebp - 0x8 ] ecx
test edx edx
jne r-xdata
mov eax [ ecx ]
mov esp ebp
pop ebp
retn
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
mov cl [ eax ]
push esi
movzx esi [ eax + 0x1 ]
mov [ ebp - 0x1 ] cl
xor ecx ecx
lea eax [ esi + 0x1 ]
mov edx 0x2
mul edx
seto cl
push edi
neg ecx
or ecx eax
push ecx
call sub_1000ba97
mov edi eax
xor eax eax
add esp 0x4
xor ecx ecx
mov [ edi + esi * 2 ] ax
test esi esi
je r-xdata
mov esi [ ebp - 0x8 ]
push edi
push esi
call [ InterlockedExchange@IAT ]
mov eax [ esi ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
lea ebx [ ebx ]
mov edx [ ebx ]
mov al [ ecx + edx + 0x3 ]
xor al [ ebp - 0x1 ]
inc ecx
movzx edx al
mov [ edi + ecx * 2 - 0x2 ] dx
cmp ecx esi
jb r-xdata
sub_1000a750
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000a780
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000a7b0
push ebp
mov ebp esp
push 0xffffffff
push sub_100157a4
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ esi ] r--data
mov edx 0x7
xor ecx ecx
mov [ esi + 0x18 ] edx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] cx
xor eax eax
mov [ esi + 0x34 ] edx
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] ax
lea ecx [ esi + 0x3c ]
mov [ ecx + 0x14 ] edx
mov [ ecx + 0x10 ] ebx
mov [ ecx ] ax
mov [ esi + 0x6c ] edx
xor edx edx
mov [ esi + 0x68 ] ebx
mov [ esi + 0x58 ] dx
mov edx [ ebp + 0xc ]
lea eax [ edx + 0x2 ]
mov [ ebp - 0x4 ] 0x4
mov [ ebp - 0x14 ] eax
mov ax [ edx ]
add edx 0x2
cmp ax bx
jne r-xdata
sub edx [ ebp - 0x14 ]
mov eax [ ebp + 0xc ]
sar edx 0x1
push edx
call sub_10003880
mov eax [ ebp - 0x10 ]
lea edx [ eax + 0x2 ]
nop
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax [ ebp - 0x10 ]
lea ecx [ esi + 0x58 ]
call sub_10003880
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000a890
push ebp
mov ebp esp
push 0xffffffff
push sub_1001532b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x690
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
xor edi edi
cmp [ ebx + 0x14 ] edi
jne r-xdata
cmp [ ebx + 0x18 ] 0x8
lea eax [ ebx + 0x4 ]
jb r-xdata
lea eax [ edi + 0xa ]
call sub_1000a6b0
push 0x66e
mov esi eax
lea eax [ ebp - 0x680 ]
push edi
push eax
call sub_10010f50
add esp 0xc
push 0x336
lea ecx [ ebp - 0x680 ]
push ecx
push esi
call [ ExpandEnvironmentStringsW@IAT ]
xor edx edx
lea eax [ ebp - 0x680 ]
mov [ ebp - 0x69c ] dx
mov [ ebp - 0x688 ] 0x7
mov [ ebp - 0x68c ] edi
lea edx [ eax + 0x2 ]
nop
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ eax ]
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0x680 ]
lea ecx [ ebp - 0x69c ]
call sub_10003880
mov [ ebp - 0x4 ] edi
lea esi [ ebx + 0x4 ]
lea edi [ ebp - 0x69c ]
call sub_10003550
cmp [ ebp - 0x688 ] 0x8
jb r-xdata
mov eax [ ebp - 0x69c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_1000a9a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015a48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
xor edi edi
cmp [ ebx + 0x30 ] edi
jne r-xdata
cmp [ ebx + 0x34 ] 0x8
lea eax [ ebx + 0x20 ]
jb r-xdata
lea eax [ edi + 0xb ]
call sub_1000a6b0
mov esi eax
lea eax [ edi + 0xc ]
call sub_1000a6b0
mov [ ebp - 0x30 ] eax
xor eax eax
mov [ ebp - 0x2c ] ax
mov eax esi
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
lea edx [ eax + 0x2 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ eax ]
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10003880
push edi
lea ecx [ ebx + 0x3c ]
mov [ ebp - 0x4 ] edi
push ecx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
call sub_10008100
mov eax esi
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10008020
mov edx [ ebp - 0x30 ]
mov eax edx
lea esi [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax esi
sar eax 0x1
push eax
mov eax edx
lea ecx [ ebp - 0x2c ]
call sub_10008020
push 0x0
lea edx [ ebx + 0x58 ]
push edx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
call sub_10008100
push 0x0
lea eax [ ebp - 0x2c ]
push eax
lea edi [ ebx + 0x20 ]
or eax 0xffffffff
call sub_100035c0
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_1000aad0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000ab00
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000ab00
cmp [ esi + 0x6c ] 0x8
jb r-xdata
push ebx
push edi
xor edi edi
mov ebx 0x7
xor ecx ecx
mov [ esi + 0x6c ] ebx
mov [ esi + 0x68 ] edi
mov [ esi + 0x58 ] cx
cmp [ esi + 0x50 ] 0x8
jb r-xdata
mov eax [ esi + 0x58 ]
push eax
call sub_1000ba8c
add esp 0x4
xor eax eax
mov [ esi + 0x50 ] ebx
mov [ esi + 0x4c ] edi
mov [ esi + 0x3c ] ax
cmp [ esi + 0x34 ] 0x8
jb r-xdata
mov edx [ esi + 0x3c ]
push edx
call sub_1000ba8c
add esp 0x4
xor edx edx
mov [ esi + 0x34 ] ebx
mov [ esi + 0x30 ] edi
mov [ esi + 0x20 ] dx
cmp [ esi + 0x18 ] 0x8
jb r-xdata
mov ecx [ esi + 0x20 ]
push ecx
call sub_1000ba8c
add esp 0x4
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] ebx
xor ecx ecx
pop edi
mov [ esi + 0x4 ] cx
mov [ esi ] r--data
pop ebx
retn
mov eax [ esi + 0x4 ]
push eax
call sub_1000ba8c
add esp 0x4
sub_1000ab90
push ebp
mov ebp esp
push 0xffffffff
push sub_10015c7b
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x74
call sub_1000ba97
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
call edx
push eax
push esi
call sub_1000a7b0
sub_1000abf0
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
xor eax eax
pop ebp
retn 0x4
push 0x4
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
mov [ eax ] r--data
pop ebp
retn 0x4
sub_1000ac20
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000ac50
push ebp
mov ebp esp
push 0xffffffff
push sub_10015478
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor eax eax
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] ax
mov [ ebp - 0x4 ] eax
mov edx [ ecx ]
mov eax [ edx + 0x40 ]
call eax
mov esi eax
lea edx [ eax + 0x2 ]
lea esp [ esp ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10008020
push esi
call sub_1000c2e6
add esp 0x4
mov eax 0x3
call sub_1000a6b0
mov ecx eax
lea esi [ ecx + 0x2 ]
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10008020
mov eax 0xe
call sub_1000a6b0
mov ecx eax
lea esi [ ecx + 0x2 ]
lea esp [ esp ]
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10008020
mov eax [ ebp - 0x1c ]
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000c482
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
mov esi eax
mov eax [ ebp - 0x2c ]
jae r-xdata
mov edx esi
sub edx eax
jmp r-xdata
lea eax [ ebp - 0x2c ]
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
jne r-xdata
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_1000ad90
push ebp
mov ebp esp
push 0xffffffff
push sub_10015741
mov eax [ fs : 0x0 ]
push eax
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov edi edx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x34 ] ecx
xor edx edx
mov ecx eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ebx
mov [ ebp - 0x3c ] edi
mov [ edi ] dx
lea esi [ ecx + 0x2 ]
mov dx [ ecx ]
add ecx 0x2
cmp dx bx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
mov ecx edi
call sub_10003880
mov [ ebp - 0x4 ] ebx
mov eax 0x3
mov [ ebp - 0x38 ] 0x1
call sub_1000a6b0
mov esi eax
mov eax 0xf
call sub_1000a6b0
mov [ ebp - 0x30 ] eax
mov eax esi
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
mov eax esi
mov ecx edi
call sub_10008020
mov ecx [ ebp - 0x34 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
call edx
mov edx eax
lea ecx [ ebp - 0x2c ]
call sub_1000b930
push ebx
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x1
call sub_10008100
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov edx [ ebp - 0x30 ]
mov eax edx
lea esi [ eax + 0x2 ]
lea esp [ esp ]
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax esi
sar eax 0x1
push eax
mov eax edx
mov ecx edi
call sub_10008020
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x4
sub_1000aec0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015a78
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x14 ]
mov edx [ esi ]
mov ebx [ ebp + 0x10 ]
mov [ ebp - 0x40 ] eax
mov eax [ edx + 0x8 ]
mov [ ebp - 0x38 ] ecx
mov ecx esi
call eax
mov edi eax
mov eax 0xe
call sub_1000a6b0
mov [ ebp - 0x30 ] eax
mov eax 0xd
call sub_1000a6b0
mov ecx [ ebp - 0x30 ]
mov edx [ edi ]
mov edx [ edx + 0x4 ]
push ecx
push eax
mov ecx edi
call edx
mov edi eax
test edi edi
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x10
call sub_1000a6b0
push eax
push edi
call sub_1000c74a
add esp 0x8
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x30 ] eax
mov eax [ ebx ]
push 0x1
mov [ ebp - 0x34 ] eax
mov eax [ eax + 0x8 ]
push 0x1
mov ecx ebx
call eax
mov edx [ ebx ]
push eax
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
mov edx [ ebp - 0x34 ]
push eax
mov eax [ edx + 0x14 ]
mov ecx ebx
call eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x14
cmp [ ebp - 0x30 ] 0x0
jne r-xdata
push edi
call sub_1000ba8c
add esp 0x4
mov ecx [ ebp - 0x38 ]
push edi
lea edx [ ebp - 0x2c ]
call sub_1000ad90
mov [ ebp - 0x4 ] 0x0
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx esi
call eax
cmp [ ebp - 0x18 ] 0x8
mov [ ebp - 0x38 ] eax
jb r-xdata
push edi
call sub_1000c2e6
add esp 0x4
mov ecx ebx
call sub_1000ac50
mov edi eax
lea edx [ ebp - 0x2c ]
mov [ ebp - 0x34 ] edx
mov ecx [ ebp - 0x2c ]
mov [ ebp - 0x34 ] ecx
jmp r-xdata
cmp [ ebp - 0x30 ] 0x0
jne r-xdata
push edi
call sub_1000ba8c
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax [ eax ]
mov ebx [ ebp - 0x40 ]
mov edx [ ebx ]
mov [ ebp - 0x3c ] eax
mov eax [ edx + 0x8 ]
push 0x0
mov ecx ebx
call eax
mov edx [ ebx ]
push eax
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0x3c ]
push eax
mov eax [ edx + 0x4 ]
push ecx
mov ecx [ ebp - 0x38 ]
call eax
mov ebx eax
test ebx ebx
jne r-xdata
push edi
call sub_1000ba8c
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
mov esi eax
mov eax 0xe
call sub_1000a6b0
mov ebx eax
mov eax 0xd
call sub_1000a6b0
mov edx [ esi ]
push 0x0
push edi
push ebx
push eax
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
mov ebx eax
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
xor eax eax
jmp r-xdata
mov eax ebx
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_1000b0a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10015a48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x14 ]
mov edx [ ecx ]
mov esi [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
mov eax [ edx + 0x8 ]
call eax
mov edi eax
mov eax 0xe
call sub_1000a6b0
mov ebx eax
mov eax 0xd
call sub_1000a6b0
mov edx [ edi ]
push ebx
push eax
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
mov edi eax
test edi edi
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x10
mov ecx [ ebp - 0x30 ]
push edi
lea edx [ ebp - 0x2c ]
call sub_1000ad90
push edi
mov [ ebp - 0x4 ] 0x0
call sub_1000c2e6
mov eax [ ebp - 0x2c ]
add esp 0x4
cmp [ ebp - 0x18 ] 0x8
jae r-xdata
mov edx [ esi ]
push eax
mov eax [ edx + 0x44 ]
mov ecx esi
call eax
mov edi [ esi ]
mov edx [ edi + 0x10 ]
mov ecx esi
mov ebx eax
call edx
push eax
mov eax [ edi + 0x44 ]
mov ecx esi
call eax
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
lea eax [ ebp - 0x2c ]
mov eax ebx
mov ecx [ ebp - 0x2c ]
push ecx
call sub_1000ba8c
add esp 0x4
sub_1000b180
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000b1b0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push edi
xor edi edi
push edi
mov ebx ecx
call [ CoInitialize@IAT ]
test eax eax
jns r-xdata
lea eax [ ebp - 0x4 ]
push eax
push r--data
push 0x1
push edi
push r--data
mov [ ebp - 0x4 ] edi
call [ CoCreateInstance@IAT ]
test eax eax
js r-xdata
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x10
mov eax [ ebp - 0x4 ]
mov edx [ ebp + 0xc ]
mov ecx [ eax ]
push esi
push edx
push eax
mov eax [ ecx + 0x50 ]
call eax
mov edx [ ebp + 0x10 ]
cmp edx edi
je r-xdata
mov eax [ ebp - 0x4 ]
lea edx [ ebp - 0x8 ]
push edx
mov [ ebp - 0x8 ] edi
mov ecx [ eax ]
push r--data
push eax
mov eax [ ecx ]
call eax
test eax eax
jns r-xdata
mov eax edx
lea esi [ eax + 0x2 ]
jmp r-xdata
mov ecx [ ebx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x2c ]
call edx
mov esi eax
mov eax [ ebp - 0x8 ]
mov ecx [ eax ]
mov edx [ ecx + 0x18 ]
push edi
push esi
push eax
call edx
mov edi eax
mov eax [ ebp - 0x8 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
call [ CoUninitialize@IAT ]
test edi edi
jns r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
pop esi
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x10
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
mov edx [ ebp + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x3c ]
push edx
mov edx [ ebp + 0x8 ]
push 0x1
push edx
push esi
call eax
mov ecx [ ebx + 0x4 ]
mov edx [ ecx ]
mov edi eax
mov eax [ edx + 0x30 ]
push esi
call eax
push esi
call sub_1000ba8c
add esp 0x4
pop esi
mov eax edi
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x10
push esi
call sub_1000ba8c
add esp 0x4
pop esi
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x10
sub eax esi
sar eax 0x1
je r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
push edx
mov edx [ ecx + 0x2c ]
push eax
call edx
sub_1000b2f0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000b320
push ebp
mov ebp esp
mov eax 0x171c
call sub_100134d0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
lea ecx [ ebp - 0x1714 ]
push ecx
push 0x80000000
push 0x0
push eax
push 0x80000001
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
xor eax eax
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x8
push 0x170b
push eax
lea edx [ ebp - 0x1710 ]
push edx
mov [ ebp - 0x1718 ] eax
mov [ ebp - 0x171c ] 0x170b
call sub_10010f50
add esp 0xc
lea eax [ ebp - 0x171c ]
push eax
mov eax [ ebp - 0x1714 ]
lea ecx [ ebp - 0x1710 ]
push ecx
lea edx [ ebp - 0x1718 ]
push edx
push 0x0
push esi
push eax
call [ RegQueryValueExW@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1718 ]
cmp eax 0x1
je r-xdata
mov ecx [ ebp - 0x1714 ]
push ecx
call [ RegCloseKey@IAT ]
mov eax [ ebp - 0x1714 ]
push eax
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x1710 ]
lea edx [ eax + 0x2 ]
cmp eax 0x2
je r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000ba97
lea ecx [ ebp - 0x1710 ]
mov esi eax
mov edx ecx
add esp 0x4
sub esi edx
mov edx [ ebp - 0x1714 ]
push edx
call [ RegCloseKey@IAT ]
xor eax eax
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x8
movzx edx [ ecx ]
mov [ esi + ecx ] dx
add ecx 0x2
test dx dx
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ba7d
mov esp ebp
pop ebp
retn 0x8
sub_1000b470
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
lea eax [ ebp + 0x8 ]
push eax
push 0x40000000
push 0x0
push ecx
push 0x80000001
call [ RegOpenKeyExW@IAT ]
test eax eax
je r-xdata
mov edx [ ebp + 0x10 ]
push esi
mov eax edx
push edi
mov edi 0x1
lea esi [ eax + 0x2 ]
xor eax eax
pop ebp
retn 0x10
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov ecx [ ebp + 0xc ]
sub eax esi
sar eax 0x1
add eax eax
push eax
push edx
mov edx [ ebp + 0x8 ]
push 0x1
push 0x0
push ecx
push edx
call [ RegSetValueExW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
xor edi edi
mov eax edi
pop edi
pop esi
pop ebp
retn 0x10
mov eax [ ebp + 0x8 ]
push eax
call [ RegCloseKey@IAT ]
sub_1000b500
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000b530
push ebp
mov ebp esp
push 0xffffffff
push sub_10014d38
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x8 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x8 ] 0x0
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0xc ] 0x0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_1000ba8c
add esp 0x4
sub_1000b5c0
push esi
mov esi ecx
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov eax [ esi + 0xc ]
pop esi
retn
push 0x4
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
mov [ esi + 0xc ] eax
mov [ eax ] r--data
mov [ esi + 0xc ] eax
pop esi
retn
sub_1000b5f0
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax [ esi + 0x8 ]
pop esi
retn
push 0x8
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
mov [ esi + 0x8 ] eax
mov ecx [ esi + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ esi + 0x8 ] eax
pop esi
retn
sub_1000b630
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi eax
lea ecx [ edi + 0x2 ]
mov eax 0xaaaaaaab
mul ecx
mov ebx edx
mov edx [ ebp + 0xc ]
shr ebx 0x1
add ebx ebx
add ebx ebx
push ebx
mov [ edx ] ebx
call sub_1000c7e4
add esp 0x4
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
push esi
xor esi esi
test edi edi
je r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0xaaaaaaab
mul edi
shr edx 0x1
lea ecx [ edx + edx * 2 ]
sub edi ecx
mov edi [ edi * 4 + rw-data ]
pop esi
test edi edi
jle r-xdata
mov ecx eax
cmp esi edi
jae r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
lea eax [ ebx + edx - 0x1 ]
xor eax eax
mov eax [ ebp + 0x8 ]
movzx eax [ esi + eax ]
inc esi
jmp r-xdata
mov [ eax ] 0x3d
dec eax
dec edi
jne r-xdata
mov [ ebp + 0xc ] 0x0
mov edx [ ebp + 0x8 ]
movzx edx [ esi + edx ]
mov [ ebp + 0xc ] edx
inc esi
jmp r-xdata
cmp esi edi
jae r-xdata
xor edx edx
mov edx [ ebp + 0x8 ]
movzx edx [ esi + edx ]
inc esi
jmp r-xdata
cmp esi edi
jae r-xdata
shl eax 0x8
add eax [ ebp + 0xc ]
add ecx 0x4
shl eax 0x8
add eax edx
mov edx eax
shr edx 0x12
and edx 0x3f
movzx edx [ edx + rw-data ]
mov [ ecx - 0x4 ] dl
mov edx eax
shr edx 0xc
and edx 0x3f
movzx edx [ edx + rw-data ]
mov [ ecx - 0x3 ] dl
mov edx eax
shr edx 0x6
and edx 0x3f
movzx edx [ edx + rw-data ]
and eax 0x3f
mov al [ eax + rw-data ]
mov [ ecx - 0x2 ] dl
mov [ ecx - 0x1 ] al
cmp esi edi
jb r-xdata
sub_1000b740
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi [ rw-data ]
mov esi eax
test edi edi
jne r-xdata
mov ebx [ ebp + 0xc ]
test bl 0x3
je r-xdata
push 0x100
call sub_1000c7e4
mov ecx eax
add esp 0x4
mov [ rw-data ] ecx
xor eax eax
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
mov eax ebx
shr eax 0x2
cmp [ ecx + ebx - 0x1 ] 0x3d
lea eax [ eax + eax * 2 ]
mov [ esi ] eax
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
movzx edx [ eax + rw-data ]
mov [ edx + ecx ] al
inc eax
cmp eax 0x40
jl r-xdata
mov edi [ rw-data ]
cmp [ ecx + ebx - 0x2 ] 0x3d
jne r-xdata
dec eax
mov [ esi ] eax
mov eax [ esi ]
push eax
mov [ ebp - 0xc ] eax
call sub_1000c7e4
add esp 0x4
mov [ ebp - 0x8 ] eax
test eax eax
je r-xdata
dec [ esi ]
xor ecx ecx
xor esi esi
test ebx ebx
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov al [ ecx + ebx ]
cmp al 0x3d
jne r-xdata
movsx eax al
movsx edx [ eax + edi ]
xor edx edx
jmp r-xdata
movsx eax al
movsx eax [ eax + edi ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov al [ ecx + ebx + 0x1 ]
inc ecx
inc ecx
cmp al 0x3d
jne r-xdata
movsx eax al
movsx ebx [ eax + edi ]
xor ebx ebx
jmp r-xdata
mov al [ ecx + ebx ]
cmp al 0x3d
jne r-xdata
movsx eax al
movsx edi [ eax + edi ]
xor edi edi
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov al [ ecx + eax + 0x1 ]
inc ecx
cmp al 0x3d
jne r-xdata
cmp ecx [ ebp + 0xc ]
jb r-xdata
mov eax [ ebp - 0x8 ]
mov ebx edx
shr ebx 0x10
mov [ esi + eax ] bl
inc esi
cmp esi edi
jae r-xdata
shl edx 0x6
add edx [ ebp - 0x4 ]
inc ecx
shl edx 0x6
add edx ebx
shl edx 0x6
add edx edi
mov edi [ ebp - 0xc ]
cmp esi edi
jae r-xdata
mov edi [ rw-data ]
mov eax [ ebp - 0x8 ]
mov ebx edx
shr ebx 0x8
mov [ esi + eax ] bl
inc esi
cmp esi edi
jae r-xdata
mov [ esi + eax ] dl
inc esi
sub_1000b890
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
push ecx
mov [ ebp - 0x4 ] edi
call sub_1000b630
mov [ esi + 0x10 ] edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0x14 ] 0xf
add esp 0x8
mov ebx eax
mov [ esi ] 0x0
call sub_10003480
push ebx
call sub_1000c7aa
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000b8e0
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push eax
xor edi edi
mov [ ebp - 0x4 ] edi
push ecx
lea eax [ ebp - 0x4 ]
mov esi edx
mov [ ebp - 0x4 ] edi
call sub_1000b740
mov [ esi + 0x10 ] edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0x14 ] 0xf
add esp 0x8
mov ebx eax
mov [ esi ] 0x0
call sub_10003480
push ebx
call sub_1000c7aa
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000b930
push ebp
mov ebp esp
push 0xffffffff
push sub_10015a48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi edx
mov eax edi
mov esi ecx
mov [ ebp - 0x30 ] 0x0
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_1000c482
mov ebx eax
mov eax edi
add esp 0x4
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx edi
sub eax edx
lea edx [ ecx + 0x1 ]
mov [ ebp - 0x30 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx [ ebp - 0x30 ]
inc eax
push eax
push ebx
inc ecx
push ecx
push edi
xor edi edi
push edi
push edi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
xor ecx ecx
mov eax ebx
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] cx
lea edx [ eax + 0x2 ]
jmp r-xdata
push ebx
call sub_1000c2e6
xor eax eax
add esp 0x4
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] edi
mov [ esi ] ax
push edi
mov eax r--data
mov ecx esi
call sub_10003880
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000ba7d
mov esp ebp
pop ebp
retn
sub eax edx
sar eax 0x1
push eax
mov eax ebx
lea ecx [ ebp - 0x2c ]
call sub_10003880
push ebx
mov [ ebp - 0x4 ] edi
call sub_1000c2e6
mov [ esi + 0x10 ] edi
xor edx edx
mov [ esi + 0x14 ] 0x7
add esp 0x4
lea edi [ ebp - 0x2c ]
mov [ esi ] dx
call sub_10003550
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_1000ba8c
add esp 0x4
sub_1000ba97
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000c7e4
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000cd44
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_1000bebd
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_1000cd6c
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_1000bda7
push sub_10015d30
mov [ rw-data ] esi
call sub_1000cd1e
pop ecx
sub_1000bb51
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000bb41
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
pop ecx
sub_1000bb72
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_1000d0a0
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1000bb92
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000dcf5
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000dacc
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000d34b
mov [ esi + 0x4 ] eax
sub_1000bc19
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
push esi
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e027
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
add ebx 0x2
call sub_1000e027
add esp 0x10
add edi 0x2
movzx eax ax
test si si
je r-xdata
sub ebx edi
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
cmp si ax
je r-xdata
mov esi eax
cmp eax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
add edi 0x2
test si si
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx esi ax
jmp r-xdata
cmp si ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ edi ]
cmp eax 0x41
jb r-xdata
movzx eax [ ebx + edi ]
cmp eax 0x41
jb r-xdata
jmp r-xdata
sub_1000bd1c
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
jne r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000bc19
add esp 0xc
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
mov eax 0x7fffffff
jmp r-xdata
sub esi ecx
pop esi
pop ebp
retn
mov edx eax
cmp eax 0x5a
ja r-xdata
add ecx 0x2
test dx dx
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
sub eax ecx
jmp r-xdata
cmp dx ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp eax 0x41
jb r-xdata
movzx eax [ esi + ecx ]
cmp eax 0x41
jb r-xdata
sub_1000bdd1
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_1000e350
lea esi [ eax + 0x1 ]
push esi
call sub_1000c7e4
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1000e2ec
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_1000be2f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_1000bdd1
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000be56
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_1000be11
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_1000bdd1
jmp r-xdata
sub_1000be96
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000be11
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
pop ecx
sub_1000bebd
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_1000be56
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000bef0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000bf74 ]
jmp [ ecx * 4 + jump_table_1000bff4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c060 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1000c1fc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000c100 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000c1fc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000c060 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000c1fc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c060 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c060 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c060 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000c1fc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000c1fc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000c1fc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_1000c260
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp sub_1000e506
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
sub_1000c2f1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_1000e5c0
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_1000c342
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_1000c37b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_1000c342
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e628
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e628
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_1000c43b
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c37b
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_1000c342
sub_1000c48d
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_1000c54d
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_1000e921
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e73d
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000c5d1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_1000f4d0
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e628
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e628
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_1000c6b3
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c5d1
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_1000f4d0
sub_1000c71c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov edx eax
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov cx [ ebp + 0xc ]
cmp [ eax ] cx
je r-xdata
cmp [ eax ] cx
jne r-xdata
pop ebp
retn
xor eax eax
sub eax 0x2
cmp eax edx
je r-xdata
sub_1000c74a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
cmp [ ebx ] 0x0
push edi
mov edi eax
je r-xdata
pop edi
pop ebx
pop ebp
retn
movzx ecx [ eax ]
test cx cx
je r-xdata
xor eax eax
mov edx ecx
sub eax ebx
cmp [ ecx ] 0x0
je r-xdata
movzx edx [ ecx ]
test dx dx
je r-xdata
mov eax edi
jmp r-xdata
add edi 0x2
movzx edx [ edi ]
add eax 0x2
test dx dx
jne r-xdata
movzx ebx [ eax + ecx ]
sub ebx edx
jne r-xdata
mov ecx [ ebp + 0xc ]
test dx dx
je r-xdata
add ecx 0x2
cmp [ eax + ecx ] bx
jne r-xdata
sub_1000c7aa
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_1000e2a3
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e261
pop ecx
mov [ esi ] eax
pop esi
sub_1000c7e4
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_1000cd44
pop ecx
call sub_1000e2a3
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1000cfe1
push 0x1e
call sub_1000ce32
push 0xff
call sub_1000f856
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_1000e2a3
mov [ eax ] esi
push ebx
call sub_1000cd44
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_1000e2a3
mov [ eax ] esi
sub_1000c878
push 0x8
push r--data
call sub_10010280
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1000f7f9
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000deac
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000db57
push 0x214
push 0x1
call sub_1000fb36
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_10010230
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10010199
mov [ rw-data ] eax
call sub_1000fbd0
test eax eax
jns r-xdata
call sub_1000f817
jmp r-xdata
call sub_100102c5
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000de3e
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000fac4
call sub_100100de
test eax eax
js r-xdata
call sub_1000db8b
jmp r-xdata
push esi
call sub_1000c7aa
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000dbc8
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c951
jmp r-xdata
call sub_1000fe15
call sub_1000db8b
call sub_1000f817
call sub_1000fe15
jmp r-xdata
call sub_1000fe68
test eax eax
js r-xdata
push 0x0
call sub_1000f8d7
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000c9dc
push 0xc
push r--data
call sub_10010280
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call DllMain
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000c878
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000c878
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call DllMain
push edi
push 0x0
push ebx
call sub_1000c878
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_100102c5
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000c9dc
pop ecx
pop ebp
retn 0xc
call sub_100105d9
sub_1000caf5
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10010674
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10010674
pop ecx
sub_1000cbfb
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_1001067c
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000fb82
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000fb82
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_1000ccb1
mov edi edi
push esi
push 0x4
push 0x20
call sub_1000fb36
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000cce2
push 0xc
push r--data
call sub_10010280
call sub_1000f86e
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000cbfb
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cd18
mov eax [ ebp - 0x1c ]
call sub_100102c5
retn
sub_1000cd44
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1000cd6c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_1000cdb8
call sub_100108b1
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_100108be
pop ecx
push 0x3
call sub_1000faae
int3
push 0x1
push 0x40000015
push 0x3
call sub_1000e0d6
add esp 0xc
sub_1000cdeb
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_1000ce0c
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1000ce32
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000ce0c
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
push 0x3
call sub_10010d8d
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_10010d8d
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_10010d2a
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_1000e350
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_1000e1ff
push esi
call sub_10010d0f
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_10010d2a
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_10010bcd
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_10010d0f
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_10010c42
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_10010bcd
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_10010a61
add esp 0xc
jmp r-xdata
sub_1000cfe1
push 0x3
call sub_10010d8d
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000ce32
push 0xff
call sub_1000ce32
pop ecx
pop ecx
push 0x3
call sub_10010d8d
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000d029
push 0xc
push r--data
call sub_10010280
push 0xe
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d090
call sub_100102c5
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000c7aa
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000c7aa
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1000d0a0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000d128
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000d157
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_10010f50
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000d1bb
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_100112de
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_100111b1
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_100111b1
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_10010f50
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000d34b
push 0xc
push r--data
call sub_10010280
call sub_1000dcf5
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d3e6
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_100102c5
retn
push 0x20
call sub_1000fad3
cmp esi rw-data
je r-xdata
push esi
call sub_1000c7aa
pop ecx
sub_1000d3ef
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000d46b
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000d3ef
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000d157
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10010f50
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000d128
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_1000d1bb
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10010f50
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000d128
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000d654
push 0x14
push r--data
call sub_10010280
or [ ebp - 0x20 ] 0xffffffff
call sub_1000dcf5
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000d34b
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000d3ef
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_1000faf1
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_100102c5
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000d46b
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000c7aa
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000c7aa
pop ecx
push 0xd
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d7b5
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000c7aa
pop ecx
sub_1000d80c
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000d89b
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000d934
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000c7aa
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000c7aa
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000c7aa
push [ esi + 0xc0 ]
call sub_1000c7aa
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1001131e
push [ esi + 0xd4 ]
call sub_1000c7aa
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000c7aa
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000c7aa
pop ecx
push [ esi + 0xb0 ]
call sub_1000c7aa
push [ esi + 0xbc ]
call sub_1000c7aa
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000c7aa
push [ esi + 0xbc ]
call sub_100116fe
pop ecx
pop ecx
push eax
call sub_1000c7aa
pop ecx
push eax
call sub_1000c7aa
push [ esi + 0xbc ]
call sub_10011695
pop ecx
pop ecx
sub_1000da7f
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_1000d80c
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1000d89b
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000d934
pop ecx
sub_1000dacc
push 0xc
push r--data
call sub_10010280
call sub_1000dcf5
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_1000da7f
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000db39
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000dcf5
mov esi [ eax + 0x6c ]
mov eax esi
call sub_100102c5
retn
push 0x20
call sub_1000fad3
sub_1000db57
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000db8b
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp r-xdata
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000c7aa
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1000dbc8
push 0x8
push r--data
call sub_10010280
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dc6a
push 0xc
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_1000d80c
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dc73
call sub_100102c5
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000dc7c
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000db57
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1000fb36
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_1000c7aa
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000dbc8
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000dd0f
push 0x8
push r--data
call sub_10010280
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_100102c5
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000c7aa
pop ecx
push 0xd
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000de29
push 0xc
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000de35
push esi
call sub_1000c7aa
pop ecx
push edi
call sub_1000d89b
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000c7aa
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000d934
pop ecx
sub_1000de3e
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_1000dd0f
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000deac
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_1000db8b
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000db4e
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000f880
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_100106af
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_1000db8b
mov edi [ DecodePointer@IAT ]
push sub_1000dd0f
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1000fb36
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000dbc8
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1000e027
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
je r-xdata
leave
retn
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_1000bb92
mov esi [ ebp - 0x14 ]
mov ecx [ esi + 0x14 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
mov eax 0x100
push 0x1
cmp [ ebp + 0x8 ] ax
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
lea edx [ ebp - 0x4 ]
push edx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_100117fc
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push [ ebp + 0x8 ]
call sub_1001182b
pop ecx
test eax eax
movzx eax [ ebp + 0x8 ]
pop ecx
je r-xdata
movzx eax ax
jmp r-xdata
add ax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ esi + 0xcc ]
movzx eax [ ecx + eax ]
jmp r-xdata
pop esi
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000e0d6
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10010f50
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_10010674
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_10010674
pop ecx
sub_1000e1ff
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_1000e0d6
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_1000e224
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e1ff
int3
pop ebp
jmp eax
sub_1000e261
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000e2c9
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000e2b6
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000e261
pop ecx
mov esi eax
call sub_1000e2a3
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000e2ec
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_1000e2a3
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_1000e2a3
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_1000e251
mov eax esi
jmp r-xdata
sub_1000e350
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000e506
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1000e5c0
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000e628
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_1000bb92
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000e2a3
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10011c80
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_10011ccb
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_100111b1
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000e73d
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10012917
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10012762
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_100125ef
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_1001270c
pop ecx
test eax eax
jne r-xdata
call sub_10012762
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_100125ef
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_100126c3
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_10011e08
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000e8a1
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1000e73d
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_1000e8d4
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov al [ ebx ]
dec [ ebp + 0x8 ]
mov ecx edi
call sub_1000e8a1
inc ebx
cmp [ esi ] 0xffffffff
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_1000e2a3
cmp [ eax ] 0x2a
jne r-xdata
mov ecx edi
mov al 0x3f
call sub_1000e8a1
sub_1000e921
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x240 ] esi
mov [ ebp - 0x228 ] ebx
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x238 ] eax
call sub_1000bb92
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor esi esi
cmp edi esi
je r-xdata
push esi
call sub_10012917
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ edi ]
xor ecx ecx
mov [ ebp - 0x224 ] esi
mov [ ebp - 0x220 ] esi
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc edi
mov [ ebp - 0x23c ] edi
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov edi [ ebp - 0x23c ]
mov al [ edi ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x26c ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x26c ]
mov ebx [ ebp - 0x228 ]
xor esi esi
mov dl al
jmp r-xdata
sub_1000f4d0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1000f531
mov edi edi
push ebp
mov ebp esp
sub esp 0x3c
push ebx
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x3c ]
call sub_1000bb92
mov ecx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
xor ebx ebx
cmp ecx ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov [ ecx ] eax
cmp [ ebp + 0x14 ] ebx
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
cmp [ ebp - 0x30 ] bl
je r-xdata
mov cl [ eax ]
push esi
mov esi [ ebp - 0x3c ]
push edi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x1 ] cl
lea edi [ eax + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
xor edx edx
jmp r-xdata
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebp - 0x1 ]
mov ecx [ esi + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x3c ]
push eax
movzx eax [ ebp - 0x1 ]
push 0x8
push eax
call sub_10011ccb
mov esi [ ebp - 0x3c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x1 ] 0x2d
mov [ ebp - 0x8 ] edi
jne r-xdata
mov al [ edi ]
mov [ ebp - 0x1 ] al
inc edi
jmp r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x1 ] 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jle r-xdata
push 0x10
pop ecx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
mov al [ edi ]
inc edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x1 ] al
cmp [ ebp + 0x14 ] ecx
jne r-xdata
cmp [ ebp - 0x1 ] 0x30
je r-xdata
mov eax [ ebp + 0x14 ]
cdq
push edx
mov edi eax
push edi
push 0xffffffff
push 0xffffffff
mov [ ebp - 0x28 ] edx
call sub_10012af0
mov [ ebp - 0x20 ] ebx
mov ebx [ esi + 0xc8 ]
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
cmp [ ebp - 0x1 ] 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and eax 0x103
je r-xdata
movsx esi cl
sub esi 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] ecx
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec [ ebp - 0x8 ]
test al 0x8
jne r-xdata
lea eax [ ecx - 0x61 ]
cmp al 0x19
movsx eax cl
ja r-xdata
cmp esi [ ebp + 0x14 ]
jae r-xdata
mov al [ edi + 0x1 ]
add edi 0x2
mov [ ebp - 0x1 ] al
mov [ ebp - 0x8 ] edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
mov ebx 0x80000000
test al 0x4
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] eax
je r-xdata
lea esi [ eax - 0x37 ]
sub eax 0x20
mov ecx [ ebp - 0x10 ]
or [ ebp + 0x18 ] 0x8
cmp ecx [ ebp - 0x18 ]
jb r-xdata
call sub_1000e2a3
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ecx
push ecx
push [ ebp - 0x14 ]
push [ ebp - 0x28 ]
push edi
call sub_10012b90
xor ecx ecx
add eax esi
adc edx ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] edx
ja r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
or [ ebp - 0x14 ] 0xffffffff
or [ ebp - 0x10 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
test eax eax
je r-xdata
and eax 0x2
je r-xdata
mov cl [ ebp - 0x1 ]
movzx eax cl
movzx eax [ ebx + eax * 2 ]
mov edx eax
and edx 0x4
je r-xdata
mov eax [ ebp - 0x1c ]
cmp [ ebp - 0x14 ] eax
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp eax [ ebp - 0x1c ]
jb r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov [ ebp - 0x10 ] esi
and [ ebp - 0x14 ] 0x0
mov [ ebp - 0x10 ] ebx
jmp r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax ] ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x10 ] ebx
ja r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x18 ]
jne r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x10 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] ecx
cmp [ ebp - 0x10 ] esi
jb r-xdata
jb r-xdata
mov eax [ ebp - 0x8 ]
mov al [ eax ]
inc [ ebp - 0x8 ]
mov [ ebp - 0x1 ] al
jmp r-xdata
xor eax eax
cmp eax [ ebp - 0x20 ]
jb r-xdata
mov eax [ ebp - 0x14 ]
mov edx [ ebp - 0x10 ]
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
ja r-xdata
cmp [ ebp - 0x14 ] 0x0
ja r-xdata
ja r-xdata
cmp [ ebp - 0x14 ] 0xffffffff
jbe r-xdata
cmp esi [ ebp - 0x24 ]
jbe r-xdata
sub_1000f7ce
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_1000f531
add esp 0x14
pop ebp
retn
sub_1000f82b
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000f880
mov edi edi
push esi
call sub_1000db45
mov esi eax
push esi
call sub_1000cd35
push esi
call sub_1000e0c7
push esi
call sub_1000d01a
push esi
call sub_10012c59
push esi
call sub_1001085c
push esi
call sub_10012c48
add esp 0x18
pop esi
retn
sub_1000f8b3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000f8d7
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_1001293d
push r--data
push r--data
call sub_1000f8b3
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10012d00
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_10010256
call sub_1000cd1e
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_10012d00
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000f96e
push 0x20
push r--data
call sub_10010280
push 0x8
call sub_10010829
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fa99
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_100102c5
retn
mov [ rw-data ] 0x1
push 0x8
call sub_10010750
pop ecx
push [ ebp + 0x8 ]
call sub_1000f856
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1000db45
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1000db45
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000faf1
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000c7e4
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1000fb36
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012dbc
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000fb82
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012e3e
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_1000fbd0
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1000fb36
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1000fb36
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1000fe15
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_1000c7aa
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1000fe68
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000d7ee
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1000fb36
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_1000e350
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_1000e350
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_1000c7aa
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1000fb36
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000c7aa
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1000e2ec
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e1ff
int3
add edi 0x4
sub_1000ff44
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_10012f3e
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_10012f3e
pop ecx
test eax eax
je r-xdata
call sub_10012f3e
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_100100de
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000d7ee
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1000ff44
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_1000faf1
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1000ff44
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10010199
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_1000faf1
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1000c7aa
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_10010230
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10010256
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10010280
push sub_100102e0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_100102e0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ba7d
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ba7d
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10010f2b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10010ee2
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000ba7d
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ba7d
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10010f12
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10010f2b
mov eax [ ebp + 0xc ]
push r--data
call sub_10012d00
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000ba7d
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10010ef9
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ba7d
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1001046f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000dc7c
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_100105b9
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1001046f
pop ecx
pop ecx
pop ebp
retn
sub_100105d9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1001067c
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
pop ebp
retn
sub_100106af
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10010767
push 0xc
push r--data
call sub_10010280
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000cfe1
push 0x1e
call sub_1000ce32
push 0xff
call sub_1000f856
push 0x18
call sub_1000faf1
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_100102c5
retn
push edi
call sub_1000c7aa
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000c7aa
pop ecx
call sub_1000e2a3
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010820
mov eax [ ebp - 0x1c ]
sub_10010829
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10010767
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000fad3
sub_1001087a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_100108be
push 0x20
push r--data
call sub_10010280
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000dc7c
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_100102c5
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1001087a
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000faae
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_10010829
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000db45
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010a25
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10010a61
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1000db45
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ba7d
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10010bcd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000e2a3
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000e2a3
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_1000e251
mov eax esi
sub_10010c42
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_1000e2a3
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_1000e2a3
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_1000e251
mov eax esi
jmp r-xdata
sub_10010d0f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10010d2a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000e2a3
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000e2a3
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_1000e251
mov eax esi
sub_10010d8d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_10010dcc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000c7aa
pop ecx
sub_10010df0
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10010e80
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_100130a5
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_100130c4
jmp r-xdata
sub_10010e80
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000ba7d
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10010df0
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10010ee2
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10010f12
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10010f50
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_100130c7
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_10010fca
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10010dcc
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_1000c7e4
pop ecx
cmp eax ebx
je r-xdata
call sub_10012f60
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10010dcc
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_1000c7e4
pop ecx
cmp eax ebx
je r-xdata
call sub_10012f60
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_100111b1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10010fca
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100111f7
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ba7d
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10010f50
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10010dcc
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000c7e4
pop ecx
cmp eax ebx
je r-xdata
call sub_10012f60
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_100112de
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_100111f7
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001131e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000c7aa
push [ esi + 0x8 ]
call sub_1000c7aa
push [ esi + 0xc ]
call sub_1000c7aa
push [ esi + 0x10 ]
call sub_1000c7aa
push [ esi + 0x14 ]
call sub_1000c7aa
push [ esi + 0x18 ]
call sub_1000c7aa
push [ esi ]
call sub_1000c7aa
push [ esi + 0x20 ]
call sub_1000c7aa
push [ esi + 0x24 ]
call sub_1000c7aa
push [ esi + 0x28 ]
call sub_1000c7aa
push [ esi + 0x2c ]
call sub_1000c7aa
push [ esi + 0x30 ]
call sub_1000c7aa
push [ esi + 0x34 ]
call sub_1000c7aa
push [ esi + 0x1c ]
call sub_1000c7aa
push [ esi + 0x38 ]
call sub_1000c7aa
push [ esi + 0x3c ]
call sub_1000c7aa
add esp 0x40
push [ esi + 0x40 ]
call sub_1000c7aa
push [ esi + 0x44 ]
call sub_1000c7aa
push [ esi + 0x48 ]
call sub_1000c7aa
push [ esi + 0x4c ]
call sub_1000c7aa
push [ esi + 0x50 ]
call sub_1000c7aa
push [ esi + 0x54 ]
call sub_1000c7aa
push [ esi + 0x58 ]
call sub_1000c7aa
push [ esi + 0x5c ]
call sub_1000c7aa
push [ esi + 0x60 ]
call sub_1000c7aa
push [ esi + 0x64 ]
call sub_1000c7aa
push [ esi + 0x68 ]
call sub_1000c7aa
push [ esi + 0x6c ]
call sub_1000c7aa
push [ esi + 0x70 ]
call sub_1000c7aa
push [ esi + 0x74 ]
call sub_1000c7aa
push [ esi + 0x78 ]
call sub_1000c7aa
push [ esi + 0x7c ]
call sub_1000c7aa
add esp 0x40
push [ esi + 0x80 ]
call sub_1000c7aa
push [ esi + 0x84 ]
call sub_1000c7aa
push [ esi + 0x88 ]
call sub_1000c7aa
push [ esi + 0x8c ]
call sub_1000c7aa
push [ esi + 0x90 ]
call sub_1000c7aa
push [ esi + 0x94 ]
call sub_1000c7aa
push [ esi + 0x98 ]
call sub_1000c7aa
push [ esi + 0x9c ]
call sub_1000c7aa
push [ esi + 0xa0 ]
call sub_1000c7aa
push [ esi + 0xa4 ]
call sub_1000c7aa
push [ esi + 0xa8 ]
call sub_1000c7aa
push [ esi + 0xbc ]
call sub_1000c7aa
push [ esi + 0xc0 ]
call sub_1000c7aa
push [ esi + 0xc4 ]
call sub_1000c7aa
push [ esi + 0xc8 ]
call sub_1000c7aa
push [ esi + 0xcc ]
call sub_1000c7aa
add esp 0x40
push [ esi + 0xd0 ]
call sub_1000c7aa
push [ esi + 0xb8 ]
call sub_1000c7aa
push [ esi + 0xd8 ]
call sub_1000c7aa
push [ esi + 0xdc ]
call sub_1000c7aa
push [ esi + 0xe0 ]
call sub_1000c7aa
push [ esi + 0xe4 ]
call sub_1000c7aa
push [ esi + 0xe8 ]
call sub_1000c7aa
push [ esi + 0xec ]
call sub_1000c7aa
push [ esi + 0xd4 ]
call sub_1000c7aa
push [ esi + 0xf0 ]
call sub_1000c7aa
push [ esi + 0xf4 ]
call sub_1000c7aa
push [ esi + 0xf8 ]
call sub_1000c7aa
push [ esi + 0xfc ]
call sub_1000c7aa
push [ esi + 0x100 ]
call sub_1000c7aa
push [ esi + 0x104 ]
call sub_1000c7aa
push [ esi + 0x108 ]
call sub_1000c7aa
add esp 0x40
push [ esi + 0x10c ]
call sub_1000c7aa
push [ esi + 0x110 ]
call sub_1000c7aa
push [ esi + 0x114 ]
call sub_1000c7aa
push [ esi + 0x118 ]
call sub_1000c7aa
push [ esi + 0x11c ]
call sub_1000c7aa
push [ esi + 0x120 ]
call sub_1000c7aa
push [ esi + 0x124 ]
call sub_1000c7aa
push [ esi + 0x128 ]
call sub_1000c7aa
push [ esi + 0x12c ]
call sub_1000c7aa
push [ esi + 0x130 ]
call sub_1000c7aa
push [ esi + 0x134 ]
call sub_1000c7aa
push [ esi + 0x138 ]
call sub_1000c7aa
push [ esi + 0x13c ]
call sub_1000c7aa
push [ esi + 0x140 ]
call sub_1000c7aa
push [ esi + 0x144 ]
call sub_1000c7aa
push [ esi + 0x148 ]
call sub_1000c7aa
add esp 0x40
push [ esi + 0x14c ]
call sub_1000c7aa
push [ esi + 0x150 ]
call sub_1000c7aa
push [ esi + 0x154 ]
call sub_1000c7aa
push [ esi + 0x158 ]
call sub_1000c7aa
push [ esi + 0x15c ]
call sub_1000c7aa
push [ esi + 0x160 ]
call sub_1000c7aa
add esp 0x18
sub_10011695
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
push esi
call sub_1000c7aa
pop ecx
sub_100116fe
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000c7aa
pop ecx
push esi
call sub_1000c7aa
pop ecx
sub_100117fc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
test eax eax
jle r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
pop ebp
retn
push eax
push [ ebp + 0x10 ]
call sub_10013181
pop ecx
pop ecx
sub_1001182b
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax 0xffff
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
xor eax eax
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
movzx eax [ ebp - 0x4 ]
and [ ebp - 0x4 ] eax
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
sub_10011880
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100118d0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10011954 ]
jmp [ ecx * 4 + jump_table_100119d4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10011a40 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_10011bdc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10011ae0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10011bdc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10011a40 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10011bdc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10011a40 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10011a40 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10011a40 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10011bdc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10011bdc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10011bdc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10011c40
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10011c80
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10011ccb
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_1000bb92
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10011c80
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_100112de
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10011d83
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_10013227
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000e2c9
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_10011e08
push 0x14
push r--data
call sub_10010280
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_100102c5
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_10013290
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011d83
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011ee8
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_10011ef2
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_100134d0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_1000e2b6
mov [ eax ] edi
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ba7d
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
jmp r-xdata
push esi
call sub_1001270c
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_10011d83
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1000dcf5
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_1000e2a3
mov [ eax ] 0x1c
call sub_1000e2b6
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_1000e2c9
pop ecx
jmp r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10011cb8
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_10013356
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_100134ae
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_100134ae
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_10013356
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_100125ef
push 0x10
push r--data
call sub_10010280
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100102c5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10013290
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_10011ef2
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100126bb
mov eax [ ebp - 0x1c ]
sub_100126c3
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_1000faf1
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_1001270c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_10012768
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000fb36
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000fb36
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10012839
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_10010829
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1001287a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_10010829
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_100128ac
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10010750
pop ecx
pop ebp
retn
sub_100128e8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_10010750
pop ecx
pop ebp
retn
sub_10012917
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
pop ebp
retn
sub_1001293d
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10012976
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000e2a3
push 0x16
pop esi
mov [ eax ] esi
call sub_1000e251
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x2a
call sub_1000e2a3
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000e2a3
push 0x22
pop esi
mov [ eax ] esi
call sub_1000e251
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_10010f50
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_10010f50
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10012af0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10012b90
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10012c70
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10012cb0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10012d00
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_100102e0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10012c70
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10012cb0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10012dbc
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_1000e2a3
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_1000cd44
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_10012e3e
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000c7e4
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000c7aa
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_1000cd44
pop ecx
call sub_1000e2a3
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_1000e2a3
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e261
pop ecx
mov [ esi ] eax
push esi
call sub_1000cd44
pop ecx
test eax eax
je r-xdata
call sub_1000e2a3
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e261
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10012eeb
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10012f90
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10012fb0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000ba7d
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10012ff5
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10012ff5
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10012fb0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100130a5
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100130c4
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1001309c
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_100130a5
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_100130c7
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_10013181
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
add ecx 0x2
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_100131a1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10013227
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_10013290
push 0xc
push r--data
call sub_10010280
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_100102c5
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013326
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1001332f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10013356
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_10013733
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_10013398
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000bb92
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_10011c80
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000e2a3
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_100134d0
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_100134fb
push 0x10
push r--data
call sub_10010280
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001358e
mov eax [ ebp - 0x1c ]
call sub_100102c5
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_100137d6
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_1000c7aa
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_10013597
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10012917
pop ecx
push eax
call sub_100125ef
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_100135ff
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10013597
pop ecx
test eax eax
je r-xdata
push esi
call sub_10013647
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10012917
push eax
call sub_1001384a
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10013647
push 0x14
push r--data
call sub_10010280
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_10010829
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013718
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_100102c5
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1001287a
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_100136e9
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_100135ff
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_100135ff
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10013769
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10013597
push esi
mov edi eax
call sub_10013a83
push esi
call sub_10012917
push eax
call sub_100139bf
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_1000c7aa
and [ esi + 0x1c ] 0x0
pop ecx
sub_100137d6
push 0xc
push r--data
call sub_10010280
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x16
call sub_1000e251
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10012839
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10013769
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013842
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_100102c5
retn
mov eax [ ebp - 0x1c ]
sub_1001384a
push 0x10
push r--data
call sub_10010280
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100102c5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10013290
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_10013227
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001391b
mov eax [ ebp - 0x1c ]
call sub_1000e2b6
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_10013923
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10013227
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000e2c9
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_10013227
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10013227
push 0x1
mov edi eax
call sub_10013227
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_100131a1
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_100139bf
push 0x10
push r--data
call sub_10010280
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e2b6
and [ eax ] 0x0
call sub_1000e2a3
mov [ eax ] 0x9
call sub_1000e251
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100102c5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10013290
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e2a3
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_10013923
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013a7b
mov eax [ ebp - 0x1c ]
sub_10013a83
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000c7aa
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10013ad6
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_1000be2f
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_1000cd6c
int3
sub_10013b23
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_1000be2f
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_1000cd6c
int3
sub_10013b70
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000be8b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
pop ecx
sub_10013b98
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_10013bd1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_10013c25
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10014b6e
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_10013c5b
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_1000ba7d
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_10014b6e
add esp 0x20
pop esi
pop ebp
retn
sub_10013c8e
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_10013d65
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1000dcf5
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_10013d65
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_1000ba7d
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_10014b6e
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_10013c8e
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10013bd1
pop ebx
leave
retn
sub_10013e04
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_10012c10
call sub_10012c10
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_10013e77
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1000dcf5
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1000dcf5
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_10013ea3
mov edi edi
push ebp
mov ebp esp
call sub_1000dcf5
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_10013eca
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000dcf5
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1000dcf5
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1000dcf5
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_10012c10
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_10013f1c
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_10013c5b
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_10014c60
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_10013f87
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000be8b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000ba8c
pop ecx
sub_10013fae
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000d0a0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_1001400d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1000dcf5
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1000dcf5
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1000dcf5
and [ eax + 0x90 ] 0x0
jmp sub_10012bc4
sub_1001405c
push 0x10
push r--data
call sub_10010280
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001411e
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1000dcf5
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_100102c5
retn
call sub_10012c10
call sub_10012c10
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_10014c60
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_10014138
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1000dcf5
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_1001417d
push 0x8
push r--data
call sub_10010280
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_100102c5
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_10013bca
mov [ ebp - 0x4 ] 0xfffffffe
sub_100141d2
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_100141fb
mov edi edi
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp edi eax
jne r-xdata
mov [ ebp - 0x1 ] al
mov [ ebp - 0xc ] eax
cmp [ edi ] eax
jle r-xdata
call sub_10012c10
mov al [ ebp - 0x1 ]
leave
retn
push ebx
mov [ ebp - 0x8 ] eax
push esi
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call sub_10013fae
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
inc [ ebp - 0xc ]
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] 0x10
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
jmp r-xdata
pop esi
pop ebx
sub_100142ba
push 0x2c
push r--data
call sub_10010280
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_10013e77
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1000dcf5
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1000dcf5
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1000dcf5
mov [ eax + 0x88 ] esi
call sub_1000dcf5
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_10013f1c
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_100143e0
mov eax [ ebp - 0x1c ]
call sub_100102c5
retn
sub_10014353
mov esp [ ebp - 0x18 ]
call sub_1000dcf5
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001405c
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_100143e0
mov eax [ ebp - 0x1c ]
call sub_100102c5
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_100143e0
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_10013eca
pop ecx
call sub_1000dcf5
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1000dcf5
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_10013ea3
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_1001417d
pop ecx
pop ecx
sub_10014456
push 0xc
push r--data
call sub_10010280
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10012c10
push ebx
push esi
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10014ce2
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_1000bef0
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_10014ce2
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_100141d2
pop ecx
pop ecx
push eax
push esi
call sub_1000bef0
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_100102c5
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_100141d2
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_100145d5
push 0x8
push r--data
call sub_10010280
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_100141d2
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10013bca
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_10014456
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100102c5
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_100141d2
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10013bca
jmp r-xdata
sub_10014667
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_100145d5
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_10013b98
call sub_10013bd1
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001405c
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_100142ba
add esp 0x28
test eax eax
je r-xdata
sub_100146d5
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1000dcf5
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1000dcf5
lea edi [ eax + 0x80 ]
call sub_1000db45
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_10013e04
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_10012c10
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10013c8e
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10014667
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_100147dc
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_10012c10
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1000dcf5
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10012c10
call sub_10012bc4
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100146d5
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1000dcf5
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1000dcf5
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1000dcf5
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_10014ce2
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_10013e04
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_10012c10
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_1001417d
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1000dcf5
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1000dcf5
mov edi [ eax + 0x94 ]
call sub_1000dcf5
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_100141fb
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_100141fb
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_1000bb72
test al al
jne r-xdata
call sub_10012c10
cmp eax 0x19930522
jne r-xdata
call sub_1000dcf5
call sub_1000dcf5
call sub_1000dcf5
mov [ eax + 0x88 ] esi
call sub_1000dcf5
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_10013fae
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_1001417d
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_1000be2f
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_1000cd6c
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_10014667
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_10013bd1
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001405c
add esp 0x10
push [ esi + 0x1c ]
call sub_10014271
sub_10014b6e
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000dcf5
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_100147dc
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001405c
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10014c60
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1001309c
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1001309c
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_10014cac
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10001144
mov eax 0x1
retn
Assist_Free
jmp sub_100010f0
Assist_Cleanup
push 0x4
call sub_1000ba97
add esp 0x4
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
retn
sub_10001290
push 0x1
call [ Sleep@IAT ]
retn
sub_100012a0
mov ecx [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
jmp edx
sub_10001380
mov [ ecx ] r--data
jmp sub_1000be8b
sub_100013c0
mov ecx [ eax ]
test ecx ecx
je r-xdata
retn
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
sub_10003380
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
retn
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
sub_100033e0
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
retn
mov eax [ esi ]
push eax
call sub_1000ba8c
add esp 0x4
sub_10003ef0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_1000bebd
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10003f10
mov [ ecx ] r--data
retn
sub_10004030
push ebp
mov ebp esp
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x8 ]
pop ebp
jmp eax
sub_10004180
push ebp
mov ebp esp
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov eax [ eax + 0x1c ]
push edx
mov edx [ ebp + 0xc ]
push edx
call eax
pop ebp
retn 0xc
sub_10004320
mov [ ecx ] r--data
retn
sub_10004360
retn
sub_10004430
push ebp
mov ebp esp
add ecx 0x4
push ecx
mov ecx [ ebp + 0x8 ]
call sub_10005ea0
pop ebp
retn 0x4
sub_10004710
mov eax [ ecx + 0x48 ]
retn
sub_10004ca0
push ebx
mov ebx eax
call sub_10004cc0
mov eax [ ebx ]
push eax
call sub_1000ba8c
add esp 0x4
pop ebx
retn
sub_10006140
mov ecx [ eax ]
push ecx
call sub_1000ba8c
pop ecx
retn
sub_10006600
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ ebp + 0x8 ]
push eax
call sub_10005ea0
pop ebp
retn 0x4
sub_10006620
mov eax [ ecx + 0x4 ]
mov eax [ eax + 0x44 ]
retn
sub_10006990
mov eax [ ecx + 0x4 ]
mov eax [ eax + 0x20 ]
retn
sub_100069d0
mov eax [ ecx + 0x4 ]
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
retn
mov eax [ eax ]
sub_100069e0
mov eax [ ecx + 0x4 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
push eax
call sub_1000c706
add esp 0x4
retn
mov eax [ eax ]
sub_10006b30
mov [ ecx ] r--data
retn
sub_10006dc0
mov eax [ ecx + 0x8 ]
push 0x0
push 0x0
push 0x2
push eax
call [ PostMessageW@IAT ]
retn
sub_10007190
mov [ ecx ] r--data
retn
sub_10007820
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push eax
call [ DeleteFileW@IAT ]
dec eax
neg eax
sbb eax eax
inc eax
pop ebp
retn 0x4
sub_10007970
cmp [ ecx + 0x34 ] 0x8
lea eax [ ecx + 0x20 ]
jb r-xdata
retn
mov eax [ eax ]
sub_10007980
cmp [ ecx + 0x18 ] 0x8
lea eax [ ecx + 0x4 ]
jb r-xdata
retn
mov eax [ eax ]
sub_10007990
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
call sub_10007600
pop ebx
pop ebp
retn 0xc
sub_100081e0
mov eax [ ecx + 0xc ]
test eax eax
jne r-xdata
retn
mov eax [ rw-data ]
mov [ ecx + 0xc ] eax
sub_10008280
mov eax [ ecx + 0x8 ]
test eax eax
jne r-xdata
retn
mov eax 0xaf75ff01
mov [ ecx + 0x8 ] eax
sub_10008490
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
pop esi
retn
call sub_100081f0
mov [ esi + 0x10 ] eax
sub_100084e0
mov [ ecx ] r--data
retn
sub_100084f0
mov eax [ ecx + 0x4 ]
imul eax eax 0x660d
sub eax 0xca1
and eax 0xffff
mov [ ecx + 0x4 ] eax
retn
sub_10008540
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x2c ]
jmp edx
sub_10008550
push ebp
mov ebp esp
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x30 ]
pop ebp
jmp eax
sub_10008560
push ebp
mov ebp esp
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x34 ]
pop ebp
jmp eax
sub_10008e20
xor eax eax
retn 0xc
sub_10008e30
mov [ ecx ] r--data
retn
sub_10008e70
mov eax 0x1
retn
sub_10009370
xor eax eax
retn
sub_10009d57
mov eax [ ebp - 0x14 ]
push eax
call sub_1000ba8c
add esp 0x4
push 0x0
push 0x0
call sub_1000cd6c
int3
sub_1000a080
mov [ ecx ] r--data
retn
sub_1000a460
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
retn
push eax
call sub_1000ba8c
add esp 0x4
sub_1000a58e
mov ecx [ ebp - 0x14 ]
push ecx
call sub_1000ba8c
add esp 0x4
push 0x0
push 0x0
call sub_1000cd6c
int3
sub_1000a740
mov [ ecx ] r--data
retn
sub_1000b4f0
mov [ ecx ] r--data
retn
sub_1000ba8c
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000c7aa
sub_1000bb17
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push 0x19
call sub_1000ce32
push 0x1
push 0x0
call sub_1000cdeb
add esp 0xc
jmp sub_1000cdb8
call eax
sub_1000bb41
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1000d029
pop ecx
retn
sub_1000bda7
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_1000bdc4
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_1000be11
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_1000c7aa
pop ecx
sub_1000be8b
mov [ ecx ] r--data
jmp sub_1000be11
sub_1000c2e6
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000ba8c
sub_1000c482
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000ba97
sub_1000c706
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1000f7ce
add esp 0xc
pop ebp
retn
sub_1000c951
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1000db8b
sub_1000caaf
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_100105b9
pop ecx
pop ecx
retn
sub_1000cd18
call sub_1000f877
retn
sub_1000cd1e
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000cce2
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_1000cd35
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000d01a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000d090
push 0xe
call sub_10010750
pop ecx
retn
sub_1000d3e6
push 0xd
call sub_10010750
pop ecx
retn
sub_1000d7b5
push 0xd
call sub_10010750
pop ecx
retn
sub_1000d7ee
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000d654
pop ecx
mov [ rw-data ] 0x1
sub_1000db39
push 0xc
call sub_10010750
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000db4e
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000dc6a
push 0xd
call sub_10010750
pop ecx
retn
sub_1000dc73
push 0xc
call sub_10010750
pop ecx
retn
sub_1000de29
push 0xd
call sub_10010750
pop ecx
retn
sub_1000de35
push 0xc
call sub_10010750
pop ecx
retn
sub_1000e0c7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000e4de
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1000f7f9
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1000f817
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1000f856
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000f82b
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
int3
sub_1000f86e
push 0x8
call sub_10010829
pop ecx
retn
sub_1000f877
push 0x8
call sub_10010750
pop ecx
retn
sub_1000fa99
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10010750
pop ecx
sub_1000faae
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000f96e
add esp 0xc
pop ebp
retn
sub_1000fac4
push 0x1
push 0x0
push 0x0
call sub_1000f96e
add esp 0xc
retn
sub_1000fad3
mov edi edi
push ebp
mov ebp esp
call sub_1000cfe1
push [ ebp + 0x8 ]
call sub_1000ce32
pop ecx
push 0xff
call sub_1000faae
int3
sub_100102c5
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10010674
and [ rw-data ] 0x0
retn
sub_10010750
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10010820
push 0xa
call sub_10010750
pop ecx
retn
sub_1001085c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_100108b1
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10010a25
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10010750
pop ecx
sub_10010ec6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10010df0
add esp 0xc
pop ebp
retn 0x4
sub_10010ef9
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_100130a5
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10010f2b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10010df0
add esp 0xc
pop ebp
retn 0x8
sub_10011cb8
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10011c80
pop ecx
pop ecx
pop ebp
retn
sub_10011ee8
push [ ebp + 0x8 ]
call sub_1001332f
pop ecx
retn
sub_100126bb
push ebx
call sub_1001332f
pop ecx
retn
sub_10012762
mov eax rw-data
retn
sub_10012819
call sub_10013721
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000c7aa
pop ecx
retn
call sub_100134fb
sub_10012960
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_10012acb
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012976
add esp 0x14
pop ebp
retn
sub_10012bc4
push 0x8
push r--data
call sub_10010280
call sub_1000dcf5
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1000cdb8
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10012be4
xor eax eax
inc eax
retn
sub_10012bfd
call sub_1000dcf5
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_10012bc4
call eax
sub_10012c34
xor eax eax
inc eax
retn
sub_10012c48
push sub_10012bc4
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_10012c59
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10012d8b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_10012f3e
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10012eeb
add esp 0x10
pop ebp
retn
sub_10012f60
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100134d0
sub_10012f76
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100134d0
sub_10013079
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10012fb0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_100130c4
call eax
retn
sub_10013326
push 0xa
call sub_10010750
pop ecx
retn
sub_100134ae
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10013398
add esp 0x10
pop ebp
retn
sub_1001358e
push 0x1
call sub_10010750
pop ecx
retn
sub_100136e9
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100128e8
pop ecx
pop ecx
retn
sub_10013718
push 0x1
call sub_10010750
pop ecx
retn
sub_10013721
push 0x1
call sub_10013647
pop ecx
retn
sub_1001372a
push 0x2
call sub_1000fad3
sub_10013733
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_10013752
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_10013842
push esi
call sub_100128ac
pop ecx
retn
sub_1001391b
push ebx
call sub_1001332f
pop ecx
retn
sub_10013a7b
push ebx
call sub_1001332f
pop ecx
retn
j_sub_1000be8b
jmp sub_1000be8b
sub_10013ab9
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000bebd
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10013b06
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000bebd
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10013b53
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000bebd
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10013f7c
mov [ ecx ] r--data
jmp sub_1000be8b
sub_100140da
push [ ebp - 0x14 ]
call sub_1001400d
pop ecx
retn
sub_1001411e
call sub_1000dcf5
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1000dcf5
dec [ eax + 0x90 ]
sub_100141c0
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_100141c9
mov esp [ ebp - 0x18 ]
call sub_10012bc4
sub_10014271
push 0x4
mov eax sub_10015cc6
call sub_10014cac
call sub_1000dcf5
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10012bfd
call sub_10012c10
sub_1001434a
mov eax [ ebp - 0x14 ]
call sub_10014138
retn
sub_100145c1
xor eax eax
inc eax
retn
sub_100145c5
mov esp [ ebp - 0x18 ]
call sub_10012bc4
sub_1001465a
xor eax eax
inc eax
retn
sub_1001465e
mov esp [ ebp - 0x18 ]
call sub_10012bc4
sub_10014b51
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000bebd
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10014ce2
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_10014d00
mov eax [ ebp + 0x8 ]
jmp sub_10006140
sub_10014d08
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014d30
mov ecx [ ebp - 0x10 ]
jmp sub_1000b4f0
sub_10014d38
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014d60
mov ecx [ ebp - 0x10 ]
jmp sub_1000a080
sub_10014d68
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_1000a460
sub_10014d73
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014d90
lea ecx [ ebp - 0x18 ]
jmp sub_100084e0
sub_10014d98
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x1c ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014dc0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014de0
mov ecx [ ebp + 0x8 ]
jmp sub_1000a080
sub_10014de8
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_1000a460
sub_10014df3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014e10
mov ecx [ ebp - 0x10 ]
jmp sub_10008e30
sub_10014e18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014e40
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10003380
sub_10014e4b
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10003380
sub_10014e56
mov eax [ ebp - 0x14 ]
jmp sub_10006140
sub_10014e5e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014e80
mov ecx [ ebp - 0x10 ]
jmp sub_10003f10
sub_10014e88
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014eb0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014ed0
mov ecx [ ebp - 0x10 ]
jmp sub_10008e30
sub_10014ed8
mov esi [ ebp - 0x10 ]
add esi 0x38
jmp sub_10003380
sub_10014ee3
mov esi [ ebp - 0x10 ]
add esi 0x54
jmp sub_100033e0
sub_10014eee
mov esi [ ebp - 0x10 ]
add esi 0x70
jmp sub_100033e0
sub_10014ef9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014f20
mov ecx [ ebp - 0x10 ]
jmp sub_10006b30
sub_10014f28
mov esi [ ebp - 0x10 ]
add esi 0xc
jmp sub_100033e0
sub_10014f33
mov esi [ ebp - 0x10 ]
add esi 0x28
jmp sub_1000a460
sub_10014f3e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014f60
mov esi [ ebp - 0x18 ]
add esi 0x4
jmp sub_10003380
sub_10014f6b
mov esi [ ebp - 0x18 ]
add esi 0x24
jmp sub_10003380
sub_10014f76
mov eax [ ebp - 0x1c ]
jmp sub_10006140
sub_10014f7e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
j_sub_10004360#6
jmp sub_10004360
sub_10014fa5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014fc0
mov ecx [ ebp - 0x10 ]
jmp sub_10004320
sub_10014fc8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10014ff0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015010
lea eax [ ebp - 0x18 ]
jmp sub_100013c0
sub_10015018
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov esi [ ebp + 0x8 ]
jmp sub_10003380
sub_10015031
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015050
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015058
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015080
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015088
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100150b0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100150d0
mov eax [ ebp + 0x8 ]
jmp sub_10006140
sub_100150d8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015100
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10003380
sub_1001510b
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10003380
sub_10015116
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
j_sub_10004360#5
jmp sub_10004360
sub_10015145
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015160
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov esi [ ebp - 0x50 ]
jmp sub_10003380
sub_10015179
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015181
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015189
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100151b0
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_10003380
sub_100151bb
mov esi [ ebp + 0x8 ]
add esi 0x24
jmp sub_10003380
sub_100151c6
mov eax [ ebp + 0x8 ]
add eax 0x40
push eax
call sub_10005f90
retn
sub_100151d3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
j_sub_10004360#3
jmp sub_10004360
sub_100151f5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015210
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015218
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015240
mov eax [ ebp - 0x10 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_1001524b
mov ecx [ ebp - 0x10 ]
jmp sub_10004320
sub_10015253
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_10005df0
sub_1001525e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015280
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015288
lea esi [ ebp - 0x48 ]
jmp sub_10003380
sub_10015290
lea esi [ ebp - 0x64 ]
jmp sub_10003380
sub_10015298
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100152c0
lea eax [ ebp - 0xcd8 ]
jmp sub_100013c0
sub_100152cb
mov eax [ ebp - 0xccc ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0xccc ] 0xfffffffe
mov esi [ ebp - 0xcd4 ]
jmp sub_100033e0
sub_100152ed
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xcd4 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015320
lea esi [ ebp - 0x69c ]
jmp sub_100033e0
sub_1001532b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x6a0 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
j_sub_10004360#2
jmp sub_10004360
sub_10015365
mov esi [ ebp - 0x10 ]
jmp sub_10003380
sub_1001536d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015390
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
j_sub_10004360
jmp sub_10004360
sub_100153b5
mov esi [ ebp - 0x10 ]
jmp sub_10003380
j_sub_10004360#4
jmp sub_10004360
sub_100153c2
mov esi [ ebp - 0x10 ]
jmp sub_10003380
sub_100153ca
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100153f0
lea esi [ ebp - 0x4c ]
jmp sub_10003380
sub_100153f8
lea esi [ ebp - 0x4c ]
jmp sub_10009a90
sub_10015400
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x54 ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_1000ba7d
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015430
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov esi [ ebp + 0x8 ]
jmp sub_100033e0
sub_10015449
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015470
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015478
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100154a0
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_100154a8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100154d0
lea ecx [ ebp - 0x5c ]
jmp sub_10005df0
sub_100154d8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015500
lea esi [ ebp + 0xc ]
jmp sub_10003380
sub_10015508
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015510
lea esi [ ebp - 0x48 ]
jmp sub_10003380
sub_10015518
lea esi [ ebp - 0x48 ]
jmp sub_10003380
sub_10015520
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015550
mov eax [ ebp - 0x3c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x3c ] 0xfffffffe
mov eax [ ebp - 0x40 ]
jmp sub_10004ca0
sub_10015569
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015571
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015579
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015581
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x4c ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100155b0
lea eax [ ebp - 0x18 ]
jmp sub_10004ca0
sub_100155b8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100155e0
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100155e8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x4c ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015610
lea esi [ ebp - 0x48 ]
jmp sub_100033e0
sub_10015618
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015620
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015650
lea esi [ ebp - 0x48 ]
jmp sub_100033e0
sub_10015658
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_10015660
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015690
lea eax [ ebp - 0x74 ]
jmp sub_100013c0
sub_10015698
lea eax [ ebp - 0x78 ]
jmp sub_100013c0
sub_100156a0
lea eax [ ebp - 0x7c ]
jmp sub_100013c0
sub_100156a8
lea esi [ ebp - 0x48 ]
jmp sub_100033e0
sub_100156b0
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100156b8
lea eax [ ebp - 0x68 ]
jmp sub_100013c0
sub_100156c0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x80 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100156f0
lea eax [ ebp - 0x10 ]
jmp sub_100013c0
sub_100156f8
lea eax [ ebp - 0x14 ]
jmp sub_100013c0
sub_10015700
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015720
mov eax [ ebp - 0x38 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x38 ] 0xfffffffe
mov esi [ ebp - 0x3c ]
jmp sub_100033e0
sub_10015739
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015741
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015770
mov ecx [ ebp + 0x8 ]
jmp sub_1000a740
sub_10015778
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_100033e0
sub_10015783
mov esi [ ebp + 0x8 ]
add esi 0x20
jmp sub_100033e0
sub_1001578e
mov esi [ ebp + 0x8 ]
add esi 0x3c
jmp sub_100033e0
sub_10015799
mov esi [ ebp + 0x8 ]
add esi 0x58
jmp sub_100033e0
sub_100157a4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100157c0
mov eax [ ebp - 0x10 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_100157cb
mov ecx [ ebp - 0x10 ]
jmp sub_10008e30
sub_100157d3
mov esi [ ebp - 0x10 ]
add esi 0x38
jmp sub_10003380
sub_100157de
mov esi [ ebp - 0x10 ]
add esi 0x54
jmp sub_100033e0
sub_100157e9
mov esi [ ebp - 0x10 ]
add esi 0x70
jmp sub_100033e0
sub_100157f4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015810
lea esi [ ebp - 0x1204 ]
jmp sub_100033e0
sub_1001581b
lea esi [ ebp - 0x11e8 ]
jmp sub_100033e0
sub_10015826
lea esi [ ebp - 0x11cc ]
jmp sub_10003380
sub_10015831
lea esi [ ebp - 0x1220 ]
jmp sub_10003380
sub_1001583c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1290 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015870
mov ecx [ ebp + 0x8 ]
jmp sub_10007190
sub_10015878
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_100033e0
sub_10015883
mov esi [ ebp + 0x8 ]
add esi 0x20
jmp sub_100033e0
sub_1001588e
mov esi [ ebp + 0x8 ]
add esi 0x3c
jmp sub_100033e0
sub_10015899
mov esi [ ebp + 0x8 ]
add esi 0x58
jmp sub_100033e0
sub_100158a4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100158c0
mov eax [ ebp - 0x684 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x684 ] 0xfffffffe
mov esi [ ebp - 0x688 ]
jmp sub_100033e0
sub_100158e2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x680 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015910
mov eax [ ebp - 0xf20 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_1001591e
mov ecx [ ebp - 0xf20 ]
jmp sub_10006b30
sub_10015929
mov esi [ ebp - 0xf20 ]
add esi 0xc
jmp sub_100033e0
sub_10015937
mov esi [ ebp - 0xf20 ]
add esi 0x28
jmp sub_1000a460
sub_10015945
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xf24 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015970
mov eax [ ebp - 0x10 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_1001597b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_100159a0
lea esi [ ebp + 0xc ]
jmp sub_10003380
sub_100159a8
lea esi [ ebp - 0x48 ]
jmp sub_10003380
sub_100159b0
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100159b8
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100159c0
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100159c8
lea esi [ ebp - 0x2c ]
jmp sub_10003380
sub_100159d0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x80 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015a00
lea eax [ ebp - 0x20 ]
jmp sub_100013c0
sub_10015a08
lea eax [ ebp - 0x24 ]
jmp sub_100013c0
sub_10015a10
lea eax [ ebp - 0x28 ]
jmp sub_100013c0
sub_10015a18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015a40
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015a48
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015a70
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015a78
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015aa0
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015aa8
mov eax [ ebp - 0x30 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015ab3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015ae0
lea eax [ ebp - 0x24 ]
jmp sub_100013c0
sub_10015ae8
lea eax [ ebp - 0x28 ]
jmp sub_100013c0
sub_10015af0
lea eax [ ebp - 0x2c ]
jmp sub_100013c0
sub_10015af8
lea eax [ ebp - 0x30 ]
jmp sub_100013c0
sub_10015b00
lea eax [ ebp - 0x34 ]
jmp sub_100013c0
sub_10015b08
lea eax [ ebp - 0x38 ]
jmp sub_100013c0
sub_10015b10
lea eax [ ebp - 0x34 ]
jmp sub_100013c0
sub_10015b18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015b40
mov eax [ ebp - 0x4c ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015b4b
mov eax [ ebp - 0x4c ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015b56
lea esi [ ebp - 0x48 ]
jmp sub_100033e0
sub_10015b5e
lea esi [ ebp - 0x2c ]
jmp sub_100033e0
sub_10015b66
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000ba7d
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015b90
mov eax [ ebp - 0x34 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015b9b
lea eax [ ebp - 0x34 ]
jmp sub_100013c0
sub_10015ba3
lea eax [ ebp - 0x38 ]
jmp sub_100013c0
sub_10015bab
lea eax [ ebp - 0x28 ]
jmp sub_100013c0
sub_10015bb3
lea eax [ ebp - 0x2c ]
jmp sub_100013c0
sub_10015bbb
lea eax [ ebp - 0x3c ]
jmp sub_100013c0
sub_10015bc3
lea eax [ ebp - 0x40 ]
jmp sub_100013c0
sub_10015bcb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x48 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015bf0
lea eax [ ebp - 0x30 ]
jmp sub_100013c0
sub_10015bf8
lea eax [ ebp - 0x34 ]
jmp sub_100013c0
sub_10015c00
lea eax [ ebp - 0x38 ]
jmp sub_100013c0
sub_10015c08
lea eax [ ebp - 0x3c ]
jmp sub_100013c0
sub_10015c10
lea eax [ ebp - 0x40 ]
jmp sub_100013c0
sub_10015c18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015c40
lea eax [ ebp - 0x1c ]
jmp sub_100013c0
sub_10015c48
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x34 ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015c70
mov eax [ ebp - 0x10 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015c7b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015ca0
mov eax [ ebp - 0x10 ]
push eax
call sub_1000ba8c
pop ecx
retn
sub_10015cab
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015cc6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ba7d
mov eax r--data
jmp sub_10013c25
sub_10015cf0
xor eax eax
call sub_1000a6b0
mov [ rw-data ] eax
retn
sub_10015d00
xor eax eax
call sub_1000a630
mov [ rw-data ] eax
retn
sub_10015d10
mov eax 0x4
call sub_1000a6b0
mov [ rw-data ] eax
retn
sub_10015d20
mov eax 0x5
call sub_1000a6b0
mov [ rw-data ] eax
retn
sub_10015d30
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_1000be8b
