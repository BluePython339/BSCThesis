sub_401050
push 0xffffffff
push sub_40601b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x210
push ebx
push ebp
mov [ esp + 0xc ] ecx
push esi
push edi
lea ecx [ esp + 0x18 ]
call sub_402e20
mov esi [ esp + 0x234 ]
mov [ esp + 0x228 ] 0x0
mov eax esi
mov ebx esi
cdq
and edx 0xf
add eax edx
sar eax 0x4
and ebx 0x8000000f
mov [ esp + 0x10 ] eax
jns r-xdata
je r-xdata
dec ebx
or ebx 0xfffffff0
inc ebx
lea edi [ esi + 0x1 ]
push edi
call Ordinal_MFC42_823
mov ecx edi
mov ebp eax
mov edx ecx
xor eax eax
mov edi ebp
add esp 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx esi
mov esi [ esp + 0x230 ]
mov eax ecx
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
test ebx ebx
[ edi ] [ esi ]
je r-xdata
mov ecx 0x10
sub ecx ebx
add esi ecx
inc eax
mov [ esp + 0x234 ] esi
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x14 ]
push 0x100
add eax 0x4
lea ecx [ esp + 0x1c ]
push eax
call sub_403170
mov ebx [ esp + 0x10 ]
mov esi [ esp + 0x238 ]
test ebx ebx
jle r-xdata
mov ecx 0x10
sub ecx ebx
test ecx ecx
jle r-xdata
mov eax [ esi ]
mov edx [ esp + 0x23c ]
shl ebx 0x4
sub eax ebx
lea ecx [ esp + 0x18 ]
mov [ esi ] eax
mov [ edx ] ebx
mov [ esp + 0x228 ] 0xffffffff
call sub_402e50
mov ecx [ esp + 0x220 ]
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x21c
retn 0x10
mov edi ebx
mov eax [ esp + 0x234 ]
lea edx [ ebx + ebp ]
lea edi [ edx + eax - 0x10 ]
mov edx ecx
mov eax 0x20202020
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx [ esi ]
push ecx
push ebp
lea ecx [ esp + 0x20 ]
call sub_4034f0
mov ecx [ esi ]
add ebp 0x10
add ecx 0x10
dec edi
mov [ esi ] ecx
jne r-xdata
sub_4011c0
push 0xffffffff
push sub_40603b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x208
push esi
mov esi ecx
push edi
lea ecx [ esp + 0x8 ]
call sub_402e20
mov eax [ esp + 0x224 ]
add esi 0x4
cdq
and edx 0xf
push 0x100
add eax edx
push esi
mov edi eax
lea ecx [ esp + 0x10 ]
mov [ esp + 0x220 ] 0x0
sar edi 0x4
call sub_403170
mov esi [ esp + 0x228 ]
test edi edi
jle r-xdata
mov eax [ esi ]
mov ecx [ esp + 0x22c ]
shl edi 0x4
sub eax edi
mov [ esp + 0x218 ] 0xffffffff
mov [ esi ] eax
mov [ ecx ] edi
lea ecx [ esp + 0x8 ]
call sub_402e50
mov ecx [ esp + 0x210 ]
pop edi
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x214
retn 0x10
push ebx
mov ebx [ esp + 0x224 ]
push ebp
mov ebp edi
mov eax [ esi ]
lea ecx [ esp + 0x10 ]
push eax
push ebx
call sub_404520
mov ecx [ esi ]
add ebx 0x10
add ecx 0x10
dec ebp
mov [ esi ] ecx
jne r-xdata
pop ebp
pop ebx
sub_401290
push ebx
mov ebx [ esp + 0xc ]
push ebp
cmp ebx 0x100
mov ebp ecx
jle r-xdata
push esi
lea edx [ ebp + 0x4 ]
push edi
mov ecx 0x40
xor eax eax
mov edi edx
mov esi [ esp + 0x14 ]
[ edi ]
mov ecx ebx
mov edi edx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
mov [ ebp + 0x104 ] bl
pop esi
pop ebp
pop ebx
retn 0x8
pop ebp
xor eax eax
pop ebx
retn 0x8
sub_4013c0
sub esp 0x10
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
push edi
mov edi [ esp + 0x30 ]
imul edi ebx
mov edx ebx
mov [ esp + 0x18 ] ecx
neg edx
mov [ esp + 0x1c ] edx
mov edx [ esp + 0x2c ]
mov [ esp + 0x10 ] 0x0
lea eax [ ecx + 0x4 ]
add edi edx
mov [ esp + 0x14 ] 0x4
jmp r-xdata
mov esi [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
imul esi ebx
lea ecx [ ecx + edx * 8 + 0x2c ]
mov ebp ebx
mov edx eax
mov eax [ esp + 0x28 ]
neg ebp
mov [ esp + 0x38 ] ecx
mov [ esp + 0x30 ] edx
add esi eax
mov [ esp + 0x2c ] 0x4
mov eax [ esp + 0x2c ]
add edx 0x2
add esi ebp
dec eax
mov [ esp + 0x30 ] edx
mov [ esp + 0x2c ] eax
jne r-xdata
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
cmp [ edx ] 0x1
jne r-xdata
mov ecx [ esp + 0x14 ]
mov eax edx
mov edx [ esp + 0x1c ]
add edi edx
dec ecx
mov [ esp + 0x14 ] ecx
jne r-xdata
mov eax [ esp + 0x10 ]
mov [ ecx - 0x4 ] esi
mov [ ecx ] edi
inc eax
add ecx 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x38 ] ecx
mov eax [ eax + 0x4 ]
lea edx [ edi + ebx ]
lea ecx [ esi + ebx ]
push edx
push ecx
push edi
push esi
push eax
call [ Rectangle@IAT ]
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x30 ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x20
sub_4014a0
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja r-xdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_401548 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] ecx
sub_401560
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja r-xdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_40160c ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x14 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x4c ] ecx
sub_401650
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
mov eax 0x1
mov [ esi + 0x1a ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_4016b0
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
mov eax 0x1
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0x10 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_401710
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x6 ] ax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x14 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_401770
push esi
mov esi ecx
call sub_401830
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja r-xdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_401814 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x4c ] ecx
sub_4018f0
push 0xffffffff
push sub_406068
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x12c
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
add esp 0x4
mov ecx esi
call Ordinal_MFC42_2621
push 0x4
mov ecx esi
call Ordinal_MFC42_4159
push 0x6c
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x4 ] eax
test eax eax
mov [ esp + 0x138 ] 0x0
je r-xdata
xor eax eax
push r--data
push r--data
push r--data
push 0x80
mov ecx eax
call Ordinal_MFC42_520
jmp r-xdata
mov ecx [ esi + 0x20 ]
push edi
push 0x0
call Ordinal_MFC42_6215
mov esi [ esi + 0x20 ]
mov edx [ esi + 0x20 ]
push edx
call [ UpdateWindow@IAT ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x31 ]
mov [ esp + 0x30 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax 0x1
pop edi
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
xor eax eax
pop esi
mov ecx [ esp + 0x12c ]
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
push eax
mov ecx esi
mov [ esp + 0x13c ] 0xffffffff
call Ordinal_MFC42_986
lea ecx [ esp + 0x8 ]
call Ordinal_MFC42_296
lea eax [ esp + 0x8 ]
mov ecx esi
push eax
mov [ esp + 0x13c ] 0x1
call Ordinal_MFC42_5214
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_5301
test eax eax
jne r-xdata
push 0x408
lea eax [ esp + 0x30 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0xc
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
mov ecx [ esp + 0x130 ]
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
test eax eax
jne r-xdata
add eax 0x7
cmp eax 0x65
jg r-xdata
sub_401ae0
push 0xffffffff
push sub_406088
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
lea ecx [ esp ]
call sub_401a60
lea ecx [ esp ]
mov [ esp + 0x68 ] 0x0
call Ordinal_MFC42_2514
lea ecx [ esp ]
mov [ esp + 0x68 ] 0xffffffff
call Ordinal_MFC42_641
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn
sub_401b90
push 0xffffffff
push sub_4060aa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x54
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je r-xdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_401c30
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_401fa0
push 0xffffffff
push sub_4060ca
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x48
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je r-xdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_402100
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402040
push ebx
push esi
xor ebx ebx
push edi
xor eax eax
mov dl 0x1
mov [ ecx + rw-data ] bl
lea esi [ eax + eax * 4 ]
lea edi [ ecx + eax ]
mov [ edi + esi * 2 + rw-data ] dl
jmp r-xdata
cmp eax 0x18
je r-xdata
inc eax
cmp eax 0x19
jl r-xdata
inc ecx
cmp ecx 0xb
jl r-xdata
xor ecx ecx
pop edi
pop esi
pop ebx
retn
sub_402080
mov eax [ esp + 0x4 ]
cmp eax 0x6
ja r-xdata
xor eax eax
retn
jmp [ eax * 4 + jump_table_4020e0 ]
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
mov eax rw-data
mov [ rw-data ] eax
retn
sub_402100
push esi
mov esi ecx
call Ordinal_MFC42_560
mov [ esi ] r--data
mov [ esi + 0x44 ] 0x0
call sub_402040
call [ rand@IAT ]
and eax 0x80000007
jns r-xdata
mov [ rw-data ] eax
mov eax esi
pop esi
retn
dec eax
or eax 0xfffffff8
inc eax
sub_402180
push ebp
mov ebp esp
push 0xffffffff
push sub_4060eb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x118
push ebx
push esi
push edi
lea ecx [ ebp - 0x124 ]
call sub_401000
mov edi rwxdata
or ecx 0xffffffff
xor eax eax
xor ebx ebx
[ edi ]
not ecx
dec ecx
mov [ ebp - 0x4 ] ebx
push ecx
push rwxdata
lea ecx [ ebp - 0x124 ]
call sub_401290
mov [ ebp - 0x1c ] 0x64
mov [ ebp - 0x1b ] 0x8b
mov [ ebp - 0x1a ] 0x35
mov [ ebp - 0x19 ] 0x30
mov [ ebp - 0x18 ] bl
mov [ ebp - 0x17 ] bl
mov [ ebp - 0x16 ] bl
xor eax eax
inc eax
cmp eax 0x7
jb r-xdata
inc ebx
xor ecx ecx
xor edx edx
mov cl [ eax + rwxdata ]
mov dl [ ebp + eax - 0x1c ]
sub edx ecx
jne r-xdata
push 0x32a6
call Ordinal_MFC42_823
add esp 0x4
lea ecx [ ebp - 0x124 ]
mov esi eax
mov [ ebp - 0x10 ] 0x0
push 0x1953
call sub_4012e0
mov edi eax
lea eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x10 ]
cmp ebx 0x7
push eax
mov [ ebp - 0x10 ] esi
push ecx
je r-xdata
push 0x1953
push rwxdata
lea ecx [ ebp - 0x124 ]
call sub_401050
mov ecx [ ebp - 0x14 ]
cmp edi ecx
jne r-xdata
push edi
push rwxdata
lea ecx [ ebp - 0x124 ]
call sub_4011c0
mov edx [ ebp - 0x14 ]
mov eax [ ebp - 0x10 ]
mov edi rwxdata
mov [ edx + eax ] 0x0
mov eax [ ebp - 0x14 ]
mov esi [ ebp - 0x10 ]
mov ecx eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test eax eax
[ edi ] [ esi ]
je r-xdata
push 0x0
push rwxdata
push rwxdata
push 0x0
call [ MessageBoxA@IAT ]
mov edx ecx
mov edi rwxdata
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x124 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_401040
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x1c ] rwxdata
mov eax [ ebp - 0x1c ]
add eax 0x11
add eax 0x13
add eax 0x1
sub ebx ebx
mov ebx eax
call ebx
jmp r-xdata
sub_402320
mov eax [ rw-data ]
push ebp
push esi
push edi
mov edi [ rw-data ]
mov ebp ecx
add edi 0x19
push eax
mov [ rw-data ] edi
call sub_402080
mov esi eax
add esp 0x4
mov ecx esi
mov ax [ esi + 0x24 ]
mov edx [ esi ]
push eax
push 0x0
push 0x0
push 0x0
call [ edx ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov eax [ esi + 0x4c ]
push ecx
mov ecx [ esi + 0x48 ]
push edx
mov edx [ rw-data ]
push 0x19
push eax
mov eax [ rw-data ]
push ecx
push edx
push eax
push 0x0
mov ecx esi
call sub_4013c0
xor esi esi
xor esi esi
add esi 0x8
cmp esi 0x20
jl r-xdata
mov edx [ rw-data ]
push edx
call sub_402080
mov ecx [ eax + esi + 0x28 ]
mov edx [ rw-data ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
mov ecx [ rw-data ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_402080
mov ecx [ eax + esi + 0x2c ]
mov eax [ rw-data ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esi 0x8
shr eax 0x1f
add edx eax
add esp 0x8
add edi edx
cmp esi 0x20
lea ecx [ edx + edx * 4 ]
mov [ edi + ecx * 2 + rw-data ] 0x0
jl r-xdata
call [ rand@IAT ]
lea eax [ eax + eax * 2 ]
mov ecx 0x7
cdq
idiv ecx
push edx
mov [ rw-data ] edx
call sub_402080
mov eax [ rw-data ]
mov edi [ rw-data ]
sub eax edi
add esp 0x4
cdq
sub eax edx
mov edx [ rw-data ]
sar eax 0x1
sub eax 0xc
pop edi
pop esi
mov [ rw-data ] eax
mov [ rw-data ] edx
pop ebp
retn 0x4
mov ecx [ rw-data ]
push ecx
call sub_402080
mov ecx [ eax + esi + 0x28 ]
mov eax [ rw-data ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rw-data ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_402080
mov ecx [ eax + esi + 0x2c ]
mov edx [ rw-data ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esp 0x8
shr eax 0x1f
add edx eax
add edi edx
lea ecx [ edx + edx * 4 ]
mov al [ edi + ecx * 2 + rw-data ]
test al al
je r-xdata
mov eax [ rw-data ]
cmp eax 0xa
jle r-xdata
inc eax
mov [ rw-data ] eax
cmp eax 0x64
jge r-xdata
mov ecx 0x1
push 0x0
mov ecx ebp
call sub_402770
cmp ecx 0x64
jge r-xdata
mov [ rw-data ] 0xc8
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x20 ]
push 0x1
push 0x0
push ecx
call [ InvalidateRect@IAT ]
mov ecx ebp
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebp
retn 0x4
inc ecx
mov eax 0xa57eb503
imul ecx
add edx ecx
sar edx 0x6
mov eax edx
shr eax 0x1f
add edx eax
cmp edx 0x1
je r-xdata
sub_402530
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
call Ordinal_MFC42_4464
cmp eax 0xffffffff
jne r-xdata
mov [ rw-data ] 0x0
mov ecx [ esi + 0x20 ]
push 0x0
push 0x82
push 0x1
push ecx
call [ SetTimer@IAT ]
lea edx [ esp + 0x8 ]
push edx
call [ time@IAT ]
lea eax [ esp + 0xc ]
push eax
call [ gmtime@IAT ]
mov ecx [ eax ]
push ecx
call [ srand@IAT ]
add esp 0xc
xor eax eax
pop esi
retn 0x4
or eax eax
pop esi
retn 0x4
sub_402590
mov eax [ rw-data ]
push ebx
push esi
push edi
mov ebx ecx
push eax
call sub_402080
mov edx [ esp + 0x14 ]
mov ecx eax
add esp 0x4
lea eax [ edx - 0x25 ]
cmp eax 0x3
ja r-xdata
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
jmp [ eax * 4 + jump_table_40274c ]
mov ax [ ecx + 0x24 ]
inc ax
movsx eax ax
cdq
idiv [ ecx + 0x50 ]
mov [ ecx + 0x24 ] dx
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
mov eax [ rw-data ]
mov ecx [ rw-data ]
cmp eax ecx
jle r-xdata
xor esi esi
xor edi edi
add eax 0x19
mov ecx ebx
mov [ rw-data ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
sub eax 0x19
add esi 0x8
cmp esi 0x20
jl r-xdata
lea eax [ edx + edx * 4 ]
add edi edx
mov cl [ edi + eax * 2 + rw-data ]
test cl cl
jne r-xdata
add edi 0x8
cmp edi 0x20
jl r-xdata
lea eax [ edx + edx * 4 ]
add esi edx
mov cl [ esi + eax * 2 + rw-data ]
test cl cl
jne r-xdata
mov ecx [ rw-data ]
push ecx
call sub_402080
mov ecx [ eax + esi + 0x28 ]
mov eax [ rw-data ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rw-data ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_402080
mov ecx [ eax + esi + 0x2c ]
mov edx [ rw-data ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ edi - 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
test ecx ecx
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
cmp eax ecx
jge r-xdata
add [ rw-data ] 0x19
mov ecx [ rw-data ]
push ecx
call sub_402080
mov ecx [ eax + edi + 0x28 ]
mov eax [ rw-data ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rw-data ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov esi edx
call sub_402080
mov ecx [ eax + edi + 0x2c ]
mov edx [ rw-data ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ esi + 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
cmp ecx 0xa
jg r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
cmp eax ecx
jle r-xdata
sub [ rw-data ] 0x19
sub eax 0x19
mov ecx ebx
mov [ rw-data ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
add eax 0x19
add eax 0x19
mov [ rw-data ] eax
sub eax 0x19
sub_402780
push ecx
push ebx
push ebp
push esi
push edi
xor esi esi
mov dl 0x1
mov [ esp + 0x13 ] 0x0
mov edi 0x17
cmp esi 0x9
jne r-xdata
lea ecx [ edi + edi * 4 ]
xor ebp ebp
lea edx [ edi + ecx * 2 + rw-data ]
mov [ esp + 0x13 ] 0x0
jmp r-xdata
inc esi
cmp esi 0xb
jl r-xdata
mov eax 0x1010101
mov ecx rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] ax
mov [ rw-data ] al
mov [ esp + 0x13 ] 0x1
cmp ebp 0xa
jne r-xdata
dec edi
test edi edi
jg r-xdata
cmp [ esi + rw-data ] dl
je r-xdata
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl r-xdata
sub ecx 0xb
cmp ecx rw-data
jge r-xdata
mov al [ esp + 0x13 ]
test al al
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
inc ebp
cmp ebp 0xb
jl r-xdata
mov ecx edx
mov eax 0x1010101
mov [ ecx ] eax
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] ax
mov [ ecx + 0xa ] al
lea eax [ edi - 0x1 ]
test eax eax
jl r-xdata
xor eax eax
cmp [ edx + ebp ] 0x1
je r-xdata
jmp r-xdata
lea ecx [ eax + eax * 4 ]
lea esi [ eax + 0x1 ]
lea ecx [ eax + ecx * 2 + rw-data ]
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl r-xdata
sub ecx 0xb
dec esi
jne r-xdata
xor eax eax
sub_402860
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_406168
push eax
mov [ fs : 0x0 ] esp
mov al [ ecx + 0x44 ]
sub esp 0x44
test al al
push ebx
push ebp
push esi
push edi
mov bl 0x1
jne r-xdata
xor ebp ebp
mov [ esp + 0x24 ] r--data
mov [ esp + 0x28 ] ebp
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] ebp
call Ordinal_MFC42_323
push ebp
mov [ esp + 0x60 ] bl
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_1640
mov eax [ rw-data ]
mov esi [ rw-data ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
sub eax esi
sub ecx edx
push eax
mov eax [ esp + 0x68 ]
push ecx
mov ecx [ eax + 0x4 ]
push ecx
call [ CreateCompatibleBitmap@IAT ]
push eax
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1641
mov ebx [ esp + 0x28 ]
mov edx [ esp + 0x48 ]
lea eax [ esp + 0x24 ]
neg eax
sbb eax eax
and eax ebx
push eax
push edx
call Ordinal_MFC42_5785
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov edi [ rw-data ]
sub eax ecx
mov ecx [ rw-data ]
push 0xffffff
sub ecx edi
push eax
push ecx
push ebp
push ebp
lea ecx [ esp + 0x58 ]
call Ordinal_MFC42_2753
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1c ] r--data
mov edi r--data
mov [ esp + 0x18 ] ebp
mov [ esp + 0x14 ] edi
mov esi [ CreateSolidBrush@IAT ]
push 0x2b86f5
mov [ esp + 0x60 ] 0x3
call esi
push eax
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_1641
mov [ esp + 0x40 ] ebp
mov [ esp + 0x3c ] edi
push 0x2b0e91
mov [ esp + 0x60 ] 0x4
call esi
push eax
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_1641
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] edi
push 0x570e0f
mov [ esp + 0x60 ] 0x5
call esi
push eax
lea ecx [ esp + 0x38 ]
call Ordinal_MFC42_1641
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] edi
push 0x218ec7
mov [ esp + 0x60 ] 0x6
call esi
push eax
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_1641
push 0x212217
push 0x2
push ebp
call [ CreatePen@IAT ]
push eax
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1641
lea edx [ esp + 0x1c ]
lea ecx [ esp + 0x44 ]
push edx
call Ordinal_MFC42_5788
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
call Ordinal_MFC42_5787
mov ecx [ rw-data ]
push ecx
call sub_402080
mov edx [ rw-data ]
mov ecx [ rw-data ]
add esp 0x4
push edx
mov edx [ eax + 0x4c ]
push ecx
mov ecx [ eax + 0x48 ]
push 0x19
push edx
mov edx [ rw-data ]
push ecx
mov ecx [ rw-data ]
push edx
lea edx [ esp + 0x5c ]
push ecx
push edx
mov ecx eax
call sub_4013c0
xor esi esi
mov eax [ ecx + 0x20 ]
push rw-data
push eax
mov [ ecx + 0x44 ] bl
call [ GetClientRect@IAT ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx 0x64
mov [ rw-data ] edx
mov [ rw-data ] ecx
mov edx [ esp + 0x10 ]
add edi 0x19
inc edx
cmp edi 0x113
mov [ esp + 0x10 ] edx
jl r-xdata
cmp esi 0x16
jne r-xdata
mov edx [ esp + 0x10 ]
cmp [ edx ] 0x0
jne r-xdata
inc esi
cmp esi 0x18
jl r-xdata
cmp esi 0x13
jl r-xdata
lea eax [ esp + 0x3c ]
push eax
jmp r-xdata
lea eax [ esi + esi * 4 ]
xor edi edi
lea ecx [ esi + eax * 2 + rw-data ]
mov [ esp + 0x10 ] ecx
call sub_402780
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx [ rw-data ]
mov ebx [ rw-data ]
mov esi [ esp + 0x48 ]
sub ecx eax
lea eax [ esp + 0x44 ]
sub edx ebx
neg eax
sbb eax eax
push 0xcc0020
and eax esi
push ebp
push ebp
push eax
push ecx
mov ecx [ esp + 0x78 ]
push edx
push ebp
mov edx [ ecx + 0x4 ]
push ebp
push edx
call [ BitBlt@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_2405
mov esi r--data
mov [ esp + 0x2c ] esi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x5c ] 0x7
call Ordinal_MFC42_2414
mov edi r--data
mov [ esp + 0x34 ] esi
mov [ esp + 0x2c ] edi
lea ecx [ esp + 0x34 ]
mov [ esp + 0x5c ] 0x8
call Ordinal_MFC42_2414
mov [ esp + 0x34 ] edi
mov [ esp + 0x3c ] esi
lea ecx [ esp + 0x3c ]
mov [ esp + 0x5c ] 0x9
call Ordinal_MFC42_2414
mov [ esp + 0x3c ] edi
mov [ esp + 0x14 ] esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x5c ] 0xa
call Ordinal_MFC42_2414
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] esi
lea ecx [ esp + 0x1c ]
mov [ esp + 0x5c ] 0xb
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
mov [ esp + 0x1c ] edi
mov [ esp + 0x5c ] 0x0
call Ordinal_MFC42_640
mov [ esp + 0x24 ] esi
lea ecx [ esp + 0x24 ]
mov [ esp + 0x5c ] 0xc
call Ordinal_MFC42_2414
mov ecx [ esp + 0x54 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x4
cmp esi 0xf
jl r-xdata
cmp esi 0x15
jg r-xdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
mov edx [ rw-data ]
mov ebp [ rw-data ]
lea eax [ esi + esi * 4 + 0x5 ]
lea ebx [ edi + ebp + 0x19 ]
add ebp edi
lea ecx [ edx + eax * 4 ]
add eax ecx
lea ecx [ esi + esi * 4 ]
push eax
mov eax [ esp + 0x4c ]
lea edx [ edx + ecx * 4 ]
push ebx
add ecx edx
push ecx
push ebp
push eax
call [ Rectangle@IAT ]
xor ebp ebp
cmp esi 0x14
jg r-xdata
lea ecx [ esp + 0x34 ]
push ecx
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
lea edx [ esp + 0x2c ]
push edx
sub_402c80
push 0xffffffff
push sub_406188
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402cf0
push 0xffffffff
push sub_4061a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402d60
push 0xffffffff
push sub_4061c8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402dd0
push 0xffffffff
push sub_4061e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402e60
sub esp 0x8
push ebx
push ebp
mov al 0x1
push esi
push edi
xor ecx ecx
mov [ esp + 0x10 ] al
mov edx [ esp + 0x10 ]
mov bl al
and edx 0xff
mov [ ecx + rw-data ] al
mov [ edx + rw-data ] cl
mov dl al
and dl 0x80
neg dl
sbb dl dl
and edx 0x1b
shl bl 0x1
xor dl bl
xor al dl
inc ecx
cmp ecx 0x100
mov [ esp + 0x10 ] al
jb r-xdata
mov al 0x1
mov [ rw-data ] 0x0
mov [ esp + 0x10 ] al
mov ecx rw-data
mov edx [ esp + 0x10 ]
and edx 0xff
mov [ ecx ] edx
mov dl al
and dl 0x80
neg dl
sbb dl dl
add ecx 0x4
and edx 0x1b
shl al 0x1
xor al dl
cmp ecx rw-data
mov [ esp + 0x10 ] al
jl r-xdata
xor ebx ebx
xor dl dl
xor eax eax
mov ecx rw-data
mov al [ ebx + rw-data ]
sub ecx eax
mov dl [ ecx ]
jmp r-xdata
test ebx ebx
je r-xdata
xor esi esi
mov al dl
mov cl dl
shr al 0x7
shl cl 0x1
or al cl
mov cl al
xor dl al
shr cl 0x7
shl al 0x1
or cl al
mov al cl
xor dl cl
shr al 0x7
shl cl 0x1
or al cl
mov cl al
xor dl al
shr cl 0x7
shl al 0x1
or cl al
xor cl dl
xor cl 0x63
mov [ esp + 0x10 ] cl
mov [ ebx + rw-data ] cl
mov edx [ esp + 0x10 ]
and edx 0xff
mov [ edx + rw-data ] bl
inc ebx
cmp ebx 0x100
jb r-xdata
xor ecx ecx
xor eax eax
xor ecx ecx
mov al [ edi + rw-data ]
mov cl [ rw-data ]
add eax ecx
mov ecx 0xff
cdq
idiv ecx
xor ecx ecx
mov cl [ edx + rw-data ]
jmp r-xdata
xor eax eax
xor eax eax
xor edx edx
mov al [ edi + rw-data ]
mov dl [ rw-data ]
add eax edx
mov ebx 0xff
cdq
idiv ebx
xor eax eax
mov al [ edx + rw-data ]
jmp r-xdata
test bl bl
je r-xdata
mov [ esp + 0x14 ] 0x0
xor eax eax
xor edx edx
mov al [ edi + rw-data ]
mov dl [ rw-data ]
add eax edx
mov ebx 0xff
cdq
idiv ebx
xor eax eax
mov al [ edx + rw-data ]
mov [ esp + 0x14 ] eax
jmp r-xdata
shl eax 0x8
or eax edi
shl eax 0x8
or eax edi
shl eax 0x8
or eax ecx
mov ecx eax
mov [ esi * 4 + rw-data ] eax
rol ecx 0x8
mov [ esi * 4 + rw-data ] ecx
mov cl [ esi + rw-data ]
mov edx eax
mov [ esp + 0x10 ] cl
mov edi [ esp + 0x10 ]
rol edx 0x10
rol eax 0x18
mov [ esi * 4 + rw-data ] edx
and edi 0xff
mov [ esi * 4 + rw-data ] eax
mov eax edi
rol eax 0x8
mov [ esi * 4 + rw-data ] edi
mov [ esi * 4 + rw-data ] eax
mov edx edi
mov eax edi
rol edx 0x10
rol eax 0x18
mov [ esi * 4 + rw-data ] edx
mov [ esi * 4 + rw-data ] eax
test cl cl
je r-xdata
xor ebp ebp
xor eax eax
xor edx edx
mov al [ edi + rw-data ]
mov dl [ rw-data ]
add eax edx
mov ebx 0xff
cdq
idiv ebx
xor eax eax
mov al [ edx + rw-data ]
mov ebp eax
jmp r-xdata
test cl cl
je r-xdata
xor ebx ebx
xor eax eax
xor edx edx
mov al [ edi + rw-data ]
mov dl [ rw-data ]
add eax edx
mov ebx 0xff
cdq
idiv ebx
xor ebx ebx
mov bl [ edx + rw-data ]
jmp r-xdata
test cl cl
je r-xdata
xor eax eax
xor eax eax
xor ecx ecx
mov al [ edi + rw-data ]
mov cl [ rw-data ]
add eax ecx
mov ecx 0xff
cdq
idiv ecx
xor eax eax
mov al [ edx + rw-data ]
jmp r-xdata
test cl cl
je r-xdata
mov bl [ esi + rw-data ]
mov [ esp + 0x10 ] bl
mov edi [ esp + 0x10 ]
and edi 0xff
mov eax edi
mov ecx edi
rol eax 0x8
mov edx edi
mov [ esi * 4 + rw-data ] edi
rol ecx 0x10
mov [ esi * 4 + rw-data ] eax
mov [ esi * 4 + rw-data ] ecx
rol edx 0x18
test bl bl
mov [ esi * 4 + rw-data ] edx
je r-xdata
pop edi
pop esi
pop ebp
mov [ rw-data ] 0x1
pop ebx
add esp 0x8
retn
shl eax 0x8
or eax ebx
shl eax 0x8
or eax ebp
mov ebp [ esp + 0x14 ]
shl eax 0x8
or eax ebp
mov edx eax
mov ecx eax
rol edx 0x8
mov [ esi * 4 + rw-data ] eax
mov [ esi * 4 + rw-data ] edx
rol ecx 0x10
rol eax 0x18
mov [ esi * 4 + rw-data ] ecx
mov [ esi * 4 + rw-data ] eax
inc esi
cmp esi 0x100
jl r-xdata
sub_403170
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
mov edi ecx
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
lea edx [ eax + 0x1f ]
shr edx 0x5
mov [ edi + 0x4 ] edx
mov eax [ ecx ]
mov [ edi + 0x8 ] eax
mov eax [ ecx + 0x4 ]
mov [ edi + 0xc ] eax
mov eax [ ecx + 0x8 ]
mov [ edi + 0x10 ] eax
mov eax [ ecx + 0xc ]
sub edx 0x4
mov [ edi + 0x14 ] eax
je r-xdata
call sub_402e60
mov edx rw-data
lea ecx [ edi + 0x18 ]
sub edx 0x2
je r-xdata
ror eax 0x8
mov ebx eax
mov esi eax
shr ebx 0x10
and ebx 0xff
add edx 0x4
shr esi 0x18
mov ebp [ ebx * 4 + rw-data ]
mov ebx eax
mov esi [ esi * 4 + rw-data ]
and eax 0xff
shr ebx 0x8
and ebx 0xff
xor esi ebp
add ecx 0x10
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ ecx - 0x20 ]
xor esi ebp
mov ebp [ eax * 4 + rw-data ]
mov eax [ edx - 0x4 ]
xor esi ebp
xor esi ebx
xor eax esi
mov [ ecx - 0x10 ] eax
mov ebp [ ecx - 0x1c ]
xor eax ebp
mov [ ecx - 0xc ] eax
mov ebx [ ecx - 0x18 ]
xor eax ebx
mov [ ecx - 0x8 ] eax
mov esi [ ecx - 0x14 ]
xor eax esi
cmp edx rw-data
mov [ ecx - 0x4 ] eax
jl r-xdata
mov edx [ edi + 0xc ]
mov eax [ edi + 0x10 ]
mov ecx [ edi + 0x8 ]
mov [ edi + 0x10c ] edx
mov edx [ edi + 0x4 ]
mov [ edi + 0x110 ] eax
mov [ edi + 0x108 ] ecx
mov ecx [ edi + 0x14 ]
lea eax [ edx * 4 + 0x18 ]
mov [ edi + 0x114 ] ecx
cmp eax 0x4
mov [ esp + 0x18 ] 0x4
jbe r-xdata
mov eax [ ecx + 0x10 ]
mov edx rw-data
mov [ edi + 0x18 ] eax
mov eax [ ecx + 0x14 ]
mov [ edi + 0x1c ] eax
lea ecx [ edi + 0x20 ]
sub edx 0x2
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
lea eax [ edi + 0x18 ]
mov [ esp + 0x14 ] eax
ror eax 0x8
mov ebx eax
mov esi eax
shr ebx 0x10
and ebx 0xff
add edx 0x4
shr esi 0x18
mov ebp [ ebx * 4 + rw-data ]
mov ebx eax
mov esi [ esi * 4 + rw-data ]
and eax 0xff
shr ebx 0x8
and ebx 0xff
xor esi ebp
add ecx 0x18
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax * 4 + rw-data ]
mov eax [ ecx - 0x30 ]
xor esi ebp
mov ebp [ edx - 0x4 ]
xor esi ebx
xor esi eax
xor esi ebp
mov eax esi
mov [ ecx - 0x18 ] eax
mov ebx [ ecx - 0x2c ]
xor eax ebx
mov [ ecx - 0x14 ] eax
mov esi [ ecx - 0x28 ]
xor eax esi
mov [ ecx - 0x10 ] eax
mov ebp [ ecx - 0x24 ]
xor eax ebp
mov [ ecx - 0xc ] eax
mov ebx [ ecx - 0x20 ]
xor eax ebx
mov [ ecx - 0x8 ] eax
mov esi [ ecx - 0x1c ]
xor eax esi
cmp edx rw-data
mov [ ecx - 0x4 ] eax
jl r-xdata
jmp r-xdata
mov edx [ ecx + 0x10 ]
mov esi rw-data
mov [ edi + 0x18 ] edx
mov eax [ ecx + 0x14 ]
mov [ edi + 0x1c ] eax
mov edx [ ecx + 0x18 ]
mov [ edi + 0x20 ] edx
mov eax [ ecx + 0x1c ]
mov [ edi + 0x24 ] eax
lea ecx [ edi + 0x28 ]
mov edx [ eax ]
mov eax edx
mov ecx edx
shr eax 0x7
and eax 0x1010101
and ecx 0xff7f7f7f
shl ecx 0x1
lea eax [ eax + eax * 2 ]
lea eax [ eax + eax * 8 ]
xor eax ecx
mov ecx eax
mov esi eax
shr ecx 0x7
and ecx 0x1010101
and esi 0xff7f7f7f
shl esi 0x1
lea ecx [ ecx + ecx * 2 ]
mov ebp eax
lea ecx [ ecx + ecx * 8 ]
xor ecx esi
mov esi ecx
mov ebx ecx
shr esi 0x7
and esi 0x1010101
and ebx 0xff7f7f7f
shl ebx 0x1
lea esi [ esi + esi * 2 ]
lea esi [ esi + esi * 8 ]
xor esi ebx
mov ebx ecx
xor edx esi
xor ebx edx
xor ebp edx
ror ebx 0x10
ror ebp 0x8
xor ebx ebp
ror edx 0x18
xor ebx edx
xor ebx esi
xor ebx ecx
mov ecx [ esp + 0x18 ]
xor ebx eax
mov eax [ esp + 0x14 ]
inc ecx
mov [ eax + 0x100 ] ebx
mov edx [ edi + 0x4 ]
add eax 0x4
mov [ esp + 0x18 ] ecx
lea edx [ edx * 4 + 0x18 ]
mov [ esp + 0x14 ] eax
cmp ecx edx
jb r-xdata
mov edx eax
add esi 0x4
ror edx 0x8
mov ebx edx
mov eax edx
shr ebx 0x10
and ebx 0xff
add ecx 0x20
shr eax 0x18
mov ebp [ ebx * 4 + rw-data ]
mov ebx edx
mov eax [ eax * 4 + rw-data ]
and edx 0xff
shr ebx 0x8
and ebx 0xff
xor eax ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ edx * 4 + rw-data ]
mov edx [ ecx - 0x40 ]
xor eax ebp
mov ebp [ esi - 0x4 ]
xor eax ebx
xor eax edx
xor eax ebp
mov [ ecx - 0x20 ] eax
mov ebx [ ecx - 0x3c ]
xor eax ebx
mov [ ecx - 0x1c ] eax
mov edx [ ecx - 0x38 ]
xor eax edx
mov [ ecx - 0x18 ] eax
mov ebp [ ecx - 0x34 ]
xor eax ebp
mov ebx eax
mov [ ecx - 0x14 ] eax
shr ebx 0x10
and ebx 0xff
mov edx eax
shr edx 0x18
mov ebp [ ebx * 4 + rw-data ]
mov ebx eax
mov edx [ edx * 4 + rw-data ]
and eax 0xff
shr ebx 0x8
and ebx 0xff
xor edx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax * 4 + rw-data ]
mov eax [ ecx - 0x30 ]
xor edx ebp
xor edx ebx
xor eax edx
mov [ ecx - 0x10 ] eax
mov ebp [ ecx - 0x2c ]
xor eax ebp
mov [ ecx - 0xc ] eax
mov ebx [ ecx - 0x28 ]
xor eax ebx
mov [ ecx - 0x8 ] eax
mov edx [ ecx - 0x24 ]
xor eax edx
cmp esi rw-data
mov [ ecx - 0x4 ] eax
jl r-xdata
jmp r-xdata
sub_4034f0
sub esp 0x24
mov eax [ esp + 0x28 ]
push ebx
push ebp
push esi
mov esi [ ecx + 0x8 ]
mov ebp [ eax ]
mov edx [ eax + 0x8 ]
push edi
mov edi [ ecx + 0x10 ]
mov ebx [ ecx + 0xc ]
xor esi ebp
mov ebp [ eax + 0x4 ]
xor edx edi
mov edi [ eax + 0xc ]
mov eax [ ecx + 0x14 ]
xor ebp ebx
xor edi eax
lea eax [ ecx + 0x18 ]
mov ecx [ ecx + 0x4 ]
mov [ esp + 0x2c ] edx
cmp ecx 0x6
mov [ esp + 0x30 ] edi
mov [ esp + 0x10 ] ecx
jbe r-xdata
cmp ecx 0x4
jbe r-xdata
mov ecx edi
mov ebx edx
shr ecx 0x18
shr ebx 0x10
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
add eax 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x8
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x10 ]
xor ecx ebx
mov ebx edx
mov [ esp + 0x14 ] ecx
mov ecx edi
shr ecx 0x10
and ecx 0xff
shr ebx 0x8
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0xc ]
xor ecx ebx
mov ebx ebp
mov [ esp + 0x18 ] ecx
mov ecx edi
shr ecx 0x8
and ecx 0xff
and edi 0xff
shr ebx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
shr ebp 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx edx
and ebx 0xff
and ebp 0xff
shr edx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
shr esi 0x8
xor ecx ebx
mov ebx [ edx * 4 + rw-data ]
mov edx [ ebp * 4 + rw-data ]
and esi 0xff
xor ebx edx
mov edx [ edi * 4 + rw-data ]
mov ebp [ esi * 4 + rw-data ]
mov esi ecx
xor ebx ebp
mov ebp [ eax - 0x4 ]
xor ebx edx
xor ebx ebp
mov edx ebx
shr esi 0x10
shr edx 0x18
and esi 0xff
mov edi [ edx * 4 + rw-data ]
mov edx [ esi * 4 + rw-data ]
xor edi edx
mov edx [ esp + 0x18 ]
mov esi edx
shr esi 0x8
and esi 0xff
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
xor edi ebp
and esi 0xff
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax ]
xor edi ebp
mov ebp ecx
xor esi edi
mov edi ebx
shr edi 0x10
and edi 0xff
shr ebp 0x8
mov edi [ edi * 4 + rw-data ]
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
shr edx 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor ebp edi
mov edi ebx
shr edi 0x8
and edi 0xff
and ebx 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx [ esp + 0x14 ]
shr edx 0x10
and edx 0xff
xor edi [ edx * 4 + rw-data ]
mov edx ecx
and edx 0xff
shr ecx 0x18
xor edi [ edx * 4 + rw-data ]
mov edx [ eax + 0x8 ]
mov ecx [ ecx * 4 + rw-data ]
xor edx edi
mov edi [ esp + 0x18 ]
shr edi 0x10
and edi 0xff
mov [ esp + 0x2c ] edx
xor ecx [ edi * 4 + rw-data ]
mov edi ecx
mov ecx [ esp + 0x14 ]
shr ecx 0x8
and ecx 0xff
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0xc ]
xor edi ecx
mov ecx [ esp + 0x10 ]
xor edi ebx
add eax 0x10
mov [ esp + 0x30 ] edi
mov ecx edi
mov ebx edx
shr ebx 0x10
shr ecx 0x18
and ebx 0xff
add eax 0x10
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x8
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x10 ]
xor ecx ebx
mov ebx edi
shr ebx 0x10
and ebx 0xff
mov [ esp + 0x38 ] ebx
mov ebx edx
mov edx [ esp + 0x38 ]
shr ebx 0x8
mov edx [ edx * 4 + rw-data ]
and ebx 0xff
shr edi 0x8
xor edx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x18
and edi 0xff
xor edx [ ebx * 4 + rw-data ]
mov ebx ebp
and ebx 0xff
mov edi [ edi * 4 + rw-data ]
xor edx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0xc ]
xor edx ebx
mov ebx ebp
shr ebx 0x18
shr ebp 0x10
xor edi [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
and ebp 0xff
shr esi 0x8
xor edi [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x2c ]
and ebx 0xff
and esi 0xff
xor edi [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
xor edi ebx
mov ebx [ esp + 0x2c ]
shr ebx 0x18
mov [ esp + 0x1c ] edi
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor ebx ebp
mov ebp [ esi * 4 + rw-data ]
xor ebx ebp
mov ebp [ eax - 0x4 ]
xor ebx ebp
mov ebp edi
mov esi ebx
mov [ esp + 0x20 ] ebx
shr esi 0x18
shr ebp 0x10
mov esi [ esi * 4 + rw-data ]
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp edx
shr ebp 0x8
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp ecx
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax ]
add eax 0x10
xor esi ebp
mov ebp ebx
shr ebp 0x10
and ebp 0xff
mov [ esp + 0x38 ] ebp
mov ebp edi
mov edi [ esp + 0x38 ]
shr ebp 0x8
mov edi [ edi * 4 + rw-data ]
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp ecx
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax - 0xc ]
xor edi ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edx
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
and ebx 0xff
shr edx 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x1c ]
and ebx 0xff
and edx 0xff
shr ecx 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and ecx 0xff
xor ebp ebx
mov ebx [ esp + 0x1c ]
shr ebx 0x18
mov [ esp + 0x2c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edx * 4 + rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x20 ]
and ecx 0xff
xor ebx edx
mov edx [ ecx * 4 + rw-data ]
xor ebx edx
mov edx [ eax - 0x4 ]
xor ebx edx
mov edx ebp
mov ecx ebx
mov [ esp + 0x30 ] ebx
shr ecx 0x18
shr edx 0x10
mov ecx [ ecx * 4 + rw-data ]
and edx 0xff
shr ebp 0x8
xor ecx [ edx * 4 + rw-data ]
mov edx edi
shr edx 0x8
and edx 0xff
and ebp 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx esi
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx [ eax ]
xor ecx edx
mov edx ebx
shr edx 0x10
and edx 0xff
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp esi
shr ebp 0x18
xor edx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
add eax 0x10
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax - 0xc ]
xor edx ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edi
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
shr edi 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x2c ]
and ebx 0xff
and edi 0xff
shr esi 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and esi 0xff
xor ebp ebx
mov ebx [ esp + 0x2c ]
shr ebx 0x18
mov [ esp + 0x1c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edi * 4 + rw-data ]
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor ebx edi
mov edi [ esi * 4 + rw-data ]
xor ebx edi
mov edi [ eax - 0x4 ]
xor ebx edi
mov edi ebp
mov esi ebx
mov [ esp + 0x20 ] ebx
shr esi 0x18
shr edi 0x10
mov esi [ esi * 4 + rw-data ]
and edi 0xff
shr ebp 0x8
xor esi [ edi * 4 + rw-data ]
mov edi edx
shr edi 0x8
and edi 0xff
and ebp 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ecx
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi [ eax ]
xor esi edi
mov edi ebx
shr edi 0x10
and edi 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ ebp * 4 + rw-data ]
mov ebp ecx
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor edi ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edx
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
and ebx 0xff
add eax 0x10
shr edx 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x1c ]
and ebx 0xff
and edx 0xff
shr ecx 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and ecx 0xff
xor ebp ebx
mov ebx [ esp + 0x1c ]
shr ebx 0x18
mov [ esp + 0x2c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edx * 4 + rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x20 ]
and ecx 0xff
xor ebx edx
mov edx [ ecx * 4 + rw-data ]
xor ebx edx
mov edx [ eax - 0x4 ]
xor ebx edx
mov edx ebp
mov ecx ebx
mov [ esp + 0x30 ] ebx
shr ecx 0x18
shr edx 0x10
mov ecx [ ecx * 4 + rw-data ]
and edx 0xff
shr ebp 0x8
xor ecx [ edx * 4 + rw-data ]
mov edx edi
shr edx 0x8
and edx 0xff
and ebp 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx esi
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx [ eax ]
xor ecx edx
mov edx ebx
shr edx 0x10
and edx 0xff
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp esi
shr ebp 0x18
xor edx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor edx ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edi
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
shr edi 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x2c ]
and ebx 0xff
and edi 0xff
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x8 ]
xor ebp ebx
mov ebx [ esp + 0x2c ]
shr ebx 0x18
mov [ esp + 0x1c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edi * 4 + rw-data ]
shr esi 0x8
and esi 0xff
add eax 0x10
add eax 0x10
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor ebx edi
mov edi [ esi * 4 + rw-data ]
xor ebx edi
mov edi [ eax - 0x14 ]
xor ebx edi
mov edi ebp
mov esi ebx
mov [ esp + 0x20 ] ebx
shr esi 0x18
shr edi 0x10
mov esi [ esi * 4 + rw-data ]
and edi 0xff
shr ebp 0x8
xor esi [ edi * 4 + rw-data ]
mov edi edx
shr edi 0x8
and edi 0xff
and ebp 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ecx
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi [ eax - 0x10 ]
xor esi edi
mov edi ebx
shr edi 0x10
and edi 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ ebp * 4 + rw-data ]
mov ebp ecx
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax - 0xc ]
xor edi ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edx
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
and ebx 0xff
shr edx 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x1c ]
and ebx 0xff
and edx 0xff
shr ecx 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and ecx 0xff
xor ebp ebx
mov ebx [ esp + 0x1c ]
shr ebx 0x18
mov [ esp + 0x2c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edx * 4 + rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x20 ]
and ecx 0xff
xor ebx edx
mov edx [ ecx * 4 + rw-data ]
xor ebx edx
mov edx [ eax - 0x4 ]
xor ebx edx
mov edx ebp
mov ecx ebx
mov [ esp + 0x30 ] ebx
shr ecx 0x18
shr edx 0x10
mov ecx [ ecx * 4 + rw-data ]
and edx 0xff
shr ebp 0x8
xor ecx [ edx * 4 + rw-data ]
mov edx edi
shr edx 0x8
and edx 0xff
and ebp 0xff
add eax 0x10
xor ecx [ edx * 4 + rw-data ]
mov edx esi
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx [ eax - 0x10 ]
xor ecx edx
mov edx ebx
shr edx 0x10
and edx 0xff
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp esi
shr ebp 0x18
xor edx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax - 0xc ]
xor edx ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edi
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
shr edi 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x2c ]
and ebx 0xff
and edi 0xff
shr esi 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and esi 0xff
xor ebp ebx
mov ebx [ esp + 0x2c ]
shr ebx 0x18
mov [ esp + 0x1c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edi * 4 + rw-data ]
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor ebx edi
mov edi [ esi * 4 + rw-data ]
xor ebx edi
mov edi [ eax - 0x4 ]
xor ebx edi
mov edi ebp
mov esi ebx
mov [ esp + 0x20 ] ebx
shr esi 0x18
shr edi 0x10
mov esi [ esi * 4 + rw-data ]
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi edx
shr edi 0x8
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ecx
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi [ eax ]
xor esi edi
mov edi ebx
shr edi 0x10
and edi 0xff
mov edi [ edi * 4 + rw-data ]
add eax 0x10
shr ebp 0x8
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp ecx
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax - 0xc ]
xor edi ebp
mov ebp ebx
shr ebp 0x8
and ebp 0xff
mov ebx edx
shr ebx 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
and ebx 0xff
shr edx 0x10
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x1c ]
and ebx 0xff
and edx 0xff
shr ecx 0x8
xor ebp [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
and ecx 0xff
xor ebp ebx
mov ebx [ esp + 0x1c ]
shr ebx 0x18
mov [ esp + 0x2c ] ebp
mov ebx [ ebx * 4 + rw-data ]
xor ebx [ edx * 4 + rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x20 ]
and ecx 0xff
xor ebx edx
mov edx [ ecx * 4 + rw-data ]
xor ebx edx
mov edx [ eax - 0x4 ]
xor ebx edx
mov edx ebp
mov ecx ebx
mov [ esp + 0x30 ] ebx
shr ecx 0x18
shr edx 0x10
mov ecx [ ecx * 4 + rw-data ]
and edx 0xff
shr ebp 0x8
xor ecx [ edx * 4 + rw-data ]
mov edx edi
shr edx 0x8
and edx 0xff
and ebp 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx esi
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx [ eax ]
xor ecx edx
mov edx ebx
shr edx 0x10
and edx 0xff
shr ebx 0x8
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp esi
shr ebp 0x18
xor edx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor edx ebp
and ebx 0xff
mov ebp edi
mov ebx [ ebx * 4 + rw-data ]
add eax 0x10
shr ebp 0x18
shr edi 0x10
xor ebx [ ebp * 4 + rw-data ]
mov ebp esi
shr ebp 0x10
and ebp 0xff
and edi 0xff
shr esi 0x8
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x2c ]
and ebp 0xff
and esi 0xff
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ eax - 0x8 ]
xor ebx ebp
mov ebp [ esp + 0x2c ]
shr ebp 0x18
mov ebp [ ebp * 4 + rw-data ]
xor ebp [ edi * 4 + rw-data ]
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor ebp edi
mov edi [ esi * 4 + rw-data ]
xor ebp edi
mov edi [ eax - 0x4 ]
xor ebp edi
mov edi ebx
mov esi ebp
shr esi 0x18
shr edi 0x10
mov esi [ esi * 4 + rw-data ]
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi edx
shr edi 0x8
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ecx
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi [ eax ]
xor esi edi
mov edi ebx
mov [ esp + 0x24 ] esi
mov esi ebp
shr esi 0x10
and esi 0xff
shr edi 0x8
mov esi [ esi * 4 + rw-data ]
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ecx
shr edi 0x18
xor esi [ edi * 4 + rw-data ]
mov edi edx
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi [ eax + 0x4 ]
xor esi edi
mov edi edx
mov [ esp + 0x28 ] esi
mov esi ebp
shr esi 0x8
and esi 0xff
shr edi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
mov edi ecx
shr edi 0x10
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi ebx
and edi 0xff
shr ebx 0x18
xor esi [ edi * 4 + rw-data ]
mov edi [ eax + 0x8 ]
xor esi edi
shr edx 0x10
mov ebx [ ebx * 4 + rw-data ]
and edx 0xff
shr ecx 0x8
mov edi [ edx * 4 + rw-data ]
and ecx 0xff
xor ebx edi
and ebp 0xff
mov edx [ ecx * 4 + rw-data ]
mov ecx [ eax + 0xc ]
mov eax [ esp + 0x3c ]
xor ebx edx
mov edx [ ebp * 4 + rw-data ]
pop edi
xor ebx edx
mov edx [ esp + 0x24 ]
xor ebx ecx
mov ecx [ esp + 0x20 ]
mov [ eax + 0x8 ] esi
pop esi
mov [ eax + 0xc ] ebx
pop ebp
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
pop ebx
add esp 0x24
retn 0x8
mov ecx edi
mov ebx edx
shr ecx 0x18
shr ebx 0x10
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
add eax 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x8
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x10 ]
xor ecx ebx
mov ebx edx
mov [ esp + 0x14 ] ecx
mov ecx edi
shr ecx 0x10
and ecx 0xff
shr ebx 0x8
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0xc ]
xor ecx ebx
mov ebx ebp
mov [ esp + 0x18 ] ecx
mov ecx edi
shr ecx 0x8
and ecx 0xff
and edi 0xff
shr ebx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x10
and ebx 0xff
shr ebp 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx edx
and ebx 0xff
and ebp 0xff
shr edx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax - 0x8 ]
shr esi 0x8
xor ecx ebx
mov ebx [ edx * 4 + rw-data ]
mov edx [ ebp * 4 + rw-data ]
and esi 0xff
xor ebx edx
mov edx [ edi * 4 + rw-data ]
mov ebp [ esi * 4 + rw-data ]
mov esi ecx
xor ebx ebp
mov ebp [ eax - 0x4 ]
xor ebx edx
xor ebx ebp
mov edx ebx
shr esi 0x10
shr edx 0x18
and esi 0xff
mov edi [ edx * 4 + rw-data ]
mov edx [ esi * 4 + rw-data ]
xor edi edx
mov edx [ esp + 0x18 ]
mov esi edx
shr esi 0x8
and esi 0xff
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
xor edi ebp
and esi 0xff
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax ]
xor edi ebp
mov ebp ecx
xor esi edi
mov edi ebx
shr edi 0x10
and edi 0xff
shr ebp 0x8
mov edi [ edi * 4 + rw-data ]
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
shr edx 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor ebp edi
mov edi ebx
shr edi 0x8
and edi 0xff
and ebx 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx [ esp + 0x14 ]
shr edx 0x10
and edx 0xff
xor edi [ edx * 4 + rw-data ]
mov edx ecx
and edx 0xff
shr ecx 0x18
xor edi [ edx * 4 + rw-data ]
mov edx [ eax + 0x8 ]
mov ecx [ ecx * 4 + rw-data ]
xor edx edi
mov edi [ esp + 0x18 ]
shr edi 0x10
and edi 0xff
mov [ esp + 0x2c ] edx
xor ecx [ edi * 4 + rw-data ]
mov edi ecx
mov ecx [ esp + 0x14 ]
shr ecx 0x8
and ecx 0xff
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0xc ]
xor edi ecx
xor edi ebx
add eax 0x10
mov [ esp + 0x30 ] edi
sub_404520
sub esp 0x24
mov edx [ ecx + 0x4 ]
push ebx
mov ebx [ esp + 0x2c ]
mov eax edx
shl eax 0x4
add eax ecx
push ebp
push esi
mov esi [ ebx ]
mov ebp [ eax + 0x68 ]
mov [ esp + 0xc ] edx
add edx 0x7
push edi
mov edi [ ebx + 0x4 ]
xor ebp esi
mov esi [ eax + 0x6c ]
add eax 0x158
shl edx 0x4
xor esi edi
mov [ esp + 0x24 ] ebp
mov edi [ edx + ecx ]
mov edx [ ebx + 0x8 ]
mov ecx [ ebx + 0xc ]
xor edi edx
mov edx [ eax - 0xe4 ]
xor edx ecx
mov ecx [ esp + 0x10 ]
cmp ecx 0x6
mov [ esp + 0x30 ] edx
jbe r-xdata
cmp [ esp + 0x10 ] 0x4
jbe r-xdata
mov ecx edx
mov ebx edi
shr ecx 0x8
and ecx 0xff
sub eax 0x10
shr ebx 0x10
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x10 ]
xor ecx ebx
mov ebx edi
mov [ esp + 0x14 ] ecx
mov ecx edx
shr ecx 0x10
and ecx 0xff
shr ebx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x8
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x14 ]
xor ecx ebx
mov ebx esi
mov [ esp + 0x18 ] ecx
mov ecx edx
shr ecx 0x18
shr ebx 0x8
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
shr esi 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x10
and ebx 0xff
and esi 0xff
shr ebp 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx edi
and ebx 0xff
and edx 0xff
shr edi 0x8
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x18 ]
and edi 0xff
xor ecx ebx
mov ebx [ edi * 4 + rw-data ]
mov edi [ esi * 4 + rw-data ]
mov esi [ ebp * 4 + rw-data ]
xor ebx edi
xor ebx esi
mov esi [ edx * 4 + rw-data ]
mov edx [ eax + 0x1c ]
xor ebx esi
xor ebx edx
mov esi ecx
mov edx ebx
shr edx 0x8
shr esi 0x10
and edx 0xff
and esi 0xff
mov ebp [ edx * 4 + rw-data ]
mov edx [ esi * 4 + rw-data ]
xor ebp edx
mov edx [ esp + 0x18 ]
mov esi edx
shr esi 0x18
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
xor ebp edi
and esi 0xff
mov edi [ esi * 4 + rw-data ]
mov esi [ eax ]
xor ebp edi
mov edi ecx
xor ebp esi
mov esi ebx
shr esi 0x10
and esi 0xff
mov [ esp + 0x24 ] ebp
shr edi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
mov edi [ esp + 0x14 ]
shr edi 0x8
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi edx
and edi 0xff
shr edx 0x8
xor esi [ edi * 4 + rw-data ]
mov edi [ eax + 0x4 ]
and edx 0xff
xor esi edi
mov edi ebx
shr edi 0x18
and ebx 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx [ esp + 0x14 ]
shr edx 0x10
and edx 0xff
xor edi [ edx * 4 + rw-data ]
mov edx ecx
and edx 0xff
shr ecx 0x8
xor edi [ edx * 4 + rw-data ]
mov edx [ eax + 0x8 ]
and ecx 0xff
xor edi edx
mov edx [ esp + 0x18 ]
mov ecx [ ecx * 4 + rw-data ]
shr edx 0x10
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx ecx
mov ecx [ esp + 0x14 ]
shr ecx 0x18
xor edx [ ecx * 4 + rw-data ]
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0xc ]
xor edx ecx
xor edx ebx
sub eax 0x10
mov [ esp + 0x30 ] edx
mov ebx edx
mov ecx edi
shr ebx 0x8
and ebx 0xff
and ebp 0xff
shr ecx 0x10
mov ebx [ ebx * 4 + rw-data ]
and ecx 0xff
sub eax 0x10
xor ebx [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x18
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp * 4 + rw-data ]
mov ebp edi
xor ebx ecx
mov ecx [ eax + 0x10 ]
xor ebx ecx
mov ecx edx
shr ecx 0x10
and ecx 0xff
shr ebp 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x8
and ebp 0xff
shr edx 0x18
xor ecx [ ebp * 4 + rw-data ]
mov ebp esi
and ebp 0xff
mov edx [ edx * 4 + rw-data ]
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x14 ]
xor ecx ebp
mov ebp esi
shr ebp 0x8
and ebp 0xff
shr esi 0x10
xor edx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x10
and ebp 0xff
and esi 0xff
xor edx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
shr edi 0x8
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and edi 0xff
xor edx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x24 ]
mov edi [ edi * 4 + rw-data ]
shr esi 0x18
xor edi ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x30 ]
and esi 0xff
xor edi ebp
mov ebp [ esi * 4 + rw-data ]
xor edi ebp
mov ebp [ eax + 0x1c ]
xor edi ebp
mov ebp edx
mov esi edi
mov [ esp + 0x20 ] edi
shr esi 0x8
and esi 0xff
shr ebp 0x10
mov esi [ esi * 4 + rw-data ]
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp ecx
shr ebp 0x18
xor esi [ ebp * 4 + rw-data ]
mov ebp ebx
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax ]
xor esi ebp
mov ebp edx
mov [ esp + 0x24 ] esi
mov esi edi
shr esi 0x10
and esi 0xff
sub eax 0x10
shr ebp 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebp * 4 + rw-data ]
mov ebp ebx
shr ebp 0x8
and ebp 0xff
shr edi 0x18
xor esi [ ebp * 4 + rw-data ]
mov ebp ecx
and ebp 0xff
mov edi [ edi * 4 + rw-data ]
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x14 ]
xor esi ebp
mov ebp ecx
shr ebp 0x8
and ebp 0xff
shr ecx 0x10
xor edi [ ebp * 4 + rw-data ]
mov ebp ebx
shr ebp 0x10
and ebp 0xff
and ecx 0xff
shr ebx 0x18
xor edi [ ebp * 4 + rw-data ]
mov ebp edx
and ebp 0xff
shr edx 0x8
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and edx 0xff
xor edi ebp
mov ebp [ ecx * 4 + rw-data ]
mov edx [ edx * 4 + rw-data ]
mov ecx [ esp + 0x20 ]
xor edx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x1c ]
and ecx 0xff
xor edx ebp
xor edx [ ecx * 4 + rw-data ]
xor edx ebx
mov ebx edi
shr ebx 0x10
mov ecx edx
and ebx 0xff
shr ecx 0x8
mov ebp [ ebx * 4 + rw-data ]
and ecx 0xff
mov ebx esi
mov ecx [ ecx * 4 + rw-data ]
shr ebx 0x18
xor ecx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x24 ]
xor ecx ebp
mov ebp ebx
and ebp 0xff
shr ebx 0x8
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ eax ]
and ebx 0xff
xor ecx ebp
mov ebp edi
mov [ esp + 0x14 ] ecx
mov ecx edx
shr ecx 0x10
and ecx 0xff
shr ebp 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ ebx * 4 + rw-data ]
xor ecx ebp
mov ebx esi
sub eax 0x10
and ebx 0xff
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x14 ]
xor ecx ebp
mov ebp esi
xor ecx ebx
mov ebx edx
shr ebx 0x18
shr ebp 0x8
mov ebx [ ebx * 4 + rw-data ]
and ebp 0xff
shr esi 0x10
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x10
and ebp 0xff
and esi 0xff
and edx 0xff
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
shr edi 0x8
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and edi 0xff
xor ebx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x24 ]
mov edi [ edi * 4 + rw-data ]
shr esi 0x18
xor edi ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax + 0x1c ]
xor edi ebp
mov ebp [ edx * 4 + rw-data ]
xor edi ebp
xor edi esi
mov esi ebx
shr esi 0x10
mov edx edi
and esi 0xff
shr edx 0x8
mov ebp [ esi * 4 + rw-data ]
and edx 0xff
mov esi ecx
mov edx [ edx * 4 + rw-data ]
shr esi 0x18
xor edx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
xor edx ebp
mov ebp esi
and ebp 0xff
shr esi 0x8
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax ]
and esi 0xff
xor edx ebp
mov ebp ebx
mov [ esp + 0x24 ] edx
mov edx edi
shr edx 0x10
and edx 0xff
shr ebp 0x18
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp [ esi * 4 + rw-data ]
mov esi ecx
and esi 0xff
xor edx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax + 0x4 ]
xor edx ebp
mov ebp ecx
xor edx esi
mov esi edi
shr ebp 0x8
shr esi 0x18
and ebp 0xff
mov esi [ esi * 4 + rw-data ]
and edi 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x10
and ebp 0xff
sub eax 0x10
shr ecx 0x10
xor esi [ ebp * 4 + rw-data ]
mov ebp ebx
and ebp 0xff
and ecx 0xff
shr ebx 0x8
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and ebx 0xff
xor esi ebp
mov ebp [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x14 ]
mov ebx [ ebx * 4 + rw-data ]
shr ecx 0x18
xor ebx ebp
mov ebp [ ecx * 4 + rw-data ]
xor ebx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ eax + 0x1c ]
xor ebx ebp
xor ebx edi
mov edi esi
shr edi 0x10
mov ecx ebx
and edi 0xff
shr ecx 0x8
mov ebp [ edi * 4 + rw-data ]
and ecx 0xff
mov edi edx
mov ecx [ ecx * 4 + rw-data ]
shr edi 0x18
xor ecx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ esp + 0x24 ]
xor ecx ebp
mov ebp edi
and ebp 0xff
shr edi 0x8
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ eax ]
and edi 0xff
xor ecx ebp
mov ebp esi
mov [ esp + 0x14 ] ecx
mov ecx ebx
shr ecx 0x10
and ecx 0xff
shr ebp 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ edi * 4 + rw-data ]
mov edi edx
and edi 0xff
xor ecx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ eax + 0x4 ]
xor ecx ebp
mov ebp edx
xor ecx edi
mov edi ebx
shr edi 0x18
shr ebp 0x8
mov edi [ edi * 4 + rw-data ]
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x10
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp esi
and ebp 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x8 ]
xor edi ebp
shr edx 0x10
and edx 0xff
and ebx 0xff
shr esi 0x8
mov ebp [ edx * 4 + rw-data ]
mov edx [ esp + 0x24 ]
and esi 0xff
sub eax 0x10
shr edx 0x18
mov esi [ esi * 4 + rw-data ]
xor esi ebp
mov ebp [ edx * 4 + rw-data ]
xor esi ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x1c ]
xor esi ebp
xor esi ebx
mov ebx edi
shr ebx 0x10
mov edx esi
and ebx 0xff
shr edx 0x8
mov ebp [ ebx * 4 + rw-data ]
and edx 0xff
mov ebx ecx
mov edx [ edx * 4 + rw-data ]
shr ebx 0x18
xor edx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x14 ]
xor edx ebp
mov ebp ebx
and ebp 0xff
shr ebx 0x8
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax ]
and ebx 0xff
xor edx ebp
mov ebp edi
mov [ esp + 0x24 ] edx
mov edx esi
shr edx 0x10
and edx 0xff
shr ebp 0x18
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp [ ebx * 4 + rw-data ]
mov ebx ecx
and ebx 0xff
xor edx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x4 ]
xor edx ebp
mov ebp ecx
xor edx ebx
mov ebx esi
shr ebx 0x18
shr ebp 0x8
mov ebx [ ebx * 4 + rw-data ]
and ebp 0xff
shr ecx 0x10
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x10
and ebp 0xff
and ecx 0xff
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
shr edi 0x8
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x8 ]
and edi 0xff
xor ebx ebp
mov ebp [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x14 ]
mov edi [ edi * 4 + rw-data ]
shr ecx 0x18
xor edi ebp
xor edi [ ecx * 4 + rw-data ]
and esi 0xff
sub eax 0x10
sub eax 0x10
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax + 0x2c ]
xor edi ebp
xor edi esi
mov esi ebx
shr esi 0x10
mov ecx edi
and esi 0xff
shr ecx 0x8
mov ebp [ esi * 4 + rw-data ]
and ecx 0xff
mov esi edx
mov ecx [ ecx * 4 + rw-data ]
shr esi 0x18
xor ecx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x24 ]
xor ecx ebp
mov ebp esi
and ebp 0xff
shr esi 0x8
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x10 ]
and esi 0xff
xor ecx ebp
mov ebp ebx
mov [ esp + 0x14 ] ecx
mov ecx edi
shr ecx 0x10
and ecx 0xff
shr ebp 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ esi * 4 + rw-data ]
mov esi edx
and esi 0xff
xor ecx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax + 0x14 ]
xor ecx ebp
mov ebp edx
xor ecx esi
mov esi edi
shr esi 0x18
shr ebp 0x8
mov esi [ esi * 4 + rw-data ]
and ebp 0xff
shr edx 0x10
xor esi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x10
and ebp 0xff
and edx 0xff
and edi 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp ebx
and ebp 0xff
shr ebx 0x8
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and ebx 0xff
xor esi ebp
mov ebp [ edx * 4 + rw-data ]
mov edx [ esp + 0x24 ]
mov ebx [ ebx * 4 + rw-data ]
shr edx 0x18
xor ebx ebp
mov ebp [ edx * 4 + rw-data ]
xor ebx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ eax + 0x1c ]
xor ebx ebp
xor ebx edi
mov edi esi
mov edx ebx
shr edx 0x8
and edx 0xff
shr edi 0x10
mov edx [ edx * 4 + rw-data ]
and edi 0xff
sub eax 0x10
mov ebp [ edi * 4 + rw-data ]
mov edi ecx
shr edi 0x18
xor edx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ esp + 0x14 ]
xor edx ebp
mov ebp edi
and ebp 0xff
shr edi 0x8
xor edx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x10 ]
and edi 0xff
xor edx ebp
mov ebp esi
mov [ esp + 0x24 ] edx
mov edx ebx
shr edx 0x10
and edx 0xff
shr ebp 0x18
mov edx [ edx * 4 + rw-data ]
xor edx [ ebp * 4 + rw-data ]
mov ebp [ edi * 4 + rw-data ]
mov edi ecx
and edi 0xff
xor edx ebp
mov ebp [ edi * 4 + rw-data ]
mov edi [ eax + 0x14 ]
xor edx ebp
mov ebp ecx
xor edx edi
mov edi ebx
shr edi 0x18
shr ebp 0x8
mov edi [ edi * 4 + rw-data ]
and ebp 0xff
shr ecx 0x10
xor edi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x10
and ebp 0xff
and ecx 0xff
and ebx 0xff
xor edi [ ebp * 4 + rw-data ]
mov ebp esi
and ebp 0xff
shr esi 0x8
xor edi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and esi 0xff
xor edi ebp
mov ebp [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x14 ]
mov esi [ esi * 4 + rw-data ]
shr ecx 0x18
xor esi ebp
mov ebp [ ecx * 4 + rw-data ]
xor esi ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x1c ]
xor esi ebp
xor esi ebx
mov ebx edi
shr ebx 0x10
mov ecx esi
and ebx 0xff
shr ecx 0x8
mov ebp [ ebx * 4 + rw-data ]
and ecx 0xff
mov ebx edx
mov ecx [ ecx * 4 + rw-data ]
shr ebx 0x18
xor ecx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ esp + 0x24 ]
xor ecx ebp
mov ebp ebx
and ebp 0xff
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ eax ]
shr ebx 0x8
xor ecx ebp
mov ebp edi
mov [ esp + 0x14 ] ecx
mov ecx esi
shr ecx 0x10
and ecx 0xff
and ebx 0xff
shr ebp 0x18
mov ecx [ ecx * 4 + rw-data ]
sub eax 0x10
xor ecx [ ebp * 4 + rw-data ]
mov ebp [ ebx * 4 + rw-data ]
mov ebx edx
and ebx 0xff
xor ecx ebp
mov ebp [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x14 ]
xor ecx ebp
mov ebp edx
xor ecx ebx
mov ebx esi
shr ebx 0x18
shr ebp 0x8
mov ebx [ ebx * 4 + rw-data ]
and ebp 0xff
shr edx 0x10
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x24 ]
shr ebp 0x10
and ebp 0xff
and edx 0xff
and esi 0xff
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
and ebp 0xff
shr edi 0x8
xor ebx [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x18 ]
and edi 0xff
xor ebx ebp
mov ebp [ edx * 4 + rw-data ]
mov edx [ esp + 0x24 ]
mov edi [ edi * 4 + rw-data ]
shr edx 0x18
xor edi ebp
mov ebp [ edx * 4 + rw-data ]
xor edi ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax + 0x1c ]
xor edi ebp
xor edi esi
mov esi ebx
shr esi 0x10
mov edx edi
and esi 0xff
shr edx 0x8
mov ebp [ esi * 4 + rw-data ]
and edx 0xff
mov esi ecx
mov edx [ edx * 4 + rw-data ]
shr esi 0x18
xor edx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
and esi 0xff
xor edx ebp
mov ebp [ esi * 4 + rw-data ]
mov esi [ eax ]
xor edx ebp
mov ebp ebx
xor edx esi
mov esi edi
shr esi 0x10
and esi 0xff
shr ebp 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x8
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp ecx
and ebp 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x4 ]
xor esi ebp
mov ebp ecx
mov [ esp + 0x28 ] esi
mov esi edi
shr esi 0x18
shr ebp 0x8
mov esi [ esi * 4 + rw-data ]
and ebp 0xff
shr ecx 0x10
xor esi [ ebp * 4 + rw-data ]
mov ebp [ esp + 0x14 ]
shr ebp 0x10
and ebp 0xff
and ecx 0xff
and edi 0xff
xor esi [ ebp * 4 + rw-data ]
mov ebp ebx
and ebp 0xff
shr ebx 0x8
xor esi [ ebp * 4 + rw-data ]
mov ebp [ eax + 0x8 ]
and ebx 0xff
xor esi ebp
mov ebp [ ecx * 4 + rw-data ]
mov ecx [ esp + 0x14 ]
mov ebx [ ebx * 4 + rw-data ]
shr ecx 0x18
xor ebx ebp
mov ebp [ ecx * 4 + rw-data ]
mov ecx [ eax + 0xc ]
mov eax [ esp + 0x3c ]
xor ebx ebp
mov ebp [ edi * 4 + rw-data ]
pop edi
xor ebx ebp
mov [ eax + 0x8 ] esi
xor ebx ecx
mov ecx [ esp + 0x24 ]
pop esi
mov [ eax + 0xc ] ebx
pop ebp
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop ebx
add esp 0x24
retn 0x8
mov ecx edx
mov ebx edi
shr ecx 0x8
and ecx 0xff
sub eax 0x10
shr ebx 0x10
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
shr ebx 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x10 ]
xor ecx ebx
mov ebx edi
mov [ esp + 0x14 ] ecx
mov ecx edx
shr ecx 0x10
and ecx 0xff
shr ebx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x8
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx esi
and ebx 0xff
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x14 ]
xor ecx ebx
mov ebx esi
mov [ esp + 0x18 ] ecx
mov ecx edx
shr ecx 0x18
shr ebx 0x8
mov ecx [ ecx * 4 + rw-data ]
and ebx 0xff
shr esi 0x10
xor ecx [ ebx * 4 + rw-data ]
mov ebx ebp
shr ebx 0x10
and ebx 0xff
and esi 0xff
shr ebp 0x18
xor ecx [ ebx * 4 + rw-data ]
mov ebx edi
and ebx 0xff
and edx 0xff
shr edi 0x8
xor ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0x18 ]
and edi 0xff
xor ecx ebx
mov ebx [ edi * 4 + rw-data ]
mov edi [ esi * 4 + rw-data ]
mov esi [ ebp * 4 + rw-data ]
xor ebx edi
xor ebx esi
mov esi [ edx * 4 + rw-data ]
mov edx [ eax + 0x1c ]
xor ebx esi
xor ebx edx
mov esi ecx
mov edx ebx
shr edx 0x8
shr esi 0x10
and edx 0xff
and esi 0xff
mov ebp [ edx * 4 + rw-data ]
mov edx [ esi * 4 + rw-data ]
xor ebp edx
mov edx [ esp + 0x18 ]
mov esi edx
shr esi 0x18
mov edi [ esi * 4 + rw-data ]
mov esi [ esp + 0x14 ]
xor ebp edi
and esi 0xff
mov edi [ esi * 4 + rw-data ]
mov esi [ eax ]
xor ebp edi
mov edi ecx
xor ebp esi
mov esi ebx
shr esi 0x10
and esi 0xff
mov [ esp + 0x24 ] ebp
shr edi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
mov edi [ esp + 0x14 ]
shr edi 0x8
and edi 0xff
xor esi [ edi * 4 + rw-data ]
mov edi edx
and edi 0xff
shr edx 0x8
xor esi [ edi * 4 + rw-data ]
mov edi [ eax + 0x4 ]
and edx 0xff
xor esi edi
mov edi ebx
shr edi 0x18
and ebx 0xff
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx [ esp + 0x14 ]
shr edx 0x10
and edx 0xff
xor edi [ edx * 4 + rw-data ]
mov edx ecx
and edx 0xff
shr ecx 0x8
xor edi [ edx * 4 + rw-data ]
mov edx [ eax + 0x8 ]
and ecx 0xff
xor edi edx
mov edx [ esp + 0x18 ]
mov ecx [ ecx * 4 + rw-data ]
shr edx 0x10
and edx 0xff
xor ecx [ edx * 4 + rw-data ]
mov edx ecx
mov ecx [ esp + 0x14 ]
shr ecx 0x18
xor edx [ ecx * 4 + rw-data ]
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ eax + 0xc ]
xor edx ecx
xor edx ebx
sub eax 0x10
mov [ esp + 0x30 ] edx
sub_405580
push 0xffffffff
push sub_40620a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x1e0
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je r-xdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_405620
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405620
push 0xffffffff
push sub_406236
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call Ordinal_MFC42_366
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_529
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_554
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4056a0
push 0xffffffff
push sub_406256
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_807
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_796
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_674
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405710
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
push edi
mov esi ecx
push eax
call Ordinal_MFC42_4457
cmp eax 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn 0x4
push 0xe800
xor eax eax
sub esp 0x10
xor ecx ecx
mov ebp esp
xor edx edx
lea edi [ esi + 0x140 ]
push 0x50402834
mov [ ebp ] eax
xor ebx ebx
push 0x800
push esi
mov [ ebp + 0x4 ] ecx
mov ecx edi
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] ebx
call Ordinal_MFC42_6625
test eax eax
je r-xdata
push 0x80
mov ecx edi
call Ordinal_MFC42_4163
test eax eax
je r-xdata
lea ebx [ esi + 0xc0 ]
push 0xe801
push 0x50008200
push esi
mov ecx ebx
call Ordinal_MFC42_2117
test eax eax
je r-xdata
push 0x4
push rwxdata
mov ecx ebx
call Ordinal_MFC42_6000
test eax eax
je r-xdata
push 0xf000
mov ecx edi
call Ordinal_MFC42_2626
push 0x0
mov ecx edi
call Ordinal_MFC42_6215
push 0x0
mov ecx ebx
call Ordinal_MFC42_6215
push 0xf000
mov ecx esi
call Ordinal_MFC42_2627
push 0x0
push 0x0
push edi
mov ecx esi
call Ordinal_MFC42_2494
push 0x0
mov ecx esi
call sub_4058a0
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
sub_405800
push esi
mov esi [ esp + 0x8 ]
push esi
call Ordinal_MFC42_5252
test eax eax
jne r-xdata
mov al [ rw-data ]
push edi
mov edi [ GetSystemMetrics@IAT ]
test al 0x1
jne r-xdata
pop esi
retn 0x4
mov cl [ rw-data ]
mov al 0x2
test al cl
jne r-xdata
mov cl al
push 0x0
or cl 0x1
mov [ rw-data ] cl
call edi
mov [ rw-data ] eax
mov eax 0x55555556
pop edi
imul [ rw-data ]
mov eax edx
shr eax 0x1f
add edx eax
mov eax 0x38e38e39
mov [ esi + 0x1c ] edx
mov ecx [ rw-data ]
imul ecx
sar edx 0x1
mov ecx edx
mov [ esi + 0x14 ] 0x11f
shr ecx 0x1f
add edx ecx
mov [ esi + 0x10 ] 0x264
mov [ esi + 0x18 ] edx
mov eax 0x1
pop esi
retn 0x4
or cl al
push 0x1
mov [ rw-data ] cl
call edi
mov [ rw-data ] eax
sub_4058a0
mov eax [ rw-data ]
push esi
test eax eax
mov esi ecx
jne r-xdata
mov cl [ esp + 0x8 ]
test cl cl
je r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
test esi esi
jne r-xdata
push eax
call [ GetMenu@IAT ]
mov [ rw-data ] eax
mov eax [ esi + 0x20 ]
mov eax [ esi + 0x20 ]
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x20 ]
xor ecx ecx
jmp r-xdata
push 0x0
push eax
call [ SetMenu@IAT ]
push 0x20
push 0x0
push 0xc00000
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
push eax
push ecx
call [ SetMenu@IAT ]
push 0x20
push 0xc00000
push 0x0
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_405f93
cmp [ rwxdata ] ebx
jne r-xdata
call sub_405f7e
push rwxdata
push rwxdata
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_405f90
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_405fa0
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_405fb8
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne r-xdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401000
mov edx ecx
push edi
mov ecx 0x40
xor eax eax
lea edi [ edx + 0x4 ]
mov [ edx ] r--data
[ edi ]
mov [ edx + 0x104 ] al
mov eax edx
pop edi
retn
sub_401020
push esi
mov esi ecx
call sub_401040
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401040
mov [ ecx ] r--data
retn
sub_4012e0
mov eax [ esp + 0x4 ]
mov ecx eax
and ecx 0x8000000f
jns r-xdata
je r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
retn 0x4
mov edx 0x10
sub edx ecx
add eax edx
sub_401310
call sub_401320
jmp sub_401330
sub_401320
push rwxdata
mov ecx rw-data
call Ordinal_MFC42_539
retn
sub_401330
push sub_401340
call sub_405dfc
pop ecx
retn
sub_401340
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
retn
or cl al
mov [ rw-data ] cl
mov ecx rw-data
jmp Ordinal_MFC42_800
sub_401360
mov edx ecx
push edi
mov ecx 0x8
xor eax eax
lea edi [ edx + 0x4 ]
mov [ edx ] r--data
[ edi ]
mov [ edx + 0x24 ] ax
mov eax edx
pop edi
retn
sub_401380
push esi
mov esi ecx
call sub_4013a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4013a0
mov [ ecx ] r--data
retn
sub_4013b0
retn 0x10
sub_401620
push esi
mov esi ecx
call sub_401830
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_401830
push edi
lea edi [ ecx + 0x4 ]
mov ecx 0x8
xor eax eax
[ edi ]
pop edi
retn
sub_401840
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_401850
mov eax r--data
retn
sub_401860
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_401880
push esi
mov esi ecx
call sub_4018a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4018a0
jmp Ordinal_MFC42_815
sub_4018b0
call sub_4018c0
jmp sub_4018d0
sub_4018c0
mov ecx rw-data
jmp sub_401860
sub_4018d0
push sub_4018e0
call sub_405dfc
pop ecx
retn
sub_4018e0
mov ecx rw-data
jmp sub_4018a0
sub_401a60
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_401a80
push esi
mov esi ecx
call sub_401aa0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401aa0
jmp Ordinal_MFC42_641
sub_401ab0
retn 0x4
sub_401ac0
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_401ad0
mov eax r--data
retn
sub_401b40
retn 0x4
sub_401b50
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_401b60
retn
sub_401b70
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_401b80
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_401bf0
mov eax [ Ordinal_MFC42_1825@IAT ]
retn
sub_401c00
mov eax r--data
retn
sub_401c10
mov eax [ Ordinal_MFC42_4238@IAT ]
retn
sub_401c20
mov eax r--data
retn
sub_401c30
push esi
mov esi ecx
call Ordinal_MFC42_338
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_401c50
push esi
mov esi ecx
call sub_401c70
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401c70
mov [ ecx ] r--data
jmp Ordinal_MFC42_652
sub_401c80
call Ordinal_MFC42_4823
neg eax
sbb eax eax
neg eax
retn
sub_401c90
mov eax [ ecx + 0x48 ]
retn
sub_401ca0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x48 ] eax
retn 0x4
sub_401cb0
jmp r-xdata
retn
sub_401cd0
call sub_401ce0
jmp sub_401d20
sub_401ce0
mov ecx rw-data
jmp sub_401cf0
sub_401cf0
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
j_sub_4013a0
jmp sub_4013a0
sub_401d20
push sub_401d30
call sub_405dfc
pop ecx
retn
sub_401d30
mov ecx rw-data
jmp j_sub_4013a0
sub_401d40
call sub_401d50
jmp sub_401d80
sub_401d50
mov ecx rw-data
jmp sub_401d60
sub_401d60
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x1
mov eax esi
pop esi
retn
sub_401d80
push sub_401d90
call sub_405dfc
pop ecx
retn
sub_401d90
mov ecx rw-data
jmp j_sub_4013a0
sub_401da0
call sub_401db0
jmp sub_401de0
sub_401db0
mov ecx rw-data
jmp sub_401dc0
sub_401dc0
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_401de0
push sub_401df0
call sub_405dfc
pop ecx
retn
sub_401df0
mov ecx rw-data
jmp j_sub_4013a0
sub_401e00
call sub_401e10
jmp sub_401e40
sub_401e10
mov ecx rw-data
jmp sub_401e20
sub_401e20
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_401e40
push sub_401e50
call sub_405dfc
pop ecx
retn
sub_401e50
mov ecx rw-data
jmp j_sub_4013a0
sub_401e60
call sub_401e70
jmp sub_401ec0
sub_401e70
mov ecx rw-data
jmp sub_401e80
sub_401e80
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_401ea0
push esi
mov esi ecx
call j_sub_4013a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401ec0
push sub_401ed0
call sub_405dfc
pop ecx
retn
sub_401ed0
mov ecx rw-data
jmp j_sub_4013a0
sub_401ee0
call sub_401ef0
jmp sub_401f20
sub_401ef0
mov ecx rw-data
jmp sub_401f00
sub_401f00
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_401f20
push sub_401f30
call sub_405dfc
pop ecx
retn
sub_401f30
mov ecx rw-data
jmp j_sub_4013a0
sub_401f40
call sub_401f50
jmp sub_401f80
sub_401f50
mov ecx rw-data
jmp sub_401f60
sub_401f60
push esi
mov esi ecx
call sub_401360
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_401f80
push sub_401f90
call sub_405dfc
pop ecx
retn
sub_401f90
mov ecx rw-data
jmp j_sub_4013a0
sub_402000
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_402010
mov eax r--data
retn
sub_402020
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_402030
mov eax r--data
retn
sub_402140
push esi
mov esi ecx
call sub_402160
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402160
mov [ ecx ] r--data
jmp Ordinal_MFC42_813
sub_402170
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_5260
retn 0x4
sub_402300
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_2535
retn 0x4
sub_402310
retn 0x8
sub_402760
mov eax 0x1
retn 0x4
sub_402770
call sub_402180
push 0x0
call [ exit@IAT ]
sub_402c30
mov al [ esp + 0x4 ]
push esi
mov esi ecx
test al 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402c50
mov [ ecx ] r--data
retn
sub_402c60
push esi
mov esi ecx
call sub_402c80
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402cd0
push esi
mov esi ecx
call sub_402cf0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402d40
push esi
mov esi ecx
call sub_402d60
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402db0
push esi
mov esi ecx
call sub_402dd0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402e20
mov eax ecx
mov [ eax ] r--data
retn
sub_402e30
push esi
mov esi ecx
call sub_402e50
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402e50
mov [ ecx ] r--data
retn
sub_4055e0
mov eax [ Ordinal_MFC42_1842@IAT ]
retn
sub_4055f0
mov eax r--data
retn
sub_405600
mov eax [ Ordinal_MFC42_4242@IAT ]
retn
sub_405610
mov eax r--data
retn
sub_405680
push esi
mov esi ecx
call sub_4056a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_539
jmp [ Ordinal_MFC42_539@IAT ]
Ordinal_MFC42_800
jmp [ Ordinal_MFC42_800@IAT ]
Ordinal_MFC42_4615
jmp [ Ordinal_MFC42_4615@IAT ]
Ordinal_MFC42_4612
jmp [ Ordinal_MFC42_4612@IAT ]
Ordinal_MFC42_4610
jmp [ Ordinal_MFC42_4610@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_617
jmp [ Ordinal_MFC42_617@IAT ]
Ordinal_MFC42_5301
jmp [ Ordinal_MFC42_5301@IAT ]
Ordinal_MFC42_5214
jmp [ Ordinal_MFC42_5214@IAT ]
Ordinal_MFC42_296
jmp [ Ordinal_MFC42_296@IAT ]
Ordinal_MFC42_986
jmp [ Ordinal_MFC42_986@IAT ]
Ordinal_MFC42_520
jmp [ Ordinal_MFC42_520@IAT ]
Ordinal_MFC42_4159
jmp [ Ordinal_MFC42_4159@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_4696
jmp [ Ordinal_MFC42_4696@IAT ]
Ordinal_MFC42_3058
jmp [ Ordinal_MFC42_3058@IAT ]
Ordinal_MFC42_3065
jmp [ Ordinal_MFC42_3065@IAT ]
Ordinal_MFC42_6336
jmp [ Ordinal_MFC42_6336@IAT ]
Ordinal_MFC42_2510
jmp [ Ordinal_MFC42_2510@IAT ]
Ordinal_MFC42_2542
jmp [ Ordinal_MFC42_2542@IAT ]
Ordinal_MFC42_5243
jmp [ Ordinal_MFC42_5243@IAT ]
Ordinal_MFC42_5740
jmp [ Ordinal_MFC42_5740@IAT ]
Ordinal_MFC42_1746
jmp [ Ordinal_MFC42_1746@IAT ]
Ordinal_MFC42_5577
jmp [ Ordinal_MFC42_5577@IAT ]
Ordinal_MFC42_3172
jmp [ Ordinal_MFC42_3172@IAT ]
Ordinal_MFC42_5653
jmp [ Ordinal_MFC42_5653@IAT ]
Ordinal_MFC42_4420
jmp [ Ordinal_MFC42_4420@IAT ]
Ordinal_MFC42_4953
jmp [ Ordinal_MFC42_4953@IAT ]
Ordinal_MFC42_4858
jmp [ Ordinal_MFC42_4858@IAT ]
Ordinal_MFC42_2399
jmp [ Ordinal_MFC42_2399@IAT ]
Ordinal_MFC42_4387
jmp [ Ordinal_MFC42_4387@IAT ]
Ordinal_MFC42_3454
jmp [ Ordinal_MFC42_3454@IAT ]
Ordinal_MFC42_3198
jmp [ Ordinal_MFC42_3198@IAT ]
Ordinal_MFC42_6080
jmp [ Ordinal_MFC42_6080@IAT ]
Ordinal_MFC42_6175
jmp [ Ordinal_MFC42_6175@IAT ]
Ordinal_MFC42_4623
jmp [ Ordinal_MFC42_4623@IAT ]
Ordinal_MFC42_4426
jmp [ Ordinal_MFC42_4426@IAT ]
Ordinal_MFC42_338
jmp [ Ordinal_MFC42_338@IAT ]
Ordinal_MFC42_652
jmp [ Ordinal_MFC42_652@IAT ]
Ordinal_MFC42_4823
jmp [ Ordinal_MFC42_4823@IAT ]
Ordinal_MFC42_4614
jmp [ Ordinal_MFC42_4614@IAT ]
Ordinal_MFC42_4613
jmp [ Ordinal_MFC42_4613@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_2535
jmp [ Ordinal_MFC42_2535@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_4464
jmp [ Ordinal_MFC42_4464@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_3573
jmp [ Ordinal_MFC42_3573@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_5787
jmp [ Ordinal_MFC42_5787@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2723
jmp [ Ordinal_MFC42_2723@IAT ]
Ordinal_MFC42_2390
jmp [ Ordinal_MFC42_2390@IAT ]
Ordinal_MFC42_3059
jmp [ Ordinal_MFC42_3059@IAT ]
Ordinal_MFC42_5100
jmp [ Ordinal_MFC42_5100@IAT ]
Ordinal_MFC42_5103
jmp [ Ordinal_MFC42_5103@IAT ]
Ordinal_MFC42_4467
jmp [ Ordinal_MFC42_4467@IAT ]
Ordinal_MFC42_4303
jmp [ Ordinal_MFC42_4303@IAT ]
Ordinal_MFC42_3350
jmp [ Ordinal_MFC42_3350@IAT ]
Ordinal_MFC42_5012
jmp [ Ordinal_MFC42_5012@IAT ]
Ordinal_MFC42_975
jmp [ Ordinal_MFC42_975@IAT ]
Ordinal_MFC42_5472
jmp [ Ordinal_MFC42_5472@IAT ]
Ordinal_MFC42_3403
jmp [ Ordinal_MFC42_3403@IAT ]
Ordinal_MFC42_2879
jmp [ Ordinal_MFC42_2879@IAT ]
Ordinal_MFC42_2878
jmp [ Ordinal_MFC42_2878@IAT ]
Ordinal_MFC42_4151
jmp [ Ordinal_MFC42_4151@IAT ]
Ordinal_MFC42_4077
jmp [ Ordinal_MFC42_4077@IAT ]
Ordinal_MFC42_5237
jmp [ Ordinal_MFC42_5237@IAT ]
Ordinal_MFC42_5282
jmp [ Ordinal_MFC42_5282@IAT ]
Ordinal_MFC42_2649
jmp [ Ordinal_MFC42_2649@IAT ]
Ordinal_MFC42_1665
jmp [ Ordinal_MFC42_1665@IAT ]
Ordinal_MFC42_4436
jmp [ Ordinal_MFC42_4436@IAT ]
Ordinal_MFC42_4427
jmp [ Ordinal_MFC42_4427@IAT ]
Ordinal_MFC42_796
jmp [ Ordinal_MFC42_796@IAT ]
Ordinal_MFC42_674
jmp [ Ordinal_MFC42_674@IAT ]
Ordinal_MFC42_554
jmp [ Ordinal_MFC42_554@IAT ]
Ordinal_MFC42_529
jmp [ Ordinal_MFC42_529@IAT ]
Ordinal_MFC42_366
jmp [ Ordinal_MFC42_366@IAT ]
Ordinal_MFC42_807
jmp [ Ordinal_MFC42_807@IAT ]
Ordinal_MFC42_2494
jmp [ Ordinal_MFC42_2494@IAT ]
Ordinal_MFC42_2627
jmp [ Ordinal_MFC42_2627@IAT ]
Ordinal_MFC42_2626
jmp [ Ordinal_MFC42_2626@IAT ]
Ordinal_MFC42_6000
jmp [ Ordinal_MFC42_6000@IAT ]
Ordinal_MFC42_2117
jmp [ Ordinal_MFC42_2117@IAT ]
Ordinal_MFC42_4163
jmp [ Ordinal_MFC42_4163@IAT ]
Ordinal_MFC42_6625
jmp [ Ordinal_MFC42_6625@IAT ]
Ordinal_MFC42_4457
jmp [ Ordinal_MFC42_4457@IAT ]
Ordinal_MFC42_5252
jmp [ Ordinal_MFC42_5252@IAT ]
Ordinal_MFC42_4284
jmp [ Ordinal_MFC42_4284@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_405dd0
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_405dfc
push [ esp + 0x4 ]
call sub_405dd0
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_405f7e
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_405f90
xor eax eax
retn
sub_405f93
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_405fa0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_405fe6
jmp sub_405fe6
sub_405fe6
push 0x600
push 0x0
call sub_405fb8
mov [ rw-data ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
sub_406010
lea ecx [ ebp - 0x214 ]
jmp sub_402e50
sub_40601b
mov eax r--data
jmp __CxxFrameHandler
sub_406030
lea ecx [ ebp - 0x214 ]
jmp sub_402e50
sub_40603b
mov eax r--data
jmp __CxxFrameHandler
sub_406050
mov eax [ ebp - 0x138 ]
push eax
call sub_401b50
retn
sub_40605d
lea ecx [ ebp - 0x134 ]
jmp Ordinal_MFC42_617
sub_406068
mov eax r--data
jmp __CxxFrameHandler
sub_406080
lea ecx [ ebp - 0x6c ]
jmp sub_401aa0
sub_406088
mov eax r--data
jmp __CxxFrameHandler
sub_4060a0
mov eax [ ebp - 0x10 ]
push eax
call sub_401b50
retn
sub_4060aa
mov eax r--data
jmp __CxxFrameHandler
sub_4060c0
mov eax [ ebp - 0x10 ]
push eax
call sub_401b50
retn
sub_4060ca
mov eax r--data
jmp __CxxFrameHandler
sub_4060e0
lea ecx [ ebp - 0x124 ]
jmp sub_401040
sub_4060eb
mov eax r--data
jmp __CxxFrameHandler
sub_406100
lea ecx [ ebp - 0x3c ]
jmp sub_402dd0
sub_406108
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_640
sub_406110
lea ecx [ ebp - 0x44 ]
jmp sub_402cf0
sub_406118
lea ecx [ ebp - 0x4c ]
jmp sub_402d60
sub_406120
lea ecx [ ebp - 0x24 ]
jmp sub_402d60
sub_406128
lea ecx [ ebp - 0x2c ]
jmp sub_402d60
sub_406130
lea ecx [ ebp - 0x34 ]
jmp sub_402d60
sub_406138
lea ecx [ ebp - 0x34 ]
jmp sub_402c50
sub_406140
lea ecx [ ebp - 0x2c ]
jmp sub_402c50
sub_406148
lea ecx [ ebp - 0x24 ]
jmp sub_402c50
sub_406150
lea ecx [ ebp - 0x4c ]
jmp sub_402c50
sub_406158
lea ecx [ ebp - 0x44 ]
jmp sub_402c50
sub_406160
lea ecx [ ebp - 0x3c ]
jmp sub_402c50
sub_406168
mov eax r--data
jmp __CxxFrameHandler
sub_406180
mov ecx [ ebp - 0x10 ]
jmp sub_402c50
sub_406188
mov eax r--data
jmp __CxxFrameHandler
sub_4061a0
mov ecx [ ebp - 0x10 ]
jmp sub_402c50
sub_4061a8
mov eax r--data
jmp __CxxFrameHandler
sub_4061c0
mov ecx [ ebp - 0x10 ]
jmp sub_402c50
sub_4061c8
mov eax r--data
jmp __CxxFrameHandler
sub_4061e0
mov ecx [ ebp - 0x10 ]
jmp sub_402c50
sub_4061e8
mov eax r--data
jmp __CxxFrameHandler
sub_406200
mov eax [ ebp - 0x10 ]
push eax
call sub_401b50
retn
sub_40620a
mov eax r--data
jmp __CxxFrameHandler
sub_406220
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406228
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_406236
mov eax r--data
jmp __CxxFrameHandler
sub_406240
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406248
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_406256
mov eax r--data
jmp __CxxFrameHandler
