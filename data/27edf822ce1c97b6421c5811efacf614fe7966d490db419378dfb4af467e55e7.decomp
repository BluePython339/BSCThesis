sub_401060
push 0xffffffff
push sub_402ed3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
push 0x0
mov [ esp + 0x8 ] esi
call Ordinal_MFC42_561
push 0x730
mov [ esp + 0x18 ] 0x0
mov [ esi ] r--data
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x8 ] eax
test eax eax
mov [ esp + 0x14 ] 0x1
je r-xdata
xor eax eax
mov ecx eax
call sub_4026d0
jmp r-xdata
mov ecx eax
mov [ esp + 0x14 ] 0x0
call sub_4026f0
sub_401150
push 0xffffffff
push sub_402eeb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc0
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
add esp 0x4
lea ecx [ esp + 0x4 ]
push 0x0
call sub_4011f0
lea eax [ esp + 0x4 ]
lea ecx [ esp + 0x4 ]
mov [ esp + 0xcc ] 0x0
mov [ esi + 0x20 ] eax
call Ordinal_MFC42_2514
lea ecx [ esp + 0x4 ]
mov [ esp + 0xcc ] 0xffffffff
call sub_401310
mov ecx [ esp + 0xc4 ]
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0xcc
retn
sub_4011f0
push 0xffffffff
push sub_402f53
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
mov eax [ esp + 0x14 ]
push esi
push edi
mov esi ecx
push eax
push 0x66
mov [ esp + 0x10 ] esi
call Ordinal_MFC42_324
xor edi edi
lea ecx [ esi + 0x64 ]
mov [ esp + 0x14 ] edi
call Ordinal_MFC42_323
mov [ esi + 0x78 ] edi
mov [ esi + 0x74 ] r--data
lea ecx [ esi + 0x7c ]
mov [ esp + 0x14 ] 0x2
call Ordinal_MFC42_323
mov [ esi + 0x90 ] edi
mov [ esi + 0x8c ] r--data
lea ecx [ esi + 0x94 ]
mov [ esp + 0x14 ] 0x4
call Ordinal_MFC42_323
mov [ esi + 0xa8 ] edi
mov [ esi + 0xa4 ] r--data
mov [ esp + 0x14 ] 0x6
mov [ esi ] r--data
call Ordinal_MFC42_1168
push 0x80
push 0xe
push 0x80
call Ordinal_MFC42_1146
push eax
call [ LoadIconA@IAT ]
mov [ esi + 0x60 ] eax
or eax 0xffffffff
push 0x150
mov [ esi + 0xbc ] eax
mov [ esi + 0xb8 ] eax
mov [ esi + 0xb0 ] 0x7
mov [ esi + 0xb4 ] 0xc
call Ordinal_MFC42_823
mov ecx [ esp + 0x10 ]
add esp 0x4
mov [ esi + 0xac ] eax
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn 0x4
sub_401310
push 0xffffffff
push sub_402fcb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push esi
mov esi ecx
push edi
mov [ esp + 0x8 ] esi
mov [ esi ] r--data
mov eax [ esi + 0xac ]
mov [ esp + 0x18 ] 0x6
push eax
call Ordinal_MFC42_825
lea edi [ esi + 0xa4 ]
add esp 0x4
mov [ esp + 0xc ] edi
mov [ edi ] r--data
mov ecx edi
mov [ esp + 0x18 ] 0x7
call Ordinal_MFC42_2414
lea ecx [ esi + 0x94 ]
mov [ edi ] r--data
mov [ esp + 0x18 ] 0x4
call Ordinal_MFC42_640
lea edi [ esi + 0x8c ]
mov [ esp + 0xc ] edi
mov [ edi ] r--data
mov ecx edi
mov [ esp + 0x18 ] 0x8
call Ordinal_MFC42_2414
lea ecx [ esi + 0x7c ]
mov [ edi ] r--data
mov [ esp + 0x18 ] 0x2
call Ordinal_MFC42_640
lea edi [ esi + 0x74 ]
mov [ esp + 0xc ] edi
mov [ edi ] r--data
mov ecx edi
mov [ esp + 0x18 ] 0x9
call Ordinal_MFC42_2414
lea ecx [ esi + 0x64 ]
mov [ edi ] r--data
mov [ esp + 0x18 ] 0x0
call Ordinal_MFC42_640
mov ecx esi
mov [ esp + 0x18 ] 0xffffffff
call Ordinal_MFC42_641
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x14
retn
sub_401430
push ebx
push ebp
push esi
push edi
mov esi ecx
call Ordinal_MFC42_4710
mov eax [ esi + 0x60 ]
mov ecx [ esi + 0x20 ]
mov edi [ SendMessageA@IAT ]
push eax
push 0x1
push 0x80
push ecx
call edi
mov edx [ esi + 0x60 ]
mov eax [ esi + 0x20 ]
push edx
push 0x0
push 0x80
push eax
call edi
mov ecx [ esi + 0x20 ]
push ecx
call [ GetDC@IAT ]
push eax
call Ordinal_MFC42_2859
mov ebx eax
test ebx ebx
je r-xdata
mov ebp [ CreateCompatibleDC@IAT ]
push eax
call ebp
push eax
lea ecx [ esi + 0x64 ]
call Ordinal_MFC42_1640
push 0x83
push 0x2
push 0x83
lea edi [ esi + 0x74 ]
call Ordinal_MFC42_1146
push eax
call [ LoadBitmapA@IAT ]
push eax
mov ecx edi
call Ordinal_MFC42_1641
test edi edi
je r-xdata
mov eax [ ebx + 0x4 ]
mov edx [ esi + 0x68 ]
push edi
push edx
call Ordinal_MFC42_5785
test ebx ebx
jne r-xdata
mov edi [ edi + 0x4 ]
mov eax [ ebx + 0x4 ]
xor eax eax
jmp r-xdata
mov eax [ esi + 0x80 ]
push edi
push eax
call Ordinal_MFC42_5785
test ebx ebx
jne r-xdata
mov edi [ edi + 0x4 ]
push eax
call ebp
push eax
lea ecx [ esi + 0x7c ]
call Ordinal_MFC42_1640
push 0x82
push 0x2
push 0x82
lea edi [ esi + 0x8c ]
call Ordinal_MFC42_1146
push eax
call [ LoadBitmapA@IAT ]
push eax
mov ecx edi
call Ordinal_MFC42_1641
test edi edi
je r-xdata
mov eax [ ebx + 0x4 ]
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x98 ]
push edi
push ecx
call Ordinal_MFC42_5785
mov ecx esi
call sub_4015c0
call Ordinal_MFC42_1175
pop edi
pop esi
pop ebp
pop ebx
test eax eax
je r-xdata
mov edi [ edi + 0x4 ]
push eax
call ebp
push eax
lea ecx [ esi + 0x94 ]
call Ordinal_MFC42_1640
mov ecx [ esi + 0xb0 ]
lea edi [ esi + 0xa4 ]
mov eax ecx
shl eax 0x4
add eax ecx
lea ecx [ eax + eax * 2 + 0x5 ]
mov eax [ esi + 0xb4 ]
push ecx
lea edx [ eax + eax * 4 ]
lea eax [ eax + edx * 8 + 0x5 ]
push eax
mov eax [ ebx + 0x4 ]
push eax
call [ CreateCompatibleBitmap@IAT ]
push eax
mov ecx edi
call Ordinal_MFC42_1641
test edi edi
je r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
call [ edx + 0x7c ]
jmp r-xdata
mov eax [ eax + 0x20 ]
push 0x3
push 0x0
push 0x0
push 0x0
push 0x0
push 0xffffffff
push eax
call [ SetWindowPos@IAT ]
mov eax 0x1
retn
sub_4015c0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_402fe8
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
xor eax eax
push ebx
push esi
mov esi ecx
push edi
mov ecx [ esi + 0xb0 ]
imul ecx [ esi + 0xb4 ]
test ecx ecx
jle r-xdata
push 0x0
call [ time@IAT ]
push eax
call [ srand@IAT ]
add esp 0x8
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_341
mov eax [ esi + 0xb0 ]
xor edi edi
imul eax [ esi + 0xb4 ]
cdq
and edx 0x3
mov [ esp + 0x34 ] 0x0
add eax edx
sar eax 0x2
test eax eax
jle r-xdata
mov edx [ esi + 0xac ]
inc eax
mov [ edx + eax * 4 - 0x4 ] 0xffffffff
mov ecx [ esi + 0xb0 ]
imul ecx [ esi + 0xb4 ]
cmp eax ecx
jl r-xdata
mov eax [ esi + 0xb0 ]
xor edi edi
imul eax [ esi + 0xb4 ]
test eax eax
jle r-xdata
mov ebx 0x4
mov eax [ esi + 0x20 ]
push 0x1
push 0x0
push eax
call [ InvalidateRect@IAT ]
lea ecx [ esp + 0x18 ]
mov [ esp + 0x34 ] 0xffffffff
call Ordinal_MFC42_654
mov ecx [ esp + 0x2c ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x2c
retn
mov ebx [ rand@IAT ]
push ebp
mov edx [ esp + 0x20 ]
push edi
push edx
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_5858
dec ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
inc edi
imul eax [ esi + 0xb4 ]
cdq
and edx 0x3
add eax edx
sar eax 0x2
cmp edi eax
jl r-xdata
mov ebp [ esp + 0x24 ]
call ebx
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fmul [ r--data ]
fstp [ esp + 0x14 ]
call ebx
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fmul [ r--data ]
fadd [ esp + 0x14 ]
fstp [ esp + 0x14 ]
call ebx
mov [ esp + 0x10 ] eax
fild [ esp + 0x10 ]
fadd [ esp + 0x14 ]
call _ftol
cdq
idiv ebp
mov ecx [ esp + 0x20 ]
push 0x1
push edx
mov eax [ ecx + edx * 4 ]
mov ecx [ esi + 0xac ]
mov [ ecx + edi * 4 ] eax
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_5603
mov edx [ esi + 0xb0 ]
inc edi
imul edx [ esi + 0xb4 ]
cmp edi edx
jl r-xdata
pop ebp
sub_401750
sub esp 0x8
push esi
mov esi ecx
push edi
push 0x808080
mov ecx [ esi + 0xb0 ]
xor edi edi
mov eax ecx
shl eax 0x4
add eax ecx
lea eax [ eax + eax * 2 + 0x5 ]
push eax
mov eax [ esi + 0xb4 ]
lea ecx [ eax + eax * 4 ]
lea edx [ eax + ecx * 8 + 0x5 ]
mov ecx [ esp + 0x1c ]
push edx
push edi
push edi
call Ordinal_MFC42_2753
mov eax [ esi + 0xb0 ]
mov [ esp + 0xc ] edi
cmp eax edi
jle r-xdata
pop edi
pop esi
add esp 0x8
retn 0x4
push ebx
push ebp
mov [ esp + 0x10 ] edi
mov ecx [ esp + 0x10 ]
mov eax [ esi + 0xb0 ]
inc edi
add ecx 0x33
cmp edi eax
mov [ esp + 0x14 ] edi
mov [ esp + 0x10 ] ecx
jl r-xdata
xor ebx ebx
mov eax [ esi + 0xb4 ]
xor ebp ebp
test eax eax
jle r-xdata
pop ebp
pop ebx
mov eax [ esi + 0xb4 ]
inc ebp
add ebx 0x29
cmp ebp eax
jl r-xdata
lea eax [ esi + 0x64 ]
test eax eax
je r-xdata
imul eax edi
mov ecx [ esi + 0xac ]
add eax ebp
cmp [ ecx + eax * 4 ] 0xffffffff
je r-xdata
mov edx [ esp + 0x10 ]
push 0xcc0020
push 0x38
push 0x0
push eax
mov eax [ esp + 0x2c ]
push 0x38
push 0x2e
mov ecx [ eax + 0x4 ]
push edx
push ebx
push ecx
call [ BitBlt@IAT ]
mov edx [ esi + 0xb4 ]
mov eax [ esi + 0xac ]
imul edx edi
add edx ebp
lea edi [ esi + 0x7c ]
mov ecx [ eax + edx * 4 ]
lea eax [ ecx + ecx * 4 ]
shl eax 0x3
sub eax ecx
test edi edi
jne r-xdata
mov eax [ eax + 0x4 ]
mov ecx [ edi + 0x4 ]
xor ecx ecx
jmp r-xdata
mov ecx [ esp + 0x1c ]
push 0xee0086
push eax
mov eax [ esp + 0x18 ]
mov edx [ ecx + 0x4 ]
push 0x0
push edi
push 0x27
push 0x27
push eax
push ebx
push edx
call [ BitBlt@IAT ]
mov edi [ esp + 0x14 ]
mov edi [ edi + 0x4 ]
mov edx [ esp + 0x1c ]
push 0x8800c6
push eax
push 0x27
mov eax [ edx + 0x4 ]
push ecx
mov ecx [ esp + 0x20 ]
push 0x27
push 0x27
push ecx
push ebx
push eax
call [ BitBlt@IAT ]
mov ecx [ esi + 0xb4 ]
mov edx [ esi + 0xac ]
imul ecx [ esp + 0x14 ]
add ecx ebp
mov ecx [ edx + ecx * 4 ]
lea eax [ ecx + ecx * 4 ]
shl eax 0x3
sub eax ecx
test edi edi
je r-xdata
sub_4018e0
push 0xffffffff
push sub_403008
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x54
push esi
mov esi ecx
push edi
push esi
lea ecx [ esp + 0xc ]
call Ordinal_MFC42_470
lea edi [ esi + 0x94 ]
mov ecx esi
push edi
mov [ esp + 0x68 ] 0x0
call sub_401750
mov eax [ esi + 0xb4 ]
mov ecx eax
shl ecx 0x4
add ecx eax
lea edx [ eax + eax * 4 ]
test edi edi
lea ecx [ ecx + ecx * 2 ]
lea eax [ eax + edx * 8 ]
je r-xdata
push 0xcc0020
push 0x0
push 0x0
push edi
push ecx
push eax
mov eax [ esp + 0x24 ]
push 0x0
push 0x0
push eax
call [ BitBlt@IAT ]
lea ecx [ esp + 0x8 ]
mov [ esp + 0x64 ] 0xffffffff
call Ordinal_MFC42_755
mov ecx [ esp + 0x5c ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x60
retn
mov edi [ edi + 0x4 ]
sub_401980
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_403030
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push ebp
push esi
push edi
mov edi ecx
mov esi 0x29
mov ecx [ esp + 0x3c ]
mov ebx 0x33
mov eax ecx
cdq
idiv esi
mov eax 0x63e7063f
mov esi edx
neg esi
sbb esi esi
imul ecx
mov ecx [ esp + 0x40 ]
sar edx 0x4
neg esi
mov eax edx
add edx esi
shr eax 0x1f
lea esi [ eax + edx - 0x1 ]
mov eax ecx
cdq
idiv ebx
mov eax 0xa0a0a0a1
mov ebx edx
neg ebx
sbb ebx ebx
imul ecx
mov eax [ edi + 0xb4 ]
add edx ecx
sar edx 0x5
neg ebx
mov ecx edx
add edx ebx
shr ecx 0x1f
cmp esi eax
lea ebp [ ecx + edx - 0x1 ]
jge r-xdata
mov ecx edi
call sub_402310
test eax eax
je r-xdata
cmp ebp [ edi + 0xb0 ]
jge r-xdata
mov ecx [ esp + 0x28 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x24
retn 0xc
push 0x0
push 0x0
push rw-data
mov ecx edi
call Ordinal_MFC42_4224
mov ecx edi
call sub_4015c0
mov ecx eax
mov edx [ edi + 0xac ]
imul ecx ebp
add ecx esi
mov ecx [ edx + ecx * 4 ]
cmp ecx 0xffffffff
mov [ esp + 0x3c ] ecx
je r-xdata
mov ecx [ edi + 0xb8 ]
cmp ecx 0xffffffff
jne r-xdata
cmp ecx esi
jne r-xdata
mov edx [ edi + 0x20 ]
mov [ edi + 0xb8 ] esi
push edx
mov [ edi + 0xbc ] ebp
call [ GetDC@IAT ]
push eax
call Ordinal_MFC42_2859
mov ebx eax
xor eax eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] r--data
push 0xff
push 0x4
push eax
mov [ esp + 0x3c ] eax
call [ CreatePen@IAT ]
push eax
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_1641
lea eax [ esp + 0x18 ]
mov ecx ebx
push eax
call Ordinal_MFC42_5788
mov [ esp + 0x14 ] eax
mov eax ebp
shl eax 0x4
add eax ebp
lea ecx [ esi + esi * 4 ]
lea edx [ esp + 0x20 ]
lea eax [ eax + eax * 2 ]
lea ecx [ esi + ecx * 8 ]
push eax
mov [ esp + 0x40 ] ecx
push ecx
push edx
mov ecx ebx
mov [ esp + 0x1c ] eax
call Ordinal_MFC42_4297
inc ebp
mov ecx ebx
mov eax ebp
shl eax 0x4
add eax ebp
lea ebp [ eax + eax * 2 ]
mov eax [ esp + 0x3c ]
push ebp
push eax
call Ordinal_MFC42_4133
lea ecx [ esi + esi * 4 + 0x5 ]
push ebp
lea esi [ esi + ecx * 8 + 0x1 ]
mov ecx ebx
push esi
call Ordinal_MFC42_4133
mov ebp [ esp + 0x10 ]
mov ecx ebx
push ebp
push esi
call Ordinal_MFC42_4133
mov edx [ esp + 0x3c ]
push ebp
push edx
mov ecx ebx
call Ordinal_MFC42_4133
mov eax [ esp + 0x14 ]
mov ecx ebx
push eax
call Ordinal_MFC42_5788
mov [ esp + 0x18 ] r--data
lea ecx [ esp + 0x18 ]
mov [ esp + 0x30 ] 0x1
call Ordinal_MFC42_2414
mov [ esp + 0x30 ] 0xffffffff
mov [ esp + 0x18 ] r--data
jmp r-xdata
mov ebx [ edi + 0xbc ]
imul ebx eax
mov eax [ esp + 0x3c ]
add ebx ecx
cmp [ edx + ebx * 4 ] eax
jne r-xdata
cmp [ edi + 0xbc ] ebp
je r-xdata
mov edx [ edi + 0x20 ]
push 0x0
or eax 0xffffffff
push 0x0
push edx
mov [ edi + 0xb8 ] eax
mov [ edi + 0xbc ] eax
call [ InvalidateRect@IAT ]
mov eax [ edi + 0xbc ]
push ebp
push esi
push eax
push ecx
mov ecx edi
call sub_402240
test eax eax
je r-xdata
mov ecx [ edi + 0xb4 ]
mov edx [ edi + 0xb8 ]
imul ecx [ edi + 0xbc ]
add ecx edx
mov edx [ edi + 0xac ]
mov [ edx + ecx * 4 ] 0xffffffff
mov eax [ edi + 0xb4 ]
imul eax ebp
mov ecx [ edi + 0xac ]
add eax esi
mov [ ecx + eax * 4 ] 0xffffffff
sub_401c00
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov edi [ esp + 0x1c ]
cmp ebp edi
mov esi ecx
jle r-xdata
lea eax [ ebp + 0x1 ]
cmp eax edi
jg r-xdata
mov eax ebp
mov ebp edi
mov edi eax
mov eax [ esp + 0x14 ]
push 0x0
push ebp
mov ecx esi
lea ebx [ eax - 0x1 ]
push ebx
call sub_402130
test eax eax
je r-xdata
je r-xdata
mov ecx [ esp + 0x14 ]
push 0x1
push ebp
lea ebx [ ecx + 0x1 ]
mov ecx esi
push ebx
call sub_402130
test eax eax
je r-xdata
push 0x0
push edi
push ebx
mov ecx esi
call sub_402130
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
mov ecx [ esi + 0xb4 ]
mov edx [ esp + 0x14 ]
imul ecx eax
add ecx edx
mov edx [ esi + 0xac ]
cmp [ edx + ecx * 4 ] 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
push 0x1
push edi
push ebx
mov ecx esi
call sub_402130
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
inc eax
cmp eax edi
jle r-xdata
sub_401cb0
push ebx
push ebp
mov ebp [ esp + 0xc ]
push esi
push edi
mov edi [ esp + 0x18 ]
cmp ebp edi
mov esi ecx
jle r-xdata
lea eax [ ebp + 0x1 ]
cmp eax edi
jg r-xdata
mov eax ebp
mov ebp edi
mov edi eax
mov eax [ esp + 0x1c ]
push 0x0
mov ecx esi
lea ebx [ eax - 0x1 ]
push ebx
push ebp
call sub_4021b0
test eax eax
je r-xdata
je r-xdata
mov ecx [ esp + 0x1c ]
push 0x1
lea ebx [ ecx + 0x1 ]
mov ecx esi
push ebx
push ebp
call sub_4021b0
test eax eax
je r-xdata
push 0x0
push ebx
push edi
mov ecx esi
call sub_4021b0
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
mov ecx [ esi + 0xb4 ]
mov edx [ esi + 0xac ]
imul ecx [ esp + 0x1c ]
add ecx eax
cmp [ edx + ecx * 4 ] 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
push 0x1
push ebx
push edi
mov ecx esi
call sub_4021b0
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0xc
inc eax
cmp eax edi
jle r-xdata
sub_401d60
mov edx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x10 ]
push edi
cmp edx esi
jle r-xdata
mov eax [ ecx + 0xb4 ]
mov ecx [ ecx + 0xac ]
push ebx
mov ebx [ esp + 0x10 ]
lea edi [ eax * 4 ]
imul eax edx
add eax ebx
pop ebx
lea eax [ ecx + eax * 4 ]
mov eax edx
mov edx esi
mov esi eax
cmp edx esi
jg r-xdata
pop edi
xor eax eax
pop esi
retn 0xc
cmp edx esi
je r-xdata
pop edi
mov eax 0x1
pop esi
retn 0xc
inc edx
add eax edi
cmp edx esi
jle r-xdata
cmp [ eax ] 0xffffffff
jne r-xdata
sub_401dc0
mov edx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
cmp edx eax
push esi
jle r-xdata
mov esi [ ecx + 0xb4 ]
mov ecx [ ecx + 0xac ]
imul esi [ esp + 0x10 ]
add esi edx
lea ecx [ ecx + esi * 4 ]
mov esi edx
mov edx eax
mov eax esi
cmp edx eax
jg r-xdata
xor eax eax
pop esi
retn 0xc
cmp edx eax
je r-xdata
mov eax 0x1
pop esi
retn 0xc
inc edx
add ecx 0x4
cmp edx eax
jle r-xdata
cmp [ ecx ] 0xffffffff
jne r-xdata
sub_401e10
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
push edi
mov edi [ esp + 0x14 ]
cmp edi esi
mov ebx ecx
jle r-xdata
mov ebp [ esp + 0x20 ]
mov eax [ esp + 0x18 ]
mov ebp [ esp + 0x18 ]
mov eax edi
mov edi esi
mov esi eax
mov eax [ esp + 0x20 ]
mov [ esp + 0x18 ] eax
jmp r-xdata
lea ecx [ edi + 0x1 ]
push ecx
mov ecx ebx
call sub_401dc0
test eax eax
je r-xdata
lea eax [ edi + 0x1 ]
mov ecx ebx
push eax
call sub_401dc0
test eax eax
je r-xdata
cmp ebp eax
push eax
push esi
jge r-xdata
push ebp
dec esi
push edi
push esi
mov ecx ebx
call sub_401dc0
test eax eax
je r-xdata
mov eax [ esp + 0x18 ]
lea edx [ ebp - 0x1 ]
push edx
push eax
push esi
mov ecx ebx
call sub_401d60
test eax eax
je r-xdata
push ebp
dec esi
push edi
push esi
mov ecx ebx
call sub_401dc0
test eax eax
je r-xdata
mov edx [ esp + 0x18 ]
lea ecx [ ebp + 0x1 ]
push ecx
push edx
push esi
mov ecx ebx
call sub_401d60
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x10
mov ecx [ esp + 0x18 ]
inc ecx
push ecx
push ebp
push edi
mov ecx ebx
call sub_401d60
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
mov eax [ esp + 0x18 ]
mov ecx ebx
dec eax
push eax
push ebp
push edi
call sub_401d60
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
sub_401f10
push ebx
mov ebx [ esp + 0x10 ]
push ebp
mov ebp [ esp + 0xc ]
push esi
cmp ebp ebx
push edi
mov esi ecx
jle r-xdata
mov edi [ esp + 0x18 ]
mov edi [ esp + 0x20 ]
mov eax ebp
mov [ esp + 0x1c ] eax
mov eax [ esp + 0x18 ]
mov ebp ebx
mov ebx [ esp + 0x1c ]
mov [ esp + 0x20 ] eax
jmp r-xdata
lea eax [ ebp - 0x1 ]
push 0x0
push edi
push eax
mov ecx esi
call sub_402130
test eax eax
je r-xdata
mov eax [ esp + 0x20 ]
push 0x1
lea ecx [ ebx + 0x1 ]
push eax
push ecx
mov ecx esi
call sub_402130
test eax eax
je r-xdata
lea eax [ ebp + 0x1 ]
push 0x1
push edi
push eax
mov ecx esi
call sub_402130
test eax eax
je r-xdata
lea eax [ edi - 0x1 ]
push 0x0
push eax
push ebp
mov ecx esi
mov [ esp + 0x24 ] eax
call sub_4021b0
test eax eax
je r-xdata
mov edx [ esp + 0x20 ]
push 0x0
lea eax [ ebx - 0x1 ]
push edx
push eax
mov ecx esi
call sub_402130
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
lea eax [ edi + 0x1 ]
push 0x1
push eax
push ebp
mov ecx esi
mov [ esp + 0x20 ] eax
call sub_4021b0
test eax eax
je r-xdata
mov ecx [ esp + 0x20 ]
push 0x0
dec ecx
push ecx
push ebx
mov ecx esi
call sub_4021b0
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
mov eax [ esi + 0xb4 ]
lea ebx [ ebp + 0x1 ]
cmp ebx eax
jge r-xdata
mov edx [ esp + 0x20 ]
push 0x1
inc edx
mov ecx esi
push edx
push ebx
call sub_4021b0
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
lea ebx [ ebp - 0x1 ]
cmp ebx 0xffffffff
jle r-xdata
imul eax edi
mov ecx [ esi + 0xac ]
add eax ebx
cmp [ ecx + eax * 4 ] 0xffffffff
jg r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
mov edi [ esp + 0x18 ]
cmp edi 0xffffffff
jle r-xdata
mov ecx [ esi + 0xb4 ]
mov edx [ esi + 0xac ]
imul ecx edi
add ecx ebx
cmp [ edx + ecx * 4 ] 0xffffffff
jne r-xdata
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x1c ]
push edx
push eax
push edi
push ebx
mov ecx esi
call sub_401e10
test eax eax
jne r-xdata
mov edi [ esp + 0x14 ]
mov eax [ esi + 0xb0 ]
cmp edi eax
jge r-xdata
mov edx [ esi + 0xb4 ]
mov eax [ esi + 0xac ]
imul edx edi
add edx ebp
cmp [ eax + edx * 4 ] 0xffffffff
jne r-xdata
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x1c ]
push eax
push ecx
push edi
push ebx
mov ecx esi
call sub_401e10
test eax eax
jne r-xdata
mov eax [ esi + 0xb4 ]
inc ebx
cmp ebx eax
jl r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x10
mov eax [ esi + 0xb4 ]
mov ecx [ esi + 0xac ]
imul eax edi
add eax ebp
cmp [ ecx + eax * 4 ] 0xffffffff
jne r-xdata
mov ecx [ esp + 0x20 ]
mov edx [ esp + 0x1c ]
push ecx
push edx
push edi
push ebp
mov ecx esi
call sub_401e10
test eax eax
jne r-xdata
dec ebx
cmp ebx 0xffffffff
jg r-xdata
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x1c ]
push edx
push eax
push edi
push ebp
mov ecx esi
call sub_401e10
test eax eax
jne r-xdata
dec edi
cmp edi 0xffffffff
jg r-xdata
mov eax [ esi + 0xb0 ]
inc edi
cmp edi eax
jl r-xdata
sub_402130
mov eax [ esp + 0xc ]
push esi
test eax eax
je r-xdata
mov edx [ esp + 0x8 ]
xor eax eax
test edx edx
jl r-xdata
mov edx [ esp + 0x8 ]
mov eax [ ecx + 0xb4 ]
cmp edx eax
jge r-xdata
mov eax 0x1
pop esi
retn 0xc
mov esi [ ecx + 0xb4 ]
mov ecx [ ecx + 0xac ]
imul esi [ esp + 0xc ]
lea ecx [ ecx + esi * 4 ]
mov esi eax
mov ecx [ ecx + 0xac ]
imul esi [ esp + 0xc ]
add esi edx
lea ecx [ ecx + esi * 4 ]
xor eax eax
pop esi
retn 0xc
inc eax
add ecx 0x4
cmp eax edx
jle r-xdata
inc edx
add ecx 0x4
cmp edx eax
jl r-xdata
cmp [ ecx ] 0xffffffff
jne r-xdata
mov eax 0x1
pop esi
retn 0xc
cmp [ ecx ] 0xffffffff
jne r-xdata
sub_4021b0
mov eax [ esp + 0xc ]
push esi
test eax eax
push edi
je r-xdata
mov esi [ esp + 0x10 ]
xor edx edx
test esi esi
jl r-xdata
mov edx [ esp + 0x10 ]
mov esi [ ecx + 0xb0 ]
cmp edx esi
jge r-xdata
pop edi
mov eax 0x1
pop esi
retn 0xc
mov eax [ ecx + 0xb4 ]
mov ecx [ ecx + 0xac ]
mov edi [ esp + 0xc ]
shl eax 0x2
lea ecx [ ecx + edi * 4 ]
mov eax [ ecx + 0xb4 ]
mov ecx [ ecx + 0xac ]
push ebx
mov ebx [ esp + 0x10 ]
lea edi [ eax * 4 ]
imul eax edx
add eax ebx
pop ebx
lea eax [ ecx + eax * 4 ]
pop edi
xor eax eax
pop esi
retn 0xc
inc edx
add ecx eax
cmp edx esi
jle r-xdata
inc edx
add eax edi
cmp edx esi
jl r-xdata
cmp [ ecx ] 0xffffffff
jne r-xdata
pop edi
mov eax 0x1
pop esi
retn 0xc
cmp [ eax ] 0xffffffff
jne r-xdata
sub_402240
mov eax [ esp + 0xc ]
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
push edi
cmp ebx eax
mov edi ecx
jne r-xdata
mov esi [ esp + 0x18 ]
mov ebp [ esp + 0x20 ]
cmp esi ebp
jne r-xdata
mov ebp [ esp + 0x20 ]
mov esi [ esp + 0x18 ]
push ebp
push esi
push ebx
call sub_401c00
test eax eax
je r-xdata
push ebp
push eax
push esi
push ebx
mov ecx edi
call sub_401e10
test eax eax
je r-xdata
push esi
push eax
push ebx
mov ecx edi
call sub_401cb0
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
mov eax [ esp + 0x1c ]
push ebp
push eax
push esi
push ebx
mov ecx edi
call sub_401f10
neg eax
pop edi
pop esi
sbb eax eax
pop ebp
neg eax
pop ebx
retn 0x10
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn 0x10
sub_4022e0
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
cmp [ edi + 0x4 ] 0x100
jne r-xdata
push edi
mov ecx esi
call Ordinal_MFC42_5280
pop edi
pop esi
retn 0x4
cmp [ edi + 0x8 ] 0x71
jne r-xdata
call sub_4015c0
sub_402310
mov eax [ ecx + 0xb4 ]
xor edx edx
imul eax [ ecx + 0xb0 ]
test eax eax
jle r-xdata
mov eax 0x1
retn
mov ecx [ ecx + 0xac ]
xor eax eax
retn
inc edx
add ecx 0x4
cmp edx eax
jl r-xdata
cmp [ ecx ] 0xffffffff
jne r-xdata
sub_402390
push 0xffffffff
push sub_403048
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402400
push 0xffffffff
push sub_403068
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402470
push 0xffffffff
push sub_403088
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] r--data
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_402540
mov eax [ esp + 0x8 ]
push esi
mov esi ecx
push edi
mov edi [ lstrcpynA@IAT ]
push 0x104
lea ecx [ esi + 0x104 ]
push eax
push ecx
call edi
mov edx [ esp + 0xc ]
push 0x104
push edx
push esi
call edi
pop edi
mov eax 0x1
pop esi
retn 0x8
sub_402580
sub esp 0x8
push ebx
push ebp
push esi
mov esi [ RegCreateKeyA@IAT ]
lea eax [ esp + 0xc ]
push edi
push eax
xor ebx ebx
push rw-data
mov edi ecx
push 0x80000002
mov [ esp + 0x1c ] ebx
call esi
cmp eax ebx
je r-xdata
mov ebp [ RegSetValueExA@IAT ]
mov [ esp + 0x14 ] ebx
mov ebx [ lstrlenA@IAT ]
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
push 0x80000001
call esi
cmp eax ebx
jne r-xdata
mov ecx [ esp + 0x10 ]
push ecx
call [ RegCloseKey@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x8
retn
push edi
call ebx
lea esi [ edi + 0x104 ]
test eax eax
push esi
jg r-xdata
call ebx
push eax
mov eax [ esp + 0x14 ]
push esi
push 0x1
push 0x0
push edi
push eax
call ebx
mov edx [ esp + 0x10 ]
push eax
push esi
push 0x1
push 0x0
push 0x0
push edx
jmp r-xdata
cmp [ esp + 0x14 ] 0xa
jge r-xdata
call ebp
mov edx [ esp + 0x14 ]
inc edx
test eax eax
mov [ esp + 0x14 ] edx
je r-xdata
sub_4026f0
push 0xffffffff
push sub_4030ab
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x8
push ebx
push ebp
push esi
mov ebp ecx
push 0x730
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0xc ] eax
xor ebx ebx
cmp eax ebx
mov [ esp + 0x1c ] ebx
je r-xdata
push edi
mov ecx 0x1cc
mov esi ebp
mov edi ebx
[ edi ] [ esi ]
mov eax [ ebp + 0x110 ]
mov [ esp + 0x20 ] 0xffffffff
test eax eax
pop edi
je r-xdata
mov ecx eax
call sub_402860
mov ebx eax
mov eax [ ebp + 0x31c ]
test eax eax
je r-xdata
lea eax [ ebp + 0x218 ]
lea ecx [ ebp + 0x114 ]
push eax
push ecx
mov ecx rw-data
call sub_402540
mov ecx rw-data
call sub_402580
push 0x0
push 0x1735
push rw-data
mov ecx ebx
call sub_402870
push eax
call Ordinal_MFC42_823
add esp 0x4
mov esi eax
mov ecx ebx
push esi
push 0x1735
push rw-data
call sub_402870
lea ecx [ esp + 0x10 ]
push ecx
push 0x40
push eax
push esi
call [ VirtualProtect@IAT ]
call esi
mov esi [ Sleep@IAT ]
push 0x3e8
call esi
push 0x3e8
call esi
push 0x3e8
call esi
push 0x3e8
call esi
push 0x3e8
call esi
push 0x0
call [ exit@IAT ]
lea edx [ ebp + 0x62c ]
lea eax [ ebp + 0x528 ]
push edx
add ebp 0x320
push eax
push ebp
mov ecx rw-data
call sub_402990
mov ecx rw-data
call sub_402a10
sub_402870
mov eax [ esp + 0x4 ]
mov edx ecx
push ebx
push ebp
mov ecx [ eax ]
push esi
mov [ edx + 0x108 ] ecx
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
mov ebp ecx
push edi
add esi eax
lea edi [ edx + 0x1 ]
mov ebx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
mov edi [ eax + 0xc ]
mov ecx [ edx + 0x10c ]
mov ebx [ ebx + 0x8 ]
add eax edi
dec ecx
jne r-xdata
mov eax [ esp + 0x14 ]
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
mov ecx [ esp + 0x1c ]
push ecx
push ebx
push eax
mov ecx edx
call sub_4028d0
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
sub_4028d0
push esi
push edi
mov edi ecx
mov ecx [ esp + 0x14 ]
mov esi [ edi + 0x108 ]
test ecx ecx
jne r-xdata
mov edx [ esp + 0x10 ]
push ebx
xor ebx ebx
test edx edx
jbe r-xdata
mov eax [ esp + 0x10 ]
pop edi
add eax esi
pop esi
retn 0xc
pop ebx
pop edi
mov eax edx
pop esi
retn 0xc
push ebp
mov ebp [ esp + 0x14 ]
sub ebp ecx
lea eax [ edx - 0x14 ]
cmp ebx eax
jbe r-xdata
add ecx ebx
inc ebx
cmp ebx edx
jb r-xdata
push ecx
push rw-data
call [ printf@IAT ]
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x20 ]
add esp 0x8
mov dl [ edi + eax + 0x1 ]
xor dl [ ecx + ebp ]
inc eax
cmp eax esi
mov [ ecx ] dl
jl r-xdata
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
xor eax eax
test esi esi
jle r-xdata
pop ebp
sub_402990
mov eax [ esp + 0x4 ]
push esi
push edi
mov edi [ lstrcpynA@IAT ]
mov esi ecx
push 0x104
push eax
push esi
call edi
mov ecx [ esp + 0x10 ]
push 0x104
lea edx [ esi + 0x104 ]
push ecx
push edx
call edi
mov eax [ esp + 0x14 ]
push 0x104
lea ecx [ esi + 0x208 ]
push eax
push ecx
call edi
xor eax eax
mov ecx 0x1
mov [ esi + 0x314 ] eax
mov [ esi + 0x318 ] 0x10
mov [ esi + 0x31c ] ecx
mov [ esi + 0x320 ] ecx
mov [ esi + 0x324 ] eax
mov [ esi + 0x328 ] eax
mov [ esi + 0x32c ] eax
mov [ esi + 0x330 ] eax
pop edi
pop esi
retn 0xc
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_402e4b
cmp [ rw-data ] ebx
jne r-xdata
call sub_402e36
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_402e48
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_402e58
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_402e70
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne r-xdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401000
call sub_401010
jmp sub_401020
sub_401010
mov ecx rw-data
jmp sub_402670
sub_401020
push sub_401030
call sub_402ca4
pop ecx
retn
sub_401030
mov ecx rw-data
jmp sub_402680
sub_401040
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_401050
mov eax r--data
retn
sub_4010e0
push esi
mov esi ecx
call sub_401100
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401100
jmp Ordinal_MFC42_815
sub_401110
call sub_401120
sub_401120
mov ecx rw-data
jmp sub_401060
sub_401130
push sub_401140
call sub_402ca4
pop ecx
retn
sub_401140
mov ecx rw-data
jmp sub_401100
sub_4011d0
retn 0x4
sub_4011e0
retn
sub_4012f0
push esi
mov esi ecx
call sub_401310
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_401400
retn 0x4
sub_401410
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_401420
mov eax r--data
retn
sub_4018d0
mov eax [ ecx + 0x60 ]
retn
sub_402340
mov al [ esp + 0x4 ]
push esi
mov esi ecx
test al 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402360
mov [ ecx ] r--data
retn
sub_402370
push esi
mov esi ecx
call sub_402390
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4023e0
push esi
mov esi ecx
call sub_402400
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_402450
push esi
mov esi ecx
call sub_402470
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4024c0
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_4024d0
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_4024e0
call sub_4024f0
jmp sub_402500
sub_4024f0
mov ecx rw-data
jmp sub_402520
sub_402500
push sub_402510
call sub_402ca4
pop ecx
retn
sub_402510
mov ecx rw-data
jmp sub_402680
sub_402520
push esi
mov esi ecx
push 0x104
lea eax [ esi + 0x104 ]
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
mov eax esi
pop esi
retn
sub_402630
call sub_402640
jmp sub_402650
sub_402640
mov ecx rw-data
jmp sub_402670
sub_402650
push sub_402660
call sub_402ca4
pop ecx
retn
sub_402660
mov ecx rw-data
jmp sub_402680
sub_402670
mov eax ecx
retn
sub_402680
retn
sub_402690
call sub_4026a0
jmp sub_4026b0
sub_4026a0
mov ecx rw-data
jmp sub_402670
sub_4026b0
push sub_4026c0
call sub_402ca4
pop ecx
retn
sub_4026c0
mov ecx rw-data
jmp sub_402680
sub_4026d0
push esi
mov esi ecx
call sub_402670
mov [ esi ] 0x0
mov [ esi + 0x10c ] 0x1
mov eax esi
pop esi
retn
sub_402830
mov ecx rw-data
jmp sub_402670
sub_402840
push sub_402850
call sub_402ca4
pop ecx
retn
sub_402850
mov ecx rw-data
jmp sub_402680
sub_402860
push esi
mov esi ecx
call sub_402670
mov eax esi
pop esi
retn
sub_402950
call sub_402960
jmp sub_402970
sub_402960
mov ecx rw-data
jmp sub_402670
sub_402970
push sub_402980
call sub_402ca4
pop ecx
retn
sub_402980
mov ecx rw-data
jmp sub_402680
sub_402a10
xor eax eax
retn
Ordinal_MFC42_4673
jmp [ Ordinal_MFC42_4673@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_1146
jmp [ Ordinal_MFC42_1146@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_1175
jmp [ Ordinal_MFC42_1175@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_2859
jmp [ Ordinal_MFC42_2859@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_654
jmp [ Ordinal_MFC42_654@IAT ]
Ordinal_MFC42_5603
jmp [ Ordinal_MFC42_5603@IAT ]
Ordinal_MFC42_5858
jmp [ Ordinal_MFC42_5858@IAT ]
Ordinal_MFC42_341
jmp [ Ordinal_MFC42_341@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_755
jmp [ Ordinal_MFC42_755@IAT ]
Ordinal_MFC42_470
jmp [ Ordinal_MFC42_470@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_4224
jmp [ Ordinal_MFC42_4224@IAT ]
Ordinal_MFC42_4133
jmp [ Ordinal_MFC42_4133@IAT ]
Ordinal_MFC42_4297
jmp [ Ordinal_MFC42_4297@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
sub_402c78
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_402ca4
push [ esp + 0x4 ]
call sub_402c78
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_ftol
jmp [ _ftol@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_402e36
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_402e48
xor eax eax
retn
sub_402e4b
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_402e58
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_402e9e
jmp sub_402e9e
sub_402e9e
push 0x600
push 0x0
call sub_402e70
mov [ rw-data ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
sub_402ec0
mov ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_815
sub_402ec8
mov eax [ ebp - 0x10 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn
sub_402ed3
mov eax r--data
jmp __CxxFrameHandler
sub_402ee0
lea ecx [ ebp - 0xcc ]
jmp sub_401310
sub_402eeb
mov eax r--data
jmp __CxxFrameHandler
sub_402f00
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_641
sub_402f08
mov ecx [ ebp - 0x10 ]
add ecx 0x64
jmp Ordinal_MFC42_640
sub_402f13
mov ecx [ ebp - 0x10 ]
add ecx 0x74
jmp sub_402470
sub_402f1e
mov ecx [ ebp - 0x10 ]
add ecx 0x7c
jmp Ordinal_MFC42_640
sub_402f29
mov ecx [ ebp - 0x10 ]
add ecx 0x8c
jmp sub_402470
sub_402f37
mov ecx [ ebp - 0x10 ]
add ecx 0x94
jmp Ordinal_MFC42_640
sub_402f45
mov ecx [ ebp - 0x10 ]
add ecx 0xa4
jmp sub_402470
sub_402f53
mov eax r--data
jmp __CxxFrameHandler
sub_402f60
mov ecx [ ebp - 0x14 ]
jmp Ordinal_MFC42_641
sub_402f68
mov ecx [ ebp - 0x14 ]
add ecx 0x64
jmp Ordinal_MFC42_640
sub_402f73
mov ecx [ ebp - 0x14 ]
add ecx 0x74
jmp sub_402470
sub_402f7e
mov ecx [ ebp - 0x14 ]
add ecx 0x7c
jmp Ordinal_MFC42_640
sub_402f89
mov ecx [ ebp - 0x14 ]
add ecx 0x8c
jmp sub_402470
sub_402f97
mov ecx [ ebp - 0x14 ]
add ecx 0x94
jmp Ordinal_MFC42_640
sub_402fa5
mov ecx [ ebp - 0x14 ]
add ecx 0xa4
jmp sub_402470
sub_402fb3
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_402fbb
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_402fc3
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_402fcb
mov eax r--data
jmp __CxxFrameHandler
sub_402fe0
lea ecx [ ebp - 0x20 ]
jmp Ordinal_MFC42_654
sub_402fe8
mov eax r--data
jmp __CxxFrameHandler
sub_403000
lea ecx [ ebp - 0x60 ]
jmp Ordinal_MFC42_755
sub_403008
mov eax r--data
jmp __CxxFrameHandler
sub_403020
lea ecx [ ebp - 0x1c ]
jmp sub_402400
sub_403028
lea ecx [ ebp - 0x1c ]
jmp sub_402360
sub_403030
mov eax r--data
jmp __CxxFrameHandler
sub_403040
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_403048
mov eax r--data
jmp __CxxFrameHandler
sub_403060
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_403068
mov eax r--data
jmp __CxxFrameHandler
sub_403080
mov ecx [ ebp - 0x10 ]
jmp sub_402360
sub_403088
mov eax r--data
jmp __CxxFrameHandler
sub_4030a0
mov eax [ ebp - 0x14 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn
sub_4030ab
mov eax r--data
jmp __CxxFrameHandler
