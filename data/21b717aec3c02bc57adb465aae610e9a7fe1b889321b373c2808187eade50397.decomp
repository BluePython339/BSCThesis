sub_401467
add [ ebx + 0x42 ] al
jb rwxdata
pop ds
pop ds
pop es
loopne rwxdata
arpl [ ebx + 0x73 ] bp
inc esp
outsd
arpl [ eax ] ax
add [ ebx + 0x44 ] al
dec edx
inc esi
dec edx
push edi
dec ebx
push ebx
dec ebx
dec edx
inc esp
inc esi
inc ebp
push edi
inc ecx
add [ ebx + ebp * 2 - 0x1f1fafab ] al
loopne rwxdata
pop ds
fst [ edi + ebp * 8 - 0x35ec1f20 ]
loopne rwxdata
pop ds
xchg esi eax
in al dx
imul edx [ esi - 0x17c99404 ] 0x6b
sahf
inc eax
imul edx [ esi + 0x61 ] 0xffffff9f
in al dx
push ebx
loopne rwxdata
adc [ edi ] bl
pop ds
adc [ ebx - 0x60 ] 0x6d
frstor [ eax + edx + 0x1f ]
adc ecx edx
cmpsd [ esi ] [ edi ]
push eax
sbb bl [ edi ]
mov gs bp
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
int 0x11
jbe rwxdata
xor [ edx + 0x1fe08ae0 ] cl
push ebx
mov al [ 0x1020dd6d ]
adc ecx edx
xor eax 0xa4610c6b
mov al 0x65
mov al [ 0xffffffffe48265ef ]
loopne rwxdata
dec ebp
sahf
aas
in eax 0xe0
fiadd [ edx - 0x70 ]
loopne rwxdata
pop ds
jbe rwxdata
mov ah al
mov ah al
add [ eax ] al
push eax
jne rwxdata
punpckhwd mm6 [ ebp + 0x5f ]
0x1f30e0e0 0xbd76
cmpsd [ esi ] [ edi ]
adc al 0xea
or [ edx + ebx * 4 - 0xf ] bl
loopne rwxdata
push edi
in eax dx
loopne rwxdata
inc edx
nop
movsw [ edi ] [ esi ]
call 0x765ff5e5
imul esp eax 0xd75de0e0
or [ edx - 0x20 ] bl
loopne rwxdata
loopne rwxdata
inc esi
imul ebp [ ebp ] 0x61636f4c
insb
and [ ecx + 0x70 ] al
jo rwxdata
xor [ eax - 0x1f1f1e1f ] ecx
pop ds
loope rwxdata
jmp 0x6d70f5fd
lodsd [ esi ]
cmpsb [ esi ] [ edi ]
cld
loopne rwxdata
sbb sp bx
loopne rwxdata
loopne rwxdata
add [ eax - 0x1f1e912c ] eax
loopne rwxdata
imul edi [ edx + 0x61 ] 0x472d6472
outsb
jb rwxdata
movsd [ edi ] [ esi ]
pop eax
sbb ebx [ edi ]
pop ds
mov [ 0x610c6b35 ] eax
movsb [ edi ] [ esi ]
push eax
pop edi
in al 0xa9
mov [ 0x6d36e0e4 ] al
mov bp cx
loopne rwxdata
push ebx
push edx
loopne rwxdata
out 0xe0 eax
loopne rwxdata
loopne rwxdata
fisttp [ eax * 4 + 0x38ece0f9 ]
or eax 0x61e0fd0a
loopne rwxdata
xlat
adc [ fs : edi ] bl
je rwxdata
push esp
loopne rwxdata
loopne rwxdata
xor [ ebp + 0x66 ] ch
and eax 0x30e0e0e1
jmp 0x4dffcd5b
pop esp
xor [ edi ] bl
jbe rwxdata
xchg ebp eax
xchg edi eax
out dx eax
loopne rwxdata
and [ fs : ecx + 0x70 ] al
jo rwxdata
mov eax [ 0x1fe0e0e2 ]
mov ax [ 0xffffffff88e0e0e2 ]
push ecx
loope rwxdata
loopne rwxdata
in eax dx
imul esp [ esi - 0x5b ] 0x1fe0e0e8
jbe rwxdata
mov bl [ esi ]
pop ds
pop ds
loopne rwxdata
xchg ebp eax
fldenv [ eax ]
loopne rwxdata
imul esp [ ebx + 0x61 ] 0x6e6f6974
jae sub_401467
loopne rwxdata
loopne rwxdata
loopne rwxdata
0xada5e0f1 0xfca6
loopne rwxdata
insd
and ax 0xe0e1
loopne rwxdata
loopne rwxdata
or ecx eax
popad
fst [ eax + 0x1a ]
pop ds
xchg ebp eax
neg [ edi ]
salc
mov eax [ 0x6fe0e0e2 ]
insb
loope rwxdata
push eax
sbb bl [ edi ]
xchg ebp eax
[ esi ] [ edi ]
pop ds
or [ ebx - 0xc6aa26d ] 0xffffffa7
enter 0xdd61 0x50
sbb bl [ edi ]
adc al 0xea
loopne rwxdata
jo rwxdata
pop ds
imul edx [ ebp + 0x1b666de8 ] 0xffffffe3
fistp [ edi ]
salc
mov [ 0x8e0e0ea ] ax
pop edx
loopne rwxdata
or esi ecx
loop rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
push ecx
pushad
ficom [ 0xffffffffe1e0e0ea ]
xchg ebp eax
dec eax
arpl si bx
insb
loope rwxdata
loopne rwxdata
pop ds
pop ds
pop ds
cmpsb [ esi ] [ edi ]
mov ax [ 0x1fe0e0e2 ]
arpl si bx
mov eax [ 0x1fe0e0e2 ]
xor [ ebp + 0x66 ] ch
movsd [ edi ] [ esi ]
loopne rwxdata
loopne rwxdata
pop ebp
or bh ah
loopne rwxdata
aam 0x6e
loope rwxdata
adc ah 0x6e
loopne rwxdata
xchg ebp eax
dec edi
pop ds
salc
insb
loope rwxdata
xor [ edi ] bl
pop ds
loopne rwxdata
loopne rwxdata
call 0x6121f708
insd
loopne rwxdata
mov cl 0x21
dec ecx
insb
loope rwxdata
loope rwxdata
inc edi
loopne rwxdata
and al 0x1e
jbe rwxdata
pop ds
sti
pop ds
push edi
pop ds
salc
mov [ 0x30e0e0ea ] eax
pop ds
jbe rwxdata
mov [ 0x30e0e0ea ] eax
pop ds
jbe rwxdata
xlat
aaa
in al 0x69
in al 0x52
arpl [ edi - 0x77fff41a ] sp
outsd
mov eax 0xd61fdbc4
pop ds
pop ds
and [ eax ] dl
xchg ebx eax
push edx
aas
loopne rwxdata
loopne rwxdata
loopne rwxdata
pop ds
pop ds
push 0x63e0e0e0
frstor [ esi + ebx ]
insd
loopne rwxdata
pushad
ficom [ edx + ebp * 8 ]
loopne rwxdata
loopne rwxdata
pushfd
cmc
loopne rwxdata
mov [ ecx - 0x1f ] dl
loopne rwxdata
loopne rwxdata
pop ds
loop rwxdata
movsw [ edi ] [ esi ]
cmpsb [ esi ] [ edi ]
fsubr st0
loopne rwxdata
sbb al 0x1f
pop ds
push esp
outsd
0x95e1e0e0 0x6358
insd
pop ds
pop ds
cmpsd [ esi ] [ edi ]
and al 0x1e
pop ds
pop ds
loopne rwxdata
arpl bp bx
loope rwxdata
loopne rwxdata
ficom [ edx + ebp * 8 ]
loopne rwxdata
loop rwxdata
pop ds
cmpsb [ esi ] [ edi ]
pminsw xmm4 xmm0
loopne rwxdata
cmpsd [ esi ] [ edi ]
push eax
sbb bl [ edi ]
pop ds
or [ ebx + 0x66a65d93 ] 0xf
0x1fe1e0e0 0x50d5
int1
pop ds
xchg esp eax
xchg esp eax
nop
pop ebp
cmpsb [ esi ] [ edi ]
pminsw xmm4 xmm0
loopne rwxdata
pop ds
aad 0x50
sub_4016a1
sbb bl [ edi ]
pop ds
insd
and eax 0x301f1f1d
pop ds
loope rwxdata
0xa065e0e0 0x64ef
jbe rwxdata
sbb eax 0x36301f1f
pop ds
loopne rwxdata
loopne rwxdata
[ esi ] [ edi ]
loopne rwxdata
pop ds
and eax 0x301f1f1d
test eax 0x1e246d69
pop ds
pop ds
insd
frstor [ 0x371f1f1d ]
call 0x6121f708
loope rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
insb
loope rwxdata
loope rwxdata
loopne rwxdata
dec eax
arpl si bx
insb
loope rwxdata
or ecx eax
popad
fst [ eax + 0x1a ]
pop ds
xchg ebp eax
neg [ edi ]
salc
mov eax [ 0x6fe0e0e2 ]
insb
loope rwxdata
push eax
sbb bl [ edi ]
xchg ebp eax
[ esi ] [ edi ]
pop ds
or [ ebx - 0xc6aa26d ] 0xffffffa7
enter 0xdd61 0x50
sbb bl [ edi ]
out dx eax
sub esp ebx
loopne rwxdata
push ebx
push esp
sbb al 0x1f
pop ds
cmpsd [ esi ] [ edi ]
aaa
pop ds
jbe rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
push 0x63e0e0e0
frstor [ esi + ebx ]
loope rwxdata
xchg ebp eax
loopne rwxdata
or esi ecx
loop rwxdata
loopne rwxdata
0x1fe1e0e0 0x50d5
or ebx [ ebx + 0x6b ]
insd
and al 0x1e
pop ds
pop ds
pop ebx
outsb
insb
xor [ edi ] ebx
loopne rwxdata
loopne rwxdata
mov [ ecx - 0x1f ] dl
loopne rwxdata
loopne rwxdata
pop ds
movsw [ edi ] [ esi ]
cmpsb [ esi ] [ edi ]
fsubr st0
loopne rwxdata
push ecx
pushad
ficom [ 0xffffffffe1e0e0ea ]
xchg ebp eax
out 0xb al
add [ eax - 0x243b4791 ] cl
pop ds
salc
loopne rwxdata
push esp
loopne rwxdata
loopne rwxdata
pop ds
pop ds
pop ds
cmpsb [ esi ] [ edi ]
mov ax [ 0x1fe0e0e2 ]
fimul [ edi ]
0xefe0e0e0 0x996e
and eax 0x65a7861c
cmp [ esi ] bl
pop ds
pop ds
loop rwxdata
or [ edx ] 0xe0
loopne rwxdata
loopne rwxdata
insd
pushad
ficom [ edx + ebp * 8 ]
0x95e1e0e0 0x6358
insd
pop ds
pop ds
cmpsd [ esi ] [ edi ]
and al 0x1e
pop ds
pop ds
loopne rwxdata
pop ds
pop ds
arpl bp bx
loop rwxdata
xor [ ebp + 0x66 ] ch
movsd [ edi ] [ esi ]
xchg ebp eax
dec edi
pop ds
salc
insb
loope rwxdata
pop ds
loopne rwxdata
pop ds
loope rwxdata
0xada5e0f1 0xfca6
loopne rwxdata
or eax [ eax ]
mov [ edi - 0x48 ] ch
pop ds
mov al 0x65
mov al [ 0xffffffffe48265ef ]
loopne rwxdata
mov eax [ 0x1fe0e0e2 ]
mov ax [ 0xffffffff88e0e0e2 ]
push ecx
loope rwxdata
jbe rwxdata
xor [ edi ] bl
pop ds
insd
pop ds
xor [ edi ] bl
xchg ebp eax
sbb al 0x1f
in eax 0xeb
mov al [ 0xffffffffe27b65ef ]
loopne rwxdata
pminsw xmm4 xmm0
loopne rwxdata
0x1f30e0e0 0xbd76
cmpsd [ esi ] [ edi ]
xor [ eax - 0x1f1f1e1f ] ecx
loope rwxdata
pop eax
loopne rwxdata
and al 0x1e
inc edi
loopne rwxdata
loopne rwxdata
ficom [ edx + ebp * 8 ]
loopne rwxdata
loopne rwxdata
loopne rwxdata
adc al 0xea
loopne rwxdata
pop ds
pop ds
xor [ edi + 0x66 ] ch
inc ebp
loope rwxdata
cmpsd [ esi ] [ edi ]
push esp
sbb al 0x1f
pop ds
std
jmp rwxdata
sbb eax 0x1f301f1f
cmc
xchg [ ecx + 0x65 ] ch
cmp bl [ esi ]
pop ds
pop ds
mov ah al
mov ah cl
mov ah dl
pop ds
loope rwxdata
pop ds
jmp 0x4dffcd5b
movsd [ edi ] [ esi ]
arpl si bx
mov eax [ 0x1fe0e0e2 ]
loopne rwxdata
loopne rwxdata
loopne rwxdata
loop rwxdata
loopne rwxdata
insd
mov bl [ esi ]
pop ds
pop ds
adc al 0xea
loopne rwxdata
jo rwxdata
xchg ebp eax
in eax 0x9
lodsb [ esi ]
loop rwxdata
loopne rwxdata
sbb al 0x1f
pop ds
push esp
outsd
pop ds
cmpsb [ esi ] [ edi ]
pminsw xmm4 xmm0
loopne rwxdata
cmpsd [ esi ] [ edi ]
push eax
sbb bl [ edi ]
pop ds
or [ ebx + 0x66a65d93 ] 0xf
int1
sti
pop ds
push edi
pop ds
salc
mov [ 0x30e0e0ea ] eax
pop ds
jbe rwxdata
mov [ 0x30e0e0ea ] eax
pop ds
jbe rwxdata
xlat
aaa
in al 0x69
in al 0x52
arpl [ edi - 0x77fff41a ] sp
outsd
mov eax 0xd61fdbc4
and eax 0x301f1f1d
pop ds
stc
arpl [ eax ] bx
pop ds
xchg ebp eax
cli
insd
and eax 0x301f1f1d
loopne rwxdata
xor [ ebp - 0x22 ] ebp
jo rwxdata
and eax 0x371f1f1d
pop ds
xchg esp eax
xchg esp eax
nop
pop ebp
cmpsb [ esi ] [ edi ]
pminsw xmm4 xmm0
loopne rwxdata
pop ds
aad 0x50
pushfd
cmc
pop ds
loopne rwxdata
and ah ch
imul esp eax 0x6b
loopne rwxdata
loopne rwxdata
fisttp [ eax * 4 + 0x38ece0f9 ]
or eax 0x61e0fd0a
dec ebp
sahf
aas
in eax 0xe0
fiadd [ edx - 0x70 ]
push edi
in eax dx
loopne rwxdata
pop ds
pop ds
loopne rwxdata
push ebx
test eax 0x1c21dd6d
cmp al 0x1e
pop ds
pop ds
insd
cmp [ gs : esi ] bl
or [ edx + ebx * 4 - 0xf ] bl
loopne rwxdata
pop ds
arpl [ ebp + 0x20 ] sp
sbb eax 0x6be11f1f
insd
and [ 0x6e5b1f1f ] bl
mov eax [ 0xffffffff96e0e0e2 ]
in al dx
outsb
loopne rwxdata
jmp 0x6d70f5fd
lodsd [ esi ]
cmpsb [ esi ] [ edi ]
cld
insd
and [ gs : edi + ebx ] ebx
pop ds
xor [ edi ] bl
std
pop ds
jbe rwxdata
xor al 0x34
xor [ edi + 0x51 ] cl
dec esi
push eax
in eax dx
0x3ae0eaed 0xdd6d
daa
in al 0xa6
daa
call 0x3829a2f1
pop ds
xchg ebp eax
loope rwxdata
loopne rwxdata
out dx eax
pop ds
jbe rwxdata
loopne rwxdata
outsd
loopne rwxdata
cmpsd [ esi ] [ edi ]
and [ gs : 0xffffffffe0e01f1f ] bl
loopne rwxdata
loopne rwxdata
or [ ebx + 0x1f ] edx
pop ds
pop ds
or [ ebp - 0x20 ] edi
out dx eax
add cl ah
loopne rwxdata
aaa
pop ds
aaa
xor [ ebp - 0x22 ] ebp
movsd [ edi ] [ esi ]
loop rwxdata
frstor [ ecx ]
sbb al 0x1f
loopne rwxdata
loope rwxdata
fimul [ edi ]
0xefe1e0e0 0x6f65
loopne rwxdata
mov al [ 0xffffffffe1a964ef ]
loopne rwxdata
lahf
loope rwxdata
or bl bh
loopne rwxdata
imul esp eax 0x69
mov ch al
aaa
pop ds
xchg ebp eax
sbb al 0x8a
mov al [ gs : 0x206b6b94 ]
in al dx
loopne rwxdata
imul esp eax 0x6b
imul esp [ eax ] 0xffffffec
pop ds
cmc
insd
fstp [ ecx + 0x1c ]
pop ds
pop ds
cmpsb [ esi ] [ edi ]
out 0xe4 eax
cmpsb [ esi ] [ edi ]
daa
loope rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
jbe rwxdata
pushad
in eax dx
out dx eax
aam 0xe0
loopne rwxdata
loopne rwxdata
and eax 0x45403423
xchg ebx eax
pop edx
inc ebp
mov [ eax + 0x28 ] eax
pop ds
pop ds
insd
jge rwxdata
loopne rwxdata
mov al [ 0xffffffffe10064ef ]
xchg [ ecx + 0x27 ] ch
loop rwxdata
loopne rwxdata
pop ds
jbe rwxdata
call 0x1cd53762
mov ah al
pop ds
mov ebp 0x31e0e0e0
arpl [ edi - 0x1e75c81c ] sp
aaa
pop ds
xchg ebp eax
sbb al 0x8a
loopne rwxdata
loopne rwxdata
loopne rwxdata
pushad
ficom [ edx + ebp * 8 ]
loopne rwxdata
and [ edi + ebx ] ebx
das
out dx eax
test eax 0x60e0e0e1
loopne rwxdata
aaa
pop ds
xchg ebp eax
sbb al 0x8a
loope rwxdata
pop ds
mov dh dl
push eax
0xdfd61fc1 0xe0ea
sbb al 0x1f
loopne rwxdata
and [ gs : edi + ebx ] ebx
pop ds
xor [ edi ] bl
stc
arpl [ eax ] bx
pop ds
xchg ebp eax
cmc
push ebx
inc eax
out dx eax
pop ds
jbe rwxdata
push ebx
test eax 0xfd761f36
loope rwxdata
pop ds
jbe rwxdata
push esp
sbb ebx [ edi ]
loopne rwxdata
loopne rwxdata
loopne rwxdata
sbb al 0x8a
loope rwxdata
imul esp esp 0x59346959
in al 0x63
mov eax [ 0xffffffffe01961e8 ]
pop ds
pop ds
popad
lahf
jmp 0x40906946
out dx eax
sub cl ah
loopne rwxdata
jle rwxdata
loopne rwxdata
sbb eax 0xeaedeaed
xchg ebp eax
loop rwxdata
loopne rwxdata
in eax dx
0xe295eaed 0xe50b
xor esi [ edx ]
aaa
pop ds
mov al 0x30
shl cl cl
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
pop ds
loope rwxdata
in al 0x59
in eax 0x63
cmpsd [ esi ] [ edi ]
loope rwxdata
loopne rwxdata
insd
fst [ ebx + ebx + 0x1f ]
pop es
mov al [ gs : 0xffffffffe12864ef ]
salc
add eax esp
loopne rwxdata
mov al ah
mov al [ 0xffffffffe12864ef ]
fldenv [ eax ]
loopne rwxdata
or ebx [ edi + 0x6de48a3e ]
and eax 0x951f3018
sbb al 0x8a
loopne rwxdata
push ds
add [ edi ] edi
popad
pop edi
push ebp
push eax
mov ebp ecx
lahf
pop ds
loopne rwxdata
0xdd6d3ae0 0x1b54
pop ds
xchg ebp eax
loopne rwxdata
aaa
pop ds
inc ebp
or edx [ esi + 0x37 ]
imul ebp [ 0x666d3618 ] 0xffffff8b
pop ds
xor [ edi ] dh
aaa
pop ds
jbe rwxdata
sbb al 0x8a
loopne rwxdata
pop ds
xchg ebp eax
sbb al 0x8a
loope rwxdata
loopne rwxdata
push esp
sbb bl [ edi ]
pop ds
xor [ edi ] bl
xchg ebp eax
jmp 0x3770fabc
pop ds
adc eax edi
xchg esp eax
aad 0x54
sbb ebx [ edi ]
pop ds
insd
fst [ edx + ebx + 0x1f ]
xchg esp eax
mov [ edx - 0xf1f77e0 ] cl
loopne rwxdata
loopne rwxdata
loope rwxdata
loope rwxdata
jbe rwxdata
pop ds
pop ds
jbe rwxdata
pop ds
jbe rwxdata
inc ecx
mov al [ 0xffffffffe088ed95 ]
imul ebx [ eax ] 0x1f
xchg ebp eax
sbb [ eax ] dh
pop ds
xchg ebp eax
sbb al 0x8a
loopne rwxdata
pop ds
in eax dx
cmpsd [ esi ] [ edi ]
push esp
sbb al 0x1f
pop ds
push eax
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
insd
mov bp cx
loopne rwxdata
xchg ebp eax
sbb al 0x6f
inc cx
loope rwxdata
pop ds
jbe rwxdata
mov ah al
pop ds
mov ah al
mov ah al
aaa
pop ds
inc ebp
pop ds
xchg ebp eax
sbb al 0x1f
jmp 0xffffffffe18180b6
mov al [ 0x208a8894 ]
aaa
loopne rwxdata
cmpsd [ esi ] [ edi ]
loopne rwxdata
imul esi [ ecx + ebx * 2 ] 0xe8a163e4
popad
sbb eax esp
loopne rwxdata
mov bp cx
loopne rwxdata
loopne rwxdata
pushad
xchg ebp eax
in eax dx
loopne rwxdata
xchg ebp eax
sbb [ edx + 0x41361fe0 ] cl
mov al ah
mov al [ gs : 0x208a8894 ]
sbb al 0xd9
and al ah
loopne rwxdata
xchg ebp eax
loopne rwxdata
test eax 0x8b666d36
jmp 0x3770fa18
add eax 0xebe0e0e0
xor [ edi ] dh
aaa
pop ds
jbe rwxdata
test eax 0x35e0e4a2
pop ds
mov bh 0x3f
mov al ah
pushad
loopne rwxdata
mov ah [ eax ]
add eax 0xe0e1e088
loopne rwxdata
insd
loopne rwxdata
loope rwxdata
loopne rwxdata
stosb [ edi ]
xchg esp eax
0xa66310e3 0x63e3
in eax 0xe1
loopne rwxdata
mov al ah
loopne rwxdata
imul edx [ ebp + 0x1465a7e8 ] 0x1e
cmpsd [ esi ] [ edi ]
adc [ gs : esi ] bl
pop ds
pop ds
loopne rwxdata
loopne rwxdata
arpl [ edi - 0xff69c10 ] sp
xchg ebp eax
or [ edi ] bh
aaa
pop ds
loope rwxdata
cmpsd [ esi ] [ edi ]
out 0xef al
loopne rwxdata
pop ds
loope rwxdata
loopne rwxdata
pop ds
pop ds
loope rwxdata
and eax 0xec9d631c
pop ds
test eax 0x35e0eca2
imul ecx [ ecx ] 0xffffffa4
or al 0x1e
pop ds
pop ds
sub [ ebx - 0x6b ] 0xe8
cmpsd [ esi ] [ edi ]
adc al 0x1e
xlat
loope rwxdata
pop ds
loopne rwxdata
push ebx
mov al [ 0x69182569 ]
imul ecx [ esi + esi ] 0x37
imul edx [ ebp - 0xf629418 ] 0x6b
sub eax 0x53b253ec
mov al [ 0xffffffffa663e66a ]
adc ebx [ ebx ]
pop ds
pop ds
mov [ 0x6b0d0be1 ] al
test al 0x63
sbb eax esp
xchg esp eax
out dx eax
push 0xffffffe6
push 0xe1a663e7
arpl [ edi - 0x1ef69c1f ] sp
or ecx [ esi ]
out 0xe0 eax
out dx eax
salc
[ ebp + 0x65 ]
out dx eax
loopne rwxdata
and eax 0x1c256918
xchg ebp eax
loopne rwxdata
sbb al 0x63
popfd
in al dx
loopne rwxdata
clc
jecxz rwxdata
sbb al ah
xchg esi eax
jns rwxdata
in al dx
imul esp esi 0x69
and eax 0xe4a6630c
insd
popfd
sbb ch cl
jecxz rwxdata
loopne rwxdata
jmp rwxdata
in al dx

arpl [ ebp - 0x6a1f14 ] bx
insd
or al 0x1e
pop ds
pop ds
xor [ edx + 0x6de08ae0 ] cl
adc al 0x1e
pop ds
pop ds
xor [ edx + 0x79761fe0 ] cl
loopne rwxdata
arpl [ eax ] bx
loopne rwxdata
mov [ 0xffffffff86f0a0a1 ] al
imul esp [ ecx - 0x6b4fa4c6 ] 0xffffffea
arpl [ esi + 0x1c2563e4 ] sp
loope rwxdata
dec [ edx - 0x76ae020 ]
pop ds
xchg ebp eax
hlt
push ss
jbe rwxdata
outsb
imul esp [ 0xffffffffe300b11c ] 0x25
adc [ ebx + 0x16 ] dl
or al 0x95
imul esp esi 0xffffff86
mov eax [ 0x25e3e200 ]
sbb [ esi + 0x6b ] dh
out 0xe3 al
and eax 0x3f3a39ec
cmp edi [ esi ]
test eax 0x6be0eca2
pop ds
xor eax 0x6b800c6b
xchg ebp eax
call 0x642cb97b
cmpsd [ esi ] [ edi ]
and cl bl
call 0x1d20fcf8
adc eax ebp
imul esp [ edi ] 0x0
imul edi [ edi ] 0x4
push ebx
daa
adc [ ebx + 0x3f ] dl
adc al 0x69
out 0x69 eax
aas
in al 0x6b
daa
or [ ebx + 0x3f ] ch
or al 0x53
daa
sbb [ ebx + 0x3f ] dl
sbb al 0x69
daa
call 0x6c2c5ba7
pop ss
or [ eax - 0x20 ] dl
loopne rwxdata
aas
sar [ esi - 0x7a ] 0x9f
pop ebx
lodsb [ esi ]
jo rwxdata
pop ds
jo rwxdata
salc
0xca2c3808 0xd293
cmpsb [ esi ] [ edi ]
xorps xmm1 [ edi + 0x9 ]
das
daa
or [ ebx + 0x37 ] ch
or al 0x51
daa
call 0x642c5400
movsd [ edi ] [ esi ]
call 0x24ab341c
inc esp
loope rwxdata
add al 0x51
out 0x51 eax
aaa
in al 0x6b
loopne rwxdata
test al 0xcb
arpl [ ecx ] cx
loope rwxdata
movsd [ edi ] [ esi ]
call 0x24ab342b
inc esp
push eax
pop ds
jo rwxdata
pop ss
insd
sahf
mov al 0xd9
in al 0xe0
loopne rwxdata
pop ss
imul esp [ esp + eax * 2 ] 0x50
loope rwxdata
loopne rwxdata
arpl [ esi ] cx
push eax
push ecx
aaa
in al dx
arpl [ ebp + 0x6b1767e8 ] sp
and al 0x44
loopne rwxdata
loope rwxdata
pushfd
inc esp
dec esp
imul edx [ edi ] 0x63
cmpsb [ esi ] [ edi ]
and cl bl
and al 0x44
push eax
imul ebp [ eax - 0x7 ] 0xffffffe1
loopne rwxdata
out 0x6b eax
aaa
in al 0x53
daa
adc [ ebx + 0x37 ] dl
adc al 0x69
call 0x6c2c5347
daa
call 0x542c544f
daa
sbb [ ebx + 0x37 ] dl
sbb al 0x69
push eax
imul ebp [ eax - 0x7 ] 0xffffffe1
loopne rwxdata
loopne rwxdata
out dx eax
salc
push esp
jmp rwxdata
push 0xe0e0e1f5
out dx eax
out dx eax
salc
xchg esp eax
jmp rwxdata
imul esp [ esp + eax * 2 ] 0x54
mov [ 0xffffffffe8a763e2 ] eax
arpl [ ebx ] bx
aaa
in al 0x53
and eax 0xe43553e0
imul esp esi 0x6be43669
salc
hlt
movsd [ edi ] [ esi ]
loope rwxdata
call 0x542c5530
and eax 0xec3553e8
imul esp [ esi ] 0xec3669e8
insd
sahf
call 0x6c30c33a
and al 0x44
salc
push esp
imul edi [ eax - 0xf ] 0xffffffe1
loopne rwxdata
imul esi [ esi ] 0xe89e6dec
loopne rwxdata
loopne rwxdata
jecxz rwxdata
pop ds
jo rwxdata
movsd [ edi ] [ esi ]
call 0x24ab355c
inc esp
sub eax 0xe02543ec
jmp rwxdata
daa
xor eax 0x69e669e4
in al 0x6b
inc esp
push esp
pop ds
jo rwxdata
and al 0x44
push esp
jecxz rwxdata
loope rwxdata
loope rwxdata
imul esp [ esp + eax * 2 ] 0x54
in al 0x6b
pop ds
jo rwxdata
and al 0x44
push esp
loopne rwxdata
int1
loope rwxdata
loopne rwxdata
test eax 0x2e51e651
in al dx
arpl [ ebp - 0x1ef19f10 ] sp
xchg ebp eax
loope rwxdata
call 0x542c561f
salc
push esp
imul edi [ eax - 0xf ] 0xffffffe1
loopne rwxdata
imul esi [ esi ] 0xe89e6dec
arpl [ 0x44246be8 ] cx
movsd [ edi ] [ esi ]
call 0xaa035c6
loope rwxdata
loopne rwxdata
mov ebp 0x3e6be66b
in al 0x6b
call 0x542c54d9
and eax 0xec3d53e8
push ebx
sub eax 0xe43553e0
imul ebp esi 0x69e43669
call 0xffffffff822c5cee
test eax 0x35e0f0a2
imul ecx [ eax + eax * 4 ] 0x1c
imul ebx [ ebp - 0x176a9414 ] 0x6b
movsd [ edi ] [ esi ]
call 0xaa0356b
loope rwxdata
in al 0xb1
loopne rwxdata
loopne rwxdata
jecxz rwxdata
push esp
pop ds
jo rwxdata
jecxz rwxdata
in al dx
loopne rwxdata
mov eax [ 0xffffffffefe425eb ]
mov ebp 0x2d6be66b
in al dx
inc ebx
and eax 0xec2eebe0
out dx eax
test al 0x53
call 0x2ea9becc
call 0x2d83c70f
call 0xfffffffff0244478
test eax 0xb1e42669
and eax 0xec3553e8
imul esp [ esi ] 0xec3669e8
insd
sahf
call 0x6c282c29
and al 0x44
imul esp [ edi ] 0xffffffe8
imul esi [ edi ] 0xffffffec
push ebx
movsd [ edi ] [ esi ]
call 0x24ab35b7
sub eax 0xe025431c
jmp rwxdata
xor eax 0x69e669e4
inc esp
and al 0x44
push esp
pop ds
jo rwxdata
arpl [ ebp + 0x44246bf0 ] sp
imul ecx [ eax + eax * 4 ] 0x1c
imul ebx [ ebp - 0x176a9414 ] 0x6b
imul esp [ esp + eax * 2 ] 0x54
jecxz rwxdata
loope rwxdata
or eax 0x44246be8
loope rwxdata
test eax 0x2e51e651
in al dx
arpl [ 0xffffffffe10e60f0 ] cx
xchg ebp eax
loope rwxdata
call 0xffffffffa22446f0
pop ds
jo rwxdata
and al 0x44
push esp
loopne rwxdata
loopne rwxdata
in al 0xb1
loopne rwxdata
jae rwxdata
in al 0x66
mov bl 0x0
imul esp edi 0x6be1a263
mov [ 0x6be30063 ] al
in al 0x66
xor [ ebx - 0x1bd89700 ] dh
cmp [ esi ] dl
mov ecx 0xb340a160
or [ ebx - 0x19 ] dl
out dx eax
test al 0x69
out 0x63 eax
mov [ 0xffffffffe30263e1 ] al
imul esp esp 0x76
mov bl 0x8
push ebx
daa
in al 0xef
test al 0x69
daa
in al 0xb
std
mov eax [ 0xffffffffaa6be50a ]
arpl [ ecx ] ax
jecxz rwxdata
mov eax [ 0xffffffffb0b7e8a8 ]
test al 0xb0
movsb [ edi ] [ esi ]
mov eax [ 0xffffffffa1b7e8a8 ]
test al 0xe8
mov bh 0xa1
test al 0xe8
push 0xffffffa8
push edx
lodsb [ esi ]
mov eax [ 0xffffffffa852f0a8 ]
push edx
lodsb [ esi ]
push 0x9
xchg [ ebx - 0x5f ] dl
mov eax [ 0x5386f0a0 ]
mov eax [ 0x2751e751 ]
in al 0xa3
insd
sub eax esp
imul ebp [ edx - 0x6b00fe9d ] 0x23
mov eax [ 0xffffffffa26be50a ]
arpl [ eax ] ax
jecxz rwxdata
in al 0xb7
mov al 0xa0
daa
in al 0x6b
in al 0x53
and eax 0xa0b0b7e4
or eax 0x601767e8
or ah cl
xchg ebp eax
pop ds
jo rwxdata
or eax 0x6b1767e8
and al 0x44
push esp
pop ds
jo rwxdata
mov al [ 0x51e751e8 ]
daa
in al 0xa1
push esp
or eax 0x6b1767e8
and al 0x44
cmp dh [ esi + 0x2d8c3631 ]
imul ebp ebp 0x7a
xchg [ ebx ] bl
lodsb [ esi ]
ror [ ebp - 0x6c ] 0x1
dec ebx
inc eax
adc cl dl
jns rwxdata
stc
lds eax [ ecx + 0xd ]
out dx al
das
std
xchg esi eax
in eax 0x8d
xlat
leave
push ecx
mov cl 0xf7
in al 0xb7
hlt
in al 0x6e
out dx eax
test al 0x69
out 0x63 eax
mov [ 0xffffffffe30263e1 ] al
imul esp esp 0x76
out dx eax
test al 0x69
daa
in al 0xa3
nop
bound ecx [ esp + ecx - 0x2d ]
inc edi
mov al [ 0x37650405 ]
push ebp
or ch ah
into
and [ ebx + 0xf ] eax
mov esi [ ebx + 0x25 ]
loope rwxdata
inc ebx
jpo 0xffffffffc63945d3
sub al 0xab
mov [ 0xffffffffe5969e54 ] al
int1
loope rwxdata
loopne rwxdata
test [ edx - 0x23 ] esi
fmul st7
outsd
pushfd
or edi edi
scasb [ edi ]
pop esi
push eax
mov esp 0xeba53e3f
cli
mov [ ecx ] 0x59
stosb [ edi ]
mov ch 0x27
cmp eax 0x3ae1b95d
mov dh 0x31
mov [ ss : 0xffffffff867aed6b ] gs
sbb ebp [ eax + edx * 8 + 0x4bf2944d ]
inc ecx
or eax 0xfd2e2fee
daa
loopne rwxdata
mov ebp 0x3e6be66b
in al 0x6b
call 0x542c55c8
and eax 0xe43d53e0
push ebx
sub eax 0x1c355318
imul ebp esi 0x69e43669
call 0xffffffff822c5ddd
test eax 0x70e0f0a2
imul esp esi 0x53
and eax 0xa8a1b7e0
call 0xffffffffa1e0d03d
test al 0xe8
mov bh 0xb0
test al 0xb0
movsb [ edi ] [ esi ]
mov eax [ 0x51b7e8a8 ]
out 0xa1 eax
mov al [ 0xffffffffa1e751e8 ]
mov al [ 0xffffffffe42751e8 ]
mov eax [ 0xffffffffe751e8a0 ]
push ecx
mov eax [ 0xffffffffefe425eb ]
or eax 0x601767e8
or ah cl
xchg ebp eax
mov ebp 0x2d6be66b
sbb al 0x43
and eax 0xec2eebe0
out dx eax
test al 0x53
call 0x2ea9bfbb
call 0x2d83c7fe
sbb [ ebx + 0x26 ] dl
in al 0xef
test eax 0xb1e42669
jecxz rwxdata
sub_403266
imul esp [ 0xfffffffff4656810 ] 0x1a
pop ds
loopne rwxdata
loopne rwxdata
loopne rwxdata
loopne rwxdata
mov ah al
insd
hlt
inc ebx
insd
call 0x305f5199
pop ds
cdq
sbb [ ecx ] dh
xor [ ebp + 0x65 ] ch
sbb al 0x1d
pop ds
pop ds
xor [ edi ] bl
xchg ebp eax
sbb al 0x1f
mov [ ss : edx + 0x182d6de0 ] ecx
xor [ edx - 0x6ae0c81f ] ecx
sbb al 0x1d
pop ds
pop ds
loopne rwxdata
arpl [ ebp - 0x136a0ff0 ] bx
loopne rwxdata
sbb al 0x1f
mov [ ss : eax - 0x1f1f1e1c ] ecx
insd
pop ds
loopne rwxdata
loopne rwxdata
fsub st1
loopne rwxdata
popfd
adc al dh
xchg ebp eax
in al dx
loope rwxdata
loopne rwxdata
mov ah cl
in al dx
popad
fisubr [ ecx - 0x441f1f18 ]
loopne rwxdata
xchg ebp eax
arpl [ ebp - 0x116abff0 ] bx
insd
fstp [ ebx - 0x1859e0e1 ]
inc eax
fsub st1
loopne rwxdata
sbb eax 0x63e01f1f
lea ecx [ edx + 0x182d6de0 ]
xor [ eax ] esi
insd
hlt
xchg ebp eax
loopne rwxdata
aaa
insd
sub eax 0xe18a3118
sbb al 0x1d
pop ds
pop ds
loopne rwxdata
loopne rwxdata
adc al 0x1f
loopne rwxdata
cmp eax 0xefe01863
jecxz rwxdata
pop ds
arpl [ ebp - 0x136a0bf0 ] bx
xchg ebp eax
sbb al 0x1f
mov [ ss : ebx ] ecx
aaa
xor [ ebp - 0x23 ] ch
hlt
sbb cl ah
xchg ebp eax
xchg [ ecx - 0x22 ] ah
test eax 0xdae0e0e8
loopne rwxdata
insd
call 0x305f51ac
pop ds
xchg ebp eax
adc al 0x1f
xchg ebp eax
adc [ edi ] bl
xchg ebp eax
arpl [ eax ] bx
fsub st1
loopne rwxdata
popfd
adc ah dh
xchg ebp eax
in al dx
pop ds
fsub st1
loopne rwxdata
push 0x1f1af465
sbb al 0x1d
pop ds
pop ds
xor [ edi ] bl
sub_403ee0
sub esp 0x10
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
push edi
mov edi [ esp + 0x30 ]
imul edi ebx
mov edx ebx
mov [ esp + 0x18 ] ecx
neg edx
mov [ esp + 0x1c ] edx
mov edx [ esp + 0x2c ]
mov [ esp + 0x10 ] 0x0
lea eax [ ecx + 0x4 ]
add edi edx
mov [ esp + 0x14 ] 0x4
jmp rwxdata
mov esi [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
imul esi ebx
lea ecx [ ecx + edx * 8 + 0x2c ]
mov ebp ebx
mov edx eax
mov eax [ esp + 0x28 ]
neg ebp
mov [ esp + 0x38 ] ecx
mov [ esp + 0x30 ] edx
add esi eax
mov [ esp + 0x2c ] 0x4
mov eax [ esp + 0x2c ]
add edx 0x2
add esi ebp
dec eax
mov [ esp + 0x30 ] edx
mov [ esp + 0x2c ] eax
jne rwxdata
mov eax [ esp + 0x24 ]
test eax eax
je rwxdata
cmp [ edx ] 0x1
jne rwxdata
mov ecx [ esp + 0x14 ]
mov eax edx
mov edx [ esp + 0x1c ]
add edi edx
dec ecx
mov [ esp + 0x14 ] ecx
jne rwxdata
mov eax [ esp + 0x10 ]
mov [ ecx - 0x4 ] esi
mov [ ecx ] edi
inc eax
add ecx 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x38 ] ecx
mov eax [ eax + 0x4 ]
lea edx [ edi + ebx ]
lea ecx [ esi + ebx ]
push edx
push ecx
push edi
push esi
push eax
call [ Rectangle@IAT ]
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x30 ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x20
sub_403fc0
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_404068 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] ecx
sub_404078
nop
nop
nop
nop
nop
nop
nop
nop
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_40412c ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x14 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x4c ] ecx
sub_404170
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x1a ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_4041d0
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0x10 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_404230
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x6 ] ax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x14 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_404290
push esi
mov esi ecx
call sub_404350
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_404334 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x4c ] ecx
sub_404410
push 0xffffffff
push sub_406378
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x12c
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
add esp 0x4
mov ecx esi
call Ordinal_MFC42_2621
push rwxdata
mov ecx esi
call Ordinal_MFC42_6117
push 0x4
mov ecx esi
call Ordinal_MFC42_4159
push 0x6c
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x4 ] eax
test eax eax
mov [ esp + 0x138 ] 0x0
je rwxdata
xor eax eax
push rwxdata
push rwxdata
push rwxdata
push 0x80
mov ecx eax
call Ordinal_MFC42_520
jmp rwxdata
mov ecx [ esi + 0x20 ]
push 0x0
call Ordinal_MFC42_6215
mov esi [ esi + 0x20 ]
mov edx [ esi + 0x20 ]
push edx
call [ UpdateWindow@IAT ]
push 0x408
push rwxdata
lea eax [ esp + 0x34 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0x10
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
mov ecx [ esp + 0x130 ]
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
xor eax eax
pop esi
mov ecx [ esp + 0x12c ]
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
push eax
mov ecx esi
mov [ esp + 0x13c ] 0xffffffff
call Ordinal_MFC42_986
lea ecx [ esp + 0x8 ]
call Ordinal_MFC42_296
lea eax [ esp + 0x8 ]
mov ecx esi
push eax
mov [ esp + 0x13c ] 0x1
call Ordinal_MFC42_5214
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_5301
test eax eax
jne rwxdata
sub_4045e0
push 0xffffffff
push sub_406398
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
lea ecx [ esp ]
call sub_404570
lea ecx [ esp ]
mov [ esp + 0x68 ] 0x0
call Ordinal_MFC42_2514
lea ecx [ esp ]
mov [ esp + 0x68 ] 0xffffffff
call Ordinal_MFC42_641
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn
sub_404690
push 0xffffffff
push sub_4063ba
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x54
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_404730
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_404ab0
push 0xffffffff
push sub_4063da
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x48
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_404c10
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_404b50
push ebx
push esi
xor ebx ebx
push edi
xor eax eax
mov dl 0x1
mov [ ecx + rwxdata ] bl
lea esi [ eax + eax * 4 ]
lea edi [ ecx + eax ]
mov [ edi + esi * 2 + rwxdata ] dl
jmp rwxdata
cmp eax 0x18
je rwxdata
inc eax
cmp eax 0x19
jl rwxdata
inc ecx
cmp ecx 0xb
jl rwxdata
xor ecx ecx
pop edi
pop esi
pop ebx
retn
sub_404b90
mov eax [ esp + 0x4 ]
cmp eax 0x6
ja rwxdata
xor eax eax
retn
jmp [ eax * 4 + jump_table_404bf0 ]
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
sub_404c10
push esi
mov esi ecx
call Ordinal_MFC42_560
mov [ esi ] rwxdata
mov [ esi + 0x44 ] 0x0
call sub_404b50
call [ rand@IAT ]
and eax 0x80000007
jns rwxdata
mov [ rwxdata ] eax
mov eax esi
pop esi
retn
dec eax
or eax 0xfffffff8
inc eax
sub_404c90
push ecx
push ebx
push ebp
push esi
push edi
xor esi esi
mov dl 0x1
mov [ esp + 0x13 ] 0x0
mov edi 0x17
cmp esi 0x9
jne rwxdata
lea ecx [ edi + edi * 4 ]
xor ebp ebp
lea edx [ edi + ecx * 2 + rwxdata ]
mov [ esp + 0x13 ] 0x0
jmp rwxdata
inc esi
cmp esi 0xb
jl rwxdata
mov eax 0x1010101
mov ecx rwxdata
mov [ rwxdata ] eax
mov [ rwxdata ] eax
mov [ rwxdata ] ax
mov [ rwxdata ] al
mov [ esp + 0x13 ] 0x1
cmp ebp 0xa
jne rwxdata
dec edi
test edi edi
jg rwxdata
cmp [ esi + rwxdata ] dl
je rwxdata
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
cmp ecx rwxdata
jge rwxdata
mov al [ esp + 0x13 ]
test al al
je rwxdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
inc ebp
cmp ebp 0xb
jl rwxdata
mov ecx edx
mov eax 0x1010101
mov [ ecx ] eax
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] ax
mov [ ecx + 0xa ] al
lea eax [ edi - 0x1 ]
test eax eax
jl rwxdata
xor eax eax
cmp [ edx + ebp ] 0x1
je rwxdata
jmp rwxdata
lea ecx [ eax + eax * 4 ]
lea esi [ eax + 0x1 ]
lea ecx [ eax + ecx * 2 + rwxdata ]
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
dec esi
jne rwxdata
xor eax eax
sub_404d70
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_406458
push eax
mov [ fs : 0x0 ] esp
mov al [ ecx + 0x44 ]
sub esp 0x44
test al al
push ebx
push ebp
push esi
push edi
mov bl 0x1
jne rwxdata
xor ebp ebp
mov [ esp + 0x24 ] rwxdata
mov [ esp + 0x28 ] ebp
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] ebp
call Ordinal_MFC42_323
push ebp
mov [ esp + 0x60 ] bl
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_1640
mov eax [ rwxdata ]
mov esi [ rwxdata ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
sub eax esi
sub ecx edx
push eax
mov eax [ esp + 0x68 ]
push ecx
mov ecx [ eax + 0x4 ]
push ecx
call [ CreateCompatibleBitmap@IAT ]
push eax
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1641
mov ebx [ esp + 0x28 ]
mov edx [ esp + 0x48 ]
lea eax [ esp + 0x24 ]
neg eax
sbb eax eax
and eax ebx
push eax
push edx
call Ordinal_MFC42_5785
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
mov edi [ rwxdata ]
sub eax ecx
mov ecx [ rwxdata ]
push 0xffffff
sub ecx edi
push eax
push ecx
push ebp
push ebp
lea ecx [ esp + 0x58 ]
call Ordinal_MFC42_2753
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1c ] rwxdata
mov edi rwxdata
mov [ esp + 0x18 ] ebp
mov [ esp + 0x14 ] edi
mov esi [ CreateSolidBrush@IAT ]
push 0x2b86f5
mov [ esp + 0x60 ] 0x3
call esi
push eax
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_1641
mov [ esp + 0x40 ] ebp
mov [ esp + 0x3c ] edi
push 0x2b0e91
mov [ esp + 0x60 ] 0x4
call esi
push eax
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_1641
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] edi
push 0x570e0f
mov [ esp + 0x60 ] 0x5
call esi
push eax
lea ecx [ esp + 0x38 ]
call Ordinal_MFC42_1641
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] edi
push 0x218ec7
mov [ esp + 0x60 ] 0x6
call esi
push eax
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_1641
push 0x212217
push 0x2
push ebp
call [ CreatePen@IAT ]
push eax
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1641
lea edx [ esp + 0x1c ]
lea ecx [ esp + 0x44 ]
push edx
call Ordinal_MFC42_5788
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
call Ordinal_MFC42_5787
mov ecx [ rwxdata ]
push ecx
call sub_404b90
mov edx [ rwxdata ]
mov ecx [ rwxdata ]
add esp 0x4
push edx
mov edx [ eax + 0x4c ]
push ecx
mov ecx [ eax + 0x48 ]
push 0x19
push edx
mov edx [ rwxdata ]
push ecx
mov ecx [ rwxdata ]
push edx
lea edx [ esp + 0x5c ]
push ecx
push edx
mov ecx eax
call sub_403ee0
xor esi esi
mov eax [ ecx + 0x20 ]
push rwxdata
push eax
mov [ ecx + 0x44 ] bl
call [ GetClientRect@IAT ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
add ecx 0x64
mov [ rwxdata ] edx
mov [ rwxdata ] ecx
mov edx [ esp + 0x10 ]
add edi 0x19
inc edx
cmp edi 0x113
mov [ esp + 0x10 ] edx
jl rwxdata
cmp esi 0x16
jne rwxdata
mov edx [ esp + 0x10 ]
cmp [ edx ] 0x0
jne rwxdata
inc esi
cmp esi 0x18
jl rwxdata
cmp esi 0x13
jl rwxdata
lea eax [ esp + 0x3c ]
push eax
jmp rwxdata
lea eax [ esi + esi * 4 ]
xor edi edi
lea ecx [ esi + eax * 2 + rwxdata ]
mov [ esp + 0x10 ] ecx
call sub_404c90
mov ecx [ rwxdata ]
mov eax [ rwxdata ]
mov edx [ rwxdata ]
mov ebx [ rwxdata ]
mov esi [ esp + 0x48 ]
sub ecx eax
lea eax [ esp + 0x44 ]
sub edx ebx
neg eax
sbb eax eax
push 0xcc0020
and eax esi
push ebp
push ebp
push eax
push ecx
mov ecx [ esp + 0x78 ]
push edx
push ebp
mov edx [ ecx + 0x4 ]
push ebp
push edx
call [ BitBlt@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_2405
mov esi rwxdata
mov [ esp + 0x2c ] esi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x5c ] 0x7
call Ordinal_MFC42_2414
mov edi rwxdata
mov [ esp + 0x34 ] esi
mov [ esp + 0x2c ] edi
lea ecx [ esp + 0x34 ]
mov [ esp + 0x5c ] 0x8
call Ordinal_MFC42_2414
mov [ esp + 0x34 ] edi
mov [ esp + 0x3c ] esi
lea ecx [ esp + 0x3c ]
mov [ esp + 0x5c ] 0x9
call Ordinal_MFC42_2414
mov [ esp + 0x3c ] edi
mov [ esp + 0x14 ] esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x5c ] 0xa
call Ordinal_MFC42_2414
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] esi
lea ecx [ esp + 0x1c ]
mov [ esp + 0x5c ] 0xb
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
mov [ esp + 0x1c ] edi
mov [ esp + 0x5c ] 0x0
call Ordinal_MFC42_640
mov [ esp + 0x24 ] esi
lea ecx [ esp + 0x24 ]
mov [ esp + 0x5c ] 0xc
call Ordinal_MFC42_2414
mov ecx [ esp + 0x54 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x4
cmp esi 0xf
jl rwxdata
cmp esi 0x15
jg rwxdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
mov edx [ rwxdata ]
mov ebp [ rwxdata ]
lea eax [ esi + esi * 4 + 0x5 ]
lea ebx [ edi + ebp + 0x19 ]
add ebp edi
lea ecx [ edx + eax * 4 ]
add eax ecx
lea ecx [ esi + esi * 4 ]
push eax
mov eax [ esp + 0x4c ]
lea edx [ edx + ecx * 4 ]
push ebx
add ecx edx
push ecx
push ebp
push eax
call [ Rectangle@IAT ]
xor ebp ebp
cmp esi 0x14
jg rwxdata
lea ecx [ esp + 0x34 ]
push ecx
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
lea edx [ esp + 0x2c ]
push edx
sub_405140
push ebp
mov ebp esp
sub esp 0x8
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
mov [ ebp + 0x8 ] 0x1
lea esi [ edi + ebx - 0x1 ]
call [ rand@IAT ]
cdq
mov ecx 0x7
idiv ecx
mov eax [ ebp + 0x8 ]
inc eax
cmp eax 0xf
mov [ ebp + 0x8 ] eax
mov [ rwxdata ] edx
jl rwxdata
cmp al [ esi - 0x1 ]
je rwxdata
mov eax [ ebp - 0x4 ]
dec esi
mov [ eax + 0x44 ] 0x0
mov al [ esi ]
test al al
je rwxdata
jmp rwxdata
call sub_404b50
mov edx [ ebp - 0x4 ]
mov [ edx + 0x44 ] 0x1
lea eax [ ebx + ebx ]
push eax
push 0x0
call [ GlobalAlloc@IAT ]
mov ecx eax
xor eax eax
test ebx ebx
mov [ ebp + 0xc ] ecx
jle rwxdata
mov eax [ ebp - 0x4 ]
xor esi esi
test ebx ebx
mov dl [ eax + 0x44 ]
mov [ ebp - 0x8 ] edi
mov [ ebp + 0xb ] dl
jle rwxdata
mov dl [ eax + edi ]
add ecx 0x2
shr dl 0x4
add dl 0x1e
mov [ ecx - 0x2 ] dl
mov dl [ eax + edi ]
and dl 0xf
add dl 0x1e
inc eax
mov [ ecx - 0x1 ] dl
cmp eax ebx
jl rwxdata
mov eax [ ebp - 0x4 ]
mov dl [ eax + 0x44 ]
test dl dl
je rwxdata
mov eax ecx
mov ecx [ ebp + 0xc ]
pop edi
pop esi
mov eax ecx
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp - 0x8 ]
inc eax
mov ebx 0x24
add eax ebx
call eax
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov cl [ eax ]
add eax 0x2
xor cl 0xe2
mov [ eax - 0x2 ] cl
add cl 0x2
shl cl 0x4
mov [ esi + edi ] cl
mov dl [ eax - 0x1 ]
sub dl 0x1e
xor dl cl
mov [ esi + edi ] dl
inc esi
cmp esi ebx
jl rwxdata
mov ecx [ ebp + 0xc ]
sub_405270
mov eax [ rwxdata ]
push ebp
push esi
push edi
mov edi [ rwxdata ]
mov ebp ecx
add edi 0x19
push eax
mov [ rwxdata ] edi
call sub_404b90
mov esi eax
add esp 0x4
mov ecx esi
mov ax [ esi + 0x24 ]
mov edx [ esi ]
push eax
push 0x0
push 0x0
push 0x0
call [ edx ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
mov eax [ esi + 0x4c ]
push ecx
mov ecx [ esi + 0x48 ]
push edx
mov edx [ rwxdata ]
push 0x19
push eax
mov eax [ rwxdata ]
push ecx
push edx
push eax
push 0x0
mov ecx esi
call sub_403ee0
xor esi esi
xor esi esi
add esi 0x8
cmp esi 0x20
jl rwxdata
mov edx [ rwxdata ]
push edx
call sub_404b90
mov ecx [ eax + esi + 0x28 ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404b90
mov ecx [ eax + esi + 0x2c ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esi 0x8
shr eax 0x1f
add edx eax
add esp 0x8
add edi edx
cmp esi 0x20
lea ecx [ edx + edx * 4 ]
mov [ edi + ecx * 2 + rwxdata ] 0x0
jl rwxdata
call [ rand@IAT ]
lea eax [ eax + eax * 2 ]
mov ecx 0x7
cdq
idiv ecx
push edx
mov [ rwxdata ] edx
call sub_404b90
mov eax [ rwxdata ]
mov edi [ rwxdata ]
sub eax edi
add esp 0x4
cdq
sub eax edx
mov edx [ rwxdata ]
sar eax 0x1
sub eax 0xc
pop edi
pop esi
mov [ rwxdata ] eax
mov [ rwxdata ] edx
pop ebp
retn 0x4
mov ecx [ rwxdata ]
push ecx
call sub_404b90
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404b90
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esp 0x8
shr eax 0x1f
add edx eax
add edi edx
lea ecx [ edx + edx * 4 ]
mov al [ edi + ecx * 2 + rwxdata ]
test al al
je rwxdata
mov eax [ rwxdata ]
cmp eax 0xa
jle rwxdata
inc eax
mov [ rwxdata ] eax
mov eax [ ebp + 0x20 ]
push 0x1
push 0x0
push eax
call [ InvalidateRect@IAT ]
mov ecx ebp
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebp
retn 0x4
cmp eax 0x64
jge rwxdata
push 0x0
mov ecx ebp
call sub_405690
sub_405450
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
call Ordinal_MFC42_4464
cmp eax 0xffffffff
jne rwxdata
mov [ rwxdata ] 0x0
mov ecx [ esi + 0x20 ]
push 0x0
push 0x96
push 0x1
push ecx
call [ SetTimer@IAT ]
lea edx [ esp + 0x8 ]
push edx
call [ time@IAT ]
lea eax [ esp + 0xc ]
push eax
call [ gmtime@IAT ]
mov ecx [ eax ]
push ecx
call [ srand@IAT ]
add esp 0xc
xor eax eax
pop esi
retn 0x4
or eax eax
pop esi
retn 0x4
sub_4054b0
mov eax [ rwxdata ]
push ebx
push esi
push edi
mov ebx ecx
push eax
call sub_404b90
mov edx [ esp + 0x14 ]
mov ecx eax
add esp 0x4
lea eax [ edx - 0x25 ]
cmp eax 0x3
ja rwxdata
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
jmp [ eax * 4 + jump_table_40566c ]
mov ax [ ecx + 0x24 ]
inc ax
movsx eax ax
cdq
idiv [ ecx + 0x50 ]
mov [ ecx + 0x24 ] dx
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
xor esi esi
xor edi edi
add eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
sub eax 0x19
add esi 0x8
cmp esi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add edi edx
mov cl [ edi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
add edi 0x8
cmp edi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add esi edx
mov cl [ esi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
mov ecx [ rwxdata ]
push ecx
call sub_404b90
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404b90
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ edi - 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
test ecx ecx
jl rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jge rwxdata
add [ rwxdata ] 0x19
mov ecx [ rwxdata ]
push ecx
call sub_404b90
mov ecx [ eax + edi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov esi edx
call sub_404b90
mov ecx [ eax + edi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ esi + 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
cmp ecx 0xa
jg rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
sub [ rwxdata ] 0x19
sub eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
add eax 0x19
add eax 0x19
mov [ rwxdata ] eax
sub eax 0x19
sub_405690
sub esp 0x164
push ebx
push esi
mov ebx ecx
push edi
mov ecx 0x6
mov esi rwxdata
lea edi [ esp + 0x14 ]
lea eax [ esp + 0x30 ]
[ edi ] [ esi ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
movsb [ edi ] [ esi ]
call [ FindFirstFileA@IAT ]
lea edx [ esp + 0x14 ]
push 0x22b0
push rwxdata
mov ecx ebx
mov [ esp + 0x14 ] edx
call sub_405140
push 0x0
call [ exit@IAT ]
sub_405730
push 0xffffffff
push sub_406478
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4057a0
push 0xffffffff
push sub_406498
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405810
push 0xffffffff
push sub_4064b8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405880
push 0xffffffff
push sub_4064d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4058d0
push 0xffffffff
push sub_4064fa
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x1e0
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_405970
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405970
push 0xffffffff
push sub_406526
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call Ordinal_MFC42_366
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_529
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_554
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4059f0
push 0xffffffff
push sub_406546
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_807
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_796
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_674
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405a60
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
push edi
mov esi ecx
push eax
call Ordinal_MFC42_4457
cmp eax 0xffffffff
je rwxdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn 0x4
push 0xe800
xor eax eax
sub esp 0x10
xor ecx ecx
mov ebp esp
xor edx edx
lea edi [ esi + 0x140 ]
push 0x50402834
mov [ ebp ] eax
xor ebx ebx
push 0x800
push esi
mov [ ebp + 0x4 ] ecx
mov ecx edi
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] ebx
call Ordinal_MFC42_6625
test eax eax
je rwxdata
push 0x80
mov ecx edi
call Ordinal_MFC42_4163
test eax eax
je rwxdata
lea ebx [ esi + 0xc0 ]
push 0xe801
push 0x50008200
push esi
mov ecx ebx
call Ordinal_MFC42_2117
test eax eax
je rwxdata
push 0x4
push rwxdata
mov ecx ebx
call Ordinal_MFC42_6000
test eax eax
je rwxdata
push 0xf000
mov ecx edi
call Ordinal_MFC42_2626
push 0x0
mov ecx edi
call Ordinal_MFC42_6215
push 0x0
mov ecx ebx
call Ordinal_MFC42_6215
push 0xf000
mov ecx esi
call Ordinal_MFC42_2627
push 0x0
push 0x0
push edi
mov ecx esi
call Ordinal_MFC42_2494
push 0x0
mov ecx esi
call sub_405bf0
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
sub_405b50
push esi
mov esi [ esp + 0x8 ]
push esi
call Ordinal_MFC42_5252
test eax eax
jne rwxdata
mov al [ rwxdata ]
push edi
mov edi [ GetSystemMetrics@IAT ]
test al 0x1
jne rwxdata
pop esi
retn 0x4
mov cl [ rwxdata ]
mov al 0x2
test al cl
jne rwxdata
mov cl al
push 0x0
or cl 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
mov eax 0x55555556
pop edi
imul [ rwxdata ]
mov eax edx
shr eax 0x1f
add edx eax
mov eax 0x38e38e39
mov [ esi + 0x1c ] edx
mov ecx [ rwxdata ]
imul ecx
sar edx 0x1
mov ecx edx
mov [ esi + 0x14 ] 0x11f
shr ecx 0x1f
add edx ecx
mov [ esi + 0x10 ] 0x264
mov [ esi + 0x18 ] edx
mov eax 0x1
pop esi
retn 0x4
or cl al
push 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
sub_405bf0
mov eax [ rwxdata ]
push esi
test eax eax
mov esi ecx
jne rwxdata
mov cl [ esp + 0x8 ]
test cl cl
je rwxdata
test esi esi
je rwxdata
test esi esi
jne rwxdata
test esi esi
jne rwxdata
push eax
call [ GetMenu@IAT ]
mov [ rwxdata ] eax
mov eax [ esi + 0x20 ]
mov eax [ esi + 0x20 ]
xor eax eax
jmp rwxdata
mov ecx [ esi + 0x20 ]
xor ecx ecx
jmp rwxdata
push 0x0
push eax
call [ SetMenu@IAT ]
push 0x20
push 0x0
push 0xc00000
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
push eax
push ecx
call [ SetMenu@IAT ]
push 0x20
push 0xc00000
push 0x0
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
_start
push ebp
mov ebp esp
push 0xffffffff
push _except_handler3
push rwxdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rwxdata ] 0xffffffff
or [ rwxdata ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rwxdata ] eax
call sub_4062eb
cmp [ rwxdata ] ebx
jne rwxdata
call sub_4062d6
push rwxdata
push rwxdata
call _initterm
mov eax [ rwxdata ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rwxdata ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne rwxdata
push sub_4062e8
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je rwxdata
mov al [ esi ]
cmp al bl
je rwxdata
inc esi
mov [ ebp - 0x74 ] esi
jmp rwxdata
cmp [ esi ] 0x22
jne rwxdata
cmp al 0x22
jne rwxdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je rwxdata
cmp al 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp rwxdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_4062f2
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_40630a
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne rwxdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401d89
pushfd
int3
sub_403e73
jmp [ edx + 0x62b80040 ]
sub_403e80
mov edx ecx
push edi
mov ecx 0x8
xor eax eax
lea edi [ edx + 0x4 ]
mov [ edx ] rwxdata
[ edi ]
mov [ edx + 0x24 ] ax
mov eax edx
pop edi
retn
sub_403ea0
push esi
mov esi ecx
call sub_403ec0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_403ec0
mov [ ecx ] rwxdata
retn
sub_403ed0
retn 0x10
sub_404140
push esi
mov esi ecx
call sub_404350
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_404350
push edi
lea edi [ ecx + 0x4 ]
mov ecx 0x8
xor eax eax
[ edi ]
pop edi
retn
sub_404360
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_404370
mov eax rwxdata
retn
sub_404380
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_4043a0
push esi
mov esi ecx
call sub_4043c0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4043c0
jmp Ordinal_MFC42_815
sub_4043d0
call sub_4043e0
jmp sub_4043f0
sub_4043e0
mov ecx rwxdata
jmp sub_404380
sub_4043f0
push sub_404400
call sub_40613a
pop ecx
retn
sub_404400
mov ecx rwxdata
jmp sub_4043c0
sub_404570
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_404590
push esi
mov esi ecx
call sub_4045b0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4045b0
jmp Ordinal_MFC42_641
sub_4045c0
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_4045d0
mov eax rwxdata
retn
sub_404640
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_404650
retn
sub_404660
retn 0x4
sub_404670
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_404680
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_4046f0
mov eax [ Ordinal_MFC42_1825@IAT ]
retn
sub_404700
mov eax rwxdata
retn
sub_404710
mov eax [ Ordinal_MFC42_4238@IAT ]
retn
sub_404720
mov eax rwxdata
retn
sub_404730
push esi
mov esi ecx
call Ordinal_MFC42_338
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_404750
push esi
mov esi ecx
call sub_404770
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404770
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_652
sub_404780
call Ordinal_MFC42_4823
neg eax
sbb eax eax
neg eax
retn
sub_404790
retn 0x4
sub_4047a0
mov eax [ ecx + 0x48 ]
retn
sub_4047b0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x48 ] eax
retn 0x4
sub_4047c0
jmp rwxdata
retn
sub_4047e0
call sub_4047f0
jmp sub_404820
sub_4047f0
mov ecx rwxdata
jmp sub_404800
sub_404800
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_404820
push sub_404830
call sub_40613a
pop ecx
retn
sub_404830
mov ecx rwxdata
jmp j_sub_403ec0
sub_404840
call sub_404850
jmp sub_404890
sub_404850
mov ecx rwxdata
jmp sub_404860
sub_404860
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x1
mov eax esi
pop esi
retn
j_sub_403ec0
jmp sub_403ec0
sub_404890
push sub_4048a0
call sub_40613a
pop ecx
retn
sub_4048a0
mov ecx rwxdata
jmp j_sub_403ec0
sub_4048b0
call sub_4048c0
jmp sub_4048f0
sub_4048c0
mov ecx rwxdata
jmp sub_4048d0
sub_4048d0
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_4048f0
push sub_404900
call sub_40613a
pop ecx
retn
sub_404900
mov ecx rwxdata
jmp j_sub_403ec0
sub_404910
call sub_404920
jmp sub_404950
sub_404920
mov ecx rwxdata
jmp sub_404930
sub_404930
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404950
push sub_404960
call sub_40613a
pop ecx
retn
sub_404960
mov ecx rwxdata
jmp j_sub_403ec0
sub_404970
call sub_404980
jmp sub_4049d0
sub_404980
mov ecx rwxdata
jmp sub_404990
sub_404990
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_4049b0
push esi
mov esi ecx
call j_sub_403ec0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4049d0
push sub_4049e0
call sub_40613a
pop ecx
retn
sub_4049e0
mov ecx rwxdata
jmp j_sub_403ec0
sub_4049f0
call sub_404a00
jmp sub_404a30
sub_404a00
mov ecx rwxdata
jmp sub_404a10
sub_404a10
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_404a30
push sub_404a40
call sub_40613a
pop ecx
retn
sub_404a40
mov ecx rwxdata
jmp j_sub_403ec0
sub_404a50
call sub_404a60
jmp sub_404a90
sub_404a60
mov ecx rwxdata
jmp sub_404a70
sub_404a70
push esi
mov esi ecx
call sub_403e80
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404a90
push sub_404aa0
call sub_40613a
pop ecx
retn
sub_404aa0
mov ecx rwxdata
jmp j_sub_403ec0
sub_404b10
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_404b20
mov eax rwxdata
retn
sub_404b30
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_404b40
mov eax rwxdata
retn
sub_404c50
push esi
mov esi ecx
call sub_404c70
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404c70
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_813
sub_404c80
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_5260
retn 0x4
sub_405250
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_2535
retn 0x4
sub_405260
retn 0x8
sub_405680
mov eax 0x1
retn 0x4
sub_405700
mov [ ecx ] rwxdata
retn
sub_405710
push esi
mov esi ecx
call sub_405730
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405780
push esi
mov esi ecx
call sub_4057a0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4057f0
push esi
mov esi ecx
call sub_405810
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405860
push esi
mov esi ecx
call sub_405880
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405930
mov eax [ Ordinal_MFC42_1842@IAT ]
retn
sub_405940
mov eax rwxdata
retn
sub_405950
mov eax [ Ordinal_MFC42_4242@IAT ]
retn
sub_405960
mov eax rwxdata
retn
sub_4059d0
push esi
mov esi ecx
call sub_4059f0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_4615
jmp [ Ordinal_MFC42_4615@IAT ]
Ordinal_MFC42_4612
jmp [ Ordinal_MFC42_4612@IAT ]
Ordinal_MFC42_4610
jmp [ Ordinal_MFC42_4610@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_617
jmp [ Ordinal_MFC42_617@IAT ]
Ordinal_MFC42_5301
jmp [ Ordinal_MFC42_5301@IAT ]
Ordinal_MFC42_5214
jmp [ Ordinal_MFC42_5214@IAT ]
Ordinal_MFC42_296
jmp [ Ordinal_MFC42_296@IAT ]
Ordinal_MFC42_986
jmp [ Ordinal_MFC42_986@IAT ]
Ordinal_MFC42_520
jmp [ Ordinal_MFC42_520@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_4159
jmp [ Ordinal_MFC42_4159@IAT ]
Ordinal_MFC42_6117
jmp [ Ordinal_MFC42_6117@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_4696
jmp [ Ordinal_MFC42_4696@IAT ]
Ordinal_MFC42_3058
jmp [ Ordinal_MFC42_3058@IAT ]
Ordinal_MFC42_3065
jmp [ Ordinal_MFC42_3065@IAT ]
Ordinal_MFC42_6336
jmp [ Ordinal_MFC42_6336@IAT ]
Ordinal_MFC42_2510
jmp [ Ordinal_MFC42_2510@IAT ]
Ordinal_MFC42_2542
jmp [ Ordinal_MFC42_2542@IAT ]
Ordinal_MFC42_5243
jmp [ Ordinal_MFC42_5243@IAT ]
Ordinal_MFC42_5740
jmp [ Ordinal_MFC42_5740@IAT ]
Ordinal_MFC42_1746
jmp [ Ordinal_MFC42_1746@IAT ]
Ordinal_MFC42_5577
jmp [ Ordinal_MFC42_5577@IAT ]
Ordinal_MFC42_3172
jmp [ Ordinal_MFC42_3172@IAT ]
Ordinal_MFC42_5653
jmp [ Ordinal_MFC42_5653@IAT ]
Ordinal_MFC42_4420
jmp [ Ordinal_MFC42_4420@IAT ]
Ordinal_MFC42_4953
jmp [ Ordinal_MFC42_4953@IAT ]
Ordinal_MFC42_4858
jmp [ Ordinal_MFC42_4858@IAT ]
Ordinal_MFC42_2399
jmp [ Ordinal_MFC42_2399@IAT ]
Ordinal_MFC42_4387
jmp [ Ordinal_MFC42_4387@IAT ]
Ordinal_MFC42_3454
jmp [ Ordinal_MFC42_3454@IAT ]
Ordinal_MFC42_3198
jmp [ Ordinal_MFC42_3198@IAT ]
Ordinal_MFC42_6080
jmp [ Ordinal_MFC42_6080@IAT ]
Ordinal_MFC42_6175
jmp [ Ordinal_MFC42_6175@IAT ]
Ordinal_MFC42_4623
jmp [ Ordinal_MFC42_4623@IAT ]
Ordinal_MFC42_4426
jmp [ Ordinal_MFC42_4426@IAT ]
Ordinal_MFC42_338
jmp [ Ordinal_MFC42_338@IAT ]
Ordinal_MFC42_652
jmp [ Ordinal_MFC42_652@IAT ]
Ordinal_MFC42_4823
jmp [ Ordinal_MFC42_4823@IAT ]
Ordinal_MFC42_4614
jmp [ Ordinal_MFC42_4614@IAT ]
Ordinal_MFC42_4613
jmp [ Ordinal_MFC42_4613@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_3573
jmp [ Ordinal_MFC42_3573@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_5787
jmp [ Ordinal_MFC42_5787@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2535
jmp [ Ordinal_MFC42_2535@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_4464
jmp [ Ordinal_MFC42_4464@IAT ]
Ordinal_MFC42_2723
jmp [ Ordinal_MFC42_2723@IAT ]
Ordinal_MFC42_2390
jmp [ Ordinal_MFC42_2390@IAT ]
Ordinal_MFC42_3059
jmp [ Ordinal_MFC42_3059@IAT ]
Ordinal_MFC42_5100
jmp [ Ordinal_MFC42_5100@IAT ]
Ordinal_MFC42_5103
jmp [ Ordinal_MFC42_5103@IAT ]
Ordinal_MFC42_4467
jmp [ Ordinal_MFC42_4467@IAT ]
Ordinal_MFC42_4303
jmp [ Ordinal_MFC42_4303@IAT ]
Ordinal_MFC42_3350
jmp [ Ordinal_MFC42_3350@IAT ]
Ordinal_MFC42_5012
jmp [ Ordinal_MFC42_5012@IAT ]
Ordinal_MFC42_975
jmp [ Ordinal_MFC42_975@IAT ]
Ordinal_MFC42_5472
jmp [ Ordinal_MFC42_5472@IAT ]
Ordinal_MFC42_3403
jmp [ Ordinal_MFC42_3403@IAT ]
Ordinal_MFC42_2879
jmp [ Ordinal_MFC42_2879@IAT ]
Ordinal_MFC42_2878
jmp [ Ordinal_MFC42_2878@IAT ]
Ordinal_MFC42_4151
jmp [ Ordinal_MFC42_4151@IAT ]
Ordinal_MFC42_4077
jmp [ Ordinal_MFC42_4077@IAT ]
Ordinal_MFC42_5237
jmp [ Ordinal_MFC42_5237@IAT ]
Ordinal_MFC42_5282
jmp [ Ordinal_MFC42_5282@IAT ]
Ordinal_MFC42_2649
jmp [ Ordinal_MFC42_2649@IAT ]
Ordinal_MFC42_1665
jmp [ Ordinal_MFC42_1665@IAT ]
Ordinal_MFC42_4436
jmp [ Ordinal_MFC42_4436@IAT ]
Ordinal_MFC42_4427
jmp [ Ordinal_MFC42_4427@IAT ]
Ordinal_MFC42_796
jmp [ Ordinal_MFC42_796@IAT ]
Ordinal_MFC42_674
jmp [ Ordinal_MFC42_674@IAT ]
Ordinal_MFC42_554
jmp [ Ordinal_MFC42_554@IAT ]
Ordinal_MFC42_529
jmp [ Ordinal_MFC42_529@IAT ]
Ordinal_MFC42_366
jmp [ Ordinal_MFC42_366@IAT ]
Ordinal_MFC42_807
jmp [ Ordinal_MFC42_807@IAT ]
Ordinal_MFC42_2494
jmp [ Ordinal_MFC42_2494@IAT ]
Ordinal_MFC42_2627
jmp [ Ordinal_MFC42_2627@IAT ]
Ordinal_MFC42_2626
jmp [ Ordinal_MFC42_2626@IAT ]
Ordinal_MFC42_6000
jmp [ Ordinal_MFC42_6000@IAT ]
Ordinal_MFC42_2117
jmp [ Ordinal_MFC42_2117@IAT ]
Ordinal_MFC42_4163
jmp [ Ordinal_MFC42_4163@IAT ]
Ordinal_MFC42_6625
jmp [ Ordinal_MFC42_6625@IAT ]
Ordinal_MFC42_4457
jmp [ Ordinal_MFC42_4457@IAT ]
Ordinal_MFC42_5252
jmp [ Ordinal_MFC42_5252@IAT ]
Ordinal_MFC42_4284
jmp [ Ordinal_MFC42_4284@IAT ]
sub_40610e
cmp [ rwxdata ] 0xffffffff
jne rwxdata
push rwxdata
push rwxdata
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_40613a
push [ esp + 0x4 ]
call sub_40610e
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_4062d6
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_4062e8
xor eax eax
retn
sub_4062eb
retn
_controlfp
jmp [ _controlfp@IAT ]
sub_4062f2
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_406338
jmp sub_406338
sub_406338
push 0x600
push 0x0
call sub_40630a
mov [ rwxdata ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
sub_406360
mov eax [ ebp - 0x138 ]
push eax
call sub_404640
retn
sub_40636d
lea ecx [ ebp - 0x134 ]
jmp Ordinal_MFC42_617
sub_406378
mov eax rwxdata
jmp __CxxFrameHandler
sub_406390
lea ecx [ ebp - 0x6c ]
jmp sub_4045b0
sub_406398
mov eax rwxdata
jmp __CxxFrameHandler
sub_4063b0
mov eax [ ebp - 0x10 ]
push eax
call sub_404640
retn
sub_4063ba
mov eax rwxdata
jmp __CxxFrameHandler
sub_4063d0
mov eax [ ebp - 0x10 ]
push eax
call sub_404640
retn
sub_4063da
mov eax rwxdata
jmp __CxxFrameHandler
sub_4063f0
lea ecx [ ebp - 0x3c ]
jmp sub_405880
sub_4063f8
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_640
sub_406400
lea ecx [ ebp - 0x44 ]
jmp sub_4057a0
sub_406408
lea ecx [ ebp - 0x4c ]
jmp sub_405810
sub_406410
lea ecx [ ebp - 0x24 ]
jmp sub_405810
sub_406418
lea ecx [ ebp - 0x2c ]
jmp sub_405810
sub_406420
lea ecx [ ebp - 0x34 ]
jmp sub_405810
sub_406428
lea ecx [ ebp - 0x34 ]
jmp sub_405700
sub_406430
lea ecx [ ebp - 0x2c ]
jmp sub_405700
sub_406438
lea ecx [ ebp - 0x24 ]
jmp sub_405700
sub_406440
lea ecx [ ebp - 0x4c ]
jmp sub_405700
sub_406448
lea ecx [ ebp - 0x44 ]
jmp sub_405700
sub_406450
lea ecx [ ebp - 0x3c ]
jmp sub_405700
sub_406458
mov eax rwxdata
jmp __CxxFrameHandler
sub_406470
mov ecx [ ebp - 0x10 ]
jmp sub_405700
sub_406478
mov eax rwxdata
jmp __CxxFrameHandler
sub_406490
mov ecx [ ebp - 0x10 ]
jmp sub_405700
sub_406498
mov eax rwxdata
jmp __CxxFrameHandler
sub_4064b0
mov ecx [ ebp - 0x10 ]
jmp sub_405700
sub_4064b8
mov eax rwxdata
jmp __CxxFrameHandler
sub_4064d0
mov ecx [ ebp - 0x10 ]
jmp sub_405700
sub_4064d8
mov eax rwxdata
jmp __CxxFrameHandler
sub_4064f0
mov eax [ ebp - 0x10 ]
push eax
call sub_404640
retn
sub_4064fa
mov eax rwxdata
jmp __CxxFrameHandler
sub_406510
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406518
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_406526
mov eax rwxdata
jmp __CxxFrameHandler
sub_406530
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406538
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_406546
mov eax rwxdata
jmp __CxxFrameHandler
sub_406573
jmp [ eax + 0x63 ]
