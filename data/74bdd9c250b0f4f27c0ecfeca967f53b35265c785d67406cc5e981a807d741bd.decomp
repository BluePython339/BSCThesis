sub_10001000
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push esi
mov esi [ esp + 0x14 ]
push edi
push esi
push eax
push ecx
call [ rw-data ]
cmp [ esi ] 0x0
je r-xdata
pop edi
pop esi
retn 0x10
mov edx [ rw-data ]
push 0x14
push 0x8
push edx
call [ rw-data ]
test eax eax
mov [ esi + 0x4 ] eax
jne r-xdata
mov eax [ rw-data ]
push ebx
mov ebx [ GetProcAddress@IAT ]
push ebp
push rw-data
push eax
call ebx
call eax
mov ecx [ rw-data ]
push eax
push rw-data
push ecx
call ebx
call eax
add esp 0x4
xor edi edi
mov ebp 0x6
pop edi
or eax 0xffffffff
pop esi
retn 0x10
mov edx [ rw-data ]
push rw-data
push edx
call ebx
call eax
mov ecx [ esi + 0x4 ]
inc edi
dec ebp
mov [ ecx + edi - 0x1 ] al
jne r-xdata
mov edx [ esi + 0x4 ]
mov eax [ esp + 0x1c ]
mov ecx [ esi ]
push 0x14
push edx
push 0x3
push 0x0
push eax
push ecx
call [ rw-data ]
mov edi eax
pop ebp
test edi edi
pop ebx
je r-xdata
mov [ esi + 0x8 ] 0x14
xor eax eax
push esi
call sub_100010d0
mov eax edi
pop edi
pop esi
retn 0x10
sub_100010d0
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
pop esi
test eax eax
je r-xdata
push eax
call [ rw-data ]
retn 0x4
push eax
mov eax [ rw-data ]
push 0x0
push eax
call [ rw-data ]
sub_10001100
sub esp 0xc
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
push edi
mov edi [ esp + 0x28 ]
xor ecx ecx
test edi edi
mov [ esp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi + 0x4 ]
xor edx edx
mov ebx [ esp + 0x30 ]
mov dl [ eax + edi + 0x6 ]
mov edi [ esi + 0x8 ]
mov eax edx
mov [ esp + 0x20 ] eax
add eax ecx
mov [ esp + 0x14 ] eax
add eax 0x14
sub edi eax
mov [ esp + 0x18 ] eax
lea eax [ edi + ebx ]
mov [ esp + 0x30 ] eax
push eax
mov eax [ rw-data ]
push 0x8
push eax
call [ rw-data ]
mov ebp eax
test ebp ebp
jne r-xdata
mov eax [ esi + 0x4 ]
mov ebp edi
add eax 0x6
test edi edi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc
retn 0x14
xor edx edx
mov dl [ eax ]
add ecx edx
inc eax
dec ebp
jne r-xdata
mov [ esp + 0x10 ] ecx
test ebx ebx
je r-xdata
cmp ebx [ esp + 0x20 ]
je r-xdata
mov eax [ esp + 0x20 ]
cmp ebx eax
je r-xdata
mov ecx [ esp + 0x2c ]
push ebx
push ecx
push ebp
call [ rw-data ]
add esp 0xc
mov eax [ esi + 0x4 ]
mov ecx [ esp + 0x14 ]
push eax
push ecx
add eax 0x14
push edi
push eax
call sub_10001290
mov edx [ esi + 0x4 ]
push edi
mov eax [ esp + 0x1c ]
add edx eax
lea eax [ ebx + ebp ]
push edx
push eax
call [ rw-data ]
add esp 0xc
mov eax [ esi + 0x4 ]
push ebx
push ebp
mov edx [ esi + 0x4 ]
mov ecx [ esp + 0x28 ]
mov [ edx + ecx + 0x6 ] bl
mov edi [ esi + 0x8 ]
mov edx [ esi + 0x4 ]
sub ebx eax
add edi ebx
mov eax edi
mov [ esi + 0x8 ] edi
mov ecx [ rw-data ]
push eax
mov eax [ rw-data ]
push edx
push 0x8
push eax
push rw-data
push ecx
call [ GetProcAddress@IAT ]
call eax
test eax eax
mov [ esi + 0x4 ] eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn 0x14
mov ecx [ rw-data ]
push ebp
push eax
push ecx
call [ rw-data ]
xor eax eax
mov edx [ esp + 0x30 ]
push edx
push ebp
jmp r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc
retn 0x14
mov ecx [ esp + 0x18 ]
lea edx [ eax + ecx + 0x14 ]
push edx
call [ rw-data ]
mov eax [ esi + 0x4 ]
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x3c ]
add esp 0xc
push eax
push ecx
add eax 0x14
push edx
push eax
call sub_10001290
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
mov edx [ esp + 0x24 ]
push eax
mov eax [ esi ]
push ecx
push 0x3
push 0x0
push edx
push eax
call [ rw-data ]
test eax eax
jne r-xdata
sub_10001290
sub esp 0x18
mov ecx [ esp + 0x24 ]
mov eax 0xaaaaaaab
mul ecx
mov eax [ esp + 0x20 ]
push ebx
push ebp
mov ebp edx
lea edx [ eax + ecx ]
mov eax 0xaaaaaaab
mov [ esp + 0x1c ] edx
mul edx
push esi
mov esi edx
shr ebp 0x2
mov ebx ebp
push edi
mov edi [ esp + 0x38 ]
mov [ esp + 0x1c ] ebp
shr esi 0x2
cmp ebx esi
mov [ esp + 0x18 ] ebx
mov [ esp + 0x20 ] esi
jae r-xdata
cmp ebx ebp
jne r-xdata
lea edx [ ebx + ebx * 2 ]
lea eax [ edx + edx - 0x2 ]
mov [ esp + 0x10 ] eax
xor ecx ecx
mov eax ecx
xor edx edx
mov ecx 0x6
div ecx
mov ecx edx
jmp r-xdata
xor ecx ecx
mov [ esp + 0x38 ] ecx
jmp r-xdata
mov eax ecx
xor edx edx
mov ecx 0x6
div ecx
mov ecx edx
cmp ecx 0x6
mov [ esp + 0x38 ] ecx
jae r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn 0x10
mov al bl
mov dl 0x6
imul dl
lea ebx [ ebx + ebx * 2 ]
mov [ esp + 0x30 ] al
mov eax [ esp + 0x2c ]
lea esi [ ecx + 0x2 ]
shl ebx 0x1
mov [ esp + 0x34 ] ebx
lea edx [ ebx + eax - 0x2 ]
mov [ esp + 0x14 ] edx
jmp r-xdata
mov eax [ esp + 0x24 ]
xor edx edx
mov esi 0x6
mov [ esp + 0x38 ] ecx
div esi
cmp ecx edx
mov [ esp + 0x24 ] edx
jae r-xdata
mov al bl
mov dl 0x6
imul dl
mov edx [ esp + 0x10 ]
mov [ esp + 0x30 ] al
mov eax [ esp + 0x2c ]
lea esi [ ecx + 0x2 ]
add edx eax
mov [ esp + 0x14 ] edx
mov ecx [ esp + 0x10 ]
inc ebx
add ecx 0x6
cmp ebx esi
mov [ esp + 0x10 ] ecx
mov ecx [ esp + 0x34 ]
mov [ esp + 0x18 ] ebx
jb r-xdata
xor eax eax
mov ebp 0x6
mov al [ esi + edi - 0x2 ]
mov edx eax
lea eax [ esi + ebx - 0x2 ]
imul edx eax
shr edx 0x7
mov [ esp + 0x2c ] edx
lea eax [ esi - 0x1 ]
xor edx edx
mov ebx 0x6
div ebx
mov ebx [ esp + 0x2c ]
mov al [ edx + edi ]
xor edx edx
xor bl al
lea eax [ esi + 0x1 ]
div ebp
mov al [ esp + 0x30 ]
add al cl
mov cl [ edx + edi ]
xor edx edx
xor cl al
mov eax esi
div ebp
mov al [ edx + edi ]
and cl al
mov eax [ esp + 0x14 ]
add bl cl
mov cl [ esi + eax ]
xor cl bl
mov [ esi + eax ] cl
mov ecx [ esp + 0x38 ]
mov eax [ esp + 0x24 ]
inc ecx
inc esi
cmp ecx eax
mov [ esp + 0x38 ] ecx
jb r-xdata
mov edx [ esp + 0x10 ]
xor eax eax
mov al [ edi + esi - 0x2 ]
add edx esi
mov ebx eax
lea eax [ esi - 0x1 ]
imul ebx edx
xor edx edx
mov ebp 0x6
div ebp
shr ebx 0x7
mov al [ edx + edi ]
xor edx edx
xor bl al
lea eax [ esi + 0x1 ]
div ebp
mov al [ esp + 0x30 ]
add al cl
mov cl [ edx + edi ]
xor edx edx
xor cl al
mov eax esi
div ebp
mov al [ edx + edi ]
and cl al
mov eax [ esp + 0x14 ]
add bl cl
mov cl [ eax + esi ]
xor cl bl
mov [ eax + esi ] cl
mov ecx [ esp + 0x38 ]
inc ecx
inc esi
cmp esi 0x8
mov [ esp + 0x38 ] ecx
jb r-xdata
mov ebx [ esp + 0x18 ]
mov ebp [ esp + 0x1c ]
mov esi [ esp + 0x20 ]
cmp ebx ebp
jne r-xdata
mov ebx [ esp + 0x34 ]
sub_10001490
mov eax 0x1004
call sub_10002750
push ebx
mov ebx [ esp + 0x100c ]
push edi
mov edi [ esp + 0x1014 ]
push edi
push ebx
mov [ esp + 0x10 ] 0x0
call sub_100021e0
test eax eax
jne r-xdata
push esi
push 0x800
lea eax [ esp + 0x814 ]
push 0x0
push eax
call [ rw-data ]
mov eax [ rw-data ]
add esp 0xc
cmp eax 0x6
jae r-xdata
pop edi
mov eax 0x1
pop ebx
add esp 0x1004
retn 0x8
push 0x800
lea edx [ esp + 0x814 ]
push 0x0
push edx
call [ rw-data ]
push ebx
push rw-data
lea eax [ esp + 0x824 ]
push 0x400
push eax
call [ rw-data ]
push 0x800
lea ecx [ esp + 0x30 ]
push 0x0
push ecx
call [ rw-data ]
add esp 0x28
lea edx [ esp + 0x10 ]
push rw-data
push edx
call [ rw-data ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
push 0x80000001
call [ rw-data ]
mov esi eax
test esi esi
jne r-xdata
push rw-data
push rw-data
lea ecx [ esp + 0x818 ]
push 0x400
push ecx
call [ rw-data ]
add esp 0x10
lea edx [ esp + 0xc ]
lea eax [ esp + 0x810 ]
push edx
push eax
push 0x80000002
call [ rw-data ]
test eax eax
jne r-xdata
mov eax esi
pop esi
pop edi
pop ebx
add esp 0x1004
retn 0x8
lea edx [ esp + 0x810 ]
push edx
call [ rw-data ]
lea eax [ eax + eax + 0x2 ]
lea ecx [ esp + 0x810 ]
mov edx [ esp + 0xc ]
push eax
push ecx
push 0x1
push esi
push edi
push edx
call [ rw-data ]
mov esi eax
mov eax [ esp + 0xc ]
push eax
call [ rw-data ]
push ebx
call [ rw-data ]
lea ecx [ eax + eax + 0x2 ]
mov edx [ esp + 0xc ]
push ecx
push ebx
push 0x1
push 0x0
push 0x0
push edx
call [ rw-data ]
mov esi eax
test esi esi
jne r-xdata
mov ecx [ esp + 0xc ]
push ecx
call [ rw-data ]
test esi esi
je r-xdata
push 0x800
push eax
lea eax [ esp + 0x18 ]
push eax
call [ rw-data ]
add esp 0xc
lea ecx [ esp + 0x10 ]
push rw-data
push ecx
call [ rw-data ]
push 0x800
lea edx [ esp + 0x814 ]
push esi
push edx
call [ rw-data ]
add esp 0xc
lea eax [ esp + 0x810 ]
push rw-data
push eax
call [ rw-data ]
lea ecx [ esp + 0x810 ]
push ecx
call [ rw-data ]
lea edx [ eax + eax + 0x2 ]
lea eax [ esp + 0x810 ]
push edx
mov edx [ esp + 0x10 ]
push eax
push 0x1
lea ecx [ esp + 0x1c ]
push esi
push ecx
push edx
call [ rw-data ]
mov esi eax
test esi esi
jne r-xdata
mov eax [ esp + 0xc ]
push eax
call [ rw-data ]
push 0x800
lea ecx [ esp + 0x14 ]
push esi
push ecx
call [ rw-data ]
add esp 0xc
lea edx [ esp + 0x10 ]
push rw-data
push edx
call [ rw-data ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
push 0x80000002
call [ rw-data ]
mov esi eax
test esi esi
jne r-xdata
push 0x800
lea edx [ esp + 0x14 ]
push eax
push edx
call [ rw-data ]
add esp 0xc
lea eax [ esp + 0x10 ]
push rw-data
push eax
call [ rw-data ]
push edi
call [ rw-data ]
lea ecx [ eax + eax + 0x2 ]
lea edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
push ecx
push edi
push 0x1
push esi
push edx
push eax
call [ rw-data ]
mov esi eax
sub_10001740
sub esp 0x814
lea eax [ esp + 0x8 ]
push 0xc
push 0x0
push eax
call [ rw-data ]
push 0x800
lea ecx [ esp + 0x24 ]
push 0x0
push ecx
call [ rw-data ]
add esp 0x18
lea edx [ esp + 0x14 ]
push rw-data
push edx
call [ rw-data ]
push 0x8
lea eax [ esp + 0x4 ]
push 0x0
push eax
call [ rw-data ]
add esp 0xc
lea ecx [ esp ]
push rw-data
push ecx
call [ rw-data ]
lea edx [ esp + 0x8 ]
lea eax [ esp ]
push edx
mov edx [ esp + 0x81c ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
push edx
call sub_10001000
test eax eax
jne r-xdata
add esp 0x814
retn 0x8
push esi
push rw-data
call [ rw-data ]
push eax
push rw-data
lea eax [ esp + 0xc ]
push 0x0
lea ecx [ esp + 0x18 ]
push eax
push ecx
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea edx [ esp + 0xc ]
push 0x1
lea eax [ esp + 0x18 ]
push edx
push eax
call sub_10001100
mov esi [ esp + 0x820 ]
push esi
call [ rw-data ]
push eax
push esi
lea ecx [ esp + 0xc ]
push 0x2
lea edx [ esp + 0x18 ]
push ecx
push edx
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea eax [ esp + 0xc ]
push 0x3
lea ecx [ esp + 0x18 ]
push eax
push ecx
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea edx [ esp + 0xc ]
push 0x4
lea eax [ esp + 0x18 ]
push edx
push eax
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea ecx [ esp + 0xc ]
push 0x5
lea edx [ esp + 0x18 ]
push ecx
push edx
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea eax [ esp + 0xc ]
push 0x6
lea ecx [ esp + 0x18 ]
push eax
push ecx
call sub_10001100
push rw-data
call [ rw-data ]
push eax
push rw-data
lea edx [ esp + 0xc ]
push 0x7
lea eax [ esp + 0x18 ]
push edx
push eax
call sub_10001100
mov ecx [ rw-data ]
push ecx
call [ rw-data ]
mov edx [ rw-data ]
push eax
push edx
lea eax [ esp + 0xc ]
push 0x8
lea ecx [ esp + 0x18 ]
push eax
push ecx
call sub_10001100
lea edx [ esp + 0xc ]
push edx
call sub_100010d0
pop esi
sub_10001910
sub esp 0x10
mov ecx [ esp + 0x18 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x28 ]
push edi
mov edi [ esp + 0x30 ]
mov ebx esi
lea edx [ ecx + esi ]
shr ebx 0x3
mov [ esp + 0x1c ] edx
mov eax ebx
shr edx 0x3
cmp eax edx
mov [ esp + 0x14 ] ebx
mov [ esp + 0x10 ] eax
mov [ esp + 0x18 ] edx
jae r-xdata
cmp eax ebx
jne r-xdata
mov ecx [ esp + 0x24 ]
lea ebp [ ecx + eax * 8 - 0x2 ]
xor ecx ecx
and esi 0x7
mov ecx esi
jmp r-xdata
xor ecx ecx
shl al 0x3
mov [ esp + 0x28 ] al
lea esi [ ecx + 0x2 ]
jmp r-xdata
mov ecx esi
and ecx 0x7
cmp ecx 0x8
jae r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x10
mov ebx [ esp + 0x24 ]
mov dl al
shl dl 0x3
mov [ esp + 0x28 ] dl
lea esi [ ecx + 0x2 ]
lea ebp [ ebx + eax * 8 - 0x2 ]
jmp r-xdata
mov edx [ esp + 0x1c ]
and edx 0x7
cmp ecx edx
mov [ esp + 0x2c ] edx
jae r-xdata
mov dl al
mov al [ edi + esi - 0x2 ]
add dl cl
imul dl
mov bl al
lea eax [ esi - 0x1 ]
shl bl cl
and eax 0x7
add bl [ eax + edi ]
lea eax [ esi + 0x1 ]
and eax 0x7
mov al [ eax + edi ]
imul dl
mov edx esi
and edx 0x7
and al [ edx + edi ]
xor bl al
mov al [ esi + ebp ]
xor al bl
inc ecx
mov [ esi + ebp ] al
inc esi
cmp esi 0xa
jl r-xdata
inc eax
add ebp 0x8
cmp eax edx
mov [ esp + 0x10 ] eax
jb r-xdata
shl al 0x3
mov [ esp + 0x28 ] al
lea esi [ ecx + 0x2 ]
jmp r-xdata
mov al [ esi + edi - 0x2 ]
add dl cl
imul dl
mov bl al
lea eax [ esi - 0x1 ]
shl bl cl
and eax 0x7
add bl [ eax + edi ]
lea eax [ esi + 0x1 ]
and eax 0x7
mov al [ eax + edi ]
imul dl
mov edx esi
and edx 0x7
and al [ edx + edi ]
xor bl al
mov al [ esi + ebp ]
xor al bl
inc ecx
mov [ esi + ebp ] al
mov eax [ esp + 0x2c ]
inc esi
cmp ecx eax
jb r-xdata
mov al [ esp + 0x28 ]
mov eax [ esp + 0x10 ]
mov ebx [ esp + 0x14 ]
mov esi [ esp + 0x2c ]
mov edx [ esp + 0x18 ]
cmp eax ebx
jne r-xdata
mov dl [ esp + 0x28 ]
sub_10001a60
sub esp 0x804
push ebx
push ebp
push esi
push edi
push 0x800
lea eax [ esp + 0x18 ]
push 0x0
push eax
call [ rw-data ]
mov edi [ esp + 0x824 ]
add esp 0xc
lea ecx [ esp + 0x14 ]
mov [ esp + 0x10 ] 0x0
push edi
push ecx
call [ rw-data ]
push rw-data
push edi
call [ rw-data ]
mov edx [ rw-data ]
mov esi [ GetProcAddress@IAT ]
push edi
push rw-data
push edx
call esi
call eax
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
push rw-data
push edi
push rw-data
push eax
call esi
call eax
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
lea eax [ esp + 0x14 ]
push rw-data
push eax
call [ rw-data ]
mov edx [ rw-data ]
lea ecx [ esp + 0x14 ]
push 0x1
push ecx
push edi
push rw-data
push edx
call esi
call eax
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x804
retn 0x14
mov ecx [ rw-data ]
push ebp
push rw-data
push ecx
call esi
call eax
mov edx [ rw-data ]
add esp 0x4
push eax
push rw-data
push edx
call esi
call eax
mov ebx eax
add esp 0x4
cmp ebx 0xffffffff
je r-xdata
mov ecx [ rw-data ]
push ebp
push rw-data
push ecx
call esi
call eax
add esp 0x4
mov ecx [ esp + 0x820 ]
mov edx [ esp + 0x81c ]
lea eax [ esp + 0x10 ]
push 0x0
push eax
mov eax [ rw-data ]
push ecx
push edx
push ebx
push rw-data
push eax
call esi
call eax
mov eax [ rw-data ]
lea ecx [ esp + 0x824 ]
push ecx
lea edx [ esp + 0x828 ]
push 0x0
push edx
push ebx
push rw-data
push eax
call esi
call eax
push ebx
call [ rw-data ]
push 0x800
lea ecx [ esp + 0x18 ]
push 0x0
push ecx
call [ rw-data ]
add esp 0xc
lea edx [ esp + 0x14 ]
push rw-data
push edx
call [ rw-data ]
lea eax [ esp + 0x14 ]
push eax
push edi
call sub_10001490
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x804
retn 0x14
sub_10001c00
mov eax 0x101c
call sub_10002750
push ebx
push esi
push edi
push 0x800
lea eax [ esp + 0x2c ]
push 0x0
push eax
call [ rw-data ]
mov ecx [ rw-data ]
mov esi [ GetProcAddress@IAT ]
add esp 0xc
push rw-data
push ecx
call esi
mov edx [ rw-data ]
push rw-data
push edx
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax [ rw-data ]
push rw-data
push eax
call esi
lea ecx [ esp + 0x28 ]
push 0x400
push ecx
mov [ rw-data ] eax
call [ rw-data ]
lea edx [ esp + 0x28 ]
push rw-data
push edx
call [ rw-data ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x3
lea eax [ esp + 0x3c ]
push 0x80000000
push eax
call [ rw-data ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
mov ecx [ rw-data ]
push 0x0
lea eax [ esp + 0x10 ]
push 0x0
push eax
push edi
push rw-data
push ecx
call esi
call eax
push edi
call [ rw-data ]
mov edx [ rw-data ]
lea ecx [ esp + 0x18 ]
push ecx
push rw-data
push edx
call esi
call eax
mov edx [ rw-data ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
push rw-data
push edx
call esi
call eax
jmp r-xdata
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x101c
retn
mov ecx [ rw-data ]
push 0x0
push edi
push rw-data
push ecx
call esi
call eax
mov edx [ rw-data ]
push 0x0
add eax 0xffff6e00
push 0x0
push eax
push edi
push rw-data
push edx
call esi
call eax
mov eax [ rw-data ]
push 0x9200
push 0x8
push eax
call [ rw-data ]
mov ebx eax
test ebx ebx
je r-xdata
push 0x800
lea edx [ esp + 0x82c ]
push 0x0
push edx
call [ rw-data ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
add esp 0xc
lea eax [ esp + 0x828 ]
push 0x400
push eax
push ecx
push rw-data
push edx
call esi
call eax
push 0x0
push 0x80
push 0x3
push 0x0
push 0x3
lea eax [ esp + 0x83c ]
push 0x80000000
push eax
call [ rw-data ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
mov edx [ rw-data ]
lea ecx [ esp + 0x14 ]
push 0x0
push ecx
push 0x9200
push ebx
push edi
push rw-data
push edx
mov [ esp + 0x30 ] 0x0
call esi
call eax
push edi
call [ rw-data ]
push rw-data
push 0x0
push 0x9200
push ebx
call sub_10001910
push 0x800
lea eax [ esp + 0x2c ]
push 0x0
push eax
call [ rw-data ]
add esp 0xc
lea ecx [ esp + 0x28 ]
push 0x400
push ecx
call [ rw-data ]
lea ecx [ esp + 0x28 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
push edx
push eax
push 0x9200
push ebx
push ecx
call sub_10001a60
test eax eax
jne r-xdata
mov edx [ rw-data ]
push ebx
push 0x0
push edx
call [ rw-data ]
pop edi
pop esi
mov eax 0x1
pop ebx
add esp 0x101c
retn
push 0x800
push eax
lea eax [ esp + 0x30 ]
push eax
call [ rw-data ]
add esp 0xc
lea ecx [ esp + 0x28 ]
push ecx
push 0x0
push 0x0
push 0x801c
push 0x0
push rw-data
push rw-data
call [ LoadLibraryA@IAT ]
push eax
call esi
call eax
lea ecx [ esp + 0x28 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
push edx
push eax
push 0x9200
push ebx
push ecx
call sub_10001a60
test eax eax
je r-xdata
Start
push ebp
mov ebp esp
sub esp 0x40c
push ebx
push esi
push edi
push rw-data
push 0x0
push 0x796
push rw-data
call sub_10001910
push rw-data
call [ LoadLibraryA@IAT ]
mov [ rw-data ] eax
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
call eax
mov [ rw-data ] eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov edx [ rw-data ]
push edx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
call [ LoadLibraryA@IAT ]
mov [ rw-data ] eax
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov edx [ rw-data ]
push edx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
mov [ ebp - 0x40c ] 0x54af97e1
movd mmx0 [ ebp - 0x40c ]
pslld mmx0 0x2
movd [ ebp - 0x40c ] mmx0
jmp r-xdata
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
call eax
mov [ rw-data ] eax
mov edx [ rw-data ]
and edx 0xffff
and edx 0xffff
and edx 0xff
and edx 0xff
mov [ rw-data ] edx
mov eax [ rw-data ]
and eax 0xffff
and eax 0xffff
shr eax 0x8
and eax 0xff
mov [ rw-data ] eax
push 0x400
push 0x0
lea ecx [ ebp - 0x408 ]
push ecx
call [ rw-data ]
add esp 0xc
push 0x0
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x4 ]
push edx
push 0x0
push 0x0
push 0x0
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
call eax
mov [ ebp - 0x8 ] 0x400
lea ecx [ ebp - 0x8 ]
push ecx
lea edx [ ebp - 0x408 ]
push edx
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
call eax
mov ecx [ rw-data ]
push ecx
mov edx [ rw-data ]
push edx
mov eax [ ebp - 0x1 ]
and eax 0xff
push eax
mov ecx [ ebp - 0x2 ]
and ecx 0xff
push ecx
mov edx [ ebp - 0x3 ]
and edx 0xff
push edx
mov eax [ ebp - 0x4 ]
and eax 0xff
push eax
push rw-data
lea ecx [ ebp - 0x408 ]
push ecx
call [ rw-data ]
lea edx [ ebp + eax - 0x408 ]
push edx
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
call eax
add esp 0x20
mov [ ebp - 0x3e4 ] 0x0
push rw-data
call [ LoadLibraryA@IAT ]
mov [ rw-data ] eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov edx [ rw-data ]
push edx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov edx [ rw-data ]
push edx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov eax [ rw-data ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
lea edx [ ebp - 0x408 ]
push edx
push 0x80000002
call sub_10001740
lea eax [ ebp - 0x408 ]
push eax
push 0x80000001
call sub_10001740
call sub_10001c00
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100021e0
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x634
push ebx
push esi
push edi
xor esi esi
mov [ ebp - 0x228 ] esi
mov [ ebp - 0x224 ] esi
push 0x208
push esi
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
add esp 0xc
mov [ ebp - 0x22c ] esi
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x4 ] esi
push 0x104
lea ecx [ ebp - 0x220 ]
push ecx
call [ rw-data ]
test eax eax
jne r-xdata
push rw-data
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
push 0x2
push esi
push esi
push rw-data
mov ecx [ rw-data ]
push ecx
mov edi [ GetProcAddress@IAT ]
call edi
call eax
mov [ ebp - 0x228 ] eax
cmp eax esi
je r-xdata
call [ rw-data ]
push esi
push esi
push esi
push esi
push esi
lea ecx [ ebp - 0x220 ]
push ecx
push 0x1
push 0x2
push 0x110
push 0xf01ff
mov esi [ ebp + 0xc ]
push esi
push esi
push eax
push rw-data
mov edx [ rw-data ]
push edx
call edi
call eax
mov ebx eax
mov [ ebp - 0x224 ] ebx
test ebx ebx
jne r-xdata
mov [ ebp - 0x63c ] rw-data
lea ecx [ ebp - 0x63c ]
push ecx
push 0x1
push ebx
push rw-data
mov edx [ rw-data ]
push edx
call edi
call eax
push 0x208
xor edi edi
push edi
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
push rw-data
push rw-data
push rw-data
push 0x104
lea ecx [ ebp - 0x220 ]
push ecx
call [ rw-data ]
add esp 0x20
lea edx [ ebp - 0x230 ]
push edx
lea eax [ ebp - 0x220 ]
push eax
push 0x80000002
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
call [ rw-data ]
mov esi eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
jmp r-xdata
push 0x208
push edi
lea edx [ ebp - 0x220 ]
push edx
call [ rw-data ]
add esp 0xc
push rw-data
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
push 0x4
lea ecx [ ebp - 0x238 ]
push ecx
push 0x4
push edi
lea edx [ ebp - 0x220 ]
push edx
mov eax [ ebp - 0x230 ]
push eax
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
call sub_100027c2
add esp 0x8
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp - 0x230 ]
push edx
call [ rw-data ]
mov [ ebp - 0x230 ] edi
push 0x208
push edi
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
push esi
push rw-data
push 0x104
lea ecx [ ebp - 0x220 ]
push ecx
call [ rw-data ]
add esp 0x1c
lea edx [ ebp - 0x230 ]
push edx
lea eax [ ebp - 0x220 ]
push eax
push 0x80000002
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
push 0x208
push edi
lea edx [ ebp - 0x220 ]
push edx
call [ rw-data ]
add esp 0xc
push rw-data
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
lea ecx [ ebp - 0x22c ]
push ecx
lea edx [ ebp - 0x220 ]
push edx
mov eax [ ebp - 0x230 ]
push eax
call [ rw-data ]
mov [ ebp - 0x238 ] eax
mov ecx [ ebp - 0x230 ]
push ecx
call [ rw-data ]
mov [ ebp - 0x230 ] edi
push 0x208
push edi
lea edx [ ebp - 0x220 ]
push edx
call [ rw-data ]
add esp 0xc
push rw-data
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
mov edi [ ebp + 0x8 ]
push edi
call [ rw-data ]
lea ecx [ eax + eax + 0x2 ]
push ecx
push edi
push 0x2
xor edi edi
push edi
lea edx [ ebp - 0x220 ]
push edx
mov eax [ ebp - 0x22c ]
push eax
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
mov [ ebp - 0x644 ] 0x1
push 0x208
push edi
lea edx [ ebp - 0x220 ]
push edx
call [ rw-data ]
add esp 0xc
push rw-data
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
push 0x4
lea ecx [ ebp - 0x644 ]
push ecx
push 0x4
push edi
lea edx [ ebp - 0x220 ]
push edx
mov eax [ ebp - 0x22c ]
push eax
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
mov edx [ ebp - 0x22c ]
push edx
call [ rw-data ]
mov [ ebp - 0x22c ] edi
push 0x208
push edi
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
add esp 0xc
push rw-data
lea ecx [ ebp - 0x220 ]
push ecx
call [ rw-data ]
lea edx [ ebp - 0x230 ]
push edx
lea eax [ ebp - 0x220 ]
push eax
push 0x80000002
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
push 0x400
push edi
lea edx [ ebp - 0x638 ]
push edx
call [ rw-data ]
add esp 0xc
mov [ ebp - 0x640 ] 0x400
push esi
call [ rw-data ]
shl eax 0x1
push eax
push esi
lea eax [ ebp - 0x638 ]
push eax
call [ rw-data ]
add esp 0xc
push esi
call [ rw-data ]
lea esi [ eax + eax + 0x4 ]
mov [ ebp - 0x640 ] esi
push 0x208
push edi
lea ecx [ ebp - 0x220 ]
push ecx
call [ rw-data ]
add esp 0xc
push rw-data
lea edx [ ebp - 0x220 ]
push edx
call [ rw-data ]
push esi
lea eax [ ebp - 0x638 ]
push eax
push 0x7
push edi
lea ecx [ ebp - 0x220 ]
push ecx
mov edx [ ebp - 0x230 ]
push edx
call [ rw-data ]
mov [ ebp - 0x238 ] eax
cmp eax edi
je r-xdata
mov esi eax
push 0xffffffff
lea ecx [ ebp - 0x10 ]
push ecx
jmp r-xdata
mov ecx [ ebp - 0x230 ]
push ecx
call [ rw-data ]
mov [ ebp - 0x230 ] edi
push edi
push edi
push ebx
call [ StartServiceA@IAT ]
test eax eax
jne r-xdata
mov esi eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call sub_100027c2
add esp 0x8
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
call [ GetLastError@IAT ]
jmp r-xdata
mov esi eax
push 0xffffffff
lea edx [ ebp - 0x10 ]
push edx
sub_100026ec
mov eax [ ebp - 0x230 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x22c ]
test eax eax
je r-xdata
push eax
call [ rw-data ]
mov eax [ ebp - 0x224 ]
test eax eax
je r-xdata
push eax
call [ rw-data ]
mov eax [ ebp - 0x228 ]
test eax eax
je r-xdata
push eax
push rw-data
mov ecx [ rw-data ]
push ecx
call [ GetProcAddress@IAT ]
call eax
retn
push eax
push rw-data
mov edx [ rw-data ]
push edx
call [ GetProcAddress@IAT ]
call eax
sub_10002750
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_10002780
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100027c2
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push eax
push 0xfffffffe
push sub_100027a0
push [ fs : 0x0 ]
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0xc
pop edi
pop esi
pop ebx
retn
cmp esi [ esp + 0x24 ]
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0x8 ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10002856
call [ ebx + esi * 4 + 0x8 ]
mov eax [ esp + 0x20 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10002870
push esi
inc ebx
xor dh [ eax ]
pop eax
inc ebx
xor [ eax ] dh
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_100027c2
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
cmp [ edi + ecx * 4 + 0x4 ] 0x0
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
call [ edi + ecx * 4 + 0x4 ]
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
cmp esi 0xffffffff
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
mov edi [ ebx + 0x8 ]
push ebx
call sub_10002780
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_100027c2
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_10002856
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
call [ edi + ecx * 4 + 0x8 ]
sub_10002950
mov eax [ esp + 0x8 ]
cmp eax 0x1
jne r-xdata
xor ecx ecx
cmp eax ecx
jne r-xdata
call [ GetVersion@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_10003384
test eax eax
pop ecx
je r-xdata
cmp eax 0x3
jne r-xdata
cmp [ rw-data ] ecx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
and eax 0xff
shr [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
shl eax 0x8
add eax ecx
mov [ rw-data ] eax
call sub_10002c17
test eax eax
jne r-xdata
push 0x1
pop eax
push ecx
call sub_10002c9c
pop ecx
dec [ rw-data ]
cmp [ rw-data ] ecx
jne r-xdata
retn 0xc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10003252
mov [ rw-data ] eax
call sub_10002d3c
call sub_10003005
call sub_10002f4c
call sub_10002af9
inc [ rw-data ]
jmp r-xdata
call sub_100033c0
call sub_10002ef8
call sub_10002c6b
call sub_100033c0
jmp r-xdata
call sub_10002b37
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10002950
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_100021c0
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10002950
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10002950
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10002ac6
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
call sub_10003435
test eax eax
jne r-xdata
push [ esp + 0x4 ]
call sub_1000346e
push 0xff
call [ rw-data ]
pop ecx
pop ecx
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_10002b46
push edi
call sub_10002beb
push 0x1
pop edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ esp + 0xc ] 0x0
push ebx
mov ebx [ esp + 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] bl
jne r-xdata
push [ esp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
push rw-data
push rw-data
call sub_10002bfd
pop ecx
pop ecx
test ebx ebx
pop ebx
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov [ rw-data ] edi
call [ ExitProcess@IAT ]
call sub_10002bf4
pop edi
retn
push rw-data
push rw-data
call sub_10002bfd
pop ecx
pop ecx
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
cmp esi eax
jb r-xdata
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
sub esi 0x4
cmp esi [ rw-data ]
jae r-xdata
call eax
sub_10002c17
push esi
call sub_100035c1
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor eax eax
pop esi
retn
push 0x74
push 0x1
call sub_100036cc
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_10002c89
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
push 0x1
mov [ esi ] eax
pop eax
pop esi
retn
sub_10002c9c
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
push eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call sub_10003759
pop ecx
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
pop esi
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push eax
call sub_10003759
pop ecx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
call sub_10003759
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10003759
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10003759
pop ecx
mov eax [ esi + 0x50 ]
cmp eax rw-data
je r-xdata
push eax
call sub_10003759
pop ecx
push esi
call sub_10003759
pop ecx
push eax
call sub_10003759
pop ecx
sub_10002d3c
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
push 0x480
call sub_100037a1
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ rw-data ] esi
mov [ rw-data ] 0x20
lea eax [ esi + 0x480 ]
push 0x1b
call sub_10002ac6
pop ecx
lea eax [ ebp - 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
cmp [ ebp - 0x16 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
or [ esi ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov [ esi + 0x5 ] 0xa
mov eax [ rw-data ]
add esi 0x24
add eax 0x480
jmp r-xdata
xor ebx ebx
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
cmp esi eax
jae r-xdata
or [ esi + 0x4 ] 0x80
test ebx ebx
mov [ esi + 0x4 ] 0x81
jne r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x4 ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov ecx [ rw-data ]
lea eax [ ebx + ebx * 8 ]
cmp [ ecx + eax * 4 ] 0xffffffff
lea esi [ ecx + eax * 4 ]
jne r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
cmp [ rw-data ] edi
jge r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
xor esi esi
test edi edi
jle r-xdata
mov esi rw-data
inc ebx
cmp ebx 0x3
jl r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
mov edi [ rw-data ]
add [ rw-data ] 0x20
mov [ esi ] eax
lea ecx [ eax + 0x480 ]
cmp eax 0x3
jne r-xdata
add [ ebp - 0x4 ] 0x4
inc esi
inc ebx
cmp esi edi
jl r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
add esi 0x4
cmp [ rw-data ] edi
jl r-xdata
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov ecx [ esi ]
add eax 0x24
add ecx 0x480
jmp r-xdata
or [ esi + 0x4 ] 0x8
jmp r-xdata
test al 0x8
jne r-xdata
push 0x480
call sub_100037a1
test eax eax
pop ecx
je r-xdata
jmp r-xdata
cmp eax ecx
jae r-xdata
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov cl [ ebx ]
mov [ eax + 0x4 ] cl
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_10002ef8
push ebx
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
mov edi eax
add eax 0x480
cmp edi eax
jae r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push [ esi ]
call sub_10003759
and [ esi ] 0x0
pop ecx
lea ebx [ edi + 0xc ]
mov eax [ esi ]
add edi 0x24
add eax 0x480
add ebx 0x24
cmp edi eax
jb r-xdata
push ebx
call [ DeleteCriticalSection@IAT ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
sub_10002f4c
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
call sub_10003d73
lea eax [ edi * 4 + 0x4 ]
push eax
call sub_100037a1
mov esi eax
pop ecx
cmp esi ebx
mov [ rw-data ] esi
jne r-xdata
cmp al 0x3d
je r-xdata
mov edi [ rw-data ]
cmp [ edi ] bl
je r-xdata
push 0x9
call sub_10002ac6
pop ecx
push esi
call sub_10003920
pop ecx
lea esi [ esi + eax + 0x1 ]
jmp r-xdata
inc edi
push [ rw-data ]
call sub_10003759
pop ecx
mov [ rw-data ] ebx
mov [ esi ] ebx
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push ebp
mov al [ esi ]
cmp al bl
je r-xdata
add edi ebp
cmp [ edi ] bl
jne r-xdata
push ebp
call sub_100037a1
cmp eax ebx
pop ecx
mov [ esi ] eax
jne r-xdata
push edi
call sub_10003920
mov ebp eax
pop ecx
inc ebp
cmp [ edi ] 0x3d
je r-xdata
pop ebp
push edi
push [ esi ]
call sub_10003830
pop ecx
add esi 0x4
pop ecx
push 0x9
call sub_10002ac6
pop ecx
sub_10003005
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi rw-data
push 0x104
push esi
push ebx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
mov edi esi
cmp [ eax ] bl
je r-xdata
call sub_10003d73
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push edi
call sub_1000309e
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 ]
push eax
call sub_100037a1
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ esi + eax * 4 ]
push eax
push esi
push edi
call sub_1000309e
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] esi
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
leave
retn
push 0x8
call sub_10002ac6
pop ecx
sub_1000309e
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
mov eax [ ebp + 0x14 ]
push ebx
push esi
and [ ecx ] 0x0
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov [ eax ] 0x1
mov eax [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
inc [ ecx ]
test esi esi
je r-xdata
mov dl [ eax + 0x1 ]
inc eax
cmp dl 0x22
je r-xdata
mov dl [ eax ]
inc eax
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc [ ecx ]
test esi esi
je r-xdata
test dl dl
je r-xdata
cmp dl 0x20
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
and [ esi ] 0x0
inc esi
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
test dl dl
jne r-xdata
test dl dl
je r-xdata
inc eax
mov bl [ eax ]
mov [ esi ] bl
inc esi
and [ ebp + 0x18 ] 0x0
inc eax
jmp r-xdata
inc [ ecx ]
test esi esi
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
test esi esi
je r-xdata
dec eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
test edi edi
je r-xdata
mov dl [ eax ]
cmp dl 0x20
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
and [ esi - 0x1 ] 0x0
mov eax [ ebp + 0x14 ]
pop edi
pop esi
pop ebx
inc [ eax ]
pop ebp
retn
and [ edi ] 0x0
inc eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx [ ebp + 0x14 ]
inc [ edx ]
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
cmp [ eax ] 0x22
jne r-xdata
inc eax
inc ebx
jmp r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
test bl 0x1
jne r-xdata
cmp [ eax ] 0x5c
jne r-xdata
mov dl [ eax ]
test dl dl
je r-xdata
inc ebx
shr ebx 0x1
xor edi edi
cmp [ ebp + 0x18 ] edi
je r-xdata
test esi esi
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
inc [ ecx ]
dec ebx
jne r-xdata
mov [ esi ] 0x5c
inc esi
mov [ ebp + 0x8 ] edi
cmp [ eax + 0x1 ] 0x22
lea edx [ eax + 0x1 ]
jne r-xdata
inc [ ecx ]
jmp r-xdata
and [ esi ] 0x0
inc esi
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp dl 0x20
je r-xdata
test esi esi
je r-xdata
mov eax edx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
jmp r-xdata
test esi esi
je r-xdata
cmp dl 0x9
je r-xdata
mov edi [ ebp + 0xc ]
xor edx edx
cmp [ ebp + 0x18 ] edx
sete dl
mov [ ebp + 0x18 ] edx
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
inc [ ecx ]
inc eax
inc [ ecx ]
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov [ esi ] dl
inc esi
inc eax
inc [ ecx ]
sub_10003252
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
mov ebp [ GetEnvironmentStringsW@IAT ]
push esi
push edi
xor ebx ebx
xor esi esi
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
cmp eax 0x2
jne r-xdata
cmp esi ebx
jne r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
xor eax eax
cmp edi ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ edi ] bl
mov eax edi
je r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
sub eax esi
mov edi [ WideCharToMultiByte@IAT ]
sar eax 0x1
push ebx
push ebx
inc eax
push ebx
push ebx
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
sub eax edi
inc eax
mov ebp eax
push ebp
call sub_100037a1
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_100037a1
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push ebp
push edi
push esi
call sub_10003d90
add esp 0xc
xor esi esi
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsA@IAT ]
mov eax esi
jmp r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10003759
pop ecx
mov [ esp + 0x10 ] ebx
sub_10003384
xor eax eax
push 0x0
cmp [ esp + 0x8 ] eax
push 0x1000
sete al
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
call sub_100040c5
test eax eax
jne r-xdata
push 0x1
pop eax
retn
push [ rw-data ]
call [ HeapDestroy@IAT ]
sub_100033c0
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push ebp
mov ebp [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call ebp
push [ rw-data ]
call [ HeapDestroy@IAT ]
pop ebp
pop ebx
retn
mov eax [ rw-data ]
push esi
push edi
mov edi [ VirtualFree@IAT ]
lea esi [ eax + 0xc ]
push 0x4000
push 0x100000
push [ esi ]
call edi
push 0x8000
push 0x0
push [ esi ]
call edi
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call ebp
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop edi
pop esi
sub_10003435
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000346e
mov eax [ rw-data ]
pop ecx
test eax eax
je r-xdata
test eax eax
jne r-xdata
push 0xff
call sub_1000346e
pop ecx
call eax
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000346e
push ebp
mov ebp esp
sub esp 0x1a4
mov edx [ ebp + 0x8 ]
xor ecx ecx
mov eax rw-data
push esi
mov esi ecx
shl esi 0x3
cmp edx [ esi + rw-data ]
jne r-xdata
add eax 0x8
inc ecx
cmp eax rw-data
jl r-xdata
pop esi
leave
retn
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
cmp edx [ eax ]
je r-xdata
lea eax [ ebp + 0x8 ]
lea esi [ esi + rw-data ]
push 0x0
push eax
push [ esi ]
call sub_10003920
pop ecx
push eax
push [ esi ]
push 0xfffffff4
call [ GetStdHandle@IAT ]
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp edx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea eax [ ebp - 0x1a4 ]
push 0x104
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1a4 ]
push edi
push eax
lea edi [ ebp - 0x1a4 ]
call sub_10003920
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
lea eax [ ebp - 0x1a4 ]
push r--data
push eax
call sub_10003830
pop ecx
pop ecx
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10003830
lea eax [ ebp - 0xa0 ]
push edi
push eax
call sub_10003840
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10003840
push [ esi + rw-data ]
lea eax [ ebp - 0xa0 ]
push eax
call sub_10003840
push 0x12010
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000490e
add esp 0x2c
pop edi
jmp r-xdata
lea eax [ ebp - 0x1a4 ]
push eax
call sub_10003920
mov edi eax
lea eax [ ebp - 0x1a4 ]
sub eax 0x3b
push 0x3
add edi eax
push r--data
push edi
call sub_100049a0
add esp 0x10
sub_100035ea
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
pop edi
pop esi
retn
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
push eax
call edi
push [ esi ]
call sub_10003759
pop ecx
sub_10003656
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
cmp [ eax * 4 + rw-data ] 0x0
lea esi [ eax * 4 + rw-data ]
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push edi
push 0x18
call sub_100037a1
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0x11
call sub_10003656
cmp [ esi ] 0x0
pop ecx
push edi
jne r-xdata
push 0x11
call sub_10002ac6
pop ecx
call sub_10003759
pop ecx
call [ InitializeCriticalSection@IAT ]
mov [ esi ] edi
jmp r-xdata
push 0x11
call sub_100036b7
pop ecx
pop edi
sub_100036cc
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
imul esi [ esp + 0x14 ]
cmp esi 0xffffffe0
mov ebx esi
ja r-xdata
xor edi edi
cmp esi 0xffffffe0
ja r-xdata
test esi esi
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp ebx [ rw-data ]
ja r-xdata
add esi 0xf
and esi 0xfffffff0
push 0x1
pop esi
mov eax edi
push esi
call sub_10004af8
test eax eax
pop ecx
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x9
call sub_10003656
push ebx
call sub_10004459
push 0x9
mov edi eax
call sub_100036b7
add esp 0xc
test edi edi
jne r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
push ebx
push 0x0
push edi
call sub_10004aa0
add esp 0xc
pop edi
pop esi
pop ebx
retn
sub_10003759
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
push 0x9
call sub_10003656
push esi
call sub_10004103
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x9
call sub_100036b7
pop ecx
push esi
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
push esi
push eax
call sub_1000412e
push 0x9
call sub_100036b7
add esp 0xc
pop esi
retn
sub_100037b3
cmp [ esp + 0x4 ] 0xffffffe0
ja r-xdata
xor eax eax
push [ esp + 0x4 ]
call sub_100037df
test eax eax
pop ecx
jne r-xdata
retn
cmp [ esp + 0x8 ] eax
je r-xdata
push [ esp + 0x4 ]
call sub_10004af8
test eax eax
pop ecx
jne r-xdata
sub_100037df
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
push edi
ja r-xdata
test esi esi
jne r-xdata
push 0x9
call sub_10003656
push esi
call sub_10004459
push 0x9
mov edi eax
call sub_100036b7
add esp 0xc
test edi edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
push 0x1
pop esi
mov eax edi
jmp r-xdata
pop edi
pop esi
retn
sub_10003830
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10003840
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10003920
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000399b
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push 0x19
call sub_10003656
push [ ebp + 0x8 ]
call sub_10003b48
mov ebx eax
pop ecx
cmp ebx [ rw-data ]
pop ecx
mov [ ebp + 0x8 ] ebx
jne r-xdata
test ebx ebx
je r-xdata
xor esi esi
jmp r-xdata
call sub_10003bc5
xor edx edx
mov eax rw-data
push 0x19
call sub_100036b7
pop ecx
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push 0x40
pop ecx
xor eax eax
mov edi rw-data
lea esi [ edx + edx * 2 ]
[ edi ]
shl esi 0x4
stosb [ edi ]
lea ebx [ esi + rw-data ]
add eax 0x30
inc edx
cmp eax rw-data
jl r-xdata
inc [ ebp - 0x4 ]
add ebx 0x8
cmp [ ebp - 0x4 ] 0x4
jb r-xdata
mov dl [ ecx + 0x1 ]
test dl dl
je r-xdata
cmp [ eax ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
push 0x1
pop esi
cmp eax esi
jne r-xdata
cmp [ ebx ] 0x0
mov ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] eax
call sub_10003b92
lea esi [ esi + rw-data ]
mov edi rw-data
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
pop ecx
mov [ rw-data ] eax
movsd [ edi ] [ esi ]
jmp r-xdata
movzx eax [ ecx ]
movzx edi dl
cmp eax edi
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x40
and [ rw-data ] 0x0
pop ecx
xor eax eax
mov edi rw-data
cmp [ ebp - 0x18 ] esi
[ edi ]
stosb [ edi ]
mov [ rw-data ] ebx
jbe r-xdata
call sub_10003bee
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx + rw-data ]
or esi 0xffffffff
and [ rw-data ] 0x0
cmp [ ebp - 0x12 ] 0x0
je r-xdata
or [ eax + rw-data ] dl
inc eax
cmp eax edi
jbe r-xdata
mov eax esi
lea ecx [ ebp - 0x11 ]
or [ eax + rw-data ] 0x8
inc eax
cmp eax 0xff
jb r-xdata
push ebx
call sub_10003b92
pop ecx
mov [ rw-data ] eax
mov [ rw-data ] esi
jmp r-xdata
movzx eax [ ecx - 0x1 ]
movzx edx dl
xor eax eax
mov edi rw-data
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx - 0x1 ] 0x0
jne r-xdata
or [ eax + rw-data ] 0x4
inc eax
jmp r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
cmp eax edx
ja r-xdata
sub_10003b48
mov eax [ esp + 0x4 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetOEMCP@IAT ]
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetACP@IAT ]
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x1
sub_10003b92
mov eax [ esp + 0x4 ]
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10003bc5
push edi
push 0x40
pop ecx
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
xor eax eax
mov edi rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
pop edi
retn
sub_10003bee
push ebp
mov ebp esp
sub esp 0x514
lea eax [ ebp - 0x14 ]
push esi
push eax
push [ rw-data ]
call [ GetCPInfo@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
mov esi 0x100
xor eax eax
mov esi 0x100
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
mov [ ebp + eax - 0x114 ] al
inc eax
cmp eax esi
jb r-xdata
mov al [ ebp - 0xe ]
mov [ ebp - 0x114 ] 0x20
test al al
je r-xdata
and [ eax + rw-data ] 0x0
cmp eax 0x7a
ja r-xdata
or [ eax + rw-data ] 0x10
mov cl al
add cl 0x20
push 0x0
lea eax [ ebp - 0x514 ]
push [ rw-data ]
push [ rw-data ]
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x1
call sub_10004d62
push 0x0
lea eax [ ebp - 0x214 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push esi
push [ rw-data ]
call sub_10004b13
push 0x0
lea eax [ ebp - 0x314 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x200
push [ rw-data ]
call sub_10004b13
add esp 0x5c
xor eax eax
lea ecx [ ebp - 0x514 ]
push ebx
push edi
lea edx [ ebp - 0xd ]
cmp eax 0x41
jb r-xdata
pop esi
leave
retn
or [ eax + rw-data ] 0x20
mov cl al
sub cl 0x20
jmp r-xdata
inc eax
cmp eax esi
jb r-xdata
test dl 0x2
je r-xdata
or [ eax + rw-data ] 0x10
mov dl [ ebp + eax - 0x214 ]
inc edx
inc edx
mov al [ edx - 0x1 ]
test al al
jne r-xdata
sub ecx eax
lea edi [ ebp + eax - 0x114 ]
inc ecx
mov eax 0x20202020
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov [ eax + rw-data ] cl
jmp r-xdata
and [ eax + rw-data ] 0x0
or [ eax + rw-data ] 0x20
mov dl [ ebp + eax - 0x314 ]
jmp r-xdata
inc eax
inc ecx
inc ecx
cmp eax esi
jb r-xdata
movzx ecx [ edx ]
movzx eax al
cmp eax ecx
ja r-xdata
pop edi
pop ebx
mov dx [ ecx ]
test dl 0x1
je r-xdata
jmp r-xdata
mov [ eax + rw-data ] dl
jmp r-xdata
sub_10003d90
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10003df0 ]
jmp [ ecx * 4 + jump_table_10003e6c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10003ed8 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10003ed8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10004070 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10003f78 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004070 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10003ed8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10003ed8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10003ed8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10004070 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004070 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004070 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004070 ]
sub_100040c5
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push 0x1
mov [ rw-data ] eax
mov [ rw-data ] 0x10
pop eax
retn
retn
sub_10004103
mov eax [ rw-data ]
lea ecx [ eax + eax * 4 ]
mov eax [ rw-data ]
lea ecx [ eax + ecx * 4 ]
xor eax eax
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
retn
add eax 0x14
jmp r-xdata
cmp eax ecx
jae r-xdata
sub_1000412e
push ebp
mov ebp esp
sub esp 0x14
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov eax [ ecx + 0x10 ]
mov esi edx
sub esi [ ecx + 0xc ]
mov ebx [ edx - 0x4 ]
add edx 0xfffffffc
push edi
shr esi 0xf
mov ecx esi
mov edi [ edx - 0x4 ]
imul ecx ecx 0x204
dec ebx
mov [ ebp - 0x4 ] edi
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ecx
mov ecx [ ebx + edx ]
test cl 0x1
mov [ ebp - 0x8 ] ecx
jne r-xdata
mov edi ebx
sar edi 0x4
dec edi
cmp edi 0x3f
jbe r-xdata
sar ecx 0x4
push 0x3f
dec ecx
pop edi
mov [ ebp + 0xc ] ecx
cmp ecx edi
jbe r-xdata
mov ecx [ ebp - 0x4 ]
and ecx 0x1
mov [ ebp - 0x14 ] ecx
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebx + edx + 0x4 ]
cmp ecx [ ebx + edx + 0x8 ]
jne r-xdata
mov [ ebp + 0xc ] edi
cmp [ ebp - 0x14 ] 0x0
jne r-xdata
sub edx [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
push 0x3f
mov [ ebp - 0x8 ] edx
dec ecx
pop edx
cmp ecx edx
mov [ ebp + 0xc ] ecx
jbe r-xdata
mov ecx [ ebx + edx + 0x8 ]
mov edi [ ebx + edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ ebx + edx + 0x4 ]
mov edi [ ebx + edx + 0x8 ]
add ebx [ ebp - 0x8 ]
mov [ ecx + 0x8 ] edi
mov [ ebp - 0xc ] ebx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
add ebx [ ebp - 0x4 ]
mov edi ebx
mov [ ebp - 0xc ] ebx
sar edi 0x4
dec edi
cmp edi edx
jbe r-xdata
mov [ ebp + 0xc ] edx
mov ecx edx
add ecx 0xffffffe0
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0xc4 ] edi
dec [ ecx ]
jne r-xdata
mov edi 0x80000000
shr edi cl
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0x44 ] edi
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x10 ]
mov [ edx ] ebx
mov [ ebx + edx - 0x4 ] ebx
dec [ eax ]
jne r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
cmp ecx edi
je r-xdata
mov edi edx
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edi
mov ecx [ ebp + 0x8 ]
and [ ecx ] edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov edx [ ebp - 0x8 ]
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov edi [ VirtualFree@IAT ]
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push 0x4000
push ebx
push ecx
call edi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov eax [ eax + 0x10 ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edi - 0x20 ]
mov edi 0x80000000
shr edi cl
lea eax [ eax + esi * 4 + 0xc4 ]
or [ eax ] edi
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edi
shr ebx cl
lea eax [ eax + esi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ edx + 0x8 ] ecx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
mov ebx [ ebp - 0xc ]
add ecx 0xffffffe0
mov edx 0x80000000
shr edx cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0xc4 ] edx
dec [ ecx ]
jne r-xdata
mov edx 0x80000000
shr edx cl
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0x44 ] edx
dec [ ecx ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call edi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov edx [ rw-data ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
mov ecx eax
mov eax [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10004eb0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edx
mov ecx [ ebp + 0x8 ]
and [ ecx ] edx
jmp r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
sub eax 0x14
mov [ rw-data ] eax
mov [ rw-data ] esi
sub_10004459
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov edx [ rw-data ]
push ebx
push esi
lea eax [ eax + eax * 4 ]
push edi
lea edi [ edx + eax * 4 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
lea ecx [ eax + 0x17 ]
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
dec ecx
cmp ecx 0x20
jge r-xdata
add ecx 0xffffffe0
or eax 0xffffffff
xor esi esi
shr eax cl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] eax
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov eax [ rw-data ]
mov ebx eax
cmp ebx edi
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx edx
add ebx 0x14
cmp ebx [ ebp - 0x4 ]
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ eax + 0xc4 ]
mov esi [ eax + 0x44 ]
and edx [ ebp - 0x8 ]
and esi [ ebp - 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ eax + 0x44 ]
or edx esi
mov esi [ ebp - 0xc ]
jne r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov edx [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
inc [ ebp - 0x4 ]
and edx [ ebp - 0x8 ]
add ecx 0x4
mov edi esi
and edi [ ecx ]
or edx edi
je r-xdata
mov ecx edx
xor edi edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
and ecx esi
jne r-xdata
cmp ebx [ ebp - 0x4 ]
jae r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
test ecx ecx
jl r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
push 0x20
and ecx [ ebp - 0x8 ]
pop edi
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x8 ] ecx
sar esi 0x4
dec esi
cmp esi 0x3f
jle r-xdata
shl ecx 0x1
inc edi
jmp r-xdata
push ebx
call sub_10004813
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
jne r-xdata
mov ebx edx
cmp ebx [ ebp - 0x4 ]
add ebx 0x14
mov [ ebp + 0x8 ] ebx
jmp r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
xor eax eax
jmp r-xdata
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10004762
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
cmp [ ebp - 0x8 ] 0x0
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
jge r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ edx + 0x4 ] edi
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xb ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx ] ecx
jmp r-xdata
and [ rw-data ] 0x0
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10004762
mov eax [ rw-data ]
mov ecx [ rw-data ]
push esi
push edi
xor edi edi
cmp eax ecx
jne r-xdata
mov ecx [ rw-data ]
push 0x41c4
push 0x8
lea eax [ eax + eax * 4 ]
push [ rw-data ]
lea esi [ ecx + eax * 4 ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
lea eax [ ecx + ecx * 4 + 0x50 ]
shl eax 0x2
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov [ rw-data ] eax
mov eax [ rw-data ]
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
sub_10004813
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi [ ecx + 0x10 ]
mov eax [ ecx + 0x8 ]
xor ebx ebx
mov eax ebx
push 0x3f
imul eax eax 0x204
pop edx
lea eax [ eax + esi + 0x144 ]
mov [ ebp - 0x4 ] eax
shl eax 0x1
inc ebx
jmp r-xdata
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
mov edi ebx
push 0x4
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x1000
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
test eax eax
jl r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
lea ecx [ edi + 0xc ]
add eax 0x1f8
push 0x1
pop edi
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
lea eax [ edi + 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea ecx [ eax + 0xffc ]
mov [ eax - 0x4 ] 0xff0
mov [ eax ] ecx
lea ecx [ eax - 0x1004 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
lea ecx [ eax - 0x10 ]
cmp ecx edx
jbe r-xdata
sub_1000490e
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push ebx
call [ rw-data ]
call eax
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
mov [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
push ebx
call eax
mov ebx eax
sub_100049a0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
dec ecx
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
inc edi
dec ecx
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
dec ebx
jne r-xdata
dec ebx
jne r-xdata
xor eax eax
mov [ edi ] al
inc edi
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
dec ecx
jne r-xdata
add edi 0x4
xor eax eax
dec ecx
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_10004aa0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
mov [ edi ] al
inc edi
dec edx
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
inc edi
dec ecx
jne r-xdata
sub_10004af8
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
retn
sub_10004b13
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x14 ] edi
jle r-xdata
push edi
push edi
push 0x1
pop ebx
push ebx
push r--data
mov esi 0x100
push esi
push edi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_10004d37
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push edi
push edi
push ebx
push r--data
push esi
push edi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push edi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov eax [ ebp + 0x24 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] edi
lea eax [ ebx + ebx ]
add eax 0x3
and al 0xfc
call sub_10002750
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x24 ] edi
je r-xdata
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10002750
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x20 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
cmp ebx edi
je r-xdata
mov eax esi
jmp r-xdata
cmp esi [ ebp + 0x1c ]
jg r-xdata
push esi
push ebx
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] edi
push edi
push edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push edi
jmp r-xdata
push esi
push ebx
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp esi edi
je r-xdata
sub_10004d37
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
retn
inc eax
mov esi ecx
dec ecx
test esi esi
jne r-xdata
sub_10004d62
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push ebx
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
push ebx
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x20 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
lea esp [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] ebx
lea edi [ eax + eax ]
mov eax edi
add eax 0x3
and al 0xfc
call sub_10002750
mov [ ebp - 0x18 ] esp
mov esi esp
mov [ ebp - 0x24 ] esi
push edi
push ebx
push esi
call sub_10004aa0
add esp 0xc
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
push [ ebp - 0x20 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push eax
push esi
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
sub_10004eb0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10004f10 ]
jmp [ ecx * 4 + jump_table_10004f8c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004ff8 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10004ff8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10005190 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10005098 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005190 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004ff8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004ff8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004ff8 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10005190 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005190 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005190 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005190 ]
sub_100021c0
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
mov eax 0x1
retn 0xc
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
sub_100027a0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000282a
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_100027a0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10002856
push ebx
push ecx
mov ebx rw-data
mov ecx [ ebp + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
pop ecx
pop ebx
retn 0x4
sub_10002935
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_100027c2
add esp 0x8
pop ebp
retn 0x4
sub_10002af9
mov eax [ rw-data ]
test eax eax
je r-xdata
push rw-data
push rw-data
call sub_10002bfd
push rw-data
push rw-data
call sub_10002bfd
add esp 0x10
retn
call eax
sub_10002b26
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_10002b46
add esp 0xc
retn
sub_10002b37
push 0x1
push 0x0
push 0x0
call sub_10002b46
add esp 0xc
retn
sub_10002beb
push 0xd
call sub_10003656
pop ecx
retn
sub_10002bf4
push 0xd
call sub_100036b7
pop ecx
retn
sub_10002c6b
call sub_100035ea
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_10002c89
mov eax [ esp + 0x4 ]
mov [ eax + 0x50 ] rw-data
mov [ eax + 0x14 ] 0x1
retn
sub_100035c1
push esi
mov esi [ InitializeCriticalSection@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
retn
sub_100037a1
push [ rw-data ]
push [ esp + 0x8 ]
call sub_100037b3
pop ecx
pop ecx
retn
sub_10003d73
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xfffffffd
call sub_1000399b
pop ecx
mov [ rw-data ] 0x1
sub_10004c23
push 0x1
pop eax
retn
sub_10004cd7
push 0x1
pop eax
retn
sub_10004e5b
push 0x1
pop eax
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
