sub_401000
push esi
mov esi ecx
push 0x100
push 0x0
lea eax [ esi + 0x4 ]
mov [ esi ] r--data
push eax
call memset
and [ esi + 0x104 ] 0x0
add esp 0xc
mov eax esi
pop esi
retn
sub_40104a
mov eax sub_4051b7
call sub_404f50
sub esp 0x20c
push ebx
mov [ ebp - 0x10 ] ecx
push esi
push edi
lea ecx [ ebp - 0x218 ]
call sub_402640
mov esi [ ebp + 0xc ]
push 0x10
mov eax esi
pop ecx
cdq
idiv ecx
and [ ebp - 0x4 ] 0x0
mov [ ebp + 0xc ] eax
mov eax esi
cdq
idiv ecx
mov edi edx
test edi edi
je r-xdata
lea eax [ esi + 0x1 ]
push eax
call Ordinal_MFC42_823
mov ebx eax
lea eax [ esi + 0x1 ]
push eax
push 0x0
push ebx
call memset
push esi
push [ ebp + 0x8 ]
push ebx
call memcpy
add esp 0x1c
test edi edi
je r-xdata
push ecx
pop eax
sub eax edi
add esi eax
inc [ ebp + 0xc ]
mov eax [ ebp - 0x10 ]
push 0x100
add eax 0x4
lea ecx [ ebp - 0x218 ]
push eax
call sub_40291c
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
test edi edi
jle r-xdata
push 0x10
pop ecx
sub ecx edi
test ecx ecx
jle r-xdata
mov ecx [ ebp + 0x14 ]
or [ ebp - 0x4 ] 0xffffffff
shl edi 0x4
mov eax edi
sub [ esi ] eax
mov [ ecx ] eax
lea ecx [ ebp - 0x218 ]
call sub_402665
mov ecx [ ebp - 0xc ]
push 0x1
pop eax
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x10
mov [ ebp + 0xc ] edi
lea eax [ ebx + edi ]
mov edx ecx
shr ecx 0x2
lea edi [ eax + esi - 0x10 ]
mov eax 0x20202020
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
push [ esi ]
lea ecx [ ebp - 0x218 ]
push ebx
call sub_402c10
add [ esi ] 0x10
add ebx 0x10
dec [ ebp + 0xc ]
jne r-xdata
sub_401148
mov eax sub_4051cf
call sub_404f50
sub esp 0x208
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x214 ]
call sub_402640
mov eax [ ebp + 0xc ]
push 0x10
cdq
pop ecx
and [ ebp - 0x4 ] 0x0
idiv ecx
add esi 0x4
push 0x100
push esi
lea ecx [ ebp - 0x214 ]
mov edi eax
call sub_40291c
mov esi [ ebp + 0x10 ]
test edi edi
jle r-xdata
mov eax [ ebp + 0x14 ]
or [ ebp - 0x4 ] 0xffffffff
shl edi 0x4
sub [ esi ] edi
lea ecx [ ebp - 0x214 ]
mov [ eax ] edi
call sub_402665
mov ecx [ ebp - 0xc ]
push 0x1
pop eax
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x10
push ebx
mov ebx edi
push [ esi ]
lea ecx [ ebp - 0x214 ]
push [ ebp + 0x8 ]
call sub_403980
add [ ebp + 0x8 ] 0x10
add [ esi ] 0x10
dec ebx
jne r-xdata
pop ebx
sub_4011db
push ebx
mov ebx [ esp + 0xc ]
mov eax 0x100
push esi
cmp ebx eax
mov esi ecx
jle r-xdata
push edi
lea edi [ esi + 0x4 ]
push eax
push 0x0
push edi
call memset
push ebx
push [ esp + 0x20 ]
push edi
call memcpy
add esp 0x18
mov [ esi + 0x104 ] bl
push 0x1
pop eax
pop edi
xor eax eax
jmp r-xdata
pop esi
pop ebx
retn 0x8
sub_40121a
mov ecx [ esp + 0x4 ]
push esi
mov eax ecx
push 0x10
cdq
pop esi
idiv esi
pop esi
test edx edx
je r-xdata
mov eax ecx
retn 0x4
push 0x10
pop eax
sub eax edx
add ecx eax
sub_4012ba
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x1c ]
push ebx
push esi
push edi
mov edi [ ebp + 0x14 ]
and [ ebp - 0x4 ] 0x0
imul edi eax
mov edx eax
mov [ ebp - 0x10 ] ecx
neg edx
add edi [ ebp + 0x10 ]
lea esi [ ecx + 0x4 ]
mov [ ebp - 0x14 ] edx
mov [ ebp - 0xc ] 0x4
jmp r-xdata
mov [ ebp + 0x14 ] esi
mov esi [ ebp + 0x18 ]
mov edx [ ebp - 0x4 ]
imul esi eax
mov ebx eax
lea edx [ ecx + edx * 8 + 0x2c ]
neg ebx
add esi [ ebp + 0xc ]
mov [ ebp + 0x10 ] edx
mov [ ebp - 0x8 ] 0x4
add [ ebp + 0x14 ] 0x2
add esi ebx
dec [ ebp - 0x8 ]
jne r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
mov ecx [ ebp + 0x14 ]
cmp [ ecx ] 0x1
jne r-xdata
add edi [ ebp - 0x14 ]
dec [ ebp - 0xc ]
mov esi [ ebp + 0x14 ]
jne r-xdata
inc [ ebp - 0x4 ]
mov [ edx - 0x4 ] esi
mov [ edx ] edi
add edx 0x8
mov [ ebp + 0x10 ] edx
lea edx [ esi + eax ]
add eax edi
push eax
push edx
push edi
push esi
push [ ecx + 0x4 ]
call [ Rectangle@IAT ]
mov eax [ ebp + 0x1c ]
mov edx [ ebp + 0x10 ]
mov ecx [ ebp - 0x10 ]
pop edi
pop esi
pop ebx
leave
retn 0x20
sub_401360
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
mov [ esi + 0x48 ] 0x3
pop eax
mov [ esi + 0x4c ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
dec eax
je r-xdata
push 0x1
pop eax
mov [ esi + 0x1a ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
jmp r-xdata
dec eax
je r-xdata
push 0x3
pop eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
jmp r-xdata
push 0x1
mov [ esi + 0x48 ] 0x2
pop eax
mov [ esi + 0x4c ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
jmp r-xdata
dec eax
jne r-xdata
pop esi
retn 0x10
push 0x1
pop eax
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x18 ] ax
sub_4013f6
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
pop eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1e ] ax
dec eax
je r-xdata
push 0x1
pop eax
mov [ esi + 0x14 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
jmp r-xdata
dec eax
je r-xdata
mov [ esi + 0x48 ] 0x3
mov [ esi + 0x4c ] 0x2
push 0x1
pop eax
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x10 ] ax
jmp r-xdata
dec eax
jne r-xdata
pop esi
retn 0x10
push 0x1
pop eax
push 0x3
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x22 ] ax
pop eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
jmp r-xdata
sub_40147e
push esi
mov esi ecx
call sub_401638
push 0x1
mov [ esi + 0x48 ] 0x2
pop eax
mov [ esi + 0x4c ] 0x3
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
pop esi
retn 0x10
sub_4014ab
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
pop eax
push 0x3
mov [ esi + 0x1a ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
pop eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
push 0x1
mov [ esi + 0x48 ] 0x3
pop eax
mov [ esi + 0x4c ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
jmp r-xdata
sub_401503
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
pop eax
push 0x3
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x20 ] ax
pop eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
push 0x1
mov [ esi + 0x48 ] 0x3
pop eax
mov [ esi + 0x4c ] 0x2
mov [ esi + 0x10 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
jmp r-xdata
sub_40155b
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
mov [ esi + 0x48 ] 0x3
pop eax
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x6 ] ax
mov [ esi + 0x4c ] eax
dec eax
jne r-xdata
pop esi
retn 0x10
push 0x1
mov [ esi + 0x48 ] 0x2
pop eax
mov [ esi + 0x4c ] 0x3
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x14 ] ax
jmp r-xdata
sub_4015b4
push esi
mov esi ecx
call sub_401638
movsx eax [ esp + 0x14 ]
sub eax 0x0
je r-xdata
push 0x1
pop eax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
dec eax
je r-xdata
push 0x1
mov [ esi + 0x48 ] 0x3
pop eax
mov [ esi + 0x4c ] 0x2
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x10 ] ax
jmp r-xdata
dec eax
je r-xdata
pop esi
retn 0x10
push 0x1
pop eax
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
jmp r-xdata
dec eax
jne r-xdata
mov [ esi + 0x20 ] ax
push 0x1
pop eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1a ] ax
jmp r-xdata
push 0x3
pop eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
sub_4016b0
mov eax sub_4051ed
call sub_404f50
sub esp 0x12c
push ebx
push esi
push edi
xor edi edi
mov esi ecx
push edi
call Ordinal_MFC42_1134
pop ecx
mov ecx esi
call Ordinal_MFC42_2621
push 0x4
mov ecx esi
call Ordinal_MFC42_4159
push 0x6c
call Ordinal_MFC42_823
pop ecx
mov [ ebp - 0x10 ] eax
cmp eax edi
mov [ ebp - 0x4 ] edi
je r-xdata
xor eax eax
push r--data
push r--data
push r--data
push 0x80
mov ecx eax
call Ordinal_MFC42_520
jmp r-xdata
mov ecx [ esi + 0x20 ]
push edi
call Ordinal_MFC42_6215
mov esi [ esi + 0x20 ]
push [ esi + 0x20 ]
call [ UpdateWindow@IAT ]
and [ ebp - 0x138 ] 0x0
push 0x40
pop ecx
xor eax eax
lea edi [ ebp - 0x137 ]
push 0x408
[ edi ]
stosw [ edi ]
stosb [ edi ]
push rwxdata
lea eax [ ebp - 0x138 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0x10
xor ebx ebx
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push eax
mov ecx esi
call Ordinal_MFC42_986
lea ecx [ ebp - 0x34 ]
call Ordinal_MFC42_296
push 0x1
lea eax [ ebp - 0x34 ]
pop ebx
mov ecx esi
push eax
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_5214
lea eax [ ebp - 0x34 ]
mov ecx esi
push eax
call Ordinal_MFC42_5301
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x34 ]
call Ordinal_MFC42_617
mov ecx [ ebp - 0xc ]
pop edi
mov eax ebx
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn
sub_4017f5
mov eax sub_405200
call sub_404f50
sub esp 0x60
lea ecx [ ebp - 0x6c ]
call sub_4017af
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x6c ]
call Ordinal_MFC42_2514
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x6c ]
call Ordinal_MFC42_641
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_401857
mov eax sub_405215
call sub_404f50
push ecx
push 0x54
call Ordinal_MFC42_823
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_4018a1
sub_401af0
mov eax sub_405229
call sub_404f50
push ecx
push 0x48
call Ordinal_MFC42_823
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_401bb9
sub_401b3a
xor ecx ecx
and [ eax + rw-data ] 0x0
mov edx ecx
imul edx edx 0xb
mov [ edx + eax + rw-data ] 0x1
jmp r-xdata
cmp ecx 0x18
je r-xdata
inc ecx
cmp ecx 0x19
jl r-xdata
inc eax
cmp eax 0xb
jl r-xdata
xor eax eax
retn
sub_401b66
mov eax [ esp + 0x4 ]
sub eax 0x0
je r-xdata
mov eax rw-data
dec eax
je r-xdata
mov eax rw-data
jmp r-xdata
dec eax
je r-xdata
mov [ rw-data ] eax
retn
mov eax rw-data
jmp r-xdata
dec eax
je r-xdata
mov eax rw-data
jmp r-xdata
dec eax
je r-xdata
mov eax rw-data
jmp r-xdata
dec eax
je r-xdata
mov eax rw-data
jmp r-xdata
dec eax
je r-xdata
mov eax rw-data
jmp r-xdata
xor eax eax
retn
sub_401bb9
push esi
mov esi ecx
call Ordinal_MFC42_560
and [ esi + 0x44 ] 0x0
mov [ esi ] r--data
call sub_401b3a
call [ rand@IAT ]
push 0x8
cdq
pop ecx
idiv ecx
mov eax esi
pop esi
mov [ rw-data ] edx
retn
sub_401c19
mov eax sub_40523f
call sub_404f50
sub esp 0x11c
push ebx
push esi
push edi
lea ecx [ ebp - 0x128 ]
call sub_401000
mov esi rwxdata
xor ebx ebx
push esi
mov [ ebp - 0x4 ] ebx
call strlen
pop ecx
push eax
push esi
lea ecx [ ebp - 0x128 ]
call sub_4011db
mov [ ebp - 0x20 ] 0x64
mov [ ebp - 0x1f ] 0x8b
mov [ ebp - 0x1e ] 0x35
mov [ ebp - 0x1d ] 0x30
mov [ ebp - 0x1c ] bl
mov [ ebp - 0x1b ] bl
mov [ ebp - 0x1a ] bl
mov [ ebp - 0x18 ] ebx
xor eax eax
inc eax
cmp eax 0x7
jb r-xdata
inc [ ebp - 0x18 ]
movzx ecx [ eax + rwxdata ]
movzx edx [ ebp + eax - 0x20 ]
sub edx ecx
jne r-xdata
push 0x36ce
call Ordinal_MFC42_823
pop ecx
mov esi 0x1b67
push esi
lea ecx [ ebp - 0x128 ]
mov edi eax
mov [ ebp - 0x10 ] ebx
call sub_40121a
cmp [ ebp - 0x18 ] 0x7
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x10 ] edi
je r-xdata
lea eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x128 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push esi
mov esi rwxdata
push esi
call sub_40104a
mov eax [ ebp - 0x14 ]
cmp [ ebp - 0x20 ] eax
jne r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
push eax
push rwxdata
lea ecx [ ebp - 0x128 ]
call sub_401148
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x10 ]
mov esi rwxdata
mov [ eax + ecx ] bl
push [ ebp - 0x14 ]
push [ ebp - 0x10 ]
push esi
call memcpy
add esp 0xc
cmp [ ebp - 0x14 ] ebx
je r-xdata
push ebx
push rwxdata
push rwxdata
push ebx
call [ MessageBoxA@IAT ]
push eax
push edi
push esi
call memcpy
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x128 ]
call sub_401043
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
mov [ ebp - 0x18 ] esi
mov eax [ ebp - 0x18 ]
inc eax
add eax 0x5
mov ebx 0x24
add eax ebx
dec eax
sub eax 0x4
sub ebx ebx
mov ebx eax
call ebx
jmp r-xdata
sub_401d7d
push ecx
push ebx
push ebp
push esi
push edi
push 0x19
mov [ esp + 0x14 ] ecx
pop ebp
push [ rw-data ]
add [ rw-data ] ebp
call sub_401b66
mov esi eax
pop ecx
xor ebx ebx
mov cx [ esi + 0x24 ]
mov eax [ esi ]
push ecx
push ebx
push ebx
push ebx
mov ecx esi
call [ eax ]
push [ rw-data ]
mov ecx esi
push [ rw-data ]
push ebp
push [ esi + 0x4c ]
push [ esi + 0x48 ]
push [ rw-data ]
push [ rw-data ]
push ebx
call sub_4012ba
xor esi esi
xor esi esi
add esi 0x8
cmp esi 0x20
jl r-xdata
push [ rw-data ]
call sub_401b66
mov eax [ eax + esi + 0x28 ]
mov ecx ebp
sub eax [ rw-data ]
push [ rw-data ]
cdq
idiv ecx
mov edi eax
call sub_401b66
mov eax [ eax + esi + 0x2c ]
pop ecx
sub eax [ rw-data ]
pop ecx
mov ecx ebp
add esi 0x8
cdq
idiv ecx
imul eax eax 0xb
cmp esi 0x20
mov [ eax + edi + rw-data ] bl
jl r-xdata
call [ rand@IAT ]
lea eax [ eax + eax * 2 ]
push 0x7
cdq
pop ecx
idiv ecx
push edx
mov [ rw-data ] edx
call sub_401b66
mov eax [ rw-data ]
pop ecx
sub eax [ rw-data ]
cdq
sub eax edx
sar eax 0x1
sub eax 0xc
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
jmp r-xdata
push [ rw-data ]
call sub_401b66
mov eax [ eax + esi + 0x28 ]
mov ecx ebp
sub eax [ rw-data ]
push [ rw-data ]
cdq
idiv ecx
mov edi eax
call sub_401b66
mov eax [ eax + esi + 0x2c ]
pop ecx
sub eax [ rw-data ]
pop ecx
mov ecx ebp
cdq
idiv ecx
imul eax eax 0xb
cmp [ eax + edi + rw-data ] bl
je r-xdata
cmp [ rw-data ] 0xa
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x4
inc [ rw-data ]
mov esi [ esp + 0x10 ]
push 0x1
push ebx
push [ esi + 0x20 ]
call [ InvalidateRect@IAT ]
mov ecx esi
call Ordinal_MFC42_2379
cmp [ rw-data ] 0x64
jge r-xdata
mov ecx [ esp + 0x10 ]
push ebx
call sub_4020be
sub_401f06
push ebp
mov ebp esp
push esi
mov esi ecx
push [ ebp + 0x8 ]
call Ordinal_MFC42_4464
cmp eax 0xffffffff
jne r-xdata
and [ rw-data ] 0x0
push 0x0
push 0x96
push 0x1
push [ esi + 0x20 ]
call [ SetTimer@IAT ]
lea eax [ ebp + 0x8 ]
push eax
call [ time@IAT ]
lea eax [ ebp + 0x8 ]
push eax
call [ gmtime@IAT ]
push [ eax ]
call [ srand@IAT ]
add esp 0xc
xor eax eax
or eax eax
jmp r-xdata
pop esi
pop ebp
retn 0x4
sub_401f5c
push ebx
push ebp
push esi
push edi
push [ rw-data ]
mov ebp ecx
call sub_401b66
pop ecx
mov ecx eax
mov eax [ esp + 0x14 ]
sub eax 0x25
je r-xdata
push 0x19
xor esi esi
pop ebx
dec eax
je r-xdata
add esi 0x8
cmp esi 0x20
jl r-xdata
imul eax eax 0xb
cmp [ eax + edi + rw-data ] 0x0
jne r-xdata
mov ax [ ecx + 0x24 ]
inc ax
movsx eax ax
cdq
idiv [ ecx + 0x50 ]
mov [ ecx + 0x24 ] dx
jmp r-xdata
dec eax
je r-xdata
push [ rw-data ]
call sub_401b66
mov eax [ eax + esi + 0x28 ]
mov ecx ebx
sub eax [ rw-data ]
push [ rw-data ]
cdq
idiv ecx
mov edi eax
call sub_401b66
mov eax [ eax + esi + 0x2c ]
pop ecx
sub eax [ rw-data ]
pop ecx
mov ecx ebx
cdq
idiv ecx
lea ecx [ edi - 0x1 ]
test ecx ecx
jl r-xdata
mov eax [ rw-data ]
cmp eax [ rw-data ]
jge r-xdata
add [ rw-data ] ebx
mov ecx ebp
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
push 0x19
xor esi esi
pop ebx
dec eax
jne r-xdata
sub eax ebx
add eax ebx
add esi 0x8
cmp esi 0x20
jl r-xdata
imul eax eax 0xb
cmp [ eax + edi + rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
push 0x19
cmp eax [ rw-data ]
pop ebx
jle r-xdata
push [ rw-data ]
call sub_401b66
mov eax [ eax + esi + 0x28 ]
mov ecx ebx
sub eax [ rw-data ]
push [ rw-data ]
cdq
idiv ecx
mov edi eax
call sub_401b66
mov eax [ eax + esi + 0x2c ]
pop ecx
sub eax [ rw-data ]
pop ecx
mov ecx ebx
cdq
idiv ecx
lea ecx [ edi + 0x1 ]
cmp ecx 0xa
jg r-xdata
mov eax [ rw-data ]
cmp eax [ rw-data ]
jle r-xdata
sub [ rw-data ] ebx
add eax ebx
mov [ rw-data ] eax
jmp r-xdata
sub eax ebx
add eax ebx
jmp r-xdata
sub eax ebx
mov [ rw-data ] eax
sub_4020cb
push ecx
push ebx
push ebp
push esi
xor edx edx
push edi
xor ebp ebp
mov esi rw-data
push 0x17
mov [ esp + 0x17 ] dl
pop ebp
cmp ebp 0x9
jne r-xdata
mov eax ebp
imul eax eax 0xb
lea esi [ eax + rw-data ]
mov [ esp + 0x13 ] dl
jmp r-xdata
inc ebp
cmp ebp 0xb
jl r-xdata
mov eax 0x1010101
mov edi esi
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax esi
mov [ esp + 0x13 ] 0x1
cmp edx 0xa
jne r-xdata
dec ebp
xor edx edx
cmp ebp edx
jg r-xdata
cmp [ ebp + rw-data ] 0x1
je r-xdata
mov bl [ eax + ecx - 0xb ]
mov [ eax + ecx ] bl
inc ecx
cmp ecx 0xb
jl r-xdata
sub eax 0xb
cmp eax rw-data
jge r-xdata
cmp [ esp + 0x13 ] dl
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
inc edx
cmp edx 0xb
jl r-xdata
mov eax 0x1010101
mov edi esi
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
lea ecx [ ebp - 0x1 ]
test ecx ecx
stosb [ edi ]
jl r-xdata
xor ecx ecx
cmp [ esi + edx ] 0x1
je r-xdata
jmp r-xdata
mov eax ecx
lea edi [ ecx + 0x1 ]
imul eax eax 0xb
add eax rw-data
mov bl [ eax + ecx - 0xb ]
mov [ eax + ecx ] bl
inc ecx
cmp ecx 0xb
jl r-xdata
sub eax 0xb
dec edi
jne r-xdata
xor ecx ecx
sub_40218c
mov eax sub_4052b4
call sub_404f50
sub esp 0x4c
push ebx
xor ebx ebx
cmp [ ecx + 0x44 ] bl
push esi
push edi
jne r-xdata
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x30 ] r--data
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_323
push ebx
mov [ ebp - 0x4 ] 0x1
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ ebp - 0x58 ]
call Ordinal_MFC42_1640
mov eax [ rw-data ]
mov ecx [ rw-data ]
sub eax [ rw-data ]
sub ecx [ rw-data ]
push eax
mov eax [ ebp + 0x8 ]
push ecx
push [ eax + 0x4 ]
call [ CreateCompatibleBitmap@IAT ]
push eax
lea ecx [ ebp - 0x30 ]
call Ordinal_MFC42_1641
lea eax [ ebp - 0x30 ]
neg eax
sbb eax eax
and eax [ ebp - 0x2c ]
push eax
push [ ebp - 0x54 ]
call Ordinal_MFC42_5785
mov eax [ rw-data ]
push 0xffffff
sub eax [ rw-data ]
lea ecx [ ebp - 0x58 ]
push eax
mov eax [ rw-data ]
sub eax [ rw-data ]
push eax
push ebx
push ebx
call Ordinal_MFC42_2753
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] r--data
mov edi r--data
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] edi
mov esi [ CreateSolidBrush@IAT ]
push 0x2b86f5
mov [ ebp - 0x4 ] 0x3
call esi
push eax
lea ecx [ ebp - 0x20 ]
call Ordinal_MFC42_1641
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x48 ] edi
push 0x2b0e91
mov [ ebp - 0x4 ] 0x4
call esi
push eax
lea ecx [ ebp - 0x48 ]
call Ordinal_MFC42_1641
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x40 ] edi
push 0x570e0f
mov [ ebp - 0x4 ] 0x5
call esi
push eax
lea ecx [ ebp - 0x40 ]
call Ordinal_MFC42_1641
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] edi
push 0x218ec7
mov [ ebp - 0x4 ] 0x6
call esi
push eax
lea ecx [ ebp - 0x38 ]
call Ordinal_MFC42_1641
push 0x212217
push 0x2
push ebx
call [ CreatePen@IAT ]
push eax
lea ecx [ ebp - 0x28 ]
call Ordinal_MFC42_1641
lea eax [ ebp - 0x28 ]
lea ecx [ ebp - 0x58 ]
push eax
call Ordinal_MFC42_5788
lea eax [ ebp - 0x20 ]
lea ecx [ ebp - 0x58 ]
push eax
call Ordinal_MFC42_5787
push [ rw-data ]
call sub_401b66
pop ecx
push [ rw-data ]
lea ecx [ ebp - 0x58 ]
push [ rw-data ]
push 0x19
push [ eax + 0x4c ]
push [ eax + 0x48 ]
push [ rw-data ]
push [ rw-data ]
push ecx
mov ecx eax
call sub_4012ba
xor esi esi
mov [ ebp - 0x10 ] esi
push rw-data
mov [ ecx + 0x44 ] 0x1
push [ ecx + 0x20 ]
call [ GetClientRect@IAT ]
mov eax [ rw-data ]
add eax 0x64
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
add edi 0x19
inc eax
cmp edi 0x113
mov [ ebp - 0x14 ] eax
jl r-xdata
cmp esi 0x16
jne r-xdata
cmp [ eax ] bl
jne r-xdata
inc esi
cmp esi 0x18
mov [ ebp - 0x10 ] esi
jl r-xdata
cmp esi 0x13
jl r-xdata
lea eax [ ebp - 0x48 ]
lea ecx [ ebp - 0x58 ]
push eax
call Ordinal_MFC42_5787
mov eax esi
xor edi edi
imul eax eax 0xb
add eax rw-data
mov [ ebp - 0x14 ] eax
call sub_4020cb
mov ecx [ rw-data ]
mov edx [ rw-data ]
sub ecx [ rw-data ]
sub edx [ rw-data ]
lea eax [ ebp - 0x58 ]
push 0xcc0020
neg eax
sbb eax eax
push ebx
and eax [ ebp - 0x54 ]
push ebx
push eax
mov eax [ ebp + 0x8 ]
push ecx
push edx
push ebx
push ebx
push [ eax + 0x4 ]
call [ BitBlt@IAT ]
lea ecx [ ebp - 0x28 ]
call Ordinal_MFC42_2414
lea ecx [ ebp - 0x20 ]
call Ordinal_MFC42_2414
lea ecx [ ebp - 0x30 ]
call Ordinal_MFC42_2414
lea ecx [ ebp - 0x58 ]
call Ordinal_MFC42_2405
mov esi r--data
mov [ ebp - 0x38 ] esi
lea ecx [ ebp - 0x38 ]
mov [ ebp - 0x4 ] 0x7
call Ordinal_MFC42_2414
mov edi r--data
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x38 ] edi
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4 ] 0x8
call Ordinal_MFC42_2414
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x48 ] esi
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x9
call Ordinal_MFC42_2414
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x20 ] esi
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] 0xa
call Ordinal_MFC42_2414
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x28 ] esi
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0xb
call Ordinal_MFC42_2414
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_640
mov [ ebp - 0x30 ] esi
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0xc
call Ordinal_MFC42_2414
mov ecx [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp esi 0xf
jl r-xdata
cmp esi 0x15
jg r-xdata
mov edx [ rw-data ]
lea eax [ esi + 0x1 ]
imul eax eax 0x19
lea ecx [ edi + edx + 0x19 ]
mov esi [ rw-data ]
mov [ ebp - 0x18 ] ecx
mov ecx [ ebp - 0x10 ]
imul ecx ecx 0x19
add eax esi
add ecx esi
push eax
add edx edi
push [ ebp - 0x18 ]
push ecx
push edx
push [ ebp - 0x54 ]
call [ Rectangle@IAT ]
mov esi [ ebp - 0x10 ]
mov eax [ ebp - 0x14 ]
cmp esi 0x14
jg r-xdata
lea eax [ ebp - 0x40 ]
lea ecx [ ebp - 0x58 ]
push eax
call Ordinal_MFC42_5787
lea eax [ ebp - 0x38 ]
lea ecx [ ebp - 0x58 ]
push eax
call Ordinal_MFC42_5787
sub_402520
mov eax sub_4052c8
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_40256f
mov eax sub_4052dc
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_4025be
mov eax sub_4052f0
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_40260d
mov eax sub_405304
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_40266c
push ecx
push ecx
push ebx
push ebp
push esi
push edi
xor ecx ecx
mov al 0x1
movzx edx al
mov bl al
mov [ ecx + rw-data ] al
mov [ edx + rw-data ] cl
mov dl al
and dl 0x80
neg dl
sbb dl dl
and edx 0x1b
shl bl 0x1
xor dl bl
xor al dl
inc ecx
cmp ecx 0x100
jb r-xdata
and [ rw-data ] 0x0
mov al 0x1
mov ecx rw-data
movzx edx al
mov [ ecx ] edx
mov dl al
and dl 0x80
neg dl
sbb dl dl
add ecx 0x4
and edx 0x1b
shl al 0x1
xor al dl
cmp ecx rw-data
jl r-xdata
xor edx edx
xor bl bl
movzx eax [ edx + rw-data ]
mov ecx rw-data
sub ecx eax
mov bl [ ecx ]
jmp r-xdata
test edx edx
je r-xdata
xor edi edi
mov al bl
mov cl bl
shr al 0x7
shl cl 0x1
or al cl
mov cl al
xor bl al
shr cl 0x7
shl al 0x1
or cl al
mov al cl
xor bl cl
shr al 0x7
shl cl 0x1
or al cl
mov cl al
xor bl al
shr cl 0x7
shl al 0x1
or cl al
xor cl bl
xor cl 0x63
movzx eax cl
mov [ edx + rw-data ] cl
mov [ eax + rw-data ] dl
inc edx
cmp edx 0x100
jb r-xdata
xor ebp ebp
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov ebp 0xff
cdq
idiv ebp
movzx ebp [ edx + rw-data ]
jmp r-xdata
xor eax eax
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov ebx 0xff
cdq
idiv ebx
movzx eax [ edx + rw-data ]
jmp r-xdata
test bl bl
je r-xdata
and [ esp + 0x14 ] 0x0
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov ebp 0xff
cdq
idiv ebp
movzx eax [ edx + rw-data ]
mov [ esp + 0x14 ] eax
jmp r-xdata
shl eax 0x8
or eax esi
mov bl [ edi + rw-data ]
shl eax 0x8
or eax esi
shl eax 0x8
or eax ebp
mov edx eax
mov [ ecx + rw-data ] eax
rol edx 0x8
mov [ ecx + rw-data ] edx
mov edx eax
rol edx 0x10
movzx esi bl
rol eax 0x18
mov [ ecx + rw-data ] edx
mov [ ecx + rw-data ] eax
mov eax esi
mov [ ecx + rw-data ] esi
rol eax 0x8
mov [ ecx + rw-data ] eax
mov eax esi
rol eax 0x10
mov [ ecx + rw-data ] eax
mov eax esi
rol eax 0x18
test bl bl
mov [ ecx + rw-data ] eax
je r-xdata
and [ esp + 0x10 ] 0x0
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov ebp 0xff
cdq
idiv ebp
movzx eax [ edx + rw-data ]
mov [ esp + 0x10 ] eax
jmp r-xdata
test bl bl
je r-xdata
xor ebp ebp
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov ebp 0xff
cdq
idiv ebp
movzx ebp [ edx + rw-data ]
jmp r-xdata
test bl bl
je r-xdata
xor eax eax
movzx eax [ esi + rw-data ]
movzx edx [ rw-data ]
add eax edx
mov esi 0xff
cdq
idiv esi
movzx eax [ edx + rw-data ]
jmp r-xdata
test bl bl
je r-xdata
mov bl [ edi + rw-data ]
mov ecx edi
movzx esi bl
shl ecx 0x2
mov eax esi
rol eax 0x8
mov [ ecx + rw-data ] esi
mov [ ecx + rw-data ] eax
mov eax esi
rol eax 0x10
mov [ ecx + rw-data ] eax
mov eax esi
rol eax 0x18
test bl bl
mov [ ecx + rw-data ] eax
je r-xdata
pop edi
pop esi
pop ebp
mov [ rw-data ] 0x1
pop ebx
pop ecx
pop ecx
retn
shl eax 0x8
or eax ebp
shl eax 0x8
or eax [ esp + 0x10 ]
shl eax 0x8
or eax [ esp + 0x14 ]
inc edi
mov edx eax
mov [ ecx + rw-data ] eax
rol edx 0x8
mov [ ecx + rw-data ] edx
mov edx eax
rol edx 0x10
rol eax 0x18
mov [ ecx + rw-data ] edx
cmp edi 0x100
mov [ ecx + rw-data ] eax
jl r-xdata
sub_40291c
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
mov esi ecx
jne r-xdata
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1f ]
mov eax [ ebp + 0x8 ]
shr ecx 0x5
mov [ esi + 0x4 ] ecx
mov edx [ eax ]
mov [ esi + 0x8 ] edx
mov edx [ eax + 0x4 ]
mov [ esi + 0xc ] edx
mov edx [ eax + 0x8 ]
mov [ esi + 0x10 ] edx
mov edx [ eax + 0xc ]
sub ecx 0x4
mov [ esi + 0x14 ] edx
je r-xdata
call sub_40266c
mov eax edx
mov edi rw-data
lea ecx [ esi + 0x18 ]
dec ecx
dec ecx
je r-xdata
ror eax 0x8
mov ebx eax
mov edx eax
shr ebx 0x10
shr edx 0x18
movzx ebx bl
mov edx [ edx * 4 + rw-data ]
xor edx [ ebx * 4 + rw-data ]
mov ebx eax
shr ebx 0x8
movzx ebx bl
movzx eax al
xor edx [ ebx * 4 + rw-data ]
xor edx [ eax * 4 + rw-data ]
xor edx [ ecx - 0x10 ]
xor edx [ edi ]
add edi 0x4
mov eax edx
mov [ ecx ] eax
xor eax [ ecx - 0xc ]
mov [ ecx + 0x4 ] eax
xor eax [ ecx - 0x8 ]
mov [ ecx + 0x8 ] eax
xor eax [ ecx - 0x4 ]
mov [ ecx + 0xc ] eax
add ecx 0x10
cmp edi rw-data
jl r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
mov [ esi + 0x108 ] eax
mov eax [ esi + 0xc ]
mov [ esi + 0x10c ] eax
mov eax [ esi + 0x10 ]
mov [ esi + 0x110 ] eax
mov eax [ esi + 0x14 ]
push 0x4
mov [ esi + 0x114 ] eax
pop eax
lea ecx [ ecx * 4 + 0x18 ]
cmp ecx eax
mov [ ebp + 0x8 ] eax
jbe r-xdata
mov ecx [ eax + 0x10 ]
mov edi rw-data
mov [ esi + 0x18 ] ecx
mov eax [ eax + 0x14 ]
mov [ esi + 0x1c ] eax
lea ecx [ esi + 0x20 ]
dec ecx
dec ecx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
lea eax [ esi + 0x18 ]
mov [ ebp - 0x4 ] eax
ror eax 0x8
mov ebx eax
mov edx eax
shr ebx 0x10
shr edx 0x18
movzx ebx bl
mov edx [ edx * 4 + rw-data ]
xor edx [ ebx * 4 + rw-data ]
mov ebx eax
shr ebx 0x8
movzx ebx bl
movzx eax al
xor edx [ ebx * 4 + rw-data ]
xor edx [ eax * 4 + rw-data ]
xor edx [ ecx - 0x18 ]
xor edx [ edi ]
add edi 0x4
mov eax edx
mov [ ecx ] eax
xor eax [ ecx - 0x14 ]
mov [ ecx + 0x4 ] eax
xor eax [ ecx - 0x10 ]
mov [ ecx + 0x8 ] eax
xor eax [ ecx - 0xc ]
mov [ ecx + 0xc ] eax
xor eax [ ecx - 0x8 ]
mov [ ecx + 0x10 ] eax
xor eax [ ecx - 0x4 ]
mov [ ecx + 0x14 ] eax
add ecx 0x18
cmp edi rw-data
jl r-xdata
jmp r-xdata
mov ecx [ eax + 0x10 ]
mov edi rw-data
mov [ esi + 0x18 ] ecx
mov ecx [ eax + 0x14 ]
mov [ esi + 0x1c ] ecx
mov ecx [ eax + 0x18 ]
mov [ esi + 0x20 ] ecx
mov eax [ eax + 0x1c ]
mov [ esi + 0x24 ] eax
lea ecx [ esi + 0x28 ]
mov edi [ eax ]
mov ebx 0x1010101
mov eax edi
mov ecx edi
shr eax 0x7
and eax ebx
and ecx 0xff7f7f7f
imul eax eax 0x1b
shl ecx 0x1
xor eax ecx
mov ecx eax
mov edx eax
shr ecx 0x7
and ecx ebx
and edx 0xff7f7f7f
imul ecx ecx 0x1b
shl edx 0x1
xor ecx edx
mov edx ecx
shr edx 0x7
and edx ebx
mov ebx ecx
imul edx edx 0x1b
and ebx 0xff7f7f7f
shl ebx 0x1
xor edx ebx
mov ebx ecx
xor edi edx
mov [ ebp + 0xc ] edi
xor ebx edi
mov edi eax
xor edi [ ebp + 0xc ]
ror ebx 0x10
ror edi 0x8
xor ebx edi
mov edi [ ebp + 0xc ]
ror edi 0x18
xor ebx edi
xor ebx edx
xor ebx ecx
xor ebx eax
mov eax [ ebp - 0x4 ]
inc [ ebp + 0x8 ]
mov [ eax + 0x100 ] ebx
mov ecx [ esi + 0x4 ]
add eax 0x4
lea ecx [ ecx * 4 + 0x18 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] ecx
jb r-xdata
mov edx eax
ror edx 0x8
mov ebx edx
mov eax edx
shr ebx 0x10
shr eax 0x18
movzx ebx bl
mov eax [ eax * 4 + rw-data ]
xor eax [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x8
movzx ebx bl
movzx edx dl
xor eax [ ebx * 4 + rw-data ]
xor eax [ edx * 4 + rw-data ]
xor eax [ ecx - 0x20 ]
xor eax [ edi ]
add edi 0x4
mov [ ecx ] eax
xor eax [ ecx - 0x1c ]
mov [ ecx + 0x4 ] eax
xor eax [ ecx - 0x18 ]
mov [ ecx + 0x8 ] eax
xor eax [ ecx - 0x14 ]
mov ebx eax
mov edx eax
shr ebx 0x10
shr edx 0x18
movzx ebx bl
mov [ ecx + 0xc ] eax
mov edx [ edx * 4 + rw-data ]
xor edx [ ebx * 4 + rw-data ]
mov ebx eax
shr ebx 0x8
movzx ebx bl
movzx eax al
xor edx [ ebx * 4 + rw-data ]
add ecx 0x20
xor edx [ eax * 4 + rw-data ]
xor edx [ ecx - 0x30 ]
mov eax edx
mov [ ecx - 0x10 ] eax
xor eax [ ecx - 0x2c ]
mov [ ecx - 0xc ] eax
xor eax [ ecx - 0x28 ]
mov [ ecx - 0x8 ] eax
xor eax [ ecx - 0x24 ]
cmp edi rw-data
mov [ ecx - 0x4 ] eax
jl r-xdata
jmp r-xdata
sub_402c10
push ebp
mov ebp esp
sub esp 0x24
mov eax [ ebp + 0x8 ]
push ebx
mov ebx ecx
push esi
mov ecx [ eax + 0x4 ]
mov esi [ eax + 0x8 ]
mov edx [ ebx + 0x8 ]
xor ecx [ ebx + 0xc ]
xor edx [ eax ]
xor esi [ ebx + 0x10 ]
push edi
mov edi [ eax + 0xc ]
xor edi [ ebx + 0x14 ]
lea eax [ ebx + 0x18 ]
mov ebx [ ebx + 0x4 ]
mov [ ebp - 0x14 ] edx
cmp ebx 0x6
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] ebx
jbe r-xdata
cmp [ ebp - 0x4 ] 0x4
jbe r-xdata
mov ebx edi
shr ebx 0x18
mov [ ebp + 0x8 ] ebx
mov ebx esi
mov esi [ ebp + 0x8 ]
shr ebx 0x10
mov esi [ esi * 4 + rw-data ]
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
movzx ebx dl
xor esi [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x10
xor esi [ eax ]
add eax 0x10
mov [ ebp - 0x24 ] esi
movzx esi bl
mov ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
movzx ebx cl
shr ecx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x8
xor esi [ eax - 0xc ]
mov [ ebp - 0x20 ] esi
movzx esi bl
mov ebx [ esi * 4 + rw-data ]
mov esi [ ebp - 0xc ]
xor ebx [ ecx * 4 + rw-data ]
mov ecx edx
shr ecx 0x10
movzx ecx cl
shr esi 0x18
xor ebx [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
shr ecx 0x10
movzx ecx cl
shr edx 0x8
xor esi [ ecx * 4 + rw-data ]
xor ebx [ eax - 0x8 ]
movzx ecx dl
mov edx ebx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x8 ]
shr edx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx edx dl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x18 ] esi
shr ecx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr edx 0x8
movzx edx dl
xor ecx [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x24 ]
xor ecx [ edx * 4 + rw-data ]
xor ecx [ eax ]
mov edx ecx
mov ecx esi
shr ecx 0x10
movzx esi cl
mov ecx ebx
mov [ ebp - 0x14 ] edx
shr ecx 0x8
mov esi [ esi * 4 + rw-data ]
movzx ecx cl
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x18
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x20 ]
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x18 ]
shr ecx 0x8
xor esi [ eax + 0x4 ]
movzx ecx cl
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x20 ]
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x10
shr esi 0x18
movzx ecx cl
xor edi [ esi * 4 + rw-data ]
xor edi [ ecx * 4 + rw-data ]
movzx ecx bl
shr ebx 0x18
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
shr ecx 0x10
xor edi [ eax + 0x8 ]
movzx ecx cl
mov [ ebp - 0xc ] edi
mov edi [ ebx * 4 + rw-data ]
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x8
movzx ecx cl
mov esi [ ebp - 0xc ]
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edi [ eax + 0xc ]
add eax 0x10
mov [ ebp - 0x8 ] edi
mov ebx esi
shr ebx 0x10
shr edi 0x18
movzx esi bl
mov ebx [ edi * 4 + rw-data ]
xor ebx [ esi * 4 + rw-data ]
shr ecx 0x8
movzx ecx cl
xor ebx [ ecx * 4 + rw-data ]
movzx ecx dl
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x8 ]
shr ecx 0x10
movzx esi cl
mov ecx [ ebp - 0xc ]
xor ebx [ eax ]
mov esi [ esi * 4 + rw-data ]
add eax 0x10
shr ecx 0x8
movzx ecx cl
mov [ ebp - 0x24 ] ebx
xor esi [ ecx * 4 + rw-data ]
mov ecx edx
shr ecx 0x18
shr edx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x10 ]
movzx edx dl
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x8 ]
shr ecx 0x8
xor esi [ eax - 0xc ]
movzx ecx cl
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x10 ]
mov ecx [ ecx * 4 + rw-data ]
shr esi 0x18
xor ecx [ esi * 4 + rw-data ]
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0xc ]
movzx esi dl
shr edx 0x18
xor ecx [ esi * 4 + rw-data ]
mov [ ebp + 0x8 ] edx
mov edx [ ebp - 0x10 ]
mov esi [ ebp + 0x8 ]
shr edx 0x10
mov esi [ esi * 4 + rw-data ]
xor ecx [ eax - 0x8 ]
movzx edx dl
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x8
movzx edx dl
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
xor esi [ edx * 4 + rw-data ]
mov edx ecx
shr edx 0x10
xor esi [ eax - 0x4 ]
movzx edx dl
mov edi esi
mov [ ebp - 0x18 ] esi
shr edi 0x18
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr edx 0x8
movzx edx dl
xor edi [ edx * 4 + rw-data ]
movzx edx bl
xor edi [ edx * 4 + rw-data ]
mov edx esi
shr edx 0x10
xor edi [ eax ]
mov [ ebp - 0x14 ] edi
movzx edi dl
mov edx ecx
mov edi [ edi * 4 + rw-data ]
shr edx 0x8
movzx edx dl
xor edi [ edx * 4 + rw-data ]
mov edx ebx
shr edx 0x18
shr ebx 0x10
xor edi [ edx * 4 + rw-data ]
add eax 0x10
movzx edx [ ebp - 0x20 ]
xor edi [ edx * 4 + rw-data ]
mov edx esi
mov esi [ ebp - 0x20 ]
shr edx 0x8
movzx edx dl
shr esi 0x18
mov edx [ edx * 4 + rw-data ]
xor edi [ eax - 0xc ]
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] edi
xor edx [ esi * 4 + rw-data ]
movzx esi cl
shr ecx 0x18
xor edx [ esi * 4 + rw-data ]
mov esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ebx 0x10
movzx edi bl
shr ecx 0x8
xor esi [ edi * 4 + rw-data ]
xor edx [ eax - 0x8 ]
movzx ecx cl
mov ebx edx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ebx bl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x18
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edi [ ebx * 4 + rw-data ]
mov ebx edx
shr ecx 0x8
movzx ecx cl
shr ebx 0x8
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x14 ]
movzx ebx bl
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x10
xor edi [ eax ]
movzx ecx cl
mov [ ebp - 0x24 ] edi
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
xor edi [ ebx * 4 + rw-data ]
shr ecx 0x18
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x10 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x8
mov esi [ ebp - 0x10 ]
xor edi [ eax + 0x4 ]
movzx ecx cl
shr esi 0x18
mov ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
xor ebx [ esi * 4 + rw-data ]
mov [ ebp - 0x20 ] edi
shr ecx 0x10
movzx ecx cl
xor ebx [ ecx * 4 + rw-data ]
movzx ecx dl
xor ebx [ ecx * 4 + rw-data ]
xor ebx [ eax + 0x8 ]
shr edx 0x18
mov ecx [ ebp - 0x10 ]
mov esi [ edx * 4 + rw-data ]
shr ecx 0x10
movzx ecx cl
mov edx ebx
add eax 0x10
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
shr ecx 0x8
movzx ecx cl
shr edx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x8 ]
movzx edx dl
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x18 ] esi
shr ecx 0x18
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
xor edi [ edx * 4 + rw-data ]
mov edx ebx
shr ecx 0x8
movzx ecx cl
shr edx 0x8
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x24 ]
movzx edx dl
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x10
xor edi [ eax ]
add eax 0x10
movzx ecx cl
mov [ ebp - 0x14 ] edi
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
xor edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr ecx 0x18
shr edx 0x18
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x20 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x8
movzx ecx cl
xor edi [ eax - 0xc ]
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x24 ]
shr edx 0x10
movzx edx dl
mov [ ebp - 0x10 ] edi
xor ecx [ edx * 4 + rw-data ]
movzx edx bl
shr ebx 0x18
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
mov esi [ ebx * 4 + rw-data ]
shr edx 0x10
movzx edx dl
xor ecx [ eax - 0x8 ]
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x24 ]
shr edx 0x8
movzx edx dl
mov ebx ecx
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x18 ]
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx ebx bl
xor esi [ eax - 0x4 ]
mov edx esi
mov [ ebp - 0x8 ] esi
shr edx 0x18
mov edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x10 ]
xor edi [ ebx * 4 + rw-data ]
shr edx 0x8
movzx edx dl
mov ebx ecx
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x14 ]
shr ebx 0x8
xor edi [ edx * 4 + rw-data ]
mov edx esi
shr edx 0x10
xor edi [ eax ]
add eax 0x10
movzx edx dl
movzx ebx bl
mov [ ebp - 0x24 ] edi
mov edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
xor edi [ ebx * 4 + rw-data ]
shr edx 0x18
mov ebx [ ebp - 0x14 ]
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x10 ]
shr ebx 0x10
xor edi [ edx * 4 + rw-data ]
mov edx esi
mov esi [ ebp - 0x10 ]
shr edx 0x8
movzx edx dl
shr esi 0x18
mov edx [ edx * 4 + rw-data ]
xor edi [ eax - 0xc ]
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x10 ]
mov [ ebp - 0x20 ] edi
xor edx [ esi * 4 + rw-data ]
movzx esi cl
shr ecx 0x18
xor edx [ esi * 4 + rw-data ]
mov esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
shr ebx 0x10
movzx edi bl
shr ecx 0x8
xor esi [ edi * 4 + rw-data ]
xor edx [ eax - 0x8 ]
movzx ecx cl
mov ebx edx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x8 ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ebx bl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x18 ] esi
shr ecx 0x18
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
xor edi [ ebx * 4 + rw-data ]
mov ebx edx
shr ecx 0x8
movzx ecx cl
shr ebx 0x8
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x24 ]
movzx ebx bl
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x10
xor edi [ eax ]
movzx ecx cl
mov [ ebp - 0x14 ] edi
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
xor edi [ ebx * 4 + rw-data ]
shr ecx 0x18
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x20 ]
xor edi [ ecx * 4 + rw-data ]
xor edi [ eax + 0x4 ]
mov [ ebp - 0x10 ] edi
mov ecx esi
mov esi [ ebp - 0x20 ]
shr ecx 0x8
movzx ecx cl
shr esi 0x18
mov ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
xor ebx [ esi * 4 + rw-data ]
add eax 0x10
shr ecx 0x10
movzx ecx cl
xor ebx [ ecx * 4 + rw-data ]
movzx ecx dl
shr edx 0x18
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
mov esi [ edx * 4 + rw-data ]
shr ecx 0x10
movzx ecx cl
xor ebx [ eax - 0x8 ]
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x8
movzx ecx cl
mov edx ebx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
shr edx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx edx dl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x18
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edi [ edx * 4 + rw-data ]
mov edx ebx
shr ecx 0x8
movzx ecx cl
shr edx 0x8
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x14 ]
movzx edx dl
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x10
xor edi [ eax ]
movzx ecx cl
mov [ ebp - 0x24 ] edi
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
xor edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x10 ]
shr ecx 0x18
shr edx 0x18
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x10 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x8
movzx ecx cl
xor edi [ eax + 0x4 ]
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x10
movzx edx dl
mov [ ebp - 0x20 ] edi
xor ecx [ edx * 4 + rw-data ]
movzx edx bl
shr ebx 0x18
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x10 ]
mov esi [ ebx * 4 + rw-data ]
shr edx 0x10
xor ecx [ eax + 0x8 ]
movzx edx dl
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x8
movzx edx dl
mov ebx ecx
add eax 0x10
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx ebx bl
xor esi [ eax - 0x4 ]
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x18
mov edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
xor edi [ ebx * 4 + rw-data ]
mov ebx ecx
shr edx 0x8
movzx edx dl
shr ebx 0x8
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x24 ]
movzx ebx bl
xor edi [ edx * 4 + rw-data ]
mov edx esi
shr edx 0x10
xor edi [ eax ]
add eax 0x10
movzx edx dl
mov [ ebp - 0x14 ] edi
mov edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x24 ]
xor edi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x24 ]
shr edx 0x18
shr ebx 0x10
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x20 ]
xor edi [ edx * 4 + rw-data ]
mov edx esi
mov esi [ ebp - 0x20 ]
shr edx 0x8
movzx edx dl
shr esi 0x18
mov edx [ edx * 4 + rw-data ]
xor edi [ eax - 0xc ]
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] edi
xor edx [ esi * 4 + rw-data ]
movzx esi cl
shr ecx 0x18
xor edx [ esi * 4 + rw-data ]
mov esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ebx 0x10
movzx edi bl
shr ecx 0x8
xor esi [ edi * 4 + rw-data ]
xor edx [ eax - 0x8 ]
movzx ecx cl
mov ebx edx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ebx bl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x18
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edi [ ebx * 4 + rw-data ]
shr ecx 0x8
movzx ecx cl
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x14 ]
xor edi [ ecx * 4 + rw-data ]
xor edi [ eax ]
mov [ ebp - 0x24 ] edi
mov ecx esi
mov ebx edx
shr ecx 0x10
movzx ecx cl
shr ebx 0x8
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
movzx ebx bl
shr ecx 0x18
xor edi [ ebx * 4 + rw-data ]
add eax 0x10
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x10 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx esi
shr ecx 0x8
mov esi [ ebp - 0x10 ]
xor edi [ eax - 0xc ]
movzx ecx cl
shr esi 0x18
mov ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
xor ebx [ esi * 4 + rw-data ]
mov [ ebp - 0x20 ] edi
shr ecx 0x10
movzx ecx cl
xor ebx [ ecx * 4 + rw-data ]
movzx ecx dl
shr edx 0x18
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
mov edx [ edx * 4 + rw-data ]
shr ecx 0x10
movzx ecx cl
xor ebx [ eax - 0x8 ]
xor edx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x14 ]
shr ecx 0x8
movzx ecx cl
xor edx [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x8 ]
xor edx [ ecx * 4 + rw-data ]
mov ecx ebx
shr ecx 0x10
xor edx [ eax - 0x4 ]
movzx ecx cl
mov esi edx
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ecx * 4 + rw-data ]
mov ecx edi
shr ecx 0x8
movzx ecx cl
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x24 ]
xor esi [ ecx * 4 + rw-data ]
mov ecx edx
shr ecx 0x10
movzx edi cl
mov ecx ebx
xor esi [ eax ]
mov edi [ edi * 4 + rw-data ]
shr ecx 0x8
movzx ecx cl
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x18
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x20 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx edx
shr ecx 0x8
xor edi [ eax + 0x4 ]
mov [ ebp - 0x10 ] edi
movzx edi cl
mov ecx [ ebp - 0x20 ]
mov edi [ edi * 4 + rw-data ]
shr ecx 0x18
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x10
movzx ecx cl
xor edi [ ecx * 4 + rw-data ]
movzx ecx bl
shr ebx 0x18
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
mov ebx [ ebx * 4 + rw-data ]
shr ecx 0x10
movzx ecx cl
xor edi [ eax + 0x8 ]
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x8
movzx ecx cl
xor ebx [ ecx * 4 + rw-data ]
movzx ecx dl
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor ebx [ eax + 0xc ]
mov eax [ ebp + 0xc ]
mov [ eax + 0x8 ] edi
mov [ eax ] esi
pop edi
mov [ eax + 0xc ] ebx
pop esi
mov [ eax + 0x4 ] ecx
pop ebx
leave
retn 0x8
mov ebx edi
shr ebx 0x18
mov [ ebp + 0x8 ] ebx
mov ebx esi
mov esi [ ebp + 0x8 ]
shr ebx 0x10
mov esi [ esi * 4 + rw-data ]
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
movzx ebx dl
xor esi [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x10
xor esi [ eax ]
add eax 0x10
mov [ ebp - 0x24 ] esi
movzx esi bl
mov ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
movzx ebx cl
shr ecx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edi
shr ebx 0x8
xor esi [ eax - 0xc ]
mov [ ebp - 0x20 ] esi
movzx esi bl
mov ebx [ esi * 4 + rw-data ]
mov esi [ ebp - 0xc ]
xor ebx [ ecx * 4 + rw-data ]
mov ecx edx
shr ecx 0x10
movzx ecx cl
shr esi 0x18
xor ebx [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor ebx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
shr ecx 0x10
movzx ecx cl
shr edx 0x8
xor esi [ ecx * 4 + rw-data ]
xor ebx [ eax - 0x8 ]
movzx ecx dl
mov edx ebx
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x8 ]
shr edx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx edx dl
xor esi [ eax - 0x4 ]
mov ecx esi
mov [ ebp - 0x18 ] esi
shr ecx 0x18
mov ecx [ ecx * 4 + rw-data ]
xor ecx [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr edx 0x8
movzx edx dl
xor ecx [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x24 ]
xor ecx [ edx * 4 + rw-data ]
xor ecx [ eax ]
mov edx ecx
mov ecx esi
shr ecx 0x10
movzx esi cl
mov ecx ebx
mov [ ebp - 0x14 ] edx
shr ecx 0x8
mov esi [ esi * 4 + rw-data ]
movzx ecx cl
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x18
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x20 ]
xor esi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x18 ]
shr ecx 0x8
xor esi [ eax + 0x4 ]
movzx ecx cl
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x20 ]
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x10
shr esi 0x18
movzx ecx cl
xor edi [ esi * 4 + rw-data ]
xor edi [ ecx * 4 + rw-data ]
movzx ecx bl
shr ebx 0x18
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x20 ]
shr ecx 0x10
xor edi [ eax + 0x8 ]
movzx ecx cl
mov [ ebp - 0xc ] edi
mov edi [ ebx * 4 + rw-data ]
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x24 ]
shr ecx 0x8
movzx ecx cl
mov esi [ ebp - 0xc ]
xor edi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor edi [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edi [ eax + 0xc ]
add eax 0x10
mov [ ebp - 0x8 ] edi
sub_403980
push ebp
mov ebp esp
sub esp 0x24
push ebx
push esi
mov esi ecx
push edi
mov ecx [ ebp + 0x8 ]
mov edi [ esi + 0x4 ]
mov [ ebp - 0x4 ] edi
mov eax edi
add edi 0x7
shl eax 0x4
shl edi 0x4
mov ebx [ eax + esi + 0x68 ]
mov edx [ eax + esi + 0x6c ]
mov edi [ edi + esi ]
xor ebx [ ecx ]
xor edi [ ecx + 0x8 ]
xor edx [ ecx + 0x4 ]
add eax esi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0xc ] edi
mov esi [ eax + 0x74 ]
add eax 0x158
xor esi [ ecx + 0xc ]
cmp [ ebp - 0x4 ] 0x6
mov [ ebp - 0x8 ] esi
jbe r-xdata
cmp [ ebp - 0x4 ] 0x4
jbe r-xdata
mov ecx esi
shr ecx 0x8
movzx esi cl
mov ecx edi
shr ecx 0x10
movzx edi cl
mov ecx [ esi * 4 + rw-data ]
mov esi edx
xor ecx [ edi * 4 + rw-data ]
mov edi [ ebp - 0xc ]
shr esi 0x18
shr edi 0x18
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
shr ebx 0x10
movzx esi bl
mov ebx [ ebp - 0x14 ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
sub eax 0x10
xor esi [ edi * 4 + rw-data ]
shr ebx 0x8
movzx edi bl
mov [ ebp + 0x8 ] esi
mov ebx edx
xor esi [ edi * 4 + rw-data ]
movzx edi dl
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
movzx edi bl
xor esi [ eax + 0x14 ]
mov ebx [ ebp - 0x14 ]
shr ebx 0x10
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
shr edx 0x10
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
movzx edi [ ebp - 0xc ]
mov [ ebp + 0x8 ] esi
movzx esi bl
mov ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ edi * 4 + rw-data ]
shr ebx 0x8
xor esi [ eax + 0x18 ]
movzx edx dl
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x18
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
movzx edi bl
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0x1c ]
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
movzx edx dl
mov edx [ edx * 4 + rw-data ]
xor edx [ edi * 4 + rw-data ]
mov edi [ ebp - 0x20 ]
shr edi 0x18
xor edx [ edi * 4 + rw-data ]
movzx edi cl
xor edx [ edi * 4 + rw-data ]
xor edx [ eax ]
mov [ ebp - 0x14 ] edx
mov edx esi
shr edx 0x10
movzx edx dl
mov edi [ ebp - 0x1c ]
mov edx [ edx * 4 + rw-data ]
shr edi 0x18
mov ebx ecx
xor edx [ edi * 4 + rw-data ]
shr ebx 0x8
movzx edi bl
mov ebx [ ebp - 0x20 ]
xor edx [ edi * 4 + rw-data ]
movzx edi [ ebp - 0x20 ]
shr ebx 0x8
xor edx [ edi * 4 + rw-data ]
shr esi 0x18
movzx edi bl
mov esi [ esi * 4 + rw-data ]
mov ebx ecx
xor esi [ edi * 4 + rw-data ]
xor edx [ eax + 0x4 ]
shr ebx 0x10
movzx edi bl
mov ebx [ ebp - 0x1c ]
xor esi [ edi * 4 + rw-data ]
movzx edi [ ebp - 0x1c ]
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
shr ecx 0x18
xor esi [ eax + 0x8 ]
mov [ ebp - 0xc ] esi
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx edi bl
mov ebx [ ebp - 0x14 ]
xor esi [ edi * 4 + rw-data ]
mov edi [ ebp - 0xc ]
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax 0x10
mov [ ebp - 0x8 ] esi
mov ecx esi
push 0x10
shr ecx 0x8
movzx esi cl
mov ecx edi
shr ecx 0x10
movzx edi cl
mov ecx [ esi * 4 + rw-data ]
mov esi edx
xor ecx [ edi * 4 + rw-data ]
mov edi [ ebp - 0xc ]
shr esi 0x18
shr edi 0x18
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
shr ebx 0x10
movzx esi bl
mov ebx [ ebp - 0x14 ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
shr ebx 0x8
movzx edi bl
mov ebx edx
xor esi [ edi * 4 + rw-data ]
movzx edi dl
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
movzx edi bl
xor esi [ eax + 0x4 ]
mov ebx [ ebp - 0x14 ]
shr ebx 0x10
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
shr edx 0x10
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
movzx edi bl
mov ebx [ ebp - 0xc ]
xor esi [ edi * 4 + rw-data ]
movzx edi bl
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
pop edi
movzx edx dl
xor esi [ eax + 0x8 ]
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x18
mov [ ebp + 0x8 ] edx
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
movzx edx dl
movzx esi bl
mov edx [ edx * 4 + rw-data ]
mov ebx [ ebp - 0x18 ]
xor edx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x20 ]
shr esi 0x18
shr ebx 0x10
xor edx [ esi * 4 + rw-data ]
movzx esi cl
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x1c ]
xor edx [ eax ]
shr ebx 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x20 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x18 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr ecx 0x18
mov [ ebp - 0xc ] esi
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x8
movzx ecx cl
movzx esi bl
mov ecx [ ecx * 4 + rw-data ]
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x10 ]
shr esi 0x18
shr ebx 0x10
xor ecx [ esi * 4 + rw-data ]
movzx esi dl
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0xc ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x10 ]
xor esi [ eax + 0x4 ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr edx 0x18
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
movzx edx dl
movzx esi bl
mov edx [ edx * 4 + rw-data ]
mov ebx [ ebp - 0x18 ]
xor edx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x20 ]
shr esi 0x18
shr ebx 0x10
xor edx [ esi * 4 + rw-data ]
movzx esi cl
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x1c ]
xor edx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x20 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x18 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
xor esi [ eax + 0x8 ]
mov [ ebp - 0xc ] esi
shr ebx 0x8
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
shr ecx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x8
movzx ecx cl
movzx esi bl
mov ecx [ ecx * 4 + rw-data ]
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x10 ]
shr esi 0x18
shr ebx 0x10
xor ecx [ esi * 4 + rw-data ]
movzx esi dl
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0xc ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x10 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr edx 0x18
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
mov ebx [ ebp - 0x1c ]
movzx edx dl
shr ebx 0x10
mov edx [ edx * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x18 ]
xor edx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x20 ]
shr esi 0x18
shr ebx 0x10
xor edx [ esi * 4 + rw-data ]
movzx esi cl
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x1c ]
xor edx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x20 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x18 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr ecx 0x18
mov [ ebp - 0xc ] esi
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x8
movzx ecx cl
movzx esi bl
mov ecx [ ecx * 4 + rw-data ]
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x10 ]
shr esi 0x18
xor ecx [ esi * 4 + rw-data ]
movzx esi dl
xor ecx [ esi * 4 + rw-data ]
xor ecx [ eax ]
shr ebx 0x10
movzx esi bl
mov ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x10 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr edx 0x18
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
movzx edx dl
movzx esi bl
mov edx [ edx * 4 + rw-data ]
mov ebx [ ebp - 0x18 ]
xor edx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x20 ]
shr esi 0x18
shr ebx 0x10
xor edx [ esi * 4 + rw-data ]
movzx esi cl
xor edx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x1c ]
xor edx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
xor esi [ eax + 0x4 ]
mov [ ebp - 0x10 ] esi
mov esi [ ebp - 0x18 ]
shr esi 0x18
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x8
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx ecx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x1c ]
shr ebx 0x8
xor esi [ eax + 0x8 ]
shr ecx 0x18
mov [ ebp - 0xc ] esi
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx ebx bl
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0xc ]
shr ebx 0x10
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax edi
mov ecx esi
mov [ ebp - 0x8 ] esi
shr ecx 0x8
movzx ecx cl
movzx esi bl
mov ecx [ ecx * 4 + rw-data ]
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
mov esi [ ebp - 0x10 ]
shr esi 0x18
shr ebx 0x10
xor ecx [ esi * 4 + rw-data ]
movzx esi dl
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0xc ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x18
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x8
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0x10 ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
mov ebx [ ebp - 0x10 ]
shr ebx 0x8
xor esi [ eax + 0x4 ]
movzx ebx bl
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
mov esi [ esi * 4 + rw-data ]
xor esi [ ebx * 4 + rw-data ]
mov ebx edx
shr ebx 0x10
mov [ ebp + 0x8 ] esi
movzx esi bl
movzx ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ ebx * 4 + rw-data ]
xor esi [ eax + 0x8 ]
mov [ ebp - 0x1c ] esi
mov ebx [ ebp - 0xc ]
shr ebx 0x8
movzx esi bl
mov ebx [ ebp - 0x10 ]
shr ebx 0x10
movzx ebx bl
mov [ ebp + 0x8 ] ebx
mov ebx [ esi * 4 + rw-data ]
mov esi [ ebp + 0x8 ]
shr edx 0x18
xor ebx [ esi * 4 + rw-data ]
xor ebx [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
xor ebx [ edx * 4 + rw-data ]
xor ebx [ eax + 0xc ]
sub eax edi
mov edx ebx
shr edx 0x8
movzx esi dl
mov edx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
shr edx 0x10
movzx edx dl
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr edx 0x18
xor esi [ edx * 4 + rw-data ]
movzx edx cl
xor esi [ edx * 4 + rw-data ]
mov edx ebx
shr edx 0x10
movzx edi dl
mov edx [ ebp - 0x1c ]
xor esi [ eax ]
mov edi [ edi * 4 + rw-data ]
shr edx 0x18
xor edi [ edx * 4 + rw-data ]
mov edx ecx
shr edx 0x8
movzx edx dl
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x20 ]
xor edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x20 ]
shr edx 0x8
xor edi [ eax + 0x4 ]
movzx edx dl
mov [ ebp - 0x10 ] edi
mov edi ebx
shr edi 0x18
mov edi [ edi * 4 + rw-data ]
xor edi [ edx * 4 + rw-data ]
mov edx ecx
shr edx 0x10
movzx edx dl
shr ecx 0x18
xor edi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x1c ]
xor edi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x1c ]
shr edx 0x8
xor edi [ eax + 0x8 ]
mov [ ebp - 0xc ] edi
movzx edi dl
mov edx [ ebp - 0x20 ]
shr edx 0x10
movzx edx dl
mov [ ebp + 0x8 ] edx
mov edx [ edi * 4 + rw-data ]
mov edi [ ebp + 0x8 ]
xor edx [ edi * 4 + rw-data ]
xor edx [ ecx * 4 + rw-data ]
movzx ecx bl
xor edx [ ecx * 4 + rw-data ]
mov ecx [ ebp - 0x10 ]
xor edx [ eax + 0xc ]
mov eax [ ebp + 0xc ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp - 0xc ]
mov [ eax ] esi
mov [ eax + 0x8 ] ecx
pop edi
pop esi
mov [ eax + 0xc ] edx
pop ebx
leave
retn 0x8
mov ecx esi
shr ecx 0x8
movzx esi cl
mov ecx edi
shr ecx 0x10
movzx edi cl
mov ecx [ esi * 4 + rw-data ]
mov esi edx
xor ecx [ edi * 4 + rw-data ]
mov edi [ ebp - 0xc ]
shr esi 0x18
shr edi 0x18
xor ecx [ esi * 4 + rw-data ]
movzx esi bl
mov ebx [ ebp - 0x8 ]
xor ecx [ esi * 4 + rw-data ]
shr ebx 0x10
movzx esi bl
mov ebx [ ebp - 0x14 ]
xor ecx [ eax ]
mov esi [ esi * 4 + rw-data ]
sub eax 0x10
xor esi [ edi * 4 + rw-data ]
shr ebx 0x8
movzx edi bl
mov [ ebp + 0x8 ] esi
mov ebx edx
xor esi [ edi * 4 + rw-data ]
movzx edi dl
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
movzx edi bl
xor esi [ eax + 0x14 ]
mov ebx [ ebp - 0x14 ]
shr ebx 0x10
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x8 ]
shr esi 0x18
shr edx 0x10
mov esi [ esi * 4 + rw-data ]
xor esi [ edi * 4 + rw-data ]
movzx edi [ ebp - 0xc ]
mov [ ebp + 0x8 ] esi
movzx esi bl
mov ebx [ ebp - 0xc ]
mov esi [ esi * 4 + rw-data ]
xor [ ebp + 0x8 ] esi
mov esi [ ebp + 0x8 ]
xor esi [ edi * 4 + rw-data ]
shr ebx 0x8
xor esi [ eax + 0x18 ]
movzx edx dl
mov [ ebp - 0x1c ] esi
movzx esi bl
mov ebx [ ebp - 0x1c ]
mov esi [ esi * 4 + rw-data ]
xor esi [ edx * 4 + rw-data ]
mov edx [ ebp - 0x14 ]
shr edx 0x18
shr ebx 0x10
xor esi [ edx * 4 + rw-data ]
movzx edx [ ebp - 0x8 ]
movzx edi bl
xor esi [ edx * 4 + rw-data ]
xor esi [ eax + 0x1c ]
mov edx esi
mov [ ebp - 0x18 ] esi
shr edx 0x8
movzx edx dl
mov edx [ edx * 4 + rw-data ]
xor edx [ edi * 4 + rw-data ]
mov edi [ ebp - 0x20 ]
shr edi 0x18
xor edx [ edi * 4 + rw-data ]
movzx edi cl
xor edx [ edi * 4 + rw-data ]
xor edx [ eax ]
mov [ ebp - 0x14 ] edx
mov edx esi
shr edx 0x10
movzx edx dl
mov edi [ ebp - 0x1c ]
mov edx [ edx * 4 + rw-data ]
shr edi 0x18
mov ebx ecx
xor edx [ edi * 4 + rw-data ]
shr ebx 0x8
movzx edi bl
mov ebx [ ebp - 0x20 ]
xor edx [ edi * 4 + rw-data ]
movzx edi [ ebp - 0x20 ]
shr ebx 0x8
xor edx [ edi * 4 + rw-data ]
shr esi 0x18
movzx edi bl
mov esi [ esi * 4 + rw-data ]
mov ebx ecx
xor esi [ edi * 4 + rw-data ]
xor edx [ eax + 0x4 ]
shr ebx 0x10
movzx edi bl
mov ebx [ ebp - 0x1c ]
xor esi [ edi * 4 + rw-data ]
movzx edi [ ebp - 0x1c ]
shr ebx 0x8
xor esi [ edi * 4 + rw-data ]
shr ecx 0x18
xor esi [ eax + 0x8 ]
mov [ ebp - 0xc ] esi
movzx esi bl
mov ebx [ ebp - 0x20 ]
mov esi [ esi * 4 + rw-data ]
shr ebx 0x10
movzx edi bl
mov ebx [ ebp - 0x14 ]
xor esi [ edi * 4 + rw-data ]
mov edi [ ebp - 0xc ]
xor esi [ ecx * 4 + rw-data ]
movzx ecx [ ebp - 0x18 ]
xor esi [ ecx * 4 + rw-data ]
xor esi [ eax + 0xc ]
sub eax 0x10
mov [ ebp - 0x8 ] esi
sub_4047b9
mov eax sub_405319
call sub_404f50
push ecx
push 0x1e0
call Ordinal_MFC42_823
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_404806
sub_404806
mov eax sub_40533a
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
call Ordinal_MFC42_366
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0xc0 ]
call Ordinal_MFC42_529
lea ecx [ esi + 0x140 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_554
mov ecx [ ebp - 0xc ]
mov [ esi ] r--data
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_40486b
mov eax sub_40535a
call sub_404f50
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x140 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_807
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0xc0 ]
call Ordinal_MFC42_796
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call Ordinal_MFC42_674
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_4048bb
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
mov ebx ecx
push [ ebp + 0x8 ]
call Ordinal_MFC42_4457
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
push 0xe800
xor eax eax
sub esp 0x10
lea esi [ ebp - 0x10 ]
mov edi esp
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] eax
push 0x50402834
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x800
lea ecx [ ebx + 0x140 ]
push ebx
movsd [ edi ] [ esi ]
call Ordinal_MFC42_6625
test eax eax
je r-xdata
lea edi [ ebx + 0x140 ]
push 0x80
mov ecx edi
call Ordinal_MFC42_4163
test eax eax
je r-xdata
lea esi [ ebx + 0xc0 ]
push 0xe801
push 0x50008200
push ebx
mov ecx esi
call Ordinal_MFC42_2117
test eax eax
je r-xdata
push 0x4
push rwxdata
mov ecx esi
call Ordinal_MFC42_6000
test eax eax
je r-xdata
mov esi 0xf000
mov ecx edi
push esi
call Ordinal_MFC42_2626
xor edi edi
lea ecx [ ebx + 0x140 ]
push edi
call Ordinal_MFC42_6215
push edi
lea ecx [ ebx + 0xc0 ]
call Ordinal_MFC42_6215
push esi
mov ecx ebx
call Ordinal_MFC42_2627
push edi
lea eax [ ebx + 0x140 ]
push edi
push eax
mov ecx ebx
call Ordinal_MFC42_2494
push edi
mov ecx ebx
call sub_404a27
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_4049ad
push esi
mov esi [ esp + 0x8 ]
push esi
call Ordinal_MFC42_5252
test eax eax
je r-xdata
pop esi
retn 0x4
test [ rw-data ] 0x1
push edi
mov edi [ GetSystemMetrics@IAT ]
jne r-xdata
test [ rw-data ] 0x2
jne r-xdata
or [ rw-data ] 0x1
push 0x0
call edi
mov [ rw-data ] eax
mov eax [ rw-data ]
push 0x3
cdq
pop ecx
idiv ecx
push 0x9
pop ecx
push 0x1
mov [ esi + 0x1c ] eax
mov eax [ rw-data ]
cdq
idiv ecx
mov [ esi + 0x14 ] 0x11f
mov [ esi + 0x10 ] 0x264
mov [ esi + 0x18 ] eax
pop eax
pop edi
or [ rw-data ] 0x2
push 0x1
call edi
mov [ rw-data ] eax
sub_404a27
mov eax [ rw-data ]
push esi
test eax eax
mov esi ecx
jne r-xdata
cmp [ esp + 0x8 ] 0x0
je r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
test esi esi
jne r-xdata
push eax
call [ GetMenu@IAT ]
mov [ rw-data ] eax
mov eax [ esi + 0x20 ]
mov eax [ esi + 0x20 ]
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x20 ]
xor ecx ecx
jmp r-xdata
push 0x0
push eax
call [ SetMenu@IAT ]
push 0x20
push 0x0
push 0xc00000
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
push eax
push ecx
call [ SetMenu@IAT ]
push 0x20
push 0xc00000
push 0x0
jmp r-xdata
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_405139
cmp [ rwxdata ] ebx
jne r-xdata
call sub_405124
push rwxdata
push rwxdata
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_405136
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_405146
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_40515e
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne r-xdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401027
push esi
mov esi ecx
call sub_401043
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_401043
mov [ ecx ] r--data
retn
sub_401238
call sub_401242
jmp sub_401252
sub_401242
push rwxdata
mov ecx rw-data
call Ordinal_MFC42_539
retn
sub_401252
push sub_40125e
call sub_404f9b
pop ecx
retn
sub_40125e
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp Ordinal_MFC42_800
sub_401279
push edi
mov edx ecx
push 0x8
xor eax eax
lea edi [ edx + 0x4 ]
pop ecx
mov [ edx ] r--data
[ edi ]
and [ edx + 0x24 ] ax
mov eax edx
pop edi
retn
sub_401294
push esi
mov esi ecx
call sub_4012b0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4012b0
mov [ ecx ] r--data
retn
sub_4012b7
retn 0x10
sub_401638
push edi
push 0x8
lea edi [ ecx + 0x4 ]
pop ecx
xor eax eax
[ edi ]
pop edi
retn
sub_401645
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_40164b
mov eax r--data
retn
sub_401651
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_401665
push esi
mov esi ecx
call sub_401681
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_401681
jmp Ordinal_MFC42_815
sub_401686
call sub_401690
jmp sub_40169a
sub_401690
mov ecx rw-data
jmp sub_401651
sub_40169a
push sub_4016a6
call sub_404f9b
pop ecx
retn
sub_4016a6
mov ecx rw-data
jmp sub_401681
sub_4017af
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_4017c5
push esi
mov esi ecx
call sub_4017e1
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4017e1
jmp Ordinal_MFC42_641
sub_4017e6
retn 0x4
sub_4017e9
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_4017ef
mov eax r--data
retn
sub_40182e
retn 0x4
sub_401831
push [ esp + 0x4 ]
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_40183e
retn
sub_40183f
push 0x0
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_40184b
push 0x1
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_401889
mov eax [ Ordinal_MFC42_1825@IAT ]
retn
sub_40188f
mov eax r--data
retn
sub_401895
mov eax [ Ordinal_MFC42_4238@IAT ]
retn
sub_40189b
mov eax r--data
retn
sub_4018a1
push esi
mov esi ecx
call Ordinal_MFC42_338
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_4018b3
push esi
mov esi ecx
call sub_4018cf
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4018cf
mov [ ecx ] r--data
jmp Ordinal_MFC42_652
sub_4018da
call Ordinal_MFC42_4823
neg eax
sbb eax eax
neg eax
retn
sub_4018e6
mov eax [ ecx + 0x48 ]
retn
sub_4018ea
mov eax [ esp + 0x4 ]
mov [ ecx + 0x48 ] eax
retn 0x4
sub_4018f4
jmp r-xdata
retn
sub_4018fa
call sub_401904
jmp sub_401927
sub_401904
mov ecx rw-data
jmp sub_40190e
sub_40190e
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_401927
push sub_401933
call sub_404f9b
pop ecx
retn
sub_401933
mov ecx rw-data
jmp j_sub_4012b0
sub_40193d
call sub_401947
jmp sub_40196a
sub_401947
mov ecx rw-data
jmp sub_401951
sub_401951
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x1
mov eax esi
pop esi
retn
sub_40196a
push sub_401976
call sub_404f9b
pop ecx
retn
sub_401976
mov ecx rw-data
jmp j_sub_4012b0
sub_401980
call sub_40198a
jmp sub_4019ad
sub_40198a
mov ecx rw-data
jmp sub_401994
sub_401994
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_4019ad
push sub_4019b9
call sub_404f9b
pop ecx
retn
sub_4019b9
mov ecx rw-data
jmp j_sub_4012b0
sub_4019c3
call sub_4019cd
jmp sub_4019f0
sub_4019cd
mov ecx rw-data
jmp sub_4019d7
sub_4019d7
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_4019f0
push sub_4019fc
call sub_404f9b
pop ecx
retn
sub_4019fc
mov ecx rw-data
jmp j_sub_4012b0
sub_401a06
call sub_401a10
jmp sub_401a33
sub_401a10
mov ecx rw-data
jmp sub_401a1a
sub_401a1a
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_401a33
push sub_401a3f
call sub_404f9b
pop ecx
retn
sub_401a3f
mov ecx rw-data
jmp j_sub_4012b0
sub_401a49
call sub_401a53
jmp sub_401a76
sub_401a53
mov ecx rw-data
jmp sub_401a5d
sub_401a5d
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_401a76
push sub_401a82
call sub_404f9b
pop ecx
retn
sub_401a82
mov ecx rw-data
jmp j_sub_4012b0
sub_401a8c
call sub_401a96
jmp sub_401ada
sub_401a96
mov ecx rw-data
jmp sub_401aa0
sub_401aa0
push esi
mov esi ecx
call sub_401279
mov [ esi ] r--data
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_401ab9
push esi
mov esi ecx
call j_sub_4012b0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
j_sub_4012b0
jmp sub_4012b0
sub_401ada
push sub_401ae6
call sub_404f9b
pop ecx
retn
sub_401ae6
mov ecx rw-data
jmp j_sub_4012b0
sub_401b22
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_401b28
mov eax r--data
retn
sub_401b2e
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_401b34
mov eax r--data
retn
sub_401be6
push esi
mov esi ecx
call sub_401c02
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_401c02
mov [ ecx ] r--data
jmp Ordinal_MFC42_813
sub_401c0d
push [ esp + 0x4 ]
call Ordinal_MFC42_5260
retn 0x4
sub_401d6e
push [ esp + 0x4 ]
call Ordinal_MFC42_2535
retn 0x4
sub_401d7a
retn 0x8
sub_4020b8
push 0x1
pop eax
retn 0x4
sub_4020be
call sub_401c19
push 0x0
call [ exit@IAT ]
sub_4024e0
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4024fd
mov [ ecx ] r--data
retn
sub_402504
push esi
mov esi ecx
call sub_402520
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_402553
push esi
mov esi ecx
call sub_40256f
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4025a2
push esi
mov esi ecx
call sub_4025be
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_4025f1
push esi
mov esi ecx
call sub_40260d
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_402640
mov eax ecx
mov [ eax ] r--data
retn
sub_402649
push esi
mov esi ecx
call sub_402665
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_402665
mov [ ecx ] r--data
retn
sub_4047ee
mov eax [ Ordinal_MFC42_1842@IAT ]
retn
sub_4047f4
mov eax r--data
retn
sub_4047fa
mov eax [ Ordinal_MFC42_4242@IAT ]
retn
sub_404800
mov eax r--data
retn
sub_40484f
push esi
mov esi ecx
call sub_40486b
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_539
jmp [ Ordinal_MFC42_539@IAT ]
Ordinal_MFC42_800
jmp [ Ordinal_MFC42_800@IAT ]
Ordinal_MFC42_4615
jmp [ Ordinal_MFC42_4615@IAT ]
Ordinal_MFC42_4612
jmp [ Ordinal_MFC42_4612@IAT ]
Ordinal_MFC42_4610
jmp [ Ordinal_MFC42_4610@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_617
jmp [ Ordinal_MFC42_617@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_5301
jmp [ Ordinal_MFC42_5301@IAT ]
Ordinal_MFC42_5214
jmp [ Ordinal_MFC42_5214@IAT ]
Ordinal_MFC42_296
jmp [ Ordinal_MFC42_296@IAT ]
Ordinal_MFC42_986
jmp [ Ordinal_MFC42_986@IAT ]
Ordinal_MFC42_520
jmp [ Ordinal_MFC42_520@IAT ]
Ordinal_MFC42_4159
jmp [ Ordinal_MFC42_4159@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_4696
jmp [ Ordinal_MFC42_4696@IAT ]
Ordinal_MFC42_3058
jmp [ Ordinal_MFC42_3058@IAT ]
Ordinal_MFC42_3065
jmp [ Ordinal_MFC42_3065@IAT ]
Ordinal_MFC42_6336
jmp [ Ordinal_MFC42_6336@IAT ]
Ordinal_MFC42_2510
jmp [ Ordinal_MFC42_2510@IAT ]
Ordinal_MFC42_2542
jmp [ Ordinal_MFC42_2542@IAT ]
Ordinal_MFC42_5243
jmp [ Ordinal_MFC42_5243@IAT ]
Ordinal_MFC42_5740
jmp [ Ordinal_MFC42_5740@IAT ]
Ordinal_MFC42_1746
jmp [ Ordinal_MFC42_1746@IAT ]
Ordinal_MFC42_5577
jmp [ Ordinal_MFC42_5577@IAT ]
Ordinal_MFC42_3172
jmp [ Ordinal_MFC42_3172@IAT ]
Ordinal_MFC42_5653
jmp [ Ordinal_MFC42_5653@IAT ]
Ordinal_MFC42_4420
jmp [ Ordinal_MFC42_4420@IAT ]
Ordinal_MFC42_4953
jmp [ Ordinal_MFC42_4953@IAT ]
Ordinal_MFC42_4858
jmp [ Ordinal_MFC42_4858@IAT ]
Ordinal_MFC42_2399
jmp [ Ordinal_MFC42_2399@IAT ]
Ordinal_MFC42_4387
jmp [ Ordinal_MFC42_4387@IAT ]
Ordinal_MFC42_3454
jmp [ Ordinal_MFC42_3454@IAT ]
Ordinal_MFC42_3198
jmp [ Ordinal_MFC42_3198@IAT ]
Ordinal_MFC42_6080
jmp [ Ordinal_MFC42_6080@IAT ]
Ordinal_MFC42_6175
jmp [ Ordinal_MFC42_6175@IAT ]
Ordinal_MFC42_4623
jmp [ Ordinal_MFC42_4623@IAT ]
Ordinal_MFC42_4426
jmp [ Ordinal_MFC42_4426@IAT ]
Ordinal_MFC42_338
jmp [ Ordinal_MFC42_338@IAT ]
Ordinal_MFC42_652
jmp [ Ordinal_MFC42_652@IAT ]
Ordinal_MFC42_4823
jmp [ Ordinal_MFC42_4823@IAT ]
Ordinal_MFC42_4614
jmp [ Ordinal_MFC42_4614@IAT ]
Ordinal_MFC42_4613
jmp [ Ordinal_MFC42_4613@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_2535
jmp [ Ordinal_MFC42_2535@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_4464
jmp [ Ordinal_MFC42_4464@IAT ]
Ordinal_MFC42_3573
jmp [ Ordinal_MFC42_3573@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_5787
jmp [ Ordinal_MFC42_5787@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2723
jmp [ Ordinal_MFC42_2723@IAT ]
Ordinal_MFC42_2390
jmp [ Ordinal_MFC42_2390@IAT ]
Ordinal_MFC42_3059
jmp [ Ordinal_MFC42_3059@IAT ]
Ordinal_MFC42_5100
jmp [ Ordinal_MFC42_5100@IAT ]
Ordinal_MFC42_5103
jmp [ Ordinal_MFC42_5103@IAT ]
Ordinal_MFC42_4467
jmp [ Ordinal_MFC42_4467@IAT ]
Ordinal_MFC42_4303
jmp [ Ordinal_MFC42_4303@IAT ]
Ordinal_MFC42_3350
jmp [ Ordinal_MFC42_3350@IAT ]
Ordinal_MFC42_5012
jmp [ Ordinal_MFC42_5012@IAT ]
Ordinal_MFC42_975
jmp [ Ordinal_MFC42_975@IAT ]
Ordinal_MFC42_5472
jmp [ Ordinal_MFC42_5472@IAT ]
Ordinal_MFC42_3403
jmp [ Ordinal_MFC42_3403@IAT ]
Ordinal_MFC42_2879
jmp [ Ordinal_MFC42_2879@IAT ]
Ordinal_MFC42_2878
jmp [ Ordinal_MFC42_2878@IAT ]
Ordinal_MFC42_4151
jmp [ Ordinal_MFC42_4151@IAT ]
Ordinal_MFC42_4077
jmp [ Ordinal_MFC42_4077@IAT ]
Ordinal_MFC42_5237
jmp [ Ordinal_MFC42_5237@IAT ]
Ordinal_MFC42_5282
jmp [ Ordinal_MFC42_5282@IAT ]
Ordinal_MFC42_2649
jmp [ Ordinal_MFC42_2649@IAT ]
Ordinal_MFC42_1665
jmp [ Ordinal_MFC42_1665@IAT ]
Ordinal_MFC42_4436
jmp [ Ordinal_MFC42_4436@IAT ]
Ordinal_MFC42_4427
jmp [ Ordinal_MFC42_4427@IAT ]
Ordinal_MFC42_796
jmp [ Ordinal_MFC42_796@IAT ]
Ordinal_MFC42_674
jmp [ Ordinal_MFC42_674@IAT ]
Ordinal_MFC42_554
jmp [ Ordinal_MFC42_554@IAT ]
Ordinal_MFC42_529
jmp [ Ordinal_MFC42_529@IAT ]
Ordinal_MFC42_366
jmp [ Ordinal_MFC42_366@IAT ]
Ordinal_MFC42_807
jmp [ Ordinal_MFC42_807@IAT ]
Ordinal_MFC42_2494
jmp [ Ordinal_MFC42_2494@IAT ]
Ordinal_MFC42_2627
jmp [ Ordinal_MFC42_2627@IAT ]
Ordinal_MFC42_2626
jmp [ Ordinal_MFC42_2626@IAT ]
Ordinal_MFC42_6000
jmp [ Ordinal_MFC42_6000@IAT ]
Ordinal_MFC42_2117
jmp [ Ordinal_MFC42_2117@IAT ]
Ordinal_MFC42_4163
jmp [ Ordinal_MFC42_4163@IAT ]
Ordinal_MFC42_6625
jmp [ Ordinal_MFC42_6625@IAT ]
Ordinal_MFC42_4457
jmp [ Ordinal_MFC42_4457@IAT ]
Ordinal_MFC42_5252
jmp [ Ordinal_MFC42_5252@IAT ]
Ordinal_MFC42_4284
jmp [ Ordinal_MFC42_4284@IAT ]
memset
jmp [ memset@IAT ]
memcpy
jmp [ memcpy@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_404f50
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
sub_404f6f
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_404f9b
push [ esp + 0x4 ]
call sub_404f6f
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
strlen
jmp [ strlen@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_405124
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_405136
xor eax eax
retn
sub_405139
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_405146
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_40518c
jmp sub_40518c
sub_40518c
push 0x600
push 0x0
call sub_40515e
mov [ rw-data ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
sub_4051ac
lea ecx [ ebp - 0x218 ]
jmp sub_402665
sub_4051b7
mov eax r--data
jmp __CxxFrameHandler
sub_4051c4
lea ecx [ ebp - 0x214 ]
jmp sub_402665
sub_4051cf
mov eax r--data
jmp __CxxFrameHandler
sub_4051dc
push [ ebp - 0x10 ]
call sub_401831
retn
sub_4051e5
lea ecx [ ebp - 0x34 ]
jmp Ordinal_MFC42_617
sub_4051ed
mov eax r--data
jmp __CxxFrameHandler
sub_4051f8
lea ecx [ ebp - 0x6c ]
jmp sub_4017e1
sub_405200
mov eax r--data
jmp __CxxFrameHandler
sub_40520c
push [ ebp - 0x10 ]
call sub_401831
retn
sub_405215
mov eax r--data
jmp __CxxFrameHandler
sub_405220
push [ ebp - 0x10 ]
call sub_401831
retn
sub_405229
mov eax r--data
jmp __CxxFrameHandler
sub_405234
lea ecx [ ebp - 0x128 ]
jmp sub_401043
sub_40523f
mov eax r--data
jmp __CxxFrameHandler
sub_40524c
lea ecx [ ebp - 0x30 ]
jmp sub_40260d
sub_405254
lea ecx [ ebp - 0x58 ]
jmp Ordinal_MFC42_640
sub_40525c
lea ecx [ ebp - 0x28 ]
jmp sub_40256f
sub_405264
lea ecx [ ebp - 0x20 ]
jmp sub_4025be
sub_40526c
lea ecx [ ebp - 0x48 ]
jmp sub_4025be
sub_405274
lea ecx [ ebp - 0x40 ]
jmp sub_4025be
sub_40527c
lea ecx [ ebp - 0x38 ]
jmp sub_4025be
sub_405284
lea ecx [ ebp - 0x38 ]
jmp sub_4024fd
sub_40528c
lea ecx [ ebp - 0x40 ]
jmp sub_4024fd
sub_405294
lea ecx [ ebp - 0x48 ]
jmp sub_4024fd
sub_40529c
lea ecx [ ebp - 0x20 ]
jmp sub_4024fd
sub_4052a4
lea ecx [ ebp - 0x28 ]
jmp sub_4024fd
sub_4052ac
lea ecx [ ebp - 0x30 ]
jmp sub_4024fd
sub_4052b4
mov eax r--data
jmp __CxxFrameHandler
sub_4052c0
mov ecx [ ebp - 0x10 ]
jmp sub_4024fd
sub_4052c8
mov eax r--data
jmp __CxxFrameHandler
sub_4052d4
mov ecx [ ebp - 0x10 ]
jmp sub_4024fd
sub_4052dc
mov eax r--data
jmp __CxxFrameHandler
sub_4052e8
mov ecx [ ebp - 0x10 ]
jmp sub_4024fd
sub_4052f0
mov eax r--data
jmp __CxxFrameHandler
sub_4052fc
mov ecx [ ebp - 0x10 ]
jmp sub_4024fd
sub_405304
mov eax r--data
jmp __CxxFrameHandler
sub_405310
push [ ebp - 0x10 ]
call sub_401831
retn
sub_405319
mov eax r--data
jmp __CxxFrameHandler
sub_405324
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_40532c
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_40533a
mov eax r--data
jmp __CxxFrameHandler
sub_405344
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_40534c
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_40535a
mov eax r--data
jmp __CxxFrameHandler
