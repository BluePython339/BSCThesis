sub_10001010
push ebp
mov ebp esp
push 0xffffffff
push sub_10021d01
mov eax [ fs : 0x0 ]
push eax
mov eax 0x443c
call sub_100125b0
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x4448 ] ecx
mov [ ebp - 0x4448 ] rw-data
push 0x0
mov ecx [ ebp - 0x4448 ]
call sub_100022c7
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x4448 ]
mov [ eax ] r--data
mov [ ebp - 0x441c ] 0x1a22f51
push 0x3ffc
push 0x0
lea ecx [ ebp - 0x4418 ]
push ecx
call sub_100105c0
add esp 0xc
push 0x104
lea edx [ ebp - 0x41c ]
push edx
push r--data
call [ ExpandEnvironmentStringsA@IAT ]
lea ecx [ ebp - 0x4434 ]
call sub_10002baa
mov [ ebp - 0x4 ] 0x1
lea ecx [ ebp - 0x4424 ]
call sub_10001560
mov [ ebp - 0x4 ] 0x2
lea eax [ ebp - 0x41c ]
push eax
push r--data
lea ecx [ ebp - 0x4424 ]
push ecx
call sub_100014b0
add esp 0xc
push 0x0
push 0x1002
lea ecx [ ebp - 0x4424 ]
call sub_100012a0
push eax
lea ecx [ ebp - 0x4434 ]
call sub_10003020
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x4420 ] eax
push 0x32000
push rw-data
lea ecx [ ebp - 0x4434 ]
call sub_100028b6
lea ecx [ ebp - 0x4434 ]
call sub_10002b44
pushad
lea edi [ ebp - 0x441c ]
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
lea ecx [ ebp - 0x4424 ]
call sub_100014d0
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x4434 ]
call sub_10002cb2
jmp r-xdata
call sub_1000115c
sub esp 0x1c
popad
push 0x0
lea eax [ ebp - 0x41c ]
push eax
mov eax [ ebp - 0x441c ]
call eax
mov [ ebp - 0x4 ] 0x1
lea ecx [ ebp - 0x4424 ]
call sub_100014d0
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x4434 ]
call sub_10002cb2
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x4448 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000115c
xor eax eax
mov eax [ fs : 0x30 ]
mov eax [ eax + 0xc ]
mov eax [ eax + 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov eax [ eax + 0x10 ]
mov ebp eax
mov esi edi
push 0x1
pop ecx
call sub_100011a6
loop r-xdata
mov ebp esi
popad
jmp r-xdata
sub esp 0x1c
popad
push 0x0
lea eax [ ebp - 0x41c ]
push eax
mov eax [ ebp - 0x441c ]
call eax
mov [ ebp - 0x4 ] 0x1
lea ecx [ ebp - 0x4424 ]
call sub_100014d0
mov [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x4434 ]
call sub_10002cb2
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x4448 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10001184
cmp [ eax ] 0xe8
je r-xdata
cmp [ eax + 0x5 ] 0x90909090
je r-xdata
cmp [ eax ] 0xe9
je r-xdata
jmp eax
mov edi edi
push ebp
mov ebp esp
lea eax [ eax + 0x5 ]
cmp [ eax ] 0xeb
jne r-xdata
sub_100011a6
push ecx
push esi
mov esi [ ebp + 0x3c ]
mov esi [ esi + ebp + 0x78 ]
add esi ebp
push esi
mov esi [ esi + 0x20 ]
add esi ebp
xor ecx ecx
dec ecx
cmp ebx [ edi ]
jne r-xdata
ror ebx 0x7
add ebx edx
inc eax
jmp r-xdata
inc ecx
lodsd [ esi ]
add eax ebp
xor ebx ebx
pop esi
mov ebx [ esi + 0x24 ]
add ebx ebp
mov cx [ ebx + ecx * 2 ]
mov ebx [ esi + 0x1c ]
add ebx ebp
mov eax [ ebx + ecx * 4 ]
add eax ebp
stosd [ edi ]
pop esi
pop ecx
retn
movsx edx [ eax ]
cmp dl dh
je r-xdata
sub_100012b0
push ecx
push ebx
push ebp
push esi
mov esi [ ecx ]
mov ebx [ esi - 0xc ]
sub esi 0x10
mov [ esp + 0xc ] ecx
mov ecx [ esi ]
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
push edi
call edx
mov edx [ eax ]
mov ebp [ esp + 0x18 ]
push 0x1
mov ecx eax
mov eax [ edx ]
push ebp
call eax
mov edi eax
test edi edi
jne r-xdata
cmp ebx ebp
jge r-xdata
call sub_10001330
lea eax [ ebp + 0x1 ]
push eax
lea ecx [ esi + 0x10 ]
push ecx
push eax
lea ebp [ edi + 0x10 ]
push ebp
call sub_1000f51f
add esp 0x10
mov [ edi + 0x4 ] ebx
lea edx [ esi + 0xc ]
or eax 0xffffffff
[ edx ] eax
dec eax
test eax eax
jg r-xdata
mov ebp ebx
mov ecx [ esp + 0x10 ]
pop edi
pop esi
mov [ ecx ] ebp
pop ebp
pop ebx
pop ecx
retn 0x4
mov ecx [ esi ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push esi
call eax
sub_10001340
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax [ esi ]
mov ecx [ eax - 0x10 ]
sub eax 0x10
cmp [ eax + 0x8 ] edx
jge r-xdata
call sub_10001330
test edx edx
jle r-xdata
push edi
mov edi [ ecx ]
push 0x1
push edx
push eax
mov eax [ edi + 0x8 ]
call eax
pop edi
test eax eax
jne r-xdata
add eax 0x10
mov [ esi ] eax
pop esi
retn 0x4
sub_10001380
mov eax [ ecx ]
mov edx [ esp + 0x4 ]
sub eax 0x10
push esi
mov esi [ eax + 0x4 ]
cmp esi edx
jle r-xdata
cmp [ eax + 0xc ] 0x1
pop esi
jle r-xdata
mov edx esi
mov eax [ eax + 0x8 ]
cmp eax edx
jge r-xdata
mov [ esp + 0x4 ] edx
jmp sub_100012b0
retn 0x4
cmp eax 0x400
jle r-xdata
add eax eax
add eax 0x400
jmp r-xdata
mov [ esp + 0x4 ] eax
jmp sub_10001340
mov eax edx
cmp eax edx
jge r-xdata
sub_100013d0
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax - 0x8 ]
sub eax 0x10
mov ecx 0x1
sub ecx [ eax + 0xc ]
mov eax [ esp + 0x8 ]
sub edx eax
or ecx edx
jge r-xdata
mov eax [ esi ]
pop esi
retn 0x4
push eax
mov ecx esi
call sub_10001380
sub_10001430
push ebx
mov ebx [ esp + 0x8 ]
push edi
mov edi ecx
test ebx ebx
jne r-xdata
push ebp
mov ebp [ esp + 0x14 ]
push esi
push ebp
push ebx
call sub_1000f5f3
mov esi eax
mov eax [ edi ]
mov edx [ eax - 0x8 ]
sub eax 0x10
mov ecx 0x1
sub ecx [ eax + 0xc ]
sub edx esi
add esp 0x8
or ecx edx
jge r-xdata
push 0x80070057
call sub_100014f0
mov ecx [ edi ]
push ebp
push ebx
lea eax [ esi + 0x1 ]
push eax
push ecx
call sub_1000f3fb
add esp 0x10
test esi esi
jl r-xdata
push esi
mov ecx edi
call sub_10001380
push 0x80070057
call sub_100014f0
mov eax [ edi ]
cmp esi [ eax - 0x8 ]
jg r-xdata
mov [ eax - 0xc ] esi
mov edx [ edi ]
mov [ esi + edx ] 0x0
pop esi
pop ebp
pop edi
pop ebx
retn 0x8
sub_100014d0
mov eax [ ecx ]
sub eax 0x10
lea ecx [ eax + 0xc ]
or edx 0xffffffff
[ ecx ] edx
dec edx
test edx edx
jg r-xdata
retn
mov ecx [ eax ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x4 ]
call eax
sub_10001510
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
test ecx ecx
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
add eax 0x10
mov [ esi ] eax
mov eax esi
pop esi
retn 0x4
push 0x80004005
call sub_100014f0
sub_10001540
lea eax [ ecx + 0xc ]
or edx 0xffffffff
[ eax ] edx
dec edx
test edx edx
jg r-xdata
retn
mov eax [ ecx ]
mov edx [ eax ]
push ecx
mov ecx eax
mov eax [ edx + 0x4 ]
call eax
sub_10001560
push esi
mov esi ecx
call sub_1000320a
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
add eax 0x10
mov [ esi ] eax
mov eax esi
pop esi
retn
push 0x80004005
call sub_100014f0
sub_100015a1
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp + 0xc ] ebx
call sub_10005454
push ebx
push r--data
push ebx
push [ ebp + 0x8 ]
mov esi eax
mov edi [ esi + 0x8 ]
call sub_10006aec
test eax eax
je r-xdata
cmp [ ebp + 0xc ] 0x3
jne r-xdata
call sub_10005a0c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_100068b0
jmp r-xdata
call sub_10005a0c
mov ebx [ eax + 0x4 ]
test ebx ebx
je r-xdata
xor eax eax
inc eax
call sub_1000631f
push 0xffffffff
call sub_10006537
push [ ebp + 0x8 ]
call sub_10003eff
call sub_1000631f
push 0xffffffff
call sub_10006537
call sub_100068b0
push 0x1
push [ ebp + 0x8 ]
call sub_10006162
jmp r-xdata
mov edx [ eax ]
mov ecx eax
call [ edx + 0x68 ]
mov eax [ ebp + 0xc ]
mov [ esi + 0x8 ] edi
pop edi
pop esi
pop ebx
jmp r-xdata
push [ ebp + 0x8 ]
mov [ esi + 0x8 ] edi
call sub_10005bed
mov [ ebp + 0xc ] 0x1
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x50 ]
test eax eax
jne r-xdata
pop ebp
retn 0xc
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x68 ]
sub_1000166a
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
pop ebp
jmp sub_100015a1
cmp [ ebp + 0xc ] 0x1
jne r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
call sub_10005a0c
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x8 ] ecx
xor eax eax
inc eax
pop ebp
retn 0xc
sub_100016b8
mov edi edi
push ebp
mov ebp esp
push esi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000fa3b
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
sub_1000170c
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax ecx
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
mov [ eax ] ecx
mov [ eax + 0x4 ] ebx
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] bl
jne r-xdata
pop ebx
leave
retn 0x4
push esi
push edi
push r--data
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
pop edi
mov [ rw-data ] eax
pop esi
cmp [ rw-data ] ebx
je r-xdata
call sub_10003725
cmp [ rw-data ] ebx
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp eax ebx
jne r-xdata
cmp eax ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
sub_100017c3
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
push esi
mov esi ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov al 0x1
jmp r-xdata
cmp [ esi ] 0xffffffff
jne r-xdata
xor al al
jmp r-xdata
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
call eax
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov [ esi ] eax
mov al cl
sub_100017fd
mov edx [ rw-data ]
test edx edx
jne r-xdata
push esi
mov esi [ ecx ]
cmp esi 0xffffffff
je r-xdata
mov al 0x1
retn
xor al al
pop esi
retn
lea eax [ ecx + 0x4 ]
cmp [ eax ] 0x0
je r-xdata
push eax
push esi
call edx
dec eax
neg eax
sbb eax eax
inc eax
pop esi
retn
sub_1000182a
xor edx edx
cmp [ rw-data ] edx
je r-xdata
mov al 0x1
retn
mov eax [ ecx + 0x4 ]
cmp eax edx
je r-xdata
push eax
push edx
mov [ ecx + 0x4 ] edx
call [ rw-data ]
dec eax
neg eax
sbb eax eax
inc eax
retn
sub_10001850
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push edi
xor edi edi
mov [ ecx + 0xa0 ] edi
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x14 ] 0x4
mov [ ebp - 0xc ] edi
mov ebx rw-data
cmp [ rw-data ] edi
je r-xdata
xor eax eax
pop edi
inc eax
pop ebx
leave
retn
push esi
add ebx 0x8
cmp [ ebx ] edi
jne r-xdata
mov esi [ ebx + 0x4 ]
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push edi
push [ ebx ]
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
pop esi
mov eax [ esi ]
cmp eax edi
jne r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
lea ecx [ ebp - 0xc ]
push ecx
push edi
push eax
push [ ebp - 0x4 ]
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x14 ] 0x4
mov [ ebp - 0xc ] edi
add esi 0x8
cmp [ ebp - 0xc ] 0x4
jne r-xdata
mov ecx [ esi + 0x4 ]
mov eax [ ebp - 0x10 ]
cmp [ ebp - 0x8 ] edi
je r-xdata
not ecx
and [ eax + 0xa0 ] ecx
or [ eax + 0xa0 ] ecx
jmp r-xdata
sub_10001915
mov eax [ rw-data ]
xor edx edx
push esi
mov esi ecx
cmp eax edx
je r-xdata
mov ecx [ esi + 0x58 ]
cmp ecx edx
je r-xdata
cmp [ esi + 0x58 ] edx
jne r-xdata
mov [ rw-data ] edx
mov eax [ ecx ]
push edx
call [ eax + 0xc ]
jmp r-xdata
mov [ rw-data ] edx
mov [ esi + 0x58 ] eax
mov eax [ esi ]
mov ecx esi
call [ eax + 0xb4 ]
xor eax eax
inc eax
pop esi
retn
sub_10001955
mov edi edi
push esi
mov esi ecx
lea eax [ esi + 0x88 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ esi + 0x94 ]
test eax eax
je r-xdata
mov eax [ eax ]
mov edx [ eax ]
mov ecx eax
call [ edx + 0x14 ]
pop esi
retn
push eax
push r--data
push r--data
mov ecx esi
call sub_10006c4e
sub_1000198c
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x8c ]
test eax eax
je r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
mov eax [ eax + 0x14 ]
cmp eax 0x6
je r-xdata
mov eax [ esi + 0x9c ]
test eax eax
je r-xdata
mov ecx esi
call sub_10001955
cmp eax 0x5
je r-xdata
mov eax [ esi + 0x7c ]
test eax eax
je r-xdata
call eax
xor esi esi
call sub_10003eaf
test eax eax
je r-xdata
push eax
call [ FreeLibrary@IAT ]
and [ esi + 0x7c ] 0x0
mov eax esi
pop esi
retn
call sub_10003eaf
mov esi [ eax + 0x8 ]
sub_100019ef
mov edi edi
push ebp
mov ebp esp
call sub_10003ea6
test eax eax
je r-xdata
pop ebp
jmp [ PostQuitMessage@IAT ]
mov eax [ eax + 0x3c ]
test eax eax
je r-xdata
push 0x1
push 0x1
call eax
sub_10001a11
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
mov edx [ ebp + 0xc ]
cmp edx ebx
je r-xdata
call sub_10003725
mov eax [ edx + 0x4 ]
mov esi eax
dec esi
je r-xdata
push edx
push edi
call sub_10004148
sub esi 0xe
je r-xdata
mov esi 0xf108
cmp eax 0x111
jne r-xdata
push r--data
mov ecx edi
call sub_10005069
mov ecx edi
test eax eax
je r-xdata
cmp [ edx + 0xc ] ebx
jne r-xdata
push r--data
call sub_10005069
test eax eax
jne r-xdata
push esi
push 0x1030
jmp r-xdata
xor ebx ebx
inc ebx
inc esi
mov eax ebx
jmp r-xdata
push esi
push 0x10
mov ecx edi
mov eax [ edi ]
call [ eax + 0x14 ]
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
sub_10001a94
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jg r-xdata
cmp ebx 0x1
jne r-xdata
push ebx
call sub_1000453f
and [ ebp + 0x8 ] 0x0
cmp [ esi + 0x58 ] 0x0
je r-xdata
xor eax eax
cmp ebx 0x1
pop esi
setl al
pop ebx
pop ebp
retn 0x4
push ebx
call sub_1000453f
mov ecx [ esi + 0x58 ]
mov eax [ ecx ]
call [ eax + 0x10 ]
mov [ ebp + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ esi + 0x58 ]
mov eax [ ecx ]
lea edx [ ebp + 0x8 ]
push edx
call [ eax + 0x14 ]
mov edx [ eax ]
mov ecx eax
call [ edx + 0x88 ]
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
sub_10001afa
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x74 ]
push edi
xor edi edi
cmp eax edi
je r-xdata
pop edi
pop esi
leave
retn 0x4
push ebx
mov ebx [ GlobalLock@IAT ]
push eax
call ebx
movzx ecx [ eax + 0x2 ]
push [ ebp + 0x8 ]
add ecx eax
push ecx
call [ lstrcmpA@IAT ]
test eax eax
jne r-xdata
pop ebx
push edi
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call OpenPrinterA
test eax eax
je r-xdata
mov eax [ esi + 0x70 ]
cmp eax edi
je r-xdata
push edi
push edi
push edi
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
push eax
push 0x42
call [ GlobalAlloc@IAT ]
push eax
mov [ esi + 0x70 ] eax
call ebx
push 0x2
push edi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
cmp eax 0x1
je r-xdata
push eax
call sub_100075e7
push [ ebp - 0x4 ]
call ClosePrinter
push [ esi + 0x70 ]
call sub_100075e7
mov [ esi + 0x70 ] edi
sub_10001ba0
push 0x4
mov eax sub_100214e9
call sub_1000ff79
push 0x54
call sub_10005a90
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
call sub_10010051
retn
call sub_1000540a
sub_10001bcc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
cmp eax 0xc
je r-xdata
jmp sub_100036ed
cmp eax 0x16
je r-xdata
jmp sub_10003725
cmp eax 0x22
je r-xdata
cmp eax 0x50
je r-xdata
sub_10001bf8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
cmp eax 0xc
je r-xdata
push 0x8007000e
jmp r-xdata
cmp eax 0x16
je r-xdata
call sub_100014f0
push 0x80070057
jmp r-xdata
cmp eax 0x22
je r-xdata
cmp eax 0x50
je r-xdata
push 0x80004005
sub_10001c50
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LoadResource@IAT ]
test eax eax
jne r-xdata
push esi
push eax
call [ LockResource@IAT ]
mov esi eax
test esi esi
je r-xdata
pop ebp
retn
xor eax eax
jmp r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ SizeofResource@IAT ]
mov ecx [ ebp + 0x10 ]
add eax esi
and ecx 0xf
jbe r-xdata
pop esi
pop ebp
retn
cmp esi eax
jb r-xdata
cmp esi eax
jae r-xdata
movzx eax [ esi ]
neg eax
sbb eax eax
and eax esi
dec ecx
movzx edx [ esi ]
lea esi [ esi + edx * 2 + 0x2 ]
jne r-xdata
sub_10001cad
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
shr eax 0x4
inc eax
movzx eax ax
push 0x6
push eax
push [ ebp + 0x8 ]
call [ FindResourceA@IAT ]
test eax eax
jne r-xdata
push [ ebp + 0xc ]
push eax
push [ ebp + 0x8 ]
call sub_10001c50
add esp 0xc
pop ebp
retn
pop ebp
retn
sub_10001d06
mov edi edi
push ebp
mov ebp esp
push 0xffffffff
push [ ebp + 0xc ]
push 0xffffffff
push [ ebp + 0x8 ]
push 0x1
push 0x409
call [ CompareStringA@IAT ]
dec eax
dec eax
pop ebp
retn
sub_10001d3b
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push eax
push eax
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
push 0x3
call [ WideCharToMultiByte@IAT ]
pop ebp
retn
sub_10001d57
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
push 0x3
call [ WideCharToMultiByte@IAT ]
pop ebp
retn
sub_10001d7d
mov edi edi
push ebp
mov ebp esp
sub esp 0x11c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x800
push ebx
push esi
mov esi ecx
mov ebx edx
lea eax [ ebp - 0x11c ]
jne r-xdata
push 0x4
push eax
push 0x3
push [ ebp + 0x8 ]
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
push r--data
push 0x4
push eax
call sub_10010396
push eax
call sub_10001bcc
add esp 0x10
jmp r-xdata
xor eax eax
push edi
call sub_10010569
mov edi [ eax ]
call sub_10010569
and [ eax ] 0x0
lea eax [ ebp - 0x11c ]
push eax
push ebx
push esi
push 0x111
mov esi 0x112
lea eax [ ebp - 0x118 ]
push esi
push eax
call sub_10010506
add esp 0x18
mov ebx eax
call sub_10010569
cmp [ eax ] 0x0
je r-xdata
call sub_10010569
mov [ eax ] edi
call sub_10010569
push [ eax ]
call sub_10001bf8
pop ecx
jmp r-xdata
cmp ebx esi
jae r-xdata
pop edi
cmp ebx 0xffffffff
je r-xdata
lea eax [ ebp - 0x118 ]
push eax
call [ LoadLibraryA@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
sub_10001e74
mov edi edi
push esi
mov esi ecx
mov eax [ esi ]
call [ eax + 0x7c ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0xb0 ]
mov [ esi + 0x7c ] eax
test eax eax
je r-xdata
xor eax eax
inc eax
pop esi
retn
push eax
call sub_10001cdf
push [ esi + 0x7c ]
push rw-data
call [ InterlockedExchange@IAT ]
sub_10001ea8
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov ecx esi
pop esi
jmp sub_1000402d
call sub_10007781
test eax eax
je r-xdata
push 0x0
call sub_100019ef
sub_10001ecb
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
call sub_10001cf3
mov esi eax
xor eax eax
cmp esi eax
jne r-xdata
push eax
push eax
push 0x36a
mov [ edi + 0x5c ] eax
push [ esi + 0x20 ]
call [ PostMessageA@IAT ]
push [ ebp + 0xc ]
mov eax [ esi ]
push [ ebp + 0x8 ]
mov ecx esi
call [ eax + 0x7c ]
pop edi
pop esi
pop ebp
retn 0x8
call sub_10003725
sub_10001f0c
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
call sub_10001cf3
mov esi eax
xor eax eax
cmp esi eax
jne r-xdata
push eax
push eax
push 0x36a
mov [ edi + 0x5c ] eax
push [ esi + 0x20 ]
call [ PostMessageA@IAT ]
push [ ebp + 0xc ]
mov eax [ esi ]
push [ ebp + 0x8 ]
mov ecx esi
call [ eax + 0x80 ]
pop edi
pop esi
pop ebp
retn 0x8
call sub_10003725
sub_10001f50
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
call sub_10001cf3
mov esi eax
xor eax eax
cmp esi eax
jne r-xdata
push eax
push eax
push 0x36a
mov [ edi + 0x5c ] eax
push [ esi + 0x20 ]
call [ PostMessageA@IAT ]
push [ ebp + 0xc ]
mov eax [ esi ]
push [ ebp + 0x8 ]
mov ecx esi
call [ eax + 0x84 ]
pop edi
pop esi
pop ebp
retn 0x8
call sub_10003725
sub_10001fa8
mov edi edi
push esi
mov esi ecx
mov ecx [ esi ]
sub ecx 0x10
xor eax eax
push edi
mov edi [ ecx ]
cmp [ ecx + 0x4 ] eax
je r-xdata
pop edi
pop esi
retn
cmp [ ecx + 0xc ] eax
jge r-xdata
call sub_10001540
mov eax [ edi ]
mov ecx edi
call [ eax + 0xc ]
add eax 0x10
mov [ esi ] eax
push eax
mov ecx esi
call sub_10001400
jmp r-xdata
sub_10001fe4
push 0x15c
mov eax sub_1002150f
call sub_1000ffe2
mov eax [ ebp + 0x8 ]
mov esi [ GetModuleHandleA@IAT ]
mov [ ebp - 0x124 ] eax
mov eax [ ebp + 0xc ]
xor edi edi
push r--data
mov [ ebp - 0x130 ] eax
mov [ ebp - 0x120 ] edi
mov [ ebp - 0x11c ] edi
call esi
mov ebx [ GetProcAddress@IAT ]
push r--data
push eax
mov [ ebp - 0x134 ] eax
call ebx
cmp eax edi
je r-xdata
push r--data
call esi
cmp eax edi
je r-xdata
call eax
mov esi [ ConvertDefaultLocale@IAT ]
movzx eax ax
mov [ ebp - 0x120 ] eax
movzx eax ax
mov ecx eax
shr eax 0xa
mov edi 0x3ff
shl eax 0xa
and ecx edi
movzx ecx cx
movzx eax ax
or eax ecx
push eax
mov [ ebp - 0x11c ] ecx
call esi
push [ ebp - 0x11c ]
mov [ ebp - 0x148 ] eax
call esi
push r--data
push [ ebp - 0x134 ]
mov [ ebp - 0x144 ] eax
mov [ ebp - 0x11c ] 0x2
call ebx
test eax eax
je r-xdata
mov eax [ ebp - 0x11c ]
inc [ ebp - 0x11c ]
mov [ ebp + eax * 4 - 0x148 ] 0x800
push 0x105
lea eax [ ebp - 0x118 ]
push eax
mov esi __pe_dll_export_address_table
push esi
mov [ ebp - 0x13 ] 0x0
mov [ ebp - 0x14 ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea ecx [ ebp - 0x120 ]
push ecx
push sub_100016f2
push 0x1
push 0x10
push eax
mov [ ebp - 0x120 ] edi
call [ EnumResourceLanguagesA@IAT ]
cmp [ ebp - 0x120 ] di
je r-xdata
call eax
movzx eax ax
mov [ ebp - 0x120 ] eax
movzx eax ax
mov ecx eax
shr eax 0xa
shl eax 0xa
and ecx edi
movzx edi cx
movzx eax ax
or eax edi
push eax
call esi
push edi
mov [ ebp - 0x140 ] eax
call esi
mov [ ebp - 0x13c ] eax
mov [ ebp - 0x11c ] 0x4
jmp r-xdata
push 0x20
pop edi
push edi
xor ebx ebx
lea eax [ ebp - 0x168 ]
push ebx
push eax
call sub_100105c0
add esp 0xc
lea eax [ ebp - 0x118 ]
push 0xffffffff
lea ecx [ ebp - 0x12c ]
mov [ ebp - 0x168 ] edi
mov [ ebp - 0x160 ] eax
mov [ ebp - 0x154 ] 0x3e8
mov [ ebp - 0x14c ] esi
mov [ ebp - 0x164 ] 0x88
call sub_1000170c
lea eax [ ebp - 0x168 ]
push eax
lea ecx [ ebp - 0x12c ]
mov [ ebp - 0x4 ] ebx
call sub_100017c3
test al al
je r-xdata
call sub_10010065
retn 0x8
movzx eax [ ebp - 0x120 ]
mov esi [ ConvertDefaultLocale@IAT ]
mov ecx eax
shr eax 0xa
shl eax 0xa
and ecx 0x3ff
movzx edi cx
movzx eax ax
or eax edi
push eax
call esi
push edi
mov [ ebp - 0x148 ] eax
call esi
mov [ ebp - 0x144 ] eax
mov [ ebp - 0x11c ] 0x2
xor esi esi
cmp [ ebp - 0x11c ] ebx
jle r-xdata
lea ecx [ ebp - 0x12c ]
call sub_100017fd
xor esi esi
jmp r-xdata
push [ ebp + esi * 4 - 0x148 ]
mov edx [ ebp - 0x130 ]
mov ecx [ ebp - 0x124 ]
call sub_10001d7d
pop ecx
cmp eax ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x12c ]
call sub_10001e4f
mov eax esi
jmp r-xdata
mov esi eax
inc esi
cmp esi [ ebp - 0x11c ]
jl r-xdata
sub_10002253
mov edi edi
push ebp
mov ebp esp
sub esp 0x114
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov eax ecx
mov esi 0x104
push esi
lea ecx [ ebp - 0x114 ]
push ecx
push [ eax + 0x44 ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
xor eax eax
cmp eax esi
je r-xdata
push edi
lea eax [ ebp - 0x114 ]
push eax
call [ PathFindExtensionA@IAT ]
mov [ eax ] 0x0
mov esi r--data
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x114 ]
movsd [ edi ] [ esi ]
push eax
lea eax [ ebp - 0x10 ]
push eax
movsb [ edi ] [ esi ]
call sub_10001fe4
pop edi
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000f298
leave
retn
sub_100022c7
push 0x4
mov eax sub_1002153f
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
call sub_100042be
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ esi ] r--data
cmp [ ebp + 0x8 ] edi
je r-xdata
mov [ esi + 0x50 ] edi
push [ ebp + 0x8 ]
call sub_100106ae
pop ecx
mov [ esi + 0x50 ] eax
jmp r-xdata
lea ecx [ ebx + 0x74 ]
call sub_10001f94
cmp eax edi
je r-xdata
call sub_10003725
call sub_10005a0c
mov ebx eax
cmp ebx edi
jne r-xdata
mov [ eax + 0x4 ] esi
call [ GetCurrentThread@IAT ]
mov [ esi + 0x2c ] eax
call [ GetCurrentThreadId@IAT ]
mov [ esi + 0x30 ] eax
mov [ ebx + 0x4 ] esi
xor eax eax
mov [ esi + 0x92 ] ax
mov [ esi + 0x90 ] ax
mov [ esi + 0x44 ] edi
mov [ esi + 0x7c ] edi
mov [ esi + 0x64 ] edi
mov [ esi + 0x68 ] edi
mov [ esi + 0x54 ] edi
mov [ esi + 0x60 ] edi
mov [ esi + 0x88 ] edi
mov [ esi + 0x58 ] edi
mov [ esi + 0x48 ] edi
mov [ esi + 0x8c ] edi
mov [ esi + 0x80 ] edi
mov [ esi + 0x84 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0x74 ] edi
mov [ esi + 0x94 ] edi
mov [ esi + 0x9c ] edi
mov [ esi + 0x5c ] edi
mov [ esi + 0x6c ] edi
mov [ esi + 0x98 ] 0x200
mov eax esi
call sub_10010051
retn 0x4
sub_1000239e
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
push [ ebp + 0x8 ]
call sub_10001cad
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
pop esi
leave
retn 0x8
movzx eax [ esi ]
push ebx
push edi
push eax
lea edi [ esi + 0x2 ]
push edi
call sub_10001d3b
pop ecx
pop ecx
mov ecx [ ebp - 0x4 ]
mov ebx eax
push ebx
call sub_100013d0
movzx ecx [ esi ]
push ecx
push edi
push ebx
push eax
call sub_10001d57
mov ecx [ ebp - 0x4 ]
add esp 0x10
push ebx
call sub_10001400
xor eax eax
pop edi
inc eax
pop ebx
sub_100023f9
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
push edi
mov edi ecx
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
call sub_10001fa8
jmp r-xdata
mov eax [ edi ]
push ebx
push [ ebp + 0xc ]
mov ebx [ eax - 0xc ]
sub esi eax
call sub_100013d0
cmp esi ebx
pop ebx
push [ ebp + 0xc ]
ja r-xdata
push 0x80070057
call sub_100014f0
pop edi
pop ebp
retn 0x8
push [ ebp + 0x8 ]
mov ecx [ edi ]
push [ ecx - 0x8 ]
push eax
call sub_1000f51f
lea ecx [ eax + esi ]
push ecx
mov ecx [ edi ]
push [ ecx - 0x8 ]
push eax
call sub_1001048b
jmp r-xdata
add esp 0x10
push [ ebp + 0xc ]
mov ecx edi
call sub_10001400
pop esi
sub_1000246a
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10007742
test eax eax
je r-xdata
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
mov ecx esi
push eax
call sub_1000239e
sub_1000248e
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
je r-xdata
pop ebp
retn 0x4
test [ ebp + 0x8 ] 0xffff0000
jne r-xdata
movzx eax [ ebp + 0x8 ]
push eax
call sub_1000246a
mov al 0x1
sub_100024b3
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10001d26
pop ecx
push eax
push [ ebp + 0x8 ]
mov ecx esi
call sub_100023f9
pop esi
pop ebp
retn 0x4
sub_100024d4
push 0x214
mov eax sub_10021570
call sub_10010018
mov esi ecx
mov [ ebp - 0x21c ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x58 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
cmp ecx ebx
je r-xdata
mov ecx [ esi + 0x88 ]
cmp ecx ebx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
call sub_10005a0c
cmp [ eax + 0x14 ] bl
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x18 ]
mov eax [ esi + 0x70 ]
cmp eax ebx
je r-xdata
mov ecx [ rw-data ]
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x74 ]
cmp eax ebx
je r-xdata
push eax
call sub_100075e7
mov ecx [ rw-data ]
cmp ecx ebx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov [ rw-data ] ebx
movzx eax [ esi + 0x90 ]
cmp ax bx
je r-xdata
push eax
call sub_100075e7
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov [ rw-data ] ebx
movzx eax [ esi + 0x92 ]
cmp ax bx
je r-xdata
push eax
call [ GlobalDeleteAtom@IAT ]
mov ecx [ esi + 0x8c ]
cmp ecx ebx
je r-xdata
push eax
call [ GlobalDeleteAtom@IAT ]
call sub_10005a0c
mov ecx [ eax + 0x10 ]
cmp ecx [ esi + 0x50 ]
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
cmp [ eax + 0x4 ] esi
jne r-xdata
mov [ eax + 0x10 ] ebx
push [ esi + 0x50 ]
call sub_1000fb05
push [ esi + 0x54 ]
call sub_1000fb05
push [ esi + 0x60 ]
call sub_1000fb05
push [ esi + 0x64 ]
call sub_1000fb05
push [ esi + 0x68 ]
call sub_1000fb05
add esp 0x14
mov [ esi + 0x2c ] ebx
jmp r-xdata
mov [ eax + 0x4 ] ebx
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10003fd7
call sub_10010074
retn
sub_100025ed
lea ecx [ ebp - 0x218 ]
call sub_10001560
mov esi [ ebp - 0x220 ]
mov eax [ esi ]
xor ebx ebx
push ebx
push 0x200
lea ecx [ ebp - 0x214 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] 0x3
call [ eax + 0xc ]
test eax eax
je r-xdata
push 0x322
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x14
lea eax [ ebp - 0x214 ]
push eax
push 0x322
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x18
jmp r-xdata
mov edi [ ebp - 0x218 ]
push ebx
push ebx
push edi
call sub_10004f51
lea ecx [ edi - 0x10 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001540
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
mov eax r-xdata
retn
sub_100026c2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100024d4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_100026fa
push 0x4
mov eax sub_100215a0
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
call sub_1000320a
push eax
mov ecx esi
call sub_10001510
push [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_1000248e
test al al
jne r-xdata
mov eax esi
call sub_10010051
retn 0x4
push [ ebp + 0x8 ]
mov ecx esi
call sub_100026e3
sub_1000273e
mov edi edi
push esi
mov esi eax
xor eax eax
mov ecx edx
test edx edx
je r-xdata
mov eax 0x80070057
cmp [ esi ] al
je r-xdata
retn
test eax eax
jl r-xdata
test edx edx
jne r-xdata
inc esi
dec edx
jne r-xdata
and [ edi ] 0x0
sub ecx edx
mov [ edi ] ecx
retn
pop esi
test edi edi
je r-xdata
sub_1000276e
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010703
push eax
call sub_10001bcc
add esp 0x14
pop ebp
retn
sub_1000279a
push 0x14
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x20 ] ebx
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100027f3
mov eax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_100027f3
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ebx
sete al
mov esi eax
cmp esi ebx
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push ebx
call sub_10005169
cmp esi ebx
je r-xdata
sub_1000283d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0x10 ]
test eax eax
je r-xdata
mov eax 0x80070057
mov edx [ ebp + 0xc ]
cmp edx 0x7fffffff
ja r-xdata
pop edi
pop ebp
retn 0xc
test edi edi
je r-xdata
call sub_1000273e
jmp r-xdata
and [ edi ] 0x0
test eax eax
jge r-xdata
sub_10002874
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
push esi
mov esi ecx
jne r-xdata
push 0x0
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp + 0xc ]
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
pop esi
pop ebp
retn 0x8
sub_100028b6
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0xc ]
mov esi ecx
test edi edi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
push 0x0
lea eax [ ebp + 0xc ]
push eax
push edi
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
push [ esi + 0xc ]
push 0xffffffff
push 0xd
call sub_10007b3b
sub_10002903
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0x10 ]
mov esi ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push [ esi + 0x4 ]
mov [ ebp - 0x8 ] eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
pop esi
leave
retn 0xc
push edi
mov edi [ GetLastError@IAT ]
call edi
test eax eax
je r-xdata
pop edi
push [ esi + 0xc ]
call edi
push eax
call sub_10007b81
sub_10002956
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push 0x1
xor eax eax
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push [ esi + 0x4 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
pop esi
leave
retn
push edi
mov edi [ GetLastError@IAT ]
call edi
test eax eax
je r-xdata
pop edi
push [ esi + 0xc ]
call edi
push eax
call sub_10007b81
sub_100029a2
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
sub_100029cb
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
mov esi ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ LockFile@IAT ]
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0x10
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
sub_10002a00
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
mov esi ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ UnlockFile@IAT ]
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0x10
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
sub_10002a35
mov edi edi
push ebp
mov ebp esp
push esi
push 0x0
push [ ebp + 0xc ]
mov esi ecx
push [ ebp + 0x8 ]
mov eax [ esi ]
call [ eax + 0x28 ]
push [ esi + 0x4 ]
call [ SetEndOfFile@IAT ]
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0x8
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
sub_10002a6b
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push edi
lea eax [ ebp - 0x4 ]
mov edi ecx
push eax
push [ edi + 0x4 ]
call [ GetFileSize@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
pop edi
leave
retn
push esi
mov esi [ GetLastError@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ edi + 0xc ]
call esi
push eax
call sub_10007b81
sub_10002aac
mov edi edi
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov ebx esi
test esi esi
jne r-xdata
push [ ebp + 0x10 ]
push ebx
push edi
call [ GetFileTitleA@IAT ]
test ax ax
je r-xdata
lea ebx [ ebp - 0x108 ]
mov [ ebp + 0x10 ] 0x104
test esi esi
jne r-xdata
push [ ebp + 0x10 ]
push esi
push edi
call sub_10006926
jmp r-xdata
xor eax eax
push ebx
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn 0xc
sub_10002b1a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
cmp eax 0xffffffff
jne r-xdata
push eax
mov ecx esi
call sub_10001400
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
push [ eax - 0x8 ]
push eax
call sub_10002828
pop ecx
pop ecx
sub_10002b44
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
xor edi edi
cmp eax 0xffffffff
je r-xdata
or [ esi + 0x4 ] 0xffffffff
and [ esi + 0x8 ] 0x0
add esi 0xc
mov ecx esi
call sub_10001fa8
test edi edi
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov edi eax
neg edi
sbb edi edi
inc edi
pop edi
pop esi
retn
push [ esi ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
sub_10002bc9
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push edi
push 0x10
mov ebx ecx
call sub_100016b8
pop ecx
test eax eax
je r-xdata
xor edi edi
mov ecx eax
call sub_10002baa
mov edi eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi + 0x4 ] eax
mov eax [ ebx + 0x8 ]
mov [ edi + 0x8 ] eax
mov eax edi
pop edi
pop ebx
leave
retn
test edi edi
je r-xdata
push esi
mov esi [ GetCurrentProcess@IAT ]
push 0x2
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
call esi
push eax
push [ ebx + 0x4 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
pop esi
test eax eax
jne r-xdata
push [ ebx + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_10007b81
mov eax [ edi ]
push 0x1
mov ecx edi
call [ eax + 0x4 ]
sub_10002c3f
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push esi
push edi
mov esi 0x104
push esi
call sub_100013d0
push esi
mov edi eax
push 0x0
push edi
call sub_100105c0
push 0xffffffff
push [ ebp + 0x8 ]
push esi
push edi
call sub_1000276e
add esp 0x1c
push edi
call [ PathStripToRootA@IAT ]
mov ecx [ ebp + 0xc ]
push 0xffffffff
call sub_10002b1a
pop edi
pop esi
pop ebp
retn 0x8
sub_10002c85
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x10 ]
sub ecx 0x10
mov [ esi ] r--data
call sub_10001540
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10002cb2
push 0x214
mov eax sub_100215d4
call sub_10010018
mov esi ecx
mov [ ebp - 0x21c ] esi
mov [ esi ] r--data
xor edi edi
cmp [ esi + 0x4 ] 0xffffffff
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1
je r-xdata
mov ecx [ esi + 0xc ]
sub ecx 0x10
call sub_10001540
call sub_10010074
retn
cmp [ esi + 0x8 ] edi
je r-xdata
call sub_10002b44
jmp r-xdata
sub_10002cf5
lea ecx [ ebp - 0x218 ]
call sub_10001560
mov esi [ ebp - 0x220 ]
mov eax [ esi ]
xor edi edi
push edi
push 0x200
lea ecx [ ebp - 0x214 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] 0x3
call [ eax + 0xc ]
test eax eax
je r-xdata
push 0x6f
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x14
lea eax [ ebp - 0x214 ]
push eax
push 0x6f
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x18
jmp r-xdata
push edi
push edi
mov edi [ ebp - 0x218 ]
push edi
call sub_10004f51
lea ecx [ edi - 0x10 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001540
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
mov eax r-xdata
retn
sub_10002dad
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10002cb2
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10002dce
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn 0x8
call [ GetLastError@IAT ]
push eax
mov [ esi + 0xc ] eax
call sub_100077ef
push [ ebp + 0xc ]
lea ecx [ esi + 0x10 ]
mov [ esi + 0x8 ] eax
call sub_100026e3
sub_10002dfd
push 0x158
mov eax sub_10021607
call sub_1000ffe2
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
xor ecx ecx
test edi edi
setne cl
mov [ ebp - 0x158 ] eax
test ecx ecx
jne r-xdata
xor ecx ecx
test eax eax
setne cl
test ecx ecx
je r-xdata
call sub_10003725
lea ecx [ ebp - 0x15c ]
push ecx
push edi
mov esi 0x104
push esi
push eax
call [ GetFullPathNameA@IAT ]
test eax eax
jne r-xdata
cmp eax esi
jb r-xdata
push 0xffffffff
push [ ebp - 0x158 ]
push esi
push edi
call sub_1000276e
add esp 0x10
push [ ebp - 0x158 ]
push ebx
call sub_10002dce
lea ecx [ ebp - 0x154 ]
call sub_10001560
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x154 ]
push eax
push edi
call sub_10002c3f
push [ ebp - 0x154 ]
call [ PathIsUNCA@IAT ]
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
call sub_10010065
retn 0xc
mov ecx [ ebp - 0x154 ]
add ecx 0xfffffff0
call sub_10001540
xor eax eax
inc eax
push eax
push eax
lea ecx [ ebp - 0x160 ]
push ecx
lea ecx [ ebp - 0x164 ]
push ecx
push eax
push eax
push eax
push [ ebp - 0x154 ]
call [ GetVolumeInformationA@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push [ ebp - 0x158 ]
lea ecx [ ebx + 0x10 ]
mov [ ebx + 0x8 ] 0x3
call sub_100026e3
jmp r-xdata
test [ ebp - 0x160 ] 0x2
jne r-xdata
push [ ebp - 0x158 ]
push ebx
call sub_10002dce
test [ ebp - 0x160 ] 0x4
jne r-xdata
push edi
call [ CharUpperA@IAT ]
lea eax [ ebp - 0x150 ]
push eax
push [ ebp - 0x158 ]
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
push eax
call [ FindClose@IAT ]
cmp [ ebp - 0x15c ] 0x0
je r-xdata
cmp [ ebp - 0x15c ] edi
jbe r-xdata
lea eax [ ebp - 0x124 ]
push eax
call [ lstrlenA@IAT ]
mov ecx [ ebp - 0x15c ]
sub ecx edi
add eax ecx
cmp eax esi
jge r-xdata
test ebx ebx
je r-xdata
lea eax [ ebp - 0x124 ]
push eax
sub esi ecx
push esi
push [ ebp - 0x15c ]
call sub_10001c32
add esp 0xc
mov ecx [ ebp - 0x154 ]
add ecx 0xfffffff0
call sub_10001540
jmp r-xdata
push [ ebp - 0x158 ]
lea ecx [ ebx + 0x10 ]
mov [ ebx + 0x8 ] 0x3
call sub_100026e3
jmp r-xdata
sub_10002fbc
push 0x4
mov eax sub_1002163a
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
call sub_10003770
lea edi [ esi + 0x10 ]
mov ecx edi
mov [ esi ] r--data
call sub_10001560
mov eax [ ebp + 0x8 ]
push [ ebp + 0x10 ]
and [ ebp - 0x4 ] 0x0
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
mov ecx edi
mov [ esi + 0xc ] eax
call sub_100026e3
mov eax esi
call sub_10010051
retn 0xc
sub_10003020
mov edi edi
push ebp
mov ebp esp
sub esp 0x120
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
and [ esi + 0x8 ] 0x0
or [ esi + 0x4 ] 0xffffffff
push edi
mov [ ebp - 0x10c ] eax
mov eax [ ebp + 0x10 ]
lea edi [ esi + 0xc ]
mov ecx edi
mov [ ebp - 0x114 ] eax
and ebx 0xffff7fff
call sub_10001fa8
cmp [ ebp - 0x10c ] 0x0
je r-xdata
mov eax [ ebp - 0x114 ]
test eax eax
je r-xdata
push 0x0
push 0x104
push [ ebp - 0x10c ]
call sub_1000283d
test eax eax
jl r-xdata
xor eax eax
push [ ebp - 0x10c ]
lea ecx [ eax + 0x10 ]
mov [ eax + 0x8 ] 0x3
call sub_100026e3
push [ ebp - 0x114 ]
lea eax [ ebp - 0x108 ]
push [ ebp - 0x10c ]
push eax
call sub_10002dfd
test eax eax
je r-xdata
lea eax [ ebp - 0x108 ]
push eax
mov ecx edi
call sub_100024b3
push 0x3
mov eax ebx
pop edx
xor ecx ecx
and eax edx
sub eax ecx
mov [ ebp - 0x110 ] ecx
je r-xdata
mov [ ebp - 0x110 ] 0x80000000
dec eax
je r-xdata
xor edx edx
cmp eax 0x10
je r-xdata
mov [ ebp - 0x110 ] 0x40000000
jmp r-xdata
dec eax
jne r-xdata
push 0x3
pop eax
mov eax ebx
and eax 0x2000
neg eax
sbb eax eax
and eax 0x2
inc eax
inc eax
jmp r-xdata
cmp eax 0x20
je r-xdata
mov eax ebx
and eax 0x70
push 0x1
pop edi
je r-xdata
mov [ ebp - 0x110 ] 0xc0000000
jmp r-xdata
test ebx 0x20000
je r-xdata
mov ecx 0x20000080
mov ecx 0x80
test ebx 0x10000
je r-xdata
mov edx edi
jmp r-xdata
cmp eax 0x30
je r-xdata
test ebx 0x40000
je r-xdata
or ecx 0x80000000
mov eax ebx
shr eax 0x7
not eax
and eax edi
mov [ ebp - 0x120 ] 0xc
mov [ ebp - 0x11c ] ecx
mov [ ebp - 0x118 ] eax
test ebx 0x1000
je r-xdata
push 0x2
pop edx
jmp r-xdata
cmp eax 0x40
je r-xdata
test ebx 0x80000
je r-xdata
or ecx __pe_dll_export_address_table
push 0x0
push ecx
push eax
lea eax [ ebp - 0x120 ]
push eax
push edx
push [ ebp - 0x110 ]
push [ ebp - 0x10c ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
or ecx 0x8000000
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] edi
mov eax edi
jmp r-xdata
push [ ebp - 0x10c ]
push [ ebp - 0x114 ]
call sub_10002dce
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn 0xc
sub_10003210
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
test esi esi
jge r-xdata
lea eax [ esi + 0x1 ]
imul eax [ ebp + 0xc ]
add eax 0x10
push eax
call sub_1000fa3b
pop ecx
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
and [ eax + 0x4 ] 0x0
mov [ eax ] edi
mov [ eax + 0xc ] 0x1
mov [ eax + 0x8 ] esi
pop edi
pop esi
pop ebp
retn 0x8
sub_10003261
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
test esi esi
jge r-xdata
lea eax [ esi + 0x1 ]
imul eax [ ebp + 0x10 ]
add eax 0x10
push eax
push [ ebp + 0x8 ]
call sub_10010929
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax + 0x8 ] esi
pop esi
pop ebp
retn 0xc
sub_10003296
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
mul [ ebp + 0x10 ]
test edx edx
ja r-xdata
mov eax 0x80070057
pop ebp
retn
cmp eax 0xffffffff
jbe r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
xor eax eax
pop ebp
retn
sub_100032ba
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov ecx [ esi ]
mov eax [ ecx ]
push edi
call [ eax + 0x10 ]
lea edx [ esi + 0xc ]
cmp [ edx ] 0x0
jl r-xdata
mov edx [ eax ]
push 0x1
push [ esi + 0x4 ]
mov ecx eax
call [ edx ]
mov edi eax
test edi edi
jne r-xdata
cmp eax [ esi ]
jne r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
mov eax [ esi + 0x4 ]
inc eax
push eax
add esi 0x10
push esi
push eax
lea eax [ edi + 0x10 ]
push eax
call sub_1000f51f
add esp 0x10
call sub_10001330
xor eax eax
mov edi esi
inc eax
[ edx ] eax
jmp r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn
sub_1000331a
mov edi edi
push ebp
mov ebp esp
push ecx
push [ ebp + 0xc ]
lea eax [ ebp - 0x4 ]
push [ ebp + 0x8 ]
push eax
call sub_10003296
add esp 0xc
test eax eax
jge r-xdata
mov eax [ ebp - 0x4 ]
leave
retn
push eax
call sub_100014f0
sub_10003372
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x10 ]
push edi
test ecx ecx
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
mov edi [ ebp + 0xc ]
jne r-xdata
push 0x80004005
mov eax [ ecx ]
push 0x1
push edi
call [ eax ]
test eax eax
jne r-xdata
test edi edi
je r-xdata
add eax 0x10
push edi
mov ecx esi
mov [ esi ] eax
call sub_10001400
push edi
push [ ebp + 0x8 ]
push edi
push [ esi ]
call sub_1000f51f
add esp 0x10
pop edi
mov eax esi
pop esi
pop ebp
retn 0xc
call sub_10001330
push 0x80070057
jmp r-xdata
call sub_100014f0
sub_100033d4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
push esi
push edi
mov edi ecx
mov esi [ edi ]
lea ecx [ eax - 0x10 ]
sub esi 0x10
cmp ecx esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0xc ] 0x0
jl r-xdata
push [ eax - 0xc ]
mov ecx edi
push eax
call sub_100023f9
mov edx [ ecx ]
cmp edx [ esi ]
jne r-xdata
push ebx
push ecx
call sub_100032ba
pop ecx
mov ecx esi
mov ebx eax
call sub_10001540
add ebx 0x10
mov [ edi ] ebx
pop ebx
jmp r-xdata
sub_1000342c
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f51f
push eax
call sub_10001bcc
add esp 0x14
pop ebp
retn
sub_10003465
push 0x4
mov eax sub_10021a50
call sub_1000ff79
push 0xc
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ eax + 0x8 ] ecx
mov [ ebp + 0x8 ] eax
push r--data
lea eax [ ebp + 0x8 ]
push eax
call sub_10010b44
int3
call sub_1000344d
sub_100034a8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push ebx
xor ebx ebx
cmp eax ebx
je r-xdata
push ebx
push ebx
lea eax [ ebp + 0x10 ]
push eax
push 0x800
push [ ecx + 0x8 ]
push ebx
push 0x1100
call [ FormatMessageA@IAT ]
test eax eax
jne r-xdata
mov [ eax ] ebx
push 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000276e
add esp 0x10
push [ ebp + 0x10 ]
call [ LocalFree@IAT ]
xor eax eax
inc eax
mov eax [ ebp + 0x8 ]
mov [ eax ] bl
xor eax eax
jmp r-xdata
pop ebx
pop ebp
retn 0xc
sub_10003504
mov edi edi
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10003526
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi ecx
mov eax [ edi ]
mov esi [ eax - 0xc ]
lea ebx [ esi + 0x1 ]
push ebx
call sub_100013d0
mov cl [ ebp + 0x8 ]
mov [ eax + esi ] cl
push ebx
mov ecx edi
call sub_10001400
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_10003553
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ eax - 0xc ]
push edi
mov edi [ ebp + 0x8 ]
sub edi eax
mov [ ebp - 0x4 ] ecx
test ebx ebx
jge r-xdata
push [ ebp + 0x8 ]
call sub_10001d26
cmp ebx eax
pop ecx
jle r-xdata
push 0x80070057
call sub_100014f0
mov eax 0x7fffffff
sub eax ebx
cmp eax esi
jl r-xdata
mov ebx eax
mov ecx [ ebp - 0x4 ]
lea eax [ esi + ebx ]
push eax
mov [ ebp + 0xc ] eax
call sub_100013d0
cmp edi esi
ja r-xdata
mov edi [ ebp + 0x8 ]
add edi eax
jmp r-xdata
push ebx
push edi
add eax esi
push ebx
push eax
call sub_1000f51f
mov ecx [ ebp - 0x4 ]
add esp 0x10
push [ ebp + 0xc ]
call sub_10001400
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100035ce
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10001d26
pop ecx
push eax
push [ ebp + 0x8 ]
mov ecx esi
call sub_10003553
pop esi
pop ebp
retn 0x4
sub_10003636
mov edi edi
push ebp
mov ebp esp
sub esp 0x208
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx ]
lea edx [ ebp - 0x208 ]
push edx
push 0x200
lea edx [ ebp - 0x204 ]
push edx
call [ eax + 0xc ]
test eax eax
je r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push [ ebp - 0x208 ]
lea eax [ ebp - 0x204 ]
push [ ebp + 0x8 ]
push eax
call sub_10004f51
jmp r-xdata
push [ ebp - 0x208 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10004f9f
mov [ ebp + 0xc ] 0xf020
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn 0x8
sub_100036c2
mov edi edi
push esi
mov esi ecx
push 0x80
lea eax [ esi + 0x14 ]
push eax
push [ esi + 0x94 ]
mov [ esi + 0xc ] 0x1
call sub_100076e8
neg eax
sbb eax eax
neg eax
mov [ esi + 0x10 ] eax
pop esi
retn
sub_10003741
push 0x4
mov eax sub_100214e9
call sub_1000ff79
push 0x104
call sub_10005a90
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
call sub_10010051
retn
call sub_100052ec
sub_1000378b
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov esi ecx
cmp edi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
cmp [ esi + 0xc ] ebx
jne r-xdata
mov [ eax ] ebx
cmp [ esi + 0x10 ] ebx
je r-xdata
call sub_100036c2
mov [ edi ] bl
push 0xffffffff
lea eax [ esi + 0x14 ]
push eax
push [ ebp + 0xc ]
push edi
call sub_1000276e
add esp 0x10
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax [ esi + 0x10 ]
jmp r-xdata
sub_100037df
mov edi edi
push ebp
mov ebp esp
push 0x10
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010c46
add esp 0xc
neg eax
sbb eax eax
inc eax
pop ebp
retn
sub_100037fb
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x20 ]
push ebx
xor ebx ebx
inc ebx
test eax eax
je r-xdata
call sub_10003725
mov eax [ ebp + 0x1c ]
add eax 0xffffffc7
push esi
cmp eax 0xb
ja r-xdata
mov [ eax ] ecx
mov ecx [ ebp + 0x14 ]
mov [ eax + 0x4 ] ecx
mov eax ebx
jmp r-xdata
xor eax eax
jmp [ eax * 4 + jump_table_10003903 ]
pop ebx
pop ebp
retn 0x1c
call [ ebp + 0x14 ]
jmp r-xdata
call [ ebp + 0x14 ]
jmp r-xdata
push [ ebp + 0xc ]
push [ ebp + 0xc ]
jmp r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
mov esi [ ebp + 0x18 ]
test esi esi
je r-xdata
mov esi [ ebp + 0x18 ]
test esi esi
je r-xdata
push [ ebp + 0x18 ]
jmp r-xdata
push [ ebp + 0x18 ]
mov eax ebx
jmp r-xdata
mov ebx eax
call [ ebp + 0x14 ]
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
jmp r-xdata
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
jmp r-xdata
push esi
call [ ebp + 0x14 ]
push [ ebp + 0xc ]
push esi
call [ ebp + 0x14 ]
jmp r-xdata
call [ ebp + 0x14 ]
jmp r-xdata
pop esi
xor ebx ebx
cmp [ esi + 0x1c ] ebx
sete bl
and [ esi + 0x1c ] 0x0
jmp r-xdata
sub_10003933
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push ebx
mov ebx ecx
cmp eax 0xfffffffe
jne r-xdata
push esi
push edi
cmp eax 0xfffffffd
jne r-xdata
call sub_10005a0c
cmp [ eax + 0x3c ] 0x0
jne r-xdata
cmp eax 0xffffffff
je r-xdata
mov edi [ ebp + 0x10 ]
and [ ebp + 0xc ] 0x0
test edi edi
je r-xdata
call sub_10005a0c
push [ ebp + 0x14 ]
mov eax [ eax + 0x3c ]
push [ ebp + 0x10 ]
mov edx [ eax ]
push [ ebp + 0x8 ]
mov ecx eax
push ebx
call [ edx + 0x4 ]
jmp r-xdata
call sub_10003725
mov edi 0x111
mov edi eax
movzx eax ax
shr edi 0x10
mov [ ebp + 0xc ] eax
test edi edi
jne r-xdata
mov eax [ edi + 0x30 ]
mov [ ebp + 0x10 ] eax
mov eax [ ebx ]
call [ eax + 0x2c ]
mov ebx eax
jmp r-xdata
pop ebx
pop ebp
retn 0x10
mov esi eax
cmp [ esi ] 0x0
jne r-xdata
mov eax [ ebx ]
call [ eax + 0x28 ]
jmp r-xdata
test ebx ebx
jne r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push edi
push [ esi + 0x4 ]
call sub_1000959c
test eax eax
jne r-xdata
xor eax eax
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
push [ ebp + 0x14 ]
push [ eax + 0x10 ]
push [ ebp + 0x10 ]
push [ eax + 0x14 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push ebx
call sub_100037fb
jmp r-xdata
call [ esi ]
mov esi [ ebx + 0x4 ]
jmp r-xdata
pop edi
pop esi
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov ebx [ ebx ]
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x8 ] eax
jne r-xdata
add esi 0xc
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push eax
push [ ebp + 0x10 ]
call sub_100037df
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
mov [ edi + 0x4 ] eax
mov [ ebp + 0xc ] 0x1
jmp r-xdata
sub_10003a71
mov edi edi
push esi
push 0xd
mov esi ecx
call sub_10006288
mov eax [ esi ]
mov ecx esi
call [ eax + 0x20 ]
test eax eax
je r-xdata
push 0xd
call sub_100062fa
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
pop esi
retn
mov ecx eax
call sub_100052af
sub_10003aad
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x20 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax + 0x18 ] ecx
retn
sub_10003b3c
mov edi edi
push esi
mov esi ecx
call sub_10005a0c
mov [ esi + 0x1c ] eax
xor eax eax
inc eax
xor ecx ecx
mov [ esi + 0x4 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] ecx
mov [ esi + 0x10 ] ecx
mov [ esi + 0x18 ] ecx
mov eax esi
pop esi
retn
sub_10003bab
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
mov ecx [ esi + 0xc ]
xor ebx ebx
cmp ecx ebx
je r-xdata
cmp [ esi + 0x14 ] ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
jne r-xdata
call sub_10003725
cmp [ ebp + 0x8 ] ebx
jne r-xdata
pop esi
pop ebx
pop ebp
retn 0x4
mov eax [ esi + 0x8 ]
cmp eax [ esi + 0x20 ]
jb r-xdata
push [ ebp + 0x8 ]
mov ecx [ esi + 0x14 ]
call sub_1000db3e
push edi
mov edi [ esi + 0x14 ]
call [ GetFocus@IAT ]
cmp eax [ edi + 0x20 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
neg edx
sbb edx edx
and edx 0xfffffffd
add edx 0x3
or edx 0x400
push edx
push eax
call sub_10003aeb
jmp r-xdata
pop edi
push [ edi + 0x20 ]
call [ GetParent@IAT ]
push eax
call sub_1000af07
push ebx
push ebx
push 0x28
push [ eax + 0x20 ]
call [ SendMessageA@IAT ]
mov [ esi + 0x18 ] 0x1
sub_10003c39
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
call sub_10003725
push edi
mov edi [ SendMessageA@IAT ]
push 0x0
push 0x0
push 0x87
push [ eax + 0x20 ]
call edi
test eax 0x2000
je r-xdata
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x8 ]
cmp eax [ esi + 0x20 ]
jb r-xdata
pop edi
mov eax [ esi + 0x14 ]
push 0x0
push [ ebp + 0x8 ]
push 0xf1
push [ eax + 0x20 ]
call edi
mov edx [ ebp + 0x8 ]
neg edx
sbb edx edx
and edx 0x8
or edx 0x400
push edx
push eax
call sub_10003ad3
jmp r-xdata
sub_10003caf
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push esi
mov esi ecx
jne r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
call sub_10003725
mov esi [ esi + 0x14 ]
test esi esi
je r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push [ esi + 0x20 ]
call sub_10007528
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x8 ]
push edi
mov edi 0x400
push edi
push ecx
push [ eax + 0x4 ]
call [ GetMenuState@IAT ]
mov ecx [ esi + 0x8 ]
and eax 0xfffff6fb
cmp ecx [ esi + 0x20 ]
jae r-xdata
push [ ebp + 0x8 ]
or eax edi
push [ esi + 0x4 ]
push eax
push ecx
mov ecx [ esi + 0xc ]
call sub_10003b03
pop edi
jmp r-xdata
sub_10003d1c
mov edi edi
push ebp
mov ebp esp
sub esp 0x90
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
call [ GetMenuCheckMarkDimensions@IAT ]
movsx ecx ax
shr eax 0x10
cmp ecx 0x4
movsx ebx ax
mov [ ebp - 0x8c ] ecx
mov [ ebp - 0x88 ] ebx
jle r-xdata
call sub_10003725
cmp ebx 0x5
jg r-xdata
cmp ecx 0x20
jle r-xdata
lea eax [ ecx - 0x4 ]
cdq
sub eax edx
lea esi [ ecx + 0xf ]
sar esi 0x4
mov edi eax
sar edi 0x1
mov eax esi
shl eax 0x4
add edi eax
sub edi ecx
cmp edi 0xc
jle r-xdata
push 0x20
pop ecx
mov [ ebp - 0x8c ] ecx
cmp ebx 0x20
jle r-xdata
push 0xc
pop edi
push 0x80
lea eax [ ebp - 0x84 ]
push 0xff
push eax
call sub_100105c0
lea eax [ ebx - 0x6 ]
sar eax 0x1
imul eax esi
add esp 0xc
lea eax [ ebp + eax * 2 - 0x84 ]
mov edx r--data
add esi esi
mov [ ebp - 0x90 ] 0x5
push 0x20
pop ebx
mov [ ebp - 0x88 ] ebx
movzx bx [ edx ]
mov ecx edi
shl bx cl
inc edx
not bx
movzx ecx bx
mov ebx ecx
shr ebx 0x8
mov [ eax ] bl
mov [ eax + 0x1 ] cl
add eax esi
dec [ ebp - 0x90 ]
jne r-xdata
lea eax [ ebp - 0x84 ]
push eax
push 0x1
push 0x1
push [ ebp - 0x88 ]
push [ ebp - 0x8c ]
call [ CreateBitmap@IAT ]
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
push 0x7fe3
push eax
call [ LoadBitmapA@IAT ]
mov [ rw-data ] eax
sub_10003e3e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi ]
push edi
xor ecx ecx
xor edi edi
cmp [ ebp + 0x8 ] edi
setne cl
push ecx
mov ecx esi
call [ eax + 0x4 ]
cmp [ esi + 0xc ] edi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x10 ] edi
jne r-xdata
mov eax [ esi + 0x8 ]
cmp eax [ esi + 0x20 ]
jb r-xdata
cmp [ rw-data ] edi
jne r-xdata
call sub_10003725
push [ rw-data ]
mov eax [ esi + 0xc ]
push edi
push 0x400
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ SetMenuItemBitmaps@IAT ]
call sub_10003d1c
cmp [ rw-data ] edi
je r-xdata
sub_10003eb8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx + 0x4 ]
cmp eax 0x1
jne r-xdata
cmp eax 0xf
jne r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
push 0x0
push [ ecx ]
call [ ValidateRect@IAT ]
pop ebp
retn 0x8
sub_10003eff
push 0x10
mov eax sub_10021655
call sub_1000ffac
and [ ebp - 0x4 ] 0x0
call sub_1000631f
push 0xffffffff
call sub_10006537
cmp [ ebp + 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x2
jne r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x4 ] 0x4
test ecx ecx
je r-xdata
call sub_10005a3f
mov esi eax
test esi esi
je r-xdata
call sub_10010051
retn 0x4
push 0x0
push [ ebp + 0x8 ]
call sub_1000605c
mov ecx [ esi + 0x3c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x60 ]
mov ecx [ esi + 0x3c ]
test ecx ecx
je r-xdata
and [ esi + 0x3c ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10003f9e
mov edi edi
push esi
mov esi ecx
push edi
xor edi edi
mov [ esi + 0x20 ] edi
mov [ esi + 0x24 ] edi
mov [ esi + 0x2c ] edi
mov [ esi + 0x30 ] edi
call sub_10005454
mov [ eax + 0x34 ] edi
mov [ eax + 0x54 ] edi
add eax 0x4c
push eax
call [ GetCursorPos@IAT ]
mov [ esi + 0x40 ] edi
mov [ esi + 0x3c ] edi
pop edi
mov [ esi + 0x28 ] 0x1
pop esi
retn
sub_10003fd7
push 0x4
mov eax sub_10021ada
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov eax [ esi + 0x2c ]
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
call sub_10005a3f
cmp [ eax + 0x4 ] esi
jne r-xdata
push eax
call [ CloseHandle@IAT ]
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10003b64
call sub_10010051
retn
and [ eax + 0x4 ] 0x0
sub_1000402d
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov esi ecx
call sub_10005454
xor edi edi
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x8 ] edi
mov eax [ esi ]
mov ecx esi
call [ eax + 0x5c ]
test eax eax
mov eax [ esi ]
mov ecx esi
je r-xdata
mov ebx [ ebp - 0xc ]
add ebx 0x30
call [ eax + 0x68 ]
pop edi
pop esi
pop ebx
leave
retn
mov ebx [ ebp - 0xc ]
add ebx 0x30
push ebx
call [ eax + 0x64 ]
test eax eax
je r-xdata
push [ ebp - 0x8 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x60 ]
inc [ ebp - 0x8 ]
test eax eax
jne r-xdata
push edi
push edi
push edi
push edi
push ebx
call [ PeekMessageA@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x8 ] edi
cmp [ ebp - 0x4 ] edi
jne r-xdata
mov [ ebp - 0x4 ] edi
jmp r-xdata
push edi
push edi
push edi
push edi
push ebx
call [ PeekMessageA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
sub_100040ca
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
push ebx
push esi
push edi
mov [ ebp - 0x4 ] ecx
call [ eax + 0x28 ]
mov esi eax
xor ebx ebx
cmp [ esi ] ebx
je r-xdata
xor eax eax
mov edi 0xc000
mov eax [ esi + 0x4 ]
jmp r-xdata
push eax
push [ esi + 0x4 ]
call sub_1000959c
cmp eax ebx
je r-xdata
push edi
push eax
call sub_1000959c
cmp eax ebx
jne r-xdata
call [ esi ]
mov esi eax
cmp [ esi ] ebx
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov ecx [ eax + 0x10 ]
mov edx [ ecx ]
mov ecx [ ebp + 0x8 ]
cmp edx [ ecx + 0x4 ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
push ebx
push ebx
cmp eax edi
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
push [ ecx + 0xc ]
push [ ecx + 0x8 ]
mov ecx [ ebp - 0x4 ]
call [ eax + 0x14 ]
xor eax eax
inc eax
jmp r-xdata
push ebx
push ebx
add eax 0x18
sub_10004153
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x4 ] 0x100
jne r-xdata
xor eax eax
pop ebp
retn
cmp [ eax + 0x8 ] 0xd
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10004179
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx ]
cmp eax [ ebp + 0x8 ]
jne r-xdata
xor eax eax
mov eax [ ecx + 0x4 ]
cmp eax [ ebp + 0xc ]
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebp
retn 0x8
sub_10004198
mov edi edi
push ebp
mov ebp esp
push edi
call sub_10005a3f
mov eax [ eax + 0x4 ]
mov edi [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
call sub_10001cf3
mov esi eax
test esi esi
je r-xdata
cmp [ edi ] 0x0
jne r-xdata
push edi
push eax
call sub_1000b286
test eax eax
je r-xdata
mov eax [ esi + 0x20 ]
push edi
mov ecx eax
call sub_100040ca
test eax eax
je r-xdata
test esi esi
je r-xdata
xor eax eax
inc eax
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
xor eax eax
push [ edi ]
call sub_1000af07
mov ecx eax
call sub_1000c1f6
cmp eax esi
je r-xdata
pop esi
pop edi
pop ebp
retn
mov eax [ esi ]
push edi
mov ecx esi
call [ eax + 0x108 ]
jmp r-xdata
sub_1000420b
mov edi edi
push ebp
mov ebp esp
call sub_10005a3f
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
pop ebp
jmp sub_10004198
push [ ebp + 0x8 ]
mov eax [ ecx ]
call [ eax + 0x58 ]
pop ebp
retn
sub_1000422c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
cmp eax 0x200
je r-xdata
push ebx
push edi
call sub_10005454
push [ esi + 0x18 ]
mov ebx eax
push [ esi + 0x14 ]
lea edi [ ebx + 0x4c ]
mov ecx edi
call sub_10004179
test eax eax
je r-xdata
cmp eax 0xa0
je r-xdata
mov eax [ esi + 0x14 ]
mov [ edi ] eax
mov eax [ esi + 0x18 ]
mov [ edi + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ ebx + 0x54 ] eax
xor eax eax
inc eax
mov eax [ esi + 0x4 ]
cmp eax [ ebx + 0x54 ]
jne r-xdata
cmp eax 0xf
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x118
je r-xdata
pop edi
pop ebx
pop esi
pop ebp
retn
xor eax eax
inc eax
jmp r-xdata
sub_1000429d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003fd7
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_100042be
push 0x4
mov eax sub_10021ada
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
call sub_10003b3c
xor eax eax
mov ecx esi
mov [ ebp - 0x4 ] eax
mov [ esi ] r--data
mov [ esi + 0x34 ] eax
mov [ esi + 0x38 ] eax
call sub_10003f9e
mov eax esi
call sub_10010051
retn
sub_10004333
mov edi edi
push esi
push edi
call sub_10005454
mov esi eax
xor eax eax
push eax
push eax
push eax
lea edi [ esi + 0x30 ]
push edi
call [ GetMessageA@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
retn
cmp [ esi + 0x34 ] 0x36a
je r-xdata
xor eax eax
inc eax
push edi
call sub_1000420b
pop ecx
test eax eax
jne r-xdata
push edi
call [ TranslateMessage@IAT ]
push edi
call [ DispatchMessageA@IAT ]
sub_10004379
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
mov esi [ ebp + 0x8 ]
jne r-xdata
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
test esi esi
jge r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push [ eax + 0x2c ]
call [ CallNextHookEx@IAT ]
call sub_10003725
call sub_10005a3f
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
cmp esi 0x8001
jne r-xdata
push [ ebp + 0x10 ]
mov eax [ ecx ]
push esi
call [ eax + 0x70 ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_100043dd
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
mov ebx [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x4 ] ecx
cmp ebx esi
jne r-xdata
mov eax [ ebp + 0x8 ]
sub eax esi
push edi
je r-xdata
xor eax eax
jmp r-xdata
call sub_10001cf3
cmp [ ebp + 0x8 ] esi
jne r-xdata
dec eax
dec eax
je r-xdata
pop esi
pop ebx
leave
retn 0x8
xor eax eax
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x24 ] esi
je r-xdata
push [ ebx ]
call sub_1000af07
cmp eax esi
je r-xdata
sub eax 0x7fff
jmp r-xdata
mov eax [ ebx + 0x4 ]
cmp eax 0x100
jb r-xdata
mov ecx eax
call sub_1000b810
mov edi eax
cmp edi esi
je r-xdata
cmp eax 0x109
ja r-xdata
mov ecx edi
call sub_100099db
test eax eax
je r-xdata
push sub_10003741
mov ecx rw-data
call sub_100060b8
mov ebx eax
cmp ebx esi
jne r-xdata
cmp [ edi + 0x68 ] esi
je r-xdata
cmp [ ebx + 0xe0 ] esi
jne r-xdata
call sub_10003725
call sub_10001cf3
mov edi eax
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x20 ] esi
je r-xdata
mov esi [ ebp + 0xc ]
push 0x7
mov [ ebx + 0xe0 ] 0x1
pop ecx
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov esi [ ebp - 0x4 ]
mov ecx [ esi + 0x24 ]
call sub_1000db23
test eax eax
je r-xdata
push ebx
call sub_10004153
pop ecx
test eax eax
jne r-xdata
and [ ebx + 0xe0 ] 0x0
mov eax [ esi ]
lea ecx [ ebp - 0x20 ]
push ecx
mov ecx esi
call [ eax + 0x58 ]
test eax eax
je r-xdata
push esi
push 0xe146
push 0x111
push [ edi + 0x20 ]
call [ SendMessageA@IAT ]
jmp r-xdata
cmp [ ebx + 0x4 ] 0x202
jne r-xdata
and [ ebx + 0xe0 ] 0x0
xor eax eax
inc eax
jmp r-xdata
pop edi
sub_10004511
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
retn
push esi
call sub_10005454
mov esi eax
call [ GetCurrentThreadId@IAT ]
push eax
push 0x0
push sub_10004379
push 0xffffffff
call [ SetWindowsHookExA@IAT ]
mov [ esi + 0x2c ] eax
pop esi
sub_1000453f
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
xor esi esi
cmp [ ebp + 0x8 ] esi
push edi
jg r-xdata
call sub_10005a0c
add eax 0x74
mov ecx eax
call sub_10001f94
cmp [ eax + 0x10 ] esi
jne r-xdata
mov ebx [ ecx + 0x20 ]
mov edi 0x363
cmp ebx esi
je r-xdata
xor eax eax
cmp [ ebp + 0x8 ] 0x1
pop edi
pop esi
setl al
pop ebx
pop ebp
retn 0x4
call sub_1000631f
push 0x1
call sub_10006537
call sub_10005a0c
add eax 0x74
mov ecx eax
call sub_10001f94
mov esi [ eax + 0x8 ]
jmp r-xdata
mov eax [ ebx + 0x20 ]
cmp eax esi
je r-xdata
test esi esi
jne r-xdata
push eax
call [ IsWindowVisible@IAT ]
test eax eax
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
jmp r-xdata
push esi
inc esi
push esi
push edi
push [ ebx + 0x20 ]
push ebx
call sub_1000b566
push esi
push esi
push 0x0
push esi
push edi
push [ ebx + 0x20 ]
call sub_1000b851
mov esi [ esi + 0x6c ]
cmp esi ebx
je r-xdata
cmp [ esi + 0xa0 ] 0x0
jne r-xdata
push [ esi + 0x20 ]
call [ IsWindowVisible@IAT ]
test eax eax
jne r-xdata
push 0x0
mov ecx esi
call sub_1000dafc
push 0x0
push 0x1
push edi
push [ esi + 0x20 ]
push esi
call sub_1000b566
push 0x1
push 0x1
push 0x0
push 0x1
push edi
push [ esi + 0x20 ]
call sub_1000b851
cmp [ esi + 0xa0 ] eax
jl r-xdata
or [ esi + 0xa0 ] 0xffffffff
push eax
mov ecx esi
call sub_1000dafc
mov eax [ esi + 0xa0 ]
test eax eax
jle r-xdata
sub_1000466b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
push esi
sub eax 0x10
push eax
mov esi ecx
call sub_100032ba
add eax 0x10
mov [ esi ] eax
pop ecx
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100046a5
mov eax [ ecx ]
mov ecx [ eax - 0x10 ]
test ecx ecx
je r-xdata
xor eax eax
mov eax [ ecx ]
call [ eax + 0x10 ]
jmp r-xdata
retn
call sub_1000320a
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0x10 ]
test eax eax
jne r-xdata
sub_100046df
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0x18 ]
lea ebx [ esi + edi ]
push ebx
call sub_100013d0
push esi
push [ ebp + 0xc ]
mov [ ebp + 0x10 ] eax
push esi
push eax
call sub_1000f51f
mov eax [ ebp + 0x10 ]
push edi
push [ ebp + 0x14 ]
add eax esi
push edi
push eax
call sub_1000f51f
mov ecx [ ebp + 0x8 ]
add esp 0x20
push ebx
call sub_10001400
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10004728
push 0x4
mov eax sub_10021689
call sub_1000ff79
mov esi [ ebp + 0xc ]
and [ ebp - 0x10 ] 0x0
mov ecx esi
call sub_100046a5
mov ecx [ ebp + 0x8 ]
push eax
call sub_1000468e
mov esi [ esi ]
push [ ebp + 0x10 ]
and [ ebp - 0x4 ] 0x0
mov edi [ esi - 0xc ]
mov [ ebp - 0x10 ] 0x1
call sub_10001d26
push eax
push [ ebp + 0x10 ]
push edi
push esi
push [ ebp + 0x8 ]
call sub_100046df
mov eax [ ebp + 0x8 ]
add esp 0x18
call sub_10010051
retn
sub_1000477d
push 0x4
mov eax sub_10021689
call sub_1000ff79
mov esi [ ebp + 0x10 ]
and [ ebp - 0x10 ] 0x0
mov ecx esi
call sub_100046a5
mov ecx [ ebp + 0x8 ]
push eax
call sub_1000468e
mov eax [ esi ]
push [ eax - 0xc ]
and [ ebp - 0x4 ] 0x0
push eax
push [ ebp + 0xc ]
mov [ ebp - 0x10 ] 0x1
call sub_10001d26
pop ecx
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100046df
mov eax [ ebp + 0x8 ]
add esp 0x14
call sub_10010051
retn
sub_100047d2
push 0x124
mov eax sub_100216c5
call sub_10010018
mov eax [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x124 ]
mov [ ebp - 0x12c ] esi
call sub_1000466b
xor edi edi
mov [ ebp - 0x4 ] edi
cmp esi 0x80000000
jne r-xdata
lea eax [ ebp - 0x128 ]
push eax
push [ ebp - 0x124 ]
push [ ebp - 0x12c ]
call [ RegOpenKeyA@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
call sub_100052e6
cmp eax 0x1
jne r-xdata
mov ecx [ ebp - 0x124 ]
add ecx 0xfffffff0
call sub_10001540
mov eax esi
call sub_10010074
retn 0x8
push 0x104
lea eax [ ebp - 0x11c ]
push eax
push edi
push [ ebp - 0x128 ]
call [ RegEnumKeyA@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
lea eax [ ebp - 0x124 ]
push eax
lea eax [ ebp - 0x120 ]
push r--data
push eax
call sub_1000477d
add esp 0xc
push eax
lea ecx [ ebp - 0x124 ]
mov [ ebp - 0x4 ] 0x1
call sub_100033d4
mov ecx [ ebp - 0x120 ]
add ecx 0xfffffff0
mov [ ebp - 0x4 ] 0x0
call sub_10001540
mov [ ebp - 0x12c ] 0x80000001
cmp esi 0x103
je r-xdata
lea eax [ ebp - 0x11c ]
push eax
lea ecx [ ebp - 0x120 ]
mov [ ebp - 0x4 ] 0x2
call sub_100026fa
lea eax [ ebp - 0x120 ]
push eax
push [ ebp - 0x128 ]
mov [ ebp - 0x4 ] 0x3
call sub_100047d2
mov ecx [ ebp - 0x120 ]
mov esi eax
cmp esi edi
setne bl
add ecx 0xfffffff0
mov [ ebp - 0x4 ] 0x2
call sub_10001540
test bl bl
jne r-xdata
push [ ebp - 0x124 ]
push [ ebp - 0x12c ]
call [ RegDeleteKeyA@IAT ]
mov esi eax
cmp esi 0x3f2
jne r-xdata
mov [ ebp - 0x4 ] edi
jmp r-xdata
push [ ebp - 0x128 ]
call [ RegCloseKey@IAT ]
sub_10004950
push 0x124
mov eax sub_1002170e
call sub_1000ffe2
xor edi edi
mov esi ecx
mov [ ebp - 0x120 ] edi
mov [ ebp - 0x12c ] edi
call sub_10004641
mov [ ebp - 0x128 ] eax
cmp eax edi
je r-xdata
cmp [ esi + 0x54 ] edi
je r-xdata
lea eax [ ebp - 0x128 ]
push eax
mov ecx esi
call sub_10004652
cmp eax edi
je r-xdata
xor eax eax
inc eax
call sub_10010065
retn
xor eax eax
cmp [ esi + 0x68 ] edi
setne al
cmp eax edi
jne r-xdata
cmp [ ebp - 0x128 ] edi
jne r-xdata
mov edx [ eax ]
push edi
push edi
push 0xfffffffc
push edi
mov ecx eax
call [ edx + 0xc ]
push r--data
lea ecx [ ebp - 0x11c ]
call sub_100026fa
push [ esi + 0x54 ]
lea ecx [ ebp - 0x11c ]
mov [ ebp - 0x4 ] edi
call sub_100035ce
push r--data
lea eax [ ebp - 0x11c ]
push eax
lea eax [ ebp - 0x130 ]
push eax
call sub_10004728
push [ esi + 0x68 ]
mov [ ebp - 0x4 ] 0x1
push eax
lea eax [ ebp - 0x124 ]
push eax
call sub_10004728
add esp 0x18
mov ecx [ ebp - 0x130 ]
add ecx 0xfffffff0
mov [ ebp - 0x4 ] 0x3
call sub_10001540
lea eax [ ebp - 0x124 ]
push eax
mov esi 0x80000001
push esi
call sub_100047d2
lea eax [ ebp - 0x120 ]
push eax
push [ ebp - 0x11c ]
push esi
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
call sub_10003725
lea eax [ ebp - 0x12c ]
push eax
lea eax [ ebp - 0x118 ]
push eax
push [ ebp - 0x124 ]
push esi
call [ RegQueryValueA@IAT ]
mov ecx [ ebp - 0x124 ]
add ecx 0xfffffff0
call sub_10001540
mov ecx [ ebp - 0x11c ]
add ecx 0xfffffff0
call sub_10001540
push 0x104
lea eax [ ebp - 0x118 ]
push eax
push edi
push [ ebp - 0x120 ]
call [ RegEnumKeyA@IAT ]
cmp eax 0x103
jne r-xdata
push [ ebp - 0x120 ]
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x11c ]
push eax
push esi
call sub_100047d2
sub_10004ac3
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
test edi edi
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp edi 0x1
je r-xdata
call sub_10003725
push 0x2
call sub_10006288
add [ esi + 0x80 ] edi
cmp [ esi + 0x80 ] 0x0
jle r-xdata
cmp edi 0xffffffff
je r-xdata
push [ esi + 0x84 ]
and [ esi + 0x80 ] 0x0
call [ SetCursor@IAT ]
push [ rw-data ]
call [ SetCursor@IAT ]
test edi edi
jle r-xdata
push 0x2
call sub_100062fa
pop edi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x80 ] 0x1
jne r-xdata
mov [ esi + 0x84 ] eax
jmp r-xdata
sub_10004b54
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
lea eax [ ecx + 0x88 ]
cmp [ eax ] 0x0
je r-xdata
call sub_10003725
pop ebp
retn 0x4
mov eax [ eax ]
mov edx [ eax ]
mov ecx eax
pop ebp
jmp [ edx + 0x4 ]
sub_10004b96
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
test ecx ecx
jne r-xdata
add eax 0x88
cmp [ eax ] 0x0
jne r-xdata
call sub_10003725
mov eax [ eax ]
mov edx [ eax ]
push ecx
mov ecx eax
call [ edx + 0xc ]
mov eax [ ecx ]
push 0x0
call [ eax ]
jmp r-xdata
pop ebp
retn 0x4
sub_10004be3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jl r-xdata
call sub_10003725
cmp eax [ ecx + 0x4 ]
jl r-xdata
mov ecx [ ecx + 0x8 ]
lea eax [ ecx + eax * 4 ]
pop ebp
retn 0x4
sub_10004c16
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x88 ]
push edi
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov edx 0xe110
cmp eax edx
jb r-xdata
call sub_10003725
mov edi [ ecx + 0x4 ]
add edi edx
cmp eax edi
jae r-xdata
lea edi [ eax - 0xe110 ]
push edi
call sub_10004be3
mov eax [ eax ]
mov edx [ esi ]
push eax
mov ecx esi
call [ edx + 0x88 ]
test eax eax
jne r-xdata
xor eax eax
pop edi
inc eax
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x88 ]
mov eax [ ecx ]
push edi
call [ eax ]
sub_10004c80
push 0x14
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x20 ] ebx
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ MessageBoxA@IAT ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10004ce2
mov eax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_10004ce2
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ebx
sete al
mov esi eax
cmp esi ebx
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push ebx
call sub_10005169
cmp esi ebx
je r-xdata
sub_10004d17
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10001cf3
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
mov ecx esi
call [ eax + 0x128 ]
test eax eax
je r-xdata
lea eax [ esi + 0x80 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ eax ]
push [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx eax
call [ edx + 0x64 ]
sub_10004d50
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ GetParent@IAT ]
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
jne r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
call sub_10004c74
test eax eax
jne r-xdata
mov edi esi
mov eax esi
test esi esi
je r-xdata
push esi
call ebx
mov esi eax
mov esi [ eax + 0x20 ]
jmp r-xdata
call sub_10001cf3
test eax eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push eax
mov edi eax
call ebx
test eax eax
jne r-xdata
test esi esi
jne r-xdata
xor esi esi
jmp r-xdata
mov ebx [ ebp + 0xc ]
test ebx ebx
je r-xdata
test esi esi
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
test edi edi
je r-xdata
push esi
call [ GetLastActivePopup@IAT ]
mov esi eax
and [ ebx ] 0x0
push edi
call [ IsWindowEnabled@IAT ]
test eax eax
je r-xdata
cmp edi esi
je r-xdata
push 0x0
push edi
mov [ ebx ] edi
call [ EnableWindow@IAT ]
jmp r-xdata
sub_10004df0
mov edi edi
push ebp
mov ebp esp
sub esp 0x11c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
push esi
mov [ ebp - 0x11c ] eax
call sub_10004d17
pop ecx
lea eax [ ebp - 0x10c ]
push eax
push esi
call sub_10004d50
mov ebx eax
mov [ ebp - 0x118 ] ebx
cmp ebx [ ebp - 0x10c ]
je r-xdata
and [ ebp - 0x114 ] esi
lea eax [ ebp - 0x114 ]
push eax
push ebx
call [ GetWindowThreadProcessId@IAT ]
test ebx ebx
je r-xdata
push 0x1
push ebx
call [ EnableWindow@IAT ]
test edi edi
je r-xdata
call [ GetCurrentProcessId@IAT ]
cmp [ ebp - 0x114 ] eax
jne r-xdata
and [ ebp - 0x110 ] 0x0
test esi esi
je r-xdata
lea esi [ edi + 0x78 ]
push 0x0
push 0x0
push 0x376
push ebx
call [ SendMessageA@IAT ]
test eax eax
je r-xdata
test [ ebp + 0x10 ] 0xf0
jne r-xdata
mov eax [ esi ]
mov [ ebp - 0x110 ] eax
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
mov esi eax
jmp r-xdata
mov [ ebp - 0x108 ] 0x0
test edi edi
je r-xdata
mov eax [ ebp + 0x10 ]
and eax 0xf
cmp eax 0x1
jbe r-xdata
add eax 0x30000
mov [ esi ] eax
lea ebx [ ebp - 0x108 ]
mov edi 0x104
push edi
mov eax ebx
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
cmp eax edi
jne r-xdata
mov ebx [ edi + 0x50 ]
jmp r-xdata
or [ ebp + 0x10 ] 0x30
add eax 0xfffffffd
cmp eax 0x1
ja r-xdata
push [ ebp + 0x10 ]
push ebx
push [ ebp - 0x11c ]
push [ ebp - 0x118 ]
call sub_10004c80
add esp 0x10
mov edi eax
test esi esi
je r-xdata
mov [ ebp - 0x5 ] 0x0
or [ ebp + 0x10 ] 0x20
jmp r-xdata
cmp [ ebp - 0x10c ] 0x0
je r-xdata
mov eax [ ebp - 0x110 ]
mov [ esi ] eax
push 0x1
call sub_10004d17
pop ecx
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
push 0x1
push [ ebp - 0x10c ]
call [ EnableWindow@IAT ]
sub_10004f51
mov edi edi
push ebp
mov ebp esp
call sub_10005a0c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push 0x0
call sub_10004df0
add esp 0x10
pop ebp
retn 0xc
mov edx [ eax ]
mov ecx eax
pop ebp
jmp [ edx + 0x98 ]
sub_10004f9f
push 0x4
mov eax sub_1002173e
call sub_1000ff79
lea ecx [ ebp - 0x10 ]
call sub_10001560
push [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_1000246a
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x10 ]
push eax
push [ ebp + 0xc ]
push esi
call sub_10004f51
lea ecx [ esi - 0x10 ]
mov edi eax
call sub_10001540
mov eax edi
call sub_10010051
retn 0xc
mov eax [ ebp + 0x8 ]
sub_10004ff4
push 0xc
mov eax sub_10021759
call sub_1000ffac
xor eax eax
xor edx edx
cmp ecx edx
setne al
cmp eax edx
jne r-xdata
cmp [ ecx + 0xc ] edx
jne r-xdata
call sub_10003725
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x4 ] edx
call [ ecx + 0xc ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x14 ]
xor eax eax
jmp r-xdata
call sub_10010051
retn
sub_1000503e
mov edi edi
push ebp
mov ebp esp
mov eax ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
call sub_10003725
cmp eax [ ebp + 0x8 ]
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ eax + 0x10 ]
test eax eax
jne r-xdata
pop ebp
retn 0x4
sub_10005069
mov edi edi
push ebp
mov ebp esp
test ecx ecx
jne r-xdata
mov eax [ ecx ]
call [ eax ]
test eax eax
je r-xdata
call sub_10003725
mov ecx eax
pop ebp
jmp sub_1000503e
sub_10005087
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10005a0c
push 0x0
mov esi eax
call sub_10006288
push [ ebp + 0x8 ]
lea ecx [ esi + 0x1c ]
call sub_10005c27
push 0x0
call sub_100062fa
pop esi
pop ebp
retn 0x4
sub_100050b7
cmp [ rw-data ] 0x0
jne r-xdata
retn
push r--data
call [ GetModuleHandleA@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push eax
call esi
push r--data
push [ rw-data ]
mov [ rw-data ] eax
call esi
push r--data
push [ rw-data ]
mov [ rw-data ] eax
call esi
push r--data
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
pop esi
call sub_10003725
sub_10005180
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10003725
push 0x2
pop eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005152
neg eax
sbb eax eax
neg eax
jmp r-xdata
pop ebp
retn 0x8
sub_100051b3
mov edi edi
push ebp
mov ebp esp
sub esp 0x230
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov esi ecx
call sub_100050b7
mov edi [ esi + 0x8 ]
xor eax eax
mov [ ebp - 0x6 ] ax
mov [ ebp - 0x8 ] ax
push 0x105
lea eax [ ebp - 0x210 ]
push eax
push edi
call [ GetModuleFileNameW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000f298
leave
retn
cmp [ ebp - 0x8 ] 0x0
je r-xdata
lea eax [ ebp - 0x210 ]
mov [ ebp - 0x228 ] eax
lea eax [ ebp - 0x230 ]
push eax
mov [ ebp - 0x230 ] 0x20
mov [ ebp - 0x22c ] 0x88
mov [ ebp - 0x21c ] 0x2
mov [ ebp - 0x214 ] edi
call sub_10005125
mov [ esi + 0x80 ] eax
cmp eax 0xffffffff
jne r-xdata
push 0x6f
call [ SetLastError@IAT ]
jmp r-xdata
cmp [ esi + 0x80 ] 0xffffffff
jne r-xdata
lea eax [ ebp - 0x230 ]
push eax
mov [ ebp - 0x21c ] 0x3
call sub_10005125
mov [ esi + 0x80 ] eax
lea eax [ ebp - 0x230 ]
push eax
mov [ ebp - 0x21c ] 0x1
call sub_10005125
mov [ esi + 0x80 ] eax
cmp eax 0xffffffff
jne r-xdata
and [ esi + 0x80 ] 0x0
sub_100052af
mov edi edi
push esi
mov esi ecx
lea eax [ esi + 0x20 ]
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
pop esi
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
and [ esi + 0x1c ] 0x0
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
and [ esi + 0x8 ] 0x0
sub_10005305
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x2c ]
push edi
mov edi [ UnhookWindowsHookEx@IAT ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call edi
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
push eax
call edi
pop edi
pop esi
retn
push esi
call sub_1000fb05
pop ecx
sub_1000533c
mov edi edi
push esi
mov esi ecx
mov ecx [ esi + 0x3c ]
push edi
mov [ esi ] r--data
test ecx ecx
je r-xdata
push [ esi + 0x48 ]
call sub_100016e7
xor edi edi
pop ecx
mov ecx [ esi + 0x14 ]
inc edi
test ecx ecx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x144 ]
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov ecx [ esi + 0x20 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov ecx [ esi + 0x24 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov ecx [ esi + 0x30 ]
test ecx ecx
je r-xdata
jmp r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax + 0x4 ]
cmp [ eax + 0xc ] 0x0
jne r-xdata
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax + 0x4 ]
mov ecx [ esi + 0x38 ]
call sub_1000df59
push eax
call sub_100016e7
mov eax [ esi + 0x38 ]
pop ecx
pop edi
pop esi
retn
mov eax [ ecx ]
push edi
call [ eax + 0x4 ]
sub_100053ea
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005305
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_10005434
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000533c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_1000546d
push 0x4
mov eax sub_1002178a
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x48 ]
xor edi edi
inc edi
mov [ ebp - 0x4 ] edi
test ecx ecx
je r-xdata
mov ecx [ esi + 0x70 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov eax [ esi + 0x78 ]
mov ecx [ eax ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
lea edx [ esi + 0x4c ]
push edx
call [ eax + 0xc ]
mov ecx [ esi + 0x70 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x78 ]
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
mov eax [ ecx ]
push edi
call [ eax + 0x4 ]
push [ esi + 0x78 ]
call sub_100016e7
lea edi [ esi + 0x80 ]
mov eax [ edi ]
pop ecx
test eax eax
je r-xdata
mov eax [ ecx ]
push edi
call [ eax ]
lea ecx [ esi + 0x74 ]
mov [ ebp - 0x4 ] 0x0
call sub_10006142
mov ecx [ esi + 0x34 ]
sub ecx 0x10
call sub_10001540
call sub_10010051
retn
cmp eax 0xffffffff
je r-xdata
push eax
call sub_1000513d
or [ edi ] 0xffffffff
sub_10005510
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call sub_100046c8
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000555e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005538
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_1000557e
push 0x4
mov eax sub_1002173e
call sub_1000ff79
mov esi ecx
push r--data
lea ecx [ ebp - 0x10 ]
call sub_100026fa
lea eax [ ebp - 0x10 ]
xor edi edi
push eax
mov ecx esi
mov [ ebp - 0x4 ] edi
call sub_10005510
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
call sub_10001540
mov [ esi ] r--data
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov [ esi + 0x20 ] edi
mov [ esi + 0x24 ] edi
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
mov [ esi + 0x30 ] edi
mov [ esi + 0x34 ] edi
mov [ esi + 0x38 ] edi
mov [ esi + 0x3c ] edi
mov [ esi + 0x40 ] edi
mov [ esi + 0x44 ] edi
mov [ esi + 0x48 ] edi
mov [ esi + 0x4c ] edi
mov [ esi + 0x50 ] edi
mov [ esi + 0x54 ] edi
mov [ esi + 0x58 ] edi
mov [ esi + 0x5c ] edi
mov [ esi + 0x60 ] edi
mov [ esi + 0x64 ] edi
mov [ esi + 0x68 ] edi
mov [ esi + 0x6c ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0x74 ] edi
mov [ esi + 0x78 ] edi
mov [ esi + 0x7c ] edi
mov [ esi + 0x80 ] edi
mov [ esi + 0x84 ] edi
mov [ esi + 0x88 ] edi
mov [ esi + 0x8c ] edi
mov [ esi + 0x90 ] edi
mov [ esi + 0x94 ] edi
mov [ esi + 0x98 ] edi
mov [ esi + 0x9c ] edi
mov [ esi + 0xa0 ] edi
mov [ esi + 0xa4 ] edi
mov [ esi + 0xa8 ] edi
mov [ esi + 0xac ] edi
mov [ esi + 0xb0 ] edi
mov [ esi + 0xb4 ] edi
mov [ esi + 0xb8 ] edi
mov [ esi + 0xbc ] edi
mov [ esi + 0xc0 ] edi
mov [ esi + 0xc4 ] edi
mov [ esi + 0xc8 ] edi
mov [ esi + 0xcc ] edi
mov [ esi + 0xd0 ] edi
mov [ esi + 0xd4 ] edi
mov [ esi + 0xd8 ] edi
mov [ esi + 0xdc ] edi
mov [ esi + 0xe0 ] edi
mov [ esi + 0xe4 ] edi
mov [ esi + 0xe8 ] edi
mov [ esi + 0xec ] edi
mov [ esi + 0xf0 ] edi
mov [ esi + 0xf4 ] edi
mov [ esi + 0xf8 ] edi
mov [ esi + 0xfc ] edi
mov [ esi + 0x100 ] edi
mov [ esi + 0x104 ] edi
mov [ esi + 0x108 ] edi
mov [ esi + 0x10c ] edi
mov [ esi + 0x110 ] edi
mov [ esi + 0x114 ] edi
mov [ esi + 0x118 ] edi
mov [ esi + 0x11c ] edi
mov [ esi + 0x120 ] edi
mov [ esi + 0x124 ] edi
mov [ esi + 0x128 ] edi
mov [ esi + 0x12c ] edi
mov [ esi + 0x130 ] edi
mov [ esi + 0x134 ] edi
mov [ esi + 0x138 ] edi
mov [ esi + 0x13c ] edi
mov [ esi + 0x140 ] edi
mov [ esi + 0x144 ] edi
mov [ esi + 0x148 ] edi
mov [ esi + 0x14c ] edi
mov [ esi + 0x150 ] edi
mov [ esi + 0x154 ] edi
mov [ esi + 0x158 ] edi
mov [ esi + 0x15c ] edi
mov [ esi + 0x160 ] edi
mov [ esi + 0x164 ] edi
mov [ esi + 0x168 ] edi
mov [ esi + 0x16c ] edi
mov [ esi + 0x170 ] edi
mov [ esi + 0x174 ] edi
mov [ esi + 0x178 ] edi
mov [ esi + 0x17c ] edi
mov [ esi + 0x180 ] edi
mov [ esi + 0x184 ] edi
mov eax esi
call sub_10010051
retn
sub_100057a2
push 0x4
mov eax sub_1002173e
call sub_1000ff79
mov esi ecx
push r--data
lea ecx [ ebp - 0x10 ]
call sub_100026fa
lea eax [ ebp - 0x10 ]
xor edi edi
push eax
mov ecx esi
mov [ ebp - 0x4 ] edi
call sub_10005510
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
call sub_10001540
mov [ esi ] r--data
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov [ esi + 0x20 ] edi
mov [ esi + 0x24 ] edi
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
mov [ esi + 0x30 ] edi
mov [ esi + 0x34 ] edi
mov [ esi + 0x38 ] edi
mov [ esi + 0x3c ] edi
mov [ esi + 0x40 ] edi
mov [ esi + 0x44 ] edi
mov [ esi + 0x48 ] edi
mov [ esi + 0x4c ] edi
mov [ esi + 0x50 ] edi
mov [ esi + 0x54 ] edi
mov [ esi + 0x58 ] edi
mov [ esi + 0x5c ] edi
mov [ esi + 0x60 ] edi
mov eax esi
call sub_10010051
retn
sub_10005825
push 0x4
mov eax sub_1002173e
call sub_1000ff79
mov esi ecx
push r--data
lea ecx [ ebp - 0x10 ]
call sub_100026fa
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x10 ]
push eax
mov ecx esi
call sub_10005510
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
call sub_10001540
mov [ esi ] r--data
and [ esi + 0x10 ] 0x0
mov eax esi
call sub_10010051
retn
sub_1000586c
push 0xc
mov eax sub_100217d6
call sub_1000ffac
mov esi ecx
mov [ ebp - 0x14 ] esi
mov [ esi ] r--data
xor edi edi
mov [ esi + 0x1c ] edi
mov [ esi + 0x20 ] edi
lea ebx [ esi + 0x34 ]
mov ecx ebx
mov [ esi + 0x24 ] edi
mov [ esi + 0x28 ] edi
call sub_10001560
mov [ esi + 0x40 ] edi
mov [ esi + 0x44 ] edi
or [ esi + 0x50 ] 0xffffffff
mov [ ebp - 0x4 ] edi
mov [ esi + 0x54 ] edi
mov [ esi + 0x68 ] edi
mov [ esi + 0x6c ] edi
mov al [ ebp + 0x8 ]
push 0x1000
mov ecx ebx
mov [ esi + 0x28 ] 0x20
mov [ esi + 0x20 ] 0x14
mov [ esi + 0x18 ] edi
mov [ esi + 0x14 ] al
mov [ ebp - 0x4 ] 0x2
call sub_100013d0
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
jmp sub_10005901
sub_10005901
push 0xc
mov [ esi + 0x30 ] ebx
mov [ esi + 0x44 ] 0x18
call sub_100016b8
mov [ esi + 0x78 ] eax
mov [ esp ] 0x188
call sub_10005a90
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov [ ebp - 0x4 ] 0x4
cmp ecx edi
je r-xdata
xor eax eax
call sub_1000557e
jmp r-xdata
xor eax eax
call sub_100057a2
jmp r-xdata
mov ecx [ esi + 0x78 ]
push 0x64
mov [ ebp - 0x4 ] bl
mov [ ecx ] eax
call sub_10005a90
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov [ ebp - 0x4 ] 0x5
cmp ecx edi
je r-xdata
xor eax eax
call sub_10005825
jmp r-xdata
mov ecx [ esi + 0x78 ]
push 0x14
mov [ ebp - 0x4 ] bl
mov [ ecx + 0x4 ] eax
call sub_10005a90
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov [ ebp - 0x4 ] 0x6
cmp ecx edi
je r-xdata
mov ecx [ esi + 0x78 ]
mov [ ecx + 0x8 ] eax
mov [ esi + 0x7c ] ebx
mov [ esi + 0x80 ] edi
mov [ esi + 0x84 ] edi
mov [ esi + 0x88 ] edi
mov eax esi
call sub_10010051
retn 0x4
sub_100059bd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000546d
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_100059dd
push 0x4
mov eax sub_100214e9
call sub_1000ff79
push 0x8c
call sub_10005a90
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
call sub_10010051
retn
call sub_100059a7
sub_10005a0c
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
mov eax [ eax + 0x4 ]
test eax eax
jne r-xdata
jmp sub_10003725
retn
push sub_100059dd
mov ecx rw-data
call sub_10005b74
test eax eax
je r-xdata
sub_10005a58
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a0c
cmp [ eax + 0x7c ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x80 ]
cmp eax 0xffffffff
je r-xdata
push esi
push eax
call sub_10005152
mov [ esi + 0x4 ] eax
jmp r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10005ac3
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
push edi
lea ebx [ esi + 0x1c ]
push ebx
call [ EnterCriticalSection@IAT ]
mov edi [ ebp + 0x8 ]
test edi edi
jle r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
xor eax eax
cmp edi [ esi + 0xc ]
jge r-xdata
push [ esi ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
cmp edi [ eax + 0x8 ]
jge r-xdata
mov eax [ eax + 0xc ]
mov edi [ eax + edi * 4 ]
push ebx
call [ LeaveCriticalSection@IAT ]
mov eax edi
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_10005b15
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov esi ecx
lea edi [ esi + 0x1c ]
push edi
call [ EnterCriticalSection@IAT ]
xor ecx ecx
inc ecx
cmp [ esi + 0xc ] ecx
jle r-xdata
push edi
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x10 ]
lea eax [ eax + ecx * 8 ]
cmp [ eax + 0x4 ] 0x0
jne r-xdata
inc ecx
cmp ecx [ esi + 0xc ]
jl r-xdata
test [ eax ] 0x1
je r-xdata
mov edx [ ebp + 0x8 ]
mov [ eax + 0x4 ] edx
sub_10005b74
push 0x8
mov eax sub_100217f1
call sub_1000ffac
mov esi ecx
mov eax [ esi ]
test eax eax
jne r-xdata
mov eax [ esi ]
call sub_10010051
retn 0x4
push 0x10
call sub_10006288
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push 0x10
call sub_100062fa
call [ ebp + 0x8 ]
mov [ esi ] eax
sub_10005bc4
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
test eax eax
je r-xdata
leave
retn
mov eax [ ecx ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10005c27
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
mov esi ecx
call sub_10005c0d
mov ecx [ esi ]
mov [ eax ] ecx
mov [ esi ] edi
pop edi
pop esi
pop ebp
retn 0x4
sub_10005c45
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
push edi
mov edi [ esi ]
test edi edi
jne r-xdata
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
cmp edi ebx
jne r-xdata
xor eax eax
jmp r-xdata
push edi
mov ecx esi
call sub_10005c0d
cmp [ eax ] ebx
je r-xdata
push ebx
call sub_10005c0d
mov eax [ eax ]
mov [ esi ] eax
jmp r-xdata
pop edi
pop esi
leave
retn 0x4
test edi edi
je r-xdata
push edi
mov ecx esi
call sub_10005c0d
mov edi [ eax ]
test edi edi
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x4 ]
pop ebx
push ebx
mov ecx esi
call sub_10005c0d
push edi
mov ecx esi
mov ebx eax
call sub_10005c0d
mov ecx [ ebx ]
mov [ eax ] ecx
sub_10005cb6
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi ecx
lea eax [ esi + 0x1c ]
push edi
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
mov ebx [ esi + 0x4 ]
mov edi [ esi + 0x8 ]
cmp edi ebx
jge r-xdata
xor edi edi
inc edi
cmp ebx edi
jle r-xdata
mov eax [ esi + 0x10 ]
test [ eax + edi * 8 ] 0x1
je r-xdata
mov eax [ esi + 0x10 ]
add ebx 0x20
test eax eax
jne r-xdata
mov eax [ esi + 0x10 ]
add eax 0x8
cmp edi [ esi + 0xc ]
jl r-xdata
push eax
call [ GlobalHandle@IAT ]
push eax
mov [ ebp - 0x8 ] eax
call [ GlobalUnlock@IAT ]
push 0x2002
push 0x8
push ebx
call sub_1000331a
pop ecx
pop ecx
push eax
push [ ebp - 0x8 ]
call [ GlobalReAlloc@IAT ]
push 0x8
push ebx
call sub_1000331a
pop ecx
pop ecx
push eax
push 0x2
call [ GlobalAlloc@IAT ]
jmp r-xdata
cmp edi ebx
jl r-xdata
inc edi
add eax 0x8
cmp edi ebx
jl r-xdata
mov eax [ esi + 0x10 ]
push [ ebp - 0x4 ]
lea eax [ eax + edi * 8 ]
or [ eax ] 0x1
lea eax [ edi + 0x1 ]
mov [ esi + 0x8 ] eax
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
pop ebx
leave
retn
lea eax [ edi + 0x1 ]
mov [ esi + 0xc ] eax
push eax
call [ GlobalLock@IAT ]
mov ecx [ esi + 0x4 ]
mov edx ebx
sub edx ecx
shl edx 0x3
push edx
mov [ ebp - 0x8 ] eax
lea eax [ eax + ecx * 8 ]
push 0x0
push eax
call sub_100105c0
mov eax [ ebp - 0x8 ]
add esp 0xc
mov [ esi + 0x4 ] ebx
mov [ esi + 0x10 ] eax
mov esi [ esi + 0x10 ]
test esi esi
je r-xdata
test eax eax
jne r-xdata
test [ eax ] 0x1
je r-xdata
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
call sub_100036ed
push esi
call [ GlobalHandle@IAT ]
push eax
call [ GlobalLock@IAT ]
sub_10005dce
xor eax eax
push esi
mov esi ecx
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x1
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
call [ TlsAlloc@IAT ]
mov [ esi ] eax
cmp eax 0xffffffff
jne r-xdata
lea eax [ esi + 0x1c ]
push eax
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
call sub_100036ed
sub_10005e0d
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov ebx ecx
push edi
lea esi [ ebx + 0x1c ]
push esi
mov [ ebp - 0x4 ] esi
call [ EnterCriticalSection@IAT ]
mov edi [ ebp + 0x8 ]
test edi edi
jle r-xdata
push esi
cmp edi [ ebx + 0xc ]
jge r-xdata
mov esi [ ebx + 0x14 ]
jmp r-xdata
test esi esi
jne r-xdata
cmp edi [ esi + 0x8 ]
jge r-xdata
mov eax [ ebx + 0x10 ]
push [ ebp - 0x4 ]
lea eax [ eax + edi * 8 ]
and [ eax ] 0xfffffffe
jmp r-xdata
mov esi [ esi + 0x4 ]
mov eax [ esi + 0xc ]
mov ecx [ eax + edi * 4 ]
test ecx ecx
je r-xdata
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebx
leave
retn 0x4
mov eax [ esi + 0xc ]
and [ eax + edi * 4 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10005e75
push 0x10
mov eax sub_1002180c
call sub_1000ffac
mov edi ecx
mov [ ebp - 0x18 ] edi
lea esi [ edi + 0x1c ]
push esi
mov [ ebp - 0x14 ] esi
call [ EnterCriticalSection@IAT ]
mov eax [ ebp + 0x8 ]
xor ebx ebx
cmp eax ebx
jle r-xdata
push esi
cmp eax [ edi + 0xc ]
jge r-xdata
push [ edi ]
call [ TlsGetValue@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x10
mov [ ebp - 0x4 ] ebx
call sub_10005a90
cmp eax ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ esi + 0x8 ]
jl r-xdata
xor esi esi
mov [ eax ] r--data
mov esi eax
jmp r-xdata
mov eax [ esi + 0xc ]
cmp eax ebx
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
cmp [ esi + 0xc ] ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push esi
lea ecx [ edi + 0x14 ]
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call sub_10005c27
jmp r-xdata
push [ ebp - 0x14 ]
jmp r-xdata
cmp ecx [ esi + 0x8 ]
jge r-xdata
push 0x2
push 0x4
push [ edi + 0xc ]
call sub_1000331a
pop ecx
pop ecx
push eax
push [ esi + 0xc ]
call [ LocalReAlloc@IAT ]
push 0x4
push [ edi + 0xc ]
call sub_1000331a
pop ecx
pop ecx
push eax
push ebx
call [ LocalAlloc@IAT ]
jmp r-xdata
call [ LeaveCriticalSection@IAT ]
call sub_10010051
retn 0x8
mov edx [ ebp + 0xc ]
mov [ eax + ecx * 4 ] edx
mov ecx [ esi + 0x8 ]
mov [ esi + 0xc ] eax
mov edx [ edi + 0xc ]
sub edx ecx
shl edx 0x2
push edx
lea eax [ eax + ecx * 4 ]
push ebx
push eax
call sub_100105c0
mov eax [ edi + 0xc ]
add esp 0xc
push esi
mov [ esi + 0x8 ] eax
push [ edi ]
call [ TlsSetValue@IAT ]
mov ecx [ ebp + 0x8 ]
push [ ebp - 0x14 ]
call [ LeaveCriticalSection@IAT ]
call sub_100036ed
cmp eax ebx
jne r-xdata
sub_10005faa
mov edi edi
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_10005fc5
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
inc ebx
cmp [ esi + 0x8 ] ebx
push edi
mov edi ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
lea ebx [ edi + 0x1c ]
push ebx
call [ EnterCriticalSection@IAT ]
push esi
lea ecx [ edi + 0x14 ]
call sub_10005c45
push ebx
call [ LeaveCriticalSection@IAT ]
push [ esi + 0xc ]
call [ LocalFree@IAT ]
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax ]
push 0x0
push [ edi ]
call [ TlsSetValue@IAT ]
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
mov ecx [ eax + ebx * 4 ]
test ecx ecx
je r-xdata
mov ecx [ edi + 0x10 ]
cmp [ ecx + ebx * 8 + 0x4 ] eax
je r-xdata
mov eax [ esi + 0xc ]
and [ eax + ebx * 4 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax ]
mov eax [ esi + 0xc ]
cmp [ eax + ebx * 4 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
inc ebx
cmp ebx [ esi + 0x8 ]
jl r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000605c
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
lea ebx [ esi + 0x1c ]
push ebx
call [ EnterCriticalSection@IAT ]
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
push [ esi ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
pop ebp
retn 0x8
push edi
push [ ebp + 0x8 ]
mov ecx esi
push eax
call sub_10005fc5
jmp r-xdata
push [ ebp + 0x8 ]
mov edi [ eax + 0x4 ]
push eax
mov ecx esi
call sub_10005fc5
mov eax edi
test edi edi
jne r-xdata
pop edi
sub_100060b8
push 0x4
mov eax sub_10021837
call sub_1000ff79
mov esi ecx
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
test eax eax
jne r-xdata
cmp [ esi ] 0x0
jne r-xdata
call sub_10003725
push [ esi ]
mov ecx [ rw-data ]
call sub_10005ac3
mov edi eax
test edi edi
jne r-xdata
mov ecx [ rw-data ]
test ecx ecx
jne r-xdata
mov eax edi
call sub_10010051
retn 0x4
call [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov edi eax
push edi
push [ esi ]
call sub_10005e75
call sub_10005cb6
mov [ esi ] eax
test eax eax
je r-xdata
mov ecx rw-data
mov [ ebp - 0x10 ] ecx
and [ ebp - 0x4 ] 0x0
call sub_10005dce
or [ ebp - 0x4 ] 0xffffffff
mov ecx eax
mov [ rw-data ] ecx
test eax eax
je r-xdata
sub_10006142
mov edi edi
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi ] 0x0
pop esi
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push eax
call sub_10005e0d
sub_1000617b
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x14 ]
push edi
test eax eax
je r-xdata
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
mov edi [ eax + 0x4 ]
push 0x0
push eax
mov ecx esi
call sub_10005fc5
mov eax edi
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
push eax
call [ TlsFree@IAT ]
add esi 0x1c
push esi
call [ DeleteCriticalSection@IAT ]
pop edi
pop esi
retn
push eax
call [ GlobalHandle@IAT ]
mov edi eax
push edi
call [ GlobalUnlock@IAT ]
push edi
call [ GlobalFree@IAT ]
sub_100061d4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000617b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10006243
cmp [ rw-data ] 0x0
je r-xdata
retn
dec [ rw-data ]
push ebx
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
push rw-data
call edi
mov esi rw-data
mov ebx rw-data
add ebx 0x18
add esi 0x4
cmp ebx rw-data
jl r-xdata
push ebx
call edi
dec [ esi ]
cmp [ esi ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
sub_10006288
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
cmp edi 0x11
jb r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10003725
mov ebx [ EnterCriticalSection@IAT ]
lea esi [ edi * 4 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
call sub_1000621f
imul edi edi 0x18
add edi rw-data
push edi
call ebx
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push rw-data
call ebx
cmp [ esi ] 0x0
jne r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
mov eax edi
imul eax eax 0x18
add eax rw-data
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi ]
sub_100062fa
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x11
jb r-xdata
imul eax eax 0x18
add eax rw-data
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn 0x4
call sub_10003725
sub_10006328
push 0x4
mov eax sub_1002188e
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
mov edi [ ebp + 0x8 ]
push 0x40
mov [ esi ] r--data
push [ edi + 0x4 ]
lea ecx [ esi + 0x4 ]
call sub_1000df8a
and [ ebp - 0x4 ] 0x0
push 0xa
lea ecx [ esi + 0x1c ]
call sub_1000de04
lea ebx [ esi + 0x38 ]
push 0x4
mov ecx ebx
mov [ ebp - 0x4 ] 0x1
call sub_1000de04
xor eax eax
mov [ ebp - 0x4 ] 0x2
cmp [ ebp + 0xc ] eax
jne r-xdata
cmp [ ebp + 0x10 ] eax
je r-xdata
call sub_10003725
push eax
push 0x7
mov ecx ebx
call sub_1000dbe7
mov eax [ ebp + 0xc ]
mov [ esi + 0x14 ] eax
mov eax [ ebp + 0x10 ]
mov [ esi + 0x18 ] eax
mov eax [ ebp + 0x14 ]
mov [ esi + 0x58 ] eax
mov eax [ ebp + 0x18 ]
mov [ esi + 0x5c ] eax
mov [ esi + 0x54 ] edi
mov eax esi
call sub_10010051
retn 0x14
sub_100063b1
push 0x8
mov eax sub_10021852
call sub_1000ffac
mov esi ecx
mov edi [ ebp + 0x8 ]
test edi edi
jne r-xdata
push edi
lea ecx [ esi + 0x1c ]
call sub_1000dccb
test eax eax
jne r-xdata
xor eax eax
call sub_10010051
retn 0x4
lea ecx [ esi + 0x38 ]
push edi
call sub_1000dccb
test eax eax
je r-xdata
push sub_1000761f
call sub_100016a1
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x4 ]
mov [ ebp + 0x8 ] eax
call sub_1000dfd4
mov ebx eax
test ebx ebx
jne r-xdata
mov ecx [ esi + 0x58 ]
add ecx eax
mov [ ecx ] edi
cmp [ esi + 0x5c ] 0x2
jne r-xdata
push ebx
call [ esi + 0x14 ]
push edi
lea ecx [ esi + 0x38 ]
call sub_1000de92
push [ ebp + 0x8 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ eax ] ebx
call sub_100016a1
mov eax [ esi + 0x58 ]
add eax ebx
mov [ eax ] edi
cmp [ esi + 0x5c ] 0x2
jne r-xdata
call sub_100036ed
mov [ ecx + 0x4 ] edi
jmp r-xdata
mov eax ebx
jmp r-xdata
mov [ eax + 0x4 ] edi
sub_10006464
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
leave
retn
mov eax [ esi + 0x44 ]
neg eax
sbb eax eax
mov [ ebp - 0x8 ] eax
je r-xdata
lea ecx [ esi + 0x38 ]
call sub_1000dc45
lea ecx [ esi + 0x4 ]
call sub_1000dfb8
push edi
lea edi [ esi + 0x38 ]
push [ ebp - 0x4 ]
call [ esi + 0x18 ]
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
and [ eax + 0x4 ] 0x0
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push eax
mov ecx edi
call sub_1000dd81
mov eax [ esi + 0x58 ]
add eax [ ebp - 0x4 ]
and [ eax ] 0x0
cmp [ esi + 0x5c ] 0x2
jne r-xdata
pop edi
sub_100064c9
push 0x4
mov eax sub_1002188e
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x2
call sub_10006464
lea ecx [ esi + 0x38 ]
mov [ ebp - 0x4 ] 0x1
call sub_1000de37
lea ecx [ esi + 0x1c ]
mov [ ebp - 0x4 ] 0x0
call sub_1000de37
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ esi + 0x4 ]
call j_sub_1000dfb8
call sub_10010051
retn
sub_10006516
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100064c9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10006537
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
call sub_10005a3f
mov ebx eax
mov eax [ ebx + 0x10 ]
xor esi esi
cmp eax esi
je r-xdata
xor eax eax
cmp [ ebx + 0x10 ] eax
pop esi
setne al
pop ebx
pop ebp
retn 0x4
dec eax
mov [ ebx + 0x10 ] eax
cmp eax esi
jne r-xdata
cmp [ ebp + 0x8 ] esi
je r-xdata
push edi
call sub_10005a0c
mov edi [ eax + 0x4 ]
mov ecx rw-data
call sub_10005b5a
mov esi eax
test esi esi
je r-xdata
cmp [ ebp + 0x8 ] 0xffffffff
je r-xdata
pop edi
test edi edi
je r-xdata
mov ecx [ ebx + 0x20 ]
call sub_10006464
mov ecx [ ebx + 0x1c ]
call sub_10006464
mov ecx [ ebx + 0x18 ]
call sub_10006464
mov ecx [ ebx + 0x14 ]
call sub_10006464
mov ecx [ ebx + 0x24 ]
call sub_10006464
call sub_10003ea6
cmp eax esi
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ eax + 0x3c ]
cmp eax esi
je r-xdata
cmp [ edi + 0x98 ] 0x0
je r-xdata
push eax
call sub_100122c6
pop ecx
cmp eax [ edi + 0x98 ]
jae r-xdata
push esi
push esi
call eax
mov eax [ esi + 0xc ]
and [ ebp + 0x8 ] 0x0
test eax eax
je r-xdata
push [ edi + 0x98 ]
call sub_1000fa3b
pop ecx
mov [ esi + 0xc ] eax
test eax eax
jne r-xdata
push eax
call sub_100122c6
push [ esi + 0xc ]
mov [ ebp + 0x8 ] eax
call sub_1000fb05
pop ecx
pop ecx
cmp [ ebp + 0x8 ] eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000fa3b
pop ecx
mov [ esi + 0xc ] eax
sub_10006632
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edx 0x7fffffff
sub edx eax
cmp edx ecx
jge r-xdata
add eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
xor eax eax
pop ebp
retn
mov eax 0x80070057
pop ebp
retn
sub_1000665a
mov edi edi
push ebp
mov ebp esp
push ecx
push [ ebp + 0xc ]
lea eax [ ebp - 0x4 ]
push [ ebp + 0x8 ]
push eax
call sub_10006632
add esp 0xc
test eax eax
jge r-xdata
mov eax [ ebp - 0x4 ]
leave
retn
push eax
call sub_100014f0
sub_10006681
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x10 ]
mov esi ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10003372
mov eax esi
pop esi
pop ebp
retn 0xc
sub_1000669e
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
xor eax eax
cmp [ ebp + 0xc ] eax
push esi
push edi
mov ebx ecx
mov [ ebp - 0x4 ] eax
jge r-xdata
mov esi [ ebp + 0x10 ]
cmp esi eax
jge r-xdata
mov [ ebp + 0xc ] eax
mov eax [ ebx ]
mov edi [ eax - 0xc ]
push esi
push [ ebp + 0xc ]
call sub_1000665a
cmp eax edi
pop ecx
pop ecx
jle r-xdata
xor esi esi
mov edi [ ebx ]
mov eax [ edi - 0xc ]
cmp [ ebp + 0xc ] eax
jle r-xdata
mov eax [ ebx ]
mov esi [ eax - 0xc ]
sub esi [ ebp + 0xc ]
cmp [ ebp + 0xc ] 0x0
jne r-xdata
xor esi esi
mov ecx ebx
call sub_100046a5
mov ecx [ ebp + 0x8 ]
push eax
mov eax [ ebp + 0xc ]
push esi
add edi eax
push edi
call sub_10006681
cmp esi eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
push ebx
call sub_100046c8
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_1000671d
push 0x4
mov eax sub_100215a0
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
push [ ebp + 0xc ]
call sub_10001510
push [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_1000248e
test al al
jne r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp + 0x8 ]
mov ecx esi
call sub_100026e3
sub_1000675c
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
and [ ebp - 0x8 ] 0x0
push ebx
push esi
mov esi [ ebp + 0x10 ]
mov edx [ esi ]
mov eax ecx
push edi
mov [ ebp - 0x4 ] eax
test edx edx
jge r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
push 0x80070057
call sub_100014f0
mov edi [ eax ]
cmp edx [ edi - 0xc ]
jge r-xdata
cmp [ ecx ] 0x0
je r-xdata
or [ esi ] 0xffffffff
mov ecx eax
call sub_100046a5
mov ecx [ ebp + 0x8 ]
push eax
call sub_1000468e
mov ecx eax
call sub_100046a5
mov ecx [ ebp + 0x8 ]
push eax
mov eax [ esi ]
add eax edi
push eax
call sub_1000671d
jmp r-xdata
mov eax [ eax ]
mov edi [ eax - 0xc ]
lea ebx [ eax + edx ]
add edi eax
cmp ebx edi
jae r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
leave
retn 0xc
mov eax [ ebp - 0x4 ]
push ecx
push ebx
call sub_100124b7
add ebx eax
pop ecx
pop ecx
mov [ ebp + 0x10 ] eax
cmp ebx edi
jae r-xdata
push [ ebp + 0xc ]
push ebx
call sub_10012595
pop ecx
pop ecx
mov ecx [ esi ]
add ecx [ ebp + 0x10 ]
push eax
push ecx
push [ ebp + 0x8 ]
lea edx [ ecx + eax + 0x1 ]
mov ecx [ ebp - 0x4 ]
mov [ esi ] edx
call sub_1000669e
jmp r-xdata
sub_10006811
push 0xc
mov eax sub_100218b9
call sub_1000ff79
call sub_10005a0c
push 0x1
mov esi eax
call sub_10006288
lea eax [ ebp - 0x14 ]
push eax
lea edi [ esi + 0x34 ]
mov esi r--data
push esi
lea eax [ ebp - 0x10 ]
xor ebx ebx
push eax
mov ecx edi
mov [ ebp - 0x14 ] ebx
call sub_1000675c
mov [ ebp - 0x4 ] ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax - 0xc ] ebx
jne r-xdata
call sub_10005a0c
push [ eax + 0x8 ]
push [ ebp - 0x10 ]
call [ UnregisterClassA@IAT ]
lea eax [ ebp - 0x14 ]
push eax
push esi
lea eax [ ebp - 0x18 ]
push eax
mov ecx edi
call sub_1000675c
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x1
call sub_100033d4
mov ecx [ ebp - 0x18 ]
add ecx 0xfffffff0
mov [ ebp - 0x4 ] bl
call sub_10001540
mov ecx edi
call sub_10001fa8
push 0x1
call sub_100062fa
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
call sub_10001540
call sub_10010051
retn
sub_100068b0
mov edi edi
push ebx
push esi
call sub_10006811
call sub_10005a0c
mov eax [ eax + 0x4 ]
xor ebx ebx
cmp eax ebx
je r-xdata
call sub_10005a3f
mov esi eax
mov ecx [ esi + 0x3c ]
cmp ecx ebx
je r-xdata
mov eax [ eax + 0x3c ]
cmp eax ebx
je r-xdata
call sub_10005454
mov esi eax
call sub_10005a0c
cmp [ eax + 0x14 ] bl
jne r-xdata
mov eax [ ecx ]
call [ eax + 0x144 ]
test eax eax
je r-xdata
push ebx
push 0x1
call eax
pop esi
pop ebx
retn
mov eax [ esi + 0x2c ]
push edi
mov edi [ UnhookWindowsHookEx@IAT ]
cmp eax ebx
je r-xdata
mov [ esi + 0x3c ] ebx
mov eax [ esi + 0x28 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esi + 0x2c ] ebx
pop edi
push eax
call edi
mov [ esi + 0x28 ] ebx
sub_10006926
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
call [ PathFindFileNameA@IAT ]
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10003725
push 0xffffffff
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000276e
add esp 0x10
xor eax eax
push eax
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
pop ebp
retn 0xc
sub_10006966
mov edi edi
push ebp
mov ebp esp
sub esp 0x310
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov esi ecx
call sub_10005a0c
mov edi eax
mov eax [ esi + 0x44 ]
mov [ edi + 0x8 ] eax
mov eax [ esi + 0x44 ]
mov [ edi + 0xc ] eax
mov ebx 0x104
push ebx
lea eax [ ebp - 0x108 ]
push eax
push [ esi + 0x44 ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
call sub_10006e39
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x108 ]
push eax
call [ PathFindExtensionA@IAT ]
mov [ ebp - 0x310 ] eax
test eax eax
jne r-xdata
mov eax [ ebp - 0x310 ]
mov [ eax ] 0x0
push ebx
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x108 ]
push eax
call sub_10006926
test eax eax
je r-xdata
call sub_10006e39
cmp [ esi + 0x60 ] 0x0
jne r-xdata
call sub_10006e39
mov eax [ esi + 0x50 ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x20c ]
push eax
call sub_100106ae
pop ecx
mov [ esi + 0x60 ] eax
test eax eax
jne r-xdata
mov [ edi + 0x10 ] eax
cmp [ esi + 0x64 ] 0x0
jne r-xdata
push 0x100
lea eax [ ebp - 0x30c ]
push eax
push 0xe000
call sub_100076e8
test eax eax
je r-xdata
call sub_100036ed
cmp [ esi + 0x68 ] 0x0
jne r-xdata
lea eax [ ebp - 0x4 ]
sub eax [ ebp - 0x310 ]
cmp [ esi + 0x6c ] 0x1
jne r-xdata
push [ esi + 0x60 ]
lea eax [ ebp - 0x30c ]
push eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
push r--data
lea eax [ ebp - 0x20c ]
push ebx
push eax
call sub_1001063a
push eax
call sub_10001bcc
lea eax [ ebp - 0x20c ]
push eax
call sub_100106ae
add esp 0x14
mov [ esi + 0x68 ] eax
test eax eax
je r-xdata
push r--data
push r--data
jmp r-xdata
call sub_100106ae
mov [ esi + 0x50 ] eax
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x310 ]
mov [ eax ] 0x0
push eax
push [ ebp - 0x310 ]
call sub_10001c32
lea eax [ ebp - 0x108 ]
add esp 0xc
push eax
call sub_100106ae
pop ecx
mov [ esi + 0x64 ] eax
test eax eax
je r-xdata
sub_10006aec
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ SetErrorMode@IAT ]
push 0x0
call esi
or eax 0x8001
push eax
call esi
call sub_10005a0c
mov esi [ ebp + 0x8 ]
mov ecx eax
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
call sub_100051b3
call sub_10005a0c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
pop esi
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x48 ] ecx
mov ecx [ ebp + 0x14 ]
mov [ eax + 0x4c ] ecx
mov ecx eax
mov [ eax + 0x44 ] esi
call sub_10006966
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
call sub_10004511
xor eax eax
inc eax
pop ebp
retn 0x10
push r--data
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
sub_10006b73
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
xor edi edi
mov esi 0x2001f
push esi
push edi
push r--data
mov ebx ecx
push 0x80000001
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0xc ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov esi [ RegCloseKey@IAT ]
cmp [ ebp - 0x4 ] edi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push edi
push esi
push edi
push edi
push edi
push [ ebx + 0x54 ]
mov ebx [ RegCreateKeyExA@IAT ]
push [ ebp - 0x4 ]
call ebx
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] edi
je r-xdata
push [ ebp - 0x4 ]
call esi
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x14 ]
push edi
push esi
push edi
push edi
push edi
push [ eax + 0x68 ]
push [ ebp - 0x8 ]
call ebx
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x8 ]
call esi
sub_10006c06
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
xor esi esi
push edi
mov [ ebp - 0x4 ] esi
call sub_10006b73
mov edi eax
cmp edi esi
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push 0x2001f
push esi
push esi
push esi
push [ ebp + 0x8 ]
push edi
call [ RegCreateKeyExA@IAT ]
push edi
call [ RegCloseKey@IAT ]
mov eax [ ebp - 0x4 ]
xor eax eax
jmp r-xdata
pop edi
pop esi
leave
retn 0x4
sub_10006c4e
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
cmp [ esi + 0x54 ] 0x0
push edi
mov edi [ ebp + 0x8 ]
je r-xdata
push [ ebp + 0x10 ]
lea eax [ ebp - 0x14 ]
push r--data
push 0x10
push eax
call sub_100104e8
add esp 0x10
push [ esi + 0x68 ]
lea eax [ ebp - 0x14 ]
push eax
push ebx
push edi
call [ WritePrivateProfileStringA@IAT ]
push edi
call sub_10006c06
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn 0xc
push 0x4
lea eax [ ebp + 0x10 ]
push eax
push 0x4
push 0x0
push ebx
push esi
call [ RegSetValueExA@IAT ]
push esi
mov edi eax
call [ RegCloseKey@IAT ]
xor eax eax
test edi edi
sete al
jmp r-xdata
sub_10006cff
mov edi edi
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
xor ebx ebx
push edi
mov edi [ SaveDC@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
push eax
call edi
mov ebx eax
pop edi
pop esi
mov eax ebx
pop ebx
retn
push eax
call edi
test eax eax
je r-xdata
or ebx 0xffffffff
sub_10006d32
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
xor eax eax
inc eax
push edi
mov edi [ RestoreDC@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push ecx
call edi
pop edi
pop esi
pop ebp
retn 0x4
test eax eax
je r-xdata
xor eax eax
push [ ebp + 0x8 ]
push esi
call edi
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
sub_10006d74
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
or eax 0xffffffff
push edi
mov edi [ SetBkColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push ecx
call edi
pop edi
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
push esi
call edi
sub_10006da7
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
or eax 0xffffffff
push edi
mov edi [ SetTextColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push ecx
call edi
pop edi
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
push esi
call edi
sub_10006dda
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
xor eax eax
push edi
mov edi [ SetMapMode@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push ecx
call edi
pop edi
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
push esi
call edi
sub_10006edf
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ExtTextOutA@IAT ]
pop ebp
retn 0x1c
sub_10006f06
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ecx + 0x4 ]
call [ TabbedTextOutA@IAT ]
mov ecx [ ebp + 0x8 ]
movsx edx ax
shr eax 0x10
cwde
mov [ ecx + 0x4 ] eax
mov [ ecx ] edx
mov eax ecx
pop ebp
retn 0x20
sub_10006f7d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x4 ]
call [ GrayStringA@IAT ]
pop ebp
retn 0x20
mov eax [ eax + 0x4 ]
sub_10006fcd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ SetViewportOrgEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0xc
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_1000700c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ OffsetViewportOrgEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0xc
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_1000704b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ SetViewportExtEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0xc
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_1000708a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ ScaleViewportExtEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0x14
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_100070d5
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ SetWindowExtEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0xc
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10007114
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push edi
mov edi [ ScaleWindowExtEx@IAT ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
retn 0x14
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_1000715f
push 0x10
call sub_100016b8
pop ecx
xor ecx ecx
cmp eax ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_1000719a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
cmp eax ecx
je r-xdata
pop ebp
retn 0x4
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
sub_100071d5
mov edi edi
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_100071f7
push 0x0
mov eax sub_10021a9c
call sub_1000ff79
call sub_10005a3f
mov esi eax
cmp [ esi + 0x1c ] 0x0
jne r-xdata
mov eax [ esi + 0x1c ]
call sub_10010051
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push sub_1000761f
call sub_100016a1
push 0x60
mov ebx eax
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x2
push 0x4
push sub_10009a36
push sub_1000719a
push r--data
call sub_10006328
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x1c ] eax
call sub_100016a1
sub_1000727f
mov edi edi
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x14 ]
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_100071f7
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x1c ]
call sub_1000dd39
sub_100072cb
push 0x0
mov eax sub_10021a9c
call sub_1000ff79
call sub_10005a3f
mov esi eax
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi + 0x20 ]
call sub_10010051
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push sub_1000761f
call sub_100016a1
push 0x60
mov ebx eax
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push sub_10009a36
push sub_100071bb
push r--data
call sub_10006328
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x20 ] eax
call sub_100016a1
sub_10007353
mov edi edi
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_100072cb
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x1c ]
call sub_1000dd39
sub_10007395
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100072b2
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_100073b6
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
push [ ebp + 0x8 ]
mov esi ecx
call [ GetStockObject@IAT ]
mov ecx [ esi + 0x4 ]
mov edi [ SelectObject@IAT ]
mov ebx eax
xor eax eax
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push ebx
push ecx
call edi
push eax
call sub_1000733f
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push ebx
push esi
call edi
sub_100073f7
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
xor eax eax
push edi
mov edi [ SelectObject@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
test ebx ebx
je r-xdata
push eax
call sub_1000733f
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
test ebx ebx
jne r-xdata
push eax
push ecx
call edi
mov eax [ ebx + 0x4 ]
mov eax [ ebx + 0x4 ]
xor eax eax
jmp r-xdata
push eax
push esi
call edi
sub_10007466
lea ecx [ ebp - 0x218 ]
call sub_10001560
mov esi [ ebp - 0x21c ]
mov eax [ esi ]
xor edi edi
push edi
push 0x200
lea ecx [ ebp - 0x214 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] 0x2
call [ eax + 0xc ]
test eax eax
je r-xdata
push 0x6d
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x14
lea eax [ ebp - 0x214 ]
push eax
push 0x6d
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x18
jmp r-xdata
push edi
push edi
mov edi [ ebp - 0x218 ]
push edi
call sub_10004f51
lea ecx [ edi - 0x10 ]
mov [ ebp - 0x4 ] 0x1
call sub_10001540
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
mov eax r-xdata
retn
sub_10007507
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10007442
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10007528
mov edi edi
push ebp
mov ebp esp
sub esp 0x104
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
test ebx ebx
jne r-xdata
test esi esi
je r-xdata
call sub_10003725
push esi
call [ lstrlenA@IAT ]
push 0xff
mov edi eax
lea eax [ ebp - 0x103 ]
push 0x0
push eax
mov [ ebp - 0x104 ] 0x0
call sub_100105c0
mov eax 0x100
add esp 0xc
cmp edi eax
ja r-xdata
push esi
push ebx
call [ SetWindowTextA@IAT ]
push eax
lea eax [ ebp - 0x104 ]
push eax
push ebx
call [ GetWindowTextA@IAT ]
cmp eax edi
jne r-xdata
push esi
lea eax [ ebp - 0x104 ]
push eax
call [ lstrcmpA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn 0x8
sub_100075c0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_10003725
pop esi
pop ebp
retn 0x4
push eax
call [ DeleteObject@IAT ]
and [ esi ] 0x0
sub_100075e7
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push edi
call [ GlobalFlags@IAT ]
mov esi eax
and esi 0xff
je r-xdata
push edi
call [ GlobalFree@IAT ]
pop esi
push edi
dec esi
call [ GlobalUnlock@IAT ]
test esi esi
jne r-xdata
sub_1000761f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10005454
mov esi eax
test esi esi
je r-xdata
call sub_100036ed
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call sub_100122c6
pop ecx
mov ecx [ ebp + 0x8 ]
lea edx [ ecx + 0x4 ]
cmp eax edx
ja r-xdata
sub eax ecx
sub eax 0x4
push eax
push [ esi + 0xc ]
call sub_100126de
pop ecx
push [ esi + 0xc ]
call sub_1000fb05
and [ esi + 0xc ] 0x0
jmp r-xdata
pop ecx
xor eax eax
inc eax
pop esi
pop ebp
retn
sub_10007672
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push edi
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0x8 ]
call [ ClientToScreen@IAT ]
mov edi [ GetWindow@IAT ]
push 0x5
push [ ebp + 0x8 ]
jmp r-xdata
call edi
mov esi eax
test esi esi
jne r-xdata
push esi
call [ GetDlgCtrlID@IAT ]
cmp eax 0xffff
je r-xdata
pop edi
pop esi
leave
retn 0xc
push 0x2
push esi
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax __pe_dll_export_address_table
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
call [ GetWindowRect@IAT ]
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push eax
call [ PtInRect@IAT ]
test eax eax
jne r-xdata
mov eax esi
jmp r-xdata
sub_100076e8
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
cmp esi ebx
je r-xdata
call sub_10003725
mov edi [ ebp + 0x10 ]
cmp edi ebx
je r-xdata
call sub_10005a0c
mov eax [ eax + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_10001cad
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
movzx ecx [ eax ]
push ebx
push ebx
dec edi
push edi
push esi
push ecx
add eax 0x2
push eax
push ebx
push ebx
call [ WideCharToMultiByte@IAT ]
mov [ eax + esi ] bl
jmp r-xdata
mov [ esi ] bl
xor eax eax
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
sub_100077d6
call sub_10005a0c
add eax 0x2c
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
retn
jmp r-xdata
call sub_10005a0c
cmp [ eax + 0x30 ] 0x0
jne r-xdata
retn
push esi
push 0x1
call sub_1000776d
call sub_10005a0c
mov esi [ eax + 0x4 ]
test esi esi
je r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
mov ecx [ esi + 0x20 ]
test ecx ecx
je r-xdata
pop esi
push 0x0
call sub_100019ef
call sub_1000db23
test eax eax
je r-xdata
mov ecx [ esi + 0x20 ]
mov eax [ ecx ]
pop esi
jmp [ eax + 0x60 ]
sub_100077ef
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx 0x10b
cmp eax ecx
ja r-xdata
sub eax 0x3e3
je r-xdata
je r-xdata
push 0xa
dec eax
je r-xdata
push 0x3
jmp r-xdata
cmp eax 0x3e
ja r-xdata
dec eax
je r-xdata
pop eax
cmp eax 0x6b
ja r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
mov ecx 0x90
cmp eax ecx
ja r-xdata
je r-xdata
push 0x8
jmp r-xdata
cmp eax 0x19
ja r-xdata
push 0x5
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx 0xb6
cmp eax ecx
ja r-xdata
je r-xdata
push 0x2
jmp r-xdata
cmp eax 0x47
ja r-xdata
cmp eax 0x27
ja r-xdata
je r-xdata
pop ebp
retn 0x4
sub eax 0xb7
je r-xdata
je r-xdata
cmp eax 0x75
ja r-xdata
sub eax 0x50
je r-xdata
je r-xdata
add eax 0xffffffcc
cmp eax 0x8
ja r-xdata
je r-xdata
push 0x9
jmp r-xdata
cmp eax 0x18
ja r-xdata
sub eax 0x8
je r-xdata
push 0x6
jmp r-xdata
sub eax 0x91
je r-xdata
sub eax 0x7b
je r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
sub eax 0x40
je r-xdata
jmp [ eax * 4 + jump_table_10007a63 ]
push 0xd
jmp r-xdata
cmp eax 0x20
ja r-xdata
jmp [ eax * 4 + jump_table_100079ff ]
dec eax
dec eax
je r-xdata
push 0x7
jmp r-xdata
sub eax 0x9
je r-xdata
dec eax
je r-xdata
sub eax 0x6c
je r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
sub eax 0x21
je r-xdata
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
jmp r-xdata
sub eax 0xd
je r-xdata
sub eax 0x7
je r-xdata
dec eax
je r-xdata
push 0xc
jmp r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
push 0xb
jmp r-xdata
sub eax 0x1a
je r-xdata
jmp r-xdata
sub eax 0x6
je r-xdata
sub eax 0x6
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
je r-xdata
dec eax
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
sub eax 0x3
jne r-xdata
jmp r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
dec eax
je r-xdata
dec eax
jne r-xdata
dec eax
jne r-xdata
push 0xe
jmp r-xdata
sub_10007a8d
push 0x4
mov eax sub_10021917
call sub_1000ff79
mov edi ecx
xor esi esi
cmp [ ebp + 0x8 ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0xc ] esi
je r-xdata
mov eax [ ebp + 0x10 ]
mov ebx 0xf1a0
cmp eax esi
je r-xdata
lea ecx [ ebp - 0x10 ]
call sub_10001560
lea eax [ edi + 0x10 ]
push eax
lea ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] esi
call sub_1000466b
mov esi [ ebp + 0x10 ]
cmp [ esi - 0xc ] 0x0
mov [ ebp - 0x4 ] 0x1
jne r-xdata
mov ecx [ edi + 0x8 ]
add ecx ebx
mov [ eax ] ecx
mov eax [ edi + 0x8 ]
push esi
add eax ebx
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1000e2f7
push 0xffffffff
push [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000276e
add esp 0x10
lea ecx [ esi - 0x10 ]
call sub_10001540
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
call sub_10001540
xor eax eax
inc eax
jmp r-xdata
push 0xf006
lea ecx [ ebp + 0x10 ]
call sub_1000246a
mov esi [ ebp + 0x10 ]
call sub_10010051
retn 0xc
sub_10007b3b
push 0x8
mov eax sub_100219d6
call sub_1000ff79
push 0x14
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x14 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
push r--data
lea eax [ ebp - 0x10 ]
push eax
call sub_10010b44
int3
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002fbc
sub_10007b81
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x8
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x8 ]
call sub_100077ef
push eax
call sub_10007b3b
sub_10007ba4
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x8 ]
call [ FileTimeToLocalFileTime@IAT ]
test eax eax
je r-xdata
leave
retn 0x4
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call [ FileTimeToSystemTime@IAT ]
neg eax
sbb eax eax
neg eax
sub_10007bd5
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
cmp [ ebp + 0x8 ] 0x76c
push esi
mov esi ecx
jge r-xdata
push ebx
mov ebx [ ebp + 0xc ]
lea eax [ ebx - 0x1 ]
push edi
cmp eax 0xb
ja r-xdata
push 0x80004005
mov edx [ ebp + 0x10 ]
lea eax [ edx - 0x1 ]
cmp eax 0x1e
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp edi 0x17
ja r-xdata
mov ecx [ ebp + 0x18 ]
cmp ecx 0x3b
ja r-xdata
mov eax [ ebp + 0x1c ]
cmp eax 0x3b
ja r-xdata
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
add eax 0xfffff894
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x24 ]
dec ebx
push eax
mov [ ebp - 0x20 ] ecx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edx
mov [ ebp - 0x14 ] ebx
call sub_10012bbc
pop ecx
mov [ esi ] eax
and eax edx
pop edi
mov [ esi + 0x4 ] edx
pop ebx
cmp eax 0xffffffff
jne r-xdata
mov eax esi
pop esi
leave
retn 0x1c
push 0x80070057
jmp r-xdata
call sub_100014f0
sub_10007c6a
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
movzx ecx [ eax ]
mov edx 0x76c
cmp cx dx
jae r-xdata
push [ ebp + 0xc ]
movzx edx [ eax + 0xc ]
push edx
movzx edx [ eax + 0xa ]
push edx
movzx edx [ eax + 0x8 ]
push edx
movzx edx [ eax + 0x6 ]
movzx eax [ eax + 0x2 ]
push edx
push eax
movzx eax cx
push eax
lea ecx [ ebp - 0x8 ]
call sub_10007bd5
mov eax [ ebp - 0x8 ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn 0x8
sub_10007cc7
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push esi
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0x8 ]
mov esi ecx
call [ FileTimeToLocalFileTime@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ FileTimeToSystemTime@IAT ]
test eax eax
je r-xdata
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push 0x80070057
call sub_100014f0
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x8 ]
call sub_10007c6a
mov eax [ ebp - 0x8 ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax esi
pop esi
leave
retn 0x8
sub_10007d27
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0x128
push 0x0
push esi
mov edi ecx
call sub_100105c0
push 0xffffffff
push [ edi + 0xc ]
lea eax [ esi + 0x22 ]
push 0x104
push eax
call sub_1000276e
mov eax [ edi + 0x4 ]
add esp 0x1c
cmp eax [ r--data ]
je r-xdata
xor eax eax
inc eax
lea ecx [ ebp - 0x20 ]
push ecx
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call [ GetFileTime@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push [ edi + 0x4 ]
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
mov [ esi + 0x18 ] eax
mov eax [ ebp - 0x4 ]
mov [ esi + 0x1c ] eax
mov edi [ edi + 0xc ]
cmp [ edi - 0xc ] 0x0
jne r-xdata
pop edi
pop esi
leave
retn 0x4
push edi
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
sete cl
dec cl
and cl al
mov [ esi + 0x20 ] cl
mov [ esi + 0x20 ] 0x0
jmp r-xdata
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x28 ]
call sub_10007cc7
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
call sub_10007ba4
test eax eax
je r-xdata
xor eax eax
xor ecx ecx
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] ecx
push 0xffffffff
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp - 0x28 ]
call sub_10007cc7
mov ecx [ eax ]
mov [ esi + 0x10 ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x14 ] eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
call sub_10007ba4
test eax eax
je r-xdata
xor eax eax
xor ecx ecx
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] ecx
push 0xffffffff
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x28 ]
call sub_10007cc7
mov ecx [ eax ]
mov [ esi + 0x8 ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0xc ] eax
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
call sub_10007ba4
test eax eax
je r-xdata
mov eax [ esi + 0x10 ]
or eax [ esi + 0x14 ]
jne r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
mov eax [ esi + 0xc ]
mov [ esi + 0x4 ] eax
mov eax [ esi ]
or eax [ esi + 0x4 ]
jne r-xdata
mov eax [ esi + 0x8 ]
mov [ esi + 0x10 ] eax
mov eax [ esi + 0xc ]
mov [ esi + 0x14 ] eax
sub_10007e87
push 0x134
mov eax sub_10021954
call sub_1000ffe2
mov edi [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x13c ] esi
lea eax [ ebp - 0x138 ]
push eax
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x140 ] edi
mov [ ebp - 0x138 ] esi
mov [ ebp - 0x134 ] esi
mov [ ebp - 0x130 ] esi
mov [ ebp - 0x12c ] esi
mov [ ebp - 0x128 ] esi
mov [ ebp - 0x124 ] esi
call sub_10007d27
mov ecx edi
call sub_10001560
mov eax 0x100
push eax
push eax
mov ecx edi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x13c ] 0x1
call sub_100013d0
push eax
lea eax [ ebp - 0x116 ]
push eax
call sub_10006926
push 0xffffffff
mov ecx edi
call sub_10002b1a
mov eax edi
call sub_10010065
retn 0x4
sub_10007f1c
push 0x134
mov eax sub_10021954
call sub_1000ffe2
mov edi [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x13c ] esi
lea eax [ ebp - 0x138 ]
push eax
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x140 ] edi
mov [ ebp - 0x138 ] esi
mov [ ebp - 0x134 ] esi
mov [ ebp - 0x130 ] esi
mov [ ebp - 0x12c ] esi
mov [ ebp - 0x128 ] esi
mov [ ebp - 0x124 ] esi
call sub_10007d27
mov ecx edi
call sub_10001560
mov eax 0x100
push eax
push eax
mov ecx edi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x13c ] 0x1
call sub_100013d0
push eax
lea eax [ ebp - 0x116 ]
push eax
call sub_10002aac
push 0xffffffff
mov ecx edi
call sub_10002b1a
mov eax edi
call sub_10010065
retn 0x4
sub_10007fb1
mov edi edi
push ebp
mov ebp esp
sub esp 0x130
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
xor eax eax
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x130 ] eax
mov [ ebp - 0x12c ] eax
mov [ ebp - 0x128 ] eax
mov [ ebp - 0x124 ] eax
mov [ ebp - 0x120 ] eax
mov [ ebp - 0x11c ] eax
mov [ ebp - 0x118 ] eax
lea eax [ ebp - 0x12c ]
push eax
call sub_10007d27
lea eax [ ebp - 0x10a ]
push eax
mov ecx esi
call sub_100026fa
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_1000f298
leave
retn 0x4
sub_10008032
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001048b
push eax
call sub_10001bcc
add esp 0x14
pop ebp
retn
sub_10008053
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
test [ esi + 0x18 ] 0x1
jne r-xdata
pop esi
pop ebx
leave
retn 0x8
mov eax [ esi + 0x28 ]
push edi
mov edi [ esi + 0x2c ]
sub edi eax
cmp ebx edi
jae r-xdata
push [ esi + 0x14 ]
push 0x4
call sub_10008773
push edi
push eax
push ebx
push [ ebp + 0x8 ]
call sub_1000342c
add [ esi + 0x28 ] edi
add [ ebp + 0x8 ] edi
add esp 0x10
sub ebx edi
je r-xdata
mov edi ebx
mov eax [ ebp + 0xc ]
sub eax ebx
pop edi
xor edx edx
mov eax ebx
div [ esi + 0x20 ]
mov edi ebx
sub edi edx
and [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] edi
sub ebx [ ebp - 0x8 ]
je r-xdata
cmp [ ebp - 0x4 ] 0x0
ja r-xdata
cmp [ ebp - 0x8 ] edi
jne r-xdata
push [ ebp - 0x4 ]
mov ecx [ esi + 0x24 ]
push [ ebp + 0x8 ]
mov eax [ ecx ]
call [ eax + 0x34 ]
add [ ebp + 0x8 ] eax
add [ ebp - 0x8 ] eax
sub [ ebp - 0x4 ] eax
test eax eax
jbe r-xdata
xor edi edi
cmp [ esi + 0x8 ] edi
jne r-xdata
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
lea eax [ esi + 0x2c ]
push eax
lea edi [ esi + 0x30 ]
push edi
push [ esi + 0x20 ]
push 0x0
call [ edx + 0x50 ]
mov eax [ edi ]
cmp [ esi + 0xc ] edi
jne r-xdata
push edi
push eax
push ebx
push [ ebp + 0x8 ]
call sub_1000342c
add [ esi + 0x28 ] edi
add esp 0x10
sub ebx edi
mov edi ebx
mov [ ebp - 0x4 ] ebx
mov eax [ esi + 0x20 ]
mov [ ebp - 0x4 ] eax
cmp ebx eax
jbe r-xdata
mov eax [ esi + 0x30 ]
lea ecx [ eax + edi ]
mov [ esi + 0x2c ] ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jbe r-xdata
mov eax [ esi + 0x30 ]
mov [ ebp - 0x8 ] eax
mov edi [ esi + 0x2c ]
sub edi eax
mov [ esi + 0x28 ] eax
cmp ebx edi
jae r-xdata
cmp edi ebx
jb r-xdata
push [ ebp - 0x4 ]
mov ecx [ esi + 0x24 ]
push [ ebp - 0x8 ]
mov eax [ ecx ]
call [ eax + 0x34 ]
add [ ebp - 0x8 ] eax
sub [ ebp - 0x4 ] eax
add edi eax
test eax eax
jbe r-xdata
sub_10008184
mov edi edi
push esi
mov esi ecx
test [ esi + 0x18 ] 0x1
mov eax [ esi + 0x28 ]
push edi
je r-xdata
cmp [ esi + 0x8 ] 0x0
lea edi [ esi + 0x30 ]
mov edx [ edi ]
push ebx
jne r-xdata
mov edx [ esi + 0x2c ]
cmp edx eax
je r-xdata
cmp eax edx
je r-xdata
cmp eax edx
je r-xdata
mov eax [ esi + 0x2c ]
jmp r-xdata
mov ecx [ esi + 0x24 ]
mov edi [ ecx ]
sub eax edx
cdq
push 0x1
push edx
push eax
call [ edi + 0x28 ]
mov ecx [ esi + 0x24 ]
mov eax [ ecx ]
lea edx [ esi + 0x2c ]
push edx
push edi
push [ esi + 0x20 ]
push 0x1
call [ eax + 0x50 ]
mov ecx [ esi + 0x24 ]
mov ebx [ ecx ]
push 0x0
push 0x0
sub eax edx
push eax
push 0x2
call [ ebx + 0x50 ]
mov eax [ edi ]
pop ebx
mov ecx [ esi + 0x24 ]
mov ebx [ ecx ]
sub eax edx
push eax
push edx
call [ ebx + 0x38 ]
jmp r-xdata
pop edi
mov [ esi + 0x28 ] eax
pop esi
retn
sub_100081fc
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi ecx
test [ esi + 0x18 ] 0x1
push edi
jne r-xdata
mov edx [ esi + 0x28 ]
mov eax [ ebp + 0x8 ]
lea ebx [ esi + 0x2c ]
mov ecx [ ebx ]
mov edi ecx
sub edi edx
add eax edi
cmp [ esi + 0x8 ] 0x0
mov [ ebp - 0x8 ] eax
jne r-xdata
push [ esi + 0x14 ]
push 0x4
test edi edi
je r-xdata
mov eax [ esi + 0x30 ]
cmp edx eax
jbe r-xdata
mov ecx [ esi + 0x24 ]
mov eax [ ecx ]
push ebx
lea edi [ esi + 0x30 ]
push edi
push [ esi + 0x20 ]
push 0x0
call [ eax + 0x50 ]
mov eax [ edi ]
mov [ esi + 0x28 ] eax
mov ecx [ esi + 0x24 ]
mov eax edi
neg eax
cdq
push 0x1
push edx
push eax
mov eax [ ecx ]
call [ eax + 0x28 ]
mov eax [ ebx ]
sub eax [ esi + 0x28 ]
pop edi
pop esi
pop ebx
cmp eax [ ebp - 0x8 ]
jae r-xdata
test edi edi
jle r-xdata
leave
retn 0x4
push 0x0
push 0x3
jmp r-xdata
cmp [ esi + 0xc ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
jne r-xdata
push edi
push edx
sub ecx eax
push ecx
push eax
call sub_10008032
mov eax [ esi + 0x30 ]
lea ecx [ eax + edi ]
add esp 0x10
mov [ esi + 0x28 ] eax
mov [ ebx ] ecx
call sub_10008773
sub ecx edi
mov [ ebp + 0x8 ] ecx
add edi eax
mov ecx [ esi + 0x20 ]
mov eax [ esi + 0x30 ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x28 ] eax
add eax ecx
mov [ ebx ] eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x8 ]
jb r-xdata
push [ ebp + 0x8 ]
mov ecx [ esi + 0x24 ]
mov eax [ ecx ]
push edi
call [ eax + 0x34 ]
add [ ebp - 0x4 ] eax
sub [ ebp + 0x8 ] eax
add edi eax
test eax eax
jbe r-xdata
sub_100082eb
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
not eax
test al 0x1
jne r-xdata
mov eax [ esi + 0x28 ]
inc eax
inc eax
cmp eax [ esi + 0x2c ]
jbe r-xdata
push [ esi + 0x14 ]
push 0x2
call sub_10008773
mov eax [ esi + 0x28 ]
mov cx [ ebp + 0x8 ]
mov [ eax ] cx
add [ esi + 0x28 ] 0x2
mov eax esi
pop esi
pop ebp
retn 0x4
call sub_10008184
sub_1000832a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
not eax
test al 0x1
jne r-xdata
mov eax [ esi + 0x28 ]
add eax 0x4
cmp eax [ esi + 0x2c ]
jbe r-xdata
push [ esi + 0x14 ]
push 0x2
call sub_10008773
mov eax [ esi + 0x28 ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
add [ esi + 0x28 ] 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
call sub_10008184
sub_10008368
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
test [ esi + 0x18 ] 0x1
jne r-xdata
mov eax [ esi + 0x28 ]
mov ecx [ esi + 0x2c ]
lea edx [ eax + 0x2 ]
cmp edx ecx
jbe r-xdata
push [ esi + 0x14 ]
push 0x4
call sub_10008773
mov eax [ esi + 0x28 ]
mov ax [ eax ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] ax
add [ esi + 0x28 ] 0x2
mov eax esi
pop esi
pop ebp
retn 0x4
sub eax ecx
inc eax
inc eax
push eax
mov ecx esi
call sub_100081fc
sub_100083b0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
test [ esi + 0x18 ] 0x1
jne r-xdata
mov eax [ esi + 0x28 ]
mov ecx [ esi + 0x2c ]
lea edx [ eax + 0x4 ]
cmp edx ecx
jbe r-xdata
push [ esi + 0x14 ]
push 0x4
call sub_10008773
mov eax [ esi + 0x28 ]
mov eax [ eax ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
add [ esi + 0x28 ] 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
sub eax ecx
add eax 0x4
push eax
mov ecx esi
call sub_100081fc
sub_100083f7
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
call sub_10005a0c
push 0x0
mov esi eax
call sub_10006288
mov esi [ esi + 0x1c ]
jmp r-xdata
call sub_10003725
test esi esi
jne r-xdata
push [ esi ]
push [ ebp + 0x8 ]
call [ lstrcmpA@IAT ]
test eax eax
je r-xdata
push esi
call sub_100062fa
xor eax eax
push 0x0
call sub_100062fa
mov eax esi
jmp r-xdata
mov esi [ esi + 0x14 ]
pop esi
pop ebp
retn 0x4
sub_10008449
mov edi edi
push ebp
mov ebp esp
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
lea eax [ ebp - 0x48 ]
push eax
mov ecx edi
call sub_10008368
movzx eax [ ebp - 0x48 ]
mov [ esi ] eax
lea eax [ ebp - 0x48 ]
push eax
mov ecx edi
call sub_10008368
cmp [ ebp - 0x48 ] 0x40
jae r-xdata
movzx esi [ ebp - 0x48 ]
push esi
lea eax [ ebp - 0x44 ]
push eax
mov ecx edi
call sub_10008053
cmp eax esi
jne r-xdata
lea eax [ ebp - 0x44 ]
push eax
mov [ ebp + esi - 0x44 ] 0x0
call sub_100083f7
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000f298
leave
retn 0x8
sub_100084c0
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
test ebx ebx
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x8
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x18 ]
not eax
test al 0x1
jne r-xdata
mov ecx [ esi + 0x28 ]
mov eax [ esi + 0x2c ]
sub eax ecx
push edi
mov edi ebx
cmp ebx eax
jb r-xdata
push [ esi + 0x14 ]
push 0x2
call sub_10008773
push edi
push [ ebp + 0x8 ]
push eax
push ecx
call sub_1000342c
add [ esi + 0x28 ] edi
add [ ebp + 0x8 ] edi
add esp 0x10
sub ebx edi
je r-xdata
mov edi eax
pop edi
mov ecx esi
call sub_10008184
xor edx edx
mov eax ebx
div [ esi + 0x20 ]
mov ecx [ esi + 0x24 ]
mov eax [ ecx ]
mov edi ebx
sub edi edx
push edi
push [ ebp + 0x8 ]
call [ eax + 0x38 ]
add [ ebp + 0x8 ] edi
sub ebx edi
cmp [ esi + 0x8 ] 0x0
je r-xdata
cmp ebx [ esi + 0x20 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
mov edx [ ecx ]
lea eax [ esi + 0x2c ]
push eax
lea edi [ esi + 0x30 ]
push edi
push [ esi + 0x20 ]
push 0x1
call [ edx + 0x50 ]
mov eax [ edi ]
mov [ esi + 0x28 ] eax
mov eax [ esi + 0x28 ]
cmp eax [ esi + 0x30 ]
jne r-xdata
call sub_10003725
push ebx
push [ ebp + 0x8 ]
push ebx
push eax
call sub_1000342c
add esp 0x10
add [ esi + 0x28 ] ebx
sub_10008587
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
push esi
mov esi ecx
cmp [ ebp + 0x8 ] eax
jae r-xdata
push eax
call sub_100082eb
push [ ebp + 0x8 ]
mov ecx esi
call sub_1000832a
push [ ebp + 0x8 ]
call sub_100082eb
jmp r-xdata
pop esi
pop ebp
retn 0x4
sub_100085b8
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
lea eax [ ebp - 0x4 ]
push eax
mov esi ecx
call sub_10008368
mov eax 0xffff
cmp [ ebp - 0x4 ] ax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
mov ecx esi
call sub_100083b0
mov eax [ ebp - 0x4 ]
movzx eax [ ebp - 0x4 ]
jmp r-xdata
pop esi
leave
retn
sub_100085ec
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov esi ecx
push [ esi ]
call [ lstrlenA@IAT ]
mov ecx [ ebp + 0x8 ]
movzx edi ax
movzx eax [ esi + 0x8 ]
push edi
push eax
call sub_100082eb
mov ecx eax
call sub_100082eb
mov ecx [ ebp + 0x8 ]
movzx eax di
push eax
push [ esi ]
call sub_100084c0
pop edi
pop esi
pop ebp
retn 0x4
sub_10008629
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008053
cmp eax [ ebp + 0xc ]
je r-xdata
pop ebp
retn 0x8
push 0x0
push 0x3
call sub_10008773
sub_10008651
push 0xc
mov eax sub_1002198c
call sub_1000ffac
mov esi ecx
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x14 ]
call sub_10001560
lea eax [ esi + 0xc ]
push eax
lea ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] 0x1
call sub_1000466b
mov edi [ ebp + 0x10 ]
cmp [ edi - 0xc ] 0x0
mov [ ebp - 0x4 ] 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
add ecx 0xf1b0
mov [ eax ] ecx
mov eax [ esi + 0x8 ]
push edi
add eax 0xf1b0
push eax
lea eax [ ebp - 0x14 ]
push eax
call sub_1000e2f7
push 0xffffffff
push [ ebp - 0x14 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000276e
add esp 0x10
lea ecx [ edi - 0x10 ]
call sub_10001540
mov ecx [ ebp - 0x14 ]
add ecx 0xfffffff0
call sub_10001540
xor eax eax
inc eax
jmp r-xdata
push 0xf006
lea ecx [ ebp + 0x10 ]
call sub_1000246a
mov edi [ ebp + 0x10 ]
call sub_10010051
retn 0xc
sub_10008702
push 0x4
mov eax sub_100219b2
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
call sub_10003770
lea edi [ esi + 0xc ]
mov ecx edi
mov [ esi ] r--data
call sub_10001560
mov eax [ ebp + 0x8 ]
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
mov ecx edi
mov [ esi + 0x8 ] eax
call sub_100026e3
mov eax esi
call sub_10010051
retn 0x8
sub_10008746
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ esi + 0xc ]
sub ecx 0x10
mov [ esi ] r--data
call sub_10001540
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10008773
push 0x8
mov eax sub_100219d6
call sub_1000ff79
push 0x10
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x14 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
push r--data
lea eax [ ebp - 0x10 ]
push eax
call sub_10010b44
int3
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008702
sub_100087b6
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx ecx
mov eax [ ebx ]
push esi
call [ eax + 0x44 ]
test eax eax
jne r-xdata
pop esi
pop ebx
pop ebp
retn 0x4
mov eax [ ebx ]
push edi
mov ecx ebx
call [ eax + 0x38 ]
mov edi eax
mov eax [ esi ]
cmp [ r--data ] eax
jne r-xdata
mov edx [ edi + 0x4 ]
jmp r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ r--data ]
jne r-xdata
mov ecx [ edx ]
test ecx ecx
jne r-xdata
mov eax [ esi + 0x8 ]
cmp eax [ r--data ]
jne r-xdata
mov eax [ esi ]
cmp [ ecx ] eax
jne r-xdata
mov edi [ edi ]
test edi edi
jne r-xdata
mov eax [ esi + 0xc ]
cmp eax [ r--data ]
jne r-xdata
add edx 0x8
mov eax [ ecx + 0x4 ]
cmp eax [ esi + 0x4 ]
jne r-xdata
xor eax eax
mov ecx [ edi + 0x4 ]
xor edx edx
jmp r-xdata
mov eax [ ecx + 0x8 ]
cmp eax [ esi + 0x8 ]
jne r-xdata
cmp [ ecx ] edx
jne r-xdata
mov eax [ ecx + 0xc ]
cmp eax [ esi + 0xc ]
jne r-xdata
mov eax [ ecx + 0x4 ]
add eax ebx
cmp [ eax ] edx
jne r-xdata
mov edi [ edi ]
cmp edi edx
jne r-xdata
mov eax [ edx + 0x4 ]
add eax ebx
cmp [ eax ] 0x0
jne r-xdata
pop edi
add ecx 0x8
jmp r-xdata
sub_10008869
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ecx ]
push esi
push edi
mov [ ebp - 0x8 ] ecx
call [ eax + 0x38 ]
mov edi eax
cmp [ eax ] 0x0
jne r-xdata
add eax 0x8
lea esi [ eax + 0x4 ]
jmp r-xdata
cmp [ esi ] 0xffffffff
jne r-xdata
mov eax [ esi ]
mov ecx [ ebp - 0x8 ]
mov eax [ ecx + eax ]
test eax eax
je r-xdata
mov edi [ edi ]
test edi edi
jne r-xdata
add esi 0x8
mov ecx [ eax ]
and [ ebp - 0x4 ] 0x0
lea edx [ ebp - 0x4 ]
push edx
push [ ebp + 0x8 ]
push eax
call [ ecx ]
test eax eax
jne r-xdata
mov eax [ edi + 0x4 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x4 ]
test eax eax
jne r-xdata
pop edi
pop esi
leave
retn 0x4
sub_100088f6
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi ecx
lea eax [ esi + 0x4 ]
cmp [ eax ] 0x0
jne r-xdata
push eax
call [ InterlockedDecrement@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
xor eax eax
jmp r-xdata
mov eax ebx
push [ esi + 0x1c ]
lea ecx [ ebp - 0x14 ]
call sub_10005a58
mov eax [ esi ]
and [ ebp - 0x4 ] ebx
mov ecx esi
call [ eax + 0x10 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] ebx
je r-xdata
call sub_10010051
retn
push [ ebp - 0x14 ]
push ebx
call sub_10005169
sub_10008961
mov edi edi
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x8 ]
mov edi ecx
call sub_100087b6
mov esi [ ebp + 0xc ]
mov [ esi ] eax
mov ecx edi
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10008869
mov [ esi ] eax
neg eax
sbb eax eax
and eax 0x7fffbffe
add eax 0x80004002
call sub_100088db
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x8
sub_100089a4
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x8 ] 0x0
je r-xdata
pop ebp
jmp sub_10008961
push [ ebp + 0xc ]
mov eax [ ecx + 0x8 ]
push [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx ]
pop ebp
retn 0x8
sub_100089c7
mov edi edi
push esi
push edi
mov edi [ GetSysColor@IAT ]
push 0xf
mov esi ecx
call edi
push 0x10
mov [ esi + 0x28 ] eax
call edi
push 0x14
mov [ esi + 0x2c ] eax
call edi
push 0x12
mov [ esi + 0x30 ] eax
call edi
push 0x6
mov [ esi + 0x34 ] eax
call edi
mov edi [ GetSysColorBrush@IAT ]
push 0xf
mov [ esi + 0x38 ] eax
call edi
push 0x6
mov [ esi + 0x24 ] eax
call edi
pop edi
mov [ esi + 0x20 ] eax
pop esi
retn
sub_10008a0d
mov edi edi
push ebx
push esi
mov esi [ GetSystemMetrics@IAT ]
push edi
push 0xb
mov edi ecx
call esi
push 0xc
mov [ edi + 0x8 ] eax
call esi
push 0x2
mov [ edi + 0xc ] eax
call esi
inc eax
push 0x3
mov [ rw-data ] eax
call esi
inc eax
push 0x0
mov [ rw-data ] eax
call [ GetDC@IAT ]
mov esi [ GetDeviceCaps@IAT ]
mov ebx eax
push 0x58
push ebx
call esi
push 0x5a
push ebx
mov [ edi + 0x18 ] eax
call esi
push ebx
push 0x0
mov [ edi + 0x1c ] eax
call [ ReleaseDC@IAT ]
pop edi
pop esi
pop ebx
retn
sub_10008a69
mov edi edi
push ebx
push esi
push edi
mov esi ecx
call sub_10008a0d
xor ebx ebx
mov ecx esi
mov [ esi + 0x24 ] ebx
call sub_100089c7
mov edi [ LoadCursorA@IAT ]
push 0x7f02
push ebx
call edi
push 0x7f00
push ebx
mov [ esi + 0x3c ] eax
call edi
push 0x2
mov [ esi + 0x40 ] eax
pop eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
pop edi
mov [ esi + 0x50 ] ebx
mov [ esi + 0x44 ] ebx
mov eax esi
pop esi
pop ebx
retn
sub_10008ad6
lea ecx [ ebp - 0x218 ]
call sub_10001560
mov esi [ ebp - 0x21c ]
mov eax [ esi ]
xor edi edi
push edi
push 0x200
lea ecx [ ebp - 0x214 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] 0x2
call [ eax + 0xc ]
test eax eax
je r-xdata
push 0x38
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x14
lea eax [ ebp - 0x214 ]
push eax
push 0x38
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x18
jmp r-xdata
push edi
push edi
mov edi [ ebp - 0x218 ]
push edi
call sub_10004f51
lea ecx [ edi - 0x10 ]
mov [ ebp - 0x4 ] 0x1
call sub_10001540
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
mov eax r-xdata
retn
sub_10008b77
mov edi edi
push ebp
mov ebp esp
sub esp 0x98
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x90
lea eax [ ebp - 0x94 ]
push 0x0
push eax
call sub_100105c0
add esp 0xc
lea eax [ ebp - 0x98 ]
push eax
mov [ ebp - 0x98 ] 0x94
call [ GetVersionExA@IAT ]
mov ecx [ ebp - 0x4 ]
xor eax eax
cmp [ ebp - 0x88 ] 0x2
sete al
xor ecx ebp
call sub_1000f298
leave
retn
sub_10008bd1
mov edi edi
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push esi
push edi
call sub_10008b77
push r--data
mov [ rw-data ] eax
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
cmp [ rw-data ] ebx
pop ebx
setne al
retn
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push r--data
push edi
call esi
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
xor eax eax
inc eax
sub_10008cc8
mov edi edi
push ebp
mov ebp esp
call sub_10008bd1
test eax eax
je r-xdata
test [ ebp + 0xc ] 0x3
push esi
push edi
jne r-xdata
pop ebp
jmp [ rw-data ]
mov eax 0x12340042
mov esi [ ebp + 0x8 ]
xor eax eax
cmp [ esi + 0x8 ] eax
jle r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0xc ] eax
jle r-xdata
pop edi
pop esi
pop ebp
retn 0x8
mov edi [ GetSystemMetrics@IAT ]
push eax
call edi
cmp [ esi ] eax
jge r-xdata
push 0x1
call edi
cmp [ esi + 0x4 ] eax
jl r-xdata
sub_10008d19
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
call sub_10008bd1
test eax eax
je r-xdata
test [ ebp + 0xc ] 0x3
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
push [ ebp + 0x8 ]
call [ IsIconic@IAT ]
test eax eax
je r-xdata
mov eax 0x12340042
jmp r-xdata
leave
retn 0x8
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowRect@IAT ]
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowPlacement@IAT ]
jmp r-xdata
xor eax eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10008cc8
jmp r-xdata
test eax eax
je r-xdata
sub_10008d86
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
call sub_10008bd1
test eax eax
je r-xdata
cmp [ ebp + 0x8 ] 0x12340042
push ebx
push esi
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
xor eax eax
mov ebx [ ebp + 0xc ]
xor esi esi
cmp ebx esi
je r-xdata
leave
retn 0x8
cmp [ ebx ] 0x28
jb r-xdata
push esi
lea eax [ ebp - 0x10 ]
push eax
push esi
push 0x30
call [ SystemParametersInfoA@IAT ]
test eax eax
je r-xdata
push edi
mov [ ebx + 0x4 ] esi
mov [ ebx + 0x8 ] esi
push esi
mov esi [ GetSystemMetrics@IAT ]
call esi
push 0x1
mov [ ebx + 0xc ] eax
call esi
lea edi [ ebx + 0x14 ]
lea esi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
xor esi esi
inc esi
cmp [ ebx ] 0x48
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x24 ] esi
pop edi
jb r-xdata
mov eax esi
jmp r-xdata
push 0x1f
push r--data
push 0x20
add ebx 0x28
push ebx
call sub_10013218
add esp 0x10
pop esi
pop ebx
sub_10008e21
mov edi edi
push ebp
mov ebp esp
sub esp 0x44
push ebx
mov ebx [ ebp + 0x8 ]
xor eax eax
xor edx edx
push esi
push edi
mov [ ebp - 0x20 ] ax
cmp ebx edx
jne r-xdata
mov edi [ ebp + 0x1c ]
cmp edi edx
jne r-xdata
mov eax 0x80070057
jmp r-xdata
mov ecx [ edi + 0x8 ]
cmp ecx 0x5
jbe r-xdata
mov eax 0x80020008
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x24
mov [ ebp + 0x8 ] edx
cmp [ edi + 0xc ] edx
jbe r-xdata
mov eax 0x8002000e
jmp r-xdata
cmp [ ebp + 0x8 ] ecx
jae r-xdata
mov eax [ edi + 0x4 ]
mov [ ebp + 0x1c ] eax
cmp [ ebp + 0x28 ] 0x0
mov esi 0x80020003
jne r-xdata
mov eax [ ebp + 0x8 ]
mov edx ecx
sub edx [ ebp + 0x8 ]
shl eax 0x4
add eax [ edi ]
sub ecx [ ebp + 0x8 ]
lea edx [ ebp + edx * 4 - 0x48 ]
mov esi [ edi ]
add [ ebp + 0x1c ] 0x4
add esi edx
inc [ ebp + 0x8 ]
mov [ ebp + eax * 4 - 0x44 ] esi
mov eax [ ebp + 0x8 ]
add edx 0x10
cmp eax [ edi + 0xc ]
jb r-xdata
cmp [ ebp + 0x20 ] 0x0
jne r-xdata
lea eax [ ebp + 0x18 ]
mov [ ebp + 0x28 ] eax
mov [ edx ] eax
add eax 0x10
sub edx 0x4
dec ecx
jne r-xdata
mov eax [ ebp + 0x1c ]
mov eax [ eax ]
cmp eax ecx
jae r-xdata
lea eax [ ebp - 0x10 ]
push eax
call [ VariantInit@IAT ]
mov eax [ ebp + 0xc ]
add eax 0x139a
cmp eax 0x12
ja r-xdata
lea eax [ ebp - 0x20 ]
mov [ ebp + 0x20 ] eax
lea eax [ ebp - 0x10 ]
push eax
call [ VariantClear@IAT ]
mov eax esi
mov cl [ ebp + 0x18 ]
push 0x2
pop edx
jmp [ eax * 4 + jump_table_100093a1 ]
cmp [ edi + 0x8 ] 0x1
jne r-xdata
cmp [ edi + 0x8 ] 0x2
jne r-xdata
cmp [ edi + 0x8 ] 0x2
jne r-xdata
cmp [ edi + 0x8 ] 0x5
jne r-xdata
cmp [ edi + 0x8 ] 0x2
jne r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
push [ ebp + 0x20 ]
mov eax [ ebx ]
push ebx
call [ eax + 0x4c ]
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ ebx ]
push ebx
call [ eax + 0x48 ]
jmp r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
cmp [ edi + 0x8 ] 0x2
jne r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
test dl cl
je r-xdata
test dl cl
je r-xdata
cmp [ edi + 0x8 ] 0x1
je r-xdata
mov ecx [ ebp + 0x20 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
push ebx
call [ eax + 0x20 ]
jmp r-xdata
mov ecx [ ebp + 0x20 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
push ebx
call [ eax + 0x1c ]
mov esi 0x8002000e
jmp r-xdata
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x64 ]
jmp r-xdata
mov eax [ ebp - 0x44 ]
cmp [ eax ] 0x3
mov edi [ VariantChangeType@IAT ]
je r-xdata
mov eax [ ebp - 0x44 ]
cmp [ eax ] 0x3
je r-xdata
mov esi [ ebp - 0x44 ]
mov eax [ ebp - 0x10 ]
mov eax [ ebp - 0x44 ]
cmp [ eax ] 0x3
je r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x50 ]
mov esi eax
jmp r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x44 ]
jmp r-xdata
mov esi [ ebp - 0x44 ]
movzx eax [ esi ]
test eax 0x4000
je r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x3c ]
jmp r-xdata
push [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x38 ]
jmp r-xdata
push [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x34 ]
jmp r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x30 ]
jmp r-xdata
test cl 0x4
je r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
test cl 0x4
je r-xdata
cmp [ edi + 0x8 ] 0x1
jne r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x24 ]
jmp r-xdata
mov esi eax
test esi esi
jl r-xdata
push 0x9
mov eax [ eax + 0x8 ]
mov [ ebp + 0x18 ] eax
mov eax [ ebp - 0x40 ]
cmp [ eax ] 0x3
je r-xdata
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call edi
mov esi eax
test esi esi
jl r-xdata
push [ ebp + 0x20 ]
mov esi [ ebp - 0x40 ]
mov eax [ eax + 0x8 ]
mov ecx [ ebx ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x5c ]
jmp r-xdata
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ VariantChangeType@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov ecx [ ebp + 0x28 ]
and [ ecx ] 0x0
mov esi [ ebp - 0x34 ]
mov ecx [ ebx ]
sub esp 0x10
mov edi esp
push [ ebp - 0x4 ]
movsd [ edi ] [ esi ]
push [ ebp - 0x8 ]
movsd [ edi ] [ esi ]
push [ ebp - 0xc ]
movsd [ edi ] [ esi ]
push eax
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x58 ]
jmp r-xdata
test cl 0xf
je r-xdata
mov esi [ ebp - 0x40 ]
mov eax [ eax + 0x8 ]
mov ecx [ ebx ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x54 ]
jmp r-xdata
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ VariantChangeType@IAT ]
mov esi eax
test esi esi
jl r-xdata
push 0x8
jmp r-xdata
mov esi eax
test esi esi
jl r-xdata
mov ecx 0x400c
cmp ax cx
jne r-xdata
test al 0xc
jne r-xdata
cmp [ edi + 0x8 ] edx
jne r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x2c ]
jmp r-xdata
cmp [ edi + 0x8 ] edx
jne r-xdata
mov ecx [ ebp + 0x20 ]
mov esi [ ebp - 0x44 ]
mov eax [ ebx ]
add ecx 0x8
push ecx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ eax + 0x28 ]
jmp r-xdata
mov esi eax
test esi esi
jl r-xdata
push 0x3
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ eax + 0x8 ]
mov ecx [ ebx ]
push eax
push [ ebp + 0x18 ]
push ebx
call [ ecx + 0x60 ]
jmp r-xdata
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call edi
mov esi eax
test esi esi
jl r-xdata
mov eax [ ebp + 0x28 ]
and [ eax ] 0x0
jmp r-xdata
lea eax [ ebp - 0x10 ]
lea eax [ ebp - 0x10 ]
test cl 0xc
je r-xdata
lea eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x20 ]
pop eax
mov [ ecx ] ax
mov ecx 0x4008
cmp ax cx
jne r-xdata
push [ esi + 0x8 ]
call [ VariantClear@IAT ]
mov eax [ esi + 0x8 ]
push 0x8
pop ecx
mov [ eax ] cx
mov eax [ esi + 0x8 ]
add eax ecx
jmp r-xdata
mov esi 0x80020005
mov esi [ ebp - 0x44 ]
mov eax [ ebp - 0x40 ]
cmp [ eax ] 0x8
lea edi [ ebp - 0x30 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
je r-xdata
mov esi [ ebp - 0x44 ]
mov eax [ ebp - 0x40 ]
cmp [ eax ] 0x8
lea edi [ ebp - 0x30 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
je r-xdata
mov eax [ ebp + 0x28 ]
mov [ eax ] 0x1
jmp r-xdata
lea eax [ ebp - 0x10 ]
mov eax [ esi + 0x8 ]
jmp r-xdata
push [ esi + 0x8 ]
call [ VariantClear@IAT ]
mov eax [ esi + 0x8 ]
push 0x3
pop ecx
mov [ eax ] cx
mov eax [ esi + 0x8 ]
add eax 0x8
jmp r-xdata
push esi
call [ VariantClear@IAT ]
push 0x8
pop ecx
lea eax [ esi + 0x8 ]
mov [ esi ] cx
mov eax [ esi + 0x8 ]
jmp r-xdata
mov edx [ ebp + 0x20 ]
mov esi [ ebp - 0x40 ]
mov ecx [ ebx ]
add edx 0x8
push edx
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x40 ]
mov eax [ eax + 0x8 ]
mov ecx [ ebx ]
push eax
sub esp 0x10
mov edi esp
lea esi [ ebp - 0x30 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x6c ]
jmp r-xdata
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ VariantChangeType@IAT ]
mov esi eax
test esi esi
jl r-xdata
mov eax [ eax + 0x8 ]
mov ecx [ ebx ]
push eax
sub esp 0x10
mov edi esp
lea esi [ ebp - 0x30 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push ebx
movsd [ edi ] [ esi ]
call [ ecx + 0x68 ]
push 0x3
push 0x0
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ VariantChangeType@IAT ]
mov esi eax
test esi esi
jge r-xdata
movzx ecx [ esi ]
test ecx 0x4000
je r-xdata
lea eax [ ebp - 0x10 ]
lea eax [ ebp - 0x10 ]
sub_100093ed
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
xor eax eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1 ] 0x0
lea edi [ eax + ebx * 4 ]
xor esi esi
add esi 0x4
cmp esi 0x4c
jb r-xdata
mov eax [ esi + rw-data ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x1 ] 0x1
mov [ ecx + ebx * 4 ] eax
push [ esi + rw-data ]
push [ edi ]
call [ lstrcmpW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov eax 0x80020006
jmp r-xdata
inc ebx
cmp ebx [ ebp + 0x10 ]
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x14
sub_1000944f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003b3c
mov eax [ ebp + 0x8 ]
mov [ esi ] r--data
mov [ esi + 0x30 ] r--data
mov [ esi + 0x34 ] r--data
mov [ esi + 0x20 ] eax
xor eax eax
mov [ esi + 0x24 ] al
mov [ esi + 0x2c ] eax
mov [ esi + 0x38 ] eax
mov [ esi + 0x3c ] eax
mov [ esi + 0x40 ] eax
mov [ esi + 0x44 ] eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
mov [ esi + 0x50 ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100094bb
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x40 ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x20 ]
push eax
call [ CallWindowProcA@IAT ]
mov eax [ esi ]
call [ eax + 0xf8 ]
mov eax [ eax ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x20 ]
call [ DefWindowProcA@IAT ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10009508
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a0c
mov eax [ eax + 0x38 ]
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call eax
sub_10009529
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push edi
push [ ebp + 0xc ]
mov ebx ecx
push [ ebp + 0x8 ]
push [ ebx + 0x20 ]
call sub_10007672
mov edi eax
test edi edi
je r-xdata
or eax 0xffffffff
push esi
push edi
call [ GetDlgCtrlID@IAT ]
mov esi [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
test esi esi
je r-xdata
mov eax [ ebp - 0x4 ]
pop esi
jmp r-xdata
cmp [ esi ] 0x2c
jb r-xdata
pop edi
pop ebx
leave
retn 0xc
mov eax [ ebx + 0x20 ]
or [ esi + 0x4 ] 0x1
or [ esi + 0x24 ] 0xffffffff
push 0x0
push 0x0
push 0x87
push edi
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edi
call [ SendMessageA@IAT ]
test eax 0x2000
jne r-xdata
or [ esi + 0x4 ] 0x80000002
sub_1000959c
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x14 ]
xor eax eax
mov [ ebp + 0x8 ] eax
cmp eax [ ebx ]
je r-xdata
cmp edx [ ebx + 0x4 ]
jne r-xdata
add ebx 0x18
jmp r-xdata
cmp ecx [ ebx + 0x8 ]
jb r-xdata
cmp [ ebx + 0x10 ] 0x0
je r-xdata
cmp ecx [ ebx + 0xc ]
ja r-xdata
mov [ ebp + 0x8 ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop ebx
pop ebp
retn 0x10
sub_100095de
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp + 0x10 ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ eax + 0x114 ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
pop esi
leave
retn 0xc
push [ ebp + 0x10 ]
mov eax [ esi ]
push [ ebp + 0xc ]
mov ecx esi
push [ ebp + 0x8 ]
call [ eax + 0x118 ]
mov [ ebp - 0x4 ] eax
sub_1000965d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000dae2
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push eax
push 0x0
mov ecx esi
call sub_1000dac8
push eax
push [ ebp + 0x8 ]
call [ AdjustWindowRectEx@IAT ]
pop esi
pop ebp
retn 0x8
and eax 0xfffffdff
sub_10009740
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x24 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_10009765
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x28 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_1000978a
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x2c ]
pop edi
pop esi
pop ebp
retn 0x14
sub_100097af
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x30 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_100097d4
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x34 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_100097f9
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x38 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_1000981e
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x3c ]
pop edi
pop esi
pop ebp
retn 0x14
sub_10009843
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
push edi
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0x8 ]
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x40 ]
pop edi
pop esi
pop ebp
retn 0x18
sub_1000986b
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x44 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_100098ba
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x50 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_100098df
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
mov ecx [ eax ]
push esi
push edi
sub esp 0x10
mov edi esp
push [ ebp + 0x8 ]
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x54 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_10009904
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
sub esp 0x10
mov edi esp
push [ ebp + 0x14 ]
lea esi [ ebp + 0x18 ]
push [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
push [ ebp + 0xc ]
movsd [ edi ] [ esi ]
push [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x58 ]
pop edi
pop esi
pop ebp
retn 0x20
sub_10009932
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
push edi
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0x8 ]
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x5c ]
pop edi
pop esi
pop ebp
retn 0x18
sub_10009975
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
mov ecx [ eax ]
push esi
push edi
sub esp 0x10
mov edi esp
lea esi [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x64 ]
pop edi
pop esi
pop ebp
retn 0x10
sub_10009997
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push esi
mov ecx [ eax ]
push edi
push [ ebp + 0x18 ]
lea esi [ ebp + 0x8 ]
sub esp 0x10
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x68 ]
pop edi
pop esi
pop ebp
retn 0x14
sub_10009a62
push 0x14
push r--data
call sub_10010720
xor esi esi
mov [ ebp - 0x20 ] esi
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] esi
cmp eax esi
jne r-xdata
mov [ ebp - 0x4 ] esi
push [ ebp + 0x8 ]
call [ RegisterClassA@IAT ]
movzx eax ax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009abd
mov ax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_10009abd
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ax
sete al
mov esi eax
test esi esi
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push 0x0
call sub_10005169
test esi esi
je r-xdata
sub_10009af4
push 0x14
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x20 ] ebx
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetClassInfoA@IAT ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009b53
mov eax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_10009b53
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ebx
sete al
mov esi eax
cmp esi ebx
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push ebx
call sub_10005169
cmp esi ebx
je r-xdata
sub_10009b88
push 0x14
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x20 ] ebx
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetClassInfoExA@IAT ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009be7
mov eax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_10009be7
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ebx
sete al
mov esi eax
cmp esi ebx
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push ebx
call sub_10005169
cmp esi ebx
je r-xdata
sub_10009c1c
push 0x14
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x20 ] ebx
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x34 ]
push [ ebp + 0x30 ]
push [ ebp + 0x2c ]
push [ ebp + 0x28 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CreateWindowExA@IAT ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009c96
mov eax [ ebp - 0x1c ]
xor eax eax
jmp r-xdata
call sub_10010765
retn
sub_10009c96
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] ebx
sete al
mov esi eax
cmp esi ebx
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push ebx
call sub_10005169
cmp esi ebx
je r-xdata
sub_10009d3e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax 0x7fffffff
cmp esi eax
je r-xdata
mov ecx [ ecx ]
pop esi
cmp ecx eax
je r-xdata
mov edx [ ecx ]
cmp edx eax
je r-xdata
call sub_10003725
push ecx
call sub_10006288
pop ebp
retn 0x4
mov [ ecx ] esi
cmp edx esi
je r-xdata
sub_10009d8e
mov edi edi
push esi
mov esi ecx
call sub_10003b3c
xor eax eax
mov [ esi ] r--data
mov [ esi + 0x30 ] r--data
mov [ esi + 0x34 ] r--data
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] al
mov [ esi + 0x2c ] eax
mov [ esi + 0x28 ] eax
mov [ esi + 0x38 ] eax
mov [ esi + 0x3c ] eax
mov [ esi + 0x40 ] eax
mov [ esi + 0x44 ] eax
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
mov [ esi + 0x50 ] eax
mov eax esi
pop esi
retn
sub_10009e11
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x1c ]
push ebx
push esi
push edi
test eax eax
jne r-xdata
mov edi [ eax + 0x20 ]
xor edi edi
jmp r-xdata
push [ ebp + 0x24 ]
mov eax [ ebp + 0x18 ]
push [ ebp + 0x20 ]
mov edx [ eax + 0x4 ]
mov esi [ eax ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
mov ebx [ ecx ]
sub edi edx
push edi
sub eax esi
push eax
push edx
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ ebx + 0x5c ]
pop edi
pop esi
pop ebx
pop ebp
retn 0x20
sub_10009e5c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x18 ]
push ebx
push esi
push edi
test eax eax
jne r-xdata
mov edi [ eax + 0x20 ]
xor edi edi
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ ebp + 0x14 ]
push [ ebp + 0x1c ]
mov edx [ eax + 0x4 ]
mov esi [ eax ]
mov ebx [ ecx ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub edi edx
push edi
sub eax esi
push eax
mov eax [ ebp + 0x10 ]
push edx
push esi
or eax 0x40000000
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push 0x0
call [ ebx + 0x5c ]
pop edi
pop esi
pop ebx
pop ebp
retn 0x1c
sub_10009eac
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10005a3f
mov esi eax
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
cmp [ ebp + 0x8 ] 0x0
mov esi [ esi + 0x50 ]
je r-xdata
mov eax [ eax + 0x20 ]
test eax eax
je r-xdata
pop esi
pop ebp
retn 0x4
test esi esi
je r-xdata
push 0x0
push 0x0
push 0x401
push eax
call [ SendMessageA@IAT ]
push 0x1
call [ GetKeyState@IAT ]
test ax ax
jl r-xdata
mov eax [ esi ]
push 0xffffffff
mov ecx esi
call [ eax + 0x178 ]
sub_10009f02
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
jne r-xdata
push [ esi + 0x4 ]
call [ GetMenuItemCount@IAT ]
xor edi edi
mov [ ebp + 0x8 ] eax
test eax eax
jle r-xdata
call sub_10003725
xor eax eax
mov ebx [ ebp + 0xc ]
push edi
mov ecx esi
call sub_10009ccb
cmp eax ebx
je r-xdata
cmp [ eax + 0x4 ] ebx
je r-xdata
push [ esi + 0x4 ]
call sub_1000e0d8
jmp r-xdata
inc edi
cmp edi [ ebp + 0x8 ]
jl r-xdata
push ebx
push eax
call sub_10009f02
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
push edi
mov ecx esi
call sub_10009ce0
test eax eax
je r-xdata
jmp r-xdata
sub_10009f83
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009f6e
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10005aad
sub_10009fa3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a0c
mov eax [ eax + 0x4 ]
cmp [ eax + 0x6c ] 0x1
jne r-xdata
push [ ebp + 0xc ]
mov eax [ esi ]
push [ ebp + 0x8 ]
mov ecx esi
call [ eax + 0x7c ]
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
cmp eax 0x3
jne r-xdata
push 0xf
pop eax
jmp r-xdata
cmp eax 0xb
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov edx [ esi ]
push eax
push [ ebp + 0x8 ]
mov ecx esi
call [ edx + 0x80 ]
jmp r-xdata
xor eax eax
pop esi
pop ebp
retn 0x8
sub_10009ff9
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
xor eax eax
pop ebp
retn 0x8
call sub_10005a3f
mov eax [ eax + 0x48 ]
test eax eax
je r-xdata
test [ eax + 0x4 ] 0x40000000
jne r-xdata
push 0x1
call sub_10009eac
sub_1000a027
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_100088db
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x4
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a06f
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_1000894c
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x4
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a0b7
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x10 ]
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
mov ecx esi
call sub_100089a4
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0xc
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a105
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x28 ]
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10008e21
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x24
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a161
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0xc ]
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call [ eax + 0x94 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a1af
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0xc ]
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call [ eax + 0x98 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a1fd
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0x9c ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a257
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xa0 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a2b1
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xa4 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a30b
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xa8 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a365
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xac ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a3bf
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xb0 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a419
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xb4 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a473
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x20 ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xb8 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x1c
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a4d0
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xbc ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a52a
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0xc ]
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call [ eax + 0xc0 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a578
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0xc ]
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call [ eax + 0xc4 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a5c6
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xc8 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a620
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xcc ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a67a
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
push [ ebp + 0x18 ]
lea esi [ ebp + 0x1c ]
push [ ebp + 0x14 ]
movsd [ edi ] [ esi ]
push [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
push [ ebp + 0xc ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xd0 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x24
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a6dd
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x20 ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xd4 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x1c
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a73a
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x14 ]
add esi 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x14 ]
mov eax [ esi ]
push [ ebp + 0x10 ]
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
mov ecx esi
call [ eax + 0xd8 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x10
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a78e
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xdc ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x14
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a7e5
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xe0 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a83f
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov ebx [ ebp + 0x8 ]
push [ ebx - 0x14 ]
add ebx 0xffffffd0
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x1c ]
mov eax [ ebx ]
and [ ebp - 0x4 ] 0x0
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx ebx
movsd [ edi ] [ esi ]
call [ eax + 0xe4 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x18
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a899
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x18 ]
add esi 0xffffffcc
lea ecx [ ebp - 0x14 ]
call sub_10005a58
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_100088db
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x4
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a8e1
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x18 ]
add esi 0xffffffcc
lea ecx [ ebp - 0x14 ]
call sub_10005a58
and [ ebp - 0x4 ] 0x0
mov ecx esi
call sub_1000894c
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x4
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a929
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x18 ]
add esi 0xffffffcc
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0x10 ]
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
mov ecx esi
call sub_100089a4
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0xc
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a977
push 0x8
mov eax sub_10021a2c
call sub_1000ff79
mov esi [ ebp + 0x8 ]
push [ esi - 0x18 ]
add esi 0xffffffcc
lea ecx [ ebp - 0x14 ]
call sub_10005a58
push [ ebp + 0xc ]
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
mov ecx esi
call [ eax + 0xe8 ]
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x10 ] 0x0
mov esi eax
je r-xdata
mov eax esi
call sub_10010051
retn 0x8
push [ ebp - 0x14 ]
push 0x0
call sub_10005169
sub_1000a9c5
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
push [ esi - 0x18 ]
lea ecx [ ebp - 0x8 ]
call sub_10005a58
cmp [ ebp - 0x4 ] 0x0
mov eax [ esi - 0x14 ]
mov [ edi ] eax
pop esi
je r-xdata
mov eax 0x80004003
jmp r-xdata
xor eax eax
push [ ebp - 0x8 ]
push 0x0
call sub_10005169
pop edi
leave
retn 0x8
sub_1000aa14
mov edi edi
push ebp
mov ebp esp
sub esp 0x60
push esi
mov esi ecx
push edi
mov [ ebp - 0x8 ] esi
call sub_1000dac8
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
test [ ebp - 0x4 ] 0x40000000
je r-xdata
mov edi [ eax + 0x20 ]
jmp r-xdata
push 0x4
push [ esi + 0x20 ]
call [ GetWindow@IAT ]
push [ esi + 0x20 ]
call [ GetParent@IAT ]
jmp r-xdata
push ebx
mov ebx [ GetWindowRect@IAT ]
lea eax [ ebp - 0x38 ]
push eax
push [ esi + 0x20 ]
call ebx
test [ ebp - 0x4 ] 0x40000000
jne r-xdata
push 0x0
push 0x0
push 0x36b
push edi
call [ SendMessageA@IAT ]
test eax eax
je r-xdata
mov edi eax
test edi edi
je r-xdata
push [ esi + 0x20 ]
call [ GetParent@IAT ]
mov esi [ GetClientRect@IAT ]
mov ebx eax
lea eax [ ebp - 0x18 ]
push eax
push ebx
call esi
lea eax [ ebp - 0x28 ]
push eax
push edi
call esi
push 0x2
lea eax [ ebp - 0x28 ]
push eax
push ebx
push edi
call [ MapWindowPoints@IAT ]
test edi edi
je r-xdata
mov edi eax
cmp ecx [ ebp - 0x18 ]
pop ebx
jge r-xdata
sub ebx [ ebp - 0x30 ]
add ebx [ ebp - 0x10 ]
mov ecx ebx
mov [ ebp - 0x60 ] 0x28
test edi edi
jne r-xdata
push 0xfffffff0
push edi
call [ GetWindowLongA@IAT ]
test eax __pe_dll_export_address_table
je r-xdata
mov eax [ ebp + 0x8 ]
add eax esi
cmp eax [ ebp - 0xc ]
jle r-xdata
mov ecx [ ebp - 0x18 ]
lea eax [ ebp - 0x28 ]
push eax
push edi
call ebx
lea eax [ ebp - 0x60 ]
push eax
push 0x2
push edi
call sub_10008d19
push eax
call sub_10008d86
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call [ CopyRect@IAT ]
jmp r-xdata
call sub_10001cf3
test eax eax
je r-xdata
xor edi edi
test eax 0x20000000
je r-xdata
cmp esi [ ebp - 0x14 ]
jge r-xdata
mov esi [ ebp - 0x34 ]
sub esi [ ebp - 0x2c ]
add esi [ ebp - 0xc ]
mov ecx [ ebp - 0x20 ]
mov eax [ ebp - 0x28 ]
mov edi [ ebp - 0x30 ]
mov ebx [ ebp - 0x38 ]
add eax ecx
cdq
sub eax edx
mov ecx eax
sub edi ebx
mov eax edi
cdq
sub eax edx
mov edx [ ebp - 0x1c ]
sar eax 0x1
sar ecx 0x1
sub ecx eax
mov eax [ ebp - 0x2c ]
sub eax [ ebp - 0x34 ]
add edi ecx
mov [ ebp + 0x8 ] eax
mov eax [ ebp - 0x24 ]
add eax edx
cdq
sub eax edx
mov esi eax
mov eax [ ebp + 0x8 ]
cdq
sub eax edx
sar esi 0x1
sar eax 0x1
sub esi eax
cmp edi [ ebp - 0x10 ]
jle r-xdata
lea ecx [ ebp - 0x60 ]
push ecx
push 0x1
push eax
call sub_10008d19
push eax
call sub_10008d86
mov esi [ CopyRect@IAT ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x28 ]
push eax
call esi
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call esi
jmp r-xdata
mov eax [ eax + 0x20 ]
push 0x15
push 0xffffffff
push 0xffffffff
push esi
push ecx
mov ecx [ ebp - 0x8 ]
push 0x0
call sub_1000db65
pop edi
pop esi
leave
retn 0x4
mov esi [ ebp - 0x14 ]
sub_1000abd4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x44 ] eax
mov eax [ ecx + 0x3c ]
test al 0x10
je r-xdata
pop ebp
retn 0x4
and eax 0xffffffef
mov [ ecx + 0x3c ] eax
xor eax eax
push eax
push eax
push eax
push [ ecx + 0x20 ]
call [ PostMessageA@IAT ]
sub_1000abfe
push 0x4
mov eax sub_10021a50
call sub_1000ff79
push 0x54
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
je r-xdata
call sub_10010051
retn
call sub_10009d8e
sub_1000ac52
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x4 ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
pop esi
retn
push [ esi + 0xc ]
call [ GetModuleHandleA@IAT ]
mov [ esi + 0x4 ] eax
test eax eax
jne r-xdata
push [ esi + 0xc ]
call [ LoadLibraryA@IAT ]
test eax eax
mov [ esi + 0x4 ] eax
setne al
mov [ esi + 0x8 ] al
sub_1000ac86
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov ecx [ esi + 0x10 ]
mov eax [ ebp + 0x8 ]
mov [ eax ] ecx
pop esi
pop ebp
retn 0x4
push r--data
call sub_1000ac52
push eax
call [ GetProcAddress@IAT ]
mov [ esi + 0x10 ] eax
sub_1000acb5
push 0x14
push r--data
call sub_10010720
mov esi ecx
and [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x1c ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
call sub_10010765
retn
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x24 ]
push eax
mov ecx esi
call sub_1000ac86
mov esi [ esi + 0x10 ]
xor eax eax
test esi esi
setne al
test eax eax
jne r-xdata
call esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ad18
call sub_10003725
sub_1000ad29
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x14 ] 0x0
jne r-xdata
mov ecx [ esi + 0x14 ]
mov eax [ ebp + 0x8 ]
mov [ eax ] ecx
pop esi
pop ebp
retn 0x4
push r--data
call sub_1000ac52
push eax
call [ GetProcAddress@IAT ]
mov [ esi + 0x14 ] eax
sub_1000ad58
push 0x18
push r--data
call sub_10010720
mov esi ecx
xor edi edi
mov [ ebp - 0x20 ] edi
lea eax [ ebp - 0x20 ]
push eax
call sub_10005a0c
push [ eax + 0x80 ]
call sub_10005180
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x1c ] edi
cmp eax edi
jne r-xdata
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x28 ]
push eax
mov ecx esi
call sub_1000ad29
mov eax [ esi + 0x14 ]
xor ecx ecx
cmp eax edi
setne cl
cmp ecx edi
jne r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x8 ]
call eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000adcd
mov eax [ ebp - 0x1c ]
call sub_10003725
call sub_10010765
retn 0x4
sub_1000adcd
cmp [ ebp - 0x24 ] 0x2
je r-xdata
retn
xor eax eax
cmp [ ebp - 0x1c ] eax
sete al
mov esi eax
test esi esi
je r-xdata
xor edi edi
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push edi
call [ SetLastError@IAT ]
push [ ebp - 0x20 ]
push 0x0
call sub_10005169
test esi esi
je r-xdata
sub_1000ae23
mov edi edi
push esi
push sub_10003741
mov ecx rw-data
call sub_100060b8
mov esi eax
test esi esi
jne r-xdata
call [ GetMessageTime@IAT ]
mov [ esi + 0x68 ] eax
call [ GetMessagePos@IAT ]
movsx ecx ax
shr eax 0x10
cwde
mov [ esi + 0x70 ] eax
mov [ esi + 0x6c ] ecx
lea eax [ esi + 0x58 ]
pop esi
retn
call sub_10003725
sub_1000ae61
mov edi edi
push esi
mov esi ecx
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
push [ eax + 0x64 ]
mov edx [ esi ]
push [ eax + 0x60 ]
mov ecx esi
push [ eax + 0x5c ]
call [ edx + 0x118 ]
pop esi
retn
call sub_10003725
sub_1000ae93
push 0x0
mov eax sub_10021a9c
call sub_1000ff79
call sub_10005a3f
mov esi eax
cmp [ esi + 0x14 ] 0x0
jne r-xdata
mov eax [ esi + 0x14 ]
call sub_10010051
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push sub_1000761f
call sub_100016a1
push 0x60
mov ebx eax
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x20
push sub_10009a36
push sub_1000ac2b
push r--data
call sub_10006328
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x14 ] eax
call sub_100016a1
sub_1000af07
mov edi edi
push ebp
mov ebp esp
push esi
push edi
push 0x1
call sub_1000ae93
push [ ebp + 0x8 ]
mov esi eax
mov ecx esi
call sub_100063b1
mov edi eax
push esi
mov ecx edi
call sub_1000dba3
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
sub_1000af33
mov edi edi
push ebp
mov ebp esp
push 0x0
call sub_1000ae93
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
pop ebp
retn 0x4
add ecx 0x1c
pop ebp
jmp sub_1000dccb
sub_1000af54
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
test edi edi
jne r-xdata
push ebx
push 0x1
call sub_1000ae93
mov ebx eax
push esi
push edi
mov ecx ebx
mov [ esi + 0x20 ] edi
call sub_10006e67
push ebx
mov ecx esi
call sub_1000dba3
xor eax eax
inc eax
pop ebx
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x4
sub_1000af90
mov edi edi
push esi
mov esi ecx
push edi
mov edi [ esi + 0x20 ]
test edi edi
je r-xdata
and [ esi + 0x50 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_1000ae93
test eax eax
je r-xdata
and [ esi + 0x20 ] 0x0
push [ esi + 0x20 ]
lea ecx [ eax + 0x1c ]
call sub_1000dd39
sub_1000afc0
mov edi edi
push esi
push sub_10003741
mov ecx rw-data
call sub_100060b8
mov esi eax
test esi esi
jne r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
je r-xdata
call sub_10003725
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
xor eax eax
inc eax
pop esi
retn
and [ esi + 0x14 ] 0x0
xor eax eax
pop esi
retn
push eax
call [ UnhookWindowsHookEx@IAT ]
and [ esi + 0x28 ] 0x0
sub_1000b00d
mov edi edi
push esi
mov esi ecx
mov ecx [ esi + 0x4c ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x2c ]
and [ esi + 0x4c ] 0x0
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push 0x0
push 0x0
push eax
call [ ecx + 0xc ]
mov ecx esi
pop esi
jmp sub_1000ae61
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_1000b04a
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
push esi
push edi
mov esi ecx
call sub_10003ea6
mov edi eax
xor ebx ebx
cmp edi ebx
je r-xdata
mov ecx [ esi + 0x48 ]
cmp ecx ebx
je r-xdata
cmp [ edi + 0x20 ] esi
jne r-xdata
mov ecx [ esi + 0x4c ]
xor ebx ebx
inc ebx
test ecx ecx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x50 ]
mov [ esi + 0x48 ] ebx
cmp [ edi + 0x24 ] esi
jne r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] bl
jne r-xdata
and [ esi + 0x4c ] 0x0
test [ esi + 0x3c ] bl
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
mov [ edi + 0x24 ] ebx
mov [ edi + 0x20 ] ebx
call sub_10005a0c
cmp edi [ eax + 0x4 ]
jne r-xdata
mov eax [ esi + 0x20 ]
mov edi [ GetWindowLongA@IAT ]
push 0xfffffffc
push eax
call edi
mov ecx esi
mov ebx eax
call sub_1000ae61
mov eax [ esi + 0x20 ]
push 0xfffffffc
push eax
call edi
cmp eax ebx
jne r-xdata
call sub_10005a3f
mov edi [ eax + 0x3c ]
test edi edi
je r-xdata
push ebx
call sub_100019ef
call sub_1000774d
test eax eax
je r-xdata
mov ecx esi
call sub_1000af90
mov eax [ esi ]
mov ecx esi
call [ eax + 0x11c ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi ]
mov ecx esi
call [ eax + 0xf8 ]
mov eax [ eax ]
test eax eax
je r-xdata
cmp [ edi + 0x20 ] 0x0
je r-xdata
push eax
push 0xfffffffc
push [ esi + 0x20 ]
call [ SetWindowLongA@IAT ]
push 0x30
lea eax [ ebp - 0x30 ]
push 0x0
push eax
call sub_100105c0
mov eax [ esi + 0x20 ]
add esp 0xc
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x30 ]
push eax
push 0x0
push 0x405
push [ edi + 0x20 ]
mov [ ebp - 0x30 ] 0x2c
mov [ ebp - 0x2c ] ebx
call [ SendMessageA@IAT ]
sub_1000b15d
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x20 ]
push edi
xor edi edi
cmp eax edi
jne r-xdata
push edi
call sub_1000ae93
cmp eax edi
jne r-xdata
cmp [ esi + 0x50 ] edi
jne r-xdata
push [ esi + 0x20 ]
lea ecx [ eax + 0x1c ]
call sub_1000dccb
call sub_10003725
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0x50 ] edi
jne r-xdata
cmp [ esi + 0x50 ] edi
je r-xdata
mov eax [ esi + 0x20 ]
cmp eax edi
jne r-xdata
pop edi
pop esi
retn
mov ecx [ esi + 0x50 ]
mov eax [ ecx ]
call [ eax + 0x58 ]
push eax
call [ DestroyWindow@IAT ]
jmp r-xdata
mov eax edi
mov edi eax
sub_1000b1bc
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov esi ecx
push sub_10003741
mov ecx rw-data
mov [ ebp - 0xc ] eax
call sub_100060b8
test eax eax
jne r-xdata
mov eax [ eax + 0x5c ]
lea ecx [ ebp - 0xc ]
push ecx
sub eax 0x132
push 0x0
mov [ ebp - 0x4 ] eax
mov eax [ esi ]
push 0x19
mov ecx esi
call [ eax + 0x110 ]
pop esi
leave
retn 0x8
call sub_10003725
sub_1000b20d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetDlgItem@IAT ]
mov edi [ GetTopWindow@IAT ]
mov esi eax
test esi esi
je r-xdata
push [ ebp + 0x8 ]
call edi
jmp r-xdata
push esi
call edi
test eax eax
je r-xdata
mov esi eax
test esi esi
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
push esi
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000b20d
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000b20d
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
retn 0xc
call sub_1000af33
test eax eax
jne r-xdata
call sub_1000af07
jmp r-xdata
push 0x2
push esi
call [ GetWindow@IAT ]
sub_1000b286
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0xc ]
mov esi [ edi ]
jmp r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000af33
test eax eax
je r-xdata
xor eax eax
cmp esi [ ebp + 0x8 ]
je r-xdata
mov edx [ eax ]
push edi
mov ecx eax
call [ edx + 0x108 ]
test eax eax
jne r-xdata
push esi
call [ GetParent@IAT ]
mov esi eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x8
sub_1000b2cc
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
mov edx [ esi ]
push [ eax + 0x64 ]
mov ecx esi
push [ eax + 0x60 ]
push [ eax + 0x5c ]
call [ edx + 0x120 ]
pop esi
pop ebp
retn 0x4
call sub_10003725
sub_1000b307
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x4c ] 0x0
je r-xdata
mov ecx esi
call sub_1000ae61
mov ecx [ esi + 0x4c ]
mov eax [ ecx ]
call [ eax + 0x90 ]
test eax eax
jne r-xdata
pop esi
retn 0x4
sub_1000b32c
mov edi edi
push ebx
push esi
push edi
mov ebx ecx
call sub_1000dac8
test eax 0x40000000
jne r-xdata
mov ecx ebx
call sub_1000ae61
neg eax
sbb eax eax
neg eax
call sub_10001cf3
mov edi eax
test edi edi
je r-xdata
mov esi [ GetKeyState@IAT ]
push 0x10
call esi
test ax ax
jl r-xdata
push 0x11
call esi
test ax ax
jl r-xdata
push 0x12
call esi
test ax ax
jl r-xdata
push 0x0
push 0xe146
push 0x111
push [ edi + 0x20 ]
call [ SendMessageA@IAT ]
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
pop ebx
retn 0x4
sub_1000b398
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
cmp [ esi + 0x24 ] 0x0
jne r-xdata
mov eax [ esi ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp + 0xc ]
mov ecx esi
push [ ebp + 0x8 ]
call [ eax + 0xec ]
test eax eax
jge r-xdata
call sub_1000ae61
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov ecx esi
jmp r-xdata
pop esi
leave
retn 0x8
sub_1000b3d6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_1000ae61
push 0x0
call sub_1000b2cc
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0xc
sub_1000b3fc
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi [ PeekMessageA@IAT ]
mov ebx ecx
mov esi 0x121
jmp r-xdata
push 0x1
push esi
push esi
push 0x0
lea eax [ ebp - 0x1c ]
push eax
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
call [ DispatchMessageA@IAT ]
mov ecx ebx
call sub_1000ae61
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000b43e
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0xc ]
mov esi ecx
mov ecx [ ebp + 0xc ]
push eax
call sub_1000b2cc
test eax eax
je r-xdata
mov ecx esi
call sub_1000ae61
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_1000b467
mov edi edi
push ebp
mov ebp esp
push ecx
push edi
lea eax [ ebp - 0x4 ]
push eax
xor edi edi
call sub_10005a0c
mov eax [ eax + 0x78 ]
mov ecx [ eax ]
call sub_1000ad29
cmp [ eax ] edi
je r-xdata
mov eax [ ebp + 0xc ]
and eax 0x3fc0
cmp eax [ ebp + 0xc ]
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000ae03
test eax eax
je r-xdata
mov eax edi
pop edi
leave
retn 0x8
call sub_10005a0c
mov eax [ eax + 0x78 ]
mov ecx [ eax ]
call sub_1000acb5
mov edi 0x3fc0
mov edi [ ebp + 0xc ]
jmp r-xdata
sub_1000b4f0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
test [ ebp + 0x10 ] __pe_dll_export_address_table
jne r-xdata
leave
retn 0xc
push esi
mov esi [ ebp + 0x8 ]
mov ecx esi
call sub_1000dac8
test eax 0x50000000
jne r-xdata
pop esi
lea eax [ ebp - 0x10 ]
push eax
push [ esi + 0x20 ]
call [ GetWindowRect@IAT ]
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
cmp ecx [ ebp - 0x10 ]
jne r-xdata
mov eax [ eax + 0x4 ]
cmp eax [ ebp - 0xc ]
jne r-xdata
push 0x4
mov ecx esi
call sub_1000b4d5
test eax eax
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x124 ]
test eax eax
je r-xdata
mov ecx eax
call sub_1000db23
test eax eax
jne r-xdata
push 0x0
mov ecx esi
call sub_1000aa14
sub_1000b566
push 0x38
mov eax sub_10021ab7
call sub_1000ffac
push sub_10003741
mov ecx rw-data
call sub_100060b8
mov ebx eax
xor eax eax
xor edx edx
cmp ebx edx
setne al
mov [ ebp - 0x18 ] ebx
cmp eax edx
jne r-xdata
lea eax [ ebx + 0x58 ]
push 0x7
mov esi eax
pop ecx
lea edi [ ebp - 0x44 ]
[ edi ] [ esi ]
mov ecx [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
mov esi [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ ebp + 0x14 ]
mov [ ebx + 0x60 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebx + 0x5c ] edi
mov [ ebx + 0x64 ] eax
mov [ ebp - 0x4 ] edx
cmp edi 0x2
jne r-xdata
call sub_10003725
and [ ebp + 0x8 ] 0x0
cmp edi 0x110
jne r-xdata
cmp [ esi + 0x4c ] edx
je r-xdata
push [ ebp + 0x18 ]
mov eax [ esi ]
push [ ebp + 0x14 ]
mov ecx esi
push edi
call [ eax + 0x110 ]
mov [ ebp + 0x18 ] eax
cmp edi 0x110
jne r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x28 ]
push eax
push esi
call sub_10009dd3
mov ecx [ esi + 0x4c ]
mov eax [ ecx ]
push edx
call [ eax + 0x60 ]
mov eax [ ebp + 0x18 ]
push 0x7
lea edi [ ebx + 0x58 ]
pop ecx
lea esi [ ebp - 0x44 ]
[ edi ] [ esi ]
call sub_10010051
retn 0x14
push [ ebp + 0x8 ]
lea eax [ ebp - 0x28 ]
push eax
push esi
call sub_1000b4f0
jmp r-xdata
sub_1000b659
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x360
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000af33
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call [ DefWindowProcA@IAT ]
cmp [ eax + 0x20 ] esi
jne r-xdata
pop ebp
retn 0x10
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push eax
call sub_1000b566
jmp r-xdata
pop esi
sub_1000b6a6
push 0x4
mov eax sub_10021ada
call sub_1000ff79
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x20 ] 0x0
je r-xdata
mov ecx [ esi + 0x4c ]
test ecx ecx
je r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi + 0x50 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
cmp esi rw-data
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10003b64
call sub_10010051
retn
cmp [ eax + 0x28 ] esi
jne r-xdata
cmp esi rw-data
je r-xdata
and [ eax + 0x28 ] 0x0
cmp esi rw-data
je r-xdata
call sub_1000b15d
sub_1000b71b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_1000ae61
lea eax [ ebp + 0xc ]
push eax
call sub_1000b2cc
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_1000b748
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
cmp [ esi ] 0x1
push edi
mov edi ecx
jne r-xdata
mov esi [ esi + 0x4 ]
push 0x1
push esi
push [ edi + 0x20 ]
call sub_1000b20d
test eax eax
je r-xdata
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
mov ecx edi
call sub_1000ae61
push 0x0
mov ecx eax
call sub_1000b2cc
test eax eax
jne r-xdata
mov ecx [ eax + 0x74 ]
cmp ecx [ edi + 0x20 ]
jne r-xdata
call sub_10003725
pop edi
pop esi
pop ebp
retn 0x8
mov eax [ edi ]
mov ecx edi
call [ eax + 0x6c ]
push [ eax + 0x78 ]
call sub_1000e0c4
jmp r-xdata
push [ esi + 0x8 ]
push eax
call sub_10009f02
test eax eax
je r-xdata
test eax eax
je r-xdata
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0x10 ]
jmp r-xdata
sub_1000b7d1
test ecx ecx
je r-xdata
xor eax eax
retn
mov eax [ ecx + 0x20 ]
test eax eax
jne r-xdata
push esi
push edi
mov edi [ GetParent@IAT ]
push eax
jmp r-xdata
call edi
push eax
call sub_1000af07
mov esi eax
test esi esi
jne r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x128 ]
test eax eax
jne r-xdata
pop edi
pop esi
retn
mov eax esi
jmp r-xdata
push [ esi + 0x20 ]
sub_1000b810
mov edi edi
push esi
mov esi ecx
test esi esi
je r-xdata
xor eax eax
pop esi
retn
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi ]
call [ eax + 0x128 ]
test eax eax
jne r-xdata
test esi esi
je r-xdata
mov ecx esi
call sub_1000b7d1
mov esi eax
mov eax esi
pop esi
retn
mov ecx esi
jmp r-xdata
call sub_1000b7d1
test eax eax
jne r-xdata
mov esi eax
mov ecx eax
sub_1000b851
mov edi edi
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x8 ]
mov edi [ GetTopWindow@IAT ]
call edi
jmp r-xdata
mov esi eax
test esi esi
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
pop edi
pop esi
pop ebp
retn 0x18
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call [ SendMessageA@IAT ]
push esi
call sub_1000af33
test eax eax
je r-xdata
push 0x2
push esi
call [ GetWindow@IAT ]
push esi
call edi
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0x20 ]
push eax
call sub_1000b566
jmp r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000b851
sub_1000b8d0
push 0x54
mov eax sub_10021afd
call sub_1000ff79
push 0x0
call sub_1000ae93
test eax eax
jne r-xdata
mov edi [ ebp + 0x8 ]
lea esi [ eax + 0x1c ]
push edi
mov ecx esi
call sub_1000dccb
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0xc ]
mov ecx eax
call sub_1000b2cc
push edi
call [ GetParent@IAT ]
push eax
mov ecx esi
call sub_1000dccb
test eax eax
je r-xdata
call sub_10010051
retn 0x8
mov eax [ eax + 0x4c ]
test eax eax
je r-xdata
push edi
lea ecx [ eax + 0x24 ]
call sub_1000dccb
mov esi eax
test esi esi
je r-xdata
push edi
lea ecx [ ebp - 0x60 ]
call sub_1000944f
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x10 ] esi
call sub_1000b2cc
and [ ebp - 0x40 ] 0x0
xor ecx ecx
test eax eax
setne cl
or [ ebp - 0x4 ] 0xffffffff
mov esi ecx
lea ecx [ ebp - 0x60 ]
call sub_1000b6a6
mov eax esi
jmp r-xdata
sub_1000b970
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
je r-xdata
push 0x0
push [ ebp + 0xc ]
call sub_1000b8d0
test eax eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x2
jne r-xdata
pop esi
pop ebp
retn 0x8
mov ecx esi
call sub_1000ae61
sub_1000b9a0
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0xc ]
push eax
mov eax [ ebp + 0xc ]
push [ eax + 0x4 ]
mov esi ecx
call sub_1000b8d0
test eax eax
je r-xdata
mov ecx esi
call sub_1000ae61
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_1000b9cc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
mov eax [ eax + 0x8 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x1c ]
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_1000b9fe
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
mov eax [ eax + 0x8 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x20 ]
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_1000ba30
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x24 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000ba70
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x28 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bab0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x2c ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000baf0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x30 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bb30
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x34 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bb70
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x38 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bbb0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x3c ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bbf0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x1c
push [ ebp + 0x20 ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x40 ]
sub_1000bc39
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x44 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bc79
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
mov eax [ eax + 0x8 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x48 ]
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_1000bcab
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
mov eax [ eax + 0x8 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0x4c ]
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_1000bcdd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x1c ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x50 ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bd1d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x54 ]
mov eax 0x80010108
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x18
sub_1000bd50
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
xor ecx ecx
push esi
push edi
cmp eax ecx
jne r-xdata
cmp [ ebp + 0xc ] ecx
jne r-xdata
mov eax 0x80010108
jmp r-xdata
cmp [ ebp + 0x10 ] ecx
je r-xdata
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x24
cmp [ ebp + 0x14 ] ecx
je r-xdata
cmp [ ebp + 0x18 ] ecx
je r-xdata
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0x18 ]
lea esi [ ebp + 0x1c ]
push [ ebp + 0x14 ]
movsd [ edi ] [ esi ]
push [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
push [ ebp + 0xc ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x58 ]
sub_1000bda9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
cmp [ ebp + 0x20 ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x20 ]
mov ecx [ eax ]
sub esp 0x10
mov edi esp
push [ ebp + 0xc ]
lea esi [ ebp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x5c ]
mov eax 0x80004003
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x1c
sub_1000bdec
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
mov eax 0x80010108
jmp r-xdata
push [ ebp + 0x14 ]
mov eax [ eax + 0x8 ]
push [ ebp + 0x10 ]
mov ecx [ eax ]
push [ ebp + 0xc ]
push eax
call [ ecx + 0x60 ]
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x10
sub_1000be24
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
push esi
push edi
test eax eax
jne r-xdata
mov ecx [ eax ]
sub esp 0x10
mov edi esp
lea esi [ ebp + 0xc ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ ecx + 0x64 ]
mov eax 0x80010108
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x14
sub_1000be8b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x28 ]
mov eax [ eax + 0x8 ]
push [ ebp + 0x24 ]
mov ecx [ eax ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ecx + 0x18 ]
mov eax 0x80010108
jmp r-xdata
pop ebp
retn 0x24
sub_1000bec5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x1c ]
mov eax [ eax + 0x8 ]
push [ ebp + 0x18 ]
mov ecx [ eax ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ecx + 0x14 ]
mov eax 0x80010108
jmp r-xdata
pop ebp
retn 0x18
sub_1000bef6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
mov eax [ eax + 0x8 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push eax
call [ ecx + 0xc ]
mov eax 0x80010108
jmp r-xdata
pop ebp
retn 0x8
sub_1000bf1b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
mov eax [ eax + 0x8 ]
push [ ebp + 0x10 ]
mov ecx [ eax ]
push [ ebp + 0xc ]
push eax
call [ ecx + 0x10 ]
mov eax 0x80010108
jmp r-xdata
pop ebp
retn 0x10
sub_1000bf5d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000b6a6
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000bf7e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
cmp [ esi ] 0x1
push edi
mov edi ecx
jne r-xdata
push 0x0
push [ esi + 0x14 ]
call sub_1000b8d0
test eax eax
jne r-xdata
push [ esi + 0x14 ]
call sub_1000e0d8
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
mov ecx edi
call sub_1000ae61
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0xc ]
jmp r-xdata
sub_1000bfc0
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0xc ]
push eax
mov eax [ ebp + 0xc ]
push [ eax + 0x8 ]
mov esi ecx
call sub_1000b8d0
test eax eax
je r-xdata
mov ecx esi
call sub_1000ae61
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_1000bfec
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push 0x0
push [ eax + 0xc ]
mov esi ecx
call sub_1000b8d0
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0x8
mov ecx esi
call sub_1000ae61
sub_1000c011
mov edi edi
push ebp
mov ebp esp
push esi
push 0xc
call sub_10006288
push sub_1000b4c0
mov ecx rw-data
call sub_10005b74
mov esi eax
test esi esi
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
call sub_10003725
push 0xc
call sub_100062fa
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ esi + 0x8 ]
push r--data
call sub_1000279a
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
jne r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push [ esi + 0x4 ]
call [ FreeLibrary@IAT ]
and [ esi + 0x4 ] 0x0
jmp r-xdata
pop esi
pop ebp
retn 0x10
sub_1000c091
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
movzx edi ax
shr eax 0x10
xor ebx ebx
mov esi ecx
mov [ ebp + 0x8 ] eax
cmp [ ebp + 0xc ] ebx
jne r-xdata
push sub_10003741
mov ecx rw-data
call sub_100060b8
cmp eax ebx
jne r-xdata
cmp edi ebx
jne r-xdata
mov eax [ eax + 0xdc ]
cmp eax [ esi + 0x20 ]
je r-xdata
call sub_10003725
lea ecx [ ebp - 0x2c ]
call sub_10009624
mov eax [ esi ]
push ebx
lea ecx [ ebp - 0x2c ]
push ecx
push 0xffffffff
push edi
mov ecx esi
mov [ ebp - 0x28 ] edi
call [ eax + 0xc ]
cmp [ ebp - 0x4 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
push ebx
push [ ebp + 0xc ]
call sub_1000b8d0
test eax eax
jne r-xdata
mov [ ebp + 0x8 ] ebx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
cmp edi ebx
je r-xdata
mov eax [ esi ]
push ebx
push ebx
push [ ebp + 0x8 ]
mov ecx esi
push edi
call [ eax + 0xc ]
sub_1000c12a
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0xc ]
mov ebx [ esi ]
push edi
push ebx
mov edi ecx
call [ GetDlgCtrlID@IAT ]
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
push sub_10003741
mov ecx rw-data
mov [ ebp + 0xc ] eax
call sub_100060b8
test eax eax
jne r-xdata
mov eax [ eax + 0xdc ]
cmp eax [ edi + 0x20 ]
jne r-xdata
call sub_10003725
push [ ebp + 0x10 ]
push ebx
call sub_1000b8d0
test eax eax
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp + 0x10 ]
push 0x0
lea ecx [ ebp - 0xc ]
push ecx
movzx ecx [ ebp + 0xc ]
or ecx 0x4e0000
push ecx
push [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
mov eax [ edi ]
mov ecx edi
mov [ ebp - 0x8 ] esi
call [ eax + 0xc ]
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_1000c1ac
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000af33
test eax eax
je r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
mov ecx eax
call sub_1000bf46
test eax eax
je r-xdata
push 0x4
push esi
call [ GetWindow@IAT ]
push esi
call [ GetParent@IAT ]
jmp r-xdata
pop esi
pop ebp
retn 0x4
mov eax [ eax + 0x20 ]
jmp r-xdata
sub_1000c1f6
test ecx ecx
je r-xdata
xor eax eax
retn
mov eax [ ecx + 0x20 ]
test eax eax
jne r-xdata
push esi
mov esi eax
push esi
jmp r-xdata
call sub_1000c1ac
test eax eax
jne r-xdata
mov esi eax
push eax
push esi
call sub_1000af07
pop esi
retn
sub_1000c21e
mov edi edi
push esi
mov esi ecx
call sub_10005a0c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_1000dac8
test eax 0x40000000
jne r-xdata
cmp [ eax + 0x20 ] esi
jne r-xdata
mov ecx esi
pop esi
jmp sub_1000ae61
push 0x1
push 0x1
push 0x0
push 0x0
push 0x15
push [ esi + 0x20 ]
call sub_1000b851
mov ecx rw-data
call sub_100089c7
sub_1000c266
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a0c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_1000dac8
test eax 0x40000000
jne r-xdata
cmp [ eax + 0x20 ] esi
jne r-xdata
pop esi
pop ebp
retn 0x4
call sub_1000ae23
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x20 ]
call sub_1000b851
push [ ebp + 0x8 ]
mov ecx eax
call sub_10001afa
sub_1000c2b6
mov edi edi
push esi
mov esi ecx
call sub_10001cf3
cmp eax esi
jne r-xdata
mov ecx esi
call sub_1000dac8
test eax 0x40000000
jne r-xdata
mov ecx rw-data
call sub_10008a0d
mov ecx esi
call sub_1000ae61
pop esi
retn 0x8
call sub_1000ae23
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x20 ]
call sub_1000b851
sub_1000c301
xor eax eax
push esi
mov esi ecx
mov [ esi + 0x14 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi ] r--data
mov [ esi + 0x4 ] r--data
mov [ esi + 0x10 ] r--data
call sub_1000775d
mov eax esi
pop esi
retn 0x4
sub_1000c32e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ ebp + 0xc ]
cmp edx [ ecx ]
jne r-xdata
xor eax eax
pop ebp
retn
mov edx [ eax + 0x4 ]
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov edx [ eax + 0x8 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov eax [ eax + 0xc ]
cmp eax [ ecx + 0xc ]
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1000c382
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
jne r-xdata
xor eax eax
cmp [ eax + 0x4 ] 0x0
jne r-xdata
cmp [ eax + 0x8 ] 0xc0
jne r-xdata
cmp [ eax + 0xc ] 0x46000000
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebp
retn 0x4
sub_1000c3b2
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push ebx
push esi
push edi
je r-xdata
mov eax 0x80070057
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
mov ebx [ ebp + 0x14 ]
test ebx ebx
jne r-xdata
push [ ebp + 0x10 ]
and [ ebx ] 0x0
call sub_1000c382
test eax eax
je r-xdata
mov eax 0x80004003
jmp r-xdata
mov edi [ esi + 0x8 ]
test edi edi
jne r-xdata
mov esi [ esi + 0x4 ]
add esi [ ebp + 0x8 ]
mov eax [ esi ]
push esi
call [ eax + 0x4 ]
mov [ ebx ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov eax [ esi ]
xor ecx ecx
test eax eax
sete cl
mov [ ebp + 0xc ] ecx
test ecx ecx
jne r-xdata
mov eax 0x80004002
jmp r-xdata
cmp edi 0x1
je r-xdata
push [ ebp + 0x10 ]
push eax
call sub_1000c32e
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi + 0x4 ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
add esi 0xc
cmp [ ebp + 0xc ] 0x0
jne r-xdata
test eax eax
jl r-xdata
sub_1000c4a6
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
dec [ ecx + 0x14 ]
push esi
mov esi [ ecx + 0x14 ]
jne r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x70 ]
sub_1000c4e0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000c46f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000c53d
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push edi
mov edi [ ebp + 0x8 ]
mov ecx edi
call sub_1000dac8
test eax 0x40000000
jne r-xdata
pop edi
leave
retn 0xc
push ebx
mov ecx edi
call sub_1000c1f6
mov ebx eax
test ebx ebx
je r-xdata
pop ebx
push esi
mov esi [ ebp + 0x10 ]
test esi esi
je r-xdata
mov eax [ edi + 0x20 ]
mov [ ebp - 0x8 ] eax
test esi esi
jne r-xdata
push [ esi + 0x20 ]
call [ IsWindow@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x20 ]
mov [ ebp - 0x4 ] eax
and [ ebp - 0x4 ] esi
jmp r-xdata
mov ecx esi
call sub_1000c1f6
cmp ebx eax
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0xc ]
push 0x36e
push [ ebx + 0x20 ]
call [ SendMessageA@IAT ]
pop esi
sub_1000c5b5
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0xfffffffe
push esi
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] 0x201
je r-xdata
mov ecx [ ebp + 0x8 ]
call sub_1000c1f6
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0x207
je r-xdata
push [ eax + 0x20 ]
call [ GetLastActivePopup@IAT ]
push eax
call sub_1000af07
mov esi eax
test esi esi
je r-xdata
cmp [ ebp + 0x10 ] 0x204
jne r-xdata
call [ GetForegroundWindow@IAT ]
push eax
call sub_1000af07
cmp esi eax
je r-xdata
mov ecx esi
call sub_1000db23
test eax eax
je r-xdata
push [ esi + 0x20 ]
call [ SetForegroundWindow@IAT ]
xor eax eax
inc eax
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_1000c62d
push 0x40
mov eax sub_10021b18
call sub_1000ffac
mov edi [ ebp + 0x8 ]
mov esi r--data
push esi
push edi
call [ GetPropA@IAT ]
and [ ebp - 0x14 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
xor ebx ebx
inc ebx
sub eax 0x6
je r-xdata
push [ ebp + 0x14 ]
call sub_1000af07
push edi
mov esi eax
call sub_1000af07
push esi
push [ ebp + 0x10 ]
push eax
call sub_1000c53d
sub eax 0x1a
je r-xdata
mov eax [ ebp - 0x14 ]
call sub_10010051
retn 0x10
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
push edi
call sub_1000af07
mov ecx [ ebp + 0x14 ]
shr ecx 0x10
push ecx
movsx ecx [ ebp + 0x14 ]
push ecx
push eax
call sub_1000c5b5
xor ebx ebx
test eax eax
sete bl
jmp r-xdata
sub eax 0x62
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x18 ]
push 0xfffffffc
push edi
call [ SetWindowLongA@IAT ]
push esi
push edi
call [ RemovePropA@IAT ]
push esi
call [ GlobalFindAtomA@IAT ]
movzx eax ax
push eax
call [ GlobalDeleteAtom@IAT ]
jmp r-xdata
sub eax 0x8e
jne r-xdata
push edi
call sub_1000af07
mov esi eax
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_10009dd3
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x110
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
push [ ebp - 0x20 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_1000b4f0
sub_1000c73f
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x48 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x44 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x40 ] eax
lea eax [ ebp - 0x4c ]
push eax
push [ ebp - 0x1c ]
call sub_10003ee2
cmp [ ebp - 0x1c ] 0x0
mov [ ebp - 0x14 ] eax
je r-xdata
mov eax r-xdata
retn
mov ecx [ ebp - 0x1c ]
call sub_1000361d
sub_1000c77a
push 0x148
mov eax sub_10021b3b
call sub_1000ffe2
mov esi [ ebp + 0x10 ]
mov ebx [ ebp + 0xc ]
push sub_10003741
mov ecx rw-data
mov [ ebp - 0x120 ] esi
call sub_100060b8
xor ecx ecx
test eax eax
setne cl
mov [ ebp - 0x11c ] eax
test ecx ecx
jne r-xdata
cmp [ ebp + 0x8 ] 0x3
je r-xdata
call sub_10003725
mov edi [ esi ]
mov esi [ eax + 0x14 ]
call sub_10005a0c
movzx eax [ eax + 0x14 ]
mov [ ebp - 0x124 ] eax
test esi esi
jne r-xdata
push esi
push ebx
push [ ebp + 0x8 ]
push [ eax + 0x28 ]
call [ CallNextHookEx@IAT ]
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test [ edi + 0x20 ] 0x40000000
jne r-xdata
call sub_10010065
retn 0xc
test esi esi
je r-xdata
push 0xffffffe6
push ebx
call [ GetClassLongA@IAT ]
test eax 0x10000
jne r-xdata
push [ ebp - 0x120 ]
mov edi [ ebp - 0x11c ]
push ebx
push 0x3
push [ edi + 0x28 ]
call [ CallNextHookEx@IAT ]
cmp [ ebp - 0x124 ] 0x0
mov esi eax
je r-xdata
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
push [ esi + 0x1c ]
lea ecx [ ebp - 0x18 ]
call sub_10005a58
and [ ebp - 0x4 ] 0x0
push ebx
mov ecx esi
call sub_1000af54
mov eax [ esi ]
mov ecx esi
call [ eax + 0x50 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0xf8 ]
mov esi sub_1000b659
push esi
push 0xfffffffc
push ebx
mov edi eax
call [ SetWindowLongA@IAT ]
cmp eax esi
je r-xdata
mov eax [ edi + 0x28 ]
cmp eax 0xffff
ja r-xdata
mov eax esi
push [ edi + 0x28 ]
call [ UnhookWindowsHookEx@IAT ]
and [ edi + 0x28 ] 0x0
push 0xffffffe0
push ebx
call [ GetClassLongA@IAT ]
movzx eax ax
cmp ax [ rw-data ]
jne r-xdata
push 0x30
pop esi
push esi
lea eax [ ebp - 0x154 ]
push 0x0
push eax
call sub_100105c0
lea eax [ ebp - 0x154 ]
mov [ ebp - 0x154 ] esi
push eax
mov esi r--data
push esi
push 0x0
call sub_10009b88
add esp 0x18
mov [ rw-data ] ax
test ax ax
je r-xdata
mov eax [ ebp - 0x11c ]
and [ eax + 0x14 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x14 ] 0x0
je r-xdata
mov [ edi ] eax
push r--data
push eax
call sub_10001d06
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x5
lea eax [ ebp - 0x18 ]
push eax
movzx eax [ edi + 0x28 ]
push eax
mov [ ebp - 0x18 ] 0x0
call [ GlobalGetAtomNameA@IAT ]
lea eax [ ebp - 0x18 ]
push 0xfffffffc
push ebx
call [ GetWindowLongA@IAT ]
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
jmp r-xdata
push 0x100
lea eax [ ebp - 0x118 ]
push eax
push ebx
call [ GetClassNameA@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x18 ]
push 0x0
call sub_10005169
jmp r-xdata
mov edi [ GetPropA@IAT ]
mov esi r--data
push esi
push ebx
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0x118 ]
push esi
push eax
mov [ ebp - 0x19 ] 0x0
call sub_10013201
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
push esi
push ebx
call [ SetPropA@IAT ]
push esi
push ebx
call edi
cmp eax [ ebp - 0x14 ]
jne r-xdata
push esi
call [ GlobalAddAtomA@IAT ]
push sub_1000c62d
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
sub_1000c9cd
mov edi edi
push ebp
mov ebp esp
push esi
push edi
push sub_10003741
mov ecx rw-data
call sub_100060b8
mov esi eax
test esi esi
jne r-xdata
mov edi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] edi
je r-xdata
call sub_10003725
pop edi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x28 ] 0x0
jne r-xdata
mov [ esi + 0x14 ] edi
call [ GetCurrentThreadId@IAT ]
push eax
push 0x0
push sub_1000c77a
push 0x5
call [ SetWindowsHookExA@IAT ]
mov [ esi + 0x28 ] eax
test eax eax
jne r-xdata
call sub_100036ed
sub_1000ca27
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push esi
push edi
mov edi [ ebp + 0x10 ]
mov esi ecx
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x24 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x28 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x2c ]
mov [ ebp - 0xc ] edi
mov [ ebp - 0x28 ] eax
call sub_10005a0c
mov eax [ eax + 0x8 ]
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x30 ]
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x30 ] eax
mov eax [ esi ]
push ecx
mov ecx esi
call [ eax + 0x64 ]
test eax eax
jne r-xdata
push 0xffffffff
push edi
call sub_10008021
test eax eax
jne r-xdata
push esi
call sub_1000c9cd
push [ ebp - 0x30 ]
push [ ebp - 0x2c ]
push [ ebp - 0x28 ]
push [ ebp - 0x24 ]
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp - 0x18 ]
push [ ebp - 0x14 ]
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10009c1c
add esp 0x30
mov edi eax
call sub_1000afc0
test eax eax
jne r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x11c ]
xor eax eax
jmp r-xdata
call sub_10003725
xor eax eax
test edi edi
setne al
mov eax [ esi ]
mov ecx esi
call [ eax + 0x11c ]
pop edi
pop esi
leave
retn 0x2c
sub_1000cb06
mov edi edi
push ebx
push esi
mov ebx ecx
mov eax [ ebx ]
push edi
call [ eax + 0x128 ]
test eax eax
je r-xdata
mov esi [ SendMessageA@IAT ]
xor edi edi
push edi
push edi
push 0x1f
push [ ebx + 0x20 ]
call esi
push 0x1
push 0x1
push edi
push edi
push 0x1f
push [ ebx + 0x20 ]
call sub_1000b851
mov ecx ebx
call sub_1000c1f6
mov ebx eax
cmp ebx edi
jne r-xdata
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x188 ]
push edi
push edi
push 0x1f
push [ ebx + 0x20 ]
call esi
push 0x1
push 0x1
push edi
push edi
push 0x1f
push [ ebx + 0x20 ]
call sub_1000b851
call [ GetCapture@IAT ]
cmp eax edi
je r-xdata
call sub_10003725
pop edi
pop esi
pop ebx
retn
push edi
push edi
push 0x1f
push eax
call esi
sub_1000cb84
push 0x70
mov eax sub_10021b83
call sub_1000ff79
mov edi ecx
xor eax eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] 0x7fffffff
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp ebx 0x111
jne r-xdata
cmp ebx 0x4e
jne r-xdata
push [ ebp + 0x10 ]
mov eax [ edi ]
push [ ebp + 0xc ]
call [ eax + 0xf0 ]
test eax eax
je r-xdata
mov esi [ ebp + 0x10 ]
cmp ebx 0x6
jne r-xdata
mov ecx [ ebp + 0x10 ]
cmp [ ecx ] eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x14 ]
call sub_10009d72
xor eax eax
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
cmp ebx 0x20
jne r-xdata
push esi
call sub_1000af07
push eax
push [ ebp + 0xc ]
push edi
call sub_1000c53d
mov eax [ edi ]
lea edx [ ebp - 0x10 ]
push edx
push ecx
push [ ebp + 0xc ]
mov ecx edi
call [ eax + 0xf4 ]
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
mov eax [ edi + 0x4c ]
test eax eax
je r-xdata
mov eax esi
shr eax 0x10
push eax
movsx eax si
push eax
push edi
call sub_1000c5b5
test eax eax
jne r-xdata
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x14 ]
call sub_10009d72
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ eax ] ecx
mov eax [ edi ]
mov ecx edi
call [ eax + 0x28 ]
mov ebx eax
xor ebx [ ebp + 0x8 ]
push 0x7
lea ecx [ ebp - 0x14 ]
mov [ ebp + 0x10 ] eax
and ebx 0x1ff
call sub_10009d3e
imul ebx ebx 0xc
mov eax [ ebp + 0x8 ]
add ebx rw-data
mov [ ebp - 0x18 ] ebx
cmp eax [ ebx ]
jne r-xdata
cmp [ eax + 0x74 ] 0x0
jle r-xdata
call sub_10010051
retn 0x10
mov eax [ ebp - 0x18 ]
mov ebx [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov [ eax + 0x8 ] ebx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov eax ebx
cmp ecx [ eax + 0x8 ]
jne r-xdata
cmp ebx 0x200
jb r-xdata
cmp [ ebx ] 0x0
jne r-xdata
mov ebx [ eax + 0x4 ]
lea ecx [ ebp - 0x14 ]
mov [ ebp + 0x10 ] ebx
call sub_10009d72
test ebx ebx
je r-xdata
cmp ebx 0x100
jb r-xdata
cmp ebx 0x209
jbe r-xdata
cmp [ ebp + 0x8 ] 0xc000
push 0x0
push 0x0
jae r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x4 ] 0x0
lea ecx [ ebp - 0x14 ]
call sub_10009d72
cmp [ ebp + 0x8 ] 0xc000
jb r-xdata
lea eax [ ebx - 0x281 ]
cmp eax 0x10
ja r-xdata
cmp ebx 0x10f
jbe r-xdata
mov ecx [ edi + 0x4c ]
mov eax [ ecx ]
lea edx [ ebp - 0x10 ]
push edx
push esi
push [ ebp + 0xc ]
push ebx
call [ eax + 0x94 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax + 0x4 ]
push 0xc000
push eax
jmp r-xdata
push [ ebp + 0x8 ]
push [ ebx + 0x4 ]
call sub_1000959c
mov [ ebp + 0x10 ] eax
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov ebx [ eax + 0x14 ]
mov eax [ eax + 0x10 ]
lea ecx [ eax - 0x1 ]
cmp ecx 0x53
ja r-xdata
jmp r-xdata
call sub_1000959c
mov ebx eax
test ebx ebx
jne r-xdata
call [ ebx ]
mov ebx eax
mov [ ebp + 0x10 ] ebx
mov ecx [ ebp - 0x18 ]
mov [ ecx + 0x4 ] eax
lea ecx [ ebp - 0x14 ]
call sub_10009d72
jmp [ ecx * 4 + jump_table_1000d148 ]
mov ebx [ ebx + 0x14 ]
mov eax [ ebx + 0x10 ]
mov ecx [ ebp + 0x8 ]
cmp [ eax ] ecx
je r-xdata
mov ebx [ ebp + 0x10 ]
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push [ ebp + 0xc ]
call sub_1000726b
push eax
push [ ebp + 0xc ]
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
push esi
call sub_1000af07
mov eax esi
shr eax 0x10
push eax
movzx eax si
push eax
push [ ebp + 0xc ]
call sub_1000af07
push esi
push [ ebp + 0xc ]
call sub_1000af07
jmp r-xdata
push esi
jmp r-xdata
lea ecx [ ebp - 0x28 ]
call sub_10006e80
mov eax [ esi + 0x4 ]
lea ecx [ ebp - 0x7c ]
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x24 ] eax
call sub_10009d8e
mov eax [ esi ]
mov esi [ esi + 0x8 ]
push eax
mov [ ebp - 0x4 ] 0x2
mov [ ebp - 0x5c ] eax
call sub_1000af33
test eax eax
jne r-xdata
lea ecx [ ebp - 0x28 ]
call sub_10006e80
mov eax [ esi + 0x4 ]
push [ esi + 0x8 ]
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x28 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] 0x3
call ebx
and [ ebp - 0x24 ] 0x0
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_1000af07
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push esi
call sub_1000e0c4
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
jmp r-xdata
push [ ebp + 0xc ]
mov ecx edi
call ebx
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
mov eax esi
shr eax 0x10
cwde
push eax
movsx eax si
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movzx eax si
push [ ebp + 0xc ]
call sub_1000af07
push eax
push esi
call sub_1000af07
push eax
xor eax eax
cmp [ edi + 0x20 ] esi
sete al
push [ ebp + 0xc ]
call sub_1000726b
push [ ebp + 0xc ]
call sub_1000e0c4
jmp r-xdata
mov eax esi
shr eax 0x10
cwde
push eax
movsx eax si
push eax
push [ ebp + 0xc ]
call sub_1000e0c4
jmp r-xdata
push [ ebp + 0xc ]
push esi
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movzx eax si
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
jmp r-xdata
push esi
push [ ebp + 0xc ]
call sub_1000af07
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_1000af07
mov ecx [ ebp + 0xc ]
movsx edx cx
shr ecx 0x10
movsx ecx cx
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] ecx
cmp eax 0x2a
jne r-xdata
push esi
jmp r-xdata
push esi
push [ ebp + 0xc ]
mov ecx edi
call ebx
jmp r-xdata
mov eax [ ebp + 0xc ]
push esi
shr eax 0x10
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
push eax
mov ecx edi
call ebx
mov [ ebp - 0x10 ] eax
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
push eax
mov ecx edi
call ebx
jmp r-xdata
mov ecx edi
call ebx
mov [ ebp - 0x10 ] eax
test eax eax
je r-xdata
push esi
call sub_1000e0c4
jmp r-xdata
push esi
call sub_1000e0c4
push eax
jmp r-xdata
push esi
push [ ebp + 0xc ]
call sub_1000e0c4
jmp r-xdata
movzx ecx si
push ecx
mov eax esi
shr eax 0x10
mov ecx eax
and ecx 0xf000
push ecx
and eax 0xfff
push eax
push [ ebp + 0xc ]
call sub_1000af07
movzx eax [ ebp + 0xc ]
push esi
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push [ ebp + 0xc ]
jmp r-xdata
push esi
push esi
mov eax [ ebp - 0x18 ]
lea ecx [ ebp - 0x14 ]
mov [ eax + 0x4 ] ebx
call sub_10009d72
push 0x0
push 0x0
push 0xc000
add ebx 0x18
push ebx
mov ecx edi
call ebx
mov [ ebp - 0x10 ] eax
mov ecx edi
call ebx
jmp r-xdata
push [ ebp + 0xc ]
push eax
jmp r-xdata
push esi
push eax
lea eax [ ebp - 0x28 ]
push eax
mov ecx edi
call ebx
and [ ebp - 0x24 ] 0x0
and [ ebp - 0x5c ] 0x0
lea ecx [ ebp - 0x7c ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x1
call sub_1000b6a6
mov eax [ edi + 0x4c ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] 0x0
call sub_100072b2
jmp r-xdata
push eax
mov ecx edi
call ebx
jmp r-xdata
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
push eax
jmp r-xdata
call sub_1000af07
jmp r-xdata
push eax
push [ ebp + 0xc ]
call sub_1000af07
jmp r-xdata
push ecx
push edx
jmp r-xdata
push esi
call sub_1000af07
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
jmp r-xdata
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push eax
push [ ebp + 0xc ]
test eax eax
jne r-xdata
jmp r-xdata
push eax
jmp r-xdata
push [ ebp + 0xc ]
push eax
mov ecx edi
call ebx
jmp r-xdata
lea eax [ ebp - 0x7c ]
push [ ebp - 0x5c ]
lea ecx [ eax + 0x24 ]
call sub_1000dccb
test eax eax
je r-xdata
mov [ ebp - 0x2c ] eax
sub_1000d298
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub esp 0xc
mov edx 0x111
push esi
cmp eax edx
ja r-xdata
cmp eax 0x114
jb r-xdata
je r-xdata
lea edx [ eax - 0x132 ]
cmp edx 0x6
ja r-xdata
cmp eax 0x115
jbe r-xdata
mov eax [ ebp + 0xc ]
xor esi esi
push esi
shr eax 0x10
push esi
or eax 0xbd110000
push eax
push esi
call sub_10003933
test eax eax
je r-xdata
cmp eax 0x2b
jb r-xdata
xor eax eax
mov edx [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x14 ]
add eax 0xfffffece
push edi
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push eax
xor esi esi
push esi
push 0xbc19
mov [ ebp - 0x8 ] edx
call sub_1000cb84
cmp [ edi ] esi
pop edi
jne r-xdata
push [ ebp + 0x14 ]
add eax 0xbc00
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000cb84
jmp r-xdata
cmp eax 0x210
jne r-xdata
mov ecx [ ebp + 0x14 ]
xor eax eax
inc eax
cmp ecx esi
je r-xdata
cmp eax 0x2f
jbe r-xdata
pop esi
leave
retn 0x10
mov [ ecx ] eax
jmp r-xdata
cmp eax 0x39
je r-xdata
cmp eax 0x4e
jne r-xdata
mov esi [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
mov edx [ eax + 0x8 ]
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] eax
xor esi esi
push esi
lea eax [ ebp - 0x8 ]
push eax
movzx eax dx
or eax 0xbc4e0000
push eax
push esi
call sub_10003933
jmp r-xdata
sub_1000d37f
and [ rw-data ] 0x0
push esi
mov esi ecx
cmp [ esi + 0x4c ] 0x0
je r-xdata
push 0x0
push 0x0
mov ecx esi
call sub_1000c2b6
pop esi
retn 0x8
mov ecx [ esi + 0x4c ]
mov eax [ ecx ]
push 0xfffffd3f
call [ eax + 0x50 ]
sub_1000d3ab
push 0x14
mov eax sub_10021ba8
call sub_1000ffac
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
jne r-xdata
push 0x18
mov [ esi ] edi
mov [ ebp - 0x14 ] 0x8007000e
mov [ ebp - 0x4 ] edi
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x4 ] 0x1
cmp ecx edi
je r-xdata
mov eax 0x80004003
jmp r-xdata
xor eax eax
jmp r-xdata
push edi
call sub_1000c301
jmp r-xdata
call sub_10010051
retn 0x4
cmp eax edi
je r-xdata
mov [ esi ] eax
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] edi
sub_1000d443
lea ecx [ ebp - 0x218 ]
call sub_10001560
mov esi [ ebp - 0x21c ]
mov eax [ esi ]
xor edi edi
push edi
push 0x200
lea ecx [ ebp - 0x214 ]
push ecx
mov ecx esi
mov [ ebp - 0x4 ] 0x2
call [ eax + 0xc ]
test eax eax
je r-xdata
push 0x497
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x14
lea eax [ ebp - 0x214 ]
push eax
push 0x497
push r--data
push r--data
lea eax [ ebp - 0x218 ]
push r--data
push eax
call sub_100014b0
add esp 0x18
jmp r-xdata
push edi
push edi
mov edi [ ebp - 0x218 ]
push edi
call sub_10004f51
lea ecx [ edi - 0x10 ]
mov [ ebp - 0x4 ] 0x1
call sub_10001540
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax + 0x4 ]
mov eax r-xdata
retn
sub_1000d4ea
push 0x0
mov eax sub_10021bfe
call sub_1000ff79
mov edi ecx
call sub_10005a0c
mov esi [ eax + 0x4 ]
lea ecx [ ebp + 0xb ]
call sub_10009d28
and [ ebp - 0x4 ] 0x0
mov ecx edi
call sub_1000cb06
mov ecx edi
call sub_1000c1f6
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push [ esi + 0x64 ]
push [ eax + 0x20 ]
call [ WinHelpA@IAT ]
test eax eax
jne r-xdata
call sub_10003725
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp + 0xb ]
call sub_1000d41d
call sub_10010051
retn 0x8
push 0xffffffff
push eax
push 0xf107
call sub_10004f9f
sub_1000d55a
push 0x0
mov eax sub_10021bfe
call sub_1000ff79
mov edi ecx
call sub_10005a0c
mov esi [ eax + 0x4 ]
lea ecx [ ebp + 0xb ]
call sub_10009d28
and [ ebp - 0x4 ] 0x0
mov ecx edi
call sub_1000cb06
mov ecx edi
call sub_1000c1f6
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push [ esi + 0x64 ]
push [ eax + 0x20 ]
call sub_1000c011
test eax eax
jne r-xdata
call sub_10003725
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp + 0xb ]
call sub_1000d41d
call sub_10010051
retn 0x8
push 0xffffffff
push eax
push 0xf107
call sub_10004f9f
sub_1000d5c9
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x50 ] 0x0
je r-xdata
pop ebp
jmp sub_1000d298
push esi
push [ ebp + 0x10 ]
mov esi [ ebp + 0x8 ]
push [ ebp + 0xc ]
lea eax [ esi + 0x2000 ]
push eax
call sub_10003b21
add esi 0xfffffece
cmp esi 0x6
pop esi
ja r-xdata
mov ecx [ ebp + 0x14 ]
test ecx ecx
je r-xdata
test eax eax
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ ecx ] eax
pop ebp
retn 0x10
sub_1000d612
push 0x4
mov eax sub_10021c21
call sub_1000ff79
mov esi ecx
cmp [ ebp + 0xc ] 0xfffffffc
mov edi 0x80004005
jne r-xdata
mov eax edi
call sub_10010051
retn 0xc
mov eax [ esi ]
call [ eax + 0x90 ]
mov edi eax
test edi edi
jl r-xdata
mov eax [ esi + 0x2c ]
test eax eax
jne r-xdata
push eax
push [ ebp + 0x8 ]
push r--data
call LresultFromObject
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
xor edi edi
lea eax [ ebp - 0x10 ]
push eax
call sub_1000d3ab
mov edi eax
test edi edi
jl r-xdata
and [ ebp + 0xc ] 0x0
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0xc ]
push eax
push [ ebp - 0x10 ]
call sub_10009a49
test eax eax
jl r-xdata
mov eax [ ebp + 0xc ]
or [ ebp - 0x4 ] 0xffffffff
xor edi edi
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
lea edx [ esi + 0x34 ]
push edx
lea edx [ esi + 0x30 ]
push edx
mov [ esi + 0x2c ] eax
mov ecx [ eax ]
push eax
call [ ecx + 0xc ]
push [ esi + 0x2c ]
push [ ebp + 0x8 ]
push r--data
call LresultFromObject
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
jmp r-xdata
sub_1000d6d2
push 0x30
mov eax sub_10021c3c
call sub_1000ffac
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x38 ]
push eax
push [ edi + 0x24 ]
push [ edi + 0x10 ]
call sub_10009af4
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
inc eax
push edi
call sub_10009a62
pop ecx
test ax ax
jne r-xdata
call sub_10005a0c
cmp [ eax + 0x14 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
push 0x1
call sub_10006288
and [ ebp - 0x4 ] 0x0
call sub_10005a0c
push [ edi + 0x24 ]
lea esi [ eax + 0x34 ]
mov ecx esi
call sub_10003606
push 0xa
mov ecx esi
call sub_10003526
or [ ebp - 0x4 ] 0xffffffff
push 0x1
call sub_100062fa
call sub_10010051
retn 0x4
sub_1000d75f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
mov [ esi + 0x24 ] eax
call sub_10005a0c
movzx ecx [ ebp + 0x10 ]
mov eax [ eax + 0xc ]
mov edi [ LoadIconA@IAT ]
push ecx
push eax
call edi
mov [ esi + 0x14 ] eax
test eax eax
jne r-xdata
push esi
call sub_1000d6d2
pop edi
pop esi
pop ebp
retn 0xc
push 0x7f00
push eax
call edi
mov [ esi + 0x14 ] eax
sub_1000d7a3
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
call sub_10005a0c
mov [ ebp - 0x4 ] eax
mov eax [ eax + 0x18 ]
not eax
and [ ebp + 0x8 ] eax
jne r-xdata
push ebx
push esi
push edi
push 0x28
xor edi edi
lea eax [ ebp - 0x34 ]
push edi
push eax
xor esi esi
call sub_100105c0
mov eax [ DefWindowProcA@IAT ]
add esp 0xc
mov [ ebp - 0x30 ] eax
call sub_10005a0c
test [ ebp + 0x8 ] 0x1
mov eax [ eax + 0x8 ]
push 0x8
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
pop ebx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0xc ] ebx
je r-xdata
xor eax eax
inc eax
jmp r-xdata
test [ ebp + 0x8 ] 0x20
je r-xdata
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] 0xb
mov [ ebp - 0x10 ] r--data
call sub_1000d6d2
test eax eax
je r-xdata
leave
retn 0x4
test [ ebp + 0x8 ] 0x2
je r-xdata
or [ ebp - 0x34 ] 0x8b
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_1000d6d2
test eax eax
je r-xdata
inc esi
test [ ebp + 0x8 ] 0x4
je r-xdata
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] edi
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0x18 ] 0x10
call sub_1000d6d2
test eax eax
je r-xdata
or esi 0x20
test [ ebp + 0x8 ] bl
je r-xdata
push 0x7a01
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x18 ] edi
call sub_1000d75f
test eax eax
je r-xdata
or esi 0x2
test [ ebp + 0x8 ] 0x10
je r-xdata
push 0x7a02
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] 0xb
mov [ ebp - 0x18 ] 0x6
call sub_1000d75f
test eax eax
je r-xdata
or esi 0x4
test [ ebp + 0x8 ] 0x40
je r-xdata
push 0x3fc0
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0xff
call sub_1000b467
or esi eax
and [ ebp + 0x8 ] 0xffffc03f
or esi ebx
test [ ebp + 0x8 ] 0x80
je r-xdata
push 0x40
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x10
call sub_1000b467
or esi eax
mov eax 0x100
test [ ebp + 0x8 ] eax
je r-xdata
push 0x80
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x2
call sub_1000b467
or esi eax
mov eax 0x200
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_1000b467
or esi eax
mov ebx 0x400
test [ ebp + 0x8 ] ebx
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x20
call sub_1000b467
or esi eax
mov edi 0x800
test [ ebp + 0x8 ] edi
je r-xdata
push ebx
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x1
call sub_1000b467
or esi eax
mov eax 0x1000
test [ ebp + 0x8 ] eax
je r-xdata
push edi
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x40
call sub_1000b467
or esi eax
mov eax 0x2000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x4
call sub_1000b467
or esi eax
mov eax 0x4000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x80
call sub_1000b467
or esi eax
mov edi 0x8000
test [ ebp + 0x8 ] edi
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] edi
call sub_1000b467
or esi eax
mov eax 0x10000
test [ ebp + 0x8 ] eax
je r-xdata
push edi
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_1000b467
or esi eax
mov eax 0x20000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x200
call sub_1000b467
or esi eax
mov eax 0x40000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x100
call sub_1000b467
or esi eax
mov eax 0x80000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] edi
call sub_1000b467
or esi eax
mov ecx [ ebp - 0x4 ]
or [ ecx + 0x18 ] esi
mov eax [ ecx + 0x18 ]
mov edx 0x3fc0
mov edi eax
and edi edx
cmp edi edx
jne r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x1000
call sub_1000b467
or esi eax
mov eax esi
and eax [ ebp + 0x8 ]
pop edi
sub eax [ ebp + 0x8 ]
pop esi
neg eax
sbb eax eax
inc eax
pop ebx
or eax 0x10
mov [ ecx + 0x18 ] eax
or esi 0x10
sub_1000da95
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x28 ] 0x0
jne r-xdata
xor eax eax
inc eax
pop esi
pop ebp
retn 0x4
push 0x1
call sub_1000d7a3
mov [ esi + 0x28 ] r--data
sub_1000dafc
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0xa0 ]
push [ ebp + 0x8 ]
push [ ecx + 0x20 ]
call [ ShowWindow@IAT ]
pop ebp
retn 0x4
sub_1000db3e
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0xa8 ]
push [ ebp + 0x8 ]
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
pop ebp
retn 0x4
sub_1000db65
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x9c ]
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x20 ]
call [ SetWindowPos@IAT ]
pop ebp
retn 0x18
mov eax [ eax + 0x20 ]
sub_1000dba3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x50 ] 0x0
jne r-xdata
push [ esi + 0x20 ]
call [ GetParent@IAT ]
mov ecx [ ebp + 0x8 ]
push eax
add ecx 0x1c
call sub_1000dccb
test eax eax
je r-xdata
cmp [ eax + 0x4c ] 0x0
je r-xdata
mov ecx [ eax + 0x4c ]
mov eax [ ecx ]
push 0x0
push esi
call [ eax + 0x9c ]
sub_1000dbe7
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
test edi edi
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push 0x11
pop edi
cmp [ ebp + 0xc ] 0x0
je r-xdata
push eax
call sub_100016e7
and [ esi + 0x4 ] 0x0
pop ecx
mov [ esi + 0x8 ] edi
pop edi
pop esi
pop ebp
retn 0x8
xor ecx ecx
push 0x4
pop edx
mov eax edi
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_100016b8
mov ecx edi
shl ecx 0x2
push ecx
push 0x0
push eax
mov [ esi + 0x4 ] eax
call sub_100105c0
add esp 0x10
sub_1000dc45
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x14 ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
call sub_1000e573
and [ esi + 0x14 ] 0x0
pop esi
retn
push eax
call sub_100016e7
and [ esi + 0x4 ] 0x0
pop ecx
sub_1000dc90
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
mov eax esi
shr eax 0x4
mov [ edx ] eax
xor edx edx
div [ ecx + 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
xor eax eax
mov eax [ ecx + edx * 4 ]
jmp r-xdata
test eax eax
jne r-xdata
cmp [ eax + 0x4 ] esi
je r-xdata
pop esi
pop ebp
retn 0xc
mov eax [ eax ]
sub_1000dccb
mov edi edi
push ebp
mov ebp esp
test ecx ecx
jne r-xdata
push esi
mov esi [ ecx + 0x4 ]
test esi esi
jne r-xdata
call sub_10003725
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
xor edx edx
shr eax 0x4
div [ ecx + 0x8 ]
mov edx [ esi + edx * 4 ]
jmp r-xdata
xor eax eax
jmp r-xdata
test edx edx
jne r-xdata
pop esi
pop ebp
retn 0x4
cmp [ edx + 0x4 ] edi
je r-xdata
xor eax eax
mov eax [ edx + 0x8 ]
jmp r-xdata
mov edx [ edx ]
pop edi
sub_1000dd10
mov edi edi
push ebp
mov ebp esp
push ecx
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call sub_1000dc90
test eax eax
je r-xdata
leave
retn 0x8
mov eax [ eax + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
sub_1000dd39
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ecx + 0x4 ]
test esi esi
jne r-xdata
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
shr eax 0x4
xor edx edx
div [ ecx + 0x8 ]
lea edx [ esi + edx * 4 ]
mov eax [ edx ]
jmp r-xdata
xor eax eax
jmp r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn 0x4
cmp [ eax + 0x4 ] edi
je r-xdata
pop edi
mov esi [ eax ]
push eax
mov [ edx ] esi
call sub_1000dc72
xor eax eax
inc eax
jmp r-xdata
mov edx eax
mov eax [ eax ]
sub_1000dd81
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi [ eax ]
test esi esi
je r-xdata
pop esi
pop ebp
retn 0xc
push edi
cmp esi 0xffffffff
jne r-xdata
mov edi [ esi ]
test edi edi
jne r-xdata
mov edx [ ecx + 0x8 ]
xor edi edi
test edx edx
jbe r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ eax ] edi
mov eax [ esi + 0x4 ]
mov [ ecx ] eax
mov eax [ esi + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
pop edi
mov eax [ esi + 0x4 ]
shr eax 0x4
xor edx edx
push ebx
mov ebx [ ecx + 0x8 ]
div ebx
inc edx
cmp edx ebx
jae r-xdata
mov eax [ ecx + 0x4 ]
pop ebx
mov eax [ ecx + 0x4 ]
lea eax [ eax + edx * 4 ]
inc edi
add eax 0x4
cmp edi edx
jb r-xdata
inc edx
add eax 0x4
cmp edx ebx
jb r-xdata
mov esi [ eax ]
test esi esi
jne r-xdata
call sub_10003725
mov edi [ eax ]
test edi edi
jne r-xdata
sub_1000de04
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
xor edx edx
cmp ecx edx
mov [ eax ] r--data
jg r-xdata
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] 0x11
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] edx
mov [ eax + 0x14 ] edx
mov [ eax + 0x18 ] ecx
pop ebp
retn 0x4
push 0xa
pop ecx
sub_1000de42
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax ]
inc [ esi + 0xc ]
mov [ esi + 0x10 ] ecx
and [ eax + 0x4 ] 0x0
and [ eax + 0x8 ] 0x0
pop esi
retn
push 0xc
push [ esi + 0x18 ]
lea eax [ esi + 0x14 ]
push eax
call sub_1000e540
mov ecx [ esi + 0x18 ]
mov edx ecx
imul edx edx 0xc
add eax 0x4
dec ecx
lea eax [ eax + edx - 0xc ]
js r-xdata
mov edx [ esi + 0x10 ]
mov [ eax ] edx
mov [ esi + 0x10 ] eax
dec ecx
sub eax 0xc
test ecx ecx
jge r-xdata
sub_1000de92
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
push edi
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp + 0x8 ]
push eax
push edi
mov esi ecx
call sub_1000dc90
test eax eax
jne r-xdata
pop edi
add eax 0x8
pop esi
leave
retn 0x4
cmp [ esi + 0x4 ] eax
jne r-xdata
mov ecx esi
call sub_1000de42
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x4 ] edi
mov edx [ esi + 0x4 ]
shl ecx 0x2
mov edx [ ecx + edx ]
mov [ eax ] edx
mov edx [ esi + 0x4 ]
mov [ ecx + edx ] eax
push 0x1
push [ esi + 0x8 ]
mov ecx esi
call sub_1000dbe7
sub_1000dee9
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000dc45
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000df10
mov edi edi
push esi
mov esi ecx
mov ecx [ esi + 0x14 ]
push edi
xor edi edi
mov [ esi + 0xc ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
call sub_1000e573
mov [ esi + 0x14 ] edi
pop edi
pop esi
retn
sub_1000df32
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov edx [ ecx + 0x10 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
call sub_10003725
pop ebp
retn 0x4
call sub_1000df10
sub_1000df59
test ecx ecx
jne r-xdata
mov edx [ ecx + 0x4 ]
test edx edx
je r-xdata
call sub_10003725
mov eax [ edx ]
push esi
mov esi [ edx + 0x8 ]
mov [ ecx + 0x4 ] eax
test eax eax
je r-xdata
and [ ecx + 0x8 ] 0x0
and [ eax + 0x4 ] 0x0
jmp r-xdata
push edx
call sub_1000df32
mov eax esi
pop esi
retn
sub_1000df8a
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
cmp ecx 0x4
jae r-xdata
mov edx [ ebp + 0xc ]
cmp edx 0x1
ja r-xdata
push 0x4
pop ecx
and [ eax + 0xc ] 0x0
and [ eax + 0x8 ] 0x0
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
pop ebp
retn 0x8
push 0x40
pop edx
sub_1000dfd4
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov eax [ esi + 0xc ]
mov ecx [ eax ]
mov [ esi + 0xc ] ecx
pop esi
retn
push [ esi ]
lea eax [ esi + 0x8 ]
push [ esi + 0x4 ]
push eax
call sub_1000e540
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
add eax 0x4
dec ecx
imul edx ecx
add eax edx
jmp r-xdata
test ecx ecx
jge r-xdata
mov edx [ esi + 0xc ]
mov [ eax ] edx
mov [ esi + 0xc ] eax
dec ecx
sub eax [ esi ]
sub_1000e050
push 0x0
mov eax sub_10021a9c
call sub_1000ff79
call sub_10005a3f
mov esi eax
cmp [ esi + 0x18 ] 0x0
jne r-xdata
mov eax [ esi + 0x18 ]
call sub_10010051
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push sub_1000761f
call sub_100016a1
push 0x60
mov ebx eax
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push sub_10009a36
push sub_1000e036
push r--data
call sub_10006328
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x18 ] eax
call sub_100016a1
sub_1000e0d8
mov edi edi
push ebp
mov ebp esp
push 0x0
call sub_1000e050
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
pop ebp
retn 0x4
add ecx 0x1c
pop ebp
jmp sub_1000dccb
sub_1000e0f9
mov edi edi
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_1000e050
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x1c ]
call sub_1000dd39
sub_1000e13b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000e125
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000e162
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
test esi esi
jne r-xdata
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
call sub_10003725
and [ ebp + 0xc ] 0x0
cmp [ esi ] 0x0
mov edi esi
je r-xdata
push [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov ebx esi
call sub_100013d0
cmp [ esi ] 0x0
mov edi eax
je r-xdata
mov cl [ edi ]
cmp cl 0x25
jne r-xdata
mov ecx [ ebp + 0x8 ]
sub edi [ ecx ]
push edi
call sub_10002b1a
pop edi
pop esi
pop ebx
leave
retn 0x10
mov cl [ ebx ]
cmp cl 0x25
jne r-xdata
movsx eax cl
push eax
call sub_10012647
pop ecx
test eax eax
je r-xdata
mov al [ edi + 0x1 ]
cmp al 0x31
jl r-xdata
movsx eax cl
push eax
call sub_10012647
pop ecx
test eax eax
je r-xdata
mov al [ ebx + 0x1 ]
cmp al 0x31
jl r-xdata
inc edi
inc [ ebp + 0xc ]
inc edi
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
mov al [ ebx ]
mov [ edi ] al
inc edi
inc ebx
mov al [ ebx ]
mov [ edi ] al
inc edi
inc ebx
dec [ ebp + 0xc ]
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp al 0x39
jle r-xdata
inc [ ebp + 0xc ]
mov eax [ ebx + eax * 4 ]
test eax eax
je r-xdata
cmp al 0x39
jle r-xdata
mov ecx [ ebp + 0x10 ]
lea esi [ ecx + eax * 4 ]
mov eax [ esi ]
test eax eax
je r-xdata
mov [ edi ] 0x3f
inc edi
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
cmp [ edi ] 0x0
jne r-xdata
push eax
call [ lstrlenA@IAT ]
add [ ebp + 0xc ] eax
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
cmp [ ebx ] 0x0
jne r-xdata
push eax
call [ lstrlenA@IAT ]
push [ esi ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
inc eax
push eax
push edi
call sub_10001c32
mov eax [ ebp - 0x4 ]
sub [ ebp + 0xc ] eax
add esp 0xc
add edi eax
jmp r-xdata
dec [ ebp + 0xc ]
inc edi
inc edi
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc ebx
inc ebx
cmp eax [ ebp + 0x14 ]
jl r-xdata
sub_1000e2a6
push 0x4
mov eax sub_1002173e
call sub_1000ff79
lea ecx [ ebp - 0x10 ]
call sub_10001560
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_1000246a
test eax eax
jne r-xdata
push [ ebp + 0x14 ]
mov esi [ ebp - 0x10 ]
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call sub_1000e162
lea ecx [ esi - 0x10 ]
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffff0
jmp r-xdata
call sub_10001540
call sub_10010051
retn 0x10
sub_1000e33e
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
mov esi ecx
jge r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
jl r-xdata
call sub_10003725
cmp edi ebx
jne r-xdata
mov [ esi + 0x10 ] eax
mov ecx [ esi + 0x4 ]
cmp ecx ebx
jne r-xdata
push [ esi + 0x4 ]
call sub_100016e7
pop ecx
mov [ esi + 0xc ] ebx
mov [ esi + 0x8 ] ebx
jmp r-xdata
mov ebx [ esi + 0xc ]
cmp edi ebx
jg r-xdata
cmp edi 0xffffffff
ja r-xdata
mov [ esi + 0x4 ] ebx
mov eax [ esi + 0x10 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
cmp edi eax
jle r-xdata
push edi
call sub_100016b8
push edi
push ebx
push eax
mov [ esi + 0x4 ] eax
call sub_100105c0
add esp 0x10
mov [ esi + 0xc ] edi
jmp r-xdata
add eax ebx
cmp edi eax
mov [ ebp + 0x8 ] eax
jl r-xdata
mov eax [ esi + 0x8 ]
cdq
and edx 0x7
add eax edx
sar eax 0x3
cmp eax 0x4
jl r-xdata
mov [ esi + 0x8 ] edi
jmp r-xdata
mov edx edi
sub edx eax
push edx
add eax ecx
push 0x0
push eax
call sub_100105c0
add esp 0xc
cmp [ ebp + 0x8 ] ebx
jl r-xdata
mov [ ebp + 0x8 ] edi
push 0x4
pop eax
mov ecx 0x400
cmp eax ecx
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
push [ ebp + 0x8 ]
call sub_100016b8
push [ esi + 0x8 ]
mov ebx eax
push [ esi + 0x4 ]
push [ ebp + 0x8 ]
push ebx
call sub_1000342c
mov eax [ esi + 0x8 ]
mov ecx edi
sub ecx eax
push ecx
add eax ebx
push 0x0
push eax
call sub_100105c0
push [ esi + 0x4 ]
call sub_100016e7
mov eax [ ebp + 0x8 ]
add esp 0x24
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] eax
cmp eax 0x4
jge r-xdata
mov eax ecx
jmp r-xdata
sub_1000e450
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x18 ]
not eax
push edi
test al 0x1
je r-xdata
call sub_100085b8
push 0xffffffff
push eax
mov ecx esi
call sub_1000e33e
mov edi [ esi + 0x8 ]
mov esi [ esi + 0x4 ]
test edi edi
jbe r-xdata
push [ esi + 0x8 ]
call sub_10008587
mov edi [ esi + 0x8 ]
mov ebx [ esi + 0x4 ]
test edi edi
jbe r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov ebx 0x7fffffff
cmp edi ebx
jae r-xdata
mov esi 0x7fffffff
cmp edi esi
jae r-xdata
mov ecx [ ebp + 0x8 ]
push ebx
push esi
call sub_10008629
add esi ebx
sub edi ebx
jne r-xdata
mov ebx edi
mov ecx [ ebp + 0x8 ]
push esi
push ebx
call sub_100084c0
add ebx esi
sub edi esi
jne r-xdata
mov esi edi
jmp r-xdata
sub_1000e4e6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000e32e
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000e507
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x18 ]
push eax
call [ GetOEMCP@IAT ]
push eax
call [ GetCPInfo@IAT ]
mov ecx [ ebp - 0x4 ]
xor eax eax
inc eax
cmp eax [ ebp - 0x18 ]
sbb eax eax
xor ecx ebp
neg eax
call sub_1000f298
leave
retn
sub_1000e540
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
call sub_10003725
cmp [ ebp + 0x10 ] 0x0
je r-xdata
imul eax [ ebp + 0x10 ]
add eax 0x4
push eax
call sub_100016b8
pop ecx
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
mov [ ecx ] eax
pop ebp
retn 0xc
sub_1000e589
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jl r-xdata
call sub_10003725
cmp eax [ ecx + 0x8 ]
jge r-xdata
mov ecx [ ecx + 0x4 ]
lea eax [ ecx + eax * 4 ]
pop ebp
retn 0x4
sub_1000e5aa
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jl r-xdata
call sub_10003725
cmp eax [ ecx + 0x8 ]
jge r-xdata
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + eax * 4 ]
pop ebp
retn 0x4
sub_1000e5f6
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jge r-xdata
mov eax [ ebp + 0xc ]
test eax eax
jl r-xdata
call sub_10003725
test ebx ebx
jne r-xdata
mov [ esi + 0x10 ] eax
mov ecx [ esi + 0x4 ]
push edi
test ecx ecx
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov edi [ esi + 0xc ]
cmp ebx edi
jg r-xdata
mov edi [ esi + 0x10 ]
cmp ebx edi
jle r-xdata
and [ esi + 0xc ] 0x0
and [ esi + 0x8 ] 0x0
jmp r-xdata
push eax
call sub_100016e7
and [ esi + 0x4 ] ebx
pop ecx
mov eax [ esi + 0x10 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
cmp ebx eax
jle r-xdata
mov eax edi
shl eax 0x2
push eax
call sub_100016b8
mov ecx edi
shl ecx 0x2
push ecx
push 0x0
push eax
mov [ esi + 0x4 ] eax
call sub_100105c0
add esp 0x10
mov [ esi + 0xc ] edi
jmp r-xdata
mov edi ebx
pop esi
pop ebx
pop ebp
retn 0x8
add eax edi
cmp ebx eax
mov [ ebp + 0x8 ] eax
jl r-xdata
mov eax [ esi + 0x8 ]
cdq
and edx 0x7
add eax edx
sar eax 0x3
cmp eax 0x4
jge r-xdata
mov [ esi + 0x8 ] ebx
pop edi
mov edx ebx
sub edx eax
shl edx 0x2
push edx
lea eax [ ecx + eax * 4 ]
push 0x0
push eax
call sub_100105c0
add esp 0xc
jmp r-xdata
mov eax [ ebp + 0x8 ]
cmp eax edi
jl r-xdata
mov [ ebp + 0x8 ] ebx
mov ecx 0x400
cmp eax ecx
jle r-xdata
push 0x4
pop eax
jmp r-xdata
shl eax 0x2
push eax
call sub_100016b8
mov edi eax
mov eax [ esi + 0x8 ]
shl eax 0x2
push eax
push [ esi + 0x4 ]
mov eax [ ebp + 0x8 ]
shl eax 0x2
push eax
push edi
call sub_1000342c
mov eax [ esi + 0x8 ]
mov ecx ebx
sub ecx eax
shl ecx 0x2
push ecx
lea eax [ edi + eax * 4 ]
push 0x0
push eax
call sub_100105c0
push [ esi + 0x4 ]
call sub_100016e7
mov eax [ ebp + 0x8 ]
add esp 0x24
mov [ esi + 0x4 ] edi
mov [ esi + 0xc ] eax
mov eax ecx
sub_1000e731
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
test esi esi
jl r-xdata
call sub_10003725
mov ebx [ ebp + 0x10 ]
test ebx ebx
jle r-xdata
cmp esi [ edi + 0x8 ]
push 0xffffffff
jl r-xdata
mov esi [ edi + 0x8 ]
lea eax [ esi + ebx ]
push eax
call sub_1000e5f6
mov ecx [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
sub esi ecx
mov edx esi
shl edx 0x2
mov esi ecx
push edx
mov [ ebp + 0x10 ] edx
shl esi 0x2
lea edx [ eax + esi ]
push edx
push [ ebp + 0x10 ]
add ecx ebx
lea eax [ eax + ecx * 4 ]
push eax
call sub_10008032
mov eax ebx
shl eax 0x2
push eax
mov eax [ edi + 0x4 ]
add eax esi
push 0x0
push eax
call sub_100105c0
mov esi [ ebp + 0x8 ]
add esp 0x1c
lea eax [ esi + ebx ]
push eax
call sub_1000e5f6
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ edi + 0x4 ]
mov edx [ edx ]
dec ebx
mov [ eax + ecx ] edx
add eax 0x4
test ebx ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax esi
shl eax 0x2
sub_1000e7e6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000e7d1
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000e807
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
mov edx [ edx + 0x18 ]
push ebx
not edx
push esi
push edi
mov ebx eax
mov [ ebp + 0x10 ] ecx
test dl 0x1
je r-xdata
test ecx ecx
jne r-xdata
test eax eax
jbe r-xdata
test eax eax
jbe r-xdata
call sub_10003725
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
mov edi 0x1fffffff
cmp ebx edi
jae r-xdata
mov edi 0x1fffffff
cmp ebx edi
jae r-xdata
mov ecx [ ebp + 0x8 ]
mov esi edi
shl esi 0x2
push esi
push [ ebp + 0x10 ]
call sub_10008629
add [ ebp + 0x10 ] esi
sub ebx edi
test ebx ebx
ja r-xdata
mov edi ebx
mov ecx [ ebp + 0x8 ]
mov esi edi
shl esi 0x2
push esi
push [ ebp + 0x10 ]
call sub_100084c0
add [ ebp + 0x10 ] esi
sub ebx edi
test ebx ebx
ja r-xdata
mov edi ebx
jmp r-xdata
sub_1000e88f
push 0x1c
mov eax sub_10021c60
call sub_1000ffac
mov ebx ecx
mov [ ebp - 0x24 ] ebx
mov esi [ ebx + 0x3c ]
xor edi edi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x18 ] edi
cmp esi edi
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
push 0x1
mov ecx esi
call sub_1000dd10
test eax eax
je r-xdata
push 0x1c
call sub_100016b8
pop ecx
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] edi
cmp eax edi
je r-xdata
push 0x14
call sub_100016b8
pop ecx
cmp eax edi
je r-xdata
mov eax [ ebp - 0x18 ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
xor eax eax
push 0xa
mov ecx eax
call sub_1000de04
jmp r-xdata
mov [ ebp - 0x1c ] edi
mov ecx eax
call sub_1000e5df
mov edi eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebx + 0x3c ] esi
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov esi eax
mov [ ebp - 0x20 ] eax
push [ ebx + 0x40 ]
xor eax eax
inc eax
push eax
mov ecx edi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] eax
call sub_1000e5f6
push 0x1
mov ecx esi
call sub_1000de92
mov [ eax ] edi
jmp r-xdata
call sub_10010051
retn 0x4
mov ecx [ ebp - 0x14 ]
mov [ eax ] ecx
sub_1000e963
push 0xc
mov eax sub_10021c8d
call sub_1000ff79
mov esi ecx
mov eax [ esi + 0x18 ]
xor ebx ebx
not eax
inc ebx
xor edi edi
test bl al
je r-xdata
cmp [ esi + 0x38 ] edi
jne r-xdata
cmp [ esi + 0x38 ] edi
jne r-xdata
cmp [ ebp + 0x8 ] edi
je r-xdata
push 0x14
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x18 ] ecx
mov [ ebp - 0x4 ] ebx
cmp ecx edi
je r-xdata
cmp [ ebp + 0x8 ] edi
je r-xdata
push 0x1c
call sub_100016b8
pop ecx
mov ecx eax
mov [ ebp - 0x18 ] ecx
mov [ ebp - 0x4 ] edi
cmp ecx edi
je r-xdata
call sub_10010051
retn 0x4
mov ecx esi
call sub_1000e5cb
mov ecx [ esi + 0x38 ]
push ebx
push [ ebp + 0x8 ]
push [ esi + 0x34 ]
call sub_1000efaa
mov ecx [ esi + 0x3c ]
lea eax [ ebp - 0x14 ]
push eax
push ebx
mov [ ebp - 0x14 ] edi
call sub_1000dd10
mov ecx [ ebp - 0x14 ]
cmp ecx edi
je r-xdata
xor eax eax
call sub_1000ef83
jmp r-xdata
mov ecx esi
call sub_1000e5cb
push [ ebp + 0x8 ]
mov ecx [ esi + 0x38 ]
call sub_1000de92
mov ecx [ esi + 0x34 ]
mov [ eax ] ecx
jmp r-xdata
xor eax eax
push [ esi + 0x40 ]
call sub_1000de04
jmp r-xdata
call sub_10003725
push ebx
lea eax [ ebp + 0x8 ]
push eax
push [ esi + 0x34 ]
mov [ ebp + 0x8 ] 0x2
call sub_1000e731
mov eax [ eax + 0x4 ]
mov [ eax ] edi
lea eax [ ebp - 0x10 ]
push eax
mov ecx esi
mov [ esi + 0x34 ] ebx
mov [ ebp - 0x10 ] edi
call sub_1000e88f
mov ecx [ ebp - 0x10 ]
push ebx
lea eax [ ebp - 0x18 ]
push eax
push edi
mov [ ebp - 0x18 ] edi
call sub_1000e731
push [ esi + 0x40 ]
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov ecx eax
mov [ esi + 0x38 ] eax
call sub_1000f0d0
mov eax [ esi + 0x38 ]
cmp [ eax + 0x8 ] edi
jg r-xdata
inc [ esi + 0x34 ]
or [ ebp - 0x4 ] 0xffffffff
push ebx
push [ esi + 0x44 ]
mov ecx eax
mov [ esi + 0x38 ] eax
call sub_1000dbe7
mov ecx [ esi + 0x38 ]
push edi
call sub_1000de92
mov [ eax ] edi
mov [ esi + 0x34 ] ebx
sub_1000eaa2
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov esi ecx
test ebx ebx
jne r-xdata
mov eax [ esi + 0x18 ]
not eax
test al 0x1
jne r-xdata
push [ esi + 0x14 ]
push 0x6
cmp [ ebx + 0x8 ] 0xffff
jne r-xdata
push [ esi + 0x14 ]
push 0x1
jmp r-xdata
push 0x0
call sub_1000e963
mov ecx [ esi + 0x38 ]
push ebx
call sub_1000de92
mov edi [ eax ]
mov ecx esi
test edi edi
je r-xdata
call sub_10003709
call sub_10008773
push 0xffff
call sub_100082eb
push esi
mov ecx ebx
call sub_100085ec
mov ecx esi
call sub_1000e5cb
mov ecx [ esi + 0x38 ]
push ebx
call sub_1000de92
mov ecx [ esi + 0x34 ]
mov [ eax ] ecx
inc [ esi + 0x34 ]
mov eax 0x7fff
cmp edi eax
jae r-xdata
push eax
call sub_100082eb
or edi 0x80000000
push edi
mov ecx esi
call sub_1000832a
jmp r-xdata
or edi 0x8000
push edi
call sub_100082eb
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_1000eb51
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi ecx
test [ esi + 0x18 ] 0x1
push edi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ebx 0xffff
test eax eax
je r-xdata
push [ esi + 0x14 ]
push 0x1
push 0x0
call sub_1000e963
lea eax [ ebp - 0x4 ]
push eax
mov ecx esi
call sub_10008368
mov eax 0x7fff
cmp [ ebp - 0x4 ] ax
jne r-xdata
cmp [ eax + 0x8 ] ebx
jne r-xdata
movzx ecx [ ebp - 0x4 ]
mov eax ecx
and eax 0xffff8000
shl eax 0x10
or eax ecx
and eax 0xffff7fff
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0xc ]
push eax
mov ecx esi
call sub_100083b0
mov eax [ ebp - 0xc ]
jmp r-xdata
call sub_10003709
cmp [ ebp - 0x4 ] bx
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edi 0x80000000
test edi eax
jne r-xdata
mov edi eax
and edi 0x7fffffff
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
push esi
call sub_10008449
mov ebx eax
test ebx ebx
jne r-xdata
mov [ ecx ] eax
xor eax eax
jmp r-xdata
push [ esi + 0x14 ]
push 0x5
jmp r-xdata
mov eax [ esi + 0x38 ]
mov eax [ eax + 0x8 ]
dec eax
cmp edi eax
ja r-xdata
mov eax [ ebx + 0x8 ]
mov ecx eax
and ecx 0x7fffffff
cmp ecx [ ebp - 0x8 ]
je r-xdata
push [ esi + 0x14 ]
push 0x6
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
call sub_10008773
mov ecx [ esi + 0x3c ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x1
call sub_1000dd10
mov ecx [ ebp - 0x4 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_1000e5cb
mov ecx [ esi + 0x38 ]
xor edi edi
inc edi
push edi
push ebx
push [ esi + 0x34 ]
call sub_1000efaa
mov ecx [ esi + 0x3c ]
and [ ebp - 0x10 ] 0x0
lea eax [ ebp - 0x10 ]
push eax
push edi
call sub_1000dd10
mov ecx [ ebp - 0x10 ]
test ecx ecx
jne r-xdata
test edi eax
jne r-xdata
call sub_10003725
push edi
call sub_1000e589
cmp [ eax ] 0x2
je r-xdata
push edi
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x34 ]
mov [ ebp - 0x4 ] edi
call sub_1000e731
inc [ esi + 0x34 ]
mov eax [ ebp - 0x8 ]
jmp r-xdata
push 0x0
mov ecx esi
call sub_1000e88f
mov ecx [ esi + 0x3c ]
mov edi [ ebp - 0x8 ]
push ebx
call sub_1000de92
mov [ eax ] edi
push [ esi + 0x14 ]
push 0x7
jmp r-xdata
mov ecx [ esi + 0x38 ]
push edi
call sub_1000e5aa
mov ecx [ esi + 0x3c ]
and [ ebp - 0x8 ] 0x0
mov ebx eax
test ecx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov eax [ ebx + 0x8 ]
and eax 0x7fffffff
lea eax [ ebp - 0x4 ]
push eax
push ebx
call sub_1000dd10
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
push [ ebp + 0x8 ]
mov ecx ebx
call sub_1000503e
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov [ esi + 0x10 ] eax
mov [ ecx ] eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ eax ] ecx
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
sub_1000ed45
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x18 ]
not eax
mov esi ecx
mov ecx edi
test al 0x1
je r-xdata
call sub_100085b8
push 0xffffffff
push eax
mov ecx esi
call sub_1000e5f6
push [ esi + 0x8 ]
call sub_10008587
jmp r-xdata
push [ esi + 0x8 ]
push [ esi + 0x4 ]
push edi
call sub_1000e807
pop edi
pop esi
pop ebp
retn 0x4
sub_1000ed87
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
not eax
push edi
test al 0x1
jne r-xdata
push 0x0
call sub_1000e963
mov edi [ ebp + 0x8 ]
test edi edi
jne r-xdata
push [ esi + 0x14 ]
push 0x2
call sub_10008773
mov ecx [ esi + 0x38 ]
push ebx
push edi
call sub_1000de92
mov ebx [ eax ]
test ebx ebx
je r-xdata
push edi
mov ecx esi
call sub_100082eb
jmp r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax ]
push eax
mov ecx esi
call sub_1000eaa2
mov ecx esi
call sub_1000e5cb
mov ecx [ esi + 0x38 ]
push edi
call sub_1000de92
mov ecx [ esi + 0x34 ]
mov [ eax ] ecx
inc [ esi + 0x34 ]
mov eax [ edi ]
push esi
mov ecx edi
call [ eax + 0x8 ]
mov eax 0x7fff
mov ecx esi
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebp
retn 0x4
push eax
call sub_100082eb
push ebx
mov ecx esi
call sub_1000832a
jmp r-xdata
push ebx
call sub_100082eb
jmp r-xdata
pop ebx
sub_1000ee23
push 0x14
mov eax sub_10021ca8
call sub_1000ffac
mov esi ecx
test [ esi + 0x18 ] 0x1
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0x8 ]
call sub_1000eb51
xor ebx ebx
mov [ ebp - 0x14 ] ebx
cmp eax ebx
jne r-xdata
push [ esi + 0x14 ]
push 0x4
mov ecx eax
mov [ ebp - 0x4 ] ebx
call sub_10004ff4
mov edi eax
mov [ ebp - 0x14 ] edi
cmp edi ebx
jne r-xdata
mov eax [ esi + 0x38 ]
mov eax [ eax + 0x8 ]
mov edi [ ebp - 0x18 ]
dec eax
cmp edi eax
jbe r-xdata
mov ecx esi
call sub_1000e5cb
mov ecx [ esi + 0x38 ]
push 0x1
push edi
push [ esi + 0x34 ]
call sub_1000efaa
mov ecx [ esi + 0x3c ]
lea eax [ ebp + 0x8 ]
push eax
push 0x1
mov [ ebp + 0x8 ] ebx
call sub_1000dd10
mov ecx [ ebp + 0x8 ]
xor eax eax
cmp ecx ebx
setne al
cmp eax ebx
je r-xdata
call sub_100036ed
mov ecx [ esi + 0x3c ]
lea eax [ ebp - 0x14 ]
push eax
push 0x1
mov [ ebp - 0x14 ] ebx
call sub_1000dd10
test eax eax
je r-xdata
push [ esi + 0x14 ]
push 0x5
jmp r-xdata
call sub_10003725
push 0x1
lea eax [ ebp - 0x18 ]
push eax
push [ esi + 0x34 ]
mov [ ebp - 0x18 ] 0x2
call sub_1000e731
mov eax [ ebp - 0x1c ]
mov ebx [ esi + 0x10 ]
inc [ esi + 0x34 ]
mov [ esi + 0x10 ] eax
mov eax [ edi ]
push esi
mov ecx edi
call [ eax + 0x8 ]
mov [ esi + 0x10 ] ebx
mov ecx [ esi + 0x38 ]
push edi
call sub_1000e5aa
mov edi eax
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x14 ]
cmp ecx ebx
jne r-xdata
call sub_10008773
mov eax edi
call sub_10010051
retn 0x4
cmp [ ebp + 0x8 ] ebx
je r-xdata
mov eax [ ecx + 0x8 ]
dec eax
cmp edi eax
ja r-xdata
push [ ebp + 0x8 ]
mov ecx edi
call sub_10005069
test eax eax
jne r-xdata
push edi
call sub_1000e589
cmp [ eax ] 0x1
je r-xdata
push [ esi + 0x14 ]
push 0x6
jmp r-xdata
sub_1000efaa
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
test edi edi
jl r-xdata
call sub_10003725
mov ebx [ ebp + 0x10 ]
test ebx ebx
jle r-xdata
cmp edi [ esi + 0x8 ]
push 0xffffffff
jl r-xdata
mov edi [ esi + 0x8 ]
lea eax [ edi + ebx ]
push eax
call sub_1000f0d0
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
sub edi eax
lea edx [ ecx + eax * 4 ]
shl edi 0x2
push edi
push edx
mov edx [ esi + 0x8 ]
sub edx eax
sub edx ebx
shl edx 0x2
add eax ebx
push edx
lea eax [ ecx + eax * 4 ]
push eax
call sub_10008032
mov ecx [ esi + 0x4 ]
mov eax ebx
shl eax 0x2
push eax
mov eax [ ebp + 0x8 ]
shl eax 0x2
add ecx eax
push 0x0
push ecx
call sub_100105c0
mov edi [ ebp + 0x8 ]
add esp 0x1c
lea eax [ edi + ebx ]
push eax
call sub_1000f0d0
jmp r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0xc ]
dec ebx
mov [ eax + ecx ] edx
add eax 0x4
test ebx ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax edi
shl eax 0x2
sub_1000f050
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000ef9a
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000f0d0
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
mov esi ecx
jge r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
jl r-xdata
call sub_10003725
cmp edi ebx
jne r-xdata
mov [ esi + 0x10 ] eax
mov ecx [ esi + 0x4 ]
cmp ecx ebx
jne r-xdata
push [ esi + 0x4 ]
call sub_100016e7
pop ecx
mov [ esi + 0xc ] ebx
mov [ esi + 0x8 ] ebx
jmp r-xdata
mov ebx [ esi + 0xc ]
cmp edi ebx
jg r-xdata
mov ebx edi
shl ebx 0x2
push ebx
call sub_100016b8
push ebx
push 0x0
push eax
mov [ esi + 0x4 ] eax
call sub_100105c0
add esp 0x10
mov [ esi + 0xc ] edi
jmp r-xdata
mov [ esi + 0x4 ] ebx
mov eax [ esi + 0x10 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
cmp edi eax
jle r-xdata
mov [ esi + 0x8 ] edi
jmp r-xdata
add eax ebx
cmp edi eax
mov [ ebp + 0x8 ] eax
jl r-xdata
mov eax [ esi + 0x8 ]
cdq
and edx 0x7
add eax edx
sar eax 0x3
cmp eax 0x4
jl r-xdata
mov edx edi
sub edx eax
shl edx 0x2
push edx
lea eax [ ecx + eax * 4 ]
push 0x0
push eax
call sub_100105c0
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
mov eax [ ebp + 0x8 ]
cmp eax ebx
jl r-xdata
mov [ ebp + 0x8 ] edi
push 0x4
pop eax
mov ecx 0x400
cmp eax ecx
jle r-xdata
shl eax 0x2
push eax
call sub_100016b8
mov ebx eax
mov eax [ esi + 0x8 ]
shl eax 0x2
push eax
push [ esi + 0x4 ]
mov eax [ ebp + 0x8 ]
shl eax 0x2
push eax
push ebx
call sub_1000342c
mov eax [ esi + 0x8 ]
mov ecx edi
sub ecx eax
shl ecx 0x2
push ecx
lea eax [ ebx + eax * 4 ]
push 0x0
push eax
call sub_100105c0
push [ esi + 0x4 ]
call sub_100016e7
mov eax [ ebp + 0x8 ]
add esp 0x24
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] eax
cmp eax 0x4
jge r-xdata
mov eax ecx
jmp r-xdata
sub_1000f1f6
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebx + 0x18 ]
push esi
not eax
mov esi ecx
push edi
mov ecx ebx
test al 0x1
je r-xdata
call sub_100085b8
push 0xffffffff
push eax
mov ecx esi
call sub_1000f0d0
xor edi edi
cmp [ esi + 0x8 ] edi
jle r-xdata
push [ esi + 0x8 ]
call sub_10008587
xor edi edi
cmp [ esi + 0x8 ] edi
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov eax [ esi + 0x4 ]
lea eax [ eax + edi * 4 ]
push eax
push ebx
call sub_1000f08e
inc edi
cmp edi [ esi + 0x8 ]
jl r-xdata
mov eax [ esi + 0x4 ]
push [ eax + edi * 4 ]
push ebx
call sub_1000f077
inc edi
cmp edi [ esi + 0x8 ]
jl r-xdata
jmp r-xdata
sub_1000f277
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000f0c0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000f2a7
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
cmp edi ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
mov [ ebp - 0x1c ] eax
cmp edi eax
ja r-xdata
cmp esi ebx
jne r-xdata
pop ebx
leave
retn
push [ ebp + 0x1c ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x18 ]
mov [ ebp - 0x14 ] 0x42
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] esi
push eax
mov [ ebp - 0x20 ] esi
call [ ebp + 0x8 ]
add esp 0x10
mov [ ebp + 0x14 ] eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x1c ] edi
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop edi
pop esi
cmp eax ebx
jl r-xdata
xor eax eax
cmp [ ebp - 0x1c ] ebx
mov [ esi + edi - 0x1 ] bl
setge al
dec eax
dec eax
dec [ ebp - 0x1c ]
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_100133d3
pop ecx
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax [ ebp + 0x14 ]
jmp r-xdata
sub_1000f373
mov edi edi
push ebp
mov ebp esp
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10010569
mov [ eax ] 0x16
jmp r-xdata
cmp [ ebp + 0xc ] ebx
ja r-xdata
pop ebx
pop ebp
retn
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
or eax 0xffffffff
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push r-xdata
call sub_1000f2a7
add esp 0x18
cmp eax ebx
jge r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ esi ] bl
pop esi
call sub_10010569
mov [ eax ] 0x22
sub_1000f418
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
push edi
cmp [ ebp + 0x10 ] ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
pop ebx
leave
retn
call sub_10010569
mov [ eax ] 0x16
jmp r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
call sub_10010569
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
cmp edi [ ebp + 0x10 ]
jbe r-xdata
xor eax eax
jmp r-xdata
mov eax [ eax ]
push edi
push esi
push r-xdata
mov [ ebp - 0x4 ] eax
call sub_1000f2a7
add esp 0x18
mov [ esi + edi - 0x1 ] bl
cmp eax 0xfffffffe
jne r-xdata
mov edi [ eax ]
mov eax [ ebp + 0x10 ]
inc eax
push eax
push esi
push r-xdata
call sub_1000f2a7
add esp 0x18
cmp eax 0xfffffffe
jne r-xdata
pop edi
pop esi
cmp eax ebx
jge r-xdata
cmp [ ebp + 0x10 ] 0xffffffff
jne r-xdata
call sub_10010569
cmp [ eax ] 0x22
jne r-xdata
mov [ esi ] bl
cmp eax 0xfffffffe
jne r-xdata
call sub_10010569
cmp [ eax ] 0x22
jne r-xdata
or eax 0xffffffff
call sub_10010569
mov [ eax ] edi
jmp r-xdata
call sub_10010569
mov [ eax ] 0x22
call sub_10010569
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
jmp r-xdata
sub_1000f51f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
pop edi
pop esi
pop ebp
retn
push [ ebp + 0xc ]
push edi
push [ ebp + 0x8 ]
call sub_100105c0
add esp 0xc
cmp [ ebp + 0x10 ] edi
je r-xdata
cmp [ ebp + 0xc ] esi
jb r-xdata
cmp [ ebp + 0xc ] esi
jae r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10014eb0
add esp 0xc
jmp r-xdata
push 0x16
pop eax
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
sub_1000f59c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push esi
xor esi esi
cmp [ ebp + 0xc ] esi
jne r-xdata
push [ ebp + 0x14 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
mov [ ebp - 0x1c ] 0x7fffffff
push [ ebp + 0xc ]
mov [ ebp - 0x14 ] 0x42
push eax
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
call [ ebp + 0x8 ]
add esp 0x10
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
leave
retn
sub_1000f60f
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_10015290
push [ rw-data ]
mov edi eax
mov [ ebp - 0x4 ] edi
call sub_10015290
mov esi eax
pop ecx
pop ecx
cmp esi edi
jb r-xdata
xor eax eax
mov ebx esi
sub ebx edi
lea eax [ ebx + 0x4 ]
cmp eax 0x4
jb r-xdata
push edi
call sub_100122c6
mov edi eax
lea eax [ ebx + 0x4 ]
pop ecx
cmp edi eax
jae r-xdata
push [ ebp + 0x8 ]
call sub_10015215
mov [ esi ] eax
add esi 0x4
push esi
call sub_10015215
pop ecx
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
pop ecx
jmp r-xdata
mov eax 0x800
cmp edi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax edi
cmp eax edi
jb r-xdata
mov eax edi
lea eax [ edi + 0x10 ]
cmp eax edi
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_100158b1
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_100158b1
pop ecx
pop ecx
test eax eax
je r-xdata
sar ebx 0x2
push eax
lea esi [ eax + ebx * 4 ]
call sub_10015215
pop ecx
mov [ rw-data ] eax
sub_1000f6c9
mov edi edi
push esi
push 0x4
push 0x20
call sub_10015865
mov esi eax
push esi
call sub_10015215
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000f6fa
push 0xc
push r--data
call sub_10010720
call sub_1001011f
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000f60f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f730
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_1000f75d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000f74d
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1000f77e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_100159d0
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1000f79e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push edi
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
push eax
call sub_100161b0
pop ecx
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_10015693
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1001530b
push 0x214
push 0x1
call sub_10015865
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
call sub_10016164
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1001602d
mov [ rw-data ] eax
call sub_10015a58
test eax eax
jge r-xdata
call sub_100161e0
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0xc
xor eax eax
inc eax
push edi
call sub_10015625
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10015290
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10010339
call sub_10015f72
test eax eax
jl r-xdata
call sub_1001533f
jmp r-xdata
push esi
call sub_1000fb05
pop ecx
jmp r-xdata
push edi
push esi
call sub_1001537c
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_10015cac
call sub_1001533f
call sub_100161e0
jmp r-xdata
call sub_10015cac
jmp r-xdata
call sub_10015cfa
test eax eax
jl r-xdata
push 0x0
call sub_10010172
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000f8d3
push 0xc
push r--data
call sub_10010720
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_1000166a
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000f79e
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000f79e
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_1000166a
push edi
push 0x0
push ebx
call sub_1000f79e
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10010765
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000f8d3
pop ecx
pop ebp
retn 0xc
call sub_100163d4
sub_1000f9ec
push 0xc
push r--data
call sub_10010720
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
push 0x4
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10016df8
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fa32
sub_1000fa3b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_100172d0
pop ecx
call sub_10010569
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
mov edi [ HeapAlloc@IAT ]
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_10017288
push 0x1e
call sub_100170dd
push 0xff
call sub_10010107
cmp eax 0x3
jne r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000f9ec
pop ecx
test eax eax
jne r-xdata
xor eax eax
inc eax
mov eax esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
inc esi
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push [ rw-data ]
call edi
push eax
jmp r-xdata
pop edi
mov eax ebx
pop ebx
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
pop esi
pop ebp
retn
call sub_10010569
mov [ eax ] esi
push [ ebp + 0x8 ]
call sub_100172d0
pop ecx
test eax eax
je r-xdata
call sub_10010569
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
sub_1000fb05
push 0xc
push r--data
call sub_10010720
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10010765
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10016619
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_10010569
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10010527
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fb5b
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_10016649
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_1000fb93
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1000fbcc
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000fc20
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017ecb
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1000fc56
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_1000f298
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_10017ecb
add esp 0x20
pop esi
pop ebp
retn
sub_1000fc89
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_1000fd60
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_100154dc
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_1000fd60
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_1000f298
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_10017ecb
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_1000fc89
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1000fbcc
pop ebx
leave
retn
sub_1000fdff
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp - 0x4 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax ecx
mov ecx [ ebp + 0x10 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_10017ffd
call sub_10017ffd
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_1000fe74
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_100154dc
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_100154dc
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_1000fea0
mov edi edi
push ebp
mov ebp esp
call sub_100154dc
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1000fec7
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100154dc
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_100154dc
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_100154dc
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_10017ffd
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_1000ff19
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1000fc56
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_10018050
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1000ff79
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1000ffac
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1000ffe2
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10010018
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10010083
mov edi edi
push ebp
mov ebp esp
push edi
mov edi 0x3e8
pop edi
pop ebp
retn
test eax eax
je r-xdata
push edi
call [ Sleep@IAT ]
push [ ebp + 0x8 ]
call [ GetModuleHandleW@IAT ]
add edi 0x3e8
cmp edi 0xea60
ja r-xdata
sub_100100b3
mov edi edi
push ebp
mov ebp esp
call sub_10017288
push [ ebp + 0x8 ]
call sub_100170dd
push [ rw-data ]
call sub_10015290
push 0xff
call eax
add esp 0xc
pop ebp
retn
sub_100100dc
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_10010131
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_1001014e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10010172
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_1001809c
push r--data
push r--data
call sub_1001014e
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
call sub_10018150
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push sub_1001618a
call sub_1000f736
mov eax r--data
mov [ esp ] r--data
call sub_10010131
cmp [ rw-data ] 0x0
pop ecx
je r-xdata
push [ ebp + 0x8 ]
call [ r--data ]
pop ecx
xor eax eax
push rw-data
call sub_10018150
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_100101f7
push 0x18
push r--data
call sub_10010720
push 0x8
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
xor ebx ebx
inc ebx
cmp [ rw-data ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001030e
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] ebx
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10010765
retn
mov [ rw-data ] ebx
push 0x8
call sub_1001650c
pop ecx
push [ ebp + 0x8 ]
call sub_10010107
push r--data
mov eax r--data
call sub_10010131
pop ecx
push [ rw-data ]
call sub_10015290
pop ecx
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_10010131
pop ecx
push [ rw-data ]
call sub_10015290
pop ecx
mov esi eax
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] esi
call sub_10015287
cmp [ esi ] eax
je r-xdata
sub esi 0x4
mov [ ebp - 0x24 ] esi
cmp esi edi
jb r-xdata
cmp esi edi
jb r-xdata
push [ esi ]
call sub_10015290
mov edi eax
call sub_10015287
mov [ esi ] eax
call edi
push [ rw-data ]
call sub_10015290
mov edi eax
push [ rw-data ]
call sub_10015290
add esp 0xc
cmp [ ebp - 0x1c ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x20 ] eax
mov esi eax
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] eax
je r-xdata
mov edi [ ebp - 0x28 ]
jmp r-xdata
sub_10010348
mov edi edi
push esi
call sub_10015287
mov esi eax
push esi
call sub_100172c1
push esi
call sub_1001843d
push esi
call sub_10013537
push esi
call sub_1001842e
push esi
call sub_1001841f
push esi
call sub_1001820d
push esi
call sub_10012eaf
push esi
call sub_10018035
push sub_10010323
call sub_10015215
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_10010396
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
je r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
sub_10010400
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1001048b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push esi
push edi
xor edi edi
cmp eax edi
je r-xdata
xor eax eax
cmp [ ebp + 0x8 ] edi
jne r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
cmp [ ebp + 0xc ] eax
jae r-xdata
pop edi
pop esi
pop ebp
retn
push eax
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_100184b0
add esp 0xc
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
sub_100104e8
mov edi edi
push ebp
mov ebp esp
lea eax [ ebp + 0x14 ]
push eax
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f373
add esp 0x14
pop ebp
retn
sub_10010506
mov edi edi
push ebp
mov ebp esp
lea eax [ ebp + 0x18 ]
push eax
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f418
add esp 0x18
pop ebp
retn
sub_10010527
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1001058f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1001057c
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10010527
pop ecx
mov esi eax
call sub_10010569
mov [ eax ] esi
pop esi
pop ebp
retn
sub_100105c0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_1001886c
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1001063a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
sub_100106ae
mov edi edi
push ebp
mov ebp esp
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
push edi
push [ ebp + 0x8 ]
call sub_10010400
mov esi eax
inc esi
push esi
call sub_1000fa3b
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
push [ ebp + 0x8 ]
push esi
push edi
call sub_10010396
add esp 0xc
test eax eax
je r-xdata
pop ebx
pop ebp
retn
mov eax edi
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
pop edi
pop esi
sub_10010720
push sub_10010780
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10010780
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000f298
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000f298
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10018d08
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10018cbe
mov [ ebp - 0x1 ] 0x1
test eax eax
jl r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000f298
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000f298
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_10018cee
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10018d08
mov eax [ ebp + 0xc ]
push r--data
call sub_10018150
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000f298
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10018cd5
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000f298
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1001090c
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
inc ecx
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_10010929
push 0x10
push r--data
call sub_10010720
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000fa3b
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_1000fb05
pop ecx
jmp r-xdata
call sub_10010765
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_100172d0
pop ecx
call sub_10010569
push 0x4
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10016619
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010a6d
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_10016b17
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_100172d0
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_10016df8
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_10010569
call sub_10010569
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_100172d0
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10010527
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_10010569
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_10010569
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10014eb0
push ebx
call sub_10016619
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_10016649
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10010527
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10014eb0
push ebx
push [ ebp - 0x20 ]
call sub_10016649
add esp 0x14
mov eax esi
sub_10010b44
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10010b90
push sub_10010780
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
mov [ ebp - 0x1c ] eax
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10010c1c
push [ rw-data ]
call sub_10015290
pop ecx
test eax eax
je r-xdata
push 0x19
call sub_100170dd
push 0x1
push 0x0
call sub_10018e36
add esp 0xc
jmp sub_10018d1f
call eax
sub_10010c46
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x10 ]
mov eax edi
sub eax 0x0
je r-xdata
xor eax eax
dec eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
movzx eax [ eax ]
movzx ecx [ ecx ]
jmp r-xdata
dec eax
je r-xdata
sub eax ecx
je r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
pop edi
pop esi
pop ebp
retn
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
movzx eax [ ecx + 0x1 ]
movzx ecx [ esi + 0x1 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
push ebx
push 0x20
pop edx
jmp r-xdata
movzx eax [ ecx + 0x2 ]
movzx ecx [ esi + 0x2 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
cmp edi edx
jae r-xdata
movzx eax [ ecx + 0x2 ]
movzx edx [ esi + 0x2 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov esi [ eax ]
cmp esi [ ecx ]
je r-xdata
add eax edi
add ecx edi
cmp edi 0x1f
ja r-xdata
movzx eax [ ecx + 0x3 ]
movzx ecx [ esi + 0x3 ]
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
xor esi esi
movzx esi [ eax ]
movzx ebx [ ecx ]
sub esi ebx
je r-xdata
xor eax eax
jmp [ edi * 4 + jump_table_10012246 ]
mov eax esi
jmp r-xdata
mov esi [ eax + 0x4 ]
cmp esi [ ecx + 0x4 ]
je r-xdata
movzx esi [ eax + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
mov edx [ eax - 0x1c ]
cmp edx [ ecx - 0x1c ]
je r-xdata
mov edx [ eax - 0x18 ]
cmp edx [ ecx - 0x18 ]
je r-xdata
mov edx [ eax - 0x14 ]
cmp edx [ ecx - 0x14 ]
je r-xdata
mov edx [ eax - 0x10 ]
cmp edx [ ecx - 0x10 ]
je r-xdata
mov edx [ eax - 0xc ]
cmp edx [ ecx - 0xc ]
je r-xdata
mov edx [ eax - 0x8 ]
cmp edx [ ecx - 0x8 ]
je r-xdata
mov edx [ eax - 0x4 ]
cmp edx [ ecx - 0x4 ]
je r-xdata
mov edx [ eax - 0x1d ]
cmp edx [ ecx - 0x1d ]
je r-xdata
mov edx [ eax - 0x19 ]
cmp edx [ ecx - 0x19 ]
je r-xdata
mov edx [ eax - 0x15 ]
cmp edx [ ecx - 0x15 ]
je r-xdata
mov edx [ eax - 0x11 ]
cmp edx [ ecx - 0x11 ]
je r-xdata
mov edx [ eax - 0xd ]
cmp edx [ ecx - 0xd ]
je r-xdata
mov edx [ eax - 0x9 ]
cmp edx [ ecx - 0x9 ]
je r-xdata
mov edx [ eax - 0x5 ]
cmp edx [ ecx - 0x5 ]
je r-xdata
movzx ecx [ ecx - 0x1 ]
movzx eax [ eax - 0x1 ]
sub eax ecx
je r-xdata
mov edx [ eax - 0x1e ]
cmp edx [ ecx - 0x1e ]
je r-xdata
mov edx [ eax - 0x1a ]
cmp edx [ ecx - 0x1a ]
je r-xdata
mov edx [ eax - 0x16 ]
cmp edx [ ecx - 0x16 ]
je r-xdata
mov edx [ eax - 0x12 ]
cmp edx [ ecx - 0x12 ]
je r-xdata
mov edx [ eax - 0xe ]
cmp edx [ ecx - 0xe ]
je r-xdata
mov edx [ eax - 0xa ]
cmp edx [ ecx - 0xa ]
je r-xdata
mov edx [ eax - 0x6 ]
cmp edx [ ecx - 0x6 ]
je r-xdata
mov dx [ eax - 0x2 ]
cmp dx [ ecx - 0x2 ]
je r-xdata
mov edx [ eax - 0x1f ]
cmp edx [ ecx - 0x1f ]
je r-xdata
mov edx [ eax - 0x1b ]
cmp edx [ ecx - 0x1b ]
je r-xdata
mov edx [ eax - 0x17 ]
cmp edx [ ecx - 0x17 ]
je r-xdata
mov edx [ eax - 0x13 ]
cmp edx [ ecx - 0x13 ]
je r-xdata
mov edx [ eax - 0xf ]
cmp edx [ ecx - 0xf ]
je r-xdata
mov edx [ eax - 0xb ]
cmp edx [ ecx - 0xb ]
je r-xdata
mov edx [ eax - 0x7 ]
cmp edx [ ecx - 0x7 ]
je r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
pop ebx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x4 ]
movzx ebx [ ecx + 0x4 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xc ]
movzx esi [ eax - 0xc ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor eax eax
movzx esi dl
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xa ]
movzx esi [ eax - 0xa ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
movzx edx [ ecx - 0x2 ]
movzx esi [ eax - 0x2 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x1f ]
movzx esi [ eax - 0x1f ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xf ]
movzx esi [ eax - 0xf ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
mov esi [ eax + 0x8 ]
cmp esi [ ecx + 0x8 ]
je r-xdata
movzx esi [ eax + 0x5 ]
movzx ebx [ ecx + 0x5 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x3 ]
movzx ebx [ ecx + 0x3 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1e ]
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
mov eax edx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x8 ]
movzx ebx [ ecx + 0x8 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x6 ]
movzx ebx [ ecx + 0x6 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
mov eax edx
jmp r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x8 ]
movzx esi [ eax - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
jmp r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
mov esi [ eax + 0xc ]
cmp esi [ ecx + 0xc ]
je r-xdata
movzx esi [ eax + 0x9 ]
movzx ebx [ ecx + 0x9 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x7 ]
movzx ebx [ ecx + 0x7 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
sub eax ecx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
test eax eax
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x7 ]
movzx esi [ eax - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0xc ]
movzx ebx [ ecx + 0xc ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xa ]
movzx ebx [ ecx + 0xa ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
mov esi [ eax + 0x10 ]
cmp esi [ ecx + 0x10 ]
je r-xdata
movzx esi [ eax + 0xd ]
movzx ebx [ ecx + 0xd ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0xb ]
movzx ebx [ ecx + 0xb ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx ebx [ ecx + 0x10 ]
movzx esi [ eax + 0x10 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xe ]
movzx ebx [ ecx + 0xe ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x14 ]
cmp esi [ ecx + 0x14 ]
je r-xdata
movzx esi [ eax + 0x11 ]
movzx ebx [ ecx + 0x11 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0xf ]
movzx ebx [ ecx + 0xf ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x14 ]
movzx ebx [ ecx + 0x14 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x12 ]
movzx ebx [ ecx + 0x12 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x18 ]
cmp esi [ ecx + 0x18 ]
je r-xdata
movzx esi [ eax + 0x15 ]
movzx ebx [ ecx + 0x15 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x13 ]
movzx ebx [ ecx + 0x13 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x18 ]
movzx ebx [ ecx + 0x18 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x16 ]
movzx ebx [ ecx + 0x16 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x1c ]
cmp esi [ ecx + 0x1c ]
je r-xdata
movzx esi [ eax + 0x19 ]
movzx ebx [ ecx + 0x19 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x17 ]
movzx ebx [ ecx + 0x17 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x1c ]
movzx ebx [ ecx + 0x1c ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x1a ]
movzx ebx [ ecx + 0x1a ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
add eax edx
add ecx edx
sub edi edx
movzx esi [ eax + 0x1d ]
movzx ebx [ ecx + 0x1d ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x1b ]
movzx ebx [ ecx + 0x1b ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x1e ]
movzx ebx [ ecx + 0x1e ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
movzx esi [ eax + 0x1f ]
movzx ebx [ ecx + 0x1f ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
sub_100122c6
push 0x10
push r--data
call sub_10010720
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10010569
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10016619
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_10010765
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012360
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_10012369
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_100154dc
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_100197e9
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1001907d
mov [ esi + 0x4 ] eax
sub_100123f0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov esi [ ebp - 0xc ]
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019860
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ eax ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub eax [ ebp + 0x8 ]
push edi
cmp [ ecx ] bl
jne r-xdata
mov dl [ ecx ]
movzx edi dl
test [ edi + esi + 0x1d ] 0x4
je r-xdata
cmp [ ecx ] bl
je r-xdata
cmp dl [ eax ]
je r-xdata
cmp dl [ eax ]
jne r-xdata
pop edi
movzx ecx [ eax ]
test [ ecx + esi + 0x1d ] 0x4
je r-xdata
inc ecx
lea edx [ ecx + 0x1 ]
cmp [ edx ] bl
je r-xdata
mov dl [ ecx + 0x1 ]
cmp dl [ eax + 0x1 ]
je r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
inc eax
cmp [ eax ] bl
je r-xdata
mov ecx edx
jmp r-xdata
mov ecx [ ebp + 0xc ]
jmp r-xdata
sub_100124ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov esi [ ebp - 0xc ]
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100198b0
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ eax ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub eax [ ebp + 0x8 ]
push edi
cmp [ ecx ] bl
jne r-xdata
mov dl [ ecx ]
movzx edi dl
test [ edi + esi + 0x1d ] 0x4
je r-xdata
cmp [ ecx ] bl
jne r-xdata
cmp dl [ eax ]
je r-xdata
cmp dl [ eax ]
jne r-xdata
pop edi
movzx ecx [ eax ]
test [ ecx + esi + 0x1d ] 0x4
je r-xdata
inc ecx
lea edx [ ecx + 0x1 ]
cmp [ edx ] bl
je r-xdata
mov dl [ ecx + 0x1 ]
cmp dl [ eax + 0x1 ]
je r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
inc eax
cmp [ eax ] bl
je r-xdata
mov ecx edx
jmp r-xdata
mov ecx [ ebp + 0xc ]
jmp r-xdata
sub_100125b0
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_100125db
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1001265f
mov edi edi
push ebp
mov ebp esp
push ecx
or [ ebp - 0x4 ] 0xffffffff
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10015287
mov ecx [ rw-data ]
cmp ecx eax
je r-xdata
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
xor eax eax
leave
retn
push 0x0
push 0x4
lea eax [ ebp - 0x4 ]
push eax
push 0x0
push [ rw-data ]
push ecx
call sub_10015290
pop ecx
call eax
test eax eax
je r-xdata
mov [ rw-data ] 0x1
push r--data
push eax
call [ GetProcAddress@IAT ]
push eax
call sub_10015215
pop ecx
mov [ rw-data ] eax
cmp [ ebp - 0x4 ] 0x2
jne r-xdata
xor eax eax
inc eax
leave
retn
sub_100126de
push 0x10
push r--data
call sub_10010720
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
mov esi [ ebp + 0xc ]
cmp esi 0xffffffe0
jbe r-xdata
call sub_10010569
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10010569
mov [ eax ] 0xc
jmp r-xdata
call sub_10010765
retn
cmp esi edi
jne r-xdata
push 0x4
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10016619
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov edi eax
push esi
push ebx
push 0x10
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x1c ] eax
test eax eax
jne r-xdata
xor esi esi
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100127cd
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
cmp edi 0x4000
ja r-xdata
cmp esi edi
jne r-xdata
push esi
push ebx
push eax
call sub_10016b17
add esp 0xc
test eax eax
je r-xdata
call sub_10010569
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10010527
mov [ esi ] eax
pop ecx
cmp esi edi
ja r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push 0x10
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
jne r-xdata
xor esi esi
inc esi
mov [ ebp - 0x1c ] ebx
call sub_1001265f
test eax eax
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
sub_1001281e
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov eax [ ebp + 0x8 ]
xor ebx ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ ebp - 0xc ]
cmp [ esi + 0x8 ] ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ eax ]
movzx ecx cx
cmp cx bx
jne r-xdata
push [ ebp + 0xc ]
push eax
call sub_10019910
pop ecx
pop ecx
jmp r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx cl
test [ edx + esi + 0x1d ] 0x4
je r-xdata
movzx ecx cx
cmp [ ebp + 0xc ] ecx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
movzx edx cx
cmp [ ebp + 0xc ] edx
je r-xdata
inc eax
mov dl [ eax ]
cmp dl bl
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
inc eax
movzx ecx cx
movzx edx dl
shl ecx 0x8
or ecx edx
cmp [ ebp + 0xc ] ecx
jne r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
sub_10012907
mov edi edi
push ebp
mov ebp esp
sub esp 0x48
push ebx
xor ebx ebx
push edi
mov edi eax
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
jne r-xdata
mov eax [ edi + 0x14 ]
cdq
mov ecx eax
mov eax edx
mov [ ebp - 0x14 ] ecx
add ecx 0xffffffbb
mov [ ebp - 0x10 ] eax
adc eax 0xffffffff
push esi
cmp eax ebx
ja r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_10010569
or edx 0xffffffff
mov [ eax ] 0x16
mov eax edx
jb r-xdata
pop edi
pop ebx
leave
retn
mov eax [ edi + 0x10 ]
cmp eax ebx
jl r-xdata
cmp ecx 0x408
ja r-xdata
cdq
push 0xc
pop ecx
idiv ecx
mov ecx edx
cdq
add [ ebp - 0x14 ] eax
mov [ edi + 0x10 ] ecx
adc [ ebp - 0x10 ] edx
cmp ecx ebx
jge r-xdata
cmp eax 0xb
jle r-xdata
mov ecx [ ebp - 0x14 ]
mov eax [ ebp - 0x10 ]
add ecx 0xffffffbb
adc eax 0xffffffff
cmp eax ebx
ja r-xdata
add ecx 0xc
add [ ebp - 0x14 ] 0xffffffff
mov [ edi + 0x10 ] ecx
adc [ ebp - 0x10 ] 0xffffffff
mov esi [ edi + 0x10 ]
mov eax [ esi * 4 + rw-data ]
push ebx
push 0x4
push [ ebp - 0x10 ]
cdq
push [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
call sub_1001a710
or eax edx
mov ebx 0x190
jne r-xdata
jb r-xdata
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x10 ]
push 0x0
add eax 0x76c
push ebx
adc ecx 0x0
push ecx
push eax
call sub_1001a710
or eax edx
jne r-xdata
push 0x0
push 0x64
push [ ebp - 0x10 ]
push [ ebp - 0x14 ]
call sub_1001a710
or eax edx
jne r-xdata
cmp ecx 0x408
ja r-xdata
mov esi [ ebp - 0x14 ]
mov eax [ ebp - 0x10 ]
mov edx [ ebp - 0x10 ]
push 0x0
pop ecx
sub esi 0x1
sbb eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x14 ]
push ecx
add eax 0x12b
push ebx
adc edx ecx
push edx
push eax
mov [ ebp - 0x24 ] esi
call sub_10013030
mov ebx eax
mov eax edx
mov [ ebp - 0xc ] eax
mov eax [ edi + 0xc ]
cdq
push 0x0
push 0x64
push [ ebp - 0x20 ]
add ebx eax
mov eax [ ebp - 0xc ]
adc eax edx
push esi
mov [ ebp - 0xc ] eax
call sub_10013030
push 0x0
push 0x4
push [ ebp - 0x20 ]
sub ebx eax
mov eax [ ebp - 0xc ]
sbb eax edx
push esi
mov [ ebp - 0xc ] eax
call sub_10013030
push 0x0
push 0x16d
push [ ebp - 0x10 ]
add ebx eax
mov eax [ ebp - 0xc ]
push [ ebp - 0x14 ]
adc eax edx
mov [ ebp - 0xc ] eax
call sub_10012ff0
add ebx eax
mov eax [ ebp - 0xc ]
adc eax edx
add ebx [ ebp - 0x1c ]
push 0x0
adc eax [ ebp - 0x18 ]
pop esi
push esi
sub ebx 0x63df
push 0x18
sbb eax esi
push eax
push ebx
call sub_10012ff0
mov ecx eax
mov eax [ edi + 0x8 ]
mov ebx edx
cdq
push esi
add eax ecx
push 0x3c
adc edx ebx
push edx
push eax
call sub_10012ff0
mov ecx eax
mov eax [ edi + 0x4 ]
mov ebx edx
cdq
add eax ecx
adc edx ebx
push esi
push 0x3c
push edx
push eax
call sub_10012ff0
mov ecx eax
mov eax [ edi ]
mov ebx edx
cdq
add eax ecx
adc edx ebx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] edx
cmp [ ebp + 0x8 ] esi
je r-xdata
cmp esi 0x1
jle r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x48 ]
push eax
call sub_10019c28
call sub_1001a678
lea eax [ ebp - 0x8 ]
push eax
call sub_10019ea4
pop ecx
test eax eax
je r-xdata
add [ ebp - 0x1c ] 0x1
adc [ ebp - 0x18 ] 0x0
mov eax [ ebp - 0x14 ]
mov edx [ ebp - 0x10 ]
push 0x9
pop ecx
lea esi [ ebp - 0x48 ]
[ edi ] [ esi ]
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
call sub_10019edd
pop ecx
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
pop esi
mov eax [ ebp - 0x4 ]
cdq
add [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push eax
adc [ ebp - 0x10 ] edx
lea eax [ ebp - 0x48 ]
push eax
call sub_10012bce
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
mov eax [ edi + 0x20 ]
cmp eax esi
jg r-xdata
mov eax [ ebp - 0x8 ]
cdq
add [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push eax
adc [ ebp - 0x10 ] edx
lea eax [ ebp - 0x48 ]
push eax
call sub_10012bce
jmp r-xdata
jge r-xdata
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x28 ] esi
jle r-xdata
sub_10012bce
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x4 ] ebx
cmp esi ebx
jne r-xdata
push edi
push 0x24
push 0xff
push esi
call sub_100105c0
mov edi [ ebp + 0xc ]
add esp 0xc
cmp edi ebx
jne r-xdata
call sub_10010569
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
mov ecx [ edi ]
jg r-xdata
call sub_10010569
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
jmp r-xdata
pop esi
pop ebx
leave
retn
cmp eax 0x7
jl r-xdata
jl r-xdata
mov eax esi
jmp r-xdata
call sub_1001a678
lea eax [ ebp - 0x8 ]
push eax
call sub_10019e6b
pop ecx
test eax eax
je r-xdata
jg r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
cmp ecx ebx
jb r-xdata
pop edi
lea eax [ ebp - 0xc ]
push eax
call sub_10019ea4
pop ecx
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
cmp ecx 0x93406fff
jbe r-xdata
lea eax [ ebp - 0x4 ]
push eax
call sub_10019edd
pop ecx
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x4 ]
cmp ecx ebx
mov edi [ edi ]
jl r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
push eax
push esi
call sub_10019c28
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
jg r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
mov eax [ ebp - 0x4 ]
cdq
sub edi eax
lea eax [ ebp - 0x14 ]
push eax
sbb ecx edx
push esi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x10 ] ecx
call sub_10019c28
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
cmp edi 0x3f480
jbe r-xdata
mov eax [ esi ]
cdq
mov edi eax
mov eax [ ebp - 0x4 ]
mov ebx edx
cdq
sub edi eax
sbb ebx edx
push esi
call sub_1001a6c7
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
push 0x0
push 0x3c
push ebx
push edi
call sub_10013030
mov edi eax
mov eax [ esi + 0x4 ]
mov ebx edx
cdq
push 0x0
add edi eax
push 0x3c
adc ebx edx
push ebx
push edi
call sub_1001a710
mov [ esi + 0x4 ] eax
test eax eax
jge r-xdata
add eax 0x3c
add edi 0xffffffc4
mov [ esi ] eax
adc ebx 0xffffffff
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0x4 ]
add eax ecx
cdq
mov ecx eax
mov eax edx
mov [ ebp + 0x8 ] eax
mov eax [ esi ]
cdq
mov edi eax
sub edi ecx
mov ecx [ ebp + 0x8 ]
mov ebx edx
sbb ebx ecx
mov [ esi + 0x20 ] 0x1
jmp r-xdata
xor eax eax
push esi
call sub_1001a6c7
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x3c
push ebx
push edi
call sub_10013030
mov edi eax
mov eax [ esi + 0x8 ]
mov ebx edx
cdq
push 0x0
add edi eax
push 0x18
adc ebx edx
push ebx
push edi
call sub_1001a710
mov [ esi + 0x8 ] eax
test eax eax
jge r-xdata
add eax 0x3c
add edi 0xffffffc4
mov [ esi + 0x4 ] eax
adc ebx 0xffffffff
push 0x0
push 0x3c
push ebx
push edi
call sub_1001a710
mov [ esi ] eax
test eax eax
jge r-xdata
mov eax [ ebp - 0xc ]
cdq
sub [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push eax
sbb [ ebp - 0x10 ] edx
push esi
call sub_10019c28
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
push 0x0
push 0x18
push ebx
push edi
call sub_10013030
mov ecx eax
test edx edx
jl r-xdata
add eax 0x18
add edi 0xffffffe8
mov [ esi + 0x8 ] eax
adc ebx 0xffffffff
mov [ esi + 0x20 ] 0x1
jmp r-xdata
mov eax [ esi + 0x18 ]
lea eax [ ecx + eax + 0x7 ]
cdq
push 0x7
pop edi
idiv edi
add [ esi + 0xc ] ecx
mov eax [ esi + 0xc ]
mov [ esi + 0x18 ] edx
test eax eax
jg r-xdata
jg r-xdata
add [ esi + 0x1c ] ecx
add ecx 0x16d
add [ esi + 0x1c ] ecx
add eax 0x1f
dec [ esi + 0x14 ]
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] 0xb
jmp r-xdata
mov eax [ esi + 0x18 ]
add eax ecx
push 0x7
cdq
pop edi
idiv edi
add [ esi + 0xc ] ecx
mov [ esi + 0x18 ] edx
test ecx ecx
jbe r-xdata
test edx edx
jg r-xdata
jl r-xdata
test ecx ecx
jae r-xdata
sub_10012e90
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov edx eax
xor eax eax
and cl 0x1f
shl edx cl
retn
shld edx eax cl
shl eax cl
retn
sub_10012f40
cmp [ rw-data ] 0x0
je r-xdata
push ebp
mov ebp esp
sub esp 0x20
and esp 0xfffffff0
fld st0
fst [ esp + 0x18 ]
fistp [ esp + 0x10 ]
fild [ esp + 0x10 ]
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
push ebp
mov ebp esp
sub esp 0x8
and esp 0xfffffff8
fstp [ esp ]
cvttsd2si eax [ esp ]
leave
retn
mov edx [ esp + 0x14 ]
test edx 0x7fffffff
jne r-xdata
fsubp st1
test edx edx
jns r-xdata
fstp [ esp + 0x18 ]
fstp [ esp + 0x18 ]
fstp [ esp ]
mov ecx [ esp ]
add ecx 0x7fffffff
sbb eax 0x0
mov edx [ esp + 0x14 ]
sbb edx 0x0
jmp r-xdata
fstp [ esp ]
mov ecx [ esp ]
xor ecx 0x80000000
add ecx 0x7fffffff
adc eax 0x0
mov edx [ esp + 0x14 ]
adc edx 0x0
jmp r-xdata
leave
retn
sub_10012ff0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10013030
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_100130da
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
cmp esi ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
push edi
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp + 0x8 ]
movzx ax [ eax ]
inc [ ebp + 0x8 ]
movzx ecx ax
movzx eax cl
test [ eax + edi + 0x1d ] 0x4
je r-xdata
push esi
push [ ebp + 0x8 ]
call sub_100159d0
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ax [ esi ]
movzx eax ax
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
cmp al bl
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop esi
cmp ax cx
jne r-xdata
mov dl [ esi ]
cmp dl bl
jne r-xdata
shl ecx 0x8
movzx ax al
or cx ax
inc [ ebp + 0x8 ]
movzx ecx cx
xor ecx ecx
jmp r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sbb eax eax
and eax 0x2
dec eax
cmp cx bx
jne r-xdata
shl eax 0x8
movzx dx dl
or ax dx
movzx eax ax
inc esi
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10013218
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
sub_100132cd
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1001b51b
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1001b51b
pop ecx
sub_100133d3
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1001c132
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_10010569
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_10010569
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_1001bf7d
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_1001bdf4
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
cmp edi ebx
mov [ esi + 0x4 ] ecx
jle r-xdata
push [ ebp + 0xc ]
call sub_1001bf19
pop ecx
test eax eax
jne r-xdata
call sub_1001bf7d
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_1001bdf4
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1001bed0
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1001b5a8
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_10013546
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x328 ] 0x0
push ebx
push 0x4c
lea eax [ ebp - 0x324 ]
push 0x0
push eax
call sub_100105c0
lea eax [ ebp - 0x328 ]
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x2d4 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x20c ] ecx
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov [ ebp - 0x328 ] 0xc0000417
mov [ ebp - 0x324 ] 0x1
mov [ ebp - 0x31c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc0000417
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
test ebx ebx
jne r-xdata
push 0x2
call sub_1001b51b
pop ecx
sub_1001366e
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_10015290
pop ecx
test eax eax
je r-xdata
push 0x2
call sub_1001b51b
pop ecx
pop ebp
jmp sub_10013546
pop ebp
jmp eax
sub_10013694
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_100133d3
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_100136c7
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ebp + 0x8 ]
dec [ ebp + 0xc ]
call sub_10013694
cmp [ esi ] 0xffffffff
je r-xdata
pop esi
pop ebp
retn
sub_100136ed
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov al [ ebx ]
dec [ ebp + 0x8 ]
mov ecx edi
call sub_10013694
inc ebx
cmp [ esi ] 0xffffffff
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_10010569
cmp [ eax ] 0x2a
jne r-xdata
mov ecx edi
mov al 0x3f
call sub_10013694
sub_1001373a
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x224 ] edi
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x238 ] eax
call sub_10012369
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_10010569
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_1001c132
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x220 ] ecx
mov [ ebp - 0x244 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
cmp [ ebp - 0x228 ] 0x0
mov [ ebp - 0x23c ] ebx
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x228 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov al dl
sub al 0x20
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor esi esi
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
xor esi esi
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x23c ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x26c ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x26c ]
mov edi [ ebp - 0x224 ]
mov dl al
jmp r-xdata
sub_10014eb0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10014f38 ]
jmp [ ecx * 4 + jump_table_10014fb8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10015024 ]
pop esi
pop edi
pop ebp
jmp sub_1001c3d5
jmp [ ecx * 4 + jump_table_100151c0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100150c4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100151c0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10015024 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100151c0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10015024 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10015024 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10015024 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100151c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100151c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100151c0 ]
sub_10015215
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10010083
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_10015290
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10010083
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_1001530b
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call sub_10015290
pop ecx
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1001533f
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_10015290
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_100164b5
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1001537c
push 0xc
push r--data
call sub_10010720
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
push esi
call sub_10010083
pop ecx
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015451
push 0xc
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_10019683
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001545a
call sub_10010765
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_10015463
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1001530b
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10015865
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10015290
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_1000fb05
pop ecx
xor esi esi
push 0x0
push esi
call sub_1001537c
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_100154f6
push 0x8
push r--data
call sub_10010720
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10010765
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000fb05
pop ecx
push 0xd
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015610
push 0xc
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001561c
push esi
call sub_1000fb05
pop ecx
push edi
call sub_10019712
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000fb05
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1001953a
pop ecx
sub_10015625
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_10015290
pop ecx
call eax
push [ ebp + 0x8 ]
call sub_100154f6
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_10015693
mov edi edi
push esi
push edi
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov edi eax
test edi edi
je r-xdata
push esi
call sub_10010083
pop ecx
call sub_1001533f
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_10015302
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10010348
push [ rw-data ]
call sub_10015215
push [ rw-data ]
mov [ rw-data ] eax
call sub_10015215
push [ rw-data ]
mov [ rw-data ] eax
call sub_10015215
push [ rw-data ]
mov [ rw-data ] eax
call sub_10015215
add esp 0x10
mov [ rw-data ] eax
call sub_1001646a
test eax eax
je r-xdata
test eax eax
jne r-xdata
push sub_100154f6
push [ rw-data ]
call sub_10015290
pop ecx
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10015865
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10015290
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1001537c
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
retn
sub_10015820
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000fa3b
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10015865
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b3fd
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_100158b1
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010929
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_100158ff
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001c4b8
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10015951
push 0xc
push r--data
call sub_10010720
push 0xe
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100159b8
call sub_10010765
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000fb05
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000fb05
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_100159d0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10015a58
push 0x54
push r--data
call sub_10010720
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x40
push 0x20
pop esi
push esi
call sub_10015865
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x800 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
mov [ eax + 0x38 ] edi
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov ecx [ rw-data ]
add ecx 0x800
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov esi 0x800
cmp edi esi
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
mov [ ebp - 0x20 ] 0x1
jmp r-xdata
mov edi esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x40
push 0x20
call sub_10015865
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_10010765
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x800 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1001844c
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov edx [ ecx ]
add edx esi
inc [ ebp - 0x20 ]
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1001844c
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_10015cac
mov edi edi
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_1000fb05
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x40
add eax 0x800
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_10015cfa
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1001951c
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10015865
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10010400
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10010400
mov ebx eax
inc ebx
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_1000fb05
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10015865
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000fb05
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_10010396
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebx
add edi 0x4
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10013546
add esp 0x14
sub_10015dd8
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_10012647
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_10012647
pop ecx
test eax eax
je r-xdata
call sub_10012647
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_10015f72
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1001951c
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10015dd8
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10015820
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10015dd8
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1001602d
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
sub esp 0xc
push ebx
push esi
mov esi [ GetEnvironmentStringsW@IAT ]
push edi
xor ebx ebx
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call esi
mov edi eax
cmp edi ebx
je r-xdata
cmp eax 0x2
je r-xdata
cmp edi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax edi
cmp [ edi ] bx
je r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax edi
push ebx
sar eax 0x1
inc eax
push eax
push edi
push ebx
push ebx
mov [ ebp - 0xc ] eax
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax esi
inc eax
push eax
mov [ ebp - 0x8 ] eax
call sub_10015820
mov edi eax
pop ecx
cmp edi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push eax
call sub_10015820
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push [ ebp - 0x8 ]
push esi
push edi
call sub_10014eb0
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push edi
push ebx
push ebx
call esi
test eax eax
jne r-xdata
mov ebx [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1000fb05
pop ecx
mov [ ebp - 0x4 ] ebx
sub_10016164
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1001618a
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100161b0
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ rw-data ] eax
pop ebp
retn
pop ebp
retn
sub_100161e0
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov edi [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call edi
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push 0x0
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push 0x0
push [ rw-data ]
call edi
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop esi
sub_10016254
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_10015463
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ eax + 0x8 ]
mov [ ebp - 0x4 ] ebx
test ebx ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_100163b4
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_10016254
pop ecx
pop ecx
pop ebp
retn
sub_100163d4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1001646a
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_1001844c
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_100164b5
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000fb05
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10016523
push 0xc
push r--data
call sub_10010720
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_10017288
push 0x1e
call sub_100170dd
push 0xff
call sub_10010107
push 0x18
call sub_10015820
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_10010569
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10010765
retn
push edi
call sub_1000fb05
pop ecx
push 0xfa0
push edi
call sub_1001844c
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000fb05
pop ecx
call sub_10010569
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100165dd
mov eax [ ebp - 0x1c ]
sub_100165e6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10016523
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_100100b3
pop ecx
sub_10016619
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ ebp + 0x8 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
pop ebp
retn
add eax 0x14
sub_10016649
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
mov [ ebp - 0x4 ] ecx
test cl 0x1
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
mov [ ebp + 0xc ] ebx
test dl 0x1
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
mov ebx 0x80000000
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
mov [ ebp - 0x4 ] ecx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
cmp edx 0x20
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
mov esi 0x80000000
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_100184b0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_1001695f
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ esi + 0x10 ] eax
cmp eax edi
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
mov [ esi + 0xc ] eax
cmp eax edi
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10016a0f
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
mov [ ebp - 0x4 ] edx
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_10016b17
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
mov [ ebp - 0x8 ] ecx
cmp ecx 0x3f
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
cmp esi 0x20
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
mov ebx 0x80000000
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx 0x80000000
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
cmp edi 0x20
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_10016df8
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx eax
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
mov [ ebp - 0x4 ] edx
cmp edx 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10016a0f
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
test ecx ecx
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_1001695f
mov ebx eax
mov [ ebp + 0x8 ] ebx
test ebx ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_100170dd
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor esi esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jae r-xdata
inc edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x3
call sub_1001c69c
pop ecx
cmp eax 0x1
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x3
call sub_1001c69c
pop ecx
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_10010400
pop ecx
push eax
push [ esi ]
push ebx
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov edi rw-data
push edi
call sub_10010396
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
push esi
call sub_10010400
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_10010396
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_10010400
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_10013218
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10013546
add esp 0x14
mov eax [ ebp - 0x4 ]
push [ eax * 8 + rw-data ]
push ebx
push edi
call sub_1001063a
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push edi
call sub_1001c533
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
push r--data
push ebx
push edi
call sub_1001063a
add esp 0xc
test eax eax
je r-xdata
sub_10017288
push 0x3
call sub_1001c69c
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100170dd
push 0xff
call sub_100170dd
pop ecx
pop ecx
push 0x3
call sub_1001c69c
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100172d0
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_10015290
pop ecx
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_100172f8
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
call sub_1001c6e7
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10017321
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1001c797
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_10017348
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_100159d0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_100173a7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434f4d
je r-xdata
call sub_100154dc
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe06d7363
jne r-xdata
xor eax eax
pop ebp
retn
call sub_100154dc
add eax 0x90
dec [ eax ]
call sub_100154dc
and [ eax + 0x90 ] 0x0
jmp sub_10017fb1
sub_100173f0
push 0x10
push r--data
call sub_10010720
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100174b6
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_100154dc
add eax 0x90
inc [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_10010765
retn
call sub_10017ffd
call sub_10017ffd
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
shl eax 0x3
mov ecx [ edi + 0x8 ]
add ecx eax
mov esi [ ecx ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax + 0x4 ]
call sub_10018050
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_100174d1
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_100154dc
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_10017516
push 0x8
push r--data
call sub_10010720
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_10010765
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1000fbc5
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001756b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_10017594
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_10017ffd
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_10017348
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_10017658
push 0x2c
push r--data
call sub_10010720
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_1000fe74
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_100154dc
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_100154dc
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_100154dc
mov [ eax + 0x88 ] esi
call sub_100154dc
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_1000ff19
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001777e
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_100176f1
mov esp [ ebp - 0x18 ]
call sub_100154dc
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_100173f0
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001777e
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
imul eax eax 0x14
add eax ebx
mov edx [ eax + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_1001777e
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1000fec7
pop ecx
call sub_100154dc
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_100154dc
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_1000fea0
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_10017516
pop ecx
pop ecx
sub_100177f4
push 0xc
push r--data
call sub_10010720
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10017ffd
push ebx
push esi
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001c7db
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_100184b0
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_1001c7db
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_1001756b
pop ecx
pop ecx
push eax
push esi
call sub_100184b0
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_10010765
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_1001756b
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_10017973
push 0x8
push r--data
call sub_10010720
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001756b
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1000fbc5
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_100177f4
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010765
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001756b
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1000fbc5
jmp r-xdata
sub_10017a05
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10017973
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_1000fb93
call sub_1000fbcc
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_100173f0
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_10017658
add esp 0x28
test eax eax
je r-xdata
sub_10017a73
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_100154dc
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_100154dc
lea edi [ eax + 0x80 ]
call sub_10015287
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_1000fdff
mov edi eax
mov eax [ ebp - 0x4 ]
add esp 0x14
cmp eax [ ebp - 0x8 ]
jae r-xdata
call sub_10017ffd
cmp [ esi ] 0xe0434f4d
je r-xdata
pop edi
push ebx
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000fc89
add esp 0x1c
test eax eax
jne r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add edi 0x14
cmp eax [ ebp - 0x8 ]
jb r-xdata
cmp esi [ edi + 0x4 ]
jg r-xdata
cmp esi [ edi ]
jl r-xdata
pop ebx
mov eax [ edi + 0xc ]
mov ecx [ edi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
lea ebx [ eax - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10017a05
mov esi [ ebp + 0x1c ]
add esp 0x1c
sub_10017b67
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
cmp eax 0x80
push esi
push edi
mov [ ebp - 0x1 ] 0x0
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_10017ffd
cmp ecx eax
jl r-xdata
cmp ecx 0xffffffff
mov [ ebp - 0x8 ] ecx
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_100154dc
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10017ffd
call sub_10017fb1
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10017a73
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_100154dc
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_100154dc
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_100154dc
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_1001c7db
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_1000fdff
add esp 0x14
mov edi eax
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_10017ffd
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_10017516
pop ecx
pop ecx
mov edi [ ebp + 0x18 ]
mov eax [ ebp - 0x8 ]
cmp [ edi ] eax
jg r-xdata
call sub_100154dc
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
add edi 0x14
jmp r-xdata
cmp eax [ edi + 0x4 ]
jg r-xdata
call sub_100154dc
mov edi [ eax + 0x94 ]
call sub_100154dc
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_10017594
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov eax [ ebp - 0x10 ]
cmp eax [ ebp - 0x1c ]
jae r-xdata
mov eax [ edi + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0xc ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_10017594
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_1000f77e
test al al
jne r-xdata
call sub_10017ffd
cmp eax 0x19930522
jne r-xdata
call sub_100154dc
call sub_100154dc
call sub_100154dc
mov [ eax + 0x88 ] esi
call sub_100154dc
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x20 ] eax
call sub_10017348
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_10017516
pop ecx
pop ecx
push r--data
lea ecx [ ebp - 0x2c ]
call sub_100172f8
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_10010b44
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov ebx [ ebp - 0xc ]
push [ ebp + 0x20 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp - 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_10017a05
mov esi [ ebp + 0x8 ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1000fbcc
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_100173f0
add esp 0x10
push [ esi + 0x1c ]
call sub_1001760f
sub_10017ecb
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_100154dc
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_10017b67
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_100173f0
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10017ffd
push 0x8
push r--data
call sub_10010720
push [ rw-data ]
call sub_10015290
pop ecx
test eax eax
je r-xdata
call sub_10017fb1
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10018050
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1001c8fc
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1001c8fc
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001809c
mov edi edi
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_10015215
add edi 0x4
pop ecx
mov [ esi ] eax
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_100180c0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10018100
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
jbe r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10018150
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10010780
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __pe_dll_export_address_table
call sub_100180c0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __pe_dll_export_address_table
push eax
push __pe_dll_export_address_table
call sub_10018100
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1001822b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_1001826f
push 0x20
push r--data
call sub_10010720
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_10015463
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10010765
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1001822b
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_10010323
mov [ ebp - 0x1c ] 0x1
push eax
call sub_10015290
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10010569
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001366e
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_100165e6
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_10015287
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100183e3
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_1001844c
push 0x10
push r--data
call sub_10010720
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_100184b0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10018538 ]
jmp [ ecx * 4 + jump_table_100185b8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018624 ]
pop esi
pop edi
pop ebp
jmp sub_1001c3d5
jmp [ ecx * 4 + jump_table_100187c0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100186c4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100187c0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018624 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100187c0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018624 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018624 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018624 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100187c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100187c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100187c0 ]
sub_10018815
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1001886c
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_1001886c
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_10018815
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1001894b
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_100188fb
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_100189ba
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_10010569
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ ebp + 0xc ] ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ ebp + 0x10 ]
cmp edi ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x14 ]
call sub_10012369
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
mov [ esi ] bl
call sub_10010569
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov edx [ ebp + 0xc ]
mov eax esi
jne r-xdata
push [ ebp + 0x14 ]
push edi
push [ ebp + 0xc ]
push esi
call sub_10013218
add esp 0x10
jmp r-xdata
mov eax esi
jmp r-xdata
mov cl [ edi ]
mov [ eax ] cl
inc eax
inc edi
cmp cl bl
je r-xdata
mov cl [ edi ]
mov [ eax ] cl
inc eax
inc edi
cmp cl bl
je r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
pop edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edx
je r-xdata
cmp edx ebx
jne r-xdata
dec edx
jne r-xdata
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov [ eax ] bl
inc eax
dec [ ebp + 0x14 ]
jne r-xdata
mov ecx eax
sub ecx esi
cmp ecx 0x2
jl r-xdata
cmp [ edi ] bl
je r-xdata
jmp r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
lea edi [ eax - 0x2 ]
mov [ ebp + 0x14 ] edi
cmp edi esi
jb r-xdata
lea edi [ eax - 0x1 ]
mov [ ebp - 0x4 ] edi
cmp edi esi
jb r-xdata
cmp [ ebp + 0x14 ] 0x1
jne r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov eax edi
sub eax [ ebp + 0x14 ]
test al 0x1
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp + 0x14 ]
movzx eax [ eax ]
push eax
call sub_1001262e
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax edi
sub eax [ ebp - 0x4 ]
test al 0x1
jne r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp - 0x4 ]
movzx eax [ eax ]
push eax
call sub_1001262e
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
mov [ edi ] bl
call sub_10010569
mov ecx eax
push 0x2a
pop eax
mov [ ecx ] eax
dec [ ebp + 0x14 ]
cmp [ ebp + 0x14 ] esi
jae r-xdata
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jae r-xdata
mov [ esi ] bl
call sub_10010569
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x8 ] bl
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1
jbe r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov [ esi + eax - 0x1 ] bl
lea edi [ esi + eax - 0x2 ]
mov [ ebp + 0x14 ] edi
cmp edi esi
jb r-xdata
push 0x50
pop eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx edi
sub ecx [ ebp + 0x14 ]
test cl 0x1
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp + 0x14 ]
movzx eax [ eax ]
push eax
call sub_1001262e
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ edi ] bl
jmp r-xdata
mov eax [ ebp + 0xc ]
dec [ ebp + 0x14 ]
cmp [ ebp + 0x14 ] esi
jae r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
sub_10018bcc
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10018c5c
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1001c905
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1001c924
jmp r-xdata
sub_10018c5c
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000f298
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10018bcc
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10018cbe
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10018cee
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10018d1f
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_10018262
test eax eax
je r-xdata
push 0xa
call sub_100170dd
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1001826f
pop ecx
push 0x3
call sub_10010323
int3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov esi [ ebp + 0x4 ]
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x328 ]
push 0x0
push eax
call sub_100105c0
lea eax [ ebp - 0x328 ]
add esp 0xc
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
push 0x0
mov [ ebp - 0x328 ] 0x40000015
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2d4 ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_10018e36
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_10018e57
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10018e86
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_100105c0
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_10018eea
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_1001d0a4
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_1001cea5
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_1001cea5
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_100105c0
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1001907d
push 0xc
push r--data
call sub_10010720
call sub_100154dc
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019118
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10010765
retn
push 0x20
call sub_100100b3
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_1000fb05
pop ecx
sub_10019121
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001919d
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_10019121
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_10018e86
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_100105c0
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_10018e57
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_10018eea
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_100105c0
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_10018e57
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10019382
push 0x14
push r--data
call sub_10010720
or [ ebp - 0x20 ] 0xffffffff
call sub_100154dc
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1001907d
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_10019121
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10015820
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10010765
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1001919d
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_10010569
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000fb05
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000fb05
pop ecx
push 0xd
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100194e3
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000fb05
pop ecx
sub_1001953a
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000fb05
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000fb05
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000fb05
push [ esi + 0xc0 ]
call sub_1000fb05
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1001d0e6
push [ edi ]
call sub_1000fb05
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000fb05
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000fb05
pop ecx
push [ esi + 0xb0 ]
call sub_1000fb05
push [ esi + 0xbc ]
call sub_1000fb05
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000fb05
push [ esi + 0xbc ]
call sub_1001d2c0
pop ecx
pop ecx
push eax
call sub_1000fb05
pop ecx
push eax
call sub_1000fb05
push [ esi + 0xbc ]
call sub_1001d27b
pop ecx
pop ecx
sub_10019683
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_10019712
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_100197ab
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_10019683
pop ecx
test esi esi
je r-xdata
push esi
call sub_10019712
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1001953a
pop ecx
sub_100197e9
push 0xc
push r--data
call sub_10010720
call sub_100154dc
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_100197ab
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019853
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_100154dc
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10010765
retn
push 0x20
call sub_100100b3
pop ecx
sub_10019860
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jb r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100198b0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10019910
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_100199ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_10012369
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_10010569
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_1001d3c0
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
mov eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_10010569
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_10019bfd
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_100199ce
add esp 0x14
pop ebp
retn
sub_10019c28
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp esi edi
jne r-xdata
push 0x24
push 0xff
push esi
call sub_100105c0
mov eax [ ebp + 0xc ]
add esp 0xc
cmp eax edi
je r-xdata
call sub_10010569
push 0x16
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1001366e
add esp 0x14
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
cmp eax 0xffffffff
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] eax
jg r-xdata
pop edi
pop esi
leave
retn
cmp eax 0x7
jl r-xdata
jl r-xdata
push ebx
push edi
push 0x1e13380
push eax
push ecx
call sub_10013030
mov ecx eax
add ecx 0x46
lea eax [ ecx + 0x12b ]
cdq
mov ebx 0x190
idiv ebx
lea edi [ ecx - 0x1 ]
push 0x64
mov [ ebp - 0x8 ] edi
mov [ ebp + 0x8 ] ecx
mov ebx eax
mov eax edi
cdq
pop edi
idiv edi
push 0xffffffff
push 0xfffffe93
sub ebx eax
mov eax [ ebp - 0x8 ]
cdq
and edx 0x3
add eax edx
sar eax 0x2
lea eax [ ebx + eax - 0x11 ]
cdq
mov edi eax
lea eax [ ecx - 0x46 ]
mov ebx edx
cdq
push edx
push eax
call sub_10012ff0
sub eax edi
sbb edx ebx
push 0x0
mov ebx 0x15180
push ebx
push edx
push eax
call sub_10012ff0
mov edi [ ebp - 0x10 ]
add edi eax
adc [ ebp - 0xc ] edx
cmp [ ebp - 0xc ] 0x0
jg r-xdata
jg r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
jmp r-xdata
cmp ecx 0xffff5740
jae r-xdata
mov eax [ ebp + 0x8 ]
mov ecx eax
and ecx 0x80000003
jns r-xdata
jl r-xdata
cmp ecx 0x934126cf
ja r-xdata
mov eax esi
jmp r-xdata
jne r-xdata
dec ecx
or ecx 0xfffffffc
inc ecx
mov eax [ ebp - 0x8 ]
add edi 0x1e13380
adc [ ebp - 0xc ] 0x0
mov ecx eax
and ecx 0x80000003
mov [ ebp + 0x8 ] eax
jns r-xdata
test edi edi
jae r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x76c
cdq
mov ecx 0x190
idiv ecx
test edx edx
jne r-xdata
push 0x64
cdq
pop ecx
idiv ecx
test edx edx
jne r-xdata
jne r-xdata
dec ecx
or ecx 0xfffffffc
inc ecx
mov eax [ ebp + 0x8 ]
push 0x0
push ebx
push [ ebp - 0xc ]
mov [ esi + 0x14 ] eax
push edi
call sub_10013030
push 0xffffffff
mov [ esi + 0x1c ] eax
cdq
push 0xfffeae80
push edx
push eax
call sub_10012ff0
add edi eax
adc [ ebp - 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
mov edx rw-data
jne r-xdata
mov [ ebp - 0x4 ] 0x1
add eax 0x76c
cdq
mov ecx 0x190
idiv ecx
test edx edx
jne r-xdata
push 0x64
cdq
pop ecx
idiv ecx
test edx edx
jne r-xdata
mov eax [ esi + 0x1c ]
xor ecx ecx
inc ecx
cmp [ edx + 0x4 ] eax
jge r-xdata
mov edx rw-data
add edi ebx
adc [ ebp - 0xc ] 0x0
jmp r-xdata
mov eax [ ebp + 0x8 ]
dec ecx
mov [ esi + 0x10 ] ecx
sub eax [ edx + ecx * 4 ]
push 0x0
mov [ esi + 0xc ] eax
mov eax [ ebp + 0xc ]
push ebx
push [ eax + 0x4 ]
push [ eax ]
call sub_10013030
push 0x7
add eax 0x4
pop ecx
cdq
idiv ecx
xor ebx ebx
push ebx
push 0xe10
push [ ebp - 0xc ]
push edi
mov [ esi + 0x18 ] edx
call sub_10013030
push 0xffffffff
mov [ esi + 0x8 ] eax
cdq
push 0xfffff1f0
push edx
push eax
call sub_10012ff0
push ebx
add edi eax
adc [ ebp - 0xc ] edx
push 0x3c
push [ ebp - 0xc ]
push edi
call sub_10013030
mov [ esi + 0x4 ] eax
imul eax eax 0x3c
sub edi eax
mov [ esi + 0x20 ] ebx
mov [ esi ] edi
xor eax eax
pop ebx
mov ebx eax
inc ecx
cmp [ edx + ecx * 4 ] ebx
jl r-xdata
mov ebx 0x15180
sub_10019e6b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10019ea4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10019edd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10019f63
push 0x2c
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x20 ] ebx
push 0x7
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] ebx
call sub_10019f28
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x1c ]
push eax
call sub_10019edd
pop ecx
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_10019e6b
pop ecx
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
lea eax [ ebp - 0x28 ]
push eax
call sub_10019ea4
pop ecx
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
call sub_1001d34e
mov [ ebp - 0x34 ] eax
mov [ rw-data ] ebx
or edi 0xffffffff
mov [ rw-data ] edi
mov [ rw-data ] edi
push r--data
call sub_1001d478
pop ecx
mov esi eax
mov [ ebp - 0x3c ] esi
cmp esi ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ esi ] bl
je r-xdata
push rw-data
call [ GetTimeZoneInformation@IAT ]
cmp eax edi
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov [ rw-data ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x2c ] 0x1
xor ecx ecx
inc ecx
mov [ rw-data ] ecx
mov eax [ rw-data ]
imul eax eax 0x3c
mov [ ebp - 0x1c ] eax
cmp [ rw-data ] bx
je r-xdata
push esi
call sub_10010400
inc eax
push eax
call sub_10015820
pop ecx
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push eax
push esi
call sub_100159d0
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10010765
retn
push 0x3
push esi
push 0x40
mov edi [ ebp - 0x20 ]
push [ edi ]
call sub_10013218
add esp 0x10
test eax eax
je r-xdata
cmp [ rw-data ] bx
je r-xdata
mov edx [ rw-data ]
imul edx edx 0x3c
add eax edx
mov [ ebp - 0x1c ] eax
push esi
push esi
call sub_10010400
pop ecx
inc eax
push eax
push [ rw-data ]
call sub_10010396
add esp 0xc
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
add esi 0x3
cmp [ esi ] 0x2d
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push [ ebp - 0x1c ]
call sub_10019f50
push [ ebp - 0x24 ]
call sub_10019f2e
push [ ebp - 0x28 ]
call sub_10019f3f
add esp 0xc
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a20f
cmp [ ebp - 0x2c ] ebx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
jmp r-xdata
push eax
call sub_1000fb05
pop ecx
push esi
call sub_100128f1
pop ecx
imul eax eax 0xe10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x38 ] 0x1
inc esi
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
mov [ eax ] bl
cmp [ ebp - 0x30 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ecx
sub eax [ rw-data ]
imul eax eax 0x3c
mov [ ebp - 0x28 ] eax
jmp r-xdata
inc esi
jmp r-xdata
cmp al 0x30
jl r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax + 0x4 ]
mov [ eax ] bl
cmp [ ebp - 0x30 ] ebx
jne r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
mov [ eax + 0x3f ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push ebx
push 0x3f
mov eax [ ebp - 0x20 ]
push [ eax ]
push edi
push rw-data
push ebx
push [ ebp - 0x34 ]
mov edi [ WideCharToMultiByte@IAT ]
call edi
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x2b
je r-xdata
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax + 0x4 ]
mov [ eax + 0x3f ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push ebx
push 0x3f
mov eax [ ebp - 0x20 ]
push [ eax + 0x4 ]
push 0xffffffff
push rw-data
push ebx
push [ ebp - 0x34 ]
call edi
test eax eax
je r-xdata
cmp [ ebp - 0x38 ] ebx
je r-xdata
inc esi
push esi
call sub_100128f1
pop ecx
imul eax eax 0x3c
add [ ebp - 0x1c ] eax
jmp r-xdata
movsx eax [ esi ]
mov [ ebp - 0x24 ] eax
cmp eax ebx
je r-xdata
neg [ ebp - 0x1c ]
mov al [ esi ]
cmp al 0x30
jge r-xdata
mov eax [ edi + 0x4 ]
mov [ eax ] bl
push 0x3
push esi
push 0x40
push [ edi + 0x4 ]
call sub_10013218
add esp 0x10
test eax eax
je r-xdata
cmp al 0x39
jg r-xdata
cmp [ esi ] 0x3a
jne r-xdata
mov esi [ ebp - 0x1c ]
call sub_10019f22
mov [ eax ] esi
mov esi [ ebp - 0x24 ]
call sub_10019f16
mov [ eax ] esi
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
jmp r-xdata
inc esi
inc esi
push esi
call sub_100128f1
pop ecx
add [ ebp - 0x1c ] eax
jmp r-xdata
mov al [ esi ]
cmp al 0x30
jge r-xdata
cmp al 0x39
jg r-xdata
inc esi
sub_1001a2a9
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x1
push ebx
push esi
push edi
mov edi [ ebp + 0x10 ]
mov esi eax
mov eax edi
jne r-xdata
and eax 0x80000003
jns r-xdata
and eax 0x80000003
jns r-xdata
jne r-xdata
dec eax
or eax 0xfffffffc
inc eax
mov [ ebp - 0xc ] eax
jne r-xdata
dec eax
or eax 0xfffffffc
inc eax
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
mov esi [ esi * 4 + rw-data ]
mov esi [ esi * 4 + rw-data ]
jmp r-xdata
mov eax esi
shl eax 0x2
mov esi [ eax + rw-data ]
mov eax esi
shl eax 0x2
mov esi [ eax + rw-data ]
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
mov [ rw-data ] esi
mov [ rw-data ] ecx
call sub_10019ea4
pop ecx
test eax eax
je r-xdata
mov [ rw-data ] esi
mov [ rw-data ] ecx
mov [ rw-data ] edi
jmp r-xdata
add esi [ ebp + 0x1c ]
add esi eax
lea esi [ esi + eax - 0x7 ]
jmp r-xdata
mov [ ebp + 0xc ] eax
lea eax [ edi + 0x12b ]
cdq
lea ebx [ edi - 0x1 ]
mov edi 0x190
idiv edi
push 0x64
pop edi
inc esi
push 0x7
mov [ ebp - 0x8 ] eax
mov eax ebx
cdq
idiv edi
mov edx [ ebp - 0x8 ]
mov edi [ ebp + 0x10 ]
sub edx eax
mov ebx edx
lea eax [ edi - 0x1 ]
cdq
and edx 0x3
add eax edx
sar eax 0x2
mov edx edi
imul edx edx 0x16d
add eax esi
add eax ebx
lea eax [ edx + eax - 0x63db ]
cdq
pop ebx
idiv ebx
mov eax [ ebp + 0x14 ]
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x18 ]
cmp edx [ ebp + 0x18 ]
jg r-xdata
mov eax [ ebp - 0x4 ]
imul eax eax 0x3e8
add [ rw-data ] eax
jns r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10013546
add esp 0x14
pop edi
pop esi
pop ebx
leave
retn
imul ecx ecx 0x3c
add ecx [ ebp + 0x20 ]
imul ecx ecx 0x3c
add ecx [ ebp + 0x24 ]
imul ecx ecx 0x3e8
add ecx [ ebp + 0x28 ]
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x14 ] 0x5
jne r-xdata
mov eax 0x5265c00
cmp [ rw-data ] eax
jl r-xdata
add [ rw-data ] 0x5265c00
dec [ rw-data ]
jmp r-xdata
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
mov [ rw-data ] edi
sub [ rw-data ] eax
inc [ rw-data ]
mov eax [ ebp + 0xc ]
mov eax [ eax + rw-data ]
mov eax [ ebp + 0xc ]
mov eax [ eax + rw-data ]
jmp r-xdata
sub esi 0x7
jmp r-xdata
cmp esi eax
jle r-xdata
sub_1001a4a0
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
lea eax [ ebp - 0x4 ]
xor esi esi
push eax
mov [ ebp - 0x4 ] esi
call sub_10019e6b
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] esi
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
mov edx [ edi + 0x14 ]
push ebx
xor ebx ebx
inc ebx
cmp edx [ rw-data ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
je r-xdata
cmp edx [ rw-data ]
je r-xdata
pop esi
leave
retn
cmp edx 0x6b
push 0x3
pop eax
push 0x2
pop ecx
mov [ ebp - 0xc ] 0xb
mov [ ebp - 0x8 ] ebx
jge r-xdata
movzx eax [ rw-data ]
movzx ecx [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
cmp [ rw-data ] si
jne r-xdata
mov ecx [ rw-data ]
mov eax [ rw-data ]
cmp ecx eax
mov edx [ edi + 0x1c ]
jge r-xdata
push esi
push esi
push esi
push esi
push esi
push ecx
push edx
push ebx
push ebx
push 0x2
pop ecx
call sub_1001a2a9
mov eax [ ebp - 0xc ]
push esi
push esi
push esi
push esi
push esi
push [ ebp - 0x8 ]
push [ edi + 0x14 ]
push ebx
push esi
push 0x2
pop ecx
call sub_1001a2a9
add esp 0x48
push 0x4
pop eax
mov ecx ebx
mov [ ebp - 0xc ] 0xa
mov [ ebp - 0x8 ] 0x5
movzx eax [ rw-data ]
push eax
push esi
push esi
push edx
push esi
movzx eax [ rw-data ]
push esi
push eax
movzx eax [ rw-data ]
push eax
push edx
push ebx
jmp r-xdata
cmp edx eax
jl r-xdata
cmp edx ecx
jl r-xdata
movzx eax [ rw-data ]
push eax
push esi
push esi
push [ edi + 0x14 ]
push esi
movzx eax [ rw-data ]
push esi
push eax
movzx eax [ rw-data ]
push eax
push [ edi + 0x14 ]
push ebx
jmp r-xdata
movzx eax [ rw-data ]
push ebx
call sub_1001a2a9
movzx eax [ rw-data ]
movzx ecx [ rw-data ]
add esp 0x24
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
cmp [ rw-data ] si
jne r-xdata
mov eax ebx
cmp edx ecx
jg r-xdata
xor eax eax
jmp r-xdata
cmp edx eax
jg r-xdata
movzx eax [ rw-data ]
push esi
call sub_1001a2a9
add esp 0x24
jmp r-xdata
cmp edx eax
jle r-xdata
pop ebx
cmp edx ecx
jle r-xdata
mov eax [ edi + 0x8 ]
imul eax eax 0x3c
add eax [ edi + 0x4 ]
imul eax eax 0x3c
add eax [ edi ]
imul eax eax 0x3e8
cmp edx ecx
jne r-xdata
cmp edx ecx
jge r-xdata
cmp edx eax
jge r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setl cl
xor ecx ecx
cmp eax [ rw-data ]
setge cl
jmp r-xdata
mov eax ecx
jmp r-xdata
sub_1001a678
push 0x8
push r--data
call sub_10010720
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
call sub_10010765
retn
push 0x6
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] esi
cmp [ rw-data ] esi
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a6be
call sub_10019f63
inc [ rw-data ]
sub_1001a6c7
push 0xc
push r--data
call sub_10010720
push 0x6
call sub_100165e6
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
call sub_1001a4a0
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a6ff
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_1001a710
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1001a7c2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_1001d614
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_1001c981
test eax eax
movsx eax [ esi ]
push eax
call sub_1001d614
pop ecx
cmp eax 0x78
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
inc esi
inc esi
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
pop esi
cmp [ ebp - 0x4 ] cl
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001a835
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov esi [ ebp - 0x10 ]
test cl cl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
mov [ eax ] cl
test cl cl
jne r-xdata
dec eax
sub_1001a8b7
mov edi edi
push ebp
mov ebp esp
fldz
mov eax [ ebp + 0x8 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
pop ebp
retn
xor eax eax
inc eax
pop ebp
retn
sub_1001a8d3
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1001d6e8
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_1001d640
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_1001a92f
mov edi edi
push esi
mov esi eax
test edi edi
je r-xdata
pop esi
retn
push esi
call sub_10010400
inc eax
push eax
push esi
add esi edi
push esi
call sub_100184b0
add esp 0x10
sub_1001a974
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_10012369
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebp + 0x8 ] esi
jbe r-xdata
call sub_10010569
push 0x16
cmp [ ebp + 0xc ] esi
jle r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x18 ] 0x0
je r-xdata
call sub_10010569
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] esi
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_1001a92f
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
lea eax [ esi + 0x1 ]
mov cl [ eax ]
mov [ esi ] cl
mov esi eax
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
lea ecx [ esi + 0x2 ]
cmp [ ebp + 0x10 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
push r--data
push ebx
push esi
call sub_10010396
add esp 0xc
xor ebx ebx
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
inc esi
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
inc esi
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi ] 0x2d
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_100184b0
add esp 0xc
inc esi
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi ] al
mov eax edx
add [ esi + 0x1 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi ] al
mov eax edx
sub_1001aae3
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001d90c
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
mov esi [ ebp + 0x14 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
cmp esi ebx
setg cl
sub eax ecx
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push ebx
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_1001a974
add esp 0x18
mov [ edi ] bl
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
cmp esi ebx
setg cl
add eax edi
add ecx eax
push ecx
call sub_1001d790
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001abb3
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001aae3
add esp 0x18
pop ebp
retn
sub_1001abd3
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_10012369
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_10010569
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
mov [ esi ] 0x0
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_10010569
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
mov [ esi ] 0x30
inc esi
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
mov ecx [ edi + 0x4 ]
inc esi
neg ebx
sbb ebx ebx
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi ] 0x31
inc esi
mov [ esi ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
inc esi
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_1001abb3
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x14 ] edx
jne r-xdata
mov [ esi ] 0x30
inc esi
cmp [ ebp + 0x18 ] 0x0
push 0x65
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
inc esi
push esi
call sub_1001b3d0
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001da80
add ax 0x30
movzx eax ax
cmp ax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001da80
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_100105c0
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
inc esi
call sub_1001da80
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi ] 0x2d
inc esi
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi ] 0x2b
inc esi
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_1001d9a0
add al 0x30
mov [ esi ] al
inc esi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
cmp esi edi
jne r-xdata
cmp eax ecx
jb r-xdata
cmp edx ebx
mov edi esi
mov [ esi ] 0x30
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_1001d9a0
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_1001d9a0
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_1001af46
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov ebx eax
mov esi [ ebx + 0x4 ]
mov edi ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_10012369
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebx ] 0x2d
mov esi edi
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx + 0x4 ]
xor edi edi
inc edi
test eax eax
jg r-xdata
mov [ edi ] 0x2d
lea esi [ edi + 0x1 ]
xor eax eax
cmp [ ebx ] 0x2d
sete al
add eax esi
add eax edi
mov [ eax ] 0x30
mov [ eax + 0x1 ] 0x0
add esi eax
mov eax esi
call sub_1001a92f
mov [ esi ] 0x30
inc esi
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax esi
call sub_1001a92f
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov ebx [ ebx + 0x4 ]
inc esi
test ebx ebx
jge r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg ebx
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] ebx
cmp [ ebp + 0xc ] ebx
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax esi
call sub_1001a92f
push edi
push 0x30
push esi
call sub_100105c0
add esp 0xc
sub_1001b03d
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001d90c
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push ebx
push esi
push [ ebp + 0x10 ]
mov ecx edi
call sub_1001af46
add esp 0x10
mov [ edi ] bl
jmp r-xdata
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1001d790
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001b0f8
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x30 ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001d90c
xor ebx ebx
add esp 0x14
cmp esi ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] edi
call sub_1001366e
add esp 0x14
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x30 ] 0x2d
sete al
lea edi [ eax + esi ]
cmp ecx 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
cmp [ ebp - 0x20 ] eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1001d790
add esp 0x10
cmp eax ebx
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1001a974
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
cmp cl bl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_1001af46
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] bl
sub_1001b1f2
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001aae3
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b03d
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001abd3
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b0f8
jmp r-xdata
sub_1001b27a
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b1f2
add esp 0x1c
pop ebp
retn
sub_1001b29d
mov edi edi
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_1001da9f
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
sub_1001b2c8
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
fld [ r--data ]
fstp [ ebp - 0x10 ]
fld [ r--data ]
fstp [ ebp - 0x18 ]
fld [ ebp - 0x18 ]
fdiv [ ebp - 0x10 ]
fmul [ ebp - 0x10 ]
fsubr [ ebp - 0x18 ]
fstp [ ebp - 0x8 ]
fld1
fcomp [ ebp - 0x8 ]
fnstsw ax
test ah 0x5
jpe r-xdata
xor eax eax
leave
retn
xor eax eax
inc eax
leave
retn
sub_1001b306
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
jmp sub_1001b2c8
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push 0x0
call eax
retn
sub_1001b330
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1001b3d0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1001b3fd
push 0xc
push r--data
call sub_10010720
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_10010569
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10010765
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_100172d0
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_10016df8
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001b4f9
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_100105c0
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_1001b523
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1001db91
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_10010569
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1001058f
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1001b5a8
push 0x14
push r--data
call sub_10010720
or esi 0xffffffff
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1001057c
and [ eax ] 0x0
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] edi
call sub_10010569
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10010765
retn
mov eax esi
mov edx esi
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
jne r-xdata
push eax
call sub_1001dc08
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001057c
mov [ eax ] edi
call sub_10010569
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] edi
or [ ebp - 0x24 ] 0xffffffff
or [ ebp - 0x20 ] 0xffffffff
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b523
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001b6b7
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1001b6c1
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_100125b0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] esi
mov [ ebp - 0x1ad0 ] esi
cmp [ ebp + 0x10 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
and edi 0x1f
shl edi 0x6
add eax edi
mov bl [ eax + 0x24 ]
add bl bl
sar bl 0x1
mov [ ebp - 0x1ad8 ] esi
mov [ ebp - 0x1ad9 ] bl
cmp bl 0x2
je r-xdata
call sub_1001057c
mov [ eax ] esi
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000f298
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_1001057c
xor esi esi
mov [ eax ] esi
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1001bf19
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_1001b523
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad4 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
test bl bl
jne r-xdata
call sub_100154dc
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae4 ]
sete cl
push eax
mov eax [ esi ]
push [ edi + eax ]
mov [ ebp - 0x1ae0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
mov [ ebp - 0x1abc ] eax
cmp bl 0x2
jne r-xdata
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
xor ecx ecx
cmp [ ebp - 0x1ae0 ] ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
jmp r-xdata
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae4 ] eax
xor eax eax
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
test bl bl
je r-xdata
mov esi [ ebp - 0x1ad8 ]
push 0x5
pop esi
cmp [ ebp - 0x1ac0 ] esi
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
jmp r-xdata
call sub_10010569
mov [ eax ] 0x1c
call sub_1001057c
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1ac4 ]
and [ ebp - 0x1abc ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
mov [ ebp - 0x1abc ] eax
mov eax [ esi ]
add eax edi
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_1001058f
pop ecx
jmp r-xdata
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1abc ]
movzx edx [ edx ]
add [ ebp - 0x1abc ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
xor eax eax
jmp r-xdata
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1ac4 ]
inc [ ebp - 0x1ac4 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1ad8 ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae0 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac4 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac4 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac4 ] esi
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
add [ ebp - 0x1abc ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x1abc ]
cmp [ ebp - 0x1abc ] 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x1abc ]
movzx esi [ ebx ]
xor ecx ecx
cmp si 0xa
sete cl
inc ebx
inc ebx
add [ ebp - 0x1abc ] 0x2
mov [ ebp - 0x1ac0 ] esi
mov [ ebp - 0x1ae0 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_1001c33b
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
add esi [ ebp - 0x1ad4 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
add [ ebp - 0x1ac4 ] 0x2
mov [ eax ] dx
inc eax
inc eax
cmp [ ebp - 0x1ac4 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] 0x2
push 0xd
pop ebx
mov [ eax ] bx
inc eax
inc eax
add [ ebp - 0x1ac4 ] 0x2
mov eax [ ebp - 0x1ac4 ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp - 0x1ac0 ]
call sub_1001dccf
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1ac0 ]
push eax
call sub_1001cae6
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1abc ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1ac0 ]
push ecx
push eax
push [ ebp - 0x1ae4 ]
inc ebx
inc [ ebp - 0x1abc ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1ac0 ]
push ebx
push eax
call sub_1001cae6
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac0 ] eax
call sub_1001dccf
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
mov al [ ebp - 0x1ad9 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1abc ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1abc ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
cmp [ ebp - 0x1ac4 ] esi
mov [ ebp - 0x1ac8 ] eax
jl r-xdata
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_1001bdf4
push 0x10
push r--data
call sub_10010720
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1001057c
and [ eax ] 0x0
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] edi
call sub_10010569
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10010765
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001dc08
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b6c1
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001bec6
mov eax [ ebp - 0x1c ]
sub_1001bed0
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_10015820
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_1001bf19
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_10010569
mov [ eax ] 0x9
xor eax eax
pop ebp
retn
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1001366e
add esp 0x14
xor eax eax
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
sub_1001bf83
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10015865
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_10015865
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_1001c054
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_100165e6
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1001c095
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_100165e6
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_1001c0c7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1001650c
pop ecx
pop ebp
retn
sub_1001c103
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x14
mov eax [ ebp + 0xc ]
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1001650c
pop ecx
pop ebp
retn
sub_1001c132
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
sub_1001c17a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_10010569
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_10010569
mov [ eax ] 0x2a
call sub_10010569
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_10010569
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_100105c0
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_100105c0
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1001c303
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001c34e
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1001c3d5
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_1001c3d5
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_1001c34e
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1001c4b8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_10010929
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_100122c6
pop ecx
mov ebx eax
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0xc
call sub_1001366e
add esp 0x14
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_100105c0
add esp 0xc
sub_1001c533
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
call sub_10015287
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx eax
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
je r-xdata
push [ rw-data ]
call sub_10015290
pop ecx
test eax eax
je r-xdata
push eax
call sub_10015290
pop ecx
test eax eax
je r-xdata
push eax
call sub_10015290
push [ rw-data ]
mov esi eax
call sub_10015290
pop ecx
pop ecx
mov edi eax
test esi esi
je r-xdata
push eax
call sub_10015215
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10015215
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10015215
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10015215
pop ecx
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test edi edi
je r-xdata
push r--data
push edi
call esi
push eax
call sub_10015215
pop ecx
mov [ rw-data ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
call esi
test eax eax
je r-xdata
push eax
call sub_10015290
pop ecx
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0xc
lea ecx [ ebp - 0x14 ]
push ecx
push 0x1
push eax
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call eax
mov [ ebp - 0x4 ] eax
test [ ebp - 0xc ] 0x1
jne r-xdata
sub_1001c69c
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
pop esi
pop ebp
retn
mov eax [ rw-data ]
jmp r-xdata
sub_1001c6e7
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi ecx
mov [ edi ] r--data
mov eax [ ebx ]
test eax eax
je r-xdata
and [ edi + 0x4 ] 0x0
push eax
call sub_10010400
mov esi eax
inc esi
push esi
call sub_1000fa3b
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
mov [ edi + 0x8 ] 0x1
mov eax edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx ]
push esi
push eax
call sub_10010396
add esp 0xc
jmp r-xdata
sub_1001c73a
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ ebx + 0x8 ]
mov [ esi + 0x8 ] eax
test eax eax
mov eax [ ebx + 0x4 ]
push edi
je r-xdata
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_10010400
mov edi eax
inc edi
push edi
call sub_1000fa3b
pop ecx
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx + 0x4 ]
push edi
push eax
call sub_10010396
add esp 0xc
jmp r-xdata
sub_1001c7ba
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1001c797
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100016e7
pop ecx
sub_1001c7f0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1001c810
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000f298
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1001c855
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1001c855
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1001c810
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001c905
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001c924
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1001c8fc
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001c905
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001c930
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_1001d3c0
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001c981
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001c930
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_1001c9af
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000fb05
pop ecx
sub_1001c9cf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1001c303
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_10010569
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1001cb00
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_1001dfc6
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1001e00f
add esp 0x18
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1000fb05
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_1000fb05
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1001c9af
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx ebx
je r-xdata
push eax
call sub_1000fa3b
pop ecx
cmp eax ebx
je r-xdata
call sub_10010bf0
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_100105c0
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1001e00f
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_1000fa3b
pop ecx
cmp eax ebx
je r-xdata
call sub_10010bf0
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_1001c9af
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_1001c9af
pop ecx
push ebx
push ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
push eax
call sub_1000fa3b
pop ecx
cmp eax ebx
je r-xdata
call sub_10010bf0
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_1001cea5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001cb00
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001ceea
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
mov edi ecx
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_1001dfc6
pop ecx
cmp eax 0xffffffff
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
mov edi eax
cmp esi ebx
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1001e00f
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_1000fb05
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_100105c0
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_1001c9af
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000fa3b
pop ecx
cmp eax ebx
je r-xdata
call sub_10010bf0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_1001d0a4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001ceea
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001d0e6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000fb05
push [ esi + 0x8 ]
call sub_1000fb05
push [ esi + 0xc ]
call sub_1000fb05
push [ esi + 0x10 ]
call sub_1000fb05
push [ esi + 0x14 ]
call sub_1000fb05
push [ esi + 0x18 ]
call sub_1000fb05
push [ esi ]
call sub_1000fb05
push [ esi + 0x20 ]
call sub_1000fb05
push [ esi + 0x24 ]
call sub_1000fb05
push [ esi + 0x28 ]
call sub_1000fb05
push [ esi + 0x2c ]
call sub_1000fb05
push [ esi + 0x30 ]
call sub_1000fb05
push [ esi + 0x34 ]
call sub_1000fb05
push [ esi + 0x1c ]
call sub_1000fb05
push [ esi + 0x38 ]
call sub_1000fb05
push [ esi + 0x3c ]
call sub_1000fb05
add esp 0x40
push [ esi + 0x40 ]
call sub_1000fb05
push [ esi + 0x44 ]
call sub_1000fb05
push [ esi + 0x48 ]
call sub_1000fb05
push [ esi + 0x4c ]
call sub_1000fb05
push [ esi + 0x50 ]
call sub_1000fb05
push [ esi + 0x54 ]
call sub_1000fb05
push [ esi + 0x58 ]
call sub_1000fb05
push [ esi + 0x5c ]
call sub_1000fb05
push [ esi + 0x60 ]
call sub_1000fb05
push [ esi + 0x64 ]
call sub_1000fb05
push [ esi + 0x68 ]
call sub_1000fb05
push [ esi + 0x6c ]
call sub_1000fb05
push [ esi + 0x70 ]
call sub_1000fb05
push [ esi + 0x74 ]
call sub_1000fb05
push [ esi + 0x78 ]
call sub_1000fb05
push [ esi + 0x7c ]
call sub_1000fb05
add esp 0x40
push [ esi + 0x80 ]
call sub_1000fb05
push [ esi + 0x84 ]
call sub_1000fb05
push [ esi + 0x88 ]
call sub_1000fb05
push [ esi + 0x8c ]
call sub_1000fb05
push [ esi + 0x90 ]
call sub_1000fb05
push [ esi + 0x94 ]
call sub_1000fb05
push [ esi + 0x98 ]
call sub_1000fb05
push [ esi + 0x9c ]
call sub_1000fb05
push [ esi + 0xa0 ]
call sub_1000fb05
push [ esi + 0xa4 ]
call sub_1000fb05
push [ esi + 0xa8 ]
call sub_1000fb05
add esp 0x2c
sub_1001d27b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
push esi
call sub_1000fb05
pop ecx
sub_1001d2c0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000fb05
pop ecx
push esi
call sub_1000fb05
pop ecx
sub_1001d380
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1001d3c0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_10012369
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001c303
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_1001d0a4
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001d478
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
mov esi [ rw-data ]
jne r-xdata
push edi
test esi esi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp [ rw-data ] esi
je r-xdata
pop esi
pop ebp
retn
xor eax eax
push [ ebp + 0x8 ]
call sub_10010400
pop ecx
mov edi eax
jmp r-xdata
call sub_1001e3bd
test eax eax
jne r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
mov esi [ rw-data ]
test esi esi
je r-xdata
push eax
call sub_10010400
pop ecx
cmp eax edi
jbe r-xdata
add esi 0x4
mov eax [ esi ]
cmp [ eax + edi ] 0x3d
jne r-xdata
push edi
push [ ebp + 0x8 ]
push eax
call sub_1001e3a3
add esp 0xc
test eax eax
je r-xdata
mov eax [ esi ]
lea eax [ eax + edi + 0x1 ]
jmp r-xdata
pop edi
sub_1001d4ff
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10012369
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_10010569
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001c303
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1001d3c0
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1001cea5
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001d614
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001d4ff
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_1001d640
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_10012369
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001eedc
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1001e454
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
sub_1001d6e8
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_10012369
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001eedc
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1001e998
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
sub_1001d790
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
mov edi [ ecx + 0xc ]
cmp esi ebx
jne r-xdata
cmp [ ebp + 0xc ] ebx
jbe r-xdata
call sub_10010569
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
cmp edx ebx
mov [ esi ] bl
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
xor eax eax
mov eax edx
jmp r-xdata
cmp edx ebx
mov [ esi ] 0x30
lea eax [ esi + 0x1 ]
jle r-xdata
call sub_10010569
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
cmp edx ebx
mov [ eax ] bl
jl r-xdata
mov cl [ edi ]
cmp cl bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ edi ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc edi
jmp r-xdata
lea edi [ esi + 0x1 ]
push edi
call sub_10010400
inc eax
push eax
push edi
push esi
call sub_100184b0
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
cmp edx ebx
jg r-xdata
xor eax eax
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_1001d84f
mov edi edi
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0xc ]
movzx eax [ edx + 0x6 ]
push ebx
mov ecx eax
push esi
push edi
shr ecx 0x4
and eax 0x8000
mov edi 0x7ff
and ecx edi
mov [ ebp + 0xc ] eax
mov eax [ edx + 0x4 ]
mov edx [ edx ]
movzx ebx cx
mov esi 0x80000000
and eax 0xfffff
mov [ ebp - 0x4 ] esi
test ebx ebx
je r-xdata
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp ebx edi
je r-xdata
add ecx 0x3c01
mov [ ebp - 0x4 ] ebx
cmp edx ebx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ecx 0x3c00
jmp r-xdata
mov ecx [ ebp + 0xc ]
or ecx edi
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov ebx ecx
add edx edx
shr ebx 0x1f
or edx ebx
add ecx ecx
add edi 0xffff
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
test esi edx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
jmp r-xdata
mov ecx edx
shr ecx 0x15
shl eax 0xb
or ecx eax
or ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl edx 0xb
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
test esi ecx
jne r-xdata
movzx edi cx
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_1001d90c
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x30 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001d84f
pop ecx
pop ecx
lea eax [ ebp - 0x2c ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x10 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_1001f5d4
mov esi [ ebp - 0x30 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x2a ]
mov [ ebx ] eax
movsx eax [ ebp - 0x2c ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_10010396
add esp 0x24
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10013546
add esp 0x14
sub_1001d9a0
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1001da80
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_1001da9f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
push esi
test ecx 0xfcf0fce0
je r-xdata
mov esi [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
test esi esi
je r-xdata
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
cmp edi esi
je r-xdata
call sub_10020026
call sub_10020026
mov [ esi ] eax
jmp r-xdata
call sub_10010569
push 0x16
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1001366e
add esp 0x14
mov eax edi
pop edi
jmp r-xdata
push esi
push esi
call sub_10020026
pop ecx
pop ecx
mov [ edi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_1001db0b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1001db91
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1001057c
and [ eax ] 0x0
call sub_10010569
mov [ eax ] 0x9
or eax 0xffffffff
pop ebp
retn
call sub_1001057c
mov [ eax ] esi
call sub_10010569
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax [ rw-data ]
jae r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
sub_1001dc08
push 0xc
push r--data
call sub_10010720
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001dc9f
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_1001844c
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1001dca8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001dccf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_10020335
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000f298
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_1001dd94
push 0x10
push r--data
call sub_10010720
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001de2a
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_100203f8
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000fb05
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_1001de33
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_1001c132
pop ecx
push eax
call sub_1001bdf4
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1001de9b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1001de33
pop ecx
test eax eax
je r-xdata
push esi
call sub_1001dee3
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_1001c132
push eax
call sub_10020474
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_1001dee3
push 0x14
push r--data
call sub_10010720
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_100165e6
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001dfb4
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10010765
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1001c095
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1001df85
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_1001de9b
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_1001de9b
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1001dfc6
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_100128f1
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
sub_1001e00f
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
mov ebx [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_100105c0
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
mov [ ebp - 0x2c ] 0x1
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
call sub_1001c9af
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_1000fa3b
pop ecx
cmp eax edi
je r-xdata
call sub_10010bf0
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_10010400
mov esi eax
pop ecx
inc esi
mov ebx [ WideCharToMultiByte@IAT ]
cmp [ ebp - 0x2c ] edi
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_10015865
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_1000fb05
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1001e1c3
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov esi 0x7fffffff
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001d4ff
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001d4ff
add esp 0x10
inc edi
dec [ ebp + 0x10 ]
je r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10020560
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub esi eax
mov eax esi
jmp r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi eax
je r-xdata
sub_1001e2b5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov ecx [ ebp + 0x10 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp ecx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
jmp r-xdata
push [ eax + 0x4 ]
push ecx
push [ ebp + 0xc ]
push ecx
push [ ebp + 0x8 ]
push 0x1001
push [ eax + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_1002094f
add esp 0x20
cmp eax ebx
jne r-xdata
push [ ebp + 0x14 ]
push ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10020991
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001e3bd
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
xor esi esi
push edi
mov edi [ rw-data ]
mov [ ebp - 0x4 ] esi
mov eax [ edi ]
cmp eax esi
je r-xdata
xor eax eax
mov ebx [ WideCharToMultiByte@IAT ]
or eax 0xffffffff
jmp r-xdata
push 0x1
push eax
call sub_10015865
pop ecx
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push esi
push esi
push [ ebp - 0x8 ]
push eax
push 0xffffffff
push [ edi ]
push esi
push esi
call ebx
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fb05
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push esi
push eax
call sub_10020b37
pop ecx
pop ecx
test eax eax
jge r-xdata
add edi 0x4
mov eax [ edi ]
cmp eax esi
jne r-xdata
cmp [ ebp - 0x4 ] esi
je r-xdata
push esi
push esi
push esi
push esi
push 0xffffffff
push eax
push esi
push esi
call ebx
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fb05
pop ecx
mov [ ebp - 0x4 ] esi
sub_1001e454
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_1001e998
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_1001eedc
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
xor esi esi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xc ]
inc esi
xor ecx ecx
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ebx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x6c ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_1001f5a4 ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov cl al
sub cl 0x31
mov [ ebp - 0x58 ] esi
cmp cl 0x8
jbe r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
mov [ ebp - 0x5c ] esi
cmp al 0x9
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_10020d82
mov eax [ ebp - 0x64 ]
xor edx edx
add esp 0xc
cmp [ ebp - 0x68 ] edx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] edx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
cmp al 0x63
jle r-xdata
cmp [ ebp - 0x5c ] edx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp al 0x65
jg r-xdata
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x78 ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
mov [ ebp - 0x6c ] 0x1
mov ecx rw-data
sub ecx 0x60
mov [ ebp - 0x54 ] eax
cmp eax edx
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] edx
jne r-xdata
neg eax
mov ecx rw-data
mov [ ebp - 0x54 ] eax
sub ecx 0x60
cmp [ ebp - 0x54 ] edx
je r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
jmp r-xdata
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add ecx 0x54
and eax 0x7
mov [ ebp - 0x7c ] ecx
cmp eax edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
add eax ecx
mov ebx eax
mov eax 0x8000
cmp [ ebx ] ax
jb r-xdata
mov ecx [ ebp - 0x7c ]
xor edx edx
movzx ecx [ ebx + 0xa ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x32 ]
mov esi ecx
mov edx 0x7fff
xor esi eax
and eax edx
and ecx edx
and esi 0x8000
mov edi 0x7fff
lea edx [ ecx + eax ]
mov [ ebp - 0x70 ] esi
movzx edx dx
cmp ax di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
lea ebx [ ebp - 0x48 ]
xor eax eax
test si si
sete al
and [ ebp - 0x38 ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp cx di
jae r-xdata
mov edi 0xbffd
cmp dx di
ja r-xdata
mov esi 0x3fbf
cmp dx si
ja r-xdata
xor esi esi
cmp ax si
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
cmp cx si
jne r-xdata
inc edx
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x68 ] esi
lea edi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc edx
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
inc edi
inc edi
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea eax [ ebp + eax - 0x3c ]
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x8 ]
mov [ ebp - 0x60 ] eax
cmp [ ebx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x3c ] esi
jne r-xdata
mov eax [ ebp - 0x68 ]
mov ecx [ ebp - 0x58 ]
add eax eax
mov [ ebp - 0x64 ] ecx
test ecx ecx
jle r-xdata
add edx 0xc002
test dx dx
jle r-xdata
mov [ ebp - 0x4c ] 0x1
cmp esi eax
jae r-xdata
cmp [ ebx ] esi
jne r-xdata
xor eax eax
mov [ ebp - 0x32 ] ax
jmp r-xdata
add edx 0xffff
test dx dx
jge r-xdata
mov edi [ ebp - 0x24 ]
test edi edi
js r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x4c ] 0x0
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] esi
jmp r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x2c ] cx
ja r-xdata
mov eax edx
neg eax
movzx esi ax
add edx esi
test dx dx
jg r-xdata
mov esi [ ebp - 0x28 ]
mov eax [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr eax 0x1f
mov ecx esi
add esi esi
or esi eax
shr ecx 0x1f
lea eax [ edi + edi ]
or eax ecx
add edx 0xffff
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] eax
test dx dx
jg r-xdata
mov eax [ ebp - 0x60 ]
mov ecx [ ebp - 0x5c ]
movzx ecx [ ecx ]
movzx eax [ eax ]
and [ ebp - 0x4c ] 0x0
imul eax ecx
mov ecx [ edi - 0x4 ]
lea esi [ ecx + eax ]
cmp esi ecx
jb r-xdata
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x2c ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov eax [ ebp - 0x24 ]
mov edi [ ebp - 0x28 ]
mov ecx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x2c ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x2c ] eax
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp dx ax
jb r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] esi
je r-xdata
mov ax [ ebp - 0x2a ]
or edx [ ebp - 0x70 ]
mov [ ebp - 0x3c ] ax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x3a ] eax
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x36 ] eax
mov [ ebp - 0x32 ] dx
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x70 ] ax
mov [ ebp - 0x38 ] eax
sete cl
mov [ ebp - 0x3c ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x34 ] ecx
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x22 ] cx
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] ax
inc edx
jmp r-xdata
sub_1001f5d4
mov edi edi
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
lea esi [ ebp + 0x8 ]
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edx [ ebp - 0x8 ]
mov ecx edx
mov eax 0x8000
and ecx eax
and edx 0x7fff
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x30 ] 0xcc
mov [ ebp - 0x2f ] 0xcc
mov [ ebp - 0x2e ] 0xcc
mov [ ebp - 0x2d ] 0xcc
mov [ ebp - 0x2c ] 0xcc
mov [ ebp - 0x2b ] 0xcc
mov [ ebp - 0x2a ] 0xcc
mov [ ebp - 0x29 ] 0xcc
mov [ ebp - 0x28 ] 0xcc
mov [ ebp - 0x27 ] 0xcc
mov [ ebp - 0x26 ] 0xfb
mov [ ebp - 0x25 ] 0x3f
mov [ ebp - 0x74 ] 0x1
mov [ ebp - 0x70 ] ecx
test cx cx
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
mov eax 0x7fff
cmp dx ax
jne r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0xc ]
mov edi [ ebp - 0x10 ]
test dx dx
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
shr ebx 0x8
mov eax esi
shr eax 0x18
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx eax ax
xor ecx ecx
movsx ebx ax
mov [ ebp - 0x20 ] cx
mov ecx rw-data
neg ebx
sub ecx 0x60
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x64 ] ecx
test ebx ebx
je r-xdata
xor eax eax
inc eax
mov [ ebx ] ax
mov eax 0x80000000
cmp esi eax
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
mov edx 0x3fff
mov eax 0x7fff
cmp cx dx
jb r-xdata
jge r-xdata
test esi 0x40000000
jne r-xdata
test edi edi
je r-xdata
xor edx edx
cmp cx ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx ] dx
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x1
mov [ ebx + 0x4 ] 0x30
mov [ ebx + 0x5 ] dl
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x60 ]
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edx ] ax
je r-xdata
inc [ ebp - 0x4c ]
xor edx edx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0x26 ]
movzx ecx cx
mov ebx edx
xor ebx ecx
and ecx eax
and edx eax
and ebx 0x8000
mov edi eax
lea esi [ edx + ecx ]
mov [ ebp - 0x5c ] ebx
movzx esi si
cmp cx di
jae r-xdata
test ebx ebx
je r-xdata
mov eax rw-data
neg ebx
sub eax 0x60
mov [ ebp - 0x64 ] eax
test cx cx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
cmp edi 0x15
jle r-xdata
cwde
add edi eax
test edi edi
jg r-xdata
xor eax eax
test bx bx
sete al
and [ ebp - 0x1c ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x20 ] 0x0
cmp dx ax
jae r-xdata
add [ ebp - 0x64 ] 0x54
mov ecx ebx
and ecx 0x7
sar ebx 0x3
test ecx ecx
je r-xdata
cmp esi eax
jne r-xdata
cmp esi 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10010396
add esp 0xc
xor esi esi
test eax eax
je r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
sub esi 0x3ffe
xor eax eax
mov [ ebp - 0x16 ] ax
mov [ ebp - 0x44 ] 0x8
push 0x15
pop edi
xor eax eax
mov [ edx ] ax
mov eax 0x8000
cmp [ ebp - 0x70 ] ax
mov [ edx + 0x3 ] 0x1
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x4 ] 0x30
mov [ edx + 0x5 ] 0x0
jmp r-xdata
mov eax 0xbffd
cmp si ax
ja r-xdata
xor esi esi
imul ecx ecx 0xc
add ecx [ ebp - 0x64 ]
mov eax ecx
mov [ ebp - 0x44 ] ecx
mov ecx 0x8000
cmp [ eax ] cx
jb r-xdata
push r--data
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebx + 0x3 ] 0x6
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
mov eax [ ebp - 0x20 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add ebx ebx
or ebx eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec [ ebp - 0x44 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jge r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax 0x3fbf
cmp si ax
ja r-xdata
movzx edx [ eax + 0xa ]
xor ecx ecx
mov [ ebp - 0x54 ] ecx
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x16 ]
mov esi edx
xor esi ecx
and esi 0x8000
mov [ ebp - 0x48 ] esi
mov esi 0x7fff
and ecx esi
and edx esi
lea esi [ edx + ecx ]
movzx edi si
mov esi 0x7fff
cmp cx si
jae r-xdata
mov esi eax
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x44 ] eax
push r--data
push r--data
jmp r-xdata
lea eax [ edi + 0x1 ]
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
test eax eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
xor eax eax
cmp cx ax
jne r-xdata
xor eax eax
xor eax eax
xor esi esi
cmp [ ebp - 0x48 ] si
sete al
dec eax
and eax 0x80000000
add eax 0x7fff8000
mov [ ebp - 0x18 ] eax
jmp r-xdata
cmp dx si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_10013546
add esp 0x14
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_10010396
add esp 0xc
xor esi esi
test eax eax
je r-xdata
dec ebx
mov al [ ebx ]
dec ebx
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr ebx 0x1
or ebx eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] eax
test esi esi
jg r-xdata
cmp dx ax
jne r-xdata
inc esi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi 0xbffd
cmp di si
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
mov [ ebp - 0x58 ] eax
lea edi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc esi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ebx esi
jne r-xdata
mov esi 0x3fbf
cmp di si
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx [ ebp - 0x40 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
mov [ ebp - 0x44 ] edx
cmp edx esi
jb r-xdata
inc edi
inc edi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x48 ] ecx
lea eax [ ebp + eax - 0x20 ]
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp cx si
jne r-xdata
xor esi esi
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx ecx
jae r-xdata
inc ecx
mov esi eax
test edx edx
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x40 ]
add eax eax
mov [ ebp - 0x54 ] ecx
test ecx ecx
jle r-xdata
add esi 0xc002
test si si
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp dx si
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
xor edx edx
mov [ eax ] dx
mov edx 0x8000
cmp [ ebp - 0x70 ] dx
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add esi 0xffff
test si si
jge r-xdata
mov edi [ ebp - 0x8 ]
test edi edi
js r-xdata
sub [ ebp - 0x48 ] 0x2
inc eax
inc eax
dec [ ebp - 0x54 ]
cmp [ ebp - 0x54 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x44 ] 0x0
mov [ edi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
and [ ebp - 0x58 ] esi
lea esi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ eax + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax esi
neg eax
movzx eax ax
add esi eax
test si si
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add esi 0xffff
mov [ ebp - 0x8 ] eax
test si si
jg r-xdata
mov ecx [ ebp - 0x48 ]
movzx edx [ eax ]
movzx ecx [ ecx ]
and [ ebp - 0x44 ] 0x0
imul ecx edx
mov edx [ edi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
inc esi
inc esi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x20 ]
add eax 0x8
mov [ ebp - 0x6c ] ecx
mov [ ebp - 0x68 ] eax
cmp [ eax + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr edi 0x1
or edi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
mov ecx [ ebp - 0x58 ]
mov edx [ ebp - 0x40 ]
add ecx ecx
mov [ ebp - 0x50 ] edx
test edx edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x5c ] 0x1
cmp eax ecx
jae r-xdata
cmp [ eax ] esi
je r-xdata
xor eax eax
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp si ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] eax
je r-xdata
add edi 0xffff
test di di
jge r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x6c ] 0x2
sub [ ebp - 0x68 ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x5c ] 0x0
mov [ esi - 0x4 ] eax
je r-xdata
mov [ ebp - 0x18 ] esi
mov ax [ ebp - 0xe ]
or esi [ ebp - 0x5c ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] si
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x5c ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
test di di
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8 ]
shr edx 0x1f
add eax eax
or eax edx
add edi 0xffff
mov [ ebp - 0x8 ] eax
test di di
jg r-xdata
mov eax [ ebp - 0x6c ]
movzx ecx [ eax ]
mov eax [ ebp - 0x68 ]
movzx eax [ eax ]
mov edx [ esi - 0x4 ]
imul ecx eax
and [ ebp - 0x5c ] 0x0
lea eax [ edx + ecx ]
cmp eax edx
jb r-xdata
mov eax [ ebp - 0x44 ]
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc esi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr esi 0x1
or esi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x54 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp di ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x54 ] eax
je r-xdata
mov ax [ ebp - 0xe ]
or edi [ ebp - 0x48 ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x48 ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc edi
jmp r-xdata
sub_1001fef8
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
pop esi
test ebx 0x40000
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_1001ff86
xor eax eax
test dl 0x10
je r-xdata
push ebx
push esi
push edi
mov ebx 0x200
test dl 0x8
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
mov edi 0x100
test edx 0x80000
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
pop esi
pop ebx
cmp edx 0x1000000
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_10020026
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
fwait
fnstcw [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov esi 0xc00
and eax esi
mov edi 0x300
je r-xdata
or edx 0x80000
and ecx edi
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov eax edi
not eax
and eax edx
and ecx edi
or eax ecx
mov [ ebp + 0xc ] eax
cmp eax edx
je r-xdata
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
je r-xdata
mov ebx eax
call sub_1001fef8
movzx eax ax
mov [ ebp - 0x4 ] eax
fldcw [ ebp - 0x4 ]
fwait
fnstcw [ ebp - 0x4 ]
mov ebx [ ebp - 0x4 ]
xor edx edx
test bl 0x1
je r-xdata
or edx edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and edi 0x308031f
mov [ ebp - 0x14 ] edi
stmxcsr [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test eax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test eax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test eax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test eax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test eax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax esi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebx 0x6000
and ecx ebx
je r-xdata
or esi 0x80000
and ecx 0x300
je r-xdata
cmp eax 0x400
je r-xdata
mov edi 0x8040
and eax edi
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov [ ebp + 0xc ] edx
mov eax edx
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
call sub_1001ff86
push eax
mov [ ebp - 0xc ] eax
call sub_10020f50
pop ecx
stmxcsr [ ebp - 0xc ]
mov ecx [ ebp - 0xc ]
xor edx edx
test cl cl
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebx
jne r-xdata
or edx 0x300
jmp r-xdata
test ecx 0x200
je r-xdata
push 0x10
pop edx
mov ecx eax
xor ecx [ ebp + 0xc ]
or eax [ ebp + 0xc ]
test ecx 0x8031f
je r-xdata
mov eax [ ebp - 0x14 ]
mov edx eax
and eax [ ebp + 0x8 ]
not edx
and edx esi
or edx eax
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ecx 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ecx 0x800
je r-xdata
or edx 0x4
test ecx 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi ecx
je r-xdata
or edx 0x1
mov eax ecx
and eax ebx
je r-xdata
or edx 0x80000
and ecx edi
sub ecx 0x40
je r-xdata
cmp eax 0x2000
je r-xdata
or edx 0x2000000
sub ecx 0x7fc0
je r-xdata
or edx esi
cmp eax 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub ecx 0x40
jne r-xdata
or edx 0x200
jmp r-xdata
cmp eax ebx
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_10020354
mov eax [ rw-data ]
push esi
mov esi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_10020381
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_10010569
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax ebx
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_1001de33
push esi
mov ebx eax
call sub_1002112b
push esi
call sub_1001c132
push eax
call sub_1002105e
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_1000fb05
pop ecx
mov [ esi + 0x1c ] edi
sub_100203f8
push 0xc
push r--data
call sub_10010720
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_10010569
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_1001c054
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_10020381
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1002046c
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_10010765
retn
mov eax [ ebp - 0x1c ]
sub_10020474
push 0x10
push r--data
call sub_10010720
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_10010569
mov [ eax ] 0x9
call sub_10010569
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001366e
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10010765
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001dc08
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_10010569
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1001db91
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1002054b
mov eax [ ebp - 0x1c ]
call sub_1001057c
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_10020560
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100205c1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
jne r-xdata
dec ecx
cmp [ eax ] 0x0
je r-xdata
dec ecx
mov eax [ ebp + 0x8 ]
sub eax ecx
dec eax
pop ebp
retn
inc eax
sub_100205df
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
push esi
push edi
xor edi edi
mov ebx edx
mov esi ecx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] eax
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
push 0x1
mov eax r--data
push eax
push 0x1
push eax
push edi
push edi
call [ CompareStringW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0xffffffff
jge r-xdata
push [ ebp + 0x10 ]
mov eax ebx
call sub_100205c1
pop ecx
mov [ ebp + 0x10 ] eax
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov edx [ ebp + 0x18 ]
cmp edx edi
jle r-xdata
xor eax eax
jmp r-xdata
cmp edx 0xffffffff
jl r-xdata
mov eax [ ebp - 0x1c ]
push edx
call sub_100205c1
mov edx eax
pop ecx
mov [ ebp + 0x18 ] edx
jmp r-xdata
mov [ rw-data ] 0x2
lea esp [ ebp - 0x38 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000f298
leave
retn
mov ecx [ rw-data ]
cmp ecx 0x2
je r-xdata
xor edi edi
xor ebx ebx
cmp [ ebp + 0x8 ] edi
jne r-xdata
cmp ecx edi
je r-xdata
cmp [ ebp + 0x1c ] edi
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
xor eax eax
inc eax
cmp ecx eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_1001dfc6
mov esi eax
pop ecx
cmp esi 0xffffffff
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov [ ebp - 0x28 ] edi
cmp [ ebp + 0x1c ] edi
jne r-xdata
cmp esi [ ebp + 0x1c ]
je r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
mov [ ebp + 0x1c ] ecx
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringA@IAT ]
mov esi eax
test ebx ebx
je r-xdata
push 0x0
push 0x0
lea eax [ ebp + 0x10 ]
push eax
push [ ebp - 0x24 ]
push esi
push [ ebp + 0x1c ]
call sub_1001e00f
mov ebx eax
add esp 0x18
test ebx ebx
je r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
cmp edx edi
jne r-xdata
mov eax esi
push ebx
call sub_1000fb05
push edi
call sub_1000fb05
pop ecx
pop ecx
push 0x0
push 0x0
lea eax [ ebp + 0x18 ]
push eax
push [ ebp - 0x1c ]
push esi
push [ ebp + 0x1c ]
call sub_1001e00f
mov edi eax
add esp 0x18
test edi edi
jne r-xdata
cmp edx eax
jg r-xdata
push 0x2
mov esi [ MultiByteToWideChar@IAT ]
push edi
push edi
push [ ebp + 0x10 ]
push ebx
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
mov [ ebp - 0x2c ] ebx
cmp ebx edi
je r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] edi
push ebx
call sub_1000fb05
pop ecx
jmp r-xdata
cmp [ ebp + 0x10 ] eax
jle r-xdata
mov edi 0x400
test ebx ebx
jle r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0x1c ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
push 0x3
jmp r-xdata
and [ ebp - 0x20 ] 0x0
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
pop eax
jmp r-xdata
push ebx
push [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
cmp [ ebp + 0x18 ] edi
jle r-xdata
cmp [ ebp - 0x18 ] 0x2
jb r-xdata
push [ ebp - 0x20 ]
call sub_1001c9af
mov eax [ ebp - 0x28 ]
pop ecx
jmp r-xdata
push 0x0
push 0x0
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
test ebx ebx
je r-xdata
push eax
call sub_1000fa3b
pop ecx
test eax eax
je r-xdata
call sub_10010bf0
mov eax esp
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x2
jae r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
jle r-xdata
mov [ ebp - 0x20 ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
add eax 0x8
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
mov cl [ ebx ]
cmp cl [ eax ]
jb r-xdata
push ebx
push edi
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
mov ecx [ ebp - 0x1c ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
push edi
call sub_1001c9af
pop ecx
push ebx
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x20 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringW@IAT ]
mov [ ebp - 0x28 ] eax
push eax
call sub_1000fa3b
pop ecx
test eax eax
je r-xdata
call sub_10010bf0
mov edi esp
test edi edi
je r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
jmp r-xdata
test edi edi
je r-xdata
sub_1002094f
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
push [ ebp + 0x24 ]
mov edx [ ebp + 0x14 ]
push [ ebp + 0x20 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_100205df
add esp 0x18
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10020991
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10012369
mov edx [ ebp + 0x10 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp edx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x10 ]
cmp ecx ebx
jne r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
jmp r-xdata
push [ eax + 0x8 ]
lea eax [ ebp - 0x10 ]
push edx
push [ ebp + 0xc ]
push edx
push [ ebp + 0x8 ]
push 0x1001
push ecx
push eax
call sub_1002094f
add esp 0x20
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push edx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e1c3
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
call sub_10010569
mov [ eax ] 0x16
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10020a8b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ rw-data ]
jmp r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
push edi
push eax
push [ ebp + 0x8 ]
call sub_1001e3a3
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
neg eax
add esi 0x4
mov eax [ esi ]
mov al [ edi + eax ]
cmp al 0x3d
je r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
jmp r-xdata
test al al
je r-xdata
pop esi
pop ebp
retn
sub_10020add
mov edi edi
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
mov ecx edi
test edi edi
je r-xdata
pop edi
leave
retn
cmp [ edi ] eax
je r-xdata
push esi
inc eax
push 0x4
push eax
call sub_10015865
mov esi eax
pop ecx
pop ecx
mov [ ebp - 0x4 ] esi
test esi esi
jne r-xdata
add ecx 0x4
inc eax
cmp [ ecx ] 0x0
jne r-xdata
mov eax [ edi ]
test eax eax
jne r-xdata
push 0x9
call sub_100100b3
jmp r-xdata
push eax
call sub_100106ae
mov [ esi ] eax
add esi 0x4
add edi 0x4
and [ esi ] eax
mov eax [ ebp - 0x4 ]
pop esi
pop ecx
sub_10020b37
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
mov [ ebp - 0xc ] ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ eax ]
push edi
mov [ ebp - 0x4 ] esi
cmp esi ebx
je r-xdata
call sub_10010569
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1001366e
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10010569
mov [ eax ] 0x16
push 0x3d
push esi
call sub_100128da
mov edi eax
pop ecx
pop ecx
mov [ ebp - 0x14 ] edi
cmp edi ebx
je r-xdata
pop ebx
leave
retn
cmp esi edi
je r-xdata
xor eax eax
cmp [ edi + 0x1 ] bl
sete al
mov [ ebp - 0x8 ] eax
mov eax [ rw-data ]
cmp eax [ rw-data ]
jne r-xdata
cmp eax ebx
jne r-xdata
call sub_10020add
mov [ rw-data ] eax
mov esi [ rw-data ]
mov [ ebp - 0x10 ] esi
cmp esi ebx
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
or eax 0xffffffff
sub edi [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_10020a8b
mov edi eax
cmp edi ebx
pop ecx
jl r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ esi ] ebx
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
call sub_10015820
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
call sub_1001e3bd
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000fb05
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
cmp edi ebx
jge r-xdata
lea esi [ esi + edi * 4 ]
push [ esi ]
call sub_1000fb05
pop ecx
cmp [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
pop esi
mov [ eax ] ebx
cmp [ rw-data ] ebx
jne r-xdata
lea eax [ edi + 0x2 ]
cmp eax edi
jl r-xdata
neg edi
cmp [ esi ] ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov eax [ ebp + 0x8 ]
mov [ eax ] ebx
jmp r-xdata
push 0x4
call sub_10015820
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
cmp eax 0x3fffffff
jae r-xdata
mov eax [ esi + 0x4 ]
mov [ esi ] eax
mov eax [ ebp - 0x10 ]
inc edi
lea esi [ eax + edi * 4 ]
cmp edi 0x3fffffff
jae r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
mov [ eax ] ebx
push eax
push 0x4
push [ rw-data ]
call sub_100158ff
add esp 0xc
cmp eax ebx
je r-xdata
push 0x4
push edi
push [ rw-data ]
call sub_100158ff
add esp 0xc
cmp eax ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
mov esi [ ebp - 0x4 ]
push 0x1
push esi
call sub_10010400
inc eax
pop ecx
inc eax
push eax
call sub_10015865
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea ecx [ eax + edi * 4 ]
mov [ ecx ] edx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] ebx
jmp r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1000fb05
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
push esi
push esi
call sub_10010400
inc eax
pop ecx
inc eax
push eax
push edi
call sub_10010396
add esp 0xc
test eax eax
je r-xdata
mov [ rw-data ] eax
mov ecx [ ebp - 0x8 ]
mov eax edi
sub eax esi
add eax [ ebp - 0x14 ]
mov [ eax ] bl
inc eax
neg ecx
sbb ecx ecx
not ecx
and ecx eax
push ecx
push edi
call [ SetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10013546
add esp 0x14
push edi
call sub_1000fb05
pop ecx
or [ ebp - 0xc ] 0xffffffff
call sub_10010569
mov [ eax ] 0x2a
sub_10020d82
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
push edi
mov [ ebp - 0x18 ] 0x404e
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
cmp [ ebp + 0xc ] esi
jbe r-xdata
cmp [ eax + 0x8 ] esi
je r-xdata
mov edx [ eax ]
mov ebx [ eax + 0x4 ]
mov esi eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx edx
shr ecx 0x1f
lea edi [ edx + edx ]
lea edx [ ebx + ebx ]
or edx ecx
mov ecx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
add ecx ecx
or ecx esi
mov [ ebp - 0x14 ] edi
mov esi edi
and [ ebp - 0x14 ] 0x0
mov ebx edx
shr ebx 0x1f
add ecx ecx
shr edi 0x1f
or ecx ebx
mov ebx [ ebp - 0x10 ]
add esi esi
add edx edx
or edx edi
lea edi [ esi + ebx ]
mov [ eax ] esi
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
cmp edi esi
jb r-xdata
mov ecx [ eax + 0x4 ]
mov edx ecx
shr edx 0x10
mov [ eax + 0x8 ] edx
mov edx [ eax ]
mov edi edx
shl ecx 0x10
shr edi 0x10
or ecx edi
shl edx 0x10
add [ ebp - 0x18 ] 0xfff0
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
mov ebx 0x8000
test [ eax + 0x8 ] ebx
jne r-xdata
mov [ ebp - 0x14 ] 0x1
cmp edi ebx
jae r-xdata
mov cx [ ebp - 0x18 ]
mov [ eax + 0xa ] cx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000f298
leave
retn
mov esi [ eax ]
mov edi [ eax + 0x4 ]
add [ ebp - 0x18 ] 0xffff
mov ecx esi
add esi esi
shr ecx 0x1f
mov [ eax ] esi
lea esi [ edi + edi ]
or esi ecx
mov ecx [ eax + 0x8 ]
mov edx edi
shr edx 0x1f
add ecx ecx
or ecx edx
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] ecx
test ebx ecx
je r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ ebp - 0xc ]
lea ebx [ ecx + edx ]
xor esi esi
cmp ebx ecx
jb r-xdata
lea esi [ edx + 0x1 ]
cmp esi edx
jb r-xdata
xor ebx ebx
mov [ eax ] edi
cmp [ ebp - 0x14 ] ebx
je r-xdata
xor esi esi
inc esi
cmp ebx edx
jae r-xdata
xor ebx ebx
inc ebx
cmp esi 0x1
jae r-xdata
mov ecx [ ebp - 0x8 ]
add [ eax + 0x8 ] ecx
and [ ebp - 0x14 ] 0x0
lea ecx [ edi + edi ]
mov edx edi
shr edx 0x1f
lea edi [ ebx + ebx ]
or edi edx
mov edx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
lea ebx [ edx + edx ]
mov edx [ ebp + 0x8 ]
or ebx esi
mov [ eax ] ecx
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
movsx edx [ edx ]
lea esi [ ecx + edx ]
mov [ ebp - 0x10 ] edx
cmp esi ecx
jb r-xdata
inc [ eax + 0x8 ]
mov [ eax + 0x4 ] ebx
test esi esi
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] esi
test ebx ebx
je r-xdata
mov [ ebp - 0x14 ] 0x1
cmp esi edx
jae r-xdata
dec [ ebp + 0xc ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
ja r-xdata
lea ecx [ edi + 0x1 ]
xor edx edx
cmp ecx edi
jb r-xdata
cmp [ ebp - 0x14 ] 0x0
mov [ eax ] esi
je r-xdata
xor esi esi
jmp r-xdata
xor edx edx
inc edx
cmp ecx 0x1
jae r-xdata
inc ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x4 ] ecx
test edx edx
je r-xdata
sub_10020f50
push 0x8
push r--data
call sub_10010720
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_10010765
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_10020fc2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1001db91
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1001058f
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1001db91
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1001db91
push 0x1
mov edi eax
call sub_1001db91
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1001db0b
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1002105e
push 0x10
push r--data
call sub_10010720
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1001057c
and [ eax ] 0x0
call sub_10010569
mov [ eax ] 0x9
call sub_1001057c
mov [ eax ] edi
call sub_10010569
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1001366e
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10010765
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001dc08
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10010569
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10020fc2
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10021121
mov eax [ ebp - 0x1c ]
sub_1002112b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000fb05
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10021174
mov edi edi
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
and [ esi + 0x8 ] 0x0
pop esi
retn
push eax
call sub_1000fb05
and [ esi ] 0x0
pop ecx
sub_10021228
mov edi edi
push esi
mov esi ecx
call sub_100211f4
mov eax __pe_dll_export_address_table
lea ecx [ esi + 0x14 ]
mov [ esi ] 0x38
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0xc ] 0x900
mov [ esi + 0x10 ] r--data
call sub_100211a9
test eax eax
jge r-xdata
mov eax esi
pop esi
retn
mov [ rw-data ] 0x1
sub_10021299
mov edi edi
push ebp
mov ebp esp
sub esp 0x44
push ebx
mov eax __pe_dll_export_address_table
push esi
mov esi [ ebp + 0x8 ]
mov edx [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
mov ebx [ esi + 0xc ]
add edx eax
push edi
mov edi [ esi + 0x14 ]
add edi eax
add ecx eax
mov [ ebp - 0x18 ] edx
mov edx [ esi + 0x10 ]
add ebx eax
add edx eax
mov eax [ esi + 0x1c ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x38 ] ecx
xor ecx ecx
mov [ ebp - 0xc ] edi
mov [ ebp - 0x3c ] eax
xor eax eax
test [ esi ] 0x1
lea edi [ ebp - 0x30 ]
mov [ ebp - 0x44 ] 0x24
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x34 ] ecx
stosd [ edi ]
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x28 ] ecx
mov [ ebp - 0x24 ] ecx
jne r-xdata
mov eax [ ebp - 0x18 ]
mov edi [ eax ]
mov eax [ ebp + 0xc ]
sub eax ebx
sar eax 0x2
shl eax 0x2
add edx eax
mov edx [ edx ]
mov [ ebp + 0x8 ] eax
mov eax edx
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x34 ] eax
lea eax [ edx + r--data ]
jne r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
push eax
push 0x1
push ecx
push 0xc06d0057
call [ RaiseException@IAT ]
xor eax eax
jmp r-xdata
mov [ ebp - 0x30 ] eax
mov eax [ rw-data ]
xor ebx ebx
cmp eax ecx
je r-xdata
movzx eax dx
pop edi
pop esi
pop ebx
leave
retn 0x8
test edi edi
jne r-xdata
lea edx [ ebp - 0x44 ]
push edx
push ecx
call eax
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x2c ] edi
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
test ebx ebx
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x2
call eax
mov ebx eax
push [ ebp - 0x38 ]
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x1
call eax
mov edi eax
test edi edi
jne r-xdata
mov eax ebx
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp - 0x44 ]
push ecx
push 0x5
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x28 ] ebx
call eax
mov eax [ ebp + 0xc ]
mov [ eax ] ebx
cmp [ esi + 0x14 ] ebx
je r-xdata
push edi
push [ ebp - 0x18 ]
call [ InterlockedExchange@IAT ]
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ ebp - 0x30 ]
push edi
call [ GetProcAddress@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
cmp [ esi + 0x1c ] ebx
je r-xdata
push edi
call [ FreeLibrary@IAT ]
cmp [ esi + 0x18 ] 0x0
je r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
push eax
push 0x1
push 0x0
push 0xc06d007e
call [ RaiseException@IAT ]
mov eax [ ebp - 0x28 ]
jmp r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x3
call eax
mov edi eax
test edi edi
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ edi + 0x3c ]
add eax edi
cmp [ eax ] 0x4550
jne r-xdata
push 0x8
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
je r-xdata
test ebx ebx
jne r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x4
call eax
mov ebx eax
mov ecx [ ebp - 0x4 ]
cmp [ eax + 0x8 ] ecx
jne r-xdata
mov [ eax + 0x4 ] esi
mov ecx [ rw-data ]
mov [ eax ] ecx
mov [ rw-data ] eax
jmp r-xdata
lea eax [ ebp - 0x44 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
push 0x1
push ebx
push 0xc06d007f
call [ RaiseException@IAT ]
mov ebx [ ebp - 0x28 ]
cmp edi [ eax + 0x34 ]
jne r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp + 0x8 ]
mov ebx [ ecx + eax ]
test ebx ebx
jne r-xdata
sub_10021e39
mov ecx rw-data
call sub_10003b3c
xor eax eax
push sub_10022089
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] eax
mov [ rw-data ] al
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_1000f736
pop ecx
retn
sub_10021ea1
mov ecx rw-data
call sub_10003b3c
xor eax eax
push sub_10022093
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] 0x1
mov [ rw-data ] al
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_1000f736
pop ecx
retn
sub_10021f0e
mov ecx rw-data
call sub_10003b3c
or [ rw-data ] 0xffffffff
xor eax eax
push sub_1002209d
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] al
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_1000f736
pop ecx
retn
sub_10021f78
mov ecx rw-data
call sub_10003b3c
xor eax eax
push sub_100220a7
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] r--data
mov [ rw-data ] 0xfffffffe
mov [ rw-data ] al
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_1000f736
pop ecx
retn
sub_10001000
mov eax r--data
retn
sub_10001250
push esi
mov esi ecx
call sub_100024d4
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_100016e7
add esp 0x4
sub_10001270
call sub_10001e74
mov eax 0x1
retn
sub_10001280
retn 0x4
sub_10001290
mov eax [ esp + 0x4 ]
push eax
call sub_100016e7
pop ecx
retn 0x4
sub_100012a0
mov eax [ ecx ]
retn
sub_10001330
push 0x8007000e
call sub_100014f0
sub_10001400
mov eax [ esp + 0x4 ]
test eax eax
jl r-xdata
push 0x80070057
call sub_100014f0
mov edx [ ecx ]
cmp eax [ edx - 0x8 ]
jg r-xdata
mov [ edx - 0xc ] eax
mov ecx [ ecx ]
mov [ eax + ecx ] 0x0
retn 0x4
sub_100014f0
mov eax [ esp + 0x4 ]
cmp eax 0x8007000e
jne r-xdata
push eax
call sub_10003465
call sub_100036ed
sub_10001588
xor eax eax
inc eax
retn 0xc
sub_1000158e
push 0x1
push 0x0
call sub_10006162
call sub_10006243
jmp sub_100061f5
j_sub_100036ed
jmp sub_100036ed
sub_100016f2
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x18 ]
test eax eax
je r-xdata
pop ebp
retn 0x14
mov cx [ ebp + 0x14 ]
mov [ eax ] cx
xor eax eax
inc eax
sub_10001b9a
mov eax r--data
retn
sub_10001c32
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010396
push eax
call sub_10001bcc
add esp 0x10
pop ebp
retn
sub_10001cdf
mov edi edi
push ebp
mov ebp esp
call sub_10005a0c
mov ecx [ ebp + 0x8 ]
mov [ eax + 0xc ] ecx
pop ebp
retn 0x4
sub_10001d26
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
jmp sub_10010400
xor eax eax
pop ebp
retn
sub_10001d77
mov eax r--data
retn
sub_10001e4f
cmp [ rw-data ] 0x0
push esi
mov esi ecx
je r-xdata
pop esi
retn
cmp [ esi ] 0xffffffff
je r-xdata
call sub_1000182a
push [ esi ]
call [ rw-data ]
j_sub_10001850
jmp sub_10001850
j_sub_10001e4f
jmp sub_10001e4f
sub_100026ab
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_100024b3
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000278f
xor eax eax
retn 0x10
sub_10002794
mov eax r--data
retn
sub_10002828
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
jmp sub_1001090c
xor eax eax
pop ebp
retn
sub_10002b89
mov edi edi
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
lea ecx [ esi + 0xc ]
pop esi
jmp sub_10001fa8
push eax
call [ CloseHandle@IAT ]
or [ esi + 0x4 ] 0xffffffff
sub_10002baa
mov edi edi
push esi
mov esi ecx
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
call sub_10001560
or [ esi + 0x4 ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov eax esi
pop esi
retn
sub_10003006
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
call sub_10003725
add ecx 0xc
pop ebp
jmp sub_100026e3
sub_1000320a
mov eax rw-data
retn
sub_1000324f
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000fb05
pop ecx
pop ebp
retn 0x4
sub_10003293
mov eax ecx
retn
sub_10003341
mov eax ecx
mov [ eax ] r--data
xor ecx ecx
mov [ eax + 0x10 ] 0x2
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x14 ] cx
mov [ eax + 0x16 ] cx
mov [ eax + 0x4 ] eax
retn
sub_10003364
xor edx edx
lea eax [ ecx + 0x10 ]
inc edx
[ eax ] edx
lea eax [ ecx + 0x4 ]
retn
sub_10003426
mov eax r--data
retn
sub_1000344d
mov edi edi
push esi
mov esi ecx
call sub_10003770
and [ esi + 0x8 ] 0x0
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_100035ef
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_100035ce
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10003606
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_100035ef
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000361d
cmp [ ecx + 0x4 ] 0x0
jle r-xdata
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_1000362b
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x10 ]
sub_100036aa
mov eax r--data
retn
sub_100036b0
mov eax r--data
retn
sub_100036b6
mov eax r--data
retn
sub_100036bc
mov eax r--data
retn
sub_100036ed
mov edi edi
push ebp
mov ebp esp
push ecx
push r--data
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x4 ] rw-data
call sub_10010b44
int3
sub_10003709
mov edi edi
push ebp
mov ebp esp
push ecx
push r--data
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x4 ] rw-data
call sub_10010b44
int3
sub_10003725
mov edi edi
push ebp
mov ebp esp
push ecx
push r--data
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x4 ] rw-data
call sub_10010b44
int3
sub_10003770
mov eax ecx
mov [ eax + 0x4 ] 0x1
retn
sub_1000377a
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x4 ] ecx
pop ebp
retn 0x4
sub_10003a51
xor eax eax
inc eax
retn 0x4
sub_10003a57
mov eax 0x80029c4a
retn 0x8
sub_10003a5f
mov eax r--data
retn
sub_10003a65
mov eax r--data
retn
sub_10003a6b
mov eax r--data
retn
sub_10003aa1
mov eax r--data
retn
sub_10003aa7
mov eax r--data
retn
sub_10003ad3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ CheckMenuItem@IAT ]
pop ebp
retn 0x8
sub_10003aeb
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ EnableMenuItem@IAT ]
pop ebp
retn 0x8
sub_10003b03
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ModifyMenuA@IAT ]
pop ebp
retn 0x10
sub_10003b21
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x20 ]
call [ SendMessageA@IAT ]
pop ebp
retn 0xc
sub_10003b64
mov edi edi
push esi
mov esi ecx
lea ecx [ esi + 0x10 ]
mov eax [ ecx ]
test eax eax
je r-xdata
and [ esi + 0x1c ] 0x0
pop esi
retn
call [ eax + 0x1c ]
sub_10003b7b
call sub_10005a0c
mov eax [ eax + 0x4 ]
mov edx [ eax ]
push 0x1
mov ecx eax
call [ edx + 0x9c ]
retn
sub_10003b90
call sub_10005a0c
mov eax [ eax + 0x4 ]
mov edx [ eax ]
push 0xffffffff
mov ecx eax
call [ edx + 0x9c ]
retn
sub_10003ba5
mov eax r--data
retn
sub_10003ea6
call sub_10005a3f
mov eax [ eax + 0x4 ]
retn
sub_10003eaf
call sub_10005454
add eax 0x30
retn
sub_10003ee2
mov edi edi
push ebp
mov ebp esp
call sub_10005a3f
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
pop ebp
jmp sub_10003eb8
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x6c ]
sub_10003f74
mov ecx [ ebp - 0x14 ]
call sub_1000361d
mov eax r-xdata
retn
sub_10003f82
mov ecx [ ebp - 0x18 ]
call sub_1000361d
mov eax r-xdata
retn
sub_10003f90
mov ecx [ ebp - 0x1c ]
call sub_1000361d
mov eax r-xdata
retn
sub_1000401f
cmp [ ecx + 0x28 ] 0x0
je r-xdata
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_100040c1
call sub_10005454
mov eax [ eax + 0x38 ]
retn
sub_10004148
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10003eb8
sub_10004173
mov eax r--data
retn
sub_100042f4
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000422c
pop ecx
pop ebp
retn 0x4
sub_10004306
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10004198
pop ecx
pop ebp
retn 0x4
sub_10004318
mov eax [ ecx + 0x24 ]
test eax eax
jne r-xdata
retn
mov eax [ ecx + 0x20 ]
test eax eax
jne r-xdata
call [ GetActiveWindow@IAT ]
push eax
call sub_1000af07
j_sub_10004333
jmp sub_10004333
sub_10004641
cmp [ ecx + 0x58 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x58 ]
mov eax [ ecx ]
jmp [ eax + 0x10 ]
xor eax eax
retn
sub_10004652
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x58 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x58 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x14 ]
call sub_10003725
sub_1000468e
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10001510
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100046c8
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000466b
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100048e7
mov ecx [ ebp - 0x130 ]
mov [ ebp - 0x120 ] 0x8
call sub_1000361d
mov eax r-xdata
retn
sub_10004b42
cmp [ ecx + 0x58 ] 0x0
je r-xdata
xor eax eax
inc eax
retn
mov ecx [ ecx + 0x58 ]
mov eax [ ecx ]
jmp [ eax + 0x20 ]
sub_10004b7d
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x58 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x58 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x1c ]
call sub_10003725
sub_10004bc9
mov edi edi
push ebp
mov ebp esp
cmp [ ecx + 0x58 ] 0x0
je r-xdata
xor eax eax
pop ebp
retn 0x4
mov ecx [ ecx + 0x58 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x30 ]
sub_10004c03
mov eax [ ecx + 0x20 ]
push 0x0
push 0x0
push 0x10
push [ eax + 0x20 ]
call [ SendMessageA@IAT ]
retn
sub_10004c74
call sub_10005454
mov eax [ eax + 0xec ]
retn
sub_10004f84
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push ecx
call sub_10004df0
add esp 0x10
pop ebp
retn 0xc
sub_10004fee
mov eax r--data
retn
sub_10005030
mov ecx [ ebp - 0x18 ]
call sub_1000361d
mov eax r-xdata
retn
j_sub_10006142
jmp sub_10006142
sub_1000513d
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
test eax eax
je r-xdata
pop ebp
retn 0x4
pop ebp
jmp eax
sub_10005152
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn 0x8
pop ebp
jmp eax
sub_10005169
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn 0x8
pop ebp
jmp eax
sub_100052e6
mov eax [ rw-data ]
retn
sub_100052ec
mov eax ecx
xor edx edx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x34 ] edx
mov [ eax + 0x54 ] edx
mov [ eax + 0x4c ] ecx
mov [ eax + 0x50 ] edx
retn
sub_1000540a
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
or [ eax + 0x44 ] 0xffffffff
or [ eax + 0x4c ] 0xffffffff
mov [ eax + 0x48 ] ecx
mov [ eax + 0xc ] 0x6c
mov [ eax + 0x28 ] j_sub_100036ed
retn
sub_10005454
push sub_10003741
mov ecx rw-data
call sub_100060b8
test eax eax
jne r-xdata
retn
jmp sub_10003725
sub_10005538
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
mov [ esi ] r--data
je r-xdata
mov ecx [ esi + 0xc ]
sub ecx 0x10
pop esi
jmp sub_10001540
push [ esi + 0x4 ]
call [ FreeLibrary@IAT ]
sub_100058e0
mov ecx [ ebp - 0x18 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
call sub_1000361d
sub_100059a7
mov edi edi
push esi
push 0x1
mov esi ecx
call sub_1000586c
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_10005a3f
call sub_10005a0c
mov ecx eax
add ecx 0x74
call sub_10001f94
test eax eax
jne r-xdata
retn
jmp sub_10003725
sub_10005a90
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
jne r-xdata
pop ebp
retn 0x4
call sub_100036ed
sub_10005aad
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x4
pop ebp
jmp [ LocalFree@IAT ]
sub_10005b5a
mov eax [ ecx ]
test eax eax
je r-xdata
xor eax eax
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push eax
call sub_10005ac3
retn
sub_10005bb3
push 0x10
call sub_100062fa
push 0x0
push 0x0
call sub_10010b44
int3
sub_10005bed
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
pop ebp
retn 0x4
pop ebp
jmp sub_10005b15
sub_10005c06
inc [ rw-data ]
retn
sub_10006162
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
pop ebp
retn 0x8
pop ebp
jmp sub_1000605c
sub_100061f5
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
dec [ rw-data ]
jne r-xdata
retn
push 0x0
call sub_100061d4
and [ rw-data ] 0x0
sub_1000621f
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
retn
push rw-data
mov [ rw-data ] 0x1
call [ InitializeCriticalSection@IAT ]
sub_1000631f
call sub_10005a3f
inc [ eax + 0x10 ]
retn
sub_10006452
push [ ebp + 0x8 ]
call sub_100016a1
push 0x0
push 0x0
call sub_10010b44
int3
sub_10006cd7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
pop ebp
retn 0x4
sub_10006ce6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
sub_10006cf5
and [ ecx + 0x8 ] 0x0
retn
sub_10006cfa
and [ ecx + 0x4 ] 0x0
retn
sub_10006e0c
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ GetClipBox@IAT ]
pop ebp
retn 0x4
sub_10006e21
mov eax r--data
retn
sub_10006e27
mov eax r--data
retn
sub_10006e2d
mov eax r--data
retn
sub_10006e33
mov eax r--data
retn
sub_10006e39
mov edi edi
push ebp
mov ebp esp
push ecx
push r--data
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x4 ] rw-data
call sub_10010b44
int3
sub_10006e55
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100016e7
pop ecx
pop ebp
retn 0x8
sub_10006e67
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
add ecx 0x1c
call sub_1000de92
mov ecx [ ebp + 0xc ]
mov [ eax ] ecx
pop ebp
retn 0x8
sub_10006e94
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ PtVisible@IAT ]
pop ebp
retn 0x8
sub_10006eac
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ RectVisible@IAT ]
pop ebp
retn 0x4
sub_10006ec1
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ TextOutA@IAT ]
pop ebp
retn 0x10
sub_10006f3e
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ DrawTextA@IAT ]
pop ebp
retn 0x10
sub_10006f5c
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ DrawTextExA@IAT ]
pop ebp
retn 0x14
sub_10006faf
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ Escape@IAT ]
pop ebp
retn 0x10
sub_10007180
push 0x8
call sub_100016b8
pop ecx
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_100071bb
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn 0x4
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
sub_100072b2
cmp [ ecx + 0x4 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
call sub_1000727f
push eax
call [ DeleteDC@IAT ]
sub_1000733f
mov edi edi
push ebp
mov ebp esp
push 0x1
call sub_100072cb
mov ecx eax
pop ebp
jmp sub_100063b1
sub_1000737f
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_10007353
push eax
call [ DeleteObject@IAT ]
retn
xor eax eax
retn
sub_10007442
push 0x210
mov eax sub_100218df
call sub_10010018
and [ ebp - 0x4 ] 0x0
mov [ ecx ] r--data
call sub_1000737f
call sub_10010074
retn
sub_10007742
call sub_10005a0c
mov eax [ eax + 0xc ]
retn 0x4
sub_1000774d
call sub_10005a0c
xor ecx ecx
cmp [ eax + 0x2c ] ecx
sete cl
mov eax ecx
retn
sub_1000775d
call sub_10005a0c
add eax 0x2c
push eax
call [ InterlockedIncrement@IAT ]
retn
sub_1000776d
mov edi edi
push ebp
mov ebp esp
call sub_10005a0c
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x30 ] ecx
pop ebp
retn 0x4
sub_10007781
call sub_10005a0c
mov eax [ eax + 0x30 ]
retn
sub_10007a87
mov eax r--data
retn
sub_10008021
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
pop ebp
retn 0x8
sub_1000864b
mov eax r--data
retn
sub_100086f2
mov eax r-xdata
retn
sub_100088cb
cmp [ ecx + 0x4 ] 0x0
je r-xdata
retn
push [ ecx ]
push 0x0
call sub_10005169
sub_100088db
cmp [ ecx + 0x8 ] 0x0
je r-xdata
add ecx 0x4
push ecx
call [ InterlockedIncrement@IAT ]
retn
mov eax [ ecx + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x4 ]
retn
sub_1000894c
cmp [ ecx + 0x8 ] 0x0
je r-xdata
jmp sub_100088f6
mov eax [ ecx + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
retn
sub_10008ab2
push 0x210
mov eax sub_100219fc
call sub_10010018
mov eax ecx
and [ ebp - 0x4 ] 0x0
add eax 0x50
push eax
call sub_100075c0
call sub_10010074
retn
sub_1000949a
push [ ecx + 0x20 ]
call [ GetMenu@IAT ]
push eax
call sub_1000e0c4
retn
sub_100094aa
cmp [ ecx + 0x20 ] 0x0
mov eax [ ecx ]
je r-xdata
jmp [ eax + 0x11c ]
jmp [ eax + 0x60 ]
sub_10009504
lea eax [ ecx + 0x40 ]
retn
sub_10009624
mov edi edi
push esi
mov esi ecx
call sub_10003aad
mov [ esi ] r--data
mov [ esi + 0x28 ] 0x1
mov eax esi
pop esi
retn
sub_1000963f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x28 ] eax
mov [ ecx + 0x18 ] 0x1
pop ebp
retn 0x4
sub_10009655
retn 0x4
sub_10009658
xor eax eax
retn 0x4
sub_1000968e
mov eax r--data
retn
sub_10009694
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_100093ed
pop ebp
retn 0x18
sub_100096b1
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
test eax eax
jne r-xdata
mov [ eax ] 0x1
xor eax eax
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_100096d0
mov eax 0x80004001
retn 0x10
sub_100096d8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
test eax eax
jne r-xdata
and [ eax ] 0x0
mov eax 0x80004001
mov eax 0x80004003
jmp r-xdata
pop ebp
retn 0x8
sub_100096f7
lea eax [ ecx + 0x28 ]
cmp [ eax ] 0x0
jne r-xdata
xor eax eax
push eax
push r--data
push 0xfffffffc
push [ ecx + 0x20 ]
call CreateStdAccessibleObject
test eax eax
jl r-xdata
retn
sub_10009716
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x1c ]
pop ebp
retn 0x4
sub_1000972b
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x20 ]
pop ebp
retn 0x4
sub_10009890
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x48 ]
pop ebp
retn 0x4
sub_100098a5
mov edi edi
push ebp
mov ebp esp
mov eax [ ecx + 0x28 ]
push [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x4c ]
pop ebp
retn 0x4
sub_1000995a
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
mov eax [ ecx + 0x28 ]
push [ ebp + 0xc ]
mov ecx [ eax ]
push [ ebp + 0x8 ]
push eax
call [ ecx + 0x60 ]
pop ebp
retn 0xc
sub_100099bc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0x2c ] eax
xor eax eax
pop ebp
retn 0x4
sub_100099cd
xor eax eax
inc eax
retn
sub_100099d1
mov eax [ ecx + 0x3c ]
and eax 0x10
retn
sub_100099d8
xor eax eax
retn
sub_100099db
mov eax [ ecx + 0xa8 ]
test eax eax
je r-xdata
xor eax eax
retn
cmp eax 0xe002
je r-xdata
cmp eax 0xe001
je r-xdata
xor eax eax
inc eax
retn
sub_100099fa
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
and [ eax ] 0x0
xor eax eax
inc eax
pop ebp
retn 0x4
call sub_10003725
sub_10009a15
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
test eax eax
jne r-xdata
and [ eax ] 0x0
xor eax eax
inc eax
pop ebp
retn 0x10
call sub_10003725
sub_10009a30
mov eax r--data
retn
sub_10009a36
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
push 0x0
call [ eax + 0x4 ]
pop ebp
retn 0x4
sub_10009a49
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push r--data
push eax
call [ ecx ]
pop ebp
retn 0x8
sub_10009ccb
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ GetMenuItemID@IAT ]
pop ebp
retn 0x4
sub_10009ce0
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ GetSubMenu@IAT ]
push eax
call sub_1000e0c4
pop ebp
retn 0x4
sub_10009cfb
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x20 ]
call [ GetWindowRect@IAT ]
pop ebp
retn 0x4
sub_10009d10
push 0x0
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_10009d1c
push 0x1
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_10009d28
mov edi edi
push esi
mov esi ecx
call sub_10005a0c
mov ecx [ eax + 0x4 ]
call sub_10003b7b
mov eax esi
pop esi
retn
sub_10009dd3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
call sub_10009cfb
mov ecx [ ebp + 0x8 ]
call sub_1000dac8
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
pop ebp
retn 0xc
sub_10009df4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push eax
push [ ecx + 0x20 ]
call [ SetMenu@IAT ]
pop ebp
retn 0x4
mov eax [ eax + 0x4 ]
sub_10009f6e
mov [ ecx ] r--data
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
retn
push ecx
call [ FreeLibrary@IAT ]
sub_1000aa07
mov eax [ ecx ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
sub_1000ac2b
push 0x4
mov eax sub_10021a77
call sub_1000ff79
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
call sub_10010051
retn 0x4
call sub_10009d8e
sub_1000ad18
cmp [ ebp - 0x20 ] 0x2
je r-xdata
retn
push [ ebp - 0x1c ]
push 0x0
call sub_10005169
sub_1000ae03
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10005a0c
mov eax [ eax + 0x78 ]
mov ecx [ eax ]
call sub_1000ad58
pop ebp
retn 0x4
j_sub_10009d72
jmp sub_10009d72
sub_1000b4c0
push 0xc
call sub_10005a90
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
retn
sub_1000b4d5
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ ecx + 0x20 ]
call [ GetWindow@IAT ]
push eax
call sub_1000af07
pop ebp
retn 0x4
sub_1000b61a
mov eax [ ebp - 0x18 ]
add eax 0x58
push eax
push [ ebp - 0x14 ]
call sub_10003ee2
cmp [ ebp - 0x14 ] 0x0
mov [ ebp + 0x18 ] eax
je r-xdata
mov eax r-xdata
retn
mov ecx [ ebp - 0x14 ]
call sub_1000361d
sub_1000be54
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x8 ]
neg eax
sbb eax eax
and eax 0xffff3ef9
add eax 0x80010108
pop ebp
retn 0x18
sub_1000be71
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8 ] ecx
xor eax eax
pop ebp
retn 0xc
sub_1000bf46
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
push eax
call sub_1000af07
retn
push [ ecx + 0x20 ]
call [ GetParent@IAT ]
sub_1000c360
xor eax eax
retn 0x8
sub_1000c365
mov eax 0x80004001
retn 0x8
sub_1000c36d
cmp [ ecx + 0xc ] 0x0
jne r-xdata
mov eax [ ecx + 0xc ]
mov ecx [ eax ]
push 0x0
push eax
call [ ecx + 0xc ]
retn
xor eax eax
retn
sub_1000c455
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push r--data
push ecx
call sub_1000c3b2
pop ebp
retn 0x8
sub_1000c46f
mov [ ecx ] r--data
mov [ ecx + 0x4 ] r--data
mov [ ecx + 0x10 ] r--data
mov [ ecx + 0x14 ] 0xc0000001
call sub_1000c36d
jmp sub_100077d6
sub_1000c494
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
inc [ eax + 0x14 ]
mov eax [ eax + 0x14 ]
pop ebp
retn 0x4
sub_1000c4c9
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1000c455
pop ebp
retn 0xc
sub_1000c501
sub [ esp + 0x4 ] 0x10
jmp sub_1000c4a6
sub_1000c50b
sub [ esp + 0x4 ] 0x4
jmp sub_1000c4c9
sub_1000c515
sub [ esp + 0x4 ] 0x10
jmp sub_1000c494
sub_1000c51f
sub [ esp + 0x4 ] 0x10
jmp sub_1000c4c9
sub_1000c529
sub [ esp + 0x4 ] 0x4
jmp sub_1000c4a6
sub_1000c533
sub [ esp + 0x4 ] 0x4
jmp sub_1000c494
sub_1000d3f4
mov ecx [ ebp - 0x20 ]
call sub_1000361d
mov eax r-xdata
retn
sub_1000d41d
push 0x210
mov eax sub_10021bce
call sub_10010018
and [ ebp - 0x4 ] 0x0
call sub_10005a0c
mov ecx [ eax + 0x4 ]
call sub_10003b90
call sub_10010074
retn
sub_1000d6cc
mov eax r--data
retn
sub_1000d74e
push 0x1
call sub_100062fa
push 0x0
push 0x0
call sub_10010b44
int3
sub_1000daba
mov edi edi
push ebp
mov ebp esp
mov ecx [ ecx + 0x4c ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x58 ]
sub_1000dac8
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
jmp [ eax + 0x78 ]
push 0xfffffff0
push [ ecx + 0x20 ]
call [ GetWindowLongA@IAT ]
retn
sub_1000dae2
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
jmp [ eax + 0x7c ]
push 0xffffffec
push [ ecx + 0x20 ]
call [ GetWindowLongA@IAT ]
retn
sub_1000db23
cmp [ ecx + 0x50 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x50 ]
mov eax [ ecx ]
jmp [ eax + 0xa4 ]
push [ ecx + 0x20 ]
call [ IsWindowEnabled@IAT ]
retn
sub_1000dc72
mov edi edi
push ebp
mov ebp esp
mov edx [ ecx + 0x10 ]
mov eax [ ebp + 0x8 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
pop ebp
retn 0x4
call sub_1000dc45
sub_1000ddfe
mov eax r--data
retn
sub_1000de37
mov [ ecx ] r--data
jmp sub_1000dc45
sub_1000dfb8
mov edi edi
push esi
mov esi ecx
mov ecx [ esi + 0x8 ]
call sub_1000e573
and [ esi + 0x8 ] 0x0
and [ esi + 0xc ] 0x0
pop esi
retn
j_sub_1000dfb8
jmp sub_1000dfb8
sub_1000e016
mov eax r--data
retn
sub_1000e01c
push 0x8
call sub_100016b8
pop ecx
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_1000e036
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn 0x4
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
sub_1000e0c4
mov edi edi
push ebp
mov ebp esp
push 0x1
call sub_1000e050
mov ecx eax
pop ebp
jmp sub_100063b1
sub_1000e125
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_1000e0f9
push eax
call [ DestroyMenu@IAT ]
retn
xor eax eax
retn
sub_1000e2f7
mov edi edi
push ebp
mov ebp esp
push 0x1
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e2a6
pop ebp
retn 0xc
sub_1000e311
mov eax rw-data
retn
sub_1000e317
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_1000e32e
push [ ecx + 0x4 ]
mov [ ecx ] r--data
call sub_100016e7
pop ecx
retn
sub_1000e4d0
push 0x14
call sub_100016b8
pop ecx
test eax eax
je r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_1000e317
sub_1000e573
test ecx ecx
je r-xdata
retn
push esi
mov esi [ ecx ]
push ecx
call sub_100016e7
pop ecx
mov ecx esi
test esi esi
jne r-xdata
pop esi
sub_1000e5df
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_1000e7d1
mov [ ecx ] r--data
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
retn
push ecx
call sub_100016e7
pop ecx
sub_1000e92e
mov ecx [ ebp - 0x1c ]
test ecx ecx
je r-xdata
and [ ebp - 0x14 ] 0x0
mov eax r-xdata
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_1000ef65
mov ecx [ ebp - 0x14 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
push ebx
push ebx
call sub_10010b44
int3
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_1000ef83
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_1000ef9a
push [ ecx + 0x4 ]
mov [ ecx ] r--data
call sub_100016e7
pop ecx
retn
sub_1000f071
mov eax rw-data
retn
sub_1000f077
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
call sub_1000ed87
mov eax [ ebp + 0x8 ]
pop ebp
retn 0x8
sub_1000f08e
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push 0x0
call sub_1000ee23
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov eax [ ebp + 0x8 ]
pop ebp
retn 0x8
sub_1000f0a9
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
retn
sub_1000f0c0
push [ ecx + 0x4 ]
mov [ ecx ] r--data
call sub_100016e7
pop ecx
retn
sub_1000f261
push 0x14
call sub_100016b8
pop ecx
test eax eax
je r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_1000f0a9
sub_1000f3fb
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f373
add esp 0x14
pop ebp
retn
sub_1000f5f3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x8 ]
push sub_1001373a
call sub_1000f59c
add esp 0x10
pop ebp
retn
sub_1000f730
call sub_10010128
retn
sub_1000f736
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000f6fa
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_1000f74d
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_10015951
pop ecx
retn
sub_1000f9a6
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_100163b4
pop ecx
pop ecx
retn
sub_1000fa32
push 0x4
call sub_1001650c
pop ecx
retn
sub_1000fb5b
push 0x4
call sub_1001650c
pop ecx
retn
sub_10010051
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10010065
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000f298
jmp sub_10010051
sub_10010074
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_1000f298
jmp sub_10010051
sub_10010107
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100100dc
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1001011f
push 0x8
call sub_100165e6
pop ecx
retn
sub_10010128
push 0x8
call sub_1001650c
pop ecx
retn
sub_1001030e
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1001650c
pop ecx
sub_10010323
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_100101f7
add esp 0xc
pop ebp
retn
sub_10010339
push 0x1
push 0x0
push 0x0
call sub_100101f7
add esp 0xc
retn
sub_10010703
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100189ba
add esp 0x14
pop ebp
retn
sub_10010765
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10010a6d
push 0x4
call sub_1001650c
pop ecx
retn
sub_10010bd8
mov ecx [ ebp - 0x1c ]
xor ecx ebp
call sub_1000f298
jmp sub_10010765
sub_10010c06
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100125b0
sub_10012360
push 0x4
call sub_1001650c
pop ecx
retn
sub_100124b7
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100123f0
add esp 0xc
pop ebp
retn
sub_10012595
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100124ce
add esp 0xc
pop ebp
retn
sub_100127cd
push 0x4
call sub_1001650c
pop ecx
retn
sub_100128da
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001281e
add esp 0xc
pop ebp
retn
sub_10012bbc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push 0x1
call sub_10012907
pop ecx
pop ebp
retn
sub_10012eaf
retn
sub_10012eb0
mov eax sub_1001b27a
mov [ rw-data ] eax
mov [ rw-data ] sub_1001a961
mov [ rw-data ] sub_1001a915
mov [ rw-data ] sub_1001a94e
mov [ rw-data ] sub_1001a8b7
mov [ rw-data ] eax
mov [ rw-data ] sub_1001b1f2
mov [ rw-data ] sub_1001a8d3
mov [ rw-data ] sub_1001a835
mov [ rw-data ] sub_1001a7c2
retn
sub_10012f10
mov edi edi
push ebp
mov ebp esp
call sub_10012eb0
call sub_1001b306
cmp [ ebp + 0x8 ] 0x0
mov [ rw-data ] eax
je r-xdata
fnclex
pop ebp
retn
call sub_1001b29d
sub_10013201
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100130da
add esp 0xc
pop ebp
retn
sub_10013537
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10015287
push 0x0
call sub_10015215
pop ecx
retn
sub_10015302
call [ TlsAlloc@IAT ]
retn 0x4
sub_10015451
push 0xd
call sub_1001650c
pop ecx
retn
sub_1001545a
push 0xc
call sub_1001650c
pop ecx
retn
sub_10015610
push 0xd
call sub_1001650c
pop ecx
retn
sub_1001561c
push 0xc
call sub_1001650c
pop ecx
retn
sub_100159b8
push 0xe
call sub_1001650c
pop ecx
retn
sub_10015c95
xor eax eax
inc eax
retn
sub_1001650c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100165dd
push 0xa
call sub_1001650c
pop ecx
retn
sub_100172c1
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10017316
mov [ ecx ] r--data
jmp sub_1001c797
sub_10017472
push [ ebp - 0x14 ]
call sub_100173a7
pop ecx
retn
sub_100174b6
call sub_100154dc
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_100154dc
add eax 0x90
dec [ eax ]
sub_10017559
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_10017562
mov esp [ ebp - 0x18 ]
call sub_10017fb1
sub_1001760f
push 0x4
mov eax sub_10021cc3
call sub_1000ffac
call sub_100154dc
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10017fea
call sub_10017ffd
sub_100176e8
mov eax [ ebp - 0x14 ]
call sub_100174d1
retn
sub_1001795f
xor eax eax
inc eax
retn
sub_10017963
mov esp [ ebp - 0x18 ]
call sub_10017fb1
sub_100179f8
xor eax eax
inc eax
retn
sub_100179fc
mov esp [ ebp - 0x18 ]
call sub_10017fb1
sub_10017eae
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1001c73a
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10017fb1
push 0x8
push r--data
call sub_10010720
call sub_100154dc
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10018d1f
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10017fd1
xor eax eax
inc eax
retn
sub_10017fea
call sub_100154dc
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_10017fb1
call eax
sub_10018021
xor eax eax
inc eax
retn
sub_10018035
push sub_10017fb1
call sub_10015215
pop ecx
mov [ rw-data ] eax
retn
sub_100181db
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov eax [ ecx ]
xor edx edx
cmp eax 0xc0000005
sete dl
mov eax edx
retn
sub_1001820d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_10018262
push [ rw-data ]
call sub_10015290
pop ecx
retn
sub_100183e3
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1001650c
pop ecx
sub_1001841f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001842e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001843d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001846d
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_10018484
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x20 ] 0xc0000017
jne r-xdata
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
push 0x8
call [ SetLastError@IAT ]
sub_100188fb
push 0xc
push r--data
call sub_10010720
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_10018918
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_100189ad
call sub_1001894b
mov [ rw-data ] eax
xor eax eax
retn
sub_10018ca2
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10018bcc
add esp 0xc
pop ebp
retn 0x4
sub_10018cd5
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1001c905
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10018d08
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10018bcc
add esp 0xc
pop ebp
retn 0x8
sub_10019118
push 0xd
call sub_1001650c
pop ecx
retn
sub_100194e3
push 0xd
call sub_1001650c
pop ecx
retn
sub_1001951c
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10019382
pop ecx
mov [ rw-data ] 0x1
sub_10019853
push 0xc
call sub_1001650c
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_10019f16
mov eax rw-data
retn
sub_10019f1c
mov eax rw-data
retn
sub_10019f22
mov eax rw-data
retn
sub_10019f28
mov eax rw-data
retn
sub_10019f2e
mov edi edi
push ebp
mov ebp esp
call sub_10019f16
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_10019f3f
mov edi edi
push ebp
mov ebp esp
call sub_10019f1c
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_10019f50
mov edi edi
push ebp
mov ebp esp
call sub_10019f22
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_1001a20f
push 0x7
call sub_1001650c
pop ecx
retn
sub_1001a6be
push 0x6
call sub_1001650c
pop ecx
retn
sub_1001a6ff
push 0x6
call sub_1001650c
pop ecx
retn
sub_1001a915
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a8d3
add esp 0x10
pop ebp
retn
sub_1001a94e
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001a7c2
pop ecx
pop ecx
pop ebp
retn
sub_1001a961
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001a835
pop ecx
pop ecx
pop ebp
retn
sub_1001b4f9
push 0x4
call sub_1001650c
pop ecx
retn
sub_1001b51b
and [ rw-data ] 0x0
retn
sub_1001b6b7
push [ ebp + 0x8 ]
call sub_1001dca8
pop ecx
retn
sub_1001bec6
push [ ebp + 0x8 ]
call sub_1001dca8
pop ecx
retn
sub_1001bf7d
mov eax rw-data
retn
sub_1001c034
call sub_1001dfbd
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000fb05
pop ecx
retn
call sub_1001dd94
sub_1001c164
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_1001c2e6
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001c17a
add esp 0x14
pop ebp
retn
sub_1001c33b
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001c303
pop ecx
pop ecx
pop ebp
retn
sub_1001c797
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
push [ ecx + 0x4 ]
call sub_1000fb05
pop ecx
sub_1001c7ad
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_1001c7db
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_1001c8d9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1001c810
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1001c924
call eax
retn
sub_1001c927
push 0x2
call sub_100100b3
pop ecx
retn
sub_1001cae6
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001c9cf
add esp 0x10
pop ebp
retn
sub_1001d34e
call sub_100154dc
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ eax + 0x4 ]
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_100197e9
sub_1001dc9f
push 0xa
call sub_1001650c
pop ecx
retn
sub_1001de2a
push 0x1
call sub_1001650c
pop ecx
retn
sub_1001df85
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1001c103
pop ecx
pop ecx
retn
sub_1001dfb4
push 0x1
call sub_1001650c
pop ecx
retn
sub_1001dfbd
push 0x1
call sub_1001dee3
pop ecx
retn
sub_1001e3a3
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e2b5
add esp 0x10
pop ebp
retn
sub_10020335
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_1002046c
push esi
call sub_1001c0c7
pop ecx
retn
sub_1002054b
push [ ebp + 0x8 ]
call sub_1001dca8
pop ecx
retn
sub_10020f7d
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_10021121
push [ ebp + 0x8 ]
call sub_1001dca8
pop ecx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
ClosePrinter
jmp [ ClosePrinter@IAT ]
DocumentPropertiesA
jmp [ DocumentPropertiesA@IAT ]
OpenPrinterA
jmp [ OpenPrinterA@IAT ]
sub_10021193
mov edi edi
push esi
push 0x18
mov esi ecx
push 0x0
push esi
call sub_100105c0
add esp 0xc
mov eax esi
pop esi
retn
sub_100211a9
push 0xc
push r--data
call sub_10010720
and [ ebp - 0x4 ] 0x0
push ecx
call [ InitializeCriticalSection@IAT ]
and [ ebp - 0x1c ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10010765
retn
sub_100211c6
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_100211f4
mov edi edi
push esi
mov esi ecx
lea ecx [ esi + 0x14 ]
call sub_10021193
xor eax eax
mov [ esi + 0x2c ] eax
mov [ esi + 0x30 ] eax
mov [ esi + 0x34 ] eax
mov eax esi
pop esi
retn
sub_10021210
mov edi edi
push esi
mov esi ecx
lea eax [ esi + 0x14 ]
push eax
call [ DeleteCriticalSection@IAT ]
lea ecx [ esi + 0x2c ]
pop esi
jmp sub_10021174
sub_10021268
mov eax CreateStdAccessibleObject@IAT
jmp sub_10021272
sub_10021272
push ecx
push edx
push eax
push __delay_import_directory_entries
call sub_10021299
pop edx
pop ecx
jmp eax
CreateStdAccessibleObject
jmp [ CreateStdAccessibleObject@IAT ]
sub_10021289
mov eax LresultFromObject@IAT
jmp sub_10021272
LresultFromObject
jmp [ LresultFromObject@IAT ]
sub_100214e0
push [ ebp - 0x10 ]
call sub_10005aad
retn
sub_100214e9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021504
lea ecx [ ebp - 0x12c ]
jmp j_sub_10001e4f
sub_1002150f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x16c ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021537
mov ecx [ ebp - 0x10 ]
jmp sub_10003fd7
sub_1002153f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_1002155a
mov ecx [ ebp - 0x21c ]
jmp sub_10003fd7
sub_10021565
lea ecx [ ebp - 0x218 ]
jmp sub_100014d0
sub_10021570
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x224 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021598
mov ecx [ ebp - 0x10 ]
jmp sub_100014d0
sub_100215a0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100215bb
mov ecx [ ebp - 0x21c ]
add ecx 0xc
jmp sub_100014d0
sub_100215c9
lea ecx [ ebp - 0x218 ]
jmp sub_100014d0
sub_100215d4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x224 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100215fc
lea ecx [ ebp - 0x154 ]
jmp sub_100014d0
sub_10021607
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x168 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_1002162f
mov ecx [ ebp - 0x10 ]
add ecx 0x10
jmp sub_100014d0
sub_1002163a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021655
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021670
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x8 ]
jmp sub_100014d0
sub_10021689
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100216a4
lea ecx [ ebp - 0x124 ]
jmp sub_100014d0
sub_100216af
lea ecx [ ebp - 0x120 ]
jmp sub_100014d0
sub_100216ba
lea ecx [ ebp - 0x120 ]
jmp sub_100014d0
sub_100216c5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x134 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100216ed
lea ecx [ ebp - 0x11c ]
jmp sub_100014d0
sub_100216f8
lea ecx [ ebp - 0x130 ]
jmp sub_100014d0
sub_10021703
lea ecx [ ebp - 0x124 ]
jmp sub_100014d0
sub_1002170e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x134 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021736
lea ecx [ ebp - 0x10 ]
jmp sub_100014d0
sub_1002173e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021759
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021774
mov ecx [ ebp - 0x10 ]
add ecx 0x34
jmp sub_100014d0
sub_1002177f
mov ecx [ ebp - 0x10 ]
add ecx 0x74
jmp j_sub_10006142
sub_1002178a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100217a5
mov ecx [ ebp - 0x14 ]
add ecx 0x34
jmp sub_100014d0
sub_100217b0
mov ecx [ ebp - 0x14 ]
add ecx 0x74
jmp j_sub_10006142
sub_100217bb
push [ ebp + 0x8 ]
call sub_10005aad
retn
sub_100217c4
push [ ebp + 0x8 ]
call sub_10005aad
retn
sub_100217cd
push [ ebp + 0x8 ]
call sub_10005aad
retn
sub_100217d6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100217f1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_1002180c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021827
push rw-data
push [ ebp - 0x10 ]
call sub_10012eaf
pop ecx
pop ecx
retn
sub_10021837
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021852
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_1002186d
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp j_sub_1000dfb8
sub_10021878
mov ecx [ ebp - 0x10 ]
add ecx 0x1c
jmp sub_1000de37
sub_10021883
mov ecx [ ebp - 0x10 ]
add ecx 0x38
jmp sub_1000de37
sub_1002188e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100218a9
lea ecx [ ebp - 0x10 ]
jmp sub_100014d0
sub_100218b1
lea ecx [ ebp - 0x18 ]
jmp sub_100014d0
sub_100218b9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100218d4
lea ecx [ ebp - 0x218 ]
jmp sub_100014d0
sub_100218df
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x220 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021907
lea ecx [ ebp - 0x10 ]
jmp sub_100014d0
sub_1002190f
lea ecx [ ebp + 0x10 ]
jmp sub_100014d0
sub_10021917
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021932
mov eax [ ebp - 0x13c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x13c ] 0xfffffffe
mov ecx [ ebp - 0x140 ]
jmp sub_100014d0
sub_10021954
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x144 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_1002197c
lea ecx [ ebp - 0x14 ]
jmp sub_100014d0
sub_10021984
lea ecx [ ebp + 0x10 ]
jmp sub_100014d0
sub_1002198c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100219a7
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_100014d0
sub_100219b2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100219cd
push [ ebp - 0x14 ]
call sub_10001290
retn
sub_100219d6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_100219f1
lea ecx [ ebp - 0x218 ]
jmp sub_100014d0
sub_100219fc
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x220 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021a24
lea ecx [ ebp - 0x14 ]
jmp sub_100088cb
sub_10021a2c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021a47
push [ ebp - 0x10 ]
call sub_10001290
retn
sub_10021a50
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021a6b
push [ ebp + 0x8 ]
push [ ebp - 0x10 ]
call sub_10006e55
retn
sub_10021a77
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021a92
push [ ebp + 0x8 ]
call sub_100016e7
pop ecx
retn
sub_10021a9c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021ab7
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x48 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021ad2
mov ecx [ ebp - 0x10 ]
jmp sub_10003b64
sub_10021ada
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021af5
lea ecx [ ebp - 0x60 ]
jmp sub_1000b6a6
sub_10021afd
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x64 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021b18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021b33
lea ecx [ ebp - 0x18 ]
jmp sub_100088cb
sub_10021b3b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x158 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021b63
lea ecx [ ebp - 0x14 ]
jmp j_sub_10009d72
sub_10021b6b
lea ecx [ ebp - 0x28 ]
jmp sub_100072b2
sub_10021b73
lea ecx [ ebp - 0x7c ]
jmp sub_1000b6a6
sub_10021b7b
lea ecx [ ebp - 0x28 ]
jmp sub_100072b2
sub_10021b83
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x80 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021b9e
push [ ebp - 0x1c ]
call sub_100016e7
pop ecx
retn
sub_10021ba8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021bc3
lea ecx [ ebp - 0x218 ]
jmp sub_100014d0
sub_10021bce
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x220 ]
xor ecx eax
call sub_1000f298
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021bf6
lea ecx [ ebp + 0xb ]
jmp sub_1000d41d
sub_10021bfe
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021c19
lea ecx [ ebp + 0xc ]
jmp sub_1000aa07
sub_10021c21
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021c3c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021c57
push [ ebp - 0x20 ]
call sub_10001290
retn
sub_10021c60
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021c7b
push [ ebp - 0x18 ]
call sub_10001290
retn
sub_10021c84
push [ ebp - 0x18 ]
call sub_10001290
retn
sub_10021c8d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021ca8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021cc3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021ce0
mov ecx [ ebp - 0x4448 ]
jmp sub_100024d4
sub_10021ceb
lea ecx [ ebp - 0x4434 ]
jmp sub_10002cb2
sub_10021cf6
lea ecx [ ebp - 0x4424 ]
jmp sub_100014d0
sub_10021d01
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x444c ]
xor ecx eax
call sub_1000f298
mov eax r--data
jmp sub_1000fc20
sub_10021d20
mov ecx rw-data
call sub_10001010
push sub_10022020
call sub_1000f736
pop ecx
retn
sub_10021d36
call sub_10005c06
push sub_1000158e
call sub_1000f736
pop ecx
mov [ rw-data ] al
retn
sub_10021d4c
mov ecx rw-data
jmp sub_10003341
sub_10021d56
push sub_1002202a
call sub_1000f736
pop ecx
retn
sub_10021d62
push sub_10022035
call sub_1000f736
pop ecx
retn
sub_10021d6e
push sub_10022040
call sub_1000f736
pop ecx
retn
sub_10021d7a
push sub_1002204b
call sub_1000f736
pop ecx
retn
sub_10021d86
push sub_10022055
call sub_1000f736
pop ecx
retn
sub_10021d92
push 0x0
mov ecx rw-data
call sub_1000377a
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push sub_1002205f
mov [ rw-data ] r--data
mov [ rw-data ] 0xf022
call sub_1000f736
pop ecx
retn
sub_10021dcc
push 0x0
mov ecx rw-data
call sub_1000377a
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push sub_1002206a
mov [ rw-data ] r--data
mov [ rw-data ] 0xf024
call sub_1000f736
pop ecx
retn
sub_10021e06
mov ecx rw-data
call sub_10008a69
push sub_10022075
call sub_1000f736
pop ecx
retn
sub_10021e1c
push sub_1002207f
call sub_1000f736
pop ecx
retn
sub_10021e28
push r--data
call [ RegisterWindowMessageA@IAT ]
mov [ rw-data ] eax
retn
sub_10021fe5
push rw-data
call sub_10005087
retn
sub_10021ff0
call sub_1000e507
mov [ rw-data ] eax
retn
sub_10021ffb
push rw-data
call sub_10005087
retn
sub_10022006
mov ecx rw-data
call sub_10021228
push sub_100220b1
call sub_1000f736
pop ecx
retn
sub_10022020
mov ecx rw-data
jmp sub_100024d4
sub_1002202a
mov [ rw-data ] r--data
retn
sub_10022035
mov [ rw-data ] r--data
retn
sub_10022040
mov [ rw-data ] r--data
retn
sub_1002204b
mov ecx rw-data
jmp sub_10006142
sub_10022055
mov ecx rw-data
jmp sub_10005bc4
sub_1002205f
mov [ rw-data ] r--data
retn
sub_1002206a
mov [ rw-data ] r--data
retn
sub_10022075
mov ecx rw-data
jmp sub_10008ab2
sub_1002207f
mov ecx rw-data
jmp sub_10005bc4
sub_10022089
mov ecx rw-data
jmp sub_1000b6a6
sub_10022093
mov ecx rw-data
jmp sub_1000b6a6
sub_1002209d
mov ecx rw-data
jmp sub_1000b6a6
sub_100220a7
mov ecx rw-data
jmp sub_1000b6a6
sub_100220b1
mov ecx rw-data
jmp sub_10021210
